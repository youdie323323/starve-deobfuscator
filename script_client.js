(function () {
    Math.floor(223[223 .ΔⲆⲆΔⵠΔⲆ]);
    var aj = 128;
    if (aj === 5) {
        aj = 179;
    }
    const bj = window;
    let cj = 158;
    const dj = function (a) {
        let b = "";
        for (let c = 0; c < a.length; c++) {
            b += bj.String.fromCharCode(a[c] ^ cj++ % 255);
        }
        return b;
    };
    var n = 94;
    if (n >= 1) {
        n = 94;
    }
    var ej = 202;
    if (ej >= 2) {
        ej = 76;
    }
    Math.floor(42[42 .ⲆⲆᐃⲆⵠΔⲆᐃⵠ]);
    var fj = 113;
    if (fj == 5) {
        fj = 165;
    }
    var gj = 179;
    if (gj === 12) {
        gj = 43;
    }
    Math.floor(67[67 .ⵠⵠⲆⵠⲆᐃⵠᐃᐃ]);
    Math.floor(189[189 .ⲆⵠⵠⵠΔΔΔᐃⲆ]);
    var hj = 109;
    if (hj == 9) {
        hj = 0;
    }
    const ij = false;
    const l = -8;
    const jj = undefined;
    const g = 14;
    const b = 8;
    const d = 0;
    const u = -4;
    const m = 256;
    const c = 6;
    const p = 2;
    const v = 17;
    const C = 18;
    const f = true;
    const z = 19;
    const y = 255;
    const w = 15;
    const P = 20;
    const A = 100;
    const k = 16;
    const x = 2;
    const J = 9;
    const M = 1 << 2;
    const B = 12;
    const D = 2048;
    const E = 6;
    const I = 10;
    const S = 13;
    const Q = 11;
    const T = 1 << 12;
    const F = 3;
    const R = f;
    const j = 5;
    const G = 7;
    const W = 4;
    const L = 256;
    const O = 6;
    const N = 12;
    const H = 4;
    const q = 15;
    const U = 6;
    const Y = 1;
    let K;
    let _;
    const kj = 12;
    const Z = 16;
    let ee = jj;
    const lj = ij;
    const te = 255;
    let ne;
    const mj = 256;
    const ae = 5;
    let re;
    const nj = 7;
    let he;
    let oj = jj;
    let pj = jj;
    const qj = 2;
    const be = 8;
    const rj = ij;
    let de = [];
    let me = "_";
    const ve = 20;
    let pe;
    const sj = 19;
    const tj = jj;
    let fe;
    let Te = tj;
    const uj = tj;
    const we = 9;
    const vj = jj;
    const Ae = 13;
    let ke;
    let Pe;
    let wj;
    let xj;
    let yj = jj;
    let zj = tj;
    let Aj = vj;
    const Bj = 13;
    let Se;
    let Cj = uj;
    const Dj = 0;
    let Fe;
    let Ej;
    let Fj = jj;
    const Gj = lj;
    let We;
    const Hj = 5;
    let Oe;
    const Ij = 17;
    let He;
    let Jj = vj;
    const Kj = 0;
    const Ye = 11;
    const Ke = 20;
    let Ve = uj;
    const Lj = 100;
    let Ze;
    let Mj;
    let Nj;
    let Oj;
    let Pj;
    let Qj = uj;
    const Rj = 18;
    const ai = 0;
    let ri = jj;
    const Sj = 14;
    const hi = R;
    const li = 12;
    let gi;
    let Tj = tj;
    let Uj = tj;
    let Vj = jj;
    let Wj = tj;
    const Xj = 19;
    let ci;
    let Yj;
    const Zj = 10;
    let Ti;
    const $j = 5;
    const zi = 256;
    let yi = jj;
    const _j = 15;
    const Pi = 18;
    const Ai = 16;
    let ki;
    let ak;
    let bk;
    let ck = tj;
    let dk = vj;
    let ek = jj;
    const fk = 3;
    const Ii = 255;
    let Si = 0;
    let gk = vj;
    const hk = 19;
    if (!bj.WebAssembly || !bj.WebAssembly.instantiate) {
        ΔⲆⵠⵠᐃⲆⵠⵠⵠ();
    }
    const Fi = {
        Date: Date
    };
    bj.WebAssembly.instantiate(Uint8Array.from(bj.atob(""), function (a) {
        return a.charCodeAt(0);
    }), Fi).then(function (a) {
        K = a.instance;
        _ = K.exports;
        ee = _.memory;
        ne = ee.buffer;
        re = _.__pin;
        he = _.__unpin;
        oj = _.__new;
        pj = _.__collect;
        me = "_";
        for (let b = 0; b < 31; b++) {
            de[b] = _[me + b];
        }
        pe = _.__rtti_base;
        fe = new Float32Array(ne);
        Te = new Float64Array(ne);
        yj = new BigUint64Array(ne);
        ke = new Uint32Array(ne);
        Pe = new Uint16Array(ne);
        wj = new Uint8Array(ne);
        zj = new BigInt64Array(ne);
        xj = new Int32Array(ne);
        Aj = new Int16Array(ne);
        Cj = new Int8Array(ne);
        Yj = de[26];
        We = de[2];
        Uj = de[13];
        dk = de[7];
        ck = de[24];
        Tj = de[18];
        Oe = de[29];
        yi = de[12];
        Fe = de[16];
        Wj = de[14];
        Ej = de[4];
        Vj = de[10];
        Qj = de[9];
        gi = de[21];
        Nj = de[6];
        Jj = de[11];
        Ve = de[25];
        bk = de[5];
        Ti = de[0];
        Se = de[8];
        Mj = de[17];
        Pj = de[22];
        He = de[30];
        ci = de[20];
        ki = de[3];
        ek = de[28];
        Fj = de[19];
        ak = de[1];
        Oj = de[15];
        ri = de[23];
        Ze = de[27];
        Si = 1;
        if (gk) {
            gk();
        }
    });
    const Ri = 4;
    const ji = 8;
    const Gi = 3;
    const Wi = function (a) {
        return ke[(pe + 4 >>> 2) + (a << 1)];
    };
    const Li = uj;
    const Oi = 2;
    function Ni(a) {
        return 31 - Math.clz32(a >>> 6 & 31);
    }
    const Hi = 6;
    function qi(a, b, c) {
        if (c) {
            switch (a) {
                case 2:
                    return fe;
                case 3:
                    return Te;
            }
        } else {
            switch (a) {
                case 0:
                    if (b) {
                        return Cj;
                    } else {
                        return wj;
                    }
                case 1:
                    if (b) {
                        return Aj;
                    } else {
                        return Pe;
                    }
                case 2:
                    if (b) {
                        return xj;
                    } else {
                        return ke;
                    }
                case 3:
                    if (b) {
                        return zj;
                    } else {
                        return yj;
                    }
            }
        }
    }
    const Ui = lj;
    const Yi = 255;
    function Ki(b) {
        const c = ke[b + l >>> 2];
        const d = Wi(c);
        const e = Ni(d);
        let f = d & M ? b : ke[b + 4 >>> 2];
        const g = d & 2 ? ke[b + 12 >>> 2] : ke[f + u >>> 2] >>> e;
        return qi(e, d & 2048, d & T).subarray(f >>>= e, f + g);
    }
    const Vi = f;
    const Xi = 17;
    const Zi = 1;
    const $i = 7;
    const ik = 15;
    const jk = Vi;
    function kk(b, c, d) {
        const e = b ^ 63634;
        const f = (c | 4723) & ~(c & 4723);
        const g = ~(d & 6440) & 6440 | ~(d & 6440) & d;
        const a = function (b, c, d, e, f, i) {
            const a = ((b + 26740) * 1664525 + 1013904223) % 4294967296;
            const j = (0 << (c & 255)) + (8 << (c >> 8 & 255)) + (24 << (c >> 24 & 255)) + (16 << (c >> 16 & 255));
            const k = (16 << (f >> 24 & 255)) + (24 << (f >> 8 & 255)) + (8 << (f >> 16 & 255)) + (0 << (f & 255));
            const h = (2531011 + (i + 46278) * 214013) % 4294967296;
            const l = Fm(a, j, ~(d & 51888) & (d | 51888), e ^ 18545);
            const g = function (b, c, d, e) {
                const f = ~(b & 46989) & (b | 46989);
                const g = ~(c & 24259) & (c | 24259);
                const a = (33534 + d) % 65400;
                const h = pw(f, g, a, ((35747 + e) * 1103515245 + 12345) % 2147483648);
                (function (b, c, d) {
                    const e = ~(b & 6897) & b | ~(b & 6897) & 6897;
                    const f = (c | 10949) & ~(c & 10949);
                    const g = (d | 61335) & ~(d & 61335);
                    const a = Hg(e, f, g, e, f, g);
                    const h = function (b, c, d, e, f) {
                        const i = ~(b & 8915) & (b | 8915);
                        const a = ((c + 45384) * 1103515245 + 12345) % 2147483648;
                        const j = (1 + (36810 + d) * 22695477) % 4294967296;
                        const k = (8 << (e >> 16 & 255)) + (0 << (e >> 24 & 255)) + (24 << (e & 255)) + (16 << (e >> 8 & 255));
                        const h = (2531011 + (f + 27559) * 214013) % 4294967296;
                        const l = Ak(i, a);
                        (function (b, c, d, e, f, i) {
                            const a = ~(b & 30234) & (b | 30234);
                            const j = ~(c & 9612) & 9612 | ~(c & 9612) & c;
                            const k = ((d + 6819) * 1103515245 + 12345) % 2147483648;
                            const h = (f | 44236) & ~(f & 44236);
                            const l = (0 << (i >> 8 & 255)) + (16 << (i >> 16 & 255)) + (8 << (i >> 24 & 255)) + (24 << (i & 255));
                            const g = ir(a, j, k, ((e + 53913) * 1103515245 + 12345) % 2147483648);
                            (function (b, c, d, e, f) {
                                const i = (b + 57456) % 65343;
                                const a = (39620 + c) % 65429;
                                const j = ~(d & 10683) & 10683 | ~(d & 10683) & d;
                                const k = ~(e & 16156) & e | ~(e & 16156) & 16156;
                                const h = (55109 + f) % 65308;
                                const l = gr(i, a, j, k, h, i);
                                df(a, j, k, h);
                            })(h, l, a, j, k);
                        })(j, k, h, i, a, j);
                        return l ^ 36186;
                    }(e, f, g, e, f);
                })(f, g, a);
                return (h | 25571) & ~(h & 25571);
            }(k, h, a, j);
            return (24 << ((l ^ g) >> 16 & 255)) + (16 << ((l ^ g) >> 24 & 255)) + (8 << ((l ^ g) >> 0 & 255)) + (0 << ((l ^ g) >> 8 & 255));
        }(e, f, g, e, f, g);
        gr(e, f, g, e, f, g);
        return ~(a & 61065) & a | ~(a & 61065) & 61065;
    }
    const lk = "development";
    const mk = "production";
    const nk = 11;
    const ok = 9;
    const pk = 13;
    function qk(a) {
        this.ᐃⲆⲆⵠ = 2147483648;
        this.a = 1103515245;
        this.c = 12345;
        this.state = a || Math.floor(Math.random() * (this.ᐃⲆⲆⵠ - 1));
    }
    function rk(b, c, d, e, f) {
        const g = (16 << (b >> 24 & 255)) + (0 << (b & 255)) + (8 << (b >> 16 & 255)) + (24 << (b >> 8 & 255));
        const a = ~(c & 39473) & (c | 39473);
        const i = (d | 40312) & ~(d & 40312);
        const j = (16 << (f >> 24 & 255)) + (0 << (f >> 8 & 255)) + (8 << (f & 255)) + (24 << (f >> 16 & 255));
        const h = df(g, a, i, ~(e & 61769) & 61769 | ~(e & 61769) & e);
        (function (b, c, d, e) {
            const f = ((b + 22047) * 214013 + 2531011) % 4294967296;
            const g = ~(c & 8462) & 8462 | ~(c & 8462) & c;
            const a = ((15740 + d) * 2147483629 + 2147483587) % 2147483647;
            const i = (1013904223 + (e + 49415) * 1664525) % 4294967296;
            const j = lr(f, g, a, i);
            const h = Bg(f, g, a, i, f, g);
        })(j, g, a, i);
        return ~(h & 44776) & h | ~(h & 44776) & 44776;
    }
    qk.prototype.random = function () {
        this.state = (this.a * this.state + this.c) % this.ᐃⲆⲆⵠ;
        return this.state / this.ᐃⲆⲆⵠ;
    };
    qk.prototype.ⲆⵠⲆᐃⲆⵠⲆ = function (a) {
        this.state = a;
    };
    ᐃΔΔⲆⲆΔⵠ = 10000;
    ⲆⲆᐃᐃⲆⵠⲆ = [];
    var sk = new qk();
    sk.ⲆⵠⲆᐃⲆⵠⲆ(new Date().getTime());
    const tk = 7;
    for (var uk = 0; uk < ᐃΔΔⲆⲆΔⵠ; uk++) {
        ⲆⲆᐃᐃⲆⵠⲆ.push(sk.random());
    }
    const vk = 12;
    function wk(b, c, d, e, f) {
        const i = ((b + 14772) * 2147483629 + 2147483587) % 2147483647;
        const a = c ^ 63080;
        const j = ((d + 60304) * 22695477 + 1) % 4294967296;
        const k = ~(e & 5467) & 5467 | ~(e & 5467) & e;
        const h = (f | 40165) & ~(f & 40165);
        const l = function (b, c, d, e) {
            const f = (b | 57611) & ~(b & 57611);
            const i = ((c + 56889) * 1664525 + 1013904223) % 4294967296;
            const a = d ^ 62842;
            const j = ~(e & 1179) & e | ~(e & 1179) & 1179;
            const k = Dk(f, i, a, j);
            const h = an(f, i, a, j);
            yk(f, i, a, j);
            const l = (24 << ((k ^ h) >> 24 & 255)) + (8 << ((k ^ h) >> 16 & 255)) + (16 << ((k ^ h) >> 32 & 255)) + (32 << ((k ^ h) >> 8 & 255));
            return ~(l & 63304) & (l | 63304);
        }(i, a, j, k);
        const g = mn(h, i, a, j, k);
        return ((28765 + ((16 << ((l ^ g) >> 24 & 255)) + (8 << ((l ^ g) >> 16 & 255)) + (24 << ((l ^ g) >> 32 & 255)) + (32 << ((l ^ g) >> 8 & 255)) ^ zn(h, i, a, j, k, h))) * 1664525 + 1013904223) % 4294967296;
    }
    function xk(b, c, d, e, f, g) {
        ki(Tu, b, c, d, e, f, g);
        const a = Qv(Cc[0], Cc[1], Cc[2], Cc[3]);
        Qv(Cc[4], Cc[5], Cc[0], Cc[1]);
        return a ^ 50389;
    }
    function yk(b, c, d, e) {
        const f = ~(b & 59259) & b | ~(b & 59259) & 59259;
        const i = ~(c & 56097) & c | ~(c & 56097) & 56097;
        const a = ((43315 + d) * 1664525 + 1013904223) % 4294967296;
        const j = (8 << (e >> 24 & 255)) + (32 << (e >> 32 & 255)) + (24 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
        const k = function (c, e, f, i, j, k) {
            const a = c ^ 10715;
            const m = (24 << (e >> 16 & 255)) + (16 << (e >> 32 & 255)) + (32 << (e >> 8 & 255)) + (8 << (e >> 24 & 255));
            const n = (8 << (f >> 16 & 255)) + (32 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (24 << (f >> 32 & 255));
            const h = i ^ 40782;
            const l = j ^ 41301;
            const g = ~(k & 12091) & (k | 12091);
            const o = Rk(a, m, n, h, l, g);
            Rk(a, m, n, h, l, g);
            rn(a, m, n, h, l);
            const b = (o | 3006) & ~(o & 3006);
            return ~(b & 24460) & (b | 24460);
        }(f, i, a, j, f, i);
        const h = mn(a, j, f, i, a);
        Rk(j, f, i, a, j, f);
        const l = (1013904223 + (26191 + (k ^ h)) * 1664525) % 4294967296;
        return (l | 38630) & ~(l & 38630);
    }
    function zk(c, e, f, i, j, k) {
        const a = ((39488 + c) * 214013 + 2531011) % 4294967296;
        const m = ~(e & 49976) & e | ~(e & 49976) & 49976;
        const n = ~(f & 35856) & f | ~(f & 35856) & 35856;
        const h = i ^ 52219;
        const l = (j + 3575) % 65503;
        const g = ~(k & 6932) & k | ~(k & 6932) & 6932;
        const o = ln(a, m, n, h, l);
        const b = function (c, d, e, f, i, j) {
            const a = c ^ 30142;
            const k = (d + 63025) % 65493;
            const m = e ^ 30777;
            const h = ((45939 + f) * 22695477 + 1) % 4294967296;
            const l = (8 << (i >> 16 & 255)) + (32 << (i >> 24 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 8 & 255));
            const g = (j | 45652) & ~(j & 45652);
            const n = ln(a, k, m, h, l);
            wk(g, a, k, m, h);
            eq(l, g, a, k, m, h);
            return n ^ 60048;
        }(g, a, m, n, h, l);
        Wk(g, a, m, n, h, l);
        const d = (1013904223 + (60709 + (o ^ b)) * 1664525) % 4294967296;
        return ~(d & 42138) & d | ~(d & 42138) & 42138;
    }
    function Ak(a, b) {
        const c = a ^ 53197;
        const d = ~(b & 8782) & 8782 | ~(b & 8782) & b;
        const e = bw(c, d, c, d);
        Dn(c, d, c, d, c);
        return ~(e & 623) & e | ~(e & 623) & 623;
    }
    const Bk = 100;
    const Ck = 20;
    function Dk(b, c, d, e) {
        const f = b ^ 11762;
        const g = ~(c & 19425) & 19425 | ~(c & 19425) & c;
        return ((55182 + (((17757 + ((32 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 8 & 255)) + (24 << ((f ^ g) >> 24 & 255)) + (16 << ((f ^ g) >> 16 & 255)) ^ (32 << (d >> 16 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 24 & 255)) + (16 << (d >> 8 & 255)))) * 1664525 + 1013904223) % 4294967296 ^ (~(e & 259) & 259 | ~(e & 259) & e))) * 1664525 + 1013904223) % 4294967296;
    }
    function Ek(b, c, d, e, f) {
        const i = (32 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (24 << (b >> 16 & 255)) + (8 << (b >> 32 & 255));
        const a = (c + 39144) % 65406;
        const j = d ^ 34575;
        const k = ~(e & 37841) & e | ~(e & 37841) & 37841;
        const h = (f | 25975) & ~(f & 25975);
        const l = Dk(i, a, j, k);
        un(h, i, a, j, k);
        Wk(h, i, a, j, k, h);
        return (l | 19326) & ~(l & 19326) ^ 36297;
    }
    function Fk(c, d, e, f, i) {
        const j = (12345 + (23101 + c) * 1103515245) % 2147483648;
        const a = d ^ 58614;
        const k = ((e + 45267) * 214013 + 2531011) % 4294967296;
        const m = f ^ 40810;
        const h = (24 << (i >> 24 & 255)) + (8 << (i >> 32 & 255)) + (32 << (i >> 8 & 255)) + (16 << (i >> 16 & 255));
        const l = vn(j, a);
        const g = yk(k, m, h, j);
        (function (b, c, d, e) {
            const f = (b + 34282) % 65336;
            const i = ~(c & 45181) & 45181 | ~(c & 45181) & c;
            const a = (16 << (d >> 8 & 255)) + (32 << (d >> 24 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 16 & 255));
            const j = ~(e & 25475) & 25475 | ~(e & 25475) & e;
            const k = function (a, b) {
                const c = ~(a & 41406) & a | ~(a & 41406) & 41406;
                const d = ((b + 17922) * 1103515245 + 12345) % 2147483648;
                const e = fn(c, d, c);
                Qk(d, c, d, c);
                return ((42346 + (e ^ 18573 ^ Ek(d, c, d, c, d))) * 2147483629 + 2147483587) % 2147483647;
            }(f, i);
            const h = un(a, j, f, i, a);
            vn(j, f);
            const l = (58498 + (k ^ h)) % 65531;
        })(a, k, m, h);
        const n = (24 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 32 & 255)) + (16 << ((l ^ g) >> 8 & 255));
        return ~(n & 13644) & n | ~(n & 13644) & 13644;
    }
    const Gk = 2;
    const Hk = 0;
    function Ik(b, c, d, e, f) {
        const i = (24 << (b >> 24 & 255)) + (32 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 32 & 255));
        const a = (12345 + (c + 3024) * 1103515245) % 2147483648;
        const j = (8 << (d >> 8 & 255)) + (32 << (d >> 32 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & 255));
        const k = (1 + (e + 41324) * 22695477) % 4294967296;
        const h = (f | 19607) & ~(f & 19607);
        const l = hn(i, a);
        un(j, k, h, i, a);
        eq(j, k, h, i, a, j);
        const g = ~(l & 49323) & 49323 | ~(l & 49323) & l;
        return ~(g & 46567) & (g | 46567);
    }
    function Jk(c, d, e, f, i, j) {
        const a = (1013904223 + (c + 28824) * 1664525) % 4294967296;
        const k = (1013904223 + (13210 + d) * 1664525) % 4294967296;
        const m = ~(e & 32165) & 32165 | ~(e & 32165) & e;
        const h = (24 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 32 & 255));
        const l = (1 + (39199 + i) * 22695477) % 4294967296;
        const g = j ^ 33037;
        const n = function (b, c, d) {
            const e = (12345 + (39051 + b) * 1103515245) % 2147483648;
            const f = (c | 44117) & ~(c & 44117);
            const g = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & 255));
            const a = _k(e, f, g, e, f);
            const i = zn(g, e, f, g, e, f);
            const j = function (a, b) {
                const c = (16 << (a >> 8 & 255)) + (32 << (a >> 16 & 255)) + (8 << (a >> 32 & 255)) + (24 << (a >> 24 & 255));
                const d = (32 << (b >> 32 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 16 & 255));
                const e = eq(c, d, c, d, c, d);
                (function (b, c, d, e, f) {
                    const i = b ^ 64570;
                    const a = (2531011 + (c + 41768) * 214013) % 4294967296;
                    const j = (1013904223 + (d + 43923) * 1664525) % 4294967296;
                    const k = (16 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (32 << (e >> 16 & 255)) + (24 << (e >> 8 & 255));
                    const h = (f | 21896) & ~(f & 21896);
                    const l = function (a, b) {
                        const c = ((a + 49468) * 1103515245 + 12345) % 2147483648;
                        const d = ((b + 30513) * 214013 + 2531011) % 4294967296;
                        const e = function (b, c, d) {
                            const e = ((5294 + b) * 1664525 + 1013904223) % 4294967296;
                            const f = (c | 55665) & ~(c & 55665);
                            const g = (d + 54633) % 65404;
                            const a = wk(e, f, g, e, f);
                            (function (c, e, f, i, j, k) {
                                const a = (2531011 + (c + 16955) * 214013) % 4294967296;
                                const m = ((9436 + e) * 1103515245 + 12345) % 2147483648;
                                const n = (f | 14774) & ~(f & 14774);
                                const h = (i | 48802) & ~(i & 48802);
                                const l = ~(j & 24998) & (j | 24998);
                                const g = (dq << (k >> 8 & 255)) + (16 << (k >> 16 & 255)) + (32 << (k >> 32 & 255)) + (24 << (k >> 24 & 255));
                                const o = Ok(a, m, n, h);
                                const b = un(l, g, a, m, n);
                                const d = Ok(h, l, g, a);
                            })(g, e, f, g, e, f);
                            an(g, e, f, g);
                            return ~(a & 43875) & (a | 43875) ^ 15116;
                        }(c, d, c);
                        rn(d, c, d, c, d);
                        Dk(c, d, c, d);
                        return (e | 17943) & ~(e & 17943) ^ 21791;
                    }(i, a);
                    Qk(j, k, h, i);
                    const g = Ik(a, j, k, h, i);
                })(c, d, c, d, c);
                hn(d, c);
                return (e | 58283) & ~(e & 58283) ^ 8337;
            }(g, e);
            const h = (16 << ((a ^ i) >> 32 & 255)) + (24 << ((a ^ i) >> 24 & 255)) + (32 << ((a ^ i) >> 8 & 255)) + (8 << ((a ^ i) >> 16 & 255));
            return (8 << ((h ^ j) >> 32 & 255)) + (16 << ((h ^ j) >> 8 & 255)) + (32 << ((h ^ j) >> 16 & 255)) + (24 << ((h ^ j) >> 24 & 255));
        }(a, k, m);
        an(h, l, g, a);
        return ((34159 + (n ^ 2959 ^ Ok(k, m, h, l))) * 1103515245 + 12345) % 2147483648;
    }
    const Kk = 18;
    const Lk = 2;
    const Mk = 3;
    const Nk = 17;
    function Ok(b, c, d, e) {
        const f = ~(b & 33107) & (b | 33107);
        const g = (24 << (c >> 32 & 255)) + (32 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & 255));
        const a = ~(d & 32053) & (d | 32053);
        const i = e ^ 12240;
        const j = function (b, c, d, e) {
            const f = (32 << (b >> 32 & 255)) + (16 << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255));
            const i = (1 + (50595 + c) * 22695477) % 4294967296;
            const a = ~(d & 40066) & d | ~(d & 40066) & 40066;
            const j = e ^ 18768;
            const k = ln(f, i, a, j, f);
            const h = Fk(i, a, j, f, i);
            const l = $k(a, j);
            return ((16767 + ((2531011 + (35287 + (k ^ h)) * 214013) % 4294967296 ^ l)) * 1664525 + 1013904223) % 4294967296;
        }(f, g, a, i);
        an(f, g, a, i);
        return (2531011 + (44352 + ((~(j & 64131) & 64131 | ~(j & 64131) & j) ^ ln(f, g, a, i, f))) * 214013) % 4294967296;
    }
    const Pk = 256;
    function Qk(b, c, d, e) {
        const f = (b | 15432) & ~(b & 15432);
        const g = c ^ 12315;
        const a = d ^ 38714;
        const i = e ^ 58084;
        const j = zk(f, g, a, i, f, g);
        an(a, i, f, g);
        return ((34681 + ((~(j & 41134) & j | ~(j & 41134) & 41134) ^ Wk(a, i, f, g, a, i))) * 214013 + 2531011) % 4294967296;
    }
    function Rk(b, c, d, e, f, i) {
        const a = ~(b & 36133) & (b | 36133);
        const j = (c | 13670) & ~(c & 13670);
        const k = (d | 31390) & ~(d & 31390);
        const h = e ^ 64081;
        const l = f ^ 7550;
        const g = (2147483587 + (i + 63950) * 2147483629) % 2147483647;
        return (12345 + (36760 + (((62552 + (bn(a, j, k, h, l) ^ an(g, a, j, k))) * 2147483629 + 2147483587) % 2147483647 ^ rn(h, l, g, a, j))) * 1103515245) % 2147483648;
    }
    const Sk = 16;
    const Tk = 14;
    const Uk = 4;
    const Vk = 8;
    function Wk(b, c, d, e, f, g) {
        const a = b ^ 23409;
        const i = c ^ 26380;
        const j = ((f + 33017) * 1103515245 + 12345) % 2147483648;
        const h = g ^ 42490;
        return ((19056 + (Dk(a, i, d ^ 53590, e ^ 36633) ^ Dk(j, h, a, i))) * 22695477 + 1) % 4294967296;
    }
    const Xk = 10;
    const Yk = 7;
    const Zk = uj;
    function $k(b, c) {
        const d = (2531011 + (b + 62874) * 214013) % 4294967296;
        const e = (24 << (c >> 24 & 255)) + (16 << (c >> 32 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
        const f = Wk(d, e, d, e, d, e);
        const g = Wk(d, e, d, e, d, e);
        Dk(d, e, d, e);
        const a = (16 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) >> 16 & 255)) + (32 << ((f ^ g) >> 8 & 255));
        return ~(a & 55949) & 55949 | ~(a & 55949) & a;
    }
    function _k(b, c, d, e, f) {
        const i = ((9716 + b) * 1664525 + 1013904223) % 4294967296;
        const a = ~(c & 7703) & c | ~(c & 7703) & 7703;
        const j = (d | 31275) & ~(d & 31275);
        const k = ~(e & 25693) & 25693 | ~(e & 25693) & e;
        const h = (8 << (f >> 8 & 255)) + (32 << (f >> 24 & 255)) + (24 << (f >> 16 & 255)) + (16 << (f >> 32 & 255));
        const l = Wk(i, a, j, k, h, i);
        const g = Dk(a, j, k, h);
        fn(i, a, j);
        return (24 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 32 & 255)) ^ 31710;
    }
    const aq = 18;
    const bq = 7;
    const cq = 6;
    const dq = 8;
    function eq(c, e, f, i, j, k) {
        const a = (24 << (c >> 24 & 255)) + (32 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 32 & 255));
        const m = (e | 41551) & ~(e & 41551);
        const n = (24 << (f >> 24 & 255)) + (16 << (f >> 32 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 8 & 255));
        const h = ~(i & 32641) & (i | 32641);
        const l = ((j + 35582) * 214013 + 2531011) % 4294967296;
        const g = ~(k & 1090) & (k | 1090);
        const o = zn(a, m, n, h, l, g);
        Ek(a, m, n, h, l);
        Dk(g, a, m, n);
        const b = ~(o & 8077) & 8077 | ~(o & 8077) & o;
        return ~(b & 3708) & (b | 3708);
    }
    const fq = 19;
    const gq = 255;
    var hq = bj.Math.acos;
    bj.Math.acos = bj.Math.asin;
    bj.Math.asin = hq;
    var en = bj.Math.cos;
    bj.Math.cos = bj.Math.sin;
    bj.Math.sin = en;
    const tn = 5;
    const nn = 10;
    const on = 11;
    function an(b, c, d, e) {
        const f = (2147483587 + (37418 + b) * 2147483629) % 2147483647;
        const g = c ^ 57623;
        const a = ~(d & 40280) & d | ~(d & 40280) & 40280;
        const i = ~(e & 24601) & e | ~(e & 24601) & 24601;
        const j = hn(f, g);
        hn(a, i);
        mn(f, g, a, i, f);
        const h = ~(j & 43902) & 43902 | ~(j & 43902) & j;
        return (h | 8862) & ~(h & 8862);
    }
    function rn(b, c, d, e, f) {
        const i = (2147483587 + (b + 64762) * 2147483629) % 2147483647;
        const a = ((18197 + c) * 214013 + 2531011) % 4294967296;
        const j = (2531011 + (22845 + d) * 214013) % 4294967296;
        const k = (32 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 32 & 255)) + (24 << (e >> 24 & 255));
        const h = ~(f & 11999) & f | ~(f & 11999) & 11999;
        const l = Wk(i, a, j, k, h, i);
        const g = eq(a, j, k, h, i, a);
        Dk(j, k, h, i);
        return (8 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 16 & 255)) + (24 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 32 & 255)) ^ 35444;
    }
    const sn = 0;
    function hn(a, b) {
        const c = ((a + 44664) * 1664525 + 1013904223) % 4294967296;
        const d = b ^ 53080;
        return (1 + (57525 + ((17769 + (bn(c, d, c, d, c) ^ un(d, c, d, c, d))) % 65357 ^ Dk(c, d, c, d))) * 22695477) % 4294967296;
    }
    function ln(b, c, d, e, f) {
        const i = b ^ 62008;
        const a = (24 << (c >> 32 & 255)) + (8 << (c >> 16 & 255)) + (32 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
        const j = ((d + 46531) * 22695477 + 1) % 4294967296;
        const k = ~(e & 1884) & 1884 | ~(e & 1884) & e;
        const h = ~(f & 55588) & 55588 | ~(f & 55588) & f;
        const l = wk(i, a, j, k, h);
        zn(i, a, j, k, h, i);
        return ((3037 + (l ^ 57467 ^ mn(a, j, k, h, i))) * 1664525 + 1013904223) % 4294967296;
    }
    const gn = Ui;
    function un(b, c, d, e, f) {
        const i = ~(b & 42203) & b | ~(b & 42203) & 42203;
        const a = c ^ 50118;
        const j = d ^ 41620;
        const k = ((e + 34240) * 2147483629 + 2147483587) % 2147483647;
        const h = (32 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 24 & 255));
        const l = zn(i, a, j, k, h, i);
        zn(a, j, k, h, i, a);
        return (2531011 + (53616 + ((l | 43477) & ~(l & 43477) ^ Dk(j, k, h, i))) * 214013) % 4294967296;
    }
    function bn(c, d, e, f, i) {
        const j = (16 << (c >> 32 & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
        const a = d ^ 55978;
        const k = ((e + 2934) * 1664525 + 1013904223) % 4294967296;
        const m = ~(f & 30642) & (f | 30642);
        const h = (8 << (i >> 8 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 24 & 255)) + (32 << (i >> 16 & 255));
        const l = un(j, a, k, m, h);
        const g = rn(j, a, k, m, h);
        Dk(j, a, k, m);
        const n = (16 << ((l ^ g) >> 32 & 255)) + (24 << ((l ^ g) >> 8 & 255)) + (8 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & 255));
        return ~(n & 23686) & (n | 23686);
    }
    const dn = R;
    function vn(b, c) {
        const d = b ^ 24508;
        const e = (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 32 & 255)) + (8 << (c >> 24 & 255));
        const f = Ik(d, e, d, e, d);
        const g = bn(e, d, e, d, e);
        _k(d, e, d, e, d);
        const a = ((11269 + (f ^ g)) * 2147483629 + 2147483587) % 2147483647;
        return ~(a & 40927) & 40927 | ~(a & 40927) & a;
    }
    function mn(c, d, e, f, i) {
        const j = ((c + 49173) * 1103515245 + 12345) % 2147483648;
        const a = (d + 52922) % 65337;
        const k = e ^ 25250;
        const m = ~(f & 10903) & 10903 | ~(f & 10903) & f;
        const h = ~(i & 33814) & 33814 | ~(i & 33814) & i;
        const l = Ek(j, a, k, m, h);
        const g = vn(j, a);
        Ek(k, m, h, j, a);
        const n = (1 + (19675 + (l ^ g)) * 22695477) % 4294967296;
        return ~(n & 7922) & n | ~(n & 7922) & 7922;
    }
    const cn = 10;
    const pn = gn;
    const Cn = 13;
    const Tn = 3;
    function fn(b, c, d) {
        const e = b ^ 23323;
        const f = (2531011 + (61713 + c) * 214013) % 4294967296;
        const g = (d | 24198) & ~(d & 24198);
        const a = Ik(e, f, g, e, f);
        const h = Ik(g, e, f, g, e);
        Ik(f, g, e, f, g);
        return (16 << ((a ^ h) >> 32 & 255)) + (8 << ((a ^ h) >> 8 & 255)) + (24 << ((a ^ h) >> 24 & 255)) + (32 << ((a ^ h) >> 16 & 255)) ^ 31181;
    }
    function zn(b, c, d, e, f, i) {
        const a = d ^ 8102;
        const j = (24 << (e >> 16 & 255)) + (32 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (16 << (e >> 8 & 255));
        const k = ~(f & 29687) & 29687 | ~(f & 29687) & f;
        const h = (1 + (62237 + i) * 22695477) % 4294967296;
        const l = $k((b + 52483) % 65496, (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 24 & 255)) + (8 << (c >> 32 & 255)));
        const g = $k(a, j);
        $k(k, h);
        return (45290 + (l ^ g)) % 65334 ^ 55575;
    }
    const yn = 12;
    const wn = 11;
    function Pn(b, c, d, e) {
        const f = (0 << (b >> 24 & 255)) + (16 << (b >> 16 & 255)) + (8 << (b >> 8 & 255)) + (24 << (b & 255));
        const g = (2531011 + (14191 + c) * 214013) % 4294967296;
        const a = (d | 6139) & ~(d & 6139);
        const h = (12345 + (54767 + e) * 1103515245) % 2147483648;
        return ((6048 + (ir(f, g, a, h) ^ ir(f, g, a, h))) * 2147483629 + 2147483587) % 2147483647;
    }
    ΔⲆⲆⵠ = {
        ⲆᐃⵠΔΔΔᐃ: () => new Promise((a, b) => {
            bj.grecaptcha.ready(function () {
                bj.grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
                    action: "validate_recaptcha"
                }).then(function (b) {
                    a(b);
                }).catch(c => {
                    if (fw) {
                        a(0);
                    } else {
                        console.log(undefined);
                        b(c);
                    }
                });
            });
        }),
        ᐃΔⵠᐃᐃⲆⲆΔⵠ: function (a) {
            bj.open(a, "_blank").focus();
        },
        ΔᐃᐃΔᐃⵠᐃ: function (a) {
            bj.open(a, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
        },
        ⵠΔⵠⲆⲆᐃⵠ: function (a, b) {
            for (var c in a) {
                if (a[c] != b[c]) {
                    return Gj;
                }
            }
            return true;
        },
        ΔⵠⵠⲆΔⲆⲆΔⵠ: function (a, b) {
            if (a.length != b.length) {
                return Gj;
            }
            for (var c = 0; c < a.length; c++) {
                if (typeof a == "object") {
                    if (!this.ⵠΔⵠⲆⲆᐃⵠ(a[c], b[c])) {
                        return lj;
                    }
                } else if (a[c] != b[c]) {
                    return pn;
                }
            }
            return R;
        },
        ⵠΔᐃⵠΔΔᐃ: function (a, b) {
            b.x = a.x;
            b.y = a.y;
        },
        ᐃⲆⵠⵠⲆᐃⲆ: function (a, b) {
            return {
                x: a.x - b.x,
                y: a.y - b.y
            };
        },
        ᐃΔΔⲆⵠⵠⵠᐃⲆ: function (a, b) {
            a.x *= b;
            a.y *= b;
        },
        ΔⵠⲆΔⲆᐃᐃ: function (a, b) {
            return a.x * b.x + a.y * b.y;
        },
        ΔΔΔⲆⵠⲆⵠ: function (a) {
            return Math.sqrt(a.x * a.x + a.y * a.y);
        },
        sign: function (a) {
            if (a < 0) {
                return -1;
            } else {
                return 1;
            }
        },
        ᐃⲆⵠⵠΔᐃⲆ: function (a, b) {
            return a.x * b.y - a.y * b.x;
        },
        ⲆⵠΔᐃᐃᐃᐃ: function (b, c, d, e) {
            var f = e - c;
            var g = d - b;
            return Math.atan2(f, g);
        },
        ΔⲆΔᐃⵠΔⵠ: function (a, b) {
            return Math.asin(this.ΔⵠⲆΔⲆᐃᐃ(a, b) / (this.ΔΔΔⲆⵠⲆⵠ(a) * this.ΔΔΔⲆⵠⲆⵠ(b))) * this.sign(this.ᐃⲆⵠⵠΔᐃⲆ(a, b));
        },
        ⲆΔⲆᐃᐃΔᐃ: function (a) {
            ΔⲆⵠΔᐃⵠΔ = location.href;
            a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var b = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(ΔⲆⵠΔᐃⵠΔ);
            if (b === null) {
                return null;
            } else {
                return b[1];
            }
        },
        ᐃᐃᐃᐃᐃᐃⲆ: function (a, b) {
            var c = Math.PI * 2;
            b = (b % c + c) % c;
            if (Math.abs(a - b) > Math.PI) {
                if (a > b) {
                    return b + c;
                } else {
                    return b - c;
                }
            } else {
                return b;
            }
        },
        ᐃᐃⲆΔⲆⲆⲆ: function (a, b) {
            return this.ΔⲆΔᐃⵠΔⵠ({
                x: 1,
                y: 0
            }, this.ᐃⲆⵠⵠⲆᐃⲆ(a, b));
        },
        ᐃⲆⵠΔ: function (a, b) {
            return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
        },
        ⵠΔΔᐃᐃⵠᐃ: function (a, b) {
            return {
                x: Math.sin(b) * a,
                y: Math.cos(b) * a
            };
        },
        ⵠΔⲆᐃⵠⵠᐃ: function (a, b) {
            a.x += b.x;
            a.y += b.y;
        },
        ᐃᐃⵠΔⲆᐃΔ: function (a, b) {
            a.x -= b.x;
            a.y -= b.y;
        },
        ΔⲆⵠⵠⲆᐃⲆⵠⲆ: function (a, b, c) {
            a.x += b;
            a.y += c;
        },
        ⵠᐃⵠⵠᐃᐃⲆΔᐃ: function (a, b, c) {
            return {
                x: a.x + b,
                y: a.y + c
            };
        },
        ⲆᐃΔΔᐃ: function (a, b, c) {
            a.x += Math.sin(c) * b;
            a.y += Math.cos(c) * b;
        },
        ΔᐃᐃΔΔⵠⲆ: function (a, b) {
            return Math.floor((a - b) / 2);
        },
        ⲆᐃⲆΔΔᐃⲆ: function (a, b) {
            return {
                x: (a.x + b.x) / 2,
                y: (a.y + b.y) / 2
            };
        },
        ΔⲆᐃⵠᐃᐃⲆ: function () {
            if (Math.random() > 0.5) {
                return 1;
            } else {
                return -1;
            }
        },
        ⵠᐃⲆᐃᐃⵠⵠⵠΔ: function (b, c, d) {
            var e = this.ΔⲆᐃⵠᐃᐃⲆ();
            var f = this.ΔⲆᐃⵠᐃᐃⲆ();
            var g = Math.random() * Math.PI / 2;
            return {
                x: Math.floor(b + Math.sin(g) * e * d),
                y: Math.floor(c + Math.cos(g) * f * d)
            };
        },
        ⲆᐃⵠⲆΔⵠⵠΔᐃ: function (a, b, c, d) {
            this.x = a;
            this.y = b;
            this.w = c;
            this.ⵠⲆⵠ = d;
        },
        ΔⵠⵠᐃⵠⵠᐃⲆⲆ: function (a) {
            ⲆⲆⲆ = [];
            ⲆⲆⲆ.push.apply(ⲆⲆⲆ, a);
            var b = [];
            while (ⲆⲆⲆ.length > 0) {
                var c = Math.floor(Math.random() * ⲆⲆⲆ.length);
                b.push(ⲆⲆⲆ[c]);
                ⲆⲆⲆ.splice(c, 1);
            }
            return b;
        },
        ΔᐃΔⲆᐃᐃⲆ: function (a) {
            if (a >= 20000) {
                a = (a - 20000) * 1000;
            } else if (a >= 10000) {
                a = (a - 10000) * 100;
            }
            return a;
        },
        ᐃΔⲆᐃΔᐃⵠ: function (b) {
            if (typeof b !== "number") {
                return "0";
            }
            if (b >= 10000) {
                var c = Math.floor(Math.log10(b)) - 2;
                var d = Math.max(0, 3 - c);
                var e = Math.floor(b / 1000).toString();
                if (d) {
                    for (var f = (e += "." + (b % 1000 / 1000).toString().substring(2).substring(0, d)).length - 1, g = 0; f > 0 && e[f] == "0"; f--) {
                        g++;
                    }
                    if ((e = e.substring(0, e.length - g))[e.length - 1] == ".") {
                        e = e.substring(0, e.length - 1);
                    }
                }
                return e += "k";
            }
            return b.toString();
        },
        ⵠΔⵠⲆΔⵠⲆ: function (a) {
            return a * (2 - a);
        },
        ⲆᐃⲆⵠΔᐃⵠ: function (a) {
            return --a * a * a + 1;
        },
        ΔᐃⲆΔⵠ: function (a) {
            if (a < 0.5) {
                return a * 2 * a;
            } else {
                return (4 - a * 2) * a - 1;
            }
        },
        ᐃΔΔΔⵠΔⵠ: function (a) {
            if (a < 0.5) {
                return a * 4 * a * a;
            } else {
                return (a - 1) * (a * 2 - 2) * (a * 2 - 2) + 1;
            }
        },
        ᐃⵠΔⲆᐃⲆΔⲆⲆ: function (a) {
            if (a < 0.5) {
                return a * 8 * a * a * a;
            } else {
                return 1 - --a * 8 * a * a * a;
            }
        },
        ⵠⲆⵠⲆΔΔᐃ: function (a) {
            return 1 - --a * a * a * a;
        },
        ΔΔⲆⲆΔⵠⲆ: function (a) {
            return 1 + --a * a * a * a * a;
        },
        ⵠΔᐃⵠ: function (b, c, d, e, g, h) {
            this.ⵠⲆᐃ = b;
            this.ΔⲆⲆ = c;
            this.max = d;
            this.min = e;
            this.ⵠΔᐃⲆⵠᐃΔ = g;
            this.ᐃⲆⵠⲆⵠΔᐃ = h;
            this.ΔΔⵠⵠⵠⲆᐃ = 0;
            this.ⲆᐃΔ = function () {
                if (this.ⵠⲆᐃ) {
                    if ((a = this.ΔⲆⲆ + Af * this.ⵠΔᐃⲆⵠᐃΔ) > this.max) {
                        this.ΔⲆⲆ = this.max;
                        this.ⵠⲆᐃ = false;
                        return f;
                    }
                    this.ΔⲆⲆ = a;
                } else {
                    var a;
                    if ((a = this.ΔⲆⲆ - Af * this.ᐃⲆⵠⲆⵠΔᐃ) < this.min) {
                        this.ΔⲆⲆ = this.min;
                        this.ⵠⲆᐃ = true;
                    } else {
                        this.ΔⲆⲆ = a;
                    }
                }
            };
            return Gj;
        },
        ⵠⲆΔⲆⲆ: function (b, c, d, e, f, g) {
            this.ΔΔⵠⲆⲆ = b;
            this.ᐃᐃⲆᐃΔ = c;
            this.Δⵠᐃᐃᐃ = d;
            this.ⵠᐃᐃⲆⵠ = e;
            this.x = f;
            this.ᐃΔⲆⲆⵠ = g;
            this.ᐃᐃⵠⲆⵠᐃⵠ = function () {
                this.x = this.ⵠⲆΔⲆΔⲆΔΔⵠ;
                this.ᐃᐃⲆᐃΔ = 0;
            };
            this.ⲆⵠᐃᐃᐃⲆΔ = function (a) {
                if (a !== this.ᐃΔⲆⲆⵠ) {
                    this.ᐃΔⲆⲆⵠ = a;
                    this.ⵠᐃᐃⲆⵠ = this.x;
                    this.ᐃᐃⲆᐃΔ = 0;
                }
                if (this.ᐃΔⲆⲆⵠ !== this.x) {
                    this.ᐃᐃⲆᐃΔ += Af;
                    if (this.ᐃᐃⲆᐃΔ > this.Δⵠᐃᐃᐃ) {
                        this.x = this.ᐃΔⲆⲆⵠ;
                    } else {
                        var b = this.ΔΔⵠⲆⲆ(this.ᐃᐃⲆᐃΔ / this.Δⵠᐃᐃᐃ);
                        this.x = this.ⵠᐃᐃⲆⵠ + (this.ᐃΔⲆⲆⵠ - this.ⵠᐃᐃⲆⵠ) * b;
                    }
                }
            };
        },
        ⵠⲆⲆᐃᐃⵠΔ: function (b, c, d, e, f, g, a, i, j) {
            this.ΔΔⵠⲆⲆ = b;
            this.ᐃᐃⲆᐃΔ = c;
            this.Δⵠᐃᐃᐃ = d;
            this.ⵠᐃᐃⲆⵠ = e;
            this.ΔⵠⲆⵠᐃ = f;
            this.x = g;
            this.y = a;
            this.ᐃΔⲆⲆⵠ = i;
            this.ⵠᐃⵠⵠᐃΔΔ = j;
            this.ⲆⵠᐃᐃᐃⲆΔ = function (a) {
                if (a.x != this.ᐃΔⲆⲆⵠ || a.y != this.ⵠᐃⵠⵠᐃΔΔ) {
                    this.ᐃΔⲆⲆⵠ = a.x;
                    this.ⵠᐃⵠⵠᐃΔΔ = a.y;
                    this.ⵠᐃᐃⲆⵠ = this.x;
                    this.ΔⵠⲆⵠᐃ = this.y;
                    this.ᐃᐃⲆᐃΔ = 0;
                }
                if (this.ᐃΔⲆⲆⵠ != this.x || this.ⵠᐃⵠⵠᐃΔΔ != this.y) {
                    this.ᐃᐃⲆᐃΔ += Af;
                    if (this.ᐃᐃⲆᐃΔ > this.Δⵠᐃᐃᐃ) {
                        this.x = this.ᐃΔⲆⲆⵠ;
                        this.y = this.ⵠᐃⵠⵠᐃΔΔ;
                    } else {
                        var b = this.ΔΔⵠⲆⲆ(this.ᐃᐃⲆᐃΔ / this.Δⵠᐃᐃᐃ);
                        this.x = this.ⵠᐃᐃⲆⵠ + (this.ᐃΔⲆⲆⵠ - this.ⵠᐃᐃⲆⵠ) * b;
                        this.y = this.ΔⵠⲆⵠᐃ + (this.ⵠᐃⵠⵠᐃΔΔ - this.ΔⵠⲆⵠᐃ) * b;
                    }
                }
            };
        },
        ᐃⵠᐃΔᐃⵠΔ: function (a) {
            var b = "";
            for (var c = 0; c < a; c++) {
                b += String.fromCharCode(48 + Math.floor(Math.random() * 74));
            }
            return b;
        },
        ⲆⲆᐃΔⵠⲆⲆ: function (a, b) {
            b ||= location.href;
            a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var c = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(b);
            if (c == null) {
                return null;
            } else {
                return c[1];
            }
        },
        ⲆΔᐃΔⵠ: function (a) {
            let b = "";
            const c = a.length;
            for (let d = 0; d < c; d++) {
                b += String.fromCharCode(a[d]);
            }
            return b;
        },
        ⵠⵠΔᐃⲆᐃΔ: function (a, b) {
            return a.x >= b.x && a.x <= b.x + b.w && a.y >= b.y && a.y <= b.y + b.ⵠⲆⵠ && jk;
        },
        ΔΔⵠⵠᐃⵠᐃ: function (b, c, d, e, f, g, a, h) {
            if (Math.max(b, f) < Math.min(c, g) && Math.max(d, a) < Math.min(e, h)) {
                return 1;
            } else {
                return 0;
            }
        },
        ⵠⲆΔⲆΔⲆⲆ: function (a, b, c) {
            return (1 - c) * a + c * b;
        },
        ΔᐃⲆⲆⵠⲆᐃ: function (a) {
            return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
        }
    };
    Math.sign = Math.sign || function (a) {
        if (a === 0) {
            return 0;
        } else if (a > 0) {
            return 1;
        } else {
            return -1;
        }
    };
    const An = 0;
    Math.log10 = Math.log10 || function (a) {
        return Math.log(a) / Math.ⵠⲆΔⲆΔⲆⲆᐃⵠ;
    };
    const kn = 15;
    const xn = 100;
    const Jn = 9;
    function Mn(a, b, c, d) {
        Tj(Tu, a, b, c, d);
        return (26742 + (Tw(Cc[0], Cc[1], Cc[2], Cc[3], Cc[0], Cc[1]) ^ gf(Cc[2], Cc[3]))) % 65411;
    }
    (function (a) {
        var b = false;
        if (typeof ᐃⲆⵠΔⵠⲆΔ === "function" && ᐃⲆⵠΔⵠⲆΔ.ⲆᐃⲆᐃⲆⲆᐃ) {
            ᐃⲆⵠΔⵠⲆΔ(a);
            b = true;
        }
        if (typeof ⵠⵠΔⲆᐃⵠΔ === "object") {
            ⲆⵠΔⲆⲆᐃᐃⲆⲆ.exports = a();
            b = dn;
        }
        if (!b) {
            var c = bj.ⲆΔⲆⲆ;
            var d = bj.ⲆΔⲆⲆ = a();
            d.ᐃⵠᐃᐃⲆΔⲆΔΔ = function () {
                bj.ⲆΔⲆⲆ = c;
                return d;
            };
        }
    })(function () {
        function b() {
            for (var a = 0, b = {}; a < arguments.length; a++) {
                var c = arguments[a];
                for (var d in c) {
                    b[d] = c[d];
                }
            }
            return b;
        }
        return function a(c) {
            function d(e, f, j) {
                var k;
                if (typeof document !== "undefined") {
                    if (arguments.length > 1) {
                        j = b({
                            path: "/"
                        }, d.ⵠΔⵠΔΔⲆⲆ, j);
                        if (typeof j.expires === "number") {
                            var m = new Date();
                            m.setMilliseconds(m.getMilliseconds() + j.expires * 86400000);
                            j.expires = m;
                        }
                        try {
                            k = JSON.stringify(f);
                            if (/^[\{\[]/.test(k)) {
                                f = k;
                            }
                        } catch (a) { }
                        f = c.write ? c.write(f, e) : encodeURIComponent(String(f)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
                        e = (e = (e = encodeURIComponent(String(e))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
                        return document.cookie = [e, "=", f, j.expires ? "; expires=" + j.expires.toUTCString() : "", j.path ? "; path=" + j.path : "", j.domain ? "; domain=" + j.domain : "", j.ⲆΔΔΔΔⲆΔΔΔ ? "; secure" : ""].join("");
                    }
                    if (!e) {
                        k = {};
                    }
                    for (var n = document.cookie ? document.cookie.split("; ") : [], h = /(%[0-9A-Z]{2})+/g, l = 0; n.length > l; l++) {
                        var p = n[l].split("=");
                        var q = p.slice(1).join("=");
                        if (q.charAt(0) === "\"") {
                            q = q.slice(1, -1);
                        }
                        try {
                            var s = p[0].replace(h, decodeURIComponent);
                            q = c.read ? c.read(q, s) : c(q, s) || q.replace(h, decodeURIComponent);
                            if (this.json) {
                                try {
                                    q = JSON.parse(q);
                                } catch (a) { }
                            }
                            if (e === s) {
                                k = q;
                                break;
                            }
                            if (!e) {
                                k[s] = q;
                            }
                        } catch (a) { }
                    }
                    return k;
                }
            }
            d.set = d;
            d.get = function (a) {
                return d.call(d, a);
            };
            d.ⲆᐃⲆⵠⵠⵠⵠⲆΔ = function () {
                return d.apply({
                    json: true
                }, [].slice.call(arguments));
            };
            d.ⵠΔⵠΔΔⲆⲆ = {};
            d.remove = function (a, c) {
                d(a, "", b(c, {
                    expires: -1
                }));
            };
            d.ᐃΔΔⲆᐃⵠΔⵠΔ = a;
            return d;
        }(function () { });
    });
    const Bn = 255;
    function Dn(b, c, d, e, f) {
        const i = (b | 17544) & ~(b & 17544);
        const a = (c | 43120) & ~(c & 43120);
        const j = d ^ 33499;
        const k = ((63620 + e) * 22695477 + 1) % 4294967296;
        const h = f ^ 23335;
        const l = Ev(i, a, j, k, h, i);
        ir(a, j, k, h);
        return l ^ 31226;
    }
    var En = document.getElementById("game_canvas");
    var In = En.getContext("2d");
    const Sn = 1;
    const Qn = 20;
    const _n = 17;
    const Fn = 4;
    var Rn = En.width;
    var iq = En.height;
    var jq = En.width / 2;
    var kq = En.height / 2;
    const lq = 8;
    const On = 256;
    const Nn = 0;
    const Hn = 3;
    const qn = vj;
    const Un = Vi;
    var Yn = {
        x: jq,
        y: kq
    };
    var mq = 1;
    const nq = 6;
    var Xn = 1;
    var oq = -1;
    const pq = 1;
    var eo = "J" + ta;
    const qq = 13;
    var to = "S" + Aa;
    var rq = bj;
    const oo = 10;
    var ao;
    const sq = 14;
    var so = (wq = "O") + "N";
    const tq = 16;
    var lo;
    const uq = 255;
    const uo = 18;
    const bo = 0;
    var vo = 0;
    const mo = 19;
    var co;
    var vq = rq;
    to = "N";
    const Co = 9;
    var To = "J";
    var wq = "O" + ta;
    const xq = 2;
    const yo = 11;
    const wo = 255;
    const Po = 256;
    const Ao = 2;
    const ko = 12;
    const xo = 20;
    var Jo = vq;
    const Mo = 5;
    var Bo;
    const yq = 7;
    const Eo = 6;
    const Io = 9;
    const So = 18;
    const Qo = 5;
    const _o = 17;
    var Fo = Jo;
    const Ro = Ui;
    so = "N" + undefined;
    (function b() {
        const c = {
            ⵠΔⲆⲆⲆΔⲆᐃΔ: 0
        };
        let d = 0;
        for (let a in c) {
            d = a;
        }
        const f = [];
        for (let a = 0; a < 12; a++) {
            f.push(bj.Math.floor(1 + bj.Math.random() * 10));
        }
        let g = "for (let " + d + " = 0 ; " + d + " < " + f[0] + " ; " + d + "++) {";
        for (let a = 0; a < f[1]; a++) {
            g += f[a] + ";debugger;";
        }
        for (let a = 0; a < f[2]; a++) {
            g += "debugger;";
        }
        g += "}";
        const e = new bj.Function(g);
        bj.setTimeout(b, 10000);
        e();
    })();
    const jo = 100;
    const Go = R;
    const Wo = 256;
    const Lo = Go;
    const Oo = vj;
    const No = 4;
    var Ho;
    var zq;
    var Aq = Fo;
    const Yo = 1;
    var Ko;
    var Bq = Aq;
    const Xo = 100;
    const Zo = 3;
    const $o = 8;
    const ea = 19;
    const ia = Ui;
    var ta;
    var Cq = Bq;
    const oa = 5;
    var aa;
    const Dq = 10;
    const sa = 15;
    const ha = 2;
    const la = 0;
    var ua = Cq;
    To = "O";
    const Eq = 9;
    const da = 14;
    const va = 0;
    var ma;
    var Fq = ua = Cq;
    const pa = 13;
    var Ca;
    const Gq = 255;
    const fa = 19;
    const za = 8;
    const ya = 11;
    const wa = 18;
    var Pa = Fq;
    var Aa = "J" + (ma = "S");
    if (bj.ΔⲆᐃⵠΔⵠᐃ) {
        var ka = bj.Math.acos;
        bj.Math.acos = bj.Math.asin;
        bj.Math.asin = ka;
        var xa = bj.Math.acos;
        bj.Math.acos = bj.Math.asin;
        bj.Math.asin = xa;
    }
    En.oncontextmenu = function () {
        return false;
    };
    eo = "J";
    const Ja = 15;
    const Ma = 12;
    const Ba = 20;
    const Da = Li;
    const Ea = 16;
    function Ia(a) {
        var b = new Image();
        b.src = a.toDataURL("image/png");
        b.width = a.width;
        b.height = a.height;
        b.ⵠᐃΔⲆⲆⲆⲆ = 1;
        return b;
    }
    wq = so;
    const Hq = 10;
    const Qa = 12;
    const _a = 11;
    so = ta;
    ta = Aa;
    const Fa = 1;
    const Ra = 7;
    wq = Aa;
    const ja = 1;
    Bo = Ho = Aa + (To += eo = to);
    const Ga = tj;
    const Wa = 3;
    const La = 12;
    const Oa = 6;
    to = To + eo;
    zq = ao = lo = Aa + To;
    const Na = pn;
    wq = Aa + To;
    const Ha = jk;
    Ko = lo;
    so = Aa + To;
    aa = co = ao;
    To = ta = Aa;
    ma = lo;
    Ca = ao;
    eo = wq;
    const qa = 8;
    var Ua = bj.devicePixelRatio || 1;
    const Ya = 17;
    const Ka = 19;
    var Va = In.ᐃⵠᐃΔⵠᐃⲆᐃΔ || In.ᐃⲆᐃΔᐃⵠⵠⲆⲆ || In.ⲆΔΔᐃΔᐃΔⲆᐃ || In.ᐃΔⲆⵠⲆⲆᐃⵠⲆ || In.ᐃΔΔΔᐃᐃⵠⵠΔ || 1;
    function Xa() {
        if (En.width != bj.innerWidth) {
            En.width = bj.innerWidth;
            Rn = En.width;
            jq = En.width / 2;
        }
        if (bj.innerHeight != En.height) {
            En.height = bj.innerHeight;
            iq = En.height;
            kq = En.height / 2;
        }
        Yn = {
            x: jq,
            y: kq
        };
        var a = En.width;
        var b = En.height;
        Xn = oq === -1 ? Ua / Va : oq;
        En.width = Xn * a;
        En.height = b * Xn;
        En.style.width = a + "px";
        En.style.height = b + "px";
        In.scale(Xn, Xn);
        if (Yw) {
            Yw.ᐃⵠⵠ.ΔᐃΔᐃᐃⵠⵠ = a;
            Yw.ᐃⵠⵠ.ΔΔⲆᐃᐃᐃᐃ = b;
        }
        if (bx.ᐃⵠⲆⵠⲆ) {
            bx.ⲆᐃΔ();
        } else if (mf.ᐃⵠⲆⵠⲆ) {
            mf.ⲆᐃΔ();
        } else if ($w.ᐃⵠⲆⵠⲆ) {
            $w.ⲆᐃΔ();
        } else if (Zw.ᐃⵠⲆⵠⲆ) {
            Zw.ⲆᐃΔ();
        }
    }
    const Za = 100;
    const $a = 255;
    var Iq = document.getElementById("game_body");
    Iq.ondragstart = function () {
        return Ui;
    };
    Iq.ondrop = function () {
        return false;
    };
    const Jq = 14;
    Iq.onresize = Xa;
    (function () {
        var b = 0;
        for (var a = ["ms", "moz", "webkit", "o"], c = 0; c < a.length && !bj.requestAnimationFrame; ++c) {
            bj.requestAnimationFrame = bj[a[c] + "RequestAnimationFrame"];
            bj.cancelAnimationFrame = bj[a[c] + "CancelAnimationFrame"] || bj[a[c] + "CancelRequestAnimationFrame"];
        }
        if (!bj.requestAnimationFrame) {
            bj.requestAnimationFrame = function (c, d) {
                var e = new Date().getTime();
                var f = Math.max(0, 16 - (e - b));
                var a = bj.setTimeout(function () {
                    c(e + f);
                }, f);
                b = e + f;
                return a;
            };
        }
        bj.cancelAnimationFrame ||= function (a) {
            clearTimeout(a);
        };
    })();
    const Kq = 9;
    const Lq = function () {
        let f = 0;
        let i = 0;
        let j = 0;
        const k = ΔⲆⲆⵠ.ⲆΔᐃΔⵠ([115, 116, 97, 99, 107]);
        const o = ΔⲆⲆⵠ.ⲆΔᐃΔⵠ([67, 97, 110, 118, 97, 115, 82, 101, 110, 100, 101, 114, 105, 110, 103, 67, 111, 110, 116, 101, 120, 116, 50, 68]);
        const a = ΔⲆⲆⵠ.ⲆΔᐃΔⵠ([112, 114, 111, 116, 111, 116, 121, 112, 101]);
        const q = ΔⲆⲆⵠ.ⲆΔᐃΔⵠ([100, 114, 97, 119, 73, 109, 97, 103, 101]);
        ΔⲆⲆⵠ.ⲆΔᐃΔⵠ([103, 108, 111, 98, 97, 108, 65, 108, 112, 104, 97]);
        const r = ΔⲆⲆⵠ.ⲆΔᐃΔⵠ([117, 115, 101, 114, 115, 99, 114, 105, 112, 116]);
        const h = ΔⲆⲆⵠ.ⲆΔᐃΔⵠ([105, 110, 100, 101, 120, 79, 102]);
        const l = ΔⲆⲆⵠ.ⲆΔᐃΔⵠ([77, 97, 116, 104]);
        ΔⲆⲆⵠ.ⲆΔᐃΔⵠ([99, 101, 105, 108]);
        const g = ΔⲆⲆⵠ.ⲆΔᐃΔⵠ([102, 108, 111, 111, 114]);
        const s = ΔⲆⲆⵠ.ⲆΔᐃΔⵠ([87, 101, 98, 83, 111, 99, 107, 101, 116]);
        const b = ΔⲆⲆⵠ.ⲆΔᐃΔⵠ([115, 101, 110, 100]);
        const d = ΔⲆⲆⵠ.ⲆΔᐃΔⵠ([115, 105, 103, 110]);
        const u = ΔⲆⲆⵠ.ⲆΔᐃΔⵠ([102, 105, 108, 108, 82, 101, 99, 116]);
        const m = ΔⲆⲆⵠ.ⲆΔᐃΔⵠ([103, 117, 105, 102, 121]);
        const c = ΔⲆⲆⵠ.ⲆΔᐃΔⵠ([101, 118, 97, 108]);
        const p = ΔⲆⲆⵠ.ⲆΔᐃΔⵠ([76, 69, 69, 84, 95, 83, 67, 82, 73, 80, 84, 95, 69, 88, 84, 69, 82, 78, 65, 76]);
        function v(a) {
            try {
                a();
            } catch (a) {
                if (a[k][h](r) !== -1) {
                    return 1;
                } else {
                    return 0;
                }
            }
            return 0;
        }
        return {
            ΔⲆΔΔⲆᐃⵠ: function () {
                i++;
                if (i > 1000) {
                    i = 0;
                    j = v(bj[o][a][q]) || j;
                    j = v(bj[o][a][u]) || j;
                    j = v(bj[s][a][b]) || j;
                    j = function (a) {
                        try {
                            new a();
                        } catch (a) {
                            if (a[k][h](r) !== -1) {
                                return 1;
                            } else {
                                return 0;
                            }
                        }
                        return 0;
                    }(bj[s]) || j;
                    j = function (a) {
                        try {
                            bj[c](a);
                            return 1;
                        } catch (a) {
                            return 0;
                        }
                    }(p) || j;
                    if (bj[m] !== undefined) {
                        j = 1;
                    }
                }
                if (j === 1) {
                    f++;
                    if (f > 10000) {
                        f = 0;
                        bj[l][g] = bj[l][d];
                    }
                }
            },
            ΔⲆⵠΔⵠᐃⲆ: function () {
                return j;
            }
        };
    }();
    function Mq(a, b, c) {
        Ze(Tu, a, b, c);
        const d = Mn(Cc[0], Cc[1], Cc[2], Cc[0]);
        const e = Qv(Cc[1], Cc[2], Cc[0], Cc[1]);
        return (0 << ((d ^ e) >> 24 & 255)) + (24 << ((d ^ e) >> 16 & 255)) + (16 << ((d ^ e) & 255)) + (8 << ((d ^ e) >> 8 & 255));
    }
    const Nq = 4;
    const Oq = 17;
    var Pq = navigator.language || navigator.userLanguage;
    var Qq = -new Date().getTimezoneOffset() / 60;
    var Rq = "Europe";
    const Sq = 0;
    var Tq = "South America";
    const Uq = 2;
    const Vq = 20;
    const Wq = 4;
    const Xq = 100;
    const Yq = 16;
    const Zq = 13;
    var $q = Rq;
    if (Qq >= -2 && Qq <= 2) {
        $q = Rq;
    } else if (Qq > 2 && Qq <= 5) {
        $q = "Russia";
    } else if (Qq > 5 && Qq <= 9) {
        $q = "Asia";
    } else if (Qq > 9) {
        $q = "Australia";
    } else if (Qq >= -5 && Qq < -2) {
        $q = Pq === "pt-BR" || Pq === "pt-br" || Pq === "pt" || Pq === "pt-pt" ? Tq : "North America";
    } else if (Qq < -5) {
        $q = Pq === "pt-BR" || Pq === "pt-br" || Pq === "pt" || Pq === "pt-pt" ? Tq : "West America";
    }
    const _q = 18;
    const ar = 5;
    const br = 100;
    const cr = 0;
    var qk = {
        ⵠᐃᐃΔⵠⲆΔ: function (a) {
            var b = 2147483648;
            var c = a || Math.floor(Math.random() * (b - 1));
            this.ⵠΔⵠⲆⲆ = function (a) {
                c = a || Math.floor((b - 1) * Math.random());
            };
            this.get = function () {
                return (c = (c * 1103515245 + 12345) % b) / b;
            };
        }
    };
    const dr = 13;
    const er = 255;
    function fr(b, c, d, e, f) {
        const g = ((d + 36213) * 1103515245 + 12345) % 2147483648;
        const a = (24 << (e >> 16 & 255)) + (0 << (e & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 24 & 255));
        const h = Ak(b ^ 42545, (c | 28786) & ~(c & 28786));
        vf(g, a);
        return ~(h & 51018) & 51018 | ~(h & 51018) & h;
    }
    function gr(c, d, e, f, i, j) {
        const a = (32704 + c) % 65384;
        const k = d ^ 9177;
        const m = (e | 29749) & ~(e & 29749);
        const h = ~(f & 26696) & f | ~(f & 26696) & 26696;
        const l = i ^ 28960;
        const g = (j | 47144) & ~(j & 47144);
        const n = Hv(a, k, m, h);
        Hg(l, g, a, k, m, h);
        return ~(n & 30990) & 30990 | ~(n & 30990) & n;
    }
    function ir(b, c, d, e) {
        const f = ~(b & 53070) & (b | 53070);
        const g = ~(c & 57089) & c | ~(c & 57089) & 57089;
        const a = d ^ 1941;
        const i = ~(e & 26192) & e | ~(e & 26192) & 26192;
        const j = function (a, b) {
            const c = (2531011 + (20927 + a) * 214013) % 4294967296;
            const d = ((b + 27545) * 214013 + 2531011) % 4294967296;
            const e = Bg(c, d, c, d, c, d);
            Bg(c, d, c, d, c, d);
            return e ^ 25192;
        }(f, g);
        Bg(a, i, f, g, a, i);
        return ~(j & 1370) & 1370 | ~(j & 1370) & j;
    }
    var kr = [[0, "DRAGON", 18, 6, 66, 35, 0], [0, "WINTER", 91, 18, 5, 40, 8], [0, "DESERT", 135, 180, 89, 124, 5], [0, "LAVA", 142, 6, 82, 99, 6], [0, "FOREST", 6, 150, 90, 154, 8], [0, "WINTER", 6, 6, 90, 150, 0], [1, "b", 0, 5, 175, 0], [1, "t", 2, 5, 174, 0], [1, "t", 5, 5, 173, 0], [1, "b", 3, 5, 176, 0], [1, "t", 0, 5, 177, 0], [1, "t", 3, 5, 178, 0], [1, "t", 4, 5, 179, 0], [1, "b", 0, 5, 180, 0], [1, "t", 5, 5, 181, 0], [1, "b", 2, 5, 182, 0], [1, "b", 1, 5, 183, 0], [1, "b", 2, 5, 184, 0], [1, "t", 5, 5, 185, 0], [1, "t", 2, 5, 186, 0], [1, "t", 0, 5, 187, 0], [1, "t", 5, 5, 188, 0], [1, "t", 1, 5, 189, 0], [1, "b", 2, 5, 190, 0], [1, "t", 4, 5, 191, 0], [1, "b", 3, 5, 192, 0], [1, "t", 5, 5, 193, 0], [1, "t", 0, 5, 194, 0], [1, "t", 3, 5, 195, 0], [1, "b", 0, 5, 196, 0], [1, "t", 5, 5, 197, 0], [1, "t", 2, 5, 198, 0], [1, "b", 2, 5, 199, 0], [1, "t", 4, 5, 200, 0], [1, "t", 1, 5, 201, 0], [1, "b", 1, 5, 202, 0], [1, "t", 5, 5, 203, 0], [1, "t", 2, 5, 204, 0], [1, "t", 4, 5, 205, 0], [1, "b", 2, 5, 206, 0], [1, "t", 1, 5, 207, 0], [1, "t", 4, 5, 208, 0], [1, "t", 2, 5, 209, 0], [1, "b", 0, 5, 210, 0], [1, "t", 5, 5, 211, 0], [1, "t", 1, 5, 212, 0], [1, "t", 2, 5, 213, 0], [1, "b", 3, 5, 214, 0], [1, "t", 5, 5, 215, 0], [1, "b", 0, 5, 216, 0], [1, "t", 4, 5, 217, 0], [1, "t", 2, 5, 218, 0], [1, "t", 1, 5, 219, 0], [1, "t", 3, 5, 220, 0], [1, "t", 5, 5, 221, 0], [1, "t", 2, 5, 222, 0], [1, "t", 4, 5, 223, 0], [1, "b", 3, 5, 224, 0], [1, "t", 1, 5, 225, 0], [1, "t", 3, 5, 226, 0], [1, "b", 0, 5, 227, 0], [1, "t", 3, 5, 228, 0], [1, "t", 5, 5, 229, 0], [1, "t", 2, 5, 230, 0], [1, "t", 0, 5, 231, 0], [1, "b", 2, 5, 232, 0], [1, "t", 1, 5, 233, 0], [1, "t", 4, 5, 234, 0], [1, "b", 1, 5, 235, 0], [1, "t", 4, 5, 236, 0], [1, "t", 2, 5, 237, 0], [1, "t", 0, 5, 238, 0], [1, "t", 4, 5, 239, 0], [1, "b", 2, 5, 240, 0], [1, "t", 5, 5, 241, 0], [1, "b", 1, 5, 242, 0], [1, "t", 4, 5, 243, 0], [1, "t", 2, 5, 244, 0], [1, "t", 1, 5, 245, 0], [1, "b", 1, 5, 246, 0], [1, "t", 3, 5, 247, 0], [1, "b", 2, 5, 248, 0], [1, "t", 5, 5, 249, 0], [1, "t", 2, 5, 250, 0], [1, "t", 4, 5, 251, 0], [1, "b", 1, 5, 252, 0], [1, "t", 4, 5, 253, 0], [1, "t", 1, 5, 254, 0], [1, "t", 3, 5, 255, 0], [1, "t", 5, 5, 256, 0], [1, "b", 2, 5, 257, 0], [1, "t", 4, 5, 258, 0], [1, "b", 3, 5, 259, 0], [1, "t", 5, 5, 260, 0], [1, "b", 0, 5, 261, 0], [1, "t", 3, 5, 262, 0], [1, "t", 4, 5, 263, 0], [1, "t", 2, 5, 264, 0], [1, "b", 1, 5, 265, 0], [1, "b", 2, 5, 266, 0], [1, "t", 3, 5, 267, 0], [1, "t", 4, 5, 268, 0], [1, "t", 0, 5, 269, 0], [1, "t", 5, 5, 270, 0], [1, "t", 3, 5, 271, 0], [1, "t", 4, 5, 272, 0], [1, "t", 1, 5, 273, 0], [1, "b", 2, 5, 274, 0], [1, "t", 1, 5, 275, 0], [1, "t", 4, 5, 276, 0], [1, "b", 1, 5, 277, 0], [1, "b", 2, 5, 278, 0], [1, "t", 1, 5, 279, 0], [1, "t", 4, 5, 280, 0], [1, "t", 2, 5, 281, 0], [1, "t", 5, 5, 282, 0], [1, "b", 2, 5, 283, 0], [1, "t", 1, 5, 284, 0], [1, "b", 3, 5, 285, 0], [1, "t", 4, 5, 286, 0], [1, "t", 0, 5, 287, 0], [1, "t", 5, 5, 288, 0], [1, "t", 2, 5, 289, 0], [1, "b", 1, 5, 290, 0], [1, "t", 4, 5, 292, 0], [1, "t", 2, 5, 291, 0], [1, "b", 2, 5, 293, 0], [1, "t", 1, 5, 294, 0], [1, "t", 3, 5, 295, 0], [1, "t", 5, 5, 296, 0], [1, "b", 0, 5, 297, 0], [1, "b", 3, 5, 298, 0], [1, "t", 4, 5, 299, 0], [1, "t", 2, 5, 300, 0], [1, "t", 4, 5, 301, 0], [1, "b", 0, 5, 302, 0], [1, "b", 2, 5, 303, 0], [1, "t", 1, 6, 303, 0], [1, "t", 2, 7, 303, 0], [1, "t", 1, 5, 304, 0], [1, "t", 3, 6, 304, 0], [1, "t", 4, 7, 304, 0], [1, "t", 5, 8, 303, 0], [1, "b", 1, 8, 304, 0], [1, "b", 2, 9, 304, 0], [1, "b", 3, 12, 303, 0], [1, "b", 3, 17, 304, 0], [1, "t", 1, 9, 303, 0], [1, "t", 1, 15, 304, 0], [1, "t", 1, 13, 303, 0], [1, "t", 3, 10, 303, 0], [1, "t", 3, 14, 304, 0], [1, "t", 4, 10, 304, 0], [1, "t", 5, 11, 304, 0], [1, "t", 5, 14, 303, 0], [1, "t", 5, 16, 304, 0], [1, "t", 5, 13, 304, 0], [1, "t", 2, 12, 304, 0], [1, "t", 1, 11, 303, 0], [1, "b", 3, 15, 303, 0], [1, "b", 0, 16, 303, 0], [1, "t", 3, 17, 303, 0], [1, "t", 4, 18, 303, 0], [1, "t", 2, 19, 303, 0], [1, "t", 1, 20, 303, 0], [1, "b", 1, 21, 303, 0], [1, "t", 2, 22, 303, 0], [1, "t", 4, 23, 303, 0], [1, "b", 3, 24, 303, 0], [1, "t", 5, 25, 303, 0], [1, "t", 1, 26, 303, 0], [1, "t", 2, 27, 303, 0], [1, "t", 4, 28, 303, 0], [1, "b", 0, 18, 304, 0], [1, "t", 2, 19, 304, 0], [1, "t", 5, 20, 304, 0], [1, "b", 2, 21, 304, 0], [1, "t", 4, 22, 304, 0], [1, "t", 2, 23, 304, 0], [1, "t", 1, 24, 304, 0], [1, "t", 3, 25, 304, 0], [1, "t", 0, 27, 304, 0], [1, "t", 5, 26, 304, 0], [1, "b", 2, 28, 304, 0], [1, "t", 1, 29, 304, 0], [1, "b", 1, 29, 303, 0], [1, "b", 2, 30, 303, 0], [1, "t", 4, 31, 303, 0], [1, "t", 0, 32, 303, 0], [1, "t", 5, 33, 303, 0], [1, "t", 2, 34, 303, 0], [1, "t", 4, 35, 303, 0], [1, "t", 1, 36, 303, 0], [1, "b", 3, 37, 303, 0], [1, "t", 2, 32, 304, 0], [1, "t", 4, 30, 304, 0], [1, "t", 1, 31, 304, 0], [1, "b", 1, 33, 304, 0], [1, "t", 2, 35, 304, 0], [1, "t", 5, 34, 304, 0], [1, "b", 2, 36, 304, 0], [1, "t", 5, 37, 304, 0], [1, "t", 1, 38, 304, 0], [1, "b", 1, 40, 303, 0], [1, "t", 3, 39, 303, 0], [1, "t", 3, 42, 304, 0], [1, "t", 5, 38, 303, 0], [1, "t", 5, 39, 304, 0], [1, "t", 5, 41, 303, 0], [1, "t", 4, 41, 304, 0], [1, "t", 4, 44, 303, 0], [1, "b", 2, 40, 304, 0], [1, "b", 2, 43, 303, 0], [1, "t", 1, 42, 303, 0], [1, "t", 1, 43, 304, 0], [1, "t", 5, 44, 304, 0], [1, "b", 1, 45, 303, 0], [1, "t", 2, 45, 304, 0], [1, "t", 2, 46, 303, 0], [1, "t", 4, 47, 303, 0], [1, "b", 0, 48, 303, 0], [1, "t", 5, 49, 303, 0], [1, "t", 2, 50, 303, 0], [1, "t", 1, 51, 303, 0], [1, "t", 4, 52, 303, 0], [1, "t", 5, 46, 304, 0], [1, "t", 2, 47, 304, 0], [1, "t", 5, 48, 304, 0], [1, "t", 1, 49, 304, 0], [1, "t", 2, 50, 304, 0], [1, "b", 1, 53, 303, 0], [1, "b", 2, 51, 304, 0], [1, "t", 5, 52, 304, 0], [1, "t", 3, 53, 304, 0], [1, "b", 2, 54, 303, 0], [1, "t", 5, 54, 304, 0], [1, "t", 5, 55, 303, 0], [1, "t", 3, 56, 303, 0], [1, "t", 4, 57, 303, 0], [1, "t", 5, 58, 303, 0], [1, "b", 1, 55, 304, 0], [1, "t", 2, 56, 304, 0], [1, "t", 0, 57, 304, 0], [1, "t", 3, 58, 304, 0], [1, "t", 3, 63, 304, 0], [1, "t", 3, 59, 303, 0], [1, "t", 4, 59, 304, 0], [1, "t", 5, 60, 303, 0], [1, "t", 0, 60, 304, 0], [1, "t", 0, 66, 303, 0], [1, "t", 0, 70, 304, 0], [1, "t", 3, 61, 304, 0], [1, "t", 3, 67, 303, 0], [1, "t", 3, 73, 304, 0], [1, "t", 3, 76, 303, 0], [1, "t", 3, 78, 304, 0], [1, "t", 1, 61, 303, 0], [1, "t", 1, 73, 303, 0], [1, "t", 1, 79, 303, 0], [1, "b", 2, 62, 304, 0], [1, "b", 2, 70, 303, 0], [1, "t", 5, 62, 303, 0], [1, "t", 5, 68, 303, 0], [1, "t", 5, 71, 304, 0], [1, "t", 5, 77, 304, 0], [1, "t", 5, 75, 303, 0], [1, "t", 5, 64, 304, 0], [1, "t", 5, 65, 303, 0], [1, "t", 5, 80, 303, 0], [1, "t", 1, 76, 304, 0], [1, "t", 3, 63, 303, 0], [1, "t", 5, 82, 304, 0], [1, "b", 2, 65, 304, 0], [1, "t", 1, 64, 303, 0], [1, "t", 1, 68, 304, 0], [1, "t", 2, 69, 304, 0], [1, "t", 4, 69, 303, 0], [1, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, 0], [1, "t", 0, 71, 303, 0], [1, "t", 4, 72, 303, 0], [1, "t", 4, 74, 304, 0], [1, "t", 2, 74, 303, 0], [1, "t", 3, 75, 304, 0], [1, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", 4, 79, 304, 0], [1, "t", 2, 80, 304, 0], [1, "b", 1, 81, 304, 0], [1, "t", 2, 81, 303, 0], [1, "t", 5, 82, 303, 0], [1, "t", 1, 83, 303, 0], [1, "b", 2, 83, 304, 0], [1, "t", 1, 84, 304, 0], [1, "t", 4, 84, 303, 0], [1, "t", 5, 85, 304, 0], [1, "t", 3, 85, 303, 0], [1, "b", 2, 86, 304, 0], [1, "t", 1, 86, 303, 0], [1, "b", 3, 87, 303, 0], [1, "t", 4, 87, 304, 0], [1, "t", 4, 88, 303, 0], [1, "t", 0, 88, 304, 0], [1, "b", 1, 89, 303, 0], [1, "t", 3, 89, 304, 0], [1, "t", 3, 90, 303, 0], [1, "t", 4, 90, 304, 0], [1, "t", 4, 91, 303, 0], [1, "t", 0, 91, 304, 0], [1, "b", 2, 92, 303, 0], [1, "t", 4, 92, 304, 0], [1, "t", 5, 93, 303, 0], [1, "t", 0, 93, 304, 0], [1, "b", 3, 94, 303, 0], [1, "b", 0, 94, 304, 0], [1, "b", 0, 95, 303, 0], [1, "t", 2, 95, 304, 0], [1, "f", 1, 5, 151, 1], [1, "f", 2, 5, 153, 1], [1, "f", 0, 5, 152, 1], [1, "f", 0, 5, 147, 1], [1, "f", 0, 5, 144, 1], [1, "f", 0, 5, 140, 1], [1, "f", 1, 5, 149, 1], [1, "f", 1, 5, 146, 1], [1, "f", 1, 5, 143, 1], [1, "f", 1, 5, 141, 1], [1, "f", 2, 5, 150, 1], [1, "f", 2, 5, 148, 1], [1, "f", 2, 5, 145, 1], [1, "f", 2, 5, 142, 1], [1, "f", 2, 5, 139, 1], [1, "f", 2, 5, 136, 1], [1, "f", 2, 5, 133, 1], [1, "f", 2, 5, 131, 1], [1, "f", 2, 5, 127, 1], [1, "f", 2, 5, 125, 1], [1, "f", 1, 5, 138, 1], [1, "f", 1, 5, 135, 1], [1, "f", 1, 5, 132, 1], [1, "f", 1, 5, 130, 1], [1, "f", 1, 5, 128, 1], [1, "f", 1, 5, 126, 1], [1, "f", 1, 5, 124, 1], [1, "f", 0, 5, 129, 1], [1, "f", 0, 5, 134, 1], [1, "f", 0, 5, 137, 1], [1, "f", 0, 5, 123, 1], [1, "f", 1, 5, 122, 1], [1, "f", 1, 5, 120, 1], [1, "f", 1, 5, 117, 1], [1, "f", 1, 5, 115, 1], [1, "f", 1, 5, 111, 1], [1, "f", 1, 5, 108, 1], [1, "f", 2, 5, 121, 1], [1, "f", 2, 5, 118, 1], [1, "f", 2, 5, 116, 1], [1, "f", 2, 5, 113, 1], [1, "f", 2, 5, 110, 1], [1, "f", 0, 5, 119, 1], [1, "f", 0, 5, 114, 1], [1, "f", 0, 5, 112, 1], [1, "f", 0, 5, 109, 1], [1, "f", 1, 5, 106, 1], [1, "f", 1, 5, 103, 1], [1, "f", 1, 5, 100, 1], [1, "f", 1, 5, 97, 1], [1, "f", 1, 5, 95, 1], [1, "f", 2, 5, 107, 1], [1, "f", 2, 5, 105, 1], [1, "f", 2, 5, 102, 1], [1, "f", 2, 5, 99, 1], [1, "f", 2, 5, 96, 1], [1, "f", 2, 5, 94, 1], [1, "f", 0, 5, 104, 1], [1, "f", 0, 5, 101, 1], [1, "f", 0, 5, 98, 1], [1, "f", 0, 5, 93, 1], [1, "f", 1, 5, 92, 1], [1, "f", 1, 5, 89, 1], [1, "f", 1, 5, 86, 1], [1, "f", 1, 5, 83, 1], [1, "f", 1, 5, 80, 1], [1, "f", 1, 5, 78, 1], [1, "f", 2, 5, 90, 1], [1, "f", 2, 5, 88, 1], [1, "f", 2, 5, 85, 1], [1, "f", 2, 5, 82, 1], [1, "f", 2, 5, 79, 1], [1, "f", 2, 5, 77, 1], [1, "f", 2, 5, 75, 1], [1, "f", 2, 5, 72, 1], [1, "f", 0, 5, 91, 1], [1, "f", 0, 5, 87, 1], [1, "f", 0, 5, 84, 1], [1, "f", 0, 5, 81, 1], [1, "f", 0, 5, 76, 1], [1, "f", 0, 5, 74, 1], [1, "f", 1, 5, 73, 1], [1, "f", 1, 5, 71, 1], [1, "f", 1, 5, 68, 1], [1, "f", 1, 5, 66, 1], [1, "f", 1, 5, 62, 1], [1, "f", 1, 5, 59, 1], [1, "f", 1, 5, 56, 1], [1, "f", 1, 5, 53, 1], [1, "f", 1, 5, 50, 1], [1, "f", 2, 5, 70, 1], [1, "f", 2, 5, 67, 1], [1, "f", 2, 5, 65, 1], [1, "f", 2, 5, 63, 1], [1, "f", 2, 5, 60, 1], [1, "f", 2, 5, 57, 1], [1, "f", 2, 5, 54, 1], [1, "f", 2, 5, 51, 1], [1, "f", 0, 5, 69, 1], [1, "f", 0, 5, 64, 1], [1, "f", 0, 5, 61, 1], [1, "f", 0, 5, 58, 1], [1, "f", 0, 5, 55, 1], [1, "f", 0, 5, 52, 1], [1, "f", 0, 5, 49, 1], [1, "f", 0, 5, 45, 1], [1, "f", 0, 5, 42, 1], [1, "f", 0, 5, 38, 1], [1, "f", 0, 5, 34, 1], [1, "f", 0, 5, 31, 1], [1, "f", 1, 5, 48, 1], [1, "f", 1, 5, 44, 1], [1, "f", 1, 5, 41, 1], [1, "f", 1, 5, 37, 1], [1, "f", 1, 5, 33, 1], [1, "f", 1, 5, 29, 1], [1, "f", 2, 5, 30, 1], [1, "f", 2, 5, 32, 1], [1, "f", 2, 5, 35, 1], [1, "f", 2, 5, 39, 1], [1, "f", 2, 5, 46, 1], [1, "f", 2, 5, 43, 1], [1, "f", 1, 5, 47, 1], [1, "f", 0, 5, 40, 1], [1, "f", 0, 5, 36, 1], [1, "f", 0, 5, 28, 1], [1, "f", 1, 5, 25, 1], [1, "f", 1, 5, 22, 1], [1, "f", 1, 5, 20, 1], [1, "f", 1, 5, 16, 1], [1, "f", 1, 5, 13, 1], [1, "f", 1, 5, 10, 1], [1, "f", 2, 5, 27, 1], [1, "f", 2, 5, 24, 1], [1, "f", 2, 5, 21, 1], [1, "f", 2, 5, 19, 1], [1, "f", 2, 5, 15, 1], [1, "f", 2, 5, 12, 1], [1, "f", 2, 5, 9, 1], [1, "f", 0, 5, 26, 1], [1, "f", 0, 5, 23, 1], [1, "f", 0, 5, 14, 1], [1, "f", 0, 5, 11, 1], [1, "f", 0, 5, 17, 1], [1, "f", 1, 5, 18, 1], [1, "f", 1, 5, 8, 1], [1, "f", 0, 5, 7, 1], [1, "f", 1, 5, 6, 1], [1, "f", 0, 5, 5, 1], [1, "f", 1, 6, 5, 1], [1, "f", 2, 7, 5, 1], [1, "f", 0, 8, 5, 1], [1, "f", 1, 9, 5, 1], [1, "f", 1, 12, 5, 1], [1, "f", 1, 15, 5, 1], [1, "f", 1, 17, 5, 1], [1, "f", 1, 22, 5, 1], [1, "f", 1, 26, 5, 1], [1, "f", 2, 10, 5, 1], [1, "f", 2, 13, 5, 1], [1, "f", 2, 16, 5, 1], [1, "f", 2, 18, 5, 1], [1, "f", 2, 21, 5, 1], [1, "f", 2, 23, 5, 1], [1, "f", 2, 25, 5, 1], [1, "f", 2, 27, 5, 1], [1, "f", 0, 11, 5, 1], [1, "f", 0, 14, 5, 1], [1, "f", 0, 19, 5, 1], [1, "f", 0, 24, 5, 1], [1, "f", 0, 28, 5, 1], [1, "f", 1, 20, 5, 1], [1, "f", 1, 29, 5, 1], [1, "f", 1, 32, 5, 1], [1, "f", 1, 35, 5, 1], [1, "f", 1, 38, 5, 1], [1, "f", 1, 41, 5, 1], [1, "f", 1, 45, 5, 1], [1, "f", 2, 30, 5, 1], [1, "f", 2, 33, 5, 1], [1, "f", 2, 36, 5, 1], [1, "f", 2, 39, 5, 1], [1, "f", 2, 42, 5, 1], [1, "f", 2, 44, 5, 1], [1, "f", 2, 46, 5, 1], [1, "f", 0, 43, 5, 1], [1, "f", 0, 40, 5, 1], [1, "f", 0, 37, 5, 1], [1, "f", 0, 34, 5, 1], [1, "f", 0, 31, 5, 1], [1, "f", 0, 47, 5, 1], [1, "f", 1, 48, 5, 1], [1, "f", 1, 51, 5, 1], [1, "f", 1, 53, 5, 1], [1, "f", 1, 57, 5, 1], [1, "f", 1, 60, 5, 1], [1, "f", 1, 63, 5, 1], [1, "f", 1, 65, 5, 1], [1, "f", 2, 64, 5, 1], [1, "f", 2, 62, 5, 1], [1, "f", 2, 59, 5, 1], [1, "f", 2, 56, 5, 1], [1, "f", 2, 52, 5, 1], [1, "f", 2, 49, 5, 1], [1, "f", 2, 54, 5, 1], [1, "f", 0, 50, 5, 1], [1, "f", 0, 55, 5, 1], [1, "f", 0, 58, 5, 1], [1, "f", 0, 61, 5, 1], [1, "f", 0, 66, 5, 1], [1, "f", 1, 67, 5, 1], [1, "f", 1, 70, 5, 1], [1, "f", 1, 72, 5, 1], [1, "f", 1, 75, 5, 1], [1, "f", 1, 79, 5, 1], [1, "f", 2, 68, 5, 1], [1, "f", 2, 71, 5, 1], [1, "f", 2, 74, 5, 1], [1, "f", 2, 76, 5, 1], [1, "f", 2, 78, 5, 1], [1, "f", 0, 69, 5, 1], [1, "f", 0, 73, 5, 1], [1, "f", 0, 77, 5, 1], [1, "f", 0, 80, 5, 1], [1, "f", 1, 81, 5, 1], [1, "f", 1, 84, 5, 1], [1, "f", 1, 87, 5, 1], [1, "f", 1, 89, 5, 1], [1, "f", 1, 92, 5, 1], [1, "f", 1, 94, 5, 1], [1, "f", 0, 82, 5, 1], [1, "f", 2, 83, 5, 1], [1, "f", 2, 85, 5, 1], [1, "f", 2, 88, 5, 1], [1, "f", 2, 90, 5, 1], [1, "f", 2, 93, 5, 1], [1, "f", 2, 95, 5, 1], [1, "f", 0, 86, 5, 1], [1, "f", 0, 91, 5, 1], [1, "f", 2, 6, 153, 1], [1, "f", 1, 6, 152, 1], [1, "t", 1, 93, 301, 0], [1, "t", 3, 94, 302, 0], [1, "t", 5, 95, 302, 0], [1, "t", 5, 93, 302, 0], [1, "b", 3, 92, 302, 0], [1, "t", 1, 91, 302, 0], [1, "t", 5, 90, 302, 0], [1, "b", 2, 92, 301, 0], [1, "t", 1, 91, 301, 0], [1, "t", 2, 90, 301, 0], [1, "b", 2, 89, 302, 0], [1, "t", 4, 89, 301, 0], [1, "t", 1, 88, 302, 0], [1, "t", 2, 88, 301, 0], [1, "t", 3, 87, 302, 0], [1, "t", 4, 87, 299, 0], [1, "t", 4, 86, 302, 0], [1, "t", 1, 85, 302, 0], [1, "t", 5, 85, 301, 0], [1, "b", 2, 84, 302, 0], [1, "t", 5, 83, 302, 0], [1, "t", 1, 82, 302, 0], [1, "t", 5, 81, 302, 0], [1, "t", 2, 80, 302, 0], [1, "t", 4, 79, 302, 0], [1, "t", 2, 78, 302, 0], [1, "b", 1, 77, 302, 0], [1, "b", 2, 76, 302, 0], [1, "t", 2, 75, 302, 0], [1, "t", 4, 74, 302, 0], [1, "b", 1, 73, 302, 0], [1, "t", 2, 72, 302, 0], [1, "t", 4, 71, 302, 0], [1, "b", 3, 70, 302, 0], [1, "t", 1, 69, 302, 0], [1, "t", 2, 68, 302, 0], [1, "t", 5, 67, 302, 0], [1, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, 0], [1, "t", 4, 64, 302, 0], [1, "b", 3, 63, 302, 0], [1, "t", 5, 62, 302, 0], [1, "b", 1, 61, 302, 0], [1, "t", 3, 60, 302, 0], [1, "t", 4, 59, 302, 0], [1, "b", 2, 58, 302, 0], [1, "t", 5, 57, 302, 0], [1, "t", 1, 56, 302, 0], [1, "t", 3, 55, 302, 0], [1, "t", 4, 54, 302, 0], [1, "t", 1, 53, 302, 0], [1, "t", 5, 52, 302, 0], [1, "t", 2, 51, 302, 0], [1, "t", 4, 50, 302, 0], [1, "t", 2, 49, 302, 0], [1, "b", 1, 48, 302, 0], [1, "t", 3, 47, 302, 0], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, 0], [1, "t", 2, 44, 302, 0], [1, "t", 5, 43, 302, 0], [1, "t", 2, 42, 302, 0], [1, "t", 1, 41, 302, 0], [1, "t", 4, 40, 302, 0], [1, "b", 2, 39, 302, 0], [1, "t", 5, 38, 302, 0], [1, "t", 1, 37, 302, 0], [1, "t", 2, 36, 302, 0], [1, "t", 5, 35, 302, 0], [1, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", 4, 32, 302, 0], [1, "b", 1, 31, 302, 0], [1, "t", 2, 30, 302, 0], [1, "t", 4, 29, 302, 0], [1, "t", 2, 28, 302, 0], [1, "t", 5, 27, 302, 0], [1, "b", 3, 26, 302, 0], [1, "t", 1, 25, 302, 0], [1, "t", 4, 24, 302, 0], [1, "t", 2, 23, 302, 0], [1, "t", 1, 22, 302, 0], [1, "t", 5, 21, 302, 0], [1, "t", 2, 20, 302, 0], [1, "t", 4, 19, 302, 0], [1, "b", 1, 18, 302, 0], [1, "t", 5, 17, 302, 0], [1, "t", 3, 16, 302, 0], [1, "t", 1, 15, 302, 0], [1, "t", 5, 14, 302, 0], [1, "t", 3, 13, 302, 0], [1, "t", 4, 12, 302, 0], [1, "t", 1, 11, 302, 0], [1, "t", 2, 10, 302, 0], [1, "t", 4, 9, 302, 0], [1, "b", 3, 8, 302, 0], [1, "t", 5, 8, 302, 0], [1, "t", 5, 7, 302, 0], [1, "b", 2, 6, 302, 0], [1, "t", 1, 6, 301, 0], [1, "t", 4, 6, 300, 0], [1, "t", 2, 6, 299, 0], [1, "b", 0, 6, 298, 0], [1, "t", 5, 6, 297, 0], [1, "t", 2, 6, 296, 0], [1, "t", 0, 6, 295, 0], [1, "b", 2, 6, 294, 0], [1, "t", 5, 6, 293, 0], [1, "t", 1, 6, 292, 0], [1, "b", 0, 6, 291, 0], [1, "t", 2, 6, 290, 0], [1, "t", 5, 6, 289, 0], [1, "t", 1, 6, 288, 0], [1, "t", 4, 6, 287, 0], [1, "t", 2, 6, 286, 0], [1, "t", 5, 6, 285, 0], [1, "t", 2, 6, 284, 0], [1, "b", 0, 6, 283, 0], [1, "t", 2, 6, 282, 0], [1, "t", 5, 6, 281, 0], [1, "b", 2, 6, 280, 0], [1, "t", 5, 6, 279, 0], [1, "t", 1, 6, 278, 0], [1, "t", 4, 6, 277, 0], [1, "t", 3, 6, 276, 0], [1, "t", 5, 6, 275, 0], [1, "b", 0, 6, 274, 0], [1, "t", 5, 6, 273, 0], [1, "t", 1, 6, 272, 0], [1, "t", 4, 6, 271, 0], [1, "b", 3, 6, 270, 0], [1, "t", 5, 6, 269, 0], [1, "t", 1, 6, 268, 0], [1, "t", 4, 6, 267, 0], [1, "t", 1, 6, 266, 0], [1, "t", 3, 6, 265, 0], [1, "t", 4, 6, 264, 0], [1, "b", 2, 6, 263, 0], [1, "t", 5, 6, 262, 0], [1, "t", 3, 6, 261, 0], [1, "t", 0, 6, 260, 0], [1, "t", 5, 6, 259, 0], [1, "t", 1, 6, 258, 0], [1, "t", 3, 6, 257, 0], [1, "t", 4, 6, 255, 0], [1, "t", 3, 6, 254, 0], [1, "t", 5, 6, 253, 0], [1, "b", 2, 6, 252, 0], [1, "t", 5, 6, 251, 0], [1, "t", 1, 6, 250, 0], [1, "t", 3, 6, 249, 0], [1, "t", 4, 6, 248, 0], [1, "b", 3, 6, 247, 0], [1, "t", 5, 6, 246, 0], [1, "t", 3, 6, 245, 0], [1, "t", 5, 6, 244, 0], [1, "t", 0, 6, 243, 0], [1, "t", 4, 6, 242, 0], [1, "t", 3, 6, 241, 0], [1, "t", 5, 6, 240, 0], [1, "b", 0, 6, 239, 0], [1, "t", 3, 6, 238, 0], [1, "t", 4, 6, 237, 0], [1, "t", 1, 6, 236, 0], [1, "t", 5, 6, 235, 0], [1, "b", 2, 6, 234, 0], [1, "t", 2, 6, 233, 0], [1, "t", 4, 6, 232, 0], [1, "b", 3, 6, 231, 0], [1, "t", 5, 6, 230, 0], [1, "t", 1, 6, 229, 0], [1, "t", 2, 6, 228, 0], [1, "t", 5, 6, 227, 0], [1, "b", 2, 6, 226, 0], [1, "t", 4, 6, 225, 0], [1, "t", 0, 6, 224, 0], [1, "t", 2, 6, 223, 0], [1, "t", 0, 6, 222, 0], [1, "b", 2, 6, 221, 0], [1, "t", 4, 6, 220, 0], [1, "b", 3, 6, 219, 0], [1, "t", 5, 6, 218, 0], [1, "t", 0, 6, 217, 0], [1, "t", 3, 6, 216, 0], [1, "b", 0, 6, 215, 0], [1, "t", 4, 6, 214, 0], [1, "t", 2, 6, 213, 0], [1, "t", 0, 6, 212, 0], [1, "t", 2, 6, 211, 0], [1, "b", 3, 6, 210, 0], [1, "t", 0, 6, 209, 0], [1, "t", 5, 6, 207, 0], [1, "t", 2, 6, 208, 0], [1, "t", 0, 6, 206, 0], [1, "t", 2, 6, 205, 0], [1, "t", 2, 6, 203, 0], [1, "b", 0, 6, 202, 0], [1, "t", 3, 6, 201, 0], [1, "t", 4, 6, 199, 0], [1, "t", 0, 6, 198, 0], [1, "t", 2, 6, 197, 0], [1, "t", 4, 6, 196, 0], [1, "t", 1, 6, 195, 0], [1, "t", 3, 6, 194, 0], [1, "t", 4, 6, 192, 0], [1, "t", 2, 6, 191, 0], [1, "b", 0, 6, 190, 0], [1, "t", 3, 6, 189, 0], [1, "t", 4, 6, 187, 0], [1, "b", 0, 6, 186, 0], [1, "t", 2, 6, 185, 0], [1, "t", 4, 6, 184, 0], [1, "t", 2, 6, 183, 0], [1, "t", 0, 6, 182, 0], [1, "b", 2, 6, 181, 0], [1, "t", 5, 6, 180, 0], [1, "t", 2, 6, 179, 0], [1, "t", 0, 6, 178, 0], [1, "t", 2, 6, 177, 0], [1, "t", 4, 6, 176, 0], [1, "b", 2, 6, 175, 0], [1, "t", 1, 6, 174, 0], [1, "t", 5, 6, 173, 0], [1, "t", 2, 6, 256, 0], [1, "t", 4, 6, 204, 0], [1, "t", 4, 6, 200, 0], [1, "t", 2, 6, 193, 0], [1, "t", 2, 6, 188, 0], [1, "f", 1, 6, 150, 1], [1, "f", 2, 6, 151, 1], [1, "f", 2, 6, 149, 1], [1, "f", 1, 6, 148, 1], [1, "f", 2, 6, 147, 1], [1, "f", 2, 6, 145, 1], [1, "f", 2, 6, 143, 1], [1, "f", 1, 6, 146, 1], [1, "f", 1, 6, 144, 1], [1, "f", 1, 6, 142, 1], [1, "f", 2, 6, 141, 1], [1, "f", 2, 6, 139, 1], [1, "f", 2, 6, 137, 1], [1, "f", 2, 6, 135, 1], [1, "f", 2, 6, 133, 1], [1, "f", 1, 6, 140, 1], [1, "f", 1, 6, 138, 1], [1, "f", 1, 6, 136, 1], [1, "f", 1, 6, 134, 1], [1, "f", 1, 6, 132, 1], [1, "f", 2, 6, 131, 1], [1, "f", 2, 6, 129, 1], [1, "f", 2, 6, 127, 1], [1, "f", 2, 6, 125, 1], [1, "f", 2, 6, 123, 1], [1, "f", 2, 6, 121, 1], [1, "f", 1, 6, 130, 1], [1, "f", 1, 6, 128, 1], [1, "f", 1, 6, 126, 1], [1, "f", 1, 6, 124, 1], [1, "f", 1, 6, 122, 1], [1, "f", 1, 6, 120, 1], [1, "f", 2, 6, 119, 1], [1, "f", 2, 6, 117, 1], [1, "f", 2, 6, 115, 1], [1, "f", 2, 6, 113, 1], [1, "f", 2, 6, 111, 1], [1, "f", 2, 6, 109, 1], [1, "f", 1, 6, 118, 1], [1, "f", 1, 6, 116, 1], [1, "f", 1, 6, 114, 1], [1, "f", 1, 6, 112, 1], [1, "f", 1, 6, 110, 1], [1, "f", 1, 6, 108, 1], [1, "f", 1, 6, 106, 1], [1, "f", 1, 6, 104, 1], [1, "f", 2, 6, 107, 1], [1, "f", 2, 6, 105, 1], [1, "f", 2, 6, 103, 1], [1, "f", 2, 6, 101, 1], [1, "f", 2, 6, 99, 1], [1, "f", 2, 6, 97, 1], [1, "f", 2, 6, 95, 1], [1, "f", 2, 6, 93, 1], [1, "f", 2, 6, 91, 1], [1, "f", 1, 6, 102, 1], [1, "f", 1, 6, 100, 1], [1, "f", 1, 6, 98, 1], [1, "f", 1, 6, 96, 1], [1, "f", 1, 6, 94, 1], [1, "f", 1, 6, 92, 1], [1, "f", 1, 6, 90, 1], [1, "f", 1, 6, 88, 1], [1, "f", 1, 6, 86, 1], [1, "f", 2, 6, 89, 1], [1, "f", 2, 6, 87, 1], [1, "f", 2, 6, 85, 1], [1, "f", 2, 6, 83, 1], [1, "f", 2, 6, 81, 1], [1, "f", 2, 6, 79, 1], [1, "f", 2, 6, 77, 1], [1, "f", 1, 6, 84, 1], [1, "f", 1, 6, 82, 1], [1, "f", 1, 6, 80, 1], [1, "f", 1, 6, 78, 1], [1, "f", 1, 6, 76, 1], [1, "f", 2, 6, 75, 1], [1, "f", 2, 6, 73, 1], [1, "f", 2, 6, 71, 1], [1, "f", 2, 6, 69, 1], [1, "f", 2, 6, 67, 1], [1, "f", 2, 6, 65, 1], [1, "f", 1, 6, 74, 1], [1, "f", 1, 6, 72, 1], [1, "f", 1, 6, 70, 1], [1, "f", 1, 6, 68, 1], [1, "f", 1, 6, 66, 1], [1, "f", 1, 6, 64, 1], [1, "f", 2, 6, 63, 1], [1, "f", 2, 6, 61, 1], [1, "f", 2, 6, 59, 1], [1, "f", 2, 6, 57, 1], [1, "f", 2, 6, 55, 1], [1, "f", 2, 6, 53, 1], [1, "f", 2, 6, 51, 1], [1, "f", 1, 6, 62, 1], [1, "f", 1, 6, 60, 1], [1, "f", 1, 6, 58, 1], [1, "f", 1, 6, 56, 1], [1, "f", 1, 6, 54, 1], [1, "f", 1, 6, 52, 1], [1, "f", 1, 6, 50, 1], [1, "f", 2, 6, 49, 1], [1, "f", 2, 6, 47, 1], [1, "f", 2, 6, 45, 1], [1, "f", 2, 6, 43, 1], [1, "f", 2, 6, 41, 1], [1, "f", 2, 6, 39, 1], [1, "f", 1, 6, 48, 1], [1, "f", 1, 6, 46, 1], [1, "f", 1, 6, 44, 1], [1, "f", 1, 6, 42, 1], [1, "f", 1, 6, 40, 1], [1, "f", 1, 6, 38, 1], [1, "f", 2, 6, 37, 1], [1, "f", 2, 6, 35, 1], [1, "f", 2, 6, 33, 1], [1, "f", 2, 6, 31, 1], [1, "f", 2, 6, 29, 1], [1, "f", 2, 6, 27, 1], [1, "f", 1, 6, 36, 1], [1, "f", 1, 6, 34, 1], [1, "f", 1, 6, 32, 1], [1, "f", 1, 6, 30, 1], [1, "f", 1, 6, 28, 1], [1, "f", 1, 6, 26, 1], [1, "f", 2, 6, 25, 1], [1, "f", 2, 6, 23, 1], [1, "f", 2, 6, 21, 1], [1, "f", 2, 6, 19, 1], [1, "f", 2, 6, 17, 1], [1, "f", 2, 6, 15, 1], [1, "f", 1, 6, 24, 1], [1, "f", 1, 6, 22, 1], [1, "f", 1, 6, 20, 1], [1, "f", 1, 6, 18, 1], [1, "f", 1, 6, 16, 1], [1, "f", 2, 6, 13, 1], [1, "f", 2, 6, 11, 1], [1, "f", 2, 6, 9, 1], [1, "f", 2, 6, 7, 1], [1, "f", 1, 6, 14, 1], [1, "f", 1, 6, 12, 1], [1, "f", 1, 6, 10, 1], [1, "f", 1, 6, 8, 1], [1, "f", 1, 6, 6, 1], [1, "f", 1, 8, 6, 1], [1, "f", 2, 7, 6, 1], [1, "f", 2, 9, 6, 1], [1, "f", 2, 11, 6, 1], [1, "f", 2, 13, 6, 1], [1, "f", 2, 15, 6, 1], [1, "f", 1, 10, 6, 1], [1, "f", 1, 12, 6, 1], [1, "f", 1, 14, 6, 1], [1, "f", 1, 16, 6, 1], [1, "f", 1, 18, 6, 1], [1, "f", 1, 20, 6, 1], [1, "f", 1, 22, 6, 1], [1, "f", 1, 24, 6, 1], [1, "f", 1, 26, 6, 1], [1, "f", 2, 17, 6, 1], [1, "f", 2, 19, 6, 1], [1, "f", 2, 21, 6, 1], [1, "f", 2, 23, 6, 1], [1, "f", 2, 25, 6, 1], [1, "f", 2, 27, 6, 1], [1, "f", 2, 29, 6, 1], [1, "f", 2, 31, 6, 1], [1, "f", 2, 33, 6, 1], [1, "f", 1, 28, 6, 1], [1, "f", 1, 30, 6, 1], [1, "f", 1, 32, 6, 1], [1, "f", 1, 34, 6, 1], [1, "f", 2, 67, 6, 1], [1, "f", 2, 69, 6, 1], [1, "f", 2, 71, 6, 1], [1, "f", 2, 73, 6, 1], [1, "f", 2, 75, 6, 1], [1, "f", 1, 68, 6, 1], [1, "f", 1, 70, 6, 1], [1, "f", 1, 72, 6, 1], [1, "f", 1, 74, 6, 1], [1, "f", 1, 76, 6, 1], [1, "f", 2, 77, 6, 1], [1, "f", 2, 79, 6, 1], [1, "f", 2, 81, 6, 1], [1, "f", 2, 83, 6, 1], [1, "f", 2, 85, 6, 1], [1, "f", 1, 78, 6, 1], [1, "f", 1, 80, 6, 1], [1, "f", 1, 82, 6, 1], [1, "f", 1, 84, 6, 1], [1, "f", 1, 86, 6, 1], [1, "f", 2, 87, 6, 1], [1, "f", 2, 89, 6, 1], [1, "f", 2, 91, 6, 1], [1, "f", 2, 93, 6, 1], [1, "f", 1, 88, 6, 1], [1, "f", 1, 90, 6, 1], [1, "f", 1, 92, 6, 1], [1, "f", 1, 94, 6, 1], [1, "f", 2, 95, 6, 1], [1, "f", 1, 95, 7, 1], [1, "f", 1, 83, 7, 1], [1, "f", 1, 81, 7, 1], [1, "f", 1, 79, 7, 1], [1, "f", 1, 77, 7, 1], [1, "f", 1, 75, 7, 1], [1, "f", 1, 73, 7, 1], [1, "f", 1, 71, 7, 1], [1, "f", 1, 69, 7, 1], [1, "f", 1, 33, 7, 1], [1, "f", 1, 31, 7, 1], [1, "f", 1, 29, 7, 1], [1, "f", 1, 27, 7, 1], [1, "f", 1, 25, 7, 1], [1, "f", 1, 23, 7, 1], [1, "f", 1, 21, 7, 1], [1, "f", 1, 19, 7, 1], [1, "f", 1, 17, 7, 1], [1, "f", 1, 15, 7, 1], [1, "f", 1, 13, 7, 1], [1, "f", 1, 11, 7, 1], [1, "f", 1, 9, 7, 1], [1, "f", 1, 7, 7, 1], [1, "s", 0, 7, 8, 1], [1, "t", 4, 7, 174, 0], [1, "t", 5, 7, 175, 0], [1, "t", 4, 7, 176, 0], [1, "b", 2, 7, 177, 0], [1, "t", 3, 94, 301, 0], [1, "b", 3, 95, 301, 0], [1, "t", 4, 96, 301, 0], [1, "t", 1, 97, 301, 0], [1, "t", 2, 98, 301, 0], [1, "t", 4, 99, 301, 0], [1, "t", 2, 100, 301, 0], [1, "t", 4, 96, 304, 0], [1, "t", 2, 96, 302, 0], [1, "t", 2, 97, 304, 0], [1, "t", 2, 96, 303, 0], [1, "t", 5, 97, 303, 0], [1, "t", 5, 98, 304, 0], [1, "b", 2, 97, 302, 0], [1, "b", 2, 99, 304, 0], [1, "t", 1, 98, 303, 0], [1, "t", 4, 98, 302, 0], [1, "t", 4, 99, 303, 0], [1, "t", 4, 100, 304, 0], [1, "t", 5, 99, 302, 0], [1, "t", 5, 101, 303, 0], [1, "t", 2, 100, 303, 0], [1, "t", 0, 100, 302, 0], [1, "t", 0, 101, 304, 0], [1, "t", 4, 102, 304, 0], [1, "f", 0, 94, 7, 1], [1, "f", 1, 93, 7, 1], [1, "f", 1, 92, 7, 1], [1, "f", 0, 91, 7, 1], [1, "f", 1, 90, 7, 1], [1, "f", 1, 89, 7, 1], [1, "f", 0, 88, 7, 1], [1, "f", 1, 87, 7, 1], [1, "f", 1, 86, 7, 1], [1, "f", 1, 85, 7, 1], [1, "f", 0, 84, 7, 1], [1, "f", 1, 82, 7, 1], [1, "f", 0, 80, 7, 1], [1, "f", 1, 78, 7, 1], [1, "f", 0, 76, 7, 1], [1, "f", 1, 74, 7, 1], [1, "f", 0, 72, 7, 1], [1, "f", 0, 70, 7, 1], [1, "f", 1, 68, 7, 1], [1, "f", 1, 32, 7, 1], [1, "f", 0, 30, 7, 1], [1, "f", 1, 28, 7, 1], [1, "f", 0, 26, 7, 1], [1, "f", 1, 24, 7, 1], [1, "f", 0, 22, 7, 1], [1, "f", 1, 20, 7, 1], [1, "f", 0, 18, 7, 1], [1, "f", 1, 16, 7, 1], [1, "f", 0, 14, 7, 1], [1, "f", 1, 12, 7, 1], [1, "f", 0, 10, 7, 1], [1, "f", 1, 8, 7, 1], [1, "s", 1, 7, 9, 1], [1, "f", 0, 95, 152, 1], [1, "f", 1, 95, 151, 1], [1, "f", 0, 95, 11, 1], [1, "f", 1, 95, 12, 1], [1, "f", 1, 95, 14, 1], [1, "f", 1, 95, 19, 1], [1, "f", 0, 95, 15, 1], [1, "f", 0, 95, 20, 1], [1, "f", 1, 95, 21, 1], [1, "f", 1, 95, 26, 1], [1, "f", 1, 95, 37, 1], [1, "f", 0, 95, 44, 1], [1, "f", 1, 95, 50, 1], [1, "f", 1, 95, 52, 1], [1, "f", 0, 95, 53, 1], [1, "f", 1, 95, 54, 1], [1, "f", 1, 95, 62, 1], [1, "f", 0, 95, 55, 1], [1, "f", 1, 95, 64, 1], [1, "f", 0, 95, 58, 1], [1, "f", 0, 95, 61, 1], [1, "f", 0, 95, 68, 1], [1, "f", 0, 95, 72, 1], [1, "f", 0, 95, 78, 1], [1, "f", 1, 95, 115, 1], [1, "f", 1, 95, 117, 1], [1, "f", 1, 95, 128, 1], [1, "f", 0, 95, 85, 1], [1, "f", 0, 95, 91, 1], [1, "f", 0, 95, 95, 1], [1, "f", 0, 95, 114, 1], [1, "f", 2, 95, 113, 1], [1, "f", 1, 95, 119, 1], [1, "f", 0, 95, 120, 1], [1, "f", 1, 95, 121, 1], [1, "f", 0, 95, 127, 1], [1, "f", 1, 95, 130, 1], [1, "f", 0, 95, 131, 1], [1, "f", 1, 95, 132, 1], [1, "f", 1, 95, 136, 1], [1, "f", 0, 95, 137, 1], [1, "f", 0, 95, 143, 1], [1, "f", 0, 95, 147, 1], [1, "f", 1, 95, 138, 1], [1, "f", 1, 95, 144, 1], [1, "f", 1, 95, 10, 1], [1, "f", 0, 95, 8, 1], [1, "f", 1, 95, 9, 1], [1, "f", 0, 95, 13, 1], [1, "f", 1, 95, 16, 1], [1, "f", 1, 95, 17, 1], [1, "f", 0, 95, 18, 1], [1, "f", 1, 95, 45, 1], [1, "f", 0, 95, 51, 1], [1, "f", 1, 95, 56, 1], [1, "f", 1, 95, 57, 1], [1, "f", 1, 95, 59, 1], [1, "f", 1, 95, 60, 1], [1, "f", 1, 95, 63, 1], [1, "f", 0, 95, 65, 1], [1, "f", 1, 95, 66, 1], [1, "f", 1, 95, 67, 1], [1, "f", 1, 95, 69, 1], [1, "f", 1, 95, 70, 1], [1, "f", 0, 95, 71, 1], [1, "f", 1, 95, 73, 1], [1, "f", 1, 95, 74, 1], [1, "f", 0, 95, 75, 1], [1, "f", 1, 95, 76, 1], [1, "f", 1, 95, 77, 1], [1, "f", 1, 95, 79, 1], [1, "f", 1, 95, 80, 1], [1, "f", 0, 95, 81, 1], [1, "f", 1, 95, 82, 1], [1, "f", 0, 95, 83, 1], [1, "f", 1, 95, 84, 1], [1, "f", 1, 95, 86, 1], [1, "f", 1, 95, 88, 1], [1, "f", 0, 95, 87, 1], [1, "f", 1, 95, 89, 1], [1, "f", 1, 95, 90, 1], [1, "f", 1, 95, 92, 1], [1, "f", 1, 95, 93, 1], [1, "f", 1, 95, 94, 1], [1, "f", 1, 95, 96, 1], [1, "f", 1, 95, 97, 1], [1, "f", 0, 95, 98, 1], [1, "f", 1, 95, 99, 1], [1, "f", 1, 95, 100, 1], [1, "f", 0, 95, 101, 1], [1, "f", 1, 95, 102, 1], [1, "f", 0, 95, 103, 1], [1, "f", 1, 95, 104, 1], [1, "f", 1, 95, 105, 1], [1, "f", 0, 95, 106, 1], [1, "f", 1, 95, 107, 1], [1, "f", 1, 95, 108, 1], [1, "f", 1, 95, 109, 1], [1, "f", 0, 95, 110, 1], [1, "f", 1, 95, 111, 1], [1, "f", 0, 95, 112, 1], [1, "f", 1, 95, 116, 1], [1, "f", 0, 95, 118, 1], [1, "f", 0, 95, 122, 1], [1, "f", 1, 95, 123, 1], [1, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, 1], [1, "f", 1, 95, 126, 1], [1, "f", 1, 95, 129, 1], [1, "f", 1, 95, 133, 1], [1, "f", 0, 95, 134, 1], [1, "f", 1, 95, 135, 1], [1, "f", 1, 95, 139, 1], [1, "f", 0, 95, 140, 1], [1, "f", 1, 95, 141, 1], [1, "f", 1, 95, 142, 1], [1, "f", 1, 95, 146, 1], [1, "f", 0, 95, 145, 1], [1, "f", 1, 95, 148, 1], [1, "f", 1, 95, 149, 1], [1, "f", 1, 95, 150, 1], [1, "f", 1, 95, 153, 1], [1, "cs", 0, 64, 9, 1], [1, "cs", 1, 64, 10, 1], [1, "cs", 2, 64, 16, 1], [1, "cs", 2, 64, 19, 1], [1, "cs", 0, 64, 20, 1], [1, "cs", 1, 64, 21, 1], [1, "cs", 2, 64, 22, 1], [1, "cs", 0, 64, 23, 1], [1, "cs", 2, 64, 24, 1], [1, "cs", 1, 64, 29, 1], [1, "cs", 2, 64, 30, 1], [1, "cs", 3, 64, 31, 1], [1, "cs", 0, 64, 32, 1], [1, "cs", 1, 64, 33, 1], [1, "cs", 2, 64, 34, 1], [1, "cs", 0, 64, 35, 1], [1, "cs", 2, 64, 8, 1], [1, "cs", 2, 65, 8, 1], [1, "cs", 1, 65, 9, 1], [1, "cs", 2, 65, 10, 1], [1, "cs", 3, 65, 11, 1], [1, "cs", 1, 65, 16, 1], [1, "cs", 0, 64, 17, 1], [1, "cs", 3, 65, 17, 1], [1, "cs", 2, 64, 18, 1], [1, "cs", 2, 65, 18, 1], [1, "cs", 0, 65, 19, 1], [1, "cs", 1, 65, 20, 1], [1, "cs", 3, 65, 21, 1], [1, "cs", 2, 65, 22, 1], [1, "cs", 3, 65, 23, 1], [1, "cs", 0, 65, 24, 1], [1, "cs", 2, 65, 29, 1], [1, "cs", 3, 65, 30, 1], [1, "cs", 0, 65, 31, 1], [1, "cs", 1, 65, 32, 1], [1, "cs", 2, 65, 33, 1], [1, "cs", 3, 65, 34, 1], [1, "cs", 2, 63, 9, 1], [1, "cs", 0, 62, 9, 1], [1, "cs", 2, 61, 9, 1], [1, "cs", 0, 60, 9, 1], [1, "cs", 2, 59, 9, 1], [1, "cs", 2, 58, 9, 1], [1, "cs", 0, 57, 9, 1], [1, "cs", 2, 56, 9, 1], [1, "cs", 2, 55, 9, 1], [1, "cs", 2, 54, 9, 1], [1, "cs", 0, 53, 9, 1], [1, "cs", 0, 51, 9, 1], [1, "cs", 2, 52, 9, 1], [1, "cs", 2, 50, 9, 1], [1, "cs", 2, 48, 9, 1], [1, "cs", 2, 49, 9, 1], [1, "cs", 0, 47, 9, 1], [1, "cs", 0, 45, 9, 1], [1, "cs", 0, 43, 9, 1], [1, "cs", 2, 46, 9, 1], [1, "cs", 2, 44, 9, 1], [1, "cs", 2, 42, 9, 1], [1, "cs", 2, 41, 9, 1], [1, "cs", 0, 40, 9, 1], [1, "cs", 2, 39, 9, 1], [1, "cs", 2, 38, 9, 1], [1, "cs", 0, 37, 9, 1], [1, "cs", 0, 63, 8, 1], [1, "cs", 2, 65, 7, 1], [1, "cs", 3, 64, 7, 1], [1, "cs", 2, 62, 8, 1], [1, "cs", 3, 61, 8, 1], [1, "cs", 1, 62, 7, 1], [1, "cs", 2, 63, 7, 1], [1, "cs", 0, 64, 6, 1], [1, "cs", 3, 65, 6, 1], [1, "cs", 2, 63, 6, 1], [1, "cs", 2, 62, 6, 1], [1, "cs", 2, 61, 6, 1], [1, "cs", 2, 60, 6, 1], [1, "cs", 2, 59, 6, 1], [1, "cs", 2, 61, 7, 1], [1, "cs", 0, 60, 7, 1], [1, "cs", 2, 60, 8, 1], [1, "cs", 2, 59, 7, 1], [1, "cs", 2, 59, 8, 1], [1, "cs", 1, 58, 8, 1], [1, "cs", 1, 57, 6, 1], [1, "cs", 1, 55, 7, 1], [1, "cs", 0, 56, 6, 1], [1, "cs", 2, 58, 6, 1], [1, "cs", 2, 58, 7, 1], [1, "cs", 2, 57, 7, 1], [1, "cs", 2, 56, 7, 1], [1, "cs", 2, 55, 6, 1], [1, "cs", 2, 57, 8, 1], [1, "cs", 2, 56, 8, 1], [1, "cs", 2, 55, 8, 1], [1, "cs", 0, 54, 8, 1], [1, "cs", 0, 50, 7, 1], [1, "cs", 0, 53, 6, 1], [1, "cs", 2, 54, 6, 1], [1, "cs", 2, 54, 7, 1], [1, "cs", 2, 53, 7, 1], [1, "cs", 2, 52, 7, 1], [1, "cs", 2, 52, 6, 1], [1, "cs", 1, 52, 8, 1], [1, "cs", 2, 53, 8, 1], [1, "cs", 2, 51, 8, 1], [1, "cs", 2, 51, 7, 1], [1, "cs", 2, 51, 6, 1], [1, "cs", 2, 50, 6, 1], [1, "cs", 2, 50, 8, 1], [1, "cs", 2, 49, 8, 1], [1, "cs", 2, 49, 7, 1], [1, "cs", 2, 49, 6, 1], [1, "cs", 0, 46, 7, 1], [1, "cs", 1, 48, 8, 1], [1, "cs", 1, 44, 7, 1], [1, "cs", 1, 41, 8, 1], [1, "cs", 2, 48, 7, 1], [1, "cs", 2, 48, 6, 1], [1, "cs", 2, 47, 6, 1], [1, "cs", 2, 47, 7, 1], [1, "cs", 2, 47, 8, 1], [1, "cs", 2, 46, 8, 1], [1, "cs", 2, 45, 8, 1], [1, "cs", 2, 45, 7, 1], [1, "cs", 2, 45, 6, 1], [1, "cs", 2, 46, 6, 1], [1, "cs", 2, 44, 6, 1], [1, "cs", 2, 44, 8, 1], [1, "cs", 2, 43, 8, 1], [1, "cs", 2, 43, 7, 1], [1, "cs", 2, 43, 6, 1], [1, "cs", 2, 42, 6, 1], [1, "cs", 2, 42, 7, 1], [1, "cs", 2, 42, 8, 1], [1, "cs", 2, 41, 7, 1], [1, "cs", 2, 41, 6, 1], [1, "cs", 2, 40, 6, 1], [1, "cs", 2, 40, 7, 1], [1, "cs", 2, 40, 8, 1], [1, "cs", 2, 39, 8, 1], [1, "cs", 0, 39, 7, 1], [1, "cs", 1, 38, 8, 1], [1, "cs", 2, 39, 6, 1], [1, "cs", 2, 38, 6, 1], [1, "cs", 2, 37, 6, 1], [1, "cs", 2, 38, 7, 1], [1, "cs", 2, 37, 7, 1], [1, "cs", 2, 37, 8, 1], [1, "cs", 2, 37, 10, 1], [1, "cs", 2, 38, 10, 1], [1, "cs", 0, 38, 11, 1], [1, "cs", 0, 38, 17, 1], [1, "cs", 1, 37, 18, 1], [1, "cs", 0, 38, 19, 1], [1, "cs", 2, 37, 11, 1], [1, "cs", 2, 37, 16, 1], [1, "cs", 2, 37, 17, 1], [1, "cs", 2, 38, 18, 1], [1, "cs", 2, 37, 19, 1], [1, "cs", 3, 38, 16, 1], [1, "cs", 0, 37, 21, 1], [1, "cs", 0, 38, 22, 1], [1, "cs", 0, 38, 24, 1], [1, "cs", 2, 37, 20, 1], [1, "cs", 2, 38, 20, 1], [1, "cs", 2, 38, 21, 1], [1, "cs", 1, 37, 23, 1], [1, "cs", 3, 37, 22, 1], [1, "cs", 3, 38, 23, 1], [1, "cs", 2, 37, 24, 1], [1, "cs", 0, 38, 30, 1], [1, "cs", 0, 38, 32, 1], [1, "cs", 0, 37, 31, 1], [1, "cs", 1, 38, 34, 1], [1, "cs", 1, 37, 29, 1], [1, "cs", 2, 38, 29, 1], [1, "cs", 2, 37, 30, 1], [1, "cs", 2, 38, 31, 1], [1, "cs", 2, 37, 32, 1], [1, "cs", 3, 38, 33, 1], [1, "cs", 3, 38, 35, 1], [1, "cs", 2, 37, 33, 1], [1, "cs", 2, 36, 8, 1], [1, "cs", 0, 36, 11, 1], [1, "cs", 0, 35, 9, 1], [1, "cs", 2, 36, 9, 1], [1, "cs", 2, 36, 10, 1], [1, "cs", 2, 35, 10, 1], [1, "cs", 1, 33, 8, 1], [1, "cs", 3, 34, 9, 1], [1, "cs", 3, 35, 8, 1], [1, "cs", 2, 34, 8, 1], [1, "cs", 0, 36, 7, 1], [1, "cs", 1, 34, 7, 1], [1, "cs", 2, 35, 7, 1], [1, "cs", 2, 35, 6, 1], [1, "cs", 2, 36, 6, 1], [1, "cs", 2, 68, 9, 1], [1, "cs", 2, 66, 10, 1], [1, "cs", 3, 66, 9, 1], [1, "cs", 0, 67, 9, 1], [1, "cs", 0, 66, 8, 1], [1, "cs", 2, 67, 8, 1], [1, "cs", 1, 68, 8, 1], [1, "cs", 1, 66, 11, 1], [1, "cs", 2, 67, 10, 1], [1, "cs", 0, 66, 6, 1], [1, "cs", 2, 66, 7, 1], [1, "cs", 2, 67, 7, 1], [1, "cs", 2, 69, 8, 1], [1, "cs", 2, 63, 32, 1], [1, "cs", 2, 62, 34, 1], [1, "cs", 2, 60, 35, 1], [1, "cs", 3, 59, 35, 1], [1, "cs", 0, 61, 35, 1], [1, "cs", 0, 63, 34, 1], [1, "cs", 2, 63, 33, 1], [1, "cs", 2, 63, 35, 1], [1, "cs", 2, 62, 35, 1], [1, "cs", 2, 58, 36, 1], [1, "cs", 1, 59, 36, 1], [1, "cs", 1, 62, 36, 1], [1, "cs", 2, 60, 36, 1], [1, "cs", 2, 61, 34, 1], [1, "cs", 3, 62, 33, 1], [1, "cs", 3, 63, 36, 1], [1, "cs", 3, 61, 36, 1], [1, "cs", 0, 42, 36, 1], [1, "cs", 1, 39, 36, 1], [1, "cs", 2, 41, 36, 1], [1, "cs", 3, 39, 35, 1], [1, "cs", 3, 40, 36, 1], [1, "cs", 3, 43, 36, 1], [1, "cs", 1, 40, 35, 1], [1, "cs", 2, 41, 35, 1], [1, "cs", 2, 40, 34, 1], [1, "cs", 2, 39, 34, 1], [1, "cs", 2, 39, 33, 1], [1, "cs", 2, 39, 32, 1], [1, "cs", 0, 40, 33, 1], [1, "cs", 2, 41, 34, 1], [1, "cs", 1, 44, 36, 1], [1, "cs", 3, 43, 35, 1], [1, "cs", 2, 42, 35, 1], [1, "cs", 0, 37, 34, 1], [1, "cs", 3, 59, 30, 1], [1, "cs", 0, 60, 29, 1], [1, "cs", 2, 60, 28, 1], [1, "cs", 3, 60, 27, 1], [1, "cs", 0, 60, 26, 1], [1, "cs", 2, 54, 25, 1], [1, "cs", 2, 48, 25, 1], [1, "cs", 2, 42, 26, 1], [1, "cs", 0, 55, 25, 1], [1, "cs", 2, 59, 26, 1], [1, "cs", 0, 43, 26, 1], [1, "cs", 1, 42, 27, 1], [1, "cs", 2, 42, 28, 1], [1, "cs", 2, 43, 30, 1], [1, "cs", 0, 42, 29, 1], [1, "cs", 0, 54, 24, 1], [1, "cs", 0, 48, 24, 1], [1, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, 1], [1, "cs", 2, 63, 22, 1], [1, "cs", 2, 63, 21, 1], [1, "cs", 2, 39, 21, 1], [1, "cs", 3, 57, 18, 1], [1, "cs", 2, 56, 18, 1], [1, "cs", 3, 51, 21, 1], [1, "cs", 0, 51, 20, 1], [1, "cs", 2, 51, 19, 1], [1, "cs", 3, 51, 18, 1], [1, "cs", 2, 63, 16, 1], [1, "cs", 2, 63, 10, 1], [1, "cs", 2, 56, 13, 1], [1, "cs", 3, 57, 13, 1], [1, "cs", 1, 45, 18, 1], [1, "cs", 2, 47, 18, 1], [1, "cs", 2, 46, 18, 1], [1, "cs", 0, 46, 13, 1], [1, "cs", 2, 45, 13, 1], [1, "cs", 2, 39, 10, 1], [1, "cs", 2, 39, 16, 1], [1, "cs", 2, 47, 17, 1], [1, "a", 0, 51, 15, 1], [1, "a", 1, 53, 14, 1], [1, "a", 1, 49, 14, 1], [1, "de", 8, 55, 15, 0], [1, "de", 9, 48, 28, 0], [1, "de", 10, 58, 26, 0], [1, "de", 11, 59, 29, 0], [1, "de", 11, 55, 34, 0], [1, "de", 10, 48, 33, 0], [1, "de", 9, 41, 32, 0], [1, "de", 9, 56, 24, 0], [1, "de", 9, 62, 16, 0], [1, "de", 9, 45, 11, 0], [1, "de", 9, 44, 17, 0], [1, "de", 10, 44, 13, 0], [1, "de", 10, 58, 13, 0], [1, "de", 10, 63, 31, 0], [1, "de", 8, 60, 30, 0], [1, "de", 8, 43, 26, 0], [1, "de", 10, 43, 29, 0], [1, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, 0], [1, "de", 9, 53, 19, 0], [1, "de", 11, 49, 19, 0], [1, "de", 10, 39, 26, 0], [1, "de", 9, 46, 24, 0], [1, "de", 9, 62, 10, 0], [1, "de", 8, 40, 14, 0], [1, "de", 32, 55, 35, 0], [1, "de", 32, 60, 33, 0], [1, "de", 32, 63, 28, 0], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, 17, 0], [1, "de", 32, 63, 13, 0], [1, "de", 32, 59, 10, 0], [1, "de", 32, 56, 12, 0], [1, "de", 32, 52, 17, 0], [1, "de", 32, 51, 14, 0], [1, "de", 32, 39, 12, 0], [1, "de", 32, 39, 18, 0], [1, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, 0], [1, "de", 32, 50, 29, 0], [1, "de", 32, 43, 34, 0], [1, "de", 32, 47, 34, 0], [1, "de", 31, 54, 33, 0], [1, "de", 31, 59, 24, 0], [1, "de", 31, 63, 19, 0], [1, "de", 31, 47, 15, 0], [1, "de", 31, 43, 17, 0], [1, "de", 31, 39, 27, 0], [1, "de", 31, 48, 27, 0], [1, "de", 31, 57, 27, 0], [1, "de", 32, 44, 27, 0], [1, "d", 0, 12, 13, 1], [1, "d", 0, 89, 13, 1], [1, "d", 1, 91, 21, 1], [1, "d", 1, 10, 22, 1], [1, "f", 2, 89, 18, 1], [1, "f", 0, 88, 19, 1], [1, "g", 1, 85, 22, 1], [1, "s", 1, 90, 29, 1], [1, "s", 1, 92, 15, 1], [1, "s", 0, 91, 31, 1], [1, "s", 2, 90, 38, 1], [1, "s", 0, 91, 42, 1], [1, "s", 0, 90, 49, 1], [1, "f", 1, 86, 43, 1], [1, "f", 0, 81, 45, 1], [1, "f", 2, 66, 44, 1], [1, "f", 2, 55, 49, 1], [1, "f", 1, 54, 50, 1], [1, "f", 2, 43, 45, 1], [1, "f", 2, 31, 48, 1], [1, "f", 1, 27, 39, 1], [1, "f", 1, 80, 46, 1], [1, "f", 1, 69, 48, 1], [1, "g", 0, 80, 40, 1], [1, "g", 2, 81, 40, 1], [1, "s", 2, 77, 39, 1], [1, "s", 0, 68, 43, 1], [1, "s", 2, 57, 41, 1], [1, "s", 1, 56, 42, 1], [1, "s", 1, 40, 41, 1], [1, "s", 2, 48, 48, 1], [1, "f", 2, 17, 12, 1], [1, "f", 0, 13, 31, 1], [1, "f", 1, 14, 32, 1], [1, "s", 0, 15, 27, 1], [1, "s", 0, 13, 39, 1], [1, "f", 2, 11, 17, 1], [1, "f", 1, 12, 18, 1], [1, "g", 2, 12, 25, 1], [1, "f", 0, 16, 45, 1], [1, "f", 1, 17, 46, 1], [1, "s", 1, 74, 48, 1], [1, "s", 1, 20, 47, 1], [1, "g", 0, 58, 59, 1], [1, "g", 0, 46, 72, 1], [1, "g", 0, 69, 79, 1], [1, "g", 0, 72, 74, 1], [1, "g", 0, 26, 88, 1], [1, "g", 0, 20, 74, 1], [1, "g", 0, 28, 67, 1], [1, "g", 0, 49, 86, 1], [1, "g", 0, 77, 90, 1], [1, "g", 0, 87, 72, 1], [1, "g", 0, 14, 85, 1], [1, "g", 1, 85, 97, 1], [1, "g", 1, 68, 104, 1], [1, "g", 1, 63, 91, 1], [1, "g", 1, 39, 90, 1], [1, "g", 1, 34, 99, 1], [1, "g", 1, 17, 103, 1], [1, "g", 2, 77, 60, 1], [1, "g", 2, 19, 56, 1], [1, "g", 2, 39, 60, 1], [1, "g", 2, 87, 57, 1], [1, "f", 0, 9, 62, 1], [1, "f", 0, 12, 81, 1], [1, "f", 0, 26, 59, 1], [1, "f", 0, 35, 53, 1], [1, "f", 0, 44, 58, 1], [1, "f", 0, 88, 62, 1], [1, "f", 0, 91, 82, 1], [1, "f", 0, 84, 85, 1], [1, "f", 0, 79, 69, 1], [1, "f", 0, 64, 71, 1], [1, "f", 0, 62, 83, 1], [1, "f", 0, 34, 81, 1], [1, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, 1], [1, "f", 1, 81, 70, 1], [1, "f", 1, 91, 72, 1], [1, "f", 1, 8, 91, 1], [1, "f", 1, 14, 81, 1], [1, "f", 1, 29, 79, 1], [1, "f", 1, 13, 65, 1], [1, "f", 1, 46, 97, 1], [1, "f", 1, 43, 73, 1], [1, "f", 1, 60, 69, 1], [1, "f", 1, 70, 96, 1], [1, "f", 1, 58, 84, 1], [1, "s", 1, 56, 76, 1], [1, "s", 1, 85, 74, 1], [1, "s", 0, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", 0, 60, 61, 1], [1, "s", 0, 20, 66, 1], [1, "s", 0, 47, 83, 1], [1, "s", 0, 29, 86, 1], [1, "s", 0, 78, 92, 1], [1, "s", 0, 62, 102, 1], [1, "s", 0, 18, 95, 1], [1, "s", 2, 64, 101, 1], [1, "s", 2, 78, 84, 1], [1, "s", 2, 49, 83, 1], [1, "s", 2, 15, 76, 1], [1, "s", 2, 21, 84, 1], [1, "f", 1, 26, 94, 1], [1, "f", 2, 23, 96, 1], [1, "f", 2, 25, 72, 1], [1, "f", 2, 85, 77, 1], [1, "f", 2, 79, 95, 1], [1, "f", 2, 51, 65, 1], [1, "f", 2, 69, 60, 1], [1, "f", 1, 25, 105, 1], [1, "s", 1, 18, 68, 1], [1, "s", 0, 55, 76, 1], [1, "s", 0, 74, 59, 1], [1, "f", 1, 46, 142, 1], [1, "f", 1, 19, 140, 1], [1, "f", 1, 77, 137, 1], [1, "f", 0, 75, 137, 1], [1, "f", 0, 55, 138, 1], [1, "f", 0, 33, 127, 1], [1, "f", 0, 76, 121, 1], [1, "f", 0, 55, 121, 1], [1, "f", 0, 13, 123, 1], [1, "f", 0, 18, 141, 1], [1, "f", 0, 40, 137, 1], [1, "f", 2, 76, 142, 1], [1, "f", 2, 57, 140, 1], [1, "f", 2, 39, 138, 1], [1, "f", 2, 16, 143, 1], [1, "f", 2, 29, 131, 1], [1, "f", 0, 70, 150, 1], [1, "f", 0, 28, 146, 1], [1, "f", 0, 12, 132, 1], [1, "f", 0, 90, 129, 1], [1, "f", 1, 87, 131, 1], [1, "f", 0, 91, 143, 1], [1, "f", 2, 87, 145, 1], [1, "f", 1, 89, 141, 1], [1, "f", 1, 63, 130, 1], [1, "f", 1, 75, 122, 1], [1, "f", 1, 52, 124, 1], [1, "f", 1, 34, 127, 1], [1, "f", 1, 14, 123, 1], [1, "f", 1, 24, 122, 1], [1, "f", 0, 83, 108, 1], [1, "f", 0, 89, 118, 1], [1, "f", 0, 56, 107, 1], [1, "f", 0, 38, 113, 1], [1, "f", 0, 16, 110, 1], [1, "f", 1, 80, 105, 1], [1, "f", 1, 82, 109, 1], [1, "f", 1, 87, 118, 1], [1, "f", 1, 59, 110, 1], [1, "f", 1, 29, 111, 1], [1, "f", 2, 28, 112, 1], [1, "f", 2, 70, 112, 1], [1, "f", 2, 42, 111, 1], [1, "s", 0, 68, 157, 1], [1, "s", 0, 81, 158, 1], [1, "s", 0, 25, 172, 1], [1, "s", 0, 22, 161, 1], [1, "s", 0, 35, 152, 1], [1, "s", 0, 66, 144, 1], [1, "s", 0, 87, 145, 1], [1, "s", 0, 86, 145, 1], [1, "s", 0, 84, 135, 1], [1, "s", 0, 69, 133, 1], [1, "s", 0, 84, 122, 1], [1, "s", 0, 68, 121, 1], [1, "s", 0, 48, 124, 1], [1, "s", 0, 26, 129, 1], [1, "s", 0, 9, 127, 1], [1, "s", 0, 11, 144, 1], [1, "s", 0, 9, 109, 1], [1, "s", 0, 35, 101, 1], [1, "s", 0, 47, 109, 1], [1, "s", 0, 58, 111, 1], [1, "s", 0, 84, 110, 1], [1, "s", 0, 28, 114, 1], [1, "s", 1, 30, 116, 1], [1, "s", 1, 46, 112, 1], [1, "s", 1, 81, 111, 1], [1, "s", 1, 70, 123, 1], [1, "s", 1, 49, 127, 1], [1, "s", 1, 66, 134, 1], [1, "s", 1, 67, 144, 1], [1, "s", 1, 38, 152, 1], [1, "s", 1, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, 1], [1, "s", 1, 12, 125, 1], [1, "s", 1, 65, 158, 1], [1, "s", 1, 83, 167, 1], [1, "s", 1, 65, 167, 1], [1, "s", 1, 47, 164, 1], [1, "s", 1, 56, 168, 1], [1, "s", 2, 54, 169, 1], [1, "s", 2, 88, 170, 1], [1, "s", 2, 91, 162, 1], [1, "s", 2, 79, 149, 1], [1, "s", 2, 75, 144, 1], [1, "s", 2, 57, 150, 1], [1, "s", 2, 47, 143, 1], [1, "s", 2, 31, 145, 1], [1, "s", 2, 36, 138, 1], [1, "s", 2, 10, 163, 1], [1, "s", 2, 22, 142, 1], [1, "g", 2, 78, 132, 1], [1, "g", 1, 48, 135, 1], [1, "g", 2, 16, 136, 1], [1, "g", 0, 62, 92, 1], [1, "g", 2, 70, 80, 1], [1, "g", 2, 15, 86, 1], [1, "g", 2, 47, 75, 1], [1, "g", 2, 36, 89, 1], [1, "g", 2, 80, 90, 1], [1, "f", 1, 39, 118, 1], [1, "d", 2, 84, 54, 1], [1, "d", 2, 16, 54, 1], [1, "de", 7, 13, 13, 0], [1, "de", 5, 16, 28, 0], [1, "de", 5, 9, 25, 0], [1, "de", 5, 34, 41, 0], [1, "de", 4, 28, 40, 0], [1, "de", 6, 31, 47, 0], [1, "de", 6, 12, 39, 0], [1, "de", 4, 16, 47, 0], [1, "de", 4, 7, 46, 0], [1, "de", 6, 7, 33, 0], [1, "de", 6, 40, 42, 0], [1, "de", 7, 20, 48, 0], [1, "de", 7, 29, 59, 0], [1, "de", 6, 27, 58, 0], [1, "de", 6, 15, 54, 0], [1, "de", 5, 12, 66, 0], [1, "de", 5, 37, 53, 0], [1, "de", 4, 10, 63, 0], [1, "de", 7, 49, 48, 0], [1, "de", 7, 37, 63, 0], [1, "de", 6, 33, 68, 0], [1, "de", 6, 56, 52, 0], [1, "de", 5, 59, 58, 0], [1, "de", 6, 48, 58, 0], [1, "de", 4, 53, 63, 0], [1, "de", 4, 67, 44, 0], [1, "de", 5, 70, 49, 0], [1, "de", 5, 82, 55, 0], [1, "de", 5, 79, 41, 0], [1, "de", 5, 91, 29, 0], [1, "de", 7, 91, 43, 0], [1, "de", 6, 85, 44, 0], [1, "de", 6, 74, 60, 0], [1, "de", 6, 90, 8, 0], [1, "de", 5, 91, 15, 0], [1, "de", 4, 87, 20, 0], [1, "de", 7, 93, 11, 0], [1, "de", 6, 91, 21, 0], [1, "de", 6, 85, 35, 0], [1, "de", 5, 93, 58, 0], [1, "de", 5, 87, 63, 0], [1, "de", 7, 77, 62, 0], [1, "de", 6, 68, 61, 0], [1, "de", 5, 90, 73, 0], [1, "de", 4, 87, 71, 0], [1, "de", 7, 80, 71, 0], [1, "de", 7, 83, 77, 0], [1, "de", 7, 89, 83, 0], [1, "de", 4, 71, 80, 0], [1, "de", 4, 71, 70, 0], [1, "de", 5, 63, 72, 0], [1, "de", 4, 54, 75, 0], [1, "de", 5, 44, 83, 0], [1, "de", 5, 42, 74, 0], [1, "de", 5, 15, 81, 0], [1, "de", 4, 29, 80, 0], [1, "de", 4, 37, 90, 0], [1, "de", 4, 7, 75, 0], [1, "de", 6, 22, 74, 0], [1, "de", 6, 43, 95, 0], [1, "de", 6, 57, 85, 0], [1, "de", 6, 19, 94, 0], [1, "de", 6, 9, 92, 0], [1, "de", 5, 26, 89, 0], [1, "de", 5, 31, 112, 0], [1, "de", 5, 54, 108, 0], [1, "de", 5, 55, 95, 0], [1, "de", 5, 35, 104, 0], [1, "de", 5, 13, 110, 0], [1, "de", 7, 27, 107, 0], [1, "de", 7, 47, 99, 0], [1, "de", 7, 11, 104, 0], [1, "de", 7, 9, 111, 0], [1, "de", 7, 40, 114, 0], [1, "de", 7, 28, 117, 0], [1, "de", 7, 47, 113, 0], [1, "de", 7, 63, 104, 0], [1, "de", 4, 64, 92, 0], [1, "de", 6, 86, 97, 0], [1, "de", 5, 76, 91, 0], [1, "de", 5, 85, 86, 0], [1, "de", 6, 78, 83, 0], [1, "de", 6, 71, 97, 0], [1, "de", 4, 69, 105, 0], [1, "de", 4, 79, 104, 0], [1, "de", 4, 86, 109, 0], [1, "de", 4, 86, 118, 0], [1, "de", 5, 70, 113, 0], [1, "de", 6, 69, 121, 0], [1, "de", 6, 76, 122, 0], [1, "de", 7, 87, 130, 0], [1, "de", 4, 84, 123, 0], [1, "de", 4, 57, 121, 0], [1, "de", 5, 53, 125, 0], [1, "de", 5, 62, 131, 0], [1, "de", 6, 67, 143, 0], [1, "de", 5, 77, 143, 0], [1, "de", 5, 85, 136, 0], [1, "de", 6, 87, 147, 0], [1, "de", 6, 92, 140, 0], [1, "de", 4, 93, 127, 0], [1, "de", 5, 93, 106, 0], [1, "de", 5, 45, 144, 0], [1, "de", 4, 41, 139, 0], [1, "de", 4, 54, 138, 0], [1, "de", 6, 29, 145, 0], [1, "de", 6, 29, 132, 0], [1, "de", 6, 35, 127, 0], [1, "de", 6, 64, 142, 0], [1, "de", 5, 23, 131, 0], [1, "de", 5, 9, 134, 0], [1, "de", 6, 11, 121, 0], [1, "de", 4, 26, 121, 0], [1, "de", 35, 58, 150, 0], [1, "de", 33, 48, 156, 0], [1, "de", 33, 25, 158, 0], [1, "de", 33, 36, 154, 0], [1, "de", 34, 9, 154, 0], [1, "de", 34, 13, 148, 0], [1, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [1, "de", 34, 47, 144, 0], [1, "de", 34, 68, 142, 0], [1, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, 0], [1, "de", 36, 90, 141, 0], [1, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, 0], [1, "de", 33, 82, 122, 0], [1, "de", 35, 56, 122, 0], [1, "de", 35, 40, 119, 0], [1, "de", 35, 17, 112, 0], [1, "de", 35, 37, 102, 0], [1, "de", 33, 18, 97, 0], [1, "de", 34, 10, 83, 0], [1, "de", 33, 19, 73, 0], [1, "de", 33, 10, 60, 0], [1, "de", 35, 24, 60, 0], [1, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, 8, 32, 0], [1, "de", 33, 9, 24, 0], [1, "de", 35, 35, 27, 0], [1, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, 0], [1, "de", 35, 53, 39, 0], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, 0], [1, "de", 33, 68, 112, 0], [1, "de", 33, 49, 109, 0], [1, "de", 33, 46, 95, 0], [1, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, 0], [1, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, 0], [1, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, 0], [1, "de", 35, 93, 56, 0], [1, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, 0], [1, "de", 34, 92, 9, 0], [1, "de", 35, 75, 39, 0], [1, "de", 35, 67, 42, 0], [1, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, 0], [1, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, 0], [1, "de", 33, 46, 85, 0], [1, "de", 33, 64, 84, 0], [1, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, 0], [1, "de", 33, 31, 69, 0], [1, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [1, "de", 36, 29, 34, 0], [1, "de", 35, 20, 55, 0], [1, "de", 35, 14, 52, 0], [1, "s", 2, 12, 171, 1], [1, "r", 20, 188, 0], [1, "r", 21, 188, 0], [1, "r", 22, 188, 0], [1, "r", 23, 188, 0], [1, "r", 24, 188, 0], [1, "r", 25, 189, 0], [1, "r", 24, 189, 0], [1, "r", 23, 189, 0], [1, "r", 22, 189, 0], [1, "r", 21, 189, 0], [1, "r", 20, 189, 0], [1, "r", 19, 189, 0], [1, "r", 19, 190, 0], [1, "r", 19, 191, 0], [1, "r", 20, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [1, "r", 24, 191, 0], [1, "r", 23, 191, 0], [1, "r", 25, 191, 0], [1, "r", 25, 190, 0], [1, "r", 24, 190, 0], [1, "r", 23, 190, 0], [1, "r", 22, 190, 0], [1, "r", 21, 190, 0], [1, "r", 20, 190, 0], [1, "r", 26, 190, 0], [1, "r", 26, 191, 0], [1, "r", 24, 193, 0], [1, "r", 23, 193, 0], [1, "r", 22, 193, 0], [1, "r", 20, 192, 0], [1, "r", 21, 192, 0], [1, "r", 22, 192, 0], [1, "r", 23, 192, 0], [1, "r", 24, 192, 0], [1, "r", 25, 192, 0], [1, "r", 53, 199, 0], [1, "r", 52, 200, 0], [1, "r", 54, 199, 0], [1, "r", 55, 199, 0], [1, "r", 55, 200, 0], [1, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [1, "r", 56, 200, 0], [1, "r", 55, 201, 0], [1, "r", 54, 201, 0], [1, "r", 55, 202, 0], [1, "r", 54, 203, 0], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [1, "r", 53, 202, 0], [1, "r", 52, 202, 0], [1, "r", 53, 201, 0], [1, "r", 52, 201, 0], [1, "r", 51, 201, 0], [1, "r", 51, 202, 0], [1, "r", 50, 202, 0], [1, "r", 50, 201, 0], [1, "r", 56, 201, 0], [1, "r", 53, 203, 0], [1, "r", 52, 203, 0], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [1, "r", 53, 204, 0], [1, "r", 52, 204, 0], [1, "r", 55, 204, 0], [1, "r", 56, 203, 0], [1, "r", 56, 244, 0], [1, "r", 54, 246, 0], [1, "r", 50, 248, 0], [1, "r", 48, 248, 0], [1, "r", 43, 248, 0], [1, "r", 45, 238, 0], [1, "r", 44, 238, 0], [1, "r", 43, 238, 0], [1, "r", 46, 238, 0], [1, "r", 47, 238, 0], [1, "r", 48, 238, 0], [1, "r", 49, 238, 0], [1, "r", 50, 238, 0], [1, "r", 51, 238, 0], [1, "r", 52, 238, 0], [1, "r", 53, 238, 0], [1, "r", 54, 239, 0], [1, "r", 53, 240, 0], [1, "r", 53, 239, 0], [1, "r", 52, 239, 0], [1, "r", 51, 239, 0], [1, "r", 50, 239, 0], [1, "r", 49, 239, 0], [1, "r", 48, 239, 0], [1, "r", 47, 239, 0], [1, "r", 46, 239, 0], [1, "r", 45, 239, 0], [1, "r", 44, 239, 0], [1, "r", 43, 239, 0], [1, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [1, "r", 43, 240, 0], [1, "r", 44, 240, 0], [1, "r", 45, 240, 0], [1, "r", 46, 240, 0], [1, "r", 47, 240, 0], [1, "r", 48, 240, 0], [1, "r", 49, 240, 0], [1, "r", 50, 240, 0], [1, "r", 51, 240, 0], [1, "r", 52, 240, 0], [1, "r", 54, 240, 0], [1, "r", 55, 240, 0], [1, "r", 56, 241, 0], [1, "r", 55, 241, 0], [1, "r", 54, 241, 0], [1, "r", 53, 241, 0], [1, "r", 52, 241, 0], [1, "r", 51, 241, 0], [1, "r", 49, 241, 0], [1, "r", 50, 241, 0], [1, "r", 48, 241, 0], [1, "r", 47, 241, 0], [1, "r", 46, 241, 0], [1, "r", 45, 241, 0], [1, "r", 44, 241, 0], [1, "r", 43, 241, 0], [1, "r", 42, 241, 0], [1, "r", 41, 241, 0], [1, "r", 40, 242, 0], [1, "r", 41, 242, 0], [1, "r", 42, 242, 0], [1, "r", 43, 242, 0], [1, "r", 44, 242, 0], [1, "r", 45, 242, 0], [1, "r", 46, 242, 0], [1, "r", 47, 242, 0], [1, "r", 48, 242, 0], [1, "r", 49, 242, 0], [1, "r", 50, 242, 0], [1, "r", 51, 242, 0], [1, "r", 52, 242, 0], [1, "r", 53, 242, 0], [1, "r", 54, 242, 0], [1, "r", 55, 242, 0], [1, "r", 56, 242, 0], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [1, "r", 54, 243, 0], [1, "r", 53, 243, 0], [1, "r", 52, 243, 0], [1, "r", 51, 243, 0], [1, "r", 50, 243, 0], [1, "r", 49, 243, 0], [1, "r", 48, 243, 0], [1, "r", 47, 243, 0], [1, "r", 46, 243, 0], [1, "r", 45, 243, 0], [1, "r", 44, 243, 0], [1, "r", 43, 243, 0], [1, "r", 42, 243, 0], [1, "r", 41, 243, 0], [1, "r", 40, 243, 0], [1, "r", 40, 244, 0], [1, "r", 41, 244, 0], [1, "r", 43, 244, 0], [1, "r", 44, 244, 0], [1, "r", 45, 244, 0], [1, "r", 46, 244, 0], [1, "r", 47, 244, 0], [1, "r", 48, 244, 0], [1, "r", 49, 244, 0], [1, "r", 50, 244, 0], [1, "r", 51, 244, 0], [1, "r", 52, 244, 0], [1, "r", 53, 244, 0], [1, "r", 54, 244, 0], [1, "r", 55, 244, 0], [1, "r", 42, 244, 0], [1, "r", 40, 245, 0], [1, "r", 41, 245, 0], [1, "r", 42, 245, 0], [1, "r", 43, 245, 0], [1, "r", 44, 245, 0], [1, "r", 45, 245, 0], [1, "r", 46, 245, 0], [1, "r", 47, 245, 0], [1, "r", 48, 245, 0], [1, "r", 49, 245, 0], [1, "r", 50, 245, 0], [1, "r", 51, 245, 0], [1, "r", 52, 246, 0], [1, "r", 52, 245, 0], [1, "r", 53, 245, 0], [1, "r", 54, 245, 0], [1, "r", 55, 245, 0], [1, "r", 53, 246, 0], [1, "r", 51, 246, 0], [1, "r", 50, 246, 0], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [1, "r", 47, 246, 0], [1, "r", 45, 246, 0], [1, "r", 46, 246, 0], [1, "r", 44, 246, 0], [1, "r", 43, 246, 0], [1, "r", 42, 246, 0], [1, "r", 41, 246, 0], [1, "r", 42, 247, 0], [1, "r", 43, 247, 0], [1, "r", 44, 247, 0], [1, "r", 45, 247, 0], [1, "r", 46, 247, 0], [1, "r", 47, 247, 0], [1, "r", 48, 247, 0], [1, "r", 50, 247, 0], [1, "r", 51, 247, 0], [1, "r", 52, 247, 0], [1, "r", 53, 247, 0], [1, "r", 54, 247, 0], [1, "r", 49, 247, 0], [1, "r", 49, 248, 0], [1, "r", 47, 248, 0], [1, "r", 46, 248, 0], [1, "r", 45, 248, 0], [1, "r", 51, 248, 0], [1, "r", 55, 246, 1], [1, "r", 55, 247, 1], [1, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, 1], [1, "r", 93, 270, 1], [1, "r", 94, 270, 1], [1, "r", 95, 271, 1], [1, "r", 94, 271, 1], [1, "r", 93, 271, 1], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, 1], [1, "r", 92, 281, 1], [1, "r", 92, 280, 1], [1, "r", 91, 280, 1], [1, "r", 90, 279, 1], [1, "r", 95, 275, 1], [1, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [1, "r", 94, 274, 1], [1, "r", 94, 273, 1], [1, "r", 94, 272, 1], [1, "r", 93, 272, 1], [1, "r", 93, 273, 1], [1, "r", 93, 274, 1], [1, "r", 92, 273, 1], [1, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [1, "r", 92, 269, 1], [1, "r", 90, 269, 1], [1, "r", 91, 269, 1], [1, "r", 91, 271, 1], [1, "r", 91, 270, 1], [1, "r", 95, 278, 1], [1, "r", 95, 277, 1], [1, "r", 95, 276, 1], [1, "r", 94, 276, 1], [1, "r", 94, 275, 1], [1, "r", 93, 275, 1], [1, "r", 92, 274, 1], [1, "r", 92, 275, 1], [1, "r", 91, 275, 1], [1, "r", 90, 275, 1], [1, "r", 89, 274, 1], [1, "r", 90, 274, 1], [1, "r", 89, 275, 1], [1, "r", 88, 274, 1], [1, "r", 88, 273, 1], [1, "r", 86, 272, 1], [1, "r", 85, 271, 1], [1, "r", 86, 271, 1], [1, "r", 87, 272, 1], [1, "r", 55, 248, 1], [1, "r", 54, 248, 1], [1, "r", 56, 249, 1], [1, "r", 55, 249, 1], [1, "r", 55, 250, 1], [1, "r", 56, 250, 1], [1, "r", 57, 250, 1], [1, "r", 57, 249, 1], [1, "r", 59, 250, 1], [1, "r", 58, 250, 1], [1, "r", 60, 250, 1], [1, "r", 61, 251, 1], [1, "r", 60, 251, 1], [1, "r", 62, 251, 1], [1, "r", 62, 252, 1], [1, "r", 63, 252, 1], [1, "r", 58, 251, 1], [1, "r", 57, 251, 1], [1, "r", 56, 251, 1], [1, "r", 58, 252, 1], [1, "r", 57, 252, 1], [1, "r", 57, 253, 1], [1, "r", 58, 253, 1], [1, "r", 58, 254, 1], [1, "r", 59, 255, 1], [1, "r", 58, 255, 1], [1, "r", 57, 254, 1], [1, "r", 56, 252, 1], [1, "r", 55, 251, 1], [1, "r", 60, 255, 1], [1, "r", 61, 255, 1], [1, "r", 61, 256, 1], [1, "r", 60, 256, 1], [1, "r", 62, 256, 1], [1, "r", 62, 257, 1], [1, "r", 61, 257, 1], [1, "r", 64, 253, 1], [1, "r", 64, 254, 1], [1, "r", 65, 254, 1], [1, "r", 61, 250, 1], [1, "r", 64, 252, 1], [1, "r", 65, 253, 1], [1, "r", 66, 254, 1], [1, "r", 65, 255, 1], [1, "r", 64, 255, 1], [1, "r", 64, 256, 1], [1, "r", 65, 256, 1], [1, "r", 65, 257, 1], [1, "r", 64, 257, 1], [1, "r", 63, 257, 1], [1, "r", 62, 258, 1], [1, "r", 63, 258, 1], [1, "r", 64, 258, 1], [1, "r", 66, 255, 1], [1, "r", 66, 256, 1], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [1, "r", 67, 259, 1], [1, "r", 66, 259, 1], [1, "r", 65, 259, 1], [1, "r", 56, 246, 1], [1, "r", 56, 245, 1], [1, "r", 68, 258, 1], [1, "r", 68, 259, 1], [1, "r", 68, 260, 1], [1, "r", 69, 260, 1], [1, "r", 69, 261, 1], [1, "r", 70, 261, 1], [1, "r", 71, 261, 1], [1, "r", 67, 260, 1], [1, "r", 89, 269, 1], [1, "r", 89, 268, 1], [1, "r", 90, 268, 1], [1, "r", 82, 267, 1], [1, "r", 83, 267, 1], [1, "r", 80, 266, 1], [1, "r", 81, 266, 1], [1, "r", 81, 267, 1], [1, "r", 79, 266, 1], [1, "r", 78, 265, 1], [1, "r", 77, 265, 1], [1, "r", 76, 264, 1], [1, "r", 75, 264, 1], [1, "r", 75, 263, 1], [1, "r", 74, 263, 1], [1, "r", 74, 262, 1], [1, "r", 72, 262, 1], [1, "r", 73, 262, 1], [1, "r", 71, 262, 1], [1, "r", 85, 270, 1], [1, "r", 84, 270, 1], [1, "r", 84, 269, 1], [1, "r", 83, 269, 1], [1, "r", 82, 269, 1], [1, "r", 81, 269, 1], [1, "r", 81, 268, 1], [1, "r", 82, 268, 1], [1, "r", 83, 268, 1], [1, "r", 80, 268, 1], [1, "r", 80, 267, 1], [1, "r", 79, 267, 1], [1, "r", 78, 266, 1], [1, "r", 76, 265, 1], [1, "r", 75, 262, 1], [1, "r", 90, 280, 1], [1, "r", 89, 280, 1], [1, "r", 89, 279, 1], [1, "r", 88, 279, 1], [1, "r", 88, 278, 1], [1, "r", 87, 277, 1], [1, "r", 86, 276, 1], [1, "r", 86, 275, 1], [1, "r", 86, 274, 1], [1, "r", 86, 273, 1], [1, "r", 85, 273, 1], [1, "r", 85, 272, 1], [1, "r", 85, 274, 1], [1, "r", 86, 277, 1], [1, "r", 87, 278, 1], [1, "r", 84, 271, 1], [1, "r", 83, 270, 1], [1, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, 1], [1, "r", 88, 272, 1], [1, "r", 91, 281, 1], [1, "r", 92, 282, 1], [1, "r", 88, 280, 1], [1, "r", 87, 279, 1], [1, "r", 85, 275, 1], [1, "r", 84, 273, 1], [1, "r", 84, 272, 1], [1, "r", 83, 271, 1], [1, "r", 82, 270, 1], [1, "r", 84, 267, 0], [1, "r", 85, 267, 0], [1, "r", 76, 262, 0], [1, "r", 77, 262, 0], [1, "r", 88, 268, 0], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [1, "r", 80, 262, 0], [1, "r", 80, 263, 0], [1, "r", 81, 263, 0], [1, "r", 82, 263, 0], [1, "r", 83, 263, 0], [1, "r", 84, 263, 0], [1, "r", 85, 263, 0], [1, "r", 88, 262, 0], [1, "r", 89, 262, 0], [1, "r", 90, 262, 0], [1, "r", 87, 262, 0], [1, "r", 86, 262, 0], [1, "r", 86, 263, 0], [1, "r", 87, 263, 0], [1, "r", 91, 262, 0], [1, "r", 95, 262, 0], [1, "r", 94, 262, 0], [1, "r", 86, 267, 0], [1, "r", 87, 267, 0], [1, "r", 87, 268, 0], [1, "r", 86, 268, 0], [1, "r", 74, 189, 0], [1, "r", 75, 189, 0], [1, "r", 76, 189, 0], [1, "r", 77, 189, 0], [1, "r", 78, 190, 0], [1, "r", 77, 190, 0], [1, "r", 75, 190, 0], [1, "r", 76, 190, 0], [1, "r", 74, 190, 0], [1, "r", 73, 190, 0], [1, "r", 78, 191, 0], [1, "r", 76, 191, 0], [1, "r", 77, 191, 0], [1, "r", 75, 191, 0], [1, "r", 74, 191, 0], [1, "r", 78, 192, 0], [1, "r", 77, 192, 0], [1, "r", 76, 192, 0], [1, "r", 75, 192, 0], [1, "r", 74, 192, 0], [1, "r", 73, 191, 0], [1, "f", 1, 96, 22, 1], [1, "s", 1, 97, 22, 1], [1, "f", 1, 98, 22, 1], [1, "s", 0, 99, 22, 1], [1, "s", 1, 100, 21, 1], [1, "s", 1, 96, 49, 1], [1, "s", 1, 100, 50, 1], [1, "s", 0, 99, 49, 1], [1, "s", 0, 97, 49, 1], [1, "f", 1, 98, 49, 1], [1, "r", 70, 218, 0], [1, "r", 71, 218, 0], [1, "r", 72, 218, 0], [1, "r", 73, 218, 0], [1, "r", 74, 219, 0], [1, "r", 73, 219, 0], [1, "r", 72, 219, 0], [1, "r", 71, 219, 0], [1, "r", 70, 219, 0], [1, "r", 73, 220, 0], [1, "r", 72, 220, 0], [1, "r", 71, 220, 0], [1, "r", 72, 221, 0], [1, "r", 71, 221, 0], [1, "r", 70, 221, 0], [1, "r", 69, 221, 0], [1, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, 0], [1, "r", 69, 219, 0], [1, "r", 68, 220, 0], [1, "r", 73, 221, 0], [1, "r", 73, 222, 0], [1, "r", 71, 222, 0], [1, "r", 72, 222, 0], [1, "r", 74, 221, 0], [1, "r", 74, 220, 0], [1, "r", 75, 220, 0], [1, "r", 75, 221, 0], [1, "r", 70, 222, 0], [1, "r", 69, 222, 0], [1, "r", 29, 217, 0], [1, "r", 30, 217, 0], [1, "r", 31, 217, 0], [1, "r", 32, 217, 0], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [1, "r", 29, 219, 0], [1, "r", 27, 219, 0], [1, "r", 25, 219, 0], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [1, "r", 26, 218, 0], [1, "r", 27, 218, 0], [1, "r", 28, 218, 0], [1, "r", 29, 218, 0], [1, "r", 30, 218, 0], [1, "r", 28, 217, 0], [1, "r", 26, 217, 0], [1, "r", 27, 217, 0], [1, "r", 28, 216, 0], [1, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, 0], [1, "r", 32, 218, 0], [1, "r", 31, 216, 0], [1, "r", 31, 221, 0], [1, "r", 31, 220, 0], [1, "r", 30, 220, 0], [1, "r", 29, 220, 0], [1, "r", 28, 220, 0], [1, "r", 27, 220, 0], [1, "r", 26, 220, 0], [1, "r", 25, 218, 0], [1, "r", 27, 221, 0], [1, "r", 28, 221, 0], [1, "r", 29, 221, 0], [1, "r", 30, 221, 0], [1, "r", 32, 220, 0], [1, "r", 32, 219, 0], [1, "r", 33, 218, 0], [1, "r", 33, 219, 0], [1, "r", 75, 238, 0], [1, "r", 76, 238, 0], [1, "r", 77, 239, 0], [1, "r", 76, 239, 0], [1, "r", 75, 239, 0], [1, "r", 74, 239, 0], [1, "r", 76, 240, 0], [1, "r", 77, 240, 0], [1, "r", 78, 240, 0], [1, "r", 77, 241, 0], [1, "r", 76, 241, 0], [1, "r", 75, 241, 0], [1, "r", 75, 240, 0], [1, "r", 74, 240, 0], [1, "r", 78, 239, 0], [1, "r", 77, 238, 0], [1, "r", 18, 253, 0], [1, "r", 19, 252, 0], [1, "r", 20, 252, 0], [1, "r", 21, 253, 0], [1, "r", 23, 254, 0], [1, "r", 20, 254, 0], [1, "r", 19, 254, 0], [1, "r", 22, 254, 0], [1, "r", 18, 254, 0], [1, "r", 19, 253, 0], [1, "r", 20, 253, 0], [1, "r", 21, 254, 0], [1, "r", 22, 253, 0], [1, "r", 21, 255, 0], [1, "r", 20, 255, 0], [1, "r", 19, 255, 0], [1, "r", 18, 255, 0], [1, "r", 17, 255, 0], [1, "r", 17, 254, 0], [1, "r", 22, 255, 0], [1, "r", 19, 256, 0], [1, "r", 20, 256, 0], [1, "r", 21, 256, 0], [1, "r", 39, 270, 0], [1, "r", 40, 270, 0], [1, "r", 41, 270, 0], [1, "r", 43, 270, 0], [1, "r", 44, 270, 0], [1, "r", 46, 270, 0], [1, "r", 42, 270, 0], [1, "r", 45, 270, 0], [1, "r", 44, 269, 0], [1, "r", 43, 269, 0], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [1, "r", 41, 269, 0], [1, "r", 45, 271, 0], [1, "r", 44, 271, 0], [1, "r", 43, 271, 0], [1, "r", 42, 271, 0], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [1, "r", 46, 271, 0], [1, "r", 45, 272, 0], [1, "r", 44, 272, 0], [1, "r", 43, 272, 0], [1, "r", 42, 272, 0], [1, "r", 19, 284, 0], [1, "r", 20, 284, 0], [1, "r", 21, 285, 0], [1, "r", 22, 285, 0], [1, "r", 23, 286, 0], [1, "r", 22, 288, 0], [1, "r", 20, 288, 0], [1, "r", 18, 288, 0], [1, "r", 17, 287, 0], [1, "r", 16, 287, 0], [1, "r", 16, 286, 0], [1, "r", 17, 286, 0], [1, "r", 18, 286, 0], [1, "r", 19, 286, 0], [1, "r", 20, 286, 0], [1, "r", 21, 286, 0], [1, "r", 22, 286, 0], [1, "r", 20, 285, 0], [1, "r", 19, 285, 0], [1, "r", 18, 285, 0], [1, "r", 17, 285, 0], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [1, "r", 20, 287, 0], [1, "r", 21, 287, 0], [1, "r", 22, 287, 0], [1, "r", 23, 287, 0], [1, "r", 21, 288, 0], [1, "r", 19, 288, 0], [1, "r", 17, 288, 0], [1, "r", 19, 289, 0], [1, "r", 21, 289, 0], [1, "r", 22, 289, 0], [1, "r", 20, 289, 0], [1, "r", 23, 288, 0], [1, "r", 24, 287, 0], [1, "r", 24, 286, 0], [1, "r", 23, 285, 0], [1, "r", 66, 286, 0], [1, "r", 64, 287, 0], [1, "r", 63, 287, 0], [1, "r", 60, 287, 0], [1, "r", 59, 285, 0], [1, "r", 58, 284, 0], [1, "r", 59, 283, 0], [1, "r", 65, 283, 0], [1, "r", 64, 283, 0], [1, "r", 63, 283, 0], [1, "r", 62, 283, 0], [1, "r", 61, 283, 0], [1, "r", 60, 283, 0], [1, "r", 59, 284, 0], [1, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [1, "r", 61, 287, 0], [1, "r", 62, 287, 0], [1, "r", 61, 286, 0], [1, "r", 62, 286, 0], [1, "r", 63, 286, 0], [1, "r", 64, 286, 0], [1, "r", 65, 286, 0], [1, "r", 67, 285, 0], [1, "r", 66, 285, 0], [1, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, 0], [1, "r", 62, 285, 0], [1, "r", 61, 285, 0], [1, "r", 60, 285, 0], [1, "r", 60, 284, 0], [1, "r", 61, 284, 0], [1, "r", 62, 284, 0], [1, "r", 63, 284, 0], [1, "r", 64, 284, 0], [1, "r", 65, 284, 0], [1, "r", 66, 284, 0], [1, "r", 65, 287, 0], [1, "r", 67, 286, 0], [1, "p", 0, 13, 189, 1], [1, "p", 0, 32, 184, 1], [1, "p", 0, 47, 191, 1], [1, "p", 0, 64, 184, 1], [1, "p", 0, 84, 192, 1], [1, "p", 0, 78, 207, 1], [1, "p", 0, 58, 216, 1], [1, "p", 0, 41, 211, 1], [1, "p", 0, 18, 211, 1], [1, "p", 0, 14, 230, 1], [1, "p", 0, 29, 237, 1], [1, "p", 0, 50, 230, 1], [1, "p", 0, 78, 241, 1], [1, "p", 0, 74, 256, 1], [1, "p", 0, 68, 266, 1], [1, "p", 0, 48, 259, 1], [1, "p", 0, 31, 263, 1], [1, "p", 0, 18, 274, 1], [1, "p", 0, 33, 283, 1], [1, "p", 0, 66, 287, 1], [1, "p", 0, 82, 291, 1], [1, "p", 0, 16, 295, 1], [1, "p", 0, 45, 294, 1], [1, "p", 0, 18, 252, 1], [1, "p", 0, 79, 227, 1], [1, "p", 0, 32, 200, 1], [1, "p", 0, 64, 200, 1], [1, "s", 0, 21, 193, 1], [1, "s", 1, 18, 189, 1], [1, "s", 2, 26, 189, 1], [1, "b", 1, 15, 181, 0], [1, "b", 2, 18, 190, 0], [1, "b", 2, 29, 193, 0], [1, "t", 3, 16, 182, 0], [1, "t", 3, 13, 195, 0], [1, "t", 4, 16, 183, 0], [1, "t", 5, 10, 184, 0], [1, "t", 5, 23, 182, 0], [1, "t", 4, 30, 187, 0], [1, "t", 1, 26, 192, 0], [1, "b", 1, 25, 188, 0], [1, "s", 1, 24, 181, 1], [1, "t", 3, 33, 183, 0], [1, "b", 1, 36, 189, 0], [1, "t", 2, 35, 190, 0], [1, "b", 3, 19, 200, 0], [1, "s", 0, 28, 194, 1], [1, "s", 1, 32, 196, 1], [1, "s", 1, 36, 183, 1], [1, "s", 2, 38, 184, 1], [1, "s", 2, 10, 192, 1], [1, "s", 2, 12, 183, 1], [1, "s", 1, 15, 199, 1], [1, "b", 0, 12, 202, 0], [1, "t", 2, 13, 203, 0], [1, "t", 4, 20, 200, 0], [1, "t", 4, 12, 194, 0], [1, "t", 5, 15, 205, 0], [1, "t", 5, 29, 200, 0], [1, "t", 3, 28, 201, 0], [1, "s", 2, 25, 199, 1], [1, "s", 1, 22, 204, 1], [1, "g", 2, 25, 205, 1], [1, "b", 1, 27, 216, 0], [1, "s", 1, 25, 217, 1], [1, "s", 1, 33, 217, 1], [1, "s", 2, 35, 215, 1], [1, "s", 0, 32, 221, 1], [1, "t", 2, 31, 222, 0], [1, "t", 4, 26, 221, 0], [1, "b", 3, 27, 222, 0], [1, "b", 0, 17, 217, 0], [1, "t", 3, 18, 216, 0], [1, "t", 4, 13, 215, 0], [1, "t", 5, 30, 213, 0], [1, "t", 5, 24, 208, 0], [1, "s", 1, 12, 216, 1], [1, "s", 2, 11, 210, 1], [1, "s", 2, 34, 223, 1], [1, "b", 2, 36, 218, 0], [1, "t", 4, 40, 206, 0], [1, "t", 5, 35, 203, 0], [1, "t", 3, 39, 206, 0], [1, "b", 1, 34, 204, 0], [1, "s", 1, 33, 206, 1], [1, "s", 1, 42, 203, 1], [1, "s", 0, 47, 196, 1], [1, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, 0], [1, "t", 5, 44, 187, 0], [1, "b", 1, 46, 181, 0], [1, "t", 2, 47, 182, 0], [1, "b", 0, 57, 182, 0], [1, "b", 3, 56, 183, 0], [1, "t", 4, 55, 184, 0], [1, "t", 5, 62, 195, 0], [1, "s", 1, 51, 185, 1], [1, "s", 2, 62, 180, 1], [1, "s", 2, 61, 188, 1], [1, "s", 1, 61, 189, 1], [1, "s", 2, 48, 195, 1], [1, "b", 1, 51, 199, 0], [1, "t", 2, 52, 199, 0], [1, "t", 3, 56, 204, 0], [1, "t", 4, 57, 204, 0], [1, "t", 4, 51, 204, 0], [1, "s", 1, 52, 205, 1], [1, "s", 2, 57, 200, 1], [1, "s", 1, 56, 199, 1], [1, "b", 0, 55, 192, 0], [1, "t", 3, 56, 193, 0], [1, "t", 4, 50, 190, 0], [1, "b", 1, 76, 188, 0], [1, "t", 2, 75, 188, 0], [1, "t", 2, 73, 192, 0], [1, "t", 4, 72, 191, 0], [1, "t", 5, 78, 193, 0], [1, "b", 0, 79, 192, 0], [1, "s", 2, 79, 190, 1], [1, "s", 1, 74, 194, 1], [1, "s", 1, 72, 187, 1], [1, "s", 0, 74, 183, 1], [1, "s", 1, 75, 183, 1], [1, "t", 2, 69, 181, 0], [1, "t", 4, 70, 182, 0], [1, "t", 5, 69, 180, 0], [1, "b", 1, 65, 189, 0], [1, "b", 2, 66, 189, 0], [1, "t", 3, 64, 188, 0], [1, "t", 4, 67, 192, 0], [1, "b", 2, 85, 183, 0], [1, "t", 1, 84, 184, 0], [1, "t", 4, 81, 180, 0], [1, "t", 5, 89, 180, 0], [1, "t", 0, 90, 188, 0], [1, "t", 3, 89, 190, 0], [1, "s", 1, 87, 187, 1], [1, "s", 2, 87, 197, 1], [1, "b", 1, 84, 200, 0], [1, "t", 2, 83, 201, 0], [1, "t", 4, 87, 207, 0], [1, "s", 2, 79, 202, 1], [1, "s", 1, 80, 203, 1], [1, "t", 0, 71, 200, 0], [1, "b", 2, 72, 201, 0], [1, "t", 2, 65, 205, 0], [1, "t", 1, 66, 206, 0], [1, "t", 4, 63, 209, 0], [1, "t", 5, 73, 203, 0], [1, "s", 0, 70, 207, 1], [1, "s", 1, 71, 206, 1], [1, "s", 2, 68, 199, 1], [1, "s", 1, 64, 213, 1], [1, "t", 0, 85, 213, 0], [1, "b", 2, 84, 212, 0], [1, "t", 3, 77, 209, 0], [1, "t", 4, 83, 216, 0], [1, "t", 4, 73, 209, 0], [1, "b", 0, 86, 222, 0], [1, "b", 3, 87, 221, 0], [1, "s", 1, 80, 214, 1], [1, "s", 2, 87, 216, 1], [1, "s", 2, 84, 224, 1], [1, "s", 1, 77, 227, 1], [1, "t", 1, 74, 222, 0], [1, "b", 1, 69, 218, 0], [1, "b", 2, 75, 219, 0], [1, "s", 2, 74, 218, 1], [1, "s", 1, 69, 223, 1], [1, "s", 1, 77, 221, 1], [1, "b", 1, 72, 211, 0], [1, "b", 1, 85, 232, 0], [1, "t", 2, 84, 233, 0], [1, "t", 2, 78, 238, 0], [1, "b", 1, 77, 237, 0], [1, "t", 5, 87, 236, 0], [1, "t", 5, 76, 229, 0], [1, "b", 2, 74, 241, 0], [1, "s", 0, 73, 242, 1], [1, "s", 0, 81, 238, 1], [1, "s", 1, 82, 237, 1], [1, "s", 2, 72, 237, 1], [1, "s", 2, 78, 242, 1], [1, "b", 1, 66, 230, 0], [1, "b", 2, 62, 229, 0], [1, "t", 4, 67, 231, 0], [1, "t", 4, 62, 228, 0], [1, "t", 5, 64, 233, 0], [1, "t", 2, 65, 234, 0], [1, "t", 2, 51, 220, 0], [1, "t", 1, 50, 218, 0], [1, "b", 1, 45, 223, 0], [1, "b", 2, 46, 224, 0], [1, "t", 4, 49, 218, 0], [1, "t", 4, 47, 225, 0], [1, "s", 1, 50, 215, 1], [1, "s", 2, 51, 213, 1], [1, "s", 2, 42, 227, 1], [1, "s", 1, 44, 227, 1], [1, "s", 1, 60, 230, 1], [1, "s", 2, 59, 231, 1], [1, "b", 1, 85, 252, 0], [1, "t", 2, 84, 251, 0], [1, "t", 2, 74, 250, 0], [1, "t", 0, 75, 251, 0], [1, "b", 0, 83, 246, 0], [1, "t", 3, 82, 247, 0], [1, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [1, "t", 5, 87, 246, 0], [1, "t", 5, 75, 252, 0], [1, "s", 1, 79, 257, 1], [1, "s", 2, 78, 249, 1], [1, "s", 2, 80, 258, 1], [1, "s", 1, 88, 254, 1], [1, "s", 1, 85, 264, 1], [1, "s", 2, 89, 263, 1], [1, "s", 2, 87, 269, 1], [1, "s", 0, 84, 268, 1], [1, "s", 2, 76, 267, 1], [1, "s", 1, 66, 261, 1], [1, "s", 1, 87, 274, 1], [1, "s", 1, 76, 263, 1], [1, "s", 1, 59, 251, 1], [1, "s", 0, 59, 252, 1], [1, "t", 2, 86, 265, 0], [1, "t", 0, 78, 270, 0], [1, "t", 2, 79, 271, 0], [1, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, 0], [1, "b", 1, 71, 264, 0], [1, "b", 1, 88, 269, 0], [1, "t", 5, 84, 264, 0], [1, "t", 5, 79, 261, 0], [1, "t", 5, 72, 265, 0], [1, "t", 5, 77, 270, 0], [1, "t", 0, 87, 261, 0], [1, "t", 2, 86, 260, 0], [1, "t", 4, 84, 255, 0], [1, "t", 4, 68, 255, 0], [1, "t", 1, 67, 254, 0], [1, "t", 2, 65, 262, 0], [1, "t", 1, 57, 260, 0], [1, "t", 2, 58, 259, 0], [1, "b", 1, 63, 256, 0], [1, "b", 1, 52, 248, 0], [1, "t", 2, 53, 248, 0], [1, "s", 1, 50, 253, 1], [1, "s", 2, 67, 263, 1], [1, "s", 2, 52, 252, 1], [1, "s", 2, 71, 244, 1], [1, "b", 0, 57, 245, 0], [1, "t", 2, 58, 244, 0], [1, "b", 1, 53, 237, 0], [1, "t", 2, 54, 237, 0], [1, "t", 2, 41, 238, 0], [1, "t", 1, 42, 237, 0], [1, "t", 5, 57, 235, 0], [1, "t", 5, 60, 246, 0], [1, "t", 5, 50, 252, 0], [1, "t", 1, 42, 248, 0], [1, "b", 1, 43, 249, 0], [1, "b", 3, 37, 243, 0], [1, "s", 0, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, 1], [1, "s", 2, 60, 243, 1], [1, "s", 2, 36, 240, 1], [1, "s", 2, 43, 254, 1], [1, "s", 1, 42, 254, 1], [1, "t", 1, 38, 233, 0], [1, "t", 2, 35, 235, 0], [1, "t", 4, 33, 228, 0], [1, "t", 4, 33, 245, 0], [1, "t", 4, 43, 235, 0], [1, "t", 5, 45, 249, 0], [1, "t", 5, 41, 253, 0], [1, "b", 1, 20, 227, 0], [1, "b", 1, 14, 240, 0], [1, "t", 3, 21, 227, 0], [1, "t", 3, 27, 234, 0], [1, "t", 3, 15, 241, 0], [1, "t", 3, 12, 229, 0], [1, "t", 4, 17, 224, 0], [1, "t", 4, 11, 231, 0], [1, "t", 4, 22, 238, 0], [1, "t", 4, 11, 239, 0], [1, "t", 1, 22, 243, 0], [1, "b", 2, 23, 242, 0], [1, "s", 1, 23, 238, 1], [1, "s", 1, 22, 228, 1], [1, "s", 2, 24, 228, 1], [1, "s", 2, 21, 236, 1], [1, "s", 0, 13, 228, 1], [1, "s", 0, 16, 242, 1], [1, "s", 1, 15, 244, 1], [1, "s", 1, 34, 236, 1], [1, "t", 1, 26, 249, 0], [1, "t", 1, 22, 256, 0], [1, "t", 2, 23, 255, 0], [1, "b", 1, 17, 256, 0], [1, "b", 2, 18, 256, 0], [1, "s", 0, 21, 252, 1], [1, "s", 2, 20, 250, 1], [1, "s", 2, 23, 259, 1], [1, "s", 1, 13, 257, 1], [1, "t", 1, 31, 254, 0], [1, "t", 2, 32, 254, 0], [1, "t", 4, 28, 254, 0], [1, "t", 4, 34, 258, 0], [1, "t", 0, 29, 260, 0], [1, "b", 2, 30, 261, 0], [1, "t", 0, 43, 262, 0], [1, "t", 2, 42, 263, 0], [1, "t", 4, 46, 264, 0], [1, "b", 1, 39, 265, 0], [1, "b", 1, 58, 267, 0], [1, "t", 2, 57, 268, 0], [1, "t", 4, 62, 270, 0], [1, "t", 5, 52, 273, 0], [1, "s", 1, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", 2, 41, 274, 1], [1, "t", 2, 42, 268, 0], [1, "t", 0, 43, 268, 0], [1, "b", 1, 46, 272, 0], [1, "b", 1, 14, 265, 0], [1, "t", 2, 15, 266, 0], [1, "t", 4, 19, 264, 0], [1, "t", 4, 29, 263, 0], [1, "t", 4, 11, 269, 0], [1, "t", 1, 29, 271, 0], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, 0], [1, "t", 2, 20, 279, 0], [1, "t", 0, 19, 278, 0], [1, "t", 3, 13, 278, 0], [1, "b", 0, 21, 284, 0], [1, "b", 0, 18, 289, 0], [1, "t", 2, 20, 283, 0], [1, "t", 2, 19, 290, 0], [1, "t", 4, 19, 283, 0], [1, "t", 4, 20, 290, 0], [1, "s", 1, 16, 285, 1], [1, "s", 1, 24, 288, 1], [1, "s", 2, 26, 287, 1], [1, "s", 2, 16, 278, 1], [1, "s", 1, 21, 268, 1], [1, "s", 2, 19, 268, 1], [1, "t", 0, 12, 294, 0], [1, "b", 1, 13, 295, 0], [1, "t", 3, 13, 291, 0], [1, "t", 3, 10, 299, 0], [1, "t", 4, 11, 287, 0], [1, "t", 4, 17, 298, 0], [1, "t", 1, 27, 294, 0], [1, "b", 2, 26, 295, 0], [1, "t", 3, 33, 297, 0], [1, "b", 1, 48, 278, 0], [1, "b", 0, 46, 280, 0], [1, "b", 2, 50, 280, 0], [1, "t", 0, 44, 282, 0], [1, "b", 1, 49, 283, 0], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, 0], [1, "b", 3, 44, 284, 0], [1, "b", 0, 47, 284, 0], [1, "b", 2, 42, 283, 0], [1, "t", 4, 51, 277, 0], [1, "b", 1, 44, 286, 0], [1, "b", 2, 46, 286, 0], [1, "b", 1, 42, 285, 0], [1, "b", 3, 41, 286, 0], [1, "t", 5, 42, 287, 0], [1, "b", 1, 42, 278, 0], [1, "b", 2, 43, 279, 0], [1, "b", 0, 40, 280, 0], [1, "t", 4, 39, 283, 0], [1, "t", 4, 39, 279, 0], [1, "t", 5, 43, 277, 0], [1, "t", 5, 47, 287, 0], [1, "t", 4, 46, 277, 0], [1, "t", 4, 45, 290, 0], [1, "t", 4, 36, 285, 0], [1, "t", 3, 35, 284, 0], [1, "t", 3, 36, 272, 0], [1, "t", 4, 35, 271, 0], [1, "t", 1, 29, 279, 0], [1, "b", 1, 32, 277, 0], [1, "t", 3, 31, 278, 0], [1, "b", 2, 28, 280, 0], [1, "t", 4, 29, 286, 0], [1, "t", 5, 28, 275, 0], [1, "t", 3, 37, 292, 0], [1, "b", 1, 36, 291, 0], [1, "b", 0, 34, 298, 0], [1, "t", 4, 31, 292, 0], [1, "t", 4, 46, 295, 0], [1, "t", 4, 59, 287, 0], [1, "b", 1, 58, 286, 0], [1, "s", 1, 68, 284, 1], [1, "s", 2, 70, 286, 1], [1, "s", 0, 67, 284, 1], [1, "t", 3, 66, 283, 0], [1, "t", 1, 65, 282, 0], [1, "b", 1, 64, 288, 0], [1, "t", 3, 60, 293, 0], [1, "t", 1, 61, 294, 0], [1, "b", 1, 76, 294, 0], [1, "t", 5, 75, 295, 0], [1, "t", 5, 56, 293, 0], [1, "t", 5, 59, 281, 0], [1, "t", 5, 67, 291, 0], [1, "b", 0, 88, 293, 0], [1, "t", 2, 89, 292, 0], [1, "t", 2, 85, 286, 0], [1, "t", 4, 88, 289, 0], [1, "t", 4, 79, 287, 0], [1, "b", 1, 84, 285, 0], [1, "t", 3, 75, 284, 0], [1, "b", 0, 75, 278, 0], [1, "t", 3, 74, 277, 0], [1, "t", 4, 81, 276, 0], [1, "t", 2, 65, 276, 0], [1, "b", 1, 66, 275, 0], [1, "g", 0, 45, 261, 1], [1, "g", 1, 39, 258, 1], [1, "g", 0, 35, 250, 1], [1, "g", 2, 22, 247, 1], [1, "g", 2, 27, 227, 1], [1, "g", 2, 63, 218, 1], [1, "g", 1, 56, 224, 1], [1, "g", 0, 46, 231, 1], [1, "g", 1, 65, 240, 1], [1, "g", 2, 67, 238, 1], [1, "g", 2, 79, 232, 1], [1, "g", 2, 72, 253, 1], [1, "g", 2, 62, 264, 1], [1, "g", 2, 28, 267, 1], [1, "g", 2, 58, 274, 1], [1, "de", 2, 14, 182, 0], [1, "de", 2, 24, 182, 0], [1, "de", 0, 11, 185, 0], [1, "de", 0, 14, 194, 0], [1, "de", 1, 25, 196, 0], [1, "de", 3, 31, 183, 0], [1, "de", 0, 38, 181, 0], [1, "de", 2, 45, 186, 0], [1, "de", 1, 38, 191, 0], [1, "de", 0, 56, 181, 0], [1, "de", 1, 68, 182, 0], [1, "de", 2, 80, 181, 0], [1, "de", 3, 86, 187, 0], [1, "de", 0, 84, 193, 0], [1, "de", 1, 82, 201, 0], [1, "de", 2, 64, 191, 0], [1, "de", 2, 72, 200, 0], [1, "de", 3, 64, 201, 0], [1, "de", 2, 76, 209, 0], [1, "de", 3, 71, 212, 0], [1, "de", 1, 86, 214, 0], [1, "de", 0, 57, 208, 0], [1, "de", 0, 41, 203, 0], [1, "de", 1, 15, 206, 0], [1, "de", 2, 25, 209, 0], [1, "de", 3, 16, 218, 0], [1, "de", 3, 11, 227, 0], [1, "de", 0, 22, 229, 0], [1, "de", 1, 15, 239, 0], [1, "de", 2, 24, 238, 0], [1, "de", 3, 22, 246, 0], [1, "de", 3, 10, 253, 0], [1, "de", 1, 18, 258, 0], [1, "de", 1, 28, 261, 0], [1, "de", 1, 14, 267, 0], [1, "de", 0, 24, 268, 0], [1, "de", 0, 15, 278, 0], [1, "de", 2, 21, 279, 0], [1, "de", 2, 30, 272, 0], [1, "de", 2, 29, 281, 0], [1, "de", 2, 15, 284, 0], [1, "de", 3, 12, 291, 0], [1, "de", 3, 30, 287, 0], [1, "de", 3, 27, 293, 0], [1, "de", 0, 25, 296, 0], [1, "de", 0, 11, 298, 0], [1, "de", 0, 8, 286, 0], [1, "de", 2, 36, 299, 0], [1, "de", 2, 37, 280, 0], [1, "de", 3, 38, 291, 0], [1, "de", 1, 48, 287, 0], [1, "de", 1, 46, 277, 0], [1, "de", 1, 53, 278, 0], [1, "de", 3, 48, 295, 0], [1, "de", 0, 57, 294, 0], [1, "de", 1, 65, 290, 0], [1, "de", 1, 84, 292, 0], [1, "de", 2, 77, 295, 0], [1, "de", 2, 84, 287, 0], [1, "de", 0, 74, 279, 0], [1, "de", 3, 65, 274, 0], [1, "de", 2, 71, 267, 0], [1, "de", 2, 65, 261, 0], [1, "de", 2, 47, 264, 0], [1, "de", 3, 47, 258, 0], [1, "de", 3, 53, 251, 0], [1, "de", 2, 40, 253, 0], [1, "de", 0, 35, 244, 0], [1, "de", 0, 37, 233, 0], [1, "de", 3, 44, 226, 0], [1, "de", 2, 37, 219, 0], [1, "de", 2, 54, 234, 0], [1, "de", 1, 66, 234, 0], [1, "de", 2, 65, 241, 0], [1, "de", 0, 68, 249, 0], [1, "de", 3, 78, 257, 0], [1, "de", 2, 86, 253, 0], [1, "de", 2, 83, 245, 0], [1, "de", 1, 82, 238, 0], [1, "de", 3, 76, 235, 0], [1, "de", 2, 86, 232, 0], [1, "de", 0, 86, 224, 0], [1, "de", 2, 76, 226, 0], [1, "de", 2, 61, 228, 0], [1, "de", 2, 58, 217, 0], [1, "de", 0, 49, 217, 0], [1, "de", 19, 11, 179, 0], [1, "de", 20, 17, 180, 0], [1, "de", 22, 18, 181, 0], [1, "de", 19, 30, 184, 0], [1, "de", 19, 27, 187, 0], [1, "de", 19, 30, 195, 0], [1, "de", 19, 18, 192, 0], [1, "de", 19, 44, 182, 0], [1, "de", 19, 49, 182, 0], [1, "de", 19, 54, 182, 0], [1, "de", 19, 59, 183, 0], [1, "de", 19, 56, 186, 0], [1, "de", 19, 46, 188, 0], [1, "de", 19, 58, 193, 0], [1, "de", 19, 67, 187, 0], [1, "de", 19, 65, 192, 0], [1, "de", 19, 71, 180, 0], [1, "de", 19, 78, 187, 0], [1, "de", 19, 80, 194, 0], [1, "de", 19, 72, 193, 0], [1, "de", 19, 82, 182, 0], [1, "de", 19, 88, 185, 0], [1, "de", 19, 87, 189, 0], [1, "de", 19, 86, 197, 0], [1, "de", 19, 85, 203, 0], [1, "de", 19, 74, 200, 0], [1, "de", 19, 70, 202, 0], [1, "de", 19, 83, 199, 0], [1, "de", 19, 86, 208, 0], [1, "de", 19, 84, 214, 0], [1, "de", 19, 83, 211, 0], [1, "de", 19, 84, 217, 0], [1, "de", 19, 77, 210, 0], [1, "de", 19, 71, 210, 0], [1, "de", 19, 73, 213, 0], [1, "de", 19, 66, 207, 0], [1, "de", 19, 66, 204, 0], [1, "de", 19, 62, 209, 0], [1, "de", 19, 63, 201, 0], [1, "de", 19, 56, 205, 0], [1, "de", 19, 49, 199, 0], [1, "de", 19, 50, 205, 0], [1, "de", 19, 40, 197, 0], [1, "de", 19, 38, 198, 0], [1, "de", 19, 40, 208, 0], [1, "de", 19, 36, 204, 0], [1, "de", 19, 33, 204, 0], [1, "de", 19, 29, 202, 0], [1, "de", 19, 27, 200, 0], [1, "de", 19, 26, 193, 0], [1, "de", 19, 18, 201, 0], [1, "de", 19, 20, 199, 0], [1, "de", 19, 12, 196, 0], [1, "de", 19, 12, 204, 0], [1, "de", 19, 11, 201, 0], [1, "de", 19, 23, 208, 0], [1, "de", 19, 31, 214, 0], [1, "de", 19, 26, 215, 0], [1, "de", 19, 36, 217, 0], [1, "de", 19, 32, 223, 0], [1, "de", 19, 26, 223, 0], [1, "de", 19, 18, 218, 0], [1, "de", 19, 15, 215, 0], [1, "de", 19, 17, 212, 0], [1, "de", 19, 15, 224, 0], [1, "de", 19, 19, 229, 0], [1, "de", 19, 10, 230, 0], [1, "de", 19, 22, 240, 0], [1, "de", 19, 13, 238, 0], [1, "de", 19, 13, 243, 0], [1, "de", 19, 24, 244, 0], [1, "de", 19, 24, 250, 0], [1, "de", 19, 28, 253, 0], [1, "de", 19, 33, 255, 0], [1, "de", 19, 34, 260, 0], [1, "de", 19, 31, 260, 0], [1, "de", 19, 38, 267, 0], [1, "de", 19, 44, 264, 0], [1, "de", 19, 43, 261, 0], [1, "de", 19, 16, 257, 0], [1, "de", 19, 22, 258, 0], [1, "de", 19, 12, 253, 0], [1, "de", 19, 8, 242, 0], [1, "de", 19, 8, 255, 0], [1, "de", 19, 15, 264, 0], [1, "de", 19, 20, 265, 0], [1, "de", 19, 12, 271, 0], [1, "de", 19, 8, 272, 0], [1, "de", 19, 13, 277, 0], [1, "de", 19, 21, 277, 0], [1, "de", 19, 21, 281, 0], [1, "de", 19, 27, 282, 0], [1, "de", 19, 29, 278, 0], [1, "de", 19, 29, 273, 0], [1, "de", 19, 36, 271, 0], [1, "de", 19, 8, 278, 0], [1, "de", 19, 11, 286, 0], [1, "de", 19, 17, 291, 0], [1, "de", 19, 14, 294, 0], [1, "de", 19, 8, 292, 0], [1, "de", 19, 12, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", 19, 16, 301, 0], [1, "de", 19, 27, 296, 0], [1, "de", 19, 25, 292, 0], [1, "de", 19, 23, 301, 0], [1, "de", 19, 28, 301, 0], [1, "de", 19, 35, 297, 0], [1, "de", 19, 37, 301, 0], [1, "de", 19, 43, 301, 0], [1, "de", 19, 46, 294, 0], [1, "de", 19, 46, 288, 0], [1, "de", 19, 40, 287, 0], [1, "de", 19, 50, 301, 0], [1, "de", 19, 58, 301, 0], [1, "de", 19, 64, 301, 0], [1, "de", 19, 71, 301, 0], [1, "de", 19, 80, 301, 0], [1, "de", 19, 87, 301, 0], [1, "de", 19, 86, 294, 0], [1, "de", 19, 87, 290, 0], [1, "de", 19, 82, 286, 0], [1, "de", 19, 75, 285, 0], [1, "de", 19, 66, 292, 0], [1, "de", 19, 66, 288, 0], [1, "de", 19, 58, 288, 0], [1, "de", 19, 67, 282, 0], [1, "de", 19, 61, 281, 0], [1, "de", 19, 60, 295, 0], [1, "de", 19, 50, 282, 0], [1, "de", 19, 47, 283, 0], [1, "de", 19, 48, 281, 0], [1, "de", 19, 44, 277, 0], [1, "de", 19, 41, 282, 0], [1, "de", 19, 38, 281, 0], [1, "de", 19, 42, 288, 0], [1, "de", 19, 52, 281, 0], [1, "de", 19, 50, 275, 0], [1, "de", 19, 39, 277, 0], [1, "de", 19, 38, 284, 0], [1, "de", 19, 51, 285, 0], [1, "de", 19, 38, 278, 0], [1, "de", 19, 47, 272, 0], [1, "de", 19, 44, 267, 0], [1, "de", 19, 76, 280, 0], [1, "de", 19, 78, 272, 0], [1, "de", 19, 68, 275, 0], [1, "de", 19, 70, 265, 0], [1, "de", 19, 65, 263, 0], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, 0], [1, "de", 19, 56, 266, 0], [1, "de", 19, 55, 260, 0], [1, "de", 19, 59, 258, 0], [1, "de", 19, 62, 255, 0], [1, "de", 19, 67, 253, 0], [1, "de", 19, 69, 256, 0], [1, "de", 19, 44, 253, 0], [1, "de", 19, 44, 250, 0], [1, "de", 19, 36, 245, 0], [1, "de", 19, 39, 239, 0], [1, "de", 19, 42, 234, 0], [1, "de", 19, 37, 235, 0], [1, "de", 19, 45, 226, 0], [1, "de", 19, 46, 222, 0], [1, "de", 19, 51, 218, 0], [1, "de", 19, 68, 218, 0], [1, "de", 19, 74, 224, 0], [1, "de", 19, 76, 218, 0], [1, "de", 19, 84, 221, 0], [1, "de", 19, 88, 223, 0], [1, "de", 19, 76, 230, 0], [1, "de", 19, 86, 234, 0], [1, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, 0], [1, "de", 19, 83, 247, 0], [1, "de", 19, 88, 247, 0], [1, "de", 19, 84, 254, 0], [1, "de", 19, 86, 251, 0], [1, "de", 19, 85, 260, 0], [1, "de", 19, 79, 260, 0], [1, "de", 19, 76, 251, 0], [1, "de", 19, 72, 251, 0], [1, "de", 19, 69, 251, 0], [1, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, 0], [1, "de", 19, 87, 271, 0], [1, "de", 19, 82, 277, 0], [1, "de", 19, 87, 284, 0], [1, "de", 19, 87, 237, 0], [1, "de", 19, 88, 179, 0], [1, "de", 19, 50, 191, 0], [1, "de", 19, 52, 221, 0], [1, "de", 19, 34, 234, 0], [1, "de", 19, 27, 233, 0], [1, "de", 19, 37, 293, 0], [1, "de", 29, 13, 181, 0], [1, "de", 29, 8, 180, 0], [1, "de", 30, 13, 186, 0], [1, "de", 31, 24, 183, 0], [1, "de", 32, 33, 185, 0], [1, "de", 32, 37, 182, 0], [1, "de", 29, 45, 183, 0], [1, "de", 30, 48, 183, 0], [1, "de", 30, 58, 181, 0], [1, "de", 30, 66, 188, 0], [1, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, 0], [1, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [1, "de", 31, 82, 203, 0], [1, "de", 32, 80, 201, 0], [1, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [1, "de", 30, 88, 220, 0], [1, "de", 30, 78, 229, 0], [1, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, 0], [1, "de", 29, 67, 217, 0], [1, "de", 30, 72, 208, 0], [1, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, 0], [1, "de", 29, 63, 210, 0], [1, "de", 29, 50, 204, 0], [1, "de", 30, 41, 205, 0], [1, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [1, "de", 30, 20, 201, 0], [1, "de", 29, 10, 203, 0], [1, "de", 29, 14, 196, 0], [1, "de", 29, 24, 187, 0], [1, "de", 29, 28, 223, 0], [1, "de", 29, 32, 212, 0], [1, "de", 30, 28, 214, 0], [1, "de", 31, 24, 218, 0], [1, "de", 29, 36, 219, 0], [1, "de", 29, 37, 217, 0], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [1, "de", 29, 69, 231, 0], [1, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, 0], [1, "de", 30, 58, 261, 0], [1, "de", 30, 73, 276, 0], [1, "de", 30, 64, 276, 0], [1, "de", 30, 82, 285, 0], [1, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, 0], [1, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, 0], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, 0], [1, "de", 29, 28, 296, 0], [1, "de", 29, 18, 292, 0], [1, "de", 29, 24, 284, 0], [1, "de", 30, 10, 295, 0], [1, "de", 30, 10, 286, 0], [1, "de", 30, 15, 279, 0], [1, "de", 30, 15, 269, 0], [1, "de", 30, 21, 259, 0], [1, "de", 30, 12, 256, 0], [1, "de", 30, 31, 245, 0], [1, "de", 30, 12, 240, 0], [1, "de", 30, 28, 235, 0], [1, "de", 30, 13, 226, 0], [1, "de", 30, 39, 231, 0], [1, "de", 30, 61, 226, 0], [1, "r", 96, 262, 0], [1, "r", 97, 262, 0], [1, "r", 98, 262, 0], [1, "r", 97, 270, 0], [1, "r", 97, 271, 0], [1, "r", 97, 272, 0], [1, "r", 97, 273, 0], [1, "r", 97, 274, 0], [1, "r", 97, 275, 0], [1, "r", 97, 276, 0], [1, "r", 97, 277, 0], [1, "r", 97, 278, 0], [1, "r", 98, 270, 0], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [1, "r", 98, 273, 0], [1, "r", 98, 274, 0], [1, "r", 98, 275, 0], [1, "r", 98, 276, 0], [1, "r", 98, 277, 0], [1, "r", 98, 278, 0], [1, "r", 96, 283, 0], [1, "r", 97, 283, 0], [1, "r", 97, 284, 0], [1, "r", 97, 285, 0], [1, "r", 98, 283, 0], [1, "r", 98, 284, 0], [1, "r", 98, 285, 0], [1, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, 0], [1, "r", 96, 274, 0], [1, "r", 96, 275, 0], [1, "r", 96, 276, 0], [1, "r", 96, 277, 0], [1, "r", 96, 278, 0], [1, "r", 44, 248, 0], [1, "de", 16, 94, 290, 0], [1, "de", 16, 94, 252, 0], [1, "de", 16, 94, 228, 0], [1, "de", 17, 94, 200, 0], [1, "r", 95, 282, 1], [1, "r", 95, 281, 1], [1, "r", 94, 281, 1], [1, "r", 90, 281, 1], [1, "r", 91, 282, 1], [1, "r", 89, 281, 1], [1, "r", 85, 276, 1], [1, "r", 85, 277, 1], [1, "r", 86, 278, 1], [1, "p", 0, 85, 279, 1], [1, "r", 86, 279, 1], [1, "r", 87, 280, 1], [1, "r", 96, 281, 0], [1, "r", 97, 281, 0], [1, "r", 98, 281, 0], [1, "r", 98, 282, 0], [1, "r", 97, 282, 0], [1, "r", 96, 282, 0], [1, "r", 68, 261, 1], [1, "fo", 1, 94, 168, 0], [1, "fo", 2, 94, 151, 0], [1, "fo", 1, 94, 138, 0], [1, "fo", 1, 93, 124, 0], [1, "fo", 1, 94, 129, 0], [1, "fo", 1, 93, 113, 0], [1, "fo", 1, 94, 102, 0], [1, "fo", 1, 94, 93, 0], [1, "fo", 1, 93, 90, 0], [1, "fo", 1, 94, 79, 0], [1, "fo", 1, 94, 76, 0], [1, "fo", 1, 93, 70, 0], [1, "fo", 1, 93, 63, 0], [1, "fo", 1, 94, 53, 0], [1, "fo", 1, 93, 10, 0], [1, "fo", 1, 85, 8, 0], [1, "fo", 1, 94, 12, 0], [1, "fo", 1, 66, 13, 0], [1, "fo", 1, 69, 9, 0], [1, "fo", 2, 68, 14, 0], [1, "fo", 2, 66, 25, 0], [1, "fo", 2, 92, 9, 0], [1, "fo", 2, 94, 14, 0], [1, "fo", 2, 87, 9, 0], [1, "fo", 2, 71, 9, 0], [1, "fo", 2, 90, 12, 0], [1, "fo", 2, 91, 13, 0], [1, "fo", 1, 74, 12, 0], [1, "fo", 2, 72, 12, 0], [1, "fo", 2, 75, 13, 0], [1, "fo", 2, 74, 15, 0], [1, "fo", 2, 84, 12, 0], [1, "fo", 2, 81, 14, 0], [1, "fo", 1, 84, 13, 0], [1, "fo", 1, 84, 19, 0], [1, "fo", 1, 11, 9, 0], [1, "fo", 1, 7, 14, 0], [1, "fo", 1, 8, 22, 0], [1, "fo", 1, 7, 34, 0], [1, "fo", 1, 12, 24, 0], [1, "fo", 2, 8, 24, 0], [1, "fo", 2, 9, 21, 0], [1, "fo", 2, 31, 10, 0], [1, "fo", 2, 33, 27, 0], [1, "fo", 2, 9, 34, 0], [1, "fo", 2, 8, 19, 0], [1, "fo", 1, 14, 10, 0], [1, "fo", 2, 13, 9, 0], [1, "fo", 2, 15, 11, 0], [1, "fo", 2, 9, 9, 0], [1, "fo", 2, 9, 10, 0], [1, "fo", 2, 9, 15, 0], [1, "fo", 2, 10, 23, 0], [1, "fo", 2, 34, 29, 0], [1, "fo", 2, 27, 18, 0], [1, "fo", 2, 25, 21, 0], [1, "fo", 2, 20, 18, 0], [1, "fo", 2, 18, 21, 0], [1, "fo", 2, 29, 9, 0], [1, "fo", 2, 13, 14, 0], [1, "fo", 2, 9, 38, 0], [1, "fo", 2, 21, 39, 0], [1, "fo", 2, 84, 26, 0], [1, "fo", 2, 77, 25, 0], [1, "fo", 2, 86, 35, 0], [1, "fo", 1, 70, 35, 0], [1, "fo", 2, 72, 36, 0], [1, "fo", 2, 73, 31, 0], [1, "fo", 2, 89, 39, 0], [1, "fo", 2, 65, 40, 0], [1, "fo", 2, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [1, "de", 22, 25, 266, 0], [1, "de", 22, 17, 206, 0], [1, "de", 19, 8, 184, 0], [1, "de", 19, 22, 183, 0], [1, "de", 19, 35, 188, 0], [1, "de", 19, 36, 192, 0], [1, "de", 19, 50, 277, 0], [1, "de", 19, 35, 279, 0], [1, "t", 4, 7, 178, 0], [1, "t", 1, 7, 179, 0], [1, "t", 3, 7, 180, 0], [1, "t", 2, 7, 181, 0], [1, "t", 5, 7, 182, 0], [1, "t", 4, 7, 183, 0], [1, "t", 3, 7, 184, 0], [1, "t", 4, 7, 185, 0], [1, "t", 2, 7, 186, 0], [1, "t", 1, 7, 187, 0], [1, "t", 4, 7, 188, 0], [1, "t", 3, 7, 189, 0], [1, "t", 5, 7, 190, 0], [1, "t", 1, 7, 191, 0], [1, "t", 3, 7, 192, 0], [1, "t", 4, 7, 193, 0], [1, "t", 3, 7, 194, 0], [1, "t", 5, 7, 195, 0], [1, "t", 2, 7, 196, 0], [1, "t", 4, 7, 197, 0], [1, "b", 2, 7, 198, 0], [1, "t", 4, 7, 199, 0], [1, "t", 2, 7, 200, 0], [1, "t", 5, 7, 201, 0], [1, "t", 2, 7, 202, 0], [1, "t", 4, 7, 203, 0], [1, "t", 2, 7, 204, 0], [1, "t", 5, 7, 205, 0], [1, "t", 2, 7, 206, 0], [1, "t", 1, 7, 207, 0], [1, "t", 4, 7, 208, 0], [1, "t", 3, 7, 209, 0], [1, "t", 1, 7, 210, 0], [1, "b", 0, 7, 211, 0], [1, "t", 3, 7, 212, 0], [1, "t", 4, 7, 213, 0], [1, "t", 3, 7, 214, 0], [1, "t", 5, 7, 215, 0], [1, "t", 5, 7, 216, 0], [1, "t", 3, 7, 217, 0], [1, "t", 1, 7, 218, 0], [1, "t", 4, 7, 219, 0], [1, "b", 2, 7, 220, 0], [1, "t", 1, 7, 221, 0], [1, "t", 2, 7, 222, 0], [1, "t", 4, 7, 223, 0], [1, "t", 3, 7, 224, 0], [1, "t", 1, 7, 225, 0], [1, "t", 4, 7, 226, 0], [1, "t", 2, 7, 227, 0], [1, "t", 5, 7, 228, 0], [1, "t", 3, 7, 229, 0], [1, "t", 1, 7, 230, 0], [1, "t", 4, 7, 231, 0], [1, "b", 2, 7, 232, 0], [1, "t", 5, 7, 233, 0], [1, "t", 1, 7, 234, 0], [1, "t", 3, 7, 235, 0], [1, "t", 4, 7, 236, 0], [1, "t", 2, 7, 237, 0], [1, "t", 5, 7, 238, 0], [1, "b", 3, 7, 239, 0], [1, "t", 2, 7, 240, 0], [1, "t", 1, 7, 241, 0], [1, "t", 2, 7, 242, 0], [1, "t", 4, 7, 243, 0], [1, "t", 3, 7, 244, 0], [1, "t", 4, 7, 245, 0], [1, "t", 1, 7, 246, 0], [1, "b", 0, 7, 247, 0], [1, "t", 3, 7, 248, 0], [1, "t", 5, 7, 249, 0], [1, "t", 2, 7, 250, 0], [1, "t", 1, 7, 251, 0], [1, "t", 4, 7, 252, 0], [1, "t", 3, 7, 253, 0], [1, "t", 5, 7, 254, 0], [1, "t", 1, 7, 255, 0], [1, "t", 4, 7, 256, 0], [1, "t", 1, 7, 257, 0], [1, "t", 2, 7, 258, 0], [1, "t", 5, 7, 260, 0], [1, "t", 3, 7, 259, 0], [1, "t", 1, 7, 261, 0], [1, "t", 3, 7, 262, 0], [1, "t", 4, 7, 263, 0], [1, "t", 1, 7, 264, 0], [1, "t", 2, 7, 265, 0], [1, "t", 5, 7, 266, 0], [1, "t", 2, 7, 267, 0], [1, "t", 2, 7, 269, 0], [1, "b", 2, 7, 268, 0], [1, "t", 4, 7, 270, 0], [1, "t", 1, 7, 271, 0], [1, "t", 5, 7, 272, 0], [1, "b", 2, 7, 273, 0], [1, "t", 4, 7, 274, 0], [1, "t", 2, 7, 275, 0], [1, "t", 5, 7, 276, 0], [1, "t", 5, 7, 277, 0], [1, "t", 2, 7, 278, 0], [1, "t", 1, 7, 279, 0], [1, "t", 4, 7, 280, 0], [1, "b", 1, 7, 281, 0], [1, "t", 3, 7, 282, 0], [1, "t", 4, 7, 283, 0], [1, "t", 1, 7, 284, 0], [1, "t", 3, 7, 285, 0], [1, "t", 5, 7, 286, 0], [1, "t", 4, 7, 288, 0], [1, "t", 2, 7, 287, 0], [1, "b", 0, 7, 289, 0], [1, "t", 4, 7, 290, 0], [1, "t", 2, 7, 291, 0], [1, "t", 5, 7, 292, 0], [1, "t", 3, 7, 293, 0], [1, "t", 1, 7, 294, 0], [1, "t", 4, 7, 295, 0], [1, "t", 3, 7, 296, 0], [1, "t", 1, 7, 297, 0], [1, "t", 4, 7, 298, 0], [1, "t", 2, 7, 299, 0], [1, "b", 0, 7, 300, 0], [1, "t", 2, 7, 301, 0], [1, "r", 196, 271, 0], [1, "r", 199, 274, 0], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [1, "r", 189, 207, 0], [1, "r", 192, 209, 0], [1, "r", 198, 271, 0], [1, "r", 197, 271, 0], [1, "r", 198, 272, 0], [1, "r", 197, 272, 0], [1, "r", 196, 272, 0], [1, "r", 195, 272, 0], [1, "r", 199, 272, 0], [1, "r", 199, 273, 0], [1, "r", 198, 273, 0], [1, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [1, "r", 197, 274, 0], [1, "r", 195, 273, 0], [1, "r", 196, 274, 0], [1, "r", 198, 275, 0], [1, "r", 197, 275, 0], [1, "r", 200, 274, 0], [1, "r", 200, 273, 0], [1, "r", 199, 275, 0], [1, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, 0], [1, "plm", 0, 199, 268, 0], [1, "plm", 0, 193, 277, 0], [1, "plm", 1, 199, 276, 0], [1, "s", 1, 200, 275, 1], [1, "s", 1, 194, 272, 1], [1, "s", 2, 193, 270, 1], [1, "g", 2, 193, 273, 1], [1, "g", 2, 201, 267, 1], [1, "m", 2, 220, 298, 1], [1, "m", 1, 219, 292, 1], [1, "m", 1, 214, 297, 1], [1, "r", 168, 238, 0], [1, "r", 169, 238, 0], [1, "r", 170, 238, 0], [1, "r", 171, 239, 0], [1, "r", 170, 239, 0], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, 0], [1, "r", 166, 239, 0], [1, "r", 166, 240, 0], [1, "r", 167, 240, 0], [1, "r", 168, 240, 0], [1, "r", 169, 240, 0], [1, "r", 170, 240, 0], [1, "r", 168, 241, 0], [1, "r", 169, 241, 0], [1, "r", 170, 241, 0], [1, "r", 171, 241, 0], [1, "plm", 2, 171, 238, 0], [1, "plm", 1, 166, 238, 0], [1, "plm", 0, 167, 237, 0], [1, "plm", 0, 171, 242, 0], [1, "plm", 0, 165, 243, 0], [1, "plm", 0, 171, 235, 0], [1, "plm", 0, 174, 241, 0], [1, "s", 1, 165, 239, 1], [1, "s", 1, 172, 241, 1], [1, "s", 0, 170, 237, 1], [1, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", 2, 162, 241, 1], [1, "s", 2, 170, 246, 1], [1, "s", 2, 167, 235, 1], [1, "s", 2, 176, 243, 1], [1, "r", 190, 207, 0], [1, "r", 191, 207, 0], [1, "r", 192, 208, 0], [1, "r", 191, 208, 0], [1, "r", 190, 208, 0], [1, "r", 189, 208, 0], [1, "r", 188, 208, 0], [1, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [1, "r", 188, 209, 0], [1, "r", 190, 210, 0], [1, "r", 191, 210, 0], [1, "r", 192, 210, 0], [1, "plm", 2, 189, 210, 0], [1, "plm", 2, 192, 205, 0], [1, "plm", 1, 192, 207, 0], [1, "plm", 0, 193, 210, 0], [1, "plm", 0, 187, 208, 0], [1, "plm", 0, 197, 206, 0], [1, "plm", 0, 191, 213, 0], [1, "plm", 0, 190, 204, 0], [1, "s", 1, 188, 207, 1], [1, "s", 1, 190, 211, 1], [1, "s", 2, 188, 213, 1], [1, "s", 2, 187, 205, 1], [1, "s", 0, 194, 210, 1], [1, "s", 0, 198, 207, 1], [1, "s", 1, 193, 204, 1], [1, "s", 1, 193, 213, 1], [1, "s", 2, 198, 212, 1], [1, "s", 2, 182, 208, 1], [1, "s", 1, 204, 271, 1], [1, "s", 0, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", 0, 195, 265, 1], [1, "s", 2, 196, 264, 1], [1, "s", 2, 186, 274, 1], [1, "s", 2, 197, 280, 1], [1, "s", 0, 217, 282, 1], [1, "s", 1, 214, 285, 1], [1, "s", 1, 214, 274, 1], [1, "s", 1, 203, 282, 1], [1, "s", 1, 205, 290, 1], [1, "s", 0, 207, 292, 1], [1, "s", 0, 197, 297, 1], [1, "s", 0, 184, 287, 1], [1, "s", 2, 213, 289, 1], [1, "s", 2, 196, 294, 1], [1, "s", 2, 187, 286, 1], [1, "s", 1, 192, 289, 1], [1, "s", 1, 189, 299, 1], [1, "s", 0, 213, 273, 1], [1, "g", 2, 212, 278, 1], [1, "g", 1, 200, 288, 1], [1, "g", 2, 215, 265, 1], [1, "g", 2, 183, 281, 1], [1, "s", 0, 178, 295, 1], [1, "s", 0, 167, 281, 1], [1, "s", 0, 175, 263, 1], [1, "s", 1, 176, 293, 1], [1, "s", 1, 163, 285, 1], [1, "s", 1, 177, 266, 1], [1, "s", 1, 161, 272, 1], [1, "s", 2, 185, 261, 1], [1, "c", 0, 217, 270, 1], [1, "c", 0, 220, 278, 1], [1, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, 1], [1, "c", 0, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, 1], [1, "c", 0, 208, 283, 1], [1, "c", 0, 197, 283, 1], [1, "c", 0, 190, 289, 1], [1, "c", 0, 183, 296, 1], [1, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, 1], [1, "c", 0, 208, 265, 1], [1, "c", 0, 169, 292, 1], [1, "s", 1, 158, 294, 1], [1, "s", 0, 151, 297, 1], [1, "s", 0, 147, 288, 1], [1, "c", 0, 150, 289, 1], [1, "c", 0, 160, 282, 1], [1, "c", 0, 146, 274, 1], [1, "c", 0, 167, 264, 1], [1, "c", 0, 165, 267, 1], [1, "g", 0, 189, 257, 1], [1, "g", 1, 197, 248, 1], [1, "g", 2, 170, 255, 1], [1, "g", 2, 212, 234, 1], [1, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, 1], [1, "g", 1, 210, 214, 1], [1, "s", 1, 153, 257, 1], [1, "s", 0, 158, 255, 1], [1, "s", 0, 184, 248, 1], [1, "s", 0, 212, 254, 1], [1, "s", 1, 203, 249, 1], [1, "s", 2, 204, 252, 1], [1, "s", 2, 187, 248, 1], [1, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, 1], [1, "s", 0, 181, 228, 1], [1, "s", 1, 199, 227, 1], [1, "s", 1, 208, 238, 1], [1, "s", 1, 179, 222, 1], [1, "s", 1, 213, 223, 1], [1, "s", 2, 182, 222, 1], [1, "s", 2, 211, 226, 1], [1, "s", 2, 214, 214, 1], [1, "s", 2, 201, 216, 1], [1, "s", 2, 215, 192, 1], [1, "s", 1, 210, 198, 1], [1, "s", 1, 198, 196, 1], [1, "s", 2, 208, 199, 1], [1, "s", 2, 187, 192, 1], [1, "s", 1, 179, 198, 1], [1, "s", 2, 177, 197, 1], [1, "s", 0, 164, 197, 1], [1, "s", 1, 159, 193, 1], [1, "s", 1, 149, 206, 1], [1, "s", 1, 164, 209, 1], [1, "s", 2, 165, 210, 1], [1, "s", 2, 161, 191, 1], [1, "s", 1, 162, 224, 1], [1, "s", 0, 150, 236, 1], [1, "s", 1, 149, 239, 1], [1, "s", 2, 153, 236, 1], [1, "s", 2, 160, 223, 1], [1, "s", 2, 151, 207, 1], [1, "s", 2, 147, 220, 1], [1, "s", 2, 145, 265, 1], [1, "s", 2, 145, 285, 1], [1, "c", 0, 152, 266, 1], [1, "c", 0, 185, 271, 1], [1, "c", 0, 210, 254, 1], [1, "c", 0, 209, 256, 1], [1, "c", 0, 198, 254, 1], [1, "c", 0, 213, 246, 1], [1, "c", 0, 216, 237, 1], [1, "c", 0, 204, 240, 1], [1, "c", 0, 196, 234, 1], [1, "c", 0, 188, 238, 1], [1, "c", 0, 182, 245, 1], [1, "c", 0, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", 0, 158, 233, 1], [1, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", 0, 157, 214, 1], [1, "c", 0, 167, 219, 1], [1, "c", 0, 171, 208, 1], [1, "c", 0, 179, 219, 1], [1, "c", 0, 176, 229, 1], [1, "c", 0, 195, 221, 1], [1, "c", 0, 207, 222, 1], [1, "c", 0, 214, 207, 1], [1, "c", 0, 205, 210, 1], [1, "c", 0, 204, 196, 1], [1, "c", 0, 214, 196, 1], [1, "c", 0, 190, 199, 1], [1, "c", 0, 184, 194, 1], [1, "c", 0, 172, 199, 1], [1, "c", 0, 161, 204, 1], [1, "c", 0, 157, 196, 1], [1, "c", 0, 149, 194, 1], [1, "c", 0, 147, 208, 1], [1, "c", 0, 207, 274, 1], [1, "c", 0, 217, 258, 1], [1, "c", 0, 201, 260, 1], [1, "c", 0, 178, 276, 1], [1, "c", 0, 187, 265, 1], [1, "s", 1, 204, 260, 1], [1, "s", 1, 216, 260, 1], [1, "s", 1, 187, 255, 1], [1, "s", 2, 189, 254, 1], [1, "s", 2, 212, 257, 1], [1, "s", 2, 182, 286, 1], [1, "s", 2, 169, 280, 1], [1, "s", 2, 217, 273, 1], [1, "s", 2, 215, 282, 1], [1, "s", 2, 172, 263, 1], [1, "s", 2, 176, 267, 1], [1, "s", 2, 215, 251, 1], [1, "fod", 1, 221, 282, 0], [1, "fod", 1, 222, 284, 0], [1, "fod", 1, 221, 290, 0], [1, "fod", 1, 222, 294, 0], [1, "fod", 1, 221, 297, 0], [1, "fod", 1, 223, 298, 0], [1, "fod", 1, 222, 300, 0], [1, "fod", 1, 218, 301, 0], [1, "fod", 1, 217, 299, 0], [1, "fod", 1, 215, 301, 0], [1, "fod", 1, 212, 300, 0], [1, "fod", 1, 206, 300, 0], [1, "fod", 1, 209, 301, 0], [1, "fod", 1, 204, 299, 0], [1, "fod", 1, 202, 301, 0], [1, "fod", 1, 199, 301, 0], [1, "fod", 1, 222, 282, 0], [1, "fod", 1, 207, 301, 0], [1, "fod", 1, 197, 301, 0], [1, "fod", 1, 215, 291, 0], [1, "fod", 1, 216, 286, 0], [1, "fod", 1, 214, 292, 0], [1, "fod", 1, 210, 289, 0], [1, "fod", 1, 208, 294, 0], [1, "fod", 1, 210, 298, 0], [1, "fod", 1, 212, 281, 0], [1, "fod", 1, 219, 278, 0], [1, "fod", 1, 219, 282, 0], [1, "fod", 1, 205, 286, 0], [1, "fod", 1, 202, 293, 0], [1, "fod", 1, 198, 295, 0], [1, "fod", 2, 213, 282, 0], [1, "fod", 2, 213, 291, 0], [1, "fod", 2, 216, 289, 0], [1, "fod", 2, 219, 289, 0], [1, "fod", 2, 218, 285, 0], [1, "fod", 2, 220, 283, 0], [1, "fod", 2, 211, 283, 0], [1, "fod", 2, 215, 281, 0], [1, "fod", 2, 217, 279, 0], [1, "fod", 2, 208, 290, 0], [1, "fod", 2, 211, 296, 0], [1, "fod", 2, 215, 294, 0], [1, "fod", 2, 212, 298, 0], [1, "fod", 2, 203, 294, 0], [1, "fod", 2, 204, 288, 0], [1, "fod", 2, 200, 294, 0], [1, "fod", 2, 198, 297, 0], [1, "fod", 2, 202, 299, 0], [1, "fod", 2, 200, 299, 0], [1, "fod", 2, 220, 300, 0], [1, "fod", 2, 220, 295, 0], [1, "fod", 2, 220, 292, 0], [1, "fod", 2, 219, 287, 0], [1, "fod", 2, 211, 288, 0], [1, "fod", 2, 213, 287, 0], [1, "fod", 2, 211, 289, 0], [1, "fod", 2, 212, 290, 0], [1, "fod", 2, 195, 296, 0], [1, "fod", 2, 196, 299, 0], [1, "fod", 2, 194, 300, 0], [1, "fod", 2, 195, 300, 0], [1, "fod", 2, 213, 279, 0], [1, "fod", 2, 211, 279, 0], [1, "fod", 0, 218, 290, 0], [1, "fod", 0, 212, 294, 0], [1, "fod", 1, 213, 295, 0], [1, "fod", 1, 217, 292, 0], [1, "fod", 1, 218, 288, 0], [1, "fod", 1, 210, 295, 0], [1, "fod", 1, 213, 292, 0], [1, "fod", 1, 212, 289, 0], [1, "fod", 1, 205, 295, 0], [1, "fod", 2, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, 0], [1, "fod", 2, 209, 299, 0], [1, "fod", 2, 211, 291, 0], [1, "fod", 1, 203, 275, 0], [1, "fod", 1, 204, 272, 0], [1, "fod", 2, 205, 273, 0], [1, "fod", 2, 204, 276, 0], [1, "fod", 2, 202, 276, 0], [1, "fod", 2, 199, 277, 0], [1, "fod", 2, 202, 273, 0], [1, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [1, "fod", 2, 194, 277, 0], [1, "fod", 1, 192, 274, 0], [1, "fod", 1, 194, 267, 0], [1, "fod", 2, 194, 265, 0], [1, "fod", 2, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [1, "fod", 2, 195, 274, 0], [1, "fod", 2, 200, 271, 0], [1, "fod", 1, 168, 243, 0], [1, "fod", 1, 175, 240, 0], [1, "fod", 1, 169, 234, 0], [1, "fod", 1, 162, 235, 0], [1, "fod", 2, 169, 236, 0], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, 0], [1, "fod", 2, 173, 241, 0], [1, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, 0], [1, "fod", 2, 169, 244, 0], [1, "fod", 2, 166, 243, 0], [1, "fod", 2, 162, 236, 0], [1, "fod", 2, 164, 235, 0], [1, "fod", 2, 162, 233, 0], [1, "fod", 2, 163, 236, 0], [1, "fod", 2, 174, 242, 0], [1, "fod", 2, 171, 243, 0], [1, "fod", 1, 194, 206, 0], [1, "fod", 1, 190, 214, 0], [1, "fod", 1, 186, 206, 0], [1, "fod", 1, 197, 207, 0], [1, "fod", 2, 196, 208, 0], [1, "fod", 2, 198, 206, 0], [1, "fod", 2, 198, 208, 0], [1, "fod", 2, 194, 204, 0], [1, "fod", 2, 187, 206, 0], [1, "fod", 2, 186, 204, 0], [1, "fod", 2, 189, 214, 0], [1, "fod", 2, 189, 213, 0], [1, "fod", 2, 193, 215, 0], [1, "fod", 2, 194, 214, 0], [1, "fod", 2, 187, 215, 0], [1, "fod", 2, 193, 209, 0], [1, "fod", 2, 189, 211, 0], [1, "fod", 2, 187, 209, 0], [1, "fod", 2, 187, 207, 0], [1, "fod", 2, 191, 205, 0], [1, "fod", 2, 189, 203, 0], [1, "cs", 2, 224, 176, 1], [1, "cs", 0, 224, 177, 1], [1, "cs", 3, 224, 178, 1], [1, "cs", 2, 224, 179, 1], [1, "cs", 1, 224, 180, 1], [1, "cs", 2, 224, 181, 1], [1, "cs", 0, 224, 182, 1], [1, "cs", 2, 224, 183, 1], [1, "cs", 0, 224, 184, 1], [1, "cs", 3, 224, 185, 1], [1, "cs", 2, 224, 186, 1], [1, "cs", 0, 224, 187, 1], [1, "cs", 2, 224, 188, 1], [1, "cs", 0, 224, 189, 1], [1, "cs", 1, 224, 190, 1], [1, "cs", 2, 224, 191, 1], [1, "cs", 0, 224, 192, 1], [1, "cs", 2, 224, 193, 1], [1, "cs", 2, 224, 194, 1], [1, "cs", 1, 224, 195, 1], [1, "cs", 2, 224, 196, 1], [1, "cs", 0, 224, 197, 1], [1, "cs", 3, 224, 198, 1], [1, "cs", 2, 224, 199, 1], [1, "cs", 1, 224, 200, 1], [1, "cs", 2, 224, 201, 1], [1, "cs", 3, 224, 202, 1], [1, "cs", 0, 224, 203, 1], [1, "cs", 1, 224, 204, 1], [1, "cs", 2, 224, 205, 1], [1, "cs", 0, 224, 206, 1], [1, "cs", 1, 224, 207, 1], [1, "cs", 3, 224, 208, 1], [1, "cs", 2, 224, 209, 1], [1, "cs", 2, 224, 210, 1], [1, "cs", 0, 223, 211, 1], [1, "cs", 1, 224, 211, 1], [1, "cs", 2, 224, 212, 1], [1, "cs", 2, 224, 213, 1], [1, "cs", 1, 224, 214, 1], [1, "cs", 3, 224, 215, 1], [1, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, 1], [1, "cs", 2, 224, 218, 1], [1, "cs", 3, 224, 219, 1], [1, "cs", 0, 223, 215, 1], [1, "cs", 2, 223, 214, 1], [1, "cs", 2, 223, 212, 1], [1, "cs", 2, 223, 216, 1], [1, "cs", 3, 223, 217, 1], [1, "cs", 0, 223, 218, 1], [1, "cs", 0, 224, 220, 1], [1, "cs", 0, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [1, "cs", 0, 223, 205, 1], [1, "cs", 2, 224, 221, 1], [1, "cs", 2, 223, 219, 1], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [1, "cs", 2, 223, 210, 1], [1, "cs", 1, 223, 178, 1], [1, "cs", 3, 223, 179, 1], [1, "cs", 3, 223, 181, 1], [1, "cs", 3, 223, 182, 1], [1, "cs", 1, 223, 185, 1], [1, "cs", 2, 223, 184, 1], [1, "cs", 2, 223, 186, 1], [1, "cs", 0, 223, 180, 1], [1, "cs", 0, 223, 183, 1], [1, "cs", 2, 223, 187, 1], [1, "cs", 1, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [1, "cs", 2, 223, 190, 1], [1, "cs", 3, 223, 191, 1], [1, "cs", 1, 223, 192, 1], [1, "cs", 2, 223, 193, 1], [1, "cs", 2, 223, 194, 1], [1, "cs", 3, 223, 195, 1], [1, "cs", 1, 223, 196, 1], [1, "cs", 2, 223, 197, 1], [1, "cs", 2, 223, 199, 1], [1, "cs", 2, 223, 198, 1], [1, "cs", 0, 223, 200, 1], [1, "cs", 2, 223, 201, 1], [1, "cs", 0, 223, 202, 1], [1, "cs", 3, 223, 203, 1], [1, "cs", 3, 223, 204, 1], [1, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, 1], [1, "cs", 3, 223, 208, 1], [1, "cs", 2, 223, 221, 1], [1, "cs", 2, 223, 222, 1], [1, "cs", 0, 223, 224, 1], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, 1], [1, "cs", 0, 223, 234, 1], [1, "cs", 2, 223, 223, 1], [1, "cs", 2, 224, 223, 1], [1, "cs", 2, 224, 224, 1], [1, "cs", 2, 224, 225, 1], [1, "cs", 1, 223, 226, 1], [1, "cs", 1, 224, 231, 1], [1, "cs", 1, 223, 232, 1], [1, "cs", 3, 223, 225, 1], [1, "cs", 3, 224, 226, 1], [1, "cs", 3, 223, 227, 1], [1, "cs", 3, 224, 227, 1], [1, "cs", 3, 223, 229, 1], [1, "cs", 3, 223, 228, 1], [1, "cs", 3, 224, 229, 1], [1, "cs", 3, 223, 230, 1], [1, "cs", 3, 223, 231, 1], [1, "cs", 3, 224, 232, 1], [1, "cs", 3, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [1, "cs", 3, 224, 234, 1], [1, "cs", 3, 224, 235, 1], [1, "cs", 3, 223, 235, 1], [1, "cs", 1, 224, 236, 1], [1, "cs", 2, 223, 236, 1], [1, "cs", 2, 223, 237, 1], [1, "cs", 3, 224, 237, 1], [1, "cs", 3, 224, 238, 1], [1, "cs", 0, 224, 239, 1], [1, "cs", 1, 223, 241, 1], [1, "cs", 0, 224, 243, 1], [1, "cs", 0, 223, 245, 1], [1, "cs", 0, 224, 247, 1], [1, "cs", 2, 223, 240, 1], [1, "cs", 2, 223, 239, 1], [1, "cs", 2, 224, 240, 1], [1, "cs", 2, 224, 241, 1], [1, "cs", 2, 224, 242, 1], [1, "cs", 2, 223, 242, 1], [1, "cs", 2, 223, 243, 1], [1, "cs", 2, 223, 244, 1], [1, "cs", 2, 224, 244, 1], [1, "cs", 2, 224, 245, 1], [1, "cs", 2, 224, 246, 1], [1, "cs", 3, 223, 238, 1], [1, "cs", 3, 223, 246, 1], [1, "cs", 2, 223, 247, 1], [1, "cs", 1, 223, 249, 1], [1, "cs", 1, 224, 253, 1], [1, "cs", 1, 223, 256, 1], [1, "cs", 0, 223, 254, 1], [1, "cs", 0, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [1, "cs", 3, 223, 250, 1], [1, "cs", 3, 223, 252, 1], [1, "cs", 3, 223, 255, 1], [1, "cs", 3, 223, 257, 1], [1, "cs", 2, 224, 248, 1], [1, "cs", 2, 224, 249, 1], [1, "cs", 2, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [1, "cs", 2, 224, 252, 1], [1, "cs", 2, 223, 253, 1], [1, "cs", 2, 224, 254, 1], [1, "cs", 2, 224, 255, 1], [1, "cs", 2, 224, 256, 1], [1, "cs", 2, 224, 257, 1], [1, "cs", 0, 224, 258, 1], [1, "cs", 0, 223, 261, 1], [1, "cs", 0, 224, 263, 1], [1, "cs", 0, 224, 266, 1], [1, "cs", 0, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [1, "cs", 0, 223, 275, 1], [1, "cs", 1, 223, 259, 1], [1, "cs", 1, 223, 264, 1], [1, "cs", 1, 223, 268, 1], [1, "cs", 1, 224, 274, 1], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, 1], [1, "cs", 2, 223, 263, 1], [1, "cs", 2, 223, 265, 1], [1, "cs", 2, 223, 267, 1], [1, "cs", 2, 223, 271, 1], [1, "cs", 2, 223, 273, 1], [1, "cs", 3, 223, 262, 1], [1, "cs", 3, 223, 266, 1], [1, "cs", 3, 223, 269, 1], [1, "cs", 3, 223, 272, 1], [1, "cs", 3, 223, 274, 1], [1, "cs", 3, 224, 275, 1], [1, "cs", 3, 224, 273, 1], [1, "cs", 3, 224, 271, 1], [1, "cs", 3, 224, 270, 1], [1, "cs", 3, 224, 269, 1], [1, "cs", 3, 224, 268, 1], [1, "cs", 3, 224, 267, 1], [1, "cs", 3, 224, 265, 1], [1, "cs", 3, 224, 264, 1], [1, "cs", 3, 224, 262, 1], [1, "cs", 3, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [1, "cs", 3, 224, 259, 1], [1, "cs", 2, 223, 276, 1], [1, "cs", 1, 224, 276, 1], [1, "cs", 1, 224, 280, 1], [1, "cs", 1, 223, 281, 1], [1, "cs", 1, 224, 286, 1], [1, "cs", 0, 223, 280, 1], [1, "cs", 0, 223, 284, 1], [1, "cs", 0, 224, 288, 1], [1, "cs", 0, 224, 279, 1], [1, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, 1], [1, "cs", 2, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [1, "cs", 2, 224, 282, 1], [1, "cs", 2, 224, 284, 1], [1, "cs", 2, 224, 285, 1], [1, "cs", 2, 224, 287, 1], [1, "cs", 2, 223, 287, 1], [1, "cs", 2, 223, 285, 1], [1, "cs", 2, 223, 283, 1], [1, "cs", 2, 223, 279, 1], [1, "cs", 3, 223, 278, 1], [1, "cs", 3, 223, 282, 1], [1, "cs", 3, 223, 286, 1], [1, "cs", 3, 223, 289, 1], [1, "cs", 3, 224, 289, 1], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [1, "cs", 1, 223, 290, 1], [1, "cs", 0, 224, 292, 1], [1, "cs", 0, 223, 294, 1], [1, "cs", 0, 224, 297, 1], [1, "cs", 0, 223, 299, 1], [1, "cs", 2, 223, 291, 1], [1, "cs", 2, 224, 291, 1], [1, "cs", 2, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [1, "cs", 2, 224, 293, 1], [1, "cs", 2, 224, 294, 1], [1, "cs", 1, 224, 295, 1], [1, "cs", 2, 223, 295, 1], [1, "cs", 2, 223, 296, 1], [1, "cs", 2, 224, 296, 1], [1, "cs", 2, 223, 297, 1], [1, "cs", 2, 223, 298, 1], [1, "cs", 2, 224, 298, 1], [1, "cs", 2, 224, 299, 1], [1, "cs", 2, 223, 300, 1], [1, "cs", 1, 224, 300, 1], [1, "cs", 0, 223, 301, 1], [1, "cs", 0, 224, 302, 1], [1, "cs", 0, 224, 304, 1], [1, "cs", 3, 224, 301, 1], [1, "cs", 3, 224, 303, 1], [1, "cs", 0, 221, 303, 1], [1, "cs", 0, 219, 304, 1], [1, "cs", 1, 222, 304, 1], [1, "cs", 1, 222, 302, 1], [1, "cs", 2, 223, 302, 1], [1, "cs", 2, 223, 303, 1], [1, "cs", 2, 222, 303, 1], [1, "cs", 2, 223, 304, 1], [1, "cs", 2, 221, 304, 1], [1, "cs", 2, 220, 304, 1], [1, "cs", 2, 220, 303, 1], [1, "cs", 2, 220, 302, 1], [1, "cs", 2, 221, 302, 1], [1, "cs", 2, 219, 303, 1], [1, "cs", 0, 217, 302, 1], [1, "cs", 0, 215, 304, 1], [1, "cs", 0, 214, 302, 1], [1, "cs", 1, 218, 302, 1], [1, "cs", 1, 217, 304, 1], [1, "cs", 1, 215, 302, 1], [1, "cs", 2, 219, 302, 1], [1, "cs", 2, 218, 303, 1], [1, "cs", 2, 218, 304, 1], [1, "cs", 2, 217, 303, 1], [1, "cs", 2, 216, 304, 1], [1, "cs", 2, 215, 303, 1], [1, "cs", 2, 216, 303, 1], [1, "cs", 2, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [1, "cs", 2, 214, 304, 1], [1, "cs", 0, 212, 302, 1], [1, "cs", 0, 210, 303, 1], [1, "cs", 0, 212, 304, 1], [1, "cs", 0, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [1, "cs", 1, 208, 303, 1], [1, "cs", 2, 213, 302, 1], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, 1], [1, "cs", 2, 212, 303, 1], [1, "cs", 2, 211, 304, 1], [1, "cs", 2, 211, 303, 1], [1, "cs", 2, 211, 302, 1], [1, "cs", 2, 209, 302, 1], [1, "cs", 2, 209, 303, 1], [1, "cs", 2, 209, 304, 1], [1, "cs", 2, 210, 304, 1], [1, "cs", 2, 208, 302, 1], [1, "cs", 0, 206, 303, 1], [1, "cs", 0, 203, 304, 1], [1, "cs", 0, 200, 303, 1], [1, "cs", 0, 199, 304, 1], [1, "cs", 0, 195, 304, 1], [1, "cs", 0, 191, 303, 1], [1, "cs", 0, 193, 304, 1], [1, "cs", 0, 189, 304, 1], [1, "cs", 1, 204, 303, 1], [1, "cs", 0, 197, 302, 1], [1, "cs", 0, 202, 302, 1], [1, "cs", 0, 188, 302, 1], [1, "cs", 0, 194, 302, 1], [1, "cs", 1, 197, 303, 1], [1, "cs", 1, 201, 304, 1], [1, "cs", 1, 192, 302, 1], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [1, "cs", 1, 188, 304, 1], [1, "cs", 2, 207, 302, 1], [1, "cs", 2, 207, 303, 1], [1, "cs", 2, 207, 304, 1], [1, "cs", 2, 206, 304, 1], [1, "cs", 2, 206, 302, 1], [1, "cs", 2, 205, 303, 1], [1, "cs", 2, 204, 304, 1], [1, "cs", 2, 205, 304, 1], [1, "cs", 2, 204, 302, 1], [1, "cs", 2, 203, 302, 1], [1, "cs", 2, 203, 303, 1], [1, "cs", 2, 202, 303, 1], [1, "cs", 2, 201, 303, 1], [1, "cs", 2, 201, 302, 1], [1, "cs", 2, 200, 302, 1], [1, "cs", 2, 199, 302, 1], [1, "cs", 2, 198, 303, 1], [1, "cs", 2, 198, 302, 1], [1, "cs", 2, 199, 303, 1], [1, "cs", 2, 200, 304, 1], [1, "cs", 2, 202, 304, 1], [1, "cs", 2, 197, 304, 1], [1, "cs", 2, 198, 304, 1], [1, "cs", 2, 196, 304, 1], [1, "cs", 2, 196, 303, 1], [1, "cs", 2, 196, 302, 1], [1, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", 2, 194, 303, 1], [1, "cs", 2, 194, 304, 1], [1, "cs", 2, 193, 303, 1], [1, "cs", 2, 193, 302, 1], [1, "cs", 2, 192, 303, 1], [1, "cs", 2, 192, 304, 1], [1, "cs", 2, 191, 304, 1], [1, "cs", 2, 190, 304, 1], [1, "cs", 2, 190, 303, 1], [1, "cs", 2, 189, 302, 1], [1, "cs", 2, 190, 302, 1], [1, "cs", 2, 191, 302, 1], [1, "cs", 2, 188, 303, 1], [1, "cs", 0, 186, 303, 1], [1, "cs", 0, 183, 304, 1], [1, "cs", 0, 184, 302, 1], [1, "cs", 0, 181, 302, 1], [1, "cs", 0, 176, 302, 1], [1, "cs", 0, 178, 303, 1], [1, "cs", 0, 173, 304, 1], [1, "cs", 0, 170, 303, 1], [1, "cs", 0, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", 1, 178, 304, 1], [1, "cs", 1, 175, 304, 1], [1, "cs", 1, 173, 302, 1], [1, "cs", 1, 185, 304, 1], [1, "cs", 1, 169, 304, 1], [1, "cs", 3, 187, 304, 1], [1, "cs", 3, 186, 304, 1], [1, "cs", 3, 187, 303, 1], [1, "cs", 3, 187, 302, 1], [1, "cs", 3, 186, 302, 1], [1, "cs", 3, 185, 302, 1], [1, "cs", 3, 185, 303, 1], [1, "cs", 3, 184, 303, 1], [1, "cs", 3, 183, 303, 1], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, 1], [1, "cs", 3, 184, 304, 1], [1, "cs", 3, 182, 304, 1], [1, "cs", 3, 181, 304, 1], [1, "cs", 3, 179, 304, 1], [1, "cs", 3, 180, 304, 1], [1, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, 1], [1, "cs", 3, 179, 303, 1], [1, "cs", 3, 180, 302, 1], [1, "cs", 3, 179, 302, 1], [1, "cs", 3, 178, 302, 1], [1, "cs", 3, 177, 302, 1], [1, "cs", 3, 177, 304, 1], [1, "cs", 3, 177, 303, 1], [1, "cs", 3, 176, 303, 1], [1, "cs", 3, 176, 304, 1], [1, "cs", 3, 174, 304, 1], [1, "cs", 3, 175, 303, 1], [1, "cs", 3, 174, 303, 1], [1, "cs", 3, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [1, "cs", 3, 171, 303, 1], [1, "cs", 3, 170, 304, 1], [1, "cs", 3, 171, 304, 1], [1, "cs", 3, 172, 304, 1], [1, "cs", 3, 174, 302, 1], [1, "cs", 3, 175, 302, 1], [1, "cs", 3, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [1, "cs", 3, 169, 302, 1], [1, "cs", 3, 169, 303, 1], [1, "cs", 0, 168, 302, 1], [1, "cs", 0, 166, 303, 1], [1, "cs", 0, 163, 304, 1], [1, "cs", 0, 161, 302, 1], [1, "cs", 0, 159, 303, 1], [1, "cs", 0, 152, 304, 1], [1, "cs", 0, 155, 303, 1], [1, "cs", 1, 164, 303, 1], [1, "cs", 1, 162, 303, 1], [1, "cs", 1, 158, 304, 1], [1, "cs", 1, 156, 302, 1], [1, "cs", 1, 153, 302, 1], [1, "cs", 1, 154, 304, 1], [1, "cs", 2, 168, 304, 1], [1, "cs", 2, 168, 303, 1], [1, "cs", 2, 167, 303, 1], [1, "cs", 2, 167, 304, 1], [1, "cs", 2, 166, 304, 1], [1, "cs", 2, 165, 304, 1], [1, "cs", 2, 164, 304, 1], [1, "cs", 2, 165, 303, 1], [1, "cs", 2, 167, 302, 1], [1, "cs", 2, 166, 302, 1], [1, "cs", 2, 165, 302, 1], [1, "cs", 2, 164, 302, 1], [1, "cs", 2, 163, 302, 1], [1, "cs", 2, 162, 302, 1], [1, "cs", 2, 163, 303, 1], [1, "cs", 2, 162, 304, 1], [1, "cs", 2, 160, 304, 1], [1, "cs", 2, 159, 304, 1], [1, "cs", 2, 161, 304, 1], [1, "cs", 2, 161, 303, 1], [1, "cs", 2, 160, 303, 1], [1, "cs", 2, 160, 302, 1], [1, "cs", 2, 158, 302, 1], [1, "cs", 2, 159, 302, 1], [1, "cs", 2, 157, 302, 1], [1, "cs", 2, 156, 303, 1], [1, "cs", 2, 157, 303, 1], [1, "cs", 2, 158, 303, 1], [1, "cs", 2, 157, 304, 1], [1, "cs", 2, 156, 304, 1], [1, "cs", 2, 155, 304, 1], [1, "cs", 2, 153, 304, 1], [1, "cs", 2, 153, 303, 1], [1, "cs", 2, 154, 303, 1], [1, "cs", 2, 154, 302, 1], [1, "cs", 2, 155, 302, 1], [1, "cs", 2, 152, 303, 1], [1, "cs", 2, 152, 302, 1], [1, "cs", 0, 151, 302, 1], [1, "cs", 0, 149, 303, 1], [1, "cs", 0, 145, 304, 1], [1, "cs", 0, 147, 302, 1], [1, "cs", 0, 143, 303, 1], [1, "cs", 0, 141, 303, 1], [1, "cs", 1, 147, 304, 1], [1, "cs", 1, 145, 302, 1], [1, "cs", 1, 142, 302, 1], [1, "cs", 1, 150, 304, 1], [1, "cs", 2, 151, 304, 1], [1, "cs", 2, 151, 303, 1], [1, "cs", 2, 150, 303, 1], [1, "cs", 2, 150, 302, 1], [1, "cs", 2, 148, 302, 1], [1, "cs", 2, 146, 302, 1], [1, "cs", 2, 144, 302, 1], [1, "cs", 2, 141, 302, 1], [1, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, 1], [1, "cs", 2, 142, 303, 1], [1, "cs", 2, 143, 304, 1], [1, "cs", 2, 144, 304, 1], [1, "cs", 2, 144, 303, 1], [1, "cs", 2, 148, 304, 1], [1, "cs", 2, 148, 303, 1], [1, "cs", 2, 146, 303, 1], [1, "cs", 2, 145, 303, 1], [1, "cs", 2, 147, 303, 1], [1, "cs", 2, 146, 304, 1], [1, "cs", 2, 149, 304, 1], [1, "cs", 3, 149, 302, 1], [1, "cs", 3, 143, 302, 1], [1, "cs", 0, 139, 304, 1], [1, "cs", 0, 138, 302, 1], [1, "cs", 1, 139, 302, 1], [1, "cs", 2, 140, 302, 1], [1, "cs", 2, 140, 303, 1], [1, "cs", 2, 139, 303, 1], [1, "cs", 2, 138, 303, 1], [1, "cs", 2, 138, 304, 1], [1, "cs", 2, 140, 304, 1], [1, "cs", 0, 137, 304, 1], [1, "cs", 0, 135, 303, 1], [1, "cs", 0, 133, 304, 1], [1, "cs", 1, 135, 304, 1], [1, "cs", 1, 136, 302, 1], [1, "cs", 2, 137, 302, 1], [1, "cs", 2, 136, 303, 1], [1, "cs", 2, 137, 303, 1], [1, "cs", 2, 136, 304, 1], [1, "cs", 2, 134, 304, 1], [1, "cs", 2, 134, 303, 1], [1, "cs", 2, 133, 303, 1], [1, "cs", 2, 132, 304, 1], [1, "cs", 0, 131, 302, 1], [1, "cs", 0, 134, 302, 1], [1, "cs", 0, 129, 304, 1], [1, "cs", 1, 130, 303, 1], [1, "cs", 1, 132, 302, 1], [1, "cs", 2, 135, 302, 1], [1, "cs", 2, 133, 302, 1], [1, "cs", 2, 132, 303, 1], [1, "cs", 2, 131, 303, 1], [1, "cs", 2, 130, 304, 1], [1, "cs", 2, 131, 304, 1], [1, "cs", 2, 128, 304, 1], [1, "cs", 2, 129, 303, 1], [1, "cs", 2, 130, 302, 1], [1, "cs", 3, 127, 304, 1], [1, "cs", 2, 132, 301, 1], [1, "cs", 2, 133, 301, 1], [1, "cs", 2, 134, 301, 1], [1, "cs", 2, 135, 301, 1], [1, "cs", 3, 131, 301, 1], [1, "cs", 3, 136, 301, 1], [1, "cs", 3, 136, 178, 1], [1, "cs", 0, 136, 183, 1], [1, "cs", 2, 136, 182, 1], [1, "cs", 1, 136, 181, 1], [1, "cs", 0, 136, 179, 1], [1, "cs", 3, 136, 180, 1], [1, "cs", 2, 135, 183, 1], [1, "cs", 1, 135, 182, 1], [1, "cs", 3, 135, 180, 1], [1, "cs", 0, 134, 183, 1], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, 1], [1, "cs", 1, 132, 183, 1], [1, "cs", 3, 131, 183, 1], [1, "cs", 2, 135, 181, 1], [1, "cs", 2, 134, 182, 1], [1, "cs", 3, 134, 181, 1], [1, "fod", 0, 213, 301, 0], [1, "fod", 0, 204, 301, 0], [1, "fod", 1, 196, 288, 0], [1, "fod", 1, 198, 283, 0], [1, "fod", 1, 190, 288, 0], [1, "fod", 1, 189, 296, 0], [1, "fod", 1, 193, 293, 0], [1, "fod", 1, 183, 292, 0], [1, "fod", 1, 186, 287, 0], [1, "fod", 1, 190, 290, 0], [1, "fod", 1, 218, 271, 0], [1, "fod", 1, 220, 266, 0], [1, "fod", 1, 211, 268, 0], [1, "fod", 1, 210, 274, 0], [1, "fod", 1, 205, 263, 0], [1, "fod", 1, 216, 258, 0], [1, "fod", 2, 201, 294, 0], [1, "fod", 2, 190, 296, 0], [1, "fod", 2, 188, 299, 0], [1, "fod", 2, 186, 297, 0], [1, "fod", 2, 188, 296, 0], [1, "fod", 2, 189, 291, 0], [1, "fod", 2, 189, 286, 0], [1, "fod", 2, 191, 286, 0], [1, "fod", 2, 197, 286, 0], [1, "fod", 2, 195, 290, 0], [1, "fod", 2, 186, 288, 0], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, 0], [1, "fod", 2, 198, 286, 0], [1, "fod", 2, 196, 283, 0], [1, "fod", 2, 196, 281, 0], [1, "fod", 2, 201, 280, 0], [1, "fod", 2, 205, 287, 0], [1, "fod", 2, 209, 283, 0], [1, "fod", 2, 212, 280, 0], [1, "fod", 2, 209, 277, 0], [1, "fod", 2, 217, 278, 0], [1, "fod", 2, 219, 275, 0], [1, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", 2, 217, 265, 0], [1, "fod", 2, 213, 267, 0], [1, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [1, "fod", 2, 204, 270, 0], [1, "fod", 2, 196, 267, 0], [1, "fod", 2, 214, 261, 0], [1, "fod", 2, 211, 260, 0], [1, "fod", 2, 218, 256, 0], [1, "fod", 2, 219, 262, 0], [1, "fod", 2, 220, 253, 0], [1, "fod", 2, 211, 257, 0], [1, "la", 3, 198, 27, 1], [1, "la", 3, 201, 30, 1], [1, "la", 3, 200, 32, 1], [1, "la", 3, 198, 33, 1], [1, "la", 3, 196, 33, 1], [1, "la", 3, 194, 32, 1], [1, "la", 3, 194, 28, 1], [1, "la", 0, 200, 28, 1], [1, "la", 0, 193, 30, 1], [1, "la", 3, 196, 27, 1], [1, "la", 3, 199, 30, 1], [1, "la", 3, 197, 29, 1], [1, "la", 3, 195, 30, 1], [1, "la", 3, 197, 31, 1], [1, "la", 2, 201, 33, 1], [1, "la", 4, 202, 34, 1], [1, "la", 4, 202, 35, 1], [1, "la", 4, 203, 36, 1], [1, "la", 4, 204, 37, 1], [1, "la", 2, 205, 38, 1], [1, "la", 5, 205, 39, 1], [1, "la", 5, 205, 40, 1], [1, "la", 2, 206, 41, 1], [1, "la", 1, 207, 42, 1], [1, "la", 1, 205, 41, 1], [1, "la", 4, 208, 43, 1], [1, "la", 4, 209, 43, 1], [1, "la", 1, 210, 43, 1], [1, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, 1], [1, "la", 4, 213, 44, 1], [1, "la", 3, 223, 54, 1], [1, "la", 3, 221, 53, 1], [1, "la", 3, 219, 53, 1], [1, "la", 4, 218, 52, 1], [1, "la", 4, 217, 51, 1], [1, "la", 4, 216, 51, 1], [1, "la", 1, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", 1, 210, 44, 1], [1, "la", 3, 206, 50, 1], [1, "re", 0, 217, 24, 1], [1, "re", 0, 207, 16, 1], [1, "de", 44, 54, 14, 0], [1, "de", 44, 53, 13, 0], [1, "de", 44, 51, 16, 0], [1, "de", 44, 49, 13, 0], [1, "de", 44, 48, 14, 0], [1, "de", 21, 78, 293, 0], [1, "cs", 0, 221, 8, 1], [1, "cs", 0, 224, 9, 1], [1, "cs", 1, 223, 8, 1], [1, "cs", 2, 224, 8, 1], [1, "cs", 2, 222, 8, 1], [1, "cs", 0, 224, 6, 1], [1, "cs", 0, 222, 5, 1], [1, "cs", 0, 219, 7, 1], [1, "cs", 1, 220, 5, 1], [1, "cs", 1, 217, 7, 1], [1, "cs", 2, 224, 5, 1], [1, "cs", 2, 223, 5, 1], [1, "cs", 2, 224, 7, 1], [1, "cs", 2, 223, 7, 1], [1, "cs", 2, 223, 6, 1], [1, "cs", 2, 222, 6, 1], [1, "cs", 2, 222, 7, 1], [1, "cs", 2, 221, 7, 1], [1, "cs", 2, 221, 6, 1], [1, "cs", 2, 221, 5, 1], [1, "cs", 2, 220, 6, 1], [1, "cs", 2, 220, 7, 1], [1, "cs", 2, 220, 8, 1], [1, "cs", 2, 219, 8, 1], [1, "cs", 2, 219, 6, 1], [1, "cs", 2, 219, 5, 1], [1, "cs", 0, 218, 5, 1], [1, "cs", 0, 216, 8, 1], [1, "cs", 2, 218, 8, 1], [1, "cs", 2, 217, 8, 1], [1, "cs", 2, 218, 7, 1], [1, "cs", 2, 218, 6, 1], [1, "cs", 2, 217, 6, 1], [1, "cs", 2, 217, 5, 1], [1, "cs", 1, 215, 6, 1], [1, "cs", 1, 213, 5, 1], [1, "cs", 0, 214, 6, 1], [1, "cs", 0, 216, 5, 1], [1, "cs", 0, 213, 8, 1], [1, "cs", 0, 211, 7, 1], [1, "cs", 0, 209, 5, 1], [1, "cs", 0, 208, 7, 1], [1, "cs", 0, 207, 8, 1], [1, "cs", 2, 216, 6, 1], [1, "cs", 2, 216, 7, 1], [1, "cs", 2, 215, 7, 1], [1, "cs", 2, 215, 8, 1], [1, "cs", 2, 214, 8, 1], [1, "cs", 2, 214, 7, 1], [1, "cs", 2, 215, 5, 1], [1, "cs", 2, 214, 5, 1], [1, "cs", 2, 213, 6, 1], [1, "cs", 2, 213, 7, 1], [1, "cs", 2, 212, 7, 1], [1, "cs", 1, 211, 5, 1], [1, "cs", 1, 209, 8, 1], [1, "cs", 2, 212, 8, 1], [1, "cs", 2, 211, 8, 1], [1, "cs", 2, 210, 8, 1], [1, "cs", 2, 209, 7, 1], [1, "cs", 2, 210, 7, 1], [1, "cs", 2, 210, 6, 1], [1, "cs", 2, 212, 6, 1], [1, "cs", 2, 212, 5, 1], [1, "cs", 2, 211, 6, 1], [1, "cs", 2, 210, 5, 1], [1, "cs", 2, 209, 6, 1], [1, "cs", 2, 208, 6, 1], [1, "cs", 2, 208, 5, 1], [1, "cs", 2, 207, 7, 1], [1, "cs", 2, 207, 6, 1], [1, "cs", 2, 207, 5, 1], [1, "cs", 2, 206, 5, 1], [1, "cs", 2, 208, 8, 1], [1, "cs", 2, 206, 6, 1], [1, "cs", 0, 204, 8, 1], [1, "cs", 0, 205, 6, 1], [1, "cs", 0, 203, 5, 1], [1, "cs", 0, 202, 7, 1], [1, "cs", 0, 199, 8, 1], [1, "cs", 0, 200, 6, 1], [1, "cs", 0, 197, 6, 1], [1, "cs", 0, 195, 8, 1], [1, "cs", 0, 194, 6, 1], [1, "cs", 1, 202, 8, 1], [1, "cs", 1, 206, 7, 1], [1, "cs", 1, 201, 5, 1], [1, "cs", 1, 197, 8, 1], [1, "cs", 1, 192, 7, 1], [1, "cs", 1, 195, 5, 1], [1, "cs", 2, 205, 7, 1], [1, "cs", 2, 205, 8, 1], [1, "cs", 2, 206, 8, 1], [1, "cs", 2, 204, 7, 1], [1, "cs", 2, 204, 6, 1], [1, "cs", 2, 204, 5, 1], [1, "cs", 2, 205, 5, 1], [1, "cs", 2, 203, 6, 1], [1, "cs", 2, 203, 7, 1], [1, "cs", 2, 203, 8, 1], [1, "cs", 2, 201, 8, 1], [1, "cs", 2, 200, 8, 1], [1, "cs", 2, 200, 7, 1], [1, "cs", 2, 201, 7, 1], [1, "cs", 2, 201, 6, 1], [1, "cs", 2, 202, 5, 1], [1, "cs", 2, 202, 6, 1], [1, "cs", 2, 200, 5, 1], [1, "cs", 2, 199, 5, 1], [1, "cs", 2, 197, 5, 1], [1, "cs", 2, 196, 5, 1], [1, "cs", 2, 198, 5, 1], [1, "cs", 2, 198, 6, 1], [1, "cs", 2, 199, 6, 1], [1, "cs", 2, 199, 7, 1], [1, "cs", 2, 198, 7, 1], [1, "cs", 2, 198, 8, 1], [1, "cs", 2, 197, 7, 1], [1, "cs", 2, 196, 7, 1], [1, "cs", 2, 196, 8, 1], [1, "cs", 2, 196, 6, 1], [1, "cs", 2, 195, 6, 1], [1, "cs", 2, 195, 7, 1], [1, "cs", 2, 194, 7, 1], [1, "cs", 2, 193, 8, 1], [1, "cs", 2, 194, 8, 1], [1, "cs", 2, 193, 7, 1], [1, "cs", 2, 193, 6, 1], [1, "cs", 2, 193, 5, 1], [1, "cs", 2, 194, 5, 1], [1, "cs", 0, 192, 5, 1], [1, "cs", 0, 191, 8, 1], [1, "cs", 0, 190, 6, 1], [1, "cs", 0, 188, 7, 1], [1, "cs", 0, 186, 8, 1], [1, "cs", 0, 186, 5, 1], [1, "cs", 0, 184, 7, 1], [1, "cs", 0, 182, 8, 1], [1, "cs", 0, 181, 6, 1], [1, "cs", 1, 189, 8, 1], [1, "cs", 1, 183, 8, 1], [1, "cs", 1, 188, 5, 1], [1, "cs", 1, 185, 6, 1], [1, "cs", 1, 180, 7, 1], [1, "cs", 1, 183, 5, 1], [1, "cs", 1, 178, 8, 1], [1, "cs", 1, 177, 6, 1], [1, "cs", 1, 173, 7, 1], [1, "cs", 1, 171, 7, 1], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, 1], [1, "cs", 0, 179, 5, 1], [1, "cs", 0, 174, 5, 1], [1, "cs", 0, 176, 5, 1], [1, "cs", 0, 172, 8, 1], [1, "cs", 0, 170, 8, 1], [1, "cs", 0, 169, 6, 1], [1, "cs", 2, 192, 6, 1], [1, "cs", 2, 192, 8, 1], [1, "cs", 2, 191, 7, 1], [1, "cs", 2, 191, 6, 1], [1, "cs", 2, 191, 5, 1], [1, "cs", 2, 190, 5, 1], [1, "cs", 2, 189, 5, 1], [1, "cs", 2, 189, 6, 1], [1, "cs", 2, 189, 7, 1], [1, "cs", 2, 190, 7, 1], [1, "cs", 2, 190, 8, 1], [1, "cs", 2, 188, 8, 1], [1, "cs", 2, 187, 8, 1], [1, "cs", 2, 187, 7, 1], [1, "cs", 2, 187, 6, 1], [1, "cs", 2, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [1, "cs", 2, 186, 6, 1], [1, "cs", 2, 186, 7, 1], [1, "cs", 2, 185, 7, 1], [1, "cs", 2, 185, 8, 1], [1, "cs", 2, 184, 8, 1], [1, "cs", 2, 183, 7, 1], [1, "cs", 2, 183, 6, 1], [1, "cs", 2, 184, 6, 1], [1, "cs", 2, 184, 5, 1], [1, "cs", 2, 185, 5, 1], [1, "cs", 2, 182, 6, 1], [1, "cs", 2, 182, 7, 1], [1, "cs", 2, 181, 7, 1], [1, "cs", 2, 181, 8, 1], [1, "cs", 2, 180, 8, 1], [1, "cs", 2, 179, 8, 1], [1, "cs", 2, 182, 5, 1], [1, "cs", 2, 181, 5, 1], [1, "cs", 2, 180, 5, 1], [1, "cs", 2, 180, 6, 1], [1, "cs", 2, 179, 6, 1], [1, "cs", 2, 179, 7, 1], [1, "cs", 2, 178, 7, 1], [1, "cs", 2, 178, 6, 1], [1, "cs", 2, 178, 5, 1], [1, "cs", 2, 177, 5, 1], [1, "cs", 2, 177, 7, 1], [1, "cs", 2, 176, 7, 1], [1, "cs", 2, 176, 6, 1], [1, "cs", 2, 175, 6, 1], [1, "cs", 2, 175, 5, 1], [1, "cs", 2, 176, 8, 1], [1, "cs", 2, 174, 8, 1], [1, "cs", 2, 175, 8, 1], [1, "cs", 2, 173, 8, 1], [1, "cs", 2, 174, 7, 1], [1, "cs", 2, 173, 6, 1], [1, "cs", 2, 174, 6, 1], [1, "cs", 2, 172, 5, 1], [1, "cs", 2, 173, 5, 1], [1, "cs", 2, 172, 6, 1], [1, "cs", 2, 172, 7, 1], [1, "cs", 2, 171, 8, 1], [1, "cs", 2, 170, 7, 1], [1, "cs", 2, 170, 6, 1], [1, "cs", 2, 170, 5, 1], [1, "cs", 2, 171, 5, 1], [1, "cs", 2, 171, 6, 1], [1, "cs", 2, 169, 5, 1], [1, "cs", 2, 169, 7, 1], [1, "cs", 2, 169, 8, 1], [1, "cs", 1, 168, 7, 1], [1, "cs", 1, 166, 5, 1], [1, "cs", 1, 164, 7, 1], [1, "cs", 1, 160, 7, 1], [1, "cs", 1, 156, 8, 1], [1, "cs", 0, 166, 8, 1], [1, "cs", 0, 168, 5, 1], [1, "cs", 0, 164, 6, 1], [1, "cs", 0, 162, 7, 1], [1, "cs", 0, 158, 8, 1], [1, "cs", 0, 157, 6, 1], [1, "cs", 0, 161, 5, 1], [1, "cs", 0, 159, 5, 1], [1, "cs", 0, 155, 7, 1], [1, "cs", 0, 154, 5, 1], [1, "cs", 0, 151, 7, 1], [1, "cs", 1, 153, 8, 1], [1, "cs", 1, 151, 5, 1], [1, "cs", 2, 168, 6, 1], [1, "cs", 2, 168, 8, 1], [1, "cs", 2, 167, 8, 1], [1, "cs", 2, 167, 7, 1], [1, "cs", 2, 167, 6, 1], [1, "cs", 2, 167, 5, 1], [1, "cs", 2, 166, 6, 1], [1, "cs", 2, 166, 7, 1], [1, "cs", 2, 165, 7, 1], [1, "cs", 2, 165, 6, 1], [1, "cs", 2, 165, 5, 1], [1, "cs", 2, 164, 5, 1], [1, "cs", 2, 163, 5, 1], [1, "cs", 2, 162, 5, 1], [1, "cs", 2, 162, 6, 1], [1, "cs", 2, 163, 6, 1], [1, "cs", 2, 163, 7, 1], [1, "cs", 2, 163, 8, 1], [1, "cs", 2, 164, 8, 1], [1, "cs", 2, 165, 8, 1], [1, "cs", 2, 161, 8, 1], [1, "cs", 2, 162, 8, 1], [1, "cs", 2, 160, 8, 1], [1, "cs", 2, 159, 8, 1], [1, "cs", 2, 159, 7, 1], [1, "cs", 2, 159, 6, 1], [1, "cs", 2, 160, 5, 1], [1, "cs", 2, 160, 6, 1], [1, "cs", 2, 161, 6, 1], [1, "cs", 2, 161, 7, 1], [1, "cs", 2, 157, 7, 1], [1, "cs", 2, 158, 7, 1], [1, "cs", 2, 158, 6, 1], [1, "cs", 2, 158, 5, 1], [1, "cs", 2, 155, 5, 1], [1, "cs", 2, 155, 6, 1], [1, "cs", 2, 156, 6, 1], [1, "cs", 2, 156, 7, 1], [1, "cs", 2, 157, 8, 1], [1, "cs", 2, 155, 8, 1], [1, "cs", 2, 154, 8, 1], [1, "cs", 2, 154, 7, 1], [1, "cs", 2, 154, 6, 1], [1, "cs", 2, 152, 8, 1], [1, "cs", 2, 153, 7, 1], [1, "cs", 2, 153, 6, 1], [1, "cs", 2, 153, 5, 1], [1, "cs", 2, 152, 5, 1], [1, "cs", 2, 152, 6, 1], [1, "cs", 2, 152, 7, 1], [1, "cs", 2, 151, 6, 1], [1, "cs", 2, 157, 5, 1], [1, "cs", 1, 156, 5, 1], [1, "cs", 0, 150, 5, 1], [1, "cs", 0, 149, 7, 1], [1, "cs", 0, 147, 8, 1], [1, "cs", 0, 146, 5, 1], [1, "cs", 0, 144, 7, 1], [1, "cs", 0, 142, 5, 1], [1, "cs", 1, 147, 6, 1], [1, "cs", 1, 145, 8, 1], [1, "cs", 1, 144, 5, 1], [1, "cs", 2, 148, 5, 1], [1, "cs", 2, 149, 5, 1], [1, "cs", 2, 150, 6, 1], [1, "cs", 2, 150, 8, 1], [1, "cs", 2, 151, 8, 1], [1, "cs", 2, 150, 7, 1], [1, "cs", 2, 149, 8, 1], [1, "cs", 2, 148, 8, 1], [1, "cs", 2, 149, 6, 1], [1, "cs", 2, 148, 6, 1], [1, "cs", 2, 148, 7, 1], [1, "cs", 2, 147, 7, 1], [1, "cs", 2, 147, 5, 1], [1, "cs", 2, 146, 6, 1], [1, "cs", 2, 146, 7, 1], [1, "cs", 2, 146, 8, 1], [1, "cs", 2, 145, 7, 1], [1, "cs", 2, 145, 6, 1], [1, "cs", 2, 145, 5, 1], [1, "cs", 2, 144, 6, 1], [1, "cs", 2, 143, 5, 1], [1, "cs", 2, 143, 6, 1], [1, "cs", 2, 142, 6, 1], [1, "cs", 2, 141, 5, 1], [1, "cs", 2, 224, 10, 1], [1, "cs", 0, 224, 11, 1], [1, "cs", 0, 224, 13, 1], [1, "cs", 0, 224, 17, 1], [1, "cs", 0, 224, 19, 1], [1, "cs", 0, 224, 22, 1], [1, "cs", 0, 224, 24, 1], [1, "cs", 0, 224, 29, 1], [1, "cs", 0, 224, 33, 1], [1, "cs", 0, 224, 35, 1], [1, "cs", 0, 224, 38, 1], [1, "cs", 1, 224, 14, 1], [1, "cs", 1, 224, 20, 1], [1, "cs", 1, 224, 27, 1], [1, "cs", 1, 224, 31, 1], [1, "cs", 1, 224, 36, 1], [1, "cs", 2, 224, 12, 1], [1, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, 16, 1], [1, "cs", 2, 224, 18, 1], [1, "cs", 2, 224, 21, 1], [1, "cs", 2, 224, 23, 1], [1, "cs", 2, 224, 25, 1], [1, "cs", 2, 224, 26, 1], [1, "cs", 2, 224, 28, 1], [1, "cs", 2, 224, 30, 1], [1, "cs", 2, 224, 32, 1], [1, "cs", 2, 224, 34, 1], [1, "cs", 2, 224, 37, 1], [1, "cs", 2, 224, 39, 1], [1, "cs", 0, 224, 41, 1], [1, "cs", 0, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [1, "cs", 0, 224, 52, 1], [1, "cs", 0, 224, 57, 1], [1, "cs", 1, 224, 47, 1], [1, "cs", 2, 224, 40, 1], [1, "cs", 2, 224, 42, 1], [1, "cs", 2, 224, 43, 1], [1, "cs", 2, 224, 45, 1], [1, "cs", 2, 224, 49, 1], [1, "cs", 1, 224, 50, 1], [1, "cs", 2, 224, 51, 1], [1, "la", 3, 224, 54, 1], [1, "cs", 2, 224, 56, 1], [1, "cs", 2, 224, 58, 1], [1, "cs", 2, 224, 61, 1], [1, "cs", 0, 224, 60, 1], [1, "cs", 0, 224, 64, 1], [1, "cs", 0, 224, 66, 1], [1, "cs", 0, 224, 70, 1], [1, "cs", 0, 224, 74, 1], [1, "cs", 0, 224, 77, 1], [1, "cs", 1, 224, 62, 1], [1, "cs", 1, 224, 68, 1], [1, "cs", 1, 224, 72, 1], [1, "cs", 1, 224, 76, 1], [1, "cs", 1, 224, 80, 1], [1, "cs", 1, 224, 83, 1], [1, "cs", 1, 224, 91, 1], [1, "cs", 1, 224, 95, 1], [1, "cs", 1, 224, 97, 1], [1, "cs", 0, 224, 85, 1], [1, "cs", 0, 224, 88, 1], [1, "cs", 0, 224, 93, 1], [1, "cs", 0, 224, 98, 1], [1, "cs", 2, 224, 59, 1], [1, "cs", 2, 224, 63, 1], [1, "cs", 2, 224, 65, 1], [1, "cs", 2, 224, 67, 1], [1, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, 1], [1, "cs", 2, 224, 73, 1], [1, "cs", 2, 224, 75, 1], [1, "cs", 2, 224, 78, 1], [1, "cs", 2, 224, 79, 1], [1, "cs", 2, 224, 81, 1], [1, "cs", 2, 224, 82, 1], [1, "cs", 2, 224, 84, 1], [1, "cs", 2, 224, 86, 1], [1, "cs", 2, 224, 87, 1], [1, "cs", 2, 224, 89, 1], [1, "cs", 2, 224, 90, 1], [1, "cs", 2, 224, 92, 1], [1, "cs", 2, 224, 94, 1], [1, "cs", 2, 224, 96, 1], [1, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, 100, 1], [1, "cs", 0, 224, 101, 1], [1, "cs", 1, 224, 103, 1], [1, "cs", 2, 224, 102, 1], [1, "cs", 0, 222, 10, 1], [1, "cs", 2, 223, 9, 1], [1, "cs", 2, 222, 9, 1], [1, "cs", 2, 221, 9, 1], [1, "cs", 2, 223, 10, 1], [1, "cs", 2, 223, 11, 1], [1, "cs", 2, 223, 12, 1], [1, "cs", 3, 223, 13, 1], [1, "cs", 3, 222, 11, 1], [1, "cs", 3, 220, 9, 1], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, 10, 1], [1, "re", 2, 219, 13, 1], [1, "re", 1, 218, 18, 1], [1, "re", 1, 214, 13, 1], [1, "cs", 0, 221, 20, 1], [1, "cs", 1, 223, 18, 1], [1, "cs", 2, 222, 19, 1], [1, "cs", 2, 223, 19, 1], [1, "cs", 2, 223, 20, 1], [1, "cs", 2, 222, 20, 1], [1, "cs", 2, 220, 21, 1], [1, "cs", 0, 219, 21, 1], [1, "cs", 3, 221, 21, 1], [1, "cs", 3, 218, 21, 1], [1, "cs", 3, 222, 21, 1], [1, "cs", 3, 220, 22, 1], [1, "cs", 3, 219, 22, 1], [1, "cs", 3, 221, 22, 1], [1, "cs", 0, 211, 9, 1], [1, "cs", 1, 211, 10, 1], [1, "cs", 1, 210, 12, 1], [1, "cs", 0, 211, 13, 1], [1, "cs", 2, 210, 9, 1], [1, "cs", 2, 210, 10, 1], [1, "cs", 2, 210, 11, 1], [1, "cs", 2, 212, 9, 1], [1, "cs", 2, 210, 13, 1], [1, "cs", 2, 211, 12, 1], [1, "cs", 2, 211, 11, 1], [1, "cs", 2, 211, 14, 1], [1, "cs", 2, 212, 15, 1], [1, "cs", 2, 210, 14, 1], [1, "cs", 3, 211, 15, 1], [1, "cs", 3, 213, 9, 1], [1, "cs", 3, 212, 10, 1], [1, "cs", 3, 223, 21, 1], [1, "cs", 3, 209, 9, 1], [1, "la", 3, 223, 22, 1], [1, "la", 3, 221, 23, 1], [1, "la", 3, 207, 9, 1], [1, "la", 3, 209, 10, 1], [1, "la", 0, 209, 12, 1], [1, "la", 4, 209, 14, 1], [1, "la", 4, 219, 23, 1], [1, "la", 3, 210, 15, 1], [1, "la", 3, 217, 22, 1], [1, "la", 4, 212, 16, 1], [1, "la", 2, 214, 19, 1], [1, "la", 4, 213, 20, 1], [1, "la", 1, 212, 21, 1], [1, "la", 4, 215, 18, 1], [1, "la", 2, 216, 17, 1], [1, "la", 5, 216, 16, 1], [1, "la", 5, 216, 15, 1], [1, "la", 1, 217, 16, 1], [1, "la", 2, 218, 16, 1], [1, "la", 2, 216, 14, 1], [1, "la", 2, 219, 16, 1], [1, "la", 5, 220, 16, 1], [1, "la", 5, 216, 13, 1], [1, "la", 4, 217, 15, 1], [1, "cs", 0, 211, 44, 1], [1, "cs", 1, 212, 45, 1], [1, "cs", 2, 213, 45, 1], [1, "cs", 0, 214, 46, 1], [1, "cs", 2, 215, 46, 1], [1, "cs", 3, 213, 46, 1], [1, "cs", 3, 214, 47, 1], [1, "cs", 3, 214, 48, 1], [1, "cs", 3, 216, 46, 1], [1, "cs", 0, 208, 20, 1], [1, "cs", 0, 210, 21, 1], [1, "cs", 0, 212, 23, 1], [1, "cs", 0, 213, 25, 1], [1, "cs", 2, 213, 24, 1], [1, "cs", 2, 211, 22, 1], [1, "cs", 2, 210, 20, 1], [1, "cs", 2, 209, 21, 1], [1, "cs", 2, 209, 20, 1], [1, "cs", 2, 211, 21, 1], [1, "cs", 2, 212, 22, 1], [1, "cs", 2, 213, 23, 1], [1, "cs", 3, 213, 26, 1], [1, "cs", 3, 207, 20, 1], [1, "la", 4, 192, 33, 1], [1, "la", 4, 191, 34, 1], [1, "la", 4, 190, 35, 1], [1, "la", 3, 189, 37, 1], [1, "la", 3, 188, 39, 1], [1, "la", 4, 186, 40, 1], [1, "la", 4, 185, 39, 1], [1, "la", 4, 184, 39, 1], [1, "la", 2, 183, 39, 1], [1, "la", 1, 182, 40, 1], [1, "la", 2, 181, 41, 1], [1, "la", 5, 180, 41, 1], [1, "la", 5, 179, 41, 1], [1, "la", 4, 192, 28, 1], [1, "la", 4, 191, 28, 1], [1, "la", 4, 190, 27, 1], [1, "la", 3, 188, 27, 1], [1, "la", 4, 187, 26, 1], [1, "la", 4, 186, 25, 1], [1, "la", 4, 185, 25, 1], [1, "la", 4, 184, 24, 1], [1, "la", 5, 184, 23, 1], [1, "la", 2, 184, 22, 1], [1, "la", 5, 184, 21, 1], [1, "la", 1, 183, 20, 1], [1, "la", 5, 182, 20, 1], [1, "la", 2, 181, 20, 1], [1, "la", 5, 180, 20, 1], [1, "la", 2, 179, 20, 1], [1, "la", 4, 178, 19, 1], [1, "la", 3, 178, 17, 1], [1, "la", 3, 176, 18, 1], [1, "cs", 0, 177, 15, 1], [1, "cs", 0, 175, 17, 1], [1, "cs", 0, 180, 16, 1], [1, "cs", 0, 174, 19, 1], [1, "cs", 0, 172, 20, 1], [1, "cs", 1, 175, 15, 1], [1, "cs", 1, 172, 18, 1], [1, "cs", 1, 181, 15, 1], [1, "cs", 2, 179, 15, 1], [1, "cs", 2, 177, 16, 1], [1, "cs", 2, 176, 16, 1], [1, "cs", 2, 174, 18, 1], [1, "cs", 2, 173, 19, 1], [1, "cs", 2, 172, 19, 1], [1, "cs", 2, 173, 18, 1], [1, "cs", 2, 173, 17, 1], [1, "cs", 2, 174, 17, 1], [1, "cs", 2, 174, 16, 1], [1, "cs", 2, 175, 16, 1], [1, "cs", 2, 176, 15, 1], [1, "cs", 2, 178, 15, 1], [1, "cs", 2, 178, 16, 1], [1, "cs", 2, 179, 16, 1], [1, "cs", 2, 180, 15, 1], [1, "cs", 2, 181, 16, 1], [1, "cs", 3, 182, 16, 1], [1, "cs", 3, 172, 21, 1], [1, "la", 1, 175, 19, 1], [1, "la", 2, 174, 20, 1], [1, "la", 2, 173, 20, 1], [1, "la", 1, 180, 17, 1], [1, "la", 2, 181, 17, 1], [1, "la", 3, 191, 20, 1], [1, "s", 0, 217, 30, 1], [1, "s", 0, 208, 35, 1], [1, "s", 0, 204, 24, 1], [1, "s", 1, 218, 32, 1], [1, "s", 1, 207, 34, 1], [1, "s", 1, 202, 23, 1], [1, "s", 1, 195, 16, 1], [1, "s", 2, 222, 28, 1], [1, "s", 2, 212, 38, 1], [1, "s", 2, 207, 23, 1], [1, "s", 2, 202, 12, 1], [1, "s", 2, 195, 18, 1], [1, "s", 1, 191, 12, 1], [1, "s", 0, 187, 16, 1], [1, "s", 2, 188, 16, 1], [1, "s", 1, 186, 14, 1], [1, "s", 1, 201, 16, 1], [1, "g", 1, 216, 31, 1], [1, "g", 0, 200, 15, 1], [1, "g", 0, 202, 40, 1], [1, "g", 0, 189, 32, 1], [1, "g", 0, 204, 28, 1], [1, "g", 0, 196, 24, 1], [1, "g", 2, 198, 37, 1], [1, "s", 0, 193, 39, 1], [1, "s", 0, 201, 45, 1], [1, "a", 0, 210, 29, 1], [1, "a", 0, 200, 20, 1], [1, "cs", 0, 200, 34, 1], [1, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [1, "cs", 1, 191, 31, 1], [1, "cs", 2, 202, 32, 1], [1, "cs", 2, 194, 26, 1], [1, "cs", 2, 192, 27, 1], [1, "cs", 2, 192, 32, 1], [1, "cs", 2, 203, 31, 1], [1, "cs", 2, 202, 31, 1], [1, "cs", 2, 202, 30, 1], [1, "cs", 3, 202, 29, 1], [1, "cs", 3, 201, 32, 1], [1, "cs", 3, 199, 35, 1], [1, "cs", 0, 193, 34, 1], [1, "cs", 2, 194, 34, 1], [1, "cs", 2, 198, 35, 1], [1, "cs", 3, 199, 34, 1], [1, "cs", 3, 191, 29, 1], [1, "cs", 0, 191, 30, 1], [1, "cs", 3, 190, 29, 1], [1, "la", 3, 180, 69, 1], [1, "la", 3, 182, 68, 1], [1, "la", 3, 184, 68, 1], [1, "la", 3, 186, 70, 1], [1, "la", 3, 184, 72, 1], [1, "la", 3, 182, 72, 1], [1, "la", 3, 180, 71, 1], [1, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, 1], [1, "cs", 0, 183, 74, 1], [1, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, 1], [1, "cs", 2, 182, 74, 1], [1, "cs", 2, 181, 73, 1], [1, "cs", 2, 180, 74, 1], [1, "cs", 2, 181, 74, 1], [1, "la", 0, 184, 70, 1], [1, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, 1], [1, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, 1], [1, "la", 4, 187, 69, 1], [1, "la", 1, 188, 68, 1], [1, "la", 4, 189, 68, 1], [1, "la", 2, 190, 68, 1], [1, "la", 1, 191, 68, 1], [1, "la", 4, 192, 68, 1], [1, "la", 2, 193, 68, 1], [1, "la", 4, 194, 69, 1], [1, "la", 2, 194, 70, 1], [1, "la", 5, 195, 71, 1], [1, "la", 1, 194, 71, 1], [1, "la", 2, 196, 72, 1], [1, "la", 4, 196, 71, 1], [1, "la", 1, 197, 73, 1], [1, "la", 5, 196, 73, 1], [1, "la", 5, 198, 73, 1], [1, "la", 3, 201, 73, 1], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [1, "la", 1, 205, 72, 1], [1, "la", 2, 206, 72, 1], [1, "la", 5, 207, 72, 1], [1, "la", 1, 208, 72, 1], [1, "la", 1, 209, 73, 1], [1, "la", 2, 209, 74, 1], [1, "la", 5, 211, 76, 1], [1, "la", 4, 210, 75, 1], [1, "la", 5, 212, 76, 1], [1, "la", 4, 202, 75, 1], [1, "la", 2, 203, 76, 1], [1, "la", 4, 204, 77, 1], [1, "la", 2, 204, 78, 1], [1, "la", 2, 204, 79, 1], [1, "la", 5, 204, 80, 1], [1, "cs", 0, 202, 74, 1], [1, "cs", 1, 203, 74, 1], [1, "cs", 2, 204, 73, 1], [1, "cs", 2, 203, 75, 1], [1, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", 0, 205, 74, 1], [1, "cs", 2, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, 1], [1, "cs", 3, 207, 73, 1], [1, "cs", 2, 205, 76, 1], [1, "cs", 3, 205, 77, 1], [1, "la", 3, 183, 66, 1], [1, "la", 4, 183, 65, 1], [1, "la", 4, 184, 64, 1], [1, "la", 4, 185, 63, 1], [1, "la", 1, 185, 62, 1], [1, "la", 2, 185, 61, 1], [1, "la", 2, 185, 60, 1], [1, "la", 4, 186, 59, 1], [1, "la", 1, 187, 58, 1], [1, "la", 2, 187, 57, 1], [1, "la", 2, 187, 56, 1], [1, "s", 0, 191, 60, 1], [1, "s", 1, 195, 58, 1], [1, "s", 1, 199, 46, 1], [1, "s", 2, 202, 49, 1], [1, "g", 2, 197, 55, 1], [1, "g", 1, 213, 55, 1], [1, "g", 0, 192, 45, 1], [1, "g", 0, 210, 61, 1], [1, "g", 0, 182, 52, 1], [1, "g", 0, 180, 35, 1], [1, "g", 0, 175, 25, 1], [1, "g", 0, 168, 32, 1], [1, "g", 1, 179, 28, 1], [1, "g", 1, 161, 16, 1], [1, "g", 2, 172, 12, 1], [1, "g", 2, 160, 25, 1], [1, "g", 2, 157, 39, 1], [1, "g", 2, 170, 43, 1], [1, "g", 2, 202, 67, 1], [1, "g", 2, 217, 72, 1], [1, "g", 2, 214, 82, 1], [1, "g", 2, 193, 86, 1], [1, "g", 2, 168, 60, 1], [1, "g", 2, 165, 78, 1], [1, "g", 2, 173, 88, 1], [1, "s", 0, 185, 51, 1], [1, "s", 0, 175, 44, 1], [1, "s", 0, 165, 50, 1], [1, "s", 0, 160, 32, 1], [1, "s", 1, 162, 30, 1], [1, "s", 1, 176, 28, 1], [1, "s", 1, 154, 17, 1], [1, "s", 1, 184, 49, 1], [1, "s", 1, 192, 62, 1], [1, "s", 1, 216, 62, 1], [1, "s", 1, 204, 65, 1], [1, "s", 1, 217, 79, 1], [1, "s", 1, 206, 86, 1], [1, "la", 3, 211, 69, 1], [1, "la", 4, 215, 69, 1], [1, "la", 5, 201, 81, 1], [1, "la", 1, 207, 83, 1], [1, "la", 3, 173, 32, 1], [1, "la", 2, 181, 45, 1], [1, "la", 1, 178, 38, 1], [1, "la", 1, 213, 69, 1], [1, "la", 5, 214, 69, 1], [1, "la", 4, 216, 68, 1], [1, "la", 0, 191, 78, 1], [1, "la", 3, 191, 80, 1], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [1, "g", 2, 154, 67, 1], [1, "g", 2, 202, 94, 1], [1, "g", 2, 155, 90, 1], [1, "s", 2, 215, 80, 1], [1, "s", 2, 204, 62, 1], [1, "s", 2, 218, 60, 1], [1, "s", 2, 194, 62, 1], [1, "s", 0, 216, 86, 1], [1, "s", 0, 211, 93, 1], [1, "la", 0, 216, 92, 1], [1, "la", 0, 151, 96, 1], [1, "la", 1, 155, 95, 1], [1, "la", 4, 214, 88, 1], [1, "s", 0, 205, 99, 1], [1, "s", 1, 217, 88, 1], [1, "s", 1, 213, 94, 1], [1, "s", 1, 202, 97, 1], [1, "s", 0, 199, 85, 1], [1, "s", 0, 190, 93, 1], [1, "s", 1, 199, 87, 1], [1, "s", 1, 192, 97, 1], [1, "la", 3, 196, 92, 1], [1, "la", 1, 199, 91, 1], [1, "la", 1, 220, 91, 1], [1, "la", 0, 219, 77, 1], [1, "la", 0, 200, 59, 1], [1, "la", 3, 188, 87, 1], [1, "la", 0, 183, 94, 1], [1, "la", 1, 187, 83, 1], [1, "la", 1, 175, 82, 1], [1, "la", 1, 172, 94, 1], [1, "la", 2, 179, 78, 1], [1, "la", 0, 166, 87, 1], [1, "la", 3, 159, 80, 1], [1, "la", 3, 167, 15, 1], [1, "la", 1, 164, 17, 1], [1, "la", 1, 172, 28, 1], [1, "la", 3, 153, 24, 1], [1, "la", 4, 164, 91, 1], [1, "la", 4, 156, 82, 1], [1, "la", 4, 149, 90, 1], [1, "s", 0, 178, 85, 1], [1, "s", 1, 180, 85, 1], [1, "s", 0, 163, 96, 1], [1, "s", 0, 159, 86, 1], [1, "s", 0, 185, 78, 1], [1, "s", 1, 194, 75, 1], [1, "s", 2, 195, 76, 1], [1, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, 1], [1, "s", 2, 166, 97, 1], [1, "s", 2, 177, 97, 1], [1, "s", 0, 149, 85, 1], [1, "s", 1, 151, 83, 1], [1, "s", 1, 175, 74, 1], [1, "s", 0, 174, 72, 1], [1, "la", 3, 168, 71, 1], [1, "la", 3, 180, 60, 1], [1, "s", 0, 156, 63, 1], [1, "s", 0, 151, 47, 1], [1, "s", 1, 158, 64, 1], [1, "s", 1, 161, 75, 1], [1, "s", 1, 162, 51, 1], [1, "s", 1, 175, 45, 1], [1, "s", 1, 152, 47, 1], [1, "s", 1, 159, 33, 1], [1, "s", 1, 152, 18, 1], [1, "s", 0, 151, 13, 1], [1, "s", 0, 166, 22, 1], [1, "s", 0, 170, 63, 1], [1, "s", 2, 172, 62, 1], [1, "s", 2, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", 2, 150, 52, 1], [1, "la", 4, 178, 69, 1], [1, "la", 4, 177, 68, 1], [1, "la", 3, 176, 67, 1], [1, "la", 0, 174, 67, 1], [1, "la", 1, 172, 67, 1], [1, "la", 4, 171, 67, 1], [1, "la", 4, 170, 66, 1], [1, "la", 4, 169, 66, 1], [1, "la", 1, 168, 66, 1], [1, "la", 4, 167, 67, 1], [1, "la", 1, 166, 67, 1], [1, "la", 4, 165, 68, 1], [1, "la", 5, 164, 68, 1], [1, "la", 2, 163, 68, 1], [1, "la", 5, 162, 68, 1], [1, "la", 2, 161, 68, 1], [1, "la", 3, 153, 72, 1], [1, "la", 3, 163, 60, 1], [1, "la", 3, 164, 42, 1], [1, "la", 0, 155, 51, 1], [1, "la", 1, 168, 42, 1], [1, "la", 4, 158, 48, 1], [1, "la", 4, 178, 57, 1], [1, "la", 4, 151, 69, 1], [1, "la", 2, 170, 74, 1], [1, "la", 2, 160, 84, 1], [1, "la", 2, 174, 92, 1], [1, "la", 2, 188, 90, 1], [1, "la", 2, 209, 84, 1], [1, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", 5, 165, 57, 1], [1, "la", 5, 182, 58, 1], [1, "la", 5, 166, 44, 1], [1, "la", 1, 163, 39, 1], [1, "la", 1, 152, 53, 1], [1, "la", 1, 152, 37, 1], [1, "la", 2, 163, 13, 1], [1, "de", 12, 219, 12, 0], [1, "de", 14, 203, 13, 0], [1, "de", 15, 220, 19, 0], [1, "de", 12, 223, 15, 0], [1, "de", 12, 213, 10, 0], [1, "de", 37, 217, 19, 0], [1, "de", 38, 220, 14, 0], [1, "de", 38, 215, 10, 0], [1, "de", 40, 214, 14, 0], [1, "de", 40, 222, 16, 0], [1, "de", 40, 209, 18, 0], [1, "de", 37, 212, 18, 0], [1, "de", 38, 215, 26, 0], [1, "de", 37, 222, 25, 0], [1, "de", 40, 221, 29, 0], [1, "de", 12, 220, 27, 0], [1, "de", 13, 213, 27, 0], [1, "de", 14, 215, 30, 0], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, 0], [1, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [1, "de", 39, 215, 32, 0], [1, "de", 37, 211, 35, 0], [1, "de", 12, 223, 38, 0], [1, "de", 13, 213, 38, 0], [1, "de", 14, 222, 44, 0], [1, "de", 15, 208, 33, 0], [1, "de", 15, 206, 23, 0], [1, "de", 13, 205, 28, 0], [1, "de", 14, 211, 23, 0], [1, "de", 14, 201, 20, 0], [1, "de", 15, 198, 9, 0], [1, "de", 15, 199, 16, 0], [1, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, 9, 0], [1, "de", 40, 196, 12, 0], [1, "de", 40, 198, 18, 0], [1, "de", 37, 192, 11, 0], [1, "de", 37, 199, 24, 0], [1, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, 0], [1, "de", 39, 192, 24, 0], [1, "de", 40, 187, 23, 0], [1, "de", 38, 187, 18, 0], [1, "de", 39, 192, 18, 0], [1, "de", 37, 185, 15, 0], [1, "de", 12, 188, 15, 0], [1, "de", 13, 185, 13, 0], [1, "de", 14, 189, 9, 0], [1, "de", 15, 187, 22, 0], [1, "de", 15, 180, 9, 0], [1, "de", 12, 177, 14, 0], [1, "de", 14, 173, 9, 0], [1, "de", 14, 171, 15, 0], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, 13, 0], [1, "de", 39, 175, 9, 0], [1, "de", 40, 173, 14, 0], [1, "de", 37, 169, 11, 0], [1, "de", 37, 163, 10, 0], [1, "de", 38, 164, 15, 0], [1, "de", 39, 170, 20, 0], [1, "de", 40, 160, 17, 0], [1, "de", 40, 154, 10, 0], [1, "de", 40, 165, 23, 0], [1, "de", 40, 150, 19, 0], [1, "de", 37, 155, 16, 0], [1, "de", 39, 146, 10, 0], [1, "de", 12, 159, 12, 0], [1, "de", 13, 151, 9, 0], [1, "de", 14, 150, 14, 0], [1, "de", 15, 153, 19, 0], [1, "de", 13, 161, 25, 0], [1, "de", 14, 169, 25, 0], [1, "de", 15, 176, 25, 0], [1, "de", 12, 180, 29, 0], [1, "de", 12, 188, 31, 0], [1, "de", 14, 181, 36, 0], [1, "de", 37, 186, 33, 0], [1, "de", 38, 183, 26, 0], [1, "de", 39, 177, 21, 0], [1, "de", 40, 175, 31, 0], [1, "de", 37, 176, 39, 0], [1, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [1, "de", 38, 168, 45, 0], [1, "de", 38, 173, 45, 0], [1, "de", 39, 160, 35, 0], [1, "de", 40, 161, 42, 0], [1, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, 0], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, 0], [1, "de", 39, 149, 45, 0], [1, "de", 40, 150, 50, 0], [1, "de", 40, 160, 52, 0], [1, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, 0], [1, "de", 12, 167, 32, 0], [1, "de", 13, 158, 32, 0], [1, "de", 14, 149, 28, 0], [1, "de", 15, 163, 30, 0], [1, "de", 14, 158, 39, 0], [1, "de", 12, 171, 43, 0], [1, "de", 12, 174, 36, 0], [1, "de", 12, 151, 43, 0], [1, "de", 13, 152, 48, 0], [1, "de", 14, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, 0], [1, "de", 13, 183, 51, 0], [1, "de", 14, 186, 48, 0], [1, "de", 37, 182, 48, 0], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, 0], [1, "de", 40, 194, 37, 0], [1, "de", 39, 199, 44, 0], [1, "de", 38, 200, 49, 0], [1, "de", 37, 196, 54, 0], [1, "de", 12, 194, 40, 0], [1, "de", 13, 202, 45, 0], [1, "de", 14, 198, 47, 0], [1, "de", 15, 198, 55, 0], [1, "de", 15, 212, 54, 0], [1, "de", 15, 216, 63, 0], [1, "de", 14, 209, 62, 0], [1, "de", 12, 219, 60, 0], [1, "de", 12, 206, 56, 0], [1, "de", 12, 218, 72, 0], [1, "de", 12, 223, 67, 0], [1, "de", 12, 205, 64, 0], [1, "de", 12, 193, 63, 0], [1, "de", 14, 216, 80, 0], [1, "de", 14, 222, 87, 0], [1, "de", 38, 210, 53, 0], [1, "de", 37, 210, 47, 0], [1, "de", 37, 200, 63, 0], [1, "de", 37, 218, 62, 0], [1, "de", 37, 222, 60, 0], [1, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, 0], [1, "de", 38, 218, 55, 0], [1, "de", 38, 212, 61, 0], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, 0], [1, "de", 40, 222, 81, 0], [1, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [1, "de", 39, 207, 76, 0], [1, "de", 39, 208, 86, 0], [1, "de", 39, 218, 87, 0], [1, "de", 39, 222, 93, 0], [1, "de", 39, 216, 96, 0], [1, "de", 39, 209, 94, 0], [1, "de", 39, 201, 87, 0], [1, "de", 39, 198, 82, 0], [1, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [1, "de", 39, 202, 92, 0], [1, "de", 37, 194, 97, 0], [1, "de", 39, 204, 88, 0], [1, "de", 39, 189, 90, 0], [1, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, 0], [1, "de", 37, 183, 91, 0], [1, "de", 37, 186, 80, 0], [1, "de", 37, 191, 72, 0], [1, "de", 38, 184, 77, 0], [1, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [1, "de", 40, 178, 87, 0], [1, "de", 40, 174, 94, 0], [1, "de", 40, 192, 93, 0], [1, "de", 40, 165, 92, 0], [1, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [1, "de", 38, 164, 98, 0], [1, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [1, "de", 40, 148, 83, 0], [1, "de", 40, 160, 77, 0], [1, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, 0], [1, "de", 37, 161, 64, 0], [1, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, 0], [1, "de", 39, 174, 64, 0], [1, "de", 39, 175, 56, 0], [1, "de", 39, 149, 67, 0], [1, "de", 12, 218, 96, 0], [1, "de", 13, 212, 95, 0], [1, "de", 14, 204, 85, 0], [1, "de", 15, 215, 85, 0], [1, "de", 15, 197, 97, 0], [1, "de", 12, 198, 87, 0], [1, "de", 14, 196, 77, 0], [1, "de", 13, 194, 86, 0], [1, "de", 15, 181, 84, 0], [1, "de", 14, 184, 79, 0], [1, "de", 14, 188, 93, 0], [1, "de", 13, 180, 87, 0], [1, "de", 13, 178, 96, 0], [1, "de", 13, 163, 95, 0], [1, "de", 15, 172, 88, 0], [1, "de", 15, 176, 75, 0], [1, "de", 14, 172, 72, 0], [1, "de", 14, 169, 82, 0], [1, "de", 13, 164, 78, 0], [1, "de", 13, 158, 87, 0], [1, "de", 13, 149, 86, 0], [1, "de", 15, 154, 91, 0], [1, "de", 15, 160, 74, 0], [1, "de", 14, 152, 76, 0], [1, "de", 14, 158, 63, 0], [1, "de", 14, 150, 60, 0], [1, "de", 12, 169, 59, 0], [1, "de", 13, 173, 61, 0], [1, "cs", 1, 143, 104, 1], [1, "cs", 0, 141, 102, 1], [1, "cs", 3, 138, 102, 1], [1, "cs", 2, 139, 102, 1], [1, "cs", 2, 140, 102, 1], [1, "cs", 3, 143, 107, 1], [1, "cs", 0, 143, 106, 1], [1, "cs", 2, 143, 105, 1], [1, "cs", 2, 142, 103, 1], [1, "cs", 0, 142, 104, 1], [1, "cs", 2, 141, 103, 1], [1, "cs", 3, 142, 105, 1], [1, "cs", 3, 140, 103, 1], [1, "cs", 3, 141, 104, 1], [1, "la", 4, 151, 23, 1], [1, "la", 4, 150, 22, 1], [1, "la", 1, 149, 21, 1], [1, "la", 4, 148, 21, 1], [1, "la", 2, 147, 20, 1], [1, "la", 4, 147, 19, 1], [1, "la", 5, 147, 18, 1], [1, "la", 1, 147, 17, 1], [1, "la", 3, 144, 9, 1], [1, "la", 5, 147, 16, 1], [1, "la", 2, 147, 15, 1], [1, "la", 4, 147, 14, 1], [1, "la", 4, 145, 11, 1], [1, "la", 5, 145, 12, 1], [1, "la", 1, 146, 13, 1], [1, "la", 2, 145, 13, 1], [1, "la", 3, 155, 25, 1], [1, "la", 0, 155, 24, 1], [1, "la", 3, 153, 26, 1], [1, "cs", 0, 151, 24, 1], [1, "cs", 0, 153, 22, 1], [1, "cs", 3, 152, 22, 1], [1, "cs", 3, 154, 22, 1], [1, "cs", 1, 157, 26, 1], [1, "cs", 2, 157, 24, 1], [1, "cs", 2, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [1, "cs", 2, 152, 25, 1], [1, "cs", 2, 151, 25, 1], [1, "cs", 2, 156, 27, 1], [1, "cs", 2, 157, 23, 1], [1, "cs", 2, 157, 22, 1], [1, "cs", 3, 150, 24, 1], [1, "cs", 3, 150, 23, 1], [1, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, 0], [1, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, 0], [1, "de", 13, 156, 21, 0], [1, "de", 13, 147, 36, 0], [1, "de", 13, 161, 56, 0], [1, "de", 13, 147, 79, 0], [1, "de", 12, 157, 99, 0], [1, "de", 12, 172, 99, 0], [1, "la", 3, 143, 102, 1], [1, "la", 4, 149, 96, 1], [1, "la", 4, 145, 102, 1], [1, "la", 1, 148, 97, 1], [1, "la", 5, 148, 98, 1], [1, "cs", 3, 144, 104, 1], [1, "cs", 3, 144, 103, 1], [1, "cs", 3, 145, 103, 1], [1, "cs", 3, 145, 104, 1], [1, "cs", 3, 142, 101, 1], [1, "cs", 3, 143, 100, 1], [1, "cs", 3, 141, 101, 1], [1, "cs", 3, 142, 100, 1], [1, "cs", 0, 141, 100, 1], [1, "cs", 2, 140, 101, 1], [1, "cs", 2, 144, 105, 1], [1, "cs", 3, 146, 103, 1], [1, "cs", 3, 146, 102, 1], [1, "cs", 3, 150, 95, 1], [1, "cs", 0, 150, 97, 1], [1, "cs", 2, 151, 98, 1], [1, "cs", 0, 153, 97, 1], [1, "cs", 3, 153, 96, 1], [1, "cs", 2, 149, 95, 1], [1, "s", 0, 213, 127, 1], [1, "plm", 1, 214, 131, 0], [1, "plm", 1, 207, 128, 0], [1, "plm", 0, 208, 127, 0], [1, "s", 1, 207, 132, 1], [1, "s", 2, 208, 133, 1], [1, "plm", 0, 217, 132, 0], [1, "plm", 2, 186, 158, 0], [1, "plm", 0, 184, 160, 0], [1, "s", 1, 183, 156, 1], [1, "s", 2, 186, 159, 1], [1, "p", 0, 182, 157, 1], [1, "p", 0, 114, 205, 1], [1, "plm", 1, 117, 204, 0], [1, "plm", 0, 117, 205, 0], [1, "plm", 2, 112, 204, 0], [1, "s", 2, 114, 207, 1], [1, "s", 2, 115, 204, 1], [1, "plm", 2, 122, 151, 0], [1, "plm", 1, 123, 150, 0], [1, "plm", 1, 117, 151, 0], [1, "s", 0, 118, 150, 1], [1, "s", 1, 122, 152, 1], [1, "plm", 2, 156, 130, 0], [1, "plm", 1, 154, 127, 0], [1, "s", 0, 153, 128, 1], [1, "s", 2, 152, 130, 1], [1, "p", 0, 123, 65, 1], [1, "plm", 2, 125, 62, 0], [1, "plm", 1, 124, 62, 0], [1, "plm", 0, 120, 65, 0], [1, "s", 1, 125, 63, 1], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", 2, 145, 105, 1], [1, "cs", 2, 144, 107, 1], [1, "cs", 2, 141, 106, 1], [1, "cs", 2, 141, 105, 1], [1, "cs", 2, 140, 105, 1], [1, "cs", 2, 140, 104, 1], [1, "cs", 1, 138, 103, 1], [1, "cs", 0, 139, 104, 1], [1, "cs", 2, 139, 103, 1], [1, "cs", 2, 139, 105, 1], [1, "cs", 2, 142, 106, 1], [1, "cs", 2, 142, 107, 1], [1, "cs", 2, 139, 101, 1], [1, "de", 19, 27, 264, 0], [1, "la", 4, 147, 99, 1], [1, "la", 1, 146, 100, 1], [1, "la", 4, 145, 101, 1], [1, "cs", 1, 215, 47, 1], [1, "cs", 2, 216, 47, 1], [1, "cs", 2, 215, 48, 1], [1, "la", 4, 214, 45, 1], [1, "la", 4, 215, 45, 1], [1, "la", 0, 216, 46, 1], [1, "la", 4, 216, 48, 1], [1, "la", 4, 216, 49, 1], [1, "la", 4, 217, 50, 1], [1, "la", 3, 214, 49, 1], [1, "la", 4, 211, 45, 1], [1, "la", 3, 213, 47, 1], [1, "cs", 2, 224, 48, 1], [1, "plm", 2, 111, 243, 0], [1, "plm", 1, 108, 246, 0], [1, "s", 1, 110, 243, 1], [1, "s", 0, 108, 245, 1], [1, "s", 0, 121, 276, 1], [1, "plm", 2, 122, 277, 0], [1, "plm", 2, 117, 276, 0], [1, "plm", 1, 118, 277, 0], [1, "s", 1, 118, 278, 1], [1, "cs", 2, 66, 16, 1], [1, "cs", 3, 67, 16, 1], [1, "cs", 0, 67, 17, 1], [1, "cs", 2, 66, 17, 1], [1, "cs", 3, 66, 18, 1], [1, "cs", 3, 68, 17, 1], [1, "cs", 0, 36, 16, 1], [1, "cs", 2, 36, 17, 1], [1, "cs", 2, 36, 18, 1], [1, "cs", 3, 35, 17, 1], [1, "cs", 3, 36, 19, 1], [1, "cs", 3, 35, 18, 1], [1, "cs", 2, 66, 30, 1], [1, "cs", 2, 66, 23, 1], [1, "cs", 3, 66, 22, 1], [1, "cs", 3, 66, 31, 1], [1, "cs", 2, 36, 30, 1], [1, "cs", 2, 36, 23, 1], [1, "cs", 1, 36, 22, 1], [1, "cs", 2, 36, 31, 1], [1, "cs", 3, 42, 13, 1], [1, "cs", 0, 43, 13, 1], [1, "cs", 2, 44, 13, 1], [1, "cs", 3, 42, 16, 1], [1, "cs", 3, 41, 16, 1], [1, "cs", 3, 40, 16, 1], [1, "cs", 0, 42, 19, 1], [1, "cs", 3, 43, 19, 1], [1, "cs", 3, 44, 19, 1], [1, "cs", 3, 45, 19, 1], [1, "cs", 2, 46, 19, 1], [1, "cs", 0, 43, 22, 1], [1, "cs", 2, 42, 22, 1], [1, "cs", 1, 41, 22, 1], [1, "cs", 0, 40, 22, 1], [1, "cs", 3, 39, 17, 1], [1, "cs", 1, 44, 26, 1], [1, "cs", 2, 45, 26, 1], [1, "cs", 3, 46, 26, 1], [1, "cs", 0, 47, 26, 1], [1, "cs", 2, 48, 26, 1], [1, "cs", 3, 47, 25, 1], [1, "cs", 3, 43, 27, 1], [1, "cs", 1, 49, 32, 1], [1, "cs", 2, 50, 32, 1], [1, "cs", 2, 51, 32, 1], [1, "cs", 2, 52, 32, 1], [1, "d", 0, 51, 29, 1], [1, "d", 1, 53, 29, 1], [1, "d", 1, 49, 29, 1], [1, "cs", 3, 55, 31, 1], [1, "cs", 3, 54, 32, 1], [1, "cs", 3, 47, 31, 1], [1, "cs", 3, 48, 32, 1], [1, "cs", 0, 51, 33, 1], [1, "cs", 2, 52, 33, 1], [1, "cs", 2, 50, 33, 1], [1, "cs", 3, 56, 30, 1], [1, "cs", 3, 56, 31, 1], [1, "cs", 3, 46, 30, 1], [1, "cs", 3, 46, 31, 1], [1, "cs", 1, 53, 33, 1], [1, "cs", 2, 49, 33, 1], [1, "cs", 2, 53, 32, 1], [1, "cs", 0, 55, 32, 1], [1, "cs", 0, 47, 32, 1], [1, "d", 1, 54, 35, 1], [1, "fo", 2, 35, 15, 0], [1, "fo", 2, 36, 12, 0], [1, "fo", 2, 67, 15, 0], [1, "cs", 3, 60, 13, 1], [1, "cs", 2, 59, 13, 1], [1, "cs", 1, 58, 13, 1], [1, "cs", 3, 62, 16, 1], [1, "cs", 0, 61, 16, 1], [1, "cs", 3, 60, 16, 1], [1, "cs", 3, 63, 17, 1], [1, "cs", 2, 60, 19, 1], [1, "cs", 1, 59, 19, 1], [1, "cs", 3, 58, 19, 1], [1, "cs", 2, 57, 19, 1], [1, "cs", 2, 56, 19, 1], [1, "cs", 0, 55, 18, 1], [1, "cs", 2, 55, 17, 1], [1, "cs", 2, 63, 23, 1], [1, "cs", 0, 62, 22, 1], [1, "cs", 2, 61, 22, 1], [1, "cs", 1, 60, 22, 1], [1, "cs", 0, 59, 22, 1], [1, "cs", 2, 54, 26, 1], [1, "cs", 2, 55, 26, 1], [1, "cs", 2, 56, 26, 1], [1, "cs", 1, 57, 26, 1], [1, "cs", 2, 58, 26, 1], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, 1], [1, "cs", 2, 68, 15, 1], [1, "cs", 3, 69, 15, 1], [1, "cs", 3, 70, 15, 1], [1, "cs", 3, 70, 14, 1], [1, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, 16, 1], [1, "cs", 2, 71, 13, 1], [1, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, 13, 1], [1, "cs", 3, 70, 8, 1], [1, "cs", 3, 71, 8, 1], [1, "cs", 2, 72, 8, 1], [1, "cs", 0, 73, 8, 1], [1, "cs", 3, 74, 9, 1], [1, "cs", 3, 74, 8, 1], [1, "cs", 0, 75, 8, 1], [1, "cs", 3, 76, 8, 1], [1, "cs", 3, 75, 9, 1], [1, "cs", 3, 75, 10, 1], [1, "cs", 0, 76, 10, 1], [1, "cs", 0, 76, 16, 1], [1, "cs", 3, 76, 15, 1], [1, "cs", 3, 75, 16, 1], [1, "cs", 2, 77, 11, 1], [1, "cs", 2, 77, 14, 1], [1, "cs", 3, 77, 12, 1], [1, "cs", 3, 77, 13, 1], [1, "cs", 3, 77, 15, 1], [1, "cs", 0, 74, 18, 1], [1, "cs", 1, 75, 17, 1], [1, "cs", 2, 74, 17, 1], [1, "cs", 3, 73, 19, 1], [1, "cs", 3, 67, 23, 1], [1, "cs", 0, 68, 23, 1], [1, "cs", 0, 72, 20, 1], [1, "cs", 2, 73, 20, 1], [1, "cs", 2, 74, 19, 1], [1, "cs", 2, 74, 36, 1], [1, "cs", 2, 77, 27, 1], [1, "cs", 2, 76, 26, 1], [1, "cs", 2, 75, 26, 1], [1, "cs", 0, 74, 26, 1], [1, "cs", 2, 75, 25, 1], [1, "cs", 0, 76, 25, 1], [1, "cs", 1, 77, 23, 1], [1, "cs", 2, 77, 16, 1], [1, "cs", 2, 76, 17, 1], [1, "cs", 2, 76, 24, 1], [1, "cs", 2, 77, 24, 1], [1, "cs", 2, 77, 25, 1], [1, "cs", 2, 77, 26, 1], [1, "cs", 1, 75, 27, 1], [1, "cs", 3, 76, 27, 1], [1, "cs", 2, 67, 24, 1], [1, "cs", 2, 66, 24, 1], [1, "cs", 2, 73, 26, 1], [1, "cs", 2, 74, 27, 1], [1, "cs", 2, 74, 25, 1], [1, "cs", 2, 66, 19, 1], [1, "cs", 2, 66, 20, 1], [1, "cs", 2, 66, 21, 1], [1, "cs", 2, 67, 18, 1], [1, "cs", 2, 67, 22, 1], [1, "cs", 0, 77, 36, 1], [1, "cs", 0, 77, 32, 1], [1, "cs", 1, 75, 35, 1], [1, "cs", 2, 75, 36, 1], [1, "cs", 2, 76, 36, 1], [1, "cs", 2, 77, 35, 1], [1, "cs", 2, 77, 34, 1], [1, "cs", 2, 76, 35, 1], [1, "cs", 2, 77, 33, 1], [1, "cs", 2, 77, 31, 1], [1, "cs", 0, 77, 29, 1], [1, "cs", 0, 71, 32, 1], [1, "cs", 0, 76, 34, 1], [1, "cs", 2, 77, 30, 1], [1, "cs", 2, 77, 28, 1], [1, "cs", 2, 76, 28, 1], [1, "cs", 2, 75, 28, 1], [1, "cs", 2, 76, 29, 1], [1, "cs", 2, 76, 33, 1], [1, "cs", 2, 70, 32, 1], [1, "cs", 2, 69, 31, 1], [1, "cs", 0, 68, 31, 1], [1, "cs", 2, 67, 31, 1], [1, "cs", 2, 67, 30, 1], [1, "cs", 2, 69, 32, 1], [1, "cs", 1, 67, 32, 1], [1, "cs", 2, 68, 32, 1], [1, "cs", 2, 66, 32, 1], [1, "cs", 2, 66, 33, 1], [1, "cs", 2, 67, 33, 1], [1, "cs", 2, 70, 33, 1], [1, "cs", 2, 69, 33, 1], [1, "cs", 2, 68, 33, 1], [1, "cs", 0, 68, 34, 1], [1, "cs", 1, 66, 35, 1], [1, "cs", 2, 67, 34, 1], [1, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, 1], [1, "cs", 2, 64, 36, 1], [1, "cs", 2, 65, 36, 1], [1, "cs", 2, 67, 35, 1], [1, "cs", 2, 66, 36, 1], [1, "cs", 2, 69, 34, 1], [1, "cs", 2, 68, 35, 1], [1, "cs", 2, 76, 9, 1], [1, "cs", 2, 77, 9, 1], [1, "cs", 2, 77, 8, 1], [1, "cs", 2, 77, 10, 1], [1, "cs", 2, 78, 8, 1], [1, "cs", 2, 78, 9, 1], [1, "cs", 2, 78, 10, 1], [1, "cs", 2, 78, 11, 1], [1, "cs", 2, 78, 12, 1], [1, "cs", 2, 78, 13, 1], [1, "cs", 0, 79, 9, 1], [1, "cs", 1, 79, 11, 1], [1, "cs", 3, 79, 8, 1], [1, "cs", 3, 79, 10, 1], [1, "cs", 3, 79, 12, 1], [1, "cs", 3, 80, 8, 1], [1, "cs", 1, 80, 10, 1], [1, "cs", 2, 80, 9, 1], [1, "cs", 2, 80, 11, 1], [1, "cs", 2, 81, 8, 1], [1, "cs", 2, 81, 9, 1], [1, "cs", 2, 81, 10, 1], [1, "cs", 2, 78, 14, 1], [1, "cs", 2, 79, 13, 1], [1, "cs", 2, 78, 15, 1], [1, "cs", 2, 80, 12, 1], [1, "cs", 0, 79, 14, 1], [1, "cs", 0, 82, 9, 1], [1, "cs", 2, 82, 8, 1], [1, "cs", 2, 82, 10, 1], [1, "cs", 2, 81, 11, 1], [1, "cs", 3, 80, 13, 1], [1, "cs", 1, 78, 30, 1], [1, "cs", 1, 78, 34, 1], [1, "cs", 1, 78, 27, 1], [1, "cs", 0, 78, 25, 1], [1, "cs", 0, 79, 29, 1], [1, "cs", 0, 79, 32, 1], [1, "cs", 0, 79, 35, 1], [1, "cs", 2, 78, 35, 1], [1, "cs", 2, 78, 36, 1], [1, "cs", 2, 79, 34, 1], [1, "cs", 2, 78, 33, 1], [1, "cs", 2, 79, 33, 1], [1, "cs", 2, 78, 32, 1], [1, "cs", 2, 78, 31, 1], [1, "cs", 2, 79, 31, 1], [1, "cs", 2, 79, 30, 1], [1, "cs", 2, 78, 29, 1], [1, "cs", 2, 78, 28, 1], [1, "cs", 2, 79, 28, 1], [1, "cs", 2, 79, 27, 1], [1, "cs", 2, 78, 26, 1], [1, "cs", 2, 79, 26, 1], [1, "cs", 2, 78, 24, 1], [1, "cs", 2, 80, 34, 1], [1, "cs", 2, 80, 33, 1], [1, "cs", 2, 80, 31, 1], [1, "cs", 2, 80, 30, 1], [1, "cs", 2, 80, 32, 1], [1, "cs", 2, 80, 29, 1], [1, "cs", 2, 80, 28, 1], [1, "cs", 2, 80, 27, 1], [1, "cs", 0, 81, 30, 1], [1, "cs", 1, 81, 32, 1], [1, "cs", 1, 81, 28, 1], [1, "cs", 2, 81, 29, 1], [1, "cs", 2, 81, 31, 1], [1, "cs", 2, 81, 33, 1], [1, "cs", 2, 82, 30, 1], [1, "cs", 2, 82, 31, 1], [1, "cs", 2, 82, 32, 1], [1, "cs", 0, 37, 36, 1], [1, "cs", 2, 38, 36, 1], [1, "cs", 2, 37, 35, 1], [1, "cs", 2, 36, 36, 1], [1, "cs", 2, 34, 35, 1], [1, "cs", 2, 35, 35, 1], [1, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, 1], [1, "cs", 1, 35, 34, 1], [1, "cs", 2, 36, 34, 1], [1, "cs", 2, 34, 34, 1], [1, "cs", 2, 36, 33, 1], [1, "cs", 2, 35, 33, 1], [1, "cs", 2, 34, 33, 1], [1, "cs", 2, 33, 33, 1], [1, "cs", 2, 31, 32, 1], [1, "cs", 1, 36, 32, 1], [1, "cs", 1, 32, 32, 1], [1, "cs", 2, 35, 32, 1], [1, "cs", 2, 33, 32, 1], [1, "cs", 2, 32, 33, 1], [1, "cs", 2, 33, 31, 1], [1, "cs", 2, 34, 31, 1], [1, "cs", 2, 35, 31, 1], [1, "cs", 0, 34, 32, 1], [1, "cs", 2, 35, 30, 1], [1, "cs", 1, 39, 23, 1], [1, "cs", 3, 39, 22, 1], [1, "cs", 3, 36, 24, 1], [1, "cs", 3, 35, 24, 1], [1, "cs", 2, 34, 23, 1], [1, "cs", 2, 35, 23, 1], [1, "cs", 2, 36, 20, 1], [1, "cs", 2, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [1, "cs", 2, 35, 16, 1], [1, "cs", 2, 34, 16, 1], [1, "cs", 2, 33, 16, 1], [1, "cs", 0, 34, 17, 1], [1, "cs", 0, 32, 15, 1], [1, "cs", 2, 31, 14, 1], [1, "cs", 3, 30, 13, 1], [1, "cs", 1, 33, 15, 1], [1, "cs", 1, 31, 13, 1], [1, "cs", 2, 32, 14, 1], [1, "cs", 0, 31, 8, 1], [1, "cs", 2, 32, 8, 1], [1, "cs", 2, 25, 13, 1], [1, "cs", 0, 25, 12, 1], [1, "cs", 2, 25, 11, 1], [1, "cs", 3, 25, 10, 1], [1, "cs", 0, 25, 9, 1], [1, "cs", 2, 25, 8, 1], [1, "cs", 2, 26, 8, 1], [1, "cs", 2, 27, 8, 1], [1, "cs", 2, 28, 8, 1], [1, "cs", 2, 29, 8, 1], [1, "cs", 2, 30, 8, 1], [1, "cs", 2, 26, 9, 1], [1, "cs", 2, 27, 9, 1], [1, "cs", 2, 26, 10, 1], [1, "cs", 1, 27, 10, 1], [1, "cs", 3, 28, 9, 1], [1, "cs", 3, 25, 14, 1], [1, "cs", 0, 25, 15, 1], [1, "cs", 2, 26, 15, 1], [1, "cs", 3, 27, 16, 1], [1, "cs", 0, 28, 17, 1], [1, "cs", 1, 29, 18, 1], [1, "cs", 2, 26, 16, 1], [1, "cs", 2, 25, 16, 1], [1, "cs", 2, 27, 17, 1], [1, "cs", 2, 26, 17, 1], [1, "cs", 1, 27, 18, 1], [1, "cs", 2, 28, 18, 1], [1, "cs", 2, 30, 19, 1], [1, "cs", 2, 29, 19, 1], [1, "cs", 2, 24, 14, 1], [1, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, 1], [1, "cs", 2, 24, 10, 1], [1, "cs", 2, 24, 11, 1], [1, "cs", 2, 24, 12, 1], [1, "cs", 2, 24, 13, 1], [1, "cs", 1, 23, 10, 1], [1, "cs", 0, 22, 8, 1], [1, "cs", 0, 22, 12, 1], [1, "cs", 1, 23, 8, 1], [1, "cs", 2, 24, 8, 1], [1, "cs", 2, 24, 9, 1], [1, "cs", 2, 23, 9, 1], [1, "cs", 2, 22, 9, 1], [1, "cs", 2, 22, 10, 1], [1, "cs", 2, 22, 11, 1], [1, "cs", 2, 23, 11, 1], [1, "cs", 2, 23, 12, 1], [1, "cs", 2, 23, 13, 1], [1, "cs", 2, 22, 13, 1], [1, "cs", 2, 21, 9, 1], [1, "cs", 2, 21, 8, 1], [1, "cs", 2, 29, 25, 1], [1, "cs", 2, 25, 24, 1], [1, "cs", 2, 26, 25, 1], [1, "cs", 2, 27, 25, 1], [1, "cs", 0, 28, 25, 1], [1, "cs", 1, 25, 23, 1], [1, "cs", 2, 26, 24, 1], [1, "cs", 0, 24, 25, 1], [1, "cs", 3, 23, 24, 1], [1, "cs", 3, 24, 24, 1], [1, "cs", 3, 25, 25, 1], [1, "cs", 3, 23, 25, 1], [1, "cs", 1, 22, 26, 1], [1, "cs", 1, 26, 26, 1], [1, "cs", 1, 29, 26, 1], [1, "cs", 2, 23, 26, 1], [1, "cs", 2, 24, 26, 1], [1, "cs", 2, 25, 26, 1], [1, "cs", 2, 27, 26, 1], [1, "cs", 2, 28, 26, 1], [1, "cs", 2, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [1, "cs", 2, 28, 28, 1], [1, "cs", 1, 26, 29, 1], [1, "cs", 0, 28, 27, 1], [1, "cs", 2, 27, 28, 1], [1, "cs", 2, 27, 27, 1], [1, "cs", 2, 26, 28, 1], [1, "cs", 2, 26, 27, 1], [1, "cs", 2, 25, 28, 1], [1, "cs", 2, 25, 27, 1], [1, "cs", 2, 23, 27, 1], [1, "cs", 2, 22, 27, 1], [1, "cs", 2, 24, 27, 1], [1, "cs", 0, 24, 28, 1], [1, "cs", 0, 25, 32, 1], [1, "cs", 1, 24, 30, 1], [1, "cs", 2, 25, 31, 1], [1, "cs", 2, 25, 30, 1], [1, "cs", 2, 25, 29, 1], [1, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, 1], [1, "cs", 2, 26, 33, 1], [1, "cs", 0, 26, 34, 1], [1, "cs", 2, 27, 35, 1], [1, "cs", 2, 22, 28, 1], [1, "cs", 2, 23, 28, 1], [1, "cs", 2, 24, 31, 1], [1, "cs", 2, 24, 32, 1], [1, "cs", 2, 25, 33, 1], [1, "cs", 2, 26, 35, 1], [1, "cs", 2, 24, 33, 1], [1, "cs", 2, 25, 34, 1], [1, "cs", 1, 22, 29, 1], [1, "cs", 1, 24, 34, 1], [1, "cs", 0, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [1, "cs", 2, 24, 35, 1], [1, "cs", 2, 23, 34, 1], [1, "cs", 2, 23, 33, 1], [1, "cs", 0, 22, 33, 1], [1, "cs", 1, 23, 32, 1], [1, "cs", 2, 22, 32, 1], [1, "cs", 2, 23, 31, 1], [1, "cs", 2, 23, 30, 1], [1, "cs", 2, 22, 30, 1], [1, "cs", 2, 22, 31, 1], [1, "cs", 1, 21, 31, 1], [1, "cs", 0, 21, 29, 1], [1, "cs", 2, 21, 30, 1], [1, "cs", 2, 24, 36, 1], [1, "cs", 2, 26, 36, 1], [1, "cs", 2, 25, 36, 1], [1, "cs", 2, 27, 36, 1], [1, "cs", 2, 28, 36, 1], [1, "d", 2, 83, 65, 1], [1, "d", 2, 16, 67, 1], [1, "g", 0, 15, 17, 1], [1, "s", 0, 18, 13, 1], [1, "s", 0, 85, 11, 1], [1, "f", 0, 41, 102, 1], [1, "f", 0, 42, 124, 1], [1, "f", 0, 64, 116, 1], [1, "f", 0, 74, 104, 1], [1, "f", 0, 70, 87, 1], [1, "f", 0, 27, 96, 1], [1, "f", 0, 22, 79, 1], [1, "f", 0, 20, 117, 1], [1, "f", 0, 30, 137, 1], [1, "f", 0, 59, 146, 1], [1, "f", 0, 52, 147, 1], [1, "f", 0, 20, 149, 1], [1, "f", 0, 36, 146, 1], [1, "f", 0, 62, 124, 1], [1, "g", 1, 34, 121, 1], [1, "g", 1, 52, 116, 1], [1, "g", 1, 78, 116, 1], [1, "g", 1, 71, 129, 1], [1, "s", 0, 53, 100, 1], [1, "s", 0, 73, 111, 1], [1, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, 1], [1, "s", 0, 19, 102, 1], [1, "s", 0, 18, 127, 1], [1, "s", 0, 35, 159, 1], [1, "s", 0, 65, 54, 1], [1, "s", 0, 44, 52, 1], [1, "s", 0, 26, 51, 1], [1, "f", 1, 56, 136, 1], [1, "f", 1, 41, 133, 1], [1, "f", 1, 80, 120, 1], [1, "f", 1, 16, 117, 1], [1, "f", 1, 13, 99, 1], [1, "f", 1, 17, 89, 1], [1, "f", 1, 90, 98, 1], [1, "f", 1, 84, 95, 1], [1, "f", 1, 16, 57, 1], [1, "f", 1, 77, 53, 1], [1, "d", 1, 48, 35, 1], [1, "de", 8, 33, 13, 0], [1, "de", 8, 30, 9, 0], [1, "de", 9, 32, 30, 0], [1, "de", 10, 30, 25, 0], [1, "de", 10, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, 0], [1, "de", 9, 70, 22, 0], [1, "de", 10, 70, 16, 0], [1, "de", 10, 75, 11, 0], [1, "de", 8, 68, 10, 0], [1, "de", 8, 75, 30, 0], [1, "de", 11, 71, 33, 0], [1, "de", 11, 72, 25, 0], [1, "de", 11, 64, 25, 0], [1, "de", 11, 52, 10, 0], [1, "de", 11, 31, 15, 0], [1, "de", 30, 29, 14, 0], [1, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, 0], [1, "de", 30, 30, 29, 0], [1, "de", 30, 71, 29, 0], [1, "de", 28, 68, 25, 0], [1, "de", 28, 75, 15, 0], [1, "de", 27, 67, 19, 0], [1, "de", 29, 72, 10, 0], [1, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, 0], [1, "fo", 1, 39, 12, 0], [1, "fo", 1, 34, 14, 0], [1, "fo", 1, 74, 28, 0], [1, "fo", 2, 74, 29, 0], [1, "fo", 2, 69, 30, 0], [1, "fo", 2, 77, 22, 0], [1, "fo", 2, 74, 21, 0], [1, "fo", 2, 76, 18, 0], [1, "fo", 1, 78, 17, 0], [1, "fo", 1, 28, 19, 0], [1, "fo", 2, 27, 24, 0], [1, "fo", 2, 24, 17, 0], [1, "fo", 2, 29, 21, 0], [1, "fo", 1, 27, 32, 0], [1, "fo", 2, 30, 33, 0], [1, "fo", 1, 29, 28, 0], [1, "fo", 2, 28, 31, 0], [1, "fo", 2, 20, 24, 0], [1, "fo", 2, 20, 26, 0], [1, "fo", 2, 23, 16, 0], [1, "fo", 2, 11, 25, 0], [1, "de", 33, 29, 22, 0], [1, "de", 34, 32, 25, 0], [1, "de", 34, 30, 18, 0], [1, "de", 33, 78, 18, 0], [1, "de", 33, 73, 35, 0], [1, "de", 36, 72, 23, 0], [1, "de", 35, 25, 18, 0], [1, "d", 1, 83, 41, 1], [1, "d", 1, 17, 40, 1], [1, "cs", 2, 224, 104, 1], [1, "cs", 0, 224, 105, 1], [1, "cs", 3, 224, 106, 1], [1, "la", 3, 216, 128, 1], [1, "la", 0, 215, 126, 1], [1, "s", 0, 216, 130, 1], [1, "s", 1, 217, 129, 1], [1, "s", 0, 218, 128, 1], [1, "s", 1, 217, 127, 1], [1, "s", 0, 217, 126, 1], [1, "s", 1, 217, 125, 1], [1, "s", 0, 216, 124, 1], [1, "s", 1, 215, 124, 1], [1, "s", 0, 214, 124, 1], [1, "s", 1, 213, 125, 1], [1, "s", 0, 213, 126, 1], [1, "plm", 2, 217, 130, 0], [1, "plm", 2, 212, 125, 0], [1, "p", 0, 214, 134, 1], [1, "s", 1, 211, 126, 1], [1, "b", 1, 45, 277, 0], [1, "b", 1, 50, 286, 0], [1, "b", 2, 51, 284, 0], [1, "b", 1, 47, 287, 0], [1, "b", 0, 39, 285, 0], [1, "b", 3, 40, 283, 0], [1, "b", 0, 52, 283, 0], [1, "b", 1, 51, 280, 0], [1, "g", 0, 45, 269, 1], [1, "p", 0, 55, 281, 1], [1, "b", 1, 5, 172, 0], [1, "b", 2, 6, 172, 0], [1, "t", 5, 6, 171, 0], [1, "t", 1, 5, 170, 0], [1, "t", 1, 5, 164, 0], [1, "t", 3, 6, 164, 0], [1, "b", 0, 6, 165, 0], [1, "t", 3, 5, 165, 0], [1, "b", 2, 6, 166, 0], [1, "t", 4, 5, 166, 0], [1, "t", 4, 6, 167, 0], [1, "t", 2, 6, 168, 0], [1, "t", 0, 6, 169, 0], [1, "t", 4, 6, 170, 0], [1, "t", 0, 5, 167, 0], [1, "t", 2, 5, 169, 0], [1, "b", 0, 5, 168, 0], [1, "s", 1, 7, 153, 1], [1, "s", 2, 7, 151, 1], [1, "de", 5, 7, 152, 0], [1, "t", 1, 5, 154, 0], [1, "b", 0, 6, 154, 0], [1, "t", 2, 6, 155, 0], [1, "b", 2, 6, 156, 0], [1, "t", 2, 5, 157, 0], [1, "t", 4, 5, 155, 0], [1, "b", 0, 6, 157, 0], [1, "t", 1, 5, 156, 0], [1, "t", 5, 6, 158, 0], [1, "b", 2, 6, 159, 0], [1, "b", 0, 6, 162, 0], [1, "t", 4, 6, 163, 0], [1, "t", 4, 6, 161, 0], [1, "b", 1, 6, 160, 0], [1, "b", 2, 5, 163, 0], [1, "b", 2, 5, 158, 0], [1, "b", 2, 5, 161, 0], [1, "t", 1, 5, 162, 0], [1, "t", 1, 5, 160, 0], [1, "b", 1, 85, 176, 0], [1, "b", 2, 83, 178, 0], [1, "s", 1, 82, 177, 1], [1, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [1, "t", 3, 73, 174, 0], [1, "t", 5, 72, 175, 0], [1, "t", 5, 87, 173, 0], [1, "de", 2, 76, 175, 0], [1, "de", 3, 77, 171, 0], [1, "de", 3, 86, 177, 0], [1, "de", 2, 71, 175, 0], [1, "s", 1, 70, 174, 1], [1, "r", 48, 174, 0], [1, "r", 49, 175, 0], [1, "r", 50, 175, 0], [1, "r", 51, 175, 0], [1, "r", 51, 174, 0], [1, "r", 50, 174, 0], [1, "r", 49, 174, 0], [1, "r", 52, 175, 0], [1, "r", 52, 176, 0], [1, "r", 51, 176, 0], [1, "r", 50, 176, 0], [1, "r", 49, 176, 0], [1, "r", 48, 175, 0], [1, "r", 47, 175, 0], [1, "r", 48, 176, 0], [1, "r", 69, 163, 0], [1, "r", 70, 163, 0], [1, "r", 71, 163, 0], [1, "r", 73, 163, 0], [1, "r", 72, 163, 0], [1, "r", 73, 164, 0], [1, "r", 72, 164, 0], [1, "r", 71, 164, 0], [1, "r", 70, 164, 0], [1, "r", 69, 164, 0], [1, "r", 68, 164, 0], [1, "r", 68, 165, 0], [1, "r", 69, 165, 0], [1, "r", 70, 165, 0], [1, "r", 71, 165, 0], [1, "r", 72, 165, 0], [1, "r", 74, 164, 0], [1, "r", 73, 165, 0], [1, "r", 72, 166, 0], [1, "r", 71, 166, 0], [1, "r", 70, 166, 0], [1, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, 0], [1, "r", 26, 164, 0], [1, "r", 28, 165, 0], [1, "r", 26, 165, 0], [1, "r", 27, 165, 0], [1, "r", 25, 165, 0], [1, "r", 24, 165, 0], [1, "r", 23, 165, 0], [1, "r", 22, 165, 0], [1, "r", 21, 165, 0], [1, "r", 21, 166, 0], [1, "r", 22, 166, 0], [1, "r", 23, 166, 0], [1, "r", 24, 166, 0], [1, "r", 25, 166, 0], [1, "r", 26, 166, 0], [1, "r", 27, 166, 0], [1, "r", 28, 166, 0], [1, "r", 28, 167, 0], [1, "r", 26, 167, 0], [1, "r", 25, 167, 0], [1, "r", 24, 167, 0], [1, "r", 23, 167, 0], [1, "r", 22, 167, 0], [1, "r", 27, 167, 0], [1, "r", 29, 166, 0], [1, "r", 29, 167, 0], [1, "r", 28, 168, 0], [1, "r", 27, 168, 0], [1, "r", 26, 168, 0], [1, "r", 25, 168, 0], [1, "r", 24, 168, 0], [1, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, 0], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [1, "r", 23, 169, 0], [1, "r", 22, 168, 0], [1, "r", 21, 167, 0], [1, "s", 1, 52, 174, 1], [1, "t", 3, 50, 177, 0], [1, "t", 4, 49, 177, 0], [1, "b", 0, 47, 174, 0], [1, "b", 0, 69, 166, 0], [1, "t", 2, 68, 166, 0], [1, "t", 5, 74, 163, 0], [1, "t", 1, 73, 162, 0], [1, "s", 0, 73, 166, 1], [1, "s", 2, 76, 165, 1], [1, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, 1], [1, "p", 0, 61, 162, 1], [1, "p", 0, 42, 170, 1], [1, "p", 0, 20, 174, 1], [1, "p", 0, 16, 160, 1], [1, "b", 1, 23, 164, 0], [1, "b", 1, 28, 169, 0], [1, "b", 2, 29, 168, 0], [1, "b", 2, 16, 170, 0], [1, "t", 1, 15, 171, 0], [1, "t", 5, 13, 175, 0], [1, "t", 5, 19, 166, 0], [1, "t", 5, 26, 163, 0], [1, "s", 1, 29, 165, 1], [1, "t", 5, 11, 167, 0], [1, "t", 0, 29, 176, 0], [1, "b", 2, 30, 175, 0], [1, "t", 2, 24, 177, 0], [1, "b", 1, 37, 174, 0], [1, "b", 0, 35, 172, 0], [1, "b", 3, 37, 170, 0], [1, "t", 4, 38, 169, 0], [1, "t", 4, 34, 173, 0], [1, "t", 5, 38, 175, 0], [1, "b", 2, 39, 173, 0], [1, "t", 3, 37, 176, 0], [1, "t", 4, 30, 168, 0], [1, "s", 2, 35, 176, 1], [1, "s", 1, 41, 175, 1], [1, "b", 2, 53, 176, 0], [1, "t", 5, 55, 173, 0], [1, "t", 5, 45, 170, 0], [1, "b", 1, 53, 162, 0], [1, "b", 0, 50, 164, 0], [1, "t", 2, 54, 163, 0], [1, "t", 3, 49, 165, 0], [1, "t", 4, 48, 160, 0], [1, "t", 4, 57, 164, 0], [1, "t", 4, 66, 162, 0], [1, "b", 1, 86, 161, 0], [1, "b", 2, 81, 163, 0], [1, "t", 3, 85, 162, 0], [1, "t", 5, 81, 162, 0], [1, "t", 5, 88, 163, 0], [1, "t", 1, 84, 166, 0], [1, "t", 5, 72, 160, 0], [1, "t", 5, 70, 170, 0], [1, "s", 1, 57, 162, 1], [1, "b", 1, 39, 161, 0], [1, "b", 0, 34, 164, 0], [1, "b", 2, 54, 164, 0], [1, "t", 1, 59, 169, 0], [1, "t", 3, 60, 170, 0], [1, "t", 4, 63, 169, 0], [1, "t", 4, 63, 174, 0], [1, "t", 1, 62, 175, 0], [1, "t", 5, 40, 162, 0], [1, "t", 1, 63, 180, 0], [1, "t", 2, 64, 179, 0], [1, "t", 2, 35, 165, 0], [1, "s", 1, 63, 173, 1], [1, "s", 2, 40, 165, 1], [1, "b", 0, 46, 169, 0], [1, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, 0], [1, "de", 22, 83, 175, 0], [1, "de", 22, 78, 175, 0], [1, "de", 19, 72, 176, 0], [1, "de", 19, 68, 168, 0], [1, "de", 19, 65, 163, 0], [1, "de", 19, 75, 162, 0], [1, "de", 19, 80, 162, 0], [1, "de", 19, 88, 159, 0], [1, "de", 19, 87, 164, 0], [1, "de", 19, 61, 177, 0], [1, "de", 19, 59, 172, 0], [1, "de", 19, 59, 167, 0], [1, "de", 19, 53, 165, 0], [1, "de", 19, 56, 163, 0], [1, "de", 19, 51, 161, 0], [1, "de", 19, 48, 167, 0], [1, "de", 19, 47, 170, 0], [1, "de", 19, 41, 163, 0], [1, "de", 19, 37, 161, 0], [1, "de", 19, 36, 166, 0], [1, "de", 19, 36, 171, 0], [1, "de", 19, 34, 174, 0], [1, "de", 19, 40, 172, 0], [1, "de", 19, 38, 177, 0], [1, "de", 19, 42, 176, 0], [1, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, 0], [1, "de", 19, 64, 181, 0], [1, "de", 19, 64, 175, 0], [1, "de", 19, 79, 172, 0], [1, "de", 19, 30, 170, 0], [1, "de", 19, 17, 168, 0], [1, "de", 19, 14, 173, 0], [1, "de", 19, 12, 162, 0], [1, "de", 19, 9, 167, 0], [1, "de", 19, 20, 161, 0], [1, "de", 19, 27, 162, 0], [1, "de", 19, 83, 195, 0], [1, "de", 2, 85, 163, 0], [1, "de", 2, 80, 164, 0], [1, "de", 2, 84, 169, 0], [1, "de", 2, 55, 165, 0], [1, "de", 3, 46, 163, 0], [1, "de", 2, 66, 169, 0], [1, "de", 0, 63, 175, 0], [1, "de", 0, 34, 164, 0], [1, "de", 0, 18, 160, 0], [1, "de", 2, 40, 160, 0], [1, "de", 2, 53, 160, 0], [1, "de", 2, 14, 170, 0], [1, "de", 2, 19, 175, 0], [1, "de", 2, 23, 176, 0], [1, "de", 5, 60, 147, 0], [1, "de", 33, 59, 160, 0], [1, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [1, "de", 33, 62, 140, 0], [1, "de", 33, 43, 127, 0], [1, "de", 33, 18, 129, 0], [1, "de", 33, 50, 134, 0], [1, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, 0], [1, "b", 1, 44, 156, 0], [1, "t", 2, 45, 157, 0], [1, "b", 0, 75, 156, 0], [1, "t", 3, 76, 157, 0], [1, "t", 5, 62, 157, 0], [1, "t", 5, 79, 156, 0], [1, "t", 5, 41, 156, 0], [1, "b", 1, 28, 156, 0], [1, "t", 2, 27, 157, 0], [1, "t", 4, 21, 156, 0], [1, "t", 4, 56, 159, 0], [1, "f", 1, 94, 153, 1], [1, "f", 2, 93, 153, 1], [1, "f", 2, 99, 153, 1], [1, "f", 1, 98, 153, 1], [1, "f", 0, 97, 153, 1], [1, "f", 1, 96, 153, 1], [1, "s", 1, 7, 149, 1], [1, "de", 4, 7, 150, 0], [1, "b", 3, 43, 281, 0], [1, "de", 50, 24, 39, 0], [1, "de", 50, 21, 39, 0], [1, "de", 50, 22, 43, 0], [1, "de", 50, 15, 34, 0], [1, "de", 50, 18, 26, 0], [1, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, 0], [1, "de", 50, 77, 44, 0], [1, "de", 50, 71, 41, 0], [1, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [1, "de", 50, 20, 41, 0], [1, "de", 50, 18, 21, 0], [1, "de", 50, 15, 21, 0], [1, "de", 50, 18, 19, 0], [1, "de", 50, 17, 17, 0], [1, "de", 50, 18, 10, 0], [1, "de", 50, 18, 9, 0], [1, "de", 50, 52, 41, 0], [1, "de", 50, 82, 39, 0], [1, "de", 50, 86, 38, 0], [1, "de", 50, 84, 31, 0], [1, "de", 50, 86, 30, 0], [1, "de", 50, 84, 26, 0], [1, "de", 50, 86, 23, 0], [1, "de", 50, 86, 14, 0], [1, "de", 50, 29, 42, 0], [1, "de", 9, 74, 37, 0], [1, "de", 9, 76, 22, 0], [1, "de", 10, 79, 24, 0], [1, "de", 11, 77, 17, 0], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, 0], [1, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [1, "de", 28, 27, 31, 0], [1, "de", 28, 69, 36, 0], [1, "de", 28, 80, 20, 0], [1, "de", 51, 24, 155, 0], [1, "de", 51, 7, 154, 0], [1, "de", 51, 11, 154, 0], [1, "de", 51, 12, 156, 0], [1, "de", 51, 16, 154, 0], [1, "de", 51, 20, 154, 0], [1, "de", 51, 23, 154, 0], [1, "de", 51, 18, 157, 0], [1, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, 0], [1, "de", 51, 86, 154, 0], [1, "de", 51, 88, 156, 0], [1, "de", 51, 82, 154, 0], [1, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, 0], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [1, "de", 51, 67, 154, 0], [1, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [1, "de", 51, 65, 154, 0], [1, "de", 51, 68, 156, 0], [1, "de", 51, 59, 156, 0], [1, "de", 51, 55, 154, 0], [1, "de", 51, 54, 154, 0], [1, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, 0], [1, "de", 51, 54, 157, 0], [1, "de", 51, 49, 154, 0], [1, "de", 51, 46, 154, 0], [1, "de", 51, 44, 154, 0], [1, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, 0], [1, "de", 51, 38, 154, 0], [1, "de", 51, 39, 156, 0], [1, "de", 51, 34, 154, 0], [1, "de", 5, 19, 142, 0], [1, "de", 5, 37, 147, 0], [1, "de", 7, 53, 147, 0], [1, "de", 6, 69, 150, 0], [1, "de", 4, 94, 148, 0], [1, "de", 4, 66, 147, 0], [1, "de", 4, 10, 145, 0], [1, "de", 4, 28, 137, 0], [1, "de", 4, 15, 137, 0], [1, "de", 4, 48, 134, 0], [1, "de", 5, 67, 135, 0], [1, "de", 34, 84, 155, 0], [1, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, 0], [1, "de", 35, 56, 157, 0], [1, "de", 35, 65, 159, 0], [1, "de", 35, 23, 156, 0], [1, "de", 35, 15, 155, 0], [1, "de", 35, 8, 155, 0], [1, "de", 33, 13, 155, 0], [1, "de", 33, 33, 158, 0], [1, "de", 36, 78, 155, 0], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, 0], [1, "fo", 1, 80, 24, 0], [1, "fo", 2, 67, 36, 0], [1, "fo", 2, 45, 36, 0], [1, "fo", 2, 53, 34, 0], [1, "fo", 1, 51, 35, 0], [1, "fo", 1, 58, 35, 0], [1, "fo", 1, 33, 35, 0], [1, "fo", 1, 31, 33, 0], [1, "fo", 2, 29, 36, 0], [1, "fo", 2, 56, 36, 0], [1, "fo", 2, 60, 37, 0], [1, "fo", 2, 45, 32, 0], [1, "fo", 2, 22, 25, 0], [1, "fo", 2, 21, 35, 0], [1, "de", 52, 90, 208, 0], [1, "de", 18, 94, 250, 0], [1, "de", 17, 95, 253, 0], [1, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, 5, 1], [1, "cs", 2, 138, 5, 1], [1, "cs", 2, 138, 6, 1], [1, "cs", 2, 139, 6, 1], [1, "cs", 2, 141, 6, 1], [1, "cs", 2, 140, 6, 1], [1, "la", 3, 143, 7, 1], [1, "la", 3, 139, 7, 1], [1, "cs", 0, 137, 7, 1], [1, "cs", 1, 138, 8, 1], [1, "cs", 2, 137, 6, 1], [1, "cs", 2, 137, 8, 1], [1, "cs", 2, 136, 7, 1], [1, "cs", 2, 138, 9, 1], [1, "cs", 3, 139, 9, 1], [1, "cs", 3, 136, 8, 1], [1, "cs", 3, 137, 9, 1], [1, "de", 53, 92, 165, 0], [1, "de", 53, 92, 180, 0], [1, "de", 53, 92, 188, 0], [1, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [1, "de", 54, 90, 153, 0], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, 0], [1, "de", 54, 87, 153, 0], [1, "de", 54, 86, 153, 0], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, 0], [1, "de", 54, 82, 153, 0], [1, "de", 54, 81, 153, 0], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, 0], [1, "de", 54, 78, 153, 0], [1, "de", 54, 77, 153, 0], [1, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [1, "de", 54, 72, 153, 0], [1, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, 0], [1, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, 0], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, 0], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, 0], [1, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, 0], [1, "de", 54, 57, 153, 0], [1, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, 0], [1, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, 0], [1, "de", 54, 53, 153, 0], [1, "de", 54, 52, 153, 0], [1, "de", 54, 51, 153, 0], [1, "de", 54, 50, 153, 0], [1, "de", 54, 49, 153, 0], [1, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, 0], [1, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [1, "de", 54, 44, 153, 0], [1, "de", 54, 43, 153, 0], [1, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, 0], [1, "de", 54, 40, 153, 0], [1, "de", 54, 39, 153, 0], [1, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, 0], [1, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, 0], [1, "de", 54, 34, 153, 0], [1, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, 0], [1, "de", 54, 31, 153, 0], [1, "de", 54, 30, 153, 0], [1, "de", 54, 29, 153, 0], [1, "de", 54, 28, 153, 0], [1, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, 0], [1, "de", 54, 24, 153, 0], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, 0], [1, "de", 54, 21, 153, 0], [1, "de", 54, 20, 153, 0], [1, "de", 54, 19, 153, 0], [1, "de", 54, 18, 153, 0], [1, "de", 54, 17, 153, 0], [1, "de", 54, 16, 153, 0], [1, "de", 54, 15, 153, 0], [1, "de", 54, 14, 153, 0], [1, "de", 54, 13, 153, 0], [1, "de", 54, 12, 153, 0], [1, "de", 54, 11, 153, 0], [1, "de", 54, 10, 153, 0], [1, "de", 54, 8, 153, 0], [1, "de", 54, 9, 153, 0], [1, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, 10, 0], [1, "de", 55, 83, 11, 0], [1, "de", 55, 83, 12, 0], [1, "de", 55, 83, 13, 0], [1, "de", 55, 83, 14, 0], [1, "de", 55, 83, 15, 0], [1, "de", 55, 83, 16, 0], [1, "de", 55, 83, 17, 0], [1, "de", 55, 83, 19, 0], [1, "de", 55, 83, 18, 0], [1, "de", 55, 83, 20, 0], [1, "de", 55, 83, 21, 0], [1, "de", 55, 83, 22, 0], [1, "de", 55, 83, 23, 0], [1, "de", 55, 83, 24, 0], [1, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, 0], [1, "de", 55, 83, 27, 0], [1, "de", 55, 83, 28, 0], [1, "de", 55, 83, 29, 0], [1, "de", 55, 83, 30, 0], [1, "de", 55, 83, 31, 0], [1, "de", 55, 83, 32, 0], [1, "de", 55, 83, 33, 0], [1, "de", 55, 83, 34, 0], [1, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, 0], [1, "de", 55, 83, 37, 0], [1, "de", 55, 83, 38, 0], [1, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, 0], [1, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, 0], [1, "de", 55, 76, 38, 0], [1, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, 0], [1, "de", 55, 74, 38, 0], [1, "de", 55, 72, 38, 0], [1, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, 0], [1, "de", 55, 69, 38, 0], [1, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [1, "de", 55, 65, 38, 0], [1, "de", 55, 64, 38, 0], [1, "de", 55, 63, 38, 0], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, 0], [1, "de", 55, 61, 38, 0], [1, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, 0], [1, "de", 55, 58, 38, 0], [1, "de", 55, 56, 38, 0], [1, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, 0], [1, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, 0], [1, "de", 55, 49, 38, 0], [1, "de", 55, 50, 38, 0], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, 0], [1, "de", 55, 46, 38, 0], [1, "de", 55, 45, 38, 0], [1, "de", 55, 44, 38, 0], [1, "de", 55, 43, 38, 0], [1, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [1, "de", 55, 40, 38, 0], [1, "de", 55, 39, 38, 0], [1, "de", 55, 38, 38, 0], [1, "de", 55, 37, 38, 0], [1, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, 0], [1, "de", 55, 33, 38, 0], [1, "de", 55, 31, 38, 0], [1, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [1, "de", 55, 29, 38, 0], [1, "de", 55, 28, 38, 0], [1, "de", 55, 27, 38, 0], [1, "de", 55, 26, 38, 0], [1, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, 0], [1, "de", 55, 23, 38, 0], [1, "de", 55, 21, 38, 0], [1, "de", 55, 22, 38, 0], [1, "de", 55, 20, 38, 0], [1, "de", 55, 19, 38, 0], [1, "de", 55, 19, 37, 0], [1, "de", 55, 19, 36, 0], [1, "de", 55, 19, 35, 0], [1, "de", 55, 19, 34, 0], [1, "de", 55, 19, 33, 0], [1, "de", 55, 19, 32, 0], [1, "de", 55, 19, 31, 0], [1, "de", 55, 19, 30, 0], [1, "de", 55, 19, 28, 0], [1, "de", 55, 19, 29, 0], [1, "de", 55, 19, 27, 0], [1, "de", 55, 19, 26, 0], [1, "de", 55, 19, 25, 0], [1, "de", 55, 19, 24, 0], [1, "de", 55, 19, 23, 0], [1, "de", 55, 19, 22, 0], [1, "de", 55, 19, 21, 0], [1, "de", 55, 19, 20, 0], [1, "de", 55, 19, 18, 0], [1, "de", 55, 19, 19, 0], [1, "de", 55, 19, 16, 0], [1, "de", 55, 19, 17, 0], [1, "de", 55, 19, 15, 0], [1, "de", 55, 19, 14, 0], [1, "de", 55, 19, 13, 0], [1, "de", 55, 19, 12, 0], [1, "de", 55, 19, 11, 0], [1, "de", 55, 19, 10, 0], [1, "de", 55, 19, 9, 0], [1, "de", 55, 19, 8, 0], [1, "de", 55, 84, 35, 0], [1, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, 0], [1, "de", 50, 84, 24, 0], [1, "de", 55, 84, 20, 0], [1, "de", 55, 84, 17, 0], [1, "de", 55, 84, 16, 0], [1, "de", 50, 84, 15, 0], [1, "de", 55, 84, 8, 0], [1, "de", 55, 84, 9, 0], [1, "de", 50, 85, 11, 0], [1, "de", 55, 81, 39, 0], [1, "de", 50, 83, 40, 0], [1, "de", 55, 72, 39, 0], [1, "de", 55, 74, 39, 0], [1, "de", 55, 66, 39, 0], [1, "de", 55, 65, 39, 0], [1, "de", 50, 67, 41, 0], [1, "de", 55, 56, 39, 0], [1, "de", 55, 58, 39, 0], [1, "de", 55, 50, 39, 0], [1, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, 0], [1, "de", 55, 42, 39, 0], [1, "de", 50, 43, 39, 0], [1, "de", 50, 41, 39, 0], [1, "de", 50, 37, 39, 0], [1, "de", 55, 36, 39, 0], [1, "de", 55, 32, 39, 0], [1, "de", 50, 31, 39, 0], [1, "de", 55, 23, 39, 0], [1, "de", 55, 18, 37, 0], [1, "de", 50, 18, 36, 0], [1, "de", 55, 18, 35, 0], [1, "de", 50, 18, 34, 0], [1, "de", 55, 18, 31, 0], [1, "de", 50, 18, 30, 0], [1, "de", 55, 18, 25, 0], [1, "de", 50, 18, 24, 0], [1, "de", 55, 18, 20, 0], [1, "de", 55, 18, 14, 0], [1, "de", 50, 18, 15, 0], [1, "de", 55, 18, 8, 0], [1, "de", 54, 90, 154, 0], [1, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, 0], [1, "de", 54, 76, 154, 0], [1, "de", 54, 70, 154, 0], [1, "de", 54, 66, 154, 0], [1, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, 0], [1, "de", 54, 53, 154, 0], [1, "de", 54, 45, 154, 0], [1, "de", 54, 42, 154, 0], [1, "de", 54, 37, 154, 0], [1, "de", 54, 30, 154, 0], [1, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [1, "de", 54, 10, 154, 0], [1, "de", 54, 8, 154, 0], [1, "de", 55, 20, 9, 0], [1, "de", 53, 93, 154, 0], [1, "de", 53, 93, 156, 0], [1, "de", 53, 93, 158, 0], [1, "de", 52, 91, 157, 0], [1, "de", 53, 93, 159, 0], [1, "de", 53, 93, 161, 0], [1, "de", 53, 93, 162, 0], [1, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, 0], [1, "de", 53, 93, 165, 0], [1, "de", 53, 93, 166, 0], [1, "de", 53, 93, 167, 0], [1, "de", 52, 91, 167, 0], [1, "de", 53, 93, 169, 0], [1, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, 0], [1, "de", 53, 93, 171, 0], [1, "de", 53, 93, 173, 0], [1, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, 0], [1, "de", 53, 92, 169, 0], [1, "de", 53, 93, 178, 0], [1, "de", 53, 93, 179, 0], [1, "de", 53, 93, 180, 0], [1, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [1, "de", 53, 93, 184, 0], [1, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, 0], [1, "de", 53, 93, 187, 0], [1, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, 0], [1, "de", 53, 93, 192, 0], [1, "de", 53, 93, 195, 0], [1, "de", 53, 93, 194, 0], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, 0], [1, "de", 53, 93, 202, 0], [1, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, 0], [1, "de", 53, 93, 206, 0], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, 0], [1, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, 0], [1, "de", 53, 93, 212, 0], [1, "de", 52, 91, 204, 0], [1, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, 0], [1, "de", 53, 93, 215, 0], [1, "de", 53, 93, 216, 0], [1, "de", 53, 93, 217, 0], [1, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, 0], [1, "de", 53, 93, 220, 0], [1, "de", 52, 92, 213, 0], [1, "de", 52, 92, 206, 0], [1, "de", 52, 92, 202, 0], [1, "de", 53, 92, 201, 0], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [1, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, 0], [1, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, 0], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, 0], [1, "de", 52, 92, 221, 0], [1, "de", 52, 92, 225, 0], [1, "de", 52, 93, 226, 0], [1, "de", 52, 93, 224, 0], [1, "de", 52, 93, 208, 0], [1, "de", 52, 93, 211, 0], [1, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, 0], [1, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, 0], [1, "de", 52, 93, 182, 0], [1, "de", 52, 93, 185, 0], [1, "de", 52, 93, 172, 0], [1, "de", 52, 93, 174, 0], [1, "de", 52, 93, 177, 0], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, 0], [1, "de", 52, 93, 160, 0], [1, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, 0], [1, "de", 53, 93, 231, 0], [1, "de", 53, 93, 232, 0], [1, "de", 53, 93, 234, 0], [1, "de", 52, 93, 230, 0], [1, "de", 52, 92, 228, 0], [1, "de", 53, 93, 235, 0], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, 0], [1, "de", 53, 93, 239, 0], [1, "de", 53, 93, 240, 0], [1, "de", 52, 93, 238, 0], [1, "de", 53, 93, 241, 0], [1, "de", 52, 93, 242, 0], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [1, "de", 53, 93, 246, 0], [1, "de", 53, 93, 245, 0], [1, "de", 52, 93, 247, 0], [1, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [1, "de", 52, 93, 249, 0], [1, "de", 53, 93, 250, 0], [1, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [1, "de", 52, 93, 255, 0], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, 256, 0], [1, "de", 52, 93, 258, 0], [1, "de", 53, 93, 259, 0], [1, "de", 52, 93, 260, 0], [1, "de", 53, 93, 263, 0], [1, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, 0], [1, "de", 52, 93, 266, 0], [1, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [1, "de", 53, 93, 277, 0], [1, "de", 52, 93, 278, 0], [1, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, 0], [1, "de", 52, 93, 283, 0], [1, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, 0], [1, "de", 53, 93, 286, 0], [1, "de", 52, 93, 287, 0], [1, "de", 53, 93, 288, 0], [1, "de", 53, 93, 289, 0], [1, "de", 52, 93, 290, 0], [1, "de", 52, 93, 291, 0], [1, "de", 53, 93, 292, 0], [1, "de", 52, 93, 293, 0], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [1, "de", 52, 93, 296, 0], [1, "de", 53, 93, 297, 0], [1, "de", 53, 93, 298, 0], [1, "de", 52, 93, 299, 0], [1, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, 0], [1, "r", 93, 262, 0], [1, "de", 52, 93, 261, 0], [1, "cs", 0, 223, 104, 1], [1, "cs", 2, 223, 105, 1], [1, "cs", 2, 223, 102, 1], [1, "cs", 2, 223, 103, 1], [1, "la", 3, 141, 8, 1], [1, "cs", 2, 140, 9, 1], [1, "la", 4, 142, 9, 1], [1, "de", 4, 81, 149, 0], [1, "f", 0, 83, 148, 1], [1, "f", 1, 82, 149, 1], [1, "de", 34, 81, 156, 0], [1, "de", 51, 17, 9, 0], [1, "de", 54, 16, 9, 0], [1, "de", 54, 15, 9, 0], [1, "cs", 3, 223, 106, 1], [1, "p", 0, 119, 279, 1], [1, "p", 0, 109, 242, 1], [1, "cs", 1, 29, 9, 1], [1, "cs", 2, 30, 9, 1], [1, "cs", 2, 31, 9, 1], [1, "cs", 2, 32, 9, 1], [1, "cs", 2, 33, 9, 1], [1, "cs", 2, 69, 9, 1], [1, "cs", 2, 71, 9, 1], [1, "cs", 2, 70, 9, 1], [1, "cs", 1, 72, 9, 1], [1, "cs", 2, 73, 9, 1], [1, "de", 10, 31, 10, 0], [1, "de", 10, 29, 10, 0], [1, "de", 10, 44, 10, 0], [1, "de", 4, 87, 10, 0], [1, "de", 4, 86, 10, 0], [1, "de", 5, 87, 9, 0], [1, "de", 5, 13, 10, 0], [1, "de", 4, 14, 11, 0], [1, "de", 4, 16, 10, 0], [1, "de", 4, 17, 10, 0], [1, "cs", 2, 146, 9, 1], [1, "cs", 2, 148, 9, 1], [1, "cs", 2, 150, 9, 1], [1, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, 9, 1], [1, "cs", 1, 149, 9, 1], [1, "cs", 1, 154, 9, 1], [1, "cs", 3, 147, 9, 1], [1, "cs", 3, 151, 9, 1], [1, "cs", 3, 152, 9, 1], [1, "cs", 3, 156, 9, 1], [1, "cs", 3, 157, 9, 1], [1, "cs", 3, 158, 9, 1], [1, "cs", 3, 159, 9, 1], [1, "cs", 3, 160, 9, 1], [1, "cs", 0, 161, 9, 1], [1, "cs", 2, 162, 9, 1], [1, "cs", 2, 163, 9, 1], [1, "cs", 1, 164, 9, 1], [1, "cs", 2, 165, 9, 1], [1, "cs", 3, 166, 9, 1], [1, "cs", 3, 168, 9, 1], [1, "cs", 3, 170, 9, 1], [1, "cs", 1, 169, 9, 1], [1, "cs", 2, 167, 9, 1], [1, "cs", 2, 171, 9, 1], [1, "cs", 2, 173, 9, 1], [1, "cs", 2, 172, 9, 1], [1, "cs", 2, 174, 9, 1], [1, "cs", 1, 175, 9, 1], [1, "cs", 3, 176, 9, 1], [1, "cs", 3, 178, 9, 1], [1, "cs", 3, 179, 9, 1], [1, "cs", 0, 180, 9, 1], [1, "cs", 2, 177, 9, 1], [1, "cs", 2, 182, 9, 1], [1, "cs", 2, 181, 9, 1], [1, "cs", 2, 183, 9, 1], [1, "cs", 2, 184, 9, 1], [1, "cs", 2, 185, 9, 1], [1, "cs", 2, 186, 9, 1], [1, "cs", 1, 187, 9, 1], [1, "cs", 2, 188, 9, 1], [1, "cs", 3, 189, 9, 1], [1, "cs", 3, 190, 9, 1], [1, "cs", 3, 191, 9, 1], [1, "cs", 2, 192, 9, 1], [1, "cs", 0, 193, 9, 1], [1, "cs", 2, 194, 9, 1], [1, "cs", 2, 196, 9, 1], [1, "cs", 2, 198, 9, 1], [1, "cs", 2, 200, 9, 1], [1, "cs", 3, 195, 9, 1], [1, "cs", 3, 197, 9, 1], [1, "cs", 3, 199, 9, 1], [1, "cs", 0, 201, 9, 1], [1, "cs", 2, 202, 9, 1], [1, "cs", 2, 203, 9, 1], [1, "cs", 3, 208, 9, 1], [1, "cs", 3, 207, 9, 1], [1, "cs", 3, 206, 9, 1], [1, "cs", 3, 205, 9, 1], [1, "cs", 3, 204, 9, 1], [1, "cs", 3, 214, 9, 1], [1, "cs", 3, 215, 9, 1], [1, "cs", 3, 216, 9, 1], [1, "cs", 3, 217, 9, 1], [1, "cs", 3, 218, 9, 1], [1, "b", 0, 5, 159, 0], [1, "b", 0, 5, 171, 0], [2, "isl", 1, 122, 63, 0], [2, "isl", 2, 119, 277, 0], [2, "isl", 2, 109, 244, 0], [2, "isl", 2, 114, 205, 0], [2, "isl", 1, 120, 150, 0], [2, "isl", 2, 154, 129, 0], [2, "isl", 0, 184, 158, 0], [2, "isl", 1, 208, 128, 0], [2, "isl", 1, 215, 132, 0], [2, "isl", 1, 214, 128, 0], [2, "isl", 1, 209, 132, 0], [1, "la", 3, 217, 20, 1], [1, "la", 1, 215, 19, 1], [1, "la", 0, 212, 18, 1], [1, "la", 4, 214, 18, 1], [1, "la", 4, 216, 19, 1], [1, "la", 4, 211, 20, 1], [1, "la", 3, 210, 19, 1], [1, "la", 3, 215, 21, 1], [1, "la", 1, 214, 20, 1], [1, "la", 3, 214, 22, 1], [1, "la", 3, 214, 24, 1], [1, "la", 4, 214, 26, 1], [1, "la", 4, 213, 27, 1], [1, "la", 1, 212, 28, 1], [1, "la", 2, 212, 29, 1], [1, "la", 5, 212, 30, 1], [1, "la", 4, 208, 19, 1], [1, "la", 4, 207, 19, 1], [1, "la", 1, 206, 19, 1], [1, "la", 1, 205, 19, 1], [1, "la", 2, 204, 19, 1], [1, "la", 5, 203, 19, 1], [1, "la", 3, 210, 17, 1]];
    function lr(b, c, d, e) {
        const f = (b | 37241) & ~(b & 37241);
        const g = ((c + 34586) * 2147483629 + 2147483587) % 2147483647;
        const a = (16 << (d >> 16 & 255)) + (24 << (d & 255)) + (0 << (d >> 8 & 255)) + (8 << (d >> 24 & 255));
        const h = ~(e & 64361) & e | ~(e & 64361) & 64361;
        return (1013904223 + (38483 + (Fm(f, g, a, h) ^ function (b, c, d, e, f) {
            const g = (24 << (b >> 16 & 255)) + (16 << (b >> 24 & 255)) + (0 << (b & 255)) + (8 << (b >> 8 & 255));
            const a = c ^ 53697;
            const i = ~(d & 26481) & 26481 | ~(d & 26481) & d;
            const j = ~(f & 22412) & 22412 | ~(f & 22412) & f;
            const h = bw(g, a, i, (0 << (e >> 16 & 255)) + (8 << (e & 255)) + (16 << (e >> 24 & 255)) + (24 << (e >> 8 & 255)));
            df(j, g, a, i);
            return (h | 40825) & ~(h & 40825);
        }(f, g, a, h, f))) * 1664525) % 4294967296;
    }
    var mr = 0;
    var nr = {
        ⲆⵠⲆⵠᐃ: ["#133A2B", "#042b30"],
        ΔᐃᐃⵠⲆᐃᐃⲆΔ: ["#EBF2F0", "#136167"],
        ᐃⲆᐃⵠⲆⲆⵠ: ["#4EB687", "#187484"],
        ⵠⲆⲆΔΔΔⵠ: ["#664516", "#13474C"],
        ⲆⵠΔᐃΔΔⲆ: ["#FCEFBB", "#0F4D48"],
        ⲆⵠⵠᐃᐃⵠⲆ: ["#C1AA7E", "#0F423D"],
        ⲆⲆᐃⵠΔᐃΔ: ["#594837", "#163A3A"],
        ᐃⵠΔⲆⲆⵠⲆ: ["#A5D6D6", "#539CA0"],
        ⵠΔᐃᐃⲆ: ["#0B6A84", "#09373F"],
        ⲆᐃⵠⵠΔⵠⵠ: ["#2A8B9B", "#0F464C"],
        ⵠⵠⵠᐃΔⲆᐃ: ["#A9D6D3", "#115E60"],
        ᐃⲆᐃⵠᐃⵠⵠ: ["#ECF7F9", "#539CA0"],
        ⲆΔⲆᐃΔᐃᐃ: ["#FFF", "#FFF"],
        ᐃᐃΔΔΔᐃⲆ: ["#FFF", "#FFF"],
        ⵠⵠᐃᐃᐃⲆⵠ: ["#1C9BA4", "#00272F"],
        ⲆᐃΔⲆΔ: ["#2D2017", "#031C1E"],
        ⵠᐃⵠ: 0,
        ᐃᐃⲆ: 1,
        ⲆᐃⲆⲆⵠⵠᐃⵠⲆ: 2300,
        ΔΔᐃⲆᐃΔᐃⵠᐃ: 2290,
        ᐃⵠⵠⵠⲆᐃᐃ: 34,
        ΔΔΔⵠΔⲆΔ: 5,
        ⲆⲆᐃⵠΔⵠᐃ: 68,
        ⵠⵠᐃⲆᐃⵠⵠ: 34,
        ΔⵠᐃⵠᐃⵠΔ: 5,
        ΔᐃⲆⲆΔᐃΔ: 1,
        ⵠⲆⲆⵠΔⲆⲆ: 0.6,
        ⵠΔⵠΔⵠᐃⵠ: 0.25,
        ΔⵠΔᐃᐃⲆΔ: 50,
        ⲆⵠΔⲆᐃᐃⵠ: 10,
        ᐃⲆᐃⲆⲆⵠⲆ: 75,
        ⲆⵠΔΔΔᐃᐃ: 20,
        ⵠⲆⲆΔⵠⲆᐃ: 5,
        Ⲇⵠⵠᐃⵠ: 0,
        ΔⲆⲆⲆᐃ: 1,
        ᐃᐃΔⲆⲆ: 2,
        ⵠΔᐃⵠⵠ: 3,
        ΔᐃΔᐃⲆ: 4,
        ⵠᐃΔᐃⲆ: 5,
        ΔⲆⲆⵠΔ: 6,
        ΔᐃⲆΔΔ: 7,
        ᐃⵠΔⵠⵠ: 8,
        Ⲇⵠᐃⵠᐃ: 9,
        ᐃⵠΔⵠⲆ: 10,
        ⵠⲆⵠᐃΔ: 11,
        ⲆΔⲆΔᐃ: 12,
        ᐃⵠⵠⲆⲆ: 13,
        ⲆᐃⵠΔΔ: 14,
        ⵠᐃⵠᐃⵠ: 15,
        ⲆᐃⲆⵠᐃ: 16,
        ᐃᐃΔⲆᐃ: 17,
        ⲆᐃΔⲆⲆ: 18,
        ⲆᐃⵠⵠⲆ: 19,
        ᐃⲆᐃΔΔ: 20,
        ⵠⵠⲆΔⲆ: 21,
        ⵠΔΔⲆⲆ: 22,
        ⵠΔⲆΔᐃ: 23,
        ΔΔⵠΔⲆ: 24,
        ᐃⲆⲆΔⵠ: 25,
        ⵠᐃΔⵠᐃ: 26,
        ᐃᐃⲆᐃⵠ: 27,
        ⲆⵠᐃΔⲆ: 28,
        ᐃΔⲆΔ: 29,
        ᐃΔⵠⲆΔ: 30,
        ΔᐃΔΔⲆ: 31,
        ⲆⵠΔΔⵠ: 32,
        ΔⲆⵠΔΔ: 33,
        ⵠⲆᐃⲆΔ: 34,
        ⵠᐃᐃⵠⵠ: 35,
        ⵠᐃΔⵠΔ: 36,
        ⲆΔΔᐃΔ: 37,
        ⵠᐃⲆⲆⲆ: 38,
        ᐃⵠᐃⵠⲆ: 39,
        ⵠⲆΔⵠⵠ: 40,
        ᐃⵠⵠᐃᐃ: 41,
        ⵠⵠⵠⲆⲆ: 42,
        ᐃⲆΔᐃΔ: 43,
        ΔⲆⵠⲆⲆ: 44,
        ⲆᐃⲆᐃΔ: 45,
        ⲆⵠⵠⵠⲆ: 46,
        ⵠⲆⲆⲆⲆ: 47,
        ⵠⲆΔΔᐃ: 48,
        ⲆᐃΔΔⵠ: 49,
        ⵠᐃⵠⵠⲆ: 50,
        ⵠᐃⵠⵠᐃ: 51,
        ⵠᐃⲆᐃⲆ: 52,
        ᐃᐃΔᐃⲆ: 53,
        ⲆⵠΔᐃΔ: 54,
        ⲆᐃⲆⵠⲆ: 55,
        ⵠᐃΔΔⵠ: 56,
        Ⲇⵠᐃᐃᐃ: 57,
        ᐃⲆᐃⲆⵠ: 58,
        ⵠⵠⵠⲆⵠ: 59,
        ᐃⲆΔΔΔ: 60,
        ⵠΔⲆᐃⲆ: 61,
        ⲆᐃΔⲆᐃ: 62,
        ΔⵠΔⵠⵠ: 63,
        ⵠᐃⵠΔⲆ: 64,
        ⲆᐃⲆΔΔ: 65,
        ΔⵠΔⵠⲆ: 66,
        ⵠᐃᐃΔᐃ: 67,
        ΔΔⵠⲆΔ: 68,
        ⵠⵠΔⵠᐃ: 69,
        ᐃⵠᐃΔᐃ: 70,
        ᐃⵠⲆΔᐃ: 71,
        ⲆᐃⵠⵠΔ: 72,
        ΔᐃⵠΔΔ: 73,
        ⵠᐃΔᐃΔ: 74,
        ⲆⲆⵠⵠᐃ: 75,
        ⲆⲆᐃⵠΔ: 76,
        ⲆⲆΔⵠⵠ: 77,
        ⵠΔⵠⵠⲆ: 78,
        ΔᐃⲆᐃΔ: 79,
        ⲆΔΔⲆᐃ: 80,
        ΔᐃⵠⵠΔ: 81,
        ⵠᐃᐃᐃΔ: 82,
        ΔⲆⲆᐃⲆ: 83,
        ᐃⲆΔⲆⵠ: 84,
        ⲆΔⲆⲆᐃ: 85,
        ⵠᐃⲆΔΔ: 86,
        ⲆᐃᐃⲆⵠ: 87,
        ⲆⵠⲆⵠⲆ: 88,
        ᐃⲆⵠⲆⵠ: 89,
        ΔⲆⵠΔⵠ: 90,
        ⲆⵠᐃⲆⵠ: 91,
        ΔⵠᐃⲆΔ: 92,
        ΔⲆⲆⲆⵠ: 93,
        ⲆⵠⲆΔΔ: 94,
        ⵠΔⵠⵠΔ: 95,
        ᐃᐃᐃΔΔ: 96,
        Δⵠⵠᐃⵠ: 97,
        ᐃΔⲆⵠᐃ: 98,
        ⵠⲆᐃⵠΔ: 99,
        ᐃΔΔᐃⵠᐃⲆⲆⵠ: 100,
        ΔΔⲆΔⵠ: 101,
        ᐃⵠᐃⲆᐃ: 102,
        ᐃⲆⵠᐃᐃ: 103,
        ⲆⲆᐃᐃΔ: 104,
        ᐃᐃⵠᐃᐃ: 105,
        ⵠⲆΔⲆΔ: 106,
        ⲆᐃⲆᐃⲆ: 107,
        ᐃⵠⵠᐃΔ: 108,
        ΔΔⵠΔ: 109,
        ⵠᐃΔⲆⵠ: 110,
        ⵠⵠΔᐃ: 111,
        ΔΔⲆⲆ: 112,
        ᐃΔⵠᐃᐃⵠΔ: 113,
        ⲆΔᐃΔⲆ: 114,
        ᐃᐃᐃᐃΔⵠⵠ: 115,
        ⵠⵠᐃⲆΔ: 116,
        ΔⲆⲆⵠⲆ: 117,
        ΔⲆⲆᐃᐃΔᐃ: 118,
        ⲆⲆⵠᐃⲆΔᐃ: 119,
        ⵠᐃⲆⲆᐃ: 120,
        ΔᐃⲆⵠ: 121,
        ΔᐃⵠⵠⲆ: 122,
        Δᐃⵠⵠⵠ: 123,
        ΔΔⲆⵠᐃΔΔ: 124,
        ᐃⲆⵠⵠΔ: 125,
        ⵠⲆᐃⵠⲆ: 126,
        ΔⵠΔⲆΔ: 127,
        ⲆⵠⲆᐃᐃ: 128,
        ΔⵠᐃⲆⵠ: 129,
        ΔⲆᐃⲆΔ: 130,
        ᐃⲆⵠⵠⲆ: 131,
        ⵠⵠᐃⲆⵠ: 132,
        ⲆⵠᐃⵠΔ: 133,
        ⵠΔⵠⵠⵠ: 134,
        ⵠⲆⵠΔΔ: 135,
        ΔᐃⵠᐃΔ: 136,
        ⲆⲆⵠⵠⲆ: 137,
        ᐃΔᐃⵠⵠ: 138,
        Δⵠⵠⵠⵠ: 139,
        ΔᐃⲆⲆᐃᐃⲆ: 140,
        ⲆᐃΔⲆⵠ: 141,
        ᐃΔⲆⲆᐃⲆᐃ: 142,
        ⵠⵠᐃⵠⵠⲆⵠ: 143,
        ⲆⵠᐃΔⲆΔΔ: 144,
        ΔⵠⵠⲆΔⵠΔ: 145,
        ⲆⲆⵠⲆⵠ: 146,
        ⵠⲆᐃⲆⵠ: 147,
        ⵠᐃᐃᐃⲆ: 148,
        ⵠⵠⲆᐃⵠ: 149,
        ⵠⵠᐃⵠⲆ: 150,
        ⲆΔⵠᐃᐃ: 151,
        ᐃⵠⵠΔⵠ: 152,
        ⲆⲆΔΔᐃ: 153,
        ΔⲆⵠⲆΔ: 154,
        ᐃᐃⵠΔⲆ: 155,
        ⵠΔⲆΔΔ: 156,
        ⲆⲆⲆⲆⲆ: 157,
        ⵠⵠᐃᐃⵠ: 158,
        ⵠΔᐃΔΔ: 159,
        ⲆΔⲆΔⲆ: 160,
        ΔΔⵠΔᐃ: 161,
        ᐃⵠΔᐃⵠ: 162,
        ⵠⵠⲆⵠⲆ: 163,
        ᐃⲆⲆⲆΔ: 164,
        ⲆΔⲆⵠⲆ: 165,
        ⲆΔⲆⲆⵠΔⵠ: 166,
        ΔⲆΔΔⵠ: 167,
        ⲆⵠᐃᐃⲆ: 168,
        ΔⵠⵠᐃΔ: 169,
        ᐃΔᐃᐃᐃ: 170,
        ΔΔⵠΔⲆᐃⵠ: 171,
        ⵠᐃⵠⲆⵠⲆᐃ: 172,
        ⵠⵠⵠⲆⵠᐃⵠ: 173,
        ⵠⲆⲆⲆᐃ: 174,
        ΔⵠⲆⵠⲆⲆᐃ: 175,
        ⵠⵠⵠⲆⲆⵠᐃ: 176,
        ᐃᐃⲆᐃᐃᐃⵠ: 177,
        ᐃⵠⲆᐃⲆᐃΔ: 178,
        ΔⲆⲆᐃⲆⵠⲆ: 179,
        ᐃᐃⲆΔⵠᐃⲆ: 180,
        ΔᐃⲆⵠΔΔⲆ: 181,
        ⵠΔⲆᐃΔΔⵠ: 182,
        ⵠΔⵠΔΔ: 183,
        ΔΔᐃⲆᐃ: 184,
        ⲆᐃᐃᐃⲆ: 185,
        ⵠΔΔⵠᐃ: 186,
        ⲆΔΔⲆⵠ: 187,
        ⵠᐃᐃⲆΔⲆⵠ: 188,
        ⵠΔᐃⲆΔ: 189,
        Δᐃᐃⵠᐃ: 190,
        ⲆᐃⲆᐃᐃⲆⲆ: 191,
        ᐃⲆⵠΔⲆ: 192,
        ⵠᐃΔΔΔⲆⵠ: 193,
        ⲆΔΔΔⵠ: 194,
        ᐃⵠⲆⲆᐃ: 195,
        ⲆⲆᐃΔΔⵠⵠ: 196,
        ⲆⲆΔⵠⵠⲆⲆ: 197,
        ΔⵠΔΔⲆ: 198,
        ⲆⲆⵠΔⲆ: 199,
        ⵠⵠⵠⵠⲆΔⲆ: 200,
        ΔᐃΔᐃⵠ: 201,
        ΔⵠΔΔ: 202,
        ⲆⵠⲆᐃΔ: 203,
        ⲆΔᐃᐃⲆΔⵠ: 204,
        ᐃⵠⲆΔΔ: 205,
        ΔΔᐃᐃⲆΔⵠ: 206,
        ΔΔⲆΔⲆ: 207,
        ⵠΔⵠⲆⵠΔⵠ: 208,
        ᐃⵠᐃΔΔ: 209,
        ᐃⲆⲆⵠᐃᐃⵠ: 210,
        ⵠⵠⲆΔⲆⵠᐃ: 211,
        ⵠⵠΔᐃⲆ: 212,
        ⲆⵠⲆᐃⵠ: 213,
        ΔΔⵠⲆᐃ: 214,
        ΔⲆΔΔⲆ: 215,
        ᐃⵠᐃᐃᐃ: 216,
        ΔᐃΔⲆᐃ: 217,
        ⵠⲆᐃⲆⲆ: 218,
        Ⲇⵠᐃᐃⵠ: 219,
        ᐃΔᐃⲆⲆ: 220,
        ΔⲆⵠΔⲆ: 221,
        ⵠᐃⲆᐃⵠ: 222,
        ⲆᐃⵠᐃΔ: 223,
        ⲆⵠⵠᐃⲆ: 224,
        ᐃⲆⲆᐃΔⵠⲆ: 225,
        ⲆᐃⲆΔⲆⲆⵠ: 226,
        ⲆⵠⲆⵠΔ: 227,
        ΔΔᐃᐃΔⵠᐃ: 228,
        ΔᐃΔᐃᐃ: 229,
        ⵠⵠΔᐃᐃ: 230,
        ᐃΔⵠΔⵠ: 231,
        ΔⲆⲆΔᐃ: 232,
        ΔΔⲆⵠⵠ: 233,
        ᐃⵠⵠΔΔⲆΔ: 234,
        ⵠΔⵠΔⵠ: 235,
        ⲆⵠᐃⲆᐃ: 236,
        ⵠΔᐃⵠΔ: 237,
        ⵠΔⵠΔⲆ: 238,
        ᐃΔⲆΔᐃ: 239,
        ᐃⲆⵠⵠᐃ: 240,
        ΔᐃⲆᐃᐃ: 241,
        Δᐃⵠᐃⵠ: 242,
        ΔⲆⲆⲆᐃᐃᐃ: 243,
        ⵠΔᐃⵠᐃ: 244,
        ΔⲆⵠΔᐃ: 245,
        ⵠⲆⲆᐃⲆⵠⲆ: 246,
        ᐃᐃΔᐃᐃ: 247,
        Δⵠᐃⵠᐃ: 248,
        ⲆⵠⲆⵠΔᐃᐃ: 249,
        ΔᐃⲆⲆΔ: 250,
        ⵠⲆΔⵠΔ: 251,
        ⵠⵠⵠΔΔΔᐃ: 252,
        ⲆᐃᐃᐃⵠΔΔ: 253,
        ⵠᐃⵠⲆⲆΔᐃ: 254,
        ΔᐃⲆⲆᐃⲆⲆ: 255,
        ⲆⲆΔᐃΔⵠᐃ: 256,
        ⵠⲆⲆⲆᐃⲆΔ: 257,
        ΔΔⲆⲆᐃⲆⵠ: 258,
        ΔΔᐃⵠⵠΔⵠ: 259,
        ᐃⵠⲆⲆΔ: 260,
        ᐃᐃⵠΔⵠᐃΔ: 261,
        ᐃⵠΔΔⵠΔⲆ: 262,
        ⲆⲆΔΔⲆⲆⲆ: 263,
        ᐃᐃⵠΔᐃ: 264,
        ᐃⵠⲆᐃⵠⵠΔ: 265,
        ⵠⵠⵠΔᐃΔⲆ: 266,
        ΔⵠⵠⵠⵠᐃⲆ: 267,
        ΔᐃΔⵠⵠᐃⵠ: 268,
        ΔΔⲆᐃⲆⲆⲆ: 269,
        ⵠⲆᐃⵠΔⲆᐃ: 270,
        ᐃᐃᐃΔⲆⵠⲆ: 271,
        ⲆΔⵠⵠᐃᐃΔ: 272,
        ⵠΔᐃᐃⵠⵠΔ: 273,
        ᐃⵠⵠΔᐃᐃΔ: 274,
        ⵠΔᐃᐃⲆⲆΔ: 275,
        ⲆᐃⵠⲆⲆΔⲆ: 276,
        ᐃᐃᐃⵠᐃⲆᐃ: 277,
        ⵠⵠΔⲆᐃΔⲆ: 278,
        ⵠⲆΔⵠ: 279,
        ⲆΔΔⵠΔ: 280,
        ΔΔⲆΔᐃⲆⲆ: 281,
        ⲆⲆⲆΔⵠᐃᐃ: 282,
        ⵠⵠ: 283,
        ⵠᐃΔⵠⲆⲆΔ: 284,
        ᐃᐃⲆⲆᐃ: 285,
        ᐃⲆⵠΔᐃ: 286,
        ᐃΔⲆᐃⵠΔⲆ: 287,
        ΔⵠᐃⵠⲆ: 288,
        ΔⲆᐃᐃΔΔⲆ: 289,
        ΔⲆΔⲆⵠⲆΔ: 290,
        ᐃⲆᐃⲆⲆᐃⵠ: 291,
        ⵠᐃⲆΔΔⲆᐃ: 292,
        ΔΔⵠΔⵠᐃⲆ: 293,
        ᐃⲆᐃⵠⵠ: 294,
        ⵠⵠⵠⵠⵠΔᐃ: 295,
        ᐃⲆᐃⲆΔⵠᐃ: 296,
        ⲆⲆΔᐃΔᐃⲆ: 297,
        ᐃᐃⵠΔⵠⵠⵠ: 298,
        ᐃⲆᐃΔⵠ: 299,
        ⵠᐃⲆᐃΔΔᐃ: 300,
        ΔⵠᐃⵠⲆⲆⵠ: 301,
        ⲆᐃⵠΔⲆⲆⵠ: 302,
        ⵠΔⵠΔᐃᐃⵠ: 303,
        ⵠΔⲆⲆᐃⵠΔ: 304,
        ΔΔⵠᐃᐃΔᐃ: 305,
        ⲆⲆⵠᐃⵠΔΔ: 306,
        ᐃᐃᐃᐃⲆ: 307,
        ΔᐃⲆⲆⲆΔΔ: 308,
        ᐃⲆᐃΔⵠΔᐃ: 309,
        ΔⵠΔⵠᐃΔᐃ: 310,
        ΔⵠⵠΔⲆⵠⵠ: 311,
        ΔⲆΔⲆᐃᐃⵠ: 312,
        ⲆⵠⲆΔⲆΔⲆ: 313,
        ᐃᐃⵠⵠᐃⲆⲆ: 314,
        ΔⲆᐃⵠⲆᐃⵠ: 315,
        ΔΔΔᐃⲆⲆᐃ: 316,
        ⵠᐃΔⵠⵠⵠⲆ: 317,
        ⲆΔᐃⵠⵠᐃΔ: 318,
        ᐃᐃⵠⵠᐃΔⲆ: 319,
        ᐃⲆᐃⲆⲆΔⲆ: 320,
        ΔΔᐃⲆΔ: 321,
        ᐃⵠΔᐃⲆΔⵠ: 322,
        ᐃⵠΔᐃᐃᐃⲆ: 323,
        ᐃΔΔᐃⵠⵠΔ: 324,
        ⲆⲆᐃⲆⲆⲆⵠ: 325,
        ⵠⲆᐃᐃⵠΔᐃ: 326,
        ΔΔΔᐃᐃᐃⵠ: 327,
        ᐃᐃᐃᐃΔⲆⵠ: 328,
        ᐃᐃⲆᐃᐃⲆᐃ: 329,
        ΔᐃⵠⵠᐃⵠⲆ: 330,
        ΔⵠΔⲆⵠⵠΔ: 331,
        ⲆᐃⲆΔᐃΔⵠ: 332,
        ΔⵠⵠᐃⵠⲆⵠ: 333,
        ⲆΔΔⲆᐃⵠⵠ: 334,
        ⲆΔᐃΔΔⲆⵠ: 335,
        ⲆⲆᐃⵠΔⲆⲆ: 336,
        ᐃΔⵠⲆⲆΔⵠ: 337,
        ⲆⲆⵠⵠΔᐃΔ: 338,
        ⲆⲆΔΔᐃΔⲆ: 339,
        ΔΔᐃⲆⲆⲆⵠ: 340,
        ⲆⵠΔⲆⵠⵠᐃ: 341,
        ⲆⵠⵠΔⲆΔⲆ: 342,
        ⵠΔΔⵠⵠⲆΔ: 343,
        ᐃⵠⵠΔⵠΔⲆ: 344,
        ⵠⲆⵠᐃⲆⲆΔ: 345,
        ΔΔⲆΔⵠⵠⵠ: 346,
        ⵠⵠΔᐃΔᐃᐃᐃⲆ: 347,
        ⲆΔⵠΔΔΔⲆ: 348,
        ⲆⲆⵠⲆᐃⲆⲆ: 349,
        ⵠᐃⵠⵠΔⲆⵠ: 350,
        ᐃᐃᐃΔⵠᐃⲆ: 351,
        ⵠᐃⵠⵠᐃⵠΔ: 352,
        Δᐃᐃᐃᐃᐃⵠ: 353,
        ⲆΔⲆᐃⵠⲆΔ: 354,
        ᐃⲆⵠⲆᐃᐃΔ: 355,
        Δⵠᐃᐃᐃᐃⵠ: 356,
        ΔᐃΔⲆᐃΔⵠ: 357,
        ⲆᐃᐃΔⵠᐃⲆ: 358,
        ΔⵠⵠΔⲆⲆᐃ: 359,
        ⲆΔᐃΔᐃᐃⵠ: 360,
        ⵠⵠⲆⵠΔⲆΔ: 361,
        ⲆΔⵠΔᐃΔⲆ: 362,
        ΔⵠΔⲆᐃⲆⵠ: 363,
        ΔⲆΔᐃᐃⵠΔ: 364,
        ⵠⵠᐃᐃⵠⲆⵠ: 365,
        ⲆⵠⵠΔⵠⲆⲆ: 366,
        ΔⲆⵠᐃⲆⲆⲆ: 367,
        ⵠⲆᐃⲆⵠⲆᐃ: 368,
        ⵠΔⲆⲆⵠⲆⵠ: 369,
        ΔᐃⵠⵠΔΔΔ: 370,
        ΔᐃᐃⵠΔᐃⵠ: 371,
        ᐃᐃⲆᐃΔΔⵠ: 372,
        ⵠᐃⲆΔΔΔⲆ: 373,
        ᐃⵠⲆⵠⲆᐃᐃ: 374,
        ᐃΔⵠᐃᐃᐃΔ: 375,
        ᐃᐃᐃⵠᐃΔΔ: 376,
        ΔⲆᐃΔΔᐃΔ: 377,
        ⵠᐃᐃⲆΔΔᐃ: 378,
        ΔΔⲆⲆⲆᐃⵠ: 379,
        ᐃΔᐃⲆΔΔⵠ: 380,
        ΔⵠⲆΔⲆⲆᐃ: 381,
        ⲆⵠᐃⵠΔᐃᐃ: 382,
        ⵠᐃⵠⲆΔᐃⲆ: 383,
        ⵠⲆⲆⲆⵠⵠᐃ: 384,
        ⲆⲆᐃᐃⵠᐃᐃ: 385,
        ⲆᐃⲆⲆΔᐃⵠ: 386,
        ΔᐃΔΔᐃᐃΔ: 387,
        ᐃⲆⲆΔΔᐃⵠ: 388,
        ⵠᐃΔⲆⲆΔᐃ: 389,
        ΔⵠⵠⵠⵠᐃΔ: 390,
        ⲆⲆΔΔΔΔⲆ: 391,
        ᐃᐃⵠⲆⲆΔΔ: 392,
        ᐃΔΔΔΔⲆⲆ: 393,
        ⵠᐃⵠⵠⲆⵠⵠ: 394,
        ⲆⲆᐃⵠᐃⵠⲆ: 395,
        ⲆⵠⵠᐃᐃΔⲆ: 396,
        ᐃᐃΔⵠⲆⲆⵠ: 397,
        ⵠΔⵠⵠⲆⵠΔ: 398,
        ⲆⲆΔⲆᐃⲆᐃ: 399,
        ⵠⵠⲆⵠⲆⵠᐃ: 400,
        ⵠⲆⲆⲆΔᐃᐃ: 401,
        ⲆΔⵠᐃᐃᐃⲆ: 402,
        ⵠᐃᐃᐃᐃᐃⵠ: 403,
        ΔᐃΔⵠⵠΔᐃ: 404,
        ΔΔᐃⵠΔᐃΔ: 405,
        ⲆΔᐃⵠΔⵠᐃ: 406,
        ᐃᐃΔᐃⵠⵠⲆ: 407,
        ⵠΔΔⵠⵠΔΔ: 408,
        ⲆᐃⵠΔᐃᐃΔ: 409,
        ᐃⵠΔΔⲆⲆᐃ: 410,
        ΔᐃΔⲆΔᐃᐃ: 411,
        ⵠΔᐃᐃΔⲆⵠ: 412,
        ᐃΔⵠⲆᐃ: 413,
        ΔᐃⲆⲆΔⵠᐃᐃΔ: 414,
        ⵠᐃⲆⲆⵠ: 415,
        ⲆⵠⲆΔᐃ: 416,
        ΔⵠⵠΔⲆⵠⵠⵠΔ: 417,
        ⵠΔΔΔⵠⲆⲆ: 418,
        ⵠΔΔΔᐃ: 419,
        Ⲇⵠⵠⵠᐃⵠⵠ: 420,
        ⲆⲆⵠᐃᐃⵠᐃ: 421,
        ⵠⲆᐃⵠᐃᐃⵠ: 422,
        ⵠⵠⲆⲆᐃⵠⵠ: 423,
        ΔΔⵠᐃᐃⵠⲆ: 424,
        ⵠΔᐃΔᐃΔᐃ: 425,
        ᐃᐃⵠᐃⵠⵠⵠ: 426,
        ⵠⵠᐃΔⲆⵠΔ: 427,
        ᐃⵠⲆΔⲆⵠⵠ: 428,
        ΔᐃΔΔⵠᐃⲆ: 429,
        ⲆΔᐃᐃⲆⵠⵠ: 430,
        ⲆⲆⲆⲆⲆᐃⵠ: 431,
        ΔⲆΔⵠⵠⵠⲆ: 432,
        ΔⵠᐃΔⵠΔΔ: 433,
        ᐃⲆᐃⵠⲆⲆΔ: 434,
        ΔⵠᐃⵠΔⲆⵠ: 435,
        ᐃᐃΔΔΔᐃΔ: 436,
        ⵠⵠΔⲆⲆⲆⵠ: 437,
        ⲆᐃΔⵠⵠᐃΔ: 438,
        ⲆΔΔΔΔⵠⵠ: 439,
        ⵠⲆⵠᐃΔᐃⵠ: 440,
        ⲆΔᐃⲆⲆⵠᐃ: 441,
        ΔⲆⵠΔⲆⲆᐃ: 442,
        ⲆΔⲆᐃᐃⲆⲆ: 443,
        ⵠΔⵠᐃⲆΔᐃΔΔ: 444,
        ⲆᐃᐃΔΔ: 445,
        ᐃⵠᐃΔᐃΔΔ: 446,
        ᐃⲆⲆᐃⵠⵠᐃ: 447,
        ⲆᐃⲆⵠᐃᐃⵠⲆΔ: 448,
        ΔⲆᐃᐃΔ: 449,
        ᐃΔⲆΔΔ: 450,
        ⵠΔⲆΔⵠΔⵠ: 451,
        ⲆⵠΔᐃᐃᐃⵠ: 452,
        ΔΔΔΔΔⵠᐃ: 453,
        ⲆⲆΔΔⵠⲆⵠ: 454,
        ⲆᐃᐃⲆⲆⵠⲆ: 455,
        ᐃᐃⵠᐃΔΔΔ: 456,
        ΔⵠⲆΔⲆᐃΔ: 457,
        ΔⵠΔΔⲆⵠΔ: 458,
        ⲆⲆΔᐃⵠⲆᐃ: 459,
        ⵠⵠΔⵠΔⲆᐃ: 460,
        ᐃⲆᐃΔⵠⵠᐃ: 461,
        ᐃⲆᐃⲆᐃΔⲆ: 462,
        ⵠⵠⲆΔⲆⲆΔ: 463,
        ⲆⵠⵠΔⲆⲆⵠ: 464,
        ⲆᐃⲆⲆᐃᐃⲆ: 465,
        ᐃΔⲆΔᐃᐃⲆ: 466,
        ΔᐃⵠᐃⲆᐃΔ: 467,
        ΔΔⲆᐃⵠΔⵠ: 468,
        ᐃΔΔᐃⵠⵠⲆ: 469,
        Ⲇᐃⵠᐃᐃⵠᐃ: 470,
        ⵠΔᐃᐃⵠΔᐃ: 471,
        ΔᐃΔⵠⲆΔⵠ: 472,
        ΔⲆⲆᐃⲆᐃⵠ: 473,
        ΔΔⵠΔⲆⲆⲆ: 474,
        ⵠΔΔⵠΔΔⲆ: 475,
        ⵠᐃᐃΔⵠⵠⵠ: 476,
        ΔⲆⵠⵠⵠⲆᐃ: 477,
        ΔⲆᐃΔⲆⵠᐃ: 478,
        ᐃⵠΔⵠⵠᐃⲆ: 479,
        ⲆᐃᐃΔⲆᐃⲆ: 480,
        ⵠⲆΔΔΔᐃᐃ: 481,
        ⲆᐃⵠᐃΔⲆⲆ: 482,
        ⲆⵠᐃⲆΔⲆⵠ: 483,
        ⵠⵠᐃⲆΔⵠⵠ: 484,
        ⲆΔⵠⵠᐃᐃᐃ: 485,
        ⵠⵠⵠⵠᐃⲆᐃ: 486,
        ⲆᐃΔⵠⵠᐃᐃ: 487,
        ⲆᐃⵠᐃⵠⲆΔ: 488,
        ᐃᐃⲆᐃΔΔⲆ: 489,
        ᐃΔΔⲆⵠΔᐃ: 490,
        ⵠΔᐃⵠΔⲆΔ: 491,
        ᐃΔⲆΔⲆⵠΔ: 492,
        ⵠⲆᐃΔⵠᐃᐃ: 493,
        ᐃⵠᐃᐃⵠⵠⲆ: 494,
        ⵠⲆⲆⵠⵠᐃⵠ: 495,
        ⵠΔΔΔⵠᐃΔ: 496,
        ΔⵠᐃᐃⲆᐃᐃ: 497,
        ⲆⲆᐃΔΔⲆⵠ: 498,
        ⲆΔⲆⲆⲆᐃΔ: 499,
        ΔⲆⲆⵠⲆΔᐃ: 500,
        ΔᐃⵠⵠᐃᐃΔ: 501,
        ᐃᐃᐃΔᐃⵠΔ: 502,
        ⲆⵠⲆⵠⲆΔⵠ: 503,
        ΔΔᐃᐃᐃᐃⲆ: 504,
        ᐃⵠᐃⲆⲆⲆΔ: 505,
        ⵠΔΔⵠᐃᐃⲆ: 506,
        ⲆᐃⲆⲆᐃᐃⲆ: 507,
        ⲆⵠᐃⵠⲆⲆⵠ: 508,
        ⵠⲆⲆΔⵠⵠⲆ: 509,
        ⵠⵠΔⵠᐃΔⵠ: 510,
        ⲆᐃⵠΔⲆΔΔ: 511,
        ⵠΔΔΔΔⵠⲆ: 512,
        ⲆᐃΔᐃⲆⲆⵠ: 513,
        ᐃⲆᐃΔᐃⵠⲆ: 514,
        ΔΔᐃⲆⵠΔΔ: 515,
        ΔⲆᐃᐃⵠⲆᐃ: 516,
        ΔᐃΔᐃΔⲆⲆ: 517,
        ΔⵠⵠⵠⲆΔⵠ: 518,
        ⲆⵠⲆⵠᐃΔᐃ: 519,
        ΔⲆⲆⲆᐃᐃⲆ: 520,
        ᐃⵠⲆⵠⲆⲆᐃ: 521,
        ⲆⵠᐃΔⵠᐃⲆ: 522,
        ΔᐃᐃⲆⵠⵠΔ: 523,
        ⲆΔⵠⲆⵠᐃᐃ: 524,
        ΔᐃᐃⲆᐃΔᐃ: 525,
        ⲆᐃᐃᐃΔⵠΔ: 526,
        ⵠⵠⵠⲆⵠⵠⵠ: 527,
        ⵠⲆⲆⵠΔᐃᐃ: 528,
        ΔⵠΔᐃΔΔⵠ: 529,
        ⵠⲆᐃⲆᐃΔⲆ: 530,
        ⵠⲆⲆΔΔΔᐃ: 531,
        ᐃⵠᐃⵠⵠΔⲆ: 532,
        ᐃᐃⲆᐃⵠⵠᐃ: 533,
        ⲆⲆⵠⲆΔⲆⲆ: 534,
        ⵠᐃⲆⵠᐃⵠᐃ: 535,
        ⵠᐃΔᐃᐃᐃⲆ: 536,
        ᐃΔⵠΔΔΔⵠ: 537,
        ᐃΔⵠⲆⵠᐃⲆ: 538,
        ⵠᐃᐃⲆⵠⵠⲆⲆⵠ: 539,
        ⵠⲆⵠᐃⵠᐃⲆ: 540,
        ⵠΔⲆⵠⵠⵠⲆ: 541,
        ⵠΔⲆᐃⵠᐃᐃ: 542,
        ⵠΔⲆⲆᐃᐃᐃ: 543,
        ⲆΔⲆΔⲆΔⲆΔΔ: 544,
        POINTS: 545,
        ᐃᐃⲆΔᐃⲆΔ: 546,
        ΔᐃᐃΔⲆⵠᐃ: 547,
        ᐃᐃⲆⵠⲆⲆᐃ: 548,
        ᐃⵠⲆᐃⲆΔΔ: 549,
        ⲆΔⲆⵠⲆⵠΔ: 550,
        ⵠⵠΔᐃⲆⵠⵠ: 551,
        ⵠΔᐃᐃⵠΔⵠ: 552,
        ⲆⵠΔⲆⵠⵠⵠ: 553,
        ⵠⲆᐃΔⲆⲆᐃ: 554,
        ΔΔⲆΔΔⲆⵠ: 555,
        ⲆⲆΔΔΔΔΔ: 556,
        ΔᐃΔΔΔⲆⵠ: 557,
        ᐃⲆⵠᐃⲆⵠΔ: 558,
        Ⲇⵠⵠᐃⵠᐃᐃ: 559,
        ᐃᐃᐃⲆⲆⲆⵠ: 560,
        ⲆⲆⲆΔⲆⵠᐃ: 561,
        ᐃᐃⲆᐃᐃΔᐃ: 562,
        ᐃΔⲆⲆᐃΔⵠ: 563,
        ᐃᐃⵠᐃⵠΔᐃ: 564,
        ⲆⲆⵠⲆᐃⵠⵠ: 565,
        ⵠⲆⲆⲆⲆⵠΔ: 566,
        ⵠⲆⲆⵠᐃⵠᐃ: 567,
        ΔⵠᐃΔᐃⵠⲆ: 568,
        ᐃⵠΔΔΔᐃⵠ: 569,
        ⵠᐃⵠᐃᐃⵠΔ: 570,
        ᐃⲆⵠΔⵠⵠΔ: 571,
        ΔⵠⵠⵠⵠⲆⵠ: 572,
        ΔᐃᐃⵠⲆⲆⵠ: 573,
        Δᐃⵠᐃᐃⵠᐃ: 574,
        ⲆⵠⵠⲆΔᐃΔ: 575,
        ΔΔⵠᐃⲆⵠΔ: 576,
        ΔΔⵠΔᐃⵠⲆ: 577,
        ΔⵠΔⲆⵠⵠⵠ: 578,
        ⲆⵠᐃⲆⵠⲆⲆ: 579,
        ΔⲆᐃⵠⲆⵠⲆ: 580,
        ΔΔⲆⵠⲆΔⲆ: 581,
        ΔᐃΔΔⲆⲆⵠ: 582,
        ᐃⵠⲆⵠᐃΔᐃ: 583,
        ⲆΔᐃᐃⵠⵠΔ: 584,
        ΔⵠⲆⲆΔᐃᐃ: 585,
        ⲆⲆᐃⵠᐃᐃΔ: 586,
        ⵠⲆΔⵠᐃᐃΔ: 587,
        ΔⲆⲆⵠⵠΔᐃ: 588,
        ⲆᐃⲆⲆⲆⵠⲆ: 589,
        ΔⲆⲆⲆΔⵠⲆ: 590,
        ᐃⵠᐃⵠⵠᐃⵠ: 591,
        ⵠⵠⵠⲆⵠᐃᐃ: 592,
        ⲆΔᐃΔⵠᐃᐃⵠᐃ: 593,
        ᐃΔⲆⵠⵠⵠⲆ: 594,
        ᐃΔΔⲆⲆⵠΔⵠΔ: 595,
        ⵠⵠⲆᐃⲆᐃⲆ: 596,
        ⲆᐃᐃΔΔⵠᐃΔΔ: 597,
        ⵠⲆⲆᐃΔⵠᐃⲆᐃ: 598,
        ΔΔΔᐃⲆᐃⵠⵠⲆ: 599,
        ΔⵠᐃⵠᐃᐃⲆⵠᐃ: 600,
        ⵠᐃᐃⵠᐃⵠΔᐃⵠ: 601,
        ΔⲆⲆⲆⵠᐃᐃ: 602,
        ΔⵠᐃⵠΔ: 603,
        ᐃΔⵠᐃⵠΔⲆ: 604,
        ⵠᐃᐃⵠⵠⲆΔ: 605,
        ᐃⲆΔᐃⲆΔⵠ: 606,
        ᐃⵠΔⲆⲆⲆⲆᐃΔ: 607,
        ΔᐃΔᐃΔΔΔ: 608,
        ᐃⵠⵠⵠΔⲆᐃ: 609,
        ΔⲆⵠⲆⲆⲆⲆ: 610,
        ⲆⵠᐃΔⲆᐃΔ: 611,
        ᐃⲆΔΔⵠᐃΔ: 612,
        ΔΔⲆⲆΔΔⵠ: 613,
        ΔᐃΔⵠⲆΔΔ: 614,
        ᐃᐃΔᐃⵠΔᐃ: 615,
        ⲆⲆΔⵠⲆΔΔ: 616,
        ⲆⲆⵠᐃⵠⵠᐃ: 617,
        ⲆᐃᐃΔᐃⲆⲆ: 618,
        ΔⲆⵠⵠⲆ: 619,
        ⲆΔⵠᐃⵠ: 620,
        ΔΔᐃΔᐃ: 621,
        ⲆⵠΔΔⲆⲆΔⵠᐃ: 622,
        ΔⵠΔᐃⵠΔⵠ: 623,
        ᐃⵠⲆΔΔⵠΔ: 624,
        ᐃᐃᐃⲆΔᐃⵠ: 625,
        ⲆⲆΔⵠⵠᐃⲆ: 626,
        ΔΔⲆⲆⲆΔᐃ: 627,
        ⵠⵠⲆⲆⵠᐃⵠ: 628,
        ΔⲆΔΔᐃⵠΔ: 629,
        ΔⵠⲆⵠᐃⲆⵠ: 630,
        ⵠΔΔⵠΔᐃⲆ: 631,
        ΔᐃΔᐃΔⲆᐃ: 632,
        ⲆⵠΔᐃⲆⵠⲆ: 633,
        ᐃⵠⵠᐃΔⵠⵠ: 634,
        ⵠΔⵠⲆΔⲆᐃ: 635,
        ⵠⵠᐃΔⲆⲆΔ: 636,
        ⵠᐃΔⲆΔ: 637,
        ΔⲆⵠⲆΔᐃᐃ: 638,
        ΔᐃΔⵠⵠⵠᐃ: 639,
        ⵠᐃΔⲆᐃᐃⲆ: 640,
        ⲆΔᐃΔᐃⲆᐃ: 641,
        ΔᐃⵠⲆᐃⵠⵠ: 642,
        ⲆⲆⲆⲆⲆⲆⵠ: 643,
        ⲆⲆⵠⵠΔⵠⲆ: 644,
        ⲆΔⲆᐃⵠⵠΔ: 645,
        ᐃⵠⵠᐃᐃΔΔ: 646,
        ⵠⲆⲆΔⲆⵠᐃ: 647,
        ⵠⲆⲆⵠⲆⵠᐃ: 648,
        ⲆΔⲆⵠⵠᐃⲆ: 649,
        ⲆⵠⵠᐃΔⲆΔ: 650,
        ᐃⵠⲆᐃⵠΔΔ: 651,
        ΔⵠᐃⲆᐃΔΔ: 652,
        ⵠᐃⲆⵠⲆⵠᐃ: 653,
        ⵠⲆΔⵠΔᐃΔ: 654,
        ᐃΔⲆᐃᐃΔⵠ: 655,
        ⵠⵠⵠⲆᐃᐃⲆ: 656,
        ᐃᐃⲆⲆⲆⲆⲆ: 657,
        ⲆⲆΔᐃΔⲆⵠ: 658,
        ⲆⵠⲆⲆᐃⲆΔ: 659,
        ᐃᐃᐃᐃᐃΔⵠ: 660,
        ΔΔⵠⲆΔᐃΔ: 661,
        ΔⲆⲆΔᐃΔᐃ: 662,
        ⲆᐃⲆⲆⵠⲆⵠ: 663,
        ⵠⲆⲆᐃⲆᐃⲆ: 664,
        ΔⲆⲆⲆΔᐃⵠ: 665,
        ⵠᐃⵠⵠⲆⲆᐃ: 666,
        ⵠⲆⲆⵠΔΔᐃ: 667,
        ⵠⲆΔᐃΔⲆⵠ: 668,
        ⵠΔᐃΔⵠⵠΔ: 669,
        ᐃⲆᐃⲆᐃⲆⵠ: 670,
        ⲆᐃΔᐃᐃΔⵠ: 671,
        ⵠᐃᐃⲆⲆⲆᐃ: 672,
        ΔⵠⲆⵠⲆ: 673,
        ᐃⵠᐃᐃᐃⲆΔ: 674,
        ΔᐃᐃⵠⵠΔΔ: 675,
        ᐃΔⲆΔⲆ: 676,
        ᐃⵠΔⵠᐃᐃΔᐃⵠ: 677,
        ⵠΔᐃⵠⵠⵠⲆ: 678,
        ⵠⵠΔⲆⲆ: 679,
        ⵠⵠᐃⲆⲆΔΔ: 680,
        ⲆᐃᐃᐃΔΔⲆ: 681,
        ᐃⵠⲆΔⲆⵠⲆ: 682,
        ΔⵠⲆⲆⲆᐃΔ: 683,
        ΔᐃΔⲆΔΔⲆ: 684,
        ⲆᐃΔⲆⲆⵠΔ: 685,
        ΔᐃΔᐃᐃᐃⲆ: 686,
        ΔᐃⵠΔᐃΔⲆ: 687,
        ⲆⲆᐃΔᐃᐃⵠ: 688,
        ⵠΔΔⲆⵠΔΔ: 689,
        ΔᐃⲆΔΔᐃΔ: 690,
        ⵠⵠᐃΔⲆ: 691,
        ΔᐃΔΔΔ: 692,
        ΔⲆⲆᐃᐃ: 693,
        ᐃᐃΔΔⲆ: 694,
        ⵠⲆⵠⲆⵠ: 695,
        ⲆΔΔΔΔᐃᐃ: 696,
        ᐃᐃΔⵠⲆᐃⲆ: 697,
        ⲆⲆᐃΔᐃⲆⵠ: 698,
        ⵠᐃⲆᐃⲆΔᐃ: 699,
        ᐃᐃⲆᐃΔᐃⲆ: 700,
        ᐃⲆⵠⲆᐃⲆⵠ: 701,
        ΔⲆⵠᐃⲆⵠⵠ: 702,
        ᐃⵠⲆⲆΔⵠᐃ: 703,
        ΔⵠⲆⵠᐃΔᐃ: 704,
        ⲆⵠᐃᐃⲆΔⲆ: 705,
        ΔΔΔᐃⲆⵠᐃ: 706,
        ⲆΔⲆᐃⲆⵠⵠ: 707,
        ⲆΔⲆΔⵠⲆⲆ: 708,
        ⲆⵠⲆⲆⵠᐃⲆ: 709,
        ᐃΔᐃΔΔⵠᐃ: 710,
        ΔⵠⲆⲆⵠᐃᐃ: 711,
        ᐃⲆΔⲆⵠᐃΔ: 712,
        ᐃᐃᐃᐃΔⵠᐃ: 713,
        ΔᐃΔᐃⵠΔⵠ: 714,
        ᐃΔⲆΔᐃⲆⲆ: 715,
        ⵠⲆⲆⵠⲆΔⵠ: 716,
        ⵠⲆᐃⵠΔⵠᐃ: 717,
        ⵠΔΔⲆᐃⵠⵠ: 718,
        ⵠΔⲆΔΔⵠⵠ: 719,
        ᐃⲆⵠⲆᐃᐃᐃ: 720,
        ΔΔⵠΔΔⵠΔΔⵠ: 721,
        ⵠⵠⵠᐃⲆᐃⵠ: 722,
        ᐃⲆᐃⵠⵠⲆⵠ: 723,
        ΔᐃΔΔⲆⲆᐃ: 724,
        ᐃⵠⲆᐃⲆᐃⵠ: 725,
        ᐃΔⵠΔᐃⵠΔ: 726,
        ⵠᐃⲆΔⲆᐃⵠ: 727,
        ⲆⵠᐃᐃΔⲆᐃ: 728,
        ⲆⲆⲆΔΔⵠΔ: 729,
        ΔⲆⲆⲆᐃΔᐃ: 730,
        ⵠⲆᐃⵠΔᐃⲆ: 731,
        ⲆΔⲆΔⵠⲆⵠ: 732,
        ᐃⲆΔΔᐃⵠⲆ: 733,
        ΔⵠΔⵠΔᐃᐃ: 734,
        ⵠⲆⲆⲆᐃΔᐃ: 735,
        ΔΔⵠⲆᐃᐃⵠ: 736,
        ᐃΔⵠⵠΔⵠⲆ: 737,
        ⵠᐃΔⵠⲆΔᐃ: 738,
        ᐃᐃΔᐃΔΔᐃ: 739,
        ΔⵠⵠⵠᐃⲆⲆ: 740,
        ᐃᐃⵠΔΔⵠΔ: 741,
        ⵠΔⵠᐃⵠⲆⵠ: 742,
        ᐃᐃΔⵠᐃᐃΔ: 743,
        ΔⵠᐃⵠⲆΔⲆ: 744,
        ΔΔⵠᐃᐃᐃΔ: 745,
        ᐃΔᐃⲆⲆΔᐃ: 746,
        ⲆΔᐃᐃⵠᐃΔ: 747,
        ᐃᐃᐃᐃⲆⵠᐃ: 748,
        ΔΔᐃΔΔᐃΔ: 749,
        ΔⵠⵠⵠΔΔⵠ: 750,
        ⵠⵠΔⵠⵠΔᐃ: 751,
        ⲆᐃΔⲆᐃᐃΔ: 752,
        ᐃΔᐃΔΔᐃⵠ: 753,
        ⲆⲆΔⵠⵠΔⵠ: 754,
        ΔⲆⵠⵠᐃⲆⵠ: 755,
        ⲆⵠᐃΔΔᐃⲆ: 756,
        ⵠΔⲆΔⵠⲆⵠ: 757,
        ᐃⲆⵠⲆⲆᐃⲆ: 758,
        ⲆΔⵠΔΔⲆᐃ: 759,
        ΔⲆᐃⵠⵠⵠⲆ: 760,
        ΔⵠᐃᐃⲆⵠⵠ: 761,
        ᐃⲆΔⲆⲆⵠΔ: 762,
        ΔⵠⲆⵠⵠⲆⵠ: 763,
        ⵠΔᐃᐃΔᐃⲆ: 764,
        ⵠᐃᐃⲆΔⲆΔ: 765,
        ⲆΔΔⲆⲆⵠⲆ: 766,
        ΔⵠⲆᐃⵠΔΔ: 767,
        ⵠΔᐃⵠᐃⵠΔ: 768,
        ⲆΔΔⵠΔᐃᐃ: 769,
        ᐃⲆΔᐃⲆⲆᐃ: 770,
        ⲆᐃⵠⵠⲆⵠⵠ: 771,
        ⵠⵠⲆΔⲆⲆᐃ: 772,
        ⲆⵠᐃⲆᐃᐃⵠ: 773,
        ⵠⵠΔⵠⵠᐃᐃ: 774,
        ᐃΔΔΔᐃⲆⵠ: 775,
        ΔᐃⵠᐃⲆⵠⵠ: 776,
        ⲆΔⲆⲆΔⲆⲆ: 777,
        ⵠᐃΔᐃΔⵠⲆ: 778,
        ΔⲆⲆⵠⲆⲆⵠ: 779,
        ΔⲆΔΔᐃΔᐃ: 780,
        ⵠⵠᐃᐃⲆⵠᐃ: 781,
        ⵠⲆᐃΔᐃᐃⲆ: 782,
        ΔⲆᐃⲆᐃⲆΔ: 783,
        ⲆᐃΔᐃⲆΔΔ: 784,
        ⵠΔⵠΔΔⲆᐃ: 785,
        ᐃᐃᐃΔⲆΔⲆ: 786,
        ⲆⲆⵠΔΔⵠᐃ: 787,
        ᐃΔΔΔΔᐃΔ: 788,
        ⲆᐃᐃΔΔⵠΔ: 789,
        ⲆΔⲆⲆᐃⵠᐃ: 790,
        ᐃⵠᐃⲆⲆᐃⲆ: 791,
        ΔⵠΔⵠᐃⲆΔ: 792,
        ⵠⲆⵠⵠΔ: 793,
        ⲆΔⵠΔᐃᐃΔ: 794,
        ᐃᐃΔΔᐃⵠΔ: 795,
        ΔΔᐃΔⲆ: 796,
        ᐃⲆⲆⵠⵠⲆΔ: 797,
        ΔΔᐃⲆᐃᐃᐃ: 798,
        ⵠⵠⲆⲆⲆΔⲆ: 799,
        ᐃⵠⵠⲆⵠΔⵠ: 800,
        ⵠᐃᐃᐃⲆᐃᐃ: 801,
        ᐃⲆⲆⵠⵠ: 802,
        ⲆⲆΔⲆΔΔⲆ: 803,
        ⲆᐃⵠⲆⵠⲆⵠᐃΔ: 804,
        ΔⵠⲆⲆᐃⲆⲆΔⲆ: 805,
        ⵠⲆᐃΔᐃᐃⵠΔⲆ: 806,
        ⲆΔΔⵠΔⲆᐃⲆᐃ: 807,
        ⲆΔᐃⲆⲆΔⲆ: 808,
        ⲆⵠΔⲆⲆᐃᐃ: 809,
        ⵠᐃⲆⲆᐃⲆⲆ: 810,
        ᐃⲆⲆᐃᐃᐃⲆ: 811,
        ⲆᐃᐃⵠΔΔⵠ: 812,
        ΔⵠⲆᐃⲆⵠⵠ: 813,
        Ⲇⵠᐃⵠⵠᐃᐃ: 814,
        ⵠⵠΔⵠΔΔᐃ: 815,
        ᐃⵠΔᐃⲆⲆᐃ: 816,
        ⵠⵠᐃⵠᐃⵠⵠ: 817,
        ΔⵠΔᐃΔ: 818,
        ΔⲆΔᐃⲆ: 819,
        ΔⲆΔⵠⵠᐃΔ: 820,
        ⵠΔⲆΔⲆⵠΔ: 821,
        ⵠΔⲆⵠⵠᐃⵠ: 822,
        ⲆⲆᐃΔⵠⲆᐃ: 823,
        ΔΔᐃᐃᐃⵠⲆ: 824,
        ᐃᐃᐃΔᐃΔᐃ: 825,
        ⲆΔⵠᐃΔΔᐃ: 826,
        ᐃᐃᐃⵠΔⵠⵠ: 827,
        ⵠⵠΔⵠΔᐃⵠ: 828,
        ⵠⲆⲆᐃΔΔΔ: 829,
        ⲆⲆⵠⲆⲆⲆΔ: 830,
        ⲆᐃᐃᐃⵠⵠΔ: 831,
        ⲆΔΔⵠᐃⲆΔⵠᐃ: 832,
        ᐃΔⵠⵠΔΔⲆΔᐃ: 833,
        ⲆⵠᐃⵠᐃΔΔ: 834,
        ᐃⵠⲆᐃⵠⵠⲆ: 835,
        ⵠⵠᐃΔⵠᐃⲆ: 836,
        ⵠᐃⲆⵠⲆⵠⵠ: 837,
        ⲆⵠⵠⵠΔⵠΔ: 838,
        ⲆⲆΔΔⵠᐃⵠ: 839,
        ΔⵠᐃᐃΔⲆⵠ: 840,
        ⲆⵠⲆᐃⵠⵠΔ: 841,
        ΔⵠΔΔΔΔⵠ: 842,
        ᐃᐃⵠΔᐃᐃΔ: 843,
        ᐃΔⵠⵠⵠⵠⵠ: 844,
        ⵠⵠΔᐃᐃⲆⲆ: 845,
        ΔⲆΔᐃᐃΔΔ: 846,
        ⵠⲆⵠⲆⵠᐃⵠ: 847,
        ᐃΔΔⵠΔᐃⵠ: 848,
        ⵠⲆᐃᐃⵠⲆᐃ: 849,
        ⵠΔⲆᐃⲆⲆⲆ: 850,
        ΔⲆᐃᐃⲆΔΔ: 851,
        ᐃⲆⲆⵠⵠᐃⵠⵠᐃ: 852,
        ⲆᐃⲆⵠⲆΔⲆ: 853,
        ΔΔⵠᐃᐃ: 854,
        ΔΔΔⲆⲆᐃᐃΔΔ: 855,
        ᐃⲆΔᐃⵠᐃⲆⵠⵠ: 856,
        ΔⲆⵠⲆⵠⵠⵠⵠΔ: 857,
        ᐃⵠⲆΔΔΔΔᐃΔ: 858,
        ᐃⵠⵠΔᐃⲆⵠ: 859,
        ⵠᐃΔΔⲆΔΔ: 860,
        ΔᐃᐃⲆΔⲆⲆ: 861,
        ΔᐃΔⲆᐃᐃᐃ: 862,
        ⵠⵠᐃΔⲆΔΔ: 863,
        ⵠΔⲆⲆⲆᐃΔⵠⲆ: 864,
        ᐃⲆⵠΔᐃⲆΔ: 865,
        ᐃⵠⵠⵠⵠⵠⵠ: 866,
        ⵠⲆᐃΔⲆⲆⲆ: 867,
        ΔⲆΔⲆΔⵠᐃ: 868,
        ⵠᐃⲆⵠⲆᐃᐃ: 869,
        ⲆᐃⵠⲆᐃⲆⵠ: 870,
        ΔⵠⲆΔΔⵠⵠ: 871,
        ΔΔΔᐃⵠ: 872,
        ᐃΔⵠⲆⲆⵠⵠⲆⵠ: 873,
        ΔΔⲆⲆⲆⲆᐃ: 874,
        ⲆΔᐃᐃᐃᐃⵠ: 875,
        ΔΔᐃᐃΔᐃⵠ: 876,
        ⵠᐃⲆᐃΔⲆⲆ: 877,
        ⲆⲆⲆⵠⵠⵠΔ: 878,
        ΔΔΔΔⲆᐃⵠ: 879,
        ⵠⲆΔⵠΔⵠᐃ: 880,
        ⵠᐃⲆᐃᐃⲆΔ: 881,
        ᐃᐃᐃⲆᐃⵠᐃ: 882,
        ΔΔᐃᐃᐃⵠᐃ: 883,
        ⵠΔⵠΔⲆΔΔ: 884,
        ᐃⵠⲆⵠⵠΔᐃ: 885,
        ⲆᐃⵠΔⵠⲆⲆ: 886,
        ΔᐃⵠΔᐃ: 887,
        ᐃΔΔⲆⲆΔⲆ: 888,
        ⲆΔᐃⵠᐃⲆᐃ: 889,
        ᐃᐃⵠΔᐃᐃⲆ: 890,
        ΔⲆΔⵠⵠᐃⲆ: 891,
        ᐃⲆⵠⵠⵠΔΔ: 892,
        ᐃΔⲆΔᐃΔΔ: 893,
        ᐃΔΔᐃⵠᐃⲆ: 894,
        ᐃⵠΔⵠⲆᐃⵠ: 895,
        ΔⵠⲆⲆⵠⲆΔ: 896,
        ⲆᐃⵠᐃᐃΔΔ: 897,
        ⲆΔⵠⲆⲆⵠⵠ: 898,
        ⵠᐃⲆᐃⲆᐃᐃ: 899,
        ⵠᐃΔΔΔΔⵠ: 900,
        ΔᐃᐃⵠΔΔᐃ: 901,
        ⲆΔⲆΔⵠⵠⵠ: 902,
        ⵠⵠΔᐃᐃⵠⲆ: 903,
        ΔⵠⲆΔⵠΔΔ: 904,
        ⵠⵠᐃΔΔᐃΔ: 905,
        ⲆⵠᐃⵠᐃⵠⲆ: 906,
        ⲆᐃΔⲆᐃΔⵠ: 907,
        ᐃⵠΔⵠΔⵠⵠ: 908,
        ⵠⵠΔⲆΔᐃᐃ: 909,
        ᐃⵠᐃΔΔΔⲆ: 910,
        ⵠⵠⵠⲆΔΔⵠ: 911,
        ⲆⲆᐃⵠⵠΔⵠ: 912,
        ΔⲆᐃⵠⵠⲆΔ: 913,
        ᐃᐃᐃΔⲆᐃⲆᐃΔ: 914,
        ᐃⲆⲆΔᐃⵠⲆⵠᐃ: 915,
        ⵠⲆᐃΔᐃᐃⲆΔⵠ: 916,
        ⵠΔⲆΔᐃΔᐃΔᐃ: 917,
        ΔⵠⵠΔΔⵠᐃ: 918,
        ⵠΔᐃᐃᐃⵠᐃ: 919,
        Ⲇᐃᐃⵠⵠ: 920,
        ΔⲆᐃΔᐃᐃΔ: 921,
        ⲆⲆΔΔⲆⲆⵠ: 922,
        ⲆΔⲆⵠΔⲆⲆ: 923,
        ΔⲆΔΔⲆΔⵠ: 924,
        ⲆⵠΔΔᐃⲆΔ: 925,
        ⲆᐃⲆΔⵠⵠΔ: 926,
        ΔⵠᐃⲆⲆᐃᐃ: 927,
        ΔΔⲆΔⵠᐃΔ: 928,
        ⵠΔᐃⵠΔⵠⲆ: 929,
        ᐃᐃⵠⵠΔⲆΔ: 930,
        ⵠΔⵠⵠⲆⲆᐃ: 931,
        ⲆⵠⲆⲆΔΔΔ: 932,
        ⵠⲆᐃᐃⵠᐃΔ: 933,
        ΔΔⲆᐃᐃΔⵠ: 934,
        ΔᐃⵠⲆΔᐃⵠ: 935,
        ⲆⵠΔⲆⲆΔΔ: 936,
        ΔᐃᐃⲆΔⲆⵠ: 937,
        ⲆⵠⲆⵠΔᐃΔ: 938,
        ⲆᐃⲆΔⲆΔⲆ: 939,
        ΔᐃⲆΔⲆᐃⲆⵠΔ: 940,
        ⵠΔⲆⵠⵠ: 941,
        ᐃΔⵠᐃΔΔΔ: 942,
        ⵠᐃⲆᐃⵠⲆⲆ: 943,
        ⵠΔΔΔⵠᐃᐃ: 944,
        ΔΔⵠⲆⲆⵠⵠ: 945,
        ⵠⵠᐃᐃΔᐃⵠ: 946,
        ΔⵠⵠⵠⵠⲆⲆ: 947,
        ΔᐃⲆⲆⲆⲆᐃ: 948,
        ⵠⵠⲆΔⵠⲆᐃ: 949,
        ᐃⲆΔⵠⵠΔⲆ: 950,
        ⲆᐃⲆⲆⵠⵠⲆ: 951,
        ΔⲆᐃⵠᐃΔᐃ: 952,
        ᐃᐃⵠⵠᐃⵠⵠ: 953,
        ⲆΔᐃΔᐃΔᐃ: 954,
        ᐃⵠᐃⲆⵠᐃᐃ: 955,
        ΔⵠⲆΔΔᐃⵠ: 956,
        ᐃΔᐃΔⵠⲆⲆ: 957,
        ⵠⵠΔᐃᐃⲆⵠ: 958,
        ⲆΔΔⵠⵠⵠⵠ: 959,
        ΔᐃⲆᐃᐃᐃᐃ: 960,
        ⲆⵠⵠⵠⲆᐃⵠ: 961,
        ᐃᐃΔⵠᐃᐃᐃ: 962,
        ⲆⲆΔⵠⵠⵠᐃ: 963,
        ⵠⵠⵠⲆⲆᐃⵠᐃⵠ: 964,
        ⵠΔᐃⲆⵠⵠⵠ: 965,
        ᐃᐃᐃⵠⲆⵠⲆ: 966,
        ⲆⲆⲆΔⵠᐃⵠ: 967,
        ⵠⵠΔⵠⵠⲆΔ: 968,
        ⵠⵠⲆᐃⲆⵠΔ: 969,
        ⵠΔⲆᐃᐃⵠᐃ: 970,
        ⵠΔⵠᐃⲆⲆᐃ: 971,
        ᐃΔⵠⵠΔⵠΔ: 972,
        ΔⵠᐃⲆⵠⵠⲆ: 973,
        ᐃⵠᐃⲆⵠᐃΔ: 974,
        ΔᐃⲆᐃⵠⵠⵠ: 975,
        ⲆⲆᐃΔΔⲆΔ: 976,
        ⲆⲆⲆᐃΔⵠⲆ: 977,
        ΔΔᐃΔⲆⲆⲆ: 978,
        ⲆᐃΔⵠΔΔᐃ: 979,
        ⵠⵠΔⵠⵠⵠᐃ: 980,
        ⵠⵠⲆᐃΔⲆΔ: 981,
        ⲆⲆᐃᐃᐃⵠⲆ: 982,
        ᐃⲆᐃⵠΔⵠᐃ: 983,
        ⵠΔᐃⵠⵠΔᐃ: 984,
        ΔᐃΔⵠⵠⵠⵠ: 985,
        ⲆΔⵠⲆᐃΔⵠ: 986,
        ΔⵠᐃⵠᐃΔⵠ: 987,
        ⲆⲆΔⲆᐃⵠΔ: 988,
        ΔⲆⲆΔⲆ: 989,
        ᐃⵠᐃⲆΔⲆΔ: 990,
        ⲆⵠΔⵠⲆⲆⵠ: 991,
        ⵠⲆⵠⲆΔⲆᐃ: 992,
        ⲆⲆⵠⲆⲆᐃⵠ: 993,
        ⵠⵠΔᐃⲆⵠΔ: 994,
        ᐃᐃⵠΔⲆⲆᐃ: 995,
        ΔⲆᐃᐃᐃΔⲆ: 996,
        ΔΔⵠΔΔⵠⲆ: 997,
        ᐃⲆⵠᐃᐃⲆⵠ: 998,
        ⵠᐃⵠᐃⲆΔΔ: 999,
        ⵠⵠΔⵠⲆⵠΔ: 1000,
        ⲆΔⵠᐃⵠᐃᐃ: 1001,
        ⲆΔⲆⵠᐃΔᐃ: 1002,
        ⲆΔⵠΔⲆᐃⲆ: 1003,
        ΔⲆⵠᐃᐃⲆⵠ: 1004,
        ΔⵠⲆᐃΔΔⲆ: 1005,
        ⲆΔΔΔⵠⲆⵠ: 1006,
        ᐃΔⲆⲆᐃᐃⲆ: 1007,
        ᐃᐃΔΔⲆⵠⵠ: 1008,
        ⲆᐃⵠΔⵠⵠⲆ: 1009,
        ⲆΔⲆⲆᐃΔⲆ: 1010,
        ᐃΔᐃΔΔΔΔ: 1011,
        ⵠⲆΔⵠⵠᐃᐃ: 1012,
        ΔᐃⲆᐃⲆⵠⵠ: 1013,
        ⵠᐃⲆᐃᐃⵠᐃ: 1014,
        ᐃⲆⵠΔΔⵠΔ: 1015,
        ΔᐃΔᐃⵠⵠᐃ: 1016,
        ⲆⵠΔⲆΔΔⵠ: 1017,
        ΔᐃᐃⲆⲆΔΔ: 1018,
        ⲆΔⲆⲆⵠΔⲆ: 1019,
        ⵠⵠᐃᐃⵠⲆΔ: 1020,
        ⲆⵠⲆⲆᐃⲆᐃ: 1021,
        ⲆᐃΔᐃⲆᐃᐃ: 1022,
        ᐃᐃⲆⵠⵠⲆⵠ: 1023,
        ᐃⲆΔΔ: 1024,
        ⵠΔΔᐃ: 1025,
        ⵠⲆᐃᐃᐃᐃⲆ: 1026,
        ΔΔᐃⲆΔᐃᐃ: 1027,
        ΔΔⲆⲆⵠᐃᐃ: 1028,
        ᐃᐃΔΔⲆⲆⵠ: 1029,
        ᐃᐃⵠⲆⵠΔᐃ: 1030,
        ⵠΔⵠⵠᐃΔΔ: 1031,
        ΔᐃΔΔᐃⲆⵠ: 1032,
        ΔΔⲆⲆᐃ: 1033,
        ΔΔⵠᐃⲆⲆᐃ: 1034,
        ᐃⵠⵠⲆᐃ: 1035,
        ᐃᐃⲆⵠⵠΔᐃ: 1036,
        ΔΔⲆᐃᐃ: 1037,
        ⲆⲆΔΔᐃⵠⲆ: 1038,
        ⲆⲆᐃΔᐃ: 1039,
        ᐃⲆⲆⵠΔⲆᐃ: 1040,
        ⲆⵠⲆΔⲆ: 1041,
        ΔΔⵠᐃΔ: 1042,
        ΔⲆΔⵠᐃⲆⵠ: 1043,
        ΔᐃᐃⵠΔⲆⵠ: 1044,
        ⲆⲆΔⵠΔᐃΔ: 1045,
        ᐃᐃΔⲆΔⵠⲆ: 1046,
        ⵠᐃΔⲆⵠΔΔ: 1047,
        ⵠᐃᐃⵠⲆⵠⲆ: 1048,
        ⵠⲆᐃⲆⵠⵠⲆ: 1049,
        ΔⵠᐃⲆᐃⲆⲆ: 1050,
        ΔⲆⲆⲆᐃⲆⵠ: 1051,
        ᐃΔᐃΔⵠ: 1052,
        ΔⲆⲆⲆⲆⵠᐃ: 1053,
        ᐃΔⵠΔⵠ: 1054,
        ᐃⲆⵠᐃᐃⵠᐃ: 1055,
        ΔΔⵠΔⵠⲆⵠ: 1056,
        ΔⲆᐃⲆᐃΔΔ: 1057,
        ᐃᐃⵠⲆⲆᐃΔ: 1058,
        ⲆⵠⲆΔΔΔΔ: 1059,
        ⵠΔⵠⲆΔⲆΔ: 1060,
        ⲆᐃΔᐃᐃΔⲆᐃΔ: 1061,
        ⲆᐃⲆⵠⵠⵠⲆ: 1062,
        ⵠᐃⲆΔΔΔᐃ: 1063,
        ᐃᐃΔᐃᐃⲆᐃΔΔ: 1064,
        ΔᐃᐃᐃᐃⵠⲆ: 1065,
        ΔΔΔᐃᐃⲆᐃ: 1066,
        ᐃⲆΔⵠⲆⵠⲆ: 1067,
        ⵠⵠⲆᐃΔΔⲆ: 1068,
        ΔⲆⲆΔᐃ: 1069,
        ⲆⲆⵠΔⲆⲆΔ: 1070,
        ⵠⵠⲆⲆⲆᐃⲆ: 1071,
        ᐃᐃΔⵠᐃⲆⵠ: 1072,
        ΔᐃⵠΔᐃΔⵠ: 1073,
        ⵠΔΔΔΔⲆΔ: 1074,
        ᐃⵠᐃᐃΔⵠᐃ: 1075,
        ΔⲆⵠΔᐃΔᐃ: 1076,
        ᐃⲆᐃᐃⲆⵠᐃ: 1077,
        ΔᐃⵠⲆⲆΔᐃ: 1078,
        ⲆᐃⲆⵠⲆΔⵠ: 1079,
        ⲆⵠΔᐃᐃⲆⵠ: 1080,
        ⵠΔᐃᐃⲆΔⵠ: 1081,
        ᐃᐃⵠΔⲆⵠⵠ: 1082,
        ΔᐃᐃΔⵠᐃⵠ: 1083,
        ΔΔⲆⵠⵠ: 1084,
        ᐃᐃΔᐃⲆᐃⲆ: 1085,
        ⲆⲆᐃⲆⲆᐃⲆ: 1086,
        ⲆⵠⵠⲆⵠᐃᐃ: 1087,
        ⲆΔᐃΔᐃⵠⵠ: 1088,
        ⲆΔᐃⲆⲆΔⵠ: 1089,
        ᐃᐃΔᐃΔΔΔ: 1090,
        ᐃΔⵠΔⲆΔⵠ: 1091,
        ⵠⵠᐃΔΔⵠⲆ: 1092,
        ⵠᐃⲆΔⲆᐃΔ: 1093,
        ⵠⵠⲆⲆⲆΔᐃ: 1094,
        ⵠⵠΔⵠⵠΔⲆ: 1095,
        ⵠΔᐃᐃΔΔⲆ: 1096,
        ⲆΔΔⵠΔⲆΔ: 1097,
        ⵠⲆⵠᐃⵠΔⲆ: 1098,
        ⵠΔⵠΔⵠ: 1099,
        ⵠⵠᐃⲆⵠⲆᐃ: 1100,
        ᐃⵠⵠⵠΔⲆⵠ: 1101,
        ΔᐃᐃΔⵠⵠᐃ: 1102,
        ΔᐃⵠᐃⵠⵠⲆ: 1103,
        ⲆᐃⲆⲆⵠⵠΔ: 1104,
        ⵠⲆΔΔΔⲆⲆ: 1105,
        ᐃⲆᐃᐃⵠΔᐃ: 1106,
        ΔᐃᐃⲆΔᐃᐃ: 1107,
        ⲆᐃᐃᐃΔᐃᐃ: 1108,
        ⲆΔⲆᐃΔⵠΔ: 1109,
        ⲆⲆⲆⲆⵠΔᐃ: 1110,
        ⲆⵠⵠᐃΔΔⵠ: 1111,
        ⵠⵠᐃⲆᐃⲆΔ: 1112,
        ΔᐃⵠᐃᐃⵠΔ: 1113,
        ⵠⲆᐃΔΔⵠⲆ: 1114,
        ⵠⲆⲆⲆΔΔᐃ: 1115,
        ⲆⲆΔⲆⲆΔⲆ: 1116,
        ΔᐃΔⲆⲆᐃⲆ: 1117,
        ΔⵠⲆΔᐃⵠⵠ: 1118,
        ⵠᐃⲆΔΔⲆⵠ: 1119,
        ⵠΔⵠΔⲆ: 1120,
        ΔⲆᐃⲆΔᐃΔ: 1121,
        ⵠΔᐃⵠᐃᐃΔ: 1122,
        ΔⵠΔⲆΔΔᐃ: 1123,
        ΔⲆⵠⲆⲆΔⵠ: 1124,
        ΔΔⵠⲆⵠᐃⵠ: 1125,
        ΔΔⵠⲆᐃⲆⵠ: 1126,
        ⵠᐃⲆᐃΔⲆᐃ: 1127,
        ΔⲆⵠⲆⵠᐃⲆ: 1128,
        ⵠΔⵠⵠⵠΔᐃ: 1129,
        ΔΔⵠᐃΔⵠΔ: 1130,
        ⲆⵠⲆⲆᐃⲆⵠ: 1131,
        ⲆⲆⵠⲆΔⲆⵠ: 1132,
        ⵠⵠⲆᐃᐃⵠᐃ: 1133,
        ΔΔΔⵠΔΔΔ: 1134,
        ⵠⵠᐃᐃΔᐃᐃ: 1135,
        ΔᐃⵠΔΔⲆΔ: 1136,
        ⵠΔΔⲆⲆΔᐃ: 1137,
        Δⵠⵠᐃⵠᐃⵠ: 1138,
        ⵠⲆⲆⵠⵠΔΔ: 1139,
        ᐃΔΔᐃᐃⵠᐃ: 1140,
        ᐃⵠⲆΔⲆⲆⲆ: 1141,
        ⵠᐃⵠΔᐃΔⵠ: 1142,
        ᐃΔΔⲆΔᐃᐃ: 1143,
        ΔᐃⲆⵠⵠΔΔ: 1144,
        ⲆⲆⵠⵠΔⲆΔ: 1145,
        ᐃᐃⲆⵠᐃΔⵠ: 1146,
        ΔⲆⵠⲆⲆᐃⵠ: 1147,
        ⲆΔⲆⵠΔᐃⲆ: 1148,
        ΔⲆⲆⵠᐃᐃᐃ: ["#E9CF96", "#144940"],
        ΔⲆΔⲆΔⲆⵠ: 1149,
        ΔⵠⲆᐃⵠⲆⲆ: 1150,
        ⵠⲆΔᐃⲆΔⲆ: 1151,
        ⲆⵠⲆⵠΔⲆΔ: 1152,
        ᐃⲆᐃⵠⵠᐃΔ: 1153,
        ⲆⲆΔⲆᐃΔΔ: 1154,
        ⲆⲆⲆᐃⵠⵠᐃ: 1155,
        ⵠΔΔⵠⵠ: 1156,
        ⲆⵠⲆΔᐃᐃΔ: 1157,
        ⲆᐃⲆⲆΔⲆΔ: 1158,
        ⵠΔⲆⵠⵠⵠᐃ: 1159,
        ⵠΔⵠΔΔᐃⲆ: 1160,
        ᐃⵠΔⲆᐃΔᐃ: 1161,
        ΔⲆΔᐃΔᐃΔ: 1162,
        ⲆⲆᐃΔᐃⲆΔ: 1163,
        ΔΔᐃⵠⵠΔⲆ: 1164,
        ᐃⲆⵠᐃⵠΔΔ: 1165,
        ⵠⲆⲆᐃΔⲆⵠ: 1166,
        ⲆᐃΔⲆⵠᐃΔ: 1167,
        ⲆⲆⵠᐃⵠⵠⲆ: 1168,
        ᐃⵠΔⲆⵠⲆⲆ: 1169,
        ⲆⵠⵠⲆⲆΔᐃ: 1170,
        ΔᐃⲆᐃΔΔⲆ: 1171,
        ΔᐃᐃΔⲆΔⵠ: 1172,
        ΔⲆᐃΔⵠⵠᐃ: 1173,
        ⲆⲆΔΔⵠΔⵠ: 1174,
        ΔΔⵠⲆΔΔⲆ: 1175,
        ΔⵠⵠᐃⵠΔⲆ: 1176,
        ΔⲆⵠⲆⲆᐃⲆ: 1177,
        ⵠᐃⵠⵠΔⵠΔ: 1178,
        ᐃⲆΔⵠΔΔⵠ: 1179,
        ΔᐃΔᐃⲆΔᐃ: 1180,
        ᐃⲆΔⲆⲆΔΔ: 1181,
        ᐃⲆᐃⲆⵠᐃⲆ: 1182,
        ᐃⲆⲆΔΔⲆⲆ: 1183,
        ΔⵠⲆⵠⲆⵠⲆ: 1184,
        ⵠΔΔⲆᐃᐃⵠ: 1185,
        ΔΔⲆᐃΔⲆⵠ: 1186,
        ⲆⵠⵠΔⲆⵠΔ: 1187,
        ⵠᐃΔⲆⲆᐃΔ: 1188,
        ⵠΔⲆᐃⲆⵠᐃ: 1189,
        ⵠΔⲆΔᐃⲆⲆ: 1190,
        ⵠⵠⲆⲆᐃⵠᐃ: 1191,
        ⵠᐃⵠΔⵠΔΔ: 1192,
        ᐃⵠⵠΔᐃΔⲆ: 1193,
        ΔᐃⲆᐃⵠΔⲆ: 1194,
        ⲆⵠᐃᐃⲆⵠⲆ: 1195,
        ΔⲆᐃΔΔⲆΔ: 1196,
        ΔᐃⲆΔⲆⵠΔ: 1197,
        ⵠᐃⵠⲆⲆᐃΔ: 1198,
        ⵠᐃᐃΔⲆⲆΔ: 1199,
        ⵠⲆᐃᐃⲆⲆⵠ: 1200,
        ⵠⵠΔⲆⵠΔΔ: 1201,
        ⲆⲆⵠⵠⲆⲆⲆ: 1202,
        ΔᐃᐃⵠᐃΔⵠ: 1203,
        Ⲇⵠᐃᐃᐃⵠⵠ: 1204,
        ΔⵠⵠⲆΔᐃⲆ: 1205,
        ᐃΔΔⵠΔⵠⲆ: 1206,
        ⵠΔᐃᐃⵠᐃᐃ: 1207,
        ΔᐃⲆΔΔⵠⲆ: 1208,
        ⲆⵠⵠⵠᐃⲆⲆ: 1209,
        ⵠΔΔΔⵠΔⵠ: 1210,
        ᐃΔᐃⲆᐃᐃᐃ: 1211,
        ⲆⲆⲆΔⵠΔⵠ: 1212,
        ⲆⲆΔⲆᐃΔᐃ: 1213,
        ᐃΔᐃᐃⲆⵠⲆ: 1214,
        ⵠⲆⵠΔⵠᐃⵠ: 1215,
        ⲆᐃⲆΔᐃᐃⲆ: 1216,
        ᐃⲆΔⵠᐃᐃΔ: 1217,
        ᐃⲆⵠⲆΔ: 1218,
        ⲆⲆⵠⵠᐃΔⵠ: 1219,
        Δⵠᐃⵠᐃ: 1220,
        ⵠⵠΔᐃΔⲆⲆ: 1221,
        ᐃⵠᐃᐃᐃⲆᐃ: 1222,
        ⵠⲆⲆΔΔᐃⲆ: 1223,
        ΔⵠΔⵠⵠⵠⲆ: 1224,
        ⲆⵠΔⲆⵠⵠΔ: 1225,
        ᐃⵠᐃᐃⵠⲆⲆ: 1226,
        ⲆⲆᐃⵠᐃΔᐃ: 1227,
        ᐃⲆⲆⵠⵠⲆᐃ: 1228,
        ⲆⲆᐃⵠΔⲆᐃ: 1229,
        ᐃⵠⵠᐃΔΔᐃ: 1230,
        ⵠΔᐃᐃᐃᐃᐃ: 1231,
        ᐃⲆⲆΔⲆⲆⵠ: 1232,
        ᐃᐃΔᐃΔⲆᐃ: 1233,
        Δᐃᐃⵠⵠⵠᐃ: 1234,
        ⵠᐃᐃᐃΔⲆⵠ: 1235,
        ᐃᐃΔᐃⵠᐃΔ: 1236,
        ⲆⲆⵠⵠΔᐃⲆ: 1237,
        ⵠᐃΔᐃⵠᐃΔ: 1238,
        ⲆᐃⲆΔⵠⲆⲆ: 1239,
        ⲆΔᐃΔⲆⲆⲆ: 1240,
        ᐃΔⲆΔΔⲆⲆ: 1241,
        ⵠⲆⲆΔⲆΔᐃ: 1242,
        ΔᐃᐃⲆⲆⵠⵠ: 1243,
        ᐃᐃᐃⵠⵠᐃⲆ: 1244,
        ⵠⲆΔⵠⵠᐃⵠ: 1245,
        ᐃΔᐃᐃⵠⵠᐃ: 1246,
        ΔⵠᐃⲆⲆⵠⲆ: 1247,
        ΔᐃⵠⲆⵠⲆᐃ: 1248,
        ⲆⲆΔᐃⲆⲆᐃ: 1249,
        ⲆⵠⵠΔⲆⲆᐃ: 1250,
        ΔⲆⵠⲆⵠⲆᐃ: 1251,
        ᐃΔΔΔⵠⵠⲆ: 1252,
        ΔⲆⲆⵠΔⵠⲆ: 1253,
        ᐃΔⵠⵠΔⲆⲆ: 1254,
        ⵠᐃΔⲆⵠⵠᐃ: 1255,
        ⵠⲆᐃⵠΔΔᐃ: 1256,
        ⵠΔⲆΔΔᐃΔ: 1257,
        ΔⵠΔΔΔⵠⲆ: 1258,
        ⵠⲆⲆᐃⵠⵠΔ: 1259,
        ᐃΔᐃᐃⵠΔΔ: 1260,
        ΔΔΔⵠᐃⲆΔ: 1261,
        ᐃᐃⲆⲆΔⲆΔ: 1262,
        ⵠΔᐃᐃᐃΔⲆ: 1263,
        ⲆⲆⲆⲆΔⲆⵠ: 1264,
        ΔᐃⲆΔᐃᐃᐃ: 1265,
        ΔΔⵠⵠΔⲆΔ: 1266,
        ΔⲆΔΔᐃⵠᐃ: 1267,
        ΔΔⲆᐃⵠⲆᐃ: 1268,
        ΔᐃⲆΔΔⵠΔ: 1269,
        ⵠᐃⵠΔᐃΔᐃ: 1270,
        ΔⲆⲆΔⵠⵠᐃ: 1271,
        ⲆⵠⲆᐃΔⵠᐃ: 1272,
        ᐃⲆⲆⵠΔⵠᐃ: 1273
    };
    mr = 0;
    const or = 6;
    var pr = {
        ΔⵠᐃⵠⲆ: 0,
        ᐃᐃᐃⲆⵠ: 1,
        Ⲇⵠⵠⵠⵠ: 2,
        ⲆΔᐃΔⲆ: 3,
        ᐃⵠΔⵠⵠ: 4,
        ΔⲆⲆⲆᐃ: 5,
        ⵠΔᐃⵠⵠ: 6,
        ΔᐃΔᐃⲆ: 7,
        ΔᐃΔΔⲆ: 8,
        ⲆⵠΔΔⵠ: 9,
        ⵠᐃᐃⵠⵠ: 10,
        ⵠᐃΔⵠΔ: 11,
        ⲆΔΔᐃΔ: 12,
        ⵠᐃⲆⲆⲆ: 13,
        ᐃⵠᐃⵠⲆ: 14,
        ⲆᐃⲆᐃΔ: 15,
        ⲆⵠⵠⵠⲆ: 16,
        ⵠᐃⵠⵠⲆ: 17,
        ⵠᐃⵠⵠᐃ: 18,
        ⵠᐃⲆᐃⲆ: 19,
        ΔⲆᐃⲆΔ: 20,
        ⲆᐃΔΔⵠ: 21,
        ᐃᐃΔᐃⲆ: 22,
        ⲆⵠΔᐃΔ: 23,
        ⲆⵠᐃΔⲆ: 24,
        ⲆΔⲆΔᐃ: 25,
        ᐃⵠⵠⲆⲆ: 26,
        ⲆᐃⵠΔΔ: 27,
        ⵠᐃⵠᐃⵠ: 28,
        ΔⲆⵠΔΔ: 29,
        ⵠⲆᐃⲆΔ: 30,
        ⲆᐃⲆⵠᐃ: 31,
        ᐃᐃΔⲆᐃ: 32,
        ⲆᐃΔⲆⲆ: 33,
        Ⲇⵠᐃᐃᐃ: 34,
        Ⲇⵠⵠᐃⵠ: 35,
        ⵠᐃΔᐃⲆ: 36,
        ΔⲆⲆⵠΔ: 37,
        ᐃΔⵠⲆΔ: 38,
        ⲆᐃⵠⵠⲆ: 39,
        ⵠⲆΔⵠΔ: 40,
        ⵠⵠᐃⲆⵠ: 41,
        ⵠⲆⲆⵠᐃ: 42,
        ΔⵠⵠΔⵠ: 43,
        ⵠⵠⲆΔΔ: 44,
        ᐃΔᐃΔᐃ: 45,
        ⵠᐃΔⲆⲆ: 46,
        ⵠⲆᐃᐃᐃ: 47,
        ᐃᐃΔΔΔ: 48,
        ΔⲆⲆⵠⲆ: 49,
        ᐃΔᐃⵠⵠ: 50,
        ⵠⲆΔⵠᐃ: 51,
        ⲆⵠᐃⵠΔ: 52,
        ΔᐃⵠᐃΔ: 53,
        ᐃⵠⲆⲆᐃ: 54,
        ᐃⵠΔᐃⵠ: 55,
        ⵠⵠⲆⵠⲆ: 56,
        ᐃⲆⲆⲆΔ: 57,
        ⲆΔⲆⵠⲆ: 58,
        ΔᐃⵠⵠⲆ: 59,
        ΔᐃΔⲆᐃ: 60,
        ⲆⲆᐃᐃⲆ: 61,
        ᐃΔⲆⵠⵠ: 62,
        ᐃᐃⵠⵠᐃ: 63,
        ⵠⵠⲆⲆⲆ: 64,
        ᐃⲆⲆᐃⲆ: 65,
        ⵠⲆᐃⲆⲆ: 66,
        ⲆΔⲆΔⲆ: 67,
        ⲆⵠᐃᐃⲆ: 68,
        ΔⵠⵠᐃΔ: 69,
        ᐃΔᐃᐃᐃ: 70,
        Δᐃⵠⵠⵠ: 71,
        Ⲇⵠᐃᐃⵠ: 72,
        ⵠⵠΔᐃⲆ: 73,
        ⲆⵠⲆᐃⵠ: 74,
        ΔΔⵠⲆᐃ: 75,
        ΔⲆΔΔⲆ: 76,
        ᐃⵠᐃᐃᐃ: 77,
        ᐃΔᐃⲆⲆ: 78,
        ΔⲆΔΔⵠ: 79,
        ⵠΔⲆΔᐃ: 80,
        ΔΔⵠΔⲆ: 81,
        ⵠᐃᐃᐃΔ: 82,
        ᐃⵠΔⵠⲆ: 83,
        ⵠⲆⵠᐃΔ: 84,
        ⵠⲆΔⵠⵠ: 85,
        ⲆⵠⲆⵠⲆ: 86,
        ᐃⲆᐃⲆⵠ: 87,
        ᐃⲆⲆΔⵠ: 88,
        ⵠᐃΔⵠᐃ: 89,
        ᐃᐃⲆᐃⵠ: 90,
        ᐃⲆΔᐃΔ: 91,
        ΔⲆⵠⲆⲆ: 92,
        ⵠⲆΔΔᐃ: 93,
        ⵠⲆⲆⲆⲆ: 94,
        ᐃⲆᐃΔΔ: 95,
        ⵠⵠⲆΔⲆ: 96,
        ⵠΔΔⲆⲆ: 97,
        ⲆΔΔⲆᐃ: 98,
        ΔᐃⵠⵠΔ: 99,
        ᐃΔⲆΔ: 100,
        ⵠᐃⲆⲆᐃ: 101,
        ⵠⲆᐃⲆⵠ: 102,
        ⵠᐃᐃᐃⲆ: 103,
        ⵠⵠᐃᐃⵠ: 104,
        ⵠΔᐃΔΔ: 105,
        ᐃⲆⵠⵠΔ: 106,
        Δᐃᐃⵠᐃ: 107,
        ΔⲆⵠΔⲆ: 108,
        ⲆᐃΔⲆⵠ: 109,
        ⲆⵠⲆᐃᐃ: 110,
        ΔⵠΔⲆΔ: 111,
        ⲆΔⵠⵠⲆΔⲆ: 112,
        ΔⵠΔⲆΔᐃⲆ: 113,
        ⵠⲆⵠΔΔ: 114,
        ⲆΔⵠᐃᐃ: 115,
        ᐃⵠⵠΔⵠ: 116,
        ⲆⲆΔΔᐃ: 117,
        ΔⲆⵠⲆΔ: 118,
        ᐃᐃⵠΔⲆ: 119,
        ⵠΔⲆΔΔ: 120,
        ⲆⲆⲆⲆⲆ: 121,
        ⲆᐃⲆⵠⲆ: 122,
        ⵠᐃΔΔⵠ: 123,
        ΔⵠⲆⲆⲆ: 124,
        ᐃΔⵠᐃⵠ: 125,
        ⵠⵠⵠⲆⵠ: 126,
        ᐃⲆΔΔΔ: 127,
        ⵠΔⲆᐃⲆ: 128,
        ⲆᐃΔⲆᐃ: 129,
        ΔⵠΔⵠⵠ: 130,
        ⵠᐃⵠΔⲆ: 131,
        ΔΔⲆΔⵠ: 132,
        ⲆᐃⲆΔΔ: 133,
        ᐃⵠᐃⲆᐃ: 134,
        ΔⵠΔⵠⲆ: 135,
        ᐃⲆⵠᐃᐃ: 136,
        ⵠᐃᐃΔᐃ: 137,
        ⲆⲆᐃᐃΔ: 138,
        ΔΔⵠⲆΔ: 139,
        ᐃᐃⵠᐃᐃ: 140,
        ⵠⵠΔⵠᐃ: 141,
        ⵠⲆΔⲆΔ: 142,
        ᐃⵠᐃΔᐃ: 143,
        ⲆᐃⲆᐃⲆ: 144,
        ᐃⵠⲆΔᐃ: 145,
        ⲆᐃⵠⵠΔ: 146,
        ΔᐃⵠΔΔ: 147,
        ⵠᐃΔᐃΔ: 148,
        ⲆⲆⵠⵠᐃ: 149,
        ⲆⲆᐃⵠΔ: 150,
        ⲆⲆΔⵠⵠ: 151,
        ⵠΔⵠⵠⲆ: 152,
        ΔᐃⲆᐃΔ: 153,
        ΔⲆⲆᐃⲆ: 154,
        ᐃⲆΔⲆⵠ: 155,
        ⲆΔⲆⲆᐃ: 156,
        ⵠᐃⲆΔΔ: 157,
        ⲆⲆᐃΔΔ: 158,
        ⲆΔᐃⵠⲆ: 159,
        ⵠΔⵠᐃΔ: 160,
        ⵠΔⵠΔΔ: 161,
        ΔⵠΔΔⲆ: 162,
        ⲆᐃⵠᐃΔ: 163,
        ⲆⵠⵠᐃⲆ: 164,
        ᐃⲆⵠⲆⵠ: 165,
        ⲆⵠᐃⲆᐃ: 166,
        ⲆⵠⲆΔΔ: 167,
        ⵠΔⵠⵠΔ: 168,
        ᐃᐃᐃΔΔ: 169,
        Δⵠⵠᐃⵠ: 170,
        ᐃΔⲆⵠᐃ: 171,
        ⵠⲆᐃⵠΔ: 172,
        ΔⲆⵠΔⵠ: 173,
        ΔⵠᐃⲆΔ: 174,
        ΔⲆⲆⲆⵠ: 175,
        ⲆⵠᐃⲆⵠ: 176
    };
    const rr = 15;
    mr = 0;
    var sr = {
        Ⲇⵠⵠᐃⵠ: 0,
        ΔⲆⲆⲆᐃ: 1,
        ᐃᐃΔⲆⲆ: 2,
        ⵠΔᐃⵠⵠ: 3,
        ΔᐃΔᐃⲆ: 4,
        ⵠᐃΔᐃⲆ: 5,
        ΔⲆⲆⵠΔ: 6,
        ΔᐃⲆΔΔ: 7,
        ᐃⵠΔⵠⵠ: 8,
        Ⲇⵠᐃⵠᐃ: 9,
        ᐃⵠΔⵠⲆ: 10,
        ⵠⲆⵠᐃΔ: 11,
        ⲆΔⲆΔᐃ: 12,
        ᐃⵠⵠⲆⲆ: 13,
        ⲆᐃⵠΔΔ: 14,
        ⵠᐃⵠᐃⵠ: 15,
        ⲆᐃⲆⵠᐃ: 16,
        ᐃᐃΔⲆᐃ: 17,
        ⲆᐃΔⲆⲆ: 18,
        ⲆᐃⵠⵠⲆ: 19,
        ᐃⲆᐃΔΔ: 20,
        ⵠⵠⲆΔⲆ: 21,
        ⵠΔΔⲆⲆ: 22,
        ⵠΔⲆΔᐃ: 23,
        ΔΔⵠΔⲆ: 24,
        ᐃⲆⲆΔⵠ: 25,
        ⵠᐃΔⵠᐃ: 26,
        ᐃᐃⲆᐃⵠ: 27,
        ⲆⵠᐃΔⲆ: 28,
        ᐃΔⲆΔ: 29,
        ᐃΔⵠⲆΔ: 30,
        ΔᐃΔΔⲆ: 31,
        ⲆⵠΔΔⵠ: 32,
        ΔⲆⵠΔΔ: 33,
        ⵠⲆᐃⲆΔ: 34,
        ⵠᐃᐃⵠⵠ: 35,
        ⵠᐃΔⵠΔ: 36,
        ⲆΔΔᐃΔ: 37,
        ⵠᐃⲆⲆⲆ: 38,
        ᐃⵠᐃⵠⲆ: 39,
        ⵠⲆΔⵠⵠ: 40,
        ᐃⵠⵠᐃᐃ: 41,
        ⵠⵠⵠⲆⲆ: 42,
        ᐃⲆΔᐃΔ: 43,
        ΔⲆⵠⲆⲆ: 44,
        ⲆᐃⲆᐃΔ: 45,
        ⲆⵠⵠⵠⲆ: 46,
        ⵠⲆⲆⲆⲆ: 47,
        ⵠⲆΔΔᐃ: 48,
        ⲆᐃΔΔⵠ: 49,
        ⵠᐃⵠⵠⲆ: 50,
        ⵠᐃⵠⵠᐃ: 51,
        ⵠᐃⲆᐃⲆ: 52,
        ᐃᐃΔᐃⲆ: 53,
        ⲆⵠΔᐃΔ: 54,
        ⲆᐃⲆⵠⲆ: 55,
        ⵠᐃΔΔⵠ: 56,
        Ⲇⵠᐃᐃᐃ: 57,
        ᐃⲆᐃⲆⵠ: 58,
        ⵠⵠⵠⲆⵠ: 59,
        ᐃⲆΔΔΔ: 60,
        ⵠΔⲆᐃⲆ: 61,
        ⲆᐃΔⲆᐃ: 62,
        ΔⵠΔⵠⵠ: 63,
        ⵠᐃⵠΔⲆ: 64,
        ⲆᐃⲆΔΔ: 65,
        ΔⵠΔⵠⲆ: 66,
        ⵠᐃᐃΔᐃ: 67,
        ΔΔⵠⲆΔ: 68,
        ⵠⵠΔⵠᐃ: 69,
        ᐃⵠᐃΔᐃ: 70,
        ᐃⵠⲆΔᐃ: 71,
        ⲆᐃⵠⵠΔ: 72,
        ΔᐃⵠΔΔ: 73,
        ⵠᐃΔᐃΔ: 74,
        ⲆⲆⵠⵠᐃ: 75,
        ⲆⲆᐃⵠΔ: 76,
        ⲆⲆΔⵠⵠ: 77,
        ⵠΔⵠⵠⲆ: 78,
        ΔᐃⲆᐃΔ: 79,
        ⲆΔΔⲆᐃ: 80,
        ΔᐃⵠⵠΔ: 81,
        ⵠᐃᐃᐃΔ: 82,
        ΔⲆⲆᐃⲆ: 83,
        ᐃⲆΔⲆⵠ: 84,
        ⲆΔⲆⲆᐃ: 85,
        ⵠᐃⲆΔΔ: 86,
        ⲆᐃᐃⲆⵠ: 87,
        ⲆⵠⲆⵠⲆ: 88,
        ᐃⲆⵠⲆⵠ: 89,
        ΔⲆⵠΔⵠ: 90,
        ⲆⵠᐃⲆⵠ: 91,
        ΔⵠᐃⲆΔ: 92,
        ΔⲆⲆⲆⵠ: 93,
        ⲆⵠⲆΔΔ: 94,
        ⵠΔⵠⵠΔ: 95,
        ᐃᐃᐃΔΔ: 96,
        Δⵠⵠᐃⵠ: 97,
        ᐃΔⲆⵠᐃ: 98,
        ⵠⲆᐃⵠΔ: 99,
        ΔⲆⵠΔᐃ: 100,
        ΔΔⲆΔⵠ: 101,
        ᐃⵠᐃⲆᐃ: 102,
        ᐃⲆⵠᐃᐃ: 103,
        ⲆⲆᐃᐃΔ: 104,
        ᐃᐃⵠᐃᐃ: 105,
        ⵠⲆΔⲆΔ: 106,
        ⲆᐃⲆᐃⲆ: 107,
        ⵠⲆⲆⲆ: 108,
        ⵠΔᐃΔ: 109,
        ⵠᐃΔⲆⵠ: 110,
        ⵠⵠΔᐃ: 111,
        ΔΔⲆⲆ: 112,
        ΔⵠᐃⵠⲆ: 113,
        ⲆΔᐃΔⲆ: 114,
        ⵠⲆΔⵠΔ: 115,
        ⵠⵠᐃⲆΔ: 116,
        ΔⲆⲆⵠⲆ: 117,
        ᐃᐃᐃⲆⵠ: 118,
        Ⲇⵠⵠⵠⵠ: 119,
        ⵠᐃⲆⲆᐃ: 120,
        ΔᐃⲆⵠ: 121,
        ΔᐃⵠⵠⲆ: 122,
        Δᐃⵠⵠⵠ: 123,
        ᐃⲆⲆᐃⲆ: 124,
        ᐃⲆⵠⵠΔ: 125,
        ⵠⲆᐃⵠⲆ: 126,
        ΔⵠΔⲆΔ: 127,
        ⲆⵠⲆᐃᐃ: 128,
        ΔⵠᐃⲆⵠ: 129,
        ΔⲆᐃⲆΔ: 130,
        ᐃⲆⵠⵠⲆ: 131,
        ⵠⵠᐃⲆⵠ: 132,
        ⲆⵠᐃⵠΔ: 133,
        ⵠΔⵠⵠⵠ: 134,
        ⵠⲆⵠΔΔ: 135,
        ΔᐃⵠᐃΔ: 136,
        ⲆⲆⵠⵠⲆ: 137,
        ᐃΔᐃⵠⵠ: 138,
        Δⵠⵠⵠⵠ: 139,
        ⲆⵠⲆⵠᐃ: 140,
        ⲆᐃΔⲆⵠ: 141,
        ᐃᐃⵠᐃⵠ: 142,
        ⵠⲆΔⵠᐃ: 143,
        ΔⵠⲆⲆⲆ: 144,
        ᐃΔⵠᐃⵠ: 145,
        ⲆⲆⵠⲆⵠ: 146,
        ⵠⲆᐃⲆⵠ: 147,
        ⵠᐃᐃᐃⲆ: 148,
        ⵠⵠⲆᐃⵠ: 149,
        ⵠⵠᐃⵠⲆ: 150,
        ⲆΔⵠᐃᐃ: 151,
        ᐃⵠⵠΔⵠ: 152,
        ⲆⲆΔΔᐃ: 153,
        ΔⲆⵠⲆΔ: 154,
        ᐃᐃⵠΔⲆ: 155,
        ⵠΔⲆΔΔ: 156,
        ⲆⲆⲆⲆⲆ: 157,
        ⵠⵠᐃᐃⵠ: 158,
        ⵠΔᐃΔΔ: 159,
        ⲆΔⲆΔⲆ: 160,
        ΔΔⵠΔᐃ: 161,
        ᐃⵠΔᐃⵠ: 162,
        ⵠⵠⲆⵠⲆ: 163,
        ᐃⲆⲆⲆΔ: 164,
        ⲆΔⲆⵠⲆ: 165,
        ⲆⲆᐃᐃⲆ: 166,
        ΔⲆΔΔⵠ: 167,
        ⲆⵠᐃᐃⲆ: 168,
        ΔⵠⵠᐃΔ: 169,
        ᐃΔᐃᐃᐃ: 170,
        ᐃΔⲆⵠⵠ: 171,
        ᐃᐃⵠⵠᐃ: 172,
        ⵠⵠⲆⲆⲆ: 173,
        ⵠⲆⲆⲆᐃ: 174,
        ΔᐃⵠΔⲆ: 175,
        ⲆΔⵠⲆᐃ: 176,
        ⲆΔⵠΔⲆ: 177,
        ⲆⵠⵠⵠΔ: 178,
        ᐃⵠⲆⲆⵠ: 179,
        ⲆⲆᐃΔΔ: 180,
        ⲆΔᐃⵠⲆ: 181,
        ⵠΔⵠᐃΔ: 182,
        ⵠΔⵠΔΔ: 183,
        ΔΔᐃⲆᐃ: 184,
        ⲆᐃᐃᐃⲆ: 185,
        ⵠΔΔⵠᐃ: 186,
        ⲆΔΔⲆⵠ: 187,
        ⵠⲆⲆⵠᐃ: 188,
        ⵠΔᐃⲆΔ: 189,
        Δᐃᐃⵠᐃ: 190,
        ΔⵠⵠΔⵠ: 191,
        ᐃⲆⵠΔⲆ: 192,
        ⵠⵠⲆΔΔ: 193,
        ⲆΔΔΔⵠ: 194,
        ᐃⵠⲆⲆᐃ: 195,
        ΔᐃΔᐃᐃ: 196,
        ⵠⵠΔᐃᐃ: 197,
        ΔⵠΔΔⲆ: 198,
        ⲆⲆⵠΔⲆ: 199,
        ⵠⵠⲆⵠᐃ: 200,
        ΔᐃΔᐃⵠ: 201,
        ΔⵠΔΔ: 202,
        ⲆⲆⵠᐃⲆ: 203,
        ᐃΔᐃΔᐃ: 204,
        ᐃⵠⲆΔΔ: 205,
        ⵠᐃΔⲆⲆ: 206,
        ΔΔⲆΔⲆ: 207,
        ⵠⲆᐃᐃᐃ: 208,
        ᐃⵠᐃΔΔ: 209,
        ᐃᐃΔΔΔ: 210,
        ᐃΔⲆΔᐃ: 211,
        ⵠⵠΔᐃⲆ: 212,
        ⲆⵠⲆᐃⵠ: 213,
        ΔΔⵠⲆᐃ: 214,
        ΔⲆΔΔⲆ: 215,
        ᐃⵠᐃᐃᐃ: 216,
        ΔᐃΔⲆᐃ: 217,
        ⵠⲆᐃⲆⲆ: 218,
        Ⲇⵠᐃᐃⵠ: 219,
        ᐃΔᐃⲆⲆ: 220,
        ΔⲆⵠΔⲆ: 221,
        ⵠᐃⲆᐃⵠ: 222,
        ⲆᐃⵠᐃΔ: 223,
        ⲆⵠⵠᐃⲆ: 224,
        ⲆⵠⲆⵠΔ: 225,
        ᐃΔⵠΔⵠ: 226,
        ΔⲆⲆΔᐃ: 227,
        ΔΔⲆⵠⵠ: 228,
        ⵠΔⵠΔⵠ: 229,
        ⲆⵠᐃⲆᐃ: 230,
        ⵠΔᐃⵠΔ: 231,
        ᐃⲆⵠⵠᐃ: 232,
        ΔⲆⲆΔⲆ: 233,
        ΔᐃⲆᐃᐃ: 234,
        ⲆΔⲆᐃⵠᐃⵠ: 235,
        ⵠᐃΔⵠⵠΔᐃ: 236,
        Δᐃⵠᐃⵠ: 237,
        ᐃⲆΔⵠⲆ: 238,
        Δⵠᐃⵠᐃ: 239,
        ⵠⵠΔΔⲆ: 240
    };
    const tr = pn;
    var ur = {
        ΔΔⲆᐃⵠ: 3,
        ⲆⲆΔᐃⵠ: 0,
        ⵠⲆⲆᐃΔ: 1,
        ⵠⵠⵠᐃⵠ: 2,
        ᐃⲆⵠΔΔ: 5,
        ⲆΔᐃⵠⵠ: 4
    };
    var vr = [];
    const wr = 1;
    const jr = 255;
    const xr = 11;
    const yr = 19;
    const zr = jj;
    const Ar = Lo;
    const Br = 7;
    const Cr = tr;
    vr[109] = {
        name: "Wood",
        ᐃⵠ: 316,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[108] = {
        name: "Stone",
        ᐃⵠ: 315,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const qr = 8;
    const Dr = 10;
    vr[111] = {
        name: "Gold",
        ᐃⵠ: 297,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[112] = {
        name: "Diamond",
        ᐃⵠ: 298,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[121] = {
        name: "Amethyst",
        ᐃⵠ: 418,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const Er = 12;
    const Fr = 1;
    const Gr = 6;
    const Hr = 0;
    vr[2] = {
        name: "Rabbit fur",
        ᐃⵠ: 368,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const Ir = 20;
    vr[174] = {
        name: "Wolf fur",
        ᐃⵠ: 393,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[237] = {
        name: "Boar fur",
        ᐃⵠ: 1162,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const Jr = 15;
    vr[100] = {
        name: "Firefly",
        ᐃⵠ: 1164,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const Kr = 4;
    const Lr = 100;
    const Mr = 12;
    const Nr = 5;
    const Or = 14;
    vr[101] = {
        name: "Wood arrow",
        ᐃⵠ: 1166,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[102] = {
        name: "Stone arrow",
        ᐃⵠ: 1169,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Pr = 16;
    const Qr = rj;
    vr[103] = {
        name: "Gold arrow",
        ᐃⵠ: 1172,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Rr = 0;
    const Sr = 3;
    const Ur = 5;
    vr[104] = {
        name: "Diamond arrow",
        ᐃⵠ: 1175,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Vr = 6;
    const Wr = 4;
    vr[105] = {
        name: "Amethyst arrow",
        ᐃⵠ: 1178,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[106] = {
        name: "Reidite arrow",
        ᐃⵠ: 1181,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[107] = {
        name: "Dragon arrow",
        ᐃⵠ: 1184,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const Xr = 13;
    const Yr = 4;
    const Zr = 5;
    const $r = 100;
    vr[146] = {
        name: "Winter fur",
        ᐃⵠ: 505,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[240] = {
        name: "Fur mammoth",
        ᐃⵠ: 1233,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[161] = {
        name: "Web",
        ᐃⵠ: 305,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const _r = 9;
    const as = 18;
    vr[116] = {
        name: "Meat",
        ᐃⵠ: 300,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const bs = 19;
    vr[137] = {
        name: "Fish",
        ᐃⵠ: 662,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[129] = {
        name: "Kraken skin",
        ᐃⵠ: 624,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[139] = {
        name: "Piranha scales",
        ᐃⵠ: 674,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[142] = {
        name: "Ice",
        ᐃⵠ: 142,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[126] = {
        name: "Sand",
        ᐃⵠ: 609,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[140] = {
        name: "Dirt",
        ᐃⵠ: 140,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const cs = 17;
    vr[110] = {
        name: "Berrie",
        ᐃⵠ: 277,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const ds = 1;
    vr[131] = {
        name: "Flour",
        ᐃⵠ: 629,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const es = 8;
    vr[134] = {
        name: "Flour",
        ᐃⵠ: 639,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[178] = {
        name: "Special fur peasant",
        ᐃⵠ: 178,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const fs = 12;
    const gs = 19;
    vr[179] = {
        name: "Special fur hood",
        ᐃⵠ: 179,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const hs = 19;
    const is = 2;
    vr[189] = {
        name: "Pumpkin",
        ᐃⵠ: 814,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const ks = 12;
    vr[192] = {
        name: "Garlic",
        ᐃⵠ: 840,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const ls = 16;
    vr[194] = {
        name: "Thornbush",
        ᐃⵠ: 850,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[205] = {
        name: "Carrot",
        ᐃⵠ: 955,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const ms = 14;
    const ns = jj;
    vr[207] = {
        name: "Tomato",
        ᐃⵠ: 965,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[209] = {
        name: "Watermelon",
        ᐃⵠ: 972,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[211] = {
        name: "Aloe Vera",
        ᐃⵠ: 987,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[222] = {
        name: "Penguin Feather",
        ᐃⵠ: 1035,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[231] = {
        name: "Hawk Feather",
        ᐃⵠ: 1037,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[232] = {
        name: "Vulture Feather",
        ᐃⵠ: 1039,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const os = 17;
    vr[233] = {
        name: "Cactus",
        ᐃⵠ: 1154,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const ps = 255;
    vr[236] = {
        name: "Cactus",
        ᐃⵠ: 1160,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[235] = {
        name: "Pitchfork Part",
        ᐃⵠ: 1158,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[238] = {
        name: "Emerald Machine",
        ᐃⵠ: 1187,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const rs = 20;
    const ss = 7;
    vr[234] = {
        name: "Emerald",
        ᐃⵠ: 1156,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const ts = 8;
    const us = R;
    const vs = 9;
    const ws = 14;
    vr[41] = {
        name: "Christmas Hat",
        ᐃⵠ: 880,
        ΔΔⲆΔ: 0
    };
    vr[42] = {
        name: "Elf Hat",
        ᐃⵠ: 882,
        ΔΔⲆΔ: 0
    };
    const xs = 15;
    const js = ij;
    const ys = 11;
    vr[201] = {
        name: "Garland",
        ᐃⵠ: 870,
        ΔΔⲆΔ: 0,
        ΔᐃᐃⲆ: 0
    };
    vr[200] = {
        name: "Candy",
        ᐃⵠ: 200,
        ΔΔⲆΔ: 0
    };
    vr[199] = {
        name: "Sugar Cane",
        ᐃⵠ: 865,
        ΔΔⲆΔ: 0
    };
    const zs = 17;
    vr[9] = {
        name: "Pirate Sword",
        ᐃⵠ: 860,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const As = Zk;
    vr[196] = {
        name: "Crab Stick",
        ᐃⵠ: 196,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const Bs = 10;
    const Cs = 18;
    vr[202] = {
        name: "Reidite",
        ᐃⵠ: 938,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[203] = {
        name: "Flame",
        ᐃⵠ: 936,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const Ds = dn;
    vr[113] = {
        name: "Campfire",
        ᐃⵠ: 302,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const qs = 6;
    vr[198] = {
        name: "Bed",
        ᐃⵠ: 909,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[114] = {
        name: "Workbench",
        ᐃⵠ: 262,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Es = 255;
    const Fs = 13;
    vr[0] = {
        name: "Stone sword",
        ᐃⵠ: 254,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[1] = {
        name: "Stone pick",
        ᐃⵠ: 256,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Gs = 0;
    vr[115] = {
        name: "Berries bush",
        ᐃⵠ: 284,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[3] = {
        name: "Gold pick",
        ᐃⵠ: 295,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Hs = 6;
    const Is = 8;
    vr[4] = {
        name: "Diamond pick",
        ᐃⵠ: 257,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[57] = {
        name: "Wood sword",
        ᐃⵠ: 830,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[5] = {
        name: "Gold sword",
        ᐃⵠ: 290,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[6] = {
        name: "Diamond sword",
        ᐃⵠ: 291,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Js = Ga;
    vr[8] = {
        name: "Wood pick",
        ᐃⵠ: 314,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Ks = 19;
    vr[162] = {
        name: "Wood wall",
        ᐃⵠ: 318,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[160] = {
        name: "Wood spike",
        ᐃⵠ: 320,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[117] = {
        name: "Cooked meat",
        ᐃⵠ: 325,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[118] = {
        name: "Big campfire",
        ᐃⵠ: 327,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[195] = {
        name: "Bandage",
        ᐃⵠ: 304,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const eh = 100;
    const ih = 5;
    const th = 3;
    const nh = 14;
    vr[163] = {
        name: "Stone wall",
        ᐃⵠ: 263,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[164] = {
        name: "Gold wall",
        ᐃⵠ: 265,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[165] = {
        name: "Diamond wall",
        ᐃⵠ: 332,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[166] = {
        name: "Wood door",
        ᐃⵠ: 268,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[167] = {
        name: "Chest",
        ᐃⵠ: 338,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[168] = {
        name: "Stone spike",
        ᐃⵠ: 360,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[169] = {
        name: "Gold spike",
        ᐃⵠ: 363,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[170] = {
        name: "Diamond spike",
        ᐃⵠ: 365,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const oh = 4;
    vr[171] = {
        name: "Stone door",
        ᐃⵠ: 371,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const ah = 14;
    const rh = 12;
    vr[172] = {
        name: "Gold door",
        ᐃⵠ: 374,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[173] = {
        name: "Diamond door",
        ᐃⵠ: 377,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[10] = {
        name: "Chapka",
        ᐃⵠ: 370,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[11] = {
        name: "Big Chapka",
        ᐃⵠ: 380,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const sh = 16;
    vr[12] = {
        name: "Wood spear",
        ᐃⵠ: 402,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[13] = {
        name: "Stone spear",
        ᐃⵠ: 396,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const hh = 1;
    const lh = 15;
    vr[14] = {
        name: "Gold spear",
        ᐃⵠ: 399,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[15] = {
        name: "Diamond spear",
        ᐃⵠ: 405,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[16] = {
        name: "Dragon spear",
        ᐃⵠ: 876,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[17] = {
        name: "Dragon spear",
        ᐃⵠ: 879,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[18] = {
        name: "Crab spear",
        ᐃⵠ: 900,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const gh = 20;
    vr[197] = {
        name: "Crab loot",
        ᐃⵠ: 197,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const uh = 256;
    const bh = 7;
    vr[119] = {
        name: "Furnace",
        ᐃⵠ: 409,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const dh = jk;
    vr[23] = {
        name: "Explorer hat",
        ᐃⵠ: 421,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const vh = 10;
    vr[24] = {
        name: "Pirate hat",
        ᐃⵠ: 424,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const mh = 100;
    const ch = 255;
    vr[87] = {
        name: "Flower hat",
        ᐃⵠ: 1228,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const ph = 2;
    const Ch = 6;
    vr[88] = {
        name: "Fur hat",
        ᐃⵠ: 1231,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[58] = {
        name: "Wood helmet",
        ᐃⵠ: 827,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[25] = {
        name: "Stone helmet",
        ᐃⵠ: 430,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[26] = {
        name: "Gold helmet",
        ᐃⵠ: 433,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Th = 100;
    const fh = 9;
    const zh = 0;
    const yh = 17;
    vr[27] = {
        name: "Diamond helmet",
        ᐃⵠ: 436,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[28] = {
        name: "Book",
        ᐃⵠ: 439,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const wh = 8;
    vr[120] = {
        name: "Paper",
        ᐃⵠ: 442,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const Ph = 11;
    const Ah = rj;
    const kh = 18;
    vr[29] = {
        name: "Bag",
        ᐃⵠ: 367,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[30] = {
        name: "Amethyst sword",
        ᐃⵠ: 456,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[31] = {
        name: "Amethyst pick",
        ᐃⵠ: 460,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[33] = {
        name: "Amethyst spear",
        ᐃⵠ: 473,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const xh = f;
    vr[35] = {
        name: "Stone hammer",
        ᐃⵠ: 478,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[36] = {
        name: "Gold hammer",
        ᐃⵠ: 481,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[37] = {
        name: "Diamond hammer",
        ᐃⵠ: 484,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[38] = {
        name: "Amethyst hammer",
        ᐃⵠ: 487,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[39] = {
        name: "Reidite hammer",
        ᐃⵠ: 490,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[122] = {
        name: "Amethyst wall",
        ᐃⵠ: 493,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Jh = 15;
    const Mh = 255;
    vr[123] = {
        name: "Amethyst spike",
        ᐃⵠ: 496,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[124] = {
        name: "Amethyst door",
        ᐃⵠ: 498,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Bh = 16;
    const Dh = 13;
    vr[40] = {
        name: "Cap & scarf",
        ᐃⵠ: 503,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[147] = {
        name: "Blue cord",
        ᐃⵠ: 515,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[148] = {
        name: "Lock",
        ᐃⵠ: 519,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Eh = 11;
    vr[151] = {
        name: "Resurrection",
        ᐃⵠ: 530,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[158] = {
        name: "Lockpick",
        ᐃⵠ: 533,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[159] = {
        name: "Totem",
        ᐃⵠ: 555,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Ih = 4;
    const Sh = Gj;
    vr[43] = {
        name: "Amethyst helmet",
        ᐃⵠ: 542,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[45] = {
        name: "Super hammer",
        ᐃⵠ: 551,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[125] = {
        name: "Bridge",
        ᐃⵠ: 604,
        ΔᐃᐃⲆ: 1,
        ΔΔⲆΔ: 1
    };
    const Qh = Da;
    vr[221] = {
        name: "Wood Tower",
        ᐃⵠ: 1235,
        ΔᐃᐃⲆ: 1,
        ΔΔⲆΔ: 1
    };
    const _h = 17;
    const Fh = 100;
    const Rh = 15;
    vr[127] = {
        name: "Bottle full",
        ᐃⵠ: 715,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const jh = 12;
    vr[128] = {
        name: "Bottle empty",
        ᐃⵠ: 611,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const Gh = 256;
    vr[46] = {
        name: "Stone shovel",
        ᐃⵠ: 618,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[130] = {
        name: "Watering can",
        ᐃⵠ: 627,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[132] = {
        name: "Wheat",
        ᐃⵠ: 632,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[133] = {
        name: "Cookie",
        ᐃⵠ: 635,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[135] = {
        name: "Windmill",
        ᐃⵠ: 643,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[47] = {
        name: "Super diving suit",
        ᐃⵠ: 647,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Wh = 14;
    const Lh = 5;
    vr[48] = {
        name: "Diving mask",
        ᐃⵠ: 650,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[49] = {
        name: "Watering can full",
        ᐃⵠ: 654,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const Oh = 2;
    vr[136] = {
        name: "Cake",
        ᐃⵠ: 660,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[138] = {
        name: "Foodfish cooked",
        ᐃⵠ: 666,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[141] = {
        name: "Plot",
        ᐃⵠ: 684,
        ΔᐃᐃⲆ: 1,
        ΔΔⲆΔ: 1
    };
    const Nh = 3;
    const Hh = 0;
    vr[143] = {
        name: "Bread",
        ᐃⵠ: 690,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const qh = 20;
    vr[sr.ⲆΔⵠⵠⲆΔⲆ] = {
        name: "Bottle full (with ice)",
        ᐃⵠ: nr.ᐃⲆⲆᐃⲆᐃⲆΔᐃ,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Uh = 12;
    vr[sr.ΔⵠΔⲆΔᐃⲆ] = {
        name: "Bottle full (with well)",
        ᐃⵠ: nr.ᐃᐃⵠᐃⲆΔᐃⵠⵠ,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Yh = 1;
    vr[50] = {
        name: "Gold shovel",
        ᐃⵠ: 700,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Kh = 1;
    const Vh = 8;
    const Xh = 13;
    vr[51] = {
        name: "Diamond shovel",
        ᐃⵠ: 704,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Zh = 9;
    vr[52] = {
        name: "Amethyst shovel",
        ᐃⵠ: 706,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const $h = 19;
    const el = 10;
    const il = 12;
    const tl = 6;
    vr[55] = {
        name: "Spanner",
        ᐃⵠ: 711,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[56] = {
        name: "Machete",
        ᐃⵠ: 714,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const nl = 7;
    vr[144] = {
        name: "Bread oven",
        ᐃⵠ: 718,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const ol = 3;
    vr[145] = {
        name: "Sandwich",
        ᐃⵠ: 730,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[59] = {
        name: "Dragon helmet",
        ᐃⵠ: 734,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[60] = {
        name: "Dragon helmet",
        ᐃⵠ: 737,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[90] = {
        name: "Witch",
        ᐃⵠ: 740,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[91] = {
        name: "Nimbus",
        ᐃⵠ: 743,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[92] = {
        name: "Wand1",
        ᐃⵠ: 746,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[93] = {
        name: "Wand2",
        ᐃⵠ: 749,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[62] = {
        name: "Dragon sword",
        ᐃⵠ: 564,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const al = Lo;
    const rl = 15;
    const sl = ns;
    const hl = 8;
    vr[63] = {
        name: "Dragon sword",
        ᐃⵠ: 567,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const ll = 7;
    vr[71] = {
        name: "Wood shield",
        ᐃⵠ: 1238,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[72] = {
        name: "Stone shield",
        ᐃⵠ: 1241,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[73] = {
        name: "Gold shield",
        ᐃⵠ: 1244,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const gl = 18;
    vr[74] = {
        name: "Diamond shield",
        ᐃⵠ: 1247,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[75] = {
        name: "Amethyst shield",
        ᐃⵠ: 1250,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const ul = 20;
    vr[76] = {
        name: "Reidite shield",
        ᐃⵠ: 1253,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const bl = 5;
    vr[94] = {
        name: "Wood axe",
        ᐃⵠ: 1256,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[95] = {
        name: "Stone axe",
        ᐃⵠ: 1259,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[96] = {
        name: "Gold axe",
        ᐃⵠ: 1262,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const dl = 3;
    const vl = 16;
    const ml = 10;
    vr[97] = {
        name: "Diamond axe",
        ᐃⵠ: 1265,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const cl = 15;
    vr[98] = {
        name: "Amethyst axe",
        ᐃⵠ: 1268,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const pl = gn;
    vr[99] = {
        name: "Reidite axe",
        ᐃⵠ: 1271,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Cl = 255;
    vr[64] = {
        name: "Wood bow",
        ᐃⵠ: 570,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[65] = {
        name: "Stone bow",
        ᐃⵠ: 573,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Tl = 14;
    const fl = 1;
    vr[66] = {
        name: "Gold bow",
        ᐃⵠ: 576,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const zl = 7;
    vr[67] = {
        name: "Diamond bow",
        ᐃⵠ: 579,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[68] = {
        name: "Amethyst bow",
        ᐃⵠ: 582,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[69] = {
        name: "Reidite bow",
        ᐃⵠ: 585,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const yl = 100;
    const wl = 11;
    const Pl = 4;
    vr[70] = {
        name: "Dragon bow",
        ᐃⵠ: 588,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[77] = {
        name: "Crown of life",
        ᐃⵠ: 758,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[175] = {
        name: "Gem of life",
        ᐃⵠ: 176,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[185] = {
        name: "Orb of the dragon",
        ᐃⵠ: 252,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const Al = 17;
    vr[187] = {
        name: "Orb of the dragon",
        ᐃⵠ: 253,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[184] = {
        name: "Cube of the dragon",
        ᐃⵠ: 751,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const kl = 1;
    vr[186] = {
        name: "Cube of the dragon",
        ᐃⵠ: 753,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[78] = {
        name: "Crown of luck",
        ᐃⵠ: 762,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[176] = {
        name: "Gem of luck",
        ᐃⵠ: 177,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[79] = {
        name: "Crown of the angel",
        ᐃⵠ: 770,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const xl = 9;
    const Jl = Da;
    const Ml = 12;
    vr[177] = {
        name: "Gem of the angel",
        ᐃⵠ: 175,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[149] = {
        name: "Dragon heart",
        ᐃⵠ: 521,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[150] = {
        name: "Lava heart",
        ᐃⵠ: 523,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[83] = {
        name: "Hood",
        ᐃⵠ: 768,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[84] = {
        name: "Peasant",
        ᐃⵠ: 772,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Bl = 256;
    vr[86] = {
        name: "Winter peasant",
        ᐃⵠ: 777,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const Dl = 13;
    vr[85] = {
        name: "Winter hood",
        ᐃⵠ: 780,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[180] = {
        name: "Bucket full",
        ᐃⵠ: 784,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[181] = {
        name: "Bucket empty",
        ᐃⵠ: 785,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const El = 2;
    const Il = 8;
    vr[182] = {
        name: "Well",
        ᐃⵠ: 791,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Sl = 14;
    const Ql = 19;
    vr[183] = {
        name: "Sign",
        ᐃⵠ: 799,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[188] = {
        name: "Pumpkin Seed",
        ᐃⵠ: 809,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[191] = {
        name: "Garlic Seed",
        ᐃⵠ: 835,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[193] = {
        name: "Thorbushes Seed",
        ᐃⵠ: 846,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const _l = 100;
    vr[190] = {
        name: "Roof",
        ᐃⵠ: 843,
        ΔᐃᐃⲆ: 1,
        ΔΔⲆΔ: 1
    };
    const Fl = Ar;
    vr[61] = {
        name: "Crab Crown",
        ᐃⵠ: 912,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Rl = 255;
    vr[204] = {
        name: "Carrot Seed",
        ᐃⵠ: 950,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[206] = {
        name: "Tomato Seed",
        ᐃⵠ: 960,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[208] = {
        name: "Watermelon Seed",
        ᐃⵠ: 967,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[210] = {
        name: "Aloe Vera Seed",
        ᐃⵠ: 982,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const jl = 9;
    const Gl = 17;
    const Wl = 0;
    vr[80] = {
        name: "Cap",
        ᐃⵠ: 1138,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Ll = 0;
    const Ol = 18;
    vr[81] = {
        name: "Turban",
        ᐃⵠ: 1141,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[82] = {
        name: "Pilot Helmet",
        ᐃⵠ: 427,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[152] = {
        name: "Emerald Machine",
        ᐃⵠ: 1196,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[153] = {
        name: "Emerald Machine",
        ᐃⵠ: 1200,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Nl = 7;
    const Hl = 6;
    const ql = gn;
    vr[154] = {
        name: "Emerald Machine",
        ᐃⵠ: 1204,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[155] = {
        name: "Emerald Machine",
        ᐃⵠ: 1208,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[156] = {
        name: "Emerald Machine",
        ᐃⵠ: 1212,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[157] = {
        name: "Emerald Machine",
        ᐃⵠ: 1216,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Ul = 16;
    vr[53] = {
        name: "Pitchfork",
        ᐃⵠ: 977,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Yl = 7;
    vr[212] = {
        name: "Wood Door Spike",
        ᐃⵠ: 990,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Kl = 15;
    vr[213] = {
        name: "Stone Door Spike",
        ᐃⵠ: 993,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[214] = {
        name: "Gold Door Spike",
        ᐃⵠ: 996,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Vl = 17;
    const Xl = 4;
    vr[215] = {
        name: "Diamond Door Spike",
        ᐃⵠ: 999,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const Zl = 20;
    vr[216] = {
        name: "Amethyst Door Spike",
        ᐃⵠ: 1002,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[20] = {
        name: "Diamond Fire Protection ",
        ᐃⵠ: 922,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const $l = 11;
    const eg = 10;
    vr[21] = {
        name: "Amethyst Fire Protection ",
        ᐃⵠ: 926,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[22] = {
        name: "Amethyst Fire Protection ",
        ᐃⵠ: 930,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const ig = 14;
    const tg = 3;
    const ng = 5;
    vr[19] = {
        name: "Reidite Sword",
        ᐃⵠ: 933,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const og = 9;
    vr[34] = {
        name: "Reidite Spear",
        ᐃⵠ: 944,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[44] = {
        name: "Reidite Helmet",
        ᐃⵠ: 947,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[220] = {
        name: "Reidite Door Spike",
        ᐃⵠ: 1005,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[218] = {
        name: "Reidite Door",
        ᐃⵠ: 1008,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const ag = 19;
    const rg = 256;
    vr[219] = {
        name: "Reidite Spike",
        ᐃⵠ: 1011,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[217] = {
        name: "Reidite Wall",
        ᐃⵠ: 1014,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[32] = {
        name: "Reidite pick",
        ᐃⵠ: 1019,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const sg = 12;
    vr[223] = {
        name: "Boat",
        ᐃⵠ: 1027,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    vr[224] = {
        name: "Sled",
        ᐃⵠ: 1030,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const hg = 255;
    const lg = 8;
    vr[89] = {
        name: "Saddle",
        ᐃⵠ: 1048,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 1
    };
    const gg = 13;
    vr[225] = {
        name: "Mount Boar",
        ᐃⵠ: 1051,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[226] = {
        name: "Mount King Crab",
        ᐃⵠ: 1191,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const ug = gn;
    const bg = Vi;
    const dg = ns;
    const vg = 1;
    const mg = gn;
    vr[227] = {
        name: "Mount Baby Dragon",
        ᐃⵠ: 1082,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const cg = 11;
    vr[228] = {
        name: "Mount Baby Lava",
        ᐃⵠ: 1097,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    const pg = 2;
    vr[229] = {
        name: "Mount Hawk",
        ᐃⵠ: 1112,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[230] = {
        name: "Plane",
        ᐃⵠ: 1116,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[54] = {
        name: "Pitchfork 2",
        ᐃⵠ: 980,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    vr[239] = {
        name: "Baby Mammoth",
        ᐃⵠ: 1226,
        ΔᐃᐃⲆ: 0,
        ΔΔⲆΔ: 0
    };
    var Cg = undefined;
    var Ls = [{
        r: [[109, 25], [108, 5]],
        w: 0,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 0,
        ⲆΔᐃᐃ: 113,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[113, 1], [109, 35], [108, 10]],
        w: 0,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 1,
        ⲆΔᐃᐃ: 118,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[109, 150], [108, 50], [111, 15]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 2,
        ⲆΔᐃᐃ: 119,
        time: 1 / 20,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[109, 20], [108, 10]],
        w: 0,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 3,
        ⲆΔᐃᐃ: 114,
        time: 1 / 6,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[109, 10]],
        w: 0,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 4,
        ⲆΔᐃᐃ: 8,
        time: 0.3333333333333333,
        ⲆⲆᐃ: ur.ⲆⲆΔᐃⵠ
    }, {
        r: [[8, 1], [109, 50], [108, 15]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 5,
        ⲆΔᐃᐃ: 1,
        time: 0.125,
        ⲆⲆᐃ: ur.ⲆⲆΔᐃⵠ
    }, {
        r: [[109, 40], [111, 20], [108, 30], [1, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 6,
        ⲆΔᐃᐃ: 3,
        time: 1 / 12,
        ⲆⲆᐃ: ur.ⲆⲆΔᐃⵠ
    }, {
        r: [[112, 20], [111, 50], [108, 80], [3, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 7,
        ⲆΔᐃᐃ: 4,
        time: 1 / 20,
        ⲆⲆᐃ: ur.ⲆⲆΔᐃⵠ
    }, {
        r: [[112, 40], [111, 60], [121, 30], [4, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 8,
        ⲆΔᐃᐃ: 31,
        time: 1 / 60,
        ⲆⲆᐃ: ur.ⲆⲆΔᐃⵠ
    }, {
        r: [[121, 30], [112, 40], [202, 30], [31, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 9,
        ⲆΔᐃᐃ: 32,
        time: 1 / 90,
        ⲆⲆᐃ: ur.ⲆⲆΔᐃⵠ
    }, {
        r: [[109, 90], [108, 50]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 10,
        ⲆΔᐃᐃ: 35,
        time: 1 / 10,
        ⲆⲆᐃ: ur.ⲆⲆΔᐃⵠ
    }, {
        r: [[109, 160], [108, 120], [111, 80], [35, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 11,
        ⲆΔᐃᐃ: 36,
        time: 1 / 15,
        ⲆⲆᐃ: ur.ⲆⲆΔᐃⵠ
    }, {
        r: [[112, 80], [108, 200], [111, 150], [36, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 12,
        ⲆΔᐃᐃ: 37,
        time: 0.05,
        ⲆⲆᐃ: ur.ⲆⲆΔᐃⵠ
    }, {
        r: [[112, 160], [121, 60], [111, 250], [37, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 13,
        ⲆΔᐃᐃ: 38,
        time: 1 / 60,
        ⲆⲆᐃ: ur.ⲆⲆΔᐃⵠ
    }, {
        r: [[121, 160], [202, 60], [112, 250], [38, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 14,
        ⲆΔᐃᐃ: 39,
        time: 0.011111111111111112,
        ⲆⲆᐃ: ur.ⲆⲆΔᐃⵠ
    }, {
        r: [[39, 1], [127, 1], [129, 1], [139, 10], [121, 20]],
        w: 1,
        f: 1,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 15,
        ⲆΔᐃᐃ: 45,
        time: 1 / 120,
        ⲆⲆᐃ: ur.ⲆⲆΔᐃⵠ
    }, {
        r: [[109, 30], [108, 15]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 16,
        ⲆΔᐃᐃ: 46,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ⲆⲆΔᐃⵠ
    }, {
        r: [[46, 1], [111, 20], [108, 30], [109, 40]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 17,
        ⲆΔᐃᐃ: 50,
        time: 1 / 10,
        ⲆⲆᐃ: ur.ⲆⲆΔᐃⵠ
    }, {
        r: [[50, 1], [112, 20], [111, 50], [108, 80]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 18,
        ⲆΔᐃᐃ: 51,
        time: 1 / 20,
        ⲆⲆᐃ: ur.ⲆⲆΔᐃⵠ
    }, {
        r: [[51, 1], [111, 60], [121, 30], [112, 40]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 19,
        ⲆΔᐃᐃ: 52,
        time: 1 / 40,
        ⲆⲆᐃ: ur.ⲆⲆΔᐃⵠ
    }, {
        r: [[109, 50]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 20,
        ⲆΔᐃᐃ: 130,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ⲆⲆΔᐃⵠ
    }, {
        r: [[130, 1]],
        w: 0,
        f: 0,
        ⵠⲆᐃ: 1,
        e: 0,
        id: 21,
        ⲆΔᐃᐃ: 49,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ⲆⲆΔᐃⵠ
    }, {
        r: [[109, 100], [108, 50]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 22,
        ⲆΔᐃᐃ: 53,
        time: 1 / 10,
        ⲆⲆᐃ: ur.ⲆⲆΔᐃⵠ
    }, {
        r: [[53, 1], [235, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 23,
        ⲆΔᐃᐃ: 54,
        time: 1 / 60,
        ⲆⲆᐃ: ur.ⲆⲆΔᐃⵠ
    }, {
        r: [[120, 4], [161, 4], [174, 4]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 24,
        ⲆΔᐃᐃ: 28,
        time: 1 / 15,
        ⲆⲆᐃ: ur.ⲆⲆΔᐃⵠ
    }, {
        r: [[109, 40]],
        w: 0,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 25,
        ⲆΔᐃᐃ: 12,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[12, 1], [109, 60], [108, 10]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 26,
        ⲆΔᐃᐃ: 13,
        time: 0.1,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[109, 80], [111, 30], [108, 30], [13, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 27,
        ⲆΔᐃᐃ: 14,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ,
        time: 1 / 20
    }, {
        r: [[109, 200], [112, 40], [111, 60], [14, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 28,
        ⲆΔᐃᐃ: 15,
        time: 1 / 30,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[121, 40], [112, 80], [111, 90], [15, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 29,
        ⲆΔᐃᐃ: 33,
        time: 1 / 60,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[202, 40], [121, 80], [112, 90], [33, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 30,
        ⲆΔᐃᐃ: 34,
        time: 0.011111111111111112,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[147, 20], [185, 1], [121, 100], [149, 3]],
        w: 1,
        f: 1,
        ⵠⲆᐃ: 1,
        e: 0,
        id: 31,
        ⲆΔᐃᐃ: 16,
        time: 1 / 120,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[16, 1], [187, 1], [202, 100], [150, 2]],
        w: 1,
        f: 1,
        ⵠⲆᐃ: 1,
        e: 0,
        id: 32,
        ⲆΔᐃᐃ: 17,
        time: 1 / 200,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[12, 1], [197, 5], [161, 6]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 33,
        ⲆΔᐃᐃ: 18,
        time: 1 / 30,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[109, 30]],
        w: 0,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 34,
        ⲆΔᐃᐃ: 57,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[109, 50], [108, 25], [57, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 35,
        ⲆΔᐃᐃ: 0,
        time: 1 / 10,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[109, 60], [111, 40], [108, 50], [0, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 36,
        ⲆΔᐃᐃ: 5,
        time: 1 / 20,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[112, 40], [111, 60], [108, 80], [5, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 37,
        ⲆΔᐃᐃ: 6,
        time: 0.03333333333333333,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[112, 60], [111, 100], [121, 40], [6, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 38,
        ⲆΔᐃᐃ: 30,
        time: 1 / 60,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[112, 100], [121, 80], [202, 40], [30, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 39,
        ⲆΔᐃᐃ: 19,
        time: 1 / 90,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[110, 3]],
        w: 0,
        f: 1,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 40,
        ⲆΔᐃᐃ: 115,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ΔΔⲆᐃⵠ
    }, {
        r: [[134, 3]],
        w: 0,
        f: 1,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 41,
        ⲆΔᐃᐃ: 132,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ΔΔⲆᐃⵠ
    }, {
        r: [[189, 8]],
        w: 0,
        f: 1,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 42,
        ⲆΔᐃᐃ: 188,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ΔΔⲆᐃⵠ
    }, {
        r: [[192, 8]],
        w: 0,
        f: 1,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 43,
        ⲆΔᐃᐃ: 191,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ΔΔⲆᐃⵠ
    }, {
        r: [[194, 8]],
        w: 0,
        f: 1,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 44,
        ⲆΔᐃᐃ: 193,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ΔΔⲆᐃⵠ
    }, {
        r: [[205, 8]],
        w: 0,
        f: 1,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 45,
        ⲆΔᐃᐃ: 204,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ΔΔⲆᐃⵠ
    }, {
        r: [[207, 8]],
        w: 0,
        f: 1,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 46,
        ⲆΔᐃᐃ: 206,
        time: 0.2,
        ⲆⲆᐃ: ur.ΔΔⲆᐃⵠ
    }, {
        r: [[209, 16]],
        w: 0,
        f: 1,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 47,
        ⲆΔᐃᐃ: 208,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ΔΔⲆᐃⵠ
    }, {
        r: [[211, 16]],
        w: 0,
        f: 1,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 48,
        ⲆΔᐃᐃ: 210,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ΔΔⲆᐃⵠ
    }, {
        r: [[116, 1]],
        w: 0,
        f: 1,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 49,
        ⲆΔᐃᐃ: 117,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ΔΔⲆᐃⵠ
    }, {
        r: [[137, 1]],
        w: 0,
        f: 1,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 50,
        ⲆΔᐃᐃ: 138,
        time: 0.3333333333333333,
        ⲆⲆᐃ: ur.ΔΔⲆᐃⵠ
    }, {
        r: [[131, 3]],
        w: 0,
        f: 1,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 51,
        ⲆΔᐃᐃ: 143,
        time: 0.3333333333333333,
        ⲆⲆᐃ: ur.ΔΔⲆᐃⵠ
    }, {
        r: [[131, 3], [110, 1]],
        w: 0,
        f: 1,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 52,
        ⲆΔᐃᐃ: 133,
        time: 1 / 3,
        ⲆⲆᐃ: ur.ΔΔⲆᐃⵠ
    }, {
        r: [[131, 5], [110, 2], [142, 2]],
        w: 0,
        f: 1,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 53,
        ⲆΔᐃᐃ: 136,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ΔΔⲆᐃⵠ
    }, {
        r: [[161, 2]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 54,
        ⲆΔᐃᐃ: 195,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[109, 20]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 55,
        ⲆΔᐃᐃ: 162,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ᐃⲆⵠΔΔ
    }, {
        r: [[162, 1], [108, 17]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 56,
        ⲆΔᐃᐃ: 163,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ᐃⲆⵠΔΔ
    }, {
        r: [[163, 1], [111, 14]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 57,
        ⲆΔᐃᐃ: 164,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ᐃⲆⵠΔΔ
    }, {
        r: [[164, 1], [112, 11]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 58,
        ⲆΔᐃᐃ: 165,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ᐃⲆⵠΔΔ
    }, {
        r: [[165, 1], [121, 8]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 59,
        ⲆΔᐃᐃ: 122,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ᐃⲆⵠΔΔ
    }, {
        r: [[122, 1], [202, 5]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 60,
        ⲆΔᐃᐃ: 217,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ᐃⲆⵠΔΔ
    }, {
        r: [[109, 30]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 61,
        ⲆΔᐃᐃ: 166,
        time: 1 / 8,
        ⲆⲆᐃ: ur.ᐃⲆⵠΔΔ
    }, {
        r: [[166, 1], [108, 27]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 62,
        ⲆΔᐃᐃ: 171,
        time: 1 / 8,
        ⲆⲆᐃ: ur.ᐃⲆⵠΔΔ
    }, {
        r: [[171, 1], [111, 24]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 63,
        ⲆΔᐃᐃ: 172,
        time: 1 / 8,
        ⲆⲆᐃ: ur.ᐃⲆⵠΔΔ
    }, {
        r: [[172, 1], [112, 21]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 64,
        ⲆΔᐃᐃ: 173,
        time: 1 / 8,
        ⲆⲆᐃ: ur.ᐃⲆⵠΔΔ
    }, {
        r: [[173, 1], [121, 18]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 65,
        ⲆΔᐃᐃ: 124,
        time: 1 / 8,
        ⲆⲆᐃ: ur.ᐃⲆⵠΔΔ
    }, {
        r: [[124, 1], [202, 15]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 66,
        ⲆΔᐃᐃ: 218,
        time: 1 / 8,
        ⲆⲆᐃ: ur.ᐃⲆⵠΔΔ
    }, {
        r: [[162, 1], [109, 40], [108, 30]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 67,
        ⲆΔᐃᐃ: 160,
        time: 1 / 20,
        ⲆⲆᐃ: ur.ᐃⲆⵠΔΔ
    }, {
        r: [[163, 1], [108, 70]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 68,
        ⲆΔᐃᐃ: 168,
        time: 1 / 20,
        ⲆⲆᐃ: ur.ᐃⲆⵠΔΔ
    }, {
        r: [[164, 1], [111, 40], [108, 30]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 69,
        ⲆΔᐃᐃ: 169,
        time: 1 / 20,
        ⲆⲆᐃ: ur.ᐃⲆⵠΔΔ
    }, {
        r: [[165, 1], [112, 40], [108, 30]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 70,
        ⲆΔᐃᐃ: 170,
        time: 0.05,
        ⲆⲆᐃ: ur.ᐃⲆⵠΔΔ
    }, {
        r: [[122, 1], [121, 40], [108, 30]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 71,
        ⲆΔᐃᐃ: 123,
        time: 1 / 20,
        ⲆⲆᐃ: ur.ᐃⲆⵠΔΔ
    }, {
        r: [[217, 1], [202, 40], [111, 30]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 72,
        ⲆΔᐃᐃ: 219,
        time: 0.05,
        ⲆⲆᐃ: ur.ᐃⲆⵠΔΔ
    }, {
        r: [[166, 1], [109, 80], [108, 60]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 73,
        ⲆΔᐃᐃ: 212,
        time: 1 / 20,
        ⲆⲆᐃ: ur.ᐃⲆⵠΔΔ
    }, {
        r: [[171, 1], [108, 140]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 74,
        ⲆΔᐃᐃ: 213,
        time: 1 / 20,
        ⲆⲆᐃ: ur.ᐃⲆⵠΔΔ
    }, {
        r: [[172, 1], [111, 80], [108, 60]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 75,
        ⲆΔᐃᐃ: 214,
        time: 1 / 20,
        ⲆⲆᐃ: ur.ᐃⲆⵠΔΔ
    }, {
        r: [[173, 1], [112, 80], [108, 60]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 76,
        ⲆΔᐃᐃ: 215,
        time: 1 / 20,
        ⲆⲆᐃ: ur.ᐃⲆⵠΔΔ
    }, {
        r: [[124, 1], [121, 80], [108, 60]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 77,
        ⲆΔᐃᐃ: 216,
        time: 1 / 20,
        ⲆⲆᐃ: ur.ᐃⲆⵠΔΔ
    }, {
        r: [[218, 1], [202, 80], [111, 60]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 78,
        ⲆΔᐃᐃ: 220,
        time: 0.05,
        ⲆⲆᐃ: ur.ᐃⲆⵠΔΔ
    }, {
        r: [[109, 25], [111, 2]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 79,
        ⲆΔᐃᐃ: 167,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[120, 1], [2, 1], [161, 2]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 80,
        ⲆΔᐃᐃ: 23,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[120, 5], [222, 20], [147, 5], [2, 5]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 81,
        ⲆΔᐃᐃ: 24,
        time: 1 / 30,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[236, 1], [231, 8], [232, 8], [222, 8], [161, 6]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 82,
        ⲆΔᐃᐃ: 82,
        time: 0.016666666666666666,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[2, 1], [161, 2]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 83,
        ⲆΔᐃᐃ: 10,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[10, 1], [174, 5], [161, 4]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 84,
        ⲆΔᐃᐃ: 11,
        time: 1 / 12,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[11, 1], [146, 5], [147, 4]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 85,
        ⲆΔᐃᐃ: 40,
        time: 1 / 30,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[40, 1], [146, 5], [240, 10], [147, 4]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 86,
        ⲆΔᐃᐃ: 88,
        time: 0.02,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[109, 50]],
        w: 0,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 87,
        ⲆΔᐃᐃ: 58,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[108, 75], [109, 75], [58, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 88,
        ⲆΔᐃᐃ: 25,
        time: 1 / 10,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[108, 90], [109, 90], [111, 90], [25, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 89,
        ⲆΔᐃᐃ: 26,
        time: 1 / 20,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[108, 100], [111, 100], [112, 100], [26, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 90,
        ⲆΔᐃᐃ: 27,
        time: 1 / 30,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[121, 80], [111, 150], [112, 120], [27, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 91,
        ⲆΔᐃᐃ: 43,
        time: 1 / 60,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[202, 80], [112, 150], [121, 120], [43, 1]],
        w: 1,
        f: 1,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 92,
        ⲆΔᐃᐃ: 44,
        time: 1 / 90,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[139, 2], [112, 40], [161, 4]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 93,
        ⲆΔᐃᐃ: 48,
        time: 1 / 20,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[48, 1], [111, 80], [129, 1], [121, 20]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 94,
        ⲆΔᐃᐃ: 47,
        time: 1 / 90,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[203, 5], [112, 50], [147, 5]],
        w: 1,
        f: 1,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 95,
        ⲆΔᐃᐃ: 20,
        time: 1 / 20,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[20, 1], [203, 10], [121, 50]],
        w: 1,
        f: 1,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 96,
        ⲆΔᐃᐃ: 21,
        time: 0.016666666666666666,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[21, 1], [203, 15], [121, 50], [202, 50]],
        w: 1,
        f: 1,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 97,
        ⲆΔᐃᐃ: 22,
        time: 1 / 90,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[161, 4], [237, 2]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 98,
        ⲆΔᐃᐃ: 80,
        time: 1 / 15,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[80, 1], [161, 6], [237, 4], [232, 12], [222, 4]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 99,
        ⲆΔᐃᐃ: 81,
        time: 1 / 150,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[161, 6], [174, 5]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 100,
        ⲆΔᐃᐃ: 29,
        time: 1 / 15,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[109, 20]],
        w: 0,
        f: 1,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 101,
        ⲆΔᐃᐃ: 120,
        time: 1 / 3,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[112, 1], [161, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 102,
        ⲆΔᐃᐃ: 147,
        time: 1 / 3,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[111, 10]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 103,
        ⲆΔᐃᐃ: 148,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[111, 250]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 104,
        ⲆΔᐃᐃ: 158,
        time: 0.016666666666666666,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[109, 50]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 105,
        ⲆΔᐃᐃ: 159,
        time: 1 / 10,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[109, 15]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 106,
        ⲆΔᐃᐃ: 125,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[109, 30]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 107,
        ⲆΔᐃᐃ: 190,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[109, 120]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 108,
        ⲆΔᐃᐃ: 221,
        time: 1 / 15,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[109, 20], [140, 15]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 109,
        ⲆΔᐃᐃ: 141,
        time: 0.2,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[126, 25]],
        w: 1,
        f: 1,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 110,
        ⲆΔᐃᐃ: 128,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ΔΔⲆᐃⵠ
    }, {
        r: [[128, 1]],
        w: 0,
        f: 0,
        ⵠⲆᐃ: 1,
        e: 0,
        id: 111,
        ⲆΔᐃᐃ: 127,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ΔΔⲆᐃⵠ
    }, {
        r: [[142, 20], [128, 1]],
        w: 0,
        f: 1,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 112,
        ⲆΔᐃᐃ: 127,
        time: 1 / 10,
        ⲆⲆᐃ: ur.ΔΔⲆᐃⵠ
    }, {
        r: [[128, 1]],
        w: 0,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 1,
        id: 113,
        ⲆΔᐃᐃ: 127,
        time: 1 / 3,
        ⲆⲆᐃ: ur.ΔΔⲆᐃⵠ
    }, {
        r: [[109, 60], [108, 20], [161, 2]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 114,
        ⲆΔᐃᐃ: 135,
        time: 0.1,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[112, 40], [108, 45]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 115,
        ⲆΔᐃᐃ: 151,
        time: 0.05,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[151, 1], [234, 40], [238, 1]],
        w: 1,
        f: 1,
        ⵠⲆᐃ: 1,
        e: 0,
        id: 116,
        ⲆΔᐃᐃ: 152,
        time: 0.005,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[109, 50], [108, 100]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 117,
        ⲆΔᐃᐃ: 153,
        time: 1 / 90,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[108, 60], [111, 120]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 118,
        ⲆΔᐃᐃ: 154,
        time: 1 / 90,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[111, 70], [112, 140]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 119,
        ⲆΔᐃᐃ: 155,
        time: 1 / 90,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[112, 80], [121, 160]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 120,
        ⲆΔᐃᐃ: 156,
        time: 1 / 90,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[121, 90], [202, 180]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 121,
        ⲆΔᐃᐃ: 157,
        time: 1 / 90,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[108, 70]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 122,
        ⲆΔᐃᐃ: 55,
        time: 1 / 10,
        ⲆⲆᐃ: ur.ⲆⲆΔᐃⵠ
    }, {
        r: [[108, 70], [109, 50]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 123,
        ⲆΔᐃᐃ: 56,
        time: 1 / 10,
        ⲆⲆᐃ: ur.ⲆⲆΔᐃⵠ
    }, {
        r: [[109, 40], [108, 40]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 124,
        ⲆΔᐃᐃ: 144,
        time: 1 / 10,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[143, 1], [117, 1]],
        w: 0,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 125,
        ⲆΔᐃᐃ: 145,
        time: 0.3333333333333333,
        ⲆⲆᐃ: ur.ΔΔⲆᐃⵠ
    }, {
        r: [[147, 30], [184, 1], [121, 150], [149, 3]],
        w: 1,
        f: 1,
        ⵠⲆᐃ: 1,
        e: 0,
        id: 126,
        ⲆΔᐃᐃ: 59,
        time: 0.008333333333333333,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[59, 1], [186, 1], [202, 150], [150, 2]],
        w: 1,
        f: 1,
        ⵠⲆᐃ: 1,
        e: 0,
        id: 127,
        ⲆΔᐃᐃ: 60,
        time: 0.005555555555555556,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[26, 1], [197, 10], [196, 10], [161, 10]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 128,
        ⲆΔᐃᐃ: 61,
        time: 1 / 60,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[147, 20], [185, 1], [121, 150], [149, 3]],
        w: 1,
        f: 1,
        ⵠⲆᐃ: 1,
        e: 0,
        id: 129,
        ⲆΔᐃᐃ: 62,
        time: 0.008333333333333333,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[62, 1], [187, 1], [202, 150], [150, 2]],
        w: 1,
        f: 1,
        ⵠⲆᐃ: 1,
        e: 0,
        id: 130,
        ⲆΔᐃᐃ: 63,
        time: 1 / 180,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[109, 100], [161, 4]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 131,
        ⲆΔᐃᐃ: 64,
        time: 1 / 20,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[109, 30]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 132,
        ⲆΔᐃᐃ: 101,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[108, 200], [161, 8], [222, 4], [64, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 133,
        ⲆΔᐃᐃ: 65,
        time: 1 / 25,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[108, 20], [231, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 134,
        ⲆΔᐃᐃ: 102,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[111, 200], [161, 12], [231, 4], [222, 4], [65, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 135,
        ⲆΔᐃᐃ: 66,
        time: 1 / 30,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[111, 20], [222, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 136,
        ⲆΔᐃᐃ: 103,
        time: 0.1,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[112, 200], [147, 10], [231, 8], [222, 8], [66, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 137,
        ⲆΔᐃᐃ: 67,
        time: 0.02857142857142857,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[112, 10], [222, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 138,
        ⲆΔᐃᐃ: 104,
        time: 1 / 10,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[121, 200], [147, 10], [222, 8], [232, 8], [67, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 139,
        ⲆΔᐃᐃ: 68,
        time: 0.025,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[121, 10], [232, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 140,
        ⲆΔᐃᐃ: 105,
        time: 1 / 15,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[202, 200], [147, 10], [129, 1], [68, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 141,
        ⲆΔᐃᐃ: 69,
        time: 0.022222222222222223,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[202, 10], [232, 1], [203, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 142,
        ⲆΔᐃᐃ: 106,
        time: 1 / 15,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[234, 200], [147, 10], [185, 1], [69, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 143,
        ⲆΔᐃᐃ: 70,
        time: 1 / 50,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[234, 10], [238, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 144,
        ⲆΔᐃᐃ: 107,
        time: 0.05,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[109, 100]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 145,
        ⲆΔᐃᐃ: 71,
        time: 0.04,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[71, 1], [108, 100], [109, 50]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 146,
        ⲆΔᐃᐃ: 72,
        time: 1 / 40,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[72, 1], [111, 50], [108, 50], [109, 50]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 147,
        ⲆΔᐃᐃ: 73,
        time: 0.02,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[73, 1], [112, 50], [111, 50], [108, 50]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 148,
        ⲆΔᐃᐃ: 74,
        time: 0.014285714285714285,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[74, 1], [121, 50], [112, 50], [111, 50]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 149,
        ⲆΔᐃᐃ: 75,
        time: 0.011111111111111112,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[75, 1], [202, 50], [121, 50], [112, 50]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 150,
        ⲆΔᐃᐃ: 76,
        time: 1 / 120,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[175, 1], [111, 200]],
        w: 1,
        f: 1,
        ⵠⲆᐃ: 1,
        e: 0,
        id: 151,
        ⲆΔᐃᐃ: 77,
        time: 1 / 60,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[176, 1], [111, 200]],
        w: 1,
        f: 1,
        ⵠⲆᐃ: 1,
        e: 0,
        id: 152,
        ⲆΔᐃᐃ: 78,
        time: 0.016666666666666666,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[177, 1], [111, 200], [149, 1]],
        w: 1,
        f: 1,
        ⵠⲆᐃ: 1,
        e: 0,
        id: 153,
        ⲆΔᐃᐃ: 79,
        time: 1 / 60,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[174, 10], [2, 5], [161, 6]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 154,
        ⲆΔᐃᐃ: 83,
        time: 1 / 10,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[2, 3], [161, 2]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 155,
        ⲆΔᐃᐃ: 84,
        time: 0.1,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[83, 1], [179, 1], [146, 15], [147, 5], [222, 8]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 156,
        ⲆΔᐃᐃ: 85,
        time: 1 / 60,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[84, 1], [178, 1], [146, 10], [147, 5], [222, 8]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 157,
        ⲆΔᐃᐃ: 86,
        time: 0.016666666666666666,
        ⲆⲆᐃ: ur.ⵠⵠⵠᐃⵠ
    }, {
        r: [[181, 1]],
        w: 0,
        f: 0,
        ⵠⲆᐃ: 1,
        e: 0,
        id: 158,
        ⲆΔᐃᐃ: 180,
        time: 0.2,
        ⲆⲆᐃ: ur.ⲆⲆΔᐃⵠ
    }, {
        r: [[109, 20], [161, 1]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 159,
        ⲆΔᐃᐃ: 181,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ⲆⲆΔᐃⵠ
    }, {
        r: [[108, 100], [140, 30]],
        w: 1,
        f: 1,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 160,
        ⲆΔᐃᐃ: 182,
        time: 1 / 10,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[109, 20]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 161,
        ⲆΔᐃᐃ: 183,
        time: 0.2,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[109, 100], [108, 50], [2, 5], [174, 5], [161, 6]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 162,
        ⲆΔᐃᐃ: 198,
        time: 0.05,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[109, 250], [147, 10], [146, 2], [139, 2]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 163,
        ⲆΔᐃᐃ: 223,
        time: 1 / 50,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[109, 250], [161, 10], [146, 2], [222, 8]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 164,
        ⲆΔᐃᐃ: 224,
        time: 1 / 50,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[161, 10], [174, 6], [2, 4], [126, 50]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 165,
        ⲆΔᐃᐃ: 89,
        time: 1 / 20,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[109, 250], [161, 10], [120, 10], [231, 8]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 166,
        ⲆΔᐃᐃ: 230,
        time: 0.02,
        ⲆⲆᐃ: ur.ⲆΔᐃⵠⵠ
    }, {
        r: [[109, 40]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 167,
        ⲆΔᐃᐃ: 94,
        time: 1 / 5,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[94, 1], [108, 40], [109, 50]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 168,
        ⲆΔᐃᐃ: 95,
        time: 1 / 10,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[95, 1], [111, 40], [108, 50], [109, 60]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 169,
        ⲆΔᐃᐃ: 96,
        time: 1 / 20,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[96, 1], [112, 40], [111, 70], [108, 80]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 170,
        ⲆΔᐃᐃ: 97,
        time: 1 / 30,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[97, 1], [121, 40], [112, 70], [111, 110]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 171,
        ⲆΔᐃᐃ: 98,
        time: 1 / 60,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }, {
        r: [[98, 1], [202, 50], [121, 80], [112, 110]],
        w: 1,
        f: 0,
        ⵠⲆᐃ: 0,
        e: 0,
        id: 172,
        ⲆΔᐃᐃ: 99,
        time: 1 / 90,
        ⲆⲆᐃ: ur.ⵠⲆⲆᐃΔ
    }];
    const Ms = 10;
    mr = 300;
    ᐃΔⵠΔ = {
        ⵠⵠⲆᐃⲆΔΔ: 300,
        ΔᐃΔⵠᐃⵠⲆ: 301,
        ΔᐃⵠΔΔᐃᐃ: 302,
        ⲆᐃᐃⲆΔⲆᐃ: 303,
        ⲆⵠΔΔⵠᐃⲆ: 304,
        ΔⵠⲆΔⲆⵠⵠ: 305,
        ᐃΔⲆΔᐃⵠΔ: 306,
        ᐃΔΔⵠⲆⵠΔ: 307,
        ᐃⵠΔⵠΔΔΔ: 308,
        ⲆⵠⵠᐃⲆⲆⲆ: 309,
        ⲆⵠⵠᐃΔᐃᐃ: 310,
        ᐃΔⲆⵠΔⲆⵠ: 311,
        EMPTY: 312,
        ᐃᐃⵠⵠⲆᐃⵠ: 313,
        ⲆⲆΔᐃᐃⵠⵠ: 314,
        ΔⲆᐃΔⲆΔⲆ: 315,
        ⲆⲆᐃⵠⲆΔⵠ: 316,
        ΔᐃⲆⵠᐃΔΔ: 317,
        ⵠᐃᐃⵠⵠΔⵠ: 318,
        ⵠⵠⵠⵠⵠᐃΔ: 319,
        ⵠΔⵠΔⵠⵠᐃ: 320,
        ᐃΔⲆᐃΔΔᐃ: 321,
        ΔΔⵠΔΔ: 322,
        ΔΔᐃⲆΔⵠⵠ: 323,
        ⵠᐃᐃⵠΔ: 324,
        ⵠⲆⲆᐃⵠⵠᐃ: 325,
        ᐃⵠⵠⵠΔⲆⲆ: 326,
        ⲆΔᐃⵠᐃΔΔ: 327,
        ᐃΔΔⵠⲆⲆⲆ: 328,
        ᐃⲆⲆⲆⲆⵠⵠ: 329,
        ⲆᐃⲆⲆᐃⲆⲆ: 330,
        ⲆΔΔⲆᐃΔⵠ: 331,
        POINTS: 332,
        ⵠⵠⵠΔⲆᐃⲆ: 333,
        ΔⵠⲆᐃⲆⲆᐃ: 334,
        ⵠᐃⲆΔⵠΔⲆ: 335,
        ⲆⲆΔⲆᐃⵠⵠ: 336,
        ᐃᐃΔΔᐃⵠⲆ: 337,
        ᐃⲆᐃⵠⲆⵠⲆ: 338,
        ⲆᐃΔᐃⵠΔΔ: 339,
        ⵠⵠᐃᐃⲆᐃᐃ: 340,
        ⲆΔᐃΔΔᐃΔ: 341,
        ⵠⲆΔⲆᐃᐃⲆ: 342,
        ΔⲆⲆᐃΔⲆΔ: 343
    };
    const zg = 20;
    function yg() {
        Xg[99] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
        Xg[98] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
        Xg[97] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
        Xg[96] = ["Gold Axe", "Chop 'til it drops!", "Damage: 24", "Shield Penetration: 3"];
        Xg[95] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
        Xg[94] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
        Xg[153] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
        Xg[154] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
        Xg[155] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
        Xg[156] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
        Xg[157] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
        Xg[76] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
        Xg[75] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
        Xg[74] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
        Xg[73] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
        Xg[72] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
        Xg[71] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
        Xg[56] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
        Xg[221] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
        Xg[107] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
        Xg[70] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
        Xg[106] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
        Xg[69] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
        Xg[105] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
        Xg[68] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
        Xg[104] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
        Xg[67] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
        Xg[103] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
        Xg[66] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
        Xg[102] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
        Xg[65] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
        Xg[101] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
        Xg[64] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
        Xg[152] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
        Xg[237] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
        Xg[240] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
        Xg[232] = ["Vulture Feather", "From a deadly vulture"];
        Xg[234] = ["Emerald", "How many golden breads can you get from it?"];
        Xg[238] = ["Sand Worm Juice", "I don't want to know how you got this."];
        Xg[80] = ["Turban", "Useful to survive in the desert."];
        Xg[81] = ["Ninja outfit", "Essential to survive in the desert"];
        Xg[82] = ["Pilot Hat", "Take off and land with flying objects much faster."];
        Xg[236] = ["Pilot Glasses"];
        Xg[225] = ["Tamed Boar", "Fast on lands and slow on water."];
        Xg[239] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
        Xg[226] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
        Xg[227] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
        Xg[228] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
        Xg[229] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
        Xg[89] = ["Saddle", "Hit a boar with it to tame it."];
        Xg[90] = ["Witch Hat", "You're a wizard Starvy!"];
        Xg[91] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
        Xg[92] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
        Xg[93] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
        Xg[100] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
        Xg[24] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
        Xg[224] = ["Sled", "You are faster with it in the snow"];
        Xg[223] = ["Boat", "You are faster with it in the water"];
        Xg[230] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
        Xg[39] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"];
        Xg[222] = ["Penguin Feather", "From a deadly cute penguin."];
        Xg[231] = ["Hawk Feather", "From a deadly hawk."];
        Xg[233] = ["Cactus", "Food : 20", "Water : 10"];
        Xg[211] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
        Xg[210] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
        Xg[209] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
        Xg[208] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
        Xg[218] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
        Xg[217] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
        Xg[219] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
        Xg[220] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
        Xg[32] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
        Xg[212] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
        Xg[213] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
        Xg[214] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
        Xg[215] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
        Xg[216] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
        Xg[205] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
        Xg[207] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
        Xg[204] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        Xg[206] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        Xg[53] = ["Pitchfork", "Perfect for gathering"];
        Xg[54] = ["Golden Pitchfork", "Essential for a real farmer."];
        Xg[235] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
        Xg[sr.ⵠⵠⲆⵠΔⵠⲆ] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
        Xg[sr.ΔⵠᐃᐃΔΔΔ] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
        Xg[sr.ᐃᐃᐃⵠᐃᐃⲆ] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
        Xg[sr.ⵠᐃⲆΔᐃⲆΔ] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
        Xg[sr.ⵠΔⵠᐃⵠΔⵠ] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
        Xg[186] = ["Lava Cube", "You feel an immense power emanating from this cube"];
        Xg[187] = ["Lava Orb", "You feel an immense power emanating from this orb"];
        Xg[63] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
        Xg[17] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
        Xg[150] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
        Xg[60] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
        Xg[34] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
        Xg[19] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
        Xg[203] = ["Flame", "It's hot!"];
        Xg[20] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
        Xg[21] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
        Xg[22] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
        Xg[202] = ["Reidite", "The ultimate ore"];
        Xg[184] = ["Dragon Cube", "You feel a great power emanating from this cube"];
        Ns[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        Ns[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
        Ns[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
        Ns[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
        Ns[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
        Ns[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
        Ns[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
        Ns[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
        Ns[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
        Ns[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
        Ns[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
        Ns[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
        Ns[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
        Ns[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
        Ns[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
        Ns[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
        Ns[38] = ["You died crushed by an angry baby mammoth."];
        Ns[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
        Ns[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
        Xg[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        Xg[341] = "A sandstorm is approaching in a few seconds.";
        Xg[340] = "The sandstorm will soon stop.";
        Xg[343] = "A blizzard is approaching in a few seconds.";
        Xg[342] = "The blizzard will soon stop.";
        Xg[328] = " BACK TO THE GAME";
        Xg[329] = " Share on Twitter";
        Xg[330] = " Share on Facebook";
        Xg[331] = "You can buy items on the shop in the next game with your points";
        Xg[332] = "points";
        Xg[333] = "Score";
        Xg[334] = "Kill";
        Xg[335] = "Days survived";
        Xg[336] = "Building method: Free. Press G to change";
        Xg[337] = "Building method: Grid. Press G to change";
        Xg[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        Xg[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
        Xg[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
        Xg[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        Xg[7] = ["Hand"];
        Xg[140] = ["Dirt", "Dirty!"];
        Xg[126] = ["Sand", "I got it in my eyes!"];
        Xg[109] = ["Wood", "You can't get enough of it!"];
        Xg[108] = ["Stone", "Also called a rock"];
        Xg[111] = ["Gold", "Be generous, give it to others"];
        Xg[112] = ["Diamond", "What will you make with it?"];
        Xg[121] = ["Amethyst", "It's Mauve like Lapa"];
        Xg[131] = ["Flour", "Used in cooking"];
        Xg[133] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
        Xg[136] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
        Xg[116] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
        Xg[117] = ["Cooked meat", "A rare steak, please", "Food: 35"];
        Xg[137] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
        Xg[138] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
        Xg[143] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
        Xg[145] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
        Xg[200] = ["Candies", "Only for children!", "Food: 20"];
        Xg[199] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
        Xg[201] = ["Garland", "Perfect decoration for roofs"];
        Xg[115] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
        Xg[110] = ["Berry", "Berry tasty!", "Food: 10"];
        Xg[132] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
        Xg[134] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
        Xg[188] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
        Xg[189] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
        Xg[191] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        Xg[192] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
        Xg[193] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
        Xg[194] = ["Thorn bush", "It stings!"];
        Xg[141] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
        Xg[142] = ["Ice", "Useful for making cakes and water"];
        Xg[55] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
        Xg[174] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
        Xg[2] = ["Rabbit Fur", "That rabbit was so cute..."];
        Xg[178] = ["Pure Fur", "You're a bread factory"];
        Xg[179] = ["Dark Fur", "You get ready to do something wrong"];
        Xg[146] = ["Winter Fur", "These animals just wanted a hug..."];
        Xg[139] = ["Scales", "It smells like fish!"];
        Xg[129] = ["Kraken Skin", "Weren't you too scared?"];
        Xg[113] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
        Xg[118] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
        Xg[114] = ["Workbench", "Very useful to craft all kinds of objects"];
        Xg[161] = ["Cord", "Used in crafting Hats and Bag"];
        Xg[147] = ["Diamond Cord", "Used in crafting Special Hats"];
        Xg[167] = ["Chest", "Allows you to store items", "Durability: 500"];
        Xg[57] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
        Xg[0] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
        Xg[5] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
        Xg[6] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
        Xg[9] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
        Xg[30] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
        Xg[62] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
        Xg[16] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
        Xg[8] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
        Xg[1] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
        Xg[3] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
        Xg[4] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
        Xg[31] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
        Xg[35] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
        Xg[36] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
        Xg[37] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
        Xg[38] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
        Xg[45] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"];
        Xg[12] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
        Xg[13] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
        Xg[14] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
        Xg[15] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
        Xg[33] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
        Xg[46] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
        Xg[50] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
        Xg[51] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
        Xg[52] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
        Xg[58] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
        Xg[25] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
        Xg[26] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
        Xg[27] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
        Xg[43] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
        Xg[44] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
        Xg[59] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
        Xg[23] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
        Xg[41] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
        Xg[42] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
        Xg[83] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
        Xg[10] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
        Xg[11] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
        Xg[40] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
        Xg[88] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
        Xg[84] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
        Xg[85] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
        Xg[86] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
        Xg[48] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
        Xg[47] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
        Xg[185] = ["Dragon Orb", "You feel a great power emanating from this orb"];
        Xg[149] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
        Xg[175] = ["Green Gemstone", "You didn't cheat, promise?"];
        Xg[176] = ["Orange Gemstone", "Only a real pirate can find it!"];
        Xg[177] = ["Blue Gemstone", "For too kind people"];
        Xg[77] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
        Xg[78] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
        Xg[79] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
        Xg[180] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
        Xg[181] = ["Empty Bucket", "You need to fill this bucket near a water source"];
        Xg[127] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
        Xg[128] = ["Empty Bottle", "You can fill this bottle near a water source"];
        Xg[130] = ["Empty Watering Can", "You must fill it with a water source to use it"];
        Xg[49] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
        Xg[29] = ["Bag", "More space for your items!"];
        Xg[120] = ["Paper", "Used in book-crafting"];
        Xg[28] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
        Xg[195] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
        Xg[148] = ["Lock", "Allow you to lock your chest"];
        Xg[158] = ["Lock-pick", "Allows you to unlock one chest"];
        Xg[159] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
        Xg[125] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
        Xg[183] = ["Sign", "Leave a message to others", "Durability: 200"];
        Xg[190] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
        Xg[182] = ["Well", "Allows bottle filling", "Durability: 1000"];
        Xg[162] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
        Xg[163] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
        Xg[164] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
        Xg[165] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
        Xg[122] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
        Xg[160] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
        Xg[168] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
        Xg[169] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
        Xg[170] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
        Xg[123] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
        Xg[166] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
        Xg[171] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
        Xg[172] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
        Xg[173] = ["Diamond Door", "For a shining house", "Durability: 2500"];
        Xg[124] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
        Xg[119] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
        Xg[135] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
        Xg[144] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
        Xg[151] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
        Xg[300] = "You cannot join this server";
        Xg[301] = "Kicked: ";
        Xg[302] = "Your key is already used by someone else";
        Xg[303] = "Your key is wrong";
        Xg[304] = "You have an old version, you need to clear your cache";
        Xg[338] = "Your client version is too recent for this server. The server is being updated";
        Xg[339] = "Wrong password! To enter a password: https://starve.io/?password=...";
        Xg[305] = "There are no more new resources";
        Xg[306] = "You survived 1 day";
        Xg[307] = "You survived ";
        Xg[308] = " days";
        Xg[309] = "You are dead ;-;";
        Xg[310] = "Server cannot find spawn location! Spam the play button!";
        Xg[311] = "Server is full! Spam the play button!";
        Xg[312] = "Resource is empty";
        Xg[313] = "Inventory is full (right-click to empty items)";
        Xg[314] = " is dead";
        Xg[315] = "This is not the right tool";
        Xg[316] = "You joined a team";
        Xg[317] = "You are dead";
        Xg[318] = " joined the team";
        Xg[319] = "Your team was destroyed";
        Xg[320] = "You left the team";
        Xg[321] = " left the team";
        Xg[322] = "Someone stole your token :>";
        Xg[323] = "Choose a server";
        Xg[324] = "players";
        Xg[325] = "total players";
        Xg[326] = "players on this mode";
        Xg[327] = "Coming soon...";
        document.getElementById("nickname_input").placeholder = "Nickname";
        Ns[0] = ["You were killed for no reason"];
        Ns[1] = ["You starved to death, as the name of the game implies"];
        Ns[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
        Ns[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
        Ns[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
        Ns[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
        Ns[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
        Ns[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
        Ns[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
        Ns[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
        Ns[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
        Ns[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
        Ns[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
        Ns[13] = ["You died of thirst. Better drink your own piss."];
        Ns[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
        Ns[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
        Ns[16] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
        Ns[17] = ["Your skin's falling apart, the sun killed you."];
        Ns[18] = ["Garlic stored in your pockets boiled your brain."];
        Ns[19] = ["As a vampire, don't stand near the garlic cloves."];
        Ns[20] = ["You ate garlic as a vampire, what did you expect?"];
        Ns[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
        ΔΔΔᐃΔ = "Uuunnnggg";
        ᐃⵠᐃΔΔⵠⵠ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
    }
    const wg = 10;
    function Pg(b, c, d) {
        const e = (24 << (b >> 16 & 255)) + (0 << (b >> 8 & 255)) + (8 << (b & 255)) + (16 << (b >> 24 & 255));
        const f = ((c + 49423) * 214013 + 2531011) % 4294967296;
        const g = ~(d & 49063) & d | ~(d & 49063) & 49063;
        return ((22475 + (Qw(e, f, g, e, f, g) ^ function (b, c, d, e, f) {
            const i = b ^ 35137;
            const a = (0 << (c >> 24 & 255)) + (24 << (c & 255)) + (16 << (c >> 16 & 255)) + (8 << (c >> 8 & 255));
            const j = d ^ 9294;
            const k = (e + 41606) % 65404;
            const h = ~(f & 29362) & 29362 | ~(f & 29362) & f;
            const l = Ev(i, a, j, k, h, i);
            const g = function (b, c, d, e, f, g) {
                const a = ~(b & 32138) & (b | 32138);
                const i = (8 << (g >> 8 & 255)) + (16 << (g >> 24 & 255)) + (0 << (g & 255)) + (24 << (g >> 16 & 255));
                const j = Dn(a, ((c + 25284) * 2147483629 + 2147483587) % 2147483647, d ^ 51759, (0 << (e & 255)) + (24 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 24 & 255)), (16 << (f & 255)) + (8 << (f >> 8 & 255)) + (24 << (f >> 16 & 255)) + (0 << (f >> 24 & 255)));
                hf(i, a);
                return j ^ 21358;
            }(a, j, k, h, i, a);
            return (24 << ((l ^ g) & 255)) + (16 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 8 & 255)) + (0 << ((l ^ g) >> 24 & 255));
        }(e, f, g, e, f))) * 2147483629 + 2147483587) % 2147483647;
    }
    const Ag = 6;
    const kg = 4;
    const xg = 100;
    const Jg = 2;
    function Mg(a) {
        return function (a, b) {
            const c = ~(a & 22750) & (a | 22750);
            const d = b ^ 47497;
            const e = bw(c, d, c, d);
            (function (b, c, d, e, f) {
                const g = (1013904223 + (d + 64848) * 1664525) % 4294967296;
                const a = ((15809 + e) * 2147483629 + 2147483587) % 2147483647;
                const i = (2531011 + (f + 15508) * 214013) % 4294967296;
                const j = hf((0 << (b >> 24 & 255)) + (24 << (b & 255)) + (16 << (b >> 16 & 255)) + (8 << (b >> 8 & 255)), ((c + 12283) * 1103515245 + 12345) % 2147483648);
                const h = kk(g, a, i);
            })(c, d, c, d, c);
            return e ^ 16460;
        }(a, 53826);
    }
    function Bg(b, c, d, e, f, i) {
        const a = b ^ 30264;
        const j = ~(d & 29663) & d | ~(d & 29663) & 29663;
        const k = ((f + 53350) * 2147483629 + 2147483587) % 2147483647;
        const h = ~(a & 44284) & (a | 44284);
        const l = ((26083 + ((0 << ((h ^ j) >> 8 & 255)) + (16 << ((h ^ j) >> 16 & 255)) + (8 << ((h ^ j) & 255)) + (24 << ((h ^ j) >> 24 & 255)) ^ (0 << (e >> 16 & 255)) + (8 << (e >> 8 & 255)) + (16 << (e >> 0 & 255)) + (24 << (e >> 24 & 255)))) * 1103515245 + 12345) % 2147483648;
        const g = (24 << ((l ^ k) >> 24 & 255)) + (16 << ((l ^ k) >> 16 & 255)) + (8 << ((l ^ k) & 255)) + (0 << ((l ^ k) >> 8 & 255));
        return ~(g & 63202) & g | ~(g & 63202) & 63202;
    }
    const Dg = 2;
    function Eg() {
        Xg[184] = ["You feel a great power emanating from this orb"];
        Ns[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        Xg[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        Xg[328] = " BACK TO THE GAME";
        Xg[329] = " Share on Twitter";
        Xg[330] = " Share on Facebook";
        Xg[331] = "You can buy items on the shop in the next game with your points";
        Xg[332] = "points";
        Xg[333] = "Score";
        Xg[334] = "Kill";
        Xg[335] = "Days survived";
        Xg[336] = "Building method: Free. Press G to change";
        Xg[337] = "Building method: Grid. Press G to change";
        Xg[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        Xg[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        Xg[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        Xg[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        Xg[7] = ["Рука"];
        Xg[140] = ["Земля", "Грязно!"];
        Xg[126] = ["Песок", "Он в моих глазах!"];
        Xg[109] = ["Дерево", "Постоянно нужно больше!"];
        Xg[108] = ["Камень", "Твердый"];
        Xg[111] = ["Золото", "Будьте щедры, давайте его другим"];
        Xg[112] = ["Алмаз", "Что вы создадите с помощью него?"];
        Xg[121] = ["Аметист", "Он сиреневый, как Lapa"];
        Xg[131] = ["Мука", "Используется в готовке"];
        Xg[133] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
        Xg[136] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
        Xg[116] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
        Xg[117] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
        Xg[137] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
        Xg[138] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
        Xg[143] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
        Xg[145] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
        Xg[200] = ["Конфеты", "Только для детей!", "Еда: 20"];
        Xg[199] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
        Xg[201] = ["Гирлянда", "Прекрасная декорация для крыши"];
        Xg[115] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
        Xg[110] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
        Xg[132] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
        Xg[134] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
        Xg[188] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
        Xg[189] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
        Xg[191] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
        Xg[192] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
        Xg[193] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
        Xg[194] = ["Колючий Куст", "Это больно!"];
        Xg[141] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
        Xg[142] = ["Лёд", "Используется для изготовления тортов и воды"];
        Xg[55] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
        Xg[174] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
        Xg[2] = ["Шкура Зайца", "Этот кролик был таким милым..."];
        Xg[178] = ["Чистая Шкура", "Вы - фабрика хлеба"];
        Xg[179] = ["Чёрная Шкура", "Вы готовы делать зло."];
        Xg[146] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
        Xg[139] = ["Чешуя", "Она пахнет рыбой!"];
        Xg[129] = ["Шкура Кракена", "Вы не испугались?"];
        Xg[113] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
        Xg[118] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
        Xg[114] = ["Верстак", "Необходим для создания многих предметов"];
        Xg[161] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
        Xg[147] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
        Xg[167] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
        Xg[57] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
        Xg[0] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
        Xg[5] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
        Xg[6] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
        Xg[9] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
        Xg[30] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
        Xg[62] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
        Xg[16] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
        Xg[8] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
        Xg[1] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
        Xg[3] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
        Xg[4] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
        Xg[31] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
        Xg[35] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
        Xg[36] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
        Xg[37] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
        Xg[38] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
        Xg[45] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
        Xg[12] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
        Xg[13] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
        Xg[14] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
        Xg[15] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
        Xg[33] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
        Xg[46] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
        Xg[50] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
        Xg[51] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
        Xg[52] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
        Xg[58] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
        Xg[25] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
        Xg[26] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
        Xg[27] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
        Xg[43] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
        Xg[59] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
        Xg[23] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
        Xg[41] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
        Xg[42] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
        Xg[83] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
        Xg[10] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
        Xg[11] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
        Xg[40] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
        Xg[84] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
        Xg[85] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
        Xg[86] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
        Xg[48] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
        Xg[47] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
        Xg[185] = ["Шар Дракона", "Даётся за квест"];
        Xg[149] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
        Xg[175] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
        Xg[176] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
        Xg[177] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
        Xg[77] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
        Xg[78] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
        Xg[79] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
        Xg[180] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
        Xg[181] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
        Xg[127] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
        Xg[128] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
        Xg[130] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
        Xg[49] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
        Xg[29] = ["Рюкзак", "Больше места для ваших предметов!"];
        Xg[120] = ["Бумага", "Используется при создании книги"];
        Xg[28] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
        Xg[195] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
        Xg[148] = ["Замок", "Позволяет вам закрыть ваш сундук"];
        Xg[158] = ["Ключ", "Даёт вам открыть один запертый сундук"];
        Xg[159] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
        Xg[125] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
        Xg[183] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
        Xg[190] = ["Крыша", "Немного скрывает вас и согревает!"];
        Xg[182] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
        Xg[162] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
        Xg[163] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
        Xg[164] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
        Xg[165] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
        Xg[122] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
        Xg[160] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
        Xg[168] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
        Xg[169] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
        Xg[170] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
        Xg[123] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
        Xg[166] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
        Xg[171] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
        Xg[172] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
        Xg[173] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
        Xg[124] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
        Xg[119] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
        Xg[135] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
        Xg[144] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
        Xg[151] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
        Xg[300] = "Вы не можете зайти на этот сервер";
        Xg[301] = "Выгнаны: ";
        Xg[302] = "Ваш ключ уже используется кем-то";
        Xg[303] = "Ваш ключ неправильный";
        Xg[304] = "У вас старая версия, вам нужно очистить кеш";
        Xg[305] = "Ресурсов больше нет";
        Xg[306] = "Вы выжили 1 день";
        Xg[307] = "Вы выжили ";
        Xg[308] = " дней";
        Xg[309] = "Вы умерли ;-;";
        Xg[310] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
        Xg[311] = "Сервер заполнен! Спамьте кнопку играть!";
        Xg[312] = "Ресурсы закончились";
        Xg[313] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
        Xg[314] = " умер";
        Xg[315] = "Это не тот инструмент";
        Xg[316] = "Вы вошли в команду";
        Xg[317] = "Вы умерли";
        Xg[318] = " вошёл в команду";
        Xg[319] = "Ваша команда была разрушена";
        Xg[320] = "Вы покинули команду";
        Xg[321] = " покинул команду";
        Xg[322] = "Кто-то использует ваш токен :>";
        Xg[323] = "Выберите сервер";
        Xg[324] = "игроков";
        Xg[325] = "игроков всего";
        Xg[326] = "игроков в этом режиме";
        Xg[327] = "Скоро...";
        document.getElementById("nickname_input").placeholder = "Имя";
        Ns[0] = ["Вы были убиты без причины"];
        Ns[1] = ["Вы умерли от голода, как название игры подразумевает это"];
        Ns[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
        Ns[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
        Ns[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
        Ns[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
        Ns[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
        Ns[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
        Ns[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
        Ns[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
        Ns[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
        Ns[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
        Ns[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
        Ns[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
        Ns[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
        Ns[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
        Ns[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
        Ns[17] = ["Твоя кожа разваливается, солнце убило тебя"];
        Ns[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
        Ns[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
        Ns[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
        Ns[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
        ΔΔΔᐃΔ = "Uuunnnggg";
        ᐃⵠᐃΔΔⵠⵠ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
    }
    const Ig = dh;
    function Sg() {
        Xg[184] = ["You feel a great power emanating from this orb"];
        Ns[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        Xg[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        Xg[328] = " BACK TO THE GAME";
        Xg[329] = " Share on Twitter";
        Xg[330] = " Share on Facebook";
        Xg[331] = "You can buy items on the shop in the next game with your points";
        Xg[332] = "points";
        Xg[333] = "Score";
        Xg[334] = "Kill";
        Xg[335] = "Days survived";
        Xg[336] = "Building method: Free. Press G to change";
        Xg[337] = "Building method: Grid. Press G to change";
        Xg[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        Xg[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        Xg[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        Xg[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        Xg[7] = ["mão"];
        Xg[140] = ["terra", "está sujo!"];
        Xg[126] = ["areia", "entrou nos meus olhos!"];
        Xg[109] = ["madeira", "você não pode pegar o suficiente disso!"];
        Xg[108] = ["pedra", "também chamado rocha"];
        Xg[111] = ["ouro", "seja generoso, dê para outros"];
        Xg[112] = ["diamante", "o que você irá fazer com isso?"];
        Xg[121] = ["ametista", "é mauve como lapa"];
        Xg[131] = ["farinha", "usada na cozinha"];
        Xg[133] = ["biscoito", "biscoito da vovó", "comida: 50"];
        Xg[136] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
        Xg[116] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
        Xg[117] = ["carne assada", "um mal passado, por favor", "comida: 35"];
        Xg[137] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
        Xg[138] = ["peixe assado", "com limão é perfeito", "comida: 35"];
        Xg[143] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
        Xg[145] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
        Xg[200] = ["doces", "apenas para crianças!", "comida: 100"];
        Xg[199] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
        Xg[201] = ["pisca-pisca", "decoração perfeita de telhado"];
        Xg[115] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
        Xg[110] = ["berry", "Berry saborosa!", "comida: 10"];
        Xg[132] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
        Xg[134] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
        Xg[188] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
        Xg[189] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
        Xg[191] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
        Xg[192] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
        Xg[193] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
        Xg[194] = ["mato de espinhos", "pica!"];
        Xg[141] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
        Xg[142] = ["gelo", "útil para fazer bolo e água"];
        Xg[55] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
        Xg[174] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
        Xg[2] = ["pele de coelho", "o coelho era tão fofo..."];
        Xg[178] = ["pele pura", "você é uma fábrica de pão"];
        Xg[179] = ["pele negra", "você está pronto para fazer algo errado"];
        Xg[146] = ["pele de inverno", "ele só queria um abraço"];
        Xg[139] = ["escala", "é pequeno como peixe!"];
        Xg[129] = ["pele do kraken", "você não está com medo?"];
        Xg[113] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
        Xg[118] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
        Xg[114] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
        Xg[161] = ["linha", "usada para fazer chapéus e mochila"];
        Xg[147] = ["linha de diamante", "usada para fazer chapéus especiais"];
        Xg[167] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
        Xg[57] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
        Xg[0] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
        Xg[5] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
        Xg[6] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
        Xg[9] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
        Xg[30] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
        Xg[62] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
        Xg[16] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
        Xg[8] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
        Xg[sr.ⲆᐃⵠΔⲆⲆᐃΔΔ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
        Xg[3] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
        Xg[4] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
        Xg[31] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
        Xg[35] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
        Xg[36] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
        Xg[37] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
        Xg[38] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
        Xg[45] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
        Xg[12] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
        Xg[13] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
        Xg[14] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
        Xg[15] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
        Xg[33] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
        Xg[46] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
        Xg[50] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
        Xg[51] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
        Xg[52] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
        Xg[58] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
        Xg[25] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
        Xg[26] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
        Xg[27] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
        Xg[43] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
        Xg[59] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
        Xg[23] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
        Xg[41] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
        Xg[42] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
        Xg[83] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
        Xg[10] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
        Xg[11] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
        Xg[40] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
        Xg[84] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
        Xg[85] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
        Xg[86] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
        Xg[48] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
        Xg[47] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
        Xg[185] = ["esfera do dragão", "dado na questt"];
        Xg[149] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
        Xg[175] = ["pedra verde", "você não vai trapacear, promete?"];
        Xg[176] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
        Xg[177] = ["pedra azul", "para pessoas muito gentis"];
        Xg[77] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
        Xg[78] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
        Xg[79] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
        Xg[180] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
        Xg[181] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
        Xg[127] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
        Xg[128] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
        Xg[130] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
        Xg[49] = ["regador", "permite regar as plantas", "dano: 1"];
        Xg[29] = ["mochila", "mais espaço para seus itens!"];
        Xg[120] = ["papel", "usado para fazer o livro"];
        Xg[28] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
        Xg[195] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
        Xg[148] = ["fechadura", "permite você trancar seu baú"];
        Xg[158] = ["chave", "permite destrancar um baú"];
        Xg[159] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
        Xg[125] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
        Xg[183] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
        Xg[190] = ["telhado", "esconde você um pouco e te esquenta!"];
        Xg[182] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
        Xg[162] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
        Xg[163] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
        Xg[164] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
        Xg[165] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
        Xg[122] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
        Xg[160] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
        Xg[168] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
        Xg[169] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
        Xg[170] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
        Xg[123] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
        Xg[166] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
        Xg[171] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
        Xg[172] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
        Xg[173] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
        Xg[124] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
        Xg[119] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
        Xg[135] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
        Xg[144] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
        Xg[151] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
        Xg[300] = "você não pode entrar no servidor";
        Xg[301] = "kickado: ";
        Xg[302] = "sua chave está em uso por outra pessoa";
        Xg[303] = "sua chave está errada";
        Xg[304] = "você tem uma versão velha, limpe seu cache";
        Xg[305] = "não tem mais recursos";
        Xg[306] = "você sobreviveu 1 dia";
        Xg[307] = "você sobreviveu ";
        Xg[308] = " dias";
        Xg[309] = "você está morto ;-;";
        Xg[310] = "servidor não pôde achar um local de spawn! spam o botão de play!";
        Xg[311] = "servidor está cheio! spam o botão de play!";
        Xg[312] = "não tem recursos";
        Xg[313] = "inventário está cheio (botão direito para deletar itens)";
        Xg[314] = " está morto";
        Xg[315] = "essa não é a ferramenta certa";
        Xg[316] = "você entrou no time";
        Xg[317] = "você está morto";
        Xg[318] = "entrou no time";
        Xg[319] = "seu time foi destruido";
        Xg[320] = "você saiu do time";
        Xg[321] = " saiu do time";
        Xg[322] = "alguém roubou sua ficha :>";
        Xg[323] = "escolha um servidor";
        Xg[324] = "jogadores";
        Xg[325] = "jogadores totais";
        Xg[326] = "jogadores nesse modo";
        Xg[327] = "Coming soon...";
        document.getElementById("nickname_input").placeholder = "Apelido";
        Ns[0] = ["você morreu sem motivo"];
        Ns[1] = ["você morreu de fome, como o jogo diz"];
        Ns[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
        Ns[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
        Ns[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
        Ns[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
        Ns[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
        Ns[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
        Ns[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
        Ns[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
        Ns[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
        Ns[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
        Ns[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
        Ns[13] = ["você morreu de sede. melhor beber sua própria urina."];
        Ns[14] = ["você sabia que você morre afogado? agora você sabe."];
        Ns[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
        Ns[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
        Ns[17] = ["sua pele caindo aos pedaços, o sol te matou."];
        Ns[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
        Ns[19] = ["como vampiro, não chegue perto do alho."];
        Ns[20] = ["você comeu alho como vampiro, o que você esperava?"];
        Ns[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
        ΔΔΔᐃΔ = "Uuunnnggg";
        ᐃⵠᐃΔΔⵠⵠ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
    }
    const Qg = 17;
    function _g() {
        Xg[184] = ["You feel a great power emanating from this orb"];
        Ns[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        Xg[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        Xg[328] = " BACK TO THE GAME";
        Xg[329] = " Share on Twitter";
        Xg[330] = " Share on Facebook";
        Xg[331] = "You can buy items on the shop in the next game with your points";
        Xg[332] = "points";
        Xg[333] = "Score";
        Xg[334] = "Kill";
        Xg[335] = "Days survived";
        Xg[336] = "Building method: Free. Press G to change";
        Xg[337] = "Building method: Grid. Press G to change";
        Xg[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        Xg[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        Xg[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        Xg[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        Xg[7] = ["Mano"];
        Xg[140] = ["Tierra", "¡Tan limpia como mis manos!"];
        Xg[126] = ["Arena", "¡Tengo arena en mis ojos!"];
        Xg[109] = ["Madera", "¡Nunca hay suficiente!"];
        Xg[108] = ["Piedra", "También llamada roca."];
        Xg[111] = ["Oro", "Sé generoso, compártelo con los otros"];
        Xg[112] = ["Diamante", "¿Que vas a hacer con él?"];
        Xg[121] = ["Amatista", "Es Mauve como Lapa"];
        Xg[131] = ["Harina", "Usada para cocinar."];
        Xg[133] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
        Xg[136] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
        Xg[116] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
        Xg[117] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
        Xg[137] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
        Xg[138] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
        Xg[143] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
        Xg[145] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
        Xg[200] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
        Xg[199] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
        Xg[201] = ["Guirnalda", "Perfecta para decorar el techo"];
        Xg[115] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        Xg[110] = ["Baya", "No es venenosa.", "Comida: 10"];
        Xg[132] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        Xg[134] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
        Xg[188] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        Xg[189] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
        Xg[191] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
        Xg[192] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
        Xg[193] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
        Xg[194] = ["Planta de Espinas", "¡Te daña!"];
        Xg[141] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
        Xg[142] = ["Hielo", "Bueno para hacer tartas y agua"];
        Xg[55] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
        Xg[174] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
        Xg[2] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
        Xg[178] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
        Xg[179] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
        Xg[146] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
        Xg[139] = ["Escamas", "¡Huele a pescado!"];
        Xg[129] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
        Xg[113] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
        Xg[118] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
        Xg[114] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
        Xg[161] = ["Hilo", "Usado para craftear ropa y mochila"];
        Xg[147] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
        Xg[167] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
        Xg[57] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
        Xg[0] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
        Xg[5] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
        Xg[6] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
        Xg[9] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
        Xg[30] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
        Xg[62] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
        Xg[16] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
        Xg[8] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
        Xg[1] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
        Xg[3] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
        Xg[4] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
        Xg[31] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
        Xg[35] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
        Xg[36] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
        Xg[37] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
        Xg[38] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
        Xg[45] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
        Xg[12] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
        Xg[13] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
        Xg[14] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
        Xg[15] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
        Xg[33] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
        Xg[46] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
        Xg[50] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
        Xg[51] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
        Xg[52] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
        Xg[58] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
        Xg[25] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
        Xg[26] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
        Xg[27] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
        Xg[43] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
        Xg[59] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
        Xg[23] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
        Xg[41] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
        Xg[42] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
        Xg[83] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
        Xg[10] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
        Xg[11] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
        Xg[40] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
        Xg[84] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
        Xg[85] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
        Xg[86] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
        Xg[48] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
        Xg[47] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
        Xg[185] = ["Esfera del Dragón", "Dada en la misión"];
        Xg[149] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
        Xg[175] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
        Xg[176] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
        Xg[177] = ["Gema Azul", "Para gente muy amable"];
        Xg[77] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
        Xg[78] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
        Xg[79] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
        Xg[180] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
        Xg[181] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
        Xg[127] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
        Xg[128] = ["Botella Vacia", "La puedes llenar de agua"];
        Xg[130] = ["Regadera Vacía", "La tienes que llenar de agua"];
        Xg[49] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
        Xg[29] = ["Mochila", "¡Mas espacio para tus cosas!"];
        Xg[120] = ["Hoja", "Usada para hacer un libro"];
        Xg[28] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
        Xg[195] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
        Xg[148] = ["Cerradura", "Te permite cerrar tu cofre"];
        Xg[158] = ["Llave", "Te permite abrir un cofre cerrado"];
        Xg[159] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
        Xg[125] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
        Xg[183] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
        Xg[190] = ["Techo", "Te esconde un poco y te protege del frío"];
        Xg[182] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
        Xg[162] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
        Xg[163] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
        Xg[164] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
        Xg[165] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
        Xg[122] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
        Xg[160] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
        Xg[168] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
        Xg[169] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
        Xg[170] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
        Xg[123] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
        Xg[166] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
        Xg[171] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
        Xg[172] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
        Xg[173] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
        Xg[124] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
        Xg[119] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
        Xg[135] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
        Xg[144] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
        Xg[151] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
        Xg[300] = "No puedes unirte a este servidor";
        Xg[301] = "Expulsado: ";
        Xg[302] = "Tu llave ya está usada";
        Xg[303] = "Tu llave está mal";
        Xg[304] = "Tienes una versión antigua, limpia tu cache";
        Xg[305] = "No hay mas recursos";
        Xg[306] = "Has sobrevivido 1 día";
        Xg[307] = "Has sobrevivido ";
        Xg[308] = " días";
        Xg[309] = "Estás muerto ;-;";
        Xg[310] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
        Xg[311] = "El servidor esta lleno, ¡spamea el botón de jugar!";
        Xg[312] = "Recurso vacio";
        Xg[313] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
        Xg[314] = " está muerto";
        Xg[315] = "Esta no es la herramienta correcta";
        Xg[316] = "Te has unido a un equipo";
        Xg[317] = "Estás muerto";
        Xg[318] = " se unió al equipo";
        Xg[319] = "Tu equipo ha sido destruido";
        Xg[320] = "Has dejado el equipo";
        Xg[321] = " dejo el equipo ";
        Xg[322] = "Alguien te robó tu token :>";
        Xg[323] = "Elige un servidor";
        Xg[324] = "jugadores";
        Xg[325] = "total de jugadores";
        Xg[326] = "Jugadores en este modo de juego";
        Xg[327] = "Próximamente...";
        document.getElementById("nickname_input").placeholder = "Apodo";
        Ns[0] = ["Has muerto por ninguna razón"];
        Ns[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
        Ns[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
        Ns[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
        Ns[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
        Ns[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
        Ns[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
        Ns[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
        Ns[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
        Ns[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
        Ns[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
        Ns[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
        Ns[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
        Ns[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
        Ns[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
        Ns[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
        Ns[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
        Ns[17] = ["Tu piel se cayó, el sol te quemó."];
        Ns[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
        Ns[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
        Ns[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
        Ns[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
        ΔΔΔᐃΔ = "Uuunnnggg";
        ᐃⵠᐃΔΔⵠⵠ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
    }
    function Fg() {
        Xg[184] = ["You feel a great power emanating from this orb"];
        Ns[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        Xg[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        Xg[328] = " BACK TO THE GAME";
        Xg[329] = " Share on Twitter";
        Xg[330] = " Share on Facebook";
        Xg[331] = "You can buy items on the shop in the next game with your points";
        Xg[332] = "points";
        Xg[333] = "Score";
        Xg[334] = "Kill";
        Xg[335] = "Days survived";
        Xg[336] = "Building method: Free. Press G to change";
        Xg[337] = "Building method: Grid. Press G to change";
        Xg[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        Xg[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        Xg[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        Xg[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        Xg[7] = ["Hand"];
        Xg[140] = ["Boden", "Dreckig!"];
        Xg[126] = ["Sand", "Ich habe es in meine Augen bekommen!"];
        Xg[109] = ["Holz", "Du kannst niemals zu viel haben!"];
        Xg[108] = ["Stein", "Auch Fels gennant"];
        Xg[111] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
        Xg[112] = ["Diamant", "Was wirst du daraus machen?"];
        Xg[121] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
        Xg[131] = ["Mehl", "wird fürs Backen gebraucht"];
        Xg[133] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
        Xg[136] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
        Xg[116] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
        Xg[117] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
        Xg[137] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
        Xg[138] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
        Xg[143] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
        Xg[145] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
        Xg[200] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
        Xg[199] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
        Xg[201] = ["Girlande", "perfekter Schmuck für Dächer"];
        Xg[115] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        Xg[110] = ["Beere", "Beeren lecker!", "Essen: 10"];
        Xg[132] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        Xg[134] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
        Xg[188] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        Xg[189] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
        Xg[191] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        Xg[192] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
        Xg[193] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
        Xg[194] = ["Dornenbusch", "Es sticht!"];
        Xg[141] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
        Xg[142] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
        Xg[55] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
        Xg[174] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
        Xg[2] = ["Hasenfell", "Der Hase war so süß..."];
        Xg[178] = ["Klares Fell", "Du bist eine Brotfabrik"];
        Xg[179] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
        Xg[146] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
        Xg[139] = ["Schuppen", "Es riecht wie Fisch!"];
        Xg[129] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
        Xg[113] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
        Xg[118] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
        Xg[114] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
        Xg[161] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
        Xg[147] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
        Xg[167] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
        Xg[57] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
        Xg[0] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
        Xg[5] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
        Xg[6] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
        Xg[9] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
        Xg[30] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
        Xg[62] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
        Xg[16] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
        Xg[8] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
        Xg[1] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
        Xg[3] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
        Xg[4] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
        Xg[31] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
        Xg[35] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
        Xg[36] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
        Xg[37] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
        Xg[38] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
        Xg[45] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
        Xg[12] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
        Xg[13] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
        Xg[14] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
        Xg[15] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
        Xg[33] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
        Xg[46] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
        Xg[50] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
        Xg[51] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
        Xg[52] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
        Xg[58] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
        Xg[25] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
        Xg[26] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
        Xg[27] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
        Xg[43] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
        Xg[59] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
        Xg[23] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
        Xg[41] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
        Xg[42] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
        Xg[83] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
        Xg[10] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
        Xg[11] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
        Xg[40] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
        Xg[84] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
        Xg[85] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
        Xg[86] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
        Xg[48] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
        Xg[47] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        Xg[185] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
        Xg[149] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
        Xg[175] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
        Xg[176] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
        Xg[177] = ["Blauer Edelstein", "Für sehr nette Leute"];
        Xg[77] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        Xg[78] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        Xg[79] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        Xg[180] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
        Xg[181] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
        Xg[127] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
        Xg[128] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
        Xg[130] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
        Xg[49] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
        Xg[29] = ["Rucksack", "Mehr Platz im Inventar!"];
        Xg[120] = ["Papier", "Wird fürs Büchermachen verwendet"];
        Xg[28] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
        Xg[195] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
        Xg[148] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
        Xg[158] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
        Xg[159] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
        Xg[125] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
        Xg[183] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
        Xg[190] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
        Xg[182] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
        Xg[162] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
        Xg[163] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
        Xg[164] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
        Xg[165] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
        Xg[122] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
        Xg[160] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
        Xg[168] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
        Xg[169] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
        Xg[170] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
        Xg[123] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
        Xg[166] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
        Xg[171] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
        Xg[172] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
        Xg[173] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
        Xg[124] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
        Xg[119] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
        Xg[135] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
        Xg[144] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
        Xg[151] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
        Xg[300] = "Du kannst diesem Server nicht beitreten";
        Xg[301] = "Gekickt: ";
        Xg[302] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
        Xg[303] = "Dein Schlüssel ist falsch";
        Xg[304] = "Deine Version ist veraltet, säubere dein Cache";
        Xg[305] = "Es gibt keine neuen Ressourcen";
        Xg[306] = "Du hast einen Tag überlebt";
        Xg[307] = "Du hast überlebt ";
        Xg[308] = " Tage";
        Xg[309] = "Du bist gestorben ;-;";
        Xg[310] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
        Xg[311] = "Server ist voll! Drücke immer wieder auf spielen!";
        Xg[312] = "Ressource ist leer";
        Xg[313] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
        Xg[314] = " ist gestorben";
        Xg[315] = "Das ist nicht das richtige Werkzeug";
        Xg[316] = "Du bist einem Team beigetreten";
        Xg[317] = "Du bist gestorben";
        Xg[318] = " ist dem Team beigetreten";
        Xg[319] = "Dein Team wurde zerstört";
        Xg[320] = "Du hast das Team verlassen";
        Xg[321] = " hat das Team verlassen";
        Xg[322] = "Jemand hat dein Token gestohlen :>";
        Xg[323] = "Suche dir ein Server aus";
        Xg[324] = "Spieler";
        Xg[325] = "alle Spieler";
        Xg[326] = "Spieler in diesem Modus";
        Xg[327] = "Bald verfügbar...";
        document.getElementById("nickname_input").placeholder = "Spitzname";
        Ns[0] = ["Du wurdest ohne Grund getötet"];
        Ns[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
        Ns[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
        Ns[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
        Ns[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
        Ns[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
        Ns[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
        Ns[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
        Ns[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
        Ns[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
        Ns[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
        Ns[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
        Ns[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
        Ns[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
        Ns[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
        Ns[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
        Ns[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
        Ns[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
        Ns[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
        Ns[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
        Ns[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
        Ns[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
        ΔΔΔᐃΔ = "Uuunnnggg";
        ᐃⵠᐃΔΔⵠⵠ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
    }
    const Rg = 13;
    const jg = 18;
    const Gg = 100;
    function Wg() {
        Xg[184] = ["You feel a great power emanating from this orb"];
        Ns[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        Xg[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        Xg[328] = " BACK TO THE GAME";
        Xg[329] = " Share on Twitter";
        Xg[330] = " Share on Facebook";
        Xg[331] = "You can buy items on the shop in the next game with your points";
        Xg[332] = "points";
        Xg[333] = "Score";
        Xg[334] = "Kill";
        Xg[335] = "Days survived";
        Xg[336] = "Building method: Free. Press G to change";
        Xg[337] = "Building method: Grid. Press G to change";
        Xg[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        Xg[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        Xg[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        Xg[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        Xg[7] = ["Ręka"];
        Xg[140] = ["Ziemia", "Brudna!"];
        Xg[126] = ["Piasek", "Mam go w oczach!"];
        Xg[109] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
        Xg[108] = ["Kamień", "Także nazywany skałą"];
        Xg[111] = ["Złoto", "Bądź hojny, daj trochę innym"];
        Xg[112] = ["Diament", "Co z nim zrobisz?"];
        Xg[121] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
        Xg[131] = ["Mąka", "Używana w gotowaniu"];
        Xg[133] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
        Xg[136] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
        Xg[116] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
        Xg[117] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
        Xg[137] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
        Xg[138] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
        Xg[143] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
        Xg[145] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
        Xg[200] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
        Xg[199] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
        Xg[201] = ["Girlanda", "Idealna do dekorowania dachów"];
        Xg[115] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        Xg[110] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
        Xg[132] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        Xg[134] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
        Xg[188] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        Xg[189] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
        Xg[191] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        Xg[192] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
        Xg[193] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
        Xg[194] = ["Kolczasty krzew", "Kłuje!"];
        Xg[141] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
        Xg[142] = ["Lód", "Użyteczny do robienia ciast i wody"];
        Xg[55] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
        Xg[174] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
        Xg[2] = ["Skóra królika", "Ten królik był taki słodziutki..."];
        Xg[178] = ["Skóra", "Jesteś fabryką chleba"];
        Xg[179] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
        Xg[146] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
        Xg[139] = ["Łuski", "Pachnie jak ryba!"];
        Xg[129] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
        Xg[113] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
        Xg[118] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
        Xg[114] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
        Xg[161] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
        Xg[147] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
        Xg[167] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
        Xg[57] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
        Xg[0] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
        Xg[5] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
        Xg[6] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
        Xg[9] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
        Xg[30] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
        Xg[62] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
        Xg[16] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
        Xg[8] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
        Xg[1] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
        Xg[3] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
        Xg[4] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
        Xg[31] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
        Xg[35] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
        Xg[36] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
        Xg[37] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
        Xg[38] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
        Xg[45] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
        Xg[12] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
        Xg[13] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
        Xg[14] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
        Xg[15] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
        Xg[33] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
        Xg[46] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
        Xg[50] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
        Xg[51] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
        Xg[52] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
        Xg[58] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
        Xg[25] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
        Xg[26] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
        Xg[27] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
        Xg[43] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
        Xg[59] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
        Xg[23] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
        Xg[41] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
        Xg[42] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
        Xg[83] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
        Xg[10] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
        Xg[11] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
        Xg[40] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
        Xg[84] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
        Xg[85] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
        Xg[86] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
        Xg[48] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
        Xg[47] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        Xg[185] = ["Smocza kula", "Zdobyta podczas zadania"];
        Xg[149] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
        Xg[175] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
        Xg[176] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
        Xg[177] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
        Xg[77] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        Xg[78] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        Xg[79] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        Xg[180] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
        Xg[181] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
        Xg[127] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
        Xg[128] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
        Xg[130] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
        Xg[49] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
        Xg[29] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
        Xg[120] = ["Papier", "Używany w tworzeniu książki"];
        Xg[28] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
        Xg[195] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
        Xg[148] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
        Xg[158] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
        Xg[159] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
        Xg[125] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
        Xg[183] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
        Xg[190] = ["Dach", "Trochę cie ogrzewa i chowa!"];
        Xg[182] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
        Xg[162] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
        Xg[163] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
        Xg[164] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
        Xg[165] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
        Xg[122] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
        Xg[160] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
        Xg[168] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
        Xg[169] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
        Xg[170] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
        Xg[123] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
        Xg[166] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
        Xg[171] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
        Xg[172] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
        Xg[173] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
        Xg[124] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
        Xg[119] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
        Xg[135] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
        Xg[144] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
        Xg[151] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
        Xg[300] = "Nie możesz dołączyć do tego serwera";
        Xg[301] = "Wyrzucony: ";
        Xg[302] = "Twój klucz jest aktualnie używany przez innego gracza";
        Xg[303] = "Twój klucz jest nieprawidłowy";
        Xg[304] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
        Xg[305] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
        Xg[306] = "Przeżyłeś 1 dzień";
        Xg[307] = "Przeżyłeś ";
        Xg[308] = " dni";
        Xg[309] = "Jesteś martwy ;-;";
        Xg[310] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
        Xg[311] = "Serwer jest pełny! Spamuj przycisk zagraj!";
        Xg[312] = "Źródło jest puste";
        Xg[313] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
        Xg[314] = " jest martwy";
        Xg[315] = "To nie jest właściwe narzędzie";
        Xg[316] = "Dołączyłeś do drużyny";
        Xg[317] = "Jesteś martwy";
        Xg[318] = " dołączył do drużyny";
        Xg[319] = "Twoja drużyna została zniszczona";
        Xg[320] = " Opuściłeś drużynę";
        Xg[321] = " opuścił drużynę";
        Xg[322] = "Ktoś ukradł twój żeton :>";
        Xg[323] = "Wybierz serwer";
        Xg[324] = "graczy";
        Xg[325] = "wszystkich graczy";
        Xg[326] = "graczy w tym trybie";
        Xg[327] = "Już wkrótce...";
        document.getElementById("nickname_input").placeholder = "Przydomek";
        Ns[0] = ["Zostałeś zabity bez powodu"];
        Ns[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
        Ns[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
        Ns[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
        Ns[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
        Ns[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
        Ns[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
        Ns[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
        Ns[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
        Ns[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
        Ns[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
        Ns[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
        Ns[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
        Ns[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
        Ns[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
        Ns[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
        Ns[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
        Ns[17] = ["Twoja skóra odpada, słońce cię zabija."];
        Ns[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
        Ns[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
        Ns[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
        Ns[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
        ΔΔΔᐃΔ = "Uuunnnggg";
        ᐃⵠᐃΔΔⵠⵠ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
    }
    const Lg = 18;
    const Og = Zk;
    const Ng = 15;
    function Hg(b, c, d, e, f, g) {
        const a = (16 << (b & 255)) + (0 << (b >> 16 & 255)) + (8 << (b >> 8 & 255)) + (24 << (b >> 24 & 255));
        const i = (f + 35607) % 65530;
        const j = g ^ 56285;
        return ((16746 + (Uw(a, (c | 51076) & ~(c & 51076), ~(d & 5276) & 5276 | ~(d & 5276) & d, ((36195 + e) * 214013 + 2531011) % 4294967296) ^ Pg(i, j, a))) * 1664525 + 1013904223) % 4294967296;
    }
    const qg = 9;
    const Ug = 13;
    function Yg() {
        Xg[184] = ["You feel a great power emanating from this orb"];
        Ns[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        Xg[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        Xg[328] = " RETOUR AU JEU";
        Xg[329] = " Partage sur Twitter";
        Xg[330] = " Partage sur Facebook";
        Xg[331] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
        Xg[332] = "points";
        Xg[333] = "Score";
        Xg[334] = "Tués";
        Xg[335] = "Jours survécus";
        Xg[336] = "Mode de construction: Libre. Appuie sur G pour changer";
        Xg[337] = "Mode de construction: Grille. Appuie sur G pour changer";
        Xg[197] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
        Xg[18] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
        Xg[61] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
        Xg[198] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quêtes";
        document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
        document.getElementById("constraintquest").innerHTML = " Contraintes";
        document.getElementById("claim_rewards").innerHTML = " Résultat";
        document.getElementById("rewardquest").innerHTML = " Récompenses";
        document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
        document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
        document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
        document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
        document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
        document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
        document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "RÉCOMPENSE!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
        Xg[7] = ["Main"];
        Xg[140] = ["Terre", "C'est sale!"];
        Xg[126] = ["Sable", "J'en ai dans les yeux"];
        Xg[109] = ["Bois", "Tu n'en auras jamais trop!"];
        Xg[108] = ["Pierre", "Aussi appelée roche"];
        Xg[111] = ["Or", "Sois généreux, donne en aux autres"];
        Xg[112] = ["Diamant", "Comme tes yeux! wesh"];
        Xg[121] = ["Améthyste", "C'est Mauve comme Lapa"];
        Xg[131] = ["Farine", "Utile pour la cuisine"];
        Xg[133] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
        Xg[136] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
        Xg[116] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
        Xg[117] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
        Xg[137] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
        Xg[138] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
        Xg[143] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
        Xg[145] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
        Xg[200] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
        Xg[199] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
        Xg[201] = ["Guirlandes", "Utilisable sur les toits"];
        Xg[115] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
        Xg[110] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
        Xg[132] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
        Xg[134] = ["Blé", "Peut être transformé en farine dans les moulins"];
        Xg[188] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
        Xg[189] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
        Xg[191] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
        Xg[192] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
        Xg[193] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
        Xg[194] = ["Ronces", "Ça pique!"];
        Xg[141] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
        Xg[142] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
        Xg[55] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
        Xg[174] = ["Peau de loup", "Il était où le gentil ti Youki?"];
        Xg[2] = ["Peau de lapin", "Vous êtes un monstre"];
        Xg[178] = ["Fourrure blanche", "Tu es une usine à pain"];
        Xg[179] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
        Xg[146] = ["Fourrure d'hiver", "Il voulait juste un calin"];
        Xg[139] = ["Écailles", "Ça sent le poisson!"];
        Xg[129] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
        Xg[113] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
        Xg[118] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
        Xg[114] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
        Xg[161] = ["Fil", "Utile pour faire des chapeaux et un sac"];
        Xg[147] = ["Fil de diamant", "Utile pour faire des chapeaux"];
        Xg[167] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
        Xg[57] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
        Xg[0] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
        Xg[5] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
        Xg[6] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
        Xg[9] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
        Xg[30] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
        Xg[62] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
        Xg[16] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
        Xg[8] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
        Xg[1] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
        Xg[3] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
        Xg[4] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
        Xg[31] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
        Xg[35] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
        Xg[36] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
        Xg[37] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
        Xg[38] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
        Xg[45] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
        Xg[12] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
        Xg[13] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
        Xg[14] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
        Xg[15] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
        Xg[33] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
        Xg[46] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
        Xg[50] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
        Xg[51] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
        Xg[52] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
        Xg[58] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
        Xg[25] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
        Xg[26] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
        Xg[27] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
        Xg[43] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
        Xg[59] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
        Xg[23] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Xg[41] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Xg[42] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Xg[83] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Xg[10] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Xg[11] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Xg[40] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
        Xg[84] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Xg[85] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Xg[86] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Xg[48] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
        Xg[47] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
        Xg[185] = ["Orbe du Dragon", "Donné en Quête"];
        Xg[149] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
        Xg[175] = ["Gemme verte", "Tu n'as pas triché, promis?"];
        Xg[176] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
        Xg[177] = ["Gemme bleue", "Pour les gens trop gentils"];
        Xg[77] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
        Xg[78] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
        Xg[79] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
        Xg[180] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
        Xg[181] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
        Xg[127] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
        Xg[128] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
        Xg[130] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
        Xg[49] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
        Xg[29] = ["Sac", "Plus de place dans ton inventaire!"];
        Xg[120] = ["Papier", "Pour fabriquer toute sorte d'objets"];
        Xg[28] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
        Xg[195] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
        Xg[148] = ["Cadenas", "Pour verrouiller un coffre"];
        Xg[158] = ["Clé", "Pour déverrouiller un coffre"];
        Xg[159] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
        Xg[125] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
        Xg[183] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
        Xg[190] = ["Toit", "Te cache un peu et te réchauffe"];
        Xg[182] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
        Xg[162] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
        Xg[163] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
        Xg[164] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
        Xg[165] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
        Xg[122] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
        Xg[160] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
        Xg[168] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
        Xg[169] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
        Xg[170] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
        Xg[123] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
        Xg[166] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
        Xg[171] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
        Xg[172] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
        Xg[173] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
        Xg[124] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
        Xg[119] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
        Xg[135] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
        Xg[144] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
        Xg[151] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
        Xg[300] = "Tu ne peux pas rejoindre le serveur";
        Xg[301] = "Expulsé: ";
        Xg[302] = "Ta clé est déjà utilisée par quelqu'un d'autre";
        Xg[303] = "Ta clé est fausse";
        Xg[304] = "Tu as une vieille version, rafraichis tes caches";
        Xg[305] = "Il n'y a plus de nouvelles ressources";
        Xg[306] = "Tu as survécu 1 jour";
        Xg[307] = "Tu as survécu ";
        Xg[308] = " jours";
        Xg[309] = "Tu es mort ;-;";
        Xg[310] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
        Xg[311] = "Le serveur est complet! Spam le bouton jouer";
        Xg[312] = "Cette ressource est vide";
        Xg[313] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
        Xg[314] = " est mort";
        Xg[315] = "Ce n'est pas le bon outil";
        Xg[316] = "Tu as rejoins une équipe";
        Xg[317] = "Tu es mort";
        Xg[318] = " a rejoint l'équipe";
        Xg[319] = "Ton équipe a été détruite";
        Xg[320] = "Tu as quitté l'équipe";
        Xg[321] = " a quitté l'équipe";
        Xg[322] = "Quelqu'un a volé ton token :>";
        Xg[323] = "Choisis un serveur";
        Xg[324] = "joueurs";
        Xg[325] = "joueurs";
        Xg[326] = "joueurs dans ce mode";
        Xg[327] = "Bientôt...";
        document.getElementById("nickname_input").placeholder = "Surnom";
        Ns[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
        Ns[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
        Ns[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
        Ns[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
        Ns[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
        Ns[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
        Ns[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
        Ns[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
        Ns[8] = ["Cet ours voulait juste un câlin."];
        Ns[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
        Ns[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
        Ns[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
        Ns[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
        Ns[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
        Ns[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
        Ns[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
        Ns[16] = ["Un kraken a 'kraké' tes os."];
        Ns[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
        Ns[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
        Ns[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
        Ns[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
        Ns[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
        ΔΔΔᐃΔ = "Uuunnnggg";
        ᐃⵠᐃΔΔⵠⵠ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
    }
    function Kg(b, c, d, e, f) {
        const g = ~(b & 37422) & 37422 | ~(b & 37422) & b;
        const a = ((c + 57377) * 1103515245 + 12345) % 2147483648;
        const i = d ^ 41427;
        const j = ~(e & 9607) & e | ~(e & 9607) & 9607;
        const h = (0 << (f >> 24 & 255)) + (16 << (f & 255)) + (24 << (f >> 8 & 255)) + (8 << (f >> 16 & 255));
        return (50500 + (Bg(g, 0, i, j, h) ^ Dn(a, i, j, h, g))) % 65340;
    }
    function Vg(b, c, d, e, f, i) {
        Se(Tu, b, c, d, e, f, i);
        j = Cc[0];
        k = Cc[1];
        m = Cc[2];
        n = Cc[3];
        Oe(Tu, j, k, m, n);
        const a = ((129 + (jm(Cc[0], Cc[1], Cc[2], Cc[3], Cc[0]) ^ Mn(Cc[1], Cc[2], Cc[3], Cc[0]))) * 75 + 74) % 65537;
        var j;
        var k;
        var m;
        var n;
        const o = yc(Cc[4], Cc[5], Cc[0], Cc[1], Cc[2]);
        return (24 << ((a ^ o) & 255)) + (8 << ((a ^ o) >> 16 & 255)) + (16 << ((a ^ o) >> 24 & 255)) + (0 << ((a ^ o) >> 8 & 255));
    }
    var Xg = [];
    const Zg = 100;
    for (var $g = 0; $g < 344; $g++) {
        Xg[$g] = "";
    }
    var Ns = [];
    const Os = 5;
    $(".md-languages").on("click", function () {
        $(this).toggleClass("active");
    });
    const Ps = 16;
    $(".md-languages ul li").on("click", function () {
        var a = $(this).text();
        if (a === "English") {
            yg();
        } else if (a === "Français") {
            Yg();
        } else if (a === "Deutsch") {
            Fg();
        } else if (a === "Español") {
            _g();
        } else if (a === "Português") {
            Sg();
        } else if (a === "Русский") {
            Eg();
        } else if (a === "Polski") {
            Wg();
        }
        ⲆΔΔⵠⵠ = [];
        Yw.ⲆⵠᐃΔ.label = [];
        $(".md-languages ul li").removeClass("active");
        $(this).addClass("active");
        $(".md-languages label button").text(a);
    });
    Pq = "EN";
    var Qs = navigator.language || navigator.userLanguage;
    const Rs = 3;
    const Ss = 7;
    switch (Qs) {
        case "ru":
            Pq = "RU";
            break;
        case "en":
            Pq = "EN";
            break;
        case "es":
            Pq = "SP";
            break;
        case "fr":
            Pq = "FR";
            break;
        case "pl":
            Pq = "PL";
            break;
        case "de":
            Pq = "DE";
            break;
        case "pt":
            Pq = "PT";
    }
    var Ts;
    const Us = 20;
    const Vs = 8;
    if (Pq === "FR") {
        $(".md-languages label button").text("Français");
        Ts = Yg;
    } else if (Pq === "PL") {
        $(".md-languages label button").text("Polski");
        Ts = Wg;
    } else if (Pq === "PT") {
        $(".md-languages label button").text("Português");
        Ts = Sg;
    } else if (Pq === "SP") {
        $(".md-languages label button").text("Español");
        Ts = _g;
    } else if (Pq === "RU") {
        $(".md-languages label button").text("Русский");
        Ts = Eg;
    } else if (Pq === "DE") {
        $(".md-languages label button").text("Deutsch");
        Ts = Fg;
    } else {
        $(".md-languages label button").text("English");
        Ts = yg;
    }
    ⲆⲆ = {
        ⲆᐃᐃⵠⲆⵠΔᐃⵠ: "img/logo.png",
        ⵠⵠⵠⵠⲆⲆⵠ: "img/mapday.png",
        ⵠΔⲆⲆΔΔⵠ: "img/mapnight.png",
        ᐃⵠᐃⲆΔⲆΔᐃᐃ: "img/bigzday.png",
        ⵠⵠⵠΔⵠⲆⲆᐃⵠ: "img/bigznight.png",
        ΔⲆᐃΔΔⲆᐃ: "img/bigday-river1.png",
        ΔⵠᐃΔⵠΔⵠⵠᐃ: "img/bigday-lake.png",
        ΔᐃⲆᐃΔⲆⵠ: "img/bigday-berry.png",
        ᐃⲆⵠΔⵠᐃⵠ: "img/bigday-stone1.png",
        ⵠⲆᐃᐃⵠⲆΔ: "img/bigday-stone2.png",
        ᐃⲆΔⵠⵠⲆΔ: "img/bigday-gold1.png",
        ⵠⵠⲆⵠⵠⲆΔ: "img/bigday-gold2.png",
        ᐃⲆⲆᐃᐃᐃΔ: "img/bigday-emerald1.png",
        ⵠᐃΔᐃᐃΔⲆ: "img/bigday-emerald2.png",
        ΔᐃΔⲆⵠΔΔ: "img/bigday-amethyst.png",
        ⲆΔⵠᐃΔⲆᐃ: "img/bigday-bear.png",
        ᐃᐃΔⲆⵠΔΔ: "img/bigday-cave.png",
        ᐃΔΔᐃⵠΔⵠ: "img/bigday-diamond.png",
        ᐃⵠΔⲆΔⲆⲆ: "img/bigday-island.png",
        ⲆⵠΔΔⵠΔΔ: "img/bigday-reidite.png",
        ⲆⵠΔⲆΔⲆⲆ: "img/bigday-spider.png",
        ⲆⵠᐃⵠⵠⲆᐃ: "img/bigday-wolf.png",
        ᐃⵠᐃⵠⲆⲆⵠ: "img/bigday-fir-tree.png",
        ᐃᐃΔⲆⵠᐃΔ: "img/bigday-fox.png",
        ⵠⵠⵠᐃΔⵠⵠ: "img/bigday-kraken.png",
        ⵠΔΔⲆᐃⵠΔ: "img/bigday-piranha.png",
        ⲆⲆΔⲆΔᐃⲆ: "img/bigday-cactus.png",
        ᐃᐃᐃΔΔⲆᐃ: "img/bigday-magma.png",
        ⲆΔⲆᐃⲆΔⵠ: "img/bigday-river1.png",
        ⵠΔΔΔᐃᐃⵠᐃⵠ: "img/bignight-lake.png",
        ⵠⵠⲆⲆⲆᐃⵠΔᐃ: "img/bignight-berry.png",
        Δⵠᐃᐃⵠᐃⵠ: "img/bignight-stone1.png",
        ᐃᐃⲆⵠΔᐃⵠ: "img/bignight-stone2.png",
        ᐃΔΔⵠᐃⲆⵠ: "img/bignight-gold1.png",
        ⵠⲆΔⵠⵠΔᐃ: "img/bignight-gold2.png",
        ΔⲆⵠⲆΔⲆⵠ: "img/bignight-emerald1.png",
        ΔⲆΔⲆⲆΔᐃ: "img/bignight-emerald2.png",
        ⵠⵠⵠᐃⲆᐃⲆ: "img/bignight-amethyst.png",
        ⲆΔᐃᐃⵠⲆⵠ: "img/bignight-bear.png",
        ΔⲆΔᐃⵠΔⲆ: "img/bignight-cave.png",
        ᐃᐃΔᐃΔᐃⵠ: "img/bignight-diamond.png",
        ⵠⵠᐃΔᐃΔᐃ: "img/bignight-island.png",
        ᐃⵠⵠΔⲆⵠⵠ: "img/bignight-reidite.png",
        ⲆᐃΔᐃⵠΔⵠ: "img/bignight-spider.png",
        ⵠΔⵠⵠᐃⵠᐃ: "img/bignight-wolf.png",
        ΔⲆᐃⲆⲆᐃᐃ: "img/bignight-fir-tree.png",
        ΔΔⵠΔⵠⲆΔ: "img/bignight-fox.png",
        ⵠⵠⲆᐃΔᐃⲆ: "img/bignight-kraken.png",
        ⲆΔΔⵠᐃⲆⵠ: "img/bignight-piranha.png",
        ⲆΔⵠⵠⵠⵠΔ: "img/bignight-cactus.png",
        ⵠⲆᐃⵠⲆᐃⲆ: "img/bignight-magma.png",
        ⵠⲆΔⲆⵠⵠᐃ: "img/bigday-desert.png",
        ⵠⲆⲆⲆᐃⵠⲆ: "img/bigday-winter.png",
        ⲆᐃΔᐃⵠᐃΔ: "img/bigday-lava.png",
        ⲆᐃⲆⵠΔⲆΔ: "img/bigday-forest.png",
        ⲆⵠⲆⲆⵠᐃᐃ: "img/bignight-desert.png",
        ΔΔᐃᐃⲆⵠⲆ: "img/bignight-winter.png",
        ⲆΔΔⲆⲆⲆⲆ: "img/bignight-lava.png",
        ⲆⵠⲆᐃⲆᐃⲆ: "img/bignight-forest.png",
        ⵠⵠⲆⲆⲆⵠᐃ: "img/day-river-wave.png",
        ⲆⲆᐃΔⵠΔⲆ: "img/night-river-wave.png",
        ⵠΔⵠⲆᐃⲆΔ: "img/day-fog0.png",
        ΔΔⵠᐃⲆᐃᐃ: "img/day-fog1.png",
        ⵠⲆⵠᐃⵠⲆᐃ: "img/day-fog2.png",
        ᐃΔᐃⲆΔᐃⲆ: "img/night-fog0.png",
        ⲆᐃᐃΔΔⲆⵠ: "img/night-fog1.png",
        ⲆΔΔⲆⲆᐃΔ: "img/night-fog2.png",
        ⵠⲆⵠᐃΔᐃΔ: "img/day-fogdesert0.png",
        ⵠⲆΔⲆᐃⵠᐃ: "img/day-fogdesert1.png",
        ΔⲆᐃΔⵠⵠΔ: "img/day-fogdesert2.png",
        ᐃᐃΔΔⵠᐃⲆ: "img/night-fogdesert0.png",
        ⵠΔⵠⲆᐃⵠⲆ: "img/night-fogdesert1.png",
        ᐃᐃⲆΔΔⲆⵠ: "img/night-fogdesert2.png",
        ⵠΔΔᐃⵠⵠⲆ: "img/day-cross-server.png",
        ⵠⲆΔΔΔᐃΔ: "img/day-here-server.png",
        ⲆⵠΔⵠΔᐃᐃ: "img/day-finish-server.png",
        ΔΔⲆΔΔᐃΔ: "img/day-item-server.png",
        ⲆⲆΔⵠⲆⵠⲆ: "img/day-skull-server.png",
        ⵠΔⵠᐃⲆΔΔ: "img/night-cross-server.png",
        ⵠⲆΔΔⵠΔⵠ: "img/night-here-server.png",
        ᐃⲆᐃΔΔⲆⲆ: "img/night-finish-server.png",
        ⵠᐃⵠⵠⵠᐃⲆ: "img/night-item-server.png",
        ΔᐃⲆΔⲆⵠᐃ: "img/night-skull-server.png",
        ΔᐃᐃΔΔᐃᐃ: "img/day-reidite0.png",
        ⵠⵠⵠⵠᐃΔΔ: "img/night-reidite0.png",
        ΔᐃᐃⲆᐃⲆⵠ: "img/day-reidite1.png",
        ⲆᐃᐃΔⲆⵠⲆ: "img/night-reidite1.png",
        ⵠⵠⵠΔⲆᐃᐃ: "img/day-reidite2.png",
        ᐃⲆⲆⲆΔⵠᐃ: "img/night-reidite2.png",
        ⲆⵠⲆᐃⲆΔⲆ: "img/day-lava1.png",
        ᐃⵠⲆᐃⲆⲆΔ: "img/night-lava1.png",
        ⵠⲆᐃΔⲆᐃⵠ: "img/day-lava2.png",
        ⵠⲆΔΔᐃⲆΔ: "img/night-lava2.png",
        ᐃⵠⵠⵠⲆⲆⵠ: "img/day-lava3.png",
        ᐃⲆⵠᐃᐃᐃⵠ: "img/night-lava3.png",
        ⲆⲆⵠΔᐃΔΔ: "img/day-lava4.png",
        ⵠⲆΔΔⲆⵠΔ: "img/night-lava4.png",
        ᐃΔᐃᐃⲆᐃⲆ: "img/day-lava5.png",
        ΔᐃⵠⵠΔᐃᐃ: "img/night-lava5.png",
        ⲆΔΔΔΔⵠᐃ: "img/day-lava6.png",
        ⲆⲆΔⵠΔⲆⵠ: "img/night-lava6.png",
        ΔΔΔᐃΔΔΔ: "img/day-lava-ground1.png",
        ⲆΔⵠΔᐃΔᐃ: "img/night-lava-ground1.png",
        ΔΔⲆⵠⵠⵠᐃ: "img/day-lava-ground2.png",
        ⵠᐃⲆΔⵠᐃᐃ: "img/night-lava-ground2.png",
        ⵠⵠᐃᐃⲆᐃⵠ: "img/day-lava-ground3.png",
        ᐃⲆᐃⵠⲆᐃΔ: "img/night-lava-ground3.png",
        ⵠᐃⲆᐃⲆⵠΔ: "img/day-lava-ground4.png",
        ᐃΔⵠⲆΔⲆⵠ: "img/night-lava-ground4.png",
        ⲆⲆⲆᐃⵠᐃΔ: "img/day-lava-ground5.png",
        ⲆᐃⵠΔⲆⵠΔ: "img/night-lava-ground5.png",
        ⲆᐃᐃⲆⵠᐃⲆ: "img/day-lava-ground6.png",
        ᐃΔⲆΔⵠⵠᐃ: "img/night-lava-ground6.png",
        ⵠⲆᐃᐃⲆⲆᐃ: "img/day-fire-mob.png",
        ⲆΔᐃⵠⲆⲆⵠ: "img/night-fire-mob.png",
        ᐃᐃΔᐃᐃΔΔ: "img/hurt-fire-mob.png",
        ⲆᐃΔⵠᐃᐃⲆ: "img/day-diamond-protection.png",
        ᐃᐃΔΔⵠΔⵠ: "img/night-diamond-protection.png",
        ΔⲆΔΔᐃᐃΔ: "img/day-hand-diamond-protection.png",
        ⲆⲆΔⲆΔⵠΔ: "img/night-hand-diamond-protection.png",
        ΔᐃΔᐃᐃⲆΔ: "img/inv-diamond-protection-out.png",
        ⵠᐃΔΔΔⵠΔ: "img/inv-diamond-protection-in.png",
        ΔⵠⵠⵠΔⵠⵠ: "img/inv-diamond-protection-click.png",
        ᐃᐃⲆΔᐃⵠⲆ: "img/day-amethyst-protection.png",
        ᐃⵠⵠⵠΔⵠⲆ: "img/night-amethyst-protection.png",
        ⵠΔⲆⵠᐃⵠᐃᐃⵠ: "img/day-hand-amethyst-protection.png",
        ⵠΔⵠⵠⵠΔΔⲆᐃ: "img/night-hand-amethyst-protection.png",
        ⲆⲆΔⲆᐃⲆⲆ: "img/inv-amethyst-protection-out.png",
        ᐃⵠΔⲆᐃᐃⵠ: "img/inv-amethyst-protection-in.png",
        ᐃⵠⲆⵠⵠⵠⲆ: "img/inv-amethyst-protection-click.png",
        ⲆΔⲆⵠΔⲆᐃ: "img/day-reidite-sword.png",
        ΔⵠⵠᐃⵠⲆⲆ: "img/night-reidite-sword.png",
        ⵠᐃⵠⵠΔᐃΔ: "img/inv-reidite-sword-out.png",
        ⲆⲆⵠᐃⵠⲆᐃ: "img/inv-reidite-sword-in.png",
        ᐃᐃᐃΔΔⵠⲆ: "img/inv-reidite-sword-click.png",
        ⲆᐃⲆᐃᐃᐃⵠ: "img/inv-reidite-out.png",
        ⵠᐃⲆᐃⵠᐃⲆ: "img/inv-reidite-in.png",
        ⲆⵠᐃⲆⵠᐃⲆ: "img/inv-reidite-click.png",
        ΔⲆΔⲆΔᐃᐃ: "img/inv-flame-out.png",
        ᐃⵠᐃᐃᐃⵠⲆ: "img/inv-flame-in.png",
        ᐃΔⵠΔΔΔΔ: "img/inv-flame-click.png",
        ⵠⵠΔⲆΔⵠⵠ: "img/day-magma-buble0.png",
        ᐃⲆΔᐃᐃᐃΔ: "img/night-magma-buble0.png",
        ⵠΔⲆᐃᐃᐃⲆ: "img/day-magma-buble1.png",
        ΔΔΔᐃΔⵠⲆ: "img/night-magma-buble1.png",
        ᐃΔⵠΔᐃⲆᐃ: "img/day-magma-buble2.png",
        ⵠⵠⲆⲆⵠⵠⵠ: "img/night-magma-buble2.png",
        ΔⲆⲆⵠⲆΔⲆ: "img/day-lava-dragon.png",
        ΔⲆⵠᐃᐃⲆΔ: "img/night-lava-dragon.png",
        ⵠᐃΔⲆⲆⲆᐃⵠᐃ: "img/day-fire-dragon.png",
        ᐃⲆⵠⲆⲆⵠⵠΔⲆ: "img/night-fire-dragon.png",
        ⲆⵠⵠΔⲆⲆⵠ: "img/hurt-lava-dragon.png",
        ⲆⲆΔᐃΔΔⵠ: "img/day-lava-wing-left.png",
        ⵠΔΔⵠᐃⲆⲆ: "img/night-lava-wing-left.png",
        ⲆⵠΔⵠᐃΔⵠ: "img/day-lava-wing-right.png",
        ⲆⵠΔⵠⵠⵠᐃ: "img/night-lava-wing-right.png",
        ΔΔⲆᐃⵠΔⵠ: "img/hurt-lava-wing-left.png",
        ᐃΔΔᐃⵠⵠⲆ: "img/hurt-lava-wing-right.png",
        ΔᐃⵠᐃⲆⵠΔ: "img/day-reidite-spear.png",
        ⲆΔⲆⲆᐃᐃⲆ: "img/night-reidite-spear.png",
        ΔⲆᐃΔⵠⵠⵠ: "img/inv-reidite-spear-out.png",
        ΔᐃΔⵠΔⵠⲆ: "img/inv-reidite-spear-in.png",
        ΔⲆᐃⵠΔⵠΔ: "img/inv-reidite-spear-click.png",
        ⵠⲆᐃⵠᐃⵠⵠ: "img/day-reidite-helmet.png",
        ΔⲆⵠⵠⵠⲆⵠ: "img/night-reidite-helmet.png",
        ⵠⵠᐃⵠⲆΔⵠ: "img/inv-reidite-helmet-out.png",
        ⲆΔⵠⵠⲆᐃⲆ: "img/inv-reidite-helmet-in.png",
        ΔⲆⲆᐃⵠⵠᐃ: "img/inv-reidite-helmet-click.png",
        ᐃΔⵠᐃΔᐃᐃ: "img/day-hand-reidite-protection.png",
        ⲆⵠⵠⵠᐃᐃΔ: "img/night-hand-reidite-protection.png",
        ⵠⲆΔⵠⵠⵠⲆ: "img/day-reidite-protection.png",
        ᐃⵠᐃⲆᐃⵠᐃ: "img/night-reidite-protection.png",
        ⵠⵠⵠⵠᐃᐃⲆ: "img/inv-reidite-protection-out.png",
        ⲆⲆᐃΔⵠⲆⵠ: "img/inv-reidite-protection-in.png",
        ΔⵠᐃⵠΔⵠᐃ: "img/inv-reidite-protection-click.png",
        ΔⲆⵠⵠⵠΔᐃ: "img/day-lava-dragon-sword.png",
        ⵠΔⵠⵠΔᐃΔ: "img/night-lava-dragon-sword.png",
        ᐃΔΔᐃᐃⲆⲆ: "img/inv-lava-dragon-sword-out.png",
        ᐃᐃΔⵠΔᐃⵠ: "img/inv-lava-dragon-sword-in.png",
        ⲆⲆΔⵠΔⵠᐃ: "img/inv-lava-dragon-sword-click.png",
        ᐃⵠΔΔΔⲆΔ: "img/day-lava-spear.png",
        ΔⵠⵠᐃᐃᐃⲆ: "img/night-lava-spear.png",
        ΔᐃⲆᐃⵠⲆⵠ: "img/inv-lava-spear-out.png",
        ᐃⵠⲆᐃΔΔΔ: "img/inv-lava-spear-in.png",
        ⲆᐃᐃⵠⲆᐃⲆ: "img/inv-lava-spear-click.png",
        ΔⲆΔⵠⵠⲆΔ: "img/day-lava-helmet.png",
        ⲆΔⲆΔⲆⵠⲆ: "img/night-lava-helmet.png",
        ΔᐃⲆΔⲆᐃⲆ: "img/inv-lava-helmet-out.png",
        ⲆᐃⲆⲆΔⵠΔ: "img/inv-lava-helmet-in.png",
        ᐃⲆΔⲆⵠⵠᐃ: "img/inv-lava-helmet-click.png",
        ⲆⲆᐃᐃᐃΔⲆ: "img/day-witch-hat.png",
        ⵠΔⲆⲆΔΔⲆ: "img/night-witch-hat.png",
        ΔΔⲆⲆᐃᐃⲆ: "img/inv-witch-hat-out.png",
        ⲆᐃΔⲆᐃΔⲆ: "img/inv-witch-hat-in.png",
        ⵠᐃⵠⲆΔΔⲆ: "img/inv-witch-hat-click.png",
        ΔΔⲆⵠⲆᐃⵠ: "img/day-nimbus2000.png",
        ⲆᐃⵠⵠᐃⵠⲆ: "img/night-nimbus2000.png",
        ⲆⵠⲆᐃⵠⵠᐃ: "img/inv-nimbus2000-out.png",
        ⵠⲆΔⵠⵠᐃⲆ: "img/inv-nimbus2000-in.png",
        ⵠⵠΔΔᐃⲆⲆ: "img/inv-nimbus2000-click.png",
        ⵠᐃᐃᐃⵠⲆⲆ: "img/day-accessory1-pacques.png",
        ᐃΔᐃᐃᐃⵠΔ: "img/night-accessory1-pacques.png",
        ΔⵠⲆᐃⵠᐃⵠ: "img/day-accessory2-pacques.png",
        ᐃᐃⲆⲆᐃᐃⵠ: "img/night-accessory2-pacques.png",
        ⵠᐃΔᐃΔΔᐃ: "img/day-accessory3-pacques.png",
        ΔᐃⲆⵠᐃΔⲆ: "img/night-accessory3-pacques.png",
        ΔⲆⲆⲆⵠᐃⲆ: "img/day-accessory5-pacques.png",
        ⲆⲆᐃⲆΔΔΔ: "img/night-accessory5-pacques.png",
        ΔΔⵠᐃⲆⵠⲆ: "img/day-accessory6-pacques.png",
        ⲆᐃⵠⵠᐃΔⵠ: "img/night-accessory6-pacques.png",
        ⲆΔᐃⲆⵠᐃⵠ: "img/day-accessory7-pacques.png",
        ᐃⵠⲆⵠᐃⵠΔ: "img/night-accessory7-pacques.png",
        ᐃⵠᐃΔΔⵠᐃ: "img/day-accessory8-pacques.png",
        ⵠⵠΔⲆᐃⲆΔ: "img/night-accessory8-pacques.png",
        ⵠΔᐃΔⲆⵠᐃ: "img/day-bag-pacques.png",
        ΔⵠⵠᐃⵠⲆᐃ: "img/night-bag-pacques.png",
        ⲆⵠⵠⲆᐃⲆΔ: "img/day-carrot.png",
        ⵠᐃᐃⲆⲆΔᐃ: "img/night-carrot.png",
        ᐃⲆⲆᐃΔⵠᐃ: "img/day-carrot-dried.png",
        ᐃⲆΔⲆⵠⲆⲆ: "img/night-carrot-dried.png",
        ΔΔᐃᐃᐃⲆΔ: "img/day-tomato-herb.png",
        ⲆⵠΔⵠⵠⵠⲆ: "img/night-tomato-herb.png",
        ΔᐃᐃⲆⲆᐃⲆ: "img/day-tomato-herb-dried.png",
        ⵠᐃⲆΔⵠᐃⵠ: "img/night-tomato-herb-dried.png",
        ⲆᐃⲆΔᐃⲆⵠ: "img/day-tomato.png",
        ᐃⲆⵠΔΔΔⲆ: "img/night-tomato.png",
        ᐃᐃⵠⵠΔᐃΔ: "img/inv-carrot-out.png",
        ΔᐃᐃⲆᐃΔΔ: "img/inv-carrot-in.png",
        ⵠΔᐃⲆⲆΔΔ: "img/inv-carrot-click.png",
        ᐃⵠⲆᐃᐃᐃⵠ: "img/inv-tomato-out.png",
        ΔΔⵠᐃⲆⲆⲆ: "img/inv-tomato-in.png",
        ᐃⵠⵠⲆᐃⵠⲆ: "img/inv-tomato-click.png",
        ᐃⲆΔΔⲆⵠΔ: "img/day-player0.png",
        ᐃⵠⵠⲆᐃΔΔ: "img/night-player0.png",
        ⵠⲆⵠⵠᐃᐃⲆ: "img/day-player1.png",
        ⵠΔΔⵠᐃⵠΔ: "img/night-player1.png",
        ⵠⲆΔᐃⵠᐃⵠ: "img/day-player2.png",
        ⵠΔΔᐃⵠⲆΔ: "img/night-player22.png",
        ⲆΔⲆⵠⲆⲆⵠ: "img/day-player3.png",
        ⲆⵠΔⵠⵠⲆⵠ: "img/night-player33.png",
        ΔⵠⲆⵠΔᐃᐃ: "img/day-player4.png",
        ᐃᐃⲆᐃᐃᐃΔ: "img/night-player4.png",
        ⵠΔⵠΔᐃᐃΔ: "img/day-player5.png",
        ⵠᐃᐃⲆΔⵠΔ: "img/night-player5.png",
        ΔᐃⵠⲆⲆᐃⲆ: "img/day-player6.png",
        ⵠᐃⵠⵠⵠΔΔ: "img/night-player6.png",
        ⲆᐃᐃΔΔᐃⲆ: "img/day-player7.png",
        ΔΔⵠᐃⲆⲆⵠ: "img/night-player7.png",
        ⲆⲆΔᐃⵠΔΔ: "img/day-player8.png",
        ⲆᐃⵠⲆⲆᐃΔ: "img/night-player8.png",
        ΔⵠΔⲆᐃᐃⵠ: "img/day-player9.png",
        ΔⵠΔᐃⲆⲆⲆ: "img/night-player9.png",
        ⲆⲆⵠΔⵠⵠᐃ: "img/day-player10.png",
        ⲆᐃᐃΔⲆⲆΔ: "img/night-player10.png",
        ⵠⵠⵠⲆⲆᐃⵠ: "img/day-player11.png",
        ΔⲆⵠⵠⲆⲆΔ: "img/night-player11.png",
        ⲆᐃΔⵠⲆΔⵠ: "img/day-player12.png",
        ⲆᐃᐃᐃᐃⵠⲆ: "img/night-player12.png",
        ΔΔⵠⵠⵠᐃⵠ: "img/day-player13.png",
        ᐃⲆⲆⵠᐃⵠⲆ: "img/night-player13.png",
        ⲆⵠᐃᐃᐃΔⲆ: "img/day-player14.png",
        ΔᐃᐃⲆΔᐃΔ: "img/night-player14.png",
        ⵠΔⵠⵠⲆⵠᐃ: "img/day-player15.png",
        ⵠΔⲆΔⲆⲆⲆ: "img/night-player15.png",
        ⲆⲆΔⵠⲆⵠΔ: "img/day-player16.png",
        ⲆᐃΔΔΔⲆⲆ: "img/night-player16.png",
        ⲆᐃⲆᐃᐃᐃΔ: "img/day-player17.png",
        ᐃⵠⵠⲆᐃΔⲆ: "img/night-player17.png",
        ⵠⲆⵠΔᐃΔᐃ: "img/day-player18.png",
        ⲆᐃᐃᐃⲆΔΔ: "img/night-player18.png",
        ⵠⲆⲆⵠΔᐃⵠ: "img/day-player19.png",
        ΔⲆⲆΔⲆᐃΔ: "img/night-player19.png",
        ᐃΔᐃⵠⵠΔᐃ: "img/day-hand-player0.png",
        ΔᐃⵠᐃⲆΔⲆ: "img/night-hand-player0.png",
        ⵠⵠΔⵠΔⲆΔ: "img/day-hand-player1.png",
        ⵠⲆΔᐃⲆᐃᐃ: "img/night-hand-player1.png",
        ΔⲆΔᐃⲆⲆⵠ: "img/day-hand-player2.png",
        ΔᐃΔΔⵠΔᐃ: "img/night-hand-player22.png",
        ⲆΔⲆⵠⲆΔᐃ: "img/day-hand-player3.png",
        ΔⵠⵠⵠⲆⵠⲆ: "img/night-hand-player33.png",
        ᐃᐃⵠΔΔⵠⲆ: "img/day-hand-player4.png",
        ᐃΔⲆⵠⵠⲆⲆ: "img/night-hand-player4.png",
        ⲆᐃᐃᐃⵠΔⵠ: "img/day-hand-player5.png",
        ᐃⵠᐃΔⵠⵠⲆ: "img/night-hand-player5.png",
        ⵠᐃⲆⵠΔΔΔ: "img/day-hand-player6.png",
        ᐃΔᐃΔⲆΔΔ: "img/night-hand-player6.png",
        ⵠⵠⵠⵠΔᐃⵠ: "img/day-hand-player7.png",
        ᐃᐃΔⵠⵠΔᐃ: "img/night-hand-player7.png",
        ⵠⵠΔᐃᐃΔᐃ: "img/day-hand-player8.png",
        ⵠΔΔΔⵠΔⲆ: "img/night-hand-player8.png",
        ⲆᐃⲆΔⵠΔᐃ: "img/day-hand-player9.png",
        ᐃᐃⲆΔᐃΔⵠ: "img/night-hand-player9.png",
        ⵠΔⲆΔΔΔⵠ: "img/day-hand-player10.png",
        ⲆᐃᐃⲆᐃᐃΔ: "img/night-hand-player10.png",
        ΔΔᐃᐃⲆⲆᐃ: "img/day-hand-player11.png",
        ΔΔΔᐃⵠᐃᐃ: "img/night-hand-player11.png",
        ΔᐃΔⲆΔⲆⵠ: "img/day-hand-player12.png",
        ᐃⲆᐃⵠⲆᐃᐃ: "img/night-hand-player12.png",
        ΔⵠⵠⲆⲆᐃⲆ: "img/day-hand-player13.png",
        ⲆⲆᐃᐃᐃⵠᐃ: "img/night-hand-player13.png",
        Ⲇⵠᐃⵠⵠⵠᐃ: "img/day-hand-player14.png",
        ΔᐃⵠⵠⲆⲆⲆ: "img/night-hand-player14.png",
        ᐃΔⲆⵠⲆΔΔ: "img/day-hand-player15.png",
        ⲆᐃΔⲆⲆᐃⵠ: "img/night-hand-player15.png",
        ⲆⵠᐃⲆᐃΔΔ: "img/day-hand-player16.png",
        ⲆⲆⲆΔΔᐃΔ: "img/night-hand-player16.png",
        ⵠⵠⲆΔΔⵠⲆ: "img/day-hand-player17.png",
        ΔᐃΔⲆΔⲆΔ: "img/night-hand-player17.png",
        ᐃⵠⲆΔᐃⵠⵠ: "img/day-hand-player18.png",
        ⲆΔᐃⵠⵠⲆΔ: "img/night-hand-player18.png",
        ⵠΔⵠⵠⲆΔᐃ: "img/day-hand-player19.png",
        ⲆΔΔⲆᐃΔⲆ: "img/night-hand-player19.png",
        ⵠᐃⲆⵠⵠΔⵠ: "img/day-accessory4.png",
        ΔᐃΔⲆⵠᐃⲆ: "img/night-accessory4.png",
        ⵠᐃⲆᐃΔⵠⲆ: "img/day-accessory9.png",
        ⵠᐃⵠᐃᐃΔⵠ: "img/night-accessory9.png",
        ⲆᐃΔⵠΔᐃᐃ: "img/day-accessory10.png",
        ΔⵠⲆⵠᐃⵠⵠ: "img/night-accessory10.png",
        ΔⲆΔⵠΔᐃⲆ: "img/day-accessory11.png",
        ⲆⲆⲆᐃⵠⵠΔ: "img/night-accessory11.png",
        ⲆⵠⵠⲆⵠᐃⲆ: "img/day-accessory12.png",
        ⵠΔΔᐃᐃᐃⵠ: "img/night-accessory12.png",
        ΔⲆⲆⵠᐃⵠᐃ: "img/day-bag.png",
        ⲆⵠⵠᐃⲆᐃⲆ: "img/night-bag.png",
        ᐃⲆΔΔⵠᐃᐃ: "img/inv-bag-out.png",
        ᐃⲆᐃΔⵠⵠⲆ: "img/inv-bag-in.png",
        ᐃᐃᐃⵠΔⵠᐃ: "img/inv-bag-click.png",
        ΔᐃⲆⲆΔⵠᐃ: "img/day-pitchfork.png",
        ⵠᐃⵠⲆΔⵠΔ: "img/night-pitchfork.png",
        ᐃⵠᐃⲆⲆᐃΔ: "img/inv-pitchfork-out.png",
        ΔᐃⵠᐃᐃⲆᐃ: "img/inv-pitchfork-in.png",
        ΔⵠⲆᐃΔΔΔ: "img/inv-pitchfork-click.png",
        ⵠⲆΔᐃΔᐃΔ: "img/inv-wood-spike-door-out.png",
        ΔⵠᐃⵠⲆⲆΔ: "img/inv-wood-spike-door-in.png",
        ⵠⵠⲆΔⲆⲆⲆ: "img/inv-wood-spike-door-click.png",
        ΔⵠΔⲆΔΔΔ: "img/inv-stone-spike-door-out.png",
        ᐃΔⲆΔΔⲆⵠ: "img/inv-stone-spike-door-in.png",
        ⲆⵠⲆΔᐃⲆΔ: "img/inv-stone-spike-door-click.png",
        ⵠᐃⲆΔᐃΔⵠ: "img/inv-gold-spike-door-out.png",
        ᐃΔᐃⲆⵠⵠᐃ: "img/inv-gold-spike-door-in.png",
        ᐃⲆⲆΔᐃⲆⵠ: "img/inv-gold-spike-door-click.png",
        ᐃⵠⵠΔⵠⲆⲆ: "img/inv-diamond-spike-door-out.png",
        ⵠΔᐃⵠⵠⵠΔ: "img/inv-diamond-spike-door-in.png",
        ⲆⵠⲆⵠⵠΔⲆ: "img/inv-diamond-spike-door-click.png",
        ΔⵠⲆⵠⲆⵠⵠ: "img/inv-amethyst-spike-door-out.png",
        ⲆΔⵠⲆᐃΔⲆ: "img/inv-amethyst-spike-door-in.png",
        ⵠᐃⲆⲆⵠⲆⲆ: "img/inv-amethyst-spike-door-click.png",
        ᐃᐃᐃΔᐃΔⲆ: "img/day-wood-spike-door.png",
        ᐃⵠΔΔᐃΔΔ: "img/night-wood-spike-door.png",
        ΔⵠᐃⲆⵠΔⵠ: "img/day-stone-spike-door.png",
        ⵠΔⲆⵠⲆⵠⵠ: "img/night-stone-spike-door.png",
        ᐃᐃᐃⵠᐃΔⲆ: "img/day-gold-spike-door.png",
        ᐃⲆΔⲆΔᐃᐃ: "img/night-gold-spike-door.png",
        ⵠΔⵠⲆᐃⲆᐃ: "img/day-diamond-spike-door.png",
        ⵠⲆᐃΔΔΔΔ: "img/night-diamond-spike-door.png",
        ΔⲆΔᐃⲆⲆΔ: "img/day-amethyst-spike-door.png",
        ⵠᐃⲆⲆⲆΔΔ: "img/night-amethyst-spike-door.png",
        ⵠᐃⵠᐃⲆⵠᐃ: "img/inv-reidite-spike-door-out.png",
        ⵠᐃⵠⵠΔⲆⲆ: "img/inv-reidite-spike-door-in.png",
        ⵠᐃⵠⵠⵠⲆΔ: "img/inv-reidite-spike-door-click.png",
        ΔⲆΔΔΔΔⵠ: "img/inv-reidite-door-out.png",
        ΔᐃΔⵠⲆⵠΔ: "img/inv-reidite-door-in.png",
        ⵠΔᐃΔᐃⵠΔ: "img/inv-reidite-door-click.png",
        ⵠᐃⵠⵠⵠΔⵠ: "img/inv-reidite-spike-out.png",
        ⲆⵠᐃΔⲆⲆᐃ: "img/inv-reidite-spike-in.png",
        ᐃᐃΔⵠⲆⵠΔ: "img/inv-reidite-spike-click.png",
        ⵠᐃⵠⵠᐃᐃⵠ: "img/inv-reidite-wall-out.png",
        ᐃⵠⲆΔⵠⲆⵠ: "img/inv-reidite-wall-in.png",
        ΔᐃⵠΔⵠⵠⵠ: "img/inv-reidite-wall-click.png",
        ⵠⲆΔᐃⲆⵠⲆ: "img/day-reidite-wall.png",
        ΔᐃΔⲆⲆΔΔ: "img/night-reidite-wall.png",
        ⵠⲆⲆⵠⵠΔᐃ: "img/day-reidite-door.png",
        ⵠᐃΔΔᐃⲆⵠ: "img/night-reidite-door.png",
        ⵠⲆⲆᐃᐃᐃᐃ: "img/day-reidite-spike.png",
        ΔⵠΔᐃᐃᐃⵠ: "img/night-reidite-spike.png",
        ᐃᐃⲆΔⲆⵠᐃ: "img/day-reidite-spike-door.png",
        ⵠΔⲆᐃΔⲆⵠ: "img/night-reidite-spike-door.png",
        ⲆⵠⵠⲆⲆⲆΔ: "img/inv-reidite-pickaxe-out.png",
        ΔⲆⵠΔΔⲆΔ: "img/inv-reidite-pickaxe-in.png",
        ⲆᐃΔⵠⲆᐃⵠ: "img/inv-reidite-pickaxe-click.png",
        ᐃᐃΔᐃⵠⲆⲆ: "img/day-reidite-pickaxe.png",
        ⵠⵠⵠⵠⲆⲆᐃ: "img/night-reidite-pickaxe.png",
        ⵠΔⲆⲆⵠΔΔ: "img/inv-reidite-hammer-out.png",
        ⲆᐃᐃᐃΔⲆⵠ: "img/inv-reidite-hammer-in.png",
        ⵠᐃᐃᐃΔⵠᐃ: "img/inv-reidite-hammer-click.png",
        ΔⵠⲆⲆⲆⵠⲆ: "img/day-reidite-hammer.png",
        ΔⲆΔᐃᐃᐃΔ: "img/night-reidite-hammer.png",
        ⲆᐃᐃᐃΔᐃⲆ: "img/day-watermelon1.png",
        ᐃΔᐃⲆᐃᐃⲆ: "img/night-watermelon1.png",
        ⲆΔⲆⲆΔΔⵠ: "img/day-watermelon-dried1.png",
        ᐃᐃᐃⲆⲆⵠⲆ: "img/night-watermelon-dried1.png",
        ⵠᐃⲆⲆΔⵠΔ: "img/inv-watermelon-out.png",
        ⲆⵠᐃᐃΔᐃⵠ: "img/inv-watermelon-in.png",
        ⲆⵠⵠⵠΔᐃⵠ: "img/inv-watermelon-click.png",
        ⲆⲆᐃᐃⵠⲆᐃ: "img/day-boat.png",
        ᐃᐃᐃΔᐃᐃᐃ: "img/night-boat.png",
        ᐃΔΔⵠⵠⲆⵠ: "img/day-boat-wave.png",
        ⵠᐃⵠᐃΔΔΔ: "img/night-boat-wave.png",
        ⵠΔΔΔᐃⵠⵠ: "img/inv-boat-out.png",
        ᐃⵠᐃΔⵠⲆⵠ: "img/inv-boat-in.png",
        ᐃᐃⵠⲆᐃⲆⵠ: "img/inv-boat-click.png",
        ΔⵠΔⵠⲆⲆⵠ: "img/day-plane.png",
        ⲆⵠᐃΔⲆᐃⲆ: "img/night-plane.png",
        ΔΔΔⵠᐃⵠⲆ: "img/inv-plane-out.png",
        ΔΔⵠᐃⵠΔⲆ: "img/inv-plane-in.png",
        ᐃᐃᐃᐃⵠⵠⲆ: "img/inv-plane-click.png",
        ΔⵠⲆΔⲆᐃⵠ: "img/day-sled.png",
        ⵠⲆᐃΔᐃⲆⲆ: "img/night-sled.png",
        ⲆⵠΔⲆᐃⵠⲆ: "img/day-sled-wave.png",
        ⵠᐃⲆᐃΔΔⲆ: "img/night-sled-wave.png",
        ⲆΔⵠᐃᐃΔᐃ: "img/inv-sled-out.png",
        ΔΔⵠᐃᐃⲆⵠ: "img/inv-sled-in.png",
        ⲆⲆⲆⲆⲆΔⲆ: "img/inv-sled-click.png",
        ΔΔΔᐃΔᐃⵠ: "img/day-pirate-hat.png",
        ⲆⲆΔⵠⲆⲆᐃ: "img/night-pirate-hat.png",
        ⲆΔⵠⲆⵠΔᐃ: "img/inv-pirate-hat-out.png",
        ⲆΔΔⲆⵠⵠⵠ: "img/inv-pirate-hat-in.png",
        ⵠⲆⲆᐃⵠⲆΔ: "img/inv-pirate-hat-click.png",
        ⵠⵠΔᐃⲆΔΔ: "img/day-penguin.png",
        ᐃΔᐃⵠΔⵠᐃ: "img/night-penguin.png",
        ΔΔⵠᐃⲆⲆᐃ: "img/hurt-penguin.png",
        ᐃⵠⵠⲆᐃ: "img/inv-penguin-feather-click.png",
        ΔΔⲆᐃᐃ: "img/inv-hawk-feather-click.png",
        ⲆⲆⵠΔΔΔⵠ: "img/day-boar1.png",
        ᐃⵠᐃΔΔⲆⵠ: "img/day-boar1-tamed.png",
        ⲆᐃⵠΔᐃⵠᐃ: "img/day-boar1-angry.png",
        ΔΔᐃⲆⲆⵠⵠ: "img/night-boar1.png",
        ⵠΔⲆΔⲆⲆΔ: "img/night-boar1-tamed.png",
        ⲆᐃΔΔⵠⲆΔ: "img/night-boar1-angry.png",
        ⲆΔΔΔⵠΔⲆ: "img/inv-mount-boar-out.png",
        ᐃΔΔⲆⲆⲆⵠ: "img/inv-mount-boar-in.png",
        ΔᐃᐃᐃΔⵠⵠ: "img/inv-mount-boar-click.png",
        ⲆⲆΔⵠΔᐃΔ: "img/day-hurt-boar1.png",
        ΔΔᐃᐃΔⵠᐃ: "img/boar1-step.png",
        Ⲇⵠᐃᐃⵠⵠⵠ: "img/day-saddle1.png",
        ⲆΔΔᐃΔΔⲆ: "img/night-saddle1.png",
        ⲆⵠᐃⵠΔᐃⲆ: "img/inv-saddle-out.png",
        ⲆΔⵠⵠᐃⲆᐃ: "img/inv-saddle-in.png",
        ΔᐃⲆᐃᐃⵠⵠ: "img/inv-saddle-click.png",
        ΔΔⲆⲆⲆⲆΔ: "img/day-magic-wand0.png",
        ΔΔⲆⵠⲆⲆΔ: "img/night-magic-wand0.png",
        ⲆᐃᐃⵠⵠΔⲆ: "img/day-light-wand1.png",
        ⵠⲆⲆᐃⲆⲆᐃ: "img/night-light-wand1.png",
        ΔⵠⲆⲆⵠᐃΔ: "img/inv-magic-wand0-out.png",
        ⵠΔᐃⵠⲆΔᐃ: "img/inv-magic-wand0-in.png",
        ᐃⵠⵠΔⲆΔⲆ: "img/inv-magic-wand0-click.png",
        ⲆᐃᐃⵠᐃⵠⲆ: "img/day-magic-wand1.png",
        ΔᐃΔᐃⲆΔⲆ: "img/night-magic-wand1.png",
        ⵠⲆⲆᐃΔΔᐃ: "img/day-light-wand0.png",
        ΔΔΔΔΔⵠⵠ: "img/night-light-wand0.png",
        ΔⲆΔⵠⵠⲆᐃ: "img/inv-magic-wand1-out.png",
        ⵠⲆΔΔⵠⵠΔ: "img/inv-magic-wand1-in.png",
        ᐃⵠⲆΔⵠᐃΔ: "img/inv-magic-wand1-click.png",
        ΔᐃⵠΔΔΔΔ: "img/day-firefly.png",
        ⲆᐃᐃⲆⲆΔΔ: "img/night-firefly.png",
        ⵠⲆⲆᐃⲆⵠⲆ: "img/hurt-firefly.png",
        ᐃΔᐃᐃΔⲆΔ: "img/inv-firefly-out.png",
        ᐃᐃⵠΔᐃΔⵠ: "img/inv-firefly-in.png",
        ΔΔⲆᐃⲆⲆⵠ: "img/inv-firefly-click.png",
        ᐃᐃΔⲆⵠⵠⵠ: "img/day-baby-dragon.png",
        ⵠⵠᐃⵠⲆᐃⲆ: "img/night-baby-dragon.png",
        ᐃᐃⲆⵠⲆⲆⵠ: "img/day-baby-dragon-angry.png",
        ⲆⲆⵠΔⲆᐃⲆ: "img/night-baby-dragon-angry.png",
        ⲆⲆΔᐃᐃᐃᐃ: "img/day-baby-dragon-tamed.png",
        ⲆΔⲆⵠΔᐃⵠ: "img/night-baby-dragon-tamed.png",
        ΔΔΔⲆⵠᐃⵠ: "img/day-wing-dragon-left-angry.png",
        ΔⲆΔᐃᐃⲆⵠ: "img/night-dragon-wing-left-angry.png",
        ⵠᐃᐃᐃΔⵠⲆ: "img/day-wing-dragon-right-angry.png",
        ᐃᐃⲆⵠⲆΔΔ: "img/night-dragon-wing-right-angry.png",
        ΔΔᐃⲆⲆⵠᐃ: "img/day-wing-dragon-left-tamed.png",
        ⲆⵠΔΔⲆᐃⲆ: "img/night-dragon-wing-left-tamed.png",
        ΔᐃΔΔᐃⵠⲆ: "img/day-wing-dragon-right-tamed.png",
        ΔᐃⲆⵠᐃⵠΔ: "img/night-wing-dragon-right-tamed.png",
        ⵠΔΔᐃⵠΔⲆ: "img/day-wing-dragon-left.png",
        ⵠᐃⲆᐃΔᐃᐃ: "img/night-dragon-wing-left.png",
        ΔΔⲆΔΔᐃⵠ: "img/day-wing-dragon-right.png",
        ΔΔΔΔⲆⵠᐃ: "img/night-wing-dragon-right.png",
        ᐃⲆᐃᐃⲆⵠᐃ: "img/hurt-baby-dragon.png",
        ΔᐃⵠⲆⲆΔᐃ: "img/hurt-baby-dragon-wing-left.png",
        ⲆᐃⲆⵠⲆΔⵠ: "img/hurt-baby-dragon-wing-right.png",
        ᐃΔⵠΔΔⵠΔ: "img/inv-baby-dragon-out.png",
        ΔΔⲆⲆΔᐃΔ: "img/inv-baby-dragon-in.png",
        ⵠⵠΔΔΔᐃⵠ: "img/inv-baby-dragon-click.png",
        ΔⲆᐃⵠΔᐃΔ: "img/day-baby-lava.png",
        ΔⲆⲆᐃⵠⵠΔ: "img/night-baby-lava.png",
        ᐃΔᐃΔⲆⵠᐃ: "img/day-baby-lava-angry.png",
        ⵠⵠᐃⵠⵠΔᐃ: "img/night-baby-lava-angry.png",
        ᐃᐃⵠᐃⲆΔⵠ: "img/day-baby-lava-tamed.png",
        ᐃⵠΔⲆⲆᐃΔ: "img/night-baby-lava-tamed.png",
        ᐃⵠⵠⵠᐃᐃᐃ: "img/day-wing-lava-left-angry.png",
        ᐃᐃᐃⲆΔⵠⵠ: "img/night-wing-lava-left-angry.png",
        ΔᐃΔΔⲆⲆⲆ: "img/day-wing-lava-right-angry.png",
        ⲆᐃᐃⵠᐃⲆᐃ: "img/night-wing-lava-right-angry.png",
        ⲆⵠᐃᐃⲆⲆᐃ: "img/day-wing-lava-left-tamed.png",
        ΔⵠΔⵠⲆΔⲆ: "img/night-wing-lava-left-tamed.png",
        ⵠⵠⵠⲆᐃⵠⲆ: "img/day-wing-lava-right-tamed.png",
        ⵠⲆΔΔΔⵠΔ: "img/night-wing-lava-right-tamed.png",
        ᐃᐃᐃΔⵠᐃⵠ: "img/day-wing-lava-left.png",
        ⵠΔⲆΔⲆᐃᐃ: "img/night-wing-lava-left.png",
        ᐃⵠΔⲆⲆⲆᐃ: "img/day-wing-lava-right.png",
        ΔⲆⵠⵠᐃΔᐃ: "img/night-wing-lava-right.png",
        ⵠⵠᐃΔΔⵠⲆ: "img/hurt-baby-lava.png",
        ⵠᐃⲆΔⲆᐃΔ: "img/hurt-baby-lava-wing-left.png",
        ⵠⵠⲆⲆⲆΔᐃ: "img/hurt-baby-lava-wing-right.png",
        ΔᐃⵠⵠⲆⵠⵠ: "img/inv-baby-lava-out.png",
        ΔᐃⲆΔⵠⵠΔ: "img/inv-baby-lava-in.png",
        ᐃΔⲆⵠⵠⵠᐃ: "img/inv-baby-lava-click.png",
        ΔΔⲆⲆᐃⵠᐃ: "img/day-falcon.png",
        ᐃⵠⲆⲆᐃΔⲆ: "img/night-falcon.png",
        ⵠΔΔⵠΔⲆⲆ: "img/day-falcon-angry.png",
        ᐃΔⲆⲆᐃᐃⵠ: "img/night-falcon-angry.png",
        ⵠᐃⵠΔΔⵠᐃ: "img/day-falcon-ground.png",
        ⵠΔⵠΔⲆᐃⲆ: "img/night-falcon-ground.png",
        ᐃᐃⲆⲆⵠᐃΔ: "img/day-falcon-ground-angry.png",
        Δᐃᐃⵠⵠᐃⵠ: "img/night-falcon-ground-angry.png",
        ⵠⵠᐃᐃⵠⵠⵠ: "img/day-falcon-wings-left.png",
        ⵠⲆᐃᐃⲆⵠΔ: "img/night-falcon-wings-left.png",
        ⲆⵠᐃⵠⵠⵠΔ: "img/day-falcon-wings-right.png",
        ᐃⲆⲆⲆⵠⲆΔ: "img/night-falcon-wings-right.png",
        ⲆⲆᐃΔⲆⲆⲆ: "img/day-falcon-angry-wings-left.png",
        ⲆΔⲆΔⲆΔᐃ: "img/night-falcon-angry-wings-left.png",
        ᐃⲆᐃⵠΔᐃⲆ: "img/day-falcon-angry-wings-right.png",
        ΔᐃΔᐃⵠⲆⲆ: "img/night-falcon-angry-wings-right.png",
        ⲆΔΔⲆⵠⲆⲆ: "img/day-falcon-wings-left-tamed.png",
        ⵠⵠⵠᐃᐃΔⲆ: "img/night-falcon-wings-left-tamed.png",
        ΔᐃⲆⵠⲆⲆⲆ: "img/day-falcon-wings-right-tamed.png",
        ΔⲆΔΔΔⲆⵠ: "img/night-falcon-wings-right-tamed.png",
        ⲆΔⵠⲆᐃΔᐃ: "img/day-falcon-tamed.png",
        ⲆΔΔⵠⵠᐃⵠ: "img/night-falcon-tamed.png",
        ⵠⲆⲆⲆΔΔᐃ: "img/hurt-falcon-ground.png",
        ΔᐃᐃⲆΔᐃᐃ: "img/hurt-falcon.png",
        ⲆᐃᐃᐃΔᐃᐃ: "img/hurt-falcon-wings-left.png",
        ⲆΔⲆᐃΔⵠΔ: "img/hurt-falcon-wings-right.png",
        ᐃΔⲆΔⲆⵠⵠ: "img/inv-falcon-out.png",
        ⲆⲆΔⲆⲆⲆⲆ: "img/inv-falcon-in.png",
        ⵠⵠⲆΔⵠⲆⵠ: "img/inv-falcon-click.png",
        ⲆᐃᐃΔⵠⵠⵠ: "img/day-crab-boss.png",
        ⵠᐃⵠΔΔⲆΔ: "img/night-crab-boss.png",
        ΔᐃⵠᐃⲆⲆᐃ: "img/day-crab-boss-angry.png",
        ⲆⲆᐃⵠⲆΔΔ: "img/night-crab-boss-angry.png",
        ΔΔⲆⲆⵠⵠⵠ: "img/day-crab-boss-tamed.png",
        ⲆⵠⲆΔⵠⵠⲆ: "img/night-crab-boss-tamed.png",
        ᐃᐃⵠⲆⵠΔΔ: "img/day-crab-boss-claw-left-attack.png",
        ⲆⲆᐃⲆⲆᐃⵠ: "img/night-crab-boss-claw-left-attack.png",
        ⲆᐃᐃⵠⲆΔⵠ: "img/day-crab-boss-claw-right-attack.png",
        ⲆΔⲆⵠⵠⵠⲆ: "img/night-crab-boss-claw-right-attack.png",
        ᐃⵠᐃⵠᐃⵠᐃΔᐃ: "img/day-crab-boss-claw-left-tamed.png",
        ⲆᐃΔΔⵠᐃᐃᐃᐃ: "img/night-crab-boss-claw-left-tamed.png",
        ᐃⲆᐃⵠⵠᐃⲆᐃⲆ: "img/day-crab-boss-claw-right-tamed.png",
        ᐃΔΔΔⲆⵠⲆⵠΔ: "img/night-crab-boss-claw-right-tamed.png",
        ΔΔΔΔᐃᐃⲆ: "img/day-crab-boss-claw-left.png",
        ⵠᐃⵠΔⲆΔⲆ: "img/night-crab-boss-claw-left.png",
        ΔᐃΔⲆΔᐃⲆ: "img/day-crab-boss-claw-right.png",
        ⲆΔᐃᐃⲆⵠΔ: "img/night-crab-boss-claw-right.png",
        ΔΔⵠΔⵠⲆⵠ: "img/hurt-crab-boss.png",
        ΔⲆᐃⲆᐃΔΔ: "img/hurt-crab-boss-claw-left.png",
        ᐃᐃⵠⲆⲆᐃΔ: "img/hurt-crab-boss-claw-right.png",
        ΔᐃᐃᐃᐃⵠⲆ: "img/heal-crab-boss.png",
        ΔΔΔᐃᐃⲆᐃ: "img/heal-crab-boss-claw-left.png",
        ᐃⲆΔⵠⲆⵠⲆ: "img/heal-crab-boss-claw-right.png",
        ᐃⵠⵠΔΔⲆΔ: "img/crab-step.png",
        ⲆᐃΔⲆᐃΔΔ: "img/inv-crab-boss-out.png",
        ΔⲆᐃⵠᐃⵠΔ: "img/inv-crab-boss-in.png",
        ⲆⲆⲆΔΔⲆⲆ: "img/inv-crab-boss-click.png",
        ⵠⲆΔⵠΔᐃⵠ: "img/day-cactus10.png",
        ᐃᐃΔⲆΔⲆⲆ: "img/night-cactus10.png",
        ⲆᐃΔⵠΔΔΔ: "img/inv-cactus-out.png",
        ⵠΔΔᐃΔᐃⵠ: "img/inv-cactus-in.png",
        ⵠⲆⵠᐃⵠⵠⲆ: "img/inv-cactus-click.png",
        ΔΔⲆⵠᐃΔⵠ: "img/day-scorpion.png",
        ⵠⲆΔΔᐃΔΔ: "img/night-scorpion.png",
        ⵠⲆⲆⲆΔⲆⲆ: "img/day-scorpion-hand-left.png",
        ᐃⵠⲆⲆᐃⵠⲆ: "img/night-scorpion-hand-left.png",
        ⲆⵠⲆⲆᐃⵠᐃ: "img/day-scorpion-hand-right.png",
        ᐃΔⵠⵠᐃΔΔ: "img/night-scorpion-hand-right.png",
        ΔᐃⲆⵠⵠΔΔ: "img/hurt-scorpion.png",
        ΔⲆⵠⲆⲆᐃⵠ: "img/hurt-scorpion-hand-left.png",
        ⲆΔⲆⵠΔᐃⲆ: "img/hurt-scorpion-hand-right.png",
        ΔⲆΔⵠΔᐃΔ: "img/day-vulture.png",
        ⲆᐃⲆⵠΔⵠᐃ: "img/night-vulture.png",
        ⲆⲆΔᐃᐃᐃⵠ: "img/day-vulture-angry.png",
        ⵠΔⵠⵠΔᐃⲆ: "img/night-vulture-angry.png",
        ⲆΔᐃΔⲆᐃᐃ: "img/day-vulture-ground.png",
        ΔΔᐃᐃΔΔΔ: "img/night-vulture-ground.png",
        ⵠᐃⲆΔᐃⵠΔ: "img/day-vulture-ground-angry.png",
        ΔⲆⲆᐃΔⲆᐃ: "img/night-vulture-ground-angry.png",
        Δᐃⵠⵠⵠᐃⵠ: "img/day-vulture-wings-left.png",
        ΔⲆᐃⵠᐃΔΔ: "img/night-vulture-wings-left.png",
        ⵠⲆᐃⲆᐃⲆⲆ: "img/day-vulture-wings-right.png",
        ᐃⲆⲆⵠⲆᐃΔ: "img/night-vulture-wings-right.png",
        ΔⲆΔⵠⲆⵠⵠ: "img/day-vulture-angry-wings-left.png",
        ΔⲆⲆΔⲆⵠⲆ: "img/night-vulture-angry-wings-left.png",
        ⵠᐃᐃᐃⵠᐃΔ: "img/day-vulture-angry-wings-right.png",
        ⵠΔⵠⲆΔⲆⲆ: "img/night-vulture-angry-wings-right.png",
        ΔΔⵠΔᐃΔΔ: "img/day-vulture-wings-left-tamed.png",
        ΔᐃⵠᐃⵠⲆⵠ: "img/night-vulture-wings-left-tamed.png",
        ᐃⵠᐃⲆⲆᐃᐃ: "img/day-vulture-wings-right-tamed.png",
        ΔΔΔⲆᐃᐃⲆ: "img/night-vulture-wings-right-tamed.png",
        ⲆⵠⲆⵠᐃᐃⵠ: "img/day-vulture-tamed.png",
        ᐃΔⲆⲆⲆⲆΔ: "img/night-vulture-tamed.png",
        ΔᐃⵠΔΔⲆΔ: "img/hurt-vulture-ground.png",
        ΔⲆⵠⲆⵠᐃⲆ: "img/hurt-vulture.png",
        ⵠΔⵠⵠⵠΔᐃ: "img/hurt-vulture-wings-left.png",
        ΔΔⵠᐃΔⵠΔ: "img/hurt-vulture-wings-right.png",
        ΔⵠΔΔⵠⵠⵠ: "img/day-aloe-vera.png",
        ⵠⵠᐃⲆⲆᐃᐃ: "img/night-aloe-vera.png",
        ⵠᐃⲆⵠⵠⵠΔ: "img/inv-aloe-vera-out.png",
        ⵠΔⲆᐃᐃⲆⲆ: "img/inv-aloe-vera-in.png",
        ᐃΔΔⲆΔᐃⵠ: "img/inv-aloe-vera-click.png",
        ⲆΔⲆᐃⲆΔᐃ: "img/day-aloe-vera-grown.png",
        ⵠᐃⵠⲆᐃⵠΔ: "img/night-aloe-vera-grown.png",
        ᐃᐃⵠᐃⵠⵠᐃ: "img/day-aloe-vera-dried.png",
        ᐃΔⵠⵠΔΔΔ: "img/night-aloe-vera-dried.png",
        ⵠⲆΔΔⲆΔⵠ: "img/day-turban1.png",
        ⵠⲆᐃⲆΔᐃⵠ: "img/night-turban1.png",
        ⵠⲆᐃⵠΔⲆⵠ: "img/day-turban2.png",
        ᐃⵠᐃᐃⲆⵠⵠ: "img/night-turban2.png",
        ⵠⲆΔⲆᐃⵠΔ: "img/inv-turban2-out.png",
        ⲆΔᐃⲆΔᐃⲆ: "img/inv-turban2-in.png",
        ΔⵠᐃΔΔⵠⲆ: "img/inv-turban2-click.png",
        ΔΔⲆᐃᐃⲆⵠ: "img/inv-turban1-out.png",
        ⲆᐃⵠΔΔⲆΔ: "img/inv-turban1-in.png",
        ⲆⵠⵠⵠⵠᐃⲆ: "img/inv-turban1-click.png",
        ΔⵠⵠⲆⵠᐃΔ: "img/day-pitchfork2.png",
        ᐃΔᐃⵠⲆᐃᐃ: "img/night-pitchfork2.png",
        ΔᐃⲆΔⵠⲆⲆ: "img/inv-pitchfork2-out.png",
        ᐃⲆⵠⵠᐃⲆΔ: "img/inv-pitchfork2-in.png",
        ᐃΔⲆⵠΔⵠΔ: "img/inv-pitchfork2-click.png",
        ⵠⲆᐃⲆᐃΔᐃ: "img/inv-gold-fork-click.png",
        ⵠⵠΔΔᐃⵠⲆ: "img/inv-pilot-glasses-click.png",
        ⲆⵠⲆⲆΔⵠⵠ: "img/day-pilot-helmet.png",
        ⵠⵠⲆⵠⲆΔⵠ: "img/night-pilot-helmet.png",
        ΔᐃᐃᐃⵠⲆⲆ: "img/inv-pilot-helmet-out.png",
        ΔᐃΔΔⲆΔⵠ: "img/inv-pilot-helmet-in.png",
        ⲆᐃⵠⲆΔⲆᐃ: "img/inv-pilot-helmet-click.png",
        ⵠⲆⲆᐃⵠᐃⲆⵠⵠ: "img/day-sandworm0.png",
        ᐃⵠⵠᐃⵠΔᐃ: "img/day-sandworm1.png",
        ΔⵠᐃΔΔᐃⵠ: "img/day-sandworm2.png",
        ⲆⵠⲆᐃⵠⵠᐃᐃⲆ: "img/night-sandworm0.png",
        ΔⲆⲆⵠⲆⲆᐃ: "img/night-sandworm1.png",
        ⲆⵠᐃⲆΔΔⲆ: "img/night-sandworm2.png",
        ΔⲆΔⲆΔⲆⵠ: "img/hurt-sandworm0.png",
        ⵠⲆΔᐃⲆΔⲆ: "img/hurt-sandworm1.png",
        ᐃⲆᐃⵠⵠᐃΔ: "img/hurt-sandworm2.png",
        ⲆⲆᐃΔᐃ: "img/inv-vulture-feather-click.png",
        ⵠⵠⲆᐃΔⵠⲆ: "img/day-emerald0.png",
        ⵠΔⵠᐃⲆⵠᐃ: "img/night-emerald0.png",
        ΔᐃⲆⵠⵠᐃΔ: "img/day-emerald1.png",
        ⲆⲆⲆⵠⲆᐃΔ: "img/night-emerald1.png",
        ΔⲆⲆΔⵠⵠΔ: "img/day-emerald2.png",
        ΔⵠⲆᐃᐃΔΔ: "img/night-emerald2.png",
        ⵠΔΔⵠⵠ: "img/inv-emerald-click.png",
        ΔⲆⲆᐃⲆΔⵠ: "img/inv-sworm-juice-out.png",
        ⲆⲆΔⲆⲆᐃⵠ: "img/inv-sworm-juice-in.png",
        ΔⲆΔᐃⵠⵠⵠ: "img/inv-sworm-juice-click.png",
        ⵠᐃΔⵠᐃⲆᐃ: "img/day-point-machine.png",
        ᐃᐃⲆᐃᐃⵠⵠ: "img/night-point-machine.png",
        ⲆᐃΔΔᐃᐃⵠ: "img/day-point-machine-hole.png",
        ⲆᐃΔⵠⲆⲆⵠ: "img/night-point-machine-hole.png",
        ΔᐃⵠⲆⵠⵠᐃ: "img/day-point-machine-ground.png",
        ⵠⲆΔⲆⵠΔΔ: "img/night-point-machine-ground.png",
        ᐃⲆᐃⲆⵠⵠⵠ: "img/day-point-machine-rotate.png",
        ⲆⵠⲆΔᐃᐃᐃ: "img/night-point-machine-rotate.png",
        ⵠΔᐃⵠᐃΔⲆ: "img/inv-point-machine-out.png",
        ⵠⵠᐃᐃⲆΔⵠ: "img/inv-point-machine-in.png",
        ⲆⵠⵠⵠⲆⵠΔ: "img/inv-point-machine-click.png",
        ᐃⲆᐃᐃⵠⵠΔ: "img/day-extractor-machine0-stone.png",
        ᐃⲆⲆⲆᐃⲆᐃ: "img/night-extractor-machine0-stone.png",
        ⲆⵠⲆⵠᐃⵠⲆ: "img/day-extractor-machine-stone.png",
        ᐃΔⲆⲆⲆⵠⵠ: "img/night-extractor-machine-stone.png",
        ΔⲆΔᐃⲆᐃⲆ: "img/inv-extractor-machine-stone-out.png",
        ⵠⲆΔΔᐃⵠΔ: "img/inv-extractor-machine-stone-in.png",
        ⵠⲆᐃΔΔΔⵠ: "img/inv-extractor-machine-stone-click.png",
        ⵠΔⲆΔᐃᐃΔ: "img/day-extractor-machine0-gold.png",
        ⵠⲆᐃᐃⲆⵠⲆ: "img/night-extractor-machine0-gold.png",
        ᐃⵠᐃⲆⲆⵠⲆ: "img/day-extractor-machine-gold.png",
        ⵠΔΔᐃΔᐃΔ: "img/night-extractor-machine-gold.png",
        ᐃⵠⲆΔⲆᐃᐃ: "img/inv-extractor-machine-gold-out.png",
        ⲆⲆᐃⲆⵠΔΔ: "img/inv-extractor-machine-gold-in.png",
        ⵠⲆΔᐃᐃᐃⵠ: "img/inv-extractor-machine-gold-click.png",
        ΔᐃΔᐃΔⲆⵠ: "img/day-extractor-machine0-diamond.png",
        ⵠΔⲆⲆΔᐃⲆ: "img/night-extractor-machine0-diamond.png",
        ᐃⵠⵠⵠⵠⵠⲆ: "img/day-extractor-machine-diamond.png",
        ⲆⵠⵠⲆⲆⵠᐃ: "img/night-extractor-machine-diamond.png",
        ⵠᐃⲆΔⲆΔᐃ: "img/inv-extractor-machine-diamond-out.png",
        ⵠΔΔᐃⵠΔΔ: "img/inv-extractor-machine-diamond-in.png",
        ᐃᐃᐃΔⵠΔⲆ: "img/inv-extractor-machine-diamond-click.png",
        ΔⲆⵠⵠⵠᐃᐃ: "img/day-extractor-machine0-amethyst.png",
        ᐃⲆⵠᐃⲆᐃⵠ: "img/night-extractor-machine0-amethyst.png",
        ΔΔᐃΔᐃΔⵠ: "img/day-extractor-machine-amethyst.png",
        ᐃᐃᐃⲆᐃⲆᐃ: "img/night-extractor-machine-amethyst.png",
        ΔᐃⵠΔⵠⵠΔ: "img/inv-extractor-machine-amethyst-out.png",
        ΔⲆⵠΔΔⲆⲆ: "img/inv-extractor-machine-amethyst-in.png",
        ΔΔⵠⵠᐃᐃⵠ: "img/inv-extractor-machine-amethyst-click.png",
        ΔᐃᐃⲆⵠᐃⵠ: "img/day-extractor-machine0-reidite.png",
        ΔΔΔᐃⵠΔᐃ: "img/night-extractor-machine0-reidite.png",
        ΔⵠⵠΔⲆⵠⲆ: "img/day-extractor-machine-reidite.png",
        ⵠΔᐃᐃΔΔΔ: "img/night-extractor-machine-reidite.png",
        ⲆᐃⵠᐃⵠΔΔ: "img/inv-extractor-machine-reidite-out.png",
        ΔⵠΔⵠⵠⵠᐃ: "img/inv-extractor-machine-reidite-in.png",
        ⲆᐃⵠᐃᐃⲆᐃ: "img/inv-extractor-machine-reidite-click.png",
        ⵠⵠⵠⲆᐃᐃⲆ: "img/extractor-cases.png",
        ⲆΔᐃⵠᐃⵠⵠ: "img/day-golden-hen.png",
        ⵠⵠΔⲆⲆⵠΔ: "img/night-golden-hen.png",
        ΔⲆᐃⵠΔᐃⲆ: "img/day-golden-chicken.png",
        ΔᐃᐃⲆΔᐃⲆ: "img/night-golden-chicken.png",
        ⲆᐃΔᐃⲆᐃᐃ: "img/hurt-golden-hen.png",
        ᐃᐃⲆⵠⵠⲆⵠ: "img/hurt-golden-chicken.png",
        ⵠⲆΔᐃⵠⲆⵠ: "img/logo-interface.png",
        ΔⲆΔᐃᐃⵠᐃ: "img/forest-mode-hover.png",
        ⲆΔΔᐃΔⲆⲆ: "img/normal-mode-hover.png",
        ᐃΔᐃᐃᐃΔⲆ: "img/vampire-mode-hover.png",
        ⲆⲆⲆⲆⲆⵠⲆ: "img/zombie-mode-hover.png",
        ⲆᐃΔᐃⵠΔⲆ: "img/community-mode-hover2.png",
        ⲆᐃⵠΔⲆⵠᐃ: "img/experimental-mode-hover.png",
        ΔⵠⲆⵠᐃⵠΔ: "img/zombie-mode-out.png",
        ᐃⲆᐃΔⲆⵠⵠ: "img/zombie-mode-in.png",
        ᐃⲆⲆⵠⵠᐃΔ: "img/zombie-mode-click.png",
        ⵠΔⲆⵠⵠⲆⵠ: "img/vampire-mode-out.png",
        ᐃΔⵠⲆⲆⲆΔ: "img/vampire-mode-in.png",
        ᐃⲆΔᐃΔᐃΔ: "img/vampire-mode-click.png",
        ᐃⲆΔⵠᐃᐃᐃ: "img/normal-mode-out.png",
        ΔΔⲆⵠΔΔᐃ: "img/normal-mode-in.png",
        ᐃᐃⲆⲆΔᐃⲆ: "img/normal-mode-click.png",
        ᐃΔⵠⵠⲆⲆⵠ: "img/forest-mode-out.png",
        ΔⵠⲆⲆΔΔᐃ: "img/forest-mode-in.png",
        ⲆᐃⲆᐃᐃⲆΔ: "img/forest-mode-click.png",
        ᐃⵠⲆⵠΔᐃⵠ: "img/community-mode-out.png",
        ᐃΔⲆⵠⵠΔᐃ: "img/community-mode-in.png",
        ᐃⲆⲆΔᐃⲆᐃ: "img/community-mode-click.png",
        ⵠᐃΔⵠᐃΔⵠ: "img/experimental-modes-out.png",
        ⲆᐃΔΔᐃᐃᐃ: "img/experimental-modes-in.png",
        ⵠⵠᐃⲆΔⵠⲆ: "img/experimental-modes-click.png",
        ⲆᐃⲆᐃᐃΔⵠ: "img/youtube-button-out.png",
        ᐃΔⵠΔᐃΔᐃ: "img/youtube-button-in.png",
        ΔΔᐃⵠⵠᐃⵠ: "img/youtube-button-click.png",
        ⲆΔⲆⲆⲆΔⵠ: "img/wiki-button-out.png",
        ΔΔⲆⵠᐃᐃⵠ: "img/wiki-button-in.png",
        ΔⵠⲆᐃⲆⲆΔ: "img/wiki-button-click.png",
        ΔⲆⲆⲆΔⵠᐃ: "img/twitter-button-out.png",
        ⲆΔΔΔᐃⲆΔ: "img/twitter-button-in.png",
        ΔΔⵠᐃⵠⲆⵠ: "img/twitter-button-click.png",
        ⵠⵠⵠᐃⲆⵠⵠ: "img/facebook-button-out.png",
        ΔΔⲆⵠΔᐃⵠ: "img/facebook-button-in.png",
        ⵠⲆᐃᐃᐃⲆⵠ: "img/facebook-button-click.png",
        ⲆⲆⲆΔᐃᐃΔ: "img/reddit-button-out.png",
        ᐃᐃΔⲆⲆᐃⲆ: "img/reddit-button-in.png",
        ᐃⲆⲆⵠⵠⲆⵠ: "img/reddit-button-click.png",
        ⲆⵠⲆⵠᐃⵠᐃ: "img/discord-button-out.png",
        ᐃⲆⵠᐃΔᐃᐃ: "img/discord-button-in.png",
        ᐃᐃⲆⵠⲆⵠⵠ: "img/discord-button-click.png",
        ⵠᐃΔⵠⵠᐃⵠ: "img/merch-button-out.png",
        ⲆΔΔⲆⲆᐃⵠ: "img/merch-button-in.png",
        ⲆᐃΔᐃᐃⲆΔ: "img/merch-button-click.png",
        ⵠⵠⵠᐃΔᐃⲆᐃΔ: "img/terminal-button-out.png",
        ᐃΔⵠΔᐃᐃⲆⲆΔ: "img/terminal-button-in.png",
        ΔⲆΔΔᐃⲆⵠᐃⵠ: "img/terminal-button-click.png",
        ⵠⵠΔⲆⲆᐃΔ: "img/restart-out.png",
        ΔⲆΔⲆᐃⵠⲆ: "img/restart-in.png",
        ⵠⲆⵠⵠᐃᐃΔ: "img/restart-click.png",
        ⲆⲆΔⲆᐃⲆⵠ: "img/guide-out.png",
        ⲆᐃᐃⲆⵠΔΔ: "img/guide-in.png",
        ᐃⲆⲆⵠⵠΔᐃ: "img/guide-click.png",
        ᐃᐃⲆⵠⲆᐃᐃ: "img/copy-paste-out.png",
        ⵠΔⲆᐃᐃΔⲆ: "img/copy-paste-in.png",
        ⵠⲆⲆⲆⲆΔᐃ: "img/copy-paste-click.png",
        ΔᐃΔᐃᐃⵠⲆ: "img/link-buttons-bg.png",
        ⵠⲆⵠΔᐃⵠᐃ: "img/changelog-box2.png",
        ᐃⵠⲆⲆΔⲆⵠ: "img/changelog_31.png",
        ⵠⲆⵠⵠΔⵠⵠ: "img/banner-taming.png",
        ⵠⵠⲆⲆᐃⲆⲆ: "img/profile-button-out.png",
        ΔΔⲆⲆΔⲆⵠ: "img/profile-button-in.png",
        ⲆᐃΔⵠΔⲆⵠ: "img/profile-button-click.png",
        ΔᐃⲆΔⵠΔⲆ: "img/login-button-out.png",
        ᐃⵠⲆⲆⵠᐃⵠ: "img/login-button-in.png",
        ΔⲆΔⲆⲆⲆᐃ: "img/login-button-click.png",
        ⲆⲆⵠᐃⵠⵠΔ: "img/login-google-out.png",
        ᐃΔᐃⵠᐃᐃᐃ: "img/login-google-in.png",
        ⲆᐃΔᐃⵠⲆⲆ: "img/login-google-click.png",
        ⵠⲆⵠᐃΔΔᐃ: "img/login-facebook-out.png",
        ᐃᐃⲆΔⵠⲆΔ: "img/login-facebook-in.png",
        ⵠⲆⲆΔⵠⲆΔ: "img/login-facebook-click.png",
        ⲆᐃΔⵠⲆᐃⲆ: "img/account-box.png",
        ⲆⵠΔΔΔΔΔΔⲆ: "img/account-under-maintenance.png",
        ⲆⵠᐃΔⵠᐃᐃ: "img/close-button-account-out.png",
        ⲆⵠΔΔⲆⵠᐃ: "img/close-button-account-in.png",
        ᐃⵠᐃΔᐃⲆᐃ: "img/close-button-account-click.png",
        ⵠⲆⲆⵠⲆΔⲆ: "img/play-button-out.png",
        ᐃΔⲆⵠᐃΔΔ: "img/play-button-in.png",
        ΔⵠᐃΔⲆᐃⲆ: "img/play-button-click.png",
        ⲆᐃⲆᐃⵠᐃⲆΔᐃ: "img/app-store-badge.png",
        ᐃΔᐃⲆΔᐃΔᐃⲆ: "img/play-store-badge.png",
        ᐃᐃΔΔⲆⲆΔⵠⵠ: "img/mobile-boxad.png",
        ΔⵠᐃⵠⲆᐃⲆ: "img/modify-name-out.png",
        ⲆⵠⲆⵠᐃΔΔ: "img/modify-name-in.png",
        ΔⵠⲆⵠⵠᐃᐃ: "img/modify-name-click.png",
        ⲆΔΔᐃᐃΔᐃ: "img/copy-id-button-out.png",
        ⲆⲆᐃΔⵠⵠⵠ: "img/copy-id-button-hover.png",
        ⲆᐃΔⲆΔⲆⵠ: "img/copy-id-button-active.png",
        ⲆⵠⵠⲆⲆⵠⵠ: "img/yes-button-out.png",
        ᐃⵠⵠⲆⲆⲆⲆ: "img/yes-button-in.png",
        ⵠΔᐃⲆᐃᐃⵠ: "img/yes-button-click.png",
        ΔΔⲆΔΔⵠᐃ: "img/yes-300-button-out.png",
        ⲆⲆᐃᐃⵠⲆⲆ: "img/yes-300-button-in.png",
        ΔᐃⵠᐃΔΔⲆ: "img/yes-300-button-click.png",
        ΔΔᐃⲆⲆΔⲆ: "img/no-button-out.png",
        ᐃⵠΔᐃΔΔⵠ: "img/no-button-in.png",
        ᐃΔⵠᐃⲆⲆⲆ: "img/no-button-click.png",
        ΔΔⲆᐃⲆᐃⵠ: "img/no-thanks-button-out.png",
        ᐃⲆⵠⵠⵠⲆⲆ: "img/no-thanks-button-in.png",
        ⲆᐃⲆΔᐃⲆᐃ: "img/no-thanks-button-click.png",
        ⲆⲆⲆᐃᐃⲆᐃ: "img/shop-button-out.png",
        ᐃⵠⲆⵠⲆΔᐃ: "img/shop-button-in.png",
        ⲆᐃΔΔΔΔΔ: "img/shop-button-click.png",
        ᐃᐃᐃΔⲆᐃⵠ: "img/logout-out.png",
        ⲆᐃᐃⵠΔⵠⲆ: "img/logout-in.png",
        ᐃᐃᐃΔᐃΔΔ: "img/logout-click.png",
        ⲆᐃⲆΔΔⲆΔ: "img/terms-button-out.png",
        ΔΔⲆᐃΔⲆΔ: "img/terms-button-in.png",
        ⵠΔⵠᐃⵠⵠⵠ: "img/terms-button-click.png",
        ⲆΔᐃΔⵠⲆⵠ: "img/tutorial-icon.png",
        ΔᐃⲆⲆΔⲆΔ: "img/skins-icon.png",
        ⲆᐃⲆⲆᐃⲆⵠ: "img/shop-icon.png",
        ΔΔᐃᐃᐃᐃᐃᐃᐃ: "img/paint-icon.png",
        ⵠΔΔⵠΔΔⵠ: "img/leaderboard-icon.png",
        ⲆⲆⵠⵠⵠⲆᐃ: "img/start-icon.png",
        ᐃΔⲆᐃᐃᐃᐃ: "img/profile-icon.png",
        ᐃⵠΔⲆⲆⵠⵠ: "img/server-access-icon2.png",
        ᐃⵠⲆΔΔᐃᐃ: "img/button-homepage-bg-out.png",
        ΔⲆᐃΔⵠⲆΔ: "img/button-homepage-bg-in.png",
        ΔΔⵠⲆΔᐃⵠ: "img/button-homepage-bg-click.png",
        ᐃᐃⲆⵠⵠᐃΔ: "img/button-bottom-homepage-bg-out.png",
        ΔΔΔΔⵠⵠᐃ: "img/button-bottom-homepage-bg-in.png",
        ⲆᐃⲆᐃⵠⲆᐃ: "img/button-bottom-homepage-bg-click.png",
        ⲆⵠᐃⵠΔᐃΔ: "img/lvl-player.png",
        ᐃΔⲆⲆⲆΔΔ: "img/avatar-player.png",
        ⲆᐃΔⲆᐃⲆᐃ: "img/avatar-player1.png",
        ΔΔᐃⲆⲆᐃⵠ: "img/avatar-player2.png",
        ⵠⵠⵠⲆⲆΔᐃ: "img/avatar-player3.png",
        ΔᐃᐃᐃΔΔⵠ: "img/avatar-player4.png",
        ⵠⲆΔⲆΔΔⲆ: "img/avatar-player5.png",
        ⵠᐃΔⲆⵠΔᐃ: "img/avatar-player6.png",
        ⲆᐃⲆᐃᐃΔΔ: "img/avatar-player7.png",
        ΔⵠΔⲆΔⵠⲆ: "img/avatar-player8.png",
        ΔᐃⵠΔⵠΔᐃ: "img/avatar-player9.png",
        ᐃΔⵠΔᐃⵠⲆ: "img/avatar-player10.png",
        ΔⵠⲆⲆⲆᐃⲆ: "img/avatar-player11.png",
        ᐃⲆⲆΔⵠⲆᐃ: "img/avatar-player12.png",
        ΔΔΔⲆⲆⲆⲆ: "img/avatar-player13.png",
        ⵠⲆⲆᐃᐃⲆⲆ: "img/avatar-player14.png",
        ⲆⵠΔⵠᐃⲆⲆ: "img/avatar-player14.png",
        ⵠᐃⵠⲆΔᐃΔ: "img/avatar-player14.png",
        ᐃⲆⵠΔⲆᐃΔ: "img/avatar-player14.png",
        ⲆⲆΔΔΔᐃᐃⲆⲆ: "img/golden-bread.png",
        ⵠΔⲆΔΔⵠᐃ: "img/buy-bread-out.png",
        ⲆⵠⵠΔΔΔΔ: "img/buy-bread-in.png",
        ᐃᐃᐃΔΔΔΔ: "img/buy-bread-click.png",
        ᐃⲆΔⲆⵠᐃᐃ: "img/gauge.png",
        ᐃⵠΔⵠⲆⲆⵠᐃᐃ: "img/season-4-out.png",
        ᐃⵠⵠᐃⵠΔⲆΔⵠ: "img/season-4-in.png",
        ΔⲆΔⲆⲆⲆΔⵠⲆ: "img/season-4-click.png",
        ᐃᐃⲆⵠⵠⲆᐃⵠⲆ: "img/season4-box.png",
        ΔᐃⵠⵠᐃᐃⲆᐃⵠ: "img/season-5-out.png",
        ⲆⲆᐃΔᐃᐃᐃⵠⵠ: "img/season-5-in.png",
        ᐃᐃᐃⵠΔᐃᐃⵠⲆ: "img/season-5-click.png",
        ΔⵠⵠⵠΔⵠⲆⲆⵠ: "img/season5-box.png",
        ⵠⲆΔᐃⵠᐃᐃ: "img/season-6-out.png",
        ΔⵠᐃⲆᐃⵠᐃ: "img/season-6-in.png",
        ⲆΔⲆⲆⲆⲆⲆ: "img/season-6-click.png",
        ΔⵠΔⵠᐃᐃⲆ: "img/season6-box.png",
        ᐃⵠᐃⲆΔⲆⵠ: "img/profile3-box.png",
        ᐃΔᐃΔⲆᐃᐃ: "img/skins-box.png",
        ⲆΔⵠⲆⲆᐃⵠ: "img/shop-box.png",
        ΔᐃΔⲆⲆⵠⲆⲆⵠ: "img/private-server-box.png",
        ΔⲆⵠΔⲆᐃᐃ: "img/location-box.png",
        ⵠⵠⲆⵠᐃⵠⲆ: "img/server-duration-box.png",
        ΔᐃΔⲆⵠᐃᐃ: "img/tutorial-box.png",
        ᐃΔᐃⲆⲆᐃⲆ: "img/leaderboard2-box.png",
        ⲆⲆᐃⵠΔⲆⵠ: "img/buy-breads-box.png",
        ⲆᐃΔᐃᐃᐃⲆ: "img/bag-box.png",
        ᐃⵠᐃᐃⲆΔᐃ: "img/deadbox-box.png",
        ᐃΔⵠⲆⵠΔᐃ: "img/book-box.png",
        ⵠⵠᐃᐃⵠᐃⲆ: "img/accessories-box.png",
        ᐃⲆⵠⲆⲆⲆⲆ: "img/customskin-box.png",
        ᐃΔⵠᐃⵠⲆⲆ: "img/bag-lasts.png",
        ⵠⲆⲆⵠⵠⵠΔ: "img/server-lasts.png",
        ⲆΔᐃⵠΔⲆⲆ: "img/server-access-box3.png",
        ᐃᐃⵠΔᐃⵠⲆ: "img/lootbox-box.png",
        ⵠΔⲆⲆΔΔΔ: "img/change-nickname0.png",
        ⲆᐃⲆΔⲆⲆⲆ: "img/change-nickname1.png",
        ⵠᐃΔⲆᐃᐃΔ: "img/cheating-box.png",
        ΔⵠΔⲆⵠᐃΔΔⲆ: "img/daily-quest-box.png",
        ⵠⲆᐃᐃᐃᐃⲆΔⵠ: "img/daily-5-bread.png",
        ⵠᐃΔᐃⵠⲆⵠΔⵠ: "img/daily-10-bread.png",
        ⲆⲆᐃⲆᐃΔⲆΔΔ: "img/daily-valid.png",
        ΔΔΔⵠᐃᐃᐃ: "img/normal-profile-out.png",
        ⵠⵠΔΔⵠⵠᐃ: "img/normal-profile-in.png",
        ᐃΔⵠⵠΔⲆᐃ: "img/normal-profile-click.png",
        ⲆⲆᐃΔᐃⵠⲆ: "img/forest-profile-out.png",
        ⲆᐃΔᐃΔⵠⲆ: "img/forest-profile-in.png",
        ⵠΔⲆⲆⵠⵠᐃ: "img/forest-profile-click.png",
        ᐃᐃᐃᐃᐃⲆⵠ: "img/zombie-profile-out.png",
        ΔⲆⵠᐃⵠΔΔ: "img/zombie-profile-in.png",
        ⲆⵠΔᐃⲆⲆⵠ: "img/zombie-profile-click.png",
        ⲆⵠΔⲆⲆⲆⵠ: "img/vampire-profile-out.png",
        ⲆᐃᐃⲆΔⲆⲆ: "img/vampire-profile-in.png",
        ⵠΔᐃᐃᐃⲆⲆ: "img/vampire-profile-click.png",
        ⵠᐃᐃᐃᐃⲆⲆ: "img/total-profile-out.png",
        ⲆᐃⵠᐃⵠⲆᐃ: "img/total-profile-in.png",
        ᐃⵠⵠᐃⲆᐃᐃ: "img/total-profile-click.png",
        ⵠΔᐃⵠⵠᐃΔ: "img/season1-out.png",
        ⲆⵠᐃΔⲆΔᐃ: "img/season1-in.png",
        ⲆΔⵠᐃΔⵠᐃ: "img/season1-click.png",
        ⵠⵠⵠᐃΔⵠᐃ: "img/season2-out.png",
        ⲆⵠⲆⲆᐃΔⵠ: "img/season2-in.png",
        Δⵠᐃᐃⵠⵠᐃ: "img/season2-click.png",
        ᐃᐃᐃΔΔᐃⲆ: "img/season3-out.png",
        ⵠᐃⵠⲆⵠⵠΔ: "img/season3-in.png",
        ΔΔⲆⵠᐃΔⲆ: "img/season3-click.png",
        ᐃⲆⲆΔⲆΔⲆ: "img/season4-out.png",
        ᐃⵠΔΔⲆΔΔ: "img/season4-in.png",
        ΔᐃⵠⵠⲆⲆⵠ: "img/season4-click.png",
        ᐃⲆᐃᐃⵠᐃⵠ: "img/season5-out.png",
        ⲆⲆⵠⲆᐃΔⵠ: "img/season5-in.png",
        ⲆΔΔⲆⲆⵠᐃ: "img/season5-click.png",
        ᐃⵠᐃⵠΔΔⵠ: "img/season6-out.png",
        ⵠᐃᐃᐃⵠⲆΔ: "img/season6-in.png",
        ᐃⲆΔΔΔⲆΔ: "img/season6-click.png",
        ⲆⵠⲆΔⲆⲆΔ: "img/locked-skin-alert.png",
        ΔᐃⵠΔΔⵠᐃ: "img/locked-custom-alert.png",
        ᐃⲆΔⵠΔⵠΔ: "img/bg-red-locked.png",
        ⲆᐃⲆⵠⵠⲆᐃ: "img/skin-button-out.png",
        ᐃᐃⲆΔⲆΔⲆ: "img/skin-button-in.png",
        ᐃⵠΔᐃΔⲆⲆ: "img/skin-button-click.png",
        ΔⲆⵠⲆⲆⵠⲆ: "img/accessory-button-out.png",
        ᐃⲆΔⵠⵠⲆⵠ: "img/accessory-button-in.png",
        ⲆⵠΔΔⵠⲆⲆ: "img/accessory-button-click.png",
        ΔΔᐃⲆΔΔⵠ: "img/bag-button-out.png",
        ᐃⵠΔᐃᐃᐃᐃ: "img/bag-button-in.png",
        ᐃᐃⵠⲆΔᐃᐃ: "img/bag-button-click.png",
        ΔΔⲆΔΔⵠⲆ: "img/book-button-out.png",
        ⲆᐃⵠᐃⲆΔΔ: "img/book-button-in.png",
        ΔᐃᐃᐃᐃΔⵠ: "img/book-button-click.png",
        ⲆⵠⵠΔᐃᐃⲆ: "img/deadbox-button-out.png",
        ᐃΔⵠΔⵠⲆⲆ: "img/deadbox-button-in.png",
        ⲆΔⵠᐃⵠᐃⵠ: "img/deadbox-button-click.png",
        ΔΔΔΔᐃⵠᐃ: "img/loot-button-out.png",
        ᐃⲆⵠⲆⵠᐃᐃ: "img/loot-button-in.png",
        ⲆⲆⲆⵠⲆⵠⵠ: "img/loot-button-click.png",
        ⲆᐃⵠⲆⲆⲆᐃ: "img/free-item-out.png",
        ᐃⵠΔⲆΔΔⵠ: "img/free-item-in.png",
        ⵠⵠⵠⵠⵠⵠΔ: "img/free-item-click.png",
        ᐃΔᐃⲆ: "img/wood-item-out.png",
        ⵠᐃᐃᐃ: "img/wood-item-in.png",
        ᐃΔΔᐃ: "img/wood-item-click.png",
        ΔᐃⲆᐃⲆΔⵠ: "img/stone-item.png",
        ⲆⵠⲆⵠᐃⲆⲆ: "img/stone-item-in.png",
        ⲆΔⵠΔᐃᐃⲆ: "img/stone-item-click.png",
        ⲆΔᐃⵠⲆⵠⲆ: "img/gold-item.png",
        ΔΔⵠΔΔᐃᐃ: "img/gold-item-in.png",
        ⵠΔⵠΔᐃΔⵠ: "img/gold-item-click.png",
        ΔᐃΔΔⲆΔⲆ: "img/diamond-item.png",
        ΔΔⲆᐃⲆΔⲆ: "img/diamond-item-in.png",
        ᐃⵠⵠᐃᐃᐃⵠ: "img/diamond-item-click.png",
        ᐃⲆΔΔᐃⲆᐃ: "img/amethyst-item.png",
        ⵠⵠΔⵠᐃⲆΔ: "img/amethyst-item-in.png",
        ΔᐃᐃΔᐃⲆΔ: "img/amethyst-item-click.png",
        ΔᐃⲆⲆⵠᐃᐃ: "img/reidite-item.png",
        ⵠⲆⵠⵠⲆⲆⵠ: "img/reidite-item-in.png",
        ΔⲆᐃⲆΔⵠⵠ: "img/reidite-item-click.png",
        ΔⲆᐃΔᐃΔⲆ: "img/special-item-out.png",
        ⲆΔᐃΔⵠⵠⲆ: "img/special-item-in.png",
        ⵠΔⲆᐃΔΔᐃ: "img/special-item-click.png",
        ᐃΔⲆᐃΔΔⲆ: "img/level-item-out.png",
        ⲆⵠⵠᐃᐃⵠΔ: "img/level-item-in.png",
        ⲆᐃΔⲆⵠⲆΔ: "img/level-item-click.png",
        ᐃⵠⲆΔⲆΔᐃ: "img/skin-previous-out.png",
        ⵠⲆⵠᐃᐃⵠᐃ: "img/skin-previous-in.png",
        ⲆⵠⵠᐃΔⲆᐃ: "img/skin-previous-click.png",
        ⵠⲆᐃⵠΔᐃⵠ: "img/skin-next-out.png",
        ⲆΔⵠⵠΔⵠΔ: "img/skin-next-in.png",
        ⲆⲆΔᐃᐃΔᐃ: "img/skin-next-click.png",
        ᐃⲆᐃᐃΔ: "img/back-button-out.png",
        ᐃⵠᐃⵠⵠ: "img/back-button-in.png",
        ⵠⲆⵠΔⵠ: "img/back-button-click.png",
        ⲆⲆᐃᐃᐃⲆⲆ: "img/get-more-button-out.png",
        ᐃΔΔᐃΔΔⵠ: "img/get-more-button-in.png",
        ⲆΔⵠᐃⵠⲆᐃ: "img/get-more-button-click.png",
        ᐃᐃΔᐃⵠⵠΔ: "img/currency1-out.png",
        ᐃᐃΔᐃᐃⵠⲆ: "img/currency1-in.png",
        ΔᐃΔⲆᐃⵠᐃ: "img/currency1-click.png",
        ⲆⵠⲆⲆᐃⲆⲆ: "img/currency2-out.png",
        ᐃⲆⵠⲆⲆⵠⲆ: "img/currency2-in.png",
        ΔΔⵠᐃⵠᐃⲆ: "img/currency2-click.png",
        ⲆⵠᐃⲆᐃᐃᐃ: "img/currency3-out.png",
        ⲆᐃⵠⵠⲆᐃⲆ: "img/currency3-in.png",
        ΔⵠⵠⲆΔΔΔ: "img/currency3-click.png",
        ⵠᐃⵠⲆⲆⵠⵠ: "img/currency4-out.png",
        ⲆⲆᐃⲆΔⵠᐃ: "img/currency4-in.png",
        ᐃⲆⲆΔⵠᐃΔ: "img/currency4-click.png",
        ᐃⵠⵠΔⵠⵠⵠ: "img/currency5-out.png",
        ⲆᐃⲆⲆⲆΔⵠ: "img/currency5-in.png",
        ⵠᐃΔᐃⵠᐃᐃ: "img/currency5-click.png",
        ⲆⲆⲆⵠⵠᐃⲆ: "img/price1-out.png",
        ΔΔᐃⵠᐃⲆⵠ: "img/price1-in.png",
        ⲆⲆᐃᐃⲆΔΔ: "img/price1-click.png",
        ΔΔᐃⵠᐃⵠΔ: "img/price2-out.png",
        ΔΔⵠⲆⲆⲆⲆ: "img/price2-in.png",
        ᐃΔᐃᐃⵠΔᐃ: "img/price2-click.png",
        ᐃⲆⵠⵠᐃᐃⵠ: "img/price3-out.png",
        ᐃΔⵠⲆᐃⵠΔ: "img/price3-in.png",
        ᐃΔᐃⲆⵠⲆΔ: "img/price3-click.png",
        ΔΔΔΔᐃᐃⵠ: "img/price4-out.png",
        ⵠΔⵠⵠⵠⲆᐃ: "img/price4-in.png",
        ΔΔᐃΔᐃⲆΔ: "img/price4-click.png",
        ᐃⲆⵠⲆᐃΔΔ: "img/price5-out.png",
        ⲆᐃⲆᐃⵠⲆΔ: "img/price5-in.png",
        ΔⲆⵠⵠᐃᐃΔ: "img/price5-click.png",
        ⲆⵠⲆⵠᐃᐃᐃⵠⵠ: "img/buy-private-server-out.png",
        ᐃⵠᐃᐃΔᐃΔⲆⵠ: "img/buy-private-server-in.png",
        ⵠⲆΔᐃΔⲆⲆᐃᐃ: "img/buy-private-server-click.png",
        ΔΔⵠΔⵠⵠΔ: "img/atlanta-button-out.png",
        ΔⲆⵠⲆΔΔⲆ: "img/atlanta-button-in.png",
        ᐃᐃⲆΔΔᐃᐃ: "img/atlanta-button-click.png",
        ᐃΔⲆᐃᐃⲆⵠ: "img/los-angeles-button-out.png",
        ⵠΔΔⵠᐃΔⵠ: "img/los-angeles-button-in.png",
        ⵠΔⲆⲆΔΔᐃ: "img/los-angeles-button-click.png",
        ᐃΔⲆⵠⵠⲆΔ: "img/sydney-button-out.png",
        ⲆΔᐃⲆᐃⲆⵠ: "img/sydney-button-in.png",
        ᐃⵠⲆᐃᐃⲆⲆ: "img/sydney-button-click.png",
        ⵠⵠⲆⵠⵠΔⵠ: "img/frankfurt-button-out.png",
        ⵠⲆⵠᐃᐃᐃΔ: "img/frankfurt-button-in.png",
        ᐃᐃⵠΔⲆⵠΔ: "img/frankfurt-button-click.png",
        ⲆⵠΔΔⵠⲆᐃ: "img/osaka-button-out.png",
        ⲆᐃΔⲆΔΔⵠ: "img/osaka-button-in.png",
        ΔᐃⵠⲆⲆΔⲆ: "img/osaka-button-click.png",
        ⲆᐃΔΔΔᐃⵠⵠⵠ: "img/yes-location-out.png",
        ⲆⵠⲆΔΔᐃᐃΔᐃ: "img/yes-location-in.png",
        ᐃΔⲆⲆⲆᐃΔⵠⲆ: "img/yes-location-click.png",
        ᐃⲆᐃⵠⲆⲆᐃ: "img/3days-button-out.png",
        ΔᐃⲆΔⲆᐃⵠ: "img/3days-button-in.png",
        ΔᐃⲆΔΔⲆΔ: "img/3days-button-click.png",
        ᐃΔΔⵠⲆⲆᐃ: "img/7days-button-out.png",
        ᐃⵠⵠΔᐃΔⵠ: "img/7days-button-in.png",
        ᐃⵠⵠⵠⲆΔᐃ: "img/7days-button-click.png",
        ⲆⲆⲆⵠΔΔⲆ: "img/30days-button-out.png",
        ⵠΔⲆⲆΔⵠᐃ: "img/30days-button-in.png",
        ⲆΔΔΔᐃⲆᐃ: "img/30days-button-click.png",
        ⵠΔⲆΔⵠⵠΔ: "img/90days-button-out.png",
        ᐃⲆᐃΔΔΔⵠ: "img/90days-button-in.png",
        ⲆⲆΔⵠᐃΔⲆ: "img/90days-button-click.png",
        ⲆΔᐃⲆᐃΔᐃ: "img/spin1.png",
        ⲆⵠᐃⵠⲆᐃᐃ: "img/spin2.png",
        ᐃΔⲆᐃΔⲆΔ: "img/spin3.png",
        ⵠⲆⵠⵠⵠⲆᐃ: "img/spin4.png",
        ΔᐃⲆᐃⲆᐃΔ: "img/spin5.png",
        ⵠΔΔᐃΔⵠᐃ: "img/spin6.png",
        ⵠᐃᐃⲆΔⵠⵠ: "img/arrow-spin.png",
        ΔⵠΔΔⲆΔⲆ: "img/spin-button-1-out.png",
        ⵠᐃⲆⵠΔⲆⵠ: "img/spin-button-1-in.png",
        ⵠΔΔⲆΔⲆⵠ: "img/spin-button-1-click.png",
        ⵠⲆᐃⵠⲆⲆⲆ: "img/spin-button-2-out.png",
        ⲆⵠᐃⲆⵠΔΔ: "img/spin-button-2-in.png",
        ΔⵠⵠⵠⲆⲆⵠ: "img/spin-button-2-click.png",
        ᐃⵠⲆⵠⲆⵠⵠ: "img/spin-button-3-out.png",
        ΔᐃᐃΔΔΔᐃ: "img/spin-button-3-in.png",
        ⲆᐃⲆⲆΔⵠⲆ: "img/spin-button-3-click.png",
        ΔⲆⵠⲆΔᐃⵠ: "img/spin-button-4-out.png",
        ⲆⵠⲆΔᐃⵠΔ: "img/spin-button-4-in.png",
        ΔᐃΔⲆᐃⲆⲆ: "img/spin-button-4-click.png",
        ⵠΔⲆⲆΔⵠⵠ: "img/spin-button-5-out.png",
        ⵠⲆΔΔⵠⲆΔ: "img/spin-button-5-in.png",
        ᐃᐃΔᐃᐃⵠⵠ: "img/spin-button-5-click.png",
        ΔᐃᐃⲆⲆⵠΔ: "img/spin-light.png",
        ⵠⲆⲆⵠᐃⲆⵠ: "img/tuto-wiki-out.png",
        ᐃΔⲆⲆΔᐃⲆ: "img/tuto-wiki-in.png",
        ᐃⲆΔΔⵠΔᐃ: "img/tuto-wiki-click.png",
        ᐃⲆΔΔΔΔⵠ: "img/tuto-previous-out.png",
        ⵠⵠᐃΔᐃⲆⵠ: "img/tuto-previous-in.png",
        ΔΔⲆⵠⵠᐃᐃ: "img/tuto-previous-click.png",
        Ⲇᐃᐃᐃᐃⵠⵠ: "img/tuto-next-out.png",
        ⲆΔᐃᐃᐃⵠᐃ: "img/tuto-next-in.png",
        ⲆΔⲆΔⵠΔΔ: "img/tuto-next-click.png",
        ᐃⲆⲆΔΔⵠⲆ: "img/time-leaderboard-out.png",
        ⵠⵠᐃᐃᐃᐃⵠ: "img/time-leaderboard-in.png",
        ⲆᐃᐃⲆᐃᐃⵠ: "img/time-leaderboard-click.png",
        ⵠⵠⵠΔⵠΔΔ: "img/score-leaderboard-out.png",
        ᐃⲆᐃΔⲆΔΔ: "img/score-leaderboard-in.png",
        ᐃⲆᐃⵠᐃⵠⲆ: "img/score-leaderboard-click.png",
        ⵠᐃⵠⲆΔⲆⵠ: "img/lvl-leaderboard-out.png",
        ⵠⲆⵠⵠⲆΔᐃ: "img/lvl-leaderboard-in.png",
        ⵠⵠΔⵠⵠᐃⲆ: "img/lvl-leaderboard-click.png",
        ⲆΔⲆᐃΔΔⲆ: "img/kill-leaderboard-out.png",
        ᐃⲆᐃⵠᐃⲆᐃ: "img/kill-leaderboard-in.png",
        ⲆⲆⲆᐃΔⲆⵠ: "img/kill-leaderboard-click.png",
        ⵠⲆᐃⲆᐃᐃⲆ: "img/all-leaderboard-out.png",
        ⲆⵠⲆΔⲆⵠᐃ: "img/all-leaderboard-in.png",
        ⲆᐃⲆᐃⵠⵠᐃ: "img/all-leaderboard-click.png",
        ⵠᐃⲆⲆⲆⵠⲆ: "img/today-leaderboard-out.png",
        ⵠⵠᐃⲆⵠⲆⵠ: "img/today-leaderboard-in.png",
        ⲆⲆᐃⲆΔΔⲆ: "img/today-leaderboard-click.png",
        ΔⵠΔΔⲆᐃᐃ: "img/week-leaderboard-out.png",
        ᐃⲆⲆⵠᐃᐃᐃ: "img/week-leaderboard-in.png",
        ⵠᐃΔⵠᐃᐃⲆ: "img/week-leaderboard-click.png",
        ⲆⵠΔᐃⲆⵠᐃ: "img/season1-out.png",
        ⲆⲆⵠΔᐃⲆⵠ: "img/season1-in.png",
        ΔⲆⵠΔⲆᐃⲆ: "img/season1-click.png",
        ⲆΔᐃΔᐃⵠΔ: "img/season2-out.png",
        ᐃᐃΔᐃᐃΔᐃ: "img/season2-in.png",
        ΔᐃᐃⵠΔⵠΔ: "img/season2-click.png",
        ⲆⵠⵠⵠᐃⵠΔ: "img/season3-out.png",
        ⲆⲆΔⵠᐃⲆⲆ: "img/season3-in.png",
        ⵠᐃᐃⲆⲆⲆΔ: "img/season3-click.png",
        ΔⲆⲆⲆΔⲆⵠ: "img/season4-out.png",
        ΔⲆⵠΔⲆⵠⵠ: "img/season4-in.png",
        ⲆᐃⲆⲆᐃⵠᐃ: "img/season4-click.png",
        ⵠΔⵠⵠᐃᐃⲆ: "img/season5-out.png",
        ᐃⲆⲆΔᐃΔⵠ: "img/season5-in.png",
        ⲆΔⲆⵠᐃΔⲆ: "img/season5-click.png",
        ⵠᐃⲆⵠⵠⲆᐃ: "img/season6-out.png",
        ᐃΔᐃΔΔᐃᐃ: "img/season6-in.png",
        ᐃᐃᐃⲆⲆΔᐃ: "img/season6-click.png",
        ᐃΔⲆΔΔⲆΔ: "img/total-lead-out.png",
        ΔΔⲆΔᐃΔΔ: "img/total-lead-in.png",
        ΔⵠⵠᐃΔⲆᐃ: "img/total-lead-click.png",
        ΔΔᐃⲆⵠⵠΔ: "img/normal-lead-out.png",
        ⵠΔⵠΔⵠᐃΔ: "img/normal-lead-in.png",
        ⲆᐃⵠⵠⲆⲆⵠ: "img/normal-lead-click.png",
        ΔⵠⵠΔⵠΔᐃ: "img/forest-lead-out.png",
        ΔⵠΔⲆⲆᐃᐃ: "img/forest-lead-in.png",
        ΔΔΔᐃⵠⲆⲆ: "img/forest-lead-click.png",
        ᐃⵠⲆⵠΔⲆⵠ: "img/vampire-lead-out.png",
        ΔⵠᐃΔΔΔⵠ: "img/vampire-lead-in.png",
        ⲆⲆⵠⵠⲆᐃⵠ: "img/vampire-lead-click.png",
        ᐃⵠⲆⲆⲆΔⵠ: "img/zombie-lead-out.png",
        ΔᐃΔΔⵠΔⵠ: "img/zombie-lead-in.png",
        ᐃⵠΔᐃⵠⲆⵠ: "img/zombie-lead-click.png",
        ⲆⲆⲆⵠⵠⲆΔ: "img/day-level5.png",
        ⵠⵠΔⲆⵠΔᐃ: "img/night-level5.png",
        ⵠΔⲆⲆⲆΔⲆ: "img/day-level10.png",
        ᐃⵠΔⵠⲆᐃⲆ: "img/night-level10.png",
        ΔΔⵠΔⵠⲆᐃ: "img/day-level15.png",
        ⲆⵠⵠΔⲆⵠⵠ: "img/night-level15.png",
        ᐃⲆⵠΔΔᐃΔ: "img/day-level20.png",
        ᐃⲆΔⵠᐃΔΔ: "img/night-level20.png",
        ⵠⲆΔΔⵠᐃΔ: "img/day-level25.png",
        ΔᐃⵠⲆΔΔⵠ: "img/night-level25.png",
        ⲆⲆⲆᐃⵠⲆΔ: "img/day-level30.png",
        ΔⵠⵠᐃΔⲆΔ: "img/night-level30.png",
        ⵠᐃⵠⲆⵠⵠᐃ: "img/day-level35.png",
        ⲆΔᐃΔⲆⵠⲆ: "img/night-level35.png",
        ⲆΔⲆΔⲆⲆⲆ: "img/day-level40.png",
        ⲆⲆΔⵠᐃΔΔ: "img/night-level40.png",
        ΔⵠⲆΔⵠⲆⲆ: "img/day-level45.png",
        Δᐃⵠᐃᐃᐃⵠ: "img/night-level45.png",
        ᐃΔⵠᐃⵠⲆΔ: "img/day-level50.png",
        ⵠᐃⲆᐃᐃⵠⲆ: "img/night-level50.png",
        ᐃᐃᐃΔᐃⵠⲆ: "img/day-level55.png",
        ⵠⵠⵠᐃⵠⲆΔ: "img/night-level55.png",
        ⵠᐃⵠᐃⵠⵠᐃ: "img/day-level60.png",
        ⵠⵠΔⵠΔⵠⵠ: "img/night-level60.png",
        ⲆⵠⵠⲆⵠᐃⵠ: "img/day-skin-devast0.png",
        ⲆⵠⲆⲆΔᐃᐃ: "img/night-skin-devast0.png",
        ΔⵠⲆΔΔΔΔ: "img/day-hand-devaster.png",
        ᐃᐃⲆΔⵠⲆᐃ: "img/night-hand-devaster.png",
        ⲆΔⵠᐃⲆⲆⲆ: "img/day-skin-star0.png",
        ⲆⵠⵠΔΔⲆΔ: "img/night-skin-star0.png",
        ⵠΔⵠⵠΔⵠⵠ: "img/day-hand-star0.png",
        ⲆΔⵠⵠⲆᐃᐃ: "img/night-hand-star0.png",
        ⲆⵠΔⵠⲆΔᐃ: "img/day-vampire.png",
        ᐃΔⲆᐃⵠΔᐃ: "img/night-vampire.png",
        ᐃΔⵠΔⵠⵠᐃ: "img/day-hand-vampire.png",
        ⵠᐃᐃⲆⵠΔΔ: "img/night-hand-vampire.png",
        ᐃⲆΔΔⲆΔⲆ: "img/day-zombie.png",
        ΔΔᐃⵠᐃΔΔ: "img/night-zombie.png",
        ⵠΔΔΔΔᐃᐃ: "img/day-hand-zombie.png",
        ᐃⲆᐃⲆⲆⵠⵠ: "img/night-hand-zombie.png",
        ⵠⲆΔΔⵠᐃᐃ: "img/day-skin113.png",
        ΔΔⵠⲆⵠᐃᐃ: "img/night-skin113.png",
        ΔⲆᐃΔᐃⵠᐃ: "img/day-hand-skin113.png",
        ⵠⲆⵠⲆΔΔⵠ: "img/night-hand-skin113.png",
        ⵠⵠⲆⵠᐃⲆΔ: "img/day-skin0.png",
        ⲆΔΔᐃⲆᐃⵠ: "img/night-skin0.png",
        ⲆΔΔⲆᐃᐃᐃ: "img/day-skin1.png",
        ᐃⵠᐃⲆⲆᐃⵠ: "img/night-skin1.png",
        ⵠΔⵠΔⲆΔᐃ: "img/day-skin2.png",
        ⵠᐃⵠⵠΔⵠᐃ: "img/night-skin2.png",
        ᐃⲆⲆΔΔⵠⵠ: "img/day-skin3.png",
        ⲆⵠᐃⲆⲆⵠⵠ: "img/night-skin3.png",
        ᐃⲆⲆⲆᐃΔΔ: "img/day-skin4.png",
        ⲆᐃᐃΔⲆⲆⲆ: "img/night-skin4.png",
        ᐃⵠΔⲆⵠⲆᐃ: "img/day-skin5.png",
        ⲆⵠⵠⵠⲆΔᐃ: "img/night-skin5.png",
        ΔⵠⵠᐃⲆᐃΔ: "img/day-skin6.png",
        ΔⲆⵠᐃⵠⵠᐃ: "img/night-skin6.png",
        ΔΔᐃⲆᐃΔΔ: "img/day-skin7.png",
        ᐃΔⵠⲆⵠⵠⵠ: "img/night-skin7.png",
        ΔΔⲆᐃᐃⵠᐃ: "img/day-skin8.png",
        ⲆᐃⵠⵠᐃⲆⲆ: "img/night-skin8.png",
        ⲆΔⵠΔⲆᐃⵠ: "img/day-skin9.png",
        ᐃΔΔΔᐃᐃΔ: "img/night-skin9.png",
        ⲆⵠⵠΔᐃⲆⵠ: "img/day-skin10.png",
        ⲆᐃΔⲆⲆⲆᐃ: "img/night-skin10.png",
        ᐃⲆΔⵠⵠΔᐃ: "img/day-skin11.png",
        ⵠᐃΔᐃⵠᐃⵠ: "img/night-skin11.png",
        ᐃⵠⲆΔⵠⵠⵠ: "img/day-skin12.png",
        ᐃᐃⲆΔᐃΔΔ: "img/night-skin12.png",
        ⵠᐃᐃΔⲆΔΔ: "img/day-skin13.png",
        ΔΔΔΔⵠⲆΔ: "img/night-skin13.png",
        ᐃⵠⲆᐃⲆⵠⵠ: "img/day-skin14.png",
        ⲆⵠⲆᐃⵠΔⵠ: "img/night-skin14.png",
        ⲆⲆΔᐃΔᐃᐃ: "img/day-skin15.png",
        ⲆΔⲆⲆⵠΔᐃ: "img/night-skin15.png",
        ⵠᐃⵠΔΔⵠΔ: "img/day-skin16.png",
        ΔⵠΔᐃⵠᐃⵠ: "img/night-skin16.png",
        ΔᐃⲆⵠΔΔⵠ: "img/day-skin17.png",
        ⵠᐃⲆΔⵠⵠⲆ: "img/night-skin17.png",
        ᐃⲆⲆΔⲆΔⵠ: "img/day-skin18.png",
        ᐃⵠΔᐃΔⲆᐃ: "img/night-skin18.png",
        ⲆΔᐃᐃΔⵠⲆ: "img/day-skin19.png",
        ⵠⲆⲆΔⵠⲆⵠ: "img/night-skin19.png",
        ᐃⲆⲆᐃᐃⲆΔ: "img/day-skin20.png",
        ⲆᐃΔⵠᐃΔⲆ: "img/night-skin20.png",
        ᐃΔⲆⲆⵠⲆΔ: "img/day-skin21.png",
        ⵠᐃⵠᐃⲆⲆΔ: "img/night-skin21.png",
        ΔᐃᐃᐃⵠΔⲆ: "img/day-skin22.png",
        ⵠᐃⵠᐃⲆⲆⲆ: "img/night-skin22.png",
        ⲆⲆᐃᐃⲆᐃⵠ: "img/day-skin23.png",
        ᐃᐃΔⲆⵠΔⲆ: "img/night-skin23.png",
        ⲆⵠⵠΔᐃⵠᐃ: "img/day-skin24.png",
        ⲆⲆᐃⲆⵠΔⲆ: "img/night-skin24.png",
        ΔⵠᐃⵠⲆΔᐃ: "img/day-skin25.png",
        ⵠᐃⵠⲆⲆᐃⵠ: "img/night-skin25.png",
        ᐃΔΔⲆΔΔΔ: "img/day-skin26.png",
        ⲆΔⲆΔⲆᐃⵠ: "img/night-skin26.png",
        ⲆⵠΔᐃⵠΔⲆ: "img/day-skin27.png",
        ΔᐃⵠΔΔΔᐃ: "img/night-skin27.png",
        ᐃⵠⲆⵠᐃᐃⲆ: "img/day-skin28.png",
        ⵠⲆⲆⵠⵠⲆᐃ: "img/night-skin28.png",
        ΔⵠⲆⵠΔΔᐃ: "img/day-skin29.png",
        ⵠⵠⵠⵠᐃⲆⲆ: "img/night-skin29.png",
        ⲆⲆⵠⵠΔⵠᐃ: "img/day-skin30.png",
        ΔᐃⵠΔΔᐃⵠ: "img/night-skin30.png",
        ᐃⲆⵠΔⵠⵠⲆ: "img/day-skin31.png",
        ⲆⵠⵠΔⵠⲆΔ: "img/night-skin31.png",
        ΔΔⲆᐃᐃᐃΔ: "img/day-skin32.png",
        ⵠⲆΔⲆⲆⲆⲆ: "img/night-skin32.png",
        ᐃⵠⵠⲆΔᐃΔ: "img/day-skin33.png",
        ⵠⵠⵠⲆΔⵠᐃ: "img/night-skin33.png",
        ⵠⲆᐃᐃⲆᐃⲆ: "img/day-skin34.png",
        ⲆⵠᐃΔΔΔΔ: "img/night-skin34.png",
        ⵠⵠΔⲆᐃΔᐃ: "img/day-skin35.png",
        ΔΔΔⵠᐃⲆⵠ: "img/night-skin35.png",
        ᐃΔⲆΔⲆΔⲆ: "img/day-skin36.png",
        ΔΔⵠⲆⵠⲆᐃ: "img/night-skin36.png",
        ⲆⲆΔΔΔⵠΔ: "img/day-skin37.png",
        ⵠⲆᐃᐃⲆΔᐃ: "img/night-skin37.png",
        ⲆᐃΔᐃⲆᐃⵠ: "img/day-skin38.png",
        ᐃⵠᐃΔⲆⵠⲆ: "img/night-skin38.png",
        ᐃⲆᐃⲆᐃᐃΔ: "img/day-skin39.png",
        ⵠⵠⲆΔᐃΔΔ: "img/night-skin39.png",
        ΔⵠⵠⲆᐃⵠᐃ: "img/day-skin40.png",
        ΔⵠΔΔΔᐃΔ: "img/night-skin40.png",
        ΔⲆⵠᐃⵠΔⲆ: "img/day-skin41.png",
        ⲆⵠᐃⵠΔⵠⵠ: "img/night-skin41.png",
        ⲆⵠⵠⲆⲆᐃⵠ: "img/day-skin42.png",
        ᐃⲆᐃⲆⵠΔⵠ: "img/night-skin42.png",
        ΔⲆⵠΔⲆΔΔ: "img/day-skin43.png",
        ᐃΔᐃⵠᐃⵠΔ: "img/night-skin43.png",
        ⵠⲆᐃᐃⵠⵠᐃ: "img/day-skin44.png",
        ⵠⵠΔⲆⵠΔⲆ: "img/night-skin44.png",
        ⵠⵠΔⲆⲆᐃᐃ: "img/day-skin45.png",
        ⵠᐃΔᐃΔΔⲆ: "img/night-skin45.png",
        ΔᐃᐃⲆⵠⲆⵠ: "img/day-skin46.png",
        ᐃⲆᐃΔⲆⲆⲆ: "img/night-skin46.png",
        ΔⲆᐃⲆᐃΔᐃ: "img/day-skin47.png",
        ᐃᐃⵠΔⵠΔΔ: "img/night-skin47.png",
        ⲆⲆⲆΔΔΔᐃ: "img/day-skin48.png",
        ⵠⵠᐃΔⲆᐃΔ: "img/night-skin48.png",
        ⲆΔⵠᐃⵠⲆⵠ: "img/day-skin49.png",
        ᐃⲆⲆᐃⲆⵠΔ: "img/night-skin49.png",
        ᐃᐃⵠᐃⲆⲆᐃ: "img/day-skin50.png",
        ΔⵠᐃΔⵠᐃΔ: "img/night-skin50.png",
        ⲆⲆⵠⵠⵠⲆⲆ: "img/day-skin51.png",
        ⲆᐃᐃⵠⵠᐃΔ: "img/night-skin51.png",
        ⵠᐃⲆⲆΔⲆᐃ: "img/day-skin52.png",
        ΔΔⲆΔⲆⲆⵠ: "img/night-skin52.png",
        ⵠⵠⲆΔⵠᐃⵠ: "img/day-skin53.png",
        ΔᐃΔΔΔⲆΔ: "img/night-skin53.png",
        ᐃΔΔⵠⵠΔⲆ: "img/day-skin54.png",
        ΔⵠΔΔᐃⵠΔ: "img/night-skin54.png",
        ⵠᐃⵠⵠᐃᐃⲆ: "img/day-skin55.png",
        ᐃΔⵠΔᐃᐃⵠ: "img/night-skin55.png",
        ᐃⵠᐃⲆⵠᐃⲆ: "img/day-skin56.png",
        ΔᐃⲆᐃᐃⲆⵠ: "img/night-skin56.png",
        ⲆⲆⵠⲆⵠΔⵠ: "img/day-skin57.png",
        ΔⲆᐃΔⵠΔΔ: "img/night-skin57.png",
        ⲆΔⲆⵠⵠⵠⵠ: "img/day-skin58.png",
        ᐃⲆᐃᐃⲆⵠⲆ: "img/night-skin58.png",
        ΔᐃᐃᐃΔᐃΔ: "img/day-skin59.png",
        ΔᐃⵠᐃᐃⲆⵠ: "img/night-skin59.png",
        ΔⲆᐃΔΔⵠᐃ: "img/day-skin60.png",
        ⲆᐃⵠⵠⲆᐃΔ: "img/night-skin60.png",
        ⲆⵠⵠᐃᐃⲆⲆ: "img/day-skin61.png",
        ΔΔΔⵠⲆⲆᐃ: "img/night-skin61.png",
        ⵠΔΔⲆⵠⵠΔ: "img/day-skin62.png",
        ᐃⵠᐃᐃⲆⲆⵠ: "img/night-skin62.png",
        ᐃᐃⵠΔⲆᐃᐃ: "img/day-skin63.png",
        ⵠᐃⵠⵠⵠᐃΔ: "img/night-skin63.png",
        ΔᐃⵠⵠᐃΔⲆ: "img/day-skin64.png",
        ΔⲆⲆⵠᐃⲆᐃ: "img/night-skin64.png",
        ⵠⵠⵠᐃⵠΔⲆ: "img/day-skin65.png",
        ⲆⵠⲆᐃᐃΔᐃ: "img/night-skin65.png",
        ⲆᐃⵠⵠⲆᐃᐃ: "img/day-skin66.png",
        ⵠⲆⵠΔⲆᐃᐃ: "img/night-skin66.png",
        ⲆᐃΔⵠⲆΔᐃ: "img/day-skin67.png",
        ᐃⲆⵠⲆΔΔᐃ: "img/night-skin67.png",
        ⵠⲆᐃⲆΔⵠΔ: "img/day-skin68.png",
        ΔᐃΔᐃᐃᐃΔ: "img/night-skin68.png",
        ⵠⵠᐃⲆΔΔΔ: "img/day-skin69.png",
        ⲆΔᐃⲆⵠΔⲆ: "img/night-skin69.png",
        ᐃΔΔΔᐃⵠⲆ: "img/day-skin70.png",
        ΔΔΔᐃᐃⲆⵠ: "img/night-skin70.png",
        ᐃΔⵠᐃᐃᐃⲆ: "img/day-skin71.png",
        ᐃᐃⵠⲆⵠⲆΔ: "img/night-skin71.png",
        ⵠΔⲆⵠᐃΔⵠ: "img/day-skin72.png",
        ΔⲆⵠΔΔⵠⵠ: "img/night-skin72.png",
        ᐃⵠⵠᐃΔᐃᐃ: "img/day-skin73.png",
        ⲆΔΔᐃⵠᐃⲆ: "img/night-skin73.png",
        ᐃⲆⲆⵠᐃⵠⵠ: "img/day-skin74.png",
        ⵠⲆⲆᐃᐃⵠᐃ: "img/night-skin74.png",
        ⲆᐃⵠⵠⵠᐃΔ: "img/day-skin75.png",
        ΔⵠᐃⲆΔⲆⲆ: "img/night-skin75.png",
        ⵠⲆⵠᐃᐃⲆⵠ: "img/day-skin76.png",
        ⲆΔΔⲆΔᐃΔ: "img/night-skin76.png",
        ⲆⲆⵠΔⵠⵠΔ: "img/day-skin77.png",
        ΔΔΔⲆⵠⵠⲆ: "img/night-skin77.png",
        ᐃⲆⵠⲆᐃΔᐃ: "img/day-skin78.png",
        ᐃⲆⲆⲆⵠⵠⲆ: "img/night-skin78.png",
        ΔᐃⵠⵠΔⵠΔ: "img/day-skin79.png",
        ᐃΔΔΔⵠΔᐃ: "img/night-skin79.png",
        ⲆⲆⲆⲆⲆΔⵠ: "img/day-skin80.png",
        ⲆΔΔᐃΔⲆΔ: "img/night-skin80.png",
        ⲆⲆΔᐃⲆΔⲆ: "img/day-skin81.png",
        ⲆⲆΔⵠⵠⲆⵠ: "img/night-skin81.png",
        ᐃΔᐃᐃᐃⵠᐃ: "img/day-skin82.png",
        ΔΔᐃⲆᐃⵠΔ: "img/night-skin82.png",
        ᐃΔⵠⵠᐃΔⵠ: "img/day-skin83.png",
        ᐃⵠⲆΔΔⲆⵠ: "img/night-skin83.png",
        ΔᐃΔᐃΔΔⵠ: "img/day-skin84.png",
        ⲆᐃⵠΔⵠΔᐃ: "img/night-skin84.png",
        ⲆΔᐃⵠⵠᐃᐃ: "img/day-skin85.png",
        ⵠⲆᐃΔᐃΔΔ: "img/night-skin85.png",
        ⲆⵠⲆΔⲆⲆⵠ: "img/day-skin86.png",
        ⵠΔΔⲆΔᐃⵠ: "img/night-skin86.png",
        Δⵠⵠᐃⵠⵠⵠ: "img/day-skin87.png",
        ⵠⲆΔⵠᐃΔΔ: "img/night-skin87.png",
        ⲆⵠⲆΔⲆᐃΔ: "img/day-skin88.png",
        ΔΔⵠⲆΔⵠᐃ: "img/night-skin88.png",
        ΔΔᐃΔᐃᐃΔ: "img/day-skin89.png",
        ΔⵠᐃᐃΔⲆᐃ: "img/night-skin89.png",
        ᐃⲆⲆᐃⵠΔⲆ: "img/day-skin90.png",
        ⵠⲆⲆᐃᐃᐃΔ: "img/night-skin90.png",
        ΔⲆⲆⵠΔᐃⵠ: "img/day-skin91.png",
        ⲆᐃᐃⵠᐃΔⵠ: "img/night-skin91.png",
        ΔⲆⵠΔⵠΔⲆ: "img/day-skin92.png",
        ⲆⲆᐃᐃⵠⵠΔ: "img/night-skin92.png",
        ᐃⲆⵠⵠΔⵠⵠ: "img/day-skin93.png",
        ΔΔᐃᐃΔᐃΔ: "img/night-skin93.png",
        ᐃⵠⵠΔⲆⲆᐃ: "img/day-skin94.png",
        ᐃⲆⲆⵠⲆᐃⲆ: "img/night-skin94.png",
        ΔΔΔⲆΔⲆⲆ: "img/day-skin95.png",
        ᐃⲆⲆⲆⵠΔⲆ: "img/night-skin95.png",
        ⲆⲆⲆⲆⵠⲆΔ: "img/day-skin96.png",
        ᐃⵠⵠᐃᐃⲆⵠ: "img/night-skin96.png",
        ⵠΔᐃΔΔⲆᐃ: "img/day-skin97.png",
        ⵠΔⲆⵠΔⵠᐃ: "img/night-skin97.png",
        ΔⵠⵠΔΔⲆⲆ: "img/day-skin98.png",
        ⲆⵠⲆⲆⵠⵠΔ: "img/night-skin98.png",
        ⵠᐃⵠΔΔⲆᐃ: "img/day-skin99.png",
        ⵠⵠⲆⵠⲆⲆⲆ: "img/night-skin99.png",
        ΔᐃΔΔᐃᐃᐃ: "img/day-skin100.png",
        ⵠᐃⲆⲆΔᐃⵠ: "img/night-skin100.png",
        ΔΔᐃⵠⵠᐃΔ: "img/day-skin101.png",
        ΔᐃᐃⲆⵠΔⲆ: "img/night-skin101.png",
        ΔᐃⲆΔᐃΔΔ: "img/day-skin102.png",
        ⵠΔΔΔⵠⵠⵠ: "img/night-skin102.png",
        ⵠᐃᐃⵠⲆⵠⵠ: "img/day-skin103.png",
        ⲆᐃⵠᐃⲆΔⲆ: "img/night-skin103.png",
        ⵠᐃⵠΔᐃⵠΔ: "img/day-skin104.png",
        ΔᐃᐃⵠᐃᐃⲆ: "img/night-skin104.png",
        ⵠⵠⲆᐃⵠⵠΔ: "img/day-skin105.png",
        ΔΔⵠⵠΔⵠΔ: "img/night-skin105.png",
        ⲆⲆⲆⵠΔΔΔ: "img/day-skin106.png",
        ᐃⵠᐃⲆᐃΔᐃ: "img/night-skin106.png",
        ΔᐃⲆⲆΔΔⲆ: "img/day-skin107.png",
        ⵠⲆΔⲆᐃΔΔ: "img/night-skin107.png",
        ⵠⵠⲆⵠⲆᐃΔ: "img/day-skin108.png",
        ⲆΔᐃⲆⵠΔᐃ: "img/night-skin108.png",
        ΔⵠⵠᐃᐃⵠΔ: "img/day-skin109.png",
        ⲆᐃⵠⲆⲆⲆΔ: "img/night-skin109.png",
        Δᐃⵠᐃᐃⵠⵠ: "img/day-skin110.png",
        ⲆⵠΔⵠⵠΔⲆ: "img/night-skin110.png",
        ⵠΔⲆⲆᐃⵠⵠ: "img/day-skin111.png",
        ⵠⵠⲆⲆΔΔΔ: "img/night-skin111.png",
        ⲆᐃΔⵠⵠⵠᐃ: "img/day-skin112.png",
        ⲆⵠⵠᐃΔⲆⲆ: "img/night-skin112.png",
        ⵠⵠⵠⵠⵠⵠΔⲆᐃ: "img/day-skin113.png",
        ᐃⲆⲆᐃⲆⲆᐃⲆⲆ: "img/night-skin113.png",
        ⵠⵠⵠⲆᐃᐃΔ: "img/day-skin114.png",
        ᐃⵠΔⲆᐃᐃᐃ: "img/night-skin114.png",
        ᐃΔΔᐃⵠᐃΔ: "img/day-skin115.png",
        ⵠⵠⲆⵠᐃⵠᐃ: "img/night-skin115.png",
        ⲆⲆⵠᐃΔⲆⵠ: "img/day-skin116.png",
        ᐃⵠᐃΔΔⲆⲆ: "img/night-skin116.png",
        ΔⲆΔΔⵠⲆᐃ: "img/day-skin117.png",
        ⲆᐃᐃⵠΔⲆⵠ: "img/night-skin117.png",
        ΔΔΔⵠᐃᐃΔ: "img/day-skin118.png",
        ᐃΔⲆⵠᐃᐃⵠ: "img/night-skin118.png",
        ᐃΔⲆⵠⵠⲆᐃ: "img/day-skin119.png",
        ⵠΔⵠᐃⲆΔⲆ: "img/night-skin119.png",
        ⵠⵠᐃⵠᐃᐃᐃ: "img/day-skin120.png",
        ⵠⵠⵠᐃᐃᐃⵠ: "img/night-skin120.png",
        ΔⵠΔΔᐃⵠⲆ: "img/day-skin121.png",
        ΔᐃΔᐃΔⲆΔ: "img/night-skin121.png",
        ΔᐃⵠⵠᐃⲆⵠ: "img/day-skin122.png",
        ΔⲆᐃⲆⲆΔⲆ: "img/night-skin122.png",
        ⵠΔΔᐃⲆΔⲆ: "img/day-skin123.png",
        ⲆΔⲆⵠⵠΔΔ: "img/night-skin123.png",
        ΔⵠⵠⲆⲆᐃΔ: "img/day-skin124.png",
        ᐃⵠⵠᐃⲆⵠΔ: "img/night-skin124.png",
        ⲆΔⵠⵠᐃⵠⲆ: "img/day-skin125.png",
        ⲆᐃΔⵠΔⵠᐃ: "img/night-skin125.png",
        ⵠⵠⵠᐃⲆΔΔ: "img/day-skin126.png",
        ᐃⵠᐃΔⲆᐃⲆ: "img/night-skin126.png",
        ⵠⲆⵠᐃΔᐃⲆ: "img/day-skin127.png",
        ⵠᐃΔᐃᐃΔᐃ: "img/night-skin127.png",
        ΔΔΔⵠⲆⲆⵠ: "img/day-skin128.png",
        ᐃΔⵠⲆⵠᐃΔ: "img/night-skin128.png",
        ⵠᐃⵠᐃⵠᐃΔ: "img/day-skin129.png",
        ⵠᐃⲆΔⲆΔⵠ: "img/night-skin129.png",
        ΔᐃⲆⲆⵠΔᐃ: "img/day-skin130-1.png",
        ⲆᐃⲆᐃΔⵠᐃ: "img/night-skin130-1.png",
        ΔⲆᐃⲆᐃⲆᐃ: "img/day-skin131.png",
        ⵠⲆᐃΔΔᐃⲆ: "img/night-skin131.png",
        ⵠⵠᐃⲆᐃΔᐃ: "img/day-skin132.png",
        ᐃⵠΔΔᐃΔᐃ: "img/night-skin132.png",
        ⲆⲆⲆⲆⵠⵠᐃ: "img/day-skin133.png",
        ⲆᐃᐃⲆⲆⵠᐃ: "img/night-skin133.png",
        ⲆᐃᐃⲆⲆᐃΔ: "img/day-skin134.png",
        ᐃⲆⵠⵠᐃⵠᐃ: "img/night-skin134.png",
        ⲆⵠᐃΔᐃⲆΔ: "img/day-skin135.png",
        ᐃΔⵠⵠᐃⵠⲆ: "img/night-skin135.png",
        ᐃⵠᐃΔⲆⵠΔ: "img/day-skin136.png",
        ΔⵠⵠⲆⲆΔΔ: "img/night-skin136.png",
        ⲆⲆΔⵠⵠᐃΔ: "img/day-skin137.png",
        ᐃⲆⵠΔⵠⲆᐃ: "img/night-skin137.png",
        ᐃΔⵠⵠΔⲆΔ: "img/day-skin138.png",
        ⲆⲆᐃΔⵠᐃΔ: "img/night-skin138.png",
        ⵠᐃᐃⵠᐃΔᐃ: "img/day-skin139.png",
        ΔⲆⲆⲆⵠⵠΔ: "img/night-skin139.png",
        ⵠⵠⲆⲆΔΔᐃ: "img/day-skin140.png",
        ᐃΔⵠΔᐃⵠᐃ: "img/night-skin140.png",
        ᐃᐃⲆΔⵠᐃΔ: "img/day-skin141.png",
        ⵠⲆⲆΔΔⲆⲆ: "img/night-skin141.png",
        ΔⲆᐃⲆⵠᐃⵠ: "img/day-skin142.png",
        ⵠᐃΔⵠΔᐃᐃ: "img/night-skin142.png",
        ⵠⲆᐃᐃᐃΔⲆ: "img/day-skin143.png",
        ⵠⵠⲆᐃΔᐃⵠ: "img/night-skin143.png",
        ⵠᐃΔᐃⲆΔⲆ: "img/day-skin144.png",
        ⵠⲆⲆΔᐃⲆⵠ: "img/night-skin144.png",
        ⵠⲆΔΔᐃⵠⲆ: "img/day-skin145.png",
        ΔΔⵠⵠⵠΔᐃ: "img/night-skin145.png",
        ⵠⵠⵠⵠᐃᐃΔ: "img/day-skin146.png",
        ⲆᐃⵠᐃΔΔᐃ: "img/night-skin146.png",
        ⲆᐃᐃⵠⵠⲆᐃ: "img/day-skin147.png",
        ᐃᐃⲆᐃᐃΔⵠ: "img/night-skin147.png",
        ᐃⵠⲆⵠⵠᐃⲆ: "img/day-skin148.png",
        ⲆⲆΔᐃΔΔΔ: "img/night-skin148.png",
        ᐃΔⵠᐃⲆᐃΔ: "img/day-skin149.png",
        ΔΔⲆΔⲆⵠᐃ: "img/night-skin149.png",
        ᐃΔᐃⲆᐃΔᐃ: "img/day-skin150.png",
        ⵠΔΔⲆᐃΔᐃ: "img/night-skin150.png",
        ⵠⵠΔⲆⵠⵠⵠ: "img/day-skin151.png",
        ΔⲆⵠΔⵠΔⵠ: "img/night-skin151.png",
        ⵠⵠⲆΔΔⵠⵠ: "img/day-skin152.png",
        ⵠⵠᐃⵠⵠⲆΔ: "img/night-skin152.png",
        ΔᐃⲆΔⲆⲆⲆ: "img/day-skin153.png",
        ᐃⲆΔΔΔᐃᐃ: "img/night-skin153.png",
        ⲆᐃΔᐃᐃⲆᐃ: "img/day-skin154.png",
        ᐃⵠⲆΔⵠᐃᐃ: "img/night-skin154.png",
        ᐃⲆⵠΔᐃΔΔ: "img/day-skin155.png",
        ⵠⲆᐃΔⲆⲆΔ: "img/night-skin155.png",
        Ⲇⵠⵠⵠᐃᐃⵠ: "img/day-skin156.png",
        ΔⲆⵠΔⵠⵠΔ: "img/night-skin156.png",
        ⲆᐃⵠΔᐃΔⲆ: "img/day-skin157.png",
        ⲆᐃⵠⲆⲆᐃⵠ: "img/night-skin157.png",
        ⵠⵠⲆᐃⲆΔⲆ: "img/day-skin158.png",
        ⲆⲆⵠΔⲆΔⲆ: "img/night-skin158.png",
        ᐃᐃΔᐃⵠΔⲆ: "img/day-skin159.png",
        ⵠᐃΔⲆΔΔⵠ: "img/night-skin159.png",
        ⲆⵠᐃⵠΔⲆΔ: "img/day-skin160.png",
        ⲆΔⲆⲆⲆⵠΔ: "img/night-skin160.png",
        ⲆⲆΔⲆⵠΔⵠ: "img/day-skin161.png",
        ⲆΔⲆⲆΔⵠΔ: "img/night-skin161.png",
        ΔᐃΔⲆⲆⲆⲆ: "img/day-skin162.png",
        ᐃⲆⵠⲆⲆᐃᐃ: "img/night-skin162.png",
        ⵠⵠⵠᐃᐃᐃΔ: "img/day-skin163.png",
        ᐃⲆᐃΔΔᐃⲆ: "img/night-skin163.png",
        ⲆⲆⵠᐃⲆⵠⲆ: "img/day-skin164.png",
        ΔⵠⵠΔⵠⲆΔ: "img/night-skin164.png",
        ᐃᐃΔᐃΔⲆⲆ: "img/day-skin165.png",
        ᐃⵠΔⵠᐃⵠⵠ: "img/night-skin165.png",
        ⵠᐃΔⵠΔΔΔ: "img/day-skin166.png",
        ⵠᐃⲆΔⵠⲆⲆ: "img/night-skin166.png",
        ΔΔᐃⵠⲆⵠⵠ: "img/day-skin167.png",
        ⲆⲆⵠᐃⵠⲆⵠ: "img/night-skin167.png",
        ᐃⵠⲆᐃⲆᐃᐃ: "img/day-skin168.png",
        ⵠⲆΔⵠᐃⲆⵠ: "img/night-skin168.png",
        ΔΔᐃⲆⲆⵠⲆ: "img/day-skin169.png",
        ⲆΔⵠΔⵠᐃᐃ: "img/night-skin169.png",
        ᐃΔⵠⲆᐃⵠⵠ: "img/day-skin170.png",
        ΔᐃᐃᐃⲆᐃΔ: "img/night-skin170.png",
        ΔⲆΔᐃⵠⵠⲆ: "img/day-skin171.png",
        ΔᐃᐃⲆⵠⵠᐃ: "img/night-skin171.png",
        ⲆᐃⲆᐃΔᐃⲆ: "img/day-skin172.png",
        ΔᐃΔⲆⵠΔⲆ: "img/night-skin172.png",
        ᐃΔᐃΔᐃᐃⲆ: "img/day-skin173.png",
        ᐃⲆⲆⲆⲆᐃΔ: "img/night-skin173.png",
        ΔⲆⲆᐃᐃⲆⲆ: "img/day-skin174.png",
        ΔⲆⵠΔᐃᐃᐃ: "img/night-skin174.png",
        ⲆᐃΔⲆᐃⵠᐃ: "img/day-skin175.png",
        ΔΔⵠⵠⲆᐃⵠ: "img/night-skin175.png",
        ΔⵠᐃⲆⲆⵠᐃ: "img/day-skin176.png",
        ᐃᐃⲆⲆⵠᐃᐃ: "img/night-skin176.png",
        ᐃⵠΔᐃⲆᐃΔ: "img/day-skin177.png",
        ⵠⲆⵠⲆΔⵠᐃ: "img/night-skin177.png",
        ⵠΔⵠΔᐃΔΔ: "img/day-skin178.png",
        ΔΔⵠⵠᐃᐃΔ: "img/night-skin178.png",
        ᐃᐃᐃᐃⵠⲆᐃ: "img/day-skin179.png",
        ⵠΔⲆᐃⵠⲆΔ: "img/night-skin179.png",
        ⵠⵠⵠᐃⵠΔⵠ: "img/day-skin180.png",
        ᐃⲆΔⵠᐃⵠΔ: "img/night-skin180.png",
        ⵠᐃⵠⵠΔⵠⵠ: "img/day-skin181.png",
        ΔⲆᐃⲆⵠⵠⵠ: "img/night-skin181.png",
        ΔΔᐃᐃⲆⲆⵠ: "img/day-skin182.png",
        ΔⲆΔⲆⵠᐃⵠ: "img/night-skin182.png",
        ⵠⵠⲆⵠΔⵠⵠ: "img/day-skin183.png",
        ⲆΔΔⲆᐃᐃⵠ: "img/night-skin183.png",
        ΔᐃᐃⵠᐃΔⲆ: "img/day-skin184.png",
        ᐃΔᐃᐃᐃΔΔ: "img/night-skin184.png",
        ⵠⲆᐃᐃⵠΔⲆ: "img/day-skin185.png",
        ΔⵠⵠᐃⲆⵠΔ: "img/night-skin185.png",
        ⲆⵠⵠᐃΔᐃⲆ: "img/day-skin186.png",
        ⲆΔᐃⵠᐃΔⲆ: "img/night-skin186.png",
        ΔⵠᐃΔᐃⵠΔ: "img/day-skin187.png",
        ᐃΔΔⵠⵠᐃⲆ: "img/night-skin187.png",
        ⵠⵠᐃⵠΔΔΔ: "img/day-skin188.png",
        ᐃΔᐃΔΔⲆⵠ: "img/night-skin188.png",
        ⲆⵠⵠᐃᐃⲆⵠ: "img/day-skin189.png",
        ⲆⲆΔΔⵠⲆΔ: "img/night-skin189.png",
        ⵠⵠⲆΔⲆᐃⲆ: "img/day-skin190.png",
        ᐃⲆⲆᐃⲆᐃⲆ: "img/night-skin190.png",
        ᐃⲆᐃᐃΔⵠΔ: "img/day-skin191.png",
        ᐃΔⵠⲆᐃΔΔ: "img/night-skin191.png",
        Δⵠᐃⵠⵠᐃⵠ: "img/day-skin192.png",
        ᐃⵠΔⵠᐃⵠᐃ: "img/night-skin192.png",
        ⵠᐃΔᐃⵠᐃⲆ: "img/day-skin193.png",
        ⵠⵠᐃΔⵠΔⵠ: "img/night-skin193.png",
        ΔⲆⲆⲆⲆⵠⵠ: "img/day-skin194.png",
        ⲆⵠᐃᐃΔΔⲆ: "img/night-skin194.png",
        ⲆⵠⵠΔᐃⲆΔ: "img/day-skin195.png",
        ᐃᐃΔᐃΔΔⵠ: "img/night-skin195.png",
        ΔⲆⵠᐃⲆΔΔ: "img/day-skin196.png",
        ΔᐃⵠⵠΔⲆⵠ: "img/night-skin196.png",
        ΔᐃΔΔΔⵠᐃ: "img/day-skin197.png",
        ᐃⵠⲆⵠⲆᐃΔ: "img/night-skin197.png",
        ⲆⵠⵠⵠΔΔⲆ: "img/day-skin198.png",
        ΔⵠⵠⵠΔᐃⵠ: "img/night-skin198.png",
        ⵠⲆᐃⵠⲆᐃΔ: "img/day-skin199.png",
        ⵠⵠᐃⵠᐃᐃΔ: "img/night-skin199.png",
        ᐃᐃᐃⵠⵠⲆΔ: "img/day-skin200.png",
        ⵠⵠᐃΔΔⵠΔ: "img/night-skin200.png",
        ΔⲆⲆⲆΔⲆᐃ: "img/day-skin201.png",
        ⲆΔⲆⲆⲆΔᐃ: "img/night-skin201.png",
        ⲆⲆⲆᐃᐃΔⲆ: "img/day-skin202.png",
        ΔΔⵠΔΔΔⵠ: "img/night-skin202.png",
        ᐃⵠⲆⲆΔⲆᐃ: "img/day-skin203.png",
        ⲆᐃⵠᐃⵠΔⵠ: "img/night-skin203.png",
        ⵠᐃᐃᐃᐃΔᐃ: "img/day-skin204.png",
        ΔΔᐃΔⲆΔⲆ: "img/night-skin204.png",
        ⵠᐃΔΔΔⵠⲆ: "img/day-skin205.png",
        ⵠⵠⵠΔᐃⵠΔ: "img/night-skin205.png",
        ᐃᐃᐃᐃⲆΔⲆ: "img/day-skin206.png",
        ⵠΔⲆᐃᐃᐃⵠ: "img/night-skin206.png",
        ᐃΔⲆⲆⵠⵠⵠ: "img/day-skin207.png",
        ⵠΔⵠᐃᐃΔΔ: "img/night-skin207.png",
        ⵠⲆᐃᐃⵠᐃᐃ: "img/day-skin208.png",
        ⲆⵠⲆⵠⵠⲆᐃ: "img/night-skin208.png",
        ⵠⵠⲆⲆⲆⲆⵠ: "img/day-skin209.png",
        ᐃΔΔΔⵠΔΔ: "img/night-skin209.png",
        ΔΔⲆΔᐃⵠⲆ: "img/day-skin210.png",
        ΔⲆᐃⵠⵠⵠΔ: "img/night-skin210.png",
        ⲆⲆⲆⵠⵠΔⵠ: "img/day-skin211.png",
        ⲆᐃⲆⵠⲆᐃΔ: "img/night-skin211.png",
        ⵠⵠΔΔⵠⵠⵠ: "img/day-skin212.png",
        ⲆⲆΔΔⲆⵠΔ: "img/night-skin212.png",
        ΔᐃⵠⵠⲆᐃᐃ: "img/day-hand-skin0.png",
        ᐃΔⲆⵠⵠᐃᐃ: "img/night-hand-skin0.png",
        ⵠΔⲆΔᐃⵠⲆ: "img/day-hand-skin1.png",
        ⲆⵠⵠⲆⲆᐃΔ: "img/night-hand-skin1.png",
        ᐃⲆᐃⲆᐃΔⵠ: "img/day-hand-skin2.png",
        ᐃᐃᐃⵠⲆᐃⲆ: "img/night-hand-skin2.png",
        ⵠⲆᐃᐃΔⵠⵠ: "img/day-hand-skin3.png",
        ⵠΔⵠⵠⵠⵠⲆ: "img/night-hand-skin3.png",
        ⵠᐃᐃⵠΔⲆᐃ: "img/day-hand-skin4.png",
        ⲆⵠⲆⵠⲆⵠᐃ: "img/night-hand-skin4.png",
        ⵠΔΔⵠᐃⵠⲆ: "img/day-hand-skin5.png",
        ⵠᐃᐃᐃᐃΔⵠ: "img/night-hand-skin5.png",
        ⵠᐃⵠⵠᐃⵠⵠ: "img/day-hand-skin6.png",
        ⲆⲆⵠᐃⵠⲆⲆⲆΔ: "img/night-hand-skin6.png",
        ⵠᐃⵠᐃΔⲆⲆ: "img/day-hand-skin6.png",
        ⵠᐃᐃΔᐃΔΔ: "img/night-hand-skin6.png",
        ΔⵠⲆΔΔⵠΔ: "img/day-hand-skin8.png",
        ⲆΔΔΔⲆⵠᐃ: "img/night-hand-skin8.png",
        ⵠΔⵠᐃⵠⲆΔ: "img/day-hand-skin9.png",
        ᐃⵠⲆⵠⲆᐃⵠ: "img/night-hand-skin9.png",
        ᐃⵠΔⲆⵠΔⵠ: "img/day-hand-skin10.png",
        ΔⲆΔⵠⲆΔⲆ: "img/night-hand-skin10.png",
        ⲆⲆΔᐃΔᐃⵠ: "img/day-hand-skin11.png",
        ⲆΔᐃⵠⵠᐃⵠ: "img/night-hand-skin11.png",
        ᐃⲆᐃΔᐃΔᐃ: "img/day-hand-skin12.png",
        ⲆΔⵠΔᐃᐃⵠ: "img/night-hand-skin12.png",
        ⲆⲆᐃᐃⲆⵠΔ: "img/day-hand-skin13.png",
        ΔΔⲆᐃⵠΔᐃ: "img/night-hand-skin13.png",
        ⵠⲆⲆⲆΔᐃⵠ: "img/day-hand-skin14.png",
        ᐃⵠⲆᐃⲆⲆⵠ: "img/night-hand-skin14.png",
        ᐃⵠⲆⵠⵠᐃᐃ: "img/day-hand-skin15.png",
        ⵠᐃᐃᐃⵠᐃⵠ: "img/night-hand-skin15.png",
        ΔⲆΔⲆᐃᐃᐃ: "img/day-hand-skin16.png",
        ⲆⲆᐃΔⵠΔⵠ: "img/night-hand-skin16.png",
        ᐃⵠᐃⵠᐃᐃᐃ: "img/day-hand-skin17.png",
        ⲆⵠΔⲆⵠΔᐃ: "img/night-hand-skin17.png",
        ΔΔⵠⲆⵠⵠΔ: "img/day-hand-skin18.png",
        ΔⵠᐃΔⵠᐃᐃ: "img/night-hand-skin18.png",
        ᐃᐃᐃᐃᐃΔΔ: "img/day-hand-skin19.png",
        ⵠⲆⲆⲆⵠⲆⲆ: "img/night-hand-skin19.png",
        ⵠⵠΔΔⵠᐃΔ: "img/day-hand-skin20.png",
        ΔⲆᐃⲆⵠⲆⵠ: "img/night-hand-skin20.png",
        ⵠⵠⵠⵠⵠΔΔ: "img/day-hand-skin21.png",
        ᐃⵠᐃⲆⲆⵠᐃ: "img/night-hand-skin21.png",
        ΔⵠⵠᐃΔⲆⲆ: "img/day-hand-skin22.png",
        ⲆⲆⵠᐃΔΔΔ: "img/night-hand-skin22.png",
        ⵠΔⵠⵠⵠᐃⵠ: "img/day-hand-skin23.png",
        ᐃΔⲆⵠᐃⲆⵠ: "img/night-hand-skin23.png",
        ᐃⲆΔᐃΔΔⵠ: "img/day-hand-skin24.png",
        ᐃⵠⵠᐃΔⵠΔ: "img/night-hand-skin24.png",
        ⵠⵠΔΔⲆᐃⵠ: "img/day-hand-skin25.png",
        ⲆⲆⲆΔΔᐃⲆ: "img/night-hand-skin25.png",
        ᐃᐃⲆᐃⵠΔⲆ: "img/day-hand-skin26.png",
        ΔⲆΔᐃⲆⵠⲆ: "img/night-hand-skin26.png",
        ⵠΔᐃΔΔⵠⵠ: "img/day-hand-skin27.png",
        ΔⵠᐃⲆΔⵠᐃ: "img/night-hand-skin27.png",
        ᐃⲆΔⲆᐃⵠⲆ: "img/day-hand-skin28.png",
        ⵠⵠⲆⲆⲆⲆⲆ: "img/night-hand-skin28.png",
        ⵠⲆᐃⵠΔΔΔ: "img/day-hand-skin29.png",
        ⲆⲆΔᐃⲆⵠⵠ: "img/night-hand-skin29.png",
        ⵠΔⲆⲆΔⲆⲆ: "img/day-hand-skin30.png",
        ⵠΔⵠⲆⵠᐃⲆ: "img/night-hand-skin30.png",
        ⲆΔⲆΔΔΔⵠ: "img/day-hand-skin31.png",
        ᐃⵠᐃΔΔᐃⵠ: "img/night-hand-skin31.png",
        ΔΔⲆⲆⲆⵠⲆ: "img/day-hand-skin32.png",
        ᐃⵠΔΔΔⵠᐃ: "img/night-hand-skin32.png",
        ᐃᐃΔΔⵠⲆᐃ: "img/day-hand-skin33.png",
        ⲆᐃᐃᐃⲆⲆᐃ: "img/night-hand-skin33.png",
        ΔⲆᐃᐃⵠⵠⵠ: "img/day-hand-skin34.png",
        ⲆΔⲆᐃⲆⲆⵠ: "img/night-hand-skin34.png",
        ᐃᐃᐃΔⵠᐃΔ: "img/day-hand-skin35.png",
        ᐃᐃᐃⲆᐃᐃΔ: "img/night-hand-skin35.png",
        ΔⵠⵠᐃⵠΔᐃ: "img/day-hand-skin36.png",
        ᐃᐃᐃⲆⵠⵠᐃ: "img/night-hand-skin36.png",
        ⵠⵠΔΔΔΔⲆ: "img/day-hand-skin37.png",
        ΔΔⲆΔᐃᐃⵠ: "img/night-hand-skin37.png",
        ⲆᐃᐃⲆⵠⵠΔ: "img/day-hand-skin38.png",
        ΔⲆⲆⵠⵠⲆᐃ: "img/night-hand-skin38.png",
        ⲆⲆᐃᐃΔᐃⵠ: "img/day-hand-skin39.png",
        ᐃⲆᐃⵠᐃᐃᐃ: "img/night-hand-skin39.png",
        ⵠᐃᐃⲆⲆⵠΔ: "img/day-hand-skin40.png",
        ⵠᐃⵠΔⵠᐃΔ: "img/night-hand-skin40.png",
        ΔᐃΔⵠΔᐃⵠ: "img/day-hand-skin41.png",
        ᐃⵠΔⲆᐃᐃΔ: "img/night-hand-skin41.png",
        ⵠⲆᐃᐃᐃᐃΔ: "img/day-hand-skin42.png",
        ᐃΔᐃⵠᐃⵠⵠ: "img/night-hand-skin42.png",
        ⲆᐃⵠᐃⲆᐃᐃ: "img/day-hand-skin43.png",
        ΔⵠⲆⲆᐃⲆⲆ: "img/night-hand-skin43.png",
        ᐃⲆⵠⲆⵠⵠⲆ: "img/day-hand-skin16.png",
        ⵠⵠΔΔⵠⲆᐃ: "img/night-hand-skin16.png",
        ᐃⵠⲆᐃⲆΔⵠ: "img/day-hand-skin45.png",
        ⲆⵠⵠⲆᐃᐃΔ: "img/night-hand-skin45.png",
        ΔⵠΔΔᐃᐃⲆ: "img/day-hand-skin46.png",
        ⵠⵠΔⵠᐃᐃΔ: "img/night-hand-skin46.png",
        ᐃⲆⲆΔⵠΔⵠ: "img/day-hand-skin47.png",
        ᐃᐃⵠⲆΔⲆΔ: "img/night-hand-skin47.png",
        ⲆⲆᐃΔΔᐃᐃ: "img/day-hand-skin48.png",
        ⵠⵠⵠᐃᐃⲆⵠ: "img/night-hand-skin48.png",
        ΔⵠᐃᐃΔⲆΔ: "img/day-hand-skin49.png",
        ⵠΔᐃΔⵠᐃΔ: "img/night-hand-skin49.png",
        ⵠᐃⵠΔⲆⲆⵠ: "img/day-hand-skin49.png",
        ᐃⵠΔⲆⲆΔΔ: "img/night-hand-skin49.png",
        ΔᐃᐃΔⵠⵠⲆ: "img/day-hand-skin51.png",
        ᐃΔΔᐃᐃⵠΔ: "img/night-hand-skin51.png",
        ΔᐃΔΔⲆⵠᐃ: "img/day-hand-skin52.png",
        ΔⲆⵠΔΔⵠΔ: "img/night-hand-skin52.png",
        ΔᐃᐃΔⵠⲆᐃ: "img/day-hand-skin53.png",
        ⲆΔᐃᐃΔⲆⲆ: "img/night-hand-skin53.png",
        ᐃΔⵠⲆⵠⲆΔ: "img/day-hand-skin53.png",
        ⲆⲆⲆⵠⲆΔᐃ: "img/night-hand-skin53.png",
        ΔⵠⲆⲆⲆΔⵠ: "img/day-hand-skin55.png",
        ⲆΔᐃΔⵠⵠΔ: "img/night-hand-skin55.png",
        ⵠⲆⲆΔΔⵠᐃ: "img/day-hand-skin56.png",
        ⵠΔⲆⵠⲆΔΔ: "img/night-hand-skin56.png",
        ΔⵠᐃⲆⲆⲆΔ: "img/day-hand-skin57.png",
        ⲆΔᐃᐃΔΔⲆ: "img/night-hand-skin57.png",
        ΔⵠⵠᐃⲆⲆΔ: "img/day-hand-skin58.png",
        ΔⵠΔⵠⵠΔᐃ: "img/night-hand-skin58.png",
        ⲆⲆΔΔⲆⲆΔ: "img/day-hand-skin59.png",
        ⵠᐃⵠᐃⵠⲆᐃ: "img/night-hand-skin59.png",
        ᐃΔΔⵠᐃⵠⲆ: "img/day-hand-skin61.png",
        ΔΔᐃⲆⵠⲆΔ: "img/night-hand-skin61.png",
        ΔⵠⵠΔⲆΔΔ: "img/day-hand-skin61.png",
        ⵠΔⲆⵠⲆⵠᐃ: "img/night-hand-skin61.png",
        ⵠⲆΔΔᐃⵠᐃ: "img/day-hand-skin62.png",
        ⵠⵠᐃΔΔΔᐃ: "img/night-hand-skin62.png",
        ᐃⵠᐃⵠᐃⲆⵠ: "img/day-hand-skin63.png",
        ⵠΔᐃᐃⵠᐃΔ: "img/night-hand-skin63.png",
        ΔⲆⵠᐃΔⲆΔ: "img/day-hand-skin64.png",
        ⲆᐃⵠΔᐃⲆⲆ: "img/night-hand-skin64.png",
        ΔΔⲆⵠⲆⵠᐃ: "img/day-hand-skin65.png",
        ΔᐃⵠⵠⵠΔΔ: "img/night-hand-skin65.png",
        ⲆΔⵠⵠΔⲆᐃ: "img/day-hand-skin66.png",
        ⲆⲆᐃᐃⵠΔΔ: "img/night-hand-skin66.png",
        ΔⵠΔᐃⵠᐃⲆ: "img/day-hand-skin67.png",
        ΔᐃⵠⲆⵠΔΔ: "img/night-hand-skin67.png",
        ΔΔⵠⲆᐃᐃᐃ: "img/day-hand-skin68.png",
        ΔᐃⵠΔᐃⵠⲆ: "img/night-hand-skin68.png",
        ⲆᐃᐃⵠⲆⲆⲆ: "img/day-hand-skin69.png",
        ⵠⵠᐃⵠᐃΔᐃ: "img/night-hand-skin69.png",
        ΔᐃⲆⲆⵠᐃⵠ: "img/day-hand-skin70.png",
        ΔᐃⵠΔΔⲆᐃ: "img/night-hand-skin70.png",
        ΔⵠᐃⵠΔⵠⵠ: "img/day-hand-skin71.png",
        ⲆΔΔⵠⵠⵠᐃ: "img/night-hand-skin71.png",
        ⵠⵠᐃΔΔⲆᐃ: "img/day-hand-skin72.png",
        ᐃᐃΔᐃⲆⲆⲆ: "img/night-hand-skin72.png",
        ᐃᐃⲆᐃᐃⵠⲆ: "img/day-hand-skin73.png",
        ΔᐃᐃᐃΔⵠᐃ: "img/night-hand-skin73.png",
        ⵠᐃΔΔΔᐃⵠ: "img/day-hand-skin74.png",
        ⵠⲆᐃᐃᐃⵠΔ: "img/night-hand-skin74.png",
        ΔᐃᐃⵠΔᐃᐃ: "img/day-hand-skin75.png",
        ΔᐃⵠΔᐃΔΔ: "img/night-hand-skin75.png",
        ΔΔᐃᐃⵠΔⲆ: "img/day-hand-skin76.png",
        ⵠⵠΔⵠⲆᐃⲆ: "img/night-hand-skin76.png",
        ΔΔⵠⵠⵠⵠΔ: "img/day-hand-skin77.png",
        ΔⵠΔⲆΔᐃΔ: "img/night-hand-skin77.png",
        ⵠⲆᐃⲆᐃⲆⵠ: "img/day-hand-skin78.png",
        ᐃΔΔΔᐃⵠⵠ: "img/night-hand-skin78.png",
        ⲆΔᐃᐃΔⵠᐃ: "img/day-hand-skin79.png",
        ΔΔᐃⵠΔᐃⵠ: "img/night-hand-skin79.png",
        ⲆΔΔᐃⵠⲆⵠ: "img/day-hand-skin80.png",
        ᐃⲆⲆⲆᐃᐃⵠ: "img/night-hand-skin80.png",
        ᐃᐃΔⲆⵠⵠⲆ: "img/day-hand-skin81.png",
        ⲆⲆⲆⵠᐃⵠⲆ: "img/night-hand-skin81.png",
        ⲆⲆΔⵠᐃⲆᐃ: "img/day-hand-skin82.png",
        ΔᐃⲆᐃΔᐃⵠ: "img/night-hand-skin82.png",
        ᐃⵠⵠⲆⵠⵠᐃ: "img/day-hand-skin83.png",
        ⲆΔⵠΔⵠⵠᐃ: "img/night-hand-skin83.png",
        ⵠᐃᐃΔⲆⲆⵠ: "img/day-hand-skin84.png",
        ⲆΔⵠΔⵠΔⲆ: "img/night-hand-skin84.png",
        ⲆⲆⲆᐃᐃᐃⵠ: "img/day-hand-skin85.png",
        ⲆⲆΔⵠΔᐃᐃ: "img/night-hand-skin85.png",
        ⵠᐃΔⲆᐃⲆΔ: "img/day-hand-skin86.png",
        ΔⵠⵠⲆⵠΔᐃ: "img/night-hand-skin86.png",
        ᐃᐃⵠᐃΔⲆⵠ: "img/day-hand-skin87.png",
        ⲆᐃΔΔⲆⵠΔ: "img/night-hand-skin87.png",
        ⲆⵠⵠΔⵠᐃⵠ: "img/day-hand-skin88.png",
        ΔⵠΔΔΔΔᐃ: "img/night-hand-skin88.png",
        ΔᐃΔΔⵠᐃᐃ: "img/day-hand-skin89.png",
        ⵠᐃᐃⲆᐃΔⵠ: "img/night-hand-skin89.png",
        ᐃᐃⲆⲆⲆᐃΔ: "img/day-hand-skin90.png",
        ΔⵠⵠⲆΔΔⲆ: "img/night-hand-skin90.png",
        ⲆⲆⲆΔΔⲆⵠ: "img/day-hand-skin91.png",
        ⵠᐃᐃᐃᐃᐃΔ: "img/night-hand-skin91.png",
        ⵠⵠᐃΔΔΔⲆ: "img/day-hand-skin92.png",
        ⵠᐃΔΔᐃΔΔ: "img/night-hand-skin92.png",
        ⵠⵠΔΔⲆΔᐃ: "img/day-hand-skin93.png",
        ΔⵠⲆⵠⲆᐃⵠ: "img/night-hand-skin93.png",
        ⵠⵠΔᐃᐃⲆᐃ: "img/day-hand-skin94.png",
        ⵠᐃⵠΔΔΔᐃ: "img/night-hand-skin94.png",
        ΔⵠᐃⲆᐃⵠΔ: "img/day-hand-skin95.png",
        ΔⵠⲆⲆᐃⲆᐃ: "img/night-hand-skin95.png",
        ΔΔΔⵠΔΔⲆ: "img/day-hand-skin96.png",
        ⵠⵠᐃⲆΔΔⲆ: "img/night-hand-skin96.png",
        ⲆΔⵠⲆⵠⲆⵠ: "img/day-hand-skin97.png",
        ⵠⵠᐃᐃΔⵠᐃ: "img/night-hand-skin97.png",
        ⲆⲆⵠΔⵠΔⲆ: "img/day-hand-skin98.png",
        ⵠⲆⵠⲆⲆΔᐃ: "img/night-hand-skin98.png",
        ⲆᐃΔΔᐃⵠᐃ: "img/day-hand-skin99.png",
        ⵠΔΔΔᐃⵠᐃ: "img/night-hand-skin99.png",
        ⵠᐃⵠᐃΔⵠᐃ: "img/day-hand-skin100.png",
        ⲆⵠⵠⲆⵠΔᐃ: "img/night-hand-skin100.png",
        ⲆᐃⵠΔᐃΔΔ: "img/day-hand-skin101.png",
        ᐃⲆΔΔⵠⲆⵠ: "img/night-hand-skin101.png",
        ⵠⵠᐃⲆΔⲆᐃ: "img/day-hand-skin102.png",
        ⲆⵠⲆⲆΔⵠⲆ: "img/night-hand-skin102.png",
        ΔΔⵠⵠⵠⵠᐃ: "img/day-hand-skin103.png",
        ΔΔⲆⲆΔⵠⵠ: "img/night-hand-skin103.png",
        ΔⲆᐃΔⲆⵠⲆ: "img/day-hand-skin104.png",
        ΔⲆⵠⵠᐃᐃⲆ: "img/night-hand-skin104.png",
        ΔⲆⵠⵠᐃⲆᐃ: "img/day-hand-skin105.png",
        ᐃΔᐃⵠᐃⲆᐃ: "img/night-hand-skin105.png",
        ⵠᐃⵠᐃⲆᐃⵠ: "img/day-hand-skin106.png",
        ΔⲆⵠⲆΔΔⵠ: "img/night-hand-skin106.png",
        ᐃᐃΔᐃΔⵠΔ: "img/day-hand-skin107.png",
        ᐃΔΔᐃᐃΔⲆ: "img/night-hand-skin107.png",
        ᐃⲆᐃⲆⵠⵠΔ: "img/day-hand-skin108.png",
        ⲆⲆⵠᐃⲆᐃⵠ: "img/night-hand-skin108.png",
        ΔⲆⲆⲆⲆᐃᐃ: "img/day-hand-skin109.png",
        ᐃⲆᐃΔᐃᐃⲆ: "img/night-hand-skin109.png",
        ⵠΔᐃⲆⵠⲆⵠ: "img/day-hand-skin110.png",
        ΔΔⲆⲆⲆᐃΔ: "img/night-hand-skin110.png",
        ΔⲆΔⵠⲆⵠⲆ: "img/day-hand-skin111.png",
        ⵠᐃΔΔΔⵠᐃ: "img/night-hand-skin111.png",
        ⵠⵠΔΔⲆⲆΔ: "img/day-hand-skin112.png",
        ⵠΔᐃⲆⵠⵠΔ: "img/night-hand-skin112.png",
        ⵠⲆⲆⵠΔⵠΔΔΔ: "img/day-hand-skin113.png",
        ⵠΔⵠᐃΔᐃⵠΔⲆ: "img/night-hand-skin113.png",
        ᐃΔⵠⲆⲆᐃⵠ: "img/day-hand-skin114.png",
        ΔⵠⲆᐃΔⵠⲆ: "img/night-hand-skin114.png",
        ΔⵠᐃⵠⲆᐃⵠ: "img/day-hand-skin115.png",
        ⵠᐃᐃᐃᐃⵠΔ: "img/night-hand-skin115.png",
        ᐃⲆⲆⵠᐃΔΔ: "img/day-hand-skin116.png",
        ᐃⲆⲆΔⲆΔᐃ: "img/night-hand-skin116.png",
        ⲆⵠⲆΔⲆᐃⵠ: "img/day-hand-skin117.png",
        ᐃᐃⲆⵠⲆⵠᐃ: "img/night-hand-skin117.png",
        ⵠⲆᐃⲆΔΔᐃ: "img/day-hand-skin118.png",
        ⵠΔΔΔΔⵠᐃ: "img/night-hand-skin118.png",
        ᐃⲆⵠⲆⵠᐃⵠ: "img/day-hand-skin119.png",
        ⵠᐃᐃⵠᐃΔⲆ: "img/night-hand-skin119.png",
        ⵠⵠⲆⵠⵠⵠᐃ: "img/day-hand-skin120.png",
        ᐃΔⵠΔᐃⲆⵠ: "img/night-hand-skin120.png",
        ΔⲆΔⲆⲆᐃΔ: "img/day-hand-skin122.png",
        ⲆⵠΔᐃⲆⵠΔ: "img/night-hand-skin122.png",
        ᐃⵠΔΔⲆⲆⲆ: "img/day-hand-skin122.png",
        ᐃⵠᐃⵠᐃⵠⲆ: "img/night-hand-skin122.png",
        ΔⲆⲆⵠⲆΔΔ: "img/day-hand-skin122.png",
        ⵠⲆⲆⲆᐃᐃΔ: "img/night-hand-skin122.png",
        ᐃΔᐃΔΔⵠΔ: "img/day-hand-skin124.png",
        ΔⲆΔΔΔⵠΔ: "img/night-hand-skin124.png",
        ᐃΔᐃᐃᐃΔⵠ: "img/day-hand-skin125.png",
        ⲆᐃⵠⵠΔⵠⲆ: "img/night-hand-skin125.png",
        ᐃⵠΔᐃΔΔⲆ: "img/day-hand-skin126.png",
        ΔΔΔⵠⵠⲆΔ: "img/night-hand-skin126.png",
        ᐃⵠⲆⵠᐃᐃᐃ: "img/day-hand-skin127.png",
        ᐃⲆᐃΔᐃΔⵠ: "img/night-hand-skin127.png",
        ᐃⵠⲆᐃⵠⵠⵠ: "img/day-hand-skin128.png",
        ᐃⵠᐃᐃⵠⲆⵠ: "img/night-hand-skin128.png",
        ᐃⲆᐃΔΔᐃΔ: "img/day-hand-skin129.png",
        Ⲇᐃᐃⵠⵠⵠᐃ: "img/night-hand-skin129.png",
        ΔᐃⵠΔΔᐃⲆ: "img/day-hand-skin130.png",
        ΔⲆⵠⵠΔΔⵠ: "img/night-hand-skin130.png",
        ᐃⲆΔᐃⵠᐃΔ: "img/day-hand-skin131.png",
        ΔⵠⲆⵠⲆᐃᐃ: "img/night-hand-skin131.png",
        ⵠⵠΔᐃᐃᐃⵠ: "img/day-hand-skin130.png",
        ⵠⵠⲆᐃᐃᐃΔ: "img/night-hand-skin130.png",
        ᐃᐃⲆΔᐃⵠⵠ: "img/day-hand-skin133.png",
        ᐃΔᐃΔⵠⵠⲆ: "img/night-hand-skin133.png",
        ⵠⲆΔᐃᐃΔⲆ: "img/day-hand-skin134.png",
        ΔΔⲆⵠⲆⲆⵠ: "img/night-hand-skin134.png",
        ⵠⵠⲆᐃⵠⵠᐃ: "img/day-hand-skin135.png",
        ΔΔⲆⲆΔᐃᐃ: "img/night-hand-skin135.png",
        ⲆΔⵠⵠΔⲆⵠ: "img/day-hand-skin136.png",
        Δᐃⵠⵠᐃᐃᐃ: "img/night-hand-skin136.png",
        ΔΔΔⵠⵠᐃⲆ: "img/day-hand-skin137.png",
        ⲆΔᐃᐃⵠΔΔ: "img/night-hand-skin137.png",
        ⲆⵠᐃⲆⵠⲆⵠ: "img/day-hand-skin138.png",
        ⲆΔΔΔᐃⲆⵠ: "img/night-hand-skin138.png",
        ⲆᐃΔΔⵠⲆᐃ: "img/day-hand-skin139.png",
        ΔΔᐃᐃⲆᐃⲆ: "img/night-hand-skin139.png",
        Ⲇⵠᐃᐃⵠᐃᐃ: "img/day-hand-skin140.png",
        ⵠᐃⵠᐃⲆᐃΔ: "img/night-hand-skin140.png",
        ⵠⲆⲆⵠⵠⲆⵠ: "img/day-hand-skin141.png",
        ⲆⲆΔⲆⵠΔⲆ: "img/night-hand-skin141.png",
        ⲆⲆⲆⲆⵠᐃⵠ: "img/day-hand-skin142.png",
        ⵠⲆᐃᐃΔᐃᐃ: "img/night-hand-skin142.png",
        ΔⲆⵠⲆᐃᐃⵠ: "img/day-hand-skin143.png",
        ᐃⲆΔᐃⵠᐃⵠ: "img/night-hand-skin143.png",
        ⲆΔⲆΔΔᐃΔ: "img/day-hand-skin144.png",
        ⲆᐃⲆⲆᐃⲆΔ: "img/night-hand-skin144.png",
        ⲆΔⲆΔᐃΔΔ: "img/day-hand-skin145.png",
        ᐃΔΔᐃᐃᐃⵠ: "img/night-hand-skin145.png",
        ΔⵠⵠⵠⲆⲆᐃ: "img/day-hand-skin146.png",
        ⵠΔⲆⵠΔΔⵠ: "img/night-hand-skin146.png",
        ᐃⲆᐃᐃᐃⵠⲆ: "img/day-hand-skin147.png",
        ΔᐃⵠⵠᐃΔΔ: "img/night-hand-skin147.png",
        ΔΔⵠⲆᐃⵠⲆ: "img/day-hand-skin148.png",
        ⲆᐃΔᐃⵠⲆᐃ: "img/night-hand-skin148.png",
        ⵠᐃⵠΔΔⵠⲆ: "img/day-hand-skin149.png",
        ᐃᐃΔᐃΔᐃᐃ: "img/night-hand-skin149.png",
        ᐃᐃⲆⵠⵠⵠΔ: "img/day-hand-skin150.png",
        ⵠⵠⲆᐃᐃΔᐃ: "img/night-hand-skin150.png",
        ᐃⵠΔⵠⲆⲆᐃ: "img/day-hand-skin151.png",
        ⵠⵠΔᐃⵠΔΔ: "img/night-hand-skin151.png",
        ΔⵠⵠⵠΔΔΔ: "img/day-hand-skin152.png",
        ⵠⲆⵠΔⲆⵠᐃ: "img/night-hand-skin152.png",
        ⲆΔⵠⲆᐃᐃᐃ: "img/day-hand-skin153.png",
        ⲆΔᐃⲆᐃᐃΔ: "img/night-hand-skin153.png",
        ⲆⵠᐃΔⵠⵠΔ: "img/day-hand-skin154.png",
        ΔΔΔΔⲆⲆⲆ: "img/night-hand-skin154.png",
        ΔᐃᐃΔᐃᐃⵠ: "img/day-hand-skin155.png",
        ⵠⵠⲆⵠⲆᐃⵠ: "img/night-hand-skin155.png",
        ΔⵠⵠⲆΔⵠⵠ: "img/day-hand-skin156.png",
        ⵠΔΔΔΔΔⵠ: "img/night-hand-skin156.png",
        ΔⵠΔⵠⲆᐃⵠ: "img/day-hand-skin157.png",
        ⲆⲆΔⵠΔᐃⵠ: "img/night-hand-skin157.png",
        ᐃᐃᐃⲆⲆᐃⲆ: "img/day-hand-skin158.png",
        ΔⲆⲆⵠΔⲆᐃ: "img/night-hand-skin158.png",
        ΔⲆⲆⲆⵠΔⵠ: "img/day-hand-skin159.png",
        ΔΔᐃⲆⵠΔⵠ: "img/night-hand-skin159.png",
        ⲆⲆᐃΔᐃΔΔ: "img/day-hand-skin160.png",
        ᐃᐃⲆⵠⲆᐃΔ: "img/night-hand-skin160.png",
        ᐃΔⲆΔⵠΔⵠ: "img/day-hand-skin161.png",
        ⲆᐃᐃΔᐃΔⵠ: "img/night-hand-skin161.png",
        ⲆⲆⵠΔⲆΔΔ: "img/day-hand-skin162.png",
        ΔΔⲆᐃᐃⲆⲆ: "img/night-hand-skin162.png",
        ⵠᐃΔⲆᐃΔΔ: "img/day-hand-skin163.png",
        ΔᐃⵠⲆⲆΔΔ: "img/night-hand-skin163.png",
        ⲆᐃⲆΔᐃᐃᐃ: "img/day-hand-skin164.png",
        ᐃΔᐃⲆΔⲆⲆ: "img/night-hand-skin164.png",
        ⲆΔⵠΔⲆᐃᐃ: "img/day-hand-skin165.png",
        ΔᐃⵠⲆᐃⵠΔ: "img/night-hand-skin165.png",
        ⵠΔⵠᐃΔΔⲆ: "img/day-hand-skin166.png",
        ᐃⲆΔΔᐃⵠᐃ: "img/night-hand-skin166.png",
        ⲆⲆⵠⵠᐃᐃⵠ: "img/day-hand-skin167.png",
        ᐃⵠΔᐃᐃⵠⵠ: "img/night-hand-skin167.png",
        ⵠΔⵠΔΔⵠΔ: "img/day-hand-skin168.png",
        ⵠⲆᐃᐃⵠΔΔ: "img/night-hand-skin168.png",
        ΔΔΔΔⲆᐃⲆ: "img/day-hand-skin169.png",
        ᐃᐃΔⲆⲆᐃᐃ: "img/night-hand-skin169.png",
        ⵠⵠⲆⵠᐃΔⵠ: "img/day-hand-skin170.png",
        ᐃΔΔⲆΔᐃΔ: "img/night-hand-skin170.png",
        ᐃΔⲆΔⵠΔᐃ: "img/day-hand-skin171.png",
        ΔⲆᐃⲆⵠⵠΔ: "img/night-hand-skin171.png",
        ΔⵠⵠⲆΔⲆΔ: "img/day-hand-skin172.png",
        ⲆⵠΔΔⵠⲆΔ: "img/night-hand-skin172.png",
        ⵠΔᐃⵠᐃⲆⲆ: "img/day-hand-skin173.png",
        ΔⵠⵠΔⲆⲆΔ: "img/night-hand-skin173.png",
        ⲆᐃᐃᐃᐃⵠΔ: "img/day-hand-skin174.png",
        ⲆⵠⵠΔⲆΔΔ: "img/night-hand-skin174.png",
        ᐃⲆΔᐃⵠΔΔ: "img/day-hand-skin175.png",
        ⵠᐃⵠΔⵠΔᐃ: "img/night-hand-skin175.png",
        ⵠⲆᐃⵠᐃⵠᐃ: "img/day-hand-skin176.png",
        ᐃⵠⲆΔᐃᐃΔ: "img/night-hand-skin176.png",
        ⲆⲆᐃⲆΔᐃΔ: "img/day-hand-skin177.png",
        ᐃⵠΔᐃΔⲆⵠ: "img/night-hand-skin177.png",
        ᐃΔⲆΔΔΔᐃ: "img/day-hand-skin178.png",
        ⲆⲆΔⵠΔⲆᐃ: "img/night-hand-skin178.png",
        ᐃᐃᐃᐃᐃⲆΔ: "img/day-hand-skin179.png",
        ⵠᐃⲆⵠᐃⲆⵠ: "img/night-hand-skin179.png",
        ⵠⵠⵠⲆΔⲆΔ: "img/day-hand-skin180.png",
        ⲆᐃⵠⵠⲆⲆⲆ: "img/night-hand-skin180.png",
        ⵠᐃⲆⵠᐃⵠΔ: "img/day-hand-skin181.png",
        ᐃⲆⲆᐃⵠⲆⲆ: "img/night-hand-skin181.png",
        ⵠⵠⲆΔᐃᐃΔ: "img/day-hand-skin182.png",
        ⲆⲆⵠⲆΔⵠᐃ: "img/night-hand-skin182.png",
        ⵠᐃΔⵠⵠⲆᐃ: "img/day-hand-skin183.png",
        ⲆⲆⵠᐃⲆᐃⲆ: "img/night-hand-skin183.png",
        ⲆΔⲆⵠⲆⲆⲆ: "img/day-hand-skin184.png",
        ⵠᐃᐃᐃⲆⵠᐃ: "img/night-hand-skin184.png",
        ᐃⲆⲆⵠⵠΔΔ: "img/day-hand-skin185.png",
        ⲆⲆⵠΔΔⲆᐃ: "img/night-hand-skin185.png",
        ΔΔᐃⲆΔⲆⲆ: "img/day-hand-skin186.png",
        ⲆᐃⵠⵠⲆⵠᐃ: "img/night-hand-skin186.png",
        ΔⲆⲆⵠᐃΔΔ: "img/day-hand-skin187.png",
        ⲆᐃΔᐃⵠⵠⲆ: "img/night-hand-skin187.png",
        ⵠᐃᐃⲆⲆΔⵠ: "img/day-hand-skin188.png",
        ⲆΔΔⲆⲆΔᐃ: "img/night-hand-skin188.png",
        ΔΔΔΔᐃⲆΔ: "img/day-hand-skin189.png",
        ΔⵠᐃⵠΔΔᐃ: "img/night-hand-skin189.png",
        ⵠⲆΔᐃⲆᐃⵠ: "img/day-hand-skin190.png",
        ᐃΔⲆᐃⲆᐃᐃ: "img/night-hand-skin190.png",
        ⵠⵠΔⲆⲆⵠⵠ: "img/day-hand-skin191.png",
        ᐃⲆⵠⲆⲆΔᐃ: "img/night-hand-skin191.png",
        ⵠᐃⲆΔΔᐃⵠ: "img/day-hand-skin192.png",
        ⲆΔⵠⲆᐃΔΔ: "img/night-hand-skin192.png",
        ⵠⲆⵠⵠⲆⲆⲆ: "img/day-hand-skin193.png",
        ⵠᐃΔΔⵠⲆΔ: "img/night-hand-skin193.png",
        ⲆⲆⵠΔΔᐃᐃ: "img/day-hand-skin194.png",
        ΔⵠⲆᐃⲆᐃΔ: "img/night-hand-skin194.png",
        ΔᐃⲆᐃᐃΔΔ: "img/day-hand-skin195.png",
        ⲆΔⵠΔᐃⲆᐃ: "img/night-hand-skin195.png",
        ⵠⲆⵠΔᐃⵠΔ: "img/day-hand-skin196.png",
        ΔΔΔΔᐃΔᐃ: "img/night-hand-skin196.png",
        ᐃⲆᐃΔⵠΔΔ: "img/day-hand-skin197.png",
        ⲆᐃᐃⵠⲆⲆΔ: "img/night-hand-skin197.png",
        ⲆⵠⵠⲆΔᐃⲆ: "img/day-hand-skin198.png",
        ⵠᐃⲆᐃΔⵠᐃ: "img/night-hand-skin198.png",
        ᐃᐃᐃⵠΔᐃᐃ: "img/day-hand-skin199.png",
        ⵠⵠΔᐃⲆⲆⵠ: "img/night-hand-skin199.png",
        ⲆⵠᐃⵠᐃΔⲆ: "img/day-hand-skin200.png",
        ᐃⲆΔⵠⵠᐃⲆ: "img/night-hand-skin200.png",
        ᐃΔⲆⵠΔᐃΔ: "img/day-hand-skin201.png",
        ⵠⲆᐃⲆᐃⵠⲆ: "img/night-hand-skin201.png",
        ΔᐃᐃⵠᐃΔᐃ: "img/day-hand-skin202.png",
        ⵠᐃⵠΔΔΔⲆ: "img/night-hand-skin202.png",
        ᐃⵠᐃΔⵠⲆⲆ: "img/day-hand-skin203.png",
        ⲆⲆᐃⲆΔⲆΔ: "img/night-hand-skin203.png",
        ΔⵠⲆⵠᐃᐃΔ: "img/day-hand-skin204.png",
        ⵠⲆⲆⲆⲆⵠⵠ: "img/night-hand-skin204.png",
        ⵠᐃⵠⲆᐃΔⵠ: "img/day-hand-skin205.png",
        ⲆⲆⵠⲆᐃΔᐃ: "img/night-hand-skin205.png",
        ΔᐃΔΔΔⲆⲆ: "img/day-hand-skin206.png",
        ᐃᐃΔᐃⲆᐃᐃ: "img/night-hand-skin206.png",
        ⲆΔⵠΔᐃΔΔ: "img/day-hand-skin207.png",
        ΔΔⲆΔⲆΔᐃ: "img/night-hand-skin207.png",
        ⵠΔⲆⵠⵠⲆⲆ: "img/day-hand-skin208.png",
        ᐃⲆⲆᐃΔᐃⵠ: "img/night-hand-skin208.png",
        ⵠᐃⲆᐃⲆᐃⲆ: "img/day-hand-skin209.png",
        ⲆⵠⵠⵠⵠᐃΔ: "img/night-hand-skin209.png",
        ⲆⵠⲆⲆⵠΔᐃ: "img/day-hand-skin210.png",
        ᐃⲆΔⲆΔⲆⲆ: "img/night-hand-skin210.png",
        ⲆⵠⲆᐃΔΔᐃ: "img/day-hand-skin211.png",
        ᐃⵠᐃⵠⵠⵠΔ: "img/night-hand-skin211.png",
        ΔⲆΔⵠⲆⲆΔ: "img/day-hand-skin212.png",
        ⵠⵠⲆⵠⲆⲆΔ: "img/night-hand-skin212.png",
        ⲆΔⲆⵠᐃⲆΔ: "img/day-bag-star0.png",
        ⵠᐃΔⵠⲆΔⵠ: "img/night-bag-star0.png",
        ᐃⲆⲆⵠᐃᐃΔ: "img/day-bag0.png",
        ⵠⲆⲆΔⲆᐃⵠ: "img/night-bag0.png",
        ᐃᐃⲆΔⵠᐃᐃ: "img/day-bag1.png",
        ΔΔⲆΔⲆⵠΔ: "img/night-bag1.png",
        ᐃⲆᐃⲆᐃⲆᐃ: "img/day-bag2.png",
        ⲆᐃⵠΔᐃᐃⵠ: "img/night-bag2.png",
        ⲆΔΔΔᐃΔⲆ: "img/day-bag3.png",
        ⲆΔⲆΔⵠᐃⲆ: "img/night-bag3.png",
        ᐃᐃΔⲆⵠⲆᐃ: "img/day-bag4.png",
        ΔΔⵠⵠⵠᐃⲆ: "img/night-bag4.png",
        ⵠⵠᐃᐃᐃΔΔ: "img/day-bag5.png",
        ᐃⵠᐃⲆᐃΔⲆ: "img/night-bag5.png",
        ⲆⲆᐃⲆᐃΔⵠ: "img/day-bag6.png",
        ⵠⵠΔⲆⵠⲆⵠ: "img/night-bag6.png",
        ᐃΔⵠᐃᐃⲆΔ: "img/day-bag7.png",
        ⵠⵠⲆⵠΔⵠᐃ: "img/night-bag7.png",
        ⵠⲆᐃᐃΔⲆⵠ: "img/day-bag8.png",
        ΔΔᐃΔΔᐃᐃ: "img/night-bag8.png",
        ⵠΔⲆⵠⲆⵠΔ: "img/day-bag9.png",
        ⵠⵠⲆΔⲆⵠΔ: "img/night-bag9.png",
        ΔᐃΔΔⵠⵠΔ: "img/day-bag10.png",
        ᐃᐃΔⲆᐃⲆⲆ: "img/night-bag10.png",
        ᐃⵠᐃᐃΔⲆⲆ: "img/day-bag11.png",
        ΔᐃⲆΔᐃⵠⵠ: "img/night-bag11.png",
        ⵠⲆⲆⵠⲆⲆⵠ: "img/day-bag13.png",
        ⲆⲆⵠᐃᐃᐃⲆ: "img/night-bag13.png",
        ⵠᐃⲆⲆΔΔΔ: "img/day-bag14.png",
        ᐃⲆⲆⲆⵠᐃᐃ: "img/night-bag14.png",
        ⲆⵠⵠΔⵠⲆᐃ: "img/day-bag16.png",
        ᐃΔⲆΔⵠΔⲆ: "img/night-bag16.png",
        ⵠΔⵠⲆⵠⵠⲆ: "img/day-bag17.png",
        ΔⲆⵠᐃᐃⵠΔ: "img/night-bag17.png",
        ΔⲆⵠΔⲆⵠΔ: "img/day-bag18.png",
        ⵠΔⲆⵠΔⲆⵠ: "img/night-bag18.png",
        ΔⵠⲆⵠΔΔⵠ: "img/day-bag19.png",
        ᐃⵠⲆⵠΔΔⲆ: "img/night-bag19.png",
        ⵠⵠΔΔⵠⲆⲆ: "img/day-bag20.png",
        ⵠⵠⲆⵠΔᐃⲆ: "img/night-bag20.png",
        ⵠⵠᐃΔⲆᐃᐃ: "img/day-bag21.png",
        ΔΔΔᐃⵠⵠⵠ: "img/night-bag21.png",
        ⲆⲆᐃᐃΔᐃΔ: "img/day-bag22.png",
        ᐃᐃⵠΔΔΔⵠ: "img/night-bag22.png",
        ⵠᐃΔᐃᐃⵠΔ: "img/day-bag23.png",
        ⵠΔⲆΔΔᐃⲆ: "img/night-bag23.png",
        ⲆⵠⵠⵠⲆᐃᐃ: "img/day-bag24.png",
        ⲆⵠΔⵠᐃᐃΔ: "img/night-bag24.png",
        ⵠⵠⲆΔⲆⵠⵠ: "img/day-bag25.png",
        ᐃⲆᐃⵠⵠΔⵠ: "img/night-bag25.png",
        ⲆⵠⵠⲆΔⵠΔ: "img/day-bag26.png",
        ⲆⲆΔΔᐃⲆᐃ: "img/night-bag26.png",
        ΔΔⲆᐃⵠΔΔ: "img/day-bag27.png",
        ᐃⵠΔⵠᐃᐃΔ: "img/night-bag27.png",
        ᐃΔᐃΔΔΔᐃ: "img/day-bag28.png",
        ᐃⵠⵠⲆⲆⵠⵠ: "img/night-bag28.png",
        Ⲇᐃⵠⵠᐃⵠᐃ: "img/day-bag29.png",
        ⲆΔᐃⲆⲆᐃⲆ: "img/night-bag29.png",
        ⲆᐃⵠⲆⵠⲆⵠ: "img/day-bag30.png",
        ⲆᐃⲆⵠⵠⲆⲆ: "img/night-bag30.png",
        ⲆΔᐃΔⵠΔⲆ: "img/day-bag31.png",
        ⲆᐃᐃΔⵠᐃΔ: "img/night-bag31.png",
        ᐃᐃⵠⵠᐃᐃⵠ: "img/day-bag32.png",
        ⲆᐃᐃΔⲆΔⲆ: "img/night-bag32.png",
        ⲆⲆΔᐃᐃⲆᐃ: "img/day-bag33.png",
        ⵠΔᐃⲆΔᐃΔ: "img/night-bag33.png",
        ⵠⲆΔⵠᐃⵠΔ: "img/day-bag34.png",
        ᐃⲆⵠⲆⵠΔΔ: "img/night-bag34.png",
        ⲆⲆᐃᐃΔⲆⲆ: "img/day-bag35.png",
        ΔᐃⵠΔΔⵠΔ: "img/night-bag35.png",
        ᐃᐃⲆΔⵠⵠΔ: "img/day-bag36.png",
        ᐃᐃⲆⲆΔΔΔ: "img/night-bag36.png",
        ⵠᐃΔᐃⵠⲆΔ: "img/day-bag37.png",
        ⵠᐃⵠⲆⵠΔᐃ: "img/night-bag37.png",
        ⵠᐃⲆⲆᐃⲆⵠ: "img/day-bag38.png",
        ⲆⲆⲆᐃΔⵠᐃ: "img/night-bag38.png",
        ᐃΔΔΔⲆⲆⲆ: "img/day-bag39.png",
        ΔΔΔⲆᐃᐃΔ: "img/night-bag39.png",
        ⵠⵠΔᐃᐃⲆΔ: "img/day-bag40.png",
        ⵠᐃᐃΔⲆⵠⲆ: "img/night-bag40.png",
        ⲆΔᐃⵠΔⲆΔ: "img/day-bag41.png",
        ⵠΔΔⵠᐃΔᐃ: "img/night-bag41.png",
        ⲆⲆⲆᐃⵠΔᐃ: "img/day-bag42.png",
        ⲆⵠΔⲆⲆᐃΔ: "img/night-bag42.png",
        ⵠⵠⵠⵠⵠⲆᐃ: "img/day-bag43.png",
        ΔᐃⵠⵠᐃⵠΔ: "img/night-bag43.png",
        ΔⵠⵠΔΔⲆⵠ: "img/day-bag44.png",
        ⵠⵠⵠⵠΔⵠΔ: "img/night-bag44.png",
        ΔⵠⵠΔⵠⲆᐃ: "img/day-bag45.png",
        ⵠᐃⲆⵠⲆΔⲆ: "img/night-bag45.png",
        ⲆᐃΔⵠᐃⲆⲆ: "img/day-bag46.png",
        ᐃΔⲆⲆⵠⵠⲆ: "img/night-bag46.png",
        ᐃⵠⲆⲆⵠᐃᐃ: "img/day-bag47.png",
        ᐃⲆᐃΔᐃᐃΔ: "img/night-bag47.png",
        ⵠⵠᐃΔⲆⵠⵠ: "img/day-bag48.png",
        ᐃΔⲆᐃᐃᐃⵠ: "img/night-bag48.png",
        ⵠⵠᐃⲆⵠⵠⵠ: "img/day-bag49.png",
        ΔⲆᐃΔⲆᐃⵠ: "img/night-bag49.png",
        ⵠⲆⵠΔⲆΔⲆ: "img/day-bag50.png",
        ⵠᐃΔΔΔΔᐃ: "img/night-bag50.png",
        ⵠΔᐃΔΔΔⵠ: "img/day-bag51.png",
        ⵠᐃΔⵠΔⲆⵠ: "img/night-bag51.png",
        ⵠⵠⲆΔᐃᐃⵠ: "img/day-bag52.png",
        ⵠᐃΔⵠⲆᐃΔ: "img/night-bag52.png",
        ⵠⵠⵠᐃⵠⵠⵠ: "img/day-bag53.png",
        ᐃᐃΔᐃΔΔⲆ: "img/night-bag53.png",
        ᐃᐃⵠΔΔΔⲆ: "img/day-bag54.png",
        ΔᐃⲆⲆᐃⵠᐃ: "img/night-bag54.png",
        ΔᐃⵠᐃΔⵠⲆ: "img/day-bag55.png",
        ᐃᐃᐃᐃΔⲆⲆ: "img/night-bag55.png",
        ᐃΔΔⲆⵠΔⵠ: "img/day-bag56.png",
        ⲆΔⵠⵠⵠⵠⵠ: "img/night-bag56.png",
        ᐃᐃᐃΔΔᐃᐃ: "img/day-bag57.png",
        ᐃΔᐃⵠᐃⵠᐃ: "img/night-bag57.png",
        ΔⲆΔⵠⲆⵠΔ: "img/day-bag58.png",
        ΔⲆⵠΔᐃⲆᐃ: "img/night-bag58.png",
        ΔⲆⲆⵠⵠⵠⵠ: "img/day-bag59.png",
        ⵠᐃΔᐃΔᐃⲆ: "img/night-bag59.png",
        ⵠΔΔᐃⲆⵠΔ: "img/day-bag60.png",
        ⵠᐃᐃⵠᐃⲆⵠ: "img/night-bag60.png",
        ⲆⵠΔΔⲆΔᐃ: "img/day-bag61.png",
        ᐃᐃⲆΔᐃᐃᐃ: "img/night-bag61.png",
        ΔΔⲆᐃⵠⵠΔ: "img/day-bag62.png",
        ΔⵠⲆⵠᐃᐃⲆ: "img/night-bag62.png",
        ⵠⲆⵠⲆΔᐃᐃ: "img/day-bag63.png",
        ⵠⵠⲆᐃᐃᐃⵠ: "img/night-bag63.png",
        ⵠⵠⵠⵠⵠⲆΔ: "img/day-bag64.png",
        ᐃⲆΔΔΔᐃⵠ: "img/night-bag64.png",
        ⲆⲆⵠΔᐃⵠⵠ: "img/day-bag65.png",
        ⵠⲆⲆΔΔⲆᐃ: "img/night-bag65.png",
        ⵠΔᐃᐃᐃⵠΔ: "img/day-bag66.png",
        ᐃⵠΔᐃᐃΔⲆ: "img/night-bag66.png",
        ⲆⵠⵠⲆᐃᐃⵠ: "img/day-bag67.png",
        ⲆⵠᐃᐃⵠⵠΔ: "img/night-bag67.png",
        ⵠΔᐃⲆⲆᐃⲆ: "img/day-bag68.png",
        ΔᐃΔᐃⲆᐃΔ: "img/night-bag68.png",
        ⵠⵠΔⲆΔᐃⵠ: "img/day-bag69.png",
        ΔᐃⲆᐃⵠⲆⲆ: "img/night-bag69.png",
        ⲆⲆⲆΔᐃⲆᐃ: "img/day-bag70.png",
        ⲆⲆⲆⵠΔᐃᐃ: "img/night-bag70.png",
        ⲆΔⵠΔΔⲆⲆ: "img/day-bag71.png",
        ΔⵠⵠΔΔᐃⲆ: "img/night-bag71.png",
        ΔΔΔᐃⲆⲆⵠ: "img/day-bag72.png",
        ⲆΔⲆΔΔⲆΔ: "img/night-bag72.png",
        ⲆⲆⵠⲆⵠⲆΔ: "img/day-bag73.png",
        ⲆᐃᐃᐃᐃᐃⲆ: "img/night-bag73.png",
        ΔⲆΔⵠⲆᐃⵠ: "img/day-bag74.png",
        ⲆⲆⲆᐃΔⲆΔ: "img/night-bag74.png",
        ΔᐃΔⲆΔⲆⲆ: "img/day-bag75.png",
        ⲆⵠΔⵠⲆΔⵠ: "img/night-bag75.png",
        ⵠⵠᐃⵠΔᐃⲆ: "img/day-bag76.png",
        ⵠᐃᐃⲆⵠⲆᐃ: "img/night-bag76.png",
        ⲆΔᐃΔⲆᐃⲆ: "img/day-bag77.png",
        ⲆⵠΔΔᐃᐃⵠ: "img/night-bag77.png",
        ⵠΔⲆᐃΔⵠᐃ: "img/day-bag78.png",
        ⵠⵠΔᐃⵠᐃⲆ: "img/night-bag78.png",
        ⵠⵠⵠᐃᐃⲆᐃ: "img/day-bag79.png",
        ⵠⲆΔⵠⲆⵠΔ: "img/night-bag79.png",
        ⵠⲆΔᐃΔΔᐃ: "img/day-bag80.png",
        ⲆᐃᐃᐃⲆᐃⵠ: "img/night-bag80.png",
        ᐃⲆⲆⲆΔᐃⲆ: "img/day-accessory0.png",
        ⵠⵠⲆᐃᐃⲆⲆ: "img/day-accessory0-pacques.png",
        ᐃΔᐃⲆⵠᐃᐃ: "img/night-accessory0-pacques.png",
        ⵠⲆⵠⲆⲆᐃⲆ: "img/day-accessory13.png",
        ΔⵠⵠⲆⵠⵠᐃ: "img/night-accessory13.png",
        ⵠⵠᐃᐃᐃᐃⲆ: "img/day-accessory14.png",
        ⲆΔᐃⵠⵠⲆⲆ: "img/night-accessory14.png",
        ΔΔᐃⵠΔⲆⵠ: "img/day-accessory15.png",
        ⲆⵠⲆΔⲆᐃⲆ: "img/night-accessory15.png",
        ᐃᐃⲆⲆᐃᐃΔ: "img/day-accessory16.png",
        ᐃΔΔΔΔⲆΔ: "img/night-accessory16.png",
        ⵠⵠⲆᐃᐃⲆⲆ: "img/day-accessory82.png",
        ᐃΔᐃⲆⵠᐃᐃ: "img/day-accessory82.png",
        ⲆΔⵠⲆᐃᐃⵠ: "img/day-accessory17.png",
        ⲆᐃΔⵠᐃᐃΔ: "img/day-accessory17.png",
        ⵠⵠᐃⲆⲆⵠⲆ: "img/day-accessory19.png",
        ᐃᐃⲆΔᐃⵠᐃ: "img/night-accessory19.png",
        ⲆⵠᐃⲆⲆᐃΔ: "img/day-accessory20.png",
        ΔⲆⵠⵠΔΔΔ: "img/night-accessory20.png",
        ΔᐃⵠΔᐃⵠⵠ: "img/day-accessory21.png",
        ⵠΔᐃᐃⲆᐃⵠ: "img/night-accessory21.png",
        ΔΔⵠᐃΔⵠⵠ: "img/day-accessory22.png",
        ΔΔᐃᐃⲆⵠΔ: "img/night-accessory22.png",
        ᐃⲆΔΔⵠⲆⲆ: "img/day-accessory23.png",
        ⵠⲆⵠⵠⵠⵠⲆ: "img/night-accessory23.png",
        ᐃΔΔⲆⵠᐃᐃ: "img/day-accessory24.png",
        ᐃΔΔⲆⲆⵠⲆ: "img/night-accessory24.png",
        ⲆⵠᐃⲆⵠΔⲆ: "img/day-accessory25.png",
        ᐃⲆⵠⲆᐃⲆᐃ: "img/night-accessory25.png",
        ᐃⵠⵠᐃⲆⵠᐃ: "img/day-accessory26.png",
        ⵠⵠᐃᐃⵠⵠΔ: "img/night-accessory26.png",
        ΔᐃΔⲆⲆⵠᐃ: "img/day-accessory27.png",
        ΔᐃΔΔⲆᐃⲆ: "img/night-accessory27.png",
        ΔΔᐃᐃᐃᐃⵠ: "img/day-accessory18.png",
        ᐃⵠΔᐃⲆⲆΔ: "img/night-accessory18.png",
        ΔᐃᐃⲆⵠᐃⲆ: "img/day-accessory29.png",
        ⵠᐃᐃⲆᐃⲆᐃ: "img/night-accessory29.png",
        ᐃᐃⵠᐃΔᐃΔ: "img/day-accessory30.png",
        ⲆⲆⵠⵠⵠⵠΔ: "img/night-accessory30.png",
        ⲆⵠΔᐃΔΔΔ: "img/day-accessory31.png",
        ᐃΔⲆⵠⵠⲆⵠ: "img/night-accessory31.png",
        ᐃⵠⲆⵠᐃΔⵠ: "img/day-accessory32.png",
        ⲆⵠⲆΔⵠⲆᐃ: "img/night-accessory32.png",
        ⵠΔⵠᐃΔⲆΔ: "img/day-accessory33.png",
        ⵠΔⲆᐃⲆᐃΔ: "img/night-accessory33.png",
        ⲆΔΔⲆⲆΔⲆ: "img/day-accessory34.png",
        ᐃᐃᐃⵠᐃᐃᐃ: "img/night-accessory34.png",
        ⵠⲆⲆⵠᐃⵠⲆ: "img/day-accessory35.png",
        ᐃΔΔᐃⵠΔᐃ: "img/night-accessory35.png",
        ΔᐃⵠⵠᐃᐃⲆ: "img/day-accessory28.png",
        ᐃⲆⵠᐃⲆΔᐃ: "img/night-accessory28.png",
        ΔⵠΔⲆⲆⵠⵠ: "img/day-accessory36.png",
        ⲆⲆⵠΔᐃⵠᐃ: "img/night-accessory36.png",
        ᐃⵠᐃⵠⵠΔΔ: "img/day-accessory37.png",
        ⵠᐃⲆⵠΔΔⵠ: "img/night-accessory37.png",
        ΔΔᐃⲆᐃⲆΔ: "img/day-accessory39.png",
        ⲆⲆⲆⵠΔΔᐃ: "img/night-accessory39.png",
        ᐃᐃΔⲆᐃⲆΔ: "img/day-accessory40.png",
        ⲆⲆⲆⵠⵠΔᐃ: "img/night-accessory40.png",
        ⵠΔᐃΔΔᐃⲆ: "img/day-accessory41.png",
        ᐃⵠΔΔⵠⲆⲆ: "img/night-accessory41.png",
        ΔⲆΔᐃᐃΔⵠ: "img/day-accessory42.png",
        ⵠⲆᐃⲆⵠⵠΔ: "img/night-accessory42.png",
        ΔⵠᐃⲆΔⲆΔ: "img/day-accessory43.png",
        ΔΔΔΔⲆⵠⲆ: "img/night-accessory43.png",
        ⵠⲆⲆⵠⵠⵠⵠ: "img/day-accessory44.png",
        ΔⵠΔΔⲆᐃⲆ: "img/night-accessory44.png",
        ⲆΔⲆⵠᐃᐃᐃ: "img/day-accessory38.png",
        ⲆⵠΔⲆⵠᐃⵠ: "img/night-accessory38.png",
        ᐃⲆⲆⵠⲆⲆᐃ: "img/day-accessory46.png",
        ΔⲆᐃᐃᐃⲆⲆ: "img/night-accessory46.png",
        ⵠⲆᐃⵠⲆⲆΔ: "img/day-accessory47.png",
        ⵠⵠⲆΔⵠⲆΔ: "img/night-accessory47.png",
        ⵠⵠⵠᐃⲆᐃᐃ: "img/day-accessory48.png",
        ⵠΔΔᐃⵠᐃΔ: "img/night-accessory48.png",
        ⲆΔΔⵠΔⵠΔ: "img/day-accessory49.png",
        ΔⵠⲆᐃⲆⲆⲆ: "img/night-accessory49.png",
        ⵠΔⵠⲆᐃΔᐃ: "img/day-accessory45.png",
        ΔΔⵠᐃⵠⲆᐃ: "img/night-accessory45.png",
        ⵠⲆⵠΔⵠΔⵠ: "img/day-accessory50.png",
        ΔᐃⵠⵠⵠⲆΔ: "img/night-accessory50.png",
        ᐃⵠᐃⲆⵠⵠᐃ: "img/day-accessory51.png",
        ⵠᐃΔΔⲆΔᐃ: "img/night-accessory51.png",
        ᐃⵠΔⵠⵠⲆⵠ: "img/day-accessory52.png",
        ΔⵠΔⲆⲆⲆⵠ: "img/night-accessory52.png",
        ᐃⵠⲆⵠᐃⲆⵠ: "img/day-accessory53.png",
        ⵠΔⲆᐃⲆΔΔ: "img/night-accessory53.png",
        ΔΔΔΔⵠⲆᐃ: "img/day-accessory54.png",
        ⲆⵠⲆΔΔⵠᐃ: "img/night-accessory54.png",
        ⲆΔⵠⵠΔⵠⲆ: "img/day-accessory55.png",
        ⲆⵠΔⵠΔⲆΔ: "img/night-accessory55.png",
        ⵠᐃⲆᐃⵠᐃᐃ: "img/day-accessory56.png",
        ⲆⲆᐃⵠᐃᐃⵠ: "img/night-accessory56.png",
        ⲆΔΔᐃⲆΔᐃ: "img/day-accessory57.png",
        ΔⵠⵠⲆᐃΔⲆ: "img/night-accessory57.png",
        ⵠⵠⵠⵠⲆΔΔ: "img/day-accessory58.png",
        ΔⵠΔΔᐃⲆᐃ: "img/night-accessory58.png",
        ΔⲆⵠᐃⵠⲆⲆ: "img/day-accessory59.png",
        ΔΔᐃΔᐃⵠᐃ: "img/night-accessory59.png",
        ⵠΔΔⲆᐃΔⵠ: "img/day-accessory60.png",
        ΔΔⲆⵠΔⵠⲆ: "img/night-accessory60.png",
        ⵠⲆⵠⵠΔΔⲆ: "img/day-accessory61.png",
        ⲆⵠΔⲆⲆΔⲆ: "img/night-accessory61.png",
        ΔΔΔⵠⵠΔᐃ: "img/day-accessory62.png",
        ᐃᐃΔⵠᐃⵠⵠ: "img/night-accessory62.png",
        ⵠⵠᐃΔΔⲆⵠ: "img/day-accessory63.png",
        ⲆⵠᐃⵠⲆⵠΔ: "img/night-accessory63.png",
        ΔΔⵠΔΔΔⲆ: "img/day-accessory64.png",
        ⵠⵠᐃⵠⲆⲆⲆ: "img/night-accessory64.png",
        ⵠⲆⵠⵠΔⵠⲆ: "img/day-accessory65.png",
        ⲆᐃⵠⲆⲆΔᐃ: "img/night-accessory65.png",
        ⵠⵠᐃⲆⲆⵠΔ: "img/day-accessory66.png",
        ΔΔᐃⲆΔⲆᐃ: "img/night-accessory66.png",
        ⲆⲆΔᐃⵠⵠⲆ: "img/day-accessory67.png",
        ᐃᐃⵠⵠΔΔᐃ: "img/night-accessory67.png",
        ᐃΔᐃⲆⵠⵠⲆ: "img/day-accessory68.png",
        ⲆⵠⵠᐃⵠΔⲆ: "img/night-accessory68.png",
        ⵠⲆΔΔⲆⲆΔ: "img/day-accessory69.png",
        ΔⲆᐃᐃⲆⵠΔ: "img/night-accessory69.png",
        ΔⵠᐃⲆΔᐃᐃ: "img/day-accessory70.png",
        ΔᐃᐃᐃΔᐃᐃ: "img/night-accessory70.png",
        ⲆⲆⲆΔⵠⲆᐃ: "img/day-accessory71.png",
        ⵠΔᐃᐃᐃⲆᐃ: "img/night-accessory71.png",
        ᐃΔⲆΔⲆΔΔ: "img/day-accessory72.png",
        ⵠⵠᐃⲆⵠᐃⵠ: "img/night-accessory72.png",
        ᐃⲆⲆᐃⵠΔΔ: "img/day-accessory73.png",
        ΔΔᐃᐃⲆᐃᐃ: "img/night-accessory73.png",
        ΔⲆΔⵠᐃᐃᐃ: "img/day-accessory74.png",
        ⲆΔⲆⵠᐃⵠᐃ: "img/night-accessory74.png",
        ΔᐃⲆΔᐃᐃⲆ: "img/day-accessory75.png",
        ⲆᐃⲆᐃⲆⲆⲆ: "img/night-accessory75.png",
        ᐃⲆᐃᐃΔⲆⵠ: "img/day-accessory76.png",
        ΔΔⵠᐃΔⲆⲆ: "img/night-accessory76.png",
        ᐃⲆⲆⲆⲆⵠΔ: "img/day-accessory77.png",
        ⵠΔⲆⲆΔⵠΔ: "img/night-accessory77.png",
        ΔΔᐃᐃⵠⵠⲆ: "img/day-accessory78.png",
        ⲆΔᐃᐃΔᐃᐃ: "img/night-accessory78.png",
        ⵠΔⵠᐃⵠᐃⲆ: "img/day-accessory79.png",
        ᐃΔⵠⲆΔᐃⲆ: "img/night-accessory79.png",
        ⵠⵠⲆΔⵠⵠᐃ: "img/day-accessory80.png",
        ⲆⵠΔⲆΔⲆᐃ: "img/night-accessory80.png",
        ᐃᐃΔᐃⲆⵠΔ: "img/day-accessory81.png",
        ᐃᐃⲆⲆΔΔⲆ: "img/night-accessory81.png",
        ⲆΔᐃᐃⲆⲆᐃ: "img/day-accessory83.png",
        ⲆⵠⲆᐃⲆⵠΔ: "img/night-accessory83.png",
        ΔⵠΔΔⵠΔᐃ: "img/day-accessory84.png",
        ⲆᐃΔⲆⲆⵠⵠ: "img/night-accessory84.png",
        ᐃⵠⵠΔⵠᐃΔ: "img/day-accessory85.png",
        ΔⲆΔⲆⵠⲆⲆ: "img/night-accessory85.png",
        ᐃⲆΔⲆᐃⲆΔ: "img/day-accessory86.png",
        ΔⵠⵠΔΔΔⲆ: "img/night-accessory86.png",
        ΔΔΔᐃⵠᐃΔ: "img/day-accessory87.png",
        ΔⵠᐃⲆⲆΔᐃ: "img/night-accessory87.png",
        ⲆⵠⲆΔᐃⵠⵠ: "img/day-accessory88.png",
        ⲆⵠΔᐃⵠⵠⵠ: "img/night-accessory88.png",
        ⵠΔΔΔΔⵠΔ: "img/day-accessory89.png",
        ᐃᐃⵠΔᐃⵠΔ: "img/night-accessory89.png",
        ⲆⲆⲆⵠΔᐃΔ: "img/day-accessory90.png",
        ⵠⲆⵠⵠᐃⲆⵠ: "img/night-accessory90.png",
        ᐃⵠⵠⵠⲆⵠⵠ: "img/day-accessory91.png",
        ᐃⲆⲆᐃΔⵠΔ: "img/night-accessory91.png",
        ᐃᐃΔΔⲆΔⲆ: "img/day-accessory92.png",
        ΔⵠᐃⵠΔᐃΔ: "img/night-accessory92.png",
        ⵠΔᐃⵠⵠΔⵠ: "img/day-accessory93.png",
        ᐃⵠⲆⲆΔΔᐃ: "img/night-accessory93.png",
        ⲆⲆΔⵠᐃᐃⵠ: "img/day-accessory94.png",
        ᐃⲆⵠⲆΔΔⵠ: "img/night-accessory94.png",
        ΔΔᐃΔΔⲆⵠ: "img/day-accessory95.png",
        ᐃⲆⵠΔⵠΔΔ: "img/night-accessory95.png",
        ⵠⵠΔΔⲆᐃΔ: "img/day-accessory96.png",
        ᐃᐃᐃⲆⵠⲆΔ: "img/night-accessory96.png",
        ⲆΔⵠⲆΔᐃᐃ: "img/day-accessory97.png",
        ᐃⵠⵠΔΔⲆⲆ: "img/night-accessory97.png",
        ⲆⲆⵠⵠᐃⵠᐃ: "img/day-accessory98.png",
        ⲆΔΔⵠΔᐃⲆ: "img/night-accessory98.png",
        ΔⲆⵠᐃΔΔΔ: "img/day-accessory99.png",
        ᐃⵠⵠⲆⲆΔⲆ: "img/night-accessory99.png",
        ⵠᐃᐃⵠⵠⵠᐃ: "img/day-accessory100.png",
        ⲆΔΔⵠᐃΔΔ: "img/night-accessory100.png",
        ⵠᐃⲆⲆⲆⲆΔ: "img/day-accessory101.png",
        ⵠΔᐃⵠⵠΔΔ: "img/night-accessory101.png",
        ⵠᐃΔⲆΔⲆⵠ: "img/day-accessory102.png",
        ⵠᐃⲆⵠᐃⵠⲆ: "img/night-accessory102.png",
        ᐃⲆⵠⲆᐃⵠΔ: "img/day-accessory103.png",
        ⲆΔⵠᐃⲆᐃⵠ: "img/night-accessory103.png",
        ᐃΔΔΔⵠᐃⲆ: "img/day-accessory104.png",
        ΔΔᐃⲆᐃⲆⵠ: "img/night-accessory104.png",
        ᐃᐃΔᐃΔⲆⵠ: "img/day-accessory105.png",
        ⲆⲆΔᐃⵠΔⲆ: "img/night-accessory105.png",
        ΔΔⵠⲆᐃΔⵠᐃⵠ: "img/day-accessory106.png",
        ᐃⲆⲆᐃⲆⲆⲆⵠΔ: "img/night-accessory106.png",
        ⲆΔΔⵠΔⵠΔⲆᐃ: "img/day-accessory107.png",
        ΔᐃⵠᐃΔⵠⵠᐃΔ: "img/night-accessory107.png",
        ⵠᐃⲆᐃΔᐃⲆ: "img/day-book0.png",
        ⵠⲆⵠᐃⵠΔⵠ: "img/night-book0.png",
        ΔᐃᐃⵠⲆⲆᐃ: "img/day-book1.png",
        ⲆᐃⵠᐃΔⵠᐃ: "img/night-book1.png",
        ⵠᐃΔⲆⲆⵠⲆ: "img/day-book2.png",
        Δᐃᐃⵠᐃᐃⵠ: "img/night-book2.png",
        ΔΔΔΔⵠⲆⵠ: "img/day-book3.png",
        ⵠΔᐃⲆⲆⵠⵠ: "img/night-book3.png",
        ΔⲆⲆΔⲆⲆⲆ: "img/day-book4.png",
        ΔⵠΔᐃΔᐃⵠ: "img/night-book4.png",
        ⵠⲆⲆⵠⲆⲆⲆ: "img/day-book5.png",
        ⵠᐃⲆᐃⵠⵠΔ: "img/night-book5.png",
        ΔⲆⵠⲆⲆⲆⵠ: "img/day-book6.png",
        ᐃⵠᐃⵠΔⲆᐃ: "img/night-book6.png",
        ⵠΔΔⲆⲆᐃⲆ: "img/day-book7.png",
        ⲆᐃⲆⵠᐃᐃᐃ: "img/night-book7.png",
        ⵠⵠⲆᐃᐃⵠΔ: "img/day-book8.png",
        ⲆⲆᐃΔⲆΔᐃ: "img/night-book8.png",
        ΔⲆⲆΔΔΔⲆ: "img/day-book9.png",
        ⵠⲆΔⲆΔⵠᐃ: "img/night-book9.png",
        ⵠⵠΔⲆⵠⲆᐃ: "img/day-book10.png",
        ΔⵠⲆⵠΔⲆⵠ: "img/night-book10.png",
        ΔᐃⲆΔⵠⲆΔ: "img/day-book11.png",
        ⲆⲆⲆⵠⲆΔⲆ: "img/night-book11.png",
        ⲆᐃⵠⵠΔⲆΔ: "img/day-book12.png",
        ⵠΔᐃⵠᐃⲆⵠ: "img/night-book12.png",
        ⲆΔΔⵠⲆⵠⵠ: "img/day-book13.png",
        ⵠΔⵠⲆⵠⲆᐃ: "img/night-book13.png",
        ᐃⲆΔⵠᐃⵠᐃ: "img/day-book14.png",
        ⵠΔⲆⵠⲆᐃᐃ: "img/night-book14.png",
        ⵠⲆΔⵠⵠⵠΔ: "img/day-book15.png",
        ᐃΔⲆⲆᐃᐃΔ: "img/night-book15.png",
        ⲆΔⵠΔⵠⵠⲆ: "img/day-book16.png",
        ⲆᐃⲆⲆΔΔⲆ: "img/night-book16.png",
        ⵠⲆⵠⵠⵠΔⵠ: "img/day-book17.png",
        ⵠⵠΔΔΔⵠⲆ: "img/night-book17.png",
        ΔⲆⵠⵠⲆⲆᐃ: "img/day-book18.png",
        ΔΔΔᐃⵠᐃⲆ: "img/night-book18.png",
        ⲆⵠΔΔΔΔΔ: "img/day-book19.png",
        ΔᐃⵠᐃⵠᐃΔ: "img/night-book19.png",
        ⵠⲆⲆⲆᐃΔⵠ: "img/day-book20.png",
        ⲆΔⲆΔᐃΔⵠ: "img/night-book20.png",
        ᐃΔⵠᐃᐃⲆⵠ: "img/day-book21.png",
        ⵠⵠⲆⵠᐃⵠⵠ: "img/night-book21.png",
        ᐃⲆΔⵠⲆᐃⲆ: "img/day-book22.png",
        ⲆⵠΔΔΔⲆⲆ: "img/night-book22.png",
        ΔⲆᐃⵠΔⵠⵠ: "img/day-book23.png",
        ΔⵠⲆⵠⵠΔΔ: "img/night-book23.png",
        ⲆⵠⵠᐃᐃⲆΔ: "img/day-book24.png",
        ⵠΔᐃΔΔⵠΔ: "img/night-book24.png",
        ⲆⲆⲆᐃⵠⲆⲆ: "img/day-book25.png",
        ᐃΔΔⵠᐃᐃⲆ: "img/night-book25.png",
        ᐃᐃⵠᐃᐃᐃΔ: "img/day-book26.png",
        ⲆⵠⵠΔⵠΔⵠ: "img/night-book26.png",
        ᐃⲆⵠᐃⲆⲆᐃ: "img/day-book27.png",
        ΔⲆⲆᐃᐃⵠᐃ: "img/night-book27.png",
        ᐃᐃⲆᐃΔⵠΔ: "img/day-book28.png",
        ⵠⲆⵠᐃᐃᐃⵠ: "img/night-book28.png",
        ᐃⲆΔᐃⵠΔⵠ: "img/day-book29.png",
        ΔᐃⵠⲆᐃⲆΔ: "img/night-book29.png",
        ᐃⵠⵠᐃΔΔⲆ: "img/day-book30.png",
        ⲆⲆᐃᐃΔⵠᐃ: "img/night-book30.png",
        ΔΔΔᐃᐃⵠᐃ: "img/day-book31.png",
        ΔΔΔⵠⵠΔΔ: "img/night-book31.png",
        ΔⵠΔᐃΔⵠᐃ: "img/day-book32.png",
        ᐃᐃΔᐃΔⵠⵠ: "img/night-book32.png",
        ⵠΔⲆⲆⲆⲆⲆ: "img/day-book33.png",
        ΔΔᐃⵠⲆᐃⵠ: "img/night-book33.png",
        ΔᐃᐃΔᐃᐃΔ: "img/day-book34.png",
        ⲆᐃΔⵠᐃⲆⵠ: "img/night-book34.png",
        ⲆⵠⵠⲆⵠΔⵠ: "img/day-book35.png",
        ΔⲆᐃⵠᐃⵠⵠ: "img/night-book35.png",
        ᐃᐃᐃⲆᐃᐃⲆ: "img/day-book36.png",
        ⲆΔⲆᐃⲆΔΔ: "img/night-book36.png",
        ⵠᐃΔΔᐃΔⵠΔⲆ: "img/day-book37.png",
        ⵠⲆΔⲆⲆⵠⵠⲆⲆ: "img/night-book37.png",
        ⲆΔᐃΔΔⵠΔ: "img/day-book38.png",
        ᐃⲆᐃⵠᐃΔΔ: "img/night-book38.png",
        ΔⲆⵠⵠⵠⵠⲆ: "img/day-book39.png",
        ΔΔᐃⵠⵠⲆⲆ: "img/night-book39.png",
        ΔΔⵠⲆᐃⲆᐃ: "img/day-book40.png",
        ⵠᐃⵠᐃᐃᐃᐃ: "img/night-book40.png",
        ΔΔΔⵠᐃᐃⲆ: "img/day-book41.png",
        ⵠⵠΔᐃⲆΔⵠ: "img/night-book41.png",
        ⵠᐃⵠⵠΔⲆᐃ: "img/day-book42.png",
        ᐃᐃⲆⵠΔⲆⲆ: "img/night-book42.png",
        ᐃΔⲆΔΔᐃⵠ: "img/day-book43.png",
        ⵠΔΔⲆΔⲆΔ: "img/night-book43.png",
        ⵠΔᐃⵠⲆⵠⵠ: "img/day-book44.png",
        ⵠΔⵠᐃⲆᐃⵠ: "img/night-book44.png",
        Δⵠᐃᐃᐃⵠⵠ: "img/day-book45.png",
        ⲆⲆΔⲆⵠⲆⵠ: "img/night-book45.png",
        ⲆᐃᐃΔⲆΔᐃ: "img/day-book46.png",
        ΔΔⲆᐃᐃⲆΔ: "img/night-book46.png",
        ⲆⵠⵠⵠᐃⲆⵠ: "img/day-book47.png",
        ΔⲆⲆⲆⵠⲆⵠ: "img/night-book47.png",
        ΔΔᐃⲆᐃΔᐃ: "img/day-book48.png",
        ⵠⵠΔΔⲆⵠΔ: "img/night-book48.png",
        ΔΔᐃⲆᐃⲆᐃ: "img/day-book49.png",
        ᐃⵠᐃⲆⲆⲆⲆ: "img/night-book49.png",
        ᐃᐃⲆᐃⵠΔⵠ: "img/day-book50.png",
        ΔᐃⵠᐃΔΔᐃ: "img/night-book50.png",
        ⵠΔΔⵠΔⵠⲆ: "img/day-crate1.png",
        ⵠⵠⲆⵠΔⵠΔ: "img/night-crate1.png",
        ᐃΔᐃᐃⵠᐃⲆ: "img/day-crate2.png",
        ⵠⲆΔᐃⲆⲆⲆ: "img/night-crate2.png",
        ᐃⲆᐃΔⵠᐃⵠ: "img/day-crate3.png",
        ᐃⲆⲆΔⵠᐃⵠ: "img/night-crate3.png",
        ᐃⵠᐃᐃⵠⵠᐃ: "img/day-crate4.png",
        ⲆΔⲆⲆⲆᐃⵠ: "img/night-crate4.png",
        ΔᐃᐃⲆⵠΔᐃ: "img/day-crate5.png",
        ᐃΔⲆᐃᐃⵠⵠ: "img/night-crate5.png",
        ΔⲆⵠⲆΔᐃⲆ: "img/day-crate6.png",
        ΔᐃᐃΔⲆⵠⵠ: "img/night-crate6.png",
        ᐃⲆⲆⵠⲆΔΔ: "img/day-crate7.png",
        ΔΔΔⵠᐃⵠᐃ: "img/night-crate7.png",
        Δᐃⵠⵠⵠᐃᐃ: "img/day-crate8.png",
        ⵠⵠⲆⵠⲆΔⲆ: "img/night-crate8.png",
        ⵠΔΔⲆᐃⲆⲆ: "img/day-crate9.png",
        ⵠΔⲆⲆⵠⲆⲆ: "img/night-crate9.png",
        ΔᐃΔⵠⵠⵠΔ: "img/day-crate10.png",
        ⵠΔΔᐃⲆⵠⵠ: "img/night-crate10.png",
        ᐃⲆΔⲆⲆΔⲆ: "img/day-crate11.png",
        ⵠΔΔⲆΔΔⵠ: "img/night-crate11.png",
        ᐃⵠⵠᐃⵠΔⲆ: "img/day-crate12.png",
        ᐃᐃΔⲆⲆⲆⲆ: "img/night-crate12.png",
        ⲆᐃΔΔⲆΔⲆ: "img/day-crate13.png",
        ΔⵠᐃⵠⵠⵠΔ: "img/night-crate13.png",
        ᐃⲆⵠᐃᐃⵠⵠ: "img/day-crate14.png",
        ΔΔᐃⵠΔⵠⲆ: "img/night-crate14.png",
        ΔⲆⵠⵠᐃⵠⲆ: "img/day-crate15.png",
        ⵠΔⵠᐃⵠⵠΔ: "img/night-crate15.png",
        ⵠΔᐃΔΔⵠᐃ: "img/day-crate16.png",
        ⵠⵠⲆᐃᐃⲆⵠ: "img/night-crate16.png",
        ΔⲆⲆⲆΔⵠⵠ: "img/day-crate17.png",
        ⵠⵠⲆⲆᐃⲆΔ: "img/night-crate17.png",
        ⵠⲆΔᐃⲆⲆᐃ: "img/day-crate18.png",
        ᐃⵠΔⲆⲆⲆⵠ: "img/night-crate18.png",
        ΔⵠⲆᐃⵠᐃᐃ: "img/day-crate19.png",
        ΔᐃᐃⲆⲆⲆΔ: "img/night-crate19.png",
        ⲆᐃᐃⵠΔⵠⵠ: "img/day-crate20.png",
        Δᐃⵠᐃᐃᐃᐃ: "img/night-crate20.png",
        ΔⵠⲆⵠⲆΔᐃ: "img/day-crate21.png",
        ⵠⲆᐃΔΔᐃΔ: "img/night-crate21.png",
        ΔᐃΔⵠᐃᐃΔ: "img/day-crate22.png",
        ΔⲆⲆΔᐃⲆⵠ: "img/night-crate22.png",
        ⵠΔΔΔⲆᐃᐃ: "img/day-crate23.png",
        ⲆΔⵠⵠΔᐃᐃ: "img/night-crate23.png",
        ᐃΔⵠⵠⵠⵠᐃ: "img/day-crate24.png",
        ᐃΔᐃⵠΔⵠⲆ: "img/night-crate24.png",
        ⵠᐃᐃΔⵠᐃⲆ: "img/day-crate25.png",
        ᐃΔⵠⲆⲆᐃΔ: "img/night-crate25.png",
        ⵠᐃⵠⵠᐃΔⲆ: "img/day-crate26.png",
        ⲆΔⲆᐃΔᐃΔ: "img/night-crate26.png",
        ⵠΔⵠᐃⵠⲆᐃ: "img/day-crate27.png",
        ⵠⵠΔΔᐃⵠᐃ: "img/night-crate27.png",
        ⲆⲆⲆⲆΔΔᐃ: "img/day-crate28.png",
        ⲆᐃᐃᐃΔⲆᐃ: "img/night-crate28.png",
        ᐃᐃᐃⲆΔΔΔ: "img/day-crate29.png",
        ΔⵠΔᐃⲆΔΔ: "img/night-crate29.png",
        ⲆⲆⲆΔⲆΔⲆ: "img/day-crate30.png",
        ⵠⲆⵠᐃΔΔⲆ: "img/night-crate30.png",
        ΔᐃᐃᐃᐃΔⲆ: "img/day-crate31.png",
        ΔⲆⲆⲆⲆⲆⲆ: "img/night-crate31.png",
        ⲆᐃᐃⵠⵠⵠΔ: "img/day-crate32.png",
        ΔᐃΔΔⵠΔⲆ: "img/night-crate32.png",
        ΔⵠⵠⲆᐃᐃⵠ: "img/day-crate33.png",
        ⵠⲆΔΔᐃᐃΔ: "img/night-crate33.png",
        ⵠⲆᐃΔⲆⵠⵠ: "img/day-crate34.png",
        ᐃⵠⲆΔΔⵠᐃ: "img/night-crate34.png",
        ⲆⲆΔᐃΔⲆᐃ: "img/day-crate35.png",
        ᐃⲆΔⲆⲆⵠⲆ: "img/night-crate35.png",
        ᐃⵠΔⵠᐃᐃⲆ: "img/day-crate36.png",
        ⵠᐃⲆᐃᐃΔΔ: "img/night-crate36.png",
        ᐃⲆΔΔΔΔⲆ: "img/day-crate37.png",
        ⲆᐃⵠⲆᐃᐃⲆ: "img/night-crate37.png",
        ΔⲆᐃᐃⲆᐃⵠ: "img/day-crate38.png",
        ΔⲆΔⵠΔⲆⵠ: "img/night-crate38.png",
        ⵠΔⲆⲆⲆⵠΔ: "img/day-crate39.png",
        ᐃⵠᐃᐃⲆⲆᐃ: "img/night-crate39.png",
        ⲆᐃᐃⵠΔᐃΔ: "img/day-crate40.png",
        ᐃᐃΔⵠⵠᐃᐃ: "img/night-crate40.png",
        ΔⵠⵠᐃⵠΔΔ: "img/day-crate41.png",
        ΔⲆⲆⵠⲆⲆⲆ: "img/night-crate41.png",
        ΔⵠⲆΔⲆⲆⲆ: "img/day-crate42.png",
        ⵠΔᐃᐃΔⵠⵠ: "img/night-crate42.png",
        ᐃΔⲆⵠᐃⲆΔ: "img/day-crate43.png",
        ᐃⵠⵠᐃᐃᐃΔ: "img/night-crate43.png",
        ⲆⲆⲆΔⲆᐃᐃ: "img/day-crate44.png",
        ⲆⲆΔⵠΔⲆΔ: "img/night-crate44.png",
        ΔᐃⲆΔⵠᐃⵠ: "img/day-crate45.png",
        ΔⵠᐃΔⲆᐃⵠ: "img/night-crate45.png",
        ⲆΔΔⵠΔⲆⵠ: "img/day-crate46.png",
        ⵠⵠⵠᐃΔΔΔ: "img/night-crate46.png",
        ⲆⵠⲆⵠΔᐃⲆ: "img/day-crate47.png",
        ⲆᐃᐃⲆΔΔⲆ: "img/night-crate47.png",
        ⲆᐃΔᐃΔᐃⲆ: "img/day-crate48.png",
        ⵠᐃΔⵠⲆᐃⲆ: "img/night-crate48.png",
        ΔΔⵠΔᐃⵠⵠ: "img/day-crate49.png",
        ⲆΔⲆΔⲆΔⵠ: "img/night-crate49.png",
        ΔⲆΔΔΔⲆΔ: "img/day-crate50.png",
        ᐃⵠΔⵠΔᐃΔ: "img/night-crate50.png",
        ΔⵠᐃⵠⵠⵠⲆ: "img/day-crate51.png",
        ⲆⲆⲆⵠⵠⲆᐃ: "img/night-crate51.png",
        ⲆᐃΔⵠᐃⲆΔ: "img/day-crate52.png",
        ⵠΔΔⲆΔᐃᐃ: "img/night-crate52.png",
        ΔⲆΔᐃⲆⵠⵠ: "img/day-crate53.png",
        ΔⲆΔⲆΔᐃⵠ: "img/night-crate53.png",
        ⲆᐃⵠᐃⲆΔⵠ: "img/day-crate54.png",
        ⵠᐃⲆᐃΔᐃⵠ: "img/night-crate54.png",
        ⲆⲆᐃΔⵠᐃⵠ: "img/day-crate55.png",
        ᐃΔΔⵠΔΔⲆ: "img/night-crate55.png",
        ΔⵠⲆᐃⵠⵠΔ: "img/day-crate56.png",
        ⵠⲆⵠΔᐃΔⲆ: "img/night-crate56.png",
        ⵠⵠⵠΔΔΔⵠ: "img/day-crate57.png",
        ⲆᐃⲆⲆᐃΔⵠ: "img/night-crate57.png",
        ⵠΔⲆⲆᐃⲆᐃ: "img/day-crate58.png",
        ⲆⵠΔⵠΔⲆⵠ: "img/night-crate58.png",
        ⵠΔΔⲆⲆⲆΔ: "img/day-crate59.png",
        ΔⲆⲆΔΔⲆⲆ: "img/night-crate59.png",
        ⲆᐃᐃᐃΔΔΔ: "img/day-crate60.png",
        ᐃⵠᐃⵠᐃᐃⵠ: "img/night-crate60.png",
        ⵠΔⵠⲆᐃᐃⵠ: "img/day-crate61.png",
        ΔᐃΔⵠⲆⵠᐃ: "img/night-crate61.png",
        ⵠⲆⵠᐃᐃΔⲆ: "img/day-crate62.png",
        ΔⵠⵠⲆⵠΔⵠ: "img/night-crate62.png",
        ΔⲆΔⵠⵠΔⵠ: "img/day-crate63.png",
        ΔᐃⵠⲆᐃᐃⵠ: "img/night-crate63.png",
        ⵠΔᐃⵠⵠᐃᐃ: "img/day-crate64.png",
        ΔᐃΔⵠⵠⲆⲆ: "img/night-crate64.png",
        ⵠⲆⵠⵠⲆⵠΔ: "img/day-crate65.png",
        ⲆΔΔᐃⵠᐃⵠ: "img/night-crate65.png",
        ᐃᐃⵠⵠⲆΔΔ: "img/day-crate66.png",
        ΔⲆⵠⵠⲆⵠⲆ: "img/night-crate66.png",
        ⲆⵠⲆⲆⵠⲆᐃ: "img/day-crate67.png",
        ⵠΔⵠⵠᐃⲆΔ: "img/night-crate67.png",
        ᐃΔⵠⵠⲆⲆΔ: "img/day-crate68.png",
        ⲆⵠⲆⲆΔⲆΔ: "img/night-crate68.png",
        ΔΔΔⲆⲆⵠⵠ: "img/day-crate69.png",
        ᐃΔⵠΔⵠⵠⲆ: "img/night-crate69.png",
        ΔᐃᐃⲆᐃΔⵠ: "img/day-crate70.png",
        ⵠⵠΔⲆᐃⲆⲆ: "img/night-crate70.png",
        ᐃⵠΔⵠΔⵠᐃ: "img/day-crate71.png",
        ΔⲆⲆⲆⲆΔⲆ: "img/night-crate71.png",
        ⵠⲆΔΔΔΔᐃ: "img/day-crate72.png",
        ⵠΔᐃⵠΔⲆᐃ: "img/night-crate72.png",
        ΔᐃⵠΔⲆΔⵠ: "img/day-crate73.png",
        ᐃⵠⲆⲆⲆᐃⲆ: "img/night-crate73.png",
        ⵠᐃΔΔⵠᐃᐃ: "img/day-crate74.png",
        ⵠΔᐃᐃᐃΔΔ: "img/night-crate74.png",
        ⵠᐃᐃⵠᐃᐃᐃ: "img/day-crate75.png",
        ΔⲆᐃᐃⲆᐃⲆ: "img/night-crate75.png",
        ΔΔⵠΔᐃΔⲆ: "img/day-crate76.png",
        ᐃⲆᐃⵠⲆΔᐃ: "img/night-crate76.png",
        ⵠᐃΔⲆΔᐃⲆ: "img/day-crate77.png",
        ⵠᐃⵠⵠⵠᐃⵠ: "img/night-crate77.png",
        ⲆᐃⲆⵠΔΔΔ: "img/day-crate78.png",
        ⲆΔⵠⲆᐃⵠᐃ: "img/night-crate78.png",
        ΔⵠⵠⲆⲆⲆΔ: "img/day-crate79.png",
        ᐃⲆΔⲆⵠΔⲆ: "img/night-crate79.png",
        ΔⵠⲆⵠΔⲆⲆ: "img/day-herb0.png",
        ΔΔⵠⵠΔⲆⵠ: "img/day-herb1.png",
        ⵠⵠⵠⵠᐃⲆⵠ: "img/day-herb2.png",
        ⲆⲆΔⲆⵠᐃᐃ: "img/day-herb3.png",
        ΔΔΔΔᐃΔⲆ: "img/day-herb4.png",
        ᐃⲆⵠⲆᐃᐃⵠ: "img/day-herb5.png",
        ⲆⲆⲆΔⵠᐃⲆ: "img/day-herb6.png",
        ⲆⲆᐃΔⲆⲆᐃ: "img/day-herb7.png",
        ΔΔⵠⵠⵠᐃᐃ: "img/day-herb8.png",
        ᐃⵠΔΔΔⵠⵠ: "img/day-herb9.png",
        ᐃⵠΔΔⵠⵠⵠ: "img/day-herb10.png",
        ΔⲆⲆⵠⵠᐃΔ: "img/day-herb11.png",
        ⲆᐃⲆΔᐃⵠᐃ: "img/day-herb12.png",
        ⲆΔⲆΔΔᐃⵠ: "img/day-herb13.png",
        ΔⲆⵠᐃΔⲆᐃ: "img/day-herb14.png",
        ᐃⵠᐃⲆᐃⵠⲆ: "img/day-herb15.png",
        ΔⵠⲆᐃΔᐃⲆ: "img/day-shell0.png",
        ᐃΔⵠⵠⵠΔⵠ: "img/day-shell1.png",
        ⵠⲆⲆᐃᐃᐃⲆ: "img/day-shell2.png",
        ᐃᐃᐃΔᐃⲆⲆ: "img/day-leaf1.png",
        ⲆᐃⵠⲆᐃⵠⲆ: "img/day-leaf2.png",
        ΔⵠⵠΔΔΔᐃ: "img/day-leaf3.png",
        ΔⵠⵠⵠΔⵠΔ: "img/day-leaf4.png",
        ΔΔΔᐃⲆⵠΔ: "img/day-leaf5.png",
        ᐃᐃᐃⲆⵠΔΔ: "img/day-leaf6.png",
        ᐃⲆᐃⵠⵠⵠⵠ: "img/day-leaf7.png",
        ⵠⵠΔᐃᐃᐃⲆ: "img/day-leaf8.png",
        ⲆᐃΔΔⲆΔⵠ: "img/day-rock0.png",
        ⵠᐃᐃΔᐃΔⲆ: "img/day-rock1.png",
        ᐃⵠⲆᐃⵠⲆᐃ: "img/day-rock2.png",
        ᐃⲆΔΔⲆⲆᐃ: "img/day-rock3.png",
        ΔⲆᐃΔⲆᐃⲆ: "img/day-rock4.png",
        ⲆⲆᐃΔᐃΔⲆ: "img/day-rock5.png",
        ⵠᐃⲆⵠΔᐃΔ: "img/day-rock6.png",
        ΔᐃⲆⲆⲆⵠⲆ: "img/day-rock7.png",
        ⲆΔΔᐃⲆΔⵠ: "img/day-rock8.png",
        ᐃΔΔΔⲆᐃⲆ: "img/day-rock9.png",
        ⵠⵠᐃΔⲆⲆᐃ: "img/day-rock10.png",
        ᐃⲆΔΔⵠⵠᐃ: "img/day-rock11.png",
        ⲆⵠⲆΔⲆⵠⵠ: "img/day-rock12.png",
        ⲆᐃᐃΔᐃⵠⲆ: "img/day-rock13.png",
        ⲆⵠⲆΔⵠⵠᐃ: "img/day-flower1.png",
        ⲆⵠΔΔⲆᐃⵠ: "img/day-flower2.png",
        ᐃΔⵠⲆⲆⵠⵠ: "img/day-flower3.png",
        ⲆΔᐃⵠᐃᐃΔ: "img/day-flower4.png",
        ⲆⲆⲆᐃⵠᐃⵠ: "img/day-flower5.png",
        ᐃᐃⲆΔⲆΔᐃ: "img/day-flower6.png",
        ΔⵠΔᐃⵠΔⲆ: "img/day-flower7.png",
        ᐃⵠⵠᐃⲆⵠⵠ: "img/day-flower8.png",
        ΔΔⵠⵠⲆⲆᐃ: "img/day-flower9.png",
        Δⵠᐃⵠᐃᐃⵠ: "img/day-herb16.png",
        ⲆΔΔⵠⵠΔᐃ: "img/day-herb17.png",
        ΔᐃᐃⲆᐃⵠᐃ: "img/day-herb18.png",
        ⲆᐃᐃΔΔⵠᐃ: "img/day-herb19.png",
        ⲆᐃᐃΔΔΔΔ: "img/day-herb20.png",
        ΔΔⲆᐃΔⵠⵠ: "img/day-herb21.png",
        ᐃⵠⲆᐃΔΔⲆ: "img/night-herb0.png",
        ᐃⲆⲆⲆᐃΔⲆ: "img/night-herb1.png",
        ᐃΔᐃΔⲆᐃΔ: "img/night-herb2.png",
        ⲆⲆⲆⲆᐃᐃⲆ: "img/night-herb3.png",
        ⲆΔⲆⲆᐃΔΔ: "img/night-herb4.png",
        ᐃⲆⵠᐃⲆⵠⵠ: "img/night-herb5.png",
        ⵠΔΔⵠⵠⵠᐃ: "img/night-herb6.png",
        ᐃΔΔᐃⲆΔⲆ: "img/night-herb7.png",
        ⵠⲆⲆⲆⲆⲆΔ: "img/night-herb8.png",
        ⵠⵠΔᐃⲆⲆⲆ: "img/night-herb9.png",
        ΔᐃᐃⲆΔΔⲆ: "img/night-herb10.png",
        ΔΔᐃⵠΔΔᐃ: "img/night-herb11.png",
        ΔⵠᐃⵠⵠΔᐃ: "img/night-herb12.png",
        ΔΔΔⵠⲆΔⵠ: "img/night-herb13.png",
        ΔΔᐃⵠᐃⲆᐃ: "img/night-herb14.png",
        ᐃⲆⵠⲆᐃΔⲆ: "img/night-herb15.png",
        ΔⲆΔⵠᐃⵠⵠ: "img/night-shell0.png",
        ⲆⲆⵠⲆΔⵠⵠ: "img/night-shell1.png",
        ⵠᐃᐃⵠⵠᐃΔ: "img/night-shell2.png",
        ΔⲆᐃⲆᐃΔⲆ: "img/night-leaf1.png",
        ⲆᐃΔⲆᐃΔᐃ: "img/night-leaf2.png",
        ⲆᐃΔΔᐃΔⵠ: "img/night-leaf3.png",
        ΔΔΔΔᐃΔⵠ: "img/night-leaf4.png",
        ΔᐃᐃⲆΔⲆᐃ: "img/night-leaf5.png",
        ⲆⵠΔⵠⲆᐃᐃ: "img/night-leaf6.png",
        ΔⵠΔⵠᐃⵠΔ: "img/night-leaf7.png",
        ΔⲆⵠⲆⵠᐃΔ: "img/night-leaf8.png",
        ᐃᐃᐃⲆᐃⲆⲆ: "img/night-rock0.png",
        ⵠᐃᐃΔΔᐃᐃ: "img/night-rock1.png",
        ᐃᐃⵠⲆᐃⲆΔ: "img/night-rock2.png",
        ᐃΔᐃⲆⵠᐃⵠ: "img/night-rock3.png",
        ΔⵠⲆⲆᐃⵠⲆ: "img/night-rock4.png",
        ΔᐃΔⵠⲆΔᐃ: "img/night-rock5.png",
        ⲆⲆⲆⵠⲆⲆΔ: "img/night-rock6.png",
        ⲆⵠᐃΔΔⲆⲆ: "img/night-rock7.png",
        ΔΔΔⲆⲆΔⵠ: "img/night-rock8.png",
        ΔΔⲆⵠⲆΔⵠ: "img/night-rock9.png",
        ⵠΔΔⵠᐃᐃᐃ: "img/night-rock10.png",
        ᐃᐃⵠΔᐃⵠⵠ: "img/night-rock11.png",
        ΔΔΔⲆᐃⵠΔ: "img/night-rock12.png",
        ⵠᐃⵠⵠΔΔⲆ: "img/night-rock13.png",
        ⵠΔΔᐃΔᐃᐃ: "img/night-flower1.png",
        ⵠⲆΔΔⲆⵠⵠ: "img/night-flower2.png",
        ᐃΔᐃⵠⲆΔⵠ: "img/night-flower3.png",
        ⵠⲆΔΔⲆⲆⲆ: "img/night-flower4.png",
        ⵠᐃⵠⵠΔΔⵠ: "img/night-flower5.png",
        ⲆᐃΔΔΔⵠΔ: "img/night-flower6.png",
        ⲆᐃⵠⵠᐃⲆᐃ: "img/night-flower7.png",
        ΔΔΔΔⲆᐃΔ: "img/night-flower8.png",
        ΔⵠΔⲆᐃⵠΔ: "img/night-flower9.png",
        ⲆΔⵠᐃⵠⲆⲆ: "img/night-herb16.png",
        ᐃᐃΔⵠΔᐃΔ: "img/night-herb17.png",
        ΔᐃΔⲆⵠⲆⵠ: "img/night-herb18.png",
        ⵠⵠΔⵠⲆΔᐃ: "img/night-herb19.png",
        ᐃᐃᐃΔᐃᐃΔ: "img/night-herb20.png",
        ⵠⵠΔⵠᐃⲆᐃ: "img/night-herb21.png",
        ⵠⲆΔⵠⵠΔⲆ: "img/day-river000-010-000.png",
        ᐃΔⲆⵠΔⲆΔ: "img/day-river000-010-010.png",
        ᐃⲆⲆΔⲆΔΔ: "img/day-river000-011-000.png",
        ⵠⵠΔᐃᐃⵠⵠ: "img/day-river000-011-010.png",
        ⵠΔᐃᐃᐃᐃⲆ: "img/day-river000-011-011.png",
        ᐃⵠⵠΔⲆᐃⵠ: "img/day-river000-110-000.png",
        ⲆΔΔⲆⲆⲆⵠ: "img/day-river000-110-010.png",
        ᐃⲆΔⲆⲆᐃΔ: "img/day-river000-110-110.png",
        ᐃΔⵠⲆⲆᐃᐃ: "img/day-river000-111-000.png",
        ⲆⵠⵠⵠΔⵠⲆ: "img/day-river000-111-010.png",
        ⵠⵠᐃⲆⲆᐃⲆ: "img/day-river000-111-011.png",
        ⲆⲆΔⲆⵠⵠᐃ: "img/day-river000-111-110.png",
        ⲆⵠΔⵠΔⲆᐃ: "img/day-river000-111-111.png",
        ⵠᐃⵠΔⵠΔⵠ: "img/day-river010-010-000.png",
        ΔΔⵠΔⵠᐃᐃ: "img/day-river010-010-010.png",
        ⵠⲆⵠⲆΔⵠⵠ: "img/day-river010-011-000.png",
        ΔΔᐃⵠΔᐃⲆ: "img/day-river010-011-010.png",
        ⵠⵠᐃᐃⲆⲆⲆ: "img/day-river010-011-011.png",
        ΔⲆⲆΔⵠΔⵠ: "img/day-river010-110-000.png",
        ⲆΔΔⲆⵠᐃⲆ: "img/day-river010-110-010.png",
        ⵠΔΔⵠⲆⲆΔ: "img/day-river010-110-110.png",
        ⲆⲆᐃᐃⲆⲆΔ: "img/day-river010-111-000.png",
        ⵠⲆᐃΔᐃΔⵠ: "img/day-river010-111-010.png",
        ⵠΔᐃⲆΔⲆⵠ: "img/day-river010-111-011.png",
        ΔⲆⵠⲆⵠⵠΔ: "img/day-river010-111-110.png",
        ⵠᐃᐃᐃⵠⵠⵠ: "img/day-river010-111-111.png",
        ⲆᐃⲆΔΔᐃᐃ: "img/day-river011-011-000.png",
        ᐃΔᐃΔⲆⵠΔ: "img/day-river011-011-010.png",
        ΔΔΔⲆⵠⵠΔ: "img/day-river011-011-011.png",
        ᐃΔΔΔⲆᐃᐃ: "img/day-river011-111-000.png",
        ΔⲆΔᐃⲆΔᐃ: "img/day-river011-111-010.png",
        ᐃᐃⵠᐃⲆΔᐃ: "img/day-river011-111-011.png",
        ΔⵠⲆⲆΔⲆᐃ: "img/day-river011-111-110.png",
        ᐃⲆΔⵠᐃⲆⲆ: "img/day-river011-111-111.png",
        ΔᐃⲆΔⵠⲆⵠ: "img/day-river110-110-000.png",
        ⵠᐃⲆΔⲆⵠᐃ: "img/day-river110-110-010.png",
        ⵠⲆⵠⵠᐃΔᐃ: "img/day-river110-110-110.png",
        ⲆⲆᐃⲆΔⲆⵠ: "img/day-river110-111-000.png",
        ᐃⲆᐃΔΔⲆⵠ: "img/day-river110-111-010.png",
        ⲆᐃⲆᐃⵠΔⵠ: "img/day-river110-111-011.png",
        ᐃᐃⲆΔᐃⲆⵠ: "img/day-river110-111-110.png",
        ΔᐃᐃΔΔⲆⵠΔΔ: "img/day-river110-111-111.png",
        ⲆᐃⲆΔᐃⲆⲆ: "img/day-river111-111-011.png",
        ΔⵠΔⲆⲆⵠᐃᐃΔ: "img/day-river111-111-110.png",
        ⲆᐃⲆΔᐃⲆⲆ: "img/day-river111-111-011.png",
        ᐃⲆΔⵠⲆΔΔⲆⲆ: "img/day-river111-111-000.png",
        ᐃⲆⵠᐃⵠⲆⵠᐃⲆ: "img/day-river111-111-111.png",
        ⲆⵠⵠᐃⵠⲆⲆΔⵠ: "img/day-river111-111-010.png",
        ΔⵠᐃΔᐃᐃⲆⲆⲆ: "img/night-river000-010-000.png",
        ⵠⵠⲆⲆᐃΔⲆⵠⵠ: "img/night-river000-010-010.png",
        ΔᐃᐃΔⵠᐃⵠΔᐃ: "img/night-river000-011-000.png",
        ᐃᐃᐃⵠΔᐃᐃⲆⵠ: "img/night-river000-011-010.png",
        ⲆᐃΔᐃᐃⲆⵠⲆᐃ: "img/night-river000-011-011.png",
        ⵠᐃᐃⵠᐃΔᐃⵠⲆ: "img/night-river000-110-000.png",
        ΔᐃᐃΔⲆⲆᐃΔⵠ: "img/night-river000-110-010.png",
        ⲆⲆⲆᐃΔⲆⵠⵠΔ: "img/night-river000-110-110.png",
        ΔᐃᐃΔΔⵠⲆⲆⵠ: "img/night-river000-111-000.png",
        ΔⵠⵠᐃΔᐃⲆΔΔ: "img/night-river000-111-010.png",
        ⲆⲆᐃΔᐃⲆⵠⵠᐃ: "img/night-river000-111-011.png",
        ⲆⵠᐃΔⵠΔΔΔᐃ: "img/night-river000-111-110.png",
        ⲆⵠΔⵠᐃᐃᐃⵠⵠ: "img/night-river000-111-111.png",
        ⵠⵠⲆΔⲆᐃⲆⵠΔ: "img/night-river010-010-000.png",
        ᐃΔⵠⵠⲆΔⵠᐃⲆ: "img/night-river010-010-010.png",
        ΔΔᐃΔᐃⵠΔᐃⲆ: "img/night-river010-011-000.png",
        ⵠⵠⵠᐃⵠΔᐃⲆΔ: "img/night-river010-011-010.png",
        ⲆΔᐃᐃᐃΔⲆᐃΔ: "img/night-river010-011-011.png",
        ⵠᐃⵠⲆᐃᐃᐃⲆΔ: "img/night-river010-110-000.png",
        ΔⵠᐃᐃⲆⲆΔⲆⵠ: "img/night-river010-110-010.png",
        ⵠⲆⲆⲆⵠᐃΔⵠᐃ: "img/night-river010-110-110.png",
        ΔΔᐃⵠⵠⲆᐃⵠⲆ: "img/night-river010-111-000.png",
        ᐃᐃᐃᐃᐃΔΔΔΔ: "img/night-river010-111-010.png",
        ΔⵠⵠⵠⵠᐃⲆⵠⵠ: "img/night-river010-111-011.png",
        ᐃⵠᐃⲆⵠⲆⵠΔⵠ: "img/night-river010-111-110.png",
        ΔⵠᐃⵠⵠⲆᐃⵠᐃ: "img/night-river010-111-111.png",
        ⲆⲆΔᐃⵠΔᐃᐃⲆ: "img/night-river011-011-000.png",
        ⵠΔⲆᐃⲆⲆⵠΔⵠ: "img/night-river011-011-010.png",
        ΔⲆⲆΔΔⲆΔⲆⲆ: "img/night-river011-011-011.png",
        ⲆΔΔⲆΔⵠⲆᐃⲆ: "img/night-river011-111-000.png",
        ΔⲆⲆᐃΔΔΔΔⲆ: "img/night-river011-111-010.png",
        ⲆᐃᐃΔⵠΔⵠⲆⵠ: "img/night-river011-111-011.png",
        ⲆⵠᐃᐃⲆΔΔΔⵠ: "img/night-river011-111-110.png",
        ⵠΔᐃⵠΔΔⵠⲆⵠ: "img/night-river011-111-111.png",
        ΔᐃⵠⲆⵠᐃΔⲆᐃ: "img/night-river110-110-000.png",
        ΔᐃⲆΔᐃⲆⲆⲆΔ: "img/night-river110-110-010.png",
        ᐃΔⵠⲆᐃⲆⲆᐃⵠ: "img/night-river110-110-110.png",
        ⵠⵠᐃⵠⵠᐃⵠⲆⵠ: "img/night-river110-111-000.png",
        ⵠⲆΔΔⲆΔⲆᐃΔ: "img/night-river110-111-010.png",
        ⵠⲆⵠΔΔⲆᐃΔⵠ: "img/night-river110-111-011.png",
        ᐃⵠΔⲆⵠⲆⲆⲆᐃ: "img/night-river110-111-110.png",
        ΔⵠⲆᐃΔΔᐃᐃⲆ: "img/night-river110-111-111.png",
        ⲆⲆⲆⵠⲆⵠᐃ: "img/night-river111-111-011.png",
        ΔⵠⲆⵠᐃΔᐃΔⲆ: "img/night-river111-111-110.png",
        ⲆⲆⲆⵠⲆⵠᐃ: "img/night-river111-111-011.png",
        ⲆⲆΔΔᐃⵠⵠΔⲆ: "img/night-river111-111-000.png",
        ⲆΔⲆⲆⵠᐃⲆΔΔ: "img/night-river111-111-111.png",
        ⲆᐃᐃᐃᐃᐃᐃⵠΔ: "img/night-river111-111-010.png",
        ⵠᐃⵠᐃΔΔⵠ: "img/day-pebblecompo1.png",
        ᐃᐃᐃᐃⵠ: "img/day-pebblecompo2.png",
        ΔΔⲆᐃΔ: "img/day-pebblecompo3.png",
        Δⵠⵠᐃⵠⵠᐃ: "img/day-pebblecompo4.png",
        ᐃᐃⲆᐃⲆ: "img/day-pebblecompo5.png",
        ΔΔΔⲆΔ: "img/day-pebblecompo6.png",
        Δᐃᐃᐃᐃ: "img/day-pebblecompo7.png",
        ᐃΔⵠⵠᐃᐃᐃΔⲆ: "img/day-pebblecompo8.png",
        ⵠⵠⵠⵠΔⲆᐃ: "img/day-pebblecompo9.png",
        ⲆⲆⵠᐃΔᐃΔ: "img/day-pebblecompo10.png",
        ⲆⵠΔᐃⲆ: "img/day-pebblecompo11.png",
        ΔᐃΔⲆᐃⵠⲆ: "img/day-pebblecompo12.png",
        ᐃⲆΔΔᐃᐃⲆ: "img/day-pebblecompo13.png",
        ᐃᐃⵠⲆⵠΔⲆ: "img/day-pebblecompo14.png",
        ᐃⵠᐃⵠⲆⲆᐃ: "img/day-pebblecompo15.png",
        ΔⵠΔΔⵠᐃΔ: "img/day-pebblecompo16.png",
        ΔΔᐃⵠⲆ: "img/day-pebblecompo17.png",
        ⵠΔΔⵠᐃᐃΔ: "img/day-pebblecompo18.png",
        ⲆⵠΔⲆΔᐃΔ: "img/day-pebblecompo19.png",
        ΔⲆⵠⵠⵠ: "img/day-pebblecompo20.png",
        ΔⵠⵠⵠΔ: "img/day-pebblecompo21.png",
        ⵠⵠΔⲆⵠⵠᐃ: "img/day-pebblecompo22.png",
        ⲆΔⲆⵠⲆⵠⵠ: "img/day-pebblecompo23.png",
        ⵠⲆᐃΔᐃΔⲆ: "img/day-pebblecompo24.png",
        ⲆⲆⲆⵠΔ: "img/day-pebblecompo25.png",
        Δⵠᐃⵠⵠ: "img/day-pebblecompo26.png",
        ⵠⵠΔᐃΔⵠᐃ: "img/day-pebblecompo27.png",
        ⵠⲆᐃⵠᐃ: "img/day-pebblecompo28.png",
        ᐃᐃⵠⵠⵠΔⵠ: "img/night-pebblecompo1.png",
        ⵠᐃᐃΔⲆ: "img/night-pebblecompo2.png",
        ⲆᐃΔᐃᐃ: "img/night-pebblecompo3.png",
        ⲆᐃⲆΔⵠΔΔ: "img/night-pebblecompo4.png",
        ⲆΔⲆⲆⲆ: "img/night-pebblecompo5.png",
        ⲆⲆⲆᐃⲆ: "img/night-pebblecompo6.png",
        ᐃᐃᐃⵠⲆ: "img/night-pebblecompo7.png",
        ⲆⵠᐃⵠⵠⲆⵠΔⵠ: "img/night-pebblecompo8.png",
        ᐃⵠᐃΔⵠΔᐃ: "img/night-pebblecompo9.png",
        ᐃⵠⲆⵠΔᐃᐃ: "img/night-pebblecompo10.png",
        ΔⲆᐃΔΔ: "img/night-pebblecompo11.png",
        ⲆᐃᐃⲆΔᐃⵠ: "img/night-pebblecompo12.png",
        ⲆΔᐃⵠᐃⵠⲆ: "img/night-pebblecompo13.png",
        ᐃᐃⲆⲆᐃⵠΔ: "img/night-pebblecompo14.png",
        ⵠⵠⲆⵠᐃⲆⵠ: "img/night-pebblecompo15.png",
        ΔᐃᐃⵠⲆΔⲆ: "img/night-pebblecompo16.png",
        ⵠⵠⲆΔⵠ: "img/night-pebblecompo17.png",
        ⲆΔⵠⲆⵠᐃΔ: "img/night-pebblecompo18.png",
        ᐃⲆⲆΔᐃᐃⵠ: "img/night-pebblecompo19.png",
        ᐃΔΔᐃΔ: "img/night-pebblecompo20.png",
        ⲆᐃΔΔⲆ: "img/night-pebblecompo21.png",
        ᐃⲆᐃᐃΔⵠᐃ: "img/night-pebblecompo22.png",
        ⲆΔᐃᐃⲆⵠᐃ: "img/night-pebblecompo23.png",
        ᐃᐃⵠⲆΔⵠᐃ: "img/night-pebblecompo24.png",
        ⲆΔΔΔᐃ: "img/night-pebblecompo25.png",
        ⲆΔᐃΔΔ: "img/night-pebblecompo26.png",
        ⲆΔΔΔⵠⵠΔ: "img/night-pebblecompo27.png",
        ΔⵠⲆⲆⵠ: "img/night-pebblecompo28.png",
        ᐃΔⲆⵠΔΔⵠΔⲆ: "img/day-baby-mammoth.png",
        ⵠΔⵠΔᐃⵠᐃΔΔ: "img/day-baby-mammoth-tamed.png",
        ⵠΔᐃΔΔᐃΔᐃⵠ: "img/day-baby-mammoth-angry.png",
        ᐃᐃⲆᐃⵠΔⲆⲆⲆ: "img/night-baby-mammoth.png",
        ΔⲆΔⵠᐃⵠⵠΔᐃ: "img/night-baby-mammoth-tamed.png",
        ᐃᐃⵠΔⲆᐃⵠΔᐃ: "img/night-baby-mammoth-angry.png",
        ᐃⲆΔᐃᐃΔΔΔⲆ: "img/inv-mammoth-out.png",
        ⲆᐃⵠᐃⵠΔⲆⲆⲆ: "img/inv-mammoth-in.png",
        ᐃᐃⵠᐃᐃⵠⵠⲆᐃ: "img/inv-mammoth-click.png",
        ⵠⲆⲆΔΔᐃⲆ: "img/hurt-baby-mammoth.png",
        ⲆⵠⲆⵠΔᐃᐃ: "img/baby-mammoth-step.png",
        ᐃᐃΔⵠᐃᐃΔΔᐃ: "img/day-flower-hat.png",
        ⵠᐃⵠᐃΔΔⵠⲆⵠ: "img/night-flower-hat.png",
        ᐃⲆᐃⲆᐃⵠΔⵠⵠ: "img/inv-flower-hat-out.png",
        ΔᐃⲆⵠⵠᐃⵠⲆΔ: "img/inv-flower-hat-in.png",
        ⵠᐃⵠⵠΔⵠⲆⵠⵠ: "img/inv-flower-hat-click.png",
        ⵠⵠⵠΔΔΔΔᐃΔ: "img/day-fur-hat.png",
        ΔΔⵠᐃᐃⲆⵠᐃᐃ: "img/night-fur-hat.png",
        ΔΔᐃⵠΔᐃΔⵠⵠ: "img/inv-fur-hat-out.png",
        ΔⲆⲆΔᐃᐃⲆΔᐃ: "img/inv-fur-hat-in.png",
        ⲆⲆⲆΔΔⵠᐃⲆΔ: "img/inv-fur-hat-click.png",
        ⵠΔⵠᐃⲆᐃΔᐃᐃ: "img/day-mammoth.png",
        ΔⵠⵠⵠⵠᐃⵠᐃΔ: "img/night-mammoth.png",
        ⲆⲆⵠⵠᐃΔⵠ: "img/hurt-mammoth.png",
        ⲆⵠⵠΔⲆᐃⵠⵠⵠ: "img/inv-mammoth-fur-out.png",
        ᐃᐃⵠΔⲆᐃΔⵠᐃ: "img/inv-mammoth-fur-in.png",
        ΔⲆⵠΔΔᐃᐃⵠᐃ: "img/inv-mammoth-fur-click.png",
        ᐃⵠⵠⲆᐃⵠᐃⵠΔ: "img/inv-wood-bow-out.png",
        ΔᐃⵠⵠⵠᐃⵠⵠⲆ: "img/inv-wood-bow-in.png",
        ΔⵠΔᐃⵠᐃΔᐃΔ: "img/inv-wood-bow-click.png",
        ᐃⲆⵠⵠΔⲆⲆⵠᐃ: "img/inv-wood-arrow-out.png",
        ⵠᐃᐃⵠΔⲆΔⵠΔ: "img/inv-wood-arrow-in.png",
        ΔᐃⲆΔⲆⵠΔΔⵠ: "img/inv-wood-arrow-click.png",
        ᐃᐃⵠⲆⵠⵠⵠⵠⵠ: "img/day-wood-bow2.png",
        ᐃΔⵠⵠⵠⲆⲆⲆΔ: "img/night-wood-bow2.png",
        ⲆⵠΔⲆᐃⵠⵠ: "img/day-wood-arrow.png",
        ᐃᐃΔⲆⵠⵠΔ: "img/night-wood-arrow.png",
        ⵠⲆᐃΔⲆⵠⵠΔⲆ: "img/inv-stone-bow-out.png",
        ΔᐃᐃᐃΔⵠΔⵠΔ: "img/inv-stone-bow-in.png",
        ᐃⲆⲆΔΔΔⵠⵠⵠ: "img/inv-stone-bow-click.png",
        ΔΔᐃᐃⵠᐃᐃΔⵠ: "img/inv-stone-arrow-out.png",
        ⲆⵠΔⲆⵠⵠⵠⲆᐃ: "img/inv-stone-arrow-in.png",
        ΔᐃⲆΔⵠᐃⵠⵠᐃ: "img/inv-stone-arrow-click.png",
        ⲆΔᐃᐃⵠⵠⲆⵠΔ: "img/day-stone-bow.png",
        ΔᐃΔΔⵠΔⲆΔᐃ: "img/night-stone-bow.png",
        ⵠΔⲆⵠⲆΔⲆ: "img/day-stone-arrow.png",
        ᐃⵠΔⵠⲆⵠⲆ: "img/night-stone-arrow.png",
        ᐃⵠᐃᐃᐃᐃⲆᐃⲆ: "img/inv-gold-bow-out.png",
        ΔΔⲆⵠΔⵠᐃⲆⵠ: "img/inv-gold-bow-in.png",
        ΔΔⵠᐃⲆᐃᐃⲆΔ: "img/inv-gold-bow-click.png",
        ΔⲆᐃⲆΔⵠⵠⲆⵠ: "img/inv-gold-arrow-out.png",
        ⵠᐃᐃⲆᐃⲆᐃᐃⲆ: "img/inv-gold-arrow-in.png",
        ΔⵠᐃΔⵠᐃⵠᐃΔ: "img/inv-gold-arrow-click.png",
        ΔᐃⵠᐃΔⲆΔΔⵠ: "img/day-gold-bow.png",
        ΔΔᐃⵠᐃᐃⲆⵠⵠ: "img/night-gold-bow.png",
        ᐃⲆⵠⵠΔⲆᐃ: "img/day-gold-arrow.png",
        ⲆΔᐃⲆΔΔΔ: "img/night-gold-arrow.png",
        ᐃⲆⲆⵠⵠᐃⲆⵠⲆ: "img/inv-diamond-bow-out.png",
        ⵠⲆⲆⲆΔⵠΔᐃᐃ: "img/inv-diamond-bow-in.png",
        ᐃᐃᐃᐃⵠΔᐃΔⵠ: "img/inv-diamond-bow-click.png",
        ⵠⵠΔⵠⲆᐃΔᐃΔ: "img/inv-diamond-arrow-out.png",
        ΔᐃⵠⲆⵠᐃᐃΔⵠ: "img/inv-diamond-arrow-in.png",
        ⵠⵠΔⲆⲆᐃΔⵠⲆ: "img/inv-diamond-arrow-click.png",
        ⵠΔᐃᐃΔⵠⵠᐃᐃ: "img/day-diamond-bow.png",
        ᐃⵠⵠⵠⲆⲆⵠⲆΔ: "img/night-diamond-bow.png",
        ΔᐃΔⲆΔΔΔ: "img/day-diamond-arrow.png",
        ΔⵠΔᐃᐃᐃΔ: "img/night-diamond-arrow.png",
        ΔΔⵠΔⲆΔⲆΔⵠ: "img/inv-amethyst-bow-out.png",
        ⵠⵠⲆᐃᐃⵠᐃᐃΔ: "img/inv-amethyst-bow-in.png",
        ᐃⲆⲆⵠΔᐃⵠΔⵠ: "img/inv-amethyst-bow-click.png",
        ⲆⵠᐃⲆⲆᐃΔⵠⵠ: "img/inv-amethyst-arrow-out.png",
        ⲆⵠΔⵠΔᐃⲆⲆᐃ: "img/inv-amethyst-arrow-in.png",
        ⵠᐃᐃⵠⵠⵠⵠⵠⲆ: "img/inv-amethyst-arrow-click.png",
        ⲆᐃⵠⲆΔᐃᐃᐃⲆ: "img/day-amethyst-bow.png",
        ⵠΔΔⲆⲆⲆⵠᐃⲆ: "img/night-amethyst-bow.png",
        ⲆΔⵠΔⲆⲆⵠ: "img/day-amethyst-arrow.png",
        ⲆΔⵠⲆⲆᐃᐃ: "img/night-amethyst-arrow.png",
        ᐃΔⲆᐃⵠⲆⲆⲆⲆ: "img/inv-dragon-bow-out.png",
        ⵠⲆᐃⵠΔⲆⵠΔᐃ: "img/inv-dragon-bow-in.png",
        ⵠᐃⲆⵠᐃᐃⲆⵠⵠ: "img/inv-dragon-bow-click.png",
        ⲆᐃΔⲆⵠᐃⲆᐃᐃ: "img/inv-dragon-arrow-out.png",
        ᐃⲆΔⵠⵠⵠᐃΔⲆ: "img/inv-dragon-arrow-in.png",
        ⲆΔΔⵠⲆΔᐃΔⲆ: "img/inv-dragon-arrow-click.png",
        ᐃΔΔΔΔⲆⲆΔⲆ: "img/day-dragon-bow.png",
        ⲆᐃᐃⲆΔⲆⵠᐃⵠ: "img/night-dragon-bow.png",
        ⲆⲆᐃⵠⵠⵠⵠ: "img/day-dragon-arrow.png",
        ⲆᐃΔΔⲆⲆⲆ: "img/night-dragon-arrow.png",
        ⵠᐃⲆΔⵠⲆⲆⵠΔ: "img/inv-reidite-bow-out.png",
        ⲆΔⲆⵠⲆⵠΔᐃΔ: "img/inv-reidite-bow-in.png",
        ⲆΔⵠⵠᐃⵠΔⲆΔ: "img/inv-reidite-bow-click.png",
        ⲆΔᐃⲆᐃᐃΔᐃⲆ: "img/inv-reidite-arrow-out.png",
        ⲆΔⵠⲆΔⲆⵠᐃⵠ: "img/inv-reidite-arrow-in.png",
        ᐃⵠᐃⵠⲆᐃΔΔΔ: "img/inv-reidite-arrow-click.png",
        ᐃΔⵠⵠᐃⵠᐃⲆⲆ: "img/day-reidite-bow.png",
        ΔⵠⲆΔᐃᐃᐃⲆᐃ: "img/night-reidite-bow.png",
        ⲆΔΔᐃⵠⲆᐃ: "img/day-reidite-arrow.png",
        ⵠᐃΔⵠᐃⵠⵠⵠΔ: "img/night-reidite-arrow.png",
        ΔᐃᐃⲆⲆⵠⵠΔⲆ: "img/inv-wooden-axe-out.png",
        ⵠⲆᐃⵠᐃᐃⲆⵠΔ: "img/inv-wooden-axe-in.png",
        ᐃⵠⲆᐃⲆΔᐃᐃⲆ: "img/inv-wooden-axe-click.png",
        ⵠᐃΔΔⲆᐃⵠᐃᐃ: "img/day-wooden-axe.png",
        ΔⵠⵠΔΔⲆᐃᐃⵠ: "img/night-wooden-axe.png",
        ᐃᐃΔⵠΔⲆⲆⵠⲆ: "img/inv-stone-axe-out.png",
        ᐃΔⵠΔᐃᐃᐃᐃΔ: "img/inv-stone-axe-in.png",
        ⲆⲆⵠⲆⵠⵠΔᐃⵠ: "img/inv-stone-axe-click.png",
        ⲆⵠⲆⵠⵠᐃΔⵠⲆ: "img/day-stone-axe.png",
        ΔⵠΔᐃⵠⵠᐃⲆΔ: "img/night-stone-axe.png",
        ΔᐃⲆⲆᐃᐃᐃⵠΔ: "img/inv-golden-axe-out.png",
        ⲆᐃᐃΔΔᐃᐃⵠᐃ: "img/inv-golden-axe-in.png",
        ᐃⲆⵠᐃΔⲆⲆᐃⵠ: "img/inv-golden-axe-click.png",
        ⲆⲆⲆⲆΔⲆⲆΔΔ: "img/day-golden-axe.png",
        ⵠᐃⲆᐃΔᐃⵠᐃᐃ: "img/night-golden-axe.png",
        ⵠΔᐃΔⵠᐃⵠⵠⵠ: "img/inv-diamond-axe-out.png",
        ᐃⵠⲆⵠᐃᐃΔⲆⵠ: "img/inv-diamond-axe-in.png",
        ⲆᐃΔΔᐃⲆⵠᐃⵠ: "img/inv-diamond-axe-click.png",
        ᐃΔᐃⵠⲆΔⵠⵠᐃ: "img/day-diamond-axe.png",
        ᐃᐃⵠⲆᐃΔΔⵠΔ: "img/night-diamond-axe.png",
        ⵠᐃΔⵠΔΔᐃⵠⵠ: "img/inv-amethyst-axe-out.png",
        ΔΔΔΔᐃⵠⲆΔΔ: "img/inv-amethyst-axe-in.png",
        ⵠΔᐃⲆⲆᐃⵠᐃⲆ: "img/inv-amethyst-axe-click.png",
        ⵠΔⵠΔΔΔⲆΔᐃ: "img/day-amethyst-axe.png",
        ΔᐃⲆⵠⵠⵠⲆⲆⲆ: "img/night-amethyst-axe.png",
        ΔⵠⲆᐃⵠⵠᐃⵠⵠ: "img/inv-reidite-axe-out.png",
        ΔⲆⲆⲆⲆΔⲆⲆⲆ: "img/inv-reidite-axe-in.png",
        ᐃⲆⵠᐃΔᐃⲆΔⵠ: "img/inv-reidite-axe-click.png",
        ΔΔΔᐃⲆΔⲆⵠᐃ: "img/day-reidite-axe.png",
        ᐃⵠⲆᐃⵠΔΔⲆΔ: "img/night-reidite-axe.png",
        ΔᐃᐃΔⲆⵠᐃ: "img/bandage-activated.png",
        ᐃᐃⲆΔᐃⲆΔ: "img/auto-feed.png",
        ᐃⵠⲆᐃⲆΔΔ: "img/stop-regeneration.png",
        ᐃᐃⲆⵠⲆⲆᐃ: "img/stop-regeneration2.png",
        ᐃⵠⲆⲆΔᐃΔⲆᐃ: "img/day-wood-platform.png",
        ⲆΔᐃΔΔⲆⵠⵠᐃ: "img/night-wood-platform.png",
        ΔΔᐃⵠΔᐃᐃⲆᐃ: "img/inv-wood-platform-in.png",
        ⵠᐃⵠᐃᐃΔⲆᐃⲆ: "img/inv-wood-platform-out.png",
        ⵠⵠⲆᐃΔᐃⵠⵠΔ: "img/inv-wood-platform-click.png",
        ⵠⵠⲆᐃⵠⵠⵠᐃⵠ: "img/day-wood-shield.png",
        ᐃⲆⵠᐃᐃᐃⵠΔΔ: "img/night-wood-shield.png",
        ⵠⲆⲆⵠⵠᐃΔⲆᐃ: "img/day-stone-shield.png",
        ΔⲆⵠΔᐃᐃΔⵠΔ: "img/night-stone-shield.png",
        ⲆΔᐃⵠⵠΔΔᐃᐃ: "img/day-gold-shield.png",
        ᐃⲆⲆᐃⵠΔᐃⲆⵠ: "img/night-gold-shield.png",
        ⵠⲆᐃᐃΔⲆᐃⵠⲆ: "img/day-diamond-shield.png",
        ᐃⲆⲆⲆᐃΔᐃΔⵠ: "img/night-diamond-shield.png",
        ΔⲆⵠⲆᐃᐃⵠⲆⲆ: "img/day-amethyst-shield.png",
        ᐃⲆᐃⵠᐃⵠⵠⲆⵠ: "img/night-amethyst-shield.png",
        ΔⵠᐃⲆⲆΔⵠᐃᐃ: "img/day-reidite-shield.png",
        ΔⵠⲆⵠΔⲆⵠᐃⵠ: "img/night-reidite-shield.png",
        ⵠⲆⵠΔΔⵠⲆⵠⵠ: "img/inv-wood-shield-in.png",
        ΔΔⵠᐃⲆᐃⲆᐃᐃ: "img/inv-wood-shield-out.png",
        ᐃⵠⵠᐃΔⵠᐃΔⵠ: "img/inv-wood-shield-click.png",
        ΔⵠᐃⵠΔᐃΔⵠⵠ: "img/inv-stone-shield-in.png",
        ᐃⵠᐃᐃΔᐃⵠⲆⲆ: "img/inv-stone-shield-out.png",
        ΔᐃⵠⲆᐃⵠⲆΔᐃ: "img/inv-stone-shield-click.png",
        ⲆΔⲆⲆⵠᐃⲆⲆⲆ: "img/inv-gold-shield-in.png",
        ⲆⵠⲆⵠⵠΔⵠΔᐃ: "img/inv-gold-shield-out.png",
        ᐃᐃⲆⲆᐃⵠΔΔⲆ: "img/inv-gold-shield-click.png",
        ᐃᐃᐃⲆⲆᐃᐃⲆⵠ: "img/inv-diamond-shield-in.png",
        ᐃⲆⵠΔᐃᐃΔⲆΔ: "img/inv-diamond-shield-out.png",
        ᐃⲆⵠᐃⵠΔⵠΔᐃ: "img/inv-diamond-shield-click.png",
        ᐃⵠⲆΔΔⲆⵠⵠΔ: "img/inv-amethyst-shield-in.png",
        ΔⲆⲆⵠⲆᐃⵠΔⵠ: "img/inv-amethyst-shield-out.png",
        ᐃⵠᐃⵠΔᐃᐃᐃᐃ: "img/inv-amethyst-shield-click.png",
        ⲆⲆᐃⵠⵠᐃᐃⵠⲆ: "img/inv-reidite-shield-in.png",
        ΔᐃΔΔⵠⵠᐃᐃΔ: "img/inv-reidite-shield-out.png",
        ΔᐃᐃᐃΔΔⲆΔⵠ: "img/inv-reidite-shield-click.png",
        ᐃᐃⵠⲆⲆⵠⲆⲆᐃ: "img/day-machete.png",
        ᐃΔⲆⵠΔᐃΔΔᐃ: "img/night-machete.png",
        ΔⲆⲆᐃⲆⲆⵠⵠᐃ: "img/inv-machete-in.png",
        ᐃᐃⵠΔⲆΔΔΔΔ: "img/inv-machete-out.png",
        ᐃⲆⲆᐃᐃⲆⲆⲆⲆ: "img/inv-machete-click.png"
    };
    ᐃⲆᐃᐃⵠⲆᐃ = [{}];
    const Ws = 9;
    const Xs = 19;
    ᐃⲆᐃᐃⵠⲆᐃ[0].stringify = function (a) {
        var b = new Uint8Array(new ArrayBuffer(a.length));
        for (var c = 0; a.length > c; c++) {
            b[c] = a[c];
        }
        return b;
    };
    const Ys = 12;
    const Zs = 14;
    const $s = 15;
    ⲆⲆΔⲆΔⵠⲆ = {};
    const _s = 17;
    ⲆⲆⵠΔⲆᐃⲆᐃⲆ = {};
    for (var $g in ⲆⲆ) {
        ⲆⲆΔⲆΔⵠⲆ[$g] = ⲆⲆ[$g];
    }
    function at(a, b, c) {
        Ve(Tu, a, b, c);
        const d = function (a, b, c) {
            Mj(Tu, a, b, c);
            const d = function (a, b, c) {
                yi(Tu, a, b, c);
                const d = Vg(Cc[0], Cc[1], Cc[2], Cc[0], Cc[1], Cc[2]);
                jm(Cc[0], Cc[1], Cc[2], Cc[0], Cc[1]);
                return ~(d & 24003) & (d | 24003);
            }(Cc[0], Cc[1], Cc[2]);
            lf(Cc[0], Cc[1]);
            return ~(d & 53610) & (d | 53610);
        }(Cc[0], Cc[1], Cc[2]);
        const e = Mq(Cc[0], Cc[1], Cc[2]);
        return (24 << ((d ^ e) >> 0 & 255)) + (16 << ((d ^ e) >> 8 & 255)) + (0 << ((d ^ e) >> 24 & 255)) + (8 << ((d ^ e) >> 16 & 255));
    }
    ᐃΔ = [];
    ⵠΔΔ = {};
    const bt = 2;
    const ct = 9;
    ⵠΔΔ.ᐃᐃⵠⲆΔ = 0;
    const et = 11;
    const ft = 10;
    const gt = bg;
    ⵠΔΔ.ⵠΔᐃΔ = 1;
    ⵠΔΔ.ⵠⲆⲆⲆ = 2;
    ⵠΔΔ.ⵠⵠΔᐃ = 3;
    ⵠΔΔ.ΔΔⲆⲆ = 4;
    ⵠΔΔ.ΔᐃⲆⵠ = 5;
    ⵠΔΔ.ΔⵠΔΔ = 6;
    ⵠΔΔ.ⵠΔⵠΔᐃⲆⲆ = 7;
    ⵠΔΔ.ⲆⵠΔΔᐃ = 8;
    Δᐃⵠᐃ = {};
    ⲆΔⵠΔ = [];
    const ht = 9;
    ΔᐃⵠⵠⵠΔⵠ = function (a, b) {
        for (var c = 0; a.length > c; c++) {
            if (a[c].id === b) {
                return c;
            }
        }
        return -1;
    };
    const it = 20;
    var jt = [];
    function kt(a, b) {
        for (var c = 0; jt.length > c; c += b) {
            var d = jt[c];
            if (a === d[0]) {
                rt(d[0], d[1], d[2], d[3]);
            }
        }
    }
    const mt = 1;
    const nt = 8;
    const ot = 4;
    const pt = 6;
    const qt = 3;
    function rt(b, c, d, e) {
        var f = ⲆΔⵠΔ[b];
        if (f !== Ga) {
            for (var i = 0; i < 2; i++) {
                var j = f[c][i];
                var k = e * 193 / Cf.ᐃⲆᐃᐃⲆ;
                var m = d * 193 / Cf.ᐃⲆⲆⲆᐃ;
                var n = j.width / 3.5;
                var o = j.height / 3.5;
                ᐃΔ[818][i].drawImage(j, k - n / 2, m - o / 2, n, o);
                k = e * 600 / Cf.ᐃⲆᐃᐃⲆ;
                m = d * 600 / Cf.ᐃⲆⲆⲆᐃ;
                n = j.width / 1.5;
                o = j.height / 1.5;
                ᐃΔ[819][i].drawImage(j, k - n / 2, m - o / 2, n, o);
            }
        }
    }
    const st = 10;
    ΔΔⵠⵠᐃⲆᐃᐃᐃ = function () {
        for (var b = 0; b < 2; b++) {
            ᐃΔ[818][b].clearRect(0, 0, 193, 193);
            ᐃΔ[818][b].drawImage(ⲆΔⵠΔ.MAP[b], 0, 0, 193, 193);
            ᐃΔ[819][b].clearRect(0, 0, 600, 600);
            ᐃΔ[819][b].drawImage(ⲆΔⵠΔ.MAP[b], 0, 0, 600, 600);
            for (var c = Cf.ⵠᐃⲆᐃ.length - 1; c >= 0; c--) {
                var d = Cf.ⵠᐃⲆᐃ[c];
                var f = d.x1 * 193 / (Cf.ᐃⲆᐃᐃⲆ * 100);
                var j = d.y1 * 193 / (Cf.ᐃⲆⲆⲆᐃ * 100);
                var k = d.w * 193 / (Cf.ᐃⲆᐃᐃⲆ * 100);
                var m = d.ⵠⲆⵠ * 193 / (Cf.ᐃⲆⲆⲆᐃ * 100);
                var p = d.x1 * 600 / (Cf.ᐃⲆᐃᐃⲆ * 100);
                var q = d.y1 * 600 / (Cf.ᐃⲆⲆⲆᐃ * 100);
                var u = d.w * 600 / (Cf.ᐃⲆᐃᐃⲆ * 100);
                var v = d.ⵠⲆⵠ * 600 / (Cf.ᐃⲆⲆⲆᐃ * 100);
                if (d.ⲆⲆᐃ === Cf.ⵠⲆΔⲆᐃ) {
                    ᐃΔ[818][b].drawImage(ⲆΔⵠΔ.FOREST[b], f, j, k, m);
                    ᐃΔ[819][b].drawImage(ⲆΔⵠΔ.FOREST[b], p, q, u, v);
                }
                if (d.ⲆⲆᐃ === Cf.ⲆⵠⵠⲆⲆⲆᐃ) {
                    ᐃΔ[818][b].drawImage(ⲆΔⵠΔ.WINTER[b], f, j, k, m);
                    ᐃΔ[819][b].drawImage(ⲆΔⵠΔ.WINTER[b], p, q, u, v);
                }
                if (Cf.ⵠⲆⲆⵠΔⲆΔ === d.ⲆⲆᐃ) {
                    ᐃΔ[818][b].drawImage(ⲆΔⵠΔ.LAVA[b], f, j, k, m);
                    ᐃΔ[819][b].drawImage(ⲆΔⵠΔ.LAVA[b], p, q, u, v);
                }
                if (d.ⲆⲆᐃ === Cf.ⲆⲆᐃⲆⵠⵠⵠ) {
                    ᐃΔ[818][b].drawImage(ⲆΔⵠΔ.CAVE[b], f, j, k, m);
                    ᐃΔ[819][b].drawImage(ⲆΔⵠΔ.CAVE[b], p, q, u, v);
                }
                if (Cf.ᐃΔᐃⲆⵠⲆᐃ === d.ⲆⲆᐃ) {
                    ᐃΔ[818][b].drawImage(ⲆΔⵠΔ.DESERT[b], f, j, k, m);
                    ᐃΔ[819][b].drawImage(ⲆΔⵠΔ.DESERT[b], p, q, u, v);
                }
            }
        }
    };
    ⲆⲆⵠᐃⲆⵠΔΔΔ = function () {
        Δᐃⵠᐃ = {
            ΔᐃΔΔᐃ: [{
                id: 0,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆΔΔⲆⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠⵠⲆᐃΔΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃΔᐃⵠⵠΔᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ΔᐃⵠᐃⲆΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ᐃᐃⵠⲆΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Starver"
            }, {
                id: 3,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔⲆⵠⲆⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠΔⵠⵠⲆⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆΔⲆⵠⲆΔᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⵠⵠⵠⲆⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ᐃᐃⵠⲆΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Angry"
            }, {
                id: 2,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆΔᐃⵠᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔΔᐃⵠⲆΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⲆΔᐃⲆⲆⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ΔᐃΔΔⵠΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ᐃᐃⵠⲆΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Sad"
            }, {
                id: 9,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠΔⲆᐃᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠΔᐃⲆⲆⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆᐃⲆΔⵠΔᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃᐃⲆΔᐃΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ᐃᐃⵠⲆΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Happy 1"
            }, {
                id: 1,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆⵠⵠᐃᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔΔⵠᐃⵠΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⵠΔⵠΔⲆΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠⲆΔᐃⲆᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Starve.io",
                name: "What?"
            }, {
                id: 4,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠⲆⵠΔᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃᐃⲆᐃᐃᐃΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃᐃⵠΔΔⵠⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃΔⲆⵠⵠⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Suspicious"
            }, {
                id: 5,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔⵠΔᐃᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃᐃⲆΔⵠΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆᐃᐃᐃⵠΔⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⵠᐃΔⵠⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Scar"
            }, {
                id: 6,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃⵠⲆⲆᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃⵠⵠⵠΔΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠᐃⲆⵠΔΔΔ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃΔᐃΔⲆΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Starve.io",
                name: "In Trouble"
            }, {
                id: 7,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃᐃΔΔᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔΔⵠᐃⲆⲆⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⵠⵠⵠΔᐃⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃᐃΔⵠⵠΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Cute"
            }, {
                id: 8,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆΔᐃⵠΔΔ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃⵠⲆⲆᐃΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⵠΔᐃᐃΔᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠΔΔΔⵠΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Bored 1"
            }, {
                id: 10,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⵠΔⵠⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃᐃΔⲆⲆΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠΔⲆΔΔΔⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆᐃᐃⲆᐃᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Happy 2"
            }, {
                id: 11,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⵠⲆⲆᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆⵠⵠⲆⲆΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔΔᐃᐃⲆⲆᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ΔΔΔᐃⵠᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Crazy"
            }, {
                id: 12,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃΔⵠⲆΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃᐃᐃᐃⵠⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔᐃΔⲆΔⲆⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⲆᐃⵠⲆᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Happy 3"
            }, {
                id: 13,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔⵠⵠⵠᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆⲆⵠᐃⵠⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⵠⵠⲆⲆᐃⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⲆᐃᐃᐃⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Very Cute"
            }, {
                id: 14,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠᐃᐃᐃΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃᐃⲆΔᐃΔ,
                ᐃΔᐃⵠ: ⲆⲆ.Ⲇⵠᐃⵠⵠⵠᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ΔᐃⵠⵠⲆⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Curious"
            }, {
                id: 15,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔⵠⵠⲆⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔⲆΔⲆⲆⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃΔⲆⵠⲆΔΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆᐃΔⲆⲆᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Bored 2"
            }, {
                id: 16,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆΔⵠⲆⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃΔΔΔⲆⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆⵠᐃⲆᐃΔΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⲆⲆΔΔᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Happy 4"
            }, {
                id: 17,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃⲆᐃᐃᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠⵠⲆᐃΔⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⵠⲆΔΔⵠⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ΔᐃΔⲆΔⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Scar 2"
            }, {
                id: 18,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆⵠΔᐃΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃᐃᐃⲆΔΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⵠⲆΔᐃⵠⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆΔᐃⵠⵠⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Sick"
            }, {
                id: 19,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆⲆⵠΔᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆⲆΔⲆᐃΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠΔⵠⵠⲆΔᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆΔΔⲆᐃΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Somnambule"
            }, {
                id: 24,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔᐃⲆᐃΔΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔⵠⲆⵠⵠⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠᐃⵠᐃΔⲆⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠᐃᐃΔᐃΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Pixelbitie",
                name: "Feel Bad"
            }, {
                id: 23,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⲆⵠᐃⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔΔᐃⲆᐃⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔᐃⵠⵠⲆᐃᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃΔⲆⵠⵠᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Pixelbitie",
                name: "Mmmh."
            }, {
                id: 103,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆⵠⲆᐃΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆⲆⲆⵠⵠⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⲆᐃⲆᐃⲆⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃΔΔΔᐃⵠⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "pizza wa",
                name: "Panic"
            }, {
                id: 105,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⲆⲆⲆΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔΔᐃΔⲆΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆΔΔᐃⵠⲆⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⲆⲆⲆᐃᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "pizza wa",
                name: "Hypnotic"
            }, {
                id: 106,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆΔᐃⲆΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆΔⵠⵠⲆⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃᐃΔⲆⵠⵠⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⲆⲆⵠᐃⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "pizza wa",
                name: "Stars in the eyes"
            }, {
                id: 220,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃΔΔΔⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠⲆⵠⲆᐃΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⲆᐃΔⵠΔΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆᐃᐃⵠⲆⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Seams"
            }, {
                id: 104,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃⵠⵠΔⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔΔΔⵠΔᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆΔᐃᐃΔⵠᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ΔΔᐃⵠΔᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "pizza wa",
                name: "Scared at night"
            }, {
                id: 20,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠΔⵠⲆΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔⲆᐃⵠΔᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃΔⵠΔⵠⵠᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠᐃᐃⲆⵠΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Vampire"
            }, {
                id: 21,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆΔΔⲆΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔΔᐃⵠᐃΔΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠΔΔΔΔᐃᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⲆᐃⲆⲆⵠⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Zombie"
            }, {
                id: 22,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠⵠⲆⵠᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠⲆⲆΔᐃᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⵠⲆΔΔΔΔ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃᐃⲆΔⵠⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Pixelbitie",
                name: "Devaster"
            }, {
                id: 116,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆⲆⵠΔᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃᐃⵠᐃΔⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆⲆⲆΔΔⲆⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠᐃᐃᐃᐃᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Fukss",
                name: "Dead Devaster"
            }, {
                id: 27,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔᐃᐃΔⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆⲆΔⵠⲆⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃᐃᐃᐃᐃΔΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠⲆⲆⲆⵠⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Winter",
                name: "Cactus"
            }, {
                id: 28,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆⲆᐃᐃⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃΔⵠᐃΔⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⵠΔΔⵠᐃΔ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⲆᐃⲆⵠⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "pizza wa",
                name: "Bee"
            }, {
                id: 49,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠⵠΔᐃⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆᐃⲆⵠΔⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⲆΔᐃΔΔⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⵠⵠᐃΔⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Taco4Life",
                name: "Camo Skin"
            }, {
                id: 58,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆᐃᐃⲆᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠᐃΔΔΔΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⲆᐃᐃⵠⵠⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆΔⲆᐃⲆⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Blue Limax Skin"
            }, {
                id: 59,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠⵠⲆΔᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠⵠⲆΔⵠᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃᐃΔΔⵠⲆᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆᐃᐃᐃⲆⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Red Limax Skin"
            }, {
                id: 94,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠᐃⲆΔΔΔ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔᐃⲆⵠΔⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆᐃᐃⵠⲆⲆⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠⵠᐃⵠᐃΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Taco4Life",
                name: "Mr. Pumpkin"
            }, {
                id: 109,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃΔᐃΔΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃⵠΔⵠΔᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠᐃᐃΔⲆⲆⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆΔⵠΔⵠΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "pizza wa",
                name: "Wood"
            }, {
                id: 114,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔᐃΔᐃᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠᐃᐃΔⲆᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔᐃΔΔⵠᐃᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠᐃᐃⲆᐃΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "pizza wa",
                name: "Zebra"
            }, {
                id: 120,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔΔⲆΔⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆⲆⲆⵠΔⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⵠᐃⲆᐃⵠΔ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⵠⲆⲆᐃⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "CrysTal",
                name: "Tiger"
            }, {
                id: 134,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠⵠᐃᐃⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃⵠⲆⲆⲆΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⲆⲆⲆⲆᐃᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⲆᐃΔᐃᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Franchestcreator",
                name: "Day or Night"
            }, {
                id: 135,
                Ⲇⵠᐃ: ⲆⲆ.Δᐃⵠᐃᐃⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠΔⵠⵠΔⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠΔᐃⲆⵠⲆⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ΔΔⲆⲆⲆᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Poinet",
                name: "Square Starver"
            }, {
                id: 136,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔⲆⲆᐃⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠⲆⲆΔΔΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⲆΔⵠⲆⵠⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠᐃΔΔΔⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Voodoo Doll"
            }, {
                id: 137,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃΔⵠⵠⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠⵠᐃΔⲆⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⵠΔΔⲆⲆΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠΔᐃⲆⵠⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Frankenstein"
            }, {
                id: 138,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⵠⲆᐃᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠΔⲆᐃᐃᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃΔⵠⲆⲆᐃⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⵠⲆᐃΔⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Old Mummy"
            }, {
                id: 139,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔΔᐃⵠᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠⲆⵠᐃⵠᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⵠᐃⵠⲆᐃⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠᐃᐃᐃᐃⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Werewolf"
            }, {
                id: 140,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⵠᐃΔⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠᐃΔΔⲆⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⲆⲆⵠᐃΔΔ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⲆⲆΔⲆΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Old Cthulhu"
            }, {
                id: 141,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆΔΔⵠⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃᐃⵠΔⲆⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆⵠⲆΔⲆᐃⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃᐃⲆⵠⲆⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Sea Man"
            }, {
                id: 142,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔΔⵠᐃᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔⲆⵠᐃᐃⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⲆᐃⲆΔΔᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠΔΔΔΔⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Old Pumpkin"
            }, {
                id: 148,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠⵠⲆⲆᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠⵠᐃⲆⵠΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃΔᐃΔΔⵠΔ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⲆΔΔΔⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Old Snowman"
            }, {
                id: 149,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔⵠⵠᐃⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃΔⵠΔⵠᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃΔᐃᐃᐃΔⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆᐃⵠⵠΔⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Old Christmas Tree Man"
            }, {
                id: 150,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⵠᐃⲆΔΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠᐃΔⲆᐃⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⵠΔᐃΔΔⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ΔΔΔⵠⵠⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Old Mrs Bell"
            }, {
                id: 151,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆⵠᐃΔᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃΔᐃᐃΔᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⵠⲆⵠᐃᐃᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⲆᐃΔᐃΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Old Elfy"
            }, {
                id: 152,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔΔⵠⲆⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔⵠⲆⵠᐃΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⵠⲆᐃⵠⵠⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⵠᐃᐃⵠⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Old Mr Present"
            }, {
                id: 153,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃⵠᐃⵠᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃⲆΔⲆΔⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⲆᐃΔΔᐃΔ,
                ΔΔⲆᐃ: ⲆⲆ.Ⲇᐃᐃⵠⵠⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "My Dear Old Deer"
            }, {
                id: 154,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃⲆⲆⵠΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃⲆᐃΔⵠᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔᐃⵠΔΔᐃⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⲆⵠⵠΔΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Mr Angel"
            }, {
                id: 155,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆᐃⲆᐃⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆᐃΔΔᐃⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⲆΔᐃⵠᐃΔ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⵠⲆⵠⲆᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Mr Ice Cube"
            }, {
                id: 156,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠᐃⲆᐃΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠΔΔᐃΔᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⵠΔᐃᐃᐃⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠⵠⲆᐃᐃᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Mr Snowman"
            }, {
                id: 159,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠᐃΔᐃⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔⵠⵠᐃⵠⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⵠⲆᐃⵠⵠᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ΔΔⲆⲆΔᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "CrysTal",
                name: "Crystal Sky Skin"
            }, {
                id: 167,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆᐃᐃᐃΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠⲆᐃΔᐃⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⲆⵠⲆᐃᐃⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⲆΔᐃⵠᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Franchestcreator",
                name: "Radioactive Starver"
            }, {
                id: 169,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⵠⵠᐃᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃⵠᐃΔΔᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⵠⵠⵠⲆⲆᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠΔⲆⵠΔΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "TheScaryBlaze",
                name: "Eaten Cookie"
            }, {
                id: 170,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃᐃⵠⵠⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃᐃⲆᐃᐃΔⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⲆᐃᐃᐃⵠⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ΔᐃⵠⵠᐃΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "aloner",
                name: "Blob Thing"
            }, {
                id: 172,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔⵠᐃⲆᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ΔΔⲆΔⲆⵠᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠᐃⵠΔΔⵠⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃᐃΔᐃΔᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "aloner",
                name: "Machine Mask"
            }, {
                id: 184,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠᐃⵠΔⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔⲆⲆⲆⵠΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆⲆᐃΔᐃΔΔ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃᐃⲆⵠⲆᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Mad"
            }, {
                id: 206,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⲆⵠΔⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔΔⲆᐃᐃⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠᐃΔⵠⵠⲆᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⲆⵠᐃⲆᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Survivor"
            }, {
                id: 209,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠⵠᐃΔᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔᐃⵠᐃΔⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔΔᐃⲆΔⲆⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆᐃⵠⵠⲆⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Starverator"
            }, {
                id: 230,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔⲆⲆⵠⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔⵠᐃᐃΔΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆΔⵠΔᐃΔΔ,
                ΔΔⲆᐃ: ⲆⲆ.ΔΔⲆΔⲆΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Totem"
            }, {
                id: 231,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆᐃᐃⵠᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠⲆⵠⵠⲆᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠΔⲆⵠⵠⲆⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⲆⲆᐃΔᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Big Pile of Sand"
            }, {
                id: 232,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⲆⲆⲆⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔΔΔⵠΔΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠᐃⲆᐃⲆᐃⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⵠⵠⵠⵠᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Big Pile of Dirt"
            }, {
                id: 235,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠΔΔⵠⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆΔΔⲆⵠΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⲆΔⵠⲆⲆΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠⵠⲆⵠⲆⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Sandstone"
            }, {
                id: 29,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔⵠΔⲆΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃⵠⵠΔⵠᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⲆᐃⲆᐃΔⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃᐃᐃⵠⲆᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Pixelbitie",
                name: "Lollipop 1"
            }, {
                id: 30,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆⲆΔΔⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠᐃⲆⲆⵠⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⲆᐃᐃΔⵠⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠΔⵠⵠⵠⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Lollipop 2"
            }, {
                id: 31,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆⲆⲆᐃΔΔ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃᐃΔⲆⲆⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠᐃᐃⵠΔⲆᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⵠⲆⵠⲆⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Lollipop 3"
            }, {
                id: 32,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠΔⲆⵠⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠⵠⵠⲆΔᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠΔΔⵠᐃⵠⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠᐃᐃᐃᐃΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Lollipop 4"
            }, {
                id: 33,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔⲆᐃᐃⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃⵠⵠᐃⲆⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⵠⲆΔΔⵠΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆΔΔΔⲆⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Sushui",
                name: "Yellow Bird"
            }, {
                id: 34,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔⵠΔⲆᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔΔΔᐃᐃΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠΔⵠᐃⵠⲆΔ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⵠⲆⵠⲆᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Sushui",
                name: "Red Bird"
            }, {
                id: 35,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠⵠΔᐃⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃΔⲆⲆⲆᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⵠΔⲆⵠΔⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⲆΔⵠⲆΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Sushui",
                name: "Blue Bird"
            }, {
                id: 37,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃⲆⵠΔΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃⲆΔⵠⵠⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⵠᐃⵠᐃᐃᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⵠΔⲆⵠΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Winter",
                name: "Owl"
            }, {
                id: 52,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠΔᐃⵠΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃⵠΔΔΔᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠΔᐃΔΔⵠⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⵠᐃⲆΔⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Nemo"
            }, {
                id: 53,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠⲆⵠᐃᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆⲆⵠⵠⲆᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⲆΔⲆᐃⵠⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠⵠⲆⲆⲆⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Mr. Bread"
            }, {
                id: 74,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔⵠᐃⵠⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆⲆᐃⲆⵠΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⵠᐃᐃΔⲆΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠΔᐃΔⵠᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Communist & Taco4Life",
                name: "Mr. Bread 2"
            }, {
                id: 75,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃⵠᐃⲆⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠᐃΔⵠᐃΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠᐃⵠΔⲆⲆⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⵠΔⲆⲆΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Communist & Taco4Life",
                name: "Mr. Bread 3"
            }, {
                id: 60,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠΔⲆᐃΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔΔΔⵠᐃⲆⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃᐃᐃΔⵠᐃΔ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃᐃᐃⲆᐃᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Red Berry"
            }, {
                id: 61,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔⲆΔⲆΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔΔⵠⲆⵠⲆᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⵠⵠᐃⵠΔᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃᐃᐃⲆⵠⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Old Berry"
            }, {
                id: 70,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠΔⲆⲆᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃΔᐃΔΔⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⵠⲆᐃⲆΔⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⵠⵠⲆᐃᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "eogito",
                name: "Cake"
            }, {
                id: 71,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃᐃⲆⵠⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆᐃΔⲆⲆⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⵠΔΔᐃᐃⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠⵠΔⵠᐃᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "eogito",
                name: "Christmas Cake"
            }, {
                id: 77,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃⲆⲆΔⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔΔⲆΔⲆⲆⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔᐃΔΔⲆⵠᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⲆⵠΔΔⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Pancakez",
                name: "Mr. Pancake"
            }, {
                id: 87,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔΔⲆⵠⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠᐃᐃⲆⲆⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⲆΔΔᐃⵠᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠⵠᐃΔΔΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Taco4Life",
                name: "Mr. Taco"
            }, {
                id: 78,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⲆΔⵠᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃΔΔΔⲆΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔᐃᐃΔⵠⲆᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆΔᐃᐃΔⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Taco4Life",
                name: "Mr. Bottle"
            }, {
                id: 79,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔΔⵠⵠΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠΔΔᐃⵠΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃΔⵠⲆⵠⲆΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⲆⲆⵠⲆΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Taco4Life",
                name: "Mr. Bottle 2"
            }, {
                id: 97,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔⵠᐃᐃᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃᐃⵠⲆⵠⲆΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⵠᐃⵠΔⵠⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆΔΔⵠⵠⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "eogito",
                name: "Pink Rabbit"
            }, {
                id: 102,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⵠΔⵠⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ΔΔΔⲆⵠⵠⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔΔⵠⵠⵠⵠΔ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⵠΔⲆΔᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "pizza wa",
                name: "Marshmallow"
            }, {
                id: 107,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔᐃᐃᐃⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔΔᐃⲆᐃⵠΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆⲆΔⵠᐃⲆᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ΔᐃⲆᐃΔᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "eogito",
                name: "Fox"
            }, {
                id: 132,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃⲆⲆΔΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆΔⲆᐃΔΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃᐃΔᐃΔⵠΔ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃΔΔᐃᐃΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "eogito",
                name: "Raccoon"
            }, {
                id: 111,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠⲆΔⲆⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔΔⲆΔᐃⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠᐃΔⲆᐃⲆΔ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⵠⵠⲆⵠΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "pizza wa",
                name: "Cloud"
            }, {
                id: 113,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠⲆΔⲆᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ΔΔⵠⲆΔⵠᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆⵠⵠΔⵠᐃⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⵠΔΔΔΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "pizza wa",
                name: "Moon"
            }, {
                id: 117,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆⵠΔⵠΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆᐃᐃⵠⵠΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⵠᐃΔΔΔⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠᐃΔΔᐃΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "eogito",
                name: "Mr. Panda"
            }, {
                id: 118,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆⵠⵠΔⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔΔᐃᐃΔᐃΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⵠΔΔⲆΔᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⵠⲆⵠⲆᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "eogito",
                name: "Mr. Strawberry"
            }, {
                id: 119,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠⵠΔⲆⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆⲆⵠⲆᐃⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⵠΔᐃᐃⲆᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠᐃⵠΔΔΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "eogito & Sushuui",
                name: "Mummy"
            }, {
                id: 122,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔᐃΔΔⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔⲆⵠΔⵠᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆΔⵠⲆⵠⲆⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠⵠᐃᐃΔⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Taco4Life",
                name: "Dino"
            }, {
                id: 127,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃⲆΔᐃΔΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔΔΔⵠⵠⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⵠᐃⲆΔⲆᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⵠⲆⲆΔⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "MADBalgouthi",
                name: "Mr. Koala"
            }, {
                id: 160,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠᐃΔⲆⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠⵠⲆⲆΔΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆΔⵠⵠΔⲆⵠ,
                ΔΔⲆᐃ: ⲆⲆ.Δᐃⵠⵠᐃᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Bottle Protection"
            }, {
                id: 162,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔⵠⵠΔⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆᐃΔⵠᐃΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆⵠᐃⲆⵠⲆⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆΔΔΔᐃⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "CrysTal",
                name: "Leaf Man"
            }, {
                id: 166,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆᐃⲆⵠᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃΔⵠΔᐃᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆⲆⲆⲆⵠᐃⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠⲆᐃᐃΔᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "pizza wa",
                name: "Bubble"
            }, {
                id: 174,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆΔΔᐃⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔΔⵠⵠⵠΔᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆΔⲆΔᐃΔΔ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃΔΔᐃᐃᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "upfiz",
                name: "Potato"
            }, {
                id: 171,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠⲆⵠⵠᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆΔᐃΔΔΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔΔⵠⲆᐃⵠⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆᐃΔᐃⵠⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "aloner",
                name: "Axolotl"
            }, {
                id: 178,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃΔᐃᐃⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠⲆΔⵠᐃᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆⵠᐃΔⵠⵠΔ,
                ΔΔⲆᐃ: ⲆⲆ.ΔΔΔΔⲆⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Rusted Machine"
            }, {
                id: 179,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆⵠΔᐃΔΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆᐃΔⲆⲆΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔᐃᐃΔᐃᐃⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠⵠⲆⵠⲆᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Starving Machine"
            }, {
                id: 181,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃⵠΔᐃΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃⵠⲆⲆᐃⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⵠΔⵠⲆᐃⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⲆΔⵠΔᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Night Stars"
            }, {
                id: 191,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔᐃⵠⲆⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆⵠᐃⵠⲆⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆⲆⵠⵠᐃᐃⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⵠΔᐃᐃⵠⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Blue Jay"
            }, {
                id: 198,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆⲆᐃᐃⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆⵠΔᐃᐃᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆᐃᐃᐃᐃⵠΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⵠⵠΔⲆΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "AWTP",
                name: "Dave"
            }, {
                id: 200,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠᐃⲆⲆⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃᐃⲆⲆⵠᐃᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⲆᐃⵠᐃⵠᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⵠⲆΔᐃᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Jinty",
                name: "Smug"
            }, {
                id: 203,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃᐃᐃⵠⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔⲆᐃⵠⲆΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃᐃᐃᐃᐃⲆΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠᐃⲆⵠᐃⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Reclaimed"
            }, {
                id: 204,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⵠᐃⵠΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆΔⵠᐃⵠΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⵠⵠⲆΔⲆΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆᐃⵠⵠⲆⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Legacy Wolf"
            }, {
                id: 211,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠᐃⵠΔΔΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔᐃΔΔⲆⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠᐃᐃⲆⲆΔⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆΔΔⲆⲆΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Starver of the Seas"
            }, {
                id: 213,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⲆΔⲆᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆⲆᐃⲆᐃⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⲆΔᐃⲆᐃⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃΔⲆᐃⲆᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Ice"
            }, {
                id: 219,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆⵠᐃⲆΔΔ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃⵠⵠΔⲆⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⲆⵠΔᐃⵠΔ,
                ΔΔⲆᐃ: ⲆⲆ.ΔΔΔΔᐃΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Ramil",
                name: "Sandwich Cookie"
            }, {
                id: 221,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠⵠⵠΔΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠⵠⵠΔᐃⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆⵠⵠⲆΔᐃⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠᐃⲆᐃΔⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Purple Geode"
            }, {
                id: 222,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆᐃⵠⲆᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠᐃⵠᐃᐃΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃᐃᐃⵠΔᐃᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠⵠΔᐃⲆⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Cyan Geode"
            }, {
                id: 223,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃᐃⵠⵠⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠᐃΔΔⵠΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆⵠᐃⵠᐃΔⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⲆΔⵠⵠᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Yellow Geode"
            }, {
                id: 228,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃΔΔΔⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠⵠΔᐃⵠΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠᐃⵠⲆᐃΔⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⲆⵠⲆᐃΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Furnace Head"
            }, {
                id: 229,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃᐃᐃⲆΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔⲆᐃᐃᐃⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔᐃΔΔΔⲆⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃᐃΔᐃⲆᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Bag"
            }, {
                id: 227,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃᐃᐃᐃΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔΔᐃΔⲆΔⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⵠⲆⵠᐃᐃΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠⲆⲆⲆⲆⵠⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Lit Furnace Head"
            }, {
                id: 25,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠⵠᐃⲆᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆⵠᐃⵠⵠᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠᐃⵠⵠᐃⵠⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃΔⲆⵠⵠᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Pixelbitie",
                name: "Test Dummy"
            }, {
                id: 41,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔⵠᐃⲆⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠⵠΔΔⲆΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠΔⵠⵠΔⵠⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆΔⵠⵠⲆᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "pizza wa",
                name: "Star-ver"
            }, {
                id: 43,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆΔⵠⵠΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃΔᐃⵠᐃⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆⲆΔᐃΔᐃⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆΔᐃⵠⵠᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Communist",
                name: "Starver Chest"
            }, {
                id: 88,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃⵠΔⲆᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃⵠⵠⵠᐃΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⵠᐃⵠᐃⲆⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠΔᐃᐃⵠᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Communist",
                name: "Starver Workbench"
            }, {
                id: 121,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⲆⲆⵠⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠⵠᐃᐃⲆⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔΔΔⵠΔΔⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠⵠᐃⲆΔΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "MADBalgouthi",
                name: "Fish"
            }, {
                id: 39,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃᐃᐃⵠΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃⵠᐃⲆⲆⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⵠⵠᐃΔⲆⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⲆⵠᐃΔΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Negligent4Dia",
                name: "Crab"
            }, {
                id: 40,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆᐃᐃⲆᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃᐃΔⲆⵠΔⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠΔⵠⵠⵠᐃⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃΔⲆⵠᐃⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Negligent4Dia",
                name: "Piranha"
            }, {
                id: 36,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃⵠΔΔⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠΔᐃⵠᐃⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⲆΔⲆᐃᐃᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⲆᐃΔⵠΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Winter Fox"
            }, {
                id: 69,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆᐃᐃⵠⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠΔⲆⵠΔⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⲆⵠⲆⵠⵠⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠⵠΔΔⵠⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Zed",
                name: "Baby Foxy"
            }, {
                id: 51,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔΔⲆΔΔΔ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔⲆΔⲆᐃⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃᐃⲆᐃⵠΔⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⲆΔᐃⲆⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "HOWI",
                name: "Winter Bear"
            }, {
                id: 133,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⲆⵠⲆᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔᐃⲆⵠΔᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⲆᐃⲆⵠⵠΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⲆⵠᐃⲆᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Hawk"
            }, {
                id: 55,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⵠⵠΔⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃⵠΔΔᐃⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠΔⲆⲆΔⲆⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠΔⵠⲆⵠᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Nice Little Yuki"
            }, {
                id: 68,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆⵠΔⲆΔΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔᐃⵠᐃⵠΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆᐃⵠᐃⲆᐃᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⵠⲆⲆᐃⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Taco4Life",
                name: "Baby Yuki"
            }, {
                id: 62,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆΔΔΔⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆᐃᐃⲆΔᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⵠΔΔΔΔⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ΔΔⲆΔᐃᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Mr. Carrot"
            }, {
                id: 56,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆⵠΔⵠⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠⵠΔⵠⲆΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆΔⲆΔΔΔⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⵠᐃΔΔᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Bat Limax"
            }, {
                id: 72,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆᐃⲆᐃΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃᐃⵠΔⵠΔΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⲆⲆΔⵠΔⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃᐃⵠⲆΔⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Mr. Crate"
            }, {
                id: 73,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⲆΔΔΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠᐃΔⲆᐃΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆⲆᐃΔΔᐃᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠⵠⵠᐃᐃⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Taco4Life & eogito",
                name: "Mr. Spider"
            }, {
                id: 93,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆᐃⲆΔⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃΔᐃᐃᐃΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔΔⵠⲆᐃᐃᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ΔᐃⵠΔᐃⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Anyone want to play?",
                name: "Mr. Spider 2"
            }, {
                id: 82,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⵠⲆⵠΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆᐃΔⵠΔΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⵠᐃⲆⲆⲆΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆΔᐃᐃΔΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Mr. Blue Starfish"
            }, {
                id: 83,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔⲆⵠⵠⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆᐃᐃⲆⵠⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⵠⵠᐃⲆⲆΔ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⵠΔⵠⵠΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Mr. Orange Starfish"
            }, {
                id: 84,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃᐃᐃΔᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃⵠᐃᐃⲆⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆⲆΔΔⲆⲆΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠᐃⵠᐃⵠⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Mr. Pink Starfish"
            }, {
                id: 85,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆᐃΔΔⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃⵠⵠⲆᐃΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃΔΔⵠᐃⵠⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ΔΔᐃⲆⵠⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Mr. ShellMauve"
            }, {
                id: 86,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠⵠᐃᐃⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔΔΔⵠⲆⲆᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⵠⵠΔⲆΔΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠΔⲆⵠⲆⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Mr. Shell Bead"
            }, {
                id: 96,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔⲆⵠᐃΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆⵠΔΔⵠⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⵠᐃΔΔⲆᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃᐃΔᐃⲆⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Fukss",
                name: "Angry Crab"
            }, {
                id: 98,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠⵠᐃΔᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔΔᐃⵠᐃⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃᐃⲆᐃᐃⵠⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ΔᐃᐃᐃΔⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Penguin"
            }, {
                id: 126,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔᐃⵠⵠᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃᐃⲆⵠΔⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆᐃⵠΔᐃΔΔ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⲆΔΔⵠⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Anyone want to play?",
                name: "Mr. Boar"
            }, {
                id: 145,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠΔΔᐃⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃΔᐃΔⲆΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⲆΔⲆⲆᐃΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⵠΔᐃⲆⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "I saw you"
            }, {
                id: 146,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃⵠⵠᐃⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆᐃⲆⲆΔⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⵠΔΔⲆⲆⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⵠᐃⵠᐃⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "It was funny"
            }, {
                id: 147,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔΔᐃⲆΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔⲆⵠⵠΔΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⲆⲆⵠⲆΔΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠⲆⲆⲆᐃᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "You can scream"
            }, {
                id: 158,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃᐃⲆⲆᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆⵠⵠᐃⵠᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⲆΔᐃᐃΔⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ΔΔⲆⵠⲆⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Mr. Book"
            }, {
                id: 163,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃᐃⵠᐃΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆⲆⲆⵠⵠΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆᐃΔΔⵠⲆᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ΔΔᐃᐃⲆᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Anyone want to play?",
                name: "Mr. Mammoth"
            }, {
                id: 164,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⲆⲆΔΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔⵠΔᐃⵠᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.Ⲇⵠᐃᐃⵠᐃᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠᐃⵠᐃⲆᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "SoOw",
                name: "Mr. Mammoth 2"
            }, {
                id: 161,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆΔⵠⵠᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆⵠΔⵠⲆᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔΔΔⵠⵠᐃⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆΔᐃᐃⵠΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Nightmare"
            }, {
                id: 168,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃΔᐃⲆΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆⲆΔᐃⲆⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆΔⲆΔΔᐃΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆᐃⲆⲆᐃⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "pizza wa",
                name: "Shiny Crystal"
            }, {
                id: 173,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔᐃⲆᐃΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔΔⲆᐃΔᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃᐃⲆⵠⵠⵠΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠⵠⲆᐃᐃΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "pizza wa",
                name: "Water skin"
            }, {
                id: 175,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠΔⲆⵠⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆⵠΔⵠΔⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⵠΔⵠⲆⲆᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠⵠΔᐃⵠΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Fall Berry Bush Starver"
            }, {
                id: 176,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⲆΔΔⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠᐃⵠⵠⲆΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⵠⵠⵠΔΔΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠⲆⵠΔⲆⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Christmas Berry Bush Starver"
            }, {
                id: 177,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃⲆΔⲆⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆΔΔΔᐃᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆΔⵠⲆᐃᐃᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆΔᐃⲆᐃᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Berry Bush Starver"
            }, {
                id: 182,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⲆᐃⲆΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆⵠΔⲆΔⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃᐃᐃⲆⲆᐃⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⲆⲆⵠΔⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Tamer"
            }, {
                id: 185,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆΔⲆⵠΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔⲆⲆΔⵠΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃΔⲆΔⵠΔⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆᐃᐃΔᐃΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Tamon Wolf"
            }, {
                id: 186,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃΔⲆⲆⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆⵠⲆⲆᐃᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆⲆⵠΔⲆΔΔ,
                ΔΔⲆᐃ: ⲆⲆ.ΔΔⲆᐃᐃⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Tamon Snow Wolf"
            }, {
                id: 187,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⵠᐃᐃᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆᐃΔΔᐃⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠᐃΔⲆᐃΔΔ,
                ΔΔⲆᐃ: ⲆⲆ.ΔᐃⵠⲆⲆΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Tamon Rabbit"
            }, {
                id: 188,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⵠᐃⲆⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠⵠΔⵠⲆΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆᐃⲆΔᐃᐃᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃΔᐃⲆΔⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Tamon Snow Rabbit"
            }, {
                id: 189,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃΔᐃΔⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠΔⵠᐃⵠⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆΔⵠΔⲆᐃᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ΔᐃⵠⲆᐃⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Tamon Bear"
            }, {
                id: 190,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃΔⵠΔΔΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃⲆΔⵠⲆⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠΔⵠᐃΔΔⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⲆΔΔᐃⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Tamon Polar Bear"
            }, {
                id: 196,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃⲆᐃΔᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃΔⲆⵠΔⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⵠⵠⲆΔⲆΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⵠΔΔⵠⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Crying Angel"
            }, {
                id: 202,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔⵠΔᐃΔΔ,
                ΔⲆᐃ: ⲆⲆ.ΔΔⵠⵠᐃᐃΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃΔⲆΔΔΔᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⲆΔⵠΔⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Tamon Fennec"
            }, {
                id: 207,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃᐃⵠᐃΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔᐃᐃᐃΔΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆΔⲆⵠⲆⲆⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠᐃᐃᐃⲆⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Decay"
            }, {
                id: 212,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠⵠᐃᐃⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆΔΔⵠⲆΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔΔΔΔᐃⲆΔ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⵠᐃⵠΔΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Pillow"
            }, {
                id: 218,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠⵠΔᐃⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃᐃΔᐃΔΔⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔᐃⲆᐃᐃΔΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆΔⵠΔᐃⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Exotic"
            }, {
                id: 224,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆⲆⲆΔⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔⲆⲆⲆΔᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃΔⲆⵠΔᐃΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠⲆᐃⲆᐃⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Apple"
            }, {
                id: 225,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⲆᐃᐃΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔΔⵠΔΔΔⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔᐃᐃⵠᐃΔᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠᐃⵠΔΔΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Golden Apple"
            }, {
                id: 233,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔⲆΔᐃⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆᐃⵠⵠⵠΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆⵠⲆⲆⵠΔᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⲆΔⲆΔⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Lava Cube"
            }, {
                id: 234,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⲆⵠⵠΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃⲆⵠⲆᐃΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆⵠⲆᐃΔΔᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⵠᐃⵠⵠⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Dragon Cube"
            }, {
                id: 42,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠⲆᐃⲆⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠⲆᐃⵠΔⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⲆⲆⲆΔᐃⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⵠⲆᐃⲆⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Winter",
                name: "Will-O'-The-Wisp"
            }, {
                id: 91,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃⵠⵠⲆᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆⵠΔⲆᐃᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆΔⵠⵠΔⲆᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⲆᐃᐃⵠΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "ExpertyAnimations",
                name: "Flame"
            }, {
                id: 26,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆΔᐃΔᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔⲆⲆⵠΔᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⵠⲆⵠⵠᐃᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠᐃᐃᐃⵠᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Be a Tree"
            }, {
                id: 38,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆⲆΔⲆΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠΔᐃΔⲆᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔΔⵠⲆⵠⵠΔ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⵠᐃΔⵠᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Winter",
                name: "Toxic Mutant"
            }, {
                id: 50,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠᐃⵠⲆΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃⵠⲆⲆᐃⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⵠΔΔⲆᐃⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⲆⲆΔΔᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Communist",
                name: "Mr. Tomato"
            }, {
                id: 54,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠⲆⵠΔΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠⵠⵠᐃⲆⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⲆᐃⵠΔΔΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⲆΔᐃⲆⵠⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Mr. Mauve, the Lapa"
            }, {
                id: 57,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔⲆᐃᐃᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆΔⲆⲆⲆⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔΔⲆⲆⲆⵠⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⵠΔΔΔⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Golden Fish"
            }, {
                id: 64,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆᐃⲆᐃᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠⲆΔᐃΔΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆⲆᐃᐃΔᐃⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⲆᐃⵠᐃᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "LapaMauve"
            }, {
                id: 65,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠⵠⲆᐃⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠΔΔΔᐃΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠᐃᐃⲆⲆⵠΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠᐃⵠΔⵠᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "LapaMauve "
            }, {
                id: 92,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃΔⵠⲆΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆⵠⲆΔΔᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⵠΔᐃⵠᐃⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ΔᐃⵠⲆⵠΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Mr. Burger"
            }, {
                id: 66,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆⵠᐃⵠΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠᐃⵠΔⵠⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔᐃΔⵠΔᐃⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⵠΔⲆᐃᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "pizza wa",
                name: "Tropical Starver"
            }, {
                id: 80,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃⵠⵠᐃᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔⵠΔᐃᐃⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⵠⲆⲆⲆΔⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆΔᐃΔⵠⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Mr. ShellPink"
            }, {
                id: 81,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠᐃⲆⵠᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃⲆᐃᐃⲆⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⲆⲆΔΔⵠᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠΔⲆⵠⲆΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Mr. OranShell"
            }, {
                id: 99,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆⲆⵠᐃⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆⲆᐃᐃⵠᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠᐃΔΔΔᐃⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠⲆᐃᐃᐃⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "eogito",
                name: "Pepe"
            }, {
                id: 100,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃⵠⵠⵠᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠᐃⲆΔⲆⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔᐃᐃⵠΔᐃᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ΔᐃⵠΔᐃΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "fatant",
                name: "Mr. Ant"
            }, {
                id: 115,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆⲆᐃⵠΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆⲆᐃᐃᐃΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃᐃⲆⲆⲆᐃΔ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⵠⵠⲆΔΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "MADBalgouthi",
                name: "Mr. Watermelon"
            }, {
                id: 101,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆⵠᐃᐃⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔΔⲆΔᐃΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔΔᐃᐃⵠΔⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠⵠΔⵠⲆᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Taco4Life",
                name: "Mr. Thornbush"
            }, {
                id: 131,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⲆⵠΔΔΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠᐃⲆᐃΔᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠᐃⵠᐃⲆᐃⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⲆⵠⲆΔΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Taco4Life",
                name: "Cthulhu"
            }, {
                id: 143,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔⲆⵠⵠⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔⵠᐃⲆΔⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⲆⵠⲆⵠᐃⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠᐃᐃⵠᐃΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "eogito",
                name: "Mr. Cactus"
            }, {
                id: 144,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠᐃⵠᐃᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠⵠᐃᐃᐃⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⵠⲆⵠⵠⵠᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃΔⵠΔᐃⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Momo"
            }, {
                id: 180,
                Ⲇⵠᐃ: ⲆⲆ.Ⲇⵠⵠⵠᐃᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆⵠΔⵠⵠΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⵠⵠⲆΔⵠⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠΔΔΔΔΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Scream"
            }, {
                id: 193,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔᐃⲆⲆⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔⵠΔⵠᐃᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔΔΔΔⲆᐃⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃᐃΔⲆⲆᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Tamon Dragon"
            }, {
                id: 195,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆΔᐃⵠⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃᐃⲆⵠⵠᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃΔⲆΔⵠΔᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⲆᐃⲆⵠⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Forest Spirit"
            }, {
                id: 197,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔᐃΔᐃᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆⲆⲆⲆᐃΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠΔᐃⵠᐃⲆⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⵠⵠΔⲆⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Evil Goat"
            }, {
                id: 199,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃΔⲆᐃⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔΔⵠⵠⲆᐃⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⲆΔᐃⵠΔΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠᐃⵠΔⵠΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Rotten"
            }, {
                id: 201,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠΔᐃⲆᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆⵠⲆΔⵠᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆⲆᐃⲆΔᐃΔ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⵠΔᐃΔⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Fossil"
            }, {
                id: 205,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃⵠⵠΔⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆᐃⲆⵠⵠⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠᐃⲆⵠᐃⵠΔ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⲆⲆᐃⵠⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Tamon Spectrum"
            }, {
                id: 210,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠᐃΔᐃⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔΔⵠⵠᐃⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⲆⲆⵠᐃΔΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆᐃΔᐃⵠⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Helpy",
                name: "Black Cat"
            }, {
                id: 214,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆᐃᐃΔⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔⵠⲆᐃΔΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⵠΔⲆⲆⵠⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⲆⵠⲆⲆΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Tamon Lynx"
            }, {
                id: 215,
                Ⲇⵠᐃ: ⲆⲆ.Δⵠᐃⵠⵠᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠΔⵠᐃⵠᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠᐃⲆΔΔᐃⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆΔⵠⲆᐃΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Tamon Warg"
            }, {
                id: 217,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆⲆⲆⲆⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠᐃᐃΔΔⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆⲆⵠΔΔᐃᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⵠⲆᐃⲆᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Tamon Menhir"
            }, {
                id: 95,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔΔΔᐃⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔΔΔᐃᐃⲆⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔᐃⲆⲆⵠᐃⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ΔᐃⵠΔΔⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Taco4Life",
                name: "Mr. Garlic"
            }, {
                id: 76,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⵠⵠⵠⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃᐃⵠⵠᐃΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔᐃᐃΔⵠⵠⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃΔΔᐃᐃⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Winter",
                name: "Robot Dragon"
            }, {
                id: 44,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔΔⲆᐃᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠᐃⲆⲆᐃⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠΔⲆΔᐃⵠⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⵠⵠⲆⲆᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Winter",
                name: "Lava Dragon Version 1"
            }, {
                id: 90,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⵠᐃⵠΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠⲆᐃᐃΔᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔΔⲆⵠⲆⵠᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ΔᐃⵠⵠⵠΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "ExpertyAnimations",
                name: "Lava Dragon Version 2"
            }, {
                id: 124,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃⵠΔΔⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠⲆⵠⲆⲆⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆᐃΔΔᐃⵠᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠΔΔΔᐃⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "eogito",
                name: "Lava Dragon Version 3"
            }, {
                id: 45,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠⲆΔⵠⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃᐃⲆΔᐃΔΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⲆᐃΔᐃΔᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆΔⵠΔᐃᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Sushui",
                name: "Ice Dragon Version 1"
            }, {
                id: 46,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃᐃΔⲆΔΔ,
                ΔⲆᐃ: ⲆⲆ.ΔΔΔΔⵠⲆΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆⲆᐃᐃⲆⵠΔ,
                ΔΔⲆᐃ: ⲆⲆ.ΔΔⲆᐃⵠΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Winter",
                name: "Ice Dragon Version 2"
            }, {
                id: 108,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔⵠⵠᐃΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠⲆΔΔⲆⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⵠⵠⲆⵠⵠᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆΔⵠΔⵠⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "eogito",
                name: "Ice Dragon Version 3"
            }, {
                id: 123,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠⵠΔΔⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠⲆⲆⵠⵠΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆⲆⵠΔⵠΔⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠⲆⵠⲆⲆΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "eogito",
                name: "Baby Dragon Version 1"
            }, {
                id: 128,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃᐃⵠⲆⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃⵠᐃⲆΔⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔΔⵠⵠⵠⵠᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ΔΔⲆⲆΔⵠⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "MADBalgouthi",
                name: "Baby Dragon Version 2"
            }, {
                id: 125,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃΔΔᐃᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃⲆⲆΔᐃⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠᐃⵠᐃΔⵠᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⵠⵠⲆⵠΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "eogito",
                name: "Baby Lava"
            }, {
                id: 47,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔⲆⲆⵠⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃⵠᐃⲆⲆΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⵠⵠⵠⵠΔΔ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃⵠᐃⲆⲆⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Taco4Life",
                name: "Kraken"
            }, {
                id: 129,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃⵠΔᐃⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃᐃⵠᐃᐃⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⲆᐃΔⲆⵠⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⲆⵠⵠᐃᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Taco4Life",
                name: "Sandworm"
            }, {
                id: 63,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃΔᐃⲆᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠᐃΔⲆⵠⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆᐃᐃⲆⵠⵠΔ,
                ΔΔⲆᐃ: ⲆⲆ.ΔⲆⲆⵠⵠⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Mr. Golden Bread"
            }, {
                id: 67,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠⵠⲆⲆᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆᐃⲆⵠΔⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⲆᐃᐃᐃᐃΔ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃΔᐃⵠᐃⵠⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "ForgottenHeroe",
                name: "Starver Ores"
            }, {
                id: 130,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⲆᐃⵠⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ΔΔⵠⵠΔⵠΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⲆⵠⵠᐃⲆᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃΔᐃⵠᐃⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Taco4Life",
                name: "Poo"
            }, {
                id: 89,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃⵠⵠᐃΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆⲆⵠᐃⲆᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⲆⵠᐃΔⲆΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆᐃⵠΔᐃⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Poinet",
                name: "Volcano Starver"
            }, {
                id: 112,
                Ⲇⵠᐃ: ⲆⲆ.Δⵠⵠᐃⵠⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆΔⵠᐃΔΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃᐃⵠᐃΔⲆⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆᐃΔΔⲆⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "eogito",
                name: "Lava Starver"
            }, {
                id: 183,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃΔᐃⵠΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃΔⲆΔΔⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⲆⲆⲆⵠΔⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ΔΔᐃⲆⵠΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Revaster"
            }, {
                id: 192,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠⲆᐃⲆᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆΔⵠᐃⲆⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠΔⵠΔΔⵠΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠⲆᐃᐃⵠΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Awakened"
            }, {
                id: 194,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔⵠⲆᐃⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃᐃᐃⲆᐃΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⵠⲆⵠᐃΔⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃΔΔⲆΔᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Tamon Ice Dragon"
            }, {
                id: 236,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔᐃᐃⲆⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆΔⲆⵠᐃⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⵠⲆΔᐃᐃΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⲆⵠⲆΔⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Crystal Dragon"
            }, {
                id: 208,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆᐃᐃⵠΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠⵠᐃⲆⵠΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⲆⲆⵠⵠΔΔ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⲆⵠΔΔⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Bone Dragon"
            }, {
                id: 216,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃΔᐃⵠᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠᐃΔⵠΔⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⲆⵠⵠⲆⲆⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠᐃΔΔⵠⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Tamon Warg Ghost"
            }, {
                id: 226,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠⲆⲆΔⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃⵠᐃⵠΔⵠ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃⵠᐃΔⵠⲆⲆ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⲆᐃⲆΔⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Cursed"
            }, {
                id: 48,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆΔΔⵠᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔΔⵠⲆⵠᐃᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ΔⲆᐃΔᐃⵠᐃ,
                ΔΔⲆᐃ: ⲆⲆ.ⵠⲆⵠⲆΔΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔⵠΔᐃⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Robot"
            }, {
                id: 110,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔᐃⵠⵠᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆᐃΔᐃΔΔ,
                ᐃΔᐃⵠ: ⲆⲆ.ⲆⲆⲆᐃᐃᐃⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⲆΔⵠΔᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔⵠΔᐃⲆⲆ,
                ΔᐃⲆ: "pizza wa",
                name: "Blue Butterfly"
            }, {
                id: 157,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⲆⲆⵠⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃᐃⲆⲆⵠᐃ,
                ᐃΔᐃⵠ: ⲆⲆ.ᐃᐃⲆΔᐃⵠⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ᐃΔᐃΔⵠⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔⵠΔᐃⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Yrifox"
            }, {
                id: 165,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃⲆΔⵠᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆⲆΔΔⲆⲆ,
                ᐃΔᐃⵠ: ⲆⲆ.ⵠⲆⲆⵠⵠⲆⵠ,
                ΔΔⲆᐃ: ⲆⲆ.ⲆⲆΔⲆⵠΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔⵠΔᐃⲆⲆ,
                ΔᐃⲆ: "OmarJr13",
                name: "Blob Skin"
            }],
            ᐃΔⲆΔ: [{
                id: 0,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆⲆⵠᐃⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠⵠᐃⲆᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ᐃᐃⵠⲆΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Bag 1"
            }, {
                id: 1,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆⲆⵠᐃᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆⲆΔⲆᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ᐃᐃⵠⲆΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Old Bag"
            }, {
                id: 2,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃΔⲆⵠⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔΔⵠⵠⵠᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Bag 2"
            }, {
                id: 3,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠᐃᐃᐃΔΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠᐃⲆᐃΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Bag 3"
            }, {
                id: 4,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆᐃⲆᐃΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠΔⲆⵠⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Bag 4"
            }, {
                id: 5,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔⵠᐃᐃⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠⲆⵠΔⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Bag 5"
            }, {
                id: 11,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃΔᐃᐃⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔⲆΔΔᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "eogito",
                name: "Wood Pickaxe Bag"
            }, {
                id: 19,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠⵠΔⵠⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔⲆΔⵠΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Starve.io ",
                name: "Wood Carrier"
            }, {
                id: 37,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃⲆΔⵠⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃᐃⲆⲆΔΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "eogito",
                name: "Bag 6"
            }, {
                id: 39,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃⲆⲆᐃⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆⲆᐃΔⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "eogito",
                name: "Bag with Wooden Swords"
            }, {
                id: 44,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⵠⵠⵠⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃⵠⵠᐃⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Communist",
                name: "Big Bag"
            }, {
                id: 7,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃⲆⲆΔΔΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆⲆⲆⵠᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Communist",
                name: "Bag 6"
            }, {
                id: 8,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔᐃΔⲆⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠⵠᐃⵠⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Easter Bag"
            }, {
                id: 9,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔⲆⵠᐃⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃΔⵠⲆΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "pizza wa",
                name: "Star Bag"
            }, {
                id: 10,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔⲆⵠⲆⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠⲆΔⲆⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Winter Bag"
            }, {
                id: 20,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔⵠⲆⵠⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆⵠᐃᐃⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io ",
                name: "Stone Carrier"
            }, {
                id: 24,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠⵠⵠⲆᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠΔⵠᐃᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Stone Pickaxe Bag"
            }, {
                id: 6,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆⲆⵠⲆⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆⵠᐃᐃᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Communist",
                name: "Bag Camouflage"
            }, {
                id: 38,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃΔᐃⵠⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃⵠⲆⵠΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Bag with Stone Swords"
            }, {
                id: 54,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⵠᐃⵠⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃᐃΔᐃΔΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Cow Bag"
            }, {
                id: 59,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆΔⵠⲆⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆⵠΔᐃⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "CrysTal",
                name: "Starver Bag"
            }, {
                id: 62,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠΔΔⲆΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃᐃⲆΔᐃᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "CrysTal",
                name: "Crystal Sky Bag"
            }, {
                id: 71,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⲆΔᐃⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆⲆⵠΔᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Portable Furnace"
            }, {
                id: 78,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔᐃΔⲆᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠΔΔᐃᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Crate Bag"
            }, {
                id: 13,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃΔΔⵠⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃᐃΔⲆᐃⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "pizza wa",
                name: "Honey Pot"
            }, {
                id: 21,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆⵠΔⲆⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔⲆⵠΔⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io ",
                name: "Gold Carrier"
            }, {
                id: 30,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⲆΔⲆⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆᐃⵠⵠΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "eogito",
                name: "Gold Pickaxe Bag"
            }, {
                id: 29,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔᐃΔⵠΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃᐃΔⵠᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Ariel",
                name: "Mr and Mrs Bakers"
            }, {
                id: 41,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠΔᐃᐃⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃᐃΔⲆⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "eogito",
                name: "Bag with Golden Swords"
            }, {
                id: 47,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃΔⵠᐃⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔⲆⲆⵠⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "eogito",
                name: "Explorer Bag"
            }, {
                id: 51,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆⵠΔⲆΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃΔΔΔΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "pizza wa",
                name: "Bamboo Bag"
            }, {
                id: 53,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⲆΔᐃᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃΔⵠⲆᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "eogito",
                name: "Mummy Bag"
            }, {
                id: 58,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃᐃΔΔᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔᐃⵠᐃⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "MADBalgouthi",
                name: "Watermelon Bag"
            }, {
                id: 60,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆⲆⵠⵠⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃᐃⵠᐃⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Taco4Life",
                name: "Garlic Bag"
            }, {
                id: 61,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔΔᐃⲆⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃΔᐃΔᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Taco4Life",
                name: "Pumpkin Bag"
            }, {
                id: 64,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆⵠⲆΔᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠⲆᐃᐃᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "upfiz",
                name: "Oil Barel bag"
            }, {
                id: 67,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔᐃⲆⲆᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃΔᐃⲆᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "pizza wa",
                name: "Tree Bag"
            }, {
                id: 70,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠΔⲆΔᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃⲆᐃⵠⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Lit Portable Furnace"
            }, {
                id: 72,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔⵠΔΔⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠⵠΔΔᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Christmas Berry Bush Bag"
            }, {
                id: 73,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔΔᐃⲆⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔⲆΔΔⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Berry Bush Bag"
            }, {
                id: 74,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⵠⲆⵠⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃᐃᐃᐃᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Fall Berry Bush Bag"
            }, {
                id: 76,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃΔⲆΔⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠΔⵠⲆΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Reclaimed Bag"
            }, {
                id: 14,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃⲆΔⵠᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔΔⲆΔⲆⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "a Rabbit in my Bag"
            }, {
                id: 15,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆᐃⲆᐃⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃⵠΔᐃᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Bird's nest"
            }, {
                id: 16,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔΔΔᐃΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔⲆΔⵠᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "a Fish on your Back"
            }, {
                id: 17,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆᐃᐃΔⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔΔᐃΔΔᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "a Squirrel in my Bag"
            }, {
                id: 22,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠⲆⵠΔΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠⲆⵠΔΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io ",
                name: "Diamond Carrier"
            }, {
                id: 12,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆᐃᐃΔᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃᐃⵠΔΔΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Resources Bag"
            }, {
                id: 32,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠⵠⲆΔⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆΔΔᐃⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Diamond Pickaxe Bag"
            }, {
                id: 40,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔΔΔⲆⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔΔΔⲆᐃᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Bag with Diamond Swords"
            }, {
                id: 45,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠⵠΔΔⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠⵠⵠΔⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "My Cake Bag"
            }, {
                id: 46,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠⵠΔⵠⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃⲆⵠⲆΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "My Christmas Cake Bag"
            }, {
                id: 52,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔᐃΔΔΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃΔⵠΔⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "MADBalgouthi",
                name: "Fish Bag"
            }, {
                id: 65,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⵠⵠⵠⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆΔΔΔᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "pizza wa",
                name: "Cloud Bag"
            }, {
                id: 68,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔᐃᐃᐃⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠΔᐃᐃΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "pizza wa",
                name: "Bee Bag"
            }, {
                id: 77,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠᐃⵠΔᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃᐃⲆⵠⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Bag and Bedroll"
            }, {
                id: 80,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⵠᐃᐃⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆΔⵠⲆⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Peasant's Bag"
            }, {
                id: 81,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆΔᐃΔΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃᐃᐃⲆᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Probably Stolen Bag"
            }, {
                id: 48,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠⲆⲆⵠᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆᐃΔᐃᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "fatant",
                name: "Natural Bag"
            }, {
                id: 23,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠΔΔⵠⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠⲆⵠΔᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io ",
                name: "Amethyst Carrier"
            }, {
                id: 25,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔⲆᐃⵠΔΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠΔⵠᐃᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "eogito",
                name: "Amethyst Pickaxe Bag"
            }, {
                id: 28,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃⵠⲆⵠⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃⲆⵠⵠⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Your Baby"
            }, {
                id: 33,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃⵠⵠᐃᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃᐃΔⲆΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "pizza wa",
                name: "Tropical Bag"
            }, {
                id: 43,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⲆᐃⵠΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠΔⲆⲆᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "eogito",
                name: "Bag with Amethyst Swords"
            }, {
                id: 35,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆΔⵠᐃⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆⵠⲆⵠΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "eogito",
                name: "Ice Bag"
            }, {
                id: 50,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠᐃⲆⵠⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆᐃΔⲆᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Taco4Life",
                name: "Thornbush Bag"
            }, {
                id: 56,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃⵠᐃΔⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃᐃᐃᐃΔⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "eogito",
                name: "Autumn Bag"
            }, {
                id: 57,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔΔⲆⵠΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔⵠⵠⵠⵠⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Taco4Life",
                name: "Dino Egg Bag"
            }, {
                id: 66,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⵠΔᐃⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆⲆΔΔⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "pizza wa",
                name: "Magic Cloud Bag"
            }, {
                id: 69,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠⵠⲆᐃᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠᐃᐃⵠⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "pizza wa",
                name: "Chest Bag"
            }, {
                id: 75,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆΔⵠⲆᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆⲆᐃΔⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Tamon Spectum Bag"
            }, {
                id: 79,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔⲆᐃΔⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠΔᐃⵠᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Winter Peasant's Bag"
            }, {
                id: 31,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠᐃΔⲆᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔΔΔᐃⵠⵠⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io ",
                name: "Reidite Carrier"
            }, {
                id: 18,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠᐃᐃΔⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃⲆΔᐃⵠⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Winter",
                name: "Lava Bag"
            }, {
                id: 49,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠᐃΔⲆⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔⲆᐃᐃᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "eogito",
                name: "Lava Bag 2"
            }, {
                id: 36,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆᐃᐃΔⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃⵠΔΔⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "eogito",
                name: "Dragon Bag"
            }, {
                id: 55,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃⵠΔΔΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃⲆⲆᐃⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "eogito",
                name: "Winter Ice Bag"
            }, {
                id: 26,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔᐃΔΔΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠⵠⲆⲆⵠⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "eogito",
                name: "Reidite Pickaxe Bag"
            }, {
                id: 27,
                Ⲇⵠᐃ: ⲆⲆ.Ⲇᐃⵠⵠᐃⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔᐃⲆⲆᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Octopus Bowl"
            }, {
                id: 34,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆΔᐃᐃⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔᐃⲆΔᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Taco4Life",
                name: "Cave Bag"
            }, {
                id: 42,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔᐃⵠΔⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔΔⵠᐃΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "eogito",
                name: "Bag with Reidite Swords"
            }, {
                id: 63,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔⲆᐃⵠⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠⲆⵠᐃᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "eogito",
                name: "Engineer Bag"
            }],
            ΔᐃⲆⲆΔ: [{
                id: 0,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆⲆⵠⲆΔΔ,
                ΔⲆᐃ: ⲆⲆ.ΔΔΔⵠᐃⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ᐃᐃⵠⲆΔ,
                ΔᐃⲆ: "eogito",
                name: "Wooden Dead Box"
            }, {
                id: 1,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆⵠⲆΔᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃᐃΔⲆⵠⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ᐃᐃⵠⲆΔ,
                ΔᐃⲆ: "eogito",
                name: "Hidden item"
            }, {
                id: 2,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔΔⵠΔⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠⲆⵠΔⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "eogito",
                name: "Wooden Box 1"
            }, {
                id: 3,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔᐃᐃⵠᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆΔᐃⲆⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "eogito",
                name: "Wooden Box 2"
            }, {
                id: 4,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆᐃΔⵠᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆⲆΔⵠᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "eogito",
                name: "Wooden Box 3"
            }, {
                id: 5,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠᐃᐃⵠⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔⲆⲆⲆᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "eogito",
                name: "Broken Wooden Box"
            }, {
                id: 6,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃᐃⲆⵠΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔⲆᐃᐃⵠⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "eogito",
                name: "Wooden Box"
            }, {
                id: 7,
                Ⲇⵠᐃ: ⲆⲆ.Δᐃⵠⵠⵠᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠⲆⵠⲆΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "eogito",
                name: "Wooden Battle Box"
            }, {
                id: 8,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔΔⲆᐃⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔⲆⲆⵠⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "eogito",
                name: "Wooden Box with a Cross"
            }, {
                id: 9,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃΔⵠⵠⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔΔᐃⲆⵠⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "eogito",
                name: "Wooden Box with Bubbles"
            }, {
                id: 10,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆΔⲆⲆΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔΔⲆΔΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "eogito",
                name: "Wooden Box with Eyes"
            }, {
                id: 11,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠⵠᐃⵠΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃᐃΔⲆⲆⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "eogito",
                name: "Dark Wooden Box"
            }, {
                id: 38,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔⲆⲆⲆⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠᐃᐃⲆⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Weddlz",
                name: "Noob Box"
            }, {
                id: 12,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃΔΔⲆΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠᐃⵠⵠⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Wooden and Stone Box"
            }, {
                id: 14,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠⲆᐃⵠᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃᐃⲆⲆⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "pizza wa",
                name: "Star Box 1"
            }, {
                id: 15,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃᐃⵠΔⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.Δᐃⵠᐃᐃᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "pizza wa",
                name: "Star Box 2"
            }, {
                id: 27,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃᐃⲆΔΔΔ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠΔᐃⲆΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Flower Box"
            }, {
                id: 46,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠⲆⵠΔᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃᐃⲆΔΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "MADBalgouthi",
                name: "Blue Box"
            }, {
                id: 75,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔⵠΔᐃΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆᐃⵠⲆΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Night Stars Crate"
            }, {
                id: 19,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠⲆⵠⲆΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆᐃΔΔᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Beehive"
            }, {
                id: 13,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆⵠᐃᐃⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔΔᐃⵠΔⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "eogito",
                name: "Wooden and Golden Box"
            }, {
                id: 21,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃΔⵠᐃᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆⲆΔᐃⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Gravestone"
            }, {
                id: 25,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃⵠⵠᐃΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔⲆᐃΔᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Communist",
                name: "Sky Box"
            }, {
                id: 29,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⲆΔⲆΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆⵠᐃΔΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Winter",
                name: "Golden Box"
            }, {
                id: 34,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆΔᐃΔⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆΔⲆⲆⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Communist",
                name: "Water Crate"
            }, {
                id: 35,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠΔⵠᐃᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃⲆᐃᐃΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Communist",
                name: "Glass Crate"
            }, {
                id: 70,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠΔⵠΔⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆⲆⲆⲆΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "CrysTal",
                name: "Crystal Sky Box"
            }, {
                id: 74,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃᐃⵠᐃᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆᐃᐃⲆᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Reclaimed Crate"
            }, {
                id: 77,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃⲆⵠΔΔΔ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔⵠⲆᐃⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Workplace Accident"
            }, {
                id: 16,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆⵠⵠᐃⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔⵠᐃⵠⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Wooden and Diamond Box"
            }, {
                id: 18,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆΔᐃⲆⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠΔⲆⲆⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Don't Hit Me"
            }, {
                id: 26,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔⵠᐃⵠⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠΔΔᐃⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Underwater Box"
            }, {
                id: 31,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃᐃⵠⵠⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃΔΔⵠΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Communist",
                name: "Items Pile"
            }, {
                id: 32,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠⵠⲆᐃᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆΔΔᐃᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Cake Box"
            }, {
                id: 33,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆᐃΔⲆⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠⲆΔΔⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Christmas Cake Box"
            }, {
                id: 36,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆΔΔΔΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃⵠⲆᐃᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Fukss",
                name: "Crab Box"
            }, {
                id: 42,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔⲆⵠᐃⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠⵠᐃᐃᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "MADBalgouthi",
                name: "Fishing Box"
            }, {
                id: 72,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃⵠΔⲆΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠⲆⲆⲆᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Storage Machine"
            }, {
                id: 22,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔΔΔⲆᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔⵠⵠΔᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Let me out of here"
            }, {
                id: 17,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔᐃΔΔⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠⲆᐃᐃⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "eogito",
                name: "Wooden and Amethyst Box"
            }, {
                id: 24,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃᐃΔⵠᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔⵠⲆⲆᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Aquarium"
            }, {
                id: 28,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⲆⲆΔΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃᐃᐃΔⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "eogito",
                name: "Gift Box"
            }, {
                id: 40,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠⵠᐃⵠΔΔ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆⲆⵠⲆⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "MADBalgouthi",
                name: "Open Watermelon Box"
            }, {
                id: 41,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠⲆΔⲆⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔᐃᐃΔⵠⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "MADBalgouthi",
                name: "Watermelon Box"
            }, {
                id: 39,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃᐃⵠΔᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃᐃΔⵠⵠᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Taco4Life",
                name: "Thornbush Box"
            }, {
                id: 43,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⲆΔⲆᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆΔⵠΔⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "eogito",
                name: "Rabbit in the Box"
            }, {
                id: 47,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃΔᐃΔᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃΔⵠⲆᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Taco4Life",
                name: "Garlic Plot"
            }, {
                id: 48,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔⵠΔᐃⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔⲆΔⲆΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Taco4Life",
                name: "Pumpkin Plot"
            }, {
                id: 78,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠⵠⲆⲆⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆΔⲆⵠΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Tamon Spectrum Portal"
            }, {
                id: 45,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔΔⵠΔⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠⵠᐃΔΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "eogito",
                name: "Autumn Box"
            }, {
                id: 44,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃⲆΔⵠᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠᐃΔⲆᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "eogito",
                name: "Winter Box"
            }, {
                id: 20,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆⲆⲆΔⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠⲆⲆᐃⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "eogito",
                name: "Metal and Reidite Box"
            }, {
                id: 23,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔⵠⵠⵠⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔᐃⵠΔⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Kraken Box"
            }, {
                id: 30,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃᐃᐃᐃΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆⲆⲆⲆⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Winter",
                name: "Lava Box"
            }, {
                id: 37,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆᐃᐃⲆᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆΔⵠΔⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "eogito",
                name: "Lava Box 2"
            }, {
                id: 49,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆΔΔΔⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠΔⵠΔᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Box of the Rabbit"
            }, {
                id: 50,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠᐃⵠⵠⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆⲆⵠⵠⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Box of the Wolf"
            }, {
                id: 51,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃΔⵠᐃⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔΔⲆΔᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Box of the Spider"
            }, {
                id: 52,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆΔᐃⲆⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆΔⲆΔᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Box of the Hawk"
            }, {
                id: 53,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃⵠᐃⲆΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃⲆᐃΔᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Box of the Bear"
            }, {
                id: 54,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆᐃΔⵠᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔΔⵠΔΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Box of the Fox"
            }, {
                id: 55,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠⲆᐃⵠⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆⵠΔᐃΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Box of the Baby Mammoth"
            }, {
                id: 56,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⵠΔΔΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃⲆⲆᐃΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Box of the Mammoth"
            }, {
                id: 57,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔⲆⲆᐃⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠΔⵠΔⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Box of the Sandworm"
            }, {
                id: 58,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔΔⲆⲆⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆⲆΔΔⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Box of the Vulture"
            }, {
                id: 59,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃᐃᐃΔΔΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠᐃⵠᐃᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Box of the Kraken"
            }, {
                id: 60,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔⵠⲆᐃᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃΔⵠⲆⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Box of the Piranha"
            }, {
                id: 61,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆⵠᐃᐃΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠⵠⲆⵠΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Box of the Baby Dragon"
            }, {
                id: 62,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆΔⵠⵠΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃⵠⲆᐃᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Box of the Baby Lava"
            }, {
                id: 63,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔᐃⵠⵠᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃΔⵠⵠⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Box of the Dragon"
            }, {
                id: 64,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆⵠⵠⲆⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔΔᐃⵠᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Box of the Penguin"
            }, {
                id: 65,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃⵠⵠⲆΔΔ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆⵠⵠⲆⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Box of the Lava Dragon"
            }, {
                id: 66,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠⲆⲆⵠⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔⵠⵠᐃⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Box of the Boar"
            }, {
                id: 67,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔⵠⵠⲆⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠⲆⲆΔⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Box of the Fire mob"
            }, {
                id: 68,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔΔⲆⲆⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔⵠΔⵠⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Box of the Crab"
            }, {
                id: 69,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃᐃⲆᐃΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠΔⲆᐃⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Box of the King Crab"
            }, {
                id: 71,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆΔΔΔΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔᐃⵠΔⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "eogito",
                name: "Dragon Box"
            }, {
                id: 73,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃΔΔⵠᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔᐃᐃᐃΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Rekt"
            }, {
                id: 76,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃΔⲆΔᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃⵠⵠⵠᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Sleeping Tamon Dragon"
            }],
            ⲆⵠᐃΔⲆ: [{
                id: 0,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃⲆᐃΔᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆⵠᐃⵠΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ᐃᐃⵠⲆΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Book 1"
            }, {
                id: 1,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔΔΔⵠⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔᐃⲆⲆⵠⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "eogito",
                name: "Book 2"
            }, {
                id: 2,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆⲆΔⲆⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠΔᐃΔᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "eogito",
                name: "Book 3"
            }, {
                id: 3,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆⲆⵠⲆⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃⲆᐃⵠⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "eogito",
                name: "Book 4"
            }, {
                id: 4,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆⵠⲆⲆⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠᐃⵠΔⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "eogito",
                name: "Damaged Book 1"
            }, {
                id: 18,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆⵠⵠⲆⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔΔΔᐃⵠᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "SeveR",
                name: "Damaged Book 2"
            }, {
                id: 5,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃᐃⵠⲆⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃⵠᐃΔⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Doctorpus",
                name: "Scroll"
            }, {
                id: 6,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃΔⲆⲆⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.Δᐃᐃⵠᐃᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Doctorpus",
                name: "Clipboard"
            }, {
                id: 7,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔΔⲆⲆᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃⲆⵠᐃᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Seed Book"
            }, {
                id: 20,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆⲆⲆᐃΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔⲆΔᐃΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Taco4Life",
                name: "Camo Book"
            }, {
                id: 24,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠⵠᐃᐃⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔᐃΔΔⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Communist",
                name: "Stone Tablet"
            }, {
                id: 47,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔᐃⲆᐃΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠΔΔⲆⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Reclaimed Book"
            }, {
                id: 10,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔΔⵠⲆⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔⵠⲆⵠⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "pizza wa",
                name: "Star Book"
            }, {
                id: 8,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆⲆΔΔΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆΔⲆΔⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "eogito",
                name: "Gold Book"
            }, {
                id: 15,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆΔⵠⵠⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔⲆⲆᐃᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Old Mysterious Paper"
            }, {
                id: 17,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆⵠⵠⵠΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠΔΔΔⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Gold Engraving"
            }, {
                id: 25,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⲆᐃⵠⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔΔⵠᐃᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "fatant",
                name: "Ant Book"
            }, {
                id: 32,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠΔᐃΔⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃᐃΔᐃΔⵠⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "eogito",
                name: "Mummy Book"
            }, {
                id: 37,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆⵠⵠⵠⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔΔᐃⵠⵠⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Taco4Life",
                name: "Garlic Book"
            }, {
                id: 38,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔᐃΔΔⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆᐃⵠᐃΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Taco4Life",
                name: "Pumpkin Book"
            }, {
                id: 39,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔⵠⲆᐃⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃⵠᐃᐃᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Christmas Tree Book"
            }, {
                id: 11,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠΔⲆⵠⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠⲆⵠΔⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Diamond Book"
            }, {
                id: 9,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⲆᐃᐃⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆᐃΔⲆΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Obscure Book"
            }, {
                id: 16,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔⵠΔⵠⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃⲆⲆΔΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Rolled Parchment"
            }, {
                id: 22,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆΔⵠⲆᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠΔΔΔⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Cake Book"
            }, {
                id: 23,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆᐃⵠΔⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠⲆⵠⵠΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Christmas Cake Book"
            }, {
                id: 30,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠⵠᐃΔΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆᐃᐃΔⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "MADBalgouthi",
                name: "Fish Book"
            }, {
                id: 31,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔΔᐃᐃⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔΔΔⵠⵠΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "CrysTal",
                name: "Once upon a time"
            }, {
                id: 48,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔᐃⲆᐃⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠᐃⲆⲆⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Chrono Clock"
            }, {
                id: 49,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃⲆᐃⵠΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃⵠᐃΔΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Recipe Book"
            }, {
                id: 13,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃⲆΔⵠⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆⲆⵠⲆΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "eogito",
                name: "Amethyst Book"
            }, {
                id: 28,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃⲆᐃΔⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆⵠᐃᐃᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "eogito",
                name: "Paint Pallet"
            }, {
                id: 29,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆΔᐃⵠΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃⵠⲆᐃⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "CrysTal",
                name: "Watermelon Book"
            }, {
                id: 27,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆⵠᐃⲆⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆⲆᐃᐃⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Taco4Life",
                name: "Thornbush Book"
            }, {
                id: 35,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠⵠⲆⵠΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆᐃⵠᐃⵠⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Taco4Life",
                name: "Menu"
            }, {
                id: 36,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃᐃⲆᐃᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔⲆᐃⲆΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "CrysTal",
                name: "Lover Letter"
            }, {
                id: 40,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔΔⵠᐃᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠΔᐃⲆΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Fresh-Baked Cookies"
            }, {
                id: 41,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃⵠⵠΔⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃᐃⲆⵠΔⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Inside, there is just a book."
            }, {
                id: 45,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃᐃΔⲆΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔΔⲆᐃᐃⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Crafting Machine"
            }, {
                id: 33,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔⲆⲆⲆⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔΔᐃⵠⲆᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "eogito",
                name: "Winter Book"
            }, {
                id: 34,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃᐃΔᐃᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃΔⵠᐃⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "eogito",
                name: "Autumn Book"
            }, {
                id: 14,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃⵠⵠΔⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔᐃⵠᐃⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "eogito",
                name: "Reidite Book"
            }, {
                id: 12,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆΔⵠᐃⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔⲆⵠⲆᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Winter",
                name: "Lava Book"
            }, {
                id: 26,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃⵠᐃᐃᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠⵠΔⵠΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "eogito",
                name: "Lava Book 2"
            }, {
                id: 19,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠΔΔΔΔΔ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃⵠᐃⵠᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Winter",
                name: "Ocean Mystery"
            }, {
                id: 21,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔⵠᐃᐃⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠⲆⵠᐃⵠⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "eogito",
                name: "Dragon Book"
            }, {
                id: 42,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔⲆΔΔᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔΔⲆΔⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "eogito",
                name: "Engineer Book"
            }, {
                id: 43,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔᐃⵠⲆⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔⵠᐃⲆᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "eogito",
                name: "Nightmare Book"
            }, {
                id: 44,
                Ⲇⵠᐃ: ⲆⲆ.Δⵠᐃᐃᐃⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆΔⲆⵠⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "aloner",
                name: "Mystery Book"
            }, {
                id: 46,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠⵠⵠᐃⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆⲆⲆⵠⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Cursed Book"
            }],
            ΔΔᐃΔⲆ: [{
                id: 0,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆⲆⲆΔᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆⲆⲆΔᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ᐃᐃⵠⲆΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Nothing"
            }, {
                id: 2,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃⲆⵠⵠΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃΔⲆⵠᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ᐃᐃⵠⲆΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Pink Cheeks"
            }, {
                id: 3,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆⲆⲆⵠᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆᐃⲆΔΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ᐃᐃⵠⲆΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Heart"
            }, {
                id: 1,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃΔᐃΔΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃⲆⵠᐃΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ᐃᐃⵠⲆΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Bandage 1"
            }, {
                id: 4,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔⵠᐃⲆⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃⵠⵠᐃΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ᐃᐃⵠⲆΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Flower 1"
            }, {
                id: 5,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠᐃΔΔⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠΔⲆᐃⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Bow 1"
            }, {
                id: 6,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃⲆᐃΔⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃⵠᐃᐃΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "eogito",
                name: "Bandage 2"
            }, {
                id: 7,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔᐃⵠΔⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠⲆΔⲆᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Flower 2"
            }, {
                id: 8,
                Ⲇⵠᐃ: ⲆⲆ.ⲆᐃΔⵠΔᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠⲆⵠᐃⵠⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "eogito",
                name: "Bandage 3"
            }, {
                id: 36,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃⵠⵠᐃᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆⵠᐃⲆΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "eogito",
                name: "Foliage"
            }, {
                id: 59,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆᐃⵠⲆⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠⲆΔⵠⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "eogito",
                name: "Peaceful"
            }, {
                id: 67,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔΔΔⵠⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠⲆΔΔⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "pizza wa",
                name: "Sparkles"
            }, {
                id: 68,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔⵠⵠΔⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠΔⵠΔⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "pizza wa",
                name: "Luxury"
            }, {
                id: 69,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃⲆᐃⵠᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆᐃⵠᐃᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠΔᐃΔ,
                ΔᐃⲆ: "pizza wa",
                name: "Snow Flakes Crown"
            }, {
                id: 17,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⲆᐃᐃⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔᐃⲆⵠᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Glasses 1"
            }, {
                id: 10,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔᐃⲆⵠᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠⲆⵠᐃⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Bow 2"
            }, {
                id: 11,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆⵠⲆⲆᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠⵠⲆⵠⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "pizza wa",
                name: "Little Stars"
            }, {
                id: 12,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆΔⵠΔᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆⲆᐃⵠⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Pirate Eye Patch 1"
            }, {
                id: 44,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆⲆⵠⵠⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠΔΔⲆᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Taco4Life",
                name: "Pirate Eye Patch 2"
            }, {
                id: 23,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆΔΔⵠⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆⵠⵠⵠⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Clown nose"
            }, {
                id: 16,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠⲆᐃⵠᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃᐃⲆⲆᐃᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Eye Patch"
            }, {
                id: 30,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃⵠᐃΔᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆⵠⵠⵠⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Flower 3"
            }, {
                id: 38,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠᐃⵠⵠΔΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃⲆⵠΔΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Winter",
                name: "False Nose"
            }, {
                id: 74,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆⵠⵠΔΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠΔⲆⲆΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Red Cloth"
            }, {
                id: 75,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔΔⵠⵠΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃᐃΔⵠᐃⵠⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Blue Cloth"
            }, {
                id: 79,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠᐃⲆⲆⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ΔΔᐃⲆΔⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Transparent Mask"
            }, {
                id: 89,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆᐃᐃΔⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔΔⵠᐃΔⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Anyone want to play?",
                name: "Starve.io Anime"
            }, {
                id: 94,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆⲆⲆⲆⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔⲆⲆΔⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Ant",
                name: "Hero Mask"
            }, {
                id: 100,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔΔᐃⵠᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠᐃⲆⲆΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "This starver is mad"
            }, {
                id: 104,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠⵠⵠⲆⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆⲆᐃΔⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Scars"
            }, {
                id: 106,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔᐃⵠⵠΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠⲆⲆΔΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "In Search of Intelligence"
            }, {
                id: 109,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠΔΔⲆᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃᐃᐃⲆⵠⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Reclaimed Bandage"
            }, {
                id: 111,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⵠⵠᐃⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔΔⵠΔᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⲆⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Unwrap Starver for Gift"
            }, {
                id: 15,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃⲆⲆᐃᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔΔΔΔⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Star Glasses"
            }, {
                id: 21,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃⵠΔᐃⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔᐃᐃⲆᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Great-aunt's Glasses"
            }, {
                id: 24,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔΔⲆⵠᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔΔⲆⲆⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Little Starver"
            }, {
                id: 22,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔⵠᐃΔⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔΔᐃᐃⲆⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Little Glasses"
            }, {
                id: 13,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠᐃᐃᐃᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔᐃⵠⵠⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Flower Chain"
            }, {
                id: 29,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃᐃⲆⵠᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃᐃⲆᐃⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "eogito",
                name: "Horns"
            }, {
                id: 31,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠΔᐃΔΔΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔⲆⵠⵠⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "eogito",
                name: "Golden Flower"
            }, {
                id: 40,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃΔⲆᐃⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆⲆⵠⵠΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "pizza wa",
                name: "Sleeping Mask"
            }, {
                id: 57,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔⵠⲆᐃΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔΔⵠᐃⵠⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Taco4Life",
                name: "Fish on your head"
            }, {
                id: 58,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆⲆⵠⲆⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆᐃᐃᐃⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "eogito",
                name: "Rose"
            }, {
                id: 91,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔⵠᐃⵠᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔⵠⲆΔᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "upfiz",
                name: "Grey Scarf"
            }, {
                id: 92,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⲆΔⵠⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠΔⲆΔⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "upfiz",
                name: "Black Scarf"
            }, {
                id: 93,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃΔᐃⲆⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃᐃⲆⲆΔΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "upfiz",
                name: "Skull Mask"
            }, {
                id: 95,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⲆᐃᐃⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔᐃⲆⵠᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Golden Monocle"
            }, {
                id: 96,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔᐃᐃⲆⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠⲆᐃⲆⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "A simple instruction"
            }, {
                id: 102,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔΔΔΔⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃᐃⵠΔᐃⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Garland"
            }, {
                id: 103,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⲆⵠΔᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆⵠⵠᐃⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "The Doormat"
            }, {
                id: 108,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔᐃΔΔⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆⵠΔⵠΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Copium Tanks"
            }, {
                id: 117,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔΔΔⵠᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔΔᐃⲆᐃⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Eyelashes"
            }, {
                id: 118,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃΔᐃΔⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆΔᐃⵠΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⵠⵠΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "Helmet Prototype"
            }, {
                id: 9,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃᐃᐃⵠⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔᐃᐃᐃⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Fancy Glasses"
            }, {
                id: 25,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠᐃⲆⵠΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆⵠⲆᐃⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Medecin Mask"
            }, {
                id: 14,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠⵠⲆⵠᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔΔᐃᐃᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Mr. Mayor"
            }, {
                id: 19,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠᐃⲆⲆⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃᐃⲆΔᐃⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Sunglasses 2"
            }, {
                id: 28,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔᐃᐃᐃᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠΔᐃⲆⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "pizza wa",
                name: "Starfish"
            }, {
                id: 37,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠΔⲆⲆⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆⵠΔᐃⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Berry"
            }, {
                id: 39,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔᐃⲆᐃⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆⲆⵠΔΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Flake"
            }, {
                id: 43,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠᐃⲆΔⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ΔΔΔΔⲆⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Leaf "
            }, {
                id: 61,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔΔⵠΔⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠⲆᐃⲆⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "A sword in your head"
            }, {
                id: 62,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆⵠΔⵠΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃⵠⵠⵠⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Winter Scarf"
            }, {
                id: 64,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠΔⵠⵠⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠΔⲆⲆⲆⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Winter Scarf 2"
            }, {
                id: 66,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠⲆⵠᐃⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔⲆᐃⲆΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "eogito",
                name: "Winter Scarf 3"
            }, {
                id: 70,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔΔᐃⲆΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠⵠⲆᐃΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Mask with animal tracks"
            }, {
                id: 71,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⵠⵠⲆΔΔ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠΔΔᐃⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Spring Mask"
            }, {
                id: 72,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆⵠᐃⵠⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔΔᐃΔᐃⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Pink Mask"
            }, {
                id: 73,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔΔⲆᐃΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ΔΔⲆⵠΔⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Blue Mask"
            }, {
                id: 76,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠᐃΔΔⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠᐃⵠⲆⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Military Mask"
            }, {
                id: 77,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔⵠΔΔΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠᐃⵠⲆⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Orange Mask"
            }, {
                id: 78,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆⵠⵠΔⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃⵠⲆⲆΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "White and Red Points Mask"
            }, {
                id: 80,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆΔᐃⵠⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃᐃⵠⵠΔΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Stick out your tongue Mask"
            }, {
                id: 81,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔᐃⲆⵠⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠⵠᐃⵠΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Two Teeth Mask"
            }, {
                id: 82,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆΔΔⲆⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆᐃᐃⲆⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Make-up Mask"
            }, {
                id: 83,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠᐃⲆΔᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃᐃᐃΔᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Sad Mask"
            }, {
                id: 84,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⲆΔⵠⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔᐃᐃᐃⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Happy Mask"
            }, {
                id: 90,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔᐃᐃⵠⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔᐃᐃΔᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "aloner",
                name: "Blood"
            }, {
                id: 101,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠⲆΔᐃⵠⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠΔᐃⵠⵠⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Axed Plans"
            }, {
                id: 105,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃΔΔⲆΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠᐃⵠΔᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Saddle"
            }, {
                id: 113,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃᐃⵠⵠⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔΔⵠᐃΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "I see"
            }, {
                id: 114,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃⲆⲆⲆⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔᐃⵠⵠΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "I have no body and I must dress"
            }, {
                id: 115,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃΔⲆΔⲆⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃⲆⵠᐃⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔΔⲆⲆ,
                ΔᐃⲆ: "Starve.io",
                name: "Cursed Crown"
            }, {
                id: 27,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃΔⲆⲆⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃΔΔⲆᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Clown Face"
            }, {
                id: 20,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⵠᐃⲆⲆᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆⵠⵠΔΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Sunglasses 3"
            }, {
                id: 32,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠⲆⵠᐃΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠⲆΔⵠⲆᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "eogito",
                name: "Engineer's Glasses"
            }, {
                id: 33,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔⵠᐃΔⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔⲆᐃⲆᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "eogito",
                name: "Engineer's Monocle"
            }, {
                id: 34,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔΔⲆⲆΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃᐃᐃⵠᐃᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Mauve's butt"
            }, {
                id: 41,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔᐃΔΔᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠΔΔⵠⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "eogito",
                name: "Lapa Head"
            }, {
                id: 42,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆΔᐃᐃΔⵠ,
                ΔⲆᐃ: ⲆⲆ.ⵠⲆᐃⲆⵠⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "eogito",
                name: "Lapa Head "
            }, {
                id: 85,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔⲆΔⲆΔΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠᐃⲆⵠᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Mask and Glasses"
            }, {
                id: 110,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔⵠⲆΔᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠⵠΔΔⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔᐃⲆⵠ,
                ΔᐃⲆ: "Starve.io",
                name: "Tamon Spectrum Pet"
            }, {
                id: 60,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⵠⵠᐃⲆᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠΔΔᐃⵠᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Jason"
            }, {
                id: 26,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠⵠᐃⲆⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠᐃᐃⵠⵠΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Devil Horns"
            }, {
                id: 18,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔⵠⲆᐃᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃΔⵠᐃᐃΔ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Big Boss"
            }, {
                id: 35,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆⲆⵠᐃⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃΔΔᐃⵠΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Baby Kraken"
            }, {
                id: 63,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠᐃⲆⵠⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃΔΔⲆΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "eogito",
                name: "Deer Antlers"
            }, {
                id: 65,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔⲆⵠᐃᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠΔⲆⵠᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "eogito",
                name: "Baby Dragon on your head"
            }, {
                id: 86,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆⲆᐃⵠΔΔ,
                ΔⲆᐃ: ⲆⲆ.ΔΔᐃᐃⲆᐃᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Gaz Mask and Glasses"
            }, {
                id: 87,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆΔⵠᐃᐃᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔⲆⵠᐃⵠᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Pink Gaz Mask and Glasses"
            }, {
                id: 88,
                Ⲇⵠᐃ: ⲆⲆ.ΔᐃⲆΔᐃᐃⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃⲆᐃⲆⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "eogito",
                name: "Engineer Glasses"
            }, {
                id: 97,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠΔΔⵠΔᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆᐃΔⲆⲆⵠⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Jarred Horns"
            }, {
                id: 98,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⵠⵠΔⵠᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ΔⲆΔⲆⵠⲆⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Curved Horns"
            }, {
                id: 99,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆΔⲆᐃⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠⵠΔΔΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Evil Goat Horns"
            }, {
                id: 107,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆΔⵠᐃᐃⵠ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆⵠⲆΔΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Decorative Earmuffs"
            }, {
                id: 112,
                Ⲇⵠᐃ: ⲆⲆ.ΔⲆⵠᐃΔΔΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠⵠⲆⲆΔⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Tamon Dragon Pet"
            }, {
                id: 116,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆⵠⲆᐃⵠΔ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔⵠᐃⲆᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ΔⵠΔΔ,
                ΔᐃⲆ: "Starve.io",
                name: "Blanket"
            }, {
                id: 45,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⲆⵠⵠⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠΔⲆⵠΔᐃ,
                ᐃⲆⵠ: ⵠΔΔ.ⲆⵠΔΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "More than Level 5",
                level: 5
            }, {
                id: 46,
                Ⲇⵠᐃ: ⲆⲆ.ⵠΔⲆⲆⲆΔⲆ,
                ΔⲆᐃ: ⲆⲆ.ᐃⵠΔⵠⲆᐃⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⲆⵠΔΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "More than Level 10",
                level: 10
            }, {
                id: 47,
                Ⲇⵠᐃ: ⲆⲆ.ΔΔⵠΔⵠⲆᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆⵠⵠΔⲆⵠⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⲆⵠΔΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "More than Level 15",
                level: 15
            }, {
                id: 48,
                Ⲇⵠᐃ: ⲆⲆ.ᐃⲆⵠΔΔᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ᐃⲆΔⵠᐃΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⲆⵠΔΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "More than Level 20",
                level: 20
            }, {
                id: 49,
                Ⲇⵠᐃ: ⲆⲆ.ⵠⲆΔΔⵠᐃΔ,
                ΔⲆᐃ: ⲆⲆ.ΔᐃⵠⲆΔΔⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⲆⵠΔΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "More than Level 25",
                level: 25
            }, {
                id: 50,
                Ⲇⵠᐃ: ⲆⲆ.ⲆⲆⲆᐃⵠⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ΔⵠⵠᐃΔⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⲆⵠΔΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "More than Level 30",
                level: 30
            }, {
                id: 51,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃⵠⲆⵠⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ⲆΔᐃΔⲆⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⲆⵠΔΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "More than Level 35",
                level: 35
            }, {
                id: 52,
                Ⲇⵠᐃ: ⲆⲆ.ⲆΔⲆΔⲆⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.ⲆⲆΔⵠᐃΔΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⲆⵠΔΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "More than Level 40",
                level: 40
            }, {
                id: 53,
                Ⲇⵠᐃ: ⲆⲆ.ΔⵠⲆΔⵠⲆⲆ,
                ΔⲆᐃ: ⲆⲆ.Δᐃⵠᐃᐃᐃⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⲆⵠΔΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "More than Level 45",
                level: 45
            }, {
                id: 54,
                Ⲇⵠᐃ: ⲆⲆ.ᐃΔⵠᐃⵠⲆΔ,
                ΔⲆᐃ: ⲆⲆ.ⵠᐃⲆᐃᐃⵠⲆ,
                ᐃⲆⵠ: ⵠΔΔ.ⲆⵠΔΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "More than Level 50",
                level: 50
            }, {
                id: 55,
                Ⲇⵠᐃ: ⲆⲆ.ᐃᐃᐃΔᐃⵠⲆ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠⵠᐃⵠⲆΔ,
                ᐃⲆⵠ: ⵠΔΔ.ⲆⵠΔΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "More than Level 55",
                level: 55
            }, {
                id: 56,
                Ⲇⵠᐃ: ⲆⲆ.ⵠᐃⵠᐃⵠⵠᐃ,
                ΔⲆᐃ: ⲆⲆ.ⵠⵠΔⵠΔⵠⵠ,
                ᐃⲆⵠ: ⵠΔΔ.ⲆⵠΔΔᐃ,
                ΔᐃⲆ: "Starve.io",
                name: "More than Level 60",
                level: 60
            }]
        };
        qw.ⲆⵠΔΔΔᐃΔ = ΔᐃⵠⵠⵠΔⵠ(Δᐃⵠᐃ.ΔᐃΔΔᐃ, 21);
        qw.ΔᐃᐃⵠᐃᐃΔ = ΔᐃⵠⵠⵠΔⵠ(Δᐃⵠᐃ.ΔᐃΔΔᐃ, 20);
        ᐃΔ[255] = [];
        ᐃΔ[7] = [];
        ᐃΔ[250] = [];
        ᐃΔ[28] = [];
        ᐃΔ[29] = [];
        ᐃΔ[796] = [];
        for (var a = 0; Δᐃⵠᐃ.ΔᐃΔΔᐃ.length > a; a++) {
            ᐃΔ[255][a] = [Δᐃⵠᐃ.ΔᐃΔΔᐃ[a].Ⲇⵠᐃ, Δᐃⵠᐃ.ΔᐃΔΔᐃ[a].ΔⲆᐃ];
            ᐃΔ[7][a] = [Δᐃⵠᐃ.ΔᐃΔΔᐃ[a].ᐃΔᐃⵠ, Δᐃⵠᐃ.ΔᐃΔΔᐃ[a].ΔΔⲆᐃ];
        }
        for (a = 0; a < Δᐃⵠᐃ.ⲆⵠᐃΔⲆ.length; a++) {
            ᐃΔ[28][a] = [Δᐃⵠᐃ.ⲆⵠᐃΔⲆ[a].Ⲇⵠᐃ, Δᐃⵠᐃ.ⲆⵠᐃΔⲆ[a].ΔⲆᐃ];
        }
        for (a = 0; Δᐃⵠᐃ.ΔᐃⲆⲆΔ.length > a; a++) {
            ᐃΔ[250][a] = [Δᐃⵠᐃ.ΔᐃⲆⲆΔ[a].Ⲇⵠᐃ, Δᐃⵠᐃ.ΔᐃⲆⲆΔ[a].ΔⲆᐃ];
        }
        for (a = 0; a < Δᐃⵠᐃ.ᐃΔⲆΔ.length; a++) {
            ᐃΔ[29][a] = [Δᐃⵠᐃ.ᐃΔⲆΔ[a].Ⲇⵠᐃ, Δᐃⵠᐃ.ᐃΔⲆΔ[a].ΔⲆᐃ];
        }
        for (a = 0; a < Δᐃⵠᐃ.ΔΔᐃΔⲆ.length; a++) {
            ᐃΔ[796][a] = [Δᐃⵠᐃ.ΔΔᐃΔⲆ[a].Ⲇⵠᐃ, Δᐃⵠᐃ.ΔΔᐃΔⲆ[a].ΔⲆᐃ];
        }
    };
    const tt = 3;
    function ut(a, b, c, d) {
        a.beginPath();
        a.arc(b, c, d, 0, Math.PI * 2);
    }
    function vt(a, b, c, d) {
        if (b) {
            a.fillStyle = b;
            a.fill();
        }
        if (c) {
            a.lineWidth = d;
            a.strokeStyle = c;
            a.stroke();
        }
    }
    function wt(b, c, d, e, f, g) {
        if (e < g * 2) {
            g = e / 2;
        }
        if (g * 2 > f) {
            g = f / 2;
        }
        if (g < 0) {
            g = 0;
        }
        b.beginPath();
        b.moveTo(c + g, d);
        b.arcTo(c + e, d, c + e, d + f, g);
        b.arcTo(c + e, d + f, c, d + f, g);
        b.arcTo(c, d + f, c, d, g);
        b.arcTo(c, d, c + e, d, g);
        b.closePath();
    }
    const xt = 16;
    const yt = 13;
    function zt(b, c, d, e) {
        var f = Math.PI * 2 / c;
        b.beginPath();
        var g = [{
            x: d,
            y: 0
        }];
        var a = [];
        for (var i = 1; c > i; i++) {
            g.push({
                x: Math.sin(i * f) * d,
                y: Math.cos(i * f) * d
            });
            var j = g.length;
            a.push(ΔⲆⲆⵠ.ⲆᐃⲆΔΔᐃⲆ(g[j - 2], g[j - 1]));
        }
        a.push(ΔⲆⲆⵠ.ⲆᐃⲆΔΔᐃⲆ(g[g.length - 1], g[0]));
        var k = a[a.length - 1];
        b.moveTo(k.x, k.y);
        for (i = 0; i < c; i++) {
            b.arcTo(g[i].x, g[i].y, a[i].x, a[i].y, e);
        }
        b.closePath();
    }
    function At(a, b, c, d, e) {
        a.beginPath();
        a.lineCap = "round";
        a.arc(b, c, d, 0, Math.PI * 2 * e);
    }
    const Bt = 17;
    function Ct(c, e) {
        var f = document.createElement("canvas");
        var i = f.getContext("2d");
        var j = c * 120;
        var k = c * 110;
        var a = j / 2;
        var m = k / 2;
        var n = c * 20;
        var h = c * 112;
        var l = c * 82;
        var g = h / 2;
        var o = l / 2;
        var b = c * 4;
        f.width = j;
        f.height = k;
        i.globalAlpha = 1;
        i.translate(a, m);
        wt(i, -g, -o, h, l, n);
        vt(i, e, e, b);
        return f;
    }
    function Dt(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = Math.sqrt(b.width * b.width + b.height * b.height);
        d2 = e / 2;
        c.width = e;
        c.height = e;
        d.translate(d2, d2);
        d.rotate(a);
        d.drawImage(b, -b.width / 2, -b.height / 2);
        return c;
    }
    function Et(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = Math.floor(b * 28);
        var g = Math.floor(b * 20);
        e.font = g + "px Baloo Paaji";
        var a = b * 8;
        var h = e.measureText(c).width + a * 2;
        d.width = h;
        d.height = f;
        wt(e, 0, 0, h, f, b * 10);
        e.globalAlpha = 0.5;
        vt(e, "#000");
        e.globalAlpha = 1;
        e.textBaseline = "middle";
        e.font = g + "px Baloo Paaji";
        e.beginPath();
        e.fillStyle = "#FFF";
        e.fillText(c, a, f / 2);
        return d;
    }
    const Ft = Ga;
    function Gt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 264;
        d.height = a * 246;
        e.translate(0, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 54);
        e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
        e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
        e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
        e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
        e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
        e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
        e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
        e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
        e.closePath();
        vt(e, c[0]);
        e.translate(0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 54);
        e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
        e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
        e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
        e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
        e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
        e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
        e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
        e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
        e.closePath();
        vt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 121, a * 102);
        e.bezierCurveTo(a * 111, a * 80, a * 110, a * 66, a * 108, a * 51);
        e.bezierCurveTo(a * 119, a * 65, a * 129, a * 85, a * 135, a * 99);
        e.bezierCurveTo(a * 142, a * 67, a * 146, a * 60, a * 152, a * 50);
        e.bezierCurveTo(a * 154, a * 71, a * 152, a * 85, a * 149, a * 104);
        e.bezierCurveTo(a * 166, a * 88, a * 175, a * 83, a * 188, a * 78);
        e.bezierCurveTo(a * 179, a * 91, a * 170, a * 103, a * 160, a * 112);
        e.bezierCurveTo(a * 186, a * 107, a * 191, a * 107, a * 204, a * 108);
        e.bezierCurveTo(a * 195, a * 114, a * 179, a * 120, a * 163, a * 123);
        e.bezierCurveTo(a * 183, a * 130, a * 186, a * 135, a * 192, a * 140);
        e.bezierCurveTo(a * 179, a * 141, a * 164, a * 139, a * 153, a * 135);
        e.bezierCurveTo(a * 158, a * 145, a * 163, a * 159, a * 165, a * 177);
        e.bezierCurveTo(a * 154, a * 166, a * 145, a * 153, a * 138, a * 139);
        e.bezierCurveTo(a * 133, a * 155, a * 125, a * 170, a * 117, a * 182);
        e.bezierCurveTo(a * 116, a * 160, a * 119, a * 151, a * 124, a * 138);
        e.bezierCurveTo(a * 107, a * 150, a * 95, a * 156, a * 82, a * 159);
        e.bezierCurveTo(a * 94, a * 140, a * 101, a * 136, a * 113, a * 128);
        e.bezierCurveTo(a * 78, a * 123, a * 75, a * 121, a * 67, a * 118);
        e.bezierCurveTo(a * 85, a * 112, a * 94, a * 112, a * 111, a * 113);
        e.bezierCurveTo(a * 89, a * 97, a * 85, a * 93, a * 78, a * 82);
        e.bezierCurveTo(a * 92, a * 85, a * 101, a * 90, a * 121, a * 102);
        e.closePath();
        vt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 103);
        e.bezierCurveTo(a * 111, a * 112, a * 117, a * 136, a * 140, a * 130);
        e.bezierCurveTo(a * 151, a * 126, a * 156, a * 115, a * 155, a * 107);
        e.bezierCurveTo(a * 155, a * 96, a * 154, a * 94, a * 148, a * 94);
        e.bezierCurveTo(a * 141, a * 94, a * 146, a * 104, a * 136, a * 104);
        e.closePath();
        vt(e, c[3], c[4], a * 4);
        return d;
    }
    const Ht = 18;
    const It = 20;
    function Jt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 22;
        d.height = a * 22;
        e.globalAlpha = 0.4;
        ut(e, a * 11, a * 11, a * 10);
        vt(e, c[0]);
        e.globalAlpha = 0.7;
        ut(e, a * 11, a * 11, a * 7);
        vt(e, c[0]);
        e.globalAlpha = 1;
        ut(e, a * 11, a * 11, a * 4);
        vt(e, c[0]);
        return d;
    }
    function Kt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 70;
        d.height = a * 70;
        e.globalAlpha = 0.5;
        ut(e, a * 26, a * 26, a * 9);
        vt(e, c[0]);
        ut(e, a * 56, a * 36, a * 9);
        vt(e, c[1]);
        ut(e, a * 40, a * 50, a * 9);
        vt(e, c[2]);
        e.globalAlpha = 1;
        ut(e, a * 26, a * 26, a * 5);
        vt(e, c[0]);
        ut(e, a * 56, a * 36, a * 5);
        vt(e, c[1]);
        ut(e, a * 40, a * 50, a * 5);
        vt(e, c[2]);
        return d;
    }
    const Lt = 14;
    function Mt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 247;
        e.save();
        e.translate(a * 69.5, a * 145);
        wt(e, a * -8.5, a * -63, a * 17, a * 127, a * 1);
        e.restore();
        vt(e, c[0]);
        e.save();
        e.translate(a * 183, a * 145);
        wt(e, a * -8, a * -63, a * 16, a * 126, a * 1);
        e.restore();
        vt(e, c[0]);
        e.save();
        e.translate(a * 123.5, a * 62.5);
        e.rotate(6.28);
        wt(e, a * -84.5, a * -25.5, a * 169, a * 51, a * 5);
        e.restore();
        vt(e, c[2], c[1], a * 6);
        e.save();
        e.translate(a * 123.5, a * 118);
        e.rotate(6.24);
        wt(e, a * -85.5, a * -24, a * 169, a * 48, a * 5);
        e.restore();
        vt(e, c[3], c[1], a * 6);
        e.save();
        e.translate(a * 122, a * 177.5);
        e.rotate(6.32);
        wt(e, a * -84, a * -23.5, a * 169, a * 47, a * 5);
        e.restore();
        vt(e, c[2], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 37, a * 157);
        e.bezierCurveTo(a * 49, a * 160, a * 49, a * 160, a * 61, a * 163);
        e.bezierCurveTo(a * 49.5, a * 165.5, a * 49.5, a * 165.5, a * 38, a * 168);
        e.closePath();
        vt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 205, a * 175);
        e.bezierCurveTo(a * 192.5, a * 180, a * 192.5, a * 180, a * 180, a * 185);
        e.bezierCurveTo(a * 193, a * 188, a * 193, a * 188, a * 206, a * 191);
        e.closePath();
        vt(e, c[1]);
        return d;
    }
    const Nt = 16;
    function Ot(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 247;
        e.save();
        e.translate(a * 182, a * 120);
        wt(e, a * -8, a * -67, a * 16, a * 134, a * 1);
        e.restore();
        vt(e, c[0]);
        e.save();
        e.translate(a * 68.5, a * 127.5);
        wt(e, a * -8.5, a * -70.5, a * 17, a * 141, a * 1);
        e.restore();
        vt(e, c[0]);
        e.save();
        e.translate(a * 123.5, a * 68);
        wt(e, a * -82.5, a * -24, a * 165, a * 48, a * 4);
        e.restore();
        vt(e, c[2], c[1], a * 6);
        e.save();
        e.translate(a * 123, a * 179.5);
        wt(e, a * -83, a * -24.5, a * 166, a * 49, a * 4);
        e.restore();
        vt(e, c[2], c[1], a * 6);
        e.save();
        e.translate(a * 123.5, a * 123.5);
        e.rotate(6.24);
        wt(e, a * -82.5, a * -24.5, a * 165, a * 49, a * 4);
        e.restore();
        vt(e, c[3], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 204, a * 112);
        e.bezierCurveTo(a * 149, a * 121.5, a * 96, a * 130, a * 94, a * 131);
        e.bezierCurveTo(a * 149.5, a * 127.5, a * 149.5, a * 127.5, a * 205, a * 124);
        e.closePath();
        vt(e, c[1]);
        return d;
    }
    const eb = 5;
    function ib(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 191;
        d.height = a * 153;
        e.globalAlpha = 0.5;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 97.49996948242188, a * 95.12844848632812);
        wt(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
        e.restore();
        vt(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 97.49996948242188, a * 95.12844848632812);
        wt(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
        e.restore();
        vt(e, c[1], c[2], a * 4);
        e.globalCompositeOperation = "destination-out";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26.999969482421875, a * 50.850677490234375);
        e.bezierCurveTo(a * 46.499969482421875, a * 64.85067749023438, a * 46.499969482421875, a * 64.85067749023438, a * 65.99996948242188, a * 78.85067749023438);
        e.bezierCurveTo(a * 80.99996948242188, a * 87.85067749023438, a * 105.99996948242188, a * 82.85067749023438, a * 114.99996948242188, a * 80.85067749023438);
        e.bezierCurveTo(a * 130.99996948242188, a * 69.85067749023438, a * 152.99996948242188, a * 70.85067749023438, a * 166.99996948242188, a * 67.85067749023438);
        e.bezierCurveTo(a * 156.99996948242188, a * 52.850677490234375, a * 156.99996948242188, a * 52.850677490234375, a * 146.99996948242188, a * 37.850677490234375);
        e.bezierCurveTo(a * 101.49996948242188, a * 37.350677490234375, a * 101.49996948242188, a * 37.350677490234375, a * 55.999969482421875, a * 36.850677490234375);
        e.closePath();
        vt(e, c[2], c[3], a * 4);
        e.globalCompositeOperation = "source-over";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 40.999969482421875, a * 59.850677490234375);
        e.bezierCurveTo(a * 41.999969482421875, a * 50.850677490234375, a * 47.999969482421875, a * 47.850677490234375, a * 56.999969482421875, a * 49.850677490234375);
        e.bezierCurveTo(a * 65.99996948242188, a * 41.850677490234375, a * 76.99996948242188, a * 42.850677490234375, a * 90.99996948242188, a * 47.850677490234375);
        e.bezierCurveTo(a * 94.99996948242188, a * 42.850677490234375, a * 104.99996948242188, a * 42.850677490234375, a * 114.99996948242188, a * 47.850677490234375);
        e.bezierCurveTo(a * 131.99996948242188, a * 42.850677490234375, a * 142.99996948242188, a * 48.850677490234375, a * 145.99996948242188, a * 56.850677490234375);
        e.bezierCurveTo(a * 160.99996948242188, a * 63.850677490234375, a * 154.99996948242188, a * 69.85067749023438, a * 155.99996948242188, a * 70.85067749023438);
        e.bezierCurveTo(a * 141.99996948242188, a * 71.85067749023438, a * 141.99996948242188, a * 71.85067749023438, a * 127.99996948242188, a * 72.85067749023438);
        e.bezierCurveTo(a * 110.99996948242188, a * 83.85067749023438, a * 107.99996948242188, a * 82.85067749023438, a * 90.99996948242188, a * 85.85067749023438);
        e.bezierCurveTo(a * 70.99996948242188, a * 83.85067749023438, a * 64.99996948242188, a * 79.85067749023438, a * 53.999969482421875, a * 70.85067749023438);
        e.closePath();
        vt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 33.999969482421875, a * 65.85067749023438);
        e.bezierCurveTo(a * 36.999969482421875, a * 59.850677490234375, a * 34.999969482421875, a * 60.850677490234375, a * 39.999969482421875, a * 59.850677490234375);
        e.bezierCurveTo(a * 47.999969482421875, a * 61.850677490234375, a * 62.999969482421875, a * 76.85067749023438, a * 74.99996948242188, a * 79.85067749023438);
        e.bezierCurveTo(a * 93.99996948242188, a * 85.85067749023438, a * 111.99996948242188, a * 83.85067749023438, a * 124.99996948242188, a * 70.85067749023438);
        e.bezierCurveTo(a * 129.99996948242188, a * 67.85067749023438, a * 145.99996948242188, a * 65.85067749023438, a * 159.99996948242188, a * 67.85067749023438);
        e.bezierCurveTo(a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 75.85067749023438);
        e.bezierCurveTo(a * 146.99996948242188, a * 72.85067749023438, a * 144.99996948242188, a * 75.85067749023438, a * 143.99996948242188, a * 82.85067749023438);
        e.bezierCurveTo(a * 144.99996948242188, a * 86.85067749023438, a * 140.99996948242188, a * 90.85067749023438, a * 137.99996948242188, a * 86.85067749023438);
        e.bezierCurveTo(a * 139.99996948242188, a * 72.85067749023438, a * 135.99996948242188, a * 72.85067749023438, a * 133.99996948242188, a * 82.85067749023438);
        e.bezierCurveTo(a * 127.99996948242188, a * 88.85067749023438, a * 124.99996948242188, a * 70.85067749023438, a * 116.99996948242188, a * 86.85067749023438);
        e.bezierCurveTo(a * 110.99996948242188, a * 91.85067749023438, a * 96.99996948242188, a * 81.85067749023438, a * 89.99996948242188, a * 90.85067749023438);
        e.bezierCurveTo(a * 85.99996948242188, a * 92.85067749023438, a * 81.99996948242188, a * 95.85067749023438, a * 76.99996948242188, a * 86.85067749023438);
        e.bezierCurveTo(a * 67.99996948242188, a * 93.85067749023438, a * 67.99996948242188, a * 91.85067749023438, a * 60.999969482421875, a * 79.85067749023438);
        e.bezierCurveTo(a * 53.999969482421875, a * 71.85067749023438, a * 52.999969482421875, a * 72.85067749023438, a * 46.999969482421875, a * 77.85067749023438);
        e.bezierCurveTo(a * 41.999969482421875, a * 78.85067749023438, a * 42.999969482421875, a * 69.85067749023438, a * 33.999969482421875, a * 65.85067749023438);
        e.closePath();
        vt(e, c[5], c[6], a * 4);
        ut(e, a * 68, a * 111.29513549804688, a * 15);
        vt(e, c[7], c[8], a * 4);
        ut(e, a * 123, a * 111.29510498046875, a * 15);
        vt(e, c[7], c[8], a * 4);
        ut(e, a * 63, a * 106, a * 5);
        vt(e, c[9]);
        ut(e, a * 118, a * 106, a * 5);
        vt(e, c[9]);
        return d;
    }
    function tb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 191;
        d.height = a * 153;
        e.globalAlpha = 0.5;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 96.49996948242188, a * 66.79510498046875);
        e.rotate(0);
        wt(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
        e.restore();
        vt(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 96.49996948242188, a * 66.79510498046875);
        e.rotate(0);
        wt(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
        e.restore();
        vt(e, c[1], c[2], a * 4);
        e.translate(a * 2, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 119, a * 28);
        e.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
        e.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
        e.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
        e.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
        e.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
        e.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
        e.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
        e.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
        e.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
        e.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
        e.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
        e.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
        e.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
        e.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
        e.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
        e.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
        e.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
        e.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
        e.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
        e.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
        e.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
        e.closePath();
        vt(e, c[3], c[4], a * 4);
        return d;
    }
    function nb(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 191;
        c.height = a * 153;
        d.save();
        d.translate(a * 96.49996948242188, a * 66.79510498046875);
        wt(d, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
        d.restore();
        vt(d, b[0], b[0], a * 4);
        d.translate(a * 2, 0);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 119, a * 28);
        d.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
        d.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
        d.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
        d.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
        d.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
        d.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
        d.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
        d.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
        d.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
        d.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
        d.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
        d.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
        d.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
        d.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
        d.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
        d.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
        d.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
        d.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
        d.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
        d.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
        d.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
        d.closePath();
        vt(d, b[0], b[0], a * 4);
        d.save();
        d.translate(a * 97.49996948242188, a * 95.12844848632812);
        wt(d, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
        d.restore();
        vt(d, b[0], b[0], a * 4);
        return c;
    }
    function ob(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 247;
        e.save();
        e.translate(a * 183, a * 107);
        wt(e, a * -8, a * -70.5, a * 16, a * 141, a * 1);
        e.restore();
        vt(e, c[0]);
        e.save();
        e.translate(a * 69.5, a * 110);
        wt(e, a * -8.5, a * -71, a * 17, a * 143, a * 1);
        e.restore();
        vt(e, c[0]);
        e.save();
        e.translate(a * 123.5, a * 181);
        wt(e, a * -84.5, a * -26, a * 169, a * 52, a * 5);
        e.restore();
        vt(e, c[2], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 95);
        e.bezierCurveTo(a * 105, a * 96, a * 113, a * 99, a * 134, a * 102);
        e.bezierCurveTo(a * 147, a * 106, a * 173, a * 100, a * 207, a * 105);
        e.bezierCurveTo(a * 210, a * 105, a * 207, a * 140, a * 207, a * 154);
        e.bezierCurveTo(a * 123.5, a * 151.5, a * 123.5, a * 151.5, a * 40, a * 149);
        e.bezierCurveTo(a * 37, a * 145, a * 39, a * 95, a * 41, a * 96);
        e.closePath();
        vt(e, c[2], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 68, a * 75);
        e.bezierCurveTo(a * 54, a * 72.5, a * 54, a * 72.5, a * 40, a * 70);
        e.bezierCurveTo(a * 38, a * 46, a * 40, a * 46, a * 53, a * 46);
        e.bezierCurveTo(a * 201, a * 41, a * 201, a * 41, a * 201, a * 42);
        e.bezierCurveTo(a * 211, a * 40, a * 208, a * 53, a * 208, a * 72);
        e.bezierCurveTo(a * 209, a * 91, a * 210, a * 96, a * 194, a * 94);
        e.bezierCurveTo(a * 119, a * 97, a * 119, a * 97, a * 44, a * 100);
        e.bezierCurveTo(a * 39, a * 99, a * 40, a * 96, a * 40, a * 80);
        e.bezierCurveTo(a * 54, a * 77.5, a * 54, a * 77.5, a * 68, a * 75);
        e.closePath();
        vt(e, c[3], c[1], a * 6);
        return d;
    }
    const ab = 19;
    function rb(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 40;
        var a = b * 40;
        e.width = g;
        e.height = a;
        var i = b * g / 2;
        var j = b * a / 2;
        var k = b * 15;
        f.save();
        f.translate(i, j);
        f.globalAlpha = 1;
        ut(f, 0, 0, k);
        vt(f, d[0]);
        k = b * 5;
        i = b * 2;
        j = b * 1;
        f.translate(i, j);
        f.globalAlpha = 1;
        ut(f, 0, 0, k);
        vt(f, d[1]);
        f.restore();
        return e;
    }
    function sb(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 185;
        f.height = b * 240;
        g.globalAlpha = 0.5;
        g.translate(0, b * 10);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 44, b * 137);
        g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
        g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
        g.closePath();
        vt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 53, b * 181);
        g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
        g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
        g.closePath();
        vt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 63, b * 208);
        g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
        g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
        g.closePath();
        vt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 130, b * 170);
        g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
        g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
        g.closePath();
        vt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 39, b * 140);
        g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
        g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
        g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
        g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
        g.closePath();
        vt(g, d[0]);
        g.globalAlpha = 1;
        g.translate(0, b * -10);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 44, b * 137);
        g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
        g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
        g.closePath();
        vt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 53, b * 181);
        g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
        g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
        g.closePath();
        vt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 63, b * 208);
        g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
        g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
        g.closePath();
        vt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 130, b * 170);
        g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
        g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
        g.closePath();
        vt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 39, b * 140);
        g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
        g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
        g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
        g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
        g.closePath();
        vt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 59, b * 99);
        g.bezierCurveTo(b * 71, b * 68, b * 81, b * 68, b * 94, b * 67);
        g.bezierCurveTo(b * 105, b * 66, b * 119, b * 75, b * 123, b * 96);
        g.bezierCurveTo(b * 104, b * 91, b * 101, b * 94, b * 94, b * 97);
        g.bezierCurveTo(b * 76, b * 92, b * 73, b * 93, b * 60, b * 99);
        g.closePath();
        vt(g, d[3], d[2], b * 4);
        if (e === 0) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 47, b * 149);
            g.bezierCurveTo(b * 43, b * 140, b * 48, b * 130, b * 59, b * 127);
            g.bezierCurveTo(b * 77, b * 126, b * 90, b * 131, b * 131, b * 127);
            g.bezierCurveTo(b * 143, b * 130, b * 144, b * 143, b * 132, b * 154);
            g.bezierCurveTo(b * 90, b * 152, b * 90, b * 152, b * 48, b * 150);
            g.closePath();
            vt(g, d[1]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 40, b * 139);
            g.bezierCurveTo(b * 48, b * 113, b * 76, b * 119, b * 91, b * 126);
            g.bezierCurveTo(b * 117, b * 113, b * 135, b * 117, b * 144, b * 134);
            g.bezierCurveTo(b * 144, b * 138, b * 144, b * 138, b * 144, b * 142);
            g.bezierCurveTo(b * 128, b * 124, b * 108, b * 124, b * 91, b * 136);
            g.bezierCurveTo(b * 59, b * 124, b * 50, b * 137, b * 42, b * 148);
            g.closePath();
            vt(g, d[3], d[2], b * 4);
        } else {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 41, b * 139);
            g.bezierCurveTo(b * 53, b * 117, b * 69, b * 118, b * 92, b * 127);
            g.bezierCurveTo(b * 124, b * 111, b * 136, b * 121, b * 143, b * 136);
            g.bezierCurveTo(b * 142, b * 144, b * 142, b * 144, b * 141, b * 152);
            g.bezierCurveTo(b * 128, b * 131, b * 113, b * 138, b * 92, b * 145);
            g.bezierCurveTo(b * 57, b * 133, b * 57, b * 147, b * 44, b * 154);
            g.closePath();
            vt(g, d[3], d[2], b * 4);
        }
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 90, b * 95);
        g.bezierCurveTo(b * 99, b * 82, b * 98, b * 58, b * 99, b * 40);
        g.bezierCurveTo(b * 90, b * 38, b * 89, b * 34, b * 92, b * 17);
        g.bezierCurveTo(b * 92, b * 5, b * 83, b * 16, b * 78, b * 29);
        g.bezierCurveTo(b * 72, b * 59, b * 87, b * 81, b * 89, b * 87);
        g.closePath();
        vt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 90, b * 86);
        g.bezierCurveTo(b * 95, b * 74, b * 95, b * 62, b * 95, b * 43);
        g.bezierCurveTo(b * 84, b * 37, b * 86, b * 34, b * 89, b * 16);
        g.bezierCurveTo(b * 75, b * 29, b * 80, b * 58, b * 90, b * 85);
        g.closePath();
        vt(g, d[1], d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 92, b * 117);
        g.bezierCurveTo(b * 98, b * 87, b * 93, b * 78, b * 85, b * 76);
        g.bezierCurveTo(b * 85.5, b * 79.5, b * 85.5, b * 79.5, b * 86, b * 83);
        g.bezierCurveTo(b * 84, b * 85.5, b * 84, b * 85.5, b * 82, b * 88);
        g.bezierCurveTo(b * 90, b * 93, b * 89, b * 100, b * 92, b * 117);
        g.closePath();
        vt(g, d[1], d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 92, b * 175);
        g.bezierCurveTo(b * 95, b * 135, b * 98, b * 125, b * 109, b * 121);
        g.bezierCurveTo(b * 106, b * 114, b * 104, b * 114, b * 102, b * 113);
        g.bezierCurveTo(b * 103, b * 106, b * 104, b * 103, b * 107, b * 96);
        g.bezierCurveTo(b * 74, b * 108, b * 86, b * 157, b * 92, b * 174);
        g.closePath();
        vt(g, d[1], d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 48, b * 169);
        g.bezierCurveTo(b * 42, b * 187, b * 50, b * 193, b * 59, b * 198);
        g.closePath();
        vt(g, sl, d[2], b * 5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 136, b * 171);
        g.bezierCurveTo(b * 139, b * 186, b * 138, b * 191, b * 124, b * 199);
        g.closePath();
        vt(g, undefined, d[2], b * 4);
        ut(g, b * 63, b * 180, b * 15.231546211727817);
        vt(g, d[4]);
        ut(g, b * 121, b * 181, b * 15.652475842498529);
        vt(g, d[4]);
        ut(g, b * 58, b * 175, b * 5.656854249492381);
        vt(g, d[2]);
        ut(g, b * 116, b * 175, b * 5.656854249492381);
        vt(g, d[2]);
        return f;
    }
    const hb = 7;
    const lb = 6;
    function gb(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 185;
        c.height = a * 240;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 44, a * 137);
        d.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
        d.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
        d.closePath();
        vt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 53, a * 181);
        d.bezierCurveTo(a * 30, a * 164, a * 19, a * 150, a * 11, a * 136);
        d.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
        d.closePath();
        vt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 63, a * 208);
        d.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
        d.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
        d.closePath();
        vt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130, a * 170);
        d.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
        d.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
        d.closePath();
        vt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 39, a * 140);
        d.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
        d.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
        d.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
        d.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
        d.closePath();
        vt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 90, a * 95);
        d.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
        d.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
        d.bezierCurveTo(a * 92, a * 5, a * 83, a * 16, a * 78, a * 29);
        d.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
        d.closePath();
        vt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 90, a * 86);
        d.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
        d.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * 16);
        d.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
        d.closePath();
        vt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 92, a * 117);
        d.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
        d.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
        d.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
        d.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
        d.closePath();
        vt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 92, a * 175);
        d.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
        d.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
        d.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
        d.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
        d.closePath();
        vt(d, b[0]);
        return c;
    }
    const ub = 11;
    const bb = 15;
    const db = 20;
    const vb = 9;
    function mb(b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 200;
        c.width = e;
        c.height = f;
        var g = Rd(0.35, false, ["#0e3022", "#0b8052", "#077b49"]);
        d.drawImage(g, 10, 10);
        g = Od(0.9, rj, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 21, 20);
        g = Od(0.9, false, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 38, 28);
        g = Od(0.9, false, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 15, 37);
        g = Od(0.9, pn, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 32, 45);
        return c;
    }
    function cb(c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var i = c * 100;
        var j = c * 100;
        var a = i / 2;
        var k = j / 2;
        e.width = i;
        e.height = j;
        var m = c * 5;
        var h = c * 28;
        var l = m / 2;
        var g = h / 2;
        f.translate(a, k);
        for (var n = 0; n < 4; n++) {
            wt(f, -l, -g, m, h, c * 2);
            f.rotate(Math.PI / 4);
            vt(f, d);
        }
        f.arc(0, 0, c * 10, 0, Math.PI * 2);
        vt(f, d);
        f.globalCompositeOperation = "destination-out";
        ut(f, 0, 0, c * 4);
        f.fill();
        return e;
    }
    function pb(f, e, i) {
        var j = document.createElement("canvas");
        var k = j.getContext("2d");
        var n = (d = f * 125) / 2;
        var a = (r = f * 95) / 2;
        var o = f * 10;
        var p = f * 8;
        var h = f * 112;
        var l = f * 82;
        var g = h / 2;
        var q = l / 2;
        var b = f * 4;
        j.width = d;
        j.height = r;
        k.translate(n - f * 4, a + f * 4);
        k.globalAlpha = e ? 0.5 : 1;
        wt(k, -g, -q, h, l, o);
        vt(k, i[0]);
        k.globalAlpha = 1;
        k.translate(0, -p);
        wt(k, -g, -q, h, l, o);
        vt(k, i[1], i[2], b);
        var d = f * 55;
        var r = f * 45;
        o = 5;
        k.translate(f * -40, f * -30);
        wt(k, 0, 0, d, r, o);
        vt(k, i[3]);
        var t = cb(f * 0.7, i[3]);
        k.drawImage(t, f * 45, f * -25);
        t = cb(f * 0.7, i[3]);
        k.drawImage(t, f * 45, f * 15);
        t = cb(f * 1.2, i[3]);
        k.drawImage(t, f * 28, f * -30);
        d = f * 15;
        r = f * 70;
        o = f * 5;
        k.translate(f * 78, f * -5);
        wt(k, 0, 0, d, r, o);
        vt(k, i[4]);
        d = f * 9;
        r = f * 50;
        o = f * 3;
        k.translate(f * -20, f * 20);
        k.rotate(Math.PI / 5);
        k.globalAlpha = 0.6;
        wt(k, 0, 0, d, r, o);
        vt(k, i[5]);
        k.translate(f * -20, f * 29);
        k.rotate(Math.PI / 5);
        k.globalAlpha = 0.6;
        k.beginPath();
        k.lineJoin = "round";
        k.moveTo(0, 0);
        k.lineTo(0, f * 30);
        k.lineTo(f * 30, f * 30);
        k.closePath();
        vt(k, null, i[5], f * 8);
        return j;
    }
    function Cb(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = c * 32;
        var a = c * 32;
        var m = k / 2;
        var n = a / 2;
        i.width = k;
        i.height = a;
        var h = c * 5;
        var l = c * 28;
        var g = h / 2;
        var o = l / 2;
        j.translate(c * 0, c * 0);
        j.translate(m, n);
        if (f == 1) {
            ut(j, 0, 0, c * 10);
            vt(j, e[2], e[2], c * 3);
            for (var b = 0; b < 4; b++) {
                wt(j, -g, -o, h, l, c * 2);
                j.rotate(Math.PI / 4);
                vt(j, e[2], e[2], c * 4);
            }
        }
        ut(j, 0, 0, c * 10);
        vt(j, e[0], e[1], c * 1.5);
        for (b = 0; b < 4; b++) {
            wt(j, -g, -o, h, l, c * 2);
            j.rotate(Math.PI / 4);
            vt(j, e[0], e[1], c * 1.5);
        }
        ut(j, 0, 0, c * 10);
        vt(j, e[0]);
        ut(j, 0, 0, c * 4);
        vt(j, e[2], e[1], c * 1.5);
        j.globalCompositeOperation = "destination-out";
        ut(j, 0, 0, c * 4);
        vt(j, e[0], e[1], c * 2);
        j.globalCompositeOperation = "source-over";
        ut(j, 0, 0, c * 4);
        vt(j, uj, e[1], c * 2);
        return i;
    }
    const Tb = 18;
    function fb(c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var i = c * 85;
        var j = c * 115;
        var a = c * 6;
        e.width = i;
        e.height = j;
        f.translate(c * -130, c * -60 + a);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
        f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
        f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
        f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
        f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
        f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
        f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
        f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
        f.closePath();
        vt(f, d[0]);
        f.translate(0, -a);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
        f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
        f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
        f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
        f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
        f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
        f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
        f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
        f.closePath();
        vt(f, d[1], d[2], 4);
        var k = c * 155;
        var m = c * 133;
        var h = c * 10;
        var l = c * 3;
        var g = k + c * -3;
        var n = m + c * -5;
        f.save();
        f.translate(k, m);
        f.globalAlpha = 1;
        ut(f, 0, 0, h);
        vt(f, d[3]);
        f.restore();
        f.save();
        f.translate(g, n);
        f.globalAlpha = 1;
        ut(f, 0, 0, l);
        vt(f, d[4]);
        f.restore();
        f.save();
        f.translate(k + c * 27, m);
        f.globalAlpha = 1;
        ut(f, 0, 0, h);
        vt(f, d[3]);
        f.restore();
        f.save();
        f.translate(c * 27 + g, n);
        f.globalAlpha = 1;
        ut(f, 0, 0, l);
        vt(f, d[4]);
        return e;
    }
    const zb = 3;
    function yb(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 238;
        c.height = a * 230;
        d.translate(a * -93, a * -110 + a * 5);
        d.globalAlpha = 0.3;
        ut(d, a * 213.5, a * 256.75, a * 75);
        vt(d, b[5]);
        ut(d, a * 213.5, a * 175.75, a * 25);
        vt(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 156.5, a * 137.75);
        d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.5, a * 178.75);
        d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130.5, a * 124.75);
        d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 183.75);
        d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107.5, a * 213.75);
        d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 212.5, a * 187.75);
        d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 102.5, a * 258.75);
        d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 192.75);
        d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.translate(0, -5);
        d.globalAlpha = 1;
        ut(d, a * 213.5, a * 256.75, a * 75);
        vt(d, b[3]);
        ut(d, a * 213.5, a * 175.75, a * 25);
        vt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 219.5, a * 158.75);
        d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
        d.closePath();
        d.lineWidth = a * 10;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 210.5, a * 160.75);
        d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
        d.closePath();
        d.lineWidth = a * 10;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 219.5, a * 158.75);
        d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
        d.closePath();
        d.fillStyle = b[0];
        d.fill();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 210.5, a * 160.75);
        d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
        d.closePath();
        d.fillStyle = b[0];
        d.fill();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 156.5, a * 137.75);
        d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.5, a * 178.75);
        d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130.5, a * 124.75);
        d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 183.75);
        d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107.5, a * 213.75);
        d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 212.5, a * 187.75);
        d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 102.5, a * 258.75);
        d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 192.75);
        d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 156.5, a * 137.75);
        d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.5, a * 178.75);
        d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130.5, a * 124.75);
        d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 183.75);
        d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107.5, a * 213.75);
        d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 212.5, a * 187.75);
        d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 102.5, a * 258.75);
        d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 192.75);
        d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        ut(d, a * 213.5, a * 256.75, a * 70);
        vt(d, b[0]);
        ut(d, a * 213.5, a * 175.75, a * 20);
        vt(d, b[0]);
        ut(d, a * 222, a * 166, a * 5);
        d.fillStyle = b[2];
        d.fill();
        ut(d, a * 205, a * 166, a * 5);
        d.fillStyle = b[2];
        d.fill();
        ut(d, a * 206.2, a * 167, a * 2.5);
        d.fillStyle = b[4];
        d.fill();
        ut(d, a * 223.2, a * 167, a * 2.5);
        d.fillStyle = b[4];
        d.fill();
        d.save();
        d.translate(a * 213.5, a * 293.75);
        d.rotate(0.76);
        wt(d, a * -22, a * -21, a * 44, a * 42, a * 6);
        d.restore();
        d.fillStyle = b[1];
        d.fill();
        d.save();
        d.translate(a * 212.5, a * 258.25);
        d.rotate(0.8);
        wt(d, a * -15, a * -14.5, a * 30, a * 29, a * 6);
        d.restore();
        d.fillStyle = b[1];
        d.fill();
        return c;
    }
    function wb(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 55;
        var a = b * 55;
        var h = b * 8;
        e.width = g;
        e.height = a;
        f.translate(b * -65, b * -55 + h);
        f.globalAlpha = 1;
        f.beginPath();
        f.moveTo(b * 95, b * 60);
        f.bezierCurveTo(b * 107, b * 62, b * 110, b * 73, b * 107, b * 79);
        f.bezierCurveTo(b * 104, b * 85, b * 85, b * 93, b * 81, b * 88);
        f.bezierCurveTo(b * 74, b * 80, b * 85, b * 60, b * 95, b * 60);
        f.closePath();
        vt(f, d[0], d[1], 3);
        f.globalAlpha = 1;
        f.beginPath();
        f.moveTo(b * 91, b * 70);
        f.bezierCurveTo(b * 91, b * 75, b * 100, b * 76, b * 100, b * 73);
        f.bezierCurveTo(b * 100, b * 69, b * 89, b * 65, b * 91, b * 70);
        f.closePath();
        vt(f, d[2], d[3], 3);
        return e;
    }
    function Pb(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 188;
        c.height = a * 190;
        d.globalAlpha = 0.5;
        d.translate(0, a * 5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
        d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
        d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
        d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
        d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
        d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
        d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
        d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
        d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
        d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
        d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
        d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
        d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
        d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
        d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
        d.closePath();
        vt(d, b[0], b[0], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
        d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
        d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
        d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
        d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
        d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
        d.closePath();
        vt(d, b[0], b[0], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
        d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
        d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
        d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
        d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
        d.closePath();
        vt(d, b[0], b[0], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
        d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
        d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
        d.closePath();
        vt(d, b[0], b[0], a * 2);
        d.globalAlpha = 1;
        d.translate(0, a * -5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
        d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
        d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
        d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
        d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
        d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
        d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
        d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
        d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
        d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
        d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
        d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
        d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
        d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
        d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
        d.closePath();
        vt(d, b[1], b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
        d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
        d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
        d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
        d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
        d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
        d.closePath();
        vt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
        d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
        d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
        d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
        d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
        d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
        d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
        d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
        d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
        d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
        d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
        d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
        d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
        d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
        d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
        d.closePath();
        vt(d, undefined, b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
        d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
        d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
        d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
        vt(d, b[1], b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
        d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
        d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
        vt(d, b[1], b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 57.00567626953125, a * 68.53410339355469);
        d.bezierCurveTo(a * 63.00567626953125, a * 69.53410339355469, a * 69.00567626953125, a * 66.53410339355469, a * 73.00567626953125, a * 60.53410339355469);
        d.bezierCurveTo(a * 66.00567626953125, a * 47.53410339355469, a * 61.00567626953125, a * 42.53410339355469, a * 58.00567626953125, a * 49.53410339355469);
        d.bezierCurveTo(a * 56.00567626953125, a * 59.53410339355469, a * 56.00567626953125, a * 64.53410339355469, a * 57.00567626953125, a * 67.53410339355469);
        d.closePath();
        vt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115.00567626953125, a * 59.715911865234375);
        d.bezierCurveTo(a * 119.00567626953125, a * 48.715911865234375, a * 126.00567626953125, a * 41.715911865234375, a * 129.00567626953125, a * 48.715911865234375);
        d.bezierCurveTo(a * 131.00567626953125, a * 56.715911865234375, a * 133.00567626953125, a * 71.71591186523438, a * 127.00567626953125, a * 68.71591186523438);
        d.bezierCurveTo(a * 120.00567626953125, a * 67.71591186523438, a * 114.00567626953125, a * 59.715911865234375, a * 116.00567626953125, a * 58.715911865234375);
        d.closePath();
        vt(d, b[3]);
        ut(d, a * 77, a * 107, a * 6);
        vt(d, b[2]);
        ut(d, a * 110, a * 107, a * 6);
        vt(d, b[2]);
        ut(d, a * 75, a * 105, a * 3);
        vt(d, b[4]);
        ut(d, a * 108, a * 105, a * 3);
        vt(d, b[4]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 88.00567626953125, a * 141.4431915283203);
        d.bezierCurveTo(a * 93.00567626953125, a * 137.4431915283203, a * 96.00567626953125, a * 138.4431915283203, a * 100.00567626953125, a * 141.4431915283203);
        d.bezierCurveTo(a * 103.00567626953125, a * 143.4431915283203, a * 101.00567626953125, a * 149.4431915283203, a * 95.00567626953125, a * 148.4431915283203);
        d.bezierCurveTo(a * 85.00567626953125, a * 148.4431915283203, a * 86.00567626953125, a * 145.4431915283203, a * 88.00567626953125, a * 142.4431915283203);
        d.closePath();
        vt(d, b[1]);
        return c;
    }
    const Ab = 2;
    const kb = 13;
    function xb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.save();
        e.translate(a * 202.5, a * 147.5);
        wt(e, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
        e.restore();
        vt(e, b[0], b[1], a * 12);
        e.save();
        e.translate(a * 202.5, a * 190.5);
        wt(e, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
        e.restore();
        vt(e, b[2], b[1], a * 12);
        e.save();
        e.save();
        e.translate(a * 202.5, a * 233.5);
        wt(e, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
        e.restore();
        vt(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 202.5, a * 275);
        wt(e, a * 96.5, a * -21, a * -193, a * 42, a * 0);
        e.restore();
        vt(e, b[0], b[1], a * 12);
        e.save();
        e.translate(a * 201, a * 212);
        e.rotate(8.64);
        wt(e, a * -116, a * -22, a * 232, a * 44, a * 10);
        e.restore();
        vt(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 203.5, a * 121.5);
        wt(e, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
        e.restore();
        vt(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 203.5, a * 299);
        wt(e, a * -115.5, a * -20, a * 231, a * 40, a * 10);
        e.restore();
        vt(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 298.5, a * 210);
        wt(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
        e.restore();
        vt(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 108.5, a * 210);
        wt(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
        e.restore();
        vt(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 204, a * 121.5);
        wt(e, a * -92, a * -9.5, a * 184, a * 19, a * 10);
        e.restore();
        vt(e, b[3], b[3], a * 10);
        e.save();
        e.translate(a * 197, a * 299);
        wt(e, a * 85, a * -9, a * -170, a * 18, a * 10);
        e.restore();
        vt(e, b[3], b[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 94, a * 317);
        e.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
        e.closePath();
        vt(e, undefined, b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 279, a * 142);
        e.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
        e.closePath();
        vt(e, undefined, b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 106);
        e.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
        e.closePath();
        vt(e, undefined, b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 281, a * 282);
        e.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
        e.closePath();
        vt(e, undefined, b[1], a * 12);
        if (c == 0) {
            e.scale(2, 2);
            e.translate(a * -7, a * 55);
            e.rotate(-0.5);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 60, a * 47);
            e.bezierCurveTo(a * 81, a * 46, a * 85, a * 47, a * 83, a * 63);
            e.bezierCurveTo(a * 83, a * 72, a * 83, a * 75, a * 72, a * 73);
            e.bezierCurveTo(a * 68, a * 80, a * 69, a * 82, a * 66, a * 73);
            e.bezierCurveTo(a * 62, a * 81, a * 61, a * 82, a * 59, a * 73);
            e.bezierCurveTo(a * 54, a * 81, a * 55, a * 81, a * 52, a * 74);
            e.bezierCurveTo(a * 38, a * 76, a * 41, a * 74, a * 40, a * 66);
            e.bezierCurveTo(a * 38, a * 45, a * 39, a * 49, a * 59, a * 47);
            e.closePath();
            vt(e, b[4], b[4], a * 5);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 68, a * 54);
            e.bezierCurveTo(a * 75, a * 54, a * 77, a * 62, a * 71, a * 64);
            e.bezierCurveTo(a * 62, a * 65, a * 63, a * 54, a * 68, a * 54);
            e.closePath();
            vt(e, b[3]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 50, a * 55);
            e.bezierCurveTo(a * 57, a * 55, a * 58, a * 65, a * 52, a * 65);
            e.bezierCurveTo(a * 44, a * 66, a * 44, a * 54, a * 50, a * 55);
            e.closePath();
            vt(e, b[3]);
        } else if (c == 1) {
            e.scale(0.6, 0.6);
            e.translate(a * 185, a * 165);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 108, a * 56);
            e.bezierCurveTo(a * 136, a * 58, a * 203, a * 69, a * 234, a * 75);
            e.bezierCurveTo(a * 246, a * 77, a * 247, a * 78, a * 245, a * 90);
            e.bezierCurveTo(a * 238, a * 143, a * 228, a * 197, a * 214, a * 259);
            e.bezierCurveTo(a * 212, a * 267, a * 209, a * 270, a * 189, a * 268);
            e.bezierCurveTo(a * 142, a * 264, a * 106, a * 260, a * 75, a * 253);
            e.bezierCurveTo(a * 60, a * 250, a * 64, a * 250, a * 66, a * 221);
            e.bezierCurveTo(a * 71, a * 168, a * 87, a * 95, a * 98, a * 67);
            e.bezierCurveTo(a * 101, a * 57, a * 103, a * 56, a * 106, a * 56);
            e.closePath();
            vt(e, b[4], b[4], a * 20);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 112, a * 72);
            e.bezierCurveTo(a * 132, a * 73, a * 227, a * 85, a * 226, a * 91);
            e.bezierCurveTo(a * 231, a * 89, a * 217, a * 196, a * 200, a * 250);
            e.bezierCurveTo(a * 196, a * 254, a * 175, a * 249, a * 166, a * 249);
            e.bezierCurveTo(a * 91, a * 241, a * 82, a * 236, a * 83, a * 232);
            e.bezierCurveTo(a * 90, a * 144, a * 108, a * 71, a * 111, a * 72);
            e.closePath();
            vt(e, undefined, b[0], a * 13);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 132, a * 117);
            e.bezierCurveTo(a * 171, a * 86, a * 191, a * 101, a * 188, a * 134);
            e.bezierCurveTo(a * 185, a * 154, a * 170, a * 158, a * 153, a * 158);
            e.bezierCurveTo(a * 143, a * 172, a * 146, a * 180, a * 147, a * 193);
            vt(e, Da, b[0], a * 20);
            ut(e, a * 142, a * 221, a * 16.1245154965971);
            vt(e, b[0]);
        }
        return d;
    }
    const Jb = 4;
    function Mb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 101, a * 255);
        e.bezierCurveTo(a * 113, a * 243, a * 179, a * 210, a * 219, a * 196);
        e.bezierCurveTo(a * 252, a * 203, a * 288, a * 215, a * 318, a * 233);
        e.bezierCurveTo(a * 304, a * 254, a * 258, a * 273, a * 215, a * 296);
        e.bezierCurveTo(a * 161, a * 287, a * 119, a * 270, a * 102, a * 257);
        e.closePath();
        vt(e, c[0], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 99, a * 258);
        e.bezierCurveTo(a * 99, a * 272.5, a * 99, a * 272.5, a * 99, a * 287);
        e.bezierCurveTo(a * 166, a * 319, a * 193, a * 320, a * 212, a * 324);
        e.bezierCurveTo(a * 292, a * 286, a * 312, a * 271, a * 319, a * 263);
        e.bezierCurveTo(a * 320, a * 249, a * 320, a * 241, a * 318, a * 234);
        e.bezierCurveTo(a * 300, a * 254, a * 254, a * 277, a * 216, a * 294);
        e.bezierCurveTo(a * 190, a * 296, a * 135, a * 276, a * 102, a * 258);
        e.closePath();
        vt(e, c[2], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212, a * 323);
        e.bezierCurveTo(a * 211.5, a * 310.5, a * 211.5, a * 310.5, a * 211, a * 298);
        e.closePath();
        vt(e, vj, c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212, a * 210);
        e.bezierCurveTo(a * 286, a * 210, a * 331, a * 254, a * 212, a * 276);
        e.bezierCurveTo(a * 108, a * 276, a * 112, a * 222, a * 213, a * 208);
        e.closePath();
        vt(e, c[3], c[4], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 200);
        e.bezierCurveTo(a * 126, a * 216, a * 177, a * 232, a * 213, a * 237);
        e.bezierCurveTo(a * 266, a * 218, a * 288, a * 209, a * 318, a * 190);
        e.bezierCurveTo(a * 269, a * 164, a * 239, a * 158, a * 214, a * 153);
        e.bezierCurveTo(a * 148, a * 172, a * 131, a * 182, a * 98, a * 200);
        e.closePath();
        vt(e, c[0], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 97, a * 204);
        e.bezierCurveTo(a * 97, a * 215.5, a * 97, a * 215.5, a * 97, a * 227);
        e.bezierCurveTo(a * 148, a * 250, a * 179, a * 256, a * 212, a * 262);
        e.bezierCurveTo(a * 268, a * 244, a * 281, a * 233, a * 318, a * 214);
        e.bezierCurveTo(a * 318, a * 203, a * 318, a * 203, a * 318, a * 192);
        e.bezierCurveTo(a * 250, a * 225, a * 236, a * 231, a * 214, a * 239);
        e.bezierCurveTo(a * 158, a * 228, a * 126, a * 215, a * 99, a * 201);
        e.closePath();
        vt(e, c[2], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212, a * 260);
        e.bezierCurveTo(a * 212, a * 251.5, a * 212, a * 251.5, a * 212, a * 243);
        e.closePath();
        vt(e, Oo, c[1], a * 14);
        ut(e, a * 161, a * 201, a * 13);
        vt(e, c[5]);
        ut(e, a * 216, a * 205, a * 8.06225774829855);
        vt(e, c[5]);
        ut(e, a * 216, a * 175, a * 6.708203932499369);
        vt(e, c[5]);
        ut(e, a * 271, a * 191, a * 5.0990195135927845);
        vt(e, c[5]);
        ut(e, a * 206, a * 180, a * 11.180339887498949);
        vt(e, c[5]);
        return d;
    }
    function Bb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.save();
        e.translate(a * 85, a * 237);
        e.rotate(1.5707963267948966);
        zt(e, 6, a * 54.585977194239184, a * 1);
        e.restore();
        vt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 178, a * 238);
        e.rotate(1.5707963267948966);
        zt(e, 6, a * 52.53573932334064, a * 1);
        e.restore();
        vt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 270, a * 239);
        e.rotate(1.5707963267948966);
        zt(e, 6, a * 53.58058329516393, a * 1);
        e.restore();
        vt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 222, a * 312);
        e.rotate(1.5707963267948966);
        zt(e, 6, a * 52.53573932334064, a * 1);
        e.restore();
        vt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 317, a * 159);
        e.rotate(1.5707963267948966);
        zt(e, 6, a * 57.63465889766331, a * 1);
        e.restore();
        vt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 223.5, a * 139.0625);
        e.rotate(1.5707963267948966);
        zt(e, 6, a * 51.66236541235796, a * 1);
        e.restore();
        vt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 132.5, a * 137.0625);
        e.rotate(1.5707963267948966);
        zt(e, 6, a * 52.009614495783374, a * 1);
        e.restore();
        vt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 178.5, a * 58.0625);
        e.rotate(1.5707963267948966);
        zt(e, 6, a * 53.16013544000805, a * 1);
        e.restore();
        vt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 177.5, a * 216.0625);
        e.rotate(1.5707963267948966);
        zt(e, 6, a * 50, a * 1);
        e.restore();
        vt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 84.5, a * 215.0625);
        e.rotate(1.5707963267948966);
        zt(e, 6, a * 54, a * 1);
        e.restore();
        vt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 319.5, a * 138.0625);
        e.rotate(1.5707963267948966);
        zt(e, 6, a * 55.08175741568164, a * 1);
        e.restore();
        vt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 269.5, a * 216.0625);
        e.rotate(1.5707963267948966);
        zt(e, 6, a * 54.589376255824725, a * 1);
        e.restore();
        vt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 221.5, a * 293.0625);
        e.rotate(0.5235987755982988);
        zt(e, 6, a * 49.49747468305833, a * 1);
        e.restore();
        vt(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 221.5, a * 342.0625);
        e.bezierCurveTo(a * 221.5, a * 350.5625, a * 221.5, a * 350.5625, a * 221.5, a * 359.0625);
        e.closePath();
        vt(e, dg, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 270.0625);
        e.bezierCurveTo(a * 84.5, a * 277.0625, a * 84.5, a * 277.0625, a * 84.5, a * 284.0625);
        e.closePath();
        vt(e, undefined, c[2], a * 12);
        e.save();
        e.translate(a * 84.5, a * 215.0625);
        e.rotate(0.5235987755982988);
        zt(e, 6, a * 30, a * 15);
        e.restore();
        vt(e, c[3]);
        e.save();
        e.translate(a * 177.5, a * 215.0625);
        e.rotate(0.5235987755982988);
        zt(e, 6, a * 30, a * 15);
        e.restore();
        vt(e, c[3]);
        e.save();
        e.translate(a * 222.5, a * 294.0625);
        e.rotate(0.5235987755982988);
        zt(e, 6, a * 30, a * 15);
        e.restore();
        vt(e, c[3]);
        e.save();
        e.translate(a * 270.5, a * 216.0625);
        e.rotate(0.5235987755982988);
        zt(e, 6, a * 30, a * 15);
        e.restore();
        vt(e, c[3]);
        e.save();
        e.translate(a * 320.5, a * 134.0625);
        e.rotate(0.5235987755982988);
        zt(e, 6, a * 30, a * 15);
        e.restore();
        vt(e, c[3]);
        e.save();
        e.translate(a * 224.5, a * 138.0625);
        e.rotate(0.5235987755982988);
        zt(e, 6, a * 30, a * 15);
        e.restore();
        vt(e, c[3]);
        e.save();
        e.translate(a * 133.5, a * 137.0625);
        e.rotate(0.5235987755982988);
        zt(e, 6, a * 30, a * 15);
        e.restore();
        vt(e, c[3]);
        e.save();
        e.translate(a * 178.5, a * 56.0625);
        e.rotate(0.5235987755982988);
        zt(e, 6, a * 30, a * 15);
        e.restore();
        vt(e, c[3]);
        return d;
    }
    function Db(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 52;
        d.height = a * 65;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9.833328247070312, a * 12.078125);
        e.bezierCurveTo(a * 15.333328247070312, a * 28.078125, a * 15.333328247070312, a * 28.078125, a * 20.833328247070312, a * 44.078125);
        e.closePath();
        vt(e, undefined, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 7.8333282470703125, a * 20.078125);
        e.bezierCurveTo(a * 16.833328247070312, a * 32.578125, a * 16.833328247070312, a * 32.578125, a * 25.833328247070312, a * 45.078125);
        e.closePath();
        vt(e, undefined, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.833328247070312, a * 26.078125);
        e.bezierCurveTo(a * 25.833328247070312, a * 11.078125, a * 16.833328247070312, a * 8.078125, a * 14.833328247070312, a * 7.078125);
        e.bezierCurveTo(a * 11.833328247070312, a * 17.078125, a * 13.833328247070312, a * 22.078125, a * 23.833328247070312, a * 27.078125);
        e.closePath();
        vt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35.83332824707031, a * 8.078125);
        e.bezierCurveTo(a * 34.83332824707031, a * 27.078125, a * 28.833328247070312, a * 27.078125, a * 23.833328247070312, a * 28.078125);
        e.bezierCurveTo(a * 21.833328247070312, a * 14.078125, a * 26.833328247070312, a * 11.078125, a * 35.83332824707031, a * 8.078125);
        e.closePath();
        vt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25.833328247070312, a * 39.078125);
        e.bezierCurveTo(a * 20.833328247070312, a * 29.078125, a * 14.833328247070312, a * 27.078125, a * 5.8333282470703125, a * 29.078125);
        e.bezierCurveTo(a * 9.833328247070312, a * 39.078125, a * 16.833328247070312, a * 42.078125, a * 25.833328247070312, a * 40.078125);
        e.closePath();
        vt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.83332824707031, a * 23.078125);
        e.bezierCurveTo(a * 35.83332824707031, a * 35.078125, a * 31.833328247070312, a * 37.078125, a * 25.833328247070312, a * 36.078125);
        e.bezierCurveTo(a * 25.833328247070312, a * 24.078125, a * 33.83332824707031, a * 21.078125, a * 42.83332824707031, a * 23.078125);
        e.closePath();
        vt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.833328247070312, a * 24.078125);
        e.bezierCurveTo(a * 20.833328247070312, a * 34.078125, a * 23.833328247070312, a * 40.078125, a * 27.833328247070312, a * 43.078125);
        e.bezierCurveTo(a * 37.33332824707031, a * 28.078125, a * 37.33332824707031, a * 28.078125, a * 46.83332824707031, a * 13.078125);
        vt(e, Li, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 38.83332824707031, a * 14.078125);
        e.bezierCurveTo(a * 34.83332824707031, a * 24.078125, a * 34.83332824707031, a * 24.078125, a * 30.833328247070312, a * 34.078125);
        vt(e, sl, c[1], a * 2);
        return d;
    }
    const Eb = 1;
    const Ib = 4;
    const Sb = 10;
    function Qb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 173;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 85.25, a * 82.953125);
        e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
        e.closePath();
        vt(e, uj, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111.25, a * 8.953125);
        e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
        e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
        e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111.25, a * 8.953125);
        e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
        e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
        e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
        e.closePath();
        vt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 85.25, a * 82.953125);
        e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
        e.closePath();
        vt(e, undefined, c[6], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.25, a * 84.953125);
        e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
        e.closePath();
        vt(e, Og, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 160.25, a * 114.953125);
        e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
        e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
        e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 160.25, a * 114.953125);
        e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
        e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
        e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
        e.closePath();
        vt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.25, a * 84.953125);
        e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
        e.closePath();
        vt(e, undefined, c[6], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 83.25, a * 83.953125);
        e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
        e.closePath();
        vt(e, Qh, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 13.25, a * 53.953125);
        e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
        e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
        e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 13.25, a * 53.953125);
        e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
        e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
        e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
        e.closePath();
        vt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 83.25, a * 83.953125);
        e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
        e.closePath();
        vt(e, undefined, c[6], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.25, a * 86.953125);
        e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
        e.closePath();
        vt(e, ns, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.25, a * 159.953125);
        e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
        e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
        e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.25, a * 159.953125);
        e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
        e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
        e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
        e.closePath();
        vt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.25, a * 86.953125);
        e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
        e.closePath();
        vt(e, undefined, c[6], a * 4);
        return d;
    }
    function _b(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 173;
        e.translate(a * 5, a * 5);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.32);
        zt(e, 7, a * 42.15447781671598, a * 10);
        e.restore();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.32);
        zt(e, 7, a * 42.15447781671598, a * 10);
        e.restore();
        vt(e, c[1], c[2], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.28);
        zt(e, 7, a * 30.463092423455635, a * 10);
        e.restore();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.28);
        zt(e, 7, a * 30.463092423455635, a * 10);
        e.restore();
        vt(e, c[3], c[4], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        ut(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        ut(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
        vt(e, c[5], c[6], a * 4);
        return d;
    }
    function Fb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 173;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        zt(e, 7, a * 9.848857801796104, a * 5);
        e.restore();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        zt(e, 7, a * 9.848857801796104, a * 5);
        e.restore();
        vt(e, c[8], c[9], a * 4);
        return d;
    }
    const Rb = 17;
    function jb(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 75;
        var a = b * 55;
        e.width = g;
        e.height = a;
        f.translate(b * -30, b * -40);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 67, b * 56, b * 72, b * 71, b * 72, b * 71);
        f.bezierCurveTo(b * 72, b * 71, b * 84, b * 70, b * 75, b * 82);
        f.bezierCurveTo(b * 70, b * 88, b * 61, b * 89, b * 58, b * 89);
        f.bezierCurveTo(b * 55, b * 89, b * 40, b * 89, b * 46, b * 77);
        f.bezierCurveTo(b * 46, b * 77, b * 43, b * 63, b * 43, b * 63);
        f.bezierCurveTo(b * 35, b * 61, b * 35, b * 53, b * 42, b * 47);
        f.bezierCurveTo(b * 48, b * 42, b * 62, b * 41, b * 66, b * 43);
        f.bezierCurveTo(b * 70, b * 45, b * 72, b * 48, b * 67, b * 56);
        f.closePath();
        vt(f, d[0]);
        f.beginPath();
        f.bezierCurveTo(b * 68, b * 61, b * 72, b * 76, b * 72, b * 76);
        f.bezierCurveTo(b * 65, b * 85, b * 61, b * 85, b * 49, b * 83);
        f.bezierCurveTo(b * 49, b * 83, b * 44, b * 63, b * 44, b * 63);
        f.bezierCurveTo(b * 54, b * 63, b * 60, b * 63, b * 67, b * 55);
        f.closePath();
        vt(f, d[1]);
        f.beginPath();
        f.moveTo(b * 69, b * 65);
        f.bezierCurveTo(b * 70, b * 61, b * 81, b * 66, b * 86, b * 66);
        f.bezierCurveTo(b * 90, b * 66, b * 97, b * 63, b * 97, b * 56);
        f.bezierCurveTo(b * 97, b * 50, b * 93, b * 47, b * 88, b * 44);
        vt(f, gn, d[1], 2);
        f.beginPath();
        f.moveTo(b * 50, b * 48);
        f.bezierCurveTo(b * 43, b * 52, b * 50, b * 54, b * 51, b * 54);
        f.bezierCurveTo(b * 54, b * 54, b * 59, b * 52, b * 59, b * 49);
        f.bezierCurveTo(b * 59, b * 48, b * 55, b * 46, b * 50, b * 48);
        vt(f, d[2]);
        return e;
    }
    function Gb(f, e, i, j, k) {
        var n = document.createElement("canvas");
        var a = n.getContext("2d");
        var o = f * 70;
        var q = f * 70;
        var h = f * 10;
        var l = f * 5;
        n.width = o;
        n.height = q + l;
        for (var g = 0; e.length > g; g++) {
            var r = e[g];
            a.globalAlpha = r.a;
            var s = r.f(i, false, r.c);
            a.save();
            a.translate(o / 2 + r.x * f, q / 2 + r.y * f);
            a.rotate(r.r);
            a.drawImage(s, -s.width / 2, -s.height / 2);
            a.restore();
        }
        var t = [];
        for (g = 0; g < j.length; g++) {
            var m = document.createElement("canvas");
            var v = m.getContext("2d");
            m.width = o;
            m.height = q + l;
            v.globalAlpha = k / 2;
            if (g == 2) {
                wt(v, 0, l, o, q, h);
            } else {
                wt(v, 0, 0, o, q + l, h);
            }
            vt(v, "#081a19");
            v.globalAlpha = k;
            wt(v, 0, g == 2 ? l : 0, o, q, h);
            vt(v, j[g]);
            v.globalAlpha = 1;
            if (g == 2) {
                v.drawImage(n, 0, l);
            } else {
                v.drawImage(n, 0, 0);
            }
            t.push(Ia(m));
        }
        return t;
    }
    function Wb(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = c * 195;
        var a = c * 190;
        var m = k / 2;
        var n = a / 2;
        i.width = k;
        i.height = a;
        var h = c * 10;
        var l = c * 35;
        var g = c * 150;
        var o = l / 2;
        var b = g / 2;
        var d = c * 4;
        j.translate(m - c * 5, n - c * 5);
        j.rotate(-Math.PI / 1.25);
        j.globalAlpha = 1;
        wt(j, -o, -b, l, g, h);
        vt(j, f[0], f[1], d);
        j.translate(0, 0);
        j.rotate(Math.PI / 3);
        j.globalAlpha = 1;
        wt(j, -o, -b, l, g, h);
        vt(j, f[0], f[1], d);
        j.translate(0, 5);
        wt(j, -o / 2, -b / 2, l / 2, g / 3, h - 2);
        vt(j, f[1]);
        return i;
    }
    const Lb = 18;
    const Ob = 5;
    function Nb(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = c * 193;
        var a = c * 198;
        var m = c * 140;
        var n = c * 90;
        i.width = k;
        i.height = a;
        var h = c * 10;
        var l = c * 25;
        var g = c * 180;
        var o = l / 2;
        var b = g / 2;
        var d = c * 4;
        j.translate(c * -25, c * 1);
        j.translate(m, n);
        j.rotate(-Math.PI / 5);
        wt(j, -o, -b, l, g, h);
        vt(j, f[0], f[1], d);
        j.translate(c * -30, c * -25);
        j.rotate(Math.PI / 3);
        wt(j, -o, -b, l, g, h);
        vt(j, f[0], f[1], d);
        j.translate(c * 35, c * 30);
        j.rotate(Math.PI / 3);
        wt(j, -o, -b, l, g, h);
        vt(j, f[0], f[1], d);
        return i;
    }
    const Hb = 13;
    function qb(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = c * 135;
        var a = c * 190;
        var m = k / 2;
        var n = a / 2;
        i.width = k;
        i.height = a;
        var h = c * 10;
        var l = c * 25;
        var g = c * 180;
        var o = l / 2;
        var b = g / 2;
        var d = c * 4;
        j.translate(m, n);
        j.rotate(-Math.PI / 5);
        j.globalAlpha = 1;
        wt(j, -o, -b, l, g, h);
        vt(j, f[0], f[1], d);
        j.translate(0, 0);
        j.rotate(Math.PI / 5);
        j.globalAlpha = 1;
        wt(j, -o, -b, l, g, h);
        vt(j, f[0], f[1], d);
        return i;
    }
    function Ub(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 155;
        d.height = a * 127;
        e.globalAlpha = 0.5;
        e.translate(0, a * 8);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 68);
        e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
        e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
        e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
        e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
        e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -8);
        e.translate(a * 7, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        vt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 41);
        e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
        e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
        e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
        e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
        e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
        e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
        e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        vt(e, undefined, c[2], a * 4);
        ut(e, a * 18, a * 38, a * 14.866068747318506);
        vt(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 30);
        e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
        e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
        vt(e, c[1], c[2], a * 4);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 74);
        e.bezierCurveTo(a * 38, a * 77.5, a * 38, a * 77.5, a * 49, a * 81);
        e.bezierCurveTo(a * 54.5, a * 75.5, a * 54.5, a * 75.5, a * 60, a * 70);
        e.bezierCurveTo(a * 64, a * 72, a * 64, a * 72, a * 68, a * 74);
        e.bezierCurveTo(a * 80.5, a * 67.5, a * 80.5, a * 67.5, a * 93, a * 61);
        e.bezierCurveTo(a * 104.5, a * 68, a * 104.5, a * 68, a * 116, a * 75);
        e.bezierCurveTo(a * 120.5, a * 72.5, a * 120.5, a * 72.5, a * 125, a * 70);
        e.bezierCurveTo(a * 129, a * 75, a * 129, a * 75, a * 133, a * 80);
        e.bezierCurveTo(a * 145.5, a * 76.5, a * 145.5, a * 76.5, a * 158, a * 73);
        e.bezierCurveTo(a * 158, a * 87, a * 158, a * 93, a * 155, a * 95);
        e.bezierCurveTo(a * 152.5, a * 96, a * 152.5, a * 96, a * 150, a * 97);
        e.bezierCurveTo(a * 121, a * 85, a * 108, a * 86, a * 93, a * 85);
        e.bezierCurveTo(a * 64, a * 85, a * 52, a * 95, a * 38, a * 99);
        e.bezierCurveTo(a * 36, a * 98.5, a * 36, a * 98.5, a * 34, a * 98);
        e.bezierCurveTo(a * 25, a * 98, a * 27, a * 91, a * 27, a * 76);
        e.closePath();
        vt(e, c[6], c[7], a * 6);
        return d;
    }
    function Yb(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 370;
        var a = b * 370;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        var h = b * 180;
        f.globalAlpha = 0.2;
        ut(f, i, j, h);
        vt(f, d[0]);
        return e;
    }
    function Kb(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 145;
        var a = b * 145;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        var h = b * 70;
        f.translate(i, j);
        f.globalAlpha = 0.4;
        ut(f, 0, 0, h);
        vt(f, d[0]);
        h = b * 50;
        f.translate(0, 0);
        f.globalAlpha = 0.8;
        ut(f, 0, 0, h);
        vt(f, d[0]);
        h = b * 35;
        f.translate(0, 0);
        f.globalAlpha = 0.8;
        ut(f, 0, 0, h);
        vt(f, d[1]);
        h = b * 20;
        f.translate(0, 0);
        f.globalAlpha = 0.8;
        ut(f, 0, 0, h);
        vt(f, d[2]);
        return e;
    }
    function Vb(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 205;
        var a = b * 205;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        var h = b * 100;
        f.translate(i, j);
        f.globalAlpha = 1;
        ut(f, 0, 0, h);
        vt(f, d[0]);
        return e;
    }
    const Xb = 16;
    function Zb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 155;
        d.height = a * 127;
        e.globalAlpha = 0.5;
        e.translate(0, a * 8);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 68);
        e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
        e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
        e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
        e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
        e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -8);
        e.translate(a * 7, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        vt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 41);
        e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
        e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
        e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
        e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
        e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
        e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
        e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        vt(e, undefined, c[2], a * 4);
        ut(e, a * 18, a * 38, a * 14.866068747318506);
        vt(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 30);
        e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
        e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
        vt(e, c[1], c[2], a * 4);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 68);
        e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
        e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
        e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
        e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
        e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
        e.closePath();
        vt(e, c[4], c[5], a * 4);
        return d;
    }
    function $b(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 220;
        var g = b * 220;
        var a = b * 32;
        var h = b * 4;
        d.width = f;
        d.height = g;
        e.translate(f / 2, g / 2 + b * 10);
        e.globalAlpha = 0.5;
        ut(e, 0, 0, a);
        vt(e, c[0], c[0]);
        e.translate(0, b * -8);
        e.globalAlpha = 1;
        ut(e, 0, 0, a);
        vt(e, c[1], c[2], h);
        return d;
    }
    function ed(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 220;
        var g = b * 220;
        var a = b * 16;
        d.width = f;
        d.height = g;
        e.translate(f / 2, g / 2);
        e.globalAlpha = 0.5;
        ut(e, 0, 0, a);
        vt(e, c[0]);
        e.globalAlpha = 1;
        return d;
    }
    function id(c, e, f, i) {
        var j = document.createElement("canvas");
        var k = j.getContext("2d");
        var a = c * 210;
        var m = c * 205;
        var n = c * 30;
        var h = c * 20;
        var l = c * 200;
        var g = c * 180;
        var o = l / 2;
        var b = g / 2;
        j.width = a;
        j.height = m;
        j.width = c * 419;
        j.height = c * 412;
        if (i == 1) {
            k.save();
            k.translate(c * 10, c * 0);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 117.99996948242188, c * 216.40621948242188);
            k.bezierCurveTo(c * 86.99996948242188, c * 221.40621948242188, c * 74.99996948242188, c * 217.40621948242188, c * 60.999969482421875, c * 205.40621948242188);
            vt(k, undefined, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 114.99996948242188, c * 227.40621948242188);
            k.bezierCurveTo(c * 90.99996948242188, c * 233.40621948242188, c * 66.99996948242188, c * 228.40621948242188, c * 43.999969482421875, c * 225.40621948242188);
            vt(k, undefined, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 110.99996948242188, c * 236.40621948242188);
            k.bezierCurveTo(c * 94.99996948242188, c * 244.40621948242188, c * 79.99996948242188, c * 249.40621948242188, c * 60.999969482421875, c * 249.40621948242188);
            vt(k, Ga, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 111.99996948242188, c * 206.29513549804688);
            k.bezierCurveTo(c * 91.99996948242188, c * 206.29513549804688, c * 87.99996948242188, c * 201.29513549804688, c * 79.99996948242188, c * 192.29513549804688);
            vt(k, undefined, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 109.99996948242188, c * 249.18402099609375);
            k.bezierCurveTo(c * 97.99996948242188, c * 263.18402099609375, c * 85.99996948242188, c * 271.18402099609375, c * 65.99996948242188, c * 277.18402099609375);
            vt(k, undefined, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 105.99996948242188, c * 192.18402099609375);
            k.bezierCurveTo(c * 99.49996948242188, c * 197.68402099609375, c * 99.49996948242188, c * 197.68402099609375, c * 92.99996948242188, c * 203.18402099609375);
            k.bezierCurveTo(c * 95.99996948242188, c * 213.18402099609375, c * 95.99996948242188, c * 215.18402099609375, c * 89.99996948242188, c * 219.18402099609375);
            k.bezierCurveTo(c * 91.99996948242188, c * 223.18402099609375, c * 91.99996948242188, c * 226.18402099609375, c * 87.99996948242188, c * 230.18402099609375);
            k.bezierCurveTo(c * 89.99996948242188, c * 234.18402099609375, c * 91.99996948242188, c * 237.18402099609375, c * 90.99996948242188, c * 244.18402099609375);
            k.bezierCurveTo(c * 96.99996948242188, c * 252.18402099609375, c * 96.99996948242188, c * 256.18402099609375, c * 95.99996948242188, c * 262.18402099609375);
            k.bezierCurveTo(c * 106.49996948242188, c * 264.18402099609375, c * 106.49996948242188, c * 264.18402099609375, c * 116.99996948242188, c * 266.18402099609375);
            vt(k, undefined, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 104.99996948242188, c * 183.29513549804688);
            k.bezierCurveTo(c * 99.99996948242188, c * 193.29513549804688, c * 93.99996948242188, c * 195.29513549804688, c * 89.99996948242188, c * 201.29513549804688);
            k.bezierCurveTo(c * 86.99996948242188, c * 212.29513549804688, c * 85.99996948242188, c * 214.29513549804688, c * 81.99996948242188, c * 215.29513549804688);
            k.bezierCurveTo(c * 83.99996948242188, c * 223.29513549804688, c * 83.99996948242188, c * 227.29513549804688, c * 79.99996948242188, c * 230.29513549804688);
            k.bezierCurveTo(c * 83.99996948242188, c * 235.29513549804688, c * 84.99996948242188, c * 240.29513549804688, c * 79.99996948242188, c * 246.29513549804688);
            k.bezierCurveTo(c * 86.99996948242188, c * 251.29513549804688, c * 91.99996948242188, c * 256.2951354980469, c * 89.99996948242188, c * 266.2951354980469);
            k.bezierCurveTo(c * 102.99996948242188, c * 269.2951354980469, c * 102.99996948242188, c * 269.2951354980469, c * 115.99996948242188, c * 272.2951354980469);
            vt(k, undefined, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 107.99996948242188, c * 177.85067749023438);
            k.bezierCurveTo(c * 95.99996948242188, c * 187.35067749023438, c * 95.99996948242188, c * 187.35067749023438, c * 83.99996948242188, c * 196.85067749023438);
            k.bezierCurveTo(c * 82.99996948242188, c * 203.85067749023438, c * 80.99996948242188, c * 209.85067749023438, c * 72.99996948242188, c * 210.85067749023438);
            k.bezierCurveTo(c * 73.99996948242188, c * 220.85067749023438, c * 73.99996948242188, c * 221.85067749023438, c * 66.99996948242188, c * 227.85067749023438);
            k.bezierCurveTo(c * 71.99996948242188, c * 235.85067749023438, c * 73.99996948242188, c * 239.85067749023438, c * 71.99996948242188, c * 247.85067749023438);
            k.bezierCurveTo(c * 80.99996948242188, c * 257.8506774902344, c * 81.99996948242188, c * 263.8506774902344, c * 77.99996948242188, c * 271.8506774902344);
            k.bezierCurveTo(c * 95.49996948242188, c * 272.8506774902344, c * 95.49996948242188, c * 272.8506774902344, c * 112.99996948242188, c * 273.8506774902344);
            vt(k, undefined, e[4], c * 3);
            k.restore();
        } else if (i == 2) {
            k.save();
            k.translate(c * 130, c * 35);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 170.99996948242188, c * 133.85067749023438);
            k.bezierCurveTo(c * 195.99996948242188, c * 129.85067749023438, c * 196.99996948242188, c * 111.85067749023438, c * 200.99996948242188, c * 88.85067749023438);
            vt(k, undefined, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 169.99996948242188, c * 143.85067749023438);
            k.bezierCurveTo(c * 189.99996948242188, c * 145.85067749023438, c * 207.99996948242188, c * 126.85067749023438, c * 222.99996948242188, c * 100.85067749023438);
            vt(k, undefined, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 170.99996948242188, c * 157.85067749023438);
            k.bezierCurveTo(c * 193.99996948242188, c * 160.85067749023438, c * 210.99996948242188, c * 151.85067749023438, c * 232.99996948242188, c * 139.85067749023438);
            vt(k, qn, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 169.99996948242188, c * 168.85067749023438);
            k.bezierCurveTo(c * 192.99996948242188, c * 175.85067749023438, c * 203.99996948242188, c * 177.85067749023438, c * 245.99996948242188, c * 168.85067749023438);
            vt(k, undefined, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 167.99996948242188, c * 168.85067749023438);
            k.bezierCurveTo(c * 183.99996948242188, c * 189.85067749023438, c * 191.99996948242188, c * 193.85067749023438, c * 220.99996948242188, c * 196.85067749023438);
            vt(k, tj, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 176.99996948242188, c * 117.85067749023438);
            k.bezierCurveTo(c * 181.99996948242188, c * 120.85067749023438, c * 181.99996948242188, c * 120.85067749023438, c * 186.99996948242188, c * 123.85067749023438);
            k.bezierCurveTo(c * 183.99996948242188, c * 137.85067749023438, c * 185.99996948242188, c * 136.85067749023438, c * 190.99996948242188, c * 136.85067749023438);
            k.bezierCurveTo(c * 186.99996948242188, c * 147.85067749023438, c * 189.99996948242188, c * 152.85067749023438, c * 193.99996948242188, c * 155.85067749023438);
            k.bezierCurveTo(c * 187.99996948242188, c * 165.85067749023438, c * 190.99996948242188, c * 169.85067749023438, c * 190.99996948242188, c * 172.85067749023438);
            k.bezierCurveTo(c * 186.99996948242188, c * 183.85067749023438, c * 186.99996948242188, c * 185.85067749023438, c * 189.99996948242188, c * 188.85067749023438);
            k.bezierCurveTo(c * 182.49996948242188, c * 195.35067749023438, c * 182.49996948242188, c * 195.35067749023438, c * 174.99996948242188, c * 201.85067749023438);
            vt(k, undefined, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 176.99996948242188, c * 112.18402099609375);
            k.bezierCurveTo(c * 183.99996948242188, c * 119.18402099609375, c * 186.99996948242188, c * 117.18402099609375, c * 192.99996948242188, c * 116.18402099609375);
            k.bezierCurveTo(c * 191.99996948242188, c * 126.18402099609375, c * 193.99996948242188, c * 130.18402099609375, c * 199.99996948242188, c * 130.18402099609375);
            k.bezierCurveTo(c * 194.99996948242188, c * 145.18402099609375, c * 197.99996948242188, c * 147.18402099609375, c * 201.99996948242188, c * 153.18402099609375);
            k.bezierCurveTo(c * 196.99996948242188, c * 164.18402099609375, c * 197.99996948242188, c * 169.18402099609375, c * 201.99996948242188, c * 174.18402099609375);
            k.bezierCurveTo(c * 194.99996948242188, c * 184.18402099609375, c * 196.99996948242188, c * 187.18402099609375, c * 200.99996948242188, c * 193.18402099609375);
            k.bezierCurveTo(c * 185.99996948242188, c * 195.18402099609375, c * 181.99996948242188, c * 201.18402099609375, c * 174.99996948242188, c * 210.18402099609375);
            vt(k, undefined, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 176.99996948242188, c * 101.29513549804688);
            k.bezierCurveTo(c * 181.99996948242188, c * 108.29513549804688, c * 189.99996948242188, c * 110.29513549804688, c * 195.99996948242188, c * 107.29513549804688);
            k.bezierCurveTo(c * 197.99996948242188, c * 121.29513549804688, c * 200.99996948242188, c * 122.29513549804688, c * 206.99996948242188, c * 122.29513549804688);
            k.bezierCurveTo(c * 201.99996948242188, c * 138.29513549804688, c * 204.99996948242188, c * 142.29513549804688, c * 211.99996948242188, c * 148.29513549804688);
            k.bezierCurveTo(c * 201.99996948242188, c * 156.29513549804688, c * 205.99996948242188, c * 167.29513549804688, c * 213.99996948242188, c * 173.29513549804688);
            k.bezierCurveTo(c * 204.99996948242188, c * 181.29513549804688, c * 204.99996948242188, c * 187.29513549804688, c * 205.99996948242188, c * 193.29513549804688);
            k.bezierCurveTo(c * 190.99996948242188, c * 198.29513549804688, c * 181.99996948242188, c * 205.29513549804688, c * 174.99996948242188, c * 214.29513549804688);
            vt(k, undefined, e[4], c * 3);
            k.restore();
        }
        k.translate(j.width / 2, j.height / 2);
        if (!i) {
            k.globalAlpha = 0.5;
            wt(k, -o, -b, l, g + h, n);
            vt(k, e[0]);
            if (f) {
                k.rotate(Math.PI);
            }
            k.globalAlpha = 1;
            wt(k, -o, -b, l, g, n);
            vt(k, e[1], e[2], 4);
            k.globalAlpha = 1;
            wt(k, c * 35 - o, c * 20 - b, l - c * 50, g - c * 50, n - c * 10);
            vt(k, e[3]);
        }
        if (i == 3) {
            k.translate(-j.width / 2, -j.height / 2);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 121, c * 190);
            k.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
            k.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
            k.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
            k.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
            k.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
            k.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
            k.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
            k.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
            k.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
            k.closePath();
            vt(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 219, c * 144);
            k.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
            k.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
            k.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
            k.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
            k.closePath();
            vt(k, e[5]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 123, c * 214);
            k.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
            k.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
            k.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
            k.closePath();
            vt(k, e[5]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 257, c * 199);
            k.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
            k.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
            k.closePath();
            vt(k, e[5]);
            k.translate(c * -5, c * 55);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 186, c * 123);
            k.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
            k.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
            k.closePath();
            vt(k, e[5]);
            k.translate(c * 5, c * -55);
            k.translate(c * -5, c * 15);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 171, c * 241);
            k.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
            k.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
            k.closePath();
            vt(k, e[5]);
        } else if (i == 4) {
            k.translate(-j.width / 2, -j.height / 2);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 30, c * 167);
            k.bezierCurveTo(c * 47, c * 144, c * 64, c * 140, c * 80, c * 147);
            k.bezierCurveTo(c * 95, c * 154, c * 95, c * 159, c * 100, c * 179);
            k.bezierCurveTo(c * 105, c * 202, c * 95, c * 218, c * 69, c * 218);
            k.bezierCurveTo(c * 48, c * 236, c * 26, c * 223, c * 28, c * 213);
            k.bezierCurveTo(c * 28, c * 205, c * 29, c * 199, c * 32, c * 195);
            k.bezierCurveTo(c * 21, c * 183, c * 27, c * 173, c * 30, c * 167);
            k.closePath();
            vt(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 26, c * 145);
            k.bezierCurveTo(c * 32, c * 138, c * 37, c * 137, c * 40, c * 139);
            k.bezierCurveTo(c * 43, c * 140, c * 41, c * 150, c * 31, c * 159);
            k.bezierCurveTo(c * 23, c * 166, c * 17, c * 158, c * 26, c * 145);
            k.closePath();
            vt(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 13, c * 193);
            k.bezierCurveTo(c * 21, c * 187, c * 30, c * 190, c * 20, c * 202);
            k.bezierCurveTo(c * 13, c * 208, c * 7, c * 202, c * 13, c * 193);
            k.closePath();
            vt(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 121, c * 190);
            k.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
            k.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
            k.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
            k.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
            k.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
            k.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
            k.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
            k.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
            k.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
            k.closePath();
            vt(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 335, c * 196);
            k.bezierCurveTo(c * 312, c * 208, c * 300, c * 185, c * 309, c * 167);
            k.bezierCurveTo(c * 314, c * 141, c * 339, c * 127, c * 359, c * 144);
            k.bezierCurveTo(c * 363, c * 148, c * 364, c * 150, c * 364, c * 150);
            k.bezierCurveTo(c * 392, c * 143, c * 396, c * 183, c * 378, c * 204);
            k.bezierCurveTo(c * 367, c * 215, c * 339, c * 208, c * 335, c * 196);
            k.closePath();
            vt(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 349, c * 212);
            k.bezierCurveTo(c * 339, c * 216, c * 334, c * 208, c * 341, c * 203);
            k.bezierCurveTo(c * 353, c * 198, c * 361, c * 205, c * 349, c * 212);
            k.closePath();
            vt(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 46, c * 165);
            k.bezierCurveTo(c * 55, c * 148, c * 85, c * 157, c * 83, c * 175);
            k.bezierCurveTo(c * 99, c * 185, c * 89, c * 212, c * 66, c * 204);
            k.bezierCurveTo(c * 55, c * 212, c * 43, c * 212, c * 41, c * 202);
            k.bezierCurveTo(c * 39, c * 194, c * 42, c * 187, c * 49, c * 185);
            k.bezierCurveTo(c * 44, c * 175, c * 45, c * 172, c * 46, c * 165);
            k.closePath();
            vt(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 219, c * 144);
            k.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
            k.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
            k.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
            k.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
            k.closePath();
            vt(k, e[5]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 123, c * 214);
            k.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
            k.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
            k.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
            k.closePath();
            vt(k, e[5]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 257, c * 199);
            k.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
            k.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
            k.closePath();
            vt(k, e[5]);
            k.translate(c * -5, c * 55);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 186, c * 123);
            k.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
            k.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
            k.closePath();
            vt(k, e[5]);
            k.translate(c * 5, c * -55);
            k.translate(c * -5, c * 15);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 171, c * 241);
            k.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
            k.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
            k.closePath();
            vt(k, e[5]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 367, c * 164);
            k.bezierCurveTo(c * 380, c * 160, c * 391, c * 185, c * 371, c * 189);
            k.bezierCurveTo(c * 362, c * 192, c * 354, c * 191, c * 350, c * 185);
            k.bezierCurveTo(c * 326, c * 205, c * 314, c * 182, c * 316, c * 171);
            k.bezierCurveTo(c * 317, c * 150, c * 332, c * 143, c * 347, c * 147);
            k.bezierCurveTo(c * 361, c * 151, c * 366, c * 158, c * 367, c * 164);
            k.closePath();
            vt(k, e[4]);
        }
        return j;
    }
    function td(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 40;
        var g = b * 40;
        var a = b * 16;
        var h = b * 4;
        d.width = f;
        d.height = g;
        e.translate(f / 2, g / 2);
        e.globalAlpha = 1;
        ut(e, 0, 0, a);
        vt(e, c[0], c[1], h);
        return d;
    }
    const nd = 10;
    function od(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 469;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 30);
        e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
        e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
        e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
        e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
        e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
        e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
        e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 31);
        e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
        e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
        e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
        e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 328);
        e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
        e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
        e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 74, a * 302);
        e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
        e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
        e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
        e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
        e.closePath();
        vt(e, c[0]);
        e.save();
        e.translate(a * 51.5, a * 440.5);
        e.rotate(0.2);
        wt(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
        e.restore();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 73, a * 316);
        e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
        e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 30);
        e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
        e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
        e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
        e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
        e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
        e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
        e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
        e.closePath();
        vt(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 31);
        e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
        e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
        e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
        e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 30);
        e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
        e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
        e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
        e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
        e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
        e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
        e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
        e.closePath();
        vt(e, undefined, c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 328);
        e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
        e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
        e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
        e.closePath();
        vt(e, c[4], c[5], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 74, a * 302);
        e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
        e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
        e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
        e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
        e.closePath();
        vt(e, c[4], c[5], a * 7);
        e.save();
        e.translate(a * 51.5, a * 440.5);
        e.rotate(0.2);
        wt(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
        e.restore();
        vt(e, c[4], c[5], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 73, a * 316);
        e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
        e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
        e.closePath();
        vt(e, c[6]);
        return d;
    }
    function ad(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = Math.max(c.width, b.width);
        var g = Math.max(c.height, b.height);
        d.width = f;
        d.height = g;
        e.drawImage(b, (f - b.width) / 2, (g - b.height) / 2);
        e.drawImage(c, (f - c.width) / 2, (g - c.height) / 2);
        return d;
    }
    function rd(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = c * 105;
        var a = c * 125;
        var m = c * 4;
        var n = c * 10;
        var h = c * 5;
        var l = c * 10;
        var g = c * 110;
        var o = l / 2;
        var b = g / 2;
        i.width = k;
        i.height = a;
        j.save();
        j.globalAlpha = e ? 0.5 : 1;
        j.translate(k / 2 + c * 8, a / 2 + h);
        wt(j, -o, -b, l, g, n);
        vt(j, e ? f[0] : f[1]);
        j.translate(c * -130 + h, c * -128 + h);
        j.beginPath();
        j.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
        j.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
        j.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
        j.closePath();
        vt(j, f[2]);
        j.restore();
        j.translate(k / 2 + 8, a / 2);
        j.globalAlpha = 1;
        wt(j, -o, -b, l, g, n);
        vt(j, f[3], f[4], m);
        j.translate(c * -130, c * -125);
        j.beginPath();
        j.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
        j.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
        j.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
        j.closePath();
        vt(j, f[5], f[6], m);
        return i;
    }
    function sd(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = (b = c * 450) / 2;
        var a = (p = c * 145) / 2;
        var m = c * 10;
        var n = c * 300;
        var h = c * 30;
        var l = n / 2;
        var g = h / 2;
        var o = 4;
        if (f) {
            var b = c * 145;
            var p = c * 450;
            i.width = b;
            i.height = p;
            j.rotate(Math.PI / 2);
            j.save();
            j.globalAlpha = 0.5;
            wt(j, c * 100, c * -110, n, h, m);
            vt(j, e[0]);
            j.translate(c * 178, c * -98);
            wt(j, -l, -g - c * 6, c * 100, c * 100, m);
            vt(j, e[0]);
            j.translate(c * -50, c * 5);
            wt(j, c * 220, c * -15, c * 90, c * 90, m);
            vt(j, e[0]);
            j.restore();
            j.save();
            j.globalAlpha = 1;
            j.translate(c * 250, c * -63);
            wt(j, -l - c * 20, -g, n, h, m);
            vt(j, e[1], e[2], o);
            j.translate(c * -70, c * -40);
            wt(j, -l - c * 20, -g, c * 100, c * 100, m);
            vt(j, e[3], e[4], o);
            j.translate(c * -70, c * 15);
            wt(j, c * 220, c * -22, c * 90, c * 90, m);
            vt(j, e[3], e[4], o);
            wt(j, c * 230, c * -12, c * 55, c * 55, m);
            vt(j, e[5]);
            j.translate(c * -70, 0);
            wt(j, c * -15, c * -2, c * 60, c * 60, m);
            vt(j, e[5]);
            j.restore();
        } else {
            i.width = b;
            i.height = p;
            j.save();
            j.globalAlpha = 0.5;
            j.translate(k, a + c * 10);
            wt(j, -l, -g, n, h, m);
            vt(j, e[0]);
            j.translate(c * -65, c * -25);
            wt(j, -l, -g - c * 6, c * 100, c * 100, c * 15);
            vt(j, e[0]);
            j.translate(c * -35, c * -5);
            wt(j, c * 220, c * -15, c * 90, c * 90, c * 15);
            vt(j, e[0]);
            j.restore();
            j.save();
            j.globalAlpha = 1;
            j.translate(c * 240, c * 70);
            wt(j, -l, -g, n, h, m);
            vt(j, e[1], e[2], o);
            j.translate(c * -60, c * -40);
            wt(j, -l - c * 20, -g, c * 100, c * 100, c * 15);
            vt(j, e[3], e[4], o);
            j.translate(c * -55, c * 10);
            wt(j, c * 220, c * -22, c * 90, c * 90, c * 15);
            vt(j, e[3], e[4], o);
            wt(j, c * 240, c * -12, c * 55, c * 55, c * 12);
            vt(j, e[5]);
            j.translate(c * 45, c * 0);
            wt(j, c * -145, c * -2, c * 60, c * 60, c * 12);
            vt(j, e[5]);
            j.restore();
        }
        return i;
    }
    function hd(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 121;
        f.height = b * 130;
        g.translate(0, b * 20);
        if (d == 1) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 6, b * 23);
            g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
            g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
            g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
            g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
            g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
            g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
            g.closePath();
            vt(g, Js, c[3], b * 13);
        }
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 6, b * 23);
        g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
        g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
        g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
        g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
        g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
        g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
        g.closePath();
        vt(g, c[1], c[2], b * 4);
        if (e == 1) {
            g.translate(0, b * 5);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 67, b * 30);
            g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
            vt(g, As, c[0], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 17);
            g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
            vt(g, Da, c[0], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 76, b * 8);
            g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
            vt(g, undefined, c[0], b * 10);
            if (d == 1) {
                g.translate(b * -6, b * -5);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 67, b * 30);
                g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
                vt(g, Og, c[3], b * 18);
                g.translate(3, b * 0);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 70, b * 17);
                g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
                vt(g, undefined, c[3], b * 18);
                g.translate(3, b * 0);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 76, b * 8);
                g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
                vt(g, qn, c[3], b * 18);
                g.translate(-6, b * 0);
            } else {
                g.translate(b * -6, b * -5);
            }
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 67, b * 30);
            g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
            vt(g, undefined, c[2], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 17);
            g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
            vt(g, undefined, c[2], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 76, b * 8);
            g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
            vt(g, undefined, c[2], b * 10);
        } else {
            if (d == 1) {
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 108, b * 27);
                g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
                g.closePath();
                vt(g, zr, c[3], b * 18);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 79, b * 30);
                g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
                g.closePath();
                vt(g, undefined, c[3], b * 18);
            } else {
                g.translate(0, b * -5);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 108, b * 27);
                g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
                g.closePath();
                vt(g, undefined, c[0], b * 7);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 79, b * 30);
                g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
                g.closePath();
                vt(g, undefined, c[0], b * 7);
                g.translate(0, b * 5);
            }
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 108, b * 27);
            g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
            g.closePath();
            vt(g, Oo, c[2], b * 7);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 79, b * 30);
            g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
            g.closePath();
            vt(g, undefined, c[2], b * 7);
        }
        return f;
    }
    const ld = 20;
    function gd(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 283;
        f.height = b * 224;
        g.translate(0, b * 15);
        g.globalAlpha = 0.5;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 93, b * 55);
        g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
        g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
        g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
        g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
        g.closePath();
        vt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 100, b * 33);
        g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
        g.closePath();
        vt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 181, b * 32);
        g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
        vt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 225, b * 52);
        g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
        vt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 34, b * 134);
        g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
        vt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 249, b * 135);
        g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
        vt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 56, b * 50);
        g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
        vt(g, d[0]);
        g.translate(0, b * -15);
        g.globalAlpha = 1;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 100, b * 33);
        g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
        vt(g, Ft, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 181, b * 32);
        g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
        vt(g, undefined, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 225, b * 52);
        g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
        vt(g, uj, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 34, b * 134);
        g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
        vt(g, undefined, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 249, b * 135);
        g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
        vt(g, Zk, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 56, b * 50);
        g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
        vt(g, undefined, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 93, b * 55);
        g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
        g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
        g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
        g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
        g.closePath();
        vt(g, d[1], d[2], b * 10);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 100, b * 33);
        g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
        vt(g, undefined, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 181, b * 32);
        g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
        vt(g, undefined, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 225, b * 52);
        g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
        vt(g, tj, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 34, b * 134);
        g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
        vt(g, Da, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 249, b * 135);
        g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
        vt(g, dg, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 56, b * 50);
        g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
        vt(g, undefined, d[1], b * 20);
        ut(g, b * 101, b * 155, b * 20.591260281974);
        vt(g, d[3]);
        ut(g, b * 180, b * 155, b * 20.591260281974);
        vt(g, d[3]);
        ut(g, b * 95, b * 148, b * 7.211102550927978);
        vt(g, d[4]);
        ut(g, b * 173, b * 148, b * 7.211102550927978);
        vt(g, d[4]);
        if (e === 1) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 191, b * 107);
            g.bezierCurveTo(b * 180, b * 104, b * 175, b * 101, b * 180, b * 95);
            g.bezierCurveTo(b * 180, b * 95, b * 181, b * 99, b * 188, b * 103);
            g.bezierCurveTo(b * 191, b * 101, b * 191, b * 95, b * 190, b * 91);
            g.bezierCurveTo(b * 190, b * 91, b * 196, b * 89, b * 195, b * 99);
            g.closePath();
            vt(g, d[2]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 206, b * 98);
            g.bezierCurveTo(b * 203, b * 95, b * 200, b * 93, b * 198, b * 101);
            g.bezierCurveTo(b * 194, b * 109, b * 193, b * 109, b * 196, b * 110);
            g.bezierCurveTo(b * 206, b * 115, b * 209, b * 114, b * 211, b * 111);
            g.bezierCurveTo(b * 211, b * 106, b * 208, b * 108, b * 203, b * 108);
            g.bezierCurveTo(b * 193, b * 107, b * 204, b * 101, b * 206, b * 99);
            g.closePath();
            vt(g, d[2]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 172, b * 111);
            g.bezierCurveTo(b * 172, b * 106, b * 174, b * 105, b * 185, b * 109);
            g.bezierCurveTo(b * 190, b * 109, b * 189, b * 114, b * 185, b * 120);
            g.bezierCurveTo(b * 181, b * 125, b * 180, b * 126, b * 176, b * 122);
            g.bezierCurveTo(b * 182, b * 119, b * 187, b * 110, b * 182, b * 112);
            g.closePath();
            vt(g, d[2]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 202, b * 125);
            g.bezierCurveTo(b * 197, b * 117, b * 193, b * 116, b * 193, b * 120);
            g.bezierCurveTo(b * 192.5, b * 124.5, b * 192.5, b * 124.5, b * 192, b * 129);
            g.bezierCurveTo(b * 188, b * 129, b * 187, b * 124, b * 189, b * 120);
            g.bezierCurveTo(b * 191, b * 110, b * 192, b * 110, b * 200, b * 116);
            g.bezierCurveTo(b * 208, b * 120, b * 207, b * 123, b * 202, b * 125);
            g.closePath();
            vt(g, d[2]);
        }
        return f;
    }
    function ud(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
        e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
        e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
        e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
        e.closePath();
        vt(e, c[0]);
        e.save();
        e.translate(a * 129.5, a * 424);
        e.rotate(0.16);
        wt(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
        e.restore();
        vt(e, c[0]);
        ut(e, a * 121, a * 480, a * 20.396078054371138);
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 311);
        e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
        e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
        e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
        e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
        e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
        e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
        e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
        e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
        e.closePath();
        vt(e, c[1], c[2], a * 12.5);
        e.save();
        e.translate(a * 129.5, a * 424);
        e.rotate(0.16);
        wt(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
        e.restore();
        vt(e, c[4], c[5], a * 12.5);
        ut(e, a * 121, a * 480, a * 20.396078054371138);
        vt(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 311);
        e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
        e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
        e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
        e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
        e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
        e.closePath();
        vt(e, c[1], c[2], a * 12.5);
        return d;
    }
    function bd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 100;
        d.height = a * 250;
        e.translate(a * -135, a * -75);
        e.globalAlpha = b ? 0.8 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 178.5, a * 238.03125);
        e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
        e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
        e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
        e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 155.5, a * 239.03125);
        e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
        e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
        e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
        e.closePath();
        vt(e, c[0]);
        ut(e, a * 160.5, a * 243.03125, a * 7);
        vt(e, c[0]);
        ut(e, a * 227.5, a * 242.03125, a * 7);
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.5, a * 253.03125);
        e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
        e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
        e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
        e.closePath();
        vt(e, c[0], c[0], a * 5);
        ut(e, a * 194, a * 298, a * 9);
        vt(e, c[0], c[0], a * 5);
        e.globalAlpha = 1;
        e.translate(a * -10, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 178.5, a * 238.03125);
        e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
        e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
        e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
        e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
        e.closePath();
        vt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 155.5, a * 239.03125);
        e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
        e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
        e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
        e.closePath();
        vt(e, c[1], c[2], a * 5);
        ut(e, a * 160.5, a * 243.03125, a * 7);
        vt(e, c[1], c[2], a * 5);
        ut(e, a * 227.5, a * 242.03125, a * 7);
        vt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.5, a * 253.03125);
        e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
        e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
        e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
        e.closePath();
        vt(e, c[1], c[2], a * 7);
        ut(e, a * 194, a * 298, a * 9);
        vt(e, c[1], c[2], a * 7);
        return d;
    }
    function dd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 131;
        d.height = a * 121;
        e.translate(0, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 59);
        e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
        e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
        e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
        e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
        e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
        e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 59);
        e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
        e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
        e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
        e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
        e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
        e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
        e.closePath();
        vt(e, c[1], c[2], a * 10);
        return d;
    }
    function vd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 321;
        d.height = a * 284;
        e.translate(a * 100, a * 30);
        e.translate(a * 5, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        vt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167, a * 120);
        e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
        e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
        e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25, a * 64);
        e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
        e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
        e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
        e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
        e.closePath();
        vt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 141);
        e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
        e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
        e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
        e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
        e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
        e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
        vt(e, zr, c[4], a * 4);
        e.translate(a * -100, a * -30);
        e.translate(a * 10, a * 70);
        e.translate(a * 5, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        vt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167, a * 120);
        e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
        e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
        e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25, a * 64);
        e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
        e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
        e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
        e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
        e.closePath();
        vt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 141);
        e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
        e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
        e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
        e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
        e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
        e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
        vt(e, As, c[4], a * 4);
        e.translate(a * 20, a * -80);
        e.translate(a * 5, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        vt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167, a * 120);
        e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
        e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
        e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25, a * 64);
        e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
        e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
        e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
        e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
        e.closePath();
        vt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 141);
        e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
        e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
        e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
        e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
        e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
        e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
        vt(e, tj, c[4], a * 4);
        return d;
    }
    function md(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 104;
        d.height = a * 112;
        e.translate(0, a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 16, a * 44);
        e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
        e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
        e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
        e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
        e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
        e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 16, a * 44);
        e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
        e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
        e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
        e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
        e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
        e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
        e.closePath();
        vt(e, c[1], c[2], a * 8);
        return d;
    }
    function cd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 424;
        d.height = a * 788;
        e.translate(a * 25, a * 25);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 193.5, a * 602.5);
        e.rotate(-0.12);
        wt(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
        e.restore();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 519);
        e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
        e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
        e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
        e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 175, a * 119);
        e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
        e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
        e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
        e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 518);
        e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
        e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
        e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
        e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
        e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
        e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
        e.closePath();
        vt(e, c[0]);
        ut(e, a * 204, a * 693, a * 36.013886210738214);
        vt(e, c[0]);
        ut(e, a * 105, a * 518, a * 30);
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 171, a * 535);
        e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
        e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
        e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 244, a * 669);
        e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
        e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
        e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
        e.closePath();
        vt(e, c[0]);
        e.translate(a * -25, a * -25);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 193.5, a * 602.5);
        e.rotate(-0.12);
        wt(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
        e.restore();
        vt(e, c[1], c[2], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 519);
        e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
        e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
        e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
        e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
        e.closePath();
        vt(e, c[3], c[4], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 175, a * 119);
        e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
        e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
        e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
        e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
        e.closePath();
        vt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 518);
        e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
        e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
        e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
        e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
        e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
        e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
        e.closePath();
        vt(e, c[6], c[4], a * 16);
        ut(e, a * 204, a * 693, a * 36.013886210738214);
        vt(e, c[6], c[4], a * 16);
        ut(e, a * 105, a * 518, a * 30);
        vt(e, c[6], c[4], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 171, a * 535);
        e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
        e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
        e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
        e.closePath();
        vt(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 244, a * 669);
        e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
        e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
        e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
        e.closePath();
        vt(e, c[6]);
        ut(e, a * 204, a * 693, a * 17.029386365926403);
        vt(e, c[7]);
        ut(e, a * 106, a * 518, a * 12);
        vt(e, c[7]);
        return d;
    }
    function pd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
        e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
        e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
        e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
        e.closePath();
        vt(e, c[0]);
        e.save();
        e.translate(a * 131, a * 425.5);
        e.rotate(0.16);
        wt(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
        e.restore();
        vt(e, c[0]);
        ut(e, a * 122, a * 480, a * 18.439088914585774);
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 371);
        e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
        e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
        e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
        e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
        e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
        e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
        e.closePath();
        vt(e, c[1], c[2], a * 12.5);
        e.save();
        e.translate(a * 131, a * 425.5);
        e.rotate(0.16);
        wt(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
        e.restore();
        vt(e, c[4], c[5], a * 12.5);
        ut(e, a * 122, a * 480, a * 18.439088914585774);
        vt(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 371);
        e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
        e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
        e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
        e.closePath();
        vt(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 345);
        e.bezierCurveTo(a * 142, a * 345, a * 147, a * 346, a * 158, a * 349);
        e.bezierCurveTo(a * 177.5, a * 224.5, a * 177.5, a * 224.5, a * 197, a * 100);
        e.bezierCurveTo(a * 190.5, a * 84.5, a * 190.5, a * 84.5, a * 184, a * 69);
        e.bezierCurveTo(a * 173.5, a * 82, a * 173.5, a * 82, a * 163, a * 95);
        e.closePath();
        vt(e, c[3]);
        return d;
    }
    function Cd(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 283;
        c.height = a * 224;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 100, a * 33);
        d.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
        vt(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 181, a * 32);
        d.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
        vt(d, ns, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 225, a * 52);
        d.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
        vt(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 34, a * 134);
        d.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
        vt(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 249, a * 135);
        d.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
        vt(d, Da, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 56, a * 50);
        d.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
        vt(d, zr, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 93, a * 55);
        d.bezierCurveTo(a * 124, a * 29, a * 179, a * 44, a * 188, a * 52);
        d.bezierCurveTo(a * 207, a * 64, a * 226, a * 94, a * 231, a * 118);
        d.bezierCurveTo(a * 236, a * 145, a * 222, a * 184, a * 193, a * 192);
        d.bezierCurveTo(a * 147, a * 201, a * 116, a * 200, a * 93, a * 193);
        d.bezierCurveTo(a * 61, a * 180, a * 48, a * 147, a * 50, a * 123);
        d.bezierCurveTo(a * 50, a * 93, a * 76, a * 66, a * 92, a * 56);
        d.closePath();
        vt(d, b[0]);
        return c;
    }
    const Td = 3;
    const fd = 4;
    function zd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 112, a * 356);
        e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
        e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
        e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
        e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
        e.closePath();
        vt(e, c[0]);
        e.save();
        e.translate(a * 131, a * 423);
        e.rotate(0.16);
        wt(e, a * -14, a * -53, a * 28, a * 106, a * 10);
        e.restore();
        vt(e, c[0]);
        e.save();
        e.translate(a * 122, a * 480);
        e.rotate(1.72);
        zt(e, 4, a * 26.476404589747453, a * 10);
        e.restore();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 210, a * 387);
        e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
        e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
        e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
        e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
        e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
        e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 129, a * 338);
        e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
        e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
        e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
        e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
        e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 112, a * 356);
        e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
        e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
        e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
        e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
        e.closePath();
        vt(e, c[1], c[2], a * 12.5);
        e.save();
        e.translate(a * 131, a * 423);
        e.rotate(0.16);
        wt(e, a * -14, a * -53, a * 28, a * 106, a * 10);
        e.restore();
        vt(e, c[4], c[5], a * 12.5);
        e.save();
        e.translate(a * 122, a * 480);
        e.rotate(1.72);
        zt(e, 4, a * 26.476404589747453, a * 10);
        e.restore();
        vt(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 210, a * 387);
        e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
        e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
        e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
        e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
        e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
        e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
        e.closePath();
        vt(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 129, a * 338);
        e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
        e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
        e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
        e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
        e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
        e.closePath();
        vt(e, c[3]);
        return d;
    }
    const yd = 16;
    function wd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.translate(a * -20, a * -20);
        e.save();
        e.translate(a * 132, a * 423);
        e.rotate(0.16);
        wt(e, a * -14, a * -61, a * 28, a * 122, a * 10);
        e.restore();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 344);
        e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
        e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
        e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
        e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
        e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 328);
        e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
        e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
        e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
        e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
        e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
        e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
        e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 121, a * 332);
        e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
        e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
        e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
        e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
        e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 463);
        e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
        e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
        e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
        e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.save();
        e.translate(a * 132, a * 423);
        e.rotate(0.16);
        wt(e, a * -14, a * -61, a * 28, a * 122, a * 10);
        e.restore();
        vt(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 344);
        e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
        e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
        e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
        e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
        e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
        e.closePath();
        vt(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 328);
        e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
        e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
        e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
        e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
        e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
        e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
        e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
        e.closePath();
        vt(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 121, a * 332);
        e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
        e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
        e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
        e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
        e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 463);
        e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
        e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
        e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
        e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
        e.closePath();
        vt(e, c[1], c[2], a * 12.5);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143, a * 346);
        e.bezierCurveTo(a * 125, a * 352, a * 125, a * 352, a * 107, a * 358);
        e.bezierCurveTo(a * 124, a * 363, a * 140, a * 368, a * 141, a * 368);
        e.bezierCurveTo(a * 156.5, a * 367, a * 156.5, a * 367, a * 172, a * 366);
        e.closePath();
        vt(e, c[3]);
        return d;
    }
    function Pd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 350;
        d.height = a * 140;
        e.translate(a * -50, a * -150);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 184.5, a * 222.0625);
        e.bezierCurveTo(a * 185.5, a * 184.0625, a * 302.5, a * 171.0625, a * 313.5, a * 222.0625);
        e.bezierCurveTo(a * 330.5, a * 263.0625, a * 181.5, a * 274.0625, a * 184.5, a * 223.0625);
        e.closePath();
        vt(e, c[0], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131.5, a * 241.0625);
        e.bezierCurveTo(a * 144.5, a * 278.0625, a * 270.5, a * 209.0625, a * 228.5, a * 174.0625);
        e.bezierCurveTo(a * 196.5, a * 147.0625, a * 117.5, a * 196.0625, a * 131.5, a * 240.0625);
        e.closePath();
        vt(e, c[0], c[1], a * 8);
        ut(e, a * 270.5, a * 225.0625, a * 15.811388300841896);
        vt(e, c[2]);
        ut(e, a * 243.5, a * 225.0625, a * 6.082762530298219);
        vt(e, c[2]);
        ut(e, a * 255.5, a * 210.0625, a * 10.816653826391969);
        vt(e, c[2]);
        ut(e, a * 167.5, a * 215.0625, a * 15.297058540778355);
        vt(e, c[2]);
        ut(e, a * 176.5, a * 204.0625, a * 7.280109889280518);
        vt(e, c[2]);
        ut(e, a * 206.5, a * 189.0625, a * 7.280109889280518);
        vt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 151.5, a * 212.0625);
        e.bezierCurveTo(a * 161.5, a * 204.0625, a * 173.5, a * 214.0625, a * 158.5, a * 221.0625);
        e.bezierCurveTo(a * 145.5, a * 228.0625, a * 144.5, a * 216.0625, a * 151.5, a * 212.0625);
        e.closePath();
        vt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 194.5, a * 209.0625);
        e.bezierCurveTo(a * 205.5, a * 202.0625, a * 215.5, a * 207.0625, a * 199.5, a * 217.0625);
        e.bezierCurveTo(a * 187.5, a * 224.0625, a * 182.5, a * 217.0625, a * 194.5, a * 209.0625);
        e.closePath();
        vt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 188.5, a * 183.0625);
        e.bezierCurveTo(a * 201.5, a * 176.0625, a * 213.5, a * 187.0625, a * 193.5, a * 193.0625);
        e.bezierCurveTo(a * 185.5, a * 194.0625, a * 175.5, a * 189.0625, a * 188.5, a * 183.0625);
        e.closePath();
        vt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 261.5, a * 202.0625);
        e.bezierCurveTo(a * 274.5, a * 201.0625, a * 282.5, a * 214.0625, a * 261.5, a * 215.0625);
        e.bezierCurveTo(a * 246.5, a * 214.0625, a * 248.5, a * 203.0625, a * 261.5, a * 202.0625);
        e.closePath();
        vt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 240.5, a * 231.0625);
        e.bezierCurveTo(a * 255.5, a * 231.0625, a * 254.5, a * 243.0625, a * 240.5, a * 242.0625);
        e.bezierCurveTo(a * 225.5, a * 239.0625, a * 225.5, a * 232.0625, a * 240.5, a * 231.0625);
        e.closePath();
        vt(e, c[3], c[4], a * 4);
        return d;
    }
    function Ad(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 154;
        d.height = a * 261;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125, a * 69);
        e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
        e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
        e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
        e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
        e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
        e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
        e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
        e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
        e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125, a * 69);
        e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
        e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
        e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
        e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
        e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
        e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
        e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
        e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
        e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
        e.closePath();
        vt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 43);
        e.bezierCurveTo(a * 31, a * 61, a * 43, a * 70, a * 51, a * 75);
        e.bezierCurveTo(a * 48, a * 84, a * 41, a * 89, a * 33, a * 86);
        e.bezierCurveTo(a * 23, a * 88, a * 20, a * 76, a * 23, a * 62);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 45, a * 29);
        e.bezierCurveTo(a * 49, a * 45, a * 61, a * 54, a * 64, a * 55);
        e.bezierCurveTo(a * 67.5, a * 53, a * 67.5, a * 53, a * 71, a * 51);
        e.bezierCurveTo(a * 80, a * 44, a * 83, a * 33, a * 82, a * 20);
        e.bezierCurveTo(a * 59, a * 17, a * 51, a * 23, a * 45, a * 30);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 56);
        e.bezierCurveTo(a * 90, a * 33, a * 103, a * 25, a * 105, a * 27);
        e.bezierCurveTo(a * 116, a * 31, a * 121, a * 45, a * 122, a * 50);
        e.bezierCurveTo(a * 112, a * 62, a * 103, a * 63, a * 91, a * 62);
        e.bezierCurveTo(a * 89, a * 59.5, a * 89, a * 59.5, a * 87, a * 57);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 81);
        e.bezierCurveTo(a * 109, a * 82, a * 123, a * 70, a * 124, a * 63);
        e.bezierCurveTo(a * 124, a * 75.5, a * 124, a * 75.5, a * 124, a * 88);
        e.bezierCurveTo(a * 119, a * 99, a * 103, a * 103, a * 94, a * 103);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 124);
        e.bezierCurveTo(a * 108, a * 125, a * 122, a * 113, a * 124, a * 106);
        e.bezierCurveTo(a * 124, a * 119, a * 124, a * 129, a * 124, a * 132);
        e.bezierCurveTo(a * 110, a * 147, a * 94, a * 148, a * 90, a * 147);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 170);
        e.bezierCurveTo(a * 104, a * 166, a * 122, a * 158, a * 122, a * 151);
        e.bezierCurveTo(a * 122, a * 162.5, a * 122, a * 162.5, a * 122, a * 174);
        e.bezierCurveTo(a * 111, a * 191, a * 97, a * 191, a * 89, a * 191);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 208);
        e.bezierCurveTo(a * 100, a * 209, a * 115, a * 205, a * 122, a * 193);
        e.bezierCurveTo(a * 122, a * 205.5, a * 122, a * 205.5, a * 122, a * 218);
        e.bezierCurveTo(a * 115, a * 229, a * 103, a * 235, a * 90, a * 228);
        e.bezierCurveTo(a * 88, a * 224, a * 88, a * 217, a * 88, a * 211);
        e.closePath();
        vt(e, c[3]);
        e.globalAlpha = 0.4;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22, a * 81);
        e.bezierCurveTo(a * 32, a * 84, a * 41, a * 81, a * 45, a * 68);
        e.bezierCurveTo(a * 50, a * 50, a * 62, a * 40, a * 79, a * 43);
        e.bezierCurveTo(a * 95, a * 45, a * 102, a * 58, a * 101, a * 81);
        e.bezierCurveTo(a * 99.5, a * 120.5, a * 99.5, a * 120.5, a * 98, a * 160);
        e.bezierCurveTo(a * 96.5, a * 191.5, a * 96.5, a * 191.5, a * 95, a * 223);
        e.bezierCurveTo(a * 93, a * 232, a * 101, a * 235, a * 108, a * 238);
        e.bezierCurveTo(a * 100, a * 240, a * 90, a * 233, a * 90, a * 224);
        e.bezierCurveTo(a * 92, a * 157, a * 92, a * 157, a * 94, a * 90);
        e.bezierCurveTo(a * 94, a * 56, a * 89, a * 53, a * 77, a * 51);
        e.bezierCurveTo(a * 58, a * 50, a * 54, a * 59, a * 49, a * 75);
        e.bezierCurveTo(a * 44, a * 91, a * 28, a * 90, a * 23, a * 81);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 123);
        e.bezierCurveTo(a * 88, a * 130, a * 88, a * 127, a * 94, a * 128);
        e.bezierCurveTo(a * 91, a * 136, a * 94, a * 137, a * 99, a * 142);
        e.bezierCurveTo(a * 97, a * 149, a * 99, a * 152, a * 105, a * 155);
        e.bezierCurveTo(a * 107, a * 159, a * 113, a * 159, a * 120, a * 158);
        e.bezierCurveTo(a * 121, a * 160, a * 125, a * 163, a * 132, a * 163);
        e.bezierCurveTo(a * 133, a * 166, a * 136, a * 169, a * 138, a * 170);
        e.bezierCurveTo(a * 133, a * 171, a * 132, a * 172, a * 129, a * 174);
        e.bezierCurveTo(a * 122, a * 170, a * 120, a * 170, a * 116, a * 174);
        e.bezierCurveTo(a * 108, a * 170.5, a * 108, a * 170.5, a * 100, a * 167);
        e.bezierCurveTo(a * 95, a * 172, a * 94, a * 179, a * 95, a * 184);
        e.bezierCurveTo(a * 87, a * 185, a * 87, a * 189, a * 88, a * 194);
        e.bezierCurveTo(a * 82, a * 194, a * 81, a * 195, a * 79, a * 197);
        e.bezierCurveTo(a * 78, a * 192, a * 78, a * 191, a * 77, a * 189);
        e.bezierCurveTo(a * 81, a * 185, a * 82, a * 183, a * 80, a * 176);
        e.bezierCurveTo(a * 89, a * 170, a * 92, a * 168, a * 95, a * 163);
        e.bezierCurveTo(a * 91, a * 151, a * 88, a * 151, a * 82, a * 147);
        e.bezierCurveTo(a * 85, a * 142, a * 85, a * 137, a * 81, a * 133);
        e.bezierCurveTo(a * 84, a * 127, a * 84, a * 125, a * 82, a * 124);
        e.closePath();
        vt(e, c[4], c[5], a * 4);
        ut(e, a * 107, a * 152, a * 9);
        vt(e, c[6]);
        ut(e, a * 105, a * 173, a * 9);
        vt(e, c[6]);
        ut(e, a * 87, a * 161, a * 9);
        vt(e, c[6]);
        ut(e, a * 106, a * 147, a * 4);
        vt(e, c[7]);
        ut(e, a * 104, a * 167, a * 4);
        vt(e, c[7]);
        ut(e, a * 86, a * 154, a * 4);
        vt(e, c[7]);
        return d;
    }
    const kd = 11;
    function xd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 118;
        d.height = a * 114;
        e.translate(0, a * 10);
        ut(e, a * 42, a * 43, a * 24.758836806279895);
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 90);
        e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
        e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87, a * 45);
        e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
        e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
        e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
        e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
        e.closePath();
        vt(e, c[0]);
        e.translate(0, a * -10);
        ut(e, a * 42, a * 43, a * 24.758836806279895);
        vt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 90);
        e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
        e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
        e.closePath();
        vt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87, a * 45);
        e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
        e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
        e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
        e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
        e.closePath();
        vt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 16);
        e.bezierCurveTo(a * 55, a * 19, a * 54, a * 20, a * 55, a * 22);
        e.bezierCurveTo(a * 52, a * 24.5, a * 52, a * 24.5, a * 49, a * 27);
        e.bezierCurveTo(a * 45, a * 25, a * 45, a * 25, a * 41, a * 23);
        e.bezierCurveTo(a * 45, a * 19, a * 48, a * 16, a * 52, a * 16);
        e.closePath();
        vt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 62, a * 30);
        e.bezierCurveTo(a * 66, a * 29, a * 64, a * 30, a * 66, a * 30);
        e.bezierCurveTo(a * 67, a * 31, a * 67, a * 31, a * 68, a * 32);
        e.bezierCurveTo(a * 66.5, a * 33.5, a * 66.5, a * 33.5, a * 65, a * 35);
        e.bezierCurveTo(a * 63.5, a * 32.5, a * 63.5, a * 32.5, a * 62, a * 30);
        e.closePath();
        vt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 29, a * 21);
        e.bezierCurveTo(a * 31, a * 22, a * 31, a * 26, a * 29, a * 29);
        e.bezierCurveTo(a * 26, a * 28.5, a * 26, a * 28.5, a * 23, a * 28);
        e.bezierCurveTo(a * 23, a * 26.5, a * 23, a * 26.5, a * 23, a * 25);
        e.bezierCurveTo(a * 25, a * 23, a * 25, a * 23, a * 27, a * 21);
        e.closePath();
        vt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 18, a * 36);
        e.bezierCurveTo(a * 23, a * 36, a * 24, a * 42, a * 19, a * 46);
        e.bezierCurveTo(a * 12, a * 39, a * 15, a * 38, a * 18, a * 37);
        e.closePath();
        vt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 34);
        e.bezierCurveTo(a * 35, a * 36, a * 36, a * 39, a * 32, a * 45);
        e.bezierCurveTo(a * 25, a * 46, a * 25, a * 44, a * 30, a * 34);
        e.closePath();
        vt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59, a * 35);
        e.bezierCurveTo(a * 58, a * 27, a * 57, a * 27, a * 52, a * 31);
        e.bezierCurveTo(a * 50, a * 36, a * 53, a * 38, a * 58, a * 36);
        e.closePath();
        vt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 63, a * 46);
        e.bezierCurveTo(a * 64.5, a * 46.5, a * 64.5, a * 46.5, a * 66, a * 47);
        e.bezierCurveTo(a * 70, a * 50, a * 70, a * 53, a * 61, a * 55);
        e.bezierCurveTo(a * 62, a * 50.5, a * 62, a * 50.5, a * 63, a * 46);
        e.closePath();
        vt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 42);
        e.bezierCurveTo(a * 47, a * 41, a * 53, a * 47, a * 46, a * 51);
        e.bezierCurveTo(a * 38, a * 49, a * 39, a * 46, a * 41, a * 43);
        e.closePath();
        vt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 57);
        e.bezierCurveTo(a * 54, a * 57, a * 54, a * 58, a * 55, a * 61);
        e.bezierCurveTo(a * 54, a * 63, a * 52, a * 64, a * 48, a * 65);
        e.closePath();
        vt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 52);
        e.bezierCurveTo(a * 25, a * 51, a * 27, a * 50, a * 28, a * 54);
        e.bezierCurveTo(a * 27, a * 58, a * 24, a * 58, a * 22, a * 58);
        e.bezierCurveTo(a * 21, a * 55.5, a * 21, a * 55.5, a * 20, a * 53);
        e.closePath();
        vt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 61);
        e.bezierCurveTo(a * 37, a * 61, a * 39, a * 63, a * 39, a * 68);
        e.bezierCurveTo(a * 36, a * 68.5, a * 36, a * 68.5, a * 33, a * 69);
        e.bezierCurveTo(a * 30.5, a * 67.5, a * 30.5, a * 67.5, a * 28, a * 66);
        e.closePath();
        vt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 45);
        e.bezierCurveTo(a * 90, a * 46.5, a * 90, a * 46.5, a * 92, a * 48);
        e.bezierCurveTo(a * 92, a * 50, a * 92, a * 50, a * 92, a * 52);
        e.closePath();
        vt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96, a * 53);
        e.bezierCurveTo(a * 97.5, a * 55, a * 97.5, a * 55, a * 99, a * 57);
        e.bezierCurveTo(a * 97.5, a * 59.5, a * 97.5, a * 59.5, a * 96, a * 62);
        e.bezierCurveTo(a * 93.5, a * 60.5, a * 93.5, a * 60.5, a * 91, a * 59);
        e.bezierCurveTo(a * 91.5, a * 57, a * 91.5, a * 57, a * 92, a * 55);
        e.closePath();
        vt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 92, a * 71);
        e.bezierCurveTo(a * 94.5, a * 70.5, a * 94.5, a * 70.5, a * 97, a * 70);
        e.bezierCurveTo(a * 98.5, a * 72.5, a * 98.5, a * 72.5, a * 100, a * 75);
        e.bezierCurveTo(a * 97, a * 76.5, a * 97, a * 76.5, a * 94, a * 78);
        e.closePath();
        vt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 95, a * 82);
        e.bezierCurveTo(a * 96, a * 83, a * 96, a * 83, a * 97, a * 84);
        e.bezierCurveTo(a * 97, a * 85.5, a * 97, a * 85.5, a * 97, a * 87);
        e.bezierCurveTo(a * 93.5, a * 87.5, a * 93.5, a * 87.5, a * 90, a * 88);
        e.closePath();
        vt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 72);
        e.bezierCurveTo(a * 89, a * 76, a * 88, a * 81, a * 85, a * 82);
        e.bezierCurveTo(a * 80, a * 80, a * 82, a * 78, a * 85, a * 72);
        e.closePath();
        vt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 86);
        e.bezierCurveTo(a * 84, a * 88, a * 86, a * 88, a * 85, a * 93);
        e.bezierCurveTo(a * 80, a * 96, a * 79, a * 96, a * 76, a * 91);
        e.closePath();
        vt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84, a * 46);
        e.bezierCurveTo(a * 93, a * 51, a * 91, a * 62, a * 80, a * 78);
        e.bezierCurveTo(a * 74, a * 86, a * 66, a * 90, a * 60, a * 86);
        e.bezierCurveTo(a * 55, a * 79, a * 57, a * 73, a * 67, a * 57);
        e.bezierCurveTo(a * 71, a * 51, a * 79, a * 44, a * 84, a * 46);
        e.closePath();
        vt(e, c[5], c[6], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 76, a * 60);
        e.bezierCurveTo(a * 80, a * 66, a * 75, a * 74, a * 68, a * 74);
        e.bezierCurveTo(a * 60, a * 64, a * 68, a * 59, a * 76, a * 59);
        e.closePath();
        vt(e, c[7], c[8], a * 5);
        return d;
    }
    function Jd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 70;
        var a = b * 90;
        var i = b * 4;
        var j = b * 5;
        e.width = g;
        e.height = a;
        f.save();
        f.translate(b * -80, b * -70 + j);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        vt(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * -80, b * -70 + j);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
        f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
        f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
        f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
        f.closePath();
        vt(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * -80, b * -70 + j);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
        f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
        f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
        f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
        f.closePath();
        vt(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * 3, b * -93 + j);
        f.rotate(Math.PI / 5);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        vt(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * -80, b * -70);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        vt(f, d[0], d[1], i);
        f.restore();
        f.save();
        f.translate(b * -80, b * -70);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
        f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
        f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
        f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
        f.closePath();
        vt(f, d[0], d[1], i);
        f.restore();
        f.save();
        f.translate(b * -80, b * -70);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
        f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
        f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
        f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
        f.closePath();
        vt(f, d[0], d[1], i);
        f.restore();
        f.save();
        f.translate(b * 3, b * -93);
        f.rotate(Math.PI / 5);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        vt(f, d[0], d[1], i);
        f.restore();
        return e;
    }
    function Md(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 217;
        d.height = a * 215;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 113);
        e.bezierCurveTo(a * 135, a * 98, a * 136, a * 96, a * 142, a * 97);
        e.bezierCurveTo(a * 167, a * 106, a * 167, a * 106, a * 171, a * 109);
        e.bezierCurveTo(a * 173, a * 120, a * 173, a * 134, a * 169, a * 141);
        e.bezierCurveTo(a * 140, a * 149.5, a * 140, a * 149.5, a * 111, a * 158);
        e.closePath();
        vt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154, a * 103);
        e.bezierCurveTo(a * 167, a * 91, a * 175, a * 87, a * 176, a * 94);
        e.bezierCurveTo(a * 175, a * 102, a * 176, a * 102, a * 186, a * 103);
        e.bezierCurveTo(a * 191, a * 104, a * 192, a * 105, a * 185, a * 116);
        e.bezierCurveTo(a * 183, a * 120, a * 191, a * 124, a * 189, a * 129);
        e.bezierCurveTo(a * 185, a * 139, a * 178, a * 134, a * 166, a * 131);
        e.closePath();
        vt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60, a * 46);
        e.bezierCurveTo(a * 60, a * 34, a * 60, a * 29, a * 56, a * 19);
        e.bezierCurveTo(a * 52, a * 12, a * 52, a * 16, a * 49, a * 24);
        e.bezierCurveTo(a * 48, a * 27, a * 46, a * 28, a * 39, a * 27);
        e.bezierCurveTo(a * 33, a * 26, a * 34, a * 31, a * 35, a * 37);
        e.bezierCurveTo(a * 36, a * 41, a * 27, a * 46, a * 29, a * 52);
        e.bezierCurveTo(a * 36, a * 55, a * 35, a * 56, a * 31, a * 59);
        e.bezierCurveTo(a * 27, a * 65, a * 32, a * 64, a * 35, a * 62);
        e.closePath();
        vt(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46, a * 50);
        e.bezierCurveTo(a * 51, a * 35, a * 70, a * 32, a * 78, a * 29);
        e.bezierCurveTo(a * 84, a * 27, a * 113, a * 36, a * 127, a * 41);
        e.bezierCurveTo(a * 140, a * 47, a * 147, a * 69, a * 137, a * 73);
        e.bezierCurveTo(a * 124, a * 92, a * 117, a * 92, a * 109, a * 94);
        e.bezierCurveTo(a * 101, a * 96, a * 89, a * 92, a * 65, a * 83);
        e.bezierCurveTo(a * 54, a * 80, a * 46, a * 58, a * 46, a * 51);
        e.closePath();
        vt(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 40);
        e.bezierCurveTo(a * 49, a * 34, a * 49, a * 34, a * 47, a * 28);
        e.bezierCurveTo(a * 38, a * 28, a * 34, a * 27, a * 37, a * 37);
        e.bezierCurveTo(a * 43, a * 40.5, a * 43, a * 40.5, a * 49, a * 44);
        e.closePath();
        vt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 29, a * 48);
        e.bezierCurveTo(a * 38, a * 49, a * 38, a * 49, a * 47, a * 50);
        e.bezierCurveTo(a * 46.5, a * 51.5, a * 46.5, a * 51.5, a * 46, a * 53);
        e.bezierCurveTo(a * 40, a * 53.5, a * 40, a * 53.5, a * 34, a * 54);
        e.bezierCurveTo(a * 29, a * 51, a * 32, a * 51.5, a * 30, a * 49);
        e.closePath();
        vt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 89, a * 61);
        e.bezierCurveTo(a * 101, a * 70, a * 109, a * 90, a * 102, a * 90);
        e.bezierCurveTo(a * 97, a * 91, a * 87, a * 91, a * 60, a * 80);
        e.bezierCurveTo(a * 48, a * 65, a * 46, a * 56, a * 48, a * 53);
        e.bezierCurveTo(a * 50, a * 52, a * 66, a * 56, a * 89, a * 61);
        e.closePath();
        vt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 99, a * 59);
        e.bezierCurveTo(a * 115, a * 45, a * 125, a * 42, a * 129, a * 47);
        e.bezierCurveTo(a * 138, a * 56, a * 140, a * 63, a * 138, a * 67);
        e.bezierCurveTo(a * 131, a * 80, a * 122, a * 87, a * 114, a * 90);
        e.bezierCurveTo(a * 105, a * 80, a * 95, a * 62, a * 98, a * 61);
        e.closePath();
        vt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 62);
        e.bezierCurveTo(a * 139, a * 45, a * 153, a * 40, a * 150, a * 48);
        e.bezierCurveTo(a * 145, a * 57, a * 157, a * 63, a * 157, a * 70);
        e.bezierCurveTo(a * 157, a * 74, a * 142, a * 77, a * 142, a * 85);
        e.bezierCurveTo(a * 143, a * 91, a * 141, a * 92, a * 135, a * 90);
        e.bezierCurveTo(a * 132, a * 90, a * 132, a * 96, a * 124, a * 99);
        e.bezierCurveTo(a * 118, a * 93, a * 116, a * 77, a * 116, a * 64);
        e.closePath();
        vt(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 130);
        e.bezierCurveTo(a * 157, a * 115, a * 165, a * 111, a * 167, a * 115);
        e.bezierCurveTo(a * 170, a * 117, a * 171, a * 135, a * 167, a * 141);
        e.bezierCurveTo(a * 135.5, a * 149.5, a * 135.5, a * 149.5, a * 104, a * 158);
        e.closePath();
        vt(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 119);
        e.bezierCurveTo(a * 46, a * 120, a * 40, a * 118, a * 34, a * 116);
        e.bezierCurveTo(a * 28, a * 111, a * 41, a * 112, a * 39, a * 108);
        e.bezierCurveTo(a * 36, a * 100, a * 49, a * 102, a * 53, a * 95);
        e.bezierCurveTo(a * 57, a * 84, a * 58, a * 85, a * 63, a * 93);
        e.bezierCurveTo(a * 68, a * 96, a * 72, a * 94, a * 80, a * 88);
        e.bezierCurveTo(a * 80, a * 96, a * 78, a * 107, a * 66, a * 115);
        e.closePath();
        vt(e, c[9], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 64);
        e.bezierCurveTo(a * 133.5, a * 57, a * 133.5, a * 57, a * 149, a * 50);
        e.bezierCurveTo(a * 145, a * 54, a * 154, a * 65, a * 157, a * 68);
        e.bezierCurveTo(a * 138.5, a * 66.5, a * 138.5, a * 66.5, a * 120, a * 65);
        e.closePath();
        vt(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 65);
        e.bezierCurveTo(a * 129, a * 77, a * 129, a * 77, a * 140, a * 89);
        e.bezierCurveTo(a * 131, a * 89, a * 130, a * 92, a * 128, a * 96);
        e.bezierCurveTo(a * 123.5, a * 82, a * 123.5, a * 82, a * 119, a * 68);
        e.closePath();
        vt(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 112);
        e.bezierCurveTo(a * 63, a * 108, a * 78, a * 111, a * 88, a * 112);
        e.bezierCurveTo(a * 98, a * 122, a * 117, a * 136, a * 125, a * 157);
        e.bezierCurveTo(a * 123, a * 180, a * 123, a * 185, a * 118, a * 186);
        e.bezierCurveTo(a * 101, a * 190, a * 89, a * 191, a * 79, a * 187);
        e.bezierCurveTo(a * 53, a * 165, a * 50, a * 153, a * 47, a * 144);
        e.bezierCurveTo(a * 46, a * 128, a * 46, a * 124, a * 50, a * 112);
        e.closePath();
        vt(e, c[9], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 50, a * 114);
        e.bezierCurveTo(a * 81, a * 149, a * 80, a * 147, a * 80, a * 149);
        e.bezierCurveTo(a * 82, a * 155, a * 80, a * 182, a * 74, a * 182);
        e.bezierCurveTo(a * 60, a * 172, a * 52, a * 157, a * 47, a * 144);
        e.closePath();
        vt(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 85, a * 152);
        e.bezierCurveTo(a * 99, a * 150, a * 109, a * 152, a * 119, a * 156);
        e.bezierCurveTo(a * 122, a * 163, a * 122, a * 174, a * 117, a * 182);
        e.closePath();
        e.bezierCurveTo(a * 93, a * 188, a * 82, a * 187, a * 83, a * 179);
        vt(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104, a * 166);
        e.bezierCurveTo(a * 133, a * 165, a * 142, a * 168, a * 137, a * 173);
        e.bezierCurveTo(a * 127, a * 177, a * 137, a * 195, a * 126, a * 196);
        e.bezierCurveTo(a * 112, a * 195, a * 112, a * 194, a * 109, a * 199);
        e.bezierCurveTo(a * 105, a * 205, a * 102, a * 195, a * 96, a * 197);
        e.bezierCurveTo(a * 84, a * 201, a * 88, a * 198, a * 90, a * 187);
        e.bezierCurveTo(a * 96, a * 171, a * 97, a * 170, a * 103, a * 167);
        e.closePath();
        vt(e, c[9], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 168);
        e.bezierCurveTo(a * 118, a * 172.5, a * 118, a * 172.5, a * 131, a * 177);
        e.bezierCurveTo(a * 133, a * 190, a * 132, a * 199, a * 116, a * 194);
        e.bezierCurveTo(a * 110, a * 182, a * 110, a * 182, a * 104, a * 170);
        e.closePath();
        vt(e, c[10]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 169);
        e.bezierCurveTo(a * 100.5, a * 182, a * 100.5, a * 182, a * 99, a * 195);
        e.bezierCurveTo(a * 93.5, a * 196.5, a * 93.5, a * 196.5, a * 88, a * 198);
        e.bezierCurveTo(a * 94, a * 176, a * 96, a * 174, a * 101, a * 168);
        e.closePath();
        vt(e, c[9], c[9], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 107);
        e.bezierCurveTo(a * 64, a * 101, a * 64, a * 101, a * 64, a * 95);
        e.bezierCurveTo(a * 57, a * 86, a * 57, a * 84, a * 53, a * 97);
        e.bezierCurveTo(a * 55, a * 103.5, a * 55, a * 103.5, a * 57, a * 110);
        e.closePath();
        vt(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 40, a * 108);
        e.bezierCurveTo(a * 46.5, a * 111, a * 46.5, a * 111, a * 53, a * 114);
        e.bezierCurveTo(a * 50.5, a * 117, a * 50.5, a * 117, a * 48, a * 120);
        e.bezierCurveTo(a * 40.5, a * 117.5, a * 40.5, a * 117.5, a * 33, a * 115);
        e.bezierCurveTo(a * 36, a * 112, a * 36, a * 112, a * 39, a * 109);
        e.closePath();
        vt(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 189, a * 106);
        e.bezierCurveTo(a * 178.5, a * 110.5, a * 178.5, a * 110.5, a * 168, a * 115);
        e.bezierCurveTo(a * 168.5, a * 119, a * 168.5, a * 119, a * 169, a * 123);
        e.bezierCurveTo(a * 179, a * 124.5, a * 179, a * 124.5, a * 189, a * 126);
        e.bezierCurveTo(a * 182, a * 118, a * 183, a * 115, a * 188, a * 106);
        e.closePath();
        vt(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 69, a * 178);
        e.bezierCurveTo(a * 69, a * 141, a * 70, a * 136, a * 77, a * 137);
        e.bezierCurveTo(a * 88, a * 133, a * 101, a * 134, a * 108, a * 137);
        vt(e, undefined, c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 161);
        e.bezierCurveTo(a * 54, a * 124, a * 55, a * 119, a * 62, a * 119);
        e.bezierCurveTo(a * 74, a * 117, a * 85, a * 117, a * 93, a * 119);
        vt(e, undefined, c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 91, a * 29);
        e.bezierCurveTo(a * 74, a * 33, a * 62, a * 46, a * 57, a * 54);
        e.bezierCurveTo(a * 57, a * 63, a * 68, a * 76, a * 77, a * 87);
        vt(e, undefined, c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107, a * 33);
        e.bezierCurveTo(a * 82, a * 51, a * 80, a * 52, a * 79, a * 59);
        e.bezierCurveTo(a * 78, a * 65, a * 93, a * 86, a * 101, a * 93);
        vt(e, undefined, c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 98);
        e.bezierCurveTo(a * 126.5, a * 103, a * 126.5, a * 103, a * 123, a * 108);
        e.bezierCurveTo(a * 133.5, a * 107, a * 133.5, a * 107, a * 144, a * 106);
        e.bezierCurveTo(a * 138.5, a * 110, a * 138.5, a * 110, a * 133, a * 114);
        e.bezierCurveTo(a * 142, a * 114, a * 142, a * 114, a * 151, a * 114);
        e.bezierCurveTo(a * 146.5, a * 119.5, a * 146.5, a * 119.5, a * 142, a * 125);
        e.bezierCurveTo(a * 146.5, a * 127, a * 146.5, a * 127, a * 151, a * 129);
        e.bezierCurveTo(a * 147.5, a * 132, a * 147.5, a * 132, a * 144, a * 135);
        e.bezierCurveTo(a * 148, a * 137, a * 148, a * 137, a * 152, a * 139);
        e.bezierCurveTo(a * 149, a * 142.5, a * 149, a * 142.5, a * 146, a * 146);
        vt(e, Qh, c[3], a * 4);
        return d;
    }
    const Bd = 14;
    function Dd(f, e, i, j, k, n, o, p, q, h, l = 0) {
        var g = document.createElement("canvas");
        var r = g.getContext("2d");
        n = n ? n * f : 0;
        var b = Math.floor(f * i);
        r.font = b + "px Baloo Paaji";
        r.lineJoin = "round";
        p *= f;
        var t = o ? p * 2 : 0;
        if (q) {
            var m = Math.min(r.measureText(e).width + f * 2 + t, q);
        } else {
            m = r.measureText(e).width + f * 2 + t + f * l * 2;
        }
        b = (b + n + l) * f + t;
        g.width = m;
        g.height = b;
        if (o) {
            r.fillStyle = o;
            wt(r, 0, 0, m, b, p * 2);
            r.fill();
            r.translate(p, p);
        }
        r.textBaseline = "middle";
        r.font = i + "px Baloo Paaji";
        r.lineJoin = "round";
        if (k) {
            r.beginPath();
            r.fillStyle = k;
            r.fillText(e, 0, b / 2 + n - t / 2, m);
        }
        r.beginPath();
        if (h) {
            r.strokeStyle = h;
            r.lineWidth = l;
            r.strokeText(e, l, (b - t) / 2, m);
        }
        r.fillStyle = j;
        r.fillText(e, l, (b - t) / 2, m);
        return g;
    }
    const Ed = 3;
    function Id(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 220;
        var a = b * 230;
        var i = b * 100;
        var j = i / 4;
        var h = b * 20;
        e.width = g;
        e.height = a;
        f.translate(g / 2, a / 2 + h);
        f.globalAlpha = 0.5;
        zt(f, 7, i, j);
        vt(f, d[0]);
        f.globalAlpha = 1;
        f.translate(0, -h);
        zt(f, 7, i, j);
        vt(f, d[1]);
        zt(f, 6, i * 0.65, j * 0.65);
        vt(f, d[2]);
        return e;
    }
    const Sd = 6;
    const Qd = 7;
    function _d(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        var a = b * 220;
        var i = b * 220;
        var j = b * 100;
        var h = j / 4;
        f.width = a;
        f.height = i;
        g.translate(a / 2, i / 2);
        g.globalAlpha = c ? 0.5 : 1;
        if (!c) {
            g.translate(b * 0, b * -8);
        }
        zt(g, 7, j, h);
        vt(g, c ? d[0] : d[1]);
        g.globalAlpha = 1;
        if (e == 0) {
            zt(g, 6, j * 0.65, h * 0.65);
            vt(g, d[2]);
        } else if (e == 1) {
            g.translate(b * 20, b * 20);
            zt(g, 6, j * 0.45, h * 0.4);
            vt(g, d[2]);
        }
        return f;
    }
    const Fd = 11;
    function Rd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 140;
        var a = b * 150;
        var i = b * 10;
        var j = b * 4;
        e.width = g;
        e.height = a;
        f.translate(b * -50, b * -38 + i);
        f.globalAlpha = c ? 0.5 : 1;
        f.beginPath();
        f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
        f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
        f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
        f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
        f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
        f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
        f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
        f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
        f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
        f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
        f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
        f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
        f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
        f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
        f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
        f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
        f.closePath();
        vt(f, d[0]);
        f.translate(0, 0 - i);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
        f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
        f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
        f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
        f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
        f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
        f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
        f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
        f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
        f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
        f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
        f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
        f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
        f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
        f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
        f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
        f.closePath();
        vt(f, d[1], d[2], j);
        return e;
    }
    function jd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * c * 2;
        var a = b * c * 2;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        f.translate(i, j);
        ut(f, 0, 0, b * c);
        vt(f, d);
        return e;
    }
    function Gd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 220;
        d.height = a * 180;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * -90, a * -150);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104, a * 237.8000030517578);
        e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
        e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
        e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
        e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
        e.closePath();
        vt(e, c[5], c[5], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 211.20000457763672);
        e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
        e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
        e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
        e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
        e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
        e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
        e.closePath();
        vt(e, c[5], c[5], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 120, a * 207);
        e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
        e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
        e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
        e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
        e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
        e.closePath();
        vt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 238);
        e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
        e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
        e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
        e.closePath();
        vt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 211);
        e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
        e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
        e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
        e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
        e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
        e.closePath();
        vt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 280, a * 206);
        e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
        e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
        e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
        e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
        e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
        e.closePath();
        vt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 138, a * 298.40000915527344);
        e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
        e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
        e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
        e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
        e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
        e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
        e.closePath();
        vt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 177.5999984741211);
        e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
        e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
        e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
        e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
        e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
        e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
        e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
        e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
        e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
        e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
        e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
        e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
        e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
        e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
        e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
        e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
        e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
        e.closePath();
        vt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 175.5999984741211);
        e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
        e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
        e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
        e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
        e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
        e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
        e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
        e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
        e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
        e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
        e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
        e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
        e.closePath();
        vt(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 198, a * 161.4000015258789);
        e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
        e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
        e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
        e.closePath();
        vt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 194);
        e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
        e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
        e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
        e.closePath();
        vt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
        e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
        e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
        e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
        e.closePath();
        vt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 156, a * 188);
        e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
        e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
        e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
        e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
        e.closePath();
        vt(e, Js, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 189);
        e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
        e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
        e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
        e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
        e.closePath();
        vt(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 262);
        e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
        e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
        e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
        e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
        e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
        e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
        e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
        e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
        e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
        e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
        e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
        e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
        e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
        e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
        e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
        e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
        e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
        e.closePath();
        vt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 264);
        e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
        e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
        e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
        e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
        e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
        e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
        e.closePath();
        vt(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 140, a * 265.33333587646484);
        e.bezierCurveTo(a * 141, a * 250.33333587646484, a * 148, a * 244.33333587646484, a * 160, a * 241.33333587646484);
        e.bezierCurveTo(a * 200, a * 241.33333587646484, a * 200, a * 241.33333587646484, a * 240, a * 241.33333587646484);
        e.bezierCurveTo(a * 256, a * 243.33333587646484, a * 260, a * 255.33333587646484, a * 260, a * 265.33333587646484);
        e.bezierCurveTo(a * 261, a * 281.33333587646484, a * 247, a * 289.33333587646484, a * 240, a * 289.33333587646484);
        e.bezierCurveTo(a * 161, a * 289.33333587646484, a * 200.5, a * 289.33333587646484, a * 161, a * 289.33333587646484);
        e.bezierCurveTo(a * 149, a * 288.33333587646484, a * 142, a * 278.33333587646484, a * 140, a * 266.33333587646484);
        e.closePath();
        vt(e, undefined, c[4], a * 6);
        e.globalAlpha = 0.5;
        e.scale(1, 1);
        e.translate(a * 105, a * 155);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59.27557373046875, a * 20.406280517578125);
        e.bezierCurveTo(a * 74.27557373046875, a * 5.406280517578125, a * 90.27557373046875, a * 6.406280517578125, a * 99.27557373046875, a * 5.406280517578125);
        e.bezierCurveTo(a * 120.27557373046875, a * 5.406280517578125, a * 126.27557373046875, a * 10.406280517578125, a * 136.27557373046875, a * 20.406280517578125);
        e.bezierCurveTo(a * 157.77557373046875, a * 37.906280517578125, a * 157.77557373046875, a * 37.906280517578125, a * 179.27557373046875, a * 55.406280517578125);
        e.bezierCurveTo(a * 190.27557373046875, a * 63.406280517578125, a * 192.27557373046875, a * 77.40628051757812, a * 189.27557373046875, a * 91.40628051757812);
        e.bezierCurveTo(a * 183.27557373046875, a * 108.40628051757812, a * 176.27557373046875, a * 110.40628051757812, a * 169.27557373046875, a * 118.40628051757812);
        e.bezierCurveTo(a * 152.27557373046875, a * 133.40628051757812, a * 152.27557373046875, a * 133.40628051757812, a * 135.27557373046875, a * 148.40628051757812);
        e.bezierCurveTo(a * 87.27557373046875, a * 143.40628051757812, a * 87.27557373046875, a * 143.40628051757812, a * 39.27557373046875, a * 138.40628051757812);
        e.bezierCurveTo(a * 26.77557373046875, a * 123.40628051757812, a * 26.77557373046875, a * 123.40628051757812, a * 14.27557373046875, a * 108.40628051757812);
        e.bezierCurveTo(a * 2.27557373046875, a * 95.40628051757812, a * 2.27557373046875, a * 92.40628051757812, a * 3.27557373046875, a * 83.40628051757812);
        e.bezierCurveTo(a * 4.27557373046875, a * 63.406280517578125, a * 12.27557373046875, a * 60.406280517578125, a * 24.27557373046875, a * 40.406280517578125);
        e.closePath();
        vt(e, c[5], c[5], a * 4);
        e.globalAlpha = 1;
        e.translate(a * -110, a * -155);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104, a * 237.8000030517578);
        e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
        e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
        e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
        e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
        e.closePath();
        vt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 211.20000457763672);
        e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
        e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
        e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
        e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
        e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
        e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
        e.closePath();
        vt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 120, a * 207);
        e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
        e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
        e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
        e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
        e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
        e.closePath();
        vt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 238);
        e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
        e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
        e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
        e.closePath();
        vt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 211);
        e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
        e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
        e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
        e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
        e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
        e.closePath();
        vt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 280, a * 206);
        e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
        e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
        e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
        e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
        e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
        e.closePath();
        vt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 138, a * 298.40000915527344);
        e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
        e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
        e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
        e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
        e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
        e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
        e.closePath();
        vt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 177.5999984741211);
        e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
        e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
        e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
        e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
        e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
        e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
        e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
        e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
        e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
        e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
        e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
        e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
        e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
        e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
        e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
        e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
        e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
        e.closePath();
        vt(e, c[2], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 175.5999984741211);
        e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
        e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
        e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
        e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
        e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
        e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
        e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
        e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
        e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
        e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
        e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
        e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
        e.closePath();
        vt(e, Js, c[3], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 198, a * 161.4000015258789);
        e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
        e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
        e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
        e.closePath();
        vt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 194);
        e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
        e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
        e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
        e.closePath();
        vt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
        e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
        e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
        e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
        e.closePath();
        vt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 156, a * 188);
        e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
        e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
        e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
        e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
        e.closePath();
        vt(e, undefined, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 189);
        e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
        e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
        e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
        e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
        e.closePath();
        vt(e, undefined, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 262);
        e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
        e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
        e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
        e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
        e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
        e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
        e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
        e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
        e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
        e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
        e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
        e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
        e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
        e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
        e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
        e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
        e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
        e.closePath();
        vt(e, c[0], c[0], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 264);
        e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
        e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
        e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
        e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
        e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
        e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
        e.closePath();
        vt(e, qn, c[1], a * 2);
        return d;
    }
    function Wd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 120;
        var a = b * 150;
        var i = b * 60;
        var j = i / 4;
        var h = b * 15;
        e.width = g;
        e.height = a;
        f.save();
        f.translate(g / 2 + b * 0, a / 2 + b * 0 + h);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 0.5;
        zt(f, 8, i, j);
        vt(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 11, a / 2 + b * 12);
        f.globalAlpha = 1;
        f.rotate(Math.PI / 3);
        f.translate(0, -h);
        zt(f, 8, i, j);
        vt(f, d[1]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 9, a / 2 - b * 12);
        f.rotate(Math.PI / 2.8);
        zt(f, 5, i * 0.5, j * 0.4);
        vt(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 19, a / 2 + b * 5);
        f.rotate(Math.PI / 1);
        zt(f, 5, i * 0.5, j * 0.4);
        vt(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 8, a / 2 + b * 20);
        f.rotate(Math.PI / 2.25);
        zt(f, 5, i * 0.5, j * 0.4);
        vt(f, d[2]);
        f.restore();
        return e;
    }
    function Ld(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96.5, a * 277.34375);
        e.bezierCurveTo(a * 197.5, a * 259.84375, a * 197.5, a * 259.84375, a * 298.5, a * 242.34375);
        e.bezierCurveTo(a * 311.5, a * 231.34375, a * 307.5, a * 168.34375, a * 298.5, a * 150.34375);
        e.bezierCurveTo(a * 198, a * 170.34375, a * 198, a * 170.34375, a * 97.5, a * 190.34375);
        e.closePath();
        vt(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98.5, a * 214.34375);
        e.bezierCurveTo(a * 199, a * 196.34375, a * 199, a * 196.34375, a * 299.5, a * 178.34375);
        e.closePath();
        vt(e, Zk, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98.5, a * 247.34375);
        e.bezierCurveTo(a * 201.5, a * 229.34375, a * 201.5, a * 229.34375, a * 304.5, a * 211.34375);
        e.closePath();
        vt(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 97.5, a * 189.34375);
        e.bezierCurveTo(a * 97, a * 199.84375, a * 97, a * 199.84375, a * 96.5, a * 210.34375);
        e.bezierCurveTo(a * 110.5, a * 204.34375, a * 110.5, a * 204.34375, a * 124.5, a * 198.34375);
        e.bezierCurveTo(a * 137.5, a * 203.84375, a * 137.5, a * 203.84375, a * 150.5, a * 209.34375);
        e.bezierCurveTo(a * 172, a * 197.84375, a * 172, a * 197.84375, a * 193.5, a * 186.34375);
        e.bezierCurveTo(a * 211.5, a * 189.84375, a * 211.5, a * 189.84375, a * 229.5, a * 193.34375);
        e.bezierCurveTo(a * 240.5, a * 193.34375, a * 240.5, a * 193.34375, a * 251.5, a * 193.34375);
        e.bezierCurveTo(a * 261, a * 182.84375, a * 261, a * 182.84375, a * 270.5, a * 172.34375);
        e.bezierCurveTo(a * 287.5, a * 169.34375, a * 287.5, a * 169.34375, a * 304.5, a * 166.34375);
        e.bezierCurveTo(a * 304.5, a * 156.34375, a * 300.5, a * 145.34375, a * 298.5, a * 147.34375);
        e.closePath();
        vt(e, c[3], c[4], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 300.5, a * 147.34375);
        e.bezierCurveTo(a * 293.5, a * 121.34375, a * 278.5, a * 106.34375, a * 256.5, a * 101.34375);
        e.bezierCurveTo(a * 176.5, a * 145.34375, a * 176.5, a * 145.34375, a * 96.5, a * 189.34375);
        e.closePath();
        vt(e, c[5], c[6], a * 12);
        ut(e, a * 252.5, a * 129.34375, a * 18.027756377319946);
        vt(e, c[7]);
        ut(e, a * 248.5, a * 121.34375, a * 8.246211251235321);
        vt(e, c[8]);
        return d;
    }
    function Od(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 18;
        var a = b * 18;
        e.width = g;
        e.height = a;
        var i = b * 9;
        var j = b * 9;
        var k = b * 8;
        f.save();
        f.translate(i, j);
        f.globalAlpha = 1;
        ut(f, 0, 0, k);
        vt(f, d[0]);
        k = b * 3;
        i = 0;
        j = b * -3;
        f.translate(i, j);
        f.globalAlpha = 1;
        ut(f, 0, 0, k);
        vt(f, d[1]);
        f.restore();
        return e;
    }
    function Nd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 180;
        var a = b * 210;
        var i = (h = b * 60) / 4;
        var j = b * 20;
        e.width = g;
        e.height = a;
        f.save();
        f.translate(g / 2 - b * 0, a / 2 - b * 35 + j);
        f.rotate(Math.PI / -1.8);
        f.globalAlpha = 0.5;
        f.translate(b * 0, b * -20);
        zt(f, 5, h, i);
        vt(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 10, a / 2 + b * 15 + j);
        f.rotate(Math.PI / 2);
        f.globalAlpha = 0.5;
        f.translate(b * 0, b * -20);
        zt(f, 5, h, i);
        vt(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 50, a / 2 + b * 40 + j);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 0.5;
        f.translate(0, b * -20);
        zt(f, 5, h, i);
        vt(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 0, a / 2 - b * 35);
        f.rotate(Math.PI / -1.8);
        f.globalAlpha = 1;
        f.translate(b * 0, b * -20);
        zt(f, 5, h, i);
        vt(f, d[1]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 10, a / 2 + b * 15);
        f.rotate(Math.PI / 2);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        zt(f, 5, h, i);
        vt(f, d[1]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 50, a / 2 + b * 40);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        zt(f, 5, h, i);
        vt(f, d[1]);
        f.restore();
        var h;
        i = (h = b * 30) / 4;
        f.save();
        f.translate(g / 2 + b * 5, a / 2 - b * 20);
        f.rotate(Math.PI / -1.8);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        zt(f, 5, h, i);
        vt(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 0, a / 2 + b * 10);
        f.rotate(Math.PI / 2);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        zt(f, 5, h, i);
        vt(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 45, a / 2 + b * 35);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        zt(f, 5, h, i);
        vt(f, d[2]);
        f.restore();
        ut(f, g / 2 - b * 7, a / 2 + b * 7, 5);
        vt(f, d[2]);
        return e;
    }
    function Hd(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 80;
        c.height = a * 100;
        d.scale(0.5, 0.5);
        d.translate(10, 15);
        d.globalAlpha = 0.5;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 47, a * 5);
        d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
        d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
        d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
        d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
        d.closePath();
        vt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 17, a * 70);
        d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
        vt(d, undefined, b[0], a * 10);
        d.translate(0, -10);
        d.globalAlpha = 1;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 47, a * 5);
        d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
        d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
        d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
        d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
        d.closePath();
        vt(d, b[1], b[2], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 17, a * 70);
        d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
        vt(d, undefined, b[2], a * 8);
        d.globalAlpha = 0.5;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 17, a * 70);
        d.bezierCurveTo(a * 33, a * 52, a * 39, a * 33, a * 48, a * 7);
        vt(d, sl, b[2], a * 8);
        return c;
    }
    function Hd(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 234;
        c.height = a * 183;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 25);
        d.bezierCurveTo(a * 150, a * 3, a * 181, a * 22, a * 203, a * 41);
        d.bezierCurveTo(a * 225, a * 63, a * 225, a * 105, a * 198, a * 133);
        d.bezierCurveTo(a * 179, a * 157, a * 134, a * 178, a * 81, a * 164);
        d.bezierCurveTo(a * 19, a * 148, a * 6, a * 95, a * 21, a * 66);
        d.bezierCurveTo(a * 34, a * 39, a * 52, a * 33, a * 75, a * 25);
        d.closePath();
        vt(d, b[0], b[0], a * 4);
        return c;
    }
    function Pt(b, c, d, e, f) {
        var g = document.createElement("canvas");
        var a = g.getContext("2d");
        if (e == 0) {
            var i = b * 270;
            var j = b * 250;
            g.width = i;
            g.height = j;
            a.beginPath();
            a.moveTo(b * 140, b * 3);
            a.translate(b * -25, b * -20);
            a.bezierCurveTo(b * 218, b * 31, b * 251, b * 61, b * 265, b * 85);
            a.bezierCurveTo(b * 278, b * 108, b * 295, b * 160, b * 285, b * 195);
            a.bezierCurveTo(b * 271, b * 242, b * 213, b * 268, b * 188, b * 266);
            a.bezierCurveTo(b * 139, b * 262, b * 70, b * 244, b * 47, b * 204);
            a.bezierCurveTo(b * 20, b * 158, b * 35, b * 78, b * 59, b * 56);
            a.bezierCurveTo(b * 90, b * 28, b * 124, b * 23, b * 140, b * 23);
            a.closePath();
            vt(a, d[0]);
        } else if (e == 1) {
            i = b * 430;
            j = b * 350;
            g.width = i;
            g.height = j;
            a.beginPath();
            a.moveTo(b * 180, b * 5);
            a.translate(b * -30, b * -60);
            a.bezierCurveTo(b * 283, b * 60, b * 265, b * 163, b * 335, b * 206);
            a.bezierCurveTo(b * 376, b * 231, b * 492, b * 299, b * 434, b * 357);
            a.bezierCurveTo(b * 371, b * 421, b * 289, b * 394, b * 255, b * 386);
            a.bezierCurveTo(b * 218, b * 377, b * 91, b * 359, b * 50, b * 272);
            a.bezierCurveTo(b * 12, b * 192, b * 107, b * 75, b * 178, b * 69);
            a.closePath();
            vt(a, d[0]);
        } else if (e == 2) {
            i = b * 400;
            j = b * 300;
            g.width = i;
            g.height = j;
            a.beginPath();
            a.moveTo(b * 80, b * 52);
            a.translate(b * -40, b * -30);
            a.bezierCurveTo(b * 124, b * 77, b * 241, b * 22, b * 311, b * 65);
            a.bezierCurveTo(b * 352, b * 90, b * 404, b * 176, b * 346, b * 234);
            a.bezierCurveTo(b * 283, b * 298, b * 179, b * 299, b * 145, b * 291);
            a.bezierCurveTo(b * 108, b * 282, b * 100, b * 239, b * 63, b * 205);
            a.bezierCurveTo(b * 37, b * 181, b * 45, b * 131, b * 80, b * 107);
            a.closePath();
            vt(a, d[0]);
        }
        return g;
    }
    function Ud(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 373;
        d.height = a * 314;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 184.048583984375, a * 69.1805419921875);
        wt(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
        e.restore();
        vt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.048583984375, a * 61.6805419921875);
        e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
        e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
        e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
        e.closePath();
        vt(e, c[0], c[0], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224.048583984375, a * 56.6805419921875);
        e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
        e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
        e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
        e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
        e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
        e.closePath();
        vt(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 183.548583984375, a * 119.6805419921875);
        wt(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
        e.restore();
        vt(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 155.6805419921875);
        wt(e, a * -121, a * -52, a * 242, a * 104, a * 40);
        e.restore();
        vt(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 205.1805419921875);
        wt(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
        e.restore();
        vt(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 185.048583984375, a * 204.1805419921875);
        wt(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
        e.restore();
        vt(e, c[0], c[0], a * 6);
        ut(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
        vt(e, c[0], c[0], a * 6);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224.048583984375, a * 56.6805419921875);
        e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
        e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
        e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
        e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
        e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
        e.closePath();
        vt(e, c[3], c[4], a * 6);
        e.save();
        e.translate(a * 184.048583984375, a * 69.1805419921875);
        wt(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
        e.restore();
        vt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.048583984375, a * 61.6805419921875);
        e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
        e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
        e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
        e.closePath();
        vt(e, c[1], c[2], a * 6);
        e.save();
        e.translate(a * 183.548583984375, a * 119.6805419921875);
        wt(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
        e.restore();
        vt(e, c[5], c[4], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 155.6805419921875);
        wt(e, a * -121, a * -52, a * 242, a * 104, a * 40);
        e.restore();
        vt(e, c[3], c[4], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 205.1805419921875);
        wt(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
        e.restore();
        vt(e, c[6], c[4], a * 6);
        e.globalCompositeOperation = "destination-out";
        e.save();
        e.translate(a * 185.048583984375, a * 204.1805419921875);
        wt(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
        e.restore();
        vt(e, c[7], c[8], a * 6);
        e.globalCompositeOperation = "source-over";
        e.globalAlpha = 0.5;
        e.save();
        e.translate(a * 185.048583984375, a * 204.1805419921875);
        wt(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
        e.restore();
        vt(e, c[7], c[8], a * 6);
        e.globalAlpha = 1;
        e.save();
        ut(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
        vt(e, c[3], c[4], a * 6);
        e.restore();
        return d;
    }
    const Yd = 16;
    function Kd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100.5, a * 126.34375);
        e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
        e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
        e.closePath();
        vt(e, c[0], c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 106.5, a * 131.34375);
        e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
        e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 137.34375);
        e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
        e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
        e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
        e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 196.5, a * 151.34375);
        e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
        e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
        e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
        e.closePath();
        vt(e, c[0], c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154.5, a * 222.34375);
        e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
        e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
        e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
        e.closePath();
        vt(e, c[0], c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 279.5, a * 294.34375);
        e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
        e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
        e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
        e.closePath();
        vt(e, c[0], c[0], a * 12);
        e.globalAlpha = 1;
        e.translate(a * -10, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100.5, a * 126.34375);
        e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
        e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
        e.closePath();
        vt(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 106.5, a * 131.34375);
        e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
        e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 137.34375);
        e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
        e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
        e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
        e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
        e.closePath();
        vt(e, c[4]);
        ut(e, a * 125.5, a * 140.34375, a * 11.180339887498949);
        vt(e, c[5]);
        ut(e, a * 122.5, a * 135.34375, a * 5.0990195135927845);
        vt(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 196.5, a * 151.34375);
        e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
        e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
        e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
        e.closePath();
        vt(e, c[7], c[8], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154.5, a * 222.34375);
        e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
        e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
        e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
        e.closePath();
        vt(e, c[7], c[8], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 279.5, a * 294.34375);
        e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
        e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
        e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
        e.closePath();
        vt(e, c[7], c[8], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 296.5, a * 287.34375);
        e.bezierCurveTo(a * 311.5, a * 291.34375, a * 311.5, a * 291.34375, a * 326.5, a * 295.34375);
        e.closePath();
        vt(e, undefined, c[9], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 294.5, a * 289.34375);
        e.bezierCurveTo(a * 308.5, a * 297.34375, a * 308.5, a * 297.34375, a * 322.5, a * 305.34375);
        e.closePath();
        vt(e, Da, c[9], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 294.5, a * 291.34375);
        e.bezierCurveTo(a * 304, a * 303.34375, a * 304, a * 303.34375, a * 313.5, a * 315.34375);
        e.closePath();
        vt(e, zr, c[9], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226.5, a * 161.34375);
        e.bezierCurveTo(a * 230.5, a * 160.34375, a * 236.5, a * 158.34375, a * 238.5, a * 161.34375);
        e.bezierCurveTo(a * 238.5, a * 157.34375, a * 228.5, a * 159.34375, a * 227.5, a * 161.34375);
        e.closePath();
        vt(e, undefined, c[9], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167.5, a * 248.34375);
        e.bezierCurveTo(a * 165.5, a * 251.34375, a * 168.5, a * 256.34375, a * 168.5, a * 253.34375);
        e.bezierCurveTo(a * 166.5, a * 252.34375, a * 168.5, a * 246.34375, a * 166.5, a * 247.34375);
        e.closePath();
        vt(e, ns, c[9], a * 3);
        return d;
    }
    function Vd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 309;
        d.height = a * 287;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34.5, a * 38.53125);
        e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
        e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
        e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
        e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
        e.closePath();
        vt(e, c[0], c[0], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143.5, a * 74.53125);
        e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
        e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
        e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
        e.closePath();
        vt(e, c[0], c[0], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 142.53125);
        e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
        e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
        e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
        e.closePath();
        vt(e, c[0], c[0], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 236.5, a * 189.53125);
        e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
        e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
        e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
        e.closePath();
        vt(e, c[0], c[0], a * 10);
        e.globalAlpha = 1;
        e.translate(a * -10, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34.5, a * 38.53125);
        e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
        e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
        e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
        e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
        e.closePath();
        vt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143.5, a * 74.53125);
        e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
        e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
        e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
        e.closePath();
        vt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 142.53125);
        e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
        e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
        e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
        e.closePath();
        vt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 236.5, a * 189.53125);
        e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
        e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
        e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
        e.closePath();
        vt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 109.5, a * 51.53125);
        e.bezierCurveTo(a * 107.5, a * 92.53125, a * 91.5, a * 95.53125, a * 59.5, a * 101.53125);
        vt(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 51.53125);
        e.bezierCurveTo(a * 71, a * 64.53125, a * 69.5, a * 76.53125, a * 69.5, a * 77.53125);
        e.closePath();
        vt(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 63.53125);
        e.bezierCurveTo(a * 70.5, a * 65.03125, a * 70.5, a * 65.03125, a * 56.5, a * 66.53125);
        e.closePath();
        vt(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125.5, a * 84.53125);
        e.bezierCurveTo(a * 125.5, a * 110.03125, a * 125.5, a * 110.03125, a * 125.5, a * 135.53125);
        e.closePath();
        vt(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 149.5, a * 108.53125);
        e.bezierCurveTo(a * 150, a * 137.03125, a * 150, a * 137.03125, a * 150.5, a * 165.53125);
        e.closePath();
        vt(e, c[1], c[2], a * 7);
        return d;
    }
    function Xd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 130;
        d.height = a * 142;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 65, a * 80);
        e.rotate(0.2);
        zt(e, 9, a * 60, a * 10);
        e.restore();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 65, a * 71);
        e.rotate(0.2);
        zt(e, 9, a * 60, a * 10);
        vt(e, c[1], c[2], 4);
        e.rotate(-0.32);
        zt(e, 9, a * 38, a * 10);
        vt(e, c[3], c[4], 4);
        e.rotate(0.68);
        zt(e, 9, a * 20, a * 8);
        vt(e, c[5], c[6], 6);
        e.restore();
        return d;
    }
    function Zd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 130;
        var a = b * 142;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        f.translate(i, j + b * 7);
        f.globalAlpha = c ? 0.5 : 1;
        ut(f, 0, 0, b * 60);
        vt(f, d[0]);
        f.translate(0, b * -7);
        f.globalAlpha = 1;
        ut(f, 0, 0, b * 60);
        vt(f, d[1], d[2], b * 4);
        ut(f, 0, 0, b * 40);
        vt(f, d[3]);
        ut(f, 0, 0, b * 25);
        vt(f, d[4], d[5], b * 8);
        return e;
    }
    const $d = 2;
    function Qt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 130;
        d.height = a * 148;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 65, a * 85);
        e.rotate(1.4);
        zt(e, 7, a * 60, a * 10);
        e.restore();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 65, a * 74);
        e.rotate(1.4);
        zt(e, 7, a * 60, a * 10);
        vt(e, c[1], c[2], 4);
        e.rotate(0.64);
        zt(e, 7, a * 40, a * 10);
        vt(e, c[3], c[4], 4);
        e.rotate(0.12);
        zt(e, 7, a * 23, a * 5);
        e.restore();
        vt(e, c[5]);
        return d;
    }
    function Rt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 300;
        d.height = a * 300;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 150, a * 160);
        e.rotate(6.28);
        zt(e, 6, a * 146, a * 30);
        e.restore();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(6.28);
        zt(e, 6, a * 146, a * 30);
        e.restore();
        vt(e, c[1], c[2], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        zt(e, 6, a * 105, a * 30);
        e.restore();
        vt(e, c[3], c[3], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        zt(e, 6, a * 66, a * 30);
        e.restore();
        vt(e, c[4], c[2], a * 8);
        e.save();
        e.translate(a * 131, a * 116);
        zt(e, 7, a * 17, a * 8);
        e.restore();
        vt(e, c[6]);
        e.save();
        e.translate(a * 163, a * 168);
        zt(e, 7, a * 25, a * 8);
        e.restore();
        vt(e, c[6]);
        e.save();
        e.translate(a * 117, a * 151);
        zt(e, 7, a * 11, a * 8);
        e.restore();
        vt(e, c[6]);
        e.save();
        e.translate(a * 167, a * 122);
        zt(e, 7, a * 12, a * 8);
        e.restore();
        vt(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 207);
        e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
        e.closePath();
        vt(e, undefined, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 100);
        e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
        e.closePath();
        vt(e, undefined, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 183, a * 100);
        e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
        e.closePath();
        vt(e, uj, c[2], a * 8);
        return d;
    }
    function St(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 98;
        e.translate(0, a * 4);
        if ($g === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            e.save();
            e.translate(a * 44, a * 50);
            e.rotate(1.4);
            zt(e, 7, a * 41, a * 10);
            e.restore();
            vt(e, c[0]);
        }
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(1.4);
        zt(e, 7, a * 41, a * 10);
        vt(e, c[1], c[2], a * 4);
        zt(e, 7, a * 35, a * 10);
        vt(e, c[3], c[4], a * 4);
        zt(e, 7, a * 23, a * 5);
        e.restore();
        vt(e, c[5]);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        wt(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        vt(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        wt(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        vt(e, c[4], c[4], a * 2);
        ut(e, a * 45, a * 29, a * 7);
        vt(e, c[5]);
        ut(e, a * 45, a * 61, a * 7);
        vt(e, c[5]);
        ut(e, a * 28, a * 45, a * 7);
        vt(e, c[5]);
        ut(e, a * 62, a * 45, a * 7);
        vt(e, c[5]);
        return d;
    }
    function Tt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 128;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 7);
        e.bezierCurveTo(a * 169, a * 14, a * 212, a * 9, a * 241, a * 5);
        e.bezierCurveTo(a * 211, a * 63, a * 158, a * 92, a * 103, a * 109);
        e.bezierCurveTo(a * 73, a * 126, a * 54, a * 124, a * 6, a * 99);
        e.bezierCurveTo(a * 82, a * 63, a * 113, a * 35, a * 137, a * 8);
        e.closePath();
        vt(e, c[0], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 73, a * 124);
        e.bezierCurveTo(a * 111, a * 126, a * 162, a * 97, a * 203, a * 61);
        e.bezierCurveTo(a * 156, a * 98, a * 131, a * 106, a * 105, a * 109);
        e.bezierCurveTo(a * 99, a * 121, a * 87, a * 124, a * 72, a * 124);
        e.closePath();
        vt(e, c[2], c[3], a * 1);
        return d;
    }
    function Ut(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 101;
        e.translate(a * 0, a * 5);
        if ($g === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            ut(e, a * 44, a * 55, a * 41);
            vt(e, c[0]);
        }
        e.globalAlpha = 1;
        ut(e, a * 44, a * 45, a * 41);
        vt(e, c[1], c[2], a * 4);
        ut(e, a * 44, a * 45, a * 31);
        vt(e, c[3]);
        e.save();
        e.translate(a * 45, a * 45);
        wt(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        vt(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        wt(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        vt(e, c[4], c[4], a * 2);
        ut(e, a * 45, a * 29, a * 7);
        vt(e, c[5]);
        ut(e, a * 45, a * 61, a * 7);
        vt(e, c[5]);
        ut(e, a * 28, a * 45, a * 7);
        vt(e, c[5]);
        ut(e, a * 62, a * 45, a * 7);
        vt(e, c[5]);
        return d;
    }
    function Vt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 300;
        d.height = a * 300;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 150, a * 160);
        e.rotate(6.28);
        zt(e, 6, a * 146, a * 30);
        e.restore();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(6.28);
        zt(e, 6, a * 146, a * 30);
        e.restore();
        vt(e, c[1], c[2], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        zt(e, 6, a * 105, a * 30);
        e.restore();
        vt(e, c[3], c[3], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        zt(e, 6, a * 66, a * 30);
        e.restore();
        vt(e, c[4], c[2], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        zt(e, 6, a * 31, a * 30);
        e.restore();
        vt(e, c[5], c[6], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 207);
        e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
        e.closePath();
        vt(e, undefined, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 100);
        e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
        e.closePath();
        vt(e, Ga, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 183, a * 100);
        e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
        e.closePath();
        vt(e, undefined, c[2], a * 8);
        return d;
    }
    function Wt(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 372;
        c.height = a * 375;
        d.globalAlpha = 0.5;
        d.translate(a * 15, a * 15);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
        d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
        d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
        d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
        d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
        d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
        d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
        d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
        d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
        d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
        d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
        d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
        d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
        d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
        d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
        d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
        d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
        d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
        d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
        d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
        d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
        d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
        d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
        d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
        d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
        d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
        d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
        d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
        d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
        d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
        d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
        d.closePath();
        vt(d, b[0]);
        d.globalAlpha = 1;
        d.translate(a * -15, a * -15);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
        d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
        d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
        d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
        d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
        d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
        d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
        d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
        d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
        d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
        d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
        d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
        d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
        d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
        d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
        d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
        d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
        d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
        d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
        d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
        d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
        d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
        d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
        d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
        d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
        d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
        d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
        d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
        d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
        d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
        d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
        d.closePath();
        vt(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 186.00003051757812, a * 192.94886779785156);
        d.bezierCurveTo(a * 185.00003051757812, a * 66.94886779785156, a * 184.50003051757812, a * 104.94886779785156, a * 183.00003051757812, a * 16.948867797851562);
        d.bezierCurveTo(a * 216.00003051757812, a * 47.94886779785156, a * 219.00003051757812, a * 80.94886779785156, a * 218.00003051757812, a * 113.94886779785156);
        d.bezierCurveTo(a * 209.00003051757812, a * 165.94886779785156, a * 200.00003051757812, a * 176.94886779785156, a * 189.00003051757812, a * 192.94886779785156);
        d.closePath();
        vt(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 190.00003051757812, a * 191.94886779785156);
        d.bezierCurveTo(a * 207.00003051757812, a * 348.94886779785156, a * 205.00003051757812, a * 323.94886779785156, a * 209.00003051757812, a * 358.94886779785156);
        d.bezierCurveTo(a * 171.00003051757812, a * 334.94886779785156, a * 167.00003051757812, a * 302.94886779785156, a * 161.00003051757812, a * 268.94886779785156);
        d.bezierCurveTo(a * 160.00003051757812, a * 218.94886779785156, a * 181.00003051757812, a * 191.94886779785156, a * 189.00003051757812, a * 186.94886779785156);
        d.closePath();
        vt(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 194.00003051757812, a * 195.94886779785156);
        d.bezierCurveTo(a * 116.00003051757812, a * 150.94886779785156, a * 116.00003051757812, a * 150.94886779785156, a * 38.000030517578125, a * 105.94886779785156);
        d.bezierCurveTo(a * 67.00003051757812, a * 90.94886779785156, a * 96.00003051757812, a * 99.94886779785156, a * 123.00003051757812, a * 111.94886779785156);
        d.bezierCurveTo(a * 183.00003051757812, a * 152.94886779785156, a * 179.00003051757812, a * 180.94886779785156, a * 193.00003051757812, a * 194.94886779785156);
        d.closePath();
        vt(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 189.00003051757812, a * 190.94886779785156);
        d.bezierCurveTo(a * 250.00003051757812, a * 133.94886779785156, a * 311.0000305175781, a * 78.94886779785156, a * 311.0000305175781, a * 76.94886779785156);
        d.bezierCurveTo(a * 306.0000305175781, a * 127.94886779785156, a * 283.0000305175781, a * 148.94886779785156, a * 261.0000305175781, a * 166.94886779785156);
        d.bezierCurveTo(a * 220.00003051757812, a * 197.94886779785156, a * 191.00003051757812, a * 194.94886779785156, a * 189.00003051757812, a * 195.94886779785156);
        d.closePath();
        vt(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 189.00003051757812, a * 194.94886779785156);
        d.bezierCurveTo(a * 268.5000305175781, a * 211.94886779785156, a * 268.5000305175781, a * 211.94886779785156, a * 348.0000305175781, a * 228.94886779785156);
        d.bezierCurveTo(a * 316.0000305175781, a * 247.94886779785156, a * 298.0000305175781, a * 256.94886779785156, a * 250.00003051757812, a * 246.94886779785156);
        d.bezierCurveTo(a * 197.00003051757812, a * 229.94886779785156, a * 189.00003051757812, a * 202.94886779785156, a * 188.00003051757812, a * 199.94886779785156);
        d.closePath();
        vt(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 192.00003051757812, a * 191.94886779785156);
        d.bezierCurveTo(a * 116.50003051757812, a * 238.44886779785156, a * 116.50003051757812, a * 238.44886779785156, a * 41.000030517578125, a * 284.94886779785156);
        d.bezierCurveTo(a * 49.000030517578125, a * 252.94886779785156, a * 56.000030517578125, a * 242.94886779785156, a * 80.00003051757812, a * 215.94886779785156);
        d.bezierCurveTo(a * 125.00003051757812, a * 181.94886779785156, a * 174.00003051757812, a * 183.94886779785156, a * 192.00003051757812, a * 191.94886779785156);
        d.closePath();
        vt(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
        d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
        d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
        d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
        d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
        d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
        d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
        d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
        d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
        d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
        d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
        d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
        d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
        d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
        d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
        d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
        d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
        d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
        d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
        d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
        d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
        d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
        d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
        d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
        d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
        d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
        d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
        d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
        d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
        d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
        d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
        d.closePath();
        vt(d, dg, b[2], a * 4);
        return c;
    }
    function Xt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 125;
        d.height = a * 139;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 63, a * 79);
        e.rotate(1);
        zt(e, 8, a * 60, a * 10);
        vt(e, c[0]);
        e.restore();
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 63, a * 69);
        e.rotate(1);
        zt(e, 8, a * 60, a * 10);
        vt(e, c[1], c[2], 4);
        e.rotate(0.56);
        zt(e, 8, a * 40, a * 10);
        vt(e, c[3], c[4], 4);
        e.rotate(0.28);
        zt(e, 8, a * 28, a * 8);
        vt(e, c[5]);
        e.restore();
        return d;
    }
    function Yt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 98;
        e.translate(0, a * 4);
        if ($g === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            e.save();
            e.translate(a * 44, a * 50);
            e.rotate(1);
            zt(e, 8, a * 41, a * 10);
            vt(e, c[0]);
            e.restore();
        }
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(1);
        zt(e, 8, a * 41, a * 10);
        vt(e, c[1], c[2], a * 4);
        e.rotate(0.56);
        zt(e, 8, a * 33, a * 10);
        vt(e, c[3], c[4], a * 4);
        e.rotate(0.28);
        zt(e, 8, a * 24, a * 8);
        vt(e, c[5]);
        e.restore();
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        wt(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        vt(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        wt(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        vt(e, c[4], c[4], a * 2);
        ut(e, a * 45, a * 29, a * 7);
        vt(e, c[5]);
        ut(e, a * 45, a * 61, a * 7);
        vt(e, c[5]);
        ut(e, a * 28, a * 45, a * 7);
        vt(e, c[5]);
        ut(e, a * 62, a * 45, a * 7);
        vt(e, c[5]);
        return d;
    }
    const Zt = 5;
    const $t = 1;
    function _t(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 501;
        d.height = a * 309;
        e.translate(0, a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126, a * 184);
        e.bezierCurveTo(a * 169, a * 196, a * 194, a * 198, a * 227, a * 198);
        e.bezierCurveTo(a * 235, a * 222, a * 236, a * 223, a * 241, a * 226);
        e.bezierCurveTo(a * 245, a * 228, a * 257, a * 228, a * 263, a * 226);
        e.bezierCurveTo(a * 267, a * 225, a * 270, a * 211, a * 275, a * 198);
        e.bezierCurveTo(a * 332, a * 194, a * 347, a * 192, a * 372, a * 188);
        e.bezierCurveTo(a * 366, a * 174.5, a * 366, a * 174.5, a * 360, a * 161);
        e.bezierCurveTo(a * 253.5, a * 162, a * 253.5, a * 162, a * 147, a * 163);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 116);
        e.bezierCurveTo(a * 90, a * 101, a * 96, a * 89, a * 106, a * 83);
        e.bezierCurveTo(a * 86, a * 79, a * 86, a * 52, a * 93, a * 38);
        e.bezierCurveTo(a * 99, a * 51, a * 107, a * 57, a * 122, a * 63);
        e.bezierCurveTo(a * 130, a * 53, a * 141, a * 46, a * 161, a * 46);
        e.bezierCurveTo(a * 157, a * 31, a * 158, a * 20, a * 169, a * 6);
        e.bezierCurveTo(a * 171, a * 24, a * 186, a * 33, a * 198, a * 45);
        e.bezierCurveTo(a * 252, a * 45, a * 252, a * 45, a * 306, a * 45);
        e.bezierCurveTo(a * 323, a * 33, a * 332, a * 21, a * 335, a * 7);
        e.bezierCurveTo(a * 349, a * 21, a * 347, a * 36, a * 345, a * 46);
        e.bezierCurveTo(a * 364, a * 46, a * 369, a * 48, a * 377, a * 63);
        e.bezierCurveTo(a * 398, a * 58, a * 403, a * 49, a * 409, a * 40);
        e.bezierCurveTo(a * 419, a * 57, a * 411, a * 79, a * 398, a * 85);
        e.bezierCurveTo(a * 405, a * 100, a * 405, a * 106, a * 401, a * 118);
        e.bezierCurveTo(a * 332.5, a * 128.5, a * 332.5, a * 128.5, a * 264, a * 139);
        e.closePath();
        vt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 122, a * 191);
        e.bezierCurveTo(a * 123, a * 237, a * 135, a * 245, a * 153, a * 259);
        e.bezierCurveTo(a * 167, a * 269, a * 158, a * 281, a * 118, a * 276);
        e.bezierCurveTo(a * 104, a * 273, a * 98, a * 268, a * 93, a * 242);
        e.bezierCurveTo(a * 89, a * 220, a * 92, a * 201, a * 102, a * 179);
        e.closePath();
        vt(e, c[3], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 403, a * 182);
        e.bezierCurveTo(a * 414, a * 215, a * 412, a * 232, a * 403, a * 260);
        e.bezierCurveTo(a * 395, a * 274, a * 375, a * 272, a * 356, a * 270);
        e.bezierCurveTo(a * 345, a * 268, a * 339, a * 262, a * 354, a * 252);
        e.bezierCurveTo(a * 370, a * 242, a * 380, a * 225, a * 384, a * 184);
        e.closePath();
        vt(e, c[3], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 155, a * 157);
        e.bezierCurveTo(a * 146, a * 189, a * 137, a * 198, a * 114, a * 219);
        e.bezierCurveTo(a * 104, a * 212, a * 98, a * 203, a * 89, a * 189);
        e.bezierCurveTo(a * 82, a * 178, a * 91, a * 164, a * 93, a * 136);
        e.closePath();
        vt(e, c[4], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 347, a * 162);
        e.bezierCurveTo(a * 357, a * 195, a * 376, a * 209, a * 387, a * 217);
        e.bezierCurveTo(a * 409, a * 201, a * 420, a * 181, a * 416, a * 166);
        e.bezierCurveTo(a * 410, a * 150, a * 412, a * 149, a * 408, a * 130);
        e.closePath();
        vt(e, c[4], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 134);
        e.bezierCurveTo(a * 79, a * 102, a * 92, a * 84, a * 108, a * 92);
        e.bezierCurveTo(a * 149, a * 108, a * 184, a * 111, a * 242, a * 111);
        e.bezierCurveTo(a * 294, a * 108, a * 341, a * 105, a * 386, a * 98);
        e.bezierCurveTo(a * 412, a * 91, a * 417, a * 86, a * 415, a * 133);
        e.bezierCurveTo(a * 413, a * 160, a * 413, a * 160, a * 368, a * 174);
        e.bezierCurveTo(a * 308, a * 184, a * 291, a * 185, a * 270, a * 186);
        e.bezierCurveTo(a * 264, a * 206, a * 262, a * 215, a * 253, a * 215);
        e.bezierCurveTo(a * 239, a * 217, a * 239, a * 211, a * 231, a * 186);
        e.bezierCurveTo(a * 178, a * 184, a * 156, a * 179, a * 112, a * 162);
        e.bezierCurveTo(a * 87, a * 151, a * 90, a * 144, a * 87, a * 137);
        e.closePath();
        vt(e, c[4], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 63, a * 98);
        e.bezierCurveTo(a * 84, a * 121, a * 109, a * 102, a * 124, a * 117);
        e.bezierCurveTo(a * 138, a * 136, a * 123, a * 165, a * 94, a * 150);
        e.bezierCurveTo(a * 66, a * 131, a * 64, a * 115, a * 63, a * 99);
        e.closePath();
        vt(e, c[3], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 449, a * 97);
        e.bezierCurveTo(a * 446, a * 143, a * 415, a * 151, a * 402, a * 155);
        e.bezierCurveTo(a * 386, a * 157, a * 373, a * 133, a * 391, a * 116);
        e.bezierCurveTo(a * 402, a * 106, a * 432, a * 124, a * 449, a * 97);
        e.closePath();
        vt(e, c[3], c[2], a * 10);
        return d;
    }
    function au(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 135;
        d.height = a * 120;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 3.5, a * 55.25);
        e.bezierCurveTo(a * 3.5, a * 114.25, a * 2.5, a * 109.25, a * 3.5, a * 112.25);
        e.bezierCurveTo(a * 5.5, a * 119.25, a * 8.5, a * 119.25, a * 11.5, a * 119.25);
        e.bezierCurveTo(a * 15.5, a * 114.25, a * 13.5, a * 95.25, a * 14.5, a * 82.25);
        e.closePath();
        vt(e, c[0], c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 6.5, a * 43.25);
        e.bezierCurveTo(a * 3.5, a * 27.25, a * 7.5, a * 20.25, a * 25.5, a * 11.25);
        e.bezierCurveTo(a * 45.5, a * -0.75, a * 73.5, a * 1.25, a * 107.5, a * 10.25);
        e.bezierCurveTo(a * 131.5, a * 21.25, a * 125.5, a * 34.25, a * 125.5, a * 36.25);
        e.closePath();
        vt(e, c[0], c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 120.5, a * 62.25);
        e.bezierCurveTo(a * 121.5, a * 95.25, a * 120.5, a * 80.25, a * 120.5, a * 100.25);
        e.bezierCurveTo(a * 118.5, a * 119.25, a * 123.5, a * 118.25, a * 129.5, a * 113.25);
        e.bezierCurveTo(a * 133.5, a * 107.25, a * 130.5, a * 97.25, a * 130.5, a * 87.25);
        e.bezierCurveTo(a * 129.5, a * 56.25, a * 130, a * 70.75, a * 129.5, a * 54.25);
        e.closePath();
        vt(e, c[0], c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17.5, a * 27);
        e.bezierCurveTo(a * 48.5, a * 5, a * 93.5, a * 14, a * 118.5, a * 26);
        e.bezierCurveTo(a * 132.5, a * 35, a * 133.5, a * 52, a * 132.5, a * 68);
        e.bezierCurveTo(a * 125.5, a * 87, a * 116.5, a * 84, a * 96.5, a * 75);
        e.bezierCurveTo(a * 60.5, a * 66, a * 52.5, a * 74, a * 37.5, a * 78);
        e.bezierCurveTo(a * 2.5, a * 86, a * 3.5, a * 78, a * 1.5, a * 61);
        e.bezierCurveTo(a * 1.5, a * 37, a * 9.5, a * 32, a * 15.5, a * 28);
        e.closePath();
        vt(e, c[2], c[3], a * 7);
        return d;
    }
    function bu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 98;
        e.translate(0, a * 4);
        if ($g === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            e.save();
            e.translate(a * 44, a * 50);
            e.rotate(0.2);
            zt(e, 9, a * 41, a * 10);
            e.restore();
            vt(e, c[0]);
        }
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(0.2);
        zt(e, 9, a * 41, a * 10);
        vt(e, c[1], c[2], a * 4);
        e.rotate(-0.32);
        zt(e, 9, a * 32, a * 10);
        vt(e, c[3], c[4], a * 4);
        e.rotate(0.68);
        zt(e, 9, a * 23, a * 8);
        vt(e, c[5], c[6], a * 6);
        e.restore();
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        wt(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        vt(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        wt(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        vt(e, c[4], c[4], a * 2);
        ut(e, a * 45, a * 29, a * 7);
        vt(e, c[5]);
        ut(e, a * 45, a * 61, a * 7);
        vt(e, c[5]);
        ut(e, a * 28, a * 45, a * 7);
        vt(e, c[5]);
        ut(e, a * 62, a * 45, a * 7);
        vt(e, c[5]);
        return d;
    }
    const cu = 14;
    function du(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 175;
        d.height = a * 169;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17, a * 112);
        e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
        e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
        e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
        e.closePath();
        vt(e, c[8], c[9], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 127, a * 111);
        e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
        e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
        e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
        e.closePath();
        vt(e, c[9]);
        e.globalAlpha = 0.5;
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 15, a * 117);
        e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
        e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
        e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
        e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 127);
        e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
        e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
        e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
        e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
        e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
        e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
        e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
        e.closePath();
        vt(e, c[4], c[5], a * 5);
        e.save();
        e.translate(a * 27.5, a * 138.5);
        wt(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
        e.restore();
        vt(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 143.5, a * 137);
        wt(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
        e.restore();
        vt(e, c[1], c[2], a * 5);
        return d;
    }
    function fu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 175;
        d.height = a * 169;
        e.globalAlpha = 0.5;
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19, a * 139);
        e.bezierCurveTo(a * 18, a * 163, a * 22, a * 156, a * 53, a * 157);
        e.bezierCurveTo(a * 97.5, a * 157, a * 97.5, a * 157, a * 142, a * 157);
        e.bezierCurveTo(a * 150, a * 157, a * 153, a * 156, a * 154, a * 142);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -3);
        e.save();
        e.translate(a * 86.5, a * 81.5);
        wt(e, a * -66.5, a * -65.5, a * 133, a * 131, a * 10);
        e.restore();
        vt(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 84.5, a * 79);
        wt(e, a * -50.5, a * -49, a * 101, a * 98, a * 10);
        e.restore();
        vt(e, c[3], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42, a * 54);
        e.bezierCurveTo(a * 37, a * 48, a * 39, a * 44, a * 38, a * 41);
        e.bezierCurveTo(a * 42, a * 40, a * 45, a * 40, a * 50, a * 41);
        e.bezierCurveTo(a * 85, a * 36, a * 98, a * 37, a * 116, a * 42);
        e.bezierCurveTo(a * 132, a * 39, a * 132, a * 39, a * 133, a * 56);
        e.bezierCurveTo(a * 136, a * 73, a * 136, a * 84, a * 132, a * 106);
        e.bezierCurveTo(a * 47, a * 113, a * 85.5, a * 106, a * 39, a * 106);
        e.bezierCurveTo(a * 32, a * 81, a * 38, a * 60, a * 42, a * 55);
        e.closePath();
        vt(e, c[4], c[5], a * 5);
        e.save();
        e.translate(a * 28, a * 24);
        e.rotate(0);
        wt(e, a * -14, a * -14, a * 28, a * 28, a * 4);
        e.restore();
        vt(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 143, a * 23);
        e.rotate(0);
        wt(e, a * -14, a * -14, a * 28, a * 28, a * 4);
        e.restore();
        vt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 80);
        e.bezierCurveTo(a * 73, a * 78, a * 84, a * 74, a * 100, a * 64);
        e.bezierCurveTo(a * 111, a * 57, a * 125, a * 67, a * 108, a * 84);
        e.bezierCurveTo(a * 96, a * 95, a * 86, a * 96, a * 70, a * 88);
        e.bezierCurveTo(a * 62.5, a * 84, a * 62.5, a * 84, a * 55, a * 80);
        e.closePath();
        vt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17, a * 112);
        e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
        e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
        e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
        e.closePath();
        vt(e, c[8], c[9], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 127, a * 111);
        e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
        e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
        e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
        e.closePath();
        vt(e, c[9]);
        e.globalAlpha = 0.5;
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 15, a * 117);
        e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
        e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
        e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
        e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 127);
        e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
        e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
        e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
        e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
        e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
        e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
        e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
        e.closePath();
        vt(e, c[4], c[5], a * 5);
        e.save();
        e.translate(a * 27.5, a * 138.5);
        wt(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
        e.restore();
        vt(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 143.5, a * 137);
        wt(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
        e.restore();
        vt(e, c[1], c[2], a * 5);
        return d;
    }
    function gu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 304;
        d.height = a * 278;
        e.translate(a * 10, a * 25);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 137);
        e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
        e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
        e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 52);
        e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
        e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
        e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
        e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
        e.closePath();
        vt(e, c[0]);
        e.translate(a * -10, a * -25);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 137);
        e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
        e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
        e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
        e.closePath();
        vt(e, c[1], c[2], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 52);
        e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
        e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
        e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
        e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
        e.closePath();
        vt(e, c[3], c[4], a * 15);
        return d;
    }
    const hu = 16;
    function iu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 115;
        d.height = a * 585;
        e.scale(-1, 1);
        e.translate(a * -110, 0);
        e.translate(a * 10, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 51.5, a * 342);
        wt(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
        e.restore();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 54, a * 83);
        e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
        e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
        e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 95, a * 97);
        e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
        e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
        e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
        e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 176);
        e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
        e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 50, a * 176);
        e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
        e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 403);
        e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
        e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
        e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59, a * 67);
        e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
        e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
        e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 125);
        e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
        e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
        e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
        e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 171);
        e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
        e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
        e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60, a * 68);
        e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
        e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
        e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
        e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
        e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 71, a * 172);
        e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
        e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
        e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 151);
        e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
        e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
        e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
        e.closePath();
        vt(e, c[0]);
        e.translate(a * -10, a * -10);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 51.5, a * 342);
        wt(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
        e.restore();
        vt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 54, a * 83);
        e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
        e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
        e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
        e.closePath();
        vt(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 95, a * 97);
        e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
        e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
        e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
        e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
        e.closePath();
        vt(e, c[5], c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 403);
        e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
        e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
        e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
        e.closePath();
        vt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 37, a * 427);
        e.bezierCurveTo(a * 47, a * 435, a * 55, a * 435, a * 67, a * 427);
        vt(e, Da, c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 448);
        e.bezierCurveTo(a * 46, a * 454, a * 54, a * 457, a * 65, a * 449);
        vt(e, undefined, c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 176);
        e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
        e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
        e.closePath();
        vt(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 50, a * 176);
        e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
        e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
        e.closePath();
        vt(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59, a * 67);
        e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
        e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
        e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
        e.closePath();
        vt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 125);
        e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
        e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
        e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
        e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
        e.closePath();
        vt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 171);
        e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
        e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
        e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
        e.closePath();
        vt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60, a * 68);
        e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
        e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
        e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
        e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
        e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
        e.closePath();
        vt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 71, a * 172);
        e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
        e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
        e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
        e.closePath();
        vt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 151);
        e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
        e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
        e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
        e.closePath();
        vt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 113);
        e.bezierCurveTo(a * 65, a * 140, a * 75, a * 166, a * 52, a * 169);
        e.bezierCurveTo(a * 29, a * 168, a * 41, a * 143, a * 53, a * 112);
        e.closePath();
        vt(e, c[3], c[4], a * 6);
        return d;
    }
    function ju(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 81;
        d.height = a * 626;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 565);
        e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
        e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
        e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
        e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
        e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
        e.closePath();
        vt(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 565);
        e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
        e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
        e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
        e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
        e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
        e.closePath();
        vt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 129);
        e.bezierCurveTo(a * 32, a * 135, a * 48, a * 136, a * 53, a * 129);
        e.bezierCurveTo(a * 56, a * 97, a * 53, a * 82, a * 52, a * 64);
        e.bezierCurveTo(a * 49, a * 33, a * 44, a * 27, a * 41, a * 21);
        e.bezierCurveTo(a * 31, a * 40, a * 28, a * 84, a * 27, a * 127);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 565);
        e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
        e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
        e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
        e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
        e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
        e.closePath();
        vt(e, Da, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 475);
        e.bezierCurveTo(a * 38, a * 482, a * 48, a * 480, a * 54, a * 474);
        e.bezierCurveTo(a * 54, a * 509.5, a * 54, a * 509.5, a * 54, a * 545);
        e.bezierCurveTo(a * 46, a * 554, a * 36, a * 552, a * 28, a * 545);
        e.closePath();
        vt(e, c[4], c[5], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 496);
        e.bezierCurveTo(a * 39, a * 506, a * 49, a * 503, a * 54, a * 496);
        vt(e, Ga, c[5], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 521);
        e.bezierCurveTo(a * 41, a * 529, a * 49, a * 524, a * 54, a * 520);
        vt(e, Li, c[5], a * 8);
        return d;
    }
    const ku = 11;
    function lu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 151;
        d.height = a * 80;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 133, a * 54);
        e.bezierCurveTo(a * 136, a * 18, a * 129, a * 18, a * 114, a * 13);
        e.bezierCurveTo(a * 51, a * 0, a * 36, a * 16, a * 34, a * 16);
        e.bezierCurveTo(a * 8, a * 28, a * 22, a * 56, a * 21, a * 57);
        e.closePath();
        vt(e, c[2], c[3], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 40);
        e.bezierCurveTo(a * 132, a * 35, a * 132, a * 30, a * 132, a * 29);
        e.bezierCurveTo(a * 145, a * 38, a * 144, a * 43, a * 137, a * 54);
        e.closePath();
        vt(e, c[0], c[1], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 33);
        e.bezierCurveTo(a * 24, a * 44, a * 215, a * 39, a * 23, a * 44);
        e.bezierCurveTo(a * 19, a * 49, a * 19, a * 49, a * 15, a * 54);
        e.bezierCurveTo(a * 4, a * 43, a * 10, a * 35, a * 20, a * 32);
        e.closePath();
        vt(e, c[0], c[1], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 18, a * 52);
        e.bezierCurveTo(a * 24, a * 31, a * 34, a * 25, a * 75, a * 23);
        e.bezierCurveTo(a * 130, a * 24, a * 129, a * 32, a * 134, a * 51);
        e.bezierCurveTo(a * 138, a * 70, a * 126, a * 72, a * 90, a * 73);
        e.bezierCurveTo(a * 18, a * 72, a * 15, a * 68, a * 18, a * 54);
        e.closePath();
        vt(e, c[0], c[1], 4);
        return d;
    }
    function mu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 100;
        d.height = a * 648;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 50.5, a * 349.5);
        wt(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
        e.restore();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 538);
        e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
        e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
        e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
        e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 554);
        e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 569);
        e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
        e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
        e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
        e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 581);
        e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
        e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
        e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
        e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 106);
        e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
        e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
        e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
        e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 27);
        e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
        e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
        e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 43);
        e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 73, a * 97);
        e.bezierCurveTo(a * 66, a * 116, a * 43, a * 122, a * 26, a * 99);
        e.closePath();
        vt(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 50.5, a * 349.5);
        wt(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
        e.restore();
        vt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 538);
        e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
        e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
        e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
        e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
        e.closePath();
        vt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 554);
        e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
        e.closePath();
        vt(e, Js, c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 569);
        e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
        e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
        e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
        e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
        e.closePath();
        vt(e, c[5], c[6], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 581);
        e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
        e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
        e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
        e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
        e.closePath();
        vt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 106);
        e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
        e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
        e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
        e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
        e.closePath();
        vt(e, c[5], c[6], a * 8);
        e.save();
        e.translate(a * -46, a * -50);
        e.scale(2, 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 80);
        e.bezierCurveTo(a * 51, a * 89.5, a * 51, a * 89.5, a * 51, a * 99);
        e.bezierCurveTo(a * 49, a * 103, a * 46, a * 105, a * 44, a * 99);
        e.bezierCurveTo(a * 44, a * 88.5, a * 44, a * 88.5, a * 44, a * 78);
        e.closePath();
        vt(e, c[8]);
        e.restore();
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 27);
        e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
        e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
        e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
        e.closePath();
        vt(e, c[8], c[9], a * 8);
        e.scale(2, 2);
        e.translate(a * -23, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 57, a * 69);
        e.bezierCurveTo(a * 50, a * 76, a * 43, a * 75, a * 38, a * 69);
        e.bezierCurveTo(a * 43, a * 57, a * 43, a * 57, a * 48, a * 45);
        e.closePath();
        vt(e, c[10]);
        return d;
    }
    function nu(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 170;
        e.height = b * 170;
        f.translate(0, b * 3);
        f.globalAlpha = c ? 0.5 : 1;
        f.save();
        f.translate(b * 85, b * 95);
        f.rotate(1.4);
        zt(f, 7, b * 60, b * 10);
        f.restore();
        vt(f, d[0]);
        f.globalAlpha = 1;
        f.translate(b * 85, b * 82);
        for (var g = 0; g < 10; g++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            zt(f, 3, b * 21, b * 4);
            vt(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.save();
        f.translate(b * 0, b * 0);
        f.rotate(0.2);
        zt(f, 9, b * 60, b * 10);
        vt(f, d[3], d[4], b * 4);
        f.rotate(-0.32);
        zt(f, 9, b * 38, b * 10);
        vt(f, d[5], d[6], b * 4);
        f.rotate(0.68);
        zt(f, 9, b * 20, b * 8);
        vt(f, d[7], d[8], b * 6);
        f.restore();
        return e;
    }
    function ou(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 106;
        d.height = a * 681;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 52.5, a * 395);
        e.rotate(0);
        wt(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
        e.restore();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 588);
        e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
        e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
        e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 135);
        e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
        e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
        e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
        e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
        e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 150);
        e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
        e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
        e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
        e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
        e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 39);
        e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
        e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
        e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 64);
        e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
        e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
        e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
        e.closePath();
        vt(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 52.5, a * 395);
        e.rotate(0);
        wt(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
        e.restore();
        vt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 588);
        e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
        e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
        e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
        e.closePath();
        vt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 135);
        e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
        e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
        e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
        e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
        e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
        e.closePath();
        vt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 150);
        e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
        e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
        e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
        e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
        e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
        e.closePath();
        vt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 39);
        e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
        e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
        e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
        e.closePath();
        vt(e, c[6], c[7], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 64);
        e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
        e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
        e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
        e.closePath();
        vt(e, c[8]);
        return d;
    }
    function pu(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 170;
        e.height = b * 170;
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.save();
        f.translate(b * 85, b * 88);
        f.rotate(1.4);
        zt(f, 7, b * 60, b * 10);
        f.restore();
        vt(f, d[0]);
        f.globalAlpha = 1;
        f.translate(b * 85, b * 80);
        for (var g = 0; g < 10; g++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            zt(f, 3, b * 21, b * 4);
            vt(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.save();
        f.translate(b * 0, b * 0);
        f.rotate(1.4);
        zt(f, 7, b * 60, b * 10);
        vt(f, d[3], d[4], b * 4);
        f.rotate(0.64);
        zt(f, 7, b * 40, b * 10);
        vt(f, d[5], d[6], b * 4);
        f.rotate(0.12);
        zt(f, 7, b * 23, b * 5);
        f.restore();
        vt(f, d[7]);
        return e;
    }
    function qu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 200;
        d.height = a * 200;
        e.save();
        e.translate(a * 112, a * 158);
        wt(e, a * -86.5, a * -86, a * 150, a * 35, a * 20);
        e.restore();
        vt(e, c[0]);
        e.save();
        e.translate(a * 170, a * 100);
        wt(e, a * -86.5, a * -86, a * 35, a * 150, a * 20);
        e.restore();
        vt(e, c[0]);
        return d;
    }
    function ru(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 170;
        var a = b * 172;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        f.translate(i, j + b * 7);
        f.globalAlpha = c ? 0.5 : 0;
        ut(f, 0, 0, b * 60);
        vt(f, d[0]);
        f.globalAlpha = 1;
        f.translate(0, b * -7);
        f.save();
        for (var h = 0; h < 10; h++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            zt(f, 3, b * 20, b * 4);
            vt(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.restore();
        ut(f, 0, 0, b * 60);
        vt(f, d[3], d[4], b * 4);
        ut(f, 0, 0, b * 40);
        vt(f, d[5]);
        ut(f, 0, 0, b * 25);
        vt(f, d[6], d[7], b * 8);
        return e;
    }
    function tu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 43;
        d.height = a * 209;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 21, a * 102.5);
        wt(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
        e.restore();
        vt(e, c[0]);
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 10);
        e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
        e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
        e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 1);
        e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
        e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
        e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 146);
        e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
        e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
        e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
        e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
        e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
        e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
        e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
        e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 6);
        e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
        e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
        e.closePath();
        vt(e, c[0]);
        e.translate(0, a * -20);
        e.globalAlpha = 1;
        e.translate(0, a * 10);
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 21, a * 102.5);
        wt(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
        e.restore();
        vt(e, c[1], c[2], a * 4);
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 10);
        e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
        e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
        e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
        e.closePath();
        vt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 1);
        e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
        e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
        e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
        e.closePath();
        vt(e, c[5], c[6], a * 4);
        e.translate(0, a * 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 146);
        e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
        e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
        e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
        e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
        e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
        e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
        e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
        e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
        e.closePath();
        vt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 6);
        e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
        e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
        e.closePath();
        vt(e, c[8]);
        return d;
    }
    function uu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 92;
        d.height = a * 108;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 10);
        e.bezierCurveTo(a * 37, a * 2, a * 49, a * 0, a * 61, a * 15);
        e.bezierCurveTo(a * 81, a * 31, a * 78, a * 25, a * 79, a * 37);
        e.bezierCurveTo(a * 76, a * 44, a * 81, a * 56, a * 85, a * 63);
        e.bezierCurveTo(a * 91, a * 71, a * 90, a * 78, a * 83, a * 84);
        e.bezierCurveTo(a * 60, a * 98, a * 67, a * 95, a * 57, a * 102);
        e.bezierCurveTo(a * 47, a * 106, a * 43, a * 106, a * 31, a * 98);
        e.bezierCurveTo(a * 22, a * 91, a * 17, a * 89, a * 7, a * 84);
        e.bezierCurveTo(a * 1, a * 77, a * 4, a * 73, a * 7, a * 60);
        e.bezierCurveTo(a * 11, a * 50, a * 5, a * 32, a * 15, a * 27);
        e.bezierCurveTo(a * 26, a * 18, a * 26, a * 24, a * 31, a * 10);
        e.closePath();
        vt(e, c[0], c[1], 4);
        return d;
    }
    function vu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 165;
        d.height = a * 123;
        e.save();
        e.translate(a * 81, a * 65);
        wt(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
        e.restore();
        vt(e, c[0]);
        e.save();
        e.translate(a * 81, a * 58);
        wt(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
        e.restore();
        vt(e, c[1], c[2], 4);
        e.save();
        e.translate(a * 81, a * 58);
        wt(e, a * -69, a * -47, a * 138, a * 93, a * 15);
        e.restore();
        vt(e, c[3], c[4], 4);
        e.save();
        e.translate(a * 79, a * 54);
        wt(e, a * -34, a * -40, a * 68, a * 88, a * 13);
        e.restore();
        vt(e, Qh, c[5], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 13);
        e.bezierCurveTo(a * 43.5, a * 55, a * 43.5, a * 55, a * 43, a * 101);
        e.closePath();
        vt(e, Js, c[6], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 13);
        e.bezierCurveTo(a * 115, a * 56, a * 115, a * 56, a * 115, a * 101);
        e.closePath();
        vt(e, Jl, c[6], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 6);
        e.bezierCurveTo(a * 35, a * 56, a * 36, a * 109, a * 35, a * 110);
        e.closePath();
        vt(e, undefined, c[7], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123, a * 6);
        e.bezierCurveTo(a * 123, a * 56, a * 123, a * 56, a * 123, a * 110);
        e.closePath();
        vt(e, uj, c[7], 4);
        e.save();
        e.translate(a * 79, a * 113);
        wt(e, a * -18, a * -2, a * 36, a * 4, a * 20);
        e.restore();
        vt(e, undefined, c[8], 4);
        e.save();
        e.translate(a * 75, a * 118);
        wt(e, a * -6, a * -2.5, a * 20, a * 5, a * 20);
        e.restore();
        vt(e, c[8]);
        return d;
    }
    function wu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 88;
        d.height = a * 647;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 45, a * 384.5);
        wt(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
        e.restore();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 572);
        e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
        e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
        e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
        e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 587);
        e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
        e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
        e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 113);
        e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
        e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
        e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
        e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 139);
        e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
        e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
        e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 29);
        e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
        e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
        e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
        e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 54);
        e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
        e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
        e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
        e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
        e.closePath();
        vt(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 45, a * 384.5);
        wt(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
        e.restore();
        vt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 572);
        e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
        e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
        e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
        e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
        e.closePath();
        vt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 587);
        e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
        e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
        e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
        e.closePath();
        vt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 113);
        e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
        e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
        e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
        e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
        e.closePath();
        vt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 139);
        e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
        e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
        e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
        e.closePath();
        vt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 29);
        e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
        e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
        e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
        e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
        e.closePath();
        vt(e, c[6], c[7], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 54);
        e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
        e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
        e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
        e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
        e.closePath();
        vt(e, c[8]);
        return d;
    }
    function xu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 108;
        d.height = a * 669;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 54, a * 389.5);
        wt(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
        e.restore();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 579);
        e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
        e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
        e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
        e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141);
        e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
        e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
        e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
        e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
        e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42, a * 152);
        e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
        e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
        e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 28);
        e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
        e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
        e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
        e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 53);
        e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
        e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
        e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
        e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
        e.closePath();
        vt(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 54, a * 389.5);
        e.rotate(0);
        wt(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
        e.restore();
        vt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 579);
        e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
        e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
        e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
        e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
        e.closePath();
        vt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141);
        e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
        e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
        e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
        e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
        e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
        e.closePath();
        vt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42, a * 152);
        e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
        e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
        e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
        e.closePath();
        vt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 28);
        e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
        e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
        e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
        e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
        e.closePath();
        vt(e, c[6], c[7], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 53);
        e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
        e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
        e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
        e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
        e.closePath();
        vt(e, c[8]);
        return d;
    }
    function yu(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 170;
        e.height = b * 170;
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 3);
        f.save();
        f.translate(b * 85, b * 95);
        f.rotate(1.4);
        zt(f, 7, b * 60, b * 10);
        f.restore();
        vt(f, d[0]);
        f.globalAlpha = 1;
        f.translate(b * 85, b * 82);
        for (var g = 0; g < 10; g++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            zt(f, 3, b * 21, b * 4);
            vt(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.save();
        f.translate(b * 0, b * 0);
        f.rotate(1);
        zt(f, 8, b * 60, b * 10);
        vt(f, d[3], d[4], b * 4);
        f.rotate(0.56);
        zt(f, 8, b * 40, b * 10);
        vt(f, d[5], d[6], b * 4);
        f.rotate(0.28);
        zt(f, 8, b * 28, b * 8);
        vt(f, d[7]);
        f.restore();
        return e;
    }
    function zu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 138;
        d.height = a * 133;
        e.globalAlpha = b ? 0.3 : 1;
        e.translate(0, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26, a * 79.640625);
        e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
        e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
        e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
        e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
        e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
        e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 8, a * 82.640625);
        e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
        e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
        e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
        e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
        e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 8, a * 73.640625);
        e.bezierCurveTo(a * 7, a * 23.640625, a * 33, a * 19.640625, a * 71, a * 17.640625);
        e.bezierCurveTo(a * 129, a * 19.640625, a * 130, a * 45.640625, a * 130, a * 76.640625);
        e.bezierCurveTo(a * 90, a * 63.640625, a * 85, a * 63.640625, a * 73, a * 63.640625);
        e.bezierCurveTo(a * 38, a * 63.640625, a * 33, a * 66.640625, a * 8, a * 73.640625);
        e.closePath();
        vt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72, a * 28.640625);
        e.bezierCurveTo(a * 51, a * 25.640625, a * 56, a * 7.640625, a * 70, a * 5.640625);
        e.bezierCurveTo(a * 94, a * 7.640625, a * 87, a * 29.640625, a * 72, a * 28.640625);
        e.closePath();
        vt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 26.640625);
        e.bezierCurveTo(a * 42, a * 29.640625, a * 43, a * 31.640625, a * 42, a * 37.640625);
        vt(e, Oo, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 26.640625);
        e.bezierCurveTo(a * 100, a * 28.640625, a * 98, a * 34.640625, a * 99, a * 38.640625);
        vt(e, undefined, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26, a * 79.640625);
        e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
        e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
        e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
        e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
        e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
        e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
        e.closePath();
        vt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 8, a * 82.640625);
        e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
        e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
        e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
        e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
        e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
        e.closePath();
        vt(e, c[3], c[4], a * 4);
        return d;
    }
    const Au = 4;
    function Bu(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 450;
        f.height = b * 260;
        var a = Eu(b * 1, true, d);
        g.drawImage(a, b * 0, b * 0);
        if (e == 1) {
            g.translate(b * 100, b * 0);
            ut(g, b * 113, b * 120, b * 66);
            vt(g, Li, d[4], b * 13);
            a = bd(b * 0.65, dn, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
            g.rotate(0.7);
            g.drawImage(a, b * 133, b * -64);
            g.rotate(-0.7);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 70);
            g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
            g.closePath();
            vt(g, As, d[4], b * 13);
        } else if (e == 2) {
            g.translate(b * 100, b * 0);
            ut(g, b * 113, b * 120, b * 66);
            vt(g, undefined, d[4], b * 13);
            g.translate(b * 30, b * 40);
            g.save();
            g.translate(b * 83.5, b * 66.5);
            wt(g, b * -40.5, b * -29.5, b * 81, b * 59, b * 15);
            g.restore();
            vt(g, "#dff2f7", "#187484", b * 7);
            ut(g, b * 22, b * 82, b * 12);
            vt(g, "#dff2f7", "#187484", b * 7);
            ut(g, b * 145, b * 82, b * 12);
            vt(g, "#dff2f7", "#187484", b * 7);
            a = Rd(b * 0.5, true, ["#80500b", "#7c4908"]);
            g.drawImage(a, b * 10, b * 85);
            a = Rd(b * 0.5, true, ["#80500b", "#7c4908"]);
            g.drawImage(a, b * 50, b * 85);
            a = Rd(b * 0.5, Lo, ["#80500b", "#7c4908"]);
            g.drawImage(a, b * 90, b * 85);
            a = Od(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 90, b * 105);
            a = Od(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 90, b * 105);
            a = Od(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 30, b * 125);
            a = Od(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 50, b * 115);
            a = Od(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 30, b * 100);
            a = Od(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 80, b * 120);
            a = Od(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 110, b * 125);
            a = Od(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 120, b * 105);
        } else if (e == 3) {
            g.translate(b * 100, b * 0);
            ut(g, b * 113, b * 120, b * 66);
            vt(g, undefined, d[4], b * 13);
            g.translate(b * 40, b * 50);
            g.save();
            g.translate(b * 71, b * 69);
            wt(g, b * -30, b * -42, b * 60, b * 84, b * 10);
            g.restore();
            vt(g, Ft, d[5], b * 4);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 42, b * 28);
            g.bezierCurveTo(b * 60, b * 31, b * 60, b * 31, b * 78, b * 34);
            g.bezierCurveTo(b * 82, b * 34, b * 84, b * 37, b * 83, b * 45);
            g.bezierCurveTo(b * 83, b * 80, b * 83, b * 80, b * 83, b * 115);
            g.bezierCurveTo(b * 83, b * 120, b * 80, b * 122, b * 73, b * 120);
            g.bezierCurveTo(b * 42, b * 111, b * 43, b * 109, b * 41, b * 102);
            g.bezierCurveTo(b * 41, b * 71, b * 41, b * 71, b * 41, b * 40);
            g.closePath();
            vt(g, d[5], d[5], b * 4);
            g.translate(b * -40, b * -50);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 70);
            g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
            g.closePath();
            vt(g, Da, d[4], b * 13);
        } else if (e == 4) {
            g.scale(1, 1);
            g.translate(b * 70, b * 50);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 23, b * 6);
            g.bezierCurveTo(b * 25.5, b * 56, b * 25.5, b * 56, b * 28, b * 106);
            vt(g, vj, d[5], b * 14);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 59, b * 10);
            g.bezierCurveTo(b * 61, b * 51.5, b * 61, b * 51.5, b * 63, b * 93);
            vt(g, qn, d[5], b * 14);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 7, b * 55);
            g.bezierCurveTo(b * 33.5, b * 55, b * 33.5, b * 55, b * 60, b * 55);
            vt(g, undefined, d[5], b * 14);
            g.translate(b * 10, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 123, b * 16);
            g.bezierCurveTo(b * 103, b * 16.5, b * 103, b * 16.5, b * 83, b * 17);
            g.bezierCurveTo(b * 83.5, b * 61, b * 83.5, b * 61, b * 84, b * 105);
            g.bezierCurveTo(b * 106, b * 105, b * 106, b * 105, b * 128, b * 105);
            vt(g, As, d[5], b * 14);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 72, b * 63);
            g.bezierCurveTo(b * 88.5, b * 62.5, b * 88.5, b * 62.5, b * 105, b * 62);
            vt(g, jj, d[5], b * 14);
            g.translate(b * 10, b * 10);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 141, b * 8);
            g.bezierCurveTo(b * 143, b * 50, b * 143, b * 50, b * 145, b * 92);
            g.bezierCurveTo(b * 169, b * 88.5, b * 169, b * 88.5, b * 193, b * 85);
            vt(g, qn, d[5], b * 14);
            g.translate(b * 10, b * -10);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 205, b * 124);
            g.bezierCurveTo(b * 205, b * 69, b * 205, b * 69, b * 205, b * 14);
            g.bezierCurveTo(b * 239, b * 15, b * 250, b * 37, b * 249, b * 49);
            g.bezierCurveTo(b * 251, b * 65, b * 242, b * 76, b * 206, b * 75);
            vt(g, Js, d[5], b * 14);
        }
        return f;
    }
    function Cu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 149;
        c.height = a * 153;
        d.globalAlpha = 0.5;
        ut(d, a * 74.5, a * 85, a * 66);
        vt(d, b[0]);
        d.globalAlpha = 1;
        ut(d, a * 75.5, a * 72.5, a * 67);
        vt(d, b[1], b[2], a * 4);
        ut(d, a * 75.5, a * 73.5, a * 54);
        vt(d, b[3]);
        d.globalAlpha = 0.5;
        ut(d, a * 74.5, a * 80.5, a * 39);
        vt(d, b[4]);
        d.globalAlpha = 1;
        ut(d, a * 74.5, a * 74.5, a * 37);
        vt(d, b[5]);
        return c;
    }
    function Du(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 100;
        c.height = a * 100;
        d.globalAlpha = 0.5;
        d.fillStyle = b[0];
        d.fillRect(0, 0, c.width, c.height);
        return c;
    }
    function Eu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 450;
        d.height = a * 260;
        e.translate(a * 10, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        wt(e, 0, 0, a * 400, a * 220, a * 30);
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9, a * 5);
        e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
        e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
        e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
        e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
        e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
        e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
        e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
        e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
        e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
        e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
        e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
        e.closePath();
        vt(e, c[2], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 5, a * 70);
        e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
        e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
        e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
        e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
        e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
        e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
        e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
        e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
        e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
        e.closePath();
        vt(e, c[3], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19, a * 158);
        e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
        e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
        e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
        e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
        e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
        e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
        e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
        e.closePath();
        vt(e, c[2], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 183);
        e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
        e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
        e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
        e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
        e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
        e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
        e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
        e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
        e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
        e.closePath();
        vt(e, c[3], c[1], a * 12);
        ut(e, a * 41, a * 30, a * 14.7648230602334);
        vt(e, c[3], c[1], a * 12);
        ut(e, a * 369, a * 30, a * 15.556349186104045);
        vt(e, c[3], c[1], a * 12);
        ut(e, a * 364, a * 190, a * 15.620499351813308);
        vt(e, c[3], c[1], a * 12);
        ut(e, a * 41, a * 186, a * 15.556349186104045);
        vt(e, c[3], c[1], a * 12);
        return d;
    }
    function Fu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 173;
        c.height = a * 178;
        d.globalAlpha = 0.5;
        ut(d, a * 86.5, a * 98, a * 80);
        vt(d, b[0]);
        d.globalAlpha = 1;
        ut(d, a * 86.5, a * 89, a * 81);
        vt(d, b[1], b[2], a * 4);
        ut(d, a * 86.5, a * 86, a * 59);
        vt(d, b[3], b[4], a * 4);
        d.globalAlpha = 0.5;
        ut(d, a * 86.5, a * 95, a * 34);
        vt(d, b[0]);
        d.globalAlpha = 1;
        ut(d, a * 86.5, a * 89, a * 34);
        vt(d, b[5]);
        return c;
    }
    function Gu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 253;
        c.height = a * 260;
        d.globalAlpha = 0.5;
        ut(d, a * 126.5, a * 134, a * 119);
        vt(d, b[0]);
        d.globalAlpha = 1;
        ut(d, a * 126.5, a * 124, a * 119);
        vt(d, b[1], b[2], a * 4);
        ut(d, a * 126.5, a * 127, a * 100);
        vt(d, b[3]);
        d.globalAlpha = 0.5;
        ut(d, a * 126.5, a * 135, a * 81);
        vt(d, b[0]);
        d.globalAlpha = 1;
        ut(d, a * 126.5, a * 125, a * 84);
        vt(d, b[4], b[5], a * 4);
        ut(d, a * 126.5, a * 125, a * 61);
        vt(d, b[6], b[7], a * 4);
        d.globalAlpha = 0.5;
        ut(d, a * 126.5, a * 134, a * 40);
        vt(d, b[8]);
        d.globalAlpha = 1;
        ut(d, a * 126.5, a * 125, a * 40);
        vt(d, b[9]);
        return c;
    }
    function Hu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 450;
        d.height = a * 260;
        e.translate(a * 10, a * 10);
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 9, a * 5);
            e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
            e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
            e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
            e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
            e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
            e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
            e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
            e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
            e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
            e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
            e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
            e.closePath();
            vt(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 5, a * 70);
            e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
            e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
            e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
            e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
            e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
            e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
            e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
            e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
            e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
            e.closePath();
            vt(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 19, a * 158);
            e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
            e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
            e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
            e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
            e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
            e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
            e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
            e.closePath();
            vt(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 4, a * 183);
            e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
            e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
            e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
            e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
            e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
            e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
            e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
            e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
            e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
            e.closePath();
            vt(e, b[3], b[3], a * 32);
            ut(e, a * 41, a * 30, a * 14.7648230602334);
            vt(e, b[3], b[3], a * 32);
            ut(e, a * 369, a * 30, a * 15.556349186104045);
            vt(e, b[3], b[3], a * 32);
            ut(e, a * 364, a * 190, a * 15.620499351813308);
            vt(e, b[3], b[3], a * 32);
            ut(e, a * 41, a * 186, a * 15.556349186104045);
            vt(e, b[3], b[3], a * 32);
        } else if (c == 2) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 9, a * 5);
            e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
            e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
            e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
            e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
            e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
            e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
            e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
            e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
            e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
            e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
            e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
            e.closePath();
            vt(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 5, a * 70);
            e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
            e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
            e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
            e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
            e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
            e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
            e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
            e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
            e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
            e.closePath();
            vt(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 19, a * 158);
            e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
            e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
            e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
            e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
            e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
            e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
            e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
            e.closePath();
            vt(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 4, a * 183);
            e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
            e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
            e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
            e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
            e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
            e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
            e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
            e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
            e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
            e.closePath();
            vt(e, b[3], b[3], a * 32);
            ut(e, a * 41, a * 30, a * 14.7648230602334);
            vt(e, b[3], b[3], a * 32);
            ut(e, a * 369, a * 30, a * 15.556349186104045);
            vt(e, b[3], b[3], a * 32);
            ut(e, a * 364, a * 190, a * 15.620499351813308);
            vt(e, b[3], b[3], a * 32);
            ut(e, a * 41, a * 186, a * 15.556349186104045);
            vt(e, b[3], b[3], a * 32);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9, a * 5);
        e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
        e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
        e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
        e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
        e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
        e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
        e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
        e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
        e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
        e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
        e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
        e.closePath();
        vt(e, b[1], b[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 5, a * 70);
        e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
        e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
        e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
        e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
        e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
        e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
        e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
        e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
        e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
        e.closePath();
        vt(e, b[2], b[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19, a * 158);
        e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
        e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
        e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
        e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
        e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
        e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
        e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
        e.closePath();
        vt(e, b[1], b[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 183);
        e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
        e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
        e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
        e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
        e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
        e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
        e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
        e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
        e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
        e.closePath();
        vt(e, b[2], b[0], a * 12);
        ut(e, a * 41, a * 30, a * 14.7648230602334);
        vt(e, b[2], b[0], a * 12);
        ut(e, a * 369, a * 30, a * 15.556349186104045);
        vt(e, b[2], b[0], a * 12);
        ut(e, a * 364, a * 190, a * 15.620499351813308);
        vt(e, b[2], b[0], a * 12);
        ut(e, a * 41, a * 186, a * 15.556349186104045);
        vt(e, b[2], b[0], a * 12);
        return d;
    }
    function Iu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 139;
        d.height = a * 135;
        e.translate(0, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 77);
        e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
        e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
        e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
        e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
        e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 37);
        e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
        e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
        e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
        e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
        e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 63);
        e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
        e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
        e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
        e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
        e.closePath();
        vt(e, c[0]);
        e.translate(0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 77);
        e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
        e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
        e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
        e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
        e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
        e.closePath();
        vt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 37);
        e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
        e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
        e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
        e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
        e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
        e.closePath();
        vt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 63);
        e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
        e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
        e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
        e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
        e.closePath();
        vt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 38);
        e.bezierCurveTo(a * 72.5, a * 52, a * 72.5, a * 52, a * 65, a * 66);
        e.bezierCurveTo(a * 47.5, a * 37, a * 47.5, a * 37, a * 30, a * 7);
        e.bezierCurveTo(a * 48, a * 4, a * 57, a * 4, a * 64, a * 10);
        e.closePath();
        vt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 65);
        e.bezierCurveTo(a * 125, a * 73, a * 95.5, a * 69, a * 126, a * 73);
        e.bezierCurveTo(a * 119, a * 98, a * 106, a * 104, a * 98, a * 103);
        e.bezierCurveTo(a * 84.5, a * 102, a * 84.5, a * 102, a * 71, a * 101);
        e.bezierCurveTo(a * 64, a * 86, a * 64, a * 86, a * 57, a * 70);
        e.closePath();
        vt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 69);
        e.bezierCurveTo(a * 64, a * 65, a * 46, a * 67, a * 65, a * 65);
        e.bezierCurveTo(a * 43.5, a * 94, a * 43.5, a * 94, a * 22, a * 123);
        e.bezierCurveTo(a * 8, a * 103, a * 8, a * 103, a * 9, a * 103);
        e.bezierCurveTo(a * 5, a * 98, a * 11, a * 89, a * 26, a * 70);
        e.closePath();
        vt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26, a * 69);
        e.bezierCurveTo(a * 65, a * 60, a * 45, a * 65, a * 64, a * 60);
        e.bezierCurveTo(a * 63, a * 65, a * 63, a * 65, a * 62, a * 70);
        e.closePath();
        vt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 38);
        e.bezierCurveTo(a * 68, a * 70, a * 75, a * 53, a * 70, a * 68);
        e.bezierCurveTo(a * 65, a * 67, a * 65, a * 67, a * 60, a * 65);
        e.closePath();
        vt(e, c[2]);
        return d;
    }
    function Ju(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 345;
        d.height = a * 250;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 58);
        e.bezierCurveTo(a * 100.5, a * 43, a * 100.5, a * 43, a * 96, a * 28);
        e.bezierCurveTo(a * 119.5, a * 33.5, a * 119.5, a * 33.5, a * 143, a * 39);
        e.bezierCurveTo(a * 170, a * 37, a * 177, a * 37, a * 188, a * 40);
        e.bezierCurveTo(a * 213, a * 33.5, a * 213, a * 33.5, a * 238, a * 27);
        e.bezierCurveTo(a * 231, a * 52, a * 234, a * 42.5, a * 230, a * 58);
        e.closePath();
        vt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 108, a * 51);
        e.bezierCurveTo(a * 91, a * 55, a * 85, a * 44, a * 86, a * 29);
        e.bezierCurveTo(a * 62, a * 50, a * 78, a * 69, a * 92, a * 75);
        e.closePath();
        vt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 249, a * 27);
        e.bezierCurveTo(a * 273, a * 49, a * 262, a * 68, a * 246, a * 77);
        e.bezierCurveTo(a * 231, a * 59, a * 236, a * 66.5, a * 226, a * 56);
        e.bezierCurveTo(a * 243, a * 53, a * 252, a * 43, a * 249, a * 28);
        e.closePath();
        vt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87, a * 78);
        e.bezierCurveTo(a * 87, a * 59, a * 98, a * 46, a * 127, a * 48);
        e.bezierCurveTo(a * 176, a * 48.5, a * 176, a * 48.5, a * 225, a * 49);
        e.bezierCurveTo(a * 243, a * 49, a * 253, a * 59, a * 253, a * 76);
        e.bezierCurveTo(a * 211, a * 85.5, a * 211, a * 85.5, a * 169, a * 95);
        e.closePath();
        vt(e, c[5], c[6], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 105);
        e.bezierCurveTo(a * 56, a * 92, a * 59, a * 86, a * 65, a * 73);
        e.bezierCurveTo(a * 62.5, a * 61.5, a * 62.5, a * 61.5, a * 60, a * 50);
        e.bezierCurveTo(a * 99.5, a * 64.5, a * 99.5, a * 64.5, a * 139, a * 79);
        e.bezierCurveTo(a * 164, a * 77, a * 177, a * 76, a * 203, a * 78);
        e.bezierCurveTo(a * 242, a * 63.5, a * 242, a * 63.5, a * 281, a * 49);
        e.bezierCurveTo(a * 279, a * 60.5, a * 279, a * 60.5, a * 277, a * 72);
        e.bezierCurveTo(a * 286, a * 88, a * 286, a * 96, a * 287, a * 104);
        e.bezierCurveTo(a * 228.5, a * 127, a * 228.5, a * 127, a * 170, a * 150);
        e.closePath();
        vt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 48, a * 130);
        e.bezierCurveTo(a * 61, a * 155, a * 63, a * 165, a * 56, a * 171);
        e.bezierCurveTo(a * 48, a * 177, a * 40, a * 171, a * 38, a * 178);
        e.bezierCurveTo(a * 33, a * 180, a * 37, a * 188, a * 47, a * 208);
        e.bezierCurveTo(a * 52, a * 221, a * 55, a * 222, a * 75, a * 229);
        e.bezierCurveTo(a * 91, a * 213, a * 98, a * 212, a * 112, a * 219);
        e.bezierCurveTo(a * 167, a * 225, a * 187, a * 224, a * 222, a * 220);
        e.bezierCurveTo(a * 244, a * 214, a * 247, a * 213, a * 263, a * 229);
        e.bezierCurveTo(a * 295, a * 220, a * 291, a * 215, a * 301, a * 194);
        e.bezierCurveTo(a * 308, a * 178, a * 309, a * 176, a * 302, a * 173);
        e.bezierCurveTo(a * 290, a * 177, a * 289, a * 177, a * 283, a * 169);
        e.bezierCurveTo(a * 279, a * 163, a * 279, a * 161, a * 290, a * 130);
        e.bezierCurveTo(a * 270, a * 127, a * 270, a * 127, a * 250, a * 124);
        e.bezierCurveTo(a * 209, a * 137.5, a * 209, a * 137.5, a * 168, a * 151);
        e.bezierCurveTo(a * 121, a * 135, a * 121, a * 135, a * 74, a * 119);
        e.closePath();
        vt(e, c[1], c[2], a * 8);
        e.globalCompositeOperation = "destination-out";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 133, a * 158);
        e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
        e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
        e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
        e.closePath();
        vt(e, c[7], c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 215, a * 146);
        e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
        e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
        e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
        e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
        e.closePath();
        vt(e, c[7], c[8], a * 8);
        e.globalCompositeOperation = "source-over";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 133, a * 158);
        e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
        e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
        e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
        e.closePath();
        vt(e, undefined, c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 215, a * 146);
        e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
        e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
        e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
        e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
        e.closePath();
        vt(e, undefined, c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 66);
        e.bezierCurveTo(a * 57, a * 107, a * 63, a * 96, a * 120, a * 106);
        e.bezierCurveTo(a * 154, a * 112, a * 163, a * 116, a * 174, a * 135);
        e.bezierCurveTo(a * 180, a * 109, a * 191, a * 113, a * 237, a * 103);
        e.bezierCurveTo(a * 276, a * 100, a * 289, a * 94, a * 301, a * 67);
        e.bezierCurveTo(a * 317, a * 112, a * 301, a * 141, a * 274, a * 139);
        e.bezierCurveTo(a * 204, a * 166, a * 197, a * 169, a * 173, a * 183);
        e.bezierCurveTo(a * 170, a * 183, a * 170, a * 183, a * 167, a * 183);
        e.bezierCurveTo(a * 132, a * 160, a * 112, a * 156, a * 73, a * 141);
        e.bezierCurveTo(a * 43, a * 146, a * 27, a * 120, a * 39, a * 66);
        e.closePath();
        vt(e, c[7], c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 185);
        e.bezierCurveTo(a * 115, a * 200, a * 118, a * 206, a * 124, a * 212);
        e.bezierCurveTo(a * 133, a * 223, a * 132, a * 231, a * 121, a * 230);
        e.bezierCurveTo(a * 108, a * 226, a * 108, a * 215, a * 107, a * 209);
        e.bezierCurveTo(a * 106, a * 201, a * 110, a * 196, a * 114, a * 185);
        e.closePath();
        vt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226, a * 186);
        e.bezierCurveTo(a * 234, a * 201, a * 238, a * 209, a * 228, a * 225);
        e.bezierCurveTo(a * 223, a * 233, a * 213, a * 233, a * 211, a * 226);
        e.bezierCurveTo(a * 206, a * 219, a * 217, a * 216, a * 221, a * 207);
        e.bezierCurveTo(a * 225, a * 196, a * 225, a * 191, a * 226, a * 186);
        e.closePath();
        vt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 172, a * 110);
        e.bezierCurveTo(a * 189, a * 153, a * 192, a * 160, a * 188, a * 175);
        e.bezierCurveTo(a * 183, a * 190, a * 176, a * 197, a * 165, a * 191);
        e.bezierCurveTo(a * 153, a * 181, a * 152, a * 166, a * 157, a * 151);
        e.bezierCurveTo(a * 164.5, a * 131, a * 164.5, a * 131, a * 172, a * 111);
        e.closePath();
        vt(e, c[3], c[4], a * 8);
        return d;
    }
    function Ku(a, b, c) {
        var d = (e = document.createElement("canvas")).getContext("2d");
        if (c == 0) {
            e.width = a * 566;
            e.height = a * 429;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 312.625, a * 39.046875);
            d.bezierCurveTo(a * 456.625, a * 60.046875, a * 521.625, a * 134.046875, a * 528.625, a * 199.046875);
            d.bezierCurveTo(a * 540.625, a * 298.046875, a * 491.625, a * 364.046875, a * 405.625, a * 394.046875);
            d.bezierCurveTo(a * 270.625, a * 429.046875, a * 182.625, a * 395.046875, a * 100.625, a * 344.046875);
            d.bezierCurveTo(a * 15.625, a * 283.046875, a * 20.625, a * 195.046875, a * 33.625, a * 158.046875);
            d.bezierCurveTo(a * 56.625, a * 80.046875, a * 102.625, a * 46.046875, a * 183.625, a * 33.046875);
            d.bezierCurveTo(a * 225.625, a * 25.046875, a * 270.625, a * 30.046875, a * 312.625, a * 39.046875);
            d.closePath();
            vt(d, b[0]);
        } else if (c == 1) {
            d = (e = document.createElement("canvas")).getContext("2d");
            e.width = a * 511;
            e.height = a * 408;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 141.625, a * 49.296875);
            d.bezierCurveTo(a * 225.625, a * 10.296875, a * 320.625, a * 16.296875, a * 390.625, a * 39.296875);
            d.bezierCurveTo(a * 476.625, a * 71.296875, a * 483.625, a * 142.296875, a * 486.625, a * 197.296875);
            d.bezierCurveTo(a * 491.625, a * 289.296875, a * 462.625, a * 317.296875, a * 417.625, a * 351.296875);
            d.bezierCurveTo(a * 367.625, a * 385.296875, a * 313.625, a * 404.296875, a * 218.625, a * 395.296875);
            d.bezierCurveTo(a * 108.625, a * 381.296875, a * 81.625, a * 350.296875, a * 52.625, a * 305.296875);
            d.bezierCurveTo(a * 16.625, a * 244.296875, a * 23.625, a * 171.296875, a * 37.625, a * 145.296875);
            d.bezierCurveTo(a * 65.625, a * 84.296875, a * 97.625, a * 74.296875, a * 141.625, a * 49.296875);
            d.closePath();
            vt(d, b[0]);
        } else if (c == 2) {
            var e;
            d = (e = document.createElement("canvas")).getContext("2d");
            e.width = a * 504;
            e.height = a * 408;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 153.625, a * 46.296875);
            d.bezierCurveTo(a * 271.625, a * 17.296875, a * 345.625, a * 35.296875, a * 410.625, a * 71.296875);
            d.bezierCurveTo(a * 473.625, a * 109.296875, a * 478.625, a * 167.296875, a * 473.625, a * 205.296875);
            d.bezierCurveTo(a * 462.625, a * 295.296875, a * 438.625, a * 316.296875, a * 388.625, a * 345.296875);
            d.bezierCurveTo(a * 331.625, a * 374.296875, a * 273.625, a * 392.296875, a * 180.625, a * 387.296875);
            d.bezierCurveTo(a * 111.625, a * 380.296875, a * 86.625, a * 360.296875, a * 51.625, a * 309.296875);
            d.bezierCurveTo(a * 23.625, a * 267.296875, a * 25.625, a * 226.296875, a * 27.625, a * 175.296875);
            d.bezierCurveTo(a * 37.625, a * 99.296875, a * 88.625, a * 57.296875, a * 153.625, a * 46.296875);
            d.closePath();
            vt(d, b[0]);
        }
        return e;
    }
    function Lu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 69;
        d.height = a * 120;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 30, a * 84);
        wt(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
        e.restore();
        vt(e, c[0]);
        e.save();
        e.translate(a * 30, a * 45);
        wt(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
        e.restore();
        vt(e, c[0]);
        e.save();
        e.translate(a * 30, a * 17);
        wt(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
        e.restore();
        vt(e, c[0]);
        e.save();
        e.translate(a * 30, a * 31);
        wt(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
        e.restore();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 36, a * 79.140625);
        wt(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
        e.restore();
        vt(e, c[1], c[2], a * 3);
        e.save();
        e.translate(a * 35, a * 40.140625);
        wt(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
        e.restore();
        vt(e, c[3], c[4], a * 3);
        e.save();
        e.translate(a * 35, a * 12.140625);
        wt(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
        e.restore();
        vt(e, c[3], c[4], a * 3);
        e.save();
        e.translate(a * 34.5, a * 26.140625);
        wt(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
        e.restore();
        vt(e, c[3], c[4], a * 3);
        return d;
    }
    function Mu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 300;
        d.translate(a * -80, -20);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 200.5, a * 14.953125);
        d.bezierCurveTo(a * 203, a * 171.953125, a * 203, a * 171.953125, a * 205.5, a * 328.953125);
        d.bezierCurveTo(a * 188.5, a * 257.953125, a * 164.5, a * 216.953125, a * 166.5, a * 176.953125);
        d.bezierCurveTo(a * 168.5, a * 133.953125, a * 198.5, a * 98.953125, a * 200.5, a * 14.953125);
        d.closePath();
        vt(d, b[0]);
        return c;
    }
    const Nu = 2;
    function Ou(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 20;
        c.height = a * 35;
        wt(d, 0, 0, 20, 35, 7);
        vt(d, b[0]);
        return c;
    }
    function Qu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 271;
        c.height = a * 366;
        d.globalAlpha = 0.5;
        d.translate(0, a * 10);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 99);
        d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
        d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
        d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
        d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
        d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
        d.closePath();
        vt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 73, a * 270);
        d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
        d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
        d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
        d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
        d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
        d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
        d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
        d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
        d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
        d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
        d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
        d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
        d.closePath();
        vt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 252);
        d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
        d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
        d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
        d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
        d.closePath();
        vt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 84, a * 257);
        d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
        d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
        d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
        d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
        d.closePath();
        vt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 125, a * 65);
        d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
        d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
        d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
        d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
        d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
        d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
        d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
        d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
        d.closePath();
        vt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 37);
        d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
        d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
        d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
        d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
        d.closePath();
        vt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 146, a * 34);
        d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
        d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
        d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
        d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
        d.closePath();
        vt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 143, a * 69);
        d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
        d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
        d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
        d.closePath();
        vt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 149, a * 92);
        d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
        d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
        d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
        d.closePath();
        vt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 111, a * 61);
        d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
        d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
        d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
        d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
        d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
        d.closePath();
        vt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107, a * 81);
        d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
        d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
        d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
        d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
        d.closePath();
        vt(d, b[0]);
        d.globalAlpha = 1;
        d.translate(0, a * -10);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 99);
        d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
        d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
        d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
        d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
        d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
        d.closePath();
        vt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 73, a * 270);
        d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
        d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
        d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
        d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
        d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
        d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
        d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
        d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
        d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
        d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
        d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
        d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
        d.closePath();
        vt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 252);
        d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
        d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
        d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
        d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
        d.closePath();
        vt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 84, a * 257);
        d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
        d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
        d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
        d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
        d.closePath();
        vt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 125, a * 65);
        d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
        d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
        d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
        d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
        d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
        d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
        d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
        d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
        d.closePath();
        vt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 37);
        d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
        d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
        d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
        d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
        d.closePath();
        vt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 146, a * 34);
        d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
        d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
        d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
        d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
        d.closePath();
        vt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 143, a * 69);
        d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
        d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
        d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
        d.closePath();
        vt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 149, a * 92);
        d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
        d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
        d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
        d.closePath();
        vt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 111, a * 61);
        d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
        d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
        d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
        d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
        d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
        d.closePath();
        vt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107, a * 81);
        d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
        d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
        d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
        d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
        d.closePath();
        vt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 99);
        d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
        d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
        d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
        d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
        d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
        d.closePath();
        vt(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 73, a * 270);
        d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
        d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
        d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
        d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
        d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
        d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
        d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
        d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
        d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
        d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
        d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
        d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
        d.closePath();
        vt(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 252);
        d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
        d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
        d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
        d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
        d.closePath();
        vt(d, b[2]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 84, a * 257);
        d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
        d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
        d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
        d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
        d.closePath();
        vt(d, b[1]);
        ut(d, a * 102, a * 269, a * 11);
        vt(d, b[3]);
        ut(d, a * 98, a * 266, a * 5);
        vt(d, b[6]);
        ut(d, a * 168, a * 269, a * 11);
        vt(d, b[3]);
        ut(d, a * 164, a * 266, a * 5);
        vt(d, b[6]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 125, a * 65);
        d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
        d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
        d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
        d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
        d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
        d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
        d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
        d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
        d.closePath();
        vt(d, b[2]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 235);
        d.bezierCurveTo(a * 118, a * 258, a * 137, a * 268, a * 148, a * 246);
        d.bezierCurveTo(a * 156, a * 228, a * 152, a * 169, a * 150, a * 140);
        d.bezierCurveTo(a * 147, a * 87, a * 143, a * 69, a * 142, a * 60);
        d.bezierCurveTo(a * 136, a * 44, a * 132, a * 43, a * 127, a * 62);
        d.bezierCurveTo(a * 119, a * 116, a * 119, a * 140, a * 116, a * 166);
        d.bezierCurveTo(a * 113, a * 202, a * 113, a * 223, a * 115, a * 233);
        d.closePath();
        vt(d, b[4]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 132, a * 219);
        d.bezierCurveTo(a * 140, a * 229, a * 142, a * 231, a * 145, a * 237);
        d.bezierCurveTo(a * 145, a * 245, a * 139, a * 249, a * 133, a * 249);
        d.bezierCurveTo(a * 123, a * 248, a * 123, a * 243, a * 121, a * 239);
        d.bezierCurveTo(a * 126, a * 227, a * 129, a * 223, a * 132, a * 219);
        d.closePath();
        vt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 179);
        d.bezierCurveTo(a * 140, a * 188.5, a * 140, a * 188.5, a * 147, a * 198);
        d.bezierCurveTo(a * 148, a * 209, a * 142, a * 214, a * 133, a * 214);
        d.bezierCurveTo(a * 121, a * 211, a * 121, a * 207, a * 120, a * 200);
        d.bezierCurveTo(a * 126.5, a * 189.5, a * 126.5, a * 189.5, a * 133, a * 179);
        d.closePath();
        vt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 143);
        d.bezierCurveTo(a * 139, a * 151.5, a * 139, a * 151.5, a * 145, a * 160);
        d.bezierCurveTo(a * 143, a * 167, a * 140, a * 170, a * 134, a * 170);
        d.bezierCurveTo(a * 128, a * 169, a * 124, a * 167, a * 123, a * 161);
        d.bezierCurveTo(a * 128, a * 152, a * 128, a * 152, a * 133, a * 143);
        d.closePath();
        vt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 115);
        d.bezierCurveTo(a * 137.5, a * 121.5, a * 137.5, a * 121.5, a * 142, a * 128);
        d.bezierCurveTo(a * 141, a * 133, a * 138, a * 135, a * 133, a * 135);
        d.bezierCurveTo(a * 129, a * 135, a * 125, a * 132, a * 125, a * 129);
        d.bezierCurveTo(a * 129, a * 122, a * 129, a * 122, a * 133, a * 115);
        d.closePath();
        vt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 94);
        d.bezierCurveTo(a * 136.5, a * 98.5, a * 136.5, a * 98.5, a * 140, a * 103);
        d.bezierCurveTo(a * 139, a * 109, a * 137, a * 109, a * 133, a * 110);
        d.bezierCurveTo(a * 127, a * 108, a * 129, a * 107, a * 127, a * 105);
        d.bezierCurveTo(a * 130, a * 99.5, a * 130, a * 99.5, a * 133, a * 94);
        d.closePath();
        vt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130, a * 279);
        d.bezierCurveTo(a * 136.5, a * 287.5, a * 136.5, a * 287.5, a * 143, a * 296);
        d.bezierCurveTo(a * 143, a * 302, a * 139, a * 309, a * 131, a * 308);
        d.bezierCurveTo(a * 123, a * 306, a * 121, a * 303, a * 120, a * 297);
        d.bezierCurveTo(a * 125.5, a * 288.5, a * 125.5, a * 288.5, a * 131, a * 280);
        d.closePath();
        vt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 147, a * 303);
        d.bezierCurveTo(a * 151, a * 311, a * 151, a * 319, a * 147, a * 321);
        d.bezierCurveTo(a * 138, a * 320, a * 145, a * 308, a * 147, a * 303);
        d.closePath();
        vt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 303);
        d.bezierCurveTo(a * 115, a * 312, a * 118, a * 319, a * 115, a * 319);
        d.bezierCurveTo(a * 112, a * 324, a * 109, a * 318, a * 109, a * 314);
        d.bezierCurveTo(a * 109, a * 308, a * 112, a * 303, a * 115, a * 303);
        d.closePath();
        vt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 89, a * 280);
        d.bezierCurveTo(a * 83, a * 279, a * 80, a * 281, a * 81, a * 286);
        d.bezierCurveTo(a * 83, a * 290, a * 84, a * 290, a * 87, a * 286);
        d.closePath();
        vt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 94, a * 290);
        d.bezierCurveTo(a * 93, a * 294, a * 90, a * 303, a * 86, a * 298);
        d.bezierCurveTo(a * 84, a * 295, a * 84, a * 291, a * 89, a * 291);
        d.closePath();
        vt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 163, a * 295);
        d.bezierCurveTo(a * 175, a * 294, a * 176, a * 296, a * 175, a * 301);
        d.bezierCurveTo(a * 174, a * 305, a * 171, a * 305, a * 166, a * 300);
        d.closePath();
        vt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 172, a * 286);
        d.bezierCurveTo(a * 180, a * 285, a * 181, a * 285, a * 180, a * 291);
        d.bezierCurveTo(a * 176, a * 295, a * 174, a * 294, a * 172, a * 286);
        d.closePath();
        vt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 37);
        d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
        d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
        d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
        d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
        d.closePath();
        vt(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 146, a * 34);
        d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
        d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
        d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
        d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
        d.closePath();
        vt(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 143, a * 69);
        d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
        d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
        d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
        d.closePath();
        vt(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 149, a * 92);
        d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
        d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
        d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
        d.closePath();
        vt(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 111, a * 61);
        d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
        d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
        d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
        d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
        d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
        d.closePath();
        vt(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107, a * 81);
        d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
        d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
        d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
        d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
        d.closePath();
        vt(d, b[7]);
        return c;
    }
    function Ru(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 85;
        c.height = a * 145;
        d.translate(a * -20, a * -95);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 50, a * 105);
        d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
        d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
        d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
        d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
        d.closePath();
        vt(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 44, a * 106);
        d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
        d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
        d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
        d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
        d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
        d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
        d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
        d.closePath();
        vt(d, b[2], b[3], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 30, a * 159);
        d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
        d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
        d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
        d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
        d.closePath();
        vt(d, b[2]);
        return c;
    }
    function Su(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 280;
        d.translate(a * -100, a * -20);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 228.5, a * 331.953125);
        d.bezierCurveTo(a * 228.5, a * 12.953125, a * 228.5, a * 171.453125, a * 228.5, a * 10.953125);
        d.bezierCurveTo(a * 196.5, a * 76.953125, a * 206.5, a * 78.953125, a * 191.5, a * 114.953125);
        d.bezierCurveTo(a * 162.5, a * 170.953125, a * 206.5, a * 220.953125, a * 210.5, a * 251.953125);
        d.bezierCurveTo(a * 218.5, a * 287.953125, a * 220.5, a * 291.953125, a * 228.5, a * 331.953125);
        d.closePath();
        vt(d, b[0]);
        return c;
    }
    function em(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 85;
        c.height = a * 145;
        d.translate(a * -165, a * -95);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217, a * 103);
        d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
        d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
        d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
        d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
        d.closePath();
        vt(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 231, a * 163);
        d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
        d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
        d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
        d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
        d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
        d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
        d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
        d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
        d.closePath();
        vt(d, b[2], b[3], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 234, a * 154);
        d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
        d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
        d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
        d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
        d.closePath();
        vt(d, b[2]);
        return c;
    }
    function im(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 175;
        d.height = a * 106;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 67);
        e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
        e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
        e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 75);
        e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
        e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
        e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
        e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
        e.closePath();
        vt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 38, a * 46);
        e.bezierCurveTo(a * 52, a * 37, a * 69, a * 36, a * 85, a * 36);
        e.bezierCurveTo(a * 118, a * 38, a * 129, a * 42, a * 137, a * 48);
        e.bezierCurveTo(a * 135, a * 45, a * 135, a * 45, a * 133, a * 42);
        e.bezierCurveTo(a * 124, a * 32, a * 116, a * 28, a * 88, a * 25);
        e.bezierCurveTo(a * 47, a * 28, a * 40, a * 32, a * 36, a * 44);
        e.closePath();
        vt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 75);
        e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
        e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
        e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
        e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
        e.closePath();
        vt(e, undefined, c[2], a * 4);
        e.translate(0, a * -3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 67);
        e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
        e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
        e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
        e.closePath();
        vt(e, c[10], c[10], a * 4);
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 43);
        e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
        e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
        e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 43);
        e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
        e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
        e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 19);
        e.bezierCurveTo(a * 24, a * 35, a * 35, a * 42, a * 42, a * 44);
        e.bezierCurveTo(a * 43, a * 51, a * 43, a * 48, a * 43, a * 56);
        e.bezierCurveTo(a * 25, a * 47, a * 17, a * 36, a * 23, a * 20);
        e.closePath();
        vt(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 148, a * 18);
        e.bezierCurveTo(a * 159, a * 44, a * 139, a * 52, a * 130, a * 55);
        e.bezierCurveTo(a * 129, a * 48, a * 129, a * 46, a * 131, a * 43);
        e.bezierCurveTo(a * 144, a * 37, a * 148, a * 35, a * 147, a * 18);
        e.closePath();
        vt(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 43);
        e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
        e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
        e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
        e.closePath();
        vt(e, undefined, c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 43);
        e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
        e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
        e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
        e.closePath();
        vt(e, Ga, c[4], a * 4);
        e.save();
        e.translate(a * 87, a * 34.5);
        e.rotate(0);
        wt(e, a * -8, a * -10.5, a * 16, a * 21, a * 10);
        e.restore();
        vt(e, c[7], c[2], a * 4);
        e.save();
        e.translate(a * 87, a * 57);
        e.rotate(0);
        wt(e, a * -8, a * -23, a * 16, a * 46, a * 10);
        e.restore();
        vt(e, c[8], c[2], a * 4);
        ut(e, a * 87, a * 39, a * 4.123105625617661);
        vt(e, c[9], c[2], a * 4);
        ut(e, a * 87, a * 60, a * 4.242640687119285);
        vt(e, c[9], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 67);
        e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
        e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
        e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
        e.closePath();
        vt(e, c[8], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 69);
        e.bezierCurveTo(a * 13, a * 77, a * 16, a * 74, a * 27, a * 80);
        e.closePath();
        vt(e, c[9], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 70);
        e.bezierCurveTo(a * 149.5, a * 72, a * 149.5, a * 72, a * 154, a * 74);
        e.bezierCurveTo(a * 150, a * 77, a * 150, a * 77, a * 146, a * 80);
        e.closePath();
        vt(e, c[9], c[2], a * 4);
        ut(e, a * 50, a * 80, a * 5);
        vt(e, c[9], c[2], a * 4);
        ut(e, a * 86.01141357421875, a * 81.76705932617188, a * 5);
        vt(e, c[9], c[2], a * 4);
        ut(e, a * 119.01141357421875, a * 80.13069152832031, a * 5);
        vt(e, c[9], c[2], a * 4);
        return d;
    }
    function tm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 48;
        c.height = a * 47;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 7.1875, a * 25.434661865234375);
        d.bezierCurveTo(a * 11.1875, a * 13.434661865234375, a * 18.1875, a * 8.434661865234375, a * 32.1875, a * 10.434661865234375);
        d.bezierCurveTo(a * 45.1875, a * 14.434661865234375, a * 41.1875, a * 24.434661865234375, a * 36.1875, a * 30.434661865234375);
        d.bezierCurveTo(a * 22.1875, a * 42.434661865234375, a * 2.1875, a * 41.434661865234375, a * 7.1875, a * 25.434661865234375);
        d.closePath();
        vt(d, b[0]);
        return c;
    }
    function nm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 180;
        d.height = a * 120;
        e.translate(a * -65, a * -35);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 150.5, a * 63.84375);
        wt(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
        e.restore();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80.5, a * 75.34375);
        e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
        e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
        e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 206.5, a * 71.34375);
        e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
        e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
        e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 136.5, a * 75.34375);
        e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
        e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
        e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
        e.closePath();
        vt(e, c[0]);
        e.save();
        e.translate(a * 152.5, a * 80.84375);
        e.rotate(3.12);
        wt(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
        e.restore();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 150.5, a * 63.84375);
        wt(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
        e.restore();
        vt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80.5, a * 75.34375);
        e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
        e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
        e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
        e.closePath();
        vt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 206.5, a * 71.34375);
        e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
        e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
        e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
        e.closePath();
        vt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 136.5, a * 75.34375);
        e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
        e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
        e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
        e.closePath();
        vt(e, c[1], c[2], a * 4);
        e.save();
        e.translate(a * 152.5, a * 80.84375);
        e.rotate(3.12);
        wt(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
        e.restore();
        vt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 83.5, a * 73.34375);
        e.bezierCurveTo(a * 93.5, a * 70.34375, a * 105.5, a * 70.34375, a * 124.5, a * 72.34375);
        e.bezierCurveTo(a * 132.5, a * 78.34375, a * 162.5, a * 80.34375, a * 176.5, a * 76.34375);
        e.bezierCurveTo(a * 194.5, a * 69.34375, a * 192.5, a * 68.34375, a * 199.5, a * 63.34375);
        e.bezierCurveTo(a * 204.5, a * 63.34375, a * 204.5, a * 63.34375, a * 209.5, a * 63.34375);
        e.bezierCurveTo(a * 153.5, a * 82.34375, a * 157.5, a * 85.34375, a * 209.5, a * 63.34375);
        e.bezierCurveTo(a * 194.5, a * 88.34375, a * 162.5, a * 87.34375, a * 149.5, a * 88.34375);
        e.bezierCurveTo(a * 129.5, a * 81.34375, a * 103.5, a * 75.34375, a * 83.5, a * 82.34375);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137.5, a * 65.34375);
        e.bezierCurveTo(a * 150.5, a * 76.34375, a * 170.5, a * 71.34375, a * 174.5, a * 65.34375);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 221.5, a * 85.34375);
        e.bezierCurveTo(a * 211.5, a * 79.34375, a * 191.5, a * 88.34375, a * 181.5, a * 96.34375);
        e.bezierCurveTo(a * 201.5, a * 96.34375, a * 201.5, a * 96.34375, a * 221.5, a * 96.34375);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 89.34375);
        e.bezierCurveTo(a * 102.5, a * 87.34375, a * 112.5, a * 88.34375, a * 119.5, a * 97.34375);
        e.bezierCurveTo(a * 102, a * 98.34375, a * 102, a * 98.34375, a * 84.5, a * 99.34375);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 208.5, a * 104.34375);
        e.bezierCurveTo(a * 208.5, a * 110.34375, a * 208.5, a * 110.34375, a * 208.5, a * 116.34375);
        e.bezierCurveTo(a * 211.5, a * 110.34375, a * 211.5, a * 110.34375, a * 214.5, a * 104.34375);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 117.34375);
        e.bezierCurveTo(a * 92, a * 118.84375, a * 92, a * 118.84375, a * 96.5, a * 120.34375);
        e.bezierCurveTo(a * 93, a * 123.84375, a * 93, a * 123.84375, a * 89.5, a * 127.34375);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107.5, a * 51.34375);
        e.bezierCurveTo(a * 122.5, a * 54.34375, a * 122.5, a * 54.34375, a * 137.5, a * 57.34375);
        e.bezierCurveTo(a * 118, a * 57.34375, a * 118, a * 57.34375, a * 98.5, a * 57.34375);
        e.bezierCurveTo(a * 94.5, a * 54.84375, a * 94.5, a * 54.84375, a * 90.5, a * 52.34375);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 170.5, a * 52.34375);
        e.bezierCurveTo(a * 179.5, a * 51.84375, a * 179.5, a * 51.84375, a * 188.5, a * 51.34375);
        e.bezierCurveTo(a * 187.5, a * 53.84375, a * 187.5, a * 53.84375, a * 186.5, a * 56.34375);
        e.bezierCurveTo(a * 177, a * 56.34375, a * 177, a * 56.34375, a * 167.5, a * 56.34375);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80.5, a * 69.34375);
        e.bezierCurveTo(a * 86.5, a * 70.34375, a * 86.5, a * 70.34375, a * 92.5, a * 71.34375);
        e.bezierCurveTo(a * 86, a * 73.34375, a * 86, a * 73.34375, a * 79.5, a * 75.34375);
        e.closePath();
        vt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222.5, a * 75.34375);
        e.bezierCurveTo(a * 214.5, a * 76.34375, a * 214.5, a * 76.34375, a * 206.5, a * 77.34375);
        e.bezierCurveTo(a * 216.5, a * 79.34375, a * 216.5, a * 79.34375, a * 226.5, a * 81.34375);
        e.closePath();
        vt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 100.34375);
        e.bezierCurveTo(a * 128, a * 97.34375, a * 128, a * 97.34375, a * 139.5, a * 94.34375);
        e.bezierCurveTo(a * 140, a * 96.84375, a * 140, a * 96.84375, a * 140.5, a * 99.34375);
        e.closePath();
        vt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 112.5, a * 48.34375);
        e.bezierCurveTo(a * 115.5, a * 50.84375, a * 115.5, a * 50.84375, a * 118.5, a * 53.34375);
        e.bezierCurveTo(a * 131, a * 50.84375, a * 131, a * 50.84375, a * 143.5, a * 48.34375);
        e.closePath();
        vt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 216.5, a * 109.34375);
        e.bezierCurveTo(a * 213, a * 114.84375, a * 213, a * 114.84375, a * 209.5, a * 120.34375);
        e.bezierCurveTo(a * 212, a * 118.84375, a * 212, a * 118.84375, a * 214.5, a * 117.34375);
        e.closePath();
        vt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86.5, a * 133.34375);
        e.bezierCurveTo(a * 89, a * 127.34375, a * 89, a * 127.34375, a * 91.5, a * 121.34375);
        e.bezierCurveTo(a * 92.5, a * 127.34375, a * 92.5, a * 127.34375, a * 93.5, a * 133.34375);
        e.closePath();
        vt(e, c[2]);
        return d;
    }
    function om(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 147;
        c.height = a * 172;
        d.globalAlpha = 0.5;
        d.translate(0, a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 8, a * 50);
        d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
        d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
        d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
        d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
        d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
        d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
        d.closePath();
        vt(d, b[0]);
        d.translate(0, a * -8);
        d.globalAlpha = 1;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 8, a * 50);
        d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
        d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
        d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
        d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
        d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
        d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
        d.closePath();
        vt(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 14, a * 57);
        d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
        d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
        vt(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 93, a * 47);
        d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
        d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
        vt(d, b[1], b[2], a * 4);
        ut(d, a * 51, a * 91, a * 9);
        vt(d, b[3]);
        ut(d, a * 95, a * 91, a * 9);
        vt(d, b[3]);
        ut(d, a * 91, a * 89, a * 4);
        vt(d, b[4]);
        ut(d, a * 47, a * 89, a * 4);
        vt(d, b[4]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 54, a * 133);
        d.bezierCurveTo(a * 56, a * 108, a * 64, a * 99, a * 73, a * 98);
        d.bezierCurveTo(a * 86, a * 97, a * 91, a * 119, a * 93, a * 133);
        d.bezierCurveTo(a * 94, a * 155, a * 90, a * 150, a * 74, a * 155);
        d.bezierCurveTo(a * 50, a * 152, a * 55, a * 145, a * 54, a * 134);
        d.closePath();
        vt(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 65.25, a * 135);
        d.bezierCurveTo(a * 75.25, a * 128, a * 83.25, a * 133, a * 83.25, a * 138);
        d.bezierCurveTo(a * 88.25, a * 148, a * 61.25, a * 149, a * 64.25, a * 137);
        d.closePath();
        vt(d, b[6]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 74, a * 145);
        d.bezierCurveTo(a * 74, a * 148, a * 74, a * 148, a * 74, a * 151);
        d.closePath();
        vt(d, Ga, b[6], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 19, a * 58);
        d.bezierCurveTo(a * 10, a * 38, a * 18, a * 33, a * 28, a * 34);
        d.bezierCurveTo(a * 41, a * 39, a * 45, a * 45, a * 50, a * 51);
        d.closePath();
        vt(d, b[6]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 100, a * 51);
        d.bezierCurveTo(a * 106, a * 36, a * 119, a * 31, a * 128, a * 36);
        d.bezierCurveTo(a * 137, a * 49, a * 128, a * 58, a * 128, a * 60);
        d.closePath();
        vt(d, b[6]);
        return c;
    }
    function am(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 142;
        d.height = a * 118;
        e.save();
        e.translate(a * 70.16665649414062, a * 38.20831298828125);
        wt(e, a * -58.5, a * -27.5, a * 117, a * 55, a * 20);
        e.restore();
        vt(e, c[0], c[1], a * 4);
        e.save();
        e.translate(a * 70, a * 42.70831298828125);
        wt(e, a * -61, a * -20, a * 122, a * 40, a * 20);
        e.restore();
        vt(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123, a * 70.375);
        e.bezierCurveTo(a * 115, a * 99.375, a * 119, a * 85.375, a * 115, a * 100.375);
        e.bezierCurveTo(a * 112, a * 116.375, a * 117, a * 109.375, a * 131, a * 100.375);
        e.bezierCurveTo(a * 131, a * 83.375, a * 131, a * 83.375, a * 131, a * 66.375);
        e.closePath();
        vt(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 11, a * 68.375);
        e.bezierCurveTo(a * 11.166656494140625, a * 84.375, a * 9, a * 99.375, a * 10, a * 100.375);
        e.bezierCurveTo(a * 35, a * 113.375, a * 27, a * 110.375, a * 25, a * 95.375);
        e.bezierCurveTo(a * 16, a * 68.375, a * 17, a * 69.375, a * 17, a * 68.375);
        e.closePath();
        vt(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46, a * 32.375);
        e.bezierCurveTo(a * 43, a * 8.375, a * 45, a * 7.375, a * 56, a * 6.375);
        e.bezierCurveTo(a * 105, a * 4.375, a * 102, a * 6.375, a * 97, a * 32.375);
        e.bezierCurveTo(a * 138, a * 43.375, a * 133, a * 45.375, a * 133, a * 58.375);
        e.bezierCurveTo(a * 133, a * 85.375, a * 125, a * 74.375, a * 111, a * 70.375);
        e.bezierCurveTo(a * 70, a * 69.875, a * 29, a * 69.375, a * 29, a * 69.375);
        e.bezierCurveTo(a * 7, a * 84.375, a * 7, a * 70.375, a * 7, a * 59.375);
        e.bezierCurveTo(a * 6, a * 28.375, a * 32, a * 39.375, a * 44, a * 32.375);
        e.closePath();
        vt(e, c[2], c[1], a * 4);
        ut(e, a * 71, a * 44.375, a * 16.55294535724685);
        vt(e, c[2], c[1], a * 4);
        ut(e, a * 71, a * 43.70831298828125, a * 8.94427190999916);
        vt(e, c[2], c[1], a * 4);
        return d;
    }
    function rm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.save();
        e.translate(a * 204, a * 195.0833282470703);
        e.rotate(10.16);
        wt(e, a * -97.5, a * -134.5, a * 195, a * 269, a * 10);
        e.restore();
        vt(e, c[0], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58.5, a * 226.5833282470703);
        e.bezierCurveTo(a * 120.5, a * 281.5833282470703, a * 120.5, a * 281.5833282470703, a * 182.5, a * 336.5833282470703);
        e.bezierCurveTo(a * 263, a * 248.5833282470703, a * 263, a * 248.5833282470703, a * 343.5, a * 160.5833282470703);
        e.bezierCurveTo(a * 280.5, a * 104.58332824707031, a * 280.5, a * 104.58332824707031, a * 217.5, a * 48.58332824707031);
        e.closePath();
        vt(e, c[2], c[3], a * 4);
        e.save();
        e.translate(a * 197, a * 169.0833282470703);
        e.rotate(10.16);
        wt(e, a * -93.5, a * -126.5, a * 187, a * 253, a * 10);
        e.restore();
        vt(e, c[4], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226.5, a * 24.583328247070312);
        e.bezierCurveTo(a * 58.5, a * 207.5833282470703, a * 143, a * 116.58332824707031, a * 59.5, a * 208.5833282470703);
        e.closePath();
        vt(e, zr, c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46.133331298828125, a * 202.64999389648438);
        e.bezierCurveTo(a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 228.64999389648438);
        e.closePath();
        vt(e, c[4], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55.133331298828125, a * 211.64999389648438);
        e.bezierCurveTo(a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 238.64999389648438);
        e.bezierCurveTo(a * 50.133331298828125, a * 235.64999389648438, a * 50.133331298828125, a * 235.64999389648438, a * 45.133331298828125, a * 232.64999389648438);
        e.bezierCurveTo(a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 200.64999389648438);
        e.closePath();
        vt(e, c[4], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46.133331298828125, a * 198.39999389648438);
        e.bezierCurveTo(a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 201.39999389648438);
        e.closePath();
        vt(e, c[4], c[1], a * 8);
        e.save();
        e.translate(a * 249.63333129882812, a * 120.89999389648438);
        e.rotate(7.04);
        wt(e, a * -58.5, a * -32, a * 117, a * 64, a * 10);
        e.restore();
        vt(e, c[5]);
        return d;
    }
    function sm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 330;
        d.translate(a * -60, a * -10);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 188.5, a * 7.953125);
        d.bezierCurveTo(a * 188.5, a * 334.953125, a * 188.5, a * 332.953125, a * 188.5, a * 339.953125);
        d.bezierCurveTo(a * 166.5, a * 295.953125, a * 145.5, a * 295.953125, a * 139.5, a * 282.953125);
        d.bezierCurveTo(a * 124.5, a * 244.953125, a * 139.5, a * 243.953125, a * 131.5, a * 212.953125);
        d.bezierCurveTo(a * 118.5, a * 161.953125, a * 69.5, a * 156.953125, a * 74.5, a * 92.953125);
        d.bezierCurveTo(a * 85.5, a * 41.953125, a * 158.5, a * 49.953125, a * 188.5, a * 7.953125);
        d.closePath();
        vt(d, b[0]);
        return c;
    }
    function hm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 300;
        d.translate(a * -200, a * -40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 344, a * 18.40625);
        d.bezierCurveTo(a * 345, a * 361.40625, a * 344, a * 191.40625, a * 344, a * 364.40625);
        d.bezierCurveTo(a * 261, a * 275.40625, a * 274, a * 259.40625, a * 229, a * 213.40625);
        d.bezierCurveTo(a * 199, a * 187.40625, a * 222, a * 133.40625, a * 273, a * 100.40625);
        d.bezierCurveTo(a * 321, a * 71.40625, a * 327, a * 34.40625, a * 344, a * 18.40625);
        d.closePath();
        vt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 335, a * 38.072906494140625);
        d.bezierCurveTo(a * 307, a * 62.072906494140625, a * 291, a * 60.072906494140625, a * 262, a * 68.07290649414062);
        d.bezierCurveTo(a * 223, a * 80.07290649414062, a * 225, a * 111.07290649414062, a * 264, a * 139.07290649414062);
        d.closePath();
        vt(d, b[0]);
        return c;
    }
    function lm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 320;
        d.translate(a * -60, a * -15);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 188.5, a * 3.953125);
        d.bezierCurveTo(a * 188.5, a * 171.453125, a * 188.5, a * 171.453125, a * 188.5, a * 338.953125);
        d.bezierCurveTo(a * 162.5, a * 268.953125, a * 145.5, a * 265.953125, a * 116.5, a * 244.953125);
        d.bezierCurveTo(a * 67.5, a * 204.953125, a * 87.5, a * 160.953125, a * 113.5, a * 125.953125);
        d.bezierCurveTo(a * 141.5, a * 90.953125, a * 176.5, a * 56.953125, a * 188.5, a * 3.953125);
        d.closePath();
        vt(d, b[0]);
        return c;
    }
    function gm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 161;
        c.height = a * 190;
        d.globalAlpha = 0.5;
        d.translate(0, 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 9, a * 93);
        d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
        d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
        d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
        d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
        d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
        d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
        d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
        d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
        d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
        d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
        d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
        d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
        d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
        d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
        d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
        d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
        d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
        d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
        d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
        d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
        d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
        d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
        d.closePath();
        vt(d, b[0]);
        d.globalAlpha = 1;
        d.translate(0, -8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 9, a * 93);
        d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
        d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
        d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
        d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
        d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
        d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
        d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
        d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
        d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
        d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
        d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
        d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
        d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
        d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
        d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
        d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
        d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
        d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
        d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
        d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
        d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
        d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
        d.closePath();
        vt(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 28, a * 63);
        d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
        d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
        d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
        d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
        d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
        d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
        d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
        d.closePath();
        vt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 99, a * 55);
        d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
        d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
        d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
        d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
        d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
        d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
        d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
        d.closePath();
        vt(d, b[3]);
        ut(d, a * 103, a * 110, a * 11);
        vt(d, b[4]);
        ut(d, a * 55, a * 111, a * 11);
        vt(d, b[4]);
        ut(d, a * 99, a * 107, a * 5);
        vt(d, b[1]);
        ut(d, a * 51, a * 108, a * 5);
        vt(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 31, a * 121);
        d.bezierCurveTo(a * 45, a * 128, a * 51, a * 133, a * 53, a * 141);
        d.bezierCurveTo(a * 59, a * 161, a * 70, a * 173, a * 80, a * 169);
        d.bezierCurveTo(a * 89, a * 172, a * 99, a * 149, a * 107, a * 133);
        d.bezierCurveTo(a * 114, a * 122, a * 119, a * 123, a * 124, a * 119);
        d.bezierCurveTo(a * 109, a * 148, a * 117, a * 133, a * 109, a * 147);
        d.bezierCurveTo(a * 87, a * 180, a * 84, a * 179, a * 76, a * 178);
        d.bezierCurveTo(a * 49, a * 173, a * 44, a * 149, a * 31, a * 121);
        d.closePath();
        vt(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.translate(-2, 0);
        d.moveTo(a * 71, a * 162);
        d.bezierCurveTo(a * 80, a * 155, a * 85, a * 159, a * 89, a * 164);
        d.bezierCurveTo(a * 90, a * 171, a * 86, a * 173, a * 79, a * 173);
        d.bezierCurveTo(a * 67, a * 172, a * 67, a * 168, a * 71, a * 162);
        d.closePath();
        vt(d, b[3]);
        d.translate(2, 0);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 9, a * 93);
        d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
        d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
        d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
        d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
        d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
        d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
        d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
        d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
        d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
        d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
        d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
        d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
        d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
        d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
        d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
        d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
        d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
        d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
        d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
        d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
        d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
        d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
        d.closePath();
        vt(d, qn, b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 25, a * 63);
        d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
        d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
        d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
        vt(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 91, a * 53);
        d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
        d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
        d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
        vt(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 31, a * 63);
        d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
        d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
        d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
        d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
        d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
        d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
        d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
        d.closePath();
        vt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 99, a * 55);
        d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
        d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
        d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
        d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
        d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
        d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
        d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
        d.closePath();
        vt(d, b[3]);
        return c;
    }
    function um(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 187;
        d.height = a * 119;
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, 3);
        e.moveTo(a * 53, a * 45);
        e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
        e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
        e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
        e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
        e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
        e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
        e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
        e.closePath();
        vt(e, c[5]);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, -3);
        e.moveTo(a * 53, a * 45);
        e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
        e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
        e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
        e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
        e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
        e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
        e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
        e.closePath();
        vt(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 151, a * 60);
        e.bezierCurveTo(a * 140, a * 36, a * 137, a * 32, a * 124, a * 29);
        e.bezierCurveTo(a * 98, a * 22, a * 80, a * 24, a * 62, a * 28);
        e.bezierCurveTo(a * 42, a * 35, a * 38, a * 46, a * 34, a * 58);
        e.bezierCurveTo(a * 53, a * 74, a * 76, a * 76, a * 91, a * 78);
        e.closePath();
        vt(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 37, a * 53);
        e.bezierCurveTo(a * 30, a * 56, a * 29, a * 67, a * 30, a * 68);
        e.bezierCurveTo(a * 94, a * 108, a * 150, a * 76, a * 155, a * 70);
        e.bezierCurveTo(a * 154, a * 60, a * 151, a * 54, a * 149, a * 53);
        e.bezierCurveTo(a * 101, a * 74, a * 66, a * 66, a * 37, a * 53);
        e.closePath();
        vt(e, c[2], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 36);
        e.bezierCurveTo(a * 92, a * 25, a * 86, a * 28, a * 82, a * 34);
        e.bezierCurveTo(a * 88, a * 40, a * 93, a * 40, a * 98, a * 36);
        e.closePath();
        vt(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 43);
        e.bezierCurveTo(a * 69, a * 46, a * 67, a * 52, a * 69, a * 58);
        vt(e, undefined, c[1], a * 4);
        ut(e, a * 58, a * 50, a * 5);
        vt(e, c[4]);
        ut(e, a * 43, a * 65, a * 5);
        vt(e, c[4]);
        ut(e, a * 58, a * 73, a * 5);
        vt(e, c[4]);
        ut(e, a * 58, a * 50, a * 2);
        vt(e, c[5]);
        ut(e, a * 43, a * 65, a * 2);
        vt(e, c[5]);
        ut(e, a * 58, a * 73, a * 2);
        vt(e, c[5]);
        return d;
    }
    function bm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 170;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * -10, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 4.109375);
        e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
        e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
        e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
        e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * 10, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 4.109375);
        e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
        e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
        e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
        e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
        e.closePath();
        vt(e, c[1], c[2], a * 10);
        return d;
    }
    function dm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 145;
        d.height = a * 120;
        e.beginPath();
        e.scale(0.6, 0.6);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 18, a * -8);
        e.moveTo(a * 101, a * 72);
        e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
        e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
        e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
        e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
        e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
        e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
        e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
        e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
        e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
        e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
        e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
        e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
        e.closePath();
        vt(e, c[4], c[5], a * 4);
        e.beginPath();
        e.scale(1.1, 1.1);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -9, a * 4);
        e.moveTo(a * 101, a * 72);
        e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
        e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
        e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
        e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
        e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
        e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
        e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
        e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
        e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
        e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
        e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
        e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
        e.closePath();
        vt(e, c[4], c[5], a * 4);
        e.scale(1.1, 1.1);
        e.translate(a * -9, a * 4);
        e.save();
        e.translate(a * 100, a * 73.06874084472656);
        e.rotate(0);
        wt(e, a * -61, a * -38.5, a * 122, a * 40, a * 20);
        e.restore();
        vt(e, c[1], c[2], a * 4);
        e.save();
        e.translate(a * 100, a * 71.36874389648438);
        e.rotate(0);
        wt(e, a * -60.5, a * -18, a * 121, a * 30, a * 20);
        e.restore();
        vt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 144, a * 80);
        e.bezierCurveTo(a * 152, a * 100, a * 152, a * 101, a * 153, a * 102);
        e.bezierCurveTo(a * 159, a * 100, a * 159, a * 100, a * 160, a * 100);
        e.bezierCurveTo(a * 161, a * 84, a * 161, a * 84, a * 162, a * 68);
        e.closePath();
        vt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 57, a * 75);
        e.bezierCurveTo(a * 48, a * 101, a * 53, a * 89, a * 48, a * 102);
        e.bezierCurveTo(a * 44, a * 100, a * 44, a * 100, a * 39, a * 97);
        e.bezierCurveTo(a * 39, a * 83, a * 39, a * 83, a * 39, a * 69);
        e.closePath();
        vt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 101, a * 72);
        e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
        e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
        e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
        e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
        e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
        e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
        e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
        e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
        e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
        e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
        e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
        e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
        e.closePath();
        vt(e, c[4], c[5], a * 4);
        e.translate(0, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115.5, a * 116.07290649414062);
        e.bezierCurveTo(a * 159.5, a * 99.07290649414062, a * 159.5, a * 98.07290649414062, a * 159.5, a * 98.07290649414062);
        e.bezierCurveTo(a * 155.5, a * 116.07290649414062, a * 159.5, a * 116.07290649414062, a * 159.5, a * 118.07290649414062);
        e.bezierCurveTo(a * 147.5, a * 130.07290649414062, a * 136.5, a * 132.07290649414062, a * 115.5, a * 138.07290649414062);
        e.closePath();
        vt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39.5, a * 96.07290649414062);
        e.bezierCurveTo(a * 85.5, a * 114.07290649414062, a * 62.5, a * 105.57290649414062, a * 85.5, a * 115.07290649414062);
        e.bezierCurveTo(a * 85.5, a * 125.57290649414062, a * 85.5, a * 125.57290649414062, a * 85.5, a * 136.07290649414062);
        e.bezierCurveTo(a * 51.5, a * 129.07290649414062, a * 51.5, a * 125.07290649414062, a * 41.5, a * 118.07290649414062);
        e.bezierCurveTo(a * 44.5, a * 106.07290649414062, a * 42.5, a * 103.07290649414062, a * 40.5, a * 96.07290649414062);
        e.closePath();
        vt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 80);
        e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
        e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
        e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
        e.closePath();
        vt(e, c[3], c[2], a * 4);
        e.scale(0.5, 0.5);
        e.translate(a * 100, a * 71);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 80);
        e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
        e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
        e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
        e.closePath();
        vt(e, c[6], c[2], a * 4);
        return d;
    }
    function vm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 33;
        c.height = a * 35;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 12.75, a * 7.1328125);
        d.bezierCurveTo(a * 26.75, a * 8.1328125, a * 27.75, a * 14.1328125, a * 24.75, a * 23.1328125);
        d.bezierCurveTo(a * 19.75, a * 31.1328125, a * 15.75, a * 33.1328125, a * 6.75, a * 26.1328125);
        d.bezierCurveTo(a * 0.75, a * 19.1328125, a * 4.75, a * 8.1328125, a * 12.75, a * 7.1328125);
        d.closePath();
        vt(d, b[0]);
        return c;
    }
    function mm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 142;
        d.height = a * 118;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 27.3671875);
        e.bezierCurveTo(a * 128, a * 9.3671875, a * 125, a * 13.3671875, a * 126, a * 21.3671875);
        e.bezierCurveTo(a * 126, a * 33.3671875, a * 119, a * 43.3671875, a * 118, a * 42.3671875);
        e.closePath();
        vt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 23.3671875);
        e.bezierCurveTo(a * 17, a * 15.3671875, a * 16, a * 14.3671875, a * 17, a * 20.3671875);
        e.bezierCurveTo(a * 22, a * 33.3671875, a * 20, a * 27.3671875, a * 24, a * 34.3671875);
        e.closePath();
        vt(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 70.5, a * 34.8671875);
        e.rotate(0);
        wt(e, a * -49.5, a * -21.5, a * 99, a * 43, a * 15);
        e.restore();
        vt(e, c[0], c[1], a * 4);
        e.save();
        e.translate(a * 71, a * 40.8671875);
        e.rotate(0);
        wt(e, a * -49, a * -12.5, a * 98, a * 25, a * 15);
        e.restore();
        vt(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19.800003051757812, a * 75.95625305175781);
        e.bezierCurveTo(a * 19.300003051757812, a * 82.95625305175781, a * 19.300003051757812, a * 82.95625305175781, a * 18.800003051757812, a * 89.95625305175781);
        e.bezierCurveTo(a * 38.80000305175781, a * 115.95625305175781, a * 37.80000305175781, a * 104.95625305175781, a * 31.800003051757812, a * 91.95625305175781);
        e.closePath();
        vt(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 119.80000305175781, a * 75.95625305175781);
        e.bezierCurveTo(a * 120.80000305175781, a * 82.95625305175781, a * 120.80000305175781, a * 82.95625305175781, a * 121.80000305175781, a * 89.95625305175781);
        e.bezierCurveTo(a * 101.80000305175781, a * 111.95625305175781, a * 99.80000305175781, a * 111.95625305175781, a * 112.80000305175781, a * 81.95625305175781);
        e.closePath();
        vt(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17.800003051757812, a * 49.15625);
        e.bezierCurveTo(a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 79.15625);
        e.bezierCurveTo(a * 23.300003051757812, a * 85.15625, a * 23.300003051757812, a * 85.15625, a * 28.800003051757812, a * 91.15625);
        e.bezierCurveTo(a * 36.80000305175781, a * 96.15625, a * 32.80000305175781, a * 91.15625, a * 28.800003051757812, a * 77.15625);
        e.bezierCurveTo(a * 33.80000305175781, a * 65.15625, a * 33.80000305175781, a * 65.15625, a * 38.80000305175781, a * 53.15625);
        e.closePath();
        vt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123.80000305175781, a * 53.95625305175781);
        e.bezierCurveTo(a * 121.80000305175781, a * 77.95625305175781, a * 121.80000305175781, a * 74.95625305175781, a * 121.80000305175781, a * 78.95625305175781);
        e.bezierCurveTo(a * 115.80000305175781, a * 84.95625305175781, a * 115.80000305175781, a * 84.95625305175781, a * 109.80000305175781, a * 90.95625305175781);
        e.bezierCurveTo(a * 102.80000305175781, a * 93.95625305175781, a * 105.80000305175781, a * 86.95625305175781, a * 110.80000305175781, a * 76.95625305175781);
        e.bezierCurveTo(a * 107.30000305175781, a * 65.45625305175781, a * 103.80000305175781, a * 53.95625305175781, a * 103.80000305175781, a * 53.95625305175781);
        e.closePath();
        vt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 18, a * 56.3671875);
        e.bezierCurveTo(a * 70, a * 56.8671875, a * 70, a * 56.8671875, a * 122, a * 57.3671875);
        e.bezierCurveTo(a * 137, a * 20.3671875, a * 137, a * 16.3671875, a * 126, a * 22.3671875);
        e.bezierCurveTo(a * 115.5, a * 34.3671875, a * 115.5, a * 34.3671875, a * 105, a * 46.3671875);
        e.bezierCurveTo(a * 70.5, a * 46.3671875, a * 70.5, a * 46.3671875, a * 36, a * 46.3671875);
        e.bezierCurveTo(a * 4, a * 14.3671875, a * 7, a * 18.3671875, a * 8, a * 27.3671875);
        e.bezierCurveTo(a * 12.5, a * 41.8671875, a * 12.5, a * 41.8671875, a * 17, a * 56.3671875);
        e.closePath();
        vt(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 68.30000305175781, a * 41.45625305175781);
        e.rotate(0.76);
        wt(e, a * -20.5, a * -20.5, a * 41, a * 41, a * 10);
        e.restore();
        vt(e, undefined, c[5], a * 4);
        e.save();
        e.translate(a * 68.80000305175781, a * 44.45625305175781);
        e.rotate(0.76);
        wt(e, a * -21, a * -20.5, a * 42, a * 41, a * 10);
        e.restore();
        vt(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 69.80000305175781, a * 44.556243896484375);
        e.rotate(0.76);
        wt(e, a * -10, a * -10, a * 20, a * 20, a * 5);
        e.restore();
        vt(e, c[6], c[7], a * 4);
        return d;
    }
    const cm = 1;
    function pm(b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 600;
        var f = b * 22;
        var g = b * 4;
        var a = b * 4;
        c.width = e;
        c.height = f;
        wt(d, b * 5, b * 5, e - b * 10, f - b * 10, g);
        vt(d, null, "#BBE8EF", a);
        return c;
    }
    function Cm(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 170;
        f.height = b * 200;
        g.translate(b * 5, b * 15);
        if (e == 1) {
            g.translate(0, b * -5);
            ut(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
            vt(g, d[1], d[5], b * 20);
            ut(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
            vt(g, d[1], d[5], b * 20);
            g.save();
            g.translate(b * 77.00003051757812, b * 31.267044067382812);
            wt(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
            g.restore();
            vt(g, d[1], d[5], b * 20);
            g.save();
            g.translate(b * 77.00003051757812, b * 13.267044067382812);
            wt(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
            g.restore();
            vt(g, d[1], d[5], b * 20);
        }
        ut(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
        vt(g, d[1], d[2], b * 7);
        ut(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
        vt(g, d[1], d[2], b * 7);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 18.000030517578125, b * 105.85795593261719);
        g.bezierCurveTo(b * 134.00003051757812, b * 104.85795593261719, b * 77.00003051757812, b * 104.85795593261719, b * 136.00003051757812, b * 103.85795593261719);
        g.closePath();
        vt(g, d[1], d[2], b * 8);
        ut(g, b * 77.00003051757812, b * 104.6761474609375, b * 32.55764119219941);
        vt(g, d[1], d[2], b * 8);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 78.00003051757812, b * 112.03977966308594);
        g.bezierCurveTo(b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 62.03977966308594);
        g.closePath();
        vt(g, d[3], d[2], b * 8);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 78.00003051757812, b * 48.03977966308594);
        g.bezierCurveTo(b * 82.00003051757812, b * 55.53977966308594, b * 82.00003051757812, b * 55.53977966308594, b * 86.00003051757812, b * 63.03977966308594);
        g.bezierCurveTo(b * 78.00003051757812, b * 63.03977966308594, b * 78.00003051757812, b * 63.03977966308594, b * 70.00003051757812, b * 63.03977966308594);
        g.closePath();
        vt(g, d[3], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 80.00003051757812, b * 111.6761474609375);
        g.bezierCurveTo(b * 95.00003051757812, b * 97.1761474609375, b * 95.00003051757812, b * 97.1761474609375, b * 110.00003051757812, b * 82.6761474609375);
        g.closePath();
        vt(g, d[3], d[2], b * 8);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 107.00003051757812, b * 76.6761474609375);
        g.bezierCurveTo(b * 111.50003051757812, b * 82.6761474609375, b * 111.50003051757812, b * 82.6761474609375, b * 116.00003051757812, b * 88.6761474609375);
        g.bezierCurveTo(b * 118.50003051757812, b * 81.6761474609375, b * 118.50003051757812, b * 81.6761474609375, b * 121.00003051757812, b * 74.6761474609375);
        g.closePath();
        vt(g, d[3], d[2], b * 4);
        ut(g, b * 77.00003051757812, b * 105.03977966308594, b * 15.556349186104045);
        vt(g, d[3], d[2], b * 4);
        g.save();
        g.translate(b * 77.00003051757812, b * 31.267044067382812);
        g.rotate(0);
        wt(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
        g.restore();
        vt(g, d[1], d[2], b * 7);
        g.save();
        g.translate(b * 77.00003051757812, b * 13.267044067382812);
        g.rotate(0);
        wt(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
        g.restore();
        vt(g, d[1], d[2], b * 7);
        return f;
    }
    function Tm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 440;
        d.height = a * 388;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        ut(e, a * 220, a * 201, a * 170.41713528867922);
        vt(e, c[0], c[0], a * 6);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        ut(e, a * 220, a * 201, a * 170.41713528867922);
        vt(e, c[1], c[2], a * 6);
        ut(e, a * 220, a * 201, a * 130);
        vt(e, c[11], c[2], a * 6);
        ut(e, a * 222, a * 199, a * 120.74767078498864);
        vt(e, undefined, c[3], a * 40);
        ut(e, a * 220, a * 200, a * 95.44108130150245);
        vt(e, Js, c[2], a * 15);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        ut(e, a * 63, a * 136, a * 49.193495504995376);
        vt(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        ut(e, a * 63, a * 136, a * 49.193495504995376);
        vt(e, c[8], c[2], a * 4);
        ut(e, a * 63, a * 137, a * 25.632011235952593);
        vt(e, c[7], c[2], a * 4);
        return d;
    }
    function fm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 46;
        d.height = a * 140;
        e.scale(a * -1, a * 1);
        e.translate(a * -50, a * 40);
        e.translate(a * -20, 0);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
        e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
        e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
        e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
        e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -1, 0);
        e.moveTo(a * 17.599990844726562, a * 89.75);
        e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 1, 0);
        e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
        e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
        e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
        e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
        e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
        e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
        e.closePath();
        vt(e, c[0]);
        e.save();
        e.translate(a * 23.599990844726562, a * 110.94999694824219);
        e.rotate(0);
        wt(e, a * -7, a * -4, a * 14, a * 8, a * 10);
        e.restore();
        vt(e, c[0]);
        e.translate(a * 0, 0);
        e.globalAlpha = 1;
        e.translate(a * 10, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
        e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
        e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
        e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
        e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
        e.closePath();
        vt(e, c[3], c[4], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -1, 0);
        e.moveTo(a * 17.599990844726562, a * 89.75);
        e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
        e.closePath();
        vt(e, c[1], c[2], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 1, 0);
        e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
        e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
        e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
        e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
        e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
        e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
        e.closePath();
        vt(e, c[1], c[2], a * 3);
        e.save();
        e.translate(a * 23.599990844726562, a * 110.94999694824219);
        e.rotate(0);
        wt(e, a * -7, a * -4, a * 14, a * 8, a * 10);
        e.restore();
        vt(e, c[1], c[2], a * 3);
        return d;
    }
    function zm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 137;
        d.height = a * 129;
        e.globalAlpha = 0.5;
        ut(e, a * 69, a * 64, a * 48.16637831516918);
        vt(e, c[1]);
        e.globalAlpha = 0.7;
        ut(e, a * 69, a * 64, a * 38.23105625617661);
        vt(e, c[2]);
        e.globalAlpha = 0.7;
        ut(e, a * 69, a * 64, a * 32.01562118716424);
        vt(e, c[2], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72, a * 41);
        e.bezierCurveTo(a * 52, a * 41, a * 48, a * 50, a * 45, a * 58);
        e.bezierCurveTo(a * 43, a * 67, a * 45, a * 68, a * 46, a * 72);
        e.bezierCurveTo(a * 52, a * 53, a * 60, a * 48, a * 72, a * 42);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 62);
        e.bezierCurveTo(a * 95, a * 72, a * 90, a * 81, a * 81, a * 87);
        e.bezierCurveTo(a * 74, a * 91, a * 69, a * 89, a * 64, a * 88);
        e.bezierCurveTo(a * 77, a * 83, a * 84, a * 82, a * 92, a * 62);
        e.closePath();
        vt(e, c[3]);
        return d;
    }
    function ym() {
        var b = Xw.time;
        if (ᐃΔ[285]) {
            In.drawImage(ᐃΔ[285][b][1], jq + 480, kq + 190);
            In.drawImage(ᐃΔ[285][b][2], jq + 180, kq - 430);
            In.drawImage(ᐃΔ[285][b][1], jq - 855, kq + 100);
            In.drawImage(ᐃΔ[285][b][0], jq - 550, kq - 300);
            In.drawImage(ᐃΔ[285][b][0], jq - 1020, kq - 520);
        }
        if (ᐃΔ[108]) {
            In.drawImage(ᐃΔ[108][b][1], jq - 80, kq - 640);
            In.drawImage(ᐃΔ[108][b][1], jq + 80, kq + 490);
            In.drawImage(ᐃΔ[108][b][2], jq - 180, kq - 700);
            In.drawImage(ᐃΔ[108][b][0], jq + 550, kq + 100);
            In.drawImage(ᐃΔ[108][b][1], jq + 450, kq + 300);
            In.drawImage(ᐃΔ[108][b][1], jq + 780, kq + 300);
            In.drawImage(ᐃΔ[108][b][2], jq + 980, kq + 200);
            In.drawImage(ᐃΔ[108][b][2], jq + 680, kq + 600);
            In.drawImage(ᐃΔ[108][b][2], jq - 380, kq + 100);
            In.drawImage(ᐃΔ[108][b][2], jq + 280, kq + 250);
        }
        if (ᐃΔ[110]) {
            In.drawImage(ᐃΔ[110][b][0], jq - 590, kq);
            In.drawImage(ᐃΔ[110][b][0], jq + 120, kq - 390);
            In.drawImage(ᐃΔ[110][b][0], jq - 270, kq + 340);
        }
        if (ᐃΔ[109]) {
            In.drawImage(ᐃΔ[109][b][4], jq - 700, kq - 600);
            In.drawImage(ᐃΔ[109][b][2], jq - 970, kq - 250);
            In.drawImage(ᐃΔ[109][b][5], jq - 720, kq - 200);
            In.drawImage(ᐃΔ[109][b][2], jq - 1020, kq + 340);
            In.drawImage(ᐃΔ[109][b][0], jq - 1120, kq - 0);
            In.drawImage(ᐃΔ[109][b][1], jq - 650, kq - 330);
            In.drawImage(ᐃΔ[109][b][4], jq - 495, kq - 90);
            In.drawImage(ᐃΔ[109][b][3], jq - 520, kq + 340);
            In.drawImage(ᐃΔ[109][b][2], jq + 830, kq - 520);
        }
        ᐃΔ[413];
        if (Yw && Cf) {
            var c = Yw.ᐃⵠⵠ.x;
            var d = Yw.ᐃⵠⵠ.y;
            Yw.ᐃⵠⵠ.x = jq;
            Yw.ᐃⵠⵠ.y = kq;
            var e = Cf.time;
            Cf.time = Xw.time;
            var f;
            var g = Xw.items;
            g[2].x = 400;
            g[2].y = 100;
            g[2].ⵠⵠΔΔ(114);
            (f = g[1]).x = -500;
            f.y = 100;
            f.ᐃⵠⲆᐃ[0].x = f.x - 20.5;
            f.ᐃⵠⲆᐃ[0].y = f.y - 22.5;
            f.ᐃⵠⲆᐃ[1].x = f.x - 35.5;
            f.ᐃⵠⲆᐃ[1].y = f.y + 7.5;
            f.ᐃⵠⲆᐃ[2].x = f.x + 7.5;
            f.ᐃⵠⲆᐃ[2].y = f.y - 30;
            f.ᐃⵠⲆᐃ[3].x = f.x + 22.5;
            f.ᐃⵠⲆᐃ[3].y = f.y;
            f.ᐃⵠⲆᐃ[4].x = f.x - 7.5;
            f.ᐃⵠⲆᐃ[4].y = f.y + 14.5;
            for (var a = 0; a < f.info; a++) {
                f.ᐃⵠⲆᐃ[a].ⵠⵠΔΔ(294);
            }
            (f = g[3]).x = 210;
            f.y = -290;
            f.ᐃⵠⲆᐃ[0].x = f.x - 20.5;
            f.ᐃⵠⲆᐃ[0].y = f.y - 22.5;
            f.ᐃⵠⲆᐃ[1].x = f.x - 35.5;
            f.ᐃⵠⲆᐃ[1].y = f.y + 7.5;
            f.ᐃⵠⲆᐃ[2].x = f.x + 7.5;
            f.ᐃⵠⲆᐃ[2].y = f.y - 30;
            f.ᐃⵠⲆᐃ[3].x = f.x + 22.5;
            f.ᐃⵠⲆᐃ[3].y = f.y;
            f.ᐃⵠⲆᐃ[4].x = f.x - 7.5;
            f.ᐃⵠⲆᐃ[4].y = f.y + 14.5;
            for (a = 0; a < f.info; a++) {
                f.ᐃⵠⲆᐃ[a].ⵠⵠΔΔ(294);
            }
            g[0].x = 450;
            g[0].y = -100;
            g[0].ⵠᐃⵠᐃΔ(113);
            g[0].ⵠᐃⲆⵠⲆ();
            Yw.ᐃⵠⵠ.x = c;
            Yw.ᐃⵠⵠ.y = d;
            Cf.time = e;
        }
    }
    function wm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 144;
        d.height = a * 280;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 62, a * 103.79999542236328);
        e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
        e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
        e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
        e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
        e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
        e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
        e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
        e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
        e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
        e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
        e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
        e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
        e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
        e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 62, a * 103.79999542236328);
        e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
        e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
        e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
        e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
        e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
        e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
        e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
        e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
        e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
        e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
        e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
        e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
        e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
        e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
        e.closePath();
        vt(e, c[1], c[2], a * 6);
        return d;
    }
    function Pm(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 185;
        e.height = b * 164;
        f.translate(0, 0);
        var g = function (a, b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            d.width = a * 201;
            d.height = a * 164;
            e.translate(0, a * 5);
            e.globalAlpha = b ? 0.5 : 1;
            ut(e, a * 100.5, a * 82, a * 74.92746655359852);
            vt(e, c[0], c[0], a * 4);
            ut(e, a * 100.5, a * 82, a * 65.9417374971317);
            vt(e, c[0], c[0], a * 4);
            e.translate(0, -5);
            e.globalAlpha = 1;
            ut(e, a * 100.5, a * 82, a * 74.92746655359852);
            vt(e, c[1], c[3], a * 4);
            ut(e, a * 100.5, a * 82, a * 65.9417374971317);
            vt(e, c[1], c[2], a * 4);
            ut(e, a * 100.5, a * 82, a * 35.9417374971317);
            vt(e, c[1], c[2], a * 20);
            ut(e, a * 100.5, a * 82, a * 15.9417374971317);
            vt(e, c[1], c[2], a * 6);
            return d;
        }(b, c, d);
        f.drawImage(g, b * -10, b * 0);
        g = vc(b, c, d, 0);
        f.drawImage(g, b * -83, b * -40);
        g = vc(b, c, d, Math.PI / 1.4);
        f.drawImage(g, b * -15, b * -88);
        g = vc(b, c, d, Math.PI / -1.4);
        f.drawImage(g, b * 15, b * -8);
        return e;
    }
    function Am(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 247;
        d.height = a * 247;
        e.translate(0, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 62);
        e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
        e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 164, a * 171);
        e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
        e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 132, a * 95);
        e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
        e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
        e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
        e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
        e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
        e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
        e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
        e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
        e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
        e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
        e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
        e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
        e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
        e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
        e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
        e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
        e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
        e.closePath();
        vt(e, c[0]);
        e.translate(0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 62);
        e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
        e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
        e.closePath();
        vt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 164, a * 171);
        e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
        e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
        e.closePath();
        vt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 132, a * 95);
        e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
        e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
        e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
        e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
        e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
        e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
        e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
        e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
        e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
        e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
        e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
        e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
        e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
        e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
        e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
        e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
        e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
        e.closePath();
        vt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 137);
        e.bezierCurveTo(a * 145, a * 125, a * 138, a * 108, a * 123, a * 104);
        e.bezierCurveTo(a * 81, a * 101, a * 88, a * 77, a * 98, a * 65);
        e.bezierCurveTo(a * 117, a * 38, a * 138, a * 39, a * 165, a * 52);
        e.bezierCurveTo(a * 197, a * 72, a * 207, a * 111, a * 197, a * 140);
        e.bezierCurveTo(a * 182, a * 180, a * 161, a * 197, a * 112, a * 194);
        e.bezierCurveTo(a * 58, a * 194, a * 37, a * 170, a * 34, a * 142);
        e.bezierCurveTo(a * 29, a * 102, a * 40, a * 63, a * 51, a * 45);
        e.bezierCurveTo(a * 43, a * 78, a * 41, a * 103, a * 43, a * 122);
        e.bezierCurveTo(a * 51, a * 158, a * 63, a * 174, a * 95, a * 179);
        e.bezierCurveTo(a * 129, a * 186, a * 169, a * 172, a * 177, a * 144);
        e.bezierCurveTo(a * 197, a * 105, a * 172, a * 76, a * 160, a * 71);
        e.bezierCurveTo(a * 125, a * 52, a * 111, a * 73, a * 111, a * 81);
        e.bezierCurveTo(a * 106, a * 93, a * 140, a * 92, a * 147, a * 107);
        e.bezierCurveTo(a * 153, a * 128, a * 140, a * 135, a * 137, a * 139);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 132, a * 95);
        e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
        e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
        e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
        e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
        e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
        e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
        e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
        e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
        e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
        e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
        e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
        e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
        e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
        e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
        e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
        e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
        e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
        e.closePath();
        vt(e, tj, c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 63);
        e.bezierCurveTo(a * 91, a * 64, a * 96, a * 62, a * 98, a * 53);
        e.bezierCurveTo(a * 91, a * 45, a * 85, a * 42, a * 78, a * 41);
        e.bezierCurveTo(a * 81, a * 51, a * 82, a * 57, a * 82, a * 63);
        e.closePath();
        vt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 148, a * 40);
        e.bezierCurveTo(a * 140, a * 52, a * 131, a * 51, a * 123, a * 43);
        e.bezierCurveTo(a * 123, a * 25, a * 129, a * 17, a * 134, a * 12);
        e.bezierCurveTo(a * 138, a * 35, a * 142, a * 31, a * 148, a * 40);
        e.closePath();
        vt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 189, a * 43);
        e.bezierCurveTo(a * 191, a * 54, a * 196, a * 58, a * 205, a * 59);
        e.bezierCurveTo(a * 211, a * 42, a * 214, a * 37, a * 216, a * 31);
        e.bezierCurveTo(a * 202, a * 34, a * 195, a * 39, a * 190, a * 43);
        e.closePath();
        vt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 216, a * 98);
        e.bezierCurveTo(a * 219, a * 105, a * 225, a * 107, a * 230, a * 109);
        e.bezierCurveTo(a * 227, a * 113, a * 221, a * 115, a * 215, a * 115);
        e.bezierCurveTo(a * 208, a * 109, a * 211, a * 101, a * 216, a * 98);
        e.closePath();
        vt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 180, a * 85);
        e.bezierCurveTo(a * 193, a * 86, a * 196, a * 98, a * 191, a * 108);
        e.bezierCurveTo(a * 179, a * 112, a * 167, a * 113, a * 155, a * 111);
        e.bezierCurveTo(a * 169, a * 100, a * 176, a * 96, a * 180, a * 85);
        e.closePath();
        vt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96, a * 114);
        e.bezierCurveTo(a * 102, a * 109, a * 112, a * 110, a * 114, a * 118);
        e.bezierCurveTo(a * 111, a * 134, a * 102, a * 143, a * 95, a * 147);
        e.bezierCurveTo(a * 98, a * 123, a * 97, a * 119, a * 96, a * 115);
        e.closePath();
        vt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 92);
        e.bezierCurveTo(a * 86, a * 95, a * 89, a * 102, a * 83, a * 111);
        e.bezierCurveTo(a * 70, a * 110, a * 61, a * 107, a * 54, a * 100);
        e.bezierCurveTo(a * 70, a * 97, a * 70, a * 95, a * 78, a * 92);
        e.closePath();
        vt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 130);
        e.bezierCurveTo(a * 37, a * 141, a * 41, a * 143, a * 48, a * 144);
        e.bezierCurveTo(a * 54, a * 134, a * 55, a * 131, a * 56, a * 123);
        e.bezierCurveTo(a * 47, a * 129, a * 43, a * 129, a * 39, a * 129);
        e.closePath();
        vt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 113, a * 189);
        e.bezierCurveTo(a * 119, a * 201, a * 127, a * 198, a * 134, a * 192);
        e.bezierCurveTo(a * 128, a * 175, a * 128, a * 173, a * 128, a * 165);
        e.bezierCurveTo(a * 117, a * 176, a * 116, a * 182, a * 113, a * 187);
        e.closePath();
        vt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 74, a * 154);
        e.bezierCurveTo(a * 76, a * 163, a * 76, a * 170, a * 75, a * 177);
        e.bezierCurveTo(a * 68, a * 179, a * 66, a * 176, a * 63, a * 171);
        e.bezierCurveTo(a * 69, a * 164, a * 72, a * 159, a * 74, a * 154);
        e.closePath();
        vt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 206, a * 152);
        e.bezierCurveTo(a * 198, a * 158, a * 198, a * 166, a * 201, a * 171);
        e.bezierCurveTo(a * 209, a * 170, a * 221, a * 170, a * 226, a * 172);
        e.bezierCurveTo(a * 219, a * 159, a * 210, a * 155, a * 207, a * 153);
        e.closePath();
        vt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 181, a * 184);
        e.bezierCurveTo(a * 170, a * 184, a * 167, a * 187, a * 163, a * 195);
        e.bezierCurveTo(a * 171, a * 207, a * 183, a * 214, a * 191, a * 217);
        e.bezierCurveTo(a * 183, a * 204, a * 184, a * 196, a * 181, a * 184);
        e.closePath();
        vt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 66, a * 199);
        e.bezierCurveTo(a * 73, a * 197, a * 78, a * 199, a * 79, a * 206);
        e.bezierCurveTo(a * 71, a * 216, a * 67, a * 221, a * 57, a * 223);
        e.closePath();
        vt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 182, a * 143);
        e.bezierCurveTo(a * 183, a * 146, a * 183, a * 149, a * 179, a * 152);
        e.bezierCurveTo(a * 174, a * 146, a * 174, a * 146, a * 169, a * 140);
        e.closePath();
        vt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 159);
        e.bezierCurveTo(a * 45, a * 160, a * 48, a * 164, a * 45, a * 175);
        e.bezierCurveTo(a * 28, a * 183, a * 25, a * 184, a * 19, a * 184);
        e.bezierCurveTo(a * 30, a * 170, a * 29, a * 164, a * 31, a * 160);
        e.closePath();
        vt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 214);
        e.bezierCurveTo(a * 106, a * 212, a * 104, a * 213, a * 102, a * 218);
        e.bezierCurveTo(a * 104, a * 220, a * 107, a * 222, a * 110, a * 224);
        e.bezierCurveTo(a * 110.5, a * 219, a * 110.5, a * 219, a * 111, a * 214);
        e.closePath();
        vt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 40, a * 52);
        e.bezierCurveTo(a * 41, a * 57, a * 40, a * 61, a * 34, a * 60);
        e.bezierCurveTo(a * 31.5, a * 55, a * 31.5, a * 55, a * 29, a * 50);
        e.bezierCurveTo(a * 34, a * 50.5, a * 34, a * 50.5, a * 39, a * 51);
        e.closePath();
        vt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 81);
        e.bezierCurveTo(a * 37, a * 84, a * 38, a * 90, a * 34, a * 99);
        e.bezierCurveTo(a * 23, a * 97, a * 19, a * 96, a * 16, a * 93);
        e.bezierCurveTo(a * 24, a * 88, a * 28, a * 85, a * 30, a * 81);
        e.closePath();
        vt(e, c[4], c[5], a * 5);
        return d;
    }
    function km(a, b) {
        const c = (1013904223 + (a + 22494) * 1664525) % 4294967296;
        const d = (8 << (b >> 16 & 255)) + (0 << (b >> 24 & 255)) + (24 << (b >> 0 & 255)) + (16 << (b >> 8 & 255));
        const e = Qw(c, d, c, d, c, d);
        (function (b, c, d, e, f) {
            const i = b ^ 46660;
            const a = (c | 38268) & ~(c & 38268);
            const j = (d + 9561) % 65458;
            const k = (1 + (e + 15800) * 22695477) % 4294967296;
            const h = (f | 15396) & ~(f & 15396);
            const l = fr(i, a, j, k);
            const g = function (b, c, d, e, f) {
                const i = ((b + 10592) * 1664525 + 1013904223) % 4294967296;
                const a = c ^ 6680;
                const j = ~(d & 43173) & 43173 | ~(d & 43173) & d;
                const k = ((20618 + e) * 2147483629 + 2147483587) % 2147483647;
                const h = (12345 + (62839 + f) * 1103515245) % 2147483648;
                const l = Kg(i, a, j, k, h);
                rk(i, a, j, k, h);
                return l ^ 22645;
            }(i, a, j, k, h);
        })(c, d, c, d, c);
        return e ^ 7052;
    }
    function xm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 202;
        d.height = a * 202;
        e.translate(a * 2, a * 1);
        e.globalAlpha = 0.3;
        ut(e, a * 98, a * 99, a * 100);
        vt(e, c[0]);
        e.globalAlpha = 0.5;
        ut(e, a * 98, a * 99, a * 90);
        vt(e, c[1]);
        return d;
    }
    function Jm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 253;
        c.height = a * 192;
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 42, a * 99);
        d.globalAlpha = 0.5;
        wt(d, a * -7, a * -20, a * 14, a * 39, a * 20);
        d.restore();
        vt(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 37, a * 94);
        wt(d, a * -7, a * -20, a * 14, a * 37, a * 20);
        d.restore();
        vt(d, b[2]);
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 136, a * 99);
        d.globalAlpha = 0.5;
        wt(d, a * -84, a * -67, a * 168, a * 134, a * 20);
        d.restore();
        vt(d, b[0], b[0], a * 13);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 131, a * 94);
        wt(d, a * -84, a * -67, a * 168, a * 134, a * 20);
        d.restore();
        vt(d, b[2], b[2], a * 13);
        d.save();
        d.translate(a * 131, a * 94);
        wt(d, a * -76, a * -61, a * 152, a * 122, a * 20);
        d.restore();
        vt(d, b[3], b[1], a * 8);
        d.save();
        d.translate(a * 168.5, a * 93.5);
        wt(d, a * -30.5, a * -58.5, a * 61, a * 117, a * 20);
        d.restore();
        vt(d, b[3], b[4], a * 6);
        d.save();
        d.translate(a * 93.5, a * 95.5);
        wt(d, a * -32, a * -59.5, a * 59, a * 119, a * 20);
        d.restore();
        vt(d, b[3], b[4], a * 6);
        d.save();
        d.translate(a * 130.5, a * 94);
        wt(d, a * -36, a * -67, a * 73, a * 134, a * 20);
        d.restore();
        vt(d, b[3], b[2], a * 8);
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 133, a * 97);
        wt(d, a * -83, a * -12, a * 160, a * 24, a * 0);
        d.restore();
        vt(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 133, a * 92);
        wt(d, a * -83, a * -12, a * 160, a * 24, a * 0);
        d.restore();
        vt(d, b[2]);
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 228, a * 99.5);
        d.globalAlpha = 0.5;
        wt(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
        d.restore();
        vt(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 223, a * 94.5);
        wt(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
        d.restore();
        vt(d, b[2]);
        d.save();
        d.translate(a * 133.5, a * 175.5);
        d.globalAlpha = 0.5;
        wt(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
        d.restore();
        vt(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 128.5, a * 170.5);
        wt(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
        d.restore();
        vt(d, b[2]);
        return c;
    }
    function Mm(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 120;
        e.height = b * 100;
        wt(f, b * 10, b * 10, b * 95, b * 80, b * 10);
        vt(f, c[2]);
        wt(f, b * 10, b * 5, b * 95, b * 80, b * 10);
        vt(f, c[3], c[4], b * 4);
        if (d == 0) {
            var g = Gm(b * 0.75, c, 0);
            f.drawImage(g, b * 22, b * 18);
        } else if (d == 1) {
            g = Gm(b * 0.75, c, 1);
            f.drawImage(g, b * 22, b * 18);
        }
        return e;
    }
    function Bm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 109;
        d.height = a * 110;
        ut(e, a * 54.5, a * 55, a * 48.038209575038294);
        vt(e, b[0], b[1], a * 8);
        if (c == 0) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 54.928558349609375, a * 43.72320556640625);
            e.bezierCurveTo(a * 66.92855834960938, a * 31.72320556640625, a * 69.92855834960938, a * 29.72320556640625, a * 74.92855834960938, a * 29.72320556640625);
            e.bezierCurveTo(a * 86.92855834960938, a * 28.72320556640625, a * 91.92855834960938, a * 42.72320556640625, a * 89.92855834960938, a * 52.72320556640625);
            e.bezierCurveTo(a * 88.92855834960938, a * 63.72320556640625, a * 73.92855834960938, a * 75.72320556640625, a * 55.928558349609375, a * 87.72320556640625);
            e.bezierCurveTo(a * 37.928558349609375, a * 78.72320556640625, a * 26.928558349609375, a * 65.72320556640625, a * 19.928558349609375, a * 54.72320556640625);
            e.bezierCurveTo(a * 13.928558349609375, a * 42.72320556640625, a * 21.928558349609375, a * 28.72320556640625, a * 35.928558349609375, a * 29.72320556640625);
            e.bezierCurveTo(a * 45.928558349609375, a * 31.72320556640625, a * 51.928558349609375, a * 40.72320556640625, a * 53.928558349609375, a * 44.72320556640625);
            e.closePath();
            vt(e, b[2]);
        } else if (c == 1) {
            e.save();
            e.translate(a * 55, a * 39.48748779296875);
            wt(e, a * -11.5, a * -36, a * 23, a * 72, a * 10);
            e.restore();
            vt(e, b[2], b[3], a * 4);
            ut(e, a * 54.5, a * 78.48748779296875, a * 22.02271554554524);
            vt(e, b[4], b[3], a * 4);
            e.save();
            e.translate(a * 55.5, a * 57.287506103515625);
            wt(e, a * -9, a * -16, a * 18, a * 32, a * 10);
            e.restore();
            vt(e, b[4]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 66.5, a * 25.287506103515625);
            e.bezierCurveTo(a * 60.5, a * 25.287506103515625, a * 63.5, a * 25.287506103515625, a * 54.5, a * 25.287506103515625);
            e.closePath();
            vt(e, undefined, b[5], a * 4);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 66.5, a * 37.287506103515625);
            e.bezierCurveTo(a * 60.5, a * 37.287506103515625, a * 60.5, a * 37.287506103515625, a * 54.5, a * 37.287506103515625);
            e.closePath();
            vt(e, sl, b[5], a * 4);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 66.5, a * 50.287506103515625);
            e.bezierCurveTo(a * 61, a * 50.287506103515625, a * 61, a * 50.287506103515625, a * 55.5, a * 50.287506103515625);
            e.closePath();
            vt(e, undefined, b[5], a * 4);
        } else if (c == 2) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 45.928558349609375, a * 55.29463195800781);
            e.bezierCurveTo(a * 38.928558349609375, a * 67.29463195800781, a * 38.928558349609375, a * 67.29463195800781, a * 31.928558349609375, a * 79.29463195800781);
            e.bezierCurveTo(a * 15.928558349609375, a * 85.29463195800781, a * 17.928558349609375, a * 86.29463195800781, a * 17.928558349609375, a * 90.29463195800781);
            e.bezierCurveTo(a * 19.928558349609375, a * 94.29463195800781, a * 21.928558349609375, a * 94.29463195800781, a * 27.928558349609375, a * 92.29463195800781);
            e.bezierCurveTo(a * 29.928558349609375, a * 98.29463195800781, a * 30.928558349609375, a * 99.29463195800781, a * 33.928558349609375, a * 99.29463195800781);
            e.bezierCurveTo(a * 38.928558349609375, a * 97.29463195800781, a * 38.928558349609375, a * 93.29463195800781, a * 37.928558349609375, a * 86.29463195800781);
            e.bezierCurveTo(a * 45.428558349609375, a * 73.29463195800781, a * 51.928558349609375, a * 64.29463195800781, a * 52.928558349609375, a * 60.29463195800781);
            e.closePath();
            vt(e, b[2]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 55.928558349609375, a * 8.866058349609375);
            e.bezierCurveTo(a * 35.928558349609375, a * 35.866058349609375, a * 37.928558349609375, a * 48.866058349609375, a * 46.928558349609375, a * 62.866058349609375);
            e.bezierCurveTo(a * 65.92855834960938, a * 72.86605834960938, a * 80.92855834960938, a * 55.866058349609375, a * 93.92855834960938, a * 36.866058349609375);
            e.closePath();
            vt(e, b[3], b[4], a * 6);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 93.92855834960938, a * 36.866058349609375);
            e.bezierCurveTo(a * 82.92855834960938, a * 37.866058349609375, a * 77.92855834960938, a * 36.866058349609375, a * 67.92855834960938, a * 28.866058349609375);
            e.bezierCurveTo(a * 53.928558349609375, a * 16.866058349609375, a * 53.928558349609375, a * 14.866058349609375, a * 55.928558349609375, a * 7.866058349609375);
            e.bezierCurveTo(a * 65.92855834960938, a * 4.866058349609375, a * 71.92855834960938, a * 7.866058349609375, a * 83.92855834960938, a * 13.866058349609375);
            e.bezierCurveTo(a * 96.92855834960938, a * 21.866058349609375, a * 95.92855834960938, a * 31.866058349609375, a * 92.92855834960938, a * 36.866058349609375);
            e.closePath();
            vt(e, b[3], b[4], a * 6);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 68.92855834960938, a * 16.866058349609375);
            e.bezierCurveTo(a * 71.92855834960938, a * 13.866058349609375, a * 76.92855834960938, a * 16.866058349609375, a * 79.92855834960938, a * 21.866058349609375);
            e.bezierCurveTo(a * 82.92855834960938, a * 24.866058349609375, a * 81.92855834960938, a * 27.866058349609375, a * 73.92855834960938, a * 24.866058349609375);
            e.bezierCurveTo(a * 67.92855834960938, a * 20.866058349609375, a * 66.92855834960938, a * 19.866058349609375, a * 67.92855834960938, a * 17.866058349609375);
            e.closePath();
            vt(e, b[2]);
        } else if (c == 3) {
            e.scale(0.9, 0.9);
            e.translate(a * 6, 0);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 54, a * 0.421875);
            e.bezierCurveTo(a * 84, a * 45.421875, a * 89, a * 51.421875, a * 83, a * 74.421875);
            e.bezierCurveTo(a * 74, a * 95.421875, a * 46, a * 98.421875, a * 30, a * 78.421875);
            e.bezierCurveTo(a * 22, a * 59.421875, a * 27, a * 49.421875, a * 34, a * 36.421875);
            e.closePath();
            vt(e, b[2], b[3], a * 6);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 74, a * 52.421875);
            e.bezierCurveTo(a * 77, a * 73.421875, a * 69, a * 81.421875, a * 58, a * 81.421875);
            e.bezierCurveTo(a * 66, a * 71.421875, a * 70, a * 66.421875, a * 74, a * 52.421875);
            e.closePath();
            vt(e, b[3]);
        }
        return d;
    }
    function Dm(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 496;
        e.height = b * 520;
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 10);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 19.000030517578125, b * 256.67613983154297);
        f.bezierCurveTo(b * 1.000030517578125, b * 332.67613983154297, b * 23.000030517578125, b * 404.67613983154297, b * 95.00003051757812, b * 463.67613983154297);
        f.bezierCurveTo(b * 128.00003051757812, b * 491.67613983154297, b * 165.00003051757812, b * 507.67613983154297, b * 194.00003051757812, b * 512.676139831543);
        f.bezierCurveTo(b * 280.0000305175781, b * 517.676139831543, b * 291.0000305175781, b * 516.676139831543, b * 342.0000305175781, b * 497.67613983154297);
        f.bezierCurveTo(b * 425.0000305175781, b * 454.67613983154297, b * 469.0000305175781, b * 392.67613983154297, b * 468.0000305175781, b * 300.67613983154297);
        f.bezierCurveTo(b * 408.5000305175781, b * 365.17613983154297, b * 408.5000305175781, b * 365.17613983154297, b * 349.0000305175781, b * 429.67613983154297);
        f.bezierCurveTo(b * 256.0000305175781, b * 473.67613983154297, b * 167.00003051757812, b * 459.67613983154297, b * 78.00003051757812, b * 384.67613983154297);
        f.closePath();
        vt(f, d[0]);
        f.globalAlpha = 1;
        f.translate(0, b * -10);
        ut(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
        vt(f, d[5], undefined, b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 10);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 65.00003051757812, b * 263.4034118652344);
        f.bezierCurveTo(b * 109.00003051757812, b * 160.40341186523438, b * 185.00003051757812, b * 128.40341186523438, b * 222.00003051757812, b * 124.40341186523438);
        f.bezierCurveTo(b * 277.0000305175781, b * 116.40341186523438, b * 339.0000305175781, b * 134.40341186523438, b * 379.0000305175781, b * 195.40341186523438);
        f.bezierCurveTo(b * 409.0000305175781, b * 242.40341186523438, b * 416.0000305175781, b * 256.4034118652344, b * 428.0000305175781, b * 304.4034118652344);
        f.bezierCurveTo(b * 457.0000305175781, b * 203.40341186523438, b * 449.0000305175781, b * 183.40341186523438, b * 438.0000305175781, b * 162.40341186523438);
        f.bezierCurveTo(b * 381.0000305175781, b * 73.40341186523438, b * 360.0000305175781, b * 66.40341186523438, b * 257.0000305175781, b * 46.403411865234375);
        f.bezierCurveTo(b * 191.00003051757812, b * 45.403411865234375, b * 142.00003051757812, b * 65.40341186523438, b * 101.00003051757812, b * 115.40341186523438);
        f.closePath();
        vt(f, d[0]);
        f.globalAlpha = 1;
        var g = function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 496;
            c.height = a * 520;
            d.globalAlpha = 1;
            d.translate(0, a * -10);
            ut(d, a * 247.01138305664062, a * 250.13068389892578, a * 232.81967270830015);
            vt(d, b[1], b[2], a * 14);
            d.globalCompositeOperation = "destination-out";
            ut(d, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
            vt(d, b[0], b[0], a * 14);
            d.globalCompositeOperation = "source-over";
            return c;
        }(b, d);
        f.drawImage(g, 0, 0);
        f.translate(0, b * -10);
        ut(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
        vt(f, dg, d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
        f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
        f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
        f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
        f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
        f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
        f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
        f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
        f.closePath();
        vt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
        f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
        f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
        f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
        f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
        f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
        f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
        f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
        f.closePath();
        vt(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
        f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
        f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
        f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
        f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
        f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
        f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
        f.closePath();
        vt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
        f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
        f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
        f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
        f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
        f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
        f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
        f.closePath();
        vt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
        f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
        f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
        f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
        f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
        f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
        f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
        f.closePath();
        vt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
        f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
        f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
        f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
        f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
        f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
        f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
        f.closePath();
        vt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
        f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
        f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
        f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
        f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
        f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
        f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
        f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
        f.closePath();
        vt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
        f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
        f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
        f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
        f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
        f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
        f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
        f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
        f.closePath();
        vt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
        f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
        f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
        f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
        f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
        f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
        f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
        f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
        f.closePath();
        vt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
        f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
        f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
        f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
        f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
        f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
        f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
        f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
        f.closePath();
        vt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
        f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
        f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
        f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
        f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
        f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
        f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
        f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
        f.closePath();
        vt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
        f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
        f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
        f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
        f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
        f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
        f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
        f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
        f.closePath();
        vt(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
        f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
        f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
        f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
        f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
        f.closePath();
        vt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
        f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
        f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
        f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
        f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
        f.closePath();
        vt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
        f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
        f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
        f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
        f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
        f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
        f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
        f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
        f.closePath();
        vt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
        f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
        f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
        f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
        f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
        f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
        f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
        f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
        f.closePath();
        vt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
        f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
        f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
        f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
        f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
        f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
        f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
        f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
        f.closePath();
        vt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
        f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
        f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
        f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
        f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
        f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
        f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
        f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
        f.closePath();
        vt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
        f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
        f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
        f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
        f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
        f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
        f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
        f.closePath();
        vt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
        f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
        f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
        f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
        f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
        f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
        f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
        f.closePath();
        vt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
        f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
        f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
        f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
        f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
        f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
        f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
        f.closePath();
        vt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
        f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
        f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
        f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
        f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
        f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
        f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
        f.closePath();
        vt(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
        f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
        f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
        f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
        f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
        f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
        f.closePath();
        vt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
        f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
        f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
        f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
        f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
        f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
        f.closePath();
        vt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
        f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
        f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
        f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
        f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
        f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
        f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
        f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
        f.closePath();
        vt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
        f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
        f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
        f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
        f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
        f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
        f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
        f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
        f.closePath();
        vt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
        f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
        f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
        f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
        f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
        f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
        f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
        f.closePath();
        vt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
        f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
        f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
        f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
        f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
        f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
        f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
        f.closePath();
        vt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
        f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
        f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
        f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
        f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
        f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
        f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
        f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
        f.closePath();
        vt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
        f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
        f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
        f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
        f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
        f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
        f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
        f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
        f.closePath();
        vt(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
        f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
        f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
        f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
        f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
        f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
        f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
        f.closePath();
        vt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
        f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
        f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
        f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
        f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
        f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
        f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
        f.closePath();
        vt(f, d[4], d[2], b * 12);
        return e;
    }
    function Em(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 218;
        d.height = a * 185;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 53.135406494140625);
        e.bezierCurveTo(a * 92, a * 17.135406494140625, a * 116, a * 11.135406494140625, a * 158, a * 53.135406494140625);
        e.bezierCurveTo(a * 178, a * 74.13540649414062, a * 181, a * 81.13540649414062, a * 196, a * 101.13540649414062);
        e.bezierCurveTo(a * 214, a * 127.13540649414062, a * 192, a * 138.13540649414062, a * 173, a * 149.13540649414062);
        e.bezierCurveTo(a * 137, a * 166.13540649414062, a * 74, a * 170.13540649414062, a * 36, a * 141.13540649414062);
        e.bezierCurveTo(a * 13, a * 127.13540649414062, a * 20, a * 119.13540649414062, a * 30, a * 103.13540649414062);
        e.bezierCurveTo(a * 48, a * 71.13540649414062, a * 54, a * 67.13540649414062, a * 63, a * 54.135406494140625);
        e.closePath();
        vt(e, c[0], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107, a * 25.135406494140625);
        e.bezierCurveTo(a * 62, a * 90.13540649414062, a * 54, a * 129.13540649414062, a * 53, a * 151.13540649414062);
        e.bezierCurveTo(a * 39.5, a * 142.13540649414062, a * 39.5, a * 142.13540649414062, a * 26, a * 133.13540649414062);
        e.bezierCurveTo(a * 23.5, a * 128.63540649414062, a * 23.5, a * 128.63540649414062, a * 21, a * 124.13540649414062);
        e.bezierCurveTo(a * 22, a * 113.13540649414062, a * 31, a * 99.13540649414062, a * 40, a * 88.13540649414062);
        e.bezierCurveTo(a * 54.5, a * 67.13540649414062, a * 54.5, a * 67.13540649414062, a * 69, a * 46.135406494140625);
        e.bezierCurveTo(a * 80.5, a * 36.635406494140625, a * 80.5, a * 36.635406494140625, a * 92, a * 27.135406494140625);
        e.closePath();
        vt(e, c[1]);
        return d;
    }
    function Im(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.globalAlpha = 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36.5, a * 278.0625);
        e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
        e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
        e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
        e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
        e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
        e.closePath();
        vt(e, c[0]);
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36.5, a * 278.0625);
        e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
        e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
        e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
        e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
        e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
        e.closePath();
        vt(e, c[1], c[2], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 214.5, a * 124.0625);
        e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
        e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
        e.closePath();
        vt(e, Ga, c[2], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 145.0625);
        e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
        e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
        e.closePath();
        vt(e, undefined, c[2], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103.5, a * 169.0625);
        e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
        e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
        e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
        e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
        e.closePath();
        vt(e, c[3], c[2], a * 19);
        ut(e, a * 92.5, a * 216.0625, a * 13.892443989449804);
        vt(e, c[4]);
        ut(e, a * 68.5, a * 227.0625, a * 8.06225774829855);
        vt(e, c[4]);
        ut(e, a * 85.5, a * 240.0625, a * 6.708203932499369);
        vt(e, c[4]);
        ut(e, a * 147.5, a * 294.0625, a * 17.46424919657298);
        vt(e, c[4]);
        ut(e, a * 166.5, a * 273.0625, a * 6.708203932499369);
        vt(e, c[4]);
        ut(e, a * 114.5, a * 294.0625, a * 12.36931687685298);
        vt(e, c[4]);
        ut(e, a * 123.5, a * 220.0625, a * 5.830951894845301);
        vt(e, c[4]);
        ut(e, a * 114.5, a * 259.0625, a * 4.123105625617661);
        vt(e, c[4]);
        ut(e, a * 63.5, a * 265.0625, a * 5.385164807134504);
        vt(e, c[4]);
        ut(e, a * 148.5, a * 235.0625, a * 4.47213595499958);
        vt(e, c[4]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 194.5, a * 313.0625);
        e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
        e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
        e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
        e.closePath();
        vt(e, c[5]);
        return d;
    }
    function Sm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 110;
        c.height = a * 110;
        d.globalAlpha = 0.2;
        ut(d, a * 55, a * 55, a * 55);
        vt(d, b[0]);
        return c;
    }
    function Qm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 372;
        d.height = a * 358;
        e.translate(a * 0, a * 10);
        e.globalAlpha = b ? 0.2 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
        e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
        e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
        e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
        e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
        e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
        e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
        e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
        e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
        e.closePath();
        vt(e, c[0], c[0], a * 10);
        e.translate(a * 0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107.00003051757812, a * 54.13069152832031);
        e.bezierCurveTo(a * 106.50003051757812, a * 38.63069152832031, a * 106.50003051757812, a * 38.63069152832031, a * 106.00003051757812, a * 23.130691528320312);
        e.bezierCurveTo(a * 121.50003051757812, a * 38.13069152832031, a * 121.50003051757812, a * 38.13069152832031, a * 137.00003051757812, a * 53.13069152832031);
        e.closePath();
        vt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 233.00003051757812, a * 53.6761474609375);
        e.bezierCurveTo(a * 247.00003051757812, a * 37.1761474609375, a * 247.00003051757812, a * 37.1761474609375, a * 261.0000305175781, a * 20.6761474609375);
        e.bezierCurveTo(a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 51.6761474609375);
        e.closePath();
        vt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 293.0000305175781, a * 54.403411865234375);
        e.bezierCurveTo(a * 300.0000305175781, a * 49.903411865234375, a * 300.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 45.403411865234375);
        e.bezierCurveTo(a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 54.403411865234375);
        e.closePath();
        vt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 77.00003051757812, a * 54.403411865234375);
        e.bezierCurveTo(a * 70.00003051757812, a * 50.403411865234375, a * 70.00003051757812, a * 50.403411865234375, a * 63.000030517578125, a * 46.403411865234375);
        e.bezierCurveTo(a * 62.500030517578125, a * 50.903411865234375, a * 62.500030517578125, a * 50.903411865234375, a * 62.000030517578125, a * 55.403411865234375);
        e.closePath();
        vt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58.000030517578125, a * 122.3125);
        e.bezierCurveTo(a * 59.500030517578125, a * 97.3125, a * 59.500030517578125, a * 97.3125, a * 61.000030517578125, a * 72.3125);
        e.bezierCurveTo(a * 91.00003051757812, a * 89.3125, a * 91.00003051757812, a * 89.3125, a * 121.00003051757812, a * 106.3125);
        e.closePath();
        vt(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 310.0000305175781, a * 127.3125);
        e.bezierCurveTo(a * 308.0000305175781, a * 98.3125, a * 308.0000305175781, a * 98.3125, a * 306.0000305175781, a * 69.3125);
        e.bezierCurveTo(a * 274.5000305175781, a * 88.8125, a * 274.5000305175781, a * 88.8125, a * 243.00003051757812, a * 108.3125);
        e.closePath();
        vt(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226.00003051757812, a * 87.85795593261719);
        e.bezierCurveTo(a * 243.50003051757812, a * 66.85795593261719, a * 243.50003051757812, a * 66.85795593261719, a * 261.0000305175781, a * 45.85795593261719);
        e.bezierCurveTo(a * 265.0000305175781, a * 83.85795593261719, a * 265.0000305175781, a * 83.85795593261719, a * 269.0000305175781, a * 121.85795593261719);
        e.bezierCurveTo(a * 235.00003051757812, a * 122.85795593261719, a * 233.00003051757812, a * 107.85795593261719, a * 228.00003051757812, a * 90.85795593261719);
        e.closePath();
        vt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.00003051757812, a * 128.8579559326172);
        e.bezierCurveTo(a * 104.50003051757812, a * 87.85795593261719, a * 104.50003051757812, a * 87.85795593261719, a * 104.00003051757812, a * 46.85795593261719);
        e.bezierCurveTo(a * 126.50003051757812, a * 69.35795593261719, a * 126.50003051757812, a * 69.35795593261719, a * 149.00003051757812, a * 91.85795593261719);
        e.bezierCurveTo(a * 130.00003051757812, a * 123.85795593261719, a * 123.00003051757812, a * 132.8579559326172, a * 107.00003051757812, a * 130.8579559326172);
        e.closePath();
        vt(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59.000030517578125, a * 121.85795593261719);
        e.bezierCurveTo(a * 59.500030517578125, a * 99.35795593261719, a * 59.500030517578125, a * 99.35795593261719, a * 60.000030517578125, a * 76.85795593261719);
        e.bezierCurveTo(a * 84.00003051757812, a * 92.35795593261719, a * 84.00003051757812, a * 92.35795593261719, a * 108.00003051757812, a * 107.85795593261719);
        e.bezierCurveTo(a * 106.00003051757812, a * 148.8579559326172, a * 86.00003051757812, a * 148.8579559326172, a * 62.000030517578125, a * 123.85795593261719);
        e.closePath();
        vt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.00003051757812, a * 132.8579559326172);
        e.bezierCurveTo(a * 104.50003051757812, a * 93.35795593261719, a * 104.50003051757812, a * 93.35795593261719, a * 104.00003051757812, a * 53.85795593261719);
        e.bezierCurveTo(a * 126.50003051757812, a * 75.85795593261719, a * 126.50003051757812, a * 75.85795593261719, a * 149.00003051757812, a * 97.85795593261719);
        e.closePath();
        vt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 311.0000305175781, a * 126.85795593261719);
        e.bezierCurveTo(a * 309.0000305175781, a * 101.35795593261719, a * 309.0000305175781, a * 101.35795593261719, a * 307.0000305175781, a * 75.85795593261719);
        e.bezierCurveTo(a * 271.0000305175781, a * 96.85795593261719, a * 271.0000305175781, a * 96.85795593261719, a * 235.00003051757812, a * 117.85795593261719);
        e.closePath();
        vt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 228.00003051757812, a * 96.85795593261719);
        e.bezierCurveTo(a * 244.50003051757812, a * 74.85795593261719, a * 244.50003051757812, a * 74.85795593261719, a * 261.0000305175781, a * 52.85795593261719);
        e.bezierCurveTo(a * 265.5000305175781, a * 89.85795593261719, a * 265.5000305175781, a * 89.85795593261719, a * 270.0000305175781, a * 126.85795593261719);
        e.closePath();
        vt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 12.000030517578125, a * 86.13069152832031);
        e.bezierCurveTo(a * 36.000030517578125, a * 113.13069152832031, a * 84.00003051757812, a * 111.13069152832031, a * 116.00003051757812, a * 113.13069152832031);
        e.bezierCurveTo(a * 164.00003051757812, a * 23.130691528320312, a * 172.00003051757812, a * 18.130691528320312, a * 181.00003051757812, a * 9.130691528320312);
        e.bezierCurveTo(a * 199.00003051757812, a * 29.130691528320312, a * 221.00003051757812, a * 78.13069152832031, a * 247.00003051757812, a * 112.13069152832031);
        e.bezierCurveTo(a * 301.0000305175781, a * 122.13069152832031, a * 338.0000305175781, a * 111.13069152832031, a * 359.0000305175781, a * 94.13069152832031);
        e.bezierCurveTo(a * 359.0000305175781, a * 113.13069152832031, a * 358.5000305175781, a * 105.13069152832031, a * 358.0000305175781, a * 116.13069152832031);
        e.bezierCurveTo(a * 270.5000305175781, a * 130.1306915283203, a * 270.5000305175781, a * 130.1306915283203, a * 183.00003051757812, a * 144.1306915283203);
        e.bezierCurveTo(a * 98.00003051757812, a * 128.6306915283203, a * 98.00003051757812, a * 128.6306915283203, a * 13.000030517578125, a * 113.13069152832031);
        e.closePath();
        vt(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
        e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
        e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
        e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
        e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
        e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
        e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
        e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
        e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
        e.closePath();
        vt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27.000030517578125, a * 94.76704406738281);
        e.bezierCurveTo(a * 11.000030517578125, a * 81.76704406738281, a * 31.000030517578125, a * 72.76704406738281, a * 44.000030517578125, a * 59.76704406738281);
        e.bezierCurveTo(a * 9.000030517578125, a * 65.76704406738281, a * 4.000030517578125, a * 78.76704406738281, a * 9.000030517578125, a * 89.76704406738281);
        e.closePath();
        vt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 352.0000305175781, a * 100.76705932617188);
        e.bezierCurveTo(a * 362.0000305175781, a * 92.76705932617188, a * 352.0000305175781, a * 84.76705932617188, a * 340.0000305175781, a * 68.76705932617188);
        e.bezierCurveTo(a * 360.0000305175781, a * 69.76705932617188, a * 364.0000305175781, a * 79.76705932617188, a * 364.0000305175781, a * 94.76705932617188);
        e.closePath();
        vt(e, c[1], c[1], a * 1);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25.000030517578125, a * 97.94886779785156);
        e.bezierCurveTo(a * 2.000030517578125, a * 76.94886779785156, a * 29.000030517578125, a * 62.94886779785156, a * 44.000030517578125, a * 59.94886779785156);
        e.bezierCurveTo(a * 8.000030517578125, a * 59.94886779785156, a * -0.999969482421875, a * 81.94886779785156, a * 4.000030517578125, a * 92.94886779785156);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 349.0000305175781, a * 100.94886779785156);
        e.bezierCurveTo(a * 366.0000305175781, a * 82.94886779785156, a * 353.0000305175781, a * 76.94886779785156, a * 337.0000305175781, a * 67.94886779785156);
        e.bezierCurveTo(a * 366.0000305175781, a * 69.94886779785156, a * 366.0000305175781, a * 83.94886779785156, a * 363.0000305175781, a * 101.94886779785156);
        e.closePath();
        vt(e, c[2], c[3], a * 10);
        ut(e, a * 46.000030517578125, a * 137.5852279663086, a * 9.219544457292887);
        vt(e, c[4], c[5], a * 1);
        ut(e, a * 308.0000305175781, a * 141.5852279663086, a * 8.54400374531753);
        vt(e, c[4], c[5], a * 1);
        ut(e, a * 92.00003051757812, a * 149.58523559570312, a * 14.866068747318506);
        vt(e, c[4], c[5], a * 1);
        ut(e, a * 262.0000305175781, a * 148.8579559326172, a * 15.620499351813308);
        vt(e, c[4], c[5], a * 1);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 184.00003051757812, a * 68.85795593261719);
        e.bezierCurveTo(a * 203.00003051757812, a * 108.85795593261719, a * 203.00003051757812, a * 108.85795593261719, a * 222.00003051757812, a * 148.8579559326172);
        e.bezierCurveTo(a * 202.50003051757812, a * 177.8579559326172, a * 202.50003051757812, a * 177.8579559326172, a * 183.00003051757812, a * 206.8579559326172);
        e.bezierCurveTo(a * 162.00003051757812, a * 178.8579559326172, a * 162.00003051757812, a * 178.8579559326172, a * 141.00003051757812, a * 150.8579559326172);
        e.closePath();
        vt(e, c[4], c[5], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 183.00003051757812, a * 104.94886779785156);
        e.bezierCurveTo(a * 192.50003051757812, a * 125.44886779785156, a * 192.50003051757812, a * 125.44886779785156, a * 202.00003051757812, a * 145.94886779785156);
        e.bezierCurveTo(a * 192.00003051757812, a * 163.94886779785156, a * 192.00003051757812, a * 163.94886779785156, a * 182.00003051757812, a * 181.94886779785156);
        e.bezierCurveTo(a * 172.50003051757812, a * 164.44886779785156, a * 172.50003051757812, a * 164.44886779785156, a * 163.00003051757812, a * 146.94886779785156);
        e.closePath();
        vt(e, c[6]);
        return d;
    }
    function _m(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 161;
        d.height = a * 184;
        e.translate(0, a * 10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.5, a * 34.609375);
        e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
        e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
        e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
        e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
        e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
        e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
        e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
        e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
        e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
        e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 45.5, a * 144.609375);
        e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
        e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
        e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
        vt(e, c[0]);
        e.translate(0, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 45.5, a * 144.609375);
        e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
        e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
        e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
        vt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.5, a * 34.609375);
        e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
        e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
        e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
        e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
        e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
        e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
        e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
        e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
        e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
        e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
        e.closePath();
        vt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104.5, a * 35.609375);
        e.bezierCurveTo(a * 71.5, a * 36.609375, a * 57.5, a * 52.609375, a * 58.5, a * 81.609375);
        e.bezierCurveTo(a * 59.5, a * 103.609375, a * 66.5, a * 107.609375, a * 66.5, a * 116.609375);
        e.bezierCurveTo(a * 67.5, a * 128.609375, a * 65.5, a * 131.609375, a * 63.5, a * 137.609375);
        vt(e, undefined, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59.5, a * 72.609375);
        e.bezierCurveTo(a * 38.5, a * 80.609375, a * 43.5, a * 81.609375, a * 37.5, a * 89.609375);
        vt(e, Ga, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60.5, a * 85.609375);
        e.bezierCurveTo(a * 75.5, a * 91.609375, a * 76.5, a * 96.609375, a * 81.5, a * 104.609375);
        vt(e, ns, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 68.5, a * 122.609375);
        e.bezierCurveTo(a * 79.5, a * 130.609375, a * 74.5, a * 128.609375, a * 80.5, a * 134.609375);
        vt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 142.5, a * 18.609375);
        e.bezierCurveTo(a * 151.5, a * 28.609375, a * 151.5, a * 32.609375, a * 146.5, a * 40.609375);
        e.bezierCurveTo(a * 137.5, a * 26.609375, a * 138.5, a * 24.609375, a * 142.5, a * 19.609375);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 146.5, a * 61.50892639160156);
        e.bezierCurveTo(a * 157.5, a * 69.50892639160156, a * 150.5, a * 79.50892639160156, a * 145.5, a * 81.50892639160156);
        e.bezierCurveTo(a * 140.5, a * 65.50892639160156, a * 144.5, a * 64.50892639160156, a * 146.5, a * 62.50892639160156);
        e.closePath();
        vt(e, c[3]);
        return d;
    }
    function Fm(b, c, d, e) {
        const f = b ^ 32156;
        const g = (c | 42802) & ~(c & 42802);
        const a = d ^ 26896;
        const h = ~(e & 39839) & (e | 39839);
        return (1013904223 + (41948 + (Pn(f, g, a, h) ^ Pn(f, g, a, h))) * 1664525) % 4294967296;
    }
    function Rm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 105;
        d.height = a * 144;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * -5, a * 0);
        e.save();
        e.translate(a * 52.5, a * 91.5);
        wt(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
        e.restore();
        vt(e, c[0], c[0], a * 3);
        e.save();
        e.translate(a * 53, a * 36);
        wt(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
        e.restore();
        vt(e, c[0], c[0], a * 4);
        e.save();
        e.translate(a * 53.5, a * 35.5);
        wt(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
        e.restore();
        vt(e, c[0], c[0], a * 4);
        e.translate(a * 5, a * 0);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 52.5, a * 91.5);
        wt(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
        e.restore();
        vt(e, c[1], c[2], a * 3);
        e.save();
        e.translate(a * 53, a * 36);
        wt(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
        e.restore();
        vt(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 53.5, a * 35.5);
        wt(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
        e.restore();
        vt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 60.5);
        e.bezierCurveTo(a * 44, a * 56.5, a * 44, a * 56.5, a * 39, a * 52.5);
        e.bezierCurveTo(a * 39, a * 46.5, a * 39, a * 46.5, a * 39, a * 40.5);
        e.bezierCurveTo(a * 44, a * 44, a * 44, a * 44, a * 49, a * 47.5);
        e.bezierCurveTo(a * 49, a * 54, a * 49, a * 54, a * 49, a * 60.5);
        e.closePath();
        vt(e, c[7], c[6], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 66, a * 40.5);
        e.bezierCurveTo(a * 66, a * 46.5, a * 66, a * 46.5, a * 66, a * 52.5);
        e.bezierCurveTo(a * 60.5, a * 56.5, a * 60.5, a * 56.5, a * 55, a * 60.5);
        e.bezierCurveTo(a * 56, a * 53, a * 56, a * 53, a * 57, a * 45.5);
        e.bezierCurveTo(a * 61.5, a * 43, a * 61.5, a * 43, a * 66, a * 40.5);
        e.closePath();
        vt(e, c[7], c[6], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 33.5);
        e.bezierCurveTo(a * 55.5, a * 41, a * 55.5, a * 41, a * 59, a * 48.5);
        e.bezierCurveTo(a * 56, a * 58, a * 56, a * 58, a * 53, a * 67.5);
        e.bezierCurveTo(a * 49, a * 58, a * 49, a * 58, a * 45, a * 48.5);
        e.bezierCurveTo(a * 48.5, a * 41, a * 48.5, a * 41, a * 52, a * 33.5);
        e.closePath();
        vt(e, c[9], c[8], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 47.5);
        e.bezierCurveTo(a * 54.5, a * 50.5, a * 54.5, a * 50.5, a * 57, a * 53.5);
        e.bezierCurveTo(a * 55, a * 60, a * 55, a * 60, a * 53, a * 66.5);
        e.bezierCurveTo(a * 50.5, a * 61, a * 50.5, a * 61, a * 48, a * 55.5);
        e.bezierCurveTo(a * 50, a * 52, a * 50, a * 52, a * 52, a * 48.5);
        e.closePath();
        vt(e, c[11], c[10], a * 3);
        return d;
    }
    function jm(b, c, d, e, f) {
        We(Tu, b, c, d, e, f);
        const g = yc(Cc[0], Cc[1], Cc[2], Cc[3], Cc[4]);
        gf(Cc[0], Cc[1]);
        return g ^ 31964;
    }
    function Gm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 95;
        d.height = a * 85;
        if (c == 0) {
            e.translate(a * 7, a * 15);
            e.scale(0.9, 0.9);
            e.save();
            wt(e, a * 0, a * 5, a * 90, a * 60, 10);
            vt(e, b[0]);
            e.globalCompositeOperation = "destination-out";
            ut(e, a * 25, a * 40, a * 10);
            e.fill();
            ut(e, a * 65, a * 40, a * 10);
            e.fill();
            e.restore();
            e.save();
            wt(e, 0, 0, a * 90, a * 60, a * 10);
            vt(e, b[1]);
            e.globalCompositeOperation = "destination-out";
            ut(e, a * 25, a * 40, a * 10);
            e.fill();
            ut(e, a * 65, a * 40, a * 10);
            e.fill();
            e.restore();
        } else if (c == 1) {
            e.scale(0.8, 0.8);
            e.translate(a * 15, a * 33);
            e.save();
            e.scale(0.56, 0.56);
            e.translate(a * -39, a * -60);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 32.5, a * 50.642852783203125);
            e.bezierCurveTo(a * 83, a * 69.64285278320312, a * 83, a * 69.64285278320312, a * 133.5, a * 88.64285278320312);
            e.bezierCurveTo(a * 93, a * 92.64285278320312, a * 93, a * 92.64285278320312, a * 52.5, a * 96.64285278320312);
            e.bezierCurveTo(a * 30.5, a * 100.64285278320312, a * 36.5, a * 94.64285278320312, a * 32.5, a * 84.64285278320312);
            e.bezierCurveTo(a * 21.5, a * 45.642852783203125, a * 24.5, a * 48.642852783203125, a * 31.5, a * 50.642852783203125);
            e.closePath();
            vt(e, b[1]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 116.5, a * 85.64285278320312);
            e.bezierCurveTo(a * 160.5, a * 67.14285278320312, a * 160.5, a * 67.14285278320312, a * 204.5, a * 48.642852783203125);
            e.bezierCurveTo(a * 220.5, a * 42.642852783203125, a * 208.5, a * 68.64285278320312, a * 205.5, a * 85.64285278320312);
            e.bezierCurveTo(a * 202.5, a * 98.64285278320312, a * 199.5, a * 98.64285278320312, a * 188.5, a * 100.64285278320312);
            e.closePath();
            vt(e, b[1]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 166.5, a * 68.64285278320312);
            e.bezierCurveTo(a * 147.5, a * 72.64285278320312, a * 145.5, a * 73.64285278320312, a * 142.5, a * 62.642852783203125);
            e.bezierCurveTo(a * 121.5, a * 12.642852783203125, a * 122.5, a * 5.642852783203125, a * 117.5, a * 15.642852783203125);
            e.bezierCurveTo(a * 105.5, a * 40.642852783203125, a * 105.5, a * 40.642852783203125, a * 93.5, a * 65.64285278320312);
            e.bezierCurveTo(a * 89.5, a * 74.64285278320312, a * 84.5, a * 72.64285278320312, a * 73.5, a * 74.64285278320312);
            e.bezierCurveTo(a * 98, a * 87.64285278320312, a * 98, a * 87.64285278320312, a * 122.5, a * 100.64285278320312);
            e.closePath();
            vt(e, b[1]);
            e.restore();
            e.save();
            wt(e, 0, a * 15, a * 90, a * 50, a * 10);
            vt(e, b[0]);
            wt(e, 0, a * 10, a * 90, a * 50, a * 10);
            vt(e, b[1]);
            e.globalCompositeOperation = "destination-out";
            ut(e, a * 25, a * 40, a * 10);
            e.fill();
            ut(e, a * 65, a * 40, a * 10);
            e.fill();
            e.restore();
        }
        return d;
    }
    function Wm(a, b, c) {
        var d = (e = document.createElement("canvas")).getContext("2d");
        e.width = a * 47;
        e.height = a * 60;
        var e;
        d = (e = document.createElement("canvas")).getContext("2d");
        e.width = a * 47;
        e.height = a * 60;
        ut(d, a * 23.5, a * 20.734375, a * 15.132745950421556);
        vt(d, undefined, c[2], a * 4);
        ut(d, a * 23.5, a * 20.734375, a * 18.601075237738275);
        vt(d, ns, c[1], a * 4);
        ut(d, a * 23.5, a * 20.734375, a * 11.40175425099138);
        vt(d, sl, c[1], a * 4);
        d.save();
        d.translate(a * 23, a * 38.734375);
        d.rotate(0);
        wt(d, a * -21.5, a * -19, a * 43, a * 38, a * 10);
        d.restore();
        vt(d, c[2], c[1], a * 4);
        d.save();
        d.translate(a * 23.5, a * 43.734375);
        d.rotate(0.5235987755982988);
        zt(d, 3, a * 8.06225774829855, a * 0);
        d.restore();
        vt(d, c[3]);
        ut(d, a * 23.5, a * 35.734375, a * 7.0710678118654755);
        vt(d, c[3]);
        return e;
    }
    function Lm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 316;
        d.height = a * 365;
        e.save();
        e.translate(a * 156.07142639160156, a * 51.81248474121094);
        e.rotate(0);
        wt(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
        e.restore();
        vt(e, c[1], c[2], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
        e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
        e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
        e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
        e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
        e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
        e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
        e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
        e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
        e.closePath();
        vt(e, ns, c[5], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
        e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
        e.closePath();
        vt(e, undefined, c[6], a * 15);
        return d;
    }
    function Om(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 170;
        e.translate(0, a * -170);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 159.5, a * 322.0625);
        e.bezierCurveTo(a * 240.5, a * 293.0625, a * 240.5, a * 293.0625, a * 321.5, a * 264.0625);
        e.bezierCurveTo(a * 276.5, a * 230.0625, a * 276.5, a * 230.0625, a * 231.5, a * 196.0625);
        e.bezierCurveTo(a * 158.5, a * 221.5625, a * 158.5, a * 221.5625, a * 85.5, a * 247.0625);
        e.closePath();
        vt(e, c[0], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212.5, a * 270.0625);
        e.bezierCurveTo(a * 235, a * 261.5625, a * 235, a * 261.5625, a * 257.5, a * 253.0625);
        e.closePath();
        vt(e, dg, c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 193.5, a * 226.0625);
        e.bezierCurveTo(a * 204.5, a * 242.0625, a * 242.5, a * 237.0625, a * 251.5, a * 225.0625);
        e.bezierCurveTo(a * 246.5, a * 195.0625, a * 205.5, a * 190.0625, a * 193.5, a * 227.0625);
        e.closePath();
        vt(e, c[2], c[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 164.5, a * 245.0625);
        e.bezierCurveTo(a * 182.5, a * 264.0625, a * 252.5, a * 258.0625, a * 276.5, a * 244.0625);
        e.bezierCurveTo(a * 265.5, a * 226.0625, a * 244.5, a * 231.0625, a * 229.5, a * 230.0625);
        e.bezierCurveTo(a * 205.5, a * 227.0625, a * 175.5, a * 202.0625, a * 162.5, a * 244.0625);
        e.closePath();
        vt(e, c[2], c[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115.5, a * 260.0625);
        e.bezierCurveTo(a * 134.5, a * 279.0625, a * 170.5, a * 275.0625, a * 191.5, a * 257.0625);
        e.bezierCurveTo(a * 174.5, a * 208.0625, a * 142.5, a * 197.0625, a * 116.5, a * 259.0625);
        e.closePath();
        vt(e, c[2], c[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 152.5, a * 278.0625);
        e.bezierCurveTo(a * 165.5, a * 294.0625, a * 200.5, a * 287.0625, a * 216.5, a * 278.0625);
        e.bezierCurveTo(a * 206.5, a * 247.0625, a * 173.5, a * 233.0625, a * 153.5, a * 276.0625);
        e.closePath();
        vt(e, c[2], c[3], a * 12);
        return d;
    }
    function Nm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 465;
        d.height = a * 405;
        e.globalAlpha = 1;
        e.translate(a * 6, a * 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39.000030517578125, a * 162.03977966308594);
        e.bezierCurveTo(a * 125.00003051757812, a * 84.03977966308594, a * 108.50003051757812, a * 115.03977966308594, a * 178.00003051757812, a * 68.03977966308594);
        e.bezierCurveTo(a * 299.0000305175781, a * 146.53977966308594, a * 299.0000305175781, a * 146.53977966308594, a * 420.0000305175781, a * 225.03977966308594);
        e.bezierCurveTo(a * 400.0000305175781, a * 288.53977966308594, a * 400.0000305175781, a * 288.53977966308594, a * 380.0000305175781, a * 352.03977966308594);
        e.bezierCurveTo(a * 216.50003051757812, a * 345.53977966308594, a * 216.50003051757812, a * 345.53977966308594, a * 53.000030517578125, a * 339.03977966308594);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
        e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
        e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
        e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
        e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
        e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
        e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
        e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
        e.closePath();
        vt(e, c[0], c[1], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17.000030517578125, a * 149.94886779785156);
        e.bezierCurveTo(a * 76.00003051757812, a * 67.94886779785156, a * 177.00003051757812, a * 40.94886779785156, a * 232.00003051757812, a * 45.94886779785156);
        e.bezierCurveTo(a * 316.0000305175781, a * 46.94886779785156, a * 359.0000305175781, a * 74.94886779785156, a * 428.0000305175781, a * 145.94886779785156);
        e.bezierCurveTo(a * 414.0000305175781, a * 73.94886779785156, a * 386.0000305175781, a * 68.94886779785156, a * 359.0000305175781, a * 43.94886779785156);
        e.bezierCurveTo(a * 295.0000305175781, a * 5.9488677978515625, a * 239.00003051757812, a * 10.948867797851562, a * 207.00003051757812, a * 10.948867797851562);
        e.bezierCurveTo(a * 121.00003051757812, a * 20.948867797851562, a * 104.00003051757812, a * 34.94886779785156, a * 45.000030517578125, a * 84.94886779785156);
        e.bezierCurveTo(a * 14.000030517578125, a * 128.94886779785156, a * 18.000030517578125, a * 142.94886779785156, a * 16.000030517578125, a * 151.94886779785156);
        e.closePath();
        vt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
        e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
        e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
        e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
        e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
        e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
        e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
        e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
        e.closePath();
        vt(e, Da, c[1], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60.000030517578125, a * 288.03977966308594);
        e.bezierCurveTo(a * 183.00003051757812, a * 320.03977966308594, a * 342.0000305175781, a * 306.03977966308594, a * 399.0000305175781, a * 286.03977966308594);
        e.bezierCurveTo(a * 420.0000305175781, a * 345.03977966308594, a * 410.0000305175781, a * 335.03977966308594, a * 415.0000305175781, a * 362.03977966308594);
        e.bezierCurveTo(a * 351.0000305175781, a * 384.03977966308594, a * 299.0000305175781, a * 389.03977966308594, a * 215.00003051757812, a * 391.03977966308594);
        e.bezierCurveTo(a * 128.00003051757812, a * 388.03977966308594, a * 69.00003051757812, a * 373.03977966308594, a * 39.000030517578125, a * 359.03977966308594);
        e.closePath();
        vt(e, c[0], c[1], a * 13);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 47.000030517578125, a * 327.03977966308594);
        e.bezierCurveTo(a * 203.00003051757812, a * 377.03977966308594, a * 331.0000305175781, a * 349.03977966308594, a * 410.0000305175781, a * 330.03977966308594);
        e.closePath();
        vt(e, c[0], c[1], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9.000030517578125, a * 339.1306915283203);
        e.bezierCurveTo(a * 2.000030517578125, a * 280.1306915283203, a * 30.000030517578125, a * 219.1306915283203, a * 85.00003051757812, a * 167.1306915283203);
        e.bezierCurveTo(a * 174.00003051757812, a * 82.13069152832031, a * 241.00003051757812, a * 101.13069152832031, a * 284.0000305175781, a * 115.13069152832031);
        e.bezierCurveTo(a * 333.0000305175781, a * 134.1306915283203, a * 376.0000305175781, a * 177.1306915283203, a * 410.0000305175781, a * 247.1306915283203);
        e.bezierCurveTo(a * 439.0000305175781, a * 300.1306915283203, a * 442.0000305175781, a * 346.1306915283203, a * 430.0000305175781, a * 363.1306915283203);
        e.bezierCurveTo(a * 418.0000305175781, a * 366.1306915283203, a * 395.0000305175781, a * 295.1306915283203, a * 355.0000305175781, a * 223.1306915283203);
        e.bezierCurveTo(a * 299.0000305175781, a * 156.1306915283203, a * 262.0000305175781, a * 155.1306915283203, a * 215.00003051757812, a * 159.1306915283203);
        e.bezierCurveTo(a * 133.00003051757812, a * 171.1306915283203, a * 120.00003051757812, a * 193.1306915283203, a * 96.00003051757812, a * 221.1306915283203);
        e.bezierCurveTo(a * 49.000030517578125, a * 262.1306915283203, a * 47.000030517578125, a * 306.1306915283203, a * 38.000030517578125, a * 336.1306915283203);
        e.bezierCurveTo(a * 30.000030517578125, a * 349.1306915283203, a * 30.000030517578125, a * 349.1306915283203, a * 22.000030517578125, a * 362.1306915283203);
        e.closePath();
        vt(e, c[2], c[1], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 228.00003051757812, a * 128.03977966308594);
        e.bezierCurveTo(a * 315.0000305175781, a * 131.03977966308594, a * 349.0000305175781, a * 178.03977966308594, a * 386.0000305175781, a * 234.03977966308594);
        e.bezierCurveTo(a * 444.0000305175781, a * 329.03977966308594, a * 446.0000305175781, a * 354.03977966308594, a * 427.0000305175781, a * 373.03977966308594);
        e.bezierCurveTo(a * 389.0000305175781, a * 389.03977966308594, a * 399.0000305175781, a * 329.03977966308594, a * 361.0000305175781, a * 277.03977966308594);
        e.bezierCurveTo(a * 306.0000305175781, a * 191.03977966308594, a * 266.0000305175781, a * 183.03977966308594, a * 220.00003051757812, a * 181.03977966308594);
        e.bezierCurveTo(a * 138.00003051757812, a * 184.03977966308594, a * 123.00003051757812, a * 212.03977966308594, a * 89.00003051757812, a * 271.03977966308594);
        e.bezierCurveTo(a * 52.000030517578125, a * 349.03977966308594, a * 68.00003051757812, a * 364.03977966308594, a * 33.000030517578125, a * 369.03977966308594);
        e.bezierCurveTo(a * 6.000030517578125, a * 366.03977966308594, a * 5.000030517578125, a * 341.03977966308594, a * 26.000030517578125, a * 288.03977966308594);
        e.bezierCurveTo(a * 60.000030517578125, a * 207.03977966308594, a * 100.00003051757812, a * 180.03977966308594, a * 113.00003051757812, a * 170.03977966308594);
        e.bezierCurveTo(a * 159.00003051757812, a * 132.03977966308594, a * 196.00003051757812, a * 133.03977966308594, a * 226.00003051757812, a * 129.03977966308594);
        e.closePath();
        vt(e, c[0], c[1], a * 20);
        return d;
    }
    function Hm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 450;
        d.height = a * 790;
        e.translate(a * 5, a * 5);
        e.globalAlpha = b ? 0 : 0;
        ut(e, a * 178.5, a * 172.828125, a * 150);
        vt(e, undefined, c[0], a * 65);
        ut(e, a * 178.5, a * 172.828125, a * 150);
        vt(e, undefined, c[0], a * 55);
        e.closePath();
        e.save();
        e.translate(a * 177, a * 512.328125);
        wt(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
        e.restore();
        vt(e, c[0]);
        e.save();
        e.translate(a * 136, a * 581.828125);
        wt(e, a * -39, a * -23, a * 78, a * 46, a * 25);
        e.restore();
        vt(e, c[0]);
        e.save();
        e.translate(a * 135.5, a * 663.828125);
        wt(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
        e.restore();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 114, a * 594.828125);
        e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
        e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
        e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
        e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
        e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, a * 5);
        e.moveTo(a * 140, a * 294.828125);
        e.bezierCurveTo(a * 212, a * 295.828125, a * 176.5, a * 295.328125, a * 213, a * 295.828125);
        e.bezierCurveTo(a * 201.5, a * 325.328125, a * 201.5, a * 325.328125, a * 190, a * 354.828125);
        e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 161, a * 356.828125);
        e.bezierCurveTo(a * 154.5, a * 328.828125, a * 154.5, a * 328.828125, a * 148, a * 300.828125);
        e.closePath();
        vt(e, c[0]);
        e.translate(3, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 159, a * 679.828125);
        e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
        e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
        e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
        e.closePath();
        vt(e, c[0]);
        e.save();
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 548.828125);
        e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
        e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
        e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
        e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
        e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
        e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
        e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
        e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
        e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
        e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
        e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
        e.closePath();
        vt(e, c[0], c[0], a * 7);
        e.restore();
        e.globalAlpha = 1;
        e.translate(a * 15, a * 35);
        ut(e, a * 178.5, a * 172.828125, a * 150);
        vt(e, undefined, c[2], a * 95);
        ut(e, a * 178.5, a * 172.828125, a * 150);
        vt(e, Ft, c[1], a * 55);
        e.closePath();
        e.save();
        e.translate(a * 177, a * 512.328125);
        wt(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
        e.restore();
        vt(e, c[1], c[2], a * 20);
        e.save();
        e.translate(a * 136, a * 581.828125);
        wt(e, a * -39, a * -23, a * 78, a * 46, a * 25);
        e.restore();
        vt(e, c[1], c[2], a * 20);
        e.save();
        e.translate(a * 135.5, a * 663.828125);
        wt(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
        e.restore();
        vt(e, c[1], c[2], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 114, a * 594.828125);
        e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
        e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
        e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
        e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
        e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
        e.closePath();
        vt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, a * 5);
        e.moveTo(a * 123, a * 294.828125);
        e.bezierCurveTo(a * 212, a * 295.828125, a * 190.5, a * 295.328125, a * 250, a * 295.828125);
        e.bezierCurveTo(a * 231.5, a * 325.328125, a * 231.5, a * 325.328125, a * 220, a * 354.828125);
        e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 140, a * 356.828125);
        e.bezierCurveTo(a * 123.5, a * 328.828125, a * 123.5, a * 328.828125, a * 123, a * 294.828125);
        e.closePath();
        vt(e, c[1]);
        e.translate(0, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 159, a * 679.828125);
        e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
        e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
        e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
        e.closePath();
        vt(e, c[1]);
        e.save();
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 548.828125);
        e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
        e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
        e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
        e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
        e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
        e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
        e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
        e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
        e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
        e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
        e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
        e.closePath();
        vt(e, c[1], c[1], a * 7);
        e.restore();
        return d;
    }
    function qm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 440;
        d.height = a * 388;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        ut(e, a * 220, a * 201, a * 170.41713528867922);
        vt(e, c[0], c[0], a * 6);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        ut(e, a * 220, a * 201, a * 170.41713528867922);
        vt(e, c[1], c[2], a * 6);
        ut(e, a * 220, a * 201, a * 130);
        vt(e, c[11], c[2], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 218, a * 97);
        e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
        e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
        e.closePath();
        vt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224, a * 181);
        e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
        e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
        e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
        e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
        e.closePath();
        vt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 169, a * 289);
        e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
        e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
        e.closePath();
        vt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143, a * 146);
        e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
        e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
        e.closePath();
        vt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 135);
        e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
        e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
        e.closePath();
        vt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 318, a * 223);
        e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
        e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
        e.closePath();
        vt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 142, a * 223);
        e.bezierCurveTo(a * 128, a * 213, a * 123, a * 214, a * 111, a * 223);
        e.closePath();
        vt(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 251, a * 133);
        e.bezierCurveTo(a * 269, a * 188, a * 262, a * 229, a * 251, a * 253);
        e.bezierCurveTo(a * 288, a * 224, a * 273, a * 139, a * 252, a * 133);
        e.closePath();
        vt(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 203, a * 102);
        e.bezierCurveTo(a * 204, a * 136, a * 200, a * 159, a * 189, a * 174);
        e.bezierCurveTo(a * 223, a * 164, a * 219, a * 87, a * 205, a * 83);
        e.closePath();
        vt(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 196, a * 324);
        e.bezierCurveTo(a * 209, a * 239, a * 200, a * 219, a * 192, a * 196);
        e.bezierCurveTo(a * 229, a * 216, a * 219, a * 316, a * 198, a * 325);
        e.closePath();
        vt(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 266, a * 166);
        e.bezierCurveTo(a * 249, a * 154, a * 243, a * 161, a * 233, a * 167);
        vt(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 269, a * 192);
        e.bezierCurveTo(a * 256, a * 183, a * 241, a * 186, a * 233, a * 192);
        vt(e, dg, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 263, a * 217);
        e.bezierCurveTo(a * 251, a * 211, a * 242, a * 213, a * 236, a * 218);
        vt(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 204, a * 141);
        e.bezierCurveTo(a * 191, a * 131, a * 187, a * 133, a * 176, a * 141);
        vt(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 207, a * 230);
        e.bezierCurveTo(a * 193, a * 222, a * 185, a * 224, a * 177, a * 231);
        vt(e, Og, c[6], a * 6);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 210, a * 258);
        e.bezierCurveTo(a * 196, a * 247, a * 191, a * 250, a * 177, a * 259);
        vt(e, Ft, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 196);
        e.bezierCurveTo(a * 130, a * 186, a * 124, a * 187, a * 114, a * 195);
        vt(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 218, a * 97);
        e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
        e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
        e.closePath();
        vt(e, Jl, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224, a * 181);
        e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
        e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
        e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
        e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
        e.closePath();
        vt(e, Da, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 169, a * 289);
        e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
        e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
        e.closePath();
        vt(e, uj, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143, a * 146);
        e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
        e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
        e.closePath();
        vt(e, Zk, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 135);
        e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
        e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
        e.closePath();
        vt(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 318, a * 223);
        e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
        e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
        e.closePath();
        vt(e, undefined, c[6], a * 6);
        ut(e, a * 222, a * 199, a * 120.74767078498864);
        vt(e, undefined, c[3], a * 40);
        ut(e, a * 220, a * 200, a * 95.44108130150245);
        vt(e, Ft, c[2], a * 15);
        ut(e, a * 220, a * 201, a * 85);
        vt(e, undefined, c[4], a * 10);
        e.globalAlpha = 0.5;
        ut(e, a * 220, a * 201, a * 82);
        vt(e, c[9]);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        ut(e, a * 63, a * 136, a * 49.193495504995376);
        vt(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        ut(e, a * 63, a * 136, a * 49.193495504995376);
        vt(e, c[8], c[2], a * 4);
        ut(e, a * 63, a * 137, a * 25.632011235952593);
        vt(e, c[7], c[2], a * 4);
        return d;
    }
    function Um(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 272;
        d.height = a * 264;
        e.translate(0, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.999969482421875, a * 84.517333984375);
        e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
        e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
        e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
        e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
        e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
        e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
        e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
        e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
        e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
        e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
        e.closePath();
        vt(e, c[0]);
        e.translate(0, a * -20);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.999969482421875, a * 84.517333984375);
        e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
        e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
        e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
        e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
        e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
        e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
        e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
        e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
        e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
        e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
        e.closePath();
        vt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123.99996948242188, a * 116.18402099609375);
        e.bezierCurveTo(a * 115.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 74.18402099609375, a * 109.99996948242188, a * 63.18402099609375);
        e.bezierCurveTo(a * 115.99996948242188, a * 69.18402099609375, a * 125.99996948242188, a * 87.18402099609375, a * 137.99996948242188, a * 112.18402099609375);
        e.bezierCurveTo(a * 142.99996948242188, a * 84.18402099609375, a * 143.99996948242188, a * 76.18402099609375, a * 153.99996948242188, a * 62.18402099609375);
        e.bezierCurveTo(a * 155.99996948242188, a * 79.18402099609375, a * 149.99996948242188, a * 110.18402099609375, a * 151.99996948242188, a * 117.18402099609375);
        e.bezierCurveTo(a * 162.99996948242188, a * 104.18402099609375, a * 180.99996948242188, a * 91.18402099609375, a * 191.99996948242188, a * 91.18402099609375);
        e.bezierCurveTo(a * 185.99996948242188, a * 102.18402099609375, a * 180.99996948242188, a * 106.18402099609375, a * 160.99996948242188, a * 124.18402099609375);
        e.bezierCurveTo(a * 190.99996948242188, a * 121.18402099609375, a * 199.99996948242188, a * 120.18402099609375, a * 207.99996948242188, a * 123.18402099609375);
        e.bezierCurveTo(a * 199.99996948242188, a * 129.18402099609375, a * 181.99996948242188, a * 132.18402099609375, a * 160.99996948242188, a * 135.18402099609375);
        e.bezierCurveTo(a * 179.99996948242188, a * 142.18402099609375, a * 193.99996948242188, a * 151.18402099609375, a * 196.99996948242188, a * 156.18402099609375);
        e.bezierCurveTo(a * 185.99996948242188, a * 156.18402099609375, a * 163.99996948242188, a * 149.18402099609375, a * 152.99996948242188, a * 147.18402099609375);
        e.bezierCurveTo(a * 157.99996948242188, a * 155.18402099609375, a * 165.99996948242188, a * 176.18402099609375, a * 169.99996948242188, a * 195.18402099609375);
        e.bezierCurveTo(a * 162.99996948242188, a * 190.18402099609375, a * 147.99996948242188, a * 167.18402099609375, a * 139.99996948242188, a * 153.18402099609375);
        e.bezierCurveTo(a * 137.99996948242188, a * 167.18402099609375, a * 126.99996948242188, a * 194.18402099609375, a * 119.99996948242188, a * 204.18402099609375);
        e.bezierCurveTo(a * 117.99996948242188, a * 186.18402099609375, a * 123.99996948242188, a * 165.18402099609375, a * 126.99996948242188, a * 149.18402099609375);
        e.bezierCurveTo(a * 110.99996948242188, a * 163.18402099609375, a * 103.99996948242188, a * 170.18402099609375, a * 82.99996948242188, a * 177.18402099609375);
        e.bezierCurveTo(a * 90.99996948242188, a * 162.18402099609375, a * 99.99996948242188, a * 153.18402099609375, a * 117.99996948242188, a * 140.18402099609375);
        e.bezierCurveTo(a * 97.99996948242188, a * 140.18402099609375, a * 83.99996948242188, a * 139.18402099609375, a * 65.99996948242188, a * 132.18402099609375);
        e.bezierCurveTo(a * 77.99996948242188, a * 127.18402099609375, a * 95.99996948242188, a * 127.18402099609375, a * 115.99996948242188, a * 127.18402099609375);
        e.bezierCurveTo(a * 91.99996948242188, a * 113.18402099609375, a * 84.99996948242188, a * 107.18402099609375, a * 76.99996948242188, a * 96.18402099609375);
        e.bezierCurveTo(a * 94.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 109.18402099609375, a * 123.99996948242188, a * 116.18402099609375);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131.99996948242188, a * 119.18402099609375);
        e.bezierCurveTo(a * 141.99996948242188, a * 119.18402099609375, a * 145.99996948242188, a * 116.18402099609375, a * 147.99996948242188, a * 109.18402099609375);
        e.bezierCurveTo(a * 151.99996948242188, a * 107.18402099609375, a * 159.99996948242188, a * 107.18402099609375, a * 156.99996948242188, a * 123.18402099609375);
        e.bezierCurveTo(a * 155.99996948242188, a * 140.18402099609375, a * 142.99996948242188, a * 149.18402099609375, a * 132.99996948242188, a * 147.18402099609375);
        e.bezierCurveTo(a * 119.99996948242188, a * 144.18402099609375, a * 113.99996948242188, a * 122.18402099609375, a * 131.99996948242188, a * 119.18402099609375);
        e.closePath();
        vt(e, c[4], c[5], a * 6);
        return d;
    }
    function Ym(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 198;
        f.height = b * 147;
        g.globalAlpha = c ? 0.5 : 1;
        g.translate(0, b * 6);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 44, b * 76);
        g.bezierCurveTo(b * 50, b * 82, b * 50, b * 82, b * 56, b * 88);
        g.bezierCurveTo(b * 59, b * 82, b * 59, b * 82, b * 62, b * 76);
        g.bezierCurveTo(b * 59, b * 71, b * 59, b * 71, b * 56, b * 66);
        g.bezierCurveTo(b * 59, b * 69, b * 59, b * 69, b * 62, b * 72);
        g.bezierCurveTo(b * 80, b * 48, b * 102, b * 50, b * 120, b * 62);
        g.bezierCurveTo(b * 127, b * 58, b * 127, b * 58, b * 134, b * 54);
        g.bezierCurveTo(b * 129, b * 60, b * 129, b * 60, b * 124, b * 66);
        g.bezierCurveTo(b * 129, b * 73, b * 129, b * 73, b * 134, b * 80);
        g.bezierCurveTo(b * 140, b * 74, b * 140, b * 74, b * 146, b * 68);
        g.bezierCurveTo(b * 142, b * 76, b * 142, b * 76, b * 138, b * 84);
        g.bezierCurveTo(b * 144, b * 90, b * 142, b * 90, b * 144, b * 90);
        g.bezierCurveTo(b * 136, b * 97, b * 136, b * 97, b * 128, b * 104);
        g.bezierCurveTo(b * 154, b * 110, b * 164, b * 90, b * 160, b * 80);
        g.bezierCurveTo(b * 138, b * 22, b * 148, b * 51, b * 136, b * 22);
        g.bezierCurveTo(b * 97, b * 24, b * 97, b * 24, b * 58, b * 26);
        g.bezierCurveTo(b * 47, b * 54, b * 36, b * 80, b * 36, b * 82);
        g.bezierCurveTo(b * 40, b * 108, b * 54, b * 104, b * 62, b * 104);
        g.bezierCurveTo(b * 46, b * 92, b * 54, b * 97, b * 46, b * 90);
        g.closePath();
        vt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 36, b * 80);
        g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
        g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
        g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
        g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
        g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
        g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
        g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
        g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
        g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
        g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
        g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
        g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
        g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
        g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
        g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
        g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
        g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
        g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
        g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
        g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
        g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
        g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
        g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
        g.closePath();
        vt(g, d[0]);
        g.globalAlpha = 1;
        g.translate(0, b * -6);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 36, b * 80);
        g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
        g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
        g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
        g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
        g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
        g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
        g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
        g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
        g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
        g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
        g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
        g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
        g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
        g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
        g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
        g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
        g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
        g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
        g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
        g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
        g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
        g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
        g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
        g.closePath();
        vt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 49, b * 98);
        g.bezierCurveTo(b * 96.5, b * 98, b * 96.5, b * 98, b * 144, b * 98);
        g.bezierCurveTo(b * 136.5, b * 102, b * 136.5, b * 102, b * 129, b * 106);
        g.bezierCurveTo(b * 103, b * 105.5, b * 103, b * 105.5, b * 77, b * 105);
        g.bezierCurveTo(b * 65, b * 105, b * 65, b * 105, b * 53, b * 105);
        g.closePath();
        vt(g, d[1]);
        g.globalAlpha = 0.5;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 54, b * 98);
        g.bezierCurveTo(b * 97, b * 98, b * 97, b * 98, b * 140, b * 98);
        g.bezierCurveTo(b * 134, b * 101, b * 134, b * 101, b * 128, b * 104);
        g.bezierCurveTo(b * 92, b * 104, b * 92, b * 104, b * 56, b * 104);
        g.closePath();
        vt(g, d[0]);
        g.globalAlpha = 1;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 118, b * 47);
        g.bezierCurveTo(b * 124.5, b * 43.5, b * 124.5, b * 43.5, b * 131, b * 40);
        g.bezierCurveTo(b * 128, b * 46, b * 128, b * 46, b * 125, b * 52);
        g.bezierCurveTo(b * 131, b * 57, b * 135, b * 64, b * 139, b * 73);
        g.bezierCurveTo(b * 142.5, b * 69.5, b * 142.5, b * 69.5, b * 146, b * 66);
        g.bezierCurveTo(b * 143.5, b * 72.5, b * 143.5, b * 72.5, b * 141, b * 79);
        g.bezierCurveTo(b * 142, b * 91, b * 141, b * 94, b * 132, b * 98);
        g.bezierCurveTo(b * 117, b * 102, b * 126, b * 108, b * 142, b * 102);
        g.bezierCurveTo(b * 159, b * 98, b * 164, b * 80, b * 162, b * 47);
        g.bezierCurveTo(b * 160, b * 19, b * 150, b * 6, b * 117, b * 4);
        g.bezierCurveTo(b * 44, b * 0, b * 35, b * 20, b * 33, b * 37);
        g.bezierCurveTo(b * 29, b * 69, b * 33, b * 88, b * 44, b * 96);
        g.bezierCurveTo(b * 64, b * 107, b * 70, b * 102, b * 54, b * 93);
        g.bezierCurveTo(b * 49, b * 88, b * 50, b * 82, b * 53, b * 77);
        g.bezierCurveTo(b * 51.5, b * 71, b * 51.5, b * 71, b * 50, b * 65);
        g.bezierCurveTo(b * 53, b * 68.5, b * 53, b * 68.5, b * 56, b * 72);
        g.bezierCurveTo(b * 59, b * 67.5, b * 59, b * 67.5, b * 62, b * 63);
        g.bezierCurveTo(b * 60.5, b * 59.5, b * 60.5, b * 59.5, b * 59, b * 56);
        g.bezierCurveTo(b * 62, b * 57, b * 62, b * 57, b * 65, b * 58);
        g.bezierCurveTo(b * 78, b * 35, b * 103, b * 36, b * 117, b * 47);
        g.closePath();
        vt(g, d[1], d[2], b * 6);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 62, b * 21);
        g.bezierCurveTo(b * 63, b * 34, b * 64, b * 37, b * 66, b * 40);
        g.bezierCurveTo(b * 54, b * 49, b * 53, b * 51, b * 48, b * 58);
        g.bezierCurveTo(b * 44, b * 51, b * 42, b * 43, b * 40, b * 36);
        g.bezierCurveTo(b * 47, b * 28, b * 52, b * 25, b * 61, b * 21);
        g.closePath();
        vt(g, d[4]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 60, b * 29);
        g.bezierCurveTo(b * 62, b * 25, b * 65, b * 24, b * 70, b * 23);
        vt(g, Zk, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 61, b * 37);
        g.bezierCurveTo(b * 63, b * 32, b * 66, b * 32, b * 71, b * 32);
        vt(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 52, b * 31);
        g.bezierCurveTo(b * 50, b * 26, b * 50, b * 25, b * 51, b * 23);
        vt(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 46, b * 35);
        g.bezierCurveTo(b * 44, b * 31, b * 43, b * 29, b * 45, b * 26);
        vt(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 58, b * 44);
        g.bezierCurveTo(b * 57, b * 48, b * 57, b * 50, b * 60, b * 52);
        vt(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 53, b * 48);
        g.bezierCurveTo(b * 52, b * 52, b * 52, b * 54, b * 55, b * 57);
        vt(g, Js, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 46, b * 41);
        g.bezierCurveTo(b * 41, b * 42, b * 39, b * 45, b * 38, b * 48);
        vt(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 48, b * 48);
        g.bezierCurveTo(b * 42, b * 51, b * 42, b * 53, b * 40, b * 55);
        vt(g, undefined, d[3], b * 4);
        if (e == 0) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 99, b * 101);
            g.bezierCurveTo(b * 118.6666259765625, b * 104.33331298828125, b * 124.6666259765625, b * 116.33331298828125, b * 112.6666259765625, b * 114.33331298828125);
            g.bezierCurveTo(b * 104.6666259765625, b * 112.33331298828125, b * 100.6666259765625, b * 105.33331298828125, b * 99.6666259765625, b * 101.33331298828125);
            vt(g, undefined, d[5], b * 6);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 97.6666259765625, b * 101.33331298828125);
            g.bezierCurveTo(b * 81.6666259765625, b * 106.33331298828125, b * 79.6666259765625, b * 114.33331298828125, b * 89.6666259765625, b * 114.33331298828125);
            g.bezierCurveTo(b * 95.6666259765625, b * 111.33331298828125, b * 95.6666259765625, b * 109.33331298828125, b * 98.6666259765625, b * 102.33331298828125);
            vt(g, Jl, d[5], b * 6);
        } else {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 103, b * 100.39999389648438);
            g.bezierCurveTo(b * 120, b * 106.39999389648438, b * 118, b * 107.39999389648438, b * 120, b * 111.39999389648438);
            vt(g, dg, d[5], b * 6);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 103, b * 100.39999389648438);
            g.bezierCurveTo(b * 90, b * 103.39999389648438, b * 89, b * 106.39999389648438, b * 87, b * 112.39999389648438);
            vt(g, vj, d[5], b * 6);
            ut(g, b * 86, b * 114.39999389648438, b * 4.5);
            vt(g, d[1], d[5], b * 6);
            ut(g, b * 121, b * 114.39999389648438, b * 4.5);
            vt(g, d[1], d[5], b * 6);
        }
        return f;
    }
    function Km(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 89;
        d.height = a * 89;
        e.save();
        e.translate(a * 44.5, a * 44.5);
        zt(e, 6, a * 40, a * 10);
        e.restore();
        vt(e, c[0], c[1], a * 5);
        e.save();
        e.translate(a * 44.5, a * 44.5);
        zt(e, 6, a * 25.11521001172521, a * 10);
        e.restore();
        vt(e, c[2], c[3], a * 5);
        return d;
    }
    function Vm() {
        new Date().getTime();
        function b(a) {
            var b = 0;
            for (var c = 0, d = 0; a.length > c; c++) {
                var e = a.charAt(c);
                if (e !== "_" && c !== 5) {
                    if (e === "1") {
                        b += Math.pow(2, d);
                    }
                    d++;
                }
            }
            return b;
        }
        ⲆⲆⵠᐃⲆⵠΔΔΔ();
        ᐃΔ[1026] = [ⲆⲆ.ⵠⵠⲆⲆⲆⵠᐃ, ⲆⲆ.ⲆⲆᐃΔⵠΔⲆ];
        ᐃΔ[1025] = [];
        ᐃΔ[1025][nr.ⵠᐃⵠ] = [];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("000_010_000")] = [ⲆⲆ.ΔⵠⵠⵠΔ, ⲆⲆ.ΔⲆⵠⵠⵠ];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("000_010_010")] = ᐃΔ[1025][nr.ⵠᐃⵠ][b("000_010_000")];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("000_011_000")] = ᐃΔ[1025][nr.ⵠᐃⵠ][b("000_010_000")];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("000_011_010")] = [ⲆⲆ.ᐃᐃⲆᐃⲆ, ⲆⲆ.ΔΔΔⲆΔ, ⲆⲆ.ΔⲆⵠⵠⵠ, ⲆⲆ.ΔⵠⵠⵠΔ, ⲆⲆ.ⵠⵠΔⲆⵠⵠᐃ, ⲆⲆ.ⲆΔⲆⵠⲆⵠⵠ, ⲆⲆ.ⵠⲆᐃΔᐃΔⲆ];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("000_011_011")] = [ⲆⲆ.Δⵠⵠᐃⵠⵠᐃ, ⲆⲆ.ᐃᐃⲆᐃⲆ, ⲆⲆ.ΔΔΔⲆΔ, ⲆⲆ.ΔⲆⵠⵠⵠ, ⲆⲆ.ΔⵠⵠⵠΔ, ⲆⲆ.ⵠⵠΔⲆⵠⵠᐃ, ⲆⲆ.ⲆΔⲆⵠⲆⵠⵠ, ⲆⲆ.ⵠⲆᐃΔᐃΔⲆ, ⲆⲆ.ⲆⲆⲆⵠΔ];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("000_110_000")] = [ⲆⲆ.ⲆⵠΔᐃⲆ, ⲆⲆ.ΔⲆⵠⵠⵠ];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("000_110_010")] = [ⲆⲆ.Δᐃᐃᐃᐃ, ⲆⲆ.ⲆⵠΔᐃⲆ, ⲆⲆ.ΔΔᐃⵠⲆ, ⲆⲆ.ΔⲆⵠⵠⵠ, ⲆⲆ.ΔⵠⵠⵠΔ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.Δⵠᐃⵠⵠ, ⲆⲆ.ⵠⵠΔᐃΔⵠᐃ];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("000_110_110")] = [ⲆⲆ.Δᐃᐃᐃᐃ, ⲆⲆ.ᐃΔⵠⵠᐃᐃᐃΔⲆ, ⲆⲆ.ⵠⵠⵠⵠΔⲆᐃ, ⲆⲆ.ⲆⵠΔᐃⲆ, ⲆⲆ.ΔΔᐃⵠⲆ, ⲆⲆ.ΔⲆⵠⵠⵠ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.Δⵠᐃⵠⵠ, ⲆⲆ.ⵠⵠΔᐃΔⵠᐃ];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("000_111_000")] = [ⲆⲆ.ⲆⵠΔᐃⲆ, ⲆⲆ.ΔΔᐃⵠⲆ, ⲆⲆ.ⵠΔΔⵠᐃᐃΔ, ⲆⲆ.ⲆⵠΔⲆΔᐃΔ];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("000_111_111")] = [ⲆⲆ.ⲆⵠΔᐃⲆ, ⲆⲆ.ⵠⵠⵠⵠΔⲆᐃ, ⲆⲆ.Δᐃᐃᐃᐃ, ⲆⲆ.ΔΔΔⲆΔ, ⲆⲆ.ᐃᐃⲆᐃⲆ, ⲆⲆ.Δⵠⵠᐃⵠⵠᐃ, ⲆⲆ.ᐃⲆΔΔᐃᐃⲆ];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("010_010_000")] = [ⲆⲆ.ΔⲆⵠⵠⵠ];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("010_010_010")] = [ⲆⲆ.ΔⵠΔΔⵠᐃΔ, ⲆⲆ.ΔⲆⵠⵠⵠ, ⲆⲆ.ΔⵠⵠⵠΔ];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("010_011_000")] = [ⲆⲆ.ΔΔⲆᐃΔ, ⲆⲆ.ΔⲆⵠⵠⵠ, ⲆⲆ.ΔⵠⵠⵠΔ, ⲆⲆ.Δⵠᐃⵠⵠ];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("010_110_000")] = [ⲆⲆ.ⲆⵠΔᐃⲆ, ⲆⲆ.ΔΔᐃⵠⲆ, ⲆⲆ.ΔⲆⵠⵠⵠ, ⲆⲆ.Δⵠᐃⵠⵠ, ⲆⲆ.ⵠⲆᐃⵠᐃ];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("010_110_110")] = [ⲆⲆ.ᐃᐃᐃᐃⵠ, ⲆⲆ.ΔΔⲆᐃΔ, ⲆⲆ.ᐃᐃⲆᐃⲆ, ⲆⲆ.ΔΔΔⲆΔ, ⲆⲆ.Δᐃᐃᐃᐃ, ⲆⲆ.ⵠⵠⵠⵠΔⲆᐃ, ⲆⲆ.ⲆⵠΔᐃⲆ, ⲆⲆ.ᐃⲆΔΔᐃᐃⲆ, ⲆⲆ.ᐃⵠᐃⵠⲆⲆᐃ, ⲆⲆ.ΔⵠΔΔⵠᐃΔ, ⲆⲆ.ΔΔᐃⵠⲆ, ⲆⲆ.ⵠΔΔⵠᐃᐃΔ, ⲆⲆ.ⲆⵠΔⲆΔᐃΔ, ⲆⲆ.ΔⲆⵠⵠⵠ, ⲆⲆ.ΔⵠⵠⵠΔ, ⲆⲆ.ⵠⵠΔⲆⵠⵠᐃ, ⲆⲆ.ⲆΔⲆⵠⲆⵠⵠ, ⲆⲆ.ⵠⲆᐃΔᐃΔⲆ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.Δⵠᐃⵠⵠ, ⲆⲆ.ⵠⲆᐃⵠᐃ];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("010_011_010")] = ᐃΔ[1025][nr.ⵠᐃⵠ][b("010_110_110")];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("010_011_011")] = ᐃΔ[1025][nr.ⵠᐃⵠ][b("010_110_110")];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("000_111_011")] = ᐃΔ[1025][nr.ⵠᐃⵠ][b("010_110_110")];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("010_110_010")] = ᐃΔ[1025][nr.ⵠᐃⵠ][b("010_110_110")];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("010_111_000")] = ᐃΔ[1025][nr.ⵠᐃⵠ][b("010_110_110")];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("010_111_010")] = ᐃΔ[1025][nr.ⵠᐃⵠ][b("010_110_110")];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("010_111_011")] = ᐃΔ[1025][nr.ⵠᐃⵠ][b("010_110_110")];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("010_111_110")] = ᐃΔ[1025][nr.ⵠᐃⵠ][b("010_110_110")];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("010_111_111")] = ᐃΔ[1025][nr.ⵠᐃⵠ][b("010_110_110")];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("000_111_110")] = ᐃΔ[1025][nr.ⵠᐃⵠ][b("010_110_110")];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("000_111_010")] = ᐃΔ[1025][nr.ⵠᐃⵠ][b("010_110_110")];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("011_011_000")] = [ⲆⲆ.ⵠᐃⵠᐃΔΔⵠ, ⲆⲆ.ᐃᐃᐃᐃⵠ, ⲆⲆ.ΔΔⲆᐃΔ, ⲆⲆ.ΔⲆⵠⵠⵠ, ⲆⲆ.ΔⵠⵠⵠΔ, ⲆⲆ.Δⵠᐃⵠⵠ];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("011_011_010")] = [ⲆⲆ.ⵠᐃⵠᐃΔΔⵠ, ⲆⲆ.ᐃᐃᐃᐃⵠ, ⲆⲆ.ΔΔⲆᐃΔ, ⲆⲆ.ⲆⵠΔᐃⲆ, ⲆⲆ.ΔΔᐃⵠⲆ, ⲆⲆ.ⵠΔΔⵠᐃᐃΔ, ⲆⲆ.ⲆⵠΔⲆΔᐃΔ, ⲆⲆ.ΔⲆⵠⵠⵠ, ⲆⲆ.ΔⵠⵠⵠΔ, ⲆⲆ.Δⵠᐃⵠⵠ, ⲆⲆ.ⵠⲆᐃⵠᐃ];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("011_011_011")] = [ⲆⲆ.ΔΔΔⲆΔ, ⲆⲆ.ᐃᐃⲆᐃⲆ, ⲆⲆ.Δⵠⵠᐃⵠⵠᐃ, ⲆⲆ.ΔΔⲆᐃΔ, ⲆⲆ.ᐃᐃᐃᐃⵠ, ⲆⲆ.ⵠᐃⵠᐃΔΔⵠ, ⲆⲆ.ᐃⵠᐃⵠⲆⲆᐃ];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("011_111_000")] = ᐃΔ[1025][nr.ⵠᐃⵠ][b("011_011_010")];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("011_111_010")] = [ⲆⲆ.ⵠᐃⵠᐃΔΔⵠ, ⲆⲆ.ᐃᐃᐃᐃⵠ, ⲆⲆ.ΔΔⲆᐃΔ, ⲆⲆ.ᐃᐃⲆᐃⲆ, ⲆⲆ.ΔΔΔⲆΔ, ⲆⲆ.Δᐃᐃᐃᐃ, ⲆⲆ.ⲆⵠΔᐃⲆ, ⲆⲆ.ᐃⲆΔΔᐃᐃⲆ, ⲆⲆ.ᐃⵠᐃⵠⲆⲆᐃ, ⲆⲆ.ΔⵠΔΔⵠᐃΔ, ⲆⲆ.ΔΔᐃⵠⲆ, ⲆⲆ.ⵠΔΔⵠᐃᐃΔ, ⲆⲆ.ⲆⵠΔⲆΔᐃΔ, ⲆⲆ.ΔⲆⵠⵠⵠ, ⲆⲆ.ΔⵠⵠⵠΔ, ⲆⲆ.ⵠⵠΔⲆⵠⵠᐃ, ⲆⲆ.ⲆΔⲆⵠⲆⵠⵠ, ⲆⲆ.ⵠⲆᐃΔᐃΔⲆ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.Δⵠᐃⵠⵠ, ⲆⲆ.ⵠⲆᐃⵠᐃ];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("011_111_011")] = ᐃΔ[1025][nr.ⵠᐃⵠ][b("011_111_010")];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("011_111_110")] = ᐃΔ[1025][nr.ⵠᐃⵠ][b("011_111_010")];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("011_111_111")] = [ⲆⲆ.ⵠᐃⵠᐃΔΔⵠ, ⲆⲆ.ᐃᐃᐃᐃⵠ, ⲆⲆ.ΔΔⲆᐃΔ, ⲆⲆ.Δⵠⵠᐃⵠⵠᐃ, ⲆⲆ.ᐃᐃⲆᐃⲆ, ⲆⲆ.ΔΔΔⲆΔ, ⲆⲆ.Δᐃᐃᐃᐃ, ⲆⲆ.ⵠⵠⵠⵠΔⲆᐃ, ⲆⲆ.ⲆⵠΔᐃⲆ, ⲆⲆ.ᐃⲆΔΔᐃᐃⲆ, ⲆⲆ.ᐃⵠᐃⵠⲆⲆᐃ, ⲆⲆ.ΔⵠΔΔⵠᐃΔ, ⲆⲆ.ΔΔᐃⵠⲆ, ⲆⲆ.ⵠΔΔⵠᐃᐃΔ, ⲆⲆ.ⲆⵠΔⲆΔᐃΔ, ⲆⲆ.ΔⲆⵠⵠⵠ, ⲆⲆ.ΔⵠⵠⵠΔ, ⲆⲆ.ⵠⵠΔⲆⵠⵠᐃ, ⲆⲆ.ⲆΔⲆⵠⲆⵠⵠ, ⲆⲆ.ⵠⲆᐃΔᐃΔⲆ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.Δⵠᐃⵠⵠ, ⲆⲆ.ⵠⲆᐃⵠᐃ];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("110_110_000")] = [ⲆⲆ.ⲆⲆⵠᐃΔᐃΔ, ⲆⲆ.ⲆⵠΔᐃⲆ, ⲆⲆ.ΔᐃΔⲆᐃⵠⲆ, ⲆⲆ.ΔΔᐃⵠⲆ, ⲆⲆ.ΔⲆⵠⵠⵠ, ⲆⲆ.ⵠⲆᐃⵠᐃ];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("110_110_010")] = [ⲆⲆ.Δᐃᐃᐃᐃ, ⲆⲆ.ⲆⲆⵠᐃΔᐃΔ, ⲆⲆ.ⲆⵠΔᐃⲆ, ⲆⲆ.ΔⵠΔΔⵠᐃΔ, ⲆⲆ.ΔΔᐃⵠⲆ, ⲆⲆ.ΔⲆⵠⵠⵠ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.ⵠⲆᐃⵠᐃ];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("110_110_110")] = [ⲆⲆ.Δᐃᐃᐃᐃ, ⲆⲆ.ⵠⵠⵠⵠΔⲆᐃ, ⲆⲆ.ⲆⲆⵠᐃΔᐃΔ, ⲆⲆ.ⲆⵠΔᐃⲆ, ⲆⲆ.ΔⵠΔΔⵠᐃΔ, ⲆⲆ.ΔΔᐃⵠⲆ, ⲆⲆ.ΔⲆⵠⵠⵠ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.ⵠⲆᐃⵠᐃ];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("110_111_000")] = [ⲆⲆ.ᐃᐃᐃᐃⵠ, ⲆⲆ.ΔΔⲆᐃΔ, ⲆⲆ.ⲆⲆⵠᐃΔᐃΔ, ⲆⲆ.ⲆⵠΔᐃⲆ, ⲆⲆ.ΔᐃΔⲆᐃⵠⲆ, ⲆⲆ.ᐃᐃⵠⲆⵠΔⲆ, ⲆⲆ.ΔΔᐃⵠⲆ, ⲆⲆ.ⵠΔΔⵠᐃᐃΔ, ⲆⲆ.ⲆⵠΔⲆΔᐃΔ, ⲆⲆ.ΔⲆⵠⵠⵠ, ⲆⲆ.ΔⵠⵠⵠΔ, ⲆⲆ.Δⵠᐃⵠⵠ, ⲆⲆ.ⵠⲆᐃⵠᐃ];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("110_111_110")] = [ⲆⲆ.ᐃᐃᐃᐃⵠ, ⲆⲆ.ΔΔⲆᐃΔ, ⲆⲆ.ᐃᐃⲆᐃⲆ, ⲆⲆ.ΔΔΔⲆΔ, ⲆⲆ.Δᐃᐃᐃᐃ, ⲆⲆ.ⵠⵠⵠⵠΔⲆᐃ, ⲆⲆ.ⲆⲆⵠᐃΔᐃΔ, ⲆⲆ.ⲆⵠΔᐃⲆ, ⲆⲆ.ᐃⲆΔΔᐃᐃⲆ, ⲆⲆ.ᐃᐃⵠⲆⵠΔⲆ, ⲆⲆ.ᐃⵠᐃⵠⲆⲆᐃ, ⲆⲆ.ΔⵠΔΔⵠᐃΔ, ⲆⲆ.ΔΔᐃⵠⲆ, ⲆⲆ.ⵠΔΔⵠᐃᐃΔ, ⲆⲆ.ⲆⵠΔⲆΔᐃΔ, ⲆⲆ.ΔⲆⵠⵠⵠ, ⲆⲆ.ΔⵠⵠⵠΔ, ⲆⲆ.ⵠⵠΔⲆⵠⵠᐃ, ⲆⲆ.ⲆΔⲆⵠⲆⵠⵠ, ⲆⲆ.ⵠⲆᐃΔᐃΔⲆ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.Δⵠᐃⵠⵠ, ⲆⲆ.ⵠⲆᐃⵠᐃ];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("110_111_111")] = ᐃΔ[1025][nr.ⵠᐃⵠ][b("110_111_110")];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("110_111_011")] = ᐃΔ[1025][nr.ⵠᐃⵠ][b("110_111_110")];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("110_111_010")] = ᐃΔ[1025][nr.ⵠᐃⵠ][b("110_111_110")];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("111_111_110")] = [ⲆⲆ.ⵠⲆᐃⵠᐃ, ⲆⲆ.Δⵠᐃⵠⵠ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.ⵠⲆᐃΔᐃΔⲆ, ⲆⲆ.ⲆΔⲆⵠⲆⵠⵠ, ⲆⲆ.ⵠⵠΔⲆⵠⵠᐃ, ⲆⲆ.ΔⵠⵠⵠΔ, ⲆⲆ.ΔⲆⵠⵠⵠ, ⲆⲆ.ⲆⵠΔⲆΔᐃΔ, ⲆⲆ.ⵠΔΔⵠᐃᐃΔ, ⲆⲆ.ΔΔᐃⵠⲆ, ⲆⲆ.ΔⵠΔΔⵠᐃΔ, ⲆⲆ.ᐃⵠᐃⵠⲆⲆᐃ, ⲆⲆ.ᐃᐃⵠⲆⵠΔⲆ, ⲆⲆ.ᐃⲆΔΔᐃᐃⲆ, ⲆⲆ.ⲆⵠΔᐃⲆ, ⲆⲆ.ⲆⲆⵠᐃΔᐃΔ, ⲆⲆ.Δᐃᐃᐃᐃ, ⲆⲆ.ΔΔΔⲆΔ, ⲆⲆ.ᐃᐃⲆᐃⲆ, ⲆⲆ.ΔΔⲆᐃΔ, ⲆⲆ.ᐃᐃᐃᐃⵠ, ⲆⲆ.ⵠᐃⵠᐃΔΔⵠ];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("111_111_011")] = ᐃΔ[1025][nr.ⵠᐃⵠ][b("111_111_110")];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("111_111_000")] = [ⲆⲆ.ΔᐃΔⲆᐃⵠⲆ, ⲆⲆ.ⲆⵠΔᐃⲆ, ⲆⲆ.ⲆⲆⵠᐃΔᐃΔ, ⲆⲆ.ΔΔⲆᐃΔ, ⲆⲆ.ᐃᐃᐃᐃⵠ, ⲆⲆ.ⵠᐃⵠᐃΔΔⵠ, ⲆⲆ.ᐃᐃⵠⲆⵠΔⲆ];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("111_111_111")] = [ⲆⲆ.ⵠᐃⵠᐃΔΔⵠ, ⲆⲆ.ᐃᐃᐃᐃⵠ, ⲆⲆ.ΔΔⲆᐃΔ, ⲆⲆ.Δⵠⵠᐃⵠⵠᐃ, ⲆⲆ.ᐃᐃⲆᐃⲆ, ⲆⲆ.ΔΔΔⲆΔ, ⲆⲆ.Δᐃᐃᐃᐃ, ⲆⲆ.ⵠⵠⵠⵠΔⲆᐃ, ⲆⲆ.ⲆⲆⵠᐃΔᐃΔ, ⲆⲆ.ⲆⵠΔᐃⲆ, ⲆⲆ.ᐃⲆΔΔᐃᐃⲆ, ⲆⲆ.ᐃⵠᐃⵠⲆⲆᐃ, ⲆⲆ.ΔⵠΔΔⵠᐃΔ, ⲆⲆ.ΔΔᐃⵠⲆ, ⲆⲆ.ⵠΔΔⵠᐃᐃΔ, ⲆⲆ.ⲆⵠΔⲆΔᐃΔ, ⲆⲆ.ΔⲆⵠⵠⵠ, ⲆⲆ.ΔⵠⵠⵠΔ, ⲆⲆ.ⵠⵠΔⲆⵠⵠᐃ, ⲆⲆ.ⲆΔⲆⵠⲆⵠⵠ, ⲆⲆ.ⵠⲆᐃΔᐃΔⲆ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.Δⵠᐃⵠⵠ, ⲆⲆ.ⵠⲆᐃⵠᐃ];
        ᐃΔ[1025][nr.ⵠᐃⵠ][b("111_111_010")] = ᐃΔ[1025][nr.ⵠᐃⵠ][b("111_111_110")];
        ᐃΔ[1025][nr.ᐃᐃⲆ] = [];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("000_010_000")] = [ⲆⲆ.ⲆᐃΔΔⲆ, ⲆⲆ.ᐃΔΔᐃΔ];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("000_010_010")] = ᐃΔ[1025][nr.ᐃᐃⲆ][b("000_010_000")];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("000_011_000")] = ᐃΔ[1025][nr.ᐃᐃⲆ][b("000_010_000")];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("000_011_010")] = [ⲆⲆ.ⲆΔⲆⲆⲆ, ⲆⲆ.ⲆⲆⲆᐃⲆ, ⲆⲆ.ᐃΔΔᐃΔ, ⲆⲆ.ⲆᐃΔΔⲆ, ⲆⲆ.ᐃⲆᐃᐃΔⵠᐃ, ⲆⲆ.ⲆΔᐃᐃⲆⵠᐃ, ⲆⲆ.ᐃᐃⵠⲆΔⵠᐃ];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("000_011_011")] = [ⲆⲆ.ⲆᐃⲆΔⵠΔΔ, ⲆⲆ.ⲆΔⲆⲆⲆ, ⲆⲆ.ⲆⲆⲆᐃⲆ, ⲆⲆ.ᐃΔΔᐃΔ, ⲆⲆ.ⲆᐃΔΔⲆ, ⲆⲆ.ᐃⲆᐃᐃΔⵠᐃ, ⲆⲆ.ⲆΔᐃᐃⲆⵠᐃ, ⲆⲆ.ᐃᐃⵠⲆΔⵠᐃ, ⲆⲆ.ⲆΔΔΔᐃ];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("000_110_000")] = [ⲆⲆ.ΔⲆᐃΔΔ, ⲆⲆ.ᐃΔΔᐃΔ];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("000_110_010")] = [ⲆⲆ.ᐃᐃᐃⵠⲆ, ⲆⲆ.ΔⲆᐃΔΔ, ⲆⲆ.ⵠⵠⲆΔⵠ, ⲆⲆ.ᐃΔΔᐃΔ, ⲆⲆ.ⲆᐃΔΔⲆ, ⲆⲆ.ⲆΔΔΔᐃ, ⲆⲆ.ⲆΔᐃΔΔ, ⲆⲆ.ⲆΔΔΔⵠⵠΔ];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("000_110_110")] = [ⲆⲆ.ᐃᐃᐃⵠⲆ, ⲆⲆ.ⲆⵠᐃⵠⵠⲆⵠΔⵠ, ⲆⲆ.ᐃⵠᐃΔⵠΔᐃ, ⲆⲆ.ΔⲆᐃΔΔ, ⲆⲆ.ⵠⵠⲆΔⵠ, ⲆⲆ.ᐃΔΔᐃΔ, ⲆⲆ.ⲆΔΔΔᐃ, ⲆⲆ.ⲆΔᐃΔΔ, ⲆⲆ.ⲆΔΔΔⵠⵠΔ];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("000_111_000")] = [ⲆⲆ.ΔⲆᐃΔΔ, ⲆⲆ.ⵠⵠⲆΔⵠ, ⲆⲆ.ⲆΔⵠⲆⵠᐃΔ, ⲆⲆ.ᐃⲆⲆΔᐃᐃⵠ];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("000_111_111")] = [ⲆⲆ.ΔⲆᐃΔΔ, ⲆⲆ.ᐃⵠᐃΔⵠΔᐃ, ⲆⲆ.ᐃᐃᐃⵠⲆ, ⲆⲆ.ⲆⲆⲆᐃⲆ, ⲆⲆ.ⲆΔⲆⲆⲆ, ⲆⲆ.ⲆᐃⲆΔⵠΔΔ, ⲆⲆ.ⲆΔᐃⵠᐃⵠⲆ];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("010_010_000")] = [ⲆⲆ.ᐃΔΔᐃΔ];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("010_010_010")] = [ⲆⲆ.ΔᐃᐃⵠⲆΔⲆ, ⲆⲆ.ᐃΔΔᐃΔ, ⲆⲆ.ⲆᐃΔΔⲆ];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("010_011_000")] = [ⲆⲆ.ⲆᐃΔᐃᐃ, ⲆⲆ.ᐃΔΔᐃΔ, ⲆⲆ.ⲆᐃΔΔⲆ, ⲆⲆ.ⲆΔᐃΔΔ];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("010_110_000")] = [ⲆⲆ.ΔⲆᐃΔΔ, ⲆⲆ.ⵠⵠⲆΔⵠ, ⲆⲆ.ᐃΔΔᐃΔ, ⲆⲆ.ⲆΔᐃΔΔ, ⲆⲆ.ΔⵠⲆⲆⵠ];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("010_110_110")] = [ⲆⲆ.ⵠᐃᐃΔⲆ, ⲆⲆ.ⲆᐃΔᐃᐃ, ⲆⲆ.ⲆΔⲆⲆⲆ, ⲆⲆ.ⲆⲆⲆᐃⲆ, ⲆⲆ.ᐃᐃᐃⵠⲆ, ⲆⲆ.ᐃⵠᐃΔⵠΔᐃ, ⲆⲆ.ΔⲆᐃΔΔ, ⲆⲆ.ⲆΔᐃⵠᐃⵠⲆ, ⲆⲆ.ⵠⵠⲆⵠᐃⲆⵠ, ⲆⲆ.ΔᐃᐃⵠⲆΔⲆ, ⲆⲆ.ⵠⵠⲆΔⵠ, ⲆⲆ.ⲆΔⵠⲆⵠᐃΔ, ⲆⲆ.ᐃⲆⲆΔᐃᐃⵠ, ⲆⲆ.ᐃΔΔᐃΔ, ⲆⲆ.ⲆᐃΔΔⲆ, ⲆⲆ.ᐃⲆᐃᐃΔⵠᐃ, ⲆⲆ.ⲆΔᐃᐃⲆⵠᐃ, ⲆⲆ.ᐃᐃⵠⲆΔⵠᐃ, ⲆⲆ.ⲆΔΔΔᐃ, ⲆⲆ.ⲆΔᐃΔΔ, ⲆⲆ.ΔⵠⲆⲆⵠ];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("010_011_010")] = ᐃΔ[1025][nr.ᐃᐃⲆ][b("010_110_110")];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("010_011_011")] = ᐃΔ[1025][nr.ᐃᐃⲆ][b("010_110_110")];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("000_111_011")] = ᐃΔ[1025][nr.ᐃᐃⲆ][b("010_110_110")];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("010_110_010")] = ᐃΔ[1025][nr.ᐃᐃⲆ][b("010_110_110")];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("010_111_000")] = ᐃΔ[1025][nr.ᐃᐃⲆ][b("010_110_110")];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("010_111_010")] = ᐃΔ[1025][nr.ᐃᐃⲆ][b("010_110_110")];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("010_111_011")] = ᐃΔ[1025][nr.ᐃᐃⲆ][b("010_110_110")];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("010_111_110")] = ᐃΔ[1025][nr.ᐃᐃⲆ][b("010_110_110")];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("010_111_111")] = ᐃΔ[1025][nr.ᐃᐃⲆ][b("010_110_110")];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("000_111_110")] = ᐃΔ[1025][nr.ᐃᐃⲆ][b("010_110_110")];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("000_111_010")] = ᐃΔ[1025][nr.ᐃᐃⲆ][b("010_110_110")];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("011_011_000")] = [ⲆⲆ.ᐃᐃⵠⵠⵠΔⵠ, ⲆⲆ.ⵠᐃᐃΔⲆ, ⲆⲆ.ⲆᐃΔᐃᐃ, ⲆⲆ.ᐃΔΔᐃΔ, ⲆⲆ.ⲆᐃΔΔⲆ, ⲆⲆ.ⲆΔᐃΔΔ];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("011_011_010")] = [ⲆⲆ.ᐃᐃⵠⵠⵠΔⵠ, ⲆⲆ.ⵠᐃᐃΔⲆ, ⲆⲆ.ⲆᐃΔᐃᐃ, ⲆⲆ.ΔⲆᐃΔΔ, ⲆⲆ.ⵠⵠⲆΔⵠ, ⲆⲆ.ⲆΔⵠⲆⵠᐃΔ, ⲆⲆ.ᐃⲆⲆΔᐃᐃⵠ, ⲆⲆ.ᐃΔΔᐃΔ, ⲆⲆ.ⲆᐃΔΔⲆ, ⲆⲆ.ⲆΔᐃΔΔ, ⲆⲆ.ΔⵠⲆⲆⵠ];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("011_011_011")] = [ⲆⲆ.ⲆⲆⲆᐃⲆ, ⲆⲆ.ⲆΔⲆⲆⲆ, ⲆⲆ.ⲆᐃⲆΔⵠΔΔ, ⲆⲆ.ⲆᐃΔᐃᐃ, ⲆⲆ.ⵠᐃᐃΔⲆ, ⲆⲆ.ᐃᐃⵠⵠⵠΔⵠ, ⲆⲆ.ⵠⵠⲆⵠᐃⲆⵠ];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("011_111_000")] = ᐃΔ[1025][nr.ᐃᐃⲆ][b("011_011_010")];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("011_111_010")] = [ⲆⲆ.ᐃᐃⵠⵠⵠΔⵠ, ⲆⲆ.ⵠᐃᐃΔⲆ, ⲆⲆ.ⲆᐃΔᐃᐃ, ⲆⲆ.ⲆΔⲆⲆⲆ, ⲆⲆ.ⲆⲆⲆᐃⲆ, ⲆⲆ.ᐃᐃᐃⵠⲆ, ⲆⲆ.ΔⲆᐃΔΔ, ⲆⲆ.ⲆΔᐃⵠᐃⵠⲆ, ⲆⲆ.ⵠⵠⲆⵠᐃⲆⵠ, ⲆⲆ.ΔᐃᐃⵠⲆΔⲆ, ⲆⲆ.ⵠⵠⲆΔⵠ, ⲆⲆ.ⲆΔⵠⲆⵠᐃΔ, ⲆⲆ.ᐃⲆⲆΔᐃᐃⵠ, ⲆⲆ.ᐃΔΔᐃΔ, ⲆⲆ.ⲆᐃΔΔⲆ, ⲆⲆ.ᐃⲆᐃᐃΔⵠᐃ, ⲆⲆ.ⲆΔᐃᐃⲆⵠᐃ, ⲆⲆ.ᐃᐃⵠⲆΔⵠᐃ, ⲆⲆ.ⲆΔΔΔᐃ, ⲆⲆ.ⲆΔᐃΔΔ, ⲆⲆ.ΔⵠⲆⲆⵠ];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("011_111_011")] = ᐃΔ[1025][nr.ᐃᐃⲆ][b("011_111_010")];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("011_111_110")] = ᐃΔ[1025][nr.ᐃᐃⲆ][b("011_111_010")];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("011_111_111")] = [ⲆⲆ.ᐃᐃⵠⵠⵠΔⵠ, ⲆⲆ.ⵠᐃᐃΔⲆ, ⲆⲆ.ⲆᐃΔᐃᐃ, ⲆⲆ.ⲆᐃⲆΔⵠΔΔ, ⲆⲆ.ⲆΔⲆⲆⲆ, ⲆⲆ.ⲆⲆⲆᐃⲆ, ⲆⲆ.ᐃᐃᐃⵠⲆ, ⲆⲆ.ᐃⵠᐃΔⵠΔᐃ, ⲆⲆ.ΔⲆᐃΔΔ, ⲆⲆ.ⲆΔᐃⵠᐃⵠⲆ, ⲆⲆ.ⵠⵠⲆⵠᐃⲆⵠ, ⲆⲆ.ΔᐃᐃⵠⲆΔⲆ, ⲆⲆ.ⵠⵠⲆΔⵠ, ⲆⲆ.ⲆΔⵠⲆⵠᐃΔ, ⲆⲆ.ᐃⲆⲆΔᐃᐃⵠ, ⲆⲆ.ᐃΔΔᐃΔ, ⲆⲆ.ⲆᐃΔΔⲆ, ⲆⲆ.ᐃⲆᐃᐃΔⵠᐃ, ⲆⲆ.ⲆΔᐃᐃⲆⵠᐃ, ⲆⲆ.ᐃᐃⵠⲆΔⵠᐃ, ⲆⲆ.ⲆΔΔΔᐃ, ⲆⲆ.ⲆΔᐃΔΔ, ⲆⲆ.ΔⵠⲆⲆⵠ];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("110_110_000")] = [ⲆⲆ.ᐃⵠⲆⵠΔᐃᐃ, ⲆⲆ.ΔⲆᐃΔΔ, ⲆⲆ.ⲆᐃᐃⲆΔᐃⵠ, ⲆⲆ.ⵠⵠⲆΔⵠ, ⲆⲆ.ᐃΔΔᐃΔ, ⲆⲆ.ΔⵠⲆⲆⵠ];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("110_110_010")] = [ⲆⲆ.ᐃᐃᐃⵠⲆ, ⲆⲆ.ᐃⵠⲆⵠΔᐃᐃ, ⲆⲆ.ΔⲆᐃΔΔ, ⲆⲆ.ΔᐃᐃⵠⲆΔⲆ, ⲆⲆ.ⵠⵠⲆΔⵠ, ⲆⲆ.ᐃΔΔᐃΔ, ⲆⲆ.ⲆΔΔΔᐃ, ⲆⲆ.ΔⵠⲆⲆⵠ];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("110_110_110")] = [ⲆⲆ.ᐃᐃᐃⵠⲆ, ⲆⲆ.ᐃⵠᐃΔⵠΔᐃ, ⲆⲆ.ᐃⵠⲆⵠΔᐃᐃ, ⲆⲆ.ΔⲆᐃΔΔ, ⲆⲆ.ΔᐃᐃⵠⲆΔⲆ, ⲆⲆ.ⵠⵠⲆΔⵠ, ⲆⲆ.ᐃΔΔᐃΔ, ⲆⲆ.ⲆΔΔΔᐃ, ⲆⲆ.ΔⵠⲆⲆⵠ];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("110_111_000")] = [ⲆⲆ.ⵠᐃᐃΔⲆ, ⲆⲆ.ⲆᐃΔᐃᐃ, ⲆⲆ.ᐃⵠⲆⵠΔᐃᐃ, ⲆⲆ.ΔⲆᐃΔΔ, ⲆⲆ.ⲆᐃᐃⲆΔᐃⵠ, ⲆⲆ.ᐃᐃⲆⲆᐃⵠΔ, ⲆⲆ.ⵠⵠⲆΔⵠ, ⲆⲆ.ⲆΔⵠⲆⵠᐃΔ, ⲆⲆ.ᐃⲆⲆΔᐃᐃⵠ, ⲆⲆ.ᐃΔΔᐃΔ, ⲆⲆ.ⲆᐃΔΔⲆ, ⲆⲆ.ⲆΔᐃΔΔ, ⲆⲆ.ΔⵠⲆⲆⵠ];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("110_111_110")] = [ⲆⲆ.ⵠᐃᐃΔⲆ, ⲆⲆ.ⲆᐃΔᐃᐃ, ⲆⲆ.ⲆΔⲆⲆⲆ, ⲆⲆ.ⲆⲆⲆᐃⲆ, ⲆⲆ.ᐃᐃᐃⵠⲆ, ⲆⲆ.ᐃⵠᐃΔⵠΔᐃ, ⲆⲆ.ᐃⵠⲆⵠΔᐃᐃ, ⲆⲆ.ΔⲆᐃΔΔ, ⲆⲆ.ⲆΔᐃⵠᐃⵠⲆ, ⲆⲆ.ᐃᐃⲆⲆᐃⵠΔ, ⲆⲆ.ⵠⵠⲆⵠᐃⲆⵠ, ⲆⲆ.ΔᐃᐃⵠⲆΔⲆ, ⲆⲆ.ⵠⵠⲆΔⵠ, ⲆⲆ.ⲆΔⵠⲆⵠᐃΔ, ⲆⲆ.ᐃⲆⲆΔᐃᐃⵠ, ⲆⲆ.ᐃΔΔᐃΔ, ⲆⲆ.ⲆᐃΔΔⲆ, ⲆⲆ.ᐃⲆᐃᐃΔⵠᐃ, ⲆⲆ.ⲆΔᐃᐃⲆⵠᐃ, ⲆⲆ.ᐃᐃⵠⲆΔⵠᐃ, ⲆⲆ.ⲆΔΔΔᐃ, ⲆⲆ.ⲆΔᐃΔΔ, ⲆⲆ.ΔⵠⲆⲆⵠ];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("110_111_111")] = ᐃΔ[1025][nr.ᐃᐃⲆ][b("110_111_110")];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("110_111_011")] = ᐃΔ[1025][nr.ᐃᐃⲆ][b("110_111_110")];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("110_111_010")] = ᐃΔ[1025][nr.ᐃᐃⲆ][b("110_111_110")];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("111_111_110")] = [ⲆⲆ.ΔⵠⲆⲆⵠ, ⲆⲆ.ⲆΔᐃΔΔ, ⲆⲆ.ⲆΔΔΔᐃ, ⲆⲆ.ᐃᐃⵠⲆΔⵠᐃ, ⲆⲆ.ⲆΔᐃᐃⲆⵠᐃ, ⲆⲆ.ᐃⲆᐃᐃΔⵠᐃ, ⲆⲆ.ⲆᐃΔΔⲆ, ⲆⲆ.ᐃΔΔᐃΔ, ⲆⲆ.ᐃⲆⲆΔᐃᐃⵠ, ⲆⲆ.ⲆΔⵠⲆⵠᐃΔ, ⲆⲆ.ⵠⵠⲆΔⵠ, ⲆⲆ.ΔᐃᐃⵠⲆΔⲆ, ⲆⲆ.ⵠⵠⲆⵠᐃⲆⵠ, ⲆⲆ.ᐃᐃⲆⲆᐃⵠΔ, ⲆⲆ.ⲆΔᐃⵠᐃⵠⲆ, ⲆⲆ.ΔⲆᐃΔΔ, ⲆⲆ.ᐃⵠⲆⵠΔᐃᐃ, ⲆⲆ.ᐃᐃᐃⵠⲆ, ⲆⲆ.ⲆⲆⲆᐃⲆ, ⲆⲆ.ⲆΔⲆⲆⲆ, ⲆⲆ.ⲆᐃΔᐃᐃ, ⲆⲆ.ⵠᐃᐃΔⲆ, ⲆⲆ.ᐃᐃⵠⵠⵠΔⵠ];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("111_111_011")] = ᐃΔ[1025][nr.ᐃᐃⲆ][b("111_111_110")];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("111_111_000")] = [ⲆⲆ.ⲆᐃᐃⲆΔᐃⵠ, ⲆⲆ.ΔⲆᐃΔΔ, ⲆⲆ.ᐃⵠⲆⵠΔᐃᐃ, ⲆⲆ.ⲆᐃΔᐃᐃ, ⲆⲆ.ⵠᐃᐃΔⲆ, ⲆⲆ.ᐃᐃⵠⵠⵠΔⵠ, ⲆⲆ.ᐃᐃⲆⲆᐃⵠΔ];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("111_111_111")] = [ⲆⲆ.ᐃᐃⵠⵠⵠΔⵠ, ⲆⲆ.ⵠᐃᐃΔⲆ, ⲆⲆ.ⲆᐃΔᐃᐃ, ⲆⲆ.ⲆᐃⲆΔⵠΔΔ, ⲆⲆ.ⲆΔⲆⲆⲆ, ⲆⲆ.ⲆⲆⲆᐃⲆ, ⲆⲆ.ᐃᐃᐃⵠⲆ, ⲆⲆ.ᐃⵠᐃΔⵠΔᐃ, ⲆⲆ.ᐃⵠⲆⵠΔᐃᐃ, ⲆⲆ.ΔⲆᐃΔΔ, ⲆⲆ.ⲆΔᐃⵠᐃⵠⲆ, ⲆⲆ.ⵠⵠⲆⵠᐃⲆⵠ, ⲆⲆ.ΔᐃᐃⵠⲆΔⲆ, ⲆⲆ.ⵠⵠⲆΔⵠ, ⲆⲆ.ⲆΔⵠⲆⵠᐃΔ, ⲆⲆ.ᐃⲆⲆΔᐃᐃⵠ, ⲆⲆ.ᐃΔΔᐃΔ, ⲆⲆ.ⲆᐃΔΔⲆ, ⲆⲆ.ᐃⲆᐃᐃΔⵠᐃ, ⲆⲆ.ⲆΔᐃᐃⲆⵠᐃ, ⲆⲆ.ᐃᐃⵠⲆΔⵠᐃ, ⲆⲆ.ⲆΔΔΔᐃ, ⲆⲆ.ⲆΔᐃΔΔ, ⲆⲆ.ΔⵠⲆⲆⵠ];
        ᐃΔ[1025][nr.ᐃᐃⲆ][b("111_111_010")] = ᐃΔ[1025][nr.ᐃᐃⲆ][b("111_111_110")];
        ᐃΔ[1024] = [];
        ᐃΔ[1024][nr.ⵠᐃⵠ] = [];
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("000_010_000")] = ⲆⲆ.ⵠⲆΔⵠⵠΔⲆ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("000_010_010")] = ⲆⲆ.ᐃΔⲆⵠΔⲆΔ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("000_011_000")] = ⲆⲆ.ᐃⲆⲆΔⲆΔΔ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("000_011_010")] = ⲆⲆ.ⵠⵠΔᐃᐃⵠⵠ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("000_011_011")] = ⲆⲆ.ⵠΔᐃᐃᐃᐃⲆ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("000_110_000")] = ⲆⲆ.ᐃⵠⵠΔⲆᐃⵠ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("000_110_010")] = ⲆⲆ.ⲆΔΔⲆⲆⲆⵠ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("000_110_110")] = ⲆⲆ.ᐃⲆΔⲆⲆᐃΔ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("000_111_000")] = ⲆⲆ.ᐃΔⵠⲆⲆᐃᐃ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("000_111_010")] = ⲆⲆ.ⲆⵠⵠⵠΔⵠⲆ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("000_111_011")] = ⲆⲆ.ⵠⵠᐃⲆⲆᐃⲆ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("000_111_110")] = ⲆⲆ.ⲆⲆΔⲆⵠⵠᐃ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("000_111_111")] = ⲆⲆ.ⲆⵠΔⵠΔⲆᐃ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("010_010_000")] = ⲆⲆ.ⵠᐃⵠΔⵠΔⵠ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("010_010_010")] = ⲆⲆ.ΔΔⵠΔⵠᐃᐃ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("010_011_000")] = ⲆⲆ.ⵠⲆⵠⲆΔⵠⵠ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("010_011_010")] = ⲆⲆ.ΔΔᐃⵠΔᐃⲆ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("010_011_011")] = ⲆⲆ.ⵠⵠᐃᐃⲆⲆⲆ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("010_110_000")] = ⲆⲆ.ΔⲆⲆΔⵠΔⵠ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("010_110_010")] = ⲆⲆ.ⲆΔΔⲆⵠᐃⲆ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("010_110_110")] = ⲆⲆ.ⵠΔΔⵠⲆⲆΔ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("010_111_000")] = ⲆⲆ.ⲆⲆᐃᐃⲆⲆΔ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("010_111_010")] = ⲆⲆ.ⵠⲆᐃΔᐃΔⵠ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("010_111_011")] = ⲆⲆ.ⵠΔᐃⲆΔⲆⵠ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("010_111_110")] = ⲆⲆ.ΔⲆⵠⲆⵠⵠΔ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("010_111_111")] = ⲆⲆ.ⵠᐃᐃᐃⵠⵠⵠ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("011_011_000")] = ⲆⲆ.ⲆᐃⲆΔΔᐃᐃ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("011_011_010")] = ⲆⲆ.ᐃΔᐃΔⲆⵠΔ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("011_011_011")] = ⲆⲆ.ΔΔΔⲆⵠⵠΔ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("011_111_000")] = ⲆⲆ.ᐃΔΔΔⲆᐃᐃ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("011_111_010")] = ⲆⲆ.ΔⲆΔᐃⲆΔᐃ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("011_111_011")] = ⲆⲆ.ᐃᐃⵠᐃⲆΔᐃ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("011_111_110")] = ⲆⲆ.ΔⵠⲆⲆΔⲆᐃ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("011_111_111")] = ⲆⲆ.ᐃⲆΔⵠᐃⲆⲆ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("110_110_000")] = ⲆⲆ.ΔᐃⲆΔⵠⲆⵠ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("110_110_010")] = ⲆⲆ.ⵠᐃⲆΔⲆⵠᐃ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("110_110_110")] = ⲆⲆ.ⵠⲆⵠⵠᐃΔᐃ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("110_111_000")] = ⲆⲆ.ⲆⲆᐃⲆΔⲆⵠ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("110_111_010")] = ⲆⲆ.ᐃⲆᐃΔΔⲆⵠ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("110_111_011")] = ⲆⲆ.ⲆᐃⲆᐃⵠΔⵠ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("110_111_110")] = ⲆⲆ.ᐃᐃⲆΔᐃⲆⵠ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("110_111_111")] = ⲆⲆ.ΔᐃᐃΔΔⲆⵠΔΔ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("111_111_011")] = ⲆⲆ.ⲆᐃⲆΔᐃⲆⲆ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("111_111_110")] = ⲆⲆ.ΔⵠΔⲆⲆⵠᐃᐃΔ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("111_111_011")] = ⲆⲆ.ⲆᐃⲆΔᐃⲆⲆ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("111_111_000")] = ⲆⲆ.ᐃⲆΔⵠⲆΔΔⲆⲆ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("111_111_111")] = ⲆⲆ.ᐃⲆⵠᐃⵠⲆⵠᐃⲆ;
        ᐃΔ[1024][nr.ⵠᐃⵠ][b("111_111_010")] = ⲆⲆ.ⲆⵠⵠᐃⵠⲆⲆΔⵠ;
        ᐃΔ[1024][nr.ᐃᐃⲆ] = [];
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("000_010_000")] = ⲆⲆ.ΔⵠᐃΔᐃᐃⲆⲆⲆ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("000_010_010")] = ⲆⲆ.ⵠⵠⲆⲆᐃΔⲆⵠⵠ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("000_011_000")] = ⲆⲆ.ΔᐃᐃΔⵠᐃⵠΔᐃ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("000_011_010")] = ⲆⲆ.ᐃᐃᐃⵠΔᐃᐃⲆⵠ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("000_011_011")] = ⲆⲆ.ⲆᐃΔᐃᐃⲆⵠⲆᐃ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("000_110_000")] = ⲆⲆ.ⵠᐃᐃⵠᐃΔᐃⵠⲆ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("000_110_010")] = ⲆⲆ.ΔᐃᐃΔⲆⲆᐃΔⵠ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("000_110_110")] = ⲆⲆ.ⲆⲆⲆᐃΔⲆⵠⵠΔ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("000_111_000")] = ⲆⲆ.ΔᐃᐃΔΔⵠⲆⲆⵠ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("000_111_010")] = ⲆⲆ.ΔⵠⵠᐃΔᐃⲆΔΔ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("000_111_011")] = ⲆⲆ.ⲆⲆᐃΔᐃⲆⵠⵠᐃ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("000_111_110")] = ⲆⲆ.ⲆⵠᐃΔⵠΔΔΔᐃ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("000_111_111")] = ⲆⲆ.ⲆⵠΔⵠᐃᐃᐃⵠⵠ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("010_010_000")] = ⲆⲆ.ⵠⵠⲆΔⲆᐃⲆⵠΔ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("010_010_010")] = ⲆⲆ.ᐃΔⵠⵠⲆΔⵠᐃⲆ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("010_011_000")] = ⲆⲆ.ΔΔᐃΔᐃⵠΔᐃⲆ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("010_011_010")] = ⲆⲆ.ⵠⵠⵠᐃⵠΔᐃⲆΔ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("010_011_011")] = ⲆⲆ.ⲆΔᐃᐃᐃΔⲆᐃΔ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("010_110_000")] = ⲆⲆ.ⵠᐃⵠⲆᐃᐃᐃⲆΔ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("010_110_010")] = ⲆⲆ.ΔⵠᐃᐃⲆⲆΔⲆⵠ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("010_110_110")] = ⲆⲆ.ⵠⲆⲆⲆⵠᐃΔⵠᐃ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("010_111_000")] = ⲆⲆ.ΔΔᐃⵠⵠⲆᐃⵠⲆ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("010_111_010")] = ⲆⲆ.ᐃᐃᐃᐃᐃΔΔΔΔ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("010_111_011")] = ⲆⲆ.ΔⵠⵠⵠⵠᐃⲆⵠⵠ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("010_111_110")] = ⲆⲆ.ᐃⵠᐃⲆⵠⲆⵠΔⵠ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("010_111_111")] = ⲆⲆ.ΔⵠᐃⵠⵠⲆᐃⵠᐃ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("011_011_000")] = ⲆⲆ.ⲆⲆΔᐃⵠΔᐃᐃⲆ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("011_011_010")] = ⲆⲆ.ⵠΔⲆᐃⲆⲆⵠΔⵠ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("011_011_011")] = ⲆⲆ.ΔⲆⲆΔΔⲆΔⲆⲆ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("011_111_000")] = ⲆⲆ.ⲆΔΔⲆΔⵠⲆᐃⲆ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("011_111_010")] = ⲆⲆ.ΔⲆⲆᐃΔΔΔΔⲆ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("011_111_011")] = ⲆⲆ.ⲆᐃᐃΔⵠΔⵠⲆⵠ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("011_111_110")] = ⲆⲆ.ⲆⵠᐃᐃⲆΔΔΔⵠ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("011_111_111")] = ⲆⲆ.ⵠΔᐃⵠΔΔⵠⲆⵠ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("110_110_000")] = ⲆⲆ.ΔᐃⵠⲆⵠᐃΔⲆᐃ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("110_110_010")] = ⲆⲆ.ΔᐃⲆΔᐃⲆⲆⲆΔ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("110_110_110")] = ⲆⲆ.ᐃΔⵠⲆᐃⲆⲆᐃⵠ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("110_111_000")] = ⲆⲆ.ⵠⵠᐃⵠⵠᐃⵠⲆⵠ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("110_111_010")] = ⲆⲆ.ⵠⲆΔΔⲆΔⲆᐃΔ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("110_111_011")] = ⲆⲆ.ⵠⲆⵠΔΔⲆᐃΔⵠ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("110_111_110")] = ⲆⲆ.ᐃⵠΔⲆⵠⲆⲆⲆᐃ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("110_111_111")] = ⲆⲆ.ΔⵠⲆᐃΔΔᐃᐃⲆ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("111_111_011")] = ⲆⲆ.ⲆⲆⲆⵠⲆⵠᐃ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("111_111_110")] = ⲆⲆ.ΔⵠⲆⵠᐃΔᐃΔⲆ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("111_111_011")] = ⲆⲆ.ⲆⲆⲆⵠⲆⵠᐃ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("111_111_000")] = ⲆⲆ.ⲆⲆΔΔᐃⵠⵠΔⲆ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("111_111_111")] = ⲆⲆ.ⲆΔⲆⲆⵠᐃⲆΔΔ;
        ᐃΔ[1024][nr.ᐃᐃⲆ][b("111_111_010")] = ⲆⲆ.ⲆᐃᐃᐃᐃᐃᐃⵠΔ;
        ᐃΔ[32] = [];
        ᐃΔ[32][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃᐃΔᐃⵠⲆⲆ;
        ᐃΔ[32][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠⵠⵠⵠⲆⲆᐃ;
        ᐃΔ[205] = [];
        ᐃΔ[205][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆⵠⵠⲆᐃⲆΔ;
        ᐃΔ[205][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠᐃᐃⲆⲆΔᐃ;
        ᐃΔ[957] = [];
        ᐃΔ[957][nr.ⵠᐃⵠ] = ⲆⲆ.ΔΔᐃᐃᐃⲆΔ;
        ᐃΔ[957][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆⵠΔⵠⵠⵠⲆ;
        ᐃΔ[207] = [];
        ᐃΔ[207][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆᐃⲆΔᐃⲆⵠ;
        ᐃΔ[207][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃⲆⵠΔΔΔⲆ;
        ᐃΔ[954] = [];
        ᐃΔ[954][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃⲆⲆᐃΔⵠᐃ;
        ᐃΔ[954][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃⲆΔⲆⵠⲆⲆ;
        ᐃΔ[958] = [];
        ᐃΔ[958][nr.ⵠᐃⵠ] = ⲆⲆ.ΔᐃᐃⲆⲆᐃⲆ;
        ᐃΔ[958][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠᐃⲆΔⵠᐃⵠ;
        ᐃΔ[209] = [];
        ᐃΔ[209][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆᐃᐃᐃΔᐃⲆ;
        ᐃΔ[209][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃΔᐃⲆᐃᐃⲆ;
        ᐃΔ[971] = [];
        ᐃΔ[971][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆΔⲆⲆΔΔⵠ;
        ᐃΔ[971][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃᐃᐃⲆⲆⵠⲆ;
        ᐃΔ[211] = [];
        ᐃΔ[211][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆΔⲆᐃⲆΔᐃ;
        ᐃΔ[211][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠᐃⵠⲆᐃⵠΔ;
        ᐃΔ[986] = [];
        ᐃΔ[986][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃᐃⵠᐃⵠⵠᐃ;
        ᐃΔ[986][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃΔⵠⵠΔΔΔ;
        ᐃΔ[989] = [];
        ᐃΔ[989][nr.ⵠᐃⵠ] = [ⲆⲆ.ⵠⲆΔⵠΔᐃⵠ];
        ᐃΔ[989][nr.ᐃᐃⲆ] = [ⲆⲆ.ᐃᐃΔⲆΔⲆⲆ];
        ᐃΔ[217] = [];
        ᐃΔ[217][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠⲆΔᐃⲆⵠⲆ;
        ᐃΔ[217][nr.ᐃᐃⲆ] = ⲆⲆ.ΔᐃΔⲆⲆΔΔ;
        ᐃΔ[219] = [];
        ᐃΔ[219][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠⲆⲆᐃᐃᐃᐃ;
        ᐃΔ[219][nr.ᐃᐃⲆ] = ⲆⲆ.ΔⵠΔᐃᐃᐃⵠ;
        ᐃΔ[218] = [];
        ᐃΔ[218][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠⲆⲆⵠⵠΔᐃ;
        ᐃΔ[218][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠᐃΔΔᐃⲆⵠ;
        ᐃΔ[212] = [];
        ᐃΔ[212][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃᐃᐃΔᐃΔⲆ;
        ᐃΔ[212][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃⵠΔΔᐃΔΔ;
        ᐃΔ[213] = [];
        ᐃΔ[213][nr.ⵠᐃⵠ] = ⲆⲆ.ΔⵠᐃⲆⵠΔⵠ;
        ᐃΔ[213][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠΔⲆⵠⲆⵠⵠ;
        ᐃΔ[214] = [];
        ᐃΔ[214][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃᐃᐃⵠᐃΔⲆ;
        ᐃΔ[214][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃⲆΔⲆΔᐃᐃ;
        ᐃΔ[215] = [];
        ᐃΔ[215][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠΔⵠⲆᐃⲆᐃ;
        ᐃΔ[215][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠⲆᐃΔΔΔΔ;
        ᐃΔ[216] = [];
        ᐃΔ[216][nr.ⵠᐃⵠ] = ⲆⲆ.ΔⲆΔᐃⲆⲆΔ;
        ᐃΔ[216][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠᐃⲆⲆⲆΔΔ;
        ᐃΔ[220] = [];
        ᐃΔ[220][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃᐃⲆΔⲆⵠᐃ;
        ᐃΔ[220][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠΔⲆᐃΔⲆⵠ;
        ᐃΔ[1020] = [];
        ᐃΔ[1020][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆΔᐃⵠᐃⵠⵠ;
        ᐃΔ[1020][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠⵠΔⲆⲆⵠΔ;
        ᐃΔ[1021] = [];
        ᐃΔ[1021][nr.ⵠᐃⵠ] = ⲆⲆ.ΔⲆᐃⵠΔᐃⲆ;
        ᐃΔ[1021][nr.ᐃᐃⲆ] = ⲆⲆ.ΔᐃᐃⲆΔᐃⲆ;
        ᐃΔ[39] = [];
        ᐃΔ[39][nr.ⵠᐃⵠ] = ⲆⲆ.ΔⵠⲆⲆⲆⵠⲆ;
        ᐃΔ[39][nr.ᐃᐃⲆ] = ⲆⲆ.ΔⲆΔᐃᐃᐃΔ;
        ᐃΔ[1022] = ⲆⲆ.ⲆᐃΔᐃⲆᐃᐃ;
        ᐃΔ[1023] = ⲆⲆ.ᐃᐃⲆⵠⵠⲆⵠ;
        ᐃΔ[1041] = [];
        ᐃΔ[1041][nr.ⵠᐃⵠ] = [];
        ᐃΔ[1041][nr.ᐃᐃⲆ] = [];
        ᐃΔ[1041][nr.ⵠᐃⵠ].push(ⲆⲆ.ⵠΔⵠⲆᐃⲆΔ);
        ᐃΔ[1041][nr.ⵠᐃⵠ].push(ⲆⲆ.ΔΔⵠᐃⲆᐃᐃ);
        ᐃΔ[1041][nr.ⵠᐃⵠ].push(ⲆⲆ.ⵠⲆⵠᐃⵠⲆᐃ);
        ᐃΔ[1041][nr.ᐃᐃⲆ].push(ⲆⲆ.ᐃΔᐃⲆΔᐃⲆ);
        ᐃΔ[1041][nr.ᐃᐃⲆ].push(ⲆⲆ.ⲆᐃᐃΔΔⲆⵠ);
        ᐃΔ[1041][nr.ᐃᐃⲆ].push(ⲆⲆ.ⲆΔΔⲆⲆᐃΔ);
        ᐃΔ[244] = [];
        ᐃΔ[244][nr.ⵠᐃⵠ] = [];
        ᐃΔ[244][nr.ᐃᐃⲆ] = [];
        ᐃΔ[244][nr.ⵠᐃⵠ].push(ⲆⲆ.ⵠⲆⵠᐃΔᐃΔ);
        ᐃΔ[244][nr.ⵠᐃⵠ].push(ⲆⲆ.ⵠⲆΔⲆᐃⵠᐃ);
        ᐃΔ[244][nr.ⵠᐃⵠ].push(ⲆⲆ.ΔⲆᐃΔⵠⵠΔ);
        ᐃΔ[244][nr.ᐃᐃⲆ].push(ⲆⲆ.ᐃᐃΔΔⵠᐃⲆ);
        ᐃΔ[244][nr.ᐃᐃⲆ].push(ⲆⲆ.ⵠΔⵠⲆᐃⵠⲆ);
        ᐃΔ[244][nr.ᐃᐃⲆ].push(ⲆⲆ.ᐃᐃⲆΔΔⲆⵠ);
        ᐃΔ[1052] = [];
        ᐃΔ[1052][nr.ⵠᐃⵠ] = [];
        ᐃΔ[1052][nr.ᐃᐃⲆ] = [];
        ᐃΔ[1052][nr.ⵠᐃⵠ].push(ⲆⲆ.ⵠΔΔᐃⵠⵠⲆ);
        ᐃΔ[1052][nr.ⵠᐃⵠ].push(ⲆⲆ.ⵠⲆΔΔΔᐃΔ);
        ᐃΔ[1052][nr.ⵠᐃⵠ].push(ⲆⲆ.ⲆⵠΔⵠΔᐃᐃ);
        ᐃΔ[1052][nr.ⵠᐃⵠ].push(ⲆⲆ.ΔΔⲆΔΔᐃΔ);
        ᐃΔ[1052][nr.ⵠᐃⵠ].push(ⲆⲆ.ⲆⲆΔⵠⲆⵠⲆ);
        ᐃΔ[1052][nr.ᐃᐃⲆ].push(ⲆⲆ.ⵠΔⵠᐃⲆΔΔ);
        ᐃΔ[1052][nr.ᐃᐃⲆ].push(ⲆⲆ.ⵠⲆΔΔⵠΔⵠ);
        ᐃΔ[1052][nr.ᐃᐃⲆ].push(ⲆⲆ.ᐃⲆᐃΔΔⲆⲆ);
        ᐃΔ[1052][nr.ᐃᐃⲆ].push(ⲆⲆ.ⵠᐃⵠⵠⵠᐃⲆ);
        ᐃΔ[1052][nr.ᐃᐃⲆ].push(ⲆⲆ.ΔᐃⲆΔⲆⵠᐃ);
        ᐃΔ[450] = [];
        ᐃΔ[450][nr.ⵠᐃⵠ] = ⲆⲆ.ΔⲆⲆⵠⲆΔⲆ;
        ᐃΔ[450][nr.ᐃᐃⲆ] = ⲆⲆ.ΔⲆⵠᐃᐃⲆΔ;
        ᐃΔ[453] = [];
        ᐃΔ[453][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆⲆΔᐃΔΔⵠ;
        ᐃΔ[453][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠΔΔⵠᐃⲆⲆ;
        ᐃΔ[454] = [];
        ᐃΔ[454][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆⵠΔⵠᐃΔⵠ;
        ᐃΔ[454][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆⵠΔⵠⵠⵠᐃ;
        ᐃΔ[464] = ⲆⲆ.ⲆⵠⵠΔⲆⲆⵠ;
        ᐃΔ[468] = ⲆⲆ.ΔΔⲆᐃⵠΔⵠ;
        ᐃΔ[469] = ⲆⲆ.ᐃΔΔᐃⵠⵠⲆ;
        ᐃΔ[20] = [];
        ᐃΔ[20][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆᐃΔⵠᐃᐃⲆ;
        ᐃΔ[20][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃᐃΔΔⵠΔⵠ;
        ᐃΔ[920] = [];
        ᐃΔ[920][nr.ⵠᐃⵠ] = ⲆⲆ.ΔⲆΔΔᐃᐃΔ;
        ᐃΔ[920][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆⲆΔⲆΔⵠΔ;
        ᐃΔ[21] = [];
        ᐃΔ[21][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃᐃⲆΔᐃⵠⲆ;
        ᐃΔ[21][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃⵠⵠⵠΔⵠⲆ;
        ᐃΔ[924] = [];
        ᐃΔ[924][nr.ⵠᐃⵠ] = ⲆⲆ.ΔⲆΔΔᐃᐃΔ;
        ᐃΔ[924][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆⲆΔⲆΔⵠΔ;
        ᐃΔ[44] = [];
        ᐃΔ[44][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠⲆᐃⵠᐃⵠⵠ;
        ᐃΔ[44][nr.ᐃᐃⲆ] = ⲆⲆ.ΔⲆⵠⵠⵠⲆⵠ;
        ᐃΔ[19] = [];
        ᐃΔ[19][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆΔⲆⵠΔⲆᐃ;
        ᐃΔ[19][nr.ᐃᐃⲆ] = ⲆⲆ.ΔⵠⵠᐃⵠⲆⲆ;
        ᐃΔ[34] = [];
        ᐃΔ[34][nr.ⵠᐃⵠ] = ⲆⲆ.ΔᐃⵠᐃⲆⵠΔ;
        ᐃΔ[34][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆΔⲆⲆᐃᐃⲆ;
        ᐃΔ[17] = [];
        ᐃΔ[17][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃⵠΔΔΔⲆΔ;
        ᐃΔ[17][nr.ᐃᐃⲆ] = ⲆⲆ.ΔⵠⵠᐃᐃᐃⲆ;
        ᐃΔ[63] = [];
        ᐃΔ[63][nr.ⵠᐃⵠ] = ⲆⲆ.ΔⲆⵠⵠⵠΔᐃ;
        ᐃΔ[63][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠΔⵠⵠΔᐃΔ;
        ᐃΔ[60] = [];
        ᐃΔ[60][nr.ⵠᐃⵠ] = ⲆⲆ.ΔⲆΔⵠⵠⲆΔ;
        ᐃΔ[60][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆΔⲆΔⲆⵠⲆ;
        ᐃΔ[94] = [];
        ᐃΔ[94][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠᐃΔΔⲆᐃⵠᐃᐃ;
        ᐃΔ[94][nr.ᐃᐃⲆ] = ⲆⲆ.ΔⵠⵠΔΔⲆᐃᐃⵠ;
        ᐃΔ[95] = [];
        ᐃΔ[95][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆⵠⲆⵠⵠᐃΔⵠⲆ;
        ᐃΔ[95][nr.ᐃᐃⲆ] = ⲆⲆ.ΔⵠΔᐃⵠⵠᐃⲆΔ;
        ᐃΔ[96] = [];
        ᐃΔ[96][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆⲆⲆⲆΔⲆⲆΔΔ;
        ᐃΔ[96][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠᐃⲆᐃΔᐃⵠᐃᐃ;
        ᐃΔ[97] = [];
        ᐃΔ[97][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃΔᐃⵠⲆΔⵠⵠᐃ;
        ᐃΔ[97][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃᐃⵠⲆᐃΔΔⵠΔ;
        ᐃΔ[98] = [];
        ᐃΔ[98][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠΔⵠΔΔΔⲆΔᐃ;
        ᐃΔ[98][nr.ᐃᐃⲆ] = ⲆⲆ.ΔᐃⲆⵠⵠⵠⲆⲆⲆ;
        ᐃΔ[99] = [];
        ᐃΔ[99][nr.ⵠᐃⵠ] = ⲆⲆ.ΔΔΔᐃⲆΔⲆⵠᐃ;
        ᐃΔ[99][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃⵠⲆᐃⵠΔΔⲆΔ;
        ᐃΔ[90] = [];
        ᐃΔ[90][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆⲆᐃᐃᐃΔⲆ;
        ᐃΔ[90][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠΔⲆⲆΔΔⲆ;
        ᐃΔ[91] = [];
        ᐃΔ[91][nr.ⵠᐃⵠ] = ⲆⲆ.ΔΔⲆⵠⲆᐃⵠ;
        ᐃΔ[91][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆᐃⵠⵠᐃⵠⲆ;
        ᐃΔ[71] = [];
        ᐃΔ[71][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠⵠⲆᐃⵠⵠⵠᐃⵠ;
        ᐃΔ[71][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃⲆⵠᐃᐃᐃⵠΔΔ;
        ᐃΔ[72] = [];
        ᐃΔ[72][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠⲆⲆⵠⵠᐃΔⲆᐃ;
        ᐃΔ[72][nr.ᐃᐃⲆ] = ⲆⲆ.ΔⲆⵠΔᐃᐃΔⵠΔ;
        ᐃΔ[73] = [];
        ᐃΔ[73][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆΔᐃⵠⵠΔΔᐃᐃ;
        ᐃΔ[73][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃⲆⲆᐃⵠΔᐃⲆⵠ;
        ᐃΔ[74] = [];
        ᐃΔ[74][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠⲆᐃᐃΔⲆᐃⵠⲆ;
        ᐃΔ[74][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃⲆⲆⲆᐃΔᐃΔⵠ;
        ᐃΔ[75] = [];
        ᐃΔ[75][nr.ⵠᐃⵠ] = ⲆⲆ.ΔⲆⵠⲆᐃᐃⵠⲆⲆ;
        ᐃΔ[75][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃⲆᐃⵠᐃⵠⵠⲆⵠ;
        ᐃΔ[76] = [];
        ᐃΔ[76][nr.ⵠᐃⵠ] = ⲆⲆ.ΔⵠᐃⲆⲆΔⵠᐃᐃ;
        ᐃΔ[76][nr.ᐃᐃⲆ] = ⲆⲆ.ΔⵠⲆⵠΔⲆⵠᐃⵠ;
        ᐃΔ[101] = [];
        ᐃΔ[101][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆⵠΔⲆᐃⵠⵠ;
        ᐃΔ[101][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃᐃΔⲆⵠⵠΔ;
        ᐃΔ[64] = [];
        ᐃΔ[64][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃᐃⵠⲆⵠⵠⵠⵠⵠ;
        ᐃΔ[64][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃΔⵠⵠⵠⲆⲆⲆΔ;
        ᐃΔ[102] = [];
        ᐃΔ[102][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠΔⲆⵠⲆΔⲆ;
        ᐃΔ[102][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃⵠΔⵠⲆⵠⲆ;
        ᐃΔ[65] = [];
        ᐃΔ[65][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆΔᐃᐃⵠⵠⲆⵠΔ;
        ᐃΔ[65][nr.ᐃᐃⲆ] = ⲆⲆ.ΔᐃΔΔⵠΔⲆΔᐃ;
        ᐃΔ[103] = [];
        ᐃΔ[103][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃⲆⵠⵠΔⲆᐃ;
        ᐃΔ[103][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆΔᐃⲆΔΔΔ;
        ᐃΔ[66] = [];
        ᐃΔ[66][nr.ⵠᐃⵠ] = ⲆⲆ.ΔᐃⵠᐃΔⲆΔΔⵠ;
        ᐃΔ[66][nr.ᐃᐃⲆ] = ⲆⲆ.ΔΔᐃⵠᐃᐃⲆⵠⵠ;
        ᐃΔ[104] = [];
        ᐃΔ[104][nr.ⵠᐃⵠ] = ⲆⲆ.ΔᐃΔⲆΔΔΔ;
        ᐃΔ[104][nr.ᐃᐃⲆ] = ⲆⲆ.ΔⵠΔᐃᐃᐃΔ;
        ᐃΔ[67] = [];
        ᐃΔ[67][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠΔᐃᐃΔⵠⵠᐃᐃ;
        ᐃΔ[67][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃⵠⵠⵠⲆⲆⵠⲆΔ;
        ᐃΔ[105] = [];
        ᐃΔ[105][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆΔⵠΔⲆⲆⵠ;
        ᐃΔ[105][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆΔⵠⲆⲆᐃᐃ;
        ᐃΔ[68] = [];
        ᐃΔ[68][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆᐃⵠⲆΔᐃᐃᐃⲆ;
        ᐃΔ[68][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠΔΔⲆⲆⲆⵠᐃⲆ;
        ᐃΔ[106] = [];
        ᐃΔ[106][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆΔΔᐃⵠⲆᐃ;
        ᐃΔ[106][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠᐃΔⵠᐃⵠⵠⵠΔ;
        ᐃΔ[69] = [];
        ᐃΔ[69][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃΔⵠⵠᐃⵠᐃⲆⲆ;
        ᐃΔ[69][nr.ᐃᐃⲆ] = ⲆⲆ.ΔⵠⲆΔᐃᐃᐃⲆᐃ;
        ᐃΔ[107] = [];
        ᐃΔ[107][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆⲆᐃⵠⵠⵠⵠ;
        ᐃΔ[107][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆᐃΔΔⲆⲆⲆ;
        ᐃΔ[70] = [];
        ᐃΔ[70][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃΔΔΔΔⲆⲆΔⲆ;
        ᐃΔ[70][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆᐃᐃⲆΔⲆⵠᐃⵠ;
        ᐃΔ[80] = [];
        ᐃΔ[80][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠⲆΔΔⲆΔⵠ;
        ᐃΔ[80][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠⲆᐃⲆΔᐃⵠ;
        ᐃΔ[81] = [];
        ᐃΔ[81][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠⲆᐃⵠΔⲆⵠ;
        ᐃΔ[81][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃⵠᐃᐃⲆⵠⵠ;
        ᐃΔ[22] = [];
        ᐃΔ[22][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠⲆΔⵠⵠⵠⲆ;
        ᐃΔ[22][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃⵠᐃⲆᐃⵠᐃ;
        ᐃΔ[928] = [];
        ᐃΔ[928][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃΔⵠᐃΔᐃᐃ;
        ᐃΔ[928][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆⵠⵠⵠᐃᐃΔ;
        ᐃΔ[935] = [];
        ᐃΔ[935][nr.ⵠᐃⵠ] = [];
        ᐃΔ[935][nr.ᐃᐃⲆ] = [];
        ᐃΔ[935][nr.ⵠᐃⵠ].push(ⲆⲆ.ᐃΔⲆⲆᐃᐃΔⲆΔ);
        ᐃΔ[935][nr.ⵠᐃⵠ].push(ⲆⲆ.ΔΔⲆᐃᐃⲆⲆⲆᐃ);
        ᐃΔ[935][nr.ᐃᐃⲆ].push(ⲆⲆ.ΔΔⲆᐃᐃⲆⲆⲆᐃ);
        ᐃΔ[935][nr.ᐃᐃⲆ].push(ⲆⲆ.ΔⲆⵠⵠᐃⵠⵠΔⵠ);
        ᐃΔ[941] = [];
        ᐃΔ[941][nr.ⵠᐃⵠ] = [];
        ᐃΔ[941][nr.ᐃᐃⲆ] = [];
        ᐃΔ[941][nr.ⵠᐃⵠ].push(ⲆⲆ.ⵠⵠΔⲆΔⵠⵠ);
        ᐃΔ[941][nr.ⵠᐃⵠ].push(ⲆⲆ.ⵠΔⲆᐃᐃᐃⲆ);
        ᐃΔ[941][nr.ⵠᐃⵠ].push(ⲆⲆ.ᐃΔⵠΔᐃⲆᐃ);
        ᐃΔ[941][nr.ᐃᐃⲆ].push(ⲆⲆ.ᐃⲆΔᐃᐃᐃΔ);
        ᐃΔ[941][nr.ᐃᐃⲆ].push(ⲆⲆ.ΔΔΔᐃΔⵠⲆ);
        ᐃΔ[941][nr.ᐃᐃⲆ].push(ⲆⲆ.ⵠⵠⲆⲆⵠⵠⵠ);
        ᐃΔ[53] = [];
        ᐃΔ[53][nr.ⵠᐃⵠ] = ⲆⲆ.ΔᐃⲆⲆΔⵠᐃ;
        ᐃΔ[53][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠᐃⵠⲆΔⵠΔ;
        ᐃΔ[54] = [];
        ᐃΔ[54][nr.ⵠᐃⵠ] = ⲆⲆ.ΔⵠⵠⲆⵠᐃΔ;
        ᐃΔ[54][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃΔᐃⵠⲆᐃᐃ;
        ᐃΔ[241] = [];
        ᐃΔ[241][nr.ⵠᐃⵠ] = [];
        ᐃΔ[241][nr.ᐃᐃⲆ] = [];
        ᐃΔ[241][nr.ⵠᐃⵠ].push(ⲆⲆ.ⵠⵠⲆᐃΔⵠⲆ);
        ᐃΔ[241][nr.ⵠᐃⵠ].push(ⲆⲆ.ΔᐃⲆⵠⵠᐃΔ);
        ᐃΔ[241][nr.ⵠᐃⵠ].push(ⲆⲆ.ΔⲆⲆΔⵠⵠΔ);
        ᐃΔ[241][nr.ᐃᐃⲆ].push(ⲆⲆ.ⵠΔⵠᐃⲆⵠᐃ);
        ᐃΔ[241][nr.ᐃᐃⲆ].push(ⲆⲆ.ⲆⲆⲆⵠⲆᐃΔ);
        ᐃΔ[241][nr.ᐃᐃⲆ].push(ⲆⲆ.ΔⵠⲆᐃᐃΔΔ);
        ᐃΔ[202] = [];
        ᐃΔ[202][nr.ⵠᐃⵠ] = [];
        ᐃΔ[202][nr.ᐃᐃⲆ] = [];
        ᐃΔ[202][nr.ⵠᐃⵠ].push(ⲆⲆ.ΔᐃᐃΔΔᐃᐃ);
        ᐃΔ[202][nr.ⵠᐃⵠ].push(ⲆⲆ.ΔᐃᐃⲆᐃⲆⵠ);
        ᐃΔ[202][nr.ⵠᐃⵠ].push(ⲆⲆ.ⵠⵠⵠΔⲆᐃᐃ);
        ᐃΔ[202][nr.ᐃᐃⲆ].push(ⲆⲆ.ⵠⵠⵠⵠᐃΔΔ);
        ᐃΔ[202][nr.ᐃᐃⲆ].push(ⲆⲆ.ⲆᐃᐃΔⲆⵠⲆ);
        ᐃΔ[202][nr.ᐃᐃⲆ].push(ⲆⲆ.ᐃⲆⲆⲆΔⵠᐃ);
        ᐃΔ[203] = [];
        ᐃΔ[203][nr.ⵠᐃⵠ] = [];
        ᐃΔ[203][nr.ᐃᐃⲆ] = [];
        ᐃΔ[203][nr.ⵠᐃⵠ].push(ⲆⲆ.ⲆⵠⲆᐃⲆΔⲆ);
        ᐃΔ[203][nr.ⵠᐃⵠ].push(ⲆⲆ.ⵠⲆᐃΔⲆᐃⵠ);
        ᐃΔ[203][nr.ⵠᐃⵠ].push(ⲆⲆ.ᐃⵠⵠⵠⲆⲆⵠ);
        ᐃΔ[203][nr.ⵠᐃⵠ].push(ⲆⲆ.ⲆⲆⵠΔᐃΔΔ);
        ᐃΔ[203][nr.ⵠᐃⵠ].push(ⲆⲆ.ᐃΔᐃᐃⲆᐃⲆ);
        ᐃΔ[203][nr.ⵠᐃⵠ].push(ⲆⲆ.ⲆΔΔΔΔⵠᐃ);
        ᐃΔ[203][nr.ᐃᐃⲆ].push(ⲆⲆ.ᐃⵠⲆᐃⲆⲆΔ);
        ᐃΔ[203][nr.ᐃᐃⲆ].push(ⲆⲆ.ⵠⲆΔΔᐃⲆΔ);
        ᐃΔ[203][nr.ᐃᐃⲆ].push(ⲆⲆ.ᐃⲆⵠᐃᐃᐃⵠ);
        ᐃΔ[203][nr.ᐃᐃⲆ].push(ⲆⲆ.ⵠⲆΔΔⲆⵠΔ);
        ᐃΔ[203][nr.ᐃᐃⲆ].push(ⲆⲆ.ΔᐃⵠⵠΔᐃᐃ);
        ᐃΔ[203][nr.ᐃᐃⲆ].push(ⲆⲆ.ⲆⲆΔⵠΔⲆⵠ);
        ᐃΔ[nr.ⲆᐃΔⲆΔ] = [];
        ᐃΔ[nr.ⲆᐃΔⲆΔ][nr.ⵠᐃⵠ] = [];
        ᐃΔ[nr.ⲆᐃΔⲆΔ][nr.ᐃᐃⲆ] = [];
        ᐃΔ[nr.ⲆᐃΔⲆΔ][nr.ⵠᐃⵠ].push(ⲆⲆ.ΔΔΔᐃΔΔΔ);
        ᐃΔ[nr.ⲆᐃΔⲆΔ][nr.ⵠᐃⵠ].push(ⲆⲆ.ΔΔⲆⵠⵠⵠᐃ);
        ᐃΔ[nr.ⲆᐃΔⲆΔ][nr.ⵠᐃⵠ].push(ⲆⲆ.ⵠⵠᐃᐃⲆᐃⵠ);
        ᐃΔ[nr.ⲆᐃΔⲆΔ][nr.ⵠᐃⵠ].push(ⲆⲆ.ⵠᐃⲆᐃⲆⵠΔ);
        ᐃΔ[nr.ⲆᐃΔⲆΔ][nr.ⵠᐃⵠ].push(ⲆⲆ.ⲆⲆⲆᐃⵠᐃΔ);
        ᐃΔ[nr.ⲆᐃΔⲆΔ][nr.ⵠᐃⵠ].push(ⲆⲆ.ⲆᐃᐃⲆⵠᐃⲆ);
        ᐃΔ[nr.ⲆᐃΔⲆΔ][nr.ᐃᐃⲆ].push(ⲆⲆ.ⲆΔⵠΔᐃΔᐃ);
        ᐃΔ[nr.ⲆᐃΔⲆΔ][nr.ᐃᐃⲆ].push(ⲆⲆ.ⵠᐃⲆΔⵠᐃᐃ);
        ᐃΔ[nr.ⲆᐃΔⲆΔ][nr.ᐃᐃⲆ].push(ⲆⲆ.ᐃⲆᐃⵠⲆᐃΔ);
        ᐃΔ[nr.ⲆᐃΔⲆΔ][nr.ᐃᐃⲆ].push(ⲆⲆ.ᐃΔⵠⲆΔⲆⵠ);
        ᐃΔ[nr.ⲆᐃΔⲆΔ][nr.ᐃᐃⲆ].push(ⲆⲆ.ⲆᐃⵠΔⲆⵠΔ);
        ᐃΔ[nr.ⲆᐃΔⲆΔ][nr.ᐃᐃⲆ].push(ⲆⲆ.ᐃΔⲆΔⵠⵠᐃ);
        ᐃΔ[918] = [];
        ᐃΔ[918][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠⲆᐃᐃⲆⲆᐃ;
        ᐃΔ[918][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆΔᐃⵠⲆⲆⵠ;
        ᐃΔ[919] = ⲆⲆ.ᐃᐃΔᐃᐃΔΔ;
        ᐃΔ[56] = [];
        ᐃΔ[56][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃᐃⵠⲆⲆⵠⲆⲆᐃ;
        ᐃΔ[56][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃΔⲆⵠΔᐃΔΔᐃ;
        ᐃΔ[223] = [];
        ᐃΔ[223][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆⲆᐃᐃⵠⲆᐃ;
        ᐃΔ[223][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃᐃᐃΔᐃᐃᐃ;
        ᐃΔ[224] = [];
        ᐃΔ[224][nr.ⵠᐃⵠ] = ⲆⲆ.ΔⵠⲆΔⲆᐃⵠ;
        ᐃΔ[224][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠⲆᐃΔᐃⲆⲆ;
        ᐃΔ[236] = [];
        ᐃΔ[236][nr.ⵠᐃⵠ] = ⲆⲆ.ΔⵠΔⵠⲆⲆⵠ;
        ᐃΔ[236][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆⵠᐃΔⲆᐃⲆ;
        ᐃΔ[1033] = [];
        ᐃΔ[1033][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠⵠΔᐃⲆΔΔ;
        ᐃΔ[1033][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃΔᐃⵠΔⵠᐃ;
        ᐃΔ[1034] = ⲆⲆ.ΔΔⵠᐃⲆⲆᐃ;
        ᐃΔ[1150] = [];
        ᐃΔ[1150][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃⵠⵠᐃⵠΔᐃ;
        ᐃΔ[1150][nr.ᐃᐃⲆ] = ⲆⲆ.ΔⲆⲆⵠⲆⲆᐃ;
        ᐃΔ[1152] = [];
        ᐃΔ[1152][nr.ⵠᐃⵠ] = ⲆⲆ.ΔⵠᐃΔΔᐃⵠ;
        ᐃΔ[1152][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆⵠᐃⲆΔΔⲆ;
        ᐃΔ[1149] = ⲆⲆ.ΔⲆΔⲆΔⲆⵠ;
        ᐃΔ[1151] = ⲆⲆ.ⵠⲆΔᐃⲆΔⲆ;
        ᐃΔ[1153] = ⲆⲆ.ᐃⲆᐃⵠⵠᐃΔ;
        ᐃΔ[1143] = [];
        ᐃΔ[1143][nr.ⵠᐃⵠ] = ⲆⲆ.ΔΔⲆⵠᐃΔⵠ;
        ᐃΔ[1143][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠⲆΔΔᐃΔΔ;
        ᐃΔ[1145] = [];
        ᐃΔ[1145][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠⲆⲆⲆΔⲆⲆ;
        ᐃΔ[1145][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃⵠⲆⲆᐃⵠⲆ;
        ᐃΔ[1146] = [];
        ᐃΔ[1146][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆⵠⲆⲆᐃⵠᐃ;
        ᐃΔ[1146][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃΔⵠⵠᐃΔΔ;
        ᐃΔ[1144] = ⲆⲆ.ΔᐃⲆⵠⵠΔΔ;
        ᐃΔ[1148] = ⲆⲆ.ⲆΔⲆⵠΔᐃⲆ;
        ᐃΔ[1147] = ⲆⲆ.ΔⲆⵠⲆⲆᐃⵠ;
        ᐃΔ[1053] = [];
        ᐃΔ[1053][nr.ⵠᐃⵠ] = ⲆⲆ.ΔᐃⵠᐃⲆⲆᐃ;
        ᐃΔ[1053][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆⲆᐃⵠⲆΔΔ;
        ᐃΔ[1055] = [];
        ᐃΔ[1055][nr.ⵠᐃⵠ] = ⲆⲆ.ΔΔⲆⲆⵠⵠⵠ;
        ᐃΔ[1055][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆⵠⲆΔⵠⵠⲆ;
        ᐃΔ[231] = [];
        ᐃΔ[231][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆᐃᐃΔⵠⵠⵠ;
        ᐃΔ[231][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠᐃⵠΔΔⲆΔ;
        ᐃΔ[1060] = [];
        ᐃΔ[1060][nr.ⵠᐃⵠ] = ⲆⲆ.ΔΔΔΔᐃᐃⲆ;
        ᐃΔ[1060][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠᐃⵠΔⲆΔⲆ;
        ᐃΔ[1063] = [];
        ᐃΔ[1063][nr.ⵠᐃⵠ] = ⲆⲆ.ΔᐃΔⲆΔᐃⲆ;
        ᐃΔ[1063][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆΔᐃᐃⲆⵠΔ;
        ᐃΔ[1059] = [];
        ᐃΔ[1059][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃᐃⵠⲆⵠΔΔ;
        ᐃΔ[1059][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆⲆᐃⲆⲆᐃⵠ;
        ᐃΔ[1062] = [];
        ᐃΔ[1062][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆᐃᐃⵠⲆΔⵠ;
        ᐃΔ[1062][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆΔⲆⵠⵠⵠⲆ;
        ᐃΔ[1056] = ⲆⲆ.ΔΔⵠΔⵠⲆⵠ;
        ᐃΔ[1057] = ⲆⲆ.ΔⲆᐃⲆᐃΔΔ;
        ᐃΔ[1058] = ⲆⲆ.ᐃᐃⵠⲆⲆᐃΔ;
        ᐃΔ[1065] = ⲆⲆ.ΔᐃᐃᐃᐃⵠⲆ;
        ᐃΔ[1066] = ⲆⲆ.ΔΔΔᐃᐃⲆᐃ;
        ᐃΔ[1067] = ⲆⲆ.ᐃⲆΔⵠⲆⵠⲆ;
        ᐃΔ[1222] = [];
        ᐃΔ[1222][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠΔᐃΔΔᐃΔᐃⵠ;
        ᐃΔ[1222][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃᐃⵠΔⲆᐃⵠΔᐃ;
        ᐃΔ[248] = [];
        ᐃΔ[248][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃΔⲆⵠΔΔⵠΔⲆ;
        ᐃΔ[248][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃᐃⲆᐃⵠΔⲆⲆⲆ;
        ᐃΔ[1218] = [];
        ᐃΔ[1218][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠΔⵠᐃⲆᐃΔᐃᐃ;
        ᐃΔ[1218][nr.ᐃᐃⲆ] = ⲆⲆ.ΔⵠⵠⵠⵠᐃⵠᐃΔ;
        ᐃΔ[1221] = [];
        ᐃΔ[1221][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠΔⵠΔᐃⵠᐃΔΔ;
        ᐃΔ[1221][nr.ᐃᐃⲆ] = ⲆⲆ.ΔⲆΔⵠᐃⵠⵠΔᐃ;
        ᐃΔ[1223] = ⲆⲆ.ⵠⲆⲆΔΔᐃⲆ;
        ᐃΔ[1219] = ⲆⲆ.ⲆⲆⵠⵠᐃΔⵠ;
        ᐃΔ[1068] = [];
        ᐃΔ[1068][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃᐃⲆⵠⲆⲆⵠ;
        ᐃΔ[1068][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆⲆⵠΔⲆᐃⲆ;
        ᐃΔ[232] = [];
        ᐃΔ[232][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃᐃΔⲆⵠⵠⵠ;
        ᐃΔ[232][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠⵠᐃⵠⲆᐃⲆ;
        ᐃΔ[1070] = [];
        ᐃΔ[1070][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆⲆΔᐃᐃᐃᐃ;
        ᐃΔ[1070][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆΔⲆⵠΔᐃⵠ;
        ᐃΔ[1072] = [];
        ᐃΔ[1072][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠΔΔᐃⵠΔⲆ;
        ᐃΔ[1072][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠᐃⲆᐃΔᐃᐃ;
        ᐃΔ[1075] = [];
        ᐃΔ[1075][nr.ⵠᐃⵠ] = ⲆⲆ.ΔΔⲆΔΔᐃⵠ;
        ᐃΔ[1075][nr.ᐃᐃⲆ] = ⲆⲆ.ΔΔΔΔⲆⵠᐃ;
        ᐃΔ[1071] = [];
        ᐃΔ[1071][nr.ⵠᐃⵠ] = ⲆⲆ.ΔΔΔⲆⵠᐃⵠ;
        ᐃΔ[1071][nr.ᐃᐃⲆ] = ⲆⲆ.ΔⲆΔᐃᐃⲆⵠ;
        ᐃΔ[1074] = [];
        ᐃΔ[1074][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠᐃᐃᐃΔⵠⲆ;
        ᐃΔ[1074][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃᐃⲆⵠⲆΔΔ;
        ᐃΔ[1073] = [];
        ᐃΔ[1073][nr.ⵠᐃⵠ] = ⲆⲆ.ΔΔᐃⲆⲆⵠᐃ;
        ᐃΔ[1073][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆⵠΔΔⲆᐃⲆ;
        ᐃΔ[1076] = [];
        ᐃΔ[1076][nr.ⵠᐃⵠ] = ⲆⲆ.ΔᐃΔΔᐃⵠⲆ;
        ᐃΔ[1076][nr.ᐃᐃⲆ] = ⲆⲆ.ΔᐃⲆⵠᐃⵠΔ;
        ᐃΔ[1077] = ⲆⲆ.ᐃⲆᐃᐃⲆⵠᐃ;
        ᐃΔ[1078] = ⲆⲆ.ΔᐃⵠⲆⲆΔᐃ;
        ᐃΔ[1079] = ⲆⲆ.ⲆᐃⲆⵠⲆΔⵠ;
        ᐃΔ[1083] = [];
        ᐃΔ[1083][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃΔᐃΔⲆⵠᐃ;
        ᐃΔ[1083][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠⵠᐃⵠⵠΔᐃ;
        ᐃΔ[233] = [];
        ᐃΔ[233][nr.ⵠᐃⵠ] = ⲆⲆ.ΔⲆᐃⵠΔᐃΔ;
        ᐃΔ[233][nr.ᐃᐃⲆ] = ⲆⲆ.ΔⲆⲆᐃⵠⵠΔ;
        ᐃΔ[1085] = [];
        ᐃΔ[1085][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃᐃⵠᐃⲆΔⵠ;
        ᐃΔ[1085][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃⵠΔⲆⲆᐃΔ;
        ᐃΔ[1087] = [];
        ᐃΔ[1087][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃᐃᐃΔⵠᐃⵠ;
        ᐃΔ[1087][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠΔⲆΔⲆᐃᐃ;
        ᐃΔ[1090] = [];
        ᐃΔ[1090][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃⵠΔⲆⲆⲆᐃ;
        ᐃΔ[1090][nr.ᐃᐃⲆ] = ⲆⲆ.ΔⲆⵠⵠᐃΔᐃ;
        ᐃΔ[1086] = [];
        ᐃΔ[1086][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃⵠⵠⵠᐃᐃᐃ;
        ᐃΔ[1086][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃᐃᐃⲆΔⵠⵠ;
        ᐃΔ[1089] = [];
        ᐃΔ[1089][nr.ⵠᐃⵠ] = ⲆⲆ.ΔᐃΔΔⲆⲆⲆ;
        ᐃΔ[1089][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆᐃᐃⵠᐃⲆᐃ;
        ᐃΔ[1088] = [];
        ᐃΔ[1088][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆⵠᐃᐃⲆⲆᐃ;
        ᐃΔ[1088][nr.ᐃᐃⲆ] = ⲆⲆ.ΔⵠΔⵠⲆΔⲆ;
        ᐃΔ[1091] = [];
        ᐃΔ[1091][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠⵠⵠⲆᐃⵠⲆ;
        ᐃΔ[1091][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠⲆΔΔΔⵠΔ;
        ᐃΔ[1092] = ⲆⲆ.ⵠⵠᐃΔΔⵠⲆ;
        ᐃΔ[1093] = ⲆⲆ.ⵠᐃⲆΔⲆᐃΔ;
        ᐃΔ[1094] = ⲆⲆ.ⵠⵠⲆⲆⲆΔᐃ;
        ᐃΔ[1098] = [];
        ᐃΔ[1098][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠΔΔⵠΔⲆⲆ;
        ᐃΔ[1098][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃΔⲆⲆᐃᐃⵠ;
        ᐃΔ[235] = [];
        ᐃΔ[235][nr.ⵠᐃⵠ] = ⲆⲆ.ΔΔⲆⲆᐃⵠᐃ;
        ᐃΔ[235][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃⵠⲆⲆᐃΔⲆ;
        ᐃΔ[1115] = ⲆⲆ.ⵠⲆⲆⲆΔΔᐃ;
        ᐃΔ[1113] = [];
        ᐃΔ[1113][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠᐃⵠΔΔⵠᐃ;
        ᐃΔ[1113][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠΔⵠΔⲆᐃⲆ;
        ᐃΔ[1114] = [];
        ᐃΔ[1114][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃᐃⲆⲆⵠᐃΔ;
        ᐃΔ[1114][nr.ᐃᐃⲆ] = ⲆⲆ.Δᐃᐃⵠⵠᐃⵠ;
        ᐃΔ[1100] = [];
        ᐃΔ[1100][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆΔⵠⲆᐃΔᐃ;
        ᐃΔ[1100][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆΔΔⵠⵠᐃⵠ;
        ᐃΔ[1102] = [];
        ᐃΔ[1102][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠⵠᐃᐃⵠⵠⵠ;
        ᐃΔ[1102][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠⲆᐃᐃⲆⵠΔ;
        ᐃΔ[1105] = [];
        ᐃΔ[1105][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆⵠᐃⵠⵠⵠΔ;
        ᐃΔ[1105][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃⲆⲆⲆⵠⲆΔ;
        ᐃΔ[1101] = [];
        ᐃΔ[1101][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆⲆᐃΔⲆⲆⲆ;
        ᐃΔ[1101][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆΔⲆΔⲆΔᐃ;
        ᐃΔ[1104] = [];
        ᐃΔ[1104][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃⲆᐃⵠΔᐃⲆ;
        ᐃΔ[1104][nr.ᐃᐃⲆ] = ⲆⲆ.ΔᐃΔᐃⵠⲆⲆ;
        ᐃΔ[1103] = [];
        ᐃΔ[1103][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆΔΔⲆⵠⲆⲆ;
        ᐃΔ[1103][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠⵠⵠᐃᐃΔⲆ;
        ᐃΔ[1106] = [];
        ᐃΔ[1106][nr.ⵠᐃⵠ] = ⲆⲆ.ΔᐃⲆⵠⲆⲆⲆ;
        ᐃΔ[1106][nr.ᐃᐃⲆ] = ⲆⲆ.ΔⲆΔΔΔⲆⵠ;
        ᐃΔ[1107] = ⲆⲆ.ΔᐃᐃⲆΔᐃᐃ;
        ᐃΔ[1108] = ⲆⲆ.ⲆᐃᐃᐃΔᐃᐃ;
        ᐃΔ[1109] = ⲆⲆ.ⲆΔⲆᐃΔⵠΔ;
        ᐃΔ[1119] = [];
        ᐃΔ[1119][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆⲆΔᐃᐃᐃⵠ;
        ᐃΔ[1119][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠΔⵠⵠΔᐃⲆ;
        ᐃΔ[238] = [];
        ᐃΔ[238][nr.ⵠᐃⵠ] = ⲆⲆ.ΔⲆΔⵠΔᐃΔ;
        ᐃΔ[238][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆᐃⲆⵠΔⵠᐃ;
        ᐃΔ[1136] = ⲆⲆ.ΔᐃⵠΔΔⲆΔ;
        ᐃΔ[1134] = [];
        ᐃΔ[1134][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆΔᐃΔⲆᐃᐃ;
        ᐃΔ[1134][nr.ᐃᐃⲆ] = ⲆⲆ.ΔΔᐃᐃΔΔΔ;
        ᐃΔ[1135] = [];
        ᐃΔ[1135][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠᐃⲆΔᐃⵠΔ;
        ᐃΔ[1135][nr.ᐃᐃⲆ] = ⲆⲆ.ΔⲆⲆᐃΔⲆᐃ;
        ᐃΔ[1121] = [];
        ᐃΔ[1121][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆⵠⲆⵠᐃᐃⵠ;
        ᐃΔ[1121][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃΔⲆⲆⲆⲆΔ;
        ᐃΔ[1123] = [];
        ᐃΔ[1123][nr.ⵠᐃⵠ] = ⲆⲆ.Δᐃⵠⵠⵠᐃⵠ;
        ᐃΔ[1123][nr.ᐃᐃⲆ] = ⲆⲆ.ΔⲆᐃⵠᐃΔΔ;
        ᐃΔ[1126] = [];
        ᐃΔ[1126][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠⲆᐃⲆᐃⲆⲆ;
        ᐃΔ[1126][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃⲆⲆⵠⲆᐃΔ;
        ᐃΔ[1122] = [];
        ᐃΔ[1122][nr.ⵠᐃⵠ] = ⲆⲆ.ΔⲆΔⵠⲆⵠⵠ;
        ᐃΔ[1122][nr.ᐃᐃⲆ] = ⲆⲆ.ΔⲆⲆΔⲆⵠⲆ;
        ᐃΔ[1125] = [];
        ᐃΔ[1125][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠᐃᐃᐃⵠᐃΔ;
        ᐃΔ[1125][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠΔⵠⲆΔⲆⲆ;
        ᐃΔ[1124] = [];
        ᐃΔ[1124][nr.ⵠᐃⵠ] = ⲆⲆ.ΔΔⵠΔᐃΔΔ;
        ᐃΔ[1124][nr.ᐃᐃⲆ] = ⲆⲆ.ΔᐃⵠᐃⵠⲆⵠ;
        ᐃΔ[1127] = [];
        ᐃΔ[1127][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃⵠᐃⲆⲆᐃᐃ;
        ᐃΔ[1127][nr.ᐃᐃⲆ] = ⲆⲆ.ΔΔΔⲆᐃᐃⲆ;
        ᐃΔ[1128] = ⲆⲆ.ΔⲆⵠⲆⵠᐃⲆ;
        ᐃΔ[1129] = ⲆⲆ.ⵠΔⵠⵠⵠΔᐃ;
        ᐃΔ[1130] = ⲆⲆ.ΔΔⵠᐃΔⵠΔ;
        ᐃΔ[1042] = [];
        ᐃΔ[1042][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆⲆⵠΔΔΔⵠ;
        ᐃΔ[1042][nr.ᐃᐃⲆ] = ⲆⲆ.ΔΔᐃⲆⲆⵠⵠ;
        ᐃΔ[1043] = [];
        ᐃΔ[1043][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃⵠᐃΔΔⲆⵠ;
        ᐃΔ[1043][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠΔⲆΔⲆⲆΔ;
        ᐃΔ[1044] = [];
        ᐃΔ[1044][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆᐃⵠΔᐃⵠᐃ;
        ᐃΔ[1044][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆᐃΔΔⵠⲆΔ;
        ᐃΔ[228] = [];
        ᐃΔ[228][nr.ⵠᐃⵠ] = ⲆⲆ.ΔΔᐃᐃΔⵠᐃ;
        ᐃΔ[228][nr.ᐃᐃⲆ] = ⲆⲆ.ΔΔᐃᐃΔⵠᐃ;
        ᐃΔ[234] = [];
        ᐃΔ[234][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃⵠⵠΔΔⲆΔ;
        ᐃΔ[234][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃⵠⵠΔΔⲆΔ;
        ᐃΔ[249] = [];
        ᐃΔ[249][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆⵠⲆⵠΔᐃᐃ;
        ᐃΔ[249][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆⵠⲆⵠΔᐃᐃ;
        ᐃΔ[1045] = ⲆⲆ.ⲆⲆΔⵠΔᐃΔ;
        ᐃΔ[89] = [];
        ᐃΔ[89][nr.ⵠᐃⵠ] = ⲆⲆ.Ⲇⵠᐃᐃⵠⵠⵠ;
        ᐃΔ[89][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆΔΔᐃΔΔⲆ;
        ᐃΔ[92] = [];
        ᐃΔ[92][nr.ⵠᐃⵠ] = ⲆⲆ.ΔΔⲆⲆⲆⲆΔ;
        ᐃΔ[92][nr.ᐃᐃⲆ] = ⲆⲆ.ΔΔⲆⵠⲆⲆΔ;
        ᐃΔ[247] = [];
        ᐃΔ[247][nr.ⵠᐃⵠ] = [ⲆⲆ.ⵠⲆⲆᐃΔΔᐃ, ⲆⲆ.ⲆᐃᐃⵠⵠΔⲆ, ⲆⲆ.ⲆⵠΔⲆᐃⵠⵠ, ⲆⲆ.ⵠΔⲆⵠⲆΔⲆ, ⲆⲆ.ᐃⲆⵠⵠΔⲆᐃ, ⲆⲆ.ΔᐃΔⲆΔΔΔ, ⲆⲆ.ⲆΔⵠΔⲆⲆⵠ, ⲆⲆ.ⲆΔΔᐃⵠⲆᐃ, ⲆⲆ.ⲆⲆᐃⵠⵠⵠⵠ];
        ᐃΔ[247][nr.ᐃᐃⲆ] = [ⲆⲆ.ΔΔΔΔΔⵠⵠ, ⲆⲆ.ⵠⲆⲆᐃⲆⲆᐃ, ⲆⲆ.ᐃᐃΔⲆⵠⵠΔ, ⲆⲆ.ᐃⵠΔⵠⲆⵠⲆ, ⲆⲆ.ⲆΔᐃⲆΔΔΔ, ⲆⲆ.ΔⵠΔᐃᐃᐃΔ, ⲆⲆ.ⲆΔⵠⲆⲆᐃᐃ, ⲆⲆ.ⲆΔΔᐃⵠⲆᐃ, ⲆⲆ.ⲆᐃΔΔⲆⲆⲆ];
        ᐃΔ[93] = [];
        ᐃΔ[93][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆᐃᐃⵠᐃⵠⲆ;
        ᐃΔ[93][nr.ᐃᐃⲆ] = ⲆⲆ.ΔᐃΔᐃⲆΔⲆ;
        ᐃΔ[225] = [];
        ᐃΔ[225][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃΔΔⵠⵠⲆⵠ;
        ᐃΔ[225][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠᐃⵠᐃΔΔΔ;
        ᐃΔ[226] = [];
        ᐃΔ[226][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆⵠΔⲆᐃⵠⲆ;
        ᐃΔ[226][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠᐃⲆᐃΔΔⲆ;
        ᐃΔ[24] = [];
        ᐃΔ[24][nr.ⵠᐃⵠ] = ⲆⲆ.ΔΔΔᐃΔᐃⵠ;
        ᐃΔ[24][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆⲆΔⵠⲆⲆᐃ;
        ᐃΔ[88] = [];
        ᐃΔ[88][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠⵠⵠΔΔΔΔᐃΔ;
        ᐃΔ[88][nr.ᐃᐃⲆ] = ⲆⲆ.ΔΔⵠᐃᐃⲆⵠᐃᐃ;
        ᐃΔ[87] = [];
        ᐃΔ[87][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃᐃΔⵠᐃᐃΔΔᐃ;
        ᐃΔ[87][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠᐃⵠᐃΔΔⵠⲆⵠ;
        ᐃΔ[82] = [];
        ᐃΔ[82][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆⵠⲆⲆΔⵠⵠ;
        ᐃΔ[82][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠⵠⲆⵠⲆΔⵠ;
        ᐃΔ[621] = [];
        ᐃΔ[621][nr.ⵠᐃⵠ] = [];
        ᐃΔ[621][nr.ᐃᐃⲆ] = [];
        ᐃΔ[621][nr.ⵠᐃⵠ].push(ⲆⲆ.ΔⵠⵠⵠⵠⵠᐃⵠⲆ);
        ᐃΔ[621][nr.ⵠᐃⵠ].push(ⲆⲆ.ᐃΔΔⵠⲆⵠⲆⲆΔ);
        ᐃΔ[621][nr.ⵠᐃⵠ].push(ⲆⲆ.ⲆᐃΔⵠⵠᐃⲆΔᐃ);
        ᐃΔ[621][nr.ᐃᐃⲆ].push(ⲆⲆ.ΔᐃᐃⵠⵠᐃⲆⲆⲆ);
        ᐃΔ[621][nr.ᐃᐃⲆ].push(ⲆⲆ.ΔᐃⵠΔΔⲆⲆⲆΔ);
        ᐃΔ[621][nr.ᐃᐃⲆ].push(ⲆⲆ.ᐃᐃⲆᐃⵠᐃⲆⵠⲆ);
        ᐃΔ[619] = [];
        ᐃΔ[619][nr.ⵠᐃⵠ] = [];
        ᐃΔ[619][nr.ᐃᐃⲆ] = [];
        ᐃΔ[619][nr.ⵠᐃⵠ].push(ⲆⲆ.ⵠⵠⵠᐃⵠΔΔᐃⵠ);
        ᐃΔ[619][nr.ⵠᐃⵠ].push(ⲆⲆ.ⵠⲆⵠᐃΔΔⵠⲆΔ);
        ᐃΔ[619][nr.ⵠᐃⵠ].push(ⲆⲆ.ⲆᐃᐃΔⵠᐃⲆᐃᐃ);
        ᐃΔ[619][nr.ᐃᐃⲆ].push(ⲆⲆ.ᐃⵠⵠᐃᐃⵠⵠᐃⵠ);
        ᐃΔ[619][nr.ᐃᐃⲆ].push(ⲆⲆ.ᐃᐃᐃᐃⵠⵠⵠᐃᐃ);
        ᐃΔ[619][nr.ᐃᐃⲆ].push(ⲆⲆ.ᐃᐃⵠⵠᐃⲆⵠᐃΔ);
        ᐃΔ[620] = [];
        ᐃΔ[620][nr.ⵠᐃⵠ] = [];
        ᐃΔ[620][nr.ᐃᐃⲆ] = [];
        ᐃΔ[620][nr.ⵠᐃⵠ].push(ⲆⲆ.ⲆⲆⵠⲆⵠⲆⵠⲆΔ);
        ᐃΔ[620][nr.ⵠᐃⵠ].push(ⲆⲆ.ⵠᐃⵠᐃΔⲆᐃⵠᐃ);
        ᐃΔ[620][nr.ⵠᐃⵠ].push(ⲆⲆ.ΔΔⵠᐃᐃⲆⲆᐃⲆ);
        ᐃΔ[620][nr.ᐃᐃⲆ].push(ⲆⲆ.ⲆⲆᐃᐃᐃᐃⲆΔⲆ);
        ᐃΔ[620][nr.ᐃᐃⲆ].push(ⲆⲆ.ⵠⲆΔᐃᐃⲆΔⲆᐃ);
        ᐃΔ[620][nr.ᐃᐃⲆ].push(ⲆⲆ.ᐃⲆⵠⵠΔⵠΔⵠΔ);
        ⲆΔⵠΔ.g = [];
        ⲆΔⵠΔ.g[0] = [ⲆⲆ.ᐃⲆΔⵠⵠⲆΔ, ⲆⲆ.ᐃΔΔⵠᐃⲆⵠ];
        ⲆΔⵠΔ.g[1] = ⲆΔⵠΔ.g[0];
        ⲆΔⵠΔ.g[2] = [ⲆⲆ.ⵠⵠⲆⵠⵠⲆΔ, ⲆⲆ.ⵠⲆΔⵠⵠΔᐃ];
        ⲆΔⵠΔ.m = [];
        ⲆΔⵠΔ.m[0] = [ⲆⲆ.ᐃⲆⲆᐃᐃᐃΔ, ⲆⲆ.ΔⲆⵠⲆΔⲆⵠ];
        ⲆΔⵠΔ.m[1] = ⲆΔⵠΔ.m[0];
        ⲆΔⵠΔ.m[2] = [ⲆⲆ.ⵠᐃΔᐃᐃΔⲆ, ⲆⲆ.ΔⲆΔⲆⲆΔᐃ];
        ⲆΔⵠΔ.la = [];
        ⲆΔⵠΔ.la[0] = [ⲆⲆ.ᐃᐃᐃΔΔⲆᐃ, ⲆⲆ.ⵠⲆᐃⵠⲆᐃⲆ];
        ⲆΔⵠΔ.la[1] = ⲆΔⵠΔ.la[0];
        ⲆΔⵠΔ.la[2] = ⲆΔⵠΔ.la[0];
        ⲆΔⵠΔ.la[3] = ⲆΔⵠΔ.la[0];
        ⲆΔⵠΔ.la[4] = ⲆΔⵠΔ.la[0];
        ⲆΔⵠΔ.la[5] = ⲆΔⵠΔ.la[0];
        ⲆΔⵠΔ.s = [];
        ⲆΔⵠΔ.s[0] = [ⲆⲆ.ᐃⲆⵠΔⵠᐃⵠ, ⲆⲆ.Δⵠᐃᐃⵠᐃⵠ];
        ⲆΔⵠΔ.s[1] = ⲆΔⵠΔ.s[0];
        ⲆΔⵠΔ.s[2] = [ⲆⲆ.ⵠⲆᐃᐃⵠⲆΔ, ⲆⲆ.ᐃᐃⲆⵠΔᐃⵠ];
        ⲆΔⵠΔ.p = [];
        ⲆΔⵠΔ.p[0] = [ⲆⲆ.ΔᐃⲆᐃΔⲆⵠ, ⲆⲆ.ΔᐃⲆᐃΔⲆⵠ];
        ⲆΔⵠΔ.a = [];
        ⲆΔⵠΔ.a[0] = [ⲆⲆ.ΔᐃΔⲆⵠΔΔ, ⲆⲆ.ⵠⵠⵠᐃⲆᐃⲆ];
        ⲆΔⵠΔ.a[1] = ⲆΔⵠΔ.a[0];
        ⲆΔⵠΔ.a[2] = ⲆΔⵠΔ.a[0];
        ⲆΔⵠΔ.d = [];
        ⲆΔⵠΔ.d[0] = [ⲆⲆ.ᐃΔΔᐃⵠΔⵠ, ⲆⲆ.ᐃᐃΔᐃΔᐃⵠ];
        ⲆΔⵠΔ.d[1] = ⲆΔⵠΔ.d[0];
        ⲆΔⵠΔ.d[2] = ⲆΔⵠΔ.d[0];
        ⲆΔⵠΔ.re = [];
        ⲆΔⵠΔ.re[0] = [ⲆⲆ.ⲆⵠΔΔⵠΔΔ, ⲆⲆ.ᐃⵠⵠΔⲆⵠⵠ];
        ⲆΔⵠΔ.re[1] = ⲆΔⵠΔ.re[0];
        ⲆΔⵠΔ.re[2] = ⲆΔⵠΔ.re[0];
        ⲆΔⵠΔ.f = [];
        ⲆΔⵠΔ.f[0] = [ⲆⲆ.ᐃⵠᐃⵠⲆⲆⵠ, ⲆⲆ.ΔⲆᐃⲆⲆᐃᐃ];
        ⲆΔⵠΔ.f[1] = ⲆΔⵠΔ.f[0];
        ⲆΔⵠΔ.f[2] = ⲆΔⵠΔ.f[0];
        ⲆΔⵠΔ.isl = [];
        ⲆΔⵠΔ.isl[0] = [ⲆⲆ.ᐃⵠΔⲆΔⲆⲆ, ⲆⲆ.ⵠⵠᐃΔᐃΔᐃ];
        ⲆΔⵠΔ.isl[1] = ⲆΔⵠΔ.isl[0];
        ⲆΔⵠΔ.isl[2] = ⲆΔⵠΔ.isl[0];
        ⲆΔⵠΔ.c = [];
        ⲆΔⵠΔ.c[0] = [ⲆⲆ.ⲆⲆΔⲆΔᐃⲆ, ⲆⲆ.ⲆΔⵠⵠⵠⵠΔ];
        ⲆΔⵠΔ.c[1] = ⲆΔⵠΔ.c[0];
        ⲆΔⵠΔ.c[2] = ⲆΔⵠΔ.c[0];
        ⲆΔⵠΔ.wtb = [];
        ⲆΔⵠΔ.wtb[0] = [ⲆⲆ.ΔⲆᐃΔΔⲆᐃ, ⲆⲆ.ⲆΔⲆᐃⲆΔⵠ];
        ⲆΔⵠΔ.PIRANHA = [ⲆⲆ.ⵠΔΔⲆᐃⵠΔ, ⲆⲆ.ⲆΔΔⵠᐃⲆⵠ];
        ⲆΔⵠΔ.KRAKEN = [ⲆⲆ.ⵠⵠⵠᐃΔⵠⵠ, ⲆⲆ.ⵠⵠⲆᐃΔᐃⲆ];
        ⲆΔⵠΔ.FOX = [ⲆⲆ.ᐃᐃΔⲆⵠᐃΔ, ⲆⲆ.ΔΔⵠΔⵠⲆΔ];
        ⲆΔⵠΔ.WOLF = [ⲆⲆ.ⲆⵠᐃⵠⵠⲆᐃ, ⲆⲆ.ⵠΔⵠⵠᐃⵠᐃ];
        ⲆΔⵠΔ.SPIDER = [ⲆⲆ.ⲆⵠΔⲆΔⲆⲆ, ⲆⲆ.ⲆᐃΔᐃⵠΔⵠ];
        ⲆΔⵠΔ.BEAR = [ⲆⲆ.ⲆΔⵠᐃΔⲆᐃ, ⲆⲆ.ⲆΔᐃᐃⵠⲆⵠ];
        ⲆΔⵠΔ.CAVE = [ⲆⲆ.ᐃᐃΔⲆⵠΔΔ, ⲆⲆ.ΔⲆΔᐃⵠΔⲆ];
        ⲆΔⵠΔ.MAP = [ⲆⲆ.ⵠⵠⵠⵠⲆⲆⵠ, ⲆⲆ.ⵠΔⲆⲆΔΔⵠ];
        ⲆΔⵠΔ.FOREST = [ⲆⲆ.ⲆᐃⲆⵠΔⲆΔ, ⲆⲆ.ⲆⵠⲆᐃⲆᐃⲆ];
        ⲆΔⵠΔ.WINTER = [ⲆⲆ.ⵠⲆⲆⲆᐃⵠⲆ, ⲆⲆ.ΔΔᐃᐃⲆⵠⲆ];
        ⲆΔⵠΔ.DESERT = [ⲆⲆ.ⵠⲆΔⲆⵠⵠᐃ, ⲆⲆ.ⲆⵠⲆⲆⵠᐃᐃ];
        ⲆΔⵠΔ.LAVA = [ⲆⲆ.ⲆᐃΔᐃⵠᐃΔ, ⲆⲆ.ⲆΔΔⲆⲆⲆⲆ];
        for (var c in ⲆΔⵠΔ) {
            for (var d = ⲆΔⵠΔ[c], e = 0; e < d.length; e++) {
                var f = d[e];
                if (f.ᐃⲆⵠΔΔⵠⲆ !== undefined) {
                    f.ᐃⲆⵠΔΔⵠⲆ();
                } else if (f.length > 0) {
                    for (var g = 0; g < f.length; g++) {
                        if (f[g].ᐃⲆⵠΔΔⵠⲆ !== undefined) {
                            f[g].ᐃⲆⵠΔΔⵠⲆ();
                        }
                    }
                }
            }
        }
        console.log(As, undefined);
    }
    function Xm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.translate(0, a * 15);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        vt(e, undefined, c[0], a * 11);
        e.translate(0, a * -5);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103, a * 154);
        e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
        e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
        e.closePath();
        vt(e, c[3], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        vt(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 182, a * 185);
        e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
        e.closePath();
        vt(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222, a * 287);
        e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
        e.closePath();
        vt(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 290);
        e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
        e.closePath();
        vt(e, c[1], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 184);
        e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
        e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
        e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
        e.closePath();
        vt(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 251, a * 276);
        e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
        e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
        e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
        e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
        e.closePath();
        vt(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        vt(e, undefined, c[2], a * 11);
        return d;
    }
    function Zm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 81;
        d.height = a * 77;
        e.translate(0, a * 10);
        e.scale(0.2, 0.2);
        e.translate(0, a * -30);
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 36.5, a * 278.0625);
            e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
            e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
            e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
            e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
            e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
            e.closePath();
            vt(e, b[0], b[3], a * 50);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36.5, a * 278.0625);
        e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
        e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
        e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
        e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
        e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
        e.closePath();
        vt(e, b[0], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 214.5, a * 124.0625);
        e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
        e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
        e.closePath();
        vt(e, b[0], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 145.0625);
        e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
        e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
        e.closePath();
        vt(e, b[0], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103.5, a * 169.0625);
        e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
        e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
        e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
        e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
        e.closePath();
        vt(e, b[2], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 194.5, a * 313.0625);
        e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
        e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
        e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
        e.closePath();
        vt(e, b[1]);
        e.scale(3, 3);
        e.translate(15, a * 10);
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 4, a * 32);
            e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
            e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
            e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
            vt(e, Zk, b[3], a * 28);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 56, a * 6);
            e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
            e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
            e.closePath();
            vt(e, b[3], b[3], a * 28);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 32);
        e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
        e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
        e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
        vt(e, undefined, b[1], a * 17);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 6);
        e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
        e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
        e.closePath();
        vt(e, b[1], b[1], a * 17);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 32);
        e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
        e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
        e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
        vt(e, undefined, b[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 6);
        e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
        e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
        e.closePath();
        vt(e, b[2], b[2], a * 10);
        return d;
    }
    function $m(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 158;
        d.height = a * 201;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96.5, a * 76.421875);
        e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
        e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
        e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
        e.closePath();
        vt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 61.5, a * 78.421875);
        e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
        e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
        e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
        e.closePath();
        vt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 127.421875);
        e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
        e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
        e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
        e.closePath();
        vt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41.5, a * 134.421875);
        e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
        e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
        e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
        e.closePath();
        vt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 78.5, a * 51.921875);
        e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
        e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
        e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
        e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
        e.closePath();
        vt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 72.421875);
        e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
        e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
        e.closePath();
        vt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.5, a * 163.421875);
        e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
        e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
        e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
        e.closePath();
        vt(e, c[8], c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79.5, a * 61.421875);
        e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
        e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
        e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
        e.closePath();
        vt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 72.421875);
        e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
        e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
        e.closePath();
        vt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96.5, a * 76.421875);
        e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
        e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
        e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
        e.closePath();
        vt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 61.5, a * 78.421875);
        e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
        e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
        e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
        e.closePath();
        vt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 127.421875);
        e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
        e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
        e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
        e.closePath();
        vt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41.5, a * 134.421875);
        e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
        e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
        e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
        e.closePath();
        vt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 78.5, a * 51.921875);
        e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
        e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
        e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
        e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
        e.closePath();
        vt(e, c[3], c[2], a * 4);
        ut(e, a * 108.5, a * 148.421875, a * 9);
        vt(e, c[5]);
        ut(e, a * 106.5, a * 144.421875, a * 3);
        vt(e, c[6]);
        ut(e, a * 46.5, a * 148.421875, a * 9);
        vt(e, c[5]);
        ut(e, a * 44.5, a * 144.421875, a * 3);
        vt(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 114.421875);
        e.bezierCurveTo(a * 121.5, a * 137.421875, a * 118.5, a * 133.421875, a * 108.5, a * 139.421875);
        e.bezierCurveTo(a * 94.5, a * 146.421875, a * 96.5, a * 148.421875, a * 95.5, a * 152.421875);
        vt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.translate(0, a * -2);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35.5, a * 131.421875);
        e.bezierCurveTo(a * 36.5, a * 140.421875, a * 39.5, a * 140.421875, a * 49.5, a * 143.421875);
        e.bezierCurveTo(a * 59.5, a * 149.421875, a * 57.5, a * 151.421875, a * 59.5, a * 155.421875);
        vt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 57.421875);
        e.bezierCurveTo(a * 101.5, a * 120.421875, a * 92.5, a * 127.421875, a * 78.5, a * 134.421875);
        e.bezierCurveTo(a * 51.5, a * 131.421875, a * 63.5, a * 102.421875, a * 70.5, a * 59.421875);
        e.bezierCurveTo(a * 75, a * 55.421875, a * 78.5, a * 52.421875, a * 79.5, a * 51.421875);
        e.closePath();
        vt(e, c[4]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79.5, a * 61.421875);
        e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
        e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
        e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
        e.closePath();
        vt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 72.421875);
        e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
        e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
        e.closePath();
        vt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 154.421875);
        e.bezierCurveTo(a * 93.5, a * 163.921875, a * 93.5, a * 163.921875, a * 99.5, a * 173.421875);
        e.bezierCurveTo(a * 95, a * 177.421875, a * 95, a * 177.421875, a * 90.5, a * 181.421875);
        e.bezierCurveTo(a * 89, a * 167.921875, a * 89, a * 167.921875, a * 87.5, a * 154.421875);
        e.closePath();
        vt(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 81.5, a * 164.421875);
        e.bezierCurveTo(a * 84, a * 172.921875, a * 84, a * 172.921875, a * 86.5, a * 181.421875);
        e.bezierCurveTo(a * 82.5, a * 182.421875, a * 82.5, a * 182.421875, a * 78.5, a * 183.421875);
        e.closePath();
        vt(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 164.421875);
        e.bezierCurveTo(a * 73.5, a * 173.921875, a * 73.5, a * 173.921875, a * 74.5, a * 183.421875);
        e.bezierCurveTo(a * 70.5, a * 182.921875, a * 70.5, a * 182.921875, a * 66.5, a * 182.421875);
        e.closePath();
        vt(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65.5, a * 156.421875);
        e.bezierCurveTo(a * 65, a * 168.421875, a * 65, a * 168.421875, a * 64.5, a * 180.421875);
        e.bezierCurveTo(a * 58.5, a * 177.421875, a * 58.5, a * 177.421875, a * 52.5, a * 174.421875);
        e.closePath();
        vt(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.5, a * 163.421875);
        e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
        e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
        e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
        e.closePath();
        vt(e, c[3], c[2], a * 4);
        return d;
    }
    function ec(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 573;
        d.height = a * 350;
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 336, a * 72);
            e.bezierCurveTo(a * 366, a * 15, a * 426, a * 36, a * 497, a * 83);
            e.bezierCurveTo(a * 522, a * 85, a * 522, a * 85, a * 547, a * 87);
            e.bezierCurveTo(a * 476.5, a * 205, a * 476.5, a * 205, a * 406, a * 323);
            e.bezierCurveTo(a * 297.5, a * 319, a * 297.5, a * 319, a * 189, a * 315);
            e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 243);
            e.bezierCurveTo(a * 92, a * 140, a * 92, a * 140, a * 162, a * 37);
            e.bezierCurveTo(a * 173, a * 39, a * 173, a * 39, a * 184, a * 41);
            e.bezierCurveTo(a * 185, a * 38.5, a * 185, a * 38.5, a * 186, a * 36);
            e.bezierCurveTo(a * 323, a * 13, a * 322, a * 25, a * 337, a * 74);
            e.closePath();
            vt(e, b[4], b[4], a * 35);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 168, a * 42);
        e.bezierCurveTo(a * 255, a * 60, a * 255, a * 60, a * 342, a * 78);
        e.bezierCurveTo(a * 443, a * 81.5, a * 443, a * 81.5, a * 544, a * 85);
        e.bezierCurveTo(a * 475, a * 204.5, a * 475, a * 204.5, a * 406, a * 324);
        e.bezierCurveTo(a * 297.5, a * 320, a * 297.5, a * 320, a * 189, a * 316);
        e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 242);
        e.closePath();
        vt(e, b[0], b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 188, a * 41);
        e.bezierCurveTo(a * 308, a * 15, a * 325, a * 18, a * 337, a * 66);
        e.bezierCurveTo(a * 191, a * 305, a * 196, a * 286, a * 184, a * 307);
        e.bezierCurveTo(a * 175, a * 250, a * 90, a * 254, a * 52, a * 241);
        e.closePath();
        vt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 336, a * 71);
        e.bezierCurveTo(a * 375, a * 8, a * 429, a * 50, a * 518, a * 92);
        e.bezierCurveTo(a * 455, a * 199.5, a * 455, a * 199.5, a * 392, a * 307);
        e.bezierCurveTo(a * 227, a * 301, a * 261, a * 255, a * 188, a * 308);
        e.closePath();
        vt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 357, a * 76);
        e.bezierCurveTo(a * 390, a * 67, a * 414, a * 86, a * 435, a * 104);
        e.bezierCurveTo(a * 417, a * 135, a * 417, a * 135, a * 399, a * 166);
        e.bezierCurveTo(a * 352, a * 140, a * 345, a * 139, a * 319, a * 142);
        e.closePath();
        vt(e, b[3], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 309, a * 168);
        e.bezierCurveTo(a * 345, a * 163, a * 372, a * 180, a * 412, a * 203);
        vt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 263, a * 54);
        e.bezierCurveTo(a * 305, a * 44, a * 307, a * 51, a * 311, a * 64);
        e.bezierCurveTo(a * 270.5, a * 129.5, a * 270.5, a * 129.5, a * 230, a * 195);
        e.bezierCurveTo(a * 221, a * 175, a * 203, a * 171, a * 186, a * 172);
        e.closePath();
        vt(e, b[3], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 292, a * 198);
        e.bezierCurveTo(a * 328, a * 191, a * 364, a * 211, a * 401, a * 237);
        vt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 245, a * 68);
        e.bezierCurveTo(a * 210, a * 72, a * 210, a * 72, a * 189, a * 69);
        vt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222, a * 96);
        e.bezierCurveTo(a * 196, a * 97, a * 193, a * 97, a * 177, a * 92);
        vt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 207, a * 124);
        e.bezierCurveTo(a * 179, a * 123, a * 177, a * 124, a * 161, a * 119);
        vt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 183);
        e.bezierCurveTo(a * 184, a * 185, a * 203, a * 198, a * 219, a * 221);
        vt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 213);
        e.bezierCurveTo(a * 161, a * 214, a * 193, a * 227, a * 201, a * 249);
        vt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 399, a * 257);
        e.bezierCurveTo(a * 287, a * 215, a * 280, a * 215, a * 263, a * 222);
        e.bezierCurveTo(a * 253, a * 238, a * 247, a * 245, a * 243, a * 254);
        e.bezierCurveTo(a * 267, a * 236, a * 292, a * 263, a * 377, a * 284);
        vt(e, b[3], b[3], a * 12);
        return d;
    }
    function ic(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 316;
        d.height = a * 365;
        e.save();
        e.translate(a * 156.07142639160156, a * 51.81248474121094);
        e.rotate(0);
        wt(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
        e.restore();
        vt(e, c[1], c[2], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110.57142639160156, a * 197.09820556640625);
        e.bezierCurveTo(a * 158.07142639160156, a * 179.09820556640625, a * 158.07142639160156, a * 179.09820556640625, a * 205.57142639160156, a * 161.09820556640625);
        e.bezierCurveTo(a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 309.8125);
        e.bezierCurveTo(a * 205.57142639160156, a * 323.8125, a * 200.57142639160156, a * 325.8125, a * 187.57142639160156, a * 326.8125);
        e.bezierCurveTo(a * 155.57142639160156, a * 326.3125, a * 155.57142639160156, a * 326.3125, a * 123.57142639160156, a * 325.8125);
        e.bezierCurveTo(a * 111.57142639160156, a * 326.8125, a * 109.57142639160156, a * 321.8125, a * 110.57142639160156, a * 312.8125);
        e.closePath();
        vt(e, c[3], c[4], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
        e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
        e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
        e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
        e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
        e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
        e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
        e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
        e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
        e.closePath();
        vt(e, undefined, c[5], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
        e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
        e.closePath();
        vt(e, Oo, c[6], a * 15);
        return d;
    }
    function tc(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 120;
        var g = b * 140;
        d.width = f;
        d.height = g;
        d.width = b * 130;
        d.height = b * 120;
        wt(e, b * 10, b * 12, b * 110, b * 90, b * 10);
        vt(e, c[0]);
        wt(e, b * 10, b * 5, b * 110, b * 90, b * 10);
        vt(e, c[1], c[2], b * 4);
        var a = Dt(-Math.PI / 5, rd(b * 0.5, true, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
        e.drawImage(a, b * 12, b * 18);
        a = Dt(Math.PI / 4, Lu(b * 0.55, true, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
        e.drawImage(a, b * 36, b * 16);
        return d;
    }
    function nc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 168;
        d.height = a * 100;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, a * 5);
        e.save();
        e.translate(a * 24.5, a * 44.30000305175781);
        wt(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
        e.restore();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 37.80000305175781);
        e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
        e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
        e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
        e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
        e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
        e.closePath();
        vt(e, c[0]);
        ut(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -10, a * -5);
        e.save();
        e.translate(a * 24.5, a * 44.30000305175781);
        wt(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
        e.restore();
        vt(e, undefined, c[3], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 37.80000305175781);
        e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
        e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
        e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
        e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
        e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
        e.closePath();
        vt(e, jj, c[3], a * 6);
        ut(e, a * 78, a * 44.80000305175781, a * 42.44616584663204);
        vt(e, undefined, c[3], a * 6);
        e.save();
        e.translate(a * 24.5, a * 44.30000305175781);
        wt(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
        e.restore();
        vt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 37.80000305175781);
        e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
        e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
        e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
        e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
        e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
        e.closePath();
        vt(e, c[1]);
        ut(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
        vt(e, c[2], c[1], a * 4);
        ut(e, a * 78, a * 44.80000305175781, a * 29.68164415931166);
        vt(e, c[3], c[1], a * 4);
        ut(e, a * 78, a * 44, a * 20);
        vt(e, c[4]);
        return d;
    }
    function oc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 202;
        d.height = a * 202;
        e.translate(a * 2, a * 1);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 98, a * 41.15177917480469);
        e.rotate(0.8);
        wt(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
        e.restore();
        vt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 22.5089111328125);
        e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
        vt(e, c[2]);
        e.save();
        e.translate(a * 147.5, a * 69.5089111328125);
        e.rotate(0.2);
        wt(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
        e.restore();
        vt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 163, a * 59.50892639160156);
        e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
        vt(e, c[2]);
        e.save();
        e.translate(a * 143.5, a * 128.2946319580078);
        e.rotate(1.24);
        wt(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
        e.restore();
        vt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 135.93748474121094);
        e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
        vt(e, c[2]);
        e.save();
        e.translate(a * 99, a * 156.08035278320312);
        e.rotate(0.84);
        wt(e, a * -18, a * -18, a * 36, a * 36, a * 7);
        e.restore();
        vt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 136.08035278320312);
        e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
        vt(e, c[2]);
        e.save();
        e.translate(a * 54, a * 72.22320556640625);
        e.rotate(1.32);
        wt(e, a * -18, a * -19, a * 36, a * 38, a * 7);
        e.restore();
        vt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34, a * 60.79463195800781);
        e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
        vt(e, c[2]);
        e.save();
        e.translate(a * 49, a * 127.29463195800781);
        e.rotate(1.76);
        wt(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
        e.restore();
        vt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141.7946319580078);
        e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
        vt(e, c[2]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 98, a * 41.15177917480469);
        e.rotate(0.8);
        wt(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
        e.restore();
        vt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 22.5089111328125);
        e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
        vt(e, Og, c[4], a * 5);
        e.save();
        e.translate(a * 147.5, a * 69.5089111328125);
        e.rotate(0.2);
        wt(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
        e.restore();
        vt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 163, a * 59.50892639160156);
        e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
        vt(e, undefined, c[4], a * 5);
        e.save();
        e.translate(a * 143.5, a * 128.2946319580078);
        e.rotate(1.24);
        wt(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
        e.restore();
        vt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 135.93748474121094);
        e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
        vt(e, undefined, c[4], a * 5);
        e.save();
        e.translate(a * 99, a * 156.08035278320312);
        e.rotate(0.84);
        wt(e, a * -18, a * -18, a * 36, a * 36, a * 7);
        e.restore();
        vt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 136.08035278320312);
        e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
        vt(e, undefined, c[4], a * 5);
        e.save();
        e.translate(a * 54, a * 72.22320556640625);
        e.rotate(1.32);
        wt(e, a * -18, a * -19, a * 36, a * 38, a * 7);
        e.restore();
        vt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34, a * 60.79463195800781);
        e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
        vt(e, jj, c[4], a * 5);
        e.save();
        e.translate(a * 49, a * 127.29463195800781);
        e.rotate(1.76);
        wt(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
        e.restore();
        vt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141.7946319580078);
        e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
        vt(e, undefined, c[4], a * 5);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 98, a * 99);
        zt(e, 6, a * 70.28669492273468, a * 10);
        e.restore();
        vt(e, c[2]);
        e.save();
        e.translate(a * 98, a * 99);
        zt(e, 6, a * 56.455940020351264, a * 10);
        e.restore();
        vt(e, c[2]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 98, a * 99);
        zt(e, 6, a * 70.28669492273468, a * 10);
        e.restore();
        vt(e, c[5], c[6], a * 5);
        e.save();
        e.translate(a * 98, a * 99);
        zt(e, 6, a * 56.455940020351264, a * 10);
        e.restore();
        vt(e, c[7], c[8], a * 7);
        return d;
    }
    function ac(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 104;
        d.height = a * 117;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 90);
        e.bezierCurveTo(a * 20, a * 99.5, a * 20, a * 99.5, a * 36, a * 109);
        e.bezierCurveTo(a * 67, a * 92, a * 67, a * 92, a * 98, a * 75);
        e.bezierCurveTo(a * 91, a * 27, a * 91, a * 27, a * 91, a * 28);
        e.bezierCurveTo(a * 72.5, a * 16, a * 72.5, a * 16, a * 54, a * 4);
        e.bezierCurveTo(a * 33.5, a * 10, a * 33.5, a * 10, a * 13, a * 16);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 6, a * 76);
        e.bezierCurveTo(a * 13.5, a * 51.5, a * 13.5, a * 51.5, a * 21, a * 27);
        e.bezierCurveTo(a * 37.5, a * 17, a * 37.5, a * 17, a * 54, a * 7);
        e.bezierCurveTo(a * 33.5, a * 12.5, a * 33.5, a * 12.5, a * 13, a * 18);
        e.closePath();
        vt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 62);
        e.bezierCurveTo(a * 28.5, a * 53, a * 28.5, a * 53, a * 33, a * 44);
        e.bezierCurveTo(a * 41.5, a * 41, a * 41.5, a * 41, a * 50, a * 38);
        e.bezierCurveTo(a * 52.5, a * 35, a * 52.5, a * 35, a * 55, a * 32);
        e.bezierCurveTo(a * 52, a * 30, a * 52, a * 30, a * 49, a * 28);
        e.bezierCurveTo(a * 38, a * 31.5, a * 38, a * 31.5, a * 27, a * 35);
        e.closePath();
        vt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 107);
        e.bezierCurveTo(a * 66, a * 90.5, a * 66, a * 90.5, a * 96, a * 74);
        e.bezierCurveTo(a * 93, a * 52.5, a * 93, a * 52.5, a * 90, a * 31);
        e.bezierCurveTo(a * 87, a * 48, a * 87, a * 48, a * 84, a * 65);
        e.closePath();
        vt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 1, a * 89);
        e.bezierCurveTo(a * 18, a * 100, a * 34, a * 110, a * 35, a * 111);
        e.bezierCurveTo(a * 67, a * 93, a * 67, a * 93, a * 99, a * 75);
        e.bezierCurveTo(a * 100, a * 78.5, a * 100, a * 78.5, a * 101, a * 82);
        e.bezierCurveTo(a * 68, a * 99, a * 68, a * 99, a * 35, a * 116);
        e.bezierCurveTo(a * 18, a * 106.5, a * 18, a * 106.5, a * 1, a * 97);
        e.closePath();
        vt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 107);
        e.bezierCurveTo(a * 66.5, a * 91.5, a * 66.5, a * 91.5, a * 97, a * 76);
        e.bezierCurveTo(a * 94.5, a * 52, a * 94.5, a * 52, a * 92, a * 28);
        e.bezierCurveTo(a * 73, a * 15.5, a * 73, a * 15.5, a * 54, a * 3);
        e.bezierCurveTo(a * 33, a * 9.5, a * 33, a * 9.5, a * 12, a * 16);
        e.bezierCurveTo(a * 8, a * 53, a * 8, a * 53, a * 4, a * 90);
        e.bezierCurveTo(a * 18.5, a * 99, a * 18.5, a * 99, a * 33, a * 108);
        e.closePath();
        vt(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22, a * 71);
        e.bezierCurveTo(a * 30, a * 76.5, a * 30, a * 76.5, a * 38, a * 82);
        e.bezierCurveTo(a * 53, a * 72, a * 53, a * 72, a * 68, a * 62);
        e.bezierCurveTo(a * 68, a * 52, a * 68, a * 52, a * 68, a * 42);
        e.bezierCurveTo(a * 59.5, a * 35.5, a * 59.5, a * 35.5, a * 51, a * 29);
        e.bezierCurveTo(a * 39.5, a * 32, a * 39.5, a * 32, a * 28, a * 35);
        e.bezierCurveTo(a * 25, a * 52, a * 25, a * 52, a * 22, a * 69);
        e.closePath();
        vt(e, Ft, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 5, a * 89);
        e.bezierCurveTo(a * 20, a * 73, a * 12.5, a * 80.5, a * 20, a * 72);
        e.closePath();
        vt(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 102);
        e.bezierCurveTo(a * 36, a * 92.5, a * 36, a * 92.5, a * 37, a * 83);
        e.closePath();
        vt(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 68, a * 62);
        e.bezierCurveTo(a * 81, a * 67.5, a * 81, a * 67.5, a * 94, a * 73);
        e.closePath();
        vt(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 70, a * 41);
        e.bezierCurveTo(a * 80, a * 35.5, a * 80, a * 35.5, a * 90, a * 30);
        e.closePath();
        vt(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 33);
        e.bezierCurveTo(a * 21.5, a * 26.5, a * 21.5, a * 26.5, a * 15, a * 20);
        e.closePath();
        vt(e, zr, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 28);
        e.bezierCurveTo(a * 53, a * 17, a * 53, a * 17, a * 55, a * 6);
        e.closePath();
        vt(e, Li, c[4], a * 6);
        return d;
    }
    function rc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 102;
        d.height = a * 102;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(3, 3);
        wt(e, a * 24, a * 26, a * 70, a * 9, a * 10);
        vt(e, c[0]);
        wt(e, a * 26, a * 70, a * 70, a * 9, a * 10);
        vt(e, c[0]);
        wt(e, a * 5, a * 3, a * 22, a * 94, a * 5);
        vt(e, c[0]);
        wt(e, a * 40, a * 3, a * 22, a * 94, a * 5);
        vt(e, c[0]);
        wt(e, a * 75, a * 3, a * 22, a * 94, a * 5);
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(-3, -3);
        wt(e, a * 24, a * 26, a * 70, a * 9, a * 10);
        vt(e, c[1]);
        wt(e, a * 26, a * 70, a * 70, a * 9, a * 10);
        vt(e, c[1]);
        wt(e, a * 5, a * 3, a * 22, a * 94, a * 5);
        vt(e, c[2], c[3], a * 4);
        wt(e, a * 40, a * 3, a * 22, a * 94, a * 5);
        vt(e, c[2], c[3], a * 4);
        wt(e, a * 75, a * 3, a * 22, a * 94, a * 5);
        vt(e, c[2], c[3], a * 4);
        return d;
    }
    function sc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 465;
        d.height = a * 310;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126, a * 192);
        e.bezierCurveTo(a * 198, a * 202, a * 245, a * 203, a * 335, a * 194);
        e.bezierCurveTo(a * 336, a * 232, a * 326, a * 235, a * 232, a * 237);
        e.bezierCurveTo(a * 161, a * 235, a * 122, a * 235, a * 126, a * 193);
        e.closePath();
        vt(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 146, a * 239);
        e.bezierCurveTo(a * 174, a * 74, a * 287, a * 88, a * 320, a * 240);
        e.bezierCurveTo(a * 329, a * 231, a * 340, a * 219, a * 332, a * 115);
        e.bezierCurveTo(a * 330, a * 40, a * 144, a * 30, a * 129, a * 116);
        e.bezierCurveTo(a * 124, a * 217, a * 124, a * 228, a * 143, a * 237);
        e.closePath();
        vt(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126, a * 193);
        e.bezierCurveTo(a * 173, a * 94, a * 209, a * 100, a * 228, a * 57);
        e.bezierCurveTo(a * 190, a * 112, a * 165, a * 115, a * 127, a * 184);
        e.closePath();
        vt(e, Li, c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 230, a * 57);
        e.bezierCurveTo(a * 266, a * 117, a * 310, a * 130, a * 332, a * 183);
        e.bezierCurveTo(a * 290, a * 112, a * 262, a * 109, a * 230, a * 56);
        e.closePath();
        vt(e, tj, c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154, a * 212);
        e.bezierCurveTo(a * 208, a * 224, a * 252, a * 219, a * 305, a * 212);
        e.bezierCurveTo(a * 267, a * 219, a * 204, a * 222, a * 155, a * 212);
        e.closePath();
        vt(e, uj, c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 239, a * 59);
        e.bezierCurveTo(a * 302, a * 72, a * 325, a * 84, a * 326, a * 115);
        e.bezierCurveTo(a * 289, a * 80, a * 270, a * 88, a * 253, a * 78);
        e.closePath();
        vt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 216, a * 61);
        e.bezierCurveTo(a * 209, a * 70, a * 209, a * 70, a * 202, a * 79);
        e.bezierCurveTo(a * 173, a * 87, a * 162, a * 91, a * 137, a * 107);
        e.bezierCurveTo(a * 153, a * 78, a * 174, a * 67, a * 212, a * 62);
        e.closePath();
        vt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 175, a * 125);
        e.bezierCurveTo(a * 218, a * 94, a * 238, a * 90, a * 281, a * 125);
        e.bezierCurveTo(a * 245, a * 89, a * 240, a * 80, a * 228, a * 67);
        e.bezierCurveTo(a * 207, a * 100, a * 192, a * 104, a * 177, a * 123);
        e.closePath();
        vt(e, c[2]);
        return d;
    }
    function hc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 88;
        d.height = a * 88;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(0.52);
        zt(e, 6, a * 43, a * 10);
        e.restore();
        vt(e, c[0], c[1], a * 3);
        return d;
    }
    function lc() {
        new Date().getTime();
        Vm();
        (function () {
            ᐃΔ[814] = Gb(1, [{
                f: Um,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
            }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[815] = ᐃΔ[814];
            ᐃΔ[955] = [];
            ᐃΔ[955][0] = ⲆⲆ.ᐃᐃⵠⵠΔᐃΔ;
            ᐃΔ[955][1] = ⲆⲆ.ΔᐃᐃⲆᐃΔΔ;
            ᐃΔ[955][2] = ⲆⲆ.ⵠΔᐃⲆⲆΔΔ;
            ᐃΔ[956] = ᐃΔ[955];
            ᐃΔ[972] = [];
            ᐃΔ[972][0] = ⲆⲆ.ⵠᐃⲆⲆΔⵠΔ;
            ᐃΔ[972][1] = ⲆⲆ.ⲆⵠᐃᐃΔᐃⵠ;
            ᐃΔ[972][2] = ⲆⲆ.ⲆⵠⵠⵠΔᐃⵠ;
            ᐃΔ[973] = ᐃΔ[972];
            ᐃΔ[987] = [];
            ᐃΔ[987][0] = ⲆⲆ.ⵠᐃⲆⵠⵠⵠΔ;
            ᐃΔ[987][1] = ⲆⲆ.ⵠΔⲆᐃᐃⲆⲆ;
            ᐃΔ[987][2] = ⲆⲆ.ᐃΔΔⲆΔᐃⵠ;
            ᐃΔ[988] = ᐃΔ[987];
            ᐃΔ[1154] = [];
            ᐃΔ[1154][0] = ⲆⲆ.ⲆᐃΔⵠΔΔΔ;
            ᐃΔ[1154][1] = ⲆⲆ.ⵠΔΔᐃΔᐃⵠ;
            ᐃΔ[1154][2] = ⲆⲆ.ⵠⲆⵠᐃⵠⵠⲆ;
            ᐃΔ[1155] = ᐃΔ[1154];
            ᐃΔ[965] = [];
            ᐃΔ[965][0] = ⲆⲆ.ᐃⵠⲆᐃᐃᐃⵠ;
            ᐃΔ[965][1] = ⲆⲆ.ΔΔⵠᐃⲆⲆⲆ;
            ᐃΔ[965][2] = ⲆⲆ.ᐃⵠⵠⲆᐃⵠⲆ;
            ᐃΔ[974] = ᐃΔ[965];
            ᐃΔ[1028] = [];
            ᐃΔ[1028][0] = ⲆⲆ.ⵠΔΔΔᐃⵠⵠ;
            ᐃΔ[1028][1] = ⲆⲆ.ᐃⵠᐃΔⵠⲆⵠ;
            ᐃΔ[1028][2] = ⲆⲆ.ᐃᐃⵠⲆᐃⲆⵠ;
            ᐃΔ[1029] = ᐃΔ[1028];
            ᐃΔ[1027] = ᐃΔ[1028];
            ᐃΔ[712] = [];
            ᐃΔ[712][0] = ⲆⲆ.ᐃᐃⵠΔⲆΔΔΔΔ;
            ᐃΔ[712][1] = ⲆⲆ.ΔⲆⲆᐃⲆⲆⵠⵠᐃ;
            ᐃΔ[712][2] = ⲆⲆ.ᐃⲆⲆᐃᐃⲆⲆⲆⲆ;
            ᐃΔ[713] = ᐃΔ[712];
            ᐃΔ[714] = ᐃΔ[712];
            ᐃΔ[1031] = [];
            ᐃΔ[1031][0] = ⲆⲆ.ⲆΔⵠᐃᐃΔᐃ;
            ᐃΔ[1031][1] = ⲆⲆ.ΔΔⵠᐃᐃⲆⵠ;
            ᐃΔ[1031][2] = ⲆⲆ.ⲆⲆⲆⲆⲆΔⲆ;
            ᐃΔ[1032] = ᐃΔ[1031];
            ᐃΔ[1030] = ᐃΔ[1031];
            ᐃΔ[423] = [];
            ᐃΔ[423][0] = ⲆⲆ.ⲆΔⵠⲆⵠΔᐃ;
            ᐃΔ[423][1] = ⲆⲆ.ⲆΔΔⲆⵠⵠⵠ;
            ᐃΔ[423][2] = ⲆⲆ.ⵠⲆⲆᐃⵠⲆΔ;
            ᐃΔ[425] = ᐃΔ[423];
            ᐃΔ[424] = ᐃΔ[423];
            ᐃΔ[1233] = [];
            ᐃΔ[1233][0] = ⲆⲆ.ⲆⵠⵠΔⲆᐃⵠⵠⵠ;
            ᐃΔ[1233][1] = ⲆⲆ.ᐃᐃⵠΔⲆᐃΔⵠᐃ;
            ᐃΔ[1233][2] = ⲆⲆ.ΔⲆⵠΔΔᐃᐃⵠᐃ;
            ᐃΔ[1234] = ᐃΔ[1233];
            ᐃΔ[1230] = [];
            ᐃΔ[1230][0] = ⲆⲆ.ΔΔᐃⵠΔᐃΔⵠⵠ;
            ᐃΔ[1230][1] = ⲆⲆ.ΔⲆⲆΔᐃᐃⲆΔᐃ;
            ᐃΔ[1230][2] = ⲆⲆ.ⲆⲆⲆΔΔⵠᐃⲆΔ;
            ᐃΔ[1232] = ᐃΔ[1230];
            ᐃΔ[1231] = ᐃΔ[1230];
            ᐃΔ[569] = [];
            ᐃΔ[569][0] = ⲆⲆ.ᐃⵠⵠⲆᐃⵠᐃⵠΔ;
            ᐃΔ[569][1] = ⲆⲆ.ΔᐃⵠⵠⵠᐃⵠⵠⲆ;
            ᐃΔ[569][2] = ⲆⲆ.ΔⵠΔᐃⵠᐃΔᐃΔ;
            ᐃΔ[571] = ᐃΔ[569];
            ᐃΔ[570] = ᐃΔ[569];
            ᐃΔ[1166] = [];
            ᐃΔ[1166][0] = ⲆⲆ.ᐃⲆⵠⵠΔⲆⲆⵠᐃ;
            ᐃΔ[1166][1] = ⲆⲆ.ⵠᐃᐃⵠΔⲆΔⵠΔ;
            ᐃΔ[1166][2] = ⲆⲆ.ΔᐃⲆΔⲆⵠΔΔⵠ;
            ᐃΔ[1167] = ᐃΔ[1166];
            ᐃΔ[1168] = ᐃΔ[1166];
            ᐃΔ[572] = [];
            ᐃΔ[572][0] = ⲆⲆ.ⵠⲆᐃΔⲆⵠⵠΔⲆ;
            ᐃΔ[572][1] = ⲆⲆ.ΔᐃᐃᐃΔⵠΔⵠΔ;
            ᐃΔ[572][2] = ⲆⲆ.ᐃⲆⲆΔΔΔⵠⵠⵠ;
            ᐃΔ[574] = ᐃΔ[572];
            ᐃΔ[573] = ᐃΔ[572];
            ᐃΔ[1169] = [];
            ᐃΔ[1169][0] = ⲆⲆ.ΔΔᐃᐃⵠᐃᐃΔⵠ;
            ᐃΔ[1169][1] = ⲆⲆ.ⲆⵠΔⲆⵠⵠⵠⲆᐃ;
            ᐃΔ[1169][2] = ⲆⲆ.ΔᐃⲆΔⵠᐃⵠⵠᐃ;
            ᐃΔ[1170] = ᐃΔ[1169];
            ᐃΔ[1171] = ᐃΔ[1169];
            ᐃΔ[575] = [];
            ᐃΔ[575][0] = ⲆⲆ.ᐃⵠᐃᐃᐃᐃⲆᐃⲆ;
            ᐃΔ[575][1] = ⲆⲆ.ΔΔⲆⵠΔⵠᐃⲆⵠ;
            ᐃΔ[575][2] = ⲆⲆ.ΔΔⵠᐃⲆᐃᐃⲆΔ;
            ᐃΔ[577] = ᐃΔ[575];
            ᐃΔ[576] = ᐃΔ[575];
            ᐃΔ[1172] = [];
            ᐃΔ[1172][0] = ⲆⲆ.ΔⲆᐃⲆΔⵠⵠⲆⵠ;
            ᐃΔ[1172][1] = ⲆⲆ.ⵠᐃᐃⲆᐃⲆᐃᐃⲆ;
            ᐃΔ[1172][2] = ⲆⲆ.ΔⵠᐃΔⵠᐃⵠᐃΔ;
            ᐃΔ[1173] = ᐃΔ[1172];
            ᐃΔ[1174] = ᐃΔ[1172];
            ᐃΔ[578] = [];
            ᐃΔ[578][0] = ⲆⲆ.ᐃⲆⲆⵠⵠᐃⲆⵠⲆ;
            ᐃΔ[578][1] = ⲆⲆ.ⵠⲆⲆⲆΔⵠΔᐃᐃ;
            ᐃΔ[578][2] = ⲆⲆ.ᐃᐃᐃᐃⵠΔᐃΔⵠ;
            ᐃΔ[580] = ᐃΔ[578];
            ᐃΔ[579] = ᐃΔ[578];
            ᐃΔ[1175] = [];
            ᐃΔ[1175][0] = ⲆⲆ.ⵠⵠΔⵠⲆᐃΔᐃΔ;
            ᐃΔ[1175][1] = ⲆⲆ.ΔᐃⵠⲆⵠᐃᐃΔⵠ;
            ᐃΔ[1175][2] = ⲆⲆ.ⵠⵠΔⲆⲆᐃΔⵠⲆ;
            ᐃΔ[1176] = ᐃΔ[1175];
            ᐃΔ[1177] = ᐃΔ[1175];
            ᐃΔ[581] = [];
            ᐃΔ[581][0] = ⲆⲆ.ΔΔⵠΔⲆΔⲆΔⵠ;
            ᐃΔ[581][1] = ⲆⲆ.ⵠⵠⲆᐃᐃⵠᐃᐃΔ;
            ᐃΔ[581][2] = ⲆⲆ.ᐃⲆⲆⵠΔᐃⵠΔⵠ;
            ᐃΔ[583] = ᐃΔ[581];
            ᐃΔ[582] = ᐃΔ[581];
            ᐃΔ[1178] = [];
            ᐃΔ[1178][0] = ⲆⲆ.ⲆⵠᐃⲆⲆᐃΔⵠⵠ;
            ᐃΔ[1178][1] = ⲆⲆ.ⲆⵠΔⵠΔᐃⲆⲆᐃ;
            ᐃΔ[1178][2] = ⲆⲆ.ⵠᐃᐃⵠⵠⵠⵠⵠⲆ;
            ᐃΔ[1179] = ᐃΔ[1178];
            ᐃΔ[1180] = ᐃΔ[1178];
            ᐃΔ[584] = [];
            ᐃΔ[584][0] = ⲆⲆ.ⵠᐃⲆΔⵠⲆⲆⵠΔ;
            ᐃΔ[584][1] = ⲆⲆ.ⲆΔⲆⵠⲆⵠΔᐃΔ;
            ᐃΔ[584][2] = ⲆⲆ.ⲆΔⵠⵠᐃⵠΔⲆΔ;
            ᐃΔ[586] = ᐃΔ[584];
            ᐃΔ[585] = ᐃΔ[584];
            ᐃΔ[1181] = [];
            ᐃΔ[1181][0] = ⲆⲆ.ⲆΔᐃⲆᐃᐃΔᐃⲆ;
            ᐃΔ[1181][1] = ⲆⲆ.ⲆΔⵠⲆΔⲆⵠᐃⵠ;
            ᐃΔ[1181][2] = ⲆⲆ.ᐃⵠᐃⵠⲆᐃΔΔΔ;
            ᐃΔ[1182] = ᐃΔ[1181];
            ᐃΔ[1183] = ᐃΔ[1181];
            ᐃΔ[587] = [];
            ᐃΔ[587][0] = ⲆⲆ.ᐃΔⲆᐃⵠⲆⲆⲆⲆ;
            ᐃΔ[587][1] = ⲆⲆ.ⵠⲆᐃⵠΔⲆⵠΔᐃ;
            ᐃΔ[587][2] = ⲆⲆ.ⵠᐃⲆⵠᐃᐃⲆⵠⵠ;
            ᐃΔ[589] = ᐃΔ[587];
            ᐃΔ[588] = ᐃΔ[587];
            ᐃΔ[1184] = [];
            ᐃΔ[1184][0] = ⲆⲆ.ⲆᐃΔⲆⵠᐃⲆᐃᐃ;
            ᐃΔ[1184][1] = ⲆⲆ.ᐃⲆΔⵠⵠⵠᐃΔⲆ;
            ᐃΔ[1184][2] = ⲆⲆ.ⲆΔΔⵠⲆΔᐃΔⲆ;
            ᐃΔ[1185] = ᐃΔ[1184];
            ᐃΔ[1186] = ᐃΔ[1184];
            ᐃΔ[1257] = [];
            ᐃΔ[1257][0] = ⲆⲆ.ΔᐃᐃⲆⲆⵠⵠΔⲆ;
            ᐃΔ[1257][1] = ⲆⲆ.ⵠⲆᐃⵠᐃᐃⲆⵠΔ;
            ᐃΔ[1257][2] = ⲆⲆ.ᐃⵠⲆᐃⲆΔᐃᐃⲆ;
            ᐃΔ[1258] = ᐃΔ[1257];
            ᐃΔ[1256] = ᐃΔ[1257];
            ᐃΔ[1260] = [];
            ᐃΔ[1260][0] = ⲆⲆ.ᐃᐃΔⵠΔⲆⲆⵠⲆ;
            ᐃΔ[1260][1] = ⲆⲆ.ᐃΔⵠΔᐃᐃᐃᐃΔ;
            ᐃΔ[1260][2] = ⲆⲆ.ⲆⲆⵠⲆⵠⵠΔᐃⵠ;
            ᐃΔ[1261] = ᐃΔ[1260];
            ᐃΔ[1259] = ᐃΔ[1260];
            ᐃΔ[1263] = [];
            ᐃΔ[1263][0] = ⲆⲆ.ΔᐃⲆⲆᐃᐃᐃⵠΔ;
            ᐃΔ[1263][1] = ⲆⲆ.ⲆᐃᐃΔΔᐃᐃⵠᐃ;
            ᐃΔ[1263][2] = ⲆⲆ.ᐃⲆⵠᐃΔⲆⲆᐃⵠ;
            ᐃΔ[1264] = ᐃΔ[1263];
            ᐃΔ[1262] = ᐃΔ[1263];
            ᐃΔ[1266] = [];
            ᐃΔ[1266][0] = ⲆⲆ.ⵠΔᐃΔⵠᐃⵠⵠⵠ;
            ᐃΔ[1266][1] = ⲆⲆ.ᐃⵠⲆⵠᐃᐃΔⲆⵠ;
            ᐃΔ[1266][2] = ⲆⲆ.ⲆᐃΔΔᐃⲆⵠᐃⵠ;
            ᐃΔ[1267] = ᐃΔ[1266];
            ᐃΔ[1265] = ᐃΔ[1266];
            ᐃΔ[1269] = [];
            ᐃΔ[1269][0] = ⲆⲆ.ⵠᐃΔⵠΔΔᐃⵠⵠ;
            ᐃΔ[1269][1] = ⲆⲆ.ΔΔΔΔᐃⵠⲆΔΔ;
            ᐃΔ[1269][2] = ⲆⲆ.ⵠΔᐃⲆⲆᐃⵠᐃⲆ;
            ᐃΔ[1270] = ᐃΔ[1269];
            ᐃΔ[1268] = ᐃΔ[1269];
            ᐃΔ[1272] = [];
            ᐃΔ[1272][0] = ⲆⲆ.ΔⵠⲆᐃⵠⵠᐃⵠⵠ;
            ᐃΔ[1272][1] = ⲆⲆ.ΔⲆⲆⲆⲆΔⲆⲆⲆ;
            ᐃΔ[1272][2] = ⲆⲆ.ᐃⲆⵠᐃΔᐃⲆΔⵠ;
            ᐃΔ[1273] = ᐃΔ[1272];
            ᐃΔ[1271] = ᐃΔ[1272];
            ᐃΔ[1239] = [];
            ᐃΔ[1239][0] = ⲆⲆ.ΔΔⵠᐃⲆᐃⲆᐃᐃ;
            ᐃΔ[1239][1] = ⲆⲆ.ⵠⲆⵠΔΔⵠⲆⵠⵠ;
            ᐃΔ[1239][2] = ⲆⲆ.ᐃⵠⵠᐃΔⵠᐃΔⵠ;
            ᐃΔ[1240] = ᐃΔ[1239];
            ᐃΔ[1238] = ᐃΔ[1239];
            ᐃΔ[1242] = [];
            ᐃΔ[1242][0] = ⲆⲆ.ᐃⵠᐃᐃΔᐃⵠⲆⲆ;
            ᐃΔ[1242][1] = ⲆⲆ.ΔⵠᐃⵠΔᐃΔⵠⵠ;
            ᐃΔ[1242][2] = ⲆⲆ.ΔᐃⵠⲆᐃⵠⲆΔᐃ;
            ᐃΔ[1243] = ᐃΔ[1242];
            ᐃΔ[1241] = ᐃΔ[1242];
            ᐃΔ[1245] = [];
            ᐃΔ[1245][0] = ⲆⲆ.ⲆⵠⲆⵠⵠΔⵠΔᐃ;
            ᐃΔ[1245][1] = ⲆⲆ.ⲆΔⲆⲆⵠᐃⲆⲆⲆ;
            ᐃΔ[1245][2] = ⲆⲆ.ᐃᐃⲆⲆᐃⵠΔΔⲆ;
            ᐃΔ[1246] = ᐃΔ[1245];
            ᐃΔ[1244] = ᐃΔ[1245];
            ᐃΔ[1248] = [];
            ᐃΔ[1248][0] = ⲆⲆ.ᐃⲆⵠΔᐃᐃΔⲆΔ;
            ᐃΔ[1248][1] = ⲆⲆ.ᐃᐃᐃⲆⲆᐃᐃⲆⵠ;
            ᐃΔ[1248][2] = ⲆⲆ.ᐃⲆⵠᐃⵠΔⵠΔᐃ;
            ᐃΔ[1249] = ᐃΔ[1248];
            ᐃΔ[1247] = ᐃΔ[1248];
            ᐃΔ[1251] = [];
            ᐃΔ[1251][0] = ⲆⲆ.ΔⲆⲆⵠⲆᐃⵠΔⵠ;
            ᐃΔ[1251][1] = ⲆⲆ.ᐃⵠⲆΔΔⲆⵠⵠΔ;
            ᐃΔ[1251][2] = ⲆⲆ.ᐃⵠᐃⵠΔᐃᐃᐃᐃ;
            ᐃΔ[1252] = ᐃΔ[1251];
            ᐃΔ[1250] = ᐃΔ[1251];
            ᐃΔ[1254] = [];
            ᐃΔ[1254][0] = ⲆⲆ.ΔᐃΔΔⵠⵠᐃᐃΔ;
            ᐃΔ[1254][1] = ⲆⲆ.ⲆⲆᐃⵠⵠᐃᐃⵠⲆ;
            ᐃΔ[1254][2] = ⲆⲆ.ΔᐃᐃᐃΔΔⲆΔⵠ;
            ᐃΔ[1255] = ᐃΔ[1254];
            ᐃΔ[1253] = ᐃΔ[1254];
            ᐃΔ[1227] = [];
            ᐃΔ[1227][0] = ⲆⲆ.ᐃⲆᐃⲆᐃⵠΔⵠⵠ;
            ᐃΔ[1227][1] = ⲆⲆ.ΔᐃⲆⵠⵠᐃⵠⲆΔ;
            ᐃΔ[1227][2] = ⲆⲆ.ⵠᐃⵠⵠΔⵠⲆⵠⵠ;
            ᐃΔ[1229] = ᐃΔ[1227];
            ᐃΔ[1228] = ᐃΔ[1227];
            ᐃΔ[1187] = [];
            ᐃΔ[1187][0] = ⲆⲆ.ΔⲆⲆᐃⲆΔⵠ;
            ᐃΔ[1187][1] = ⲆⲆ.ⲆⲆΔⲆⲆᐃⵠ;
            ᐃΔ[1187][2] = ⲆⲆ.ΔⲆΔᐃⵠⵠⵠ;
            ᐃΔ[1188] = ᐃΔ[1187];
            ᐃΔ[nr.ⵠⲆⲆⲆΔⲆⵠⵠⵠ] = ᐃΔ[1187];
            ᐃΔ[840] = Gb(1, [{
                f: Gt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
            }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[841] = ᐃΔ[840];
            ᐃΔ[850] = Gb(1, [{
                f: Am,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
            }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[851] = ᐃΔ[850];
            ᐃΔ[644] = Gb(1, [{
                f: _b,
                x: -1,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
            }, {
                f: Qb,
                x: -1,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
            }, {
                f: Fb,
                x: -1,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
            }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[643] = ᐃΔ[644];
            ᐃΔ[639] = Gb(1, [{
                f: Db,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#A89F67", "#9E8456"]
            }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[800] = Gb(1, [{
                f: Eu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
            }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[799] = ᐃΔ[800];
            ᐃΔ[631] = Gb(1, [{
                f: Jd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#A89F67", "#9E8456"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[632] = ᐃΔ[631];
            ᐃΔ[311] = Gb(1, [{
                f: Jd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#493d36", "#332b28"]
            }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[284] = ᐃΔ[311];
            ᐃΔ[808] = Gb(1, [{
                f: Jd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#c67933", "#b17238"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[809] = ᐃΔ[808];
            ᐃΔ[834] = Gb(1, [{
                f: Jd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#e8e8e8", "#bbbbbb"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[835] = ᐃΔ[834];
            ᐃΔ[845] = Gb(1, [{
                f: Jd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#328a56", "#449573"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[846] = ᐃΔ[845];
            ᐃΔ[949] = Gb(1, [{
                f: Jd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#c98e2f", "#a36b11"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[950] = ᐃΔ[949];
            ᐃΔ[951] = ᐃΔ[949];
            ᐃΔ[966] = Gb(1, [{
                f: Jd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#13a56d", "#098a58"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[967] = ᐃΔ[966];
            ᐃΔ[968] = ᐃΔ[966];
            ᐃΔ[981] = Gb(1, [{
                f: Jd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#3a8214", "#4a9c1e"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[982] = ᐃΔ[981];
            ᐃΔ[983] = ᐃΔ[981];
            ᐃΔ[959] = Gb(1, [{
                f: Jd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#b22419", "#99110e"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[960] = ᐃΔ[959];
            ᐃΔ[961] = ᐃΔ[959];
            ᐃΔ[309] = Gb(1, [{
                f: qb,
                x: -2,
                y: -2,
                a: 1,
                r: -Math.PI / 7,
                c: ["#4d2d14", "#432516"]
            }, {
                f: Kb,
                x: -2,
                y: -2,
                a: 1,
                r: -Math.PI / 7,
                c: ["#efd435", "#ec8d35", "#e96132"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[302] = ᐃΔ[309];
            ᐃΔ[328] = Gb(1, [{
                f: Nb,
                x: -2,
                y: -1,
                a: 1,
                r: -Math.PI / 7,
                c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
            }, {
                f: Kb,
                x: -2,
                y: -1,
                a: 1,
                r: -Math.PI / 7,
                c: ["#efd435", "#ec8d35", "#e96132"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[327] = ᐃΔ[328];
            ᐃΔ[860] = Gb(1, [{
                f: cd,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
            }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[865] = Gb(1, [{
                f: Ad,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
            }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[829] = Gb(1, [{
                f: od,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[261] = Gb(1, [{
                f: pd,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[292] = Gb(1, [{
                f: ud,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[293] = Gb(1, [{
                f: zd,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[455] = Gb(1, [{
                f: wd,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[313] = Gb(1, [{
                f: rd,
                x: -2,
                y: 5,
                a: 1,
                r: -Math.PI / 5,
                c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[312] = Gb(1, [{
                f: rd,
                x: -2,
                y: 5,
                a: 1,
                r: -Math.PI / 5,
                c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[258] = Gb(1, [{
                f: rd,
                x: -2,
                y: 5,
                a: 1,
                r: -Math.PI / 5,
                c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[296] = Gb(1, [{
                f: rd,
                x: -2,
                y: 5,
                a: 1,
                r: -Math.PI / 5,
                c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[458] = Gb(1, [{
                f: rd,
                x: -2,
                y: 5,
                a: 1,
                r: -Math.PI / 5,
                c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[1017] = [];
            ᐃΔ[1017][0] = ⲆⲆ.ⲆⵠⵠⲆⲆⲆΔ;
            ᐃΔ[1017][1] = ⲆⲆ.ΔⲆⵠΔΔⲆΔ;
            ᐃΔ[1017][2] = ⲆⲆ.ⲆᐃΔⵠⲆᐃⵠ;
            ᐃΔ[1019] = ᐃΔ[1017];
            ᐃΔ[1018] = ᐃΔ[1017];
            ᐃΔ[315] = Gb(1, [{
                f: Id,
                x: -5,
                y: -5,
                a: 1,
                r: 0,
                c: ["#252B28", "#58645F", "#75827D"]
            }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[297] = Gb(1, [{
                f: Wd,
                x: -5,
                y: -5,
                a: 1,
                r: 0,
                c: ["#282823", "#877c2d", "#c4bc51"]
            }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[298] = Gb(1, [{
                f: Nd,
                x: -5,
                y: -5,
                a: 1,
                r: 0,
                c: ["#232828", "#3fc9c9", "#74ede6"]
            }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[316] = Gb(1, [{
                f: qb,
                x: 0,
                y: -5,
                a: 1,
                r: Math.PI / 2.5,
                c: ["#4d2d14", "#432516"]
            }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[830] = ᐃΔ[829];
            ᐃΔ[254] = ᐃΔ[261];
            ᐃΔ[290] = ᐃΔ[292];
            ᐃΔ[291] = ᐃΔ[293];
            ᐃΔ[456] = ᐃΔ[455];
            ᐃΔ[314] = ᐃΔ[313];
            ᐃΔ[256] = ᐃΔ[312];
            ᐃΔ[295] = ᐃΔ[258];
            ᐃΔ[257] = ᐃΔ[296];
            ᐃΔ[460] = ᐃΔ[458];
            ᐃΔ[277] = Gb(1, [{
                f: mb,
                x: 0,
                y: 0,
                a: 1,
                r: 0
            }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[310] = Gb(1, [{
                f: pb,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
            }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[262] = ᐃΔ[310];
            ᐃΔ[329] = Gb(1, [{
                f: Qt,
                x: -2,
                y: -2,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
            }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[263] = ᐃΔ[329];
            ᐃΔ[331] = Gb(1, [{
                f: Xd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
            }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[332] = ᐃΔ[331];
            ᐃΔ[492] = Gb(1, [{
                f: Qt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
            }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[493] = ᐃΔ[492];
            ᐃΔ[330] = Gb(1, [{
                f: Xt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
            }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[265] = ᐃΔ[330];
            ᐃΔ[317] = Gb(1, [{
                f: Zd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
            }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[318] = ᐃΔ[317];
            ᐃΔ[319] = Gb(1, [{
                f: ru,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[320] = ᐃΔ[319];
            ᐃΔ[362] = Gb(1, [{
                f: yu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[363] = ᐃΔ[362];
            ᐃΔ[364] = Gb(1, [{
                f: yu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[365] = ᐃΔ[364];
            ᐃΔ[361] = Gb(1, [{
                f: pu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[360] = ᐃΔ[361];
            ᐃΔ[495] = Gb(1, [{
                f: pu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[496] = ᐃΔ[495];
            ᐃΔ[335] = Gb(1, [{
                f: Ut,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[268] = ᐃΔ[335];
            ᐃΔ[372] = Gb(1, [{
                f: St,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[371] = ᐃΔ[372];
            ᐃΔ[499] = Gb(1, [{
                f: St,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[498] = ᐃΔ[499];
            ᐃΔ[375] = Gb(1, [{
                f: Yt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[374] = ᐃΔ[375];
            ᐃΔ[378] = Gb(1, [{
                f: bu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[377] = ᐃΔ[378];
            ᐃΔ[337] = Gb(1, [{
                f: vu,
                x: 0,
                y: 2,
                a: 1,
                r: 0,
                c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[338] = ᐃΔ[337];
            ᐃΔ[300] = Gb(1, [{
                f: wb,
                x: 0,
                y: -3,
                a: 1,
                r: 0,
                c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
            }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[323] = Gb(1, [{
                f: wb,
                x: 0,
                y: -3,
                a: 1,
                r: 0,
                c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
            }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[325] = ᐃΔ[323];
            ᐃΔ[305] = Gb(1, [{
                f: jb,
                x: -3,
                y: -3,
                a: 1,
                r: 0,
                c: ["#cec0c4", "#ffffff", "#6d6768"]
            }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[513] = Gb(1, [{
                f: jb,
                x: -3,
                y: -3,
                a: 1,
                r: 0,
                c: ["#d4e9ec", "#37b1d7", "#506c71"]
            }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[515] = ᐃΔ[513];
            ᐃΔ[368] = Gb(1, [{
                f: uu,
                x: -3,
                y: -3,
                a: 1,
                r: 0,
                c: ["#ef96be", "#ffffff"]
            }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[1162] = Gb(1, [{
                f: uu,
                x: -3,
                y: -3,
                a: 1,
                r: 0,
                c: ["#55423e", "#ffffff"]
            }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[178] = Gb(1, [{
                f: Tt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
            }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[179] = Gb(1, [{
                f: Tt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
            }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[624] = Gb(1, [{
                f: uu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#201851", "#b6222a"]
            }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[393] = Gb(1, [{
                f: uu,
                x: -3,
                y: -3,
                a: 1,
                r: 0,
                c: ["#231f20", "#b6222a"]
            }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[505] = Gb(1, [{
                f: uu,
                x: -3,
                y: -3,
                a: 1,
                r: 0,
                c: ["#ffffff", "#b6222a"]
            }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[369] = Gb(1, [{
                f: lu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
            }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[370] = ᐃΔ[369];
            ᐃΔ[381] = Gb(1, [{
                f: au,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
            }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[380] = ᐃΔ[381];
            ᐃΔ[502] = Gb(1, [{
                f: zu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
            }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[503] = ᐃΔ[502];
            ᐃΔ[880] = Gb(1, [{
                f: Zb,
                x: 0,
                y: 5,
                a: 1,
                r: 0,
                c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
            }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[881] = ᐃΔ[880];
            ᐃΔ[882] = Gb(1, [{
                f: Ub,
                x: 0,
                y: 5,
                a: 1,
                r: 0,
                c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
            }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[883] = ᐃΔ[882];
            ᐃΔ[303] = Gb(1, [{
                f: Wb,
                x: -2,
                y: -2,
                a: 1,
                r: 0,
                c: ["#ffffff", "#cec0c4"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[304] = ᐃΔ[303];
            ᐃΔ[392] = [];
            ᐃΔ[392][0] = ⲆⲆ.ᐃⲆΔΔⵠᐃᐃ;
            ᐃΔ[392][1] = ⲆⲆ.ᐃⲆᐃΔⵠⵠⲆ;
            ᐃΔ[392][2] = ⲆⲆ.ᐃᐃᐃⵠΔⵠᐃ;
            ᐃΔ[367] = ᐃΔ[392];
            ᐃΔ[975] = [];
            ᐃΔ[975][0] = ⲆⲆ.ᐃⵠᐃⲆⲆᐃΔ;
            ᐃΔ[975][1] = ⲆⲆ.ΔᐃⵠᐃᐃⲆᐃ;
            ᐃΔ[975][2] = ⲆⲆ.ΔⵠⲆᐃΔΔΔ;
            ᐃΔ[977] = ᐃΔ[975];
            ᐃΔ[976] = ᐃΔ[975];
            ᐃΔ[978] = [];
            ᐃΔ[978][0] = ⲆⲆ.ΔᐃⲆΔⵠⲆⲆ;
            ᐃΔ[978][1] = ⲆⲆ.ᐃⲆⵠⵠᐃⲆΔ;
            ᐃΔ[978][2] = ⲆⲆ.ᐃΔⲆⵠΔⵠΔ;
            ᐃΔ[980] = ᐃΔ[978];
            ᐃΔ[979] = ᐃΔ[978];
            ᐃΔ[1158] = [];
            ᐃΔ[1158][0] = ⲆⲆ.ⵠⲆᐃⲆᐃΔᐃ;
            ᐃΔ[1158][1] = ⲆⲆ.ⵠⲆᐃⲆᐃΔᐃ;
            ᐃΔ[1158][2] = ⲆⲆ.ⵠⲆᐃⲆᐃΔᐃ;
            ᐃΔ[1159] = ᐃΔ[1158];
            ᐃΔ[426] = [];
            ᐃΔ[426][0] = ⲆⲆ.ΔᐃᐃᐃⵠⲆⲆ;
            ᐃΔ[426][1] = ⲆⲆ.ΔᐃΔΔⲆΔⵠ;
            ᐃΔ[426][2] = ⲆⲆ.ⲆᐃⵠⲆΔⲆᐃ;
            ᐃΔ[427] = ᐃΔ[426];
            ᐃΔ[428] = ᐃΔ[426];
            ᐃΔ[1160] = [];
            ᐃΔ[1160][0] = ⲆⲆ.ⵠⵠΔΔᐃⵠⲆ;
            ᐃΔ[1160][1] = ⲆⲆ.ⵠⵠΔΔᐃⵠⲆ;
            ᐃΔ[1160][2] = ⲆⲆ.ⵠⵠΔΔᐃⵠⲆ;
            ᐃΔ[1161] = ᐃΔ[1160];
            ᐃΔ[1236] = [];
            ᐃΔ[1236][0] = ⲆⲆ.ⵠᐃⵠᐃᐃΔⲆᐃⲆ;
            ᐃΔ[1236][1] = ⲆⲆ.ΔΔᐃⵠΔᐃᐃⲆᐃ;
            ᐃΔ[1236][2] = ⲆⲆ.ⵠⵠⲆᐃΔᐃⵠⵠΔ;
            ᐃΔ[1235] = ᐃΔ[1236];
            ᐃΔ[1237] = ᐃΔ[1236];
            ᐃΔ[991] = [];
            ᐃΔ[991][0] = ⲆⲆ.ⵠⲆΔᐃΔᐃΔ;
            ᐃΔ[991][1] = ⲆⲆ.ΔⵠᐃⵠⲆⲆΔ;
            ᐃΔ[991][2] = ⲆⲆ.ⵠⵠⲆΔⲆⲆⲆ;
            ᐃΔ[990] = ᐃΔ[991];
            ᐃΔ[992] = ᐃΔ[991];
            ᐃΔ[994] = [];
            ᐃΔ[994][0] = ⲆⲆ.ΔⵠΔⲆΔΔΔ;
            ᐃΔ[994][1] = ⲆⲆ.ᐃΔⲆΔΔⲆⵠ;
            ᐃΔ[994][2] = ⲆⲆ.ⲆⵠⲆΔᐃⲆΔ;
            ᐃΔ[993] = ᐃΔ[994];
            ᐃΔ[995] = ᐃΔ[994];
            ᐃΔ[997] = [];
            ᐃΔ[997][0] = ⲆⲆ.ⵠᐃⲆΔᐃΔⵠ;
            ᐃΔ[997][1] = ⲆⲆ.ᐃΔᐃⲆⵠⵠᐃ;
            ᐃΔ[997][2] = ⲆⲆ.ᐃⲆⲆΔᐃⲆⵠ;
            ᐃΔ[996] = ᐃΔ[997];
            ᐃΔ[998] = ᐃΔ[997];
            ᐃΔ[1000] = [];
            ᐃΔ[1000][0] = ⲆⲆ.ᐃⵠⵠΔⵠⲆⲆ;
            ᐃΔ[1000][1] = ⲆⲆ.ⵠΔᐃⵠⵠⵠΔ;
            ᐃΔ[1000][2] = ⲆⲆ.ⲆⵠⲆⵠⵠΔⲆ;
            ᐃΔ[999] = ᐃΔ[1000];
            ᐃΔ[1001] = ᐃΔ[1000];
            ᐃΔ[1003] = [];
            ᐃΔ[1003][0] = ⲆⲆ.ΔⵠⲆⵠⲆⵠⵠ;
            ᐃΔ[1003][1] = ⲆⲆ.ⲆΔⵠⲆᐃΔⲆ;
            ᐃΔ[1003][2] = ⲆⲆ.ⵠᐃⲆⲆⵠⲆⲆ;
            ᐃΔ[1002] = ᐃΔ[1003];
            ᐃΔ[1004] = ᐃΔ[1003];
            ᐃΔ[1006] = [];
            ᐃΔ[1006][0] = ⲆⲆ.ⵠᐃⵠᐃⲆⵠᐃ;
            ᐃΔ[1006][1] = ⲆⲆ.ⵠᐃⵠⵠΔⲆⲆ;
            ᐃΔ[1006][2] = ⲆⲆ.ⵠᐃⵠⵠⵠⲆΔ;
            ᐃΔ[1005] = ᐃΔ[1006];
            ᐃΔ[1007] = ᐃΔ[1006];
            ᐃΔ[1009] = [];
            ᐃΔ[1009][0] = ⲆⲆ.ΔⲆΔΔΔΔⵠ;
            ᐃΔ[1009][1] = ⲆⲆ.ΔᐃΔⵠⲆⵠΔ;
            ᐃΔ[1009][2] = ⲆⲆ.ⵠΔᐃΔᐃⵠΔ;
            ᐃΔ[1008] = ᐃΔ[1009];
            ᐃΔ[1010] = ᐃΔ[1009];
            ᐃΔ[1012] = [];
            ᐃΔ[1012][0] = ⲆⲆ.ⵠᐃⵠⵠⵠΔⵠ;
            ᐃΔ[1012][1] = ⲆⲆ.ⲆⵠᐃΔⲆⲆᐃ;
            ᐃΔ[1012][2] = ⲆⲆ.ᐃᐃΔⵠⲆⵠΔ;
            ᐃΔ[1011] = ᐃΔ[1012];
            ᐃΔ[1013] = ᐃΔ[1012];
            ᐃΔ[1015] = [];
            ᐃΔ[1015][0] = ⲆⲆ.ⵠᐃⵠⵠᐃᐃⵠ;
            ᐃΔ[1015][1] = ⲆⲆ.ᐃⵠⲆΔⵠⲆⵠ;
            ᐃΔ[1015][2] = ⲆⲆ.ΔᐃⵠΔⵠⵠⵠ;
            ᐃΔ[1014] = ᐃΔ[1015];
            ᐃΔ[1016] = ᐃΔ[1015];
            ᐃΔ[1035] = [];
            ᐃΔ[1035][0] = ⲆⲆ.ᐃⵠⵠⲆᐃ;
            ᐃΔ[1035][1] = ⲆⲆ.ᐃⵠⵠⲆᐃ;
            ᐃΔ[1035][2] = ⲆⲆ.ᐃⵠⵠⲆᐃ;
            ᐃΔ[nr.ⲆⵠⲆⲆⵠⵠⵠⲆⲆ] = ᐃΔ[1035];
            ᐃΔ[1036] = ᐃΔ[1035];
            ᐃΔ[1037] = [];
            ᐃΔ[1037][0] = ⲆⲆ.ΔΔⲆᐃᐃ;
            ᐃΔ[1037][1] = ⲆⲆ.ΔΔⲆᐃᐃ;
            ᐃΔ[1037][2] = ⲆⲆ.ΔΔⲆᐃᐃ;
            ᐃΔ[nr.ᐃⲆⲆⵠᐃᐃⵠΔΔ] = ᐃΔ[1037];
            ᐃΔ[1038] = ᐃΔ[1037];
            ᐃΔ[1039] = [];
            ᐃΔ[1039][0] = ⲆⲆ.ⲆⲆᐃΔᐃ;
            ᐃΔ[1039][1] = ⲆⲆ.ⲆⲆᐃΔᐃ;
            ᐃΔ[1039][2] = ⲆⲆ.ⲆⲆᐃΔᐃ;
            ᐃΔ[nr.ⵠΔⵠᐃΔᐃⲆΔⵠ] = ᐃΔ[1039];
            ᐃΔ[1040] = ᐃΔ[1039];
            ᐃΔ[1156] = [];
            ᐃΔ[1156][0] = ⲆⲆ.ⵠΔΔⵠⵠ;
            ᐃΔ[1156][1] = ⲆⲆ.ⵠΔΔⵠⵠ;
            ᐃΔ[1156][2] = ⲆⲆ.ⵠΔΔⵠⵠ;
            ᐃΔ[1157] = ᐃΔ[1156];
            ᐃΔ[1046] = [];
            ᐃΔ[1046][0] = ⲆⲆ.ⲆⵠᐃⵠΔᐃⲆ;
            ᐃΔ[1046][1] = ⲆⲆ.ⲆΔⵠⵠᐃⲆᐃ;
            ᐃΔ[1046][2] = ⲆⲆ.ΔᐃⲆᐃᐃⵠⵠ;
            ᐃΔ[1048] = ᐃΔ[1046];
            ᐃΔ[1047] = ᐃΔ[1046];
            ᐃΔ[744] = [];
            ᐃΔ[744][0] = ⲆⲆ.ΔⵠⲆⲆⵠᐃΔ;
            ᐃΔ[744][1] = ⲆⲆ.ⵠΔᐃⵠⲆΔᐃ;
            ᐃΔ[744][2] = ⲆⲆ.ᐃⵠⵠΔⲆΔⲆ;
            ᐃΔ[746] = ᐃΔ[744];
            ᐃΔ[745] = ᐃΔ[744];
            ᐃΔ[747] = [];
            ᐃΔ[747][0] = ⲆⲆ.ΔⲆΔⵠⵠⲆᐃ;
            ᐃΔ[747][1] = ⲆⲆ.ⵠⲆΔΔⵠⵠΔ;
            ᐃΔ[747][2] = ⲆⲆ.ᐃⵠⲆΔⵠᐃΔ;
            ᐃΔ[749] = ᐃΔ[747];
            ᐃΔ[748] = ᐃΔ[747];
            ᐃΔ[1049] = [];
            ᐃΔ[1049][0] = ⲆⲆ.ⲆΔΔΔⵠΔⲆ;
            ᐃΔ[1049][1] = ⲆⲆ.ᐃΔΔⲆⲆⲆⵠ;
            ᐃΔ[1049][2] = ⲆⲆ.ΔᐃᐃᐃΔⵠⵠ;
            ᐃΔ[1051] = ᐃΔ[1049];
            ᐃΔ[1050] = ᐃΔ[1049];
            ᐃΔ[1189] = [];
            ᐃΔ[1189][0] = ⲆⲆ.ⲆᐃΔⲆᐃΔΔ;
            ᐃΔ[1189][1] = ⲆⲆ.ΔⲆᐃⵠᐃⵠΔ;
            ᐃΔ[1189][2] = ⲆⲆ.ⲆⲆⲆΔΔⲆⲆ;
            ᐃΔ[1191] = ᐃΔ[1189];
            ᐃΔ[1190] = ᐃΔ[1189];
            ᐃΔ[1110] = [];
            ᐃΔ[1110][0] = ⲆⲆ.ᐃΔⲆΔⲆⵠⵠ;
            ᐃΔ[1110][1] = ⲆⲆ.ⲆⲆΔⲆⲆⲆⲆ;
            ᐃΔ[1110][2] = ⲆⲆ.ⵠⵠⲆΔⵠⲆⵠ;
            ᐃΔ[1112] = ᐃΔ[1110];
            ᐃΔ[1111] = ᐃΔ[1110];
            ᐃΔ[1131] = [];
            ᐃΔ[1131][0] = ⲆⲆ.ᐃᐃⲆᐃⲆⵠⵠⵠᐃ;
            ᐃΔ[1131][1] = ⲆⲆ.ᐃⵠᐃᐃΔⵠᐃᐃⲆ;
            ᐃΔ[1131][2] = ⲆⲆ.ΔⲆⵠᐃᐃᐃⲆⵠᐃ;
            ᐃΔ[1133] = ᐃΔ[1131];
            ᐃΔ[1132] = ᐃΔ[1131];
            ᐃΔ[1137] = [];
            ᐃΔ[1137][0] = ⲆⲆ.ΔΔⲆᐃᐃⲆⵠ;
            ᐃΔ[1137][1] = ⲆⲆ.ⲆᐃⵠΔΔⲆΔ;
            ᐃΔ[1137][2] = ⲆⲆ.ⲆⵠⵠⵠⵠᐃⲆ;
            ᐃΔ[1138] = ᐃΔ[1137];
            ᐃΔ[1139] = ᐃΔ[1137];
            ᐃΔ[1140] = [];
            ᐃΔ[1140][0] = ⲆⲆ.ⵠⲆΔⲆᐃⵠΔ;
            ᐃΔ[1140][1] = ⲆⲆ.ⲆΔᐃⲆΔᐃⲆ;
            ᐃΔ[1140][2] = ⲆⲆ.ΔⵠᐃΔΔⵠⲆ;
            ᐃΔ[1141] = ᐃΔ[1140];
            ᐃΔ[1142] = ᐃΔ[1140];
            ᐃΔ[1117] = [];
            ᐃΔ[1117][0] = ⲆⲆ.ΔΔΔⵠᐃⵠⲆ;
            ᐃΔ[1117][1] = ⲆⲆ.ΔΔⵠᐃⵠΔⲆ;
            ᐃΔ[1117][2] = ⲆⲆ.ᐃᐃᐃᐃⵠⵠⲆ;
            ᐃΔ[1116] = ᐃΔ[1117];
            ᐃΔ[1118] = ᐃΔ[1117];
            ᐃΔ[1080] = [];
            ᐃΔ[1080][0] = ⲆⲆ.ᐃΔⵠΔΔⵠΔ;
            ᐃΔ[1080][1] = ⲆⲆ.ΔΔⲆⲆΔᐃΔ;
            ᐃΔ[1080][2] = ⲆⲆ.ⵠⵠΔΔΔᐃⵠ;
            ᐃΔ[1082] = ᐃΔ[1080];
            ᐃΔ[1081] = ᐃΔ[1080];
            ᐃΔ[1224] = [];
            ᐃΔ[1224][0] = ⲆⲆ.ᐃⲆΔᐃᐃΔΔΔⲆ;
            ᐃΔ[1224][1] = ⲆⲆ.ⲆᐃⵠᐃⵠΔⲆⲆⲆ;
            ᐃΔ[1224][2] = ⲆⲆ.ᐃᐃⵠᐃᐃⵠⵠⲆᐃ;
            ᐃΔ[1226] = ᐃΔ[1224];
            ᐃΔ[1225] = ᐃΔ[1224];
            ᐃΔ[1095] = [];
            ᐃΔ[1095][0] = ⲆⲆ.ΔᐃⵠⵠⲆⵠⵠ;
            ᐃΔ[1095][1] = ⲆⲆ.ΔᐃⲆΔⵠⵠΔ;
            ᐃΔ[1095][2] = ⲆⲆ.ᐃΔⲆⵠⵠⵠᐃ;
            ᐃΔ[1097] = ᐃΔ[1095];
            ᐃΔ[1096] = ᐃΔ[1095];
            ᐃΔ[717] = Gb(1, [{
                f: qm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
            }, {
                f: Sm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#e4c027"]
            }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[718] = ᐃΔ[717];
            ᐃΔ[408] = Gb(1, [{
                f: Vt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
            }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[409] = ᐃΔ[408];
            ᐃΔ[907] = Gb(1, [{
                f: fu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
            }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[909] = ᐃΔ[907];
            ᐃΔ[908] = ᐃΔ[907];
            ᐃΔ[197] = Gb(1, [{
                f: gu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
            }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[906] = ᐃΔ[197];
            ᐃΔ[901] = Gb(1, [{
                f: iu,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[900] = ᐃΔ[901];
            ᐃΔ[899] = ᐃΔ[901];
            ᐃΔ[401] = Gb(1, [{
                f: ju,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[402] = ᐃΔ[401];
            ᐃΔ[395] = Gb(1, [{
                f: mu,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[396] = ᐃΔ[395];
            ᐃΔ[398] = Gb(1, [{
                f: wu,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[399] = ᐃΔ[398];
            ᐃΔ[404] = Gb(1, [{
                f: ou,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[405] = ᐃΔ[404];
            ᐃΔ[472] = Gb(1, [{
                f: xu,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[473] = ᐃΔ[472];
            ᐃΔ[874] = Gb(1, [{
                f: tu,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
            }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[876] = ᐃΔ[874];
            ᐃΔ[875] = ᐃΔ[874];
            ᐃΔ[477] = Gb(1, [{
                f: Lu,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
            }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[478] = ᐃΔ[477];
            ᐃΔ[709] = Gb(1, [{
                f: wm,
                x: 0,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#939393", "#5f6061"]
            }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[711] = ᐃΔ[709];
            ᐃΔ[550] = Gb(1, [{
                f: Rm,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
            }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[551] = ᐃΔ[550];
            ᐃΔ[480] = Gb(1, [{
                f: Lu,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
            }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[481] = ᐃΔ[480];
            ᐃΔ[483] = Gb(1, [{
                f: Lu,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
            }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[484] = ᐃΔ[483];
            ᐃΔ[486] = Gb(1, [{
                f: Lu,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
            }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[487] = ᐃΔ[486];
            ᐃΔ[489] = [];
            ᐃΔ[489][0] = ⲆⲆ.ⵠΔⲆⲆⵠΔΔ;
            ᐃΔ[489][1] = ⲆⲆ.ⲆᐃᐃᐃΔⲆⵠ;
            ᐃΔ[489][2] = ⲆⲆ.ⵠᐃᐃᐃΔⵠᐃ;
            ᐃΔ[491] = ᐃΔ[489];
            ᐃΔ[490] = ᐃΔ[489];
            ᐃΔ[1195] = [];
            ᐃΔ[1195][0] = ⲆⲆ.ⵠΔᐃⵠᐃΔⲆ;
            ᐃΔ[1195][1] = ⲆⲆ.ⵠⵠᐃᐃⲆΔⵠ;
            ᐃΔ[1195][2] = ⲆⲆ.ⲆⵠⵠⵠⲆⵠΔ;
            ᐃΔ[1197] = ᐃΔ[1195];
            ᐃΔ[1196] = ᐃΔ[1195];
            ᐃΔ[1199] = [];
            ᐃΔ[1199][0] = ⲆⲆ.ΔⲆΔᐃⲆᐃⲆ;
            ᐃΔ[1199][1] = ⲆⲆ.ⵠⲆΔΔᐃⵠΔ;
            ᐃΔ[1199][2] = ⲆⲆ.ⵠⲆᐃΔΔΔⵠ;
            ᐃΔ[1201] = ᐃΔ[1199];
            ᐃΔ[1200] = ᐃΔ[1199];
            ᐃΔ[1203] = [];
            ᐃΔ[1203][0] = ⲆⲆ.ᐃⵠⲆΔⲆᐃᐃ;
            ᐃΔ[1203][1] = ⲆⲆ.ⲆⲆᐃⲆⵠΔΔ;
            ᐃΔ[1203][2] = ⲆⲆ.ⵠⲆΔᐃᐃᐃⵠ;
            ᐃΔ[1205] = ᐃΔ[1203];
            ᐃΔ[1204] = ᐃΔ[1203];
            ᐃΔ[1207] = [];
            ᐃΔ[1207][0] = ⲆⲆ.ⵠᐃⲆΔⲆΔᐃ;
            ᐃΔ[1207][1] = ⲆⲆ.ⵠΔΔᐃⵠΔΔ;
            ᐃΔ[1207][2] = ⲆⲆ.ᐃᐃᐃΔⵠΔⲆ;
            ᐃΔ[1209] = ᐃΔ[1207];
            ᐃΔ[1208] = ᐃΔ[1207];
            ᐃΔ[1211] = [];
            ᐃΔ[1211][0] = ⲆⲆ.ΔᐃⵠΔⵠⵠΔ;
            ᐃΔ[1211][1] = ⲆⲆ.ΔⲆⵠΔΔⲆⲆ;
            ᐃΔ[1211][2] = ⲆⲆ.ΔΔⵠⵠᐃᐃⵠ;
            ᐃΔ[1213] = ᐃΔ[1211];
            ᐃΔ[1212] = ᐃΔ[1211];
            ᐃΔ[1215] = [];
            ᐃΔ[1215][0] = ⲆⲆ.ⲆᐃⵠᐃⵠΔΔ;
            ᐃΔ[1215][1] = ⲆⲆ.ΔⵠΔⵠⵠⵠᐃ;
            ᐃΔ[1215][2] = ⲆⲆ.ⲆᐃⵠᐃᐃⲆᐃ;
            ᐃΔ[1217] = ᐃΔ[1215];
            ᐃΔ[1216] = ᐃΔ[1215];
            ᐃΔ[518] = Gb(1, [{
                f: Wm,
                x: -2,
                y: -2,
                a: 1,
                r: 0,
                c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
            }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[519] = ᐃΔ[518];
            ᐃΔ[532] = Gb(1, [{
                f: Hm,
                x: -2,
                y: -2,
                a: 1,
                r: -Math.PI / 5,
                c: ["#141414", "#c4a23a", "#816511"]
            }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[533] = ᐃΔ[532];
            ᐃΔ[521] = Gb(1, [{
                f: _m,
                x: -2,
                y: -2,
                a: 1,
                r: 0,
                c: ["#141414", "#178a99", "#0a6372", "#03282e"]
            }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
            ᐃΔ[523] = Gb(1, [{
                f: _m,
                x: -2,
                y: -2,
                a: 1,
                r: 0,
                c: ["#120202", "#991616", "#750a0a", "#120202"]
            }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
            ᐃΔ[529] = Gb(1, [{
                f: xm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#347f93", "#54a4ba"]
            }, {
                f: oc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
            }, {
                f: hc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#a9e4ed", "#86d4e0"]
            }, {
                f: Km,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[530] = ᐃΔ[529];
            ᐃΔ[553] = Gb(1, [{
                f: vc,
                x: 45,
                y: 70,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[555] = ᐃΔ[553];
            ᐃΔ[541] = Gb(1, [{
                f: dm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
            }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[542] = ᐃΔ[541];
            ᐃΔ[779] = Gb(1, [{
                f: Nm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[780] = ᐃΔ[779];
            ᐃΔ[767] = Gb(1, [{
                f: sc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#2a2938", "#242330", "#313041"]
            }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[768] = ᐃΔ[767];
            ᐃΔ[776] = Gb(1, [{
                f: Ym,
                x: 0,
                y: 3,
                a: 1,
                r: 0,
                c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
            }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[777] = ᐃΔ[776];
            ᐃΔ[771] = Gb(1, [{
                f: Ym,
                x: 0,
                y: 3,
                a: 1,
                r: 0,
                c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
            }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[772] = ᐃΔ[771];
            ᐃΔ[756] = Gb(1, [{
                f: Qm,
                x: 0,
                y: 10,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[758] = ᐃΔ[756];
            ᐃΔ[760] = Gb(1, [{
                f: Qm,
                x: 0,
                y: 10,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[762] = ᐃΔ[760];
            ᐃΔ[764] = Gb(1, [{
                f: Qm,
                x: 0,
                y: 10,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[770] = ᐃΔ[764];
            ᐃΔ[910] = Gb(1, [{
                f: _t,
                x: -1,
                y: 0,
                a: 1,
                r: 0,
                c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[912] = ᐃΔ[910];
            ᐃΔ[911] = ᐃΔ[910];
            ᐃΔ[732] = Gb(1, [{
                f: Ju,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
            }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[734] = ᐃΔ[732];
            ᐃΔ[563] = Gb(1, [{
                f: fm,
                x: 0,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
            }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[564] = ᐃΔ[563];
            ᐃΔ[751] = Gb(1, [{
                f: cc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
            }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[252] = Gb(1, [{
                f: zm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
            }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[753] = Gb(1, [{
                f: cc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
            }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[253] = Gb(1, [{
                f: zm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
            }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[176] = Gb(1, [{
                f: ac,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
            }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[177] = Gb(1, [{
                f: ac,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
            }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[175] = Gb(1, [{
                f: ac,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
            }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[616] = Gb(1, [{
                f: uc,
                x: 0,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[618] = ᐃΔ[616];
            ᐃΔ[699] = Gb(1, [{
                f: uc,
                x: 0,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[700] = ᐃΔ[699];
            ᐃΔ[702] = Gb(1, [{
                f: uc,
                x: 0,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[704] = ᐃΔ[702];
            ᐃΔ[705] = Gb(1, [{
                f: uc,
                x: 0,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[706] = ᐃΔ[705];
            ᐃΔ[420] = Gb(1, [{
                f: um,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
            }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[421] = ᐃΔ[420];
            ᐃΔ[826] = Gb(1, [{
                f: nm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#252525", "#73583e", "#493425", "#7d6144"]
            }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[827] = ᐃΔ[826];
            ᐃΔ[429] = Gb(1, [{
                f: im,
                x: 0,
                y: -2,
                a: 1,
                r: 0,
                c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
            }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[430] = ᐃΔ[429];
            ᐃΔ[432] = Gb(1, [{
                f: am,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#dbce71", "#b29c32", "#c4bc51"]
            }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[433] = ᐃΔ[432];
            ᐃΔ[435] = Gb(1, [{
                f: mm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[436] = ᐃΔ[435];
            ᐃΔ[438] = Gb(1, [{
                f: rm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[439] = ᐃΔ[438];
            ᐃΔ[441] = Gb(1, [{
                f: bm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#221e1b", "#ffffff", "#f6f0e7"]
            }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[442] = ᐃΔ[441];
            ᐃΔ[418] = Gb(1, [{
                f: Iu,
                x: -5,
                y: -5,
                a: 1,
                r: 0,
                c: ["#1d051e", "#c27add", "#cd98e5"]
            }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[609] = Gb(1, [{
                f: Em,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#D7C393", "#a48c6c"]
            }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[142] = Gb(1, [{
                f: gc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#93CBCE", "#E9F6F6"]
            }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[140] = Gb(1, [{
                f: Em,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#866432", "#6b4f25"]
            }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[180] = Gb(1, [{
                f: pc,
                x: 3,
                y: 2,
                a: 1,
                r: 0,
                c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
            }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[181] = Gb(1, [{
                f: Xm,
                x: 3,
                y: 2,
                a: 1,
                r: 0,
                c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
            }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[784] = ᐃΔ[180];
            ᐃΔ[785] = ᐃΔ[181];
            ᐃΔ[789] = Gb(1, [{
                f: Dm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
            }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[791] = ᐃΔ[789];
            ᐃΔ[613] = Gb(1, [{
                f: ic,
                x: 0,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
            }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[612] = Gb(1, [{
                f: Lm,
                x: 0,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
            }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[715] = ᐃΔ[613];
            ᐃΔ[611] = ᐃΔ[612];
            ᐃΔ[634] = Gb(1, [{
                f: Pd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[635] = ᐃΔ[634];
            ᐃΔ[200] = Gb(1, [{
                f: Md,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[866] = Gb(1, [{
                f: xd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[143] = Gb(1, [{
                f: Im,
                x: 0,
                y: -2,
                a: 1,
                r: 0,
                c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
            }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[690] = ᐃΔ[143];
            ᐃΔ[662] = Gb(1, [{
                f: Kd,
                x: -3,
                y: -5,
                a: 1,
                r: 0,
                c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
            }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[664] = Gb(1, [{
                f: Vd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1d051e", "#42261A", "#281818"]
            }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[666] = ᐃΔ[664];
            ᐃΔ[649] = Gb(1, [{
                f: Ud,
                x: -3,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
            }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[650] = ᐃΔ[649];
            ᐃΔ[674] = Gb(1, [{
                f: Bb,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
            }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[646] = Gb(1, [{
                f: Gd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
            }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ᐃΔ[647] = ᐃΔ[646];
            ᐃΔ[685] = Gb(1, [{
                f: mc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[684] = ᐃΔ[685];
            ᐃΔ[870] = Gb(1, [{
                f: Kt,
                x: -5,
                y: -5,
                a: 1,
                r: 0,
                c: ["#e2d63b", "#ee71a9", "#42b672"]
            }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[871] = ᐃΔ[870];
            ᐃΔ[605] = Gb(1, [{
                f: rc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
            }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[604] = ᐃΔ[605];
            ᐃΔ[842] = Gb(1, [{
                f: Mt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[843] = ᐃΔ[842];
            ᐃΔ[652] = Gb(1, [{
                f: nc,
                x: -1,
                y: 0,
                a: 1,
                r: -Math.PI / 5,
                c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
            }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
            ᐃΔ[654] = ᐃΔ[652];
            ᐃΔ[626] = Gb(1, [{
                f: nc,
                x: -1,
                y: 0,
                a: 1,
                r: -Math.PI / 5,
                c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
            }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[627] = ᐃΔ[626];
            ᐃΔ[629] = Gb(1, [{
                f: Om,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
            }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ᐃΔ[196] = Gb(1, [{
                f: vd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
            }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[898] = ᐃΔ[196];
            ᐃΔ[659] = Gb(1, [{
                f: Ld,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
            }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[660] = ᐃΔ[659];
            ᐃΔ[145] = Gb(1, [{
                f: Mb,
                x: -2,
                y: -8,
                a: 1,
                r: 0,
                c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
            }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ᐃΔ[730] = ᐃΔ[145];
            ᐃΔ[566] = [];
            ᐃΔ[566][0] = ⲆⲆ.ᐃΔΔᐃᐃⲆⲆ;
            ᐃΔ[566][1] = ⲆⲆ.ᐃᐃΔⵠΔᐃⵠ;
            ᐃΔ[566][2] = ⲆⲆ.ⲆⲆΔⵠΔⵠᐃ;
            ᐃΔ[567] = ᐃΔ[566];
            ᐃΔ[568] = ᐃΔ[566];
            ᐃΔ[877] = [];
            ᐃΔ[877][0] = ⲆⲆ.ΔᐃⲆᐃⵠⲆⵠ;
            ᐃΔ[877][1] = ⲆⲆ.ᐃⵠⲆᐃΔΔΔ;
            ᐃΔ[877][2] = ⲆⲆ.ⲆᐃᐃⵠⲆᐃⲆ;
            ᐃΔ[879] = ᐃΔ[877];
            ᐃΔ[878] = ᐃΔ[877];
            ᐃΔ[933] = ᐃΔ[932];
            ᐃΔ[934] = ᐃΔ[932];
            ᐃΔ[932] = [];
            ᐃΔ[932][0] = ⲆⲆ.ⵠᐃⵠⵠΔᐃΔ;
            ᐃΔ[932][1] = ⲆⲆ.ⲆⲆⵠᐃⵠⲆᐃ;
            ᐃΔ[932][2] = ⲆⲆ.ᐃᐃᐃΔΔⵠⲆ;
            ᐃΔ[933] = ᐃΔ[932];
            ᐃΔ[934] = ᐃΔ[932];
            ᐃΔ[943] = [];
            ᐃΔ[943][0] = ⲆⲆ.ΔⲆᐃΔⵠⵠⵠ;
            ᐃΔ[943][1] = ⲆⲆ.ΔᐃΔⵠΔⵠⲆ;
            ᐃΔ[943][2] = ⲆⲆ.ΔⲆᐃⵠΔⵠΔ;
            ᐃΔ[944] = ᐃΔ[943];
            ᐃΔ[945] = ᐃΔ[943];
            ᐃΔ[921] = [];
            ᐃΔ[921][0] = ⲆⲆ.ΔᐃΔᐃᐃⲆΔ;
            ᐃΔ[921][1] = ⲆⲆ.ⵠᐃΔΔΔⵠΔ;
            ᐃΔ[921][2] = ⲆⲆ.ΔⵠⵠⵠΔⵠⵠ;
            ᐃΔ[922] = ᐃΔ[921];
            ᐃΔ[923] = ᐃΔ[921];
            ᐃΔ[925] = [];
            ᐃΔ[925][0] = ⲆⲆ.ⲆⲆΔⲆᐃⲆⲆ;
            ᐃΔ[925][1] = ⲆⲆ.ᐃⵠΔⲆᐃᐃⵠ;
            ᐃΔ[925][2] = ⲆⲆ.ᐃⵠⲆⵠⵠⵠⲆ;
            ᐃΔ[926] = ᐃΔ[925];
            ᐃΔ[927] = ᐃΔ[925];
            ᐃΔ[929] = [];
            ᐃΔ[929][0] = ⲆⲆ.ⵠⵠⵠⵠᐃᐃⲆ;
            ᐃΔ[929][1] = ⲆⲆ.ⲆⲆᐃΔⵠⲆⵠ;
            ᐃΔ[929][2] = ⲆⲆ.ΔⵠᐃⵠΔⵠᐃ;
            ᐃΔ[930] = ᐃΔ[929];
            ᐃΔ[931] = ᐃΔ[929];
            ᐃΔ[946] = [];
            ᐃΔ[946][0] = ⲆⲆ.ⵠⵠᐃⵠⲆΔⵠ;
            ᐃΔ[946][1] = ⲆⲆ.ⲆΔⵠⵠⲆᐃⲆ;
            ᐃΔ[946][2] = ⲆⲆ.ΔⲆⲆᐃⵠⵠᐃ;
            ᐃΔ[947] = ᐃΔ[946];
            ᐃΔ[948] = ᐃΔ[946];
            ᐃΔ[735] = [];
            ᐃΔ[735][0] = ⲆⲆ.ΔᐃⲆΔⲆᐃⲆ;
            ᐃΔ[735][1] = ⲆⲆ.ⲆᐃⲆⲆΔⵠΔ;
            ᐃΔ[735][2] = ⲆⲆ.ᐃⲆΔⲆⵠⵠᐃ;
            ᐃΔ[737] = ᐃΔ[735];
            ᐃΔ[736] = ᐃΔ[735];
            ᐃΔ[1164] = [];
            ᐃΔ[1164][0] = ⲆⲆ.ᐃΔᐃᐃΔⲆΔ;
            ᐃΔ[1164][1] = ⲆⲆ.ᐃᐃⵠΔᐃΔⵠ;
            ᐃΔ[1164][2] = ⲆⲆ.ΔΔⲆᐃⲆⲆⵠ;
            ᐃΔ[nr.ᐃⲆⵠⵠᐃΔⵠᐃᐃ] = ᐃΔ[1164];
            ᐃΔ[1165] = ᐃΔ[1164];
            ᐃΔ[738] = [];
            ᐃΔ[738][0] = ⲆⲆ.ΔΔⲆⲆᐃᐃⲆ;
            ᐃΔ[738][1] = ⲆⲆ.ⲆᐃΔⲆᐃΔⲆ;
            ᐃΔ[738][2] = ⲆⲆ.ⵠᐃⵠⲆΔΔⲆ;
            ᐃΔ[740] = ᐃΔ[738];
            ᐃΔ[739] = ᐃΔ[738];
            ᐃΔ[741] = [];
            ᐃΔ[741][0] = ⲆⲆ.ⲆⵠⲆᐃⵠⵠᐃ;
            ᐃΔ[741][1] = ⲆⲆ.ⵠⲆΔⵠⵠᐃⲆ;
            ᐃΔ[741][2] = ⲆⲆ.ⵠⵠΔΔᐃⲆⲆ;
            ᐃΔ[743] = ᐃΔ[741];
            ᐃΔ[742] = ᐃΔ[741];
            ᐃΔ[938] = [];
            ᐃΔ[938][0] = ⲆⲆ.ⲆᐃⲆᐃᐃᐃⵠ;
            ᐃΔ[938][1] = ⲆⲆ.ⵠᐃⲆᐃⵠᐃⲆ;
            ᐃΔ[938][2] = ⲆⲆ.ⲆⵠᐃⲆⵠᐃⲆ;
            ᐃΔ[939] = ᐃΔ[938];
            ᐃΔ[936] = [];
            ᐃΔ[936][0] = ⲆⲆ.ΔⲆΔⲆΔᐃᐃ;
            ᐃΔ[936][1] = ⲆⲆ.ᐃⵠᐃᐃᐃⵠⲆ;
            ᐃΔ[936][2] = ⲆⲆ.ᐃΔⵠΔΔΔΔ;
            ᐃΔ[937] = ᐃΔ[936];
            ᐃΔ[617] = ᐃΔ[616];
            ᐃΔ[701] = ᐃΔ[699];
            ᐃΔ[703] = ᐃΔ[702];
            ᐃΔ[707] = ᐃΔ[705];
            ᐃΔ[348] = ᐃΔ[311];
            ᐃΔ[633] = ᐃΔ[631];
            ᐃΔ[645] = ᐃΔ[644];
            ᐃΔ[640] = ᐃΔ[639];
            ᐃΔ[273] = ᐃΔ[309];
            ᐃΔ[590] = ᐃΔ[252];
            ᐃΔ[752] = ᐃΔ[751];
            ᐃΔ[591] = ᐃΔ[253];
            ᐃΔ[754] = ᐃΔ[753];
            ᐃΔ[276] = ᐃΔ[328];
            ᐃΔ[863] = ᐃΔ[865];
            ᐃΔ[862] = ᐃΔ[860];
            ᐃΔ[831] = ᐃΔ[829];
            ᐃΔ[340] = ᐃΔ[261];
            ᐃΔ[596] = ᐃΔ[594];
            ᐃΔ[345] = ᐃΔ[292];
            ᐃΔ[346] = ᐃΔ[293];
            ᐃΔ[457] = ᐃΔ[455];
            ᐃΔ[274] = ᐃΔ[313];
            ᐃΔ[341] = ᐃΔ[312];
            ᐃΔ[272] = ᐃΔ[258];
            ᐃΔ[344] = ᐃΔ[296];
            ᐃΔ[459] = ᐃΔ[458];
            ᐃΔ[342] = ᐃΔ[315];
            ᐃΔ[270] = ᐃΔ[297];
            ᐃΔ[271] = ᐃΔ[298];
            ᐃΔ[343] = ᐃΔ[316];
            ᐃΔ[269] = ᐃΔ[277];
            ᐃΔ[358] = ᐃΔ[310];
            ᐃΔ[354] = ᐃΔ[329];
            ᐃΔ[356] = ᐃΔ[331];
            ᐃΔ[355] = ᐃΔ[330];
            ᐃΔ[494] = ᐃΔ[492];
            ᐃΔ[349] = ᐃΔ[317];
            ᐃΔ[350] = ᐃΔ[319];
            ᐃΔ[275] = ᐃΔ[300];
            ᐃΔ[351] = ᐃΔ[323];
            ᐃΔ[353] = ᐃΔ[305];
            ᐃΔ[514] = ᐃΔ[513];
            ᐃΔ[352] = ᐃΔ[303];
            ᐃΔ[520] = ᐃΔ[518];
            ᐃΔ[534] = ᐃΔ[532];
            ᐃΔ[531] = ᐃΔ[529];
            ᐃΔ[522] = ᐃΔ[521];
            ᐃΔ[524] = ᐃΔ[523];
            ᐃΔ[565] = ᐃΔ[563];
            ᐃΔ[554] = ᐃΔ[553];
            ᐃΔ[357] = ᐃΔ[335];
            ᐃΔ[359] = ᐃΔ[337];
            ᐃΔ[339] = Ia(function (a, b, c) {
                var d = document.createElement("canvas");
                var e = d.getContext("2d");
                d.width = a * 118;
                d.height = a * 129;
                e.save();
                e.translate(a * 90, a * 90);
                wt(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
                e.restore();
                vt(e, c[0], c[1], 4);
                e.save();
                wt(e, a * 30, a * 115, a * 60, a * 5, a * 15);
                e.restore();
                vt(e, c[2], c[3], 4);
                e.save();
                wt(e, a * 50, a * 117, a * 20, a * 10, a * 15);
                e.restore();
                vt(e, c[2]);
                return d;
            }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
            ᐃΔ[366] = Gb(0.5, [{
                f: qu,
                x: 0,
                y: 2,
                a: 1,
                r: 0,
                c: ["#ffffff"]
            }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
            ᐃΔ[382] = ᐃΔ[361];
            ᐃΔ[383] = ᐃΔ[362];
            ᐃΔ[384] = ᐃΔ[364];
            ᐃΔ[497] = ᐃΔ[495];
            ᐃΔ[385] = ᐃΔ[392];
            ᐃΔ[774] = ᐃΔ[178];
            ᐃΔ[775] = ᐃΔ[179];
            ᐃΔ[386] = ᐃΔ[368];
            ᐃΔ[625] = ᐃΔ[624];
            ᐃΔ[394] = ᐃΔ[393];
            ᐃΔ[1163] = ᐃΔ[1162];
            ᐃΔ[506] = ᐃΔ[505];
            ᐃΔ[387] = ᐃΔ[369];
            ᐃΔ[504] = ᐃΔ[502];
            ᐃΔ[388] = ᐃΔ[372];
            ᐃΔ[389] = ᐃΔ[375];
            ᐃΔ[390] = ᐃΔ[378];
            ᐃΔ[501] = ᐃΔ[499];
            ᐃΔ[391] = ᐃΔ[381];
            ᐃΔ[403] = ᐃΔ[401];
            ᐃΔ[397] = ᐃΔ[395];
            ᐃΔ[400] = ᐃΔ[398];
            ᐃΔ[406] = ᐃΔ[404];
            ᐃΔ[474] = ᐃΔ[472];
            ᐃΔ[875] = ᐃΔ[874];
            ᐃΔ[552] = ᐃΔ[550];
            ᐃΔ[710] = ᐃΔ[709];
            ᐃΔ[479] = ᐃΔ[477];
            ᐃΔ[482] = ᐃΔ[480];
            ᐃΔ[485] = ᐃΔ[483];
            ᐃΔ[488] = ᐃΔ[486];
            ᐃΔ[410] = ᐃΔ[408];
            ᐃΔ[719] = ᐃΔ[717];
            ᐃΔ[422] = ᐃΔ[420];
            ᐃΔ[431] = ᐃΔ[429];
            ᐃΔ[434] = ᐃΔ[432];
            ᐃΔ[437] = ᐃΔ[435];
            ᐃΔ[543] = ᐃΔ[541];
            ᐃΔ[733] = ᐃΔ[732];
            ᐃΔ[440] = ᐃΔ[438];
            ᐃΔ[443] = ᐃΔ[441];
            ᐃΔ[446] = ᐃΔ[418];
            ᐃΔ[606] = ᐃΔ[605];
            ᐃΔ[844] = ᐃΔ[842];
            ᐃΔ[683] = ᐃΔ[685];
            ᐃΔ[610] = ᐃΔ[609];
            ᐃΔ[689] = ᐃΔ[143];
            ᐃΔ[686] = ᐃΔ[142];
            ᐃΔ[682] = ᐃΔ[140];
            ᐃΔ[615] = ᐃΔ[613];
            ᐃΔ[614] = ᐃΔ[612];
            ᐃΔ[628] = ᐃΔ[626];
            ᐃΔ[630] = ᐃΔ[629];
            ᐃΔ[636] = ᐃΔ[634];
            ᐃΔ[868] = ᐃΔ[200];
            ᐃΔ[867] = ᐃΔ[866];
            ᐃΔ[648] = ᐃΔ[646];
            ᐃΔ[651] = ᐃΔ[649];
            ᐃΔ[653] = ᐃΔ[652];
            ᐃΔ[661] = ᐃΔ[659];
            ᐃΔ[898] = ᐃΔ[196];
            ᐃΔ[663] = ᐃΔ[662];
            ᐃΔ[665] = ᐃΔ[664];
            ᐃΔ[675] = ᐃΔ[674];
            ᐃΔ[731] = ᐃΔ[145];
            ᐃΔ[757] = ᐃΔ[756];
            ᐃΔ[759] = ᐃΔ[176];
            ᐃΔ[761] = ᐃΔ[760];
            ᐃΔ[763] = ᐃΔ[177];
            ᐃΔ[765] = ᐃΔ[764];
            ᐃΔ[766] = ᐃΔ[175];
            ᐃΔ[769] = ᐃΔ[767];
            ᐃΔ[773] = ᐃΔ[771];
            ᐃΔ[778] = ᐃΔ[776];
            ᐃΔ[781] = ᐃΔ[779];
            ᐃΔ[787] = ᐃΔ[181];
            ᐃΔ[786] = ᐃΔ[180];
            ᐃΔ[790] = ᐃΔ[789];
            ᐃΔ[801] = ᐃΔ[800];
            ᐃΔ[810] = ᐃΔ[808];
            ᐃΔ[836] = ᐃΔ[834];
            ᐃΔ[847] = ᐃΔ[845];
            ᐃΔ[828] = ᐃΔ[826];
        })();
        ᐃΔ[540] = [];
        ᐃΔ[540][nr.ⵠᐃⵠ] = [];
        ᐃΔ[540][nr.ᐃᐃⲆ] = [];
        for (var a = 0; a < nr.ⵠⲆⲆΔⵠⲆᐃ; a++) {
            ᐃΔ[540][nr.ⵠᐃⵠ].push(Ia(jd(1, 4 + a, "#59B8CE")));
            ᐃΔ[540][nr.ᐃᐃⲆ].push(Ia(jd(1, 4 + a, "#90DDD9")));
        }
        ᐃΔ[470] = [];
        ᐃΔ[470][nr.ⵠᐃⵠ] = [];
        ᐃΔ[470][nr.ᐃᐃⲆ] = [];
        for (a = 0; a < nr.ΔΔΔⵠΔⲆΔ; a++) {
            ᐃΔ[470][nr.ⵠᐃⵠ].push(Ia(jd(1, 4 + a, "#fff")));
            ᐃΔ[470][nr.ᐃᐃⲆ].push(Ia(jd(1, 4 + a, "#fff")));
        }
        ᐃΔ[471] = [];
        ᐃΔ[471][nr.ⵠᐃⵠ] = [];
        ᐃΔ[471][nr.ᐃᐃⲆ] = [];
        for (a = 0; a < nr.ΔΔΔⵠΔⲆΔ; a++) {
            ᐃΔ[471][nr.ⵠᐃⵠ].push(Ia(jd(1, 6 + a, "#DDCD8A")));
            ᐃΔ[471][nr.ᐃᐃⲆ].push(Ia(jd(1, 6 + a, "#155E57")));
        }
        ᐃΔ[942] = [];
        ᐃΔ[942][nr.ⵠᐃⵠ] = [];
        ᐃΔ[942][nr.ᐃᐃⲆ] = [];
        for (a = 0; a < nr.ΔⵠᐃⵠᐃⵠΔ; a++) {
            ᐃΔ[942][nr.ⵠᐃⵠ].push(Ia(jd(1, 4 + a, "#353326")));
            ᐃΔ[942][nr.ᐃᐃⲆ].push(Ia(jd(1, 4 + a, "#1D2526")));
        }
        ᐃΔ[201] = [];
        ᐃΔ[201][nr.ⵠᐃⵠ] = Ia(Jt(1.5, 0, ["#ee71a9"]));
        ᐃΔ[201][nr.ᐃᐃⲆ] = Ia(Jt(1.5, 0, ["#ee71a9"]));
        ᐃΔ[872] = [ᐃΔ[201]];
        ᐃΔ[872][1] = [];
        ᐃΔ[872][2] = [];
        ᐃΔ[872][3] = [];
        ᐃΔ[872][4] = [];
        ᐃΔ[872][1][nr.ⵠᐃⵠ] = Ia(Jt(1.5, 0, ["#e2d63b"]));
        ᐃΔ[872][1][nr.ᐃᐃⲆ] = Ia(Jt(1.5, 0, ["#e2d63b"]));
        ᐃΔ[872][2][nr.ⵠᐃⵠ] = Ia(Jt(1.5, 0, ["#309cbd"]));
        ᐃΔ[872][2][nr.ᐃᐃⲆ] = Ia(Jt(1.5, 0, ["#309cbd"]));
        ᐃΔ[872][3][nr.ⵠᐃⵠ] = Ia(Jt(1.5, 0, ["#cd232d"]));
        ᐃΔ[872][3][nr.ᐃᐃⲆ] = Ia(Jt(1.5, 0, ["#cd232d"]));
        ᐃΔ[872][4][nr.ⵠᐃⵠ] = Ia(Jt(1.5, 0, ["#42b672"]));
        ᐃΔ[872][4][nr.ᐃᐃⲆ] = Ia(Jt(1.5, 0, ["#42b672"]));
        if (ΔⲆⲆⵠ.ⲆⲆᐃΔⵠⲆⲆ("cti", bj.location.href)) {
            document.getElementById("version").innerHTML += "[CTI]";
        } else {
            Ia = function (a) {
                a.loaded = 1;
                return a;
            };
        }
        ᐃΔ[797] = Ia(function () {
            var a = document.createElement("canvas");
            var b = a.getContext("2d");
            a.width = 460;
            a.height = 220;
            b.fillStyle = "#3a2a0d";
            b.fillRect(0, 0, a.width, a.height);
            b.lineWidth = 4;
            b.beginPath();
            b.strokeStyle = "#513810";
            for (var c = 20; c < 220; c += 20) {
                b.moveTo(0, c);
                b.lineTo(460, c);
                b.closePath();
                b.stroke();
            }
            return a;
        }());
        ᐃΔ[108] = [];
        ᐃΔ[108][nr.ⵠᐃⵠ] = [];
        ᐃΔ[108][nr.ᐃᐃⲆ] = [];
        ᐃΔ[108][nr.ⵠᐃⵠ].push(Ia(Id(1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
        ᐃΔ[108][nr.ⵠᐃⵠ].push(Ia(Id(0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
        ᐃΔ[108][nr.ⵠᐃⵠ].push(Ia(Id(0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
        ᐃΔ[108][nr.ᐃᐃⲆ].push(Ia(Id(1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
        ᐃΔ[108][nr.ᐃᐃⲆ].push(Ia(Id(0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
        ᐃΔ[108][nr.ᐃᐃⲆ].push(Ia(Id(0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
        ᐃΔ[111] = [];
        ᐃΔ[111][nr.ⵠᐃⵠ] = [];
        ᐃΔ[111][nr.ᐃᐃⲆ] = [];
        ᐃΔ[111][nr.ⵠᐃⵠ].push(Ia(Wd(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ᐃΔ[111][nr.ⵠᐃⵠ].push(Ia(Wd(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ᐃΔ[111][nr.ⵠᐃⵠ].push(Ia(Wd(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ᐃΔ[111][nr.ᐃᐃⲆ].push(Ia(Wd(1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
        ᐃΔ[111][nr.ᐃᐃⲆ].push(Ia(Wd(1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
        ᐃΔ[111][nr.ᐃᐃⲆ].push(Ia(Wd(1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
        ᐃΔ[112] = [];
        ᐃΔ[112][nr.ⵠᐃⵠ] = [];
        ᐃΔ[112][nr.ᐃᐃⲆ] = [];
        ᐃΔ[112][nr.ⵠᐃⵠ].push(Ia(Nd(1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
        ᐃΔ[112][nr.ⵠᐃⵠ].push(Ia(Nd(0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
        ᐃΔ[112][nr.ⵠᐃⵠ].push(Ia(Nd(0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
        ᐃΔ[112][nr.ᐃᐃⲆ].push(Ia(Nd(1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
        ᐃΔ[112][nr.ᐃᐃⲆ].push(Ia(Nd(0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
        ᐃΔ[112][nr.ᐃᐃⲆ].push(Ia(Nd(0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
        ᐃΔ[239] = [];
        ᐃΔ[239][nr.ⵠᐃⵠ] = ⲆⲆ.ΔⵠΔΔⵠⵠⵠ;
        ᐃΔ[239][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠⵠᐃⲆⲆᐃᐃ;
        ᐃΔ[286] = [];
        ᐃΔ[286][nr.ⵠᐃⵠ] = Ia(ed(0.6, ["#0d1b1c"]));
        ᐃΔ[286][nr.ᐃᐃⲆ] = Ia(ed(0.6, ["#030d14"]));
        ᐃΔ[793] = [];
        ᐃΔ[793][nr.ⵠᐃⵠ] = Ia(td(0.6, ["#2a2938", "#242330"]));
        ᐃΔ[793][nr.ᐃᐃⲆ] = Ia(td(0.6, ["#1b1e30", "#161921"]));
        ᐃΔ[820] = [];
        ᐃΔ[820][nr.ⵠᐃⵠ] = Ia(tb(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
        ᐃΔ[820][nr.ᐃᐃⲆ] = Ia(tb(0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
        ᐃΔ[821] = [];
        ᐃΔ[821][nr.ⵠᐃⵠ] = Ia(ib(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
        ᐃΔ[821][nr.ᐃᐃⲆ] = Ia(ib(0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
        ᐃΔ[822] = [];
        ᐃΔ[822][nr.ⵠᐃⵠ] = Ia($b(0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
        ᐃΔ[822][nr.ᐃᐃⲆ] = Ia($b(0.4, ["#030d14", "#11635e", "#02373e"]));
        ᐃΔ[823] = Ia(nb(0.6, ["#BB0000"]));
        ᐃΔ[824] = Ia(nb(0.6, ["#DBE71C"]));
        ᐃΔ[825] = Ia(nb(0.6, ["#00BB00"]));
        ᐃΔ[109] = [];
        ᐃΔ[109][nr.ⵠᐃⵠ] = [];
        ᐃΔ[109][nr.ᐃᐃⲆ] = [];
        ᐃΔ[109][nr.ⵠᐃⵠ].push(id(1.1, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], false, 0));
        ᐃΔ[109][nr.ⵠᐃⵠ].push(id(1.1, ["#0e3022", "#0f9862", "#0b8750", "#26ab6e"], true, 0));
        ᐃΔ[109][nr.ⵠᐃⵠ].push(id(0.9, ["#0e3022", "#0e7d4c", "#258a4d", "#248c4d"], Ah, 0));
        ᐃΔ[109][nr.ⵠᐃⵠ].push(id(0.9, ["#0e3022", "#096d41", "#1f7b43", "#1f7b43"], Ha, 0));
        ᐃΔ[109][nr.ⵠᐃⵠ].push(id(0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], Na, 0));
        ᐃΔ[109][nr.ⵠᐃⵠ].push(id(0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], true, 0));
        ᐃΔ[109][nr.ᐃᐃⲆ].push(id(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], js, 0));
        ᐃΔ[109][nr.ᐃᐃⲆ].push(id(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], true, 0));
        ᐃΔ[109][nr.ᐃᐃⲆ].push(id(0.9, ["#030d14", "#0b3534", "#144443", "#174240"], tr, 0));
        ᐃΔ[109][nr.ᐃᐃⲆ].push(id(0.9, ["#030d14", "#0b3534", "#144443", "#174240"], true, 0));
        ᐃΔ[109][nr.ᐃᐃⲆ].push(id(0.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], Qr, 0));
        ᐃΔ[109][nr.ᐃᐃⲆ].push(id(0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], true, 0));
        ᐃΔ[307] = [];
        ᐃΔ[307][nr.ⵠᐃⵠ] = [];
        ᐃΔ[307][nr.ᐃᐃⲆ] = [];
        ᐃΔ[307][nr.ⵠᐃⵠ].push(Ia(ad(sd(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], false), ᐃΔ[109][nr.ⵠᐃⵠ][0])));
        ᐃΔ[307][nr.ⵠᐃⵠ].push(Ia(ad(sd(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], true), ᐃΔ[109][nr.ⵠᐃⵠ][1])));
        ᐃΔ[307][nr.ᐃᐃⲆ].push(Ia(ad(sd(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], gn), ᐃΔ[109][nr.ᐃᐃⲆ][0])));
        ᐃΔ[307][nr.ᐃᐃⲆ].push(Ia(ad(sd(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], true), ᐃΔ[109][nr.ᐃᐃⲆ][1])));
        ᐃΔ[307][nr.ⵠᐃⵠ].push(Ia(ad(sd(0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], false), ᐃΔ[109][nr.ⵠᐃⵠ][2])));
        ᐃΔ[307][nr.ⵠᐃⵠ].push(Ia(ad(sd(0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], Fl), ᐃΔ[109][nr.ⵠᐃⵠ][2])));
        ᐃΔ[307][nr.ᐃᐃⲆ].push(Ia(ad(sd(0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], false), ᐃΔ[109][nr.ᐃᐃⲆ][2])));
        ᐃΔ[307][nr.ᐃᐃⲆ].push(Ia(ad(sd(0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], true), ᐃΔ[109][nr.ᐃᐃⲆ][3])));
        ᐃΔ[109][nr.ⵠᐃⵠ][5] = Ia(ᐃΔ[109][nr.ⵠᐃⵠ][5]);
        ᐃΔ[109][nr.ⵠᐃⵠ][4] = Ia(ᐃΔ[109][nr.ⵠᐃⵠ][4]);
        ᐃΔ[109][nr.ⵠᐃⵠ][3] = Ia(ᐃΔ[109][nr.ⵠᐃⵠ][3]);
        ᐃΔ[109][nr.ⵠᐃⵠ][2] = Ia(ᐃΔ[109][nr.ⵠᐃⵠ][2]);
        ᐃΔ[109][nr.ⵠᐃⵠ][1] = Ia(ᐃΔ[109][nr.ⵠᐃⵠ][1]);
        ᐃΔ[109][nr.ⵠᐃⵠ][0] = Ia(ᐃΔ[109][nr.ⵠᐃⵠ][0]);
        ᐃΔ[109][nr.ᐃᐃⲆ][5] = Ia(ᐃΔ[109][nr.ᐃᐃⲆ][5]);
        ᐃΔ[109][nr.ᐃᐃⲆ][4] = Ia(ᐃΔ[109][nr.ᐃᐃⲆ][4]);
        ᐃΔ[109][nr.ᐃᐃⲆ][3] = Ia(ᐃΔ[109][nr.ᐃᐃⲆ][3]);
        ᐃΔ[109][nr.ᐃᐃⲆ][2] = Ia(ᐃΔ[109][nr.ᐃᐃⲆ][2]);
        ᐃΔ[109][nr.ᐃᐃⲆ][1] = Ia(ᐃΔ[109][nr.ᐃᐃⲆ][1]);
        ᐃΔ[109][nr.ᐃᐃⲆ][0] = Ia(ᐃΔ[109][nr.ᐃᐃⲆ][0]);
        ᐃΔ[8] = [];
        ᐃΔ[8][nr.ⵠᐃⵠ] = Ia(Dt(4, rd(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
        ᐃΔ[8][nr.ᐃᐃⲆ] = Ia(Dt(4, rd(0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
        ᐃΔ[1] = [];
        ᐃΔ[1][nr.ⵠᐃⵠ] = Ia(Dt(4, rd(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
        ᐃΔ[1][nr.ᐃᐃⲆ] = Ia(Dt(4, rd(0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
        ᐃΔ[3] = [];
        ᐃΔ[3][nr.ⵠᐃⵠ] = Ia(Dt(4, rd(0.75, Vi, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
        ᐃΔ[3][nr.ᐃᐃⲆ] = Ia(Dt(4, rd(0.75, true, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
        ᐃΔ[4] = [];
        ᐃΔ[4][nr.ⵠᐃⵠ] = Ia(Dt(4, rd(0.75, bg, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
        ᐃΔ[4][nr.ᐃᐃⲆ] = Ia(Dt(4, rd(0.75, Fl, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
        ᐃΔ[31] = [];
        ᐃΔ[31][nr.ⵠᐃⵠ] = Ia(Dt(4, rd(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
        ᐃΔ[31][nr.ᐃᐃⲆ] = Ia(Dt(4, rd(0.75, Vi, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
        ᐃΔ[9] = [];
        ᐃΔ[9][nr.ⵠᐃⵠ] = Ia(Dt(3, cd(0.17, xh, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
        ᐃΔ[9][nr.ᐃᐃⲆ] = Ia(Dt(3, cd(0.17, Go, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
        ᐃΔ[199] = [];
        ᐃΔ[199][nr.ⵠᐃⵠ] = Ia(Dt(3, Ad(0.32, Lo, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
        ᐃΔ[199][nr.ᐃᐃⲆ] = Ia(Dt(3, Ad(0.42, true, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
        ᐃΔ[57] = [];
        ᐃΔ[57][nr.ⵠᐃⵠ] = Ia(Dt(3, od(0.4, Lo, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
        ᐃΔ[57][nr.ᐃᐃⲆ] = Ia(Dt(3, od(0.4, true, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
        ᐃΔ[0] = [];
        ᐃΔ[0][nr.ⵠᐃⵠ] = Ia(Dt(3, pd(0.4, hi, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
        ᐃΔ[0][nr.ᐃᐃⲆ] = Ia(Dt(3, pd(0.4, dn, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
        ᐃΔ[5] = [];
        ᐃΔ[5][nr.ⵠᐃⵠ] = Ia(Dt(3, ud(0.4, dn, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
        ᐃΔ[5][nr.ᐃᐃⲆ] = Ia(Dt(3, ud(0.4, true, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
        ᐃΔ[6] = [];
        ᐃΔ[6][nr.ⵠᐃⵠ] = Ia(Dt(3, zd(0.4, dh, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
        ᐃΔ[6][nr.ᐃᐃⲆ] = Ia(Dt(3, zd(0.4, xh, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
        ᐃΔ[30] = [];
        ᐃΔ[30][nr.ⵠᐃⵠ] = Ia(Dt(3, wd(0.4, R, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
        ᐃΔ[30][nr.ᐃᐃⲆ] = Ia(Dt(3, wd(0.4, true, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
        ᐃΔ[285] = [];
        ᐃΔ[285][nr.ⵠᐃⵠ] = [];
        ᐃΔ[285][nr.ᐃᐃⲆ] = [];
        ᐃΔ[285][nr.ⵠᐃⵠ].push(Ia(Pt(0.9, 0, ["#0d4f35"], 0)));
        ᐃΔ[285][nr.ⵠᐃⵠ].push(Ia(Pt(0.9, 0, ["#0d4f35"], 1)));
        ᐃΔ[285][nr.ⵠᐃⵠ].push(Ia(Pt(0.9, 0, ["#0d4f35"], 2)));
        ᐃΔ[285][nr.ᐃᐃⲆ].push(Ia(Pt(0.9, 0, ["#053339"], 0)));
        ᐃΔ[285][nr.ᐃᐃⲆ].push(Ia(Pt(0.9, 0, ["#053339"], 1)));
        ᐃΔ[285][nr.ᐃᐃⲆ].push(Ia(Pt(0.9, 0, ["#053339"], 2)));
        ᐃΔ[285][nr.ⵠᐃⵠ].push(Ia(Hd(0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
        ᐃΔ[285][nr.ⵠᐃⵠ].push(Ia(Hd(0.8, ["#292002", "#ba930e", "#6d5704"])));
        ᐃΔ[285][nr.ᐃᐃⲆ].push(Ia(Hd(0.9, ["#052919", "#0a4738", "#06321f"])));
        ᐃΔ[285][nr.ᐃᐃⲆ].push(Ia(Hd(0.8, ["#052918", "#08491c", "#063417"])));
        ᐃΔ[183] = [];
        ᐃΔ[183][nr.ⵠᐃⵠ] = Ia(Dt(Math.PI / 2, Eu(0.25, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
        ᐃΔ[183][nr.ᐃᐃⲆ] = Ia(Dt(Math.PI / 2, Eu(0.25, true, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
        ᐃΔ[803] = [];
        ᐃΔ[803].push(Ia(Hu(0.25, ["#44301b", "#57442a", "#523e26"], 0)));
        ᐃΔ[803].push(Ia(Hu(0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
        ᐃΔ[803].push(Ia(Hu(0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
        ᐃΔ[802] = [];
        ᐃΔ[802][nr.ⵠᐃⵠ] = [];
        ᐃΔ[802][nr.ᐃᐃⲆ] = [];
        ᐃΔ[802][nr.ⵠᐃⵠ].push(Ia(Dt(Math.PI / 2, Bu(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
        ᐃΔ[802][nr.ᐃᐃⲆ].push(Ia(Dt(Math.PI / 2, Bu(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
        ᐃΔ[802][nr.ⵠᐃⵠ].push(Ia(Dt(Math.PI / 2, Bu(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
        ᐃΔ[802][nr.ᐃᐃⲆ].push(Ia(Dt(Math.PI / 2, Bu(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
        ᐃΔ[802][nr.ⵠᐃⵠ].push(Ia(Dt(Math.PI / 2, Bu(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
        ᐃΔ[802][nr.ᐃᐃⲆ].push(Ia(Dt(Math.PI / 2, Bu(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3))));
        ᐃΔ[802][nr.ⵠᐃⵠ].push(Ia(Dt(Math.PI / 2, Bu(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
        ᐃΔ[802][nr.ᐃᐃⲆ].push(Ia(Dt(Math.PI / 2, Bu(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
        ᐃΔ[110] = [];
        ᐃΔ[110][nr.ⵠᐃⵠ] = [Ia(Rd(1.2, Ds, ["#0e3022", "#0b8052", "#077b49"]))];
        ᐃΔ[110][nr.ᐃᐃⲆ] = [Ia(Rd(1.2, true, ["#030d14", "#084442", "#0a4049"]))];
        ᐃΔ[623] = [];
        ᐃΔ[623][nr.ⵠᐃⵠ] = Ia(Rd(0.8, true, ["#0e3022", "#68622D", "#665329"]));
        ᐃΔ[623][nr.ᐃᐃⲆ] = Ia(Rd(0.8, true, ["#030d14", "#0F3A24", "#083326"]));
        ᐃΔ[189] = [];
        ᐃΔ[189][nr.ⵠᐃⵠ] = Ia(Um(0.5, Un, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
        ᐃΔ[189][nr.ᐃᐃⲆ] = Ia(Um(0.5, hi, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
        ᐃΔ[192] = [];
        ᐃΔ[192][nr.ⵠᐃⵠ] = Ia(Gt(0.5, Ds, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
        ᐃΔ[192][nr.ᐃᐃⲆ] = Ia(Gt(0.5, true, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
        ᐃΔ[194] = [];
        ᐃΔ[194][nr.ⵠᐃⵠ] = Ia(Am(0.5, true, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
        ᐃΔ[194][nr.ᐃᐃⲆ] = Ia(Am(0.5, Go, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
        ᐃΔ[287] = [];
        ᐃΔ[287][nr.ⵠᐃⵠ] = Ia(Rd(0.8, true, ["#1b170c", "#0b8052", "#077b49"]));
        ᐃΔ[287][nr.ᐃᐃⲆ] = Ia(Rd(0.8, bg, ["#030d14", "#084442", "#0a4049"]));
        ᐃΔ[813] = [];
        ᐃΔ[813][nr.ⵠᐃⵠ] = Ia(Um(0.5, Fl, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
        ᐃΔ[813][nr.ᐃᐃⲆ] = Ia(Um(0.5, Ha, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
        ᐃΔ[839] = [];
        ᐃΔ[839][nr.ⵠᐃⵠ] = Ia(Gt(0.5, al, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
        ᐃΔ[839][nr.ᐃᐃⲆ] = Ia(Gt(0.5, gt, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
        ᐃΔ[869] = [];
        ᐃΔ[869][nr.ⵠᐃⵠ] = Ia(Am(0.5, true, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
        ᐃΔ[869][nr.ᐃᐃⲆ] = Ia(Am(0.5, true, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
        ᐃΔ[854] = [];
        ᐃΔ[854][nr.ⵠᐃⵠ] = Ia(bc(0.45, hi, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
        ᐃΔ[854][nr.ᐃᐃⲆ] = Ia(bc(0.45, f, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
        ᐃΔ[859] = Ia(bc(0.65, true, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
        ᐃΔ[294] = [];
        ᐃΔ[294][nr.ⵠᐃⵠ] = Ia(Od(1.4, 0, ["#ac222a", "#e6636a"]));
        ᐃΔ[294][nr.ᐃᐃⲆ] = Ia(Od(1.4, 0, ["#46195e", "#744188"]));
        ᐃΔ[288] = [];
        ᐃΔ[288][nr.ⵠᐃⵠ] = Ia(Kb(0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
        ᐃΔ[288][nr.ᐃᐃⲆ] = Ia(Kb(0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
        ᐃΔ[118] = [];
        ᐃΔ[118][nr.ⵠᐃⵠ] = Ia(Nb(0.9, 0, ["#4d2d14", "#432516"]));
        ᐃΔ[118][nr.ᐃᐃⲆ] = Ia(Nb(0.9, 0, ["#282404", "#0a0a01"]));
        ᐃΔ[113] = [];
        ᐃΔ[113][nr.ⵠᐃⵠ] = Ia(qb(0.9, 0, ["#4d2d14", "#432516"]));
        ᐃΔ[113][nr.ᐃᐃⲆ] = Ia(qb(0.9, 0, ["#282404", "#0a0a01"]));
        ᐃΔ[289] = [];
        ᐃΔ[289][nr.ⵠᐃⵠ] = Ia(Yb(0.9, 0, ["#efd435"]));
        ᐃΔ[289][nr.ᐃᐃⲆ] = Ia(Yb(0.9, 0, ["#fffabb"]));
        ᐃΔ[282] = [];
        ᐃΔ[282][nr.ⵠᐃⵠ] = Ia(Vb(0.9, 0, ["#efd435"]));
        ᐃΔ[282][nr.ᐃᐃⲆ] = Ia(Vb(0.9, 0, ["#fffabb"]));
        ᐃΔ[816] = [];
        ᐃΔ[816][nr.ⵠᐃⵠ] = Ia(Yb(0.9, 0, ["#efd435"]));
        ᐃΔ[816][nr.ᐃᐃⲆ] = Ia(Yb(0.9, 0, ["rgba(255, 84, 0, 1)"]));
        ᐃΔ[817] = [];
        ᐃΔ[817][nr.ⵠᐃⵠ] = Ia(Vb(0.9, 0, ["#efd435"]));
        ᐃΔ[817][nr.ᐃᐃⲆ] = Ia(Vb(0.9, 0, ["#ff5704"]));
        ᐃΔ[324] = Ia(cb(1, "#ffffff"));
        ᐃΔ[301] = Ia(cb(1.5, "#ffffff"));
        ᐃΔ[306] = Ia(Dd(1, "Your score:", 15, "#FFF"));
        ᐃΔ[655] = Ia(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 243;
            c.height = a * 172;
            ut(d, a * 119.5, a * 140.125, a * 19);
            vt(d, uj, b[1], a * 5);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 36.5, a * 20.125);
            d.bezierCurveTo(a * 119.5, a * 20.625, a * 119.5, a * 20.625, a * 202.5, a * 21.125);
            d.bezierCurveTo(a * 214.5, a * 22.125, a * 216.5, a * 26.125, a * 217.5, a * 35.125);
            d.bezierCurveTo(a * 221, a * 76.125, a * 221, a * 76.125, a * 224.5, a * 117.125);
            d.bezierCurveTo(a * 225.5, a * 127.125, a * 221.5, a * 131.125, a * 210.5, a * 132.125);
            d.bezierCurveTo(a * 117.5, a * 132.125, a * 117.5, a * 132.125, a * 24.5, a * 132.125);
            d.bezierCurveTo(a * 14.5, a * 131.125, a * 13.5, a * 126.125, a * 16.5, a * 111.125);
            d.bezierCurveTo(a * 19.5, a * 73.125, a * 19.5, a * 73.125, a * 22.5, a * 35.125);
            d.bezierCurveTo(a * 23.5, a * 23.125, a * 29.5, a * 21.125, a * 36.5, a * 20.125);
            d.closePath();
            vt(d, b[0], b[1], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 15.5, a * 138.625);
            d.bezierCurveTo(a * 120, a * 138.625, a * 120, a * 138.625, a * 224.5, a * 138.625);
            d.closePath();
            vt(d, undefined, b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 13.5, a * 131.625);
            d.bezierCurveTo(a * 119.5, a * 131.625, a * 119.5, a * 131.625, a * 225.5, a * 131.625);
            d.closePath();
            vt(d, Og, b[3], a * 10);
            ut(d, a * 119.5, a * 140.125, a * 14.866068747318506);
            vt(d, b[4], b[5], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 106.5, a * 146.625);
            d.bezierCurveTo(a * 116.5, a * 137.625, a * 118.5, a * 136.625, a * 123.5, a * 138.625);
            d.bezierCurveTo(a * 131.5, a * 145.625, a * 133.5, a * 148.625, a * 127.5, a * 152.625);
            d.bezierCurveTo(a * 115.5, a * 158.625, a * 111.5, a * 153.625, a * 106.5, a * 147.625);
            d.closePath();
            vt(d, b[6], b[7], a * 2);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 105.5, a * 146.625);
            d.bezierCurveTo(a * 116.5, a * 159.625, a * 124.5, a * 156.625, a * 132.5, a * 146.625);
            vt(d, undefined, b[8], a * 5);
            d.save();
            d.translate(a * 75.5, a * 80.125);
            wt(d, a * -39, a * -40, a * 78, a * 78, a * 10);
            d.restore();
            vt(d, b[9]);
            d.save();
            d.translate(a * 167, a * 80.125);
            wt(d, a * -38.5, a * -39, a * 78, a * 78, a * 10);
            d.restore();
            vt(d, b[9]);
            return c;
        }(0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
        ᐃΔ[656] = ⲆⲆ.ⵠⵠⵠⲆᐃᐃⲆ;
        ᐃΔ[135] = [];
        ᐃΔ[135][nr.ⵠᐃⵠ] = Ia(_b(1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        ᐃΔ[135][nr.ᐃᐃⲆ] = Ia(_b(1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
        ᐃΔ[641] = [];
        ᐃΔ[641][nr.ⵠᐃⵠ] = Ia(Qb(2, R, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        ᐃΔ[641][nr.ᐃᐃⲆ] = Ia(Qb(2, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
        ᐃΔ[642] = [];
        ᐃΔ[642][nr.ⵠᐃⵠ] = Ia(Fb(1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        ᐃΔ[642][nr.ᐃᐃⲆ] = Ia(Fb(1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
        ᐃΔ[134] = [];
        ᐃΔ[134][nr.ⵠᐃⵠ] = Ia(Db(2.2, 0, ["#A89F67", "#9E8456"]));
        ᐃΔ[134][nr.ᐃᐃⲆ] = Ia(Db(2.2, 0, ["#0B4049", "#08383D"]));
        ᐃΔ[638] = [];
        ᐃΔ[638][nr.ⵠᐃⵠ] = Ia(Db(2.2, 0, ["#68622D", "#665329"]));
        ᐃΔ[638][nr.ᐃᐃⲆ] = Ia(Db(2.2, 0, ["#0F3A24", "#083326"]));
        ᐃΔ[321] = [];
        ᐃΔ[321][nr.ⵠᐃⵠ] = Ia(Jd(0.8, 0, ["#A89F67", "#9E8456"]));
        ᐃΔ[321][nr.ᐃᐃⲆ] = Ia(Jd(0.8, 0, ["#15514F", "#0F3F3D"]));
        ᐃΔ[811] = [];
        ᐃΔ[811][nr.ⵠᐃⵠ] = Ia(Jd(0.8, 0, ["#c67933", "#b17238"]));
        ᐃΔ[811][nr.ᐃᐃⲆ] = Ia(Jd(0.8, 0, ["#043c37", "#032b23"]));
        ᐃΔ[984] = [];
        ᐃΔ[984][nr.ⵠᐃⵠ] = Ia(Jd(0.8, 0, ["#3a8214", "#4a9c1e"]));
        ᐃΔ[984][nr.ᐃᐃⲆ] = Ia(Jd(0.8, 0, ["#032d29", "#044640"]));
        ᐃΔ[837] = [];
        ᐃΔ[837][nr.ⵠᐃⵠ] = Ia(Jd(0.8, 0, ["#e8e8e8", "#bbbbbb"]));
        ᐃΔ[837][nr.ᐃᐃⲆ] = Ia(Jd(0.8, 0, ["#1c6161", "#07413f"]));
        ᐃΔ[848] = [];
        ᐃΔ[848][nr.ⵠᐃⵠ] = Ia(Jd(0.8, 0, ["#328a56", "#449573"]));
        ᐃΔ[848][nr.ᐃᐃⲆ] = Ia(Jd(0.8, 0, ["#043c37", "#032b23"]));
        ᐃΔ[952] = [];
        ᐃΔ[952][nr.ⵠᐃⵠ] = Ia(Jd(0.8, 0, ["#c98e2f", "#a36b11"]));
        ᐃΔ[952][nr.ᐃᐃⲆ] = Ia(Jd(0.8, 0, ["#043c37", "#032b23"]));
        ᐃΔ[962] = [];
        ᐃΔ[962][nr.ⵠᐃⵠ] = Ia(Jd(0.8, 0, ["#b22419", "#99110e"]));
        ᐃΔ[962][nr.ᐃᐃⲆ] = Ia(Jd(0.8, 0, ["#04323c", "#03222b"]));
        ᐃΔ[969] = [];
        ᐃΔ[969][nr.ⵠᐃⵠ] = Ia(Jd(0.8, 0, ["#13a56d", "#098a58"]));
        ᐃΔ[969][nr.ᐃᐃⲆ] = Ia(Jd(0.8, 0, ["#043c37", "#032b23"]));
        ᐃΔ[657] = Gb(1, [{
            f: Db,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#A89F67", "#9E8456"]
        }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        ᐃΔ[723] = Gb(1, [{
            f: qb,
            x: 0,
            y: 0,
            a: 1,
            r: -Math.PI / 5,
            c: ["#4d2d14", "#432516"]
        }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        ᐃΔ[724] = Gb(1, [{
            f: Im,
            x: 0,
            y: -5,
            a: 1,
            r: 0,
            c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
        }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        ᐃΔ[334] = Gb(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ᐃΔ[115] = [];
        ᐃΔ[115][nr.ⵠᐃⵠ] = Ia(rb(0.9, 0, ["#7d613e", "#9e7e5a"]));
        ᐃΔ[115][nr.ᐃᐃⲆ] = Ia(rb(0.9, 0, ["#084442", "#125e5a"]));
        ᐃΔ[132] = [];
        ᐃΔ[132][nr.ⵠᐃⵠ] = Ia(rb(0.9, 0, ["#9E8456", "#A89F67"]));
        ᐃΔ[132][nr.ᐃᐃⲆ] = Ia(rb(0.9, 0, ["#1b6f6a", "#0d4e4c"]));
        ᐃΔ[668] = [];
        ᐃΔ[668][nr.ⵠᐃⵠ] = Ia(rb(0.9, 0, ["#665329", "#68622D"]));
        ᐃΔ[668][nr.ᐃᐃⲆ] = Ia(rb(0.9, 0, ["#083326", "#0F3A24"]));
        ᐃΔ[188] = [];
        ᐃΔ[188][nr.ⵠᐃⵠ] = Ia(rb(0.9, 0, ["#c67933", "#ec952d"]));
        ᐃΔ[188][nr.ᐃᐃⲆ] = Ia(rb(0.9, 0, ["#0e6553", "#094437"]));
        ᐃΔ[210] = [];
        ᐃΔ[210][nr.ⵠᐃⵠ] = Ia(rb(0.9, 0, ["#375809", "#4b770e"]));
        ᐃΔ[210][nr.ᐃᐃⲆ] = Ia(rb(0.9, 0, ["#09542d", "#0d5d2f"]));
        ᐃΔ[985] = [];
        ᐃΔ[985][nr.ⵠᐃⵠ] = Ia(rb(0.9, 0, ["#585809", "#72770e"]));
        ᐃΔ[985][nr.ᐃᐃⲆ] = Ia(rb(0.9, 0, ["#295209", "#305d0d"]));
        ᐃΔ[191] = [];
        ᐃΔ[191][nr.ⵠᐃⵠ] = Ia(rb(0.9, 0, ["#b9b094", "#e2d2c0"]));
        ᐃΔ[191][nr.ᐃᐃⲆ] = Ia(rb(0.9, 0, ["#126366", "#0d484b"]));
        ᐃΔ[193] = [];
        ᐃΔ[193][nr.ⵠᐃⵠ] = Ia(rb(0.9, 0, ["#3f8662", "#30915d"]));
        ᐃΔ[193][nr.ᐃᐃⲆ] = Ia(rb(0.9, 0, ["#0e6553", "#094437"]));
        ᐃΔ[812] = [];
        ᐃΔ[812][nr.ⵠᐃⵠ] = Ia(rb(0.9, 0, ["#c79153", "#dfa868"]));
        ᐃΔ[812][nr.ᐃᐃⲆ] = Ia(rb(0.9, 0, ["#073927", "#075040"]));
        ᐃΔ[838] = [];
        ᐃΔ[838][nr.ⵠᐃⵠ] = Ia(rb(0.9, 0, ["#768b5b", "#819984"]));
        ᐃΔ[838][nr.ᐃᐃⲆ] = Ia(rb(0.9, 0, ["#0c4540", "#0e5153"]));
        ᐃΔ[849] = [];
        ᐃΔ[849][nr.ⵠᐃⵠ] = Ia(rb(0.9, 0, ["#567465", "#627c6e"]));
        ᐃΔ[849][nr.ᐃᐃⲆ] = Ia(rb(0.9, 0, ["#073927", "#075040"]));
        ᐃΔ[204] = [];
        ᐃΔ[204][nr.ⵠᐃⵠ] = Ia(rb(0.9, 0, ["#996b3a", "#bf956b"]));
        ᐃΔ[204][nr.ᐃᐃⲆ] = Ia(rb(0.9, 0, ["#0e6553", "#094437"]));
        ᐃΔ[953] = [];
        ᐃΔ[953][nr.ⵠᐃⵠ] = Ia(rb(0.9, 0, ["#7a634a", "#a68f77"]));
        ᐃΔ[953][nr.ᐃᐃⲆ] = Ia(rb(0.9, 0, ["#1e4d43", "#113c32"]));
        ᐃΔ[206] = [];
        ᐃΔ[206][nr.ⵠᐃⵠ] = Ia(rb(0.9, 0, ["#99403c", "#bc796c"]));
        ᐃΔ[206][nr.ᐃᐃⲆ] = Ia(rb(0.9, 0, ["#1e434d", "#11303c"]));
        ᐃΔ[963] = [];
        ᐃΔ[963][nr.ⵠᐃⵠ] = Ia(rb(0.9, 0, ["#88504e", "#b3857c"]));
        ᐃΔ[963][nr.ᐃᐃⲆ] = Ia(rb(0.9, 0, ["#253b41", "#162930"]));
        ᐃΔ[208] = [];
        ᐃΔ[208][nr.ⵠᐃⵠ] = Ia(rb(0.9, 0, ["#0f8870", "#23af93"]));
        ᐃΔ[208][nr.ᐃᐃⲆ] = Ia(rb(0.9, 0, ["#032829", "#083233"]));
        ᐃΔ[970] = [];
        ᐃΔ[970][nr.ⵠᐃⵠ] = Ia(rb(0.9, 0, ["#618a20", "#84a74e"]));
        ᐃΔ[970][nr.ᐃᐃⲆ] = Ia(rb(0.9, 0, ["#1f4632", "#335d47"]));
        ᐃΔ[114] = [];
        ᐃΔ[114][nr.ⵠᐃⵠ] = Ia(pb(1.2, Go, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
        ᐃΔ[114][nr.ᐃᐃⲆ] = Ia(pb(1.2, R, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
        ᐃΔ[162] = [];
        ᐃΔ[162][nr.ⵠᐃⵠ] = Ia(Zd(1, dh, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
        ᐃΔ[162][nr.ᐃᐃⲆ] = Ia(Zd(1, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
        ᐃΔ[165] = [];
        ᐃΔ[165][nr.ⵠᐃⵠ] = Ia(Xd(1, xh, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        ᐃΔ[165][nr.ᐃᐃⲆ] = Ia(Xd(1, Ig, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
        ᐃΔ[122] = [];
        ᐃΔ[122][nr.ⵠᐃⵠ] = Ia(Qt(1, R, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        ᐃΔ[122][nr.ᐃᐃⲆ] = Ia(Qt(1, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
        ᐃΔ[163] = [];
        ᐃΔ[163][nr.ⵠᐃⵠ] = Ia(Qt(1, R, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
        ᐃΔ[163][nr.ᐃᐃⲆ] = Ia(Qt(1, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
        ᐃΔ[164] = [];
        ᐃΔ[164][nr.ⵠᐃⵠ] = Ia(Xt(1, Lo, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
        ᐃΔ[164][nr.ᐃᐃⲆ] = Ia(Xt(1, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
        ᐃΔ[160] = [];
        ᐃΔ[160][nr.ⵠᐃⵠ] = Ia(ru(0.8, true, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
        ᐃΔ[160][nr.ᐃᐃⲆ] = Ia(ru(0.8, true, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
        ᐃΔ[169] = [];
        ᐃΔ[169][nr.ⵠᐃⵠ] = Ia(yu(0.8, Ha, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
        ᐃΔ[169][nr.ᐃᐃⲆ] = Ia(yu(0.8, Ar, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
        ᐃΔ[170] = [];
        ᐃΔ[170][nr.ⵠᐃⵠ] = Ia(nu(0.8, xh, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        ᐃΔ[170][nr.ᐃᐃⲆ] = Ia(nu(0.8, true, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
        ᐃΔ[168] = [];
        ᐃΔ[168][nr.ⵠᐃⵠ] = Ia(pu(0.8, Ha, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
        ᐃΔ[168][nr.ᐃᐃⲆ] = Ia(pu(0.8, dh, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
        ᐃΔ[123] = [];
        ᐃΔ[123][nr.ⵠᐃⵠ] = Ia(pu(0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        ᐃΔ[123][nr.ᐃᐃⲆ] = Ia(pu(0.8, Ha, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
        ᐃΔ[166] = [];
        ᐃΔ[166][nr.ⵠᐃⵠ] = Ia(Ut(1.5, Ar, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
        ᐃΔ[166][nr.ᐃᐃⲆ] = Ia(Ut(1.5, f, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
        ᐃΔ[336] = [];
        ᐃΔ[336][nr.ⵠᐃⵠ] = Ia(Ut(1, rj, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ᐃΔ[336][nr.ᐃᐃⲆ] = Ia(Ut(1, false, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
        ᐃΔ[171] = [];
        ᐃΔ[171][nr.ⵠᐃⵠ] = Ia(St(1.5, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
        ᐃΔ[171][nr.ᐃᐃⲆ] = Ia(St(1.5, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
        ᐃΔ[373] = [];
        ᐃΔ[373][nr.ⵠᐃⵠ] = Ia(St(1, js, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ᐃΔ[373][nr.ᐃᐃⲆ] = Ia(St(1, tr, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        ᐃΔ[124] = [];
        ᐃΔ[124][nr.ⵠᐃⵠ] = Ia(St(1.5, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        ᐃΔ[124][nr.ᐃᐃⲆ] = Ia(St(1.5, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
        ᐃΔ[500] = [];
        ᐃΔ[500][nr.ⵠᐃⵠ] = Ia(St(1, Gj, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ᐃΔ[500][nr.ᐃᐃⲆ] = Ia(St(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        ᐃΔ[172] = [];
        ᐃΔ[172][nr.ⵠᐃⵠ] = Ia(Yt(1.5, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
        ᐃΔ[172][nr.ᐃᐃⲆ] = Ia(Yt(1.5, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
        ᐃΔ[376] = [];
        ᐃΔ[376][nr.ⵠᐃⵠ] = Ia(Yt(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ᐃΔ[376][nr.ᐃᐃⲆ] = Ia(Yt(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        ᐃΔ[173] = [];
        ᐃΔ[173][nr.ⵠᐃⵠ] = Ia(bu(1.5, hi, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        ᐃΔ[173][nr.ᐃᐃⲆ] = Ia(bu(1.5, al, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
        ᐃΔ[379] = [];
        ᐃΔ[379][nr.ⵠᐃⵠ] = Ia(bu(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ᐃΔ[379][nr.ᐃᐃⲆ] = Ia(bu(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        ᐃΔ[167] = [];
        ᐃΔ[167][nr.ⵠᐃⵠ] = Ia(vu(0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
        ᐃΔ[167][nr.ᐃᐃⲆ] = Ia(vu(0.5, 0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
        ᐃΔ[691] = [];
        ᐃΔ[691][nr.ⵠᐃⵠ] = Ia(Jm(0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
        ᐃΔ[691][nr.ᐃᐃⲆ] = Ia(Jm(0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
        ᐃΔ[264] = [];
        ᐃΔ[264][nr.ⵠᐃⵠ] = Ia(fb(0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
        ᐃΔ[264][nr.ᐃᐃⲆ] = Ia(fb(0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
        ᐃΔ[260] = [];
        ᐃΔ[260][nr.ⵠᐃⵠ] = Ia(Dt(Math.PI, yb(0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
        ᐃΔ[260][nr.ᐃᐃⲆ] = Ia(Dt(Math.PI, yb(0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
        ᐃΔ[266] = Ia(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 450;
            c.height = a * 470;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 226.5, a * 91.546875);
            d.bezierCurveTo(a * 254.5, a * 115.546875, a * 261.5, a * 115.546875, a * 294.5, a * 109.546875);
            d.bezierCurveTo(a * 299.5, a * 141.546875, a * 315.5, a * 151.546875, a * 344.5, a * 158.546875);
            d.bezierCurveTo(a * 330.5, a * 195.546875, a * 341.5, a * 207.546875, a * 361.5, a * 226.546875);
            d.bezierCurveTo(a * 331.5, a * 251.546875, a * 335.5, a * 270.546875, a * 342.5, a * 295.546875);
            d.bezierCurveTo(a * 300.5, a * 296.546875, a * 293.5, a * 325.546875, a * 292.5, a * 344.546875);
            d.bezierCurveTo(a * 257.5, a * 326.546875, a * 242.5, a * 338.546875, a * 224.5, a * 361.546875);
            d.bezierCurveTo(a * 200.5, a * 329.546875, a * 180.5, a * 334.546875, a * 155.5, a * 341.546875);
            d.bezierCurveTo(a * 146.5, a * 307.546875, a * 140.5, a * 302.546875, a * 107.5, a * 292.546875);
            d.bezierCurveTo(a * 117.5, a * 253.546875, a * 109.5, a * 244.546875, a * 89.5, a * 224.546875);
            d.bezierCurveTo(a * 118.5, a * 191.546875, a * 114.5, a * 182.546875, a * 108.5, a * 156.546875);
            d.bezierCurveTo(a * 143.5, a * 149.546875, a * 150.5, a * 136.546875, a * 157.5, a * 106.546875);
            d.bezierCurveTo(a * 202.5, a * 120.546875, a * 211.5, a * 103.546875, a * 228.5, a * 91.546875);
            d.closePath();
            vt(d, Ga, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 224.5, a * 129.546875);
            d.bezierCurveTo(a * 247.5, a * 147.546875, a * 252.5, a * 143.546875, a * 274.5, a * 141.546875);
            d.bezierCurveTo(a * 279.5, a * 163.546875, a * 289.5, a * 168.546875, a * 311.5, a * 178.546875);
            d.bezierCurveTo(a * 301.5, a * 199.546875, a * 307.5, a * 213.546875, a * 323.5, a * 226.546875);
            d.bezierCurveTo(a * 303.5, a * 240.546875, a * 303.5, a * 255.546875, a * 312.5, a * 275.546875);
            d.bezierCurveTo(a * 281.5, a * 278.546875, a * 276.5, a * 291.546875, a * 272.5, a * 313.546875);
            d.bezierCurveTo(a * 248.5, a * 301.546875, a * 239.5, a * 310.546875, a * 224.5, a * 324.546875);
            d.bezierCurveTo(a * 211.5, a * 304.546875, a * 199.5, a * 301.546875, a * 176.5, a * 309.546875);
            d.bezierCurveTo(a * 165.5, a * 276.546875, a * 159.5, a * 275.546875, a * 138.5, a * 274.546875);
            d.bezierCurveTo(a * 148.5, a * 248.546875, a * 140.5, a * 237.546875, a * 125.5, a * 225.546875);
            d.bezierCurveTo(a * 145.5, a * 205.546875, a * 146.5, a * 195.546875, a * 142.5, a * 176.546875);
            d.bezierCurveTo(a * 173.5, a * 164.546875, a * 173.5, a * 155.546875, a * 178.5, a * 140.546875);
            d.bezierCurveTo(a * 214.5, a * 143.546875, a * 214.5, a * 135.546875, a * 226.5, a * 129.546875);
            d.closePath();
            vt(d, qn, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 224.5, a * 160.546875);
            d.bezierCurveTo(a * 236.5, a * 168.546875, a * 239.5, a * 168.546875, a * 258.5, a * 168.546875);
            d.bezierCurveTo(a * 261.5, a * 185.546875, a * 268.5, a * 187.546875, a * 282.5, a * 192.546875);
            d.bezierCurveTo(a * 277.5, a * 208.546875, a * 283.5, a * 216.546875, a * 289.5, a * 228.546875);
            d.bezierCurveTo(a * 277.5, a * 243.546875, a * 280.5, a * 253.546875, a * 281.5, a * 260.546875);
            d.bezierCurveTo(a * 264.5, a * 260.546875, a * 259.5, a * 269.546875, a * 256.5, a * 283.546875);
            d.bezierCurveTo(a * 244.5, a * 276.546875, a * 232.5, a * 283.546875, a * 223.5, a * 291.546875);
            d.bezierCurveTo(a * 213.5, a * 276.546875, a * 205.5, a * 278.546875, a * 190.5, a * 281.546875);
            d.bezierCurveTo(a * 181.5, a * 262.546875, a * 173.5, a * 259.546875, a * 165.5, a * 258.546875);
            d.bezierCurveTo(a * 169.5, a * 239.546875, a * 167.5, a * 233.546875, a * 157.5, a * 225.546875);
            d.bezierCurveTo(a * 169.5, a * 208.546875, a * 170.5, a * 203.546875, a * 168.5, a * 192.546875);
            d.bezierCurveTo(a * 181.5, a * 187.546875, a * 188.5, a * 179.546875, a * 192.5, a * 168.546875);
            d.bezierCurveTo(a * 216.5, a * 170.546875, a * 218.5, a * 163.546875, a * 225.5, a * 160.546875);
            d.closePath();
            vt(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 205.5, a * 194.546875);
            d.bezierCurveTo(a * 216.5, a * 192.546875, a * 219.5, a * 191.546875, a * 225.5, a * 185.546875);
            d.bezierCurveTo(a * 232.5, a * 193.546875, a * 237.5, a * 191.546875, a * 246.5, a * 192.546875);
            d.bezierCurveTo(a * 249.5, a * 202.546875, a * 253.5, a * 205.546875, a * 258.5, a * 207.546875);
            d.bezierCurveTo(a * 259.5, a * 222.546875, a * 256.5, a * 223.546875, a * 265.5, a * 226.546875);
            d.bezierCurveTo(a * 256.5, a * 231.546875, a * 255.5, a * 241.546875, a * 259.5, a * 248.546875);
            d.bezierCurveTo(a * 250.5, a * 245.546875, a * 245.5, a * 252.546875, a * 243.5, a * 260.546875);
            d.bezierCurveTo(a * 234.5, a * 256.546875, a * 229.5, a * 258.546875, a * 223.5, a * 265.546875);
            d.bezierCurveTo(a * 218.5, a * 255.546875, a * 213.5, a * 257.546875, a * 204.5, a * 261.546875);
            d.bezierCurveTo(a * 203.5, a * 251.546875, a * 198.5, a * 248.546875, a * 189.5, a * 244.546875);
            d.bezierCurveTo(a * 194.5, a * 237.546875, a * 192.5, a * 231.546875, a * 184.5, a * 225.546875);
            d.bezierCurveTo(a * 191.5, a * 211.546875, a * 192.5, a * 209.546875, a * 190.5, a * 204.546875);
            d.bezierCurveTo(a * 200.5, a * 204.546875, a * 204.5, a * 198.546875, a * 207.5, a * 194.546875);
            d.closePath();
            vt(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 149.5, a * 93.546875);
            d.bezierCurveTo(a * 287.5, a * 332.546875, a * 226, a * 225.546875, a * 302.5, a * 357.546875);
            d.closePath();
            vt(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 224.5, a * 66.546875);
            d.bezierCurveTo(a * 224.5, a * 223.546875, a * 224.5, a * 223.546875, a * 224.5, a * 380.546875);
            d.closePath();
            vt(d, uj, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 302.5, a * 88.546875);
            d.bezierCurveTo(a * 222.5, a * 227.546875, a * 222.5, a * 227.546875, a * 142.5, a * 366.546875);
            d.closePath();
            vt(d, Da, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 361.5, a * 147.546875);
            d.bezierCurveTo(a * 223, a * 226.546875, a * 223, a * 226.546875, a * 84.5, a * 305.546875);
            d.closePath();
            vt(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 379.5, a * 225.546875);
            d.bezierCurveTo(a * 221, a * 225.546875, a * 221, a * 225.546875, a * 62.5, a * 225.546875);
            d.closePath();
            vt(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 90.5, a * 147.546875);
            d.bezierCurveTo(a * 226.5, a * 226.546875, a * 226.5, a * 226.546875, a * 362.5, a * 305.546875);
            d.closePath();
            vt(d, As, b[0], 4);
            return c;
        }(0.6, ["#FFFFFF"]));
        ᐃΔ[299] = [];
        ᐃΔ[299][nr.ⵠᐃⵠ] = Ia(Pb(1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
        ᐃΔ[299][nr.ᐃᐃⲆ] = Ia(Pb(1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
        ᐃΔ[10] = [];
        ᐃΔ[10][nr.ⵠᐃⵠ] = Ia(lu(0.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
        ᐃΔ[10][nr.ᐃᐃⲆ] = Ia(lu(0.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"]));
        ᐃΔ[11] = [];
        ᐃΔ[11][nr.ⵠᐃⵠ] = Ia(au(0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
        ᐃΔ[11][nr.ᐃᐃⲆ] = Ia(au(0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
        ᐃΔ[40] = [];
        ᐃΔ[40][nr.ⵠᐃⵠ] = Ia(zu(0.63, true, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
        ᐃΔ[40][nr.ᐃᐃⲆ] = Ia(zu(0.63, true, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
        ᐃΔ[41] = [];
        ᐃΔ[41][nr.ⵠᐃⵠ] = Ia(Zb(0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
        ᐃΔ[41][nr.ᐃᐃⲆ] = Ia(Zb(0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
        ᐃΔ[42] = [];
        ᐃΔ[42][nr.ⵠᐃⵠ] = Ia(Ub(0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
        ᐃΔ[42][nr.ᐃᐃⲆ] = Ia(Ub(0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
        ᐃΔ[716] = [];
        ᐃΔ[716][nr.ⵠᐃⵠ] = Ia(qm(0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
        ᐃΔ[716][nr.ᐃᐃⲆ] = Ia(qm(0.42, Ig, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
        ᐃΔ[720] = [];
        ᐃΔ[720][nr.ⵠᐃⵠ] = Ia(Sm(0.9, ["#e4c027"]));
        ᐃΔ[720][nr.ᐃᐃⲆ] = Ia(Sm(0.9, ["#D8E57F"]));
        ᐃΔ[144] = [];
        ᐃΔ[144][nr.ⵠᐃⵠ] = Ia(Tm(0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
        ᐃΔ[144][nr.ᐃᐃⲆ] = Ia(Tm(0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
        ᐃΔ[722] = Ia(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 149;
            c.height = a * 356;
            d.save();
            d.translate(a * 74.5, a * 177.5);
            wt(d, a * -57.5, a * -161.5, a * 100, a * 323, a * 10);
            d.restore();
            vt(d, b[0], b[1], a * 4);
            d.save();
            d.translate(a * 74.5, a * 177.5);
            wt(d, a * -57.5, a * 50.5, a * 100, a * 105, a * 10);
            d.restore();
            vt(d, b[6], b[1], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 125);
            d.bezierCurveTo(a * 74.5, a * 125, a * 118, a * 125, a * 118, a * 125);
            d.closePath();
            vt(d, b[2], b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 120);
            d.bezierCurveTo(a * 74.5, a * 120, a * 74.5, a * 120, a * 118, a * 120);
            d.closePath();
            vt(d, b[3], b[3], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 228);
            d.bezierCurveTo(a * 75, a * 228.5, a * 118, a * 228.5, a * 118, a * 229);
            d.closePath();
            vt(d, b[2], b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 224);
            d.bezierCurveTo(a * 75, a * 224, a * 118, a * 224, a * 118, a * 224);
            d.closePath();
            vt(d, b[3], b[3], a * 10);
            d.save();
            d.translate(a * 72, a * 68.5);
            wt(d, a * -41.5, a * -36.5, a * 73, a * 73, a * 13);
            d.restore();
            vt(d, b[4]);
            d.save();
            d.translate(a * 72, a * 175.5);
            wt(d, a * -41.5, a * -38.5, a * 73, a * 73, a * 13);
            d.restore();
            vt(d, b[4]);
            d.save();
            d.translate(a * 72, a * 279.5);
            wt(d, a * -41.5, a * -40.5, a * 73, a * 73, a * 13);
            d.restore();
            vt(d, b[4]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 338);
            d.bezierCurveTo(a * 75, a * 338, a * 118, a * 338, a * 118, a * 338);
            d.closePath();
            vt(d, b[2], b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 333);
            d.bezierCurveTo(a * 75, a * 333, a * 118, a * 333, a * 118, a * 333);
            d.closePath();
            vt(d, b[3], b[3], a * 10);
            return c;
        }(1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
        ᐃΔ[407] = [];
        ᐃΔ[407][nr.ⵠᐃⵠ] = Ia(Vt(0.5, jk, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
        ᐃΔ[407][nr.ᐃᐃⲆ] = Ia(Vt(0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
        ᐃΔ[119] = [];
        ᐃΔ[119][nr.ⵠᐃⵠ] = Ia(Rt(0.5, Go, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
        ᐃΔ[119][nr.ᐃᐃⲆ] = Ia(Rt(0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
        ᐃΔ[411] = Ia(function (a, b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            d.width = a * 118;
            d.height = a * 129;
            e.save();
            e.translate(a * 90, a * 90);
            wt(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
            e.restore();
            vt(e, c[0], c[1], 4);
            return d;
        }(0.8, 0, ["#5f6061", "#939393"]));
        ᐃΔ[412] = Gb(1, [{
            f: qb,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 2.5,
            c: ["#4d2d14", "#432516"]
        }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
        ᐃΔ[198] = [];
        ᐃΔ[198][nr.ⵠᐃⵠ] = Ia(fu(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
        ᐃΔ[198][nr.ᐃᐃⲆ] = Ia(fu(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
        ᐃΔ[913] = [];
        ᐃΔ[913][nr.ⵠᐃⵠ] = Ia(du(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
        ᐃΔ[913][nr.ᐃᐃⲆ] = Ia(du(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
        ᐃΔ[18] = [];
        ᐃΔ[18][nr.ⵠᐃⵠ] = Ia(Dt(3, iu(0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
        ᐃΔ[18][nr.ᐃᐃⲆ] = Ia(Dt(3, iu(0.7, dh, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
        ᐃΔ[12] = [];
        ᐃΔ[12][nr.ⵠᐃⵠ] = Ia(Dt(3, ju(0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
        ᐃΔ[12][nr.ᐃᐃⲆ] = Ia(Dt(3, ju(0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
        ᐃΔ[13] = [];
        ᐃΔ[13][nr.ⵠᐃⵠ] = Ia(Dt(3, mu(0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
        ᐃΔ[13][nr.ᐃᐃⲆ] = Ia(Dt(3, mu(0.65, Ar, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
        ᐃΔ[14] = [];
        ᐃΔ[14][nr.ⵠᐃⵠ] = Ia(Dt(3, wu(0.67, true, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
        ᐃΔ[14][nr.ᐃᐃⲆ] = Ia(Dt(3, wu(0.67, true, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
        ᐃΔ[15] = [];
        ᐃΔ[15][nr.ⵠᐃⵠ] = Ia(Dt(3, ou(0.67, hi, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
        ᐃΔ[15][nr.ᐃᐃⲆ] = Ia(Dt(3, ou(0.67, Lo, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
        ᐃΔ[33] = [];
        ᐃΔ[33][nr.ⵠᐃⵠ] = Ia(Dt(3, xu(0.67, true, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
        ᐃΔ[33][nr.ᐃᐃⲆ] = Ia(Dt(3, xu(0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
        ᐃΔ[16] = [];
        ᐃΔ[16][nr.ⵠᐃⵠ] = Ia(Dt(3, tu(1, true, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
        ᐃΔ[16][nr.ᐃᐃⲆ] = Ia(Dt(3, tu(1, Ha, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
        ᐃΔ[35] = [];
        ᐃΔ[35][nr.ⵠᐃⵠ] = Ia(Dt(3, Lu(1, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
        ᐃΔ[35][nr.ᐃᐃⲆ] = Ia(Dt(3, Lu(1, Go, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
        ᐃΔ[55] = [];
        ᐃΔ[55][nr.ⵠᐃⵠ] = Ia(Dt(3, wm(0.5, true, ["#0d1b1c", "#939393", "#5f6061"])));
        ᐃΔ[55][nr.ᐃᐃⲆ] = Ia(Dt(3, wm(0.5, jk, ["#030d14", "#485e66", "#1f343f"])));
        ᐃΔ[45] = [];
        ᐃΔ[45][nr.ⵠᐃⵠ] = Ia(Dt(3, Rm(1, true, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
        ᐃΔ[45][nr.ᐃᐃⲆ] = Ia(Dt(3, Rm(1, Vi, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
        ᐃΔ[36] = [];
        ᐃΔ[36][nr.ⵠᐃⵠ] = Ia(Dt(3, Lu(1, f, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
        ᐃΔ[36][nr.ᐃᐃⲆ] = Ia(Dt(3, Lu(1, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
        ᐃΔ[37] = [];
        ᐃΔ[37][nr.ⵠᐃⵠ] = Ia(Dt(3, Lu(1, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
        ᐃΔ[37][nr.ᐃᐃⲆ] = Ia(Dt(3, Lu(1, Lo, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
        ᐃΔ[38] = [];
        ᐃΔ[38][nr.ⵠᐃⵠ] = Ia(Dt(3, Lu(1, hi, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
        ᐃΔ[38][nr.ᐃᐃⲆ] = Ia(Dt(3, Lu(1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
        ᐃΔ[148] = [];
        ᐃΔ[148][nr.ⵠᐃⵠ] = Ia(Wm(0.55, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
        ᐃΔ[148][nr.ᐃᐃⲆ] = Ia(Wm(0.55, 0, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
        ᐃΔ[536] = [];
        ᐃΔ[536].push(Ia(Wm(0.8, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
        ᐃΔ[536].push(Ia(Wm(0.8, 0, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
        ᐃΔ[536].push(Ia(Wm(0.8, 0, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
        ᐃΔ[538] = [];
        ᐃΔ[538].push(ᐃΔ[536][0]);
        ᐃΔ[538].push(ᐃΔ[536][0]);
        ᐃΔ[538].push(ᐃΔ[536][0]);
        ᐃΔ[158] = [];
        ᐃΔ[158][nr.ⵠᐃⵠ] = Ia(Hm(0.06, false, ["#141414", "#c4a23a", "#816511"]));
        ᐃΔ[158][nr.ᐃᐃⲆ] = Ia(Hm(0.06, ug, ["#030d14", "#2b6664", "#133d3c"]));
        ᐃΔ[535] = [];
        ᐃΔ[535].push(Ia(Hm(0.08, js, ["#141414", "#c4a23a", "#816511"])));
        ᐃΔ[535].push(Ia(Hm(0.08, false, ["#141414", "#e2bd4e", "#a38018"])));
        ᐃΔ[535].push(Ia(Hm(0.08, Qr, ["#141414", "#b0902e", "#634d09"])));
        ᐃΔ[149] = Gb(1.5, [{
            f: _m,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#141414", "#178a99", "#0a6372", "#03282e"]
        }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
        ᐃΔ[526] = [];
        ᐃΔ[526][nr.ⵠᐃⵠ] = Ia(xm(0.8, 0, ["#347f93", "#54a4ba"]));
        ᐃΔ[526][nr.ᐃᐃⲆ] = Ia(xm(0.8, 0, ["#98ede3", "#94f2e7"]));
        ᐃΔ[527] = [];
        ᐃΔ[527][nr.ⵠᐃⵠ] = Ia(Km(0.8, 0, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
        ᐃΔ[527][nr.ᐃᐃⲆ] = Ia(Km(0.8, 0, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
        ᐃΔ[528] = [];
        ᐃΔ[528][nr.ⵠᐃⵠ] = Ia(hc(0.8, 0, ["#a9e4ed", "#86d4e0"]));
        ᐃΔ[528][nr.ᐃᐃⲆ] = Ia(hc(0.8, 0, ["#83ddd4", "#485e66"]));
        ᐃΔ[151] = [];
        ᐃΔ[151][nr.ⵠᐃⵠ] = Ia(oc(0.8, Ig, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
        ᐃΔ[151][nr.ᐃᐃⲆ] = Ia(oc(0.8, f, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
        ᐃΔ[1192] = [];
        ᐃΔ[1192][nr.ⵠᐃⵠ] = ⲆⲆ.ΔᐃⵠⲆⵠⵠᐃ;
        ᐃΔ[1192][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠⲆΔⲆⵠΔΔ;
        ᐃΔ[1193] = [];
        ᐃΔ[1193][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆᐃΔΔᐃᐃⵠ;
        ᐃΔ[1193][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆᐃΔⵠⲆⲆⵠ;
        ᐃΔ[1194] = [];
        ᐃΔ[1194][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃⲆᐃⲆⵠⵠⵠ;
        ᐃΔ[1194][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆⵠⲆΔᐃᐃᐃ;
        ᐃΔ[152] = [];
        ᐃΔ[152][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠᐃΔⵠᐃⲆᐃ;
        ᐃΔ[152][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃᐃⲆᐃᐃⵠⵠ;
        ᐃΔ[1198] = [];
        ᐃΔ[1198][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃⲆᐃᐃⵠⵠΔ;
        ᐃΔ[1198][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃⲆⲆⲆᐃⲆᐃ;
        ᐃΔ[153] = [];
        ᐃΔ[153][nr.ⵠᐃⵠ] = ⲆⲆ.ⲆⵠⲆⵠᐃⵠⲆ;
        ᐃΔ[153][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃΔⲆⲆⲆⵠⵠ;
        ᐃΔ[1202] = [];
        ᐃΔ[1202][nr.ⵠᐃⵠ] = ⲆⲆ.ⵠΔⲆΔᐃᐃΔ;
        ᐃΔ[1202][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠⲆᐃᐃⲆⵠⲆ;
        ᐃΔ[154] = [];
        ᐃΔ[154][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃⵠᐃⲆⲆⵠⲆ;
        ᐃΔ[154][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠΔΔᐃΔᐃΔ;
        ᐃΔ[1206] = [];
        ᐃΔ[1206][nr.ⵠᐃⵠ] = ⲆⲆ.ΔᐃΔᐃΔⲆⵠ;
        ᐃΔ[1206][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠΔⲆⲆΔᐃⲆ;
        ᐃΔ[155] = [];
        ᐃΔ[155][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃⵠⵠⵠⵠⵠⲆ;
        ᐃΔ[155][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆⵠⵠⲆⲆⵠᐃ;
        ᐃΔ[1210] = [];
        ᐃΔ[1210][nr.ⵠᐃⵠ] = ⲆⲆ.ΔⲆⵠⵠⵠᐃᐃ;
        ᐃΔ[1210][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃⲆⵠᐃⲆᐃⵠ;
        ᐃΔ[156] = [];
        ᐃΔ[156][nr.ⵠᐃⵠ] = ⲆⲆ.ΔΔᐃΔᐃΔⵠ;
        ᐃΔ[156][nr.ᐃᐃⲆ] = ⲆⲆ.ᐃᐃᐃⲆᐃⲆᐃ;
        ᐃΔ[1214] = [];
        ᐃΔ[1214][nr.ⵠᐃⵠ] = ⲆⲆ.ΔᐃᐃⲆⵠᐃⵠ;
        ᐃΔ[1214][nr.ᐃᐃⲆ] = ⲆⲆ.ΔΔΔᐃⵠΔᐃ;
        ᐃΔ[157] = [];
        ᐃΔ[157][nr.ⵠᐃⵠ] = ⲆⲆ.ΔⵠⵠΔⲆⵠⲆ;
        ᐃΔ[157][nr.ᐃᐃⲆ] = ⲆⲆ.ⵠΔᐃᐃΔΔΔ;
        ᐃΔ[245] = [];
        ᐃΔ[245][nr.ⵠᐃⵠ] = ⲆⲆ.ΔᐃⵠΔΔΔΔ;
        ᐃΔ[245][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆᐃᐃⲆⲆΔΔ;
        ᐃΔ[246] = ⲆⲆ.ⵠⲆⲆᐃⲆⵠⲆ;
        ᐃΔ[159] = [];
        ᐃΔ[159][nr.ⵠᐃⵠ] = Ia(Pm(0.75, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
        ᐃΔ[159][nr.ᐃᐃⲆ] = Ia(Pm(0.75, jk, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
        ᐃΔ[558] = Ia(Gm(0.3, ["#092813", "#1f773d"], 0));
        ᐃΔ[559] = Ia(Gm(0.3, ["#092813", "#1f773d"], 1));
        ᐃΔ[885] = Ia(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 60;
            c.height = a * 60;
            d.translate(a * -25, a * -25);
            d.translate(0, a * 5);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 24, a * 50);
            d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
            d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
            d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
            d.closePath();
            vt(d, b[0]);
            d.translate(0, a * -5);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 24, a * 50);
            d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
            d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
            d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
            d.closePath();
            vt(d, b[1]);
            return c;
        }(0.6, ["#092813", "#1f773d"]));
        ᐃΔ[556] = [];
        ᐃΔ[556].push(Ia(Mm(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
        ᐃΔ[556].push(Ia(Mm(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
        ᐃΔ[556].push(Ia(Mm(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
        ᐃΔ[560] = [];
        var b = Ia(Mm(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
        ᐃΔ[560].push(b);
        ᐃΔ[560].push(b);
        ᐃΔ[560].push(b);
        ᐃΔ[557] = [];
        ᐃΔ[557].push(Ia(Mm(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
        ᐃΔ[557].push(Ia(Mm(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
        ᐃΔ[557].push(Ia(Mm(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
        ᐃΔ[681] = Ia(function (b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            var f = b * 170;
            var g = b * 172;
            var a = f / 2;
            var i = g / 2;
            d.width = f;
            d.height = g;
            e.translate(a, i);
            e.save();
            for (var j = 0; j < 10; j++) {
                e.rotate(Math.PI / 5);
                e.save();
                e.translate(b * 65, 0);
                zt(e, 3, b * 18, b * 4);
                vt(e, c[0]);
                e.restore();
            }
            e.restore();
            ut(e, 0, 0, b * 40);
            vt(e, Da, c[0], b * 6);
            ut(e, 0, 0, b * 20);
            vt(e, c[0]);
            return d;
        }(0.3, ["#FFFFFF"]));
        ᐃΔ[794] = Ia(function (b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            var f = b * 130;
            var g = b * 142;
            var a = f / 2;
            var h = g / 2;
            d.width = f;
            d.height = g;
            ut(e, a, h, b * 40);
            vt(e, undefined, c[0], b * 7);
            ut(e, a, h, b * 30);
            vt(e, dg, c[0], b * 7);
            ut(e, a, h, b * 20);
            vt(e, c[0]);
            return d;
        }(0.3, ["#FFFFFF"]));
        ᐃΔ[562] = Ia(Gm(0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
        ᐃΔ[667] = Ia(Dt(Math.PI / 5, function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 316;
            c.height = a * 365;
            d.save();
            d.translate(a * 156.07142639160156, a * 51.81248474121094);
            d.rotate(0);
            wt(d, a * -21.5, a * -34, a * 43, a * 68, a * 8);
            d.restore();
            vt(d, b[0], b[0], a * 15);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 126.57142639160156, a * 67.38392639160156);
            d.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
            d.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
            d.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
            d.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
            d.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
            d.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
            d.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
            d.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
            d.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
            d.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
            d.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
            d.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
            d.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
            d.closePath();
            vt(d, b[0], b[0], a * 15);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 125.57142639160156, a * 156.66963958740234);
            d.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
            d.closePath();
            vt(d, b[0], b[0], a * 15);
            return c;
        }(0.2, ["#FFFFFF"])));
        ᐃΔ[43] = [];
        ᐃΔ[43][nr.ⵠᐃⵠ] = Ia(dm(0.85, 0, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
        ᐃΔ[43][nr.ᐃᐃⲆ] = Ia(dm(0.85, 0, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
        ᐃΔ[561] = [];
        ᐃΔ[561].push(Ia(Mm(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
        ᐃΔ[561].push(Ia(Mm(0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
        ᐃΔ[561].push(Ia(Mm(0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
        ᐃΔ[83] = [];
        ᐃΔ[83][nr.ⵠᐃⵠ] = Ia(sc(0.37, 0, ["#2a2938", "#242330", "#313041"]));
        ᐃΔ[83][nr.ᐃᐃⲆ] = Ia(sc(0.37, 0, ["#1b1e30", "#161921", "#252f3e"]));
        ᐃΔ[85] = [];
        ᐃΔ[85][nr.ⵠᐃⵠ] = Ia(Nm(0.17, 0, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
        ᐃΔ[85][nr.ᐃᐃⲆ] = Ia(Nm(0.17, 0, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
        ᐃΔ[86] = [];
        ᐃΔ[86][nr.ⵠᐃⵠ] = Ia(Ym(0.55, true, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
        ᐃΔ[86][nr.ᐃᐃⲆ] = Ia(Ym(0.55, dh, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
        ᐃΔ[84] = [];
        ᐃΔ[84][nr.ⵠᐃⵠ] = Ia(Ym(0.55, true, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
        ᐃΔ[84][nr.ᐃᐃⲆ] = Ia(Ym(0.55, true, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
        ᐃΔ[77] = [];
        ᐃΔ[77][nr.ⵠᐃⵠ] = Ia(Qm(0.2, Vi, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
        ᐃΔ[77][nr.ᐃᐃⲆ] = Ia(Qm(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
        ᐃΔ[78] = [];
        ᐃΔ[78][nr.ⵠᐃⵠ] = Ia(Qm(0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
        ᐃΔ[78][nr.ᐃᐃⲆ] = Ia(Qm(0.2, us, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
        ᐃΔ[79] = [];
        ᐃΔ[79][nr.ⵠᐃⵠ] = Ia(Qm(0.2, R, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
        ᐃΔ[79][nr.ᐃᐃⲆ] = Ia(Qm(0.2, dh, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
        ᐃΔ[61] = [];
        ᐃΔ[61][nr.ⵠᐃⵠ] = Ia(_t(0.24, true, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
        ᐃΔ[61][nr.ᐃᐃⲆ] = Ia(_t(0.24, hi, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
        ᐃΔ[59] = [];
        ᐃΔ[59][nr.ⵠᐃⵠ] = Ia(Ju(0.32, 0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
        ᐃΔ[59][nr.ᐃᐃⲆ] = Ia(Ju(0.32, 0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
        ᐃΔ[62] = [];
        ᐃΔ[62][nr.ⵠᐃⵠ] = Ia(Dt(3, fm(0.9, Ig, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
        ᐃΔ[62][nr.ᐃᐃⲆ] = Ia(Dt(3, fm(0.9, true, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
        ᐃΔ[750] = [];
        ᐃΔ[750][nr.ⵠᐃⵠ] = Ia(Dt(3, fm(1, bg, [undefined, undefined, undefined, "#c8efef", "#c8efef"])));
        ᐃΔ[750][nr.ᐃᐃⲆ] = Ia(Dt(3, fm(1, jk, [undefined, Ga, undefined, "#87d2e6", "#87d2e6"])));
        ᐃΔ[755] = [];
        ᐃΔ[755].push(Ia(Cm(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
        ᐃΔ[755].push(Ia(Cm(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1)));
        ᐃΔ[755].push(Ia(Cm(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
        ᐃΔ[795] = [];
        ᐃΔ[795].push(Ia(Zm(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
        ᐃΔ[795].push(Ia(Zm(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
        ᐃΔ[795].push(Ia(Zm(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
        ᐃΔ[782] = [];
        ᐃΔ[782].push(Ia(hd(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1)));
        ᐃΔ[782].push(Ia(hd(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1)));
        ᐃΔ[782].push(Ia(hd(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
        ᐃΔ[783] = [];
        ᐃΔ[783].push(Ia(hd(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0)));
        ᐃΔ[783].push(Ia(hd(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0)));
        ᐃΔ[783].push(Ia(hd(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0)));
        ᐃΔ[46] = [];
        ᐃΔ[46][nr.ⵠᐃⵠ] = Ia(Dt(3, uc(0.7, true, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
        ᐃΔ[46][nr.ᐃᐃⲆ] = Ia(Dt(3, uc(0.7, Lo, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
        ᐃΔ[50] = [];
        ᐃΔ[50][nr.ⵠᐃⵠ] = Ia(Dt(3, uc(0.7, hi, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
        ᐃΔ[50][nr.ᐃᐃⲆ] = Ia(Dt(3, uc(0.7, true, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
        ᐃΔ[51] = [];
        ᐃΔ[51][nr.ⵠᐃⵠ] = Ia(Dt(3, uc(0.7, R, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
        ᐃΔ[51][nr.ᐃᐃⲆ] = Ia(Dt(3, uc(0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
        ᐃΔ[52] = [];
        ᐃΔ[52][nr.ⵠᐃⵠ] = Ia(Dt(3, uc(0.7, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
        ᐃΔ[52][nr.ᐃᐃⲆ] = Ia(Dt(3, uc(0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
        ᐃΔ[592] = [];
        ᐃΔ[592].push(Ia(tc(0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
        ᐃΔ[592].push(Ia(tc(0.7, ["#524712", "#c7b11c", "#d9ba18"])));
        ᐃΔ[592].push(Ia(tc(0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
        ᐃΔ[326] = Ia(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 188;
            c.height = a * 190;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
            d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
            d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
            d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
            d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
            d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
            d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
            d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
            d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
            d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
            d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
            d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
            d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
            d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
            d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
            d.closePath();
            vt(d, b[0], b[0], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
            d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
            d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
            d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
            d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
            d.closePath();
            vt(d, b[0], b[0], a * 2);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
            d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
            d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
            d.closePath();
            vt(d, b[0], b[0], a * 2);
            return c;
        }(1.1, ["#BB0000"]));
        ᐃΔ[333] = Ia(Dt(Math.PI, function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 238;
            c.height = a * 230;
            d.translate(a * -93, a * -110);
            ut(d, a * 213.5, a * 256.75, a * 75);
            vt(d, b);
            ut(d, a * 213.5, a * 175.75, a * 25);
            vt(d, b);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 156.5, a * 137.75);
            d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 217.5, a * 178.75);
            d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 130.5, a * 124.75);
            d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 214.5, a * 183.75);
            d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 107.5, a * 213.75);
            d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 212.5, a * 187.75);
            d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 102.5, a * 258.75);
            d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 214.5, a * 192.75);
            d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 219.5, a * 158.75);
            d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
            d.closePath();
            d.lineWidth = a * 10;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 210.5, a * 160.75);
            d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
            d.closePath();
            d.lineWidth = a * 10;
            d.strokeStyle = b;
            d.stroke();
            return c;
        }(0.9, "#BB0000")));
        ᐃΔ[23] = [];
        ᐃΔ[23][nr.ⵠᐃⵠ] = Ia(um(0.55, dn, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
        ᐃΔ[23][nr.ᐃᐃⲆ] = Ia(um(0.55, al, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
        ᐃΔ[58] = [];
        ᐃΔ[58][nr.ⵠᐃⵠ] = Ia(nm(0.55, true, ["#252525", "#73583e", "#573f29", "#7d6144"]));
        ᐃΔ[58][nr.ᐃᐃⲆ] = Ia(nm(0.55, true, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
        ᐃΔ[25] = [];
        ᐃΔ[25][nr.ⵠᐃⵠ] = Ia(im(0.6, true, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
        ᐃΔ[25][nr.ᐃᐃⲆ] = Ia(im(0.6, true, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
        ᐃΔ[26] = [];
        ᐃΔ[26][nr.ⵠᐃⵠ] = Ia(am(0.58, 0, ["#dbce71", "#b29c32", "#c4bc51"]));
        ᐃΔ[26][nr.ᐃᐃⲆ] = Ia(am(0.58, 0, ["#2b7c57", "#15543c", "#1a7961"]));
        ᐃΔ[27] = [];
        ᐃΔ[27][nr.ⵠᐃⵠ] = Ia(mm(0.69, 0, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
        ᐃΔ[27][nr.ᐃᐃⲆ] = Ia(mm(0.69, 0, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
        ᐃΔ[413] = [];
        ᐃΔ[413][nr.ⵠᐃⵠ] = [];
        ᐃΔ[413][nr.ᐃᐃⲆ] = [];
        ᐃΔ[413][nr.ⵠᐃⵠ].push(Ia(Gu(1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
        ᐃΔ[413][nr.ⵠᐃⵠ].push(Ia(Fu(1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
        ᐃΔ[413][nr.ⵠᐃⵠ].push(Ia(Cu(1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
        ᐃΔ[413][nr.ᐃᐃⲆ].push(Ia(Gu(1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
        ᐃΔ[413][nr.ᐃᐃⲆ].push(Ia(Fu(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
        ᐃΔ[413][nr.ᐃᐃⲆ].push(Ia(Cu(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
        ᐃΔ[449] = [];
        ᐃΔ[449][nr.ⵠᐃⵠ] = Ia(Qu(1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
        ᐃΔ[449][nr.ᐃᐃⲆ] = Ia(Qu(1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
        ᐃΔ[451] = [];
        ᐃΔ[451][nr.ⵠᐃⵠ] = Ia(Ru(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
        ᐃΔ[451][nr.ᐃᐃⲆ] = Ia(Ru(1, ["#050505", "#327570", "#021724", "#200333"]));
        ᐃΔ[452] = [];
        ᐃΔ[452][nr.ⵠᐃⵠ] = Ia(em(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
        ᐃΔ[452][nr.ᐃᐃⲆ] = Ia(em(1, ["#050505", "#327570", "#021724", "#200333"]));
        ᐃΔ[243] = [];
        ᐃΔ[243][nr.ⵠᐃⵠ] = [];
        ᐃΔ[243][nr.ᐃᐃⲆ] = [];
        ᐃΔ[243][nr.ⵠᐃⵠ] = [ⲆⲆ.ΔⵠⲆⵠΔⲆⲆ, ⲆⲆ.ΔΔⵠⵠΔⲆⵠ, ⲆⲆ.ⵠⵠⵠⵠᐃⲆⵠ, ⲆⲆ.ⲆⲆΔⲆⵠᐃᐃ, ⲆⲆ.ΔΔΔΔᐃΔⲆ, ⲆⲆ.ᐃⲆⵠⲆᐃᐃⵠ, ⲆⲆ.ⲆⲆⲆΔⵠᐃⲆ, ⲆⲆ.ⲆⲆᐃΔⲆⲆᐃ, ⲆⲆ.ΔΔⵠⵠⵠᐃᐃ, ⲆⲆ.ᐃⵠΔΔΔⵠⵠ, ⲆⲆ.ᐃⵠΔΔⵠⵠⵠ, ⲆⲆ.ΔⲆⲆⵠⵠᐃΔ, ⲆⲆ.ⲆᐃⲆΔᐃⵠᐃ, ⲆⲆ.ⲆΔⲆΔΔᐃⵠ, ⲆⲆ.ΔⲆⵠᐃΔⲆᐃ, ⲆⲆ.ᐃⵠᐃⲆᐃⵠⲆ, ⲆⲆ.ΔⵠⲆᐃΔᐃⲆ, ⲆⲆ.ᐃΔⵠⵠⵠΔⵠ, ⲆⲆ.ⵠⲆⲆᐃᐃᐃⲆ, ⲆⲆ.ᐃᐃᐃΔᐃⲆⲆ, ⲆⲆ.ⲆᐃⵠⲆᐃⵠⲆ, ⲆⲆ.ΔⵠⵠΔΔΔᐃ, ⲆⲆ.ΔⵠⵠⵠΔⵠΔ, ⲆⲆ.ΔΔΔᐃⲆⵠΔ, ⲆⲆ.ᐃᐃᐃⲆⵠΔΔ, ⲆⲆ.ᐃⲆᐃⵠⵠⵠⵠ, ⲆⲆ.ⵠⵠΔᐃᐃᐃⲆ, ⲆⲆ.ⲆᐃΔΔⲆΔⵠ, ⲆⲆ.ⵠᐃᐃΔᐃΔⲆ, ⲆⲆ.ᐃⵠⲆᐃⵠⲆᐃ, ⲆⲆ.ᐃⲆΔΔⲆⲆᐃ, ⲆⲆ.ΔⲆᐃΔⲆᐃⲆ, ⲆⲆ.ⲆⲆᐃΔᐃΔⲆ, ⲆⲆ.ⵠᐃⲆⵠΔᐃΔ, ⲆⲆ.ΔᐃⲆⲆⲆⵠⲆ, ⲆⲆ.ⲆΔΔᐃⲆΔⵠ, ⲆⲆ.ᐃΔΔΔⲆᐃⲆ, ⲆⲆ.ⵠⵠᐃΔⲆⲆᐃ, ⲆⲆ.ᐃⲆΔΔⵠⵠᐃ, ⲆⲆ.ⲆⵠⲆΔⲆⵠⵠ, ⲆⲆ.ⲆᐃᐃΔᐃⵠⲆ, ⲆⲆ.ⲆⵠⲆΔⵠⵠᐃ, ⲆⲆ.ⲆⵠΔΔⲆᐃⵠ, ⲆⲆ.ᐃΔⵠⲆⲆⵠⵠ, ⲆⲆ.ⲆΔᐃⵠᐃᐃΔ, ⲆⲆ.ⲆⲆⲆᐃⵠᐃⵠ, ⲆⲆ.ᐃᐃⲆΔⲆΔᐃ, ⲆⲆ.ΔⵠΔᐃⵠΔⲆ, ⲆⲆ.ᐃⵠⵠᐃⲆⵠⵠ, ⲆⲆ.ΔΔⵠⵠⲆⲆᐃ, ⲆⲆ.Δⵠᐃⵠᐃᐃⵠ, ⲆⲆ.ⲆΔΔⵠⵠΔᐃ, ⲆⲆ.ΔᐃᐃⲆᐃⵠᐃ, ⲆⲆ.ⲆᐃᐃΔΔⵠᐃ, ⲆⲆ.ⲆᐃᐃΔΔΔΔ, ⲆⲆ.ΔΔⲆᐃΔⵠⵠ];
        ᐃΔ[243][nr.ᐃᐃⲆ] = [ⲆⲆ.ᐃⵠⲆᐃΔΔⲆ, ⲆⲆ.ᐃⲆⲆⲆᐃΔⲆ, ⲆⲆ.ᐃΔᐃΔⲆᐃΔ, ⲆⲆ.ⲆⲆⲆⲆᐃᐃⲆ, ⲆⲆ.ⲆΔⲆⲆᐃΔΔ, ⲆⲆ.ᐃⲆⵠᐃⲆⵠⵠ, ⲆⲆ.ⵠΔΔⵠⵠⵠᐃ, ⲆⲆ.ᐃΔΔᐃⲆΔⲆ, ⲆⲆ.ⵠⲆⲆⲆⲆⲆΔ, ⲆⲆ.ⵠⵠΔᐃⲆⲆⲆ, ⲆⲆ.ΔᐃᐃⲆΔΔⲆ, ⲆⲆ.ΔΔᐃⵠΔΔᐃ, ⲆⲆ.ΔⵠᐃⵠⵠΔᐃ, ⲆⲆ.ΔΔΔⵠⲆΔⵠ, ⲆⲆ.ΔΔᐃⵠᐃⲆᐃ, ⲆⲆ.ᐃⲆⵠⲆᐃΔⲆ, ⲆⲆ.ΔⲆΔⵠᐃⵠⵠ, ⲆⲆ.ⲆⲆⵠⲆΔⵠⵠ, ⲆⲆ.ⵠᐃᐃⵠⵠᐃΔ, ⲆⲆ.ΔⲆᐃⲆᐃΔⲆ, ⲆⲆ.ⲆᐃΔⲆᐃΔᐃ, ⲆⲆ.ⲆᐃΔΔᐃΔⵠ, ⲆⲆ.ΔΔΔΔᐃΔⵠ, ⲆⲆ.ΔᐃᐃⲆΔⲆᐃ, ⲆⲆ.ⲆⵠΔⵠⲆᐃᐃ, ⲆⲆ.ΔⵠΔⵠᐃⵠΔ, ⲆⲆ.ΔⲆⵠⲆⵠᐃΔ, ⲆⲆ.ᐃᐃᐃⲆᐃⲆⲆ, ⲆⲆ.ⵠᐃᐃΔΔᐃᐃ, ⲆⲆ.ᐃᐃⵠⲆᐃⲆΔ, ⲆⲆ.ᐃΔᐃⲆⵠᐃⵠ, ⲆⲆ.ΔⵠⲆⲆᐃⵠⲆ, ⲆⲆ.ΔᐃΔⵠⲆΔᐃ, ⲆⲆ.ⲆⲆⲆⵠⲆⲆΔ, ⲆⲆ.ⲆⵠᐃΔΔⲆⲆ, ⲆⲆ.ΔΔΔⲆⲆΔⵠ, ⲆⲆ.ΔΔⲆⵠⲆΔⵠ, ⲆⲆ.ⵠΔΔⵠᐃᐃᐃ, ⲆⲆ.ᐃᐃⵠΔᐃⵠⵠ, ⲆⲆ.ΔΔΔⲆᐃⵠΔ, ⲆⲆ.ⵠᐃⵠⵠΔΔⲆ, ⲆⲆ.ⵠΔΔᐃΔᐃᐃ, ⲆⲆ.ⵠⲆΔΔⲆⵠⵠ, ⲆⲆ.ᐃΔᐃⵠⲆΔⵠ, ⲆⲆ.ⵠⲆΔΔⲆⲆⲆ, ⲆⲆ.ⵠᐃⵠⵠΔΔⵠ, ⲆⲆ.ⲆᐃΔΔΔⵠΔ, ⲆⲆ.ⲆᐃⵠⵠᐃⲆᐃ, ⲆⲆ.ΔΔΔΔⲆᐃΔ, ⲆⲆ.ΔⵠΔⲆᐃⵠΔ, ⲆⲆ.ⲆΔⵠᐃⵠⲆⲆ, ⲆⲆ.ᐃᐃΔⵠΔᐃΔ, ⲆⲆ.ΔᐃΔⲆⵠⲆⵠ, ⲆⲆ.ⵠⵠΔⵠⲆΔᐃ, ⲆⲆ.ᐃᐃᐃΔᐃᐃΔ, ⲆⲆ.ⵠⵠΔⵠᐃⲆᐃ];
        ᐃΔ[676] = [];
        ᐃΔ[676][nr.ⵠᐃⵠ] = [];
        ᐃΔ[676][nr.ᐃᐃⲆ] = [];
        ᐃΔ[676][nr.ⵠᐃⵠ].push(Ia(_d(1.1, false, ["#252B28", "#747471", "#83827e"], 0)));
        ᐃΔ[676][nr.ⵠᐃⵠ].push(Ia(_d(0.9, false, ["#252B28", "#747471", "#83827e"], 1)));
        ᐃΔ[676][nr.ⵠᐃⵠ].push(Ia(_d(1, pl, ["#252B28", "#747471", "#83827e"], 2)));
        ᐃΔ[676][nr.ⵠᐃⵠ].push(Ia(_d(0.9, Ah, ["#252B28", "#747471", "#83827e"], 2)));
        ᐃΔ[676][nr.ᐃᐃⲆ].push(Ia(_d(1.1, false, ["#030d14", "#123335", "#183f3f"], 0)));
        ᐃΔ[676][nr.ᐃᐃⲆ].push(Ia(_d(0.9, false, ["#030d14", "#123335", "#183f3f"], 1)));
        ᐃΔ[676][nr.ᐃᐃⲆ].push(Ia(_d(1, false, ["#030d14", "#123335", "#183f3f"], 2)));
        ᐃΔ[676][nr.ᐃᐃⲆ].push(Ia(_d(0.9, false, ["#030d14", "#123335", "#183f3f"], 2)));
        ᐃΔ[679] = [];
        ᐃΔ[679][nr.ⵠᐃⵠ] = [];
        ᐃΔ[679][nr.ᐃᐃⲆ] = [];
        ᐃΔ[679][nr.ⵠᐃⵠ].push(Ia(_d(1.1, Vi, ["#252B28", "#58645F", "#75827D"], 2)));
        ᐃΔ[679][nr.ⵠᐃⵠ].push(Ia(_d(0.9, us, ["#252B28", "#58645F", "#75827D"], 2)));
        ᐃΔ[679][nr.ⵠᐃⵠ].push(Ia(_d(1, true, ["#252B28", "#58645F", "#75827D"], 2)));
        ᐃΔ[679][nr.ⵠᐃⵠ].push(Ia(_d(0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
        ᐃΔ[679][nr.ᐃᐃⲆ].push(Ia(_d(1.1, true, ["#030d14", "#123335", "#183f3f"], 2)));
        ᐃΔ[679][nr.ᐃᐃⲆ].push(Ia(_d(0.9, Vi, ["#030d14", "#123335", "#183f3f"], 2)));
        ᐃΔ[679][nr.ᐃᐃⲆ].push(Ia(_d(1, true, ["#030d14", "#123335", "#183f3f"], 2)));
        ᐃΔ[679][nr.ᐃᐃⲆ].push(Ia(_d(0.9, Fl, ["#030d14", "#123335", "#183f3f"], 2)));
        ᐃΔ[415] = [];
        ᐃΔ[415][nr.ⵠᐃⵠ] = [];
        ᐃΔ[415][nr.ᐃᐃⲆ] = [];
        ᐃΔ[415][nr.ⵠᐃⵠ].push(Ia(Wd(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ᐃΔ[415][nr.ⵠᐃⵠ].push(Ia(Wd(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ᐃΔ[415][nr.ⵠᐃⵠ].push(Ia(Wd(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ᐃΔ[415][nr.ᐃᐃⲆ].push(Ia(Wd(1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
        ᐃΔ[415][nr.ᐃᐃⲆ].push(Ia(Wd(1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
        ᐃΔ[415][nr.ᐃᐃⲆ].push(Ia(Wd(1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
        ᐃΔ[416] = [];
        ᐃΔ[416][nr.ⵠᐃⵠ] = [];
        ᐃΔ[416][nr.ᐃᐃⲆ] = [];
        ᐃΔ[416][nr.ⵠᐃⵠ].push(Ia(Nd(1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
        ᐃΔ[416][nr.ⵠᐃⵠ].push(Ia(Nd(0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
        ᐃΔ[416][nr.ⵠᐃⵠ].push(Ia(Nd(0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
        ᐃΔ[416][nr.ᐃᐃⲆ].push(Ia(Nd(1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
        ᐃΔ[416][nr.ᐃᐃⲆ].push(Ia(Nd(0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
        ᐃΔ[416][nr.ᐃᐃⲆ].push(Ia(Nd(0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
        ᐃΔ[121] = [];
        ᐃΔ[121][nr.ⵠᐃⵠ] = [];
        ᐃΔ[121][nr.ᐃᐃⲆ] = [];
        ᐃΔ[121][nr.ⵠᐃⵠ].push(Ia(Iu(1.7, Ig, ["#1d051e", "#c27add", "#cd98e5"])));
        ᐃΔ[121][nr.ⵠᐃⵠ].push(Ia(Iu(1.5, true, ["#1d051e", "#c27add", "#cd98e5"])));
        ᐃΔ[121][nr.ⵠᐃⵠ].push(Ia(Iu(1.3, true, ["#1d051e", "#c27add", "#cd98e5"])));
        ᐃΔ[121][nr.ᐃᐃⲆ].push(Ia(Iu(1.7, Vi, ["#1d051e", "#41aaa0", "#5cccc4"])));
        ᐃΔ[121][nr.ᐃᐃⲆ].push(Ia(Iu(1.5, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
        ᐃΔ[121][nr.ᐃᐃⲆ].push(Ia(Iu(1.3, hi, ["#1d051e", "#41aaa0", "#5cccc4"])));
        ᐃΔ[678] = [];
        ᐃΔ[678][nr.ⵠᐃⵠ] = [];
        ᐃΔ[678][nr.ᐃᐃⲆ] = [];
        ᐃΔ[678][nr.ⵠᐃⵠ].push(Ia(Du(1, ["#2d53c4"])));
        ᐃΔ[678][nr.ᐃᐃⲆ].push(Ia(Du(1, ["#2d53c4"])));
        ᐃΔ[696] = [];
        ᐃΔ[696][nr.ⵠᐃⵠ] = [];
        ᐃΔ[696][nr.ᐃᐃⲆ] = [];
        ᐃΔ[696][nr.ⵠᐃⵠ].push(Ia(Du(1, ["#c4912d"])));
        ᐃΔ[696][nr.ᐃᐃⲆ].push(Ia(Du(1, ["#c4912d"])));
        ᐃΔ[680] = [];
        ᐃΔ[680][nr.ⵠᐃⵠ] = Ia(Ou(1, ["#414040"]));
        ᐃΔ[680][nr.ᐃᐃⲆ] = Ia(Ou(1, ["#153635"]));
        ᐃΔ[508] = [];
        ᐃΔ[508][nr.ⵠᐃⵠ] = Ia(Ut(1, Sh, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ᐃΔ[508][nr.ᐃᐃⲆ] = Ia(Ut(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ᐃΔ[509] = [];
        ᐃΔ[509][nr.ⵠᐃⵠ] = Ia(St(1, Ah, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ᐃΔ[509][nr.ᐃᐃⲆ] = Ia(St(1, Ah, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ᐃΔ[512] = [];
        ᐃΔ[512][nr.ⵠᐃⵠ] = Ia(St(1, Sh, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ᐃΔ[512][nr.ᐃᐃⲆ] = Ia(St(1, Ro, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ᐃΔ[511] = [];
        ᐃΔ[511][nr.ⵠᐃⵠ] = Ia(bu(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ᐃΔ[511][nr.ᐃᐃⲆ] = Ia(bu(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ᐃΔ[510] = [];
        ᐃΔ[510][nr.ⵠᐃⵠ] = Ia(Yt(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ᐃΔ[510][nr.ᐃᐃⲆ] = Ia(Yt(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ᐃΔ[419] = [];
        ᐃΔ[419][nr.ⵠᐃⵠ] = Ia(gm(0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
        ᐃΔ[419][nr.ᐃᐃⲆ] = Ia(gm(0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
        ᐃΔ[445] = [];
        ᐃΔ[445][nr.ⵠᐃⵠ] = Ia(om(0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
        ᐃΔ[445][nr.ᐃᐃⲆ] = Ia(om(0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
        ᐃΔ[259] = [];
        ᐃΔ[818] = [];
        ᐃΔ[516] = [];
        ᐃΔ[819] = [];
        for (a = 0; a < 2; a++) {
            ᐃΔ[259][a] = document.createElement("canvas");
            ᐃΔ[259][a].width = 193;
            ᐃΔ[259][a].height = 193;
            ᐃΔ[818][a] = ᐃΔ[259][a].getContext("2d");
            ᐃΔ[516][a] = document.createElement("canvas");
            ᐃΔ[516][a].width = 600;
            ᐃΔ[516][a].height = 600;
            ᐃΔ[819][a] = ᐃΔ[516][a].getContext("2d");
        }
        ᐃΔ[475] = [];
        ᐃΔ[475][nr.ⵠᐃⵠ] = Ia(Ou(1, ["#c8e0de"]));
        ᐃΔ[475][nr.ᐃᐃⲆ] = Ia(Ou(1, ["#147071"]));
        ᐃΔ[476] = [];
        ᐃΔ[476][nr.ⵠᐃⵠ] = Ia(Ou(1, ["#231912"]));
        ᐃΔ[476][nr.ᐃᐃⲆ] = Ia(Ou(1, ["#021719"]));
        ᐃΔ[697] = Ia(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 253;
            c.height = a * 192;
            d.save();
            d.translate(a * 37, a * 94);
            wt(d, a * -7, a * -20, a * 14, a * 37, a * 20);
            d.restore();
            vt(d, b[0]);
            d.save();
            d.translate(a * 131, a * 94);
            wt(d, a * -84, a * -67, a * 168, a * 134, a * 20);
            d.restore();
            vt(d, b[0], b[0], a * 13);
            d.save();
            d.translate(a * 223, a * 94.5);
            wt(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
            d.restore();
            vt(d, b[0]);
            d.save();
            d.translate(a * 128.5, a * 170.5);
            wt(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
            d.restore();
            vt(d, b[0]);
            return c;
        }(0.5, ["#BB0000"]));
        ᐃΔ[461] = Ia(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 161;
            c.height = a * 190;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 9, a * 93);
            d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
            d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
            d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
            d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
            d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
            d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
            d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
            d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
            d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
            d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
            d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
            d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
            d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
            d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
            d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
            d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
            d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
            d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
            d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
            d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
            d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
            d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
            d.closePath();
            vt(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 25, a * 63);
            d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
            d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
            d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
            vt(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 91, a * 53);
            d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
            d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
            d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
            vt(d, b, b, a * 4);
            return c;
        }(0.9, "#BB0000"));
        ᐃΔ[462] = Ia(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 147;
            c.height = a * 172;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 8, a * 50);
            d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
            d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
            d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
            d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
            d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
            d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
            d.closePath();
            vt(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 14, a * 57);
            d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
            d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
            vt(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 93, a * 47);
            d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
            d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
            vt(d, b, b, a * 4);
            return c;
        }(0.9, "#BB0000"));
        ᐃΔ[463] = Ia(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 271;
            c.height = a * 366;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 133, a * 99);
            d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
            d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
            d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
            d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
            d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
            d.closePath();
            vt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 73, a * 270);
            d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
            d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
            d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
            d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
            d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
            d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
            d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
            d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
            d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
            d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
            d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
            d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
            d.closePath();
            vt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 76, a * 252);
            d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
            d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
            d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
            d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
            d.closePath();
            vt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 84, a * 257);
            d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
            d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
            d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
            d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
            d.closePath();
            vt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 125, a * 65);
            d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
            d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
            d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
            d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
            d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
            d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
            d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
            d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
            d.closePath();
            vt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 115, a * 37);
            d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
            d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
            d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
            d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
            d.closePath();
            vt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 146, a * 34);
            d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
            d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
            d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
            d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
            d.closePath();
            vt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 143, a * 69);
            d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
            d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
            d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
            d.closePath();
            vt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 149, a * 92);
            d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
            d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
            d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
            d.closePath();
            vt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 111, a * 61);
            d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
            d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
            d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
            d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
            d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
            d.closePath();
            vt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 107, a * 81);
            d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
            d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
            d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
            d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
            d.closePath();
            vt(d, b[0]);
            return c;
        }(1, ["#BB0000"]));
        ᐃΔ[466] = Ia(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 85;
            c.height = a * 145;
            d.translate(a * -20, a * -95);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 50, a * 105);
            d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
            d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
            d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
            d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
            d.closePath();
            vt(d, b);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 44, a * 106);
            d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
            d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
            d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
            d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
            d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
            d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
            d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
            d.closePath();
            vt(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 30, a * 159);
            d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
            d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
            d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
            d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
            d.closePath();
            vt(d, b);
            return c;
        }(0.8, "#BB0000"));
        ᐃΔ[467] = Ia(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 85;
            c.height = a * 145;
            d.translate(a * -165, a * -95);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 217, a * 103);
            d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
            d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
            d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
            d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
            d.closePath();
            vt(d, b);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 231, a * 163);
            d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
            d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
            d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
            d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
            d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
            d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
            d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
            d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
            d.closePath();
            vt(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 234, a * 154);
            d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
            d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
            d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
            d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
            d.closePath();
            vt(d, b);
            return c;
        }(0.8, "#BB0000"));
        ᐃΔ[322] = Ia(function (b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            var f = b * 85;
            var g = b * 115;
            var a = b * 4;
            d.width = f;
            d.height = g;
            e.translate(b * -130, b * -60);
            e.globalAlpha = 1;
            e.beginPath();
            e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
            e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
            e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
            e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
            e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
            e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
            e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
            e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
            e.closePath();
            vt(e, c, c, a);
            return d;
        }(0.9, "#BB0000"));
        ᐃΔ[279] = Ia(Ct(0.6, "#BB0000"));
        ᐃΔ[280] = Ia(Ct(0.6, "#1CE7E0"));
        ᐃΔ[281] = Ia(Ct(0.6, "#DBE71C"));
        ᐃΔ[308] = Ia(Ct(0.6, "#00BB00"));
        ᐃΔ[602] = [];
        ᐃΔ[602][nr.ⵠᐃⵠ] = Ia(Ou(1, ["#dac291"]));
        ᐃΔ[602][nr.ᐃᐃⲆ] = Ia(Ou(1, ["#0D423D"]));
        ᐃΔ[698] = [];
        ᐃΔ[698][nr.ⵠᐃⵠ] = Ia(Ou(1, ["#dac291"]));
        ᐃΔ[698][nr.ᐃᐃⲆ] = Ia(Ou(1, ["#0D423D"]));
        ᐃΔ[788] = [];
        ᐃΔ[788][nr.ⵠᐃⵠ] = Ia(Dm(0.3, Lo, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
        ᐃΔ[788][nr.ᐃᐃⲆ] = Ia(Dm(0.3, us, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
        ᐃΔ[182] = [];
        ᐃΔ[182][nr.ⵠᐃⵠ] = Ia(Dm(0.3, gt, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
        ᐃΔ[182][nr.ᐃᐃⲆ] = Ia(Dm(0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
        ᐃΔ[127] = [Ia(ic(1, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
        ᐃΔ[128] = [Ia(ic(1, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
        ᐃΔ[603] = [];
        ᐃΔ[603][nr.ⵠᐃⵠ] = [];
        ᐃΔ[603][nr.ᐃᐃⲆ] = [];
        ᐃΔ[603][nr.ⵠᐃⵠ].push(Ia(Mu(1, ["#0B6A84"])));
        ᐃΔ[603][nr.ⵠᐃⵠ].push(Ia(hm(1, ["#0B6A84"])));
        ᐃΔ[603][nr.ⵠᐃⵠ].push(Ia(lm(1, ["#0B6A84"])));
        ᐃΔ[603][nr.ⵠᐃⵠ].push(Ia(sm(1, ["#0B6A84"])));
        ᐃΔ[603][nr.ⵠᐃⵠ].push(Ia(tm(1, ["#0B6A84"])));
        ᐃΔ[603][nr.ⵠᐃⵠ].push(Ia(Su(1, ["#0B6A84"])));
        ᐃΔ[603][nr.ⵠᐃⵠ].push(Ia(vm(1, ["#0B6A84"])));
        ᐃΔ[603][nr.ᐃᐃⲆ].push(Ia(Mu(1, ["#09373F"])));
        ᐃΔ[603][nr.ᐃᐃⲆ].push(Ia(hm(1, ["#09373F"])));
        ᐃΔ[603][nr.ᐃᐃⲆ].push(Ia(lm(1, ["#09373F"])));
        ᐃΔ[603][nr.ᐃᐃⲆ].push(Ia(sm(1, ["#09373F"])));
        ᐃΔ[603][nr.ᐃᐃⲆ].push(Ia(tm(1, ["#09373F"])));
        ᐃΔ[603][nr.ᐃᐃⲆ].push(Ia(Su(1, ["#09373F"])));
        ᐃΔ[603][nr.ᐃᐃⲆ].push(Ia(vm(1, ["#09373F"])));
        ᐃΔ[692] = [];
        ᐃΔ[692][nr.ⵠᐃⵠ] = [];
        ᐃΔ[692][nr.ᐃᐃⲆ] = [];
        ᐃΔ[692][nr.ⵠᐃⵠ].push(Ia(Ku(1.7, ["#FBEFBC"], 0)));
        ᐃΔ[692][nr.ⵠᐃⵠ].push(Ia(Ku(1.9, ["#FBEFBC"], 1)));
        ᐃΔ[692][nr.ⵠᐃⵠ].push(Ia(Ku(1.7, ["#FBEFBC"], 2)));
        ᐃΔ[692][nr.ᐃᐃⲆ].push(Ia(Ku(1.7, ["#0F4C48"], 0)));
        ᐃΔ[692][nr.ᐃᐃⲆ].push(Ia(Ku(1.9, ["#0F4C48"], 1)));
        ᐃΔ[692][nr.ᐃᐃⲆ].push(Ia(Ku(1.7, ["#0F4C48"], 2)));
        ᐃΔ[694] = [];
        ᐃΔ[694][nr.ⵠᐃⵠ] = [];
        ᐃΔ[694][nr.ᐃᐃⲆ] = [];
        ᐃΔ[694][nr.ⵠᐃⵠ].push(Ia(Ku(1.8, ["#A9D6D3"], 0)));
        ᐃΔ[694][nr.ⵠᐃⵠ].push(Ia(Ku(2, ["#A9D6D3"], 1)));
        ᐃΔ[694][nr.ⵠᐃⵠ].push(Ia(Ku(1.8, ["#A9D6D3"], 2)));
        ᐃΔ[694][nr.ᐃᐃⲆ].push(Ia(Ku(1.8, ["#115E60"], 0)));
        ᐃΔ[694][nr.ᐃᐃⲆ].push(Ia(Ku(2, ["#115E60"], 1)));
        ᐃΔ[694][nr.ᐃᐃⲆ].push(Ia(Ku(1.8, ["#115E60"], 2)));
        ᐃΔ[695] = [];
        ᐃΔ[695][nr.ⵠᐃⵠ] = [];
        ᐃΔ[695][nr.ᐃᐃⲆ] = [];
        ᐃΔ[695][nr.ⵠᐃⵠ].push(Ia(Ku(1.9, ["#2A8B9B"], 0)));
        ᐃΔ[695][nr.ⵠᐃⵠ].push(Ia(Ku(2.1, ["#2A8B9B"], 1)));
        ᐃΔ[695][nr.ⵠᐃⵠ].push(Ia(Ku(1.9, ["#2A8B9B"], 2)));
        ᐃΔ[695][nr.ᐃᐃⲆ].push(Ia(Ku(1.9, ["#0F464C"], 0)));
        ᐃΔ[695][nr.ᐃᐃⲆ].push(Ia(Ku(2.1, ["#0F464C"], 1)));
        ᐃΔ[695][nr.ᐃᐃⲆ].push(Ia(Ku(1.9, ["#0F464C"], 2)));
        ᐃΔ[693] = [];
        ᐃΔ[693][nr.ⵠᐃⵠ] = [];
        ᐃΔ[693][nr.ᐃᐃⲆ] = [];
        ᐃΔ[693][nr.ⵠᐃⵠ].push(Ia(Wt(0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
        ᐃΔ[693][nr.ⵠᐃⵠ].push(Ia(Wt(1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
        ᐃΔ[693][nr.ⵠᐃⵠ].push(Ia(Wt(1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
        ᐃΔ[693][nr.ᐃᐃⲆ].push(Ia(Wt(0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
        ᐃΔ[693][nr.ᐃᐃⲆ].push(Ia(Wt(1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
        ᐃΔ[693][nr.ᐃᐃⲆ].push(Ia(Wt(1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
        ᐃΔ[637] = [];
        ᐃΔ[637][nr.ⵠᐃⵠ] = Ia(dc(0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
        ᐃΔ[637][nr.ᐃᐃⲆ] = Ia(dc(0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
        ᐃΔ[687] = Ia(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 376;
            c.height = a * 371;
            d.globalAlpha = 1;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 191.633544921875, a * 123.98580932617188);
            d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
            d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
            d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
            d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
            d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
            d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
            d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
            d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
            d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
            d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
            d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
            d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
            d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
            d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
            d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
            d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
            d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
            d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
            d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
            d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
            d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
            d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
            d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
            d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
            d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
            d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
            d.closePath();
            vt(d, b[0], b[0], a * 12);
            return c;
        }(0.8, ["#B6222A"]));
        ᐃΔ[673] = [];
        ᐃΔ[673][nr.ⵠᐃⵠ] = Ia($m(0.8, 0, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
        ᐃΔ[673][nr.ᐃᐃⲆ] = Ia($m(0.8, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
        ᐃΔ[688] = Ia(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 158;
            c.height = a * 201;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 96.5, a * 76.421875);
            d.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
            d.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
            d.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
            d.closePath();
            vt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 61.5, a * 78.421875);
            d.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
            d.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
            d.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
            d.closePath();
            vt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 116.5, a * 127.421875);
            d.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
            d.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
            d.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
            d.closePath();
            vt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 41.5, a * 134.421875);
            d.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
            d.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
            d.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
            d.closePath();
            vt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 78.5, a * 51.921875);
            d.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
            d.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
            d.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
            d.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
            d.closePath();
            vt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 72.5, a * 72.421875);
            d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
            d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
            d.closePath();
            vt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 42.5, a * 163.421875);
            d.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
            d.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
            d.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
            d.closePath();
            vt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 79.5, a * 61.421875);
            d.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
            d.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
            d.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
            d.closePath();
            vt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 72.5, a * 72.421875);
            d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
            d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
            d.closePath();
            vt(d, b[0], b[0], a * 10);
            return c;
        }(0.8, ["#B6222A"]));
        ᐃΔ[902] = [];
        ᐃΔ[902][nr.ⵠᐃⵠ] = Ia(sb(0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
        ᐃΔ[902][nr.ᐃᐃⲆ] = Ia(sb(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
        ᐃΔ[903] = [];
        ᐃΔ[903][nr.ⵠᐃⵠ] = Ia(sb(0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
        ᐃΔ[903][nr.ᐃᐃⲆ] = Ia(sb(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
        ᐃΔ[nr.ⵠᐃΔᐃᐃᐃᐃ] = [];
        ᐃΔ[nr.ⵠᐃΔᐃᐃᐃᐃ][nr.ⵠᐃⵠ] = Ia(sb(0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
        ᐃΔ[nr.ⵠᐃΔᐃᐃᐃᐃ][nr.ᐃᐃⲆ] = Ia(sb(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
        ᐃΔ[904] = Ia(gb(0.4, ["#B6222A"]));
        ᐃΔ[905] = Ia(gb(0.4, ["#B6222A"]));
        ᐃΔ[nr.ⵠΔⵠΔᐃᐃᐃΔᐃ] = Ia(gb(0.4, ["#B6222A"]));
        ᐃΔ[230] = Ia(gu(0.35, gt, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
        ᐃΔ[229] = Ia(vd(0.35, al, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
        ᐃΔ[886] = [];
        ᐃΔ[886][nr.ⵠᐃⵠ] = Ia(gd(0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
        ᐃΔ[886][nr.ᐃᐃⲆ] = Ia(gd(0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
        ᐃΔ[887] = [];
        ᐃΔ[887][nr.ⵠᐃⵠ] = Ia(gd(0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
        ᐃΔ[887][nr.ᐃᐃⲆ] = Ia(gd(0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
        ᐃΔ[894] = [];
        ᐃΔ[894][nr.ⵠᐃⵠ] = Ia(dd(0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
        ᐃΔ[894][nr.ᐃᐃⲆ] = Ia(dd(0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
        ᐃΔ[895] = [];
        ᐃΔ[895][nr.ⵠᐃⵠ] = Ia(md(0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
        ᐃΔ[895][nr.ᐃᐃⲆ] = Ia(md(0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
        ᐃΔ[896] = [];
        ᐃΔ[896][nr.ⵠᐃⵠ] = Ia(dd(0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
        ᐃΔ[896][nr.ᐃᐃⲆ] = Ia(dd(0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
        ᐃΔ[897] = [];
        ᐃΔ[897][nr.ⵠᐃⵠ] = Ia(md(0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
        ᐃΔ[897][nr.ᐃᐃⲆ] = Ia(md(0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
        ᐃΔ[888] = Ia(Cd(0.35, ["#B6222A"]));
        ᐃΔ[889] = Ia(dd(0.35, 0, [undefined, "#B6222A"]));
        ᐃΔ[890] = Ia(md(0.35, 0, [undefined, "#B6222A"]));
        ᐃΔ[891] = Ia(Cd(0.35, ["#22E066"]));
        ᐃΔ[892] = Ia(dd(0.35, 0, [sl, "#22E066"]));
        ᐃΔ[893] = Ia(md(0.35, 0, [undefined, "#22E066"]));
        ᐃΔ[48] = [];
        ᐃΔ[48][nr.ⵠᐃⵠ] = Ia(Ud(0.3, true, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
        ᐃΔ[48][nr.ᐃᐃⲆ] = Ia(Ud(0.3, R, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
        ᐃΔ[47] = [];
        ᐃΔ[47][nr.ⵠᐃⵠ] = Ia(Gd(0.45, Ds, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
        ᐃΔ[47][nr.ᐃᐃⲆ] = Ia(Gd(0.45, true, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
        ᐃΔ[141] = [];
        ᐃΔ[141][nr.ⵠᐃⵠ] = Ia(mc(0.63, true, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
        ᐃΔ[141][nr.ᐃᐃⲆ] = Ia(mc(0.63, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
        ᐃΔ[125] = [];
        ᐃΔ[125][nr.ⵠᐃⵠ] = Ia(rc(1, Vi, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
        ᐃΔ[125][nr.ᐃᐃⲆ] = Ia(rc(1, Un, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
        ᐃΔ[221] = [];
        ᐃΔ[221][nr.ⵠᐃⵠ] = ⲆⲆ.ᐃⵠⲆⲆΔᐃΔⲆᐃ;
        ᐃΔ[221][nr.ᐃᐃⲆ] = ⲆⲆ.ⲆΔᐃΔΔⲆⵠⵠᐃ;
        ᐃΔ[190] = [];
        ᐃΔ[190][nr.ⵠᐃⵠ] = Ia(Mt(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        ᐃΔ[190][nr.ᐃᐃⲆ] = Ia(Mt(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
        ᐃΔ[853] = [ᐃΔ[190]];
        ᐃΔ[853][1] = [];
        ᐃΔ[853][2] = [];
        ᐃΔ[853][1][nr.ⵠᐃⵠ] = Ia(Ot(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        ᐃΔ[853][1][nr.ᐃᐃⲆ] = Ia(Ot(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
        ᐃΔ[853][2][nr.ⵠᐃⵠ] = Ia(ob(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        ᐃΔ[853][2][nr.ᐃᐃⲆ] = Ia(ob(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
        ᐃΔ[49] = [];
        ᐃΔ[49][nr.ⵠᐃⵠ] = Ia(Dt(3 - Math.PI / 2, nc(0.6, Lo, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
        ᐃΔ[49][nr.ᐃᐃⲆ] = Ia(Dt(3 - Math.PI / 2, nc(0.6, Un, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
        ᐃΔ[728] = [];
        ᐃΔ[728][nr.ⵠᐃⵠ] = Ia(xb(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
        ᐃΔ[728][nr.ᐃᐃⲆ] = Ia(xb(0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
        ᐃΔ[798] = Ia(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 650;
            c.height = a * 650;
            d.scale(1.9, 1.9);
            d.save();
            d.translate(a * 202.5, a * 147.5);
            wt(d, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
            d.restore();
            vt(d, b[4], b[1], a * 12);
            d.save();
            d.translate(a * 203.5, a * 121.5);
            wt(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
            d.restore();
            vt(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 203.5, a * 299);
            wt(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
            d.restore();
            vt(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 298.5, a * 210);
            wt(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            vt(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 108.5, a * 210);
            wt(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            vt(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 204, a * 121.5);
            wt(d, a * -92, a * -9.5, a * 184, a * 19, a * 10);
            d.restore();
            vt(d, b[3], b[3], a * 10);
            d.save();
            d.translate(a * 197, a * 299);
            wt(d, a * 85, a * -9, a * -170, a * 18, a * 10);
            d.restore();
            vt(d, b[3], b[3], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 94, a * 317);
            d.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
            d.closePath();
            vt(d, undefined, b[1], a * 12);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 279, a * 142);
            d.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
            d.closePath();
            vt(d, Zk, b[1], a * 12);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 93, a * 106);
            d.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
            d.closePath();
            vt(d, Qh, b[1], a * 12);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 281, a * 282);
            d.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
            d.closePath();
            vt(d, Qh, b[1], a * 12);
            return c;
        }(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
        ᐃΔ[729] = Ia(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 400;
            c.height = a * 400;
            d.save();
            d.translate(a * 202.5, a * 147.5);
            wt(d, a * -96.5, a * -21.5, a * 193, a * 43, a * 0);
            d.restore();
            vt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 202.5, a * 190.5);
            wt(d, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
            d.restore();
            vt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 202.5, a * 233.5);
            wt(d, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
            d.restore();
            vt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 202.5, a * 275);
            wt(d, a * 96.5, a * -21, a * -193, a * 42, a * 0);
            d.restore();
            vt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 203.5, a * 121.5);
            wt(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
            d.restore();
            vt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 203.5, a * 299);
            wt(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
            d.restore();
            vt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 298.5, a * 210);
            wt(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            vt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 108.5, a * 210);
            wt(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            vt(d, b[0], b[0], a * 12);
            return c;
        }(0.3, ["#BB0000"]));
        ᐃΔ[658] = Gb(1, [{
            f: Om,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
        }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        ᐃΔ[150] = Gb(1.5, [{
            f: _m,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#120202", "#750a0a", "#991616", "#120202"]
        }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
        ᐃΔ[669] = Bm(0.35, ["#072428", "#67A242", "#67A242"], 0);
        ᐃΔ[670] = Bm(0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
        ᐃΔ[671] = Bm(0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
        ᐃΔ[672] = Bm(0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
        if (ΔⵠΔΔᐃⲆⵠ) {
            ᐃΔ[278] = Ia(function (b) {
                var c = document.createElement("canvas");
                var d = c.getContext("2d");
                var e = b * 200;
                var f = b * 180;
                var g = b * 8;
                c.width = e;
                c.height = f;
                d.beginPath();
                wt(d, 0, 0, e, f - g, g);
                d.globalAlpha = 0.8;
                vt(d, "#1D6055");
                d.globalAlpha = 1;
                var a = Dd(b, "Leaderboard", 25, "#FFF");
                d.drawImage(a, (e - a.width) / 2, b * 5);
                return c;
            }(1));
        } else {
            ᐃΔ[278] = Ia(function (b) {
                var c = document.createElement("canvas");
                var d = c.getContext("2d");
                var e = b * 200;
                var f = b * 270;
                var g = b * 8;
                c.width = e;
                c.height = f + 20;
                d.beginPath();
                wt(d, 0, 0, e, f - g, g);
                d.globalAlpha = 0.5;
                vt(d, "#1D6055");
                d.globalAlpha = 1;
                var a = Dd(b, "Leaderboard", 25, "#FFF");
                d.drawImage(a, (e - a.width) / 2, b * 5);
                return c;
            }(1));
        }
        if (ΔⵠΔΔᐃⲆⵠ) {
            ᐃΔ[267] = Ia(function (b) {
                var c = document.createElement("canvas");
                var d = c.getContext("2d");
                var e = b * 335;
                var f = b * 250;
                var i = b * 120;
                var a = b * 20;
                var j = b * 35;
                var k = b * 65;
                var h = b * 2;
                var l = b * 4;
                c.width = e;
                c.height = i;
                d.beginPath();
                d.translate(0, b * 15);
                wt(d, k, 0, f, a, h);
                vt(d, null, "#69A148", l);
                d.translate(0, j);
                wt(d, k, 0, f, a, h);
                vt(d, null, "#AF352A", l);
                d.translate(0, j);
                wt(d, k, 0, f, a, h);
                vt(d, null, "#669BB1", l);
                return c;
            }(0.75));
        } else {
            ᐃΔ[267] = Ia(function (c) {
                var d = document.createElement("canvas");
                var e = d.getContext("2d");
                var f = c * 950;
                var i = c * 180;
                var j = c * 50;
                var a = c * 20;
                var k = c * 240;
                var m = c * 35;
                var h = c * 1;
                var l = c * 4;
                var g = c * 4;
                d.width = f;
                d.height = j;
                e.translate(0, c * 15);
                wt(e, m, h, i, a, l);
                vt(e, null, "#69A148", g);
                var n = ᐃΔ[669];
                e.drawImage(n, 17, -8);
                e.translate(k, 0);
                wt(e, m, h, i, a, l);
                vt(e, null, "#AF352A", g);
                n = ᐃΔ[671];
                e.drawImage(n, 17, -9);
                e.translate(k, 0);
                wt(e, m, h, i, a, l);
                vt(e, null, "#669BB1", g);
                n = ᐃΔ[670];
                e.drawImage(n, 17, -8);
                e.translate(k, 0);
                wt(e, m, h, i, a, l);
                vt(e, null, "#074A87", g);
                n = ᐃΔ[672];
                e.drawImage(n, 17, -8);
                return d;
            }(1));
        }
        if (ΔⵠΔΔᐃⲆⵠ) {
            ᐃΔ[608] = Ia(pm(0.75));
        } else {
            ᐃΔ[608] = Ia(pm(1));
        }
        ᐃΔ[792] = Ia(im(0.16, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
        ᐃΔ[537] = Ia(Dt(5.8, bd(0.15, Un, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
        ᐃΔ[283] = [];
        ᐃΔ[465] = [];
        for (a = 0; a < qw.ΔΔⲆⵠⲆᐃΔ + 2; a++) {
            ᐃΔ[465][a] = Dd(1, "" + (a + 1), 12, "#FFF");
        }
        ᐃΔ[708] = [];
        ᐃΔ[708].push(Ia(ec(0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
        ᐃΔ[708].push(Ia(ec(0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
        ᐃΔ[708].push(Ia(ec(0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
        ᐃΔ[725] = [];
        ᐃΔ[725].push(Ia(function (a) {
            var b = document.createElement("canvas");
            var c = b.getContext("2d");
            b.width = a * 321;
            b.height = a * 345;
            c.translate(0, a * 5);
            c.translate(0, a * 20);
            ut(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            vt(c, "#322413", "#322413", a * 4);
            c.translate(0, a * -20);
            ut(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            vt(c, "#392C16", "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
            c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
            c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
            c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
            c.closePath();
            vt(c, "#12432D");
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
            c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
            c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
            c.closePath();
            vt(c, "#3A2A0D");
            ut(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
            vt(c, Da, "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
            c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
            c.closePath();
            vt(c, Li, "#5E3E1A", a * 12);
            c.translate(0, a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            vt(c, Qh, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            vt(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            vt(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            vt(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            vt(c, Li, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            vt(c, jj, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            vt(c, vj, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            vt(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            vt(c, undefined, "#c7a726", a * 12);
            c.translate(0, a * -8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            vt(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            vt(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            vt(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            vt(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            vt(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            vt(c, Ft, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            vt(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            vt(c, Zk, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            vt(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
            c.closePath();
            vt(c, "#704618", "#5D3D1A", a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 96, a * 166);
            c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
            c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
            c.closePath();
            vt(c, "#ECBE35", "#EDCE4F", a * 8);
            ut(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
            vt(c, "#392C16", "#5E3E1A", a * 10);
            return b;
        }(0.22)));
        ᐃΔ[725].push(Ia(function (a) {
            var b = document.createElement("canvas");
            var c = b.getContext("2d");
            b.width = a * 321;
            b.height = a * 345;
            c.translate(0, a * 5);
            c.translate(0, a * 20);
            ut(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            vt(c, "#322413", "#322413", a * 4);
            c.translate(0, a * -20);
            ut(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            vt(c, "#392C16", "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
            c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
            c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
            c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
            c.closePath();
            vt(c, "#3A2A0D");
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
            c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
            c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
            c.closePath();
            vt(c, "#071A1B");
            ut(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
            vt(c, undefined, "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
            c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
            c.closePath();
            vt(c, undefined, "#5E3E1A", a * 12);
            c.translate(0, a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            vt(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            vt(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            vt(c, qn, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            vt(c, Js, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            vt(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            vt(c, zr, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            vt(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            vt(c, jj, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            vt(c, undefined, "#281C08", a * 12);
            c.translate(0, a * -8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            vt(c, sl, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            vt(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            vt(c, tj, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            vt(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            vt(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            vt(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            vt(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            vt(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            vt(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 96, a * 166);
            c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
            c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
            c.closePath();
            vt(c, "#704618", "#5D3D1A", a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
            c.closePath();
            vt(c, "#E1DDD5", "#EAE7E4", a * 8);
            ut(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
            vt(c, "#392C16", "#5E3E1A", a * 10);
            return b;
        }(0.22)));
        ᐃΔ[726] = Ia(function (a) {
            var b = document.createElement("canvas");
            var c = b.getContext("2d");
            b.width = a * 321;
            b.height = a * 345;
            c.translate(0, a * 5);
            ut(c, a * 161.00003051757812, a * 165.40341186523438, a * 20.808652046684813);
            vt(c, "#C09D6F", "#A37943", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 162.00003051757812, a * 48.403411865234375);
            c.bezierCurveTo(a * 172.50003051757812, a * 67.40341186523438, a * 172.50003051757812, a * 67.40341186523438, a * 183.00003051757812, a * 86.40341186523438);
            c.bezierCurveTo(a * 160.50003051757812, a * 86.40341186523438, a * 160.50003051757812, a * 86.40341186523438, a * 138.00003051757812, a * 86.40341186523438);
            c.closePath();
            vt(c, "#C09D6F", "#A37943", a * 10);
            c.save();
            c.translate(a * 161.50003051757812, a * 117.90341186523438);
            wt(c, a * -5.5, a * -37.5, a * 11, a * 75, a * 10);
            c.restore();
            vt(c, "#C09D6F", "#A37943", a * 10);
            c.save();
            c.translate(a * 162.00003051757812, a * 78.90341186523438);
            wt(c, a * -10, a * -5.5, a * 20, a * 11, a * 1);
            c.restore();
            vt(c, "#C09D6F");
            ut(c, a * 161.00003051757812, a * 163.6761474609375, a * 17.08800749063506);
            vt(c, "#C09D6F");
            return b;
        }(0.22));
        ᐃΔ[727] = [];
        ᐃΔ[727].push(Ia(Cb(1.5, ["#795026", "#654320", "#eda80d"], 0)));
        ᐃΔ[727].push(Ia(Cb(1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
        ᐃΔ[727].push(Ia(Cb(1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
        ᐃΔ[546] = ⲆⲆ.ᐃᐃⲆΔᐃⲆΔ;
        ᐃΔ[547] = ⲆⲆ.ΔᐃᐃΔⲆⵠᐃ;
        ᐃΔ[548] = ⲆⲆ.ᐃᐃⲆⵠⲆⲆᐃ;
        ᐃΔ[549] = ⲆⲆ.ᐃⵠⲆᐃⲆΔΔ;
        ᐃΔ[517] = Dd(1, "Show spectators", 25, "#FFF", undefined, Oo, "#000", 5, 220);
        ᐃΔ[525] = Dd(1, "Reconnecting...", 30, "#FFF");
        console.log(undefined, zr);
    }
    function gc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 167;
        d.height = a * 136;
        e.globalAlpha = 0.5;
        e.save();
        e.translate(a * 76.71426391601562, a * 67.85713195800781);
        wt(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
        e.restore();
        vt(e, c[0]);
        e.globalAlpha = 0.8;
        e.save();
        e.translate(a * 76.71426391601562, a * 67.85713195800781);
        wt(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
        e.restore();
        vt(e, sl, c[1], a * 7);
        e.globalAlpha = 0.5;
        e.save();
        e.translate(a * 91.21426391601562, a * 67.35713195800781);
        wt(e, a * -56, a * -55, a * 115, a * 109, a * 15);
        e.restore();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 91.21426391601562, a * 67.35713195800781);
        wt(e, a * -56, a * -55, a * 115, a * 109, a * 15);
        e.restore();
        vt(e, Ft, c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131.21426391601562, a * 70.35713195800781);
        e.bezierCurveTo(a * 133.21426391601562, a * 95.35713195800781, a * 128.21426391601562, a * 109.35713195800781, a * 108.21426391601562, a * 108.35713195800781);
        vt(e, undefined, c[1], a * 10);
        return d;
    }
    function uc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 80;
        d.height = a * 160;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        wt(e, a * 33, a * 53, a * 10, a * 98, a * 10);
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -150, a * -100);
        e.moveTo(a * 167.5, a * 171.0625);
        e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
        e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
        e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
        e.closePath();
        vt(e, c[0]);
        e.restore();
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        wt(e, a * 33, a * 53, a * 10, a * 98, a * 10);
        vt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -150, a * -100);
        e.moveTo(a * 167.5, a * 171.0625);
        e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
        e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
        e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
        e.closePath();
        vt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 0, a * 1);
        e.moveTo(a * 180.5, a * 169.0625);
        e.bezierCurveTo(a * 180.5, a * 157.5625, a * 180.5, a * 157.5625, a * 180.5, a * 146.0625);
        e.bezierCurveTo(a * 181.5, a * 134.0625, a * 193.5, a * 129.0625, a * 196.5, a * 146.0625);
        e.bezierCurveTo(a * 196.5, a * 157.5625, a * 196.5, a * 157.5625, a * 196.5, a * 169.0625);
        e.closePath();
        vt(e, c[5]);
        e.restore();
        return d;
    }
    function bc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 160;
        d.height = a * 161;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 80.5, a * 78);
        wt(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
        e.restore();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 80.5, a * 78);
        wt(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
        e.restore();
        vt(e, c[1], c[2], a * 6);
        e.save();
        e.translate(a * 80, a * 78.5);
        wt(e, a * -17, a * -72.5, a * 34, a * 145, a * 10);
        e.restore();
        vt(e, c[3], c[4], a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 80, a * 79.5);
        wt(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
        e.restore();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 80, a * 79.5);
        wt(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
        e.restore();
        vt(e, c[3], c[4], a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 71);
        e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
        e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
        e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84, a * 78);
        e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
        e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
        e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 73);
        e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
        e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
        e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 83);
        e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
        e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
        e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
        e.closePath();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 71);
        e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
        e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
        e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
        e.closePath();
        vt(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84, a * 78);
        e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
        e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
        e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
        e.closePath();
        vt(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 73);
        e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
        e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
        e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
        e.closePath();
        vt(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 83);
        e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
        e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
        e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
        e.closePath();
        vt(e, c[3], c[4], a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 78.5, a * 78);
        wt(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
        e.restore();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 78.5, a * 78);
        wt(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
        e.restore();
        vt(e, c[3], c[4], a * 6);
        return d;
    }
    function dc(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 376;
        c.height = a * 371;
        d.globalAlpha = 0.5;
        d.translate(a * 5, a * 5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 191.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
        d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
        d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
        d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
        d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
        d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
        d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
        d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
        d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
        d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
        d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
        d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
        d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
        d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
        d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
        d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
        d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
        d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
        d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
        d.closePath();
        vt(d, b[0]);
        d.globalAlpha = 1;
        d.translate(a * -4, a * -5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 191.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
        d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
        d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
        d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
        d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
        d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
        d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
        d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
        d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
        d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
        d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
        d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
        d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
        d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
        d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
        d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
        d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
        d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
        d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
        d.closePath();
        vt(d, Li, b[1], a * 12);
        d.translate(a * -1, a * 0);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 270.633544921875, a * 88.98580932617188);
        d.bezierCurveTo(a * 296.633544921875, a * 65.98580932617188, a * 318.633544921875, a * 62.985809326171875, a * 348.633544921875, a * 57.985809326171875);
        d.bezierCurveTo(a * 309.633544921875, a * 76.98580932617188, a * 291.633544921875, a * 88.98580932617188, a * 280.633544921875, a * 99.98580932617188);
        d.closePath();
        vt(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 275.633544921875, a * 281.9858093261719);
        d.bezierCurveTo(a * 303.633544921875, a * 308.9858093261719, a * 321.633544921875, a * 308.9858093261719, a * 335.633544921875, a * 315.9858093261719);
        d.bezierCurveTo(a * 305.633544921875, a * 320.9858093261719, a * 278.633544921875, a * 307.9858093261719, a * 264.633544921875, a * 293.9858093261719);
        d.closePath();
        vt(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 124.633544921875, a * 291.9858093261719);
        d.bezierCurveTo(a * 106.633544921875, a * 316.9858093261719, a * 72.633544921875, a * 325.9858093261719, a * 53.633544921875, a * 319.9858093261719);
        d.bezierCurveTo(a * 83.633544921875, a * 308.9858093261719, a * 97.633544921875, a * 298.9858093261719, a * 112.633544921875, a * 284.9858093261719);
        d.closePath();
        vt(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 113.633544921875, a * 80.98580932617188);
        d.bezierCurveTo(a * 91.633544921875, a * 54.985809326171875, a * 72.633544921875, a * 56.985809326171875, a * 36.633544921875, a * 49.985809326171875);
        d.bezierCurveTo(a * 87.633544921875, a * 72.98580932617188, a * 95.633544921875, a * 82.98580932617188, a * 106.633544921875, a * 96.98580932617188);
        d.closePath();
        vt(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 202.633544921875, a * 20.985809326171875);
        d.bezierCurveTo(a * 219.633544921875, a * 49.985809326171875, a * 259.633544921875, a * 80.98580932617188, a * 255.633544921875, a * 92.98580932617188);
        d.bezierCurveTo(a * 268.633544921875, a * 86.98580932617188, a * 265.633544921875, a * 87.98580932617188, a * 275.633544921875, a * 82.98580932617188);
        d.bezierCurveTo(a * 283.633544921875, a * 87.98580932617188, a * 283.633544921875, a * 87.98580932617188, a * 291.633544921875, a * 92.98580932617188);
        d.bezierCurveTo(a * 269.633544921875, a * 116.98580932617188, a * 270.633544921875, a * 124.98580932617188, a * 267.633544921875, a * 130.98580932617188);
        d.bezierCurveTo(a * 307.633544921875, a * 168.98580932617188, a * 339.633544921875, a * 132.98580932617188, a * 352.633544921875, a * 93.98580932617188);
        d.bezierCurveTo(a * 366.633544921875, a * 145.98580932617188, a * 345.633544921875, a * 207.98580932617188, a * 286.633544921875, a * 208.98580932617188);
        d.bezierCurveTo(a * 315.633544921875, a * 223.98580932617188, a * 327.633544921875, a * 287.9858093261719, a * 355.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 293.633544921875, a * 298.9858093261719, a * 293.633544921875, a * 275.9858093261719, a * 276.633544921875, a * 266.9858093261719);
        d.bezierCurveTo(a * 274.633544921875, a * 282.9858093261719, a * 287.633544921875, a * 288.9858093261719, a * 295.633544921875, a * 296.9858093261719);
        d.bezierCurveTo(a * 287.133544921875, a * 302.4858093261719, a * 287.133544921875, a * 302.4858093261719, a * 278.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 261.633544921875, a * 297.9858093261719, a * 258.633544921875, a * 293.9858093261719, a * 255.633544921875, a * 290.9858093261719);
        d.bezierCurveTo(a * 249.633544921875, a * 301.9858093261719, a * 225.633544921875, a * 320.9858093261719, a * 202.633544921875, a * 354.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 318.9858093261719, a * 196.633544921875, a * 306.9858093261719, a * 198.633544921875, a * 300.9858093261719);
        d.bezierCurveTo(a * 209.633544921875, a * 268.9858093261719, a * 199.633544921875, a * 266.9858093261719, a * 195.633544921875, a * 256.9858093261719);
        d.bezierCurveTo(a * 183.633544921875, a * 274.9858093261719, a * 182.633544921875, a * 281.9858093261719, a * 192.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 194.633544921875, a * 317.9858093261719, a * 191.633544921875, a * 336.9858093261719, a * 186.633544921875, a * 351.9858093261719);
        d.bezierCurveTo(a * 166.633544921875, a * 318.9858093261719, a * 141.633544921875, a * 303.9858093261719, a * 136.633544921875, a * 286.9858093261719);
        d.bezierCurveTo(a * 122.633544921875, a * 303.9858093261719, a * 115.633544921875, a * 305.9858093261719, a * 109.633544921875, a * 306.9858093261719);
        d.bezierCurveTo(a * 101.133544921875, a * 301.9858093261719, a * 94.633544921875, a * 297.9858093261719, a * 92.633544921875, a * 296.9858093261719);
        d.bezierCurveTo(a * 116.633544921875, a * 277.9858093261719, a * 116.633544921875, a * 266.9858093261719, a * 119.633544921875, a * 257.9858093261719);
        d.bezierCurveTo(a * 107.633544921875, a * 257.9858093261719, a * 65.633544921875, a * 308.9858093261719, a * 24.633544921875, a * 303.9858093261719);
        d.bezierCurveTo(a * 51.633544921875, a * 275.9858093261719, a * 64.633544921875, a * 220.98580932617188, a * 108.633544921875, a * 205.98580932617188);
        d.bezierCurveTo(a * 14.633544921875, a * 198.98580932617188, a * 26.633544921875, a * 142.98580932617188, a * 25.633544921875, a * 86.98580932617188);
        d.bezierCurveTo(a * 41.633544921875, a * 155.98580932617188, a * 81.633544921875, a * 148.98580932617188, a * 113.633544921875, a * 124.98580932617188);
        d.bezierCurveTo(a * 102.633544921875, a * 93.98580932617188, a * 95.633544921875, a * 88.98580932617188, a * 89.633544921875, a * 81.98580932617188);
        d.bezierCurveTo(a * 97.633544921875, a * 76.48580932617188, a * 97.633544921875, a * 76.48580932617188, a * 105.633544921875, a * 70.98580932617188);
        d.bezierCurveTo(a * 120.633544921875, a * 78.98580932617188, a * 121.633544921875, a * 81.98580932617188, a * 124.633544921875, a * 86.98580932617188);
        d.bezierCurveTo(a * 132.633544921875, a * 71.98580932617188, a * 160.633544921875, a * 56.985809326171875, a * 175.633544921875, a * 23.985809326171875);
        d.bezierCurveTo(a * 182.633544921875, a * 53.985809326171875, a * 170.633544921875, a * 102.98580932617188, a * 191.633544921875, a * 125.98580932617188);
        d.bezierCurveTo(a * 214.633544921875, a * 89.98580932617188, a * 192.633544921875, a * 58.985809326171875, a * 202.633544921875, a * 20.985809326171875);
        d.closePath();
        vt(d, b[2], b[3], a * 5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 203.633544921875, a * 21.985809326171875);
        d.bezierCurveTo(a * 223.633544921875, a * 63.985809326171875, a * 227.633544921875, a * 72.98580932617188, a * 235.633544921875, a * 98.98580932617188);
        d.bezierCurveTo(a * 241.633544921875, a * 123.98580932617188, a * 225.633544921875, a * 138.98580932617188, a * 196.633544921875, a * 122.98580932617188);
        d.bezierCurveTo(a * 213.633544921875, a * 93.98580932617188, a * 199.633544921875, a * 49.985809326171875, a * 203.633544921875, a * 26.985809326171875);
        d.closePath();
        vt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 175.633544921875, a * 25.985809326171875);
        d.bezierCurveTo(a * 176.633544921875, a * 51.985809326171875, a * 171.633544921875, a * 88.98580932617188, a * 186.633544921875, a * 121.98580932617188);
        d.bezierCurveTo(a * 156.633544921875, a * 144.98580932617188, a * 139.633544921875, a * 120.98580932617188, a * 147.633544921875, a * 97.98580932617188);
        d.bezierCurveTo(a * 152.633544921875, a * 77.98580932617188, a * 162.633544921875, a * 60.985809326171875, a * 176.633544921875, a * 25.985809326171875);
        d.closePath();
        vt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 26.633544921875, a * 96.98580932617188);
        d.bezierCurveTo(a * 38.633544921875, a * 151.98580932617188, a * 61.633544921875, a * 161.98580932617188, a * 88.633544921875, a * 168.98580932617188);
        d.bezierCurveTo(a * 117.633544921875, a * 177.98580932617188, a * 113.633544921875, a * 185.98580932617188, a * 106.633544921875, a * 204.98580932617188);
        d.bezierCurveTo(a * 32.633544921875, a * 204.98580932617188, a * 25.633544921875, a * 149.98580932617188, a * 25.633544921875, a * 97.98580932617188);
        d.closePath();
        vt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 351.633544921875, a * 99.98580932617188);
        d.bezierCurveTo(a * 365.633544921875, a * 161.98580932617188, a * 333.633544921875, a * 203.98580932617188, a * 287.633544921875, a * 207.98580932617188);
        d.bezierCurveTo(a * 255.633544921875, a * 208.98580932617188, a * 266.633544921875, a * 174.98580932617188, a * 285.633544921875, a * 176.98580932617188);
        d.bezierCurveTo(a * 313.633544921875, a * 178.98580932617188, a * 348.633544921875, a * 135.98580932617188, a * 353.633544921875, a * 99.98580932617188);
        d.closePath();
        vt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 350.633544921875, a * 302.9858093261719);
        d.bezierCurveTo(a * 310.633544921875, a * 280.9858093261719, a * 314.633544921875, a * 244.98580932617188, a * 292.633544921875, a * 230.98580932617188);
        d.bezierCurveTo(a * 272.633544921875, a * 215.98580932617188, a * 263.633544921875, a * 222.98580932617188, a * 256.633544921875, a * 236.98580932617188);
        d.bezierCurveTo(a * 251.633544921875, a * 249.98580932617188, a * 264.633544921875, a * 255.98580932617188, a * 279.633544921875, a * 268.9858093261719);
        d.bezierCurveTo(a * 306.633544921875, a * 295.9858093261719, a * 325.633544921875, a * 299.9858093261719, a * 349.633544921875, a * 302.9858093261719);
        d.closePath();
        vt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 95.633544921875, a * 224.98580932617188);
        d.bezierCurveTo(a * 64.633544921875, a * 245.98580932617188, a * 62.633544921875, a * 280.9858093261719, a * 32.633544921875, a * 303.9858093261719);
        d.bezierCurveTo(a * 59.633544921875, a * 301.9858093261719, a * 102.633544921875, a * 260.9858093261719, a * 116.633544921875, a * 255.98580932617188);
        d.bezierCurveTo(a * 139.633544921875, a * 229.98580932617188, a * 108.633544921875, a * 209.98580932617188, a * 97.633544921875, a * 224.98580932617188);
        d.closePath();
        vt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 195.633544921875, a * 253.98580932617188);
        d.bezierCurveTo(a * 209.633544921875, a * 282.9858093261719, a * 205.633544921875, a * 278.9858093261719, a * 199.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 198.633544921875, a * 332.9858093261719, a * 201.633544921875, a * 340.9858093261719, a * 202.633544921875, a * 348.9858093261719);
        d.bezierCurveTo(a * 215.633544921875, a * 313.9858093261719, a * 226.633544921875, a * 291.9858093261719, a * 235.633544921875, a * 270.9858093261719);
        d.bezierCurveTo(a * 243.633544921875, a * 247.98580932617188, a * 219.633544921875, a * 235.98580932617188, a * 196.633544921875, a * 252.98580932617188);
        d.closePath();
        vt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 195.633544921875, a * 251.98580932617188);
        d.bezierCurveTo(a * 176.633544921875, a * 275.9858093261719, a * 182.633544921875, a * 285.9858093261719, a * 191.633544921875, a * 308.9858093261719);
        d.bezierCurveTo(a * 194.633544921875, a * 318.9858093261719, a * 190.633544921875, a * 334.9858093261719, a * 186.633544921875, a * 348.9858093261719);
        d.bezierCurveTo(a * 175.633544921875, a * 307.9858093261719, a * 157.633544921875, a * 291.9858093261719, a * 155.633544921875, a * 272.9858093261719);
        d.bezierCurveTo(a * 150.633544921875, a * 243.98580932617188, a * 170.633544921875, a * 236.98580932617188, a * 195.633544921875, a * 251.98580932617188);
        d.closePath();
        vt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 316, a * 186.8020782470703);
        d.bezierCurveTo(a * 315, a * 173.8020782470703, a * 298, a * 177.8020782470703, a * 293, a * 183.8020782470703);
        d.bezierCurveTo(a * 285, a * 195.8020782470703, a * 314, a * 197.8020782470703, a * 315, a * 187.8020782470703);
        d.closePath();
        vt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 340, a * 157.8020782470703);
        d.bezierCurveTo(a * 327, a * 153.8020782470703, a * 321, a * 168.8020782470703, a * 330, a * 174.8020782470703);
        d.bezierCurveTo(a * 341, a * 178.8020782470703, a * 347, a * 161.8020782470703, a * 341, a * 157.8020782470703);
        d.closePath();
        vt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 349, a * 136.8020782470703);
        d.bezierCurveTo(a * 343, a * 135.8020782470703, a * 342, a * 139.8020782470703, a * 341, a * 147.8020782470703);
        d.bezierCurveTo(a * 343, a * 155.8020782470703, a * 353, a * 143.8020782470703, a * 349, a * 137.8020782470703);
        d.closePath();
        vt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 278.75, a * 246.4375);
        d.bezierCurveTo(a * 288.75, a * 242.4375, a * 301.75, a * 248.4375, a * 298.75, a * 262.4375);
        d.bezierCurveTo(a * 293.75, a * 271.4375, a * 287.75, a * 271.4375, a * 278.75, a * 262.4375);
        d.bezierCurveTo(a * 271.75, a * 255.4375, a * 274.75, a * 250.4375, a * 277.75, a * 247.4375);
        d.closePath();
        vt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 310.75, a * 277.4375);
        d.bezierCurveTo(a * 319.75, a * 280.4375, a * 322.75, a * 283.4375, a * 321.75, a * 289.4375);
        d.bezierCurveTo(a * 319.75, a * 295.4375, a * 313.75, a * 291.4375, a * 308.75, a * 288.4375);
        d.bezierCurveTo(a * 301.75, a * 281.4375, a * 306.75, a * 277.4375, a * 309.75, a * 277.4375);
        d.closePath();
        vt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.75, a * 257.4375);
        d.bezierCurveTo(a * 227.75, a * 269.4375, a * 220.75, a * 281.4375, a * 212.75, a * 280.4375);
        d.bezierCurveTo(a * 206.75, a * 279.4375, a * 206.75, a * 269.4375, a * 204.75, a * 260.4375);
        d.bezierCurveTo(a * 204.75, a * 254.4375, a * 211.75, a * 253.4375, a * 216.75, a * 256.4375);
        d.closePath();
        vt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 211.75, a * 289.4375);
        d.bezierCurveTo(a * 219.75, a * 292.4375, a * 213.75, a * 306.4375, a * 206.75, a * 307.4375);
        d.bezierCurveTo(a * 199.75, a * 303.4375, a * 209.75, a * 287.4375, a * 210.75, a * 289.4375);
        d.closePath();
        vt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 171.75, a * 256.4375);
        d.bezierCurveTo(a * 162.75, a * 273.4375, a * 166.75, a * 278.4375, a * 175.75, a * 280.4375);
        d.bezierCurveTo(a * 183.75, a * 278.4375, a * 185.75, a * 257.4375, a * 182.75, a * 255.4375);
        d.bezierCurveTo(a * 176.75, a * 251.4375, a * 172.75, a * 253.4375, a * 172.75, a * 256.4375);
        d.closePath();
        vt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 175.75, a * 289.9375);
        d.bezierCurveTo(a * 183.75, a * 287.9375, a * 186.75, a * 301.9375, a * 182.75, a * 305.9375);
        d.bezierCurveTo(a * 176.75, a * 307.9375, a * 171.75, a * 292.9375, a * 174.75, a * 290.9375);
        d.closePath();
        vt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 205.75, a * 314.4375);
        d.bezierCurveTo(a * 209.75, a * 316.4375, a * 210.75, a * 320.4375, a * 206.75, a * 323.4375);
        d.bezierCurveTo(a * 201.75, a * 324.4375, a * 201.75, a * 314.4375, a * 204.75, a * 314.4375);
        d.closePath();
        vt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 186.75, a * 313.4375);
        d.bezierCurveTo(a * 181.75, a * 315.4375, a * 180.75, a * 321.4375, a * 185.75, a * 326.4375);
        d.bezierCurveTo(a * 190.75, a * 327.4375, a * 190.75, a * 313.4375, a * 187.75, a * 314.4375);
        d.closePath();
        vt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 103.75, a * 244.4375);
        d.bezierCurveTo(a * 96.75, a * 239.4375, a * 83.75, a * 240.4375, a * 81.75, a * 255.4375);
        d.bezierCurveTo(a * 80.75, a * 264.4375, a * 89.75, a * 269.4375, a * 99.75, a * 260.4375);
        d.bezierCurveTo(a * 106.75, a * 254.4375, a * 106.75, a * 250.4375, a * 104.75, a * 245.4375);
        d.closePath();
        vt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 86.75, a * 182.4375);
        d.bezierCurveTo(a * 82.75, a * 170.4375, a * 66.75, a * 169.4375, a * 61.75, a * 181.4375);
        d.bezierCurveTo(a * 58.75, a * 187.4375, a * 68.75, a * 194.4375, a * 75.75, a * 192.4375);
        d.bezierCurveTo(a * 83.75, a * 192.4375, a * 86.75, a * 187.4375, a * 86.75, a * 183.4375);
        d.closePath();
        vt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 44.75, a * 152.4375);
        d.bezierCurveTo(a * 55.75, a * 159.4375, a * 54.75, a * 170.4375, a * 46.75, a * 171.4375);
        d.bezierCurveTo(a * 39.75, a * 170.4375, a * 34.75, a * 151.4375, a * 43.75, a * 152.4375);
        d.closePath();
        vt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 31.75, a * 130.4375);
        d.bezierCurveTo(a * 35.75, a * 132.4375, a * 35.75, a * 131.4375, a * 37.75, a * 137.4375);
        d.bezierCurveTo(a * 36.75, a * 144.4375, a * 36.75, a * 145.4375, a * 33.75, a * 144.4375);
        d.bezierCurveTo(a * 26.75, a * 137.4375, a * 29.75, a * 131.4375, a * 31.75, a * 130.4375);
        d.closePath();
        vt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 69.75, a * 274.4375);
        d.bezierCurveTo(a * 62.75, a * 272.4375, a * 59.75, a * 277.4375, a * 57.75, a * 284.4375);
        d.bezierCurveTo(a * 56.75, a * 290.4375, a * 63.75, a * 289.4375, a * 71.75, a * 282.4375);
        d.bezierCurveTo(a * 75.75, a * 277.4375, a * 72.75, a * 275.4375, a * 69.75, a * 274.4375);
        d.closePath();
        vt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 165.75, a * 95.4375);
        d.bezierCurveTo(a * 177.75, a * 97.4375, a * 182.75, a * 115.4375, a * 173.75, a * 121.4375);
        d.bezierCurveTo(a * 164.75, a * 126.4375, a * 149.75, a * 102.4375, a * 164.75, a * 96.4375);
        d.closePath();
        vt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 216.75, a * 94.4375);
        d.bezierCurveTo(a * 227.75, a * 99.4375, a * 223.75, a * 122.4375, a * 210.75, a * 119.4375);
        d.bezierCurveTo(a * 203.75, a * 115.4375, a * 207.75, a * 93.4375, a * 216.75, a * 94.4375);
        d.closePath();
        vt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 211.75, a * 68.4375);
        d.bezierCurveTo(a * 218.75, a * 69.4375, a * 220.75, a * 77.4375, a * 216.75, a * 83.4375);
        d.bezierCurveTo(a * 208.75, a * 89.4375, a * 205.75, a * 68.4375, a * 210.75, a * 68.4375);
        d.closePath();
        vt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 169.75, a * 71.4375);
        d.bezierCurveTo(a * 162.75, a * 72.4375, a * 159.75, a * 83.4375, a * 167.75, a * 88.4375);
        d.bezierCurveTo(a * 174.75, a * 90.4375, a * 174.75, a * 72.4375, a * 170.75, a * 71.4375);
        d.closePath();
        vt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 193.75, a * 160.4375);
        d.bezierCurveTo(a * 215.75, a * 168.4375, a * 224.75, a * 180.4375, a * 229.75, a * 193.4375);
        d.bezierCurveTo(a * 223.75, a * 211.4375, a * 205.75, a * 225.4375, a * 193.75, a * 229.4375);
        d.bezierCurveTo(a * 167.75, a * 217.4375, a * 161.75, a * 205.4375, a * 156.75, a * 192.4375);
        d.bezierCurveTo(a * 164.75, a * 175.4375, a * 176.75, a * 166.4375, a * 192.75, a * 160.4375);
        d.closePath();
        vt(d, b[8], b[9], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 189.1999969482422, a * 182.61249923706055);
        d.bezierCurveTo(a * 190.1999969482422, a * 184.11249923706055, a * 190.1999969482422, a * 184.11249923706055, a * 191.1999969482422, a * 185.61249923706055);
        d.bezierCurveTo(a * 192.1999969482422, a * 180.61249923706055, a * 192.1999969482422, a * 180.61249923706055, a * 193.1999969482422, a * 175.61249923706055);
        d.bezierCurveTo(a * 195.6999969482422, a * 177.11249923706055, a * 195.6999969482422, a * 177.11249923706055, a * 198.1999969482422, a * 178.61249923706055);
        d.bezierCurveTo(a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 183.61249923706055);
        d.bezierCurveTo(a * 201.6999969482422, a * 181.11249923706055, a * 201.6999969482422, a * 181.11249923706055, a * 205.1999969482422, a * 178.61249923706055);
        d.bezierCurveTo(a * 206.6999969482422, a * 180.61249923706055, a * 206.6999969482422, a * 180.61249923706055, a * 208.1999969482422, a * 182.61249923706055);
        d.bezierCurveTo(a * 206.1999969482422, a * 185.61249923706055, a * 206.1999969482422, a * 185.61249923706055, a * 204.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 208.6999969482422, a * 188.61249923706055, a * 208.6999969482422, a * 188.61249923706055, a * 213.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 193.61249923706055);
        d.bezierCurveTo(a * 209.6999969482422, a * 194.61249923706055, a * 209.6999969482422, a * 194.61249923706055, a * 206.1999969482422, a * 195.61249923706055);
        d.bezierCurveTo(a * 210.1999969482422, a * 198.61249923706055, a * 210.1999969482422, a * 198.61249923706055, a * 214.1999969482422, a * 201.61249923706055);
        d.bezierCurveTo(a * 212.1999969482422, a * 203.61249923706055, a * 212.1999969482422, a * 203.61249923706055, a * 210.1999969482422, a * 205.61249923706055);
        d.bezierCurveTo(a * 207.1999969482422, a * 204.11249923706055, a * 207.1999969482422, a * 204.11249923706055, a * 204.1999969482422, a * 202.61249923706055);
        d.bezierCurveTo(a * 205.6999969482422, a * 207.61249923706055, a * 205.6999969482422, a * 207.61249923706055, a * 207.1999969482422, a * 212.61249923706055);
        d.bezierCurveTo(a * 204.6999969482422, a * 213.61249923706055, a * 204.6999969482422, a * 213.61249923706055, a * 202.1999969482422, a * 214.61249923706055);
        d.bezierCurveTo(a * 200.1999969482422, a * 210.61249923706055, a * 200.1999969482422, a * 210.61249923706055, a * 198.1999969482422, a * 206.61249923706055);
        d.bezierCurveTo(a * 196.6999969482422, a * 211.61249923706055, a * 196.6999969482422, a * 211.61249923706055, a * 195.1999969482422, a * 216.61249923706055);
        d.bezierCurveTo(a * 192.6999969482422, a * 216.11249923706055, a * 192.6999969482422, a * 216.11249923706055, a * 190.1999969482422, a * 215.61249923706055);
        d.bezierCurveTo(a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 207.61249923706055);
        d.bezierCurveTo(a * 186.1999969482422, a * 210.61249923706055, a * 186.1999969482422, a * 210.61249923706055, a * 182.1999969482422, a * 213.61249923706055);
        d.bezierCurveTo(a * 181.1999969482422, a * 211.11249923706055, a * 181.1999969482422, a * 211.11249923706055, a * 180.1999969482422, a * 208.61249923706055);
        d.bezierCurveTo(a * 183.1999969482422, a * 205.61249923706055, a * 183.1999969482422, a * 205.61249923706055, a * 186.1999969482422, a * 202.61249923706055);
        d.bezierCurveTo(a * 180.6999969482422, a * 203.11249923706055, a * 180.6999969482422, a * 203.11249923706055, a * 175.1999969482422, a * 203.61249923706055);
        d.bezierCurveTo(a * 174.6999969482422, a * 200.11249923706055, a * 174.6999969482422, a * 200.11249923706055, a * 174.1999969482422, a * 196.61249923706055);
        d.bezierCurveTo(a * 177.1999969482422, a * 195.61249923706055, a * 177.1999969482422, a * 195.61249923706055, a * 180.1999969482422, a * 194.61249923706055);
        d.bezierCurveTo(a * 177.1999969482422, a * 191.61249923706055, a * 177.1999969482422, a * 191.61249923706055, a * 174.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 175.6999969482422, a * 187.11249923706055, a * 175.6999969482422, a * 187.11249923706055, a * 177.1999969482422, a * 185.61249923706055);
        d.bezierCurveTo(a * 180.6999969482422, a * 187.11249923706055, a * 180.6999969482422, a * 187.11249923706055, a * 184.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 182.6999969482422, a * 183.61249923706055, a * 182.6999969482422, a * 183.61249923706055, a * 181.1999969482422, a * 178.61249923706055);
        d.bezierCurveTo(a * 183.1999969482422, a * 177.11249923706055, a * 183.1999969482422, a * 177.11249923706055, a * 185.1999969482422, a * 175.61249923706055);
        d.closePath();
        vt(d, b[10]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 185.1999969482422, a * 173.8125);
        d.bezierCurveTo(a * 187.1999969482422, a * 179.3125, a * 187.1999969482422, a * 179.3125, a * 189.1999969482422, a * 184.8125);
        d.bezierCurveTo(a * 184.1999969482422, a * 181.8125, a * 184.1999969482422, a * 181.8125, a * 179.1999969482422, a * 178.8125);
        d.bezierCurveTo(a * 181.1999969482422, a * 175.8125, a * 182.1999969482422, a * 174.8125, a * 185.1999969482422, a * 173.8125);
        d.closePath();
        vt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 192.1999969482422, a * 173.61249542236328);
        d.bezierCurveTo(a * 194.1999969482422, a * 172.61249542236328, a * 196.1999969482422, a * 171.61249542236328, a * 199.1999969482422, a * 173.61249542236328);
        d.bezierCurveTo(a * 197.6999969482422, a * 179.61249542236328, a * 197.6999969482422, a * 179.61249542236328, a * 196.1999969482422, a * 185.61249542236328);
        d.bezierCurveTo(a * 194.1999969482422, a * 179.61249542236328, a * 194.1999969482422, a * 179.61249542236328, a * 192.1999969482422, a * 173.61249542236328);
        d.closePath();
        vt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 205.1999969482422, a * 176.2125015258789);
        d.bezierCurveTo(a * 210.1999969482422, a * 178.2125015258789, a * 211.1999969482422, a * 179.2125015258789, a * 211.1999969482422, a * 181.2125015258789);
        d.bezierCurveTo(a * 206.6999969482422, a * 184.7125015258789, a * 206.6999969482422, a * 184.7125015258789, a * 202.1999969482422, a * 188.2125015258789);
        d.bezierCurveTo(a * 203.6999969482422, a * 182.2125015258789, a * 203.6999969482422, a * 182.2125015258789, a * 205.1999969482422, a * 176.2125015258789);
        d.closePath();
        vt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.1999969482422, a * 187.21249985694885);
        d.bezierCurveTo(a * 216.1999969482422, a * 191.21249985694885, a * 216.1999969482422, a * 192.21249985694885, a * 215.1999969482422, a * 195.21249985694885);
        d.bezierCurveTo(a * 206.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885);
        d.bezierCurveTo(a * 209.6999969482422, a * 190.71249985694885, a * 209.6999969482422, a * 190.71249985694885, a * 214.1999969482422, a * 187.21249985694885);
        d.closePath();
        vt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 204.1999969482422, a * 201.8125);
        d.bezierCurveTo(a * 209.1999969482422, a * 201.3125, a * 209.1999969482422, a * 201.3125, a * 214.1999969482422, a * 200.8125);
        d.bezierCurveTo(a * 215.1999969482422, a * 204.8125, a * 214.1999969482422, a * 205.8125, a * 213.1999969482422, a * 208.8125);
        d.bezierCurveTo(a * 208.6999969482422, a * 205.3125, a * 208.6999969482422, a * 205.3125, a * 204.1999969482422, a * 201.8125);
        d.closePath();
        vt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 199.1999969482422, a * 205.61249923706055);
        d.bezierCurveTo(a * 207.1999969482422, a * 212.61249923706055, a * 203.6999969482422, a * 209.11249923706055, a * 208.1999969482422, a * 212.61249923706055);
        d.bezierCurveTo(a * 206.1999969482422, a * 215.61249923706055, a * 204.1999969482422, a * 217.61249923706055, a * 203.1999969482422, a * 216.61249923706055);
        d.bezierCurveTo(a * 201.1999969482422, a * 211.11249923706055, a * 201.1999969482422, a * 211.11249923706055, a * 199.1999969482422, a * 205.61249923706055);
        d.closePath();
        vt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 191.1999969482422, a * 207.01250076293945);
        d.bezierCurveTo(a * 194.1999969482422, a * 213.01250076293945, a * 194.1999969482422, a * 216.01250076293945, a * 196.1999969482422, a * 218.01250076293945);
        d.bezierCurveTo(a * 193.1999969482422, a * 220.01250076293945, a * 190.1999969482422, a * 220.01250076293945, a * 188.1999969482422, a * 218.01250076293945);
        d.bezierCurveTo(a * 189.6999969482422, a * 213.01250076293945, a * 189.6999969482422, a * 213.01250076293945, a * 191.1999969482422, a * 208.01250076293945);
        d.closePath();
        vt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 186.1999969482422, a * 203.21249961853027);
        d.bezierCurveTo(a * 184.1999969482422, a * 209.21249961853027, a * 184.1999969482422, a * 209.21249961853027, a * 182.1999969482422, a * 215.21249961853027);
        d.bezierCurveTo(a * 177.1999969482422, a * 212.21249961853027, a * 176.1999969482422, a * 211.21249961853027, a * 177.1999969482422, a * 210.21249961853027);
        d.bezierCurveTo(a * 181.6999969482422, a * 206.71249961853027, a * 181.6999969482422, a * 206.71249961853027, a * 186.1999969482422, a * 203.21249961853027);
        d.closePath();
        vt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 183.1999969482422, a * 196.8125);
        d.bezierCurveTo(a * 177.1999969482422, a * 196.3125, a * 177.1999969482422, a * 196.3125, a * 171.1999969482422, a * 195.8125);
        d.bezierCurveTo(a * 171.1999969482422, a * 199.8125, a * 171.1999969482422, a * 202.8125, a * 174.1999969482422, a * 204.8125);
        d.bezierCurveTo(a * 178.6999969482422, a * 200.8125, a * 178.6999969482422, a * 200.8125, a * 183.1999969482422, a * 196.8125);
        d.closePath();
        vt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 185.1999969482422, a * 190.21249771118164);
        d.bezierCurveTo(a * 179.6999969482422, a * 186.71249771118164, a * 179.6999969482422, a * 186.71249771118164, a * 174.1999969482422, a * 183.21249771118164);
        d.bezierCurveTo(a * 172.1999969482422, a * 186.21249771118164, a * 172.1999969482422, a * 187.21249771118164, a * 172.1999969482422, a * 190.21249771118164);
        d.bezierCurveTo(a * 178.1999969482422, a * 190.21249771118164, a * 178.1999969482422, a * 190.21249771118164, a * 184.1999969482422, a * 190.21249771118164);
        d.closePath();
        vt(d, b[11]);
        ut(d, a * 126.19999694824219, a * 169.8125, a * 8.94427190999916);
        vt(d, b[12]);
        ut(d, a * 123.19999694824219, a * 164.8125, a * 2.8284271247461903);
        vt(d, b[13]);
        ut(d, a * 253.1999969482422, a * 169.8125, a * 8.94427190999916);
        vt(d, b[12]);
        ut(d, a * 255.1999969482422, a * 164.8125, a * 2.23606797749979);
        vt(d, b[13]);
        return c;
    }
    function vc(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 501;
        f.height = b * 564;
        g.scale(0.5, 0.5);
        g.translate(b * 240, b * 255);
        g.rotate(e);
        g.globalAlpha = c ? 0.5 : 0.2;
        ut(g, b * 174, b * 87.984375, b * 20.8806130178211);
        vt(g, d[0], d[0], b * 8);
        ut(g, b * 174, b * 87.984375, b * 12.165525060596439);
        vt(g, d[0], d[0], b * 8);
        ut(g, b * 174, b * 87.484375, b * 6);
        vt(g, d[0]);
        ut(g, b * 30, b * 87.984375, b * 20.8806130178211);
        vt(g, d[0], d[0], b * 4);
        ut(g, b * 30, b * 87.984375, b * 12.165525060596439);
        vt(g, d[0], d[0], b * 4);
        ut(g, b * 30, b * 87.484375, b * 6);
        vt(g, d[0]);
        ut(g, b * 100, b * 30, b * 20.8806130178211);
        vt(g, d[0], d[0], b * 4);
        ut(g, b * 100, b * 30, b * 12.165525060596439);
        vt(g, d[0], d[0], b * 4);
        ut(g, b * 100, b * 30, b * 6);
        vt(g, d[0]);
        ut(g, b * 100, b * 130, b * 20.8806130178211);
        vt(g, d[0], d[0], b * 4);
        ut(g, b * 100, b * 130, b * 12.165525060596439);
        vt(g, d[0], d[0], b * 4);
        ut(g, b * 100, b * 130, b * 6);
        vt(g, d[0]);
        g.save();
        g.translate(b * 102, b * 81.984375);
        g.rotate(0);
        wt(g, b * -74, b * -57, b * 148, b * 114, b * 23);
        g.restore();
        vt(g, d[0], d[0], b * 4);
        g.save();
        g.translate(b * 101, b * 64.984375);
        g.rotate(0);
        wt(g, b * -33, b * -10, b * 66, b * 20, b * 15);
        g.restore();
        vt(g, d[0], d[0], b * 4);
        g.save();
        g.translate(b * 102, b * 63.484375);
        g.rotate(0);
        wt(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
        g.restore();
        g.translate(5, -5);
        g.globalAlpha = 1;
        ut(g, b * 174, b * 87.984375, b * 20.8806130178211);
        vt(g, d[1], d[3], b * 8);
        ut(g, b * 174, b * 87.984375, b * 12.165525060596439);
        vt(g, d[1], d[3], b * 8);
        ut(g, b * 174, b * 87.484375, b * 6);
        vt(g, d[2]);
        ut(g, b * 30, b * 87.984375, b * 20.8806130178211);
        vt(g, d[1], d[3], b * 8);
        ut(g, b * 30, b * 87.984375, b * 12.165525060596439);
        vt(g, d[1], d[3], b * 8);
        ut(g, b * 30, b * 87.484375, b * 6);
        vt(g, d[2]);
        ut(g, b * 102, b * 30, b * 20.8806130178211);
        vt(g, d[1], d[3], b * 8);
        ut(g, b * 102, b * 30, b * 12.165525060596439);
        vt(g, d[1], d[3], b * 8);
        ut(g, b * 102, b * 30, b * 6);
        vt(g, d[1]);
        ut(g, b * 102, b * 130, b * 20.8806130178211);
        vt(g, d[1], d[3], b * 8);
        ut(g, b * 102, b * 130, b * 12.165525060596439);
        vt(g, d[1], d[3], b * 8);
        ut(g, b * 102, b * 130, b * 6);
        vt(g, d[1]);
        g.save();
        g.translate(b * 102, b * 81.984375);
        wt(g, b * -74, b * -57, b * 148, b * 114, b * 23);
        g.restore();
        vt(g, d[1], d[3], b * 8);
        g.save();
        g.translate(b * 101, b * 64.984375);
        wt(g, b * -33, b * -10, b * 66, b * 20, b * 15);
        g.restore();
        vt(g, d[2], d[1], b * 8);
        g.save();
        g.translate(b * 102, b * 63.484375);
        wt(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
        g.restore();
        vt(g, d[2], d[1], b * 8);
        ut(g, b * 135, b * 107.36605834960938, b * 21.095023109728988);
        vt(g, d[1], d[3], b * 8);
        ut(g, b * 135, b * 107.36605834960938, b * 13);
        vt(g, d[1], d[3], b * 8);
        ut(g, b * 135, b * 107.36605834960938, b * 6.082762530298219);
        vt(g, d[2]);
        ut(g, b * 70, b * 107.36605834960938, b * 21.095023109728988);
        vt(g, d[1], d[3], b * 8);
        ut(g, b * 70, b * 107.36605834960938, b * 13);
        vt(g, d[1], d[3], b * 8);
        ut(g, b * 70, b * 107.36605834960938, b * 6.082762530298219);
        vt(g, d[2]);
        return f;
    }
    function mc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 163;
        d.height = a * 163;
        e.save();
        e.translate(a * 82.5, a * 81.1015625);
        e.rotate(0);
        wt(e, a * -65.5, a * -66, a * 131, a * 131, a * 5);
        e.restore();
        vt(e, c[1]);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 80, a * 17.1015625);
        wt(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
        e.restore();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 80, a * 17.1015625);
        wt(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
        e.restore();
        vt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 145.5, a * 83.6015625);
        wt(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
        e.restore();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 145.5, a * 83.6015625);
        wt(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
        e.restore();
        vt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 17.5, a * 82.6015625);
        wt(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
        e.restore();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 17.5, a * 82.6015625);
        wt(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
        e.restore();
        vt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 80.5, a * 145.6015625);
        wt(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
        e.restore();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 80.5, a * 145.6015625);
        wt(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
        e.restore();
        vt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 17, a * 18.1015625);
        wt(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
        e.restore();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 17, a * 18.1015625);
        wt(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
        e.restore();
        vt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 145.5, a * 16.6015625);
        wt(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
        e.restore();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 145.5, a * 16.6015625);
        wt(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
        e.restore();
        vt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 145.5, a * 144.1015625);
        wt(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
        e.restore();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 145.5, a * 144.1015625);
        wt(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
        e.restore();
        vt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 17.5, a * 145.1015625);
        wt(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
        e.restore();
        vt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 17.5, a * 145.1015625);
        wt(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
        e.restore();
        vt(e, c[2], c[3], a * 3);
        return d;
    }
    function cc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 137;
        d.height = a * 129;
        e.globalAlpha = 0.4;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        vt(e, vj, c[2], a * 40);
        e.globalAlpha = 0.4;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        vt(e, undefined, c[1], a * 20);
        e.globalAlpha = 0.8;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        vt(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51.000030517578125, a * 37.9886474609375);
        e.bezierCurveTo(a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 85.9886474609375);
        e.bezierCurveTo(a * 75.50003051757812, a * 85.9886474609375, a * 75.50003051757812, a * 85.9886474609375, a * 100.00003051757812, a * 85.9886474609375);
        e.bezierCurveTo(a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 37.9886474609375);
        e.bezierCurveTo(a * 76.00003051757812, a * 37.9886474609375, a * 76.00003051757812, a * 37.9886474609375, a * 52.000030517578125, a * 37.9886474609375);
        e.closePath();
        vt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 99.00003051757812, a * 38.9886474609375);
        e.bezierCurveTo(a * 93.50003051757812, a * 44.9886474609375, a * 93.50003051757812, a * 44.9886474609375, a * 88.00003051757812, a * 50.9886474609375);
        e.bezierCurveTo(a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 93.9886474609375);
        e.bezierCurveTo(a * 94.00003051757812, a * 90.4886474609375, a * 94.00003051757812, a * 90.4886474609375, a * 100.00003051757812, a * 86.9886474609375);
        e.closePath();
        vt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.00003051757812, a * 49.625);
        e.bezierCurveTo(a * 61.000030517578125, a * 49.625, a * 61.000030517578125, a * 49.625, a * 35.000030517578125, a * 49.625);
        e.bezierCurveTo(a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 91.625);
        e.bezierCurveTo(a * 60.500030517578125, a * 91.625, a * 60.500030517578125, a * 91.625, a * 86.00003051757812, a * 91.625);
        e.bezierCurveTo(a * 86.50003051757812, a * 70.625, a * 86.50003051757812, a * 70.625, a * 87.00003051757812, a * 49.625);
        e.closePath();
        vt(e, c[1], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 47.000030517578125, a * 36.625);
        e.bezierCurveTo(a * 73.00003051757812, a * 37.125, a * 73.00003051757812, a * 37.125, a * 99.00003051757812, a * 37.625);
        e.bezierCurveTo(a * 93.50003051757812, a * 44.125, a * 93.50003051757812, a * 44.125, a * 88.00003051757812, a * 50.625);
        e.bezierCurveTo(a * 60.500030517578125, a * 50.125, a * 60.500030517578125, a * 50.125, a * 33.000030517578125, a * 49.625);
        e.closePath();
        vt(e, c[1], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53.000030517578125, a * 52.625);
        e.bezierCurveTo(a * 40.000030517578125, a * 54.625, a * 39.000030517578125, a * 59.625, a * 40.000030517578125, a * 67.625);
        e.bezierCurveTo(a * 45.000030517578125, a * 59.625, a * 48.000030517578125, a * 58.625, a * 54.000030517578125, a * 53.625);
        e.closePath();
        vt(e, c[3]);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        vt(e, undefined, c[3], a * 4);
        return d;
    }
    function pc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.translate(0, a * 15);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        vt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        vt(e, Oo, c[0], a * 11);
        e.translate(0, a * -5);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103, a * 154);
        e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
        e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
        e.closePath();
        vt(e, c[3], c[2], a * 12);
        e.translate(0, a * 25);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103, a * 154);
        e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
        e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
        e.closePath();
        vt(e, c[5]);
        e.translate(0, a * -25);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        vt(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 182, a * 185);
        e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
        e.closePath();
        vt(e, Jl, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222, a * 287);
        e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
        e.closePath();
        vt(e, Ft, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 290);
        e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
        e.closePath();
        vt(e, c[1], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 184);
        e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
        e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
        e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
        e.closePath();
        vt(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 251, a * 276);
        e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
        e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
        e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
        e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
        e.closePath();
        vt(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        vt(e, undefined, c[2], a * 11);
        return d;
    }
    let Cc;
    let Tu = Oo;
    const Uu = gk;
    function zc(a, b) {
        Jj(Tu, a, b);
        return ((247 + (function (b, c, d, e, f, g) {
            gi(Tu, b, c, d, e, f, g);
            const a = function (b, c, d, e, f) {
                Ti(Tu, b, c, d, e, f);
                const g = xk(Cc[0], Cc[1], Cc[2], Cc[3], Cc[4], Cc[0]);
                a = Cc[1];
                i = Cc[2];
                j = Cc[3];
                ck(Tu, a, i, j);
                Mq(Cc[0], Cc[1], Cc[2]);
                lf(Cc[0], Cc[1]);
                var a;
                var i;
                var j;
                return ~(g & 43785) & 43785 | ~(g & 43785) & g;
            }(Cc[0], Cc[1], Cc[2], Cc[3], Cc[4]);
            const h = Mn(Cc[5], Cc[0], Cc[1], Cc[2]);
            return (8 << ((a ^ h) >> 16 & 255)) + (24 << ((a ^ h) >> 8 & 255)) + (16 << ((a ^ h) & 255)) + (0 << ((a ^ h) >> 24 & 255));
        }(Cc[0], Cc[1], Cc[0], Cc[1], Cc[0], Cc[1]) ^ Qv(Cc[0], Cc[1], Cc[0], Cc[1]))) * 8121 + 28411) % 134456;
    }
    function yc(a, b, c, d, e) {
        Pj(Tu, a, b, c, d, e);
        return ((42 + (zc(Cc[0], Cc[1]) ^ Tw(Cc[2], Cc[3], Cc[4], Cc[0], Cc[1], Cc[2]))) * 75 + 74) % 65537;
    }
    function wc() {
        if (Yw.reconnect.enabled) {
            In.globalAlpha = 0.9;
            In.fillStyle = "#000";
            wt(In, jq - 150, kq - 90, 300, 180, 15);
            In.fill();
            In.globalAlpha = 1;
            var a = ᐃΔ[301];
            In.save();
            Yw.reconnect.rotate = (Yw.reconnect.rotate + Af * 2) % (Math.PI * 2);
            In.translate(Rn / 2, iq / 2 - 25);
            In.rotate(Yw.reconnect.rotate);
            Mc(In, a, -a.width / 2, -a.height / 2);
            In.restore();
            a = ᐃΔ[525];
            Mc(In, a, (Rn - a.width) / 2, (iq - a.height) / 2 + 25);
        }
    }
    function Pc() {
        Yw.ᐃᐃⲆΔ.id = -1;
        Yw.ᐃᐃⲆΔ.lock = Qr;
        Yw.ᐃᐃⲆΔ.locked = lj;
        Yw.ᐃᐃⲆΔ.ⲆᐃⲆⲆⵠⲆⲆ = Gj;
        Yw.ᐃᐃⲆΔ.ⲆΔⵠΔⵠᐃⵠ = false;
        Yw.ᐃᐃⲆΔ.open = false;
        var b = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ];
        var c = qw.ⲆΔᐃⵠⵠⵠⵠ;
        if (b) {
            for (var d = 0; Cf.Δᐃⵠ[tw.ΔⲆΔΔⵠ].length > d; d++) {
                var e = Cf.Δᐃⵠ[tw.ΔⲆΔΔⵠ][d];
                var f = ΔⲆⲆⵠ.ᐃⲆⵠΔ(e, b);
                if (c > f) {
                    c = f;
                    Yw.ᐃᐃⲆΔ.open = bg;
                    Yw.ᐃᐃⲆΔ.id = e.action < 2 ? -1 : Math.floor((e.action - 1) / 2);
                    Yw.ᐃᐃⲆΔ.ⵠΔΔⲆ = e.info;
                    Yw.ᐃᐃⲆΔ.ⲆⵠΔⵠ = e.ⲆⵠΔⵠ;
                    Yw.ᐃᐃⲆΔ.ᐃΔⲆᐃⲆ = e.id;
                    Yw.ᐃᐃⲆΔ.locked = e.lock;
                    Yw.ᐃᐃⲆΔ.lock = !!e.lock && Yw.id != e.ⲆⵠΔⵠ && !Yw.ᐃΔΔⲆⵠΔⲆ(e.ⲆⵠΔⵠ) || Ah;
                    Yw.ᐃᐃⲆΔ.ⲆΔⵠΔⵠᐃⵠ = Yw.id === e.ⲆⵠΔⵠ && !Yw.ᐃᐃⲆΔ.locked && Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(148) != -1 || Sh;
                    if (Yw.ᐃᐃⲆΔ.locked && Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(158) != -1) {
                        Yw.ᐃᐃⲆΔ.ⲆᐃⲆⲆⵠⲆⲆ = Go;
                    }
                }
            }
            if (c < qw.ⲆΔᐃⵠⵠⵠⵠ) {
                var g = ᐃΔ[339];
                var a = $w.ⵠⵠᐃ[0];
                var j = Math.floor(a.info.translate.x + (a.info.ᐃⵠ[0].width - g.width) / 2);
                var k = Math.floor(a.info.translate.y + (a.info.ᐃⵠ[0].height - g.height) / 2) + 3;
                Mc(In, g, j, k);
                if ((!Yw.ᐃᐃⲆΔ.lock || Yw.ᐃᐃⲆΔ.ⲆⵠΔⵠ === Yw.id) && Yw.ᐃᐃⲆΔ.id >= 0) {
                    (a = $w.ⵠⵠᐃ[Yw.ᐃᐃⲆΔ.id]).ⵠⵠΔΔ(In);
                    var h = Yw.ᐃᐃⲆΔ.ⵠΔΔⲆ;
                    if (h > 1) {
                        _c(h, a);
                    }
                }
                if (Yw.ᐃᐃⲆΔ.lock) {
                    $w.ⲆΔᐃΔⵠᐃⵠ.ⵠⵠΔΔ(In);
                } else if (Yw.ᐃᐃⲆΔ.ⲆΔⵠΔⵠᐃⵠ) {
                    $w.ⵠⲆⲆⵠⵠᐃΔ.ⵠⵠΔΔ(In);
                }
                if (Yw.ᐃᐃⲆΔ.ⲆᐃⲆⲆⵠⲆⲆ) {
                    $w.ᐃᐃᐃⲆⵠⲆᐃ.ⵠⵠΔΔ(In);
                }
            }
        }
    }
    function Ac() {
        if (!Yw.ᐃᐃⲆΔ.open && !Yw.ⲆᐃⲆΔⵠ.open) {
            Yw.ⵠᐃⲆΔ.open = false;
            var b = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ];
            var c = qw.ᐃΔⲆΔΔᐃᐃ;
            if (b) {
                for (var d = 0; d < Cf.Δᐃⵠ[tw.ⵠⲆⵠΔΔ].length; d++) {
                    var e = Cf.Δᐃⵠ[tw.ⵠⲆⵠΔΔ][d];
                    var f = ΔⲆⲆⵠ.ᐃⲆⵠΔ(e, b);
                    if (f < c) {
                        c = f;
                        Yw.ⵠᐃⲆΔ.open = hi;
                        Yw.ⵠᐃⲆΔ.ᐃᐃⵠᐃΔⲆΔ = e.info & 255;
                        Yw.ⵠᐃⲆΔ.ⵠᐃⲆᐃΔ = (e.info & 65280) >> 8;
                        Yw.ⵠᐃⲆΔ.ⲆⵠΔⵠ = e.ⲆⵠΔⵠ;
                        Yw.ⵠᐃⲆΔ.ᐃΔⲆᐃⲆ = e.id;
                    }
                }
                if (qw.ᐃΔⲆΔΔᐃᐃ > c) {
                    var g = ᐃΔ[655];
                    var a = (k = $w.ΔᐃⲆⵠΔⲆⵠ).info.translate.x - 33;
                    Mc(In, g, a, 0);
                    if (Yw.ⵠᐃⲆΔ.ᐃᐃⵠᐃΔⲆΔ > 0) {
                        k.ⵠⵠΔΔ(In);
                        var j = Yw.ⵠᐃⲆΔ.ᐃᐃⵠᐃΔⲆΔ;
                        if (j > 1) {
                            _c(j, k);
                        }
                    }
                    var k = $w.ⵠⲆⲆᐃⲆⵠᐃ;
                    if (Yw.ⵠᐃⲆΔ.ⵠᐃⲆᐃΔ > 0) {
                        k.ⵠⵠΔΔ(In);
                        if ((j = Yw.ⵠᐃⲆΔ.ⵠᐃⲆᐃΔ) > 1) {
                            _c(j, k);
                        }
                    }
                }
            }
        }
    }
    function kc() {
        Yw.ΔᐃᐃΔΔ.id = -1;
        Yw.ΔᐃᐃΔΔ.ⲆⵠΔⵠ = -1;
        if (!Yw.ΔⵠΔⲆΔⵠΔ && !Yw.ΔᐃᐃΔΔ.wait && !Yw.ᐃᐃⲆⵠᐃ) {
            var b = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ];
            var c = qw.ⵠⲆⵠⵠⲆᐃΔΔΔ;
            if (b) {
                for (var d = 0; Cf.Δᐃⵠ[tw.ⵠΔᐃΔΔ].length > d; d++) {
                    var e = Cf.Δᐃⵠ[tw.ⵠΔᐃΔΔ][d];
                    var f = ΔⲆⲆⵠ.ᐃⲆⵠΔ(e, b);
                    if (f < c) {
                        c = f;
                        Yw.ΔᐃᐃΔΔ.id = e.id;
                        Yw.ΔᐃᐃΔΔ.ⲆⵠΔⵠ = e.ⲆⵠΔⵠ;
                        Yw.ΔᐃᐃΔΔ.info = e.info;
                        Yw.ΔᐃᐃΔΔ.lock = (e.info & 16) >> 4;
                    }
                }
            }
            var g = $w.ΔⲆⲆⲆⲆ;
            $w.ΔⲆⲆⲆⲆ = -1;
            if (Yw.ΔᐃᐃΔΔ.ⲆⵠΔⵠ == -1 || Yw.ⵠΔⵠᐃⲆ.length != 0 && Yw.ΔᐃᐃΔΔ.ⲆⵠΔⵠ != Yw.id) {
                if (Yw.ⵠΔⵠᐃⲆ.length != 0 && Yw.ⵠΔⵠᐃⲆ[0] != Yw.id) {
                    $w.ΔⲆⲆⲆⲆ = ow.ⵠⲆⵠⵠᐃⲆⲆ;
                } else if (Yw.ⵠΔⵠᐃⲆ.length != 0 && Yw.id == Yw.ⵠΔⵠᐃⲆ[0]) {
                    $w.ΔⲆⲆⲆⲆ = ow.ⵠᐃⲆⲆᐃΔᐃ;
                } else if (Yw.ⵠΔⵠᐃⲆ.length != 0) {
                    $w.ΔⲆⲆⲆⲆ = ow.ⲆⲆᐃΔⲆΔⲆ;
                }
            } else if (Yw.ⵠΔⵠᐃⲆ.length == 0 && Yw.ΔᐃᐃΔΔ.info >= 8) {
                $w.ΔⲆⲆⲆⲆ = ow.ⵠⲆΔⲆᐃⲆⲆ;
            } else if (Yw.ⵠΔⵠᐃⲆ.length == 0) {
                $w.ΔⲆⲆⲆⲆ = ow.ⲆⲆᐃΔⲆΔⲆ;
            } else {
                $w.ΔⲆⲆⲆⲆ = ow.ⵠΔⵠⵠᐃⵠΔ;
            }
            if ($w.ΔⲆⲆⲆⲆ != -1) {
                $w.ⲆᐃⵠΔⲆ[$w.ΔⲆⲆⲆⲆ].button.ⵠⵠΔΔ(In);
            }
            var a = document.getElementById("team_box").style;
            if ($w.ΔⲆⲆⲆⲆ != -1 && $w.ΔⲆⲆⲆⲆ != g && a.display == "inline-block") {
                $w.ⲆᐃⵠΔⲆ[$w.ΔⲆⲆⲆⲆ].action();
            }
        }
    }
    function xc() {
        var a = $w.ⲆⲆᐃΔⲆ;
        var b = a.id;
        if (a.ⲆⲆⲆΔΔ === 1 && a.display === 1) {
            if (ⲆΔΔⵠⵠ[b] === Zk) {
                ⲆΔΔⵠⵠ[b] = function (b) {
                    var c = document.createElement("canvas");
                    var d = c.getContext("2d");
                    var e = Xg[b];
                    d.font = "20px Baloo Paaji";
                    var f = 0;
                    if (e.length >= 1) {
                        f = Math.max(0, d.measureText(e[0]).width);
                    }
                    d.font = "17px Baloo Paaji";
                    if (e.length >= 2) {
                        f = Math.max(f, d.measureText(e[1]).width);
                    }
                    d.font = "14px Baloo Paaji";
                    $g = 2;
                    for (; e.length > $g; $g++) {
                        f = Math.max(f, d.measureText(e[$g]).width);
                    }
                    var g = f + 35;
                    var a = 0;
                    a = e.length === 1 ? 55 : e.length === 2 ? 85 : (e.length - 2) * 26 + 85;
                    c.width = g;
                    c.height = a;
                    wt(d, 0, 0, g, a, 10);
                    d.fillStyle = "#000000";
                    d.globalAlpha = 0.5;
                    d.fill();
                    if (e.length >= 1) {
                        d.textBaseline = "middle";
                        d.font = "20px Baloo Paaji";
                        d.globalAlpha = 1;
                        d.fillStyle = "#e2c340";
                        d.fillText(e[0], 15, 28);
                    }
                    if (e.length >= 2) {
                        d.font = "17px Baloo Paaji";
                        d.fillStyle = "#ffffff";
                        d.fillText(e[1], 15, 55);
                        a = 55;
                    }
                    if (e.length >= 3) {
                        d.font = "14px Baloo Paaji";
                        d.globalAlpha = 0.7;
                        $g = 2;
                        for (; $g < e.length; $g++) {
                            d.fillText(e[$g], 15, a + 28);
                            a += 26;
                        }
                    }
                    return c;
                }(b);
            }
            if (a.ⲆⵠᐃΔ === 1) {
                Mc(In, ⲆΔΔⵠⵠ[b], a.x, a.y);
            } else if (Rn < a.x - 80 + ⲆΔΔⵠⵠ[b].width) {
                Mc(In, ⲆΔΔⵠⵠ[b], Rn - ⲆΔΔⵠⵠ[b].width - 10, a.y - ⲆΔΔⵠⵠ[b].height - 10);
            } else {
                Mc(In, ⲆΔΔⵠⵠ[b], a.x - 80, a.y - ⲆΔΔⵠⵠ[b].height - 10);
            }
        }
    }
    function Jc() {
        if (Yw.ⲆΔⵠΔⲆΔᐃ) {
            In.globalAlpha = 0.5;
            In.fillStyle = "#000";
            In.fillRect(0, 0, Rn, iq);
            In.globalAlpha = 0.8;
            var b = ᐃΔ[516][Cf.time];
            var c = jq - b.width / 2;
            var d = kq - b.height / 2;
            Mc(In, b, c, d);
            In.globalAlpha = 1;
            if ($w.ᐃⲆΔⲆⲆ.ΔⲆᐃⲆⵠ.x > -1) {
                In.fillStyle = "#660000";
                ut(In, c + $w.ᐃⲆΔⲆⲆ.ΔⲆᐃⲆⵠ.x * 3 * mq, d + $w.ᐃⲆΔⲆⲆ.ΔⲆᐃⲆⵠ.y * 3 * mq, mq * 14);
                In.fill();
            }
            for (var e = $w.ᐃⲆΔⲆⲆ.ΔᐃᐃΔ, f = 0; f < e.length; f++) {
                var g = e[f];
                Cf.time;
                In.fillStyle = "#ff0000";
                ut(In, c + g.x / (Cf.ᐃⲆᐃᐃⲆ * 100) * 600 * mq, d + mq * (g.y / (Cf.ᐃⲆⲆⲆᐃ * 100) * 600), mq * 6);
                In.fill();
            }
            var h = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ];
            if (h) {
                In.fillStyle = Cf.time ? "#fff" : "#e39716";
                ut(In, c + mq * (h.x / (Cf.ᐃⲆᐃᐃⲆ * 100) * 600), d + mq * (h.y / (Cf.ᐃⲆⲆⲆᐃ * 100) * 600), mq * 12);
                In.fill();
            }
        }
    }
    function Mc(b, c, d, e, f, g, a, i, j, h) {
        if (c.ᐃⲆⵠΔΔⵠⲆ === undefined || c.ᐃⲆⵠΔΔⵠⲆ() === 1) {
            if (h !== undefined) {
                b.drawImage(c, d, e, Math.max(1, f), Math.max(1, g), a, i, j, h);
            } else if (ns !== g) {
                b.drawImage(c, d, e, f, g);
            } else {
                b.drawImage(c, d, e);
            }
        }
    }
    function Bc(b, c, d) {
        var e = ᐃΔ[465][b];
        var f = c.info.translate.x + mq * 5;
        var g = c.info.translate.y + mq * 5;
        if (c.info.state == Yv || d) {
            g += mq * 5;
        }
        Mc(In, e, f, g);
    }
    function Dc() {
        Yw.ⲆⲆⵠⲆᐃ.open = Gj;
        var a = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ];
        var b = qw.ⲆΔᐃᐃΔΔᐃ;
        if (a) {
            for (var c = 0; c < Cf.Δᐃⵠ[tw.ⲆΔⵠᐃᐃ].length; c++) {
                var d = Cf.Δᐃⵠ[tw.ⲆΔⵠᐃᐃ][c];
                var e = ΔⲆⲆⵠ.ᐃⲆⵠΔ(d, a);
                if (e < b) {
                    b = e;
                    Yw.ⲆⲆⵠⲆᐃ.open = gt;
                    Yw.ⲆⲆⵠⲆᐃ.ⲆⵠΔⵠ = d.ⲆⵠΔⵠ;
                    Yw.ⲆⲆⵠⲆᐃ.ᐃΔⲆᐃⲆ = d.id;
                }
            }
            if (qw.ⲆΔᐃᐃΔΔᐃ > b) {
                $w.ⲆⲆⵠⲆᐃ.ⵠⵠΔΔ(In);
            }
        }
    }
    function Ec() {
        if (!Yw.ᐃᐃⲆΔ.open && !Yw.ⲆᐃⲆΔⵠ.open && !Yw.ⵠᐃⲆΔ.open && !Yw.ⵠⲆΔᐃ.open) {
            Yw.ᐃΔΔΔ.open = false;
            var b = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ];
            var c = qw.ΔᐃⵠΔᐃⵠΔ;
            if (b) {
                for (var d = 0; Cf.Δᐃⵠ[tw.ΔⵠⲆⲆⲆ].length > d; d++) {
                    var e = Cf.Δᐃⵠ[tw.ΔⵠⲆⲆⲆ][d];
                    var f = ΔⲆⲆⵠ.ᐃⲆⵠΔ(e, b);
                    if (f < c) {
                        c = f;
                        Yw.ᐃΔΔΔ.open = true;
                        Yw.ᐃΔΔΔ.ⲆΔΔⲆⵠΔⵠ = e.info & 31;
                        Yw.ᐃΔΔΔ.ⵠᐃⲆᐃΔ = (e.info & 992) >> 5;
                        Yw.ᐃΔΔΔ.ⵠⲆⲆⲆⵠΔⲆ = (e.info & 31744) >> 10;
                        Yw.ᐃΔΔΔ.ⲆⵠΔⵠ = e.ⲆⵠΔⵠ;
                        Yw.ᐃΔΔΔ.ᐃΔⲆᐃⲆ = e.id;
                    }
                }
                if (c < qw.ΔᐃⵠΔᐃⵠΔ) {
                    var g = ᐃΔ[722];
                    var a = (j = $w.ΔⲆⲆΔᐃⵠⵠ).info.translate.x - 32;
                    Mc(In, g, a, 0);
                    if (Yw.ᐃΔΔΔ.ⲆΔΔⲆⵠΔⵠ > 0) {
                        j.ⵠⵠΔΔ(In);
                        if ((k = Yw.ᐃΔΔΔ.ⲆΔΔⲆⵠΔⵠ) > 1) {
                            _c(k, j);
                        }
                    }
                    var j = $w.Ⲇᐃⵠⵠᐃᐃⵠ;
                    if (Yw.ᐃΔΔΔ.ⵠⲆⲆⲆⵠΔⲆ > 0) {
                        j.ⵠⵠΔΔ(In);
                        var k = Yw.ᐃΔΔΔ.ⵠⲆⲆⲆⵠΔⲆ;
                        if (k > 1) {
                            _c(k, j);
                        }
                    }
                    j = $w.ⲆⲆⲆⵠⲆⲆⲆ;
                    if (Yw.ᐃΔΔΔ.ⵠᐃⲆᐃΔ > 0) {
                        j.ⵠⵠΔΔ(In);
                        if ((k = Yw.ᐃΔΔΔ.ⵠᐃⲆᐃΔ) > 1) {
                            _c(k, j);
                        }
                    }
                }
            }
        }
    }
    function Ic() {
        if (Yw.ⵠᐃΔᐃ.ⵠᐃⲆⵠᐃ.length > 0) {
            var b = {
                x: $w.ᐃⲆΔⲆⲆ.translate.x,
                y: $w.ᐃⲆΔⲆⲆ.translate.y - mq * 120
            };
        } else {
            b = {
                x: $w.ᐃⲆΔⲆⲆ.translate.x,
                y: $w.ᐃⲆΔⲆⲆ.translate.y - mq * 50
            };
        }
        In.globalAlpha = 0.8;
        var c = ᐃΔ[259][Cf.time];
        Mc(In, c, b.x, b.y);
        In.globalAlpha = 1;
        if ($w.ᐃⲆΔⲆⲆ.ΔⲆᐃⲆⵠ.x > -1) {
            In.fillStyle = "#660000";
            ut(In, b.x + mq * $w.ᐃⲆΔⲆⲆ.ΔⲆᐃⲆⵠ.x, b.y + $w.ᐃⲆΔⲆⲆ.ΔⲆᐃⲆⵠ.y * mq, mq * 5);
            In.fill();
        }
        var d = mq;
        for (var f = $w.ᐃⲆΔⲆⲆ.ΔᐃᐃΔ, g = 0; g < f.length; g++) {
            var h = f[g];
            Cf.time;
            In.fillStyle = "#ff0000";
            ut(In, b.x + h.x / (Cf.ᐃⲆᐃᐃⲆ * 100) * 193 * mq, b.y + mq * (h.y / (Cf.ᐃⲆⲆⲆᐃ * 100) * 193), mq * 2);
            In.fill();
        }
        var i = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ];
        if (i) {
            In.fillStyle = Cf.time ? "#fff" : "#e39716";
            ut(In, b.x + i.x / (Cf.ᐃⲆᐃᐃⲆ * 100) * 193 * mq, b.y + mq * (i.y / (Cf.ᐃⲆⲆⲆᐃ * 100) * 193), mq * 4);
            In.fill();
        }
        mq = d;
    }
    function Sc() {
        if (!Yw.ᐃᐃⲆΔ.open && !Yw.ⲆᐃⲆΔⵠ.open) {
            Yw.ⵠⲆΔᐃ.open = gn;
            var b = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ];
            var c = qw.ⲆⵠⲆᐃⵠΔᐃ;
            if (b) {
                for (var d = 0; uw.length > d; d++) {
                    for (var e = uw[d][0], f = uw[d][1], j = 0; j < Cf.Δᐃⵠ[e].length; j++) {
                        var k = Cf.Δᐃⵠ[e][j];
                        var m = ΔⲆⲆⵠ.ᐃⲆⵠΔ(k, b);
                        if (c > m) {
                            c = m;
                            Yw.ⵠⲆΔᐃ.ⲆⲆⲆΔᐃΔᐃ = f;
                            Yw.ⵠⲆΔᐃ.type = e;
                            Yw.ⵠⲆΔᐃ.open = bg;
                            Yw.ⵠⲆΔᐃ.ⲆΔΔⲆⵠΔⵠ = k.info & 255;
                            Yw.ⵠⲆΔᐃ.ⵠⵠᐃᐃΔΔⵠ = (k.info & 65280) >> 8;
                            Yw.ⵠⲆΔᐃ.ⲆⵠΔⵠ = k.ⲆⵠΔⵠ;
                            Yw.ⵠⲆΔᐃ.ᐃΔⲆᐃⲆ = k.id;
                        }
                    }
                }
                if (c < qw.ⲆⵠⲆᐃⵠΔᐃ) {
                    var p;
                    var q = ᐃΔ[656];
                    var l = (g = $w.ⵠᐃⵠΔⵠᐃⵠ).info.translate.x - 33;
                    Mc(In, q, l, 0);
                    if (Yw.ⵠⲆΔᐃ.ⲆΔΔⲆⵠΔⵠ > 0) {
                        g.ⵠⵠΔΔ(In);
                        if ((p = Yw.ⵠⲆΔᐃ.ⲆΔΔⲆⵠΔⵠ) > 1) {
                            _c(p, g);
                        }
                    }
                    switch (Yw.ⵠⲆΔᐃ.ⲆⲆⲆΔᐃΔᐃ) {
                        case 108:
                            var g = $w.ΔᐃⵠᐃΔᐃⲆ;
                            break;
                        case 111:
                            g = $w.ΔⲆⲆⲆⲆΔΔ;
                            break;
                        case 112:
                            g = $w.ᐃⲆⵠᐃⵠᐃΔ;
                            break;
                        case 121:
                            g = $w.ⵠⵠⲆⲆᐃΔΔ;
                            break;
                        case 202:
                            g = $w.ᐃⵠⲆⲆⵠΔᐃ;
                    }
                    if (Yw.ⵠⲆΔᐃ.ⵠⵠᐃᐃΔΔⵠ > 0) {
                        g.ⵠⵠΔΔ(In);
                        if ((p = Yw.ⵠⲆΔᐃ.ⵠⵠᐃᐃΔΔⵠ) > 1) {
                            _c(p, g);
                        }
                    }
                }
            }
        }
    }
    function Qc() {
        if (!Yw.ᐃᐃⲆΔ.open) {
            Yw.ⲆᐃⲆΔⵠ.ⵠΔΔⲆ = 0;
            Yw.ⲆᐃⲆΔⵠ.open = false;
            var b = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ];
            var c = qw.ΔⲆᐃᐃΔⵠⲆ;
            if (b) {
                for (var d = 0; d < Cf.Δᐃⵠ[tw.Ⲇⵠⵠⵠⵠ].length; d++) {
                    var e = Cf.Δᐃⵠ[tw.Ⲇⵠⵠⵠⵠ][d];
                    var f = ΔⲆⲆⵠ.ᐃⲆⵠΔ(e, b);
                    if (c > f) {
                        c = f;
                        Yw.ⲆᐃⲆΔⵠ.open = al;
                        Yw.ⲆᐃⲆΔⵠ.ⵠΔΔⲆ = e.info;
                        Yw.ⲆᐃⲆΔⵠ.ⲆⵠΔⵠ = e.ⲆⵠΔⵠ;
                        Yw.ⲆᐃⲆΔⵠ.ᐃΔⲆᐃⲆ = e.id;
                    }
                }
                if (c < qw.ΔⲆᐃᐃΔⵠⲆ) {
                    var g = ᐃΔ[411];
                    var a = $w.ⵠΔΔⲆΔᐃΔ;
                    var j = Math.floor(a.info.translate.x + (a.info.ᐃⵠ[0].width - g.width) / 2);
                    var k = Math.floor(a.info.translate.y + (a.info.ᐃⵠ[0].height - g.height) / 2) + 3;
                    Mc(In, g, j, k);
                    if (Yw.ⲆᐃⲆΔⵠ.ⵠΔΔⲆ > 0) {
                        a.ⵠⵠΔΔ(In);
                        var h = Yw.ⲆᐃⲆΔⵠ.ⵠΔΔⲆ;
                        if (h > 1) {
                            _c(h, a);
                        }
                    }
                }
            }
        }
    }
    function _c(a, b) {
        ᐃΔ[283][a] ||= Dd(mq, "x" + a, 17, "#FFF");
        var c = ᐃΔ[283][a];
        var d = b.info.translate.x + b.info.ᐃⵠ[0].width - c.width - mq * 14;
        var e = b.info.translate.y + b.info.ᐃⵠ[0].height - c.height - mq * 19;
        if (b.info.state == Yv) {
            e += mq * 5;
        }
        Mc(In, c, d, e);
    }
    function Fc() {
        if (!Yw.ᐃᐃⲆΔ.open && !Yw.ⲆᐃⲆΔⵠ.open && !Yw.ⵠᐃⲆΔ.open && !Yw.ᐃΔΔΔ.open && !Yw.ⵠⲆΔᐃ.open) {
            Yw.sign.open = gn;
            var a = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ];
            var b = qw.ⵠⲆⲆⵠΔΔⲆ;
            if (a) {
                for (var c = 0; c < Cf.Δᐃⵠ[tw.ⵠΔⵠΔΔ].length; c++) {
                    var d = Cf.Δᐃⵠ[tw.ⵠΔⵠΔΔ][c];
                    var e = ΔⲆⲆⵠ.ᐃⲆⵠΔ(d, a);
                    if (e < b && d.info === 0 && d.ⲆⵠΔⵠ === Yw.id) {
                        Yw.sign.open = true;
                        b = e;
                        Yw.sign.ᐃΔⲆᐃⲆ = d.id;
                    }
                }
                if (qw.ⵠⲆⲆⵠΔΔⲆ > b) {
                    $w.sign.button.ⵠⵠΔΔ(In);
                }
            }
        }
    }


    /*
    *****************
    *SCRIPT VARIABLE*
    *****************
    */

    (function () {
        function e(t, r, n) {
            function i(a, s) {
                if (!r[a]) {
                    if (!t[a]) {
                        var u = "function" == typeof require && require;
                        if (!s && u) return u(a, !0);
                        if (o) return o(a, !0);
                        var d = Error("Cannot find module '" + a + "'");
                        throw d.code = "MODULE_NOT_FOUND", d
                    }
                    var m = r[a] = {
                        exports: {}
                    };
                    t[a][0].call(m.exports, function (e) {
                        return i(t[a][1][e] || e)
                    }, m, m.exports, e, t, r, n)
                }
                return r[a].exports
            }
            for (var o = "function" == typeof require && require, a = 0; a < n.length; a++) i(n[a]);
            return i
        }
        return e
    })()({
        1: [function (e, t, r) {
            let n = e("worker-timers");
            window.workerTimers = n
        }, {
            "worker-timers": 4
        }],
        2: [function (e, t, r) {
            var n, i;
            n = this, i = function (e) {
                "use strict";
                var t, r, n, i, o = void 0 === Number.MAX_SAFE_INTEGER ? 9007199254740991 : Number.MAX_SAFE_INTEGER,
                    a = new WeakMap,
                    s = (r = (t = a, function (e, r) {
                        return t.set(e, r), r
                    }), n = a, function (e) {
                        var t = n.get(e),
                            i = void 0 === t ? e.size : t < 1073741824 ? t + 1 : 0;
                        if (!e.has(i)) return r(e, i);
                        if (e.size < 536870912) {
                            for (; e.has(i);) i = Math.floor(1073741824 * Math.random());
                            return r(e, i)
                        }
                        if (e.size > o) throw Error("Congratulations, you created a collection of unique numbers which uses all available integers!");
                        for (; e.has(i);) i = Math.floor(Math.random() * o);
                        return r(e, i)
                    }),
                    u = (i = s, function (e) {
                        var t = i(e);
                        return e.add(t), t
                    });
                e.addUniqueNumber = u, e.generateUniqueNumber = s
            }, "object" == typeof r && void 0 !== t ? i(r) : "function" == typeof define && define.amd ? define(["exports"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).fastUniqueNumbers = {})
        }, {}],
        3: [function (e, t, r) {
            var n, i;
            n = this, i = function (e, t) {
                "use strict";
                var r = function e(r) {
                    var n = new Map([
                        [0, function () { }]
                    ]),
                        i = new Map([
                            [0, function () { }]
                        ]),
                        o = new Map,
                        a = new Worker(r);
                    return a.addEventListener("message", function (e) {
                        var t, r = e.data;
                        if (void 0 !== (t = r).method && "call" === t.method) {
                            var a = r.params,
                                s = a.timerId,
                                u = a.timerType;
                            if ("interval" === u) {
                                var d = n.get(s);
                                if ("number" == typeof d) {
                                    var m = o.get(d);
                                    if (void 0 === m || m.timerId !== s || m.timerType !== u) throw Error("The timer is in an undefined state.")
                                } else if (void 0 !== d) d();
                                else throw Error("The timer is in an undefined state.")
                            } else if ("timeout" === u) {
                                var f = i.get(s);
                                if ("number" == typeof f) {
                                    var c = o.get(f);
                                    if (void 0 === c || c.timerId !== s || c.timerType !== u) throw Error("The timer is in an undefined state.")
                                } else if (void 0 !== f) f(), i["delete"](s);
                                else throw Error("The timer is in an undefined state.")
                            }
                        } else if (null === (l = r).error && "number" == typeof l.id) {
                            var l, v = r.id,
                                p = o.get(v);
                            if (void 0 === p) throw Error("The timer is in an undefined state.");
                            var h = p.timerId,
                                w = p.timerType;
                            o["delete"](v), "interval" === w ? n["delete"](h) : i["delete"](h)
                        } else throw Error(r.error.message)
                    }), {
                        clearInterval: function e(r) {
                            var i = t.generateUniqueNumber(o);
                            o.set(i, {
                                timerId: r,
                                timerType: "interval"
                            }), n.set(r, i), a.postMessage({
                                id: i,
                                method: "clear",
                                params: {
                                    timerId: r,
                                    timerType: "interval"
                                }
                            })
                        },
                        clearTimeout: function e(r) {
                            var n = t.generateUniqueNumber(o);
                            o.set(n, {
                                timerId: r,
                                timerType: "timeout"
                            }), i.set(r, n), a.postMessage({
                                id: n,
                                method: "clear",
                                params: {
                                    timerId: r,
                                    timerType: "timeout"
                                }
                            })
                        },
                        setInterval: function e(r, i) {
                            var o = t.generateUniqueNumber(n);
                            return n.set(o, function () {
                                r(), "function" == typeof n.get(o) && a.postMessage({
                                    id: null,
                                    method: "set",
                                    params: {
                                        delay: i,
                                        now: performance.now(),
                                        timerId: o,
                                        timerType: "interval"
                                    }
                                })
                            }), a.postMessage({
                                id: null,
                                method: "set",
                                params: {
                                    delay: i,
                                    now: performance.now(),
                                    timerId: o,
                                    timerType: "interval"
                                }
                            }), o
                        },
                        setTimeout: function e(r, n) {
                            var o = t.generateUniqueNumber(i);
                            return i.set(o, r), a.postMessage({
                                id: null,
                                method: "set",
                                params: {
                                    delay: n,
                                    now: performance.now(),
                                    timerId: o,
                                    timerType: "timeout"
                                }
                            }), o
                        }
                    }
                };
                e.load = r
            }, "object" == typeof r && void 0 !== t ? i(r, e("fast-unique-numbers")) : "function" == typeof define && define.amd ? define(["exports", "fast-unique-numbers"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).workerTimersBroker = {}, n.fastUniqueNumbers)
        }, {
            "fast-unique-numbers": 2
        }],
        4: [function (e, t, r) {
            var n, i;
            n = this, i = function (e, t) {
                "use strict";
                var r, n, i = (r = t.load, n = null, function () {
                    if (null !== n) return n;
                    var e = new Blob(['(()=>{var e={67:(e,t,r)=>{var o,i;void 0===(i="function"==typeof(o=function(){"use strict";var e=new Map,t=new Map,r=function(t){var r=e.get(t);if(void 0===r)throw new Error(\'There is no interval scheduled with the given id "\'.concat(t,\'".\'));clearTimeout(r),e.delete(t)},o=function(e){var r=t.get(e);if(void 0===r)throw new Error(\'There is no timeout scheduled with the given id "\'.concat(e,\'".\'));clearTimeout(r),t.delete(e)},i=function(e,t){var r,o=performance.now();return{expected:o+(r=e-Math.max(0,o-t)),remainingDelay:r}},n=function e(t,r,o,i){var n=performance.now();n>o?postMessage({id:null,method:"call",params:{timerId:r,timerType:i}}):t.set(r,setTimeout(e,o-n,t,r,o,i))},a=function(t,r,o){var a=i(t,o),s=a.expected,d=a.remainingDelay;e.set(r,setTimeout(n,d,e,r,s,"interval"))},s=function(e,r,o){var a=i(e,o),s=a.expected,d=a.remainingDelay;t.set(r,setTimeout(n,d,t,r,s,"timeout"))};addEventListener("message",(function(e){var t=e.data;try{if("clear"===t.method){var i=t.id,n=t.params,d=n.timerId,c=n.timerType;if("interval"===c)r(d),postMessage({error:null,id:i});else{if("timeout"!==c)throw new Error(\'The given type "\'.concat(c,\'" is not supported\'));o(d),postMessage({error:null,id:i})}}else{if("set"!==t.method)throw new Error(\'The given method "\'.concat(t.method,\'" is not supported\'));var u=t.params,l=u.delay,p=u.now,m=u.timerId,v=u.timerType;if("interval"===v)a(l,m,p);else{if("timeout"!==v)throw new Error(\'The given type "\'.concat(v,\'" is not supported\'));s(l,m,p)}}}catch(e){postMessage({error:{message:e.message},id:t.id,result:null})}}))})?o.call(t,r,t,e):o)||(e.exports=i)}},t={};function r(o){var i=t[o];if(void 0!==i)return i.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";r(67)})()})();'], {
                        type: "application/javascript; charset=utf-8"
                    }),
                        t = URL.createObjectURL(e);
                    return n = r(t), setTimeout(function () {
                        return URL.revokeObjectURL(t)
                    }), n
                }),
                    o = function e(t) {
                        return i().clearInterval(t)
                    },
                    a = function e(t) {
                        return i().clearTimeout(t)
                    },
                    s = function e(t, r) {
                        return i().setInterval(t, r)
                    },
                    u = function e(t, r) {
                        return i().setTimeout(t, r)
                    };
                e.clearInterval = o, e.clearTimeout = a, e.setInterval = s, e.setTimeout = u
            }, "object" == typeof r && void 0 !== t ? i(r, e("worker-timers-broker")) : "function" == typeof define && define.amd ? define(["exports", "worker-timers-broker"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).workerTimers = {}, n.workerTimersBroker)
        }, {
            "worker-timers-broker": 3
        }]
    }, {}, [1]);

    let Settings = {
        AutoSpike: {
            e: false,
            k: "Space",
            m: true,
            p: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"]
        },
    };

    window.Utils = {
        initUI: () => {
            let gui = new guify({
                title: "pew",
                theme: {
                    name: "loux",
                    colors: {
                        panelBackground: "rgb(0,0,0)",
                        componentBackground: "rgb(3, 16, 34)",
                        componentForeground: "rgb(62, 125, 215)",
                        textPrimary: "rgb(0, 255, 255)",
                        textSecondary: "rgb(255,255,255)",
                        textHover: "rgb(43, 16, 159)"
                    },
                    font: {
                        fontFamily: "Baloo Paaji",
                        fontSize: "20px",
                        fontWeight: "1"
                    }
                },
                align: "right",
                width: 550,
                barMode: "none",
                panelMode: "none",
                opacity: .6,
                root: document.body,
                open: false
            });

            gui.Register({
                type: "folder",
                label: "AutoSpike",
                open: false
            });

            gui.Register([{
                type: "button",
                label: "Set AutoSpike Key",
                action: data => {
                    Utils.controls.setKeyBind("AutoSpike")
                }
            }, {
                type: "display",
                label: "AutoSpike Key:",
                object: Settings.AutoSpike,
                property: "k"
            }, {
                type: "checkbox",
                label: "AutoSpike 2",
                object: Settings.AutoSpike,
                property: "m",
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "1",
                object: Settings.AutoSpike.p,
                property: "0",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "2",
                object: Settings.AutoSpike.p,
                property: "1",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "3",
                object: Settings.AutoSpike.p,
                property: "2",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "4",
                object: Settings.AutoSpike.p,
                property: "3",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "5",
                object: Settings.AutoSpike.p,
                property: "4",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "6",
                object: Settings.AutoSpike.p,
                property: "5",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "7",
                object: Settings.AutoSpike.p,
                property: "6",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }], {
                folder: "AutoSpike"
            });
        },
        controls: null,
        controller: class {
            setKeyBind(callback) {
                Settings[callback].k = "Press any key";
                let click = 0;
                document.addEventListener("keydown", function abc(event) {
                    click++;
                    if (click >= 1) {
                        if (event.code == "Escape") {
                            Settings[callback].k = "NONE"
                        } else {
                            Settings[callback].k = event.code
                        }
                        document.removeEventListener("keydown", abc);
                        Utils.saveSettings()
                    }
                })
            }
        },
        saveSettings: () => {
            for (let HACK in Settings) {
                localStorage.setItem(HACK + "loux", JSON.stringify(Settings[HACK]))
            }
        },
        loadSettings: () => {
            for (let HACK in Settings) {
                let data = localStorage.getItem(HACK + "loux");
                if (data) Settings[HACK] = JSON.parse(data)
            }
        },
        LoadHack: () => {
            window.Utils.loadSettings();
            Settings.AutoSpike.e = false;
            window.Utils.controls = new window.Utils.controller;
            let script = document.createElement("script");
            script.onload = function () {
                window.Utils.initUI()
            };
            script.src = "https://unpkg.com/guify@0.12.0/lib/guify.min.js";
            document.body.appendChild(script);
            setTimeout(() => {
                let mainFlakes = document.getElementById("snowflakeContainer");
                if (mainFlakes) {
                    mainFlakes.nextElementSibling.remove();
                    mainFlakes.previousElementSibling.remove();
                    for (let i = 0; i < mainFlakes.childNodes.length; i++) {
                        mainFlakes.childNodes[i].remove()
                    }
                    mainFlakes.remove()
                }
            }, 1e4)
        }
    };

    function LouxInterval() {
        if (ΔᐃⵠⲆ.ⵠΔᐃᐃ && ΔᐃⵠⲆ.ⵠΔᐃᐃ.readyState === 1 && Yw && Yw.ⵠⲆⵠᐃᐃ) {
            let myPlayer = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ];
            if (myPlayer) {
                if (Settings.AutoSpike.e) {
                    for (let i = 0, SpikeP = Settings.AutoSpike.p; i < SpikeP.length; i++) {
                        var CurrentSpike = SpikeP[i];
                        switch (CurrentSpike) {
                            case "Reidite Spike":
                                CurrentSpike = 213;
                                break;
                            case "Amethyst Spike":
                                CurrentSpike = 117;
                                break;
                            case "Diamond Spike":
                                CurrentSpike = 164;
                                break;
                            case "Gold Spike":
                                CurrentSpike = 163;
                                break;
                            case "Stone Spike":
                                CurrentSpike = 162;
                                break;
                            case "Wood Spike":
                                CurrentSpike = 154;
                                break;
                            case "Wood Wall":
                                CurrentSpike = 156;
                                break;
                            case "Nothing":
                                CurrentSpike = -1;
                                break
                        }
                        if (CurrentSpike === -1 || !Yw.ⵠᐃΔᐃ.ᐃⵠᐃ[CurrentSpike]) continue;
                        var spikeid = CurrentSpike;
                        break
                    }
                    if (spikeid) {
                        let PInumb = 2 * Math.PI;
                        let MYPLAYERANGLE = Math.floor((myPlayer.angle + PInumb) % PInumb * 255 / PInumb);
                        if (Settings.AutoSpike.m) {
                            for (let ang = 1; ang < 31; ang++) {
                                ΔᐃⵠⲆ.ⵠΔᐃᐃ.send(JSON.stringify([23, spikeid, (ang + MYPLAYERANGLE) % 255, 0]));
                                ΔᐃⵠⲆ.ⵠΔᐃᐃ.send(JSON.stringify([23, spikeid, (MYPLAYERANGLE - ang + 255) % 255, 0]))
                            }
                        }
                        ΔᐃⵠⲆ.ⵠΔᐃᐃ.send(JSON.stringify([23, spikeid, MYPLAYERANGLE, 0]))
                    }
                }
            }
        }
    }

    /*
    *********
    ***END***
    *********
    */

    gk = function () {
        Tu = re(He(13));
        Cc = Ki(Tu);
        if (Uu) {
            Uu();
        }

        let MainHackInterval;
        setTimeout(() => {
            MainHackInterval = workerTimers.setInterval(LouxInterval, 80)
        }, 7e3);

        window.Utils.LoadHack();
    };

    ⲆΔΔⵠⵠ = [];
    ⲆΔᐃᐃΔⲆᐃ = [];
    var Rc = [];
    function jc(a) {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        if (this.ⵠⵠΔ.ⲆᐃΔ) {
            if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ == 0) {
                this.ⵠⵠΔ.ⲆᐃΔ = Cr;
            }
            var b = mq * (Af * (1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * 600);
            var c = b * Math.sin(this.ⵠⵠΔ.angle - this.angle);
            var d = b * Math.cos(this.ⵠⵠΔ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        ᐃⵠ = ᐃΔ[a][Cf.time];
        ⵠᐃΔ = -ᐃⵠ.width;
        ⵠⲆⵠ = -ᐃⵠ.height;
        Mc(In, ᐃⵠ, -ⵠᐃΔ / 2 + c, -ⵠⲆⵠ / 2 + d, ⵠᐃΔ, ⵠⲆⵠ);
        In.restore();
    }
    function Gc() {
        In.save();
        var a = mq;
        if (Yw.ᐃΔᐃᐃ.ⲆⵠΔΔⲆ.x < 0.25) {
            In.globalAlpha = Yw.ᐃΔᐃᐃ.ⲆⲆⵠᐃΔΔⵠ.ΔⲆⲆ;
        }
        var b = Yw.ⵠᐃΔᐃ.ⵠᐃⲆⵠᐃ.length > 0 ? -70 : 0;
        if (Yw.ᐃᐃⲆΔ.open || Yw.ⲆᐃⲆΔⵠ.open && Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(109) != -1 || Yw.ⵠᐃⲆΔ.open && Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(134) != -1 || Yw.ⵠⲆΔᐃ.open && Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(109) != -1 || Yw.ⲆᐃⵠⲆⵠ.open && Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(180) != -1 || Yw.ᐃΔΔΔ.open && (Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(109) != -1 || Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(131) != -1)) {
            b -= mq * 50;
        }
        In.translate((Rn - mq * 950) / 2, b);
        In.fillStyle = "#69A148";
        In.fillRect(this.translate.x + mq * 37, this.translate.y + mq * 17, Yw.ᐃΔᐃᐃ.ⲆⵠΔΔⲆ.x * 178 * mq, mq * 18);
        In.globalAlpha = 1;
        if (Yw.ᐃΔᐃᐃ.ⵠⲆᐃΔΔΔⲆ.x < 0.35) {
            In.fillStyle = "#8F050A";
            In.globalAlpha = Yw.ᐃΔᐃᐃ.ΔΔⲆⲆΔⲆΔ.ΔⲆⲆ;
            In.fillRect(this.translate.x + mq * 277, this.translate.y + mq * 17, mq * 178, mq * 18);
            In.globalAlpha = 1;
        }
        In.fillStyle = "#AF352A";
        In.fillRect(this.translate.x + mq * 277, this.translate.y + mq * 17, Yw.ᐃΔᐃᐃ.ⵠⲆᐃΔΔΔⲆ.x * 178 * mq, mq * 18);
        if (Yw.ᐃΔᐃᐃ.ΔⲆᐃⵠᐃ.x < 0.35) {
            In.fillStyle = "#366B91";
            In.globalAlpha = Yw.ᐃΔᐃᐃ.ⵠⵠⵠΔΔᐃᐃ.ΔⲆⲆ;
            In.fillRect(this.translate.x + mq * 517, this.translate.y + mq * 17, mq * 178, mq * 18);
            In.globalAlpha = 1;
        }
        In.fillStyle = "#669BB1";
        In.fillRect(this.translate.x + mq * 517, this.translate.y + mq * 17, mq * (Yw.ᐃΔᐃᐃ.ΔⲆᐃⵠᐃ.x * 178), mq * 18);
        if (Yw.ᐃΔᐃᐃ.ΔⲆᐃⵠᐃ.x > 0.99) {
            if (Yw.ᐃΔᐃᐃ.ΔⵠΔⲆⵠ.x < 0.35) {
                In.fillStyle = "#6C4036";
                In.globalAlpha = Yw.ᐃΔᐃᐃ.ΔᐃΔᐃᐃΔΔ.ΔⲆⲆ;
                In.fillRect(this.translate.x + mq * 517, this.translate.y + mq * 17, mq * 178, mq * 18);
                In.globalAlpha = 1;
            }
            In.fillStyle = "#9C4036";
            In.fillRect(this.translate.x + mq * 517, this.translate.y + mq * 17, (1 - Yw.ᐃΔᐃᐃ.ΔⵠΔⲆⵠ.x) * 178 * mq, mq * 18);
        }
        if (Yw.ᐃΔᐃᐃ.ᐃΔⲆΔⲆⲆΔ.x < 0.35) {
            In.fillStyle = "#001A57";
            In.globalAlpha = Yw.ᐃΔᐃᐃ.ⵠⵠⵠΔⵠⲆⲆ.ΔⲆⲆ;
            In.fillRect(this.translate.x + mq * 757, this.translate.y + mq * 17, mq * 178, mq * 18);
            In.globalAlpha = 1;
        }
        In.fillStyle = "#074A87";
        In.fillRect(this.translate.x + mq * 757, this.translate.y + mq * 17, Yw.ᐃΔᐃᐃ.ᐃΔⲆΔⲆⲆΔ.x * 178 * mq, mq * 18);
        mq = a;
        Mc(In, this.ᐃⵠ, this.translate.x, this.translate.y);
        this.y = this.translate.y + b;
        In.restore();
        if (Yw.ᐃΔᐃᐃ.ⵠΔⲆΔΔⲆΔ.x < 0.99) {
            var c = Math.floor(jq - ᐃΔ[608].width / 2);
            b += this.translate.y - ᐃΔ[608].height - mq * 5;
            In.fillStyle = "#BBE8EF";
            In.fillRect(c + 5, b + mq * 5, Yw.ᐃΔᐃᐃ.ⵠΔⲆΔΔⲆΔ.x * (mq * 588), mq * 10);
            if (Yw.ᐃΔᐃᐃ.ⵠΔⲆΔΔⲆΔ.x < 0.35) {
                In.fillStyle = "#9BA8AF";
                In.globalAlpha = Yw.ᐃΔᐃᐃ.ΔΔΔⵠᐃΔⲆ.ΔⲆⲆ;
                In.fillRect(c + 5, b + 5, mq * 588, mq * 10);
                In.globalAlpha = 1;
            }
            Mc(In, ᐃΔ[608], c, b);
            this.y = b;
        }
    }
    function Wc(a) {
        if ((a = a / 100) <= 0.95) {
            In.save();
            In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
            In.rotate(this.angle);
            if (this.ⵠⵠΔ.ⲆᐃΔ) {
                if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && pl == this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ) {
                    this.ⵠⵠΔ.ⲆᐃΔ = false;
                }
                var b = mq * ((1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * Af * 600);
                var c = b * Math.sin(this.ⵠⵠΔ.angle - this.angle);
                var d = b * Math.cos(this.ⵠⵠΔ.angle - this.angle);
            } else {
                c = 0;
                d = 0;
            }
            In.globalAlpha = 0.5;
            At(In, c, d, mq * 28, a);
            vt(In, null, "#000000", mq * 18);
            In.globalAlpha = 1;
            At(In, c, d, mq * 28, a);
            vt(In, null, nr.ᐃⲆᐃⵠⲆⲆⵠ[Cf.time], mq * 6);
            In.restore();
        }
    }
    function Lc(a) {
        if ((a = a / 100) <= 0.8) {
            In.save();
            In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
            In.rotate(this.angle);
            if (this.ⵠⵠΔ.ⲆᐃΔ) {
                if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ == pn) {
                    this.ⵠⵠΔ.ⲆᐃΔ = false;
                }
                var b = Af * (1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * 600 * mq;
                var c = Math.sin(this.ⵠⵠΔ.angle - this.angle) * b;
                var d = Math.cos(this.ⵠⵠΔ.angle - this.angle) * b;
            } else {
                c = 0;
                d = 0;
            }
            In.globalAlpha = 0.5;
            At(In, c, d, mq * 18, a);
            vt(In, null, "#000000", mq * 18);
            In.globalAlpha = 1;
            At(In, c, d, mq * 18, a);
            vt(In, null, nr.ⵠⲆⲆΔΔΔⵠ[Cf.time], mq * 6);
            In.restore();
        }
    }
    function Oc() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        ᐃⵠ = ᐃΔ[848][Cf.time];
        ⵠᐃΔ = -ᐃⵠ.width;
        ⵠⲆⵠ = -ᐃⵠ.height;
        Mc(In, ᐃⵠ, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
        In.restore();
    }
    function Nc(b) {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        if (this.ⵠⵠΔ.ⲆᐃΔ) {
            if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ == 0) {
                this.ⵠⵠΔ.ⲆᐃΔ = false;
            }
            var c = (1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * Af * 600 * mq;
            var d = Math.sin(this.ⵠⵠΔ.angle - this.angle) * c;
            var e = Math.cos(this.ⵠⵠΔ.angle - this.angle) * c;
        } else {
            d = 0;
            e = 0;
        }
        var f = ᐃΔ[853].length;
        ᐃⵠ = ᐃΔ[853][(this.ΔⵠᐃΔ + this.ⲆΔ % 2) % f][Cf.time];
        ⵠᐃΔ = -ᐃⵠ.width;
        ⵠⲆⵠ = -ᐃⵠ.height;
        var g = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ];
        if (g && (this.ⲆⵠΔⵠ === Yw.id || Yw.ᐃΔΔⲆⵠΔⲆ(this.ⲆⵠΔⵠ))) {
            if (ΔⲆⲆⵠ.ᐃⲆⵠΔ(this, g) < 550) {
                this.opacity = Math.max(this.opacity - Af, 0.3);
            } else {
                this.opacity = Math.min(this.opacity + Af, 1);
            }
        } else if (g && ΔⲆⲆⵠ.ᐃⲆⵠΔ(this, Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ]) < 150) {
            this.opacity = Math.max(this.opacity - Af, 0.3);
        } else {
            this.opacity = Math.min(this.opacity + Af, 1);
        }
        var a = In.globalAlpha;
        In.globalAlpha *= this.opacity;
        Mc(In, ᐃⵠ, -ⵠᐃΔ / 2 + d, -ⵠⲆⵠ / 2 + e, ⵠᐃΔ, ⵠⲆⵠ);
        In.globalAlpha = a;
        In.restore();
    }
    function Hc() {
        var a = Cf.ⲆⲆⵠᐃⵠ;
        var b = ᐃΔ[725][Cf.time];
        Mc(In, b, a.translate.x, a.translate.y);
        In.save();
        In.translate(a.translate.x + b.width / 2, a.translate.y + b.height / 2);
        Cf.ⲆⲆⵠᐃⵠ.now = (new Date().getTime() - a.ⵠΔⵠⲆⲆ + a.ΔⵠⵠⲆⲆ) % qw.ⵠᐃⵠ;
        var c = Math.PI * 2 * Cf.ⲆⲆⵠᐃⵠ.now / qw.ⵠᐃⵠ - Math.PI / 2;
        In.rotate(c);
        Mc(In, ᐃΔ[726], -b.width / 2, -b.height / 2);
        In.restore();
    }
    function qc() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        ᐃⵠ = ᐃΔ[837][Cf.time];
        ⵠᐃΔ = -ᐃⵠ.width;
        ⵠⲆⵠ = -ᐃⵠ.height;
        Mc(In, ᐃⵠ, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
        In.restore();
    }
    function Uc() {
        var a = Yw.ⵠᐃΔⵠⵠ;
        if (a.wait) {
            var b = a.timeout.ⲆᐃΔ();
            In.save();
            var c = ᐃΔ[794];
            In.translate(c.width - mq * 12, $w.ᐃΔᐃᐃ.translate.y - mq * 190);
            var d = -c.width / 2 + 9;
            var e = -c.height / 2 - 4;
            Mc(In, c, d, e);
            In.beginPath();
            In.lineWidth = mq * 5;
            In.strokeStyle = nr.ᐃᐃΔΔΔᐃⲆ[Cf.time];
            In.lineCap = "round";
            In.arc(9, e + c.height / 2, mq * 25, 0, a.timeout.ΔⲆⲆ * (Math.PI * 2));
            In.stroke();
            In.restore();
            if (b) {
                a.wait = mg;
                a.timeout.ΔⲆⲆ = 0;
                a.timeout.ⵠⲆᐃ = gn;
            }
        }
    }
    function Yc() {
        var a = Yw.ᐃᐃᐃⲆᐃ;
        if (a.wait) {
            var b = a.timeout.ⲆᐃΔ();
            In.save();
            var c = ᐃΔ[537];
            In.translate(c.width - mq * 2, $w.ᐃΔᐃᐃ.translate.y - mq * 60);
            var d = -c.width / 2 - 2;
            var e = -c.height / 2 - 4;
            Mc(In, c, d, e);
            In.beginPath();
            In.lineWidth = mq * 5;
            In.strokeStyle = nr.ⲆΔⲆᐃΔᐃᐃ[Cf.time];
            In.lineCap = "round";
            In.arc(0, e + c.height / 2, mq * 25, 0, a.timeout.ΔⲆⲆ * (Math.PI * 2));
            In.stroke();
            In.restore();
            if (b) {
                a.wait = false;
                a.timeout.ΔⲆⲆ = 0;
                a.timeout.ⵠⲆᐃ = false;
            }
        }
    }
    function Kc(b) {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        if (this.ⵠⵠΔ.ⲆᐃΔ) {
            if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ == 0) {
                this.ⵠⵠΔ.ⲆᐃΔ = false;
            }
            var c = mq * (Af * (1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * 600);
            var d = c * Math.sin(this.ⵠⵠΔ.angle - this.angle);
            var e = c * Math.cos(this.ⵠⵠΔ.angle - this.angle);
        } else {
            d = 0;
            e = 0;
        }
        if (b === 913 && !Cf.transition) {
            var f = 0;
            for (var g = Cf.Δᐃⵠ[tw.ⵠᐃᐃⵠΔ], a = 0; g.length > a; a++) {
                var h = ΔⲆⲆⵠ.ᐃⲆⵠΔ(g[a], this);
                if (h < 140 && h > 35) {
                    f = 0;
                    break;
                }
                if (h <= 35) {
                    f = 1;
                }
            }
            this.opacity = f === 0 ? Math.max(0.5, this.opacity - Af / 1.5) : Math.min(1, this.opacity + Af / 1.5);
            In.globalAlpha = this.opacity;
        }
        ᐃⵠ = ᐃΔ[b][Cf.time];
        ⵠᐃΔ = -ᐃⵠ.width;
        ⵠⲆⵠ = -ᐃⵠ.height;
        Mc(In, ᐃⵠ, -ⵠᐃΔ / 2 + d, -ⵠⲆⵠ / 2 + e, ⵠᐃΔ, ⵠⲆⵠ);
        In.globalAlpha = 1;
        In.restore();
    }
    function Vc() {
        var a = Yw.ⲆΔⵠΔΔ;
        if (a.wait) {
            var b = a.timeout.ⲆᐃΔ();
            In.save();
            var c = ᐃΔ[792];
            In.translate(c.width - mq * 2, $w.ᐃΔᐃᐃ.translate.y - mq * 125);
            var d = -c.width / 2 + 10;
            var e = -c.height / 2 - 4;
            Mc(In, c, d, e);
            In.beginPath();
            In.lineWidth = mq * 5;
            In.strokeStyle = nr.ᐃᐃΔΔΔᐃⲆ[Cf.time];
            In.lineCap = "round";
            In.arc(9, e + c.height / 2, mq * 25, 0, Math.PI * 2 * a.timeout.ΔⲆⲆ);
            In.stroke();
            In.restore();
            if (b) {
                a.wait = false;
                a.timeout.ΔⲆⲆ = 0;
                a.timeout.ⵠⲆᐃ = false;
            }
        }
    }
    function Xc() {
        var a = -8;
        if (Yw.ᐃⲆᐃΔᐃ.enabled) {
            var b = ᐃΔ[546];
            Mc(In, b, Yw.ᐃⲆᐃΔᐃ.translate.x, Yw.ᐃⲆᐃΔᐃ.translate.y + a);
            a += 70;
        }
        if (Yw.ᐃΔΔⵠⲆᐃᐃ === 1) {
            b = ᐃΔ[549];
            Mc(In, b, Yw.ᐃⲆᐃΔᐃ.translate.x, Yw.ᐃⲆᐃΔᐃ.translate.y + a);
            a += 70;
        } else if (Yw.ᐃΔᐃᐃ.ΔⲆᐃⵠᐃ.x < 0.25 || Yw.ᐃΔᐃᐃ.ⵠⲆᐃΔΔΔⲆ.x < 0.25 || Yw.ᐃΔᐃᐃ.ᐃΔⲆΔⲆⲆΔ.x < 0.25 || Yw.ᐃΔᐃᐃ.ⵠΔⲆΔΔⲆΔ.x < 0.25 || Yw.ᐃΔᐃᐃ.ΔⵠΔⲆⵠ.x < 0.25) {
            b = ᐃΔ[548];
            Mc(In, b, Yw.ᐃⲆᐃΔᐃ.translate.x, Yw.ᐃⲆᐃΔᐃ.translate.y + a);
            a += 70;
        }
        if (Yw.ⵠⲆⲆⵠⲆ > 0) {
            b = ᐃΔ[547];
            Mc(In, b, Yw.ᐃⲆᐃΔᐃ.translate.x, Yw.ᐃⲆᐃΔᐃ.translate.y + a);
            var c = Rc[Yw.ⵠⲆⲆⵠⲆ];
            if (c === undefined) {
                c = Dd(mq, Yw.ⵠⲆⲆⵠⲆ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6);
                Rc[Yw.ⵠⲆⲆⵠⲆ] = c;
            }
            if (Yw.ⵠⲆⲆⵠⲆ < 9) {
                Mc(In, c, Yw.ᐃⲆᐃΔᐃ.translate.x - 39, Yw.ᐃⲆᐃΔᐃ.translate.y + a + 20);
            } else {
                Mc(In, c, Yw.ᐃⲆᐃΔᐃ.translate.x - 46, Yw.ᐃⲆᐃΔᐃ.translate.y + a + 20);
            }
        }
    }
    function Zc(a) {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        if (this.ⵠⵠΔ.ⲆᐃΔ) {
            if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ == 0) {
                this.ⵠⵠΔ.ⲆᐃΔ = Cr;
            }
            var b = Af * (1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * 600 * mq;
            var c = b * Math.sin(this.ⵠⵠΔ.angle - this.angle);
            var d = Math.cos(this.ⵠⵠΔ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        if (this.ᐃΔΔⲆΔ.ⲆᐃΔ()) {
            this.color += 0.2 + Math.random() * 0.3;
        }
        ᐃⵠ = ᐃΔ[872][Math.floor(this.id + this.color) % 5][Cf.time];
        ⵠᐃΔ = this.ᐃΔΔⲆΔ.ΔⲆⲆ * -ᐃⵠ.width;
        ⵠⲆⵠ = -ᐃⵠ.height * this.ᐃΔΔⲆΔ.ΔⲆⲆ;
        Mc(In, ᐃⵠ, -ⵠᐃΔ / 2 + c, -ⵠⲆⵠ / 2 + d, ⵠᐃΔ, ⵠⲆⵠ);
        In.restore();
    }
    function $c() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        ᐃⵠ = ᐃΔ[811][Cf.time];
        ⵠᐃΔ = -ᐃⵠ.width;
        ⵠⲆⵠ = -ᐃⵠ.height;
        Mc(In, ᐃⵠ, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
        In.restore();
    }
    function ep() {
        var a = Yw.ⲆⵠᐃΔ;
        if (a.ⲆⵠⵠⲆⵠ) {
            var b = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ];
            In.save();
            In.translate(Yw.ᐃⵠⵠ.x + b.x, Yw.ᐃⵠⵠ.y + b.y);
            var c = ᐃΔ[324];
            var d = -c.width / 2;
            var e = -c.height / 2 - mq * 125;
            Mc(In, c, d, e);
            In.beginPath();
            In.lineWidth = mq * 5;
            In.strokeStyle = nr.ᐃⲆᐃⵠⲆⲆⵠ[Cf.time];
            In.lineCap = "round";
            In.arc(0, e + c.height / 2, mq * 25, 0, a.timeout.ΔⲆⲆ * (Math.PI * 2));
            In.stroke();
            In.restore();
        }
    }
    function ip() {
        for (var b = Yw.ⵠᐃΔᐃ, c = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ], d = 0; b.ⵠᐃⲆⵠᐃ.length > d; d++) {
            var e = b.ⵠᐃⲆⵠᐃ[d];
            var f = false;
            if ((c = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ]) && (e.id == c.right || c.ᐃΔΔᐃⲆ == e.id && c.ᐃΔΔᐃⲆ > 0)) {
                f = Fl;
                Mc(In, e.info.ᐃⵠ[2], e.info.translate.x, e.info.translate.y, e.info.width, e.info.height);
            } else {
                e.ⵠⵠΔΔ(In);
            }
            var g = Yw.ⵠᐃΔᐃ.ᐃⵠᐃ[e.id];
            if (g > 1) {
                _c(g, e);
            }
            if (g > 0) {
                Bc(d, e, f);
            }
            var h = Yw.ᐃᐃⲆΔ;
            if (h.open && (h.id < 0 || h.id == e.id) && (!h.lock || Yw.id == h.ⲆⵠΔⵠ)) {
                $w.ΔΔΔΔⵠ[e.id].ⵠⵠΔΔ(In);
            }
            if (Yw.ⲆᐃⲆΔⵠ.open && e.id == 109) {
                $w.ΔΔΔΔⵠ[e.id].ⵠⵠΔΔ(In);
            }
            if (Yw.ⲆᐃⵠⲆⵠ.open && e.id == 180) {
                $w.ΔΔΔΔⵠ[e.id].ⵠⵠΔΔ(In);
            }
            if (Yw.ⵠᐃⲆΔ.open && e.id == 134) {
                $w.ΔΔΔΔⵠ[e.id].ⵠⵠΔΔ(In);
            }
            if (Yw.ⵠⲆΔᐃ.open && e.id == 109) {
                $w.ΔΔΔΔⵠ[e.id].ⵠⵠΔΔ(In);
            }
            if (!!Yw.ᐃΔΔΔ.open && (e.id == 109 || e.id == 131)) {
                $w.ΔΔΔΔⵠ[e.id].ⵠⵠΔΔ(In);
            }
        }
        if (e && b.max > d) {
            var j = ᐃΔ[334][2];
            ᐃᐃ = e.info.translate.x;
            Ⲇᐃᐃ = e.info.translate.y;
            ΔⵠᐃΔ = 1;
            for (; d < b.max; d++, ΔⵠᐃΔ++) {
                Mc(In, j, ᐃᐃ + (j.width + 5) * ΔⵠᐃΔ, Ⲇᐃᐃ);
            }
        }
    }
    function tp(a) {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        if (this.ⵠⵠΔ.ⲆᐃΔ) {
            if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ == Gj) {
                this.ⵠⵠΔ.ⲆᐃΔ = ij;
            }
            var b = mq * (Af * (1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * 600);
            var c = b * Math.sin(this.ⵠⵠΔ.angle - this.angle);
            var d = Math.cos(this.ⵠⵠΔ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        var e = ᐃΔ[a][Cf.time];
        ⵠᐃΔ = -e.width;
        ⵠⲆⵠ = -e.height;
        Mc(In, e, -ⵠᐃΔ / 2 + c, -ⵠⲆⵠ / 2 + d, ⵠᐃΔ, ⵠⲆⵠ);
        In.restore();
    }
    function np() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        if (this.ⵠⵠΔ.ⲆᐃΔ) {
            if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && pn == this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ) {
                this.ⵠⵠΔ.ⲆᐃΔ = ql;
            }
            var a = (1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * Af * 600 * mq;
            var b = Math.sin(this.ⵠⵠΔ.angle - this.angle) * a;
            var c = a * Math.cos(this.ⵠⵠΔ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        ᐃⵠ = ᐃΔ[167][Cf.time];
        ⵠᐃΔ = -ᐃⵠ.width;
        ⵠⲆⵠ = -ᐃⵠ.height;
        Mc(In, ᐃⵠ, -ⵠᐃΔ / 2 + b, -ⵠⲆⵠ / 2 + c, ⵠᐃΔ, ⵠⲆⵠ);
        if (this.lock) {
            ᐃⵠ = ᐃΔ[148][Cf.time];
            ⵠᐃΔ = -ᐃⵠ.width;
            ⵠⲆⵠ = -ᐃⵠ.height;
            Mc(In, ᐃⵠ, -ⵠᐃΔ / 2 + b - mq * 1, -ⵠⲆⵠ / 2 + c, ⵠᐃΔ, ⵠⲆⵠ);
        }
        In.restore();
    }
    function op() {
        var b = Yw.ⲆⵠᐃΔ;
        if (!b.ⲆⵠⵠⲆⵠ && b.ΔⵠⲆᐃ > 0) {
            var c = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ];
            if (!c) {
                return;
            }
            In.save();
            if (vr[b.ΔⵠⲆᐃ].ΔᐃᐃⲆ === 0 && b.mode === 0) {
                In.translate(Yw.ᐃⵠⵠ.x + c.x, Yw.ᐃⵠⵠ.y + c.y);
                In.rotate(c.angle);
                In.translate(120, 0);
            } else {
                var d = Math.floor(c.x + Math.sin(c.angle) * 120);
                var e = Math.floor(c.y + Math.cos(c.angle) * 120);
                d = Yw.ᐃⵠⵠ.x + (d - d % 100 + 50);
                e = Yw.ᐃⵠⵠ.y + (e - e % 100 + 50);
                In.translate(d, e);
            }
            var f = ᐃΔ[b.ΔⵠⲆᐃ][Cf.time];
            In.globalAlpha = 0.5;
            Mc(In, f, -f.width / 2, -f.height / 2);
            In.globalAlpha = 1;
            In.restore();
            if (vr[b.ΔⵠⲆᐃ].ΔᐃᐃⲆ === 0) {
                if (!b.label[b.mode]) {
                    if (b.mode === 0) {
                        b.label[0] = Dd(mq, Xg[336], 20, "#e2c340");
                    } else {
                        b.label[1] = Dd(mq, Xg[337], 20, "#e2c340");
                    }
                }
                f = b.label[b.mode];
                Mc(In, f, jq + -f.width / 2, $w.ᐃΔᐃᐃ.y - 26);
            }
        }
        if (b.ⲆⵠⵠⲆⵠ) {
            var g = b.timeout.ⲆᐃΔ();
            for (var a = 0; b.ⵠᐃⵠᐃᐃ.length > a; a++) {
                var i = b.ⵠᐃⵠᐃᐃ[a];
                if (b.id == i.id) {
                    var j = mq * 42;
                    var k = mq * 17;
                    wt(In, i.info.translate.x, i.info.translate.y + j * (1 - b.timeout.ΔⲆⲆ), i.info.width, b.timeout.ΔⲆⲆ * j + k, mq * 10);
                    In.fillStyle = "#55B973";
                    In.fill();
                    In.globalAlpha = 0.8;
                    i.ⵠⵠΔΔ(In);
                } else {
                    In.globalAlpha = 0.5;
                    i.ⵠⵠΔΔ(In);
                }
                In.globalAlpha = 1;
            }
            if (g) {
                b.ⲆⵠⵠⲆⵠ = gn;
                b.timeout.ΔⲆⲆ = 0;
                b.timeout.ⵠⲆᐃ = false;
            }
            return us;
        }
        for (a = 0; a < b.ⵠᐃⵠᐃᐃ.length; a++) {
            b.ⵠᐃⵠᐃᐃ[a].ⵠⵠΔΔ(In);
        }
        return tr;
    }
    function ap() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        ᐃⵠ = ᐃΔ[239][Cf.time];
        ⵠᐃΔ = -ᐃⵠ.width;
        ⵠⲆⵠ = -ᐃⵠ.height;
        Mc(In, ᐃⵠ, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
        In.restore();
    }
    function rp() {
        var b = Yw.ΔᐃᐃΔΔ;
        if (b.wait) {
            var c = b.timeout.ⲆᐃΔ();
            In.save();
            var d = ᐃΔ[562];
            var e = ᐃΔ[537].height + mq * 25;
            In.translate(d.width, $w.ᐃΔᐃᐃ.translate.y - mq * 188 - e);
            var f = -d.width / 2 - 2;
            var g = -d.height / 2 - 4;
            Mc(In, d, f + 2, g);
            In.beginPath();
            In.lineWidth = mq * 5;
            In.strokeStyle = nr.ⲆΔⲆᐃΔᐃᐃ[Cf.time];
            In.lineCap = "round";
            In.arc(0, g + d.height / 2, mq * 25, 0, b.timeout.ΔⲆⲆ * (Math.PI * 2));
            In.stroke();
            In.restore();
            if (c) {
                b.wait = false;
                b.timeout.ΔⲆⲆ = 0;
                b.timeout.ⵠⲆᐃ = false;
            }
        }
    }
    function sp() {
        var b = Yw.ⵠΔΔΔⵠ;
        var c = $w.ΔΔΔΔ;
        if (b.ⲆᐃΔ) {
            b.ⲆᐃΔ = false;
            var d = b.ᐃⵠΔΔⵠ;
            var e = c.Ⲇᐃ.width;
            var f = c.Ⲇᐃ.height;
            var g = c.ᐃ;
            var a = Cf.ΔᐃᐃΔ;
            var i = false;
            g.clearRect(0, 0, e, f);
            g.drawImage(c.ᐃⵠ, 0, 0);
            for (var j = 0; d.length > j; j++) {
                var k = a[d[j]];
                if ((Cf.mode !== qw.ⲆΔⲆΔⲆΔΔ || k.Δᐃⵠⵠᐃ !== "spectator") && (Cf.mode !== qw.ΔⲆᐃⵠⵠ || qw.ⲆⵠΔΔΔᐃΔ !== k.ᐃᐃᐃⵠ)) {
                    if (Yw.id == d[j]) {
                        i = true;
                        if (Cf.mode === qw.ⵠΔᐃΔⵠ && qw.ΔᐃᐃⵠᐃᐃΔ === k.ᐃᐃᐃⵠ) {
                            ᐃⲆ = "#FF0000";
                        } else {
                            ᐃⲆ = "#FFF";
                        }
                    } else if (qw.ⵠΔᐃΔⵠ === Cf.mode && qw.ΔᐃᐃⵠᐃᐃΔ === k.ᐃᐃᐃⵠ) {
                        ᐃⲆ = "#990000";
                    } else {
                        ᐃⲆ = "#A1BDCD";
                    }
                    g.drawImage(Dd(mq, "" + (j + 1), mq * 15, ᐃⲆ), mq * 20, mq * (40 + j * 22));
                    k.ⲆⲆⲆᐃΔⵠⵠ ||= Dd(mq, k.Δᐃⵠⵠᐃ, mq * 15, ᐃⲆ, zr, undefined, undefined, As, mq * 110);
                    g.drawImage(k.ⲆⲆⲆᐃΔⵠⵠ, mq * 39, mq * (40 + j * 22));
                    g.drawImage(Dd(mq, ΔⲆⲆⵠ.ᐃΔⲆᐃΔᐃⵠ(k.ⵠⵠᐃΔⵠ), mq * 15, ᐃⲆ), mq * 156, (40 + j * 22) * mq);
                }
            }
            if (!i) {
                if (Cf.mode === qw.ⲆⵠΔⲆⵠ || qw.ⵠΔᐃΔⵠ === Cf.mode || qw.ⵠΔⵠⲆᐃ === Cf.mode || qw.ⵠᐃΔⵠΔᐃΔ === Cf.mode || qw.ⵠᐃΔΔΔ === Cf.mode || qw.ⲆΔⲆΔⲆΔΔ === Cf.mode && !Yw.ΔⵠΔⲆΔⵠΔ || qw.ΔⲆᐃⵠⵠ === Cf.mode && !Yw.ᐃᐃⲆⵠᐃ) {
                    g.drawImage(ᐃΔ[306], mq * 15, mq * (46 + j * 22));
                    g.drawImage(Dd(mq, ΔⲆⲆⵠ.ᐃΔⲆᐃΔᐃⵠ(Cf.ΔᐃᐃΔ[Yw.id].ⵠⵠᐃΔⵠ), mq * 15, "#FFF"), mq * 100, mq * (46 + j * 22));
                }
            }
        }
        Mc(In, c.Ⲇᐃ, c.translate.x, c.translate.y);
    }
    function hp() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        ᐃⵠ = ᐃΔ[321][Cf.time];
        ⵠᐃΔ = -ᐃⵠ.width;
        ⵠⲆⵠ = -ᐃⵠ.height;
        Mc(In, ᐃⵠ, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
        In.restore();
    }
    var lp = 0;
    function Vu(b) {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        this.ⵠⲆⵠΔ.ⲆᐃΔ();
        In.globalAlpha = 0.3;
        var c = ᐃΔ[282][Cf.time];
        var d = -c.width * this.ⵠⲆⵠΔ.ΔⲆⲆ;
        var e = -c.height * this.ⵠⲆⵠΔ.ΔⲆⲆ;
        Mc(In, c, -d / 2, -e / 2, d, e);
        In.globalAlpha = 1;
        if (this.ⵠⵠΔ.ⲆᐃΔ) {
            if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ == lj) {
                this.ⵠⵠΔ.ⲆᐃΔ = false;
            }
            var f = mq * (Af * (1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * 600);
            var g = f * Math.sin(this.ⵠⵠΔ.angle - this.angle);
            var h = f * Math.cos(this.ⵠⵠΔ.angle - this.angle);
        } else {
            g = 0;
            h = 0;
        }
        c = ᐃΔ[b][Cf.time];
        Mc(In, c, -c.width / 2 + g, -c.height / 2 + h);
        In.restore();
    }
    function up() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        if (ΔⲆⲆⵠ.ᐃⲆⵠΔ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + Af / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - Af, 1);
        }
        this.ⲆᐃᐃΔ.ⲆᐃΔ();
        this.rotate.ⲆᐃΔ();
        a = ᐃΔ[449][Cf.time];
        ⵠᐃΔ = this.scale * (this.ⲆᐃᐃΔ.ΔⲆⲆ * -a.width);
        ⵠⲆⵠ = this.scale * (this.ⲆᐃᐃΔ.ΔⲆⲆ * -a.height);
        Mc(In, a, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
        if (this.action & kw.ⵠⲆΔⵠ) {
            if (this.ⵠⵠΔ.ⲆᐃΔ() && gn == this.ⵠⵠΔ.ⵠⲆᐃ) {
                this.action -= kw.ⵠⲆΔⵠ;
            }
            In.globalAlpha = 0.6 - this.ⵠⵠΔ.ΔⲆⲆ;
            var a = ᐃΔ[463];
            Mc(In, a, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
            In.globalAlpha = 1;
        }
        a = ᐃΔ[451][Cf.time];
        ⵠᐃΔ = this.ⲆᐃᐃΔ.ΔⲆⲆ * -a.width * this.scale;
        ⵠⲆⵠ = -a.height * this.ⲆᐃᐃΔ.ΔⲆⲆ * this.scale;
        In.save();
        In.translate(mq * -30, mq * 70);
        In.rotate(this.rotate.ΔⲆⲆ);
        Mc(In, a, mq * -10, mq * -40, ⵠᐃΔ, ⵠⲆⵠ);
        if (this.action & kw.ⵠⲆΔⵠ) {
            In.globalAlpha = 0.6 - this.ⵠⵠΔ.ΔⲆⲆ;
            a = ᐃΔ[466];
            Mc(In, a, mq * -10, mq * -40, ⵠᐃΔ, ⵠⲆⵠ);
            In.globalAlpha = 1;
        }
        In.restore();
        a = ᐃΔ[452][Cf.time];
        In.save();
        In.translate(mq * 30, mq * 70);
        In.rotate(-this.rotate.ΔⲆⲆ);
        Mc(In, a, mq * 10 - ⵠᐃΔ, mq * -40, ⵠᐃΔ, ⵠⲆⵠ);
        if (this.action & kw.ⵠⲆΔⵠ) {
            In.globalAlpha = 0.6 - this.ⵠⵠΔ.ΔⲆⲆ;
            a = ᐃΔ[467];
            Mc(In, a, mq * 10 - ⵠᐃΔ, mq * -40, ⵠᐃΔ, ⵠⲆⵠ);
            In.globalAlpha = 1;
        }
        In.restore();
        In.restore();
    }
    function bp() {
        var a = Math.PI / 2;
        var b = Math.PI / 4;
        this.ⲆᐃᐃΔ.ⲆᐃΔ();
        this.ⵠⵠⲆⵠᐃᐃⲆ.ⲆᐃΔ();
        this.ᐃᐃΔⵠⲆΔⲆ.ⲆᐃΔ();
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        c = this.info === 0 ? ᐃΔ[231][Cf.time] : ᐃΔ[1053][Cf.time];
        ⵠᐃΔ = this.ⲆᐃᐃΔ.ΔⲆⲆ * -c.width;
        ⵠⲆⵠ = -c.height * this.ⲆᐃᐃΔ.ΔⲆⲆ;
        Mc(In, c, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
        if (this.action & kw.ⵠⲆΔⵠ) {
            if (this.ⵠⵠΔ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠⲆᐃ == 0) {
                this.action -= kw.ⵠⲆΔⵠ;
            }
            In.globalAlpha = 0.6 - this.ⵠⵠΔ.ΔⲆⲆ;
            var c = ᐃΔ[1056];
            Mc(In, c, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
            In.globalAlpha = 1;
        }
        if (this.action & kw.ⲆΔΔⵠΔ) {
            if (this.ⵠⵠⵠⲆᐃ.ⲆᐃΔ() && this.ⵠⵠⵠⲆᐃ.ⵠⲆᐃ == 0) {
                this.action -= kw.ⲆΔΔⵠΔ;
            }
            In.globalAlpha = 0.6 - this.ⵠⵠⵠⲆᐃ.ΔⲆⲆ;
            c = ᐃΔ[1065];
            Mc(In, c, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
            In.globalAlpha = 1;
        }
        In.restore();
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle + b);
        In.translate(100, 0);
        In.rotate(a);
        c = this.info === 0 ? ᐃΔ[1060][Cf.time] : ᐃΔ[1059][Cf.time];
        ⵠᐃΔ = -c.width * this.ⵠⵠⲆⵠᐃᐃⲆ.ΔⲆⲆ;
        ⵠⲆⵠ = -c.height * this.ⵠⵠⲆⵠᐃᐃⲆ.ΔⲆⲆ;
        Mc(In, c, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
        if (this.action & kw.ⵠⲆΔⵠ) {
            In.globalAlpha = 0.6 - this.ⵠⵠΔ.ΔⲆⲆ;
            c = ᐃΔ[1057];
            Mc(In, c, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
            In.globalAlpha = 1;
        }
        if (this.action & kw.ⲆΔΔⵠΔ) {
            In.globalAlpha = 0.6 - this.ⵠⵠⵠⲆᐃ.ΔⲆⲆ;
            c = ᐃΔ[1066];
            Mc(In, c, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
            In.globalAlpha = 1;
        }
        In.restore();
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle + a + b);
        In.translate(100, 0);
        In.rotate(a);
        c = this.info === 0 ? ᐃΔ[1063][Cf.time] : ᐃΔ[1062][Cf.time];
        ⵠᐃΔ = this.ᐃᐃΔⵠⲆΔⲆ.ΔⲆⲆ * -c.width;
        ⵠⲆⵠ = -c.height * this.ᐃᐃΔⵠⲆΔⲆ.ΔⲆⲆ;
        Mc(In, c, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
        if (this.action & kw.ⵠⲆΔⵠ) {
            In.globalAlpha = 0.6 - this.ⵠⵠΔ.ΔⲆⲆ;
            c = ᐃΔ[1058];
            Mc(In, c, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
            In.globalAlpha = 1;
        }
        if (this.action & kw.ⲆΔΔⵠΔ) {
            In.globalAlpha = 0.6 - this.ⵠⵠⵠⲆᐃ.ΔⲆⲆ;
            c = ᐃΔ[1067];
            Mc(In, c, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
            In.globalAlpha = 1;
        }
        In.restore();
    }
    function dp() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        this.ΔᐃᐃᐃΔⲆⵠ = Math.min(1, this.ΔᐃᐃᐃΔⲆⵠ + Af * 2);
        In.globalAlpha = Math.min(1, Math.max(0, ΔⲆⲆⵠ.ᐃⲆⵠΔ(this, this.r) / 80)) * this.ΔᐃᐃᐃΔⲆⵠ;
        this.ⲆᐃᐃΔ.ⲆᐃΔ();
        ᐃⵠ = ᐃΔ[247][Cf.time][this.Δⵠⵠᐃᐃ];
        if (this.Δⵠⵠᐃᐃ < 2) {
            ⵠᐃΔ = this.ⲆᐃᐃΔ.ΔⲆⲆ * -ᐃⵠ.width;
            ⵠⲆⵠ = -ᐃⵠ.height * this.ⲆᐃᐃΔ.ΔⲆⲆ;
        } else if (this.ⲆΔΔΔⵠⵠⵠ === 0) {
            ⵠᐃΔ = -ᐃⵠ.width;
            ⵠⲆⵠ = -ᐃⵠ.height;
        } else {
            ⵠᐃΔ = -ᐃⵠ.width * 1.35;
            ⵠⲆⵠ = -ᐃⵠ.height * 1.35;
        }
        Mc(In, ᐃⵠ, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
        In.globalAlpha = 1;
        In.restore();
    }
    function vp() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        if (ΔⲆⲆⵠ.ᐃⲆⵠΔ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + Af / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - Af, 1);
        }
        this.ⲆᐃᐃΔ.ⲆᐃΔ();
        this.rotate.ⲆᐃΔ();
        a = ᐃΔ[450][Cf.time];
        ⵠᐃΔ = this.scale * (this.ⲆᐃᐃΔ.ΔⲆⲆ * -a.width);
        ⵠⲆⵠ = this.scale * (this.ⲆᐃᐃΔ.ΔⲆⲆ * -a.height);
        Mc(In, a, -ⵠᐃΔ / 4, -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & kw.ⵠⲆΔⵠ) {
            if (this.ⵠⵠΔ.ⲆᐃΔ() && lj == this.ⵠⵠΔ.ⵠⲆᐃ) {
                this.action -= kw.ⵠⲆΔⵠ;
            }
            In.globalAlpha = 0.6 - this.ⵠⵠΔ.ΔⲆⲆ;
            var a = ᐃΔ[464];
            Mc(In, a, -ⵠᐃΔ / 4, -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
            In.globalAlpha = 1;
        }
        a = ᐃΔ[453][Cf.time];
        ⵠᐃΔ = this.ⲆᐃᐃΔ.ΔⲆⲆ * -a.width * this.scale;
        ⵠⲆⵠ = this.scale * (this.ⲆᐃᐃΔ.ΔⲆⲆ * -a.height);
        In.save();
        In.translate(mq * -60, mq * 20);
        In.rotate(this.rotate.ΔⲆⲆ);
        Mc(In, a, -ⵠᐃΔ * mq / 4, mq * -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & kw.ⵠⲆΔⵠ) {
            In.globalAlpha = 0.6 - this.ⵠⵠΔ.ΔⲆⲆ;
            a = ᐃΔ[468];
            Mc(In, a, -ⵠᐃΔ * mq / 4, -ⵠⲆⵠ * mq / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
            In.globalAlpha = 1;
        }
        In.restore();
        a = ᐃΔ[454][Cf.time];
        In.save();
        In.translate(mq * 60, mq * 20);
        In.rotate(-this.rotate.ΔⲆⲆ);
        Mc(In, a, mq * -ⵠᐃΔ / 4, -ⵠⲆⵠ * mq / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & kw.ⵠⲆΔⵠ) {
            In.globalAlpha = 0.6 - this.ⵠⵠΔ.ΔⲆⲆ;
            a = ᐃΔ[469];
            Mc(In, a, -ⵠᐃΔ * mq / 4, -ⵠⲆⵠ * mq / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
            In.globalAlpha = 1;
        }
        In.restore();
        In.restore();
    }
    function mp() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        var a = ΔⲆⲆⵠ.ᐃⲆⵠΔ(this, this.r);
        this.scale = a > 350 ? Math.min(this.scale + Af / 2, 1.8) : Math.max(this.scale - Af, 1);
        this.ⲆᐃᐃΔ.ⲆᐃΔ();
        this.rotate.ⲆᐃΔ();
        this.ⵠⵠⵠΔ = a < 350 ? Math.max(0, this.ⵠⵠⵠΔ - Af * 2.2) : Math.min(1, this.ⵠⵠⵠΔ + Af * 2.2);
        b = (this.info & 1) === 0 ? ᐃΔ[1113][Cf.time] : ᐃΔ[1114][Cf.time];
        ⵠᐃΔ = this.scale * (-b.width * this.ⲆᐃᐃΔ.ΔⲆⲆ);
        ⵠⲆⵠ = this.scale * (-b.height * this.ⲆᐃᐃΔ.ΔⲆⲆ);
        In.globalAlpha = 1 - this.ⵠⵠⵠΔ;
        Mc(In, b, -ⵠᐃΔ / 4, -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
        b = this.info & 1 ? ᐃΔ[1098][Cf.time] : ᐃΔ[235][Cf.time];
        ⵠᐃΔ = this.ⲆᐃᐃΔ.ΔⲆⲆ * -b.width * this.scale;
        ⵠⲆⵠ = -b.height * this.ⲆᐃᐃΔ.ΔⲆⲆ * this.scale;
        In.globalAlpha = this.ⵠⵠⵠΔ;
        Mc(In, b, -ⵠᐃΔ / 4, -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & kw.ⵠⲆΔⵠ) {
            if (this.ⵠⵠΔ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠⲆᐃ == 0) {
                this.action -= kw.ⵠⲆΔⵠ;
            }
            In.globalAlpha = (1 - this.ⵠⵠⵠΔ) * (0.6 - this.ⵠⵠΔ.ΔⲆⲆ);
            var b = ᐃΔ[1115];
            ⵠᐃΔ = this.ⲆᐃᐃΔ.ΔⲆⲆ * -b.width * this.scale;
            ⵠⲆⵠ = this.scale * (this.ⲆᐃᐃΔ.ΔⲆⲆ * -b.height);
            Mc(In, b, -ⵠᐃΔ / 4, -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
            In.globalAlpha = (0.6 - this.ⵠⵠΔ.ΔⲆⲆ) * this.ⵠⵠⵠΔ;
            b = ᐃΔ[1107];
            ⵠᐃΔ = this.scale * (-b.width * this.ⲆᐃᐃΔ.ΔⲆⲆ);
            ⵠⲆⵠ = this.scale * (this.ⲆᐃᐃΔ.ΔⲆⲆ * -b.height);
            Mc(In, b, -ⵠᐃΔ / 4, -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
            In.globalAlpha = 1;
        }
        b = this.info & 1 ? ᐃΔ[1101][Cf.time] : ᐃΔ[1102][Cf.time];
        ⵠᐃΔ = this.ⲆᐃᐃΔ.ΔⲆⲆ * -b.width * this.scale;
        ⵠⲆⵠ = this.ⲆᐃᐃΔ.ΔⲆⲆ * -b.height * this.scale;
        In.save();
        In.translate(mq * -20, mq * 0);
        In.rotate(this.rotate.ΔⲆⲆ);
        In.globalAlpha = this.ⵠⵠⵠΔ;
        Mc(In, b, mq * -ⵠᐃΔ / 4, mq * -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & kw.ⵠⲆΔⵠ) {
            In.globalAlpha = this.ⵠⵠⵠΔ * (0.6 - this.ⵠⵠΔ.ΔⲆⲆ);
            b = ᐃΔ[1108];
            Mc(In, b, -ⵠᐃΔ * mq / 4, -ⵠⲆⵠ * mq / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
            In.globalAlpha = 1;
        }
        In.restore();
        b = (this.info & 1) === 0 ? ᐃΔ[1105][Cf.time] : ᐃΔ[1104][Cf.time];
        In.save();
        In.translate(mq * 20, mq * 0);
        In.rotate(-this.rotate.ΔⲆⲆ);
        In.globalAlpha = this.ⵠⵠⵠΔ;
        Mc(In, b, mq * -ⵠᐃΔ / 4, mq * -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & kw.ⵠⲆΔⵠ) {
            In.globalAlpha = (0.6 - this.ⵠⵠΔ.ΔⲆⲆ) * this.ⵠⵠⵠΔ;
            b = ᐃΔ[1109];
            Mc(In, b, mq * -ⵠᐃΔ / 4, mq * -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
            In.globalAlpha = 1;
        }
        In.globalAlpha = 1;
        In.restore();
        In.restore();
    }
    function cp() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        if (ΔⲆⲆⵠ.ᐃⲆⵠΔ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + Af / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - Af, 1);
        }
        this.ⲆᐃᐃΔ.ⲆᐃΔ();
        this.rotate.ⲆᐃΔ();
        a = this.info === 0 ? ᐃΔ[233][Cf.time] : ᐃΔ[1083][Cf.time];
        ⵠᐃΔ = this.scale * (-a.width * this.ⲆᐃᐃΔ.ΔⲆⲆ);
        ⵠⲆⵠ = this.scale * (this.ⲆᐃᐃΔ.ΔⲆⲆ * -a.height);
        Mc(In, a, -ⵠᐃΔ / 4, -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & kw.ⵠⲆΔⵠ) {
            if (this.ⵠⵠΔ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠⲆᐃ == 0) {
                this.action -= kw.ⵠⲆΔⵠ;
            }
            In.globalAlpha = 0.6 - this.ⵠⵠΔ.ΔⲆⲆ;
            var a = ᐃΔ[1092];
            Mc(In, a, -ⵠᐃΔ / 4, -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
            In.globalAlpha = 1;
        }
        a = this.info === 0 ? ᐃΔ[1087][Cf.time] : ᐃΔ[1086][Cf.time];
        ⵠᐃΔ = -a.width * this.ⲆᐃᐃΔ.ΔⲆⲆ * this.scale;
        ⵠⲆⵠ = -a.height * this.ⲆᐃᐃΔ.ΔⲆⲆ * this.scale;
        In.save();
        In.translate(mq * -40, mq * 10);
        In.rotate(this.rotate.ΔⲆⲆ);
        Mc(In, a, mq * -ⵠᐃΔ / 4, mq * -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & kw.ⵠⲆΔⵠ) {
            In.globalAlpha = 0.6 - this.ⵠⵠΔ.ΔⲆⲆ;
            a = ᐃΔ[1093];
            Mc(In, a, mq * -ⵠᐃΔ / 4, mq * -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
            In.globalAlpha = 1;
        }
        In.restore();
        a = this.info === 0 ? ᐃΔ[1090][Cf.time] : ᐃΔ[1089][Cf.time];
        In.save();
        In.translate(mq * 40, mq * 10);
        In.rotate(-this.rotate.ΔⲆⲆ);
        Mc(In, a, mq * -ⵠᐃΔ / 4, -ⵠⲆⵠ * mq / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & kw.ⵠⲆΔⵠ) {
            In.globalAlpha = 0.6 - this.ⵠⵠΔ.ΔⲆⲆ;
            a = ᐃΔ[1094];
            Mc(In, a, -ⵠᐃΔ * mq / 4, mq * -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
            In.globalAlpha = 1;
        }
        In.restore();
        In.restore();
    }
    function pp() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        if (this.ⵠⵠΔ.ⲆᐃΔ) {
            if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ == lj) {
                this.ⵠⵠΔ.ⲆᐃΔ = false;
            }
            var b = Af * (1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * 600 * mq;
            var c = b * Math.sin(this.ⵠⵠΔ.angle - this.angle);
            var d = b * Math.cos(this.ⵠⵠΔ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            In.rotate(this.angle);
            this.ⵠⲆⵠΔ.ⲆᐃΔ();
            if (this.info & 16) {
                var f = ᐃΔ[668][Cf.time];
            } else {
                f = ᐃΔ[132][Cf.time];
            }
            var g = this.ⵠⲆⵠΔ.ΔⲆⲆ * -f.width;
            var a = -f.height * this.ⵠⲆⵠΔ.ΔⲆⲆ;
            Mc(In, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            this.ᐃⲆⵠⵠⵠⵠᐃ.ⲆᐃΔ();
            if (this.info & 16) {
                f = ᐃΔ[638][Cf.time];
            } else {
                f = ᐃΔ[134][Cf.time];
            }
            In.translate(0, f.height / 2);
            In.rotate(this.ᐃⲆⵠⵠⵠⵠᐃ.ΔⲆⲆ);
            Mc(In, f, c - f.width / 2, -f.height + d);
        }
        In.restore();
    }
    function Cp() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        if (this.ⵠⵠΔ.ⲆᐃΔ) {
            if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ == 0) {
                this.ⵠⵠΔ.ⲆᐃΔ = false;
            }
            var b = (1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * Af * 600 * mq;
            var c = b * Math.sin(this.ⵠⵠΔ.angle - this.angle);
            var d = b * Math.cos(this.ⵠⵠΔ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            In.rotate(this.angle);
            this.ⵠⲆⵠΔ.ⲆᐃΔ();
            if (this.info & 16) {
                var f = ᐃΔ[849][Cf.time];
            } else {
                f = ᐃΔ[193][Cf.time];
            }
            var g = -f.width * this.ⵠⲆⵠΔ.ΔⲆⲆ;
            var a = -f.height * this.ⵠⲆⵠΔ.ΔⲆⲆ;
            Mc(In, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ᐃΔ[869][Cf.time];
            } else {
                f = ᐃΔ[194][Cf.time];
            }
            In.translate(0, f.height / 2);
            Mc(In, f, c - f.width / 2, -f.height + d);
        }
        In.restore();
    }
    function Tp() {
        if ((this.info & 1) === 1) {
            this.ᐃⲆⵠⵠⵠ = Math.min(this.ᐃⲆⵠⵠⵠ + Af, 2.2);
        } else {
            this.ᐃⲆⵠⵠⵠ = Math.max(this.ᐃⲆⵠⵠⵠ - Af, 0);
            this.ⵠᐃⵠⵠᐃⵠᐃ += Af;
            if (this.ⵠᐃⵠⵠᐃⵠᐃ > 0.1) {
                this.ⵠᐃⵠⵠᐃⵠᐃ = 0;
                var a = {
                    x: this.x + Math.random() * 60 - 30,
                    y: this.y + Math.random() * 60 - 30,
                    a: 0,
                    r: Math.random() * 30 + 30
                };
                this.ⵠⲆⵠΔ.push(a);
            }
        }
        for (var b = 0; b < this.ⵠⲆⵠΔ.length; b++) {
            a = this.ⵠⲆⵠΔ[b];
            In.save();
            In.translate(Yw.ᐃⵠⵠ.x + a.x, Yw.ᐃⵠⵠ.y + a.y);
            a.a = Math.min(1, a.a + Af / 2);
            var c = a.a;
            if (c < 0.2) {
                c *= 5;
            } else {
                c = c > 0.8 ? (1 - c) * 5 : 1;
            }
            In.globalAlpha = c * 0.8;
            ut(In, 0, 0, a.r);
            vt(In, nr.ΔⲆⲆⵠᐃᐃᐃ[Cf.time]);
            In.restore();
            if (a.a === 1) {
                this.ⵠⲆⵠΔ.splice(b, 1);
                b--;
            }
        }
    }
    function fp() {
        if (this.ⵠⵠΔ.ⲆᐃΔ) {
            if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ == 0) {
                this.ⵠⵠΔ.ⲆᐃΔ = false;
            }
            var a = Af * (1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * 600 * mq;
            var b = Math.sin(this.ⵠⵠΔ.angle - this.angle) * a;
            var c = Math.cos(this.ⵠⵠΔ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        In.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        In.translate(Yw.ᐃⵠⵠ.x + this.x + b, Yw.ᐃⵠⵠ.y + this.y + c);
        In.rotate(this.angle);
        ᐃⵠ = ᐃΔ[155][Cf.time];
        Mc(In, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + Af * 3) % (Math.PI * 2);
        }
        In.rotate(this.rotate);
        ᐃⵠ = ᐃΔ[1206][Cf.time];
        Mc(In, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
        In.restore();
    }
    function zp() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        if (ΔⲆⲆⵠ.ᐃⲆⵠΔ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + Af / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - Af, 1);
        }
        this.ⲆᐃᐃΔ.ⲆᐃΔ();
        this.rotate.ⲆᐃΔ();
        a = this.info === 0 ? ᐃΔ[232][Cf.time] : ᐃΔ[1068][Cf.time];
        ⵠᐃΔ = this.scale * (this.ⲆᐃᐃΔ.ΔⲆⲆ * -a.width);
        ⵠⲆⵠ = -a.height * this.ⲆᐃᐃΔ.ΔⲆⲆ * this.scale;
        Mc(In, a, -ⵠᐃΔ / 4, -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & kw.ⵠⲆΔⵠ) {
            if (this.ⵠⵠΔ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠⲆᐃ == tr) {
                this.action -= kw.ⵠⲆΔⵠ;
            }
            In.globalAlpha = 0.6 - this.ⵠⵠΔ.ΔⲆⲆ;
            var a = ᐃΔ[1077];
            Mc(In, a, -ⵠᐃΔ / 4, -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
            In.globalAlpha = 1;
        }
        a = this.info === 0 ? ᐃΔ[1072][Cf.time] : ᐃΔ[1071][Cf.time];
        ⵠᐃΔ = -a.width * this.ⲆᐃᐃΔ.ΔⲆⲆ * this.scale;
        ⵠⲆⵠ = -a.height * this.ⲆᐃᐃΔ.ΔⲆⲆ * this.scale;
        In.save();
        In.translate(mq * -40, mq * 10);
        In.rotate(this.rotate.ΔⲆⲆ);
        Mc(In, a, mq * -ⵠᐃΔ / 4, -ⵠⲆⵠ * mq / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & kw.ⵠⲆΔⵠ) {
            In.globalAlpha = 0.6 - this.ⵠⵠΔ.ΔⲆⲆ;
            a = ᐃΔ[1078];
            Mc(In, a, -ⵠᐃΔ * mq / 4, -ⵠⲆⵠ * mq / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
            In.globalAlpha = 1;
        }
        In.restore();
        a = this.info === 0 ? ᐃΔ[1075][Cf.time] : ᐃΔ[1074][Cf.time];
        In.save();
        In.translate(mq * 40, mq * 10);
        In.rotate(-this.rotate.ΔⲆⲆ);
        Mc(In, a, -ⵠᐃΔ * mq / 4, mq * -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & kw.ⵠⲆΔⵠ) {
            In.globalAlpha = 0.6 - this.ⵠⵠΔ.ΔⲆⲆ;
            a = ᐃΔ[1079];
            Mc(In, a, mq * -ⵠᐃΔ / 4, -ⵠⲆⵠ * mq / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
            In.globalAlpha = 1;
        }
        In.restore();
        In.restore();
    }
    function yp(a, b) {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        this.ⲆᐃᐃΔ.ⲆᐃΔ();
        c = ᐃΔ[a][Cf.time];
        ⵠᐃΔ = -c.width * this.ⲆᐃᐃΔ.ΔⲆⲆ;
        ⵠⲆⵠ = -c.height * this.ⲆᐃᐃΔ.ΔⲆⲆ;
        Mc(In, c, -ⵠᐃΔ / 4, -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & kw.ⵠⲆΔⵠ) {
            if (this.ⵠⵠΔ.ⲆᐃΔ() && ql == this.ⵠⵠΔ.ⵠⲆᐃ) {
                this.action -= kw.ⵠⲆΔⵠ;
            }
            In.globalAlpha = 0.6 - this.ⵠⵠΔ.ΔⲆⲆ;
            var c = ᐃΔ[b];
            Mc(In, c, -ⵠᐃΔ / 4, -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
            In.globalAlpha = 1;
        }
        In.restore();
    }
    function wp(a, b, c) {
        if (a >= 0) {
            ᐃⵠ = ᐃΔ[a][Cf.time];
            switch (a) {
                case 71:
                case 72:
                case 73:
                    Gv(a, ᐃⵠ, -ᐃⵠ.width / 4 - mq * (0 + b), -ᐃⵠ.height / 4 + mq * (c + 35));
                    break;
                case 74:
                    Gv(a, ᐃⵠ, -ᐃⵠ.width / 4 - (1 + b) * mq, -ᐃⵠ.height / 4 + mq * (c + 45));
                    break;
                case 75:
                case 76:
                    Gv(a, ᐃⵠ, -ᐃⵠ.width / 4 - (1 + b) * mq, -ᐃⵠ.height / 4 + mq * (c + 40));
            }
        }
    }
    function Pp(a, b) {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        if (a === 854) {
            a = 250;
            this.info = 36;
        }
        ᐃⵠ = ᐃΔ[a][this.info][Cf.time];
        ⵠᐃΔ = -ᐃⵠ.width / 2;
        ⵠⲆⵠ = -ᐃⵠ.height / 2;
        Mc(In, ᐃⵠ, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
        if (this.action & kw.ⵠⲆΔⵠ) {
            if (this.ⵠⵠΔ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠⲆᐃ == 0) {
                this.action -= kw.ⵠⲆΔⵠ;
            }
            In.globalAlpha = 0.6 - this.ⵠⵠΔ.ΔⲆⲆ;
            var c = ev(this.info, ᐃⵠ, ⵠΔⵠΔⵠⲆΔⲆᐃ);
            Mc(In, c, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
            In.globalAlpha = 1;
        }
        In.restore();
    }
    function Ap() {
        if (this.ⵠⵠΔ.ⲆᐃΔ) {
            if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ == 0) {
                this.ⵠⵠΔ.ⲆᐃΔ = false;
            }
            var a = Af * (1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * 600 * mq;
            var b = a * Math.sin(this.ⵠⵠΔ.angle - this.angle);
            var c = a * Math.cos(this.ⵠⵠΔ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x + b, Yw.ᐃⵠⵠ.y + this.y + c);
        In.rotate(this.angle);
        ᐃⵠ = ᐃΔ[135][Cf.time];
        Mc(In, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
        In.restore();
    }
    function kp() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        this.ᐃΔΔⲆΔ.ⲆᐃΔ();
        ᐃⵠ = ᐃΔ[526][Cf.time];
        ⵠᐃΔ = this.ᐃΔΔⲆΔ.ΔⲆⲆ * -ᐃⵠ.width;
        ⵠⲆⵠ = this.ᐃΔΔⲆΔ.ΔⲆⲆ * -ᐃⵠ.height;
        Mc(In, ᐃⵠ, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
        In.restore();
    }
    function xp() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        if (this.ⵠⵠΔ.ⲆᐃΔ) {
            if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ == 0) {
                this.ⵠⵠΔ.ⲆᐃΔ = false;
            }
            var b = (1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * Af * 600 * mq;
            var c = Math.sin(this.ⵠⵠΔ.angle - this.angle) * b;
            var d = b * Math.cos(this.ⵠⵠΔ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            In.rotate(this.angle);
            this.ⵠⲆⵠΔ.ⲆᐃΔ();
            if (this.info & 16) {
                var f = ᐃΔ[985][Cf.time];
            } else {
                f = ᐃΔ[210][Cf.time];
            }
            var g = -f.width * this.ⵠⲆⵠΔ.ΔⲆⲆ;
            var a = this.ⵠⲆⵠΔ.ΔⲆⲆ * -f.height;
            Mc(In, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ᐃΔ[986][Cf.time];
            } else {
                f = ᐃΔ[211][Cf.time];
            }
            In.translate(0, f.height / 2);
            Mc(In, f, c - f.width / 2, -f.height + d);
        }
        In.restore();
    }
    function Jp() {
        if (this.ⵠⵠΔ.ⲆᐃΔ) {
            if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ == 0) {
                this.ⵠⵠΔ.ⲆᐃΔ = Gj;
            }
            var a = (1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * Af * 600 * mq;
            var b = Math.sin(this.ⵠⵠΔ.angle - this.angle) * a;
            var c = Math.cos(this.ⵠⵠΔ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        this.ΔΔⲆⵠΔⵠⵠ = (this.ΔΔⲆⵠΔⵠⵠ + Af * 3) % (Math.PI * 2);
        this.ᐃΔᐃᐃΔⲆⵠ = (this.ᐃΔᐃᐃΔⲆⵠ - Af * 3) % (Math.PI * 2);
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x + b, Yw.ᐃⵠⵠ.y + this.y + c);
        In.save();
        In.rotate(this.angle);
        ᐃⵠ = ᐃΔ[151][Cf.time];
        Mc(In, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
        In.restore();
        In.save();
        In.rotate(this.ΔΔⲆⵠΔⵠⵠ);
        ᐃⵠ = ᐃΔ[528][Cf.time];
        Mc(In, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
        In.restore();
        In.save();
        In.rotate(this.ᐃΔᐃᐃΔⲆⵠ);
        ᐃⵠ = ᐃΔ[527][Cf.time];
        Mc(In, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
        In.restore();
        In.restore();
    }
    function Mp() {
        if (this.ⵠⵠΔ.ⲆᐃΔ) {
            var a = Af * (1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * 600 * mq;
            var b = Math.sin(this.ⵠⵠΔ.angle - this.angle) * a;
            var c = Math.cos(this.ⵠⵠΔ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + Af * 0.5) % (Math.PI * 2);
        }
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x + b, Yw.ᐃⵠⵠ.y + this.y + c);
        In.save();
        In.rotate(this.rotate);
        ᐃⵠ = ᐃΔ[641][Cf.time];
        Mc(In, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
        In.restore();
        In.save();
        In.rotate(this.ⵠᐃΔⵠⵠᐃᐃⲆᐃ);
        ᐃⵠ = ᐃΔ[642][Cf.time];
        Mc(In, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
        In.restore();
        In.restore();
    }
    function Bp() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        this.ⵠⲆⵠΔ.ⲆᐃΔ();
        In.globalAlpha = 0.3;
        var a = ᐃΔ[282][Cf.time];
        var b = this.ⵠⲆⵠΔ.ΔⲆⲆ * -a.width;
        var c = this.ⵠⲆⵠΔ.ΔⲆⲆ * -a.height;
        Mc(In, a, -b / 2, -c / 2, b, c);
        In.globalAlpha = 1;
        In.restore();
    }
    function Dp(a, b) {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        this.ⲆᐃᐃΔ.ⲆᐃΔ();
        c = ᐃΔ[a][Cf.time];
        ⵠᐃΔ = -c.width * this.ⲆᐃᐃΔ.ΔⲆⲆ;
        ⵠⲆⵠ = -c.height * this.ⲆᐃᐃΔ.ΔⲆⲆ;
        Mc(In, c, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
        if (this.action & kw.ⵠⲆΔⵠ) {
            if (this.ⵠⵠΔ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠⲆᐃ == pn) {
                this.action -= kw.ⵠⲆΔⵠ;
            }
            In.globalAlpha = 0.6 - this.ⵠⵠΔ.ΔⲆⲆ;
            var c = ᐃΔ[b];
            Mc(In, c, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
            In.globalAlpha = 1;
        }
        In.restore();
    }
    function Ep() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        if (this.ⵠⵠΔ.ⲆᐃΔ) {
            if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ == Gj) {
                this.ⵠⵠΔ.ⲆᐃΔ = false;
            }
            var a = mq * ((1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * Af * 600);
            var b = a * Math.sin(this.ⵠⵠΔ.angle - this.angle);
            var c = a * Math.cos(this.ⵠⵠΔ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        if (this.action == 2) {
            ᐃⵠ = ᐃΔ[407][Cf.time];
        } else {
            ᐃⵠ = ᐃΔ[119][Cf.time];
        }
        Mc(In, ᐃⵠ, -ᐃⵠ.width / 2 + b, -ᐃⵠ.height / 2 + c);
        In.restore();
    }
    function Ip() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.ⵠᐃⵠΔΔ.length == 0 || this.ⵠᐃⵠΔΔ[this.ⵠᐃⵠΔΔ.length - 1] <= nr.ⵠⲆⲆⵠΔⲆⲆ)) {
            this.ⵠᐃⵠΔΔ.push(nr.ΔᐃⲆⲆΔᐃΔ);
        }
        for (var a = 0; a < this.ⵠᐃⵠΔΔ.length; a++) {
            this.ⵠᐃⵠΔΔ[a] = Math.max(0, this.ⵠᐃⵠΔΔ[a] - nr.ⵠΔⵠΔⵠᐃⵠ * Af);
            In.globalAlpha = this.ⵠᐃⵠΔΔ[a] / 1.3;
            var b = (1 - this.ⵠᐃⵠΔΔ[a]) * 40;
            var c = (1 - this.ⵠᐃⵠΔΔ[a]) * 35 + 10;
            ut(In, mq * -68 + b * Math.sin(-this.angle - Math.PI / 2), mq * -20 + Math.cos(-this.angle - Math.PI / 2) * b, c);
            vt(In, "#333333");
        }
        In.globalAlpha = 1;
        if (this.ⵠᐃⵠΔΔ.length > 0 && this.ⵠᐃⵠΔΔ[0] === 0) {
            this.ⵠᐃⵠΔΔ.shift();
        }
        In.restore();
    }
    function Sp() {
        this.ⲆᐃᐃΔ.ⲆᐃΔ();
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        a = this.info === 0 ? ᐃΔ[248][Cf.time] : ᐃΔ[1222][Cf.time];
        ⵠᐃΔ = -a.width * this.ⲆᐃᐃΔ.ΔⲆⲆ;
        ⵠⲆⵠ = this.ⲆᐃᐃΔ.ΔⲆⲆ * -a.height;
        Mc(In, a, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
        if (this.action & kw.ⵠⲆΔⵠ) {
            if (this.ⵠⵠΔ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠⲆᐃ == pl) {
                this.action -= kw.ⵠⲆΔⵠ;
            }
            In.globalAlpha = 0.6 - this.ⵠⵠΔ.ΔⲆⲆ;
            var a = ᐃΔ[1223];
            Mc(In, a, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
            In.globalAlpha = 1;
        }
        In.restore();
    }
    function Qp(a, b, c) {
        if (a >= 0) {
            ᐃⵠ = ᐃΔ[a][Cf.time];
            switch (a) {
                case 1:
                case 3:
                case 4:
                case 8:
                case 31:
                case 32:
                    Pv(a, ᐃⵠ, -ᐃⵠ.width / 2 - (45 + b) * mq, -ᐃⵠ.height / 2 + (c + 22) * mq);
                    break;
                case 94:
                case 95:
                case 96:
                case 97:
                    Gv(a, ᐃⵠ, -ᐃⵠ.width / 4 - mq * (52 + b), -ᐃⵠ.height / 4 + (c + 20) * mq);
                    break;
                case 98:
                case 99:
                    Gv(a, ᐃⵠ, -ᐃⵠ.width / 4 - mq * (57 + b), -ᐃⵠ.height / 4 + mq * (c + 20));
                    break;
                case 57:
                case 0:
                case 5:
                case 6:
                    Gv(a, ᐃⵠ, -ᐃⵠ.width / 4 - mq * (47 + b), -ᐃⵠ.height / 4 + (c + 45) * mq);
                    break;
                case 30:
                    Gv(a, ᐃⵠ, -ᐃⵠ.width / 4 - mq * (52 + b), -ᐃⵠ.height / 4 + (c + 45) * mq);
                    break;
                case 19:
                    Gv(a, ᐃⵠ, -ᐃⵠ.width / 4 - (47 + b) * mq, -ᐃⵠ.height / 4 + (c + 44) * mq);
                    break;
                case 9:
                    Pv(a, ᐃⵠ, -ᐃⵠ.width / 2 - (47 + b) * mq, -ᐃⵠ.height / 2 + (c + 44) * mq);
                    break;
                case 62:
                    Pv(a, ᐃⵠ, -ᐃⵠ.width / 2 - mq * (40 + b), -ᐃⵠ.height / 2 + (c + 65) * mq);
                    break;
                case 12:
                    Gv(a, ᐃⵠ, -ᐃⵠ.width / 4 - mq * (37 + b), -ᐃⵠ.height / 4 + (c + 85) * mq);
                    break;
                case 34:
                    Gv(a, ᐃⵠ, -ᐃⵠ.width / 4 - (37 + b) * mq, -ᐃⵠ.height / 4 + mq * (c + 85));
                    break;
                case 54:
                case 53:
                    Gv(a, ᐃⵠ, -ᐃⵠ.width / 4 - mq * (26 + b), -ᐃⵠ.height / 4 + mq * (c + 77));
                    break;
                case 17:
                    Gv(a, ᐃⵠ, -ᐃⵠ.width / 4 - (37 + b) * mq, -ᐃⵠ.height / 4 + mq * (c + 85));
                    break;
                case 63:
                    Gv(a, ᐃⵠ, -ᐃⵠ.width / 4 - mq * (47 + b), -ᐃⵠ.height / 4 + (c + 44) * mq);
                    break;
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                    Gv(a, ᐃⵠ, -ᐃⵠ.width / 4 - mq * (37 + b), -ᐃⵠ.height / 4 + (c + 30) * mq);
                    break;
                case 56:
                    Gv(a, ᐃⵠ, -ᐃⵠ.width / 4 - (47 + b) * mq, -ᐃⵠ.height / 4 + (c + 35) * mq);
                    break;
                case 92:
                case 93:
                    Gv(a, ᐃⵠ, -ᐃⵠ.width / 4 - mq * (47 + b), -ᐃⵠ.height / 4 + mq * (c + 40));
                    break;
                case 89:
                    Gv(a, ᐃⵠ, -ᐃⵠ.width / 4 - mq * (47 + b), -ᐃⵠ.height / 4 + (c + 34) * mq);
                    break;
                case 13:
                case 14:
                case 15:
                case 33:
                    Gv(a, ᐃⵠ, -ᐃⵠ.width / 4 - mq * (37 + b), -ᐃⵠ.height / 4 + (c + 90) * mq);
                    break;
                case 18:
                    Gv(a, ᐃⵠ, -ᐃⵠ.width / 4 - mq * (40 + b), -ᐃⵠ.height / 4 + mq * (c + 85));
                    break;
                case 16:
                    Pv(a, ᐃⵠ, -ᐃⵠ.width / 2 - (39 + b) * mq, -ᐃⵠ.height / 2 + (c + 90) * mq);
                    break;
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 45:
                    Pv(a, ᐃⵠ, -ᐃⵠ.width / 2 - (46 + b) * mq, -ᐃⵠ.height / 2 + (c + 35) * mq);
                    break;
                case 49:
                    Pv(a, ᐃⵠ, -ᐃⵠ.width / 2 - mq * (47 + b), -ᐃⵠ.height / 2 + mq * (c + 54));
                    break;
                case 46:
                case 50:
                case 51:
                case 52:
                    Pv(a, ᐃⵠ, -ᐃⵠ.width / 2 - mq * (46 + b), -ᐃⵠ.height / 2 + mq * (c + 35));
                    break;
                case 55:
                    Pv(a, ᐃⵠ, -ᐃⵠ.width / 2 - (47 + b) * mq, -ᐃⵠ.height / 2 + mq * (c + 20));
            }
        }
    }
    function _p() {
        this.ⲆᐃᐃΔ.ⲆᐃΔ();
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        a = this.info === 0 ? ᐃΔ[1042][Cf.time] : ᐃΔ[1044][Cf.time];
        ⵠᐃΔ = this.ⲆᐃᐃΔ.ΔⲆⲆ * -a.width;
        ⵠⲆⵠ = -a.height * this.ⲆᐃᐃΔ.ΔⲆⲆ;
        Mc(In, a, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
        if (this.action & kw.ⵠⲆΔⵠ) {
            if (this.ⵠⵠΔ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠⲆᐃ == 0) {
                this.action -= kw.ⵠⲆΔⵠ;
            }
            In.globalAlpha = 0.6 - this.ⵠⵠΔ.ΔⲆⲆ;
            var a = ᐃΔ[1045];
            Mc(In, a, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
            In.globalAlpha = 1;
        }
        In.restore();
    }
    function Fp() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        this.ⵠᐃⲆΔᐃ.ⲆᐃΔ();
        ᐃⵠ = ᐃΔ[288][Cf.time];
        ⵠᐃΔ = -ᐃⵠ.width * this.ⵠᐃⲆΔᐃ.ΔⲆⲆ;
        ⵠⲆⵠ = this.ⵠᐃⲆΔᐃ.ΔⲆⲆ * -ᐃⵠ.height;
        Mc(In, ᐃⵠ, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
        this.ᐃΔΔⲆΔ.ⲆᐃΔ();
        ᐃⵠ = ᐃΔ[289][Cf.time];
        ⵠᐃΔ = this.ᐃΔΔⲆΔ.ΔⲆⲆ * -ᐃⵠ.width;
        ⵠⲆⵠ = this.ᐃΔΔⲆΔ.ΔⲆⲆ * -ᐃⵠ.height;
        Mc(In, ᐃⵠ, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
        In.restore();
    }
    function Rp() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        this.ᐃΔΔⲆΔ.ⲆᐃΔ();
        ᐃⵠ = ᐃΔ[1192][Cf.time];
        ⵠᐃΔ = this.ᐃΔΔⲆΔ.ΔⲆⲆ * -ᐃⵠ.width;
        ⵠⲆⵠ = this.ᐃΔΔⲆΔ.ΔⲆⲆ * -ᐃⵠ.height;
        Mc(In, ᐃⵠ, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
        In.restore();
    }
    function jp() {
        if (this.ⵠⵠΔ.ⲆᐃΔ) {
            if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ == 0) {
                this.ⵠⵠΔ.ⲆᐃΔ = Qr;
            }
            var a = Af * (1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * 600 * mq;
            var b = Math.sin(this.ⵠⵠΔ.angle - this.angle) * a;
            var c = Math.cos(this.ⵠⵠΔ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        In.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        In.translate(Yw.ᐃⵠⵠ.x + this.x + b, Yw.ᐃⵠⵠ.y + this.y + c);
        In.rotate(this.angle);
        ᐃⵠ = ᐃΔ[154][Cf.time];
        Mc(In, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + Af * 3) % (Math.PI * 2);
        }
        In.rotate(this.rotate);
        ᐃⵠ = ᐃΔ[1202][Cf.time];
        Mc(In, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
        In.restore();
    }
    function Gp() {
        if (this.info !== 10) {
            In.save();
            In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
            In.rotate(this.angle);
            if (this.ⵠⵠΔ.ⲆᐃΔ) {
                if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ == 0) {
                    this.ⵠⵠΔ.ⲆᐃΔ = ug;
                }
                var b = mq * ((1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * Af * 600);
                var c = Math.sin(this.ⵠⵠΔ.angle - this.angle) * b;
                var d = Math.cos(this.ⵠⵠΔ.angle - this.angle) * b;
            } else {
                c = 0;
                d = 0;
            }
            if (this.info & 16) {
                var e = ᐃΔ[623][Cf.time];
            } else {
                e = ᐃΔ[287][Cf.time];
            }
            Mc(In, e, -e.width / 2 + c, -e.width / 2 + d);
            In.restore();
            for (var f = this.info & 15, g = 0; f > g; g++) {
                this.ᐃⵠⲆᐃ[g].ⵠⵠΔΔ(294);
            }
        }
    }
    function Wp() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        if (this.ⵠⵠΔ.ⲆᐃΔ) {
            if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ == 0) {
                this.ⵠⵠΔ.ⲆᐃΔ = false;
            }
            var b = (1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * Af * 600 * mq;
            var c = b * Math.sin(this.ⵠⵠΔ.angle - this.angle);
            var d = Math.cos(this.ⵠⵠΔ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
            e = ᐃΔ[716][Cf.time];
            Mc(In, e, -e.width / 2 + c, -e.height / 2 + d);
            this.up.ⲆᐃΔ();
            var e = ᐃΔ[720][Cf.time];
            var f = -e.width * this.up.ΔⲆⲆ;
            var g = this.up.ΔⲆⲆ * -e.height;
            Mc(In, e, -f / 2 + mq * 1, -g / 2 + mq * 3, f, g);
        } else {
            e = ᐃΔ[144][Cf.time];
            Mc(In, e, -e.width / 2 + c, -e.height / 2 + d);
        }
        In.restore();
    }
    function Lp() {
        if (this.info !== 10) {
            for (var b = this.info & 15, c = 0; c < b; c++) {
                this.ᐃⵠⲆᐃ[c].ⵠⵠΔΔ(207, this.x, this.y);
            }
            In.save();
            In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
            In.rotate(this.angle);
            if (this.ⵠⵠΔ.ⲆᐃΔ) {
                if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ == 0) {
                    this.ⵠⵠΔ.ⲆᐃΔ = pn;
                }
                var d = (1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * Af * 600 * mq;
                var e = Math.sin(this.ⵠⵠΔ.angle - this.angle) * d;
                var f = Math.cos(this.ⵠⵠΔ.angle - this.angle) * d;
            } else {
                e = 0;
                f = 0;
            }
            if (this.info & 16) {
                var g = ᐃΔ[958][Cf.time];
            } else {
                g = ᐃΔ[957][Cf.time];
            }
            Mc(In, g, -g.width / 2 + e, -g.width / 2 + f);
            In.restore();
        }
    }
    function Op() {
        var a = undefined;
        var b = Jl;
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        this.ⲆᐃᐃΔ.ⲆᐃΔ();
        this.rotate.ⲆᐃΔ();
        if (this.ᐃⲆⵠⵠⵠ >= 0.1 && this.ᐃⲆⵠⵠⵠ <= 1.1) {
            if ((c = Math.max(0, Math.min(1, this.ᐃⲆⵠⵠⵠ - 0.1))) < 0.2) {
                c *= 5;
            } else {
                c = c > 0.8 ? (1 - c) * 5 : 1;
            }
            a = ᐃΔ[1150][Cf.time];
            ⵠᐃΔ = this.ⲆᐃᐃΔ.ΔⲆⲆ * -a.width;
            ⵠⲆⵠ = this.ⲆᐃᐃΔ.ΔⲆⲆ * -a.height;
            In.globalAlpha = c;
            Mc(In, a, -ⵠᐃΔ / 4, -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
            b = ᐃΔ[1151];
        }
        if (this.ᐃⲆⵠⵠⵠ >= 0.9) {
            var c;
            if ((c = Math.max(0, Math.min(1, this.ᐃⲆⵠⵠⵠ - 0.9))) < 0.2) {
                c *= 5;
            } else {
                c = 1;
            }
            a = ᐃΔ[1152][Cf.time];
            ⵠᐃΔ = this.ⲆᐃᐃΔ.ΔⲆⲆ * -a.width;
            ⵠⲆⵠ = this.ⲆᐃᐃΔ.ΔⲆⲆ * -a.height;
            In.globalAlpha = c;
            Mc(In, a, -ⵠᐃΔ / 4, -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
            b = ᐃΔ[1153];
        }
        if (this.action & kw.ⵠⲆΔⵠ && b !== sl) {
            if (this.ⵠⵠΔ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠⲆᐃ == 0) {
                this.action -= kw.ⵠⲆΔⵠ;
            }
            In.globalAlpha = (0.6 - this.ⵠⵠΔ.ΔⲆⲆ) * c;
            ⵠᐃΔ = -b.width * this.ⲆᐃᐃΔ.ΔⲆⲆ;
            ⵠⲆⵠ = -b.height * this.ⲆᐃᐃΔ.ΔⲆⲆ;
            Mc(In, b, -ⵠᐃΔ / 4, -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
        }
        In.globalAlpha = 1;
        In.restore();
    }
    function Np(a, b) {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        c = ᐃΔ[a][Cf.time];
        ⵠᐃΔ = -c.width;
        ⵠⲆⵠ = -c.height;
        Mc(In, c, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
        if (this.action & kw.ⵠⲆΔⵠ) {
            if (this.ⵠⵠΔ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠⲆᐃ == 0) {
                this.action -= kw.ⵠⲆΔⵠ;
            }
            In.globalAlpha = 0.6 - this.ⵠⵠΔ.ΔⲆⲆ;
            var c = ᐃΔ[b];
            Mc(In, c, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
            In.globalAlpha = 1;
        }
        In.restore();
    }
    function Hp() {
        if (this.ⵠⵠΔ.ⲆᐃΔ) {
            if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ == 0) {
                this.ⵠⵠΔ.ⲆᐃΔ = lj;
            }
            var a = Af * (1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * 600 * mq;
            var b = a * Math.sin(this.ⵠⵠΔ.angle - this.angle);
            var c = a * Math.cos(this.ⵠⵠΔ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        In.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        In.translate(Yw.ᐃⵠⵠ.x + this.x + b, Yw.ᐃⵠⵠ.y + this.y + c);
        In.rotate(this.angle);
        ᐃⵠ = ᐃΔ[157][Cf.time];
        Mc(In, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + Af * 3) % (Math.PI * 2);
        }
        In.rotate(this.rotate);
        ᐃⵠ = ᐃΔ[1214][Cf.time];
        Mc(In, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
        In.restore();
    }
    function qp(a, b, c) {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + b, Yw.ᐃⵠⵠ.y + c);
        In.rotate(this.angle);
        In.translate(this.x - b, this.y - c);
        this.ⲆᐃᐃΔ.ⲆᐃΔ();
        ᐃⵠ = ᐃΔ[a][Cf.time];
        ⵠᐃΔ = -ᐃⵠ.width * this.ⲆᐃᐃΔ.ΔⲆⲆ;
        ⵠⲆⵠ = -ᐃⵠ.height * this.ⲆᐃᐃΔ.ΔⲆⲆ;
        Mc(In, ᐃⵠ, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
        In.restore();
    }
    function Up() {
        if (this.ⵠⵠΔ.ⲆᐃΔ) {
            if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ == 0) {
                this.ⵠⵠΔ.ⲆᐃΔ = Ui;
            }
            var a = mq * ((1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * Af * 600);
            var b = a * Math.sin(this.ⵠⵠΔ.angle - this.angle);
            var c = a * Math.cos(this.ⵠⵠΔ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        this.ΔΔⲆⵠΔⵠⵠ = (this.ΔΔⲆⵠΔⵠⵠ + Af * 3) % (Math.PI * 2);
        this.ᐃΔᐃᐃΔⲆⵠ = (this.ᐃΔᐃᐃΔⲆⵠ - Af * 3) % (Math.PI * 2);
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x + b, Yw.ᐃⵠⵠ.y + this.y + c);
        In.save();
        In.rotate(this.angle);
        ᐃⵠ = ᐃΔ[152][Cf.time];
        Mc(In, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
        In.restore();
        In.save();
        In.rotate(this.ΔΔⲆⵠΔⵠⵠ);
        ᐃⵠ = ᐃΔ[1194][Cf.time];
        Mc(In, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
        In.restore();
        In.save();
        In.rotate(this.ᐃΔᐃᐃΔⲆⵠ);
        ᐃⵠ = ᐃΔ[1193][Cf.time];
        Mc(In, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
        In.restore();
        In.restore();
    }
    function Yp() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        var a = ΔⲆⲆⵠ.ᐃⲆⵠΔ(this, this.r);
        this.scale = a > 350 ? Math.min(this.scale + Af / 2, 1.8) : Math.max(this.scale - Af, 1);
        this.ⲆᐃᐃΔ.ⲆᐃΔ();
        this.rotate.ⲆᐃΔ();
        this.ⵠⵠⵠΔ = a < 350 ? Math.max(0, this.ⵠⵠⵠΔ - Af * 2.2) : Math.min(1, this.ⵠⵠⵠΔ + Af * 2.2);
        b = ᐃΔ[1135][Cf.time];
        ⵠᐃΔ = this.ⲆᐃᐃΔ.ΔⲆⲆ * -b.width * this.scale;
        ⵠⲆⵠ = this.ⲆᐃᐃΔ.ΔⲆⲆ * -b.height * this.scale;
        In.globalAlpha = 1 - this.ⵠⵠⵠΔ;
        Mc(In, b, -ⵠᐃΔ / 4, -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
        b = ᐃΔ[1119][Cf.time];
        ⵠᐃΔ = this.scale * (this.ⲆᐃᐃΔ.ΔⲆⲆ * -b.width);
        ⵠⲆⵠ = this.ⲆᐃᐃΔ.ΔⲆⲆ * -b.height * this.scale;
        In.globalAlpha = this.ⵠⵠⵠΔ;
        Mc(In, b, -ⵠᐃΔ / 4, -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & kw.ⵠⲆΔⵠ) {
            if (this.ⵠⵠΔ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠⲆᐃ == Sh) {
                this.action -= kw.ⵠⲆΔⵠ;
            }
            In.globalAlpha = (0.6 - this.ⵠⵠΔ.ΔⲆⲆ) * (1 - this.ⵠⵠⵠΔ);
            var b = ᐃΔ[1136];
            ⵠᐃΔ = this.ⲆᐃᐃΔ.ΔⲆⲆ * -b.width * this.scale;
            ⵠⲆⵠ = this.scale * (-b.height * this.ⲆᐃᐃΔ.ΔⲆⲆ);
            Mc(In, b, -ⵠᐃΔ / 4, -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
            In.globalAlpha = (0.6 - this.ⵠⵠΔ.ΔⲆⲆ) * this.ⵠⵠⵠΔ;
            b = ᐃΔ[1128];
            ⵠᐃΔ = this.scale * (this.ⲆᐃᐃΔ.ΔⲆⲆ * -b.width);
            ⵠⲆⵠ = this.scale * (-b.height * this.ⲆᐃᐃΔ.ΔⲆⲆ);
            Mc(In, b, -ⵠᐃΔ / 4, -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
            In.globalAlpha = 1;
        }
        b = ᐃΔ[1122][Cf.time];
        ⵠᐃΔ = -b.width * this.ⲆᐃᐃΔ.ΔⲆⲆ * this.scale;
        ⵠⲆⵠ = this.ⲆᐃᐃΔ.ΔⲆⲆ * -b.height * this.scale;
        In.save();
        In.translate(mq * -40, mq * 80);
        In.rotate(this.rotate.ΔⲆⲆ);
        In.globalAlpha = this.ⵠⵠⵠΔ;
        Mc(In, b, mq * -ⵠᐃΔ / 4, mq * -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & kw.ⵠⲆΔⵠ) {
            In.globalAlpha = this.ⵠⵠⵠΔ * (0.6 - this.ⵠⵠΔ.ΔⲆⲆ);
            b = ᐃΔ[1129];
            Mc(In, b, mq * -ⵠᐃΔ / 4, mq * -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
            In.globalAlpha = 1;
        }
        In.restore();
        b = ᐃΔ[1125][Cf.time];
        In.save();
        In.translate(mq * 40, mq * 80);
        In.rotate(-this.rotate.ΔⲆⲆ);
        In.globalAlpha = this.ⵠⵠⵠΔ;
        Mc(In, b, mq * -ⵠᐃΔ / 4, mq * -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
        if (this.action & kw.ⵠⲆΔⵠ) {
            In.globalAlpha = (0.6 - this.ⵠⵠΔ.ΔⲆⲆ) * this.ⵠⵠⵠΔ;
            b = ᐃΔ[1130];
            Mc(In, b, -ⵠᐃΔ * mq / 4, -ⵠⲆⵠ * mq / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
            In.globalAlpha = 1;
        }
        In.globalAlpha = 1;
        In.restore();
        In.restore();
    }
    function Kp() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        if (this.ⵠⵠΔ.ⲆᐃΔ) {
            if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ == 0) {
                this.ⵠⵠΔ.ⲆᐃΔ = Qr;
            }
            var b = mq * ((1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * Af * 600);
            var c = Math.sin(this.ⵠⵠΔ.angle - this.angle) * b;
            var d = b * Math.cos(this.ⵠⵠΔ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            In.rotate(this.angle);
            this.ⵠⲆⵠΔ.ⲆᐃΔ();
            if (this.info & 16) {
                var f = ᐃΔ[812][Cf.time];
            } else {
                f = ᐃΔ[188][Cf.time];
            }
            var g = this.ⵠⲆⵠΔ.ΔⲆⲆ * -f.width;
            var a = this.ⵠⲆⵠΔ.ΔⲆⲆ * -f.height;
            Mc(In, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ᐃΔ[813][Cf.time];
            } else {
                f = ᐃΔ[189][Cf.time];
            }
            In.translate(0, f.height / 2);
            Mc(In, f, c - f.width / 2, -f.height + d);
        }
        In.restore();
    }
    function Vp(a) {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        this.ⲆᐃᐃΔ.ⲆᐃΔ();
        ᐃⵠ = ᐃΔ[a][Cf.time];
        ⵠᐃΔ = -ᐃⵠ.width * this.ⲆᐃᐃΔ.ΔⲆⲆ;
        ⵠⲆⵠ = -ᐃⵠ.height * this.ⲆᐃᐃΔ.ΔⲆⲆ;
        Mc(In, ᐃⵠ, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
        In.restore();
    }
    function Xp() {
        var a = Math.PI / 2;
        var b = Math.PI / 4;
        this.ⲆᐃᐃΔ.ⲆᐃΔ();
        this.ⵠⵠⲆⵠᐃᐃⲆ.ⲆᐃΔ();
        this.ᐃᐃΔⵠⲆΔⲆ.ⲆᐃΔ();
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        c = this.info === 0 ? ᐃΔ[887][Cf.time] : ᐃΔ[886][Cf.time];
        ⵠᐃΔ = -c.width * this.ⲆᐃᐃΔ.ΔⲆⲆ;
        ⵠⲆⵠ = -c.height * this.ⲆᐃᐃΔ.ΔⲆⲆ;
        Mc(In, c, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
        if (this.action & kw.ⵠⲆΔⵠ) {
            if (this.ⵠⵠΔ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠⲆᐃ == 0) {
                this.action -= kw.ⵠⲆΔⵠ;
            }
            In.globalAlpha = 0.6 - this.ⵠⵠΔ.ΔⲆⲆ;
            var c = ᐃΔ[888];
            Mc(In, c, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
            In.globalAlpha = 1;
        }
        if (this.action & kw.ⲆΔΔⵠΔ) {
            if (this.ⵠⵠⵠⲆᐃ.ⲆᐃΔ() && gn == this.ⵠⵠⵠⲆᐃ.ⵠⲆᐃ) {
                this.action -= kw.ⲆΔΔⵠΔ;
            }
            In.globalAlpha = 0.6 - this.ⵠⵠⵠⲆᐃ.ΔⲆⲆ;
            c = ᐃΔ[891];
            Mc(In, c, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
            In.globalAlpha = 1;
        }
        In.restore();
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle + b);
        In.translate(55, 0);
        In.rotate(a);
        c = this.info === 0 ? ᐃΔ[894][Cf.time] : ᐃΔ[896][Cf.time];
        ⵠᐃΔ = this.ⵠⵠⲆⵠᐃᐃⲆ.ΔⲆⲆ * -c.width;
        ⵠⲆⵠ = this.ⵠⵠⲆⵠᐃᐃⲆ.ΔⲆⲆ * -c.height;
        Mc(In, c, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
        if (this.action & kw.ⵠⲆΔⵠ) {
            In.globalAlpha = 0.6 - this.ⵠⵠΔ.ΔⲆⲆ;
            c = ᐃΔ[889];
            Mc(In, c, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
            In.globalAlpha = 1;
        }
        if (this.action & kw.ⲆΔΔⵠΔ) {
            In.globalAlpha = 0.6 - this.ⵠⵠⵠⲆᐃ.ΔⲆⲆ;
            c = ᐃΔ[892];
            Mc(In, c, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
            In.globalAlpha = 1;
        }
        In.restore();
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle + a + b);
        In.translate(55, 0);
        In.rotate(a);
        c = this.info === 0 ? ᐃΔ[895][Cf.time] : ᐃΔ[897][Cf.time];
        ⵠᐃΔ = -c.width * this.ᐃᐃΔⵠⲆΔⲆ.ΔⲆⲆ;
        ⵠⲆⵠ = this.ᐃᐃΔⵠⲆΔⲆ.ΔⲆⲆ * -c.height;
        Mc(In, c, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
        if (this.action & kw.ⵠⲆΔⵠ) {
            In.globalAlpha = 0.6 - this.ⵠⵠΔ.ΔⲆⲆ;
            c = ᐃΔ[890];
            Mc(In, c, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
            In.globalAlpha = 1;
        }
        if (this.action & kw.ⲆΔΔⵠΔ) {
            In.globalAlpha = 0.6 - this.ⵠⵠⵠⲆᐃ.ΔⲆⲆ;
            c = ᐃΔ[893];
            Mc(In, c, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
            In.globalAlpha = 1;
        }
        In.restore();
    }
    function Zp() {
        if (this.ⵠⵠΔ.ⲆᐃΔ) {
            if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ == 0) {
                this.ⵠⵠΔ.ⲆᐃΔ = false;
            }
            var a = Af * (1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * 600 * mq;
            var b = Math.sin(this.ⵠⵠΔ.angle - this.angle) * a;
            var c = a * Math.cos(this.ⵠⵠΔ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        In.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        In.translate(Yw.ᐃⵠⵠ.x + this.x + b, Yw.ᐃⵠⵠ.y + this.y + c);
        In.rotate(this.angle);
        ᐃⵠ = ᐃΔ[153][Cf.time];
        Mc(In, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + Af * 3) % (Math.PI * 2);
        }
        In.rotate(this.rotate);
        ᐃⵠ = ᐃΔ[1198][Cf.time];
        Mc(In, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
        In.restore();
    }
    function $p() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        if (this.ⵠⵠΔ.ⲆᐃΔ) {
            if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ == 0) {
                this.ⵠⵠΔ.ⲆᐃΔ = false;
            }
            var b = mq * ((1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * Af * 600);
            var c = b * Math.sin(this.ⵠⵠΔ.angle - this.angle);
            var d = Math.cos(this.ⵠⵠΔ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            In.rotate(this.angle);
            this.ⵠⲆⵠΔ.ⲆᐃΔ();
            if (this.info & 16) {
                var f = ᐃΔ[970][Cf.time];
            } else {
                f = ᐃΔ[208][Cf.time];
            }
            var g = -f.width * this.ⵠⲆⵠΔ.ΔⲆⲆ;
            var a = -f.height * this.ⵠⲆⵠΔ.ΔⲆⲆ;
            Mc(In, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ᐃΔ[971][Cf.time];
            } else {
                f = ᐃΔ[209][Cf.time];
            }
            In.translate(0, f.height / 2);
            Mc(In, f, c - f.width / 2, -f.height + d);
        }
        In.restore();
    }
    function Wu(f, e, i, j, k, n, a, o = 0, p) {
        for (var h = f; e >= h; h++) {
            for (var q = i; j >= q; q++) {
                var r = Ww.Δᐃᐃⵠ[h][q];
                if (r !== qn && r[n] !== undefined) {
                    var s = r[n];
                    var t = ᐃΔ[k][Cf.time][s.ᐃⵠⲆⲆΔΔⲆ];
                    Mc(In, t, Yw.ᐃⵠⵠ.x + s.x - t.width / (ⲆΔⵠⵠΔ * 4), Yw.ᐃⵠⵠ.y + s.y - t.height / (ⲆΔⵠⵠΔ * 4), t.width / (ⲆΔⵠⵠΔ * 2), t.height / (ⲆΔⵠⵠΔ * 2));
                    if (mf.ⵠᐃΔⵠⲆ) {
                        var w = 2147483648;
                        var x = ((h * 1000 + q) * 1103515245 + 12345) % w / w;
                        if (x < 0.2) {
                            x = Math.floor(x * 5 * ᐃΔ[1025][Cf.time][s.ᐃⵠⲆⲆΔΔⲆ].length);
                            t = ᐃΔ[1025][Cf.time][s.ᐃⵠⲆⲆΔΔⲆ][x];
                            Mc(In, t, Yw.ᐃⵠⵠ.x + s.x - t.width / (ⲆΔⵠⵠΔ * 4), Yw.ᐃⵠⵠ.y + s.y - t.height / (ⲆΔⵠⵠΔ * 4), t.width / (ⲆΔⵠⵠΔ * 2), t.height / (ⲆΔⵠⵠΔ * 2));
                        } else if (s.ᐃⲆⲆΔⵠΔΔ !== 0) {
                            t = ᐃΔ[1026][Cf.time];
                            var y = (lp + h % 2 * 30) % 60;
                            In.globalAlpha = y < 30 ? y / 30 : 1 - (y - 30) / 30;
                            Mc(In, t, Yw.ᐃⵠⵠ.x + s.x - t.width / (ⲆΔⵠⵠΔ * 4), Yw.ᐃⵠⵠ.y + s.y - t.height / (ⲆΔⵠⵠΔ * 4) - 30 + y, t.width / (ⲆΔⵠⵠΔ * 2), t.height / (ⲆΔⵠⵠΔ * 2));
                            In.globalAlpha = 1;
                        }
                    }
                }
            }
        }
    }
    function Xu() {
        if (this.info >= 10) {
            In.save();
            In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
            In.rotate(this.angle);
            if (this.ⵠⵠΔ.ⲆᐃΔ) {
                if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ == 0) {
                    this.ⵠⵠΔ.ⲆᐃΔ = false;
                }
                var b = mq * (Af * (1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * 600);
                var c = Math.sin(this.ⵠⵠΔ.angle - this.angle) * b;
                var d = Math.cos(this.ⵠⵠΔ.angle - this.angle) * b;
            } else {
                c = 0;
                d = 0;
            }
            this.ⵠⲆⵠΔ.ⲆᐃΔ();
            var e = ᐃΔ[206][Cf.time];
            var f = -e.width * this.ⵠⲆⵠΔ.ΔⲆⲆ;
            var g = -e.height * this.ⵠⲆⵠΔ.ΔⲆⲆ;
            Mc(In, e, -f / 2 + c, -g / 2 + d, f, g);
            In.restore();
        }
    }
    function Yu() {
        if (this.info >= 10) {
            In.save();
            In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
            In.rotate(this.angle);
            if (this.ⵠⵠΔ.ⲆᐃΔ) {
                if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ == 0) {
                    this.ⵠⵠΔ.ⲆᐃΔ = Sh;
                }
                var b = Af * (1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * 600 * mq;
                var c = Math.sin(this.ⵠⵠΔ.angle - this.angle) * b;
                var d = Math.cos(this.ⵠⵠΔ.angle - this.angle) * b;
            } else {
                c = 0;
                d = 0;
            }
            this.ⵠⲆⵠΔ.ⲆᐃΔ();
            var e = ᐃΔ[115][Cf.time];
            var f = -e.width * this.ⵠⲆⵠΔ.ΔⲆⲆ;
            var g = this.ⵠⲆⵠΔ.ΔⲆⲆ * -e.height;
            Mc(In, e, -f / 2 + c, -g / 2 + d, f, g);
            In.restore();
        }
    }
    function Zu() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        if (this.ⵠⵠΔ.ⲆᐃΔ) {
            if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && ug == this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ) {
                this.ⵠⵠΔ.ⲆᐃΔ = ia;
            }
            var b = (1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * Af * 600 * mq;
            var c = Math.sin(this.ⵠⵠΔ.angle - this.angle) * b;
            var d = b * Math.cos(this.ⵠⵠΔ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            In.rotate(this.angle);
            this.ⵠⲆⵠΔ.ⲆᐃΔ();
            if (this.info & 16) {
                var f = ᐃΔ[953][Cf.time];
            } else {
                f = ᐃΔ[204][Cf.time];
            }
            var g = this.ⵠⲆⵠΔ.ΔⲆⲆ * -f.width;
            var a = -f.height * this.ⵠⲆⵠΔ.ΔⲆⲆ;
            Mc(In, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ᐃΔ[954][Cf.time];
            } else {
                f = ᐃΔ[205][Cf.time];
            }
            In.translate(0, f.height / 2);
            Mc(In, f, c - f.width / 2, -f.height + d);
        }
        In.restore();
    }
    function $u() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        if (this.ⵠⵠΔ.ⲆᐃΔ) {
            if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && rj == this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ) {
                this.ⵠⵠΔ.ⲆᐃΔ = ug;
            }
            var b = mq * ((1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * Af * 600);
            var c = b * Math.sin(this.ⵠⵠΔ.angle - this.angle);
            var d = Math.cos(this.ⵠⵠΔ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            In.rotate(this.angle);
            this.ⵠⲆⵠΔ.ⲆᐃΔ();
            if (this.info & 16) {
                var f = ᐃΔ[838][Cf.time];
            } else {
                f = ᐃΔ[191][Cf.time];
            }
            var g = -f.width * this.ⵠⲆⵠΔ.ΔⲆⲆ;
            var a = this.ⵠⲆⵠΔ.ΔⲆⲆ * -f.height;
            Mc(In, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ᐃΔ[839][Cf.time];
            } else {
                f = ᐃΔ[192][Cf.time];
            }
            In.translate(0, f.height / 2);
            Mc(In, f, c - f.width / 2, -f.height + d);
        }
        In.restore();
    }
    function _u() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        if (this.ⵠⵠΔ.ⲆᐃΔ) {
            if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && Sh == this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ) {
                this.ⵠⵠΔ.ⲆᐃΔ = mg;
            }
            var a = (1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * Af * 600 * mq;
            var b = a * Math.sin(this.ⵠⵠΔ.angle - this.angle);
            var c = a * Math.cos(this.ⵠⵠΔ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        if (this.info === 0) {
            ᐃⵠ = ᐃΔ[183][Cf.time];
        } else {
            ᐃⵠ = ᐃΔ[802][Cf.time][this.info - 1];
        }
        Mc(In, ᐃⵠ, -ᐃⵠ.width / 2 + b, -ᐃⵠ.height / 2 + c);
        In.restore();
    }
    function av() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        In.rotate(this.angle);
        this.ᐃΔΔⲆΔ.ⲆᐃΔ();
        ᐃⵠ = ᐃΔ[289][Cf.time];
        ⵠᐃΔ = -ᐃⵠ.width * this.ᐃΔΔⲆΔ.ΔⲆⲆ;
        ⵠⲆⵠ = -ᐃⵠ.height * this.ᐃΔΔⲆΔ.ΔⲆⲆ;
        Mc(In, ᐃⵠ, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
        In.restore();
    }
    function bv() {
        if (this.ⵠⵠΔ.ⲆᐃΔ) {
            if (this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠᐃⵠⵠ.ⵠⲆᐃ == 0) {
                this.ⵠⵠΔ.ⲆᐃΔ = Sh;
            }
            var a = mq * (Af * (1 - this.ⵠⵠΔ.ⵠᐃⵠⵠ.ΔⲆⲆ) * 600);
            var b = a * Math.sin(this.ⵠⵠΔ.angle - this.angle);
            var c = a * Math.cos(this.ⵠⵠΔ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        In.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        In.translate(Yw.ᐃⵠⵠ.x + this.x + b, Yw.ᐃⵠⵠ.y + this.y + c);
        In.rotate(this.angle);
        ᐃⵠ = ᐃΔ[156][Cf.time];
        Mc(In, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + Af * 3) % (Math.PI * 2);
        }
        In.rotate(this.rotate);
        ᐃⵠ = ᐃΔ[1210][Cf.time];
        Mc(In, ᐃⵠ, -ᐃⵠ.width / 2, -ᐃⵠ.height / 2);
        In.restore();
    }
    function cv(a) {
        if (a > 0) {
            var b = ᐃΔ[a][Cf.time];
            switch (a) {
                case 58:
                    Pv(a, b, -b.width / 2 + mq * 2, -b.height / 2 - mq * 5);
                    break;
                case 10:
                    Pv(a, b, -b.width / 2, -b.height / 2 - mq * 18);
                    break;
                case 11:
                    Pv(a, b, -b.width / 2, -b.height / 2 - mq * 10);
                    break;
                case 23:
                    Pv(a, b, -b.width / 2, -b.height / 2 - mq * 19);
                    break;
                case 24:
                    Gv(a, b, -b.width / 4, -b.height / 4 - mq * 20);
                    break;
                case 25:
                    Pv(a, b, -b.width / 2 - mq * 1, -b.height / 2 - mq * 23);
                    break;
                case 26:
                    Pv(a, b, -b.width / 2, -b.height / 2 - mq * 5);
                    break;
                case 27:
                    Pv(a, b, -b.width / 2, -b.height / 2 - mq * 2);
                    break;
                case 43:
                    Pv(a, b, -b.width / 2 + mq * 1.5, -b.height / 2 - mq * 1);
                    break;
                case 44:
                case 20:
                case 21:
                case 22:
                case 80:
                case 81:
                case 82:
                case 60:
                case 90:
                case 88:
                case 87:
                    Gv(a, b, -b.width / 4, -b.height / 4 + mq * 2);
                    break;
                case 41:
                case 42:
                    Pv(a, b, -b.width / 2 - mq * 5, -b.height / 2 - mq * 2);
                    break;
                case 40:
                    Pv(a, b, -b.width / 2, -b.height / 2 - mq * 2);
                    break;
                case 85:
                    Pv(a, b, -b.width / 2, -b.height / 2 - mq * 2);
                    break;
                case 48:
                    Pv(a, b, -b.width / 2, -b.height / 2 - mq * 2);
                    break;
                case 47:
                    Pv(a, b, -b.width / 2 + mq * 2, -b.height / 2);
                    break;
                case 59:
                    Pv(a, b, -b.width / 2, -b.height / 2 - mq * 5);
                    break;
                case 77:
                case 78:
                case 79:
                    Pv(a, b, -b.width / 2 - mq * 1, -b.height / 2);
                    break;
                case 83:
                    Pv(a, b, -b.width / 2, -b.height / 2 + mq * 2);
                    break;
                case 84:
                case 86:
                    Pv(a, b, -b.width / 2, -b.height / 2 + mq * 8);
                    break;
                case 61:
                    Pv(a, b, -b.width / 2, -b.height / 2 - mq * 4);
            }
        }
    }
    function dv() {
        if (!this.ⵠΔΔⵠΔ && this.ΔᐃⲆⲆᐃ !== 0) {
            if (this.r.x != this.x || this.r.y != this.y) {
                var a = (ΔⲆⲆⵠ.ⲆⵠΔᐃᐃᐃᐃ(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (Math.PI * 2);
                this.ⲆⲆΔᐃΔ = ΔⲆⲆⵠ.ᐃᐃᐃᐃᐃᐃⲆ(a, this.ⲆⲆΔᐃΔ);
                this.ⲆⲆΔᐃΔ = ΔⲆⲆⵠ.ⵠⲆΔⲆΔⲆⲆ(this.ⲆⲆΔᐃΔ, a, 0.018);
            }
            In.save();
            In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
            In.rotate(this.ⲆⲆΔᐃΔ);
            if (this.ΔᐃⲆⲆᐃ === 223) {
                if (this.ΔᐃΔⲆⲆ > 50 || this.ᐃᐃᐃΔⲆ > 0) {
                    if (this.ΔᐃΔⲆⲆ > 50) {
                        this.ᐃᐃᐃΔⲆ = Math.min(1, this.ᐃᐃᐃΔⲆ + Af);
                    } else {
                        this.ᐃᐃᐃΔⲆ = Math.max(0, this.ᐃᐃᐃΔⲆ - Af);
                    }
                    In.globalAlpha = this.ᐃᐃᐃΔⲆ;
                    var b = ᐃΔ[225][Cf.time];
                    Gv(225, b, -b.width / 4, -b.height / 4);
                    In.globalAlpha = 1;
                }
                b = ᐃΔ[223][Cf.time];
                Gv(223, b, -b.width / 4, -b.height / 4);
            } else if (this.ΔᐃⲆⲆᐃ === 229) {
                this.ᐃᐃᐃⵠⵠ = ΔⲆⲆⵠ.ⵠⲆΔⲆΔⲆⲆ(this.ᐃᐃᐃⵠⵠ, this.ΔᐃΔⲆⲆ, 0.018);
                this.ΔΔⲆⵠⵠⵠⵠ.ⲆᐃΔ();
                if (this.ΔᐃΔⲆⲆ > 85) {
                    this.ᐃᐃᐃΔⲆ = Math.min(1, this.ᐃᐃᐃΔⲆ + Af / 4);
                } else {
                    this.ᐃᐃᐃΔⲆ = Math.max(0.1, this.ᐃᐃᐃΔⲆ - Af);
                }
                b = ᐃΔ[1100][Cf.time];
                Gv(1100, b, -b.width / 4, -b.height / 4);
                b = ᐃΔ[1103][Cf.time];
                ⵠᐃΔ = -b.width;
                ⵠⲆⵠ = -b.height;
                In.save();
                In.translate(mq * -20, mq * -20);
                In.rotate(this.ᐃᐃᐃΔⲆ * this.ΔΔⲆⵠⵠⵠⵠ.ΔⲆⲆ);
                Mc(In, b, -ⵠᐃΔ / 4, -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
                In.restore();
                b = ᐃΔ[1106][Cf.time];
                In.save();
                In.translate(mq * 20, mq * -20);
                In.rotate(this.ᐃᐃᐃΔⲆ * -this.ΔΔⲆⵠⵠⵠⵠ.ΔⲆⲆ);
                Mc(In, b, -ⵠᐃΔ / 4, -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
                In.restore();
            } else if (this.ΔᐃⲆⲆᐃ === 228) {
                this.ᐃᐃᐃⵠⵠ = ΔⲆⲆⵠ.ⵠⲆΔⲆΔⲆⲆ(this.ᐃᐃᐃⵠⵠ, this.ΔᐃΔⲆⲆ, 0.018);
                this.ΔΔⲆⵠⵠⵠⵠ.ⲆᐃΔ();
                if (this.ΔᐃΔⲆⲆ > 85) {
                    this.ᐃᐃᐃΔⲆ = Math.min(1, this.ᐃᐃᐃΔⲆ + Af / 4);
                } else {
                    this.ᐃᐃᐃΔⲆ = Math.max(0.1, this.ᐃᐃᐃΔⲆ - Af);
                }
                b = ᐃΔ[1085][Cf.time];
                Gv(1085, b, -b.width / 4, -b.height / 4);
                b = ᐃΔ[1088][Cf.time];
                ⵠᐃΔ = -b.width;
                ⵠⲆⵠ = -b.height;
                In.save();
                In.translate(mq * -40, mq * -45);
                In.rotate(this.ᐃᐃᐃΔⲆ * this.ΔΔⲆⵠⵠⵠⵠ.ΔⲆⲆ);
                Mc(In, b, -ⵠᐃΔ / 4, -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
                In.restore();
                b = ᐃΔ[1091][Cf.time];
                In.save();
                In.translate(mq * 40, mq * -45);
                In.rotate(-this.ΔΔⲆⵠⵠⵠⵠ.ΔⲆⲆ * this.ᐃᐃᐃΔⲆ);
                Mc(In, b, -ⵠᐃΔ / 4, -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
                In.restore();
            } else if (this.ΔᐃⲆⲆᐃ === 227) {
                this.ᐃᐃᐃⵠⵠ = ΔⲆⲆⵠ.ⵠⲆΔⲆΔⲆⲆ(this.ᐃᐃᐃⵠⵠ, this.ΔᐃΔⲆⲆ, 0.018);
                this.ΔΔⲆⵠⵠⵠⵠ.ⲆᐃΔ();
                if (this.ΔᐃΔⲆⲆ > 85) {
                    this.ᐃᐃᐃΔⲆ = Math.min(1, this.ᐃᐃᐃΔⲆ + Af / 4);
                } else {
                    this.ᐃᐃᐃΔⲆ = Math.max(0.1, this.ᐃᐃᐃΔⲆ - Af);
                }
                b = ᐃΔ[1070][Cf.time];
                Gv(1070, b, -b.width / 4, -b.height / 4);
                b = ᐃΔ[1073][Cf.time];
                ⵠᐃΔ = -b.width;
                ⵠⲆⵠ = -b.height;
                In.save();
                In.translate(mq * -40, mq * -45);
                In.rotate(this.ΔΔⲆⵠⵠⵠⵠ.ΔⲆⲆ * this.ᐃᐃᐃΔⲆ);
                Mc(In, b, -ⵠᐃΔ / 4, -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
                In.restore();
                b = ᐃΔ[1076][Cf.time];
                In.save();
                In.translate(mq * 40, mq * -45);
                In.rotate(-this.ΔΔⲆⵠⵠⵠⵠ.ΔⲆⲆ * this.ᐃᐃᐃΔⲆ);
                Mc(In, b, -ⵠᐃΔ / 4, -ⵠⲆⵠ / 4, ⵠᐃΔ / 2, ⵠⲆⵠ / 2);
                In.restore();
            } else if (this.ΔᐃⲆⲆᐃ === 91) {
                this.ᐃᐃᐃⵠⵠ = ΔⲆⲆⵠ.ⵠⲆΔⲆΔⲆⲆ(this.ᐃᐃᐃⵠⵠ, this.ΔᐃΔⲆⲆ, 0.018);
                b = ᐃΔ[91][Cf.time];
                Gv(91, b, -b.width / 4, -b.height / 4);
            } else if (this.ΔᐃⲆⲆᐃ === 230) {
                this.ᐃᐃᐃⵠⵠ = ΔⲆⲆⵠ.ⵠⲆΔⲆΔⲆⲆ(this.ᐃᐃᐃⵠⵠ, this.ΔᐃΔⲆⲆ, 0.018);
                b = ᐃΔ[236][Cf.time];
                Gv(236, b, -b.width / 4, -b.height / 4);
            } else if (this.ΔᐃⲆⲆᐃ === 224) {
                b = ᐃΔ[224][Cf.time];
                Gv(224, b, -b.width / 4, -b.height / 4);
            } else if (this.ΔᐃⲆⲆᐃ === 239) {
                b = ᐃΔ[1221][Cf.time];
                if (this.ΔᐃΔⲆⲆ > 85) {
                    this.ᐃᐃᐃΔⲆ = Math.min(1, this.ᐃᐃᐃΔⲆ + Af / 4);
                } else {
                    this.ᐃᐃᐃΔⲆ = Math.max(0, this.ᐃᐃᐃΔⲆ - Af);
                }
                this.ΔΔⲆⵠΔ += Af * 60;
                if (this.ΔΔⲆⵠΔ > 60) {
                    this.ΔΔⲆⵠΔ -= 60;
                }
                var c = this.ᐃᐃᐃΔⲆ * ((this.ΔΔⲆⵠΔ < 30 ? this.ΔΔⲆⵠΔ / 30 : 1 - (this.ΔΔⲆⵠΔ - 30) / 30) * 12 - 6);
                Gv(1221, b, -b.width / 4, -b.height / 4 + c);
            } else if (this.ΔᐃⲆⲆᐃ === 225) {
                b = ᐃΔ[1043][Cf.time];
                if (this.ΔᐃΔⲆⲆ > 85) {
                    this.ᐃᐃᐃΔⲆ = Math.min(1, this.ᐃᐃᐃΔⲆ + Af / 4);
                } else {
                    this.ᐃᐃᐃΔⲆ = Math.max(0, this.ᐃᐃᐃΔⲆ - Af);
                }
                this.ΔΔⲆⵠΔ += Af * 60;
                if (this.ΔΔⲆⵠΔ > 60) {
                    this.ΔΔⲆⵠΔ -= 60;
                }
                c = ((this.ΔΔⲆⵠΔ < 30 ? this.ΔΔⲆⵠΔ / 30 : 1 - (this.ΔΔⲆⵠΔ - 30) / 30) * 12 - 6) * this.ᐃᐃᐃΔⲆ;
                Gv(1043, b, -b.width / 4, -b.height / 4 + c);
            } else if (this.ΔᐃⲆⲆᐃ === 226) {
                var d = Math.PI / 2;
                var e = Math.PI / 4;
                b = ᐃΔ[1055][Cf.time];
                if (this.ΔᐃΔⲆⲆ > 85) {
                    this.ᐃᐃᐃΔⲆ = Math.min(1, this.ᐃᐃᐃΔⲆ + Af / 4);
                } else {
                    this.ᐃᐃᐃΔⲆ = Math.max(0, this.ᐃᐃᐃΔⲆ - Af);
                }
                this.ΔΔⲆⵠΔ += Af * 60;
                if (this.ΔΔⲆⵠΔ > 60) {
                    this.ΔΔⲆⵠΔ -= 60;
                }
                c = (-6 + (this.ΔΔⲆⵠΔ < 30 ? this.ΔΔⲆⵠΔ / 30 : 1 - (this.ΔΔⲆⵠΔ - 30) / 30) * 12) * this.ᐃᐃᐃΔⲆ;
                Gv(1055, b, -b.width / 4 + c, -b.height / 4);
                In.restore();
                In.save();
                In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
                In.rotate(Math.PI + this.ⲆⲆΔᐃΔ + e);
                In.translate(120, c);
                In.rotate(d);
                b = ᐃΔ[1060][Cf.time];
                ⵠᐃΔ = -b.width;
                ⵠⲆⵠ = -b.height;
                Mc(In, b, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
                In.restore();
                In.save();
                In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
                In.rotate(Math.PI + this.ⲆⲆΔᐃΔ + d + e);
                In.translate(120, c);
                In.rotate(d);
                b = ᐃΔ[1063][Cf.time];
                ⵠᐃΔ = -b.width;
                ⵠⲆⵠ = -b.height;
                Mc(In, b, -ⵠᐃΔ / 2, -ⵠⲆⵠ / 2, ⵠᐃΔ, ⵠⲆⵠ);
            }
            In.restore();
        }
    }
    function ev(b, c, d) {
        if (c.ᐃⲆⵠΔΔⵠⲆ() !== 1) {
            return c;
        }
        var e = ⲆⲆⲆΔⲆⵠⵠ[d][b];
        if (e === Oo) {
            var f = (e = document.createElement("canvas")).getContext("2d");
            var g = c.width;
            var a = c.height;
            e.width = g;
            e.height = a;
            f.drawImage(c, 0, 0);
            f.globalCompositeOperation = "source-in";
            f.fillStyle = ⵠⵠᐃΔΔᐃⵠΔⲆ[d];
            f.fillRect(0, 0, g, a);
            ⲆⲆⲆΔⲆⵠⵠ[d][b] = e;
        }
        return e;
    }
    function fv() {
        if (this.message !== ns) {
            var a = Yw.ⵠᐃΔᐃ.ⵠᐃⲆⵠᐃ.length > 0 ? -95 : 0;
            Mc(In, this.message, 0, iq - this.message.height + a);
        }
    }
    function gv() {
        if (this.enabled && this.ΔⵠⵠⲆΔ >= 0) {
            var a = new Date().getTime() - this.ΔⵠⵠⲆΔ;
            var b = a % 1000 / 1000;
            if (b > 0.5) {
                b = 1 - (b - 0.5) * 2;
            } else {
                b *= 2;
            }
            if ((a = Math.floor(a / 1000)) < qw.ⲆᐃΔΔᐃΔⲆ) {
                a = qw.ⲆᐃΔΔᐃΔⲆ - a;
                if (!this.label) {
                    this.label = Dd(mq, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
                }
                if (this.now != a || !this.ΔΔᐃⲆⲆⵠΔ) {
                    this.now = a;
                    this.ΔΔᐃⲆⲆⵠΔ = Dd(mq, "" + a, 40, "#660000", null, null, null, null, null, "#000", 10);
                }
                Mc(In, this.label, (Rn - this.label.width) / 2, mq * 100);
                In.globalAlpha = b;
                Mc(In, this.ΔΔᐃⲆⲆⵠΔ, (Rn - this.label.width) / 2 - this.ΔΔᐃⲆⲆⵠΔ.width + mq * 15, mq * 100);
                In.globalAlpha = 1;
            }
        }
    }
    function hv(a, b) {
        if (this.text) {
            if (this.timeout.ⵠⲆᐃ) {
                In.globalAlpha = 1 - this.timeout.ΔⲆⲆ;
            } else {
                In.globalAlpha = 1;
            }
            this.label ||= Dd(mq, this.text, 40, a, null, null, null, null, null, b, 10);
            Mc(In, this.label, (Rn - this.label.width) / 2, mq * 50);
            In.globalAlpha = 1;
            if (this.timeout.ⲆᐃΔ() && this.timeout.ⵠⲆᐃ == Cr) {
                this.text = this.list.shift();
                this.label = null;
            }
        }
    }
    function iv() {
        var c = 0;
        switch (this.right) {
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
                c = 1;
        }
        if (this.ⵠΔΔⵠΔ) {
            for (var f = 0; this.bubbles.length > f; f++) {
                var j = this.bubbles[f];
                if (j.ⲆⵠΔΔⲆ > 0.5) {
                    var k = 1 - (j.ⲆⵠΔΔⲆ - 0.5) * 2;
                } else {
                    k = j.ⲆⵠΔΔⲆ * 2;
                }
                In.globalAlpha = k;
                var m = ᐃΔ[540][Cf.time][j.id];
                Mc(In, m, Yw.ᐃⵠⵠ.x + j.x - m.width / 2, Yw.ᐃⵠⵠ.y + j.y - m.height / 2);
                In.globalAlpha = 1;
            }
        } else {
            In.save();
            In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
            Cf.ⲆⲆᐃⵠᐃᐃⲆⲆⵠ(this);
            if (this.action & kw.ΔⵠⲆᐃΔⵠⵠ) {
                (function (a) {
                    if (a.right >= 0) {
                        switch (a.right) {
                            case 49:
                                In.save();
                                var b = a.attack.ΔⲆⲆ * -3 / Math.PI;
                                if (a.attack.ⵠⲆᐃ) {
                                    var c = -Math.PI / 3 - (Math.PI / 3 + a.attack.ΔⲆⲆ) / 3;
                                } else {
                                    c = a.attack.ΔⲆⲆ;
                                }
                                In.rotate(a.angle - Math.PI / 2 + c);
                                In.globalAlpha = b / 1.2;
                                ut(In, mq * -40, mq * 90, mq * 5);
                                vt(In, "#0B6A84");
                                In.globalAlpha = b / 1.2;
                                ut(In, mq * -52, mq * 100, mq * 8);
                                vt(In, "#0B6A84");
                                In.globalAlpha = b / 1.2;
                                ut(In, mq * -30, mq * 95, mq * 4);
                                vt(In, "#0B6A84");
                                In.globalAlpha = 1;
                                In.restore();
                                break;
                            case 46:
                            case 50:
                            case 51:
                            case 52:
                                if (a.ⲆΔΔΔⵠⵠⵠ === 1) {
                                    break;
                                }
                                if (a.ⲆᐃᐃΔⲆ > 0) {
                                    var d = nr.ᐃⵠΔⲆⲆⵠⲆ[Cf.time];
                                } else {
                                    d = a.ⲆΔⵠⵠⲆⲆⲆ > 0 || a.ⵠᐃⵠⲆᐃ > 0 ? nr.ⲆⵠⵠᐃᐃⵠⲆ[Cf.time] : nr.ⲆⲆᐃⵠΔᐃΔ[Cf.time];
                                }
                                b = a.attack.ΔⲆⲆ * -3 / Math.PI;
                                if ((c = a.attack.ⵠⲆᐃ ? Math.max(0.5 - b / 2 + 0.5, 0) : Math.max(b / 2, 0)) === 0) {
                                    a.ᐃᐃᐃⲆΔⲆⲆ = a.angle;
                                }
                                In.save();
                                In.rotate(a.ᐃᐃᐃⲆΔⲆⲆ - Math.PI / 2);
                                In.globalAlpha = b;
                                var e = mq * 25 + c * 25;
                                ut(In, e, mq * 80, mq * 15);
                                vt(In, d);
                                ut(In, -e, mq * 80, mq * 15);
                                vt(In, d);
                                In.globalAlpha = 1;
                                In.restore();
                        }
                    }
                })(this);
            }
            In.save();
            In.rotate(this.angle - Math.PI / 2);
            if (!(this.action & kw.ΔⵠⲆᐃΔⵠⵠ)) {
                if (this.action & kw.IDLE || this.ΔᐃⲆⲆᐃ !== 0) {
                    this.ⲆΔⲆΔᐃⲆⲆ.ⲆᐃΔ();
                } else if (this.action & kw.ΔⲆΔⵠᐃᐃΔ) {
                    this.ΔⲆᐃⵠΔᐃᐃ.ⲆᐃΔ();
                }
            }
            var p;
            var q = this.ⲆΔⲆΔᐃⲆⲆ.ΔⲆⲆ;
            var v = this.ΔⲆᐃⵠΔᐃᐃ.ΔⲆⲆ;
            if (this.ᐃΔΔᐃⲆ === 85) {
                m = ᐃΔ[793][Cf.time];
                p = 793;
            } else if (this.ᐃΔΔᐃⲆ === 20) {
                m = ᐃΔ[920][Cf.time];
                p = 920;
            } else if (this.ᐃΔΔᐃⲆ === 21) {
                m = ᐃΔ[924][Cf.time];
                p = 924;
            } else if (this.ᐃΔΔᐃⲆ === 22) {
                m = ᐃΔ[928][Cf.time];
                p = 928;
            } else if (this.ΔⲆⵠᐃΔⵠⵠ) {
                m = ᐃΔ[822][Cf.time];
                p = 822;
            } else {
                m = ᐃΔ[7][this.ᐃᐃᐃⵠ][Cf.time];
                p = 7;
            }
            ΔⲆⲆⲆ = ᐃΔ[286][Cf.time];
            var w = m;
            var h = p;
            if (this.action & kw.ΔⵠⲆᐃΔⵠⵠ) {
                if (this.attack.ⲆᐃΔ() && this.attack.ⵠⲆᐃ == 0) {
                    this.ᐃᐃⵠⲆⲆ = !this.ᐃᐃⵠⲆⲆ;
                    this.action -= kw.ΔⵠⲆᐃΔⵠⵠ;
                    if (Yw.ⵠΔⲆΔ == this.ⵠΔⲆΔ) {
                        Yw.control.ⲆⵠΔΔ = 0;
                    }
                }
                if (this.right >= 0) {
                    this.ᐃᐃⵠⲆⲆ = Ds;
                }
                var l = this.ᐃᐃⵠⲆⲆ ? this.attack.ΔⲆⲆ : -this.attack.ΔⲆⲆ / 3;
                var x = this.ᐃᐃⵠⲆⲆ ? this.attack.ΔⲆⲆ / 3 : -this.attack.ΔⲆⲆ;
                if (this.ΔⲆⵠᐃΔⵠⵠ) {
                    In.save();
                    In.rotate(l);
                    Pv(p, m, -m.width / 2 - mq * (66 + q), -m.height / 2 + (5 + v) * mq);
                    In.restore();
                    In.save();
                    In.rotate(x);
                    Pv(p, m, -m.width / 2 + mq * (66 + q), -m.height / 2 + (5 + v) * mq);
                    In.restore();
                } else if (c === 0) {
                    if (this.right === 64) {
                        l = -ΔⲆⲆⵠ.ⵠΔⵠⲆΔⵠⲆ(-l);
                    }
                    In.save();
                    In.rotate(l);
                    Pv(286, ΔⲆⲆⲆ, -ΔⲆⲆⲆ.width / 2 - (49 + q) * mq, -ΔⲆⲆⲆ.height / 2 + mq * (15 + v));
                    if (this.right === 28) {
                        var u = ᐃΔ[this.right][this.ΔⵠΔΔⵠ][Cf.time];
                        zv(this.right, this.ΔⵠΔΔⵠ, u, -u.width / 4 - (62 + q) * mq, -u.height / 4 + mq * (v + 18));
                    } else {
                        Qp(this.right, q, v);
                    }
                    if (p >= 920) {
                        Gv(p, m, -m.width / 4 - (49 + q) * mq, -m.height / 4 + (11 + v) * mq);
                    } else if (p !== 793) {
                        zv(p, this.ᐃᐃᐃⵠ, m, -m.width / 4 - mq * (49 + q), -m.height / 4 + mq * (11 + v));
                    } else {
                        Pv(p, m, -m.width / 2 - (49 + q) * mq, -m.height / 2 + mq * (11 + v));
                    }
                    In.restore();
                    In.save();
                    In.rotate(x);
                    Pv(286, ΔⲆⲆⲆ, -ΔⲆⲆⲆ.width / 2 + mq * (49 + q), -ΔⲆⲆⲆ.height / 2 + (15 + v) * mq);
                    if (p >= 920) {
                        Gv(p, m, -m.width / 4 + mq * (49 + q), -m.height / 4 + mq * (11 + v));
                    } else if (p !== 793) {
                        zv(p, this.ᐃᐃᐃⵠ, m, -m.width / 4 + mq * (49 + q), -m.height / 4 + mq * (11 + v));
                    } else {
                        Pv(p, m, -m.width / 2 + mq * (49 + q), -m.height / 2 + mq * (11 + v));
                    }
                    In.restore();
                }
            } else if (this.ΔⲆⵠᐃΔⵠⵠ) {
                Pv(p, m, -m.width / 2 - mq * (66 + q), -m.height / 2 + mq * (5 + v));
                Pv(p, m, -m.width / 2 + (66 + q) * mq, -m.height / 2 + mq * (5 + v));
            } else if (c === 0) {
                Pv(286, ΔⲆⲆⲆ, -ΔⲆⲆⲆ.width / 2 - (49 + q) * mq, -ΔⲆⲆⲆ.height / 2 + mq * (15 + v));
                if (this.right === 28) {
                    u = ᐃΔ[this.right][this.ΔⵠΔΔⵠ][Cf.time];
                    zv(this.right, this.ΔⵠΔΔⵠ, u, -u.width / 4 - mq * (62 + q), -u.height / 4 + (v + 18) * mq);
                } else {
                    Qp(this.right, q, v);
                }
                if (p >= 920) {
                    Gv(p, m, -m.width / 4 - mq * (49 + q), -m.height / 4 + mq * (11 + v));
                } else if (p !== 793) {
                    zv(p, this.ᐃᐃᐃⵠ, m, -m.width / 4 - mq * (49 + q), -m.height / 4 + (11 + v) * mq);
                } else {
                    Pv(p, m, -m.width / 2 - (49 + q) * mq, -m.height / 2 + (11 + v) * mq);
                }
                Pv(286, ΔⲆⲆⲆ, -ΔⲆⲆⲆ.width / 2 + mq * (49 + q), -ΔⲆⲆⲆ.height / 2 + mq * (15 + v));
                if (p >= 920) {
                    Gv(p, m, -m.width / 4 + mq * (49 + q), -m.height / 4 + mq * (11 + v));
                } else if (p !== 793) {
                    zv(p, this.ᐃᐃᐃⵠ, m, -m.width / 4 + mq * (49 + q), -m.height / 4 + mq * (11 + v));
                } else {
                    Pv(p, m, -m.width / 2 + (49 + q) * mq, -m.height / 2 + mq * (11 + v));
                }
            }
            if (this.ⲆⲆᐃⵠⲆ && this.ᐃΔΔᐃⲆ < 1) {
                m = ᐃΔ[29][this.ᐃΔΔᐃⵠⲆΔ][Cf.time];
                zv(29, this.ᐃΔΔᐃⵠⲆΔ, m, -m.width / 4, -m.height / 4 - mq * 39);
            }
            if (this.ΔⲆⵠᐃΔⵠⵠ) {
                m = ᐃΔ[820][Cf.time];
                Pv(820, m, -m.width / 2, -m.height / 2);
                this.ⵠᐃⵠⲆⵠᐃΔ.ⲆᐃΔ();
                m = ᐃΔ[821][Cf.time];
                Pv(821, m, -m.width / 2, -m.height / 2 + this.ⵠᐃⵠⲆⵠᐃΔ.ΔⲆⲆ);
            } else {
                m = ᐃΔ[255][this.ᐃᐃᐃⵠ][Cf.time];
                if (this.ᐃΔΔᐃⲆ !== 85 && (zv(255, this.ᐃᐃᐃⵠ, m, -m.width / 4, -m.height / 4), this.ΔᐃᐃⲆⲆ > 0)) {
                    m = ᐃΔ[796][this.ΔᐃᐃⲆⲆ][Cf.time];
                    zv(796, this.ΔᐃᐃⲆⲆ, m, -m.width / 4, -m.height / 4);
                }
            }
            if (this.action & kw.ΔᐃⲆⲆⲆΔΔ) {
                if (this.ⵠⵠⵠⲆᐃ.ⲆᐃΔ() && this.ⵠⵠⵠⲆᐃ.ⵠⲆᐃ == 0) {
                    this.action -= kw.ΔᐃⲆⲆⲆΔΔ;
                }
                In.globalAlpha = 0.6 - this.ⵠⵠⵠⲆᐃ.ΔⲆⲆ;
                if (this.ΔⲆⵠᐃΔⵠⵠ) {
                    m = ᐃΔ[825];
                    Mc(In, m, -m.width / 2, -m.height / 2);
                } else {
                    m = ev(this.ᐃᐃᐃⵠ, ᐃΔ[255][this.ᐃᐃᐃⵠ][0], ΔᐃΔᐃΔⲆⵠΔⵠ);
                    Mc(In, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
                }
                In.globalAlpha = 1;
            }
            if (this.action & kw.ⵠⵠⵠΔᐃΔⲆ) {
                if (this.ΔΔⵠⵠᐃᐃᐃ.ⲆᐃΔ() && this.ΔΔⵠⵠᐃᐃᐃ.ⵠⲆᐃ == 0) {
                    this.action -= kw.ⵠⵠⵠΔᐃΔⲆ;
                }
                In.globalAlpha = 0.6 - this.ΔΔⵠⵠᐃᐃᐃ.ΔⲆⲆ;
                m = ᐃΔ[266];
                Mc(In, m, -m.width / 2, -m.height / 2);
                In.globalAlpha = 1;
            }
            if (this.action & kw.ⵠⲆΔⵠ) {
                if (this.ⵠⵠΔ.ⲆᐃΔ() && this.ⵠⵠΔ.ⵠⲆᐃ == 0) {
                    this.action -= kw.ⵠⲆΔⵠ;
                }
                In.globalAlpha = 0.6 - this.ⵠⵠΔ.ΔⲆⲆ;
                if (this.ΔⲆⵠᐃΔⵠⵠ) {
                    m = ᐃΔ[823];
                    Mc(In, m, -m.width / 2, -m.height / 2);
                } else {
                    m = ev(this.ᐃᐃᐃⵠ, ᐃΔ[255][this.ᐃᐃᐃⵠ][0], ⵠⵠᐃⵠⵠⲆᐃΔⲆ);
                    Mc(In, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
                }
                In.globalAlpha = 1;
            }
            if (this.action & kw.ⲆΔΔⵠΔ) {
                if (this.freeze.ⲆᐃΔ() && this.freeze.ⵠⲆᐃ == 0) {
                    this.action -= kw.ⲆΔΔⵠΔ;
                }
                In.globalAlpha = 0.6 - this.freeze.ΔⲆⲆ;
                m = ev(this.ᐃᐃᐃⵠ, ᐃΔ[255][this.ᐃᐃᐃⵠ][0], ΔᐃⵠⵠⵠⵠⲆᐃᐃ);
                Mc(In, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
                In.globalAlpha = 1;
            }
            if (this.action & kw.ΔΔⲆΔᐃⲆⲆ) {
                if (this.ΔᐃⵠΔΔⲆⲆ.ⲆᐃΔ() && this.ΔᐃⵠΔΔⲆⲆ.ⵠⲆᐃ == 0) {
                    this.action -= kw.ΔΔⲆΔᐃⲆⲆ;
                }
                In.globalAlpha = 0.6 - this.ΔᐃⵠΔΔⲆⲆ.ΔⲆⲆ;
                if (this.ΔⲆⵠᐃΔⵠⵠ) {
                    m = ᐃΔ[824];
                    Mc(In, m, -m.width / 2, -m.height / 2);
                } else {
                    m = ev(this.ᐃᐃᐃⵠ, ᐃΔ[255][this.ᐃᐃᐃⵠ][0], ᐃᐃΔⵠΔΔⲆⵠΔ);
                    Mc(In, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
                }
                In.globalAlpha = 1;
            }
            cv(this.ᐃΔΔᐃⲆ);
            if (c === 1) {
                if (this.action & kw.ΔⵠⲆᐃΔⵠⵠ) {
                    q += this.attack.ΔⲆⲆ * 15;
                }
                Pv(286, ΔⲆⲆⲆ, -ΔⲆⲆⲆ.width / 2 - mq * 26, -ΔⲆⲆⲆ.height / 2 + (31 + v + q) * mq);
                if (h >= 920) {
                    Gv(h, w, -w.width / 4 - mq * 26, -w.height / 4 + (27 + v + q) * mq);
                } else if (h !== 793) {
                    zv(h, this.ᐃᐃᐃⵠ, w, -w.width / 4 - mq * 26, -w.height / 4 + (27 + v + q) * mq);
                } else {
                    Pv(h, w, -w.width / 2 - mq * 26, -w.height / 2 + mq * (27 + v + q));
                }
                Pv(286, ΔⲆⲆⲆ, -ΔⲆⲆⲆ.width / 2 + mq * 26, -ΔⲆⲆⲆ.height / 2 + mq * (31 + v + q));
                if (h >= 920) {
                    Gv(h, w, -w.width / 4 + mq * 26, -w.height / 4 + (27 + v + q) * mq);
                } else if (h !== 793) {
                    zv(h, this.ᐃᐃᐃⵠ, w, -w.width / 4 + mq * 26, -w.height / 4 + (27 + v + q) * mq);
                } else {
                    Pv(h, w, -w.width / 2 + mq * 26, -w.height / 2 + (27 + v + q) * mq);
                }
                wp(this.right, 0, v + q);
            }
            In.restore();
            if (this.ᐃΔΔᐃⲆ !== 83 && this.ᐃΔΔᐃⲆ !== 85) {
                if (this.ⲆᐃᐃΔⲆ > 0) {
                    this.ᐃⲆⲆΔ.ⵠⵠᐃᐃΔⲆⲆ ||= Dd(mq, this.ᐃⲆⲆΔ.Δᐃⵠⵠᐃ, 20, "#187484", "#000", 2, null, null, mq * 300);
                    m = this.ᐃⲆⲆΔ.ⵠⵠᐃᐃΔⲆⲆ;
                } else {
                    this.ᐃⲆⲆΔ.label ||= Dd(mq, this.ᐃⲆⲆΔ.Δᐃⵠⵠᐃ, 20, "#FFF", "#000", 2, null, null, mq * 300);
                    m = this.ᐃⲆⲆΔ.label;
                }
                if (nr.ᐃᐃⲆ == Cf.Ⲇⵠᐃ) {
                    In.globalAlpha = 0.5;
                }
                q = Math.floor(-m.width / 2);
                v = Math.floor(-m.height / 2 - mq * 70);
                Mc(In, m, q, v);
                if (this.ᐃⲆⲆΔ.level > 0) {
                    var y = q + m.width + 5;
                    m = ᐃΔ[885];
                    if (ⲆΔᐃᐃΔⲆᐃ[this.ᐃⲆⲆΔ.level] === Da) {
                        ⲆΔᐃᐃΔⲆᐃ[this.ᐃⲆⲆΔ.level] = Dd(mq, "[" + this.ᐃⲆⲆΔ.level + "]", 20, "#F9E8A2", "#000", 2, null, null, mq * 50);
                    }
                    Mc(In, ⲆΔᐃᐃΔⲆᐃ[this.ᐃⲆⲆΔ.level], y, v);
                }
                In.globalAlpha = 1;
            } else {
                v = Math.floor(mq * -70);
                q = Math.floor(ᐃΔ[558].width / 1.5);
            }
            if (Yw.ᐃΔΔⲆⵠΔⲆ(this.ⲆⵠΔⵠ)) {
                if (this.ⲆⵠΔⵠ == Yw.ⵠΔⵠᐃⲆ[0]) {
                    m = ᐃΔ[559];
                } else {
                    m = ᐃΔ[558];
                }
                Mc(In, m, q - m.width - 5, v - 6);
            }
            In.restore();
        }
    }
    function jv() {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + this.x, Yw.ᐃⵠⵠ.y + this.y);
        if (this.text.length > 0) {
            for (var a = 0; a < this.text.length && a < 2; a++) {
                if (!this.label[a]) {
                    this.label[a] = Et(mq, this.text[a]);
                    this.ΔᐃⲆᐃⲆΔⲆ[a] = 0;
                    this.ᐃⲆⲆᐃⲆⵠⵠ[a] = 0;
                }
                if (a === 1) {
                    this.ᐃⲆⲆᐃⲆⵠⵠ[0] = ΔⲆⲆⵠ.ΔᐃⲆΔⵠ(this.ⵠᐃΔⲆⲆΔⲆ) * 30;
                }
            }
            this.ΔᐃⲆᐃⲆΔⲆ[0] += Af;
            if (this.text.length > 1) {
                this.ⵠᐃΔⲆⲆΔⲆ = Math.min(this.ⵠᐃΔⲆⲆΔⲆ + Af, 1);
                if (this.ΔᐃⲆᐃⲆΔⲆ[0] > 1 && this.ⵠᐃΔⲆⲆΔⲆ > 0.5) {
                    this.ΔᐃⲆᐃⲆΔⲆ[1] += Af;
                }
            }
            for (a = 0; this.text.length > a && a < 2; a++) {
                var b = this.ΔᐃⲆᐃⲆΔⲆ[a];
                if (b > 0) {
                    In.globalAlpha = b < 0.25 ? b * 4 : b > 3.75 ? Math.max((4 - b) * 4, 0) : 1;
                    Mc(In, this.label[a], -this.label[a].width / 2, -this.ᐃⲆⲆᐃⲆⵠⵠ[a] + -this.label[a].height / 2 - mq * 110);
                }
            }
            if (this.ΔᐃⲆᐃⲆΔⲆ[0] > 4) {
                this.ΔᐃⲆᐃⲆΔⲆ.shift();
                this.text.shift();
                this.ᐃⲆⲆᐃⲆⵠⵠ.shift();
                this.label.shift();
                this.ⵠᐃΔⲆⲆΔⲆ = 0;
            }
        }
        In.restore();
    }
    ⵠⵠᐃⵠⵠⲆᐃΔⲆ = 0;
    ΔᐃΔᐃΔⲆⵠΔⵠ = 1;
    ΔᐃⵠⵠⵠⵠⲆᐃᐃ = 2;
    ᐃᐃΔⵠΔΔⲆⵠΔ = 3;
    ⵠΔⵠΔⵠⲆΔⲆᐃ = 4;
    ⲆⲆⲆΔⲆⵠⵠ = [[], [], [], [], []];
    ⵠⵠᐃΔΔᐃⵠΔⲆ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
    var kv = 0;
    function lv(j, e, i, k, n, o, a, q = 0) {
        Cf.ⲆᐃᐃΔ[n].ⲆᐃΔ();
        for (var r = a; q <= r; r--) {
            for (var s = j; e >= s; s++) {
                for (var t = i; t <= k; t++) {
                    var w = Ww.Δᐃᐃⵠ[s][t];
                    if (w && w[o]) {
                        var x = w[o][r];
                        if (x !== undefined) {
                            for (var y = 0; x.length > y; y++) {
                                var z = x[y];
                                if (z.ⲆᐃΔ) {
                                    if (z.ⵠⵠΔ.ⲆᐃΔ() && z.ⵠⵠΔ.ⵠⲆᐃ == pn) {
                                        z.ⲆᐃΔ = ia;
                                    }
                                    var A = mq * ((1 - z.ⵠⵠΔ.ΔⲆⲆ) * Af * 600);
                                    var B = A * Math.sin(z.angle);
                                    var D = A * Math.cos(z.angle);
                                } else {
                                    B = 0;
                                    D = 0;
                                }
                                var E = ᐃΔ[n][Cf.time][r];
                                var F = -E.width * Cf.ⲆᐃᐃΔ[n].ΔⲆⲆ;
                                var G = Cf.ⲆᐃᐃΔ[n].ΔⲆⲆ * -E.height;
                                Mc(In, E, Yw.ᐃⵠⵠ.x + z.x - F / 2 + B, Yw.ᐃⵠⵠ.y + z.y - G / 2 + D, F, G);
                            }
                        }
                    }
                }
            }
        }
    }
    function mv(j, e, i, k, n, o, a, q) {
        if (q === qn) {
            q = 0;
        }
        for (var r = a; q <= r; r--) {
            for (var t = j; t <= e; t++) {
                for (var w = i; k >= w; w++) {
                    var x = Ww.Δᐃᐃⵠ[t][w];
                    if (x && x[o]) {
                        var y = x[o][r];
                        if (y !== ns) {
                            for (var z = 0; y.length > z; z++) {
                                var A = y[z];
                                var B = ᐃΔ[n][Cf.time][r];
                                var D = (kv + (t + w) * 3) % 60;
                                var E = D < 30 ? D / 30 : 1 - (D - 30) / 30;
                                var F = -B.width * (1 + E * 0.9 / 30);
                                var G = (1 + E * 0.9 / 30) * -B.height;
                                E = (D = (kv + (t + w) * 7) % 60) < 30 ? D / 30 : 1 - (D - 30) / 30;
                                var H = In.globalAlpha;
                                In.globalAlpha = (0.9 + E * 0.1) * H;
                                Mc(In, B, Yw.ᐃⵠⵠ.x + A.x - F / 2, Yw.ᐃⵠⵠ.y + A.y - G / 2, F, G);
                                In.globalAlpha = H;
                            }
                        }
                    }
                }
            }
        }
    }
    var nv = [];
    for ($g = 0; $g < 100; $g++) {
        var ov = 1;
        if (Math.random() < 0.25) {
            ov = 0;
        }
        nv.push(ov);
    }
    function pv(c, e, f, i, j, k, a, m, n) {
        if (As === m) {
            m = 0;
        }
        for (var h = c; e >= h; h++) {
            for (var o = f; o <= i; o++) {
                var p = Ww.Δᐃᐃⵠ[h][o];
                if (p !== undefined && p[k] !== Oo) {
                    var q = p[k];
                    if (q !== Ft) {
                        if (q.scale === 1) {
                            var r = ᐃΔ[j][Cf.time][q.ⲆⲆΔᐃ];
                            In.save();
                            In.translate(Yw.ᐃⵠⵠ.x + q.x, Yw.ᐃⵠⵠ.y + q.y);
                            In.rotate(q.angle);
                            Mc(In, r, -r.width / 4, -r.height / 4, r.width / 2, r.height / 2);
                            In.restore();
                        } else if (q.scale === 3) {
                            for (var t = 0; t < q.ⲆⵠⲆ.length; t++) {
                                In.save();
                                In.translate(Yw.ᐃⵠⵠ.x + q.x, Yw.ᐃⵠⵠ.y + q.y);
                                In.rotate(q.ⲆⵠⲆ[t].angle);
                                r = ᐃΔ[j][Cf.time][q.ⲆⵠⲆ[t].ⲆⲆΔᐃ];
                                Mc(In, r, -r.width / 3 + q.ⲆⵠⲆ[t].x, -r.height / 3 + q.ⲆⵠⲆ[t].y, r.width / 1.5, r.height / 1.5);
                                In.restore();
                            }
                        } else {
                            r = ᐃΔ[j][Cf.time][q.ⲆⲆΔᐃ];
                            In.save();
                            In.translate(Yw.ᐃⵠⵠ.x + q.x, Yw.ᐃⵠⵠ.y + q.y);
                            In.rotate(q.angle);
                            Mc(In, r, -r.width / 2, -r.height / 2, r.width, r.height);
                            In.restore();
                        }
                    }
                }
            }
        }
    }
    function qv(j, e, i, k, n, o, a, q, r) {
        if (q === Da) {
            q = 0;
        }
        for (var h = a; h >= q; h--) {
            for (var t = j; e >= t; t++) {
                for (var x = i; x <= k; x++) {
                    var A = Ww.Δᐃᐃⵠ[t][x];
                    if (A !== undefined && A[o] !== undefined) {
                        var B = A[o][h];
                        if (B !== Js) {
                            for (var C = 0; B.length > C; C++) {
                                var D = B[C];
                                if (D.ⲆᐃΔ) {
                                    if (D.ⵠⵠΔ.ⲆᐃΔ() && gn == D.ⵠⵠΔ.ⵠⲆᐃ) {
                                        D.ⲆᐃΔ = ia;
                                    }
                                    var E = Af * (1 - D.ⵠⵠΔ.ΔⲆⲆ) * 600 * mq;
                                    var F = Math.sin(D.angle) * E;
                                    var G = Math.cos(D.angle) * E;
                                } else {
                                    F = 0;
                                    G = 0;
                                }
                                for (var H = 0; ᐃⵠⵠⵠᐃΔⵠ[h].ⵠΔΔⲆ > H; H++) {
                                    if (Cf.ΔⲆⲆⲆΔ[H].ΔΔⵠⵠⵠⲆᐃ !== ax) {
                                        Cf.ΔⲆⲆⲆΔ[H].ⲆᐃΔ();
                                        Cf.ΔⲆⲆⲆΔ[H].ΔΔⵠⵠⵠⲆᐃ = ax;
                                    }
                                    var I = ᐃΔ[941][Cf.time][ᐃⵠⵠⵠᐃΔⵠ[h].ΔⲆⲆᐃ[H].ⲆⲆᐃ];
                                    var J = Cf.ΔⲆⲆⲆΔ[H].ΔⲆⲆ * -I.width;
                                    var K = -I.height * Cf.ΔⲆⲆⲆΔ[H].ΔⲆⲆ;
                                    Mc(In, I, Yw.ᐃⵠⵠ.x + D.x - J / 4 + F + ᐃⵠⵠⵠᐃΔⵠ[h].ΔⲆⲆᐃ[H].x, Yw.ᐃⵠⵠ.y + D.y - K / 4 + G + ᐃⵠⵠⵠᐃΔⵠ[h].ΔⲆⲆᐃ[H].y, J / 2, K / 2);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    function rv(f, e, i, j, k, n, a, o, q) {
        if (Jl === o) {
            o = 0;
        }
        for (var h = a; h >= o; h--) {
            for (var r = f; r <= e; r++) {
                for (var t = i; j >= t; t++) {
                    if (q <= 0 || nv[(r + t * q) % nv.length] !== 1) {
                        var w = Ww.Δᐃᐃⵠ[r][t];
                        if (w !== undefined && w[n] !== undefined) {
                            var x = w[n][h];
                            if (x !== undefined) {
                                for (var y = 0; y < x.length; y++) {
                                    var z = x[y];
                                    if (z.ⲆᐃΔ) {
                                        if (z.ⵠⵠΔ.ⲆᐃΔ() && z.ⵠⵠΔ.ⵠⲆᐃ == 0) {
                                            z.ⲆᐃΔ = false;
                                        }
                                        var A = mq * (Af * (1 - z.ⵠⵠΔ.ΔⲆⲆ) * 600);
                                        var B = A * Math.sin(z.angle);
                                        var D = Math.cos(z.angle) * A;
                                    } else {
                                        B = 0;
                                        D = 0;
                                    }
                                    var E = ᐃΔ[k][Cf.time][h];
                                    Mc(In, E, Yw.ᐃⵠⵠ.x + z.x - E.width / (ⲆΔⵠⵠΔ * 2) + B, Yw.ᐃⵠⵠ.y + z.y - E.height / (ⲆΔⵠⵠΔ * 2) + D, E.width / ⲆΔⵠⵠΔ, E.height / ⲆΔⵠⵠΔ);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    ⲆΔⵠⵠΔ = 1;
    ᐃⵠⵠⵠᐃΔⵠ = [{
        ⵠΔΔⲆ: 10,
        ΔⲆⲆᐃ: [{
            x: -128,
            y: -20,
            ⲆⲆᐃ: 0
        }, {
            y: -4,
            ⲆⲆᐃ: 1,
            x: -86
        }, {
            y: -74,
            x: -60,
            ⲆⲆᐃ: 2
        }, {
            ⲆⲆᐃ: 0,
            x: -22,
            y: -144
        }, {
            y: 86,
            x: -58,
            ⲆⲆᐃ: 0
        }, {
            y: -30,
            ⲆⲆᐃ: 0,
            x: 3
        }, {
            y: -115,
            ⲆⲆᐃ: 1,
            x: 65
        }, {
            ⲆⲆᐃ: 0,
            y: -50,
            x: 118
        }, {
            ⲆⲆᐃ: 1,
            x: 73,
            y: 15
        }, {
            ⲆⲆᐃ: 0,
            y: 79,
            x: 67
        }]
    }, {
        ΔⲆⲆᐃ: [{
            x: -45,
            ⲆⲆᐃ: 0,
            y: -26
        }, {
            ⲆⲆᐃ: 2,
            x: -45,
            y: 20
        }, {
            y: -60,
            x: 10,
            ⲆⲆᐃ: 1
        }, {
            x: 52,
            ⲆⲆᐃ: 1,
            y: -17
        }, {
            x: 14,
            ⲆⲆᐃ: 0,
            y: 45
        }],
        ⵠΔΔⲆ: 5
    }, {
        ΔⲆⲆᐃ: [{
            ⲆⲆᐃ: 2,
            x: -30,
            y: 3
        }, {
            y: -38,
            ⲆⲆᐃ: 2,
            x: 7
        }, {
            ⲆⲆᐃ: 2,
            x: 37,
            y: 5
        }],
        ⵠΔΔⲆ: 3
    }, {
        ⵠΔΔⲆ: 11,
        ΔⲆⲆᐃ: [{
            y: -87,
            ⲆⲆᐃ: 2,
            x: -74
        }, {
            y: -10,
            ⲆⲆᐃ: 1,
            x: -11
        }, {
            y: 17,
            x: -99,
            ⲆⲆᐃ: 1
        }, {
            x: -66,
            ⲆⲆᐃ: 0,
            y: 84
        }, {
            ⲆⲆᐃ: 1,
            y: 123,
            x: -55
        }, {
            y: 81,
            x: 10,
            ⲆⲆᐃ: 2
        }, {
            y: 50,
            ⲆⲆᐃ: 0,
            x: 52
        }, {
            ⲆⲆᐃ: 1,
            y: 9,
            x: 138
        }, {
            x: 104,
            y: -28,
            ⲆⲆᐃ: 0
        }, {
            y: -56,
            x: 67,
            ⲆⲆᐃ: 2
        }, {
            y: -112,
            ⲆⲆᐃ: 0,
            x: 5
        }]
    }, {
        ⵠΔΔⲆ: 6,
        ΔⲆⲆᐃ: [{
            ⲆⲆᐃ: 2,
            x: -33,
            y: -66
        }, {
            y: 10,
            x: -58,
            ⲆⲆᐃ: 0
        }, {
            x: -19,
            y: 44,
            ⲆⲆᐃ: 1
        }, {
            x: 44,
            y: 20,
            ⲆⲆᐃ: 0
        }, {
            ⲆⲆᐃ: 2,
            y: -36,
            x: 53
        }, {
            x: 7,
            ⲆⲆᐃ: 0,
            y: -62
        }]
    }, {
        ⵠΔΔⲆ: 3,
        ΔⲆⲆᐃ: [{
            x: -19,
            y: -25,
            ⲆⲆᐃ: 1
        }, {
            ⲆⲆᐃ: 2,
            y: 13,
            x: -29
        }, {
            y: 12,
            ⲆⲆᐃ: 0,
            x: 12
        }]
    }];
    var sv = 0;
    var tv = 0;
    var uv = 0;
    var vv = 0;
    function wv(a) {
        In.globalAlpha = a.alpha;
        ut(In, a.x + Yw.ᐃⵠⵠ.x, a.y + Yw.ᐃⵠⵠ.y, a.r);
        vt(In, nr.ⵠⵠᐃᐃᐃⲆⵠ[Cf.time]);
        In.globalAlpha = 1;
    }
    function xv(a, b) {
        if (Cf.transition) {
            In.globalAlpha = 1;
            a.ⵠᐃⲆⵠⲆ(b);
            Cf.time = Cf.time ? 0 : 1;
            In.globalAlpha = 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
            a.ⵠᐃⲆⵠⲆ(b);
            Cf.time = Cf.time ? 0 : 1;
            In.globalAlpha = 1;
        } else {
            a.ⵠᐃⲆⵠⲆ(b);
        }
    }
    function yv(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = Yw.ᐃⵠⵠ.x + j + 820;
        var l = Math.max(Yw.ᐃⵠⵠ.y + e, 0);
        var g = Math.max(-Yw.ᐃⵠⵠ.y + iq - i - 100, 0);
        var t = l;
        var b = iq - l - g;
        if (o) {
            var d = q.ⲆⲆᐃ(a);
        } else {
            d = a.r;
        }
        var u = h + qw.ᐃΔΔⲆⵠ;
        var F = u;
        var c = t;
        var p = -d.x + qw.ⵠᐃⵠⲆⲆ;
        var C = b;
        var G = u += -d.x + qw.ⵠᐃⵠⲆⲆ + 2;
        if (o) {
            d = q.ⲆⲆᐃ(r);
        } else {
            d = r.r;
        }
        var f = h - qw.ⲆΔᐃⵠᐃ - u - d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var A = (u += f + 2) - 2;
        if (o) {
            d = q.ⲆⲆᐃ(s);
        } else {
            d = s.r;
        }
        if (A > u + (f = h - qw.ⲆᐃᐃⵠΔ - u - d.x)) {
            var k = true;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var D = u += f + 2;
        } else {
            k = Ui;
            u = A;
            D = -1;
        }
        f = h - qw.ⲆᐃΔᐃᐃΔⲆ - u;
        if (Cf.transition) {
            var N = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
            In.fillStyle = Kv(9, 55, 63, 11, 106, 132, N);
        } else {
            In.fillStyle = nr.ⵠΔᐃᐃⲆ[Cf.time];
        }
        In.fillRect(F, c, p, C);
        if (o) {
            if (Cf.transition) {
                N = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
                In.fillStyle = Kv(15, 70, 76, 42, 139, 155, N);
            } else {
                In.fillStyle = nr.ⲆᐃⵠⵠΔⵠⵠ[Cf.time];
            }
        } else if (Cf.transition) {
            N = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
            In.fillStyle = Kv(9, 55, 63, 11, 106, 132, N);
        } else {
            In.fillStyle = nr.ⵠΔᐃᐃⲆ[Cf.time];
        }
        In.fillRect(H, y, w, K);
        if (k) {
            if (o) {
                if (Cf.transition) {
                    N = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
                    In.fillStyle = Kv(17, 94, 96, 169, 214, 211, N);
                } else {
                    In.fillStyle = nr.ⵠⵠⵠᐃΔⲆᐃ[Cf.time];
                }
            } else if (Cf.transition) {
                N = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
                In.fillStyle = Kv(9, 55, 63, 11, 106, 132, N);
            } else {
                In.fillStyle = nr.ⵠΔᐃᐃⲆ[Cf.time];
            }
            In.fillRect(L, J, M, B);
        }
        if (mf.ⵠᐃΔⵠⲆ && o) {
            q.ΔⵠⵠᐃⲆⲆⵠᐃΔ(A, D, G, h, -Yw.ᐃⵠⵠ.y + c, -Yw.ᐃⵠⵠ.y + c + C);
        }
    }
    function zv(b, c, d, e, f) {
        var g = d.width;
        var a = d.height;
        var i = Math.floor(g / 2);
        var j = Math.floor(a / 2);
        if (Cf.transition) {
            In.globalAlpha = 1;
            Mc(In, ᐃΔ[b][c][Cf.time], 0, 0, g, a, e, f, i, j);
            Cf.time = Cf.time ? 0 : 1;
            In.globalAlpha = 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
            Mc(In, ᐃΔ[b][c][Cf.time], 0, 0, g, a, e, f, i, j);
            Cf.time = Cf.time ? 0 : 1;
            In.globalAlpha = 1;
        } else {
            Mc(In, ᐃΔ[b][c][Cf.time], 0, 0, g, a, e, f, i, j);
        }
    }
    function Av(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = Yw.ᐃⵠⵠ.x + f + 820;
        var l = Math.max(Yw.ᐃⵠⵠ.y + e, 0);
        var g = Math.max(-Yw.ᐃⵠⵠ.y + iq - i - 100, 0);
        var r = l;
        var b = iq - l - g;
        if (n) {
            var d = j.ⲆⲆᐃ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + qw.ᐃΔΔⲆⵠ;
        qw.ⵠᐃⵠⲆⲆ;
        s += -d + qw.ⵠᐃⵠⲆⲆ + 2;
        if (n) {
            d = j.ⲆⲆᐃ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h - qw.ⲆΔᐃⵠᐃ - s - d;
        var u = (s += t + 2) - 2;
        if (n) {
            d = j.ⲆⲆᐃ(q).x;
        } else {
            d = q.r.x;
        }
        if (s + (t = h - qw.ⲆᐃᐃⵠΔ - s - d) < u) {
            s += t + 2;
        } else {
            s = u;
        }
        t = h - qw.ⲆᐃΔᐃᐃΔⲆ - s;
        if (n > 0 && k.ᐃΔⵠⲆⵠⲆⲆ === 1) {
            if (Cf.transition) {
                var p = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
                In.fillStyle = Kv(15, 77, 72, 252, 239, 187, p);
            } else {
                In.fillStyle = nr.ⲆⵠΔᐃΔΔⲆ[Cf.time];
            }
            In.fillRect(s, r, t, b);
        } else {
            if (Cf.transition) {
                p = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
                In.fillStyle = Kv(k.ΔⲆᐃ[0], k.ΔⲆᐃ[1], k.ΔⲆᐃ[2], k.Ⲇⵠᐃ[0], k.Ⲇⵠᐃ[1], k.Ⲇⵠᐃ[2], p);
            } else {
                In.fillStyle = k.ᐃᐃᐃⲆΔ[Cf.time];
            }
            In.fillRect(s, r, t, b);
        }
    }
    function Bv(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = Yw.ᐃⵠⵠ.y + j + 710;
        var l = Math.max(Yw.ᐃⵠⵠ.x + e, 0);
        var g = Math.max(-Yw.ᐃⵠⵠ.x + Rn - i - 100, 0);
        var t = l;
        var b = Rn - l - g;
        if (o) {
            var d = q.ⲆⲆᐃ(a);
        } else {
            d = a.r;
        }
        var u = h + qw.ᐃΔΔⲆⵠ;
        var F = u;
        var c = t;
        var p = -d.x + qw.ⵠᐃⵠⲆⲆ;
        var C = b;
        var G = u += -d.x + qw.ⵠᐃⵠⲆⲆ + 2;
        if (o) {
            d = q.ⲆⲆᐃ(r);
        } else {
            d = r.r;
        }
        var f = h - qw.ⲆΔᐃⵠᐃ - u - d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var A = (u += f + 2) - 2;
        if (o) {
            d = q.ⲆⲆᐃ(s);
        } else {
            d = s.r;
        }
        if (u + (f = h - qw.ⲆᐃᐃⵠΔ - u - d.x) < A) {
            var k = hi;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var D = u += f + 2;
        } else {
            k = false;
            u = A;
            D = -1;
        }
        f = h - qw.ⲆᐃΔᐃᐃΔⲆ - u;
        if (Cf.transition) {
            var N = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
            In.fillStyle = Kv(9, 55, 63, 11, 106, 132, N);
        } else {
            In.fillStyle = nr.ⵠΔᐃᐃⲆ[Cf.time];
        }
        In.fillRect(c, F, C, p);
        if (o) {
            if (Cf.transition) {
                N = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
                In.fillStyle = Kv(15, 70, 76, 42, 139, 155, N);
            } else {
                In.fillStyle = nr.ⲆᐃⵠⵠΔⵠⵠ[Cf.time];
            }
        } else if (Cf.transition) {
            N = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
            In.fillStyle = Kv(9, 55, 63, 11, 106, 132, N);
        } else {
            In.fillStyle = nr.ⵠΔᐃᐃⲆ[Cf.time];
        }
        In.fillRect(y, H, K, w);
        if (k) {
            if (o) {
                if (Cf.transition) {
                    N = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
                    In.fillStyle = Kv(17, 94, 96, 169, 214, 211, N);
                } else {
                    In.fillStyle = nr.ⵠⵠⵠᐃΔⲆᐃ[Cf.time];
                }
            } else if (Cf.transition) {
                N = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
                In.fillStyle = Kv(9, 55, 63, 11, 106, 132, N);
            } else {
                In.fillStyle = nr.ⵠΔᐃᐃⲆ[Cf.time];
            }
            In.fillRect(J, L, B, M);
        }
        if (mf.ⵠᐃΔⵠⲆ && o) {
            q.ΔᐃⲆⲆΔΔΔΔⲆ(A, D, G, h, -Yw.ᐃⵠⵠ.x + c, -Yw.ᐃⵠⵠ.x + c + C);
        }
    }
    function Cv(a, b, c, d, e) {
        if (Cf.transition && e == 1) {
            In.globalAlpha = 1;
            Mc(In, ᐃΔ[a][Cf.time][b], c, d);
            Cf.time = Cf.time ? 0 : 1;
            In.globalAlpha = 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
            Mc(In, ᐃΔ[a][Cf.time][b], c, d);
            Cf.time = Cf.time ? 0 : 1;
            In.globalAlpha = 1;
        } else {
            In.globalAlpha = e;
            Mc(In, ᐃΔ[a][Cf.time][b], c, d);
            In.globalAlpha = 1;
        }
    }
    function Dv(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = Yw.ᐃⵠⵠ.y + f + 710;
        var l = Math.max(Yw.ᐃⵠⵠ.x + e, 0);
        var g = Math.max(-Yw.ᐃⵠⵠ.x + Rn - i - 100, 0);
        var r = l;
        var b = Rn - l - g;
        if (n) {
            var d = j.ⲆⲆᐃ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + qw.ᐃΔΔⲆⵠ;
        qw.ⵠᐃⵠⲆⲆ;
        s += -d + qw.ⵠᐃⵠⲆⲆ + 2;
        if (n) {
            d = j.ⲆⲆᐃ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h - qw.ⲆΔᐃⵠᐃ - s - d;
        var u = (s += t + 2) - 2;
        if (n) {
            d = j.ⲆⲆᐃ(q).x;
        } else {
            d = q.r.x;
        }
        if (s + (t = h - qw.ⲆᐃᐃⵠΔ - s - d) < u) {
            s += t + 2;
        } else {
            s = u;
        }
        t = h - qw.ⲆᐃΔᐃᐃΔⲆ - s;
        if (n > 0 && k.ᐃΔⵠⲆⵠⲆⲆ === 1) {
            if (Cf.transition) {
                var p = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
                In.fillStyle = Kv(15, 77, 72, 252, 239, 187, p);
            } else {
                In.fillStyle = nr.ⲆⵠΔᐃΔΔⲆ[Cf.time];
            }
            In.fillRect(r, s, b, t);
        } else {
            if (Cf.transition) {
                p = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
                In.fillStyle = Kv(k.ΔⲆᐃ[0], k.ΔⲆᐃ[1], k.ΔⲆᐃ[2], k.Ⲇⵠᐃ[0], k.Ⲇⵠᐃ[1], k.Ⲇⵠᐃ[2], p);
            } else {
                In.fillStyle = k.ᐃᐃᐃⲆΔ[Cf.time];
            }
            In.fillRect(r, s, b, t);
        }
    }
    function Ev(c, d, e, f, i, j) {
        const a = ((c + 62036) * 22695477 + 1) % 4294967296;
        const k = (d | 16943) & ~(d & 16943);
        const m = ~(e & 58494) & e | ~(e & 58494) & 58494;
        const h = ((18197 + f) * 1664525 + 1013904223) % 4294967296;
        const l = (12345 + (57458 + j) * 1103515245) % 2147483648;
        const g = Vw(a, k, m, h, (0 << (i >> 16 & 255)) + (16 << (i & 255)) + (24 << (i >> 24 & 255)) + (8 << (i >> 8 & 255)));
        const n = Vw(l, a, k, m, h);
        return (24 << ((g ^ n) >> 16 & 255)) + (8 << ((g ^ n) & 255)) + (0 << ((g ^ n) >> 24 & 255)) + (16 << ((g ^ n) >> 8 & 255));
    }
    function Fv(b, c, d, e, f, g, a, i, j, h) {
        if (Cf.transition) {
            In.globalAlpha = 1;
            b(c, d, e, f, g, a, i, j, h);
            Cf.time = Cf.time ? 0 : 1;
            In.globalAlpha = 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
            b(c, d, e, f, g, a, i, j, h);
            Cf.time = Cf.time ? 0 : 1;
            In.globalAlpha = 1;
        } else {
            b(c, d, e, f, g, a, i, j, h);
        }
    }
    function Gv(b, c, d, e) {
        var f = c.width;
        var g = c.height;
        var a = Math.floor(f / 2);
        var h = Math.floor(g / 2);
        if (Cf.transition) {
            In.globalAlpha = 1;
            Mc(In, ᐃΔ[b][Cf.time], 0, 0, f, g, d, e, a, h);
            Cf.time = Cf.time ? 0 : 1;
            In.globalAlpha = 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
            Mc(In, ᐃΔ[b][Cf.time], 0, 0, f, g, d, e, a, h);
            Cf.time = Cf.time ? 0 : 1;
            In.globalAlpha = 1;
        } else {
            Mc(In, c, 0, 0, f, g, d, e, a, h);
        }
    }
    function Hv(b, c, d, e) {
        const f = b ^ 13496;
        const g = (1 + (c + 19902) * 22695477) % 4294967296;
        const a = (0 << (d & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & 255)) + (8 << (d >> 8 & 255));
        const h = lr(f, g, a, (2531011 + (4783 + e) * 214013) % 4294967296);
        (function (b, c, d) {
            const e = (1 + (31015 + b) * 22695477) % 4294967296;
            const f = ~(c & 18944) & (c | 18944);
            const g = (d | 64694) & ~(d & 64694);
            const a = Uw(e, f, g, e);
            fr(f, g, e, f);
        })(f, g, a);
        return ~(h & 11394) & h | ~(h & 11394) & 11394;
    }
    function Iv() {
        In.globalAlpha = 1;
        if (Cf.transition) {
            var a = Cf.ᐃᐃⲆⲆ.ⲆᐃΔ();
        }
        Cf.ᐃⵠⲆⵠⵠΔⵠᐃΔ(-Yw.ᐃⵠⵠ.x, -Yw.ᐃⵠⵠ.y);
        sv = Math.max(Math.floor(-Yw.ᐃⵠⵠ.x / Cf.ⵠⵠⵠⵠΔᐃΔ) - 5, 0);
        tv = Math.min(Math.floor((-Yw.ᐃⵠⵠ.x + Yw.ᐃⵠⵠ.w) / Cf.ⵠⵠⵠⵠΔᐃΔ) + 4, Cf.ᐃⲆᐃᐃⲆ - 1);
        uv = Math.max(Math.floor(-Yw.ᐃⵠⵠ.y / Cf.ⲆΔⵠᐃΔⵠⵠ) - 3, 0);
        vv = Math.min(Math.floor((-Yw.ᐃⵠⵠ.y + Yw.ᐃⵠⵠ.ⵠⲆⵠ) / Cf.ⲆΔⵠᐃΔⵠⵠ) + 3, Cf.ᐃⲆⲆⲆᐃ - 1);
        (function () {
            for (var c = Cf.ⵠᐃⲆᐃ.length - 1; c >= 0; c--) {
                if ((C = Cf.ⵠᐃⲆᐃ[c]).ⲆⲆᐃ === Cf.ΔⲆΔⲆⲆ) {
                    var f = Cf.ᐃⵠᐃΔⲆ[C.ⲆⲆᐃ];
                    if (C.x1 - 230 - Rn <= -Yw.ᐃⵠⵠ.x && -Yw.ᐃⵠⵠ.x <= C.x2 + 330 && -Yw.ᐃⵠⵠ.y >= C.y1 - iq && C.y2 + 100 >= -Yw.ᐃⵠⵠ.y) {
                        var j = C.x2;
                        if (C.ⲆⲆᐃ !== Cf.ΔⲆΔⲆⲆ) {
                            j -= 610;
                        }
                        var k = C.x1;
                        if (Cf.ΔⲆΔⲆⲆ !== C.ⲆⲆᐃ) {
                            k += 610;
                        }
                        var m = C.y2;
                        if (C.ⲆⲆᐃ !== Cf.ΔⲆΔⲆⲆ) {
                            m -= 610;
                        }
                        var p = C.y1;
                        if (Cf.ΔⲆΔⲆⲆ !== C.ⲆⲆᐃ) {
                            p += 610;
                        }
                        if (Cf.transition) {
                            var q = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
                            In.fillStyle = Kv(f.ΔⲆᐃ[0], f.ΔⲆᐃ[1], f.ΔⲆᐃ[2], f.Ⲇⵠᐃ[0], f.Ⲇⵠᐃ[1], f.Ⲇⵠᐃ[1], q);
                        } else {
                            In.fillStyle = f.ᐃᐃᐃⲆΔ[Cf.time];
                        }
                        var w = Math.max(Yw.ᐃⵠⵠ.x + k - 2 - 230, 0);
                        var x = Math.max(-Yw.ᐃⵠⵠ.x + Rn - j - 330 - 2, 0);
                        var y = Math.max(Yw.ᐃⵠⵠ.y + p - 2, 0);
                        var z = Math.max(-Yw.ᐃⵠⵠ.y + iq - m - 100 - 2, 0);
                        In.beginPath();
                        In.fillRect(w, y, Rn - x - w, iq - y - z);
                    }
                }
            }
            for (c = Cf.ⵠᐃⲆᐃ.length - 1; c >= 0; c--) {
                if ((C = Cf.ⵠᐃⲆᐃ[c]).ⲆⲆᐃ !== Cf.ΔⲆΔⲆⲆ) {
                    j = C.x2;
                    if (Cf.ΔⲆΔⲆⲆ !== C.ⲆⲆᐃ) {
                        j -= 400;
                    }
                    k = C.x1;
                    if (Cf.ΔⲆΔⲆⲆ !== C.ⲆⲆᐃ) {
                        k += 400;
                    }
                    m = C.y2;
                    if (Cf.ΔⲆΔⲆⲆ !== C.ⲆⲆᐃ) {
                        m -= 300;
                    }
                    p = C.y1;
                    if (C.ⲆⲆᐃ !== Cf.ΔⲆΔⲆⲆ) {
                        p += 300;
                    }
                    if ((C.ΔⲆⲆ & qw.ΔᐃⵠⲆᐃ) === 0 && -Yw.ᐃⵠⵠ.x >= j - Rn + 120 && -Yw.ᐃⵠⵠ.x <= j + 820 && -Yw.ᐃⵠⵠ.y >= p + 88 - iq && -Yw.ᐃⵠⵠ.y <= m + 50) {
                        Av(j, p + 88, m - 88, Yw.ⵠⵠᐃⲆ[0], Cf.ᐃⵠᐃΔⲆ[C.ⲆⲆᐃ], C.ΔⲆⲆ & qw.ΔᐃⵠⲆᐃ);
                        yv(j, p + 88, m - 88, Yw.ⵠⵠᐃⲆ[0], Cf.ᐃⵠᐃΔⲆ[C.ⲆⲆᐃ], C.ΔⲆⲆ & qw.ΔᐃⵠⲆᐃ);
                    }
                    if (!(C.ΔⲆⲆ & qw.ⵠΔΔᐃΔ) && k - Rn - 700 <= -Yw.ᐃⵠⵠ.x && -Yw.ᐃⵠⵠ.x <= k - 20 && p + 88 - iq <= -Yw.ᐃⵠⵠ.y && m + 50 >= -Yw.ᐃⵠⵠ.y) {
                        Sv(k, p + 88, m - 88, Yw.ⵠⵠᐃⲆ[1], Cf.ᐃⵠᐃΔⲆ[C.ⲆⲆᐃ], C.ΔⲆⲆ & qw.ⵠΔΔᐃΔ);
                        Nv(k, p + 88, m - 88, Yw.ⵠⵠᐃⲆ[1], Cf.ᐃⵠᐃΔⲆ[C.ⲆⲆᐃ], C.ΔⲆⲆ & qw.ⵠΔΔᐃΔ);
                    }
                    if ((C.ΔⲆⲆ & qw.ⲆⵠΔⲆᐃ) === 0 && k - 235 - Rn <= -Yw.ᐃⵠⵠ.x && j + 350 >= -Yw.ᐃⵠⵠ.x && -Yw.ᐃⵠⵠ.y >= m - iq - 275 && m + 490 >= -Yw.ᐃⵠⵠ.y) {
                        Dv(m - 230, k - 230, j + 230, Yw.ⵠⵠᐃⲆ[2], Cf.ᐃⵠᐃΔⲆ[C.ⲆⲆᐃ], C.ΔⲆⲆ & qw.ⲆⵠΔⲆᐃ);
                        Bv(m - 230, k - 230, j + 230, Yw.ⵠⵠᐃⲆ[2], Cf.ᐃⵠᐃΔⲆ[C.ⲆⲆᐃ], C.ΔⲆⲆ & qw.ⲆⵠΔⲆᐃ);
                    }
                    if (!(C.ΔⲆⲆ & qw.ΔⵠΔⲆⲆ) && k - 235 - Rn <= -Yw.ᐃⵠⵠ.x && -Yw.ᐃⵠⵠ.x <= j + 350 && -Yw.ᐃⵠⵠ.y >= p - iq - 390 && p + 315 >= -Yw.ᐃⵠⵠ.y) {
                        Ov(p + 310, k - 230, j + 230, Yw.ⵠⵠᐃⲆ[3], Cf.ᐃⵠᐃΔⲆ[C.ⲆⲆᐃ], C.ΔⲆⲆ & qw.ΔⵠΔⲆⲆ);
                        Lv(p + 310, k - 230, j + 230, Yw.ⵠⵠᐃⲆ[3], Cf.ᐃⵠᐃΔⲆ[C.ⲆⲆᐃ], C.ΔⲆⲆ & qw.ΔⵠΔⲆⲆ);
                    }
                }
            }
            for (c = Cf.ⵠᐃⲆᐃ.length - 1; c >= 0; c--) {
                if ((C = Cf.ⵠᐃⲆᐃ[c]).ⲆⲆᐃ !== Cf.ΔⲆΔⲆⲆ) {
                    j = C.x2;
                    if (C.ⲆⲆᐃ !== Cf.ΔⲆΔⲆⲆ) {
                        j -= 400;
                    }
                    k = C.x1;
                    if (Cf.ΔⲆΔⲆⲆ !== C.ⲆⲆᐃ) {
                        k += 400;
                    }
                    m = C.y2;
                    if (Cf.ΔⲆΔⲆⲆ !== C.ⲆⲆᐃ) {
                        m -= 300;
                    }
                    p = C.y1;
                    if (Cf.ΔⲆΔⲆⲆ !== C.ⲆⲆᐃ) {
                        p += 300;
                    }
                    if ((C.ΔⲆⲆ & qw.ΔᐃⵠⲆᐃ) !== 0 && j - Rn + 120 <= -Yw.ᐃⵠⵠ.x && j + 820 >= -Yw.ᐃⵠⵠ.x && -Yw.ᐃⵠⵠ.y >= p + 88 - iq && -Yw.ᐃⵠⵠ.y <= m + 50) {
                        Av(j, p + 88, m - 88, Yw.ⵠⵠᐃⲆ[0], Cf.ᐃⵠᐃΔⲆ[C.ⲆⲆᐃ], C.ΔⲆⲆ & qw.ΔᐃⵠⲆᐃ);
                    }
                    if ((C.ΔⲆⲆ & qw.ⵠΔΔᐃΔ) !== 0 && -Yw.ᐃⵠⵠ.x >= k - Rn - 700 && k - 20 >= -Yw.ᐃⵠⵠ.x && p + 88 - iq <= -Yw.ᐃⵠⵠ.y && -Yw.ᐃⵠⵠ.y <= m + 50) {
                        Sv(k, p + 88, m - 88, Yw.ⵠⵠᐃⲆ[1], Cf.ᐃⵠᐃΔⲆ[C.ⲆⲆᐃ], C.ΔⲆⲆ & qw.ⵠΔΔᐃΔ);
                    }
                    if ((C.ΔⲆⲆ & qw.ⲆⵠΔⲆᐃ) !== 0 && k - 235 - Rn <= -Yw.ᐃⵠⵠ.x && j + 350 >= -Yw.ᐃⵠⵠ.x && m - iq - 275 <= -Yw.ᐃⵠⵠ.y && -Yw.ᐃⵠⵠ.y <= m + 490) {
                        Dv(m - 230, k - 230, j + 230, Yw.ⵠⵠᐃⲆ[2], Cf.ᐃⵠᐃΔⲆ[C.ⲆⲆᐃ], C.ΔⲆⲆ & qw.ⲆⵠΔⲆᐃ);
                    }
                    if (C.ΔⲆⲆ & qw.ΔⵠΔⲆⲆ && -Yw.ᐃⵠⵠ.x >= k - 235 - Rn && -Yw.ᐃⵠⵠ.x <= j + 350 && p - iq - 390 <= -Yw.ᐃⵠⵠ.y && p + 315 >= -Yw.ᐃⵠⵠ.y) {
                        Ov(p + 310, k - 230, j + 230, Yw.ⵠⵠᐃⲆ[3], Cf.ᐃⵠᐃΔⲆ[C.ⲆⲆᐃ], C.ΔⲆⲆ & qw.ΔⵠΔⲆⲆ);
                    }
                }
            }
            for (c = Cf.ⵠᐃⲆᐃ.length - 1; c >= 0; c--) {
                if ((C = Cf.ⵠᐃⲆᐃ[c]).ⲆⲆᐃ !== Cf.ΔⲆΔⲆⲆ) {
                    f = Cf.ᐃⵠᐃΔⲆ[C.ⲆⲆᐃ];
                    if (-Yw.ᐃⵠⵠ.x >= C.x1 - 230 - Rn && -Yw.ᐃⵠⵠ.x <= C.x2 + 330 && C.y1 - iq <= -Yw.ᐃⵠⵠ.y && -Yw.ᐃⵠⵠ.y <= C.y2 + 100) {
                        j = C.x2;
                        if (Cf.ΔⲆΔⲆⲆ !== C.ⲆⲆᐃ) {
                            if (C.ΔⲆⲆ & qw.ΔᐃⵠⲆᐃ) {
                                j -= 610;
                            } else {
                                j -= 414;
                            }
                        }
                        k = C.x1;
                        if (C.ⲆⲆᐃ !== Cf.ΔⲆΔⲆⲆ) {
                            if (C.ΔⲆⲆ & qw.ⵠΔΔᐃΔ) {
                                k += 610;
                            } else {
                                k += 414;
                            }
                        }
                        m = C.y2;
                        if (C.ⲆⲆᐃ !== Cf.ΔⲆΔⲆⲆ) {
                            if (C.ΔⲆⲆ & qw.ⲆⵠΔⲆᐃ) {
                                m -= 610;
                            } else {
                                m -= 414;
                            }
                        }
                        p = C.y1;
                        if (Cf.ΔⲆΔⲆⲆ !== C.ⲆⲆᐃ) {
                            if (C.ΔⲆⲆ & qw.ΔⵠΔⲆⲆ) {
                                p += 610;
                            } else {
                                p += 414;
                            }
                        }
                        if (Cf.transition) {
                            q = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
                            In.fillStyle = Kv(f.ΔⲆᐃ[0], f.ΔⲆᐃ[1], f.ΔⲆᐃ[2], f.Ⲇⵠᐃ[0], f.Ⲇⵠᐃ[1], f.Ⲇⵠᐃ[2], q);
                        } else {
                            In.fillStyle = f.ᐃᐃᐃⲆΔ[Cf.time];
                        }
                        w = Math.max(Yw.ᐃⵠⵠ.x + k - 2 - 230, 0);
                        x = Math.max(-Yw.ᐃⵠⵠ.x + Rn - j - 330 - 2, 0);
                        y = Math.max(Yw.ᐃⵠⵠ.y + p - 2, 0);
                        z = Math.max(-Yw.ᐃⵠⵠ.y + iq - m - 100 - 2, 0);
                        In.beginPath();
                        In.fillRect(w, y, Rn - x - w, iq - y - z);
                    }
                }
            }
            if (mf.ⵠᐃΔⵠⲆ) {
                Fv(lv, uv, vv, sv, tv, 695, "isl", 2);
                Fv(lv, uv, vv, sv, tv, 694, "isl", 2);
            }
            Fv(rv, uv, vv, sv, tv, 692, "isl", 2);
            if (mf.ⵠᐃΔⵠⲆ) {
                Fv(pv, uv, vv, sv, tv, 243, "de");
            }
            var A = Cf.Δᐃⵠ[tw.ⵠᐃᐃⵠΔ];
            for (c = 0; c < A.length; c++) {
                for (var u = A[c], B = 0; u.ᐃⲆΔΔᐃ.length > B; B++) {
                    Rv(u.ᐃⲆΔΔᐃ[B]);
                }
            }
            if ((lp += Af * 40) > 60) {
                lp -= 60;
            }
            Fv(Wu, uv, vv, sv, tv, 1024, "r", 0);
            c = 0;
            for (; c < Cf.ⵠᐃⲆᐃ.length; c++) {
                var C = Cf.ⵠᐃⲆᐃ[c];
                if (Cf.ΔⲆΔⲆⲆ !== C.ⲆⲆᐃ) {
                    j = C.x2;
                    if (Cf.ΔⲆΔⲆⲆ !== C.ⲆⲆᐃ) {
                        j -= 400;
                    }
                    k = C.x1;
                    if (C.ⲆⲆᐃ !== Cf.ΔⲆΔⲆⲆ) {
                        k += 400;
                    }
                    m = C.y2;
                    if (C.ⲆⲆᐃ !== Cf.ΔⲆΔⲆⲆ) {
                        m -= 300;
                    }
                    p = C.y1;
                    if (Cf.ΔⲆΔⲆⲆ !== C.ⲆⲆᐃ) {
                        p += 300;
                    }
                    if ((C.ΔⲆⲆ & qw.ΔᐃⵠⲆᐃ) > 0 && j - Rn + 120 <= -Yw.ᐃⵠⵠ.x && -Yw.ᐃⵠⵠ.x <= j + 820 && -Yw.ᐃⵠⵠ.y >= p + 88 - iq && -Yw.ᐃⵠⵠ.y <= m + 50) {
                        yv(j, p + 88, m - 88, Yw.ⵠⵠᐃⲆ[0], Cf.ᐃⵠᐃΔⲆ[C.ⲆⲆᐃ], C.ΔⲆⲆ & qw.ΔᐃⵠⲆᐃ);
                    }
                    if ((C.ΔⲆⲆ & qw.ⵠΔΔᐃΔ) > 0 && -Yw.ᐃⵠⵠ.x >= k - Rn - 700 && k - 20 >= -Yw.ᐃⵠⵠ.x && p + 88 - iq <= -Yw.ᐃⵠⵠ.y && m + 50 >= -Yw.ᐃⵠⵠ.y) {
                        Nv(k, p + 88, m - 88, Yw.ⵠⵠᐃⲆ[1], Cf.ᐃⵠᐃΔⲆ[C.ⲆⲆᐃ], C.ΔⲆⲆ & qw.ⵠΔΔᐃΔ);
                    }
                    if ((C.ΔⲆⲆ & qw.ⲆⵠΔⲆᐃ) > 0 && -Yw.ᐃⵠⵠ.x >= k - 235 - Rn && -Yw.ᐃⵠⵠ.x <= j + 350 && -Yw.ᐃⵠⵠ.y >= m - iq - 275 && -Yw.ᐃⵠⵠ.y <= m + 490) {
                        Bv(m - 230, k - 230, j + 230, Yw.ⵠⵠᐃⲆ[2], Cf.ᐃⵠᐃΔⲆ[C.ⲆⲆᐃ], C.ΔⲆⲆ & qw.ⲆⵠΔⲆᐃ);
                    }
                    if ((C.ΔⲆⲆ & qw.ΔⵠΔⲆⲆ) > 0 && -Yw.ᐃⵠⵠ.x >= k - 235 - Rn && j + 350 >= -Yw.ᐃⵠⵠ.x && p - iq - 390 <= -Yw.ᐃⵠⵠ.y && p + 315 >= -Yw.ᐃⵠⵠ.y) {
                        Lv(p + 310, k - 230, j + 230, Yw.ⵠⵠᐃⲆ[3], Cf.ᐃⵠᐃΔⲆ[C.ⲆⲆᐃ], C.ΔⲆⲆ & qw.ΔⵠΔⲆⲆ);
                    }
                }
            }
        })();
        (function () {
            var v = sv;
            var e = tv;
            var i = uv;
            var t = vv;
            if (mf.ⵠᐃΔⵠⲆ) {
                Fv(rv, i, t, v, e, 621, "l", 2);
            }
            if (mf.ⵠᐃΔⵠⲆ) {
                Fv(rv, i, t, v, e, nr.ⲆᐃΔⲆΔ, "la", 5);
            }
            Fv(rv, i, t, v, e, 203, "la", 5);
            Fv(lv, i, t, v, e, 620, "l", 2);
            if (mf.ⵠᐃΔⵠⲆ) {
                Fv(qv, i, t, v, e, 203, "la", 5);
                Fv(lv, i, t, v, e, 619, "l", 2);
            }
            Fv(rv, i, t, v, e, 1052, "ma", 4);
            for (var n = Cf.Δᐃⵠ[tw.ⵠΔΔⵠΔᐃⵠ], C = 0; n.length > C; C++) {
                n[C].ⵠᐃⲆᐃⵠⵠᐃ();
            }
            var aa = Cf.Δᐃⵠ[tw.ⵠᐃᐃⵠΔ];
            for (C = 0; aa.length > C; C++) {
                for (var ba = aa[C], ca = 0; ba.ⲆΔⵠᐃΔ.length > ca; ca++) {
                    wv(ba.ⲆΔⵠᐃΔ[ca]);
                }
            }
            var da = Cf.Δᐃⵠ[tw.ᐃⲆⵠⵠΔ];
            for (C = 0; C < da.length; C++) {
                Mv(da[C], 125);
                da[C].ΔᐃⲆⵠᐃ(da[C].info);
            }
            var l = Cf.Δᐃⵠ[tw.Ⲇⵠⵠⵠⵠ];
            for (C = 0; l.length > C; C++) {
                if (l[C].action == 2) {
                    Jv(l[C]);
                }
            }
            var ea = Cf.Δᐃⵠ[tw.ΔⵠᐃⵠⲆ];
            for (C = 0; ea.length > C; C++) {
                Jv(ea[C], 113);
            }
            var fa = Cf.Δᐃⵠ[tw.ⲆΔⵠᐃᐃ];
            for (C = 0; C < fa.length; C++) {
                Jv(fa[C]);
            }
            var ha = Cf.Δᐃⵠ[tw.ᐃⵠⵠΔⵠ];
            for (C = 0; ha.length > C; C++) {
                Jv(ha[C]);
            }
            var ia = Cf.Δᐃⵠ[tw.ᐃᐃᐃⲆⵠ];
            for (C = 0; ia.length > C; C++) {
                Jv(ia[C], 118);
            }
            var m = Cf.Δᐃⵠ[tw.ⵠΔⵠΔΔ];
            for (C = 0; C < m.length; C++) {
                Mv(m[C]);
            }
            var c = Cf.Δᐃⵠ[tw.ⲆᐃΔⲆⵠ];
            for (C = 0; c.length > C; C++) {
                Mv(c[C], 141);
            }
            var p = Cf.Δᐃⵠ[tw.ⵠⲆΔⵠΔ];
            for (C = 0; p.length > C; C++) {
                Jv(p[C]);
            }
            p = Cf.Δᐃⵠ[tw.ⵠᐃΔⲆⲆ];
            C = 0;
            for (; C < p.length; C++) {
                Jv(p[C]);
            }
            p = Cf.Δᐃⵠ[tw.ⵠⲆΔⵠΔ];
            C = 0;
            for (; p.length > C; C++) {
                xv(p[C]);
            }
            var ja = Cf.Δᐃⵠ[tw.ᐃΔᐃΔᐃ];
            for (C = 0; ja.length > C; C++) {
                if ((ja[C].info & 15) === 0 || ja[C].info === 10) {
                    Mv(ja[C]);
                }
            }
            var ka = Cf.Δᐃⵠ[tw.ⵠⲆᐃᐃᐃ];
            for (C = 0; ka.length > C; C++) {
                if (!(ka[C].info & 15) || ka[C].info === 10) {
                    Mv(ka[C]);
                }
            }
            var la = Cf.Δᐃⵠ[tw.ᐃᐃΔΔΔ];
            for (C = 0; la.length > C; C++) {
                if (!(la[C].info & 15) || la[C].info === 10) {
                    Mv(la[C]);
                }
            }
            var ma = Cf.Δᐃⵠ[tw.ΔΔᐃⲆΔ];
            for (C = 0; ma.length > C; C++) {
                Mv(ma[C], 132);
            }
            var na = Cf.Δᐃⵠ[tw.ΔⵠⵠΔⵠ];
            for (C = 0; C < na.length; C++) {
                if ((na[C].info & 15) === 0 || na[C].info === 10) {
                    Mv(na[C]);
                }
            }
            var oa = Cf.Δᐃⵠ[tw.ⵠⵠⲆΔΔ];
            for (C = 0; oa.length > C; C++) {
                if (!(oa[C].info & 15) || oa[C].info === 10) {
                    Mv(oa[C]);
                }
            }
            var pa = Cf.Δᐃⵠ[tw.ⵠⲆⲆⵠᐃ];
            for (C = 0; C < pa.length; C++) {
                if ((pa[C].info & 15) === 0 || pa[C].info === 10) {
                    Mv(pa[C]);
                }
            }
            ma = Cf.Δᐃⵠ[tw.ⵠⵠᐃⲆⵠ];
            C = 0;
            for (; ma.length > C; C++) {
                Mv(ma[C]);
            }
            var qa = Cf.Δᐃⵠ[tw.ΔᐃⲆⲆΔ];
            for (C = 0; C < qa.length; C++) {
                Mv(qa[C], 250, 729);
            }
            var x = Cf.Δᐃⵠ[tw.ⲆⵠᐃᐃΔⲆᐃ];
            for (C = 0; x.length > C; C++) {
                Mv(x[C], 250, 729);
            }
            var J = Cf.Δᐃⵠ[tw.ΔΔⵠᐃᐃ];
            for (C = 0; J.length > C; C++) {
                Mv(J[C], 854, 859);
            }
            var M = Cf.Δᐃⵠ[tw.ⵠⵠΔᐃⲆ];
            for (C = 0; M.length > C; C++) {
                if (M[C].info & 1) {
                    Mv(M[C], 336);
                }
            }
            M = Cf.Δᐃⵠ[tw.ⲆⵠⲆᐃⵠ];
            C = 0;
            for (; C < M.length; C++) {
                if (M[C].info & 1) {
                    Mv(M[C], 373);
                }
            }
            M = Cf.Δᐃⵠ[tw.ΔΔⵠⲆᐃ];
            C = 0;
            for (; C < M.length; C++) {
                if (M[C].info) {
                    Mv(M[C], 376);
                }
            }
            M = Cf.Δᐃⵠ[tw.ΔⲆΔΔⲆ];
            C = 0;
            for (; C < M.length; C++) {
                if (M[C].info) {
                    Mv(M[C], 379);
                }
            }
            M = Cf.Δᐃⵠ[tw.ᐃⵠᐃᐃᐃ];
            C = 0;
            for (; M.length > C; C++) {
                if (M[C].info) {
                    Mv(M[C], 500);
                }
            }
            M = Cf.Δᐃⵠ[tw.ᐃΔᐃⲆⲆ];
            C = 0;
            for (; C < M.length; C++) {
                if (M[C].info) {
                    Mv(M[C], 376);
                }
            }
            M = Cf.Δᐃⵠ[tw.ⲆⲆᐃᐃⲆ];
            C = 0;
            for (; C < M.length; C++) {
                if (M[C].info & 1) {
                    Mv(M[C], 336);
                }
            }
            M = Cf.Δᐃⵠ[tw.ᐃΔⲆⵠⵠ];
            C = 0;
            for (; M.length > C; C++) {
                if (M[C].info & 1) {
                    Mv(M[C], 373);
                }
            }
            M = Cf.Δᐃⵠ[tw.ᐃᐃⵠⵠᐃ];
            C = 0;
            for (; C < M.length; C++) {
                if (M[C].info) {
                    Mv(M[C], 376);
                }
            }
            M = Cf.Δᐃⵠ[tw.ⵠⵠⲆⲆⲆ];
            C = 0;
            for (; M.length > C; C++) {
                if (M[C].info) {
                    Mv(M[C], 379);
                }
            }
            M = Cf.Δᐃⵠ[tw.ᐃⲆⲆᐃⲆ];
            C = 0;
            for (; C < M.length; C++) {
                if (M[C].info) {
                    Mv(M[C], 500);
                }
            }
            M = Cf.Δᐃⵠ[tw.ⵠⲆᐃⲆⲆ];
            C = 0;
            for (; C < M.length; C++) {
                if (M[C].info) {
                    Mv(M[C], 376);
                }
            }
            var ra = Cf.Δᐃⵠ[tw.ᐃᐃⵠΔᐃ];
            for (C = 0; C < ra.length; C++) {
                Mv(ra[C], 264, 322);
            }
            var D = Cf.Δᐃⵠ[tw.ΔⵠΔΔⲆ];
            for (C = 0; C < D.length; C++) {
                Mv(D[C], 198);
            }
            n = Cf.Δᐃⵠ[tw.ⵠΔΔⵠΔᐃⵠ];
            C = 0;
            for (; C < n.length; C++) {
                Mv(n[C], nr.ⵠΔΔⵠΔᐃⵠ, nr.ΔΔⲆᐃᐃΔᐃΔⲆ);
            }
            var sa = Cf.Δᐃⵠ[tw.ᐃᐃΔᐃᐃ];
            for (C = 0; C < sa.length; C++) {
                if (sa[C].ⲆΔΔΔⵠⵠⵠ === 0) {
                    Mv(sa[C]);
                }
            }
            aa = Cf.Δᐃⵠ[tw.ⵠᐃᐃⵠΔ];
            C = 0;
            for (; aa.length > C; C++) {
                ba = aa[C];
                if (aa[C].ΔᐃⲆⲆᐃ !== 227 && aa[C].ΔᐃⲆⲆᐃ !== 228 && aa[C].ΔᐃⲆⲆᐃ !== 229 && aa[C].ΔᐃⲆⲆᐃ !== 230 && aa[C].ΔᐃⲆⲆᐃ !== 91) {
                    if (ba.ΔΔΔⲆⲆⲆΔ === 0) {
                        if (ba.ⵠΔᐃᐃⲆΔᐃ > 0.001) {
                            ba.ⵠΔᐃᐃⲆΔᐃ = ΔⲆⲆⵠ.ⵠⲆΔⲆΔⲆⲆ(ba.ⵠΔᐃᐃⲆΔᐃ, 0, 0.018);
                            var ta = 1 + Math.min(1, Math.max(ba.ⵠΔᐃᐃⲆΔᐃ, 0) / 100) * 0.18;
                            In.save();
                            In.scale(ta, ta);
                            Yw.ᐃⵠⵠ.x /= ta;
                            Yw.ᐃⵠⵠ.y /= ta;
                            ba.x /= ta;
                            ba.y /= ta;
                            ba.r.x /= ta;
                            ba.r.y /= ta;
                            ba.ⲆᐃΔᐃΔⲆᐃ();
                            ba.ⵠⵠΔΔ();
                            Yw.ᐃⵠⵠ.x *= ta;
                            Yw.ᐃⵠⵠ.y *= ta;
                            ba.x *= ta;
                            ba.y *= ta;
                            ba.r.x *= ta;
                            ba.r.y *= ta;
                            In.restore();
                        } else {
                            ba.ⲆΔΔΔⵠⵠⵠ = 0;
                            ba.ⲆᐃΔᐃΔⲆᐃ();
                            ba.ⵠⵠΔΔ();
                        }
                    }
                } else if (ba.ΔᐃΔⲆⲆ <= 180) {
                    In.save();
                    ta = 1 + Math.min(1, Math.max(ba.ᐃᐃᐃⵠⵠ - 30, 0) / 180) * 0.35;
                    In.scale(ta, ta);
                    Yw.ᐃⵠⵠ.x /= ta;
                    Yw.ᐃⵠⵠ.y /= ta;
                    ba.x /= ta;
                    ba.y /= ta;
                    ba.r.x /= ta;
                    ba.r.y /= ta;
                    ba.ⲆΔΔΔⵠⵠⵠ = 0;
                    ba.ⲆᐃΔᐃΔⲆᐃ();
                    ba.ⵠⵠΔΔ();
                    Yw.ᐃⵠⵠ.x *= ta;
                    Yw.ᐃⵠⵠ.y *= ta;
                    ba.x *= ta;
                    ba.y *= ta;
                    ba.r.x *= ta;
                    ba.r.y *= ta;
                    In.restore();
                }
            }
            D = Cf.Δᐃⵠ[tw.ΔⵠΔΔⲆ];
            C = 0;
            for (; D.length > C; C++) {
                Mv(D[C], 913);
            }
            var ua = Cf.Δᐃⵠ[tw.ΔᐃⵠΔᐃ];
            for (C = 0; ua.length > C; C++) {
                Mv(ua[C]);
            }
            var Q = Cf.Δᐃⵠ[tw.ⵠΔΔΔᐃ];
            for (C = 0; C < Q.length; C++) {
                Mv(Q[C], 419, 461);
            }
            var _ = Cf.Δᐃⵠ[tw.ΔΔⵠᐃΔ];
            for (C = 0; _.length > C; C++) {
                Mv(_[C]);
            }
            var F = Cf.Δᐃⵠ[tw.ᐃⲆᐃΔⵠ];
            for (C = 0; F.length > C; C++) {
                Mv(F[C], 299, 326);
            }
            var R = Cf.Δᐃⵠ[tw.ΔⲆⲆΔᐃ];
            for (C = 0; R.length > C; C++) {
                Mv(R[C], 232, 1077);
            }
            var j = Cf.Δᐃⵠ[tw.ΔΔⲆⵠⵠ];
            for (C = 0; j.length > C; C++) {
                Mv(j[C], 233, 1092);
            }
            ja = Cf.Δᐃⵠ[tw.ᐃΔᐃΔᐃ];
            C = 0;
            for (; ja.length > C; C++) {
                if ((ja[C].info & 15) !== 0 && ja[C].info !== 10) {
                    Mv(ja[C]);
                }
            }
            ka = Cf.Δᐃⵠ[tw.ⵠⲆᐃᐃᐃ];
            C = 0;
            for (; ka.length > C; C++) {
                if ((ka[C].info & 15) !== 0 && ka[C].info !== 10) {
                    Mv(ka[C]);
                }
            }
            la = Cf.Δᐃⵠ[tw.ΔᐃⲆⲆᐃⲆⵠ];
            C = 0;
            for (; C < la.length; C++) {
                Mv(la[C], 239);
            }
            la = Cf.Δᐃⵠ[tw.ᐃᐃΔΔΔ];
            C = 0;
            for (; C < la.length; C++) {
                if ((la[C].info & 15) !== 0 && la[C].info !== 10) {
                    Mv(la[C]);
                }
            }
            p = Cf.Δᐃⵠ[tw.ⵠᐃΔⲆⲆ];
            C = 0;
            for (; p.length > C; C++) {
                xv(p[C]);
            }
            na = Cf.Δᐃⵠ[tw.ΔⵠⵠΔⵠ];
            C = 0;
            for (; C < na.length; C++) {
                if ((na[C].info & 15) !== 0 && na[C].info !== 10) {
                    Mv(na[C]);
                }
            }
            oa = Cf.Δᐃⵠ[tw.ⵠⵠⲆΔΔ];
            C = 0;
            for (; oa.length > C; C++) {
                if (oa[C].info & 15 && oa[C].info !== 10) {
                    Mv(oa[C]);
                }
            }
            pa = Cf.Δᐃⵠ[tw.ⵠⲆⲆⵠᐃ];
            C = 0;
            for (; C < pa.length; C++) {
                if (pa[C].info & 15 && pa[C].info !== 10) {
                    Mv(pa[C]);
                }
            }
            var G = Cf.Δᐃⵠ[tw.ⵠⵠᐃΔⲆ];
            for (C = 0; G.length > C; C++) {
                Mv(G[C], 691, 697);
            }
            var W = Cf.Δᐃⵠ[tw.ⵠᐃΔⲆΔ];
            for (C = 0; C < W.length; C++) {
                Mv(W[C], 637, 687);
            }
            var L = Cf.Δᐃⵠ[tw.ΔⵠⲆⵠⲆ];
            for (C = 0; C < L.length; C++) {
                Mv(L[C], 673, 688);
            }
            var O = Cf.Δᐃⵠ[tw.ᐃⵠⲆⲆΔ];
            for (C = 0; C < O.length; C++) {
                Mv(O[C], 260, 333);
            }
            var N = Cf.Δᐃⵠ[tw.ΔΔⲆⲆᐃ];
            for (C = 0; N.length > C; C++) {
                Mv(N[C], 1033, 1034);
            }
            var H = Cf.Δᐃⵠ[tw.ⲆᐃᐃΔΔ];
            for (C = 0; H.length > C; C++) {
                Mv(H[C], 445, 462);
            }
            var q = Cf.Δᐃⵠ[tw.Δⵠᐃⵠᐃ];
            for (C = 0; C < q.length; C++) {
                Mv(q[C]);
            }
            var U = Cf.Δᐃⵠ[tw.ⲆⲆⵠᐃⲆ];
            for (C = 0; C < U.length; C++) {
                Mv(U[C], 918, 919);
            }
            var Y = Cf.Δᐃⵠ[tw.ᐃΔⵠΔⵠ];
            for (C = 0; C < Y.length; C++) {
                Mv(Y[C]);
            }
            var K = Cf.Δᐃⵠ[tw.ᐃⲆⵠⲆΔ];
            for (C = 0; K.length > C; C++) {
                Mv(K[C], 1218, 1219);
            }
            var V = Cf.Δᐃⵠ[tw.ΔⲆᐃᐃΔ];
            for (C = 0; V.length > C; C++) {
                if (V[C].scale === 1) {
                    Mv(V[C], 449, 463);
                }
            }
            V = Cf.Δᐃⵠ[tw.ᐃΔⲆΔΔ];
            C = 0;
            for (; V.length > C; C++) {
                if (V[C].scale === 1) {
                    Mv(V[C], 450, 464);
                }
            }
            var va = Cf.Δᐃⵠ[tw.ΔⲆΔΔⵠ];
            for (C = 0; C < va.length; C++) {
                Mv(va[C]);
            }
            var Z = Cf.Δᐃⵠ[tw.ⲆΔᐃΔⲆ];
            for (C = 0; C < Z.length; C++) {
                Mv(Z[C], 114);
            }
            l = Cf.Δᐃⵠ[tw.Ⲇⵠⵠⵠⵠ];
            C = 0;
            for (; C < l.length; C++) {
                Mv(l[C]);
            }
            var wa = Cf.Δᐃⵠ[tw.ΔⵠⲆⲆⲆ];
            for (C = 0; wa.length > C; C++) {
                Mv(wa[C]);
            }
            M = Cf.Δᐃⵠ[tw.ⲆⲆᐃᐃⲆ];
            C = 0;
            for (; M.length > C; C++) {
                if (!(M[C].info & 1)) {
                    Mv(M[C], 166);
                }
                M[C].ΔᐃⲆⵠᐃ(M[C].info >> 1);
            }
            M = Cf.Δᐃⵠ[tw.ᐃΔⲆⵠⵠ];
            C = 0;
            for (; C < M.length; C++) {
                if (!(M[C].info & 1)) {
                    Mv(M[C], 171);
                }
                M[C].ΔᐃⲆⵠᐃ(M[C].info >> 1);
            }
            M = Cf.Δᐃⵠ[tw.ᐃᐃⵠⵠᐃ];
            C = 0;
            for (; C < M.length; C++) {
                if (!(M[C].info & 1)) {
                    Mv(M[C], 172);
                }
                M[C].ΔᐃⲆⵠᐃ(M[C].info >> 1);
            }
            M = Cf.Δᐃⵠ[tw.ⵠⵠⲆⲆⲆ];
            C = 0;
            for (; M.length > C; C++) {
                if (!(M[C].info & 1)) {
                    Mv(M[C], 173);
                }
                M[C].ΔᐃⲆⵠᐃ(M[C].info >> 1);
            }
            M = Cf.Δᐃⵠ[tw.ᐃⲆⲆᐃⲆ];
            C = 0;
            for (; C < M.length; C++) {
                if (!(M[C].info & 1)) {
                    Mv(M[C], 124);
                }
                M[C].ΔᐃⲆⵠᐃ(M[C].info >> 1);
            }
            M = Cf.Δᐃⵠ[tw.ⵠⲆᐃⲆⲆ];
            C = 0;
            for (; M.length > C; C++) {
                if (!(M[C].info & 1)) {
                    Mv(M[C], 218);
                }
                M[C].ΔᐃⲆⵠᐃ(M[C].info >> 1);
            }
            M = Cf.Δᐃⵠ[tw.ⵠⵠΔᐃⲆ];
            C = 0;
            for (; M.length > C; C++) {
                if (!(M[C].info & 1)) {
                    Mv(M[C], 212);
                }
                M[C].ΔᐃⲆⵠᐃ(M[C].info >> 1);
            }
            M = Cf.Δᐃⵠ[tw.ⲆⵠⲆᐃⵠ];
            C = 0;
            for (; M.length > C; C++) {
                if (!(M[C].info & 1)) {
                    Mv(M[C], 213);
                }
                M[C].ΔᐃⲆⵠᐃ(M[C].info >> 1);
            }
            M = Cf.Δᐃⵠ[tw.ΔΔⵠⲆᐃ];
            C = 0;
            for (; C < M.length; C++) {
                if (!(M[C].info & 1)) {
                    Mv(M[C], 214);
                }
                M[C].ΔᐃⲆⵠᐃ(M[C].info >> 1);
            }
            M = Cf.Δᐃⵠ[tw.ΔⲆΔΔⲆ];
            C = 0;
            for (; C < M.length; C++) {
                if (!(M[C].info & 1)) {
                    Mv(M[C], 215);
                }
                M[C].ΔᐃⲆⵠᐃ(M[C].info >> 1);
            }
            M = Cf.Δᐃⵠ[tw.ᐃⵠᐃᐃᐃ];
            C = 0;
            for (; M.length > C; C++) {
                if (!(M[C].info & 1)) {
                    Mv(M[C], 216);
                }
                M[C].ΔᐃⲆⵠᐃ(M[C].info >> 1);
            }
            M = Cf.Δᐃⵠ[tw.ᐃΔᐃⲆⲆ];
            C = 0;
            for (; M.length > C; C++) {
                if (!(M[C].info & 1)) {
                    Mv(M[C], 220);
                }
                M[C].ΔᐃⲆⵠᐃ(M[C].info >> 1);
            }
            var xa = Cf.Δᐃⵠ[tw.ᐃⵠΔᐃⵠ];
            for (C = 0; xa.length > C; C++) {
                Mv(xa[C], 162);
                xa[C].ΔᐃⲆⵠᐃ(xa[C].info);
            }
            xa = Cf.Δᐃⵠ[tw.ⵠⵠⲆⵠⲆ];
            C = 0;
            for (; C < xa.length; C++) {
                Mv(xa[C], 163);
                xa[C].ΔᐃⲆⵠᐃ(xa[C].info);
            }
            xa = Cf.Δᐃⵠ[tw.ᐃⲆⲆⲆΔ];
            C = 0;
            for (; xa.length > C; C++) {
                Mv(xa[C], 164);
                xa[C].ΔᐃⲆⵠᐃ(xa[C].info);
            }
            xa = Cf.Δᐃⵠ[tw.ⲆΔⲆⵠⲆ];
            C = 0;
            for (; C < xa.length; C++) {
                Mv(xa[C], 165);
                xa[C].ΔᐃⲆⵠᐃ(xa[C].info);
            }
            xa = Cf.Δᐃⵠ[tw.ΔᐃⵠⵠⲆ];
            C = 0;
            for (; C < xa.length; C++) {
                Mv(xa[C], 122);
                xa[C].ΔᐃⲆⵠᐃ(xa[C].info);
            }
            xa = Cf.Δᐃⵠ[tw.ΔᐃΔⲆᐃ];
            C = 0;
            for (; xa.length > C; C++) {
                Mv(xa[C], 217);
                xa[C].ΔᐃⲆⵠᐃ(xa[C].info);
            }
            var ya = Cf.Δᐃⵠ[tw.ⲆΔⲆΔⲆ];
            for (C = 0; C < ya.length; C++) {
                Mv(ya[C], 160);
                ya[C].ΔᐃⲆⵠᐃ(ya[C].info);
            }
            ya = Cf.Δᐃⵠ[tw.ⲆⵠᐃᐃⲆ];
            C = 0;
            for (; C < ya.length; C++) {
                Mv(ya[C], 168);
                ya[C].ΔᐃⲆⵠᐃ(ya[C].info);
            }
            ya = Cf.Δᐃⵠ[tw.ΔⵠⵠᐃΔ];
            C = 0;
            for (; ya.length > C; C++) {
                Mv(ya[C], 169);
                ya[C].ΔᐃⲆⵠᐃ(ya[C].info);
            }
            ya = Cf.Δᐃⵠ[tw.ᐃΔᐃᐃᐃ];
            C = 0;
            for (; ya.length > C; C++) {
                Mv(ya[C], 170);
                ya[C].ΔᐃⲆⵠᐃ(ya[C].info);
            }
            ya = Cf.Δᐃⵠ[tw.Δᐃⵠⵠⵠ];
            C = 0;
            for (; C < ya.length; C++) {
                Mv(ya[C], 123);
                ya[C].ΔᐃⲆⵠᐃ(ya[C].info);
            }
            ya = Cf.Δᐃⵠ[tw.Ⲇⵠᐃᐃⵠ];
            C = 0;
            for (; ya.length > C; C++) {
                Mv(ya[C], 219);
                ya[C].ΔᐃⲆⵠᐃ(ya[C].info);
            }
            var za = Cf.Δᐃⵠ[tw.ⵠΔⵠᐃΔ];
            for (C = 0; za.length > C; C++) {
                var Aa = za[C];
                if (Aa.info > 0) {
                    Mv(Aa, 788);
                } else {
                    Mv(Aa, 182);
                }
            }
            var Ba = Cf.Δᐃⵠ[tw.ⵠΔᐃΔΔ];
            for (C = 0; C < Ba.length; C++) {
                Mv(Ba[C], 159);
            }
            Fv(rv, i, t, v, e, 111, "g", 2);
            Fv(rv, i, t, v, e, 415, "gw", 2);
            Fv(rv, i, t, v, e, 112, "d", 2);
            Fv(rv, i, t, v, e, 416, "dw", 2);
            Fv(rv, i, t, v, e, 110, "p", 0);
            Fv(rv, i, t, v, e, 241, "m", 2);
            Fv(rv, i, t, v, e, 121, "a", 2);
            Fv(rv, i, t, v, e, 202, "re", 2);
            Fv(rv, i, t, v, e, 679, "cs", 3, 3);
            Fv(rv, i, t, v, e, 679, "cs", 2, 2);
            Fv(rv, i, t, v, e, 679, "cs", 1, 1);
            Fv(rv, i, t, v, e, 679, "cs", 0, 0);
            Fv(rv, i, t, v, e, 676, "cs", 3, 3);
            Fv(rv, i, t, v, e, 676, "cs", 2, 2);
            Fv(rv, i, t, v, e, 676, "cs", 1, 1);
            Fv(rv, i, t, v, e, 676, "cs", 0, 0);
            var Ca = Cf.Δᐃⵠ[tw.ᐃⲆᐃⵠⵠ];
            for (C = 0; Ca.length > C; C++) {
                for (ca = 0; Ca[C].info > ca; ca++) {
                    Mv(Ca[C].ᐃⵠⲆᐃ[ca], 294);
                }
            }
            Fv(rv, i, t, v, e, 108, "s", 2);
            var Da = Cf.Δᐃⵠ[tw.ⲆⲆΔΔᐃ];
            for (C = 0; Da.length > C; C++) {
                Mv(Da[C]);
            }
            Da = Cf.Δᐃⵠ[tw.ΔⲆⵠⲆΔ];
            C = 0;
            for (; Da.length > C; C++) {
                Mv(Da[C]);
            }
            Da = Cf.Δᐃⵠ[tw.ᐃᐃⵠΔⲆ];
            C = 0;
            for (; Da.length > C; C++) {
                Mv(Da[C]);
            }
            Da = Cf.Δᐃⵠ[tw.ⵠΔⲆΔΔ];
            C = 0;
            for (; C < Da.length; C++) {
                Mv(Da[C]);
            }
            Da = Cf.Δᐃⵠ[tw.ⲆⲆⲆⲆⲆ];
            C = 0;
            for (; C < Da.length; C++) {
                Mv(Da[C]);
            }
            var Ea = Cf.Δᐃⵠ[tw.ⵠⲆⵠΔΔ];
            for (C = 0; C < Ea.length; C++) {
                Jv(Ea[C]);
            }
            ea = Cf.Δᐃⵠ[tw.ΔⵠᐃⵠⲆ];
            C = 0;
            for (; C < ea.length; C++) {
                xv(ea[C]);
            }
            ea = Cf.Δᐃⵠ[tw.ᐃᐃᐃⲆⵠ];
            C = 0;
            for (; C < ea.length; C++) {
                xv(ea[C]);
            }
            l = Cf.Δᐃⵠ[tw.Ⲇⵠⵠⵠⵠ];
            C = 0;
            for (; C < l.length; C++) {
                if (l[C].action == 2) {
                    xv(l[C]);
                }
            }
            wa = Cf.Δᐃⵠ[tw.ΔⵠⲆⲆⲆ];
            C = 0;
            for (; C < wa.length; C++) {
                xv(wa[C]);
            }
            fa = Cf.Δᐃⵠ[tw.ⲆΔⵠᐃᐃ];
            C = 0;
            for (; fa.length > C; C++) {
                xv(fa[C]);
            }
            ha = Cf.Δᐃⵠ[tw.ᐃⵠⵠΔⵠ];
            C = 0;
            for (; ha.length > C; C++) {
                xv(ha[C]);
                ha[C].ΔᐃⲆⵠᐃ(ha[C].info);
            }
            Fv(rv, i, t, v, e, 989, "c", 0);
            Fv(rv, i, t, v, e, 109, "t", 5, 4);
            Fv(rv, i, t, v, e, 413, "f", 2, 2);
            Fv(rv, i, t, v, e, 693, "plm", 0, 0);
            Fv(rv, i, t, v, e, 307, "b", 3, 2);
            Fv(rv, i, t, v, e, 109, "t", 3, 2);
            Fv(rv, i, t, v, e, 307, "b", 1, 0);
            Fv(rv, i, t, v, e, 413, "f", 1, 1);
            Fv(rv, i, t, v, e, 693, "plm", 1, 1);
            Fv(rv, i, t, v, e, 109, "t", 1, 0);
            Fv(rv, i, t, v, e, 413, "f", 0, 0);
            Fv(rv, i, t, v, e, 693, "plm", 2, 2);
            Ea = Cf.Δᐃⵠ[tw.ⵠⲆⵠΔΔ];
            C = 0;
            for (; Ea.length > C; C++) {
                xv(Ea[C]);
            }
            var Fa = Cf.Δᐃⵠ[tw.ΔⲆⵠΔⲆ];
            for (C = 0; C < Fa.length; C++) {
                Mv(Fa[C], 221);
            }
            aa = Cf.Δᐃⵠ[tw.ⵠᐃᐃⵠΔ];
            C = 0;
            for (; aa.length > C; C++) {
                if ((ba = aa[C]).ΔΔΔⲆⲆⲆΔ === 1 && (ba.ΔᐃΔⲆⲆ < 180 || ba.ΔᐃⲆⲆᐃ !== 227 && ba.ΔᐃⲆⲆᐃ !== 228 && ba.ΔᐃⲆⲆᐃ !== 91 && ba.ΔᐃⲆⲆᐃ !== 229 && ba.ΔᐃⲆⲆᐃ !== 230)) {
                    ba.ⵠΔᐃᐃⲆΔᐃ = ΔⲆⲆⵠ.ⵠⲆΔⲆΔⲆⲆ(ba.ⵠΔᐃᐃⲆΔᐃ, 100, 0.018);
                    ta = 1 + Math.min(1, Math.max(ba.ⵠΔᐃᐃⲆΔᐃ, 0) / 100) * 0.18;
                    In.save();
                    In.scale(ta, ta);
                    Yw.ᐃⵠⵠ.x /= ta;
                    Yw.ᐃⵠⵠ.y /= ta;
                    ba.x /= ta;
                    ba.y /= ta;
                    ba.r.x /= ta;
                    ba.r.y /= ta;
                    ba.ⲆᐃΔᐃΔⲆᐃ();
                    ba.ⵠⵠΔΔ();
                    Yw.ᐃⵠⵠ.x *= ta;
                    Yw.ᐃⵠⵠ.y *= ta;
                    ba.x *= ta;
                    ba.y *= ta;
                    ba.r.x *= ta;
                    ba.r.y *= ta;
                    In.restore();
                }
            }
            var Ga = Cf.Δᐃⵠ[tw.Δᐃᐃⵠᐃ];
            for (C = 0; Ga.length > C; C++) {
                Mv(Ga[C], 190);
                Ga[C].ΔᐃⲆⵠᐃ(Ga[C].info);
            }
            var Ha = Cf.Δᐃⵠ[tw.ΔⲆⵠΔᐃ];
            for (C = 0; C < Ha.length; C++) {
                Mv(Ha[C], 245, 246);
            }
            var Ia = Cf.Δᐃⵠ[tw.ΔᐃΔᐃⵠ];
            for (C = 0; C < Ia.length; C++) {
                Mv(Ia[C], 201);
            }
            aa = Cf.Δᐃⵠ[tw.ⵠᐃᐃⵠΔ];
            C = 0;
            for (; C < aa.length; C++) {
                ba = aa[C];
                if ((ba.ΔᐃⲆⲆᐃ === 227 || ba.ΔᐃⲆⲆᐃ === 228 || ba.ΔᐃⲆⲆᐃ === 91 || ba.ΔᐃⲆⲆᐃ === 229 || ba.ΔᐃⲆⲆᐃ === 230) && ba.ΔᐃΔⲆⲆ > 180) {
                    ba.ⲆΔΔΔⵠⵠⵠ = 1;
                    In.save();
                    ta = 1 + Math.min(1, Math.max(ba.ᐃᐃᐃⵠⵠ - 30, 0) / 180) * 0.35;
                    In.scale(ta, ta);
                    Yw.ᐃⵠⵠ.x /= ta;
                    Yw.ᐃⵠⵠ.y /= ta;
                    ba.x /= ta;
                    ba.y /= ta;
                    ba.r.x /= ta;
                    ba.r.y /= ta;
                    ba.ⲆᐃΔᐃΔⲆᐃ();
                    ba.ⵠⵠΔΔ();
                    Yw.ᐃⵠⵠ.x *= ta;
                    Yw.ᐃⵠⵠ.y *= ta;
                    ba.x *= ta;
                    ba.y *= ta;
                    ba.r.x *= ta;
                    ba.r.y *= ta;
                    In.restore();
                }
            }
            sa = Cf.Δᐃⵠ[tw.ᐃᐃΔᐃᐃ];
            C = 0;
            for (; C < sa.length; C++) {
                if (sa[C].ⲆΔΔΔⵠⵠⵠ === 1) {
                    Mv(sa[C]);
                }
            }
            V = Cf.Δᐃⵠ[tw.ΔⲆᐃᐃΔ];
            C = 0;
            for (; V.length > C; C++) {
                if (V[C].scale > 1) {
                    Mv(V[C], 449, 463);
                }
            }
            V = Cf.Δᐃⵠ[tw.ᐃΔⲆΔΔ];
            C = 0;
            for (; V.length > C; C++) {
                if (V[C].scale > 1) {
                    Mv(V[C], 450, 464);
                }
            }
            var Ja = Cf.Δᐃⵠ[tw.ⵠΔⵠΔⵠ];
            for (C = 0; C < Ja.length; C++) {
                Mv(Ja[C], 235, 1107);
            }
            var Ka = Cf.Δᐃⵠ[tw.ⵠΔⵠΔⲆ];
            for (C = 0; C < Ka.length; C++) {
                Mv(Ka[C], 238, 1128);
            }
            if ((kv += Af * 15) > 60) {
                kv -= 60;
            }
            Fv(mv, i, t, v, e, 1041, "fo", 2);
            Fv(mv, i, t, v, e, 244, "fod", 2);
        })();
        if (mf.ⵠᐃΔⵠⲆ && qw.ΔⲆᐃⵠⵠ !== Cf.mode && Cf.mode !== qw.ⵠΔⵠⲆᐃ && qw.ⵠᐃΔⵠΔᐃΔ !== Cf.mode) {
            (function () {
                var a = Yw.ᐃⲆΔⵠⵠ;
                if (a.ᐃΔᐃⲆΔ === 0) {
                    a.ⵠⲆΔᐃⲆ = Math.max(0, a.ⵠⲆΔᐃⲆ - Af / 10);
                } else {
                    a.ⵠⲆΔᐃⲆ = Math.min(1, a.ⵠⲆΔᐃⲆ + Af / 10);
                }
                for (var b = a.ΔᐃᐃΔⵠ, c = 0; b.length > c; c++) {
                    var d = b[c];
                    a.ⲆᐃΔ(d);
                    Cv(471, d.id, Yw.ᐃⵠⵠ.x + d.x, Yw.ᐃⵠⵠ.y + d.y, d.alpha);
                }
                for (c = 0; c < b.length; c++) {
                    d = b[c];
                    if (d.ⲆⵠΔΔⲆ <= 0 || d.x > -Yw.ᐃⵠⵠ.x + Rn || d.x < -Yw.ᐃⵠⵠ.x - Yw.ᐃⵠⵠ.w / 2 || -Yw.ᐃⵠⵠ.y + iq < d.y) {
                        b.splice(c, 1);
                    }
                }
                var e = -Yw.ᐃⵠⵠ.y;
                if (Cf.ⵠᐃⵠⲆᐃ > -1000) {
                    a.add(e);
                }
            })();
            (function () {
                var a = Yw.ᐃᐃΔⲆⵠ;
                if (a.ᐃΔᐃⲆΔ === 0) {
                    a.ⵠⲆΔᐃⲆ = Math.max(0, a.ⵠⲆΔᐃⲆ - Af / 10);
                } else {
                    a.ⵠⲆΔᐃⲆ = Math.min(1, a.ⵠⲆΔᐃⲆ + Af / 10);
                }
                for (var b = a.ΔᐃᐃΔⵠ, c = 0; c < b.length; c++) {
                    var d = b[c];
                    a.ⲆᐃΔ(d);
                    Cv(470, d.id, Yw.ᐃⵠⵠ.x + d.x, Yw.ᐃⵠⵠ.y + d.y, d.alpha);
                }
                for (c = 0; c < b.length; c++) {
                    if ((d = b[c]).ⲆⵠΔΔⲆ <= 0 || d.x > -Yw.ᐃⵠⵠ.x + Rn || d.x < -Yw.ᐃⵠⵠ.x || d.y > -Yw.ᐃⵠⵠ.y + iq) {
                        b.splice(c, 1);
                    }
                }
                var e = -Yw.ᐃⵠⵠ.y;
                if (Cf.ⲆᐃᐃΔⲆ > -1000) {
                    a.add(e);
                }
            })();
            (function () {
                var a = Yw.ΔᐃᐃΔⵠᐃⲆ;
                for (var b = a.ΔᐃᐃΔⵠ, c = 0; c < b.length; c++) {
                    var d = b[c];
                    a.ⲆᐃΔ(d);
                    Cv(942, d.id, Yw.ᐃⵠⵠ.x + d.x, Yw.ᐃⵠⵠ.y + d.y, d.alpha);
                }
                for (c = 0; c < b.length; c++) {
                    if ((d = b[c]).ⲆⵠΔΔⲆ <= 0 || d.x > -Yw.ᐃⵠⵠ.x + Rn || d.x < -Yw.ᐃⵠⵠ.x || d.y > -Yw.ᐃⵠⵠ.y + iq) {
                        b.splice(c, 1);
                    }
                }
                var e = -Yw.ᐃⵠⵠ.y;
                if (Cf.ΔⵠΔⲆᐃ > -1000) {
                    a.add(e);
                }
            })();
        }
        if (Cf.transition && a) {
            Cf.transition = false;
            Cf.ᐃᐃⲆⲆ.ΔⲆⲆ = 0;
            Cf.ᐃᐃⲆⲆ.ⵠⲆᐃ = ug;
        }
    }
    function Jv(a, b) {
        if (Cf.transition) {
            In.globalAlpha = 1;
            a.ⵠᐃⵠᐃΔ(b);
            Cf.time = Cf.time ? 0 : 1;
            In.globalAlpha = 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
            a.ⵠᐃⵠᐃΔ(b);
            Cf.time = Cf.time ? 0 : 1;
            In.globalAlpha = 1;
        } else {
            a.ⵠᐃⵠᐃΔ(b);
        }
    }
    function Kv(b, c, d, e, f, g, a) {
        var i;
        var j = "#";
        j += (i = Math.floor(e * a + (1 - a) * b)) < 16 ? "0" + i.toString(16) : i.toString(16);
        j += (i = Math.floor(a * f + c * (1 - a))) < 16 ? "0" + i.toString(16) : i.toString(16);
        return j += (i = Math.floor(g * a + d * (1 - a))) < 16 ? "0" + i.toString(16) : i.toString(16);
    }
    function Lv(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = Yw.ᐃⵠⵠ.y + j - 700;
        var l = Math.max(Yw.ᐃⵠⵠ.x + e, 0);
        var g = Math.max(-Yw.ᐃⵠⵠ.x + Rn - i - 100, 0);
        var t = l;
        var b = Rn - l - g;
        if (o) {
            var d = q.ⲆⲆᐃ(a);
        } else {
            d = a.r;
        }
        var u = h + qw.ᐃΔΔⲆⵠ;
        var F = t;
        var c = u;
        var p = d.x + qw.ⵠᐃⵠⲆⲆ;
        var C = b;
        var G = u += d.x + qw.ⵠᐃⵠⲆⲆ - 2;
        if (o) {
            d = q.ⲆⲆᐃ(r);
        } else {
            d = r.r;
        }
        var f = h + qw.ⲆΔᐃⵠᐃ - u + d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var A = (u += f - 2) - 2;
        if (o) {
            d = q.ⲆⲆᐃ(s);
        } else {
            d = s.r;
        }
        if (u + (f = h + qw.ⲆᐃᐃⵠΔ - u + d.x) - 3 > A) {
            var k = true;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var D = u += f - 2;
        } else {
            k = false;
            u = A;
            D = -1;
        }
        f = h + qw.ⲆᐃΔᐃᐃΔⲆ - u;
        if (Cf.transition) {
            var N = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
            In.fillStyle = Kv(9, 55, 63, 11, 106, 132, N);
        } else {
            In.fillStyle = nr.ⵠΔᐃᐃⲆ[Cf.time];
        }
        In.fillRect(F, c, C, p);
        if (o) {
            if (Cf.transition) {
                N = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
                In.fillStyle = Kv(15, 70, 76, 42, 139, 155, N);
            } else {
                In.fillStyle = nr.ⲆᐃⵠⵠΔⵠⵠ[Cf.time];
            }
        } else if (Cf.transition) {
            N = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
            In.fillStyle = Kv(9, 55, 63, 11, 106, 132, N);
        } else {
            In.fillStyle = nr.ⵠΔᐃᐃⲆ[Cf.time];
        }
        In.fillRect(y, H, K, w);
        if (k) {
            if (o) {
                if (Cf.transition) {
                    N = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
                    In.fillStyle = Kv(17, 94, 96, 169, 214, 211, N);
                } else {
                    In.fillStyle = nr.ⵠⵠⵠᐃΔⲆᐃ[Cf.time];
                }
            } else if (Cf.transition) {
                N = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
                In.fillStyle = Kv(9, 55, 63, 11, 106, 132, N);
            } else {
                In.fillStyle = nr.ⵠΔᐃᐃⲆ[Cf.time];
            }
            In.fillRect(J, L, B, M);
        }
        if (mf.ⵠᐃΔⵠⲆ && o) {
            q.ᐃᐃᐃⲆᐃⲆⵠΔΔ(A, D, G, h, -Yw.ᐃⵠⵠ.x + F, -Yw.ᐃⵠⵠ.x + F + C);
        }
    }
    function Mv(a, b, c) {
        if (Cf.transition) {
            In.globalAlpha = 1;
            a.ⵠⵠΔΔ(b, c);
            Cf.time = Cf.time ? 0 : 1;
            In.globalAlpha = 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
            a.ⵠⵠΔΔ(b, c);
            Cf.time = Cf.time ? 0 : 1;
            In.globalAlpha = 1;
        } else {
            a.ⵠⵠΔΔ(b, c);
        }
    }
    function Nv(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = Yw.ᐃⵠⵠ.x + j - 700;
        var l = Math.max(Yw.ᐃⵠⵠ.y + e, 0);
        var g = Math.max(-Yw.ᐃⵠⵠ.y + iq - i - 100, 0);
        var t = l;
        var b = iq - l - g;
        if (o) {
            var d = q.ⲆⲆᐃ(a);
        } else {
            d = a.r;
        }
        var u = h + qw.ᐃΔΔⲆⵠ;
        var z = u;
        var c = t;
        var p = d.x + qw.ⵠᐃⵠⲆⲆ;
        var C = b;
        var F = u += d.x + qw.ⵠᐃⵠⲆⲆ - 2;
        if (o) {
            d = q.ⲆⲆᐃ(r);
        } else {
            d = r.r;
        }
        var G = h + qw.ⲆΔᐃⵠᐃ - u + d.x;
        var H = u;
        var w = t;
        var K = G;
        var A = b;
        var k = (u += G - 2) - 2;
        if (o) {
            d = q.ⲆⲆᐃ(s);
        } else {
            d = s.r;
        }
        if (k < u + (G = h + qw.ⲆᐃᐃⵠΔ - u + d.x) - 3) {
            var x = f;
            var L = u;
            var M = t;
            var B = G;
            var D = b;
            var E = u += G - 2;
        } else {
            x = false;
            u = k;
            E = -1;
        }
        G = h + qw.ⲆᐃΔᐃᐃΔⲆ - u;
        if (Cf.transition) {
            var N = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
            In.fillStyle = Kv(9, 55, 63, 11, 106, 132, N);
        } else {
            In.fillStyle = nr.ⵠΔᐃᐃⲆ[Cf.time];
        }
        In.fillRect(z, c, p, C);
        if (o) {
            if (Cf.transition) {
                N = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
                In.fillStyle = Kv(15, 70, 76, 42, 139, 155, N);
            } else {
                In.fillStyle = nr.ⲆᐃⵠⵠΔⵠⵠ[Cf.time];
            }
        } else if (Cf.transition) {
            N = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
            In.fillStyle = Kv(9, 55, 63, 11, 106, 132, N);
        } else {
            In.fillStyle = nr.ⵠΔᐃᐃⲆ[Cf.time];
        }
        In.fillRect(H, w, K, A);
        if (x) {
            if (o) {
                if (Cf.transition) {
                    N = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
                    In.fillStyle = Kv(17, 94, 96, 169, 214, 211, N);
                } else {
                    In.fillStyle = nr.ⵠⵠⵠᐃΔⲆᐃ[Cf.time];
                }
            } else if (Cf.transition) {
                N = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
                In.fillStyle = Kv(9, 55, 63, 11, 106, 132, N);
            } else {
                In.fillStyle = nr.ⵠΔᐃᐃⲆ[Cf.time];
            }
            In.fillRect(L, M, B, D);
        }
        if (mf.ⵠᐃΔⵠⲆ && o) {
            q.ⲆᐃᐃⵠΔⵠᐃⲆΔ(k, E, F, h, -Yw.ᐃⵠⵠ.y + c, -Yw.ᐃⵠⵠ.y + c + C);
        }
    }
    function Ov(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = Yw.ᐃⵠⵠ.y + f - 700;
        var l = Math.max(Yw.ᐃⵠⵠ.x + e, 0);
        var g = Math.max(-Yw.ᐃⵠⵠ.x + Rn - i - 100, 0);
        var r = l;
        var b = Rn - l - g;
        if (n) {
            var d = j.ⲆⲆᐃ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + qw.ᐃΔΔⲆⵠ;
        qw.ⵠᐃⵠⲆⲆ;
        s += d + qw.ⵠᐃⵠⲆⲆ - 2;
        if (n) {
            d = j.ⲆⲆᐃ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h + qw.ⲆΔᐃⵠᐃ - s + d;
        var u = (s += t - 2) - 2;
        if (n) {
            d = j.ⲆⲆᐃ(q).x;
        } else {
            d = q.r.x;
        }
        if (u < s + (t = h + qw.ⲆᐃᐃⵠΔ - s + d) - 3) {
            s += t - 2;
        } else {
            s = u;
        }
        t = h + qw.ⲆᐃΔᐃᐃΔⲆ - s;
        if (n > 0 && k.ᐃΔⵠⲆⵠⲆⲆ === 1) {
            if (Cf.transition) {
                var p = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
                In.fillStyle = Kv(15, 77, 72, 252, 239, 187, p);
            } else {
                In.fillStyle = nr.ⲆⵠΔᐃΔΔⲆ[Cf.time];
            }
            In.fillRect(r, s, b, t);
        } else {
            if (Cf.transition) {
                p = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
                In.fillStyle = Kv(k.ΔⲆᐃ[0], k.ΔⲆᐃ[1], k.ΔⲆᐃ[2], k.Ⲇⵠᐃ[0], k.Ⲇⵠᐃ[1], k.Ⲇⵠᐃ[2], p);
            } else {
                In.fillStyle = k.ᐃᐃᐃⲆΔ[Cf.time];
            }
            In.fillRect(r, s, b, t);
        }
    }
    function Pv(a, b, c, d) {
        if (Cf.transition) {
            In.globalAlpha = 1;
            Mc(In, ᐃΔ[a][Cf.time], c, d);
            Cf.time = Cf.time ? 0 : 1;
            In.globalAlpha = 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
            Mc(In, ᐃΔ[a][Cf.time], c, d);
            Cf.time = Cf.time ? 0 : 1;
            In.globalAlpha = 1;
        } else {
            Mc(In, b, c, d);
        }
    }
    function Qv(a, b, c, d) {
        Yj(Tu, a, b, c, d);
        const e = ((143 + (Cc[0] ^ 35088 ^ Cc[2])) * 75 + 74) % 65537;
        return (24 << ((e ^ Cc[3]) & 255)) + (8 << ((e ^ Cc[3]) >> 24 & 255)) + (16 << ((e ^ Cc[3]) >> 8 & 255)) + (0 << ((e ^ Cc[3]) >> 16 & 255));
    }
    function Rv(a) {
        In.save();
        In.translate(Yw.ᐃⵠⵠ.x + a.x, Yw.ᐃⵠⵠ.y + a.y);
        In.rotate(a.angle);
        In.globalAlpha = a.alpha;
        var b = ᐃΔ[a.id][Cf.time];
        Mc(In, b, -b.width / 2, -b.height / 2);
        In.globalAlpha = 1;
        In.restore();
    }
    function Sv(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = Yw.ᐃⵠⵠ.x + f - 700;
        var l = Math.max(Yw.ᐃⵠⵠ.y + e, 0);
        var g = Math.max(-Yw.ᐃⵠⵠ.y + iq - i - 100, 0);
        var r = l;
        var b = iq - l - g;
        if (n) {
            var d = j.ⲆⲆᐃ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + qw.ᐃΔΔⲆⵠ;
        qw.ⵠᐃⵠⲆⲆ;
        s += d + qw.ⵠᐃⵠⲆⲆ - 2;
        if (n) {
            d = j.ⲆⲆᐃ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h + qw.ⲆΔᐃⵠᐃ - s + d;
        var u = (s += t - 2) - 2;
        if (n) {
            d = j.ⲆⲆᐃ(q).x;
        } else {
            d = q.r.x;
        }
        if (u < s + (t = h + qw.ⲆᐃᐃⵠΔ - s + d) - 3) {
            s += t - 2;
        } else {
            s = u;
        }
        t = h + qw.ⲆᐃΔᐃᐃΔⲆ - s;
        if (n > 0 && k.ᐃΔⵠⲆⵠⲆⲆ === 1) {
            if (Cf.transition) {
                var p = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
                In.fillStyle = Kv(15, 77, 72, 252, 239, 187, p);
            } else {
                In.fillStyle = nr.ⲆⵠΔᐃΔΔⲆ[Cf.time];
            }
            In.fillRect(s, r, t, b);
        } else {
            if (Cf.transition) {
                p = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
                In.fillStyle = Kv(k.ΔⲆᐃ[0], k.ΔⲆᐃ[1], k.ΔⲆᐃ[2], k.Ⲇⵠᐃ[0], k.Ⲇⵠᐃ[1], k.Ⲇⵠᐃ[2], p);
            } else {
                In.fillStyle = k.ᐃᐃᐃⲆΔ[Cf.time];
            }
            In.fillRect(s, r, t, b);
        }
    }
    var Tv = 0;
    var Uv = 1;
    var Vv = 2;
    var Wv = 0;
    var Xv = 1;
    var Yv = 2;
    function Zv(f, j, i, k, n, q, a, t, v, w, l, g, u, b, x) {
        if (f.length === 0) {
            f = " ";
        }
        if (a === undefined) {
            a = 0;
        }
        if (t === tj) {
            t = 0;
        }
        if (v === Og) {
            v = 0;
        }
        if (b === undefined) {
            b = 0;
        }
        var m = document.createElement("canvas");
        var c = m.getContext("2d");
        c.textBaseline = "middle";
        c.font = (x !== undefined ? x + " " : "") + k + "px " + j;
        n = n !== undefined ? Math.min(c.measureText(f).width, n) : c.measureText(f).width;
        m.width = n + a;
        m.height = k + t;
        if (qn !== q) {
            if (vj !== l) {
                c.globalAlpha = l;
            }
            c.fillStyle = q;
            if (g !== Og) {
                ⲆⲆΔⲆᐃⲆⲆⲆΔ(c, v + 2, v, n + a - v * 2 - 4, k + t - v * 2, g);
                c.fill();
            } else {
                c.fillRect(v, v, n + a - v * 2, k + t - v * 2);
            }
            c.globalAlpha = 1;
            if (v !== 0) {
                c.lineWidth = v;
                c.strokeStyle = w;
                c.stroke();
            }
        }
        c.textBaseline = "middle";
        c.font = (x !== Zk ? x + " " : "") + k + "px " + j;
        if (u !== undefined) {
            c.strokeStyle = u;
            c.lineWidth = b;
            c.lineJoin = "miter";
            c.miterLimit = 2;
            c.strokeText(f, Math.floor(a / 2), Math.floor(t / 2) + Math.floor(k / 2), n);
        }
        c.fillStyle = i;
        c.fillText(f, Math.floor(a / 2), Math.floor(t / 2) + Math.floor(k / 2), n);
        m.w2 = m.width / 2;
        m.ⵠⵠⵠᐃⲆ = m.height / 2;
        return m;
    }
    function $v(c, e, f, i, j, k, n, p, q, r, t) {
        if (q === vj) {
            q = 0;
        }
        if (p === Jl) {
            p = 0;
        }
        if (r === undefined) {
            r = 0;
        }
        if (t === undefined) {
            t = 1;
        }
        if (k !== 1) {
            k = 0;
        }
        if (i) {
            var w = i;
        }
        var u;
        var x = {
            width: c,
            height: e,
            ᐃⵠ: w,
            state: Wv,
            translate: {
                x: p,
                y: q,
                ᐃᐃⲆΔᐃ: p,
                ⵠⲆΔΔⵠ: q
            },
            ⵠΔΔᐃᐃΔᐃᐃΔ: k,
            ⲆᐃᐃΔ: 0,
            callback: n,
            position: r,
            active: t
        };
        function d() {
            return x.ᐃⵠ[x.state];
        }
        function v(a) {
            var b = x.translate;
            if (x.width === 0 || x.height === 0) {
                x.width = x.ᐃⵠ[0].width;
                x.height = x.ᐃⵠ[0].height;
            }
            return a.x > b.x && a.x < b.x + x.width / j && a.y > b.y && a.y < b.y + x.height / j;
        }
        k = function () {
            var a = 0;
            if (x.ⵠΔΔᐃᐃΔᐃᐃΔ === 1) {
                if (Xv === x.state || x.state === Yv) {
                    x.ⲆᐃᐃΔ = (x.ⲆᐃᐃΔ + Af * 1000) % 1000;
                } else if (x.ⲆᐃᐃΔ > 0) {
                    x.ⲆᐃᐃΔ = x.ⲆᐃᐃΔ > 500 ? x.ⲆᐃᐃΔ + Af * 1000 : x.ⲆᐃᐃΔ - Af * 1000;
                    if (x.ⲆᐃᐃΔ < 0 || x.ⲆᐃᐃΔ > 1000) {
                        x.ⲆᐃᐃΔ = 0;
                    }
                }
                a = ΔⲆⲆⵠ.ΔᐃⲆΔⵠ(x.ⲆᐃᐃΔ > 500 ? (1000 - x.ⲆᐃᐃΔ) / 500 : x.ⲆᐃᐃΔ / 500) * 0.2;
            }
            return a;
        };
        if ((j = j === 3 ? 3 : j === 1 ? 2 : 1) === 2) {
            u = function (a) {
                var b = 1 + k();
                var c = d();
                var e = b * x.width / 2;
                var f = b * x.height / 2;
                var g = (e - x.width / 2) / 2;
                var h = (f - x.height / 2) / 2;
                Mc(a, c, x.translate.x - g, x.translate.y - h, e, f);
            };
        } else if (j === 3) {
            u = function (b) {
                var c = d();
                var e = x.width;
                var f = x.height;
                var g = (e - x.width) / 2;
                var h = (f - x.height) / 2;
                Mc(b, c, x.translate.x - g, x.translate.y - h, e, f);
            };
            j = 1;
        } else {
            u = function (a) {
                Mc(a, d(), x.translate.x, x.translate.y);
            };
        }
        return {
            info: x,
            ⲆΔᐃⵠ: function (a, b, c) {
                if (v(b)) {
                    if (c == Uv) {
                        x.state = Yv;
                    } else if (Vv == c || Tv == c && Yv != x.state) {
                        x.state = Xv;
                    }
                    return R;
                } else {
                    x.state = Wv;
                    return false;
                }
            },
            ⵠⵠΔΔ: u,
            ⵠᐃΔⵠᐃⲆⵠ: v
        };
    }
    function _v(b, c, d, e, f) {
        var g = {
            x: d,
            y: e,
            ᐃᐃⲆΔᐃ: d,
            ⵠⲆΔΔⵠ: e
        };
        return {
            translate: g,
            ⵠⵠΔΔ: function (a) {
                Mc(a, b, g.x, g.y, b.width / 2, b.height / 2);
            },
            active: c,
            position: f
        };
    }
    function aw(a, b) {
        var c = a.getBoundingClientRect();
        return {
            x: b.clientX - c.left,
            y: b.clientY - c.top
        };
    }
    function bw(b, c, d, e) {
        const f = (b | 12750) & ~(b & 12750);
        const g = c ^ 2927;
        const a = (2531011 + (4194 + d) * 214013) % 4294967296;
        const i = e ^ 48458;
        const j = Ev(f, g, a, i, f, g);
        pw(a, i, f, g);
        return ~(j & 60245) & (j | 60245);
    }
    var cw = "send";
    var dw = ΔⲆⲆⵠ.ⲆΔⲆᐃᐃΔᐃ("id") === "1" ? 1 : 0;
    var ew = ΔⲆⲆⵠ.ⲆΔⲆᐃᐃΔᐃ("password");
    var fw = ΔⲆⲆⵠ.ⲆΔⲆᐃᐃΔᐃ("debug") || undefined;
    if (fw !== undefined) {
        fw = JSON.parse(bj.decodeURIComponent(fw));
    }
    var gw = ΔⲆⲆⵠ.ⲆΔⲆᐃᐃΔᐃ("server") || qn;
    var hw = ΔⲆⲆⵠ.ⲆΔⲆᐃᐃΔᐃ("region") || undefined;
    var iw = "starve.io";
    var jw = "https://" + iw;
    var kw = {
        ΔᐃⲆⲆⲆΔΔ: 128,
        ΔΔⲆΔᐃⲆⲆ: 8,
        ⵠⲆΔⵠ: 2,
        ΔⵠⲆᐃΔⵠⵠ: 16,
        ⵠⵠⵠΔᐃΔⲆ: 256,
        ⲆΔΔⵠΔ: 4,
        ΔⲆΔⵠᐃᐃΔ: 32,
        ⲆΔⲆᐃΔⵠⲆᐃΔ: 1,
        IDLE: 64
    };
    var lw = [{
        ᐃΔⵠᐃΔ: 1000,
        items: [[2, 113], [1, 117], [8, 110], [1, 143]]
    }, {
        ᐃΔⵠᐃΔ: 2000,
        items: [[2, 118], [1, 8], [2, 117], [16, 110], [2, 143]]
    }, {
        ᐃΔⵠᐃΔ: 4000,
        items: [[3, 118], [1, 1], [4, 117], [20, 110], [4, 143], [1, 114], [80, 108], [140, 109]]
    }, {
        ᐃΔⵠᐃΔ: 8000,
        items: [[1, 29], [4, 118], [1, 3], [6, 117], [30, 110], [6, 143], [1, 114], [150, 108], [200, 109], [60, 111], [2, 127]]
    }, {
        ᐃΔⵠᐃΔ: 16000,
        items: [[1, 29], [1, 4], [1, 198], [7, 136], [2, 127], [2, 118], [1, 119], [15, 163], [2, 171], [1, 159], [1, 55], [200, 108], [300, 109]]
    }, {
        ᐃΔⵠᐃΔ: 16000,
        items: [[1, 29], [1, 11], [1, 50], [1, 3], [10, 136], [4, 127], [6, 118], [3, 195], [1, 28], [200, 108], [300, 109]]
    }, {
        ᐃΔⵠᐃΔ: 16000,
        items: [[1, 29], [1, 83], [1, 36], [3, 195], [1, 0], [1, 3], [7, 136], [2, 127], [4, 118], [150, 108], [200, 109], [1, 158]]
    }, {
        ᐃΔⵠᐃΔ: 16000,
        items: [[1, 29], [1, 84], [1, 3], [7, 136], [2, 127], [4, 118], [2, 135], [4, 144], [10, 141], [6, 132], [4, 115], [1, 49], [500, 109]]
    }, {
        ᐃΔⵠᐃΔ: 16000,
        items: [[1, 29], [1, 3], [16, 138], [1, 127], [6, 118], [3, 195], [1, 48], [1, 0], [16, 125], [150, 108], [200, 109]]
    }, {
        ᐃΔⵠᐃΔ: 20000,
        items: [[1, 29], [1, 3], [1, 136], [1, 127], [3, 118], [3, 195], [1, 26], [1, 5], [1, 15], [2, 169], [50, 108], [100, 109]]
    }];
    const mw = [];
    let nw = 0;
    var ow = {
        ⲆⵠᐃⵠⲆΔΔⲆⲆ: 60000,
        ΔⵠⲆᐃΔⵠⵠ: 0.2,
        ⵠⲆⵠⵠᐃⲆⲆ: 2,
        Ⲇᐃⵠⵠⵠⵠⵠᐃᐃ: 14,
        ⵠΔᐃΔᐃⵠΔᐃⲆ: 14,
        ⵠᐃⵠᐃⲆᐃⲆᐃⵠ: 5,
        ⲆᐃᐃΔΔᐃᐃ: 52,
        ᐃΔⲆⵠᐃᐃᐃⵠⵠ: 200,
        ᐃⲆⵠΔΔⲆΔΔᐃ: "[34]",
        ⵠᐃⲆⲆᐃΔᐃ: 1,
        ⵠⲆΔᐃᐃᐃⵠⲆⵠ: 33,
        ⵠᐃΔΔⵠᐃΔⲆⵠ: 125000,
        ΔⵠΔᐃⲆᐃⲆⵠᐃ: 0.58,
        ⵠΔⵠⵠᐃⵠΔ: 0,
        ΔⲆⲆᐃᐃⲆⵠ: 600000,
        ⵠⲆΔⲆᐃⲆⲆ: 4,
        ᐃᐃΔⲆᐃΔⲆᐃᐃ: 20,
        ΔᐃᐃⵠⲆᐃΔ: 4,
        ⲆΔΔⵠᐃⵠΔⲆⵠ: 2000,
        ⲆⲆᐃΔⲆΔⲆ: 3,
        ⵠⲆⵠᐃⵠⵠⲆⲆⲆ: 3,
        ⵠΔⲆⵠⲆⲆᐃ: 0.2,
        ⵠⲆᐃⵠⲆⲆᐃΔⲆ: 8000,
        ⲆⲆᐃⲆᐃΔⵠΔᐃ: 50,
        ΔᐃᐃᐃⵠΔΔᐃΔ: 5
    };
    function pw(b, c, d, e) {
        const f = ~(b & 6949) & b | ~(b & 6949) & 6949;
        const g = ~(c & 1348) & 1348 | ~(c & 1348) & c;
        const a = ~(d & 53330) & 53330 | ~(d & 53330) & d;
        const i = (16 << (e >> 24 & 255)) + (24 << (e >> 16 & 255)) + (0 << (e & 255)) + (8 << (e >> 8 & 255));
        const j = Fm(f, g, a, i);
        Kg(f, g, a, i, f);
        return ~(j & 8357) & (j | 8357);
    }
    var qw = {
        ⵠᐃⵠ: 480000,
        ⲆⵠⲆᐃΔᐃᐃ: 10,
        ΔΔⲆⵠⲆᐃΔ: 16,
        ⲆᐃΔᐃᐃᐃᐃᐃᐃ: 6,
        ⲆᐃΔΔᐃΔⲆ: 60,
        ΔⵠΔⲆⲆ: 1,
        ⲆⵠΔⲆᐃ: 2,
        ⵠΔΔᐃΔ: 4,
        ΔᐃⵠⲆᐃ: 8,
        ⵠΔⲆⵠⲆⲆᐃ: 10,
        ⲆΔᐃⵠⵠⵠⵠ: 100,
        ΔⲆᐃᐃΔⵠⲆ: 100,
        ᐃΔⲆΔΔᐃᐃ: 100,
        ⲆⲆᐃᐃⵠΔΔᐃᐃ: 100,
        ΔᐃⵠΔᐃⵠΔ: 100,
        ⵠⲆⲆⵠΔΔⲆ: 100,
        ⵠⲆⵠⵠⲆᐃΔΔΔ: 100,
        ⵠⲆⲆⵠΔΔⲆ: 100,
        ⲆΔᐃᐃΔΔᐃ: 100,
        ⲆⵠⲆᐃⵠΔᐃ: 100,
        ⲆⵠΔⲆⵠ: 0,
        ⲆΔⲆΔⲆΔΔ: 1,
        ΔⲆᐃⵠⵠ: 2,
        ⵠΔᐃΔⵠ: 3,
        ⵠΔⵠⲆᐃ: 4,
        ⵠᐃΔⵠΔᐃΔ: 5,
        ⵠᐃΔΔᐃ: 6,
        ⵠᐃΔΔΔ: 7,
        ⲆⲆⵠΔⲆΔⵠΔⲆ: {
            sydney: "Sydney",
            osaka: "Osaka",
            atlanta: "Atlanta",
            frankfurt: "Frankfurt",
            losangeles: "Los Angeles"
        },
        ⲆΔᐃⲆⵠⵠⲆ: {
            0: "normal",
            2: "zombies",
            3: "vampires",
            4: "forest",
            6: "community",
            7: "experimental"
        },
        ⲆⵠΔΔΔᐃΔ: 0,
        ΔᐃᐃⵠᐃᐃΔ: 0,
        ⵠΔⵠΔⲆΔΔ: 30,
        ΔᐃⲆⲆΔΔⲆΔᐃ: 2,
        ⲆᐃΔΔᐃΔⲆ: 60000,
        ⲆᐃᐃⵠᐃⵠⵠΔⵠ: 0,
        ⲆⲆⵠⲆᐃⲆⲆⲆᐃ: 0,
        ᐃⵠΔⲆΔΔⲆᐃⲆ: 50,
        ⲆΔⵠⵠᐃΔⲆΔᐃ: 0,
        ᐃΔΔⵠⲆᐃΔᐃⲆ: 40,
        ⵠᐃΔΔᐃᐃⲆⲆᐃ: 39,
        ᐃᐃⵠΔᐃᐃⲆᐃⵠ: 830,
        ᐃΔⲆⵠⵠᐃⲆ: 25,
        ΔΔⲆᐃⵠⲆⵠ: 8,
        ⵠᐃⵠⲆⲆ: 0,
        ᐃΔΔⲆⵠ: 0,
        ⲆⲆᐃⲆᐃⵠΔ: 200,
        ⲆΔⲆⲆᐃⵠⲆ: 0,
        ⲆΔᐃⵠᐃ: 250,
        ΔᐃᐃⲆⲆᐃΔ: 150,
        ⲆΔⲆⲆΔΔΔ: 0,
        ⲆᐃᐃⵠΔ: 350,
        ΔⲆΔᐃΔⲆᐃ: 100,
        ⲆᐃΔᐃᐃΔⲆ: 700,
        ⵠⲆΔⵠΔ: 39879
    };
    var rw = [];
    for ($g = 0; $g < 500; $g++) {
        rw[$g] = 0;
    }
    rw[47] = 1;
    rw[57] = 1;
    rw[0] = 1;
    rw[5] = 1;
    rw[6] = 1;
    rw[30] = 1;
    rw[19] = 1;
    rw[9] = 1;
    rw[62] = 1;
    rw[63] = 1;
    rw[13] = 1;
    rw[14] = 1;
    rw[15] = 1;
    rw[33] = 1;
    rw[34] = 1;
    rw[16] = 1;
    rw[17] = 1;
    rw[12] = 1;
    rw[18] = 1;
    var sw = [{
        time: 2880000
    }, {
        time: 1440000
    }, {
        time: 1920000
    }, {
        time: 1440000
    }, {
        time: 2880000
    }, {
        time: 2400000
    }, {
        time: 2400000
    }, {
        time: 4800000
    }, {
        time: 2880000
    }, {
        time: 3360000
    }, {
        time: 2880000
    }, {
        time: 3840000
    }, {
        time: 3360000
    }];
    var tw = {
        ΔᐃⲆⲆᐃⲆⵠ: 89,
        ᐃⲆⵠⲆΔ: 78,
        ΔΔⵠᐃᐃ: 87,
        ᐃᐃⵠΔᐃ: 80,
        ΔⵠⵠΔⵠ: 39,
        Δᐃᐃⵠᐃ: 38,
        ᐃᐃᐃⲆⵠ: 6,
        ⲆⵠᐃᐃⲆ: 12,
        ⵠΔΔΔᐃ: 62,
        ⲆΔᐃΔⲆ: 2,
        ⵠᐃΔⲆⲆ: 43,
        ⲆᐃΔⲆⵠ: 33,
        ᐃⲆⲆᐃⲆ: 21,
        ⵠⲆΔⵠΔ: 3,
        ᐃΔⵠΔⵠ: 71,
        ᐃⲆᐃΔⵠ: 60,
        ᐃⲆⲆⲆΔ: 8,
        ⵠΔⵠΔⲆ: 75,
        ⵠΔⲆΔΔ: 27,
        ΔᐃⵠⵠⲆ: 19,
        ⵠᐃΔⲆΔⲆⲆ: 85,
        ⵠΔⵠΔΔ: 36,
        ᐃΔᐃⲆⲆ: 53,
        ⵠⵠΔᐃⲆ: 45,
        Δᐃⵠⵠⵠ: 20,
        ⲆⵠⲆᐃⵠ: 46,
        ⵠᐃᐃΔᐃⲆΔ: 84,
        ΔᐃΔⲆᐃ: 50,
        ΔΔᐃⲆΔ: 79,
        ΔΔⵠⲆᐃ: 47,
        ⵠᐃΔⲆΔ: 66,
        ᐃⲆⵠⵠΔ: 30,
        ⵠⵠᐃΔⲆ: 81,
        ΔᐃΔᐃⵠ: 42,
        ΔΔᐃΔᐃⵠΔ: 83,
        ΔⵠⲆⵠⲆ: 65,
        ⵠⲆᐃⲆⲆ: 51,
        ⵠⲆⲆⵠᐃ: 37,
        ᐃΔⲆΔΔ: 69,
        ᐃᐃΔΔΔ: 55,
        ⵠⲆᐃᐃᐃ: 54,
        ᐃⵠΔᐃⵠ: 4,
        ⵠᐃᐃⵠΔ: 0,
        ⲆⲆΔΔᐃ: 24,
        ΔⲆΔΔⲆ: 48,
        ⵠΔΔⵠΔᐃⵠ: 76,
        ΔⲆⵠΔᐃ: 90,
        ⲆⲆᐃᐃⲆ: 10,
        ⲆΔⲆΔⲆ: 5,
        Ⲇⵠᐃᐃⵠ: 52,
        ⲆⲆⲆⲆⲆ: 28,
        ᐃⲆᐃⵠⵠ: 100,
        ΔΔⲆⵠⵠ: 73,
        ΔⲆᐃᐃΔ: 64,
        ᐃΔᐃΔᐃ: 44,
        ⲆΔⵠᐃᐃ: 22,
        ΔⲆⲆΔᐃ: 72,
        Δⵠᐃⵠᐃ: 77,
        ᐃᐃⵠΔⲆ: 26,
        ΔᐃⲆⲆΔ: 86,
        ᐃᐃⵠⵠᐃ: 16,
        ΔⵠⵠᐃΔ: 13,
        ᐃⵠⲆⲆΔ: 61,
        ⵠⵠᐃⲆⵠ: 31,
        ⲆᐃᐃΔΔ: 63,
        ⲆⲆⵠᐃⲆ: 68,
        ᐃΔⲆⵠⵠ: 15,
        ΔΔⵠᐃΔ: 70,
        ΔⲆⵠΔⲆ: 56,
        ⵠΔᐃΔΔ: 29,
        ΔⵠᐃⵠⲆ: 1,
        ᐃᐃΔᐃᐃ: 91,
        ⵠΔⵠᐃΔ: 35,
        ⵠⵠⲆⲆⲆ: 17,
        ⵠⵠⲆΔΔ: 40,
        ΔᐃⵠΔᐃ: 67,
        ΔⲆⵠⲆΔ: 25,
        ΔⲆΔΔⵠ: 11,
        ⵠⵠⲆⵠⲆ: 7,
        Ⲇⵠⵠⵠⵠ: 18,
        ᐃⵠᐃᐃᐃ: 49,
        ΔΔⲆⲆᐃ: 88,
        ᐃⵠⵠΔⵠ: 23,
        ΔⵠΔΔⲆ: 41,
        ⲆΔⲆⵠⲆ: 9,
        ⵠⲆⵠΔΔ: 32,
        ⲆⵠᐃᐃΔⲆᐃ: 82,
        ᐃΔᐃᐃᐃ: 14,
        ΔⵠⲆⲆⲆ: 34,
        ⵠΔⵠΔⵠ: 74
    };
    var uw = [[tw.ⲆⲆΔΔᐃ, 108], [tw.ΔⲆⵠⲆΔ, 111], [tw.ᐃᐃⵠΔⲆ, 112], [tw.ⵠΔⲆΔΔ, 121], [tw.ⲆⲆⲆⲆⲆ, 202]];
    function vw() {
        this.Δᐃⵠⵠᐃ = "";
        this.ᐃᐃᐃⵠ = 0;
        this.ΔᐃᐃⲆⲆ = 0;
        this.ⲆⲆᐃⵠⲆ = 0;
        this.ᐃΔΔᐃⵠⲆΔ = 0;
        this.ΔⵠΔΔⵠ = 0;
        this.ΔⵠᐃΔⵠ = 0;
        this.Ⲇᐃⵠᐃᐃ = 0;
        this.level = 0;
        this.label = null;
        this.ⵠⵠᐃᐃΔⲆⲆ = null;
        this.ⲆⲆⲆᐃΔⵠⵠ = null;
        this.ⵠⲆⵠᐃᐃ = Ah;
        this.ⵠⵠᐃΔⵠ = 0;
    }
    function ww(c, d, e, i, j, k, a, l, m, h) {
        this.type = c;
        this.ⲆⵠΔⵠ = d;
        this.id = e;
        this.x = i;
        this.y = j;
        this.angle = k;
        this.ⲆΔⲆΔⵠΔᐃ = k;
        this.action = a;
        this.info = l;
        this.ΔᐃΔᐃΔ = h;
        this.r = {
            x: i,
            y: j
        };
        this.ΔᐃΔⲆⲆ = m;
        if (Cf) {
            this.ⵠΔⲆΔ = d * Cf.ᐃᐃⵠⵠΔΔⵠ + e;
        }
        switch (c) {
            case tw.ⵠᐃᐃⵠΔ:
                this.ᐃⲆⲆΔ = Cf.ΔᐃᐃΔ[this.ⲆⵠΔⵠ];
                this.ᐃᐃᐃⵠ = this.ᐃⲆⲆΔ.ᐃᐃᐃⵠ;
                this.ᐃΔΔᐃⵠⲆΔ = this.ᐃⲆⲆΔ.ᐃΔΔᐃⵠⲆΔ;
                this.ΔⵠΔΔⵠ = this.ᐃⲆⲆΔ.ΔⵠΔΔⵠ;
                this.ΔᐃᐃⲆⲆ = this.ᐃⲆⲆΔ.ΔᐃᐃⲆⲆ;
                this.ⲆΔᐃⵠⵠΔᐃ = -1000000;
                this.ΔⵠΔⲆᐃ = -1000000;
                this.ⲆᐃᐃΔⲆ = -1000000;
                this.ⵠᐃⵠⲆᐃ = -1000000;
                this.ⲆΔᐃⲆⵠᐃⲆ = -1000000;
                this.ⲆΔⵠⵠⲆⲆⲆ = -1000000;
                this.ᐃΔⲆⵠΔ = -1000000;
                this.ᐃᐃⲆⵠᐃ = qw.ΔⲆᐃⵠⵠ === Cf.mode && this.ᐃᐃᐃⵠ === qw.ⲆⵠΔΔΔᐃΔ && f;
                this.ⲆⵠⵠΔⵠⵠᐃ = qw.ⵠΔᐃΔⵠ === Cf.mode && qw.ΔᐃᐃⵠᐃᐃΔ === this.ᐃᐃᐃⵠ;
                this.ΔⲆⵠᐃΔⵠⵠ = !!this.ᐃᐃⲆⵠᐃ && this.ᐃⲆⲆΔ.Δᐃⵠⵠᐃ === "  " || Ui;
                this.ᐃⲆΔΔᐃ = [];
                this.ΔΔΔⲆⲆⲆΔ = 0;
                this.ᐃΔᐃΔ = true;
                this.ⵠⲆᐃΔⲆΔᐃ = 0;
                this.ⲆΔΔΔⵠⵠⵠ = 0;
                this.ⲆΔⵠᐃΔ = [];
                this.r = {
                    x: i,
                    y: j
                };
                this.ⵠⵠΔΔ = iv;
                this.ⲆᐃΔᐃΔⲆᐃ = dv;
                this.ᐃᐃᐃΔⲆ = 0;
                this.ⲆⲆΔᐃΔ = 0;
                this.ΔΔⲆⵠΔ = 0;
                this.ΔΔⲆⵠⵠⵠⵠ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(lj, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ᐃᐃᐃⵠⵠ = 0;
                this.ⵠΔᐃᐃⲆΔᐃ = 0;
                this.ⵠⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.6, 0.6, 0, 5, 3);
                this.ⵠⵠⵠⲆᐃ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.6, 0.6, 0, 5, 3);
                this.freeze = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.6, 0.6, 0, 5, 3);
                this.ΔᐃⵠΔΔⲆⲆ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.6, 0.6, 0, 5, 3);
                this.ⲆΔⲆΔᐃⲆⲆ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(R, 0, 2.25, -1.5, 3.75, 7.5);
                this.ΔⲆᐃⵠΔᐃᐃ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(Ha, 0, 7.5, -3, 22.5, 33.75);
                this.attack = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0, 0, -Math.PI / 3, 6, 9);
                this.ᐃⵠΔⵠⵠⲆΔΔᐃ = 0;
                this.ΔΔⵠⵠᐃᐃᐃ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(Ah, 0.6, 0.6, 0, 1, 3);
                this.ⵠᐃⵠⲆⵠᐃΔ = this.ΔⲆⵠᐃΔⵠⵠ ? new ΔⲆⲆⵠ.ⵠΔᐃⵠ(true, 0, 2.25, -1.5, 2.75, 5.5) : 0;
                this.ᐃᐃᐃⲆΔⲆⲆ = 0;
                this.ⵠᐃΔⲆⲆΔⲆ = 0;
                this.ΔᐃⲆᐃⲆΔⲆ = [];
                this.ᐃⲆⲆᐃⲆⵠⵠ = [];
                this.text = [];
                this.label = [];
                this.ⵠΔΔᐃⵠⵠᐃ = jv;
                this.ᐃᐃⵠⲆⲆ = Fl;
                this.right = -1;
                this.ΔᐃⲆⲆᐃ = -1;
                this.action = kw.IDLE;
                this.ΔΔⵠⵠⵠⲆΔ = lj;
                this.ᐃΔΔᐃⲆ = 0;
                this.ⵠΔΔⵠΔ = rj;
                this.bubbles = [];
                this.ⲆⲆᐃⵠⲆ = 0;
                this.ⲆⵠⵠᐃΔ = -1;
                this.ⲆᐃΔ = function (a) {
                    if (this.info & 32768) {
                        this.ΔΔⵠⵠⵠⲆΔ = Lo;
                        this.info = this.info & -32769;
                    } else {
                        this.ΔΔⵠⵠⵠⲆΔ = Qr;
                    }
                    if (this.info & 16384) {
                        this.info = this.info & -16385;
                        this.ⲆⲆᐃⵠⲆ = 1;
                    } else {
                        this.ⲆⲆᐃⵠⲆ = 0;
                    }
                    this.ᐃΔΔᐃⲆ = Math.floor(this.info / 128);
                    this.info -= this.ᐃΔΔᐃⲆ * 128;
                    if (this.info === 7 || this.ΔⲆⵠᐃΔⵠⵠ) {
                        this.right = -1;
                    } else {
                        this.right = this.info;
                    }
                    this.ΔΔΔⲆⲆⲆΔ = Cf.ⲆⲆⲆᐃⵠΔᐃⲆⵠ(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100));
                    this.ΔᐃⲆⲆᐃ = this.ΔᐃΔᐃΔ & 255;
                    if (this.right === qw.ΔᐃⲆⲆΔΔⲆΔᐃ) {
                        this.ⵠΔΔⵠΔ = xh;
                    } else {
                        this.ⵠΔΔⵠΔ = false;
                    }
                    if (rw[this.right]) {
                        this.ᐃᐃᐃⲆᐃ = Go;
                    } else {
                        this.ᐃᐃᐃⲆᐃ = false;
                    }
                    if (a & kw.ⵠⵠⵠΔᐃΔⲆ) {
                        this.ΔΔⵠⵠᐃᐃᐃ.ⵠⲆᐃ = pn;
                        this.ΔΔⵠⵠᐃᐃᐃ.ΔⲆⲆ = 0.6;
                    } else if (a & kw.ⲆΔΔⵠΔ) {
                        this.freeze.ⵠⲆᐃ = ij;
                        this.freeze.ΔⲆⲆ = 0.6;
                    } else if (a & kw.ΔᐃⲆⲆⲆΔΔ) {
                        this.ⵠⵠⵠⲆᐃ.ⵠⲆᐃ = Na;
                        this.ⵠⵠⵠⲆᐃ.ΔⲆⲆ = 0.6;
                    }
                    if (a & kw.ΔΔⲆΔᐃⲆⲆ) {
                        this.ΔᐃⵠΔΔⲆⲆ.ⵠⲆᐃ = ug;
                        this.ΔᐃⵠΔΔⲆⲆ.ΔⲆⲆ = 0.6;
                    }
                    if (a & kw.ⵠⲆΔⵠ) {
                        this.ⵠⵠΔ.ⵠⲆᐃ = Ro;
                        this.ⵠⵠΔ.ΔⲆⲆ = 0.6;
                    }
                    if (a & kw.ΔⵠⲆᐃΔⵠⵠ) {
                        this.ᐃⵠΔⵠⵠⲆΔΔᐃ = ow.ΔⵠΔᐃⲆᐃⲆⵠᐃ;
                        if (_w.ᐃⲆⲆΔᐃ && this.ⲆⵠⵠᐃΔ !== -1) {
                            _w.ΔᐃᐃΔ[this.ⲆⵠⵠᐃΔ].ⲆⵠᐃΔΔΔⵠΔΔ(of[this.right]);
                        }
                    }
                };
                this.ⲆᐃΔ();
                break;
            case tw.ᐃⵠⵠΔⵠ:
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(Na, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: false,
                    angle: 0
                };
                this.ⵠᐃⵠᐃΔ = Rp;
                this.ⵠᐃⲆⵠⲆ = Up;
                this.ᐃΔΔⲆΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(gn, 1, 1.23, 1.18, 0.01, 0.01);
                this.ΔΔⲆⵠΔⵠⵠ = 0;
                this.ᐃΔᐃᐃΔⲆⵠ = 0;
                this.ΔᐃⲆⵠᐃ = Wc;
                break;
            case tw.ⲆΔⵠᐃᐃ:
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: ij,
                    angle: 0
                };
                this.ⵠᐃⵠᐃΔ = kp;
                this.ⵠᐃⲆⵠⲆ = Jp;
                this.ᐃΔΔⲆΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1.23, 1.18, 0.01, 0.01);
                this.ΔΔⲆⵠΔⵠⵠ = 0;
                this.ᐃΔᐃᐃΔⲆⵠ = 0;
                break;
            case tw.ΔⵠᐃⵠⲆ:
            case tw.ᐃᐃᐃⲆⵠ:
                this.ⵠᐃⵠᐃΔ = Vu;
                this.ⵠᐃⲆⵠⲆ = Fp;
                this.ⵠᐃⲆΔᐃ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1.03, 0.98, 0.3, 0.3);
                this.ⵠⲆⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(tr, 1, 1.23, 1.18, 0.01, 0.01);
                this.ᐃΔΔⲆΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1.23, 1.18, 0.01, 0.01);
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: Sh,
                    angle: 0
                };
                break;
            case tw.ⵠᐃΔⲆⲆ:
                this.ⵠᐃⵠᐃΔ = Xu;
                this.ⵠᐃⲆⵠⲆ = Lp;
                this.ⵠⲆⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(tr, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: Sh,
                    angle: 0
                };
                this.ᐃⵠⲆᐃ = [];
                for (var g = 0; g < 3; g++) {
                    this.ᐃⵠⲆᐃ.push({
                        ⵠⵠΔΔ: qp,
                        ⲆᐃᐃΔ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(tr, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                this.ᐃⵠⲆᐃ[0].x = this.x - 16.5;
                this.ᐃⵠⲆᐃ[0].y = this.y - 15.5;
                this.ᐃⵠⲆᐃ[0].angle = this.angle;
                this.ᐃⵠⲆᐃ[1].x = this.x + 36;
                this.ᐃⵠⲆᐃ[1].y = this.y + 17;
                this.ᐃⵠⲆᐃ[1].angle = this.angle;
                this.ᐃⵠⲆᐃ[2].x = this.x - 18.5;
                this.ᐃⵠⲆᐃ[2].y = this.y + 39;
                this.ᐃⵠⲆᐃ[2].angle = this.angle;
                break;
            case tw.ⵠⲆΔⵠΔ:
                this.ⵠᐃⵠᐃΔ = Yu;
                this.ⵠᐃⲆⵠⲆ = Gp;
                this.ⵠⲆⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(Gj, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: false,
                    angle: 0
                };
                this.ᐃⵠⲆᐃ = [];
                for (g = 0; g < 3; g++) {
                    this.ᐃⵠⲆᐃ.push({
                        ⵠⵠΔΔ: Vp,
                        ⲆᐃᐃΔ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                this.ᐃⵠⲆᐃ[0].x = this.x - 16.5;
                this.ᐃⵠⲆᐃ[0].y = this.y - 15.5;
                this.ᐃⵠⲆᐃ[1].x = this.x - 5.5;
                this.ᐃⵠⲆᐃ[1].y = this.y + 7.5;
                this.ᐃⵠⲆᐃ[2].x = this.x + 18;
                this.ᐃⵠⲆᐃ[2].y = this.y - 5;
                break;
            case tw.Δⵠᐃⵠᐃ:
                this.ⵠⵠΔΔ = Sp;
                this.ⲆᐃᐃΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(Cr, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case tw.ΔΔⵠᐃΔ:
                this.ⵠⵠΔΔ = _p;
                this.ⲆᐃᐃΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(Sh, 0.6, 0.6, 0, 5, 3);
                break;
            case tw.ᐃΔⵠΔⵠ:
                this.ⵠⵠΔΔ = bp;
                this.ⲆᐃᐃΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⵠⲆⵠᐃᐃⲆ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(rj, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ᐃᐃΔⵠⲆΔⲆ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(rj, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(Ah, 0.6, 0.6, 0, 5, 3);
                this.ⵠⵠⵠⲆᐃ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case tw.ΔᐃⵠΔᐃ:
                this.ⵠⵠΔΔ = Xp;
                this.ⲆᐃᐃΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(ia, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⵠⲆⵠᐃᐃⲆ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(ql, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ᐃᐃΔⵠⲆΔⲆ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(ug, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(pl, 0.6, 0.6, 0, 5, 3);
                this.ⵠⵠⵠⲆᐃ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case tw.ⲆⲆⵠᐃⲆ:
                this.ⵠⵠΔΔ = yp;
                this.ⲆᐃᐃΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case tw.ΔⲆⵠΔᐃ:
                this.ⵠⵠΔΔ = Dp;
                this.ⲆᐃᐃΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(Na, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
                this.ⵠⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case tw.ᐃᐃΔᐃᐃ:
                this.Δⵠⵠᐃᐃ = this.info & 15;
                this.ⲆΔΔΔⵠⵠⵠ = this.ΔᐃΔᐃΔ & 1;
                this.ΔᐃᐃᐃΔⲆⵠ = 0;
                this.x = this.info;
                this.y = this.ΔᐃΔᐃΔ;
                this.ⵠⵠΔΔ = dp;
                this.ⲆᐃᐃΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(pl, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
                break;
            case tw.ᐃᐃⵠΔᐃ:
            case tw.ᐃⲆᐃΔⵠ:
            case tw.ᐃⵠⲆⲆΔ:
            case tw.ⵠΔΔΔᐃ:
            case tw.ⲆᐃᐃΔΔ:
            case tw.ᐃⲆⵠⲆΔ:
            case tw.ΔⵠⲆⵠⲆ:
            case tw.ⵠᐃΔⲆΔ:
            case tw.ΔΔⲆⲆᐃ:
                this.ⵠⵠΔΔ = Dp;
                this.ⲆᐃᐃΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(lj, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(Ah, 0.6, 0.6, 0, 5, 3);
                break;
            case tw.ⵠΔⵠΔΔ:
                this.ⵠⵠΔΔ = _u;
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(Ui, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: Sh,
                    angle: 0
                };
                break;
            case tw.ΔⵠⲆⲆⲆ:
                this.ⵠᐃⲆⵠⲆ = Ip;
                this.ⵠⵠΔΔ = Wp;
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: gn,
                    angle: 0
                };
                this.up = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1.03, 0.98, 0.1, 0.1);
                this.ⵠᐃⵠΔΔ = [];
                break;
            case tw.ΔΔⵠᐃᐃ:
                this.angle = Math.random() * Math.PI / 2;
            case tw.ΔᐃⲆⲆΔ:
            case tw.ⲆⵠᐃᐃΔⲆᐃ:
                this.ⵠⵠΔΔ = Pp;
                this.ⵠⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(js, 0.6, 0.6, 0, 5, 3);
                break;
            case tw.ⵠⵠᐃΔⲆ:
                this.ⵠⵠΔΔ = Np;
                this.ⵠⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(Ah, 0.6, 0.6, 0, 5, 3);
                break;
            case tw.ᐃΔⲆΔΔ:
                this.scale = 1;
                this.ⵠⵠΔΔ = vp;
                this.ⲆᐃᐃΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(rj, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⵠⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case tw.ⵠΔΔⵠΔᐃⵠ:
                this.ᐃⲆⵠⵠⵠ = 0;
                this.ⵠⲆⵠΔ = [];
                this.ⵠᐃⵠⵠᐃⵠᐃ = 0;
                this.ⵠᐃⲆᐃⵠⵠᐃ = Tp;
                this.ⵠⵠΔΔ = Op;
                this.ⲆᐃᐃΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(js, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(pl, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⵠⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(ia, 0.6, 0.6, 0, 5, 3);
                break;
            case tw.ⵠΔⵠΔⲆ:
                this.x = this.info;
                this.y = this.ΔᐃΔᐃΔ;
                this.scale = 1;
                this.ⵠⵠⵠΔ = 0;
                this.ⵠⵠΔΔ = Yp;
                this.ⲆᐃᐃΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(pn, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(Gj, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⵠⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case tw.ⵠΔⵠΔⵠ:
                this.x = this.info;
                this.y = this.ΔᐃΔᐃΔ;
                this.scale = 1;
                this.ⵠⵠⵠΔ = 0;
                this.ⵠⵠΔΔ = mp;
                this.ⲆᐃᐃΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⵠⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case tw.ΔΔⲆⵠⵠ:
                this.scale = 1;
                this.ⵠⵠΔΔ = cp;
                this.ⲆᐃᐃΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⵠⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case tw.ΔⲆⲆΔᐃ:
                this.scale = 1;
                this.ⵠⵠΔΔ = zp;
                this.ⲆᐃᐃΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⵠⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case tw.ΔⲆᐃᐃΔ:
                this.scale = 1;
                this.ⵠⵠΔΔ = up;
                this.ⲆᐃᐃΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(Ui, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⵠⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(Ui, 0.6, 0.6, 0, 5, 3);
                break;
            case tw.ᐃⲆᐃⵠⵠ:
                this.ᐃⵠⲆᐃ = [];
                for (g = 0; g < 5; g++) {
                    this.ᐃⵠⲆᐃ.push({
                        ⵠⵠΔΔ: Vp,
                        ⲆᐃᐃΔ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                switch (this.id % 3) {
                    case 0:
                        this.ᐃⵠⲆᐃ[0].x = this.x - 20.5;
                        this.ᐃⵠⲆᐃ[0].y = this.y - 22.5;
                        this.ᐃⵠⲆᐃ[1].x = this.x - 35.5;
                        this.ᐃⵠⲆᐃ[1].y = this.y + 7.5;
                        this.ᐃⵠⲆᐃ[2].x = this.x + 7.5;
                        this.ᐃⵠⲆᐃ[2].y = this.y - 30;
                        this.ᐃⵠⲆᐃ[3].x = this.x + 22.5;
                        this.ᐃⵠⲆᐃ[3].y = this.y;
                        this.ᐃⵠⲆᐃ[4].x = this.x - 7.5;
                        this.ᐃⵠⲆᐃ[4].y = this.y + 14.5;
                        break;
                    case 1:
                        this.ᐃⵠⲆᐃ[0].x = this.x - 30.5;
                        this.ᐃⵠⲆᐃ[0].y = this.y - 22.5;
                        this.ᐃⵠⲆᐃ[1].x = this.x - 15.5;
                        this.ᐃⵠⲆᐃ[1].y = this.y + 7.5;
                        this.ᐃⵠⲆᐃ[2].x = this.x + 15.5;
                        this.ᐃⵠⲆᐃ[2].y = this.y - 30;
                        this.ᐃⵠⲆᐃ[3].x = this.x + 12.5;
                        this.ᐃⵠⲆᐃ[3].y = this.y + 5;
                        this.ᐃⵠⲆᐃ[4].x = this.x - 40.5;
                        this.ᐃⵠⲆᐃ[4].y = this.y + 14.5;
                        break;
                    case 2:
                        this.ᐃⵠⲆᐃ[0].x = this.x - 20.5;
                        this.ᐃⵠⲆᐃ[0].y = this.y - 20.5;
                        this.ᐃⵠⲆᐃ[1].x = this.x - 35.5;
                        this.ᐃⵠⲆᐃ[1].y = this.y + 15.5;
                        this.ᐃⵠⲆᐃ[2].x = this.x + 7.5;
                        this.ᐃⵠⲆᐃ[2].y = this.y - 17;
                        this.ᐃⵠⲆᐃ[3].x = this.x + 22.5;
                        this.ᐃⵠⲆᐃ[3].y = this.y + 5;
                        this.ᐃⵠⲆᐃ[4].x = this.x - 7.5;
                        this.ᐃⵠⲆᐃ[4].y = this.y + 1.5;
                }
                break;
            case tw.ⵠⵠᐃⲆⵠ:
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(Ro, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: false,
                    angle: 0
                };
                this.ⵠⵠΔΔ = pp;
                this.ⵠⲆⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(pl, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.ᐃⲆⵠⵠⵠⵠᐃ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
                break;
            case tw.ⵠⵠⲆΔΔ:
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(js, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: false,
                    angle: 0
                };
                this.ⵠⵠΔΔ = Cp;
                this.ⵠⲆⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case tw.ΔⵠⵠΔⵠ:
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(pl, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: js,
                    angle: 0
                };
                this.ⵠⵠΔΔ = $u;
                this.ⵠⲆⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case tw.ᐃΔᐃΔᐃ:
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: false,
                    angle: 0
                };
                this.ⵠⵠΔΔ = Zu;
                this.ⵠⲆⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case tw.ᐃᐃΔΔΔ:
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: gn,
                    angle: 0
                };
                this.ⵠⵠΔΔ = xp;
                this.ⵠⲆⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(pl, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case tw.ⵠⲆᐃᐃᐃ:
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: Na,
                    angle: 0
                };
                this.ⵠⵠΔΔ = $p;
                this.ⵠⲆⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case tw.ⵠⲆⲆⵠᐃ:
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: false,
                    angle: 0
                };
                this.ⵠⵠΔΔ = Kp;
                this.ⵠⲆⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case tw.ⲆⲆΔΔᐃ:
                this.ⵠⵠΔΔ = Zp;
                this.rotate = 0;
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(rj, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: false,
                    angle: 0
                };
                break;
            case tw.ΔⲆⵠⲆΔ:
                this.ⵠⵠΔΔ = jp;
                this.rotate = 0;
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(Ro, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: false,
                    angle: 0
                };
                break;
            case tw.ᐃᐃⵠΔⲆ:
                this.ⵠⵠΔΔ = fp;
                this.rotate = 0;
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: false,
                    angle: 0
                };
                break;
            case tw.ⵠΔⲆΔΔ:
                this.ⵠⵠΔΔ = bv;
                this.rotate = 0;
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: Qr,
                    angle: 0
                };
                break;
            case tw.ⲆⲆⲆⲆⲆ:
                this.ⵠⵠΔΔ = Hp;
                this.rotate = 0;
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(Na, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: js,
                    angle: 0
                };
                break;
            case tw.ⵠⲆⵠΔΔ:
                this.ⵠᐃⵠᐃΔ = Ap;
                this.ⵠᐃⲆⵠⲆ = Mp;
                this.rotate = 0;
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: js,
                    angle: 0
                };
                break;
            case tw.Δᐃᐃⵠᐃ:
                this.ⵠⵠΔΔ = Nc;
                this.ΔⵠᐃΔ = Math.floor(this.x / 100);
                this.ⲆΔ = Math.floor(this.y / 100);
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: false,
                    angle: 0
                };
                this.opacity = 1;
                this.ΔᐃⲆⵠᐃ = Lc;
                break;
            case tw.ΔᐃΔᐃⵠ:
                this.ⵠⵠΔΔ = Zc;
                this.ᐃΔΔⲆΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1.15, 1, 0.3, 0.3);
                this.color = 0;
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: false,
                    angle: 0
                };
                break;
            case tw.ⲆᐃΔⲆⵠ:
            case tw.ⲆΔᐃΔⲆ:
            case tw.ΔⲆⵠΔⲆ:
            case tw.ⵠΔⵠᐃΔ:
            case tw.ⵠΔᐃΔΔ:
                this.ⵠⵠΔΔ = jc;
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: Sh,
                    angle: 0
                };
                break;
            case tw.ᐃⲆⵠⵠΔ:
                this.ⵠⵠΔΔ = jc;
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(ij, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: js,
                    angle: 0
                };
                this.ΔᐃⲆⵠᐃ = Lc;
                break;
            case tw.ᐃⵠΔᐃⵠ:
            case tw.ⵠⵠⲆⵠⲆ:
            case tw.ᐃⲆⲆⲆΔ:
            case tw.ⲆΔⲆⵠⲆ:
            case tw.ΔᐃⵠⵠⲆ:
            case tw.ΔᐃΔⲆᐃ:
            case tw.ⲆΔⲆΔⲆ:
            case tw.ⲆⵠᐃᐃⲆ:
            case tw.ΔⵠⵠᐃΔ:
            case tw.ᐃΔᐃᐃᐃ:
            case tw.Δᐃⵠⵠⵠ:
            case tw.Ⲇⵠᐃᐃⵠ:
                this.ⵠⵠΔΔ = jc;
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(pl, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: false,
                    angle: 0
                };
                this.ΔᐃⲆⵠᐃ = Wc;
                break;
            case tw.ΔⵠΔΔⲆ:
                this.ⵠⵠΔΔ = Kc;
                this.opacity = 1;
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: false,
                    angle: 0
                };
                var n = this.angle % (Math.PI / 2);
                if (Math.PI / 4 > n) {
                    this.angle -= n;
                } else {
                    this.angle += Math.PI / 2 - n;
                }
                break;
            case tw.ΔΔᐃⲆΔ:
                this.ⵠⵠΔΔ = hp;
                this.angle = Math.PI * Math.random() * 2;
                break;
            case tw.ΔᐃⲆⲆᐃⲆⵠ:
                this.ⵠⵠΔΔ = ap;
                this.angle = Math.random() * Math.PI * 2;
                break;
            case tw.ΔΔᐃΔᐃⵠΔ:
                this.ⵠⵠΔΔ = $c;
                this.angle = Math.random() * Math.PI * 2;
                break;
            case tw.ⵠᐃᐃΔᐃⲆΔ:
                this.ⵠⵠΔΔ = qc;
                this.angle = Math.PI * Math.random() * 2;
                break;
            case tw.ⵠᐃΔⲆΔⲆⲆ:
                this.ⵠⵠΔΔ = Oc;
                this.angle = Math.PI * Math.random() * 2;
                break;
            case tw.ΔⲆΔΔⵠ:
                this.ⲆᐃΔ = function (a) {
                    this.lock = this.info & 8192 ? 1 : 0;
                    this.info = this.info & 8191;
                    this.action = a;
                };
                this.ⵠⵠΔΔ = np;
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(Ah, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: false,
                    angle: 0
                };
                this.lock = 0;
                this.ⲆᐃΔ(this.action);
                break;
            case tw.ⵠⵠΔᐃⲆ:
            case tw.ⲆⵠⲆᐃⵠ:
            case tw.ΔΔⵠⲆᐃ:
            case tw.ΔⲆΔΔⲆ:
            case tw.ᐃⵠᐃᐃᐃ:
            case tw.ᐃΔᐃⲆⲆ:
            case tw.ⲆⲆᐃᐃⲆ:
            case tw.ᐃΔⲆⵠⵠ:
            case tw.ᐃᐃⵠⵠᐃ:
            case tw.ⵠⵠⲆⲆⲆ:
            case tw.ᐃⲆⲆᐃⲆ:
            case tw.ⵠⲆᐃⲆⲆ:
                this.ⵠⵠΔΔ = tp;
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(Ro, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: false,
                    angle: 0
                };
                this.ΔᐃⲆⵠᐃ = Wc;
                break;
            case tw.Ⲇⵠⵠⵠⵠ:
                this.ⵠᐃⵠᐃΔ = Bp;
                this.ⵠⵠΔΔ = Ep;
                this.ⵠᐃⲆⵠⲆ = av;
                this.ⵠⲆⵠΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1.23, 1.18, 0.02, 0.02);
                this.ᐃΔΔⲆΔ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1.23, 1.18, 0.04, 0.04);
                this.ⵠⵠΔ = {
                    ⵠᐃⵠⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(gn, 1, 1, 0, 10, 10),
                    ⲆᐃΔ: false,
                    angle: 0
                };
                this.ⲆᐃΔ = function (a) {
                    this.action = a;
                };
        }
    }
    function xw(j) {
        function k(c, d, e, f, i) {
            var j = d + Math.floor(Cf.ⵠⲆⲆⵠⵠ.get() * f);
            var a = e + Math.floor(f * Cf.ⵠⲆⲆⵠⵠ.get());
            var k = 10 + Math.floor((Cf.ᐃⲆᐃᐃⲆ - j - 20) * Cf.ⵠⲆⲆⵠⵠ.get());
            var m = 10 + Math.floor(Cf.ⵠⲆⲆⵠⵠ.get() * (Cf.ᐃⲆⲆⲆᐃ - a - 20));
            var h = k + j;
            var l = m + a;
            for (var g = 0; g < Cf.ⵠᐃⲆᐃ.length; g++) {
                var n = Cf.ⵠᐃⲆᐃ[g];
                if (ΔⲆⲆⵠ.ΔΔⵠⵠᐃⵠᐃ(k, h, m, l, n.x1 / 100 - i, n.x2 / 100 + i, n.y1 / 100 - i, n.y2 / 100 + i) === 1) {
                    return 0;
                }
            }
            Cf.ⵠᐃⲆᐃ.push(new Cf.ΔⲆΔⲆᐃΔᐃ(c, k, m, j, a, 15));
            return 1;
        }
        function e(b, c, d, e, f) {
            for (var a = 0; f > a && k(b, c, d, e, 8) !== 1; a++);
            if (f === a) {
                return 0;
            } else {
                return 1;
            }
        }
        function i(b, c, d) {
            var e = c;
            for (var f = d; Cf.ᐃⲆⲆⲆᐃ > f; f++) {
                for (var g = c; g < Cf.ᐃⲆᐃᐃⲆ && (d === f && (e = Math.max(g, e)), g <= e) && b[f][g] !== 1; g++) {
                    b[f][g] = 1;
                }
                if (e > g) {
                    break;
                }
            }
            Cf.ⵠᐃⲆᐃ.push(new Cf.ΔⲆΔⲆᐃΔᐃ(Cf.ΔⲆΔⲆⲆ, c, d, e - c + 1, f - d, 15));
        }
        function p(f, e) {
            var i = Cf.ⵠᐃⲆᐃ[f];
            var j = Math.floor(i.y1 / 100);
            var k = Math.floor(i.x1 / 100);
            var n = Math.floor(i.ⵠⲆⵠ / 100);
            var o = k + (y = Math.floor(i.w / 100));
            var h = 2;
            var q = n;
            var r = j;
            for (var s = k + 10 + Math.floor(Cf.ⵠⲆⲆⵠⵠ.get() * (y - 20)), t = s - 4; s + 4 > t; t++) {
                w(j - 1, t, "wtb", 0, 1);
            }
            while (q > 0) {
                if (h !== 2) {
                    if (q < 10) {
                        for (A = 1; q > 0; A++) {
                            a(r, s, 1, 1, 0, e, A, 1);
                            q -= 1;
                            r += 1;
                        }
                    } else if (h !== 1) {
                        h = 1;
                        var v = Math.floor(1 + Cf.ⵠⲆⲆⵠⵠ.get() * 2);
                        var x = 1 + Math.floor(Cf.ⵠⲆⲆⵠⵠ.get() * 4);
                        if (k + 16 > s) {
                            a(r, s, v, 0, 1, e, x, x);
                            s += v;
                        } else if (o - 16 < s) {
                            a(r, s, v, 0, -1, e, x, x);
                            s -= v;
                        } else if (Cf.ⵠⲆⲆⵠⵠ.get() > 0.5) {
                            a(r, s, v, 0, 1, e, x, x);
                            s += v;
                        } else {
                            a(r, s, v, 0, -1, e, x, x);
                            s -= v;
                        }
                    } else {
                        var y;
                        var z = Math.min(q, Math.floor(1 + Cf.ⵠⲆⲆⵠⵠ.get() * 4));
                        a(r, s, z, 1, 0, e, y = 1 + Math.floor(Cf.ⵠⲆⲆⵠⵠ.get() * 4), y);
                        h = 0;
                        q -= z;
                        r += z;
                    }
                } else {
                    for (var A = 10; A > 1; A--) {
                        a(r, s, 1, 1, 0, e, A, 1);
                        q -= 1;
                        r += 1;
                    }
                    h = 0;
                }
            }
            for (t = s - 1; s + 2 > t; t++) {
                w(r, t, "wtb", 0, 1);
            }
        }
        function q(a, b) {
            for (var c = 0; b.length > c; c++) {
                h(b[c][0], b[c][1], a, b[c][2]);
            }
        }
        function a(c, f, j, k, n, o, a, p) {
            var h = Math.floor(a / 2);
            var l = Math.max(1, Math.floor(a / 2));
            var g = Math.floor(p / 2);
            var q = Math.max(1, Math.floor(p / 2));
            for (var b = 0; b < j; b++) {
                for (var r = c - g; c + q > r; r++) {
                    for (var s = f - h; f + l > s; s++) {
                        if (w(r, s, "wtb", 0, 1) === 1) {
                            o.push([r, s, 1]);
                        }
                    }
                }
                c += k;
                f += n;
            }
        }
        function w(a, b, c, d, e) {
            if (a >= 0 && b >= 0 && Cf.ᐃⲆⲆⲆᐃ > a && Cf.ᐃⲆᐃᐃⲆ > b) {
                Δᐃᐃⵠ = Ww.Δᐃᐃⵠ;
                if (Qh === Δᐃᐃⵠ[a][b]) {
                    Δᐃᐃⵠ[a][b] = {};
                }
                if (Δᐃᐃⵠ[a][b][c] !== vj) {
                    return 0;
                } else {
                    Δᐃᐃⵠ[a][b][c] = [];
                    Δᐃᐃⵠ[a][b][c][d] = [{
                        x: b * 100 + 50,
                        y: a * 100 + 50
                    }];
                    if (e === 1) {
                        (function (a, b, c, d) {
                            jt.push([a, b, c, d]);
                        })(c, d, a, b);
                    }
                    return 1;
                }
            }
        }
        function o(a) {
            var b = Cf.ⵠᐃⲆᐃ[a];
            w(-3 + Math.floor(b.y2 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
            w(3 + Math.floor(b.y1 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
            w(-3 + Math.floor(b.y2 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
            w(3 + Math.floor(b.y1 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
        }
        function h(a, b, c, d) {
            if (l(a, b) && (Δᐃᐃⵠ = Ww.Δᐃᐃⵠ, Δᐃᐃⵠ[a][b] === undefined && (Δᐃᐃⵠ[a][b] = {}), Δᐃᐃⵠ[a][b].r === undefined)) {
                var e = 0;
                if (l(a - 1, b) && jj !== Δᐃᐃⵠ[a - 1][b] && Δᐃᐃⵠ[a - 1][b].wtb !== undefined) {
                    e += 2;
                }
                if (l(a, b - 1) && Δᐃᐃⵠ[a][b - 1] !== undefined && Δᐃᐃⵠ[a][b - 1].wtb !== undefined) {
                    e += 8;
                }
                if (l(a, b + 1) && Δᐃᐃⵠ[a][b + 1] !== undefined && Δᐃᐃⵠ[a][b + 1].wtb !== Oo) {
                    e += 16;
                }
                if (l(a + 1, b) && Δᐃᐃⵠ[a + 1][b] !== zr && Δᐃᐃⵠ[a + 1][b].wtb !== undefined) {
                    e += 64;
                }
                if (l(a - 1, b - 1) && (e & 10) === 10 && Δᐃᐃⵠ[a - 1][b - 1] !== undefined && Δᐃᐃⵠ[a - 1][b - 1].wtb !== undefined) {
                    e += 1;
                }
                if (l(a - 1, b + 1) && (e & 18) === 18 && Og !== Δᐃᐃⵠ[a - 1][b + 1] && Δᐃᐃⵠ[a - 1][b + 1].wtb !== undefined) {
                    e += 4;
                }
                if (!!l(a + 1, b - 1) && !(~e & 72) && Δᐃᐃⵠ[a + 1][b - 1] !== undefined && Δᐃᐃⵠ[a + 1][b - 1].wtb !== undefined) {
                    e += 32;
                }
                if (l(a + 1, b + 1) && (e & 80) == 80 && Δᐃᐃⵠ[a + 1][b + 1] !== undefined && Δᐃᐃⵠ[a + 1][b + 1].wtb !== ns) {
                    e += 128;
                }
                Δᐃᐃⵠ[a][b].r = {};
                Δᐃᐃⵠ[a][b].r.ᐃⵠⲆⲆΔΔⲆ = e;
                Δᐃᐃⵠ[a][b].r.ᐃⲆⲆΔⵠΔΔ = d;
                Δᐃᐃⵠ[a][b].r.ᐃⲆⵠΔ = Cf.ⲆⲆⵠΔⵠ(c, b * 100 + 50, a * 100 + 50) - 400;
                Δᐃᐃⵠ[a][b].r.x = b * 100 + 50;
                Δᐃᐃⵠ[a][b].r.y = a * 100 + 50;
            }
        }
        function n(a, b) {
            for (var c = 0; c < 3; c++) {
                r(a, "s", c, Math.floor(b * 18));
            }
            for (c = 0; c < 3; c++) {
                r(a, "f", c, Math.floor(b * 24));
            }
            for (c = 0; c < 3; c++) {
                r(a, "d", c, Math.max(1, Math.floor(b * 2)), 0.3);
            }
            for (c = 0; c < 3; c++) {
                r(a, "g", c, Math.floor(b * 6));
            }
            o(a);
        }
        function g(a, b) {
            for (var c = 0; c < 6; c++) {
                r(a, "t", c, Math.floor(b * 80));
            }
            for (c = 0; c < 4; c++) {
                r(a, "b", c, Math.floor(b * 80));
            }
            for (c = 0; c < 3; c++) {
                r(a, "s", c, Math.floor(b * 50));
            }
            var d = [];
            for (c = 0; c < 6; c++) {
                p(a, d);
            }
            q(a, d);
            d = [];
            r(a, "p", 0, Math.floor(b * 28));
            for (c = 0; c < 3; c++) {
                r(a, "g", c, Math.floor(b * 7));
            }
            for (c = 0; c < 3; c++) {
                r(a, "d", c, Math.floor(b * 2));
            }
            for (c = 0; c < 3; c++) {
                r(a, "a", c, Math.floor(b * 1));
            }
            for (c = 0; c < 3; c++) {
                r(a, "m", c, Math.floor(b * 1));
            }
            r(a, "a", 0, Math.floor(b * 1));
            o(a);
        }
        function b(a, b) {
            (function (c, d) {
                var e = Cf.ⵠᐃⲆᐃ[d];
                for (var f = 0, i = 0; c > f && i < 10000; i++) {
                    var j = e.y1 + e.ⵠⲆⵠ * Cf.ⵠⲆⲆⵠⵠ.get();
                    var k = e.x1 + e.w * Cf.ⵠⲆⲆⵠⵠ.get();
                    var m = Math.floor(j / 100);
                    var p = Math.floor(k / 100);
                    if (Cf.ⲆⲆⵠΔⵠ(d, p * 100 + 50, m * 100 + 50) >= 600) {
                        for (var q = 1, s = m - 4; q === 1 && m + 4 >= s; s++) {
                            for (var t = p - 4; q === 1 && t <= p + 4; t++) {
                                if (Og !== Ww.Δᐃᐃⵠ[s][t]) {
                                    q = 0;
                                }
                            }
                        }
                        if (q !== 0) {
                            w(m, p, "la", f % 6, 0);
                            f++;
                        }
                    }
                }
            })(b * 80, a);
            for (var c = 0; c < 3; c++) {
                r(a, "s", c, Math.floor(b * 12));
            }
            for (c = 0; c < 3; c++) {
                r(a, "g", c, Math.floor(b * 6));
            }
            for (c = 0; c < 3; c++) {
                r(a, "re", c, Math.max(1, Math.floor(b * 1)), 0.2);
            }
            for (c = 0; c < 3; c++) {
                r(a, "a", c, Math.max(1, Math.floor(b * 2)));
            }
            o(a);
        }
        function d(a, b) {
            for (var c = 0; c < 3; c++) {
                r(a, "s", c, Math.floor(b * 12));
            }
            for (c = 0; c < 3; c++) {
                r(a, "m", c, Math.max(1, Math.floor(b * 1)), 0.2);
            }
            r(a, "c", 0, Math.floor(b * 36));
            var d = [];
            (function (c, d) {
                var e = Cf.ⵠᐃⲆᐃ[c];
                var f = Math.floor(e.y1 / 100);
                var i = Math.floor(e.x1 / 100);
                var j = Math.floor(e.ⵠⲆⵠ / 100);
                var a = Math.floor(e.w / 100);
                var k = f + Math.floor(j / 2);
                var h = i + Math.floor(a / 2);
                for (var l = 0; l < 3; l++) {
                    w(m = Math.floor(k - 3 + Cf.ⵠⲆⲆⵠⵠ.get() * 6), n = Math.floor(h - 3 + Cf.ⵠⲆⲆⵠⵠ.get() * 6), "plm", l, 1);
                }
                for (l = 0; l < 80; l++) {
                    var m;
                    var n;
                    if (w(m = Math.floor(k - 3 + Cf.ⵠⲆⲆⵠⵠ.get() * 6), n = Math.floor(h - 3 + Cf.ⵠⲆⲆⵠⵠ.get() * 6), "wtb", 0, 1) === 1) {
                        d.push([m, n, 0]);
                    }
                }
            })(a, d);
            q(a, d);
            d = [];
        }
        function m(a, b) {
            for (var c = 0; c < 6; c++) {
                r(a, "t", c, Math.floor(b * 20));
            }
            for (c = 0; c < 4; c++) {
                r(a, "b", c, Math.floor(b * 20));
            }
            for (c = 0; c < 3; c++) {
                r(a, "s", c, Math.floor(b * 20));
            }
            var d = [];
            p(a, d);
            q(a, d);
            d = [];
            r(a, "p", 0, Math.floor(b * 24));
            for (c = 0; c < 3; c++) {
                r(a, "g", c, Math.floor(b * 5));
            }
            if (Cf.mode === qw.ΔⲆᐃⵠⵠ) {
                for (c = 0; c < 3; c++) {
                    r(a, "d", c, Math.floor(b * 3));
                }
                for (c = 0; c < 3; c++) {
                    r(a, "a", c, Math.floor(b * 2));
                }
            }
            o(a);
        }
        function c(a) {
            for (var b = 0; b < 3; b++) {
                r(a, "s", b, 15);
            }
            for (b = 0; b < 3; b++) {
                r(a, "a", b, 1);
            }
            for (b = 0; b < 3; b++) {
                r(a, "d", b, 1);
            }
            o(a);
        }
        function l(a, b) {
            return a >= 0 && b >= 0 && a < Cf.ᐃⲆⲆⲆᐃ && b < Cf.ᐃⲆᐃᐃⲆ;
        }
        function r(f, e, i, j, k) {
            var n = Cf.ⵠᐃⲆᐃ[f];
            var a = Math.floor(n.x1 / 100);
            var q = Math.floor(n.y1 / 100);
            var s = Math.floor(n.w / 100);
            var t = Math.floor(n.ⵠⲆⵠ / 100);
            if (k !== undefined) {
                k = 1 - k;
                a += Math.floor(s * k / 2);
                q += Math.floor(t * k / 2);
                s -= Math.floor(s * k);
                t -= Math.floor(t * k);
            }
            var u = Ww.Δᐃᐃⵠ;
            for (var b = 0, x = 0; j > x && b <= 50000; b++) {
                var y = q + Math.floor(t * Cf.ⵠⲆⲆⵠⵠ.get());
                var z = a + Math.floor(s * Cf.ⵠⲆⲆⵠⵠ.get());
                if (Cf.ⲆⲆⵠΔⵠ(f, z * 100 + 50, y * 100 + 50) >= 400 && ((A = u[y][z + 1]) === undefined || A[e] === Jl || A[e][i] === undefined) && ((A = u[y][z - 1]) === undefined || A[e] === undefined || A[e][i] === Jl) && ((A = u[y + 1][z]) === undefined || A[e] === undefined || A[e][i] === undefined) && ((A = u[y - 1][z]) === Oo || A[e] === undefined || Jl === A[e][i]) && ((A = u[y + 1][z - 1]) === undefined || A[e] === jj || A[e][i] === undefined) && ((A = u[y - 1][z + 1]) === undefined || jj === A[e] || A[e][i] === undefined) && ((A = u[y + 1][z + 1]) === undefined || A[e] === undefined || A[e][i] === Qh)) {
                    var A = u[y - 1][z - 1];
                    if (tj === A || A[e] === undefined || A[e][i] === Js) {
                        if (u[y][z] === undefined) {
                            w(y, z, e, i, 1);
                            x++;
                        }
                    }
                }
            }
        }
        function f(a, b, c) {
            if (a[b]) {
                for (uk = 0; uk < a[b].length; uk++) {
                    if (a[b][uk]) {
                        for (ᐃᐃᐃⲆ = 0; ᐃᐃᐃⲆ < a[b][uk].length; ᐃᐃᐃⲆ++) {
                            a[b][uk][ᐃᐃᐃⲆ].ⵠⵠΔ = c;
                            a[b][uk][ᐃᐃᐃⲆ].ⲆᐃΔ = false;
                            a[b][uk][ᐃᐃᐃⲆ].time = 0;
                            a[b][uk][ᐃᐃᐃⲆ].angle = 0;
                        }
                    }
                }
            }
        }
        this.mode = qw.ⲆⵠΔⲆⵠ;
        this.ᐃᐃⵠⵠΔΔⵠ = j;
        this.ᐃΔⵠⲆⲆ = 0;
        this.ΔⲆᐃⵠᐃᐃᐃ = 6;
        this.ΔᐃᐃΔ = [];
        this.Δᐃⵠ = [];
        this.Δᐃⵠ[tw.ⵠᐃᐃⵠΔ] = [];
        this.Δᐃⵠ[tw.ᐃⲆᐃⵠⵠ] = [];
        this.Δᐃⵠ[tw.ᐃᐃⵠΔᐃ] = [];
        this.Δᐃⵠ[tw.ᐃⲆᐃΔⵠ] = [];
        this.Δᐃⵠ[tw.ΔᐃⵠΔᐃ] = [];
        this.Δᐃⵠ[tw.ΔΔⵠᐃΔ] = [];
        this.Δᐃⵠ[tw.Δⵠᐃⵠᐃ] = [];
        this.Δᐃⵠ[tw.ᐃΔⵠΔⵠ] = [];
        this.Δᐃⵠ[tw.ΔⲆⲆΔᐃ] = [];
        this.Δᐃⵠ[tw.ΔΔⲆⵠⵠ] = [];
        this.Δᐃⵠ[tw.ⵠΔⵠΔⵠ] = [];
        this.Δᐃⵠ[tw.ΔⵠⲆⵠⲆ] = [];
        this.Δᐃⵠ[tw.ⵠᐃΔⲆΔ] = [];
        this.Δᐃⵠ[tw.ⵠΔΔΔᐃ] = [];
        this.Δᐃⵠ[tw.ΔΔⲆⲆᐃ] = [];
        this.Δᐃⵠ[tw.ᐃᐃΔᐃᐃ] = [];
        this.Δᐃⵠ[tw.ΔⲆⵠΔᐃ] = [];
        this.Δᐃⵠ[tw.ⲆᐃᐃΔΔ] = [];
        this.Δᐃⵠ[tw.ᐃⲆⵠⲆΔ] = [];
        this.Δᐃⵠ[tw.ΔⲆᐃᐃΔ] = [];
        this.Δᐃⵠ[tw.ᐃΔⲆΔΔ] = [];
        this.Δᐃⵠ[tw.ⲆⲆⵠᐃⲆ] = [];
        this.Δᐃⵠ[tw.ΔΔᐃⲆΔ] = [];
        this.Δᐃⵠ[tw.ΔᐃⲆⲆᐃⲆⵠ] = [];
        this.Δᐃⵠ[tw.ΔΔᐃΔᐃⵠΔ] = [];
        this.Δᐃⵠ[tw.ⵠᐃᐃΔᐃⲆΔ] = [];
        this.Δᐃⵠ[tw.ⵠᐃΔⲆΔⲆⲆ] = [];
        this.Δᐃⵠ[tw.ⵠⵠᐃΔⲆ] = [];
        this.Δᐃⵠ[tw.ⲆⵠᐃᐃΔⲆᐃ] = [];
        this.Δᐃⵠ[tw.ΔᐃⲆⲆΔ] = [];
        this.Δᐃⵠ[tw.ΔⵠⲆⲆⲆ] = [];
        this.Δᐃⵠ[tw.ⵠΔⵠΔΔ] = [];
        this.Δᐃⵠ[tw.ᐃⵠⲆⲆΔ] = [];
        this.Δᐃⵠ[tw.ⲆΔᐃΔⲆ] = [];
        this.Δᐃⵠ[tw.ΔⵠᐃⵠⲆ] = [];
        this.Δᐃⵠ[tw.ᐃᐃᐃⲆⵠ] = [];
        this.Δᐃⵠ[tw.ⵠⲆΔⵠΔ] = [];
        this.Δᐃⵠ[tw.ⲆΔⲆΔⲆ] = [];
        this.Δᐃⵠ[tw.ⲆⵠᐃᐃⲆ] = [];
        this.Δᐃⵠ[tw.ΔⵠⵠᐃΔ] = [];
        this.Δᐃⵠ[tw.ᐃΔᐃᐃᐃ] = [];
        this.Δᐃⵠ[tw.Δᐃⵠⵠⵠ] = [];
        this.Δᐃⵠ[tw.Ⲇⵠᐃᐃⵠ] = [];
        this.Δᐃⵠ[tw.ᐃⵠΔᐃⵠ] = [];
        this.Δᐃⵠ[tw.ⵠⵠⲆⵠⲆ] = [];
        this.Δᐃⵠ[tw.ᐃⲆⲆⲆΔ] = [];
        this.Δᐃⵠ[tw.ⲆΔⲆⵠⲆ] = [];
        this.Δᐃⵠ[tw.ΔᐃⵠⵠⲆ] = [];
        this.Δᐃⵠ[tw.ΔᐃΔⲆᐃ] = [];
        this.Δᐃⵠ[tw.ΔⵠΔΔⲆ] = [];
        this.Δᐃⵠ[tw.ⲆⲆᐃᐃⲆ] = [];
        this.Δᐃⵠ[tw.ᐃΔⲆⵠⵠ] = [];
        this.Δᐃⵠ[tw.ᐃᐃⵠⵠᐃ] = [];
        this.Δᐃⵠ[tw.ⵠⵠⲆⲆⲆ] = [];
        this.Δᐃⵠ[tw.ᐃⲆⲆᐃⲆ] = [];
        this.Δᐃⵠ[tw.ⵠⲆᐃⲆⲆ] = [];
        this.Δᐃⵠ[tw.ⵠⵠΔᐃⲆ] = [];
        this.Δᐃⵠ[tw.ⲆⵠⲆᐃⵠ] = [];
        this.Δᐃⵠ[tw.ΔΔⵠⲆᐃ] = [];
        this.Δᐃⵠ[tw.ΔⲆΔΔⲆ] = [];
        this.Δᐃⵠ[tw.ᐃⵠᐃᐃᐃ] = [];
        this.Δᐃⵠ[tw.ᐃΔᐃⲆⲆ] = [];
        this.Δᐃⵠ[tw.Ⲇⵠⵠⵠⵠ] = [];
        this.Δᐃⵠ[tw.ⵠΔᐃΔΔ] = [];
        this.Δᐃⵠ[tw.ΔⲆⵠΔⲆ] = [];
        this.Δᐃⵠ[tw.ΔⲆΔΔⵠ] = [];
        this.Δᐃⵠ[tw.ⲆΔⵠᐃᐃ] = [];
        this.Δᐃⵠ[tw.ᐃⵠⵠΔⵠ] = [];
        this.Δᐃⵠ[tw.ᐃⲆⵠⵠΔ] = [];
        this.Δᐃⵠ[tw.Δᐃᐃⵠᐃ] = [];
        this.Δᐃⵠ[tw.ⲆᐃΔⲆⵠ] = [];
        this.Δᐃⵠ[tw.ⵠⵠᐃⲆⵠ] = [];
        this.Δᐃⵠ[tw.ᐃᐃΔΔΔ] = [];
        this.Δᐃⵠ[tw.ⵠⲆⲆⵠᐃ] = [];
        this.Δᐃⵠ[tw.ⵠᐃΔⲆⲆ] = [];
        this.Δᐃⵠ[tw.ᐃΔᐃΔᐃ] = [];
        this.Δᐃⵠ[tw.ⵠⲆᐃᐃᐃ] = [];
        this.Δᐃⵠ[tw.ΔⵠⵠΔⵠ] = [];
        this.Δᐃⵠ[tw.ⵠⵠⲆΔΔ] = [];
        this.Δᐃⵠ[tw.ⵠⲆⵠΔΔ] = [];
        this.Δᐃⵠ[tw.ⲆⲆΔΔᐃ] = [];
        this.Δᐃⵠ[tw.ΔⲆⵠⲆΔ] = [];
        this.Δᐃⵠ[tw.ᐃᐃⵠΔⲆ] = [];
        this.Δᐃⵠ[tw.ⵠΔⲆΔΔ] = [];
        this.Δᐃⵠ[tw.ⲆⲆⲆⲆⲆ] = [];
        this.Δᐃⵠ[tw.ⵠΔⵠᐃΔ] = [];
        this.Δᐃⵠ[tw.ΔΔⵠᐃᐃ] = [];
        this.Δᐃⵠ[tw.ΔᐃΔᐃⵠ] = [];
        this.ⵠⵠⵠΔⲆ = [];
        this.ᐃⲆᐃᐃⲆ = 260;
        this.ᐃⲆⲆⲆᐃ = 260;
        this.ⵠⵠⵠⵠΔᐃΔ = 100;
        this.ⲆΔⵠᐃΔⵠⵠ = 100;
        this.w = this.ⵠⵠⵠⵠΔᐃΔ * this.ᐃⲆᐃᐃⲆ;
        this.ⵠⲆⵠ = this.ᐃⲆⲆⲆᐃ * this.ⲆΔⵠᐃΔⵠⵠ;
        this.ⵠⲆⲆⵠⵠ = new qk.ⵠᐃᐃΔⵠⲆΔ();
        this.ⵠᐃⲆᐃ = [];
        this.ᐃᐃⲆⲆ = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0, 1, 0, 1, 1);
        this.transition = mg;
        this.ᐃⵠᐃΔⲆ = [];
        this.ⵠⲆΔⲆᐃ = 0;
        this.ⲆⵠⵠⲆⲆⲆᐃ = 1;
        this.ⵠⲆⲆⵠΔⲆΔ = 2;
        this.ⲆⲆᐃⲆⵠⵠⵠ = 3;
        this.ΔⲆΔⲆⲆ = 4;
        this.ᐃΔᐃⲆⵠⲆᐃ = 10;
        this.ᐃⵠᐃΔⲆ[this.ⵠⲆΔⲆᐃ] = {
            ᐃΔⵠⲆⵠⲆⲆ: 1,
            Ⲇⵠᐃ: [19, 58, 43],
            ΔⲆᐃ: [4, 43, 48],
            ᐃᐃᐃⲆΔ: ["#133a2b", "#042b30"]
        };
        this.ᐃⵠᐃΔⲆ[this.ΔⲆΔⲆⲆ] = {
            ᐃΔⵠⲆⵠⲆⲆ: 0,
            Ⲇⵠᐃ: [11, 106, 132],
            ΔⲆᐃ: [9, 55, 63],
            ᐃᐃᐃⲆΔ: ["#0B6A84", "#09373F"]
        };
        this.ᐃⵠᐃΔⲆ[this.ⲆⵠⵠⲆⲆⲆᐃ] = {
            ᐃΔⵠⲆⵠⲆⲆ: 0,
            Ⲇⵠᐃ: [235, 242, 240],
            ΔⲆᐃ: [19, 97, 103],
            ᐃᐃᐃⲆΔ: ["#EBF2F0", "#136167"]
        };
        this.ᐃⵠᐃΔⲆ[this.ⵠⲆⲆⵠΔⲆΔ] = {
            Ⲇⵠᐃ: [45, 32, 23],
            ᐃΔⵠⲆⵠⲆⲆ: 0,
            ᐃᐃᐃⲆΔ: ["#2D2017", "#031C1E"],
            ΔⲆᐃ: [3, 28, 30]
        };
        this.ᐃⵠᐃΔⲆ[this.ⲆⲆᐃⲆⵠⵠⵠ] = {
            ΔⲆᐃ: [24, 61, 60],
            ᐃΔⵠⲆⵠⲆⲆ: 0,
            Ⲇⵠᐃ: [74, 74, 74],
            ᐃᐃᐃⲆΔ: ["#4A4A4A", "#183D3C"]
        };
        this.ᐃⵠᐃΔⲆ[this.ᐃΔᐃⲆⵠⲆᐃ] = {
            ΔⲆᐃ: [9, 61, 56],
            ᐃΔⵠⲆⵠⲆⲆ: 0,
            ᐃᐃᐃⲆΔ: ["#EBD8A6", "#093D38"],
            Ⲇⵠᐃ: [235, 216, 166]
        };
        this.ΔⲆΔⲆᐃΔᐃ = function (b, c, d, e, f, g) {
            this.x1 = c * 100;
            this.y1 = d * 100;
            this.w = e * 100;
            this.ⵠⲆⵠ = f * 100;
            this.x2 = (c + e) * 100;
            this.y2 = (d + f) * 100;
            this.ⲆⲆᐃ = b;
            this.ΔⲆⲆ = g === sl ? 15 : g;
        };
        this.ⵠᐃᐃⵠⲆ = -1000000;
        this.ⲆᐃᐃΔⲆ = this.ⵠᐃᐃⵠⲆ;
        this.ⵠᐃⵠⲆᐃ = this.ⵠᐃᐃⵠⲆ;
        this.ΔⵠΔⲆᐃ = this.ⵠᐃᐃⵠⲆ;
        this.ⲆΔᐃⵠⵠΔᐃ = this.ⵠᐃᐃⵠⲆ;
        this.ⲆΔᐃⲆⵠᐃⲆ = this.ⵠᐃᐃⵠⲆ;
        this.ᐃΔⲆⵠΔ = this.ⵠᐃᐃⵠⲆ;
        this.ⲆⲆᐃⵠᐃᐃⲆⲆⵠ = function (b) {
            var c = b.r.x;
            var d = b.r.y;
            var e = Math.floor(d / 100);
            var f = Math.floor(c / 100);
            b.ⲆᐃᐃΔⲆ = Cf.ⵠᐃᐃⵠⲆ;
            b.ⵠᐃⵠⲆᐃ = Cf.ⵠᐃᐃⵠⲆ;
            b.ΔⵠΔⲆᐃ = Cf.ⵠᐃᐃⵠⲆ;
            b.ⲆΔᐃⵠⵠΔᐃ = Cf.ⵠᐃᐃⵠⲆ;
            b.ᐃΔⲆⵠΔ = Cf.ⵠᐃᐃⵠⲆ;
            b.ⲆΔⵠⵠⲆⲆⲆ = Cf.ⵠᐃᐃⵠⲆ;
            for (var g = 0; Cf.ΔⲆΔⲆⲆ !== Cf.ⵠᐃⲆᐃ[g].ⲆⲆᐃ; g++) {
                if (Cf.ⵠⲆΔⲆᐃ === Cf.ⵠᐃⲆᐃ[g].ⲆⲆᐃ) {
                    var h = Cf.ⲆⲆⵠΔⵠ(g, c, d);
                    b.ⲆΔᐃⵠⵠΔᐃ = Math.max(b.ⲆΔᐃⵠⵠΔᐃ, h);
                    if (h > 0 && Cf.ᐃᐃΔᐃⲆⵠⲆΔΔ(g, c, d) === 1) {
                        b.ⲆΔⵠⵠⲆⲆⲆ = 1;
                    }
                } else if (Cf.ⲆⵠⵠⲆⲆⲆᐃ === Cf.ⵠᐃⲆᐃ[g].ⲆⲆᐃ) {
                    b.ⲆᐃᐃΔⲆ = Math.max(b.ⲆᐃᐃΔⲆ, Cf.ⲆⲆⵠΔⵠ(g, c, d));
                } else if (Cf.ⵠᐃⲆᐃ[g].ⲆⲆᐃ === Cf.ᐃΔᐃⲆⵠⲆᐃ) {
                    b.ⵠᐃⵠⲆᐃ = Math.max(b.ⵠᐃⵠⲆᐃ, Cf.ⲆⲆⵠΔⵠ(g, c, d));
                } else if (Cf.ⵠⲆⲆⵠΔⲆΔ === Cf.ⵠᐃⲆᐃ[g].ⲆⲆᐃ) {
                    b.ΔⵠΔⲆᐃ = Math.max(b.ΔⵠΔⲆᐃ, Cf.ⲆⲆⵠΔⵠ(g, c, d));
                } else if (Cf.ⵠᐃⲆᐃ[g].ⲆⲆᐃ === Cf.ⲆⲆᐃⲆⵠⵠⵠ) {
                    b.ᐃΔⲆⵠΔ = Math.max(b.ᐃΔⲆⵠΔ, Cf.ⲆⲆⵠΔⵠ(g, c, d));
                }
            }
            if (Ww.Δᐃᐃⵠ[e][f].iblk) {
                b.ⲆΔⵠⵠⲆⲆⲆ = 1;
            }
            if (Cf.ᐃᐃᐃᐃᐃΔⵠᐃΔ(f, e)) {
                b.ⲆΔᐃⲆⵠᐃⲆ = b.ⵠᐃᐃⵠⲆ;
            } else if (Ww.Δᐃᐃⵠ[e][f].wtb || b.ⲆᐃᐃΔⲆ < 0 && b.ΔⵠΔⲆᐃ < 0 && b.ⲆΔᐃⵠⵠΔᐃ < 0 && b.ⲆΔⵠⵠⲆⲆⲆ < 0 && b.ᐃΔⲆⵠΔ < 0 && b.ⵠᐃⵠⲆᐃ < 0) {
                b.ⲆΔᐃⲆⵠᐃⲆ = 1;
            } else {
                b.ⲆΔᐃⲆⵠᐃⲆ = b.ⵠᐃᐃⵠⲆ;
            }
        };
        this.ᐃⵠⲆⵠⵠΔⵠᐃΔ = function (a, b) {
            Cf.ⲆᐃᐃΔⲆ = Cf.ⵠᐃᐃⵠⲆ;
            Cf.ⵠᐃⵠⲆᐃ = Cf.ⵠᐃᐃⵠⲆ;
            Cf.ΔⵠΔⲆᐃ = Cf.ⵠᐃᐃⵠⲆ;
            Cf.ᐃΔⲆⵠΔ = Cf.ⵠᐃᐃⵠⲆ;
            Cf.ⲆΔᐃⵠⵠΔᐃ = Cf.ⵠᐃᐃⵠⲆ;
            for (var c = 0; Cf.ⵠᐃⲆᐃ[c].ⲆⲆᐃ !== Cf.ΔⲆΔⲆⲆ; c++) {
                if (Cf.ⵠᐃⲆᐃ[c].ⲆⲆᐃ === Cf.ⵠⲆΔⲆᐃ) {
                    Cf.ⲆΔᐃⵠⵠΔᐃ = Math.max(Cf.ⲆΔᐃⵠⵠΔᐃ, Cf.ⲆⲆⵠΔⵠ(c, a, b));
                } else if (Cf.ⵠᐃⲆᐃ[c].ⲆⲆᐃ === Cf.ⲆⵠⵠⲆⲆⲆᐃ) {
                    Cf.ⲆᐃᐃΔⲆ = Math.max(Cf.ⲆᐃᐃΔⲆ, Cf.ⲆⲆⵠΔⵠ(c, a, b));
                } else if (Cf.ᐃΔᐃⲆⵠⲆᐃ === Cf.ⵠᐃⲆᐃ[c].ⲆⲆᐃ) {
                    Cf.ⵠᐃⵠⲆᐃ = Math.max(Cf.ⵠᐃⵠⲆᐃ, Cf.ⲆⲆⵠΔⵠ(c, a, b));
                } else if (Cf.ⵠᐃⲆᐃ[c].ⲆⲆᐃ === Cf.ⵠⲆⲆⵠΔⲆΔ) {
                    Cf.ΔⵠΔⲆᐃ = Math.max(Cf.ΔⵠΔⲆᐃ, Cf.ⲆⲆⵠΔⵠ(c, a, b));
                } else if (Cf.ⵠᐃⲆᐃ[c].ⲆⲆᐃ === Cf.ⲆⲆᐃⲆⵠⵠⵠ) {
                    Cf.ᐃΔⲆⵠΔ = Math.max(Cf.ᐃΔⲆⵠΔ, Cf.ⲆⲆⵠΔⵠ(c, a, b));
                }
            }
            if (Cf.ⲆᐃᐃΔⲆ < 0 && Cf.ᐃΔⲆⵠΔ < 0 && Cf.ⲆΔᐃⵠⵠΔᐃ < 0 && Cf.ᐃΔⲆⵠΔ < 0 && Cf.ⵠᐃⵠⲆᐃ < 0) {
                Cf.ⲆΔᐃⲆⵠᐃⲆ = 1;
            } else {
                Cf.ⲆΔᐃⲆⵠᐃⲆ = Cf.ⵠᐃᐃⵠⲆ;
            }
        };
        this.ᐃᐃΔᐃⲆⵠⲆΔΔ = function (b, c, d) {
            var e = Cf.ⵠᐃⲆᐃ[b];
            var f = 0;
            ⵠⵠⵠⵠ = e.x1 + 30 + ((e.ΔⲆⲆ & qw.ⵠΔΔᐃΔ) === 0 ? 150 : 0);
            var g = c - ⵠⵠⵠⵠ;
            if ((e.ΔⲆⲆ & qw.ⵠΔΔᐃΔ) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            ⵠⵠⵠᐃ = e.y1 + 250 + (e.ΔⲆⲆ & qw.ΔⵠΔⲆⲆ ? 0 : 150);
            g = d - ⵠⵠⵠᐃ;
            if ((e.ΔⲆⲆ & qw.ΔⵠΔⲆⲆ) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            ᐃⲆᐃᐃ = e.x2 + 80 + ((e.ΔⲆⲆ & qw.ΔᐃⵠⲆᐃ) === 0 ? -200 : 0);
            g = ᐃⲆᐃᐃ - c;
            if ((e.ΔⲆⲆ & qw.ΔᐃⵠⲆᐃ) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            ᐃⲆⲆᐃ = e.y2 - 200 + (e.ΔⲆⲆ & qw.ⲆⵠΔⲆᐃ ? 0 : -200);
            g = ᐃⲆⲆᐃ - d;
            if ((e.ΔⲆⲆ & qw.ⲆⵠΔⲆᐃ) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            if (ⵠⵠⵠⵠ <= c && ᐃⲆᐃᐃ >= c && d >= ⵠⵠⵠᐃ && ᐃⲆⲆᐃ >= d) {
                return f;
            } else {
                return 0;
            }
        };
        this.ⲆⲆⵠΔⵠ = function (a, b, c) {
            var d = Cf.ⵠᐃⲆᐃ[a];
            ⵠⵠⵠⵠ = d.x1 + 30;
            ⵠⵠⵠᐃ = d.y1 + 250;
            ᐃⲆᐃᐃ = d.x2 + 80;
            ᐃⲆⲆᐃ = d.y2 - 200;
            if (b >= ⵠⵠⵠⵠ && ᐃⲆᐃᐃ >= b && c >= ⵠⵠⵠᐃ && c <= ᐃⲆⲆᐃ) {
                return Math.min(b - ⵠⵠⵠⵠ, ᐃⲆᐃᐃ - b, c - ⵠⵠⵠᐃ, ᐃⲆⲆᐃ - c);
            }
            var e = -1000000;
            if (b - ⵠⵠⵠⵠ < 0) {
                e = Math.max(e, b - ⵠⵠⵠⵠ);
            } else if (ᐃⲆᐃᐃ - b < 0) {
                e = Math.max(e, ᐃⲆᐃᐃ - b);
            }
            ⵠᐃᐃⲆΔⵠⲆ = -1000000;
            if (ⵠⵠⵠᐃ > c || c > ᐃⲆⲆᐃ) {
                if (c - ⵠⵠⵠᐃ < 0) {
                    ⵠᐃᐃⲆΔⵠⲆ = Math.max(ⵠᐃᐃⲆΔⵠⲆ, c - ⵠⵠⵠᐃ);
                } else {
                    ⵠᐃᐃⲆΔⵠⲆ = Math.max(ⵠᐃᐃⲆΔⵠⲆ, ᐃⲆⲆᐃ - c);
                }
                e = e !== -1000000 && ⵠᐃᐃⲆΔⵠⲆ !== -1000000 ? Math.min(e, ⵠᐃᐃⲆΔⵠⲆ) : ⵠᐃᐃⲆΔⵠⲆ;
            }
            return e;
        };
        this.ᐃᐃΔⵠⲆᐃⵠ = function (b, c, d) {
            var e = d;
            var f = c;
            w(e, f, "isl", b, 1);
            for (var g = 0; g < 4; g++) {
                for (var h = 0; h < 3; h++) {
                    w(e - h, f - g, "iblk", 0);
                    w(e + h, f - g, "iblk", 0);
                    w(e + h, f + g, "iblk", 0);
                    w(e - h, f + g, "iblk", 0);
                }
            }
            if (b === 0) {
                for (g = 0; g < 2; g++) {
                    w(e - g, f - 4, "iblk", 0);
                    w(e + g, f - 4, "iblk", 0);
                    w(e - g, f + 4, "iblk", 0);
                    w(e + g, f + 4, "iblk", 0);
                }
                for (g = 0; g < 3; g++) {
                    w(e - 3, f + g, "iblk", 0);
                    w(e + 3, f + g, "iblk", 0);
                    w(e - 3, f - g, "iblk", 0);
                    w(e + 3, f - g, "iblk", 0);
                }
                w(e - 2, f - 4, "iblk", 0);
                w(e - 3, f - 3, "iblk", 0);
                w(e + 2, f + 4, "iblk", 0);
                w(e + 3, f + 3, "iblk", 0);
            } else if (b === 1) {
                for (g = 0; g < 3; g++) {
                    w(e - g, f - 4, "iblk", 0);
                    w(e + g, f - 4, "iblk", 0);
                    w(e - g, f + 4, "iblk", 0);
                    w(e + g, f + 4, "iblk", 0);
                }
                for (g = 0; g < 4; g++) {
                    w(e - 3, f + g, "iblk", 0);
                    w(e + 3, f + g, "iblk", 0);
                    w(e - 3, f - g, "iblk", 0);
                    w(e + 3, f - g, "iblk", 0);
                }
            } else if (b === 2) {
                for (g = 0; g < 2; g++) {
                    w(e - g, f - 4, "iblk", 0);
                    w(e + g, f - 4, "iblk", 0);
                    w(e - g, f + 4, "iblk", 0);
                    w(e + g, f + 4, "iblk", 0);
                }
                for (g = 0; g < 3; g++) {
                    w(e - 3, f + g, "iblk", 0);
                    w(e + 3, f + g, "iblk", 0);
                    w(e - 3, f - g, "iblk", 0);
                    w(e + 3, f - g, "iblk", 0);
                }
            }
        };
        this.ΔᐃⵠⵠᐃΔᐃⲆΔ = function (b) {
            for (var c = 0; c < Cf.ⵠᐃⲆᐃ.length && b > 0; c++) {
                var d = Cf.ⵠᐃⲆᐃ[c];
                if (d.ⲆⲆᐃ === Cf.ΔⲆΔⲆⲆ && d.w > 1800 && d.ⵠⲆⵠ > 1000) {
                    var f = Math.floor((d.x1 + d.w / 2) / 100);
                    var g = Math.floor((d.y1 + d.ⵠⲆⵠ / 2) / 100);
                    Cf.ᐃᐃΔⵠⲆᐃⵠ(b % 3, f, g);
                    for (var j = 0; j < 3; j++) {
                        var k = g - 2 + Math.floor(Cf.ⵠⲆⲆⵠⵠ.get() * 4);
                        var l = f - 3 + Math.floor(Cf.ⵠⲆⲆⵠⵠ.get() * 6);
                        if (Jl === Ww.Δᐃᐃⵠ[k][l].s) {
                            w(k, l, "plm", j);
                        }
                        k = g - 2 + Math.floor(Cf.ⵠⲆⲆⵠⵠ.get() * 4);
                        l = f - 3 + Math.floor(Cf.ⵠⲆⲆⵠⵠ.get() * 6);
                        if (Li === Ww.Δᐃᐃⵠ[k][l].plm) {
                            w(k, l, "s", j);
                        }
                    }
                    k = g - 2 + Math.floor(Cf.ⵠⲆⲆⵠⵠ.get() * 4);
                    l = f - 3 + Math.floor(Cf.ⵠⲆⲆⵠⵠ.get() * 6);
                    if (Ww.Δᐃᐃⵠ[k][l].plm === undefined && Ww.Δᐃᐃⵠ[k][l].s === undefined) {
                        w(k, l, "p", 0, 1);
                    }
                    b--;
                }
            }
        };
        this.ᐃⲆⵠⵠΔᐃΔⲆᐃ = function (a) {
            Cf.ⵠⲆⲆⵠⵠ.ⵠΔⵠⲆⲆ(a);
            var j = 0;
            while (true) {
                if (++j > 10000) {
                    return;
                }
                Cf.ⵠᐃⲆᐃ = [];
                if (Cf.ᐃΔⵠⲆⲆ === 0 && (Cf.mode === qw.ⵠΔᐃΔⵠ || Cf.mode === qw.ⵠᐃΔΔΔ || qw.ⲆⵠΔⲆⵠ === Cf.mode)) {
                    Cf.ᐃΔⵠⲆⲆ = kr;
                }
                if (Cf.mode === qw.ΔⲆᐃⵠⵠ) {
                    Cf.ⵠᐃⲆᐃ.push(new Cf.ΔⲆΔⲆᐃΔᐃ(Cf.ⵠⲆΔⲆᐃ, 2, 2, 80, 80, 15));
                } else if (qw.ⵠΔⵠⲆᐃ === Cf.mode) {
                    Cf.ⵠᐃⲆᐃ.push(new Cf.ΔⲆΔⲆᐃΔᐃ(Cf.ⵠⲆΔⲆᐃ, 2, 2, 150, 150, 15));
                } else if (Cf.ᐃΔⵠⲆⲆ !== 0 && Cf.ᐃΔⵠⲆⲆ.length > 0 && Cf.ᐃΔⵠⲆⲆ[0].length > 3) {
                    for (var k = 0; k < Cf.ᐃΔⵠⲆⲆ.length; k++) {
                        var s = Cf.ᐃΔⵠⲆⲆ[k];
                        if (s[0] !== 0) {
                            break;
                        }
                        var t = qw.ⵠⲆΔⲆᐃ;
                        switch (s[1]) {
                            case "FOREST":
                                t = Cf.ⵠⲆΔⲆᐃ;
                                break;
                            case "WINTER":
                                t = Cf.ⲆⵠⵠⲆⲆⲆᐃ;
                                break;
                            case "DESERT":
                                t = Cf.ᐃΔᐃⲆⵠⲆᐃ;
                                break;
                            case "LAVA":
                                t = Cf.ⵠⲆⲆⵠΔⲆΔ;
                                break;
                            case "DRAGON":
                                t = Cf.ⲆⲆᐃⲆⵠⵠⵠ;
                        }
                        Cf.ⵠᐃⲆᐃ.push(new Cf.ΔⲆΔⲆᐃΔᐃ(t, s[2], s[3], s[4], s[5], s[6], s[7]));
                    }
                } else if (Cf.ᐃΔⵠⲆⲆ !== 0) {
                    for (k = 0; k < Cf.ᐃΔⵠⲆⲆ.length; k++) {
                        var v = Cf.ᐃΔⵠⲆⲆ[k];
                        t = qw.ⵠⲆΔⲆᐃ;
                        switch (v[0]) {
                            case "FOREST":
                                t = Cf.ⵠⲆΔⲆᐃ;
                                break;
                            case "WINTER":
                                t = Cf.ⲆⵠⵠⲆⲆⲆᐃ;
                                break;
                            case "DESERT":
                                t = Cf.ᐃΔᐃⲆⵠⲆᐃ;
                                break;
                            case "LAVA":
                                t = Cf.ⵠⲆⲆⵠΔⲆΔ;
                                break;
                            case "DRAGON":
                                t = Cf.ⲆⲆᐃⲆⵠⵠⵠ;
                        }
                        if (e(t, v[1], v[2], 0, (k + 1) * 10) === 0) {
                            break;
                        }
                    }
                    if (k !== Cf.ᐃΔⵠⲆⲆ.length) {
                        continue;
                    }
                }
                break;
            }
            ΔΔⵠⵠᐃⲆᐃᐃᐃ();
            var x = [];
            for (var u = 0; Cf.ᐃⲆⲆⲆᐃ > u; u++) {
                x[u] = new Array(Cf.ᐃⲆᐃᐃⲆ);
                for (var A = 0; A < Cf.ᐃⲆᐃᐃⲆ; A++) {
                    x[u][A] = 0;
                }
            }
            for (u = 0; Cf.ⵠᐃⲆᐃ.length > u; u++) {
                for (var B = (v = Cf.ⵠᐃⲆᐃ[u]).x2 / 100, C = v.y2 / 100, D = v.x1 / 100; D <= B; D++) {
                    for (var E = v.y1 / 100; C >= E; E++) {
                        x[E][D] = 1;
                    }
                }
            }
            for (E = 0; Cf.ᐃⲆⲆⲆᐃ > E; E++) {
                for (D = 0; D < Cf.ᐃⲆᐃᐃⲆ; D++) {
                    if (x[E][D] === 0) {
                        i(x, D, E);
                    }
                }
            }
            Ww = {
                w: Cf.ᐃⲆᐃᐃⲆ,
                ⵠⲆⵠ: Cf.ᐃⲆⲆⲆᐃ,
                Δᐃᐃⵠ: []
            };
            for (u = 0; Cf.ᐃⲆⲆⲆᐃ > u; u++) {
                Ww.Δᐃᐃⵠ[u] = [];
            }
            if (Cf.ᐃΔⵠⲆⲆ !== 0 && Cf.ᐃΔⵠⲆⲆ.length > 0 && Cf.ᐃΔⵠⲆⲆ[0].length > 3) {
                for (k = 0; Cf.ᐃΔⵠⲆⲆ.length > k; k++) {
                    s = Cf.ᐃΔⵠⲆⲆ[k];
                    if (s[1] === "isl") {
                        Cf.ᐃᐃΔⵠⲆᐃⵠ(s[2], s[3], s[4]);
                    }
                }
            } else {
                Cf.ΔᐃⵠⵠᐃΔᐃⲆΔ(Cf.ΔⲆᐃⵠᐃᐃᐃ);
            }
            if (Cf.ᐃΔⵠⲆⲆ !== 0 && Cf.ᐃΔⵠⲆⲆ.length > 0 && Cf.ᐃΔⵠⲆⲆ[0].length > 3) {
                var F = [];
                for (k = 0; Cf.ᐃΔⵠⲆⲆ.length > k; k++) {
                    if ((s = Cf.ᐃΔⵠⲆⲆ[k])[0] === 1) {
                        if (s[1] === "r") {
                            w(s[3], s[2], "wtb", 0, 1);
                            F.push([s[3], s[2], s[4]]);
                        } else {
                            w(s[4], s[3], s[1], s[2], s[5]);
                        }
                    }
                }
                q(0, F);
                F = [];
            } else {
                for (u = 0; Cf.ⵠᐃⲆᐃ.length > u; u++) {
                    v = Cf.ⵠᐃⲆᐃ[u];
                    if (Cf.mode === qw.ⵠΔⵠⲆᐃ) {
                        if (v.ⲆⲆᐃ === Cf.ⵠⲆΔⲆᐃ) {
                            g(u, v.w / 10000);
                        }
                    } else {
                        if (v.ⲆⲆᐃ === Cf.ⵠⲆΔⲆᐃ) {
                            m(u, v.w / 10000);
                        }
                        if (v.ⲆⲆᐃ === Cf.ⵠⲆⲆⵠΔⲆΔ) {
                            b(u, v.w / 10000);
                        }
                        if (v.ⲆⲆᐃ === Cf.ⲆⵠⵠⲆⲆⲆᐃ) {
                            n(u, v.w / 10000);
                        }
                        if (v.ⲆⲆᐃ === Cf.ᐃΔᐃⲆⵠⲆᐃ) {
                            d(u, v.w / 10000);
                        }
                        if (Cf.ⲆⲆᐃⲆⵠⵠⵠ === v.ⲆⲆᐃ) {
                            c(u);
                        }
                    }
                }
            }
            kt("isl", 1);
            kt("wtb", 20);
            kt("la", 1);
            kt("c", 1);
            kt("s", 1);
            kt("f", 1);
            kt("p", 1);
            kt("g", 1);
            kt("d", 1);
            kt("a", 1);
            kt("re", 1);
            kt("m", 1);
            jt = [];
            Cf.ΔᐃⲆΔⲆⵠⲆⲆΔ(Ww);
        };
        this.ᐃΔⲆⲆ = w;
        this.ΔᐃⲆΔⲆⵠⲆⲆΔ = function (b) {
            for (var c = 0; c < this.ᐃⲆⲆⲆᐃ; c++) {
                for (var d = 0; d < this.ᐃⲆᐃᐃⲆ; d++) {
                    if (!b.Δᐃᐃⵠ[c]) {
                        b.Δᐃᐃⵠ[c] = [];
                    }
                    if (b.Δᐃᐃⵠ[c][d]) {
                        var e = b.Δᐃᐃⵠ[c][d];
                        if (e.de && e.de.length > 0) {
                            for (var g = 0; g < e.de.length; g++) {
                                if (e.de[g] && e.de[g].length > 0) {
                                    e.de = e.de[g][0];
                                    if (g >= 41 && g <= 49) {
                                        e.de.scale = 3;
                                        var h = Math.floor(Math.random() * 3 + 1);
                                        e.de.ⲆⵠⲆ = [];
                                        for (var j = 0; h > j; j++) {
                                            e.de.ⲆⵠⲆ.push({
                                                x: Math.random() * 120 - 60,
                                                y: Math.random() * 120 - 60,
                                                angle: Math.PI * Math.random() * 2,
                                                ⲆⲆΔᐃ: 41 + Math.floor(Math.random() * 9)
                                            });
                                        }
                                    } else if (g >= 19 && g <= 26) {
                                        e.de.scale = 3;
                                        h = Math.floor(Math.random() * 3 + 1);
                                        e.de.ⲆⵠⲆ = [];
                                        for (j = 0; j < h; j++) {
                                            e.de.ⲆⵠⲆ.push({
                                                x: Math.random() * 120 - 60,
                                                y: Math.random() * 120 - 60,
                                                angle: Math.PI * Math.random() * 2,
                                                ⲆⲆΔᐃ: 19 + Math.floor(Math.random() * 8)
                                            });
                                        }
                                    } else if (g <= 15 || g >= 27 && g <= 40) {
                                        e.de.angle = 0;
                                        e.de.scale = 2;
                                        e.de.ⲆⲆΔᐃ = g;
                                    } else {
                                        e.de.angle = Math.random() * Math.PI * 2;
                                        e.de.scale = 1;
                                        e.de.ⲆⲆΔᐃ = g;
                                    }
                                }
                            }
                        }
                        f(e, "p", new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1, 0, 10, 10));
                        f(e, "t", new ΔⲆⲆⵠ.ⵠΔᐃⵠ(ug, 1, 1, 0, 10, 10));
                        f(e, "s", new ΔⲆⲆⵠ.ⵠΔᐃⵠ(Qr, 1, 1, 0, 10, 10));
                        f(e, "g", new ΔⲆⲆⵠ.ⵠΔᐃⵠ(ql, 1, 1, 0, 10, 10));
                        f(e, "d", new ΔⲆⲆⵠ.ⵠΔᐃⵠ(tr, 1, 1, 0, 10, 10));
                        f(e, "b", new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1, 0, 10, 10));
                        f(e, "f", new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1, 0, 10, 10));
                        f(e, "sw", new ΔⲆⲆⵠ.ⵠΔᐃⵠ(ug, 1, 1, 0, 10, 10));
                        f(e, "gw", new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1, 0, 10, 10));
                        f(e, "dw", new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1, 0, 10, 10));
                        f(e, "a", new ΔⲆⲆⵠ.ⵠΔᐃⵠ(gn, 1, 1, 0, 10, 10));
                        f(e, "cs", new ΔⲆⲆⵠ.ⵠΔᐃⵠ(pl, 1, 1, 0, 10, 10));
                        f(e, "plm", new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1, 0, 10, 10));
                        f(e, "re", new ΔⲆⲆⵠ.ⵠΔᐃⵠ(tr, 1, 1, 0, 10, 10));
                        f(e, "c", new ΔⲆⲆⵠ.ⵠΔᐃⵠ(mg, 1, 1, 0, 10, 10));
                        f(e, "m", new ΔⲆⲆⵠ.ⵠΔᐃⵠ(Sh, 1, 1, 0, 10, 10));
                    } else {
                        b.Δᐃᐃⵠ[c][d] = [];
                    }
                }
            }
        };
        this.time = nr.ⵠᐃⵠ;
        this.ⲆⲆⵠᐃⵠ = {
            ⵠΔⵠⲆⲆ: 0,
            translate: {
                y: 0,
                x: 0
            },
            now: 0,
            ΔⵠⵠⲆⲆ: 0
        };
        this.ⵠΔⵠⲆᐃⵠᐃⲆΔ = function () {
            this.ⵠⵠⵠΔⲆ = [];
            this.Δᐃⵠ[tw.ⵠᐃᐃⵠΔ] = [];
            this.Δᐃⵠ[tw.ⲆΔᐃΔⲆ] = [];
            this.Δᐃⵠ[tw.ΔⵠᐃⵠⲆ] = [];
            this.Δᐃⵠ[tw.ᐃᐃᐃⲆⵠ] = [];
            this.Δᐃⵠ[tw.ⵠⲆΔⵠΔ] = [];
            this.Δᐃⵠ[tw.ⲆΔⲆΔⲆ] = [];
            this.Δᐃⵠ[tw.ⲆⵠᐃᐃⲆ] = [];
            this.Δᐃⵠ[tw.ΔⵠⵠᐃΔ] = [];
            this.Δᐃⵠ[tw.ᐃΔᐃᐃᐃ] = [];
            this.Δᐃⵠ[tw.Δᐃⵠⵠⵠ] = [];
            this.Δᐃⵠ[tw.Ⲇⵠᐃᐃⵠ] = [];
            this.Δᐃⵠ[tw.ᐃⲆⵠⵠΔ] = [];
            this.Δᐃⵠ[tw.ΔⲆⵠΔⲆ] = [];
            this.Δᐃⵠ[tw.Δᐃᐃⵠᐃ] = [];
            this.Δᐃⵠ[tw.ⲆᐃΔⲆⵠ] = [];
            this.Δᐃⵠ[tw.ⵠⵠᐃⲆⵠ] = [];
            this.Δᐃⵠ[tw.ᐃᐃΔΔΔ] = [];
            this.Δᐃⵠ[tw.ⵠⲆⲆⵠᐃ] = [];
            this.Δᐃⵠ[tw.ⵠᐃΔⲆⲆ] = [];
            this.Δᐃⵠ[tw.ᐃΔᐃΔᐃ] = [];
            this.Δᐃⵠ[tw.ⵠⲆᐃᐃᐃ] = [];
            this.Δᐃⵠ[tw.ΔⵠⵠΔⵠ] = [];
            this.Δᐃⵠ[tw.ⵠⵠⲆΔΔ] = [];
            this.Δᐃⵠ[tw.ⵠⲆⵠΔΔ] = [];
            this.Δᐃⵠ[tw.ⲆⲆΔΔᐃ] = [];
            this.Δᐃⵠ[tw.ΔⲆⵠⲆΔ] = [];
            this.Δᐃⵠ[tw.ᐃᐃⵠΔⲆ] = [];
            this.Δᐃⵠ[tw.ⵠΔⲆΔΔ] = [];
            this.Δᐃⵠ[tw.ⲆⲆⲆⲆⲆ] = [];
            this.Δᐃⵠ[tw.ⵠΔⵠᐃΔ] = [];
            this.Δᐃⵠ[tw.ᐃⵠΔᐃⵠ] = [];
            this.Δᐃⵠ[tw.ⵠⵠⲆⵠⲆ] = [];
            this.Δᐃⵠ[tw.ᐃⲆⲆⲆΔ] = [];
            this.Δᐃⵠ[tw.ⲆΔⲆⵠⲆ] = [];
            this.Δᐃⵠ[tw.ΔᐃⵠⵠⲆ] = [];
            this.Δᐃⵠ[tw.ΔᐃΔⲆᐃ] = [];
            this.Δᐃⵠ[tw.ΔⵠΔΔⲆ] = [];
            this.Δᐃⵠ[tw.ⲆⲆᐃᐃⲆ] = [];
            this.Δᐃⵠ[tw.ᐃΔⲆⵠⵠ] = [];
            this.Δᐃⵠ[tw.ᐃᐃⵠⵠᐃ] = [];
            this.Δᐃⵠ[tw.ⵠⵠⲆⲆⲆ] = [];
            this.Δᐃⵠ[tw.ᐃⲆⲆᐃⲆ] = [];
            this.Δᐃⵠ[tw.ⵠⲆᐃⲆⲆ] = [];
            this.Δᐃⵠ[tw.ⵠⵠΔᐃⲆ] = [];
            this.Δᐃⵠ[tw.ⲆⵠⲆᐃⵠ] = [];
            this.Δᐃⵠ[tw.ΔΔⵠⲆᐃ] = [];
            this.Δᐃⵠ[tw.ΔⲆΔΔⲆ] = [];
            this.Δᐃⵠ[tw.ᐃⵠᐃᐃᐃ] = [];
            this.Δᐃⵠ[tw.ᐃΔᐃⲆⲆ] = [];
            this.Δᐃⵠ[tw.Ⲇⵠⵠⵠⵠ] = [];
            this.Δᐃⵠ[tw.ⵠΔᐃΔΔ] = [];
            this.Δᐃⵠ[tw.ΔⲆⵠΔⲆ] = [];
            this.Δᐃⵠ[tw.ΔⲆΔΔⵠ] = [];
            this.Δᐃⵠ[tw.ⲆΔⵠᐃᐃ] = [];
            this.Δᐃⵠ[tw.ᐃⵠⵠΔⵠ] = [];
            this.Δᐃⵠ[tw.ᐃⲆᐃⵠⵠ] = [];
            this.Δᐃⵠ[tw.ᐃᐃⵠΔᐃ] = [];
            this.Δᐃⵠ[tw.ᐃⲆᐃΔⵠ] = [];
            this.Δᐃⵠ[tw.ΔᐃⵠΔᐃ] = [];
            this.Δᐃⵠ[tw.ΔΔⵠᐃΔ] = [];
            this.Δᐃⵠ[tw.Δⵠᐃⵠᐃ] = [];
            this.Δᐃⵠ[tw.ᐃΔⵠΔⵠ] = [];
            this.Δᐃⵠ[tw.ΔⲆⲆΔᐃ] = [];
            this.Δᐃⵠ[tw.ΔΔⲆⵠⵠ] = [];
            this.Δᐃⵠ[tw.ⵠΔⵠΔⵠ] = [];
            this.Δᐃⵠ[tw.ΔⵠⲆⵠⲆ] = [];
            this.Δᐃⵠ[tw.ⵠᐃΔⲆΔ] = [];
            this.Δᐃⵠ[tw.ⵠΔΔΔᐃ] = [];
            this.Δᐃⵠ[tw.ΔΔⲆⲆᐃ] = [];
            this.Δᐃⵠ[tw.ᐃᐃΔᐃᐃ] = [];
            this.Δᐃⵠ[tw.ΔⲆⵠΔᐃ] = [];
            this.Δᐃⵠ[tw.ⲆᐃᐃΔΔ] = [];
            this.Δᐃⵠ[tw.ᐃⲆⵠⲆΔ] = [];
            this.Δᐃⵠ[tw.ⵠΔⵠΔⲆ] = [];
            this.Δᐃⵠ[tw.ⵠΔΔⵠΔᐃⵠ] = [];
            this.Δᐃⵠ[tw.ΔⲆᐃᐃΔ] = [];
            this.Δᐃⵠ[tw.ᐃΔⲆΔΔ] = [];
            this.Δᐃⵠ[tw.ⲆⲆⵠᐃⲆ] = [];
            this.Δᐃⵠ[tw.ΔΔᐃⲆΔ] = [];
            this.Δᐃⵠ[tw.ΔᐃⲆⲆᐃⲆⵠ] = [];
            this.Δᐃⵠ[tw.ΔΔᐃΔᐃⵠΔ] = [];
            this.Δᐃⵠ[tw.ⵠᐃᐃΔᐃⲆΔ] = [];
            this.Δᐃⵠ[tw.ⵠᐃΔⲆΔⲆⲆ] = [];
            this.Δᐃⵠ[tw.ⵠⵠᐃΔⲆ] = [];
            this.Δᐃⵠ[tw.ⲆⵠᐃᐃΔⲆᐃ] = [];
            this.Δᐃⵠ[tw.ΔᐃⲆⲆΔ] = [];
            this.Δᐃⵠ[tw.ΔⵠⲆⲆⲆ] = [];
            this.Δᐃⵠ[tw.ⵠΔⵠΔΔ] = [];
            this.Δᐃⵠ[tw.ᐃⵠⲆⲆΔ] = [];
            this.Δᐃⵠ[tw.ΔΔⵠᐃᐃ] = [];
            this.Δᐃⵠ[tw.ΔᐃΔᐃⵠ] = [];
        };
        this.ⵠⵠⲆΔΔᐃΔᐃⲆ = function (a) {
            if (this.ⵠⵠⵠΔⲆ[a]) {
                ᐃⲆᐃⵠ = this.ⵠⵠⵠΔⲆ[a].type;
                this.ⵠⵠⵠΔⲆ[a] = null;
                for (var b = this.Δᐃⵠ[ᐃⲆᐃⵠ], c = 0; b.length > c; c++) {
                    if (a == b[c].ⵠΔⲆΔ) {
                        b.splice(c, 1);
                        return;
                    }
                }
            }
        };
        this.ⲆⲆⲆᐃⵠΔᐃⲆⵠ = function (a, b) {
            for (var c = 0; c < this.Δᐃⵠ[tw.ΔⲆⵠΔⲆ].length; c++) {
                var d = this.Δᐃⵠ[tw.ΔⲆⵠΔⲆ][c];
                if (b === Math.floor(d.x / 100) && Math.floor(d.y / 100) === a) {
                    return 1;
                }
            }
            return 0;
        };
        this.ᐃᐃᐃᐃᐃΔⵠᐃΔ = function (a, b) {
            for (var c = 0; this.Δᐃⵠ[tw.ᐃⲆⵠⵠΔ].length > c; c++) {
                var d = this.Δᐃⵠ[tw.ᐃⲆⵠⵠΔ][c];
                if (Math.floor(d.x / 100) == a && b == Math.floor(d.y / 100)) {
                    return true;
                }
            }
            return lj;
        };
        this.ᐃⵠⲆⵠΔ = function (j) {
            for (var e = 0; j.length > e; e++) {
                ᐃⲆΔᐃ = j[e];
                if (ᐃⲆΔᐃ.angle != ᐃⲆΔᐃ.ⲆΔⲆΔⵠΔᐃ) {
                    var q = Math.PI * 2;
                    ᐃⲆΔᐃ.angle = (ᐃⲆΔᐃ.angle + q) % q;
                    ᐃⲆΔᐃ.ⲆΔⲆΔⵠΔᐃ = (ᐃⲆΔᐃ.ⲆΔⲆΔⵠΔᐃ + q) % q;
                    if (ᐃⲆΔᐃ.angle != ᐃⲆΔᐃ.ⲆΔⲆΔⵠΔᐃ) {
                        var B = ᐃⲆΔᐃ.ⲆΔⲆΔⵠΔᐃ - ᐃⲆΔᐃ.angle;
                        var D = Math.abs(B);
                        if (D > Math.PI) {
                            D = Math.PI * 2 - D;
                        }
                        var E = Af * (D / Math.PI * 3 * qw.ⵠΔⲆⵠⲆⲆᐃ);
                        if (B > Math.PI) {
                            ᐃⲆΔᐃ.angle -= E;
                        } else if (-Math.PI > B) {
                            ᐃⲆΔᐃ.angle += E;
                        } else if (B < 0) {
                            ᐃⲆΔᐃ.angle -= E;
                        } else {
                            ᐃⲆΔᐃ.angle += E;
                        }
                        ᐃⲆΔᐃ.angle = (ᐃⲆΔᐃ.angle + q) % q;
                        if (E > Math.abs(ᐃⲆΔᐃ.angle - ᐃⲆΔᐃ.ⲆΔⲆΔⵠΔᐃ)) {
                            ᐃⲆΔᐃ.angle = ᐃⲆΔᐃ.ⲆΔⲆΔⵠΔᐃ;
                        }
                    }
                }
                Math.floor(ᐃⲆΔᐃ.r.y / 100);
                Math.floor(ᐃⲆΔᐃ.r.x / 100);
                if (ᐃⲆΔᐃ.x != ᐃⲆΔᐃ.r.x || ᐃⲆΔᐃ.r.y != ᐃⲆΔᐃ.y) {
                    if (ᐃⲆΔᐃ.action & kw.IDLE) {
                        ᐃⲆΔᐃ.action -= kw.IDLE;
                    }
                    ᐃⲆΔᐃ.action |= kw.ΔⲆΔⵠᐃᐃΔ;
                    var F = ΔⲆⲆⵠ.ᐃᐃⲆΔⲆⲆⲆ(ᐃⲆΔᐃ, ᐃⲆΔᐃ.r) + Math.PI;
                    var G = ᐃⲆΔᐃ.ΔᐃΔⲆⲆ * Af;
                    var H = ΔⲆⲆⵠ.ⵠΔΔᐃᐃⵠᐃ(G, F);
                    if (ΔⲆⲆⵠ.ΔΔΔⲆⵠⲆⵠ(H) < ΔⲆⲆⵠ.ΔΔΔⲆⵠⲆⵠ(ΔⲆⲆⵠ.ᐃⲆⵠⵠⲆᐃⲆ(ᐃⲆΔᐃ, ᐃⲆΔᐃ.r))) {
                        ΔⲆⲆⵠ.ⵠΔⲆᐃⵠⵠᐃ(ᐃⲆΔᐃ, H);
                    } else {
                        if (ᐃⲆΔᐃ.action & kw.ΔⲆΔⵠᐃᐃΔ) {
                            ᐃⲆΔᐃ.action -= kw.ΔⲆΔⵠᐃᐃΔ;
                        }
                        ᐃⲆΔᐃ.action |= kw.IDLE;
                        ΔⲆⲆⵠ.ⵠΔᐃⵠΔΔᐃ(ᐃⲆΔᐃ.r, ᐃⲆΔᐃ);
                    }
                }
                if (ᐃⲆΔᐃ.ⵠΔΔⵠΔ) {
                    var I = ᐃⲆΔᐃ.bubbles;
                    var J = I.length;
                    if (J === 0 || J < nr.ⲆⵠΔΔΔᐃᐃ && I[J - 1].ⲆⵠΔΔⲆ < 0.95) {
                        I.push({
                            id: Math.floor(Math.random() * ᐃΔ[540][0].length),
                            x: Math.floor(ᐃⲆΔᐃ.x + Math.random() * 80 - 40),
                            y: Math.floor(ᐃⲆΔᐃ.y + Math.random() * 80 - 40),
                            ⲆⵠΔΔⲆ: 1
                        });
                    }
                    for (var K = 0; J > K; K++) {
                        I[K].ⲆⵠΔΔⲆ = Math.max(0, I[K].ⲆⵠΔΔⲆ - Af);
                    }
                    for (K = 0; K < J; K++) {
                        if (I[K].ⲆⵠΔΔⲆ === 0) {
                            I.splice(K, 1);
                            break;
                        }
                    }
                }
                var L = 0;
                if (ᐃⲆΔᐃ.ᐃΔᐃΔ && mf.ⵠᐃΔⵠⲆ) {
                    var M = ᐃⲆΔᐃ.ⲆΔⵠᐃΔ;
                    J = M.length;
                    if (ᐃⲆΔᐃ.ⲆΔᐃⲆⵠᐃⲆ > 0 && ᐃⲆΔᐃ.ΔᐃⲆⲆᐃ !== 227 && ᐃⲆΔᐃ.ΔᐃⲆⲆᐃ !== 228 && ᐃⲆΔᐃ.ΔᐃⲆⲆᐃ !== 230 && ᐃⲆΔᐃ.ΔᐃⲆⲆᐃ !== 229 && ᐃⲆΔᐃ.ΔᐃⲆⲆᐃ !== 91 && !ᐃⲆΔᐃ.ⵠΔΔⵠΔ && (L = 1, J === 0 || ΔⲆⲆⵠ.ᐃⲆⵠΔ(M[J - 1], ᐃⲆΔᐃ) > nr.ᐃⲆᐃⲆⲆⵠⲆ)) {
                        var N = -ᐃⲆΔᐃ.angle;
                        var O = mq * (Math.cos(N) * 45);
                        var Q = Math.sin(N) * 45 * mq;
                        M.push({
                            x: ᐃⲆΔᐃ.x + O,
                            y: ᐃⲆΔᐃ.y + Q,
                            r: 8,
                            alpha: 0.8
                        });
                        M.push({
                            x: ᐃⲆΔᐃ.x - O,
                            y: ᐃⲆΔᐃ.y - Q,
                            r: 8,
                            alpha: 0.8
                        });
                        M.push({
                            x: ᐃⲆΔᐃ.x,
                            y: ᐃⲆΔᐃ.y,
                            r: 24,
                            alpha: 1
                        });
                    }
                    for (K = 0; K < J; K++) {
                        M[K].alpha = Math.max(0, M[K].alpha - Af / 2.2);
                        M[K].r += Af * 20;
                    }
                    if (M.length > 0 && M[0].alpha === 0) {
                        M.splice(0, 1);
                    }
                    var R = ᐃⲆΔᐃ.ᐃⲆΔΔᐃ;
                    J = R.length;
                    var S = -1;
                    var U = Math.max(0, Math.sign(ᐃⲆΔᐃ.ⲆΔⵠⵠⲆⲆⲆ));
                    var V = Math.max(0, Math.sign(ᐃⲆΔᐃ.ⲆᐃᐃΔⲆ));
                    Math.max(0, Math.sign(ᐃⲆΔᐃ.ⵠᐃⵠⲆᐃ));
                    var W = Math.max(0, Math.sign(ᐃⲆΔᐃ.ΔⵠΔⲆᐃ));
                    var X = Math.max(0, Math.sign(ᐃⲆΔᐃ.ᐃΔⲆⵠΔ));
                    if (ᐃⲆΔᐃ.ⲆΔⵠⵠⲆⲆⲆ > 0 || ᐃⲆΔᐃ.ⵠᐃⵠⲆᐃ > 0) {
                        S = 602;
                    } else if (ᐃⲆΔᐃ.ᐃΔⲆⵠΔ > 0) {
                        S = 680;
                    } else if (ᐃⲆΔᐃ.ⲆᐃᐃΔⲆ > 0) {
                        S = 475;
                    } else if (ᐃⲆΔᐃ.ΔⵠΔⲆᐃ > 0) {
                        S = 476;
                    }
                    if (ᐃⲆΔᐃ.ΔᐃⲆⲆᐃ === 225 && (U | V | W | X) === 1) {
                        S = 228;
                        var Y = ᐃⲆΔᐃ.ⲆⲆΔᐃΔ - Math.PI / 2;
                        var Z = 15;
                        var _ = 11;
                        var aa = nr.ΔⵠΔᐃᐃⲆΔ;
                    } else if (ᐃⲆΔᐃ.ΔᐃⲆⲆᐃ === 239 && (U | V | W | X) === 1) {
                        S = 249;
                        Y = ᐃⲆΔᐃ.ⲆⲆΔᐃΔ - Math.PI / 2;
                        Z = 21;
                        _ = 16;
                        aa = nr.ΔⵠΔᐃᐃⲆΔ;
                    } else if (ᐃⲆΔᐃ.ΔᐃⲆⲆᐃ === 226 && (U | V | W | X) == 1) {
                        S = 234;
                        Y = ᐃⲆΔᐃ.ⲆⲆΔᐃΔ - Math.PI / 2;
                        var ba = Math.random() * 50;
                        Z = 10 + ba;
                        _ = 0 + ba;
                        aa = nr.ΔⵠΔᐃᐃⲆΔ * 0.9;
                    } else {
                        Y = ᐃⲆΔᐃ.angle;
                        Z = 15;
                        _ = 11;
                        aa = nr.ΔⵠΔᐃᐃⲆΔ;
                    }
                    if (ᐃⲆΔᐃ.ΔᐃⲆⲆᐃ === 227 || ᐃⲆΔᐃ.ΔᐃⲆⲆᐃ === 228 || ᐃⲆΔᐃ.ΔᐃⲆⲆᐃ === 91 || ᐃⲆΔᐃ.ΔᐃⲆⲆᐃ === 229 || ᐃⲆΔᐃ.ΔᐃⲆⲆᐃ === 230 || ᐃⲆΔᐃ.ⵠΔΔⵠΔ); else if (ᐃⲆΔᐃ.ΔᐃⲆⲆᐃ === 224) {
                        if (J === 0 || ΔⲆⲆⵠ.ᐃⲆⵠΔ(R[J - 1], ᐃⲆΔᐃ) > nr.ⲆⵠΔⲆᐃᐃⵠ) {
                            R.push({
                                x: ᐃⲆΔᐃ.x,
                                y: ᐃⲆΔᐃ.y,
                                angle: ᐃⲆΔᐃ.ⲆⲆΔᐃΔ,
                                alpha: 1,
                                id: 226
                            });
                        }
                    } else if (S != -1 && L === 0 && (J === 0 || ΔⲆⲆⵠ.ᐃⲆⵠΔ(R[J - 1], ᐃⲆΔᐃ) > aa)) {
                        ᐃⲆΔᐃ.ⵠⲆᐃΔⲆΔᐃ++;
                        if (Math.abs(ᐃⲆΔᐃ.x - ᐃⲆΔᐃ.r.x) > 1 && Math.abs(ᐃⲆΔᐃ.y - ᐃⲆΔᐃ.r.y) > 1) {
                            if (ᐃⲆΔᐃ.x < ᐃⲆΔᐃ.r.x && ᐃⲆΔᐃ.y > ᐃⲆΔᐃ.r.y || ᐃⲆΔᐃ.r.x < ᐃⲆΔᐃ.x && ᐃⲆΔᐃ.y < ᐃⲆΔᐃ.r.y) {
                                if (ᐃⲆΔᐃ.ⵠⲆᐃΔⲆΔᐃ % 2) {
                                    O = mq * -_;
                                    Q = mq * -_;
                                } else {
                                    Q = _ * mq;
                                    O = _ * mq;
                                }
                            } else if (ᐃⲆΔᐃ.ⵠⲆᐃΔⲆΔᐃ % 2) {
                                O = _ * mq;
                                Q = mq * -_;
                            } else {
                                Q = mq * _;
                                O = mq * -_;
                            }
                        } else if (ᐃⲆΔᐃ.ⵠⲆᐃΔⲆΔᐃ % 2) {
                            O = mq * (Math.cos(Y) * Z);
                            Q = Math.sin(Y) * Z * mq;
                        } else {
                            O = mq * (Z * -Math.cos(Y));
                            Q = Z * -Math.sin(Y) * mq;
                        }
                        R.push({
                            x: ᐃⲆΔᐃ.x + O,
                            y: ᐃⲆΔᐃ.y + Q,
                            angle: Y + Math.PI / 2,
                            alpha: 1,
                            id: S
                        });
                    }
                    for (K = 0; J > K; K++) {
                        if (R[K].id === 226) {
                            R[K].alpha = Math.max(0, R[K].alpha - Af * 1.5);
                        } else {
                            R[K].alpha = Math.max(0, R[K].alpha - Af / 2.85);
                        }
                    }
                    if (R.length > 0 && R[0].alpha === 0) {
                        R.splice(0, 1);
                    }
                }
            }
        };
        this.ⲆᐃΔ = function () {
            this.ᐃⵠⲆⵠΔ(this.Δᐃⵠ[tw.ⵠᐃᐃⵠΔ]);
            this.ᐃⵠⲆⵠΔ(this.Δᐃⵠ[tw.ᐃᐃⵠΔᐃ]);
            this.ᐃⵠⲆⵠΔ(this.Δᐃⵠ[tw.ᐃⲆᐃΔⵠ]);
            this.ᐃⵠⲆⵠΔ(this.Δᐃⵠ[tw.ΔᐃⵠΔᐃ]);
            this.ᐃⵠⲆⵠΔ(this.Δᐃⵠ[tw.ΔΔⵠᐃΔ]);
            this.ᐃⵠⲆⵠΔ(this.Δᐃⵠ[tw.Δⵠᐃⵠᐃ]);
            this.ᐃⵠⲆⵠΔ(this.Δᐃⵠ[tw.ᐃΔⵠΔⵠ]);
            this.ᐃⵠⲆⵠΔ(this.Δᐃⵠ[tw.ΔⲆⲆΔᐃ]);
            this.ᐃⵠⲆⵠΔ(this.Δᐃⵠ[tw.ΔΔⲆⵠⵠ]);
            this.ᐃⵠⲆⵠΔ(this.Δᐃⵠ[tw.ⵠΔⵠΔⵠ]);
            this.ᐃⵠⲆⵠΔ(this.Δᐃⵠ[tw.ᐃⵠⲆⲆΔ]);
            this.ᐃⵠⲆⵠΔ(this.Δᐃⵠ[tw.ⵠΔΔΔᐃ]);
            this.ᐃⵠⲆⵠΔ(this.Δᐃⵠ[tw.ΔΔⲆⲆᐃ]);
            this.ᐃⵠⲆⵠΔ(this.Δᐃⵠ[tw.ᐃᐃΔᐃᐃ]);
            this.ᐃⵠⲆⵠΔ(this.Δᐃⵠ[tw.ΔⲆⵠΔᐃ]);
            this.ᐃⵠⲆⵠΔ(this.Δᐃⵠ[tw.ⲆᐃᐃΔΔ]);
            this.ᐃⵠⲆⵠΔ(this.Δᐃⵠ[tw.ᐃⲆⵠⲆΔ]);
            this.ᐃⵠⲆⵠΔ(this.Δᐃⵠ[tw.ⵠΔⵠΔⲆ]);
            this.ᐃⵠⲆⵠΔ(this.Δᐃⵠ[tw.ⵠΔΔⵠΔᐃⵠ]);
            this.ᐃⵠⲆⵠΔ(this.Δᐃⵠ[tw.ΔⲆᐃᐃΔ]);
            this.ᐃⵠⲆⵠΔ(this.Δᐃⵠ[tw.ⲆⲆⵠᐃⲆ]);
            this.ᐃⵠⲆⵠΔ(this.Δᐃⵠ[tw.ΔⵠⲆⵠⲆ]);
            this.ᐃⵠⲆⵠΔ(this.Δᐃⵠ[tw.ⵠᐃΔⲆΔ]);
            this.ᐃⵠⲆⵠΔ(this.Δᐃⵠ[tw.ᐃΔⲆΔΔ]);
        };
        this.ⲆᐃᐃΔ = [];
        this.ⲆᐃᐃΔ[620] = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(Gj, 1, 1.05, 1, 0.008, 0.008);
        this.ⲆᐃᐃΔ[619] = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1.08, 1, 0.006, 0.006);
        this.ⲆᐃᐃΔ[694] = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(ug, 1, 1.02, 1, 0.008, 0.008);
        this.ⲆᐃᐃΔ[695] = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 1, 1.08, 1, 0.006, 0.006);
        this.ΔⲆⲆⲆΔ = [];
        this.ΔⲆⲆⲆΔ[0] = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.1, 1, 0, 0.6, 0.6);
        this.ΔⲆⲆⲆΔ[1] = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.4, 1, 0, 0.6, 0.6);
        this.ΔⲆⲆⲆΔ[2] = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.3, 1, 0, 0.6, 0.6);
        this.ΔⲆⲆⲆΔ[3] = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(tr, 0.8, 1, 0, 0.6, 0.6);
        this.ΔⲆⲆⲆΔ[4] = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.3, 1, 0, 0.6, 0.6);
        this.ΔⲆⲆⲆΔ[5] = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(ug, 0.8, 1, 0, 0.6, 0.6);
        this.ΔⲆⲆⲆΔ[6] = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(pn, 0.5, 1, 0, 0.6, 0.6);
        this.ΔⲆⲆⲆΔ[7] = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.9, 1, 0, 0.6, 0.6);
        this.ΔⲆⲆⲆΔ[8] = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(pn, 0.6, 1, 0, 0.6, 0.6);
        this.ΔⲆⲆⲆΔ[9] = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.2, 1, 0, 0.6, 0.6);
        this.ΔⲆⲆⲆΔ[10] = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.6, 1, 0, 0.6, 0.6);
        this.ΔⲆⲆⲆΔ[11] = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(rj, 0.4, 1, 0, 0.6, 0.6);
        this.ΔⲆⲆⲆΔ[12] = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0.8, 1, 0, 0.6, 0.6);
        this.ΔⲆⲆⲆΔ[13] = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(ug, 0.2, 1, 0, 0.6, 0.6);
        this.ΔⲆⲆⲆΔ[14] = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(Sh, 0.7, 1, 0, 0.6, 0.6);
    }
    function yw(a, b, c, d) {
        this.id = a;
        this.ΔᐃΔⲆⲆ = (a + 5) * 8;
        this.ⲆⵠΔΔⲆ = Rn / 1366;
        this.x = b;
        this.y = c;
        this.c = Math.sin(d);
        this.ⵠΔⵠΔ = Math.cos(d);
        this.alpha = 0;
    }
    function zw() {
        Math.random();
        return "t";
    }
    function Aw() {
        Math.random();
        return "a";
    }
    function Bw() {
        Math.random();
        return "o";
    }
    function Cw() {
        Math.random();
        return "i";
    }
    function Dw() {
        Math.random();
        return "n";
    }
    function Ew() {
        Math.random();
        return "d";
    }
    function Fw() {
        Math.random();
        return "r";
    }
    function Gw() {
        Math.random();
        return "p";
    }
    function Gw() {
        Math.random();
        return "p";
    }
    function Hw() {
        this.ⵠΔⵠⲆⲆ = function () { };
        this.ⲆⲆⵠⲆᐃ = {
            ᐃΔⲆᐃⲆ: 1,
            open: false,
            ⲆⵠΔⵠ: 1
        };
        this.ⲆᐃⵠⲆⵠ = {
            ⲆⵠΔⵠ: 1,
            ᐃΔⲆᐃⲆ: -1,
            open: false
        };
        this.ⵠᐃⲆΔ = {
            ᐃΔⲆᐃⲆ: -1,
            ⲆⵠΔⵠ: 1,
            open: false,
            ⵠᐃⲆᐃΔ: 0,
            ᐃᐃⵠᐃΔⲆΔ: 0
        };
        this.ⵠⲆΔᐃ = {
            ⲆΔΔⲆⵠΔⵠ: 0,
            ⵠⵠᐃᐃΔΔⵠ: 0,
            type: 0,
            ⲆⲆⲆΔᐃΔᐃ: 0,
            ⲆⵠΔⵠ: 1,
            ᐃΔⲆᐃⲆ: -1,
            open: false
        };
        this.ᐃΔΔΔ = {
            ⵠᐃⲆᐃΔ: 0,
            ⵠⲆⲆⲆⵠΔⲆ: 0,
            ᐃΔⲆᐃⲆ: -1,
            ⲆΔΔⲆⵠΔⵠ: 0,
            open: false,
            ⲆⵠΔⵠ: 1
        };
        this.sign = {
            ᐃΔⲆᐃⲆ: -1,
            open: false
        };
        this.ⲆᐃⲆΔⵠ = {
            ᐃΔⲆᐃⲆ: -1,
            open: ql,
            ⲆⵠΔⵠ: 1,
            ⵠΔΔⲆ: 0
        };
        this.ⵠΔΔⵠΔ = {
            enabled: Gj,
            ΔⵠⵠⲆΔ: -1,
            label: false,
            now: -1,
            ⵠⵠΔΔ: gv
        };
        this.ᐃᐃⲆΔ = {
            id: -1,
            ⵠΔΔⲆ: 0,
            ⲆⵠΔⵠ: 1,
            ᐃΔⲆᐃⲆ: -1,
            open: false,
            lock: false,
            locked: Gj,
            ⲆᐃⲆⲆⵠⲆⲆ: false,
            ⲆΔⵠΔⵠᐃⵠ: false
        };
        this.ⵠⲆⵠᐃᐃ = al;
        this.reconnect = {
            enabled: false,
            rotate: 0
        };
        this.key = ΔⲆⲆⵠ.ⲆⲆᐃΔⵠⲆⲆ("key", bj.location.href);
        var a = ΔⲆⲆⵠ.ⲆⲆᐃΔⵠⲆⲆ("egg", bj.location.href);
        if (a) {
            mf.ᐃᐃᐃⵠ = parseInt(a);
        }
        this.beta = bj.location.href.indexOf("http://starve.io/beta") === 0 ? 1 : 0;
        if (this.key && this.beta) {
            ⲆΔⲆⲆ.set("starve_beta", this.key);
        } else if (this.beta) {
            this.key = ⲆΔⲆⲆ.get("starve_beta");
        }
        this.ⵠᐃⲆⲆΔ = ⲆΔⲆⲆ.get("starve_token") ? ⲆΔⲆⲆ.get("starve_token") : ΔⲆⲆⵠ.ᐃⵠᐃΔᐃⵠΔ(ow.Ⲇᐃⵠⵠⵠⵠⵠᐃᐃ);
        bj.baguette();
        var b = bj.kot2;
        function c() {
            this.seed = 1;
            this.ᐃᐃⵠᐃΔΔⵠ = 2;
            this.ⲆᐃΔⲆⲆⲆΔ = 3;
            this.ᐃⵠⲆᐃᐃΔⲆⲆⲆ = 1;
            this.ᐃΔⵠⲆᐃⵠⲆΔᐃ = 2;
            this.ⲆᐃΔⵠⲆᐃⲆⵠΔ = 3;
            this.ⵠⵠⲆᐃΔΔⵠ = function (a) {
                this.seed = 2 + Math.floor(qw.ⵠⲆΔⵠΔ * Math.random());
            };
            this.ⵠᐃΔⵠⵠΔⲆ = function (a) {
                this.ᐃᐃⵠᐃΔΔⵠ = 2 + Math.floor(qw.ⵠⲆΔⵠΔ * Math.random());
            };
            this.ⵠⵠΔⲆⲆⲆΔ = function (a) {
                this.ⲆᐃΔⲆⲆⲆΔ = 2 + Math.floor(Math.random() * qw.ⵠⲆΔⵠΔ);
            };
            this.ΔⲆᐃΔᐃⲆⲆⵠⵠ = function (a) {
                this.ᐃⵠⲆᐃᐃΔⲆⲆⲆ = 2 + Math.floor(qw.ⵠⲆΔⵠΔ * Math.random());
            };
            this.ᐃΔᐃΔⵠᐃⵠΔΔ = function (a) {
                this.ᐃΔⵠⲆᐃⵠⲆΔᐃ = 2 + Math.floor(Math.random() * qw.ⵠⲆΔⵠΔ);
            };
            this.ⵠⵠᐃᐃⲆⵠᐃᐃⲆ = function (a) {
                this.ⲆᐃΔⵠⲆᐃⲆⵠΔ = 2 + Math.floor(qw.ⵠⲆΔⵠΔ * Math.random());
            };
            this.ⲆᐃⲆⲆᐃΔΔ = function (c, e, f, i, j, k, a) {
                for (var m = 1; m < a;) {
                    var n = m * f % ᐃΔΔⲆⲆΔⵠ;
                    var o = ⲆⲆᐃᐃⲆⵠⲆ[n];
                    if (o < 0.1) {
                        p += 50;
                        m += 50;
                    } else {
                        var p = Math.floor(o * i + j);
                        if (k < m && m < a) {
                            var q = Math.random() > 0.5 ? Af * -10 : Af * 10;
                            var r = p * e;
                            this.ⲆᐃⲆⵠᐃⲆⵠ[n] = Math.max(-qw.ᐃΔⲆⵠⵠᐃⲆ, Math.min(qw.ᐃΔⲆⵠⵠᐃⲆ, this.ⲆᐃⲆⵠᐃⲆⵠ[n] + q));
                            this.ⵠΔᐃⵠΔᐃⵠ[n] = Math.max(-qw.ΔΔⲆᐃⵠⲆⵠ, Math.min(qw.ΔΔⲆᐃⵠⲆⵠ, this.ⵠΔᐃⵠΔᐃⵠ[n] + q));
                            if (r > 0) {
                                In.beginPath();
                                In.arc(m + Yw.ᐃⵠⵠ.x + this.ⵠΔᐃⵠΔᐃⵠ[n], c + this.ⲆᐃⲆⵠᐃⲆⵠ[n] - qw.ᐃΔⲆⵠⵠᐃⲆ * 0.8, r, 0, Math.PI * 2);
                                if (Cf.transition) {
                                    var t = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
                                    In.fillStyle = Kv(83, 156, 160, 236, 247, 249, t);
                                } else {
                                    In.fillStyle = nr.ᐃⲆᐃⵠᐃⵠⵠ[Cf.time];
                                }
                                In.fill();
                            }
                        }
                        m += p * 2;
                    }
                }
            };
            this.ⲆΔΔⲆⲆΔΔ = function (c, e, f, i, j, k, a) {
                for (var m = 1; m < a;) {
                    var n = m * f % ᐃΔΔⲆⲆΔⵠ;
                    var o = ⲆⲆᐃᐃⲆⵠⲆ[n];
                    if (o < 0.1) {
                        p += 50;
                        m += 50;
                    } else {
                        var p = Math.floor(o * i + j);
                        if (m > k && a > m) {
                            var q = Math.random() > 0.5 ? Af * -10 : Af * 10;
                            var r = p * e;
                            this.ΔⲆᐃⲆⲆ[n] = Math.max(-qw.ᐃΔⲆⵠⵠᐃⲆ, Math.min(qw.ᐃΔⲆⵠⵠᐃⲆ, this.ΔⲆᐃⲆⲆ[n] + q));
                            this.ᐃᐃⲆΔΔ[n] = Math.max(-qw.ΔΔⲆᐃⵠⲆⵠ, Math.min(qw.ΔΔⲆᐃⵠⲆⵠ, this.ᐃᐃⲆΔΔ[n] + q));
                            if (r > 0) {
                                In.beginPath();
                                In.arc(c + this.ΔⲆᐃⲆⲆ[n] - qw.ᐃΔⲆⵠⵠᐃⲆ * 0.8, m + Yw.ᐃⵠⵠ.y + this.ᐃᐃⲆΔΔ[n], r, 0, Math.PI * 2);
                                if (Cf.transition) {
                                    var t = Cf.time ? 1 - Cf.ᐃᐃⲆⲆ.ΔⲆⲆ : Cf.ᐃᐃⲆⲆ.ΔⲆⲆ;
                                    In.fillStyle = Kv(83, 156, 160, 236, 247, 249, t);
                                } else {
                                    In.fillStyle = nr.ᐃⲆᐃⵠᐃⵠⵠ[Cf.time];
                                }
                                In.fill();
                            }
                        }
                        m += p * 2;
                    }
                }
            };
            this.ΔᐃⲆⲆΔΔΔΔⲆ = function (b, c, d, e, f, g) {
                f -= 30;
                g += 30;
                var h = -(d - qw.ᐃΔΔⲆⵠ - e - 2) / qw.ⲆⲆᐃⲆᐃⵠΔ;
                if (h === 0) {
                    this.ⵠⵠΔⲆⲆⲆΔ();
                }
                In.globalAlpha = ΔⲆⲆⵠ.ΔᐃⲆΔⵠ(h);
                this.ⲆᐃⲆⲆᐃΔΔ(d, h, this.ⲆᐃΔⲆⲆⲆΔ, 18, 16, f, g);
                In.globalAlpha = 1;
                if ((h = -(b - qw.ⲆΔᐃⵠᐃ - e + 500) / qw.ΔᐃᐃⲆⲆᐃΔ) === 0) {
                    this.ⵠⵠⲆᐃΔΔⵠ();
                }
                In.globalAlpha = ΔⲆⲆⵠ.ΔᐃⲆΔⵠ(h);
                this.ⲆᐃⲆⲆᐃΔΔ(b, h, this.seed, 12, 10, f, g);
                In.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(c - qw.ⲆᐃᐃⵠΔ - e + 698) / qw.ΔⲆΔᐃΔⲆᐃ) <= 0.01) {
                        this.ⵠᐃΔⵠⵠΔⲆ();
                    }
                    In.globalAlpha = ΔⲆⲆⵠ.ΔᐃⲆΔⵠ(h);
                    this.ⲆᐃⲆⲆᐃΔΔ(c, h, this.ᐃᐃⵠᐃΔΔⵠ, 6, 6, f, g);
                    In.globalAlpha = 1;
                }
            };
            this.ᐃᐃᐃⲆᐃⲆⵠΔΔ = function (b, c, d, e, f, g) {
                f -= 30;
                g += 30;
                var h = -(-d + qw.ᐃΔΔⲆⵠ + e + 2) / qw.ⲆⲆᐃⲆᐃⵠΔ;
                if (h === 0) {
                    this.ⵠⵠΔⲆⲆⲆΔ();
                }
                In.globalAlpha = ΔⲆⲆⵠ.ΔᐃⲆΔⵠ(h);
                this.ⲆᐃⲆⲆᐃΔΔ(d, h, this.ⲆᐃΔⲆⲆⲆΔ, 18, 16, f, g);
                In.globalAlpha = 1;
                if ((h = -(-b + qw.ⲆΔᐃⵠᐃ + e) / qw.ΔᐃᐃⲆⲆᐃΔ) === 0) {
                    this.ⵠⵠⲆᐃΔΔⵠ();
                }
                In.globalAlpha = ΔⲆⲆⵠ.ΔᐃⲆΔⵠ(h);
                this.ⲆᐃⲆⲆᐃΔΔ(b, h, this.seed, 12, 10, f, g);
                In.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(-c + qw.ⲆᐃᐃⵠΔ + e) / qw.ΔⲆΔᐃΔⲆᐃ) <= 0.01) {
                        this.ⵠᐃΔⵠⵠΔⲆ();
                    }
                    In.globalAlpha = ΔⲆⲆⵠ.ΔᐃⲆΔⵠ(h);
                    this.ⲆᐃⲆⲆᐃΔΔ(c, h, this.ᐃᐃⵠᐃΔΔⵠ, 6, 6, f, g);
                    In.globalAlpha = 1;
                }
            };
            this.ⲆᐃᐃⵠΔⵠᐃⲆΔ = function (b, c, d, e, f, g) {
                var h;
                f -= 30;
                g += 30;
                if ((h = -(-d + qw.ᐃΔΔⲆⵠ + e + 2) / qw.ⲆⲆᐃⲆᐃⵠΔ) === 0) {
                    this.ⵠⵠΔⲆⲆⲆΔ();
                }
                In.globalAlpha = ΔⲆⲆⵠ.ΔᐃⲆΔⵠ(h);
                this.ⲆΔΔⲆⲆΔΔ(d, h, this.ⲆᐃΔⲆⲆⲆΔ, 18, 16, f, g);
                In.globalAlpha = 1;
                if ((h = -(-b + qw.ⲆΔᐃⵠᐃ + e) / qw.ΔᐃᐃⲆⲆᐃΔ) === 0) {
                    this.ⵠⵠⲆᐃΔΔⵠ();
                }
                In.globalAlpha = ΔⲆⲆⵠ.ΔᐃⲆΔⵠ(h);
                this.ⲆΔΔⲆⲆΔΔ(b, h, this.seed, 12, 10, f, g);
                In.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(-c + qw.ⲆᐃᐃⵠΔ + e) / qw.ΔⲆΔᐃΔⲆᐃ) <= 0.01) {
                        this.ⵠᐃΔⵠⵠΔⲆ();
                    }
                    In.globalAlpha = ΔⲆⲆⵠ.ΔᐃⲆΔⵠ(h);
                    this.ⲆΔΔⲆⲆΔΔ(c, h, this.ᐃᐃⵠᐃΔΔⵠ, 6, 6, f, g);
                    In.globalAlpha = 1;
                }
            };
            this.ΔⵠⵠᐃⲆⲆⵠᐃΔ = function (b, c, d, e, f, g) {
                var h;
                f -= 30;
                g += 30;
                if ((h = -(d - qw.ᐃΔΔⲆⵠ - e - 2) / qw.ⲆⲆᐃⲆᐃⵠΔ) === 0) {
                    this.ⵠⵠΔⲆⲆⲆΔ();
                }
                In.globalAlpha = ΔⲆⲆⵠ.ΔᐃⲆΔⵠ(h);
                this.ⲆΔΔⲆⲆΔΔ(d, h, this.ⲆᐃΔⲆⲆⲆΔ, 18, 16, f, g);
                In.globalAlpha = 1;
                if ((h = -(b - qw.ⲆΔᐃⵠᐃ - e + 500) / qw.ΔᐃᐃⲆⲆᐃΔ) === 0) {
                    this.ⵠⵠⲆᐃΔΔⵠ();
                }
                In.globalAlpha = ΔⲆⲆⵠ.ΔᐃⲆΔⵠ(h);
                this.ⲆΔΔⲆⲆΔΔ(b, h, this.seed, 12, 10, f, g);
                In.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(c - qw.ⲆᐃᐃⵠΔ - e + 698) / qw.ΔⲆΔᐃΔⲆᐃ) <= 0.01) {
                        this.ⵠᐃΔⵠⵠΔⲆ();
                    }
                    In.globalAlpha = ΔⲆⲆⵠ.ΔᐃⲆΔⵠ(h);
                    this.ⲆΔΔⲆⲆΔΔ(c, h, this.ᐃᐃⵠᐃΔΔⵠ, 6, 6, f, g);
                    In.globalAlpha = 1;
                }
            };
            this.w1 = {
                r: new ΔⲆⲆⵠ.ⵠⲆΔⲆⲆ(ΔⲆⲆⵠ.ⲆᐃⲆⵠΔᐃⵠ, 0, 10, qw.ⵠᐃⵠⲆⲆ, qw.ⵠᐃⵠⲆⲆ, qw.ⲆⲆᐃⲆᐃⵠΔ),
                ᐃᐃᐃⲆ: new ΔⲆⲆⵠ.ⵠⲆΔⲆⲆ(ΔⲆⲆⵠ.ᐃΔΔΔⵠΔⵠ, 0, 10, qw.ⲆⲆᐃⲆᐃⵠΔ, qw.ⲆⲆᐃⲆᐃⵠΔ, qw.ⵠᐃⵠⲆⲆ)
            };
            this.w2 = {
                r: new ΔⲆⲆⵠ.ⵠⲆΔⲆⲆ(ΔⲆⲆⵠ.ⵠⲆⵠⲆΔΔᐃ, 0, 10, qw.ⲆΔⲆⲆᐃⵠⲆ, qw.ⲆΔⲆⲆᐃⵠⲆ, qw.ΔᐃᐃⲆⲆᐃΔ),
                ᐃᐃᐃⲆ: new ΔⲆⲆⵠ.ⵠⲆΔⲆⲆ(ΔⲆⲆⵠ.ΔᐃⲆΔⵠ, 0, 10, qw.ΔᐃᐃⲆⲆᐃΔ, qw.ΔᐃᐃⲆⲆᐃΔ, qw.ⲆΔⲆⲆᐃⵠⲆ)
            };
            this.w3 = {
                r: new ΔⲆⲆⵠ.ⵠⲆΔⲆⲆ(ΔⲆⲆⵠ.ΔΔⲆⲆΔⵠⲆ, 0, 10, qw.ⲆΔⲆⲆΔΔΔ, qw.ⲆΔⲆⲆΔΔΔ, qw.ΔⲆΔᐃΔⲆᐃ),
                ᐃᐃᐃⲆ: new ΔⲆⲆⵠ.ⵠⲆΔⲆⲆ(ΔⲆⲆⵠ.ΔᐃⲆΔⵠ, 0, 10, qw.ΔⲆΔᐃΔⲆᐃ, qw.ΔⲆΔᐃΔⲆᐃ, qw.ⲆΔⲆⲆΔΔΔ)
            };
            this.ᐃⵠⲆᐃΔΔᐃⲆⵠ = function (a) {
                if (a.r.x === a.r.ᐃΔⲆⲆⵠ) {
                    if (a.ᐃᐃᐃⲆ.ᐃΔⲆⲆⵠ === a.ᐃᐃᐃⲆ.x) {
                        return a.r;
                    } else {
                        return a.ᐃᐃᐃⲆ;
                    }
                } else {
                    return a.r;
                }
            };
            this.ⲆⲆᐃ = function (a) {
                var b;
                if (a.r.x === a.r.ᐃΔⲆⲆⵠ) {
                    if (a.ᐃᐃᐃⲆ.ᐃΔⲆⲆⵠ === a.ᐃᐃᐃⲆ.x) {
                        a.r.ᐃᐃⵠⲆⵠᐃⵠ();
                        a.ᐃᐃᐃⲆ.ᐃᐃⵠⲆⵠᐃⵠ();
                        b = a.r;
                    } else {
                        b = a.ᐃᐃᐃⲆ;
                    }
                } else {
                    b = a.r;
                }
                b.ⲆⵠᐃᐃᐃⲆΔ(b.ᐃΔⲆⲆⵠ);
                return b;
            };
            this.ΔⲆᐃⲆⲆ = [];
            this.ᐃᐃⲆΔΔ = [];
            this.ⲆᐃⲆⵠᐃⲆⵠ = [];
            this.ⵠΔᐃⵠΔᐃⵠ = [];
            this.ⵠΔⵠⲆⲆ = function () {
                for (var a = 0; ᐃΔΔⲆⲆΔⵠ > a; a++) {
                    this.ΔⲆᐃⲆⲆ[a] = Math.floor(ⲆⲆᐃᐃⲆⵠⲆ[a] * qw.ᐃΔⲆⵠⵠᐃⲆ);
                    this.ᐃᐃⲆΔΔ[a] = Math.floor(qw.ΔΔⲆᐃⵠⲆⵠ * ⲆⲆᐃᐃⲆⵠⲆ[a]);
                    this.ⲆᐃⲆⵠᐃⲆⵠ[a] = Math.floor(ⲆⲆᐃᐃⲆⵠⲆ[a] * qw.ᐃΔⲆⵠⵠᐃⲆ);
                    this.ⵠΔᐃⵠΔᐃⵠ[a] = Math.floor(qw.ΔΔⲆᐃⵠⲆⵠ * ⲆⲆᐃᐃⲆⵠⲆ[a]);
                }
                this.w1.r.x = this.w1.r.ᐃΔⲆⲆⵠ;
                this.w2.r.ᐃᐃⲆᐃΔ = 3.5;
                this.w3.r.ᐃᐃⲆᐃΔ = 2;
            };
            this.ⵠΔⵠⲆⲆ();
        }
        this.ⵠᐃⲆⲆΔ = b.substring(0, 6) + this.ⵠᐃⲆⲆΔ.substring(6);
        this.ᐃⲆᐃᐃᐃΔⲆ = ⲆΔⲆⲆ.get("starve_token_id") ? ⲆΔⲆⲆ.get("starve_token_id") : "";
        this.id = 0;
        this.ⵠΔⲆΔ = 0;
        this.Ⲇⵠᐃ = 0;
        this.ⲆⲆⵠⵠⲆⵠⲆ = {
            ⵠⲆⵠΔⲆⲆⵠ: 0,
            ⵠⵠᐃΔⵠ: 0,
            ⵠᐃⲆᐃⲆΔⵠ: "",
            ᐃᐃᐃᐃᐃ: 0
        };
        this.ᐃᐃⵠΔⵠⵠⲆᐃⵠ = {
            connected: 0,
            ΔΔⵠⵠⵠⲆᐃ: new Date().getTime()
        };
        this.ⵠΔⵠᐃⲆ = [];
        this.ᐃΔΔⲆⵠΔⲆ = function (a) {
            for (var b = 0; this.ⵠΔⵠᐃⲆ.length > b; b++) {
                if (a == this.ⵠΔⵠᐃⲆ[b]) {
                    return Ar;
                }
            }
            return Gj;
        };
        this.ᐃⲆⲆⵠⲆ = {
            ΔⵠⵠⲆΔ: 0,
            time: 0,
            value: 0,
            open: false,
            ⵠⵠΔΔ: function () {
                if (this.open) {
                    var a = new Date().getTime();
                    this.time = Math.floor((a - this.ΔⵠⵠⲆΔ) / 1000);
                    if (this.time < 60) {
                        $w.ᐃⲆⲆⵠⲆ.button.ⵠⵠΔΔ(In);
                    } else {
                        document.getElementById("shop_starterkit").style.display = "none";
                        this.open = false;
                    }
                }
            }
        };
        this.ΔᐃᐃΔΔ = {
            id: -1,
            ⲆⵠΔⵠ: -1,
            lock: 0,
            timeout: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0, 1, 0, 1 / 30, 1),
            wait: pl
        };
        this.ⲆΔⵠΔΔ = {
            timeout: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0, 1, 0, 1 / 5, 1),
            wait: pn
        };
        this.ⵠᐃΔⵠⵠ = {
            timeout: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0, 1, 0, 1, 1),
            wait: Sh
        };
        this.ᐃᐃᐃⲆᐃ = {
            timeout: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(Gj, 0, 1, 0, 1 / 10, 1),
            wait: Qr
        };
        this.ᐃⵠⵠ = new ΔⲆⲆⵠ.ⵠⲆⲆᐃᐃⵠΔ(ΔⲆⲆⵠ.ⵠΔⵠⲆΔⵠⲆ, 0, 0.4, 0, 0, jq, kq, jq, kq);
        this.ᐃⵠⵠ.ΔⵠⵠⲆΔ = 0;
        this.ᐃⵠⵠ.ⵠΔⵠⲆΔΔᐃ = 0;
        this.ᐃⵠⵠ.ⲆᐃΔ = function () {
            if (this.ⵠΔⵠⲆΔΔᐃ > 0) {
                this.ⵠΔⵠⲆΔΔᐃ -= Af;
            } else {
                var a = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ];
                if (a) {
                    this.ΔⵠⵠⲆΔ = 0;
                    var b = Math.max(Math.min(jq - a.x, -2), 2 - Cf.w + Rn);
                    var c = Math.max(Math.min(kq - a.y, -2), -Cf.ⵠⲆⵠ + 2 + iq);
                    this.ⲆⵠᐃᐃᐃⲆΔ({
                        x: b,
                        y: c
                    });
                } else {
                    this.ΔⵠⵠⲆΔ += Af;
                    if (this.ΔⵠⵠⲆΔ > 3) {
                        this.ΔⵠⵠⲆΔ = 0;
                        if (!Yw.reconnect.enabled) {
                            ΔᐃⵠⲆ.ΔⲆⲆᐃⵠᐃᐃΔⲆ();
                        }
                    }
                }
            }
        };
        this.ᐃⵠⵠ.w = screen.width;
        this.ᐃⵠⵠ.ⵠⲆⵠ = screen.height;
        this.ᐃⵠⵠ.ΔᐃΔᐃᐃⵠⵠ = this.ᐃⵠⵠ.w;
        this.ᐃⵠⵠ.ΔΔⲆᐃᐃᐃᐃ = this.ᐃⵠⵠ.ⵠⲆⵠ;
        this.ᐃⵠⵠ.rx = 0;
        this.ᐃⵠⵠ.ry = 0;
        this.ᐃⵠⵠ.ΔΔΔⲆⲆⵠᐃⲆᐃ = 0;
        this.ᐃⵠⵠ.ⲆᐃᐃⲆⲆⲆᐃⵠΔ = 0;
        this.ᐃⵠⵠ.ⵠᐃΔΔⲆ = function (a, b) {
            this.x = -Math.min(Math.max(-Cf.ⵠⵠⵠⵠΔᐃΔ * 2, a - Cf.ⵠⵠⵠⵠΔᐃΔ - this.ΔᐃΔᐃᐃⵠⵠ / 2), Cf.w - this.ΔᐃΔᐃᐃⵠⵠ);
            this.y = -Math.min(Math.max(-Cf.ⲆΔⵠᐃΔⵠⵠ * 2, b - (Cf.ⲆΔⵠᐃΔⵠⵠ + this.ΔΔⲆᐃᐃᐃᐃ) / 2), Cf.ⵠⲆⵠ - this.ΔΔⲆᐃᐃᐃᐃ + Cf.ⲆΔⵠᐃΔⵠⵠ);
            this.ᐃΔⲆⲆⵠ = this.x;
            this.ⵠᐃⵠⵠᐃΔΔ = this.y;
        };
        this.control = {
            angle: 0,
            timeout: 0,
            ᐃⲆⲆᐃⲆΔΔ: 0,
            ⲆⵠΔΔ: 0,
            attack: 0,
            ⲆᐃΔ: function () {
                var a = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ];
                if (a) {
                    var b = {
                        x: Yw.ᐃⵠⵠ.x + a.x,
                        y: Yw.ᐃⵠⵠ.y + a.y
                    };
                } else {
                    b = Yn;
                }
                var c = ΔⲆⲆⵠ.ᐃᐃⲆΔⲆⲆⲆ(Pf.ΔⲆⲆᐃ, b);
                var d = false;
                this.ⲆⵠΔΔ += Af;
                if (!Pf.state) {
                    if (a && !(a.action & kw.ΔⵠⲆᐃΔⵠⵠ) && this.ⲆⵠΔΔ > ow.ΔⵠⲆᐃΔⵠⵠ) {
                        this.attack = 1;
                        d = R;
                        this.ⲆⵠΔΔ = 0;
                        ΔᐃⵠⲆ.ⵠⲆΔᐃⵠⲆⲆⵠΔ(c);
                    }
                }
                if (a) {
                    a.angle = c;
                    a.ⲆΔⲆΔⵠΔᐃ = c;
                }
                if (!d) {
                    this.timeout += Af;
                    if (this.timeout > ow.ⵠΔⲆⵠⲆⲆᐃ) {
                        this.timeout = 0;
                        if (Math.abs(this.angle - c) > 0.005) {
                            ΔᐃⵠⲆ.ⵠⲆᐃᐃⵠΔᐃⵠᐃ(c);
                            this.angle = c;
                        }
                    }
                }
                if (!Yw.ᐃⵠⵠⵠΔ.open && !Yw.ⵠΔΔΔⲆ.open) {
                    var e = 0;
                    if (wf.ΔⲆΔⲆᐃᐃΔ()) {
                        e |= 1;
                    }
                    if (wf.ΔΔᐃᐃⲆΔⲆ()) {
                        e |= 2;
                    }
                    if (wf.ⵠᐃⵠⲆΔⲆⲆ()) {
                        e |= 4;
                    }
                    if (wf.ⵠᐃⵠᐃΔⲆΔ()) {
                        e |= 8;
                    }
                    if (this.ᐃⲆⲆᐃⲆΔΔ != e) {
                        ΔᐃⵠⲆ.ᐃΔⲆΔⲆΔᐃⵠΔ(e);
                    }
                    this.ᐃⲆⲆᐃⲆΔΔ = e;
                }
            }
        };
        this.ᐃΔᐃᐃ = {
            c: 1,
            ᐃᐃᐃⲆ: 1,
            ⵠⲆⵠ: 1,
            ⲆⲆᐃ: 1,
            ⵠⲆᐃ: 1,
            ⲆΔⲆⵠⵠᐃᐃ: 1,
            ⵠⵠⵠΔΔᐃᐃ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(true, 0, 1, 0, 3, 3),
            ⲆⲆⵠᐃΔΔⵠ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(bg, 0, 1, 0, 2, 2),
            ΔΔⲆⲆΔⲆΔ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(jk, 0, 1, 0, 3, 3),
            ⵠⵠⵠΔⵠⲆⲆ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(Ha, 0, 1, 0, 3, 3),
            ΔΔΔⵠᐃΔⲆ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(f, 0, 1, 0, 3, 3),
            ΔᐃΔᐃᐃΔΔ: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(al, 0, 1, 0, 3, 3),
            ΔⲆᐃⵠᐃ: new ΔⲆⲆⵠ.ⵠⲆΔⲆⲆ(ΔⲆⲆⵠ.ⵠΔⵠⲆΔⵠⲆ, 0, 1, 0, 0, 1),
            ⲆⵠΔΔⲆ: new ΔⲆⲆⵠ.ⵠⲆΔⲆⲆ(ΔⲆⲆⵠ.ⵠΔⵠⲆΔⵠⲆ, 0, 1, 0, 0, 1),
            ⵠⲆᐃΔΔΔⲆ: new ΔⲆⲆⵠ.ⵠⲆΔⲆⲆ(ΔⲆⲆⵠ.ⵠΔⵠⲆΔⵠⲆ, 0, 1, 0, 0, 1),
            ᐃΔⲆΔⲆⲆΔ: new ΔⲆⲆⵠ.ⵠⲆΔⲆⲆ(ΔⲆⲆⵠ.ⵠΔⵠⲆΔⵠⲆ, 0, 1, 0, 0, 1),
            ⵠΔⲆΔΔⲆΔ: new ΔⲆⲆⵠ.ⵠⲆΔⲆⲆ(ΔⲆⲆⵠ.ⵠΔⵠⲆΔⵠⲆ, 0, 1, 0, 0, 1),
            ΔⵠΔⲆⵠ: new ΔⲆⲆⵠ.ⵠⲆΔⲆⲆ(ΔⲆⲆⵠ.ⵠΔⵠⲆΔⵠⲆ, 0, 1, 0, 0, 1),
            ⲆᐃΔ: function () {
                this.ⵠⵠⵠΔΔᐃᐃ.ⲆᐃΔ();
                this.ⲆⲆⵠᐃΔΔⵠ.ⲆᐃΔ();
                this.ΔΔⲆⲆΔⲆΔ.ⲆᐃΔ();
                this.ⵠⵠⵠΔⵠⲆⲆ.ⲆᐃΔ();
                this.ΔΔΔⵠᐃΔⲆ.ⲆᐃΔ();
                this.ΔᐃΔᐃᐃΔΔ.ⲆᐃΔ();
                this.ΔⲆᐃⵠᐃ.ⲆⵠᐃᐃᐃⲆΔ(this.c);
                this.ⲆⵠΔΔⲆ.ⲆⵠᐃᐃᐃⲆΔ(this.ᐃᐃᐃⲆ);
                this.ⵠⲆᐃΔΔΔⲆ.ⲆⵠᐃᐃᐃⲆΔ(this.ⵠⲆⵠ);
                this.ᐃΔⲆΔⲆⲆΔ.ⲆⵠᐃᐃᐃⲆΔ(this.ⲆⲆᐃ);
                this.ⵠΔⲆΔΔⲆΔ.ⲆⵠᐃᐃᐃⲆΔ(this.ⵠⲆᐃ);
                this.ΔⵠΔⲆⵠ.ⲆⵠᐃᐃᐃⲆΔ(this.ⲆΔⲆⵠⵠᐃᐃ);
            }
        };
        this.ⲆΔⵠΔⲆΔᐃ = false;
        this.ΔⵠΔⲆΔⵠΔ = false;
        this.ᐃᐃⲆⵠᐃ = false;
        this.ⲆⵠⵠΔⵠⵠᐃ = false;
        this.ⵠᐃΔᐃ = {
            max: qw.ⲆⵠⲆᐃΔᐃᐃ,
            ⲆΔΔⵠΔⲆᐃ: 0,
            ⲆⲆᐃⵠⲆ: 0,
            ᐃⵠᐃ: [],
            ⵠᐃⲆⵠᐃ: [],
            ΔⲆΔⲆᐃⲆΔ: function (a, b) {
                if (a === 1) {
                    this.ⲆⲆᐃⵠⲆ = qw.ⲆᐃΔᐃᐃᐃᐃᐃᐃ;
                }
                this.ⲆΔΔⵠΔⲆᐃ += b;
                this.max = qw.ⲆⵠⲆᐃΔᐃᐃ + this.ⲆΔΔⵠΔⲆᐃ + this.ⲆⲆᐃⵠⲆ;
            },
            ⵠⲆⵠⵠⲆΔⲆ: {
                item: -1,
                ᐃⵠ: null,
                ΔⵠⵠΔᐃ: 0,
                ⵠⵠᐃᐃΔΔⲆ: 0,
                ᐃᐃⲆΔᐃ: -1,
                ⵠⲆΔΔⵠ: -1,
                ⲆᐃΔΔᐃ: function (a) {
                    if (!!this.ΔⵠⵠΔᐃ && (a.x !== this.ᐃᐃⲆΔᐃ || a.y !== this.ⵠⲆΔΔⵠ)) {
                        this.ⵠⵠᐃᐃΔΔⲆ = 1;
                    }
                },
                start: function (a, b) {
                    this.ᐃᐃⲆΔᐃ = b.x;
                    this.ⵠⲆΔΔⵠ = b.y;
                    this.item = a;
                    this.ᐃⵠ = Yw.ⵠᐃΔᐃ.ⵠᐃⲆⵠᐃ[a].info.ᐃⵠ[2];
                    this.ΔⵠⵠΔᐃ = 1;
                },
                stop: function () {
                    this.ΔⵠⵠΔᐃ = 0;
                    this.ⵠⵠᐃᐃΔΔⲆ = 0;
                    this.ᐃᐃⲆΔᐃ = -1;
                    this.ⵠⲆΔΔⵠ = -1;
                },
                release: function () {
                    var a = -1;
                    var b = Yw.ⵠᐃΔᐃ.ⵠᐃⲆⵠᐃ;
                    var c = 0;
                    if (this.ΔⵠⵠΔᐃ && this.ⵠⵠᐃᐃΔΔⲆ) {
                        for (var d = 0; d < b.length; d++) {
                            if (b[d].info.state === Xv) {
                                a = d;
                                break;
                            }
                        }
                        if (a !== -1 && a !== this.item && b[this.item]) {
                            c = 1;
                            var f = b[a];
                            b[a] = b[this.item];
                            b[this.item] = f;
                            $w.ᐃⵠⵠΔⵠΔΔ();
                        }
                    }
                    this.stop();
                    return c;
                },
                ⵠⵠΔΔ: function (a, b) {
                    if (this.ΔⵠⵠΔᐃ && this.ⵠⵠᐃᐃΔΔⲆ) {
                        Mc(In, this.ᐃⵠ, Math.floor(a - this.ᐃⵠ.width / 2), Math.floor(b - this.ᐃⵠ.height / 2));
                    }
                }
            },
            ᐃⵠᐃⲆⵠᐃᐃⲆᐃ: function (a) {
                for (d = 0; d < a.length; d++) {
                    if (this.ᐃⵠᐃ[a[d][0]] == a[d][1]) {
                        return true;
                    }
                }
                return pn;
            },
            ⵠΔⲆⵠΔ: function (a) {
                for (var b = 0; b < this.ⵠᐃⲆⵠᐃ.length; b++) {
                    if (this.ⵠᐃⲆⵠᐃ[b].id == a) {
                        return b;
                    }
                }
                return -1;
            },
            ⵠΔⵠᐃⲆⲆΔ: function (a, b) {
                this.ᐃⵠᐃ[a] = 0;
                this.ⵠᐃⲆⵠᐃ.splice(b, 1);
                $w.ᐃⵠⵠΔⵠΔΔ();
            },
            ΔⲆᐃⲆⲆᐃⲆ: function (a, b, c) {
                ⲆᐃΔ = true;
                this.ᐃⵠᐃ[a] = Math.max(0, this.ᐃⵠᐃ[a] - b);
                if (!this.ᐃⵠᐃ[a] && c >= 0) {
                    this.ⵠΔⵠᐃⲆⲆΔ(a, c);
                }
            }
        };
        this.ᐃΔᐃᐃⵠ = {
            enabled: false,
            translate: {
                y: 0,
                x: 0
            },
            ΔᐃΔⲆⲆΔᐃ: function () {
                if (Cf.mode == qw.ⲆΔⲆΔⲆΔΔ && !Yw.ΔⵠΔⲆΔⵠΔ) {
                    Yw.ᐃΔᐃᐃⵠ.enabled = !Yw.ᐃΔᐃᐃⵠ.enabled;
                    if (Yw.ᐃΔᐃᐃⵠ.enabled) {
                        $w.options.ΔⲆΔⵠᐃⵠᐃ.display = "inline-block";
                    } else {
                        $w.options.ΔⲆΔⵠᐃⵠᐃ.display = "none";
                    }
                }
            }
        };
        $w.options.ΔⲆΔⵠᐃⵠᐃ.display = "none";
        this.ᐃⲆᐃΔᐃ = {
            enabled: false,
            translate: {
                x: 0,
                y: 0
            },
            ΔⵠⵠⲆΔ: 0,
            ΔᐃΔⲆⲆΔᐃ: function () {
                Yw.ᐃⲆᐃΔᐃ.enabled = !Yw.ᐃⲆᐃΔᐃ.enabled;
                if (Yw.ᐃⲆᐃΔᐃ.enabled) {
                    $w.options.ᐃⵠΔΔᐃⲆⲆ.display = "inline-block";
                } else {
                    $w.options.ᐃⵠΔΔᐃⲆⲆ.display = "none";
                }
            },
            ⲆᐃΔ: function () {
                if (!!this.enabled && Yw.ⲆⵠᐃΔ.id < 0 && !$w.Ⲇᐃⵠⵠ.open) {
                    this.ΔⵠⵠⲆΔ += Af;
                    if (this.ΔⵠⵠⲆΔ > 2) {
                        this.ΔⵠⵠⲆΔ = 0;
                        if (Yw.ᐃΔᐃᐃ.ⵠⲆⵠ < 0.35) {
                            if (Yw.ⵠᐃΔᐃ.ᐃⵠᐃ[110]) {
                                ΔᐃⵠⲆ.ΔⵠⲆᐃΔ(110, Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(110));
                            } else if (Yw.ⵠᐃΔᐃ.ᐃⵠᐃ[192]) {
                                ΔᐃⵠⲆ.ΔⵠⲆᐃΔ(192, Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(192));
                            } else if (Yw.ⵠᐃΔᐃ.ᐃⵠᐃ[196]) {
                                ΔᐃⵠⲆ.ΔⵠⲆᐃΔ(196, Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(196));
                            } else if (Yw.ⵠᐃΔᐃ.ᐃⵠᐃ[189]) {
                                ΔᐃⵠⲆ.ΔⵠⲆᐃΔ(189, Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(189));
                            } else if (Yw.ⵠᐃΔᐃ.ᐃⵠᐃ[207]) {
                                ΔᐃⵠⲆ.ΔⵠⲆᐃΔ(207, Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(207));
                            } else if (Yw.ⵠᐃΔᐃ.ᐃⵠᐃ[205]) {
                                ΔᐃⵠⲆ.ΔⵠⲆᐃΔ(205, Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(205));
                            } else if (Yw.ⵠᐃΔᐃ.ᐃⵠᐃ[209]) {
                                ΔᐃⵠⲆ.ΔⵠⲆᐃΔ(209, Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(209));
                            } else if (Yw.ⵠᐃΔᐃ.ᐃⵠᐃ[143]) {
                                ΔᐃⵠⲆ.ΔⵠⲆᐃΔ(143, Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(143));
                            } else if (Yw.ⵠᐃΔᐃ.ᐃⵠᐃ[117]) {
                                ΔᐃⵠⲆ.ΔⵠⲆᐃΔ(117, Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(117));
                            } else if (Yw.ⵠᐃΔᐃ.ᐃⵠᐃ[138]) {
                                ΔᐃⵠⲆ.ΔⵠⲆᐃΔ(138, Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(138));
                            } else if (Yw.ⵠᐃΔᐃ.ᐃⵠᐃ[133]) {
                                ΔᐃⵠⲆ.ΔⵠⲆᐃΔ(133, Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(133));
                            } else if (Yw.ⵠᐃΔᐃ.ᐃⵠᐃ[145]) {
                                ΔᐃⵠⲆ.ΔⵠⲆᐃΔ(145, Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(145));
                            } else if (Yw.ⵠᐃΔᐃ.ᐃⵠᐃ[136]) {
                                ΔᐃⵠⲆ.ΔⵠⲆᐃΔ(136, Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(136));
                            } else if (Yw.ⵠᐃΔᐃ.ᐃⵠᐃ[197]) {
                                ΔᐃⵠⲆ.ΔⵠⲆᐃΔ(197, Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(197));
                            }
                        } else if (Yw.ᐃΔᐃᐃ.ⲆⲆᐃ < 0.35 && Yw.ⵠᐃΔᐃ.ᐃⵠᐃ[127]) {
                            ΔᐃⵠⲆ.ΔⵠⲆᐃΔ(127, Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(127));
                        }
                    }
                }
            }
        };
        $w.options.ᐃⵠΔΔᐃⲆⲆ.display = "none";
        this.ⲆⵠᐃΔ = {
            id: -1,
            ⲆΔᐃᐃ: -1,
            timeout: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0, 1, 0, 1, 1),
            ⲆⵠⵠⲆⵠ: false,
            ΔⵠⲆᐃ: -1,
            mode: 0,
            label: [],
            ⵠᐃⵠᐃᐃ: [],
            ⵠᐃⵠΔⵠ: false,
            ⵠᐃⲆΔᐃ: mg,
            ⲆᐃⵠΔΔⵠΔ: false,
            ⲆᐃⵠⲆⵠ: tr,
            ⲆΔΔⵠΔⲆⲆⲆᐃ: function () {
                this.mode = this.mode === 0 ? 1 : 0;
            },
            ⵠⵠᐃⵠᐃⲆΔⲆᐃ: function (a) {
                this.ⵠᐃⵠΔⵠ = a;
                var b = $w.Ⲇᐃⵠⵠ;
                if (b.open) {
                    b.ⲆⲆⵠⲆⵠⲆⵠ(b.button);
                }
                this.ⲆᐃΔ();
            },
            ᐃⵠᐃⵠᐃⲆΔⲆⵠ: function (a) {
                var b = Ls[a];
                this.id = a;
                this.ⲆⵠⵠⲆⵠ = gt;
                Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ];
                this.timeout.ⵠΔᐃⲆⵠᐃΔ = b.time * 8;
                this.ⲆΔᐃᐃ = b.ⲆΔᐃᐃ;
            },
            ⲆᐃᐃⲆᐃᐃⲆΔⵠ: function (a) {
                var b = Ls[a];
                this.id = a;
                this.ⲆⵠⵠⲆⵠ = true;
                var c = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ];
                if (c && c.right == 28) {
                    this.timeout.ⵠΔᐃⲆⵠᐃΔ = b.time * 3;
                } else {
                    this.timeout.ⵠΔᐃⲆⵠᐃΔ = b.time;
                }
                this.ⲆΔᐃᐃ = b.ⲆΔᐃᐃ;
                for (var d = 0; d < b.r.length; d++) {
                    var e = b.r[d];
                    Yw.ⵠᐃΔᐃ.ΔⲆᐃⲆⲆᐃⲆ(e[0], e[1], Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(e[0]));
                }
                $w.ᐃⵠⵠΔⵠΔΔ();
            },
            ⲆᐃΔ: function () {
                this.ⵠᐃⵠᐃᐃ = [];
                if ($w.ⲆⲆᐃΔⲆ.ⲆⵠᐃΔ === 1) {
                    $w.ⲆⲆᐃΔⲆ.display = 0;
                }
                for (var a in Ls) {
                    var b = Ls[a];
                    var c = true;
                    if (b.r) {
                        for (var d = 0; d < b.r.length; d++) {
                            if (Yw.ⵠᐃΔᐃ.max >= qw.ΔΔⲆⵠⲆᐃΔ && b.id === 100) {
                                c = tr;
                                break;
                            }
                            if (b.w > this.ⵠᐃⵠΔⵠ || b.f > this.ⵠᐃⲆΔᐃ || b.ⵠⲆᐃ > this.ⲆᐃⵠΔΔⵠΔ || b.e > this.ⲆᐃⵠⲆⵠ) {
                                c = ug;
                                break;
                            }
                            var f = b.r[d];
                            if (!Yw.ⵠᐃΔᐃ.ᐃⵠᐃ[f[0]] || Yw.ⵠᐃΔᐃ.ᐃⵠᐃ[f[0]] < f[1]) {
                                c = false;
                                break;
                            }
                        }
                        if (c) {
                            this.ⵠᐃⵠᐃᐃ.push($w.ᐃᐃᐃ[b.id]);
                        }
                    }
                }
                $w.ΔΔⲆⵠᐃⲆⵠ();
                $w.ⵠⵠⲆⵠΔΔΔ();
                $w.ᐃⲆᐃᐃⵠⲆⲆ();
                $w.ΔⵠΔⲆΔⲆΔ();
                $w.ᐃᐃⵠΔⲆⲆⵠ();
                $w.ᐃⵠᐃΔⲆⲆΔ();
                $w.sign.ⵠᐃⲆᐃⲆⲆᐃ();
            },
            ᐃᐃⵠⲆⵠᐃⵠ: function () {
                this.id = -1;
                this.ⲆⵠⵠⲆⵠ = js;
                this.timeout.ΔⲆⲆ = 0;
                this.timeout.ⵠⲆᐃ = Sh;
                this.ⲆᐃΔ();
            }
        };
        this.ⲆᐃᐃΔⵠⵠᐃ = {
            message: uj,
            ⵠⵠΔΔ: fv
        };
        this.alert = {
            timeout: new ΔⲆⲆⵠ.ⵠΔᐃⵠ(rj, 1, 1, 0, 4, 0.3),
            text: "",
            label: null,
            ⵠⵠΔΔ: hv,
            list: []
        };
        this.ⵠΔΔΔⵠ = {
            Ⲇᐃ: document.createElement("canvas"),
            ᐃⵠΔΔⵠ: [],
            ⲆᐃΔ: true,
            translate: {
                y: 0,
                x: 0
            },
            sort: function () {
                var a = [];
                for (var b = Cf.ΔᐃᐃΔ, c = 0; c < b.length; c++) {
                    if (b[c].ⵠⲆⵠᐃᐃ) {
                        a.push({
                            id: c,
                            ⵠΔⵠΔ: b[c].ⵠⵠᐃΔⵠ
                        });
                    }
                }
                a.sort(function (a, b) {
                    return b.ⵠΔⵠΔ - a.ⵠΔⵠΔ;
                });
                this.ᐃⵠΔΔⵠ = [];
                for (c = 0; c < a.length && c < 10; c++) {
                    this.ᐃⵠΔΔⵠ.push(a[c].id);
                }
                this.ⲆᐃΔ = true;
            },
            ⵠΔⵠⲆⲆ: function (a) {
                for (var b = Cf.ΔᐃᐃΔ, c = 0; c < b.length; c++) {
                    b[c].ⵠⵠᐃΔⵠ = 0;
                }
                b[Yw.id].ⵠⵠᐃΔⵠ = ΔⲆⲆⵠ.ΔᐃΔⲆᐃᐃⲆ(a[1]);
                this.ᐃⵠΔΔⵠ = [];
                for (c = 2; c < a.length; c += 2) {
                    this.ᐃⵠΔΔⵠ.push(a[c]);
                    b[a[c]].ⵠⵠᐃΔⵠ = ΔⲆⲆⵠ.ΔᐃΔⲆᐃᐃⲆ(a[c + 1]);
                }
                this.ⲆᐃΔ = true;
            }
        };
        this.ⵠΔΔΔⵠ.Ⲇᐃ.width = mq * 180;
        this.ⵠΔΔΔⵠ.Ⲇᐃ.height = mq * 300;
        this.ⵠΔΔΔⵠ.ᐃ = this.ⵠΔΔΔⵠ.Ⲇᐃ.getContext("2d");
        this.ⵠΔΔΔⲆ = {
            open: false,
            input: document.getElementById("commandInput"),
            ⵠᐃⵠᐃⲆΔᐃ: document.getElementById("commandsBox"),
            style: document.getElementById("commandMainBox").style,
            ΔⲆⲆᐃⲆⲆⵠⵠΔ: function (a) {
                this.ⵠᐃⵠᐃⲆΔᐃ.innerHTML += a;
            },
            ⲆᐃΔ: function () {
                this.style.left = Math.floor(Rn / 2 - 300) + "px";
                this.style.top = Math.floor(iq / 2 - 250) + "px";
            },
            ᐃⲆⵠΔΔⲆΔᐃᐃ: function () {
                this.ⵠᐃⵠᐃⲆΔᐃ.innerHTML = "";
            },
            ⲆᐃᐃΔᐃ: function () {
                this.open = false;
                this.style.display = "none";
            },
            ⵠᐃⵠⵠᐃⵠⲆ: function (a) {
                var b = "<table class=\"tableList\">";
                for (var c = 0; c < a.length; c++) {
                    if (c % 3 === 0) {
                        b += "<tr>";
                    }
                    b += "<td class=\"tableList\">" + a[c] + "</td>";
                    if ((c + 1) % 3 == 0 || c + 1 === a.length) {
                        b += "</tr>";
                    }
                }
                return b += "</table>";
            },
            ᐃΔΔⲆᐃ: function (a, b, c, d) {
                d = d || "";
                var f = "<div class=commandWritten>" + (a = a || "");
                f += (b = b || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
                f += (c = c || "") + "</div>" + d + "</div>";
                this.ΔⲆⲆᐃⲆⲆⵠⵠΔ(f);
                this.ⲆᐃΔⵠΔΔⵠᐃᐃ();
            },
            ⲆᐃΔⵠΔΔⵠᐃᐃ: function () {
                this.ⵠᐃⵠᐃⲆΔᐃ.scrollTop = this.ⵠᐃⵠᐃⲆΔᐃ.scrollHeight;
            },
            ⵠᐃΔⵠⲆⲆᐃ: function (b) {
                switch (b) {
                    case "clean":
                        this.ᐃⲆⵠΔΔⲆΔᐃᐃ();
                        return true;
                    case "list":
                        var c = "";
                        const a = bj.document.createElement("div");
                        for (var d = Cf.ΔᐃᐃΔ, f = 0; f < d.length; f++) {
                            var g = d[f];
                            if (g.ⵠⲆⵠᐃᐃ) {
                                a.innerText = g.Δᐃⵠⵠᐃ;
                                c += a.innerHTML + " <span style=\"color:green\">#" + f + "</span><br />";
                            }
                        }
                        this.ᐃΔΔⲆᐃ("list", 1, "List all connected players", c);
                        return bg;
                    case "weapon-list":
                        this.ᐃΔΔⲆᐃ("Weapons", 1, "List all weapons in the game", this.ⵠᐃⵠⵠᐃⵠⲆ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"]));
                        return true;
                    case "tool-list":
                        this.ᐃΔΔⲆᐃ("Tools", 1, "List all tools in the game", this.ⵠᐃⵠⵠᐃⵠⲆ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
                        return Ha;
                    case "survival-list":
                        this.ᐃΔΔⲆᐃ("Survival Items", 1, "List all survival items in the game", this.ⵠᐃⵠⵠᐃⵠⲆ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
                        return R;
                    case "resource-list":
                        this.ᐃΔΔⲆᐃ("Resources", 1, "List all resources in the game", this.ⵠᐃⵠⵠᐃⵠⲆ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
                        return hi;
                    case "food-list":
                        this.ᐃΔΔⲆᐃ("Food", 1, "List all food in the game", this.ⵠᐃⵠⵠᐃⵠⲆ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
                        return hi;
                    case "hat-list":
                        this.ᐃΔΔⲆᐃ("Hats", 1, "List all hats in the game", this.ⵠᐃⵠⵠᐃⵠⲆ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
                        return Ha;
                    case "building-list":
                        this.ᐃΔΔⲆᐃ("Buildings", 1, "List all buildings in the game", this.ⵠᐃⵠⵠᐃⵠⲆ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
                        return true;
                    case "biome-list":
                        this.ᐃΔΔⲆᐃ("Biomes list", 1, "List all available biomes in the game", this.ⵠᐃⵠⵠᐃⵠⲆ(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
                        return true;
                    case "help-config":
                        this.ᐃΔΔⲆᐃ("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
                        return gt;
                    case "pos":
                        d = Cf.Δᐃⵠ[tw.ⵠᐃᐃⵠΔ];
                        f = 0;
                        for (; f < d.length; f++) {
                            var e = d[f];
                            if (e.ⲆⵠΔⵠ === Yw.id) {
                                this.ᐃΔΔⲆᐃ("pos", 1, "Your position is " + Math.floor(e.x / 100) + ":" + Math.floor(e.y / 100));
                                return al;
                            }
                        }
                        break;
                    case "help-admin":
                        this.ᐃΔΔⲆᐃ("help-admin", 1, "List all available commands for admin only", this.ⵠᐃⵠⵠᐃⵠⲆ(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
                        return dh;
                    case "help":
                        this.ᐃΔΔⲆᐃ("help", 1, "List all available commands", this.ⵠᐃⵠⵠᐃⵠⲆ(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
                        return Ha;
                }
                return false;
            },
            ⲆᐃΔⲆΔⵠΔⲆᐃ: function () {
                if (!this.open) {
                    this.open = true;
                    this.style.display = "inline-block";
                    this.input.focus();
                }
            },
            ⵠⵠⵠΔⲆᐃΔ: function () {
                var a = this.input.value;
                if (a && a.length > 0) {
                    if (!this.ⵠᐃΔⵠⲆⲆᐃ(a)) {
                        ΔᐃⵠⲆ.ᐃΔⲆᐃⲆⵠⵠΔᐃ(this.input.value);
                    }
                    this.input.value = "";
                }
            }
        };
        this.ᐃⵠⵠⵠΔ = {
            open: Ah,
            input: document.getElementById("chat_input"),
            style: document.getElementById("chat_block").style,
            ⲆᐃΔ: function () {
                this.style.left = Math.floor(Rn / 2 - 150) + "px";
                this.style.top = Math.floor(iq / 2 + 80) + "px";
            },
            ⲆᐃᐃΔᐃ: function () {
                this.open = Ro;
                this.style.display = "none";
                this.input.value = "";
            },
            prefix: "!",
            cmd: {
                hud: function (a) {
                    if (a === "off") {
                        var b = "Enter \"!hud\" without the quotes to restore the HUD";
                        if (Yw.alert.text) {
                            Yw.alert.list.push(b);
                        } else {
                            Yw.alert.text = b;
                        }
                        $w.ⲆᐃⵠⲆⵠΔⵠ = 0;
                    } else {
                        $w.ⲆᐃⵠⲆⵠΔⵠ = 1;
                    }
                }
            },
            ⵠᐃΔⵠⲆⲆᐃ: function (a) {
                if (a.charAt(0) == this.prefix) {
                    var b = "";
                    var c = "";
                    for (var d = 1; d < a.length && a.charAt(d) != " "; d++) {
                        b += a.charAt(d);
                    }
                    for (d++; d < a.length; d++) {
                        c += a.charAt(d);
                    }
                    var e = this.cmd[b];
                    if (e) {
                        e(c);
                    }
                    return hi;
                }
                return ia;
            },
            ᐃⲆⲆΔᐃ: function () {
                if (this.open) {
                    this.open = lj;
                    this.style.display = "none";
                    var a = this.input.value;
                    if (a) {
                        if (!this.ⵠᐃΔⵠⲆⲆᐃ(a)) {
                            ΔᐃⵠⲆ.ⵠⲆΔΔᐃᐃⲆⵠΔ(this.input.value);
                        }
                        this.input.value = "";
                    }
                } else {
                    this.open = true;
                    this.style.display = "inline-block";
                    this.input.focus();
                }
            }
        };
        this.ΔᐃᐃΔⵠᐃⲆ = {
            ΔᐃᐃΔⵠ: [],
            ⲆᐃΔ: function (a) {
                a.y += Af * 80 * a.ⵠΔⵠΔ;
                a.x += Af * 80 * a.c;
                a.ⲆⵠΔΔⲆ -= Af / 6;
                if (a.ⲆⵠΔΔⲆ > 0.2) {
                    a.alpha = Math.min(a.alpha + Af * 3, 1);
                } else {
                    a.alpha = Math.max(a.alpha - Af * 1, 0);
                }
            },
            add: function (b) {
                var c = Math.floor(Math.min(nr.ⵠⵠᐃⲆᐃⵠⵠ * (Rn / 1366), nr.ⵠⵠᐃⲆᐃⵠⵠ + 10) * Math.max(Math.min(Cf.ΔⵠΔⲆᐃ + 1000, 3000) / 3000, 0));
                if (this.ΔᐃᐃΔⵠ.length < c) {
                    var d = Math.floor(Math.random() * nr.ΔⵠᐃⵠᐃⵠΔ);
                    var e = -Yw.ᐃⵠⵠ.x + Math.floor(Math.random() * Yw.ᐃⵠⵠ.w);
                    var f = -Yw.ᐃⵠⵠ.y + Math.floor(Math.random() * Yw.ᐃⵠⵠ.ⵠⲆⵠ);
                    var g = Math.random(Math.PI);
                    this.ΔᐃᐃΔⵠ.push(new yw(d, e, f, g));
                }
            }
        };
        this.ᐃΔΔⵠⲆᐃᐃ = 0;
        this.ⵠⲆⲆⵠⲆ = 0;
        this.ᐃⲆΔⵠⵠ = {
            ΔᐃᐃΔⵠ: [],
            ᐃΔᐃⲆΔ: 0,
            ⵠⲆΔᐃⲆ: 0,
            ⲆᐃΔ: function (a) {
                a.y += Af * (200 + this.ⵠⲆΔᐃⲆ * 800) * a.ⵠΔⵠΔ;
                a.x += Af * (200 + this.ⵠⲆΔᐃⲆ * 800) * a.c;
                a.ⲆⵠΔΔⲆ -= Af / 6;
                if (a.ⲆⵠΔΔⲆ > 0.2) {
                    a.alpha = Math.min(a.alpha + Af * 3, 1);
                } else {
                    a.alpha = Math.max(a.alpha - Af * 1, 0);
                }
            },
            add: function (b) {
                var c = Math.floor(Math.min((this.ⵠⲆΔᐃⲆ + 0.1) * nr.ⲆⲆᐃⵠΔⵠᐃ * (Rn / 1366), (this.ⵠⲆΔᐃⲆ + 0.1) * nr.ⲆⲆᐃⵠΔⵠᐃ + 10) * Math.max(Math.min(Cf.ⵠᐃⵠⲆᐃ + 1000, 3000) / 3000, 0));
                if (this.ΔᐃᐃΔⵠ.length < c) {
                    var d = Math.floor(Math.random() * nr.ΔⵠᐃⵠᐃⵠΔ);
                    var e = -Yw.ᐃⵠⵠ.x + Math.floor(Math.random() * Yw.ᐃⵠⵠ.w);
                    var f = -Yw.ᐃⵠⵠ.y + Math.floor(Math.random() * Yw.ᐃⵠⵠ.ⵠⲆⵠ);
                    var g = Math.random(Math.PI);
                    if (Yw.ᐃⲆΔⵠⵠ.ᐃΔᐃⲆΔ !== 0) {
                        e -= Yw.ᐃⵠⵠ.w / 2;
                    }
                    this.ΔᐃᐃΔⵠ.push(new yw(d, e, f, g));
                }
            }
        };
        this.ᐃᐃΔⲆⵠ = {
            ΔᐃᐃΔⵠ: [],
            ᐃΔᐃⲆΔ: 0,
            ⵠⲆΔᐃⲆ: 0,
            ⲆᐃΔ: function (a) {
                if (wf.ⵠᐃⵠⲆΔⲆⲆ()) {
                    a.y += Af * a.ΔᐃΔⲆⲆ * (5.5 + this.ⵠⲆΔᐃⲆ * 10);
                } else {
                    a.y += Af * a.ΔᐃΔⲆⲆ * (5 + this.ⵠⲆΔᐃⲆ * 10);
                }
                a.ⲆⵠΔΔⲆ -= Af / 2;
                if (wf.ΔⲆΔⲆᐃᐃΔ()) {
                    a.x += Af * (100 + this.ⵠⲆΔᐃⲆ * 400);
                } else if (wf.ΔΔᐃᐃⲆΔⲆ()) {
                    a.x -= Af * (130 - this.ⵠⲆΔᐃⲆ * 400);
                } else {
                    a.x -= Af * (30 - this.ⵠⲆΔᐃⲆ * 400);
                }
                if (a.ⲆⵠΔΔⲆ > 0.2) {
                    a.alpha = Math.min(a.alpha + Af * 3, 1);
                } else {
                    a.alpha = Math.max(a.alpha - Af * 5, 0);
                }
            },
            add: function (a) {
                var b = Math.floor(Math.min((this.ⵠⲆΔᐃⲆ * 1.5 + 0.5) * nr.ᐃⵠⵠⵠⲆᐃᐃ * (Rn / 1366), (this.ⵠⲆΔᐃⲆ * 1.5 + 0.5) * nr.ᐃⵠⵠⵠⲆᐃᐃ + 10) * Math.max(Math.min(Cf.ⲆᐃᐃΔⲆ + 1000, 3000) / 3000, 0));
                if (this.ΔᐃᐃΔⵠ.length < b) {
                    var c = Math.floor(Math.random() * nr.ΔΔΔⵠΔⲆΔ);
                    var d = -Yw.ᐃⵠⵠ.x + Math.floor(Math.random() * Yw.ᐃⵠⵠ.w);
                    var e = -Yw.ᐃⵠⵠ.y + Math.floor(Math.random() * 400 * mq - mq * 200);
                    this.ΔᐃᐃΔⵠ.push(new yw(c, d, e, 0));
                }
            }
        };
        this.ⵠⵠᐃⲆ = [];
        for (var d = 0; d < 4; d++) {
            this.ⵠⵠᐃⲆ.push(new c());
        }
    }
    function Iw() {
        Math.random();
        return "s";
    }
    function Bw() {
        Math.random();
        return "o";
    }
    function Jw() {
        Math.random();
        return "e";
    }
    function Kw() {
        Math.random();
        return "C";
    }
    function Lw() {
        Math.random();
        return "g";
    }
    function Aw() {
        Math.random();
        return "a";
    }
    function zw() {
        Math.random();
        return "t";
    }
    ⵠΔᐃⵠⵠⲆⵠⵠⵠ = 1;
    setTimeout(function b() {
        var c = Dw() + Aw() + zw() + Cw();
        var d = function () {
            Math.random();
            return "W";
        }() + Jw() + function () {
            Math.random();
            return "b";
        }() + (Math.random(), "S") + Bw() + function () {
            Math.random();
            return "c";
        }() + function () {
            Math.random();
            return "k";
        }() + Jw() + zw();
        if (bj[d].toString().indexOf(c) === -1) {
            Math.floor = function () {
                return Math.round() + 1;
            };
        }
        var e = Iw() + Jw() + Dw() + Ew();
        var f = Gw() + Fw() + Bw() + zw() + Bw() + zw() + function () {
            Math.random();
            return "y";
        }() + Gw() + Jw();
        if (bj[d][f][e].toString().indexOf(c) === -1) {
            Math.floor = function () {
                return Math.round() + 1;
            };
        }
        d = Ew() + Fw() + Aw() + function () {
            Math.random();
            return "w";
        }() + function () {
            Math.random();
            return "I";
        }() + function () {
            Math.random();
            return "m";
        }() + Aw() + Lw() + Jw();
        e = Kw() + Aw() + Dw() + function () {
            Math.random();
            return "v";
        }() + Aw() + Iw() + (Math.random(), "R") + Jw() + Dw() + Ew() + Jw() + Fw() + Cw() + Dw() + Lw() + Kw() + Bw() + Dw() + zw() + Jw() + function () {
            Math.random();
            return "x";
        }() + zw() + function () {
            Math.random();
            return "2";
        }() + function () {
            Math.random();
            return "D";
        }();
        if (bj[e][f][d].toString().indexOf(c) === -1) {
            Math.floor = function () {
                return Math.round() + 1;
            };
        }
        setTimeout(b, 100000);
    }, 100000);
    function Mw(b, c) {
        this.Ⲇᐃ = b;
        this.ᐃ = c;
        var d = this;
        this.ⲆⵠΔⲆᐃⲆⵠ = false;
        this.ᐃⲆΔΔΔⲆⲆ = {
            id: document.getElementById("scoreboard"),
            style: document.getElementById("scoreboard").style,
            height: 0,
            translate: {
                y: 0,
                x: 0
            },
            ⲆᐃΔ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = this.translate.y + "px";
            },
            ⵠΔⵠⲆⲆ: function () {
                this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + Yw.ⲆⲆⵠⵠⲆⵠⲆ.ⵠᐃⲆᐃⲆΔⵠ + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + Xg[335] + " : " + Yw.Ⲇⵠᐃ + "</div><div class=\"stats\"> " + Xg[334] + " : " + Yw.ⲆⲆⵠⵠⲆⵠⲆ.ᐃᐃᐃᐃᐃ + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + Xg[333] + " : " + Yw.ⲆⲆⵠⵠⲆⵠⲆ.ⵠⵠᐃΔⵠ + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + Yw.ⲆⲆⵠⵠⲆⵠⲆ.ⵠⲆⵠΔⲆⲆⵠ + " " + Xg[332] + "</div></div><div id=\"shop_points\">" + Xg[331] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + Xg[329] + "</div><div class=\"social\" id=\"fffacebook\">" + Xg[330] + "</div></div><div id=\"bbback\">" + Xg[328] + "</div>";
                this.style.display = "inline-block";
                document.getElementById("tttwitter").addEventListener("mouseup", Pw, Gj);
                document.getElementById("bbback").addEventListener("mouseup", function () {
                    Zw.ⲆᐃᐃΔᐃ(mf.ᐃⲆⲆΔᐃ);
                }, false);
                document.getElementById("fffacebook").addEventListener("mouseup", Nw, mg);
                this.height = Math.floor(this.id.clientHeight / 2);
                (function () {
                    var a = new XMLHttpRequest();
                    a.open("GET", Ef + "getBreadAndScore?userid=" + ex);
                    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    a.onreadystatechange = function () {
                        if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
                            var b = JSON.parse(a.responseText);
                            var c = b.b - mf.ⲆᐃⲆᐃⵠ;
                            mf.ⲆᐃⲆᐃⵠ = b.b;
                            mf.ⵠⵠᐃΔⵠ = b.s;
                            mf.ⲆⲆΔΔⲆ = mf.ᐃᐃⲆⲆΔⵠⵠ(mf.ⵠⵠᐃΔⵠ);
                            mf.ⵠⲆⲆᐃΔΔⵠ = mf.ΔⵠⲆᐃᐃⲆⵠ(mf.ⵠⵠᐃΔⵠ);
                            mf.ⵠⵠΔⵠᐃΔΔ = 0;
                            document.getElementById("breadWonInner").innerHTML = "" + c;
                        }
                    };
                    a.send();
                })();
            }
        };
        var f;
        var g = 0;
        function e() {
            d.ⲆᐃΔ();
            if (++g != 30) {
                bj.setTimeout(e, 33);
            } else {
                d.ⲆᐃΔ();
            }
        }
        this.ⲆᐃᐃΔᐃ = function (a) {
            if (d.ⲆⵠΔⲆᐃⲆⵠ === true) {
                d.ⲆⵠΔⲆᐃⲆⵠ = false;
                f = a;
                i = -1;
                j();
                Jf();
            }
        };
        var i = -1;
        function j() {
            d.ⲆᐃΔ();
            if (++i == 30) {
                d.stop();
                d.ᐃⲆΔΔΔⲆⲆ.style.display = "none";
                f();
                return;
            }
            bj.setTimeout(j, 33);
        }
        this.ᐃⵠⲆⵠⲆ = ql;
        this.stop = function () {
            this.ᐃⵠⲆⵠⲆ = ug;
        };
        this.ᐃⲆⲆΔᐃ = function () {
            cx();
            document.getElementById("game_body").style.backgroundColor = nr.ⲆⵠⲆⵠᐃ[Xw.time];
            d.ᐃⲆΔΔΔⲆⲆ.ⵠΔⵠⲆⲆ();
            mf.ΔⲆⲆΔΔ.style.display = "inline-block";
            d.ᐃⵠⲆⵠⲆ = true;
            d.ⲆⵠΔⲆᐃⲆⵠ = Go;
            i = -1;
            g = 0;
            e();
        };
        this.ⲆᐃΔ = function () {
            this.ᐃⲆΔΔΔⲆⲆ.translate.x = Math.floor(jq - 275);
            this.ᐃⲆΔΔΔⲆⲆ.translate.y = Math.floor(kq - this.ᐃⲆΔΔΔⲆⲆ.height - 28);
            mf.ΔⲆⲆΔΔ.translate.x = this.ᐃⲆΔΔΔⲆⲆ.translate.x - 350;
            mf.ΔⲆⲆΔΔ.translate.y = this.ᐃⲆΔΔΔⲆⲆ.translate.y + 0;
            mf.ΔⲆⲆΔΔ.ⲆᐃΔ();
            if (g != 30 || i != -1) {
                var a = 0;
                if (g != 30) {
                    a = 1500 / (g + 1) - 50;
                }
                if (i != -1) {
                    a = -(1750 / (30 - i + 1) - 48);
                }
                this.ᐃⲆΔΔΔⲆⲆ.translate.y -= a;
            }
            this.ᐃⲆΔΔΔⲆⲆ.ⲆᐃΔ();
        };
        this.ⵠⵠΔΔ = function () {
            ym();
            Yw.alert.ⵠⵠΔΔ("#FFF", "#000");
        };
    }
    function Nw() {
        ΔⲆⲆⵠ.ΔᐃᐃΔᐃⵠᐃ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
    }
    function Ow(c, f) {
        var j = this;
        this.Ⲇᐃ = c;
        this.ᐃ = f;
        if (bj.navigator.userAgent.indexOf("Edge") > -1) {
            this.ⵠᐃΔⵠΔⲆⲆ = "default";
            this.ⵠΔⵠΔⵠⲆΔ = "pointer";
        } else {
            this.ⵠᐃΔⵠΔⲆⲆ = "url('img/cursor0.png'), default";
            this.ⵠΔⵠΔⵠⲆΔ = "url('img/cursor1.png'), pointer";
        }
        this.ⲆᐃⵠⲆⵠΔⵠ = 1;
        this.ΔΔΔᐃΔΔⲆ = 1;
        this.ΔⲆΔΔⲆⲆᐃ = 1;
        this.ᐃΔΔⲆΔⵠᐃ = 1;
        this.ⵠΔⲆᐃᐃⲆᐃⵠⲆ = {
            id: document.getElementById("team_box"),
            style: document.getElementById("team_box").style,
            ⲆᐃΔ: function () {
                this.style.left = Math.floor(jq - 125) + "px";
                this.style.top = "110px";
            }
        };
        this.ᐃⲆᐃΔ = {
            ⲆⵠᐃⲆΔⵠᐃ: $v(60, 60, 0, ᐃΔ[782]),
            ⵠⵠΔΔⵠΔⲆ: $v(60, 60, 0, ᐃΔ[783])
        };
        this.sign = {
            open: false,
            ΔΔΔⵠⵠⵠᐃⵠΔ: 0,
            ⵠΔⲆⲆᐃⲆⲆ: document.getElementById("sign_object"),
            ⵠᐃⲆᐃⵠΔⵠ: 0,
            id: document.getElementById("sign_window"),
            style: document.getElementById("sign_window").style,
            button: $v(60, 60, 0, ᐃΔ[803]),
            ⵠᐃⲆᐃⲆⲆᐃ: function () {
                var a = Math.floor(Math.floor((3 + Yw.ⲆⵠᐃΔ.ⵠᐃⵠᐃᐃ.length) / 4) * (10 + ᐃΔ[316][0].width) + 35);
                this.button.info.translate.x = a;
                this.button.info.translate.y = 22;
            },
            ⲆᐃΔ: function () {
                this.style.left = Math.floor(jq - 150) + "px";
                this.style.top = Math.floor(kq - 115) + "px";
            },
            ⲆᐃᐃΔᐃ: function () {
                $w.sign.style.display = "none";
                $w.sign.open = false;
            },
            select: function () {
                $w.sign.open = !$w.sign.open;
                if ($w.sign.open) {
                    $w.sign.style.display = "inline-block";
                } else {
                    $w.sign.style.display = "none";
                }
            },
            ok: function () {
                ΔᐃⵠⲆ.ⵠⲆⵠⲆΔΔΔⲆᐃ(Yw.sign.ᐃΔⲆᐃⲆ, $w.sign.ⵠᐃⲆᐃⵠΔⵠ);
                $w.sign.select();
            },
            up: function () {
                $w.sign.ⵠᐃⲆᐃⵠΔⵠ = $w.sign.ⵠᐃⲆᐃⵠΔⵠ === 0 ? ow.ΔᐃᐃⵠⲆᐃΔ - 1 : $w.sign.ⵠᐃⲆᐃⵠΔⵠ - 1;
                $w.sign.ⵠΔⲆⲆᐃⲆⲆ.src = "./img/sign" + $w.sign.ⵠᐃⲆᐃⵠΔⵠ + ".png";
            },
            down: function () {
                $w.sign.ⵠᐃⲆᐃⵠΔⵠ = ($w.sign.ⵠᐃⲆᐃⵠΔⵠ + 1) % ow.ΔᐃᐃⵠⲆᐃΔ;
                $w.sign.ⵠΔⲆⲆᐃⲆⲆ.src = "./img/sign" + $w.sign.ⵠᐃⲆᐃⵠΔⵠ + ".png";
            }
        };
        document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, false);
        document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, Ah);
        document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, false);
        document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, false);
        this.ⲆΔⲆΔⵠ = {
            open: ij,
            id: document.getElementById("shop_market"),
            style: document.getElementById("shop_market").style,
            items: [{
                id: 0,
                name: "wood",
                ⲆⲆⲆⵠⲆ: 1,
                b: 1,
                a: 3,
                ᐃⲆⲆⲆⲆ: 316
            }, {
                id: 1,
                name: "stone",
                ⲆⲆⲆⵠⲆ: 1,
                b: 1,
                a: 4,
                ᐃⲆⲆⲆⲆ: 315
            }, {
                id: 2,
                name: "gold",
                ⲆⲆⲆⵠⲆ: 1,
                b: 1,
                a: 6,
                ᐃⲆⲆⲆⲆ: 297
            }, {
                id: 3,
                name: "diamond",
                ⲆⲆⲆⵠⲆ: 4,
                b: 4,
                a: 1,
                ᐃⲆⲆⲆⲆ: 298
            }, {
                id: 4,
                name: "amethyst",
                ⲆⲆⲆⵠⲆ: 8,
                b: 8,
                a: 1,
                ᐃⲆⲆⲆⲆ: 418
            }, {
                id: 5,
                name: "reidite",
                ⲆⲆⲆⵠⲆ: 16,
                b: 16,
                a: 1,
                ᐃⲆⲆⲆⲆ: 938
            }, {
                id: 6,
                name: "pumpkin_seed",
                ⲆⲆⲆⵠⲆ: 10,
                b: 10,
                a: 1,
                ᐃⲆⲆⲆⲆ: 808
            }, {
                id: 7,
                name: "carrot_seed",
                ⲆⲆⲆⵠⲆ: 16,
                b: 16,
                a: 1,
                ᐃⲆⲆⲆⲆ: 949
            }, {
                id: 8,
                name: "tomato_seed",
                ⲆⲆⲆⵠⲆ: 20,
                b: 20,
                a: 1,
                ᐃⲆⲆⲆⲆ: 959
            }, {
                id: 9,
                name: "thornbush_seed",
                ⲆⲆⲆⵠⲆ: 30,
                b: 30,
                a: 1,
                ᐃⲆⲆⲆⲆ: 845
            }, {
                id: 10,
                name: "garlic_seed",
                ⲆⲆⲆⵠⲆ: 40,
                b: 40,
                a: 1,
                ᐃⲆⲆⲆⲆ: 834
            }, {
                id: 11,
                name: "watermelon_seed",
                ⲆⲆⲆⵠⲆ: 60,
                b: 60,
                a: 1,
                ᐃⲆⲆⲆⲆ: 966
            }],
            button: $v(60, 60, 0, ᐃΔ[795]),
            ⲆᐃΔ: function () {
                this.style.left = Math.floor(jq - 450) + "px";
                this.style.top = Math.floor(kq - 270) + "px";
            },
            select: function () {
                $w.ⲆΔⲆΔⵠ.open = !$w.ⲆΔⲆΔⵠ.open;
                if ($w.ⲆΔⲆΔⵠ.open) {
                    $w.ⲆΔⲆΔⵠ.style.display = "inline-block";
                } else {
                    $w.ⲆΔⲆΔⵠ.style.display = "none";
                }
            },
            ⲆᐃᐃΔᐃ: function () {
                $w.ⲆΔⲆΔⵠ.style.display = "none";
                $w.ⲆΔⲆΔⵠ.open = pn;
            },
            ⲆⵠΔᐃᐃⵠⲆ: function () {
                ΔᐃⵠⲆ.ΔᐃΔⲆⵠΔⲆⲆⲆ(this.ΔⵠⲆᐃᐃⲆΔ);
            },
            ⵠᐃΔΔⲆ: function () {
                this.id;
                if (this.ΔⵠⲆᐃᐃⲆΔ.a === 1) {
                    var a = Math.floor(Number(this.value) * this.ΔⵠⲆᐃᐃⲆΔ.b);
                    this.ΔⵠⲆᐃᐃⲆΔ.ⲆⲆⲆⵠⲆ = a;
                    document.getElementById(this.ΔⵠⲆᐃᐃⲆΔ.name + "_trad_number").innerHTML = a + "";
                } else {
                    a = Math.floor(Number(this.value) / this.ΔⵠⲆᐃᐃⲆΔ.a);
                    this.ΔⵠⲆᐃᐃⲆΔ.ⲆⲆⲆⵠⲆ = a;
                    document.getElementById(this.ΔⵠⲆᐃᐃⲆΔ.name + "_trad_number").innerHTML = a + "";
                }
            }
        };
        document.getElementById("quit_market").addEventListener("mouseup", this.ⲆΔⲆΔⵠ.ⲆᐃᐃΔᐃ, false);
        var e = [["mouseup", this.ⲆΔⲆΔⵠ.ⲆⵠΔᐃᐃⵠⲆ, "buy_"], ["click", this.ⲆΔⲆΔⵠ.ⵠᐃΔΔⲆ, ""], ["change", this.ⲆΔⲆΔⵠ.ⵠᐃΔΔⲆ, ""], ["keypress", this.ⲆΔⲆΔⵠ.keypress, ""]];
        for (var i = 0; this.ⲆΔⲆΔⵠ.items.length > i; i++) {
            var k = this.ⲆΔⲆΔⵠ.items[i];
            document.getElementById(k.name + "_market").src = ᐃΔ[k.ᐃⲆⲆⲆⲆ][0].ⵠⲆⵠⵠᐃ === undefined ? ᐃΔ[k.ᐃⲆⲆⲆⲆ][0].src : ᐃΔ[k.ᐃⲆⲆⲆⲆ][0].ⵠⲆⵠⵠᐃ;
            if (k.a === 1) {
                document.getElementById(k.name + "_trad_number").innerHTML = k.b;
                document.getElementById(k.name + "_number").value = 1;
                document.getElementById(k.name + "_number").step = 1;
                document.getElementById(k.name + "_number").min = 1;
                document.getElementById(k.name + "_number").max = Math.floor(255 / k.b);
            } else {
                document.getElementById(k.name + "_trad_number").innerHTML = 1;
                document.getElementById(k.name + "_number").value = k.a;
                document.getElementById(k.name + "_number").step = k.a;
                document.getElementById(k.name + "_number").min = k.a;
            }
            document.getElementById("buy_" + k.name + "_number").ΔⵠⲆᐃᐃⲆΔ = k;
            document.getElementById(k.name + "_number").ΔⵠⲆᐃᐃⲆΔ = k;
            for (var l = 0; l < e.length; l++) {
                document.getElementById(e[l][2] + k.name + "_number").addEventListener(e[l][0], e[l][1], Sh);
            }
        }
        $("[type='number']").keypress(function (a) {
            a.preventDefault();
        });
        this.options = {
            open: rj,
            id: document.getElementById("option_in_game"),
            style: document.getElementById("option_in_game").style,
            ᐃᐃⵠΔΔ: document.getElementById("agree_ing").style,
            ᐃΔᐃⵠᐃⲆΔ: document.getElementById("cancel_agree_ing").style,
            ᐃΔⵠᐃⲆΔᐃ: document.getElementById("quest_agree_ing").style,
            ΔⲆΔⵠᐃⵠᐃ: document.getElementById("spectator_agree_ing").style,
            ᐃⵠΔΔᐃⲆⲆ: document.getElementById("auto_feed_agree_ing").style,
            ⵠⵠᐃⵠⵠᐃᐃ: document.getElementById("info_agree_ing").style,
            ΔⲆΔⵠⵠⵠⵠ: document.getElementById("pixelated_agree_ing").style,
            button: $v(60, 60, 0, ᐃΔ[727]),
            ⵠΔⲆᐃᐃΔⲆᐃⵠ: function () {
                $w.options.open = !$w.options.open;
                if ($w.options.open) {
                    $w.options.style.display = "inline-block";
                } else {
                    $w.options.style.display = "none";
                }
            },
            ᐃⵠⵠⲆΔⵠΔᐃΔ: function () {
                mf.ⲆⲆⵠⲆⲆⲆⵠ();
            },
            ⲆⵠᐃᐃᐃΔⲆⵠⵠ: function () {
                mf.ΔΔΔᐃⲆⲆⲆ();
            },
            high: function () {
                mf.ᐃΔⵠΔᐃⲆⲆᐃⵠ();
            },
            low: function () {
                mf.ⲆᐃⵠᐃΔᐃᐃⲆⵠ();
            },
            ⲆΔⵠⲆⵠ: function () {
                $w.Ⲇᐃⵠⵠ.ⲆΔⵠⲆⵠ();
            },
            ⵠⵠⵠᐃΔᐃⵠᐃΔ: function () {
                $w.ΔⵠⵠⲆᐃ.ⲆΔⵠⲆⵠ();
            },
            ᐃⵠΔΔⲆᐃΔΔⲆ: function () {
                $w.ⲆⵠΔⲆ.ⲆΔⵠⲆⵠ();
            },
            ⲆᐃᐃᐃⲆᐃⵠΔⲆ: function () {
                Yw.ᐃΔᐃᐃⵠ.ΔᐃΔⲆⲆΔᐃ();
            },
            ⵠⲆᐃⵠᐃⵠⵠΔΔ: function () {
                Yw.ᐃⲆᐃΔᐃ.ΔᐃΔⲆⲆΔᐃ();
            },
            ⲆᐃᐃΔᐃ: function () {
                $w.options.style.display = "none";
                $w.options.open = false;
            },
            ⲆᐃΔ: function () {
                this.style.left = Math.floor(jq - 235) + "px";
                this.style.top = Math.floor(kq - 170) + "px";
            }
        };
        document.getElementById("azerty_ing").addEventListener("mouseup", this.options.ᐃⵠⵠⲆΔⵠΔᐃΔ, false);
        document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.ⲆⵠᐃᐃᐃΔⲆⵠⵠ, false);
        document.getElementById("low_ing").addEventListener("mouseup", this.options.low, tr);
        document.getElementById("high_ing").addEventListener("mouseup", this.options.high, Ro);
        document.getElementById("quit_opt").addEventListener("mouseup", this.options.ⲆᐃᐃΔᐃ, false);
        document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.ⲆΔⵠⲆⵠ, Gj);
        document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.ᐃⵠΔΔⲆᐃΔΔⲆ, false);
        document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.ⵠⵠⵠᐃΔᐃⵠᐃΔ, false);
        document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.ⲆᐃᐃᐃⲆᐃⵠΔⲆ, Ro);
        document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.ⵠⲆᐃⵠᐃⵠⵠΔΔ, pl);
        this.ΔⵠⵠⲆᐃ = {
            open: js,
            ⲆⲆⲆΔΔ: ⲆΔⲆⲆ.get("starve_cancel") && ⲆΔⲆⲆ.get("starve_cancel") === "0" ? 0 : 1,
            id: document.getElementById("cancel_sure_delete"),
            style: document.getElementById("cancel_sure_delete").style,
            ᐃᐃⵠΔΔ: document.getElementById("cancel_agree").style,
            button: 0,
            ⲆΔ: 0,
            ⲆᐃᐃΔᐃ: function () {
                $w.ΔⵠⵠⲆᐃ.style.display = "none";
                $w.ΔⵠⵠⲆᐃ.open = Qr;
            },
            ΔᐃΔΔᐃᐃⵠ: function () {
                if (Yw.ⲆⵠᐃΔ.ⲆⵠⵠⲆⵠ) {
                    ΔᐃⵠⲆ.ᐃⲆⲆᐃᐃⲆΔⵠΔ();
                }
                $w.ΔⵠⵠⲆᐃ.ⲆᐃᐃΔᐃ();
            },
            ⲆΔⵠⲆⵠ: function () {
                if ($w.ΔⵠⵠⲆᐃ.ⲆⲆⲆΔΔ) {
                    ⲆΔⲆⲆ.set("starve_cancel", "0");
                    $w.ΔⵠⵠⲆᐃ.ᐃᐃⵠΔΔ.display = "inline-block";
                    $w.options.ᐃΔᐃⵠᐃⲆΔ.display = "none";
                } else {
                    ⲆΔⲆⲆ.set("starve_cancel", "1");
                    $w.ΔⵠⵠⲆᐃ.ᐃᐃⵠΔΔ.display = "none";
                    $w.options.ᐃΔᐃⵠᐃⲆΔ.display = "inline-block";
                }
                $w.ΔⵠⵠⲆᐃ.ⲆⲆⲆΔΔ = !$w.ΔⵠⵠⲆᐃ.ⲆⲆⲆΔΔ;
            },
            ⲆⲆⵠⲆⵠⲆⵠ: function () {
                if (this.ⲆⲆⲆΔΔ) {
                    this.style.display = "inline-block";
                    this.open = true;
                } else {
                    this.ΔᐃΔΔᐃᐃⵠ();
                }
            },
            ⲆᐃΔ: function () {
                this.style.left = Math.floor(jq - 235) + "px";
                this.style.top = Math.floor(kq - 130) + "px";
            }
        };
        this.ΔⵠⵠⲆᐃ.id.oncontextmenu = function () {
            return Ah;
        };
        this.ΔⵠⵠⲆᐃ.ᐃᐃⵠΔΔ.display = "none";
        if (this.ΔⵠⵠⲆᐃ.ⲆⲆⲆΔΔ) {
            this.options.ᐃΔᐃⵠᐃⲆΔ.display = "inline-block";
        } else {
            this.options.ᐃΔᐃⵠᐃⲆΔ.display = "none";
        }
        document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.ΔⵠⵠⲆᐃ.ΔᐃΔΔᐃᐃⵠ, false);
        document.getElementById("cancel_no_delete").addEventListener("mouseup", this.ΔⵠⵠⲆᐃ.ⲆᐃᐃΔᐃ, false);
        document.getElementById("cancel_case_agree").addEventListener("mouseup", this.ΔⵠⵠⲆᐃ.ⲆΔⵠⲆⵠ, false);
        document.addEventListener("cancel_sure_delete", function (a) {
            a.preventDefault();
        }, false);
        this.ΔᐃⵠΔⲆᐃⲆ = {
            ⲆⲆⲆΔΔ: ⲆΔⲆⲆ.get("starve_aliasing") ? ⲆΔⲆⲆ.get("starve_aliasing") === "0" ? 0 : 1 : 1,
            ΔᐃⲆΔΔΔᐃ: function (a) {
                document.getElementById("game_canvas").style.imageRendering = a ? "pixelated" : "auto";
            },
            ⲆΔⵠⲆⵠ: function () {
                if ($w.ΔᐃⵠΔⲆᐃⲆ.ⲆⲆⲆΔΔ === 0) {
                    ⲆΔⲆⲆ.set("starve_aliasing", "1");
                    $w.ΔᐃⵠΔⲆᐃⲆ.ΔᐃⲆΔΔΔᐃ(1);
                    $w.options.ΔⲆΔⵠⵠⵠⵠ.display = "inline-block";
                } else {
                    ⲆΔⲆⲆ.set("starve_aliasing", "0");
                    $w.ΔᐃⵠΔⲆᐃⲆ.ΔᐃⲆΔΔΔᐃ(0);
                    $w.options.ΔⲆΔⵠⵠⵠⵠ.display = "none";
                }
                $w.ΔᐃⵠΔⲆᐃⲆ.ⲆⲆⲆΔΔ = ($w.ΔᐃⵠΔⲆᐃⲆ.ⲆⲆⲆΔΔ + 1) % 2;
            }
        };
        if (this.ΔᐃⵠΔⲆᐃⲆ.ⲆⲆⲆΔΔ === 1) {
            this.options.ΔⲆΔⵠⵠⵠⵠ.display = "inline-block";
        } else {
            this.ΔᐃⵠΔⲆᐃⲆ.ΔᐃⲆΔΔΔᐃ(0);
            this.options.ΔⲆΔⵠⵠⵠⵠ.display = "none";
        }
        document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.ΔᐃⵠΔⲆᐃⲆ.ⲆΔⵠⲆⵠ, false);
        this.ⲆⲆᐃΔⲆ = {
            ⲆⲆⲆΔΔ: ⲆΔⲆⲆ.get("starve_info_box") ? ⲆΔⲆⲆ.get("starve_info_box") === "0" ? 0 : 1 : 1,
            display: 0,
            x: 0,
            y: 0,
            id: 0,
            ⲆⵠᐃΔ: 0,
            ⲆΔⵠⲆⵠ: function () {
                if ($w.ⲆⲆᐃΔⲆ.ⲆⲆⲆΔΔ === 0) {
                    ⲆΔⲆⲆ.set("starve_info_box", "1");
                    $w.options.ⵠⵠᐃⵠⵠᐃᐃ.display = "inline-block";
                } else {
                    ⲆΔⲆⲆ.set("starve_info_box", "0");
                    $w.options.ⵠⵠᐃⵠⵠᐃᐃ.display = "none";
                }
                $w.ⲆⲆᐃΔⲆ.ⲆⲆⲆΔΔ = ($w.ⲆⲆᐃΔⲆ.ⲆⲆⲆΔΔ + 1) % 2;
            },
            ⲆΔᐃⵠ: function (a, b, c) {
                if (a && this.ⲆⲆⲆΔΔ) {
                    this.display = 1;
                    this.id = c === 0 ? b.id : Ls[b.id].ⲆΔᐃᐃ;
                    this.x = b.info.translate.x + 80;
                    this.y = b.info.translate.y;
                    this.ⲆⵠᐃΔ = c;
                }
                return a;
            }
        };
        if (this.ⲆⲆᐃΔⲆ.ⲆⲆⲆΔΔ === 1) {
            this.options.ⵠⵠᐃⵠⵠᐃᐃ.display = "inline-block";
        } else {
            this.options.ⵠⵠᐃⵠⵠᐃᐃ.display = "none";
        }
        document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.ⲆⲆᐃΔⲆ.ⲆΔⵠⲆⵠ, Cr);
        if (ⲆΔⲆⲆ.get("starve_scale")) {
            oq = Number(ⲆΔⲆⲆ.get("starve_scale"));
            document.getElementById("input_ratio").value = oq;
            oq *= Ua / Va;
            Xa();
        }
        this.ⲆⵠⵠⵠⲆⲆⲆ = function () {
            ⲆΔⲆⲆ.set("starve_scale", "" + document.getElementById("input_ratio").value);
            oq = Ua / Va * document.getElementById("input_ratio").value;
            Xa();
        };
        document.getElementById("input_ratio").addEventListener("input", this.ⲆⵠⵠⵠⲆⲆⲆ, false);
        this.Ⲇᐃⵠⵠ = {
            open: false,
            ⲆⲆⲆΔΔ: ⲆΔⲆⲆ.get("starve_safe") ? ⲆΔⲆⲆ.get("starve_safe") === "0" ? 0 : 1 : 1,
            id: document.getElementById("sure_delete"),
            style: document.getElementById("sure_delete").style,
            ᐃᐃⵠΔΔ: document.getElementById("agree").style,
            button: 0,
            ⲆΔ: 0,
            ⲆᐃᐃΔᐃ: function () {
                $w.Ⲇᐃⵠⵠ.style.display = "none";
                $w.Ⲇᐃⵠⵠ.open = pn;
            },
            all: function () {
                if (!Yw.ⵠᐃΔⵠⵠ.wait) {
                    if (Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0 && Yw.ⲆⵠᐃΔ.id < 0 && !Yw.ⵠΔΔⵠΔ.enabled) {
                        ΔᐃⵠⲆ.ⵠⲆᐃᐃᐃΔᐃΔⲆ($w.Ⲇᐃⵠⵠ.button);
                    }
                    $w.Ⲇᐃⵠⵠ.ⲆᐃᐃΔᐃ();
                }
            },
            ΔΔⲆΔ: function () {
                if (Yw.ⲆⵠᐃΔ.ⵠᐃⵠΔⵠ && !Yw.ⵠᐃΔⵠⵠ.wait) {
                    if (Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0 && Yw.ⲆⵠᐃΔ.id < 0 && !Yw.ⵠΔΔⵠΔ.enabled) {
                        ΔᐃⵠⲆ.ⵠΔⵠⵠⵠⵠⲆⵠΔ($w.Ⲇᐃⵠⵠ.button);
                    }
                    $w.Ⲇᐃⵠⵠ.ⲆᐃᐃΔᐃ();
                }
            },
            ⲆⲆᐃΔⵠⲆΔⲆⲆ: function () {
                if (!Yw.ⵠᐃΔⵠⵠ.wait) {
                    if (Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0 && Yw.ⲆⵠᐃΔ.id < 0 && !Yw.ⵠΔΔⵠΔ.enabled) {
                        ΔᐃⵠⲆ.ΔⵠᐃᐃⵠΔⲆΔⲆ($w.Ⲇᐃⵠⵠ.button);
                    }
                    $w.Ⲇᐃⵠⵠ.ⲆᐃᐃΔᐃ();
                }
            },
            ⲆΔⵠⲆⵠ: function () {
                if ($w.Ⲇᐃⵠⵠ.ⲆⲆⲆΔΔ) {
                    ⲆΔⲆⲆ.set("starve_safe", "0");
                    $w.Ⲇᐃⵠⵠ.ᐃᐃⵠΔΔ.display = "inline-block";
                    $w.options.ᐃᐃⵠΔΔ.display = "none";
                } else {
                    ⲆΔⲆⲆ.set("starve_safe", "1");
                    $w.Ⲇᐃⵠⵠ.ᐃᐃⵠΔΔ.display = "none";
                    $w.options.ᐃᐃⵠΔΔ.display = "inline-block";
                }
                $w.Ⲇᐃⵠⵠ.ⲆⲆⲆΔΔ = !$w.Ⲇᐃⵠⵠ.ⲆⲆⲆΔΔ;
            },
            ⲆⲆⵠⲆⵠⲆⵠ: function (a) {
                this.button = a;
                document.getElementById("item_to_del").src = ᐃΔ[vr[a].ᐃⵠ][0].ⵠⲆⵠⵠᐃ === ns ? ᐃΔ[vr[a].ᐃⵠ][0].src : ᐃΔ[vr[a].ᐃⵠ][0].ⵠⲆⵠⵠᐃ;
                if (vr[a].ΔΔⲆΔ && !Yw.ᐃᐃⲆⵠᐃ && Yw.ⲆⵠᐃΔ.ⵠᐃⵠΔⵠ) {
                    document.getElementById("recycle_delete").style.display = "inline-block";
                } else {
                    document.getElementById("recycle_delete").style.display = "none";
                }
                if (this.ⲆⲆⲆΔΔ) {
                    this.style.display = "inline-block";
                    this.open = true;
                } else {
                    this.all();
                }
            },
            ⲆᐃΔ: function () {
                this.style.left = Math.floor(jq - 235) + "px";
                this.style.top = Math.floor(kq - 175) + "px";
            }
        };
        this.Ⲇᐃⵠⵠ.ᐃᐃⵠΔΔ.display = "none";
        if (this.Ⲇᐃⵠⵠ.ⲆⲆⲆΔΔ) {
            this.options.ᐃᐃⵠΔΔ.display = "inline-block";
        } else {
            this.options.ᐃᐃⵠΔΔ.display = "none";
        }
        document.getElementById("one_delete").addEventListener("mouseup", this.Ⲇᐃⵠⵠ.ⲆⲆᐃΔⵠⲆΔⲆⲆ, Ro);
        document.getElementById("yes_delete").addEventListener("mouseup", this.Ⲇᐃⵠⵠ.all, Cr);
        document.getElementById("recycle_delete").addEventListener("mouseup", this.Ⲇᐃⵠⵠ.ΔΔⲆΔ, false);
        document.getElementById("no_delete").addEventListener("mouseup", this.Ⲇᐃⵠⵠ.ⲆᐃᐃΔᐃ, false);
        document.getElementById("case_agree").addEventListener("mouseup", this.Ⲇᐃⵠⵠ.ⲆΔⵠⲆⵠ, Cr);
        this.ᐃⲆⲆⵠⲆ = {
            open: Sh,
            ⵠΔᐃΔᐃ: -1,
            button: $v(60, 60, 0, ᐃΔ[592]),
            id: document.getElementById("shop_starterkit"),
            style: document.getElementById("shop_starterkit").style,
            ⲆᐃΔ: function () {
                this.style.left = Math.floor(jq - 300) + "px";
                this.style.top = Math.floor(kq - 215) + "px";
            },
            ⲆᐃᐃΔᐃ: function () {
                $w.ᐃⲆⲆⵠⲆ.open = false;
                $w.ᐃⲆⲆⵠⲆ.style.display = "none";
            },
            select: function () {
                $w.ᐃⲆⲆⵠⲆ.open = !$w.ᐃⲆⲆⵠⲆ.open;
                if ($w.ᐃⲆⲆⵠⲆ.open) {
                    $w.ᐃⲆⲆⵠⲆ.style.display = "inline-block";
                } else {
                    $w.ᐃⲆⲆⵠⲆ.style.display = "none";
                }
            },
            ⲆⵠΔᐃᐃⵠⲆ: function () {
                if ($w.ᐃⲆⲆⵠⲆ.ⵠΔᐃΔᐃ >= 0) {
                    ΔᐃⵠⲆ.ⵠⲆᐃⵠᐃⵠᐃⵠⲆ($w.ᐃⲆⲆⵠⲆ.ⵠΔᐃΔᐃ);
                    $w.ᐃⲆⲆⵠⲆ.ⲆᐃᐃΔᐃ();
                    if (ga) {
                        ga("send", "event", "Game", "kit", "" + $w.ᐃⲆⲆⵠⲆ.ⵠΔᐃΔᐃ);
                    }
                }
            },
            ⵠΔⵠⲆⲆ: function () {
                var a = Yw.ᐃⲆⲆⵠⲆ.value;
                document.getElementById("points_bank").innerHTML = ΔⲆⲆⵠ.ᐃΔⲆᐃΔᐃⵠ(a) + " points";
                for (var b = 0; b < lw.length; b++) {
                    if (lw[b].ᐃΔⵠᐃΔ > a) {
                        document.getElementById("starter" + (b + 1)).style.opacity = "0.4";
                    } else {
                        document.getElementById("starter" + (b + 1)).style.opacity = "1";
                    }
                }
                for (b = 1; b < 13; b++) {
                    document.getElementById("inv_shop" + b).src = "./img/empty-shop.png";
                    document.getElementById("amount_shop" + b).innerHTML = "";
                }
                document.getElementById("buy_kit").style.opacity = "0.2";
            },
            ΔᐃⵠⲆⵠᐃⲆΔⵠ: function () {
                if (this.id.length > 8) {
                    var a = Number(this.id.charAt(7) + this.id.charAt(8));
                } else {
                    a = Number(this.id.charAt(7));
                }
                var b = lw[a - 1];
                if (Yw.ᐃⲆⲆⵠⲆ.value >= b.ᐃΔⵠᐃΔ) {
                    $w.ᐃⲆⲆⵠⲆ.ⵠΔᐃΔᐃ = a;
                    document.getElementById("buy_kit").style.opacity = "1";
                } else {
                    $w.ᐃⲆⲆⵠⲆ.ⵠΔᐃΔᐃ = -1;
                    document.getElementById("buy_kit").style.opacity = "0.2";
                }
                b = b.items;
                for (var c = 1, d = 1; c < b.length + 1; c++) {
                    if (b[c - 1][1] !== 29) {
                        document.getElementById("inv_shop" + d).style.display = "inline-block";
                        document.getElementById("inv_shop" + d).src = ᐃΔ[vr[b[c - 1][1]].ᐃⵠ][0].ⵠⲆⵠⵠᐃ === undefined ? ᐃΔ[vr[b[c - 1][1]].ᐃⵠ][0].src : ᐃΔ[vr[b[c - 1][1]].ᐃⵠ][0].ⵠⲆⵠⵠᐃ;
                        document.getElementById("amount_shop" + d).innerHTML = "" + b[c - 1][0];
                        d++;
                    }
                }
                for (; d < 13; d++) {
                    document.getElementById("inv_shop" + d).src = "./img/empty-shop.png";
                    document.getElementById("amount_shop" + d).innerHTML = "";
                }
            }
        };
        document.getElementById("quit3").addEventListener("mouseup", this.ᐃⲆⲆⵠⲆ.ⲆᐃᐃΔᐃ, pn);
        document.getElementById("buy_kit").addEventListener("mouseup", this.ᐃⲆⲆⵠⲆ.ⲆⵠΔᐃᐃⵠⲆ, Cr);
        for (l = 1; l < 11; l++) {
            document.getElementById("starter" + l).addEventListener("mouseup", this.ᐃⲆⲆⵠⲆ.ΔᐃⵠⲆⵠᐃⲆΔⵠ, Gj);
        }
        this.ⲆⵠΔⲆ = {
            open: false,
            ⲆⲆⲆΔΔ: ⲆΔⲆⲆ.get("starve_quests") ? ⲆΔⲆⲆ.get("starve_quests") === "1" ? 1 : 0 : 0,
            button: $v(60, 60, 0, ᐃΔ[755]),
            id: document.getElementById("chronoquest"),
            style: document.getElementById("chronoquest").style,
            ⲆᐃΔ: function () {
                this.style.left = Math.floor(jq - 420) + "px";
                this.style.top = Math.floor(kq - 270) + "px";
            },
            ⲆᐃᐃΔᐃ: function () {
                $w.ⲆⵠΔⲆ.style.display = "none";
                $w.ⲆⵠΔⲆ.open = false;
            },
            select: function () {
                $w.ⲆⵠΔⲆ.open = !$w.ⲆⵠΔⲆ.open;
                if ($w.ⲆⵠΔⲆ.open) {
                    $w.ⲆⵠΔⲆ.style.display = "inline-block";
                } else {
                    $w.ⲆⵠΔⲆ.style.display = "none";
                }
            },
            list: [],
            reset: function () {
                for (var a = 0; a < sw.length; a++) {
                    this.list[a] = 1;
                    document.getElementById("timeremain_" + a).style.display = "inline-block";
                    document.getElementById("time_finished_" + a).style.display = "none";
                    document.getElementById("claim_reward_" + a).style.display = "none";
                }
            },
            ΔⵠⵠΔⲆΔⵠ: 0,
            ΔᐃᐃᐃΔⲆⵠ: 0,
            ⲆⵠΔⵠⲆⵠⵠⲆⲆ: function () {
                if ($w.ⲆⵠΔⲆ.open) {
                    var a = new Date().getTime();
                    if (a - this.ΔⵠⵠΔⲆΔⵠ >= 1000) {
                        this.ΔⵠⵠΔⲆΔⵠ = a;
                        for (var b = 0; b < sw.length; b++) {
                            if ($w.ⲆⵠΔⲆ.list[b]) {
                                var c = sw[b].time - (a - Cf.ⲆⲆⵠᐃⵠ.ⵠΔⵠⲆⲆ + $w.ⲆⵠΔⲆ.ΔᐃᐃᐃΔⲆⵠ);
                                document.getElementById("timeremain_" + b).innerHTML = c > 960000 ? Math.floor(c / 480000) + " days" : c > 480000 ? Math.floor(c / 480000) + " day" : c > 60000 ? Math.floor(c / 60000) + " min" : Math.floor(c / 1000) + " sec";
                            }
                        }
                    }
                }
            },
            restore: function (a) {
                for (var b = 0; b < a.length; b++) {
                    if (a[b] != 1) {
                        $w.ⲆⵠΔⲆ.ⵠⵠᐃᐃΔᐃΔ(b, a[b]);
                    }
                }
            },
            ⵠⵠᐃᐃΔᐃΔ: function (a, b) {
                if (b === 3 && (a === 11 || a === 12)) {
                    Yw.ⵠᐃΔᐃ.ΔⲆΔⲆᐃⲆΔ(0, 1);
                    $w.ᐃⵠⵠΔⵠΔΔ();
                }
                document.getElementById("timeremain_" + a).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
                if (b > 1) {
                    document.getElementById("time_finished_" + a).innerHTML = "SUCCEED";
                    document.getElementById("timeremain_" + a).style.display = "none";
                } else if (b === 0) {
                    document.getElementById("time_finished_" + a).innerHTML = "FAILED";
                    document.getElementById("timeremain_" + a).style.display = "none";
                }
                document.getElementById("claim_reward_" + a).style.display = b === 2 ? "inline-block" : "none";
                document.getElementById("time_finished_" + a).style.display = "inline";
                $w.ⲆⵠΔⲆ.list[a] = 0;
            },
            modify: function (a, b) {
                $w.ⲆⵠΔⲆ.ⵠⵠᐃᐃΔᐃΔ(a, b);
                if ($w.ⲆⵠΔⲆ.ⲆⲆⲆΔΔ) {
                    $w.ⲆⵠΔⲆ.open = true;
                    $w.ⲆⵠΔⲆ.style.display = "inline-block";
                }
            },
            ⲆΔⵠⲆⵠ: function () {
                if ($w.ⲆⵠΔⲆ.ⲆⲆⲆΔΔ) {
                    ⲆΔⲆⲆ.set("starve_quests", "0");
                    $w.options.ᐃΔⵠᐃⲆΔᐃ.display = "none";
                } else {
                    ⲆΔⲆⲆ.set("starve_quests", "1");
                    $w.options.ᐃΔⵠᐃⲆΔᐃ.display = "inline-block";
                }
                $w.ⲆⵠΔⲆ.ⲆⲆⲆΔΔ = !$w.ⲆⵠΔⲆ.ⲆⲆⲆΔΔ;
            },
            ᐃΔⲆᐃΔⵠᐃⲆⲆ: function () {
                var a = Number(this.id.charAt(13));
                var b = Number(this.id.charAt(14));
                if (this.id.charAt(14) !== "" && b >= 0 && b <= 9) {
                    a = a * 10 + b;
                }
                ΔᐃⵠⲆ.ΔⲆᐃⲆᐃᐃΔⲆⲆ(a);
            }
        };
        if (this.ⲆⵠΔⲆ.ⲆⲆⲆΔΔ) {
            this.options.ᐃΔⵠᐃⲆΔᐃ.display = "inline-block";
        } else {
            this.options.ᐃΔⵠᐃⲆΔᐃ.display = "none";
        }
        document.getElementById("quit_chronoquest").addEventListener("mouseup", this.ⲆⵠΔⲆ.ⲆᐃᐃΔᐃ, false);
        for (l = 0; sw.length > l; l++) {
            document.getElementById("claim_reward_" + l).addEventListener("mouseup", this.ⲆⵠΔⲆ.ᐃΔⲆᐃΔⵠᐃⲆⲆ, Ah);
        }
        this.ΔⵠⲆⲆ = {
            open: Na,
            button: $v(60, 60, 0, ᐃΔ[708]),
            list: {
                id: document.getElementById("recipe_craft"),
                style: document.getElementById("recipe_craft").style,
                ᐃⲆΔⲆᐃᐃⵠ: [],
                ΔⵠΔᐃⲆᐃᐃ: 0,
                ⲆᐃΔ: function () {
                    this.style.left = Math.floor(jq - 335) + "px";
                    this.style.top = Math.floor(kq - 215) + "px";
                },
                ⲆᐃᐃΔᐃ: function () {
                    document.getElementById("recipe_craft").style.display = "none";
                    $w.ΔⵠⲆⲆ.open = false;
                },
                ᐃⲆⲆᐃⲆΔΔ: function () {
                    document.getElementById("recipe_craft").style.display = "none";
                    document.getElementById("home_craft").style.display = "inline-block";
                },
                Ⲇⵠⵠⵠ: function (a) {
                    if ((b = this.ᐃⲆΔⲆᐃᐃⵠ[a]).ⵠⲆᐃ) {
                        document.getElementById("watercraft").style.display = "inline-block";
                    } else {
                        document.getElementById("watercraft").style.display = "none";
                    }
                    if (b.f) {
                        document.getElementById("firecraft").style.display = "inline-block";
                    } else {
                        document.getElementById("firecraft").style.display = "none";
                    }
                    if (b.w) {
                        document.getElementById("workcraft").style.display = "inline-block";
                    } else {
                        document.getElementById("workcraft").style.display = "none";
                    }
                    if (b.e) {
                        document.getElementById("wellcraft").style.display = "inline-block";
                    } else {
                        document.getElementById("wellcraft").style.display = "none";
                    }
                    for (var b = b.r, c = (a = 0, 1); a < b.length; a++) {
                        document.getElementById("inv" + c).style.display = "inline-block";
                        document.getElementById("inv" + c).src = ᐃΔ[vr[b[a][0]].ᐃⵠ][0].ⵠⲆⵠⵠᐃ === undefined ? ᐃΔ[vr[b[a][0]].ᐃⵠ][0].src : ᐃΔ[vr[b[a][0]].ᐃⵠ][0].ⵠⲆⵠⵠᐃ;
                        document.getElementById("numb" + c).innerHTML = "" + b[a][1];
                        c++;
                    }
                    for (; c < 6; c++) {
                        document.getElementById("inv" + c).style.display = "none";
                        document.getElementById("numb" + c).innerHTML = "";
                    }
                },
                select: function (a) {
                    this.ΔⵠΔᐃⲆᐃᐃ = a;
                    document.getElementById("home_craft").style.display = "none";
                    document.getElementById("workcraft").style.display = "none";
                    document.getElementById("firecraft").style.display = "none";
                    document.getElementById("watercraft").style.display = "none";
                    document.getElementById("wellcraft").style.display = "none";
                    document.getElementById("recipe_craft").style.display = "inline-block";
                    document.getElementById("inv1").style.display = "none";
                    document.getElementById("inv2").style.display = "none";
                    document.getElementById("inv3").style.display = "none";
                    document.getElementById("inv4").style.display = "none";
                    document.getElementById("inv5").style.display = "none";
                    document.getElementById("numb1").innerHTML = "";
                    document.getElementById("numb2").innerHTML = "";
                    document.getElementById("numb3").innerHTML = "";
                    document.getElementById("numb4").innerHTML = "";
                    document.getElementById("numb5").innerHTML = "";
                    for (var b = 0, c = 0; b < Ls.length; b++) {
                        var d = Ls[b];
                        if (a === d.ⲆⲆᐃ) {
                            this.ᐃⲆΔⲆᐃᐃⵠ[c] = d;
                            c++;
                            document.getElementById("img_" + c).style.display = "inline-block";
                            document.getElementById("img_" + c).src = ᐃΔ[vr[d.ⲆΔᐃᐃ].ᐃⵠ][0].ⵠⲆⵠⵠᐃ === tj ? ᐃΔ[vr[d.ⲆΔᐃᐃ].ᐃⵠ][0].src : ᐃΔ[vr[d.ⲆΔᐃᐃ].ᐃⵠ][0].ⵠⲆⵠⵠᐃ;
                        }
                    }
                    for (c++; c < 49; c++) {
                        document.getElementById("img_" + c).style.display = "none";
                    }
                }
            },
            ᐃΔᐃⲆᐃⲆⲆ: {
                id: document.getElementById("home_craft"),
                style: document.getElementById("home_craft").style,
                ⲆᐃΔ: function () {
                    this.style.left = Math.floor(jq - 285) + "px";
                    this.style.top = Math.floor(kq - 170) + "px";
                },
                ⲆᐃᐃΔᐃ: function () {
                    document.getElementById("home_craft").style.display = "none";
                    $w.ΔⵠⲆⲆ.open = js;
                }
            },
            ΔⲆΔⵠΔⵠΔᐃⲆ: function () {
                this.open = !this.open;
                if (this.open) {
                    document.getElementById("home_craft").style.display = "inline-block";
                } else {
                    document.getElementById("home_craft").style.display = "none";
                    document.getElementById("recipe_craft").style.display = "none";
                }
            }
        };
        document.getElementById("quit").addEventListener("mouseup", this.ΔⵠⲆⲆ.ᐃΔᐃⲆᐃⲆⲆ.ⲆᐃᐃΔᐃ, ia);
        document.getElementById("quitmenu").addEventListener("mouseup", this.ΔⵠⲆⲆ.list.ⲆᐃᐃΔᐃ, false);
        document.getElementById("backhome").addEventListener("mouseup", this.ΔⵠⲆⲆ.list.ᐃⲆⲆᐃⲆΔΔ, js);
        document.getElementById("hatcategory").addEventListener("mouseup", function () {
            $w.ΔⵠⲆⲆ.list.select(ur.ⵠⵠⵠᐃⵠ);
        }, false);
        document.getElementById("weaponcategory").addEventListener("mouseup", function () {
            $w.ΔⵠⲆⲆ.list.select(ur.ⵠⲆⲆᐃΔ);
        }, false);
        document.getElementById("toolcategory").addEventListener("mouseup", function () {
            $w.ΔⵠⲆⲆ.list.select(ur.ⲆⲆΔᐃⵠ);
        }, pl);
        document.getElementById("foodcategory").addEventListener("mouseup", function () {
            $w.ΔⵠⲆⲆ.list.select(ur.ΔΔⲆᐃⵠ);
        }, false);
        document.getElementById("placeablecategory").addEventListener("mouseup", function () {
            $w.ΔⵠⲆⲆ.list.select(ur.ⲆΔᐃⵠⵠ);
        }, false);
        document.getElementById("constructioncategory").addEventListener("mouseup", function () {
            $w.ΔⵠⲆⲆ.list.select(ur.ᐃⲆⵠΔΔ);
        }, mg);
        document.getElementById("img_1").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(0);
        }, false);
        document.getElementById("img_2").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(1);
        }, false);
        document.getElementById("img_3").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(2);
        }, false);
        document.getElementById("img_4").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(3);
        }, lj);
        document.getElementById("img_5").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(4);
        }, false);
        document.getElementById("img_6").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(5);
        }, false);
        document.getElementById("img_7").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(6);
        }, Ui);
        document.getElementById("img_8").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(7);
        }, pn);
        document.getElementById("img_9").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(8);
        }, false);
        document.getElementById("img_10").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(9);
        }, gn);
        document.getElementById("img_11").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(10);
        }, pl);
        document.getElementById("img_12").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(11);
        }, ql);
        document.getElementById("img_13").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(12);
        }, false);
        document.getElementById("img_14").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(13);
        }, ug);
        document.getElementById("img_15").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(14);
        }, false);
        document.getElementById("img_16").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(15);
        }, false);
        document.getElementById("img_17").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(16);
        }, gn);
        document.getElementById("img_18").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(17);
        }, false);
        document.getElementById("img_19").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(18);
        }, false);
        document.getElementById("img_20").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(19);
        }, ij);
        document.getElementById("img_21").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(20);
        }, false);
        document.getElementById("img_22").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(21);
        }, false);
        document.getElementById("img_23").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(22);
        }, Gj);
        document.getElementById("img_24").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(23);
        }, false);
        document.getElementById("img_25").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(24);
        }, Gj);
        document.getElementById("img_26").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(25);
        }, Ah);
        document.getElementById("img_27").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(26);
        }, Na);
        document.getElementById("img_28").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(27);
        }, false);
        document.getElementById("img_29").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(28);
        }, Na);
        document.getElementById("img_30").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(29);
        }, false);
        document.getElementById("img_31").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(30);
        }, false);
        document.getElementById("img_32").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(31);
        }, js);
        document.getElementById("img_33").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(32);
        }, false);
        document.getElementById("img_34").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(33);
        }, false);
        document.getElementById("img_35").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(34);
        }, pn);
        document.getElementById("img_36").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(35);
        }, false);
        document.getElementById("img_37").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(36);
        }, false);
        document.getElementById("img_38").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(37);
        }, tr);
        document.getElementById("img_39").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(38);
        }, Ro);
        document.getElementById("img_40").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(39);
        }, false);
        document.getElementById("img_41").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(40);
        }, false);
        document.getElementById("img_42").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(41);
        }, rj);
        document.getElementById("img_43").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(42);
        }, false);
        document.getElementById("img_44").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(43);
        }, false);
        document.getElementById("img_45").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(44);
        }, lj);
        document.getElementById("img_46").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(45);
        }, false);
        document.getElementById("img_47").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(46);
        }, false);
        document.getElementById("img_48").addEventListener("mousedown", function () {
            $w.ΔⵠⲆⲆ.list.Ⲇⵠⵠⵠ(47);
        }, false);
        this.ᐃⲆΔⲆⲆ = {
            translate: {
                x: 0,
                y: 0
            },
            ΔⲆᐃⲆⵠ: {
                x: -1,
                y: -1
            },
            ΔᐃᐃΔ: [],
            focus: function (a) {
                var b = this.translate.y + (Yw.ⵠᐃΔᐃ.ⵠᐃⲆⵠᐃ.length > 0 ? -120 : -50);
                if (a.x > this.translate.x && a.x < this.translate.x + 193 && a.y > b && a.y < b + 193) {
                    this.ΔⲆᐃⲆⵠ.x = a.x - this.translate.x;
                    this.ΔⲆᐃⲆⵠ.y = a.y - b;
                }
            }
        };
        this.ΔΔΔΔ = {
            translate: {
                x: 0,
                y: 0
            },
            ᐃⵠ: ᐃΔ[278],
            Ⲇᐃ: document.createElement("canvas")
        };
        this.ΔΔΔΔ.Ⲇᐃ.width = this.ΔΔΔΔ.ᐃⵠ.width;
        this.ΔΔΔΔ.Ⲇᐃ.height = this.ΔΔΔΔ.ᐃⵠ.height;
        this.ΔΔΔΔ.ᐃ = this.ΔΔΔΔ.Ⲇᐃ.getContext("2d");
        this.ᐃΔᐃᐃ = {
            translate: {
                y: 0,
                x: 0
            },
            ᐃⵠ: ᐃΔ[267],
            ⵠⵠΔΔ: Gc,
            y: 0
        };
        this.ⲆⵠⵠⲆᐃⲆⵠ = function () {
            ⲆⵠΔᐃⵠ = document.getElementById("team_box");
            ⲆⵠΔᐃⵠ.innerHTML = "";
            ⲆⵠΔᐃⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + Cf.ΔᐃᐃΔ[Yw.ⵠΔⵠᐃⲆ[0]].Δᐃⵠⵠᐃ + "</div";
            for (var a = 1; Yw.ⵠΔⵠᐃⲆ.length > a; a++) {
                ⲆⵠΔᐃⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + Cf.ΔᐃᐃΔ[Yw.ⵠΔⵠᐃⲆ[a]].Δᐃⵠⵠᐃ + "</div></div>";
            }
            ⲆⵠΔᐃⵠ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
            ⲆⵠΔᐃⵠ.style.display = "inline-block";
            document.getElementById("leave").addEventListener("click", ΔᐃⵠⲆ.ⲆⵠⵠⲆᐃⲆⵠ, lj);
        };
        this.ⲆⵠΔᐃⲆⵠⵠΔᐃ = function () {
            ⲆⵠΔᐃⵠ = document.getElementById("team_box");
            ⲆⵠΔᐃⵠ.innerHTML = "";
            ⲆⵠΔᐃⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + Cf.ΔᐃᐃΔ[Yw.ⵠΔⵠᐃⲆ[0]].Δᐃⵠⵠᐃ + "</div";
            for (var a = 1; a < Yw.ⵠΔⵠᐃⲆ.length; a++) {
                ⲆⵠΔᐃⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + Cf.ΔᐃᐃΔ[Yw.ⵠΔⵠᐃⲆ[a]].Δᐃⵠⵠᐃ + "</div></div>";
            }
            ⲆⵠΔᐃⵠ.innerHTML += "</div>";
            ⲆⵠΔᐃⵠ.style.display = "inline-block";
        };
        this.ⵠⵠⵠΔΔⵠⲆᐃⵠ = function () {
            ⲆⵠΔᐃⵠ = document.getElementById("team_box");
            ⲆⵠΔᐃⵠ.innerHTML = "";
            ⲆⵠΔᐃⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + Cf.ΔᐃᐃΔ[Yw.ⵠΔⵠᐃⲆ[0]].Δᐃⵠⵠᐃ + "</div";
            for (var a = 1; a < Yw.ⵠΔⵠᐃⲆ.length; a++) {
                ⲆⵠΔᐃⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + Cf.ΔᐃᐃΔ[Yw.ⵠΔⵠᐃⲆ[a]].Δᐃⵠⵠᐃ + "</div><div class=\"eject_member\" id=\"eject_member" + a + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
            }
            if (Yw.ΔᐃᐃΔΔ.lock === 0) {
                ⲆⵠΔᐃⵠ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
            } else {
                ⲆⵠΔᐃⵠ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
            }
            document.getElementById("lock_team").addEventListener("click", ΔᐃⵠⲆ.ΔⲆⲆᐃⲆᐃⲆⵠⲆ, false);
            ⲆⵠΔᐃⵠ.style.display = "inline-block";
            for (a = 1; Yw.ⵠΔⵠᐃⲆ.length > a; a++) {
                switch (a) {
                    case 1:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ΔᐃⵠⲆ.ᐃΔΔΔⲆⲆᐃ(1);
                        }, false);
                        break;
                    case 2:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ΔᐃⵠⲆ.ᐃΔΔΔⲆⲆᐃ(2);
                        }, false);
                        break;
                    case 3:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ΔᐃⵠⲆ.ᐃΔΔΔⲆⲆᐃ(3);
                        }, Sh);
                        break;
                    case 4:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ΔᐃⵠⲆ.ᐃΔΔΔⲆⲆᐃ(4);
                        }, js);
                        break;
                    case 5:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ΔᐃⵠⲆ.ᐃΔΔΔⲆⲆᐃ(5);
                        }, ug);
                        break;
                    case 6:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ΔᐃⵠⲆ.ᐃΔΔΔⲆⲆᐃ(6);
                        }, Ah);
                        break;
                    case 7:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ΔᐃⵠⲆ.ᐃΔΔΔⲆⲆᐃ(7);
                        }, Ah);
                        break;
                    case 8:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ΔᐃⵠⲆ.ᐃΔΔΔⲆⲆᐃ(8);
                        }, false);
                }
            }
        };
        this.ⲆᐃⵠΔⲆ = [];
        this.ⲆᐃⵠΔⲆ[ow.ⵠⲆⵠⵠᐃⲆⲆ] = {
            button: $v(60, 60, 0, ᐃΔ[556]),
            action: this.ⲆⵠⵠⲆᐃⲆⵠ
        };
        this.ⲆᐃⵠΔⲆ[ow.ⲆⲆᐃΔⲆΔⲆ] = {
            button: $v(60, 60, 0, ᐃΔ[556]),
            action: ΔᐃⵠⲆ.ΔⲆΔΔᐃⵠΔΔⲆ
        };
        this.ⲆᐃⵠΔⲆ[ow.ⵠΔⵠⵠᐃⵠΔ] = {
            button: $v(60, 60, 0, ᐃΔ[557]),
            action: this.ⵠⵠⵠΔΔⵠⲆᐃⵠ
        };
        this.ⲆᐃⵠΔⲆ[ow.ⵠᐃⲆⲆᐃΔᐃ] = {
            button: $v(60, 60, 0, ᐃΔ[561]),
            action: this.ⲆⵠΔᐃⲆⵠⵠΔᐃ
        };
        this.ⲆᐃⵠΔⲆ[ow.ⵠⲆΔⲆᐃⲆⲆ] = {
            button: $v(60, 60, 0, ᐃΔ[560]),
            action: function () { }
        };
        this.ΔⲆⲆⲆⲆ = -1;
        this.ΔⲆⲆΔᐃⵠⵠ = $v(60, 60, 0, ᐃΔ[723]);
        this.Ⲇᐃⵠⵠᐃᐃⵠ = $v(60, 60, 0, ᐃΔ[724]);
        this.ⲆⲆⲆⵠⲆⲆⲆ = $v(60, 60, 0, ᐃΔ[658]);
        this.ΔᐃⲆⵠΔⲆⵠ = $v(60, 60, 0, ᐃΔ[657]);
        this.ⵠⲆⲆᐃⲆⵠᐃ = $v(60, 60, 0, ᐃΔ[658]);
        this.ⵠᐃⵠΔⵠᐃⵠ = $v(60, 60, 0, ᐃΔ[316]);
        this.ΔᐃⵠᐃΔᐃⲆ = $v(60, 60, 0, ᐃΔ[315]);
        this.ΔⲆⲆⲆⲆΔΔ = $v(60, 60, 0, ᐃΔ[297]);
        this.ᐃⲆⵠᐃⵠᐃΔ = $v(60, 60, 0, ᐃΔ[298]);
        this.ⵠⵠⲆⲆᐃΔΔ = $v(60, 60, 0, ᐃΔ[418]);
        this.ᐃⵠⲆⲆⵠΔᐃ = $v(60, 60, 0, ᐃΔ[938]);
        this.ⵠΔΔⲆΔᐃΔ = $v(60, 60, 0, ᐃΔ[412]);
        this.ⵠⲆⲆⵠⵠᐃΔ = $v(60, 60, 0, ᐃΔ[536]);
        this.ᐃᐃᐃⲆⵠⲆᐃ = $v(60, 60, 0, ᐃΔ[535]);
        this.ⲆΔᐃΔⵠᐃⵠ = $v(60, 60, 0, ᐃΔ[538]);
        this.ⲆⲆⵠⲆᐃ = $v(120, 120, 0, ᐃΔ[149]);
        this.ⲆⲆⵠⲆᐃ.info.translate.x = 10;
        this.ⲆⲆⵠⲆᐃ.info.translate.y = 10;
        this.ⵠⵠᐃ = [];
        this.ⵠⵠᐃ[0] = $v(68, 68, 0, ᐃΔ[340], 3);
        this.ⵠⵠᐃ[0].id = 0;
        this.ⵠⵠᐃ[1] = $v(68, 68, 0, ᐃΔ[341], 3);
        this.ⵠⵠᐃ[1].id = 1;
        this.ⵠⵠᐃ[108] = $v(68, 68, 0, ᐃΔ[342], 3);
        this.ⵠⵠᐃ[108].id = 108;
        this.ⵠⵠᐃ[109] = $v(68, 68, 0, ᐃΔ[343], 3);
        this.ⵠⵠᐃ[109].id = 109;
        this.ⵠⵠᐃ[110] = $v(68, 68, 0, ᐃΔ[269], 3);
        this.ⵠⵠᐃ[110].id = 110;
        this.ⵠⵠᐃ[233] = $v(68, 68, 0, ᐃΔ[1155], 3);
        this.ⵠⵠᐃ[233].id = 233;
        this.ⵠⵠᐃ[111] = $v(68, 68, 0, ᐃΔ[270], 3);
        this.ⵠⵠᐃ[111].id = 111;
        this.ⵠⵠᐃ[112] = $v(68, 68, 0, ᐃΔ[271], 3);
        this.ⵠⵠᐃ[112].id = 112;
        this.ⵠⵠᐃ[3] = $v(68, 68, 0, ᐃΔ[272], 3);
        this.ⵠⵠᐃ[3].id = 3;
        this.ⵠⵠᐃ[4] = $v(68, 68, 0, ᐃΔ[344], 3);
        this.ⵠⵠᐃ[4].id = 4;
        this.ⵠⵠᐃ[5] = $v(68, 68, 0, ᐃΔ[345], 3);
        this.ⵠⵠᐃ[5].id = 5;
        this.ⵠⵠᐃ[57] = $v(68, 68, 0, ᐃΔ[831], 3);
        this.ⵠⵠᐃ[57].id = 57;
        this.ⵠⵠᐃ[6] = $v(68, 68, 0, ᐃΔ[346], 3);
        this.ⵠⵠᐃ[6].id = 6;
        this.ⵠⵠᐃ[113] = $v(68, 68, 0, ᐃΔ[273], 3);
        this.ⵠⵠᐃ[113].id = 113;
        this.ⵠⵠᐃ[114] = $v(68, 68, 0, ᐃΔ[358], 3);
        this.ⵠⵠᐃ[114].id = 114;
        this.ⵠⵠᐃ[115] = $v(68, 68, 0, ᐃΔ[348], 3);
        this.ⵠⵠᐃ[115].id = 115;
        this.ⵠⵠᐃ[162] = $v(68, 68, 0, ᐃΔ[349], 3);
        this.ⵠⵠᐃ[162].id = 162;
        this.ⵠⵠᐃ[160] = $v(68, 68, 0, ᐃΔ[350], 3);
        this.ⵠⵠᐃ[160].id = 160;
        this.ⵠⵠᐃ[8] = $v(68, 68, 0, ᐃΔ[274], 3);
        this.ⵠⵠᐃ[8].id = 8;
        this.ⵠⵠᐃ[117] = $v(68, 68, 0, ᐃΔ[351], 3);
        this.ⵠⵠᐃ[117].id = 117;
        this.ⵠⵠᐃ[116] = $v(68, 68, 0, ᐃΔ[275], 3);
        this.ⵠⵠᐃ[116].id = 116;
        this.ⵠⵠᐃ[118] = $v(68, 68, 0, ᐃΔ[276], 3);
        this.ⵠⵠᐃ[118].id = 118;
        this.ⵠⵠᐃ[195] = $v(68, 68, 0, ᐃΔ[352], 3);
        this.ⵠⵠᐃ[195].id = 195;
        this.ⵠⵠᐃ[161] = $v(68, 68, 0, ᐃΔ[353], 3);
        this.ⵠⵠᐃ[161].id = 161;
        this.ⵠⵠᐃ[163] = $v(68, 68, 0, ᐃΔ[354], 3);
        this.ⵠⵠᐃ[163].id = 163;
        this.ⵠⵠᐃ[164] = $v(68, 68, 0, ᐃΔ[355], 3);
        this.ⵠⵠᐃ[164].id = 164;
        this.ⵠⵠᐃ[165] = $v(68, 68, 0, ᐃΔ[356], 3);
        this.ⵠⵠᐃ[165].id = 165;
        this.ⵠⵠᐃ[166] = $v(68, 68, 0, ᐃΔ[357], 3);
        this.ⵠⵠᐃ[166].id = 166;
        this.ⵠⵠᐃ[167] = $v(68, 68, 0, ᐃΔ[359], 3);
        this.ⵠⵠᐃ[167].id = 167;
        this.ⵠⵠᐃ[168] = $v(68, 68, 0, ᐃΔ[382], 3);
        this.ⵠⵠᐃ[168].id = 168;
        this.ⵠⵠᐃ[169] = $v(68, 68, 0, ᐃΔ[383], 3);
        this.ⵠⵠᐃ[169].id = 169;
        this.ⵠⵠᐃ[170] = $v(68, 68, 0, ᐃΔ[384], 3);
        this.ⵠⵠᐃ[170].id = 170;
        this.ⵠⵠᐃ[2] = $v(68, 68, 0, ᐃΔ[386], 3);
        this.ⵠⵠᐃ[2].id = 2;
        this.ⵠⵠᐃ[237] = $v(68, 68, 0, ᐃΔ[1163], 3);
        this.ⵠⵠᐃ[237].id = 237;
        this.ⵠⵠᐃ[174] = $v(68, 68, 0, ᐃΔ[394], 3);
        this.ⵠⵠᐃ[174].id = 174;
        this.ⵠⵠᐃ[222] = $v(68, 68, 0, ᐃΔ[1036], 3);
        this.ⵠⵠᐃ[222].id = 222;
        this.ⵠⵠᐃ[231] = $v(68, 68, 0, ᐃΔ[1038], 3);
        this.ⵠⵠᐃ[231].id = 231;
        this.ⵠⵠᐃ[232] = $v(68, 68, 0, ᐃΔ[1040], 3);
        this.ⵠⵠᐃ[232].id = 232;
        this.ⵠⵠᐃ[234] = $v(68, 68, 0, ᐃΔ[1157], 3);
        this.ⵠⵠᐃ[234].id = 234;
        this.ⵠⵠᐃ[10] = $v(68, 68, 0, ᐃΔ[387], 3);
        this.ⵠⵠᐃ[10].id = 10;
        this.ⵠⵠᐃ[171] = $v(68, 68, 0, ᐃΔ[388], 3);
        this.ⵠⵠᐃ[171].id = 171;
        this.ⵠⵠᐃ[172] = $v(68, 68, 0, ᐃΔ[389], 3);
        this.ⵠⵠᐃ[172].id = 172;
        this.ⵠⵠᐃ[173] = $v(68, 68, 0, ᐃΔ[390], 3);
        this.ⵠⵠᐃ[173].id = 173;
        this.ⵠⵠᐃ[11] = $v(68, 68, 0, ᐃΔ[391], 3);
        this.ⵠⵠᐃ[11].id = 11;
        this.ⵠⵠᐃ[12] = $v(68, 68, 0, ᐃΔ[403], 3);
        this.ⵠⵠᐃ[12].id = 12;
        this.ⵠⵠᐃ[13] = $v(68, 68, 0, ᐃΔ[397], 3);
        this.ⵠⵠᐃ[13].id = 13;
        this.ⵠⵠᐃ[14] = $v(68, 68, 0, ᐃΔ[400], 3);
        this.ⵠⵠᐃ[14].id = 14;
        this.ⵠⵠᐃ[15] = $v(68, 68, 0, ᐃΔ[406], 3);
        this.ⵠⵠᐃ[15].id = 15;
        this.ⵠⵠᐃ[16] = $v(68, 68, 0, ᐃΔ[875], 3);
        this.ⵠⵠᐃ[16].id = 16;
        this.ⵠⵠᐃ[119] = $v(68, 68, 0, ᐃΔ[410], 3);
        this.ⵠⵠᐃ[119].id = 119;
        this.ⵠⵠᐃ[23] = $v(68, 68, 0, ᐃΔ[422], 3);
        this.ⵠⵠᐃ[23].id = 23;
        this.ⵠⵠᐃ[24] = $v(68, 68, 0, ᐃΔ[425], 3);
        this.ⵠⵠᐃ[24].id = 24;
        this.ⵠⵠᐃ[87] = $v(68, 68, 0, ᐃΔ[1229], 3);
        this.ⵠⵠᐃ[87].id = 87;
        this.ⵠⵠᐃ[88] = $v(68, 68, 0, ᐃΔ[1232], 3);
        this.ⵠⵠᐃ[88].id = 88;
        this.ⵠⵠᐃ[80] = $v(68, 68, 0, ᐃΔ[1139], 3);
        this.ⵠⵠᐃ[80].id = 80;
        this.ⵠⵠᐃ[81] = $v(68, 68, 0, ᐃΔ[1142], 3);
        this.ⵠⵠᐃ[81].id = 81;
        this.ⵠⵠᐃ[101] = $v(68, 68, 0, ᐃΔ[1167], 3);
        this.ⵠⵠᐃ[101].id = 101;
        this.ⵠⵠᐃ[64] = $v(68, 68, 0, ᐃΔ[571], 3);
        this.ⵠⵠᐃ[64].id = 64;
        this.ⵠⵠᐃ[71] = $v(68, 68, 0, ᐃΔ[1240], 3);
        this.ⵠⵠᐃ[71].id = 71;
        this.ⵠⵠᐃ[102] = $v(68, 68, 0, ᐃΔ[1170], 3);
        this.ⵠⵠᐃ[102].id = 102;
        this.ⵠⵠᐃ[65] = $v(68, 68, 0, ᐃΔ[574], 3);
        this.ⵠⵠᐃ[65].id = 65;
        this.ⵠⵠᐃ[72] = $v(68, 68, 0, ᐃΔ[1243], 3);
        this.ⵠⵠᐃ[72].id = 72;
        this.ⵠⵠᐃ[103] = $v(68, 68, 0, ᐃΔ[1173], 3);
        this.ⵠⵠᐃ[103].id = 103;
        this.ⵠⵠᐃ[66] = $v(68, 68, 0, ᐃΔ[577], 3);
        this.ⵠⵠᐃ[66].id = 66;
        this.ⵠⵠᐃ[73] = $v(68, 68, 0, ᐃΔ[1246], 3);
        this.ⵠⵠᐃ[73].id = 73;
        this.ⵠⵠᐃ[104] = $v(68, 68, 0, ᐃΔ[1176], 3);
        this.ⵠⵠᐃ[104].id = 104;
        this.ⵠⵠᐃ[67] = $v(68, 68, 0, ᐃΔ[580], 3);
        this.ⵠⵠᐃ[67].id = 67;
        this.ⵠⵠᐃ[74] = $v(68, 68, 0, ᐃΔ[1249], 3);
        this.ⵠⵠᐃ[74].id = 74;
        this.ⵠⵠᐃ[105] = $v(68, 68, 0, ᐃΔ[1179], 3);
        this.ⵠⵠᐃ[105].id = 105;
        this.ⵠⵠᐃ[68] = $v(68, 68, 0, ᐃΔ[583], 3);
        this.ⵠⵠᐃ[68].id = 68;
        this.ⵠⵠᐃ[75] = $v(68, 68, 0, ᐃΔ[1252], 3);
        this.ⵠⵠᐃ[75].id = 75;
        this.ⵠⵠᐃ[106] = $v(68, 68, 0, ᐃΔ[1182], 3);
        this.ⵠⵠᐃ[106].id = 106;
        this.ⵠⵠᐃ[69] = $v(68, 68, 0, ᐃΔ[586], 3);
        this.ⵠⵠᐃ[69].id = 69;
        this.ⵠⵠᐃ[76] = $v(68, 68, 0, ᐃΔ[1255], 3);
        this.ⵠⵠᐃ[76].id = 76;
        this.ⵠⵠᐃ[107] = $v(68, 68, 0, ᐃΔ[1185], 3);
        this.ⵠⵠᐃ[107].id = 107;
        this.ⵠⵠᐃ[70] = $v(68, 68, 0, ᐃΔ[589], 3);
        this.ⵠⵠᐃ[70].id = 70;
        this.ⵠⵠᐃ[94] = $v(68, 68, 0, ᐃΔ[1258], 3);
        this.ⵠⵠᐃ[94].id = 94;
        this.ⵠⵠᐃ[95] = $v(68, 68, 0, ᐃΔ[1261], 3);
        this.ⵠⵠᐃ[95].id = 95;
        this.ⵠⵠᐃ[96] = $v(68, 68, 0, ᐃΔ[1264], 3);
        this.ⵠⵠᐃ[96].id = 96;
        this.ⵠⵠᐃ[97] = $v(68, 68, 0, ᐃΔ[1267], 3);
        this.ⵠⵠᐃ[97].id = 97;
        this.ⵠⵠᐃ[98] = $v(68, 68, 0, ᐃΔ[1270], 3);
        this.ⵠⵠᐃ[98].id = 98;
        this.ⵠⵠᐃ[99] = $v(68, 68, 0, ᐃΔ[1273], 3);
        this.ⵠⵠᐃ[99].id = 99;
        this.ⵠⵠᐃ[58] = $v(68, 68, 0, ᐃΔ[828], 3);
        this.ⵠⵠᐃ[58].id = 58;
        this.ⵠⵠᐃ[25] = $v(68, 68, 0, ᐃΔ[431], 3);
        this.ⵠⵠᐃ[25].id = 25;
        this.ⵠⵠᐃ[26] = $v(68, 68, 0, ᐃΔ[434], 3);
        this.ⵠⵠᐃ[26].id = 26;
        this.ⵠⵠᐃ[27] = $v(68, 68, 0, ᐃΔ[437], 3);
        this.ⵠⵠᐃ[27].id = 27;
        this.ⵠⵠᐃ[28] = $v(68, 68, 0, ᐃΔ[440], 3);
        this.ⵠⵠᐃ[28].id = 28;
        this.ⵠⵠᐃ[120] = $v(68, 68, 0, ᐃΔ[443], 3);
        this.ⵠⵠᐃ[120].id = 120;
        this.ⵠⵠᐃ[29] = $v(68, 68, 0, ᐃΔ[385], 3);
        this.ⵠⵠᐃ[29].id = 29;
        this.ⵠⵠᐃ[121] = $v(68, 68, 0, ᐃΔ[446], 3);
        this.ⵠⵠᐃ[121].id = 121;
        this.ⵠⵠᐃ[30] = $v(68, 68, 0, ᐃΔ[457], 3);
        this.ⵠⵠᐃ[30].id = 30;
        this.ⵠⵠᐃ[9] = $v(68, 68, 0, ᐃΔ[862], 3);
        this.ⵠⵠᐃ[9].id = 9;
        this.ⵠⵠᐃ[31] = $v(68, 68, 0, ᐃΔ[459], 3);
        this.ⵠⵠᐃ[31].id = 31;
        this.ⵠⵠᐃ[32] = $v(68, 68, 0, ᐃΔ[1018], 3);
        this.ⵠⵠᐃ[32].id = 32;
        this.ⵠⵠᐃ[33] = $v(68, 68, 0, ᐃΔ[474], 3);
        this.ⵠⵠᐃ[33].id = 33;
        this.ⵠⵠᐃ[35] = $v(68, 68, 0, ᐃΔ[479], 3);
        this.ⵠⵠᐃ[35].id = 35;
        this.ⵠⵠᐃ[36] = $v(68, 68, 0, ᐃΔ[482], 3);
        this.ⵠⵠᐃ[36].id = 36;
        this.ⵠⵠᐃ[37] = $v(68, 68, 0, ᐃΔ[485], 3);
        this.ⵠⵠᐃ[37].id = 37;
        this.ⵠⵠᐃ[38] = $v(68, 68, 0, ᐃΔ[488], 3);
        this.ⵠⵠᐃ[38].id = 38;
        this.ⵠⵠᐃ[39] = $v(68, 68, 0, ᐃΔ[491], 3);
        this.ⵠⵠᐃ[39].id = 39;
        this.ⵠⵠᐃ[122] = $v(68, 68, 0, ᐃΔ[494], 3);
        this.ⵠⵠᐃ[122].id = 122;
        this.ⵠⵠᐃ[123] = $v(68, 68, 0, ᐃΔ[497], 3);
        this.ⵠⵠᐃ[123].id = 123;
        this.ⵠⵠᐃ[124] = $v(68, 68, 0, ᐃΔ[501], 3);
        this.ⵠⵠᐃ[124].id = 124;
        this.ⵠⵠᐃ[40] = $v(68, 68, 0, ᐃΔ[504], 3);
        this.ⵠⵠᐃ[40].id = 40;
        this.ⵠⵠᐃ[146] = $v(68, 68, 0, ᐃΔ[506], 3);
        this.ⵠⵠᐃ[146].id = 146;
        this.ⵠⵠᐃ[240] = $v(68, 68, 0, ᐃΔ[1234], 3);
        this.ⵠⵠᐃ[240].id = 240;
        this.ⵠⵠᐃ[147] = $v(68, 68, 0, ᐃΔ[514], 3);
        this.ⵠⵠᐃ[147].id = 147;
        this.ⵠⵠᐃ[148] = $v(68, 68, 0, ᐃΔ[520], 3);
        this.ⵠⵠᐃ[148].id = 148;
        this.ⵠⵠᐃ[149] = $v(68, 68, 0, ᐃΔ[522], 3);
        this.ⵠⵠᐃ[149].id = 149;
        this.ⵠⵠᐃ[150] = $v(68, 68, 0, ᐃΔ[524], 3);
        this.ⵠⵠᐃ[150].id = 150;
        this.ⵠⵠᐃ[151] = $v(68, 68, 0, ᐃΔ[531], 3);
        this.ⵠⵠᐃ[151].id = 151;
        this.ⵠⵠᐃ[158] = $v(68, 68, 0, ᐃΔ[534], 3);
        this.ⵠⵠᐃ[158].id = 158;
        this.ⵠⵠᐃ[159] = $v(68, 68, 0, ᐃΔ[554], 3);
        this.ⵠⵠᐃ[159].id = 159;
        this.ⵠⵠᐃ[43] = $v(68, 68, 0, ᐃΔ[543], 3);
        this.ⵠⵠᐃ[43].id = 43;
        this.ⵠⵠᐃ[45] = $v(68, 68, 0, ᐃΔ[552], 3);
        this.ⵠⵠᐃ[45].id = 45;
        this.ⵠⵠᐃ[125] = $v(68, 68, 0, ᐃΔ[606], 3);
        this.ⵠⵠᐃ[125].id = 125;
        this.ⵠⵠᐃ[221] = $v(68, 68, 0, ᐃΔ[1237], 3);
        this.ⵠⵠᐃ[221].id = 221;
        this.ⵠⵠᐃ[223] = $v(68, 68, 0, ᐃΔ[1029], 3);
        this.ⵠⵠᐃ[223].id = 223;
        this.ⵠⵠᐃ[224] = $v(68, 68, 0, ᐃΔ[1032], 3);
        this.ⵠⵠᐃ[224].id = 224;
        this.ⵠⵠᐃ[230] = $v(68, 68, 0, ᐃΔ[1118], 3);
        this.ⵠⵠᐃ[230].id = 230;
        this.ⵠⵠᐃ[89] = $v(68, 68, 0, ᐃΔ[1047], 3);
        this.ⵠⵠᐃ[89].id = 89;
        this.ⵠⵠᐃ[225] = $v(68, 68, 0, ᐃΔ[1050], 3);
        this.ⵠⵠᐃ[225].id = 225;
        this.ⵠⵠᐃ[227] = $v(68, 68, 0, ᐃΔ[1081], 3);
        this.ⵠⵠᐃ[227].id = 227;
        this.ⵠⵠᐃ[239] = $v(68, 68, 0, ᐃΔ[1225], 3);
        this.ⵠⵠᐃ[239].id = 239;
        this.ⵠⵠᐃ[228] = $v(68, 68, 0, ᐃΔ[1096], 3);
        this.ⵠⵠᐃ[228].id = 228;
        this.ⵠⵠᐃ[229] = $v(68, 68, 0, ᐃΔ[1111], 3);
        this.ⵠⵠᐃ[229].id = 229;
        this.ⵠⵠᐃ[226] = $v(68, 68, 0, ᐃΔ[1190], 3);
        this.ⵠⵠᐃ[226].id = 226;
        this.ⵠⵠᐃ[126] = $v(68, 68, 0, ᐃΔ[610], 3);
        this.ⵠⵠᐃ[126].id = 126;
        this.ⵠⵠᐃ[127] = $v(68, 68, 0, ᐃΔ[615], 3);
        this.ⵠⵠᐃ[127].id = 127;
        this.ⵠⵠᐃ[128] = $v(68, 68, 0, ᐃΔ[614], 3);
        this.ⵠⵠᐃ[128].id = 128;
        this.ⵠⵠᐃ[46] = $v(68, 68, 0, ᐃΔ[617], 3);
        this.ⵠⵠᐃ[46].id = 46;
        this.ⵠⵠᐃ[50] = $v(68, 68, 0, ᐃΔ[701], 3);
        this.ⵠⵠᐃ[50].id = 50;
        this.ⵠⵠᐃ[51] = $v(68, 68, 0, ᐃΔ[703], 3);
        this.ⵠⵠᐃ[51].id = 51;
        this.ⵠⵠᐃ[52] = $v(68, 68, 0, ᐃΔ[707], 3);
        this.ⵠⵠᐃ[52].id = 52;
        this.ⵠⵠᐃ[55] = $v(68, 68, 0, ᐃΔ[710], 3);
        this.ⵠⵠᐃ[55].id = 55;
        this.ⵠⵠᐃ[129] = $v(68, 68, 0, ᐃΔ[625], 3);
        this.ⵠⵠᐃ[129].id = 129;
        this.ⵠⵠᐃ[130] = $v(68, 68, 0, ᐃΔ[628], 3);
        this.ⵠⵠᐃ[130].id = 130;
        this.ⵠⵠᐃ[131] = $v(68, 68, 0, ᐃΔ[630], 3);
        this.ⵠⵠᐃ[131].id = 131;
        this.ⵠⵠᐃ[132] = $v(68, 68, 0, ᐃΔ[633], 3);
        this.ⵠⵠᐃ[132].id = 132;
        this.ⵠⵠᐃ[133] = $v(68, 68, 0, ᐃΔ[636], 3);
        this.ⵠⵠᐃ[133].id = 133;
        this.ⵠⵠᐃ[134] = $v(68, 68, 0, ᐃΔ[640], 3);
        this.ⵠⵠᐃ[134].id = 134;
        this.ⵠⵠᐃ[135] = $v(68, 68, 0, ᐃΔ[645], 3);
        this.ⵠⵠᐃ[135].id = 135;
        this.ⵠⵠᐃ[47] = $v(68, 68, 0, ᐃΔ[648], 3);
        this.ⵠⵠᐃ[47].id = 47;
        this.ⵠⵠᐃ[48] = $v(68, 68, 0, ᐃΔ[651], 3);
        this.ⵠⵠᐃ[48].id = 48;
        this.ⵠⵠᐃ[49] = $v(68, 68, 0, ᐃΔ[653], 3);
        this.ⵠⵠᐃ[49].id = 49;
        this.ⵠⵠᐃ[136] = $v(68, 68, 0, ᐃΔ[661], 3);
        this.ⵠⵠᐃ[136].id = 136;
        this.ⵠⵠᐃ[143] = $v(68, 68, 0, ᐃΔ[689], 3);
        this.ⵠⵠᐃ[143].id = 143;
        this.ⵠⵠᐃ[137] = $v(68, 68, 0, ᐃΔ[663], 3);
        this.ⵠⵠᐃ[137].id = 137;
        this.ⵠⵠᐃ[138] = $v(68, 68, 0, ᐃΔ[665], 3);
        this.ⵠⵠᐃ[138].id = 138;
        this.ⵠⵠᐃ[139] = $v(68, 68, 0, ᐃΔ[675], 3);
        this.ⵠⵠᐃ[139].id = 139;
        this.ⵠⵠᐃ[140] = $v(68, 68, 0, ᐃΔ[682], 3);
        this.ⵠⵠᐃ[140].id = 140;
        this.ⵠⵠᐃ[141] = $v(68, 68, 0, ᐃΔ[683], 3);
        this.ⵠⵠᐃ[141].id = 141;
        this.ⵠⵠᐃ[142] = $v(68, 68, 0, ᐃΔ[686], 3);
        this.ⵠⵠᐃ[142].id = 142;
        this.ⵠⵠᐃ[144] = $v(68, 68, 0, ᐃΔ[719], 3);
        this.ⵠⵠᐃ[144].id = 144;
        this.ⵠⵠᐃ[145] = $v(68, 68, 0, ᐃΔ[731], 3);
        this.ⵠⵠᐃ[145].id = 145;
        this.ⵠⵠᐃ[59] = $v(68, 68, 0, ᐃΔ[733], 3);
        this.ⵠⵠᐃ[59].id = 59;
        this.ⵠⵠᐃ[62] = $v(68, 68, 0, ᐃΔ[565], 3);
        this.ⵠⵠᐃ[62].id = 62;
        this.ⵠⵠᐃ[185] = $v(68, 68, 0, ᐃΔ[590], 3);
        this.ⵠⵠᐃ[185].id = 185;
        this.ⵠⵠᐃ[184] = $v(68, 68, 0, ᐃΔ[752], 3);
        this.ⵠⵠᐃ[184].id = 184;
        this.ⵠⵠᐃ[187] = $v(68, 68, 0, ᐃΔ[591], 3);
        this.ⵠⵠᐃ[187].id = 187;
        this.ⵠⵠᐃ[186] = $v(68, 68, 0, ᐃΔ[754], 3);
        this.ⵠⵠᐃ[186].id = 186;
        this.ⵠⵠᐃ[77] = $v(68, 68, 0, ᐃΔ[757], 3);
        this.ⵠⵠᐃ[77].id = 77;
        this.ⵠⵠᐃ[175] = $v(68, 68, 0, ᐃΔ[759], 3);
        this.ⵠⵠᐃ[175].id = 175;
        this.ⵠⵠᐃ[176] = $v(68, 68, 0, ᐃΔ[763], 3);
        this.ⵠⵠᐃ[176].id = 176;
        this.ⵠⵠᐃ[78] = $v(68, 68, 0, ᐃΔ[761], 3);
        this.ⵠⵠᐃ[78].id = 78;
        this.ⵠⵠᐃ[177] = $v(68, 68, 0, ᐃΔ[766], 3);
        this.ⵠⵠᐃ[177].id = 177;
        this.ⵠⵠᐃ[79] = $v(68, 68, 0, ᐃΔ[765], 3);
        this.ⵠⵠᐃ[79].id = 79;
        this.ⵠⵠᐃ[83] = $v(68, 68, 0, ᐃΔ[769], 3);
        this.ⵠⵠᐃ[83].id = 83;
        this.ⵠⵠᐃ[84] = $v(68, 68, 0, ᐃΔ[773], 3);
        this.ⵠⵠᐃ[84].id = 84;
        this.ⵠⵠᐃ[178] = $v(68, 68, 0, ᐃΔ[774], 3);
        this.ⵠⵠᐃ[178].id = 178;
        this.ⵠⵠᐃ[179] = $v(68, 68, 0, ᐃΔ[775], 3);
        this.ⵠⵠᐃ[179].id = 179;
        this.ⵠⵠᐃ[86] = $v(68, 68, 0, ᐃΔ[778], 3);
        this.ⵠⵠᐃ[86].id = 86;
        this.ⵠⵠᐃ[85] = $v(68, 68, 0, ᐃΔ[781], 3);
        this.ⵠⵠᐃ[85].id = 85;
        this.ⵠⵠᐃ[180] = $v(68, 68, 0, ᐃΔ[786], 3);
        this.ⵠⵠᐃ[180].id = 180;
        this.ⵠⵠᐃ[181] = $v(68, 68, 0, ᐃΔ[787], 3);
        this.ⵠⵠᐃ[181].id = 181;
        this.ⵠⵠᐃ[182] = $v(68, 68, 0, ᐃΔ[790], 3);
        this.ⵠⵠᐃ[182].id = 182;
        this.ⵠⵠᐃ[183] = $v(68, 68, 0, ᐃΔ[801], 3);
        this.ⵠⵠᐃ[183].id = 183;
        this.ⵠⵠᐃ[188] = $v(68, 68, 0, ᐃΔ[810], 3);
        this.ⵠⵠᐃ[188].id = 188;
        this.ⵠⵠᐃ[189] = $v(68, 68, 0, ᐃΔ[815], 3);
        this.ⵠⵠᐃ[189].id = 189;
        this.ⵠⵠᐃ[190] = $v(68, 68, 0, ᐃΔ[844], 3);
        this.ⵠⵠᐃ[190].id = 190;
        this.ⵠⵠᐃ[191] = $v(68, 68, 0, ᐃΔ[836], 3);
        this.ⵠⵠᐃ[191].id = 191;
        this.ⵠⵠᐃ[192] = $v(68, 68, 0, ᐃΔ[841], 3);
        this.ⵠⵠᐃ[192].id = 192;
        this.ⵠⵠᐃ[193] = $v(68, 68, 0, ᐃΔ[847], 3);
        this.ⵠⵠᐃ[193].id = 193;
        this.ⵠⵠᐃ[194] = $v(68, 68, 0, ᐃΔ[851], 3);
        this.ⵠⵠᐃ[194].id = 194;
        this.ⵠⵠᐃ[206] = $v(68, 68, 0, ᐃΔ[961], 3);
        this.ⵠⵠᐃ[206].id = 206;
        this.ⵠⵠᐃ[207] = $v(68, 68, 0, ᐃΔ[974], 3);
        this.ⵠⵠᐃ[207].id = 207;
        this.ⵠⵠᐃ[204] = $v(68, 68, 0, ᐃΔ[951], 3);
        this.ⵠⵠᐃ[204].id = 204;
        this.ⵠⵠᐃ[205] = $v(68, 68, 0, ᐃΔ[956], 3);
        this.ⵠⵠᐃ[205].id = 205;
        this.ⵠⵠᐃ[208] = $v(68, 68, 0, ᐃΔ[968], 3);
        this.ⵠⵠᐃ[208].id = 208;
        this.ⵠⵠᐃ[209] = $v(68, 68, 0, ᐃΔ[973], 3);
        this.ⵠⵠᐃ[209].id = 209;
        this.ⵠⵠᐃ[210] = $v(68, 68, 0, ᐃΔ[983], 3);
        this.ⵠⵠᐃ[210].id = 210;
        this.ⵠⵠᐃ[211] = $v(68, 68, 0, ᐃΔ[988], 3);
        this.ⵠⵠᐃ[211].id = 211;
        this.ⵠⵠᐃ[41] = $v(68, 68, 0, ᐃΔ[881], 3);
        this.ⵠⵠᐃ[41].id = 41;
        this.ⵠⵠᐃ[42] = $v(68, 68, 0, ᐃΔ[883], 3);
        this.ⵠⵠᐃ[42].id = 42;
        this.ⵠⵠᐃ[12] = $v(68, 68, 0, ᐃΔ[403], 3);
        this.ⵠⵠᐃ[12].id = 12;
        this.ⵠⵠᐃ[16] = $v(68, 68, 0, ᐃΔ[875], 3);
        this.ⵠⵠᐃ[16].id = 16;
        this.ⵠⵠᐃ[196] = $v(68, 68, 0, ᐃΔ[898], 3);
        this.ⵠⵠᐃ[196].id = 196;
        this.ⵠⵠᐃ[18] = $v(68, 68, 0, ᐃΔ[899], 3);
        this.ⵠⵠᐃ[18].id = 18;
        this.ⵠⵠᐃ[197] = $v(68, 68, 0, ᐃΔ[906], 3);
        this.ⵠⵠᐃ[197].id = 197;
        this.ⵠⵠᐃ[198] = $v(68, 68, 0, ᐃΔ[908], 3);
        this.ⵠⵠᐃ[198].id = 198;
        this.ⵠⵠᐃ[61] = $v(68, 68, 0, ᐃΔ[911], 3);
        this.ⵠⵠᐃ[61].id = 61;
        this.ⵠⵠᐃ[201] = $v(68, 68, 0, ᐃΔ[871], 3);
        this.ⵠⵠᐃ[201].id = 201;
        this.ⵠⵠᐃ[199] = $v(68, 68, 0, ᐃΔ[863], 3);
        this.ⵠⵠᐃ[199].id = 199;
        this.ⵠⵠᐃ[200] = $v(68, 68, 0, ᐃΔ[868], 3);
        this.ⵠⵠᐃ[200].id = 200;
        this.ΔΔΔΔⵠ = [];
        for (l = 0; l < 250; l++) {
            this.ΔΔΔΔⵠ[l] = $v(0, 0, 0, ᐃΔ[366]);
        }
        this.ΔⲆΔ = [];
        this.ΔⲆΔ[0] = $v(60, 60, 0, ᐃΔ[261], 3);
        this.ΔⲆΔ[0].id = 0;
        this.ΔⲆΔ[1] = $v(60, 60, 0, ᐃΔ[312], 3);
        this.ΔⲆΔ[1].id = 1;
        this.ΔⲆΔ[108] = $v(60, 60, 0, ᐃΔ[315], 3);
        this.ΔⲆΔ[108].id = 108;
        this.ΔⲆΔ[108].info.ᐃⵠ[2] = this.ΔⲆΔ[108].info.ᐃⵠ[0];
        this.ΔⲆΔ[109] = $v(60, 60, 0, ᐃΔ[316], 3);
        this.ΔⲆΔ[109].id = 109;
        this.ΔⲆΔ[109].info.ᐃⵠ[2] = this.ΔⲆΔ[109].info.ᐃⵠ[0];
        this.ΔⲆΔ[110] = $v(60, 60, 0, ᐃΔ[277], 3);
        this.ΔⲆΔ[110].id = 110;
        this.ΔⲆΔ[233] = $v(60, 60, 0, ᐃΔ[1154], 3);
        this.ΔⲆΔ[233].id = 233;
        this.ΔⲆΔ[111] = $v(60, 60, 0, ᐃΔ[297], 3);
        this.ΔⲆΔ[111].id = 111;
        this.ΔⲆΔ[111].info.ᐃⵠ[2] = this.ΔⲆΔ[111].info.ᐃⵠ[0];
        this.ΔⲆΔ[112] = $v(60, 60, 0, ᐃΔ[298], 3);
        this.ΔⲆΔ[112].id = 112;
        this.ΔⲆΔ[112].info.ᐃⵠ[2] = this.ΔⲆΔ[112].info.ᐃⵠ[0];
        this.ΔⲆΔ[3] = $v(60, 60, 0, ᐃΔ[258], 3);
        this.ΔⲆΔ[3].id = 3;
        this.ΔⲆΔ[4] = $v(60, 60, 0, ᐃΔ[296], 3);
        this.ΔⲆΔ[4].id = 4;
        this.ΔⲆΔ[5] = $v(60, 60, 0, ᐃΔ[292], 3);
        this.ΔⲆΔ[5].id = 5;
        this.ΔⲆΔ[57] = $v(60, 60, 0, ᐃΔ[829], 3);
        this.ΔⲆΔ[57].id = 57;
        this.ΔⲆΔ[6] = $v(60, 60, 0, ᐃΔ[293], 3);
        this.ΔⲆΔ[6].id = 6;
        this.ΔⲆΔ[113] = $v(60, 60, 0, ᐃΔ[309], 3);
        this.ΔⲆΔ[113].id = 113;
        this.ΔⲆΔ[114] = $v(60, 60, 0, ᐃΔ[310], 3);
        this.ΔⲆΔ[114].id = 114;
        this.ΔⲆΔ[115] = $v(60, 60, 0, ᐃΔ[311], 3);
        this.ΔⲆΔ[115].id = 115;
        this.ΔⲆΔ[162] = $v(60, 60, 0, ᐃΔ[317], 3);
        this.ΔⲆΔ[162].id = 162;
        this.ΔⲆΔ[160] = $v(60, 60, 0, ᐃΔ[319], 3);
        this.ΔⲆΔ[160].id = 160;
        this.ΔⲆΔ[8] = $v(60, 60, 0, ᐃΔ[313], 3);
        this.ΔⲆΔ[8].id = 8;
        this.ΔⲆΔ[117] = $v(60, 60, 0, ᐃΔ[323], 3);
        this.ΔⲆΔ[117].id = 117;
        this.ΔⲆΔ[116] = $v(60, 60, 0, ᐃΔ[300], 3);
        this.ΔⲆΔ[116].id = 116;
        this.ΔⲆΔ[118] = $v(60, 60, 0, ᐃΔ[328], 3);
        this.ΔⲆΔ[118].id = 118;
        this.ΔⲆΔ[195] = $v(60, 60, 0, ᐃΔ[303], 3);
        this.ΔⲆΔ[195].id = 195;
        this.ΔⲆΔ[161] = $v(60, 60, 0, ᐃΔ[305], 3);
        this.ΔⲆΔ[161].id = 161;
        this.ΔⲆΔ[161].info.ᐃⵠ[2] = this.ΔⲆΔ[161].info.ᐃⵠ[0];
        this.ΔⲆΔ[163] = $v(60, 60, 0, ᐃΔ[329], 3);
        this.ΔⲆΔ[163].id = 163;
        this.ΔⲆΔ[164] = $v(60, 60, 0, ᐃΔ[330], 3);
        this.ΔⲆΔ[164].id = 164;
        this.ΔⲆΔ[165] = $v(60, 60, 0, ᐃΔ[331], 3);
        this.ΔⲆΔ[165].id = 165;
        this.ΔⲆΔ[166] = $v(60, 60, 0, ᐃΔ[335], 3);
        this.ΔⲆΔ[166].id = 166;
        this.ΔⲆΔ[167] = $v(60, 60, 0, ᐃΔ[337], 3);
        this.ΔⲆΔ[167].id = 167;
        this.ΔⲆΔ[168] = $v(60, 60, 0, ᐃΔ[361], 3);
        this.ΔⲆΔ[168].id = 168;
        this.ΔⲆΔ[169] = $v(60, 60, 0, ᐃΔ[362], 3);
        this.ΔⲆΔ[169].id = 169;
        this.ΔⲆΔ[170] = $v(60, 60, 0, ᐃΔ[364], 3);
        this.ΔⲆΔ[170].id = 170;
        this.ΔⲆΔ[29] = $v(60, 60, 0, ᐃΔ[392], 3);
        this.ΔⲆΔ[29].id = 29;
        this.ΔⲆΔ[10] = $v(60, 60, 0, ᐃΔ[369], 3);
        this.ΔⲆΔ[10].id = 10;
        this.ΔⲆΔ[171] = $v(60, 60, 0, ᐃΔ[372], 3);
        this.ΔⲆΔ[171].id = 171;
        this.ΔⲆΔ[172] = $v(60, 60, 0, ᐃΔ[375], 3);
        this.ΔⲆΔ[172].id = 172;
        this.ΔⲆΔ[173] = $v(60, 60, 0, ᐃΔ[378], 3);
        this.ΔⲆΔ[173].id = 173;
        this.ΔⲆΔ[2] = $v(60, 60, 0, ᐃΔ[368], 3);
        this.ΔⲆΔ[2].id = 2;
        this.ΔⲆΔ[2].info.ᐃⵠ[2] = this.ΔⲆΔ[2].info.ᐃⵠ[0];
        this.ΔⲆΔ[237] = $v(60, 60, 0, ᐃΔ[1162], 3);
        this.ΔⲆΔ[237].id = 237;
        this.ΔⲆΔ[237].info.ᐃⵠ[2] = this.ΔⲆΔ[237].info.ᐃⵠ[0];
        this.ΔⲆΔ[174] = $v(60, 60, 0, ᐃΔ[393], 3);
        this.ΔⲆΔ[174].id = 174;
        this.ΔⲆΔ[174].info.ᐃⵠ[2] = this.ΔⲆΔ[174].info.ᐃⵠ[0];
        this.ΔⲆΔ[222] = $v(60, 60, 0, ᐃΔ[1035], 3);
        this.ΔⲆΔ[222].id = 222;
        this.ΔⲆΔ[231] = $v(60, 60, 0, ᐃΔ[1037], 3);
        this.ΔⲆΔ[231].id = 231;
        this.ΔⲆΔ[232] = $v(60, 60, 0, ᐃΔ[1039], 3);
        this.ΔⲆΔ[232].id = 232;
        this.ΔⲆΔ[234] = $v(60, 60, 0, ᐃΔ[1156], 3);
        this.ΔⲆΔ[234].id = 234;
        this.ΔⲆΔ[10] = $v(60, 60, 0, ᐃΔ[369], 3);
        this.ΔⲆΔ[10].id = 10;
        this.ΔⲆΔ[11] = $v(60, 60, 0, ᐃΔ[381], 3);
        this.ΔⲆΔ[11].id = 11;
        this.ΔⲆΔ[12] = $v(60, 60, 0, ᐃΔ[401], 3);
        this.ΔⲆΔ[12].id = 12;
        this.ΔⲆΔ[13] = $v(60, 60, 0, ᐃΔ[395], 3);
        this.ΔⲆΔ[13].id = 13;
        this.ΔⲆΔ[14] = $v(60, 60, 0, ᐃΔ[398], 3);
        this.ΔⲆΔ[14].id = 14;
        this.ΔⲆΔ[15] = $v(60, 60, 0, ᐃΔ[404], 3);
        this.ΔⲆΔ[15].id = 15;
        this.ΔⲆΔ[16] = $v(60, 60, 0, ᐃΔ[874], 3);
        this.ΔⲆΔ[16].id = 16;
        this.ΔⲆΔ[119] = $v(60, 60, 0, ᐃΔ[408], 3);
        this.ΔⲆΔ[119].id = 119;
        this.ΔⲆΔ[23] = $v(60, 60, 0, ᐃΔ[420], 3);
        this.ΔⲆΔ[23].id = 23;
        this.ΔⲆΔ[24] = $v(60, 60, 0, ᐃΔ[423], 3);
        this.ΔⲆΔ[24].id = 24;
        this.ΔⲆΔ[87] = $v(60, 60, 0, ᐃΔ[1227], 3);
        this.ΔⲆΔ[87].id = 87;
        this.ΔⲆΔ[88] = $v(60, 60, 0, ᐃΔ[1230], 3);
        this.ΔⲆΔ[88].id = 88;
        this.ΔⲆΔ[80] = $v(60, 60, 0, ᐃΔ[1137], 3);
        this.ΔⲆΔ[80].id = 80;
        this.ΔⲆΔ[81] = $v(60, 60, 0, ᐃΔ[1140], 3);
        this.ΔⲆΔ[81].id = 81;
        this.ΔⲆΔ[64] = $v(60, 60, 0, ᐃΔ[569], 3);
        this.ΔⲆΔ[64].id = 64;
        this.ΔⲆΔ[101] = $v(60, 60, 0, ᐃΔ[1166], 3);
        this.ΔⲆΔ[101].id = 101;
        this.ΔⲆΔ[71] = $v(60, 60, 0, ᐃΔ[1239], 3);
        this.ΔⲆΔ[71].id = 71;
        this.ΔⲆΔ[65] = $v(60, 60, 0, ᐃΔ[572], 3);
        this.ΔⲆΔ[65].id = 65;
        this.ΔⲆΔ[102] = $v(60, 60, 0, ᐃΔ[1169], 3);
        this.ΔⲆΔ[102].id = 102;
        this.ΔⲆΔ[72] = $v(60, 60, 0, ᐃΔ[1242], 3);
        this.ΔⲆΔ[72].id = 72;
        this.ΔⲆΔ[66] = $v(60, 60, 0, ᐃΔ[575], 3);
        this.ΔⲆΔ[66].id = 66;
        this.ΔⲆΔ[103] = $v(60, 60, 0, ᐃΔ[1172], 3);
        this.ΔⲆΔ[103].id = 103;
        this.ΔⲆΔ[73] = $v(60, 60, 0, ᐃΔ[1245], 3);
        this.ΔⲆΔ[73].id = 73;
        this.ΔⲆΔ[67] = $v(60, 60, 0, ᐃΔ[578], 3);
        this.ΔⲆΔ[67].id = 67;
        this.ΔⲆΔ[104] = $v(60, 60, 0, ᐃΔ[1175], 3);
        this.ΔⲆΔ[104].id = 104;
        this.ΔⲆΔ[74] = $v(60, 60, 0, ᐃΔ[1248], 3);
        this.ΔⲆΔ[74].id = 74;
        this.ΔⲆΔ[68] = $v(60, 60, 0, ᐃΔ[581], 3);
        this.ΔⲆΔ[68].id = 68;
        this.ΔⲆΔ[105] = $v(60, 60, 0, ᐃΔ[1178], 3);
        this.ΔⲆΔ[105].id = 105;
        this.ΔⲆΔ[75] = $v(60, 60, 0, ᐃΔ[1251], 3);
        this.ΔⲆΔ[75].id = 75;
        this.ΔⲆΔ[69] = $v(60, 60, 0, ᐃΔ[584], 3);
        this.ΔⲆΔ[69].id = 69;
        this.ΔⲆΔ[106] = $v(60, 60, 0, ᐃΔ[1181], 3);
        this.ΔⲆΔ[106].id = 106;
        this.ΔⲆΔ[76] = $v(60, 60, 0, ᐃΔ[1254], 3);
        this.ΔⲆΔ[76].id = 76;
        this.ΔⲆΔ[70] = $v(60, 60, 0, ᐃΔ[587], 3);
        this.ΔⲆΔ[70].id = 70;
        this.ΔⲆΔ[107] = $v(60, 60, 0, ᐃΔ[1184], 3);
        this.ΔⲆΔ[107].id = 107;
        this.ΔⲆΔ[94] = $v(60, 60, 0, ᐃΔ[1257], 3);
        this.ΔⲆΔ[94].id = 94;
        this.ΔⲆΔ[95] = $v(60, 60, 0, ᐃΔ[1260], 3);
        this.ΔⲆΔ[95].id = 95;
        this.ΔⲆΔ[96] = $v(60, 60, 0, ᐃΔ[1263], 3);
        this.ΔⲆΔ[96].id = 96;
        this.ΔⲆΔ[97] = $v(60, 60, 0, ᐃΔ[1266], 3);
        this.ΔⲆΔ[97].id = 97;
        this.ΔⲆΔ[98] = $v(60, 60, 0, ᐃΔ[1269], 3);
        this.ΔⲆΔ[98].id = 98;
        this.ΔⲆΔ[99] = $v(60, 60, 0, ᐃΔ[1272], 3);
        this.ΔⲆΔ[99].id = 99;
        this.ΔⲆΔ[58] = $v(60, 60, 0, ᐃΔ[826], 3);
        this.ΔⲆΔ[58].id = 58;
        this.ΔⲆΔ[25] = $v(60, 60, 0, ᐃΔ[429], 3);
        this.ΔⲆΔ[25].id = 25;
        this.ΔⲆΔ[26] = $v(60, 60, 0, ᐃΔ[432], 3);
        this.ΔⲆΔ[26].id = 26;
        this.ΔⲆΔ[27] = $v(60, 60, 0, ᐃΔ[435], 3);
        this.ΔⲆΔ[27].id = 27;
        this.ΔⲆΔ[28] = $v(60, 60, 0, ᐃΔ[438], 3);
        this.ΔⲆΔ[28].id = 28;
        this.ΔⲆΔ[120] = $v(60, 60, 0, ᐃΔ[441], 3);
        this.ΔⲆΔ[120].id = 120;
        this.ΔⲆΔ[120].info.ᐃⵠ[2] = this.ΔⲆΔ[120].info.ᐃⵠ[0];
        this.ΔⲆΔ[29] = $v(60, 60, 0, ᐃΔ[392], 3);
        this.ΔⲆΔ[29].id = 29;
        this.ΔⲆΔ[121] = $v(60, 60, 0, ᐃΔ[418], 3);
        this.ΔⲆΔ[121].id = 121;
        this.ΔⲆΔ[121].info.ᐃⵠ[2] = this.ΔⲆΔ[121].info.ᐃⵠ[0];
        this.ΔⲆΔ[30] = $v(60, 60, 0, ᐃΔ[455], 3);
        this.ΔⲆΔ[30].id = 30;
        this.ΔⲆΔ[9] = $v(60, 60, 0, ᐃΔ[860], 3);
        this.ΔⲆΔ[9].id = 9;
        this.ΔⲆΔ[31] = $v(60, 60, 0, ᐃΔ[458], 3);
        this.ΔⲆΔ[31].id = 31;
        this.ΔⲆΔ[32] = $v(60, 60, 0, ᐃΔ[1017], 3);
        this.ΔⲆΔ[32].id = 32;
        this.ΔⲆΔ[33] = $v(60, 60, 0, ᐃΔ[472], 3);
        this.ΔⲆΔ[33].id = 33;
        this.ΔⲆΔ[35] = $v(60, 60, 0, ᐃΔ[477], 3);
        this.ΔⲆΔ[35].id = 35;
        this.ΔⲆΔ[36] = $v(60, 60, 0, ᐃΔ[480], 3);
        this.ΔⲆΔ[36].id = 36;
        this.ΔⲆΔ[37] = $v(60, 60, 0, ᐃΔ[483], 3);
        this.ΔⲆΔ[37].id = 37;
        this.ΔⲆΔ[38] = $v(60, 60, 0, ᐃΔ[486], 3);
        this.ΔⲆΔ[38].id = 38;
        this.ΔⲆΔ[39] = $v(60, 60, 0, ᐃΔ[489], 3);
        this.ΔⲆΔ[39].id = 39;
        this.ΔⲆΔ[122] = $v(60, 60, 0, ᐃΔ[492], 3);
        this.ΔⲆΔ[122].id = 122;
        this.ΔⲆΔ[123] = $v(60, 60, 0, ᐃΔ[495], 3);
        this.ΔⲆΔ[123].id = 123;
        this.ΔⲆΔ[124] = $v(60, 60, 0, ᐃΔ[499], 3);
        this.ΔⲆΔ[124].id = 124;
        this.ΔⲆΔ[40] = $v(60, 60, 0, ᐃΔ[502], 3);
        this.ΔⲆΔ[40].id = 40;
        this.ΔⲆΔ[146] = $v(60, 60, 0, ᐃΔ[505], 3);
        this.ΔⲆΔ[146].id = 146;
        this.ΔⲆΔ[146].info.ᐃⵠ[2] = this.ΔⲆΔ[146].info.ᐃⵠ[0];
        this.ΔⲆΔ[240] = $v(60, 60, 0, ᐃΔ[1233], 3);
        this.ΔⲆΔ[240].id = 240;
        this.ΔⲆΔ[240].info.ᐃⵠ[2] = this.ΔⲆΔ[240].info.ᐃⵠ[0];
        this.ΔⲆΔ[147] = $v(60, 60, 0, ᐃΔ[513], 3);
        this.ΔⲆΔ[147].id = 147;
        this.ΔⲆΔ[147].info.ᐃⵠ[2] = this.ΔⲆΔ[147].info.ᐃⵠ[0];
        this.ΔⲆΔ[148] = $v(60, 60, 0, ᐃΔ[518], 3);
        this.ΔⲆΔ[148].id = 148;
        this.ΔⲆΔ[148].info.ᐃⵠ[2] = this.ΔⲆΔ[148].info.ᐃⵠ[0];
        this.ΔⲆΔ[149] = $v(60, 60, 0, ᐃΔ[521], 3);
        this.ΔⲆΔ[149].id = 149;
        this.ΔⲆΔ[150] = $v(60, 60, 0, ᐃΔ[523], 3);
        this.ΔⲆΔ[150].id = 150;
        this.ΔⲆΔ[151] = $v(60, 60, 0, ᐃΔ[529], 3);
        this.ΔⲆΔ[151].id = 151;
        this.ΔⲆΔ[158] = $v(60, 60, 0, ᐃΔ[532], 3);
        this.ΔⲆΔ[158].id = 158;
        this.ΔⲆΔ[159] = $v(60, 60, 0, ᐃΔ[553], 3);
        this.ΔⲆΔ[159].id = 159;
        this.ΔⲆΔ[43] = $v(60, 60, 0, ᐃΔ[541], 3);
        this.ΔⲆΔ[43].id = 43;
        this.ΔⲆΔ[45] = $v(60, 60, 0, ᐃΔ[550], 3);
        this.ΔⲆΔ[45].id = 45;
        this.ΔⲆΔ[125] = $v(60, 60, 0, ᐃΔ[605], 3);
        this.ΔⲆΔ[125].id = 125;
        this.ΔⲆΔ[221] = $v(60, 60, 0, ᐃΔ[1236], 3);
        this.ΔⲆΔ[221].id = 221;
        this.ΔⲆΔ[223] = $v(60, 60, 0, ᐃΔ[1028], 3);
        this.ΔⲆΔ[223].id = 223;
        this.ΔⲆΔ[224] = $v(60, 60, 0, ᐃΔ[1031], 3);
        this.ΔⲆΔ[224].id = 224;
        this.ΔⲆΔ[230] = $v(60, 60, 0, ᐃΔ[1117], 3);
        this.ΔⲆΔ[230].id = 230;
        this.ΔⲆΔ[89] = $v(60, 60, 0, ᐃΔ[1046], 3);
        this.ΔⲆΔ[89].id = 89;
        this.ΔⲆΔ[225] = $v(60, 60, 0, ᐃΔ[1049], 3);
        this.ΔⲆΔ[225].id = 225;
        this.ΔⲆΔ[226] = $v(60, 60, 0, ᐃΔ[1189], 3);
        this.ΔⲆΔ[226].id = 226;
        this.ΔⲆΔ[227] = $v(60, 60, 0, ᐃΔ[1080], 3);
        this.ΔⲆΔ[227].id = 227;
        this.ΔⲆΔ[239] = $v(60, 60, 0, ᐃΔ[1224], 3);
        this.ΔⲆΔ[239].id = 239;
        this.ΔⲆΔ[228] = $v(60, 60, 0, ᐃΔ[1095], 3);
        this.ΔⲆΔ[228].id = 228;
        this.ΔⲆΔ[229] = $v(60, 60, 0, ᐃΔ[1110], 3);
        this.ΔⲆΔ[229].id = 229;
        this.ΔⲆΔ[126] = $v(60, 60, 0, ᐃΔ[609], 3);
        this.ΔⲆΔ[126].id = 126;
        this.ΔⲆΔ[126].info.ᐃⵠ[2] = this.ΔⲆΔ[126].info.ᐃⵠ[0];
        this.ΔⲆΔ[127] = $v(60, 60, 0, ᐃΔ[613], 3);
        this.ΔⲆΔ[127].id = 127;
        this.ΔⲆΔ[128] = $v(60, 60, 0, ᐃΔ[612], 3);
        this.ΔⲆΔ[128].id = 128;
        this.ΔⲆΔ[46] = $v(60, 60, 0, ᐃΔ[616], 3);
        this.ΔⲆΔ[46].id = 46;
        this.ΔⲆΔ[50] = $v(60, 60, 0, ᐃΔ[699], 3);
        this.ΔⲆΔ[50].id = 50;
        this.ΔⲆΔ[51] = $v(60, 60, 0, ᐃΔ[702], 3);
        this.ΔⲆΔ[51].id = 51;
        this.ΔⲆΔ[52] = $v(60, 60, 0, ᐃΔ[705], 3);
        this.ΔⲆΔ[52].id = 52;
        this.ΔⲆΔ[55] = $v(60, 60, 0, ᐃΔ[709], 3);
        this.ΔⲆΔ[55].id = 55;
        this.ΔⲆΔ[129] = $v(60, 60, 0, ᐃΔ[624], 3);
        this.ΔⲆΔ[129].id = 129;
        this.ΔⲆΔ[129].info.ᐃⵠ[2] = this.ΔⲆΔ[129].info.ᐃⵠ[0];
        this.ΔⲆΔ[130] = $v(60, 60, 0, ᐃΔ[626], 3);
        this.ΔⲆΔ[130].id = 130;
        this.ΔⲆΔ[131] = $v(60, 60, 0, ᐃΔ[629], 3);
        this.ΔⲆΔ[131].id = 131;
        this.ΔⲆΔ[131].info.ᐃⵠ[2] = this.ΔⲆΔ[131].info.ᐃⵠ[0];
        this.ΔⲆΔ[132] = $v(60, 60, 0, ᐃΔ[631], 3);
        this.ΔⲆΔ[132].id = 132;
        this.ΔⲆΔ[133] = $v(60, 60, 0, ᐃΔ[634], 3);
        this.ΔⲆΔ[133].id = 133;
        this.ΔⲆΔ[134] = $v(60, 60, 0, ᐃΔ[639], 3);
        this.ΔⲆΔ[134].id = 134;
        this.ΔⲆΔ[134].info.ᐃⵠ[2] = this.ΔⲆΔ[134].info.ᐃⵠ[0];
        this.ΔⲆΔ[135] = $v(60, 60, 0, ᐃΔ[644], 3);
        this.ΔⲆΔ[135].id = 135;
        this.ΔⲆΔ[47] = $v(60, 60, 0, ᐃΔ[646], 3);
        this.ΔⲆΔ[47].id = 47;
        this.ΔⲆΔ[48] = $v(60, 60, 0, ᐃΔ[649], 3);
        this.ΔⲆΔ[48].id = 48;
        this.ΔⲆΔ[49] = $v(60, 60, 0, ᐃΔ[652], 3);
        this.ΔⲆΔ[49].id = 49;
        this.ΔⲆΔ[136] = $v(60, 60, 0, ᐃΔ[659], 3);
        this.ΔⲆΔ[136].id = 136;
        this.ΔⲆΔ[143] = $v(60, 60, 0, ᐃΔ[143], 3);
        this.ΔⲆΔ[143].id = 143;
        this.ΔⲆΔ[137] = $v(60, 60, 0, ᐃΔ[662], 3);
        this.ΔⲆΔ[137].id = 137;
        this.ΔⲆΔ[138] = $v(60, 60, 0, ᐃΔ[664], 3);
        this.ΔⲆΔ[138].id = 138;
        this.ΔⲆΔ[139] = $v(60, 60, 0, ᐃΔ[674], 3);
        this.ΔⲆΔ[139].id = 139;
        this.ΔⲆΔ[139].info.ᐃⵠ[2] = this.ΔⲆΔ[139].info.ᐃⵠ[0];
        this.ΔⲆΔ[140] = $v(60, 60, 0, ᐃΔ[140], 3);
        this.ΔⲆΔ[140].id = 140;
        this.ΔⲆΔ[140].info.ᐃⵠ[2] = this.ΔⲆΔ[140].info.ᐃⵠ[0];
        this.ΔⲆΔ[141] = $v(60, 60, 0, ᐃΔ[685], 3);
        this.ΔⲆΔ[141].id = 141;
        this.ΔⲆΔ[142] = $v(60, 60, 0, ᐃΔ[142], 3);
        this.ΔⲆΔ[142].id = 142;
        this.ΔⲆΔ[142].info.ᐃⵠ[2] = this.ΔⲆΔ[142].info.ᐃⵠ[0];
        this.ΔⲆΔ[144] = $v(60, 60, 0, ᐃΔ[717], 3);
        this.ΔⲆΔ[144].id = 144;
        this.ΔⲆΔ[145] = $v(60, 60, 0, ᐃΔ[145], 3);
        this.ΔⲆΔ[145].id = 145;
        this.ΔⲆΔ[59] = $v(60, 60, 0, ᐃΔ[732], 3);
        this.ΔⲆΔ[59].id = 59;
        this.ΔⲆΔ[62] = $v(60, 60, 0, ᐃΔ[563], 3);
        this.ΔⲆΔ[62].id = 62;
        this.ΔⲆΔ[185] = $v(60, 60, 0, ᐃΔ[252], 3);
        this.ΔⲆΔ[185].id = 185;
        this.ΔⲆΔ[185].info.ᐃⵠ[2] = this.ΔⲆΔ[185].info.ᐃⵠ[0];
        this.ΔⲆΔ[184] = $v(60, 60, 0, ᐃΔ[751], 3);
        this.ΔⲆΔ[184].id = 184;
        this.ΔⲆΔ[184].info.ᐃⵠ[2] = this.ΔⲆΔ[184].info.ᐃⵠ[0];
        this.ΔⲆΔ[17] = $v(60, 60, 0, ᐃΔ[877], 3);
        this.ΔⲆΔ[17].id = 17;
        this.ΔⲆΔ[63] = $v(60, 60, 0, ᐃΔ[566], 3);
        this.ΔⲆΔ[63].id = 63;
        this.ΔⲆΔ[187] = $v(60, 60, 0, ᐃΔ[253], 3);
        this.ΔⲆΔ[187].id = 187;
        this.ΔⲆΔ[187].info.ᐃⵠ[2] = this.ΔⲆΔ[187].info.ᐃⵠ[0];
        this.ΔⲆΔ[186] = $v(60, 60, 0, ᐃΔ[753], 3);
        this.ΔⲆΔ[186].id = 186;
        this.ΔⲆΔ[186].info.ᐃⵠ[2] = this.ΔⲆΔ[186].info.ᐃⵠ[0];
        this.ΔⲆΔ[77] = $v(60, 60, 0, ᐃΔ[756], 3);
        this.ΔⲆΔ[77].id = 77;
        this.ΔⲆΔ[175] = $v(60, 60, 0, ᐃΔ[176], 3);
        this.ΔⲆΔ[175].id = 175;
        this.ΔⲆΔ[175].info.ᐃⵠ[2] = this.ΔⲆΔ[175].info.ᐃⵠ[0];
        this.ΔⲆΔ[176] = $v(60, 60, 0, ᐃΔ[177], 3);
        this.ΔⲆΔ[176].id = 176;
        this.ΔⲆΔ[176].info.ᐃⵠ[2] = this.ΔⲆΔ[176].info.ᐃⵠ[0];
        this.ΔⲆΔ[78] = $v(60, 60, 0, ᐃΔ[760], 3);
        this.ΔⲆΔ[78].id = 78;
        this.ΔⲆΔ[177] = $v(60, 60, 0, ᐃΔ[175], 3);
        this.ΔⲆΔ[177].id = 177;
        this.ΔⲆΔ[177].info.ᐃⵠ[2] = this.ΔⲆΔ[177].info.ᐃⵠ[0];
        this.ΔⲆΔ[79] = $v(60, 60, 0, ᐃΔ[764], 3);
        this.ΔⲆΔ[79].id = 79;
        this.ΔⲆΔ[83] = $v(60, 60, 0, ᐃΔ[767], 3);
        this.ΔⲆΔ[83].id = 83;
        this.ΔⲆΔ[84] = $v(60, 60, 0, ᐃΔ[771], 3);
        this.ΔⲆΔ[84].id = 84;
        this.ΔⲆΔ[178] = $v(60, 60, 0, ᐃΔ[178], 3);
        this.ΔⲆΔ[178].id = 178;
        this.ΔⲆΔ[179] = $v(60, 60, 0, ᐃΔ[179], 3);
        this.ΔⲆΔ[179].id = 179;
        this.ΔⲆΔ[86] = $v(60, 60, 0, ᐃΔ[776], 3);
        this.ΔⲆΔ[86].id = 86;
        this.ΔⲆΔ[85] = $v(60, 60, 0, ᐃΔ[779], 3);
        this.ΔⲆΔ[85].id = 85;
        this.ΔⲆΔ[180] = $v(60, 60, 0, ᐃΔ[180], 3);
        this.ΔⲆΔ[180].id = 180;
        this.ΔⲆΔ[181] = $v(60, 60, 0, ᐃΔ[181], 3);
        this.ΔⲆΔ[181].id = 181;
        this.ΔⲆΔ[182] = $v(60, 60, 0, ᐃΔ[789], 3);
        this.ΔⲆΔ[182].id = 182;
        this.ΔⲆΔ[183] = $v(60, 60, 0, ᐃΔ[800], 3);
        this.ΔⲆΔ[183].id = 183;
        this.ΔⲆΔ[188] = $v(60, 60, 0, ᐃΔ[808], 3);
        this.ΔⲆΔ[188].id = 188;
        this.ΔⲆΔ[189] = $v(60, 60, 0, ᐃΔ[814], 3);
        this.ΔⲆΔ[189].id = 189;
        this.ΔⲆΔ[191] = $v(60, 60, 0, ᐃΔ[834], 3);
        this.ΔⲆΔ[191].id = 191;
        this.ΔⲆΔ[192] = $v(60, 60, 0, ᐃΔ[840], 3);
        this.ΔⲆΔ[192].id = 192;
        this.ΔⲆΔ[190] = $v(60, 60, 0, ᐃΔ[842], 3);
        this.ΔⲆΔ[190].id = 190;
        this.ΔⲆΔ[193] = $v(60, 60, 0, ᐃΔ[845], 3);
        this.ΔⲆΔ[193].id = 193;
        this.ΔⲆΔ[194] = $v(60, 60, 0, ᐃΔ[850], 3);
        this.ΔⲆΔ[194].id = 194;
        this.ΔⲆΔ[204] = $v(60, 60, 0, ᐃΔ[949], 3);
        this.ΔⲆΔ[204].id = 204;
        this.ΔⲆΔ[205] = $v(60, 60, 0, ᐃΔ[955], 3);
        this.ΔⲆΔ[205].id = 205;
        this.ΔⲆΔ[206] = $v(60, 60, 0, ᐃΔ[959], 3);
        this.ΔⲆΔ[206].id = 206;
        this.ΔⲆΔ[207] = $v(60, 60, 0, ᐃΔ[965], 3);
        this.ΔⲆΔ[207].id = 207;
        this.ΔⲆΔ[208] = $v(60, 60, 0, ᐃΔ[966], 3);
        this.ΔⲆΔ[208].id = 208;
        this.ΔⲆΔ[209] = $v(60, 60, 0, ᐃΔ[972], 3);
        this.ΔⲆΔ[209].id = 209;
        this.ΔⲆΔ[210] = $v(60, 60, 0, ᐃΔ[981], 3);
        this.ΔⲆΔ[210].id = 210;
        this.ΔⲆΔ[211] = $v(60, 60, 0, ᐃΔ[987], 3);
        this.ΔⲆΔ[211].id = 211;
        this.ΔⲆΔ[41] = $v(60, 60, 0, ᐃΔ[880], 3);
        this.ΔⲆΔ[41].id = 41;
        this.ΔⲆΔ[42] = $v(60, 60, 0, ᐃΔ[882], 3);
        this.ΔⲆΔ[42].id = 42;
        this.ΔⲆΔ[12] = $v(60, 60, 0, ᐃΔ[401], 3);
        this.ΔⲆΔ[12].id = 12;
        this.ΔⲆΔ[16] = $v(60, 60, 0, ᐃΔ[874], 3);
        this.ΔⲆΔ[16].id = 16;
        this.ΔⲆΔ[196] = $v(60, 60, 0, ᐃΔ[196], 3);
        this.ΔⲆΔ[196].id = 196;
        this.ΔⲆΔ[18] = $v(60, 60, 0, ᐃΔ[901], 3);
        this.ΔⲆΔ[18].id = 18;
        this.ΔⲆΔ[197] = $v(60, 60, 0, ᐃΔ[197], 3);
        this.ΔⲆΔ[197].id = 197;
        this.ΔⲆΔ[198] = $v(60, 60, 0, ᐃΔ[907], 3);
        this.ΔⲆΔ[198].id = 198;
        this.ΔⲆΔ[61] = $v(60, 60, 0, ᐃΔ[910], 3);
        this.ΔⲆΔ[61].id = 61;
        this.ΔⲆΔ[201] = $v(60, 60, 0, ᐃΔ[870], 3);
        this.ΔⲆΔ[201].id = 201;
        this.ΔⲆΔ[200] = $v(60, 60, 0, ᐃΔ[200], 3);
        this.ΔⲆΔ[200].id = 200;
        this.ΔⲆΔ[199] = $v(60, 60, 0, ᐃΔ[865], 3);
        this.ΔⲆΔ[199].id = 199;
        this.ᐃᐃᐃ = [];
        this.ᐃᐃᐃ[35] = $v(60, 60, 0, ᐃΔ[254], 3);
        this.ᐃᐃᐃ[35].id = 35;
        this.ᐃᐃᐃ[5] = $v(60, 60, 0, ᐃΔ[256], 3);
        this.ᐃᐃᐃ[5].id = 5;
        this.ᐃᐃᐃ[0] = $v(60, 60, 0, ᐃΔ[302], 3);
        this.ᐃᐃᐃ[0].id = 0;
        this.ᐃᐃᐃ[3] = $v(60, 60, 0, ᐃΔ[262], 3);
        this.ᐃᐃᐃ[3].id = 3;
        this.ᐃᐃᐃ[55] = $v(60, 60, 0, ᐃΔ[318], 3);
        this.ᐃᐃᐃ[55].id = 55;
        this.ᐃᐃᐃ[67] = $v(60, 60, 0, ᐃΔ[320], 3);
        this.ᐃᐃᐃ[67].id = 67;
        this.ᐃᐃᐃ[40] = $v(60, 60, 0, ᐃΔ[284], 3);
        this.ᐃᐃᐃ[40].id = 40;
        this.ᐃᐃᐃ[6] = $v(60, 60, 0, ᐃΔ[295], 3);
        this.ᐃᐃᐃ[6].id = 6;
        this.ᐃᐃᐃ[7] = $v(60, 60, 0, ᐃΔ[257], 3);
        this.ᐃᐃᐃ[7].id = 7;
        this.ᐃᐃᐃ[36] = $v(60, 60, 0, ᐃΔ[290], 3);
        this.ᐃᐃᐃ[36].id = 36;
        this.ᐃᐃᐃ[34] = $v(60, 60, 0, ᐃΔ[830], 3);
        this.ᐃᐃᐃ[34].id = 34;
        this.ᐃᐃᐃ[37] = $v(60, 60, 0, ᐃΔ[291], 3);
        this.ᐃᐃᐃ[37].id = 37;
        this.ᐃᐃᐃ[4] = $v(60, 60, 0, ᐃΔ[314], 3);
        this.ᐃᐃᐃ[4].id = 4;
        this.ᐃᐃᐃ[49] = $v(60, 60, 0, ᐃΔ[325], 3);
        this.ᐃᐃᐃ[49].id = 49;
        this.ᐃᐃᐃ[1] = $v(60, 60, 0, ᐃΔ[327], 3);
        this.ᐃᐃᐃ[1].id = 1;
        this.ᐃᐃᐃ[54] = $v(60, 60, 0, ᐃΔ[304], 3);
        this.ᐃᐃᐃ[54].id = 54;
        this.ᐃᐃᐃ[56] = $v(60, 60, 0, ᐃΔ[263], 3);
        this.ᐃᐃᐃ[56].id = 56;
        this.ᐃᐃᐃ[57] = $v(60, 60, 0, ᐃΔ[265], 3);
        this.ᐃᐃᐃ[57].id = 57;
        this.ᐃᐃᐃ[58] = $v(60, 60, 0, ᐃΔ[332], 3);
        this.ᐃᐃᐃ[58].id = 58;
        this.ᐃᐃᐃ[61] = $v(60, 60, 0, ᐃΔ[268], 3);
        this.ᐃᐃᐃ[61].id = 61;
        this.ᐃᐃᐃ[79] = $v(60, 60, 0, ᐃΔ[338], 3);
        this.ᐃᐃᐃ[79].id = 79;
        this.ᐃᐃᐃ[68] = $v(60, 60, 0, ᐃΔ[360], 3);
        this.ᐃᐃᐃ[68].id = 68;
        this.ᐃᐃᐃ[69] = $v(60, 60, 0, ᐃΔ[363], 3);
        this.ᐃᐃᐃ[69].id = 69;
        this.ᐃᐃᐃ[70] = $v(60, 60, 0, ᐃΔ[365], 3);
        this.ᐃᐃᐃ[70].id = 70;
        this.ᐃᐃᐃ[100] = $v(60, 60, 0, ᐃΔ[367], 3);
        this.ᐃᐃᐃ[100].id = 100;
        this.ᐃᐃᐃ[83] = $v(60, 60, 0, ᐃΔ[370], 3);
        this.ᐃᐃᐃ[83].id = 83;
        this.ᐃᐃᐃ[62] = $v(60, 60, 0, ᐃΔ[371], 3);
        this.ᐃᐃᐃ[62].id = 62;
        this.ᐃᐃᐃ[63] = $v(60, 60, 0, ᐃΔ[374], 3);
        this.ᐃᐃᐃ[63].id = 63;
        this.ᐃᐃᐃ[64] = $v(60, 60, 0, ᐃΔ[377], 3);
        this.ᐃᐃᐃ[64].id = 64;
        this.ᐃᐃᐃ[83] = $v(60, 60, 0, ᐃΔ[370], 3);
        this.ᐃᐃᐃ[83].id = 83;
        this.ᐃᐃᐃ[84] = $v(60, 60, 0, ᐃΔ[380], 3);
        this.ᐃᐃᐃ[84].id = 84;
        this.ᐃᐃᐃ[25] = $v(60, 60, 0, ᐃΔ[402], 3);
        this.ᐃᐃᐃ[25].id = 25;
        this.ᐃᐃᐃ[26] = $v(60, 60, 0, ᐃΔ[396], 3);
        this.ᐃᐃᐃ[26].id = 26;
        this.ᐃᐃᐃ[27] = $v(60, 60, 0, ᐃΔ[399], 3);
        this.ᐃᐃᐃ[27].id = 27;
        this.ᐃᐃᐃ[28] = $v(60, 60, 0, ᐃΔ[405], 3);
        this.ᐃᐃᐃ[28].id = 28;
        this.ᐃᐃᐃ[31] = $v(60, 60, 0, ᐃΔ[876], 3);
        this.ᐃᐃᐃ[31].id = 31;
        this.ᐃᐃᐃ[2] = $v(60, 60, 0, ᐃΔ[409], 3);
        this.ᐃᐃᐃ[2].id = 2;
        this.ᐃᐃᐃ[80] = $v(60, 60, 0, ᐃΔ[421], 3);
        this.ᐃᐃᐃ[80].id = 80;
        this.ᐃᐃᐃ[81] = $v(60, 60, 0, ᐃΔ[424], 3);
        this.ᐃᐃᐃ[81].id = 81;
        this.ᐃᐃᐃ[pr.ⲆᐃᐃⲆⵠ] = $v(60, 60, 0, ᐃΔ[1228], 3);
        this.ᐃᐃᐃ[pr.ⲆᐃᐃⲆⵠ].id = pr.ⲆᐃᐃⲆⵠ;
        this.ᐃᐃᐃ[86] = $v(60, 60, 0, ᐃΔ[1231], 3);
        this.ᐃᐃᐃ[86].id = 86;
        this.ᐃᐃᐃ[98] = $v(60, 60, 0, ᐃΔ[1138], 3);
        this.ᐃᐃᐃ[98].id = 98;
        this.ᐃᐃᐃ[99] = $v(60, 60, 0, ᐃΔ[1141], 3);
        this.ᐃᐃᐃ[99].id = 99;
        this.ᐃᐃᐃ[131] = $v(60, 60, 0, ᐃΔ[570], 3);
        this.ᐃᐃᐃ[131].id = 131;
        this.ᐃᐃᐃ[132] = $v(60, 60, 0, ᐃΔ[1168], 3);
        this.ᐃᐃᐃ[132].id = 132;
        this.ᐃᐃᐃ[145] = $v(60, 60, 0, ᐃΔ[1238], 3);
        this.ᐃᐃᐃ[145].id = 145;
        this.ᐃᐃᐃ[133] = $v(60, 60, 0, ᐃΔ[573], 3);
        this.ᐃᐃᐃ[133].id = 133;
        this.ᐃᐃᐃ[134] = $v(60, 60, 0, ᐃΔ[1171], 3);
        this.ᐃᐃᐃ[134].id = 134;
        this.ᐃᐃᐃ[146] = $v(60, 60, 0, ᐃΔ[1241], 3);
        this.ᐃᐃᐃ[146].id = 146;
        this.ᐃᐃᐃ[135] = $v(60, 60, 0, ᐃΔ[576], 3);
        this.ᐃᐃᐃ[135].id = 135;
        this.ᐃᐃᐃ[136] = $v(60, 60, 0, ᐃΔ[1174], 3);
        this.ᐃᐃᐃ[136].id = 136;
        this.ᐃᐃᐃ[147] = $v(60, 60, 0, ᐃΔ[1244], 3);
        this.ᐃᐃᐃ[147].id = 147;
        this.ᐃᐃᐃ[137] = $v(60, 60, 0, ᐃΔ[579], 3);
        this.ᐃᐃᐃ[137].id = 137;
        this.ᐃᐃᐃ[138] = $v(60, 60, 0, ᐃΔ[1177], 3);
        this.ᐃᐃᐃ[138].id = 138;
        this.ᐃᐃᐃ[167] = $v(60, 60, 0, ᐃΔ[1256], 3);
        this.ᐃᐃᐃ[167].id = 167;
        this.ᐃᐃᐃ[168] = $v(60, 60, 0, ᐃΔ[1259], 3);
        this.ᐃᐃᐃ[168].id = 168;
        this.ᐃᐃᐃ[169] = $v(60, 60, 0, ᐃΔ[1262], 3);
        this.ᐃᐃᐃ[169].id = 169;
        this.ᐃᐃᐃ[170] = $v(60, 60, 0, ᐃΔ[1265], 3);
        this.ᐃᐃᐃ[170].id = 170;
        this.ᐃᐃᐃ[171] = $v(60, 60, 0, ᐃΔ[1268], 3);
        this.ᐃᐃᐃ[171].id = 171;
        this.ᐃᐃᐃ[172] = $v(60, 60, 0, ᐃΔ[1271], 3);
        this.ᐃᐃᐃ[172].id = 172;
        this.ᐃᐃᐃ[148] = $v(60, 60, 0, ᐃΔ[1247], 3);
        this.ᐃᐃᐃ[148].id = 148;
        this.ᐃᐃᐃ[139] = $v(60, 60, 0, ᐃΔ[582], 3);
        this.ᐃᐃᐃ[139].id = 139;
        this.ᐃᐃᐃ[140] = $v(60, 60, 0, ᐃΔ[1180], 3);
        this.ᐃᐃᐃ[140].id = 140;
        this.ᐃᐃᐃ[149] = $v(60, 60, 0, ᐃΔ[1250], 3);
        this.ᐃᐃᐃ[149].id = 149;
        this.ᐃᐃᐃ[141] = $v(60, 60, 0, ᐃΔ[585], 3);
        this.ᐃᐃᐃ[141].id = 141;
        this.ᐃᐃᐃ[142] = $v(60, 60, 0, ᐃΔ[1183], 3);
        this.ᐃᐃᐃ[142].id = 142;
        this.ᐃᐃᐃ[150] = $v(60, 60, 0, ᐃΔ[1253], 3);
        this.ᐃᐃᐃ[150].id = 150;
        this.ᐃᐃᐃ[143] = $v(60, 60, 0, ᐃΔ[588], 3);
        this.ᐃᐃᐃ[143].id = 143;
        this.ᐃᐃᐃ[144] = $v(60, 60, 0, ᐃΔ[1186], 3);
        this.ᐃᐃᐃ[144].id = 144;
        this.ᐃᐃᐃ[87] = $v(60, 60, 0, ᐃΔ[827], 3);
        this.ᐃᐃᐃ[87].id = 87;
        this.ᐃᐃᐃ[88] = $v(60, 60, 0, ᐃΔ[430], 3);
        this.ᐃᐃᐃ[88].id = 88;
        this.ᐃᐃᐃ[89] = $v(60, 60, 0, ᐃΔ[433], 3);
        this.ᐃᐃᐃ[89].id = 89;
        this.ᐃᐃᐃ[90] = $v(60, 60, 0, ᐃΔ[436], 3);
        this.ᐃᐃᐃ[90].id = 90;
        this.ᐃᐃᐃ[24] = $v(60, 60, 0, ᐃΔ[439], 3);
        this.ᐃᐃᐃ[24].id = 24;
        this.ᐃᐃᐃ[101] = $v(60, 60, 0, ᐃΔ[442], 3);
        this.ᐃᐃᐃ[101].id = 101;
        this.ᐃᐃᐃ[100] = $v(60, 60, 0, ᐃΔ[367], 3);
        this.ᐃᐃᐃ[100].id = 100;
        this.ᐃᐃᐃ[38] = $v(60, 60, 0, ᐃΔ[456], 3);
        this.ᐃᐃᐃ[38].id = 38;
        this.ᐃᐃᐃ[pr.Ⲇⵠᐃⵠᐃ] = $v(60, 60, 0, ᐃΔ[861], 3);
        this.ᐃᐃᐃ[pr.Ⲇⵠᐃⵠᐃ].id = pr.Ⲇⵠᐃⵠᐃ;
        this.ᐃᐃᐃ[8] = $v(60, 60, 0, ᐃΔ[460], 3);
        this.ᐃᐃᐃ[8].id = 8;
        this.ᐃᐃᐃ[9] = $v(60, 60, 0, ᐃΔ[1019], 3);
        this.ᐃᐃᐃ[9].id = 9;
        this.ᐃᐃᐃ[29] = $v(60, 60, 0, ᐃΔ[473], 3);
        this.ᐃᐃᐃ[29].id = 29;
        this.ᐃᐃᐃ[10] = $v(60, 60, 0, ᐃΔ[478], 3);
        this.ᐃᐃᐃ[10].id = 10;
        this.ᐃᐃᐃ[11] = $v(60, 60, 0, ᐃΔ[481], 3);
        this.ᐃᐃᐃ[11].id = 11;
        this.ᐃᐃᐃ[12] = $v(60, 60, 0, ᐃΔ[484], 3);
        this.ᐃᐃᐃ[12].id = 12;
        this.ᐃᐃᐃ[13] = $v(60, 60, 0, ᐃΔ[487], 3);
        this.ᐃᐃᐃ[13].id = 13;
        this.ᐃᐃᐃ[14] = $v(60, 60, 0, ᐃΔ[490], 3);
        this.ᐃᐃᐃ[14].id = 14;
        this.ᐃᐃᐃ[59] = $v(60, 60, 0, ᐃΔ[493], 3);
        this.ᐃᐃᐃ[59].id = 59;
        this.ᐃᐃᐃ[71] = $v(60, 60, 0, ᐃΔ[496], 3);
        this.ᐃᐃᐃ[71].id = 71;
        this.ᐃᐃᐃ[65] = $v(60, 60, 0, ᐃΔ[498], 3);
        this.ᐃᐃᐃ[65].id = 65;
        this.ᐃᐃᐃ[85] = $v(60, 60, 0, ᐃΔ[503], 3);
        this.ᐃᐃᐃ[85].id = 85;
        this.ᐃᐃᐃ[102] = $v(60, 60, 0, ᐃΔ[515], 3);
        this.ᐃᐃᐃ[102].id = 102;
        this.ᐃᐃᐃ[103] = $v(60, 60, 0, ᐃΔ[519], 3);
        this.ᐃᐃᐃ[103].id = 103;
        this.ᐃᐃᐃ[115] = $v(60, 60, 0, ᐃΔ[530], 3);
        this.ᐃᐃᐃ[115].id = 115;
        this.ᐃᐃᐃ[104] = $v(60, 60, 0, ᐃΔ[533], 3);
        this.ᐃᐃᐃ[104].id = 104;
        this.ᐃᐃᐃ[105] = $v(60, 60, 0, ᐃΔ[555], 3);
        this.ᐃᐃᐃ[105].id = 105;
        this.ᐃᐃᐃ[91] = $v(60, 60, 0, ᐃΔ[542], 3);
        this.ᐃᐃᐃ[91].id = 91;
        this.ᐃᐃᐃ[15] = $v(60, 60, 0, ᐃΔ[551], 3);
        this.ᐃᐃᐃ[15].id = 15;
        this.ᐃᐃᐃ[106] = $v(60, 60, 0, ᐃΔ[604], 3);
        this.ᐃᐃᐃ[106].id = 106;
        this.ᐃᐃᐃ[108] = $v(60, 60, 0, ᐃΔ[1235], 3);
        this.ᐃᐃᐃ[108].id = 108;
        this.ᐃᐃᐃ[163] = $v(60, 60, 0, ᐃΔ[1027], 3);
        this.ᐃᐃᐃ[163].id = 163;
        this.ᐃᐃᐃ[164] = $v(60, 60, 0, ᐃΔ[1030], 3);
        this.ᐃᐃᐃ[164].id = 164;
        this.ᐃᐃᐃ[166] = $v(60, 60, 0, ᐃΔ[1116], 3);
        this.ᐃᐃᐃ[166].id = 166;
        this.ᐃᐃᐃ[165] = $v(60, 60, 0, ᐃΔ[1048], 3);
        this.ᐃᐃᐃ[165].id = 165;
        this.ᐃᐃᐃ[pr.ⲆⵠⲆⵠΔ] = $v(60, 60, 0, ᐃΔ[1051], 3);
        this.ᐃᐃᐃ[pr.ⲆⵠⲆⵠΔ].id = pr.ⲆⵠⲆⵠΔ;
        this.ᐃᐃᐃ[pr.ΔⲆⲆΔᐃ] = $v(60, 60, 0, ᐃΔ[1082], 3);
        this.ᐃᐃᐃ[pr.ΔⲆⲆΔᐃ].id = pr.ΔⲆⲆΔᐃ;
        this.ᐃᐃᐃ[pr.Δⵠᐃⵠᐃ] = $v(60, 60, 0, ᐃΔ[1226], 3);
        this.ᐃᐃᐃ[pr.Δⵠᐃⵠᐃ].id = pr.Δⵠᐃⵠᐃ;
        this.ᐃᐃᐃ[pr.ᐃΔⵠΔⵠ] = $v(60, 60, 0, ᐃΔ[1191], 3);
        this.ᐃᐃᐃ[pr.ᐃΔⵠΔⵠ].id = pr.ᐃΔⵠΔⵠ;
        this.ᐃᐃᐃ[110] = $v(60, 60, 0, ᐃΔ[611], 3);
        this.ᐃᐃᐃ[110].id = 110;
        this.ᐃᐃᐃ[111] = $v(60, 60, 0, ᐃΔ[715], 3);
        this.ᐃᐃᐃ[111].id = 111;
        this.ᐃᐃᐃ[112] = $v(60, 60, 0, ᐃΔ[715], 3);
        this.ᐃᐃᐃ[112].id = 112;
        this.ᐃᐃᐃ[113] = $v(60, 60, 0, ᐃΔ[715], 3);
        this.ᐃᐃᐃ[113].id = 113;
        this.ᐃᐃᐃ[16] = $v(60, 60, 0, ᐃΔ[618], 3);
        this.ᐃᐃᐃ[16].id = 16;
        this.ᐃᐃᐃ[17] = $v(60, 60, 0, ᐃΔ[700], 3);
        this.ᐃᐃᐃ[17].id = 17;
        this.ᐃᐃᐃ[18] = $v(60, 60, 0, ᐃΔ[704], 3);
        this.ᐃᐃᐃ[18].id = 18;
        this.ᐃᐃᐃ[19] = $v(60, 60, 0, ᐃΔ[706], 3);
        this.ᐃᐃᐃ[19].id = 19;
        this.ᐃᐃᐃ[122] = $v(60, 60, 0, ᐃΔ[711], 3);
        this.ᐃᐃᐃ[122].id = 122;
        this.ᐃᐃᐃ[20] = $v(60, 60, 0, ᐃΔ[627], 3);
        this.ᐃᐃᐃ[20].id = 20;
        this.ᐃᐃᐃ[41] = $v(60, 60, 0, ᐃΔ[632], 3);
        this.ᐃᐃᐃ[41].id = 41;
        this.ᐃᐃᐃ[52] = $v(60, 60, 0, ᐃΔ[635], 3);
        this.ᐃᐃᐃ[52].id = 52;
        this.ᐃᐃᐃ[114] = $v(60, 60, 0, ᐃΔ[643], 3);
        this.ᐃᐃᐃ[114].id = 114;
        this.ᐃᐃᐃ[94] = $v(60, 60, 0, ᐃΔ[647], 3);
        this.ᐃᐃᐃ[94].id = 94;
        this.ᐃᐃᐃ[93] = $v(60, 60, 0, ᐃΔ[650], 3);
        this.ᐃᐃᐃ[93].id = 93;
        this.ᐃᐃᐃ[21] = $v(60, 60, 0, ᐃΔ[654], 3);
        this.ᐃᐃᐃ[21].id = 21;
        this.ᐃᐃᐃ[53] = $v(60, 60, 0, ᐃΔ[660], 3);
        this.ᐃᐃᐃ[53].id = 53;
        this.ᐃᐃᐃ[51] = $v(60, 60, 0, ᐃΔ[690], 3);
        this.ᐃᐃᐃ[51].id = 51;
        this.ᐃᐃᐃ[50] = $v(60, 60, 0, ᐃΔ[666], 3);
        this.ᐃᐃᐃ[50].id = 50;
        this.ᐃᐃᐃ[109] = $v(60, 60, 0, ᐃΔ[684], 3);
        this.ᐃᐃᐃ[109].id = 109;
        this.ᐃᐃᐃ[124] = $v(60, 60, 0, ᐃΔ[718], 3);
        this.ᐃᐃᐃ[124].id = 124;
        this.ᐃᐃᐃ[125] = $v(60, 60, 0, ᐃΔ[730], 3);
        this.ᐃᐃᐃ[125].id = 125;
        this.ᐃᐃᐃ[126] = $v(60, 60, 0, ᐃΔ[734], 3);
        this.ᐃᐃᐃ[126].id = 126;
        this.ᐃᐃᐃ[129] = $v(60, 60, 0, ᐃΔ[563], 3);
        this.ᐃᐃᐃ[129].id = 129;
        this.ᐃᐃᐃ[151] = $v(60, 60, 0, ᐃΔ[758], 3);
        this.ᐃᐃᐃ[151].id = 151;
        this.ᐃᐃᐃ[152] = $v(60, 60, 0, ᐃΔ[762], 3);
        this.ᐃᐃᐃ[152].id = 152;
        this.ᐃᐃᐃ[153] = $v(60, 60, 0, ᐃΔ[770], 3);
        this.ᐃᐃᐃ[153].id = 153;
        this.ᐃᐃᐃ[154] = $v(60, 60, 0, ᐃΔ[768], 3);
        this.ᐃᐃᐃ[154].id = 154;
        this.ᐃᐃᐃ[155] = $v(60, 60, 0, ᐃΔ[772], 3);
        this.ᐃᐃᐃ[155].id = 155;
        this.ᐃᐃᐃ[157] = $v(60, 60, 0, ᐃΔ[777], 3);
        this.ᐃᐃᐃ[157].id = 157;
        this.ᐃᐃᐃ[156] = $v(60, 60, 0, ᐃΔ[780], 3);
        this.ᐃᐃᐃ[156].id = 156;
        this.ᐃᐃᐃ[158] = $v(60, 60, 0, ᐃΔ[784], 3);
        this.ᐃᐃᐃ[158].id = 158;
        this.ᐃᐃᐃ[159] = $v(60, 60, 0, ᐃΔ[785], 3);
        this.ᐃᐃᐃ[159].id = 159;
        this.ᐃᐃᐃ[160] = $v(60, 60, 0, ᐃΔ[791], 3);
        this.ᐃᐃᐃ[160].id = 160;
        this.ᐃᐃᐃ[161] = $v(60, 60, 0, ᐃΔ[799], 3);
        this.ᐃᐃᐃ[161].id = 161;
        this.ᐃᐃᐃ[42] = $v(60, 60, 0, ᐃΔ[809], 3);
        this.ᐃᐃᐃ[42].id = 42;
        this.ᐃᐃᐃ[43] = $v(60, 60, 0, ᐃΔ[835], 3);
        this.ᐃᐃᐃ[43].id = 43;
        this.ᐃᐃᐃ[107] = $v(60, 60, 0, ᐃΔ[843], 3);
        this.ᐃᐃᐃ[107].id = 107;
        this.ᐃᐃᐃ[44] = $v(60, 60, 0, ᐃΔ[846], 3);
        this.ᐃᐃᐃ[44].id = 44;
        this.ᐃᐃᐃ[46] = $v(60, 60, 0, ᐃΔ[960], 3);
        this.ᐃᐃᐃ[46].id = 46;
        this.ᐃᐃᐃ[45] = $v(60, 60, 0, ᐃΔ[950], 3);
        this.ᐃᐃᐃ[45].id = 45;
        this.ᐃᐃᐃ[47] = $v(60, 60, 0, ᐃΔ[967], 3);
        this.ᐃᐃᐃ[47].id = 47;
        this.ᐃᐃᐃ[48] = $v(60, 60, 0, ᐃΔ[982], 3);
        this.ᐃᐃᐃ[48].id = 48;
        this.ᐃᐃᐃ[25] = $v(60, 60, 0, ᐃΔ[402], 3);
        this.ᐃᐃᐃ[25].id = 25;
        this.ᐃᐃᐃ[31] = $v(60, 60, 0, ᐃΔ[876], 3);
        this.ᐃᐃᐃ[31].id = 31;
        this.ᐃᐃᐃ[33] = $v(60, 60, 0, ᐃΔ[900], 3);
        this.ᐃᐃᐃ[33].id = 33;
        this.ᐃᐃᐃ[162] = $v(60, 60, 0, ᐃΔ[909], 3);
        this.ᐃᐃᐃ[162].id = 162;
        this.ᐃᐃᐃ[128] = $v(60, 60, 0, ᐃΔ[912], 3);
        this.ᐃᐃᐃ[128].id = 128;
        this.ⵠⵠᐃ[53] = $v(68, 68, 0, ᐃΔ[976], 3);
        this.ⵠⵠᐃ[53].id = 53;
        this.ΔⲆΔ[53] = $v(60, 60, 0, ᐃΔ[975], 3);
        this.ΔⲆΔ[53].id = 53;
        this.ᐃᐃᐃ[22] = $v(60, 60, 0, ᐃΔ[977], 3);
        this.ᐃᐃᐃ[22].id = 22;
        this.ⵠⵠᐃ[54] = $v(68, 68, 0, ᐃΔ[979], 3);
        this.ⵠⵠᐃ[54].id = 54;
        this.ΔⲆΔ[54] = $v(60, 60, 0, ᐃΔ[978], 3);
        this.ΔⲆΔ[54].id = 54;
        this.ᐃᐃᐃ[23] = $v(60, 60, 0, ᐃΔ[980], 3);
        this.ᐃᐃᐃ[23].id = 23;
        this.ⵠⵠᐃ[56] = $v(68, 68, 0, ᐃΔ[713], 3);
        this.ⵠⵠᐃ[56].id = 56;
        this.ΔⲆΔ[56] = $v(60, 60, 0, ᐃΔ[712], 3);
        this.ΔⲆΔ[56].id = 56;
        this.ᐃᐃᐃ[123] = $v(60, 60, 0, ᐃΔ[714], 3);
        this.ᐃᐃᐃ[123].id = 123;
        this.ⵠⵠᐃ[82] = $v(68, 68, 0, ᐃΔ[428], 3);
        this.ⵠⵠᐃ[82].id = 82;
        this.ΔⲆΔ[82] = $v(60, 60, 0, ᐃΔ[426], 3);
        this.ΔⲆΔ[82].id = 82;
        this.ᐃᐃᐃ[82] = $v(60, 60, 0, ᐃΔ[427], 3);
        this.ᐃᐃᐃ[82].id = 82;
        this.ⵠⵠᐃ[235] = $v(68, 68, 0, ᐃΔ[1159], 3);
        this.ⵠⵠᐃ[235].id = 235;
        this.ΔⲆΔ[235] = $v(60, 60, 0, ᐃΔ[1158], 3);
        this.ΔⲆΔ[235].id = 235;
        this.ⵠⵠᐃ[238] = $v(68, 68, 0, ᐃΔ[1188], 3);
        this.ⵠⵠᐃ[238].id = 238;
        this.ΔⲆΔ[238] = $v(60, 60, 0, ᐃΔ[1187], 3);
        this.ΔⲆΔ[238].id = 238;
        this.ⵠⵠᐃ[236] = $v(68, 68, 0, ᐃΔ[1161], 3);
        this.ⵠⵠᐃ[236].id = 236;
        this.ΔⲆΔ[236] = $v(60, 60, 0, ᐃΔ[1160], 3);
        this.ΔⲆΔ[236].id = 236;
        this.ⵠⵠᐃ[152] = $v(68, 68, 0, ᐃΔ[1197], 3);
        this.ⵠⵠᐃ[152].id = 152;
        this.ΔⲆΔ[152] = $v(60, 60, 0, ᐃΔ[1195], 3);
        this.ΔⲆΔ[152].id = 152;
        this.ᐃᐃᐃ[116] = $v(60, 60, 0, ᐃΔ[1196], 3);
        this.ᐃᐃᐃ[116].id = 116;
        this.ⵠⵠᐃ[212] = $v(68, 68, 0, ᐃΔ[992], 3);
        this.ⵠⵠᐃ[212].id = 212;
        this.ΔⲆΔ[212] = $v(60, 60, 0, ᐃΔ[991], 3);
        this.ΔⲆΔ[212].id = 212;
        this.ᐃᐃᐃ[73] = $v(60, 60, 0, ᐃΔ[990], 3);
        this.ᐃᐃᐃ[73].id = 73;
        this.ⵠⵠᐃ[213] = $v(68, 68, 0, ᐃΔ[995], 3);
        this.ⵠⵠᐃ[213].id = 213;
        this.ΔⲆΔ[213] = $v(60, 60, 0, ᐃΔ[994], 3);
        this.ΔⲆΔ[213].id = 213;
        this.ᐃᐃᐃ[74] = $v(60, 60, 0, ᐃΔ[993], 3);
        this.ᐃᐃᐃ[74].id = 74;
        this.ⵠⵠᐃ[214] = $v(68, 68, 0, ᐃΔ[998], 3);
        this.ⵠⵠᐃ[214].id = 214;
        this.ΔⲆΔ[214] = $v(60, 60, 0, ᐃΔ[997], 3);
        this.ΔⲆΔ[214].id = 214;
        this.ᐃᐃᐃ[75] = $v(60, 60, 0, ᐃΔ[996], 3);
        this.ᐃᐃᐃ[75].id = 75;
        this.ⵠⵠᐃ[215] = $v(68, 68, 0, ᐃΔ[1001], 3);
        this.ⵠⵠᐃ[215].id = 215;
        this.ΔⲆΔ[215] = $v(60, 60, 0, ᐃΔ[1000], 3);
        this.ΔⲆΔ[215].id = 215;
        this.ᐃᐃᐃ[76] = $v(60, 60, 0, ᐃΔ[999], 3);
        this.ᐃᐃᐃ[76].id = 76;
        this.ⵠⵠᐃ[216] = $v(68, 68, 0, ᐃΔ[1004], 3);
        this.ⵠⵠᐃ[216].id = 216;
        this.ΔⲆΔ[216] = $v(60, 60, 0, ᐃΔ[1003], 3);
        this.ΔⲆΔ[216].id = 216;
        this.ᐃᐃᐃ[77] = $v(60, 60, 0, ᐃΔ[1002], 3);
        this.ᐃᐃᐃ[77].id = 77;
        this.ⵠⵠᐃ[220] = $v(68, 68, 0, ᐃΔ[1007], 3);
        this.ⵠⵠᐃ[220].id = 220;
        this.ΔⲆΔ[220] = $v(60, 60, 0, ᐃΔ[1006], 3);
        this.ΔⲆΔ[220].id = 220;
        this.ᐃᐃᐃ[78] = $v(60, 60, 0, ᐃΔ[1005], 3);
        this.ᐃᐃᐃ[78].id = 78;
        this.ⵠⵠᐃ[217] = $v(68, 68, 0, ᐃΔ[1016], 3);
        this.ⵠⵠᐃ[217].id = 217;
        this.ΔⲆΔ[217] = $v(60, 60, 0, ᐃΔ[1015], 3);
        this.ΔⲆΔ[217].id = 217;
        this.ᐃᐃᐃ[60] = $v(60, 60, 0, ᐃΔ[1014], 3);
        this.ᐃᐃᐃ[60].id = 60;
        this.ⵠⵠᐃ[219] = $v(68, 68, 0, ᐃΔ[1013], 3);
        this.ⵠⵠᐃ[219].id = 219;
        this.ΔⲆΔ[219] = $v(60, 60, 0, ᐃΔ[1012], 3);
        this.ΔⲆΔ[219].id = 219;
        this.ᐃᐃᐃ[72] = $v(60, 60, 0, ᐃΔ[1011], 3);
        this.ᐃᐃᐃ[72].id = 72;
        this.ⵠⵠᐃ[218] = $v(68, 68, 0, ᐃΔ[1010], 3);
        this.ⵠⵠᐃ[218].id = 218;
        this.ΔⲆΔ[218] = $v(60, 60, 0, ᐃΔ[1009], 3);
        this.ΔⲆΔ[218].id = 218;
        this.ᐃᐃᐃ[66] = $v(60, 60, 0, ᐃΔ[1008], 3);
        this.ᐃᐃᐃ[66].id = 66;
        this.ⵠⵠᐃ[153] = $v(68, 68, 0, ᐃΔ[1201], 3);
        this.ⵠⵠᐃ[153].id = 153;
        this.ΔⲆΔ[153] = $v(60, 60, 0, ᐃΔ[1199], 3);
        this.ΔⲆΔ[153].id = 153;
        this.ᐃᐃᐃ[117] = $v(60, 60, 0, ᐃΔ[1200], 3);
        this.ᐃᐃᐃ[117].id = 117;
        this.ⵠⵠᐃ[154] = $v(68, 68, 0, ᐃΔ[1205], 3);
        this.ⵠⵠᐃ[154].id = 154;
        this.ΔⲆΔ[154] = $v(60, 60, 0, ᐃΔ[1203], 3);
        this.ΔⲆΔ[154].id = 154;
        this.ᐃᐃᐃ[118] = $v(60, 60, 0, ᐃΔ[1204], 3);
        this.ᐃᐃᐃ[118].id = 118;
        this.ⵠⵠᐃ[155] = $v(68, 68, 0, ᐃΔ[1209], 3);
        this.ⵠⵠᐃ[155].id = 155;
        this.ΔⲆΔ[155] = $v(60, 60, 0, ᐃΔ[1207], 3);
        this.ΔⲆΔ[155].id = 155;
        this.ᐃᐃᐃ[119] = $v(60, 60, 0, ᐃΔ[1208], 3);
        this.ᐃᐃᐃ[119].id = 119;
        this.ⵠⵠᐃ[156] = $v(68, 68, 0, ᐃΔ[1213], 3);
        this.ⵠⵠᐃ[156].id = 156;
        this.ΔⲆΔ[156] = $v(60, 60, 0, ᐃΔ[1211], 3);
        this.ΔⲆΔ[156].id = 156;
        this.ᐃᐃᐃ[120] = $v(60, 60, 0, ᐃΔ[1212], 3);
        this.ᐃᐃᐃ[120].id = 120;
        this.ⵠⵠᐃ[157] = $v(68, 68, 0, ᐃΔ[1217], 3);
        this.ⵠⵠᐃ[157].id = 157;
        this.ΔⲆΔ[157] = $v(60, 60, 0, ᐃΔ[1215], 3);
        this.ΔⲆΔ[157].id = 157;
        this.ᐃᐃᐃ[121] = $v(60, 60, 0, ᐃΔ[1216], 3);
        this.ᐃᐃᐃ[121].id = 121;
        this.ⵠⵠᐃ[203] = $v(68, 68, 0, ᐃΔ[937], 3);
        this.ⵠⵠᐃ[203].id = 203;
        this.ΔⲆΔ[203] = $v(60, 60, 0, ᐃΔ[936], 3);
        this.ΔⲆΔ[203].id = 203;
        this.ΔⲆΔ[203].info.ᐃⵠ[2] = this.ΔⲆΔ[203].info.ᐃⵠ[0];
        this.ⵠⵠᐃ[150] = $v(68, 68, 0, ᐃΔ[524], 3);
        this.ⵠⵠᐃ[150].id = 150;
        this.ΔⲆΔ[150] = $v(60, 60, 0, ᐃΔ[523], 3);
        this.ΔⲆΔ[150].id = 150;
        this.ΔⲆΔ[150].info.ᐃⵠ[2] = this.ΔⲆΔ[150].info.ᐃⵠ[0];
        this.ⵠⵠᐃ[202] = $v(68, 68, 0, ᐃΔ[939], 3);
        this.ⵠⵠᐃ[202].id = 202;
        this.ΔⲆΔ[202] = $v(60, 60, 0, ᐃΔ[938], 3);
        this.ΔⲆΔ[202].id = 202;
        this.ΔⲆΔ[202].info.ᐃⵠ[2] = this.ΔⲆΔ[202].info.ᐃⵠ[0];
        this.ⵠⵠᐃ[19] = $v(68, 68, 0, ᐃΔ[934], 3);
        this.ⵠⵠᐃ[19].id = 19;
        this.ΔⲆΔ[19] = $v(60, 60, 0, ᐃΔ[932], 3);
        this.ΔⲆΔ[19].id = 19;
        this.ᐃᐃᐃ[39] = $v(60, 60, 0, ᐃΔ[933], 3);
        this.ᐃᐃᐃ[39].id = 39;
        this.ⵠⵠᐃ[20] = $v(68, 68, 0, ᐃΔ[923], 3);
        this.ⵠⵠᐃ[20].id = 20;
        this.ΔⲆΔ[20] = $v(60, 60, 0, ᐃΔ[921], 3);
        this.ΔⲆΔ[20].id = 20;
        this.ᐃᐃᐃ[95] = $v(60, 60, 0, ᐃΔ[922], 3);
        this.ᐃᐃᐃ[95].id = 95;
        this.ⵠⵠᐃ[21] = $v(68, 68, 0, ᐃΔ[927], 3);
        this.ⵠⵠᐃ[21].id = 21;
        this.ΔⲆΔ[21] = $v(60, 60, 0, ᐃΔ[925], 3);
        this.ΔⲆΔ[21].id = 21;
        this.ᐃᐃᐃ[96] = $v(60, 60, 0, ᐃΔ[926], 3);
        this.ᐃᐃᐃ[96].id = 96;
        this.ⵠⵠᐃ[22] = $v(68, 68, 0, ᐃΔ[931], 3);
        this.ⵠⵠᐃ[22].id = 22;
        this.ΔⲆΔ[22] = $v(60, 60, 0, ᐃΔ[929], 3);
        this.ΔⲆΔ[22].id = 22;
        this.ᐃᐃᐃ[97] = $v(60, 60, 0, ᐃΔ[930], 3);
        this.ᐃᐃᐃ[97].id = 97;
        this.ⵠⵠᐃ[60] = $v(68, 68, 0, ᐃΔ[736], 3);
        this.ⵠⵠᐃ[60].id = 60;
        this.ΔⲆΔ[60] = $v(60, 60, 0, ᐃΔ[735], 3);
        this.ΔⲆΔ[60].id = 60;
        this.ᐃᐃᐃ[127] = $v(60, 60, 0, ᐃΔ[737], 3);
        this.ᐃᐃᐃ[127].id = 127;
        this.ⵠⵠᐃ[90] = $v(68, 68, 0, ᐃΔ[739], 3);
        this.ⵠⵠᐃ[90].id = 90;
        this.ΔⲆΔ[90] = $v(60, 60, 0, ᐃΔ[738], 3);
        this.ΔⲆΔ[90].id = 90;
        this.ᐃᐃᐃ[173] = $v(60, 60, 0, ᐃΔ[740], 3);
        this.ᐃᐃᐃ[173].id = 173;
        this.ⵠⵠᐃ[92] = $v(68, 68, 0, ᐃΔ[745], 3);
        this.ⵠⵠᐃ[92].id = 92;
        this.ΔⲆΔ[92] = $v(60, 60, 0, ᐃΔ[744], 3);
        this.ΔⲆΔ[92].id = 92;
        this.ᐃᐃᐃ[174] = $v(60, 60, 0, ᐃΔ[746], 3);
        this.ᐃᐃᐃ[174].id = 174;
        this.ⵠⵠᐃ[93] = $v(68, 68, 0, ᐃΔ[748], 3);
        this.ⵠⵠᐃ[93].id = 93;
        this.ΔⲆΔ[93] = $v(60, 60, 0, ᐃΔ[747], 3);
        this.ΔⲆΔ[93].id = 93;
        this.ᐃᐃᐃ[175] = $v(60, 60, 0, ᐃΔ[749], 3);
        this.ᐃᐃᐃ[175].id = 175;
        this.ⵠⵠᐃ[91] = $v(68, 68, 0, ᐃΔ[742], 3);
        this.ⵠⵠᐃ[91].id = 91;
        this.ΔⲆΔ[91] = $v(60, 60, 0, ᐃΔ[741], 3);
        this.ΔⲆΔ[91].id = 91;
        this.ᐃᐃᐃ[176] = $v(60, 60, 0, ᐃΔ[743], 3);
        this.ᐃᐃᐃ[176].id = 176;
        this.ⵠⵠᐃ[100] = $v(68, 68, 0, ᐃΔ[1165], 3);
        this.ⵠⵠᐃ[100].id = 100;
        this.ΔⲆΔ[100] = $v(60, 60, 0, ᐃΔ[1164], 3);
        this.ΔⲆΔ[100].id = 100;
        this.ᐃᐃᐃ[pr.ΔⲆⵠΔᐃ] = $v(60, 60, 0, ᐃΔ[nr.ᐃⲆⵠⵠᐃΔⵠᐃᐃ], 3);
        this.ᐃᐃᐃ[pr.ΔⲆⵠΔᐃ].id = pr.ΔⲆⵠΔᐃ;
        this.ⵠⵠᐃ[34] = $v(68, 68, 0, ᐃΔ[945], 3);
        this.ⵠⵠᐃ[34].id = 34;
        this.ΔⲆΔ[34] = $v(60, 60, 0, ᐃΔ[943], 3);
        this.ΔⲆΔ[34].id = 34;
        this.ᐃᐃᐃ[30] = $v(60, 60, 0, ᐃΔ[944], 3);
        this.ᐃᐃᐃ[30].id = 30;
        this.ⵠⵠᐃ[44] = $v(68, 68, 0, ᐃΔ[948], 3);
        this.ⵠⵠᐃ[44].id = 44;
        this.ΔⲆΔ[44] = $v(60, 60, 0, ᐃΔ[946], 3);
        this.ΔⲆΔ[44].id = 44;
        this.ᐃᐃᐃ[92] = $v(60, 60, 0, ᐃΔ[947], 3);
        this.ᐃᐃᐃ[92].id = 92;
        this.ⵠⵠᐃ[17] = $v(68, 68, 0, ᐃΔ[878], 3);
        this.ⵠⵠᐃ[17].id = 17;
        this.ΔⲆΔ[17] = $v(60, 60, 0, ᐃΔ[877], 3);
        this.ΔⲆΔ[17].id = 17;
        this.ᐃᐃᐃ[32] = $v(60, 60, 0, ᐃΔ[879], 3);
        this.ᐃᐃᐃ[32].id = 32;
        this.ⵠⵠᐃ[63] = $v(68, 68, 0, ᐃΔ[568], 3);
        this.ⵠⵠᐃ[63].id = 63;
        this.ΔⲆΔ[63] = $v(60, 60, 0, ᐃΔ[566], 3);
        this.ΔⲆΔ[63].id = 63;
        this.ᐃᐃᐃ[130] = $v(60, 60, 0, ᐃΔ[567], 3);
        this.ᐃᐃᐃ[130].id = 130;
        this.ⵠⵠᐃ[187] = $v(68, 68, 0, ᐃΔ[591], 3);
        this.ⵠⵠᐃ[187].id = 187;
        this.ΔⲆΔ[187] = $v(60, 60, 0, ᐃΔ[253], 3);
        this.ΔⲆΔ[187].id = 187;
        this.ⵠⵠᐃ[sr.ⵠⵠⲆⵠΔⵠⲆ] = $v(68, 68, 0, ᐃΔ[nr.ΔΔΔⵠⵠΔΔⵠⲆ], 3);
        this.ⵠⵠᐃ[sr.ⵠⵠⲆⵠΔⵠⲆ].id = sr.ⵠⵠⲆⵠΔⵠⲆ;
        this.ΔⲆΔ[sr.ⵠⵠⲆⵠΔⵠⲆ] = $v(60, 60, 0, ᐃΔ[nr.ΔⵠΔΔΔΔᐃΔᐃ], 3);
        this.ΔⲆΔ[sr.ⵠⵠⲆⵠΔⵠⲆ].id = sr.ⵠⵠⲆⵠΔⵠⲆ;
        this.ⵠⵠᐃ[sr.ΔⵠᐃᐃΔΔΔ] = $v(68, 68, 0, ᐃΔ[nr.ⵠⲆⲆⲆΔⵠΔᐃⲆ], 3);
        this.ⵠⵠᐃ[sr.ΔⵠᐃᐃΔΔΔ].id = sr.ΔⵠᐃᐃΔΔΔ;
        this.ΔⲆΔ[sr.ΔⵠᐃᐃΔΔΔ] = $v(60, 60, 0, ᐃΔ[nr.ⵠΔΔⵠΔⲆΔⲆΔ], 3);
        this.ΔⲆΔ[sr.ΔⵠᐃᐃΔΔΔ].id = sr.ΔⵠᐃᐃΔΔΔ;
        this.ⵠⵠᐃ[sr.ᐃᐃᐃⵠᐃᐃⲆ] = $v(68, 68, 0, ᐃΔ[nr.ΔᐃⲆⵠΔⲆⲆΔⵠ], 3);
        this.ⵠⵠᐃ[sr.ᐃᐃᐃⵠᐃᐃⲆ].id = sr.ᐃᐃᐃⵠᐃᐃⲆ;
        this.ΔⲆΔ[sr.ᐃᐃᐃⵠᐃᐃⲆ] = $v(60, 60, 0, ᐃΔ[nr.ⲆᐃⲆᐃᐃᐃⵠΔⲆ], 3);
        this.ΔⲆΔ[sr.ᐃᐃᐃⵠᐃᐃⲆ].id = sr.ᐃᐃᐃⵠᐃᐃⲆ;
        this.ⵠⵠᐃ[sr.ⵠᐃⲆΔᐃⲆΔ] = $v(68, 68, 0, ᐃΔ[nr.ⵠⲆⵠⵠᐃⲆᐃΔΔ], 3);
        this.ⵠⵠᐃ[sr.ⵠᐃⲆΔᐃⲆΔ].id = sr.ⵠᐃⲆΔᐃⲆΔ;
        this.ΔⲆΔ[sr.ⵠᐃⲆΔᐃⲆΔ] = $v(60, 60, 0, ᐃΔ[nr.ΔⲆΔⵠⵠⵠΔⲆⲆ], 3);
        this.ΔⲆΔ[sr.ⵠᐃⲆΔᐃⲆΔ].id = sr.ⵠᐃⲆΔᐃⲆΔ;
        this.ⵠⵠᐃ[sr.ⵠΔⵠᐃⵠΔⵠ] = $v(68, 68, 0, ᐃΔ[nr.ⲆΔⵠⲆΔᐃΔΔΔ], 3);
        this.ⵠⵠᐃ[sr.ⵠΔⵠᐃⵠΔⵠ].id = sr.ⵠΔⵠᐃⵠΔⵠ;
        this.ΔⲆΔ[sr.ⵠΔⵠᐃⵠΔⵠ] = $v(60, 60, 0, ᐃΔ[nr.ⵠᐃⵠⲆΔΔᐃΔΔ], 3);
        this.ΔⲆΔ[sr.ⵠΔⵠᐃⵠΔⵠ].id = sr.ⵠΔⵠᐃⵠΔⵠ;
        this.ΔΔⲆⵠᐃⲆⵠ = function () {
            for (var a = Yw.ⲆⵠᐃΔ.ⵠᐃⵠᐃᐃ, b = 10, c = 10, d = 0; a.length > d; d++) {
                if (d > 0 && !(d % 4)) {
                    b += a[0].info.width + 10;
                    c = 10;
                }
                a[d].info.translate.x = b;
                a[d].info.translate.y = c;
                c += 10 + a[d].info.height;
            }
        };
        this.ⵠⵠⲆⵠΔΔΔ = function () {
            var a = Math.floor((10 + this.ⵠⵠᐃ[0].info.ᐃⵠ[0].width) * Math.floor((3 + Yw.ⲆⵠᐃΔ.ⵠᐃⵠᐃᐃ.length) / 4) + 35);
            for (var b = 0; b < this.ⵠⵠᐃ.length; b++) {
                if (this.ⵠⵠᐃ[b]) {
                    this.ⵠⵠᐃ[b].info.translate.x = a;
                    this.ⵠⵠᐃ[b].info.translate.y = 22;
                }
            }
            this.ᐃᐃᐃⲆⵠⲆᐃ.info.translate.x = a + 17;
            this.ᐃᐃᐃⲆⵠⲆᐃ.info.translate.y = 22 + ᐃΔ[339].height;
            this.ⲆΔᐃΔⵠᐃⵠ.info.translate.x = a + 17;
            this.ⲆΔᐃΔⵠᐃⵠ.info.translate.y = 30;
            this.ⵠⲆⲆⵠⵠᐃΔ.info.translate.x = a + 17;
            this.ⵠⲆⲆⵠⵠᐃΔ.info.translate.y = 22 + ᐃΔ[339].height;
        };
        this.ᐃⵠⲆΔⵠⵠⵠΔⲆ = function () {
            var a = Math.floor((Rn - ᐃΔ[556][0].width) / 2);
            for (var b = 0; this.ⲆᐃⵠΔⲆ.length > b; b++) {
                this.ⲆᐃⵠΔⲆ[b].button.info.translate.x = a;
                this.ⲆᐃⵠΔⲆ[b].button.info.translate.y = -13;
            }
        };
        this.ᐃⵠᐃΔⲆⲆΔ = function () {
            var a = 12 + Math.floor(Math.floor((3 + Yw.ⲆⵠᐃΔ.ⵠᐃⵠᐃᐃ.length) / 4) * (10 + this.ΔⲆⲆΔᐃⵠⵠ.info.ᐃⵠ[0].width) + 35);
            this.ΔⲆⲆΔᐃⵠⵠ.info.translate.x = a;
            this.ΔⲆⲆΔᐃⵠⵠ.info.translate.y = 33;
            this.ⲆⲆⲆⵠⲆⲆⲆ.info.translate.x = this.ΔⲆⲆΔᐃⵠⵠ.info.translate.x;
            this.ⲆⲆⲆⵠⲆⲆⲆ.info.translate.y = 137;
            this.Ⲇᐃⵠⵠᐃᐃⵠ.info.translate.x = this.ΔⲆⲆΔᐃⵠⵠ.info.translate.x;
            this.Ⲇᐃⵠⵠᐃᐃⵠ.info.translate.y = 240;
        };
        this.ᐃᐃⵠΔⲆⲆⵠ = function () {
            var a = 12 + Math.floor((10 + this.ⵠᐃⵠΔⵠᐃⵠ.info.ᐃⵠ[0].width) * Math.floor((3 + Yw.ⲆⵠᐃΔ.ⵠᐃⵠᐃᐃ.length) / 4) + 35);
            this.ⵠᐃⵠΔⵠᐃⵠ.info.translate.x = a;
            this.ⵠᐃⵠΔⵠᐃⵠ.info.translate.y = 36;
            a += 83;
            this.ΔᐃⵠᐃΔᐃⲆ.info.translate.x = a;
            this.ΔᐃⵠᐃΔᐃⲆ.info.translate.y = 36;
            this.ΔⲆⲆⲆⲆΔΔ.info.translate.x = a;
            this.ΔⲆⲆⲆⲆΔΔ.info.translate.y = 36;
            this.ᐃⲆⵠᐃⵠᐃΔ.info.translate.x = a;
            this.ᐃⲆⵠᐃⵠᐃΔ.info.translate.y = 36;
            this.ⵠⵠⲆⲆᐃΔΔ.info.translate.x = a;
            this.ⵠⵠⲆⲆᐃΔΔ.info.translate.y = 36;
            this.ᐃⵠⲆⲆⵠΔᐃ.info.translate.x = a;
            this.ᐃⵠⲆⲆⵠΔᐃ.info.translate.y = 36;
        };
        this.ΔⵠΔⲆΔⲆΔ = function () {
            var a = 12 + Math.floor(Math.floor((3 + Yw.ⲆⵠᐃΔ.ⵠᐃⵠᐃᐃ.length) / 4) * (10 + this.ΔᐃⲆⵠΔⲆⵠ.info.ᐃⵠ[0].width) + 35);
            this.ΔᐃⲆⵠΔⲆⵠ.info.translate.x = a;
            this.ΔᐃⲆⵠΔⲆⵠ.info.translate.y = 36;
            a += 83;
            this.ⵠⲆⲆᐃⲆⵠᐃ.info.translate.x = a;
            this.ⵠⲆⲆᐃⲆⵠᐃ.info.translate.y = 36;
        };
        this.ᐃⲆᐃᐃⵠⲆⲆ = function () {
            var a = Math.floor((10 + this.ⵠΔΔⲆΔᐃΔ.info.ᐃⵠ[0].width) * Math.floor((3 + Yw.ⲆⵠᐃΔ.ⵠᐃⵠᐃᐃ.length) / 4) + 35);
            this.ⵠΔΔⲆΔᐃΔ.info.translate.x = a;
            this.ⵠΔΔⲆΔᐃΔ.info.translate.y = 22;
        };
        this.ᐃⵠⵠΔⵠΔΔ = function () {
            var a = Yw.ⵠᐃΔᐃ.ⵠᐃⲆⵠᐃ;
            if (a.length > 0) {
                var b = Math.floor((Rn - (a[0].info.width + 5) * Yw.ⵠᐃΔᐃ.max) / 2);
            }
            for (var c = 0; c < a.length; c++) {
                a[c].info.translate.x = b + c * (a[c].info.width + 5);
                a[c].info.translate.y = iq - a[c].info.width - 10;
                this.ΔΔΔΔⵠ[a[c].id].info.translate.x = a[c].info.translate.x + 13;
                this.ΔΔΔΔⵠ[a[c].id].info.translate.y = a[c].info.translate.y - this.ΔΔΔΔⵠ[a[c].id].info.ᐃⵠ[0].height - 6;
            }
        };
        var m;
        var n = 0;
        function o() {
            j.ⲆᐃΔ();
            if (++n == 30) {
                j.ⲆⲆⲆⲆⲆᐃⲆ();
                j.ⲆᐃΔ();
                return;
            }
            bj.setTimeout(o, 33);
        }
        this.ⲆᐃᐃΔᐃ = function (a) {
            if (Yw.ᐃⵠⵠⵠΔ.open) {
                Yw.ᐃⵠⵠⵠΔ.ⲆᐃᐃΔᐃ();
            }
            if (Yw.ⵠΔΔΔⲆ.open) {
                Yw.ⵠΔΔΔⲆ.ⲆᐃᐃΔᐃ();
            }
            document.getElementById("team_box").style.display = "none";
            j.ⲆΔⲆΔⵠ.style.display = "none";
            j.ⲆΔⲆΔⵠ.open = false;
            j.sign.style.display = "none";
            j.sign.open = Sh;
            document.getElementById("shop_starterkit").style.display = "none";
            document.getElementById("home_craft").style.display = "none";
            document.getElementById("recipe_craft").style.display = "none";
            j.ΔⵠⲆⲆ.open = false;
            document.getElementById("option_in_game").style.display = "none";
            j.options.open = false;
            document.getElementById("sure_delete").style.display = "none";
            j.Ⲇᐃⵠⵠ.open = false;
            document.getElementById("cancel_sure_delete").style.display = "none";
            j.ΔⵠⵠⲆᐃ.open = false;
            document.getElementById("chronoquest").style.display = "none";
            j.ⲆⵠΔⲆ.open = false;
            m = a;
            j.ⲆΔⲆⲆΔΔⲆ();
            j.Ⲇᐃ.style.cursor = j.ⵠᐃΔⵠΔⲆⲆ;
            _w.ⲆᐃᐃΔᐃ();
            p = -1;
            q();
            Jf();
        };
        var p = -1;
        function q() {
            j.ⲆᐃΔ();
            if (++p == 30) {
                j.stop();
                m();
                return;
            }
            bj.setTimeout(q, 33);
        }
        this.ᐃⵠⲆⵠⲆ = false;
        this.stop = function () {
            this.ᐃⵠⲆⵠⲆ = Qr;
        };
        this.ᐃⲆⲆΔᐃ = function () {
            ΔᐃⵠⲆ.ΔⵠᐃⲆⲆⲆᐃⲆΔ();
            j.ᐃⵠⲆⵠⲆ = hi;
            p = -1;
            n = 0;
            o();
        };
        this.ⲆᐃΔ = function () {
            this.ΔΔΔΔ.translate.x = Rn - this.ΔΔΔΔ.ᐃⵠ.width - 10;
            this.ΔΔΔΔ.translate.y = 5;
            Cf.ⲆⲆⵠᐃⵠ.translate.x = this.ΔΔΔΔ.translate.x - ᐃΔ[725][0].width - 85;
            Cf.ⲆⲆⵠᐃⵠ.translate.y = 10;
            this.ΔⵠⲆⲆ.button.info.translate.x = this.ΔΔΔΔ.translate.x - ᐃΔ[708][0].width - 10;
            this.ΔⵠⲆⲆ.button.info.translate.y = 10;
            this.ⲆⵠΔⲆ.button.info.translate.x = this.ΔΔΔΔ.translate.x - ᐃΔ[755][0].width - 20;
            this.ⲆⵠΔⲆ.button.info.translate.y = this.ΔⵠⲆⲆ.button.info.translate.y + ᐃΔ[708][0].height + 5;
            this.options.button.info.translate.x = this.ΔΔΔΔ.translate.x - ᐃΔ[727][0].width - 20;
            this.options.button.info.translate.y = this.ⲆⵠΔⲆ.button.info.translate.y + ᐃΔ[727][0].height + 18;
            this.ᐃⲆᐃΔ.ⲆⵠᐃⲆΔⵠᐃ.info.translate.x = this.ΔΔΔΔ.translate.x - ᐃΔ[727][0].width - 20;
            this.ᐃⲆᐃΔ.ⲆⵠᐃⲆΔⵠᐃ.info.translate.y = this.options.button.info.translate.y + ᐃΔ[783][0].height;
            this.ᐃⲆᐃΔ.ⵠⵠΔΔⵠΔⲆ.info.translate.x = this.ΔΔΔΔ.translate.x - ᐃΔ[727][0].width - 20;
            this.ᐃⲆᐃΔ.ⵠⵠΔΔⵠΔⲆ.info.translate.y = this.options.button.info.translate.y + ᐃΔ[783][0].height;
            this.ⲆΔⲆΔⵠ.button.info.translate.x = this.ΔΔΔΔ.translate.x - ᐃΔ[795][0].width - 20;
            this.ⲆΔⲆΔⵠ.button.info.translate.y = this.ᐃⲆᐃΔ.ⲆⵠᐃⲆΔⵠᐃ.info.translate.y + ᐃΔ[795][0].height;
            Yw.ᐃⲆᐃΔᐃ.translate.x = this.ΔΔΔΔ.translate.x - 63 - 85;
            Yw.ᐃⲆᐃΔᐃ.translate.y = 100;
            Yw.ᐃΔᐃᐃⵠ.translate.x = this.ΔΔΔΔ.translate.x - ᐃΔ[517].width - 85;
            Yw.ᐃΔᐃᐃⵠ.translate.y = Yw.ᐃⲆᐃΔᐃ.translate.y + 10 + ᐃΔ[546].height;
            this.ᐃⲆΔⲆⲆ.translate.y = iq - 3 - 193;
            this.ᐃⲆΔⲆⲆ.translate.x = Rn - 3 - 193;
            this.ᐃΔᐃᐃ.translate.x = 5;
            this.ᐃΔᐃᐃ.translate.y = iq - this.ᐃΔᐃᐃ.ᐃⵠ.height - 5;
            this.ᐃⲆⲆⵠⲆ.button.info.translate.x = jq - 91 / 2;
            this.ᐃⲆⲆⵠⲆ.button.info.translate.y = 50;
            this.ΔΔⲆⵠᐃⲆⵠ();
            this.ᐃⵠⵠΔⵠΔΔ();
            this.ⵠⵠⲆⵠΔΔΔ();
            this.ᐃⲆᐃᐃⵠⲆⲆ();
            this.ΔⵠΔⲆΔⲆΔ();
            this.ᐃᐃⵠΔⲆⲆⵠ();
            this.ᐃⵠᐃΔⲆⲆΔ();
            this.ᐃⵠⲆΔⵠⵠⵠΔⲆ();
            this.sign.ⵠᐃⲆᐃⲆⲆᐃ();
            kc();
            Yw.ᐃⵠⵠⵠΔ.ⲆᐃΔ();
            Yw.ⵠΔΔΔⲆ.ⲆᐃΔ();
            this.ⵠΔⲆᐃᐃⲆᐃⵠⲆ.ⲆᐃΔ();
            this.ΔⵠⲆⲆ.ᐃΔᐃⲆᐃⲆⲆ.ⲆᐃΔ();
            this.ΔⵠⲆⲆ.list.ⲆᐃΔ();
            this.Ⲇᐃⵠⵠ.ⲆᐃΔ();
            this.ΔⵠⵠⲆᐃ.ⲆᐃΔ();
            this.ⲆⵠΔⲆ.ⲆᐃΔ();
            this.ᐃⲆⲆⵠⲆ.ⲆᐃΔ();
            this.options.ⲆᐃΔ();
            this.ⲆΔⲆΔⵠ.ⲆᐃΔ();
            this.sign.ⲆᐃΔ();
            var a = 0;
            if (n != 30) {
                a = 1500 / (n + 1) - 50;
            }
            if (p != -1) {
                a = -(1500 / (30 - p + 1) - 48);
            }
            this.ᐃⲆⲆⵠⲆ.button.info.translate.y -= a > 0 ? a : -a;
            this.ΔΔΔΔ.translate.y -= a > 0 ? a : -a;
            Yw.ᐃⲆᐃΔᐃ.translate.y -= a > 0 ? a : -a;
            Yw.ᐃΔᐃᐃⵠ.translate.y -= a > 0 ? a : -a;
            this.ΔⵠⲆⲆ.button.info.translate.y -= a > 0 ? a : -a;
            this.ⲆⵠΔⲆ.button.info.translate.y -= a > 0 ? a : -a;
            this.options.button.info.translate.y -= a > 0 ? a : -a;
            this.ⲆΔⲆΔⵠ.button.info.translate.y -= a > 0 ? a : -a;
            this.ᐃⲆᐃΔ.ⲆⵠᐃⲆΔⵠᐃ.info.translate.y -= a > 0 ? a : -a;
            this.ᐃⲆᐃΔ.ⵠⵠΔΔⵠΔⲆ.info.translate.y -= a > 0 ? a : -a;
            Cf.ⲆⲆⵠᐃⵠ.translate.y -= a > 0 ? a : -a;
            this.ᐃΔᐃᐃ.translate.y -= a < 0 ? a : -a;
            this.ᐃⲆΔⲆⲆ.translate.y -= a < 0 ? a : -a;
        };
        this.ᐃⵠⵠⲆⲆᐃⲆⵠⵠ = function () {
            if (!Yw.ⵠΔΔⵠΔ.enabled && this.ⲆᐃⵠⲆⵠΔⵠ && !Yw.ᐃᐃⲆⵠᐃ) {
                op();
            }
            ep();
            (function () {
                var a = Cf.Δᐃⵠ[tw.ⵠᐃᐃⵠΔ];
                if (qw.ⲆⵠΔⲆⵠ === Cf.mode || Cf.mode === qw.ⵠᐃΔΔΔ || qw.ΔⲆᐃⵠⵠ === Cf.mode || Cf.mode === qw.ⵠΔⵠⲆᐃ || qw.ⵠᐃΔⵠΔᐃΔ === Cf.mode || qw.ⵠᐃΔΔᐃ === Cf.mode || qw.ⵠΔᐃΔⵠ === Cf.mode) {
                    for (var b = 0; a.length > b; b++) {
                        a[b].ⵠΔΔᐃⵠⵠᐃ();
                    }
                } else if (Cf.mode === qw.ⲆΔⲆΔⲆΔΔ) {
                    for (b = 0; b < a.length; b++) {
                        if (Yw.ΔⵠΔⲆΔⵠΔ || Yw.ᐃΔᐃᐃⵠ.enabled || a[b].ᐃⲆⲆΔ.Δᐃⵠⵠᐃ !== "spectator") {
                            a[b].ⵠΔΔᐃⵠⵠᐃ();
                        }
                    }
                }
            })();
            Lq.ΔⲆΔΔⲆᐃⵠ();
            if (this.ⲆᐃⵠⲆⵠΔⵠ) {
                Ic();
                if (this.ΔⲆΔΔⲆⲆᐃ === 1) {
                    this.ΔⵠⲆⲆ.button.ⵠⵠΔΔ(f);
                }
                if (Cf.mode !== qw.ΔⲆᐃⵠⵠ && Cf.mode !== qw.ⵠΔⵠⲆᐃ && Cf.mode !== qw.ⵠᐃΔⵠΔᐃΔ && this.ᐃΔΔⲆΔⵠᐃ === 1) {
                    this.ⲆⵠΔⲆ.button.ⵠⵠΔΔ(f);
                }
                this.options.button.ⵠⵠΔΔ(f);
                if (this.ΔΔⵠΔⵠⲆⲆ === 1) {
                    this.ⲆΔⲆΔⵠ.button.ⵠⵠΔΔ(f);
                }
                if (_w.ᐃⲆⲆΔᐃ) {
                    this.ᐃⲆᐃΔ.ⲆⵠᐃⲆΔⵠᐃ.ⵠⵠΔΔ(f);
                } else {
                    this.ᐃⲆᐃΔ.ⵠⵠΔΔⵠΔⲆ.ⵠⵠΔΔ(f);
                }
                sp();
                Xc();
                this.ᐃΔᐃᐃ.ⵠⵠΔΔ();
                Yc();
                Vc();
                Uc();
                rp();
                ip();
                Pc();
                Qc();
                (function () {
                    if (!Yw.ᐃᐃⲆΔ.open && !Yw.ⲆᐃⲆΔⵠ.open && !Yw.ⵠᐃⲆΔ.open && !Yw.ᐃΔΔΔ.open && !Yw.ⵠⲆΔᐃ.open) {
                        Yw.ⲆᐃⵠⲆⵠ.open = ql;
                        var a = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ];
                        var b = qw.ⲆⲆᐃᐃⵠΔΔᐃᐃ;
                        if (a) {
                            for (var c = 0; c < Cf.Δᐃⵠ[tw.ⵠΔⵠᐃΔ].length; c++) {
                                var d = Cf.Δᐃⵠ[tw.ⵠΔⵠᐃΔ][c];
                                var e = ΔⲆⲆⵠ.ᐃⲆⵠΔ(d, a);
                                if (e < b) {
                                    b = e;
                                    Yw.ⲆᐃⵠⲆⵠ.open = true;
                                    Yw.ⲆᐃⵠⲆⵠ.ⲆⵠΔⵠ = d.ⲆⵠΔⵠ;
                                    Yw.ⲆᐃⵠⲆⵠ.ᐃΔⲆᐃⲆ = d.id;
                                }
                            }
                        }
                    }
                })();
                Ac();
                Sc();
                Ec();
                Fc();
                kc();
                xc();
            }
            if (Yw.ⵠΔΔⵠΔ.enabled) {
                Dc();
            }
            Jc();
            if (this.ⲆᐃⵠⲆⵠΔⵠ && this.ΔΔΔᐃΔΔⲆ === 1) {
                Hc();
            }
            Yw.ⲆᐃᐃΔⵠⵠᐃ.ⵠⵠΔΔ();
            Yw.alert.ⵠⵠΔΔ("#FFF", "#000");
            if (this.ⲆᐃⵠⲆⵠΔⵠ) {
                Yw.ⵠΔΔⵠΔ.ⵠⵠΔΔ();
                Yw.ᐃⲆⲆⵠⲆ.ⵠⵠΔΔ();
                Yw.ⵠᐃΔᐃ.ⵠⲆⵠⵠⲆΔⲆ.ⵠⵠΔΔ(Pf.ΔⲆⲆᐃ.x, Pf.ΔⲆⲆᐃ.y);
            }
            wc();
        };
        this.ᐃⵠⵠⲆⵠⲆⲆⵠⵠ = function () {
            Yw.ᐃⵠⵠ.ⲆᐃΔ();
            Yw.ᐃΔᐃᐃ.ⲆᐃΔ();
            if (!Yw.reconnect.enabled && Yw.ⵠⲆⵠᐃᐃ) {
                Yw.control.ⲆᐃΔ();
                Yw.ᐃⲆᐃΔᐃ.ⲆᐃΔ();
            }
            Cf.ⲆᐃΔ();
            this.ⲆⵠΔⲆ.ⲆⵠΔⵠⲆⵠⵠⲆⲆ();
        };
        this.ΔᐃΔᐃⵠΔⲆⵠⲆ = function () {
            Iv();
        };
        this.ⵠⵠΔᐃⵠΔΔᐃΔ = function () {
            ΔᐃⵠⲆ.ⲆⲆⲆⵠΔΔΔⵠⵠ();
            ΔᐃⵠⲆ.ⲆᐃⲆᐃΔⲆΔⲆᐃ();
            ΔᐃⵠⲆ.ⵠⵠᐃⲆᐃᐃⲆⵠΔ();
            ΔᐃⵠⲆ.ⲆⲆⵠᐃᐃΔⵠⲆΔ();
        };
        this.ⵠⵠΔΔ = function () {
            if (!Yw.reconnect.enabled && Yw.ⵠⲆⵠᐃᐃ) {
                this.ⵠⵠΔᐃⵠΔΔᐃΔ();
            }
            _w.ᐃⵠΔΔⲆΔⲆⲆⵠ();
            this.ᐃⵠⵠⲆⵠⲆⲆⵠⵠ();
            if (mf.ΔΔⲆΔⵠΔⲆ !== 1) {
                this.ΔᐃΔᐃⵠΔⲆⵠⲆ();
                this.ᐃⵠⵠⲆⲆᐃⲆⵠⵠ();
            } else {
                var a = ⲆⲆ.ⵠᐃΔⲆᐃᐃΔ;
                Mc(f, a, jq - a.width / 4, kq - a.height / 4, a.width / 2, a.height / 2);
            }
        };
        this.ᐃᐃΔᐃᐃᐃΔ = function (a) {
            if (!Yw.ᐃⵠⵠⵠΔ.open && !Yw.ⵠΔΔΔⲆ.open) {
                if (a.code === Settings.AutoSteal.k) Settings.AutoSteal.e = false;
                if (a.code === Settings.AutoSpike.k) Settings.AutoSpike.e = false;
                if (a.code === Settings.SwordInChest.k) Settings.SwordInChest.e = false
            }
            if (Yw.ᐃⵠⵠⵠΔ.open && a.keyCode === 27) {
                Yw.ᐃⵠⵠⵠΔ.ⲆᐃᐃΔᐃ();
            } else if (Yw.ⵠΔΔΔⲆ.open && a.keyCode === 27) {
                Yw.ⵠΔΔΔⲆ.ⲆᐃᐃΔᐃ();
            } else if (Yw.ᐃⵠⵠⵠΔ.open || Yw.ⵠΔΔΔⲆ.open || a.keyCode != 79 || p != -1) {
                if (a.keyCode == 13 && p == -1) {
                    if (Yw.ⵠΔΔΔⲆ.open) {
                        Yw.ⵠΔΔΔⲆ.ⵠⵠⵠΔⲆᐃΔ();
                    } else {
                        Yw.ᐃⵠⵠⵠΔ.ᐃⲆⲆΔᐃ();
                    }
                } else if (!Yw.ᐃⵠⵠⵠΔ.open && !Yw.ⵠΔΔΔⲆ.open) {
                    if (a.keyCode === 82) {
                        Yw.ᐃⲆᐃΔᐃ.ΔᐃΔⲆⲆΔᐃ();
                    } else if (a.keyCode !== 80 || Cf.mode !== qw.ⲆΔⲆΔⲆΔΔ || Yw.ΔⵠΔⲆΔⵠΔ) {
                        if (a.keyCode >= 49 && a.keyCode <= 57) {
                            if (Yw.ⲆⵠᐃΔ.id < 0) {
                                var b = a.keyCode - 49;
                                var c = Yw.ⵠᐃΔᐃ.ⵠᐃⲆⵠᐃ[b];
                                if (c) {
                                    ΔᐃⵠⲆ.ΔⵠⲆᐃΔ(c.id, b);
                                }
                            }
                        } else if (a.keyCode == 89) {
                            Yw.ⲆΔⵠΔⲆΔᐃ = !Yw.ⲆΔⵠΔⲆΔᐃ;
                        } else if (a.keyCode == 71) {
                            Yw.ⲆⵠᐃΔ.ⲆΔΔⵠΔⲆⲆⲆᐃ();
                        }
                    } else {
                        Yw.ᐃΔᐃᐃⵠ.ΔᐃΔⲆⲆΔᐃ();
                    }
                }
            } else {
                Yw.ⵠΔΔΔⲆ.ⲆᐃΔⲆΔⵠΔⲆᐃ();
            }
            wf.up(a);
        };
        this.ΔⵠΔᐃᐃΔⲆ = function (a) {
            wf.down(a);
            if (!Yw.ᐃⵠⵠⵠΔ.open && !Yw.ⵠΔΔΔⲆ.open) {
                if (8 == a.keyCode) a.preventDefault();
                if (a.code === Settings.AutoSpike.k) Settings.AutoSpike.e = true;
            }
        };
        this.ⲆᐃⲆⲆΔⲆⵠ = function (b) {
            Pf.ΔⲆⲆᐃ = aw(j.Ⲇᐃ, b);
            var c = Na;
            if (Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0) {
                j.ᐃⲆΔⲆⲆ.focus(Pf.ΔⲆⲆᐃ);
            }
            var d = Yw.ᐃᐃⲆΔ;
            if (Yw.ⲆⵠᐃΔ.id < 0 && d.id >= 0 && (!Yw.ᐃᐃⲆΔ.lock || Yw.ᐃᐃⲆΔ.ⲆⵠΔⵠ === Yw.id)) {
                c |= j.ⵠⵠᐃ[Yw.ᐃᐃⲆΔ.id].ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Uv);
            }
            var e = Yw.ⵠᐃⲆΔ;
            if (e.open && e.ⵠᐃⲆᐃΔ > 0) {
                c |= j.ⵠⲆⲆᐃⲆⵠᐃ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Uv);
            }
            var f = Yw.ⵠⲆΔᐃ;
            if (f.open && f.ⵠⵠᐃᐃΔΔⵠ > 0) {
                c |= j.ΔᐃⵠᐃΔᐃⲆ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Uv);
                c |= j.ΔⲆⲆⲆⲆΔΔ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Uv);
                c |= j.ᐃⲆⵠᐃⵠᐃΔ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Uv);
                c |= j.ⵠⵠⲆⲆᐃΔΔ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Uv);
                c |= j.ᐃⵠⲆⲆⵠΔᐃ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Uv);
            }
            var a = Yw.ᐃΔΔΔ;
            if (a.open && a.ⵠⲆⲆⲆⵠΔⲆ > 0) {
                c |= j.Ⲇᐃⵠⵠᐃᐃⵠ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Uv);
            }
            if (Yw.sign.open) {
                c |= j.sign.button.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Uv);
            }
            if (!Yw.ᐃᐃⲆΔ.lock) {
                if (Yw.ᐃᐃⲆΔ.ⲆΔⵠΔⵠᐃⵠ) {
                    c |= j.ⵠⲆⲆⵠⵠᐃΔ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Uv);
                }
            }
            if (Yw.ᐃᐃⲆΔ.ⲆᐃⲆⲆⵠⲆⲆ) {
                c |= j.ᐃᐃᐃⲆⵠⲆᐃ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Uv);
            }
            if (Yw.ⲆⵠᐃΔ.id < 0 && !j.ΔⵠⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.ΔⵠⵠⲆᐃ.open && !j.ⲆⵠΔⲆ.open && !j.options.open && !j.ⲆΔⲆΔⵠ.open) {
                for (var k = Yw.ⵠᐃΔᐃ.ⵠᐃⲆⵠᐃ, m = 0; k.length > m; m++) {
                    var n = k[m].ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Uv);
                    c |= n;
                    if (n) {
                        Yw.ⵠᐃΔᐃ.ⵠⲆⵠⵠⲆΔⲆ.start(m, Pf.ΔⲆⲆᐃ);
                    }
                    if (d.open && (d.id < 0 || d.id == k[m].id) || Yw.ⲆᐃⲆΔⵠ.open && k[m].id === 109 || Yw.ⲆᐃⵠⲆⵠ.open && k[m].id === 180 || Yw.ᐃΔΔΔ.open && (k[m].id === 109 || k[m].id === 131) || Yw.ⵠᐃⲆΔ.open && k[m].id === 134 || Yw.ⵠⲆΔᐃ.open && k[m].id === 109) {
                        c |= j.ΔΔΔΔⵠ[k[m].id].ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Uv);
                    }
                }
            }
            if (Yw.ⲆⲆⵠⲆᐃ.open) {
                c |= j.ⲆⲆⵠⲆᐃ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Uv);
            }
            if (j.ΔⲆⲆⲆⲆ != -1) {
                if (c |= j.ⲆᐃⵠΔⲆ[j.ΔⲆⲆⲆⲆ].button.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Uv)) {
                    var o = Ar;
                }
            } else {
                o = pl;
            }
            if (Yw.ⲆⵠᐃΔ.id < 0 && Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0 && !o && !j.ΔⵠⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.options.open && !j.ΔⵠⵠⲆᐃ.open && !j.ⲆΔⲆΔⵠ.open && !Yw.ᐃᐃⲆⵠᐃ) {
                k = Yw.ⲆⵠᐃΔ.ⵠᐃⵠᐃᐃ;
                m = 0;
                for (; k.length > m; m++) {
                    c |= k[m].ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Uv);
                }
            }
            if (Yw.ⲆⵠᐃΔ.id < 0 && Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0 && Yw.ᐃⲆⲆⵠⲆ.open && !j.ΔⵠⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.options.open && !j.ΔⵠⵠⲆᐃ.open && !j.ⲆⵠΔⲆ.open && !j.ⲆΔⲆΔⵠ.open) {
                c |= j.ᐃⲆⲆⵠⲆ.button.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Uv);
            }
            if (Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0 && !j.Ⲇᐃⵠⵠ.open && !j.options.open && !j.ΔⵠⵠⲆᐃ.open && !j.ⲆⵠΔⲆ.open && !j.ⲆΔⲆΔⵠ.open) {
                c |= j.ΔⵠⲆⲆ.button.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Uv);
            }
            if (Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0 && !j.ΔⵠⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.ΔⵠⵠⲆᐃ.open && !j.ⲆⵠΔⲆ.open && !j.ⲆΔⲆΔⵠ.open) {
                c |= j.options.button.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Uv);
            }
            if (Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0 && !j.ΔⵠⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.ΔⵠⵠⲆᐃ.open && !j.ⲆⵠΔⲆ.open && !j.options.open) {
                c |= j.ⲆΔⲆΔⵠ.button.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Uv);
            }
            if (Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0 && !j.ΔⵠⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.ΔⵠⵠⲆᐃ.open && !j.ⲆⵠΔⲆ.open && !j.options.open && !j.ⲆΔⲆΔⵠ.open) {
                if (_w.ᐃⲆⲆΔᐃ) {
                    c |= j.ᐃⲆᐃΔ.ⲆⵠᐃⲆΔⵠᐃ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Uv);
                } else {
                    c |= j.ᐃⲆᐃΔ.ⵠⵠΔΔⵠΔⲆ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Uv);
                }
            }
            if (Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0 && !j.ΔⵠⲆⲆ.open && !j.ⲆΔⲆΔⵠ.open && !j.Ⲇᐃⵠⵠ.open && !j.options.open && !j.ΔⵠⵠⲆᐃ.open && qw.ΔⲆᐃⵠⵠ !== Cf.mode && Cf.mode !== qw.ⵠΔⵠⲆᐃ && qw.ⵠᐃΔⵠΔᐃΔ !== Cf.mode) {
                c |= j.ⲆⵠΔⲆ.button.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Uv);
            }
            if (!c && !j.ΔⵠⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.options.open && !j.ΔⵠⵠⲆᐃ.open && !j.ⲆⵠΔⲆ.open && !j.ⲆΔⲆΔⵠ.open && !j.sign.open) {
                if (Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ >= 0) {
                    ΔᐃⵠⲆ.ⲆᐃΔᐃᐃΔⲆⲆᐃ();
                } else if (!o) {
                    Pf.down();
                }
            }
        };
        this.ⲆⵠⲆⵠΔΔⲆ = function (b) {
            Pf.ΔⲆⲆᐃ = aw(j.Ⲇᐃ, b);
            Pf.up();
            if (!Yw.ⵠᐃΔᐃ.ⵠⲆⵠⵠⲆΔⲆ.release()) {
                var c = Yw.ᐃᐃⲆΔ;
                var d = Yw.ⲆᐃⲆΔⵠ;
                var e = Yw.ⲆᐃⵠⲆⵠ;
                var f = Yw.ⵠᐃⲆΔ;
                var i = Yw.ⵠⲆΔᐃ;
                var k = Yw.ᐃΔΔΔ;
                if (Yw.control.attack) {
                    Yw.control.attack = 0;
                    ΔᐃⵠⲆ.ᐃΔᐃᐃⲆⲆΔΔⲆ();
                }
                if (j.ΔⲆⲆⲆⲆ != -1) {
                    var m = j.ⲆᐃⵠΔⲆ[j.ΔⲆⲆⲆⲆ].button.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv);
                    var n = document.getElementById("team_box").style;
                    if (m && n.display == "inline-block") {
                        n.display = "none";
                        return;
                    }
                    if (m) {
                        j.ⲆᐃⵠΔⲆ[j.ΔⲆⲆⲆⲆ].action();
                    }
                }
                if (Yw.ⲆⵠᐃΔ.id < 0 && c.id >= 0 && !j.Ⲇᐃⵠⵠ.open) {
                    if (!Yw.ᐃᐃⲆΔ.lock || Yw.id === Yw.ᐃᐃⲆΔ.ⲆⵠΔⵠ) {
                        if (m = j.ⵠⵠᐃ[Yw.ᐃᐃⲆΔ.id].ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv)) {
                            ΔᐃⵠⲆ.ⲆⵠⵠⲆᐃⵠΔⵠᐃ(c);
                        }
                    }
                }
                if ((f = Yw.ⵠᐃⲆΔ).open && f.ⵠᐃⲆᐃΔ > 0 && !j.Ⲇᐃⵠⵠ.open) {
                    if (m = j.ⵠⲆⲆᐃⲆⵠᐃ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv)) {
                        ΔᐃⵠⲆ.ᐃⲆᐃⲆᐃⵠⲆⵠⲆ(f);
                    }
                }
                if ((i = Yw.ⵠⲆΔᐃ).open && i.ⵠⵠᐃᐃΔΔⵠ > 0 && !j.Ⲇᐃⵠⵠ.open) {
                    switch (i.type) {
                        case tw.ⲆⲆΔΔᐃ:
                            if (m = j.ΔᐃⵠᐃΔᐃⲆ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv)) {
                                ΔᐃⵠⲆ.ⵠⵠΔⵠΔⲆⵠ(i);
                            }
                            break;
                        case tw.ΔⲆⵠⲆΔ:
                            if (m = j.ΔⲆⲆⲆⲆΔΔ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv)) {
                                ΔᐃⵠⲆ.ⵠⵠΔⵠΔⲆⵠ(i);
                            }
                            break;
                        case tw.ᐃᐃⵠΔⲆ:
                            if (m = j.ᐃⲆⵠᐃⵠᐃΔ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv)) {
                                ΔᐃⵠⲆ.ⵠⵠΔⵠΔⲆⵠ(i);
                            }
                            break;
                        case tw.ⵠΔⲆΔΔ:
                            if (m = j.ⵠⵠⲆⲆᐃΔΔ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv)) {
                                ΔᐃⵠⲆ.ⵠⵠΔⵠΔⲆⵠ(i);
                            }
                            break;
                        case tw.ⲆⲆⲆⲆⲆ:
                            if (m = j.ᐃⵠⲆⲆⵠΔᐃ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv)) {
                                ΔᐃⵠⲆ.ⵠⵠΔⵠΔⲆⵠ(i);
                            }
                    }
                }
                if ((k = Yw.ᐃΔΔΔ).open && k.ⵠⲆⲆⲆⵠΔⲆ > 0 && !j.Ⲇᐃⵠⵠ.open) {
                    if (m = j.Ⲇᐃⵠⵠᐃᐃⵠ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv)) {
                        ΔᐃⵠⲆ.ᐃⵠᐃⵠᐃᐃⵠΔⵠ(k);
                    }
                }
                if (Yw.sign.open && !j.Ⲇᐃⵠⵠ.open) {
                    if (m = j.sign.button.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv)) {
                        j.sign.select();
                    }
                }
                if (!Yw.ᐃᐃⲆΔ.lock && !j.Ⲇᐃⵠⵠ.open) {
                    if (Yw.ᐃᐃⲆΔ.ⲆΔⵠΔⵠᐃⵠ && (m = j.ⵠⲆⲆⵠⵠᐃΔ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv))) {
                        ΔᐃⵠⲆ.ᐃⲆᐃΔᐃΔⵠⵠΔ(c);
                    }
                }
                if (Yw.ᐃᐃⲆΔ.ⲆᐃⲆⲆⵠⲆⲆ && !j.Ⲇᐃⵠⵠ.open && (m = j.ᐃᐃᐃⲆⵠⲆᐃ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv))) {
                    ΔᐃⵠⲆ.ΔᐃΔΔΔⲆⵠᐃⲆ(c);
                    if (ga) {
                        ga("send", "event", "Game", "lockpick");
                    }
                }
                if (Yw.ⲆⲆⵠⲆᐃ.open) {
                    if (m = j.ⲆⲆⵠⲆᐃ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv)) {
                        ΔᐃⵠⲆ.ⲆⲆⵠⲆᐃ();
                        if (ga) {
                            ga("send", "event", "Game", "resurrection");
                        }
                    }
                }
                if (Yw.ⲆⵠᐃΔ.id < 0 && !Yw.ⵠΔΔⵠΔ.enabled && !j.Ⲇᐃⵠⵠ.open) {
                    for (var l = Yw.ⵠᐃΔᐃ.ⵠᐃⲆⵠᐃ, o = 0; o < l.length; o++) {
                        if (m = l[o].ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv)) {
                            if (b.which != 1 || b.shiftKey) {
                                if ((b.which == 1 && b.shiftKey || b.which == 3) && Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0) {
                                    j.Ⲇᐃⵠⵠ.ⲆⲆⵠⲆⵠⲆⵠ(l[o].id);
                                }
                            } else {
                                ΔᐃⵠⲆ.ΔⵠⲆᐃΔ(l[o].id, o);
                            }
                        } else if (c.open && (c.id < 0 || l[o].id === c.id)) {
                            if ((m = j.ΔΔΔΔⵠ[l[o].id].ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv)) && Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0) {
                                ΔᐃⵠⲆ.ᐃⲆᐃⲆⵠⲆⲆΔⲆ(c, l[o].id, b.shiftKey ? 10 : 1);
                            }
                        } else if (e.open && l[o].id === 180) {
                            if ((m = j.ΔΔΔΔⵠ[l[o].id].ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv)) && Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0) {
                                ΔᐃⵠⲆ.ΔⲆⵠΔⲆⲆⲆΔΔ(e);
                            }
                        } else if (d.open && l[o].id === 109) {
                            if ((m = j.ΔΔΔΔⵠ[l[o].id].ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv)) && Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0) {
                                ΔᐃⵠⲆ.ᐃΔⵠⲆⲆΔⲆΔⵠ(d, b.shiftKey ? 10 : 1);
                            }
                        } else if (f.open && l[o].id === 134) {
                            if ((m = j.ΔΔΔΔⵠ[l[o].id].ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv)) && Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0) {
                                ΔᐃⵠⲆ.ΔΔᐃⲆⲆᐃΔⵠᐃ(f, b.shiftKey ? 10 : 1);
                            }
                        } else if (i.open && l[o].id === 109) {
                            if ((m = j.ΔΔΔΔⵠ[l[o].id].ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv)) && Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0) {
                                ΔᐃⵠⲆ.ⲆⵠΔⵠᐃⵠⵠΔⲆ(i, b.shiftKey ? 10 : 1);
                            }
                        } else if (k.open && (l[o].id === 109 || l[o].id === 131)) {
                            if ((m = j.ΔΔΔΔⵠ[l[o].id].ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv)) && Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0) {
                                if (l[o].id === 109) {
                                    ΔᐃⵠⲆ.ᐃᐃΔⵠΔⵠᐃ(k, b.shiftKey ? 10 : 1, 0);
                                } else {
                                    ΔᐃⵠⲆ.ᐃᐃΔⵠΔⵠᐃ(k, 0, b.shiftKey ? 10 : 1);
                                }
                            }
                        }
                    }
                }
                if (Yw.ⲆⵠᐃΔ.id < 0 && Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0 && !Yw.ⵠΔΔⵠΔ.enabled && !j.Ⲇᐃⵠⵠ.open && !Yw.ᐃᐃⲆⵠᐃ) {
                    l = Yw.ⲆⵠᐃΔ.ⵠᐃⵠᐃᐃ;
                    o = 0;
                    for (; o < l.length; o++) {
                        if (m = l[o].ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv)) {
                            ⲆΔⵠⵠᐃ = ΔᐃⵠⲆ.ⵠᐃⲆⲆⵠⲆᐃⵠΔ(l[o].id);
                            if (ⲆΔⵠⵠᐃ && ga) {
                                ga("send", "event", "Game", "craft", vr[Ls[l[o].id].ⲆΔᐃᐃ].name);
                            }
                        }
                    }
                }
                if (Yw.ⲆⵠᐃΔ.id < 0 && Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0 && Yw.ᐃⲆⲆⵠⲆ.open && !j.ⲆΔⲆΔⵠ.open && !j.ΔⵠⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.options.open && !j.ΔⵠⵠⲆᐃ.open && !j.ⲆⵠΔⲆ.open) {
                    if (m = j.ᐃⲆⲆⵠⲆ.button.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Tv)) {
                        $w.ᐃⲆⲆⵠⲆ.select();
                    }
                }
                if (Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0 && !j.ΔⵠⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.ⲆΔⲆΔⵠ.open && !j.ΔⵠⵠⲆᐃ.open && !j.ⲆⵠΔⲆ.open && !j.options.open) {
                    if (_w.ᐃⲆⲆΔᐃ) {
                        if (m = j.ᐃⲆᐃΔ.ⲆⵠᐃⲆΔⵠᐃ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv)) {
                            _w.select();
                            if (ga) {
                                ga("send", "event", "Game", "sound on");
                            }
                        }
                    } else if (m = j.ᐃⲆᐃΔ.ⵠⵠΔΔⵠΔⲆ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv)) {
                        _w.select();
                        if (ga) {
                            ga("send", "event", "Game", "sound off");
                        }
                    }
                }
                if (Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0 && !j.ΔⵠⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.ΔⵠⵠⲆᐃ.open && !j.ⲆⵠΔⲆ.open && !j.ⲆΔⲆΔⵠ.open) {
                    if (m = j.options.button.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv)) {
                        j.options.ⵠΔⲆᐃᐃΔⲆᐃⵠ();
                        if (ga) {
                            ga("send", "event", "Game", "options");
                        }
                    }
                }
                if (Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0 && !j.ΔⵠⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.ΔⵠⵠⲆᐃ.open && !j.ⲆⵠΔⲆ.open && !j.options.open && j.ΔΔⵠΔⵠⲆⲆ === 1) {
                    if (m = j.ⲆΔⲆΔⵠ.button.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv)) {
                        j.ⲆΔⲆΔⵠ.select();
                        if (ga) {
                            ga("send", "event", "Game", "market");
                        }
                    }
                }
                if (Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0 && !j.Ⲇᐃⵠⵠ.open && !j.ⲆΔⲆΔⵠ.open && !j.options.open && !j.ΔⵠⵠⲆᐃ.open && !j.ⲆⵠΔⲆ.open && j.ΔⲆΔΔⲆⲆᐃ === 1) {
                    if (m = j.ΔⵠⲆⲆ.button.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv)) {
                        j.ΔⵠⲆⲆ.ΔⲆΔⵠΔⵠΔᐃⲆ();
                        if (ga) {
                            ga("send", "event", "Game", "recipe");
                        }
                    }
                }
                if (Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0 && !j.ΔⵠⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.options.open && !j.ΔⵠⵠⲆᐃ.open && !j.ⲆΔⲆΔⵠ.open && Cf.mode !== qw.ΔⲆᐃⵠⵠ && Cf.mode !== qw.ⵠΔⵠⲆᐃ && Cf.mode !== qw.ⵠᐃΔⵠΔᐃΔ && j.ᐃΔΔⲆΔⵠᐃ === 1) {
                    if (m = j.ⲆⵠΔⲆ.button.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv)) {
                        j.ⲆⵠΔⲆ.select();
                        if (ga) {
                            ga("send", "event", "Game", "quests");
                        }
                    }
                }
                if (Yw.ⲆⵠᐃΔ.ⲆⵠⵠⲆⵠ && b.which == 3) {
                    j.ΔⵠⵠⲆᐃ.ⲆⲆⵠⲆⵠⲆⵠ();
                }
            }
        };
        this.ⲆΔᐃⵠᐃⲆⲆ = false;
        this.ᐃⵠΔⵠᐃⲆᐃ = function (b) {
            Pf.ΔⲆⲆᐃ = aw(j.Ⲇᐃ, b);
            var d = false;
            $w.ⲆⲆᐃΔⲆ.display = 0;
            Yw.ⵠᐃΔᐃ.ⵠⲆⵠⵠⲆΔⲆ.ⲆᐃΔΔᐃ(Pf.ΔⲆⲆᐃ);
            if (j.ΔⲆⲆⲆⲆ != -1) {
                d |= j.ⲆᐃⵠΔⲆ[j.ΔⲆⲆⲆⲆ].button.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Tv);
            }
            var e = Yw.ⵠᐃⲆΔ;
            if (e.open && e.ⵠᐃⲆᐃΔ > 0) {
                d |= j.ⵠⲆⲆᐃⲆⵠᐃ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Tv);
            }
            var f = Yw.ⵠⲆΔᐃ;
            if (f.open && f.ⵠⵠᐃᐃΔΔⵠ > 0) {
                d |= j.ΔᐃⵠᐃΔᐃⲆ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Tv);
                d |= j.ΔⲆⲆⲆⲆΔΔ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Tv);
                d |= j.ᐃⲆⵠᐃⵠᐃΔ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Tv);
                d |= j.ⵠⵠⲆⲆᐃΔΔ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Tv);
                d |= j.ᐃⵠⲆⲆⵠΔᐃ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Tv);
            }
            var a = Yw.ᐃΔΔΔ;
            if (a.open && a.ⵠⲆⲆⲆⵠΔⲆ > 0) {
                d |= j.Ⲇᐃⵠⵠᐃᐃⵠ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Tv);
            }
            if (Yw.sign.open) {
                d |= j.sign.button.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Tv);
            }
            var i = Yw.ᐃᐃⲆΔ;
            if (Yw.ⲆⵠᐃΔ.id < 0 && i.id >= 0 && !Yw.ⵠΔΔⵠΔ.enabled) {
                if (!Yw.ᐃᐃⲆΔ.lock || Yw.ᐃᐃⲆΔ.ⲆⵠΔⵠ === Yw.id) {
                    d |= j.ⵠⵠᐃ[i.id].ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Tv);
                }
            }
            if (Yw.ⲆⲆⵠⲆᐃ.open) {
                d |= j.ⲆⲆⵠⲆᐃ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Tv);
            }
            if (!Yw.ᐃᐃⲆΔ.lock && !Yw.ⵠΔΔⵠΔ.enabled) {
                if (Yw.ᐃᐃⲆΔ.ⲆΔⵠΔⵠᐃⵠ) {
                    d |= j.ⵠⲆⲆⵠⵠᐃΔ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Tv);
                }
            }
            if (Yw.ᐃᐃⲆΔ.ⲆᐃⲆⲆⵠⲆⲆ && !Yw.ⵠΔΔⵠΔ.enabled) {
                d |= j.ᐃᐃᐃⲆⵠⲆᐃ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Tv);
            }
            if (Yw.ⲆⵠᐃΔ.id < 0 && !Yw.ⵠΔΔⵠΔ.enabled) {
                for (var k = Yw.ⵠᐃΔᐃ.ⵠᐃⲆⵠᐃ, m = 0; m < k.length; m++) {
                    var n = k[m].ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Tv);
                    d |= $w.ⲆⲆᐃΔⲆ.ⲆΔᐃⵠ(n, k[m], 0);
                    if (i.open && (i.id < 0 || i.id == k[m].id) || Yw.ⲆᐃⲆΔⵠ.open && k[m].id == 109 || Yw.ⲆᐃⵠⲆⵠ.open && k[m].id === 180 || Yw.ᐃΔΔΔ.open && (k[m].id == 109 || k[m].id == 131) || Yw.ⵠᐃⲆΔ.open && k[m].id == 134 || Yw.ⵠⲆΔᐃ.open && k[m].id == 109) {
                        d |= j.ΔΔΔΔⵠ[k[m].id].ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Tv);
                    }
                }
            }
            if (Yw.ⲆⵠᐃΔ.id < 0 && Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0 && !Yw.ⵠΔΔⵠΔ.enabled && !Yw.ᐃᐃⲆⵠᐃ) {
                k = Yw.ⲆⵠᐃΔ.ⵠᐃⵠᐃᐃ;
                m = 0;
                for (; k.length > m; m++) {
                    n = false;
                    n = k[m].ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Tv);
                    d |= $w.ⲆⲆᐃΔⲆ.ⲆΔᐃⵠ(n, k[m], 1);
                }
            }
            if (Yw.ⲆⵠᐃΔ.id < 0 && Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0 && Yw.ᐃⲆⲆⵠⲆ.open && !j.ΔⵠⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.options.open && !j.ΔⵠⵠⲆᐃ.open && !j.ⲆⵠΔⲆ.open && !j.ⲆΔⲆΔⵠ.open) {
                d |= j.ᐃⲆⲆⵠⲆ.button.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Tv);
            }
            if (Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0 && !j.Ⲇᐃⵠⵠ.open && !j.options.open && !j.ΔⵠⵠⲆᐃ.open && !j.ⲆⵠΔⲆ.open && !j.ⲆΔⲆΔⵠ.open && j.ΔⲆΔΔⲆⲆᐃ === 1) {
                d |= j.ΔⵠⲆⲆ.button.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Tv);
            }
            if (Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0 && !j.ΔⵠⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.ΔⵠⵠⲆᐃ.open && !j.ⲆⵠΔⲆ.open && !j.ⲆΔⲆΔⵠ.open) {
                d |= j.options.button.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Tv);
            }
            if (Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0 && !j.ΔⵠⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.ΔⵠⵠⲆᐃ.open && !j.ⲆⵠΔⲆ.open && !j.options.open && j.ΔΔⵠΔⵠⲆⲆ === 1) {
                d |= j.ⲆΔⲆΔⵠ.button.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Tv);
            }
            if (Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0 && !j.ΔⵠⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.ΔⵠⵠⲆᐃ.open && !j.ⲆⵠΔⲆ.open && !j.options.open && !j.ⲆΔⲆΔⵠ.open) {
                if (_w.ᐃⲆⲆΔᐃ) {
                    d |= j.ᐃⲆᐃΔ.ⲆⵠᐃⲆΔⵠᐃ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Tv);
                } else {
                    d |= j.ᐃⲆᐃΔ.ⵠⵠΔΔⵠΔⲆ.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Tv);
                }
            }
            if (Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ < 0 && !j.ΔⵠⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.options.open && !j.ΔⵠⵠⲆᐃ.open && !j.ⲆΔⲆΔⵠ.open && Cf.mode !== qw.ΔⲆᐃⵠⵠ && qw.ⵠΔⵠⲆᐃ !== Cf.mode && qw.ⵠΔΔⵠᐃᐃᐃΔⲆ !== Cf.mode && j.ᐃΔΔⲆΔⵠᐃ === 1) {
                d |= j.ⲆⵠΔⲆ.button.ⲆΔᐃⵠ(j.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Tv);
            }
            if (d !== j.ⲆΔᐃⵠᐃⲆⲆ) {
                j.ⲆΔᐃⵠᐃⲆⲆ = d;
                c.style.cursor = d ? j.ⵠΔⵠΔⵠⲆΔ : j.ⵠᐃΔⵠΔⲆⲆ;
            }
        };
        this.ⲆⲆⲆⲆⲆᐃⲆ = function () {
            bj.addEventListener("mousedown", this.ⲆᐃⲆⲆΔⲆⵠ, false);
            bj.addEventListener("mouseup", this.ⲆⵠⲆⵠΔΔⲆ, false);
            bj.addEventListener("mousemove", this.ᐃⵠΔⵠᐃⲆᐃ, false);
            bj.addEventListener("keyup", this.ᐃᐃΔᐃᐃᐃΔ, pn);
            bj.addEventListener("keydown", this.ΔⵠΔᐃᐃΔⲆ, false);
        };
        this.ⲆΔⲆⲆΔΔⲆ = function () {
            bj.removeEventListener("mousedown", this.ⲆᐃⲆⲆΔⲆⵠ, mg);
            bj.removeEventListener("mouseup", this.ⲆⵠⲆⵠΔΔⲆ, false);
            bj.removeEventListener("mousemove", this.ᐃⵠΔⵠᐃⲆᐃ, Ro);
            bj.removeEventListener("keyup", this.ᐃᐃΔᐃᐃᐃΔ, lj);
            bj.removeEventListener("keydown", this.ΔⵠΔᐃᐃΔⲆ, ia);
        };
    }
    function Pw() {
        ΔⲆⲆⵠ.ΔᐃᐃΔᐃⵠᐃ("https://twitter.com/intent/tweet?text=I%20survived%20" + Yw.Ⲇⵠᐃ + "%20days%20with%20" + Yw.ⲆⲆⵠⵠⲆⵠⲆ.ⵠⵠᐃΔⵠ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
    }
    function Qw(c, d, e, f, i, j) {
        const a = ((3602 + c) * 1103515245 + 12345) % 2147483648;
        const k = (d | 8190) & ~(d & 8190);
        const m = ((8004 + e) * 1103515245 + 12345) % 2147483648;
        const h = ((39824 + f) * 1664525 + 1013904223) % 4294967296;
        const l = (8 << (j >> 0 & 255)) + (0 << (j >> 8 & 255)) + (16 << (j >> 16 & 255)) + (24 << (j >> 24 & 255));
        const g = Vw(a, k, m, h, (24 << (i & 255)) + (8 << (i >> 8 & 255)) + (0 << (i >> 16 & 255)) + (16 << (i >> 24 & 255)));
        const n = fr(l, a, k, m);
        return (0 << ((g ^ n) >> 8 & 255)) + (16 << ((g ^ n) >> 24 & 255)) + (24 << ((g ^ n) >> 16 & 255)) + (8 << ((g ^ n) & 255));
    }
    function Rw(a, b, c, d) {
        Nj(Tu, a, b, c, d);
        return ((182 + (xk(Cc[0], Cc[1], Cc[2], Cc[3], Cc[0], Cc[1]) ^ xk(Cc[2], Cc[3], Cc[0], Cc[1], Cc[2], Cc[3]))) * 8121 + 28411) % 134456;
    }
    function Sw(i, v) {
        this.Ⲇᐃ = i;
        this.ᐃ = v;
        if (bj.navigator.userAgent.indexOf("Edge") > -1) {
            this.ⵠᐃΔⵠΔⲆⲆ = "default";
            this.ⵠΔⵠΔⵠⲆΔ = "pointer";
        } else {
            this.ⵠᐃΔⵠΔⲆⲆ = "url('img/cursor0.png'), default";
            this.ⵠΔⵠΔⵠⲆΔ = "url('img/cursor1.png'), pointer";
        }
        var C = this;
        function e(c, d, e, f, i) {
            var a = this;
            for (var j = d + 9, k = 0, m = f, n = d; j > n; n++) {
                C.buttons[n].info.callback = o;
                C.buttons[n].info.ᐃᐃᐃᐃΔΔⵠⵠⵠ = c;
            }
            function o() {
                if (m !== this.ᐃᐃⲆΔⵠΔⵠ && this.ᐃᐃⲆΔⵠΔⵠ !== -1) {
                    if (this.ΔⵠᐃⲆᐃⵠⲆ > 0) {
                        if (d === ⵠⵠΔΔⵠⵠΔ) {
                            O(y, da, "none");
                        } else {
                            O(w, da, "none");
                        }
                    } else if (ⵠⵠΔΔⵠⵠΔ === d) {
                        O(y, ea, "inline-block");
                    } else {
                        O(w, ea, "inline-block");
                    }
                    m = this.ᐃᐃⲆΔⵠΔⵠ;
                    e(this.ᐃᐃⲆΔⵠΔⵠ);
                    p();
                }
            }
            function p() {
                var a = c[m];
                mf.Ⲇᐃᐃⵠᐃⵠᐃ = Zv(a.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, undefined, 10, 8);
                if (a.level !== undefined) {
                    mf.ΔΔᐃⵠᐃⵠⵠ = Zv("Level " + a.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, ns, 10, 8);
                } else {
                    mf.ΔΔᐃⵠᐃⵠⵠ = Zv("by " + a.ΔᐃⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, 10, 8);
                }
            }
            this.ⵠᐃⲆⵠᐃⵠⵠ = function () {
                for (var a = d, b = k * 3; j > a && c.length > b; a++, b++) {
                    if (ⵠΔΔ.ⵠΔⵠΔᐃⲆⲆ !== c[b].ᐃⲆⵠ || i[b] !== 0) {
                        C.buttons[a].info.ᐃᐃⲆΔⵠΔⵠ = b;
                        for (var e = 0; e < 3; e++) {
                            C.buttons[a].info.ᐃⵠ[e] = ⲆⵠⵠⲆⵠΔΔ[c[b].ᐃⲆⵠ][e];
                            C.buttons[a].info.active = ea;
                            C.buttons[a].info.ΔⵠᐃⲆᐃⵠⲆ = i[b];
                        }
                    } else {
                        C.buttons[a].info.ᐃᐃⲆΔⵠΔⵠ = -1;
                        C.buttons[a].info.active = da;
                    }
                }
                for (; a < j; a++) {
                    C.buttons[a].info.ᐃᐃⲆΔⵠΔⵠ = -1;
                    C.buttons[a].info.active = da;
                }
                p();
            };
            C.buttons[j].info.callback = function () {
                if (k > 0) {
                    k--;
                }
                a.ⵠᐃⲆⵠᐃⵠⵠ();
            };
            C.buttons[j + 1].info.callback = function () {
                if (k * 3 + 9 < c.length) {
                    k++;
                }
                a.ⵠᐃⲆⵠᐃⵠⵠ();
            };
        }
        function n() {
            var b = Number(ⲆΔⲆⲆ.get("starve_crate"));
            var c = Number(ⲆΔⲆⲆ.get("starve_dead"));
            var d = Number(ⲆΔⲆⲆ.get("starve_book"));
            var e = Number(ⲆΔⲆⲆ.get("starve_bag"));
            var f = Number(ⲆΔⲆⲆ.get("starve_skin"));
            var a = Number(ⲆΔⲆⲆ.get("starve_accessory"));
            C.ᐃᐃᐃⵠ = f || 0;
            C.ΔⵠΔΔⵠ = d || 0;
            C.ΔⵠᐃΔⵠ = b || 1;
            C.ΔᐃᐃⲆⲆ = a || 0;
            C.ⲆⲆᐃⵠⲆ = e || 0;
            C.Ⲇᐃⵠᐃᐃ = c || 0;
        }
        function a() {
            for (var a = Δᐃⵠᐃ.ΔᐃΔΔᐃ, b = 0; b < a.length; b++) {
                if (a[b].ᐃⲆⵠ === ⵠΔΔ.ᐃᐃⵠⲆΔ) {
                    C.unlock.ᐃᐃᐃⵠ[b] = 1;
                } else {
                    C.unlock.ᐃᐃᐃⵠ[b] = 0;
                }
            }
            a = Δᐃⵠᐃ.ΔΔᐃΔⲆ;
            b = 0;
            for (; b < a.length; b++) {
                if (ⵠΔΔ.ᐃᐃⵠⲆΔ === a[b].ᐃⲆⵠ) {
                    C.unlock.ΔᐃᐃⲆⲆ[b] = 1;
                } else {
                    C.unlock.ΔᐃᐃⲆⲆ[b] = 0;
                }
            }
            a = Δᐃⵠᐃ.ᐃΔⲆΔ;
            b = 0;
            for (; a.length > b; b++) {
                if (a[b].ᐃⲆⵠ === ⵠΔΔ.ᐃᐃⵠⲆΔ) {
                    C.unlock.ⲆⲆᐃⵠⲆ[b] = 1;
                } else {
                    C.unlock.ⲆⲆᐃⵠⲆ[b] = 0;
                }
            }
            a = Δᐃⵠᐃ.ⲆⵠᐃΔⲆ;
            b = 0;
            for (; b < a.length; b++) {
                if (a[b].ᐃⲆⵠ === ⵠΔΔ.ᐃᐃⵠⲆΔ) {
                    C.unlock.ΔⵠΔΔⵠ[b] = 1;
                } else {
                    C.unlock.ΔⵠΔΔⵠ[b] = 0;
                }
            }
            a = Δᐃⵠᐃ.ΔᐃⲆⲆΔ;
            b = 0;
            for (; b < a.length; b++) {
                if (ⵠΔΔ.ᐃᐃⵠⲆΔ === a[b].ᐃⲆⵠ) {
                    C.unlock.ΔⵠᐃΔⵠ[b] = 1;
                    C.unlock.Ⲇᐃⵠᐃᐃ[b] = 1;
                } else {
                    C.unlock.ΔⵠᐃΔⵠ[b] = 0;
                    C.unlock.Ⲇᐃⵠᐃᐃ[b] = 0;
                }
            }
        }
        this.waiting = rj;
        this.ⲆᐃⲆᐃⵠⲆⲆ = 0;
        this.ⵠΔᐃⲆᐃⲆⵠ = -1;
        this.ΔᐃⵠᐃΔⵠᐃ = {
            translate: {
                y: 0,
                x: 0
            },
            angle: 0,
            ᐃⵠ: ᐃΔ[301],
            ⵠⵠΔΔ: function () {
                this.angle += Af * 2;
                v.save();
                v.translate(this.translate.x + this.ᐃⵠ.width / 2, this.translate.y + this.ᐃⵠ.height / 2);
                v.rotate(this.angle);
                Mc(v, this.ᐃⵠ, -this.ᐃⵠ.width / 2, -this.ᐃⵠ.height / 2);
                v.restore();
            }
        };
        this.ᐃΔⵠΔᐃⲆΔ = {
            id: document.getElementById("langselect"),
            style: document.getElementById("langselect").style,
            translate: {
                y: 0,
                x: 0
            },
            ⲆᐃΔ: function () {
                this.style.left = Math.floor(this.translate.x) + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        this.ⲆᐃⲆᐃⵠ = 0;
        this.ΔⲆᐃΔᐃΔⵠ = -1;
        this.ⵠᐃᐃΔⵠᐃΔ = undefined;
        this.ⲆΔⵠᐃᐃⵠᐃ = "";
        this.ΔⲆⲆⲆⲆⲆᐃ = "";
        this.ΔⲆⲆⵠΔⵠΔ = sl;
        this.ⲆⲆΔΔⲆ = 0;
        this.ᐃᐃⵠᐃⲆⵠᐃ = -1;
        this.ⵠⵠΔⲆΔⲆᐃ = Ft;
        this.ⵠⵠΔⵠᐃΔΔ = 0;
        this.ⵠⲆⲆᐃΔΔⵠ = 0;
        this.ⵠᐃⵠⲆⲆⵠᐃ = 0;
        this.ᐃᐃᐃᐃᐃ = 0;
        this.ᐃΔⲆⵠΔᐃⲆ = 0;
        this.time = 0;
        this.ⵠⵠᐃΔⵠ = 0;
        this.ⲆᐃⵠᐃᐃΔⵠ = 0;
        this.ᐃΔΔⲆⵠᐃΔ = 0;
        this.ⵠΔΔⲆⲆᐃΔ = 0;
        this.ⲆⲆⲆⵠⲆⵠⲆ = 0;
        this.ⲆⵠΔΔⵠᐃⵠ = [];
        this.ⵠΔᐃΔᐃ = -1;
        this.ⵠⵠⲆⲆᐃΔⲆ = -1;
        this.ⲆⲆⵠⲆΔΔΔ = -1;
        this.ᐃⵠᐃⲆⵠⵠⲆ = undefined;
        this.ᐃᐃΔᐃᐃᐃᐃ = undefined;
        this.ⵠⲆⵠⵠΔΔΔ = -1;
        this.ᐃⵠᐃⲆⵠΔᐃ = -1;
        this.ⲆᐃⵠᐃΔⲆⵠ = -1;
        this.ᐃⵠⲆᐃᐃⵠΔ = -1;
        this.ⵠᐃⲆᐃⲆⵠⲆ = zr;
        this.ᐃᐃΔⵠᐃᐃⲆ = vj;
        this.ⲆⲆⲆΔᐃᐃⲆ = tj;
        this.Ⲇᐃᐃⵠᐃⵠᐃ = undefined;
        this.ΔΔᐃⵠᐃⵠⵠ = Jl;
        this.ΔⵠΔᐃⵠᐃΔ = ns;
        this.ⵠᐃⲆⲆⵠⲆᐃ = undefined;
        this.ⲆᐃᐃⲆᐃᐃᐃ = undefined;
        this.ⵠΔΔⲆᐃⵠⲆ = undefined;
        this.ᐃⲆⲆⲆⵠⲆⵠ = 3;
        this.ⲆᐃᐃΔ = 0;
        this.ᐃⲆⲆΔΔⵠⲆΔⲆ = false;
        this.ⵠᐃΔⵠⲆ = ⲆΔⲆⲆ.get("starve_quality") ? ⲆΔⲆⲆ.get("starve_quality") : "high";
        if (this.ⵠᐃΔⵠⲆ === "high") {
            document.getElementById("high_ing").style.backgroundColor = "#B56D18";
            document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
            this.ⵠᐃΔⵠⲆ = 1;
        } else {
            document.getElementById("low_ing").style.backgroundColor = "#B56D18";
            document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
            this.ⵠᐃΔⵠⲆ = 0;
        }
        this.ᐃΔⵠΔᐃⲆⲆᐃⵠ = function () {
            document.getElementById("high_ing").style.backgroundColor = "#B56D18";
            document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
            ⲆΔⲆⲆ.set("starve_quality", "high", {
                expires: 30
            });
            document.getElementById("input_ratio").value = 1;
            $w.ⲆⵠⵠⵠⲆⲆⲆ();
            mf.ⵠᐃΔⵠⲆ = 1;
        };
        this.ⲆᐃⵠᐃΔᐃᐃⲆⵠ = function () {
            document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
            document.getElementById("low_ing").style.backgroundColor = "#B56D18";
            ⲆΔⲆⲆ.set("starve_quality", "low", {
                expires: 30
            });
            document.getElementById("input_ratio").value = 0.5 / (Ua / Va);
            $w.ⲆⵠⵠⵠⲆⲆⲆ();
            mf.ⵠᐃΔⵠⲆ = 0;
        };
        if (ⲆΔⲆⲆ.get("starve_mapping") === qn && Pq === "FR") {
            wf.ⲆⲆⵠⲆⲆⲆⵠ();
            this.mapping = "azerty";
        } else {
            this.mapping = ⲆΔⲆⲆ.get("starve_mapping") ? ⲆΔⲆⲆ.get("starve_mapping") : "qwerty";
        }
        if (this.mapping == "azerty") {
            wf.ⲆⲆⵠⲆⲆⲆⵠ();
            document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
        } else {
            document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
        }
        this.ⲆⲆⵠⲆⲆⲆⵠ = function () {
            wf.ⲆⲆⵠⲆⲆⲆⵠ();
            document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
            ⲆΔⲆⲆ.set("starve_mapping", "azerty", {
                expires: 30
            });
        };
        this.ΔΔΔᐃⲆⲆⲆ = function () {
            wf.ΔΔΔᐃⲆⲆⲆ();
            document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
            document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
            ⲆΔⲆⲆ.set("starve_mapping", "qwerty", {
                expires: 30
            });
        };
        this.ΔⲆⲆΔⵠᐃΔ = {
            id: document.getElementById("all_rights_reserved"),
            style: document.getElementById("all_rights_reserved").style,
            translate: {
                x: 0,
                y: 0
            },
            ⲆᐃΔ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        n();
        this.unlock = {};
        this.unlock.ᐃᐃᐃⵠ = [];
        this.unlock.ⲆⲆᐃⵠⲆ = [];
        this.unlock.ΔⵠΔΔⵠ = [];
        this.unlock.ΔⵠᐃΔⵠ = [];
        this.unlock.Ⲇᐃⵠᐃᐃ = [];
        this.unlock.ΔᐃᐃⲆⲆ = [];
        this.ΔΔΔΔΔΔΔ = 0;
        this.ⲆᐃΔΔⵠⲆⲆ = a;
        a();
        this.ΔⲆⲆΔΔ = {
            id: document.getElementById("trevda"),
            style: document.getElementById("trevda").style,
            translate: {
                y: 0,
                x: 0
            },
            ⲆᐃΔ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        var o;
        var r = 0;
        function t() {
            C.ⲆᐃΔ();
            if (++r == 30) {
                C.ⲆⲆⲆⲆⲆᐃⲆ();
                C.ⲆᐃⲆᐃⵠⲆⲆ = true;
                C.ⲆᐃΔ();
                return;
            }
            bj.setTimeout(t, 33);
        }
        this.ⲆᐃᐃΔᐃ = function (a) {
            o = a;
            C.ⲆΔⲆⲆΔΔⲆ();
            C.ⲆᐃⲆᐃⵠⲆⲆ = 0;
            l = -1;
            u();
        };
        var l = -1;
        function u() {
            C.ⲆᐃΔ();
            if (++l == 30) {
                ⲆΔⲆⲆ.set("starve_nickname", C.Δᐃⵠⵠᐃ.input.value, {
                    expires: 30
                });
                C.Δᐃⵠⵠᐃ.style.display = "none";
                C.ⲆⵠⵠΔΔ.style.display = "none";
                C.ᐃΔⵠΔᐃⲆΔ.style.display = "none";
                C.ΔⲆⲆΔⵠᐃΔ.style.display = "none";
                C.ΔⲆⲆΔΔ.style.display = "none";
                C.stop();
                o();
                return;
            }
            bj.setTimeout(u, 33);
        }
        this.ᐃⵠⲆⵠⲆ = Ah;
        this.stop = function () {
            this.ᐃⵠⲆⵠⲆ = Gj;
        };
        this.ᐃⲆⲆΔᐃ = function () {
            cx();
            document.getElementById("game_body").style.backgroundColor = nr.ⲆⵠⲆⵠᐃ[Xw.time];
            C.Δᐃⵠⵠᐃ.style.display = "inline-block";
            C.ⲆⵠⵠΔΔ.style.display = "inline-block";
            C.ᐃΔⵠΔᐃⲆΔ.style.display = "inline-block";
            C.ΔⲆⲆΔⵠᐃΔ.style.display = "inline-block";
            C.ΔⲆⲆΔΔ.style.display = "inline-block";
            C.waiting = Na;
            C.ᐃⵠⲆⵠⲆ = gt;
            l = -1;
            r = 0;
            t();
        };
        this.ⲆᐃⵠⲆⵠΔΔ = function (a, b) {
            b = b < 0 ? -b : b;
            if ((a.position & aa) === aa) {
                if ((a.position & V) === V) {
                    a.translate.x = jq + a.translate.ᐃᐃⲆΔᐃ - b;
                } else if (X === (a.position & X)) {
                    a.translate.x = jq + a.translate.ᐃᐃⲆΔᐃ + b;
                } else {
                    a.translate.x = jq + a.translate.ᐃᐃⲆΔᐃ;
                }
            } else if (V === (a.position & V)) {
                a.translate.x = a.translate.ᐃᐃⲆΔᐃ - b;
            } else if (X === (a.position & X)) {
                a.translate.x = Rn - a.translate.ᐃᐃⲆΔᐃ + b;
            } else {
                a.translate.x = a.translate.ᐃᐃⲆΔᐃ;
            }
            if ((a.position & ba) === ba) {
                if (Y === (a.position & Y)) {
                    a.translate.y = kq + a.translate.ⵠⲆΔΔⵠ - b;
                } else if ((a.position & Z) === Z) {
                    a.translate.y = kq + a.translate.ⵠⲆΔΔⵠ + b;
                } else {
                    a.translate.y = kq + a.translate.ⵠⲆΔΔⵠ;
                }
            } else if (Y === (a.position & Y)) {
                a.translate.y = a.translate.ⵠⲆΔΔⵠ - b;
            } else if ((a.position & Z) === Z) {
                a.translate.y = iq + a.translate.ⵠⲆΔΔⵠ + b;
            } else {
                a.translate.y = a.translate.ⵠⲆΔΔⵠ;
            }
            if (a.style !== undefined) {
                a.style.left = Math.floor(a.translate.x) + "px";
                a.style.top = Math.floor(a.translate.y) + "px";
            }
        };
        this.ⲆᐃΔ = function () {
            var a = 0;
            if (r != 30 || l != -1) {
                if (r != 30) {
                    a = 1500 / (r + 1) - 50;
                }
                if (l != -1) {
                    a = -(1750 / (30 - l + 1) - 48);
                }
            }
            for (var b = 0; this.ⲆΔΔΔ.length > b; b++) {
                this.ⲆᐃⵠⲆⵠΔΔ(this.ⲆΔΔΔ[b], a);
            }
            for (b = 0; b < this.buttons.length; b++) {
                this.ⲆᐃⵠⲆⵠΔΔ(this.buttons[b].info, a);
            }
            for (b = 0; b < this.ᐃᐃⲆᐃᐃ.length; b++) {
                this.ⲆᐃⵠⲆⵠΔΔ(this.ᐃᐃⲆᐃᐃ[b], a);
            }
            this.ΔᐃⵠᐃΔⵠᐃ.translate.x = (Rn - this.ΔᐃⵠᐃΔⵠᐃ.ᐃⵠ.width) / 2;
            this.ΔᐃⵠᐃΔⵠᐃ.translate.y = 0;
            this.ᐃΔⵠΔᐃⲆΔ.translate.x = Rn - 450;
            this.ᐃΔⵠΔᐃⲆΔ.translate.y = iq - 40;
            this.ΔⲆⲆΔⵠᐃΔ.translate.x = Rn - 340;
            this.ΔⲆⲆΔⵠᐃΔ.translate.y = iq - 25;
            this.ΔⲆⲆΔΔ.translate.x = Rn - 320;
            this.ΔⲆⲆΔΔ.translate.y = 80;
            if (r != 30 || l != -1) {
                var c = 0;
                if (r != 30) {
                    c = 1500 / (r + 1) - 50;
                }
                if (l != -1) {
                    c = -(1750 / (30 - l + 1) - 48);
                }
                this.ΔᐃⵠᐃΔⵠᐃ.translate.y -= c > 0 ? c : -c;
                this.ᐃΔⵠΔᐃⲆΔ.translate.y -= c < 0 ? c : -c;
                this.ΔⲆⲆΔⵠᐃΔ.translate.y -= c < 0 ? c : -c;
            }
            this.ᐃΔⵠΔᐃⲆΔ.ⲆᐃΔ();
            this.ΔⲆⲆΔⵠᐃΔ.ⲆᐃΔ();
            this.ΔⲆⲆΔΔ.ⲆᐃΔ();
        };
        this.ⲆᐃΔᐃΔⵠᐃ = function (b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = 342;
            c.height = 342;
            var e = -Math.PI / 2;
            for (var f = 0; f < b.length; f++) {
                var g = b[f][0];
                var h = b[f][1] * Math.PI / 180;
                d.beginPath();
                d.arc(171, 171, 170, e, e + h, false);
                d.lineTo(171, 171);
                d.fillStyle = g;
                d.fill();
                e += h;
            }
            return c;
        };
        this.ΔᐃⵠⵠⵠᐃⲆⵠⵠ = function () {
            this.ⲆΔⵠᐃᐃⵠᐃ = document.getElementById("account_nickname_input").value;
            if (this.ⲆΔⵠᐃᐃⵠᐃ !== this.ΔⲆⲆⲆⲆⲆᐃ) {
                this.ΔⲆⲆⲆⲆⲆᐃ = this.ⲆΔⵠᐃᐃⵠᐃ;
                this.ΔⲆⲆⵠΔⵠΔ = Zv(this.ⲆΔⵠᐃᐃⵠᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
            }
        };
        this.ⵠⵠΔΔ = function () {
            ym();
            mf.ⵠⵠΔⵠᐃΔΔ = ΔⲆⲆⵠ.ⵠⲆΔⲆΔⲆⲆ(mf.ⵠⵠΔⵠᐃΔΔ, mf.ⵠⲆⲆᐃΔΔⵠ, 0.03);
            this.ⲆΔΔΔ[ᐃᐃΔⲆⲆⲆⵠ].translate.x = this.ⲆΔΔΔ[0].translate.x + -72 + mf.ⵠⵠΔⵠᐃΔΔ * 165;
            this.ⲆΔΔΔ[ᐃᐃΔⲆⲆⲆⵠ].translate.ᐃᐃⲆΔᐃ = this.ⲆΔΔΔ[ᐃᐃΔⲆⲆⲆⵠ].translate.x;
            this.ⲆΔΔΔ[ᐃᐃΔⲆⲆⲆⵠ].translate.y = this.ⲆΔΔΔ[0].translate.y + 30;
            this.ⲆΔΔΔ[ᐃᐃΔⲆⲆⲆⵠ].translate.ⵠⲆΔΔⵠ = this.ⲆΔΔΔ[ᐃᐃΔⲆⲆⲆⵠ].translate.y;
            for (var n = 2; n < this.ⲆΔΔΔ.length; n++) {
                if (this.ⲆΔΔΔ[n].active === ea) {
                    this.ⲆΔΔΔ[n].ⵠⵠΔΔ(v);
                }
            }
            if ((O = this.ⵠΔᐃΔᐃ - Date.now()) > 0) {
                var q = Math.floor(O / 60000);
                var t = Math.floor(q / 60);
                q %= 60;
                if (this.ⲆⲆⵠⲆΔΔΔ !== q) {
                    this.ⲆⲆⵠⲆΔΔΔ = q;
                    q = q < 10 ? "0" + q : "" + q;
                    C.ᐃⵠᐃⲆⵠⵠⲆ = Zv(q, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (this.ⵠⵠⲆⲆᐃΔⲆ !== t) {
                    this.ⵠⵠⲆⲆᐃΔⲆ = t;
                    t = t < 10 ? "0" + t : "" + t;
                    C.ᐃᐃΔᐃᐃᐃᐃ = Zv(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                (U = this.ⲆΔΔΔ[ᐃΔⵠᐃⵠⲆⲆ]).ⵠⵠΔΔ(v);
                var z = this.ᐃᐃΔᐃᐃᐃᐃ;
                Mc(v, z, U.translate.x - z.width / 4 + 182, U.translate.y - z.height / 4 + 40, z.width / 2, z.height / 2);
                z = this.ᐃⵠᐃⲆⵠⵠⲆ;
                Mc(v, z, U.translate.x - z.width / 4 + 251, U.translate.y - z.height / 4 + 40, z.width / 2, z.height / 2);
            }
            var O = this.ⵠⲆⵠⵠΔΔΔ - Date.now();
            if (O > 0) {
                q = Math.floor(O / 60000);
                t = Math.floor(q / 60);
                var U;
                var V = Math.floor(t / 24);
                q %= 60;
                t %= 24;
                if (this.ᐃⵠⲆᐃᐃⵠΔ !== q) {
                    this.ᐃⵠⲆᐃᐃⵠΔ = q;
                    q = q < 10 ? "0" + q : "" + q;
                    C.ⵠᐃⲆᐃⲆⵠⲆ = Zv(q, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (t !== this.ⲆᐃⵠᐃΔⲆⵠ) {
                    this.ⲆᐃⵠᐃΔⲆⵠ = t;
                    t = t < 10 ? "0" + t : "" + t;
                    C.ᐃᐃΔⵠᐃᐃⲆ = Zv(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (V !== this.ᐃⵠᐃⲆⵠΔᐃ) {
                    this.ᐃⵠᐃⲆⵠΔᐃ = V;
                    V = V < 10 ? "0" + V : "" + V;
                    C.ⲆⲆⲆΔᐃᐃⲆ = Zv(V, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                (U = this.ⲆΔΔΔ[ⵠⲆⲆⵠⵠⵠΔ]).ⵠⵠΔΔ(v);
                z = this.ⲆⲆⲆΔᐃᐃⲆ;
                Mc(v, z, U.translate.x - z.width / 4 + 113, U.translate.y - z.height / 4 + 40, z.width / 2, z.height / 2);
                z = this.ᐃᐃΔⵠᐃᐃⲆ;
                Mc(v, z, U.translate.x - z.width / 4 + 182, U.translate.y - z.height / 4 + 40, z.width / 2, z.height / 2);
                z = this.ⵠᐃⲆᐃⲆⵠⲆ;
                Mc(v, z, U.translate.x - z.width / 4 + 251, U.translate.y - z.height / 4 + 40, z.width / 2, z.height / 2);
            }
            if (K === (this.ⲆΔᐃᐃⲆ & K)) {
                this.buttons[ᐃΔΔⲆⵠⲆⵠ].info.state = Yv;
            } else if ((this.ⲆΔᐃᐃⲆ & f) === f) {
                this.buttons[ᐃΔⵠᐃᐃⲆᐃ].info.state = Yv;
            } else if (c === (this.ⲆΔᐃᐃⲆ & c)) {
                this.buttons[ⵠᐃⵠⲆΔᐃᐃ].info.state = Yv;
            } else if ((this.ⲆΔᐃᐃⲆ & d) === d) {
                this.buttons[ΔⲆⲆⵠⵠⲆΔ].info.state = Yv;
            } else if ((this.ⲆΔᐃᐃⲆ & L) === L) {
                this.buttons[ᐃⲆΔᐃⵠᐃⲆ].info.state = Yv;
            } else if (m === (this.ⲆΔᐃᐃⲆ & m)) {
                this.buttons[ΔⲆᐃⲆΔΔⵠ].info.state = Yv;
            } else if (p === (this.ⲆΔᐃᐃⲆ & p) || T === (this.ⲆΔᐃᐃⲆ & T) || (this.ⲆΔᐃᐃⲆ & A) === A || k === (this.ⲆΔᐃᐃⲆ & k) || (this.ⲆΔᐃᐃⲆ & x) === x || (this.ⲆΔᐃᐃⲆ & J) === J || M === (this.ⲆΔᐃᐃⲆ & M)) {
                this.buttons[ΔΔⲆᐃⵠⲆΔ].info.state = Yv;
            } else if ((this.ⲆΔᐃᐃⲆ & B) === B || E === (this.ⲆΔᐃᐃⲆ & E) || D === (this.ⲆΔᐃᐃⲆ & D) || (this.ⲆΔᐃᐃⲆ & I) === I || S === (this.ⲆΔᐃᐃⲆ & S) || Q === (this.ⲆΔᐃᐃⲆ & Q)) {
                this.buttons[ⵠᐃⵠⲆΔᐃᐃ].info.state = Yv;
            } else if (R === (this.ⲆΔᐃᐃⲆ & R) || (this.ⲆΔᐃᐃⲆ & j) === j || (this.ⲆΔᐃᐃⲆ & G) === G) {
                this.buttons[ⲆⲆⵠΔᐃᐃⲆ].info.state = Yv;
            } else if (W === (this.ⲆΔᐃᐃⲆ & W)) {
                this.buttons[ΔⲆⲆⵠⵠⲆΔ].info.state = Yv;
            }
            if (f === (this.ⲆΔᐃᐃⲆ & f)) {
                if (this.ⲆⲆᐃᐃⲆⲆⵠ === this.ⵠᐃⲆⲆⵠⲆᐃ) {
                    this.ΔⵠΔᐃⵠᐃΔ = this.ⵠⲆⲆⲆΔΔΔ;
                    this.buttons[this.ⵠⲆⲆⲆΔΔΔ].info.active = da;
                    this.buttons[this.ⲆⲆΔⲆⵠⲆΔ].info.active = da;
                    this.buttons[this.ⵠΔΔΔⲆΔᐃ].info.active = da;
                } else {
                    this.buttons[this.ⵠⲆⲆⲆΔΔΔ].info.active = ea;
                    this.buttons[this.ⲆⲆΔⲆⵠⲆΔ].info.active = ea;
                    this.buttons[this.ⵠΔΔΔⲆΔᐃ].info.active = ea;
                }
                if (this.ⲆⲆⵠᐃΔᐃᐃ === this.ⵠᐃⲆⲆⵠⲆᐃ) {
                    this.buttons[this.ⲆⲆⵠᐃΔᐃᐃ].info.state = Yv;
                } else if (this.ΔⲆΔⵠΔᐃⵠ === this.ⵠᐃⲆⲆⵠⲆᐃ) {
                    this.buttons[this.ΔⲆΔⵠΔᐃⵠ].info.state = Yv;
                } else if (this.ⵠᐃⲆⲆⵠⲆᐃ === this.ⲆⲆᐃᐃⲆⲆⵠ) {
                    this.buttons[this.ⲆⲆᐃᐃⲆⲆⵠ].info.state = Yv;
                } else if (this.ΔΔⵠⲆⲆΔΔ === this.ⵠᐃⲆⲆⵠⲆᐃ) {
                    this.buttons[this.ΔΔⵠⲆⲆΔΔ].info.state = Yv;
                } else if (this.ⵠᐃⲆⲆⵠⲆᐃ === this.ⵠΔᐃᐃΔᐃᐃ) {
                    this.buttons[this.ⵠΔᐃᐃΔᐃᐃ].info.state = Yv;
                }
                if (this.ⵠⲆⲆⲆΔΔΔ === this.ΔⵠΔᐃⵠᐃΔ) {
                    this.buttons[this.ⵠⲆⲆⲆΔΔΔ].info.state = Yv;
                } else if (this.ⲆⲆΔⲆⵠⲆΔ === this.ΔⵠΔᐃⵠᐃΔ) {
                    this.buttons[this.ⲆⲆΔⲆⵠⲆΔ].info.state = Yv;
                } else if (this.ⵠΔΔΔⲆΔᐃ === this.ΔⵠΔᐃⵠᐃΔ) {
                    this.buttons[this.ⵠΔΔΔⲆΔᐃ].info.state = Yv;
                }
                if (this.ⲆᐃᐃⲆᐃᐃᐃ === this.ⵠⵠⵠΔⵠⲆΔ) {
                    this.buttons[this.ⵠⵠⵠΔⵠⲆΔ].info.state = Yv;
                } else if (this.ⲆⵠΔᐃᐃⵠᐃ === this.ⲆᐃᐃⲆᐃᐃᐃ) {
                    this.buttons[this.ⲆⵠΔᐃᐃⵠᐃ].info.state = Yv;
                } else if (this.ⲆᐃᐃⲆᐃᐃᐃ === this.ⲆᐃⲆⲆᐃⲆᐃ) {
                    this.buttons[this.ⲆᐃⲆⲆᐃⲆᐃ].info.state = Yv;
                }
                if (this.ⵠΔΔⲆᐃⵠⲆ === this.ⲆⲆⵠᐃⵠᐃᐃ) {
                    this.buttons[this.ⲆⲆⵠᐃⵠᐃᐃ].info.state = Yv;
                } else if (this.ᐃΔΔΔⵠΔⲆ === this.ⵠΔΔⲆᐃⵠⲆ) {
                    this.buttons[this.ᐃΔΔΔⵠΔⲆ].info.state = Yv;
                } else if (this.ⵠΔΔⲆᐃⵠⲆ === this.ΔΔΔⵠⵠΔⵠ) {
                    this.buttons[this.ΔΔΔⵠⵠΔⵠ].info.state = Yv;
                } else if (this.ⵠΔΔⲆᐃⵠⲆ === this.ΔᐃⲆᐃΔⲆᐃ) {
                    this.buttons[this.ΔᐃⲆᐃΔⲆᐃ].info.state = Yv;
                } else if (this.ⵠΔΔⲆᐃⵠⲆ === this.ⲆΔΔΔᐃⵠΔ) {
                    this.buttons[this.ⲆΔΔΔᐃⵠΔ].info.state = Yv;
                } else if (this.ⵠΔΔⲆᐃⵠⲆ === this.ⵠⵠⵠⲆⵠᐃⲆ) {
                    this.buttons[this.ⵠⵠⵠⲆⵠᐃⲆ].info.state = Yv;
                }
            }
            if ((this.ⲆΔᐃᐃⲆ & d) === d) {
                if (this.ⵠΔᐃⲆᐃⲆⵠ === -1) {
                    this.buttons[xa].info.state = Yv;
                } else if (qw.ⲆⵠΔⲆⵠ === this.ⵠΔᐃⲆᐃⲆⵠ) {
                    this.buttons[ya].info.state = Yv;
                } else if (qw.ΔⲆᐃⵠⵠ === this.ⵠΔᐃⲆᐃⲆⵠ) {
                    this.buttons[Aa].info.state = Yv;
                } else if (qw.ⵠΔᐃΔⵠ === this.ⵠΔᐃⲆᐃⲆⵠ) {
                    this.buttons[Ba].info.state = Yv;
                } else if (this.ⵠΔᐃⲆᐃⲆⵠ === qw.ⵠΔⵠⲆᐃ) {
                    this.buttons[za].info.state = Yv;
                }
                if (this.ᐃⲆⲆⲆⵠⲆⵠ === 0) {
                    this.buttons[ra].info.state = Yv;
                } else if (this.ᐃⲆⲆⲆⵠⲆⵠ === 1) {
                    this.buttons[sa].info.state = Yv;
                } else if (this.ᐃⲆⲆⲆⵠⲆⵠ === 2) {
                    this.buttons[ta].info.state = Yv;
                } else if (this.ᐃⲆⲆⲆⵠⲆⵠ === 3) {
                    this.buttons[ua].info.state = Yv;
                } else if (this.ᐃⲆⲆⲆⵠⲆⵠ === 4) {
                    this.buttons[va].info.state = Yv;
                } else if (this.ᐃⲆⲆⲆⵠⲆⵠ === 5) {
                    this.buttons[wa].info.state = Yv;
                }
            }
            if ((this.ⲆΔᐃᐃⲆ & K) === K && ΔᐃⵠⲆ.ΔᐃΔΔⲆᐃᐃ === 0) {
                if (this.buttons[ka].ⵠᐃΔⵠᐃⲆⵠ(Pf.ΔⲆⲆᐃ)) {
                    this.buttons[ka].hint = Math.min(1, this.buttons[ka].hint + Af * 1.5);
                } else {
                    this.buttons[ka].hint = Math.max(0, this.buttons[ka].hint - Af * 1.5);
                }
                if (this.buttons[la].ⵠᐃΔⵠᐃⲆⵠ(Pf.ΔⲆⲆᐃ)) {
                    this.buttons[la].hint = Math.min(1, this.buttons[la].hint + Af * 1.5);
                } else {
                    this.buttons[la].hint = Math.max(0, this.buttons[la].hint - Af * 1.5);
                }
                if (this.buttons[ma].ⵠᐃΔⵠᐃⲆⵠ(Pf.ΔⲆⲆᐃ)) {
                    this.buttons[ma].hint = Math.min(1, this.buttons[ma].hint + Af * 1.5);
                } else {
                    this.buttons[ma].hint = Math.max(0, this.buttons[ma].hint - Af * 1.5);
                }
                if (this.buttons[pa].ⵠᐃΔⵠᐃⲆⵠ(Pf.ΔⲆⲆᐃ)) {
                    this.buttons[pa].hint = Math.min(1, this.buttons[pa].hint + Af * 1.5);
                } else {
                    this.buttons[pa].hint = Math.max(0, this.buttons[pa].hint - Af * 1.5);
                }
                if (this.buttons[na].ⵠᐃΔⵠᐃⲆⵠ(Pf.ΔⲆⲆᐃ)) {
                    this.buttons[na].hint = Math.min(1, this.buttons[na].hint + Af * 1.5);
                } else {
                    this.buttons[na].hint = Math.max(0, this.buttons[na].hint - Af * 1.5);
                }
                if (this.buttons[oa].ⵠᐃΔⵠᐃⲆⵠ(Pf.ΔⲆⲆᐃ)) {
                    this.buttons[oa].hint = Math.min(1, this.buttons[oa].hint + Af * 1.5);
                } else {
                    this.buttons[oa].hint = Math.max(0, this.buttons[oa].hint - Af * 1.5);
                }
            }
            var X = 1;
            if ((this.ⲆΔᐃᐃⲆ & (T | A | k | x | J | M)) > 1) {
                z = ⲆⲆ.ⵠᐃᐃⲆΔⵠⵠ;
                v.save();
                v.translate(jq, ja + z.height / 4);
                if (this.ᐃΔᐃⵠᐃ === 1) {
                    this.ᐃᐃⵠⲆΔⲆⲆ += Af / 3;
                    X = this.ᐃᐃᐃᐃⲆⲆᐃ - 100 / Math.pow(1 + this.ᐃᐃⵠⲆΔⲆⲆ, 1 + this.ᐃᐃⵠⲆΔⲆⲆ);
                    v.rotate(X);
                }
                Mc(v, z, -z.width / 4, -z.height / 4, z.width / 2, z.height / 2);
                v.restore();
            }
            if (ΔᐃⵠⲆ.ΔᐃΔΔⲆᐃᐃ === 0) {
                if (qw.ⲆⵠΔⲆⵠ === ΔᐃⵠⲆ.ⵠᐃᐃᐃᐃ) {
                    this.buttons[ka].info.state = Yv;
                } else if (qw.ⵠΔⵠⲆᐃ === ΔᐃⵠⲆ.ⵠᐃᐃᐃᐃ) {
                    this.buttons[la].info.state = Yv;
                } else if (ΔᐃⵠⲆ.ⵠᐃᐃᐃᐃ === qw.ΔⲆᐃⵠⵠ) {
                    this.buttons[na].info.state = Yv;
                } else if (qw.ⵠΔᐃΔⵠ === ΔᐃⵠⲆ.ⵠᐃᐃᐃᐃ) {
                    this.buttons[oa].info.state = Yv;
                } else if (qw.ⵠᐃΔΔᐃ === ΔᐃⵠⲆ.ⵠᐃᐃᐃᐃ) {
                    this.buttons[ma].info.state = Yv;
                } else if (ΔᐃⵠⲆ.ⵠᐃᐃᐃᐃ === qw.ⵠᐃΔΔΔ) {
                    this.buttons[pa].info.state = Yv;
                }
            }
            for (n = 1; n < this.buttons.length; n++) {
                if (ea === this.buttons[n].info.active) {
                    this.buttons[n].ⵠⵠΔΔ(v);
                }
            }
            this.ⲆΔΔΔ[0].ⵠⵠΔΔ(v);
            if ((this.ⲆΔᐃᐃⲆ & (F | _)) > 0) {
                z = this.ΔⲆⲆⵠΔⵠΔ;
                Mc(v, z, jq - z.width / 4, 138, z.width / 2, z.height / 2);
            }
            var Y = Math.max(1, Math.min(18, Math.floor((mf.ⲆⲆΔΔⲆ + 3) / 2)));
            this.ⲆΔΔΔ[Y].active = ea;
            this.ⲆΔΔΔ[Y].ⵠⵠΔΔ(v);
            this.ⲆΔΔΔ[Y].active = da;
            this.buttons[0].ⵠⵠΔΔ(v);
            if ((this.ⲆΔᐃᐃⲆ & (c | E | I | B | S)) > 1) {
                var g = (this.ⲆΔᐃᐃⲆ & (E | I | B | S)) > 1 ? -190 : 0;
                z = ᐃΔ[29][this.ⲆⲆᐃⵠⲆ][this.ΔΔΔΔΔΔΔ];
                Mc(v, z, jq - z.width / 4 + g, 183, z.width / 2, z.height / 2);
                this.ⲆᐃᐃΔ = (this.ⲆᐃᐃΔ + Af * 1000) % 2000;
                var u = (this.ⲆᐃᐃΔ < 1000) * 4.5 ? this.ⲆᐃᐃΔ / 1000 : (2000 - this.ⲆᐃᐃΔ) / 1000;
                z = ᐃΔ[28][this.ΔⵠΔΔⵠ][this.ΔΔΔΔΔΔΔ];
                Mc(v, z, jq - z.width / 4 - 62 + u + g, 240, z.width / 2, z.height / 2);
                z = ᐃΔ[7][this.ᐃᐃᐃⵠ][this.ΔΔΔΔΔΔΔ];
                Mc(v, z, jq - z.width / 4 - 54 + u + g, 272, z.width / 2, z.height / 2);
                Mc(v, z, jq - z.width / 4 + 54 - u + g, 272, z.width / 2, z.height / 2);
                z = ᐃΔ[255][this.ᐃᐃᐃⵠ][this.ΔΔΔΔΔΔΔ];
                Mc(v, z, jq - z.width / 4 + g, 222, z.width / 2, z.height / 2);
                z = ᐃΔ[796][this.ΔᐃᐃⲆⲆ][this.ΔΔΔΔΔΔΔ];
                Mc(v, z, jq - z.width / 4 + g, 222, z.width / 2, z.height / 2);
            }
            if ((this.ⲆΔᐃᐃⲆ & c) === c) {
                z = ᐃΔ[250][this.ΔⵠᐃΔⵠ][this.ΔΔΔΔΔΔΔ];
                Mc(v, z, jq - z.width / 4 - 61, 406 - z.height / 4, z.width / 2, z.height / 2);
                z = ᐃΔ[250][this.Ⲇᐃⵠᐃᐃ][this.ΔΔΔΔΔΔΔ];
                Mc(v, z, jq - z.width / 4 + 53, 406 - z.height / 4, z.width / 2, z.height / 2);
            }
            if ((this.ⲆΔᐃᐃⲆ & D) === D) {
                z = ᐃΔ[250][this.Ⲇᐃⵠᐃᐃ][this.ΔΔΔΔΔΔΔ];
                Mc(v, z, jq - z.width / 4 - 200, 268 - z.height / 4, z.width / 2, z.height / 2);
            }
            if (Q === (this.ⲆΔᐃᐃⲆ & Q)) {
                z = ᐃΔ[250][this.ΔⵠᐃΔⵠ][this.ΔΔΔΔΔΔΔ];
                Mc(v, z, jq - z.width / 4 - 200, 268 - z.height / 4, z.width / 2, z.height / 2);
            }
            if ((this.ⲆΔᐃᐃⲆ & (E | I | B | S | D | Q)) > 1) {
                for (n = 1; this.buttons.length > n; n++) {
                    if (this.buttons[n].view & this.ⲆΔᐃᐃⲆ) {
                        var Z = this.buttons[n].info;
                        if (Z.ᐃᐃⲆΔⵠΔⵠ >= 0) {
                            z = Z.ᐃᐃᐃᐃΔΔⵠⵠⵠ[Z.ᐃᐃⲆΔⵠΔⵠ].Ⲇⵠᐃ;
                            Mc(v, z, Z.translate.x - z.width / 8 + 44.5, Z.translate.y - z.height / 8 + 45.5, z.width / 4, z.height / 4);
                            if (Z.ΔⵠᐃⲆᐃⵠⲆ !== 1) {
                                z = ⲆⲆ.ᐃⲆΔⵠΔⵠΔ;
                                Mc(v, z, Z.translate.x - z.width / 4 + 44.5, Z.translate.y - z.height / 4 + 44.5, z.width / 2, z.height / 2);
                            }
                        }
                    }
                }
                z = this.Ⲇᐃᐃⵠᐃⵠᐃ;
                Mc(v, z, jq - 312, 375, z.width / 2, z.height / 2);
                z = this.ΔΔᐃⵠᐃⵠⵠ;
                Mc(v, z, jq - 312, 395, z.width / 2, z.height / 2);
            }
            if (this.ΔⲆᐃΔᐃΔⵠ !== this.ⲆᐃⲆᐃⵠ) {
                this.ΔⲆᐃΔᐃΔⵠ = this.ⲆᐃⲆᐃⵠ;
                this.ⵠᐃᐃΔⵠᐃΔ = Zv("" + this.ⲆᐃⲆᐃⵠ, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
            }
            Mc(v, this.ⵠᐃᐃΔⵠᐃΔ, this.ⲆΔΔΔ[0].translate.x + 350, 15, this.ⵠᐃᐃΔⵠᐃΔ.w2, this.ⵠᐃᐃΔⵠᐃΔ.ⵠⵠⵠᐃⲆ);
            if (this.ⲆⲆΔΔⲆ !== this.ᐃᐃⵠᐃⲆⵠᐃ) {
                this.ᐃᐃⵠᐃⲆⵠᐃ = this.ⲆⲆΔΔⲆ;
                this.ⵠⵠΔⲆΔⲆᐃ = Zv("LVL " + (this.ⲆⲆΔΔⲆ + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, undefined, 30, 24, dg, vj, Ga, undefined, "#3F3019", 20);
            }
            Mc(v, this.ⵠⵠΔⲆΔⲆᐃ, this.ⲆΔΔΔ[0].translate.x + 94, 0, this.ⵠⵠΔⲆΔⲆᐃ.w2, this.ⵠⵠΔⲆΔⲆᐃ.ⵠⵠⵠᐃⲆ);
            if (ΔᐃⵠⲆ.ΔᐃΔΔⲆᐃᐃ === 0) {
                if ((aa = this.buttons[ka].hint) > 0) {
                    z = ⲆⲆ.ⲆΔΔᐃΔⲆⲆ;
                    Mc(v, z, jq - z.width / 4, -36 - ΔⲆⲆⵠ.ΔᐃⲆΔⵠ(1 - aa) * z.height / 2, z.width / 2, z.height / 2);
                }
                if ((aa = this.buttons[la].hint) > 0) {
                    z = ⲆⲆ.ΔⲆΔᐃᐃⵠᐃ;
                    Mc(v, z, jq - z.width / 4, -36 - z.height * ΔⲆⲆⵠ.ΔᐃⲆΔⵠ(1 - aa) / 2, z.width / 2, z.height / 2);
                }
                var aa = this.buttons[ma].hint;
                if (aa > 0) {
                    z = ⲆⲆ.ⲆᐃΔᐃⵠΔⲆ;
                    Mc(v, z, jq - z.width / 4, -36 - ΔⲆⲆⵠ.ΔᐃⲆΔⵠ(1 - aa) * z.height / 2, z.width / 2, z.height / 2);
                }
                aa = this.buttons[pa].hint;
                if (aa > 0) {
                    z = ⲆⲆ.ⲆᐃⵠΔⲆⵠᐃ;
                    Mc(v, z, jq - z.width / 4, -36 - ΔⲆⲆⵠ.ΔᐃⲆΔⵠ(1 - aa) * z.height / 2, z.width / 2, z.height / 2);
                }
                if ((aa = this.buttons[oa].hint) > 0) {
                    z = ⲆⲆ.ᐃΔᐃᐃᐃΔⲆ;
                    Mc(v, z, jq - z.width / 4, -36 - z.height * ΔⲆⲆⵠ.ΔᐃⲆΔⵠ(1 - aa) / 2, z.width / 2, z.height / 2);
                }
                if ((aa = this.buttons[na].hint) > 0) {
                    z = ⲆⲆ.ⲆⲆⲆⲆⲆⵠⲆ;
                    Mc(v, z, jq - z.width / 4, -36 - z.height * ΔⲆⲆⵠ.ΔᐃⲆΔⵠ(1 - aa) / 2, z.width / 2, z.height / 2);
                }
            }
            if (this.ᐃΔᐃⵠᐃ === 1 && Math.abs(X - this.ᐃᐃᐃᐃⲆⲆᐃ) < 0.006) {
                v.globalAlpha = Math.min(1, this.ⲆΔΔᐃᐃⵠⵠ * 3);
                z = ⲆⲆ.ΔᐃᐃⲆⲆⵠΔ;
                v.save();
                v.translate(jq, 260);
                this.ⲆΔΔᐃᐃⵠⵠ += Af;
                v.rotate(this.ⲆΔΔᐃᐃⵠⵠ);
                Mc(v, z, -z.width / 2, -z.height / 2, z.width, z.height);
                v.restore();
                u = 1.05 + Math.cos(this.ⲆΔΔᐃᐃⵠⵠ * 5) * 0.05;
                if (this.ⵠⵠΔⵠⲆΔΔ === 0) {
                    var ba = u * (z = Δᐃⵠᐃ.ΔᐃΔΔᐃ[this.ΔΔⵠᐃⲆⵠⵠ].Ⲇⵠᐃ).width;
                    var ca = z.height * u;
                    Mc(v, z, jq - ba / 2, 260 - ca / 2, ba, ca);
                } else if (this.ⵠⵠΔⵠⲆΔΔ === 1) {
                    ba = (z = Δᐃⵠᐃ.ΔᐃΔΔᐃ[0].Ⲇⵠᐃ).width * u;
                    ca = z.height * u;
                    Mc(v, z, jq - ba / 2, 260 - ca / 2, ba, ca);
                    ba = u * (z = Δᐃⵠᐃ.ΔΔᐃΔⲆ[this.ΔΔⵠᐃⲆⵠⵠ].Ⲇⵠᐃ).width;
                    ca = u * z.height;
                    Mc(v, z, jq - ba / 2, 260 - ca / 2, ba, ca);
                } else if (this.ⵠⵠΔⵠⲆΔΔ === 2) {
                    ba = u * (z = Δᐃⵠᐃ.ᐃΔⲆΔ[this.ΔΔⵠᐃⲆⵠⵠ].Ⲇⵠᐃ).width;
                    ca = z.height * u;
                    Mc(v, z, jq - ba / 2, 180 - ca / 2, ba, ca);
                    ba = u * (z = Δᐃⵠᐃ.ΔᐃΔΔᐃ[0].Ⲇⵠᐃ).width;
                    ca = z.height * u;
                    Mc(v, z, jq - ba / 2, 260 - ca / 2, ba, ca);
                } else if (this.ⵠⵠΔⵠⲆΔΔ === 3) {
                    ba = (z = Δᐃⵠᐃ.ⲆⵠᐃΔⲆ[this.ΔΔⵠᐃⲆⵠⵠ].Ⲇⵠᐃ).width * u;
                    ca = u * z.height;
                    v.save();
                    v.translate(jq, 260);
                    v.rotate(Math.PI);
                    Mc(v, z, -ba / 2, -ca / 2, ba, ca);
                    v.restore();
                } else if (this.ⵠⵠΔⵠⲆΔΔ === 4) {
                    ba = u * (z = Δᐃⵠᐃ.ΔᐃⲆⲆΔ[this.ΔΔⵠᐃⲆⵠⵠ].Ⲇⵠᐃ).width;
                    ca = z.height * u;
                    Mc(v, z, jq - ba / 2, 260 - ca / 2, ba, ca);
                }
                z = this.ⵠΔΔᐃΔΔΔ;
                Mc(v, z, jq - z.width / 4, 340, z.width / 2, z.height / 2);
                z = this.ᐃⲆΔⲆⲆⲆᐃ;
                Mc(v, z, jq - z.width / 4, 365, z.width / 2, z.height / 2);
                if (this.ⲆΔΔᐃᐃⵠⵠ > 6) {
                    this.ᐃΔᐃⵠᐃ = 0;
                    H(p);
                }
                v.globalAlpha = 1;
            }
            Yw.alert.ⵠⵠΔΔ("#FFF", "#000");
            if (C.waiting) {
                this.ΔᐃⵠᐃΔⵠᐃ.ⵠⵠΔΔ();
            }
        };
        var b = 0;
        var K = Math.pow(2, b++);
        var d = Math.pow(2, b++);
        this.ᐃⵠΔᐃⲆ = d;
        var m = Math.pow(2, b++);
        var c = Math.pow(2, b++);
        var p = Math.pow(2, b++);
        var L = Math.pow(2, b++);
        var f = Math.pow(2, b++);
        var z = Math.pow(2, b++);
        this.ᐃⲆΔⲆΔ = z;
        var y = Math.pow(2, b++);
        var w = Math.pow(2, b++);
        var T = Math.pow(2, b++);
        var A = Math.pow(2, b++);
        var k = Math.pow(2, b++);
        var x = Math.pow(2, b++);
        var J = Math.pow(2, b++);
        var M = Math.pow(2, b++);
        var B = Math.pow(2, b++);
        var D = Math.pow(2, b++);
        var E = Math.pow(2, b++);
        var I = Math.pow(2, b++);
        var S = Math.pow(2, b++);
        var Q = Math.pow(2, b++);
        var _ = Math.pow(2, b++);
        var F = Math.pow(2, b++);
        var R = Math.pow(2, b++);
        this.ⵠᐃⵠⲆΔ = R;
        var j = Math.pow(2, b++);
        this.ⵠᐃᐃⲆΔ = j;
        var G = Math.pow(2, b++);
        this.ⲆᐃⲆⲆᐃ = G;
        var W = Math.pow(2, b++);
        function O(a, b, c) {
            for (var d = 0; d < C.ⲆΔΔΔ.length; d++) {
                if ((C.ⲆΔΔΔ[d].view & a) !== 0) {
                    C.ⲆΔΔΔ[d].active = b;
                }
            }
            for (d = 0; d < C.buttons.length; d++) {
                if ((C.buttons[d].view & a) !== 0) {
                    C.buttons[d].info.active = b;
                }
            }
            for (d = 0; C.ᐃᐃⲆᐃᐃ.length > d; d++) {
                if ((C.ᐃᐃⲆᐃᐃ[d].view & a) !== 0) {
                    C.ᐃᐃⲆᐃᐃ[d].style.display = c;
                }
            }
        }
        this.ⲆΔᐃᐃⲆ = K;
        function N() {
            var b = Number(ⲆΔⲆⲆ.get("starve_crate"));
            var c = Number(ⲆΔⲆⲆ.get("starve_dead"));
            var d = Number(ⲆΔⲆⲆ.get("starve_book"));
            var e = Number(ⲆΔⲆⲆ.get("starve_bag"));
            var f = Number(ⲆΔⲆⲆ.get("starve_skin"));
            var g = Number(ⲆΔⲆⲆ.get("starve_accessory"));
            if (mf.unlock.ᐃᐃᐃⵠ[mf.ᐃᐃᐃⵠ] <= 0) {
                mf.ᐃᐃᐃⵠ = mf.unlock.ᐃᐃᐃⵠ[f] > 0 ? f : 0;
            }
            if (mf.unlock.ΔⵠΔΔⵠ[mf.ΔⵠΔΔⵠ] <= 0) {
                mf.ΔⵠΔΔⵠ = mf.unlock.ΔⵠΔΔⵠ[d] > 0 ? d : 0;
            }
            if (mf.unlock.Ⲇᐃⵠᐃᐃ[mf.Ⲇᐃⵠᐃᐃ] <= 0) {
                mf.Ⲇᐃⵠᐃᐃ = mf.unlock.Ⲇᐃⵠᐃᐃ[c] > 0 ? c : 0;
            }
            if (mf.unlock.ΔⵠᐃΔⵠ[mf.ΔⵠᐃΔⵠ] <= 0) {
                mf.ΔⵠᐃΔⵠ = mf.unlock.ΔⵠᐃΔⵠ[b] > 0 ? b : 0;
            }
            if (mf.unlock.ΔᐃᐃⲆⲆ[mf.ΔᐃᐃⲆⲆ] <= 0) {
                mf.ΔᐃᐃⲆⲆ = mf.unlock.ΔᐃᐃⲆⲆ[g] > 0 ? g : 0;
            }
            if (mf.unlock.ⲆⲆᐃⵠⲆ[mf.ⲆⲆᐃⵠⲆ] <= 0) {
                mf.ⲆⲆᐃⵠⲆ = mf.unlock.ⲆⲆᐃⵠⲆ[e] > 0 ? e : 0;
            }
        }
        function H(a) {
            if (C.ⲆᐃⲆᐃⵠⲆⲆ !== ia) {
                O(y, da, "none");
                O(w, da, "none");
                N();
                if (a !== C.ⲆΔᐃᐃⲆ && C.ᐃΔᐃⵠᐃ < 1) {
                    C.ΔⲆⲆΔΔ.style.display = K === a || p === a || a === d || f === a || a === c || a === L ? "inline-block" : "none";
                    O(C.ⲆΔᐃᐃⲆ, da, "none");
                    C.ⲆΔᐃᐃⲆ = a;
                    O(C.ⲆΔᐃᐃⲆ, ea, "inline-block");
                }
            }
        }
        function q(a) {
            if (Yw.ΔⲆᐃⲆⲆΔΔ !== undefined && ns !== Yw.ΔⵠΔⲆⵠᐃⲆ && uj !== Yw.ΔⵠⵠⵠⲆⵠⵠ) {
                a();
            }
        }
        function P() {
            N();
            if (Mf % 2) {
                console.log(undefined);
                ΔᐃⵠⲆ.connect();
            } else {
                console.log(undefined);
                if (bj.Widget.isBlocked === 1) {
                    bj.Widget.createAdPlayer(ΔᐃⵠⲆ.connect.bind(ΔᐃⵠⲆ), ΔᐃⵠⲆ.connect.bind(ΔᐃⵠⲆ));
                } else {
                    bj.Widget.preroll();
                    bj.Widget.play = ΔᐃⵠⲆ.connect.bind(ΔᐃⵠⲆ);
                }
            }
        }
        function U(a, b, c) {
            const d = new XMLHttpRequest();
            d.open("GET", a);
            d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            d.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    if (b !== undefined) {
                        b(d.responseText);
                    }
                } else if (this.readyState == 4 && c !== undefined) {
                    c();
                }
            };
            d.send();
        }
        this.ΔΔⲆΔⵠΔⲆ = 0;
        this.ᐃⲆⵠⲆ = H;
        this.ᐃᐃⵠΔᐃΔΔ = function (b, a) {
            let c = "0";
            let d = 0;
            if (ex) {
                c = ex + Lq.ΔⲆⵠΔⵠᐃⲆ();
            }
            if (Yw.ΔⲆᐃⲆⲆΔΔ) {
                q(b);
            } else {
                U(`${Ef}token?id=${c}`, function (c) {
                    if (d === 1) {
                        return;
                    }
                    const e = c.split("_");
                    const f = e[0] + "_";
                    const g = Number(e[1]);
                    const a = Math.abs(function (a) {
                        return Jk(a, 8260, 46947, 8004, 37330, 5330);
                    }(g));
                    Yw.ΔⲆᐃⲆⲆΔΔ = f + a;
                    q(b);
                }, function () {
                    if (d !== 1) {
                        if (a === 1) {
                            d = 1;
                            b();
                            return;
                        } else {
                            C.waiting = lj;
                            return;
                        }
                    }
                });
            }
            U(`${If}get`, function (c) {
                if (d === 1) {
                    return;
                }
                const e = c.split("_");
                const f = e[0] + "_";
                const g = Number(e[1]);
                const a = Math.abs(Mg(g));
                Yw.ΔⵠΔⲆⵠᐃⲆ = f + a;
                Yw.ᐃΔⵠⵠΔⵠⵠ = a;
                q(b);
            }, function () {
                if (d !== 1) {
                    if (a === 1) {
                        d = 1;
                        b();
                        return;
                    } else {
                        C.waiting = false;
                        return;
                    }
                }
            });
            U(`${If}set`, function (c) {
                if (d === 1) {
                    return;
                }
                const e = c.split("_");
                const f = e[0] + "_";
                const g = Number(e[1]);
                const a = Math.abs(function (a) {
                    return at(a, 58179, 9625);
                }(g));
                Yw.ΔⵠⵠⵠⲆⵠⵠ = f + a;
                Yw.ⲆΔᐃΔⲆⵠⲆΔⲆ = a;
                q(b);
            }, function () {
                if (d !== 1) {
                    if (a === 1) {
                        d = 1;
                        b();
                        return;
                    } else {
                        C.waiting = false;
                        return;
                    }
                }
            });
        };
        this.ᐃᐃⵠᐃΔᐃᐃ = function () {
            if (C.waiting === false) {
                Yw.reconnect.enabled = mg;
                C.waiting = true;
                C.ᐃᐃⵠΔᐃΔΔ(P);
            }
        };
        var V = 1;
        var X = 2;
        var Y = 4;
        var Z = 8;
        var aa = 16;
        var ba = 32;
        var ca = 1;
        var da = 0;
        var ea = 1;
        if (bj.innerWidth < 1300) {
            this.Δᐃⵠⵠᐃ = {
                id: document.getElementById("nickname_block"),
                style: document.getElementById("nickname_block").style,
                input: document.getElementById("nickname_input"),
                active: ea,
                position: Y | V,
                view: K,
                translate: {
                    ⵠⲆΔΔⵠ: 184,
                    ᐃᐃⲆΔᐃ: 200,
                    y: 0,
                    x: 0
                }
            };
        } else {
            this.Δᐃⵠⵠᐃ = {
                id: document.getElementById("nickname_block"),
                style: document.getElementById("nickname_block").style,
                input: document.getElementById("nickname_input"),
                active: ea,
                position: Y | aa,
                view: K,
                translate: {
                    y: 0,
                    ᐃᐃⲆΔᐃ: -180,
                    x: 0,
                    ⵠⲆΔΔⵠ: 184
                }
            };
        }
        this.Δᐃⵠⵠᐃ.id.addEventListener("keyup", function (a) {
            a.preventDefault();
            if (a.keyCode == 13 && !C.waiting && !C.ᐃⲆⲆΔΔⵠⲆΔⲆ) {
                C.ᐃᐃⵠᐃΔᐃᐃ();
            }
        });
        this.Δᐃⵠⵠᐃ.input.value = ⲆΔⲆⲆ.get("starve_nickname") ? ⲆΔⲆⲆ.get("starve_nickname") : "";
        this.ⵠⵠᐃᐃⵠⵠΔⲆΔ = {
            id: document.getElementById("account_nickname_block"),
            style: document.getElementById("account_nickname_block").style,
            input: document.getElementById("account_nickname_input"),
            active: da,
            position: Y | aa,
            view: d,
            translate: {
                ᐃᐃⲆΔᐃ: -122,
                ⵠⲆΔΔⵠ: 110,
                x: 0,
                y: 0
            }
        };
        if (bj.innerWidth < 1300) {
            this.ⲆⵠⵠΔΔ = {
                id: document.getElementById("servselect"),
                style: document.getElementById("servselect").style,
                active: ea,
                position: Y | V,
                view: K,
                translate: {
                    x: 0,
                    ᐃᐃⲆΔᐃ: 208,
                    ⵠⲆΔΔⵠ: 225,
                    y: 0
                }
            };
        } else {
            this.ⲆⵠⵠΔΔ = {
                id: document.getElementById("servselect"),
                style: document.getElementById("servselect").style,
                active: ea,
                position: Y | aa,
                view: K,
                translate: {
                    ᐃᐃⲆΔᐃ: -180,
                    ⵠⲆΔΔⵠ: 225,
                    x: 0,
                    y: 0
                }
            };
        }
        this.ΔΔΔΔ = {
            id: document.getElementById("leaderboard"),
            style: document.getElementById("leaderboard").style,
            active: da,
            position: Y | aa,
            view: f,
            translate: {
                x: 0,
                ᐃᐃⲆΔᐃ: -294.5,
                ⵠⲆΔΔⵠ: 190,
                y: 0
            }
        };
        this.ᐃⵠⲆⲆⵠⲆᐃⵠⵠ = {
            id: document.getElementById("stats_box"),
            style: document.getElementById("stats_box").style,
            active: da,
            position: Y | aa,
            view: d,
            translate: {
                ᐃᐃⲆΔᐃ: 125,
                y: 0,
                ⵠⲆΔΔⵠ: 187,
                x: 0
            }
        };
        this.ⵠᐃⲆΔΔⲆΔⲆΔ = {
            id: document.getElementById("serverAddressBlock"),
            style: document.getElementById("serverAddressBlock").style,
            input: document.getElementById("serverAddressInput"),
            active: da,
            position: Y | aa,
            view: G,
            translate: {
                x: 0,
                y: 0,
                ᐃᐃⲆΔᐃ: -220,
                ⵠⲆΔΔⵠ: 350
            }
        };
        b = 0;
        this.ᐃᐃⲆᐃᐃ = [];
        this.ᐃᐃⲆᐃᐃ[b++] = this.Δᐃⵠⵠᐃ;
        this.ᐃᐃⲆᐃᐃ[b++] = this.ⲆⵠⵠΔΔ;
        this.ᐃᐃⲆᐃᐃ[b++] = this.ΔΔΔΔ;
        this.ᐃᐃⲆᐃᐃ[b++] = this.ⵠⵠᐃᐃⵠⵠΔⲆΔ;
        this.ᐃᐃⲆᐃᐃ[b++] = this.ᐃⵠⲆⲆⵠⲆᐃⵠⵠ;
        this.ᐃᐃⲆᐃᐃ[b++] = this.ⵠᐃⲆΔΔⲆΔⲆΔ;
        b = 0;
        this.ⲆΔΔΔ = [];
        this.ⲆΔΔΔ[b++] = _v(ⲆⲆ.ⲆⵠᐃⵠΔᐃΔ, ea, 0, 0, V);
        this.ⲆΔΔΔ[b++] = _v(ⲆⲆ.ᐃΔⲆⲆⲆΔΔ, da, 0, 0, V);
        this.ⲆΔΔΔ[b++] = _v(ⲆⲆ.ⲆᐃΔⲆᐃⲆᐃ, da, 0, 0, V);
        this.ⲆΔΔΔ[b++] = _v(ⲆⲆ.ΔΔᐃⲆⲆᐃⵠ, da, 0, 0, V);
        this.ⲆΔΔΔ[b++] = _v(ⲆⲆ.ⵠⵠⵠⲆⲆΔᐃ, da, 0, 0, V);
        this.ⲆΔΔΔ[b++] = _v(ⲆⲆ.ΔᐃᐃᐃΔΔⵠ, da, 0, 0, V);
        this.ⲆΔΔΔ[b++] = _v(ⲆⲆ.ⵠⲆΔⲆΔΔⲆ, da, 0, 0, V);
        this.ⲆΔΔΔ[b++] = _v(ⲆⲆ.ⵠᐃΔⲆⵠΔᐃ, da, 0, 0, V);
        this.ⲆΔΔΔ[b++] = _v(ⲆⲆ.ⲆᐃⲆᐃᐃΔΔ, da, 0, 0, V);
        this.ⲆΔΔΔ[b++] = _v(ⲆⲆ.ΔⵠΔⲆΔⵠⲆ, da, 0, 0, V);
        this.ⲆΔΔΔ[b++] = _v(ⲆⲆ.ΔᐃⵠΔⵠΔᐃ, da, 0, 0, V);
        this.ⲆΔΔΔ[b++] = _v(ⲆⲆ.ᐃΔⵠΔᐃⵠⲆ, da, 0, 0, V);
        this.ⲆΔΔΔ[b++] = _v(ⲆⲆ.ΔⵠⲆⲆⲆᐃⲆ, da, 0, 0, V);
        this.ⲆΔΔΔ[b++] = _v(ⲆⲆ.ᐃⲆⲆΔⵠⲆᐃ, da, 0, 0, V);
        this.ⲆΔΔΔ[b++] = _v(ⲆⲆ.ΔΔΔⲆⲆⲆⲆ, da, 0, 0, V);
        this.ⲆΔΔΔ[b++] = _v(ⲆⲆ.ⵠⲆⲆᐃᐃⲆⲆ, da, 0, 0, V);
        this.ⲆΔΔΔ[b++] = _v(ⲆⲆ.ⲆⵠΔⵠᐃⲆⲆ, da, 0, 0, V);
        this.ⲆΔΔΔ[b++] = _v(ⲆⲆ.ⵠᐃⵠⲆΔᐃΔ, da, 0, 0, V);
        this.ⲆΔΔΔ[b++] = _v(ⲆⲆ.ᐃⲆⵠΔⲆᐃΔ, da, 0, 0, V);
        if (bj.innerWidth < 1300) {
            this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ⵠⲆΔᐃⵠⲆⵠ, ea, 200, 100, Y | V);
        } else {
            this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ⵠⲆΔᐃⵠⲆⵠ, ea, -753 / 4, 100, Y | aa);
        }
        this.ⲆΔΔΔ[b++].view = K;
        this.ⲆΔΔΔ[b++] = _v(ⲆⲆ.ΔᐃΔᐃᐃⵠⲆ, ea, 403, -10, X);
        if (bj.innerWidth > 1300) {
            this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ⵠⲆⵠΔᐃⵠᐃ, ea, -885 / 4, -159.5, Z | aa);
            this.ⲆΔΔΔ[b++].view = K;
        }
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ᐃⵠᐃⲆΔⲆⵠ, da, -1293 / 4, 100, Y | aa);
        this.ⲆΔΔΔ[b++].view = d;
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ᐃΔᐃΔⲆᐃᐃ, da, -1425 / 4, 100, Y | aa);
        this.ⲆΔΔΔ[b++].view = c;
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ⲆᐃΔⵠⲆᐃⲆ, da, -905 / 4, 50, Y | aa);
        this.ⲆΔΔΔ[b++].view = m;
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ⲆΔⵠⲆⲆᐃⵠ, da, -402, 130, Y | aa);
        this.ⲆΔΔΔ[b++].view = p;
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ΔⲆⵠΔⲆᐃᐃ, da, -1117 / 4, 130, Y | aa);
        this.ⲆΔΔΔ[b++].view = R;
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ⵠⵠⲆⵠᐃⵠⲆ, da, -1222 / 4, 130, Y | aa);
        this.ⲆΔΔΔ[b++].view = j;
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ⲆΔᐃⵠΔⲆⲆ, da, -305.5, 100, Y | aa);
        this.ⲆΔΔΔ[b++].view = G;
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ΔⵠΔⵠᐃᐃⲆ, da, -ⲆⲆ.ΔⵠΔⵠᐃᐃⲆ.width / 4 - 350, -15, Y | aa);
        this.ⲆΔΔΔ[b++].view = W;
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ΔᐃΔⲆⵠᐃᐃ, da, -1497 / 4, 110, Y | aa);
        this.ⲆΔΔΔ[b++].view = L;
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ᐃΔᐃⲆⲆᐃⲆ, da, -306.5, 100, Y | aa);
        this.ⲆΔΔΔ[b++].view = f;
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ⲆⲆᐃⵠΔⲆⵠ, da, -345.25, 80, Y | aa);
        this.ⲆΔΔΔ[b++].view = z;
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ⲆΔᐃⲆᐃΔᐃ, da, -1542 / 4, 150, Y | aa);
        this.ⲆΔΔΔ[b++].view = T;
        var fa = 3.6;
        var ha = this.ⲆᐃΔᐃΔⵠᐃ([["#25c5d6", fa * 3], ["#e2cf27", fa * 10], ["#afac98", 108], ["#d88e23", fa * 57]]);
        this.ⲆΔΔΔ[b] = _v(ha, da, -ha.width / 4, 178, Y | aa);
        this.ⲆΔΔΔ[b++].view = T;
        this.ᐃΔⵠᐃᐃⵠⲆⲆΔ = function (b, c, d) {
            var e;
            C.ᐃΔᐃⵠᐃ = 1;
            C.ᐃᐃⵠⲆΔⲆⲆ = 0;
            C.ⲆΔΔᐃᐃⵠⵠ = 0;
            C.ᐃᐃᐃᐃⲆⲆᐃ = b;
            C.ⵠⵠΔⵠⲆΔΔ = c;
            var f = 0;
            if (c === 0) {
                for (f = 0; f < Δᐃⵠᐃ.ΔᐃΔΔᐃ.length && Δᐃⵠᐃ.ΔᐃΔΔᐃ[f].id !== d; f++);
                e = Δᐃⵠᐃ.ΔᐃΔΔᐃ[f];
                C.unlock.ᐃᐃᐃⵠ[f] = 1;
            } else if (c === 1) {
                for (f = 0; f < Δᐃⵠᐃ.ΔΔᐃΔⲆ.length && d !== Δᐃⵠᐃ.ΔΔᐃΔⲆ[f].id; f++);
                e = Δᐃⵠᐃ.ΔΔᐃΔⲆ[f];
                C.unlock.ΔᐃᐃⲆⲆ[f] = 1;
            } else if (c === 2) {
                for (f = 0; Δᐃⵠᐃ.ᐃΔⲆΔ.length > f && d !== Δᐃⵠᐃ.ᐃΔⲆΔ[f].id; f++);
                e = Δᐃⵠᐃ.ᐃΔⲆΔ[f];
                C.unlock.ⲆⲆᐃⵠⲆ[f] = 1;
            } else if (c === 3) {
                for (f = 0; f < Δᐃⵠᐃ.ⲆⵠᐃΔⲆ.length && Δᐃⵠᐃ.ⲆⵠᐃΔⲆ[f].id !== d; f++);
                e = Δᐃⵠᐃ.ⲆⵠᐃΔⲆ[f];
                C.unlock.ΔⵠΔΔⵠ[f] = 1;
            } else if (c === 4) {
                for (f = 0; f < Δᐃⵠᐃ.ΔᐃⲆⲆΔ.length && d !== Δᐃⵠᐃ.ΔᐃⲆⲆΔ[f].id; f++);
                e = Δᐃⵠᐃ.ΔᐃⲆⲆΔ[f];
                C.unlock.ΔⵠᐃΔⵠ[f] = 1;
                C.unlock.Ⲇᐃⵠᐃᐃ[f] = 1;
            }
            C.ΔΔⵠᐃⲆⵠⵠ = f;
            C.ᐃⲆΔⲆⲆⲆᐃ = Zv("by " + e.ΔᐃⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, tj, 30, 24, Js, jj, undefined, jj, "#000000", 24);
            C.ⵠΔΔᐃΔΔΔ = Zv(e.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, dg, 30, 24, undefined, vj, Qh, ns, "#000000", 20);
        };
        this.ᐃΔᐃⵠᐃ = 0;
        this.ᐃᐃⵠⲆΔⲆⲆ = 0;
        this.ᐃᐃᐃᐃⲆⲆᐃ = 0;
        this.ⵠⵠΔⵠⲆΔΔ = 0;
        this.ⲆΔΔᐃᐃⵠⵠ = 0;
        this.ᐃⲆΔⲆⲆⲆᐃ = Ft;
        this.ⵠΔΔᐃΔΔΔ = dg;
        var ja = 197;
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ⲆⵠᐃⵠⲆᐃᐃ, da, -1542 / 4, 150, Y | aa);
        this.ⲆΔΔΔ[b++].view = J;
        ha = this.ⲆᐃΔᐃΔⵠᐃ([["#d45ce5", 10.8], ["#25c5d6", fa * 10], ["#e2cf27", 108], ["#afac98", fa * 57]]);
        this.ⲆΔΔΔ[b] = _v(ha, da, -ha.width / 4, 178, Y | aa);
        this.ⲆΔΔΔ[b++].view = J;
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ᐃΔⲆᐃΔⲆΔ, da, -385.5, 150, Y | aa);
        this.ⲆΔΔΔ[b++].view = k;
        ha = this.ⲆᐃΔᐃΔⵠᐃ([["#d33a2a", fa * 3], ["#d45ce5", fa * 10], ["#25c5d6", 108], ["#e2cf27", fa * 57]]);
        this.ⲆΔΔΔ[b] = _v(ha, da, -ha.width / 4, 178, Y | aa);
        this.ⲆΔΔΔ[b++].view = k;
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ⵠⲆⵠⵠⵠⲆᐃ, da, -385.5, 150, Y | aa);
        this.ⲆΔΔΔ[b++].view = x;
        ha = this.ⲆᐃΔᐃΔⵠᐃ([["#25c5d6", 10.8], ["#e2cf27", fa * 10], ["#afac98", 108], ["#d88e23", fa * 57]]);
        this.ⲆΔΔΔ[b] = _v(ha, da, -ha.width / 4, 178, Y | aa);
        this.ⲆΔΔΔ[b++].view = x;
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ΔᐃⲆᐃⲆᐃΔ, da, -1542 / 4, 150, Y | aa);
        this.ⲆΔΔΔ[b++].view = A;
        ha = this.ⲆᐃΔᐃΔⵠᐃ([["#d45ce5", 10.8], ["#25c5d6", 36], ["#e2cf27", 108], ["#afac98", fa * 57]]);
        this.ⲆΔΔΔ[b] = _v(ha, da, -ha.width / 4, 178, Y | aa);
        this.ⲆΔΔΔ[b++].view = A;
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ⵠΔΔᐃΔⵠᐃ, da, -1542 / 4, 150, Y | aa);
        this.ⲆΔΔΔ[b++].view = M;
        ha = this.ⲆᐃΔᐃΔⵠᐃ([["#d33a2a", 10.8], ["#d45ce5", fa * 10], ["#25c5d6", 108], ["#e2cf27", fa * 57]]);
        this.ⲆΔΔΔ[b] = _v(ha, da, -ha.width / 4, 178, Y | aa);
        this.ⲆΔΔΔ[b++].view = M;
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ᐃⲆⵠⲆⲆⲆⲆ, da, -1366 / 4, 100, Y | aa);
        this.ⲆΔΔΔ[b++].view = B;
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ⵠⵠᐃᐃⵠᐃⲆ, da, -1366 / 4, 100, Y | aa);
        this.ⲆΔΔΔ[b++].view = S;
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ⲆᐃΔᐃᐃᐃⲆ, da, -341.5, 100, Y | aa);
        this.ⲆΔΔΔ[b++].view = E;
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ᐃΔⵠⲆⵠΔᐃ, da, -341.5, 100, Y | aa);
        this.ⲆΔΔΔ[b++].view = I;
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ᐃⵠᐃᐃⲆΔᐃ, da, -1366 / 4, 100, Y | aa);
        this.ⲆΔΔΔ[b++].view = D;
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ᐃᐃⵠΔᐃⵠⲆ, da, -341.5, 100, Y | aa);
        this.ⲆΔΔΔ[b++].view = Q;
        ᐃΔⵠᐃⵠⲆⲆ = b++;
        this.ⲆΔΔΔ[ᐃΔⵠᐃⵠⲆⲆ] = _v(ⲆⲆ.ᐃΔⵠᐃⵠⲆⲆ, da, 484, 0, Y);
        ⵠⲆⲆⵠⵠⵠΔ = b++;
        this.ⲆΔΔΔ[ⵠⲆⲆⵠⵠⵠΔ] = _v(ⲆⲆ.ⵠⲆⲆⵠⵠⵠΔ, da, 812.5, 0, Y);
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ΔᐃⵠΔΔⵠᐃ, da, -189.5, -5, Y | aa);
        this.ⲆΔΔΔ[b++].view = w;
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ⲆⵠⲆΔⲆⲆΔ, da, -189.5, -5, Y | aa);
        this.ⲆΔΔΔ[b++].view = y;
        ᐃᐃΔⲆⲆⲆⵠ = b++;
        this.ⲆΔΔΔ[ᐃᐃΔⲆⲆⲆⵠ] = _v(ⲆⲆ.ᐃⲆΔⲆⵠᐃᐃ, ea, 93, 30, Y);
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ⵠΔⲆⲆΔΔΔ, da, -173, 110, Y | aa);
        this.ⲆΔΔΔ[b++].view = _;
        this.ⲆΔΔΔ[b] = _v(ⲆⲆ.ⲆᐃⲆΔⲆⲆⲆ, da, -173, 110, Y | aa);
        this.ⲆΔΔΔ[b++].view = F;
        b = 0;
        this.buttons = [];
        this.buttons[b] = $v(50, 57, 0, [ⲆⲆ.ⵠΔⲆΔΔⵠᐃ, ⲆⲆ.ⲆⵠⵠΔΔΔΔ, ⲆⲆ.ᐃᐃᐃΔΔΔΔ], 1, 0, function () {
            if (C.ⲆΔⵠⵠⲆ()) {
                H(z);
            } else {
                H(m);
            }
        }, 320, 0, V, ea);
        b++;
        if (bj.innerWidth < 1300) {
            this.buttons[b] = $v(202, 97, 0, [ⲆⲆ.ⵠⲆⲆⵠⲆΔⲆ, ⲆⲆ.ᐃΔⲆⵠᐃΔΔ, ⲆⲆ.ΔⵠᐃΔⲆᐃⲆ], 1, 0, this.ᐃᐃⵠᐃΔᐃᐃ, 462, 235, Y | V, ea);
        } else {
            this.buttons[b] = $v(202, 97, 0, [ⲆⲆ.ⵠⲆⲆⵠⲆΔⲆ, ⲆⲆ.ᐃΔⲆⵠᐃΔΔ, ⲆⲆ.ΔⵠᐃΔⲆᐃⲆ], 1, 0, this.ᐃᐃⵠᐃΔᐃᐃ, 74, 235, Y | aa, ea);
        }
        this.buttons[b].view = K;
        b++;
        if (bj.innerWidth > 1300) {
            this.buttons[b] = $v(355, 168, 0, [ⲆⲆ.ᐃⵠⲆⲆΔⲆⵠ, ⲆⲆ.ᐃⵠⲆⲆΔⲆⵠ, ⲆⲆ.ᐃⵠⲆⲆΔⲆⵠ], 1, 0, function () {
                bj.open("./changelog.html", "_blank");
            }, -195, -115, Z | aa, ea);
            this.buttons[b++].view = K;
            this.buttons[b] = $v(355, 168, 0, [ⲆⲆ.ⵠⲆⵠⵠΔⵠⵠ, ⲆⲆ.ⵠⲆⵠⵠΔⵠⵠ, ⲆⲆ.ⵠⲆⵠⵠΔⵠⵠ], 1, 0, function () {
                bj.open("https://taming.io", "_blank");
            }, 20, -115, Z | aa, ea);
            this.buttons[b++].view = K;
        }
        this.buttons[b++] = $v(80, 80, 0, [ⲆⲆ.ⵠᐃΔⵠⵠᐃⵠ, ⲆⲆ.ⲆΔΔⲆⲆᐃⵠ, ⲆⲆ.ⲆᐃΔᐃᐃⲆΔ], 1, 0, function () {
            bj.open("https://lapamauve.creator-spring.com/", "_blank");
        }, 380, 10, X, ea);
        this.buttons[b++] = $v(80, 80, 0, [ⲆⲆ.ⲆⵠⲆⵠᐃⵠᐃ, ⲆⲆ.ᐃⲆⵠᐃΔᐃᐃ, ⲆⲆ.ᐃᐃⲆⵠⲆⵠⵠ], 1, 0, function () {
            bj.open("https://discord.gg/starveio", "_blank");
        }, 330, 10, X, ea);
        this.buttons[b++] = $v(80, 80, 0, [ⲆⲆ.ⲆⲆⲆΔᐃᐃΔ, ⲆⲆ.ᐃᐃΔⲆⲆᐃⲆ, ⲆⲆ.ᐃⲆⲆⵠⵠⲆⵠ], 1, 0, function () {
            bj.open("https://reddit.com/r/starveio", "_blank");
        }, 280, 10, X, ea);
        this.buttons[b++] = $v(80, 80, 0, [ⲆⲆ.ⲆΔⲆⲆⲆΔⵠ, ⲆⲆ.ΔΔⲆⵠᐃᐃⵠ, ⲆⲆ.ΔⵠⲆᐃⲆⲆΔ], 1, 0, function () {
            bj.open("https://starveiopro.wikia.com/wiki/", "_blank");
        }, 230, 10, X, ea);
        this.buttons[b++] = $v(80, 80, 0, [ⲆⲆ.ⵠⵠⵠᐃⲆⵠⵠ, ⲆⲆ.ΔΔⲆⵠΔᐃⵠ, ⲆⲆ.ⵠⲆᐃᐃᐃⲆⵠ], 1, 0, function () {
            bj.open("https://www.facebook.com/LapaMauve/", "_blank");
        }, 155, 10, X, ea);
        this.buttons[b++] = $v(80, 80, 0, [ⲆⲆ.ΔⲆⲆⲆΔⵠᐃ, ⲆⲆ.ⲆΔΔΔᐃⲆΔ, ⲆⲆ.ΔΔⵠᐃⵠⲆⵠ], 1, 0, function () {
            bj.open("https://twitter.com/lapamauve", "_blank");
        }, 105, 10, X, ea);
        this.buttons[b++] = $v(80, 80, 0, [ⲆⲆ.ⲆᐃⲆᐃᐃΔⵠ, ⲆⲆ.ᐃΔⵠΔᐃΔᐃ, ⲆⲆ.ΔΔᐃⵠⵠᐃⵠ], 1, 0, function () {
            bj.open("https://www.youtube.com/@lapamauveofficial", "_blank");
        }, 55, 10, X, ea);
        ᐃΔⵠᐃᐃⲆᐃ = b++;
        this.buttons[ᐃΔⵠᐃᐃⲆᐃ] = $v(232, 142, 0, [ⲆⲆ.ᐃᐃⲆⵠⵠᐃΔ, ⲆⲆ.ΔΔΔΔⵠⵠᐃ, ⲆⲆ.ⲆᐃⲆᐃⵠⲆᐃ], 1, 0, function () {
            H(f);
            lx(mf.ⵠⲆⲆⲆΔΔΔ, mf.ⲆⲆᐃᐃⲆⲆⵠ, mf.ⲆⵠΔᐃᐃⵠᐃ, mf.ⵠⵠⵠⲆⵠᐃⲆ);
        }, -5, 573, V, ea);
        this.buttons[b++] = $v(236, 165, 0, [ⲆⲆ.ⵠΔΔⵠΔΔⵠ, ⲆⲆ.ⵠΔΔⵠΔΔⵠ, ⲆⲆ.ⵠΔΔⵠΔΔⵠ], 1, ca, function () {
            H(f);
        }, -5, 566, V, ea);
        ᐃⲆΔᐃⵠᐃⲆ = b++;
        this.buttons[ᐃⲆΔᐃⵠᐃⲆ] = $v(236, 165, 0, [ⲆⲆ.ᐃⵠⲆΔΔᐃᐃ, ⲆⲆ.ΔⲆᐃΔⵠⲆΔ, ⲆⲆ.ΔΔⵠⲆΔᐃⵠ], 1, 0, function () {
            H(L);
        }, -5, 494, V, ea);
        this.buttons[b++] = $v(236, 165, 0, [ⲆⲆ.ⲆΔᐃΔⵠⲆⵠ, ⲆⲆ.ⲆΔᐃΔⵠⲆⵠ, ⲆⲆ.ⲆΔᐃΔⵠⲆⵠ], 1, ca, function () {
            H(L);
        }, -5, 494, V, ea);
        ⲆⲆⵠΔᐃᐃⲆ = b++;
        this.buttons[ⲆⲆⵠΔᐃᐃⲆ] = $v(236, 165, 0, [ⲆⲆ.ᐃⵠⲆΔΔᐃᐃ, ⲆⲆ.ΔⲆᐃΔⵠⲆΔ, ⲆⲆ.ΔΔⵠⲆΔᐃⵠ], 1, 0, function () {
            if (C.ⲆΔⵠⵠⲆ()) {
                if (mf.ⵠⲆⵠⵠΔΔΔ - Date.now() > 0) {
                    H(G);
                } else {
                    H(R);
                }
            } else {
                H(m);
            }
        }, -5, 415, V, ea);
        this.buttons[b++] = $v(236, 165, 0, [ⲆⲆ.ᐃⵠΔⲆⲆⵠⵠ, ⲆⲆ.ᐃⵠΔⲆⲆⵠⵠ, ⲆⲆ.ᐃⵠΔⲆⲆⵠⵠ], 1, ca, function () {
            if (C.ⲆΔⵠⵠⲆ()) {
                if (mf.ⵠⲆⵠⵠΔΔΔ - Date.now() > 0) {
                    H(G);
                } else {
                    H(R);
                }
            } else {
                H(m);
            }
        }, -5, 415, V, ea);
        ΔΔⲆᐃⵠⲆΔ = b++;
        this.buttons[ΔΔⲆᐃⵠⲆΔ] = $v(236, 165, 0, [ⲆⲆ.ᐃⵠⲆΔΔᐃᐃ, ⲆⲆ.ΔⲆᐃΔⵠⲆΔ, ⲆⲆ.ΔΔⵠⲆΔᐃⵠ], 1, 0, function () {
            H(p);
        }, -5, 336, V, ea);
        this.buttons[b++] = $v(236, 165, 0, [ⲆⲆ.ⲆᐃⲆⲆᐃⲆⵠ, ⲆⲆ.ⲆᐃⲆⲆᐃⲆⵠ, ⲆⲆ.ⲆᐃⲆⲆᐃⲆⵠ], 1, ca, function () {
            H(p);
        }, -5, 336, V, ea);
        ⵠᐃⵠⲆΔᐃᐃ = b++;
        this.buttons[ⵠᐃⵠⲆΔᐃᐃ] = $v(236, 165, 0, [ⲆⲆ.ᐃⵠⲆΔΔᐃᐃ, ⲆⲆ.ΔⲆᐃΔⵠⲆΔ, ⲆⲆ.ΔΔⵠⲆΔᐃⵠ], 1, 0, function () {
            H(c);
        }, -5, 257, V, ea);
        this.buttons[b++] = $v(236, 165, 0, [ⲆⲆ.ΔᐃⲆⲆΔⲆΔ, ⲆⲆ.ΔᐃⲆⲆΔⲆΔ, ⲆⲆ.ΔᐃⲆⲆΔⲆΔ], 1, ca, function () {
            H(c);
        }, -5, 257, V, ea);
        ᐃΔΔⲆⵠⲆⵠ = b++;
        this.buttons[ᐃΔΔⲆⵠⲆⵠ] = $v(236, 165, 0, [ⲆⲆ.ᐃⵠⲆΔΔᐃᐃ, ⲆⲆ.ΔⲆᐃΔⵠⲆΔ, ⲆⲆ.ΔΔⵠⲆΔᐃⵠ], 1, 0, function () {
            H(K);
        }, -5, 178, V, ea);
        this.buttons[b++] = $v(236, 165, 0, [ⲆⲆ.ⲆⲆⵠⵠⵠⲆᐃ, ⲆⲆ.ⲆⲆⵠⵠⵠⲆᐃ, ⲆⲆ.ⲆⲆⵠⵠⵠⲆᐃ], 1, ca, function () {
            H(K);
        }, -5, 178, V, ea);
        ΔⲆᐃⲆΔΔⵠ = b++;
        this.ΔⲆᐃⲆΔΔⵠ = ΔⲆᐃⲆΔΔⵠ;
        this.buttons[ΔⲆᐃⲆΔΔⵠ] = $v(324, 222, 0, [ⲆⲆ.ΔᐃⲆΔⵠΔⲆ, ⲆⲆ.ᐃⵠⲆⲆⵠᐃⵠ, ⲆⲆ.ΔⲆΔⲆⲆⲆᐃ], 1, 0, function () {
            H(m);
        }, 0, 70, V, ea);
        ΔⲆⲆⵠⵠⲆΔ = b++;
        ΔⵠΔⵠᐃⲆⵠ = b++;
        this.ΔⲆⲆⵠⵠⲆΔ = ΔⲆⲆⵠⵠⲆΔ;
        this.ΔⵠΔⵠᐃⲆⵠ = ΔⵠΔⵠᐃⲆⵠ;
        this.buttons[ΔⲆⲆⵠⵠⲆΔ] = $v(324, 222, 0, [ⲆⲆ.ⵠⵠⲆⲆᐃⲆⲆ, ⲆⲆ.ΔΔⲆⲆΔⲆⵠ, ⲆⲆ.ⲆᐃΔⵠΔⲆⵠ], 1, 0, function () {
            H(d);
            qa(-1);
        }, 0, 70, V, da);
        this.buttons[ΔⵠΔⵠᐃⲆⵠ] = $v(324, 222, 0, [ⲆⲆ.ᐃΔⲆᐃᐃᐃᐃ, ⲆⲆ.ᐃΔⲆᐃᐃᐃᐃ, ⲆⲆ.ᐃΔⲆᐃᐃᐃᐃ], 1, ca, function () {
            H(d);
            qa(-1);
        }, 0, 70, V, da);
        if (ΔᐃⵠⲆ.ΔᐃΔΔⲆᐃᐃ === 0) {
            var ka = b++;
            if (bj.innerWidth < 1300) {
                this.buttons[ka] = $v(266, 176, 0, [ⲆⲆ.ᐃⲆΔⵠᐃᐃᐃ, ⲆⲆ.ΔΔⲆⵠΔΔᐃ, ⲆⲆ.ᐃᐃⲆⲆΔᐃⲆ], 1, 0, function () {
                    ΔᐃⵠⲆ.Ⲇᐃⵠⵠⵠ(qw.ⲆⵠΔⲆⵠ);
                }, 150, 300, V | Y, ea);
            } else {
                this.buttons[ka] = $v(266, 176, 0, [ⲆⲆ.ᐃⲆΔⵠᐃᐃᐃ, ⲆⲆ.ΔΔⲆⵠΔΔᐃ, ⲆⲆ.ᐃᐃⲆⲆΔᐃⲆ], 1, 0, function () {
                    ΔᐃⵠⲆ.Ⲇᐃⵠⵠⵠ(qw.ⲆⵠΔⲆⵠ);
                }, -340, 100, aa | Y, ea);
            }
            this.buttons[ka].view = K;
            this.buttons[ka].hint = 0;
            var la = b++;
            if (bj.innerWidth < 1300) {
                this.buttons[la] = $v(266, 176, 0, [ⲆⲆ.ᐃΔⵠⵠⲆⲆⵠ, ⲆⲆ.ΔⵠⲆⲆΔΔᐃ, ⲆⲆ.ⲆᐃⲆᐃᐃⲆΔ], 1, 0, function () {
                    ΔᐃⵠⲆ.Ⲇᐃⵠⵠⵠ(qw.ⵠΔⵠⲆᐃ);
                }, 150, 400, V | Y, ea);
            } else {
                this.buttons[la] = $v(266, 176, 0, [ⲆⲆ.ᐃΔⵠⵠⲆⲆⵠ, ⲆⲆ.ΔⵠⲆⲆΔΔᐃ, ⲆⲆ.ⲆᐃⲆᐃᐃⲆΔ], 1, 0, function () {
                    ΔᐃⵠⲆ.Ⲇᐃⵠⵠⵠ(qw.ⵠΔⵠⲆᐃ);
                }, -340, 200, aa | Y, ea);
            }
            this.buttons[la].view = K;
            this.buttons[la].hint = 0;
            var ma = b++;
            if (bj.innerWidth < 1300) {
                this.buttons[ma] = $v(266, 176, 0, [ⲆⲆ.ᐃⵠⲆⵠΔᐃⵠ, ⲆⲆ.ᐃΔⲆⵠⵠΔᐃ, ⲆⲆ.ᐃⲆⲆΔᐃⲆᐃ], 1, 0, function () {
                    ΔᐃⵠⲆ.Ⲇᐃⵠⵠⵠ(qw.ⵠᐃΔΔᐃ);
                }, 450, 300, V | Y, ea);
            } else {
                this.buttons[ma] = $v(266, 176, 0, [ⲆⲆ.ᐃⵠⲆⵠΔᐃⵠ, ⲆⲆ.ᐃΔⲆⵠⵠΔᐃ, ⲆⲆ.ᐃⲆⲆΔᐃⲆᐃ], 1, 0, function () {
                    ΔᐃⵠⲆ.Ⲇᐃⵠⵠⵠ(qw.ⵠᐃΔΔᐃ);
                }, -340, 300, aa | Y, ea);
            }
            this.buttons[ma].view = K;
            this.buttons[ma].hint = 0;
            var na = b++;
            if (bj.innerWidth < 1300) {
                this.buttons[na] = $v(266, 176, 0, [ⲆⲆ.ΔⵠⲆⵠᐃⵠΔ, ⲆⲆ.ᐃⲆᐃΔⲆⵠⵠ, ⲆⲆ.ᐃⲆⲆⵠⵠᐃΔ], 1, 0, function () {
                    ΔᐃⵠⲆ.Ⲇᐃⵠⵠⵠ(qw.ΔⲆᐃⵠⵠ);
                }, 300, 300, V | Y, ea);
            } else {
                this.buttons[na] = $v(266, 176, 0, [ⲆⲆ.ΔⵠⲆⵠᐃⵠΔ, ⲆⲆ.ᐃⲆᐃΔⲆⵠⵠ, ⲆⲆ.ᐃⲆⲆⵠⵠᐃΔ], 1, 0, function () {
                    ΔᐃⵠⲆ.Ⲇᐃⵠⵠⵠ(qw.ΔⲆᐃⵠⵠ);
                }, 204, 100, aa | Y, ea);
            }
            this.buttons[na].view = K;
            this.buttons[na].hint = 0;
            var oa = b++;
            if (bj.innerWidth < 1300) {
                this.buttons[oa] = $v(266, 176, 0, [ⲆⲆ.ⵠΔⲆⵠⵠⲆⵠ, ⲆⲆ.ᐃΔⵠⲆⲆⲆΔ, ⲆⲆ.ᐃⲆΔᐃΔᐃΔ], 1, 0, function () {
                    ΔᐃⵠⲆ.Ⲇᐃⵠⵠⵠ(qw.ⵠΔᐃΔⵠ);
                }, 300, 400, V | Y, ea);
            } else {
                this.buttons[oa] = $v(266, 176, 0, [ⲆⲆ.ⵠΔⲆⵠⵠⲆⵠ, ⲆⲆ.ᐃΔⵠⲆⲆⲆΔ, ⲆⲆ.ᐃⲆΔᐃΔᐃΔ], 1, 0, function () {
                    ΔᐃⵠⲆ.Ⲇᐃⵠⵠⵠ(qw.ⵠΔᐃΔⵠ);
                }, 204, 200, aa | Y, ea);
            }
            this.buttons[oa].view = K;
            this.buttons[oa].hint = 0;
            var pa = b++;
            this.buttons[pa] = $v(266, 176, 0, [ⲆⲆ.ⵠᐃΔⵠᐃΔⵠ, ⲆⲆ.ⲆᐃΔΔᐃᐃᐃ, ⲆⲆ.ⵠⵠᐃⲆΔⵠⲆ], 1, 0, function () {
                ΔᐃⵠⲆ.Ⲇᐃⵠⵠⵠ(qw.ⵠᐃΔΔΔ);
            }, bj.innerWidth < 1300 ? 450 : 204, bj.innerWidth < 1300 ? 400 : 300, (bj.innerWidth < 1300 ? V : aa) | Y, ea);
            this.buttons[pa].view = K;
            this.buttons[pa].hint = 0;
        }
        function qa(b, c) {
            if (c !== As) {
                mf.ᐃⲆⲆⲆⵠⲆⵠ = c;
                var d = mf.ⲆⵠΔΔⵠᐃⵠ[c];
                mf.ⵠⵠᐃΔⵠ = d.score;
                mf.ᐃᐃᐃᐃᐃ = d.kill;
                mf.ᐃΔⲆⵠΔᐃⲆ = d.death;
                mf.time = d.time;
                mf.ⲆⲆⲆⵠⲆⵠⲆ = d.bestScore;
                mf.ᐃΔΔⲆⵠᐃΔ = d.bestKill;
                mf.ⵠΔΔⲆⲆᐃΔ = d.bestTime;
                mf.ⲆᐃⵠᐃᐃΔⵠ = d.scoreTotal;
            }
            if (b === Oo) {
                b = mf.ⵠΔᐃⲆᐃⲆⵠ;
            }
            mf.ⵠΔᐃⲆᐃⲆⵠ = b;
            if (b >= 0) {
                document.getElementById("stats_box_time").innerHTML = mf.ⵠΔΔⲆⲆᐃΔ[b];
                document.getElementById("stats_box_kill").innerHTML = mf.ᐃΔΔⲆⵠᐃΔ[b];
                document.getElementById("stats_box_score").innerHTML = mf.ⲆⲆⲆⵠⲆⵠⲆ[b];
            } else {
                var f = 0;
                for (var g = 0; mf.ᐃᐃᐃᐃᐃ.length > g; g++) {
                    f += mf.ᐃᐃᐃᐃᐃ[g];
                }
                var h = 0;
                for (g = 0; mf.time.length > g; g++) {
                    h += mf.time[g];
                }
                document.getElementById("stats_box_time").innerHTML = h;
                document.getElementById("stats_box_kill").innerHTML = f;
                document.getElementById("stats_box_score").innerHTML = mf.ⵠⵠᐃΔⵠ;
            }
        }
        this.buttons[b] = $v(87, 78, 0, [ⲆⲆ.ΔⵠᐃⵠⲆᐃⲆ, ⲆⲆ.ⲆⵠⲆⵠᐃΔΔ, ⲆⲆ.ΔⵠⲆⵠⵠᐃᐃ], 1, 0, function () {
            mf.ΔᐃⵠⵠⵠᐃⲆⵠⵠ();
            if (mf.ⵠᐃⵠⲆⲆⵠᐃ === 0) {
                H(F);
            } else {
                H(_);
            }
        }, 127, 110, aa | Y, da);
        this.buttons[b++].view = d;
        this.buttons[b] = $v(87, 78, 0, [ⲆⲆ.ⲆΔΔᐃᐃΔᐃ, ⲆⲆ.ⲆⲆᐃΔⵠⵠⵠ, ⲆⲆ.ⲆᐃΔⲆΔⲆⵠ], 1, 0, function () {
            const a = bj.document.createElement("textarea");
            a.value = ex;
            bj.document.body.appendChild(a);
            a.select();
            bj.document.execCommand("copy");
            bj.document.body.removeChild(a);
        }, 182, 110, aa | Y, da);
        this.buttons[b++].view = d;
        this.buttons[b] = $v(87, 78, 0, [ⲆⲆ.ᐃᐃᐃΔⲆᐃⵠ, ⲆⲆ.ⲆᐃᐃⵠΔⵠⲆ, ⲆⲆ.ᐃᐃᐃΔᐃΔΔ], 1, 0, function () {
            (function () {
                if (Ff === Qf && bj.FB && bj.FB.getUserID()) {
                    bj.FB.logout();
                }
                if (Sf === Ff && hx !== undefined) {
                    bj.gapi.auth2.getAuthInstance().signOut();
                    hx = undefined;
                }
                ex = As;
                dx = undefined;
                Ff = Li;
                mf.ⵠΔᐃΔᐃ = 0;
                mf.ⲆᐃⲆᐃⵠ = 0;
                mf.ⵠⵠᐃΔⵠ = 0;
                mf.ⲆᐃΔΔⵠⲆⲆ();
                ⵠᐃⵠⲆⵠⲆᐃⵠⲆ();
            })();
        }, 255, 110, aa | Y, da);
        this.buttons[b++].view = d;
        this.buttons[b] = $v(58, 64, 0, [ⲆⲆ.ⲆⵠᐃΔⵠᐃᐃ, ⲆⲆ.ⲆⵠΔΔⲆⵠᐃ, ⲆⲆ.ᐃⵠᐃΔᐃⲆᐃ], 1, 0, function () {
            H(K);
        }, 189, 118, aa | Y, da);
        this.buttons[b++].view = m;
        this.buttons[b] = $v(497, 72, 0, [ⲆⲆ.ⲆⲆⵠᐃⵠⵠΔ, ⲆⲆ.ᐃΔᐃⵠᐃᐃᐃ, ⲆⲆ.ⲆᐃΔᐃⵠⲆⲆ], 1, 0, function () {
            (function () {
                if (fw) {
                    dx = ΔⲆⲆⵠ.ᐃⵠᐃΔᐃⵠΔ(40);
                    Ff = _f;
                    ex = fw.userId;
                    bj.ᐃⲆᐃⵠⵠⲆΔ();
                    return;
                }
                bj.gapi.auth2.getAuthInstance().signIn();
            })();
        }, -130, 390, aa | Y, da);
        this.buttons[b++].view = m;
        this.buttons[b] = $v(497, 72, 0, [ⲆⲆ.ⵠⲆⵠᐃΔΔᐃ, ⲆⲆ.ᐃᐃⲆΔⵠⲆΔ, ⲆⲆ.ⵠⲆⲆΔⵠⲆΔ], 1, 0, function () {
            bj.FB.login(function (a) {
                if (a.authResponse) {
                    bj.FB.api("/me", function (a) {
                        Ff = Qf;
                        dx = bj.FB.getAuthResponse().accessToken;
                        $f();
                        bj.ᐃⲆᐃⵠⵠⲆΔ();
                    });
                }
            });
        }, -130, 430, aa | Y, da);
        this.buttons[b++].view = m;
        ⵠΔΔⲆΔΔΔ = 20000;
        this.ΔⵠⲆᐃᐃⲆⵠ = function (a) {
            var b = mf.ᐃᐃⲆⲆΔⵠⵠ(a);
            var c = ⵠΔΔⲆΔΔΔ * (b * b);
            return (a -= c) / ((b + 1) * (b + 1) * ⵠΔΔⲆΔΔΔ - c);
        };
        this.ᐃᐃⲆⲆΔⵠⵠ = function (a) {
            return Math.floor(Math.sqrt(a / ⵠΔΔⲆΔΔΔ));
        };
        this.ΔᐃᐃΔΔᐃⵠΔᐃ = function (a) {
            mf.ⲆⲆΔΔⲆ = mf.ᐃᐃⲆⲆΔⵠⵠ(a);
            mf.ⵠⲆⲆᐃΔΔⵠ = mf.ΔⵠⲆᐃᐃⲆⵠ(a);
            mf.ⵠⵠΔⵠᐃΔΔ = 0;
            mf.ⵠⵠᐃΔⵠ = a;
        };
        this.ⲆΔⵠⲆⵠⲆⵠΔⲆ = function (a) {
            mf.buttons[mf.ΔⲆᐃⲆΔΔⵠ].info.active = 0;
            mf.buttons[mf.ΔⲆⲆⵠⵠⲆΔ].info.active = 1;
            mf.buttons[mf.ΔⵠΔⵠᐃⲆⵠ].info.active = 1;
            n();
            if (a.name.indexOf("Starver#") === -1) {
                document.getElementById("account_nickname_input").value = bj.decodeURIComponent(bj.escape(bj.atob(a.name)));
            } else {
                document.getElementById("account_nickname_input").value = a.name;
            }
            mf.ⲆᐃⲆᐃⵠ = a.bread;
            var b = a.seasons;
            var c = b[b.length - 1];
            mf.ⲆⵠΔΔⵠᐃⵠ = b;
            C.ΔᐃᐃΔΔᐃⵠΔᐃ(c.score);
            mf.ⵠⵠᐃΔⵠ = c.score;
            mf.ᐃᐃᐃᐃᐃ = c.kill;
            mf.ᐃΔⲆⵠΔᐃⲆ = c.death;
            mf.time = c.time;
            mf.ⲆⲆⲆⵠⲆⵠⲆ = c.bestScore;
            mf.ᐃΔΔⲆⵠᐃΔ = c.bestKill;
            mf.ⵠΔΔⲆⲆᐃΔ = c.bestTime;
            mf.ⲆᐃⵠᐃᐃΔⵠ = c.scoreTotal;
            mf.ⵠᐃⵠⲆⲆⵠᐃ = a.firstName;
            document.getElementById("serverAddressInput").value = a.privateServerRegion + " : " + a.privateServer;
            if (mf.ⵠᐃⵠⲆⲆⵠᐃ === undefined) {
                mf.ⵠᐃⵠⲆⲆⵠᐃ = 0;
            }
            mf.ⵠⲆⵠⵠΔΔΔ = Date.now() + a.privateServerTime;
            if (Number(a.privateServerTime) > 0) {
                mf.ⵠⲆⵠⵠΔΔΔ = Date.now() + Number(a.privateServerTime);
            }
            mf.ⵠΔᐃΔᐃ = Date.now() + a.kit;
            if (Number(a.kit) > 0) {
                mf.ⵠΔᐃΔᐃ = Date.now() + Number(a.kit);
            }
            var d = Δᐃⵠᐃ.ΔᐃΔΔᐃ;
            for (var e = 0; a.skins.length > e; e++) {
                var f = a.skins[e];
                if (f > 0) {
                    for (var g = 0; g < d.length; g++) {
                        if (e === d[g].id) {
                            C.unlock.ᐃᐃᐃⵠ[g] = 1;
                        }
                    }
                }
            }
            d = Δᐃⵠᐃ.ΔΔᐃΔⲆ;
            e = 0;
            for (; e < a.accessories.length; e++) {
                if ((f = a.accessories[e]) > 0) {
                    for (g = 0; g < d.length; g++) {
                        if (d[g].id === e) {
                            C.unlock.ΔᐃᐃⲆⲆ[g] = 1;
                        }
                    }
                }
            }
            d = Δᐃⵠᐃ.ⲆⵠᐃΔⲆ;
            e = 0;
            for (; a.books.length > e; e++) {
                if ((f = a.books[e]) > 0) {
                    for (g = 0; d.length > g; g++) {
                        if (d[g].id === e) {
                            C.unlock.ΔⵠΔΔⵠ[g] = 1;
                        }
                    }
                }
            }
            d = Δᐃⵠᐃ.ᐃΔⲆΔ;
            e = 0;
            for (; e < a.bags.length; e++) {
                if ((f = a.bags[e]) > 0) {
                    for (g = 0; g < d.length; g++) {
                        if (d[g].id === e) {
                            C.unlock.ⲆⲆᐃⵠⲆ[g] = 1;
                        }
                    }
                }
            }
            d = Δᐃⵠᐃ.ΔᐃⲆⲆΔ;
            e = 0;
            for (; e < a.crates.length; e++) {
                if ((f = a.crates[e]) > 0) {
                    for (g = 0; d.length > g; g++) {
                        if (e === d[g].id) {
                            C.unlock.ΔⵠᐃΔⵠ[g] = 1;
                            C.unlock.Ⲇᐃⵠᐃᐃ[g] = 1;
                        }
                    }
                }
            }
        };
        this.ⲆⲆⵠⲆΔᐃⵠⵠⵠ = function () {
            bj.ᐃⲆᐃⵠⵠⲆΔ = function () {
                H(K);
                (function (a) {
                    var b = new XMLHttpRequest();
                    b.open("GET", Ef + "login?token=" + dx + "&type=" + Ff + (fw ? "&userId=" + fw.userId + "&userInfo=" + fw.userInfo : ""));
                    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    b.onreadystatechange = function () {
                        if (this.readyState === 4 && this.status === 200 && b.responseText !== "0") {
                            a(JSON.parse(b.responseText));
                        }
                    };
                    b.send();
                })(C.ⲆΔⵠⲆⵠⲆⵠΔⲆ);
            };
            if (fx === 1) {
                bj.ᐃⲆᐃⵠⵠⲆΔ();
            }
        };
        bj.ⵠᐃⵠⲆⵠⲆᐃⵠⲆ = function () {
            mf.buttons[mf.ΔⲆᐃⲆΔΔⵠ].info.active = 1;
            mf.buttons[mf.ΔⲆⲆⵠⵠⲆΔ].info.active = 0;
            mf.buttons[mf.ΔⵠΔⵠᐃⲆⵠ].info.active = 0;
            H(K);
        };
        this.ⲆΔⵠⵠⲆ = function () {
            return mf.buttons[mf.ΔⲆⲆⵠⵠⲆΔ].info.active;
        };
        this.buttons[b] = $v(461, 105, 0, [ⲆⲆ.ⲆⲆᐃᐃᐃⲆⲆ, ⲆⲆ.ᐃΔΔᐃΔΔⵠ, ⲆⲆ.ⲆΔⵠᐃⵠⲆᐃ], 1, 0, function () {
            if (C.ⲆΔⵠⵠⲆ()) {
                H(z);
            } else {
                H(m);
            }
        }, -100, 80, aa | Y, da);
        this.buttons[b++].view = p;
        this.buttons[b] = $v(157, 158, 0, [ⲆⲆ.ⵠⲆⲆⵠᐃⲆⵠ, ⲆⲆ.ᐃΔⲆⲆΔᐃⲆ, ⲆⲆ.ᐃⲆΔΔⵠΔᐃ], 1, 0, function () {
            bj.open("https://starveiopro.wikia.com/wiki/", "_blank");
        }, -35, 125, aa | Y, da);
        this.buttons[b++].view = L;
        this.buttons[b] = $v(66, 73, 0, [ⲆⲆ.ᐃⲆΔΔΔΔⵠ, ⲆⲆ.ⵠⵠᐃΔᐃⲆⵠ, ⲆⲆ.ΔΔⲆⵠⵠᐃᐃ], 1, 0, Jl, -68, 340, aa | Y, da);
        this.buttons[b++].view = L;
        this.buttons[b] = $v(66, 73, 0, [ⲆⲆ.Ⲇᐃᐃᐃᐃⵠⵠ, ⲆⲆ.ⲆΔᐃᐃᐃⵠᐃ, ⲆⲆ.ⲆΔⲆΔⵠΔΔ], 1, 0, uj, -30, 340, aa | Y, da);
        this.buttons[b++].view = L;
        this.ΔᐃΔΔΔᐃΔⵠᐃ = b;
        this.buttons[b] = $v(97, 66, 0, [ⲆⲆ.ⵠᐃⵠⲆΔⲆⵠ, ⲆⲆ.ⵠⲆⵠⵠⲆΔᐃ, ⲆⲆ.ⵠⵠΔⵠⵠᐃⲆ], 1, 0, function () {
            lx(undefined, undefined, mf.ⲆⵠΔᐃᐃⵠᐃ);
        }, -14, 151, aa | Y, da);
        this.buttons[b++].view = f;
        this.ⵠⵠⵠΔⵠⲆΔ = b;
        this.buttons[b] = $v(135, 66, 0, [ⲆⲆ.ⲆΔⲆᐃΔΔⲆ, ⲆⲆ.ᐃⲆᐃⵠᐃⲆᐃ, ⲆⲆ.ⲆⲆⲆᐃΔⲆⵠ], 1, 0, function () {
            lx(Jl, undefined, mf.ⵠⵠⵠΔⵠⲆΔ);
        }, 37.5, 151, aa | Y, da);
        this.buttons[b++].view = f;
        this.ⲆᐃⲆⲆᐃⲆᐃ = b;
        this.buttons[b] = $v(160, 66, 0, [ⲆⲆ.ᐃⲆⲆΔΔⵠⲆ, ⲆⲆ.ⵠⵠᐃᐃᐃᐃⵠ, ⲆⲆ.ⲆᐃᐃⲆᐃᐃⵠ], 1, 0, function () {
            lx(undefined, sl, mf.ⲆᐃⲆⲆᐃⲆᐃ);
        }, 107.5, 151, aa | Y, da);
        this.buttons[b++].view = f;
        this.ⲆⵠΔᐃᐃⵠᐃ = b;
        this.buttons[b] = $v(207, 66, 0, [ⲆⲆ.ⵠⵠⵠΔⵠΔΔ, ⲆⲆ.ᐃⲆᐃΔⲆΔΔ, ⲆⲆ.ᐃⲆᐃⵠᐃⵠⲆ], 1, 0, function () {
            lx(undefined, undefined, mf.ⲆⵠΔᐃᐃⵠᐃ);
        }, 190.5, 151, aa | Y, da);
        this.buttons[b++].view = f;
        this.ⵠΔΔΔⲆΔᐃ = b;
        this.buttons[b] = $v(144, 66, 0, [ⲆⲆ.ⵠᐃⲆⲆⲆⵠⲆ, ⲆⲆ.ⵠⵠᐃⲆⵠⲆⵠ, ⲆⲆ.ⲆⲆᐃⲆΔΔⲆ], 1, 0, function () {
            lx(mf.ⵠΔΔΔⲆΔᐃ);
        }, 103.5, 110, aa | Y, da);
        this.buttons[b++].view = f;
        this.ⲆⲆΔⲆⵠⲆΔ = b;
        this.buttons[b] = $v(124, 66, 0, [ⲆⲆ.ΔⵠΔΔⲆᐃᐃ, ⲆⲆ.ᐃⲆⲆⵠᐃᐃᐃ, ⲆⲆ.ⵠᐃΔⵠᐃᐃⲆ], 1, 0, function () {
            lx(mf.ⲆⲆΔⲆⵠⲆΔ);
        }, 177.5, 110, aa | Y, da);
        this.buttons[b++].view = f;
        this.ⵠⲆⲆⲆΔΔΔ = b;
        this.buttons[b] = $v(104, 66, 0, [ⲆⲆ.ⵠⲆᐃⲆᐃᐃⲆ, ⲆⲆ.ⲆⵠⲆΔⲆⵠᐃ, ⲆⲆ.ⲆᐃⲆᐃⵠⵠᐃ], 1, 0, function () {
            lx(mf.ⵠⲆⲆⲆΔΔΔ);
        }, 242, 110, aa | Y, da);
        this.buttons[b++].view = f;
        this.ⲆⲆⵠᐃⵠᐃᐃ = b;
        this.buttons[b] = $v(46, 51, 0, [ⲆⲆ.ⲆⵠΔᐃⲆⵠᐃ, ⲆⲆ.ⲆⲆⵠΔᐃⲆⵠ, ⲆⲆ.ΔⲆⵠΔⲆᐃⲆ], 1, 0, function () {
            lx(undefined, undefined, undefined, mf.ⲆⲆⵠᐃⵠᐃᐃ);
        }, -185, 528, aa | Y, da);
        this.buttons[b++].view = f;
        this.ᐃΔΔΔⵠΔⲆ = b;
        this.buttons[b] = $v(46, 51, 0, [ⲆⲆ.ⲆΔᐃΔᐃⵠΔ, ⲆⲆ.ᐃᐃΔᐃᐃΔᐃ, ⲆⲆ.ΔᐃᐃⵠΔⵠΔ], 1, 0, function () {
            lx(tj, Ga, uj, mf.ᐃΔΔΔⵠΔⲆ);
        }, -149, 528, aa | Y, da);
        this.buttons[b++].view = f;
        this.ΔΔΔⵠⵠΔⵠ = b;
        this.buttons[b] = $v(46, 51, 0, [ⲆⲆ.ⲆⵠⵠⵠᐃⵠΔ, ⲆⲆ.ⲆⲆΔⵠᐃⲆⲆ, ⲆⲆ.ⵠᐃᐃⲆⲆⲆΔ], 1, 0, function () {
            lx(dg, qn, uj, mf.ΔΔΔⵠⵠΔⵠ);
        }, -113, 528, aa | Y, da);
        this.buttons[b++].view = f;
        this.ΔᐃⲆᐃΔⲆᐃ = b;
        this.buttons[b] = $v(46, 51, 0, [ⲆⲆ.ΔⲆⲆⲆΔⲆⵠ, ⲆⲆ.ΔⲆⵠΔⲆⵠⵠ, ⲆⲆ.ⲆᐃⲆⲆᐃⵠᐃ], 1, 0, function () {
            lx(Qh, undefined, undefined, mf.ΔᐃⲆᐃΔⲆᐃ);
        }, -77, 528, aa | Y, da);
        this.buttons[b++].view = f;
        this.ⲆΔΔΔᐃⵠΔ = b;
        this.buttons[b] = $v(46, 51, 0, [ⲆⲆ.ⵠΔⵠⵠᐃᐃⲆ, ⲆⲆ.ᐃⲆⲆΔᐃΔⵠ, ⲆⲆ.ⲆΔⲆⵠᐃΔⲆ], 1, 0, function () {
            lx(undefined, undefined, Oo, mf.ⲆΔΔΔᐃⵠΔ);
        }, -41, 528, aa | Y, da);
        this.buttons[b++].view = f;
        this.ⵠⵠⵠⲆⵠᐃⲆ = b;
        this.buttons[b] = $v(46, 51, 0, [ⲆⲆ.ⵠᐃⲆⵠⵠⲆᐃ, ⲆⲆ.ᐃΔᐃΔΔᐃᐃ, ⲆⲆ.ᐃᐃᐃⲆⲆΔᐃ], 1, 0, function () {
            lx(undefined, uj, undefined, mf.ⵠⵠⵠⲆⵠᐃⲆ);
        }, -5, 528, aa | Y, da);
        this.buttons[b++].view = f;
        this.buttons[b] = $v(232, 352, 0, [ⲆⲆ.ᐃᐃΔᐃⵠⵠΔ, ⲆⲆ.ᐃᐃΔᐃᐃⵠⲆ, ⲆⲆ.ΔᐃΔⲆᐃⵠᐃ], 1, 0, function () {
            Zf(300);
        }, -330, 135, aa | Y, da);
        this.buttons[b++].view = z;
        this.buttons[b] = $v(232, 352, 0, [ⲆⲆ.ⲆⵠⲆⲆᐃⲆⲆ, ⲆⲆ.ᐃⲆⵠⲆⲆⵠⲆ, ⲆⲆ.ΔΔⵠᐃⵠᐃⲆ], 1, 0, function () {
            Zf(600);
        }, -195, 135, aa | Y, da);
        this.buttons[b++].view = z;
        this.buttons[b] = $v(243, 374, 0, [ⲆⲆ.ⲆⵠᐃⲆᐃᐃᐃ, ⲆⲆ.ⲆᐃⵠⵠⲆᐃⲆ, ⲆⲆ.ΔⵠⵠⲆΔΔΔ], 1, 0, function () {
            Zf(2600);
        }, -60, 130, aa | Y, da);
        this.buttons[b++].view = z;
        this.buttons[b] = $v(232, 352, 0, [ⲆⲆ.ⵠᐃⵠⲆⲆⵠⵠ, ⲆⲆ.ⲆⲆᐃⲆΔⵠᐃ, ⲆⲆ.ᐃⲆⲆΔⵠᐃΔ], 1, 0, function () {
            Zf(7000);
        }, 78, 135, aa | Y, da);
        this.buttons[b++].view = z;
        this.buttons[b] = $v(243, 374, 0, [ⲆⲆ.ᐃⵠⵠΔⵠⵠⵠ, ⲆⲆ.ⲆᐃⲆⲆⲆΔⵠ, ⲆⲆ.ⵠᐃΔᐃⵠᐃᐃ], 1, 0, function () {
            Zf(20000);
        }, 213, 130, aa | Y, da);
        this.buttons[b++].view = z;
        this.buttons[b] = $v(58, 64, 0, [ⲆⲆ.ⲆⵠᐃΔⵠᐃᐃ, ⲆⲆ.ⲆⵠΔΔⲆⵠᐃ, ⲆⲆ.ᐃⵠᐃΔᐃⲆᐃ], 1, 0, function () {
            H(p);
        }, 300, 88, aa | Y, da);
        this.buttons[b++].view = z;
        this.buttons[b] = $v(323, 112, 0, [ⲆⲆ.ⲆᐃⲆⵠⵠⲆᐃ, ⲆⲆ.ᐃᐃⲆΔⲆΔⲆ, ⲆⲆ.ᐃⵠΔᐃΔⲆⲆ], 1, 0, function () {
            H(B);
            Ca.ⵠᐃⲆⵠᐃⵠⵠ();
        }, -315, 185, aa | Y, da);
        this.buttons[b++].view = c;
        this.buttons[b] = $v(323, 112, 0, [ⲆⲆ.ΔⲆⵠⲆⲆⵠⲆ, ⲆⲆ.ᐃⲆΔⵠⵠⲆⵠ, ⲆⲆ.ⲆⵠΔΔⵠⲆⲆ], 1, 0, function () {
            H(S);
            Ja.ⵠᐃⲆⵠᐃⵠⵠ();
        }, -315, 321, aa | Y, da);
        this.buttons[b++].view = c;
        this.buttons[b] = $v(323, 112, 0, [ⲆⲆ.ΔΔᐃⲆΔΔⵠ, ⲆⲆ.ᐃⵠΔᐃᐃᐃᐃ, ⲆⲆ.ᐃᐃⵠⲆΔᐃᐃ], 1, 0, function () {
            H(E);
            Ea.ⵠᐃⲆⵠᐃⵠⵠ();
        }, 153, 185, aa | Y, da);
        this.buttons[b++].view = c;
        this.buttons[b] = $v(323, 112, 0, [ⲆⲆ.ΔΔⲆΔΔⵠⲆ, ⲆⲆ.ⲆᐃⵠᐃⲆΔΔ, ⲆⲆ.ΔᐃᐃᐃᐃΔⵠ], 1, 0, function () {
            H(I);
            Fa.ⵠᐃⲆⵠᐃⵠⵠ();
        }, 153, 321, aa | Y, da);
        this.buttons[b++].view = c;
        this.buttons[b] = $v(323, 112, 0, [ⲆⲆ.ⲆⵠⵠΔᐃᐃⲆ, ⲆⲆ.ᐃΔⵠΔⵠⲆⲆ, ⲆⲆ.ⲆΔⵠᐃⵠᐃⵠ], 1, 0, function () {
            H(D);
            Ha.ⵠᐃⲆⵠᐃⵠⵠ();
        }, 153, 463, aa | Y, da);
        this.buttons[b++].view = c;
        this.buttons[b] = $v(323, 112, 0, [ⲆⲆ.ΔΔΔΔᐃⵠᐃ, ⲆⲆ.ᐃⲆⵠⲆⵠᐃᐃ, ⲆⲆ.ⲆⲆⲆⵠⲆⵠⵠ], 1, 0, function () {
            H(Q);
            Ia.ⵠᐃⲆⵠᐃⵠⵠ();
        }, -315, 463, aa | Y, da);
        this.buttons[b++].view = c;
        this.buttons[b] = $v(327, 117, 0, [ⲆⲆ.ⵠⲆΔᐃⵠᐃᐃ, ⲆⲆ.ΔⵠᐃⲆᐃⵠᐃ, ⲆⲆ.ⲆΔⲆⲆⲆⲆⲆ], 1, 0, function () {
            H(W);
        }, 155, 70, V, ea);
        this.buttons[b++].view = K;
        this.buttons[b] = $v(130, 129, 0, [ⲆⲆ.ⲆⲆⲆᐃᐃⲆᐃ, ⲆⲆ.ᐃⵠⲆⵠⲆΔᐃ, ⲆⲆ.ⲆᐃΔΔΔΔΔ], 1, 0, function () {
            O(y, da, "none");
            H(p);
        }, 10, 40, aa | Y, da);
        this.buttons[b++].view = y;
        this.buttons[b] = $v(130, 129, 0, [ⲆⲆ.ⲆⲆⲆᐃᐃⲆᐃ, ⲆⲆ.ᐃⵠⲆⵠⲆΔᐃ, ⲆⲆ.ⲆᐃΔΔΔΔΔ], 1, 0, function () {
            O(w, da, "none");
            H(p);
        }, 10, 40, aa | Y, da);
        this.buttons[b++].view = w;
        this.buttons[b] = $v(115, 73, 0, [ⲆⲆ.ᐃⲆᐃᐃΔ, ⲆⲆ.ᐃⵠᐃⵠⵠ, ⲆⲆ.ⵠⲆⵠΔⵠ], 1, 0, function () {
            H(p);
        }, 200, 140, aa | Y, da);
        this.buttons[b++].view = R;
        this.buttons[b] = $v(524, 110, 0, [ⲆⲆ.ΔΔⵠΔⵠⵠΔ, ⲆⲆ.ΔⲆⵠⲆΔΔⲆ, ⲆⲆ.ᐃᐃⲆΔΔᐃᐃ], 1, 0, function () {
            kx("Atlanta");
        }, -265, 300, aa | Y, da);
        this.buttons[b++].view = R;
        this.buttons[b] = $v(523, 110, 0, [ⲆⲆ.ᐃΔⲆᐃᐃⲆⵠ, ⲆⲆ.ⵠΔΔⵠᐃΔⵠ, ⲆⲆ.ⵠΔⲆⲆΔΔᐃ], 1, 0, function () {
            kx("LosAngeles");
        }, 5, 300, aa | Y, da);
        this.buttons[b++].view = R;
        this.buttons[b] = $v(344, 110, 0, [ⲆⲆ.ⵠⵠⲆⵠⵠΔⵠ, ⲆⲆ.ⵠⲆⵠᐃᐃᐃΔ, ⲆⲆ.ᐃᐃⵠΔⲆⵠΔ], 1, 0, function () {
            kx("Frankfurt");
        }, -265, 365, aa | Y, da);
        this.buttons[b++].view = R;
        this.buttons[b] = $v(344, 110, 0, [ⲆⲆ.ⲆⵠΔΔⵠⲆᐃ, ⲆⲆ.ⲆᐃΔⲆΔΔⵠ, ⲆⲆ.ΔᐃⵠⲆⲆΔⲆ], 1, 0, function () {
            kx("Osaka");
        }, 100, 365, aa | Y, da);
        this.buttons[b++].view = R;
        this.buttons[b] = $v(344, 110, 0, [ⲆⲆ.ᐃΔⲆⵠⵠⲆΔ, ⲆⲆ.ⲆΔᐃⲆᐃⲆⵠ, ⲆⲆ.ᐃⵠⲆᐃᐃⲆⲆ], 1, 0, function () {
            kx("Sydney");
        }, -86, 365, aa | Y, da);
        this.buttons[b++].view = R;
        this.buttons[b] = $v(115, 73, 0, [ⲆⲆ.ᐃⲆᐃᐃΔ, ⲆⲆ.ᐃⵠᐃⵠⵠ, ⲆⲆ.ⵠⲆⵠΔⵠ], 1, 0, function () {
            H(R);
        }, 224, 140, aa | Y, da);
        this.buttons[b++].view = j;
        this.buttons[b] = $v(230, 352, 0, [ⲆⲆ.ᐃⲆᐃⵠⲆⲆᐃ, ⲆⲆ.ΔᐃⲆΔⲆᐃⵠ, ⲆⲆ.ΔᐃⲆΔΔⲆΔ], 1, 0, function () {
            Zf(350);
        }, -280, 240, aa | Y, da);
        this.buttons[b++].view = j;
        this.buttons[b] = $v(230, 352, 0, [ⲆⲆ.ᐃΔΔⵠⲆⲆᐃ, ⲆⲆ.ᐃⵠⵠΔᐃΔⵠ, ⲆⲆ.ᐃⵠⵠⵠⲆΔᐃ], 1, 0, function () {
            Zf(700);
        }, -130, 240, aa | Y, da);
        this.buttons[b++].view = j;
        this.buttons[b] = $v(230, 352, 0, [ⲆⲆ.ⲆⲆⲆⵠΔΔⲆ, ⲆⲆ.ⵠΔⲆⲆΔⵠᐃ, ⲆⲆ.ⲆΔΔΔᐃⲆᐃ], 1, 0, function () {
            Zf(1400);
        }, 20, 240, aa | Y, da);
        this.buttons[b++].view = j;
        this.buttons[b] = $v(230, 352, 0, [ⲆⲆ.ⵠΔⲆΔⵠⵠΔ, ⲆⲆ.ᐃⲆᐃΔΔΔⵠ, ⲆⲆ.ⲆⲆΔⵠᐃΔⲆ], 1, 0, function () {
            Zf(3000);
        }, 170, 240, aa | Y, da);
        this.buttons[b++].view = j;
        this.buttons[b] = $v(105, 119, 0, [ⲆⲆ.ᐃᐃⲆⵠⲆᐃᐃ, ⲆⲆ.ⵠΔⲆᐃᐃΔⲆ, ⲆⲆ.ⵠⲆⲆⲆⲆΔᐃ], 1, 0, function () {
            const a = document.getElementById("serverAddressInput").value.split(" : ");
            const b = bj.document.createElement("textarea");
            b.value = jw + "?server=" + a[1] + "&region=" + a[0];
            bj.document.body.appendChild(b);
            b.select();
            bj.document.execCommand("copy");
            bj.document.body.removeChild(b);
        }, 170, 310, aa | Y, da);
        this.buttons[b++].view = G;
        this.buttons[b] = $v(105, 119, 0, [ⲆⲆ.ⵠⵠΔⲆⲆᐃΔ, ⲆⲆ.ΔⲆΔⲆᐃⵠⲆ, ⲆⲆ.ⵠⲆⵠⵠᐃᐃΔ], 1, 0, function () {
            (function () {
                var a = new XMLHttpRequest();
                a.open("GET", Ef + "rebootServer?token=" + dx + "&userid=" + ex);
                a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                a.onreadystatechange = function () {
                    if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
                        const a = document.getElementById("serverAddressInput").value.split(" : ");
                        location.href = jw + "?server=" + a[1] + "&region=" + a[0];
                    }
                };
                a.send();
            })();
        }, 235, 310, aa | Y, da);
        this.buttons[b++].view = G;
        this.buttons[b] = $v(204, 115, 0, [ⲆⲆ.ⲆⲆΔⲆᐃⲆⵠ, ⲆⲆ.ⲆᐃᐃⲆⵠΔΔ, ⲆⲆ.ᐃⲆⲆⵠⵠΔᐃ], 1, 0, function () {
            bj.open("./commands.html", "_blank");
        }, -265, 490, aa | Y, da);
        this.buttons[b++].view = G;
        this.buttons[b] = $v(145, 69, 0, [ⲆⲆ.ᐃⲆⵠⲆᐃΔΔ, ⲆⲆ.ⲆᐃⲆᐃⵠⲆΔ, ⲆⲆ.ΔⲆⵠⵠᐃᐃΔ], 1, 0, function () {
            H(T);
        }, -210, 170, aa | Y, da);
        this.buttons[b++].view = p;
        this.buttons[b] = $v(145, 69, 0, [ⲆⲆ.ⲆⲆⲆⵠⵠᐃⲆ, ⲆⲆ.ΔΔᐃⵠᐃⲆⵠ, ⲆⲆ.ⲆⲆᐃᐃⲆΔΔ], 1, 0, function () {
            H(x);
        }, 70, 170, aa | Y, da);
        this.buttons[b++].view = p;
        this.buttons[b] = $v(145, 69, 0, [ⲆⲆ.ΔΔᐃⵠᐃⵠΔ, ⲆⲆ.ΔΔⵠⲆⲆⲆⲆ, ⲆⲆ.ᐃΔᐃᐃⵠΔᐃ], 1, 0, function () {
            H(A);
        }, 70, 204, aa | Y, da);
        this.buttons[b++].view = p;
        this.buttons[b] = $v(145, 69, 0, [ⲆⲆ.ᐃⲆⵠⵠᐃᐃⵠ, ⲆⲆ.ᐃΔⵠⲆᐃⵠΔ, ⲆⲆ.ᐃΔᐃⲆⵠⲆΔ], 1, 0, function () {
            H(J);
        }, -210, 204, aa | Y, da);
        this.buttons[b++].view = p;
        this.buttons[b] = $v(145, 69, 0, [ⲆⲆ.ᐃⲆⵠⵠᐃᐃⵠ, ⲆⲆ.ᐃΔⵠⲆᐃⵠΔ, ⲆⲆ.ᐃΔᐃⲆⵠⲆΔ], 1, 0, function () {
            H(M);
        }, 70, 238, aa | Y, da);
        this.buttons[b++].view = p;
        this.buttons[b] = $v(145, 69, 0, [ⲆⲆ.ᐃⲆⵠⵠᐃᐃⵠ, ⲆⲆ.ᐃΔⵠⲆᐃⵠΔ, ⲆⲆ.ᐃΔᐃⲆⵠⲆΔ], 1, 0, function () {
            if (C.ⲆΔⵠⵠⲆ()) {
                Xf(0, 300);
            } else {
                H(m);
            }
        }, 307, 205, aa | Y, da);
        this.buttons[b++].view = p;
        this.buttons[b] = $v(145, 69, 0, [ⲆⲆ.ΔΔΔΔᐃᐃⵠ, ⲆⲆ.ⵠΔⵠⵠⵠⲆᐃ, ⲆⲆ.ΔΔᐃΔᐃⲆΔ], 1, 0, function () {
            H(k);
        }, -210, 238, aa | Y, da);
        this.buttons[b++].view = p;
        this.buttons[b] = $v(145, 69, 0, [ⲆⲆ.ΔΔΔΔᐃᐃⵠ, ⲆⲆ.ⵠΔⵠⵠⵠⲆᐃ, ⲆⲆ.ΔΔᐃΔᐃⲆΔ], 1, 0, function () {
            if (C.ⲆΔⵠⵠⲆ()) {
                Xf(1, 600);
            } else {
                H(m);
            }
        }, 307, 239, aa | Y, da);
        this.buttons[b++].view = p;
        this.buttons[b] = $v(192, 101, 0, [ⲆⲆ.ⲆⵠⵠⲆⲆⵠⵠ, ⲆⲆ.ᐃⵠⵠⲆⲆⲆⲆ, ⲆⲆ.ⵠΔᐃⲆᐃᐃⵠ], 1, 0, function () {
            jx();
        }, -100, 250, aa | Y, da);
        this.buttons[b++].view = F;
        this.buttons[b] = $v(192, 104, 0, [ⲆⲆ.ΔΔⲆΔΔⵠᐃ, ⲆⲆ.ⲆⲆᐃᐃⵠⲆⲆ, ⲆⲆ.ΔᐃⵠᐃΔΔⲆ], 1, 0, function () {
            jx();
        }, -100, 239, aa | Y, da);
        this.buttons[b++].view = _;
        this.buttons[b] = $v(192, 101, 0, [ⲆⲆ.ΔΔᐃⲆⲆΔⲆ, ⲆⲆ.ᐃⵠΔᐃΔΔⵠ, ⲆⲆ.ᐃΔⵠᐃⲆⲆⲆ], 1, 0, function () {
            H(d);
        }, 10, 250, aa | Y, da);
        this.buttons[b++].view = F;
        this.buttons[b] = $v(192, 104, 0, [ⲆⲆ.ΔΔⲆᐃⲆᐃⵠ, ⲆⲆ.ᐃⲆⵠⵠⵠⲆⲆ, ⲆⲆ.ⲆᐃⲆΔᐃⲆᐃ], 1, 0, function () {
            H(d);
        }, 10, 239, aa | Y, da);
        this.buttons[b++].view = _;
        ⲆⵠⵠⲆⵠΔΔ = [];
        ⲆⵠⵠⲆⵠΔΔ[ⵠΔΔ.ᐃᐃⵠⲆΔ] = [ⲆⲆ.ⲆᐃⵠⲆⲆⲆᐃ, ⲆⲆ.ᐃⵠΔⲆΔΔⵠ, ⲆⲆ.ⵠⵠⵠⵠⵠⵠΔ];
        ⲆⵠⵠⲆⵠΔΔ[ⵠΔΔ.ⵠΔᐃΔ] = [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ];
        ⲆⵠⵠⲆⵠΔΔ[ⵠΔΔ.ⵠⲆⲆⲆ] = [ⲆⲆ.ΔᐃⲆᐃⲆΔⵠ, ⲆⲆ.ⲆⵠⲆⵠᐃⲆⲆ, ⲆⲆ.ⲆΔⵠΔᐃᐃⲆ];
        ⲆⵠⵠⲆⵠΔΔ[ⵠΔΔ.ⵠⵠΔᐃ] = [ⲆⲆ.ⲆΔᐃⵠⲆⵠⲆ, ⲆⲆ.ΔΔⵠΔΔᐃᐃ, ⲆⲆ.ⵠΔⵠΔᐃΔⵠ];
        ⲆⵠⵠⲆⵠΔΔ[ⵠΔΔ.ΔΔⲆⲆ] = [ⲆⲆ.ΔᐃΔΔⲆΔⲆ, ⲆⲆ.ΔΔⲆᐃⲆΔⲆ, ⲆⲆ.ᐃⵠⵠᐃᐃᐃⵠ];
        ⲆⵠⵠⲆⵠΔΔ[ⵠΔΔ.ΔᐃⲆⵠ] = [ⲆⲆ.ᐃⲆΔΔᐃⲆᐃ, ⲆⲆ.ⵠⵠΔⵠᐃⲆΔ, ⲆⲆ.ΔᐃᐃΔᐃⲆΔ];
        ⲆⵠⵠⲆⵠΔΔ[ⵠΔΔ.ΔⵠΔΔ] = [ⲆⲆ.ΔᐃⲆⲆⵠᐃᐃ, ⲆⲆ.ⵠⲆⵠⵠⲆⲆⵠ, ⲆⲆ.ΔⲆᐃⲆΔⵠⵠ];
        ⲆⵠⵠⲆⵠΔΔ[ⵠΔΔ.ⲆⵠΔΔᐃ] = [ⲆⲆ.ᐃΔⲆᐃΔΔⲆ, ⲆⲆ.ⲆⵠⵠᐃᐃⵠΔ, ⲆⲆ.ⲆᐃΔⲆⵠⲆΔ];
        ⲆⵠⵠⲆⵠΔΔ[ⵠΔΔ.ⵠΔⵠΔᐃⲆⲆ] = [ⲆⲆ.ΔⲆᐃΔᐃΔⲆ, ⲆⲆ.ⲆΔᐃΔⵠⵠⲆ, ⲆⲆ.ⵠΔⲆᐃΔΔᐃ];
        ⵠⵠΔΔⵠⵠΔ = b;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, Zk, -29, 205, aa | Y, da);
        this.buttons[b++].view = B;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, Da, -29, 300, aa | Y, da);
        this.buttons[b++].view = B;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, dg, -29, 395, aa | Y, da);
        this.buttons[b++].view = B;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, dg, 65, 205, aa | Y, da);
        this.buttons[b++].view = B;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, qn, 65, 300, aa | Y, da);
        this.buttons[b++].view = B;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, undefined, 65, 395, aa | Y, da);
        this.buttons[b++].view = B;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, undefined, 159, 205, aa | Y, da);
        this.buttons[b++].view = B;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, undefined, 159, 300, aa | Y, da);
        this.buttons[b++].view = B;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, undefined, 159, 395, aa | Y, da);
        this.buttons[b++].view = B;
        this.buttons[b] = $v(39, 122, 0, [ⲆⲆ.ᐃⵠⲆΔⲆΔᐃ, ⲆⲆ.ⵠⲆⵠᐃᐃⵠᐃ, ⲆⲆ.ⲆⵠⵠᐃΔⲆᐃ], 1, 0, qn, -61, 315, aa | Y, da);
        this.buttons[b++].view = B;
        this.buttons[b] = $v(39, 122, 0, [ⲆⲆ.ⵠⲆᐃⵠΔᐃⵠ, ⲆⲆ.ⲆΔⵠⵠΔⵠΔ, ⲆⲆ.ⲆⲆΔᐃᐃΔᐃ], 1, 0, undefined, 260, 315, aa | Y, da);
        this.buttons[b++].view = B;
        this.buttons[b] = $v(115, 73, 0, [ⲆⲆ.ᐃⲆᐃᐃΔ, ⲆⲆ.ᐃⵠᐃⵠⵠ, ⲆⲆ.ⵠⲆⵠΔⵠ], 1, 0, function () {
            H(c);
        }, -320, 470, aa | Y, da);
        this.buttons[b++].view = B;
        ⵠⲆΔⵠⵠΔᐃΔΔ = b;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, undefined, -29, 205, aa | Y, da);
        this.buttons[b++].view = S;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, Og, -29, 300, aa | Y, da);
        this.buttons[b++].view = S;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, undefined, -29, 395, aa | Y, da);
        this.buttons[b++].view = S;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, undefined, 65, 205, aa | Y, da);
        this.buttons[b++].view = S;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, Oo, 65, 300, aa | Y, da);
        this.buttons[b++].view = S;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, Ga, 65, 395, aa | Y, da);
        this.buttons[b++].view = S;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, undefined, 159, 205, aa | Y, da);
        this.buttons[b++].view = S;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, Oo, 159, 300, aa | Y, da);
        this.buttons[b++].view = S;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, undefined, 159, 395, aa | Y, da);
        this.buttons[b++].view = S;
        this.buttons[b] = $v(39, 122, 0, [ⲆⲆ.ᐃⵠⲆΔⲆΔᐃ, ⲆⲆ.ⵠⲆⵠᐃᐃⵠᐃ, ⲆⲆ.ⲆⵠⵠᐃΔⲆᐃ], 1, 0, undefined, -61, 315, aa | Y, da);
        this.buttons[b++].view = S;
        this.buttons[b] = $v(39, 122, 0, [ⲆⲆ.ⵠⲆᐃⵠΔᐃⵠ, ⲆⲆ.ⲆΔⵠⵠΔⵠΔ, ⲆⲆ.ⲆⲆΔᐃᐃΔᐃ], 1, 0, undefined, 260, 315, aa | Y, da);
        this.buttons[b++].view = S;
        this.buttons[b] = $v(115, 73, 0, [ⲆⲆ.ᐃⲆᐃᐃΔ, ⲆⲆ.ᐃⵠᐃⵠⵠ, ⲆⲆ.ⵠⲆⵠΔⵠ], 1, 0, function () {
            H(c);
        }, -320, 470, aa | Y, da);
        this.buttons[b++].view = S;
        ΔᐃⵠⵠⲆΔᐃⲆΔ = b;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, undefined, -29, 205, aa | Y, da);
        this.buttons[b++].view = Q;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, undefined, -29, 300, aa | Y, da);
        this.buttons[b++].view = Q;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, Zk, -29, 395, aa | Y, da);
        this.buttons[b++].view = Q;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, Oo, 65, 205, aa | Y, da);
        this.buttons[b++].view = Q;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, tj, 65, 300, aa | Y, da);
        this.buttons[b++].view = Q;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, undefined, 65, 395, aa | Y, da);
        this.buttons[b++].view = Q;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, undefined, 159, 205, aa | Y, da);
        this.buttons[b++].view = Q;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, undefined, 159, 300, aa | Y, da);
        this.buttons[b++].view = Q;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, tj, 159, 395, aa | Y, da);
        this.buttons[b++].view = Q;
        this.buttons[b] = $v(39, 122, 0, [ⲆⲆ.ᐃⵠⲆΔⲆΔᐃ, ⲆⲆ.ⵠⲆⵠᐃᐃⵠᐃ, ⲆⲆ.ⲆⵠⵠᐃΔⲆᐃ], 1, 0, undefined, -61, 315, aa | Y, da);
        this.buttons[b++].view = Q;
        this.buttons[b] = $v(39, 122, 0, [ⲆⲆ.ⵠⲆᐃⵠΔᐃⵠ, ⲆⲆ.ⲆΔⵠⵠΔⵠΔ, ⲆⲆ.ⲆⲆΔᐃᐃΔᐃ], 1, 0, tj, 260, 315, aa | Y, da);
        this.buttons[b++].view = Q;
        this.buttons[b] = $v(115, 73, 0, [ⲆⲆ.ᐃⲆᐃᐃΔ, ⲆⲆ.ᐃⵠᐃⵠⵠ, ⲆⲆ.ⵠⲆⵠΔⵠ], 1, 0, function () {
            H(c);
        }, -320, 470, aa | Y, da);
        this.buttons[b++].view = Q;
        ⵠⲆΔΔᐃⵠᐃⲆΔ = b;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, Qh, -29, 205, aa | Y, da);
        this.buttons[b++].view = E;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, jj, -29, 300, aa | Y, da);
        this.buttons[b++].view = E;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, Qh, -29, 395, aa | Y, da);
        this.buttons[b++].view = E;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, undefined, 65, 205, aa | Y, da);
        this.buttons[b++].view = E;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, Ft, 65, 300, aa | Y, da);
        this.buttons[b++].view = E;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, undefined, 65, 395, aa | Y, da);
        this.buttons[b++].view = E;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, undefined, 159, 205, aa | Y, da);
        this.buttons[b++].view = E;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, undefined, 159, 300, aa | Y, da);
        this.buttons[b++].view = E;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, dg, 159, 395, aa | Y, da);
        this.buttons[b++].view = E;
        this.buttons[b] = $v(39, 122, 0, [ⲆⲆ.ᐃⵠⲆΔⲆΔᐃ, ⲆⲆ.ⵠⲆⵠᐃᐃⵠᐃ, ⲆⲆ.ⲆⵠⵠᐃΔⲆᐃ], 1, 0, undefined, -61, 315, aa | Y, da);
        this.buttons[b++].view = E;
        this.buttons[b] = $v(39, 122, 0, [ⲆⲆ.ⵠⲆᐃⵠΔᐃⵠ, ⲆⲆ.ⲆΔⵠⵠΔⵠΔ, ⲆⲆ.ⲆⲆΔᐃᐃΔᐃ], 1, 0, Js, 260, 315, aa | Y, da);
        this.buttons[b++].view = E;
        this.buttons[b] = $v(115, 73, 0, [ⲆⲆ.ᐃⲆᐃᐃΔ, ⲆⲆ.ᐃⵠᐃⵠⵠ, ⲆⲆ.ⵠⲆⵠΔⵠ], 1, 0, function () {
            H(c);
        }, -320, 470, aa | Y, da);
        this.buttons[b++].view = E;
        ⵠᐃΔᐃⲆΔΔᐃⲆ = b;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, undefined, -29, 205, aa | Y, da);
        this.buttons[b++].view = I;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, undefined, -29, 300, aa | Y, da);
        this.buttons[b++].view = I;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, Ga, -29, 395, aa | Y, da);
        this.buttons[b++].view = I;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, dg, 65, 205, aa | Y, da);
        this.buttons[b++].view = I;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, As, 65, 300, aa | Y, da);
        this.buttons[b++].view = I;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, Oo, 65, 395, aa | Y, da);
        this.buttons[b++].view = I;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, ns, 159, 205, aa | Y, da);
        this.buttons[b++].view = I;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, undefined, 159, 300, aa | Y, da);
        this.buttons[b++].view = I;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, undefined, 159, 395, aa | Y, da);
        this.buttons[b++].view = I;
        this.buttons[b] = $v(39, 122, 0, [ⲆⲆ.ᐃⵠⲆΔⲆΔᐃ, ⲆⲆ.ⵠⲆⵠᐃᐃⵠᐃ, ⲆⲆ.ⲆⵠⵠᐃΔⲆᐃ], 1, 0, undefined, -61, 315, aa | Y, da);
        this.buttons[b++].view = I;
        this.buttons[b] = $v(39, 122, 0, [ⲆⲆ.ⵠⲆᐃⵠΔᐃⵠ, ⲆⲆ.ⲆΔⵠⵠΔⵠΔ, ⲆⲆ.ⲆⲆΔᐃᐃΔᐃ], 1, 0, undefined, 260, 315, aa | Y, da);
        this.buttons[b++].view = I;
        this.buttons[b] = $v(115, 73, 0, [ⲆⲆ.ᐃⲆᐃᐃΔ, ⲆⲆ.ᐃⵠᐃⵠⵠ, ⲆⲆ.ⵠⲆⵠΔⵠ], 1, 0, function () {
            H(c);
        }, -320, 470, aa | Y, da);
        this.buttons[b++].view = I;
        ᐃⵠᐃⵠᐃᐃΔΔΔ = b;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, undefined, -29, 205, aa | Y, da);
        this.buttons[b++].view = D;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, dg, -29, 300, aa | Y, da);
        this.buttons[b++].view = D;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, Jl, -29, 395, aa | Y, da);
        this.buttons[b++].view = D;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, vj, 65, 205, aa | Y, da);
        this.buttons[b++].view = D;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, undefined, 65, 300, aa | Y, da);
        this.buttons[b++].view = D;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, undefined, 65, 395, aa | Y, da);
        this.buttons[b++].view = D;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, undefined, 159, 205, aa | Y, da);
        this.buttons[b++].view = D;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, vj, 159, 300, aa | Y, da);
        this.buttons[b++].view = D;
        this.buttons[b] = $v(178, 182, 0, [ⲆⲆ.ᐃΔᐃⲆ, ⲆⲆ.ⵠᐃᐃᐃ, ⲆⲆ.ᐃΔΔᐃ], 1, 0, Da, 159, 395, aa | Y, da);
        this.buttons[b++].view = D;
        this.buttons[b] = $v(39, 122, 0, [ⲆⲆ.ᐃⵠⲆΔⲆΔᐃ, ⲆⲆ.ⵠⲆⵠᐃᐃⵠᐃ, ⲆⲆ.ⲆⵠⵠᐃΔⲆᐃ], 1, 0, undefined, -61, 315, aa | Y, da);
        this.buttons[b++].view = D;
        this.buttons[b] = $v(39, 122, 0, [ⲆⲆ.ⵠⲆᐃⵠΔᐃⵠ, ⲆⲆ.ⲆΔⵠⵠΔⵠΔ, ⲆⲆ.ⲆⲆΔᐃᐃΔᐃ], 1, 0, Og, 260, 315, aa | Y, da);
        this.buttons[b++].view = D;
        this.buttons[b] = $v(115, 73, 0, [ⲆⲆ.ᐃⲆᐃᐃΔ, ⲆⲆ.ᐃⵠᐃⵠⵠ, ⲆⲆ.ⵠⲆⵠΔⵠ], 1, 0, function () {
            H(c);
        }, -320, 470, aa | Y, da);
        this.buttons[b++].view = D;
        this.buttons[b] = $v(260, 260, 0, [ⲆⲆ.ΔⵠΔΔⲆΔⲆ, ⲆⲆ.ⵠᐃⲆⵠΔⲆⵠ, ⲆⲆ.ⵠΔΔⲆΔⲆⵠ], 1, 0, function () {
            if (C.ⲆΔⵠⵠⲆ()) {
                Kf(3, 50);
            } else {
                H(m);
            }
        }, -65, 197, aa | Y, da);
        this.buttons[b++].view = x;
        this.buttons[b] = $v(115, 73, 0, [ⲆⲆ.ᐃⲆᐃᐃΔ, ⲆⲆ.ᐃⵠᐃⵠⵠ, ⲆⲆ.ⵠⲆⵠΔⵠ], 1, 0, function () {
            H(p);
        }, 309, 180, aa | Y, da);
        this.buttons[b++].view = x;
        this.buttons[b] = $v(260, 260, 0, [ⲆⲆ.ⵠⲆᐃⵠⲆⲆⲆ, ⲆⲆ.ⲆⵠᐃⲆⵠΔΔ, ⲆⲆ.ΔⵠⵠⵠⲆⲆⵠ], 1, 0, function () {
            if (C.ⲆΔⵠⵠⲆ()) {
                Kf(0, 100);
            } else {
                H(m);
            }
        }, -65, 197, aa | Y, da);
        this.buttons[b++].view = T;
        this.buttons[b] = $v(115, 73, 0, [ⲆⲆ.ᐃⲆᐃᐃΔ, ⲆⲆ.ᐃⵠᐃⵠⵠ, ⲆⲆ.ⵠⲆⵠΔⵠ], 1, 0, function () {
            H(p);
        }, 309, 180, aa | Y, da);
        this.buttons[b++].view = T;
        this.buttons[b] = $v(260, 260, 0, [ⲆⲆ.ᐃⵠⲆⵠⲆⵠⵠ, ⲆⲆ.ΔᐃᐃΔΔΔᐃ, ⲆⲆ.ⲆᐃⲆⲆΔⵠⲆ], 1, 0, function () {
            if (C.ⲆΔⵠⵠⲆ()) {
                Kf(4, 150);
            } else {
                H(m);
            }
        }, -65, 197, aa | Y, da);
        this.buttons[b++].view = A;
        this.buttons[b] = $v(115, 73, 0, [ⲆⲆ.ᐃⲆᐃᐃΔ, ⲆⲆ.ᐃⵠᐃⵠⵠ, ⲆⲆ.ⵠⲆⵠΔⵠ], 1, 0, function () {
            H(p);
        }, 309, 180, aa | Y, da);
        this.buttons[b++].view = A;
        this.buttons[b] = $v(260, 260, 0, [ⲆⲆ.ΔⲆⵠⲆΔᐃⵠ, ⲆⲆ.ⲆⵠⲆΔᐃⵠΔ, ⲆⲆ.ΔᐃΔⲆᐃⲆⲆ], 1, 0, function () {
            if (C.ⲆΔⵠⵠⲆ()) {
                Kf(1, 300);
            } else {
                H(m);
            }
        }, -65, 197, aa | Y, da);
        this.buttons[b++].view = J;
        this.buttons[b] = $v(115, 73, 0, [ⲆⲆ.ᐃⲆᐃᐃΔ, ⲆⲆ.ᐃⵠᐃⵠⵠ, ⲆⲆ.ⵠⲆⵠΔⵠ], 1, 0, function () {
            H(p);
        }, 309, 180, aa | Y, da);
        this.buttons[b++].view = J;
        this.buttons[b] = $v(260, 260, 0, [ⲆⲆ.ⵠΔⲆⲆΔⵠⵠ, ⲆⲆ.ⵠⲆΔΔⵠⲆΔ, ⲆⲆ.ᐃᐃΔᐃᐃⵠⵠ], 1, 0, function () {
            if (C.ⲆΔⵠⵠⲆ()) {
                Kf(2, 600);
            } else {
                H(m);
            }
        }, -65, 197, aa | Y, da);
        this.buttons[b++].view = k;
        this.buttons[b] = $v(115, 73, 0, [ⲆⲆ.ᐃⲆᐃᐃΔ, ⲆⲆ.ᐃⵠᐃⵠⵠ, ⲆⲆ.ⵠⲆⵠΔⵠ], 1, 0, function () {
            H(p);
        }, 309, 180, aa | Y, da);
        this.buttons[b++].view = k;
        this.buttons[b] = $v(260, 260, 0, [ⲆⲆ.ΔⲆⵠⲆΔᐃⵠ, ⲆⲆ.ⲆⵠⲆΔᐃⵠΔ, ⲆⲆ.ΔᐃΔⲆᐃⲆⲆ], 1, 0, function () {
            if (C.ⲆΔⵠⵠⲆ()) {
                Kf(5, 300);
            } else {
                H(m);
            }
        }, -65, 197, aa | Y, da);
        this.buttons[b++].view = M;
        this.buttons[b] = $v(115, 73, 0, [ⲆⲆ.ᐃⲆᐃᐃΔ, ⲆⲆ.ᐃⵠᐃⵠⵠ, ⲆⲆ.ⵠⲆⵠΔⵠ], 1, 0, function () {
            H(p);
        }, 309, 180, aa | Y, da);
        this.buttons[b++].view = M;
        var ra = b;
        this.buttons[b] = $v(46, 51, 0, [ⲆⲆ.ⵠΔᐃⵠⵠᐃΔ, ⲆⲆ.ⲆⵠᐃΔⲆΔᐃ, ⲆⲆ.ⲆΔⵠᐃΔⵠᐃ], 1, 0, function () {
            qa(undefined, 0);
        }, -305, 132, aa | Y, da);
        this.buttons[b++].view = d;
        var sa = b;
        this.buttons[b] = $v(46, 51, 0, [ⲆⲆ.ⵠⵠⵠᐃΔⵠᐃ, ⲆⲆ.ⲆⵠⲆⲆᐃΔⵠ, ⲆⲆ.Δⵠᐃᐃⵠⵠᐃ], 1, 0, function () {
            qa(uj, 1);
        }, -273, 132, aa | Y, da);
        this.buttons[b++].view = d;
        var ta = b;
        this.buttons[b] = $v(46, 51, 0, [ⲆⲆ.ᐃᐃᐃΔΔᐃⲆ, ⲆⲆ.ⵠᐃⵠⲆⵠⵠΔ, ⲆⲆ.ΔΔⲆⵠᐃΔⲆ], 1, 0, function () {
            qa(undefined, 2);
        }, -241, 132, aa | Y, da);
        this.buttons[b++].view = d;
        var ua = b;
        this.buttons[b] = $v(46, 51, 0, [ⲆⲆ.ᐃⲆⲆΔⲆΔⲆ, ⲆⲆ.ᐃⵠΔΔⲆΔΔ, ⲆⲆ.ΔᐃⵠⵠⲆⲆⵠ], 1, 0, function () {
            qa(undefined, 3);
        }, -305, 165, aa | Y, da);
        this.buttons[b++].view = d;
        var va = b;
        this.buttons[b] = $v(46, 51, 0, [ⲆⲆ.ᐃⲆᐃᐃⵠᐃⵠ, ⲆⲆ.ⲆⲆⵠⲆᐃΔⵠ, ⲆⲆ.ⲆΔΔⲆⲆⵠᐃ], 1, 0, function () {
            qa(undefined, 4);
        }, -273, 165, aa | Y, da);
        this.buttons[b++].view = d;
        var wa = b;
        this.buttons[b] = $v(46, 51, 0, [ⲆⲆ.ᐃⵠᐃⵠΔΔⵠ, ⲆⲆ.ⵠᐃᐃᐃⵠⲆΔ, ⲆⲆ.ᐃⲆΔΔΔⲆΔ], 1, 0, function () {
            qa(dg, 5);
        }, -241, 165, aa | Y, da);
        this.buttons[b++].view = d;
        var xa = b;
        this.buttons[b] = $v(460, 73, 0, [ⲆⲆ.ⵠᐃᐃᐃᐃⲆⲆ, ⲆⲆ.ⲆᐃⵠᐃⵠⲆᐃ, ⲆⲆ.ᐃⵠⵠᐃⲆᐃᐃ], 1, 0, function () {
            qa(-1);
        }, -180, 170, aa | Y, da);
        this.buttons[b++].view = d;
        var ya = b;
        this.buttons[b] = $v(222, 68, 0, [ⲆⲆ.ΔΔΔⵠᐃᐃᐃ, ⲆⲆ.ⵠⵠΔΔⵠⵠᐃ, ⲆⲆ.ᐃΔⵠⵠΔⲆᐃ], 1, 0, function () {
            qa(qw.ⲆⵠΔⲆⵠ);
        }, -180, 215, aa | Y, da);
        this.buttons[b++].view = d;
        var za = b;
        this.buttons[b] = $v(222, 68, 0, [ⲆⲆ.ⲆⲆᐃΔᐃⵠⲆ, ⲆⲆ.ⲆᐃΔᐃΔⵠⲆ, ⲆⲆ.ⵠΔⲆⲆⵠⵠᐃ], 1, 0, function () {
            qa(qw.ⵠΔⵠⲆᐃ);
        }, -180, 260, aa | Y, da);
        this.buttons[b++].view = d;
        var Aa = b;
        this.buttons[b] = $v(222, 68, 0, [ⲆⲆ.ᐃᐃᐃᐃᐃⲆⵠ, ⲆⲆ.ΔⲆⵠᐃⵠΔΔ, ⲆⲆ.ⲆⵠΔᐃⲆⲆⵠ], 1, 0, function () {
            qa(qw.ΔⲆᐃⵠⵠ);
        }, -60, 215, aa | Y, da);
        this.buttons[b++].view = d;
        var Ba = b;
        this.buttons[b] = $v(222, 68, 0, [ⲆⲆ.ⲆⵠΔⲆⲆⲆⵠ, ⲆⲆ.ⲆᐃᐃⲆΔⲆⲆ, ⲆⲆ.ⵠΔᐃᐃᐃⲆⲆ], 1, 0, function () {
            qa(qw.ⵠΔᐃΔⵠ);
        }, -60, 260, aa | Y, da);
        this.buttons[b++].view = d;
        this.ⲆⲆᐃᐃⲆⲆⵠ = b;
        this.buttons[b] = $v(143, 66, 0, [ⲆⲆ.ᐃΔⲆΔΔⲆΔ, ⲆⲆ.ΔΔⲆΔᐃΔΔ, ⲆⲆ.ΔⵠⵠᐃΔⲆᐃ], 1, 0, function () {
            lx(Ft, mf.ⲆⲆᐃᐃⲆⲆⵠ);
        }, -298, 110, aa | Y, da);
        this.buttons[b++].view = f;
        this.ⲆⲆⵠᐃΔᐃᐃ = b;
        this.buttons[b] = $v(104, 66, 0, [ⲆⲆ.ΔΔᐃⲆⵠⵠΔ, ⲆⲆ.ⵠΔⵠΔⵠᐃΔ, ⲆⲆ.ⲆᐃⵠⵠⲆⲆⵠ], 1, 0, function () {
            lx(Da, mf.ⲆⲆⵠᐃΔᐃᐃ);
        }, -223, 110, aa | Y, da);
        this.buttons[b++].view = f;
        this.ⵠΔᐃᐃΔᐃᐃ = b;
        this.buttons[b] = $v(110, 66, 0, [ⲆⲆ.ΔⵠⵠΔⵠΔᐃ, ⲆⲆ.ΔⵠΔⲆⲆᐃᐃ, ⲆⲆ.ΔΔΔᐃⵠⲆⲆ], 1, 0, function () {
            lx(Js, mf.ⵠΔᐃᐃΔᐃᐃ);
        }, -168, 110, aa | Y, da);
        this.buttons[b++].view = f;
        this.ΔΔⵠⲆⲆΔΔ = b;
        this.buttons[b] = $v(88, 66, 0, [ⲆⲆ.ᐃⵠⲆⲆⲆΔⵠ, ⲆⲆ.ΔᐃΔΔⵠΔⵠ, ⲆⲆ.ᐃⵠΔᐃⵠⲆⵠ], 1, 0, function () {
            lx(undefined, mf.ΔΔⵠⲆⲆΔΔ);
        }, -110, 110, aa | Y, da);
        this.buttons[b++].view = f;
        this.ΔⲆΔⵠΔᐃⵠ = b;
        this.buttons[b] = $v(88, 66, 0, [ⲆⲆ.ᐃⵠⲆⵠΔⲆⵠ, ⲆⲆ.ΔⵠᐃΔΔΔⵠ, ⲆⲆ.ⲆⲆⵠⵠⲆᐃⵠ], 1, 0, function () {
            lx(tj, mf.ΔⲆΔⵠΔᐃⵠ);
        }, -63, 110, aa | Y, da);
        this.buttons[b++].view = f;
        this.buttons[b] = $v(86, 44, 0, [ⲆⲆ.ⲆᐃⲆΔΔⲆΔ, ⲆⲆ.ΔΔⲆᐃΔⲆΔ, ⲆⲆ.ⵠΔⵠᐃⵠⵠⵠ], 1, 0, function () {
            bj.open("./terms.html", "_blank");
        }, 349, 290, aa | Y, da);
        this.buttons[b++].view = p;
        var Ca = new e(Δᐃⵠᐃ.ΔᐃΔΔᐃ, ⵠⵠΔΔⵠⵠΔ, function (a) {
            mf.ᐃᐃᐃⵠ = a;
            if (mf.unlock.ᐃᐃᐃⵠ[a] === 1) {
                ⲆΔⲆⲆ.set("starve_skin", "" + a, {
                    expires: 30
                });
            }
        }, this.ᐃᐃᐃⵠ, this.unlock.ᐃᐃᐃⵠ);
        var Ea = new e(Δᐃⵠᐃ.ᐃΔⲆΔ, ⵠⲆΔΔᐃⵠᐃⲆΔ, function (a) {
            mf.ⲆⲆᐃⵠⲆ = a;
            if (mf.unlock.ⲆⲆᐃⵠⲆ[a] === 1) {
                ⲆΔⲆⲆ.set("starve_bag", "" + a, {
                    expires: 30
                });
            }
        }, this.ⲆⲆᐃⵠⲆ, this.unlock.ⲆⲆᐃⵠⲆ);
        var Fa = new e(Δᐃⵠᐃ.ⲆⵠᐃΔⲆ, ⵠᐃΔᐃⲆΔΔᐃⲆ, function (a) {
            mf.ΔⵠΔΔⵠ = a;
            if (mf.unlock.ΔⵠΔΔⵠ[a] === 1) {
                ⲆΔⲆⲆ.set("starve_book", "" + a, {
                    expires: 30
                });
            }
        }, this.ΔⵠΔΔⵠ, this.unlock.ΔⵠΔΔⵠ);
        var Ha = new e(Δᐃⵠᐃ.ΔᐃⲆⲆΔ, ᐃⵠᐃⵠᐃᐃΔΔΔ, function (a) {
            mf.Ⲇᐃⵠᐃᐃ = a;
            if (mf.unlock.Ⲇᐃⵠᐃᐃ[a] === 1) {
                ⲆΔⲆⲆ.set("starve_dead", "" + a, {
                    expires: 30
                });
            }
        }, this.Ⲇᐃⵠᐃᐃ, this.unlock.Ⲇᐃⵠᐃᐃ);
        var Ia = new e(Δᐃⵠᐃ.ΔᐃⲆⲆΔ, ΔᐃⵠⵠⲆΔᐃⲆΔ, function (a) {
            mf.ΔⵠᐃΔⵠ = a;
            if (mf.unlock.ΔⵠᐃΔⵠ[a] === 1) {
                ⲆΔⲆⲆ.set("starve_crate", "" + a, {
                    expires: 30
                });
            }
        }, this.ΔⵠᐃΔⵠ, this.unlock.ΔⵠᐃΔⵠ);
        var Ja = new e(Δᐃⵠᐃ.ΔΔᐃΔⲆ, ⵠⲆΔⵠⵠΔᐃΔΔ, function (a) {
            mf.ΔᐃᐃⲆⲆ = a;
            if (mf.unlock.ΔᐃᐃⲆⲆ[a] === 1) {
                ⲆΔⲆⲆ.set("starve_accessory", "" + a, {
                    expires: 30
                });
            }
        }, this.ΔᐃᐃⲆⲆ, this.unlock.ΔᐃᐃⲆⲆ);
        this.ⲆᐃⲆⲆΔⲆⵠ = function (a) {
            Pf.ΔⲆⲆᐃ = aw(C.Ⲇᐃ, a);
            for (var b = 0; b < C.buttons.length; b++) {
                if (ea === C.buttons[b].info.active) {
                    C.buttons[b].ⲆΔᐃⵠ(C.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Uv);
                }
            }
        };
        this.ⲆⵠⲆⵠΔΔⲆ = function (a) {
            Pf.ΔⲆⲆᐃ = aw(C.Ⲇᐃ, a);
            for (var b = 0; b < C.buttons.length; b++) {
                var c = C.buttons[b];
                if (ea === c.info.active && c.ⲆΔᐃⵠ(C.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Vv)) {
                    c.info.callback();
                    return;
                }
            }
        };
        this.ⲆΔᐃⵠᐃⲆⲆ = ql;
        this.ᐃⵠΔⵠᐃⲆᐃ = function (a) {
            Pf.ΔⲆⲆᐃ = aw(C.Ⲇᐃ, a);
            var b = false;
            for (var c = 0; c < C.buttons.length; c++) {
                if (ea === C.buttons[c].info.active) {
                    b |= C.buttons[c].ⲆΔᐃⵠ(C.Ⲇᐃ, Pf.ΔⲆⲆᐃ, Tv);
                }
            }
            if (C.ⲆΔᐃⵠᐃⲆⲆ !== b) {
                C.ⲆΔᐃⵠᐃⲆⲆ = b;
                i.style.cursor = b ? C.ⵠΔⵠΔⵠⲆΔ : C.ⵠᐃΔⵠΔⲆⲆ;
            }
        };
        this.ⲆⲆⲆⲆⲆᐃⲆ = function () {
            bj.addEventListener("mousedown", this.ⲆᐃⲆⲆΔⲆⵠ, false);
            bj.addEventListener("mouseup", this.ⲆⵠⲆⵠΔΔⲆ, false);
            bj.addEventListener("mousemove", this.ᐃⵠΔⵠᐃⲆᐃ, false);
        };
        this.ⲆΔⲆⲆΔΔⲆ = function () {
            bj.removeEventListener("mousedown", this.ⲆᐃⲆⲆΔⲆⵠ, Ah);
            bj.removeEventListener("mouseup", this.ⲆⵠⲆⵠΔΔⲆ, false);
            bj.removeEventListener("mousemove", this.ᐃⵠΔⵠᐃⲆᐃ, false);
        };
    }
    function Tw(c, d, e, f, i, j) {
        Wj(Tu, c, d, e, f, i, j);
        const a = xk(Cc[0], Cc[1], Cc[2], Cc[3], Cc[4], Cc[5]);
        m = Cc[0];
        n = Cc[1];
        o = Cc[2];
        p = Cc[3];
        q = Cc[4];
        ci(Tu, m, n, o, p, q);
        const k = ((172 + (Rw(Cc[0], Cc[1], Cc[2], Cc[3]) ^ Rw(Cc[4], Cc[0], Cc[1], Cc[2]))) * 48271 + 0) % 2147483647;
        var m;
        var n;
        var o;
        var p;
        var q;
        return (24 << ((a ^ k) >> 24 & 255)) + (8 << ((a ^ k) & 255)) + (0 << ((a ^ k) >> 16 & 255)) + (16 << ((a ^ k) >> 8 & 255));
    }
    function Uw(b, c, d, e) {
        const f = (d | 65069) & ~(d & 65069);
        const g = ~(e & 2450) & (e | 2450);
        const a = Ak((47128 + b) % 65524, c ^ 18642);
        km(f, g);
        return a ^ 36202;
    }
    function Vw(b, c, d, e, f) {
        const g = (b + 42869) % 65363;
        const a = ~(c & 35536) & (c | 35536);
        const i = (d + 29497) % 65366;
        const j = f ^ 54380;
        return ((30183 + (ir(g, a, i, e ^ 41139) ^ Fm(j, g, a, i))) * 2147483629 + 2147483587) % 2147483647;
    }
    (function () {
        function b() {
            this.ⵠΔⵠⲆⲆ();
        }
        b.prototype = {
            ⵠΔⵠⲆⲆ: function () {
                var a = this || j;
                a.ⲆᐃⲆᐃⲆⵠΔ = 1000;
                a.ᐃᐃⵠΔⲆΔⲆ = {};
                a.ⲆⵠⲆⲆΔ = [];
                a.ⵠⵠᐃΔΔ = false;
                a.ᐃⵠᐃⲆΔ = 1;
                a.ΔᐃⲆⲆᐃΔᐃ = "canplaythrough";
                a.ᐃΔΔᐃᐃ = typeof bj != "undefined" && bj.navigator ? bj.navigator : null;
                a.ᐃᐃᐃⵠⵠᐃⵠ = null;
                a.ΔΔΔⲆΔᐃⲆ = false;
                a.ᐃᐃΔⵠΔ = true;
                a.ⵠΔΔⵠΔᐃΔ = true;
                a.ᐃ = null;
                a.ⲆⵠⲆΔⵠⲆⲆ = true;
                a.ᐃᐃΔΔⲆⲆᐃ();
                return a;
            },
            volume: function (b) {
                var c = this || j;
                b = parseFloat(b);
                if (!c.ᐃ) {
                    i();
                }
                if (b !== undefined && b >= 0 && b <= 1) {
                    c.ᐃⵠᐃⲆΔ = b;
                    if (c.ⵠⵠᐃΔΔ) {
                        return c;
                    }
                    if (c.ᐃᐃΔⵠΔ) {
                        c.ᐃᐃᐃⵠⵠᐃⵠ.gain.value = b;
                    }
                    for (var d = 0; d < c.ⲆⵠⲆⲆΔ.length; d++) {
                        if (!c.ⲆⵠⲆⲆΔ[d].ⲆᐃⵠΔᐃ) {
                            for (var f = c.ⲆⵠⲆⲆΔ[d].ᐃⲆⲆⵠΔ(), g = 0; g < f.length; g++) {
                                var h = c.ⲆⵠⲆⲆΔ[d].ⵠⵠᐃᐃᐃ(f[g]);
                                if (h && h.ΔΔΔⵠ) {
                                    h.ΔΔΔⵠ.volume = h.ᐃⵠᐃⲆΔ * b;
                                }
                            }
                        }
                    }
                    return c;
                }
                return c.ᐃⵠᐃⲆΔ;
            },
            ⲆⲆΔⵠΔⲆⲆ: function (b) {
                var c = this || j;
                if (!c.ᐃ) {
                    i();
                }
                c.ⵠⵠᐃΔΔ = b;
                if (c.ᐃᐃΔⵠΔ) {
                    c.ᐃᐃᐃⵠⵠᐃⵠ.gain.value = b ? 0 : c.ᐃⵠᐃⲆΔ;
                }
                for (var d = 0; d < c.ⲆⵠⲆⲆΔ.length; d++) {
                    if (!c.ⲆⵠⲆⲆΔ[d].ⲆᐃⵠΔᐃ) {
                        for (var e = c.ⲆⵠⲆⲆΔ[d].ᐃⲆⲆⵠΔ(), f = 0; f < e.length; f++) {
                            var g = c.ⲆⵠⲆⲆΔ[d].ⵠⵠᐃᐃᐃ(e[f]);
                            if (g && g.ΔΔΔⵠ) {
                                g.ΔΔΔⵠ.muted = !!b || g.ⵠⵠᐃΔΔ;
                            }
                        }
                    }
                }
                return c;
            },
            ᐃᐃΔΔᐃᐃᐃ: function () {
                var a = this || j;
                for (var b = a.ⲆⵠⲆⲆΔ.length - 1; b >= 0; b--) {
                    a.ⲆⵠⲆⲆΔ[b].ᐃᐃΔΔᐃᐃᐃ();
                }
                if (a.ᐃᐃΔⵠΔ && a.ᐃ && a.ᐃ.close !== undefined) {
                    a.ᐃ.close();
                    a.ᐃ = null;
                    i();
                }
                return a;
            },
            ⵠⵠΔⲆⵠΔⵠΔⲆ: function (a) {
                return (this || j).ᐃᐃⵠΔⲆΔⲆ[a.replace(/^x-/, "")];
            },
            ᐃᐃΔΔⲆⲆᐃ: function () {
                var a = this || j;
                a.state = a.ᐃ && a.ᐃ.state || "running";
                a.ⵠᐃⵠⲆᐃᐃΔ();
                if (!a.ᐃᐃΔⵠΔ) {
                    if (typeof Audio != "undefined") {
                        try {
                            if (new Audio().oncanplaythrough === undefined) {
                                a.ΔᐃⲆⲆᐃΔᐃ = "canplay";
                            }
                        } catch (b) {
                            a.ΔΔΔⲆΔᐃⲆ = true;
                        }
                    } else {
                        a.ΔΔΔⲆΔᐃⲆ = true;
                    }
                }
                try {
                    if (new Audio().muted) {
                        a.ΔΔΔⲆΔᐃⲆ = true;
                    }
                } catch (a) { }
                if (!a.ΔΔΔⲆΔᐃⲆ) {
                    a.ᐃᐃᐃⲆⵠⵠⲆΔᐃ();
                }
                return a;
            },
            ᐃᐃᐃⲆⵠⵠⲆΔᐃ: function () {
                var b = this || j;
                var c = null;
                try {
                    c = typeof Audio != "undefined" ? new Audio() : null;
                } catch (a) {
                    return b;
                }
                if (!c || typeof c.canPlayType != "function") {
                    return b;
                }
                var d = c.canPlayType("audio/mpeg;").replace(/^no$/, "");
                var e = b.ᐃΔΔᐃᐃ && b.ᐃΔΔᐃᐃ.userAgent.match(/OPR\/([0-6].)/g);
                var f = e && parseInt(e[0].split("/")[1], 10) < 33;
                b.ᐃᐃⵠΔⲆΔⲆ = {
                    ᐃⲆᐃⵠΔΔᐃⵠⵠ: !f && (!!d || !!c.canPlayType("audio/mp3;").replace(/^no$/, "")),
                    ᐃΔⵠΔⵠⲆᐃΔⵠ: !!d,
                    ΔⵠⵠⵠΔΔΔⲆᐃ: !!c.canPlayType("audio/ogg; codecs=\"opus\"").replace(/^no$/, ""),
                    ᐃⵠΔΔΔᐃⲆΔⲆ: !!c.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ΔⵠΔⲆΔΔᐃΔⲆ: !!c.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ΔΔⲆⵠΔⲆᐃⵠⵠ: !!c.canPlayType("audio/wav; codecs=\"1\"").replace(/^no$/, ""),
                    ΔᐃΔⵠⵠᐃᐃⲆΔ: !!c.canPlayType("audio/aac;").replace(/^no$/, ""),
                    ⲆⲆⲆⵠⵠΔΔΔⲆ: !!c.canPlayType("audio/x-caf;").replace(/^no$/, ""),
                    ⲆᐃⲆⵠΔΔᐃⵠⲆ: !!(c.canPlayType("audio/x-m4a;") || c.canPlayType("audio/m4a;") || c.canPlayType("audio/aac;")).replace(/^no$/, ""),
                    ⵠⲆᐃⲆΔⵠⵠⲆⵠ: !!(c.canPlayType("audio/x-mp4;") || c.canPlayType("audio/mp4;") || c.canPlayType("audio/aac;")).replace(/^no$/, ""),
                    ⵠⵠⲆⵠᐃΔᐃⲆΔ: !!c.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ⵠⲆⵠᐃⵠⲆᐃⵠⵠ: !!c.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ᐃᐃΔⵠⲆᐃΔΔΔ: !!c.canPlayType("audio/mp4; codecs=\"ec-3\"").replace(/^no$/, ""),
                    ΔΔⵠⲆΔⲆⲆⵠΔ: !!(c.canPlayType("audio/x-flac;") || c.canPlayType("audio/flac;")).replace(/^no$/, "")
                };
                return b;
            },
            ⲆᐃΔⲆᐃⵠⵠᐃⲆ: function () {
                var b = this || j;
                var a = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(b.ᐃΔΔᐃᐃ && b.ᐃΔΔᐃᐃ.userAgent);
                var c = !!("ontouchend" in bj) || !!b.ᐃΔΔᐃᐃ && b.ᐃΔΔᐃᐃ.maxTouchPoints > 0 || !!b.ᐃΔΔᐃᐃ && b.ᐃΔΔᐃᐃ.ᐃᐃⵠᐃⵠⲆᐃᐃᐃ > 0;
                if (!b.ᐃⲆⵠⲆⵠⲆᐃ && b.ᐃ && (a || c)) {
                    b.ᐃⲆⵠⲆⵠⲆᐃ = false;
                    if (!b.ⵠⲆⵠⲆᐃⲆⲆⲆᐃ && b.ᐃ.sampleRate !== 44100) {
                        b.ⵠⲆⵠⲆᐃⲆⲆⲆᐃ = true;
                        b.ᐃᐃΔΔᐃᐃᐃ();
                    }
                    b.ᐃⵠⲆⲆᐃΔᐃ = b.ᐃ.createBuffer(1, 1, 22050);
                    function c() {
                        j.ⲆᐃΔⵠΔⲆⲆ();
                        var a = b.ᐃ.createBufferSource();
                        a.buffer = b.ᐃⵠⲆⲆᐃΔᐃ;
                        a.connect(b.ᐃ.destination);
                        if (a.start === undefined) {
                            a.ᐃΔⵠⲆⵠᐃΔⵠΔ(0);
                        } else {
                            a.start(0);
                        }
                        if (typeof b.ᐃ.resume == "function") {
                            b.ᐃ.resume();
                        }
                        a.onended = function () {
                            a.disconnect(0);
                            b.ᐃⲆⵠⲆⵠⲆᐃ = true;
                            b.ⲆⵠⲆΔⵠⲆⲆ = false;
                            document.removeEventListener("touchend", c, true);
                        };
                    }
                    document.addEventListener("touchend", c, true);
                    return b;
                }
            },
            ⵠᐃⵠⲆᐃᐃΔ: function () {
                var a = this;
                if (a.ⵠΔΔⵠΔᐃΔ && a.ᐃ && a.ᐃ.suspend !== undefined && j.ᐃᐃΔⵠΔ) {
                    for (var b = 0; b < a.ⲆⵠⲆⲆΔ.length; b++) {
                        if (a.ⲆⵠⲆⲆΔ[b].ⲆᐃⵠΔᐃ) {
                            for (var c = 0; c < a.ⲆⵠⲆⲆΔ[b].ⲆΔᐃⲆΔ.length; c++) {
                                if (!a.ⲆⵠⲆⲆΔ[b].ⲆΔᐃⲆΔ[c].ⲆⲆⵠⲆΔ) {
                                    return a;
                                }
                            }
                        }
                    }
                    if (a.ⲆⵠΔⵠᐃⵠΔ) {
                        clearTimeout(a.ⲆⵠΔⵠᐃⵠΔ);
                    }
                    a.ⲆⵠΔⵠᐃⵠΔ = setTimeout(function () {
                        if (a.ⵠΔΔⵠΔᐃΔ) {
                            a.ⲆⵠΔⵠᐃⵠΔ = null;
                            a.state = "suspending";
                            a.ᐃ.suspend().then(function () {
                                a.state = "suspended";
                                if (a.ⲆΔⵠΔⵠᐃⲆ) {
                                    delete a.ⲆΔⵠΔⵠᐃⲆ;
                                    a.ⲆᐃΔⵠΔⲆⲆ();
                                }
                            });
                        }
                    }, 30000);
                    return a;
                }
            },
            ⲆᐃΔⵠΔⲆⲆ: function () {
                var a = this;
                if (a.ᐃ && a.ᐃ.resume !== undefined && j.ᐃᐃΔⵠΔ) {
                    if (a.state === "running" && a.ⲆⵠΔⵠᐃⵠΔ) {
                        clearTimeout(a.ⲆⵠΔⵠᐃⵠΔ);
                        a.ⲆⵠΔⵠᐃⵠΔ = null;
                    } else if (a.state === "suspended") {
                        a.ᐃ.resume().then(function () {
                            a.state = "running";
                            for (var b = 0; b < a.ⲆⵠⲆⲆΔ.length; b++) {
                                a.ⲆⵠⲆⲆΔ[b].ⲆΔΔᐃᐃ("resume");
                            }
                        });
                        if (a.ⲆⵠΔⵠᐃⵠΔ) {
                            clearTimeout(a.ⲆⵠΔⵠᐃⵠΔ);
                            a.ⲆⵠΔⵠᐃⵠΔ = null;
                        }
                    } else if (a.state === "suspending") {
                        a.ⲆΔⵠΔⵠᐃⲆ = true;
                    }
                    return a;
                }
            }
        };
        var j = new b();
        function c(a) {
            if (a.src && a.src.length !== 0) {
                this.ⵠΔⵠⲆⲆ(a);
            } else {
                console.error(undefined);
            }
        }
        c.prototype = {
            ⵠΔⵠⲆⲆ: function (a) {
                var b = this;
                if (!j.ᐃ) {
                    i();
                }
                b.ᐃⵠⲆⵠᐃⲆⲆⵠΔ = a.autoplay || false;
                b.ᐃΔᐃⲆⲆΔⵠ = typeof a.ⲆᐃΔΔᐃᐃⲆ != "string" ? a.ⲆᐃΔΔᐃᐃⲆ : [a.ⲆᐃΔΔᐃᐃⲆ];
                b.ΔⲆⲆΔᐃΔΔ = a.ⵠⵠΔΔⲆᐃΔΔΔ || false;
                b.ⵠⵠᐃΔΔ = a.ⲆⲆΔⵠΔⲆⲆ || false;
                b.ⲆΔᐃᐃᐃ = a.loop || false;
                b.ⵠᐃⵠᐃⵠΔᐃⲆⵠ = a.ΔⵠᐃⲆΔᐃΔΔⲆ || 5;
                b.ᐃᐃⲆⵠⲆΔⵠⲆᐃ = typeof a.preload != "boolean" || a.preload;
                b.ΔⲆⵠᐃⵠ = a.rate || 1;
                b.ᐃⲆΔΔⵠ = a.ᐃΔ || {};
                b.ⵠⲆⵠⵠᐃ = typeof a.src != "string" ? a.src : [a.src];
                b.ᐃⵠᐃⲆΔ = a.volume !== undefined ? a.volume : 1;
                b.ⲆΔΔᐃⵠΔΔ = 0;
                b.ⲆⲆⲆᐃⵠ = "unloaded";
                b.ⲆΔᐃⲆΔ = [];
                b.ΔⵠᐃᐃⲆΔⵠ = {};
                b.ⵠⵠⲆⲆⵠ = [];
                b.ⲆᐃΔⵠᐃⵠᐃⵠᐃ = a.onend ? [{
                    ΔΔⵠᐃⲆ: a.onend
                }] : [];
                b.ᐃⲆᐃⲆΔΔⲆⲆΔ = a.onfade ? [{
                    ΔΔⵠᐃⲆ: a.onfade
                }] : [];
                b.ⲆⵠΔΔⵠᐃΔⵠΔ = a.onload ? [{
                    ΔΔⵠᐃⲆ: a.onload
                }] : [];
                b.ⲆⲆΔΔⵠᐃΔⵠΔ = a.ⲆⲆⵠⲆⵠᐃⵠΔⵠ ? [{
                    ΔΔⵠᐃⲆ: a.ⲆⲆⵠⲆⵠᐃⵠΔⵠ
                }] : [];
                b.ⲆΔᐃⵠᐃΔΔᐃΔ = a.onpause ? [{
                    ΔΔⵠᐃⲆ: a.onpause
                }] : [];
                b.ⲆΔⵠⵠⲆⲆⲆⵠΔ = a.onplay ? [{
                    ΔΔⵠᐃⲆ: a.onplay
                }] : [];
                b.ᐃⵠⵠⲆΔⲆⲆⲆᐃ = a.onstop ? [{
                    ΔΔⵠᐃⲆ: a.onstop
                }] : [];
                b.ⵠⵠⲆⵠⵠᐃⲆⵠΔ = a.onmute ? [{
                    ΔΔⵠᐃⲆ: a.onmute
                }] : [];
                b.ⲆΔΔⲆⵠᐃΔⵠΔ = a.ⲆᐃΔᐃΔⵠⵠᐃᐃ ? [{
                    ΔΔⵠᐃⲆ: a.ⲆᐃΔᐃΔⵠⵠᐃᐃ
                }] : [];
                b.ⵠⵠⵠⲆᐃⲆΔΔᐃ = a.ⵠΔⲆΔⵠᐃΔᐃΔ ? [{
                    ΔΔⵠᐃⲆ: a.ⵠΔⲆΔⵠᐃΔᐃΔ
                }] : [];
                b.ⵠⲆᐃⵠΔⵠΔⲆⲆ = a.ⵠⲆᐃⲆⲆΔⵠΔⵠ ? [{
                    ΔΔⵠᐃⲆ: a.ⵠⲆᐃⲆⲆΔⵠΔⵠ
                }] : [];
                b.ⲆᐃⲆΔΔΔⵠⵠᐃ = [];
                b.ⲆᐃⵠΔᐃ = j.ᐃᐃΔⵠΔ && !b.ΔⲆⲆΔᐃΔΔ;
                if (j.ᐃ !== undefined && j.ᐃ && j.ⲆⵠⲆΔⵠⲆⲆ) {
                    j.ⲆᐃΔⲆᐃⵠⵠᐃⲆ();
                }
                j.ⲆⵠⲆⲆΔ.push(b);
                if (b.ᐃⵠⲆⵠᐃⲆⲆⵠΔ) {
                    b.ⵠⵠⲆⲆⵠ.push({
                        event: "play",
                        action: function () {
                            b.play();
                        }
                    });
                }
                if (b.ᐃᐃⲆⵠⲆΔⵠⲆᐃ) {
                    b.load();
                }
                return b;
            },
            load: function () {
                var b = this;
                var c = null;
                if (!j.ΔΔΔⲆΔᐃⲆ) {
                    if (typeof b.ⵠⲆⵠⵠᐃ == "string") {
                        b.ⵠⲆⵠⵠᐃ = [b.ⵠⲆⵠⵠᐃ];
                    }
                    for (var e = 0; e < b.ⵠⲆⵠⵠᐃ.length; e++) {
                        var f;
                        var g;
                        if (b.ᐃΔᐃⲆⲆΔⵠ && b.ᐃΔᐃⲆⲆΔⵠ[e]) {
                            f = b.ᐃΔᐃⲆⲆΔⵠ[e];
                        } else {
                            if (typeof (g = b.ⵠⲆⵠⵠᐃ[e]) != "string") {
                                b.ⲆΔΔᐃᐃ("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                                continue;
                            }
                            if (!(f = /^data:audio\/([^;,]+);/i.exec(g))) {
                                f = /\.([^.]+)$/.exec(g.split("?", 1)[0]);
                            }
                            f &&= f[1].toLowerCase();
                        }
                        if (!f) {
                            console.warn("No file extension was found. Consider using the \"format\" property or specify an extension.");
                        }
                        if (f && j.ⵠⵠΔⲆⵠΔⵠΔⲆ(f)) {
                            c = b.ⵠⲆⵠⵠᐃ[e];
                            break;
                        }
                    }
                    if (c) {
                        b.ⵠⲆⵠⵠᐃ = c;
                        b.ⲆⲆⲆᐃⵠ = "loading";
                        if (bj.location.protocol === "https:" && c.slice(0, 5) === "http:") {
                            b.ΔⲆⲆΔᐃΔΔ = true;
                            b.ⲆᐃⵠΔᐃ = false;
                        }
                        new d(b);
                        if (b.ⲆᐃⵠΔᐃ) {
                            a(b);
                        }
                        return b;
                    } else {
                        b.ⲆΔΔᐃᐃ("loaderror", null, "No codec support for selected audio sources.");
                        return;
                    }
                }
                b.ⲆΔΔᐃᐃ("loaderror", null, "No audio support.");
            },
            play: function (f, i) {
                var k = this;
                var m = null;
                if (typeof f == "number") {
                    m = f;
                    f = null;
                } else {
                    if (typeof f == "string" && k.ⲆⲆⲆᐃⵠ === "loaded" && !k.ᐃⲆΔΔⵠ[f]) {
                        return null;
                    }
                    if (f === undefined) {
                        f = "__default";
                        var n = 0;
                        for (var o = 0; o < k.ⲆΔᐃⲆΔ.length; o++) {
                            if (k.ⲆΔᐃⲆΔ[o].ⲆⲆⵠⲆΔ && !k.ⲆΔᐃⲆΔ[o].ΔᐃⲆⲆⵠ) {
                                n++;
                                m = k.ⲆΔᐃⲆΔ[o].ⲆⲆΔᐃ;
                            }
                        }
                        if (n === 1) {
                            f = null;
                        } else {
                            m = null;
                        }
                    }
                }
                var q = m ? k.ⵠⵠᐃᐃᐃ(m) : k.ΔᐃΔⵠⲆᐃⵠᐃᐃ();
                if (!q) {
                    return null;
                }
                if (m && !f) {
                    f = q.ᐃⲆΔΔⵠ || "__default";
                }
                if (k.ⲆⲆⲆᐃⵠ !== "loaded") {
                    q.ᐃⲆΔΔⵠ = f;
                    q.ΔᐃⲆⲆⵠ = false;
                    var h = q.ⲆⲆΔᐃ;
                    k.ⵠⵠⲆⲆⵠ.push({
                        event: "play",
                        action: function () {
                            k.play(h);
                        }
                    });
                    return h;
                }
                if (m && !q.ⲆⲆⵠⲆΔ) {
                    if (!i) {
                        setTimeout(function () {
                            k.ⲆΔΔᐃᐃ("play", q.ⲆⲆΔᐃ);
                        }, 0);
                    }
                    return q.ⲆⲆΔᐃ;
                }
                if (k.ⲆᐃⵠΔᐃ) {
                    j.ⲆᐃΔⵠΔⲆⲆ();
                }
                var l = Math.max(0, q.ⵠⲆΔⲆⵠ > 0 ? q.ⵠⲆΔⲆⵠ : k.ᐃⲆΔΔⵠ[f][0] / 1000);
                var g = Math.max(0, (k.ᐃⲆΔΔⵠ[f][0] + k.ᐃⲆΔΔⵠ[f][1]) / 1000 - l);
                var t = g * 1000 / Math.abs(q.ΔⲆⵠᐃⵠ);
                q.ⲆⲆⵠⲆΔ = false;
                q.ΔᐃⲆⲆⵠ = false;
                q.ᐃⲆΔΔⵠ = f;
                q.ⵠⲆΔⲆⵠ = l;
                q.ΔⵠⵠΔᐃ = k.ᐃⲆΔΔⵠ[f][0] / 1000;
                q.ΔⵠΔᐃⲆᐃⵠ = (k.ᐃⲆΔΔⵠ[f][0] + k.ᐃⲆΔΔⵠ[f][1]) / 1000;
                q.ⲆΔᐃᐃᐃ = !!q.ⲆΔᐃᐃᐃ || !!k.ᐃⲆΔΔⵠ[f][2];
                var b = q.ΔΔΔⵠ;
                if (k.ⲆᐃⵠΔᐃ) {
                    function a() {
                        k.ΔᐃΔⲆⲆᐃΔⵠⵠ(q);
                        var a = q.ⵠⵠᐃΔΔ || k.ⵠⵠᐃΔΔ ? 0 : q.ᐃⵠᐃⲆΔ;
                        b.gain.setValueAtTime(a, j.ᐃ.currentTime);
                        q.ΔᐃΔΔᐃΔΔ = j.ᐃ.currentTime;
                        if (b.ⲆΔᐃᐃⵠ.start === undefined) {
                            if (q.ⲆΔᐃᐃᐃ) {
                                b.ⲆΔᐃᐃⵠ.ᐃⲆᐃⲆⲆΔⲆᐃⲆ(0, l, 86400);
                            } else {
                                b.ⲆΔᐃᐃⵠ.ᐃⲆᐃⲆⲆΔⲆᐃⲆ(0, l, g);
                            }
                        } else if (q.ⲆΔᐃᐃᐃ) {
                            b.ⲆΔᐃᐃⵠ.start(0, l, 86400);
                        } else {
                            b.ⲆΔᐃᐃⵠ.start(0, l, g);
                        }
                        if (t !== Infinity) {
                            k.ΔⵠᐃᐃⲆΔⵠ[q.ⲆⲆΔᐃ] = setTimeout(k.ΔᐃⲆⲆⵠ.bind(k, q), t);
                        }
                        if (!i) {
                            setTimeout(function () {
                                k.ⲆΔΔᐃᐃ("play", q.ⲆⲆΔᐃ);
                            }, 0);
                        }
                    }
                    var d = j.state === "running";
                    if (k.ⲆⲆⲆᐃⵠ === "loaded" && d) {
                        a();
                    } else {
                        var c = d || k.ⲆⲆⲆᐃⵠ !== "loaded" ? "load" : "resume";
                        k.once(c, a, d ? q.ⲆⲆΔᐃ : null);
                        k.ΔᐃΔⲆΔᐃΔ(q.ⲆⲆΔᐃ);
                    }
                } else {
                    function a() {
                        b.currentTime = l;
                        b.muted = q.ⵠⵠᐃΔΔ || k.ⵠⵠᐃΔΔ || j.ⵠⵠᐃΔΔ || b.muted;
                        b.volume = q.ᐃⵠᐃⲆΔ * j.volume();
                        b.playbackRate = q.ΔⲆⵠᐃⵠ;
                        b.play();
                        if (t !== Infinity) {
                            k.ΔⵠᐃᐃⲆΔⵠ[q.ⲆⲆΔᐃ] = setTimeout(k.ΔᐃⲆⲆⵠ.bind(k, q), t);
                        }
                        if (!i) {
                            k.ⲆΔΔᐃᐃ("play", q.ⲆⲆΔᐃ);
                        }
                    }
                    var p = k.ⲆⲆⲆᐃⵠ === "loaded" && (bj && bj.ΔΔⲆᐃᐃⲆΔᐃᐃ || !b.readyState && j.ᐃΔΔᐃᐃ.ⲆΔⲆⵠΔⲆΔⵠᐃ);
                    if (b.readyState === 4 || p) {
                        a();
                    } else {
                        function c() {
                            a();
                            b.removeEventListener(j.ΔᐃⲆⲆᐃΔᐃ, c, false);
                        }
                        b.addEventListener(j.ΔᐃⲆⲆᐃΔᐃ, c, false);
                        k.ΔᐃΔⲆΔᐃΔ(q.ⲆⲆΔᐃ);
                    }
                }
                return q.ⲆⲆΔᐃ;
            },
            pause: function (a) {
                var b = this;
                if (b.ⲆⲆⲆᐃⵠ !== "loaded") {
                    b.ⵠⵠⲆⲆⵠ.push({
                        event: "pause",
                        action: function () {
                            b.pause(a);
                        }
                    });
                    return b;
                }
                for (var c = b.ᐃⲆⲆⵠΔ(a), d = 0; d < c.length; d++) {
                    b.ΔᐃΔⲆΔᐃΔ(c[d]);
                    var e = b.ⵠⵠᐃᐃᐃ(c[d]);
                    if (e && !e.ⲆⲆⵠⲆΔ && (e.ⵠⲆΔⲆⵠ = b.ΔΔⵠⲆΔⲆⵠ(c[d]), e.ΔᐃᐃⲆᐃⵠⵠ = 0, e.ⲆⲆⵠⲆΔ = true, b.ⲆᐃⲆᐃᐃΔⲆ(c[d]), e.ΔΔΔⵠ)) {
                        if (b.ⲆᐃⵠΔᐃ) {
                            if (!e.ΔΔΔⵠ.ⲆΔᐃᐃⵠ) {
                                continue;
                            }
                            if (e.ΔΔΔⵠ.ⲆΔᐃᐃⵠ.stop === undefined) {
                                e.ΔΔΔⵠ.ⲆΔᐃᐃⵠ.ΔᐃⵠⵠΔΔᐃᐃⵠ(0);
                            } else {
                                e.ΔΔΔⵠ.ⲆΔᐃᐃⵠ.stop(0);
                            }
                            b.ΔⲆᐃᐃⵠᐃΔ(e.ΔΔΔⵠ);
                        } else if (!isNaN(e.ΔΔΔⵠ.duration) || e.ΔΔΔⵠ.duration === Infinity) {
                            e.ΔΔΔⵠ.pause();
                        }
                    }
                    if (!arguments[1]) {
                        b.ⲆΔΔᐃᐃ("pause", e ? e.ⲆⲆΔᐃ : null);
                    }
                }
                return b;
            },
            stop: function (b, c) {
                var d = this;
                if (d.ⲆⲆⲆᐃⵠ !== "loaded") {
                    d.ⵠⵠⲆⲆⵠ.push({
                        event: "stop",
                        action: function () {
                            d.stop(b);
                        }
                    });
                    return d;
                }
                for (var e = d.ᐃⲆⲆⵠΔ(b), f = 0; f < e.length; f++) {
                    d.ΔᐃΔⲆΔᐃΔ(e[f]);
                    var g = d.ⵠⵠᐃᐃᐃ(e[f]);
                    if (g) {
                        g.ⵠⲆΔⲆⵠ = g.ΔⵠⵠΔᐃ || 0;
                        g.ΔᐃᐃⲆᐃⵠⵠ = 0;
                        g.ⲆⲆⵠⲆΔ = true;
                        g.ΔᐃⲆⲆⵠ = true;
                        d.ⲆᐃⲆᐃᐃΔⲆ(e[f]);
                        if (g.ΔΔΔⵠ) {
                            if (d.ⲆᐃⵠΔᐃ) {
                                if (g.ΔΔΔⵠ.ⲆΔᐃᐃⵠ) {
                                    if (g.ΔΔΔⵠ.ⲆΔᐃᐃⵠ.stop === undefined) {
                                        g.ΔΔΔⵠ.ⲆΔᐃᐃⵠ.ΔᐃⵠⵠΔΔᐃᐃⵠ(0);
                                    } else {
                                        g.ΔΔΔⵠ.ⲆΔᐃᐃⵠ.stop(0);
                                    }
                                    d.ΔⲆᐃᐃⵠᐃΔ(g.ΔΔΔⵠ);
                                }
                            } else if (!isNaN(g.ΔΔΔⵠ.duration) || g.ΔΔΔⵠ.duration === Infinity) {
                                g.ΔΔΔⵠ.currentTime = g.ΔⵠⵠΔᐃ || 0;
                                g.ΔΔΔⵠ.pause();
                            }
                        }
                        if (!c) {
                            d.ⲆΔΔᐃᐃ("stop", g.ⲆⲆΔᐃ);
                        }
                    }
                }
                return d;
            },
            ⲆⲆΔⵠΔⲆⲆ: function (b, c) {
                var d = this;
                if (d.ⲆⲆⲆᐃⵠ !== "loaded") {
                    d.ⵠⵠⲆⲆⵠ.push({
                        event: "mute",
                        action: function () {
                            d.ⲆⲆΔⵠΔⲆⲆ(b, c);
                        }
                    });
                    return d;
                }
                if (c === undefined) {
                    if (typeof b != "boolean") {
                        return d.ⵠⵠᐃΔΔ;
                    }
                    d.ⵠⵠᐃΔΔ = b;
                }
                for (var e = d.ᐃⲆⲆⵠΔ(c), f = 0; f < e.length; f++) {
                    var g = d.ⵠⵠᐃᐃᐃ(e[f]);
                    if (g) {
                        g.ⵠⵠᐃΔΔ = b;
                        if (d.ⲆᐃⵠΔᐃ && g.ΔΔΔⵠ) {
                            g.ΔΔΔⵠ.gain.setValueAtTime(b ? 0 : g.ᐃⵠᐃⲆΔ, j.ᐃ.currentTime);
                        } else if (g.ΔΔΔⵠ) {
                            g.ΔΔΔⵠ.muted = !!j.ⵠⵠᐃΔΔ || b;
                        }
                        d.ⲆΔΔᐃᐃ("mute", g.ⲆⲆΔᐃ);
                    }
                }
                return d;
            },
            volume: function () {
                var b;
                var c;
                var d;
                var f = this;
                var g = arguments;
                if (g.length === 0) {
                    return f.ᐃⵠᐃⲆΔ;
                }
                if (g.length === 1 || g.length === 2 && g[1] === undefined) {
                    if (f.ᐃⲆⲆⵠΔ().indexOf(g[0]) >= 0) {
                        c = parseInt(g[0], 10);
                    } else {
                        b = parseFloat(g[0]);
                    }
                } else if (g.length >= 2) {
                    b = parseFloat(g[0]);
                    c = parseInt(g[1], 10);
                }
                if (b === undefined || b < 0 || b > 1) {
                    if (d = c ? f.ⵠⵠᐃᐃᐃ(c) : f.ⲆΔᐃⲆΔ[0]) {
                        return d.ᐃⵠᐃⲆΔ;
                    } else {
                        return 0;
                    }
                }
                if (f.ⲆⲆⲆᐃⵠ !== "loaded") {
                    f.ⵠⵠⲆⲆⵠ.push({
                        event: "volume",
                        action: function () {
                            f.volume.apply(f, g);
                        }
                    });
                    return f;
                }
                if (c === undefined) {
                    f.ᐃⵠᐃⲆΔ = b;
                }
                c = f.ᐃⲆⲆⵠΔ(c);
                for (var a = 0; a < c.length; a++) {
                    if (d = f.ⵠⵠᐃᐃᐃ(c[a])) {
                        d.ᐃⵠᐃⲆΔ = b;
                        if (!g[2]) {
                            f.ⲆᐃⲆᐃᐃΔⲆ(c[a]);
                        }
                        if (f.ⲆᐃⵠΔᐃ && d.ΔΔΔⵠ && !d.ⵠⵠᐃΔΔ) {
                            d.ΔΔΔⵠ.gain.setValueAtTime(b, j.ᐃ.currentTime);
                        } else if (d.ΔΔΔⵠ && !d.ⵠⵠᐃΔΔ) {
                            d.ΔΔΔⵠ.volume = b * j.volume();
                        }
                        f.ⲆΔΔᐃᐃ("volume", d.ⲆⲆΔᐃ);
                    }
                }
                return f;
            },
            fade: function (c, e, f, i) {
                var k = this;
                var a = Math.abs(c - e);
                var n = c > e ? "out" : "in";
                var o = a / 0.01;
                var p = o > 0 ? f / o : f;
                if (p < 4) {
                    o = Math.ceil(o / (4 / p));
                    p = 4;
                }
                if (k.ⲆⲆⲆᐃⵠ !== "loaded") {
                    k.ⵠⵠⲆⲆⵠ.push({
                        event: "fade",
                        action: function () {
                            k.fade(c, e, f, i);
                        }
                    });
                    return k;
                }
                k.volume(c, i);
                for (var q = k.ᐃⲆⲆⵠΔ(i), g = 0; g < q.length; g++) {
                    var r = k.ⵠⵠᐃᐃᐃ(q[g]);
                    if (r) {
                        if (!i) {
                            k.ⲆᐃⲆᐃᐃΔⲆ(q[g]);
                        }
                        if (k.ⲆᐃⵠΔᐃ && !r.ⵠⵠᐃΔΔ) {
                            var s = j.ᐃ.currentTime;
                            var t = s + f / 1000;
                            r.ᐃⵠᐃⲆΔ = c;
                            r.ΔΔΔⵠ.gain.setValueAtTime(c, s);
                            r.ΔΔΔⵠ.gain.linearRampToValueAtTime(e, t);
                        }
                        var w = c;
                        r.ⵠᐃΔΔⵠᐃⵠ = setInterval(function (a, b) {
                            if (o > 0) {
                                w += n === "in" ? 0.01 : -0.01;
                            }
                            w = Math.max(0, w);
                            w = Math.min(1, w);
                            w = Math.round(w * 100) / 100;
                            if (k.ⲆᐃⵠΔᐃ) {
                                if (i === undefined) {
                                    k.ᐃⵠᐃⲆΔ = w;
                                }
                                b.ᐃⵠᐃⲆΔ = w;
                            } else {
                                k.volume(w, a, true);
                            }
                            if (e < c && w <= e || e > c && w >= e) {
                                clearInterval(b.ⵠᐃΔΔⵠᐃⵠ);
                                b.ⵠᐃΔΔⵠᐃⵠ = null;
                                k.volume(e, a);
                                k.ⲆΔΔᐃᐃ("fade", a);
                            }
                        }.bind(k, q[g], r), p);
                    }
                }
                return k;
            },
            ⲆᐃⲆᐃᐃΔⲆ: function (a) {
                var b = this;
                var c = b.ⵠⵠᐃᐃᐃ(a);
                if (c && c.ⵠᐃΔΔⵠᐃⵠ) {
                    if (b.ⲆᐃⵠΔᐃ) {
                        c.ΔΔΔⵠ.gain.cancelScheduledValues(j.ᐃ.currentTime);
                    }
                    clearInterval(c.ⵠᐃΔΔⵠᐃⵠ);
                    c.ⵠᐃΔΔⵠᐃⵠ = null;
                    b.ⲆΔΔᐃᐃ("fade", a);
                }
                return b;
            },
            loop: function () {
                var b;
                var c;
                var d;
                var f = this;
                var g = arguments;
                if (g.length === 0) {
                    return f.ⲆΔᐃᐃᐃ;
                }
                if (g.length === 1) {
                    if (typeof g[0] != "boolean") {
                        return !!(d = f.ⵠⵠᐃᐃᐃ(parseInt(g[0], 10))) && d.ⲆΔᐃᐃᐃ;
                    }
                    b = g[0];
                    f.ⲆΔᐃᐃᐃ = b;
                } else if (g.length === 2) {
                    b = g[0];
                    c = parseInt(g[1], 10);
                }
                for (var h = f.ᐃⲆⲆⵠΔ(c), a = 0; a < h.length; a++) {
                    if (d = f.ⵠⵠᐃᐃᐃ(h[a])) {
                        d.ⲆΔᐃᐃᐃ = b;
                        if (f.ⲆᐃⵠΔᐃ && d.ΔΔΔⵠ && d.ΔΔΔⵠ.ⲆΔᐃᐃⵠ) {
                            d.ΔΔΔⵠ.ⲆΔᐃᐃⵠ.loop = b;
                            if (b) {
                                d.ΔΔΔⵠ.ⲆΔᐃᐃⵠ.loopStart = d.ΔⵠⵠΔᐃ || 0;
                                d.ΔΔΔⵠ.ⲆΔᐃᐃⵠ.loopEnd = d.ΔⵠΔᐃⲆᐃⵠ;
                            }
                        }
                    }
                }
                return f;
            },
            rate: function () {
                var b;
                var c;
                var d;
                var f = this;
                var g = arguments;
                if (g.length === 0) {
                    c = f.ⲆΔᐃⲆΔ[0].ⲆⲆΔᐃ;
                } else if (g.length === 1) {
                    if (f.ᐃⲆⲆⵠΔ().indexOf(g[0]) >= 0) {
                        c = parseInt(g[0], 10);
                    } else {
                        b = parseFloat(g[0]);
                    }
                } else if (g.length === 2) {
                    b = parseFloat(g[0]);
                    c = parseInt(g[1], 10);
                }
                if (typeof b != "number") {
                    if (d = f.ⵠⵠᐃᐃᐃ(c)) {
                        return d.ΔⲆⵠᐃⵠ;
                    } else {
                        return f.ΔⲆⵠᐃⵠ;
                    }
                }
                if (f.ⲆⲆⲆᐃⵠ !== "loaded") {
                    f.ⵠⵠⲆⲆⵠ.push({
                        event: "rate",
                        action: function () {
                            f.rate.apply(f, g);
                        }
                    });
                    return f;
                }
                if (c === undefined) {
                    f.ΔⲆⵠᐃⵠ = b;
                }
                c = f.ᐃⲆⲆⵠΔ(c);
                for (var a = 0; a < c.length; a++) {
                    if (d = f.ⵠⵠᐃᐃᐃ(c[a])) {
                        d.ΔᐃᐃⲆᐃⵠⵠ = f.ΔΔⵠⲆΔⲆⵠ(c[a]);
                        d.ΔᐃΔΔᐃΔΔ = f.ⲆᐃⵠΔᐃ ? j.ᐃ.currentTime : d.ΔᐃΔΔᐃΔΔ;
                        d.ΔⲆⵠᐃⵠ = b;
                        if (f.ⲆᐃⵠΔᐃ && d.ΔΔΔⵠ && d.ΔΔΔⵠ.ⲆΔᐃᐃⵠ) {
                            d.ΔΔΔⵠ.ⲆΔᐃᐃⵠ.playbackRate.value = b;
                        } else if (d.ΔΔΔⵠ) {
                            d.ΔΔΔⵠ.playbackRate = b;
                        }
                        var k = f.ΔΔⵠⲆΔⲆⵠ(c[a]);
                        var l = ((f.ᐃⲆΔΔⵠ[d.ᐃⲆΔΔⵠ][0] + f.ᐃⲆΔΔⵠ[d.ᐃⲆΔΔⵠ][1]) / 1000 - k) * 1000 / Math.abs(d.ΔⲆⵠᐃⵠ);
                        if (!!f.ΔⵠᐃᐃⲆΔⵠ[c[a]] || !d.ⲆⲆⵠⲆΔ) {
                            f.ΔᐃΔⲆΔᐃΔ(c[a]);
                            f.ΔⵠᐃᐃⲆΔⵠ[c[a]] = setTimeout(f.ΔᐃⲆⲆⵠ.bind(f, d), l);
                        }
                        f.ⲆΔΔᐃᐃ("rate", d.ⲆⲆΔᐃ);
                    }
                }
                return f;
            },
            ΔΔⵠⲆΔⲆⵠ: function () {
                var b;
                var c;
                var d = this;
                var f = arguments;
                if (f.length === 0) {
                    c = d.ⲆΔᐃⲆΔ[0].ⲆⲆΔᐃ;
                } else if (f.length === 1) {
                    if (d.ᐃⲆⲆⵠΔ().indexOf(f[0]) >= 0) {
                        c = parseInt(f[0], 10);
                    } else {
                        c = d.ⲆΔᐃⲆΔ[0].ⲆⲆΔᐃ;
                        b = parseFloat(f[0]);
                    }
                } else if (f.length === 2) {
                    b = parseFloat(f[0]);
                    c = parseInt(f[1], 10);
                }
                if (c === undefined) {
                    return d;
                }
                if (d.ⲆⲆⲆᐃⵠ !== "loaded") {
                    d.ⵠⵠⲆⲆⵠ.push({
                        event: "seek",
                        action: function () {
                            d.ΔΔⵠⲆΔⲆⵠ.apply(d, f);
                        }
                    });
                    return d;
                }
                var g = d.ⵠⵠᐃᐃᐃ(c);
                if (g) {
                    if (typeof b != "number" || b < 0) {
                        if (d.ⲆᐃⵠΔᐃ) {
                            var a = d.ⲆⲆⵠΔⵠᐃⵠ(c) ? j.ᐃ.currentTime - g.ΔᐃΔΔᐃΔΔ : 0;
                            var k = g.ΔᐃᐃⲆᐃⵠⵠ ? g.ΔᐃᐃⲆᐃⵠⵠ - g.ⵠⲆΔⲆⵠ : 0;
                            return g.ⵠⲆΔⲆⵠ + (k + a * Math.abs(g.ΔⲆⵠᐃⵠ));
                        }
                        return g.ΔΔΔⵠ.currentTime;
                    }
                    var l = d.ⲆⲆⵠΔⵠᐃⵠ(c);
                    if (l) {
                        d.pause(c, true);
                    }
                    g.ⵠⲆΔⲆⵠ = b;
                    g.ΔᐃⲆⲆⵠ = false;
                    d.ΔᐃΔⲆΔᐃΔ(c);
                    if (l) {
                        d.play(c, true);
                    }
                    if (!d.ⲆᐃⵠΔᐃ && g.ΔΔΔⵠ) {
                        g.ΔΔΔⵠ.currentTime = b;
                    }
                    d.ⲆΔΔᐃᐃ("seek", c);
                }
                return d;
            },
            ⲆⲆⵠΔⵠᐃⵠ: function (a) {
                var b = this;
                if (typeof a == "number") {
                    var c = b.ⵠⵠᐃᐃᐃ(a);
                    return !!c && !c.ⲆⲆⵠⲆΔ;
                }
                for (var d = 0; d < b.ⲆΔᐃⲆΔ.length; d++) {
                    if (!b.ⲆΔᐃⲆΔ[d].ⲆⲆⵠⲆΔ) {
                        return true;
                    }
                }
                return false;
            },
            duration: function (a) {
                var b = this;
                var c = b.ⲆΔΔᐃⵠΔΔ;
                var d = b.ⵠⵠᐃᐃᐃ(a);
                if (d) {
                    c = b.ᐃⲆΔΔⵠ[d.ᐃⲆΔΔⵠ][1] / 1000;
                }
                return c;
            },
            state: function () {
                return this.ⲆⲆⲆᐃⵠ;
            },
            ᐃᐃΔΔᐃᐃᐃ: function () {
                var a = this;
                for (var b = a.ⲆΔᐃⲆΔ, c = 0; c < b.length; c++) {
                    if (!b[c].ⲆⲆⵠⲆΔ) {
                        a.stop(b[c].ⲆⲆΔᐃ);
                    }
                    if (!a.ⲆᐃⵠΔᐃ) {
                        if (!/MSIE |Trident\//.test(j.ᐃΔΔᐃᐃ && j.ᐃΔΔᐃᐃ.userAgent)) {
                            b[c].ΔΔΔⵠ.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA";
                        }
                        b[c].ΔΔΔⵠ.removeEventListener("error", b[c].ⵠⲆᐃΔΔⵠΔ, false);
                        b[c].ΔΔΔⵠ.removeEventListener(j.ΔᐃⲆⲆᐃΔᐃ, b[c].ᐃΔᐃᐃᐃᐃⵠ, false);
                    }
                    delete b[c].ΔΔΔⵠ;
                    a.ΔᐃΔⲆΔᐃΔ(b[c].ⲆⲆΔᐃ);
                    var d = j.ⲆⵠⲆⲆΔ.indexOf(a);
                    if (d >= 0) {
                        j.ⲆⵠⲆⲆΔ.splice(d, 1);
                    }
                }
                var g = true;
                for (c = 0; c < j.ⲆⵠⲆⲆΔ.length; c++) {
                    if (j.ⲆⵠⲆⲆΔ[c].ⵠⲆⵠⵠᐃ === a.ⵠⲆⵠⵠᐃ) {
                        g = false;
                        break;
                    }
                }
                if (f && g) {
                    delete f[a.ⵠⲆⵠⵠᐃ];
                }
                j.ΔΔΔⲆΔᐃⲆ = false;
                a.ⲆⲆⲆᐃⵠ = "unloaded";
                a.ⲆΔᐃⲆΔ = [];
                a = null;
                return null;
            },
            on: function (a, b, c, d) {
                var e = this["_on" + a];
                if (typeof b == "function") {
                    e.push(d ? {
                        id: c,
                        ΔΔⵠᐃⲆ: b,
                        once: d
                    } : {
                        id: c,
                        ΔΔⵠᐃⲆ: b
                    });
                }
                return this;
            },
            ΔⲆⵠⲆⵠΔᐃⵠᐃ: function (b, c, d) {
                var e = this;
                var f = e["_on" + b];
                var g = 0;
                if (typeof c == "number") {
                    d = c;
                    c = null;
                }
                if (c || d) {
                    for (g = 0; g < f.length; g++) {
                        var h = d === f[g].id;
                        if (c === f[g].ΔΔⵠᐃⲆ && h || !c && h) {
                            f.splice(g, 1);
                            break;
                        }
                    }
                } else if (b) {
                    e["_on" + b] = [];
                } else {
                    var j = Object.keys(e);
                    for (g = 0; g < j.length; g++) {
                        if (j[g].indexOf("_on") === 0 && Array.isArray(e[j[g]])) {
                            e[j[g]] = [];
                        }
                    }
                }
                return e;
            },
            once: function (a, b, c) {
                this.on(a, b, c, 1);
                return this;
            },
            ⲆΔΔᐃᐃ: function (b, c, d) {
                var e = this;
                var f = e["_on" + b];
                for (var g = f.length - 1; g >= 0; g--) {
                    if (!f[g].id || f[g].id === c || b === "load") {
                        setTimeout(function (a) {
                            a.call(this, c, d);
                        }.bind(e, f[g].ΔΔⵠᐃⲆ), 0);
                        if (f[g].once) {
                            e.ΔⲆⵠⲆⵠΔᐃⵠᐃ(b, f[g].ΔΔⵠᐃⲆ, f[g].id);
                        }
                    }
                }
                return e;
            },
            Ⲇⵠⵠⵠⵠⵠⵠ: function () {
                var a = this;
                if (a.ⵠⵠⲆⲆⵠ.length > 0) {
                    var b = a.ⵠⵠⲆⲆⵠ[0];
                    a.once(b.event, function () {
                        a.ⵠⵠⲆⲆⵠ.shift();
                        a.Ⲇⵠⵠⵠⵠⵠⵠ();
                    });
                    b.action();
                }
                return a;
            },
            ΔᐃⲆⲆⵠ: function (b) {
                var c = this;
                var d = b.ᐃⲆΔΔⵠ;
                if (!c.ⲆᐃⵠΔᐃ && c.ΔΔΔⵠ && !c.ΔΔΔⵠ.ended) {
                    setTimeout(c.ΔᐃⲆⲆⵠ.bind(c, b), 100);
                    return c;
                }
                var e = !!b.ⲆΔᐃᐃᐃ || !!c.ᐃⲆΔΔⵠ[d][2];
                c.ⲆΔΔᐃᐃ("end", b.ⲆⲆΔᐃ);
                if (!c.ⲆᐃⵠΔᐃ && e) {
                    c.stop(b.ⲆⲆΔᐃ, true).play(b.ⲆⲆΔᐃ);
                }
                if (c.ⲆᐃⵠΔᐃ && e) {
                    c.ⲆΔΔᐃᐃ("play", b.ⲆⲆΔᐃ);
                    b.ⵠⲆΔⲆⵠ = b.ΔⵠⵠΔᐃ || 0;
                    b.ΔᐃᐃⲆᐃⵠⵠ = 0;
                    b.ΔᐃΔΔᐃΔΔ = j.ᐃ.currentTime;
                    var f = (b.ΔⵠΔᐃⲆᐃⵠ - b.ΔⵠⵠΔᐃ) * 1000 / Math.abs(b.ΔⲆⵠᐃⵠ);
                    c.ΔⵠᐃᐃⲆΔⵠ[b.ⲆⲆΔᐃ] = setTimeout(c.ΔᐃⲆⲆⵠ.bind(c, b), f);
                }
                if (c.ⲆᐃⵠΔᐃ && !e) {
                    b.ⲆⲆⵠⲆΔ = true;
                    b.ΔᐃⲆⲆⵠ = true;
                    b.ⵠⲆΔⲆⵠ = b.ΔⵠⵠΔᐃ || 0;
                    b.ΔᐃᐃⲆᐃⵠⵠ = 0;
                    c.ΔᐃΔⲆΔᐃΔ(b.ⲆⲆΔᐃ);
                    c.ΔⲆᐃᐃⵠᐃΔ(b.ΔΔΔⵠ);
                    j.ⵠᐃⵠⲆᐃᐃΔ();
                }
                if (!c.ⲆᐃⵠΔᐃ && !e) {
                    c.stop(b.ⲆⲆΔᐃ);
                }
                return c;
            },
            ΔᐃΔⲆΔᐃΔ: function (a) {
                var b = this;
                if (b.ΔⵠᐃᐃⲆΔⵠ[a]) {
                    clearTimeout(b.ΔⵠᐃᐃⲆΔⵠ[a]);
                    delete b.ΔⵠᐃᐃⲆΔⵠ[a];
                }
                return b;
            },
            ⵠⵠᐃᐃᐃ: function (a) {
                for (var b = this, c = 0; c < b.ⲆΔᐃⲆΔ.length; c++) {
                    if (a === b.ⲆΔᐃⲆΔ[c].ⲆⲆΔᐃ) {
                        return b.ⲆΔᐃⲆΔ[c];
                    }
                }
                return null;
            },
            ΔᐃΔⵠⲆᐃⵠᐃᐃ: function () {
                var a = this;
                a.ΔⵠⵠⵠΔΔᐃΔⲆ();
                for (var b = 0; b < a.ⲆΔᐃⲆΔ.length; b++) {
                    if (a.ⲆΔᐃⲆΔ[b].ΔᐃⲆⲆⵠ) {
                        return a.ⲆΔᐃⲆΔ[b].reset();
                    }
                }
                return new d(a);
            },
            ΔⵠⵠⵠΔΔᐃΔⲆ: function () {
                var a = this;
                var b = a.ⵠᐃⵠᐃⵠΔᐃⲆⵠ;
                var c = 0;
                var d = 0;
                if (a.ⲆΔᐃⲆΔ.length >= b) {
                    for (d = 0; d < a.ⲆΔᐃⲆΔ.length; d++) {
                        if (a.ⲆΔᐃⲆΔ[d].ΔᐃⲆⲆⵠ) {
                            c++;
                        }
                    }
                    for (d = a.ⲆΔᐃⲆΔ.length - 1; d >= 0; d--) {
                        if (c <= b) {
                            return;
                        }
                        if (a.ⲆΔᐃⲆΔ[d].ΔᐃⲆⲆⵠ) {
                            if (a.ⲆᐃⵠΔᐃ && a.ⲆΔᐃⲆΔ[d].ΔΔΔⵠ) {
                                a.ⲆΔᐃⲆΔ[d].ΔΔΔⵠ.disconnect(0);
                            }
                            a.ⲆΔᐃⲆΔ.splice(d, 1);
                            c--;
                        }
                    }
                }
            },
            ᐃⲆⲆⵠΔ: function (a) {
                if (a === undefined) {
                    var b = [];
                    for (var c = 0; c < this.ⲆΔᐃⲆΔ.length; c++) {
                        b.push(this.ⲆΔᐃⲆΔ[c].ⲆⲆΔᐃ);
                    }
                    return b;
                }
                return [a];
            },
            ΔᐃΔⲆⲆᐃΔⵠⵠ: function (a) {
                a.ΔΔΔⵠ.ⲆΔᐃᐃⵠ = j.ᐃ.createBufferSource();
                a.ΔΔΔⵠ.ⲆΔᐃᐃⵠ.buffer = f[this.ⵠⲆⵠⵠᐃ];
                if (a.ΔⲆΔⲆΔ) {
                    a.ΔΔΔⵠ.ⲆΔᐃᐃⵠ.connect(a.ΔⲆΔⲆΔ);
                } else {
                    a.ΔΔΔⵠ.ⲆΔᐃᐃⵠ.connect(a.ΔΔΔⵠ);
                }
                a.ΔΔΔⵠ.ⲆΔᐃᐃⵠ.loop = a.ⲆΔᐃᐃᐃ;
                if (a.ⲆΔᐃᐃᐃ) {
                    a.ΔΔΔⵠ.ⲆΔᐃᐃⵠ.loopStart = a.ΔⵠⵠΔᐃ || 0;
                    a.ΔΔΔⵠ.ⲆΔᐃᐃⵠ.loopEnd = a.ΔⵠΔᐃⲆᐃⵠ;
                }
                a.ΔΔΔⵠ.ⲆΔᐃᐃⵠ.playbackRate.value = a.ΔⲆⵠᐃⵠ;
                return this;
            },
            ΔⲆᐃᐃⵠᐃΔ: function (a) {
                var b = this;
                if (b.ᐃⵠⲆⲆᐃΔᐃ) {
                    a.ⲆΔᐃᐃⵠ.onended = null;
                    a.ⲆΔᐃᐃⵠ.disconnect(0);
                    try {
                        a.ⲆΔᐃᐃⵠ.buffer = b.ᐃⵠⲆⲆᐃΔᐃ;
                    } catch (a) { }
                }
                a.ⲆΔᐃᐃⵠ = null;
                return b;
            }
        };
        function d(a) {
            this.ⵠⵠΔΔΔᐃⲆ = a;
            this.ⵠΔⵠⲆⲆ();
        }
        d.prototype = {
            ⵠΔⵠⲆⲆ: function () {
                var a = this;
                var b = a.ⵠⵠΔΔΔᐃⲆ;
                a.ⵠⵠᐃΔΔ = b.ⵠⵠᐃΔΔ;
                a.ⲆΔᐃᐃᐃ = b.ⲆΔᐃᐃᐃ;
                a.ᐃⵠᐃⲆΔ = b.ᐃⵠᐃⲆΔ;
                a.ΔⲆⵠᐃⵠ = b.ΔⲆⵠᐃⵠ;
                a.ⵠⲆΔⲆⵠ = 0;
                a.ⲆⲆⵠⲆΔ = true;
                a.ΔᐃⲆⲆⵠ = true;
                a.ᐃⲆΔΔⵠ = "__default";
                a.ⲆⲆΔᐃ = ++j.ⲆᐃⲆᐃⲆⵠΔ;
                b.ⲆΔᐃⲆΔ.push(a);
                a.create();
                return a;
            },
            create: function () {
                var a = this;
                var b = a.ⵠⵠΔΔΔᐃⲆ;
                var c = j.ⵠⵠᐃΔΔ || a.ⵠⵠᐃΔΔ || a.ⵠⵠΔΔΔᐃⲆ.ⵠⵠᐃΔΔ ? 0 : a.ᐃⵠᐃⲆΔ;
                if (b.ⲆᐃⵠΔᐃ) {
                    a.ΔΔΔⵠ = j.ᐃ.createGain === undefined ? j.ᐃ.ΔⲆⵠⲆⵠⲆⲆᐃΔ() : j.ᐃ.createGain();
                    a.ΔΔΔⵠ.gain.setValueAtTime(c, j.ᐃ.currentTime);
                    a.ΔΔΔⵠ.paused = true;
                    a.ΔΔΔⵠ.connect(j.ᐃᐃᐃⵠⵠᐃⵠ);
                } else {
                    a.ΔΔΔⵠ = new Audio();
                    a.ⵠⲆᐃΔΔⵠΔ = a.ΔⲆΔΔⲆΔᐃⲆⲆ.bind(a);
                    a.ΔΔΔⵠ.addEventListener("error", a.ⵠⲆᐃΔΔⵠΔ, false);
                    a.ᐃΔᐃᐃᐃᐃⵠ = a.ⲆⲆⵠᐃΔⵠⲆᐃᐃ.bind(a);
                    a.ΔΔΔⵠ.addEventListener(j.ΔᐃⲆⲆᐃΔᐃ, a.ᐃΔᐃᐃᐃᐃⵠ, false);
                    a.ΔΔΔⵠ.src = b.ⵠⲆⵠⵠᐃ;
                    a.ΔΔΔⵠ.preload = "auto";
                    a.ΔΔΔⵠ.volume = c * j.volume();
                    a.ΔΔΔⵠ.load();
                }
                return a;
            },
            reset: function () {
                var a = this;
                var b = a.ⵠⵠΔΔΔᐃⲆ;
                a.ⵠⵠᐃΔΔ = b.ⵠⵠᐃΔΔ;
                a.ⲆΔᐃᐃᐃ = b.ⲆΔᐃᐃᐃ;
                a.ᐃⵠᐃⲆΔ = b.ᐃⵠᐃⲆΔ;
                a.ΔⲆⵠᐃⵠ = b.ΔⲆⵠᐃⵠ;
                a.ⵠⲆΔⲆⵠ = 0;
                a.ΔᐃᐃⲆᐃⵠⵠ = 0;
                a.ⲆⲆⵠⲆΔ = true;
                a.ΔᐃⲆⲆⵠ = true;
                a.ᐃⲆΔΔⵠ = "__default";
                a.ⲆⲆΔᐃ = ++j.ⲆᐃⲆᐃⲆⵠΔ;
                return a;
            },
            ΔⲆΔΔⲆΔᐃⲆⲆ: function () {
                var a = this;
                a.ⵠⵠΔΔΔᐃⲆ.ⲆΔΔᐃᐃ("loaderror", a.ⲆⲆΔᐃ, a.ΔΔΔⵠ.error ? a.ΔΔΔⵠ.error.code : 0);
                a.ΔΔΔⵠ.removeEventListener("error", a.ⵠⲆᐃΔΔⵠΔ, false);
            },
            ⲆⲆⵠᐃΔⵠⲆᐃᐃ: function () {
                var a = this;
                var b = a.ⵠⵠΔΔΔᐃⲆ;
                b.ⲆΔΔᐃⵠΔΔ = Math.ceil(a.ΔΔΔⵠ.duration * 10) / 10;
                if (Object.keys(b.ᐃⲆΔΔⵠ).length === 0) {
                    b.ᐃⲆΔΔⵠ = {
                        ⲆⲆΔⵠΔᐃᐃΔΔ: [0, b.ⲆΔΔᐃⵠΔΔ * 1000]
                    };
                }
                if (b.ⲆⲆⲆᐃⵠ !== "loaded") {
                    b.ⲆⲆⲆᐃⵠ = "loaded";
                    b.ⲆΔΔᐃᐃ("load");
                    b.Ⲇⵠⵠⵠⵠⵠⵠ();
                }
                a.ΔΔΔⵠ.removeEventListener(j.ΔᐃⲆⲆᐃΔᐃ, a.ᐃΔᐃᐃᐃᐃⵠ, false);
            }
        };
        var f = {};
        function a(a) {
            var b = a.ⵠⲆⵠⵠᐃ;
            if (f[b]) {
                a.ⲆΔΔᐃⵠΔΔ = f[b].duration;
                h(a);
                return;
            }
            if (/^data:[^;]+;base64,/.test(b)) {
                for (var c = atob(b.split(",")[1]), d = new Uint8Array(c.length), e = 0; e < c.length; ++e) {
                    d[e] = c.charCodeAt(e);
                }
                m(d.buffer, a);
            } else {
                var g = new XMLHttpRequest();
                g.open("GET", b, true);
                g.responseType = "arraybuffer";
                g.onload = function () {
                    var b = (g.status + "")[0];
                    if (b === "0" || b === "2" || b === "3") {
                        m(g.response, a);
                    } else {
                        a.ⲆΔΔᐃᐃ("loaderror", null, "Failed loading audio file with status: " + g.status + ".");
                    }
                };
                g.onerror = function () {
                    if (a.ⲆᐃⵠΔᐃ) {
                        a.ΔⲆⲆΔᐃΔΔ = true;
                        a.ⲆᐃⵠΔᐃ = false;
                        a.ⲆΔᐃⲆΔ = [];
                        delete f[b];
                        a.load();
                    }
                };
                k(g);
            }
        }
        function k(a) {
            try {
                a.send();
            } catch (b) {
                a.onerror();
            }
        }
        function m(a, b) {
            j.ᐃ.decodeAudioData(a, function (a) {
                if (a && b.ⲆΔᐃⲆΔ.length > 0) {
                    f[b.ⵠⲆⵠⵠᐃ] = a;
                    h(b, a);
                }
            }, function () {
                b.ⲆΔΔᐃᐃ("loaderror", null, "Decoding audio data failed.");
            });
        }
        function h(a, b) {
            if (b && !a.ⲆΔΔᐃⵠΔΔ) {
                a.ⲆΔΔᐃⵠΔΔ = b.duration;
            }
            if (Object.keys(a.ᐃⲆΔΔⵠ).length === 0) {
                a.ᐃⲆΔΔⵠ = {
                    ⲆⲆΔⵠΔᐃᐃΔΔ: [0, a.ⲆΔΔᐃⵠΔΔ * 1000]
                };
            }
            if (a.ⲆⲆⲆᐃⵠ !== "loaded") {
                a.ⲆⲆⲆᐃⵠ = "loaded";
                a.ⲆΔΔᐃᐃ("load");
                a.Ⲇⵠⵠⵠⵠⵠⵠ();
            }
        }
        function i() {
            try {
                if (typeof AudioContext != "undefined") {
                    j.ᐃ = new AudioContext();
                } else if (typeof ⲆⲆᐃⲆΔΔⲆᐃᐃ != "undefined") {
                    j.ᐃ = new ⲆⲆᐃⲆΔΔⲆᐃᐃ();
                } else {
                    j.ᐃᐃΔⵠΔ = false;
                }
            } catch (a) {
                j.ᐃᐃΔⵠΔ = false;
            }
            var a = /iP(hone|od|ad)/.test(j.ᐃΔΔᐃᐃ && j.ᐃΔΔᐃᐃ.platform);
            var b = j.ᐃΔΔᐃᐃ && j.ᐃΔΔᐃᐃ.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
            var c = b ? parseInt(b[1], 10) : null;
            if (a && c && c < 9) {
                var d = /safari/.test(j.ᐃΔΔᐃᐃ && j.ᐃΔΔᐃᐃ.userAgent.toLowerCase());
                if (j.ᐃΔΔᐃᐃ && j.ᐃΔΔᐃᐃ.ᐃⵠⲆᐃᐃⵠΔⵠⵠ && !d || j.ᐃΔΔᐃᐃ && !j.ᐃΔΔᐃᐃ.ᐃⵠⲆᐃᐃⵠΔⵠⵠ && !d) {
                    j.ᐃᐃΔⵠΔ = false;
                }
            }
            if (j.ᐃᐃΔⵠΔ) {
                j.ᐃᐃᐃⵠⵠᐃⵠ = j.ᐃ.createGain === undefined ? j.ᐃ.ΔⲆⵠⲆⵠⲆⲆᐃΔ() : j.ᐃ.createGain();
                j.ᐃᐃᐃⵠⵠᐃⵠ.gain.value = j.ⵠⵠᐃΔΔ ? 0 : 1;
                j.ᐃᐃᐃⵠⵠᐃⵠ.connect(j.ᐃ.destination);
            }
            j.ᐃᐃΔΔⲆⲆᐃ();
        }
        if (typeof ᐃⲆⵠΔⵠⲆΔ == "function" && ᐃⲆⵠΔⵠⲆΔ.ⲆᐃⲆᐃⲆⲆᐃ) {
            ᐃⲆⵠΔⵠⲆΔ([], function () {
                return {
                    Howler: j,
                    Howl: c
                };
            });
        }
        if (typeof ⵠⵠΔⲆᐃⵠΔ != "undefined") {
            ⵠⵠΔⲆᐃⵠΔ.Howler = j;
            ⵠⵠΔⲆᐃⵠΔ.Howl = c;
        }
        if (typeof bj != "undefined") {
            bj.ᐃⵠⵠⲆΔⲆⵠ = b;
            bj.Howler = j;
            bj.Howl = c;
            bj.ⵠⵠᐃⵠᐃⵠⲆ = d;
        } else if (typeof ᐃΔⵠⵠⲆΔᐃ != "undefined") {
            ᐃΔⵠⵠⲆΔᐃ.ᐃⵠⵠⲆΔⲆⵠ = b;
            ᐃΔⵠⵠⲆΔᐃ.Howler = j;
            ᐃΔⵠⵠⲆΔᐃ.Howl = c;
            ᐃΔⵠⵠⲆΔᐃ.ⵠⵠᐃⵠᐃⵠⲆ = d;
        }
    })();
    (function () {
        ᐃⵠⵠⲆΔⲆⵠ.prototype.ᐃⲆⲆᐃᐃ = [0, 0, 0];
        ᐃⵠⵠⲆΔⲆⵠ.prototype.ᐃⵠΔⲆᐃ = [0, 0, -1, 0, 1, 0];
        ᐃⵠⵠⲆΔⲆⵠ.prototype.ⲆⲆΔⲆⲆᐃⲆ = function (a) {
            var b = this;
            if (!b.ᐃ || !b.ᐃ.listener) {
                return b;
            }
            for (var c = b.ⲆⵠⲆⲆΔ.length - 1; c >= 0; c--) {
                b.ⲆⵠⲆⲆΔ[c].ⲆⲆΔⲆⲆᐃⲆ(a);
            }
            return b;
        };
        ᐃⵠⵠⲆΔⲆⵠ.prototype.ΔⲆⲆᐃ = function (a, b, c) {
            var d = this;
            if (d.ᐃ && d.ᐃ.listener) {
                b = typeof b != "number" ? d.ᐃⲆⲆᐃᐃ[1] : b;
                c = typeof c != "number" ? d.ᐃⲆⲆᐃᐃ[2] : c;
                if (typeof a != "number") {
                    return d.ᐃⲆⲆᐃᐃ;
                } else {
                    d.ᐃⲆⲆᐃᐃ = [a, b, c];
                    d.ᐃ.listener.setPosition(d.ᐃⲆⲆᐃᐃ[0], d.ᐃⲆⲆᐃᐃ[1], d.ᐃⲆⲆᐃᐃ[2]);
                    return d;
                }
            } else {
                return d;
            }
        };
        ᐃⵠⵠⲆΔⲆⵠ.prototype.orientation = function (b, c, d, e, f, g) {
            var h = this;
            if (!h.ᐃ || !h.ᐃ.listener) {
                return h;
            }
            var j = h.ᐃⵠΔⲆᐃ;
            c = typeof c != "number" ? j[1] : c;
            d = typeof d != "number" ? j[2] : d;
            e = typeof e != "number" ? j[3] : e;
            f = typeof f != "number" ? j[4] : f;
            g = typeof g != "number" ? j[5] : g;
            if (typeof b != "number") {
                return j;
            } else {
                h.ᐃⵠΔⲆᐃ = [b, c, d, e, f, g];
                h.ᐃ.listener.setOrientation(b, c, d, e, f, g);
                return h;
            }
        };
        Howl.prototype.ⵠΔⵠⲆⲆ = function (a) {
            return function (b) {
                var c = this;
                c.ᐃⵠΔⲆᐃ = b.orientation || [1, 0, 0];
                c.ΔⲆΔⲆⲆᐃⲆ = b.ⲆⲆΔⲆⲆᐃⲆ || null;
                c.ᐃⲆⲆᐃᐃ = b.ΔⲆⲆᐃ || null;
                c.ⲆⲆΔⵠᐃ = {
                    coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : 360,
                    coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : 360,
                    coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : 0,
                    distanceModel: b.distanceModel !== undefined ? b.distanceModel : "inverse",
                    maxDistance: b.maxDistance !== undefined ? b.maxDistance : 10000,
                    panningModel: b.panningModel !== undefined ? b.panningModel : "HRTF",
                    refDistance: b.refDistance !== undefined ? b.refDistance : 1,
                    rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : 1
                };
                c.ⲆⵠΔΔᐃⲆⲆᐃⵠ = b.ᐃⵠⲆᐃᐃΔⲆⲆⵠ ? [{
                    ΔΔⵠᐃⲆ: b.ᐃⵠⲆᐃᐃΔⲆⲆⵠ
                }] : [];
                c.ⵠᐃⵠⵠΔⵠⵠΔΔ = b.ΔⵠⲆⵠⲆᐃΔΔⵠ ? [{
                    ΔΔⵠᐃⲆ: b.ΔⵠⲆⵠⲆᐃΔΔⵠ
                }] : [];
                c.ⵠΔⵠᐃⵠΔⵠⵠᐃ = b.ⲆᐃΔⲆᐃΔΔᐃΔ ? [{
                    ΔΔⵠᐃⲆ: b.ⲆᐃΔⲆᐃΔΔᐃΔ
                }] : [];
                return a.call(this, b);
            };
        }(Howl.prototype.ⵠΔⵠⲆⲆ);
        Howl.prototype.ⲆⲆΔⲆⲆᐃⲆ = function (c, d) {
            var e = this;
            if (!e.ⲆᐃⵠΔᐃ) {
                return e;
            }
            if (e.ⲆⲆⲆᐃⵠ !== "loaded") {
                e.ⵠⵠⲆⲆⵠ.push({
                    event: "stereo",
                    action: function () {
                        e.ⲆⲆΔⲆⲆᐃⲆ(c, d);
                    }
                });
                return e;
            }
            var f = Howler.ᐃ.createStereoPanner === undefined ? "spatial" : "stereo";
            if (d === undefined) {
                if (typeof c != "number") {
                    return e.ΔⲆΔⲆⲆᐃⲆ;
                }
                e.ΔⲆΔⲆⲆᐃⲆ = c;
                e.ᐃⲆⲆᐃᐃ = [c, 0, 0];
            }
            for (var g = e.ᐃⲆⲆⵠΔ(d), a = 0; a < g.length; a++) {
                var h = e.ⵠⵠᐃᐃᐃ(g[a]);
                if (h) {
                    if (typeof c != "number") {
                        return h.ΔⲆΔⲆⲆᐃⲆ;
                    }
                    h.ΔⲆΔⲆⲆᐃⲆ = c;
                    h.ᐃⲆⲆᐃᐃ = [c, 0, 0];
                    if (h.ΔΔΔⵠ) {
                        h.ⲆⲆΔⵠᐃ.panningModel = "equalpower";
                        if (!h.ΔⲆΔⲆΔ || !h.ΔⲆΔⲆΔ.pan) {
                            b(h, f);
                        }
                        if (f === "spatial") {
                            h.ΔⲆΔⲆΔ.setPosition(c, 0, 0);
                        } else {
                            h.ΔⲆΔⲆΔ.pan.value = c;
                        }
                    }
                    e.ⲆΔΔᐃᐃ("stereo", h.ⲆⲆΔᐃ);
                }
            }
            return e;
        };
        Howl.prototype.ΔⲆⲆᐃ = function (c, d, e, f) {
            var g = this;
            if (!g.ⲆᐃⵠΔᐃ) {
                return g;
            }
            if (g.ⲆⲆⲆᐃⵠ !== "loaded") {
                g.ⵠⵠⲆⲆⵠ.push({
                    event: "pos",
                    action: function () {
                        g.ΔⲆⲆᐃ(c, d, e, f);
                    }
                });
                return g;
            }
            d = typeof d != "number" ? 0 : d;
            e = typeof e != "number" ? -0.5 : e;
            if (f === undefined) {
                if (typeof c != "number") {
                    return g.ᐃⲆⲆᐃᐃ;
                }
                g.ᐃⲆⲆᐃᐃ = [c, d, e];
            }
            for (var a = g.ᐃⲆⲆⵠΔ(f), i = 0; i < a.length; i++) {
                var j = g.ⵠⵠᐃᐃᐃ(a[i]);
                if (j) {
                    if (typeof c != "number") {
                        return j.ᐃⲆⲆᐃᐃ;
                    }
                    j.ᐃⲆⲆᐃᐃ = [c, d, e];
                    if (j.ΔΔΔⵠ) {
                        if (!j.ΔⲆΔⲆΔ || !!j.ΔⲆΔⲆΔ.pan) {
                            b(j, "spatial");
                        }
                        j.ΔⲆΔⲆΔ.setPosition(c, d, e);
                    }
                    g.ⲆΔΔᐃᐃ("pos", j.ⲆⲆΔᐃ);
                }
            }
            return g;
        };
        Howl.prototype.orientation = function (c, d, e, f) {
            var g = this;
            if (!g.ⲆᐃⵠΔᐃ) {
                return g;
            }
            if (g.ⲆⲆⲆᐃⵠ !== "loaded") {
                g.ⵠⵠⲆⲆⵠ.push({
                    event: "orientation",
                    action: function () {
                        g.orientation(c, d, e, f);
                    }
                });
                return g;
            }
            d = typeof d != "number" ? g.ᐃⵠΔⲆᐃ[1] : d;
            e = typeof e != "number" ? g.ᐃⵠΔⲆᐃ[2] : e;
            if (f === undefined) {
                if (typeof c != "number") {
                    return g.ᐃⵠΔⲆᐃ;
                }
                g.ᐃⵠΔⲆᐃ = [c, d, e];
            }
            for (var a = g.ᐃⲆⲆⵠΔ(f), i = 0; i < a.length; i++) {
                var j = g.ⵠⵠᐃᐃᐃ(a[i]);
                if (j) {
                    if (typeof c != "number") {
                        return j.ᐃⵠΔⲆᐃ;
                    }
                    j.ᐃⵠΔⲆᐃ = [c, d, e];
                    if (j.ΔΔΔⵠ) {
                        if (!j.ΔⲆΔⲆΔ) {
                            j.ᐃⲆⲆᐃᐃ ||= g.ᐃⲆⲆᐃᐃ || [0, 0, -0.5];
                            b(j, "spatial");
                        }
                        j.ΔⲆΔⲆΔ.setOrientation(c, d, e);
                    }
                    g.ⲆΔΔᐃᐃ("orientation", j.ⲆⲆΔᐃ);
                }
            }
            return g;
        };
        Howl.prototype.ⵠⲆΔⲆⲆᐃᐃᐃⵠ = function () {
            var c;
            var d;
            var e;
            var f = this;
            var g = arguments;
            if (!f.ⲆᐃⵠΔᐃ) {
                return f;
            }
            if (g.length === 0) {
                return f.ⲆⲆΔⵠᐃ;
            }
            if (g.length === 1) {
                if (typeof g[0] != "object") {
                    if (e = f.ⵠⵠᐃᐃᐃ(parseInt(g[0], 10))) {
                        return e.ⲆⲆΔⵠᐃ;
                    } else {
                        return f.ⲆⲆΔⵠᐃ;
                    }
                }
                c = g[0];
                if (d === undefined) {
                    f.ⲆⲆΔⵠᐃ = {
                        coneInnerAngle: c.coneInnerAngle !== undefined ? c.coneInnerAngle : f.ΔⲆⵠⵠⲆⲆᐃⲆⲆ,
                        coneOuterAngle: c.coneOuterAngle !== undefined ? c.coneOuterAngle : f.ⵠᐃⵠΔⲆⵠΔᐃⲆ,
                        coneOuterGain: c.coneOuterGain !== undefined ? c.coneOuterGain : f.ⵠⲆⲆᐃᐃⵠΔΔⲆ,
                        distanceModel: c.distanceModel !== undefined ? c.distanceModel : f.ⵠⵠⵠⵠⲆΔᐃΔⵠ,
                        maxDistance: c.maxDistance !== undefined ? c.maxDistance : f.ΔⵠⲆΔⵠΔΔᐃᐃ,
                        panningModel: c.panningModel !== undefined ? c.panningModel : f.ⵠⲆⲆⵠⵠᐃᐃⲆΔ,
                        refDistance: c.refDistance !== undefined ? c.refDistance : f.ᐃⵠⲆᐃⵠⵠⲆΔⲆ,
                        rolloffFactor: c.rolloffFactor !== undefined ? c.rolloffFactor : f.ΔⲆᐃΔⵠᐃᐃΔⵠ
                    };
                }
            } else if (g.length === 2) {
                c = g[0];
                d = parseInt(g[1], 10);
            }
            for (var a = f.ᐃⲆⲆⵠΔ(d), j = 0; j < a.length; j++) {
                if (e = f.ⵠⵠᐃᐃᐃ(a[j])) {
                    var k = e.ⲆⲆΔⵠᐃ;
                    k = {
                        coneInnerAngle: c.coneInnerAngle !== undefined ? c.coneInnerAngle : k.coneInnerAngle,
                        coneOuterAngle: c.coneOuterAngle !== undefined ? c.coneOuterAngle : k.coneOuterAngle,
                        coneOuterGain: c.coneOuterGain !== undefined ? c.coneOuterGain : k.coneOuterGain,
                        distanceModel: c.distanceModel !== undefined ? c.distanceModel : k.distanceModel,
                        maxDistance: c.maxDistance !== undefined ? c.maxDistance : k.maxDistance,
                        panningModel: c.panningModel !== undefined ? c.panningModel : k.panningModel,
                        refDistance: c.refDistance !== undefined ? c.refDistance : k.refDistance,
                        rolloffFactor: c.rolloffFactor !== undefined ? c.rolloffFactor : k.rolloffFactor
                    };
                    var m = e.ΔⲆΔⲆΔ;
                    if (m) {
                        m.coneInnerAngle = k.coneInnerAngle;
                        m.coneOuterAngle = k.coneOuterAngle;
                        m.coneOuterGain = k.coneOuterGain;
                        m.distanceModel = k.distanceModel;
                        m.maxDistance = k.maxDistance;
                        m.panningModel = k.panningModel;
                        m.refDistance = k.refDistance;
                        m.rolloffFactor = k.rolloffFactor;
                    } else {
                        e.ᐃⲆⲆᐃᐃ ||= f.ᐃⲆⲆᐃᐃ || [0, 0, -0.5];
                        b(e, "spatial");
                    }
                }
            }
            return f;
        };
        ⵠⵠᐃⵠᐃⵠⲆ.prototype.ⵠΔⵠⲆⲆ = function (a) {
            return function () {
                var b = this;
                var c = b.ⵠⵠΔΔΔᐃⲆ;
                b.ᐃⵠΔⲆᐃ = c.ᐃⵠΔⲆᐃ;
                b.ΔⲆΔⲆⲆᐃⲆ = c.ΔⲆΔⲆⲆᐃⲆ;
                b.ᐃⲆⲆᐃᐃ = c.ᐃⲆⲆᐃᐃ;
                b.ⲆⲆΔⵠᐃ = c.ⲆⲆΔⵠᐃ;
                a.call(this);
                if (b.ΔⲆΔⲆⲆᐃⲆ) {
                    c.ⲆⲆΔⲆⲆᐃⲆ(b.ΔⲆΔⲆⲆᐃⲆ);
                } else if (b.ᐃⲆⲆᐃᐃ) {
                    c.ΔⲆⲆᐃ(b.ᐃⲆⲆᐃᐃ[0], b.ᐃⲆⲆᐃᐃ[1], b.ᐃⲆⲆᐃᐃ[2], b.ⲆⲆΔᐃ);
                }
            };
        }(ⵠⵠᐃⵠᐃⵠⲆ.prototype.ⵠΔⵠⲆⲆ);
        ⵠⵠᐃⵠᐃⵠⲆ.prototype.reset = function (a) {
            return function () {
                var b = this;
                var c = b.ⵠⵠΔΔΔᐃⲆ;
                b.ᐃⵠΔⲆᐃ = c.ᐃⵠΔⲆᐃ;
                b.ᐃⲆⲆᐃᐃ = c.ᐃⲆⲆᐃᐃ;
                b.ⲆⲆΔⵠᐃ = c.ⲆⲆΔⵠᐃ;
                return a.call(this);
            };
        }(ⵠⵠᐃⵠᐃⵠⲆ.prototype.reset);
        function b(a, b) {
            b = b || "spatial";
            if (b === "spatial") {
                a.ΔⲆΔⲆΔ = Howler.ᐃ.createPanner();
                a.ΔⲆΔⲆΔ.coneInnerAngle = a.ⲆⲆΔⵠᐃ.coneInnerAngle;
                a.ΔⲆΔⲆΔ.coneOuterAngle = a.ⲆⲆΔⵠᐃ.coneOuterAngle;
                a.ΔⲆΔⲆΔ.coneOuterGain = a.ⲆⲆΔⵠᐃ.coneOuterGain;
                a.ΔⲆΔⲆΔ.distanceModel = a.ⲆⲆΔⵠᐃ.distanceModel;
                a.ΔⲆΔⲆΔ.maxDistance = a.ⲆⲆΔⵠᐃ.maxDistance;
                a.ΔⲆΔⲆΔ.panningModel = a.ⲆⲆΔⵠᐃ.panningModel;
                a.ΔⲆΔⲆΔ.refDistance = a.ⲆⲆΔⵠᐃ.refDistance;
                a.ΔⲆΔⲆΔ.rolloffFactor = a.ⲆⲆΔⵠᐃ.rolloffFactor;
                a.ΔⲆΔⲆΔ.setPosition(a.ᐃⲆⲆᐃᐃ[0], a.ᐃⲆⲆᐃᐃ[1], a.ᐃⲆⲆᐃᐃ[2]);
                a.ΔⲆΔⲆΔ.setOrientation(a.ᐃⵠΔⲆᐃ[0], a.ᐃⵠΔⲆᐃ[1], a.ᐃⵠΔⲆᐃ[2]);
            } else {
                a.ΔⲆΔⲆΔ = Howler.ᐃ.createStereoPanner();
                a.ΔⲆΔⲆΔ.pan.value = a.ΔⲆΔⲆⲆᐃⲆ;
            }
            a.ΔⲆΔⲆΔ.connect(a.ΔΔΔⵠ);
            if (!a.ⲆⲆⵠⲆΔ) {
                a.ⵠⵠΔΔΔᐃⲆ.pause(a.ⲆⲆΔᐃ, true).play(a.ⲆⲆΔᐃ);
            }
        }
    })();
    var ef = 1;
    var tf = 1;
    var nf = {
        ⲆⵠⲆᐃᐃⵠⵠⲆⵠ: 12,
        ΔᐃⲆΔΔ: 1,
        ⲆⲆⵠⲆΔᐃᐃ: 12,
        ⲆⵠⵠⵠᐃⲆⲆᐃᐃ: 5000,
        ⲆᐃⲆⲆᐃΔⲆ: 3000,
        Δⵠⵠⵠᐃ: 2,
        ᐃⵠⲆΔᐃⵠⲆⵠᐃ: 5000,
        ⵠᐃᐃᐃⲆᐃΔⵠΔ: 12,
        ⲆⵠⵠⵠⲆ: 3,
        ⵠᐃᐃⵠΔ: 8,
        ᐃⵠⵠⵠᐃⵠΔ: 460000,
        ᐃⲆⲆ: 6,
        ⵠⲆᐃⵠΔⲆⲆⲆⲆ: 5000
    };
    var of = [];
    of[-1] = nf.ΔᐃⲆΔΔ;
    of[28] = nf.ΔᐃⲆΔΔ;
    of[49] = nf.ΔᐃⲆΔΔ;
    of[sr.ⵠΔΔΔᐃⲆΔⵠⵠ] = nf.Δⵠⵠⵠᐃ;
    of[8] = nf.Δⵠⵠⵠᐃ;
    of[1] = nf.Δⵠⵠⵠᐃ;
    of[3] = nf.Δⵠⵠⵠᐃ;
    of[4] = nf.Δⵠⵠⵠᐃ;
    of[31] = nf.Δⵠⵠⵠᐃ;
    of[32] = nf.Δⵠⵠⵠᐃ;
    of[9] = nf.Δⵠⵠⵠᐃ;
    of[57] = nf.Δⵠⵠⵠᐃ;
    of[0] = nf.Δⵠⵠⵠᐃ;
    of[63] = nf.Δⵠⵠⵠᐃ;
    of[17] = nf.Δⵠⵠⵠᐃ;
    of[5] = nf.Δⵠⵠⵠᐃ;
    of[6] = nf.Δⵠⵠⵠᐃ;
    of[30] = nf.Δⵠⵠⵠᐃ;
    of[sr.ΔⵠⲆⲆⲆᐃⵠᐃΔ] = nf.Δⵠⵠⵠᐃ;
    of[18] = nf.Δⵠⵠⵠᐃ;
    of[12] = nf.Δⵠⵠⵠᐃ;
    of[13] = nf.Δⵠⵠⵠᐃ;
    of[14] = nf.Δⵠⵠⵠᐃ;
    of[15] = nf.Δⵠⵠⵠᐃ;
    of[16] = nf.Δⵠⵠⵠᐃ;
    of[33] = nf.Δⵠⵠⵠᐃ;
    of[sr.ⲆᐃΔΔᐃⵠΔΔⵠ] = nf.Δⵠⵠⵠᐃ;
    of[35] = nf.Δⵠⵠⵠᐃ;
    of[36] = nf.Δⵠⵠⵠᐃ;
    of[37] = nf.Δⵠⵠⵠᐃ;
    of[38] = nf.Δⵠⵠⵠᐃ;
    of[39] = nf.Δⵠⵠⵠᐃ;
    of[45] = nf.Δⵠⵠⵠᐃ;
    of[62] = nf.Δⵠⵠⵠᐃ;
    of[54] = nf.Δⵠⵠⵠᐃ;
    of[53] = nf.Δⵠⵠⵠᐃ;
    of[46] = nf.ⲆⵠⵠⵠⲆ;
    of[50] = nf.ⲆⵠⵠⵠⲆ;
    of[51] = nf.ⲆⵠⵠⵠⲆ;
    of[52] = nf.ⲆⵠⵠⵠⲆ;
    ΔⵠⲆⵠ = [];
    ΔⵠⲆⵠ[0] = 0;
    ΔⵠⲆⵠ[1] = 1;
    ΔⵠⲆⵠ[2] = 1;
    ΔⵠⲆⵠ[3] = 1;
    ΔⵠⲆⵠ[4] = 0;
    ΔⵠⲆⵠ[5] = 0;
    ΔⵠⲆⵠ[6] = 0;
    ΔⵠⲆⵠ[7] = 0;
    ΔⵠⲆⵠ[8] = 0;
    ΔⵠⲆⵠ[9] = 0;
    ΔⵠⲆⵠ[10] = 1;
    ΔⵠⲆⵠ[11] = 1;
    ΔⵠⲆⵠ[12] = 1;
    ΔⵠⲆⵠ[13] = 1;
    ΔⵠⲆⵠ[14] = 1;
    ΔⵠⲆⵠ[15] = 1;
    ΔⵠⲆⵠ[16] = 0;
    ΔⵠⲆⵠ[17] = 0;
    ΔⵠⲆⵠ[18] = 0;
    ΔⵠⲆⵠ[19] = 0;
    ΔⵠⲆⵠ[20] = 0;
    ΔⵠⲆⵠ[21] = 0;
    ΔⵠⲆⵠ[22] = 0;
    ΔⵠⲆⵠ[23] = 1;
    ΔⵠⲆⵠ[24] = 1;
    ΔⵠⲆⵠ[25] = 1;
    ΔⵠⲆⵠ[26] = 1;
    ΔⵠⲆⵠ[27] = 1;
    ΔⵠⲆⵠ[28] = 1;
    ΔⵠⲆⵠ[29] = 1;
    ΔⵠⲆⵠ[30] = 1;
    ΔⵠⲆⵠ[31] = 1;
    ΔⵠⲆⵠ[32] = 1;
    ΔⵠⲆⵠ[33] = 1;
    ΔⵠⲆⵠ[34] = 1;
    ΔⵠⲆⵠ[35] = 1;
    ΔⵠⲆⵠ[36] = 1;
    ΔⵠⲆⵠ[37] = 1;
    ΔⵠⲆⵠ[38] = 1;
    ΔⵠⲆⵠ[40] = 0;
    ΔⵠⲆⵠ[41] = 0;
    ΔⵠⲆⵠ[42] = 0;
    ΔⵠⲆⵠ[50] = 1;
    ΔⵠⲆⵠ[51] = 1;
    ΔⵠⲆⵠ[52] = 1;
    ΔⵠⲆⵠ[55] = 0;
    ΔⵠⲆⵠ[56] = 0;
    ΔⵠⲆⵠ[57] = 0;
    ΔⵠⲆⵠ[58] = 0;
    ⲆᐃΔΔΔ = [];
    ⲆᐃΔΔΔ[tw.ⵠᐃΔⲆⵠ] = 0;
    ⲆᐃΔΔΔ[tw.ΔⵠᐃⵠⲆ] = 0;
    ⲆᐃΔΔΔ[tw.ⵠΔᐃΔΔ] = 0;
    ⲆᐃΔΔΔ[tw.ᐃᐃᐃⲆⵠ] = 0;
    ⲆᐃΔΔΔ[tw.ⵠⲆΔⵠΔ] = -1;
    ⲆᐃΔΔΔ[tw.ⵠⵠᐃⲆⵠ] = -1;
    ⲆᐃΔΔΔ[tw.ⲆΔᐃΔⲆ] = 0;
    ⲆᐃΔΔΔ[tw.ᐃⵠΔᐃⵠ] = 0;
    ⲆᐃΔΔΔ[tw.ᐃⲆⵠⵠΔ] = 0;
    ⲆᐃΔΔΔ[tw.ⲆᐃΔⲆⵠ] = 0;
    ⲆᐃΔΔΔ[tw.ⵠⲆⵠΔΔ] = 1;
    ⲆᐃΔΔΔ[tw.ⵠΔⵠᐃΔ] = 1;
    ⲆᐃΔΔΔ[tw.ⵠⵠⲆⵠⲆ] = 1;
    ⲆᐃΔΔΔ[tw.ᐃⲆⲆⲆΔ] = 1;
    ⲆᐃΔΔΔ[tw.ⲆΔⲆⵠⲆ] = 1;
    ⲆᐃΔΔΔ[tw.ΔᐃⵠⵠⲆ] = 1;
    ⲆᐃΔΔΔ[tw.ΔᐃΔⲆᐃ] = 1;
    ⲆᐃΔΔΔ[tw.ⲆΔⲆΔⲆ] = 0;
    ⲆᐃΔΔΔ[tw.ⲆⵠᐃᐃⲆ] = 1;
    ⲆᐃΔΔΔ[tw.ΔⵠⵠᐃΔ] = 1;
    ⲆᐃΔΔΔ[tw.ᐃΔᐃᐃᐃ] = 1;
    ⲆᐃΔΔΔ[tw.Δᐃⵠⵠⵠ] = 1;
    ⲆᐃΔΔΔ[tw.Ⲇⵠᐃᐃⵠ] = 1;
    ⲆᐃΔΔΔ[tw.ⲆⲆᐃᐃⲆ] = 0;
    ⲆᐃΔΔΔ[tw.ᐃΔⲆⵠⵠ] = 1;
    ⲆᐃΔΔΔ[tw.ᐃᐃⵠⵠᐃ] = 1;
    ⲆᐃΔΔΔ[tw.ⵠⵠⲆⲆⲆ] = 1;
    ⲆᐃΔΔΔ[tw.ᐃⲆⲆᐃⲆ] = 1;
    ⲆᐃΔΔΔ[tw.ⵠⲆᐃⲆⲆ] = 1;
    ⲆᐃΔΔΔ[tw.ⵠⵠΔᐃⲆ] = 0;
    ⲆᐃΔΔΔ[tw.ⲆⵠⲆᐃⵠ] = 1;
    ⲆᐃΔΔΔ[tw.ΔΔⵠⲆᐃ] = 1;
    ⲆᐃΔΔΔ[tw.ΔⲆΔΔⲆ] = 1;
    ⲆᐃΔΔΔ[tw.ᐃⵠᐃᐃᐃ] = 1;
    ⲆᐃΔΔΔ[tw.ᐃΔᐃⲆⲆ] = 1;
    ⲆᐃΔΔΔ[tw.Ⲇⵠⵠⵠⵠ] = 1;
    var af = bj.console;
    af.log = af.info = af.error = af.warn = af.debug = af.ᐃⲆᐃΔᐃⲆⲆⲆᐃ = af.trace = af.time = af.timeEnd = function () { };
    ⲆᐃΔΔΔ[tw.ⲆΔⵠᐃᐃ] = 1;
    ⲆᐃΔΔΔ[tw.ᐃⵠⵠΔⵠ] = 1;
    ⲆᐃΔΔΔ[tw.ΔⲆΔΔⵠ] = 0;
    ⲆᐃΔΔΔ[tw.ΔⵠⲆⲆⲆ] = 1;
    var rf = {
        ΔᐃΔⲆⲆΔⲆ: {
            ᐃᐃΔⲆΔ: null,
            path: ["audio/ambience.mp3"],
            ᐃΔ: {
                d2: [90684, 300, false],
                d1: [90391, 300, false],
                d0: [90086, 300, false]
            },
            sample: {
                d0: nf.ⵠᐃᐃⵠΔ,
                d1: nf.ⵠᐃᐃⵠΔ,
                d2: nf.ⵠᐃᐃⵠΔ
            }
        },
        ᐃⲆⲆᐃΔΔⲆ: {
            ᐃᐃΔⲆΔ: null,
            path: ["audio/ambience.mp3"],
            ᐃΔ: {
                p0: [89303, 300, Gj],
                p2: [89815, 300, false],
                p1: [89549, 300, false]
            },
            sample: {
                p0: nf.ⵠᐃᐃⵠΔ,
                p1: nf.ⵠᐃᐃⵠΔ,
                p2: nf.ⵠᐃᐃⵠΔ
            }
        },
        ⲆΔⲆΔΔⲆⵠ: {
            ᐃᐃΔⲆΔ: null,
            path: ["audio/ambience.mp3"],
            ᐃΔ: {
                w0: [88195, 300, false],
                w2: [88751, 300, false],
                w3: [89025, 300, false],
                w1: [88473, 300, ug]
            },
            sample: {
                w0: nf.ⵠᐃᐃⵠΔ,
                w1: nf.ⵠᐃᐃⵠΔ,
                w2: nf.ⵠᐃᐃⵠΔ,
                w3: nf.ⵠᐃᐃⵠΔ
            }
        },
        ᐃⲆⲆΔᐃΔⲆ: {
            ᐃᐃΔⲆΔ: null,
            path: ["audio/ambience.mp3"],
            ᐃΔ: {
                ᐃⲆⲆⵠⲆᐃᐃ: [32604, 21890, true],
                ΔⵠⵠⵠⵠΔΔ: [91022, 400, pn],
                ⵠᐃⵠⵠΔΔᐃ: [54524, 11393, true],
                ΔⲆⵠⲆᐃⵠⵠ: [66961, 21223, Un],
                ᐃⲆΔⵠⵠᐃᐃ: [3100, 8800, f],
                ⵠᐃᐃᐃⲆΔⲆⲆⲆ: [100, 2800, true],
                ⲆΔⵠᐃΔ: [28380, 1797, true],
                ⵠᐃⲆΔᐃ: [12356, 6965, true],
                ⵠⲆⵠⲆⲆΔⵠ: [66961, 21223, hi],
                ⲆΔᐃⵠⲆⲆᐃ: [30562, 655, jk],
                ⲆⲆΔΔᐃⲆⲆ: [92249, 500, false],
                ⲆⲆⵠⵠᐃΔΔ: [19882, 8301, true],
                ᐃᐃⵠⲆⲆ: [91431, 400, Qr],
                ΔΔᐃᐃΔᐃⲆ: [66014, 925, al],
                ΔⲆᐃⵠΔᐃᐃ: [31658, 813, true]
            },
            sample: {
                ⵠᐃᐃᐃⲆΔⲆⲆⲆ: 1,
                ᐃⲆΔⵠⵠᐃᐃ: 1,
                ⲆⲆⵠⵠᐃΔΔ: 1,
                ᐃⲆⲆⵠⲆᐃᐃ: 1,
                ⵠᐃⵠⵠΔΔᐃ: 1,
                ΔⲆⵠⲆᐃⵠⵠ: 1,
                ⵠⲆⵠⲆⲆΔⵠ: 1,
                ⵠᐃⲆΔᐃ: nf.ⵠᐃᐃⵠΔ,
                ⲆΔⵠᐃΔ: nf.ⵠᐃᐃⵠΔ,
                ⲆΔᐃⵠⲆⲆᐃ: nf.ⵠᐃᐃⵠΔ,
                ΔⲆᐃⵠΔᐃᐃ: nf.ⵠᐃᐃⵠΔ,
                ΔΔᐃᐃΔᐃⲆ: nf.ⵠᐃᐃⵠΔ,
                ΔⵠⵠⵠⵠΔΔ: nf.ᐃⲆⲆ,
                ᐃᐃⵠⲆⲆ: nf.ᐃⲆⲆ,
                ⲆⲆΔΔᐃⲆⲆ: nf.ᐃⲆⲆ
            }
        }
    };
    function sf(b, c, d, e, f, i, a, j, k, h, l) {
        this.r = 1;
        this.ΔⵠⵠⲆΔ = b;
        this.ΔⵠᐃⲆⵠΔᐃ = b;
        this.ΔⲆᐃ = c;
        this.Ⲇⵠᐃ = d;
        this.fade = e;
        this.ⵠⵠⵠᐃΔΔᐃ = f;
        this.ⲆⵠΔᐃΔⵠⲆ = i;
        this.ᐃⲆⲆΔ = a;
        this.ᐃⲆᐃⲆⲆⵠᐃ = j;
        this.source = k;
        this.source.ⲆⵠᐃⲆᐃᐃΔ = k.x + k.w;
        this.source.ᐃᐃⲆΔΔ = k.y + k.ⵠⲆⵠ;
        this.ΔⵠΔΔⲆΔᐃΔⲆ = h;
        this.ⵠⵠΔᐃⲆᐃΔ = l;
        this.ᐃᐃⲆΔⵠⵠⵠ = 0;
        this.ⲆⵠᐃⲆⵠⲆᐃ = {
            d: 5,
            ᐃⲆⲆⵠ: 5
        };
        this.ΔᐃⵠⲆⲆ = function () {
            this.ΔⵠⵠⲆΔ -= Af;
            if (this.ΔⵠⵠⲆΔ < 0) {
                this.ΔⵠⵠⲆΔ = this.ΔⵠᐃⲆⵠΔᐃ;
                var a = rf.ᐃⲆⲆΔᐃΔⲆ.ᐃᐃΔⲆΔ.playing(this.ΔⲆᐃ);
                var b = rf.ᐃⲆⲆΔᐃΔⲆ.ᐃᐃΔⲆΔ.playing(this.Ⲇⵠᐃ);
                if (a && !b) {
                    var c = this.ᐃⲆⲆΔ.volume(this.ΔⲆᐃ) * tf;
                    var d = tf * (Math.random() * this.ⲆⵠΔᐃΔⵠⲆ + this.ⵠⵠⵠᐃΔΔᐃ);
                    this.ᐃⲆⲆΔ.fade(c, d, this.fade, this.ΔⲆᐃ);
                } else if (!a && b) {
                    c = tf * this.ᐃⲆⲆΔ.volume(this.Ⲇⵠᐃ);
                    d = (Math.random() * this.ⲆⵠΔᐃΔⵠⲆ + this.ⵠⵠⵠᐃΔΔᐃ) * tf;
                    this.ᐃⲆⲆΔ.fade(c, d, this.fade, this.Ⲇⵠᐃ);
                }
            }
        };
        this.transition = function () {
            this.ΔⵠⵠⲆΔ = this.ΔⵠᐃⲆⵠΔᐃ;
            this.ⲆⵠᐃⲆⵠⲆᐃ.d = this.ⲆⵠᐃⲆⵠⲆᐃ.ᐃⲆⲆⵠ;
            if (Cf.time) {
                this.ᐃⲆⲆΔ.fade(0, this.ⵠⵠⵠᐃΔΔᐃ * tf, this.ᐃⲆᐃⲆⲆⵠᐃ, this.ΔⲆᐃ);
                this.ᐃⲆⲆΔ.play(this.ΔⲆᐃ);
                if (this.ᐃⲆⲆΔ.playing(this.Ⲇⵠᐃ)) {
                    var a = this.ᐃⲆⲆΔ.volume(this.Ⲇⵠᐃ) * tf;
                    this.ᐃⲆⲆΔ.fade(a, 0, this.ᐃⲆᐃⲆⲆⵠᐃ, this.Ⲇⵠᐃ);
                }
            } else {
                this.ᐃⲆⲆΔ.fade(0, this.ⵠⵠⵠᐃΔΔᐃ * tf, this.ᐃⲆᐃⲆⲆⵠᐃ, this.Ⲇⵠᐃ);
                this.ᐃⲆⲆΔ.play(this.Ⲇⵠᐃ);
                if (this.ᐃⲆⲆΔ.playing(this.ΔⲆᐃ)) {
                    a = this.ᐃⲆⲆΔ.volume(this.ΔⲆᐃ) * tf;
                    this.ᐃⲆⲆΔ.fade(a, 0, this.ᐃⲆᐃⲆⲆⵠᐃ, this.ΔⲆᐃ);
                }
            }
        };
        this.check = function (a) {
            if (this.ᐃᐃⲆΔⵠⵠⵠ) {
                if (ΔⲆⲆⵠ.ⵠⵠΔᐃⲆᐃΔ(a, this.ΔⵠΔΔⲆΔᐃΔⲆ)) {
                    if (!_w.transition && Cf.ⲆⲆⵠᐃⵠ.now < nf.ᐃⵠⵠⵠᐃⵠΔ) {
                        if (Cf.time) {
                            if (!this.ᐃⲆⲆΔ.playing(this.ΔⲆᐃ)) {
                                this.ⲆⵠᐃⲆⵠⲆᐃ.d -= Af;
                                if (this.ⲆⵠᐃⲆⵠⲆᐃ.d < 0) {
                                    this.transition();
                                }
                            }
                        } else if (!this.ᐃⲆⲆΔ.playing(this.Ⲇⵠᐃ)) {
                            this.ⲆⵠᐃⲆⵠⲆᐃ.d -= Af;
                            if (this.ⲆⵠᐃⲆⵠⲆᐃ.d < 0) {
                                this.transition();
                            }
                        }
                    }
                } else {
                    this.ᐃᐃⲆΔⵠⵠⵠ = 0;
                    if (this.ᐃⲆⲆΔ.playing(this.ΔⲆᐃ)) {
                        var b = tf * this.ᐃⲆⲆΔ.volume(this.ΔⲆᐃ);
                        this.ᐃⲆⲆΔ.fade(b, 0, this.ᐃⲆᐃⲆⲆⵠᐃ, this.ΔⲆᐃ);
                    }
                    if (this.ᐃⲆⲆΔ.playing(this.Ⲇⵠᐃ)) {
                        b = this.ᐃⲆⲆΔ.volume(this.Ⲇⵠᐃ) * tf;
                        this.ᐃⲆⲆΔ.fade(b, 0, this.ᐃⲆᐃⲆⲆⵠᐃ, this.Ⲇⵠᐃ);
                    }
                }
            } else if (ΔⲆⲆⵠ.ⵠⵠΔᐃⲆᐃΔ(a, this.ⵠⵠΔᐃⲆᐃΔ)) {
                this.ᐃᐃⲆΔⵠⵠⵠ = 1;
                if (!_w.transition && nf.ᐃⵠⵠⵠᐃⵠΔ > Cf.ⲆⲆⵠᐃⵠ.now) {
                    this.transition();
                }
            }
        };
        this.ⲆᐃΔ = function (a, b) {
            var c;
            var d;
            c = this.source.x > a.x ? _w.ⵠⵠⵠᐃⵠΔᐃ(this.source.x) : this.source.ⲆⵠᐃⲆᐃᐃΔ < a.x ? _w.ⵠⵠⵠᐃⵠΔᐃ(this.source.ⲆⵠᐃⲆᐃᐃΔ) : b.x;
            d = a.y < this.source.y ? _w.ΔⲆΔᐃⲆᐃⵠ(this.source.y) : this.source.ᐃᐃⲆΔΔ < a.y ? _w.ΔⲆΔᐃⲆᐃⵠ(this.source.ᐃᐃⲆΔΔ) : b.y;
            this.ᐃⲆⲆΔ.pos(c, d, -0.5, this.ΔⲆᐃ);
            this.ᐃⲆⲆΔ.pos(c, d, -0.5, this.Ⲇⵠᐃ);
        };
    }
    function hf(b, c) {
        const d = (b | 5766) & ~(b & 5766);
        const e = (24 << (c >> 16 & 255)) + (8 << (c >> 8 & 255)) + (0 << (c >> 24 & 255)) + (16 << (c & 255));
        const f = Hv(d, e, d, e);
        const g = vf(d, e);
        return (24 << ((f ^ g) & 255)) + (8 << ((f ^ g) >> 8 & 255)) + (16 << ((f ^ g) >> 24 & 255)) + (0 << ((f ^ g) >> 16 & 255));
    }
    function lf(a, b) {
        ek(Tu, a, b);
        const c = Mq(Cc[0], Cc[1], Cc[0]);
        Mq(Cc[1], Cc[0], Cc[1]);
        return ~(c & 54687) & c | ~(c & 54687) & 54687;
    }
    function gf(b, c) {
        ak(Tu, b, c);
        e = Cc[0];
        f = Cc[1];
        g = Cc[0];
        h = Cc[1];
        Vj(Tu, e, f, g, h);
        const d = ((141 + (Tw(Cc[0], Cc[1], Cc[2], Cc[3], Cc[0], Cc[1]) ^ Tw(Cc[2], Cc[3], Cc[0], Cc[1], Cc[2], Cc[3]))) * 75 + 74) % 65537;
        var e;
        var f;
        var g;
        var h;
        Tw(Cc[0], Cc[1], Cc[0], Cc[1], Cc[0], Cc[1]);
        return ~(d & 61278) & (d | 61278);
    }
    ⵠⵠΔⵠⵠ = {
        ΔΔᐃⵠΔⵠⵠⵠᐃ: 0.4,
        ⲆΔⲆⲆᐃⵠΔ: 2,
        ⲆⵠΔᐃΔⲆⲆᐃⵠ: 0.2,
        ΔⲆΔⲆⲆΔⲆ: 1,
        ⵠᐃᐃΔΔΔᐃᐃᐃ: 0.2,
        ⲆΔᐃⲆⲆⲆⲆ: 100,
        ΔⵠⲆΔⲆΔᐃ: 300,
        ΔⲆΔⵠᐃᐃΔ: 0,
        ᐃᐃⵠⲆᐃΔⵠ: 4,
        ΔᐃⲆΔΔᐃᐃ: 100,
        ᐃⲆⲆᐃⵠⵠᐃ: 3,
        ⵠᐃⲆΔⲆΔⲆ: 100,
        ⵠⲆᐃⵠⲆ: 2,
        ᐃⵠΔⵠΔⲆⵠⲆᐃ: 0.2
    };
    function uf(a, b, c) {
        this.ΔᐃΔΔᐃⵠⵠ = a;
        this.c = 0;
        this.ᐃⲆⲆΔ = b;
        this.ᐃⵠΔΔⵠ = c;
        this.max = c.length;
        this.play = function () {
            this.c = (this.c + 1) % this.max;
            var a = this.ᐃⵠΔΔⵠ[this.c];
            this.ΔᐃΔΔᐃⵠⵠ.ⵠⵠᐃΔΔⲆΔ(this.ᐃⲆⲆΔ, a);
            this.ᐃⲆⲆΔ.play(a);
        };
    }
    function bf(a) {
        this.ΔⵠᐃⲆΔⵠⵠ = 1;
        this.ⵠΔⲆΔ = 0;
        this.mode = -1;
        this.ⲆΔⵠᐃΔ = _w.sample.ⲆΔⵠᐃΔ[a];
        this.ⲆΔᐃⵠⲆⲆᐃ = _w.sample.ⲆΔᐃⵠⲆⲆᐃ[a];
        this.ΔⲆᐃⵠΔᐃᐃ = _w.sample.ΔⲆᐃⵠΔᐃᐃ[a];
        this.ΔΔᐃᐃΔᐃⲆ = _w.sample.ΔΔᐃᐃΔᐃⲆ[a];
        this.ΔΔΔⵠⵠⵠΔ = new uf(this, rf.ᐃⲆⲆᐃΔΔⲆ.ᐃᐃΔⲆΔ, _w.ⵠⵠⲆⵠΔ.ΔΔΔⵠⵠⵠΔ[a]);
        this.ᐃᐃᐃⲆᐃ = new uf(this, rf.ⲆΔⲆΔΔⲆⵠ.ᐃᐃΔⲆΔ, _w.ⵠⵠⲆⵠΔ.ᐃᐃᐃⲆᐃ[a]);
        this.ᐃⲆⵠⵠⵠ = new uf(this, rf.ΔᐃΔⲆⲆΔⲆ.ᐃᐃΔⲆΔ, _w.ⵠⵠⲆⵠΔ.ᐃⲆⵠⵠⵠ[a]);
        this.ⲆⵠⵠᐃΔ = a;
        this.x = 0;
        this.y = 0;
        this.ⲆᐃΔΔᐃ = 0;
        this.ΔⵠⵠⲆΔ = ⵠⵠΔⵠⵠ.ᐃⵠᐃΔᐃⲆᐃⲆᐃ;
        this.ΔⲆⲆᐃ = {
            y: 0,
            x: 0
        };
        this.ⲆᐃⲆⲆⲆ = rf.ᐃⲆⲆΔᐃΔⲆ.ᐃᐃΔⲆΔ;
        this.ⲆⵠᐃΔΔΔⵠΔΔ = function (a) {
            if (a === nf.ΔᐃⲆΔΔ) {
                this.ΔΔΔⵠⵠⵠΔ.play();
            } else if (nf.Δⵠⵠⵠᐃ === a) {
                this.ᐃᐃᐃⲆᐃ.play();
            } else if (a === nf.ⲆⵠⵠⵠⲆ) {
                this.ᐃⲆⵠⵠⵠ.play();
            }
        };
        this.ΔⲆΔⲆⲆᐃⵠ = function (a) {
            if (a.ⲆΔⵠⵠⲆⲆⲆ > 0) {
                return ⵠⵠΔⵠⵠ.ⵠⲆᐃⵠⲆ;
            } else if (a.ⲆΔᐃⲆⵠᐃⲆ > 0) {
                return ⵠⵠΔⵠⵠ.ΔⲆΔⲆⲆΔⲆ;
            } else if (a.ⲆᐃᐃΔⲆ > 0 || a.ΔⵠΔⲆᐃ > 0) {
                return ⵠⵠΔⵠⵠ.ᐃⲆⲆᐃⵠⵠᐃ;
            } else {
                return ⵠⵠΔⵠⵠ.ΔⲆΔⵠᐃᐃΔ;
            }
        };
        this.ⵠΔⵠⲆⲆ = function (a) {
            this.ΔⵠᐃⲆΔⵠⵠ = 0;
            this.ⵠΔⲆΔ = a;
            var b = Cf.ⵠⵠⵠΔⲆ[a];
            b.ⲆⵠⵠᐃΔ = this.ⲆⵠⵠᐃΔ;
            this.mode = this.ΔⲆΔⲆⲆᐃⵠ(b);
            this.ΔⲆⲆᐃ.x = b.x;
            this.ΔⲆⲆᐃ.y = b.y;
        };
        this.ΔΔΔΔΔΔᐃ = function () {
            this.ΔⵠᐃⲆΔⵠⵠ = 1;
            this.mode = -1;
            this.ⲆᐃⲆⲆⲆ.stop(this.ⲆΔⵠᐃΔ);
            this.ⲆᐃⲆⲆⲆ.stop(this.ⲆΔᐃⵠⲆⲆᐃ);
            this.ⲆᐃⲆⲆⲆ.stop(this.ΔⲆᐃⵠΔᐃᐃ);
            this.ⲆᐃⲆⲆⲆ.stop(this.ΔΔᐃᐃΔᐃⲆ);
        };
        this.fade = function (a, b) {
            var c = this.ⲆᐃⲆⲆⲆ.volume(a) * ef;
            this.ⲆᐃⲆⲆⲆ.fade(c, 0, b, a);
        };
        this.ⵠⵠᐃΔΔⲆΔ = function (a, b) {
            if (this.ⲆᐃΔΔᐃ && this.ⲆⵠⵠᐃΔ) {
                a.pos(this.x, this.y, -0.5, b);
            }
        };
        this.ΔᐃⵠⲆⲆ = function (b, c, d, e, f, g, a) {
            this.ΔⵠⵠⲆΔ = g;
            if (e && this.mode === f) {
                var i = ef * this.ⲆᐃⲆⲆⲆ.volume(b);
                if (this.ⲆᐃΔΔᐃ) {
                    var j = (d * Math.random() + c) * ef;
                    this.ⲆᐃⲆⲆⲆ.fade(i, j, a, b);
                } else {
                    this.ⲆᐃⲆⲆⲆ.fade(i, 0, a, b);
                }
            } else if (f != this.mode && this.ⲆᐃΔΔᐃ) {
                this.ⲆᐃⲆⲆⲆ.fade(0, ef * (c + d), a, b);
            } else if (this.ⲆᐃΔΔᐃ) {
                i = this.ⲆᐃⲆⲆⲆ.volume(b) * ef;
                j = ef * (d * Math.random() + c);
                this.ⲆᐃⲆⲆⲆ.fade(i, j, a, b);
            }
            this.ⵠⵠᐃΔΔⲆΔ(this.ⲆᐃⲆⲆⲆ, b);
            this.ⲆᐃⲆⲆⲆ.play(b);
        };
        this.ⲆᐃΔ = function () {
            var a = Cf.ⵠⵠⵠΔⲆ[this.ⵠΔⲆΔ];
            this.ΔⵠⵠⲆΔ -= Af;
            if (this.ΔⵠⵠⲆΔ <= 0) {
                var b = 0;
                if (this.ΔⲆⲆᐃ.x != a.x || a.y != this.ΔⲆⲆᐃ.y) {
                    if (!this.ⲆᐃΔΔᐃ) {
                        b = 1;
                        this.ⲆᐃΔΔᐃ = 1;
                    }
                    this.x = _w.ΔᐃⲆⵠⲆⵠᐃ(a.x, ⵠⵠΔⵠⵠ.ⲆΔⲆⲆᐃⵠΔ);
                    this.y = _w.ᐃΔⵠⲆⲆΔᐃ(a.y, ⵠⵠΔⵠⵠ.ⲆΔⲆⲆᐃⵠΔ);
                } else if (this.ⲆᐃΔΔᐃ) {
                    b = 1;
                    this.ⲆᐃΔΔᐃ = 0;
                }
                this.ΔⲆⲆᐃ.x = a.x;
                this.ΔⲆⲆᐃ.y = a.y;
                ᐃⲆΔⲆ = this.ΔⲆΔⲆⲆᐃⵠ(a);
                if (ᐃⲆΔⲆ != this.mode) {
                    if (this.mode === ⵠⵠΔⵠⵠ.ΔⲆΔⲆⲆΔⲆ) {
                        this.fade(this.ⲆΔⵠᐃΔ, ⵠⵠΔⵠⵠ.ΔⵠⲆΔⲆΔᐃ);
                    } else if (this.mode === ⵠⵠΔⵠⵠ.ⵠⲆᐃⵠⲆ) {
                        this.fade(this.ⲆΔᐃⵠⲆⲆᐃ, ⵠⵠΔⵠⵠ.ⵠᐃⲆΔⲆΔⲆ);
                    } else if (this.mode === ⵠⵠΔⵠⵠ.ΔⲆΔⵠᐃᐃΔ) {
                        this.fade(this.ΔⲆᐃⵠΔᐃᐃ, ⵠⵠΔⵠⵠ.ⲆΔᐃⲆⲆⲆⲆ);
                    } else if (ⵠⵠΔⵠⵠ.ᐃⲆⲆᐃⵠⵠᐃ === this.mode) {
                        this.fade(this.ΔΔᐃᐃΔᐃⲆ, ⵠⵠΔⵠⵠ.ΔᐃⲆΔΔᐃᐃ);
                    }
                }
                if (ᐃⲆΔⲆ === ⵠⵠΔⵠⵠ.ΔⲆΔⲆⲆΔⲆ) {
                    this.ΔᐃⵠⲆⲆ(this.ⲆΔⵠᐃΔ, 0.08, 0.3, b, ᐃⲆΔⲆ, ⵠⵠΔⵠⵠ.ΔΔᐃⵠΔⵠⵠⵠᐃ, ⵠⵠΔⵠⵠ.ΔⵠⲆΔⲆΔᐃ);
                } else if (ⵠⵠΔⵠⵠ.ⵠⲆᐃⵠⲆ === ᐃⲆΔⲆ) {
                    this.ΔᐃⵠⲆⲆ(this.ⲆΔᐃⵠⲆⲆᐃ, 0.2, 0.3, b, ᐃⲆΔⲆ, ⵠⵠΔⵠⵠ.ⵠᐃᐃΔΔΔᐃᐃᐃ, ⵠⵠΔⵠⵠ.ⵠᐃⲆΔⲆΔⲆ);
                } else if (ⵠⵠΔⵠⵠ.ΔⲆΔⵠᐃᐃΔ === ᐃⲆΔⲆ) {
                    this.ΔᐃⵠⲆⲆ(this.ΔⲆᐃⵠΔᐃᐃ, 0.3, 0.6, b, ᐃⲆΔⲆ, ⵠⵠΔⵠⵠ.ᐃⵠΔⵠΔⲆⵠⲆᐃ, ⵠⵠΔⵠⵠ.ⲆΔᐃⲆⲆⲆⲆ);
                } else if (ⵠⵠΔⵠⵠ.ᐃⲆⲆᐃⵠⵠᐃ === ᐃⲆΔⲆ) {
                    this.ΔᐃⵠⲆⲆ(this.ΔΔᐃᐃΔᐃⲆ, 0.1, 0.25, b, ᐃⲆΔⲆ, ⵠⵠΔⵠⵠ.ⲆⵠΔᐃΔⲆⲆᐃⵠ, ⵠⵠΔⵠⵠ.ΔᐃⲆΔΔᐃᐃ);
                }
                this.mode = ᐃⲆΔⲆ;
            }
        };
        this.check = function () {
            var a = Cf.ⵠⵠⵠΔⲆ[this.ⵠΔⲆΔ];
            if (a) {
                return xh;
            } else {
                this.ΔΔΔΔΔΔᐃ(a);
                return false;
            }
        };
    }
    function df(b, c, d, e) {
        const f = (8 << (b >> 24 & 255)) + (24 << (b >> 16 & 255)) + (0 << (b & 255)) + (16 << (b >> 8 & 255));
        const g = (8 << (c >> 24 & 255)) + (16 << (c & 255)) + (0 << (c >> 16 & 255)) + (24 << (c >> 8 & 255));
        const a = (d | 51555) & ~(d & 51555);
        const h = (e + 64642) % 65441;
        return ((38960 + (bw(f, g, a, h) ^ Qw(f, g, a, h, f, g))) * 2147483629 + 2147483587) % 2147483647;
    }
    function vf(a, b) {
        const c = (0 << (a & 255)) + (24 << (a >> 24 & 255)) + (8 << (a >> 16 & 255)) + (16 << (a >> 8 & 255));
        const d = ~(b & 5482) & 5482 | ~(b & 5482) & b;
        const e = Ak(c, d);
        Ev(c, d, c, d, c, d);
        return e ^ 33261;
    }
    ΔⵠΔΔᐃⲆⵠ = 0;
    document.getElementById("version").innerHTML = ow.ⲆᐃᐃΔΔᐃᐃ + ".3";
    var mf;
    var Ww = [];
    var Xw = {
        time: Math.floor(Math.random() * 2),
        items: []
    };
    document.getElementById("game_body").style.backgroundColor = nr.ⲆⵠⲆⵠᐃ[Xw.time];
    Xw.items.push(new ww(tw.ΔⵠᐃⵠⲆ, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1));
    Xw.items.push(new ww(tw.ᐃⲆᐃⵠⵠ, 0, 0, 0, 0, 0, 0, 5));
    Xw.items.push(new ww(tw.ⲆΔᐃΔⲆ, 0, 0, 0, 0, Math.PI / 4, 0, 0));
    Xw.items.push(new ww(tw.ᐃⲆᐃⵠⵠ, 0, 0, 0, 0, 0, 0, 5));
    ΔᐃⵠⲆ = new function () {
        var b = this;
        function a(a) {
            let b = a.name || a.a;
            if (a.auto) {
                return b;
            } else {
                return b + " [" + a.nu + " " + Xg[324] + "]";
            }
        }
        this.ⵠΔᐃᐃ = null;
        this.ᐃⲆᐃⵠᐃ = 0;
        this.ⲆⵠⵠΔΔ = [];
        this.ᐃᐃΔᐃⵠⵠⵠ = {};
        this.ΔᐃⲆⲆᐃⵠⲆ = {};
        this.ⵠⲆⵠⲆΔ = [[], [], [], [], [], [], [], [], []];
        this.ⵠⲆⵠΔΔⲆᐃ = [-1, -1, -1, -1, -1, -1, -1, -1, -1];
        this.ⵠᐃᐃᐃᐃ = 0;
        this.ΔᐃΔΔⲆᐃᐃ = 0;
        this.ᐃⲆⵠᐃᐃⲆᐃ = function (a) {
            if (As !== fw) {
                b.ⲆⵠⵠΔΔ.push({
                    a: fw.name,
                    gm: fw.mode,
                    idx: 0,
                    m: 100,
                    nu: 0,
                    id: 0
                });
                a();
                return;
            }
            fetch(jw + "/list", {
                method: "GET"
            }).then(function (c) {
                if (c.ok) {
                    c.json().then(function (c) {
                        b.ⲆⵠⵠΔΔ = [];
                        b.ΔᐃⲆⲆᐃⵠⲆ = {};
                        for (let a in qw.ⲆΔᐃⲆⵠⵠⲆ) {
                            const c = qw.ⲆΔᐃⲆⵠⵠⲆ[a];
                            b.ⲆⵠⵠΔΔ.push({
                                a: "Auto Select",
                                gm: c,
                                m: 100,
                                nu: 0,
                                auto: hi
                            });
                        }
                        var d = 0;
                        var e = 1;
                        for (let f = 0; c.length > f; f++) {
                            const i = c[f];
                            const a = i.n;
                            const j = i.l;
                            const k = i.p;
                            const h = [];
                            b.ᐃᐃΔᐃⵠⵠⵠ[a] = h;
                            const l = [];
                            for (let b = 0; k.length > b; b++) {
                                const c = a + k[b][d];
                                l.push(c);
                                h.push(c);
                            }
                            for (let c = 0; j.length > c; c++) {
                                const f = j[c];
                                let g;
                                let a = qw.ⲆΔᐃⲆⵠⵠⲆ[f[2]];
                                let i = a + f[e];
                                g = a in b.ΔᐃⲆⲆᐃⵠⲆ ? ++b.ΔᐃⲆⲆᐃⵠⲆ[a] : b.ΔᐃⲆⲆᐃⵠⲆ[a] = 1;
                                if (i in b.ΔᐃⲆⲆᐃⵠⲆ) {
                                    ⵠⲆⵠⵠⵠⵠᐃ = ++b.ΔᐃⲆⲆᐃⵠⲆ[i];
                                } else {
                                    ⵠⲆⵠⵠⵠⵠᐃ = b.ΔᐃⲆⲆᐃⵠⲆ[i] = 1;
                                }
                                b.ⲆⵠⵠΔΔ.push({
                                    name: f[4],
                                    a: qw.ⲆⲆⵠΔⲆΔⵠΔⲆ[f[e]] + " " + ⵠⲆⵠⵠⵠⵠᐃ,
                                    r: f[e],
                                    gm: qw.ⲆΔᐃⲆⵠⵠⲆ[f[2]],
                                    idx: g,
                                    m: 100,
                                    nu: f[3],
                                    id: f[e] + f[d],
                                    p: l
                                });
                            }
                        }
                        a();
                    });
                } else {
                    bj.setTimeout(function () {
                        b.ᐃⲆⵠᐃᐃⲆᐃ(a);
                    }, 3000);
                }
            });
        };
        this.ⲆΔⵠⵠⲆⵠⵠΔΔ = function (a) {
            var b = [];
            for (var c = 0; a.length > c; c++) {
                if (a[c].a.indexOf($q) !== -1) {
                    b.push(c);
                }
            }
            if (b.length === 0) {
                return 0;
            } else {
                return b[Math.floor(Math.random() * b.length)];
            }
        };
        this.ΔΔⲆΔⲆⵠⵠ = function (b) {
            var c = 0;
            for (var d = 0; d < b.length; d++) {
                c += b[d].nu;
            }
            var e = document.getElementById("servselect");
            if (ΔᐃⵠⲆ.ⵠⲆⵠΔΔⲆᐃ[ΔᐃⵠⲆ.ⵠᐃᐃᐃᐃ] === -1) {
                ΔᐃⵠⲆ.ⵠⲆⵠΔΔⲆᐃ[ΔᐃⵠⲆ.ⵠᐃᐃᐃᐃ] = e.selectedIndex = ΔᐃⵠⲆ.ⲆΔⵠⵠⲆⵠⵠΔΔ(b);
            } else {
                e.selectedIndex = ΔᐃⵠⲆ.ⵠⲆⵠΔΔⲆᐃ[ΔᐃⵠⲆ.ⵠᐃᐃᐃᐃ];
            }
            var f = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + b[e.selectedIndex].a + (b[e.selectedIndex].nu > 0 ? " [" + b[e.selectedIndex].nu + " " + Xg[324] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + Xg[323] + " (" + this.ⵠΔⲆΔⵠΔΔ + ") " + Xg[325] + "</li>";
            for (d = 0; b.length > d; d++) {
                f += "<li role=\"option\">" + a(b[d]) + "</li>\n";
            }
            f += "<li role=\"option\" id=\"selectDisabled\">(" + c + ") " + Xg[326] + "</li>";
            f += "</div>";
            e.innerHTML = f;
            $(".md-select").on("click", function () {
                $(this).toggleClass("active");
            });
            $(".md-select ul li").on("click", function () {
                var b = $(this).text();
                var c = -1;
                for (var d = ΔᐃⵠⲆ.ⵠⲆⵠⲆΔ[ΔᐃⵠⲆ.ⵠᐃᐃᐃᐃ], e = 0; e < d.length; e++) {
                    if (a(d[e]) === b) {
                        c = e;
                        break;
                    }
                }
                if (c !== -1) {
                    document.getElementById("servselect").selectedIndex = c;
                    ΔᐃⵠⲆ.ⵠⲆⵠΔΔⲆᐃ[ΔᐃⵠⲆ.ⵠᐃᐃᐃᐃ] = c;
                    $(".md-select ul li").removeClass("active");
                    $(this).addClass("active");
                    $(".md-select label button").text(b);
                }
            });
        };
        this.ⵠΔⲆΔⵠΔΔ = 0;
        this.ΔΔⲆⵠᐃⲆᐃⲆⵠ = function () {
            this.ⵠΔⲆΔⵠΔΔ = 0;
            for (var a = 0; a < ΔᐃⵠⲆ.ⲆⵠⵠΔΔ.length; a++) {
                if (this.ⲆⵠⵠΔΔ[a].gm == "experimental") {
                    this.ⵠⲆⵠⲆΔ[qw.ⵠᐃΔΔΔ].push(this.ⲆⵠⵠΔΔ[a]);
                } else if (this.ⲆⵠⵠΔΔ[a].gm == "zombies") {
                    this.ⵠⲆⵠⲆΔ[qw.ΔⲆᐃⵠⵠ].push(this.ⲆⵠⵠΔΔ[a]);
                } else if (this.ⲆⵠⵠΔΔ[a].gm == "community") {
                    this.ⵠⲆⵠⲆΔ[qw.ⵠᐃΔΔᐃ].push(this.ⲆⵠⵠΔΔ[a]);
                } else if (this.ⲆⵠⵠΔΔ[a].gm == "forest") {
                    this.ⵠⲆⵠⲆΔ[qw.ⵠΔⵠⲆᐃ].push(this.ⲆⵠⵠΔΔ[a]);
                } else if (this.ⲆⵠⵠΔΔ[a].gm == "battle-royale") {
                    this.ⵠⲆⵠⲆΔ[qw.ⵠᐃΔⵠΔᐃΔ].push(this.ⲆⵠⵠΔΔ[a]);
                } else if (this.ⲆⵠⵠΔΔ[a].gm == "vampires") {
                    this.ⵠⲆⵠⲆΔ[qw.ⵠΔᐃΔⵠ].push(this.ⲆⵠⵠΔΔ[a]);
                } else {
                    this.ⵠⲆⵠⲆΔ[qw.ⲆⵠΔⲆⵠ].push(this.ⲆⵠⵠΔΔ[a]);
                }
                this.ⵠΔⲆΔⵠΔΔ += this.ⲆⵠⵠΔΔ[a].nu;
            }
            for (a = 0; this.ⵠⲆⵠⲆΔ.length > a; a++) {
                if (this.ⵠⲆⵠⲆΔ[a].length === 0) {
                    this.ⵠⲆⵠⲆΔ[a].push({
                        a: Xg[327],
                        ᐃⵠⲆᐃⲆⲆⵠᐃΔ: 0,
                        ⲆΔ: "127.0.0.1",
                        ⲆⵠⲆ: 80
                    });
                }
            }
            this.ΔΔⲆΔⲆⵠⵠ(this.ⵠⲆⵠⲆΔ[0]);
            this.Ⲇᐃⵠⵠⵠ = function (a) {
                ΔᐃⵠⲆ.ⵠᐃᐃᐃᐃ = a;
                ΔᐃⵠⲆ.ΔΔⲆΔⲆⵠⵠ(ΔᐃⵠⲆ.ⵠⲆⵠⲆΔ[ΔᐃⵠⲆ.ⵠᐃᐃᐃᐃ]);
                ΔᐃⵠⲆ.ΔΔⲆΔⲆⵠⵠ(ΔᐃⵠⲆ.ⵠⲆⵠⲆΔ[ΔᐃⵠⲆ.ⵠᐃᐃᐃᐃ]);
                document.getElementById("servselect").selectedIndex = ΔᐃⵠⲆ.ⵠᐃᐃᐃᐃ;
            };
        };
        this.ᐃᐃⲆⵠᐃⲆⲆ = 0;
        this.ⲆᐃΔⵠⵠΔⲆ = 0;
        this.ΔⲆΔⵠⲆ = null;
        this.timeout = function () {
            b.ⲆᐃΔⵠⵠΔⲆ++;
            b.ⵠΔᐃᐃ.close();
            if (ow.ⵠⲆⵠᐃⵠⵠⲆⲆⲆ < b.ⲆᐃΔⵠⵠΔⲆ) {
                Mf = 1;
                mf.ΔᐃᐃⲆΔᐃᐃΔⲆ = ow.ΔᐃᐃⲆⵠⲆᐃⵠᐃ;
                b.ⵠⲆⵠⲆᐃ(Xg[300]);
                mf.waiting = false;
                if (Yw.reconnect.enabled) {
                    $w.ⲆᐃᐃΔᐃ(mf.ᐃⲆⲆΔᐃ);
                }
            } else if (Yw.ΔⲆᐃⲆⲆΔΔ === undefined || Yw.ΔⵠΔⲆⵠᐃⲆ === undefined || Yw.ΔⵠⵠⵠⲆⵠⵠ === undefined) {
                mf.ᐃᐃⵠΔᐃΔΔ(function () {
                    b.ⲆᐃΔⵠⵠⵠⵠ();
                }, 1);
            } else {
                b.ⲆᐃΔⵠⵠⵠⵠ();
            }
        };
        this.ᐃΔⲆⲆⵠΔΔ = function (a) {
            if (this.ᐃⲆᐃⵠᐃ == this.ⵠΔᐃᐃ.ᐃⲆᐃⵠᐃ) {
                this.ᐃⲆᐃⵠᐃ++;
                this.ⵠⲆⵠⲆᐃ(Xg[301] + a);
                $w.ⲆᐃᐃΔᐃ(mf.ᐃⲆⲆΔᐃ);
            }
        };
        this.ⲆⲆΔⵠΔⲆⲆ = function () {
            this.ⵠⲆⵠⲆᐃ("You speak too much");
        };
        this.ΔΔⲆⲆΔᐃΔᐃⲆ = function () {
            clearTimeout(this.ΔⲆΔⵠⲆ);
            this.ⵠⲆⵠⲆᐃ(Xg[302]);
            mf.waiting = false;
        };
        this.ΔΔᐃⲆⵠΔΔᐃΔ = function () {
            Yw.ᐃⲆⲆⵠⲆ.open = ia;
        };
        this.ᐃⵠΔᐃⲆⲆⵠⵠⲆ = function () {
            $w.ΔⲆΔΔⲆⲆᐃ = 0;
        };
        this.ΔΔⵠᐃΔΔᐃΔΔ = function () {
            $w.ΔΔΔᐃΔΔⲆ = 0;
        };
        this.ⵠᐃΔⵠⲆⵠⲆⲆΔ = function (a) {
            Yw.ᐃⲆΔⵠⵠ.ᐃΔᐃⲆΔ = a;
            if (Cf.ⵠᐃⵠⲆᐃ > -300) {
                if (a === 0) {
                    this.ⵠⲆⵠⲆᐃ(Xg[340]);
                } else {
                    this.ⵠⲆⵠⲆᐃ(Xg[341]);
                }
            }
        };
        this.ⵠⲆⲆⵠⲆ = function (a) {
            Yw.ⵠⲆⲆⵠⲆ = a;
        };
        this.ⵠΔᐃⵠᐃⵠΔΔⲆ = function (a) {
            Yw.ᐃΔΔⵠⲆᐃᐃ = a;
        };
        this.ᐃΔΔⵠⲆᐃᐃ = function (a) {
            Yw.ᐃᐃΔⲆⵠ.ᐃΔᐃⲆΔ = a;
            if (Cf.ⲆᐃᐃΔⲆ > -300) {
                if (a === 0) {
                    this.ⵠⲆⵠⲆᐃ(Xg[342]);
                } else {
                    this.ⵠⲆⵠⲆᐃ(Xg[343]);
                }
            }
        };
        this.ᐃᐃΔΔⲆᐃΔⲆⵠ = function (a) {
            if (a === 0) {
                document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
            } else if (a === 1) {
                document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
            } else if (a === 2) {
                document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
            } else if (a === 3) {
                document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
            }
        };
        this.ΔᐃΔⲆΔᐃᐃᐃᐃ = function () {
            $w.ΔΔⵠΔⵠⲆⲆ = 0;
        };
        this.ⵠⲆᐃΔᐃΔᐃΔⵠ = function () {
            $w.ᐃΔΔⲆΔⵠᐃ = 0;
        };
        this.ᐃⵠⲆⲆⵠΔᐃⵠⵠ = function () {
            Yw.ⵠᐃΔᐃ.ⵠᐃⲆⵠᐃ = [];
            Yw.ⵠᐃΔᐃ.ᐃⵠᐃ = [];
            Yw.ⵠᐃΔᐃ.id = -1;
            Yw.ⵠᐃΔᐃ.ⵠⲆⵠⵠⲆΔⲆ.stop();
            Yw.ⲆⵠᐃΔ.ⵠᐃⵠᐃᐃ = [];
            Yw.ⲆⵠᐃΔ.ⲆⵠⵠⲆⵠ = tr;
            Yw.ⲆⵠᐃΔ.ⵠΔΔⵠᐃΔⲆⵠⲆ = false;
            Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ = -1;
            Yw.ⲆⵠᐃΔ.id = -1;
            Yw.ⲆⵠᐃΔ.ⵠᐃⵠΔⵠ = false;
            Yw.ⲆⵠᐃΔ.ⲆᐃⵠⲆⵠ = false;
            Yw.ⲆⵠᐃΔ.ⵠᐃⲆΔᐃ = false;
            Yw.ⲆⵠᐃΔ.ⲆᐃⵠΔΔⵠΔ = false;
            Yw.ⲆⵠᐃΔ.timeout = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(false, 0, 1, 0, 1, 1);
        };
        this.ⲆΔⵠΔᐃΔⵠΔⵠ = function () {
            clearTimeout(this.ΔⲆΔⵠⲆ);
            this.ⵠⲆⵠⲆᐃ();
            mf.waiting = false;
        };
        this.ⵠᐃΔⵠⲆⲆᐃ = function (a) {
            for (var b = 0; a.length > b; b++) {
                if (typeof a[b] === "string") {
                    a[b] = ΔⲆⲆⵠ.ΔᐃⲆⲆⵠⲆᐃ(a[b]);
                }
            }
            Yw.ⵠΔΔΔⲆ.ᐃΔΔⲆᐃ(a[1], a[2], a[3], a[4]);
        };
        this.message = function (a) {
            this.ⵠⲆⵠⲆᐃ(a);
        };
        this.ΔΔⵠᐃⵠⲆⲆⵠⲆ = function () {
            clearTimeout(this.ΔⲆΔⵠⲆ);
            this.ⵠⲆⵠⲆᐃ(Xg[339]);
            mf.waiting = false;
        };
        this.ΔⲆΔᐃⵠⲆⲆᐃᐃ = function () {
            clearTimeout(this.ΔⲆΔⵠⲆ);
            this.ⵠⲆⵠⲆᐃ(Xg[338]);
            mf.waiting = false;
        };
        this.ᐃⲆⲆⵠᐃᐃⲆᐃᐃ = function () {
            clearTimeout(this.ΔⲆΔⵠⲆ);
            this.ⵠⲆⵠⲆᐃ(Xg[304]);
            mf.waiting = rj;
        };
        this.ᐃΔΔΔᐃᐃᐃΔᐃ = function () {
            Yw.ⵠᐃΔᐃ.ΔⲆΔⲆᐃⲆΔ(1, 0);
            $w.ᐃⵠⵠΔⵠΔΔ();
        };
        this.ⲆΔΔⵠᐃᐃΔⵠⲆ = function (a) {
            var b = a[1];
            var c = Cf.ΔᐃᐃΔ[b];
            c.ᐃᐃᐃⵠ = a[2];
            c.ΔᐃᐃⲆⲆ = a[3];
            c.ᐃΔΔᐃⵠⲆΔ = a[4];
            c.ΔⵠΔΔⵠ = a[5];
            c.ΔⵠᐃΔⵠ = a[6];
            c.Ⲇᐃⵠᐃᐃ = a[7];
            c.level = a[8];
            var d = Cf.ⵠⵠⵠΔⲆ[b * Cf.ᐃᐃⵠⵠΔΔⵠ];
            if (d) {
                d.ᐃᐃᐃⵠ = a[2];
                d.ΔᐃᐃⲆⲆ = a[3];
                d.ᐃΔΔᐃⵠⲆΔ = a[4];
                d.ΔⵠΔΔⵠ = a[5];
            }
        };
        this.ΔⲆⵠⲆⲆΔⵠᐃⲆ = function (a) {
            if (a === 29) {
                Yw.ⵠᐃΔᐃ.ΔⲆΔⲆᐃⲆΔ(1, 0);
                $w.ᐃⵠⵠΔⵠΔΔ();
            } else {
                this.ᐃⵠⲆⲆᐃᐃᐃ([0, a, 1]);
            }
            Yw.ⲆⵠᐃΔ.ᐃᐃⵠⲆⵠᐃⵠ();
        };
        this.ΔⵠᐃᐃᐃᐃᐃⲆⲆ = function (a) {
            Yw.ᐃⲆᐃΔᐃ.ΔⵠⵠⲆΔ = 0;
            Yw.ⲆⵠᐃΔ.ᐃⵠᐃⵠᐃⲆΔⲆⵠ(a);
        };
        this.ⵠⵠⵠᐃⵠⲆⵠⵠΔ = function (a) {
            for (var b = Ls[a].r, c = 0; c < b.length; c++) {
                if (Yw.ⵠᐃΔᐃ.max > Yw.ⵠᐃΔᐃ.ⵠᐃⲆⵠᐃ.length || Yw.ⵠᐃΔᐃ.ᐃⵠᐃ[b[c][0]] > 0) {
                    var d = Math.floor(b[c][1] * 0.8);
                    if (!d) {
                        continue;
                    }
                    this.ᐃⵠⲆⲆᐃᐃᐃ([0, b[c][0], d]);
                }
            }
            Yw.ⲆⵠᐃΔ.ᐃᐃⵠⲆⵠᐃⵠ();
        };
        this.ⵠᐃⵠⲆⲆΔᐃΔⲆ = function (a) {
            Yw.ᐃⲆᐃΔᐃ.ΔⵠⵠⲆΔ = 0;
            Yw.ⲆⵠᐃΔ.ⲆᐃᐃⲆᐃᐃⲆΔⵠ(a);
        };
        this.ⵠⲆⵠⲆᐃ = function (a) {
            if (Yw.alert.text) {
                if (a !== Yw.alert.text && a !== Yw.alert.list[Yw.alert.list.length - 1]) {
                    Yw.alert.list.push(a);
                }
            } else {
                Yw.alert.text = a;
            }
        };
        this.ᐃⲆΔⲆᐃⲆⵠᐃⵠ = function () {
            this.ⵠⲆⵠⲆᐃ(Xg[305]);
        };
        this.ⲆⲆⲆᐃΔⲆΔⵠⲆ = function () {
            var a;
            a = Yw.Ⲇⵠᐃ == 0 ? Xg[306] : Xg[307] + (Yw.Ⲇⵠᐃ + 1) + Xg[308];
            this.ⵠⲆⵠⲆᐃ(a);
            Yw.Ⲇⵠᐃ++;
        };
        this.ᐃⲆᐃᐃᐃᐃⲆᐃΔ = function () {
            clearTimeout(b.ΔⲆΔⵠⲆ);
            Yw.reconnect.enabled = tr;
            Yw.ⵠⲆⵠᐃᐃ = Qr;
            this.ⵠⲆⵠⲆᐃ(Xg[309]);
            $w.ⲆᐃᐃΔᐃ(mf.ᐃⲆⲆΔᐃ);
            this.ⵠΔᐃᐃ.close();
        };
        this.ᐃⲆⵠᐃⵠⵠⲆⵠᐃ = function () {
            Mf = 1;
            clearTimeout(this.ΔⲆΔⵠⲆ);
            this.ⵠⲆⵠⲆᐃ(Xg[310]);
            mf.waiting = tr;
        };
        this.ⲆΔᐃⵠⲆⵠΔΔⵠ = function () {
            Mf = 1;
            clearTimeout(this.ΔⲆΔⵠⲆ);
            this.ⵠⲆⵠⲆᐃ(Xg[311]);
            mf.waiting = ql;
        };
        this.ⲆⲆᐃᐃⵠΔᐃⵠⵠ = function (a) {
            var b = a[1];
            var c = Cf.ΔᐃᐃΔ;
            c[b].Δᐃⵠⵠᐃ = a[2];
            c[b].ᐃᐃᐃⵠ = a[3];
            c[b].ΔᐃᐃⲆⲆ = a[4];
            c[b].ᐃΔΔᐃⵠⲆΔ = a[5];
            c[b].ΔⵠΔΔⵠ = a[6];
            c[b].ΔⵠᐃΔⵠ = a[7];
            c[b].Ⲇᐃⵠᐃᐃ = a[8];
            c[b].level = a[9];
            c[b].ⵠⵠᐃΔⵠ = 0;
            c[b].ⲆⲆⲆᐃΔⵠⵠ = null;
            c[b].label = null;
            c[b].ⵠⵠᐃᐃΔⲆⲆ = null;
            c[b].ⵠⲆⵠᐃᐃ = Ig;
            if (dw === 1) {
                c[b].Δᐃⵠⵠᐃ += "|" + b;
            }
        };
        this.ΔⲆⲆᐃⵠᐃᐃΔⲆ = function () {
            this.ⵠΔᐃᐃ[cw](rq[lo].stringify([27]));
        };
        this.ΔᐃΔᐃᐃⲆΔⵠᐃ = function () {
            this.ⵠⲆⵠⲆᐃ(Xg[312]);
        };
        this.ⲆᐃΔᐃⲆⲆᐃ = function () {
            this.ⵠⲆⵠⲆᐃ(Xg[313]);
        };
        this.ⵠⲆᐃⵠᐃⵠᐃⵠⲆ = function (a) {
            this.ⵠΔᐃᐃ[cw](Jo[Ko].stringify([24, a]));
            Yw.ᐃⲆⲆⵠⲆ.open = gn;
        };
        this.ⲆΔΔⲆⵠⲆⵠⲆᐃ = function (a) {
            for (var b = lw[a - 1].items, c = 0; b.length > c && Yw.ⵠᐃΔᐃ.ⵠᐃⲆⵠᐃ.length < Yw.ⵠᐃΔᐃ.max; c++) {
                var d = b[c][1];
                var e = b[c][0];
                if (b[c][1] === 29) {
                    Yw.ⵠᐃΔᐃ.ΔⲆΔⲆᐃⲆΔ(1, 0);
                } else {
                    this.ᐃⵠⲆⲆᐃᐃᐃ([0, d, e]);
                }
            }
        };
        this.ᐃⵠⲆⲆᐃᐃᐃ = function (b) {
            for (var c = b.length, d = Yw.ⵠᐃΔᐃ, e = 1; c > e; e += 2) {
                var f = b[e];
                var g = b[e + 1];
                for (var h = 0; h < d.ⵠᐃⲆⵠᐃ.length; h++) {
                    if (f == d.ⵠᐃⲆⵠᐃ[h].id) {
                        d.ᐃⵠᐃ[f] += g;
                        break;
                    }
                }
                if (d.ⵠᐃⲆⵠᐃ.length == h) {
                    d.ᐃⵠᐃ[f] = g;
                    d.ⵠᐃⲆⵠᐃ.push($w.ΔⲆΔ[f]);
                    $w.ᐃⵠⵠΔⵠΔΔ();
                }
            }
            Yw.ⲆⵠᐃΔ.ⲆᐃΔ();
        };
        this.ᐃΔᐃᐃ = function (b, c, d, e, f, g, a) {
            Yw.ᐃΔᐃᐃ.ᐃᐃᐃⲆ = b / 100;
            Yw.ᐃΔᐃᐃ.ⵠⲆⵠ = c / 100;
            Yw.ᐃΔᐃᐃ.c = d / 100;
            Yw.ᐃΔᐃᐃ.ⲆⲆᐃ = e / 100;
            Yw.ᐃΔᐃᐃ.ⵠⲆᐃ = f / 100;
            Yw.ᐃΔᐃᐃ.ⲆΔⲆⵠⵠᐃᐃ = g / 100;
            Yw.ⵠⲆⲆⵠⲆ = a;
        };
        this.ⲆΔⵠⲆᐃⲆⵠᐃᐃ = function (a) {
            $w.ⲆⵠΔⲆ.modify(a, 2);
        };
        this.ΔᐃⲆⵠᐃⲆⲆᐃᐃ = function (a) {
            $w.ⲆⵠΔⲆ.modify(a, 0);
        };
        this.claimed = function (a) {
            $w.ⲆⵠΔⲆ.modify(a, 3);
        };
        this.ⵠⲆⵠᐃΔΔⵠⵠᐃ = function (a, b) {
            Yw.ᐃΔᐃᐃ.ᐃᐃᐃⲆ = a / 100;
            Yw.ⵠⲆⲆⵠⲆ = b;
        };
        this.ⲆⵠⲆⲆΔⵠᐃᐃΔ = function (a) {
            Yw.ᐃΔᐃᐃ.ⲆⲆᐃ = a / 100;
        };
        this.ᐃⲆⵠΔⵠΔΔⵠⵠ = function (a) {
            Yw.ᐃΔᐃᐃ.ⵠⲆⵠ = a / 100;
        };
        this.ᐃΔΔᐃⲆⲆⲆⲆⲆ = function (a) {
            Yw.ᐃΔᐃᐃ.ⲆΔⲆⵠⵠᐃᐃ = a / 100;
        };
        this.ᐃᐃⵠⲆⵠⲆᐃᐃⵠ = function (a) {
            Yw.ᐃΔᐃᐃ.c = a / 100;
        };
        this.ⲆⵠⲆΔⵠΔᐃΔⵠ = function (a) {
            Cf.time = a;
            Cf.transition = true;
            _w.transition = 1;
        };
        this.ΔⵠᐃⲆⲆⲆᐃⲆΔ = function () {
            document.getElementById("game_body").style.backgroundColor = nr.ⲆⵠⲆⵠᐃ[Cf.time];
        };
        this.ᐃⵠᐃⲆᐃⲆⲆᐃⵠ = function (a) {
            if (qw.ⲆΔⲆΔⲆΔΔ == Cf.mode && Cf.ΔᐃᐃΔ[a].Δᐃⵠⵠᐃ !== "spectator") {
                this.ⵠⲆⵠⲆᐃ(Cf.ΔᐃᐃΔ[a].Δᐃⵠⵠᐃ + Xg[314]);
            }
            Cf.ΔᐃᐃΔ[a].ⵠⲆⵠᐃᐃ = false;
        };
        this.ΔⲆⵠⵠᐃᐃⲆⵠⲆ = function (a) {
            var b = new Uint16Array(a);
            ᐃⲆⲆΔ.ᐃⵠⵠ.ⵠᐃΔΔⲆ(b[1], b[2]);
        };
        this.ΔᐃⲆⵠᐃⲆΔⵠΔ = function (a) {
            var b = new Uint16Array(a);
            Yw.ᐃⵠⵠ.ⵠᐃΔΔⲆ(b[1], b[2]);
        };
        this.ⵠᐃⲆᐃΔᐃⲆⵠⵠ = function (b, c) {
            var d = new Uint16Array(c);
            for (var e = (b.length - 2) / 4, f = 0; f < e; f++) {
                var g = d[1 + f * 2];
                var i = b[4 + f * 4];
                var j = (b[5 + f * 4] >> 1) / 127 * Math.PI * 2;
                var k = Cf.ⵠⵠⵠΔⲆ[i * Cf.ᐃᐃⵠⵠΔΔⵠ + g];
                if (k && k.ⵠⵠΔ) {
                    if (_w.loaded && _w.ᐃⲆⲆΔᐃ) {
                        _w.ⵠⵠΔ(b[5 + f * 4] & 1, ⲆᐃΔΔΔ[k.type], k.x, k.y);
                    }
                    k.ⵠⵠΔ.angle = j;
                    k.ⵠⵠΔ.ⲆᐃΔ = j;
                }
            }
        };
        this.ΔⲆᐃⵠⵠΔᐃΔᐃ = function (b) {
            var c = new Uint16Array(b);
            for (var d = (c.length - 1) / 4, e = 0; e < d; e++) {
                var i;
                var j = e * 4;
                var k = c[1 + j];
                var m = c[2 + j];
                var p = Math.PI * ((c[3 + j] >> 1) / 127) * 2;
                var q = c[4 + j];
                var t = Ww.Δᐃᐃⵠ[m][k];
                switch (q) {
                    case 0:
                        (i = t.p[0][0]).angle = p;
                        i.ⲆᐃΔ = true;
                        break;
                    case 1:
                        (i = t.s[0][0]).angle = p;
                        i.ⲆᐃΔ = Fl;
                        break;
                    case 2:
                        (i = t.s[1][0]).angle = p;
                        i.ⲆᐃΔ = f;
                        break;
                    case 3:
                        (i = t.s[2][0]).angle = p;
                        i.ⲆᐃΔ = true;
                        break;
                    case 4:
                        (i = t.t[0][0]).angle = p;
                        i.ⲆᐃΔ = f;
                        break;
                    case 5:
                        (i = t.t[1][0]).angle = p;
                        i.ⲆᐃΔ = dh;
                        break;
                    case 6:
                        (i = t.t[2][0]).angle = p;
                        i.ⲆᐃΔ = dn;
                        break;
                    case 7:
                        (i = t.t[3][0]).angle = p;
                        i.ⲆᐃΔ = hi;
                        break;
                    case 8:
                        (i = t.t[4][0]).angle = p;
                        i.ⲆᐃΔ = true;
                        break;
                    case 9:
                        (i = t.t[5][0]).angle = p;
                        i.ⲆᐃΔ = Ig;
                        break;
                    case 10:
                        (i = t.g[0][0]).angle = p;
                        i.ⲆᐃΔ = Ar;
                        break;
                    case 11:
                        (i = t.g[1][0]).angle = p;
                        i.ⲆᐃΔ = true;
                        break;
                    case 12:
                        (i = t.g[2][0]).angle = p;
                        i.ⲆᐃΔ = Ar;
                        break;
                    case 13:
                        (i = t.d[0][0]).angle = p;
                        i.ⲆᐃΔ = true;
                        break;
                    case 14:
                        (i = t.d[1][0]).angle = p;
                        i.ⲆᐃΔ = Fl;
                        break;
                    case 15:
                        (i = t.d[2][0]).angle = p;
                        i.ⲆᐃΔ = Ha;
                        break;
                    case 16:
                        (i = t.b[0][0]).angle = p;
                        i.ⲆᐃΔ = true;
                        break;
                    case 17:
                        (i = t.b[1][0]).angle = p;
                        i.ⲆᐃΔ = true;
                        break;
                    case 18:
                        (i = t.b[2][0]).angle = p;
                        i.ⲆᐃΔ = us;
                        break;
                    case 19:
                        (i = t.b[3][0]).angle = p;
                        i.ⲆᐃΔ = f;
                        break;
                    case 20:
                        (i = t.f[0][0]).angle = p;
                        i.ⲆᐃΔ = Ha;
                        break;
                    case 21:
                        (i = t.f[1][0]).angle = p;
                        i.ⲆᐃΔ = true;
                        break;
                    case 22:
                        (i = t.f[2][0]).angle = p;
                        i.ⲆᐃΔ = true;
                        break;
                    case 23:
                        (i = t.sw[0][0]).angle = p;
                        i.ⲆᐃΔ = Ds;
                        break;
                    case 24:
                        (i = t.sw[1][0]).angle = p;
                        i.ⲆᐃΔ = Ds;
                        break;
                    case 25:
                        (i = t.sw[2][0]).angle = p;
                        i.ⲆᐃΔ = true;
                        break;
                    case 26:
                        (i = t.gw[0][0]).angle = p;
                        i.ⲆᐃΔ = gt;
                        break;
                    case 27:
                        (i = t.gw[1][0]).angle = p;
                        i.ⲆᐃΔ = dh;
                        break;
                    case 28:
                        (i = t.gw[2][0]).angle = p;
                        i.ⲆᐃΔ = Fl;
                        break;
                    case 29:
                        (i = t.dw[0][0]).angle = p;
                        i.ⲆᐃΔ = true;
                        break;
                    case 30:
                        (i = t.dw[1][0]).angle = p;
                        i.ⲆᐃΔ = true;
                        break;
                    case 31:
                        (i = t.dw[2][0]).angle = p;
                        i.ⲆᐃΔ = true;
                        break;
                    case 32:
                        (i = t.a[0][0]).angle = p;
                        i.ⲆᐃΔ = true;
                        break;
                    case 33:
                        (i = t.a[1][0]).angle = p;
                        i.ⲆᐃΔ = true;
                        break;
                    case 34:
                        (i = t.a[2][0]).angle = p;
                        i.ⲆᐃΔ = Fl;
                        break;
                    case 35:
                        (i = t.cs[0][0]).angle = p;
                        i.ⲆᐃΔ = Ds;
                        break;
                    case 36:
                        (i = t.cs[1][0]).angle = p;
                        i.ⲆᐃΔ = R;
                        break;
                    case 37:
                        (i = t.cs[2][0]).angle = p;
                        i.ⲆᐃΔ = true;
                        break;
                    case 38:
                        (i = t.cs[3][0]).angle = p;
                        i.ⲆᐃΔ = true;
                        break;
                    case 40:
                        (i = t.plm[0][0]).angle = p;
                        i.ⲆᐃΔ = true;
                        break;
                    case 41:
                        (i = t.plm[1][0]).angle = p;
                        i.ⲆᐃΔ = dh;
                        break;
                    case 42:
                        (i = t.plm[2][0]).angle = p;
                        i.ⲆᐃΔ = true;
                        break;
                    case 50:
                        (i = t.re[0][0]).angle = p;
                        i.ⲆᐃΔ = true;
                        break;
                    case 51:
                        (i = t.re[1][0]).angle = p;
                        i.ⲆᐃΔ = dh;
                        break;
                    case 52:
                        (i = t.re[2][0]).angle = p;
                        i.ⲆᐃΔ = true;
                        break;
                    case 55:
                        (i = t.c[0][0]).angle = p;
                        i.ⲆᐃΔ = Vi;
                        break;
                    case 56:
                        (i = t.m[0][0]).angle = p;
                        i.ⲆᐃΔ = true;
                        break;
                    case 57:
                        (i = t.m[1][0]).angle = p;
                        i.ⲆᐃΔ = us;
                        break;
                    case 58:
                        (i = t.m[2][0]).angle = p;
                        i.ⲆᐃΔ = Lo;
                }
                if (_w.loaded && _w.ᐃⲆⲆΔᐃ && i) {
                    _w.ⵠⵠΔ(c[3 + j] & 1, ΔⵠⲆⵠ[q], i.x, i.y);
                }
            }
        };
        this.ⲆⲆⵠⲆᐃ = function () {
            this.ⵠΔᐃᐃ[cw](vq[ao].stringify([2, Yw.ⲆⲆⵠⲆᐃ.ⲆⵠΔⵠ, Yw.ⲆⲆⵠⲆᐃ.ᐃΔⲆᐃⲆ]));
        };
        this.ΔΔᐃⲆⲆᐃΔⵠᐃ = function (a, b) {
            this.ⵠΔᐃᐃ[cw](vq[Bo].stringify([37, b, a.ⲆⵠΔⵠ, a.ᐃΔⲆᐃⲆ]));
        };
        this.ᐃᐃΔⵠΔⵠᐃ = function (a, b, c) {
            if (b) {
                this.ⵠΔᐃᐃ[cw](vq[Bo].stringify([5, b, a.ⲆⵠΔⵠ, a.ᐃΔⲆᐃⲆ]));
            } else {
                this.ⵠΔᐃᐃ[cw](vq[co].stringify([4, c, a.ⲆⵠΔⵠ, a.ᐃΔⲆᐃⲆ]));
            }
        };
        this.ᐃⵠᐃⵠᐃᐃⵠΔⵠ = function (a) {
            this.ⵠΔᐃᐃ[cw](Aq[Ho].stringify([25, a.ⲆⵠΔⵠ, a.ᐃΔⲆᐃⲆ]));
        };
        this.ΔⲆᐃⲆᐃᐃΔⲆⲆ = function (a) {
            this.ⵠΔᐃᐃ[cw](Aq[aa].stringify([19, a]));
        };
        this.ΔⲆⵠΔⲆⲆⲆΔΔ = function (a) {
            this.ⵠΔᐃᐃ[cw](Fo[ao].stringify([36, a.ⲆⵠΔⵠ, a.ᐃΔⲆᐃⲆ]));
        };
        this.ⲆⵠΔⵠᐃⵠⵠΔⲆ = function (a, b) {
            this.ⵠΔᐃᐃ[cw](Jo[Ho].stringify([9, b, a.ⲆⵠΔⵠ, a.ᐃΔⲆᐃⲆ, a.type]));
        };
        this.ᐃΔⵠⲆⲆΔⲆΔⵠ = function (a, b) {
            this.ⵠΔᐃᐃ[cw](Jo[Ho].stringify([35, b, a.ⲆⵠΔⵠ, a.ᐃΔⲆᐃⲆ]));
        };
        this.ᐃⲆᐃⲆⵠⲆⲆΔⲆ = function (a, b, c) {
            this.ⵠΔᐃᐃ[cw](Fo[Bo].stringify([13, b, c, a.ⲆⵠΔⵠ, a.ᐃΔⲆᐃⲆ]));
        };
        this.ⵠⵠΔⵠΔⲆⵠ = function (a) {
            this.ⵠΔᐃᐃ[cw](Aq[Ho].stringify([26, a.ⲆⵠΔⵠ, a.ᐃΔⲆᐃⲆ, a.type]));
        };
        this.ᐃⲆᐃⲆᐃⵠⲆⵠⲆ = function (a) {
            this.ⵠΔᐃᐃ[cw](Aq[Ho].stringify([7, a.ⲆⵠΔⵠ, a.ᐃΔⲆᐃⲆ]));
        };
        this.ⲆⵠⵠⲆᐃⵠΔⵠᐃ = function (a) {
            this.ⵠΔᐃᐃ[cw](Aq[Ho].stringify([18, a.ⲆⵠΔⵠ, a.ᐃΔⲆᐃⲆ]));
        };
        this.ΔᐃΔΔΔⲆⵠᐃⲆ = function (a) {
            this.ⵠΔᐃᐃ[cw](Bq[zq].stringify([15, a.ⲆⵠΔⵠ, a.ᐃΔⲆᐃⲆ]));
        };
        this.ᐃⲆᐃΔᐃΔⵠⵠΔ = function (a) {
            this.ⵠΔᐃᐃ[cw](Cq[Ko].stringify([8, a.ᐃΔⲆᐃⲆ]));
        };
        this.ᐃΔΔΔⲆⲆᐃ = function (a) {
            b.ⵠΔᐃᐃ[cw](ua[aa].stringify([32, Yw.ΔᐃᐃΔΔ.id, Yw.ⵠΔⵠᐃⲆ[a]]));
        };
        this.ΔⲆΔΔᐃⵠΔΔⲆ = function () {
            b.ⵠΔᐃᐃ[cw](Fq[ma].stringify([21, Yw.ΔᐃᐃΔΔ.ⲆⵠΔⵠ, Yw.ΔᐃᐃΔΔ.id]));
        };
        this.ⲆⵠⵠⲆᐃⲆⵠ = function () {
            b.ⵠΔᐃᐃ[cw](Pa[Ca].stringify([11]));
        };
        this.ΔⲆⲆᐃⲆᐃⲆⵠⲆ = function () {
            b.ⵠΔᐃᐃ[cw](Pa[aa].stringify([6, Yw.ΔᐃᐃΔΔ.id]));
            if (document.getElementById("lock_team").innerHTML == "LOCK") {
                Yw.ΔᐃᐃΔΔ.lock = 1;
                document.getElementById("lock_team").innerHTML = "UNLOCK";
            } else {
                Yw.ΔᐃᐃΔΔ.lock = 0;
                document.getElementById("lock_team").innerHTML = "LOCK";
            }
        };
        this.Δᐃⵠ = function (j, e, i) {
            var k = new Uint16Array(j);
            if (i) {
                Cf.ⵠΔⵠⲆᐃⵠᐃⲆΔ();
            }
            for (var n = (e.length - 2) / 18, o = 0; o < n; o++) {
                var q = 2 + o * 18;
                var t = 1 + o * 9;
                var w = e[q];
                var x = k[t + 1];
                var y = k[t + 5];
                var A = Cf.ᐃᐃⵠⵠΔΔⵠ * w + y;
                if (x & kw.ⲆΔⲆᐃΔⵠⲆᐃΔ) {
                    Cf.ⵠⵠⲆΔΔᐃΔᐃⲆ(A);
                } else {
                    var B = k[t + 2];
                    var C = k[t + 3];
                    var D = k[t + 4];
                    var E = k[t + 6];
                    var F = k[t + 7];
                    var G = k[t + 8];
                    var H = Math.PI * (e[q + 1] / 255) * 2;
                    if (Cf.ⵠⵠⵠΔⲆ[A]) {
                        var I = Cf.ⵠⵠⵠΔⲆ[A];
                        I.r.x = C;
                        I.r.y = D;
                        if (w != 0 && ΔⲆⲆⵠ.ᐃⲆⵠΔ(I, I.r) > ow.ᐃΔⲆⵠᐃᐃᐃⵠⵠ) {
                            I.x = C;
                            I.y = D;
                        }
                        if (Yw.id !== I.id || w === 0) {
                            I.ⲆΔⲆΔⵠΔᐃ = H;
                        }
                        I.action |= x;
                        I.info = E;
                        I.ΔᐃΔⲆⲆ = F;
                        I.ΔᐃΔᐃΔ = G;
                        if (I.ⲆᐃΔ) {
                            I.ⲆᐃΔ(x);
                        }
                    } else {
                        var J = new ww(B, w, y, C, D, H, x, E, F, G);
                        Cf.ⵠⵠⵠΔⲆ[A] = J;
                        Cf.Δᐃⵠ[B].push(J);
                    }
                }
            }
        };
        this.ΔΔΔΔ = function (a) {
            this.ᐃᐃⲆⵠᐃⲆⲆ = ax;
            var b = new Uint16Array(a);
            Yw.ⵠΔΔΔⵠ.ⵠΔⵠⲆⲆ(b);
        };
        this.ΔⵠΔⵠΔⵠⵠᐃᐃ = function (a) {
            if (As !== Cg) {
                Ls = Cg;
            }
            if (a.length > 0) {
                Cg = JSON.parse(JSON.stringify(Ls));
                for (var b = 0; b < a.length; b++) {
                    var c = a[b];
                    var d = Ls[c.item];
                    if (zr !== d) {
                        d.r = c.recipe;
                        d.w = c.workbench;
                        d.f = c.fire;
                        d.ⵠⲆᐃ = c.water;
                        d.e = c.well;
                        d.time = 1 / c.time;
                    }
                }
            }
        };
        this.ⲆᐃᐃΔⵠⵠᐃ = function (a) {
            if (a && a.length !== 0) {
                Yw.ⲆᐃᐃΔⵠⵠᐃ.message = function (b) {
                    var c = document.createElement("canvas");
                    var d = c.getContext("2d");
                    for (d.lineJoin = "round"; b.indexOf("\\n") !== -1;) {
                        b = b.replace("\\n", "\n");
                    }
                    b = b.split("\n");
                    ᐃⲆ = [];
                    var f = 14;
                    var g = b.length * (f + 4) + 10;
                    var h = 0;
                    d.font = f + "px Baloo Paaji";
                    for (var i = 0; b.length > i; i++) {
                        if (b[i].charAt(0) === "#") {
                            ᐃⲆ[i] = b[i].substring(0, 7);
                            b[i] = b[i].substring(8);
                        } else {
                            ᐃⲆ[i] = "#FFFFFF";
                        }
                        h = Math.max(d.measureText(b[i]).width + 16, h);
                    }
                    c.height = g;
                    c.width = h;
                    i = 0;
                    for (; i < b.length; i++) {
                        var j = Dd(1, b[i], f, ᐃⲆ[i], null, null, null, null, null, "#000", 6);
                        d.drawImage(j, 8, i * (f + 4) + 5);
                    }
                    return c;
                }(a);
            } else {
                Yw.ⲆᐃᐃΔⵠⵠᐃ.message = vj;
            }
        };
        this.ᐃⵠⵠⵠΔ = function (a) {
            var b = Cf.ⵠⵠⵠΔⲆ[a[1] * Cf.ᐃᐃⵠⵠΔΔⵠ];
            if (b) {
                if (qw.ΔⲆᐃⵠⵠ === Cf.mode && qw.ⲆⵠΔΔΔᐃΔ === b.ᐃᐃᐃⵠ) {
                    if (Yw.ᐃᐃⲆⵠᐃ) {
                        if (Math.random() > 0.5) {
                            b.text.push(a[2] + " ..." + ΔΔΔᐃΔ);
                        } else {
                            b.text.push(ΔΔΔᐃΔ + "... " + a[2]);
                        }
                    } else {
                        b.text.push(ᐃⵠᐃΔΔⵠⵠ[Math.floor(Math.random() * ᐃⵠᐃΔΔⵠⵠ.length)]);
                    }
                } else {
                    b.text.push(a[2]);
                }
            }
        };
        this.ⵠᐃⲆⲆⵠⲆᐃⵠΔ = function (a) {
            if (Yw.ⵠᐃΔᐃ.max !== Yw.ⵠᐃΔᐃ.ⵠᐃⲆⵠᐃ.length || Ls[a].ⲆΔᐃᐃ === 29 || Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(Ls[a].ⲆΔᐃᐃ) != -1 || Yw.ⵠᐃΔᐃ.ᐃⵠᐃⲆⵠᐃᐃⲆᐃ(Ls[a].r)) {
                this.ⵠΔᐃᐃ[cw](rq[lo].stringify([1, a]));
                return 1;
            } else {
                this.ⲆᐃΔᐃⲆⲆᐃ();
                return 0;
            }
        };
        this.ⵠᐃⵠΔⵠ = function (a) {
            Yw.ⲆⵠᐃΔ.ⵠⵠᐃⵠᐃⲆΔⲆᐃ(a);
        };
        this.ⲆᐃⵠⲆⵠ = function (a) {
            Yw.ⲆⵠᐃΔ.ⲆᐃⵠⲆⵠ = a;
            Yw.ⲆⵠᐃΔ.ⲆᐃΔ();
        };
        this.ⵠᐃⲆΔᐃ = function (a) {
            Yw.ⲆⵠᐃΔ.ⵠᐃⲆΔᐃ = a;
            Yw.ⲆⵠᐃΔ.ⲆᐃΔ();
        };
        this.ⲆᐃⵠΔΔⵠΔ = function (a) {
            Yw.ⲆⵠᐃΔ.ⲆᐃⵠΔΔⵠΔ = a;
            Yw.ⲆⵠᐃΔ.ⲆᐃΔ();
        };
        this.Δᐃᐃⵠᐃᐃⵠⵠᐃ = function (a) {
            this.ⵠⲆⵠⲆᐃ(Xg[315]);
        };
        this.ᐃⲆⵠᐃⲆⵠΔᐃⵠ = function () {
            Yw.ⲆⵠᐃΔ.ᐃᐃⵠⲆⵠᐃⵠ();
        };
        this.ᐃⲆΔⲆⲆ = function (a) {
            $w.ᐃⲆΔⲆⲆ.ΔᐃᐃΔ = [];
            var b = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ];
            var c = 0;
            for (var d = 1; d < a.length; d += 2) {
                var e = {
                    x: Math.floor(a[d] * Cf.w / 250),
                    y: Math.floor(a[d + 1] * Cf.ⵠⲆⵠ / 250)
                };
                if (b && !c && !Yw.ΔⵠΔⲆΔⵠΔ && ΔⲆⲆⵠ.ᐃⲆⵠΔ(e, b) < 250) {
                    c += 1;
                } else {
                    $w.ᐃⲆΔⲆⲆ.ΔᐃᐃΔ.push(e);
                }
            }
        };
        this.ΔΔΔⲆΔⵠᐃᐃᐃ = function () {
            Yw.ⲆⲆⵠⲆᐃ.open = Ah;
            Yw.ⵠΔΔⵠΔ.enabled = pl;
            Yw.ⵠΔΔⵠΔ.ΔⵠⵠⲆΔ = -1;
            Yw.ⵠΔΔⵠΔ.label = null;
            Yw.ⵠΔΔⵠΔ.ΔΔᐃⲆⲆⵠΔ = null;
            Yw.ⵠΔΔⵠΔ.now = -1;
        };
        this.ⵠΔΔⵠΔ = function (a) {
            qw.ⲆᐃΔΔᐃΔⲆ = a;
            Yw.ⵠΔΔⵠΔ.enabled = al;
            Yw.ⵠΔΔⵠΔ.ΔⵠⵠⲆΔ = new Date().getTime();
            Yw.ⵠΔΔⵠΔ.label = null;
            Yw.ⵠΔΔⵠΔ.now = -1;
            for (var b = [45, 149, 57, 0, 5, 6, 30, 19, 62, 63, 9, 13, 12, 14, 15, 33, 34, 16, 17, 18, 94, 95, 96, 97, 98, 99, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 92, 93, 8, 1, 3, 4, 31, 32, 55, 53, 54], c = 0; c < b.length; c++) {
                var d = Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(b[c]);
                if (d != -1) {
                    Yw.ⵠᐃΔᐃ.ⵠΔⵠᐃⲆⲆΔ(b.length[c], d);
                }
            }
            Yw.ⲆⵠᐃΔ.ᐃᐃⵠⲆⵠᐃⵠ();
        };
        this.ᐃᐃⲆᐃΔⵠⲆᐃⲆ = function (a, b, c) {
            this.ⲆᐃΔⵠᐃᐃⵠ(a, b * 256 + c);
        };
        this.ⲆᐃΔⵠᐃᐃⵠ = function (a, b) {
            Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ = -1;
            Yw.ⵠᐃΔᐃ.ΔⲆᐃⲆⲆᐃⲆ(a, b, Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(a));
            Yw.ⲆⵠᐃΔ.ⲆᐃΔ();
        };
        this.ᐃⵠⵠⵠⲆᐃᐃᐃᐃ = function (a) {
            Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ = -1;
            Yw.ⵠᐃΔⵠⵠ.wait = Fl;
            var b = Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(a);
            Yw.ⵠᐃΔᐃ.ΔⲆᐃⲆⲆᐃⲆ(a, 1, b);
            if (b >= 0 && !Yw.ⵠᐃΔᐃ.ᐃⵠᐃ[a]) {
                Yw.ⲆⵠᐃΔ.ⲆᐃΔ();
            }
            if (a == 159) {
                Yw.ⵠΔⵠᐃⲆ = [Yw.id];
            }
        };
        this.ᐃⲆⲆᐃᐃⲆΔⵠΔ = function () {
            this.ⵠΔᐃᐃ[cw](vq[ao].stringify([12]));
        };
        this.ΔᐃΔⲆⵠΔⲆⲆⲆ = function (a) {
            this.ⵠΔᐃᐃ[cw](Jo[co].stringify([16, a.ⲆⲆⲆⵠⲆ, a.id]));
        };
        this.ⵠⲆⵠⲆΔΔΔⲆᐃ = function (a, b) {
            this.ⵠΔᐃᐃ[cw](Jo[Ho].stringify([14, a, b]));
        };
        this.ⲆᐃΔᐃᐃΔⲆⲆᐃ = function () {
            var a = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ];
            if (a) {
                var b = Math.PI * 2;
                this.ⵠΔᐃᐃ[cw](Jo[co].stringify([23, Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ, Math.floor((a.angle + b) % b * 255 / b), Yw.ⲆⵠᐃΔ.mode]));
            }
        };
        this.ΔⵠⲆᐃΔ = function (a, b) {
            switch (a) {
                case 195:
                case 110:
                case 116:
                case 117:
                case 145:
                case 127:
                case 133:
                case 136:
                case 142:
                case 143:
                case 189:
                case 207:
                case 233:
                case 205:
                case 209:
                case 211:
                case 192:
                case 137:
                case 138:
                case 196:
                case 197:
                case 200:
                case 199:
                    Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ = -1;
                    this.ⵠΔᐃᐃ[cw](Fo[Bo].stringify([22, a]));
                    break;
                case 114:
                case 160:
                case 115:
                case 132:
                case 188:
                case 206:
                case 204:
                case 191:
                case 193:
                case 208:
                case 210:
                case 113:
                case 162:
                case 163:
                case 164:
                case 165:
                case 118:
                case 167:
                case 151:
                case 152:
                case 166:
                case 171:
                case 172:
                case 173:
                case 124:
                case 218:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 220:
                case 168:
                case 169:
                case 170:
                case 119:
                case 122:
                case 123:
                case 217:
                case 219:
                case 125:
                case 190:
                case 141:
                case 135:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 198:
                case 201:
                case 182:
                case 183:
                case 144:
                case 159:
                case 221:
                    if (!Yw.ᐃᐃⲆⵠᐃ) {
                        if (Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ === a) {
                            Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ = -1;
                        } else {
                            Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ = a;
                        }
                    }
                    break;
                case 0:
                case 57:
                case 5:
                case 6:
                case 30:
                case 19:
                case 9:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 92:
                case 93:
                case 12:
                case 13:
                case 14:
                case 15:
                case 33:
                case sr.ⲆᐃΔΔᐃⵠΔΔⵠ:
                case 16:
                case 17:
                case 34:
                case 18:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                    if (!Yw.ᐃᐃⲆⵠᐃ) {
                        Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ = -1;
                        if ((c = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ]) && a === c.right) {
                            this.ⵠΔᐃᐃ[cw](Aq[Ho].stringify([22, 7]));
                        } else {
                            Yw.ᐃᐃᐃⲆᐃ.wait = true;
                            this.ⵠΔᐃᐃ[cw](Bq[zq].stringify([22, a]));
                        }
                    }
                    break;
                case 1:
                case 8:
                case 3:
                case 4:
                case 35:
                case 36:
                case 37:
                case 28:
                case 38:
                case 39:
                case 31:
                case 32:
                case 45:
                case 46:
                case 50:
                case 51:
                case 52:
                case 55:
                case 56:
                case 53:
                case 54:
                case 89:
                case 49:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                    if (!Yw.ᐃᐃⲆⵠᐃ) {
                        Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ = -1;
                        if ((c = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ]) && a === c.right) {
                            this.ⵠΔᐃᐃ[cw](Cq[Ko].stringify([22, 7]));
                        } else {
                            this.ⵠΔᐃᐃ[cw](ua[aa].stringify([22, a]));
                        }
                    }
                    break;
                case 223:
                case 224:
                case 225:
                case 239:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 91:
                    if (!Yw.ᐃᐃⲆⵠᐃ) {
                        Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ = -1;
                        var c = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ];
                        this.ⵠΔᐃᐃ[cw](ua[aa].stringify([22, a]));
                    }
                    break;
                case 77:
                case 78:
                case 79:
                case 58:
                case 25:
                case 26:
                case 27:
                case 43:
                case 44:
                case 20:
                case 21:
                case 22:
                case 59:
                case 60:
                case 90:
                case 61:
                case 47:
                    if ((c = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ]) && c.ᐃΔΔᐃⲆ !== a) {
                        Yw.ⲆΔⵠΔΔ.wait = true;
                    }
                    this.ⵠΔᐃᐃ[cw](Fo[Ho].stringify([22, a]));
                    break;
                case 10:
                case 83:
                case 84:
                case 86:
                case 11:
                case 40:
                case 88:
                case 82:
                case 80:
                case 81:
                case 41:
                case 42:
                case 85:
                case 23:
                case 24:
                case 48:
                    this.ⵠΔᐃᐃ[cw](Fq[ma].stringify([22, a]));
            }
        };
        this.ⵠⲆᐃᐃᐃΔᐃΔⲆ = function (a) {
            this.ⵠΔᐃᐃ[cw](Jo[lo].stringify([30, a]));
        };
        this.ᐃΔⲆⵠΔⲆΔᐃⵠ = function (a) {
            Yw.ⵠᐃΔⵠⵠ.wait = true;
            var b = Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(a);
            Yw.ⵠᐃΔᐃ.ⵠΔⵠᐃⲆⲆΔ(a, b);
            Yw.ⲆⵠᐃΔ.ⲆᐃΔ();
        };
        this.ⵠΔⵠⵠⵠⵠⲆⵠΔ = function (a, b) {
            this.ⵠΔᐃᐃ[cw](rq[Ko].stringify([28, a]));
        };
        this.ΔⵠᐃᐃⵠΔⲆΔⲆ = function (a, b) {
            this.ⵠΔᐃᐃ[cw](vq[ao].stringify([20, a]));
        };
        this.ΔⵠᐃⵠᐃⲆᐃⵠⲆ = function (a) {
            Yw.ⵠᐃΔⵠⵠ.wait = true;
            var b = Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(a);
            Yw.ⵠᐃΔᐃ.ΔⲆᐃⲆⲆᐃⲆ(a, 1, b);
            Yw.ⲆⵠᐃΔ.ⲆᐃΔ();
        };
        this.ⲆΔⲆᐃΔⲆΔᐃᐃ = function (a) {
            var b = a[1];
            var c = a[2];
            Yw.ⵠᐃΔⵠⵠ.wait = bg;
            var d = Yw.ⵠᐃΔᐃ.ⵠΔⲆⵠΔ(b);
            Yw.ⵠᐃΔᐃ.ΔⲆᐃⲆⲆᐃⲆ(b, c, d);
            Yw.ⲆⵠᐃΔ.ⲆᐃΔ();
        };
        this.ᐃΔᐃᐃⲆⲆΔΔⲆ = function () {
            this.ⵠΔᐃᐃ[cw](vq[ao].stringify([38]));
        };
        this.ⵠⲆΔᐃⵠⲆⲆⵠΔ = function (a) {
            var b = Math.PI * 2;
            this.ⵠΔᐃᐃ[cw](Jo[co].stringify([3, Math.floor((a + b) % b * 255 / b)]));
        };
        this.ⵠⲆᐃᐃⵠΔᐃⵠᐃ = function (a) {
            var b = Math.PI * 2;
            this.ⵠΔᐃᐃ[cw](Jo[co].stringify([29, Math.floor((a + b) % b * 255 / b)]));
        };
        this.ᐃΔⲆΔⲆΔᐃⵠΔ = function (a) {
            this.ⵠΔᐃᐃ[cw](ᐃⲆᐃᐃⵠⲆᐃ[vo].stringify([31, a]));
        };
        this.ᐃΔⲆᐃⲆⵠⵠΔᐃ = function (a) {
            this.ⵠΔᐃᐃ[cw](Aq[Ho].stringify([10, a]));
        };
        this.ⵠⲆΔΔᐃᐃⲆⵠΔ = function (a) {
            var b = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ];
            if (Yw.ᐃᐃⲆⵠᐃ) {
                if (Math.random() > 0.5) {
                    b.text.push(a.substring(0, 25) + " ..." + ΔΔΔᐃΔ);
                } else {
                    b.text.push(ΔΔΔᐃΔ + "... " + a.substring(0, 25));
                }
            } else {
                b.text.push(a);
            }
            this.ⵠΔᐃᐃ[cw](Aq[Ho].stringify([17, a]));
        };
        this.ᐃⵠⲆⵠΔ = function (a) {
            var b = ᐃⲆⲆΔ.select.Δᐃⵠ;
            if (b.length != 0) {
                var c = [31];
                var d = [];
                ΔⲆⲆⵠ.ᐃᐃⵠΔⲆᐃΔ(a, {
                    x: ᐃⲆⲆΔ.ᐃⵠⵠ.rx,
                    y: ᐃⲆⲆΔ.ᐃⵠⵠ.ry
                });
                c.push(a.x);
                c.push(a.y);
                for (var e = 0; e < b.length; e++) {
                    d.push(b[e].ⵠⵠⵠᐃΔⵠΔⲆⵠ);
                }
                c.push(d);
                this.ⵠΔᐃᐃ[cw](Bq[zq].stringify(c));
            }
        };
        this.ⲆᐃⲆⵠΔΔᐃ = 0;
        this.ΔⵠⵠⵠⲆΔΔ = {
            ⲆΔ: 0,
            ΔⵠᐃΔ: 0
        };
        this.ⲆⲆⵠᐃᐃΔⵠⲆΔ = function () {
            if (ow.ⲆⲆᐃⲆᐃΔⵠΔᐃ < ax - this.ⲆᐃⲆⵠΔΔᐃ) {
                this.ⲆᐃⲆⵠΔΔᐃ = ax;
                var a = Yw.ᐃⵠⵠ;
                var b = Math.floor(a.x / 100);
                var c = Math.floor(a.y / 100);
                if (this.ΔⵠⵠⵠⲆΔΔ.ⲆΔ != b || c != this.ΔⵠⵠⵠⲆΔΔ.ΔⵠᐃΔ) {
                    this.ⵠΔᐃᐃ[cw](ua[Ko].stringify([0, Math.floor(-a.x), Math.floor(-a.y)]));
                    this.ΔⵠⵠⵠⲆΔΔ.ⲆΔ = b;
                    this.ΔⵠⵠⵠⲆΔΔ.ΔⵠᐃΔ = c;
                }
            }
        };
        this.ᐃⲆⲆⲆΔΔΔ = 0;
        this.ⵠⵠᐃⲆᐃᐃⲆⵠΔ = function () {
            if (ow.ⲆⵠᐃⵠⲆΔΔⲆⲆ < ax - this.ᐃⲆⲆⲆΔΔΔ) {
                this.ᐃⲆⲆⲆΔΔΔ = ax;
                this.ping();
            }
        };
        this.ΔΔⲆΔᐃⲆⲆⲆΔ = function () {
            Yw.reconnect.enabled = gt;
            if (this.ᐃⲆᐃⵠᐃ == this.ⵠΔᐃᐃ.ᐃⲆᐃⵠᐃ) {
                this.ᐃⲆᐃⵠᐃ++;
                this.ⵠΔᐃᐃ.close();
                ΔᐃⵠⲆ.connect();
            }
        };
        this.ⲆⲆᐃⲆⲆⲆⵠᐃΔ = function (a) {
            this.ⵠⲆⵠⲆᐃ(Xg[316]);
            for (var b = 1; b < a.length; b++) {
                Yw.ⵠΔⵠᐃⲆ.push(a[b]);
            }
        };
        this.ᐃⵠⲆⵠⵠΔΔΔⵠ = function (a) {
            this.ⵠⲆⵠⲆᐃ(Cf.ΔᐃᐃΔ[a].Δᐃⵠⵠᐃ + Xg[318]);
            Yw.ⵠΔⵠᐃⲆ.push(a);
            var b = document.getElementById("team_box");
            if ($w.ΔⲆⲆⲆⲆ != -1 && b.style.display == "inline-block") {
                $w.ⲆᐃⵠΔⲆ[$w.ΔⲆⲆⲆⲆ].action();
            }
        };
        this.ᐃᐃΔⵠⲆⲆᐃᐃΔ = function () {
            this.ⵠⲆⵠⲆᐃ(Xg[319]);
            Yw.ΔᐃᐃΔΔ.wait = Ds;
            Yw.ⵠΔⵠᐃⲆ = [];
            document.getElementById("team_box").style.display = "none";
        };
        this.ⲆΔΔΔⲆⵠⲆⵠΔ = function (a) {
            if (Yw.id == a) {
                this.ⵠⲆⵠⲆᐃ(Xg[320]);
                Yw.ΔᐃᐃΔΔ.wait = gt;
                Yw.ⵠΔⵠᐃⲆ = [];
                document.getElementById("team_box").style.display = "none";
            } else {
                this.ⵠⲆⵠⲆᐃ(Cf.ΔᐃᐃΔ[a].Δᐃⵠⵠᐃ + Xg[321]);
                for (var b = 0; Yw.ⵠΔⵠᐃⲆ.length > b; b++) {
                    if (Yw.ⵠΔⵠᐃⲆ[b] == a) {
                        Yw.ⵠΔⵠᐃⲆ.splice(b, 1);
                        break;
                    }
                }
                var c = document.getElementById("team_box");
                if ($w.ΔⲆⲆⲆⲆ != -1 && c.style.display == "inline-block") {
                    $w.ⲆᐃⵠΔⲆ[$w.ΔⲆⲆⲆⲆ].action();
                }
            }
        };
        this.ⲆⵠΔᐃⵠⵠⵠⵠⵠ = function (a) {
            Yw.ⵠⲆⵠᐃᐃ = false;
            this.ⵠⲆⵠⲆᐃ(Xg[322]);
            if (this.ⵠΔᐃᐃ.ᐃⲆᐃⵠᐃ == this.ᐃⲆᐃⵠᐃ) {
                this.ᐃⲆᐃⵠᐃ++;
                $w.ⲆᐃᐃΔᐃ(mf.ᐃⲆⲆΔᐃ);
                this.ⵠΔᐃᐃ.close();
            }
        };
        this.ⵠΔⵠⵠΔⲆⵠΔⵠ = function (a, b) {
            Yw.ⵠⲆⵠᐃᐃ = false;
            var c = new Uint16Array(b);
            var d = new Uint32Array(b);
            Yw.ⲆⲆⵠⵠⲆⵠⲆ.ⵠᐃⲆᐃⲆΔⵠ = Ns[a][Math.floor(Math.random() * Ns[a].length)];
            Yw.ⲆⲆⵠⵠⲆⵠⲆ.ⵠⵠᐃΔⵠ = ΔⲆⲆⵠ.ᐃΔⲆᐃΔᐃⵠ(Cf.ΔᐃᐃΔ[Yw.id].ⵠⵠᐃΔⵠ);
            Yw.ⲆⲆⵠⵠⲆⵠⲆ.ⵠⲆⵠΔⲆⲆⵠ = ΔⲆⲆⵠ.ᐃΔⲆᐃΔᐃⵠ(d[1]);
            Yw.ⲆⲆⵠⵠⲆⵠⲆ.ᐃᐃᐃᐃᐃ = c[1];
            this.ⵠⲆⵠⲆᐃ(Xg[317]);
            if (this.ⵠΔᐃᐃ.ᐃⲆᐃⵠᐃ == this.ᐃⲆᐃⵠᐃ) {
                this.ᐃⲆᐃⵠᐃ++;
                $w.ⲆᐃᐃΔᐃ(Zw.ᐃⲆⲆΔᐃ);
                this.ⵠΔᐃᐃ.close();
                try {
                    bj.Widget.adsRefresh();
                } catch (a) { }
            }
        };
        this.ping = function () {
            this.ⵠΔᐃᐃ[cw](ow.ᐃⲆⵠΔΔⲆΔΔᐃ);
        };
        this.ⲆⲆⲆⵠΔΔΔⵠⵠ = function () {
            if (this.ⵠΔᐃᐃ.readyState == 3) {
                this.ᐃᐃⲆⵠᐃⲆⲆ -= ow.ΔⲆⲆᐃᐃⲆⵠ;
            }
        };
        this.ⲆᐃⲆᐃΔⲆΔⲆᐃ = function () {
            if (Af > ow.ⵠᐃⵠᐃⲆᐃⲆᐃⵠ) {
                this.ᐃᐃⲆⵠᐃⲆⲆ = ax;
            }
            if (ow.ΔⲆⲆᐃᐃⲆⵠ < ax - this.ᐃᐃⲆⵠᐃⲆⲆ) {
                this.ᐃᐃⲆⵠᐃⲆⲆ = ax;
                this.ΔΔⲆΔᐃⲆⲆⲆΔ();
            }
        };
        this.ⲆⲆⵠΔᐃΔⲆⵠΔ = function (c) {
            Mf++;
            clearTimeout(this.ΔⲆΔⵠⲆ);
            document.getElementById("commandMainBoxName").innerHTML = this.ⵠⲆⵠⲆΔ[this.ⵠᐃᐃᐃᐃ][this.ⵠⲆⵠΔΔⲆᐃ[this.ⵠᐃᐃᐃᐃ]].a;
            document.getElementById("exploreForest").src = "img/forest-leaf.png";
            document.getElementById("exploreWinter").src = "img/winter-flake.png";
            document.getElementById("exploreDesert").src = "img/desert-cactus.png";
            document.getElementById("exploreLava").src = "img/lava-volcano.png";
            this.ᐃᐃⲆⵠᐃⲆⲆ = ax;
            Yw.ᐃΔᐃᐃ.ΔⲆᐃⵠᐃ.ᐃᐃⲆᐃΔ = Yw.ᐃΔᐃᐃ.ΔⲆᐃⵠᐃ.Δⵠᐃᐃᐃ;
            Yw.ᐃΔᐃᐃ.ⵠⲆᐃΔΔΔⲆ.ᐃᐃⲆᐃΔ = Yw.ᐃΔᐃᐃ.ⵠⲆᐃΔΔΔⲆ.Δⵠᐃᐃᐃ;
            Yw.ᐃΔᐃᐃ.ᐃΔⲆΔⲆⲆΔ.ᐃᐃⲆᐃΔ = Yw.ᐃΔᐃᐃ.ᐃΔⲆΔⲆⲆΔ.Δⵠᐃᐃᐃ;
            Yw.ᐃΔᐃᐃ.ⵠΔⲆΔΔⲆΔ.ᐃᐃⲆᐃΔ = Yw.ᐃΔᐃᐃ.ⵠΔⲆΔΔⲆΔ.Δⵠᐃᐃᐃ;
            Yw.ᐃΔᐃᐃ.ΔⵠΔⲆⵠ.ᐃᐃⲆᐃΔ = Yw.ᐃΔᐃᐃ.ΔⵠΔⲆⵠ.Δⵠᐃᐃᐃ;
            Yw.ᐃΔᐃᐃ.ᐃᐃᐃⲆ = 1;
            Yw.ᐃΔᐃᐃ.c = 1;
            Yw.ᐃΔᐃᐃ.ⵠⲆⵠ = 1;
            Yw.ᐃΔᐃᐃ.ⲆⲆᐃ = 1;
            Yw.ᐃΔᐃᐃ.ⵠⲆᐃ = 1;
            Yw.ᐃΔᐃᐃ.ⲆΔⲆⵠⵠᐃᐃ = 1;
            Yw.ⲆΔⵠΔⲆΔᐃ = mg;
            $w.ⲆⲆᐃΔⲆ.display = 0;
            Yw.ⵠᐃΔᐃ.ⵠᐃⲆⵠᐃ = [];
            Yw.ⵠᐃΔᐃ.ᐃⵠᐃ = [];
            Yw.ⵠᐃΔᐃ.max = qw.ⲆⵠⲆᐃΔᐃᐃ;
            Yw.ⵠᐃΔᐃ.ⲆΔΔⵠΔⲆᐃ = 0;
            Yw.ⵠᐃΔᐃ.ⲆⲆᐃⵠⲆ = 0;
            Yw.ⵠᐃΔᐃ.id = -1;
            $w.ΔⲆΔΔⲆⲆᐃ = 1;
            $w.ΔΔΔᐃΔΔⲆ = 1;
            $w.ᐃΔΔⲆΔⵠᐃ = 1;
            $w.ΔΔⵠΔⵠⲆⲆ = 1;
            Yw.ⵠⲆⵠᐃᐃ = Ha;
            Yw.ⵠᐃΔᐃ.ⵠⲆⵠⵠⲆΔⲆ.stop();
            Yw.ⲆⵠᐃΔ.ⵠᐃⵠᐃᐃ = [];
            Yw.ⲆⵠᐃΔ.ⲆⵠⵠⲆⵠ = false;
            Yw.ⲆⵠᐃΔ.ⵠΔΔⵠᐃΔⲆⵠⲆ = Ui;
            Yw.ⲆⵠᐃΔ.ΔⵠⲆᐃ = -1;
            Yw.ⲆⵠᐃΔ.id = -1;
            Yw.ⲆⵠᐃΔ.ⵠᐃⵠΔⵠ = Ro;
            Yw.ⲆⵠᐃΔ.ⲆᐃⵠⲆⵠ = pn;
            Yw.ⲆⵠᐃΔ.ⵠᐃⲆΔᐃ = js;
            Yw.ⲆⵠᐃΔ.ⲆᐃⵠΔΔⵠΔ = rj;
            Yw.ⲆⵠᐃΔ.timeout = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(ug, 0, 1, 0, 1, 1);
            Yw.ᐃᐃᐃⲆᐃ.timeout = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(rj, 0, 1, 0, 1 / 10, 1);
            Yw.ᐃᐃᐃⲆᐃ.wait = gn;
            Yw.ⲆΔⵠΔΔ.timeout = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(pl, 0, 1, 0, 1 / 5, 1);
            Yw.ⲆΔⵠΔΔ.wait = false;
            Yw.ⵠᐃΔⵠⵠ.timeout = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(ia, 0, 1, 0, 1, 1);
            Yw.ⵠᐃΔⵠⵠ.wait = Ro;
            Yw.ΔᐃᐃΔΔ.id = -1;
            Yw.ΔᐃᐃΔΔ.ⲆⵠΔⵠ = -1;
            Yw.ΔᐃᐃΔΔ.wait = Ah;
            Yw.ΔᐃᐃΔΔ.timeout = new ΔⲆⲆⵠ.ⵠΔᐃⵠ(Ah, 0, 1, 0, 1 / 30, 1);
            $w.ᐃⲆΔⲆⲆ.ΔⲆᐃⲆⵠ.x = -1;
            $w.ᐃⲆΔⲆⲆ.ΔⲆᐃⲆⵠ.y = -1;
            $w.ΔⵠⲆⲆ.open = ia;
            $w.ᐃⲆΔⲆⲆ.ΔᐃᐃΔ = [];
            Yw.ᐃΔᐃᐃⵠ.enabled = Cr;
            Cf.mode = c[1];
            if (sl !== c[20] && c[21] !== Li) {
                Cf.ᐃⲆᐃᐃⲆ = c[20];
                Cf.ᐃⲆⲆⲆᐃ = c[21];
                Cf.w = Cf.ᐃⲆᐃᐃⲆ * Cf.ⵠⵠⵠⵠΔᐃΔ;
                Cf.ⵠⲆⵠ = Cf.ᐃⲆⲆⲆᐃ * Cf.ⲆΔⵠᐃΔⵠⵠ;
            }
            Cf.ΔⲆᐃⵠᐃᐃᐃ = c[22];
            Cf.ᐃΔⵠⲆⲆ = c[23];
            b.ⲆᐃᐃΔⵠⵠᐃ(c[24]);
            b.ΔⵠΔⵠΔⵠⵠᐃᐃ(c[25]);
            Yw.ᐃⲆΔⵠⵠ.ᐃΔᐃⲆΔ = c[26];
            Yw.ᐃΔΔⵠⲆᐃᐃ = 0;
            Yw.ᐃᐃΔⲆⵠ.ᐃΔᐃⲆΔ = c[27];
            Cf.ᐃⲆⵠⵠΔᐃΔⲆᐃ(c[19]);
            Cf.time = c[5];
            Cf.ⲆⲆⵠᐃⵠ.ΔⵠⵠⲆⲆ = c[15];
            Cf.ⲆⲆⵠᐃⵠ.ⵠΔⵠⲆⲆ = new Date().getTime();
            $w.ⲆⵠΔⲆ.ΔᐃᐃᐃΔⲆⵠ = c[16];
            Cf.transition = false;
            Yw.Ⲇⵠᐃ = c[2];
            $w.ⲆⵠΔⲆ.reset();
            Yw.ⵠΔⵠᐃⲆ = c[8];
            Cf.Δᐃⵠ[tw.ⵠᐃᐃⵠΔ] = [];
            Cf.Δᐃⵠ[tw.ᐃⲆᐃⵠⵠ] = [];
            Cf.Δᐃⵠ[tw.ⲆΔᐃΔⲆ] = [];
            Cf.Δᐃⵠ[tw.ΔⵠᐃⵠⲆ] = [];
            Cf.Δᐃⵠ[tw.ᐃᐃᐃⲆⵠ] = [];
            Cf.Δᐃⵠ[tw.ⵠⲆΔⵠΔ] = [];
            Cf.Δᐃⵠ[tw.ⵠⵠᐃⲆⵠ] = [];
            Cf.Δᐃⵠ[tw.ⵠⲆⲆⵠᐃ] = [];
            Cf.Δᐃⵠ[tw.ⵠᐃΔⲆⲆ] = [];
            Cf.Δᐃⵠ[tw.ᐃΔᐃΔᐃ] = [];
            Cf.Δᐃⵠ[tw.ΔⵠⵠΔⵠ] = [];
            Cf.Δᐃⵠ[tw.ⵠⵠⲆΔΔ] = [];
            Cf.Δᐃⵠ[tw.ⵠⲆᐃᐃᐃ] = [];
            Cf.Δᐃⵠ[tw.ᐃᐃΔΔΔ] = [];
            Cf.Δᐃⵠ[tw.ᐃⵠΔᐃⵠ] = [];
            Cf.Δᐃⵠ[tw.ⵠⵠⲆⵠⲆ] = [];
            Cf.Δᐃⵠ[tw.ᐃⲆⲆⲆΔ] = [];
            Cf.Δᐃⵠ[tw.ⲆΔⲆⵠⲆ] = [];
            Cf.Δᐃⵠ[tw.ⲆⲆᐃᐃⲆ] = [];
            Cf.Δᐃⵠ[tw.ᐃΔⲆⵠⵠ] = [];
            Cf.Δᐃⵠ[tw.ᐃᐃⵠⵠᐃ] = [];
            Cf.Δᐃⵠ[tw.ⵠⵠⲆⲆⲆ] = [];
            Cf.Δᐃⵠ[tw.ⵠⵠΔᐃⲆ] = [];
            Cf.Δᐃⵠ[tw.ⲆⵠⲆᐃⵠ] = [];
            Cf.Δᐃⵠ[tw.ΔΔⵠⲆᐃ] = [];
            Cf.Δᐃⵠ[tw.ΔⲆΔΔⲆ] = [];
            Cf.Δᐃⵠ[tw.ᐃⵠᐃᐃᐃ] = [];
            Cf.Δᐃⵠ[tw.ᐃΔᐃⲆⲆ] = [];
            Cf.Δᐃⵠ[tw.ΔⲆΔΔⵠ] = [];
            Cf.Δᐃⵠ[tw.ⲆΔⵠᐃᐃ] = [];
            Cf.Δᐃⵠ[tw.ᐃⵠⵠΔⵠ] = [];
            Cf.Δᐃⵠ[tw.ⲆΔⲆΔⲆ] = [];
            Cf.Δᐃⵠ[tw.ⲆⵠᐃᐃⲆ] = [];
            Cf.Δᐃⵠ[tw.ΔⵠⵠᐃΔ] = [];
            Cf.Δᐃⵠ[tw.ᐃΔᐃᐃᐃ] = [];
            Cf.Δᐃⵠ[tw.ᐃⲆᐃΔⵠ] = [];
            Cf.Δᐃⵠ[tw.ΔΔⵠᐃΔ] = [];
            Cf.Δᐃⵠ[tw.ᐃΔⵠΔⵠ] = [];
            Cf.Δᐃⵠ[tw.ΔⲆⲆΔᐃ] = [];
            Cf.Δᐃⵠ[tw.ΔΔⲆⵠⵠ] = [];
            Cf.Δᐃⵠ[tw.ⵠΔⵠΔⵠ] = [];
            Cf.Δᐃⵠ[tw.ⵠⵠᐃΔⲆ] = [];
            Cf.Δᐃⵠ[tw.ⲆⵠᐃᐃΔⲆᐃ] = [];
            Cf.Δᐃⵠ[tw.ΔΔⵠᐃᐃ] = [];
            Cf.Δᐃⵠ[tw.ΔᐃⲆⲆΔ] = [];
            Cf.Δᐃⵠ[tw.ΔⵠⲆⲆⲆ] = [];
            Cf.Δᐃⵠ[tw.ΔⵠⲆⵠⲆ] = [];
            Cf.Δᐃⵠ[tw.ⵠᐃΔⲆΔ] = [];
            Cf.Δᐃⵠ[tw.ΔᐃⵠΔᐃ] = [];
            Cf.Δᐃⵠ[tw.ⵠΔΔΔᐃ] = [];
            Cf.Δᐃⵠ[tw.ⲆᐃᐃΔΔ] = [];
            Cf.Δᐃⵠ[tw.ᐃⲆⵠⲆΔ] = [];
            Cf.Δᐃⵠ[tw.Δⵠᐃⵠᐃ] = [];
            Cf.Δᐃⵠ[tw.ⵠΔⵠΔⲆ] = [];
            Cf.Δᐃⵠ[tw.ⵠΔΔⵠΔᐃⵠ] = [];
            Cf.Δᐃⵠ[tw.ΔⲆᐃᐃΔ] = [];
            Cf.Δᐃⵠ[tw.ᐃΔⲆΔΔ] = [];
            Cf.Δᐃⵠ[tw.ⲆⲆⵠᐃⲆ] = [];
            Cf.Δᐃⵠ[tw.ΔΔᐃⲆΔ] = [];
            Cf.Δᐃⵠ[tw.ΔᐃⲆⲆᐃⲆⵠ] = [];
            Cf.Δᐃⵠ[tw.ΔΔᐃΔᐃⵠΔ] = [];
            Cf.Δᐃⵠ[tw.ⵠᐃᐃΔᐃⲆΔ] = [];
            Cf.Δᐃⵠ[tw.ⵠᐃΔⲆΔⲆⲆ] = [];
            Cf.Δᐃⵠ[tw.ᐃᐃⵠΔᐃ] = [];
            Cf.Δᐃⵠ[tw.ΔΔⲆⲆᐃ] = [];
            Cf.Δᐃⵠ[tw.ᐃᐃΔᐃᐃ] = [];
            Cf.Δᐃⵠ[tw.ΔⲆⵠΔᐃ] = [];
            Cf.Δᐃⵠ[tw.ᐃⵠⲆⲆΔ] = [];
            Cf.Δᐃⵠ[tw.Ⲇⵠⵠⵠⵠ] = [];
            Cf.Δᐃⵠ[tw.ΔᐃⵠⵠⲆ] = [];
            Cf.Δᐃⵠ[tw.Δᐃⵠⵠⵠ] = [];
            Cf.Δᐃⵠ[tw.ᐃⲆⲆᐃⲆ] = [];
            Cf.Δᐃⵠ[tw.ΔᐃΔⲆᐃ] = [];
            Cf.Δᐃⵠ[tw.Ⲇⵠᐃᐃⵠ] = [];
            Cf.Δᐃⵠ[tw.ⵠⲆᐃⲆⲆ] = [];
            Cf.Δᐃⵠ[tw.ⵠΔᐃΔΔ] = [];
            Cf.Δᐃⵠ[tw.ΔⲆⵠΔⲆ] = [];
            Cf.Δᐃⵠ[tw.ᐃⲆⵠⵠΔ] = [];
            Cf.Δᐃⵠ[tw.Δᐃᐃⵠᐃ] = [];
            Cf.Δᐃⵠ[tw.ⲆᐃΔⲆⵠ] = [];
            Cf.Δᐃⵠ[tw.ⵠⲆⵠΔΔ] = [];
            Cf.Δᐃⵠ[tw.ⲆⲆΔΔᐃ] = [];
            Cf.Δᐃⵠ[tw.ΔⲆⵠⲆΔ] = [];
            Cf.Δᐃⵠ[tw.ᐃᐃⵠΔⲆ] = [];
            Cf.Δᐃⵠ[tw.ⵠΔⲆΔΔ] = [];
            Cf.Δᐃⵠ[tw.ⲆⲆⲆⲆⲆ] = [];
            Cf.Δᐃⵠ[tw.ΔᐃΔᐃⵠ] = [];
            Cf.Δᐃⵠ[tw.ΔⵠΔΔⲆ] = [];
            Cf.Δᐃⵠ[tw.ⵠΔⵠᐃΔ] = [];
            Cf.Δᐃⵠ[tw.ⵠΔⵠΔΔ] = [];
            Cf.ⵠⵠⵠΔⲆ = [];
            Cf.ᐃᐃⵠⵠΔΔⵠ = c[7];
            Yw.id = c[9];
            Yw.ⵠΔⲆΔ = Yw.id * Cf.ᐃᐃⵠⵠΔΔⵠ;
            if (_w.loaded) {
                _w.ΔᐃᐃΔ[0].ⵠΔⲆΔ = Yw.ⵠΔⲆΔ;
                _w.ΔᐃᐃΔ[0].ΔⵠᐃⲆΔⵠⵠ = 0;
            }
            wf.ⵠⵠΔᐃΔᐃΔ();
            Yw.ᐃⵠⵠ.ⵠᐃΔΔⲆ(c[3], c[10]);
            Cf.ΔᐃᐃΔ = [];
            var d = Cf.ΔᐃᐃΔ;
            for (var e = 0; c[11] > e; e++) {
                d.push(new vw());
            }
            e = 0;
            for (var f = c[4]; e < f.length; e++) {
                var g = d[f[e].i];
                g.Δᐃⵠⵠᐃ = f[e].n;
                g.ᐃᐃᐃⵠ = f[e].s;
                g.ΔᐃᐃⲆⲆ = f[e].a;
                g.ΔⵠᐃΔⵠ = f[e].c;
                g.ΔⵠΔΔⵠ = f[e].b;
                g.Ⲇᐃⵠᐃᐃ = f[e].d;
                g.ᐃΔΔᐃⵠⲆΔ = f[e].g;
                g.level = f[e].l;
                g.ⵠⵠᐃΔⵠ = ΔⲆⲆⵠ.ΔᐃΔⲆᐃᐃⲆ(f[e].p);
                g.ⵠⲆⵠᐃᐃ = true;
                if (dw === 1) {
                    g.Δᐃⵠⵠᐃ += "|" + f[e].i;
                }
            }
            Yw.ⵠΔΔΔⵠ.sort();
            if (Cf.mode === qw.ⲆΔⲆΔⲆΔΔ && Cf.ΔᐃᐃΔ[Yw.id].Δᐃⵠⵠᐃ === "spectator") {
                Yw.ΔⵠΔⲆΔⵠΔ = true;
            } else {
                Yw.ΔⵠΔⲆΔⵠΔ = false;
            }
            if (qw.ΔⲆᐃⵠⵠ === Cf.mode && Cf.ΔᐃᐃΔ[Yw.id].ᐃᐃᐃⵠ === qw.ⲆⵠΔΔΔᐃΔ) {
                Yw.ᐃᐃⲆⵠᐃ = true;
            } else {
                Yw.ᐃᐃⲆⵠᐃ = false;
            }
            if (Cf.mode === qw.ⵠΔᐃΔⵠ && qw.ΔᐃᐃⵠᐃᐃΔ === Cf.ΔᐃᐃΔ[Yw.id].ᐃᐃᐃⵠ) {
                Yw.ⲆⵠⵠΔⵠⵠᐃ = us;
            } else {
                Yw.ⲆⵠⵠΔⵠⵠᐃ = Cr;
            }
            ⲆΔⲆⲆ.set("starve_token", Yw.ⵠᐃⲆⲆΔ);
            if (c[12] === 0) {
                Yw.ᐃⲆⲆⵠⲆ.ΔⵠⵠⲆΔ = 0;
                $w.ⲆⵠΔⲆ.restore(c[17]);
                var h = c[14];
                if (h[29]) {
                    Yw.ⵠᐃΔᐃ.ΔⲆΔⲆᐃⲆΔ(1, 0);
                }
                for (e = 0; h.length > e; e++) {
                    if (h[e]) {
                        if (e == 29) {
                            continue;
                        }
                        if (e == 7) {
                            continue;
                        }
                        this.ᐃⵠⲆⲆᐃᐃᐃ([0, e, h[e]]);
                    }
                }
                Yw.ᐃⲆⲆⵠⲆ.open = Gj;
            } else {
                if (qw.ⵠΔⵠⲆᐃ === Cf.mode) {
                    this.ᐃⵠⲆⲆᐃᐃᐃ([0, 238, 1]);
                } else if (qw.ⵠΔᐃΔⵠ === Cf.mode) {
                    if (Yw.ⲆⵠⵠΔⵠⵠᐃ) {
                        this.ᐃⵠⲆⲆᐃᐃᐃ([0, 190, 4]);
                    } else {
                        this.ᐃⵠⲆⲆᐃᐃᐃ([0, 191, 3]);
                    }
                }
                if (qw.ⲆⵠΔⲆⵠ === Cf.mode || qw.ⵠΔᐃΔⵠ === Cf.mode || qw.ⵠᐃΔΔΔ === Cf.mode || qw.ⵠΔⵠⲆᐃ === Cf.mode) {
                    Yw.ᐃⲆⲆⵠⲆ.ΔⵠⵠⲆΔ = new Date().getTime();
                    Yw.ᐃⲆⲆⵠⲆ.open = true;
                    Yw.ᐃⲆⲆⵠⲆ.value = c[13];
                    $w.ᐃⲆⲆⵠⲆ.ⵠΔⵠⲆⲆ();
                } else {
                    Yw.ᐃⲆⲆⵠⲆ.ΔⵠⵠⲆΔ = 0;
                    Yw.ᐃⲆⲆⵠⲆ.open = rj;
                    Yw.ᐃⲆⲆⵠⲆ.value = 0;
                }
                Yw.ᐃⲆᐃᐃᐃΔⲆ = c[12].toString();
            }
            Yw.ⵠΔΔⵠΔ.enabled = c[6];
            Yw.ⵠΔΔⵠΔ.ΔⵠⵠⲆΔ = -1;
            Yw.ⵠΔΔⵠΔ.label = null;
            Yw.ⵠΔΔⵠΔ.now = -1;
            ⲆΔⲆⲆ.set("starve_token_id", Yw.ᐃⲆᐃᐃᐃΔⲆ);
            if (Yw.reconnect.enabled) {
                Yw.reconnect.rotate = 0;
                Yw.reconnect.enabled = Gj;
            } else {
                mf.ⲆᐃᐃΔᐃ($w.ᐃⲆⲆΔᐃ);
                if (ga) {
                    ga("send", "event", "Game", "play", "S" + mf.ᐃᐃᐃⵠ + "A" + mf.ΔᐃᐃⲆⲆ);
                }
            }
        };
        this.connect = function () {
            b.ⲆᐃΔⵠⵠΔⲆ = 0;
            b.ⲆᐃΔⵠⵠⵠⵠ();
        };
        this.ᐃΔⵠⲆⵠⵠᐃ = [];
        this.ᐃⵠⲆⲆᐃⲆᐃⲆⲆ = function (c) {
            const d = b.ⲆⵠⵠΔΔ.filter(a => a.gm === c);
            const f = {};
            for (let a = 0; d.length > a; a++) {
                const b = d[a];
                const c = b.r;
                if (Zk !== c) {
                    if (f[c] === undefined) {
                        f[c] = [];
                    }
                    f[c].push(b);
                }
            }
            function g(d) {
                b.ᐃΔⵠⲆⵠⵠᐃ[c] = d;
                const e = f[d];
                const g = e[Math.floor(Math.random() * e.length)];
                b.ΔΔᐃΔⵠᐃⲆ({
                    domain: iw,
                    is_tls: 1,
                    id: g.id,
                    p: g.p
                });
            }
            if (Ga !== b.ᐃΔⵠⲆⵠⵠᐃ[c]) {
                g(b.ᐃΔⵠⲆⵠⵠᐃ[c]);
                return;
            }
            let a = 1;
            function h(b) {
                const c = new bj.XMLHttpRequest();
                const d = b[0];
                const e = d.p;
                const f = d.r;
                const i = e[Math.floor(Math.random() * e.length)];
                c.open("GET", "https://" + i + "." + iw + "/", Ig);
                c.onreadystatechange = function () {
                    if (c.readyState === 4) {
                        if (a === 0) {
                            return;
                        }
                        a = 0;
                        g(f);
                    }
                };
                c.send();
            }
            for (let a in f) {
                h(f[a]);
            }
            bj.setTimeout(function () {
                if (a === 0) {
                    return;
                }
                a = 0;
                const b = bj.Object.keys(f);
                g(b[Math.floor(b.length * Math.random())]);
            }, 5000);
        };
        this.ⲆΔᐃⲆⲆⵠⵠᐃⲆ = function () {
            let a = qw.ⲆΔᐃⲆⵠⵠⲆ[b.ⵠᐃᐃᐃᐃ];
            console.log(undefined, undefined, undefined);
            let c = b.ⵠⲆⵠΔΔⲆᐃ[b.ⵠᐃᐃᐃᐃ];
            let d = b.ⲆⵠⵠΔΔ.find(b => b.gm == a && b.idx == c);
            if (d === Jl) {
                b.ᐃⵠⲆⲆᐃⲆᐃⲆⲆ(a);
            } else {
                b.ΔΔᐃΔⵠᐃⲆ({
                    domain: iw,
                    is_tls: 1,
                    id: d.id,
                    p: d.p
                });
            }
        };
        this.ⲆᐃΔⵠⵠⵠⵠ = function () {
            console.log(undefined);
            if (qn !== gw && As !== hw) {
                console.log(undefined, undefined, Ga);
                b.ΔΔᐃΔⵠᐃⲆ({
                    domain: iw,
                    is_tls: 1,
                    id: hw + gw,
                    p: b.ᐃᐃΔᐃⵠⵠⵠ[hw]
                });
                return;
            }
            if (fw === undefined) {
                b.ⲆΔᐃⲆⲆⵠⵠᐃⲆ();
            } else {
                b.ΔΔᐃΔⵠᐃⲆ({
                    domain: fw.domain,
                    is_tls: fw.ssl,
                    id: fw.id,
                    p: [fw.p]
                });
            }
        };
        this.ΔΔᐃΔⵠᐃⲆ = function (c) {
            let d = c.domain;
            let e = c.is_tls;
            let f = c.id;
            let a = c.p;
            let g = a[Math.floor(Math.random() * a.length)];
            let i = e ? "wss://" + g + "." + d + "/" + f : "ws://" + d;
            console.log(sl, Ft);
            b.ⵠΔᐃᐃ = new bj.WebSocket(i);
            b.ⵠΔᐃᐃ.binaryType = "arraybuffer";
            b.ⵠΔᐃᐃ.ᐃⲆᐃⵠᐃ = b.ᐃⲆᐃⵠᐃ;
            b.ⵠΔᐃᐃ.onmessage = function (a) {
                if (b.ᐃⲆᐃⵠᐃ == b.ᐃⲆᐃⵠᐃ) {
                    if (typeof a.data == "string") {
                        var c = JSON.parse(a.data);
                        switch (c[0]) {
                            case 0:
                                b.ᐃⵠⵠⵠΔ(c);
                                break;
                            case 1:
                                b.ᐃΔⲆⲆⵠΔΔ(c[1]);
                                break;
                            case 2:
                                b.ⲆⲆᐃᐃⵠΔᐃⵠⵠ(c);
                                break;
                            case 3:
                                b.ⲆⲆⵠΔᐃΔⲆⵠΔ(c);
                                break;
                            case 4:
                                b.message(c[1]);
                                break;
                            case 5:
                                b.ⵠᐃΔⵠⲆⲆᐃ(c);
                                break;
                            case 6:
                                b.ⲆᐃᐃΔⵠⵠᐃ(c[1]);
                        }
                    } else {
                        var d = function (b, c, d) {
                            const f = new Uint8Array(b);
                            const e = f.length;
                            let g = mw[e];
                            let a = Jl;
                            let h = dg;
                            if (g === Og) {
                                nw += e * 2;
                                if (nw < 65535) {
                                    h = re(Fe(e));
                                } else {
                                    nw = e;
                                    for (let a = 0; mw.length > a; a++) {
                                        if (mw[a] !== undefined) {
                                            const b = mw[a][0];
                                            mw[a] = undefined;
                                            he(b);
                                        }
                                    }
                                    h = re(Fe(e));
                                    pj();
                                }
                                a = Ki(h);
                                mw[e] = [h, a];
                            } else {
                                h = g[0];
                                a = g[1];
                            }
                            for (let g = 0; g < f.length; g++) {
                                a[g] = f[g];
                            }
                            bk(h, c, d);
                            for (let g = 0; g < f.length; g++) {
                                f[g] = a[g];
                            }
                            return f;
                        }(a.data, Yw.ᐃΔⵠⵠΔⵠⵠ, Yw.ⲆΔᐃΔⲆⵠⲆΔⲆ);
                        var e = d.buffer;
                        switch (d[0]) {
                            case 0:
                                b.Δᐃⵠ(e, d, false);
                                break;
                            case 1:
                                b.Δᐃⵠ(e, d, Fl);
                                break;
                            case 2:
                                b.ᐃⲆⵠᐃⲆⵠΔᐃⵠ();
                                break;
                            case 3:
                                b.ᐃⵠⲆⲆᐃᐃᐃ(new Uint16Array(e));
                                break;
                            case 4:
                                b.ᐃⲆⲆⵠᐃᐃⲆᐃᐃ();
                                break;
                            case 5:
                                b.ⲆΔᐃⵠⲆⵠΔΔⵠ();
                                break;
                            case 6:
                                b.Δᐃᐃⵠᐃᐃⵠⵠᐃ();
                                break;
                            case 7:
                                b.ΔⲆᐃⵠⵠΔᐃΔᐃ(e);
                                break;
                            case 8:
                                b.ΔⲆⵠⲆⲆΔⵠᐃⲆ(d[1]);
                                break;
                            case 9:
                                b.ⵠᐃⵠⲆⲆΔᐃΔⲆ(d[1]);
                                break;
                            case 10:
                                b.ⲆᐃΔᐃⲆⲆᐃ();
                                break;
                            case 11:
                                b.ⲆᐃΔⵠᐃᐃⵠ(d[1], d[2]);
                                break;
                            case 12:
                                b.ⵠᐃⵠΔⵠ(d[1]);
                                break;
                            case 13:
                                b.ⵠᐃⲆᐃΔᐃⲆⵠⵠ(d, e);
                                break;
                            case 14:
                                b.ⲆⲆΔⵠΔⲆⲆ();
                                break;
                            case 15:
                                b.ᐃⵠᐃⲆᐃⲆⲆᐃⵠ(d[1]);
                                break;
                            case 16:
                                b.ᐃΔᐃᐃ(d[1], d[2], d[3], d[4], d[5], d[6], d[7]);
                                break;
                            case 17:
                                b.ΔᐃⲆⵠᐃⲆΔⵠΔ(e);
                                break;
                            case 18:
                                b.ΔᐃΔᐃᐃⲆΔⵠᐃ();
                                break;
                            case 19:
                                b.ⵠᐃⲆΔᐃ(d[1]);
                                break;
                            case 20:
                                b.ⲆⲆⲆᐃΔⲆΔⵠⲆ();
                                break;
                            case 21:
                                b.ΔΔΔΔ(e);
                                break;
                            case 22:
                                b.ⲆⵠⲆΔⵠΔᐃΔⵠ(d[1]);
                                break;
                            case 23:
                                b.ΔⲆⵠⵠᐃᐃⲆⵠⲆ(e);
                                break;
                            case 24:
                                b.ᐃⵠⵠⵠⲆᐃᐃᐃᐃ(d[1]);
                                break;
                            case 25:
                                b.ⵠΔⵠⵠΔⲆⵠΔⵠ(d[1], e);
                                break;
                            case 26:
                                b.ᐃⲆΔⲆⲆ(d);
                                break;
                            case 27:
                                b.ᐃⲆᐃᐃᐃᐃⲆᐃΔ();
                                break;
                            case 28:
                                b.ⵠΔΔⵠΔ(d[1]);
                                break;
                            case 29:
                                b.ΔΔΔⲆΔⵠᐃᐃᐃ();
                                break;
                            case 30:
                                b.ⲆⵠΔᐃⵠⵠⵠⵠⵠ();
                                break;
                            case 31:
                                b.ⲆⲆᐃⲆⲆⲆⵠᐃΔ(d);
                                break;
                            case 32:
                                b.ⲆΔΔΔⲆⵠⲆⵠΔ(d[1]);
                                break;
                            case 33:
                                b.ᐃⵠⲆⵠⵠΔΔΔⵠ(d[1]);
                                break;
                            case 34:
                                b.ᐃᐃΔⵠⲆⲆᐃᐃΔ();
                                break;
                            case 35:
                                b.ⲆΔΔⲆⵠⲆⵠⲆᐃ(d[1]);
                                break;
                            case 36:
                                b.ⲆᐃⵠΔΔⵠΔ(d[1]);
                                break;
                            case 37:
                                b.ⵠⲆⵠᐃΔΔⵠⵠᐃ(d[1], d[2]);
                                break;
                            case 38:
                                b.ᐃⲆⵠΔⵠΔΔⵠⵠ(d[1]);
                                break;
                            case 39:
                                b.ⲆⵠⲆⲆΔⵠᐃᐃΔ(d[1]);
                                break;
                            case 40:
                                b.ᐃΔΔΔᐃᐃᐃΔᐃ();
                                break;
                            case 41:
                                b.ⲆΔΔⵠᐃᐃΔⵠⲆ(d);
                                break;
                            case 42:
                                b.ⲆΔⵠⲆᐃⲆⵠᐃᐃ(d[1]);
                                break;
                            case 43:
                                b.ΔᐃⲆⵠᐃⲆⲆᐃᐃ(d[1]);
                                break;
                            case 44:
                                b.claimed(d[1]);
                                break;
                            case 45:
                                b.ΔⵠᐃᐃᐃᐃᐃⲆⲆ(d[1]);
                                break;
                            case 46:
                                b.ⵠⵠⵠᐃⵠⲆⵠⵠΔ(d[1]);
                                break;
                            case 47:
                                b.ⲆᐃⵠⲆⵠ(d[1]);
                                break;
                            case 48:
                                b.ᐃⲆΔⲆᐃⲆⵠᐃⵠ();
                                break;
                            case 50:
                                b.ᐃᐃⲆᐃΔⵠⲆᐃⲆ(d[1], d[2], d[3]);
                                break;
                            case 51:
                                b.ᐃⲆⵠᐃⵠⵠⲆⵠᐃ();
                                break;
                            case 52:
                                b.ᐃΔⲆⵠΔⲆΔᐃⵠ(d[1]);
                                break;
                            case 53:
                                b.ΔⵠᐃⵠᐃⲆᐃⵠⲆ(d[1]);
                                break;
                            case 54:
                                b.ⵠⲆⵠⲆΔⲆⲆⵠΔ();
                                break;
                            case 55:
                                b.ᐃΔΔᐃⲆⲆⲆⲆⲆ(d[1]);
                                break;
                            case 56:
                                b.ᐃᐃⵠⲆⵠⲆᐃᐃⵠ(d[1]);
                                break;
                            case 57:
                                b.ΔⲆΔᐃⵠⲆⲆᐃᐃ();
                                break;
                            case 58:
                                b.ΔΔⵠᐃⵠⲆⲆⵠⲆ();
                                break;
                            case 59:
                                b.ᐃⵠⲆⲆⵠΔᐃⵠⵠ();
                                break;
                            case 60:
                                b.ΔΔᐃⲆⵠΔΔᐃΔ();
                                break;
                            case 61:
                                Yw.ᐃⵠⵠ.ⵠΔⵠⲆΔΔᐃ = 0.2;
                                Yw.ᐃⵠⵠ.ΔⵠⵠⲆΔ = 3;
                                break;
                            case 62:
                                b.ⲆΔⲆᐃΔⲆΔᐃᐃ(new Uint16Array(e));
                                break;
                            case 63:
                                b.ΔΔⵠᐃΔΔᐃΔΔ();
                                break;
                            case 64:
                                b.ᐃⵠΔᐃⲆⲆⵠⵠⲆ();
                                break;
                            case 65:
                                b.ⵠⲆᐃΔᐃΔᐃΔⵠ();
                                break;
                            case 66:
                                b.ΔᐃΔⲆΔᐃᐃᐃᐃ();
                                break;
                            case 67:
                                b.ᐃᐃΔΔⲆᐃΔⲆⵠ(d[1]);
                                break;
                            case 68:
                                b.ⵠᐃΔⵠⲆⵠⲆⲆΔ(d[1]);
                                break;
                            case 69:
                                b.ᐃΔΔⵠⲆᐃᐃ(d[1]);
                                break;
                            case 70:
                                b.ⵠΔᐃⵠᐃⵠΔΔⲆ(d[1]);
                                break;
                            case 71:
                                b.ⵠⲆⲆⵠⲆ(d[1]);
                        }
                    }
                }
            };
            b.ⵠΔᐃᐃ.onerror = function () {
                if (Yw.reconnect.enabled) {
                    bj.setTimeout(b.timeout, 2500);
                }
            };
            this.ⵠΔᐃᐃ.onopen = function () {
                clearTimeout(b.ΔⲆΔⵠⲆ);
                Yw.ΔⲆᐃⲆⲆΔΔ = Yw.ΔⲆᐃⲆⲆΔΔ || ΔⲆⲆⵠ.ⲆΔⲆᐃᐃΔᐃ("token");
                ΔⲆⲆⵠ.ⲆᐃⵠΔΔΔᐃ().then(a => {
                    b.ⵠΔᐃᐃ[cw](Pa[ma].stringify([mf.Δᐃⵠⵠᐃ.input.value, screen.width + 200, screen.height + 200, ow.ⲆᐃᐃΔΔᐃᐃ, Yw.ⵠᐃⲆⲆΔ, Yw.ᐃⲆᐃᐃᐃΔⲆ, Yw.reconnect.enabled ? 1 : 0, mf.ᐃᐃᐃⵠ, mf.ΔᐃᐃⲆⲆ, mf.ⲆⲆᐃⵠⲆ, mf.ΔⵠΔΔⵠ, mf.ΔⵠᐃΔⵠ, mf.Ⲇᐃⵠᐃᐃ, ex === undefined ? 0 : ex, dx === undefined ? 0 : dx.substring(dx.length - 50), ew, Yw.ΔⲆᐃⲆⲆΔΔ, a, Yw.ΔⵠΔⲆⵠᐃⲆ, Yw.ΔⵠⵠⵠⲆⵠⵠ]));
                    Yw.ΔⲆᐃⲆⲆΔΔ = undefined;
                    Yw.ΔⵠΔⲆⵠᐃⲆ = vj;
                    Yw.ΔⵠⵠⵠⲆⵠⵠ = Jl;
                    b.ΔⲆΔⵠⲆ = setTimeout(b.timeout, ow.ⲆΔΔⵠᐃⵠΔⲆⵠ);
                });
            };
        };
    }();
    var Cf;
    var Yw;
    var Zw;
    var $w = {
        ᐃⵠⲆⵠⲆ: false
    };
    var _w = new function () {
        this.ᐃⲆⲆΔᐃ = 0;
        this.loaded = 0;
        this.transition = 0;
        this.ⵠⵠⵠᐃⵠΔᐃ = function (a) {
            return a / Cf.w * 100;
        };
        this.ΔⲆΔᐃⲆᐃⵠ = function (a) {
            return a / Cf.ⵠⲆⵠ * 100;
        };
        this.ΔᐃⲆⵠⲆⵠᐃ = function (a, b) {
            a = this.ⵠⵠⵠᐃⵠΔᐃ(a) - this.ⵠⲆⲆΔⲆ.x;
            return this.ⵠⲆⲆΔⲆ.x + b * a;
        };
        this.ᐃΔⵠⲆⲆΔᐃ = function (a, b) {
            a = Math.abs(this.ΔⲆΔᐃⲆᐃⵠ(a) - this.ⵠⲆⲆΔⲆ.y);
            return this.ⵠⲆⲆΔⲆ.y + b * a;
        };
        this.sample = {};
        this.ⵠⵠⲆⵠΔ = {};
        this.ᐃⲆⲆΔ = {};
        this.ⵠⲆᐃⲆⲆⵠⲆ = function (b, c, d, e) {
            for (var f = 0; c.length > f; f++) {
                var g = c[f];
                if (!b.playing(g)) {
                    b.pos(d, e, -0.5, g);
                    b.play(g);
                    return dn;
                }
            }
            return pl;
        };
        this.ⵠⵠΔ = function (a, b, c, d) {
            c = this.ΔᐃⲆⵠⲆⵠᐃ(c, ⵠⵠΔⵠⵠ.ᐃᐃⵠⲆᐃΔⵠ);
            d = this.ᐃΔⵠⲆⲆΔᐃ(d, ⵠⵠΔⵠⵠ.ᐃᐃⵠⲆᐃΔⵠ);
            console.log("HIT", a, b, c, d, ⵠⵠΔⵠⵠ.ᐃᐃⵠⲆᐃΔⵠ);
            if (a) {
                if (b === 1) {
                    this.ⵠⲆᐃⲆⲆⵠⲆ(this.ᐃⲆⲆΔ.ⲆⲆΔΔᐃⲆⲆ, this.sample.ⲆⲆΔΔᐃⲆⲆ, c, d);
                } else if (b === 0) {
                    this.ⵠⲆᐃⲆⲆⵠⲆ(this.ᐃⲆⲆΔ.ΔⵠⵠⵠⵠΔΔ, this.sample.ΔⵠⵠⵠⵠΔΔ, c, d);
                }
            } else {
                this.ⵠⲆᐃⲆⲆⵠⲆ(this.ᐃⲆⲆΔ.ᐃᐃⵠⲆⲆ, this.sample.ᐃᐃⵠⲆⲆ, c, d);
            }
        };
        this.ⵠⲆⲆΔⲆ = {
            x: 0,
            y: 0
        };
        this.ᐃᐃᐃⲆⵠΔⲆ = {
            x: 0,
            y: 0
        };
        this.ᐃᐃᐃΔᐃ = {};
        this.ΔᐃᐃΔ = [];
        this.ⲆᐃⲆⲆⲆ = function (a, b) {
            for (var c in this.ᐃᐃᐃΔᐃ) {
                var d = this.ᐃᐃᐃΔᐃ[c];
                d.check(a);
                if (d.ᐃᐃⲆΔⵠⵠⵠ) {
                    if (Cf.ⲆⲆⵠᐃⵠ.now < nf.ᐃⵠⵠⵠᐃⵠΔ) {
                        d.ΔᐃⵠⲆⲆ();
                    }
                    if (b) {
                        d.ⲆᐃΔ(a, this.ⵠⲆⲆΔⲆ);
                    }
                    if (this.transition) {
                        d.transition();
                    }
                }
            }
            this.transition &&= 0;
        };
        this.ᐃⲆᐃΔⲆⲆⵠᐃⵠ = function () {
            var a = [];
            for (var b = 0; b < this.ΔᐃᐃΔ.length; b++) {
                if ((e = this.ΔᐃᐃΔ[b]).ΔⵠᐃⲆΔⵠⵠ) {
                    a.push(b);
                } else if (!e.ΔⵠᐃⲆΔⵠⵠ && !Cf.ⵠⵠⵠΔⲆ[e.ⵠΔⲆΔ]) {
                    e.ΔΔΔΔΔΔᐃ();
                    a.push(b);
                }
            }
            for (var c = Cf.Δᐃⵠ[tw.ⵠᐃᐃⵠΔ], d = (b = 0, 0); b < c.length && d < a.length; b++) {
                var e = c[b];
                if ((qw.ⲆΔⲆΔⲆΔΔ != Cf.mode || Cf.ΔᐃᐃΔ[e.id].Δᐃⵠⵠᐃ !== "spectator") && e.ⲆⵠⵠᐃΔ === -1 && e.ⵠΔⲆΔ !== Yw.ⵠΔⲆΔ) {
                    this.ΔᐃᐃΔ[a[d]].ⵠΔⵠⲆⲆ(e.ⵠΔⲆΔ);
                    d++;
                }
            }
        };
        this.ΔΔⵠⵠᐃΔⵠⵠⲆ = function () {
            this.ᐃⲆᐃΔⲆⲆⵠᐃⵠ();
            for (var a = 0; this.ΔᐃᐃΔ.length > a; a++) {
                var b = this.ΔᐃᐃΔ[a];
                if (!b.ΔⵠᐃⲆΔⵠⵠ && b.check()) {
                    b.ⲆᐃΔ();
                }
            }
        };
        this.ⵠⲆΔⲆᐃΔᐃᐃⵠ = function (a) {
            if (this.ᐃᐃᐃⲆⵠΔⲆ.x === a.x && a.y === this.ᐃᐃᐃⲆⵠΔⲆ.y) {
                return 0;
            } else {
                this.ᐃᐃᐃⲆⵠΔⲆ.x = a.x;
                this.ᐃᐃᐃⲆⵠΔⲆ.y = a.y;
                this.ⵠⲆⲆΔⲆ.x = this.ⵠⵠⵠᐃⵠΔᐃ(a.x);
                this.ⵠⲆⲆΔⲆ.y = this.ΔⲆΔᐃⲆᐃⵠ(a.y);
                Howler.pos(this.ⵠⲆⲆΔⲆ.x, this.ⵠⲆⲆΔⲆ.y, 0);
                return 1;
            }
        };
        this.ᐃⵠΔΔⲆΔⲆⲆⵠ = function () {
            if (this.ᐃⲆⲆΔᐃ && this.loaded) {
                var a = Cf.ⵠⵠⵠΔⲆ[Yw.ⵠΔⲆΔ];
                if (a) {
                    a.ⲆⵠⵠᐃΔ = 0;
                    var b = this.ⵠⲆΔⲆᐃΔᐃᐃⵠ(a);
                    if (qw.ΔⲆᐃⵠⵠ !== Cf.mode && Cf.mode !== qw.ⵠΔⵠⲆᐃ && Cf.mode !== qw.ⵠᐃΔⵠΔᐃΔ) {
                        this.ⲆᐃⲆⲆⲆ(a, b);
                    }
                    this.ΔΔⵠⵠᐃΔⵠⵠⲆ();
                }
            }
        };
        this.ᐃᐃᐃⵠᐃΔᐃΔΔ = function () {
            for (var b in rf) {
                var c = rf[b];
                if (typeof c === "object" && c.path) {
                    c.ᐃᐃΔⲆΔ = new Howl({
                        src: c.path,
                        volume: 0,
                        sprite: c.ᐃΔ
                    });
                }
                for (var d in c.sample) {
                    var f = c.sample[d];
                    var g = [];
                    console.log(undefined);
                    for (var h = 0; h < f; h++) {
                        var j = c.ᐃᐃΔⲆΔ.play(d);
                        c.ᐃᐃΔⲆΔ.stop(j);
                        c.ᐃᐃΔⲆΔ.on("fade", function (a) {
                            if (!this.volume(a)) {
                                console.log(zr, Ft);
                                this.stop(a);
                            }
                        }, j);
                        g.push(j);
                    }
                    if (g.length > 1) {
                        _w.sample[d] = g;
                    } else {
                        _w.sample[d] = g[0];
                    }
                    _w.ᐃⲆⲆΔ[d] = c.ᐃᐃΔⲆΔ;
                }
            }
        };
        this.ᐃΔΔⲆΔⲆⵠ = function (a, b, c) {
            for (var d = 0; a.length > d; d++) {
                b.volume(c, a[d]);
            }
        };
        this.ⲆΔΔᐃᐃⵠΔ = function (b, c, d, e, f, g) {
            var a = b;
            for (var i = 0; i < d; i++) {
                var j = a[i] = [];
                for (ΔⵠᐃΔ = 0; e > ΔⵠᐃΔ; ΔⵠᐃΔ++) {
                    j[ΔⵠᐃΔ] = _w.sample[f + ΔⵠᐃΔ][i];
                    c.ᐃᐃΔⲆΔ.volume(g, j[ΔⵠᐃΔ]);
                }
            }
        };
        this.ⵠΔⵠⲆⲆ = function () {
            _w.ᐃᐃᐃⵠᐃΔᐃΔΔ();
            _w.ⵠⵠⲆⵠΔ.ΔΔΔⵠⵠⵠΔ = [];
            _w.ⵠⵠⲆⵠΔ.ᐃᐃᐃⲆᐃ = [];
            _w.ⵠⵠⲆⵠΔ.ᐃⲆⵠⵠⵠ = [];
            _w.ⲆΔΔᐃᐃⵠΔ(_w.ⵠⵠⲆⵠΔ.ΔΔΔⵠⵠⵠΔ, rf.ᐃⲆⲆᐃΔΔⲆ, nf.ⵠᐃᐃⵠΔ, 3, "p", 0.15);
            _w.ⲆΔΔᐃᐃⵠΔ(_w.ⵠⵠⲆⵠΔ.ᐃᐃᐃⲆᐃ, rf.ⲆΔⲆΔΔⲆⵠ, nf.ⵠᐃᐃⵠΔ, 4, "w", 0.15);
            _w.ⲆΔΔᐃᐃⵠΔ(_w.ⵠⵠⲆⵠΔ.ᐃⲆⵠⵠⵠ, rf.ΔᐃΔⲆⲆΔⲆ, nf.ⵠᐃᐃⵠΔ, 3, "d", 0.09);
            _w.ᐃΔΔⲆΔⲆⵠ(_w.sample.ᐃᐃⵠⲆⲆ, _w.ᐃⲆⲆΔ.ᐃᐃⵠⲆⲆ, 0.15);
            _w.ᐃΔΔⲆΔⲆⵠ(_w.sample.ΔⵠⵠⵠⵠΔΔ, _w.ᐃⲆⲆΔ.ΔⵠⵠⵠⵠΔΔ, 0.2);
            _w.ᐃΔΔⲆΔⲆⵠ(_w.sample.ⲆⲆΔΔᐃⲆⲆ, _w.ᐃⲆⲆΔ.ⲆⲆΔΔᐃⲆⲆ, 1);
            _w.ᐃᐃᐃΔᐃ.ⵠⵠᐃⵠⵠⲆΔⵠⲆ = new sf(nf.ⲆⵠⲆᐃᐃⵠⵠⲆⵠ, this.sample.ⲆⲆⵠⵠᐃΔΔ, this.sample.ᐃⲆΔⵠⵠᐃᐃ, nf.ⲆⵠⵠⵠᐃⲆⲆᐃᐃ, 0.05, 0.4, rf.ᐃⲆⲆΔᐃΔⲆ.ᐃᐃΔⲆΔ, nf.ⲆᐃⲆⲆᐃΔⲆ, {
                x: nr.ᐃⵠΔΔⵠΔΔ,
                y: nr.ⲆⵠⲆΔⵠΔᐃ,
                w: Cf.w,
                ⵠⲆⵠ: Cf.ⵠⲆⵠ
            }, {
                x: nr.ᐃⵠΔΔⵠΔΔ - 2300,
                y: nr.ⲆⵠⲆΔⵠΔᐃ - 4000,
                w: Cf.w,
                ⵠⲆⵠ: Cf.ⵠⲆⵠ
            }, {
                x: nr.ᐃⵠΔΔⵠΔΔ - 1500,
                y: nr.ⲆⵠⲆΔⵠΔᐃ - 2000,
                w: Cf.w,
                ⵠⲆⵠ: Cf.ⵠⲆⵠ
            });
            _w.ᐃᐃᐃΔᐃ.ⵠᐃⲆΔⵠⲆⵠΔΔ = new sf(nf.ⲆⲆⵠⲆΔᐃᐃ, this.sample.ⵠᐃⵠⵠΔΔᐃ, this.sample.ᐃⲆⲆⵠⲆᐃᐃ, nf.ⵠⲆᐃⵠΔⲆⲆⲆⲆ, 0.03, 0.25, rf.ᐃⲆⲆΔᐃΔⲆ.ᐃᐃΔⲆΔ, nf.ⲆᐃⲆⲆᐃΔⲆ, {
                x: 0,
                y: nr.ⲆⵠⲆΔⵠΔᐃ + 800,
                w: nr.ᐃⵠΔΔⵠΔΔ - 2300,
                ⵠⲆⵠ: Cf.ⵠⲆⵠ
            }, {
                x: -100,
                y: nr.ⲆⵠⲆΔⵠΔᐃ - 300,
                w: nr.ᐃⵠΔΔⵠΔΔ - 100,
                ⵠⲆⵠ: Cf.ⵠⲆⵠ
            }, {
                x: -100,
                y: nr.ⲆⵠⲆΔⵠΔᐃ + 400,
                w: nr.ᐃⵠΔΔⵠΔΔ - 1400,
                ⵠⲆⵠ: Cf.ⵠⲆⵠ
            });
            _w.ᐃᐃᐃΔᐃ.ΔΔᐃᐃΔᐃⲆ = new sf(nf.ⲆⲆⵠⲆΔᐃᐃ, this.sample.ⵠⲆⵠⲆⲆΔⵠ, this.sample.ΔⲆⵠⲆᐃⵠⵠ, nf.ᐃⵠⲆΔᐃⵠⲆⵠᐃ, 0.01, 0.22, rf.ᐃⲆⲆΔᐃΔⲆ.ᐃᐃΔⲆΔ, nf.ⲆᐃⲆⲆᐃΔⲆ, {
                x: -100,
                y: -100,
                w: Cf.w + 200,
                ⵠⲆⵠ: nr.ⲆⵠⲆΔⵠΔᐃ - 1000
            }, {
                x: -100,
                y: -100,
                w: Cf.w + 200,
                ⵠⲆⵠ: nr.ⲆⵠⲆΔⵠΔᐃ + 600
            }, {
                x: -100,
                y: -100,
                w: Cf.w + 200,
                ⵠⲆⵠ: nr.ⲆⵠⲆΔⵠΔᐃ + 100
            });
            for (var a = 0; a < nf.ⵠᐃᐃⵠΔ; a++) {
                _w.ΔᐃᐃΔ[a] = new bf(a);
            }
            _w.ΔᐃᐃΔ[0].ⵠΔⵠⲆⲆ(Yw.ⵠΔⲆΔ);
            _w.loaded = 1;
        };
        this.ⵠⵠⲆⲆⵠⵠⵠᐃᐃ = function () {
            if (!this.transition && Cf.ⲆⲆⵠᐃⵠ.now < nf.ᐃⵠⵠⵠᐃⵠΔ) {
                this.transition = 1;
            }
        };
        this.ⲆᐃᐃΔᐃ = function () {
            if (this.ᐃⲆⲆΔᐃ && this.loaded) {
                for (var a in _w.sample) {
                    var b = _w.sample[a];
                    if (typeof b === "object") {
                        for (var c = 0; c < b.length; c++) {
                            _w.ᐃⲆⲆΔ[a].stop(b[c]);
                        }
                    } else {
                        _w.ᐃⲆⲆΔ[a].stop(b);
                    }
                }
                for (c = 0; _w.ΔᐃᐃΔ.length > c; c++) {
                    _w.ΔᐃᐃΔ[c].ΔΔΔΔΔΔᐃ();
                }
            }
        };
        this.select = function () {
            if (_w.ᐃⲆⲆΔᐃ) {
                _w.ⲆᐃᐃΔᐃ();
            } else {
                if (!_w.loaded) {
                    _w.ⵠΔⵠⲆⲆ();
                }
                _w.ΔᐃᐃΔ[0].ⵠΔⲆΔ = Yw.ⵠΔⲆΔ;
                _w.ΔᐃᐃΔ[0].ΔⵠᐃⲆΔⵠⵠ = 0;
                _w.ⵠⵠⲆⲆⵠⵠⵠᐃᐃ();
            }
            _w.ᐃⲆⲆΔᐃ = !_w.ᐃⲆⲆΔᐃ;
        };
    }();
    var wf = new function () {
        this.ⲆⲆⵠⲆⲆⲆⵠ = function () {
            this.ⵠΔΔᐃΔ = 81;
            this.ΔᐃⵠⲆᐃ = 68;
            this.ΔⵠΔⲆⲆ = 90;
            this.ⵠⲆᐃΔⵠᐃⲆ = 83;
        };
        this.ΔΔΔᐃⲆⲆⲆ = function () {
            this.ⵠΔΔᐃΔ = 65;
            this.ΔᐃⵠⲆᐃ = 68;
            this.ΔⵠΔⲆⲆ = 87;
            this.ⲆⵠΔⲆᐃ = 83;
        };
        this.ΔᐃⲆⲆⲆ = 0;
        this.ⵠⲆᐃΔⵠᐃⲆ = 1;
        this.ΔΔⵠΔᐃΔⵠ = 49;
        this.ᐃⵠΔⲆⲆⵠΔ = 50;
        this.ⲆΔᐃⵠⵠⵠᐃ = 51;
        this.ⵠⵠᐃⵠΔⲆᐃ = 52;
        this.ΔᐃⲆᐃⲆΔᐃⲆⲆ = 53;
        this.ᐃⲆⲆᐃᐃⲆⵠ = 17;
        this.ΔΔⵠⵠⵠᐃΔ = 37;
        this.ⵠΔΔᐃⲆⲆΔ = 39;
        this.ⵠⵠⵠⲆⲆᐃᐃ = 38;
        this.ᐃⵠᐃⵠⲆⲆΔ = 40;
        this.ᐃⵠⵠⵠⵠⵠΔ = 32;
        this.ΔᐃⵠⵠⵠⵠΔ = 82;
        this.ⵠⵠⲆΔΔᐃΔ = 71;
        this.ⵠᐃⵠᐃⵠΔⲆ = 86;
        this.ᐃᐃΔΔΔⵠΔ = 66;
        this.ΔΔΔᐃⲆⲆⲆ();
        this.keys = new Array(255);
        for (var a = 0; a < 255; a++) {
            this.keys[a] = this.ΔᐃⲆⲆⲆ;
        }
        this.up = function (a) {
            var b = Math.min(a.charCode || a.keyCode, 255);
            this.keys[b] = this.ΔᐃⲆⲆⲆ;
        };
        this.down = function (a) {
            var b = Math.min(a.charCode || a.keyCode, 255);
            if (b == this.ⵠΔΔᐃΔ || this.ΔΔⵠⵠⵠᐃΔ == b) {
                this.ᐃⲆᐃΔⲆΔᐃ();
            } else if (b == this.ΔⵠΔⲆⲆ || this.ⵠⵠⵠⲆⲆᐃᐃ == b) {
                this.ⵠΔΔᐃᐃⲆΔ();
            } else if (this.ⵠⲆᐃΔⵠᐃⲆ == b || b == this.ⵠᐃⵠⲆΔᐃⲆΔⲆ) {
                this.ΔⲆⲆᐃⵠᐃⵠ();
            } else if (this.ΔᐃⵠⲆᐃ == b || this.ⵠΔΔᐃⲆⲆΔ == b) {
                this.ΔⲆᐃᐃⲆΔⲆ();
            }
            this.keys[b] = this.ⵠⲆᐃΔⵠᐃⲆ;
            return b;
        };
        this.ᐃⲆᐃΔⲆΔᐃ = function () {
            this.keys[this.ΔᐃⵠⲆᐃ] = this.ΔᐃⲆⲆⲆ;
            this.keys[this.ⵠΔΔᐃⲆⲆΔ] = this.ΔᐃⲆⲆⲆ;
        };
        this.ΔⲆᐃᐃⲆΔⲆ = function () {
            this.keys[this.ⵠΔΔᐃΔ] = this.ΔᐃⲆⲆⲆ;
            this.keys[this.ΔΔⵠⵠⵠᐃΔ] = this.ΔᐃⲆⲆⲆ;
        };
        this.ΔⲆⲆᐃⵠᐃⵠ = function () {
            this.keys[this.ΔⵠΔⲆⲆ] = this.ΔᐃⲆⲆⲆ;
            this.keys[this.ⵠⵠⵠⲆⲆᐃᐃ] = this.ΔᐃⲆⲆⲆ;
        };
        this.ⵠΔΔᐃᐃⲆΔ = function () {
            this.keys[this.ⲆⵠΔⲆᐃ] = this.ΔᐃⲆⲆⲆ;
            this.keys[this.ᐃⵠᐃⵠⲆⲆΔ] = this.ΔᐃⲆⲆⲆ;
        };
        this.ⵠⵠΔᐃΔᐃΔ = function () {
            this.keys[this.ΔᐃⵠⲆᐃ] = this.ΔᐃⲆⲆⲆ;
            this.keys[this.ⵠΔΔᐃⲆⲆΔ] = this.ΔᐃⲆⲆⲆ;
            this.keys[this.ⵠΔΔᐃΔ] = this.ΔᐃⲆⲆⲆ;
            this.keys[this.ΔΔⵠⵠⵠᐃΔ] = this.ΔᐃⲆⲆⲆ;
            this.keys[this.ΔⵠΔⲆⲆ] = this.ΔᐃⲆⲆⲆ;
            this.keys[this.ⵠⵠⵠⲆⲆᐃᐃ] = this.ΔᐃⲆⲆⲆ;
            this.keys[this.ⲆⵠΔⲆᐃ] = this.ΔᐃⲆⲆⲆ;
            this.keys[this.ᐃⵠᐃⵠⲆⲆΔ] = this.ΔᐃⲆⲆⲆ;
        };
        this.ΔⲆΔⲆᐃᐃΔ = function () {
            return this.keys[this.ⵠΔΔᐃΔ] || this.keys[this.ΔΔⵠⵠⵠᐃΔ];
        };
        this.ΔΔᐃᐃⲆΔⲆ = function () {
            return this.keys[this.ΔᐃⵠⲆᐃ] || this.keys[this.ⵠΔΔᐃⲆⲆΔ];
        };
        this.ⵠᐃⵠᐃΔⲆΔ = function () {
            return this.keys[this.ΔⵠΔⲆⲆ] || this.keys[this.ⵠⵠⵠⲆⲆᐃᐃ];
        };
        this.ⵠᐃⵠⲆΔⲆⲆ = function () {
            return this.keys[this.ⲆⵠΔⲆᐃ] || this.keys[this.ᐃⵠᐃⵠⲆⲆΔ];
        };
        this.ΔⲆΔⲆⵠΔΔⵠΔ = function () {
            return this.keys[this.ᐃⲆⲆᐃᐃⲆⵠ];
        };
        this.ΔΔⵠⲆᐃΔΔΔⲆ = function () {
            return this.keys[this.ΔΔⵠΔᐃΔⵠ];
        };
        this.ⲆᐃⲆᐃΔᐃⵠⵠⵠ = function () {
            return this.keys[this.ᐃⵠΔⲆⲆⵠΔ];
        };
        this.ᐃᐃⵠⵠⵠΔⲆᐃᐃ = function () {
            return this.keys[this.ⲆΔᐃⵠⵠⵠᐃ];
        };
        this.ⲆᐃᐃⲆⵠΔⲆΔᐃ = function () {
            return this.keys[this.ⵠⵠᐃⵠΔⲆᐃ];
        };
        this.ᐃⲆⲆΔⵠⵠⲆⲆΔ = function () {
            return this.keys[this.ᐃⵠⵠⵠⵠⵠΔ];
        };
        this.ᐃⲆⵠΔⲆᐃΔⵠᐃ = function () {
            return this.keys[this.ΔᐃⵠⵠⵠⵠΔ];
        };
        this.ⵠΔᐃⲆⵠᐃⵠⵠⵠ = function () {
            return this.keys[this.ⵠⵠⲆΔΔᐃΔ];
        };
        this.ΔⵠⲆⵠᐃⲆΔᐃᐃ = function () {
            return this.keys[this.ⵠᐃⵠᐃⵠΔⲆ];
        };
        this.ⵠᐃᐃⲆΔⵠⵠⵠΔ = function () {
            return this.keys[this.ᐃᐃΔΔΔⵠΔ];
        };
    }();
    var Pf = new function () {
        this.ⵠⲆᐃΔⵠᐃⲆ = 0;
        this.ΔᐃⲆⲆⲆ = 1;
        this.IDLE = 2;
        this.ⵠΔⲆⵠᐃⵠᐃ = 0;
        this.ⵠⵠΔⲆⲆᐃΔΔᐃ = 1;
        this.ΔⲆⲆᐃ = {
            x: 0,
            y: 0
        };
        this.ΔᐃⵠΔⵠⲆΔ = 0;
        this.ᐃᐃⲆⵠⲆⲆⲆ = 0;
        this.angle = 0;
        this.state = this.IDLE;
        this.ᐃⲆⵠΔ = this.ⵠΔⲆⵠᐃⵠᐃ;
        this.down = function () {
            this.state = this.ⵠⲆᐃΔⵠᐃⲆ;
        };
        this.up = function () {
            this.state = this.ΔᐃⲆⲆⲆ;
        };
        this.ⲆᐃΔ = function () {
            if (this.ΔⲆⲆᐃ.x != this.ΔᐃⵠΔⵠⲆΔ || this.ᐃᐃⲆⵠⲆⲆⲆ != this.ΔⲆⲆᐃ.y) {
                this.ΔᐃⵠΔⵠⲆΔ = this.ΔⲆⲆᐃ.x;
                this.ᐃᐃⲆⵠⲆⲆⲆ = this.ΔⲆⲆᐃ.y;
                return true;
            } else {
                return pn;
            }
        };
    }();
    var Af = 0;
    var ax = 0;
    var bx = new function (f, e, i) {
        this.Ⲇᐃ = f;
        this.ᐃ = e;
        this.ᐃᐃⵠⵠⲆⵠΔ = {
            translate: {
                x: 0,
                y: 0
            },
            style: document.getElementById("loading").style,
            ⲆᐃΔ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        this.ᐃᐃⵠⵠⲆⵠΔ.style.position = "absolute";
        this.ᐃᐃⵠⵠⲆⵠΔ.style.display = "inline-block";
        this.ᐃᐃⵠⵠⲆⵠΔ.ⲆᐃΔ();
        this.ᐃⵠⲆⵠⲆ = true;
        this.stop = function () {
            this.ᐃⵠⲆⵠⲆ = Sh;
        };
        this.ΔᐃⵠᐃΔⵠᐃ = {
            total: 1
        };
        var j = this;
        function k() { }
        var n = 0;
        function o(a) {
            if (a.indexOf("normal-mode") !== -1 || a.indexOf("player0") !== -1) {
                return 1;
            } else if (a.indexOf("day-bag") !== -1 || a.indexOf("night-bag") !== -1 || a.indexOf("day-book") !== -1 || a.indexOf("night-book") !== -1 || a.indexOf("day-player") !== -1 || a.indexOf("night-player") !== -1 || a.indexOf("day-accessory") !== -1 || a.indexOf("night-accessory") !== -1 || a.indexOf("day-crate") !== -1 || a.indexOf("night-crate") !== -1 || a.indexOf("day-skin") !== -1 || a.indexOf("night-skin") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-rock") !== -1 || a.indexOf("night-rock") !== -1 || a.indexOf("day-flower") !== -1 || a.indexOf("night-flower") !== -1 || a.indexOf("day-leaf") !== -1 || a.indexOf("night-leaf") !== -1 || a.indexOf("day-herb") !== -1 || a.indexOf("night-herb") !== -1 || a.indexOf("day-shell") !== -1 || a.indexOf("night-shell") !== -1 || a.indexOf("day-hand-skin") !== -1 || a.indexOf("night-hand-skin") !== -1 || a.indexOf("bignight") !== -1 || a.indexOf("bigday") !== -1 || a.indexOf("bigzday") !== -1 || a.indexOf("bigznight") !== -1 || a.indexOf("tutorial-box") !== -1 || a.indexOf("tuto-") !== -1 || a.indexOf("-leaderboard-") !== -1 || a.indexOf("-lead-") !== -1 || a.indexOf("day-lava-") !== -1 || a.indexOf("night-lava-") !== -1 || a.indexOf("-click.png") !== -1 || a.indexOf("-in.png") !== -1 || a.indexOf("-fog") !== -1 || a.indexOf("-lava") !== -1 || a.indexOf("pebblecompo") !== -1 || a.indexOf("avatar-player") !== -1) {
                return 0;
            } else {
                return 1;
            }
        }
        this.ᐃⲆⵠΔⵠ = function () {
            j.ⲆᐃΔ();
            if (++n == 40) {
                j.stop();
                k();
                return;
            }
            bj.setTimeout(j.ᐃⲆⵠΔⵠ, 33);
        };
        this.ⲆᐃᐃΔᐃ = function (a) {
            k = a;
            j.ᐃⲆⵠΔⵠ();
        };
        new Date().getTime();
        Object.keys(ⲆⲆ).length;
        console.log(Og, undefined);
        for (var p in ⲆⲆ) {
            if (o(ⲆⲆ[p]) === 0) {
                0;
            }
        }
        console.log(undefined, Qh);
        function q() {
            if (this.ⵠᐃΔⲆⲆⲆⲆ !== 0) {
                return this.ⵠᐃΔⲆⲆⲆⲆ;
            } else {
                this.ⵠᐃΔⲆⲆⲆⲆ = 2;
                this.src = this.ⵠⲆⵠⵠᐃ;
                return 0;
            }
        }
        function l(a) {
            this.ⵠᐃΔⲆⲆⲆⲆ = 1;
        }
        var g = 0;
        function s() {
            console.log(Zk);
            if (g !== 1) {
                g = 1;
                console.log(Zk);
                if (Ts !== yg) {
                    yg();
                }
                Ts();
                var a = ΔⲆⲆⵠ.ⲆΔⲆᐃᐃΔᐃ("server");
                if (a !== null) {
                    ΔᐃⵠⲆ.ΔᐃΔΔⲆᐃᐃ = 1;
                    ΔᐃⵠⲆ.ⲆⵠⵠΔΔ = [{
                        nu: 0,
                        m: 100,
                        i: "server" + a + ".starve.io",
                        p: 443,
                        a: a,
                        ssl: 1
                    }];
                }
                ΔᐃⵠⲆ.ΔΔⲆⵠᐃⲆᐃⲆⵠ();
                setTimeout(i, 100);
            }
        }
        function b() {
            let a = function () {
                ΔᐃⵠⲆ.ᐃⲆⵠᐃᐃⲆᐃ(s);
            };
            if (document.fonts && document.fonts.check) {
                if (document.fonts.check("1em Baloo Paaji")) {
                    setTimeout(a, 100);
                } else {
                    setTimeout(b, 100);
                }
            } else {
                setTimeout(a, 1000);
            }
        }
        function d() {
            this.ᐃⵠⵠΔⵠⲆⵠ++;
            console.warn(`Image (${this.src}) failed to load, attempt ${this.ᐃⵠⵠΔⵠⲆⵠ}`, this);
            if (this.ᐃⵠⵠΔⵠⲆⵠ > 3) {
                console.warn("Failed to load image too many times");
            }
            var a = this.ᐃⵠⵠΔⵠⲆⵠ;
            var b = this.src;
            var c = o(b) === 0 ? 10000 : 2000;
            setTimeout(function () {
                for (var c in ⲆⲆΔⲆΔⵠⲆ) {
                    if (b.indexOf(ⲆⲆΔⲆΔⵠⲆ[c]) !== -1) {
                        ⲆⲆ[c] = new Image();
                        ⲆⲆ[c].onload = l;
                        ⲆⲆ[c].onerror = d;
                        ⲆⲆ[c].ᐃⵠⵠΔⵠⲆⵠ = a;
                        ⲆⲆ[c].src = b;
                        break;
                    }
                }
            }, c);
        }
        function m(a) {
            for (var b in ⲆⲆ) {
                var c = ⲆⲆ[b];
                if (typeof c === "string" && o(c) === a) {
                    ⲆⲆ[b] = new Image();
                    ⲆⲆ[b].ⵠᐃΔⲆⲆⲆⲆ = 0;
                    ⲆⲆ[b].ᐃⵠⵠΔⵠⲆⵠ = 0;
                    ⲆⲆ[b].onload = l;
                    ⲆⲆ[b].onerror = d;
                    ⲆⲆ[b].ᐃⲆⵠΔΔⵠⲆ = q;
                    ⲆⲆ[b].ⵠⲆⵠⵠᐃ = c;
                }
            }
        }
        m(1);
        m(0);
        Dd(1, "l", 20, "#000");
        b();
        Vm();
        this.ⲆᐃΔ = function () {
            this.ᐃᐃⵠⵠⲆⵠΔ.translate.x = (Rn - 500) / 2;
            this.ᐃᐃⵠⵠⲆⵠΔ.translate.y = (iq - 150) / 2;
            var a = 2500 / (40 - n + 1) - 48;
            this.ᐃᐃⵠⵠⲆⵠΔ.translate.y -= a;
            this.ᐃᐃⵠⵠⲆⵠΔ.ⲆᐃΔ();
        };
        this.ᐃᐃⵠⵠⲆⵠΔ.ⲆᐃΔ();
        this.ⵠⵠΔΔ = function () {
            try {
                ym();
            } catch (a) { }
            this.ⲆᐃΔ();
        };
    }(En, In, function () {
        lc();
        $w = new Ow(En, In);
        (mf = new Sw(En, In)).ⲆⲆⵠⲆΔᐃⵠⵠⵠ();
        Zw = new Mw(En, In);
        Cf = new xw();
        Yw = new Hw();
        bx.ⲆᐃᐃΔᐃ(function () {
            bx.ᐃᐃⵠⵠⲆⵠΔ.style.display = "none";
            mf.ᐃⲆⲆΔᐃ();
        });
    });
    function Jf() {
        try {
            bj.Widget.adsRefresh();
        } catch (a) { }
    }
    bj.onbeforeunload = function () {
        if ($w.ᐃⵠⲆⵠⲆ) {
            return "Are you sure you want quit starve.io ;-; ?";
        }
    };
    Xa();
    (function b(a) {
        bj.requestAnimationFrame(b);
        Af = (a - ax) / 1000;
        ax = a;
        Af = Af > 1 ? 1 : Af;
        if ($w.ᐃⵠⲆⵠⲆ) {
            $w.ⵠⵠΔΔ();
        } else {
            In.clearRect(0, 0, Rn, iq);
            if (bx.ᐃⵠⲆⵠⲆ) {
                bx.ⵠⵠΔΔ();
            } else if (mf.ᐃⵠⲆⵠⲆ) {
                mf.ⵠⵠΔΔ();
            } else if (Zw.ᐃⵠⲆⵠⲆ) {
                Zw.ⵠⵠΔΔ();
            }
        }
    })(0);
    var Mf = 0;
    function cx() {
        Df.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", bg);
        Df.send();
    }
    var Df = new XMLHttpRequest();
    Df.onreadystatechange = function () {
        if (this.readyState === 4) {
            this.status;
        }
    };
    var Ef = "https://token.starve.io/";
    var If = "https://token2.starve.io/";
    var Sf = 0;
    var Qf = 1;
    var _f = 4;
    var Ff = Ft;
    var dx = undefined;
    var ex = undefined;
    var fx = 0;
    bj.ᐃⲆᐃⵠⵠⲆΔ = function () {
        fx = 1;
    };
    var gx = {
        ⵠⲆᐃᐃΔⲆΔΔⲆ: "ACCESS_TOKEN"
    };
    var Lf = document.createElement("script");
    Lf.type = "text/javascript";
    Lf.async = true;
    Lf.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
    Lf.addEventListener("load", function (a) {
        bj.XPayStationWidget.init(gx);
        bj.XPayStationWidget.on("status-done", Vf);
    }, false);
    document.getElementsByTagName("head")[0].appendChild(Lf);
    bj.fbAsyncInit = function () {
        $f();
        console.log(zr);
    };
    (function (a, b, c) {
        var d;
        var e = a.getElementsByTagName(b)[0];
        if (!a.getElementById(c)) {
            (d = a.createElement(b)).id = c;
            d.src = "https://connect.facebook.net/en_US/sdk.js";
            e.parentNode.insertBefore(d, e);
        }
    })(document, "script", "facebook-jssdk");
    var Of = Qh;
    var hx = Li;
    function ix() {
        bj.gapi.auth2.init({
            client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
            scope: "https://www.googleapis.com/auth/userinfo.profile"
        }).then(a => {
            (Of = a).isSignedIn.listen(qf);
            Of.currentUser.listen(Uf);
            if (Of.isSignedIn.get()) {
                Of.signIn();
            }
            Yf();
        });
    }
    function qf(a) { }
    function Uf(a) {
        if (dx === uj && hx !== undefined && (dx = hx.getAuthResponse().id_token) !== Zk) {
            Ff = Sf;
            ex = hx.getBasicProfile().getId();
            bj.ᐃⲆᐃⵠⵠⲆΔ();
            return;
        }
        if (a !== undefined && Vi === a.isSignedIn()) {
            ex = (hx = a).id;
            ex = hx.getBasicProfile().getId();
            dx = hx.getAuthResponse().id_token;
            Ff = Sf;
            bj.ᐃⲆᐃⵠⵠⲆΔ();
        }
    }
    function Yf() {
        if (Of) {
            hx = Of.currentUser.get();
        }
    }
    function Kf(a, b) {
        if (mf.ᐃΔᐃⵠᐃ <= 0) {
            if (mf.ⲆᐃⲆᐃⵠ < b) {
                mf.ᐃⲆⵠⲆ(mf.ᐃⲆΔⲆΔ);
            } else {
                mf.ᐃΔᐃⵠᐃ = 2;
                mf.ᐃᐃⵠⲆΔⲆⲆ = 0;
                mf.ᐃᐃᐃᐃⲆⲆᐃ = 100;
                var c = new XMLHttpRequest();
                c.open("GET", Ef + "buySpin?token=" + dx + "&userid=" + ex + "&spin=" + a);
                c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                c.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        if (c.responseText !== "0") {
                            var a = JSON.parse(c.responseText);
                            mf.ᐃΔⵠᐃᐃⵠⲆⲆΔ(Math.PI * a.rand * 2, a.type, a.id);
                            mf.ⲆᐃⲆᐃⵠ -= b;
                        } else {
                            mf.ᐃΔᐃⵠᐃ = 0;
                        }
                    }
                };
                c.send();
            }
        }
    }
    function Vf() {
        var a = new XMLHttpRequest();
        a.open("GET", Ef + "claimBread?userid=" + ex);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
                var b = Number(a.responseText);
                if (!isNaN(b)) {
                    mf.ⲆᐃⲆᐃⵠ = b;
                }
            }
        };
        a.send();
    }
    function Xf(a, b) {
        if (mf.ⲆᐃⲆᐃⵠ < b) {
            mf.ᐃⲆⵠⲆ(mf.ᐃⲆΔⲆΔ);
        } else {
            var c = new XMLHttpRequest();
            c.open("GET", Ef + "buyKit?token=" + dx + "&userid=" + ex + "&kit=" + a);
            c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            c.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200 && c.responseText !== "0") {
                    var a = JSON.parse(c.responseText);
                    mf.ⲆᐃⲆᐃⵠ -= b;
                    mf.ⵠΔᐃΔᐃ = Date.now() + Number(a);
                }
            };
            c.send();
        }
    }
    function Zf(a) {
        if (ex) {
            var b = new XMLHttpRequest();
            b.open("GET", Ef + "xsolla?userid=" + ex + "&item=" + a);
            b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            b.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
                    gx.access_token = b.responseText;
                    bj.XPayStationWidget.init(gx);
                    bj.XPayStationWidget.open();
                }
            };
            b.send();
        }
    }
    function $f() {
        if (bj.FB) {
            bj.FB.init({
                version: "v15.0",
                appId: "642017356260407",
                xfbml: R,
                cookie: true
            });
        }
        if (ex === undefined) {
            (function () {
                try {
                    if (bj.FB && bj.FB.getUserID()) {
                        ex = bj.FB.getUserID();
                        if (dx === undefined) {
                            bj.FB.getLoginStatus(function () {
                                Ff = Qf;
                                dx = bj.FB.getAuthResponse().accessToken;
                                bj.ᐃⲆᐃⵠⵠⲆΔ(ex);
                            });
                        }
                    }
                } catch (a) { }
                try {
                    ex = hx.getBasicProfile().getId();
                } catch (a) { }
            })();
        }
    }
    function jx() {
        if (mf.ⲆᐃⲆᐃⵠ >= 300 || mf.ⵠᐃⵠⲆⲆⵠᐃ <= 0) {
            var a = document.getElementById("account_nickname_input").value.trim();
            document.getElementById("account_nickname_input").value = a;
            if (a.length >= 1 && a.length <= 20) {
                var b = new XMLHttpRequest();
                b.open("GET", Ef + "changeNickname?token=" + dx + "&userid=" + ex + "&nickname=" + encodeURIComponent(a));
                b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                b.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
                        var a = Number(b.responseText);
                        if (a > 0) {
                            mf.ⲆᐃⲆᐃⵠ -= a;
                        }
                        mf.ⵠᐃⵠⲆⲆⵠᐃ = 1;
                        mf.ᐃⲆⵠⲆ(mf.ᐃⵠΔᐃⲆ);
                    }
                };
                b.send();
            }
        }
    }
    function kx(a) {
        var b = new XMLHttpRequest();
        b.open("GET", Ef + "setRegion?token=" + dx + "&userid=" + ex + "&region=" + a);
        b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        b.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {
                if (b.responseText !== "0") {
                    mf.ᐃⲆⵠⲆ(mf.ⵠᐃᐃⲆΔ);
                } else {
                    mf.ᐃⲆⵠⲆ(mf.ΔᐃᐃᐃΔ);
                }
            }
        };
        b.send();
    }
    function lx(b, c, d, f) {
        b = tj === b ? mf.ΔⵠΔᐃⵠᐃΔ : b;
        c = c === undefined ? mf.ⵠᐃⲆⲆⵠⲆᐃ : c;
        d = sl === d ? mf.ⲆᐃᐃⲆᐃᐃᐃ : d;
        f = vj === f ? mf.ⵠΔΔⲆᐃⵠⲆ : f;
        if (b !== mf.ΔⵠΔᐃⵠᐃΔ || c !== mf.ⵠᐃⲆⲆⵠⲆᐃ || d !== mf.ⲆᐃᐃⲆᐃᐃᐃ || mf.ⵠΔΔⲆᐃⵠⲆ !== f) {
            mf.ΔⵠΔᐃⵠᐃΔ = b;
            mf.ⵠᐃⲆⲆⵠⲆᐃ = c;
            mf.ⲆᐃᐃⲆᐃᐃᐃ = d;
            mf.ⵠΔΔⲆᐃⵠⲆ = f;
            if (f === mf.ⲆⲆⵠᐃⵠᐃᐃ) {
                f = "0";
            } else if (mf.ᐃΔΔΔⵠΔⲆ === f) {
                f = "1";
            } else if (mf.ΔΔΔⵠⵠΔⵠ === f) {
                f = "2";
            } else if (f === mf.ΔᐃⲆᐃΔⲆᐃ) {
                f = "3";
            } else if (f === mf.ⲆΔΔΔᐃⵠΔ) {
                f = "4";
            } else if (mf.ⵠⵠⵠⲆⵠᐃⲆ === f) {
                f = "5";
            }
            if (mf.ⲆⲆᐃᐃⲆⲆⵠ === c) {
                c = "total";
            } else if (c === mf.ⲆⲆⵠᐃΔᐃᐃ) {
                c = "normal";
            } else if (c === mf.ΔΔⵠⲆⲆΔΔ) {
                c = "zombie";
            } else if (mf.ΔⲆΔⵠΔᐃⵠ === c) {
                c = "vampire";
            } else if (c === mf.ⵠΔᐃᐃΔᐃᐃ) {
                c = "forest";
            }
            if (mf.ⵠⲆⲆⲆΔΔΔ === b) {
                b = "all";
            }
            if (mf.ⲆⲆΔⲆⵠⲆΔ === b) {
                b = "week";
            }
            if (b === mf.ⵠΔΔΔⲆΔᐃ) {
                b = "today";
            }
            if (d === mf.ⵠⵠⵠΔⵠⲆΔ) {
                d = "kill";
            } else if (d === mf.ⲆⵠΔᐃᐃⵠᐃ) {
                d = "score";
            } else if (d === mf.ⲆᐃⲆⲆᐃⲆᐃ) {
                d = "time";
            }
            var g = new XMLHttpRequest();
            g.open("GET", Ef + "leaderboard?range=" + b + "&mode=" + c + "&sort=" + d + "&season=" + f);
            g.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            g.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200 && g.responseText !== "0") {
                    for (var a = JSON.parse(g.responseText), b = "", c = 0; a.length > c; c++) {
                        ⵠΔΔᐃⲆ = a[c];
                        var d = ⵠΔΔᐃⲆ[1];
                        try {
                            if (d.indexOf("Starver#") === -1) {
                                d = bj.decodeURIComponent(bj.escape(bj.atob(d)));
                            }
                        } catch (a) { }
                        b += "<div class=\"lineLeaderboard\">";
                        b += "<div class=\"rank\">";
                        b += c + 1 + "";
                        b += "</div>";
                        b += "<div class=\"name\">";
                        b += d;
                        b += "</div>";
                        b += "<div class=\"lvl\">";
                        b += mf.ᐃᐃⲆⲆΔⵠⵠ(ⵠΔΔᐃⲆ[6]) + 1 + "";
                        b += "</div>";
                        b += "<div class=\"kills\">";
                        b += ⵠΔΔᐃⲆ[5] + "";
                        b += "</div>";
                        b += "<div class=\"time\">";
                        b += ⵠΔΔᐃⲆ[4] + "";
                        b += "</div>";
                        b += "<div class=\"score\">";
                        b += ⵠΔΔᐃⲆ[3] + "";
                        b += "</div>";
                        b += "</div>";
                    }
                    document.getElementById("leaderboard").innerHTML = b;
                }
            };
            g.send();
        }
    }
    bj.onload = function () {
        bj.gapi.load("auth2", ix);
    };
})();
