(function () {
    const aj = window;
    var bj = 116;
    if (bj > 13) {
        bj = 96;
    }
    var cj = 1;
    if (cj == 8) {
        cj = 11;
    }
    let dj = 44;
    var ej = 212;
    if (ej == 3) {
        ej = 105;
    }
    const fj = function (a) {
        let b = "";
        for (let c = 0; c < a.length; c++) {
            b += aj.String.fromCharCode(a[c] ^ dj++ % 255);
        }
        return b;
    };
    var a = 242;
    if (a > 3) {
        a = 61;
    }
    Math.floor(203[203 .ⲆᐃⵠᐃᐃⲆΔ]);
    const gj = 6;
    const s = 9;
    const h = true;
    const l = 3;
    const g = 16;
    const u = 100;
    const b = 4;
    const d = 17;
    const v = 13;
    const m = -8;
    const c = 20;
    const p = 18;
    const C = 10;
    const T = undefined;
    const f = false;
    const z = 11;
    const y = -4;
    const w = 14;
    const P = 256;
    const k = h;
    const A = 255;
    const x = 10;
    const J = 19;
    const M = 4;
    const B = 2;
    const D = 15;
    var I = aj.console;
    I.log = I.info = I.error = I.warn = I.debug = I.ⲆΔΔΔⲆⵠⵠⲆⲆ = I.trace = I.time = I.timeEnd = function () { };
    const E = 6;
    const S = 10;
    const Q = 2048;
    const _ = 4096;
    const F = 12;
    const hj = T;
    const j = 5;
    const L = 256;
    const G = 8;
    const R = 7;
    const O = 20;
    const N = 17;
    const H = 5;
    const q = 4;
    const U = 5;
    const W = 0;
    const K = 20;
    const V = 12;
    const X = f;
    const Y = 1;
    const Z = 6;
    const ee = 2;
    const ie = 255;
    const ne = 100;
    const oe = 6;
    let ae = hj;
    let te;
    let ij;
    let jj;
    let kj = hj;
    let lj = hj;
    const mj = 19;
    let be = T;
    let nj = hj;
    const oj = 3;
    let me = [];
    const ce = 14;
    const pe = 11;
    const Ce = 0;
    const Te = 6;
    let fe = "_";
    const pj = 8;
    let ye = hj;
    let qj = hj;
    const rj = 7;
    let ke = hj;
    const sj = 17;
    const xe = 14;
    const Je = 13;
    const Me = 6;
    const Be = 16;
    let De;
    let tj;
    let uj;
    const vj = 2;
    let Qe;
    let wj;
    let xj;
    let yj;
    const zj = 13;
    const Le = 19;
    const Ge = 9;
    let We;
    let Aj = hj;
    const Bj = k;
    let He = T;
    const Cj = 10;
    let Ue;
    const Dj = 15;
    let Ke;
    let Ej;
    let Fj = hj;
    const Gj = hj;
    let $e;
    const Hj = 5;
    const ii = h;
    let ti = T;
    const Ij = f;
    let oi = T;
    let Jj;
    let Kj = Gj;
    const Lj = 100;
    let hi;
    let Mj;
    var Nj = aj.Math.acos;
    aj.Math.acos = aj.Math.asin;
    aj.Math.asin = Nj;
    var ui = aj.Math.cos;
    let bi;
    aj.Math.cos = aj.Math.sin;
    aj.Math.sin = ui;
    let Oj = T;
    const Pj = 18;
    let mi;
    let Qj = T;
    let Rj = Gj;
    const Sj = 256;
    const Ti = 12;
    const fi = 15;
    const zi = 8;
    let yi;
    let Tj = hj;
    const Uj = Gj;
    let ki;
    const Vj = 19;
    let xi;
    let Wj = T;
    const Xj = 255;
    const Bi = 4;
    let Di = Uj;
    let Yj = Gj;
    const Zj = Bj;
    const Si = 9;
    let Qi;
    const $j = 13;
    const Fi = 17;
    const Ri = 6;
    let ji;
    let _j;
    let ak;
    let bk = Gj;
    let ck = Gj;
    const dk = 1;
    const Hi = 100;
    const qi = 14;
    const Ui = 20;
    let Yi;
    let ek = 0;
    if (!aj.WebAssembly || !aj.WebAssembly.instantiate) {
        ΔᐃΔⲆⲆⲆᐃΔⵠ();
    }
    const fk = 11;
    const Xi = 5;
    const Zi = 256;
    const $i = {
        Date: Date
    };
    aj.WebAssembly.instantiate(Uint8Array.from(aj.atob(""), function (a) {
        return a.charCodeAt(0);
    }), $i).then(function (a) {
        ae = a.instance;
        kj = ae.exports;
        te = kj.memory;
        lj = te.buffer;
        ij = kj.__pin;
        jj = kj.__unpin;
        nj = kj.__new;
        be = kj.__collect;
        fe = "_";
        for (let b = 0; b < 31; b++) {
            me[b] = kj[fe + b];
        }
        ye = kj.__rtti_base;
        qj = new Float32Array(lj);
        ke = new Float64Array(lj);
        De = new BigUint64Array(lj);
        tj = new Uint32Array(lj);
        uj = new Uint16Array(lj);
        Qe = new Uint8Array(lj);
        wj = new BigInt64Array(lj);
        xj = new Int32Array(lj);
        yj = new Int16Array(lj);
        Aj = new Int8Array(lj);
        bk = me[1];
        oi = me[26];
        Ue = me[15];
        $e = me[10];
        Wj = me[0];
        ki = me[4];
        bi = me[20];
        Fj = me[2];
        Ke = me[28];
        _j = me[25];
        Yj = me[3];
        We = me[24];
        Oj = me[14];
        Di = me[22];
        He = me[5];
        xi = me[11];
        hi = me[7];
        ck = me[8];
        ji = me[16];
        Jj = me[9];
        Mj = me[27];
        ti = me[30];
        Ej = me[17];
        Qj = me[12];
        Tj = me[21];
        Kj = me[18];
        ak = me[13];
        mi = me[19];
        Qi = me[6];
        Rj = me[29];
        yi = me[23];
        ek = 1;
        if (Yi) {
            Yi();
        }
    });
    const gk = function (a) {
        return tj[(ye + 4 >>> 2) + (a << 1)];
    };
    const hk = 2;
    function ik(a) {
        return 31 - Math.clz32(a >>> 6 & 31);
    }
    const jk = 2;
    const kk = Bj;
    const lk = 10;
    const mk = 3;
    const nk = 16;
    function ok(a, b, c) {
        if (c) {
            switch (a) {
                case 2:
                    return qj;
                case 3:
                    return ke;
            }
        } else {
            switch (a) {
                case 0:
                    if (b) {
                        return Aj;
                    } else {
                        return Qe;
                    }
                case 1:
                    if (b) {
                        return yj;
                    } else {
                        return uj;
                    }
                case 2:
                    if (b) {
                        return xj;
                    } else {
                        return tj;
                    }
                case 3:
                    if (b) {
                        return wj;
                    } else {
                        return De;
                    }
            }
        }
    }
    const pk = 4;
    function qk(b) {
        const c = tj[b + m >>> 2];
        const d = gk(c);
        const e = ik(d);
        let f = d & 4 ? b : tj[b + 4 >>> 2];
        const g = d & 2 ? tj[b + 12 >>> 2] : tj[f + y >>> 2] >>> e;
        return ok(e, d & 2048, d & 4096).subarray(f >>>= e, f + g);
    }
    const rk = 0;
    const sk = 7;
    function tk(b, c, d, e, f) {
        const i = ~(b & 8915) & (b | 8915);
        const a = ((c + 45384) * 1103515245 + 12345) % 2147483648;
        const j = (1 + (36810 + d) * 22695477) % 4294967296;
        const k = (8 << (e >> 16 & 255)) + (0 << (e >> 24 & 255)) + (24 << (e & 255)) + (16 << (e >> 8 & 255));
        const h = (2531011 + (f + 27559) * 214013) % 4294967296;
        const l = Gg(i, a);
        (function (b, c, d, e, f, i) {
            const a = ~(b & 30234) & (b | 30234);
            const j = ~(c & 9612) & 9612 | ~(c & 9612) & c;
            const k = ((d + 6819) * 1103515245 + 12345) % 2147483648;
            const h = (f | 44236) & ~(f & 44236);
            const l = (0 << (i >> 8 & 255)) + (16 << (i >> 16 & 255)) + (8 << (i >> 24 & 255)) + (24 << (i & 255));
            const g = no(a, j, k, ((e + 53913) * 1103515245 + 12345) % 2147483648);
            (function (b, c, d, e, f) {
                const i = (b + 57456) % 65343;
                const a = (39620 + c) % 65429;
                const j = ~(d & 10683) & 10683 | ~(d & 10683) & d;
                const k = ~(e & 16156) & e | ~(e & 16156) & 16156;
                const h = (55109 + f) % 65308;
                const l = gf(i, a, j, k, h, i);
                On(a, j, k, h);
            })(h, l, a, j, k);
        })(j, k, h, i, a, j);
        return l ^ 36186;
    }
    function uk(b, c, d, e) {
        const f = b ^ 32156;
        const g = (c | 42802) & ~(c & 42802);
        const a = d ^ 26896;
        const h = ~(e & 39839) & (e | 39839);
        return (1013904223 + (41948 + (Xs(f, g, a, h) ^ Xs(f, g, a, h))) * 1664525) % 4294967296;
    }
    const vk = 11;
    function wk(b, c, d, e) {
        const f = (b | 12750) & ~(b & 12750);
        const g = c ^ 2927;
        const a = (2531011 + (4194 + d) * 214013) % 4294967296;
        const i = e ^ 48458;
        const j = Pw(f, g, a, i, f, g);
        Nw(a, i, f, g);
        return ~(j & 60245) & (j | 60245);
    }
    const xk = 17;
    const yk = "development";
    const zk = Ij;
    const Ak = "production";
    function Bk(b, c, d, e, f, g) {
        Ej(pr, b, c, d, e, f, g);
        const a = function (b, c, d, e, f) {
            _j(pr, b, c, d, e, f);
            const g = rf(rr[0], rr[1], rr[2], rr[3], rr[4], rr[0]);
            a = rr[1];
            i = rr[2];
            j = rr[3];
            He(pr, a, i, j);
            Nn(rr[0], rr[1], rr[2]);
            Qs(rr[0], rr[1]);
            var a;
            var i;
            var j;
            return ~(g & 43785) & 43785 | ~(g & 43785) & g;
        }(rr[0], rr[1], rr[2], rr[3], rr[4]);
        const h = Kg(rr[5], rr[0], rr[1], rr[2]);
        return (8 << ((a ^ h) >> 16 & 255)) + (24 << ((a ^ h) >> 8 & 255)) + (16 << ((a ^ h) & 255)) + (0 << ((a ^ h) >> 24 & 255));
    }
    const Ck = 18;
    const Dk = zk;
    function Ek(a, b) {
        const c = (0 << (a & 255)) + (24 << (a >> 24 & 255)) + (8 << (a >> 16 & 255)) + (16 << (a >> 8 & 255));
        const d = ~(b & 5482) & 5482 | ~(b & 5482) & b;
        const e = Gg(c, d);
        Pw(c, d, c, d, c, d);
        return e ^ 33261;
    }
    const Fk = 5;
    const Gk = 256;
    function Hk(b, c, d, e) {
        const f = (b | 37241) & ~(b & 37241);
        const g = ((c + 34586) * 2147483629 + 2147483587) % 2147483647;
        const a = (16 << (d >> 16 & 255)) + (24 << (d & 255)) + (0 << (d >> 8 & 255)) + (8 << (d >> 24 & 255));
        const h = ~(e & 64361) & e | ~(e & 64361) & 64361;
        return (1013904223 + (38483 + (uk(f, g, a, h) ^ function (b, c, d, e, f) {
            const g = (24 << (b >> 16 & 255)) + (16 << (b >> 24 & 255)) + (0 << (b >> 0 & 255)) + (8 << (b >> 8 & 255));
            const a = c ^ 53697;
            const i = ~(d & 26481) & 26481 | ~(d & 26481) & d;
            const j = ~(f & 22412) & 22412 | ~(f & 22412) & f;
            const h = wk(g, a, i, (0 << (e >> 16 & 255)) + (8 << (e >> 0 & 255)) + (16 << (e >> 24 & 255)) + (24 << (e >> 8 & 255)));
            On(j, g, a, i);
            return (h | 40825) & ~(h & 40825);
        }(f, g, a, h, f))) * 1664525) % 4294967296;
    }
    const Ik = Bj;
    function Jk(b, c, d, e) {
        const f = ~(b & 46989) & (b | 46989);
        const g = ~(c & 24259) & (c | 24259);
        const a = (33534 + d) % 65400;
        const h = Nw(f, g, a, ((35747 + e) * 1103515245 + 12345) % 2147483648);
        (function (b, c, d) {
            const e = ~(b & 6897) & b | ~(b & 6897) & 6897;
            const f = (c | 10949) & ~(c & 10949);
            const g = (d | 61335) & ~(d & 61335);
            const a = uf(e, f, g, e, f, g);
            const h = tk(e, f, g, e, f);
        })(f, g, a);
        return (h | 25571) & ~(h & 25571);
    }
    const Kk = 0;
    const Lk = 11;
    function Mk(a) {
        this.ⵠⲆⵠⲆ = 2147483648;
        this.a = 1103515245;
        this.c = 12345;
        this.state = a || Math.floor(Math.random() * (this.ⵠⲆⵠⲆ - 1));
    }
    Mk.prototype.random = function () {
        this.state = (this.state * this.a + this.c) % this.ⵠⲆⵠⲆ;
        return this.state / this.ⵠⲆⵠⲆ;
    };
    Mk.prototype.ΔᐃΔⵠⵠⵠᐃ = function (a) {
        this.state = a;
    };
    ΔⵠⲆⲆⲆⲆⲆ = 10000;
    const Nk = 255;
    ⲆⲆⵠΔΔⵠᐃ = [];
    var Ok = new Mk();
    Ok.ΔᐃΔⵠⵠⵠᐃ(new Date().getTime());
    for (var Pk = 0; Pk < ΔⵠⲆⲆⲆⲆⲆ; Pk++) {
        ⲆⲆⵠΔΔⵠᐃ.push(Ok.random());
    }
    const Qk = 5;
    function Rk(b, c, d, e) {
        const f = ~(b & 59259) & b | ~(b & 59259) & 59259;
        const i = ~(c & 56097) & c | ~(c & 56097) & 56097;
        const a = ((43315 + d) * 1664525 + 1013904223) % 4294967296;
        const j = (8 << (e >> 24 & 255)) + (32 << (e >> 32 & 255)) + (24 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
        const k = function (c, e, f, i, j, k) {
            const a = c ^ 10715;
            const m = (24 << (e >> 16 & 255)) + (16 << (e >> 32 & 255)) + (32 << (e >> 8 & 255)) + (8 << (e >> 24 & 255));
            const n = (8 << (f >> 16 & 255)) + (32 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (24 << (f >> 32 & 255));
            const h = i ^ 40782;
            const l = j ^ 41301;
            const g = ~(k & 12091) & (k | 12091);
            const o = gn(a, m, n, h, l, g);
            gn(a, m, n, h, l, g);
            kn(a, m, n, h, l);
            const b = (o | 3006) & ~(o & 3006);
            return ~(b & 24460) & (b | 24460);
        }(f, i, a, j, f, i);
        const h = Qn(a, j, f, i, a);
        gn(j, f, i, a, j, f);
        const l = (1013904223 + (26191 + (k ^ h)) * 1664525) % 4294967296;
        return (l | 38630) & ~(l & 38630);
    }
    const Sk = 3;
    function Tk(c, d, e, f, i) {
        const j = ((c + 14772) * 2147483629 + 2147483587) % 2147483647;
        const a = d ^ 63080;
        const k = ((e + 60304) * 22695477 + 1) % 4294967296;
        const m = ~(f & 5467) & 5467 | ~(f & 5467) & f;
        const h = (i | 40165) & ~(i & 40165);
        const l = function (b, c, d, e) {
            const f = (b | 57611) & ~(b & 57611);
            const i = ((c + 56889) * 1664525 + 1013904223) % 4294967296;
            const a = d ^ 62842;
            const j = ~(e & 1179) & e | ~(e & 1179) & 1179;
            const k = Zk(f, i, a, j);
            const h = Pn(f, i, a, j);
            Rk(f, i, a, j);
            const l = (24 << ((k ^ h) >> 24 & 255)) + (8 << ((k ^ h) >> 16 & 255)) + (16 << ((k ^ h) >> 32 & 255)) + (32 << ((k ^ h) >> 8 & 255));
            return ~(l & 63304) & (l | 63304);
        }(j, a, k, m);
        const g = Qn(h, j, a, k, m);
        const n = Sn(h, j, a, k, m, h);
        return ((28765 + ((16 << ((l ^ g) >> 24 & 255)) + (8 << ((l ^ g) >> 16 & 255)) + (24 << ((l ^ g) >> 32 & 255)) + (32 << ((l ^ g) >> 8 & 255)) ^ n)) * 1664525 + 1013904223) % 4294967296;
    }
    function Uk(c, d, e, f, i) {
        const j = (12345 + (23101 + c) * 1103515245) % 2147483648;
        const a = d ^ 58614;
        const k = ((e + 45267) * 214013 + 2531011) % 4294967296;
        const m = f ^ 40810;
        const h = (24 << (i >> 24 & 255)) + (8 << (i >> 32 & 255)) + (32 << (i >> 8 & 255)) + (16 << (i >> 16 & 255));
        const l = _n(j, a);
        const g = Rk(k, m, h, j);
        (function (b, c, d, e) {
            const f = (b + 34282) % 65336;
            const i = ~(c & 45181) & 45181 | ~(c & 45181) & c;
            const a = (16 << (d >> 8 & 255)) + (32 << (d >> 24 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 16 & 255));
            const j = ~(e & 25475) & 25475 | ~(e & 25475) & e;
            const k = function (b, c) {
                const d = ~(b & 41406) & b | ~(b & 41406) & 41406;
                const e = ((c + 17922) * 1103515245 + 12345) % 2147483648;
                const f = En(d, e, d);
                dn(e, d, e, d);
                const g = eq(e, d, e, d, e);
                return ((42346 + (f ^ 18573 ^ g)) * 2147483629 + 2147483587) % 2147483647;
            }(f, i);
            const h = Mn(a, j, f, i, a);
            _n(j, f);
            const l = (58498 + (k ^ h)) % 65531;
        })(a, k, m, h);
        const n = (24 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 32 & 255)) + (16 << ((l ^ g) >> 8 & 255));
        return ~(n & 13644) & n | ~(n & 13644) & 13644;
    }
    function Vk(c, e, f, i, j, k) {
        const a = ((39488 + c) * 214013 + 2531011) % 4294967296;
        const m = ~(e & 49976) & e | ~(e & 49976) & 49976;
        const n = ~(f & 35856) & f | ~(f & 35856) & 35856;
        const h = i ^ 52219;
        const l = (j + 3575) % 65503;
        const g = ~(k & 6932) & k | ~(k & 6932) & 6932;
        const o = Jn(a, m, n, h, l);
        const b = function (c, d, e, f, i, j) {
            const a = c ^ 30142;
            const k = (d + 63025) % 65493;
            const m = e ^ 30777;
            const h = ((45939 + f) * 22695477 + 1) % 4294967296;
            const l = (8 << (i >> 16 & 255)) + (32 << (i >> 24 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 8 & 255));
            const g = (j | 45652) & ~(j & 45652);
            const n = Jn(a, k, m, h, l);
            Tk(g, a, k, m, h);
            Cn(l, g, a, k, m, h);
            return n ^ 60048;
        }(g, a, m, n, h, l);
        bn(g, a, m, n, h, l);
        const d = (1013904223 + (60709 + (o ^ b)) * 1664525) % 4294967296;
        return ~(d & 42138) & d | ~(d & 42138) & 42138;
    }
    const Wk = 20;
    const Xk = hj;
    const Yk = 15;
    function Zk(b, c, d, e) {
        const f = b ^ 11762;
        const g = ~(c & 19425) & 19425 | ~(c & 19425) & c;
        return ((55182 + (((17757 + ((32 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 8 & 255)) + (24 << ((f ^ g) >> 24 & 255)) + (16 << ((f ^ g) >> 16 & 255)) ^ (32 << (d >> 16 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 24 & 255)) + (16 << (d >> 8 & 255)))) * 1664525 + 1013904223) % 4294967296 ^ (~(e & 259) & 259 | ~(e & 259) & e))) * 1664525 + 1013904223) % 4294967296;
    }
    const $k = 9;
    const _k = 18;
    const aq = 12;
    const bq = 13;
    const cq = 14;
    const dq = zk;
    function eq(b, c, d, e, f) {
        const i = (32 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (24 << (b >> 16 & 255)) + (8 << (b >> 32 & 255));
        const a = (c + 39144) % 65406;
        const j = d ^ 34575;
        const k = ~(e & 37841) & e | ~(e & 37841) & 37841;
        const h = (f | 25975) & ~(f & 25975);
        const l = Zk(i, a, j, k);
        Mn(h, i, a, j, k);
        bn(h, i, a, j, k, h);
        return (l | 19326) & ~(l & 19326) ^ 36297;
    }
    const fq = 10;
    const en = 8;
    function tn(c, d, e, f, i) {
        const j = (24 << (c >> 24 & 255)) + (32 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 32 & 255));
        const a = (12345 + (d + 3024) * 1103515245) % 2147483648;
        const k = (8 << (e >> 8 & 255)) + (32 << (e >> 32 & 255)) + (24 << (e >> 16 & 255)) + (16 << (e >> 24 & 255));
        const m = (1 + (f + 41324) * 22695477) % 4294967296;
        const h = (i | 19607) & ~(i & 19607);
        const l = Bn(j, a);
        Mn(k, m, h, j, a);
        Cn(k, m, h, j, a, k);
        const g = ~(l & 49323) & 49323 | ~(l & 49323) & l;
        return ~(g & 46567) & (g | 46567);
    }
    const nn = 6;
    const on = 19;
    const an = 100;
    function rn(c, e, f, i, j, k) {
        const a = (1013904223 + (c + 28824) * 1664525) % 4294967296;
        const m = (1013904223 + (13210 + e) * 1664525) % 4294967296;
        const n = ~(f & 32165) & 32165 | ~(f & 32165) & f;
        const h = (24 << (i >> 24 & 255)) + (16 << (i >> 8 & 255)) + (8 << (i >> 16 & 255)) + (32 << (i >> 32 & 255));
        const l = (1 + (39199 + j) * 22695477) % 4294967296;
        const g = k ^ 33037;
        const b = function (b, c, d) {
            const e = (12345 + (39051 + b) * 1103515245) % 2147483648;
            const f = (c | 44117) & ~(c & 44117);
            const g = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & 255));
            const a = mn(e, f, g, e, f);
            const i = Sn(g, e, f, g, e, f);
            const j = function (a, b) {
                const c = (16 << (a >> 8 & 255)) + (32 << (a >> 16 & 255)) + (8 << (a >> 32 & 255)) + (24 << (a >> 24 & 255));
                const d = (32 << (b >> 32 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 16 & 255));
                const e = Cn(c, d, c, d, c, d);
                (function (b, c, d, e, f) {
                    const i = b ^ 64570;
                    const a = (2531011 + (c + 41768) * 214013) % 4294967296;
                    const j = (1013904223 + (d + 43923) * 1664525) % 4294967296;
                    const k = (16 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (32 << (e >> 16 & 255)) + (24 << (e >> 8 & 255));
                    const h = (f | 21896) & ~(f & 21896);
                    const l = function (a, b) {
                        const c = ((a + 49468) * 1103515245 + 12345) % 2147483648;
                        const d = ((b + 30513) * 214013 + 2531011) % 4294967296;
                        const e = function (b, c, d) {
                            const e = ((5294 + b) * 1664525 + 1013904223) % 4294967296;
                            const f = (c | 55665) & ~(c & 55665);
                            const g = (d + 54633) % 65404;
                            const a = Tk(e, f, g, e, f);
                            (function (c, e, f, i, j, k) {
                                const a = (2531011 + (c + 16955) * 214013) % 4294967296;
                                const m = ((9436 + e) * 1103515245 + 12345) % 2147483648;
                                const n = (f | 14774) & ~(f & 14774);
                                const h = (i | 48802) & ~(i & 48802);
                                const l = ~(j & 24998) & (j | 24998);
                                const g = (8 << (k >> 8 & 255)) + (16 << (k >> 16 & 255)) + (32 << (k >> 32 & 255)) + (24 << (k >> 24 & 255));
                                const o = hn(a, m, n, h);
                                const b = Mn(l, g, a, m, n);
                                const d = hn(h, l, g, a);
                            })(g, e, f, g, e, f);
                            Pn(g, e, f, g);
                            return ~(a & 43875) & (a | 43875) ^ 15116;
                        }(c, d, c);
                        kn(d, c, d, c, d);
                        Zk(c, d, c, d);
                        return (e | 17943) & ~(e & 17943) ^ 21791;
                    }(i, a);
                    dn(j, k, h, i);
                    const g = tn(a, j, k, h, i);
                })(c, d, c, d, c);
                Bn(d, c);
                return (e | 58283) & ~(e & 58283) ^ 8337;
            }(g, e);
            const h = (16 << ((a ^ i) >> 32 & 255)) + (24 << ((a ^ i) >> 24 & 255)) + (32 << ((a ^ i) >> 8 & 255)) + (8 << ((a ^ i) >> 16 & 255));
            return (8 << ((h ^ j) >> 32 & 255)) + (16 << ((h ^ j) >> 8 & 255)) + (32 << ((h ^ j) >> 16 & 255)) + (24 << ((h ^ j) >> 24 & 255));
        }(a, m, n);
        Pn(h, l, g, a);
        return ((34159 + (b ^ 2959 ^ hn(m, n, h, l))) * 1103515245 + 12345) % 2147483648;
    }
    const sn = kk;
    function hn(b, c, d, e) {
        const f = ~(b & 33107) & (b | 33107);
        const g = (24 << (c >> 32 & 255)) + (32 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & 255));
        const a = ~(d & 32053) & (d | 32053);
        const i = e ^ 12240;
        const j = function (b, c, d, e) {
            const f = (32 << (b >> 32 & 255)) + (16 << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255));
            const i = (1 + (50595 + c) * 22695477) % 4294967296;
            const a = ~(d & 40066) & d | ~(d & 40066) & 40066;
            const j = e ^ 18768;
            const k = Jn(f, i, a, j, f);
            const h = Uk(i, a, j, f, i);
            const l = Tn(a, j);
            return ((16767 + ((2531011 + (35287 + (k ^ h)) * 214013) % 4294967296 ^ l)) * 1664525 + 1013904223) % 4294967296;
        }(f, g, a, i);
        Pn(f, g, a, i);
        return (2531011 + (44352 + ((~(j & 64131) & 64131 | ~(j & 64131) & j) ^ Jn(f, g, a, i, f))) * 214013) % 4294967296;
    }
    const ln = 5;
    function gn(b, c, d, e, f, i) {
        const a = ~(b & 36133) & (b | 36133);
        const j = (c | 13670) & ~(c & 13670);
        const k = (d | 31390) & ~(d & 31390);
        const h = e ^ 64081;
        const l = f ^ 7550;
        const g = (2147483587 + (i + 63950) * 2147483629) % 2147483647;
        return (12345 + (36760 + (((62552 + (In(a, j, k, h, l) ^ Pn(g, a, j, k))) * 2147483629 + 2147483587) % 2147483647 ^ kn(h, l, g, a, j))) * 1103515245) % 2147483648;
    }
    const un = 7;
    function bn(b, c, d, e, f, g) {
        const a = b ^ 23409;
        const i = c ^ 26380;
        const j = ((f + 33017) * 1103515245 + 12345) % 2147483648;
        const h = g ^ 42490;
        return ((19056 + (Zk(a, i, d ^ 53590, e ^ 36633) ^ Zk(j, h, a, i))) * 22695477 + 1) % 4294967296;
    }
    function dn(b, c, d, e) {
        const f = (b | 15432) & ~(b & 15432);
        const g = c ^ 12315;
        const a = d ^ 38714;
        const i = e ^ 58084;
        const j = Vk(f, g, a, i, f, g);
        Pn(a, i, f, g);
        return ((34681 + ((~(j & 41134) & j | ~(j & 41134) & 41134) ^ bn(a, i, f, g, a, i))) * 214013 + 2531011) % 4294967296;
    }
    const vn = 100;
    function mn(b, c, d, e, f) {
        const i = ((9716 + b) * 1664525 + 1013904223) % 4294967296;
        const a = ~(c & 7703) & c | ~(c & 7703) & 7703;
        const j = (d | 31275) & ~(d & 31275);
        const k = ~(e & 25693) & 25693 | ~(e & 25693) & e;
        const h = (8 << (f >> 8 & 255)) + (32 << (f >> 24 & 255)) + (24 << (f >> 16 & 255)) + (16 << (f >> 32 & 255));
        const l = bn(i, a, j, k, h, i);
        const g = Zk(a, j, k, h);
        En(i, a, j);
        return (24 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 32 & 255)) ^ 31710;
    }
    const cn = 15;
    const pn = 6;
    function Cn(c, e, f, i, j, k) {
        const a = (24 << (c >> 24 & 255)) + (32 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 32 & 255));
        const m = (e | 41551) & ~(e & 41551);
        const n = (24 << (f >> 24 & 255)) + (16 << (f >> 32 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 8 & 255));
        const h = ~(i & 32641) & (i | 32641);
        const l = ((j + 35582) * 214013 + 2531011) % 4294967296;
        const g = ~(k & 1090) & (k | 1090);
        const o = Sn(a, m, n, h, l, g);
        eq(a, m, n, h, l);
        Zk(g, a, m, n);
        const b = ~(o & 8077) & 8077 | ~(o & 8077) & o;
        return ~(b & 3708) & (b | 3708);
    }
    function Tn(b, c) {
        const d = (2531011 + (b + 62874) * 214013) % 4294967296;
        const e = (24 << (c >> 24 & 255)) + (16 << (c >> 32 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
        const f = bn(d, e, d, e, d, e);
        const g = bn(d, e, d, e, d, e);
        Zk(d, e, d, e);
        const a = (16 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) >> 16 & 255)) + (32 << ((f ^ g) >> 8 & 255));
        return ~(a & 55949) & 55949 | ~(a & 55949) & a;
    }
    const fn = 12;
    const zn = 16;
    const yn = 17;
    const wn = 13;
    function Pn(b, c, d, e) {
        const f = (2147483587 + (37418 + b) * 2147483629) % 2147483647;
        const g = c ^ 57623;
        const a = ~(d & 40280) & d | ~(d & 40280) & 40280;
        const i = ~(e & 24601) & e | ~(e & 24601) & 24601;
        const j = Bn(f, g);
        Bn(a, i);
        Qn(f, g, a, i, f);
        const h = ~(j & 43902) & 43902 | ~(j & 43902) & j;
        return (h | 8862) & ~(h & 8862);
    }
    function kn(b, c, d, e, f) {
        const i = (2147483587 + (b + 64762) * 2147483629) % 2147483647;
        const a = ((18197 + c) * 214013 + 2531011) % 4294967296;
        const j = (2531011 + (22845 + d) * 214013) % 4294967296;
        const k = (32 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 32 & 255)) + (24 << (e >> 24 & 255));
        const h = ~(f & 11999) & f | ~(f & 11999) & 11999;
        const l = bn(i, a, j, k, h, i);
        const g = Cn(a, j, k, h, i, a);
        Zk(j, k, h, i);
        return (8 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 16 & 255)) + (24 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 32 & 255)) ^ 35444;
    }
    const An = 4;
    const xn = 19;
    function Jn(b, c, d, e, f) {
        const i = b ^ 62008;
        const a = (24 << (c >> 32 & 255)) + (8 << (c >> 16 & 255)) + (32 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
        const j = ((d + 46531) * 22695477 + 1) % 4294967296;
        const k = ~(e & 1884) & 1884 | ~(e & 1884) & e;
        const h = ~(f & 55588) & 55588 | ~(f & 55588) & f;
        const l = Tk(i, a, j, k, h);
        Sn(i, a, j, k, h, i);
        return ((3037 + (l ^ 57467 ^ Qn(a, j, k, h, i))) * 1664525 + 1013904223) % 4294967296;
    }
    function Mn(b, c, d, e, f) {
        const i = ~(b & 42203) & b | ~(b & 42203) & 42203;
        const a = c ^ 50118;
        const j = d ^ 41620;
        const k = ((e + 34240) * 2147483629 + 2147483587) % 2147483647;
        const h = (32 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 24 & 255));
        const l = Sn(i, a, j, k, h, i);
        Sn(a, j, k, h, i, a);
        return (2531011 + (53616 + ((l | 43477) & ~(l & 43477) ^ Zk(j, k, h, i))) * 214013) % 4294967296;
    }
    function Bn(a, b) {
        const c = ((a + 44664) * 1664525 + 1013904223) % 4294967296;
        const d = b ^ 53080;
        return (1 + (57525 + ((17769 + (In(c, d, c, d, c) ^ Mn(d, c, d, c, d))) % 65357 ^ Zk(c, d, c, d))) * 22695477) % 4294967296;
    }
    const Dn = 1;
    function In(c, d, e, f, i) {
        const j = (16 << (c >> 32 & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
        const a = d ^ 55978;
        const k = ((e + 2934) * 1664525 + 1013904223) % 4294967296;
        const m = ~(f & 30642) & (f | 30642);
        const h = (8 << (i >> 8 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 24 & 255)) + (32 << (i >> 16 & 255));
        const l = Mn(j, a, k, m, h);
        const g = kn(j, a, k, m, h);
        Zk(j, a, k, m);
        const n = (16 << ((l ^ g) >> 32 & 255)) + (24 << ((l ^ g) >> 8 & 255)) + (8 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & 255));
        return ~(n & 23686) & (n | 23686);
    }
    function En(b, c, d) {
        const e = b ^ 23323;
        const f = (2531011 + (61713 + c) * 214013) % 4294967296;
        const g = (d | 24198) & ~(d & 24198);
        const a = tn(e, f, g, e, f);
        const h = tn(g, e, f, g, e);
        tn(f, g, e, f, g);
        return (16 << ((a ^ h) >> 32 & 255)) + (8 << ((a ^ h) >> 8 & 255)) + (24 << ((a ^ h) >> 24 & 255)) + (32 << ((a ^ h) >> 16 & 255)) ^ 31181;
    }
    function Sn(b, c, d, e, f, i) {
        const a = d ^ 8102;
        const j = (24 << (e >> 16 & 255)) + (32 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (16 << (e >> 8 & 255));
        const k = ~(f & 29687) & 29687 | ~(f & 29687) & f;
        const h = (1 + (62237 + i) * 22695477) % 4294967296;
        const l = Tn((b + 52483) % 65496, (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 24 & 255)) + (8 << (c >> 32 & 255)));
        const g = Tn(a, j);
        Tn(k, h);
        return (45290 + (l ^ g)) % 65334 ^ 55575;
    }
    function Qn(c, d, e, f, i) {
        const j = ((c + 49173) * 1103515245 + 12345) % 2147483648;
        const a = (d + 52922) % 65337;
        const k = e ^ 25250;
        const m = ~(f & 10903) & 10903 | ~(f & 10903) & f;
        const h = ~(i & 33814) & 33814 | ~(i & 33814) & i;
        const l = eq(j, a, k, m, h);
        const g = _n(j, a);
        eq(k, m, h, j, a);
        const n = (1 + (19675 + (l ^ g)) * 22695477) % 4294967296;
        return ~(n & 7922) & n | ~(n & 7922) & 7922;
    }
    function _n(b, c) {
        const d = b ^ 24508;
        const e = (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 32 & 255)) + (8 << (c >> 24 & 255));
        const f = tn(d, e, d, e, d);
        const g = In(e, d, e, d, e);
        mn(d, e, d, e, d);
        const a = ((11269 + (f ^ g)) * 2147483629 + 2147483587) % 2147483647;
        return ~(a & 40927) & 40927 | ~(a & 40927) & a;
    }
    const Fn = 2;
    ⲆⵠΔᐃ = {
        ᐃΔΔⵠⲆⵠΔ: () => new Promise((a, b) => {
            aj.grecaptcha.ready(function () {
                aj.grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
                    action: "validate_recaptcha"
                }).then(function (b) {
                    a(b);
                }).catch(c => {
                    if (cw) {
                        a(0);
                    } else {
                        console.log(undefined);
                        b(c);
                    }
                });
            });
        }),
        ⵠⵠⵠⲆⲆΔⵠᐃΔ: function (a) {
            aj.open(a, "_blank").focus();
        },
        ΔΔᐃⲆⲆⲆΔ: function (a) {
            aj.open(a, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
        },
        ⲆᐃΔΔΔΔΔ: function (a, b) {
            for (var c in a) {
                if (a[c] != b[c]) {
                    return false;
                }
            }
            return Bj;
        },
        ΔⲆᐃΔΔΔⵠⵠⵠ: function (a, b) {
            if (a.length != b.length) {
                return zk;
            }
            for (var c = 0; c < a.length; c++) {
                if (typeof a == "object") {
                    if (!this.ⲆᐃΔΔΔΔΔ(a[c], b[c])) {
                        return false;
                    }
                } else if (a[c] != b[c]) {
                    return Ij;
                }
            }
            return true;
        },
        ΔᐃⲆᐃΔⲆΔ: function (a, b) {
            b.x = a.x;
            b.y = a.y;
        },
        ⲆΔⲆΔΔΔⵠ: function (a, b) {
            return {
                x: a.x - b.x,
                y: a.y - b.y
            };
        },
        ⵠⲆⲆΔΔΔΔᐃⵠ: function (a, b) {
            a.x *= b;
            a.y *= b;
        },
        ⲆᐃⲆⲆᐃΔⵠ: function (a, b) {
            return a.x * b.x + a.y * b.y;
        },
        ⵠⵠᐃΔᐃᐃΔ: function (a) {
            return Math.sqrt(a.x * a.x + a.y * a.y);
        },
        sign: function (a) {
            if (a < 0) {
                return -1;
            } else {
                return 1;
            }
        },
        ⵠⲆⲆΔΔᐃᐃ: function (a, b) {
            return a.x * b.y - a.y * b.x;
        },
        ᐃΔΔᐃᐃⲆΔ: function (b, c, d, e) {
            var f = e - c;
            var g = d - b;
            return Math.atan2(f, g);
        },
        ᐃⲆⵠⲆᐃΔᐃ: function (a, b) {
            return Math.asin(this.ⲆᐃⲆⲆᐃΔⵠ(a, b) / (this.ⵠⵠᐃΔᐃᐃΔ(a) * this.ⵠⵠᐃΔᐃᐃΔ(b))) * this.sign(this.ⵠⲆⲆΔΔᐃᐃ(a, b));
        },
        ⵠⵠᐃᐃΔⵠΔ: function (a) {
            ⲆΔᐃΔⵠⵠⵠ = location.href;
            a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var b = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(ⲆΔᐃΔⵠⵠⵠ);
            if (b === null) {
                return null;
            } else {
                return b[1];
            }
        },
        ⵠⵠᐃⲆΔⵠⵠ: function (a, b) {
            var c = Math.PI * 2;
            b = (b % c + c) % c;
            if (Math.abs(a - b) > Math.PI) {
                if (a > b) {
                    return b + c;
                } else {
                    return b - c;
                }
            } else {
                return b;
            }
        },
        ᐃⵠⵠⵠΔᐃΔ: function (a, b) {
            return this.ᐃⲆⵠⲆᐃΔᐃ({
                x: 1,
                y: 0
            }, this.ⲆΔⲆΔΔΔⵠ(a, b));
        },
        ⲆᐃⲆΔ: function (a, b) {
            return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
        },
        ⵠⲆⲆᐃΔᐃⵠ: function (a, b) {
            return {
                x: Math.sin(b) * a,
                y: Math.cos(b) * a
            };
        },
        ⵠⲆΔᐃⵠⲆⲆ: function (a, b) {
            a.x += b.x;
            a.y += b.y;
        },
        ⵠΔᐃᐃⵠΔΔ: function (a, b) {
            a.x -= b.x;
            a.y -= b.y;
        },
        ⲆΔΔⵠΔᐃΔΔᐃ: function (a, b, c) {
            a.x += b;
            a.y += c;
        },
        ᐃΔⵠⵠᐃⲆⵠΔⲆ: function (a, b, c) {
            return {
                x: a.x + b,
                y: a.y + c
            };
        },
        ΔΔᐃⵠⵠ: function (a, b, c) {
            a.x += Math.sin(c) * b;
            a.y += Math.cos(c) * b;
        },
        ᐃΔⵠⵠᐃⵠᐃ: function (a, b) {
            return Math.floor((a - b) / 2);
        },
        ⲆⵠⲆΔⵠΔⵠ: function (a, b) {
            return {
                x: (a.x + b.x) / 2,
                y: (a.y + b.y) / 2
            };
        },
        ⲆᐃΔᐃᐃⵠⲆ: function () {
            if (Math.random() > 0.5) {
                return 1;
            } else {
                return -1;
            }
        },
        ΔᐃⵠⲆΔⵠᐃΔⲆ: function (b, c, d) {
            var e = this.ⲆᐃΔᐃᐃⵠⲆ();
            var f = this.ⲆᐃΔᐃᐃⵠⲆ();
            var g = Math.random() * Math.PI / 2;
            return {
                x: Math.floor(b + Math.sin(g) * e * d),
                y: Math.floor(c + Math.cos(g) * f * d)
            };
        },
        ΔΔΔᐃΔΔΔΔΔ: function (a, b, c, d) {
            this.x = a;
            this.y = b;
            this.w = c;
            this.ⵠⲆᐃ = d;
        },
        ⵠΔⲆΔⵠᐃⲆⲆᐃ: function (a) {
            ⲆᐃⲆ = [];
            ⲆᐃⲆ.push.apply(ⲆᐃⲆ, a);
            var b = [];
            while (ⲆᐃⲆ.length > 0) {
                var c = Math.floor(Math.random() * ⲆᐃⲆ.length);
                b.push(ⲆᐃⲆ[c]);
                ⲆᐃⲆ.splice(c, 1);
            }
            return b;
        },
        ⵠᐃⵠⲆᐃΔᐃ: function (a) {
            if (a >= 20000) {
                a = (a - 20000) * 1000;
            } else if (a >= 10000) {
                a = (a - 10000) * 100;
            }
            return a;
        },
        ᐃⲆΔⲆΔᐃⵠ: function (b) {
            if (typeof b !== "number") {
                return "0";
            }
            if (b >= 10000) {
                var c = Math.floor(Math.log10(b)) - 2;
                var d = Math.max(0, 3 - c);
                var e = Math.floor(b / 1000).toString();
                if (d) {
                    for (var f = (e += "." + (b % 1000 / 1000).toString().substring(2).substring(0, d)).length - 1, g = 0; f > 0 && e[f] == "0"; f--) {
                        g++;
                    }
                    if ((e = e.substring(0, e.length - g))[e.length - 1] == ".") {
                        e = e.substring(0, e.length - 1);
                    }
                }
                return e += "k";
            }
            return b.toString();
        },
        ⵠᐃⲆᐃΔⵠΔ: function (a) {
            return a * (2 - a);
        },
        ᐃΔΔⵠᐃᐃⵠ: function (a) {
            return --a * a * a + 1;
        },
        ⲆᐃⵠᐃΔ: function (a) {
            if (a < 0.5) {
                return a * 2 * a;
            } else {
                return (4 - a * 2) * a - 1;
            }
        },
        ⲆΔⵠⲆᐃⵠΔ: function (a) {
            if (a < 0.5) {
                return a * 4 * a * a;
            } else {
                return (a - 1) * (a * 2 - 2) * (a * 2 - 2) + 1;
            }
        },
        ᐃᐃᐃᐃΔⲆⵠΔⲆ: function (a) {
            if (a < 0.5) {
                return a * 8 * a * a * a;
            } else {
                return 1 - --a * 8 * a * a * a;
            }
        },
        ⵠΔⲆⵠΔⵠⲆ: function (a) {
            return 1 - --a * a * a * a;
        },
        ᐃᐃⵠⲆᐃⲆⵠ: function (a) {
            return 1 + --a * a * a * a * a;
        },
        ΔⲆᐃᐃ: function (b, c, d, e, f, g) {
            this.ⲆⲆⲆ = b;
            this.Δᐃᐃ = c;
            this.max = d;
            this.min = e;
            this.ᐃⲆⲆΔⲆΔΔ = f;
            this.ⲆᐃᐃᐃᐃΔⵠ = g;
            this.ΔⲆᐃᐃᐃⵠⵠ = 0;
            this.ΔΔΔ = function () {
                if (this.ⲆⲆⲆ) {
                    if ((a = this.Δᐃᐃ + $w * this.ᐃⲆⲆΔⲆΔΔ) > this.max) {
                        this.Δᐃᐃ = this.max;
                        this.ⲆⲆⲆ = false;
                        return true;
                    }
                    this.Δᐃᐃ = a;
                } else {
                    var a;
                    if ((a = this.Δᐃᐃ - $w * this.ⲆᐃᐃᐃᐃΔⵠ) < this.min) {
                        this.Δᐃᐃ = this.min;
                        this.ⲆⲆⲆ = kk;
                    } else {
                        this.Δᐃᐃ = a;
                    }
                }
            };
            return zk;
        },
        ⵠⲆΔΔⵠ: function (b, c, d, e, f, g) {
            this.ⵠΔⵠᐃᐃ = b;
            this.ⵠΔΔᐃⲆ = c;
            this.ⵠⲆⲆᐃΔ = d;
            this.ΔⵠⲆΔⲆ = e;
            this.x = f;
            this.ⵠᐃᐃΔⲆ = g;
            this.ΔᐃⲆᐃⵠΔΔ = function () {
                this.x = this.ΔᐃΔΔⵠΔᐃΔⵠ;
                this.ⵠΔΔᐃⲆ = 0;
            };
            this.ΔⵠΔⲆⵠⲆΔ = function (a) {
                if (a !== this.ⵠᐃᐃΔⲆ) {
                    this.ⵠᐃᐃΔⲆ = a;
                    this.ΔⵠⲆΔⲆ = this.x;
                    this.ⵠΔΔᐃⲆ = 0;
                }
                if (this.ⵠᐃᐃΔⲆ !== this.x) {
                    this.ⵠΔΔᐃⲆ += $w;
                    if (this.ⵠΔΔᐃⲆ > this.ⵠⲆⲆᐃΔ) {
                        this.x = this.ⵠᐃᐃΔⲆ;
                    } else {
                        var b = this.ⵠΔⵠᐃᐃ(this.ⵠΔΔᐃⲆ / this.ⵠⲆⲆᐃΔ);
                        this.x = this.ΔⵠⲆΔⲆ + (this.ⵠᐃᐃΔⲆ - this.ΔⵠⲆΔⲆ) * b;
                    }
                }
            };
        },
        ⵠᐃᐃᐃⲆⵠⲆ: function (b, c, d, e, f, g, a, i, j) {
            this.ⵠΔⵠᐃᐃ = b;
            this.ⵠΔΔᐃⲆ = c;
            this.ⵠⲆⲆᐃΔ = d;
            this.ΔⵠⲆΔⲆ = e;
            this.ⵠᐃⵠΔᐃ = f;
            this.x = g;
            this.y = a;
            this.ⵠᐃᐃΔⲆ = i;
            this.ⵠᐃⲆⲆΔⵠᐃ = j;
            this.ΔⵠΔⲆⵠⲆΔ = function (a) {
                if (a.x != this.ⵠᐃᐃΔⲆ || a.y != this.ⵠᐃⲆⲆΔⵠᐃ) {
                    this.ⵠᐃᐃΔⲆ = a.x;
                    this.ⵠᐃⲆⲆΔⵠᐃ = a.y;
                    this.ΔⵠⲆΔⲆ = this.x;
                    this.ⵠᐃⵠΔᐃ = this.y;
                    this.ⵠΔΔᐃⲆ = 0;
                }
                if (this.ⵠᐃᐃΔⲆ != this.x || this.ⵠᐃⲆⲆΔⵠᐃ != this.y) {
                    this.ⵠΔΔᐃⲆ += $w;
                    if (this.ⵠΔΔᐃⲆ > this.ⵠⲆⲆᐃΔ) {
                        this.x = this.ⵠᐃᐃΔⲆ;
                        this.y = this.ⵠᐃⲆⲆΔⵠᐃ;
                    } else {
                        var b = this.ⵠΔⵠᐃᐃ(this.ⵠΔΔᐃⲆ / this.ⵠⲆⲆᐃΔ);
                        this.x = this.ΔⵠⲆΔⲆ + (this.ⵠᐃᐃΔⲆ - this.ΔⵠⲆΔⲆ) * b;
                        this.y = this.ⵠᐃⵠΔᐃ + (this.ⵠᐃⲆⲆΔⵠᐃ - this.ⵠᐃⵠΔᐃ) * b;
                    }
                }
            };
        },
        ⲆⲆⲆΔⲆⵠᐃ: function (a) {
            var b = "";
            for (var c = 0; c < a; c++) {
                b += String.fromCharCode(48 + Math.floor(Math.random() * 74));
            }
            return b;
        },
        ⵠⲆⵠᐃΔΔⲆ: function (a, b) {
            b ||= location.href;
            a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var c = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(b);
            if (c == null) {
                return null;
            } else {
                return c[1];
            }
        },
        ΔᐃᐃⵠⲆ: function (a) {
            let b = "";
            const c = a.length;
            for (let d = 0; d < c; d++) {
                b += String.fromCharCode(a[d]);
            }
            return b;
        },
        ⵠⲆᐃⲆⵠⵠΔ: function (a, b) {
            if (a.x >= b.x && a.x <= b.x + b.w && a.y >= b.y && a.y <= b.y + b.ⵠⲆᐃ) {
                return sn;
            } else {
                return X;
            }
        },
        ᐃᐃΔᐃᐃᐃⲆ: function (b, c, d, e, f, g, a, h) {
            if (Math.max(b, f) < Math.min(c, g) && Math.max(d, a) < Math.min(e, h)) {
                return 1;
            } else {
                return 0;
            }
        },
        ΔⲆΔⲆᐃΔⲆ: function (a, b, c) {
            return (1 - c) * a + c * b;
        },
        ΔᐃᐃⲆᐃΔⲆ: function (a) {
            return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
        }
    };
    const Rn = 17;
    Math.sign = Math.sign || function (a) {
        if (a === 0) {
            return 0;
        } else if (a > 0) {
            return 1;
        } else {
            return -1;
        }
    };
    const jn = 255;
    Math.log10 = Math.log10 || function (a) {
        return Math.log(a) / Math.ᐃⲆΔⲆⲆᐃⲆᐃΔ;
    };
    const Ln = 5;
    const Gn = 100;
    const Wn = 13;
    function On(b, c, d, e) {
        const f = (8 << (b >> 24 & 255)) + (24 << (b >> 16 & 255)) + (0 << (b & 255)) + (16 << (b >> 8 & 255));
        const g = (8 << (c >> 24 & 255)) + (16 << (c & 255)) + (0 << (c >> 16 & 255)) + (24 << (c >> 8 & 255));
        const a = (d | 51555) & ~(d & 51555);
        const h = (e + 64642) % 65441;
        return ((38960 + (wk(f, g, a, h) ^ io(f, g, a, h, f, g))) * 2147483629 + 2147483587) % 2147483647;
    }
    function Nn(a, b, c) {
        Fj(pr, a, b, c);
        const d = Kg(rr[0], rr[1], rr[2], rr[0]);
        const e = Iw(rr[1], rr[2], rr[0], rr[1]);
        return (0 << ((d ^ e) >> 24 & 255)) + (24 << ((d ^ e) >> 16 & 255)) + (16 << ((d ^ e) & 255)) + (8 << ((d ^ e) >> 8 & 255));
    }
    const Hn = 6;
    const qn = 3;
    function Un(a, b, c) {
        yi(pr, a, b, c);
        const d = function (a, b, c) {
            We(pr, a, b, c);
            const d = function (a, b, c) {
                ji(pr, a, b, c);
                const d = function (b, c, d, e, f, g) {
                    ti(pr, b, c, d, e, f, g);
                    const a = function (b, c, d, e) {
                        Di(pr, b, c, d, e);
                        const f = or(rr[0], rr[1], rr[2], rr[3], rr[0]);
                        const g = Kg(rr[1], rr[2], rr[3], rr[0]);
                        return ((129 + (f ^ g)) * 75 + 74) % 65537;
                    }(rr[0], rr[1], rr[2], rr[3]);
                    const h = Sw(rr[4], rr[5], rr[0], rr[1], rr[2]);
                    return (24 << ((a ^ h) & 255)) + (8 << ((a ^ h) >> 16 & 255)) + (16 << ((a ^ h) >> 24 & 255)) + (0 << ((a ^ h) >> 8 & 255));
                }(rr[0], rr[1], rr[2], rr[0], rr[1], rr[2]);
                or(rr[0], rr[1], rr[2], rr[0], rr[1]);
                return ~(d & 24003) & (d | 24003);
            }(rr[0], rr[1], rr[2]);
            Qs(rr[0], rr[1]);
            return ~(d & 53610) & (d | 53610);
        }(rr[0], rr[1], rr[2]);
        const e = Nn(rr[0], rr[1], rr[2]);
        return (24 << ((d ^ e) & 255)) + (16 << ((d ^ e) >> 8 & 255)) + (0 << ((d ^ e) >> 24 & 255)) + (8 << ((d ^ e) >> 16 & 255));
    }
    function Yn(b, c, d, e, f) {
        const g = ~(b & 37422) & 37422 | ~(b & 37422) & b;
        const a = ((c + 57377) * 1103515245 + 12345) % 2147483648;
        const i = d ^ 41427;
        const j = ~(e & 9607) & e | ~(e & 9607) & 9607;
        const h = (0 << (f >> 24 & 255)) + (16 << (f & 255)) + (24 << (f >> 8 & 255)) + (8 << (f >> 16 & 255));
        return (50500 + (kt(g, a, i, j, h, g) ^ Tw(a, i, j, h, g))) % 65340;
    }
    const Kn = X;
    (function (a) {
        var b = Dk;
        if (typeof ᐃΔⵠᐃᐃΔⲆ === "function" && ᐃΔⵠᐃᐃΔⲆ.ⵠⵠΔⲆᐃⲆⲆ) {
            ᐃΔⵠᐃᐃΔⲆ(a);
            b = ii;
        }
        if (typeof ΔᐃⲆⵠⵠⲆΔ === "object") {
            ⵠΔⵠᐃⵠⲆⲆⵠΔ.exports = a();
            b = sn;
        }
        if (!b) {
            var c = aj.ᐃᐃΔⵠ;
            var d = aj.ᐃᐃΔⵠ = a();
            d.ᐃⲆΔⲆⲆⵠⵠᐃⵠ = function () {
                aj.ᐃᐃΔⵠ = c;
                return d;
            };
        }
    })(function () {
        function b() {
            for (var a = 0, b = {}; arguments.length > a; a++) {
                var c = arguments[a];
                for (var d in c) {
                    b[d] = c[d];
                }
            }
            return b;
        }
        return function a(c) {
            function d(e, f, j) {
                var k;
                if (typeof document !== "undefined") {
                    if (arguments.length > 1) {
                        j = b({
                            path: "/"
                        }, d.ⲆⲆⲆᐃⵠⵠⲆ, j);
                        if (typeof j.expires === "number") {
                            var m = new Date();
                            m.setMilliseconds(m.getMilliseconds() + j.expires * 86400000);
                            j.expires = m;
                        }
                        try {
                            k = JSON.stringify(f);
                            if (/^[\{\[]/.test(k)) {
                                f = k;
                            }
                        } catch (a) { }
                        f = c.write ? c.write(f, e) : encodeURIComponent(String(f)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
                        e = (e = (e = encodeURIComponent(String(e))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
                        return document.cookie = [e, "=", f, j.expires ? "; expires=" + j.expires.toUTCString() : "", j.path ? "; path=" + j.path : "", j.domain ? "; domain=" + j.domain : "", j.ᐃⵠΔᐃⵠΔΔⲆᐃ ? "; secure" : ""].join("");
                    }
                    if (!e) {
                        k = {};
                    }
                    for (var n = document.cookie ? document.cookie.split("; ") : [], h = /(%[0-9A-Z]{2})+/g, l = 0; n.length > l; l++) {
                        var p = n[l].split("=");
                        var q = p.slice(1).join("=");
                        if (q.charAt(0) === "\"") {
                            q = q.slice(1, -1);
                        }
                        try {
                            var s = p[0].replace(h, decodeURIComponent);
                            q = c.read ? c.read(q, s) : c(q, s) || q.replace(h, decodeURIComponent);
                            if (this.json) {
                                try {
                                    q = JSON.parse(q);
                                } catch (a) { }
                            }
                            if (e === s) {
                                k = q;
                                break;
                            }
                            if (!e) {
                                k[s] = q;
                            }
                        } catch (a) { }
                    }
                    return k;
                }
            }
            d.set = d;
            d.get = function (a) {
                return d.call(d, a);
            };
            d.ΔⲆⲆⵠⵠⵠᐃᐃΔ = function () {
                return d.apply({
                    json: true
                }, [].slice.call(arguments));
            };
            d.ⲆⲆⲆᐃⵠⵠⲆ = {};
            d.remove = function (a, c) {
                d(a, "", b(c, {
                    expires: -1
                }));
            };
            d.ΔΔⲆᐃΔⲆΔᐃⵠ = a;
            return d;
        }(function () { });
    });
    const Vn = 13;
    const Xn = Xk;
    const Zn = 11;
    const $n = 3;
    const eo = 19;
    function io(c, d, e, f, i, j) {
        const a = ((3602 + c) * 1103515245 + 12345) % 2147483648;
        const k = (d | 8190) & ~(d & 8190);
        const m = ((8004 + e) * 1103515245 + 12345) % 2147483648;
        const h = ((39824 + f) * 1664525 + 1013904223) % 4294967296;
        const l = (8 << (j >> 0 & 255)) + (0 << (j >> 8 & 255)) + (16 << (j >> 16 & 255)) + (24 << (j >> 24 & 255));
        const g = Os(a, k, m, h, (24 << (i & 255)) + (8 << (i >> 8 & 255)) + (0 << (i >> 16 & 255)) + (16 << (i >> 24 & 255)));
        const n = Bf(l, a, k, m, h);
        return (0 << ((g ^ n) >> 8 & 255)) + (16 << ((g ^ n) >> 24 & 255)) + (24 << ((g ^ n) >> 16 & 255)) + (8 << ((g ^ n) >> 0 & 255));
    }
    const to = 13;
    function no(b, c, d, e) {
        const f = ~(b & 53070) & (b | 53070);
        const g = ~(c & 57089) & c | ~(c & 57089) & 57089;
        const a = d ^ 1941;
        const i = ~(e & 26192) & e | ~(e & 26192) & 26192;
        const j = function (a, b) {
            const c = (2531011 + (20927 + a) * 214013) % 4294967296;
            const d = ((b + 27545) * 214013 + 2531011) % 4294967296;
            const e = kt(c, d, c, d, c, d);
            kt(c, d, c, d, c, d);
            return e ^ 25192;
        }(f, g);
        kt(a, i, f, g, a, i);
        return ~(j & 1370) & 1370 | ~(j & 1370) & j;
    }
    const oo = 18;
    var ao = document.getElementById("game_canvas");
    var ro = ao.getContext("2d");
    var so = ao.width;
    var gq = ao.height;
    var hq = ao.width / 2;
    var iq = ao.height / 2;
    const jq = 8;
    const bo = 20;
    const vo = 6;
    var mo = {
        x: hq,
        y: iq
    };
    const kq = 9;
    var po = 1;
    const lq = 13;
    const To = 14;
    const fo = 10;
    const zo = 0;
    var yo = 1;
    const mq = 4;
    const Po = kk;
    var ko = -1;
    var nq = "J" + zq;
    const oq = ii;
    var Jo = "S" + ja;
    var pq = aj;
    const Bo = 6;
    var Do;
    var qq;
    var rq = (Ko = "O") + "N";
    var sq = 0;
    const Qo = 15;
    const _o = 6;
    const Fo = 16;
    const Ro = 7;
    const jo = h;
    const Lo = f;
    const Go = 18;
    const Wo = 16;
    var Oo = pq;
    const No = 5;
    var Ho;
    const tq = 8;
    Jo = "N";
    var Uo = "J";
    const uq = 8;
    var Ko = "O" + zq;
    const vq = 12;
    const Xo = 11;
    var Zo = Oo;
    const $o = 12;
    const ea = 17;
    var ia;
    const wq = 2;
    const na = 256;
    var oa = Zo;
    const aa = 5;
    const ra = 100;
    const sa = 256;
    rq = "N" + undefined;
    var ha = oa;
    const la = Xk;
    const ua = 255;
    const ba = 9;
    var da;
    var xq;
    const yq = 1;
    const ca = 100;
    var pa;
    var zq;
    var Aq = ha;
    var fa = Aq;
    const za = 255;
    var ya;
    const Bq = 14;
    var Pa = fa;
    Uo = "O";
    const Cq = 255;
    const Aa = 19;
    var xa;
    var Dq;
    var Eq = Pa = fa;
    const Ba = 7;
    const Da = 15;
    const Ia = X;
    const Ea = 1;
    const Sa = 20;
    const Qa = 9;
    const _a = 13;
    var Fa = Eq;
    const Ra = 16;
    var ja = "J" + (xa = "S");
    const La = 3;
    function Ga(a) {
        var b = new Image();
        b.src = a.toDataURL("image/png");
        b.width = a.width;
        b.height = a.height;
        b.ⵠⲆᐃᐃᐃᐃⲆ = 1;
        return b;
    }
    ao.oncontextmenu = function () {
        return f;
    };
    nq = "J";
    const Fq = 18;
    const Oa = 10;
    const Na = 12;
    const Ha = 14;
    const qa = 6;
    const Ua = Gj;
    Ko = rq;
    const Ya = Zj;
    const Ka = 17;
    const Va = 0;
    const Xa = 4;
    const Za = 12;
    rq = zq;
    const $a = 13;
    zq = ja;
    Ko = ja;
    const Gq = 19;
    ia = da = ja + (Uo += nq = Jo);
    Jo = Uo + nq;
    xq = Do = qq = ja + Uo;
    const Hq = 15;
    Ko = ja + Uo;
    pa = qq;
    rq = ja + Uo;
    const Iq = 11;
    ya = Ho = Do;
    Uo = zq = ja;
    xa = qq;
    Dq = Do;
    const Jq = 8;
    nq = Ko;
    const Kq = 100;
    const Lq = 255;
    const Mq = Ua;
    const Nq = 2;
    var Oq = aj.devicePixelRatio || 1;
    var Pq = ro.ⲆⵠΔΔⵠⲆⵠⵠΔ || ro.ΔⲆⵠⲆᐃⵠⲆΔΔ || ro.ᐃⵠⵠⲆᐃⵠⵠΔⲆ || ro.ᐃⲆⵠⲆΔΔⵠΔⵠ || ro.ⲆⵠΔⲆᐃᐃΔΔΔ || 1;
    const Qq = 0;
    function Rq() {
        if (ao.width != aj.innerWidth) {
            ao.width = aj.innerWidth;
            so = ao.width;
            hq = ao.width / 2;
        }
        if (aj.innerHeight != ao.height) {
            ao.height = aj.innerHeight;
            gq = ao.height;
            iq = ao.height / 2;
        }
        mo = {
            x: hq,
            y: iq
        };
        var a = ao.width;
        var b = ao.height;
        yo = ko === -1 ? Oq / Pq : ko;
        ao.width = a * yo;
        ao.height = b * yo;
        ao.style.width = a + "px";
        ao.style.height = b + "px";
        ro.scale(yo, yo);
        if (Ww) {
            Ww.ᐃⲆΔ.ᐃΔΔⵠⲆᐃⵠ = a;
            Ww.ᐃⲆΔ.ⵠⲆᐃⵠⵠⵠΔ = b;
        }
        if (_w.ⵠⵠΔᐃᐃ) {
            _w.ΔΔΔ();
        } else if (df.ⵠⵠΔᐃᐃ) {
            df.ΔΔΔ();
        } else if (Yw.ⵠⵠΔᐃᐃ) {
            Yw.ΔΔΔ();
        } else if (Xw.ⵠⵠΔᐃᐃ) {
            Xw.ΔΔΔ();
        }
    }
    var Sq = document.getElementById("game_body");
    const Tq = 0;
    Sq.ondragstart = function () {
        return X;
    };
    Sq.ondrop = function () {
        return f;
    };
    const Uq = Ik;
    const Vq = 11;
    const Wq = 13;
    const Xq = 12;
    const Yq = Zj;
    Sq.onresize = Rq;
    const Zq = hj;
    const $q = 6;
    function _q(b, c, d, e, f) {
        const i = ((b + 10592) * 1664525 + 1013904223) % 4294967296;
        const a = c ^ 6680;
        const j = ~(d & 43173) & 43173 | ~(d & 43173) & d;
        const k = ((20618 + e) * 2147483629 + 2147483587) % 2147483647;
        const h = (12345 + (62839 + f) * 1103515245) % 2147483648;
        const l = Yn(i, a, j, k, h);
        (function (b, c, d, e, f) {
            const g = (16 << (b >> 24 & 255)) + (0 << (b & 255)) + (8 << (b >> 16 & 255)) + (24 << (b >> 8 & 255));
            const a = ~(c & 39473) & (c | 39473);
            const i = (d | 40312) & ~(d & 40312);
            const j = (16 << (f >> 24 & 255)) + (0 << (f >> 8 & 255)) + (8 << (f & 255)) + (24 << (f >> 16 & 255));
            const h = On(g, a, i, ~(e & 61769) & 61769 | ~(e & 61769) & e);
            (function (b, c, d, e) {
                const f = ((b + 22047) * 214013 + 2531011) % 4294967296;
                const g = ~(c & 8462) & 8462 | ~(c & 8462) & c;
                const a = ((15740 + d) * 2147483629 + 2147483587) % 2147483647;
                const h = (1013904223 + (e + 49415) * 1664525) % 4294967296;
                Hk(f, g, a, h);
                kt(f, g, a, h, f, g);
            })(j, g, a, i);
        })(i, a, j, k, h);
        return l ^ 22645;
    }
    (function () {
        var b = 0;
        for (var a = ["ms", "moz", "webkit", "o"], c = 0; c < a.length && !aj.requestAnimationFrame; ++c) {
            aj.requestAnimationFrame = aj[a[c] + "RequestAnimationFrame"];
            aj.cancelAnimationFrame = aj[a[c] + "CancelAnimationFrame"] || aj[a[c] + "CancelRequestAnimationFrame"];
        }
        aj.requestAnimationFrame ||= function (c, d) {
            var e = new Date().getTime();
            var f = Math.max(0, 16 - (e - b));
            var a = aj.setTimeout(function () {
                c(e + f);
            }, f);
            b = e + f;
            return a;
        };
        if (!aj.cancelAnimationFrame) {
            aj.cancelAnimationFrame = function (a) {
                clearTimeout(a);
            };
        }
    })();
    const ar = 1;
    const cr = 5;
    var dr = navigator.language || navigator.userLanguage;
    var er = -new Date().getTimezoneOffset() / 60;
    const fr = Dk;
    const gr = 6;
    var hr = "Europe";
    var ir = "South America";
    var kr = hr;
    if (er >= -2 && er <= 2) {
        kr = hr;
    } else if (er > 2 && er <= 5) {
        kr = "Russia";
    } else if (er > 5 && er <= 9) {
        kr = "Asia";
    } else if (er > 9) {
        kr = "Australia";
    } else if (er >= -5 && er < -2) {
        kr = dr === "pt-BR" || dr === "pt-br" || dr === "pt" || dr === "pt-pt" ? ir : "North America";
    } else if (er < -5) {
        kr = dr === "pt-BR" || dr === "pt-br" || dr === "pt" || dr === "pt-pt" ? ir : "West America";
    }
    var Mk = {
        ⲆⲆᐃΔΔⵠᐃ: function (a) {
            var b = 2147483648;
            var c = a || Math.floor((b - 1) * Math.random());
            this.ⵠΔⲆΔᐃ = function (a) {
                c = a || Math.floor(Math.random() * (b - 1));
            };
            this.get = function () {
                return (c = (c * 1103515245 + 12345) % b) / b;
            };
        }
    };
    var lr = [[0, "DRAGON", 18, 6, 66, 35, 0], [0, "WINTER", 91, 18, 5, 40, 8], [0, "DESERT", 135, 180, 89, 124, 5], [0, "LAVA", 142, 6, 82, 99, 6], [0, "FOREST", 6, 150, 90, 154, 8], [0, "WINTER", 6, 6, 90, 150, 0], [1, "b", 0, 5, 175, 0], [1, "t", 2, 5, 174, 0], [1, "t", 5, 5, 173, 0], [1, "b", 3, 5, 176, 0], [1, "t", 0, 5, 177, 0], [1, "t", 3, 5, 178, 0], [1, "t", 4, 5, 179, 0], [1, "b", 0, 5, 180, 0], [1, "t", 5, 5, 181, 0], [1, "b", 2, 5, 182, 0], [1, "b", 1, 5, 183, 0], [1, "b", 2, 5, 184, 0], [1, "t", 5, 5, 185, 0], [1, "t", 2, 5, 186, 0], [1, "t", 0, 5, 187, 0], [1, "t", 5, 5, 188, 0], [1, "t", 1, 5, 189, 0], [1, "b", 2, 5, 190, 0], [1, "t", 4, 5, 191, 0], [1, "b", 3, 5, 192, 0], [1, "t", 5, 5, 193, 0], [1, "t", 0, 5, 194, 0], [1, "t", 3, 5, 195, 0], [1, "b", 0, 5, 196, 0], [1, "t", 5, 5, 197, 0], [1, "t", 2, 5, 198, 0], [1, "b", 2, 5, 199, 0], [1, "t", 4, 5, 200, 0], [1, "t", 1, 5, 201, 0], [1, "b", 1, 5, 202, 0], [1, "t", 5, 5, 203, 0], [1, "t", 2, 5, 204, 0], [1, "t", 4, 5, 205, 0], [1, "b", 2, 5, 206, 0], [1, "t", 1, 5, 207, 0], [1, "t", 4, 5, 208, 0], [1, "t", 2, 5, 209, 0], [1, "b", 0, 5, 210, 0], [1, "t", 5, 5, 211, 0], [1, "t", 1, 5, 212, 0], [1, "t", 2, 5, 213, 0], [1, "b", 3, 5, 214, 0], [1, "t", 5, 5, 215, 0], [1, "b", 0, 5, 216, 0], [1, "t", 4, 5, 217, 0], [1, "t", 2, 5, 218, 0], [1, "t", 1, 5, 219, 0], [1, "t", 3, 5, 220, 0], [1, "t", 5, 5, 221, 0], [1, "t", 2, 5, 222, 0], [1, "t", 4, 5, 223, 0], [1, "b", 3, 5, 224, 0], [1, "t", 1, 5, 225, 0], [1, "t", 3, 5, 226, 0], [1, "b", 0, 5, 227, 0], [1, "t", 3, 5, 228, 0], [1, "t", 5, 5, 229, 0], [1, "t", 2, 5, 230, 0], [1, "t", 0, 5, 231, 0], [1, "b", 2, 5, 232, 0], [1, "t", 1, 5, 233, 0], [1, "t", 4, 5, 234, 0], [1, "b", 1, 5, 235, 0], [1, "t", 4, 5, 236, 0], [1, "t", 2, 5, 237, 0], [1, "t", 0, 5, 238, 0], [1, "t", 4, 5, 239, 0], [1, "b", 2, 5, 240, 0], [1, "t", 5, 5, 241, 0], [1, "b", 1, 5, 242, 0], [1, "t", 4, 5, 243, 0], [1, "t", 2, 5, 244, 0], [1, "t", 1, 5, 245, 0], [1, "b", 1, 5, 246, 0], [1, "t", 3, 5, 247, 0], [1, "b", 2, 5, 248, 0], [1, "t", 5, 5, 249, 0], [1, "t", 2, 5, 250, 0], [1, "t", 4, 5, 251, 0], [1, "b", 1, 5, 252, 0], [1, "t", 4, 5, 253, 0], [1, "t", 1, 5, 254, 0], [1, "t", 3, 5, 255, 0], [1, "t", 5, 5, 256, 0], [1, "b", 2, 5, 257, 0], [1, "t", 4, 5, 258, 0], [1, "b", 3, 5, 259, 0], [1, "t", 5, 5, 260, 0], [1, "b", 0, 5, 261, 0], [1, "t", 3, 5, 262, 0], [1, "t", 4, 5, 263, 0], [1, "t", 2, 5, 264, 0], [1, "b", 1, 5, 265, 0], [1, "b", 2, 5, 266, 0], [1, "t", 3, 5, 267, 0], [1, "t", 4, 5, 268, 0], [1, "t", 0, 5, 269, 0], [1, "t", 5, 5, 270, 0], [1, "t", 3, 5, 271, 0], [1, "t", 4, 5, 272, 0], [1, "t", 1, 5, 273, 0], [1, "b", 2, 5, 274, 0], [1, "t", 1, 5, 275, 0], [1, "t", 4, 5, 276, 0], [1, "b", 1, 5, 277, 0], [1, "b", 2, 5, 278, 0], [1, "t", 1, 5, 279, 0], [1, "t", 4, 5, 280, 0], [1, "t", 2, 5, 281, 0], [1, "t", 5, 5, 282, 0], [1, "b", 2, 5, 283, 0], [1, "t", 1, 5, 284, 0], [1, "b", 3, 5, 285, 0], [1, "t", 4, 5, 286, 0], [1, "t", 0, 5, 287, 0], [1, "t", 5, 5, 288, 0], [1, "t", 2, 5, 289, 0], [1, "b", 1, 5, 290, 0], [1, "t", 4, 5, 292, 0], [1, "t", 2, 5, 291, 0], [1, "b", 2, 5, 293, 0], [1, "t", 1, 5, 294, 0], [1, "t", 3, 5, 295, 0], [1, "t", 5, 5, 296, 0], [1, "b", 0, 5, 297, 0], [1, "b", 3, 5, 298, 0], [1, "t", 4, 5, 299, 0], [1, "t", 2, 5, 300, 0], [1, "t", 4, 5, 301, 0], [1, "b", 0, 5, 302, 0], [1, "b", 2, 5, 303, 0], [1, "t", 1, 6, 303, 0], [1, "t", 2, 7, 303, 0], [1, "t", 1, 5, 304, 0], [1, "t", 3, 6, 304, 0], [1, "t", 4, 7, 304, 0], [1, "t", 5, 8, 303, 0], [1, "b", 1, 8, 304, 0], [1, "b", 2, 9, 304, 0], [1, "b", 3, 12, 303, 0], [1, "b", 3, 17, 304, 0], [1, "t", 1, 9, 303, 0], [1, "t", 1, 15, 304, 0], [1, "t", 1, 13, 303, 0], [1, "t", 3, 10, 303, 0], [1, "t", 3, 14, 304, 0], [1, "t", 4, 10, 304, 0], [1, "t", 5, 11, 304, 0], [1, "t", 5, 14, 303, 0], [1, "t", 5, 16, 304, 0], [1, "t", 5, 13, 304, 0], [1, "t", 2, 12, 304, 0], [1, "t", 1, 11, 303, 0], [1, "b", 3, 15, 303, 0], [1, "b", 0, 16, 303, 0], [1, "t", 3, 17, 303, 0], [1, "t", 4, 18, 303, 0], [1, "t", 2, 19, 303, 0], [1, "t", 1, 20, 303, 0], [1, "b", 1, 21, 303, 0], [1, "t", 2, 22, 303, 0], [1, "t", 4, 23, 303, 0], [1, "b", 3, 24, 303, 0], [1, "t", 5, 25, 303, 0], [1, "t", 1, 26, 303, 0], [1, "t", 2, 27, 303, 0], [1, "t", 4, 28, 303, 0], [1, "b", 0, 18, 304, 0], [1, "t", 2, 19, 304, 0], [1, "t", 5, 20, 304, 0], [1, "b", 2, 21, 304, 0], [1, "t", 4, 22, 304, 0], [1, "t", 2, 23, 304, 0], [1, "t", 1, 24, 304, 0], [1, "t", 3, 25, 304, 0], [1, "t", 0, 27, 304, 0], [1, "t", 5, 26, 304, 0], [1, "b", 2, 28, 304, 0], [1, "t", 1, 29, 304, 0], [1, "b", 1, 29, 303, 0], [1, "b", 2, 30, 303, 0], [1, "t", 4, 31, 303, 0], [1, "t", 0, 32, 303, 0], [1, "t", 5, 33, 303, 0], [1, "t", 2, 34, 303, 0], [1, "t", 4, 35, 303, 0], [1, "t", 1, 36, 303, 0], [1, "b", 3, 37, 303, 0], [1, "t", 2, 32, 304, 0], [1, "t", 4, 30, 304, 0], [1, "t", 1, 31, 304, 0], [1, "b", 1, 33, 304, 0], [1, "t", 2, 35, 304, 0], [1, "t", 5, 34, 304, 0], [1, "b", 2, 36, 304, 0], [1, "t", 5, 37, 304, 0], [1, "t", 1, 38, 304, 0], [1, "b", 1, 40, 303, 0], [1, "t", 3, 39, 303, 0], [1, "t", 3, 42, 304, 0], [1, "t", 5, 38, 303, 0], [1, "t", 5, 39, 304, 0], [1, "t", 5, 41, 303, 0], [1, "t", 4, 41, 304, 0], [1, "t", 4, 44, 303, 0], [1, "b", 2, 40, 304, 0], [1, "b", 2, 43, 303, 0], [1, "t", 1, 42, 303, 0], [1, "t", 1, 43, 304, 0], [1, "t", 5, 44, 304, 0], [1, "b", 1, 45, 303, 0], [1, "t", 2, 45, 304, 0], [1, "t", 2, 46, 303, 0], [1, "t", 4, 47, 303, 0], [1, "b", 0, 48, 303, 0], [1, "t", 5, 49, 303, 0], [1, "t", 2, 50, 303, 0], [1, "t", 1, 51, 303, 0], [1, "t", 4, 52, 303, 0], [1, "t", 5, 46, 304, 0], [1, "t", 2, 47, 304, 0], [1, "t", 5, 48, 304, 0], [1, "t", 1, 49, 304, 0], [1, "t", 2, 50, 304, 0], [1, "b", 1, 53, 303, 0], [1, "b", 2, 51, 304, 0], [1, "t", 5, 52, 304, 0], [1, "t", 3, 53, 304, 0], [1, "b", 2, 54, 303, 0], [1, "t", 5, 54, 304, 0], [1, "t", 5, 55, 303, 0], [1, "t", 3, 56, 303, 0], [1, "t", 4, 57, 303, 0], [1, "t", 5, 58, 303, 0], [1, "b", 1, 55, 304, 0], [1, "t", 2, 56, 304, 0], [1, "t", 0, 57, 304, 0], [1, "t", 3, 58, 304, 0], [1, "t", 3, 63, 304, 0], [1, "t", 3, 59, 303, 0], [1, "t", 4, 59, 304, 0], [1, "t", 5, 60, 303, 0], [1, "t", 0, 60, 304, 0], [1, "t", 0, 66, 303, 0], [1, "t", 0, 70, 304, 0], [1, "t", 3, 61, 304, 0], [1, "t", 3, 67, 303, 0], [1, "t", 3, 73, 304, 0], [1, "t", 3, 76, 303, 0], [1, "t", 3, 78, 304, 0], [1, "t", 1, 61, 303, 0], [1, "t", 1, 73, 303, 0], [1, "t", 1, 79, 303, 0], [1, "b", 2, 62, 304, 0], [1, "b", 2, 70, 303, 0], [1, "t", 5, 62, 303, 0], [1, "t", 5, 68, 303, 0], [1, "t", 5, 71, 304, 0], [1, "t", 5, 77, 304, 0], [1, "t", 5, 75, 303, 0], [1, "t", 5, 64, 304, 0], [1, "t", 5, 65, 303, 0], [1, "t", 5, 80, 303, 0], [1, "t", 1, 76, 304, 0], [1, "t", 3, 63, 303, 0], [1, "t", 5, 82, 304, 0], [1, "b", 2, 65, 304, 0], [1, "t", 1, 64, 303, 0], [1, "t", 1, 68, 304, 0], [1, "t", 2, 69, 304, 0], [1, "t", 4, 69, 303, 0], [1, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, 0], [1, "t", 0, 71, 303, 0], [1, "t", 4, 72, 303, 0], [1, "t", 4, 74, 304, 0], [1, "t", 2, 74, 303, 0], [1, "t", 3, 75, 304, 0], [1, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", 4, 79, 304, 0], [1, "t", 2, 80, 304, 0], [1, "b", 1, 81, 304, 0], [1, "t", 2, 81, 303, 0], [1, "t", 5, 82, 303, 0], [1, "t", 1, 83, 303, 0], [1, "b", 2, 83, 304, 0], [1, "t", 1, 84, 304, 0], [1, "t", 4, 84, 303, 0], [1, "t", 5, 85, 304, 0], [1, "t", 3, 85, 303, 0], [1, "b", 2, 86, 304, 0], [1, "t", 1, 86, 303, 0], [1, "b", 3, 87, 303, 0], [1, "t", 4, 87, 304, 0], [1, "t", 4, 88, 303, 0], [1, "t", 0, 88, 304, 0], [1, "b", 1, 89, 303, 0], [1, "t", 3, 89, 304, 0], [1, "t", 3, 90, 303, 0], [1, "t", 4, 90, 304, 0], [1, "t", 4, 91, 303, 0], [1, "t", 0, 91, 304, 0], [1, "b", 2, 92, 303, 0], [1, "t", 4, 92, 304, 0], [1, "t", 5, 93, 303, 0], [1, "t", 0, 93, 304, 0], [1, "b", 3, 94, 303, 0], [1, "b", 0, 94, 304, 0], [1, "b", 0, 95, 303, 0], [1, "t", 2, 95, 304, 0], [1, "f", 1, 5, 151, 1], [1, "f", 2, 5, 153, 1], [1, "f", 0, 5, 152, 1], [1, "f", 0, 5, 147, 1], [1, "f", 0, 5, 144, 1], [1, "f", 0, 5, 140, 1], [1, "f", 1, 5, 149, 1], [1, "f", 1, 5, 146, 1], [1, "f", 1, 5, 143, 1], [1, "f", 1, 5, 141, 1], [1, "f", 2, 5, 150, 1], [1, "f", 2, 5, 148, 1], [1, "f", 2, 5, 145, 1], [1, "f", 2, 5, 142, 1], [1, "f", 2, 5, 139, 1], [1, "f", 2, 5, 136, 1], [1, "f", 2, 5, 133, 1], [1, "f", 2, 5, 131, 1], [1, "f", 2, 5, 127, 1], [1, "f", 2, 5, 125, 1], [1, "f", 1, 5, 138, 1], [1, "f", 1, 5, 135, 1], [1, "f", 1, 5, 132, 1], [1, "f", 1, 5, 130, 1], [1, "f", 1, 5, 128, 1], [1, "f", 1, 5, 126, 1], [1, "f", 1, 5, 124, 1], [1, "f", 0, 5, 129, 1], [1, "f", 0, 5, 134, 1], [1, "f", 0, 5, 137, 1], [1, "f", 0, 5, 123, 1], [1, "f", 1, 5, 122, 1], [1, "f", 1, 5, 120, 1], [1, "f", 1, 5, 117, 1], [1, "f", 1, 5, 115, 1], [1, "f", 1, 5, 111, 1], [1, "f", 1, 5, 108, 1], [1, "f", 2, 5, 121, 1], [1, "f", 2, 5, 118, 1], [1, "f", 2, 5, 116, 1], [1, "f", 2, 5, 113, 1], [1, "f", 2, 5, 110, 1], [1, "f", 0, 5, 119, 1], [1, "f", 0, 5, 114, 1], [1, "f", 0, 5, 112, 1], [1, "f", 0, 5, 109, 1], [1, "f", 1, 5, 106, 1], [1, "f", 1, 5, 103, 1], [1, "f", 1, 5, 100, 1], [1, "f", 1, 5, 97, 1], [1, "f", 1, 5, 95, 1], [1, "f", 2, 5, 107, 1], [1, "f", 2, 5, 105, 1], [1, "f", 2, 5, 102, 1], [1, "f", 2, 5, 99, 1], [1, "f", 2, 5, 96, 1], [1, "f", 2, 5, 94, 1], [1, "f", 0, 5, 104, 1], [1, "f", 0, 5, 101, 1], [1, "f", 0, 5, 98, 1], [1, "f", 0, 5, 93, 1], [1, "f", 1, 5, 92, 1], [1, "f", 1, 5, 89, 1], [1, "f", 1, 5, 86, 1], [1, "f", 1, 5, 83, 1], [1, "f", 1, 5, 80, 1], [1, "f", 1, 5, 78, 1], [1, "f", 2, 5, 90, 1], [1, "f", 2, 5, 88, 1], [1, "f", 2, 5, 85, 1], [1, "f", 2, 5, 82, 1], [1, "f", 2, 5, 79, 1], [1, "f", 2, 5, 77, 1], [1, "f", 2, 5, 75, 1], [1, "f", 2, 5, 72, 1], [1, "f", 0, 5, 91, 1], [1, "f", 0, 5, 87, 1], [1, "f", 0, 5, 84, 1], [1, "f", 0, 5, 81, 1], [1, "f", 0, 5, 76, 1], [1, "f", 0, 5, 74, 1], [1, "f", 1, 5, 73, 1], [1, "f", 1, 5, 71, 1], [1, "f", 1, 5, 68, 1], [1, "f", 1, 5, 66, 1], [1, "f", 1, 5, 62, 1], [1, "f", 1, 5, 59, 1], [1, "f", 1, 5, 56, 1], [1, "f", 1, 5, 53, 1], [1, "f", 1, 5, 50, 1], [1, "f", 2, 5, 70, 1], [1, "f", 2, 5, 67, 1], [1, "f", 2, 5, 65, 1], [1, "f", 2, 5, 63, 1], [1, "f", 2, 5, 60, 1], [1, "f", 2, 5, 57, 1], [1, "f", 2, 5, 54, 1], [1, "f", 2, 5, 51, 1], [1, "f", 0, 5, 69, 1], [1, "f", 0, 5, 64, 1], [1, "f", 0, 5, 61, 1], [1, "f", 0, 5, 58, 1], [1, "f", 0, 5, 55, 1], [1, "f", 0, 5, 52, 1], [1, "f", 0, 5, 49, 1], [1, "f", 0, 5, 45, 1], [1, "f", 0, 5, 42, 1], [1, "f", 0, 5, 38, 1], [1, "f", 0, 5, 34, 1], [1, "f", 0, 5, 31, 1], [1, "f", 1, 5, 48, 1], [1, "f", 1, 5, 44, 1], [1, "f", 1, 5, 41, 1], [1, "f", 1, 5, 37, 1], [1, "f", 1, 5, 33, 1], [1, "f", 1, 5, 29, 1], [1, "f", 2, 5, 30, 1], [1, "f", 2, 5, 32, 1], [1, "f", 2, 5, 35, 1], [1, "f", 2, 5, 39, 1], [1, "f", 2, 5, 46, 1], [1, "f", 2, 5, 43, 1], [1, "f", 1, 5, 47, 1], [1, "f", 0, 5, 40, 1], [1, "f", 0, 5, 36, 1], [1, "f", 0, 5, 28, 1], [1, "f", 1, 5, 25, 1], [1, "f", 1, 5, 22, 1], [1, "f", 1, 5, 20, 1], [1, "f", 1, 5, 16, 1], [1, "f", 1, 5, 13, 1], [1, "f", 1, 5, 10, 1], [1, "f", 2, 5, 27, 1], [1, "f", 2, 5, 24, 1], [1, "f", 2, 5, 21, 1], [1, "f", 2, 5, 19, 1], [1, "f", 2, 5, 15, 1], [1, "f", 2, 5, 12, 1], [1, "f", 2, 5, 9, 1], [1, "f", 0, 5, 26, 1], [1, "f", 0, 5, 23, 1], [1, "f", 0, 5, 14, 1], [1, "f", 0, 5, 11, 1], [1, "f", 0, 5, 17, 1], [1, "f", 1, 5, 18, 1], [1, "f", 1, 5, 8, 1], [1, "f", 0, 5, 7, 1], [1, "f", 1, 5, 6, 1], [1, "f", 0, 5, 5, 1], [1, "f", 1, 6, 5, 1], [1, "f", 2, 7, 5, 1], [1, "f", 0, 8, 5, 1], [1, "f", 1, 9, 5, 1], [1, "f", 1, 12, 5, 1], [1, "f", 1, 15, 5, 1], [1, "f", 1, 17, 5, 1], [1, "f", 1, 22, 5, 1], [1, "f", 1, 26, 5, 1], [1, "f", 2, 10, 5, 1], [1, "f", 2, 13, 5, 1], [1, "f", 2, 16, 5, 1], [1, "f", 2, 18, 5, 1], [1, "f", 2, 21, 5, 1], [1, "f", 2, 23, 5, 1], [1, "f", 2, 25, 5, 1], [1, "f", 2, 27, 5, 1], [1, "f", 0, 11, 5, 1], [1, "f", 0, 14, 5, 1], [1, "f", 0, 19, 5, 1], [1, "f", 0, 24, 5, 1], [1, "f", 0, 28, 5, 1], [1, "f", 1, 20, 5, 1], [1, "f", 1, 29, 5, 1], [1, "f", 1, 32, 5, 1], [1, "f", 1, 35, 5, 1], [1, "f", 1, 38, 5, 1], [1, "f", 1, 41, 5, 1], [1, "f", 1, 45, 5, 1], [1, "f", 2, 30, 5, 1], [1, "f", 2, 33, 5, 1], [1, "f", 2, 36, 5, 1], [1, "f", 2, 39, 5, 1], [1, "f", 2, 42, 5, 1], [1, "f", 2, 44, 5, 1], [1, "f", 2, 46, 5, 1], [1, "f", 0, 43, 5, 1], [1, "f", 0, 40, 5, 1], [1, "f", 0, 37, 5, 1], [1, "f", 0, 34, 5, 1], [1, "f", 0, 31, 5, 1], [1, "f", 0, 47, 5, 1], [1, "f", 1, 48, 5, 1], [1, "f", 1, 51, 5, 1], [1, "f", 1, 53, 5, 1], [1, "f", 1, 57, 5, 1], [1, "f", 1, 60, 5, 1], [1, "f", 1, 63, 5, 1], [1, "f", 1, 65, 5, 1], [1, "f", 2, 64, 5, 1], [1, "f", 2, 62, 5, 1], [1, "f", 2, 59, 5, 1], [1, "f", 2, 56, 5, 1], [1, "f", 2, 52, 5, 1], [1, "f", 2, 49, 5, 1], [1, "f", 2, 54, 5, 1], [1, "f", 0, 50, 5, 1], [1, "f", 0, 55, 5, 1], [1, "f", 0, 58, 5, 1], [1, "f", 0, 61, 5, 1], [1, "f", 0, 66, 5, 1], [1, "f", 1, 67, 5, 1], [1, "f", 1, 70, 5, 1], [1, "f", 1, 72, 5, 1], [1, "f", 1, 75, 5, 1], [1, "f", 1, 79, 5, 1], [1, "f", 2, 68, 5, 1], [1, "f", 2, 71, 5, 1], [1, "f", 2, 74, 5, 1], [1, "f", 2, 76, 5, 1], [1, "f", 2, 78, 5, 1], [1, "f", 0, 69, 5, 1], [1, "f", 0, 73, 5, 1], [1, "f", 0, 77, 5, 1], [1, "f", 0, 80, 5, 1], [1, "f", 1, 81, 5, 1], [1, "f", 1, 84, 5, 1], [1, "f", 1, 87, 5, 1], [1, "f", 1, 89, 5, 1], [1, "f", 1, 92, 5, 1], [1, "f", 1, 94, 5, 1], [1, "f", 0, 82, 5, 1], [1, "f", 2, 83, 5, 1], [1, "f", 2, 85, 5, 1], [1, "f", 2, 88, 5, 1], [1, "f", 2, 90, 5, 1], [1, "f", 2, 93, 5, 1], [1, "f", 2, 95, 5, 1], [1, "f", 0, 86, 5, 1], [1, "f", 0, 91, 5, 1], [1, "f", 2, 6, 153, 1], [1, "f", 1, 6, 152, 1], [1, "t", 1, 93, 301, 0], [1, "t", 3, 94, 302, 0], [1, "t", 5, 95, 302, 0], [1, "t", 5, 93, 302, 0], [1, "b", 3, 92, 302, 0], [1, "t", 1, 91, 302, 0], [1, "t", 5, 90, 302, 0], [1, "b", 2, 92, 301, 0], [1, "t", 1, 91, 301, 0], [1, "t", 2, 90, 301, 0], [1, "b", 2, 89, 302, 0], [1, "t", 4, 89, 301, 0], [1, "t", 1, 88, 302, 0], [1, "t", 2, 88, 301, 0], [1, "t", 3, 87, 302, 0], [1, "t", 4, 87, 299, 0], [1, "t", 4, 86, 302, 0], [1, "t", 1, 85, 302, 0], [1, "t", 5, 85, 301, 0], [1, "b", 2, 84, 302, 0], [1, "t", 5, 83, 302, 0], [1, "t", 1, 82, 302, 0], [1, "t", 5, 81, 302, 0], [1, "t", 2, 80, 302, 0], [1, "t", 4, 79, 302, 0], [1, "t", 2, 78, 302, 0], [1, "b", 1, 77, 302, 0], [1, "b", 2, 76, 302, 0], [1, "t", 2, 75, 302, 0], [1, "t", 4, 74, 302, 0], [1, "b", 1, 73, 302, 0], [1, "t", 2, 72, 302, 0], [1, "t", 4, 71, 302, 0], [1, "b", 3, 70, 302, 0], [1, "t", 1, 69, 302, 0], [1, "t", 2, 68, 302, 0], [1, "t", 5, 67, 302, 0], [1, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, 0], [1, "t", 4, 64, 302, 0], [1, "b", 3, 63, 302, 0], [1, "t", 5, 62, 302, 0], [1, "b", 1, 61, 302, 0], [1, "t", 3, 60, 302, 0], [1, "t", 4, 59, 302, 0], [1, "b", 2, 58, 302, 0], [1, "t", 5, 57, 302, 0], [1, "t", 1, 56, 302, 0], [1, "t", 3, 55, 302, 0], [1, "t", 4, 54, 302, 0], [1, "t", 1, 53, 302, 0], [1, "t", 5, 52, 302, 0], [1, "t", 2, 51, 302, 0], [1, "t", 4, 50, 302, 0], [1, "t", 2, 49, 302, 0], [1, "b", 1, 48, 302, 0], [1, "t", 3, 47, 302, 0], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, 0], [1, "t", 2, 44, 302, 0], [1, "t", 5, 43, 302, 0], [1, "t", 2, 42, 302, 0], [1, "t", 1, 41, 302, 0], [1, "t", 4, 40, 302, 0], [1, "b", 2, 39, 302, 0], [1, "t", 5, 38, 302, 0], [1, "t", 1, 37, 302, 0], [1, "t", 2, 36, 302, 0], [1, "t", 5, 35, 302, 0], [1, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", 4, 32, 302, 0], [1, "b", 1, 31, 302, 0], [1, "t", 2, 30, 302, 0], [1, "t", 4, 29, 302, 0], [1, "t", 2, 28, 302, 0], [1, "t", 5, 27, 302, 0], [1, "b", 3, 26, 302, 0], [1, "t", 1, 25, 302, 0], [1, "t", 4, 24, 302, 0], [1, "t", 2, 23, 302, 0], [1, "t", 1, 22, 302, 0], [1, "t", 5, 21, 302, 0], [1, "t", 2, 20, 302, 0], [1, "t", 4, 19, 302, 0], [1, "b", 1, 18, 302, 0], [1, "t", 5, 17, 302, 0], [1, "t", 3, 16, 302, 0], [1, "t", 1, 15, 302, 0], [1, "t", 5, 14, 302, 0], [1, "t", 3, 13, 302, 0], [1, "t", 4, 12, 302, 0], [1, "t", 1, 11, 302, 0], [1, "t", 2, 10, 302, 0], [1, "t", 4, 9, 302, 0], [1, "b", 3, 8, 302, 0], [1, "t", 5, 8, 302, 0], [1, "t", 5, 7, 302, 0], [1, "b", 2, 6, 302, 0], [1, "t", 1, 6, 301, 0], [1, "t", 4, 6, 300, 0], [1, "t", 2, 6, 299, 0], [1, "b", 0, 6, 298, 0], [1, "t", 5, 6, 297, 0], [1, "t", 2, 6, 296, 0], [1, "t", 0, 6, 295, 0], [1, "b", 2, 6, 294, 0], [1, "t", 5, 6, 293, 0], [1, "t", 1, 6, 292, 0], [1, "b", 0, 6, 291, 0], [1, "t", 2, 6, 290, 0], [1, "t", 5, 6, 289, 0], [1, "t", 1, 6, 288, 0], [1, "t", 4, 6, 287, 0], [1, "t", 2, 6, 286, 0], [1, "t", 5, 6, 285, 0], [1, "t", 2, 6, 284, 0], [1, "b", 0, 6, 283, 0], [1, "t", 2, 6, 282, 0], [1, "t", 5, 6, 281, 0], [1, "b", 2, 6, 280, 0], [1, "t", 5, 6, 279, 0], [1, "t", 1, 6, 278, 0], [1, "t", 4, 6, 277, 0], [1, "t", 3, 6, 276, 0], [1, "t", 5, 6, 275, 0], [1, "b", 0, 6, 274, 0], [1, "t", 5, 6, 273, 0], [1, "t", 1, 6, 272, 0], [1, "t", 4, 6, 271, 0], [1, "b", 3, 6, 270, 0], [1, "t", 5, 6, 269, 0], [1, "t", 1, 6, 268, 0], [1, "t", 4, 6, 267, 0], [1, "t", 1, 6, 266, 0], [1, "t", 3, 6, 265, 0], [1, "t", 4, 6, 264, 0], [1, "b", 2, 6, 263, 0], [1, "t", 5, 6, 262, 0], [1, "t", 3, 6, 261, 0], [1, "t", 0, 6, 260, 0], [1, "t", 5, 6, 259, 0], [1, "t", 1, 6, 258, 0], [1, "t", 3, 6, 257, 0], [1, "t", 4, 6, 255, 0], [1, "t", 3, 6, 254, 0], [1, "t", 5, 6, 253, 0], [1, "b", 2, 6, 252, 0], [1, "t", 5, 6, 251, 0], [1, "t", 1, 6, 250, 0], [1, "t", 3, 6, 249, 0], [1, "t", 4, 6, 248, 0], [1, "b", 3, 6, 247, 0], [1, "t", 5, 6, 246, 0], [1, "t", 3, 6, 245, 0], [1, "t", 5, 6, 244, 0], [1, "t", 0, 6, 243, 0], [1, "t", 4, 6, 242, 0], [1, "t", 3, 6, 241, 0], [1, "t", 5, 6, 240, 0], [1, "b", 0, 6, 239, 0], [1, "t", 3, 6, 238, 0], [1, "t", 4, 6, 237, 0], [1, "t", 1, 6, 236, 0], [1, "t", 5, 6, 235, 0], [1, "b", 2, 6, 234, 0], [1, "t", 2, 6, 233, 0], [1, "t", 4, 6, 232, 0], [1, "b", 3, 6, 231, 0], [1, "t", 5, 6, 230, 0], [1, "t", 1, 6, 229, 0], [1, "t", 2, 6, 228, 0], [1, "t", 5, 6, 227, 0], [1, "b", 2, 6, 226, 0], [1, "t", 4, 6, 225, 0], [1, "t", 0, 6, 224, 0], [1, "t", 2, 6, 223, 0], [1, "t", 0, 6, 222, 0], [1, "b", 2, 6, 221, 0], [1, "t", 4, 6, 220, 0], [1, "b", 3, 6, 219, 0], [1, "t", 5, 6, 218, 0], [1, "t", 0, 6, 217, 0], [1, "t", 3, 6, 216, 0], [1, "b", 0, 6, 215, 0], [1, "t", 4, 6, 214, 0], [1, "t", 2, 6, 213, 0], [1, "t", 0, 6, 212, 0], [1, "t", 2, 6, 211, 0], [1, "b", 3, 6, 210, 0], [1, "t", 0, 6, 209, 0], [1, "t", 5, 6, 207, 0], [1, "t", 2, 6, 208, 0], [1, "t", 0, 6, 206, 0], [1, "t", 2, 6, 205, 0], [1, "t", 2, 6, 203, 0], [1, "b", 0, 6, 202, 0], [1, "t", 3, 6, 201, 0], [1, "t", 4, 6, 199, 0], [1, "t", 0, 6, 198, 0], [1, "t", 2, 6, 197, 0], [1, "t", 4, 6, 196, 0], [1, "t", 1, 6, 195, 0], [1, "t", 3, 6, 194, 0], [1, "t", 4, 6, 192, 0], [1, "t", 2, 6, 191, 0], [1, "b", 0, 6, 190, 0], [1, "t", 3, 6, 189, 0], [1, "t", 4, 6, 187, 0], [1, "b", 0, 6, 186, 0], [1, "t", 2, 6, 185, 0], [1, "t", 4, 6, 184, 0], [1, "t", 2, 6, 183, 0], [1, "t", 0, 6, 182, 0], [1, "b", 2, 6, 181, 0], [1, "t", 5, 6, 180, 0], [1, "t", 2, 6, 179, 0], [1, "t", 0, 6, 178, 0], [1, "t", 2, 6, 177, 0], [1, "t", 4, 6, 176, 0], [1, "b", 2, 6, 175, 0], [1, "t", 1, 6, 174, 0], [1, "t", 5, 6, 173, 0], [1, "t", 2, 6, 256, 0], [1, "t", 4, 6, 204, 0], [1, "t", 4, 6, 200, 0], [1, "t", 2, 6, 193, 0], [1, "t", 2, 6, 188, 0], [1, "f", 1, 6, 150, 1], [1, "f", 2, 6, 151, 1], [1, "f", 2, 6, 149, 1], [1, "f", 1, 6, 148, 1], [1, "f", 2, 6, 147, 1], [1, "f", 2, 6, 145, 1], [1, "f", 2, 6, 143, 1], [1, "f", 1, 6, 146, 1], [1, "f", 1, 6, 144, 1], [1, "f", 1, 6, 142, 1], [1, "f", 2, 6, 141, 1], [1, "f", 2, 6, 139, 1], [1, "f", 2, 6, 137, 1], [1, "f", 2, 6, 135, 1], [1, "f", 2, 6, 133, 1], [1, "f", 1, 6, 140, 1], [1, "f", 1, 6, 138, 1], [1, "f", 1, 6, 136, 1], [1, "f", 1, 6, 134, 1], [1, "f", 1, 6, 132, 1], [1, "f", 2, 6, 131, 1], [1, "f", 2, 6, 129, 1], [1, "f", 2, 6, 127, 1], [1, "f", 2, 6, 125, 1], [1, "f", 2, 6, 123, 1], [1, "f", 2, 6, 121, 1], [1, "f", 1, 6, 130, 1], [1, "f", 1, 6, 128, 1], [1, "f", 1, 6, 126, 1], [1, "f", 1, 6, 124, 1], [1, "f", 1, 6, 122, 1], [1, "f", 1, 6, 120, 1], [1, "f", 2, 6, 119, 1], [1, "f", 2, 6, 117, 1], [1, "f", 2, 6, 115, 1], [1, "f", 2, 6, 113, 1], [1, "f", 2, 6, 111, 1], [1, "f", 2, 6, 109, 1], [1, "f", 1, 6, 118, 1], [1, "f", 1, 6, 116, 1], [1, "f", 1, 6, 114, 1], [1, "f", 1, 6, 112, 1], [1, "f", 1, 6, 110, 1], [1, "f", 1, 6, 108, 1], [1, "f", 1, 6, 106, 1], [1, "f", 1, 6, 104, 1], [1, "f", 2, 6, 107, 1], [1, "f", 2, 6, 105, 1], [1, "f", 2, 6, 103, 1], [1, "f", 2, 6, 101, 1], [1, "f", 2, 6, 99, 1], [1, "f", 2, 6, 97, 1], [1, "f", 2, 6, 95, 1], [1, "f", 2, 6, 93, 1], [1, "f", 2, 6, 91, 1], [1, "f", 1, 6, 102, 1], [1, "f", 1, 6, 100, 1], [1, "f", 1, 6, 98, 1], [1, "f", 1, 6, 96, 1], [1, "f", 1, 6, 94, 1], [1, "f", 1, 6, 92, 1], [1, "f", 1, 6, 90, 1], [1, "f", 1, 6, 88, 1], [1, "f", 1, 6, 86, 1], [1, "f", 2, 6, 89, 1], [1, "f", 2, 6, 87, 1], [1, "f", 2, 6, 85, 1], [1, "f", 2, 6, 83, 1], [1, "f", 2, 6, 81, 1], [1, "f", 2, 6, 79, 1], [1, "f", 2, 6, 77, 1], [1, "f", 1, 6, 84, 1], [1, "f", 1, 6, 82, 1], [1, "f", 1, 6, 80, 1], [1, "f", 1, 6, 78, 1], [1, "f", 1, 6, 76, 1], [1, "f", 2, 6, 75, 1], [1, "f", 2, 6, 73, 1], [1, "f", 2, 6, 71, 1], [1, "f", 2, 6, 69, 1], [1, "f", 2, 6, 67, 1], [1, "f", 2, 6, 65, 1], [1, "f", 1, 6, 74, 1], [1, "f", 1, 6, 72, 1], [1, "f", 1, 6, 70, 1], [1, "f", 1, 6, 68, 1], [1, "f", 1, 6, 66, 1], [1, "f", 1, 6, 64, 1], [1, "f", 2, 6, 63, 1], [1, "f", 2, 6, 61, 1], [1, "f", 2, 6, 59, 1], [1, "f", 2, 6, 57, 1], [1, "f", 2, 6, 55, 1], [1, "f", 2, 6, 53, 1], [1, "f", 2, 6, 51, 1], [1, "f", 1, 6, 62, 1], [1, "f", 1, 6, 60, 1], [1, "f", 1, 6, 58, 1], [1, "f", 1, 6, 56, 1], [1, "f", 1, 6, 54, 1], [1, "f", 1, 6, 52, 1], [1, "f", 1, 6, 50, 1], [1, "f", 2, 6, 49, 1], [1, "f", 2, 6, 47, 1], [1, "f", 2, 6, 45, 1], [1, "f", 2, 6, 43, 1], [1, "f", 2, 6, 41, 1], [1, "f", 2, 6, 39, 1], [1, "f", 1, 6, 48, 1], [1, "f", 1, 6, 46, 1], [1, "f", 1, 6, 44, 1], [1, "f", 1, 6, 42, 1], [1, "f", 1, 6, 40, 1], [1, "f", 1, 6, 38, 1], [1, "f", 2, 6, 37, 1], [1, "f", 2, 6, 35, 1], [1, "f", 2, 6, 33, 1], [1, "f", 2, 6, 31, 1], [1, "f", 2, 6, 29, 1], [1, "f", 2, 6, 27, 1], [1, "f", 1, 6, 36, 1], [1, "f", 1, 6, 34, 1], [1, "f", 1, 6, 32, 1], [1, "f", 1, 6, 30, 1], [1, "f", 1, 6, 28, 1], [1, "f", 1, 6, 26, 1], [1, "f", 2, 6, 25, 1], [1, "f", 2, 6, 23, 1], [1, "f", 2, 6, 21, 1], [1, "f", 2, 6, 19, 1], [1, "f", 2, 6, 17, 1], [1, "f", 2, 6, 15, 1], [1, "f", 1, 6, 24, 1], [1, "f", 1, 6, 22, 1], [1, "f", 1, 6, 20, 1], [1, "f", 1, 6, 18, 1], [1, "f", 1, 6, 16, 1], [1, "f", 2, 6, 13, 1], [1, "f", 2, 6, 11, 1], [1, "f", 2, 6, 9, 1], [1, "f", 2, 6, 7, 1], [1, "f", 1, 6, 14, 1], [1, "f", 1, 6, 12, 1], [1, "f", 1, 6, 10, 1], [1, "f", 1, 6, 8, 1], [1, "f", 1, 6, 6, 1], [1, "f", 1, 8, 6, 1], [1, "f", 2, 7, 6, 1], [1, "f", 2, 9, 6, 1], [1, "f", 2, 11, 6, 1], [1, "f", 2, 13, 6, 1], [1, "f", 2, 15, 6, 1], [1, "f", 1, 10, 6, 1], [1, "f", 1, 12, 6, 1], [1, "f", 1, 14, 6, 1], [1, "f", 1, 16, 6, 1], [1, "f", 1, 18, 6, 1], [1, "f", 1, 20, 6, 1], [1, "f", 1, 22, 6, 1], [1, "f", 1, 24, 6, 1], [1, "f", 1, 26, 6, 1], [1, "f", 2, 17, 6, 1], [1, "f", 2, 19, 6, 1], [1, "f", 2, 21, 6, 1], [1, "f", 2, 23, 6, 1], [1, "f", 2, 25, 6, 1], [1, "f", 2, 27, 6, 1], [1, "f", 2, 29, 6, 1], [1, "f", 2, 31, 6, 1], [1, "f", 2, 33, 6, 1], [1, "f", 1, 28, 6, 1], [1, "f", 1, 30, 6, 1], [1, "f", 1, 32, 6, 1], [1, "f", 1, 34, 6, 1], [1, "f", 2, 67, 6, 1], [1, "f", 2, 69, 6, 1], [1, "f", 2, 71, 6, 1], [1, "f", 2, 73, 6, 1], [1, "f", 2, 75, 6, 1], [1, "f", 1, 68, 6, 1], [1, "f", 1, 70, 6, 1], [1, "f", 1, 72, 6, 1], [1, "f", 1, 74, 6, 1], [1, "f", 1, 76, 6, 1], [1, "f", 2, 77, 6, 1], [1, "f", 2, 79, 6, 1], [1, "f", 2, 81, 6, 1], [1, "f", 2, 83, 6, 1], [1, "f", 2, 85, 6, 1], [1, "f", 1, 78, 6, 1], [1, "f", 1, 80, 6, 1], [1, "f", 1, 82, 6, 1], [1, "f", 1, 84, 6, 1], [1, "f", 1, 86, 6, 1], [1, "f", 2, 87, 6, 1], [1, "f", 2, 89, 6, 1], [1, "f", 2, 91, 6, 1], [1, "f", 2, 93, 6, 1], [1, "f", 1, 88, 6, 1], [1, "f", 1, 90, 6, 1], [1, "f", 1, 92, 6, 1], [1, "f", 1, 94, 6, 1], [1, "f", 2, 95, 6, 1], [1, "f", 1, 95, 7, 1], [1, "f", 1, 83, 7, 1], [1, "f", 1, 81, 7, 1], [1, "f", 1, 79, 7, 1], [1, "f", 1, 77, 7, 1], [1, "f", 1, 75, 7, 1], [1, "f", 1, 73, 7, 1], [1, "f", 1, 71, 7, 1], [1, "f", 1, 69, 7, 1], [1, "f", 1, 33, 7, 1], [1, "f", 1, 31, 7, 1], [1, "f", 1, 29, 7, 1], [1, "f", 1, 27, 7, 1], [1, "f", 1, 25, 7, 1], [1, "f", 1, 23, 7, 1], [1, "f", 1, 21, 7, 1], [1, "f", 1, 19, 7, 1], [1, "f", 1, 17, 7, 1], [1, "f", 1, 15, 7, 1], [1, "f", 1, 13, 7, 1], [1, "f", 1, 11, 7, 1], [1, "f", 1, 9, 7, 1], [1, "f", 1, 7, 7, 1], [1, "s", 0, 7, 8, 1], [1, "t", 4, 7, 174, 0], [1, "t", 5, 7, 175, 0], [1, "t", 4, 7, 176, 0], [1, "b", 2, 7, 177, 0], [1, "t", 3, 94, 301, 0], [1, "b", 3, 95, 301, 0], [1, "t", 4, 96, 301, 0], [1, "t", 1, 97, 301, 0], [1, "t", 2, 98, 301, 0], [1, "t", 4, 99, 301, 0], [1, "t", 2, 100, 301, 0], [1, "t", 4, 96, 304, 0], [1, "t", 2, 96, 302, 0], [1, "t", 2, 97, 304, 0], [1, "t", 2, 96, 303, 0], [1, "t", 5, 97, 303, 0], [1, "t", 5, 98, 304, 0], [1, "b", 2, 97, 302, 0], [1, "b", 2, 99, 304, 0], [1, "t", 1, 98, 303, 0], [1, "t", 4, 98, 302, 0], [1, "t", 4, 99, 303, 0], [1, "t", 4, 100, 304, 0], [1, "t", 5, 99, 302, 0], [1, "t", 5, 101, 303, 0], [1, "t", 2, 100, 303, 0], [1, "t", 0, 100, 302, 0], [1, "t", 0, 101, 304, 0], [1, "t", 4, 102, 304, 0], [1, "f", 0, 94, 7, 1], [1, "f", 1, 93, 7, 1], [1, "f", 1, 92, 7, 1], [1, "f", 0, 91, 7, 1], [1, "f", 1, 90, 7, 1], [1, "f", 1, 89, 7, 1], [1, "f", 0, 88, 7, 1], [1, "f", 1, 87, 7, 1], [1, "f", 1, 86, 7, 1], [1, "f", 1, 85, 7, 1], [1, "f", 0, 84, 7, 1], [1, "f", 1, 82, 7, 1], [1, "f", 0, 80, 7, 1], [1, "f", 1, 78, 7, 1], [1, "f", 0, 76, 7, 1], [1, "f", 1, 74, 7, 1], [1, "f", 0, 72, 7, 1], [1, "f", 0, 70, 7, 1], [1, "f", 1, 68, 7, 1], [1, "f", 1, 32, 7, 1], [1, "f", 0, 30, 7, 1], [1, "f", 1, 28, 7, 1], [1, "f", 0, 26, 7, 1], [1, "f", 1, 24, 7, 1], [1, "f", 0, 22, 7, 1], [1, "f", 1, 20, 7, 1], [1, "f", 0, 18, 7, 1], [1, "f", 1, 16, 7, 1], [1, "f", 0, 14, 7, 1], [1, "f", 1, 12, 7, 1], [1, "f", 0, 10, 7, 1], [1, "f", 1, 8, 7, 1], [1, "s", 1, 7, 9, 1], [1, "f", 0, 95, 152, 1], [1, "f", 1, 95, 151, 1], [1, "f", 0, 95, 11, 1], [1, "f", 1, 95, 12, 1], [1, "f", 1, 95, 14, 1], [1, "f", 1, 95, 19, 1], [1, "f", 0, 95, 15, 1], [1, "f", 0, 95, 20, 1], [1, "f", 1, 95, 21, 1], [1, "f", 1, 95, 26, 1], [1, "f", 1, 95, 37, 1], [1, "f", 0, 95, 44, 1], [1, "f", 1, 95, 50, 1], [1, "f", 1, 95, 52, 1], [1, "f", 0, 95, 53, 1], [1, "f", 1, 95, 54, 1], [1, "f", 1, 95, 62, 1], [1, "f", 0, 95, 55, 1], [1, "f", 1, 95, 64, 1], [1, "f", 0, 95, 58, 1], [1, "f", 0, 95, 61, 1], [1, "f", 0, 95, 68, 1], [1, "f", 0, 95, 72, 1], [1, "f", 0, 95, 78, 1], [1, "f", 1, 95, 115, 1], [1, "f", 1, 95, 117, 1], [1, "f", 1, 95, 128, 1], [1, "f", 0, 95, 85, 1], [1, "f", 0, 95, 91, 1], [1, "f", 0, 95, 95, 1], [1, "f", 0, 95, 114, 1], [1, "f", 2, 95, 113, 1], [1, "f", 1, 95, 119, 1], [1, "f", 0, 95, 120, 1], [1, "f", 1, 95, 121, 1], [1, "f", 0, 95, 127, 1], [1, "f", 1, 95, 130, 1], [1, "f", 0, 95, 131, 1], [1, "f", 1, 95, 132, 1], [1, "f", 1, 95, 136, 1], [1, "f", 0, 95, 137, 1], [1, "f", 0, 95, 143, 1], [1, "f", 0, 95, 147, 1], [1, "f", 1, 95, 138, 1], [1, "f", 1, 95, 144, 1], [1, "f", 1, 95, 10, 1], [1, "f", 0, 95, 8, 1], [1, "f", 1, 95, 9, 1], [1, "f", 0, 95, 13, 1], [1, "f", 1, 95, 16, 1], [1, "f", 1, 95, 17, 1], [1, "f", 0, 95, 18, 1], [1, "f", 1, 95, 45, 1], [1, "f", 0, 95, 51, 1], [1, "f", 1, 95, 56, 1], [1, "f", 1, 95, 57, 1], [1, "f", 1, 95, 59, 1], [1, "f", 1, 95, 60, 1], [1, "f", 1, 95, 63, 1], [1, "f", 0, 95, 65, 1], [1, "f", 1, 95, 66, 1], [1, "f", 1, 95, 67, 1], [1, "f", 1, 95, 69, 1], [1, "f", 1, 95, 70, 1], [1, "f", 0, 95, 71, 1], [1, "f", 1, 95, 73, 1], [1, "f", 1, 95, 74, 1], [1, "f", 0, 95, 75, 1], [1, "f", 1, 95, 76, 1], [1, "f", 1, 95, 77, 1], [1, "f", 1, 95, 79, 1], [1, "f", 1, 95, 80, 1], [1, "f", 0, 95, 81, 1], [1, "f", 1, 95, 82, 1], [1, "f", 0, 95, 83, 1], [1, "f", 1, 95, 84, 1], [1, "f", 1, 95, 86, 1], [1, "f", 1, 95, 88, 1], [1, "f", 0, 95, 87, 1], [1, "f", 1, 95, 89, 1], [1, "f", 1, 95, 90, 1], [1, "f", 1, 95, 92, 1], [1, "f", 1, 95, 93, 1], [1, "f", 1, 95, 94, 1], [1, "f", 1, 95, 96, 1], [1, "f", 1, 95, 97, 1], [1, "f", 0, 95, 98, 1], [1, "f", 1, 95, 99, 1], [1, "f", 1, 95, 100, 1], [1, "f", 0, 95, 101, 1], [1, "f", 1, 95, 102, 1], [1, "f", 0, 95, 103, 1], [1, "f", 1, 95, 104, 1], [1, "f", 1, 95, 105, 1], [1, "f", 0, 95, 106, 1], [1, "f", 1, 95, 107, 1], [1, "f", 1, 95, 108, 1], [1, "f", 1, 95, 109, 1], [1, "f", 0, 95, 110, 1], [1, "f", 1, 95, 111, 1], [1, "f", 0, 95, 112, 1], [1, "f", 1, 95, 116, 1], [1, "f", 0, 95, 118, 1], [1, "f", 0, 95, 122, 1], [1, "f", 1, 95, 123, 1], [1, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, 1], [1, "f", 1, 95, 126, 1], [1, "f", 1, 95, 129, 1], [1, "f", 1, 95, 133, 1], [1, "f", 0, 95, 134, 1], [1, "f", 1, 95, 135, 1], [1, "f", 1, 95, 139, 1], [1, "f", 0, 95, 140, 1], [1, "f", 1, 95, 141, 1], [1, "f", 1, 95, 142, 1], [1, "f", 1, 95, 146, 1], [1, "f", 0, 95, 145, 1], [1, "f", 1, 95, 148, 1], [1, "f", 1, 95, 149, 1], [1, "f", 1, 95, 150, 1], [1, "f", 1, 95, 153, 1], [1, "cs", 0, 64, 9, 1], [1, "cs", 1, 64, 10, 1], [1, "cs", 2, 64, 16, 1], [1, "cs", 2, 64, 19, 1], [1, "cs", 0, 64, 20, 1], [1, "cs", 1, 64, 21, 1], [1, "cs", 2, 64, 22, 1], [1, "cs", 0, 64, 23, 1], [1, "cs", 2, 64, 24, 1], [1, "cs", 1, 64, 29, 1], [1, "cs", 2, 64, 30, 1], [1, "cs", 3, 64, 31, 1], [1, "cs", 0, 64, 32, 1], [1, "cs", 1, 64, 33, 1], [1, "cs", 2, 64, 34, 1], [1, "cs", 0, 64, 35, 1], [1, "cs", 2, 64, 8, 1], [1, "cs", 2, 65, 8, 1], [1, "cs", 1, 65, 9, 1], [1, "cs", 2, 65, 10, 1], [1, "cs", 3, 65, 11, 1], [1, "cs", 1, 65, 16, 1], [1, "cs", 0, 64, 17, 1], [1, "cs", 3, 65, 17, 1], [1, "cs", 2, 64, 18, 1], [1, "cs", 2, 65, 18, 1], [1, "cs", 0, 65, 19, 1], [1, "cs", 1, 65, 20, 1], [1, "cs", 3, 65, 21, 1], [1, "cs", 2, 65, 22, 1], [1, "cs", 3, 65, 23, 1], [1, "cs", 0, 65, 24, 1], [1, "cs", 2, 65, 29, 1], [1, "cs", 3, 65, 30, 1], [1, "cs", 0, 65, 31, 1], [1, "cs", 1, 65, 32, 1], [1, "cs", 2, 65, 33, 1], [1, "cs", 3, 65, 34, 1], [1, "cs", 2, 63, 9, 1], [1, "cs", 0, 62, 9, 1], [1, "cs", 2, 61, 9, 1], [1, "cs", 0, 60, 9, 1], [1, "cs", 2, 59, 9, 1], [1, "cs", 2, 58, 9, 1], [1, "cs", 0, 57, 9, 1], [1, "cs", 2, 56, 9, 1], [1, "cs", 2, 55, 9, 1], [1, "cs", 2, 54, 9, 1], [1, "cs", 0, 53, 9, 1], [1, "cs", 0, 51, 9, 1], [1, "cs", 2, 52, 9, 1], [1, "cs", 2, 50, 9, 1], [1, "cs", 2, 48, 9, 1], [1, "cs", 2, 49, 9, 1], [1, "cs", 0, 47, 9, 1], [1, "cs", 0, 45, 9, 1], [1, "cs", 0, 43, 9, 1], [1, "cs", 2, 46, 9, 1], [1, "cs", 2, 44, 9, 1], [1, "cs", 2, 42, 9, 1], [1, "cs", 2, 41, 9, 1], [1, "cs", 0, 40, 9, 1], [1, "cs", 2, 39, 9, 1], [1, "cs", 2, 38, 9, 1], [1, "cs", 0, 37, 9, 1], [1, "cs", 0, 63, 8, 1], [1, "cs", 2, 65, 7, 1], [1, "cs", 3, 64, 7, 1], [1, "cs", 2, 62, 8, 1], [1, "cs", 3, 61, 8, 1], [1, "cs", 1, 62, 7, 1], [1, "cs", 2, 63, 7, 1], [1, "cs", 0, 64, 6, 1], [1, "cs", 3, 65, 6, 1], [1, "cs", 2, 63, 6, 1], [1, "cs", 2, 62, 6, 1], [1, "cs", 2, 61, 6, 1], [1, "cs", 2, 60, 6, 1], [1, "cs", 2, 59, 6, 1], [1, "cs", 2, 61, 7, 1], [1, "cs", 0, 60, 7, 1], [1, "cs", 2, 60, 8, 1], [1, "cs", 2, 59, 7, 1], [1, "cs", 2, 59, 8, 1], [1, "cs", 1, 58, 8, 1], [1, "cs", 1, 57, 6, 1], [1, "cs", 1, 55, 7, 1], [1, "cs", 0, 56, 6, 1], [1, "cs", 2, 58, 6, 1], [1, "cs", 2, 58, 7, 1], [1, "cs", 2, 57, 7, 1], [1, "cs", 2, 56, 7, 1], [1, "cs", 2, 55, 6, 1], [1, "cs", 2, 57, 8, 1], [1, "cs", 2, 56, 8, 1], [1, "cs", 2, 55, 8, 1], [1, "cs", 0, 54, 8, 1], [1, "cs", 0, 50, 7, 1], [1, "cs", 0, 53, 6, 1], [1, "cs", 2, 54, 6, 1], [1, "cs", 2, 54, 7, 1], [1, "cs", 2, 53, 7, 1], [1, "cs", 2, 52, 7, 1], [1, "cs", 2, 52, 6, 1], [1, "cs", 1, 52, 8, 1], [1, "cs", 2, 53, 8, 1], [1, "cs", 2, 51, 8, 1], [1, "cs", 2, 51, 7, 1], [1, "cs", 2, 51, 6, 1], [1, "cs", 2, 50, 6, 1], [1, "cs", 2, 50, 8, 1], [1, "cs", 2, 49, 8, 1], [1, "cs", 2, 49, 7, 1], [1, "cs", 2, 49, 6, 1], [1, "cs", 0, 46, 7, 1], [1, "cs", 1, 48, 8, 1], [1, "cs", 1, 44, 7, 1], [1, "cs", 1, 41, 8, 1], [1, "cs", 2, 48, 7, 1], [1, "cs", 2, 48, 6, 1], [1, "cs", 2, 47, 6, 1], [1, "cs", 2, 47, 7, 1], [1, "cs", 2, 47, 8, 1], [1, "cs", 2, 46, 8, 1], [1, "cs", 2, 45, 8, 1], [1, "cs", 2, 45, 7, 1], [1, "cs", 2, 45, 6, 1], [1, "cs", 2, 46, 6, 1], [1, "cs", 2, 44, 6, 1], [1, "cs", 2, 44, 8, 1], [1, "cs", 2, 43, 8, 1], [1, "cs", 2, 43, 7, 1], [1, "cs", 2, 43, 6, 1], [1, "cs", 2, 42, 6, 1], [1, "cs", 2, 42, 7, 1], [1, "cs", 2, 42, 8, 1], [1, "cs", 2, 41, 7, 1], [1, "cs", 2, 41, 6, 1], [1, "cs", 2, 40, 6, 1], [1, "cs", 2, 40, 7, 1], [1, "cs", 2, 40, 8, 1], [1, "cs", 2, 39, 8, 1], [1, "cs", 0, 39, 7, 1], [1, "cs", 1, 38, 8, 1], [1, "cs", 2, 39, 6, 1], [1, "cs", 2, 38, 6, 1], [1, "cs", 2, 37, 6, 1], [1, "cs", 2, 38, 7, 1], [1, "cs", 2, 37, 7, 1], [1, "cs", 2, 37, 8, 1], [1, "cs", 2, 37, 10, 1], [1, "cs", 2, 38, 10, 1], [1, "cs", 0, 38, 11, 1], [1, "cs", 0, 38, 17, 1], [1, "cs", 1, 37, 18, 1], [1, "cs", 0, 38, 19, 1], [1, "cs", 2, 37, 11, 1], [1, "cs", 2, 37, 16, 1], [1, "cs", 2, 37, 17, 1], [1, "cs", 2, 38, 18, 1], [1, "cs", 2, 37, 19, 1], [1, "cs", 3, 38, 16, 1], [1, "cs", 0, 37, 21, 1], [1, "cs", 0, 38, 22, 1], [1, "cs", 0, 38, 24, 1], [1, "cs", 2, 37, 20, 1], [1, "cs", 2, 38, 20, 1], [1, "cs", 2, 38, 21, 1], [1, "cs", 1, 37, 23, 1], [1, "cs", 3, 37, 22, 1], [1, "cs", 3, 38, 23, 1], [1, "cs", 2, 37, 24, 1], [1, "cs", 0, 38, 30, 1], [1, "cs", 0, 38, 32, 1], [1, "cs", 0, 37, 31, 1], [1, "cs", 1, 38, 34, 1], [1, "cs", 1, 37, 29, 1], [1, "cs", 2, 38, 29, 1], [1, "cs", 2, 37, 30, 1], [1, "cs", 2, 38, 31, 1], [1, "cs", 2, 37, 32, 1], [1, "cs", 3, 38, 33, 1], [1, "cs", 3, 38, 35, 1], [1, "cs", 2, 37, 33, 1], [1, "cs", 2, 36, 8, 1], [1, "cs", 0, 36, 11, 1], [1, "cs", 0, 35, 9, 1], [1, "cs", 2, 36, 9, 1], [1, "cs", 2, 36, 10, 1], [1, "cs", 2, 35, 10, 1], [1, "cs", 1, 33, 8, 1], [1, "cs", 3, 34, 9, 1], [1, "cs", 3, 35, 8, 1], [1, "cs", 2, 34, 8, 1], [1, "cs", 0, 36, 7, 1], [1, "cs", 1, 34, 7, 1], [1, "cs", 2, 35, 7, 1], [1, "cs", 2, 35, 6, 1], [1, "cs", 2, 36, 6, 1], [1, "cs", 2, 68, 9, 1], [1, "cs", 2, 66, 10, 1], [1, "cs", 3, 66, 9, 1], [1, "cs", 0, 67, 9, 1], [1, "cs", 0, 66, 8, 1], [1, "cs", 2, 67, 8, 1], [1, "cs", 1, 68, 8, 1], [1, "cs", 1, 66, 11, 1], [1, "cs", 2, 67, 10, 1], [1, "cs", 0, 66, 6, 1], [1, "cs", 2, 66, 7, 1], [1, "cs", 2, 67, 7, 1], [1, "cs", 2, 69, 8, 1], [1, "cs", 2, 63, 32, 1], [1, "cs", 2, 62, 34, 1], [1, "cs", 2, 60, 35, 1], [1, "cs", 3, 59, 35, 1], [1, "cs", 0, 61, 35, 1], [1, "cs", 0, 63, 34, 1], [1, "cs", 2, 63, 33, 1], [1, "cs", 2, 63, 35, 1], [1, "cs", 2, 62, 35, 1], [1, "cs", 2, 58, 36, 1], [1, "cs", 1, 59, 36, 1], [1, "cs", 1, 62, 36, 1], [1, "cs", 2, 60, 36, 1], [1, "cs", 2, 61, 34, 1], [1, "cs", 3, 62, 33, 1], [1, "cs", 3, 63, 36, 1], [1, "cs", 3, 61, 36, 1], [1, "cs", 0, 42, 36, 1], [1, "cs", 1, 39, 36, 1], [1, "cs", 2, 41, 36, 1], [1, "cs", 3, 39, 35, 1], [1, "cs", 3, 40, 36, 1], [1, "cs", 3, 43, 36, 1], [1, "cs", 1, 40, 35, 1], [1, "cs", 2, 41, 35, 1], [1, "cs", 2, 40, 34, 1], [1, "cs", 2, 39, 34, 1], [1, "cs", 2, 39, 33, 1], [1, "cs", 2, 39, 32, 1], [1, "cs", 0, 40, 33, 1], [1, "cs", 2, 41, 34, 1], [1, "cs", 1, 44, 36, 1], [1, "cs", 3, 43, 35, 1], [1, "cs", 2, 42, 35, 1], [1, "cs", 0, 37, 34, 1], [1, "cs", 3, 59, 30, 1], [1, "cs", 0, 60, 29, 1], [1, "cs", 2, 60, 28, 1], [1, "cs", 3, 60, 27, 1], [1, "cs", 0, 60, 26, 1], [1, "cs", 2, 54, 25, 1], [1, "cs", 2, 48, 25, 1], [1, "cs", 2, 42, 26, 1], [1, "cs", 0, 55, 25, 1], [1, "cs", 2, 59, 26, 1], [1, "cs", 0, 43, 26, 1], [1, "cs", 1, 42, 27, 1], [1, "cs", 2, 42, 28, 1], [1, "cs", 2, 43, 30, 1], [1, "cs", 0, 42, 29, 1], [1, "cs", 0, 54, 24, 1], [1, "cs", 0, 48, 24, 1], [1, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, 1], [1, "cs", 2, 63, 22, 1], [1, "cs", 2, 63, 21, 1], [1, "cs", 2, 39, 21, 1], [1, "cs", 3, 57, 18, 1], [1, "cs", 2, 56, 18, 1], [1, "cs", 3, 51, 21, 1], [1, "cs", 0, 51, 20, 1], [1, "cs", 2, 51, 19, 1], [1, "cs", 3, 51, 18, 1], [1, "cs", 2, 63, 16, 1], [1, "cs", 2, 63, 10, 1], [1, "cs", 2, 56, 13, 1], [1, "cs", 3, 57, 13, 1], [1, "cs", 1, 45, 18, 1], [1, "cs", 2, 47, 18, 1], [1, "cs", 2, 46, 18, 1], [1, "cs", 0, 46, 13, 1], [1, "cs", 2, 45, 13, 1], [1, "cs", 2, 39, 10, 1], [1, "cs", 2, 39, 16, 1], [1, "cs", 2, 47, 17, 1], [1, "a", 0, 51, 15, 1], [1, "a", 1, 53, 14, 1], [1, "a", 1, 49, 14, 1], [1, "de", 8, 55, 15, 0], [1, "de", 9, 48, 28, 0], [1, "de", 10, 58, 26, 0], [1, "de", 11, 59, 29, 0], [1, "de", 11, 55, 34, 0], [1, "de", 10, 48, 33, 0], [1, "de", 9, 41, 32, 0], [1, "de", 9, 56, 24, 0], [1, "de", 9, 62, 16, 0], [1, "de", 9, 45, 11, 0], [1, "de", 9, 44, 17, 0], [1, "de", 10, 44, 13, 0], [1, "de", 10, 58, 13, 0], [1, "de", 10, 63, 31, 0], [1, "de", 8, 60, 30, 0], [1, "de", 8, 43, 26, 0], [1, "de", 10, 43, 29, 0], [1, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, 0], [1, "de", 9, 53, 19, 0], [1, "de", 11, 49, 19, 0], [1, "de", 10, 39, 26, 0], [1, "de", 9, 46, 24, 0], [1, "de", 9, 62, 10, 0], [1, "de", 8, 40, 14, 0], [1, "de", 32, 55, 35, 0], [1, "de", 32, 60, 33, 0], [1, "de", 32, 63, 28, 0], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, 17, 0], [1, "de", 32, 63, 13, 0], [1, "de", 32, 59, 10, 0], [1, "de", 32, 56, 12, 0], [1, "de", 32, 52, 17, 0], [1, "de", 32, 51, 14, 0], [1, "de", 32, 39, 12, 0], [1, "de", 32, 39, 18, 0], [1, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, 0], [1, "de", 32, 50, 29, 0], [1, "de", 32, 43, 34, 0], [1, "de", 32, 47, 34, 0], [1, "de", 31, 54, 33, 0], [1, "de", 31, 59, 24, 0], [1, "de", 31, 63, 19, 0], [1, "de", 31, 47, 15, 0], [1, "de", 31, 43, 17, 0], [1, "de", 31, 39, 27, 0], [1, "de", 31, 48, 27, 0], [1, "de", 31, 57, 27, 0], [1, "de", 32, 44, 27, 0], [1, "d", 0, 12, 13, 1], [1, "d", 0, 89, 13, 1], [1, "d", 1, 91, 21, 1], [1, "d", 1, 10, 22, 1], [1, "f", 2, 89, 18, 1], [1, "f", 0, 88, 19, 1], [1, "g", 1, 85, 22, 1], [1, "s", 1, 90, 29, 1], [1, "s", 1, 92, 15, 1], [1, "s", 0, 91, 31, 1], [1, "s", 2, 90, 38, 1], [1, "s", 0, 91, 42, 1], [1, "s", 0, 90, 49, 1], [1, "f", 1, 86, 43, 1], [1, "f", 0, 81, 45, 1], [1, "f", 2, 66, 44, 1], [1, "f", 2, 55, 49, 1], [1, "f", 1, 54, 50, 1], [1, "f", 2, 43, 45, 1], [1, "f", 2, 31, 48, 1], [1, "f", 1, 27, 39, 1], [1, "f", 1, 80, 46, 1], [1, "f", 1, 69, 48, 1], [1, "g", 0, 80, 40, 1], [1, "g", 2, 81, 40, 1], [1, "s", 2, 77, 39, 1], [1, "s", 0, 68, 43, 1], [1, "s", 2, 57, 41, 1], [1, "s", 1, 56, 42, 1], [1, "s", 1, 40, 41, 1], [1, "s", 2, 48, 48, 1], [1, "f", 2, 17, 12, 1], [1, "f", 0, 13, 31, 1], [1, "f", 1, 14, 32, 1], [1, "s", 0, 15, 27, 1], [1, "s", 0, 13, 39, 1], [1, "f", 2, 11, 17, 1], [1, "f", 1, 12, 18, 1], [1, "g", 2, 12, 25, 1], [1, "f", 0, 16, 45, 1], [1, "f", 1, 17, 46, 1], [1, "s", 1, 74, 48, 1], [1, "s", 1, 20, 47, 1], [1, "g", 0, 58, 59, 1], [1, "g", 0, 46, 72, 1], [1, "g", 0, 69, 79, 1], [1, "g", 0, 72, 74, 1], [1, "g", 0, 26, 88, 1], [1, "g", 0, 20, 74, 1], [1, "g", 0, 28, 67, 1], [1, "g", 0, 49, 86, 1], [1, "g", 0, 77, 90, 1], [1, "g", 0, 87, 72, 1], [1, "g", 0, 14, 85, 1], [1, "g", 1, 85, 97, 1], [1, "g", 1, 68, 104, 1], [1, "g", 1, 63, 91, 1], [1, "g", 1, 39, 90, 1], [1, "g", 1, 34, 99, 1], [1, "g", 1, 17, 103, 1], [1, "g", 2, 77, 60, 1], [1, "g", 2, 19, 56, 1], [1, "g", 2, 39, 60, 1], [1, "g", 2, 87, 57, 1], [1, "f", 0, 9, 62, 1], [1, "f", 0, 12, 81, 1], [1, "f", 0, 26, 59, 1], [1, "f", 0, 35, 53, 1], [1, "f", 0, 44, 58, 1], [1, "f", 0, 88, 62, 1], [1, "f", 0, 91, 82, 1], [1, "f", 0, 84, 85, 1], [1, "f", 0, 79, 69, 1], [1, "f", 0, 64, 71, 1], [1, "f", 0, 62, 83, 1], [1, "f", 0, 34, 81, 1], [1, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, 1], [1, "f", 1, 81, 70, 1], [1, "f", 1, 91, 72, 1], [1, "f", 1, 8, 91, 1], [1, "f", 1, 14, 81, 1], [1, "f", 1, 29, 79, 1], [1, "f", 1, 13, 65, 1], [1, "f", 1, 46, 97, 1], [1, "f", 1, 43, 73, 1], [1, "f", 1, 60, 69, 1], [1, "f", 1, 70, 96, 1], [1, "f", 1, 58, 84, 1], [1, "s", 1, 56, 76, 1], [1, "s", 1, 85, 74, 1], [1, "s", 0, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", 0, 60, 61, 1], [1, "s", 0, 20, 66, 1], [1, "s", 0, 47, 83, 1], [1, "s", 0, 29, 86, 1], [1, "s", 0, 78, 92, 1], [1, "s", 0, 62, 102, 1], [1, "s", 0, 18, 95, 1], [1, "s", 2, 64, 101, 1], [1, "s", 2, 78, 84, 1], [1, "s", 2, 49, 83, 1], [1, "s", 2, 15, 76, 1], [1, "s", 2, 21, 84, 1], [1, "f", 1, 26, 94, 1], [1, "f", 2, 23, 96, 1], [1, "f", 2, 25, 72, 1], [1, "f", 2, 85, 77, 1], [1, "f", 2, 79, 95, 1], [1, "f", 2, 51, 65, 1], [1, "f", 2, 69, 60, 1], [1, "f", 1, 25, 105, 1], [1, "s", 1, 18, 68, 1], [1, "s", 0, 55, 76, 1], [1, "s", 0, 74, 59, 1], [1, "f", 1, 46, 142, 1], [1, "f", 1, 19, 140, 1], [1, "f", 1, 77, 137, 1], [1, "f", 0, 75, 137, 1], [1, "f", 0, 55, 138, 1], [1, "f", 0, 33, 127, 1], [1, "f", 0, 76, 121, 1], [1, "f", 0, 55, 121, 1], [1, "f", 0, 13, 123, 1], [1, "f", 0, 18, 141, 1], [1, "f", 0, 40, 137, 1], [1, "f", 2, 76, 142, 1], [1, "f", 2, 57, 140, 1], [1, "f", 2, 39, 138, 1], [1, "f", 2, 16, 143, 1], [1, "f", 2, 29, 131, 1], [1, "f", 0, 70, 150, 1], [1, "f", 0, 28, 146, 1], [1, "f", 0, 12, 132, 1], [1, "f", 0, 90, 129, 1], [1, "f", 1, 87, 131, 1], [1, "f", 0, 91, 143, 1], [1, "f", 2, 87, 145, 1], [1, "f", 1, 89, 141, 1], [1, "f", 1, 63, 130, 1], [1, "f", 1, 75, 122, 1], [1, "f", 1, 52, 124, 1], [1, "f", 1, 34, 127, 1], [1, "f", 1, 14, 123, 1], [1, "f", 1, 24, 122, 1], [1, "f", 0, 83, 108, 1], [1, "f", 0, 89, 118, 1], [1, "f", 0, 56, 107, 1], [1, "f", 0, 38, 113, 1], [1, "f", 0, 16, 110, 1], [1, "f", 1, 80, 105, 1], [1, "f", 1, 82, 109, 1], [1, "f", 1, 87, 118, 1], [1, "f", 1, 59, 110, 1], [1, "f", 1, 29, 111, 1], [1, "f", 2, 28, 112, 1], [1, "f", 2, 70, 112, 1], [1, "f", 2, 42, 111, 1], [1, "s", 0, 68, 157, 1], [1, "s", 0, 81, 158, 1], [1, "s", 0, 25, 172, 1], [1, "s", 0, 22, 161, 1], [1, "s", 0, 35, 152, 1], [1, "s", 0, 66, 144, 1], [1, "s", 0, 87, 145, 1], [1, "s", 0, 86, 145, 1], [1, "s", 0, 84, 135, 1], [1, "s", 0, 69, 133, 1], [1, "s", 0, 84, 122, 1], [1, "s", 0, 68, 121, 1], [1, "s", 0, 48, 124, 1], [1, "s", 0, 26, 129, 1], [1, "s", 0, 9, 127, 1], [1, "s", 0, 11, 144, 1], [1, "s", 0, 9, 109, 1], [1, "s", 0, 35, 101, 1], [1, "s", 0, 47, 109, 1], [1, "s", 0, 58, 111, 1], [1, "s", 0, 84, 110, 1], [1, "s", 0, 28, 114, 1], [1, "s", 1, 30, 116, 1], [1, "s", 1, 46, 112, 1], [1, "s", 1, 81, 111, 1], [1, "s", 1, 70, 123, 1], [1, "s", 1, 49, 127, 1], [1, "s", 1, 66, 134, 1], [1, "s", 1, 67, 144, 1], [1, "s", 1, 38, 152, 1], [1, "s", 1, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, 1], [1, "s", 1, 12, 125, 1], [1, "s", 1, 65, 158, 1], [1, "s", 1, 83, 167, 1], [1, "s", 1, 65, 167, 1], [1, "s", 1, 47, 164, 1], [1, "s", 1, 56, 168, 1], [1, "s", 2, 54, 169, 1], [1, "s", 2, 88, 170, 1], [1, "s", 2, 91, 162, 1], [1, "s", 2, 79, 149, 1], [1, "s", 2, 75, 144, 1], [1, "s", 2, 57, 150, 1], [1, "s", 2, 47, 143, 1], [1, "s", 2, 31, 145, 1], [1, "s", 2, 36, 138, 1], [1, "s", 2, 10, 163, 1], [1, "s", 2, 22, 142, 1], [1, "g", 2, 78, 132, 1], [1, "g", 1, 48, 135, 1], [1, "g", 2, 16, 136, 1], [1, "g", 0, 62, 92, 1], [1, "g", 2, 70, 80, 1], [1, "g", 2, 15, 86, 1], [1, "g", 2, 47, 75, 1], [1, "g", 2, 36, 89, 1], [1, "g", 2, 80, 90, 1], [1, "f", 1, 39, 118, 1], [1, "d", 2, 84, 54, 1], [1, "d", 2, 16, 54, 1], [1, "de", 7, 13, 13, 0], [1, "de", 5, 16, 28, 0], [1, "de", 5, 9, 25, 0], [1, "de", 5, 34, 41, 0], [1, "de", 4, 28, 40, 0], [1, "de", 6, 31, 47, 0], [1, "de", 6, 12, 39, 0], [1, "de", 4, 16, 47, 0], [1, "de", 4, 7, 46, 0], [1, "de", 6, 7, 33, 0], [1, "de", 6, 40, 42, 0], [1, "de", 7, 20, 48, 0], [1, "de", 7, 29, 59, 0], [1, "de", 6, 27, 58, 0], [1, "de", 6, 15, 54, 0], [1, "de", 5, 12, 66, 0], [1, "de", 5, 37, 53, 0], [1, "de", 4, 10, 63, 0], [1, "de", 7, 49, 48, 0], [1, "de", 7, 37, 63, 0], [1, "de", 6, 33, 68, 0], [1, "de", 6, 56, 52, 0], [1, "de", 5, 59, 58, 0], [1, "de", 6, 48, 58, 0], [1, "de", 4, 53, 63, 0], [1, "de", 4, 67, 44, 0], [1, "de", 5, 70, 49, 0], [1, "de", 5, 82, 55, 0], [1, "de", 5, 79, 41, 0], [1, "de", 5, 91, 29, 0], [1, "de", 7, 91, 43, 0], [1, "de", 6, 85, 44, 0], [1, "de", 6, 74, 60, 0], [1, "de", 6, 90, 8, 0], [1, "de", 5, 91, 15, 0], [1, "de", 4, 87, 20, 0], [1, "de", 7, 93, 11, 0], [1, "de", 6, 91, 21, 0], [1, "de", 6, 85, 35, 0], [1, "de", 5, 93, 58, 0], [1, "de", 5, 87, 63, 0], [1, "de", 7, 77, 62, 0], [1, "de", 6, 68, 61, 0], [1, "de", 5, 90, 73, 0], [1, "de", 4, 87, 71, 0], [1, "de", 7, 80, 71, 0], [1, "de", 7, 83, 77, 0], [1, "de", 7, 89, 83, 0], [1, "de", 4, 71, 80, 0], [1, "de", 4, 71, 70, 0], [1, "de", 5, 63, 72, 0], [1, "de", 4, 54, 75, 0], [1, "de", 5, 44, 83, 0], [1, "de", 5, 42, 74, 0], [1, "de", 5, 15, 81, 0], [1, "de", 4, 29, 80, 0], [1, "de", 4, 37, 90, 0], [1, "de", 4, 7, 75, 0], [1, "de", 6, 22, 74, 0], [1, "de", 6, 43, 95, 0], [1, "de", 6, 57, 85, 0], [1, "de", 6, 19, 94, 0], [1, "de", 6, 9, 92, 0], [1, "de", 5, 26, 89, 0], [1, "de", 5, 31, 112, 0], [1, "de", 5, 54, 108, 0], [1, "de", 5, 55, 95, 0], [1, "de", 5, 35, 104, 0], [1, "de", 5, 13, 110, 0], [1, "de", 7, 27, 107, 0], [1, "de", 7, 47, 99, 0], [1, "de", 7, 11, 104, 0], [1, "de", 7, 9, 111, 0], [1, "de", 7, 40, 114, 0], [1, "de", 7, 28, 117, 0], [1, "de", 7, 47, 113, 0], [1, "de", 7, 63, 104, 0], [1, "de", 4, 64, 92, 0], [1, "de", 6, 86, 97, 0], [1, "de", 5, 76, 91, 0], [1, "de", 5, 85, 86, 0], [1, "de", 6, 78, 83, 0], [1, "de", 6, 71, 97, 0], [1, "de", 4, 69, 105, 0], [1, "de", 4, 79, 104, 0], [1, "de", 4, 86, 109, 0], [1, "de", 4, 86, 118, 0], [1, "de", 5, 70, 113, 0], [1, "de", 6, 69, 121, 0], [1, "de", 6, 76, 122, 0], [1, "de", 7, 87, 130, 0], [1, "de", 4, 84, 123, 0], [1, "de", 4, 57, 121, 0], [1, "de", 5, 53, 125, 0], [1, "de", 5, 62, 131, 0], [1, "de", 6, 67, 143, 0], [1, "de", 5, 77, 143, 0], [1, "de", 5, 85, 136, 0], [1, "de", 6, 87, 147, 0], [1, "de", 6, 92, 140, 0], [1, "de", 4, 93, 127, 0], [1, "de", 5, 93, 106, 0], [1, "de", 5, 45, 144, 0], [1, "de", 4, 41, 139, 0], [1, "de", 4, 54, 138, 0], [1, "de", 6, 29, 145, 0], [1, "de", 6, 29, 132, 0], [1, "de", 6, 35, 127, 0], [1, "de", 6, 64, 142, 0], [1, "de", 5, 23, 131, 0], [1, "de", 5, 9, 134, 0], [1, "de", 6, 11, 121, 0], [1, "de", 4, 26, 121, 0], [1, "de", 35, 58, 150, 0], [1, "de", 33, 48, 156, 0], [1, "de", 33, 25, 158, 0], [1, "de", 33, 36, 154, 0], [1, "de", 34, 9, 154, 0], [1, "de", 34, 13, 148, 0], [1, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [1, "de", 34, 47, 144, 0], [1, "de", 34, 68, 142, 0], [1, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, 0], [1, "de", 36, 90, 141, 0], [1, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, 0], [1, "de", 33, 82, 122, 0], [1, "de", 35, 56, 122, 0], [1, "de", 35, 40, 119, 0], [1, "de", 35, 17, 112, 0], [1, "de", 35, 37, 102, 0], [1, "de", 33, 18, 97, 0], [1, "de", 34, 10, 83, 0], [1, "de", 33, 19, 73, 0], [1, "de", 33, 10, 60, 0], [1, "de", 35, 24, 60, 0], [1, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, 8, 32, 0], [1, "de", 33, 9, 24, 0], [1, "de", 35, 35, 27, 0], [1, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, 0], [1, "de", 35, 53, 39, 0], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, 0], [1, "de", 33, 68, 112, 0], [1, "de", 33, 49, 109, 0], [1, "de", 33, 46, 95, 0], [1, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, 0], [1, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, 0], [1, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, 0], [1, "de", 35, 93, 56, 0], [1, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, 0], [1, "de", 34, 92, 9, 0], [1, "de", 35, 75, 39, 0], [1, "de", 35, 67, 42, 0], [1, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, 0], [1, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, 0], [1, "de", 33, 46, 85, 0], [1, "de", 33, 64, 84, 0], [1, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, 0], [1, "de", 33, 31, 69, 0], [1, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [1, "de", 36, 29, 34, 0], [1, "de", 35, 20, 55, 0], [1, "de", 35, 14, 52, 0], [1, "s", 2, 12, 171, 1], [1, "r", 20, 188, 0], [1, "r", 21, 188, 0], [1, "r", 22, 188, 0], [1, "r", 23, 188, 0], [1, "r", 24, 188, 0], [1, "r", 25, 189, 0], [1, "r", 24, 189, 0], [1, "r", 23, 189, 0], [1, "r", 22, 189, 0], [1, "r", 21, 189, 0], [1, "r", 20, 189, 0], [1, "r", 19, 189, 0], [1, "r", 19, 190, 0], [1, "r", 19, 191, 0], [1, "r", 20, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [1, "r", 24, 191, 0], [1, "r", 23, 191, 0], [1, "r", 25, 191, 0], [1, "r", 25, 190, 0], [1, "r", 24, 190, 0], [1, "r", 23, 190, 0], [1, "r", 22, 190, 0], [1, "r", 21, 190, 0], [1, "r", 20, 190, 0], [1, "r", 26, 190, 0], [1, "r", 26, 191, 0], [1, "r", 24, 193, 0], [1, "r", 23, 193, 0], [1, "r", 22, 193, 0], [1, "r", 20, 192, 0], [1, "r", 21, 192, 0], [1, "r", 22, 192, 0], [1, "r", 23, 192, 0], [1, "r", 24, 192, 0], [1, "r", 25, 192, 0], [1, "r", 53, 199, 0], [1, "r", 52, 200, 0], [1, "r", 54, 199, 0], [1, "r", 55, 199, 0], [1, "r", 55, 200, 0], [1, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [1, "r", 56, 200, 0], [1, "r", 55, 201, 0], [1, "r", 54, 201, 0], [1, "r", 55, 202, 0], [1, "r", 54, 203, 0], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [1, "r", 53, 202, 0], [1, "r", 52, 202, 0], [1, "r", 53, 201, 0], [1, "r", 52, 201, 0], [1, "r", 51, 201, 0], [1, "r", 51, 202, 0], [1, "r", 50, 202, 0], [1, "r", 50, 201, 0], [1, "r", 56, 201, 0], [1, "r", 53, 203, 0], [1, "r", 52, 203, 0], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [1, "r", 53, 204, 0], [1, "r", 52, 204, 0], [1, "r", 55, 204, 0], [1, "r", 56, 203, 0], [1, "r", 56, 244, 0], [1, "r", 54, 246, 0], [1, "r", 50, 248, 0], [1, "r", 48, 248, 0], [1, "r", 43, 248, 0], [1, "r", 45, 238, 0], [1, "r", 44, 238, 0], [1, "r", 43, 238, 0], [1, "r", 46, 238, 0], [1, "r", 47, 238, 0], [1, "r", 48, 238, 0], [1, "r", 49, 238, 0], [1, "r", 50, 238, 0], [1, "r", 51, 238, 0], [1, "r", 52, 238, 0], [1, "r", 53, 238, 0], [1, "r", 54, 239, 0], [1, "r", 53, 240, 0], [1, "r", 53, 239, 0], [1, "r", 52, 239, 0], [1, "r", 51, 239, 0], [1, "r", 50, 239, 0], [1, "r", 49, 239, 0], [1, "r", 48, 239, 0], [1, "r", 47, 239, 0], [1, "r", 46, 239, 0], [1, "r", 45, 239, 0], [1, "r", 44, 239, 0], [1, "r", 43, 239, 0], [1, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [1, "r", 43, 240, 0], [1, "r", 44, 240, 0], [1, "r", 45, 240, 0], [1, "r", 46, 240, 0], [1, "r", 47, 240, 0], [1, "r", 48, 240, 0], [1, "r", 49, 240, 0], [1, "r", 50, 240, 0], [1, "r", 51, 240, 0], [1, "r", 52, 240, 0], [1, "r", 54, 240, 0], [1, "r", 55, 240, 0], [1, "r", 56, 241, 0], [1, "r", 55, 241, 0], [1, "r", 54, 241, 0], [1, "r", 53, 241, 0], [1, "r", 52, 241, 0], [1, "r", 51, 241, 0], [1, "r", 49, 241, 0], [1, "r", 50, 241, 0], [1, "r", 48, 241, 0], [1, "r", 47, 241, 0], [1, "r", 46, 241, 0], [1, "r", 45, 241, 0], [1, "r", 44, 241, 0], [1, "r", 43, 241, 0], [1, "r", 42, 241, 0], [1, "r", 41, 241, 0], [1, "r", 40, 242, 0], [1, "r", 41, 242, 0], [1, "r", 42, 242, 0], [1, "r", 43, 242, 0], [1, "r", 44, 242, 0], [1, "r", 45, 242, 0], [1, "r", 46, 242, 0], [1, "r", 47, 242, 0], [1, "r", 48, 242, 0], [1, "r", 49, 242, 0], [1, "r", 50, 242, 0], [1, "r", 51, 242, 0], [1, "r", 52, 242, 0], [1, "r", 53, 242, 0], [1, "r", 54, 242, 0], [1, "r", 55, 242, 0], [1, "r", 56, 242, 0], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [1, "r", 54, 243, 0], [1, "r", 53, 243, 0], [1, "r", 52, 243, 0], [1, "r", 51, 243, 0], [1, "r", 50, 243, 0], [1, "r", 49, 243, 0], [1, "r", 48, 243, 0], [1, "r", 47, 243, 0], [1, "r", 46, 243, 0], [1, "r", 45, 243, 0], [1, "r", 44, 243, 0], [1, "r", 43, 243, 0], [1, "r", 42, 243, 0], [1, "r", 41, 243, 0], [1, "r", 40, 243, 0], [1, "r", 40, 244, 0], [1, "r", 41, 244, 0], [1, "r", 43, 244, 0], [1, "r", 44, 244, 0], [1, "r", 45, 244, 0], [1, "r", 46, 244, 0], [1, "r", 47, 244, 0], [1, "r", 48, 244, 0], [1, "r", 49, 244, 0], [1, "r", 50, 244, 0], [1, "r", 51, 244, 0], [1, "r", 52, 244, 0], [1, "r", 53, 244, 0], [1, "r", 54, 244, 0], [1, "r", 55, 244, 0], [1, "r", 42, 244, 0], [1, "r", 40, 245, 0], [1, "r", 41, 245, 0], [1, "r", 42, 245, 0], [1, "r", 43, 245, 0], [1, "r", 44, 245, 0], [1, "r", 45, 245, 0], [1, "r", 46, 245, 0], [1, "r", 47, 245, 0], [1, "r", 48, 245, 0], [1, "r", 49, 245, 0], [1, "r", 50, 245, 0], [1, "r", 51, 245, 0], [1, "r", 52, 246, 0], [1, "r", 52, 245, 0], [1, "r", 53, 245, 0], [1, "r", 54, 245, 0], [1, "r", 55, 245, 0], [1, "r", 53, 246, 0], [1, "r", 51, 246, 0], [1, "r", 50, 246, 0], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [1, "r", 47, 246, 0], [1, "r", 45, 246, 0], [1, "r", 46, 246, 0], [1, "r", 44, 246, 0], [1, "r", 43, 246, 0], [1, "r", 42, 246, 0], [1, "r", 41, 246, 0], [1, "r", 42, 247, 0], [1, "r", 43, 247, 0], [1, "r", 44, 247, 0], [1, "r", 45, 247, 0], [1, "r", 46, 247, 0], [1, "r", 47, 247, 0], [1, "r", 48, 247, 0], [1, "r", 50, 247, 0], [1, "r", 51, 247, 0], [1, "r", 52, 247, 0], [1, "r", 53, 247, 0], [1, "r", 54, 247, 0], [1, "r", 49, 247, 0], [1, "r", 49, 248, 0], [1, "r", 47, 248, 0], [1, "r", 46, 248, 0], [1, "r", 45, 248, 0], [1, "r", 51, 248, 0], [1, "r", 55, 246, 1], [1, "r", 55, 247, 1], [1, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, 1], [1, "r", 93, 270, 1], [1, "r", 94, 270, 1], [1, "r", 95, 271, 1], [1, "r", 94, 271, 1], [1, "r", 93, 271, 1], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, 1], [1, "r", 92, 281, 1], [1, "r", 92, 280, 1], [1, "r", 91, 280, 1], [1, "r", 90, 279, 1], [1, "r", 95, 275, 1], [1, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [1, "r", 94, 274, 1], [1, "r", 94, 273, 1], [1, "r", 94, 272, 1], [1, "r", 93, 272, 1], [1, "r", 93, 273, 1], [1, "r", 93, 274, 1], [1, "r", 92, 273, 1], [1, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [1, "r", 92, 269, 1], [1, "r", 90, 269, 1], [1, "r", 91, 269, 1], [1, "r", 91, 271, 1], [1, "r", 91, 270, 1], [1, "r", 95, 278, 1], [1, "r", 95, 277, 1], [1, "r", 95, 276, 1], [1, "r", 94, 276, 1], [1, "r", 94, 275, 1], [1, "r", 93, 275, 1], [1, "r", 92, 274, 1], [1, "r", 92, 275, 1], [1, "r", 91, 275, 1], [1, "r", 90, 275, 1], [1, "r", 89, 274, 1], [1, "r", 90, 274, 1], [1, "r", 89, 275, 1], [1, "r", 88, 274, 1], [1, "r", 88, 273, 1], [1, "r", 86, 272, 1], [1, "r", 85, 271, 1], [1, "r", 86, 271, 1], [1, "r", 87, 272, 1], [1, "r", 55, 248, 1], [1, "r", 54, 248, 1], [1, "r", 56, 249, 1], [1, "r", 55, 249, 1], [1, "r", 55, 250, 1], [1, "r", 56, 250, 1], [1, "r", 57, 250, 1], [1, "r", 57, 249, 1], [1, "r", 59, 250, 1], [1, "r", 58, 250, 1], [1, "r", 60, 250, 1], [1, "r", 61, 251, 1], [1, "r", 60, 251, 1], [1, "r", 62, 251, 1], [1, "r", 62, 252, 1], [1, "r", 63, 252, 1], [1, "r", 58, 251, 1], [1, "r", 57, 251, 1], [1, "r", 56, 251, 1], [1, "r", 58, 252, 1], [1, "r", 57, 252, 1], [1, "r", 57, 253, 1], [1, "r", 58, 253, 1], [1, "r", 58, 254, 1], [1, "r", 59, 255, 1], [1, "r", 58, 255, 1], [1, "r", 57, 254, 1], [1, "r", 56, 252, 1], [1, "r", 55, 251, 1], [1, "r", 60, 255, 1], [1, "r", 61, 255, 1], [1, "r", 61, 256, 1], [1, "r", 60, 256, 1], [1, "r", 62, 256, 1], [1, "r", 62, 257, 1], [1, "r", 61, 257, 1], [1, "r", 64, 253, 1], [1, "r", 64, 254, 1], [1, "r", 65, 254, 1], [1, "r", 61, 250, 1], [1, "r", 64, 252, 1], [1, "r", 65, 253, 1], [1, "r", 66, 254, 1], [1, "r", 65, 255, 1], [1, "r", 64, 255, 1], [1, "r", 64, 256, 1], [1, "r", 65, 256, 1], [1, "r", 65, 257, 1], [1, "r", 64, 257, 1], [1, "r", 63, 257, 1], [1, "r", 62, 258, 1], [1, "r", 63, 258, 1], [1, "r", 64, 258, 1], [1, "r", 66, 255, 1], [1, "r", 66, 256, 1], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [1, "r", 67, 259, 1], [1, "r", 66, 259, 1], [1, "r", 65, 259, 1], [1, "r", 56, 246, 1], [1, "r", 56, 245, 1], [1, "r", 68, 258, 1], [1, "r", 68, 259, 1], [1, "r", 68, 260, 1], [1, "r", 69, 260, 1], [1, "r", 69, 261, 1], [1, "r", 70, 261, 1], [1, "r", 71, 261, 1], [1, "r", 67, 260, 1], [1, "r", 89, 269, 1], [1, "r", 89, 268, 1], [1, "r", 90, 268, 1], [1, "r", 82, 267, 1], [1, "r", 83, 267, 1], [1, "r", 80, 266, 1], [1, "r", 81, 266, 1], [1, "r", 81, 267, 1], [1, "r", 79, 266, 1], [1, "r", 78, 265, 1], [1, "r", 77, 265, 1], [1, "r", 76, 264, 1], [1, "r", 75, 264, 1], [1, "r", 75, 263, 1], [1, "r", 74, 263, 1], [1, "r", 74, 262, 1], [1, "r", 72, 262, 1], [1, "r", 73, 262, 1], [1, "r", 71, 262, 1], [1, "r", 85, 270, 1], [1, "r", 84, 270, 1], [1, "r", 84, 269, 1], [1, "r", 83, 269, 1], [1, "r", 82, 269, 1], [1, "r", 81, 269, 1], [1, "r", 81, 268, 1], [1, "r", 82, 268, 1], [1, "r", 83, 268, 1], [1, "r", 80, 268, 1], [1, "r", 80, 267, 1], [1, "r", 79, 267, 1], [1, "r", 78, 266, 1], [1, "r", 76, 265, 1], [1, "r", 75, 262, 1], [1, "r", 90, 280, 1], [1, "r", 89, 280, 1], [1, "r", 89, 279, 1], [1, "r", 88, 279, 1], [1, "r", 88, 278, 1], [1, "r", 87, 277, 1], [1, "r", 86, 276, 1], [1, "r", 86, 275, 1], [1, "r", 86, 274, 1], [1, "r", 86, 273, 1], [1, "r", 85, 273, 1], [1, "r", 85, 272, 1], [1, "r", 85, 274, 1], [1, "r", 86, 277, 1], [1, "r", 87, 278, 1], [1, "r", 84, 271, 1], [1, "r", 83, 270, 1], [1, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, 1], [1, "r", 88, 272, 1], [1, "r", 91, 281, 1], [1, "r", 92, 282, 1], [1, "r", 88, 280, 1], [1, "r", 87, 279, 1], [1, "r", 85, 275, 1], [1, "r", 84, 273, 1], [1, "r", 84, 272, 1], [1, "r", 83, 271, 1], [1, "r", 82, 270, 1], [1, "r", 84, 267, 0], [1, "r", 85, 267, 0], [1, "r", 76, 262, 0], [1, "r", 77, 262, 0], [1, "r", 88, 268, 0], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [1, "r", 80, 262, 0], [1, "r", 80, 263, 0], [1, "r", 81, 263, 0], [1, "r", 82, 263, 0], [1, "r", 83, 263, 0], [1, "r", 84, 263, 0], [1, "r", 85, 263, 0], [1, "r", 88, 262, 0], [1, "r", 89, 262, 0], [1, "r", 90, 262, 0], [1, "r", 87, 262, 0], [1, "r", 86, 262, 0], [1, "r", 86, 263, 0], [1, "r", 87, 263, 0], [1, "r", 91, 262, 0], [1, "r", 95, 262, 0], [1, "r", 94, 262, 0], [1, "r", 86, 267, 0], [1, "r", 87, 267, 0], [1, "r", 87, 268, 0], [1, "r", 86, 268, 0], [1, "r", 74, 189, 0], [1, "r", 75, 189, 0], [1, "r", 76, 189, 0], [1, "r", 77, 189, 0], [1, "r", 78, 190, 0], [1, "r", 77, 190, 0], [1, "r", 75, 190, 0], [1, "r", 76, 190, 0], [1, "r", 74, 190, 0], [1, "r", 73, 190, 0], [1, "r", 78, 191, 0], [1, "r", 76, 191, 0], [1, "r", 77, 191, 0], [1, "r", 75, 191, 0], [1, "r", 74, 191, 0], [1, "r", 78, 192, 0], [1, "r", 77, 192, 0], [1, "r", 76, 192, 0], [1, "r", 75, 192, 0], [1, "r", 74, 192, 0], [1, "r", 73, 191, 0], [1, "f", 1, 96, 22, 1], [1, "s", 1, 97, 22, 1], [1, "f", 1, 98, 22, 1], [1, "s", 0, 99, 22, 1], [1, "s", 1, 100, 21, 1], [1, "s", 1, 96, 49, 1], [1, "s", 1, 100, 50, 1], [1, "s", 0, 99, 49, 1], [1, "s", 0, 97, 49, 1], [1, "f", 1, 98, 49, 1], [1, "r", 70, 218, 0], [1, "r", 71, 218, 0], [1, "r", 72, 218, 0], [1, "r", 73, 218, 0], [1, "r", 74, 219, 0], [1, "r", 73, 219, 0], [1, "r", 72, 219, 0], [1, "r", 71, 219, 0], [1, "r", 70, 219, 0], [1, "r", 73, 220, 0], [1, "r", 72, 220, 0], [1, "r", 71, 220, 0], [1, "r", 72, 221, 0], [1, "r", 71, 221, 0], [1, "r", 70, 221, 0], [1, "r", 69, 221, 0], [1, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, 0], [1, "r", 69, 219, 0], [1, "r", 68, 220, 0], [1, "r", 73, 221, 0], [1, "r", 73, 222, 0], [1, "r", 71, 222, 0], [1, "r", 72, 222, 0], [1, "r", 74, 221, 0], [1, "r", 74, 220, 0], [1, "r", 75, 220, 0], [1, "r", 75, 221, 0], [1, "r", 70, 222, 0], [1, "r", 69, 222, 0], [1, "r", 29, 217, 0], [1, "r", 30, 217, 0], [1, "r", 31, 217, 0], [1, "r", 32, 217, 0], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [1, "r", 29, 219, 0], [1, "r", 27, 219, 0], [1, "r", 25, 219, 0], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [1, "r", 26, 218, 0], [1, "r", 27, 218, 0], [1, "r", 28, 218, 0], [1, "r", 29, 218, 0], [1, "r", 30, 218, 0], [1, "r", 28, 217, 0], [1, "r", 26, 217, 0], [1, "r", 27, 217, 0], [1, "r", 28, 216, 0], [1, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, 0], [1, "r", 32, 218, 0], [1, "r", 31, 216, 0], [1, "r", 31, 221, 0], [1, "r", 31, 220, 0], [1, "r", 30, 220, 0], [1, "r", 29, 220, 0], [1, "r", 28, 220, 0], [1, "r", 27, 220, 0], [1, "r", 26, 220, 0], [1, "r", 25, 218, 0], [1, "r", 27, 221, 0], [1, "r", 28, 221, 0], [1, "r", 29, 221, 0], [1, "r", 30, 221, 0], [1, "r", 32, 220, 0], [1, "r", 32, 219, 0], [1, "r", 33, 218, 0], [1, "r", 33, 219, 0], [1, "r", 75, 238, 0], [1, "r", 76, 238, 0], [1, "r", 77, 239, 0], [1, "r", 76, 239, 0], [1, "r", 75, 239, 0], [1, "r", 74, 239, 0], [1, "r", 76, 240, 0], [1, "r", 77, 240, 0], [1, "r", 78, 240, 0], [1, "r", 77, 241, 0], [1, "r", 76, 241, 0], [1, "r", 75, 241, 0], [1, "r", 75, 240, 0], [1, "r", 74, 240, 0], [1, "r", 78, 239, 0], [1, "r", 77, 238, 0], [1, "r", 18, 253, 0], [1, "r", 19, 252, 0], [1, "r", 20, 252, 0], [1, "r", 21, 253, 0], [1, "r", 23, 254, 0], [1, "r", 20, 254, 0], [1, "r", 19, 254, 0], [1, "r", 22, 254, 0], [1, "r", 18, 254, 0], [1, "r", 19, 253, 0], [1, "r", 20, 253, 0], [1, "r", 21, 254, 0], [1, "r", 22, 253, 0], [1, "r", 21, 255, 0], [1, "r", 20, 255, 0], [1, "r", 19, 255, 0], [1, "r", 18, 255, 0], [1, "r", 17, 255, 0], [1, "r", 17, 254, 0], [1, "r", 22, 255, 0], [1, "r", 19, 256, 0], [1, "r", 20, 256, 0], [1, "r", 21, 256, 0], [1, "r", 39, 270, 0], [1, "r", 40, 270, 0], [1, "r", 41, 270, 0], [1, "r", 43, 270, 0], [1, "r", 44, 270, 0], [1, "r", 46, 270, 0], [1, "r", 42, 270, 0], [1, "r", 45, 270, 0], [1, "r", 44, 269, 0], [1, "r", 43, 269, 0], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [1, "r", 41, 269, 0], [1, "r", 45, 271, 0], [1, "r", 44, 271, 0], [1, "r", 43, 271, 0], [1, "r", 42, 271, 0], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [1, "r", 46, 271, 0], [1, "r", 45, 272, 0], [1, "r", 44, 272, 0], [1, "r", 43, 272, 0], [1, "r", 42, 272, 0], [1, "r", 19, 284, 0], [1, "r", 20, 284, 0], [1, "r", 21, 285, 0], [1, "r", 22, 285, 0], [1, "r", 23, 286, 0], [1, "r", 22, 288, 0], [1, "r", 20, 288, 0], [1, "r", 18, 288, 0], [1, "r", 17, 287, 0], [1, "r", 16, 287, 0], [1, "r", 16, 286, 0], [1, "r", 17, 286, 0], [1, "r", 18, 286, 0], [1, "r", 19, 286, 0], [1, "r", 20, 286, 0], [1, "r", 21, 286, 0], [1, "r", 22, 286, 0], [1, "r", 20, 285, 0], [1, "r", 19, 285, 0], [1, "r", 18, 285, 0], [1, "r", 17, 285, 0], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [1, "r", 20, 287, 0], [1, "r", 21, 287, 0], [1, "r", 22, 287, 0], [1, "r", 23, 287, 0], [1, "r", 21, 288, 0], [1, "r", 19, 288, 0], [1, "r", 17, 288, 0], [1, "r", 19, 289, 0], [1, "r", 21, 289, 0], [1, "r", 22, 289, 0], [1, "r", 20, 289, 0], [1, "r", 23, 288, 0], [1, "r", 24, 287, 0], [1, "r", 24, 286, 0], [1, "r", 23, 285, 0], [1, "r", 66, 286, 0], [1, "r", 64, 287, 0], [1, "r", 63, 287, 0], [1, "r", 60, 287, 0], [1, "r", 59, 285, 0], [1, "r", 58, 284, 0], [1, "r", 59, 283, 0], [1, "r", 65, 283, 0], [1, "r", 64, 283, 0], [1, "r", 63, 283, 0], [1, "r", 62, 283, 0], [1, "r", 61, 283, 0], [1, "r", 60, 283, 0], [1, "r", 59, 284, 0], [1, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [1, "r", 61, 287, 0], [1, "r", 62, 287, 0], [1, "r", 61, 286, 0], [1, "r", 62, 286, 0], [1, "r", 63, 286, 0], [1, "r", 64, 286, 0], [1, "r", 65, 286, 0], [1, "r", 67, 285, 0], [1, "r", 66, 285, 0], [1, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, 0], [1, "r", 62, 285, 0], [1, "r", 61, 285, 0], [1, "r", 60, 285, 0], [1, "r", 60, 284, 0], [1, "r", 61, 284, 0], [1, "r", 62, 284, 0], [1, "r", 63, 284, 0], [1, "r", 64, 284, 0], [1, "r", 65, 284, 0], [1, "r", 66, 284, 0], [1, "r", 65, 287, 0], [1, "r", 67, 286, 0], [1, "p", 0, 13, 189, 1], [1, "p", 0, 32, 184, 1], [1, "p", 0, 47, 191, 1], [1, "p", 0, 64, 184, 1], [1, "p", 0, 84, 192, 1], [1, "p", 0, 78, 207, 1], [1, "p", 0, 58, 216, 1], [1, "p", 0, 41, 211, 1], [1, "p", 0, 18, 211, 1], [1, "p", 0, 14, 230, 1], [1, "p", 0, 29, 237, 1], [1, "p", 0, 50, 230, 1], [1, "p", 0, 78, 241, 1], [1, "p", 0, 74, 256, 1], [1, "p", 0, 68, 266, 1], [1, "p", 0, 48, 259, 1], [1, "p", 0, 31, 263, 1], [1, "p", 0, 18, 274, 1], [1, "p", 0, 33, 283, 1], [1, "p", 0, 66, 287, 1], [1, "p", 0, 82, 291, 1], [1, "p", 0, 16, 295, 1], [1, "p", 0, 45, 294, 1], [1, "p", 0, 18, 252, 1], [1, "p", 0, 79, 227, 1], [1, "p", 0, 32, 200, 1], [1, "p", 0, 64, 200, 1], [1, "s", 0, 21, 193, 1], [1, "s", 1, 18, 189, 1], [1, "s", 2, 26, 189, 1], [1, "b", 1, 15, 181, 0], [1, "b", 2, 18, 190, 0], [1, "b", 2, 29, 193, 0], [1, "t", 3, 16, 182, 0], [1, "t", 3, 13, 195, 0], [1, "t", 4, 16, 183, 0], [1, "t", 5, 10, 184, 0], [1, "t", 5, 23, 182, 0], [1, "t", 4, 30, 187, 0], [1, "t", 1, 26, 192, 0], [1, "b", 1, 25, 188, 0], [1, "s", 1, 24, 181, 1], [1, "t", 3, 33, 183, 0], [1, "b", 1, 36, 189, 0], [1, "t", 2, 35, 190, 0], [1, "b", 3, 19, 200, 0], [1, "s", 0, 28, 194, 1], [1, "s", 1, 32, 196, 1], [1, "s", 1, 36, 183, 1], [1, "s", 2, 38, 184, 1], [1, "s", 2, 10, 192, 1], [1, "s", 2, 12, 183, 1], [1, "s", 1, 15, 199, 1], [1, "b", 0, 12, 202, 0], [1, "t", 2, 13, 203, 0], [1, "t", 4, 20, 200, 0], [1, "t", 4, 12, 194, 0], [1, "t", 5, 15, 205, 0], [1, "t", 5, 29, 200, 0], [1, "t", 3, 28, 201, 0], [1, "s", 2, 25, 199, 1], [1, "s", 1, 22, 204, 1], [1, "g", 2, 25, 205, 1], [1, "b", 1, 27, 216, 0], [1, "s", 1, 25, 217, 1], [1, "s", 1, 33, 217, 1], [1, "s", 2, 35, 215, 1], [1, "s", 0, 32, 221, 1], [1, "t", 2, 31, 222, 0], [1, "t", 4, 26, 221, 0], [1, "b", 3, 27, 222, 0], [1, "b", 0, 17, 217, 0], [1, "t", 3, 18, 216, 0], [1, "t", 4, 13, 215, 0], [1, "t", 5, 30, 213, 0], [1, "t", 5, 24, 208, 0], [1, "s", 1, 12, 216, 1], [1, "s", 2, 11, 210, 1], [1, "s", 2, 34, 223, 1], [1, "b", 2, 36, 218, 0], [1, "t", 4, 40, 206, 0], [1, "t", 5, 35, 203, 0], [1, "t", 3, 39, 206, 0], [1, "b", 1, 34, 204, 0], [1, "s", 1, 33, 206, 1], [1, "s", 1, 42, 203, 1], [1, "s", 0, 47, 196, 1], [1, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, 0], [1, "t", 5, 44, 187, 0], [1, "b", 1, 46, 181, 0], [1, "t", 2, 47, 182, 0], [1, "b", 0, 57, 182, 0], [1, "b", 3, 56, 183, 0], [1, "t", 4, 55, 184, 0], [1, "t", 5, 62, 195, 0], [1, "s", 1, 51, 185, 1], [1, "s", 2, 62, 180, 1], [1, "s", 2, 61, 188, 1], [1, "s", 1, 61, 189, 1], [1, "s", 2, 48, 195, 1], [1, "b", 1, 51, 199, 0], [1, "t", 2, 52, 199, 0], [1, "t", 3, 56, 204, 0], [1, "t", 4, 57, 204, 0], [1, "t", 4, 51, 204, 0], [1, "s", 1, 52, 205, 1], [1, "s", 2, 57, 200, 1], [1, "s", 1, 56, 199, 1], [1, "b", 0, 55, 192, 0], [1, "t", 3, 56, 193, 0], [1, "t", 4, 50, 190, 0], [1, "b", 1, 76, 188, 0], [1, "t", 2, 75, 188, 0], [1, "t", 2, 73, 192, 0], [1, "t", 4, 72, 191, 0], [1, "t", 5, 78, 193, 0], [1, "b", 0, 79, 192, 0], [1, "s", 2, 79, 190, 1], [1, "s", 1, 74, 194, 1], [1, "s", 1, 72, 187, 1], [1, "s", 0, 74, 183, 1], [1, "s", 1, 75, 183, 1], [1, "t", 2, 69, 181, 0], [1, "t", 4, 70, 182, 0], [1, "t", 5, 69, 180, 0], [1, "b", 1, 65, 189, 0], [1, "b", 2, 66, 189, 0], [1, "t", 3, 64, 188, 0], [1, "t", 4, 67, 192, 0], [1, "b", 2, 85, 183, 0], [1, "t", 1, 84, 184, 0], [1, "t", 4, 81, 180, 0], [1, "t", 5, 89, 180, 0], [1, "t", 0, 90, 188, 0], [1, "t", 3, 89, 190, 0], [1, "s", 1, 87, 187, 1], [1, "s", 2, 87, 197, 1], [1, "b", 1, 84, 200, 0], [1, "t", 2, 83, 201, 0], [1, "t", 4, 87, 207, 0], [1, "s", 2, 79, 202, 1], [1, "s", 1, 80, 203, 1], [1, "t", 0, 71, 200, 0], [1, "b", 2, 72, 201, 0], [1, "t", 2, 65, 205, 0], [1, "t", 1, 66, 206, 0], [1, "t", 4, 63, 209, 0], [1, "t", 5, 73, 203, 0], [1, "s", 0, 70, 207, 1], [1, "s", 1, 71, 206, 1], [1, "s", 2, 68, 199, 1], [1, "s", 1, 64, 213, 1], [1, "t", 0, 85, 213, 0], [1, "b", 2, 84, 212, 0], [1, "t", 3, 77, 209, 0], [1, "t", 4, 83, 216, 0], [1, "t", 4, 73, 209, 0], [1, "b", 0, 86, 222, 0], [1, "b", 3, 87, 221, 0], [1, "s", 1, 80, 214, 1], [1, "s", 2, 87, 216, 1], [1, "s", 2, 84, 224, 1], [1, "s", 1, 77, 227, 1], [1, "t", 1, 74, 222, 0], [1, "b", 1, 69, 218, 0], [1, "b", 2, 75, 219, 0], [1, "s", 2, 74, 218, 1], [1, "s", 1, 69, 223, 1], [1, "s", 1, 77, 221, 1], [1, "b", 1, 72, 211, 0], [1, "b", 1, 85, 232, 0], [1, "t", 2, 84, 233, 0], [1, "t", 2, 78, 238, 0], [1, "b", 1, 77, 237, 0], [1, "t", 5, 87, 236, 0], [1, "t", 5, 76, 229, 0], [1, "b", 2, 74, 241, 0], [1, "s", 0, 73, 242, 1], [1, "s", 0, 81, 238, 1], [1, "s", 1, 82, 237, 1], [1, "s", 2, 72, 237, 1], [1, "s", 2, 78, 242, 1], [1, "b", 1, 66, 230, 0], [1, "b", 2, 62, 229, 0], [1, "t", 4, 67, 231, 0], [1, "t", 4, 62, 228, 0], [1, "t", 5, 64, 233, 0], [1, "t", 2, 65, 234, 0], [1, "t", 2, 51, 220, 0], [1, "t", 1, 50, 218, 0], [1, "b", 1, 45, 223, 0], [1, "b", 2, 46, 224, 0], [1, "t", 4, 49, 218, 0], [1, "t", 4, 47, 225, 0], [1, "s", 1, 50, 215, 1], [1, "s", 2, 51, 213, 1], [1, "s", 2, 42, 227, 1], [1, "s", 1, 44, 227, 1], [1, "s", 1, 60, 230, 1], [1, "s", 2, 59, 231, 1], [1, "b", 1, 85, 252, 0], [1, "t", 2, 84, 251, 0], [1, "t", 2, 74, 250, 0], [1, "t", 0, 75, 251, 0], [1, "b", 0, 83, 246, 0], [1, "t", 3, 82, 247, 0], [1, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [1, "t", 5, 87, 246, 0], [1, "t", 5, 75, 252, 0], [1, "s", 1, 79, 257, 1], [1, "s", 2, 78, 249, 1], [1, "s", 2, 80, 258, 1], [1, "s", 1, 88, 254, 1], [1, "s", 1, 85, 264, 1], [1, "s", 2, 89, 263, 1], [1, "s", 2, 87, 269, 1], [1, "s", 0, 84, 268, 1], [1, "s", 2, 76, 267, 1], [1, "s", 1, 66, 261, 1], [1, "s", 1, 87, 274, 1], [1, "s", 1, 76, 263, 1], [1, "s", 1, 59, 251, 1], [1, "s", 0, 59, 252, 1], [1, "t", 2, 86, 265, 0], [1, "t", 0, 78, 270, 0], [1, "t", 2, 79, 271, 0], [1, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, 0], [1, "b", 1, 71, 264, 0], [1, "b", 1, 88, 269, 0], [1, "t", 5, 84, 264, 0], [1, "t", 5, 79, 261, 0], [1, "t", 5, 72, 265, 0], [1, "t", 5, 77, 270, 0], [1, "t", 0, 87, 261, 0], [1, "t", 2, 86, 260, 0], [1, "t", 4, 84, 255, 0], [1, "t", 4, 68, 255, 0], [1, "t", 1, 67, 254, 0], [1, "t", 2, 65, 262, 0], [1, "t", 1, 57, 260, 0], [1, "t", 2, 58, 259, 0], [1, "b", 1, 63, 256, 0], [1, "b", 1, 52, 248, 0], [1, "t", 2, 53, 248, 0], [1, "s", 1, 50, 253, 1], [1, "s", 2, 67, 263, 1], [1, "s", 2, 52, 252, 1], [1, "s", 2, 71, 244, 1], [1, "b", 0, 57, 245, 0], [1, "t", 2, 58, 244, 0], [1, "b", 1, 53, 237, 0], [1, "t", 2, 54, 237, 0], [1, "t", 2, 41, 238, 0], [1, "t", 1, 42, 237, 0], [1, "t", 5, 57, 235, 0], [1, "t", 5, 60, 246, 0], [1, "t", 5, 50, 252, 0], [1, "t", 1, 42, 248, 0], [1, "b", 1, 43, 249, 0], [1, "b", 3, 37, 243, 0], [1, "s", 0, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, 1], [1, "s", 2, 60, 243, 1], [1, "s", 2, 36, 240, 1], [1, "s", 2, 43, 254, 1], [1, "s", 1, 42, 254, 1], [1, "t", 1, 38, 233, 0], [1, "t", 2, 35, 235, 0], [1, "t", 4, 33, 228, 0], [1, "t", 4, 33, 245, 0], [1, "t", 4, 43, 235, 0], [1, "t", 5, 45, 249, 0], [1, "t", 5, 41, 253, 0], [1, "b", 1, 20, 227, 0], [1, "b", 1, 14, 240, 0], [1, "t", 3, 21, 227, 0], [1, "t", 3, 27, 234, 0], [1, "t", 3, 15, 241, 0], [1, "t", 3, 12, 229, 0], [1, "t", 4, 17, 224, 0], [1, "t", 4, 11, 231, 0], [1, "t", 4, 22, 238, 0], [1, "t", 4, 11, 239, 0], [1, "t", 1, 22, 243, 0], [1, "b", 2, 23, 242, 0], [1, "s", 1, 23, 238, 1], [1, "s", 1, 22, 228, 1], [1, "s", 2, 24, 228, 1], [1, "s", 2, 21, 236, 1], [1, "s", 0, 13, 228, 1], [1, "s", 0, 16, 242, 1], [1, "s", 1, 15, 244, 1], [1, "s", 1, 34, 236, 1], [1, "t", 1, 26, 249, 0], [1, "t", 1, 22, 256, 0], [1, "t", 2, 23, 255, 0], [1, "b", 1, 17, 256, 0], [1, "b", 2, 18, 256, 0], [1, "s", 0, 21, 252, 1], [1, "s", 2, 20, 250, 1], [1, "s", 2, 23, 259, 1], [1, "s", 1, 13, 257, 1], [1, "t", 1, 31, 254, 0], [1, "t", 2, 32, 254, 0], [1, "t", 4, 28, 254, 0], [1, "t", 4, 34, 258, 0], [1, "t", 0, 29, 260, 0], [1, "b", 2, 30, 261, 0], [1, "t", 0, 43, 262, 0], [1, "t", 2, 42, 263, 0], [1, "t", 4, 46, 264, 0], [1, "b", 1, 39, 265, 0], [1, "b", 1, 58, 267, 0], [1, "t", 2, 57, 268, 0], [1, "t", 4, 62, 270, 0], [1, "t", 5, 52, 273, 0], [1, "s", 1, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", 2, 41, 274, 1], [1, "t", 2, 42, 268, 0], [1, "t", 0, 43, 268, 0], [1, "b", 1, 46, 272, 0], [1, "b", 1, 14, 265, 0], [1, "t", 2, 15, 266, 0], [1, "t", 4, 19, 264, 0], [1, "t", 4, 29, 263, 0], [1, "t", 4, 11, 269, 0], [1, "t", 1, 29, 271, 0], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, 0], [1, "t", 2, 20, 279, 0], [1, "t", 0, 19, 278, 0], [1, "t", 3, 13, 278, 0], [1, "b", 0, 21, 284, 0], [1, "b", 0, 18, 289, 0], [1, "t", 2, 20, 283, 0], [1, "t", 2, 19, 290, 0], [1, "t", 4, 19, 283, 0], [1, "t", 4, 20, 290, 0], [1, "s", 1, 16, 285, 1], [1, "s", 1, 24, 288, 1], [1, "s", 2, 26, 287, 1], [1, "s", 2, 16, 278, 1], [1, "s", 1, 21, 268, 1], [1, "s", 2, 19, 268, 1], [1, "t", 0, 12, 294, 0], [1, "b", 1, 13, 295, 0], [1, "t", 3, 13, 291, 0], [1, "t", 3, 10, 299, 0], [1, "t", 4, 11, 287, 0], [1, "t", 4, 17, 298, 0], [1, "t", 1, 27, 294, 0], [1, "b", 2, 26, 295, 0], [1, "t", 3, 33, 297, 0], [1, "b", 1, 48, 278, 0], [1, "b", 0, 46, 280, 0], [1, "b", 2, 50, 280, 0], [1, "t", 0, 44, 282, 0], [1, "b", 1, 49, 283, 0], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, 0], [1, "b", 3, 44, 284, 0], [1, "b", 0, 47, 284, 0], [1, "b", 2, 42, 283, 0], [1, "t", 4, 51, 277, 0], [1, "b", 1, 44, 286, 0], [1, "b", 2, 46, 286, 0], [1, "b", 1, 42, 285, 0], [1, "b", 3, 41, 286, 0], [1, "t", 5, 42, 287, 0], [1, "b", 1, 42, 278, 0], [1, "b", 2, 43, 279, 0], [1, "b", 0, 40, 280, 0], [1, "t", 4, 39, 283, 0], [1, "t", 4, 39, 279, 0], [1, "t", 5, 43, 277, 0], [1, "t", 5, 47, 287, 0], [1, "t", 4, 46, 277, 0], [1, "t", 4, 45, 290, 0], [1, "t", 4, 36, 285, 0], [1, "t", 3, 35, 284, 0], [1, "t", 3, 36, 272, 0], [1, "t", 4, 35, 271, 0], [1, "t", 1, 29, 279, 0], [1, "b", 1, 32, 277, 0], [1, "t", 3, 31, 278, 0], [1, "b", 2, 28, 280, 0], [1, "t", 4, 29, 286, 0], [1, "t", 5, 28, 275, 0], [1, "t", 3, 37, 292, 0], [1, "b", 1, 36, 291, 0], [1, "b", 0, 34, 298, 0], [1, "t", 4, 31, 292, 0], [1, "t", 4, 46, 295, 0], [1, "t", 4, 59, 287, 0], [1, "b", 1, 58, 286, 0], [1, "s", 1, 68, 284, 1], [1, "s", 2, 70, 286, 1], [1, "s", 0, 67, 284, 1], [1, "t", 3, 66, 283, 0], [1, "t", 1, 65, 282, 0], [1, "b", 1, 64, 288, 0], [1, "t", 3, 60, 293, 0], [1, "t", 1, 61, 294, 0], [1, "b", 1, 76, 294, 0], [1, "t", 5, 75, 295, 0], [1, "t", 5, 56, 293, 0], [1, "t", 5, 59, 281, 0], [1, "t", 5, 67, 291, 0], [1, "b", 0, 88, 293, 0], [1, "t", 2, 89, 292, 0], [1, "t", 2, 85, 286, 0], [1, "t", 4, 88, 289, 0], [1, "t", 4, 79, 287, 0], [1, "b", 1, 84, 285, 0], [1, "t", 3, 75, 284, 0], [1, "b", 0, 75, 278, 0], [1, "t", 3, 74, 277, 0], [1, "t", 4, 81, 276, 0], [1, "t", 2, 65, 276, 0], [1, "b", 1, 66, 275, 0], [1, "g", 0, 45, 261, 1], [1, "g", 1, 39, 258, 1], [1, "g", 0, 35, 250, 1], [1, "g", 2, 22, 247, 1], [1, "g", 2, 27, 227, 1], [1, "g", 2, 63, 218, 1], [1, "g", 1, 56, 224, 1], [1, "g", 0, 46, 231, 1], [1, "g", 1, 65, 240, 1], [1, "g", 2, 67, 238, 1], [1, "g", 2, 79, 232, 1], [1, "g", 2, 72, 253, 1], [1, "g", 2, 62, 264, 1], [1, "g", 2, 28, 267, 1], [1, "g", 2, 58, 274, 1], [1, "de", 2, 14, 182, 0], [1, "de", 2, 24, 182, 0], [1, "de", 0, 11, 185, 0], [1, "de", 0, 14, 194, 0], [1, "de", 1, 25, 196, 0], [1, "de", 3, 31, 183, 0], [1, "de", 0, 38, 181, 0], [1, "de", 2, 45, 186, 0], [1, "de", 1, 38, 191, 0], [1, "de", 0, 56, 181, 0], [1, "de", 1, 68, 182, 0], [1, "de", 2, 80, 181, 0], [1, "de", 3, 86, 187, 0], [1, "de", 0, 84, 193, 0], [1, "de", 1, 82, 201, 0], [1, "de", 2, 64, 191, 0], [1, "de", 2, 72, 200, 0], [1, "de", 3, 64, 201, 0], [1, "de", 2, 76, 209, 0], [1, "de", 3, 71, 212, 0], [1, "de", 1, 86, 214, 0], [1, "de", 0, 57, 208, 0], [1, "de", 0, 41, 203, 0], [1, "de", 1, 15, 206, 0], [1, "de", 2, 25, 209, 0], [1, "de", 3, 16, 218, 0], [1, "de", 3, 11, 227, 0], [1, "de", 0, 22, 229, 0], [1, "de", 1, 15, 239, 0], [1, "de", 2, 24, 238, 0], [1, "de", 3, 22, 246, 0], [1, "de", 3, 10, 253, 0], [1, "de", 1, 18, 258, 0], [1, "de", 1, 28, 261, 0], [1, "de", 1, 14, 267, 0], [1, "de", 0, 24, 268, 0], [1, "de", 0, 15, 278, 0], [1, "de", 2, 21, 279, 0], [1, "de", 2, 30, 272, 0], [1, "de", 2, 29, 281, 0], [1, "de", 2, 15, 284, 0], [1, "de", 3, 12, 291, 0], [1, "de", 3, 30, 287, 0], [1, "de", 3, 27, 293, 0], [1, "de", 0, 25, 296, 0], [1, "de", 0, 11, 298, 0], [1, "de", 0, 8, 286, 0], [1, "de", 2, 36, 299, 0], [1, "de", 2, 37, 280, 0], [1, "de", 3, 38, 291, 0], [1, "de", 1, 48, 287, 0], [1, "de", 1, 46, 277, 0], [1, "de", 1, 53, 278, 0], [1, "de", 3, 48, 295, 0], [1, "de", 0, 57, 294, 0], [1, "de", 1, 65, 290, 0], [1, "de", 1, 84, 292, 0], [1, "de", 2, 77, 295, 0], [1, "de", 2, 84, 287, 0], [1, "de", 0, 74, 279, 0], [1, "de", 3, 65, 274, 0], [1, "de", 2, 71, 267, 0], [1, "de", 2, 65, 261, 0], [1, "de", 2, 47, 264, 0], [1, "de", 3, 47, 258, 0], [1, "de", 3, 53, 251, 0], [1, "de", 2, 40, 253, 0], [1, "de", 0, 35, 244, 0], [1, "de", 0, 37, 233, 0], [1, "de", 3, 44, 226, 0], [1, "de", 2, 37, 219, 0], [1, "de", 2, 54, 234, 0], [1, "de", 1, 66, 234, 0], [1, "de", 2, 65, 241, 0], [1, "de", 0, 68, 249, 0], [1, "de", 3, 78, 257, 0], [1, "de", 2, 86, 253, 0], [1, "de", 2, 83, 245, 0], [1, "de", 1, 82, 238, 0], [1, "de", 3, 76, 235, 0], [1, "de", 2, 86, 232, 0], [1, "de", 0, 86, 224, 0], [1, "de", 2, 76, 226, 0], [1, "de", 2, 61, 228, 0], [1, "de", 2, 58, 217, 0], [1, "de", 0, 49, 217, 0], [1, "de", 19, 11, 179, 0], [1, "de", 20, 17, 180, 0], [1, "de", 22, 18, 181, 0], [1, "de", 19, 30, 184, 0], [1, "de", 19, 27, 187, 0], [1, "de", 19, 30, 195, 0], [1, "de", 19, 18, 192, 0], [1, "de", 19, 44, 182, 0], [1, "de", 19, 49, 182, 0], [1, "de", 19, 54, 182, 0], [1, "de", 19, 59, 183, 0], [1, "de", 19, 56, 186, 0], [1, "de", 19, 46, 188, 0], [1, "de", 19, 58, 193, 0], [1, "de", 19, 67, 187, 0], [1, "de", 19, 65, 192, 0], [1, "de", 19, 71, 180, 0], [1, "de", 19, 78, 187, 0], [1, "de", 19, 80, 194, 0], [1, "de", 19, 72, 193, 0], [1, "de", 19, 82, 182, 0], [1, "de", 19, 88, 185, 0], [1, "de", 19, 87, 189, 0], [1, "de", 19, 86, 197, 0], [1, "de", 19, 85, 203, 0], [1, "de", 19, 74, 200, 0], [1, "de", 19, 70, 202, 0], [1, "de", 19, 83, 199, 0], [1, "de", 19, 86, 208, 0], [1, "de", 19, 84, 214, 0], [1, "de", 19, 83, 211, 0], [1, "de", 19, 84, 217, 0], [1, "de", 19, 77, 210, 0], [1, "de", 19, 71, 210, 0], [1, "de", 19, 73, 213, 0], [1, "de", 19, 66, 207, 0], [1, "de", 19, 66, 204, 0], [1, "de", 19, 62, 209, 0], [1, "de", 19, 63, 201, 0], [1, "de", 19, 56, 205, 0], [1, "de", 19, 49, 199, 0], [1, "de", 19, 50, 205, 0], [1, "de", 19, 40, 197, 0], [1, "de", 19, 38, 198, 0], [1, "de", 19, 40, 208, 0], [1, "de", 19, 36, 204, 0], [1, "de", 19, 33, 204, 0], [1, "de", 19, 29, 202, 0], [1, "de", 19, 27, 200, 0], [1, "de", 19, 26, 193, 0], [1, "de", 19, 18, 201, 0], [1, "de", 19, 20, 199, 0], [1, "de", 19, 12, 196, 0], [1, "de", 19, 12, 204, 0], [1, "de", 19, 11, 201, 0], [1, "de", 19, 23, 208, 0], [1, "de", 19, 31, 214, 0], [1, "de", 19, 26, 215, 0], [1, "de", 19, 36, 217, 0], [1, "de", 19, 32, 223, 0], [1, "de", 19, 26, 223, 0], [1, "de", 19, 18, 218, 0], [1, "de", 19, 15, 215, 0], [1, "de", 19, 17, 212, 0], [1, "de", 19, 15, 224, 0], [1, "de", 19, 19, 229, 0], [1, "de", 19, 10, 230, 0], [1, "de", 19, 22, 240, 0], [1, "de", 19, 13, 238, 0], [1, "de", 19, 13, 243, 0], [1, "de", 19, 24, 244, 0], [1, "de", 19, 24, 250, 0], [1, "de", 19, 28, 253, 0], [1, "de", 19, 33, 255, 0], [1, "de", 19, 34, 260, 0], [1, "de", 19, 31, 260, 0], [1, "de", 19, 38, 267, 0], [1, "de", 19, 44, 264, 0], [1, "de", 19, 43, 261, 0], [1, "de", 19, 16, 257, 0], [1, "de", 19, 22, 258, 0], [1, "de", 19, 12, 253, 0], [1, "de", 19, 8, 242, 0], [1, "de", 19, 8, 255, 0], [1, "de", 19, 15, 264, 0], [1, "de", 19, 20, 265, 0], [1, "de", 19, 12, 271, 0], [1, "de", 19, 8, 272, 0], [1, "de", 19, 13, 277, 0], [1, "de", 19, 21, 277, 0], [1, "de", 19, 21, 281, 0], [1, "de", 19, 27, 282, 0], [1, "de", 19, 29, 278, 0], [1, "de", 19, 29, 273, 0], [1, "de", 19, 36, 271, 0], [1, "de", 19, 8, 278, 0], [1, "de", 19, 11, 286, 0], [1, "de", 19, 17, 291, 0], [1, "de", 19, 14, 294, 0], [1, "de", 19, 8, 292, 0], [1, "de", 19, 12, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", 19, 16, 301, 0], [1, "de", 19, 27, 296, 0], [1, "de", 19, 25, 292, 0], [1, "de", 19, 23, 301, 0], [1, "de", 19, 28, 301, 0], [1, "de", 19, 35, 297, 0], [1, "de", 19, 37, 301, 0], [1, "de", 19, 43, 301, 0], [1, "de", 19, 46, 294, 0], [1, "de", 19, 46, 288, 0], [1, "de", 19, 40, 287, 0], [1, "de", 19, 50, 301, 0], [1, "de", 19, 58, 301, 0], [1, "de", 19, 64, 301, 0], [1, "de", 19, 71, 301, 0], [1, "de", 19, 80, 301, 0], [1, "de", 19, 87, 301, 0], [1, "de", 19, 86, 294, 0], [1, "de", 19, 87, 290, 0], [1, "de", 19, 82, 286, 0], [1, "de", 19, 75, 285, 0], [1, "de", 19, 66, 292, 0], [1, "de", 19, 66, 288, 0], [1, "de", 19, 58, 288, 0], [1, "de", 19, 67, 282, 0], [1, "de", 19, 61, 281, 0], [1, "de", 19, 60, 295, 0], [1, "de", 19, 50, 282, 0], [1, "de", 19, 47, 283, 0], [1, "de", 19, 48, 281, 0], [1, "de", 19, 44, 277, 0], [1, "de", 19, 41, 282, 0], [1, "de", 19, 38, 281, 0], [1, "de", 19, 42, 288, 0], [1, "de", 19, 52, 281, 0], [1, "de", 19, 50, 275, 0], [1, "de", 19, 39, 277, 0], [1, "de", 19, 38, 284, 0], [1, "de", 19, 51, 285, 0], [1, "de", 19, 38, 278, 0], [1, "de", 19, 47, 272, 0], [1, "de", 19, 44, 267, 0], [1, "de", 19, 76, 280, 0], [1, "de", 19, 78, 272, 0], [1, "de", 19, 68, 275, 0], [1, "de", 19, 70, 265, 0], [1, "de", 19, 65, 263, 0], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, 0], [1, "de", 19, 56, 266, 0], [1, "de", 19, 55, 260, 0], [1, "de", 19, 59, 258, 0], [1, "de", 19, 62, 255, 0], [1, "de", 19, 67, 253, 0], [1, "de", 19, 69, 256, 0], [1, "de", 19, 44, 253, 0], [1, "de", 19, 44, 250, 0], [1, "de", 19, 36, 245, 0], [1, "de", 19, 39, 239, 0], [1, "de", 19, 42, 234, 0], [1, "de", 19, 37, 235, 0], [1, "de", 19, 45, 226, 0], [1, "de", 19, 46, 222, 0], [1, "de", 19, 51, 218, 0], [1, "de", 19, 68, 218, 0], [1, "de", 19, 74, 224, 0], [1, "de", 19, 76, 218, 0], [1, "de", 19, 84, 221, 0], [1, "de", 19, 88, 223, 0], [1, "de", 19, 76, 230, 0], [1, "de", 19, 86, 234, 0], [1, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, 0], [1, "de", 19, 83, 247, 0], [1, "de", 19, 88, 247, 0], [1, "de", 19, 84, 254, 0], [1, "de", 19, 86, 251, 0], [1, "de", 19, 85, 260, 0], [1, "de", 19, 79, 260, 0], [1, "de", 19, 76, 251, 0], [1, "de", 19, 72, 251, 0], [1, "de", 19, 69, 251, 0], [1, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, 0], [1, "de", 19, 87, 271, 0], [1, "de", 19, 82, 277, 0], [1, "de", 19, 87, 284, 0], [1, "de", 19, 87, 237, 0], [1, "de", 19, 88, 179, 0], [1, "de", 19, 50, 191, 0], [1, "de", 19, 52, 221, 0], [1, "de", 19, 34, 234, 0], [1, "de", 19, 27, 233, 0], [1, "de", 19, 37, 293, 0], [1, "de", 29, 13, 181, 0], [1, "de", 29, 8, 180, 0], [1, "de", 30, 13, 186, 0], [1, "de", 31, 24, 183, 0], [1, "de", 32, 33, 185, 0], [1, "de", 32, 37, 182, 0], [1, "de", 29, 45, 183, 0], [1, "de", 30, 48, 183, 0], [1, "de", 30, 58, 181, 0], [1, "de", 30, 66, 188, 0], [1, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, 0], [1, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [1, "de", 31, 82, 203, 0], [1, "de", 32, 80, 201, 0], [1, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [1, "de", 30, 88, 220, 0], [1, "de", 30, 78, 229, 0], [1, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, 0], [1, "de", 29, 67, 217, 0], [1, "de", 30, 72, 208, 0], [1, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, 0], [1, "de", 29, 63, 210, 0], [1, "de", 29, 50, 204, 0], [1, "de", 30, 41, 205, 0], [1, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [1, "de", 30, 20, 201, 0], [1, "de", 29, 10, 203, 0], [1, "de", 29, 14, 196, 0], [1, "de", 29, 24, 187, 0], [1, "de", 29, 28, 223, 0], [1, "de", 29, 32, 212, 0], [1, "de", 30, 28, 214, 0], [1, "de", 31, 24, 218, 0], [1, "de", 29, 36, 219, 0], [1, "de", 29, 37, 217, 0], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [1, "de", 29, 69, 231, 0], [1, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, 0], [1, "de", 30, 58, 261, 0], [1, "de", 30, 73, 276, 0], [1, "de", 30, 64, 276, 0], [1, "de", 30, 82, 285, 0], [1, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, 0], [1, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, 0], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, 0], [1, "de", 29, 28, 296, 0], [1, "de", 29, 18, 292, 0], [1, "de", 29, 24, 284, 0], [1, "de", 30, 10, 295, 0], [1, "de", 30, 10, 286, 0], [1, "de", 30, 15, 279, 0], [1, "de", 30, 15, 269, 0], [1, "de", 30, 21, 259, 0], [1, "de", 30, 12, 256, 0], [1, "de", 30, 31, 245, 0], [1, "de", 30, 12, 240, 0], [1, "de", 30, 28, 235, 0], [1, "de", 30, 13, 226, 0], [1, "de", 30, 39, 231, 0], [1, "de", 30, 61, 226, 0], [1, "r", 96, 262, 0], [1, "r", 97, 262, 0], [1, "r", 98, 262, 0], [1, "r", 97, 270, 0], [1, "r", 97, 271, 0], [1, "r", 97, 272, 0], [1, "r", 97, 273, 0], [1, "r", 97, 274, 0], [1, "r", 97, 275, 0], [1, "r", 97, 276, 0], [1, "r", 97, 277, 0], [1, "r", 97, 278, 0], [1, "r", 98, 270, 0], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [1, "r", 98, 273, 0], [1, "r", 98, 274, 0], [1, "r", 98, 275, 0], [1, "r", 98, 276, 0], [1, "r", 98, 277, 0], [1, "r", 98, 278, 0], [1, "r", 96, 283, 0], [1, "r", 97, 283, 0], [1, "r", 97, 284, 0], [1, "r", 97, 285, 0], [1, "r", 98, 283, 0], [1, "r", 98, 284, 0], [1, "r", 98, 285, 0], [1, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, 0], [1, "r", 96, 274, 0], [1, "r", 96, 275, 0], [1, "r", 96, 276, 0], [1, "r", 96, 277, 0], [1, "r", 96, 278, 0], [1, "r", 44, 248, 0], [1, "de", 16, 94, 290, 0], [1, "de", 16, 94, 252, 0], [1, "de", 16, 94, 228, 0], [1, "de", 17, 94, 200, 0], [1, "r", 95, 282, 1], [1, "r", 95, 281, 1], [1, "r", 94, 281, 1], [1, "r", 90, 281, 1], [1, "r", 91, 282, 1], [1, "r", 89, 281, 1], [1, "r", 85, 276, 1], [1, "r", 85, 277, 1], [1, "r", 86, 278, 1], [1, "p", 0, 85, 279, 1], [1, "r", 86, 279, 1], [1, "r", 87, 280, 1], [1, "r", 96, 281, 0], [1, "r", 97, 281, 0], [1, "r", 98, 281, 0], [1, "r", 98, 282, 0], [1, "r", 97, 282, 0], [1, "r", 96, 282, 0], [1, "r", 68, 261, 1], [1, "fo", 1, 94, 168, 0], [1, "fo", 2, 94, 151, 0], [1, "fo", 1, 94, 138, 0], [1, "fo", 1, 93, 124, 0], [1, "fo", 1, 94, 129, 0], [1, "fo", 1, 93, 113, 0], [1, "fo", 1, 94, 102, 0], [1, "fo", 1, 94, 93, 0], [1, "fo", 1, 93, 90, 0], [1, "fo", 1, 94, 79, 0], [1, "fo", 1, 94, 76, 0], [1, "fo", 1, 93, 70, 0], [1, "fo", 1, 93, 63, 0], [1, "fo", 1, 94, 53, 0], [1, "fo", 1, 93, 10, 0], [1, "fo", 1, 85, 8, 0], [1, "fo", 1, 94, 12, 0], [1, "fo", 1, 66, 13, 0], [1, "fo", 1, 69, 9, 0], [1, "fo", 2, 68, 14, 0], [1, "fo", 2, 66, 25, 0], [1, "fo", 2, 92, 9, 0], [1, "fo", 2, 94, 14, 0], [1, "fo", 2, 87, 9, 0], [1, "fo", 2, 71, 9, 0], [1, "fo", 2, 90, 12, 0], [1, "fo", 2, 91, 13, 0], [1, "fo", 1, 74, 12, 0], [1, "fo", 2, 72, 12, 0], [1, "fo", 2, 75, 13, 0], [1, "fo", 2, 74, 15, 0], [1, "fo", 2, 84, 12, 0], [1, "fo", 2, 81, 14, 0], [1, "fo", 1, 84, 13, 0], [1, "fo", 1, 84, 19, 0], [1, "fo", 1, 11, 9, 0], [1, "fo", 1, 7, 14, 0], [1, "fo", 1, 8, 22, 0], [1, "fo", 1, 7, 34, 0], [1, "fo", 1, 12, 24, 0], [1, "fo", 2, 8, 24, 0], [1, "fo", 2, 9, 21, 0], [1, "fo", 2, 31, 10, 0], [1, "fo", 2, 33, 27, 0], [1, "fo", 2, 9, 34, 0], [1, "fo", 2, 8, 19, 0], [1, "fo", 1, 14, 10, 0], [1, "fo", 2, 13, 9, 0], [1, "fo", 2, 15, 11, 0], [1, "fo", 2, 9, 9, 0], [1, "fo", 2, 9, 10, 0], [1, "fo", 2, 9, 15, 0], [1, "fo", 2, 10, 23, 0], [1, "fo", 2, 34, 29, 0], [1, "fo", 2, 27, 18, 0], [1, "fo", 2, 25, 21, 0], [1, "fo", 2, 20, 18, 0], [1, "fo", 2, 18, 21, 0], [1, "fo", 2, 29, 9, 0], [1, "fo", 2, 13, 14, 0], [1, "fo", 2, 9, 38, 0], [1, "fo", 2, 21, 39, 0], [1, "fo", 2, 84, 26, 0], [1, "fo", 2, 77, 25, 0], [1, "fo", 2, 86, 35, 0], [1, "fo", 1, 70, 35, 0], [1, "fo", 2, 72, 36, 0], [1, "fo", 2, 73, 31, 0], [1, "fo", 2, 89, 39, 0], [1, "fo", 2, 65, 40, 0], [1, "fo", 2, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [1, "de", 22, 25, 266, 0], [1, "de", 22, 17, 206, 0], [1, "de", 19, 8, 184, 0], [1, "de", 19, 22, 183, 0], [1, "de", 19, 35, 188, 0], [1, "de", 19, 36, 192, 0], [1, "de", 19, 50, 277, 0], [1, "de", 19, 35, 279, 0], [1, "t", 4, 7, 178, 0], [1, "t", 1, 7, 179, 0], [1, "t", 3, 7, 180, 0], [1, "t", 2, 7, 181, 0], [1, "t", 5, 7, 182, 0], [1, "t", 4, 7, 183, 0], [1, "t", 3, 7, 184, 0], [1, "t", 4, 7, 185, 0], [1, "t", 2, 7, 186, 0], [1, "t", 1, 7, 187, 0], [1, "t", 4, 7, 188, 0], [1, "t", 3, 7, 189, 0], [1, "t", 5, 7, 190, 0], [1, "t", 1, 7, 191, 0], [1, "t", 3, 7, 192, 0], [1, "t", 4, 7, 193, 0], [1, "t", 3, 7, 194, 0], [1, "t", 5, 7, 195, 0], [1, "t", 2, 7, 196, 0], [1, "t", 4, 7, 197, 0], [1, "b", 2, 7, 198, 0], [1, "t", 4, 7, 199, 0], [1, "t", 2, 7, 200, 0], [1, "t", 5, 7, 201, 0], [1, "t", 2, 7, 202, 0], [1, "t", 4, 7, 203, 0], [1, "t", 2, 7, 204, 0], [1, "t", 5, 7, 205, 0], [1, "t", 2, 7, 206, 0], [1, "t", 1, 7, 207, 0], [1, "t", 4, 7, 208, 0], [1, "t", 3, 7, 209, 0], [1, "t", 1, 7, 210, 0], [1, "b", 0, 7, 211, 0], [1, "t", 3, 7, 212, 0], [1, "t", 4, 7, 213, 0], [1, "t", 3, 7, 214, 0], [1, "t", 5, 7, 215, 0], [1, "t", 5, 7, 216, 0], [1, "t", 3, 7, 217, 0], [1, "t", 1, 7, 218, 0], [1, "t", 4, 7, 219, 0], [1, "b", 2, 7, 220, 0], [1, "t", 1, 7, 221, 0], [1, "t", 2, 7, 222, 0], [1, "t", 4, 7, 223, 0], [1, "t", 3, 7, 224, 0], [1, "t", 1, 7, 225, 0], [1, "t", 4, 7, 226, 0], [1, "t", 2, 7, 227, 0], [1, "t", 5, 7, 228, 0], [1, "t", 3, 7, 229, 0], [1, "t", 1, 7, 230, 0], [1, "t", 4, 7, 231, 0], [1, "b", 2, 7, 232, 0], [1, "t", 5, 7, 233, 0], [1, "t", 1, 7, 234, 0], [1, "t", 3, 7, 235, 0], [1, "t", 4, 7, 236, 0], [1, "t", 2, 7, 237, 0], [1, "t", 5, 7, 238, 0], [1, "b", 3, 7, 239, 0], [1, "t", 2, 7, 240, 0], [1, "t", 1, 7, 241, 0], [1, "t", 2, 7, 242, 0], [1, "t", 4, 7, 243, 0], [1, "t", 3, 7, 244, 0], [1, "t", 4, 7, 245, 0], [1, "t", 1, 7, 246, 0], [1, "b", 0, 7, 247, 0], [1, "t", 3, 7, 248, 0], [1, "t", 5, 7, 249, 0], [1, "t", 2, 7, 250, 0], [1, "t", 1, 7, 251, 0], [1, "t", 4, 7, 252, 0], [1, "t", 3, 7, 253, 0], [1, "t", 5, 7, 254, 0], [1, "t", 1, 7, 255, 0], [1, "t", 4, 7, 256, 0], [1, "t", 1, 7, 257, 0], [1, "t", 2, 7, 258, 0], [1, "t", 5, 7, 260, 0], [1, "t", 3, 7, 259, 0], [1, "t", 1, 7, 261, 0], [1, "t", 3, 7, 262, 0], [1, "t", 4, 7, 263, 0], [1, "t", 1, 7, 264, 0], [1, "t", 2, 7, 265, 0], [1, "t", 5, 7, 266, 0], [1, "t", 2, 7, 267, 0], [1, "t", 2, 7, 269, 0], [1, "b", 2, 7, 268, 0], [1, "t", 4, 7, 270, 0], [1, "t", 1, 7, 271, 0], [1, "t", 5, 7, 272, 0], [1, "b", 2, 7, 273, 0], [1, "t", 4, 7, 274, 0], [1, "t", 2, 7, 275, 0], [1, "t", 5, 7, 276, 0], [1, "t", 5, 7, 277, 0], [1, "t", 2, 7, 278, 0], [1, "t", 1, 7, 279, 0], [1, "t", 4, 7, 280, 0], [1, "b", 1, 7, 281, 0], [1, "t", 3, 7, 282, 0], [1, "t", 4, 7, 283, 0], [1, "t", 1, 7, 284, 0], [1, "t", 3, 7, 285, 0], [1, "t", 5, 7, 286, 0], [1, "t", 4, 7, 288, 0], [1, "t", 2, 7, 287, 0], [1, "b", 0, 7, 289, 0], [1, "t", 4, 7, 290, 0], [1, "t", 2, 7, 291, 0], [1, "t", 5, 7, 292, 0], [1, "t", 3, 7, 293, 0], [1, "t", 1, 7, 294, 0], [1, "t", 4, 7, 295, 0], [1, "t", 3, 7, 296, 0], [1, "t", 1, 7, 297, 0], [1, "t", 4, 7, 298, 0], [1, "t", 2, 7, 299, 0], [1, "b", 0, 7, 300, 0], [1, "t", 2, 7, 301, 0], [1, "r", 196, 271, 0], [1, "r", 199, 274, 0], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [1, "r", 189, 207, 0], [1, "r", 192, 209, 0], [1, "r", 198, 271, 0], [1, "r", 197, 271, 0], [1, "r", 198, 272, 0], [1, "r", 197, 272, 0], [1, "r", 196, 272, 0], [1, "r", 195, 272, 0], [1, "r", 199, 272, 0], [1, "r", 199, 273, 0], [1, "r", 198, 273, 0], [1, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [1, "r", 197, 274, 0], [1, "r", 195, 273, 0], [1, "r", 196, 274, 0], [1, "r", 198, 275, 0], [1, "r", 197, 275, 0], [1, "r", 200, 274, 0], [1, "r", 200, 273, 0], [1, "r", 199, 275, 0], [1, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, 0], [1, "plm", 0, 199, 268, 0], [1, "plm", 0, 193, 277, 0], [1, "plm", 1, 199, 276, 0], [1, "s", 1, 200, 275, 1], [1, "s", 1, 194, 272, 1], [1, "s", 2, 193, 270, 1], [1, "g", 2, 193, 273, 1], [1, "g", 2, 201, 267, 1], [1, "m", 2, 220, 298, 1], [1, "m", 1, 219, 292, 1], [1, "m", 1, 214, 297, 1], [1, "r", 168, 238, 0], [1, "r", 169, 238, 0], [1, "r", 170, 238, 0], [1, "r", 171, 239, 0], [1, "r", 170, 239, 0], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, 0], [1, "r", 166, 239, 0], [1, "r", 166, 240, 0], [1, "r", 167, 240, 0], [1, "r", 168, 240, 0], [1, "r", 169, 240, 0], [1, "r", 170, 240, 0], [1, "r", 168, 241, 0], [1, "r", 169, 241, 0], [1, "r", 170, 241, 0], [1, "r", 171, 241, 0], [1, "plm", 2, 171, 238, 0], [1, "plm", 1, 166, 238, 0], [1, "plm", 0, 167, 237, 0], [1, "plm", 0, 171, 242, 0], [1, "plm", 0, 165, 243, 0], [1, "plm", 0, 171, 235, 0], [1, "plm", 0, 174, 241, 0], [1, "s", 1, 165, 239, 1], [1, "s", 1, 172, 241, 1], [1, "s", 0, 170, 237, 1], [1, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", 2, 162, 241, 1], [1, "s", 2, 170, 246, 1], [1, "s", 2, 167, 235, 1], [1, "s", 2, 176, 243, 1], [1, "r", 190, 207, 0], [1, "r", 191, 207, 0], [1, "r", 192, 208, 0], [1, "r", 191, 208, 0], [1, "r", 190, 208, 0], [1, "r", 189, 208, 0], [1, "r", 188, 208, 0], [1, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [1, "r", 188, 209, 0], [1, "r", 190, 210, 0], [1, "r", 191, 210, 0], [1, "r", 192, 210, 0], [1, "plm", 2, 189, 210, 0], [1, "plm", 2, 192, 205, 0], [1, "plm", 1, 192, 207, 0], [1, "plm", 0, 193, 210, 0], [1, "plm", 0, 187, 208, 0], [1, "plm", 0, 197, 206, 0], [1, "plm", 0, 191, 213, 0], [1, "plm", 0, 190, 204, 0], [1, "s", 1, 188, 207, 1], [1, "s", 1, 190, 211, 1], [1, "s", 2, 188, 213, 1], [1, "s", 2, 187, 205, 1], [1, "s", 0, 194, 210, 1], [1, "s", 0, 198, 207, 1], [1, "s", 1, 193, 204, 1], [1, "s", 1, 193, 213, 1], [1, "s", 2, 198, 212, 1], [1, "s", 2, 182, 208, 1], [1, "s", 1, 204, 271, 1], [1, "s", 0, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", 0, 195, 265, 1], [1, "s", 2, 196, 264, 1], [1, "s", 2, 186, 274, 1], [1, "s", 2, 197, 280, 1], [1, "s", 0, 217, 282, 1], [1, "s", 1, 214, 285, 1], [1, "s", 1, 214, 274, 1], [1, "s", 1, 203, 282, 1], [1, "s", 1, 205, 290, 1], [1, "s", 0, 207, 292, 1], [1, "s", 0, 197, 297, 1], [1, "s", 0, 184, 287, 1], [1, "s", 2, 213, 289, 1], [1, "s", 2, 196, 294, 1], [1, "s", 2, 187, 286, 1], [1, "s", 1, 192, 289, 1], [1, "s", 1, 189, 299, 1], [1, "s", 0, 213, 273, 1], [1, "g", 2, 212, 278, 1], [1, "g", 1, 200, 288, 1], [1, "g", 2, 215, 265, 1], [1, "g", 2, 183, 281, 1], [1, "s", 0, 178, 295, 1], [1, "s", 0, 167, 281, 1], [1, "s", 0, 175, 263, 1], [1, "s", 1, 176, 293, 1], [1, "s", 1, 163, 285, 1], [1, "s", 1, 177, 266, 1], [1, "s", 1, 161, 272, 1], [1, "s", 2, 185, 261, 1], [1, "c", 0, 217, 270, 1], [1, "c", 0, 220, 278, 1], [1, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, 1], [1, "c", 0, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, 1], [1, "c", 0, 208, 283, 1], [1, "c", 0, 197, 283, 1], [1, "c", 0, 190, 289, 1], [1, "c", 0, 183, 296, 1], [1, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, 1], [1, "c", 0, 208, 265, 1], [1, "c", 0, 169, 292, 1], [1, "s", 1, 158, 294, 1], [1, "s", 0, 151, 297, 1], [1, "s", 0, 147, 288, 1], [1, "c", 0, 150, 289, 1], [1, "c", 0, 160, 282, 1], [1, "c", 0, 146, 274, 1], [1, "c", 0, 167, 264, 1], [1, "c", 0, 165, 267, 1], [1, "g", 0, 189, 257, 1], [1, "g", 1, 197, 248, 1], [1, "g", 2, 170, 255, 1], [1, "g", 2, 212, 234, 1], [1, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, 1], [1, "g", 1, 210, 214, 1], [1, "s", 1, 153, 257, 1], [1, "s", 0, 158, 255, 1], [1, "s", 0, 184, 248, 1], [1, "s", 0, 212, 254, 1], [1, "s", 1, 203, 249, 1], [1, "s", 2, 204, 252, 1], [1, "s", 2, 187, 248, 1], [1, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, 1], [1, "s", 0, 181, 228, 1], [1, "s", 1, 199, 227, 1], [1, "s", 1, 208, 238, 1], [1, "s", 1, 179, 222, 1], [1, "s", 1, 213, 223, 1], [1, "s", 2, 182, 222, 1], [1, "s", 2, 211, 226, 1], [1, "s", 2, 214, 214, 1], [1, "s", 2, 201, 216, 1], [1, "s", 2, 215, 192, 1], [1, "s", 1, 210, 198, 1], [1, "s", 1, 198, 196, 1], [1, "s", 2, 208, 199, 1], [1, "s", 2, 187, 192, 1], [1, "s", 1, 179, 198, 1], [1, "s", 2, 177, 197, 1], [1, "s", 0, 164, 197, 1], [1, "s", 1, 159, 193, 1], [1, "s", 1, 149, 206, 1], [1, "s", 1, 164, 209, 1], [1, "s", 2, 165, 210, 1], [1, "s", 2, 161, 191, 1], [1, "s", 1, 162, 224, 1], [1, "s", 0, 150, 236, 1], [1, "s", 1, 149, 239, 1], [1, "s", 2, 153, 236, 1], [1, "s", 2, 160, 223, 1], [1, "s", 2, 151, 207, 1], [1, "s", 2, 147, 220, 1], [1, "s", 2, 145, 265, 1], [1, "s", 2, 145, 285, 1], [1, "c", 0, 152, 266, 1], [1, "c", 0, 185, 271, 1], [1, "c", 0, 210, 254, 1], [1, "c", 0, 209, 256, 1], [1, "c", 0, 198, 254, 1], [1, "c", 0, 213, 246, 1], [1, "c", 0, 216, 237, 1], [1, "c", 0, 204, 240, 1], [1, "c", 0, 196, 234, 1], [1, "c", 0, 188, 238, 1], [1, "c", 0, 182, 245, 1], [1, "c", 0, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", 0, 158, 233, 1], [1, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", 0, 157, 214, 1], [1, "c", 0, 167, 219, 1], [1, "c", 0, 171, 208, 1], [1, "c", 0, 179, 219, 1], [1, "c", 0, 176, 229, 1], [1, "c", 0, 195, 221, 1], [1, "c", 0, 207, 222, 1], [1, "c", 0, 214, 207, 1], [1, "c", 0, 205, 210, 1], [1, "c", 0, 204, 196, 1], [1, "c", 0, 214, 196, 1], [1, "c", 0, 190, 199, 1], [1, "c", 0, 184, 194, 1], [1, "c", 0, 172, 199, 1], [1, "c", 0, 161, 204, 1], [1, "c", 0, 157, 196, 1], [1, "c", 0, 149, 194, 1], [1, "c", 0, 147, 208, 1], [1, "c", 0, 207, 274, 1], [1, "c", 0, 217, 258, 1], [1, "c", 0, 201, 260, 1], [1, "c", 0, 178, 276, 1], [1, "c", 0, 187, 265, 1], [1, "s", 1, 204, 260, 1], [1, "s", 1, 216, 260, 1], [1, "s", 1, 187, 255, 1], [1, "s", 2, 189, 254, 1], [1, "s", 2, 212, 257, 1], [1, "s", 2, 182, 286, 1], [1, "s", 2, 169, 280, 1], [1, "s", 2, 217, 273, 1], [1, "s", 2, 215, 282, 1], [1, "s", 2, 172, 263, 1], [1, "s", 2, 176, 267, 1], [1, "s", 2, 215, 251, 1], [1, "fod", 1, 221, 282, 0], [1, "fod", 1, 222, 284, 0], [1, "fod", 1, 221, 290, 0], [1, "fod", 1, 222, 294, 0], [1, "fod", 1, 221, 297, 0], [1, "fod", 1, 223, 298, 0], [1, "fod", 1, 222, 300, 0], [1, "fod", 1, 218, 301, 0], [1, "fod", 1, 217, 299, 0], [1, "fod", 1, 215, 301, 0], [1, "fod", 1, 212, 300, 0], [1, "fod", 1, 206, 300, 0], [1, "fod", 1, 209, 301, 0], [1, "fod", 1, 204, 299, 0], [1, "fod", 1, 202, 301, 0], [1, "fod", 1, 199, 301, 0], [1, "fod", 1, 222, 282, 0], [1, "fod", 1, 207, 301, 0], [1, "fod", 1, 197, 301, 0], [1, "fod", 1, 215, 291, 0], [1, "fod", 1, 216, 286, 0], [1, "fod", 1, 214, 292, 0], [1, "fod", 1, 210, 289, 0], [1, "fod", 1, 208, 294, 0], [1, "fod", 1, 210, 298, 0], [1, "fod", 1, 212, 281, 0], [1, "fod", 1, 219, 278, 0], [1, "fod", 1, 219, 282, 0], [1, "fod", 1, 205, 286, 0], [1, "fod", 1, 202, 293, 0], [1, "fod", 1, 198, 295, 0], [1, "fod", 2, 213, 282, 0], [1, "fod", 2, 213, 291, 0], [1, "fod", 2, 216, 289, 0], [1, "fod", 2, 219, 289, 0], [1, "fod", 2, 218, 285, 0], [1, "fod", 2, 220, 283, 0], [1, "fod", 2, 211, 283, 0], [1, "fod", 2, 215, 281, 0], [1, "fod", 2, 217, 279, 0], [1, "fod", 2, 208, 290, 0], [1, "fod", 2, 211, 296, 0], [1, "fod", 2, 215, 294, 0], [1, "fod", 2, 212, 298, 0], [1, "fod", 2, 203, 294, 0], [1, "fod", 2, 204, 288, 0], [1, "fod", 2, 200, 294, 0], [1, "fod", 2, 198, 297, 0], [1, "fod", 2, 202, 299, 0], [1, "fod", 2, 200, 299, 0], [1, "fod", 2, 220, 300, 0], [1, "fod", 2, 220, 295, 0], [1, "fod", 2, 220, 292, 0], [1, "fod", 2, 219, 287, 0], [1, "fod", 2, 211, 288, 0], [1, "fod", 2, 213, 287, 0], [1, "fod", 2, 211, 289, 0], [1, "fod", 2, 212, 290, 0], [1, "fod", 2, 195, 296, 0], [1, "fod", 2, 196, 299, 0], [1, "fod", 2, 194, 300, 0], [1, "fod", 2, 195, 300, 0], [1, "fod", 2, 213, 279, 0], [1, "fod", 2, 211, 279, 0], [1, "fod", 0, 218, 290, 0], [1, "fod", 0, 212, 294, 0], [1, "fod", 1, 213, 295, 0], [1, "fod", 1, 217, 292, 0], [1, "fod", 1, 218, 288, 0], [1, "fod", 1, 210, 295, 0], [1, "fod", 1, 213, 292, 0], [1, "fod", 1, 212, 289, 0], [1, "fod", 1, 205, 295, 0], [1, "fod", 2, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, 0], [1, "fod", 2, 209, 299, 0], [1, "fod", 2, 211, 291, 0], [1, "fod", 1, 203, 275, 0], [1, "fod", 1, 204, 272, 0], [1, "fod", 2, 205, 273, 0], [1, "fod", 2, 204, 276, 0], [1, "fod", 2, 202, 276, 0], [1, "fod", 2, 199, 277, 0], [1, "fod", 2, 202, 273, 0], [1, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [1, "fod", 2, 194, 277, 0], [1, "fod", 1, 192, 274, 0], [1, "fod", 1, 194, 267, 0], [1, "fod", 2, 194, 265, 0], [1, "fod", 2, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [1, "fod", 2, 195, 274, 0], [1, "fod", 2, 200, 271, 0], [1, "fod", 1, 168, 243, 0], [1, "fod", 1, 175, 240, 0], [1, "fod", 1, 169, 234, 0], [1, "fod", 1, 162, 235, 0], [1, "fod", 2, 169, 236, 0], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, 0], [1, "fod", 2, 173, 241, 0], [1, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, 0], [1, "fod", 2, 169, 244, 0], [1, "fod", 2, 166, 243, 0], [1, "fod", 2, 162, 236, 0], [1, "fod", 2, 164, 235, 0], [1, "fod", 2, 162, 233, 0], [1, "fod", 2, 163, 236, 0], [1, "fod", 2, 174, 242, 0], [1, "fod", 2, 171, 243, 0], [1, "fod", 1, 194, 206, 0], [1, "fod", 1, 190, 214, 0], [1, "fod", 1, 186, 206, 0], [1, "fod", 1, 197, 207, 0], [1, "fod", 2, 196, 208, 0], [1, "fod", 2, 198, 206, 0], [1, "fod", 2, 198, 208, 0], [1, "fod", 2, 194, 204, 0], [1, "fod", 2, 187, 206, 0], [1, "fod", 2, 186, 204, 0], [1, "fod", 2, 189, 214, 0], [1, "fod", 2, 189, 213, 0], [1, "fod", 2, 193, 215, 0], [1, "fod", 2, 194, 214, 0], [1, "fod", 2, 187, 215, 0], [1, "fod", 2, 193, 209, 0], [1, "fod", 2, 189, 211, 0], [1, "fod", 2, 187, 209, 0], [1, "fod", 2, 187, 207, 0], [1, "fod", 2, 191, 205, 0], [1, "fod", 2, 189, 203, 0], [1, "cs", 2, 224, 176, 1], [1, "cs", 0, 224, 177, 1], [1, "cs", 3, 224, 178, 1], [1, "cs", 2, 224, 179, 1], [1, "cs", 1, 224, 180, 1], [1, "cs", 2, 224, 181, 1], [1, "cs", 0, 224, 182, 1], [1, "cs", 2, 224, 183, 1], [1, "cs", 0, 224, 184, 1], [1, "cs", 3, 224, 185, 1], [1, "cs", 2, 224, 186, 1], [1, "cs", 0, 224, 187, 1], [1, "cs", 2, 224, 188, 1], [1, "cs", 0, 224, 189, 1], [1, "cs", 1, 224, 190, 1], [1, "cs", 2, 224, 191, 1], [1, "cs", 0, 224, 192, 1], [1, "cs", 2, 224, 193, 1], [1, "cs", 2, 224, 194, 1], [1, "cs", 1, 224, 195, 1], [1, "cs", 2, 224, 196, 1], [1, "cs", 0, 224, 197, 1], [1, "cs", 3, 224, 198, 1], [1, "cs", 2, 224, 199, 1], [1, "cs", 1, 224, 200, 1], [1, "cs", 2, 224, 201, 1], [1, "cs", 3, 224, 202, 1], [1, "cs", 0, 224, 203, 1], [1, "cs", 1, 224, 204, 1], [1, "cs", 2, 224, 205, 1], [1, "cs", 0, 224, 206, 1], [1, "cs", 1, 224, 207, 1], [1, "cs", 3, 224, 208, 1], [1, "cs", 2, 224, 209, 1], [1, "cs", 2, 224, 210, 1], [1, "cs", 0, 223, 211, 1], [1, "cs", 1, 224, 211, 1], [1, "cs", 2, 224, 212, 1], [1, "cs", 2, 224, 213, 1], [1, "cs", 1, 224, 214, 1], [1, "cs", 3, 224, 215, 1], [1, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, 1], [1, "cs", 2, 224, 218, 1], [1, "cs", 3, 224, 219, 1], [1, "cs", 0, 223, 215, 1], [1, "cs", 2, 223, 214, 1], [1, "cs", 2, 223, 212, 1], [1, "cs", 2, 223, 216, 1], [1, "cs", 3, 223, 217, 1], [1, "cs", 0, 223, 218, 1], [1, "cs", 0, 224, 220, 1], [1, "cs", 0, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [1, "cs", 0, 223, 205, 1], [1, "cs", 2, 224, 221, 1], [1, "cs", 2, 223, 219, 1], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [1, "cs", 2, 223, 210, 1], [1, "cs", 1, 223, 178, 1], [1, "cs", 3, 223, 179, 1], [1, "cs", 3, 223, 181, 1], [1, "cs", 3, 223, 182, 1], [1, "cs", 1, 223, 185, 1], [1, "cs", 2, 223, 184, 1], [1, "cs", 2, 223, 186, 1], [1, "cs", 0, 223, 180, 1], [1, "cs", 0, 223, 183, 1], [1, "cs", 2, 223, 187, 1], [1, "cs", 1, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [1, "cs", 2, 223, 190, 1], [1, "cs", 3, 223, 191, 1], [1, "cs", 1, 223, 192, 1], [1, "cs", 2, 223, 193, 1], [1, "cs", 2, 223, 194, 1], [1, "cs", 3, 223, 195, 1], [1, "cs", 1, 223, 196, 1], [1, "cs", 2, 223, 197, 1], [1, "cs", 2, 223, 199, 1], [1, "cs", 2, 223, 198, 1], [1, "cs", 0, 223, 200, 1], [1, "cs", 2, 223, 201, 1], [1, "cs", 0, 223, 202, 1], [1, "cs", 3, 223, 203, 1], [1, "cs", 3, 223, 204, 1], [1, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, 1], [1, "cs", 3, 223, 208, 1], [1, "cs", 2, 223, 221, 1], [1, "cs", 2, 223, 222, 1], [1, "cs", 0, 223, 224, 1], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, 1], [1, "cs", 0, 223, 234, 1], [1, "cs", 2, 223, 223, 1], [1, "cs", 2, 224, 223, 1], [1, "cs", 2, 224, 224, 1], [1, "cs", 2, 224, 225, 1], [1, "cs", 1, 223, 226, 1], [1, "cs", 1, 224, 231, 1], [1, "cs", 1, 223, 232, 1], [1, "cs", 3, 223, 225, 1], [1, "cs", 3, 224, 226, 1], [1, "cs", 3, 223, 227, 1], [1, "cs", 3, 224, 227, 1], [1, "cs", 3, 223, 229, 1], [1, "cs", 3, 223, 228, 1], [1, "cs", 3, 224, 229, 1], [1, "cs", 3, 223, 230, 1], [1, "cs", 3, 223, 231, 1], [1, "cs", 3, 224, 232, 1], [1, "cs", 3, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [1, "cs", 3, 224, 234, 1], [1, "cs", 3, 224, 235, 1], [1, "cs", 3, 223, 235, 1], [1, "cs", 1, 224, 236, 1], [1, "cs", 2, 223, 236, 1], [1, "cs", 2, 223, 237, 1], [1, "cs", 3, 224, 237, 1], [1, "cs", 3, 224, 238, 1], [1, "cs", 0, 224, 239, 1], [1, "cs", 1, 223, 241, 1], [1, "cs", 0, 224, 243, 1], [1, "cs", 0, 223, 245, 1], [1, "cs", 0, 224, 247, 1], [1, "cs", 2, 223, 240, 1], [1, "cs", 2, 223, 239, 1], [1, "cs", 2, 224, 240, 1], [1, "cs", 2, 224, 241, 1], [1, "cs", 2, 224, 242, 1], [1, "cs", 2, 223, 242, 1], [1, "cs", 2, 223, 243, 1], [1, "cs", 2, 223, 244, 1], [1, "cs", 2, 224, 244, 1], [1, "cs", 2, 224, 245, 1], [1, "cs", 2, 224, 246, 1], [1, "cs", 3, 223, 238, 1], [1, "cs", 3, 223, 246, 1], [1, "cs", 2, 223, 247, 1], [1, "cs", 1, 223, 249, 1], [1, "cs", 1, 224, 253, 1], [1, "cs", 1, 223, 256, 1], [1, "cs", 0, 223, 254, 1], [1, "cs", 0, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [1, "cs", 3, 223, 250, 1], [1, "cs", 3, 223, 252, 1], [1, "cs", 3, 223, 255, 1], [1, "cs", 3, 223, 257, 1], [1, "cs", 2, 224, 248, 1], [1, "cs", 2, 224, 249, 1], [1, "cs", 2, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [1, "cs", 2, 224, 252, 1], [1, "cs", 2, 223, 253, 1], [1, "cs", 2, 224, 254, 1], [1, "cs", 2, 224, 255, 1], [1, "cs", 2, 224, 256, 1], [1, "cs", 2, 224, 257, 1], [1, "cs", 0, 224, 258, 1], [1, "cs", 0, 223, 261, 1], [1, "cs", 0, 224, 263, 1], [1, "cs", 0, 224, 266, 1], [1, "cs", 0, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [1, "cs", 0, 223, 275, 1], [1, "cs", 1, 223, 259, 1], [1, "cs", 1, 223, 264, 1], [1, "cs", 1, 223, 268, 1], [1, "cs", 1, 224, 274, 1], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, 1], [1, "cs", 2, 223, 263, 1], [1, "cs", 2, 223, 265, 1], [1, "cs", 2, 223, 267, 1], [1, "cs", 2, 223, 271, 1], [1, "cs", 2, 223, 273, 1], [1, "cs", 3, 223, 262, 1], [1, "cs", 3, 223, 266, 1], [1, "cs", 3, 223, 269, 1], [1, "cs", 3, 223, 272, 1], [1, "cs", 3, 223, 274, 1], [1, "cs", 3, 224, 275, 1], [1, "cs", 3, 224, 273, 1], [1, "cs", 3, 224, 271, 1], [1, "cs", 3, 224, 270, 1], [1, "cs", 3, 224, 269, 1], [1, "cs", 3, 224, 268, 1], [1, "cs", 3, 224, 267, 1], [1, "cs", 3, 224, 265, 1], [1, "cs", 3, 224, 264, 1], [1, "cs", 3, 224, 262, 1], [1, "cs", 3, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [1, "cs", 3, 224, 259, 1], [1, "cs", 2, 223, 276, 1], [1, "cs", 1, 224, 276, 1], [1, "cs", 1, 224, 280, 1], [1, "cs", 1, 223, 281, 1], [1, "cs", 1, 224, 286, 1], [1, "cs", 0, 223, 280, 1], [1, "cs", 0, 223, 284, 1], [1, "cs", 0, 224, 288, 1], [1, "cs", 0, 224, 279, 1], [1, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, 1], [1, "cs", 2, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [1, "cs", 2, 224, 282, 1], [1, "cs", 2, 224, 284, 1], [1, "cs", 2, 224, 285, 1], [1, "cs", 2, 224, 287, 1], [1, "cs", 2, 223, 287, 1], [1, "cs", 2, 223, 285, 1], [1, "cs", 2, 223, 283, 1], [1, "cs", 2, 223, 279, 1], [1, "cs", 3, 223, 278, 1], [1, "cs", 3, 223, 282, 1], [1, "cs", 3, 223, 286, 1], [1, "cs", 3, 223, 289, 1], [1, "cs", 3, 224, 289, 1], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [1, "cs", 1, 223, 290, 1], [1, "cs", 0, 224, 292, 1], [1, "cs", 0, 223, 294, 1], [1, "cs", 0, 224, 297, 1], [1, "cs", 0, 223, 299, 1], [1, "cs", 2, 223, 291, 1], [1, "cs", 2, 224, 291, 1], [1, "cs", 2, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [1, "cs", 2, 224, 293, 1], [1, "cs", 2, 224, 294, 1], [1, "cs", 1, 224, 295, 1], [1, "cs", 2, 223, 295, 1], [1, "cs", 2, 223, 296, 1], [1, "cs", 2, 224, 296, 1], [1, "cs", 2, 223, 297, 1], [1, "cs", 2, 223, 298, 1], [1, "cs", 2, 224, 298, 1], [1, "cs", 2, 224, 299, 1], [1, "cs", 2, 223, 300, 1], [1, "cs", 1, 224, 300, 1], [1, "cs", 0, 223, 301, 1], [1, "cs", 0, 224, 302, 1], [1, "cs", 0, 224, 304, 1], [1, "cs", 3, 224, 301, 1], [1, "cs", 3, 224, 303, 1], [1, "cs", 0, 221, 303, 1], [1, "cs", 0, 219, 304, 1], [1, "cs", 1, 222, 304, 1], [1, "cs", 1, 222, 302, 1], [1, "cs", 2, 223, 302, 1], [1, "cs", 2, 223, 303, 1], [1, "cs", 2, 222, 303, 1], [1, "cs", 2, 223, 304, 1], [1, "cs", 2, 221, 304, 1], [1, "cs", 2, 220, 304, 1], [1, "cs", 2, 220, 303, 1], [1, "cs", 2, 220, 302, 1], [1, "cs", 2, 221, 302, 1], [1, "cs", 2, 219, 303, 1], [1, "cs", 0, 217, 302, 1], [1, "cs", 0, 215, 304, 1], [1, "cs", 0, 214, 302, 1], [1, "cs", 1, 218, 302, 1], [1, "cs", 1, 217, 304, 1], [1, "cs", 1, 215, 302, 1], [1, "cs", 2, 219, 302, 1], [1, "cs", 2, 218, 303, 1], [1, "cs", 2, 218, 304, 1], [1, "cs", 2, 217, 303, 1], [1, "cs", 2, 216, 304, 1], [1, "cs", 2, 215, 303, 1], [1, "cs", 2, 216, 303, 1], [1, "cs", 2, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [1, "cs", 2, 214, 304, 1], [1, "cs", 0, 212, 302, 1], [1, "cs", 0, 210, 303, 1], [1, "cs", 0, 212, 304, 1], [1, "cs", 0, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [1, "cs", 1, 208, 303, 1], [1, "cs", 2, 213, 302, 1], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, 1], [1, "cs", 2, 212, 303, 1], [1, "cs", 2, 211, 304, 1], [1, "cs", 2, 211, 303, 1], [1, "cs", 2, 211, 302, 1], [1, "cs", 2, 209, 302, 1], [1, "cs", 2, 209, 303, 1], [1, "cs", 2, 209, 304, 1], [1, "cs", 2, 210, 304, 1], [1, "cs", 2, 208, 302, 1], [1, "cs", 0, 206, 303, 1], [1, "cs", 0, 203, 304, 1], [1, "cs", 0, 200, 303, 1], [1, "cs", 0, 199, 304, 1], [1, "cs", 0, 195, 304, 1], [1, "cs", 0, 191, 303, 1], [1, "cs", 0, 193, 304, 1], [1, "cs", 0, 189, 304, 1], [1, "cs", 1, 204, 303, 1], [1, "cs", 0, 197, 302, 1], [1, "cs", 0, 202, 302, 1], [1, "cs", 0, 188, 302, 1], [1, "cs", 0, 194, 302, 1], [1, "cs", 1, 197, 303, 1], [1, "cs", 1, 201, 304, 1], [1, "cs", 1, 192, 302, 1], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [1, "cs", 1, 188, 304, 1], [1, "cs", 2, 207, 302, 1], [1, "cs", 2, 207, 303, 1], [1, "cs", 2, 207, 304, 1], [1, "cs", 2, 206, 304, 1], [1, "cs", 2, 206, 302, 1], [1, "cs", 2, 205, 303, 1], [1, "cs", 2, 204, 304, 1], [1, "cs", 2, 205, 304, 1], [1, "cs", 2, 204, 302, 1], [1, "cs", 2, 203, 302, 1], [1, "cs", 2, 203, 303, 1], [1, "cs", 2, 202, 303, 1], [1, "cs", 2, 201, 303, 1], [1, "cs", 2, 201, 302, 1], [1, "cs", 2, 200, 302, 1], [1, "cs", 2, 199, 302, 1], [1, "cs", 2, 198, 303, 1], [1, "cs", 2, 198, 302, 1], [1, "cs", 2, 199, 303, 1], [1, "cs", 2, 200, 304, 1], [1, "cs", 2, 202, 304, 1], [1, "cs", 2, 197, 304, 1], [1, "cs", 2, 198, 304, 1], [1, "cs", 2, 196, 304, 1], [1, "cs", 2, 196, 303, 1], [1, "cs", 2, 196, 302, 1], [1, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", 2, 194, 303, 1], [1, "cs", 2, 194, 304, 1], [1, "cs", 2, 193, 303, 1], [1, "cs", 2, 193, 302, 1], [1, "cs", 2, 192, 303, 1], [1, "cs", 2, 192, 304, 1], [1, "cs", 2, 191, 304, 1], [1, "cs", 2, 190, 304, 1], [1, "cs", 2, 190, 303, 1], [1, "cs", 2, 189, 302, 1], [1, "cs", 2, 190, 302, 1], [1, "cs", 2, 191, 302, 1], [1, "cs", 2, 188, 303, 1], [1, "cs", 0, 186, 303, 1], [1, "cs", 0, 183, 304, 1], [1, "cs", 0, 184, 302, 1], [1, "cs", 0, 181, 302, 1], [1, "cs", 0, 176, 302, 1], [1, "cs", 0, 178, 303, 1], [1, "cs", 0, 173, 304, 1], [1, "cs", 0, 170, 303, 1], [1, "cs", 0, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", 1, 178, 304, 1], [1, "cs", 1, 175, 304, 1], [1, "cs", 1, 173, 302, 1], [1, "cs", 1, 185, 304, 1], [1, "cs", 1, 169, 304, 1], [1, "cs", 3, 187, 304, 1], [1, "cs", 3, 186, 304, 1], [1, "cs", 3, 187, 303, 1], [1, "cs", 3, 187, 302, 1], [1, "cs", 3, 186, 302, 1], [1, "cs", 3, 185, 302, 1], [1, "cs", 3, 185, 303, 1], [1, "cs", 3, 184, 303, 1], [1, "cs", 3, 183, 303, 1], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, 1], [1, "cs", 3, 184, 304, 1], [1, "cs", 3, 182, 304, 1], [1, "cs", 3, 181, 304, 1], [1, "cs", 3, 179, 304, 1], [1, "cs", 3, 180, 304, 1], [1, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, 1], [1, "cs", 3, 179, 303, 1], [1, "cs", 3, 180, 302, 1], [1, "cs", 3, 179, 302, 1], [1, "cs", 3, 178, 302, 1], [1, "cs", 3, 177, 302, 1], [1, "cs", 3, 177, 304, 1], [1, "cs", 3, 177, 303, 1], [1, "cs", 3, 176, 303, 1], [1, "cs", 3, 176, 304, 1], [1, "cs", 3, 174, 304, 1], [1, "cs", 3, 175, 303, 1], [1, "cs", 3, 174, 303, 1], [1, "cs", 3, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [1, "cs", 3, 171, 303, 1], [1, "cs", 3, 170, 304, 1], [1, "cs", 3, 171, 304, 1], [1, "cs", 3, 172, 304, 1], [1, "cs", 3, 174, 302, 1], [1, "cs", 3, 175, 302, 1], [1, "cs", 3, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [1, "cs", 3, 169, 302, 1], [1, "cs", 3, 169, 303, 1], [1, "cs", 0, 168, 302, 1], [1, "cs", 0, 166, 303, 1], [1, "cs", 0, 163, 304, 1], [1, "cs", 0, 161, 302, 1], [1, "cs", 0, 159, 303, 1], [1, "cs", 0, 152, 304, 1], [1, "cs", 0, 155, 303, 1], [1, "cs", 1, 164, 303, 1], [1, "cs", 1, 162, 303, 1], [1, "cs", 1, 158, 304, 1], [1, "cs", 1, 156, 302, 1], [1, "cs", 1, 153, 302, 1], [1, "cs", 1, 154, 304, 1], [1, "cs", 2, 168, 304, 1], [1, "cs", 2, 168, 303, 1], [1, "cs", 2, 167, 303, 1], [1, "cs", 2, 167, 304, 1], [1, "cs", 2, 166, 304, 1], [1, "cs", 2, 165, 304, 1], [1, "cs", 2, 164, 304, 1], [1, "cs", 2, 165, 303, 1], [1, "cs", 2, 167, 302, 1], [1, "cs", 2, 166, 302, 1], [1, "cs", 2, 165, 302, 1], [1, "cs", 2, 164, 302, 1], [1, "cs", 2, 163, 302, 1], [1, "cs", 2, 162, 302, 1], [1, "cs", 2, 163, 303, 1], [1, "cs", 2, 162, 304, 1], [1, "cs", 2, 160, 304, 1], [1, "cs", 2, 159, 304, 1], [1, "cs", 2, 161, 304, 1], [1, "cs", 2, 161, 303, 1], [1, "cs", 2, 160, 303, 1], [1, "cs", 2, 160, 302, 1], [1, "cs", 2, 158, 302, 1], [1, "cs", 2, 159, 302, 1], [1, "cs", 2, 157, 302, 1], [1, "cs", 2, 156, 303, 1], [1, "cs", 2, 157, 303, 1], [1, "cs", 2, 158, 303, 1], [1, "cs", 2, 157, 304, 1], [1, "cs", 2, 156, 304, 1], [1, "cs", 2, 155, 304, 1], [1, "cs", 2, 153, 304, 1], [1, "cs", 2, 153, 303, 1], [1, "cs", 2, 154, 303, 1], [1, "cs", 2, 154, 302, 1], [1, "cs", 2, 155, 302, 1], [1, "cs", 2, 152, 303, 1], [1, "cs", 2, 152, 302, 1], [1, "cs", 0, 151, 302, 1], [1, "cs", 0, 149, 303, 1], [1, "cs", 0, 145, 304, 1], [1, "cs", 0, 147, 302, 1], [1, "cs", 0, 143, 303, 1], [1, "cs", 0, 141, 303, 1], [1, "cs", 1, 147, 304, 1], [1, "cs", 1, 145, 302, 1], [1, "cs", 1, 142, 302, 1], [1, "cs", 1, 150, 304, 1], [1, "cs", 2, 151, 304, 1], [1, "cs", 2, 151, 303, 1], [1, "cs", 2, 150, 303, 1], [1, "cs", 2, 150, 302, 1], [1, "cs", 2, 148, 302, 1], [1, "cs", 2, 146, 302, 1], [1, "cs", 2, 144, 302, 1], [1, "cs", 2, 141, 302, 1], [1, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, 1], [1, "cs", 2, 142, 303, 1], [1, "cs", 2, 143, 304, 1], [1, "cs", 2, 144, 304, 1], [1, "cs", 2, 144, 303, 1], [1, "cs", 2, 148, 304, 1], [1, "cs", 2, 148, 303, 1], [1, "cs", 2, 146, 303, 1], [1, "cs", 2, 145, 303, 1], [1, "cs", 2, 147, 303, 1], [1, "cs", 2, 146, 304, 1], [1, "cs", 2, 149, 304, 1], [1, "cs", 3, 149, 302, 1], [1, "cs", 3, 143, 302, 1], [1, "cs", 0, 139, 304, 1], [1, "cs", 0, 138, 302, 1], [1, "cs", 1, 139, 302, 1], [1, "cs", 2, 140, 302, 1], [1, "cs", 2, 140, 303, 1], [1, "cs", 2, 139, 303, 1], [1, "cs", 2, 138, 303, 1], [1, "cs", 2, 138, 304, 1], [1, "cs", 2, 140, 304, 1], [1, "cs", 0, 137, 304, 1], [1, "cs", 0, 135, 303, 1], [1, "cs", 0, 133, 304, 1], [1, "cs", 1, 135, 304, 1], [1, "cs", 1, 136, 302, 1], [1, "cs", 2, 137, 302, 1], [1, "cs", 2, 136, 303, 1], [1, "cs", 2, 137, 303, 1], [1, "cs", 2, 136, 304, 1], [1, "cs", 2, 134, 304, 1], [1, "cs", 2, 134, 303, 1], [1, "cs", 2, 133, 303, 1], [1, "cs", 2, 132, 304, 1], [1, "cs", 0, 131, 302, 1], [1, "cs", 0, 134, 302, 1], [1, "cs", 0, 129, 304, 1], [1, "cs", 1, 130, 303, 1], [1, "cs", 1, 132, 302, 1], [1, "cs", 2, 135, 302, 1], [1, "cs", 2, 133, 302, 1], [1, "cs", 2, 132, 303, 1], [1, "cs", 2, 131, 303, 1], [1, "cs", 2, 130, 304, 1], [1, "cs", 2, 131, 304, 1], [1, "cs", 2, 128, 304, 1], [1, "cs", 2, 129, 303, 1], [1, "cs", 2, 130, 302, 1], [1, "cs", 3, 127, 304, 1], [1, "cs", 2, 132, 301, 1], [1, "cs", 2, 133, 301, 1], [1, "cs", 2, 134, 301, 1], [1, "cs", 2, 135, 301, 1], [1, "cs", 3, 131, 301, 1], [1, "cs", 3, 136, 301, 1], [1, "cs", 3, 136, 178, 1], [1, "cs", 0, 136, 183, 1], [1, "cs", 2, 136, 182, 1], [1, "cs", 1, 136, 181, 1], [1, "cs", 0, 136, 179, 1], [1, "cs", 3, 136, 180, 1], [1, "cs", 2, 135, 183, 1], [1, "cs", 1, 135, 182, 1], [1, "cs", 3, 135, 180, 1], [1, "cs", 0, 134, 183, 1], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, 1], [1, "cs", 1, 132, 183, 1], [1, "cs", 3, 131, 183, 1], [1, "cs", 2, 135, 181, 1], [1, "cs", 2, 134, 182, 1], [1, "cs", 3, 134, 181, 1], [1, "fod", 0, 213, 301, 0], [1, "fod", 0, 204, 301, 0], [1, "fod", 1, 196, 288, 0], [1, "fod", 1, 198, 283, 0], [1, "fod", 1, 190, 288, 0], [1, "fod", 1, 189, 296, 0], [1, "fod", 1, 193, 293, 0], [1, "fod", 1, 183, 292, 0], [1, "fod", 1, 186, 287, 0], [1, "fod", 1, 190, 290, 0], [1, "fod", 1, 218, 271, 0], [1, "fod", 1, 220, 266, 0], [1, "fod", 1, 211, 268, 0], [1, "fod", 1, 210, 274, 0], [1, "fod", 1, 205, 263, 0], [1, "fod", 1, 216, 258, 0], [1, "fod", 2, 201, 294, 0], [1, "fod", 2, 190, 296, 0], [1, "fod", 2, 188, 299, 0], [1, "fod", 2, 186, 297, 0], [1, "fod", 2, 188, 296, 0], [1, "fod", 2, 189, 291, 0], [1, "fod", 2, 189, 286, 0], [1, "fod", 2, 191, 286, 0], [1, "fod", 2, 197, 286, 0], [1, "fod", 2, 195, 290, 0], [1, "fod", 2, 186, 288, 0], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, 0], [1, "fod", 2, 198, 286, 0], [1, "fod", 2, 196, 283, 0], [1, "fod", 2, 196, 281, 0], [1, "fod", 2, 201, 280, 0], [1, "fod", 2, 205, 287, 0], [1, "fod", 2, 209, 283, 0], [1, "fod", 2, 212, 280, 0], [1, "fod", 2, 209, 277, 0], [1, "fod", 2, 217, 278, 0], [1, "fod", 2, 219, 275, 0], [1, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", 2, 217, 265, 0], [1, "fod", 2, 213, 267, 0], [1, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [1, "fod", 2, 204, 270, 0], [1, "fod", 2, 196, 267, 0], [1, "fod", 2, 214, 261, 0], [1, "fod", 2, 211, 260, 0], [1, "fod", 2, 218, 256, 0], [1, "fod", 2, 219, 262, 0], [1, "fod", 2, 220, 253, 0], [1, "fod", 2, 211, 257, 0], [1, "la", 3, 198, 27, 1], [1, "la", 3, 201, 30, 1], [1, "la", 3, 200, 32, 1], [1, "la", 3, 198, 33, 1], [1, "la", 3, 196, 33, 1], [1, "la", 3, 194, 32, 1], [1, "la", 3, 194, 28, 1], [1, "la", 0, 200, 28, 1], [1, "la", 0, 193, 30, 1], [1, "la", 3, 196, 27, 1], [1, "la", 3, 199, 30, 1], [1, "la", 3, 197, 29, 1], [1, "la", 3, 195, 30, 1], [1, "la", 3, 197, 31, 1], [1, "la", 2, 201, 33, 1], [1, "la", 4, 202, 34, 1], [1, "la", 4, 202, 35, 1], [1, "la", 4, 203, 36, 1], [1, "la", 4, 204, 37, 1], [1, "la", 2, 205, 38, 1], [1, "la", 5, 205, 39, 1], [1, "la", 5, 205, 40, 1], [1, "la", 2, 206, 41, 1], [1, "la", 1, 207, 42, 1], [1, "la", 1, 205, 41, 1], [1, "la", 4, 208, 43, 1], [1, "la", 4, 209, 43, 1], [1, "la", 1, 210, 43, 1], [1, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, 1], [1, "la", 4, 213, 44, 1], [1, "la", 3, 223, 54, 1], [1, "la", 3, 221, 53, 1], [1, "la", 3, 219, 53, 1], [1, "la", 4, 218, 52, 1], [1, "la", 4, 217, 51, 1], [1, "la", 4, 216, 51, 1], [1, "la", 1, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", 1, 210, 44, 1], [1, "la", 3, 206, 50, 1], [1, "re", 0, 217, 24, 1], [1, "re", 0, 207, 16, 1], [1, "de", 44, 54, 14, 0], [1, "de", 44, 53, 13, 0], [1, "de", 44, 51, 16, 0], [1, "de", 44, 49, 13, 0], [1, "de", 44, 48, 14, 0], [1, "de", 21, 78, 293, 0], [1, "cs", 0, 221, 8, 1], [1, "cs", 0, 224, 9, 1], [1, "cs", 1, 223, 8, 1], [1, "cs", 2, 224, 8, 1], [1, "cs", 2, 222, 8, 1], [1, "cs", 0, 224, 6, 1], [1, "cs", 0, 222, 5, 1], [1, "cs", 0, 219, 7, 1], [1, "cs", 1, 220, 5, 1], [1, "cs", 1, 217, 7, 1], [1, "cs", 2, 224, 5, 1], [1, "cs", 2, 223, 5, 1], [1, "cs", 2, 224, 7, 1], [1, "cs", 2, 223, 7, 1], [1, "cs", 2, 223, 6, 1], [1, "cs", 2, 222, 6, 1], [1, "cs", 2, 222, 7, 1], [1, "cs", 2, 221, 7, 1], [1, "cs", 2, 221, 6, 1], [1, "cs", 2, 221, 5, 1], [1, "cs", 2, 220, 6, 1], [1, "cs", 2, 220, 7, 1], [1, "cs", 2, 220, 8, 1], [1, "cs", 2, 219, 8, 1], [1, "cs", 2, 219, 6, 1], [1, "cs", 2, 219, 5, 1], [1, "cs", 0, 218, 5, 1], [1, "cs", 0, 216, 8, 1], [1, "cs", 2, 218, 8, 1], [1, "cs", 2, 217, 8, 1], [1, "cs", 2, 218, 7, 1], [1, "cs", 2, 218, 6, 1], [1, "cs", 2, 217, 6, 1], [1, "cs", 2, 217, 5, 1], [1, "cs", 1, 215, 6, 1], [1, "cs", 1, 213, 5, 1], [1, "cs", 0, 214, 6, 1], [1, "cs", 0, 216, 5, 1], [1, "cs", 0, 213, 8, 1], [1, "cs", 0, 211, 7, 1], [1, "cs", 0, 209, 5, 1], [1, "cs", 0, 208, 7, 1], [1, "cs", 0, 207, 8, 1], [1, "cs", 2, 216, 6, 1], [1, "cs", 2, 216, 7, 1], [1, "cs", 2, 215, 7, 1], [1, "cs", 2, 215, 8, 1], [1, "cs", 2, 214, 8, 1], [1, "cs", 2, 214, 7, 1], [1, "cs", 2, 215, 5, 1], [1, "cs", 2, 214, 5, 1], [1, "cs", 2, 213, 6, 1], [1, "cs", 2, 213, 7, 1], [1, "cs", 2, 212, 7, 1], [1, "cs", 1, 211, 5, 1], [1, "cs", 1, 209, 8, 1], [1, "cs", 2, 212, 8, 1], [1, "cs", 2, 211, 8, 1], [1, "cs", 2, 210, 8, 1], [1, "cs", 2, 209, 7, 1], [1, "cs", 2, 210, 7, 1], [1, "cs", 2, 210, 6, 1], [1, "cs", 2, 212, 6, 1], [1, "cs", 2, 212, 5, 1], [1, "cs", 2, 211, 6, 1], [1, "cs", 2, 210, 5, 1], [1, "cs", 2, 209, 6, 1], [1, "cs", 2, 208, 6, 1], [1, "cs", 2, 208, 5, 1], [1, "cs", 2, 207, 7, 1], [1, "cs", 2, 207, 6, 1], [1, "cs", 2, 207, 5, 1], [1, "cs", 2, 206, 5, 1], [1, "cs", 2, 208, 8, 1], [1, "cs", 2, 206, 6, 1], [1, "cs", 0, 204, 8, 1], [1, "cs", 0, 205, 6, 1], [1, "cs", 0, 203, 5, 1], [1, "cs", 0, 202, 7, 1], [1, "cs", 0, 199, 8, 1], [1, "cs", 0, 200, 6, 1], [1, "cs", 0, 197, 6, 1], [1, "cs", 0, 195, 8, 1], [1, "cs", 0, 194, 6, 1], [1, "cs", 1, 202, 8, 1], [1, "cs", 1, 206, 7, 1], [1, "cs", 1, 201, 5, 1], [1, "cs", 1, 197, 8, 1], [1, "cs", 1, 192, 7, 1], [1, "cs", 1, 195, 5, 1], [1, "cs", 2, 205, 7, 1], [1, "cs", 2, 205, 8, 1], [1, "cs", 2, 206, 8, 1], [1, "cs", 2, 204, 7, 1], [1, "cs", 2, 204, 6, 1], [1, "cs", 2, 204, 5, 1], [1, "cs", 2, 205, 5, 1], [1, "cs", 2, 203, 6, 1], [1, "cs", 2, 203, 7, 1], [1, "cs", 2, 203, 8, 1], [1, "cs", 2, 201, 8, 1], [1, "cs", 2, 200, 8, 1], [1, "cs", 2, 200, 7, 1], [1, "cs", 2, 201, 7, 1], [1, "cs", 2, 201, 6, 1], [1, "cs", 2, 202, 5, 1], [1, "cs", 2, 202, 6, 1], [1, "cs", 2, 200, 5, 1], [1, "cs", 2, 199, 5, 1], [1, "cs", 2, 197, 5, 1], [1, "cs", 2, 196, 5, 1], [1, "cs", 2, 198, 5, 1], [1, "cs", 2, 198, 6, 1], [1, "cs", 2, 199, 6, 1], [1, "cs", 2, 199, 7, 1], [1, "cs", 2, 198, 7, 1], [1, "cs", 2, 198, 8, 1], [1, "cs", 2, 197, 7, 1], [1, "cs", 2, 196, 7, 1], [1, "cs", 2, 196, 8, 1], [1, "cs", 2, 196, 6, 1], [1, "cs", 2, 195, 6, 1], [1, "cs", 2, 195, 7, 1], [1, "cs", 2, 194, 7, 1], [1, "cs", 2, 193, 8, 1], [1, "cs", 2, 194, 8, 1], [1, "cs", 2, 193, 7, 1], [1, "cs", 2, 193, 6, 1], [1, "cs", 2, 193, 5, 1], [1, "cs", 2, 194, 5, 1], [1, "cs", 0, 192, 5, 1], [1, "cs", 0, 191, 8, 1], [1, "cs", 0, 190, 6, 1], [1, "cs", 0, 188, 7, 1], [1, "cs", 0, 186, 8, 1], [1, "cs", 0, 186, 5, 1], [1, "cs", 0, 184, 7, 1], [1, "cs", 0, 182, 8, 1], [1, "cs", 0, 181, 6, 1], [1, "cs", 1, 189, 8, 1], [1, "cs", 1, 183, 8, 1], [1, "cs", 1, 188, 5, 1], [1, "cs", 1, 185, 6, 1], [1, "cs", 1, 180, 7, 1], [1, "cs", 1, 183, 5, 1], [1, "cs", 1, 178, 8, 1], [1, "cs", 1, 177, 6, 1], [1, "cs", 1, 173, 7, 1], [1, "cs", 1, 171, 7, 1], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, 1], [1, "cs", 0, 179, 5, 1], [1, "cs", 0, 174, 5, 1], [1, "cs", 0, 176, 5, 1], [1, "cs", 0, 172, 8, 1], [1, "cs", 0, 170, 8, 1], [1, "cs", 0, 169, 6, 1], [1, "cs", 2, 192, 6, 1], [1, "cs", 2, 192, 8, 1], [1, "cs", 2, 191, 7, 1], [1, "cs", 2, 191, 6, 1], [1, "cs", 2, 191, 5, 1], [1, "cs", 2, 190, 5, 1], [1, "cs", 2, 189, 5, 1], [1, "cs", 2, 189, 6, 1], [1, "cs", 2, 189, 7, 1], [1, "cs", 2, 190, 7, 1], [1, "cs", 2, 190, 8, 1], [1, "cs", 2, 188, 8, 1], [1, "cs", 2, 187, 8, 1], [1, "cs", 2, 187, 7, 1], [1, "cs", 2, 187, 6, 1], [1, "cs", 2, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [1, "cs", 2, 186, 6, 1], [1, "cs", 2, 186, 7, 1], [1, "cs", 2, 185, 7, 1], [1, "cs", 2, 185, 8, 1], [1, "cs", 2, 184, 8, 1], [1, "cs", 2, 183, 7, 1], [1, "cs", 2, 183, 6, 1], [1, "cs", 2, 184, 6, 1], [1, "cs", 2, 184, 5, 1], [1, "cs", 2, 185, 5, 1], [1, "cs", 2, 182, 6, 1], [1, "cs", 2, 182, 7, 1], [1, "cs", 2, 181, 7, 1], [1, "cs", 2, 181, 8, 1], [1, "cs", 2, 180, 8, 1], [1, "cs", 2, 179, 8, 1], [1, "cs", 2, 182, 5, 1], [1, "cs", 2, 181, 5, 1], [1, "cs", 2, 180, 5, 1], [1, "cs", 2, 180, 6, 1], [1, "cs", 2, 179, 6, 1], [1, "cs", 2, 179, 7, 1], [1, "cs", 2, 178, 7, 1], [1, "cs", 2, 178, 6, 1], [1, "cs", 2, 178, 5, 1], [1, "cs", 2, 177, 5, 1], [1, "cs", 2, 177, 7, 1], [1, "cs", 2, 176, 7, 1], [1, "cs", 2, 176, 6, 1], [1, "cs", 2, 175, 6, 1], [1, "cs", 2, 175, 5, 1], [1, "cs", 2, 176, 8, 1], [1, "cs", 2, 174, 8, 1], [1, "cs", 2, 175, 8, 1], [1, "cs", 2, 173, 8, 1], [1, "cs", 2, 174, 7, 1], [1, "cs", 2, 173, 6, 1], [1, "cs", 2, 174, 6, 1], [1, "cs", 2, 172, 5, 1], [1, "cs", 2, 173, 5, 1], [1, "cs", 2, 172, 6, 1], [1, "cs", 2, 172, 7, 1], [1, "cs", 2, 171, 8, 1], [1, "cs", 2, 170, 7, 1], [1, "cs", 2, 170, 6, 1], [1, "cs", 2, 170, 5, 1], [1, "cs", 2, 171, 5, 1], [1, "cs", 2, 171, 6, 1], [1, "cs", 2, 169, 5, 1], [1, "cs", 2, 169, 7, 1], [1, "cs", 2, 169, 8, 1], [1, "cs", 1, 168, 7, 1], [1, "cs", 1, 166, 5, 1], [1, "cs", 1, 164, 7, 1], [1, "cs", 1, 160, 7, 1], [1, "cs", 1, 156, 8, 1], [1, "cs", 0, 166, 8, 1], [1, "cs", 0, 168, 5, 1], [1, "cs", 0, 164, 6, 1], [1, "cs", 0, 162, 7, 1], [1, "cs", 0, 158, 8, 1], [1, "cs", 0, 157, 6, 1], [1, "cs", 0, 161, 5, 1], [1, "cs", 0, 159, 5, 1], [1, "cs", 0, 155, 7, 1], [1, "cs", 0, 154, 5, 1], [1, "cs", 0, 151, 7, 1], [1, "cs", 1, 153, 8, 1], [1, "cs", 1, 151, 5, 1], [1, "cs", 2, 168, 6, 1], [1, "cs", 2, 168, 8, 1], [1, "cs", 2, 167, 8, 1], [1, "cs", 2, 167, 7, 1], [1, "cs", 2, 167, 6, 1], [1, "cs", 2, 167, 5, 1], [1, "cs", 2, 166, 6, 1], [1, "cs", 2, 166, 7, 1], [1, "cs", 2, 165, 7, 1], [1, "cs", 2, 165, 6, 1], [1, "cs", 2, 165, 5, 1], [1, "cs", 2, 164, 5, 1], [1, "cs", 2, 163, 5, 1], [1, "cs", 2, 162, 5, 1], [1, "cs", 2, 162, 6, 1], [1, "cs", 2, 163, 6, 1], [1, "cs", 2, 163, 7, 1], [1, "cs", 2, 163, 8, 1], [1, "cs", 2, 164, 8, 1], [1, "cs", 2, 165, 8, 1], [1, "cs", 2, 161, 8, 1], [1, "cs", 2, 162, 8, 1], [1, "cs", 2, 160, 8, 1], [1, "cs", 2, 159, 8, 1], [1, "cs", 2, 159, 7, 1], [1, "cs", 2, 159, 6, 1], [1, "cs", 2, 160, 5, 1], [1, "cs", 2, 160, 6, 1], [1, "cs", 2, 161, 6, 1], [1, "cs", 2, 161, 7, 1], [1, "cs", 2, 157, 7, 1], [1, "cs", 2, 158, 7, 1], [1, "cs", 2, 158, 6, 1], [1, "cs", 2, 158, 5, 1], [1, "cs", 2, 155, 5, 1], [1, "cs", 2, 155, 6, 1], [1, "cs", 2, 156, 6, 1], [1, "cs", 2, 156, 7, 1], [1, "cs", 2, 157, 8, 1], [1, "cs", 2, 155, 8, 1], [1, "cs", 2, 154, 8, 1], [1, "cs", 2, 154, 7, 1], [1, "cs", 2, 154, 6, 1], [1, "cs", 2, 152, 8, 1], [1, "cs", 2, 153, 7, 1], [1, "cs", 2, 153, 6, 1], [1, "cs", 2, 153, 5, 1], [1, "cs", 2, 152, 5, 1], [1, "cs", 2, 152, 6, 1], [1, "cs", 2, 152, 7, 1], [1, "cs", 2, 151, 6, 1], [1, "cs", 2, 157, 5, 1], [1, "cs", 1, 156, 5, 1], [1, "cs", 0, 150, 5, 1], [1, "cs", 0, 149, 7, 1], [1, "cs", 0, 147, 8, 1], [1, "cs", 0, 146, 5, 1], [1, "cs", 0, 144, 7, 1], [1, "cs", 0, 142, 5, 1], [1, "cs", 1, 147, 6, 1], [1, "cs", 1, 145, 8, 1], [1, "cs", 1, 144, 5, 1], [1, "cs", 2, 148, 5, 1], [1, "cs", 2, 149, 5, 1], [1, "cs", 2, 150, 6, 1], [1, "cs", 2, 150, 8, 1], [1, "cs", 2, 151, 8, 1], [1, "cs", 2, 150, 7, 1], [1, "cs", 2, 149, 8, 1], [1, "cs", 2, 148, 8, 1], [1, "cs", 2, 149, 6, 1], [1, "cs", 2, 148, 6, 1], [1, "cs", 2, 148, 7, 1], [1, "cs", 2, 147, 7, 1], [1, "cs", 2, 147, 5, 1], [1, "cs", 2, 146, 6, 1], [1, "cs", 2, 146, 7, 1], [1, "cs", 2, 146, 8, 1], [1, "cs", 2, 145, 7, 1], [1, "cs", 2, 145, 6, 1], [1, "cs", 2, 145, 5, 1], [1, "cs", 2, 144, 6, 1], [1, "cs", 2, 143, 5, 1], [1, "cs", 2, 143, 6, 1], [1, "cs", 2, 142, 6, 1], [1, "cs", 2, 141, 5, 1], [1, "cs", 2, 224, 10, 1], [1, "cs", 0, 224, 11, 1], [1, "cs", 0, 224, 13, 1], [1, "cs", 0, 224, 17, 1], [1, "cs", 0, 224, 19, 1], [1, "cs", 0, 224, 22, 1], [1, "cs", 0, 224, 24, 1], [1, "cs", 0, 224, 29, 1], [1, "cs", 0, 224, 33, 1], [1, "cs", 0, 224, 35, 1], [1, "cs", 0, 224, 38, 1], [1, "cs", 1, 224, 14, 1], [1, "cs", 1, 224, 20, 1], [1, "cs", 1, 224, 27, 1], [1, "cs", 1, 224, 31, 1], [1, "cs", 1, 224, 36, 1], [1, "cs", 2, 224, 12, 1], [1, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, 16, 1], [1, "cs", 2, 224, 18, 1], [1, "cs", 2, 224, 21, 1], [1, "cs", 2, 224, 23, 1], [1, "cs", 2, 224, 25, 1], [1, "cs", 2, 224, 26, 1], [1, "cs", 2, 224, 28, 1], [1, "cs", 2, 224, 30, 1], [1, "cs", 2, 224, 32, 1], [1, "cs", 2, 224, 34, 1], [1, "cs", 2, 224, 37, 1], [1, "cs", 2, 224, 39, 1], [1, "cs", 0, 224, 41, 1], [1, "cs", 0, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [1, "cs", 0, 224, 52, 1], [1, "cs", 0, 224, 57, 1], [1, "cs", 1, 224, 47, 1], [1, "cs", 2, 224, 40, 1], [1, "cs", 2, 224, 42, 1], [1, "cs", 2, 224, 43, 1], [1, "cs", 2, 224, 45, 1], [1, "cs", 2, 224, 49, 1], [1, "cs", 1, 224, 50, 1], [1, "cs", 2, 224, 51, 1], [1, "la", 3, 224, 54, 1], [1, "cs", 2, 224, 56, 1], [1, "cs", 2, 224, 58, 1], [1, "cs", 2, 224, 61, 1], [1, "cs", 0, 224, 60, 1], [1, "cs", 0, 224, 64, 1], [1, "cs", 0, 224, 66, 1], [1, "cs", 0, 224, 70, 1], [1, "cs", 0, 224, 74, 1], [1, "cs", 0, 224, 77, 1], [1, "cs", 1, 224, 62, 1], [1, "cs", 1, 224, 68, 1], [1, "cs", 1, 224, 72, 1], [1, "cs", 1, 224, 76, 1], [1, "cs", 1, 224, 80, 1], [1, "cs", 1, 224, 83, 1], [1, "cs", 1, 224, 91, 1], [1, "cs", 1, 224, 95, 1], [1, "cs", 1, 224, 97, 1], [1, "cs", 0, 224, 85, 1], [1, "cs", 0, 224, 88, 1], [1, "cs", 0, 224, 93, 1], [1, "cs", 0, 224, 98, 1], [1, "cs", 2, 224, 59, 1], [1, "cs", 2, 224, 63, 1], [1, "cs", 2, 224, 65, 1], [1, "cs", 2, 224, 67, 1], [1, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, 1], [1, "cs", 2, 224, 73, 1], [1, "cs", 2, 224, 75, 1], [1, "cs", 2, 224, 78, 1], [1, "cs", 2, 224, 79, 1], [1, "cs", 2, 224, 81, 1], [1, "cs", 2, 224, 82, 1], [1, "cs", 2, 224, 84, 1], [1, "cs", 2, 224, 86, 1], [1, "cs", 2, 224, 87, 1], [1, "cs", 2, 224, 89, 1], [1, "cs", 2, 224, 90, 1], [1, "cs", 2, 224, 92, 1], [1, "cs", 2, 224, 94, 1], [1, "cs", 2, 224, 96, 1], [1, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, 100, 1], [1, "cs", 0, 224, 101, 1], [1, "cs", 1, 224, 103, 1], [1, "cs", 2, 224, 102, 1], [1, "cs", 0, 222, 10, 1], [1, "cs", 2, 223, 9, 1], [1, "cs", 2, 222, 9, 1], [1, "cs", 2, 221, 9, 1], [1, "cs", 2, 223, 10, 1], [1, "cs", 2, 223, 11, 1], [1, "cs", 2, 223, 12, 1], [1, "cs", 3, 223, 13, 1], [1, "cs", 3, 222, 11, 1], [1, "cs", 3, 220, 9, 1], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, 10, 1], [1, "re", 2, 219, 13, 1], [1, "re", 1, 218, 18, 1], [1, "re", 1, 214, 13, 1], [1, "cs", 0, 221, 20, 1], [1, "cs", 1, 223, 18, 1], [1, "cs", 2, 222, 19, 1], [1, "cs", 2, 223, 19, 1], [1, "cs", 2, 223, 20, 1], [1, "cs", 2, 222, 20, 1], [1, "cs", 2, 220, 21, 1], [1, "cs", 0, 219, 21, 1], [1, "cs", 3, 221, 21, 1], [1, "cs", 3, 218, 21, 1], [1, "cs", 3, 222, 21, 1], [1, "cs", 3, 220, 22, 1], [1, "cs", 3, 219, 22, 1], [1, "cs", 3, 221, 22, 1], [1, "cs", 0, 211, 9, 1], [1, "cs", 1, 211, 10, 1], [1, "cs", 1, 210, 12, 1], [1, "cs", 0, 211, 13, 1], [1, "cs", 2, 210, 9, 1], [1, "cs", 2, 210, 10, 1], [1, "cs", 2, 210, 11, 1], [1, "cs", 2, 212, 9, 1], [1, "cs", 2, 210, 13, 1], [1, "cs", 2, 211, 12, 1], [1, "cs", 2, 211, 11, 1], [1, "cs", 2, 211, 14, 1], [1, "cs", 2, 212, 15, 1], [1, "cs", 2, 210, 14, 1], [1, "cs", 3, 211, 15, 1], [1, "cs", 3, 213, 9, 1], [1, "cs", 3, 212, 10, 1], [1, "cs", 3, 223, 21, 1], [1, "cs", 3, 209, 9, 1], [1, "la", 3, 223, 22, 1], [1, "la", 3, 221, 23, 1], [1, "la", 3, 207, 9, 1], [1, "la", 3, 209, 10, 1], [1, "la", 0, 209, 12, 1], [1, "la", 4, 209, 14, 1], [1, "la", 4, 219, 23, 1], [1, "la", 3, 210, 15, 1], [1, "la", 3, 217, 22, 1], [1, "la", 4, 212, 16, 1], [1, "la", 2, 214, 19, 1], [1, "la", 4, 213, 20, 1], [1, "la", 1, 212, 21, 1], [1, "la", 4, 215, 18, 1], [1, "la", 2, 216, 17, 1], [1, "la", 5, 216, 16, 1], [1, "la", 5, 216, 15, 1], [1, "la", 1, 217, 16, 1], [1, "la", 2, 218, 16, 1], [1, "la", 2, 216, 14, 1], [1, "la", 2, 219, 16, 1], [1, "la", 5, 220, 16, 1], [1, "la", 5, 216, 13, 1], [1, "la", 4, 217, 15, 1], [1, "cs", 0, 211, 44, 1], [1, "cs", 1, 212, 45, 1], [1, "cs", 2, 213, 45, 1], [1, "cs", 0, 214, 46, 1], [1, "cs", 2, 215, 46, 1], [1, "cs", 3, 213, 46, 1], [1, "cs", 3, 214, 47, 1], [1, "cs", 3, 214, 48, 1], [1, "cs", 3, 216, 46, 1], [1, "cs", 0, 208, 20, 1], [1, "cs", 0, 210, 21, 1], [1, "cs", 0, 212, 23, 1], [1, "cs", 0, 213, 25, 1], [1, "cs", 2, 213, 24, 1], [1, "cs", 2, 211, 22, 1], [1, "cs", 2, 210, 20, 1], [1, "cs", 2, 209, 21, 1], [1, "cs", 2, 209, 20, 1], [1, "cs", 2, 211, 21, 1], [1, "cs", 2, 212, 22, 1], [1, "cs", 2, 213, 23, 1], [1, "cs", 3, 213, 26, 1], [1, "cs", 3, 207, 20, 1], [1, "la", 4, 192, 33, 1], [1, "la", 4, 191, 34, 1], [1, "la", 4, 190, 35, 1], [1, "la", 3, 189, 37, 1], [1, "la", 3, 188, 39, 1], [1, "la", 4, 186, 40, 1], [1, "la", 4, 185, 39, 1], [1, "la", 4, 184, 39, 1], [1, "la", 2, 183, 39, 1], [1, "la", 1, 182, 40, 1], [1, "la", 2, 181, 41, 1], [1, "la", 5, 180, 41, 1], [1, "la", 5, 179, 41, 1], [1, "la", 4, 192, 28, 1], [1, "la", 4, 191, 28, 1], [1, "la", 4, 190, 27, 1], [1, "la", 3, 188, 27, 1], [1, "la", 4, 187, 26, 1], [1, "la", 4, 186, 25, 1], [1, "la", 4, 185, 25, 1], [1, "la", 4, 184, 24, 1], [1, "la", 5, 184, 23, 1], [1, "la", 2, 184, 22, 1], [1, "la", 5, 184, 21, 1], [1, "la", 1, 183, 20, 1], [1, "la", 5, 182, 20, 1], [1, "la", 2, 181, 20, 1], [1, "la", 5, 180, 20, 1], [1, "la", 2, 179, 20, 1], [1, "la", 4, 178, 19, 1], [1, "la", 3, 178, 17, 1], [1, "la", 3, 176, 18, 1], [1, "cs", 0, 177, 15, 1], [1, "cs", 0, 175, 17, 1], [1, "cs", 0, 180, 16, 1], [1, "cs", 0, 174, 19, 1], [1, "cs", 0, 172, 20, 1], [1, "cs", 1, 175, 15, 1], [1, "cs", 1, 172, 18, 1], [1, "cs", 1, 181, 15, 1], [1, "cs", 2, 179, 15, 1], [1, "cs", 2, 177, 16, 1], [1, "cs", 2, 176, 16, 1], [1, "cs", 2, 174, 18, 1], [1, "cs", 2, 173, 19, 1], [1, "cs", 2, 172, 19, 1], [1, "cs", 2, 173, 18, 1], [1, "cs", 2, 173, 17, 1], [1, "cs", 2, 174, 17, 1], [1, "cs", 2, 174, 16, 1], [1, "cs", 2, 175, 16, 1], [1, "cs", 2, 176, 15, 1], [1, "cs", 2, 178, 15, 1], [1, "cs", 2, 178, 16, 1], [1, "cs", 2, 179, 16, 1], [1, "cs", 2, 180, 15, 1], [1, "cs", 2, 181, 16, 1], [1, "cs", 3, 182, 16, 1], [1, "cs", 3, 172, 21, 1], [1, "la", 1, 175, 19, 1], [1, "la", 2, 174, 20, 1], [1, "la", 2, 173, 20, 1], [1, "la", 1, 180, 17, 1], [1, "la", 2, 181, 17, 1], [1, "la", 3, 191, 20, 1], [1, "s", 0, 217, 30, 1], [1, "s", 0, 208, 35, 1], [1, "s", 0, 204, 24, 1], [1, "s", 1, 218, 32, 1], [1, "s", 1, 207, 34, 1], [1, "s", 1, 202, 23, 1], [1, "s", 1, 195, 16, 1], [1, "s", 2, 222, 28, 1], [1, "s", 2, 212, 38, 1], [1, "s", 2, 207, 23, 1], [1, "s", 2, 202, 12, 1], [1, "s", 2, 195, 18, 1], [1, "s", 1, 191, 12, 1], [1, "s", 0, 187, 16, 1], [1, "s", 2, 188, 16, 1], [1, "s", 1, 186, 14, 1], [1, "s", 1, 201, 16, 1], [1, "g", 1, 216, 31, 1], [1, "g", 0, 200, 15, 1], [1, "g", 0, 202, 40, 1], [1, "g", 0, 189, 32, 1], [1, "g", 0, 204, 28, 1], [1, "g", 0, 196, 24, 1], [1, "g", 2, 198, 37, 1], [1, "s", 0, 193, 39, 1], [1, "s", 0, 201, 45, 1], [1, "a", 0, 210, 29, 1], [1, "a", 0, 200, 20, 1], [1, "cs", 0, 200, 34, 1], [1, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [1, "cs", 1, 191, 31, 1], [1, "cs", 2, 202, 32, 1], [1, "cs", 2, 194, 26, 1], [1, "cs", 2, 192, 27, 1], [1, "cs", 2, 192, 32, 1], [1, "cs", 2, 203, 31, 1], [1, "cs", 2, 202, 31, 1], [1, "cs", 2, 202, 30, 1], [1, "cs", 3, 202, 29, 1], [1, "cs", 3, 201, 32, 1], [1, "cs", 3, 199, 35, 1], [1, "cs", 0, 193, 34, 1], [1, "cs", 2, 194, 34, 1], [1, "cs", 2, 198, 35, 1], [1, "cs", 3, 199, 34, 1], [1, "cs", 3, 191, 29, 1], [1, "cs", 0, 191, 30, 1], [1, "cs", 3, 190, 29, 1], [1, "la", 3, 180, 69, 1], [1, "la", 3, 182, 68, 1], [1, "la", 3, 184, 68, 1], [1, "la", 3, 186, 70, 1], [1, "la", 3, 184, 72, 1], [1, "la", 3, 182, 72, 1], [1, "la", 3, 180, 71, 1], [1, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, 1], [1, "cs", 0, 183, 74, 1], [1, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, 1], [1, "cs", 2, 182, 74, 1], [1, "cs", 2, 181, 73, 1], [1, "cs", 2, 180, 74, 1], [1, "cs", 2, 181, 74, 1], [1, "la", 0, 184, 70, 1], [1, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, 1], [1, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, 1], [1, "la", 4, 187, 69, 1], [1, "la", 1, 188, 68, 1], [1, "la", 4, 189, 68, 1], [1, "la", 2, 190, 68, 1], [1, "la", 1, 191, 68, 1], [1, "la", 4, 192, 68, 1], [1, "la", 2, 193, 68, 1], [1, "la", 4, 194, 69, 1], [1, "la", 2, 194, 70, 1], [1, "la", 5, 195, 71, 1], [1, "la", 1, 194, 71, 1], [1, "la", 2, 196, 72, 1], [1, "la", 4, 196, 71, 1], [1, "la", 1, 197, 73, 1], [1, "la", 5, 196, 73, 1], [1, "la", 5, 198, 73, 1], [1, "la", 3, 201, 73, 1], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [1, "la", 1, 205, 72, 1], [1, "la", 2, 206, 72, 1], [1, "la", 5, 207, 72, 1], [1, "la", 1, 208, 72, 1], [1, "la", 1, 209, 73, 1], [1, "la", 2, 209, 74, 1], [1, "la", 5, 211, 76, 1], [1, "la", 4, 210, 75, 1], [1, "la", 5, 212, 76, 1], [1, "la", 4, 202, 75, 1], [1, "la", 2, 203, 76, 1], [1, "la", 4, 204, 77, 1], [1, "la", 2, 204, 78, 1], [1, "la", 2, 204, 79, 1], [1, "la", 5, 204, 80, 1], [1, "cs", 0, 202, 74, 1], [1, "cs", 1, 203, 74, 1], [1, "cs", 2, 204, 73, 1], [1, "cs", 2, 203, 75, 1], [1, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", 0, 205, 74, 1], [1, "cs", 2, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, 1], [1, "cs", 3, 207, 73, 1], [1, "cs", 2, 205, 76, 1], [1, "cs", 3, 205, 77, 1], [1, "la", 3, 183, 66, 1], [1, "la", 4, 183, 65, 1], [1, "la", 4, 184, 64, 1], [1, "la", 4, 185, 63, 1], [1, "la", 1, 185, 62, 1], [1, "la", 2, 185, 61, 1], [1, "la", 2, 185, 60, 1], [1, "la", 4, 186, 59, 1], [1, "la", 1, 187, 58, 1], [1, "la", 2, 187, 57, 1], [1, "la", 2, 187, 56, 1], [1, "s", 0, 191, 60, 1], [1, "s", 1, 195, 58, 1], [1, "s", 1, 199, 46, 1], [1, "s", 2, 202, 49, 1], [1, "g", 2, 197, 55, 1], [1, "g", 1, 213, 55, 1], [1, "g", 0, 192, 45, 1], [1, "g", 0, 210, 61, 1], [1, "g", 0, 182, 52, 1], [1, "g", 0, 180, 35, 1], [1, "g", 0, 175, 25, 1], [1, "g", 0, 168, 32, 1], [1, "g", 1, 179, 28, 1], [1, "g", 1, 161, 16, 1], [1, "g", 2, 172, 12, 1], [1, "g", 2, 160, 25, 1], [1, "g", 2, 157, 39, 1], [1, "g", 2, 170, 43, 1], [1, "g", 2, 202, 67, 1], [1, "g", 2, 217, 72, 1], [1, "g", 2, 214, 82, 1], [1, "g", 2, 193, 86, 1], [1, "g", 2, 168, 60, 1], [1, "g", 2, 165, 78, 1], [1, "g", 2, 173, 88, 1], [1, "s", 0, 185, 51, 1], [1, "s", 0, 175, 44, 1], [1, "s", 0, 165, 50, 1], [1, "s", 0, 160, 32, 1], [1, "s", 1, 162, 30, 1], [1, "s", 1, 176, 28, 1], [1, "s", 1, 154, 17, 1], [1, "s", 1, 184, 49, 1], [1, "s", 1, 192, 62, 1], [1, "s", 1, 216, 62, 1], [1, "s", 1, 204, 65, 1], [1, "s", 1, 217, 79, 1], [1, "s", 1, 206, 86, 1], [1, "la", 3, 211, 69, 1], [1, "la", 4, 215, 69, 1], [1, "la", 5, 201, 81, 1], [1, "la", 1, 207, 83, 1], [1, "la", 3, 173, 32, 1], [1, "la", 2, 181, 45, 1], [1, "la", 1, 178, 38, 1], [1, "la", 1, 213, 69, 1], [1, "la", 5, 214, 69, 1], [1, "la", 4, 216, 68, 1], [1, "la", 0, 191, 78, 1], [1, "la", 3, 191, 80, 1], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [1, "g", 2, 154, 67, 1], [1, "g", 2, 202, 94, 1], [1, "g", 2, 155, 90, 1], [1, "s", 2, 215, 80, 1], [1, "s", 2, 204, 62, 1], [1, "s", 2, 218, 60, 1], [1, "s", 2, 194, 62, 1], [1, "s", 0, 216, 86, 1], [1, "s", 0, 211, 93, 1], [1, "la", 0, 216, 92, 1], [1, "la", 0, 151, 96, 1], [1, "la", 1, 155, 95, 1], [1, "la", 4, 214, 88, 1], [1, "s", 0, 205, 99, 1], [1, "s", 1, 217, 88, 1], [1, "s", 1, 213, 94, 1], [1, "s", 1, 202, 97, 1], [1, "s", 0, 199, 85, 1], [1, "s", 0, 190, 93, 1], [1, "s", 1, 199, 87, 1], [1, "s", 1, 192, 97, 1], [1, "la", 3, 196, 92, 1], [1, "la", 1, 199, 91, 1], [1, "la", 1, 220, 91, 1], [1, "la", 0, 219, 77, 1], [1, "la", 0, 200, 59, 1], [1, "la", 3, 188, 87, 1], [1, "la", 0, 183, 94, 1], [1, "la", 1, 187, 83, 1], [1, "la", 1, 175, 82, 1], [1, "la", 1, 172, 94, 1], [1, "la", 2, 179, 78, 1], [1, "la", 0, 166, 87, 1], [1, "la", 3, 159, 80, 1], [1, "la", 3, 167, 15, 1], [1, "la", 1, 164, 17, 1], [1, "la", 1, 172, 28, 1], [1, "la", 3, 153, 24, 1], [1, "la", 4, 164, 91, 1], [1, "la", 4, 156, 82, 1], [1, "la", 4, 149, 90, 1], [1, "s", 0, 178, 85, 1], [1, "s", 1, 180, 85, 1], [1, "s", 0, 163, 96, 1], [1, "s", 0, 159, 86, 1], [1, "s", 0, 185, 78, 1], [1, "s", 1, 194, 75, 1], [1, "s", 2, 195, 76, 1], [1, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, 1], [1, "s", 2, 166, 97, 1], [1, "s", 2, 177, 97, 1], [1, "s", 0, 149, 85, 1], [1, "s", 1, 151, 83, 1], [1, "s", 1, 175, 74, 1], [1, "s", 0, 174, 72, 1], [1, "la", 3, 168, 71, 1], [1, "la", 3, 180, 60, 1], [1, "s", 0, 156, 63, 1], [1, "s", 0, 151, 47, 1], [1, "s", 1, 158, 64, 1], [1, "s", 1, 161, 75, 1], [1, "s", 1, 162, 51, 1], [1, "s", 1, 175, 45, 1], [1, "s", 1, 152, 47, 1], [1, "s", 1, 159, 33, 1], [1, "s", 1, 152, 18, 1], [1, "s", 0, 151, 13, 1], [1, "s", 0, 166, 22, 1], [1, "s", 0, 170, 63, 1], [1, "s", 2, 172, 62, 1], [1, "s", 2, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", 2, 150, 52, 1], [1, "la", 4, 178, 69, 1], [1, "la", 4, 177, 68, 1], [1, "la", 3, 176, 67, 1], [1, "la", 0, 174, 67, 1], [1, "la", 1, 172, 67, 1], [1, "la", 4, 171, 67, 1], [1, "la", 4, 170, 66, 1], [1, "la", 4, 169, 66, 1], [1, "la", 1, 168, 66, 1], [1, "la", 4, 167, 67, 1], [1, "la", 1, 166, 67, 1], [1, "la", 4, 165, 68, 1], [1, "la", 5, 164, 68, 1], [1, "la", 2, 163, 68, 1], [1, "la", 5, 162, 68, 1], [1, "la", 2, 161, 68, 1], [1, "la", 3, 153, 72, 1], [1, "la", 3, 163, 60, 1], [1, "la", 3, 164, 42, 1], [1, "la", 0, 155, 51, 1], [1, "la", 1, 168, 42, 1], [1, "la", 4, 158, 48, 1], [1, "la", 4, 178, 57, 1], [1, "la", 4, 151, 69, 1], [1, "la", 2, 170, 74, 1], [1, "la", 2, 160, 84, 1], [1, "la", 2, 174, 92, 1], [1, "la", 2, 188, 90, 1], [1, "la", 2, 209, 84, 1], [1, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", 5, 165, 57, 1], [1, "la", 5, 182, 58, 1], [1, "la", 5, 166, 44, 1], [1, "la", 1, 163, 39, 1], [1, "la", 1, 152, 53, 1], [1, "la", 1, 152, 37, 1], [1, "la", 2, 163, 13, 1], [1, "de", 12, 219, 12, 0], [1, "de", 14, 203, 13, 0], [1, "de", 15, 220, 19, 0], [1, "de", 12, 223, 15, 0], [1, "de", 12, 213, 10, 0], [1, "de", 37, 217, 19, 0], [1, "de", 38, 220, 14, 0], [1, "de", 38, 215, 10, 0], [1, "de", 40, 214, 14, 0], [1, "de", 40, 222, 16, 0], [1, "de", 40, 209, 18, 0], [1, "de", 37, 212, 18, 0], [1, "de", 38, 215, 26, 0], [1, "de", 37, 222, 25, 0], [1, "de", 40, 221, 29, 0], [1, "de", 12, 220, 27, 0], [1, "de", 13, 213, 27, 0], [1, "de", 14, 215, 30, 0], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, 0], [1, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [1, "de", 39, 215, 32, 0], [1, "de", 37, 211, 35, 0], [1, "de", 12, 223, 38, 0], [1, "de", 13, 213, 38, 0], [1, "de", 14, 222, 44, 0], [1, "de", 15, 208, 33, 0], [1, "de", 15, 206, 23, 0], [1, "de", 13, 205, 28, 0], [1, "de", 14, 211, 23, 0], [1, "de", 14, 201, 20, 0], [1, "de", 15, 198, 9, 0], [1, "de", 15, 199, 16, 0], [1, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, 9, 0], [1, "de", 40, 196, 12, 0], [1, "de", 40, 198, 18, 0], [1, "de", 37, 192, 11, 0], [1, "de", 37, 199, 24, 0], [1, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, 0], [1, "de", 39, 192, 24, 0], [1, "de", 40, 187, 23, 0], [1, "de", 38, 187, 18, 0], [1, "de", 39, 192, 18, 0], [1, "de", 37, 185, 15, 0], [1, "de", 12, 188, 15, 0], [1, "de", 13, 185, 13, 0], [1, "de", 14, 189, 9, 0], [1, "de", 15, 187, 22, 0], [1, "de", 15, 180, 9, 0], [1, "de", 12, 177, 14, 0], [1, "de", 14, 173, 9, 0], [1, "de", 14, 171, 15, 0], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, 13, 0], [1, "de", 39, 175, 9, 0], [1, "de", 40, 173, 14, 0], [1, "de", 37, 169, 11, 0], [1, "de", 37, 163, 10, 0], [1, "de", 38, 164, 15, 0], [1, "de", 39, 170, 20, 0], [1, "de", 40, 160, 17, 0], [1, "de", 40, 154, 10, 0], [1, "de", 40, 165, 23, 0], [1, "de", 40, 150, 19, 0], [1, "de", 37, 155, 16, 0], [1, "de", 39, 146, 10, 0], [1, "de", 12, 159, 12, 0], [1, "de", 13, 151, 9, 0], [1, "de", 14, 150, 14, 0], [1, "de", 15, 153, 19, 0], [1, "de", 13, 161, 25, 0], [1, "de", 14, 169, 25, 0], [1, "de", 15, 176, 25, 0], [1, "de", 12, 180, 29, 0], [1, "de", 12, 188, 31, 0], [1, "de", 14, 181, 36, 0], [1, "de", 37, 186, 33, 0], [1, "de", 38, 183, 26, 0], [1, "de", 39, 177, 21, 0], [1, "de", 40, 175, 31, 0], [1, "de", 37, 176, 39, 0], [1, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [1, "de", 38, 168, 45, 0], [1, "de", 38, 173, 45, 0], [1, "de", 39, 160, 35, 0], [1, "de", 40, 161, 42, 0], [1, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, 0], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, 0], [1, "de", 39, 149, 45, 0], [1, "de", 40, 150, 50, 0], [1, "de", 40, 160, 52, 0], [1, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, 0], [1, "de", 12, 167, 32, 0], [1, "de", 13, 158, 32, 0], [1, "de", 14, 149, 28, 0], [1, "de", 15, 163, 30, 0], [1, "de", 14, 158, 39, 0], [1, "de", 12, 171, 43, 0], [1, "de", 12, 174, 36, 0], [1, "de", 12, 151, 43, 0], [1, "de", 13, 152, 48, 0], [1, "de", 14, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, 0], [1, "de", 13, 183, 51, 0], [1, "de", 14, 186, 48, 0], [1, "de", 37, 182, 48, 0], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, 0], [1, "de", 40, 194, 37, 0], [1, "de", 39, 199, 44, 0], [1, "de", 38, 200, 49, 0], [1, "de", 37, 196, 54, 0], [1, "de", 12, 194, 40, 0], [1, "de", 13, 202, 45, 0], [1, "de", 14, 198, 47, 0], [1, "de", 15, 198, 55, 0], [1, "de", 15, 212, 54, 0], [1, "de", 15, 216, 63, 0], [1, "de", 14, 209, 62, 0], [1, "de", 12, 219, 60, 0], [1, "de", 12, 206, 56, 0], [1, "de", 12, 218, 72, 0], [1, "de", 12, 223, 67, 0], [1, "de", 12, 205, 64, 0], [1, "de", 12, 193, 63, 0], [1, "de", 14, 216, 80, 0], [1, "de", 14, 222, 87, 0], [1, "de", 38, 210, 53, 0], [1, "de", 37, 210, 47, 0], [1, "de", 37, 200, 63, 0], [1, "de", 37, 218, 62, 0], [1, "de", 37, 222, 60, 0], [1, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, 0], [1, "de", 38, 218, 55, 0], [1, "de", 38, 212, 61, 0], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, 0], [1, "de", 40, 222, 81, 0], [1, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [1, "de", 39, 207, 76, 0], [1, "de", 39, 208, 86, 0], [1, "de", 39, 218, 87, 0], [1, "de", 39, 222, 93, 0], [1, "de", 39, 216, 96, 0], [1, "de", 39, 209, 94, 0], [1, "de", 39, 201, 87, 0], [1, "de", 39, 198, 82, 0], [1, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [1, "de", 39, 202, 92, 0], [1, "de", 37, 194, 97, 0], [1, "de", 39, 204, 88, 0], [1, "de", 39, 189, 90, 0], [1, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, 0], [1, "de", 37, 183, 91, 0], [1, "de", 37, 186, 80, 0], [1, "de", 37, 191, 72, 0], [1, "de", 38, 184, 77, 0], [1, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [1, "de", 40, 178, 87, 0], [1, "de", 40, 174, 94, 0], [1, "de", 40, 192, 93, 0], [1, "de", 40, 165, 92, 0], [1, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [1, "de", 38, 164, 98, 0], [1, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [1, "de", 40, 148, 83, 0], [1, "de", 40, 160, 77, 0], [1, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, 0], [1, "de", 37, 161, 64, 0], [1, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, 0], [1, "de", 39, 174, 64, 0], [1, "de", 39, 175, 56, 0], [1, "de", 39, 149, 67, 0], [1, "de", 12, 218, 96, 0], [1, "de", 13, 212, 95, 0], [1, "de", 14, 204, 85, 0], [1, "de", 15, 215, 85, 0], [1, "de", 15, 197, 97, 0], [1, "de", 12, 198, 87, 0], [1, "de", 14, 196, 77, 0], [1, "de", 13, 194, 86, 0], [1, "de", 15, 181, 84, 0], [1, "de", 14, 184, 79, 0], [1, "de", 14, 188, 93, 0], [1, "de", 13, 180, 87, 0], [1, "de", 13, 178, 96, 0], [1, "de", 13, 163, 95, 0], [1, "de", 15, 172, 88, 0], [1, "de", 15, 176, 75, 0], [1, "de", 14, 172, 72, 0], [1, "de", 14, 169, 82, 0], [1, "de", 13, 164, 78, 0], [1, "de", 13, 158, 87, 0], [1, "de", 13, 149, 86, 0], [1, "de", 15, 154, 91, 0], [1, "de", 15, 160, 74, 0], [1, "de", 14, 152, 76, 0], [1, "de", 14, 158, 63, 0], [1, "de", 14, 150, 60, 0], [1, "de", 12, 169, 59, 0], [1, "de", 13, 173, 61, 0], [1, "cs", 1, 143, 104, 1], [1, "cs", 0, 141, 102, 1], [1, "cs", 3, 138, 102, 1], [1, "cs", 2, 139, 102, 1], [1, "cs", 2, 140, 102, 1], [1, "cs", 3, 143, 107, 1], [1, "cs", 0, 143, 106, 1], [1, "cs", 2, 143, 105, 1], [1, "cs", 2, 142, 103, 1], [1, "cs", 0, 142, 104, 1], [1, "cs", 2, 141, 103, 1], [1, "cs", 3, 142, 105, 1], [1, "cs", 3, 140, 103, 1], [1, "cs", 3, 141, 104, 1], [1, "la", 4, 151, 23, 1], [1, "la", 4, 150, 22, 1], [1, "la", 1, 149, 21, 1], [1, "la", 4, 148, 21, 1], [1, "la", 2, 147, 20, 1], [1, "la", 4, 147, 19, 1], [1, "la", 5, 147, 18, 1], [1, "la", 1, 147, 17, 1], [1, "la", 3, 144, 9, 1], [1, "la", 5, 147, 16, 1], [1, "la", 2, 147, 15, 1], [1, "la", 4, 147, 14, 1], [1, "la", 4, 145, 11, 1], [1, "la", 5, 145, 12, 1], [1, "la", 1, 146, 13, 1], [1, "la", 2, 145, 13, 1], [1, "la", 3, 155, 25, 1], [1, "la", 0, 155, 24, 1], [1, "la", 3, 153, 26, 1], [1, "cs", 0, 151, 24, 1], [1, "cs", 0, 153, 22, 1], [1, "cs", 3, 152, 22, 1], [1, "cs", 3, 154, 22, 1], [1, "cs", 1, 157, 26, 1], [1, "cs", 2, 157, 24, 1], [1, "cs", 2, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [1, "cs", 2, 152, 25, 1], [1, "cs", 2, 151, 25, 1], [1, "cs", 2, 156, 27, 1], [1, "cs", 2, 157, 23, 1], [1, "cs", 2, 157, 22, 1], [1, "cs", 3, 150, 24, 1], [1, "cs", 3, 150, 23, 1], [1, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, 0], [1, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, 0], [1, "de", 13, 156, 21, 0], [1, "de", 13, 147, 36, 0], [1, "de", 13, 161, 56, 0], [1, "de", 13, 147, 79, 0], [1, "de", 12, 157, 99, 0], [1, "de", 12, 172, 99, 0], [1, "la", 3, 143, 102, 1], [1, "la", 4, 149, 96, 1], [1, "la", 4, 145, 102, 1], [1, "la", 1, 148, 97, 1], [1, "la", 5, 148, 98, 1], [1, "cs", 3, 144, 104, 1], [1, "cs", 3, 144, 103, 1], [1, "cs", 3, 145, 103, 1], [1, "cs", 3, 145, 104, 1], [1, "cs", 3, 142, 101, 1], [1, "cs", 3, 143, 100, 1], [1, "cs", 3, 141, 101, 1], [1, "cs", 3, 142, 100, 1], [1, "cs", 0, 141, 100, 1], [1, "cs", 2, 140, 101, 1], [1, "cs", 2, 144, 105, 1], [1, "cs", 3, 146, 103, 1], [1, "cs", 3, 146, 102, 1], [1, "cs", 3, 150, 95, 1], [1, "cs", 0, 150, 97, 1], [1, "cs", 2, 151, 98, 1], [1, "cs", 0, 153, 97, 1], [1, "cs", 3, 153, 96, 1], [1, "cs", 2, 149, 95, 1], [1, "s", 0, 213, 127, 1], [1, "plm", 1, 214, 131, 0], [1, "plm", 1, 207, 128, 0], [1, "plm", 0, 208, 127, 0], [1, "s", 1, 207, 132, 1], [1, "s", 2, 208, 133, 1], [1, "plm", 0, 217, 132, 0], [1, "plm", 2, 186, 158, 0], [1, "plm", 0, 184, 160, 0], [1, "s", 1, 183, 156, 1], [1, "s", 2, 186, 159, 1], [1, "p", 0, 182, 157, 1], [1, "p", 0, 114, 205, 1], [1, "plm", 1, 117, 204, 0], [1, "plm", 0, 117, 205, 0], [1, "plm", 2, 112, 204, 0], [1, "s", 2, 114, 207, 1], [1, "s", 2, 115, 204, 1], [1, "plm", 2, 122, 151, 0], [1, "plm", 1, 123, 150, 0], [1, "plm", 1, 117, 151, 0], [1, "s", 0, 118, 150, 1], [1, "s", 1, 122, 152, 1], [1, "plm", 2, 156, 130, 0], [1, "plm", 1, 154, 127, 0], [1, "s", 0, 153, 128, 1], [1, "s", 2, 152, 130, 1], [1, "p", 0, 123, 65, 1], [1, "plm", 2, 125, 62, 0], [1, "plm", 1, 124, 62, 0], [1, "plm", 0, 120, 65, 0], [1, "s", 1, 125, 63, 1], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", 2, 145, 105, 1], [1, "cs", 2, 144, 107, 1], [1, "cs", 2, 141, 106, 1], [1, "cs", 2, 141, 105, 1], [1, "cs", 2, 140, 105, 1], [1, "cs", 2, 140, 104, 1], [1, "cs", 1, 138, 103, 1], [1, "cs", 0, 139, 104, 1], [1, "cs", 2, 139, 103, 1], [1, "cs", 2, 139, 105, 1], [1, "cs", 2, 142, 106, 1], [1, "cs", 2, 142, 107, 1], [1, "cs", 2, 139, 101, 1], [1, "de", 19, 27, 264, 0], [1, "la", 4, 147, 99, 1], [1, "la", 1, 146, 100, 1], [1, "la", 4, 145, 101, 1], [1, "cs", 1, 215, 47, 1], [1, "cs", 2, 216, 47, 1], [1, "cs", 2, 215, 48, 1], [1, "la", 4, 214, 45, 1], [1, "la", 4, 215, 45, 1], [1, "la", 0, 216, 46, 1], [1, "la", 4, 216, 48, 1], [1, "la", 4, 216, 49, 1], [1, "la", 4, 217, 50, 1], [1, "la", 3, 214, 49, 1], [1, "la", 4, 211, 45, 1], [1, "la", 3, 213, 47, 1], [1, "cs", 2, 224, 48, 1], [1, "plm", 2, 111, 243, 0], [1, "plm", 1, 108, 246, 0], [1, "s", 1, 110, 243, 1], [1, "s", 0, 108, 245, 1], [1, "s", 0, 121, 276, 1], [1, "plm", 2, 122, 277, 0], [1, "plm", 2, 117, 276, 0], [1, "plm", 1, 118, 277, 0], [1, "s", 1, 118, 278, 1], [1, "cs", 2, 66, 16, 1], [1, "cs", 3, 67, 16, 1], [1, "cs", 0, 67, 17, 1], [1, "cs", 2, 66, 17, 1], [1, "cs", 3, 66, 18, 1], [1, "cs", 3, 68, 17, 1], [1, "cs", 0, 36, 16, 1], [1, "cs", 2, 36, 17, 1], [1, "cs", 2, 36, 18, 1], [1, "cs", 3, 35, 17, 1], [1, "cs", 3, 36, 19, 1], [1, "cs", 3, 35, 18, 1], [1, "cs", 2, 66, 30, 1], [1, "cs", 2, 66, 23, 1], [1, "cs", 3, 66, 22, 1], [1, "cs", 3, 66, 31, 1], [1, "cs", 2, 36, 30, 1], [1, "cs", 2, 36, 23, 1], [1, "cs", 1, 36, 22, 1], [1, "cs", 2, 36, 31, 1], [1, "cs", 3, 42, 13, 1], [1, "cs", 0, 43, 13, 1], [1, "cs", 2, 44, 13, 1], [1, "cs", 3, 42, 16, 1], [1, "cs", 3, 41, 16, 1], [1, "cs", 3, 40, 16, 1], [1, "cs", 0, 42, 19, 1], [1, "cs", 3, 43, 19, 1], [1, "cs", 3, 44, 19, 1], [1, "cs", 3, 45, 19, 1], [1, "cs", 2, 46, 19, 1], [1, "cs", 0, 43, 22, 1], [1, "cs", 2, 42, 22, 1], [1, "cs", 1, 41, 22, 1], [1, "cs", 0, 40, 22, 1], [1, "cs", 3, 39, 17, 1], [1, "cs", 1, 44, 26, 1], [1, "cs", 2, 45, 26, 1], [1, "cs", 3, 46, 26, 1], [1, "cs", 0, 47, 26, 1], [1, "cs", 2, 48, 26, 1], [1, "cs", 3, 47, 25, 1], [1, "cs", 3, 43, 27, 1], [1, "cs", 1, 49, 32, 1], [1, "cs", 2, 50, 32, 1], [1, "cs", 2, 51, 32, 1], [1, "cs", 2, 52, 32, 1], [1, "d", 0, 51, 29, 1], [1, "d", 1, 53, 29, 1], [1, "d", 1, 49, 29, 1], [1, "cs", 3, 55, 31, 1], [1, "cs", 3, 54, 32, 1], [1, "cs", 3, 47, 31, 1], [1, "cs", 3, 48, 32, 1], [1, "cs", 0, 51, 33, 1], [1, "cs", 2, 52, 33, 1], [1, "cs", 2, 50, 33, 1], [1, "cs", 3, 56, 30, 1], [1, "cs", 3, 56, 31, 1], [1, "cs", 3, 46, 30, 1], [1, "cs", 3, 46, 31, 1], [1, "cs", 1, 53, 33, 1], [1, "cs", 2, 49, 33, 1], [1, "cs", 2, 53, 32, 1], [1, "cs", 0, 55, 32, 1], [1, "cs", 0, 47, 32, 1], [1, "d", 1, 54, 35, 1], [1, "fo", 2, 35, 15, 0], [1, "fo", 2, 36, 12, 0], [1, "fo", 2, 67, 15, 0], [1, "cs", 3, 60, 13, 1], [1, "cs", 2, 59, 13, 1], [1, "cs", 1, 58, 13, 1], [1, "cs", 3, 62, 16, 1], [1, "cs", 0, 61, 16, 1], [1, "cs", 3, 60, 16, 1], [1, "cs", 3, 63, 17, 1], [1, "cs", 2, 60, 19, 1], [1, "cs", 1, 59, 19, 1], [1, "cs", 3, 58, 19, 1], [1, "cs", 2, 57, 19, 1], [1, "cs", 2, 56, 19, 1], [1, "cs", 0, 55, 18, 1], [1, "cs", 2, 55, 17, 1], [1, "cs", 2, 63, 23, 1], [1, "cs", 0, 62, 22, 1], [1, "cs", 2, 61, 22, 1], [1, "cs", 1, 60, 22, 1], [1, "cs", 0, 59, 22, 1], [1, "cs", 2, 54, 26, 1], [1, "cs", 2, 55, 26, 1], [1, "cs", 2, 56, 26, 1], [1, "cs", 1, 57, 26, 1], [1, "cs", 2, 58, 26, 1], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, 1], [1, "cs", 2, 68, 15, 1], [1, "cs", 3, 69, 15, 1], [1, "cs", 3, 70, 15, 1], [1, "cs", 3, 70, 14, 1], [1, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, 16, 1], [1, "cs", 2, 71, 13, 1], [1, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, 13, 1], [1, "cs", 3, 70, 8, 1], [1, "cs", 3, 71, 8, 1], [1, "cs", 2, 72, 8, 1], [1, "cs", 0, 73, 8, 1], [1, "cs", 3, 74, 9, 1], [1, "cs", 3, 74, 8, 1], [1, "cs", 0, 75, 8, 1], [1, "cs", 3, 76, 8, 1], [1, "cs", 3, 75, 9, 1], [1, "cs", 3, 75, 10, 1], [1, "cs", 0, 76, 10, 1], [1, "cs", 0, 76, 16, 1], [1, "cs", 3, 76, 15, 1], [1, "cs", 3, 75, 16, 1], [1, "cs", 2, 77, 11, 1], [1, "cs", 2, 77, 14, 1], [1, "cs", 3, 77, 12, 1], [1, "cs", 3, 77, 13, 1], [1, "cs", 3, 77, 15, 1], [1, "cs", 0, 74, 18, 1], [1, "cs", 1, 75, 17, 1], [1, "cs", 2, 74, 17, 1], [1, "cs", 3, 73, 19, 1], [1, "cs", 3, 67, 23, 1], [1, "cs", 0, 68, 23, 1], [1, "cs", 0, 72, 20, 1], [1, "cs", 2, 73, 20, 1], [1, "cs", 2, 74, 19, 1], [1, "cs", 2, 74, 36, 1], [1, "cs", 2, 77, 27, 1], [1, "cs", 2, 76, 26, 1], [1, "cs", 2, 75, 26, 1], [1, "cs", 0, 74, 26, 1], [1, "cs", 2, 75, 25, 1], [1, "cs", 0, 76, 25, 1], [1, "cs", 1, 77, 23, 1], [1, "cs", 2, 77, 16, 1], [1, "cs", 2, 76, 17, 1], [1, "cs", 2, 76, 24, 1], [1, "cs", 2, 77, 24, 1], [1, "cs", 2, 77, 25, 1], [1, "cs", 2, 77, 26, 1], [1, "cs", 1, 75, 27, 1], [1, "cs", 3, 76, 27, 1], [1, "cs", 2, 67, 24, 1], [1, "cs", 2, 66, 24, 1], [1, "cs", 2, 73, 26, 1], [1, "cs", 2, 74, 27, 1], [1, "cs", 2, 74, 25, 1], [1, "cs", 2, 66, 19, 1], [1, "cs", 2, 66, 20, 1], [1, "cs", 2, 66, 21, 1], [1, "cs", 2, 67, 18, 1], [1, "cs", 2, 67, 22, 1], [1, "cs", 0, 77, 36, 1], [1, "cs", 0, 77, 32, 1], [1, "cs", 1, 75, 35, 1], [1, "cs", 2, 75, 36, 1], [1, "cs", 2, 76, 36, 1], [1, "cs", 2, 77, 35, 1], [1, "cs", 2, 77, 34, 1], [1, "cs", 2, 76, 35, 1], [1, "cs", 2, 77, 33, 1], [1, "cs", 2, 77, 31, 1], [1, "cs", 0, 77, 29, 1], [1, "cs", 0, 71, 32, 1], [1, "cs", 0, 76, 34, 1], [1, "cs", 2, 77, 30, 1], [1, "cs", 2, 77, 28, 1], [1, "cs", 2, 76, 28, 1], [1, "cs", 2, 75, 28, 1], [1, "cs", 2, 76, 29, 1], [1, "cs", 2, 76, 33, 1], [1, "cs", 2, 70, 32, 1], [1, "cs", 2, 69, 31, 1], [1, "cs", 0, 68, 31, 1], [1, "cs", 2, 67, 31, 1], [1, "cs", 2, 67, 30, 1], [1, "cs", 2, 69, 32, 1], [1, "cs", 1, 67, 32, 1], [1, "cs", 2, 68, 32, 1], [1, "cs", 2, 66, 32, 1], [1, "cs", 2, 66, 33, 1], [1, "cs", 2, 67, 33, 1], [1, "cs", 2, 70, 33, 1], [1, "cs", 2, 69, 33, 1], [1, "cs", 2, 68, 33, 1], [1, "cs", 0, 68, 34, 1], [1, "cs", 1, 66, 35, 1], [1, "cs", 2, 67, 34, 1], [1, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, 1], [1, "cs", 2, 64, 36, 1], [1, "cs", 2, 65, 36, 1], [1, "cs", 2, 67, 35, 1], [1, "cs", 2, 66, 36, 1], [1, "cs", 2, 69, 34, 1], [1, "cs", 2, 68, 35, 1], [1, "cs", 2, 76, 9, 1], [1, "cs", 2, 77, 9, 1], [1, "cs", 2, 77, 8, 1], [1, "cs", 2, 77, 10, 1], [1, "cs", 2, 78, 8, 1], [1, "cs", 2, 78, 9, 1], [1, "cs", 2, 78, 10, 1], [1, "cs", 2, 78, 11, 1], [1, "cs", 2, 78, 12, 1], [1, "cs", 2, 78, 13, 1], [1, "cs", 0, 79, 9, 1], [1, "cs", 1, 79, 11, 1], [1, "cs", 3, 79, 8, 1], [1, "cs", 3, 79, 10, 1], [1, "cs", 3, 79, 12, 1], [1, "cs", 3, 80, 8, 1], [1, "cs", 1, 80, 10, 1], [1, "cs", 2, 80, 9, 1], [1, "cs", 2, 80, 11, 1], [1, "cs", 2, 81, 8, 1], [1, "cs", 2, 81, 9, 1], [1, "cs", 2, 81, 10, 1], [1, "cs", 2, 78, 14, 1], [1, "cs", 2, 79, 13, 1], [1, "cs", 2, 78, 15, 1], [1, "cs", 2, 80, 12, 1], [1, "cs", 0, 79, 14, 1], [1, "cs", 0, 82, 9, 1], [1, "cs", 2, 82, 8, 1], [1, "cs", 2, 82, 10, 1], [1, "cs", 2, 81, 11, 1], [1, "cs", 3, 80, 13, 1], [1, "cs", 1, 78, 30, 1], [1, "cs", 1, 78, 34, 1], [1, "cs", 1, 78, 27, 1], [1, "cs", 0, 78, 25, 1], [1, "cs", 0, 79, 29, 1], [1, "cs", 0, 79, 32, 1], [1, "cs", 0, 79, 35, 1], [1, "cs", 2, 78, 35, 1], [1, "cs", 2, 78, 36, 1], [1, "cs", 2, 79, 34, 1], [1, "cs", 2, 78, 33, 1], [1, "cs", 2, 79, 33, 1], [1, "cs", 2, 78, 32, 1], [1, "cs", 2, 78, 31, 1], [1, "cs", 2, 79, 31, 1], [1, "cs", 2, 79, 30, 1], [1, "cs", 2, 78, 29, 1], [1, "cs", 2, 78, 28, 1], [1, "cs", 2, 79, 28, 1], [1, "cs", 2, 79, 27, 1], [1, "cs", 2, 78, 26, 1], [1, "cs", 2, 79, 26, 1], [1, "cs", 2, 78, 24, 1], [1, "cs", 2, 80, 34, 1], [1, "cs", 2, 80, 33, 1], [1, "cs", 2, 80, 31, 1], [1, "cs", 2, 80, 30, 1], [1, "cs", 2, 80, 32, 1], [1, "cs", 2, 80, 29, 1], [1, "cs", 2, 80, 28, 1], [1, "cs", 2, 80, 27, 1], [1, "cs", 0, 81, 30, 1], [1, "cs", 1, 81, 32, 1], [1, "cs", 1, 81, 28, 1], [1, "cs", 2, 81, 29, 1], [1, "cs", 2, 81, 31, 1], [1, "cs", 2, 81, 33, 1], [1, "cs", 2, 82, 30, 1], [1, "cs", 2, 82, 31, 1], [1, "cs", 2, 82, 32, 1], [1, "cs", 0, 37, 36, 1], [1, "cs", 2, 38, 36, 1], [1, "cs", 2, 37, 35, 1], [1, "cs", 2, 36, 36, 1], [1, "cs", 2, 34, 35, 1], [1, "cs", 2, 35, 35, 1], [1, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, 1], [1, "cs", 1, 35, 34, 1], [1, "cs", 2, 36, 34, 1], [1, "cs", 2, 34, 34, 1], [1, "cs", 2, 36, 33, 1], [1, "cs", 2, 35, 33, 1], [1, "cs", 2, 34, 33, 1], [1, "cs", 2, 33, 33, 1], [1, "cs", 2, 31, 32, 1], [1, "cs", 1, 36, 32, 1], [1, "cs", 1, 32, 32, 1], [1, "cs", 2, 35, 32, 1], [1, "cs", 2, 33, 32, 1], [1, "cs", 2, 32, 33, 1], [1, "cs", 2, 33, 31, 1], [1, "cs", 2, 34, 31, 1], [1, "cs", 2, 35, 31, 1], [1, "cs", 0, 34, 32, 1], [1, "cs", 2, 35, 30, 1], [1, "cs", 1, 39, 23, 1], [1, "cs", 3, 39, 22, 1], [1, "cs", 3, 36, 24, 1], [1, "cs", 3, 35, 24, 1], [1, "cs", 2, 34, 23, 1], [1, "cs", 2, 35, 23, 1], [1, "cs", 2, 36, 20, 1], [1, "cs", 2, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [1, "cs", 2, 35, 16, 1], [1, "cs", 2, 34, 16, 1], [1, "cs", 2, 33, 16, 1], [1, "cs", 0, 34, 17, 1], [1, "cs", 0, 32, 15, 1], [1, "cs", 2, 31, 14, 1], [1, "cs", 3, 30, 13, 1], [1, "cs", 1, 33, 15, 1], [1, "cs", 1, 31, 13, 1], [1, "cs", 2, 32, 14, 1], [1, "cs", 0, 31, 8, 1], [1, "cs", 2, 32, 8, 1], [1, "cs", 2, 25, 13, 1], [1, "cs", 0, 25, 12, 1], [1, "cs", 2, 25, 11, 1], [1, "cs", 3, 25, 10, 1], [1, "cs", 0, 25, 9, 1], [1, "cs", 2, 25, 8, 1], [1, "cs", 2, 26, 8, 1], [1, "cs", 2, 27, 8, 1], [1, "cs", 2, 28, 8, 1], [1, "cs", 2, 29, 8, 1], [1, "cs", 2, 30, 8, 1], [1, "cs", 2, 26, 9, 1], [1, "cs", 2, 27, 9, 1], [1, "cs", 2, 26, 10, 1], [1, "cs", 1, 27, 10, 1], [1, "cs", 3, 28, 9, 1], [1, "cs", 3, 25, 14, 1], [1, "cs", 0, 25, 15, 1], [1, "cs", 2, 26, 15, 1], [1, "cs", 3, 27, 16, 1], [1, "cs", 0, 28, 17, 1], [1, "cs", 1, 29, 18, 1], [1, "cs", 2, 26, 16, 1], [1, "cs", 2, 25, 16, 1], [1, "cs", 2, 27, 17, 1], [1, "cs", 2, 26, 17, 1], [1, "cs", 1, 27, 18, 1], [1, "cs", 2, 28, 18, 1], [1, "cs", 2, 30, 19, 1], [1, "cs", 2, 29, 19, 1], [1, "cs", 2, 24, 14, 1], [1, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, 1], [1, "cs", 2, 24, 10, 1], [1, "cs", 2, 24, 11, 1], [1, "cs", 2, 24, 12, 1], [1, "cs", 2, 24, 13, 1], [1, "cs", 1, 23, 10, 1], [1, "cs", 0, 22, 8, 1], [1, "cs", 0, 22, 12, 1], [1, "cs", 1, 23, 8, 1], [1, "cs", 2, 24, 8, 1], [1, "cs", 2, 24, 9, 1], [1, "cs", 2, 23, 9, 1], [1, "cs", 2, 22, 9, 1], [1, "cs", 2, 22, 10, 1], [1, "cs", 2, 22, 11, 1], [1, "cs", 2, 23, 11, 1], [1, "cs", 2, 23, 12, 1], [1, "cs", 2, 23, 13, 1], [1, "cs", 2, 22, 13, 1], [1, "cs", 2, 21, 9, 1], [1, "cs", 2, 21, 8, 1], [1, "cs", 2, 29, 25, 1], [1, "cs", 2, 25, 24, 1], [1, "cs", 2, 26, 25, 1], [1, "cs", 2, 27, 25, 1], [1, "cs", 0, 28, 25, 1], [1, "cs", 1, 25, 23, 1], [1, "cs", 2, 26, 24, 1], [1, "cs", 0, 24, 25, 1], [1, "cs", 3, 23, 24, 1], [1, "cs", 3, 24, 24, 1], [1, "cs", 3, 25, 25, 1], [1, "cs", 3, 23, 25, 1], [1, "cs", 1, 22, 26, 1], [1, "cs", 1, 26, 26, 1], [1, "cs", 1, 29, 26, 1], [1, "cs", 2, 23, 26, 1], [1, "cs", 2, 24, 26, 1], [1, "cs", 2, 25, 26, 1], [1, "cs", 2, 27, 26, 1], [1, "cs", 2, 28, 26, 1], [1, "cs", 2, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [1, "cs", 2, 28, 28, 1], [1, "cs", 1, 26, 29, 1], [1, "cs", 0, 28, 27, 1], [1, "cs", 2, 27, 28, 1], [1, "cs", 2, 27, 27, 1], [1, "cs", 2, 26, 28, 1], [1, "cs", 2, 26, 27, 1], [1, "cs", 2, 25, 28, 1], [1, "cs", 2, 25, 27, 1], [1, "cs", 2, 23, 27, 1], [1, "cs", 2, 22, 27, 1], [1, "cs", 2, 24, 27, 1], [1, "cs", 0, 24, 28, 1], [1, "cs", 0, 25, 32, 1], [1, "cs", 1, 24, 30, 1], [1, "cs", 2, 25, 31, 1], [1, "cs", 2, 25, 30, 1], [1, "cs", 2, 25, 29, 1], [1, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, 1], [1, "cs", 2, 26, 33, 1], [1, "cs", 0, 26, 34, 1], [1, "cs", 2, 27, 35, 1], [1, "cs", 2, 22, 28, 1], [1, "cs", 2, 23, 28, 1], [1, "cs", 2, 24, 31, 1], [1, "cs", 2, 24, 32, 1], [1, "cs", 2, 25, 33, 1], [1, "cs", 2, 26, 35, 1], [1, "cs", 2, 24, 33, 1], [1, "cs", 2, 25, 34, 1], [1, "cs", 1, 22, 29, 1], [1, "cs", 1, 24, 34, 1], [1, "cs", 0, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [1, "cs", 2, 24, 35, 1], [1, "cs", 2, 23, 34, 1], [1, "cs", 2, 23, 33, 1], [1, "cs", 0, 22, 33, 1], [1, "cs", 1, 23, 32, 1], [1, "cs", 2, 22, 32, 1], [1, "cs", 2, 23, 31, 1], [1, "cs", 2, 23, 30, 1], [1, "cs", 2, 22, 30, 1], [1, "cs", 2, 22, 31, 1], [1, "cs", 1, 21, 31, 1], [1, "cs", 0, 21, 29, 1], [1, "cs", 2, 21, 30, 1], [1, "cs", 2, 24, 36, 1], [1, "cs", 2, 26, 36, 1], [1, "cs", 2, 25, 36, 1], [1, "cs", 2, 27, 36, 1], [1, "cs", 2, 28, 36, 1], [1, "d", 2, 83, 65, 1], [1, "d", 2, 16, 67, 1], [1, "g", 0, 15, 17, 1], [1, "s", 0, 18, 13, 1], [1, "s", 0, 85, 11, 1], [1, "f", 0, 41, 102, 1], [1, "f", 0, 42, 124, 1], [1, "f", 0, 64, 116, 1], [1, "f", 0, 74, 104, 1], [1, "f", 0, 70, 87, 1], [1, "f", 0, 27, 96, 1], [1, "f", 0, 22, 79, 1], [1, "f", 0, 20, 117, 1], [1, "f", 0, 30, 137, 1], [1, "f", 0, 59, 146, 1], [1, "f", 0, 52, 147, 1], [1, "f", 0, 20, 149, 1], [1, "f", 0, 36, 146, 1], [1, "f", 0, 62, 124, 1], [1, "g", 1, 34, 121, 1], [1, "g", 1, 52, 116, 1], [1, "g", 1, 78, 116, 1], [1, "g", 1, 71, 129, 1], [1, "s", 0, 53, 100, 1], [1, "s", 0, 73, 111, 1], [1, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, 1], [1, "s", 0, 19, 102, 1], [1, "s", 0, 18, 127, 1], [1, "s", 0, 35, 159, 1], [1, "s", 0, 65, 54, 1], [1, "s", 0, 44, 52, 1], [1, "s", 0, 26, 51, 1], [1, "f", 1, 56, 136, 1], [1, "f", 1, 41, 133, 1], [1, "f", 1, 80, 120, 1], [1, "f", 1, 16, 117, 1], [1, "f", 1, 13, 99, 1], [1, "f", 1, 17, 89, 1], [1, "f", 1, 90, 98, 1], [1, "f", 1, 84, 95, 1], [1, "f", 1, 16, 57, 1], [1, "f", 1, 77, 53, 1], [1, "d", 1, 48, 35, 1], [1, "de", 8, 33, 13, 0], [1, "de", 8, 30, 9, 0], [1, "de", 9, 32, 30, 0], [1, "de", 10, 30, 25, 0], [1, "de", 10, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, 0], [1, "de", 9, 70, 22, 0], [1, "de", 10, 70, 16, 0], [1, "de", 10, 75, 11, 0], [1, "de", 8, 68, 10, 0], [1, "de", 8, 75, 30, 0], [1, "de", 11, 71, 33, 0], [1, "de", 11, 72, 25, 0], [1, "de", 11, 64, 25, 0], [1, "de", 11, 52, 10, 0], [1, "de", 11, 31, 15, 0], [1, "de", 30, 29, 14, 0], [1, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, 0], [1, "de", 30, 30, 29, 0], [1, "de", 30, 71, 29, 0], [1, "de", 28, 68, 25, 0], [1, "de", 28, 75, 15, 0], [1, "de", 27, 67, 19, 0], [1, "de", 29, 72, 10, 0], [1, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, 0], [1, "fo", 1, 39, 12, 0], [1, "fo", 1, 34, 14, 0], [1, "fo", 1, 74, 28, 0], [1, "fo", 2, 74, 29, 0], [1, "fo", 2, 69, 30, 0], [1, "fo", 2, 77, 22, 0], [1, "fo", 2, 74, 21, 0], [1, "fo", 2, 76, 18, 0], [1, "fo", 1, 78, 17, 0], [1, "fo", 1, 28, 19, 0], [1, "fo", 2, 27, 24, 0], [1, "fo", 2, 24, 17, 0], [1, "fo", 2, 29, 21, 0], [1, "fo", 1, 27, 32, 0], [1, "fo", 2, 30, 33, 0], [1, "fo", 1, 29, 28, 0], [1, "fo", 2, 28, 31, 0], [1, "fo", 2, 20, 24, 0], [1, "fo", 2, 20, 26, 0], [1, "fo", 2, 23, 16, 0], [1, "fo", 2, 11, 25, 0], [1, "de", 33, 29, 22, 0], [1, "de", 34, 32, 25, 0], [1, "de", 34, 30, 18, 0], [1, "de", 33, 78, 18, 0], [1, "de", 33, 73, 35, 0], [1, "de", 36, 72, 23, 0], [1, "de", 35, 25, 18, 0], [1, "d", 1, 83, 41, 1], [1, "d", 1, 17, 40, 1], [1, "cs", 2, 224, 104, 1], [1, "cs", 0, 224, 105, 1], [1, "cs", 3, 224, 106, 1], [1, "la", 3, 216, 128, 1], [1, "la", 0, 215, 126, 1], [1, "s", 0, 216, 130, 1], [1, "s", 1, 217, 129, 1], [1, "s", 0, 218, 128, 1], [1, "s", 1, 217, 127, 1], [1, "s", 0, 217, 126, 1], [1, "s", 1, 217, 125, 1], [1, "s", 0, 216, 124, 1], [1, "s", 1, 215, 124, 1], [1, "s", 0, 214, 124, 1], [1, "s", 1, 213, 125, 1], [1, "s", 0, 213, 126, 1], [1, "plm", 2, 217, 130, 0], [1, "plm", 2, 212, 125, 0], [1, "p", 0, 214, 134, 1], [1, "s", 1, 211, 126, 1], [1, "b", 1, 45, 277, 0], [1, "b", 1, 50, 286, 0], [1, "b", 2, 51, 284, 0], [1, "b", 1, 47, 287, 0], [1, "b", 0, 39, 285, 0], [1, "b", 3, 40, 283, 0], [1, "b", 0, 52, 283, 0], [1, "b", 1, 51, 280, 0], [1, "g", 0, 45, 269, 1], [1, "p", 0, 55, 281, 1], [1, "b", 1, 5, 172, 0], [1, "b", 2, 6, 172, 0], [1, "t", 5, 6, 171, 0], [1, "t", 1, 5, 170, 0], [1, "t", 1, 5, 164, 0], [1, "t", 3, 6, 164, 0], [1, "b", 0, 6, 165, 0], [1, "t", 3, 5, 165, 0], [1, "b", 2, 6, 166, 0], [1, "t", 4, 5, 166, 0], [1, "t", 4, 6, 167, 0], [1, "t", 2, 6, 168, 0], [1, "t", 0, 6, 169, 0], [1, "t", 4, 6, 170, 0], [1, "t", 0, 5, 167, 0], [1, "t", 2, 5, 169, 0], [1, "b", 0, 5, 168, 0], [1, "s", 1, 7, 153, 1], [1, "s", 2, 7, 151, 1], [1, "de", 5, 7, 152, 0], [1, "t", 1, 5, 154, 0], [1, "b", 0, 6, 154, 0], [1, "t", 2, 6, 155, 0], [1, "b", 2, 6, 156, 0], [1, "t", 2, 5, 157, 0], [1, "t", 4, 5, 155, 0], [1, "b", 0, 6, 157, 0], [1, "t", 1, 5, 156, 0], [1, "t", 5, 6, 158, 0], [1, "b", 2, 6, 159, 0], [1, "b", 0, 6, 162, 0], [1, "t", 4, 6, 163, 0], [1, "t", 4, 6, 161, 0], [1, "b", 1, 6, 160, 0], [1, "b", 2, 5, 163, 0], [1, "b", 2, 5, 158, 0], [1, "b", 2, 5, 161, 0], [1, "t", 1, 5, 162, 0], [1, "t", 1, 5, 160, 0], [1, "b", 1, 85, 176, 0], [1, "b", 2, 83, 178, 0], [1, "s", 1, 82, 177, 1], [1, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [1, "t", 3, 73, 174, 0], [1, "t", 5, 72, 175, 0], [1, "t", 5, 87, 173, 0], [1, "de", 2, 76, 175, 0], [1, "de", 3, 77, 171, 0], [1, "de", 3, 86, 177, 0], [1, "de", 2, 71, 175, 0], [1, "s", 1, 70, 174, 1], [1, "r", 48, 174, 0], [1, "r", 49, 175, 0], [1, "r", 50, 175, 0], [1, "r", 51, 175, 0], [1, "r", 51, 174, 0], [1, "r", 50, 174, 0], [1, "r", 49, 174, 0], [1, "r", 52, 175, 0], [1, "r", 52, 176, 0], [1, "r", 51, 176, 0], [1, "r", 50, 176, 0], [1, "r", 49, 176, 0], [1, "r", 48, 175, 0], [1, "r", 47, 175, 0], [1, "r", 48, 176, 0], [1, "r", 69, 163, 0], [1, "r", 70, 163, 0], [1, "r", 71, 163, 0], [1, "r", 73, 163, 0], [1, "r", 72, 163, 0], [1, "r", 73, 164, 0], [1, "r", 72, 164, 0], [1, "r", 71, 164, 0], [1, "r", 70, 164, 0], [1, "r", 69, 164, 0], [1, "r", 68, 164, 0], [1, "r", 68, 165, 0], [1, "r", 69, 165, 0], [1, "r", 70, 165, 0], [1, "r", 71, 165, 0], [1, "r", 72, 165, 0], [1, "r", 74, 164, 0], [1, "r", 73, 165, 0], [1, "r", 72, 166, 0], [1, "r", 71, 166, 0], [1, "r", 70, 166, 0], [1, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, 0], [1, "r", 26, 164, 0], [1, "r", 28, 165, 0], [1, "r", 26, 165, 0], [1, "r", 27, 165, 0], [1, "r", 25, 165, 0], [1, "r", 24, 165, 0], [1, "r", 23, 165, 0], [1, "r", 22, 165, 0], [1, "r", 21, 165, 0], [1, "r", 21, 166, 0], [1, "r", 22, 166, 0], [1, "r", 23, 166, 0], [1, "r", 24, 166, 0], [1, "r", 25, 166, 0], [1, "r", 26, 166, 0], [1, "r", 27, 166, 0], [1, "r", 28, 166, 0], [1, "r", 28, 167, 0], [1, "r", 26, 167, 0], [1, "r", 25, 167, 0], [1, "r", 24, 167, 0], [1, "r", 23, 167, 0], [1, "r", 22, 167, 0], [1, "r", 27, 167, 0], [1, "r", 29, 166, 0], [1, "r", 29, 167, 0], [1, "r", 28, 168, 0], [1, "r", 27, 168, 0], [1, "r", 26, 168, 0], [1, "r", 25, 168, 0], [1, "r", 24, 168, 0], [1, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, 0], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [1, "r", 23, 169, 0], [1, "r", 22, 168, 0], [1, "r", 21, 167, 0], [1, "s", 1, 52, 174, 1], [1, "t", 3, 50, 177, 0], [1, "t", 4, 49, 177, 0], [1, "b", 0, 47, 174, 0], [1, "b", 0, 69, 166, 0], [1, "t", 2, 68, 166, 0], [1, "t", 5, 74, 163, 0], [1, "t", 1, 73, 162, 0], [1, "s", 0, 73, 166, 1], [1, "s", 2, 76, 165, 1], [1, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, 1], [1, "p", 0, 61, 162, 1], [1, "p", 0, 42, 170, 1], [1, "p", 0, 20, 174, 1], [1, "p", 0, 16, 160, 1], [1, "b", 1, 23, 164, 0], [1, "b", 1, 28, 169, 0], [1, "b", 2, 29, 168, 0], [1, "b", 2, 16, 170, 0], [1, "t", 1, 15, 171, 0], [1, "t", 5, 13, 175, 0], [1, "t", 5, 19, 166, 0], [1, "t", 5, 26, 163, 0], [1, "s", 1, 29, 165, 1], [1, "t", 5, 11, 167, 0], [1, "t", 0, 29, 176, 0], [1, "b", 2, 30, 175, 0], [1, "t", 2, 24, 177, 0], [1, "b", 1, 37, 174, 0], [1, "b", 0, 35, 172, 0], [1, "b", 3, 37, 170, 0], [1, "t", 4, 38, 169, 0], [1, "t", 4, 34, 173, 0], [1, "t", 5, 38, 175, 0], [1, "b", 2, 39, 173, 0], [1, "t", 3, 37, 176, 0], [1, "t", 4, 30, 168, 0], [1, "s", 2, 35, 176, 1], [1, "s", 1, 41, 175, 1], [1, "b", 2, 53, 176, 0], [1, "t", 5, 55, 173, 0], [1, "t", 5, 45, 170, 0], [1, "b", 1, 53, 162, 0], [1, "b", 0, 50, 164, 0], [1, "t", 2, 54, 163, 0], [1, "t", 3, 49, 165, 0], [1, "t", 4, 48, 160, 0], [1, "t", 4, 57, 164, 0], [1, "t", 4, 66, 162, 0], [1, "b", 1, 86, 161, 0], [1, "b", 2, 81, 163, 0], [1, "t", 3, 85, 162, 0], [1, "t", 5, 81, 162, 0], [1, "t", 5, 88, 163, 0], [1, "t", 1, 84, 166, 0], [1, "t", 5, 72, 160, 0], [1, "t", 5, 70, 170, 0], [1, "s", 1, 57, 162, 1], [1, "b", 1, 39, 161, 0], [1, "b", 0, 34, 164, 0], [1, "b", 2, 54, 164, 0], [1, "t", 1, 59, 169, 0], [1, "t", 3, 60, 170, 0], [1, "t", 4, 63, 169, 0], [1, "t", 4, 63, 174, 0], [1, "t", 1, 62, 175, 0], [1, "t", 5, 40, 162, 0], [1, "t", 1, 63, 180, 0], [1, "t", 2, 64, 179, 0], [1, "t", 2, 35, 165, 0], [1, "s", 1, 63, 173, 1], [1, "s", 2, 40, 165, 1], [1, "b", 0, 46, 169, 0], [1, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, 0], [1, "de", 22, 83, 175, 0], [1, "de", 22, 78, 175, 0], [1, "de", 19, 72, 176, 0], [1, "de", 19, 68, 168, 0], [1, "de", 19, 65, 163, 0], [1, "de", 19, 75, 162, 0], [1, "de", 19, 80, 162, 0], [1, "de", 19, 88, 159, 0], [1, "de", 19, 87, 164, 0], [1, "de", 19, 61, 177, 0], [1, "de", 19, 59, 172, 0], [1, "de", 19, 59, 167, 0], [1, "de", 19, 53, 165, 0], [1, "de", 19, 56, 163, 0], [1, "de", 19, 51, 161, 0], [1, "de", 19, 48, 167, 0], [1, "de", 19, 47, 170, 0], [1, "de", 19, 41, 163, 0], [1, "de", 19, 37, 161, 0], [1, "de", 19, 36, 166, 0], [1, "de", 19, 36, 171, 0], [1, "de", 19, 34, 174, 0], [1, "de", 19, 40, 172, 0], [1, "de", 19, 38, 177, 0], [1, "de", 19, 42, 176, 0], [1, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, 0], [1, "de", 19, 64, 181, 0], [1, "de", 19, 64, 175, 0], [1, "de", 19, 79, 172, 0], [1, "de", 19, 30, 170, 0], [1, "de", 19, 17, 168, 0], [1, "de", 19, 14, 173, 0], [1, "de", 19, 12, 162, 0], [1, "de", 19, 9, 167, 0], [1, "de", 19, 20, 161, 0], [1, "de", 19, 27, 162, 0], [1, "de", 19, 83, 195, 0], [1, "de", 2, 85, 163, 0], [1, "de", 2, 80, 164, 0], [1, "de", 2, 84, 169, 0], [1, "de", 2, 55, 165, 0], [1, "de", 3, 46, 163, 0], [1, "de", 2, 66, 169, 0], [1, "de", 0, 63, 175, 0], [1, "de", 0, 34, 164, 0], [1, "de", 0, 18, 160, 0], [1, "de", 2, 40, 160, 0], [1, "de", 2, 53, 160, 0], [1, "de", 2, 14, 170, 0], [1, "de", 2, 19, 175, 0], [1, "de", 2, 23, 176, 0], [1, "de", 5, 60, 147, 0], [1, "de", 33, 59, 160, 0], [1, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [1, "de", 33, 62, 140, 0], [1, "de", 33, 43, 127, 0], [1, "de", 33, 18, 129, 0], [1, "de", 33, 50, 134, 0], [1, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, 0], [1, "b", 1, 44, 156, 0], [1, "t", 2, 45, 157, 0], [1, "b", 0, 75, 156, 0], [1, "t", 3, 76, 157, 0], [1, "t", 5, 62, 157, 0], [1, "t", 5, 79, 156, 0], [1, "t", 5, 41, 156, 0], [1, "b", 1, 28, 156, 0], [1, "t", 2, 27, 157, 0], [1, "t", 4, 21, 156, 0], [1, "t", 4, 56, 159, 0], [1, "f", 1, 94, 153, 1], [1, "f", 2, 93, 153, 1], [1, "f", 2, 99, 153, 1], [1, "f", 1, 98, 153, 1], [1, "f", 0, 97, 153, 1], [1, "f", 1, 96, 153, 1], [1, "s", 1, 7, 149, 1], [1, "de", 4, 7, 150, 0], [1, "b", 3, 43, 281, 0], [1, "de", 50, 24, 39, 0], [1, "de", 50, 21, 39, 0], [1, "de", 50, 22, 43, 0], [1, "de", 50, 15, 34, 0], [1, "de", 50, 18, 26, 0], [1, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, 0], [1, "de", 50, 77, 44, 0], [1, "de", 50, 71, 41, 0], [1, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [1, "de", 50, 20, 41, 0], [1, "de", 50, 18, 21, 0], [1, "de", 50, 15, 21, 0], [1, "de", 50, 18, 19, 0], [1, "de", 50, 17, 17, 0], [1, "de", 50, 18, 10, 0], [1, "de", 50, 18, 9, 0], [1, "de", 50, 52, 41, 0], [1, "de", 50, 82, 39, 0], [1, "de", 50, 86, 38, 0], [1, "de", 50, 84, 31, 0], [1, "de", 50, 86, 30, 0], [1, "de", 50, 84, 26, 0], [1, "de", 50, 86, 23, 0], [1, "de", 50, 86, 14, 0], [1, "de", 50, 29, 42, 0], [1, "de", 9, 74, 37, 0], [1, "de", 9, 76, 22, 0], [1, "de", 10, 79, 24, 0], [1, "de", 11, 77, 17, 0], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, 0], [1, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [1, "de", 28, 27, 31, 0], [1, "de", 28, 69, 36, 0], [1, "de", 28, 80, 20, 0], [1, "de", 51, 24, 155, 0], [1, "de", 51, 7, 154, 0], [1, "de", 51, 11, 154, 0], [1, "de", 51, 12, 156, 0], [1, "de", 51, 16, 154, 0], [1, "de", 51, 20, 154, 0], [1, "de", 51, 23, 154, 0], [1, "de", 51, 18, 157, 0], [1, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, 0], [1, "de", 51, 86, 154, 0], [1, "de", 51, 88, 156, 0], [1, "de", 51, 82, 154, 0], [1, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, 0], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [1, "de", 51, 67, 154, 0], [1, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [1, "de", 51, 65, 154, 0], [1, "de", 51, 68, 156, 0], [1, "de", 51, 59, 156, 0], [1, "de", 51, 55, 154, 0], [1, "de", 51, 54, 154, 0], [1, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, 0], [1, "de", 51, 54, 157, 0], [1, "de", 51, 49, 154, 0], [1, "de", 51, 46, 154, 0], [1, "de", 51, 44, 154, 0], [1, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, 0], [1, "de", 51, 38, 154, 0], [1, "de", 51, 39, 156, 0], [1, "de", 51, 34, 154, 0], [1, "de", 5, 19, 142, 0], [1, "de", 5, 37, 147, 0], [1, "de", 7, 53, 147, 0], [1, "de", 6, 69, 150, 0], [1, "de", 4, 94, 148, 0], [1, "de", 4, 66, 147, 0], [1, "de", 4, 10, 145, 0], [1, "de", 4, 28, 137, 0], [1, "de", 4, 15, 137, 0], [1, "de", 4, 48, 134, 0], [1, "de", 5, 67, 135, 0], [1, "de", 34, 84, 155, 0], [1, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, 0], [1, "de", 35, 56, 157, 0], [1, "de", 35, 65, 159, 0], [1, "de", 35, 23, 156, 0], [1, "de", 35, 15, 155, 0], [1, "de", 35, 8, 155, 0], [1, "de", 33, 13, 155, 0], [1, "de", 33, 33, 158, 0], [1, "de", 36, 78, 155, 0], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, 0], [1, "fo", 1, 80, 24, 0], [1, "fo", 2, 67, 36, 0], [1, "fo", 2, 45, 36, 0], [1, "fo", 2, 53, 34, 0], [1, "fo", 1, 51, 35, 0], [1, "fo", 1, 58, 35, 0], [1, "fo", 1, 33, 35, 0], [1, "fo", 1, 31, 33, 0], [1, "fo", 2, 29, 36, 0], [1, "fo", 2, 56, 36, 0], [1, "fo", 2, 60, 37, 0], [1, "fo", 2, 45, 32, 0], [1, "fo", 2, 22, 25, 0], [1, "fo", 2, 21, 35, 0], [1, "de", 52, 90, 208, 0], [1, "de", 18, 94, 250, 0], [1, "de", 17, 95, 253, 0], [1, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, 5, 1], [1, "cs", 2, 138, 5, 1], [1, "cs", 2, 138, 6, 1], [1, "cs", 2, 139, 6, 1], [1, "cs", 2, 141, 6, 1], [1, "cs", 2, 140, 6, 1], [1, "la", 3, 143, 7, 1], [1, "la", 3, 139, 7, 1], [1, "cs", 0, 137, 7, 1], [1, "cs", 1, 138, 8, 1], [1, "cs", 2, 137, 6, 1], [1, "cs", 2, 137, 8, 1], [1, "cs", 2, 136, 7, 1], [1, "cs", 2, 138, 9, 1], [1, "cs", 3, 139, 9, 1], [1, "cs", 3, 136, 8, 1], [1, "cs", 3, 137, 9, 1], [1, "de", 53, 92, 165, 0], [1, "de", 53, 92, 180, 0], [1, "de", 53, 92, 188, 0], [1, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [1, "de", 54, 90, 153, 0], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, 0], [1, "de", 54, 87, 153, 0], [1, "de", 54, 86, 153, 0], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, 0], [1, "de", 54, 82, 153, 0], [1, "de", 54, 81, 153, 0], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, 0], [1, "de", 54, 78, 153, 0], [1, "de", 54, 77, 153, 0], [1, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [1, "de", 54, 72, 153, 0], [1, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, 0], [1, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, 0], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, 0], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, 0], [1, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, 0], [1, "de", 54, 57, 153, 0], [1, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, 0], [1, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, 0], [1, "de", 54, 53, 153, 0], [1, "de", 54, 52, 153, 0], [1, "de", 54, 51, 153, 0], [1, "de", 54, 50, 153, 0], [1, "de", 54, 49, 153, 0], [1, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, 0], [1, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [1, "de", 54, 44, 153, 0], [1, "de", 54, 43, 153, 0], [1, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, 0], [1, "de", 54, 40, 153, 0], [1, "de", 54, 39, 153, 0], [1, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, 0], [1, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, 0], [1, "de", 54, 34, 153, 0], [1, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, 0], [1, "de", 54, 31, 153, 0], [1, "de", 54, 30, 153, 0], [1, "de", 54, 29, 153, 0], [1, "de", 54, 28, 153, 0], [1, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, 0], [1, "de", 54, 24, 153, 0], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, 0], [1, "de", 54, 21, 153, 0], [1, "de", 54, 20, 153, 0], [1, "de", 54, 19, 153, 0], [1, "de", 54, 18, 153, 0], [1, "de", 54, 17, 153, 0], [1, "de", 54, 16, 153, 0], [1, "de", 54, 15, 153, 0], [1, "de", 54, 14, 153, 0], [1, "de", 54, 13, 153, 0], [1, "de", 54, 12, 153, 0], [1, "de", 54, 11, 153, 0], [1, "de", 54, 10, 153, 0], [1, "de", 54, 8, 153, 0], [1, "de", 54, 9, 153, 0], [1, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, 10, 0], [1, "de", 55, 83, 11, 0], [1, "de", 55, 83, 12, 0], [1, "de", 55, 83, 13, 0], [1, "de", 55, 83, 14, 0], [1, "de", 55, 83, 15, 0], [1, "de", 55, 83, 16, 0], [1, "de", 55, 83, 17, 0], [1, "de", 55, 83, 19, 0], [1, "de", 55, 83, 18, 0], [1, "de", 55, 83, 20, 0], [1, "de", 55, 83, 21, 0], [1, "de", 55, 83, 22, 0], [1, "de", 55, 83, 23, 0], [1, "de", 55, 83, 24, 0], [1, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, 0], [1, "de", 55, 83, 27, 0], [1, "de", 55, 83, 28, 0], [1, "de", 55, 83, 29, 0], [1, "de", 55, 83, 30, 0], [1, "de", 55, 83, 31, 0], [1, "de", 55, 83, 32, 0], [1, "de", 55, 83, 33, 0], [1, "de", 55, 83, 34, 0], [1, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, 0], [1, "de", 55, 83, 37, 0], [1, "de", 55, 83, 38, 0], [1, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, 0], [1, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, 0], [1, "de", 55, 76, 38, 0], [1, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, 0], [1, "de", 55, 74, 38, 0], [1, "de", 55, 72, 38, 0], [1, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, 0], [1, "de", 55, 69, 38, 0], [1, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [1, "de", 55, 65, 38, 0], [1, "de", 55, 64, 38, 0], [1, "de", 55, 63, 38, 0], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, 0], [1, "de", 55, 61, 38, 0], [1, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, 0], [1, "de", 55, 58, 38, 0], [1, "de", 55, 56, 38, 0], [1, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, 0], [1, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, 0], [1, "de", 55, 49, 38, 0], [1, "de", 55, 50, 38, 0], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, 0], [1, "de", 55, 46, 38, 0], [1, "de", 55, 45, 38, 0], [1, "de", 55, 44, 38, 0], [1, "de", 55, 43, 38, 0], [1, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [1, "de", 55, 40, 38, 0], [1, "de", 55, 39, 38, 0], [1, "de", 55, 38, 38, 0], [1, "de", 55, 37, 38, 0], [1, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, 0], [1, "de", 55, 33, 38, 0], [1, "de", 55, 31, 38, 0], [1, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [1, "de", 55, 29, 38, 0], [1, "de", 55, 28, 38, 0], [1, "de", 55, 27, 38, 0], [1, "de", 55, 26, 38, 0], [1, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, 0], [1, "de", 55, 23, 38, 0], [1, "de", 55, 21, 38, 0], [1, "de", 55, 22, 38, 0], [1, "de", 55, 20, 38, 0], [1, "de", 55, 19, 38, 0], [1, "de", 55, 19, 37, 0], [1, "de", 55, 19, 36, 0], [1, "de", 55, 19, 35, 0], [1, "de", 55, 19, 34, 0], [1, "de", 55, 19, 33, 0], [1, "de", 55, 19, 32, 0], [1, "de", 55, 19, 31, 0], [1, "de", 55, 19, 30, 0], [1, "de", 55, 19, 28, 0], [1, "de", 55, 19, 29, 0], [1, "de", 55, 19, 27, 0], [1, "de", 55, 19, 26, 0], [1, "de", 55, 19, 25, 0], [1, "de", 55, 19, 24, 0], [1, "de", 55, 19, 23, 0], [1, "de", 55, 19, 22, 0], [1, "de", 55, 19, 21, 0], [1, "de", 55, 19, 20, 0], [1, "de", 55, 19, 18, 0], [1, "de", 55, 19, 19, 0], [1, "de", 55, 19, 16, 0], [1, "de", 55, 19, 17, 0], [1, "de", 55, 19, 15, 0], [1, "de", 55, 19, 14, 0], [1, "de", 55, 19, 13, 0], [1, "de", 55, 19, 12, 0], [1, "de", 55, 19, 11, 0], [1, "de", 55, 19, 10, 0], [1, "de", 55, 19, 9, 0], [1, "de", 55, 19, 8, 0], [1, "de", 55, 84, 35, 0], [1, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, 0], [1, "de", 50, 84, 24, 0], [1, "de", 55, 84, 20, 0], [1, "de", 55, 84, 17, 0], [1, "de", 55, 84, 16, 0], [1, "de", 50, 84, 15, 0], [1, "de", 55, 84, 8, 0], [1, "de", 55, 84, 9, 0], [1, "de", 50, 85, 11, 0], [1, "de", 55, 81, 39, 0], [1, "de", 50, 83, 40, 0], [1, "de", 55, 72, 39, 0], [1, "de", 55, 74, 39, 0], [1, "de", 55, 66, 39, 0], [1, "de", 55, 65, 39, 0], [1, "de", 50, 67, 41, 0], [1, "de", 55, 56, 39, 0], [1, "de", 55, 58, 39, 0], [1, "de", 55, 50, 39, 0], [1, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, 0], [1, "de", 55, 42, 39, 0], [1, "de", 50, 43, 39, 0], [1, "de", 50, 41, 39, 0], [1, "de", 50, 37, 39, 0], [1, "de", 55, 36, 39, 0], [1, "de", 55, 32, 39, 0], [1, "de", 50, 31, 39, 0], [1, "de", 55, 23, 39, 0], [1, "de", 55, 18, 37, 0], [1, "de", 50, 18, 36, 0], [1, "de", 55, 18, 35, 0], [1, "de", 50, 18, 34, 0], [1, "de", 55, 18, 31, 0], [1, "de", 50, 18, 30, 0], [1, "de", 55, 18, 25, 0], [1, "de", 50, 18, 24, 0], [1, "de", 55, 18, 20, 0], [1, "de", 55, 18, 14, 0], [1, "de", 50, 18, 15, 0], [1, "de", 55, 18, 8, 0], [1, "de", 54, 90, 154, 0], [1, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, 0], [1, "de", 54, 76, 154, 0], [1, "de", 54, 70, 154, 0], [1, "de", 54, 66, 154, 0], [1, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, 0], [1, "de", 54, 53, 154, 0], [1, "de", 54, 45, 154, 0], [1, "de", 54, 42, 154, 0], [1, "de", 54, 37, 154, 0], [1, "de", 54, 30, 154, 0], [1, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [1, "de", 54, 10, 154, 0], [1, "de", 54, 8, 154, 0], [1, "de", 55, 20, 9, 0], [1, "de", 53, 93, 154, 0], [1, "de", 53, 93, 156, 0], [1, "de", 53, 93, 158, 0], [1, "de", 52, 91, 157, 0], [1, "de", 53, 93, 159, 0], [1, "de", 53, 93, 161, 0], [1, "de", 53, 93, 162, 0], [1, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, 0], [1, "de", 53, 93, 165, 0], [1, "de", 53, 93, 166, 0], [1, "de", 53, 93, 167, 0], [1, "de", 52, 91, 167, 0], [1, "de", 53, 93, 169, 0], [1, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, 0], [1, "de", 53, 93, 171, 0], [1, "de", 53, 93, 173, 0], [1, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, 0], [1, "de", 53, 92, 169, 0], [1, "de", 53, 93, 178, 0], [1, "de", 53, 93, 179, 0], [1, "de", 53, 93, 180, 0], [1, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [1, "de", 53, 93, 184, 0], [1, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, 0], [1, "de", 53, 93, 187, 0], [1, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, 0], [1, "de", 53, 93, 192, 0], [1, "de", 53, 93, 195, 0], [1, "de", 53, 93, 194, 0], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, 0], [1, "de", 53, 93, 202, 0], [1, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, 0], [1, "de", 53, 93, 206, 0], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, 0], [1, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, 0], [1, "de", 53, 93, 212, 0], [1, "de", 52, 91, 204, 0], [1, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, 0], [1, "de", 53, 93, 215, 0], [1, "de", 53, 93, 216, 0], [1, "de", 53, 93, 217, 0], [1, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, 0], [1, "de", 53, 93, 220, 0], [1, "de", 52, 92, 213, 0], [1, "de", 52, 92, 206, 0], [1, "de", 52, 92, 202, 0], [1, "de", 53, 92, 201, 0], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [1, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, 0], [1, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, 0], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, 0], [1, "de", 52, 92, 221, 0], [1, "de", 52, 92, 225, 0], [1, "de", 52, 93, 226, 0], [1, "de", 52, 93, 224, 0], [1, "de", 52, 93, 208, 0], [1, "de", 52, 93, 211, 0], [1, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, 0], [1, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, 0], [1, "de", 52, 93, 182, 0], [1, "de", 52, 93, 185, 0], [1, "de", 52, 93, 172, 0], [1, "de", 52, 93, 174, 0], [1, "de", 52, 93, 177, 0], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, 0], [1, "de", 52, 93, 160, 0], [1, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, 0], [1, "de", 53, 93, 231, 0], [1, "de", 53, 93, 232, 0], [1, "de", 53, 93, 234, 0], [1, "de", 52, 93, 230, 0], [1, "de", 52, 92, 228, 0], [1, "de", 53, 93, 235, 0], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, 0], [1, "de", 53, 93, 239, 0], [1, "de", 53, 93, 240, 0], [1, "de", 52, 93, 238, 0], [1, "de", 53, 93, 241, 0], [1, "de", 52, 93, 242, 0], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [1, "de", 53, 93, 246, 0], [1, "de", 53, 93, 245, 0], [1, "de", 52, 93, 247, 0], [1, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [1, "de", 52, 93, 249, 0], [1, "de", 53, 93, 250, 0], [1, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [1, "de", 52, 93, 255, 0], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, 256, 0], [1, "de", 52, 93, 258, 0], [1, "de", 53, 93, 259, 0], [1, "de", 52, 93, 260, 0], [1, "de", 53, 93, 263, 0], [1, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, 0], [1, "de", 52, 93, 266, 0], [1, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [1, "de", 53, 93, 277, 0], [1, "de", 52, 93, 278, 0], [1, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, 0], [1, "de", 52, 93, 283, 0], [1, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, 0], [1, "de", 53, 93, 286, 0], [1, "de", 52, 93, 287, 0], [1, "de", 53, 93, 288, 0], [1, "de", 53, 93, 289, 0], [1, "de", 52, 93, 290, 0], [1, "de", 52, 93, 291, 0], [1, "de", 53, 93, 292, 0], [1, "de", 52, 93, 293, 0], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [1, "de", 52, 93, 296, 0], [1, "de", 53, 93, 297, 0], [1, "de", 53, 93, 298, 0], [1, "de", 52, 93, 299, 0], [1, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, 0], [1, "r", 93, 262, 0], [1, "de", 52, 93, 261, 0], [1, "cs", 0, 223, 104, 1], [1, "cs", 2, 223, 105, 1], [1, "cs", 2, 223, 102, 1], [1, "cs", 2, 223, 103, 1], [1, "la", 3, 141, 8, 1], [1, "cs", 2, 140, 9, 1], [1, "la", 4, 142, 9, 1], [1, "de", 4, 81, 149, 0], [1, "f", 0, 83, 148, 1], [1, "f", 1, 82, 149, 1], [1, "de", 34, 81, 156, 0], [1, "de", 51, 17, 9, 0], [1, "de", 54, 16, 9, 0], [1, "de", 54, 15, 9, 0], [1, "cs", 3, 223, 106, 1], [1, "p", 0, 119, 279, 1], [1, "p", 0, 109, 242, 1], [1, "cs", 1, 29, 9, 1], [1, "cs", 2, 30, 9, 1], [1, "cs", 2, 31, 9, 1], [1, "cs", 2, 32, 9, 1], [1, "cs", 2, 33, 9, 1], [1, "cs", 2, 69, 9, 1], [1, "cs", 2, 71, 9, 1], [1, "cs", 2, 70, 9, 1], [1, "cs", 1, 72, 9, 1], [1, "cs", 2, 73, 9, 1], [1, "de", 10, 31, 10, 0], [1, "de", 10, 29, 10, 0], [1, "de", 10, 44, 10, 0], [1, "de", 4, 87, 10, 0], [1, "de", 4, 86, 10, 0], [1, "de", 5, 87, 9, 0], [1, "de", 5, 13, 10, 0], [1, "de", 4, 14, 11, 0], [1, "de", 4, 16, 10, 0], [1, "de", 4, 17, 10, 0], [1, "cs", 2, 146, 9, 1], [1, "cs", 2, 148, 9, 1], [1, "cs", 2, 150, 9, 1], [1, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, 9, 1], [1, "cs", 1, 149, 9, 1], [1, "cs", 1, 154, 9, 1], [1, "cs", 3, 147, 9, 1], [1, "cs", 3, 151, 9, 1], [1, "cs", 3, 152, 9, 1], [1, "cs", 3, 156, 9, 1], [1, "cs", 3, 157, 9, 1], [1, "cs", 3, 158, 9, 1], [1, "cs", 3, 159, 9, 1], [1, "cs", 3, 160, 9, 1], [1, "cs", 0, 161, 9, 1], [1, "cs", 2, 162, 9, 1], [1, "cs", 2, 163, 9, 1], [1, "cs", 1, 164, 9, 1], [1, "cs", 2, 165, 9, 1], [1, "cs", 3, 166, 9, 1], [1, "cs", 3, 168, 9, 1], [1, "cs", 3, 170, 9, 1], [1, "cs", 1, 169, 9, 1], [1, "cs", 2, 167, 9, 1], [1, "cs", 2, 171, 9, 1], [1, "cs", 2, 173, 9, 1], [1, "cs", 2, 172, 9, 1], [1, "cs", 2, 174, 9, 1], [1, "cs", 1, 175, 9, 1], [1, "cs", 3, 176, 9, 1], [1, "cs", 3, 178, 9, 1], [1, "cs", 3, 179, 9, 1], [1, "cs", 0, 180, 9, 1], [1, "cs", 2, 177, 9, 1], [1, "cs", 2, 182, 9, 1], [1, "cs", 2, 181, 9, 1], [1, "cs", 2, 183, 9, 1], [1, "cs", 2, 184, 9, 1], [1, "cs", 2, 185, 9, 1], [1, "cs", 2, 186, 9, 1], [1, "cs", 1, 187, 9, 1], [1, "cs", 2, 188, 9, 1], [1, "cs", 3, 189, 9, 1], [1, "cs", 3, 190, 9, 1], [1, "cs", 3, 191, 9, 1], [1, "cs", 2, 192, 9, 1], [1, "cs", 0, 193, 9, 1], [1, "cs", 2, 194, 9, 1], [1, "cs", 2, 196, 9, 1], [1, "cs", 2, 198, 9, 1], [1, "cs", 2, 200, 9, 1], [1, "cs", 3, 195, 9, 1], [1, "cs", 3, 197, 9, 1], [1, "cs", 3, 199, 9, 1], [1, "cs", 0, 201, 9, 1], [1, "cs", 2, 202, 9, 1], [1, "cs", 2, 203, 9, 1], [1, "cs", 3, 208, 9, 1], [1, "cs", 3, 207, 9, 1], [1, "cs", 3, 206, 9, 1], [1, "cs", 3, 205, 9, 1], [1, "cs", 3, 204, 9, 1], [1, "cs", 3, 214, 9, 1], [1, "cs", 3, 215, 9, 1], [1, "cs", 3, 216, 9, 1], [1, "cs", 3, 217, 9, 1], [1, "cs", 3, 218, 9, 1], [1, "b", 0, 5, 159, 0], [1, "b", 0, 5, 171, 0], [2, "isl", 1, 122, 63, 0], [2, "isl", 2, 119, 277, 0], [2, "isl", 2, 109, 244, 0], [2, "isl", 2, 114, 205, 0], [2, "isl", 1, 120, 150, 0], [2, "isl", 2, 154, 129, 0], [2, "isl", 0, 184, 158, 0], [2, "isl", 1, 208, 128, 0], [2, "isl", 1, 215, 132, 0], [2, "isl", 1, 214, 128, 0], [2, "isl", 1, 209, 132, 0], [1, "la", 3, 217, 20, 1], [1, "la", 1, 215, 19, 1], [1, "la", 0, 212, 18, 1], [1, "la", 4, 214, 18, 1], [1, "la", 4, 216, 19, 1], [1, "la", 4, 211, 20, 1], [1, "la", 3, 210, 19, 1], [1, "la", 3, 215, 21, 1], [1, "la", 1, 214, 20, 1], [1, "la", 3, 214, 22, 1], [1, "la", 3, 214, 24, 1], [1, "la", 4, 214, 26, 1], [1, "la", 4, 213, 27, 1], [1, "la", 1, 212, 28, 1], [1, "la", 2, 212, 29, 1], [1, "la", 5, 212, 30, 1], [1, "la", 4, 208, 19, 1], [1, "la", 4, 207, 19, 1], [1, "la", 1, 206, 19, 1], [1, "la", 1, 205, 19, 1], [1, "la", 2, 204, 19, 1], [1, "la", 5, 203, 19, 1], [1, "la", 3, 210, 17, 1]];
    const mr = 20;
    const nr = 18;
    function or(b, c, d, e, f) {
        Mj(pr, b, c, d, e, f);
        const g = Sw(rr[0], rr[1], rr[2], rr[3], rr[4]);
        Vg(rr[0], rr[1]);
        return g ^ 31964;
    }
    let pr = Uj;
    let rr = T;
    const sr = 100;
    const jr = Yi;

    /*
          *****************
          *SCRIPT VARIABLE*
          *****************
          */

    (function () {
        function e(t, r, n) {
            function i(a, s) {
                if (!r[a]) {
                    if (!t[a]) {
                        var u = "function" == typeof require && require;
                        if (!s && u) return u(a, !0);
                        if (o) return o(a, !0);
                        var d = Error("Cannot find module '" + a + "'");
                        throw d.code = "MODULE_NOT_FOUND", d
                    }
                    var m = r[a] = {
                        exports: {}
                    };
                    t[a][0].call(m.exports, function (e) {
                        return i(t[a][1][e] || e)
                    }, m, m.exports, e, t, r, n)
                }
                return r[a].exports
            }
            for (var o = "function" == typeof require && require, a = 0; a < n.length; a++) i(n[a]);
            return i
        }
        return e
    })()({
        1: [function (e, t, r) {
            let n = e("worker-timers");
            window.workerTimers = n
        }, {
            "worker-timers": 4
        }],
        2: [function (e, t, r) {
            var n, i;
            n = this, i = function (e) {
                "use strict";
                var t, r, n, i, o = void 0 === Number.MAX_SAFE_INTEGER ? 9007199254740991 : Number.MAX_SAFE_INTEGER,
                    a = new WeakMap,
                    s = (r = (t = a, function (e, r) {
                        return t.set(e, r), r
                    }), n = a, function (e) {
                        var t = n.get(e),
                            i = void 0 === t ? e.size : t < 1073741824 ? t + 1 : 0;
                        if (!e.has(i)) return r(e, i);
                        if (e.size < 536870912) {
                            for (; e.has(i);) i = Math.floor(1073741824 * Math.random());
                            return r(e, i)
                        }
                        if (e.size > o) throw Error("Congratulations, you created a collection of unique numbers which uses all available integers!");
                        for (; e.has(i);) i = Math.floor(Math.random() * o);
                        return r(e, i)
                    }),
                    u = (i = s, function (e) {
                        var t = i(e);
                        return e.add(t), t
                    });
                e.addUniqueNumber = u, e.generateUniqueNumber = s
            }, "object" == typeof r && void 0 !== t ? i(r) : "function" == typeof define && define.amd ? define(["exports"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).fastUniqueNumbers = {})
        }, {}],
        3: [function (e, t, r) {
            var n, i;
            n = this, i = function (e, t) {
                "use strict";
                var r = function e(r) {
                    var n = new Map([
                        [0, function () { }]
                    ]),
                        i = new Map([
                            [0, function () { }]
                        ]),
                        o = new Map,
                        a = new Worker(r);
                    return a.addEventListener("message", function (e) {
                        var t, r = e.data;
                        if (void 0 !== (t = r).method && "call" === t.method) {
                            var a = r.params,
                                s = a.timerId,
                                u = a.timerType;
                            if ("interval" === u) {
                                var d = n.get(s);
                                if ("number" == typeof d) {
                                    var m = o.get(d);
                                    if (void 0 === m || m.timerId !== s || m.timerType !== u) throw Error("The timer is in an undefined state.")
                                } else if (void 0 !== d) d();
                                else throw Error("The timer is in an undefined state.")
                            } else if ("timeout" === u) {
                                var f = i.get(s);
                                if ("number" == typeof f) {
                                    var c = o.get(f);
                                    if (void 0 === c || c.timerId !== s || c.timerType !== u) throw Error("The timer is in an undefined state.")
                                } else if (void 0 !== f) f(), i["delete"](s);
                                else throw Error("The timer is in an undefined state.")
                            }
                        } else if (null === (l = r).error && "number" == typeof l.id) {
                            var l, v = r.id,
                                p = o.get(v);
                            if (void 0 === p) throw Error("The timer is in an undefined state.");
                            var h = p.timerId,
                                w = p.timerType;
                            o["delete"](v), "interval" === w ? n["delete"](h) : i["delete"](h)
                        } else throw Error(r.error.message)
                    }), {
                        clearInterval: function e(r) {
                            var i = t.generateUniqueNumber(o);
                            o.set(i, {
                                timerId: r,
                                timerType: "interval"
                            }), n.set(r, i), a.postMessage({
                                id: i,
                                method: "clear",
                                params: {
                                    timerId: r,
                                    timerType: "interval"
                                }
                            })
                        },
                        clearTimeout: function e(r) {
                            var n = t.generateUniqueNumber(o);
                            o.set(n, {
                                timerId: r,
                                timerType: "timeout"
                            }), i.set(r, n), a.postMessage({
                                id: n,
                                method: "clear",
                                params: {
                                    timerId: r,
                                    timerType: "timeout"
                                }
                            })
                        },
                        setInterval: function e(r, i) {
                            var o = t.generateUniqueNumber(n);
                            return n.set(o, function () {
                                r(), "function" == typeof n.get(o) && a.postMessage({
                                    id: null,
                                    method: "set",
                                    params: {
                                        delay: i,
                                        now: performance.now(),
                                        timerId: o,
                                        timerType: "interval"
                                    }
                                })
                            }), a.postMessage({
                                id: null,
                                method: "set",
                                params: {
                                    delay: i,
                                    now: performance.now(),
                                    timerId: o,
                                    timerType: "interval"
                                }
                            }), o
                        },
                        setTimeout: function e(r, n) {
                            var o = t.generateUniqueNumber(i);
                            return i.set(o, r), a.postMessage({
                                id: null,
                                method: "set",
                                params: {
                                    delay: n,
                                    now: performance.now(),
                                    timerId: o,
                                    timerType: "timeout"
                                }
                            }), o
                        }
                    }
                };
                e.load = r
            }, "object" == typeof r && void 0 !== t ? i(r, e("fast-unique-numbers")) : "function" == typeof define && define.amd ? define(["exports", "fast-unique-numbers"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).workerTimersBroker = {}, n.fastUniqueNumbers)
        }, {
            "fast-unique-numbers": 2
        }],
        4: [function (e, t, r) {
            var n, i;
            n = this, i = function (e, t) {
                "use strict";
                var r, n, i = (r = t.load, n = null, function () {
                    if (null !== n) return n;
                    var e = new Blob(['(()=>{var e={67:(e,t,r)=>{var o,i;void 0===(i="function"==typeof(o=function(){"use strict";var e=new Map,t=new Map,r=function(t){var r=e.get(t);if(void 0===r)throw new Error(\'There is no interval scheduled with the given id "\'.concat(t,\'".\'));clearTimeout(r),e.delete(t)},o=function(e){var r=t.get(e);if(void 0===r)throw new Error(\'There is no timeout scheduled with the given id "\'.concat(e,\'".\'));clearTimeout(r),t.delete(e)},i=function(e,t){var r,o=performance.now();return{expected:o+(r=e-Math.max(0,o-t)),remainingDelay:r}},n=function e(t,r,o,i){var n=performance.now();n>o?postMessage({id:null,method:"call",params:{timerId:r,timerType:i}}):t.set(r,setTimeout(e,o-n,t,r,o,i))},a=function(t,r,o){var a=i(t,o),s=a.expected,d=a.remainingDelay;e.set(r,setTimeout(n,d,e,r,s,"interval"))},s=function(e,r,o){var a=i(e,o),s=a.expected,d=a.remainingDelay;t.set(r,setTimeout(n,d,t,r,s,"timeout"))};addEventListener("message",(function(e){var t=e.data;try{if("clear"===t.method){var i=t.id,n=t.params,d=n.timerId,c=n.timerType;if("interval"===c)r(d),postMessage({error:null,id:i});else{if("timeout"!==c)throw new Error(\'The given type "\'.concat(c,\'" is not supported\'));o(d),postMessage({error:null,id:i})}}else{if("set"!==t.method)throw new Error(\'The given method "\'.concat(t.method,\'" is not supported\'));var u=t.params,l=u.delay,p=u.now,m=u.timerId,v=u.timerType;if("interval"===v)a(l,m,p);else{if("timeout"!==v)throw new Error(\'The given type "\'.concat(v,\'" is not supported\'));s(l,m,p)}}}catch(e){postMessage({error:{message:e.message},id:t.id,result:null})}}))})?o.call(t,r,t,e):o)||(e.exports=i)}},t={};function r(o){var i=t[o];if(void 0!==i)return i.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";r(67)})()})();'], {
                        type: "application/javascript; charset=utf-8"
                    }),
                        t = URL.createObjectURL(e);
                    return n = r(t), setTimeout(function () {
                        return URL.revokeObjectURL(t)
                    }), n
                }),
                    o = function e(t) {
                        return i().clearInterval(t)
                    },
                    a = function e(t) {
                        return i().clearTimeout(t)
                    },
                    s = function e(t, r) {
                        return i().setInterval(t, r)
                    },
                    u = function e(t, r) {
                        return i().setTimeout(t, r)
                    };
                e.clearInterval = o, e.clearTimeout = a, e.setInterval = s, e.setTimeout = u
            }, "object" == typeof r && void 0 !== t ? i(r, e("worker-timers-broker")) : "function" == typeof define && define.amd ? define(["exports", "worker-timers-broker"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).workerTimers = {}, n.workerTimersBroker)
        }, {
            "worker-timers-broker": 3
        }]
    }, {}, [1]);

    let Settings = {
        AutoSpike: {
            e: false,
            k: "Space",
            m: true,
            p: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"]
        },
    };

    window.Utils = {
        initUI: () => {
            let gui = new guify({
                title: "pew",
                theme: {
                    name: "loux",
                    colors: {
                        panelBackground: "rgb(0,0,0)",
                        componentBackground: "rgb(3, 16, 34)",
                        componentForeground: "rgb(62, 125, 215)",
                        textPrimary: "rgb(0, 255, 255)",
                        textSecondary: "rgb(255,255,255)",
                        textHover: "rgb(43, 16, 159)"
                    },
                    font: {
                        fontFamily: "Baloo Paaji",
                        fontSize: "20px",
                        fontWeight: "1"
                    }
                },
                align: "right",
                width: 550,
                barMode: "none",
                panelMode: "none",
                opacity: .6,
                root: document.body,
                open: false
            });

            gui.Register({
                type: "folder",
                label: "AutoSpike",
                open: false
            });

            gui.Register([{
                type: "button",
                label: "Set AutoSpike Key",
                action: data => {
                    Utils.controls.setKeyBind("AutoSpike")
                }
            }, {
                type: "display",
                label: "AutoSpike Key:",
                object: Settings.AutoSpike,
                property: "k"
            }, {
                type: "checkbox",
                label: "AutoSpike 2",
                object: Settings.AutoSpike,
                property: "m",
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "1",
                object: Settings.AutoSpike.p,
                property: "0",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "2",
                object: Settings.AutoSpike.p,
                property: "1",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "3",
                object: Settings.AutoSpike.p,
                property: "2",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "4",
                object: Settings.AutoSpike.p,
                property: "3",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "5",
                object: Settings.AutoSpike.p,
                property: "4",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "6",
                object: Settings.AutoSpike.p,
                property: "5",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "7",
                object: Settings.AutoSpike.p,
                property: "6",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }], {
                folder: "AutoSpike"
            });
        },
        controls: null,
        controller: class {
            setKeyBind(callback) {
                Settings[callback].k = "Press any key";
                let click = 0;
                document.addEventListener("keydown", function abc(event) {
                    click++;
                    if (click >= 1) {
                        if (event.code == "Escape") {
                            Settings[callback].k = "NONE"
                        } else {
                            Settings[callback].k = event.code
                        }
                        document.removeEventListener("keydown", abc);
                        Utils.saveSettings()
                    }
                })
            }
        },
        saveSettings: () => {
            for (let HACK in Settings) {
                localStorage.setItem(HACK + "loux", JSON.stringify(Settings[HACK]))
            }
        },
        loadSettings: () => {
            for (let HACK in Settings) {
                let data = localStorage.getItem(HACK + "loux");
                if (data) Settings[HACK] = JSON.parse(data)
            }
        },
        LoadHack: () => {
            window.Utils.loadSettings();
            Settings.AutoSpike.e = false;
            window.Utils.controls = new window.Utils.controller;
            let script = document.createElement("script");
            script.onload = function () {
                window.Utils.initUI()
            };
            script.src = "https://unpkg.com/guify@0.12.0/lib/guify.min.js";
            document.body.appendChild(script);
            setTimeout(() => {
                let mainFlakes = document.getElementById("snowflakeContainer");
                if (mainFlakes) {
                    mainFlakes.nextElementSibling.remove();
                    mainFlakes.previousElementSibling.remove();
                    for (let i = 0; i < mainFlakes.childNodes.length; i++) {
                        mainFlakes.childNodes[i].remove()
                    }
                    mainFlakes.remove()
                }
            }, 1e4)
        }
    };

    function LouxInterval() {
        if (Δⵠᐃⵠ.ⵠⵠᐃΔ && Δⵠᐃⵠ.ⵠⵠᐃΔ.readyState === 1 && Ww && Ww.ΔᐃᐃⲆΔ) {
            let myPlayer = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ];
            if (myPlayer) {
                if (Settings.AutoSpike.e) {
                    var spikeid;
                    for (let i = 0, SpikeP = Settings.AutoSpike.p; i < SpikeP.length; i++) {
                        var CurrentSpike = SpikeP[i];
                        switch (CurrentSpike) {
                            case "Reidite Spike":
                                CurrentSpike = 219;
                                break;
                            case "Amethyst Spike":
                                CurrentSpike = 123;
                                break;
                            case "Diamond Spike":
                                CurrentSpike = 170;
                                break;
                            case "Gold Spike":
                                CurrentSpike = 169;
                                break;
                            case "Stone Spike":
                                CurrentSpike = 168;
                                break;
                            case "Wood Spike":
                                CurrentSpike = 160;
                                break;
                            case "Wood Wall":
                                CurrentSpike = 162;
                                break;
                            case "Nothing":
                                CurrentSpike = -1;
                                break
                        }
                        if (CurrentSpike === -1 || !Ww.ᐃΔⵠΔ.ΔᐃⲆ[CurrentSpike]) continue;
                        spikeid = CurrentSpike;
                        break
                    }
                    if (spikeid) {
                        let PInumb = 2 * Math.PI;
                        let MYPLAYERANGLE = Math.floor((myPlayer.angle + PInumb) % PInumb * 255 / PInumb);
                        if (Settings.AutoSpike.m) {
                            for (let ang = 1; ang < 31; ang++) {
                                Δⵠᐃⵠ.ⵠⵠᐃΔ.send(JSON.stringify([23, spikeid, (ang + MYPLAYERANGLE) % 255, 0]));
                                Δⵠᐃⵠ.ⵠⵠᐃΔ.send(JSON.stringify([23, spikeid, (MYPLAYERANGLE - ang + 255) % 255, 0]))
                            }
                        }
                        Δⵠᐃⵠ.ⵠⵠᐃΔ.send(JSON.stringify([23, spikeid, MYPLAYERANGLE, 0]))
                    }
                }
            }
        }
    }

    /*
    *********
    ***END***
    *********
    */

    Yi = function () {
        pr = ij(mi(13));
        rr = qk(pr);
        if (jr) {
            jr();
        }

        let MainHackInterval;
        setTimeout(() => {
            MainHackInterval = workerTimers.setInterval(LouxInterval, 80)
        }, 7000);

        window.Utils.LoadHack();
    };
    const tr = 7;
    const ur = 19;
    const vr = 11;
    const wr = k;
    function xr(a, b) {
        const c = (1013904223 + (a + 22494) * 1664525) % 4294967296;
        const d = (8 << (b >> 16 & 255)) + (0 << (b >> 24 & 255)) + (24 << (b >> 0 & 255)) + (16 << (b >> 8 & 255));
        const e = io(c, d, c, d, c, d);
        (function (b, c, d, e, f) {
            const i = b ^ 46660;
            const a = (c | 38268) & ~(c & 38268);
            const j = (d + 9561) % 65458;
            const k = (1 + (e + 15800) * 22695477) % 4294967296;
            const h = (f | 15396) & ~(f & 15396);
            const l = Bf(i, a, j, k, h);
            const g = _q(i, a, j, k, h);
        })(c, d, c, d, c);
        return e ^ 7052;
    }
    const yr = 17;
    const qr = 16;
    function zr(a, b, c, d) {
        bi(pr, a, b, c, d);
        return ((182 + (rf(rr[0], rr[1], rr[2], rr[3], rr[0], rr[1]) ^ rf(rr[2], rr[3], rr[0], rr[1], rr[2], rr[3]))) * 8121 + 28411) % 134456;
    }
    const Br = 11;
    const Cr = 17;
    const Dr = 8;
    var Er = 0;
    var Gr = {
        ᐃⲆΔᐃⵠ: ["#133A2B", "#042b30"],
        ⲆⵠⲆⵠᐃᐃᐃⵠΔ: ["#EBF2F0", "#136167"],
        ⵠⲆⲆᐃᐃⲆⲆ: ["#4EB687", "#187484"],
        ΔⲆⵠᐃⵠᐃⲆ: ["#664516", "#13474C"],
        ⲆᐃΔⵠⲆⲆᐃ: ["#FCEFBB", "#0F4D48"],
        ᐃⵠᐃⵠⲆⵠⵠ: ["#C1AA7E", "#0F423D"],
        ⲆᐃⵠⲆⵠᐃⲆ: ["#594837", "#163A3A"],
        ⲆΔⵠⵠΔΔᐃ: ["#A5D6D6", "#539CA0"],
        ⵠⲆⲆⵠⵠ: ["#0B6A84", "#09373F"],
        ΔⵠⲆⲆⲆⵠⵠ: ["#2A8B9B", "#0F464C"],
        ᐃⵠⲆᐃⲆⲆᐃ: ["#A9D6D3", "#115E60"],
        ⵠⵠⲆⵠⲆⵠΔ: ["#ECF7F9", "#539CA0"],
        ᐃⲆⲆⲆΔΔΔ: ["#FFF", "#FFF"],
        ᐃⲆⲆᐃᐃⲆΔ: ["#FFF", "#FFF"],
        ⲆᐃⵠⵠⵠΔΔ: ["#1C9BA4", "#00272F"],
        ⲆⵠΔΔᐃ: ["#2D2017", "#031C1E"],
        ΔΔᐃ: 0,
        ᐃΔⲆ: 1,
        ΔᐃⵠΔΔⲆᐃⵠⵠ: 2300,
        ΔⲆΔΔⵠⲆⵠⵠⵠ: 2290,
        ⵠⲆⵠⲆᐃᐃⲆ: 34,
        ⵠΔΔⲆᐃᐃⵠ: 5,
        ⲆⲆᐃⵠⲆᐃⵠ: 68,
        ⲆΔⲆⲆᐃᐃⵠ: 34,
        ⵠΔΔᐃⲆΔⵠ: 5,
        ΔⵠΔⲆᐃΔΔ: 1,
        ᐃⲆⵠⵠᐃⲆᐃ: 0.6,
        ⲆⵠΔⲆⲆΔᐃ: 0.25,
        ⲆᐃᐃᐃⲆⵠⵠ: 50,
        ᐃΔᐃⲆⵠᐃⵠ: 10,
        ⵠⲆⵠΔⲆⲆⲆ: 75,
        ΔᐃⵠⲆⲆⵠⵠ: 20,
        ⵠⵠΔⲆⵠΔⲆ: 5,
        Ⲇⵠᐃᐃⵠ: 0,
        Δᐃᐃᐃⵠ: 1,
        ΔᐃᐃᐃⲆ: 2,
        ᐃΔⵠᐃᐃ: 3,
        ΔΔⵠΔⵠ: 4,
        ᐃΔᐃⵠᐃ: 5,
        ᐃΔⵠᐃⲆ: 6,
        ⲆΔΔⵠᐃ: 7,
        ⵠⲆⵠⲆᐃ: 8,
        ᐃΔᐃᐃᐃ: 9,
        ΔΔⲆⲆΔ: 10,
        ⵠΔᐃΔΔ: 11,
        ΔΔⲆⲆⵠ: 12,
        ⲆΔᐃᐃᐃ: 13,
        ⵠⵠᐃⲆⵠ: 14,
        ΔⵠᐃΔΔ: 15,
        ΔΔⵠⵠΔ: 16,
        ΔΔΔᐃΔ: 17,
        ᐃᐃⲆΔΔ: 18,
        ΔⲆⵠⵠΔ: 19,
        ⵠⵠⵠΔⲆ: 20,
        ΔⲆⵠΔⲆ: 21,
        ᐃⵠⲆⲆΔ: 22,
        ΔⲆᐃΔΔ: 23,
        ᐃᐃⲆΔⵠ: 24,
        ΔΔⵠᐃⵠ: 25,
        ⲆΔⲆⵠⵠ: 26,
        ⲆΔΔΔΔ: 27,
        ⲆΔⵠⲆᐃ: 28,
        ΔΔΔⵠ: 29,
        ⵠΔΔⵠΔ: 30,
        ᐃⲆⲆΔᐃ: 31,
        ⲆⲆⵠᐃⵠ: 32,
        ⲆⵠⵠⲆⲆ: 33,
        ᐃⲆⵠᐃΔ: 34,
        ⵠΔⲆⲆᐃ: 35,
        Δᐃⵠᐃⵠ: 36,
        ᐃⲆᐃⵠᐃ: 37,
        ⵠⲆⵠᐃⲆ: 38,
        ⲆⲆᐃⵠΔ: 39,
        ᐃᐃⲆⵠᐃ: 40,
        ᐃⲆΔΔⲆ: 41,
        ᐃΔΔᐃⵠ: 42,
        ΔⲆᐃⵠΔ: 43,
        ⲆⲆΔⵠⲆ: 44,
        Ⲇᐃⵠᐃᐃ: 45,
        ⵠⲆⲆⲆⲆ: 46,
        ΔⵠΔⲆⲆ: 47,
        ⲆᐃΔⲆΔ: 48,
        Δᐃᐃⵠⵠ: 49,
        ᐃᐃΔⵠⲆ: 50,
        ΔⵠⵠⲆΔ: 51,
        ⲆᐃᐃⲆⵠ: 52,
        ⵠΔΔΔΔ: 53,
        ᐃΔΔΔᐃ: 54,
        ᐃⵠᐃⵠΔ: 55,
        ΔⵠⵠⲆᐃ: 56,
        ᐃᐃⵠⲆᐃ: 57,
        ⵠᐃΔⵠⵠ: 58,
        ⲆⲆⵠΔᐃ: 59,
        ᐃⲆᐃΔⵠ: 60,
        ⲆⲆᐃⵠⲆ: 61,
        ⲆⵠⲆⲆΔ: 62,
        ⵠⲆΔⵠΔ: 63,
        ΔᐃⵠΔⲆ: 64,
        ΔΔⲆΔⵠ: 65,
        ⵠⵠⵠⵠᐃ: 66,
        ᐃᐃᐃᐃⲆ: 67,
        ⲆΔΔⲆᐃ: 68,
        ⵠⲆⵠⵠΔ: 69,
        ΔΔⵠΔΔ: 70,
        ⵠΔᐃⵠΔ: 71,
        ΔᐃⵠⵠⲆ: 72,
        ⲆΔⲆΔⵠ: 73,
        ᐃⲆⲆⲆⲆ: 74,
        ᐃⲆᐃⲆΔ: 75,
        ᐃᐃⵠⵠΔ: 76,
        ⲆⲆΔⲆⵠ: 77,
        ⵠᐃⲆᐃᐃ: 78,
        ᐃΔΔⵠΔ: 79,
        ΔⲆⲆΔⲆ: 80,
        ᐃΔⵠΔⲆ: 81,
        ⲆⲆⵠΔΔ: 82,
        ⲆΔⵠᐃᐃ: 83,
        ᐃᐃⲆⲆᐃ: 84,
        ⵠⵠⲆᐃⵠ: 85,
        Δⵠⵠᐃᐃ: 86,
        ᐃⵠᐃⵠⲆ: 87,
        ᐃΔⵠⲆⲆ: 88,
        ᐃⵠⲆΔⵠ: 89,
        ᐃⵠᐃⵠᐃ: 90,
        ⵠⵠⲆⲆⲆ: 91,
        ⲆᐃⲆΔⲆ: 92,
        ᐃΔⵠΔⵠ: 93,
        ⲆᐃⲆⵠⲆ: 94,
        ⲆⵠΔⵠΔ: 95,
        ΔⲆΔᐃᐃ: 96,
        ΔΔⲆΔΔ: 97,
        ᐃⵠᐃᐃΔ: 98,
        ᐃᐃⲆᐃᐃ: 99,
        ᐃⵠⲆΔᐃⲆⵠⵠⲆ: 100,
        Ⲇᐃⵠⵠⵠ: 101,
        ΔΔⲆⵠⲆ: 102,
        ⲆⵠᐃΔⵠ: 103,
        ⲆⲆⲆⵠⲆ: 104,
        ⵠⵠⲆᐃΔ: 105,
        ⵠΔΔᐃΔ: 106,
        ᐃⵠⵠⵠⵠ: 107,
        ᐃᐃᐃᐃᐃ: 108,
        ⲆΔΔΔ: 109,
        ⵠⵠΔⲆⵠ: 110,
        ᐃⵠⵠᐃ: 111,
        ⲆΔᐃᐃ: 112,
        ⲆⵠⲆⲆⲆΔⲆ: 113,
        ⲆᐃⲆΔᐃ: 114,
        ⲆⵠⵠⵠΔⵠⵠ: 115,
        ΔⲆⵠΔᐃ: 116,
        ΔΔᐃⵠⲆ: 117,
        ᐃⲆᐃⲆᐃⵠⵠ: 118,
        ⲆⲆⲆᐃᐃᐃⵠ: 119,
        ᐃΔⲆΔⵠ: 120,
        Ⲇᐃᐃⵠ: 121,
        ⲆΔᐃᐃⲆ: 122,
        ⲆᐃΔΔᐃ: 123,
        ᐃⲆᐃΔⵠⲆΔ: 124,
        ⲆⲆⵠᐃⲆ: 125,
        ⲆⲆⵠᐃᐃ: 126,
        ⲆⵠᐃⲆⵠ: 127,
        ΔⲆⵠᐃⵠ: 128,
        ⵠᐃΔⲆⵠ: 129,
        ΔΔΔⲆΔ: 130,
        ⵠⲆⵠᐃᐃ: 131,
        ⵠⲆⲆΔΔ: 132,
        ᐃⵠⵠⲆⵠ: 133,
        ᐃᐃΔΔᐃ: 134,
        ΔⵠⲆᐃⲆ: 135,
        ⵠⵠⲆⵠᐃ: 136,
        ⵠΔⵠⵠᐃ: 137,
        ᐃΔΔⵠⲆ: 138,
        ᐃⵠΔΔΔ: 139,
        ᐃᐃᐃⲆᐃⲆᐃ: 140,
        ⵠΔⵠⲆⲆ: 141,
        ᐃᐃΔᐃⲆᐃᐃ: 142,
        ⲆⲆΔⲆᐃΔⵠ: 143,
        ᐃⵠⲆΔⲆⵠⵠ: 144,
        ⵠᐃΔΔᐃΔⲆ: 145,
        ΔⵠⵠⵠⲆ: 146,
        ΔⵠⲆᐃΔ: 147,
        ⵠΔⲆΔⵠ: 148,
        ⵠⲆⵠⲆⲆ: 149,
        ᐃΔᐃΔᐃ: 150,
        ⲆΔᐃΔⵠ: 151,
        ⲆⲆⲆᐃᐃ: 152,
        ΔⵠΔᐃⵠ: 153,
        ⲆΔΔⲆΔ: 154,
        ⵠⲆⵠⲆΔ: 155,
        ᐃᐃᐃⲆᐃ: 156,
        ⵠᐃᐃΔᐃ: 157,
        ⵠⵠⵠⲆΔ: 158,
        ⲆⲆⲆⲆᐃ: 159,
        ⵠΔⲆⵠⵠ: 160,
        ⵠⵠΔⵠΔ: 161,
        ᐃΔⵠⵠⵠ: 162,
        ⲆⲆⲆⲆⲆ: 163,
        ᐃΔⵠⲆⵠ: 164,
        ᐃΔⲆΔⲆ: 165,
        ΔⵠⵠⲆᐃΔⵠ: 166,
        ΔⵠΔⲆᐃ: 167,
        ⵠⲆᐃᐃΔ: 168,
        ΔⲆⲆΔᐃ: 169,
        ᐃΔΔⲆⲆ: 170,
        ᐃⵠⵠⵠᐃᐃΔ: 171,
        ᐃᐃⵠΔΔⲆⵠ: 172,
        ⲆⲆⲆⵠΔⲆⵠ: 173,
        ᐃⲆᐃⲆⵠ: 174,
        ⵠᐃⲆᐃᐃⲆⵠ: 175,
        ⵠΔⵠⵠⵠΔⲆ: 176,
        ⲆⲆⵠⵠⲆⵠΔ: 177,
        ⵠⵠⵠⵠⲆⵠΔ: 178,
        ΔⲆᐃⵠⵠΔᐃ: 179,
        ⵠΔⲆⵠΔⲆⵠ: 180,
        ᐃΔΔᐃᐃΔΔ: 181,
        ΔᐃⵠΔⲆⵠⲆ: 182,
        ᐃⲆⵠᐃᐃ: 183,
        ⲆᐃⵠΔΔ: 184,
        ᐃᐃΔⵠᐃ: 185,
        Δⵠᐃⵠⵠ: 186,
        ⵠΔΔⵠⲆ: 187,
        ⲆᐃᐃᐃⲆΔⲆ: 188,
        ⲆᐃⲆⲆⵠ: 189,
        ᐃᐃΔᐃⲆ: 190,
        ⲆΔⵠⲆⲆΔⵠ: 191,
        ⲆᐃⵠⲆᐃ: 192,
        ΔᐃⲆⵠᐃⵠᐃ: 193,
        ᐃΔⲆⲆΔ: 194,
        ⲆΔΔΔⲆ: 195,
        ⵠΔΔᐃΔⵠⲆ: 196,
        ΔᐃᐃΔⵠΔᐃ: 197,
        ᐃᐃⲆΔⲆ: 198,
        ⵠⵠᐃⵠΔ: 199,
        ΔᐃΔᐃⲆⵠⵠ: 200,
        ⵠᐃⲆᐃΔ: 201,
        ⲆⵠⵠΔ: 202,
        ⲆⲆⲆⵠⵠ: 203,
        ⵠⲆΔΔⲆⲆⵠ: 204,
        ΔᐃⲆⵠΔ: 205,
        ⵠⲆΔᐃⲆⲆΔ: 206,
        ⵠᐃⲆⲆΔ: 207,
        ᐃᐃᐃᐃᐃᐃΔ: 208,
        ⵠⲆⵠΔΔ: 209,
        ΔⲆⵠΔⲆΔΔ: 210,
        ⲆⵠΔⲆᐃⵠΔ: 211,
        ⲆΔⲆⲆΔ: 212,
        ⲆᐃΔⵠⵠ: 213,
        ΔⵠΔⲆΔ: 214,
        ΔᐃΔⲆΔ: 215,
        ΔⵠⵠΔⵠ: 216,
        ⲆⲆⵠⵠᐃ: 217,
        ⲆⲆⵠⲆⵠ: 218,
        ⲆΔⲆΔΔ: 219,
        ⵠΔⵠᐃΔ: 220,
        ᐃᐃΔⵠⵠ: 221,
        ᐃⲆⵠᐃⵠ: 222,
        ⵠΔⲆⲆⵠ: 223,
        ΔⲆΔⲆᐃ: 224,
        ΔᐃⵠᐃⲆΔⵠ: 225,
        ⲆᐃΔΔⲆⵠⵠ: 226,
        ⵠⲆᐃⲆᐃ: 227,
        ᐃⵠΔⲆᐃⵠⵠ: 228,
        ᐃᐃᐃⲆΔ: 229,
        ᐃⲆΔⲆⲆ: 230,
        Δᐃᐃⵠᐃ: 231,
        ⵠᐃᐃΔⵠ: 232,
        ⵠⲆⵠⲆⵠ: 233,
        ⵠⵠⵠⵠⲆⲆⲆ: 234,
        ᐃΔΔⲆᐃ: 235,
        ᐃⲆⲆΔⲆ: 236,
        ΔΔΔⵠᐃ: 237,
        ᐃⲆⲆᐃⵠ: 238,
        ᐃΔᐃΔⵠ: 239,
        ΔⲆⲆΔΔ: 240,
        ⵠⵠⵠⵠⵠ: 241,
        ⵠᐃΔᐃⲆ: 242,
        ⲆᐃⲆⵠΔⵠΔ: 243,
        ΔᐃⲆᐃΔ: 244,
        ᐃᐃΔᐃᐃ: 245,
        ⵠΔⵠΔΔΔᐃ: 246,
        ΔΔΔΔⵠ: 247,
        ΔⲆⲆⵠⲆ: 248,
        ⵠΔⲆⲆⵠⲆΔ: 249,
        ᐃΔᐃⵠΔ: 250,
        ᐃⲆΔΔⵠ: 251,
        ⲆᐃⵠᐃΔⵠⵠ: 252,
        ⵠⵠⲆⲆⲆⲆᐃ: 253,
        ⲆᐃⲆᐃⲆⵠΔ: 254,
        ΔᐃΔᐃΔⲆΔ: 255,
        ᐃⲆⲆⲆᐃⵠΔ: 256,
        ᐃΔⲆⲆⲆⵠᐃ: 257,
        ⵠΔⵠᐃⵠᐃⵠ: 258,
        ⵠΔⵠΔⲆⲆⲆ: 259,
        ⵠΔⲆΔⲆ: 260,
        ⲆⵠᐃᐃΔⲆᐃ: 261,
        ΔⵠᐃΔⵠΔⲆ: 262,
        ᐃⲆΔⲆⵠⵠΔ: 263,
        ⵠᐃⲆⵠᐃ: 264,
        ΔⵠⵠⵠⵠᐃⲆ: 265,
        ΔᐃⵠΔΔⵠΔ: 266,
        ⲆᐃΔΔᐃⵠᐃ: 267,
        ΔⲆⵠⲆⲆⲆΔ: 268,
        ΔⵠᐃⵠⲆⵠΔ: 269,
        ⵠⲆᐃΔⵠᐃⲆ: 270,
        ⲆᐃᐃⵠΔⲆΔ: 271,
        ⲆⲆⲆᐃᐃⵠΔ: 272,
        ⵠΔᐃΔⲆᐃⵠ: 273,
        ⲆΔΔΔᐃΔᐃ: 274,
        ⲆⵠΔⲆⵠᐃΔ: 275,
        ⵠΔᐃⵠⲆⲆⵠ: 276,
        ΔⵠⵠⵠⵠΔΔ: 277,
        ΔΔᐃΔⵠⵠᐃ: 278,
        ᐃⲆᐃΔ: 279,
        ᐃⲆΔⲆΔ: 280,
        ⲆΔΔᐃⲆΔᐃ: 281,
        ΔᐃⲆⵠΔΔᐃ: 282,
        ᐃⲆ: 283,
        ᐃⵠᐃⵠⲆⵠᐃ: 284,
        ᐃᐃⵠᐃⵠ: 285,
        ⲆⵠⲆΔΔ: 286,
        ΔⲆᐃⵠⲆΔⵠ: 287,
        ⲆⲆᐃⲆᐃ: 288,
        ⵠⲆΔⵠⵠΔΔ: 289,
        ⵠᐃⵠⲆⲆⵠⵠ: 290,
        ΔⵠΔᐃⲆⵠΔ: 291,
        ᐃⵠΔⵠⵠΔΔ: 292,
        ΔⵠΔΔⲆᐃΔ: 293,
        ᐃⵠⵠᐃⵠ: 294,
        ΔΔΔΔⲆⵠⵠ: 295,
        ⵠᐃⲆᐃⲆΔᐃ: 296,
        ΔΔⵠᐃⲆⵠΔ: 297,
        ⲆᐃΔᐃⵠΔΔ: 298,
        ⲆΔⵠⵠⲆ: 299,
        ᐃᐃᐃᐃⵠⲆⲆ: 300,
        ΔΔⵠᐃⵠΔΔ: 301,
        ⲆⲆᐃΔᐃᐃᐃ: 302,
        ΔⲆᐃᐃⵠᐃⵠ: 303,
        ΔⵠΔΔᐃⲆΔ: 304,
        ⵠⲆᐃΔΔᐃⲆ: 305,
        ᐃⲆᐃΔᐃⵠᐃ: 306,
        ⲆⲆᐃⵠᐃ: 307,
        ⲆⵠⲆᐃⵠΔᐃ: 308,
        ⵠⵠΔⵠΔΔⵠ: 309,
        ⵠⵠⲆⵠⵠⵠΔ: 310,
        ⵠᐃⵠᐃⵠΔΔ: 311,
        ⵠⲆΔⲆⵠΔⵠ: 312,
        ᐃⲆΔⵠⵠⲆΔ: 313,
        ᐃⲆΔΔΔⵠⵠ: 314,
        ᐃΔᐃᐃⵠΔⲆ: 315,
        ⵠⵠᐃᐃᐃᐃⲆ: 316,
        ⲆⵠⲆⵠΔⵠΔ: 317,
        ⵠⲆⵠΔᐃᐃΔ: 318,
        ⲆⵠΔᐃⲆᐃΔ: 319,
        ᐃⲆⲆΔⲆⵠᐃ: 320,
        ΔⵠᐃΔᐃ: 321,
        ⲆⵠΔⲆⲆᐃⵠ: 322,
        ⲆᐃᐃⵠⲆⵠⵠ: 323,
        ⵠᐃᐃΔⵠⲆⲆ: 324,
        ᐃΔⲆⵠⲆⵠⵠ: 325,
        ΔⲆΔΔⲆⵠΔ: 326,
        ΔΔⵠΔΔᐃΔ: 327,
        ⵠⲆΔΔΔᐃⵠ: 328,
        ΔⲆΔΔΔⲆᐃ: 329,
        ᐃᐃΔⵠᐃⲆⲆ: 330,
        ᐃⲆᐃⲆⲆᐃⵠ: 331,
        ⲆΔΔⵠΔⵠⵠ: 332,
        ⲆⲆⲆⲆΔΔⵠ: 333,
        ⲆⲆⲆⲆⲆΔᐃ: 334,
        ⵠⵠⲆΔΔⵠᐃ: 335,
        ⲆΔⵠⵠΔᐃⵠ: 336,
        ΔΔⲆⲆᐃΔⵠ: 337,
        ⲆᐃⵠⵠᐃΔᐃ: 338,
        ΔⵠⲆⲆΔⲆΔ: 339,
        ΔⵠⵠⵠΔⵠⲆ: 340,
        ᐃΔⵠᐃᐃᐃᐃ: 341,
        ᐃΔᐃⵠⲆⲆⵠ: 342,
        ⵠⵠΔᐃⵠᐃⲆ: 343,
        ΔᐃᐃᐃΔⵠⲆ: 344,
        ⲆᐃⵠᐃⲆΔⵠ: 345,
        ⵠⵠⵠⲆⲆⲆⵠ: 346,
        ⵠᐃⵠⵠⵠⲆⵠᐃΔ: 347,
        ⲆⵠΔⵠⲆΔΔ: 348,
        ⵠᐃᐃΔᐃⲆΔ: 349,
        ΔⵠⵠⲆⵠⵠⵠ: 350,
        ΔⲆᐃᐃⵠΔⵠ: 351,
        ⲆⵠΔᐃⲆΔΔ: 352,
        ᐃⲆᐃⵠⲆⲆⵠ: 353,
        ⲆΔᐃΔΔⵠⲆ: 354,
        ΔⵠⵠᐃΔᐃᐃ: 355,
        ᐃⲆⲆΔⵠᐃΔ: 356,
        ⵠΔⵠΔᐃᐃΔ: 357,
        ⵠⵠᐃΔⵠⵠᐃ: 358,
        ⵠⵠⲆΔⵠⲆⲆ: 359,
        ᐃᐃⵠⲆⲆΔΔ: 360,
        ⲆΔΔΔΔᐃᐃ: 361,
        ΔⵠⵠΔΔᐃΔ: 362,
        ⲆΔᐃⲆᐃⵠⲆ: 363,
        ⵠᐃⵠᐃᐃⲆⵠ: 364,
        ᐃΔⵠⵠᐃⵠⵠ: 365,
        ΔⵠⵠΔᐃⲆᐃ: 366,
        ᐃⲆⵠΔⲆⲆᐃ: 367,
        ᐃⵠⵠᐃⵠⵠᐃ: 368,
        ⲆΔΔⵠⲆⵠⵠ: 369,
        ⲆⵠᐃΔΔⲆⲆ: 370,
        ᐃⵠⲆᐃᐃᐃⲆ: 371,
        ⲆⵠᐃⲆΔΔⲆ: 372,
        ⵠⵠᐃⲆΔⲆᐃ: 373,
        ᐃᐃⲆᐃⲆⲆΔ: 374,
        ⵠⵠΔⲆᐃⵠΔ: 375,
        ⵠⲆⲆΔⲆⵠᐃ: 376,
        ⵠⵠⲆⲆⵠΔⵠ: 377,
        ᐃⲆⵠⲆⵠᐃⲆ: 378,
        ΔⲆᐃⵠⲆⵠᐃ: 379,
        ⵠᐃΔⲆⲆⲆΔ: 380,
        ⵠᐃⵠⵠⵠᐃⲆ: 381,
        ᐃᐃᐃΔⵠΔⲆ: 382,
        ᐃᐃⲆᐃΔΔⲆ: 383,
        ᐃⲆᐃⵠⵠⵠΔ: 384,
        ⲆⵠΔᐃⲆᐃᐃ: 385,
        ᐃΔⲆᐃΔⲆⵠ: 386,
        ⵠⲆΔⲆᐃᐃᐃ: 387,
        ⵠᐃⲆⵠΔⲆΔ: 388,
        ⵠΔⲆⵠᐃⵠΔ: 389,
        ΔᐃⵠΔᐃⲆⲆ: 390,
        ⵠⲆᐃⵠΔⲆⲆ: 391,
        ⲆⲆⵠⵠⲆᐃⵠ: 392,
        ⲆⲆΔΔⵠⵠⲆ: 393,
        ΔⲆⲆⵠΔᐃⵠ: 394,
        ᐃⵠⲆⵠⵠΔΔ: 395,
        ᐃΔⵠΔⵠᐃⲆ: 396,
        ⲆΔΔⲆⵠⵠⵠ: 397,
        ⵠᐃⲆⲆⵠⵠΔ: 398,
        ᐃⲆⲆΔⵠⵠⵠ: 399,
        ΔⲆⲆᐃⲆⲆⲆ: 400,
        ⵠⲆⵠⲆⲆⲆⲆ: 401,
        ⲆᐃᐃΔΔΔΔ: 402,
        ᐃⲆⵠⲆⵠᐃᐃ: 403,
        ᐃⵠⵠΔᐃΔⲆ: 404,
        ⵠΔᐃⲆⲆᐃⵠ: 405,
        ΔⲆⵠⲆⵠⲆⲆ: 406,
        ⲆⵠⲆⵠΔⵠⵠ: 407,
        ⲆⵠⲆⲆᐃⲆⲆ: 408,
        ⵠΔⵠⵠⵠⲆΔ: 409,
        ⵠⵠⵠⲆΔΔⵠ: 410,
        ⲆⲆᐃⲆⵠⵠΔ: 411,
        ᐃⲆⵠᐃⲆⵠⲆ: 412,
        ⵠⲆⲆΔᐃ: 413,
        ⲆᐃⲆⵠΔᐃΔⵠᐃ: 414,
        ⲆⲆⵠⲆΔ: 415,
        ΔᐃΔⲆⵠ: 416,
        ᐃⵠᐃᐃⵠΔⵠⵠⵠ: 417,
        ⲆⵠΔΔΔⵠΔ: 418,
        ⵠⵠⵠⲆⲆ: 419,
        ΔᐃΔΔⵠⵠΔ: 420,
        ⵠᐃⵠⵠⲆⵠΔ: 421,
        ⲆⲆΔⲆΔᐃΔ: 422,
        ⵠᐃᐃⵠᐃⲆⲆ: 423,
        ΔΔⲆⵠΔΔᐃ: 424,
        ⲆⲆᐃⲆΔΔⲆ: 425,
        ⵠΔΔΔΔⵠⵠ: 426,
        ΔⲆⵠᐃΔⲆᐃ: 427,
        ⵠⵠⲆΔᐃᐃⲆ: 428,
        ᐃⵠⲆᐃΔΔᐃ: 429,
        ⵠⲆᐃⵠᐃᐃΔ: 430,
        ᐃⵠⵠΔⵠᐃⵠ: 431,
        ᐃᐃⵠⵠᐃⵠᐃ: 432,
        ᐃⲆΔᐃΔᐃᐃ: 433,
        ⵠΔΔⲆᐃⲆᐃ: 434,
        ⵠⲆΔⵠΔⲆΔ: 435,
        ⲆᐃⵠΔⲆᐃⵠ: 436,
        ⵠᐃⲆⲆⲆΔⲆ: 437,
        ΔΔⵠⵠⵠᐃⵠ: 438,
        ΔΔᐃⲆⵠΔⵠ: 439,
        ᐃΔⲆΔⵠᐃΔ: 440,
        ⲆΔᐃⵠⲆⲆⲆ: 441,
        ᐃΔΔᐃⵠᐃΔ: 442,
        ΔᐃⵠⲆⵠᐃΔ: 443,
        ⵠᐃⵠΔⵠⲆⲆᐃⲆ: 444,
        ΔΔΔⵠΔ: 445,
        ⲆΔⲆⲆⵠΔΔ: 446,
        ⲆⵠᐃᐃᐃᐃⲆ: 447,
        ΔΔᐃⲆⲆⲆΔⵠⲆ: 448,
        ⵠᐃᐃⵠΔ: 449,
        ⲆΔⲆⵠᐃ: 450,
        ⲆⲆᐃⵠᐃⲆᐃ: 451,
        ᐃⲆⲆⵠΔⵠᐃ: 452,
        ΔᐃⲆᐃΔΔᐃ: 453,
        ΔⲆⲆᐃⲆᐃⵠ: 454,
        ⲆΔⲆⲆⲆᐃΔ: 455,
        ᐃⲆΔⲆⲆᐃⲆ: 456,
        ⵠᐃᐃⲆΔⵠⲆ: 457,
        ⲆᐃⵠΔⵠⲆᐃ: 458,
        ᐃⲆⵠⲆⵠΔⵠ: 459,
        ⵠᐃⲆⲆⵠⲆΔ: 460,
        ⲆᐃΔᐃᐃⵠᐃ: 461,
        ᐃⲆⵠᐃⵠⲆΔ: 462,
        ᐃⵠΔᐃΔⵠΔ: 463,
        ⵠⵠⲆⲆⵠⲆⲆ: 464,
        ⲆⲆⲆⵠⲆΔᐃ: 465,
        ⲆᐃΔᐃⲆⵠⵠ: 466,
        ⲆⲆᐃⵠᐃⵠΔ: 467,
        ⵠᐃⲆᐃᐃⲆᐃ: 468,
        ⲆᐃⲆⵠⲆⲆᐃ: 469,
        ⵠⵠⵠΔΔⲆⵠ: 470,
        ⲆⲆΔᐃⲆⵠⵠ: 471,
        ⲆᐃⵠⲆᐃΔᐃ: 472,
        ⵠᐃⲆⵠᐃΔᐃ: 473,
        ⲆΔΔⵠᐃᐃᐃ: 474,
        ΔΔᐃΔΔⲆⵠ: 475,
        ⵠⵠⵠΔⲆⲆⲆ: 476,
        ᐃⲆᐃⲆΔᐃΔ: 477,
        ΔᐃΔΔᐃⵠΔ: 478,
        ⵠⵠⲆΔⲆΔⲆ: 479,
        ᐃⲆᐃⲆᐃᐃᐃ: 480,
        ⲆⲆⵠⵠⵠⲆᐃ: 481,
        ⲆᐃᐃΔΔⵠⵠ: 482,
        ΔΔᐃΔᐃⲆⲆ: 483,
        ΔᐃᐃⲆⵠᐃᐃ: 484,
        ⲆⲆᐃᐃⵠΔᐃ: 485,
        ⵠᐃΔᐃⵠΔⵠ: 486,
        ΔⵠⵠⲆⵠⲆΔ: 487,
        ᐃᐃⲆⲆᐃⵠⲆ: 488,
        ᐃⲆⲆⲆⲆⲆᐃ: 489,
        ᐃⵠⲆⲆⲆΔⲆ: 490,
        ᐃΔⲆΔⵠᐃᐃ: 491,
        ⵠⵠΔᐃΔΔⵠ: 492,
        ᐃⵠᐃΔᐃΔᐃ: 493,
        ΔᐃⲆⵠⵠⵠⵠ: 494,
        ΔΔΔΔΔⲆᐃ: 495,
        ΔⲆⵠⵠᐃⵠⵠ: 496,
        ⵠᐃⵠⵠΔⵠⲆ: 497,
        ᐃΔᐃΔⲆΔᐃ: 498,
        ⵠⵠᐃΔⲆᐃⵠ: 499,
        ⲆᐃⲆⲆᐃᐃⲆ: 500,
        ᐃⵠⵠᐃⵠΔⲆ: 501,
        ᐃⵠᐃᐃᐃⲆᐃ: 502,
        ᐃⲆΔⲆᐃΔᐃ: 503,
        ΔⲆΔⵠᐃΔⲆ: 504,
        ⵠⵠⵠΔⲆᐃⵠ: 505,
        ⲆᐃᐃⲆⵠⵠΔ: 506,
        ⲆⲆⲆⵠⲆΔᐃ: 507,
        ΔⲆΔⲆᐃⲆᐃ: 508,
        ΔᐃᐃᐃⲆⵠⵠ: 509,
        ⲆⵠⲆΔᐃⲆⲆ: 510,
        ᐃΔΔᐃⵠⲆⵠ: 511,
        ᐃΔⵠΔⵠⲆᐃ: 512,
        ⵠⵠⵠΔⵠΔᐃ: 513,
        ⵠΔⲆᐃΔᐃⵠ: 514,
        ⲆΔⵠΔΔᐃΔ: 515,
        ΔΔΔΔᐃⲆⲆ: 516,
        ᐃⲆΔᐃᐃΔᐃ: 517,
        ᐃⵠⲆⲆΔⵠⵠ: 518,
        ᐃΔΔⲆⲆᐃΔ: 519,
        ᐃⲆᐃⲆⲆΔΔ: 520,
        ⵠⲆⵠᐃᐃΔⵠ: 521,
        ᐃⵠⵠᐃᐃⲆᐃ: 522,
        ᐃᐃΔᐃΔⵠⲆ: 523,
        ⲆᐃⲆᐃⵠⲆᐃ: 524,
        ⵠᐃⵠⵠⵠⲆΔ: 525,
        ΔⵠΔΔᐃᐃⲆ: 526,
        ⵠⵠⲆᐃᐃᐃΔ: 527,
        ⲆⵠⵠⲆΔᐃⵠ: 528,
        ΔⲆΔΔΔⵠⲆ: 529,
        ⵠΔᐃⲆᐃⲆΔ: 530,
        ⲆⵠᐃᐃⵠⵠⲆ: 531,
        ⲆᐃⲆΔΔᐃⵠ: 532,
        ⵠⵠᐃᐃΔⵠⲆ: 533,
        ⵠΔⲆᐃⵠΔΔ: 534,
        ⲆᐃⵠⲆⵠΔᐃ: 535,
        ΔⲆⲆᐃΔᐃΔ: 536,
        ΔⵠⵠⲆᐃΔᐃ: 537,
        ⵠΔᐃⲆⲆⵠⵠ: 538,
        ⲆᐃᐃᐃⲆᐃᐃⵠΔ: 539,
        ⵠΔⵠΔᐃⲆᐃ: 540,
        ΔᐃⲆⵠⲆᐃⲆ: 541,
        ΔⲆᐃΔⵠΔⲆ: 542,
        ⲆⵠⲆΔⲆᐃᐃ: 543,
        ᐃⵠᐃΔⲆⵠᐃᐃΔ: 544,
        POINTS: 545,
        ⵠⲆᐃⵠΔᐃⲆ: 546,
        ⵠⵠΔⵠⵠⲆⵠ: 547,
        ⲆⲆⵠᐃᐃⲆΔ: 548,
        ⵠᐃΔΔⵠⵠᐃ: 549,
        ᐃⲆⵠⵠⵠᐃⲆ: 550,
        ΔⲆⲆⲆⲆΔⲆ: 551,
        ᐃⵠᐃⲆⵠΔΔ: 552,
        ⵠⲆᐃΔᐃⵠⵠ: 553,
        ΔⲆⲆᐃⵠᐃᐃ: 554,
        ⲆᐃᐃⲆⲆⵠⵠ: 555,
        ⵠΔⵠⲆⲆⵠⵠ: 556,
        ᐃⲆⲆᐃⲆⵠΔ: 557,
        ΔᐃⵠⲆᐃⲆᐃ: 558,
        ΔᐃΔⲆⵠⲆⲆ: 559,
        ᐃⲆΔⵠⲆⲆⵠ: 560,
        ᐃΔⲆᐃΔᐃΔ: 561,
        ⲆΔⵠᐃⵠⲆᐃ: 562,
        ⲆⲆᐃᐃᐃⵠΔ: 563,
        ᐃΔⵠⲆⵠⲆⲆ: 564,
        ⲆⵠⲆⵠᐃᐃΔ: 565,
        ᐃΔⲆᐃⲆᐃΔ: 566,
        ΔᐃΔΔⲆⵠⲆ: 567,
        ⵠⲆΔⲆⲆⲆᐃ: 568,
        ⵠⲆΔᐃᐃΔⵠ: 569,
        ⲆᐃⵠᐃⵠΔΔ: 570,
        ΔΔΔᐃΔΔᐃ: 571,
        ⲆⲆⲆⵠⵠΔⵠ: 572,
        ΔΔᐃᐃⵠⲆᐃ: 573,
        ⵠᐃⵠΔⲆΔⵠ: 574,
        ΔᐃⲆᐃⵠⵠᐃ: 575,
        ΔᐃᐃΔᐃᐃⵠ: 576,
        ⲆΔᐃᐃΔΔⵠ: 577,
        ΔⵠⲆΔᐃⲆᐃ: 578,
        ᐃΔᐃⲆⵠⲆΔ: 579,
        ΔⲆⵠⵠⲆΔΔ: 580,
        ⵠⵠⲆⲆᐃᐃⲆ: 581,
        ΔⲆⵠⲆᐃⵠΔ: 582,
        ΔⵠᐃΔⲆⲆΔ: 583,
        ᐃⵠᐃⵠᐃⵠⵠ: 584,
        ᐃⵠΔⲆⵠⵠᐃ: 585,
        ⵠⲆΔᐃΔΔⵠ: 586,
        ᐃⲆⲆⵠⲆⲆᐃ: 587,
        ΔⵠΔᐃΔⲆⲆ: 588,
        ⲆⵠᐃΔⲆΔⵠ: 589,
        ΔⵠΔΔᐃᐃΔ: 590,
        ⲆⵠᐃᐃⵠΔⵠ: 591,
        ⲆΔⲆⲆᐃᐃΔ: 592,
        ᐃᐃⵠᐃⵠᐃΔᐃΔ: 593,
        ᐃΔᐃⵠⵠⲆᐃ: 594,
        ᐃᐃΔΔᐃᐃᐃᐃᐃ: 595,
        ⵠⲆⲆᐃᐃΔᐃ: 596,
        ΔᐃⲆⵠᐃΔᐃⲆⵠ: 597,
        ΔⵠΔᐃΔᐃΔⵠᐃ: 598,
        ΔⵠⲆⵠΔΔⵠᐃᐃ: 599,
        ΔⲆΔΔΔΔΔⵠΔ: 600,
        ⲆⲆΔΔⵠⵠⵠⵠⲆ: 601,
        ⲆΔⲆᐃΔᐃΔ: 602,
        ⲆⲆⵠΔⲆ: 603,
        ⵠⵠΔⵠᐃᐃᐃ: 604,
        ⲆⲆⲆᐃⵠⵠⵠ: 605,
        ΔⲆᐃΔᐃⵠᐃ: 606,
        ΔΔΔᐃΔΔΔᐃᐃ: 607,
        ⵠΔᐃⵠⵠΔᐃ: 608,
        ΔᐃΔⲆᐃᐃᐃ: 609,
        ⵠⲆᐃΔⵠᐃᐃ: 610,
        ⵠᐃΔΔⵠⲆⲆ: 611,
        ᐃΔᐃᐃᐃⲆΔ: 612,
        ᐃᐃⲆᐃⵠⲆⵠ: 613,
        ΔⵠΔᐃΔⵠⵠ: 614,
        ᐃᐃⵠⲆᐃⵠⵠ: 615,
        ⵠⲆᐃⵠⵠⵠᐃ: 616,
        ⲆΔᐃᐃⲆᐃⵠ: 617,
        ΔⲆⲆΔⵠⵠⲆ: 618,
        ΔᐃΔᐃⵠ: 619,
        ᐃⵠΔᐃⵠ: 620,
        ⵠⵠⵠⵠΔ: 621,
        ⲆΔΔⵠᐃΔᐃᐃᐃ: 622,
        ΔⵠⲆΔⲆⲆⲆ: 623,
        ΔΔⵠΔᐃΔⵠ: 624,
        ⲆΔᐃⵠⲆⵠΔ: 625,
        ΔⵠΔΔⵠⵠⵠ: 626,
        ΔⵠⵠⲆⲆᐃⲆ: 627,
        ⵠΔᐃⵠᐃⵠⵠ: 628,
        ⵠⲆⲆⵠⲆⵠΔ: 629,
        ⲆᐃᐃΔΔⲆΔ: 630,
        ⲆΔᐃⲆⲆᐃΔ: 631,
        ⵠᐃᐃΔⲆΔᐃ: 632,
        ᐃΔⲆΔᐃΔᐃ: 633,
        ᐃⲆΔᐃᐃⵠⲆ: 634,
        ⲆⵠⲆⲆΔⵠᐃ: 635,
        ΔᐃᐃΔΔⵠᐃ: 636,
        ⲆⵠΔΔⵠ: 637,
        ⵠⲆⲆᐃᐃᐃᐃ: 638,
        ⲆΔⲆΔᐃⲆⲆ: 639,
        ⵠⲆⵠΔᐃᐃⲆ: 640,
        ΔᐃᐃⲆⵠⲆⵠ: 641,
        ⵠⵠᐃⲆⲆⲆΔ: 642,
        ΔᐃΔⲆΔⵠⲆ: 643,
        ⲆⵠⵠⵠᐃⵠΔ: 644,
        ΔΔⵠΔΔⲆΔ: 645,
        ΔⲆⲆⲆᐃⲆⲆ: 646,
        ⲆⵠⵠⵠΔⲆⲆ: 647,
        ⲆⲆΔⲆᐃⲆⵠ: 648,
        ΔᐃΔΔΔⵠᐃ: 649,
        ᐃⲆⲆⲆⲆᐃᐃ: 650,
        ⵠⲆᐃⵠᐃⵠⵠ: 651,
        ⵠΔⵠⵠⲆⲆⲆ: 652,
        ᐃⲆⲆⵠⵠᐃᐃ: 653,
        ⲆΔⲆⲆⵠⵠⵠ: 654,
        ᐃΔⵠⲆⵠⵠⵠ: 655,
        ᐃⵠⲆΔΔⲆᐃ: 656,
        ⵠᐃⵠⲆⵠΔΔ: 657,
        ⲆΔᐃⲆⵠᐃⵠ: 658,
        ⵠⵠΔⲆⲆⵠΔ: 659,
        ⲆⵠΔⵠᐃᐃΔ: 660,
        ⵠⵠⵠⵠⵠΔⲆ: 661,
        ᐃⵠⲆⲆᐃΔⲆ: 662,
        ⲆᐃᐃⲆᐃΔΔ: 663,
        ᐃⲆⵠᐃⵠᐃⵠ: 664,
        ⵠⵠᐃⲆᐃⵠᐃ: 665,
        ⲆⵠΔⲆΔⲆᐃ: 666,
        ᐃΔⲆᐃⵠⵠᐃ: 667,
        ⵠΔᐃⲆⲆⲆᐃ: 668,
        ᐃᐃᐃΔΔⵠⲆ: 669,
        ⵠⲆΔⵠⵠΔᐃ: 670,
        ⲆΔⵠᐃΔΔᐃ: 671,
        ⵠⵠΔⲆⵠⲆⵠ: 672,
        ⲆⲆⲆᐃⵠ: 673,
        ΔΔⲆΔⲆⵠᐃ: 674,
        ΔΔΔΔᐃᐃᐃ: 675,
        ⵠⲆⵠᐃⵠ: 676,
        ΔΔᐃᐃⵠΔΔⲆⲆ: 677,
        ΔᐃⲆⵠⵠⵠⲆ: 678,
        ΔΔᐃⲆᐃ: 679,
        ᐃⵠᐃⵠᐃⲆⲆ: 680,
        ᐃᐃΔΔΔⲆᐃ: 681,
        ΔᐃⵠᐃᐃΔΔ: 682,
        ⵠⵠΔⵠⲆⲆΔ: 683,
        ⵠⲆⵠᐃⵠⵠⵠ: 684,
        ᐃⲆⲆΔⲆᐃⵠ: 685,
        ⲆⵠᐃᐃⲆΔⵠ: 686,
        ⲆⲆᐃⲆᐃΔⵠ: 687,
        ⲆΔᐃΔⵠΔⲆ: 688,
        ⲆⲆᐃⵠΔⲆⵠ: 689,
        ⲆᐃⵠⲆⲆΔΔ: 690,
        ΔⲆΔⵠᐃ: 691,
        ⵠᐃⵠⵠⵠ: 692,
        ΔᐃⲆᐃᐃ: 693,
        ΔⲆⵠⲆΔ: 694,
        ⲆᐃᐃⲆΔ: 695,
        ᐃᐃΔⵠⲆⵠⲆ: 696,
        ᐃΔⵠΔᐃΔⵠ: 697,
        ⲆⵠᐃΔᐃⲆΔ: 698,
        ⵠΔᐃᐃⲆᐃᐃ: 699,
        ⲆⵠⲆᐃⲆⵠⵠ: 700,
        ᐃⵠⵠᐃⵠΔᐃ: 701,
        ⵠⵠΔⵠⵠⵠᐃ: 702,
        ⵠΔⵠⵠᐃΔᐃ: 703,
        ΔΔⲆΔⵠᐃΔ: 704,
        ⵠⵠⲆⲆΔⵠⲆ: 705,
        ᐃⲆⵠⲆΔΔΔ: 706,
        ΔΔΔⲆⲆⵠⲆ: 707,
        ᐃⲆⲆⲆⲆⵠⵠ: 708,
        ⵠⵠᐃᐃⵠⵠⵠ: 709,
        ⲆⵠⵠⵠⲆΔΔ: 710,
        ⵠΔⲆⵠⲆᐃⲆ: 711,
        ᐃⲆⵠΔⵠⲆΔ: 712,
        ⲆⲆᐃΔⵠΔⵠ: 713,
        ⵠⲆᐃⲆⵠⲆⵠ: 714,
        ΔⵠΔⲆΔᐃᐃ: 715,
        ᐃᐃⵠⵠⲆⲆⲆ: 716,
        ᐃⵠⵠⲆᐃΔⲆ: 717,
        ⵠᐃΔᐃⲆⵠⲆ: 718,
        ⲆⲆΔⵠⲆⲆⵠ: 719,
        ⵠⲆᐃΔⵠⵠⲆ: 720,
        ᐃⵠⵠᐃΔᐃⲆⵠⲆ: 721,
        ⲆⵠⲆᐃⲆΔⵠ: 722,
        ᐃΔΔⵠⲆⵠᐃ: 723,
        ⲆⲆⵠⵠΔᐃⵠ: 724,
        ⵠᐃᐃⲆⵠⵠⲆ: 725,
        ⲆΔⵠᐃΔⵠᐃ: 726,
        ᐃⵠⲆΔⲆΔⵠ: 727,
        ΔⲆⲆΔΔⲆᐃ: 728,
        ⵠⵠⲆⵠΔⵠⵠ: 729,
        ⲆⵠⲆⲆⵠⲆⲆ: 730,
        ⵠΔᐃᐃⲆΔⵠ: 731,
        ΔⵠⲆᐃᐃⲆΔ: 732,
        ΔⵠⵠⵠⲆᐃᐃ: 733,
        ΔᐃⵠⵠⵠΔᐃ: 734,
        ⲆᐃⲆᐃⵠⵠⵠ: 735,
        ⲆⵠᐃᐃⲆΔΔ: 736,
        ΔΔΔⲆⵠⲆᐃ: 737,
        ⵠΔⲆΔⵠⵠᐃ: 738,
        ΔᐃᐃΔΔΔⲆ: 739,
        ⵠⲆΔΔⵠᐃΔ: 740,
        ᐃⲆᐃᐃⵠΔᐃ: 741,
        ⲆᐃΔⲆΔᐃⲆ: 742,
        ΔⲆΔᐃᐃⲆᐃ: 743,
        ⲆⲆⵠⲆΔⵠᐃ: 744,
        ᐃᐃᐃΔⵠⵠⲆ: 745,
        ⵠⵠᐃᐃᐃΔᐃ: 746,
        ΔⵠⵠᐃΔⵠᐃ: 747,
        ⵠⵠΔΔᐃᐃΔ: 748,
        ᐃΔΔᐃⵠⲆᐃ: 749,
        ⵠΔᐃΔΔⲆΔ: 750,
        ΔⲆΔⲆⲆΔⵠ: 751,
        ΔᐃᐃᐃⲆᐃⵠ: 752,
        ⵠⵠΔⵠⵠᐃⲆ: 753,
        ⵠⵠΔⵠΔⲆⲆ: 754,
        ᐃⵠⵠⲆⵠΔⵠ: 755,
        ⲆⵠᐃΔᐃⵠⵠ: 756,
        ΔΔⲆΔⵠΔⵠ: 757,
        ⲆᐃⲆᐃᐃⵠⵠ: 758,
        ΔⲆΔⵠⲆᐃⲆ: 759,
        ⲆΔⵠⵠΔⲆⵠ: 760,
        ⲆΔⲆⲆⲆΔᐃ: 761,
        ⲆᐃⲆΔⵠᐃᐃ: 762,
        ⵠⲆⲆⲆᐃᐃⲆ: 763,
        ᐃᐃⵠΔΔΔⵠ: 764,
        ⵠΔⲆⲆᐃⵠᐃ: 765,
        ᐃⵠΔᐃⵠⵠⵠ: 766,
        ΔᐃΔᐃⲆΔⲆ: 767,
        ⵠΔᐃΔⵠⵠΔ: 768,
        ᐃᐃⵠⲆᐃᐃΔ: 769,
        ⵠΔⲆΔΔⲆᐃ: 770,
        ⲆⲆⲆⵠΔⵠⵠ: 771,
        ΔⲆΔΔᐃΔⵠ: 772,
        ⲆᐃⵠᐃⲆᐃⵠ: 773,
        ⲆΔᐃᐃⵠΔᐃ: 774,
        ⲆΔᐃⲆᐃᐃⵠ: 775,
        ᐃΔᐃΔᐃⲆΔ: 776,
        ⲆΔⲆⵠⵠⵠΔ: 777,
        ⲆΔᐃΔⲆⲆⵠ: 778,
        ⲆᐃⲆⲆⵠⲆⵠ: 779,
        ᐃᐃΔⵠΔᐃΔ: 780,
        ΔᐃⲆΔⵠⵠᐃ: 781,
        ᐃⲆΔᐃᐃⲆⲆ: 782,
        ⲆᐃⲆⵠΔᐃᐃ: 783,
        ⵠⵠⵠΔⵠΔΔ: 784,
        ΔⲆᐃⲆⵠⵠⲆ: 785,
        ᐃⵠΔⲆᐃΔⵠ: 786,
        ᐃΔⵠᐃⲆᐃⲆ: 787,
        ⵠⲆⲆΔⲆⵠⲆ: 788,
        ᐃⵠⲆⵠΔⵠΔ: 789,
        ⵠΔⵠⵠⲆΔⵠ: 790,
        ⲆⵠⵠΔⵠᐃΔ: 791,
        ΔⲆΔⵠΔⲆΔ: 792,
        ⲆⲆⲆⲆΔ: 793,
        ᐃⵠⲆᐃⲆⵠΔ: 794,
        ᐃΔⲆⵠⲆⲆⲆ: 795,
        ΔΔⵠᐃⲆ: 796,
        ⵠⵠᐃΔΔⲆⵠ: 797,
        ⲆΔⵠᐃⵠⵠΔ: 798,
        ⲆᐃᐃⵠΔΔⵠ: 799,
        ᐃΔᐃᐃⵠΔᐃ: 800,
        ⲆⲆᐃᐃΔⵠⲆ: 801,
        ΔᐃΔⵠⵠ: 802,
        ᐃⲆⵠⵠⲆΔᐃ: 803,
        ⲆⵠⵠᐃΔⵠⵠΔⲆ: 804,
        ⲆᐃⲆⲆⵠᐃⵠⵠⵠ: 805,
        ⲆΔᐃΔⲆⵠΔⲆⵠ: 806,
        ⵠⵠᐃᐃΔⵠⲆⲆΔ: 807,
        ⵠΔΔᐃᐃⲆⲆ: 808,
        ΔⵠⲆⵠΔᐃⲆ: 809,
        ΔⵠᐃⲆⲆΔΔ: 810,
        ⲆᐃⲆⵠⲆⵠᐃ: 811,
        ΔⵠⵠⵠⵠⲆᐃ: 812,
        ⵠΔⲆⵠⵠΔΔ: 813,
        ΔⵠᐃΔᐃᐃⲆ: 814,
        ΔΔᐃᐃΔᐃᐃ: 815,
        ΔΔⲆᐃⵠΔᐃ: 816,
        ᐃᐃⵠⵠᐃᐃΔ: 817,
        ⵠⵠΔΔᐃ: 818,
        ᐃΔᐃⲆᐃ: 819,
        ΔⲆⲆⵠⵠⵠᐃ: 820,
        ᐃⲆⵠᐃᐃᐃᐃ: 821,
        ⵠⲆΔΔⲆⵠΔ: 822,
        ΔⲆⲆᐃⵠΔⲆ: 823,
        ⵠⵠᐃΔΔⵠⲆ: 824,
        ⲆΔⲆᐃⲆΔᐃ: 825,
        ᐃΔᐃⲆⵠⲆᐃ: 826,
        ⵠⵠᐃⲆΔⵠᐃ: 827,
        ⲆΔᐃⵠᐃᐃⵠ: 828,
        ⲆⲆΔⲆΔⲆⲆ: 829,
        ΔΔⵠⵠᐃⲆΔ: 830,
        ⲆⲆΔᐃᐃⵠΔ: 831,
        ΔⲆⵠᐃⲆⵠⲆᐃⵠ: 832,
        ⲆⲆᐃᐃᐃⵠᐃᐃⲆ: 833,
        ᐃⵠᐃⲆⵠⲆⲆ: 834,
        ᐃⵠΔᐃΔΔᐃ: 835,
        ΔⲆΔᐃⲆⲆᐃ: 836,
        ΔⲆΔⲆΔΔᐃ: 837,
        ⲆΔᐃⲆⵠΔᐃ: 838,
        ⵠᐃⵠⲆⲆⵠΔ: 839,
        ᐃⵠⵠΔⵠⵠⵠ: 840,
        ΔⲆⵠᐃⲆⲆⵠ: 841,
        ΔⵠⵠᐃⵠΔΔ: 842,
        ᐃⵠΔᐃⲆᐃᐃ: 843,
        ⲆⲆᐃᐃᐃᐃⵠ: 844,
        ⵠᐃΔΔⲆⵠΔ: 845,
        ⵠⲆⲆΔⵠᐃΔ: 846,
        ⵠⵠⵠⲆⲆⵠⵠ: 847,
        ᐃᐃᐃᐃⲆᐃΔ: 848,
        ᐃᐃⵠⲆΔΔⵠ: 849,
        ΔⲆᐃᐃΔΔⵠ: 850,
        ⵠΔΔᐃⵠⵠⵠ: 851,
        ⲆⲆᐃΔᐃΔΔᐃᐃ: 852,
        ⲆⵠΔⲆΔᐃᐃ: 853,
        ΔⵠΔⲆⵠ: 854,
        ᐃⵠᐃΔΔΔⲆΔⲆ: 855,
        ⲆΔⲆⵠⵠⲆᐃᐃⵠ: 856,
        ⵠΔⲆⵠᐃⵠΔᐃⵠ: 857,
        ⲆⵠⵠⵠⲆᐃΔⲆΔ: 858,
        ⲆⲆⲆⵠᐃⵠⲆ: 859,
        ᐃΔᐃΔΔⲆⵠ: 860,
        ⵠⵠⲆᐃⲆΔᐃ: 861,
        ΔΔᐃΔⵠⵠⵠ: 862,
        ΔᐃΔᐃⵠⲆⵠ: 863,
        ⲆⵠΔΔⵠᐃⲆᐃⲆ: 864,
        ⲆⵠᐃⲆⵠΔᐃ: 865,
        ⲆᐃΔΔΔⵠΔ: 866,
        ΔᐃᐃᐃⲆΔⲆ: 867,
        ⵠⲆΔⵠⵠⲆᐃ: 868,
        ᐃⲆΔⲆΔⵠⵠ: 869,
        ⵠᐃᐃⲆⲆΔⵠ: 870,
        ⲆΔᐃΔᐃᐃⵠ: 871,
        ⵠⵠⲆⲆΔ: 872,
        ⲆΔᐃᐃᐃΔⲆΔⲆ: 873,
        ⵠⵠᐃⲆⲆᐃΔ: 874,
        ⲆⲆΔⲆⲆΔⵠ: 875,
        ⲆΔΔΔΔᐃΔ: 876,
        ⵠⵠΔⵠᐃΔΔ: 877,
        ΔⵠⲆᐃᐃⵠᐃ: 878,
        ⲆᐃⲆⵠᐃᐃⵠ: 879,
        ⵠⵠᐃᐃⲆᐃⵠ: 880,
        ⲆⵠΔΔᐃⵠⲆ: 881,
        ᐃᐃⵠΔᐃᐃΔ: 882,
        ⵠⵠⲆⵠΔⵠⲆ: 883,
        ᐃⲆΔΔᐃᐃᐃ: 884,
        ᐃⲆΔΔⲆⲆⵠ: 885,
        ⲆⵠⲆⲆⲆᐃⵠ: 886,
        ᐃᐃⵠΔⵠ: 887,
        ⲆᐃⵠⲆⲆᐃΔ: 888,
        ⲆⲆΔⵠⵠΔⵠ: 889,
        ⵠⵠⵠΔⵠⲆⵠ: 890,
        ⲆΔΔⲆⵠⲆⲆ: 891,
        ΔⲆⲆⲆᐃᐃⲆ: 892,
        ⲆΔⵠᐃⵠⲆⲆ: 893,
        ᐃΔΔΔⵠΔⲆ: 894,
        ΔΔⵠΔΔⵠⲆ: 895,
        ΔⲆⵠⲆΔᐃⲆ: 896,
        ᐃΔᐃⲆᐃᐃΔ: 897,
        ᐃΔⵠⵠⵠⵠⵠ: 898,
        ᐃΔΔΔⵠⲆⲆ: 899,
        ΔⲆΔΔΔⲆΔ: 900,
        ⲆⲆΔΔⵠⲆⲆ: 901,
        Δⵠᐃⵠᐃᐃᐃ: 902,
        ⵠΔΔⲆⲆⵠⵠ: 903,
        ᐃⵠⵠⵠⵠᐃΔ: 904,
        ⲆⲆⵠΔⲆⵠⵠ: 905,
        ⵠᐃΔⲆⵠᐃᐃ: 906,
        ᐃⲆᐃᐃⲆⲆᐃ: 907,
        ΔⲆΔⵠⲆⲆΔ: 908,
        ΔΔⲆⲆΔᐃⵠ: 909,
        ⲆΔΔⲆⲆΔⵠ: 910,
        ⵠⵠⵠⵠⲆΔⵠ: 911,
        ᐃΔΔᐃΔⲆΔ: 912,
        ΔΔᐃᐃⵠⲆⵠ: 913,
        ᐃⵠⵠⲆⲆᐃⲆᐃⵠ: 914,
        ΔⵠᐃΔΔⲆⲆᐃⲆ: 915,
        ᐃΔⵠⵠΔⵠⵠⲆΔ: 916,
        ΔᐃⲆᐃΔᐃᐃⵠⲆ: 917,
        ΔΔΔᐃΔΔⵠ: 918,
        ΔΔᐃⵠⲆΔΔ: 919,
        ᐃᐃᐃⵠⲆ: 920,
        ⵠⲆΔᐃⲆᐃⵠ: 921,
        ᐃⵠⵠΔⲆᐃⵠ: 922,
        ⵠᐃᐃΔⲆᐃΔ: 923,
        ⵠⵠⵠⲆΔⵠΔ: 924,
        ⵠⲆᐃΔΔⲆⵠ: 925,
        ⲆⵠᐃⵠⵠᐃⲆ: 926,
        ΔΔⲆⲆⵠΔᐃ: 927,
        ΔⵠⲆⲆΔΔⲆ: 928,
        ⵠⲆᐃⲆⵠⵠⲆ: 929,
        ⲆⲆⵠΔⵠⲆΔ: 930,
        ⵠⵠⲆΔⵠⲆⵠ: 931,
        ΔⵠᐃⵠΔⲆⲆ: 932,
        ⲆᐃⵠᐃⲆΔⲆ: 933,
        ΔΔⲆᐃⲆᐃᐃ: 934,
        ΔⲆⵠⵠⵠᐃⵠ: 935,
        ⲆⲆⲆᐃⵠᐃΔ: 936,
        ⵠᐃᐃⲆⲆⲆⵠ: 937,
        ⵠᐃⵠᐃⲆΔⵠ: 938,
        ⵠⲆᐃⲆᐃᐃⲆ: 939,
        ⲆⲆΔⲆΔΔⲆᐃΔ: 940,
        ⵠⵠⲆΔⵠ: 941,
        ⲆⵠᐃⵠⲆΔⵠ: 942,
        ⲆⵠΔⲆⵠⲆⵠ: 943,
        ᐃⵠⵠᐃⲆΔᐃ: 944,
        ᐃΔⲆⵠⲆⲆᐃ: 945,
        ΔⵠⲆⵠΔⵠⲆ: 946,
        ᐃΔⵠΔᐃᐃⵠ: 947,
        ⵠᐃⲆⲆᐃΔΔ: 948,
        ⲆΔⵠⵠⵠⲆΔ: 949,
        ⵠⲆⲆⲆᐃᐃΔ: 950,
        ⲆⵠⵠⲆᐃΔΔ: 951,
        ΔᐃᐃΔⵠⲆⵠ: 952,
        ᐃᐃᐃᐃΔⲆᐃ: 953,
        ᐃΔⵠⲆⲆⵠⲆ: 954,
        ᐃⵠⵠΔᐃΔᐃ: 955,
        ᐃΔᐃⲆⲆᐃⲆ: 956,
        ⵠᐃⲆΔⵠΔⵠ: 957,
        ⲆⲆⲆᐃⲆᐃⵠ: 958,
        ΔᐃΔⲆΔᐃⲆ: 959,
        ⲆⲆⲆⲆⵠᐃⵠ: 960,
        ⲆᐃⲆᐃⵠᐃᐃ: 961,
        ᐃᐃᐃⲆΔΔΔ: 962,
        ᐃⵠⵠⲆᐃᐃⲆ: 963,
        ᐃᐃᐃΔⵠᐃᐃΔᐃ: 964,
        ⲆⵠᐃΔⲆⲆⲆ: 965,
        ⵠⵠⲆᐃⵠⲆⵠ: 966,
        ⵠⲆⵠⲆΔⲆⲆ: 967,
        ⲆⵠΔΔΔⲆⵠ: 968,
        ⵠⲆⲆᐃⲆⵠΔ: 969,
        ⵠⵠΔΔΔΔⵠ: 970,
        ⲆⵠᐃⲆᐃᐃⲆ: 971,
        Ⲇⵠⵠᐃⵠᐃⵠ: 972,
        ⵠⲆⵠᐃᐃⵠᐃ: 973,
        ⵠΔⵠⵠΔⵠΔ: 974,
        ᐃⲆΔⵠᐃⵠⲆ: 975,
        ⲆⵠᐃΔⲆᐃΔ: 976,
        ΔⲆⵠⲆⵠΔᐃ: 977,
        ⲆᐃⵠᐃᐃⵠⲆ: 978,
        ΔᐃⲆⵠᐃΔⵠ: 979,
        ⵠᐃΔⲆᐃⵠⲆ: 980,
        ⵠⲆⵠΔⲆⲆⵠ: 981,
        ⲆⲆⵠΔᐃⲆΔ: 982,
        ⲆⵠᐃⲆⵠΔⵠ: 983,
        ΔΔᐃᐃⵠΔⲆ: 984,
        ΔⵠⵠΔᐃᐃᐃ: 985,
        ΔⵠᐃᐃᐃΔⵠ: 986,
        ΔΔⵠⲆΔΔᐃ: 987,
        ⵠⵠᐃΔΔᐃᐃ: 988,
        ⲆΔΔᐃⵠ: 989,
        ᐃⲆⵠΔΔᐃᐃ: 990,
        ᐃⲆⲆΔΔᐃⵠ: 991,
        ⲆᐃⵠⵠᐃⲆᐃ: 992,
        ⲆⵠⵠⲆⵠⵠⲆ: 993,
        ⲆᐃᐃⵠΔΔΔ: 994,
        ΔⵠⵠⵠᐃΔⵠ: 995,
        ΔᐃⵠⵠⲆⲆⲆ: 996,
        ⵠⵠⵠⲆⵠⵠᐃ: 997,
        ⲆΔⵠⲆⵠⲆⵠ: 998,
        ⵠⵠⲆᐃⵠⲆΔ: 999,
        ⲆᐃΔⵠΔΔⲆ: 1000,
        ᐃΔᐃΔΔᐃΔ: 1001,
        ᐃᐃᐃᐃΔᐃⲆ: 1002,
        ⲆᐃΔᐃΔⵠⲆ: 1003,
        ⲆΔⲆᐃΔᐃᐃ: 1004,
        ΔΔᐃⵠⲆⲆⲆ: 1005,
        ⵠⲆΔΔΔⵠΔ: 1006,
        ΔΔΔΔᐃᐃⵠ: 1007,
        ᐃⲆΔⵠΔⲆⲆ: 1008,
        ΔⲆΔⵠΔⲆⲆ: 1009,
        ᐃⲆΔΔΔΔⲆ: 1010,
        ⵠΔΔᐃⲆᐃΔ: 1011,
        ᐃⵠⲆᐃᐃΔΔ: 1012,
        ⲆⲆᐃⵠᐃΔᐃ: 1013,
        ΔⲆΔΔⵠΔⲆ: 1014,
        ΔⵠΔᐃᐃⲆΔ: 1015,
        ⵠΔΔΔⵠⲆⵠ: 1016,
        ⲆⲆᐃΔᐃⵠΔ: 1017,
        ⵠⵠᐃΔᐃⲆⲆ: 1018,
        ⵠΔΔⲆΔⵠΔ: 1019,
        ᐃⲆᐃⲆᐃΔᐃ: 1020,
        ⲆᐃᐃⵠᐃⲆⲆ: 1021,
        ᐃΔⲆᐃⵠⲆⲆ: 1022,
        ⵠΔᐃᐃΔᐃΔ: 1023,
        ΔⵠⵠΔ: 1024,
        ᐃⲆΔᐃ: 1025,
        ΔⲆⲆᐃⲆΔᐃ: 1026,
        ᐃΔᐃⵠᐃᐃᐃ: 1027,
        ᐃⵠΔⲆᐃΔⲆ: 1028,
        ᐃⲆⲆⵠΔΔᐃ: 1029,
        ᐃⵠⵠⵠᐃΔᐃ: 1030,
        ΔΔⵠⵠⲆⵠⵠ: 1031,
        ⵠⵠΔᐃⲆᐃⵠ: 1032,
        ΔⲆΔΔⲆ: 1033,
        ⵠΔΔΔΔⵠΔ: 1034,
        ⲆⵠΔⲆⵠ: 1035,
        ⲆⲆᐃⵠᐃΔⲆ: 1036,
        ⲆᐃΔⵠᐃ: 1037,
        ΔᐃⵠΔⵠᐃᐃ: 1038,
        ᐃᐃᐃⵠΔ: 1039,
        ᐃⲆΔΔⲆⲆΔ: 1040,
        ⲆⵠⲆᐃⵠ: 1041,
        ᐃᐃⲆⲆⲆ: 1042,
        ΔᐃΔᐃΔᐃᐃ: 1043,
        ᐃΔⵠᐃⵠⲆⲆ: 1044,
        ᐃᐃⵠᐃⵠⲆⵠ: 1045,
        ⲆᐃⵠⵠⵠΔᐃ: 1046,
        ⵠᐃᐃⵠⵠⵠⵠ: 1047,
        ⵠΔⵠⲆⵠᐃΔ: 1048,
        ΔΔⲆΔΔΔᐃ: 1049,
        ⵠᐃΔⲆᐃΔΔ: 1050,
        ⲆᐃⲆᐃⵠⲆΔ: 1051,
        ΔΔⲆᐃⵠ: 1052,
        ΔΔⲆⲆΔᐃΔ: 1053,
        Δᐃᐃⵠᐃ: 1054,
        ΔᐃΔⲆΔΔΔ: 1055,
        ⵠΔᐃⵠΔⲆⵠ: 1056,
        ⲆᐃⵠⲆⲆⵠΔ: 1057,
        ⵠΔⲆⲆΔⲆⲆ: 1058,
        ⲆⲆⵠⵠⵠΔⲆ: 1059,
        ΔⵠΔᐃⲆᐃΔ: 1060,
        ⲆⲆⲆᐃⲆⵠⵠⲆⲆ: 1061,
        ᐃⵠΔᐃᐃΔΔ: 1062,
        ⲆᐃᐃⲆᐃⵠⲆ: 1063,
        ΔΔⲆᐃᐃⲆⵠᐃᐃ: 1064,
        ⲆⲆΔⵠⲆⵠⵠ: 1065,
        ᐃΔⲆΔⵠⵠᐃ: 1066,
        ⲆΔⵠᐃΔⵠⵠ: 1067,
        ΔᐃⲆⲆⲆᐃᐃ: 1068,
        ⵠᐃᐃΔⵠ: 1069,
        ⵠᐃⲆⲆΔΔΔ: 1070,
        ⲆΔⵠΔⲆⲆᐃ: 1071,
        ⵠⵠⲆᐃⲆⵠⵠ: 1072,
        ⲆⲆΔⵠⵠᐃⵠ: 1073,
        ΔΔΔⲆᐃΔᐃ: 1074,
        ΔⵠⵠⲆⵠᐃᐃ: 1075,
        ΔⵠΔⲆⵠⲆⵠ: 1076,
        ⲆⲆⵠΔⲆΔⲆ: 1077,
        ΔⲆⵠⵠⵠⵠᐃ: 1078,
        ⲆⵠⵠⵠⵠΔⵠ: 1079,
        ΔΔᐃⲆⲆⵠΔ: 1080,
        ⵠⵠⲆⲆⵠΔᐃ: 1081,
        ΔⲆⵠΔⵠⵠⵠ: 1082,
        ⵠⵠΔΔⵠⵠⲆ: 1083,
        ⵠⲆⵠⲆⵠ: 1084,
        ⵠᐃⲆᐃΔⵠᐃ: 1085,
        ΔΔΔᐃᐃΔᐃ: 1086,
        ᐃΔᐃⵠⲆΔⲆ: 1087,
        ΔⲆⲆΔⲆⵠᐃ: 1088,
        ᐃᐃⵠᐃⵠΔⲆ: 1089,
        ⲆΔⲆᐃᐃⲆⵠ: 1090,
        ΔⵠⵠΔⵠᐃⲆ: 1091,
        ⵠⵠⲆⵠⵠⲆΔ: 1092,
        ΔΔⲆᐃᐃⵠⲆ: 1093,
        ΔⵠΔⵠᐃⵠⵠ: 1094,
        ⵠΔΔΔⲆΔᐃ: 1095,
        ΔᐃⵠⵠᐃⲆΔ: 1096,
        ᐃΔⲆⲆⲆⲆⲆ: 1097,
        ⵠⵠΔᐃΔⵠΔ: 1098,
        ᐃΔΔⲆᐃ: 1099,
        ⵠᐃⵠᐃⲆⵠΔ: 1100,
        ⲆⵠΔΔⲆΔΔ: 1101,
        ΔⲆⵠⵠⵠⲆΔ: 1102,
        ᐃᐃⵠⵠᐃⲆⵠ: 1103,
        ⲆᐃΔⲆⲆΔᐃ: 1104,
        ΔᐃⲆⲆᐃΔⲆ: 1105,
        ⵠΔⵠΔⲆⵠᐃ: 1106,
        ⲆᐃᐃᐃᐃⲆΔ: 1107,
        ΔⵠⵠⵠᐃⲆᐃ: 1108,
        ⵠΔⲆⲆⲆⲆⵠ: 1109,
        ⵠᐃᐃⵠΔⵠᐃ: 1110,
        ᐃⵠⲆᐃᐃⲆⲆ: 1111,
        ⲆⲆΔᐃᐃΔⲆ: 1112,
        ΔⲆᐃᐃⲆᐃⲆ: 1113,
        ΔⲆᐃᐃΔⵠᐃ: 1114,
        ⲆΔᐃⲆΔᐃΔ: 1115,
        ⲆⲆᐃΔⲆⵠΔ: 1116,
        ⵠⲆⵠᐃᐃⵠΔ: 1117,
        ⵠⲆⲆⵠⲆⵠⵠ: 1118,
        ᐃᐃⲆⲆⲆⵠⲆ: 1119,
        ᐃⲆⲆᐃⵠ: 1120,
        ⵠⲆΔΔⵠΔΔ: 1121,
        ⲆⲆᐃⵠⲆⲆⵠ: 1122,
        ΔⵠⲆⲆⲆⲆⵠ: 1123,
        ᐃᐃⲆⲆΔⲆᐃ: 1124,
        ⵠⵠΔᐃⲆᐃⲆ: 1125,
        ⲆᐃΔΔⵠⲆᐃ: 1126,
        ΔⵠⵠᐃⲆⲆΔ: 1127,
        ⵠᐃᐃⵠⵠᐃⲆ: 1128,
        ⲆΔᐃΔⵠᐃⵠ: 1129,
        ΔΔⵠᐃⲆΔⲆ: 1130,
        ᐃⲆⲆᐃᐃⵠᐃ: 1131,
        ᐃΔⲆⲆΔⲆⵠ: 1132,
        ᐃΔⲆⵠⲆⲆⵠ: 1133,
        ⵠΔΔⵠⲆⵠΔ: 1134,
        ⵠⵠⵠΔᐃⵠᐃ: 1135,
        ⵠᐃΔⵠᐃⵠᐃ: 1136,
        ⵠᐃᐃⵠᐃⲆⵠ: 1137,
        ⵠⲆⲆᐃΔⲆΔ: 1138,
        ΔⵠⲆⵠⲆᐃΔ: 1139,
        ⲆⲆⲆⵠΔΔⲆ: 1140,
        ⵠⲆⲆΔΔⲆⲆ: 1141,
        ⲆᐃⲆⵠᐃΔⲆ: 1142,
        ΔΔΔⵠΔᐃⵠ: 1143,
        ᐃⵠⲆᐃΔᐃⲆ: 1144,
        ⲆᐃᐃⵠᐃⲆⵠ: 1145,
        ⲆⲆⵠⲆᐃⵠⲆ: 1146,
        ⲆⲆΔᐃⵠΔΔ: 1147,
        ᐃΔΔᐃⲆⵠⵠ: 1148,
        ⵠᐃΔΔΔΔⲆ: ["#E9CF96", "#144940"],
        ΔᐃⵠᐃⲆⲆⲆ: 1149,
        ⲆΔⵠⲆⲆΔⲆ: 1150,
        ⵠⲆᐃᐃᐃᐃΔ: 1151,
        ⲆᐃⵠⵠᐃⲆΔ: 1152,
        ΔΔⲆⵠΔΔⵠ: 1153,
        ⵠⵠⲆⲆΔΔᐃ: 1154,
        ᐃⵠⵠΔΔⵠᐃ: 1155,
        ⵠΔⲆᐃΔ: 1156,
        ⵠΔΔᐃΔΔΔ: 1157,
        ⲆΔΔⲆᐃᐃⵠ: 1158,
        ᐃⲆⲆΔΔᐃᐃ: 1159,
        ⲆⵠⲆⵠᐃΔⵠ: 1160,
        ᐃᐃⵠᐃᐃⲆᐃ: 1161,
        ᐃⲆΔⵠΔΔᐃ: 1162,
        ⵠΔⵠᐃⲆⲆΔ: 1163,
        ᐃⲆᐃⲆⲆⲆⵠ: 1164,
        ᐃⵠⲆⲆⵠⵠΔ: 1165,
        ᐃⵠⵠⵠⵠᐃⲆ: 1166,
        ᐃᐃΔⲆⲆᐃᐃ: 1167,
        ⲆⲆᐃⵠⵠⵠⵠ: 1168,
        ⵠᐃΔΔⵠⵠⲆ: 1169,
        ⲆⵠΔⲆΔΔⲆ: 1170,
        ΔᐃᐃΔⵠⵠⵠ: 1171,
        ⵠⲆΔᐃⵠⵠⲆ: 1172,
        ᐃⲆⲆᐃⵠⲆⲆ: 1173,
        ᐃⵠⲆΔΔΔⵠ: 1174,
        ᐃⲆⵠⵠⲆⵠⲆ: 1175,
        ΔⲆᐃᐃᐃⲆⵠ: 1176,
        ᐃᐃⲆᐃΔᐃⵠ: 1177,
        ⲆᐃᐃⲆⵠⲆΔ: 1178,
        ⵠⲆᐃᐃΔΔⵠ: 1179,
        ᐃΔΔⵠΔΔⲆ: 1180,
        ΔⲆⲆⲆⵠᐃⵠ: 1181,
        ᐃⵠᐃⲆⵠⲆᐃ: 1182,
        ⵠⲆⲆⵠⵠᐃΔ: 1183,
        ΔᐃⵠⵠⵠᐃΔ: 1184,
        ⲆᐃᐃⲆᐃᐃΔ: 1185,
        ᐃⵠⲆᐃⵠΔᐃ: 1186,
        ⲆⵠⲆΔⲆΔΔ: 1187,
        ΔⲆⲆᐃᐃᐃΔ: 1188,
        ⵠⲆⲆⵠᐃⲆᐃ: 1189,
        ⲆΔᐃⲆᐃⵠⵠ: 1190,
        ⲆⵠⵠΔⲆᐃⲆ: 1191,
        ΔⲆⵠⵠⲆⵠᐃ: 1192,
        ΔΔᐃⵠᐃΔᐃ: 1193,
        ΔⲆⵠⵠⲆᐃⵠ: 1194,
        ᐃΔΔᐃᐃᐃΔ: 1195,
        ⲆᐃᐃⵠⲆᐃΔ: 1196,
        ⵠⵠᐃⲆΔᐃᐃ: 1197,
        ᐃᐃⲆΔΔⲆΔ: 1198,
        ᐃⲆⵠᐃⲆᐃΔ: 1199,
        ⵠⲆᐃⲆᐃⵠⵠ: 1200,
        ⵠⲆⲆᐃⵠᐃⵠ: 1201,
        ΔⲆⵠᐃⲆᐃΔ: 1202,
        ΔⲆΔΔΔᐃⵠ: 1203,
        ⲆⲆⲆΔᐃᐃⵠ: 1204,
        ⲆⵠⲆⵠⲆᐃᐃ: 1205,
        ΔΔΔᐃⵠⵠΔ: 1206,
        ⲆⲆⵠΔⵠΔᐃ: 1207,
        ᐃᐃⲆⵠⲆᐃⵠ: 1208,
        ᐃⲆᐃᐃᐃΔΔ: 1209,
        ⵠⵠᐃⲆⵠⲆᐃ: 1210,
        ⵠⲆⵠᐃⵠⲆⵠ: 1211,
        ΔΔⵠⵠᐃΔΔ: 1212,
        ᐃⲆⲆⵠᐃΔᐃ: 1213,
        ᐃⵠΔᐃᐃᐃΔ: 1214,
        ⲆᐃΔᐃⵠᐃⵠ: 1215,
        ΔΔΔⵠΔⲆⲆ: 1216,
        ᐃΔᐃΔᐃᐃᐃ: 1217,
        ⲆⵠΔⲆⲆ: 1218,
        ᐃⵠⵠᐃΔⲆΔ: 1219,
        ΔⲆⲆⵠⲆ: 1220,
        ⵠⲆᐃⵠⵠΔᐃ: 1221,
        ⵠᐃΔⲆᐃΔᐃ: 1222,
        ⵠΔΔⵠᐃΔⵠ: 1223,
        ᐃᐃΔΔΔⲆΔ: 1224,
        ⵠᐃⲆΔΔⲆⲆ: 1225,
        ΔⵠⵠΔⵠΔⲆ: 1226,
        ΔⵠᐃⵠᐃⲆᐃ: 1227,
        ᐃᐃΔᐃⲆⵠΔ: 1228,
        ⵠⲆᐃᐃⲆⵠΔ: 1229,
        ᐃⲆᐃⵠᐃⲆᐃ: 1230,
        ΔᐃⵠⵠⲆᐃⲆ: 1231,
        ᐃⲆⲆΔᐃΔⵠ: 1232,
        ⵠΔΔⵠᐃᐃᐃ: 1233,
        ᐃⵠⲆᐃⲆΔᐃ: 1234,
        ⵠΔΔᐃⵠᐃΔ: 1235,
        ΔⵠᐃΔΔⲆᐃ: 1236,
        ⵠᐃᐃΔⵠΔΔ: 1237,
        ᐃⵠⲆᐃΔⲆⵠ: 1238,
        ΔⲆⵠᐃΔⲆⵠ: 1239,
        ⲆΔᐃΔᐃᐃΔ: 1240,
        ΔⵠΔᐃⵠⵠⲆ: 1241,
        ⲆⵠΔⵠⵠⲆᐃ: 1242,
        ⲆⲆⵠⲆⲆᐃⵠ: 1243,
        ⵠᐃⲆᐃΔⲆΔ: 1244,
        ΔⲆΔⵠⵠⵠᐃ: 1245,
        ⵠᐃⵠⵠΔⲆᐃ: 1246,
        ᐃᐃⲆⲆⵠⵠⵠ: 1247,
        ⲆⵠΔΔⵠΔⲆ: 1248,
        ᐃⲆΔᐃⵠⵠΔ: 1249,
        ᐃᐃⲆⵠⵠⵠⵠ: 1250,
        ⵠΔⲆᐃⵠΔⵠ: 1251,
        ⵠⵠΔⲆⵠⵠⵠ: 1252,
        ⵠΔᐃᐃⲆᐃⲆ: 1253,
        ⲆⲆⲆⵠᐃᐃⵠ: 1254,
        ⵠΔⲆΔⲆⲆᐃ: 1255,
        ᐃⲆⲆⵠⲆⵠⵠ: 1256,
        ⵠᐃⲆⲆⲆⲆΔ: 1257,
        ⲆᐃⲆⵠΔΔΔ: 1258,
        ⲆⵠⲆⲆᐃⵠᐃ: 1259,
        ⵠΔᐃᐃᐃᐃⲆ: 1260,
        ᐃΔⲆΔΔΔⲆ: 1261,
        ⲆⲆⵠⵠᐃᐃΔ: 1262,
        ⵠⲆⲆᐃᐃⲆⵠ: 1263,
        ⵠΔᐃⲆⵠⵠⲆ: 1264,
        ⲆΔΔᐃⵠΔΔ: 1265,
        ΔΔⲆⵠⵠⲆⵠ: 1266,
        ⲆⲆᐃΔⲆᐃⲆ: 1267,
        ⵠⵠᐃΔⵠᐃⵠ: 1268,
        ⲆⵠⲆⵠⵠⵠΔ: 1269,
        Ⲇᐃⵠᐃᐃⵠᐃ: 1270,
        ΔⲆⵠⲆᐃᐃⵠ: 1271,
        ΔⲆⲆⵠⵠⵠⵠ: 1272,
        ΔⲆⲆΔᐃΔᐃ: 1273
    };
    Er = 0;
    var Hr = {
        ⲆⲆᐃⲆᐃ: 0,
        ΔᐃⵠⲆⲆ: 1,
        ⲆⲆⵠᐃΔ: 2,
        ⲆᐃⲆΔᐃ: 3,
        ⵠⲆⵠⲆᐃ: 4,
        Δᐃᐃᐃⵠ: 5,
        ᐃΔⵠᐃᐃ: 6,
        ΔΔⵠΔⵠ: 7,
        ᐃⲆⲆΔᐃ: 8,
        ⲆⲆⵠᐃⵠ: 9,
        ⵠΔⲆⲆᐃ: 10,
        Δᐃⵠᐃⵠ: 11,
        ᐃⲆᐃⵠᐃ: 12,
        ⵠⲆⵠᐃⲆ: 13,
        ⲆⲆᐃⵠΔ: 14,
        Ⲇᐃⵠᐃᐃ: 15,
        ⵠⲆⲆⲆⲆ: 16,
        ᐃᐃΔⵠⲆ: 17,
        ΔⵠⵠⲆΔ: 18,
        ⲆᐃᐃⲆⵠ: 19,
        ΔΔΔⲆΔ: 20,
        Δᐃᐃⵠⵠ: 21,
        ⵠΔΔΔΔ: 22,
        ᐃΔΔΔᐃ: 23,
        ⲆΔⵠⲆᐃ: 24,
        ΔΔⲆⲆⵠ: 25,
        ⲆΔᐃᐃᐃ: 26,
        ⵠⵠᐃⲆⵠ: 27,
        ΔⵠᐃΔΔ: 28,
        ⲆⵠⵠⲆⲆ: 29,
        ᐃⲆⵠᐃΔ: 30,
        ΔΔⵠⵠΔ: 31,
        ΔΔΔᐃΔ: 32,
        ᐃᐃⲆΔΔ: 33,
        ᐃᐃⵠⲆᐃ: 34,
        Ⲇⵠᐃᐃⵠ: 35,
        ᐃΔᐃⵠᐃ: 36,
        ᐃΔⵠᐃⲆ: 37,
        ⵠΔΔⵠΔ: 38,
        ΔⲆⵠⵠΔ: 39,
        ᐃⲆΔΔⵠ: 40,
        ⵠⲆⲆΔΔ: 41,
        ΔⵠᐃᐃⲆ: 42,
        ⵠⵠΔⲆᐃ: 43,
        ⲆⵠⲆΔⲆ: 44,
        ΔⵠⲆⵠⵠ: 45,
        ⲆⲆΔΔⵠ: 46,
        ΔⵠΔⵠⵠ: 47,
        ⲆⲆΔⵠⵠ: 48,
        ΔΔᐃⵠⲆ: 49,
        ᐃΔΔⵠⲆ: 50,
        ᐃⲆΔΔᐃ: 51,
        ᐃⵠⵠⲆⵠ: 52,
        ⵠⵠⲆⵠᐃ: 53,
        ⲆΔΔΔⲆ: 54,
        ᐃΔⵠⵠⵠ: 55,
        ⲆⲆⲆⲆⲆ: 56,
        ᐃΔⵠⲆⵠ: 57,
        ᐃΔⲆΔⲆ: 58,
        ⲆΔᐃᐃⲆ: 59,
        ⲆⲆⵠⵠᐃ: 60,
        ⲆⵠΔⵠⵠ: 61,
        ⵠᐃΔᐃΔ: 62,
        ᐃⲆⵠⲆⵠ: 63,
        ᐃᐃᐃΔⲆ: 64,
        ᐃⲆᐃᐃᐃ: 65,
        ⲆⲆⵠⲆⵠ: 66,
        ⵠΔⲆⵠⵠ: 67,
        ⵠⲆᐃᐃΔ: 68,
        ΔⲆⲆΔᐃ: 69,
        ᐃΔΔⲆⲆ: 70,
        ⲆᐃΔΔᐃ: 71,
        ⲆΔⲆΔΔ: 72,
        ⲆΔⲆⲆΔ: 73,
        ⲆᐃΔⵠⵠ: 74,
        ΔⵠΔⲆΔ: 75,
        ΔᐃΔⲆΔ: 76,
        ΔⵠⵠΔⵠ: 77,
        ⵠΔⵠᐃΔ: 78,
        ΔⵠΔⲆᐃ: 79,
        ΔⲆᐃΔΔ: 80,
        ᐃᐃⲆΔⵠ: 81,
        ⲆⲆⵠΔΔ: 82,
        ΔΔⲆⲆΔ: 83,
        ⵠΔᐃΔΔ: 84,
        ᐃᐃⲆⵠᐃ: 85,
        ᐃΔⵠⲆⲆ: 86,
        ⵠᐃΔⵠⵠ: 87,
        ΔΔⵠᐃⵠ: 88,
        ⲆΔⲆⵠⵠ: 89,
        ⲆΔΔΔΔ: 90,
        ΔⲆᐃⵠΔ: 91,
        ⲆⲆΔⵠⲆ: 92,
        ⲆᐃΔⲆΔ: 93,
        ΔⵠΔⲆⲆ: 94,
        ⵠⵠⵠΔⲆ: 95,
        ΔⲆⵠΔⲆ: 96,
        ᐃⵠⲆⲆΔ: 97,
        ΔⲆⲆΔⲆ: 98,
        ᐃΔⵠΔⲆ: 99,
        ΔΔΔⵠ: 100,
        ᐃΔⲆΔⵠ: 101,
        ΔⵠⲆᐃΔ: 102,
        ⵠΔⲆΔⵠ: 103,
        ⵠⵠⵠⲆΔ: 104,
        ⲆⲆⲆⲆᐃ: 105,
        ⲆⲆⵠᐃⲆ: 106,
        ᐃᐃΔᐃⲆ: 107,
        ᐃᐃΔⵠⵠ: 108,
        ⵠΔⵠⲆⲆ: 109,
        ΔⲆⵠᐃⵠ: 110,
        ⲆⵠᐃⲆⵠ: 111,
        ⵠⵠⲆⲆΔⵠᐃ: 112,
        ᐃΔⵠΔᐃⵠᐃ: 113,
        ΔⵠⲆᐃⲆ: 114,
        ⲆΔᐃΔⵠ: 115,
        ⲆⲆⲆᐃᐃ: 116,
        ΔⵠΔᐃⵠ: 117,
        ⲆΔΔⲆΔ: 118,
        ⵠⲆⵠⲆΔ: 119,
        ᐃᐃᐃⲆᐃ: 120,
        ⵠᐃᐃΔᐃ: 121,
        ᐃⵠᐃⵠΔ: 122,
        ΔⵠⵠⲆᐃ: 123,
        ΔΔᐃⵠΔ: 124,
        ᐃΔᐃΔΔ: 125,
        ⲆⲆⵠΔᐃ: 126,
        ᐃⲆᐃΔⵠ: 127,
        ⲆⲆᐃⵠⲆ: 128,
        ⲆⵠⲆⲆΔ: 129,
        ⵠⲆΔⵠΔ: 130,
        ΔᐃⵠΔⲆ: 131,
        Ⲇᐃⵠⵠⵠ: 132,
        ΔΔⲆΔⵠ: 133,
        ΔΔⲆⵠⲆ: 134,
        ⵠⵠⵠⵠᐃ: 135,
        ⲆⵠᐃΔⵠ: 136,
        ᐃᐃᐃᐃⲆ: 137,
        ⲆⲆⲆⵠⲆ: 138,
        ⲆΔΔⲆᐃ: 139,
        ⵠⵠⲆᐃΔ: 140,
        ⵠⲆⵠⵠΔ: 141,
        ⵠΔΔᐃΔ: 142,
        ΔΔⵠΔΔ: 143,
        ᐃⵠⵠⵠⵠ: 144,
        ⵠΔᐃⵠΔ: 145,
        ΔᐃⵠⵠⲆ: 146,
        ⲆΔⲆΔⵠ: 147,
        ᐃⲆⲆⲆⲆ: 148,
        ᐃⲆᐃⲆΔ: 149,
        ᐃᐃⵠⵠΔ: 150,
        ⲆⲆΔⲆⵠ: 151,
        ⵠᐃⲆᐃᐃ: 152,
        ᐃΔΔⵠΔ: 153,
        ⲆΔⵠᐃᐃ: 154,
        ᐃᐃⲆⲆᐃ: 155,
        ⵠⵠⲆᐃⵠ: 156,
        Δⵠⵠᐃᐃ: 157,
        ⵠΔⵠᐃⵠ: 158,
        ⲆᐃⲆᐃⲆ: 159,
        ᐃΔᐃΔⲆ: 160,
        ᐃⲆⵠᐃᐃ: 161,
        ᐃᐃⲆΔⲆ: 162,
        ⵠΔⲆⲆⵠ: 163,
        ΔⲆΔⲆᐃ: 164,
        ᐃⵠⲆΔⵠ: 165,
        ᐃⲆⲆΔⲆ: 166,
        ⲆᐃⲆⵠⲆ: 167,
        ⲆⵠΔⵠΔ: 168,
        ΔⲆΔᐃᐃ: 169,
        ΔΔⲆΔΔ: 170,
        ᐃⵠᐃᐃΔ: 171,
        ᐃᐃⲆᐃᐃ: 172,
        ᐃⵠᐃⵠᐃ: 173,
        ⲆᐃⲆΔⲆ: 174,
        ᐃΔⵠΔⵠ: 175,
        ⵠⵠⲆⲆⲆ: 176
    };
    const Jr = 9;
    const Kr = 12;
    Er = 0;
    var Lr = {
        Ⲇⵠᐃᐃⵠ: 0,
        Δᐃᐃᐃⵠ: 1,
        ΔᐃᐃᐃⲆ: 2,
        ᐃΔⵠᐃᐃ: 3,
        ΔΔⵠΔⵠ: 4,
        ᐃΔᐃⵠᐃ: 5,
        ᐃΔⵠᐃⲆ: 6,
        ⲆΔΔⵠᐃ: 7,
        ⵠⲆⵠⲆᐃ: 8,
        ᐃΔᐃᐃᐃ: 9,
        ΔΔⲆⲆΔ: 10,
        ⵠΔᐃΔΔ: 11,
        ΔΔⲆⲆⵠ: 12,
        ⲆΔᐃᐃᐃ: 13,
        ⵠⵠᐃⲆⵠ: 14,
        ΔⵠᐃΔΔ: 15,
        ΔΔⵠⵠΔ: 16,
        ΔΔΔᐃΔ: 17,
        ᐃᐃⲆΔΔ: 18,
        ΔⲆⵠⵠΔ: 19,
        ⵠⵠⵠΔⲆ: 20,
        ΔⲆⵠΔⲆ: 21,
        ᐃⵠⲆⲆΔ: 22,
        ΔⲆᐃΔΔ: 23,
        ᐃᐃⲆΔⵠ: 24,
        ΔΔⵠᐃⵠ: 25,
        ⲆΔⲆⵠⵠ: 26,
        ⲆΔΔΔΔ: 27,
        ⲆΔⵠⲆᐃ: 28,
        ΔΔΔⵠ: 29,
        ⵠΔΔⵠΔ: 30,
        ᐃⲆⲆΔᐃ: 31,
        ⲆⲆⵠᐃⵠ: 32,
        ⲆⵠⵠⲆⲆ: 33,
        ᐃⲆⵠᐃΔ: 34,
        ⵠΔⲆⲆᐃ: 35,
        Δᐃⵠᐃⵠ: 36,
        ᐃⲆᐃⵠᐃ: 37,
        ⵠⲆⵠᐃⲆ: 38,
        ⲆⲆᐃⵠΔ: 39,
        ᐃᐃⲆⵠᐃ: 40,
        ᐃⲆΔΔⲆ: 41,
        ᐃΔΔᐃⵠ: 42,
        ΔⲆᐃⵠΔ: 43,
        ⲆⲆΔⵠⲆ: 44,
        Ⲇᐃⵠᐃᐃ: 45,
        ⵠⲆⲆⲆⲆ: 46,
        ΔⵠΔⲆⲆ: 47,
        ⲆᐃΔⲆΔ: 48,
        Δᐃᐃⵠⵠ: 49,
        ᐃᐃΔⵠⲆ: 50,
        ΔⵠⵠⲆΔ: 51,
        ⲆᐃᐃⲆⵠ: 52,
        ⵠΔΔΔΔ: 53,
        ᐃΔΔΔᐃ: 54,
        ᐃⵠᐃⵠΔ: 55,
        ΔⵠⵠⲆᐃ: 56,
        ᐃᐃⵠⲆᐃ: 57,
        ⵠᐃΔⵠⵠ: 58,
        ⲆⲆⵠΔᐃ: 59,
        ᐃⲆᐃΔⵠ: 60,
        ⲆⲆᐃⵠⲆ: 61,
        ⲆⵠⲆⲆΔ: 62,
        ⵠⲆΔⵠΔ: 63,
        ΔᐃⵠΔⲆ: 64,
        ΔΔⲆΔⵠ: 65,
        ⵠⵠⵠⵠᐃ: 66,
        ᐃᐃᐃᐃⲆ: 67,
        ⲆΔΔⲆᐃ: 68,
        ⵠⲆⵠⵠΔ: 69,
        ΔΔⵠΔΔ: 70,
        ⵠΔᐃⵠΔ: 71,
        ΔᐃⵠⵠⲆ: 72,
        ⲆΔⲆΔⵠ: 73,
        ᐃⲆⲆⲆⲆ: 74,
        ᐃⲆᐃⲆΔ: 75,
        ᐃᐃⵠⵠΔ: 76,
        ⲆⲆΔⲆⵠ: 77,
        ⵠᐃⲆᐃᐃ: 78,
        ᐃΔΔⵠΔ: 79,
        ΔⲆⲆΔⲆ: 80,
        ᐃΔⵠΔⲆ: 81,
        ⲆⲆⵠΔΔ: 82,
        ⲆΔⵠᐃᐃ: 83,
        ᐃᐃⲆⲆᐃ: 84,
        ⵠⵠⲆᐃⵠ: 85,
        Δⵠⵠᐃᐃ: 86,
        ᐃⵠᐃⵠⲆ: 87,
        ᐃΔⵠⲆⲆ: 88,
        ᐃⵠⲆΔⵠ: 89,
        ᐃⵠᐃⵠᐃ: 90,
        ⵠⵠⲆⲆⲆ: 91,
        ⲆᐃⲆΔⲆ: 92,
        ᐃΔⵠΔⵠ: 93,
        ⲆᐃⲆⵠⲆ: 94,
        ⲆⵠΔⵠΔ: 95,
        ΔⲆΔᐃᐃ: 96,
        ΔΔⲆΔΔ: 97,
        ᐃⵠᐃᐃΔ: 98,
        ᐃᐃⲆᐃᐃ: 99,
        ᐃᐃΔᐃᐃ: 100,
        Ⲇᐃⵠⵠⵠ: 101,
        ΔΔⲆⵠⲆ: 102,
        ⲆⵠᐃΔⵠ: 103,
        ⲆⲆⲆⵠⲆ: 104,
        ⵠⵠⲆᐃΔ: 105,
        ⵠΔΔᐃΔ: 106,
        ᐃⵠⵠⵠⵠ: 107,
        ⵠⵠⵠᐃ: 108,
        ΔⲆΔᐃ: 109,
        ⵠⵠΔⲆⵠ: 110,
        ᐃⵠⵠᐃ: 111,
        ⲆΔᐃᐃ: 112,
        ⲆⲆᐃⲆᐃ: 113,
        ⲆᐃⲆΔᐃ: 114,
        ᐃⲆΔΔⵠ: 115,
        ΔⲆⵠΔᐃ: 116,
        ΔΔᐃⵠⲆ: 117,
        ΔᐃⵠⲆⲆ: 118,
        ⲆⲆⵠᐃΔ: 119,
        ᐃΔⲆΔⵠ: 120,
        Ⲇᐃᐃⵠ: 121,
        ⲆΔᐃᐃⲆ: 122,
        ⲆᐃΔΔᐃ: 123,
        ᐃⲆᐃᐃᐃ: 124,
        ⲆⲆⵠᐃⲆ: 125,
        ⲆⲆⵠᐃᐃ: 126,
        ⲆⵠᐃⲆⵠ: 127,
        ΔⲆⵠᐃⵠ: 128,
        ⵠᐃΔⲆⵠ: 129,
        ΔΔΔⲆΔ: 130,
        ⵠⲆⵠᐃᐃ: 131,
        ⵠⲆⲆΔΔ: 132,
        ᐃⵠⵠⲆⵠ: 133,
        ᐃᐃΔΔᐃ: 134,
        ΔⵠⲆᐃⲆ: 135,
        ⵠⵠⲆⵠᐃ: 136,
        ⵠΔⵠⵠᐃ: 137,
        ᐃΔΔⵠⲆ: 138,
        ᐃⵠΔΔΔ: 139,
        ᐃⲆΔᐃⵠ: 140,
        ⵠΔⵠⲆⲆ: 141,
        ⵠᐃⵠⵠΔ: 142,
        ᐃⲆΔΔᐃ: 143,
        ΔΔᐃⵠΔ: 144,
        ᐃΔᐃΔΔ: 145,
        ΔⵠⵠⵠⲆ: 146,
        ΔⵠⲆᐃΔ: 147,
        ⵠΔⲆΔⵠ: 148,
        ⵠⲆⵠⲆⲆ: 149,
        ᐃΔᐃΔᐃ: 150,
        ⲆΔᐃΔⵠ: 151,
        ⲆⲆⲆᐃᐃ: 152,
        ΔⵠΔᐃⵠ: 153,
        ⲆΔΔⲆΔ: 154,
        ⵠⲆⵠⲆΔ: 155,
        ᐃᐃᐃⲆᐃ: 156,
        ⵠᐃᐃΔᐃ: 157,
        ⵠⵠⵠⲆΔ: 158,
        ⲆⲆⲆⲆᐃ: 159,
        ⵠΔⲆⵠⵠ: 160,
        ⵠⵠΔⵠΔ: 161,
        ᐃΔⵠⵠⵠ: 162,
        ⲆⲆⲆⲆⲆ: 163,
        ᐃΔⵠⲆⵠ: 164,
        ᐃΔⲆΔⲆ: 165,
        ⲆⵠΔⵠⵠ: 166,
        ΔⵠΔⲆᐃ: 167,
        ⵠⲆᐃᐃΔ: 168,
        ΔⲆⲆΔᐃ: 169,
        ᐃΔΔⲆⲆ: 170,
        ⵠᐃΔᐃΔ: 171,
        ᐃⲆⵠⲆⵠ: 172,
        ᐃᐃᐃΔⲆ: 173,
        ᐃⲆᐃⲆⵠ: 174,
        ⲆⵠΔᐃΔ: 175,
        ᐃΔΔΔⵠ: 176,
        ΔΔⲆⵠⵠ: 177,
        ⵠⵠᐃⲆΔ: 178,
        ΔⲆⲆᐃΔ: 179,
        ⵠΔⵠᐃⵠ: 180,
        ⲆᐃⲆᐃⲆ: 181,
        ᐃΔᐃΔⲆ: 182,
        ᐃⲆⵠᐃᐃ: 183,
        ⲆᐃⵠΔΔ: 184,
        ᐃᐃΔⵠᐃ: 185,
        Δⵠᐃⵠⵠ: 186,
        ⵠΔΔⵠⲆ: 187,
        ΔⵠᐃᐃⲆ: 188,
        ⲆᐃⲆⲆⵠ: 189,
        ᐃᐃΔᐃⲆ: 190,
        ⵠⵠΔⲆᐃ: 191,
        ⲆᐃⵠⲆᐃ: 192,
        ⲆⵠⲆΔⲆ: 193,
        ᐃΔⲆⲆΔ: 194,
        ⲆΔΔΔⲆ: 195,
        ᐃᐃᐃⲆΔ: 196,
        ᐃⲆΔⲆⲆ: 197,
        ᐃᐃⲆΔⲆ: 198,
        ⵠⵠᐃⵠΔ: 199,
        ⲆⵠⲆΔᐃ: 200,
        ⵠᐃⲆᐃΔ: 201,
        ⲆⵠⵠΔ: 202,
        ⵠⵠⵠᐃᐃ: 203,
        ΔⵠⲆⵠⵠ: 204,
        ΔᐃⲆⵠΔ: 205,
        ⲆⲆΔΔⵠ: 206,
        ⵠᐃⲆⲆΔ: 207,
        ΔⵠΔⵠⵠ: 208,
        ⵠⲆⵠΔΔ: 209,
        ⲆⲆΔⵠⵠ: 210,
        ᐃΔᐃΔⵠ: 211,
        ⲆΔⲆⲆΔ: 212,
        ⲆᐃΔⵠⵠ: 213,
        ΔⵠΔⲆΔ: 214,
        ΔᐃΔⲆΔ: 215,
        ΔⵠⵠΔⵠ: 216,
        ⲆⲆⵠⵠᐃ: 217,
        ⲆⲆⵠⲆⵠ: 218,
        ⲆΔⲆΔΔ: 219,
        ⵠΔⵠᐃΔ: 220,
        ᐃᐃΔⵠⵠ: 221,
        ᐃⲆⵠᐃⵠ: 222,
        ⵠΔⲆⲆⵠ: 223,
        ΔⲆΔⲆᐃ: 224,
        ⵠⲆᐃⲆᐃ: 225,
        Δᐃᐃⵠᐃ: 226,
        ⵠᐃᐃΔⵠ: 227,
        ⵠⲆⵠⲆⵠ: 228,
        ᐃΔΔⲆᐃ: 229,
        ᐃⲆⲆΔⲆ: 230,
        ΔΔΔⵠᐃ: 231,
        ΔⲆⲆΔΔ: 232,
        ⲆΔΔᐃⵠ: 233,
        ⵠⵠⵠⵠⵠ: 234,
        ⲆΔⵠᐃᐃⲆⵠ: 235,
        ⲆΔᐃᐃᐃⲆⵠ: 236,
        ⵠᐃΔᐃⲆ: 237,
        ΔⲆⵠΔⵠ: 238,
        ΔⲆⲆⵠⲆ: 239,
        ᐃΔΔⲆΔ: 240
    };
    const Mr = 14;
    var Nr = {
        ΔΔΔⲆⲆ: 0,
        ΔⲆⵠⲆⲆ: 2,
        ⲆⵠΔⲆᐃ: 4,
        ΔⲆᐃⲆⵠ: 5,
        ⲆΔⲆᐃᐃ: 3,
        ⵠⵠΔⲆ: 1
    };
    const Or = 2;
    var Pr = [];
    Pr[109] = {
        name: "Wood",
        ᐃΔ: 316,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[108] = {
        name: "Stone",
        ᐃΔ: 315,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const Qr = 4;
    const Sr = 255;
    const Tr = 5;
    const Ur = 10;
    const Vr = 3;
    Pr[111] = {
        name: "Gold",
        ᐃΔ: 297,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const Wr = 9;
    Pr[112] = {
        name: "Diamond",
        ᐃΔ: 298,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[121] = {
        name: "Amethyst",
        ᐃΔ: 418,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const Xr = 13;
    Pr[2] = {
        name: "Rabbit fur",
        ᐃΔ: 368,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const Yr = 15;
    const Zr = 16;
    const $r = 10;
    Pr[174] = {
        name: "Wolf fur",
        ᐃΔ: 393,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const _r = Gj;
    Pr[237] = {
        name: "Boar fur",
        ᐃΔ: 1162,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const as = Kn;
    const bs = 14;
    Pr[100] = {
        name: "Firefly",
        ᐃΔ: 1164,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const cs = 18;
    Pr[101] = {
        name: "Wood arrow",
        ᐃΔ: 1166,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const ds = 19;
    Pr[102] = {
        name: "Stone arrow",
        ᐃΔ: 1169,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[103] = {
        name: "Gold arrow",
        ᐃΔ: 1172,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[104] = {
        name: "Diamond arrow",
        ᐃΔ: 1175,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[105] = {
        name: "Amethyst arrow",
        ᐃΔ: 1178,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[106] = {
        name: "Reidite arrow",
        ᐃΔ: 1181,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const es = 256;
    const fs = 0;
    Pr[107] = {
        name: "Dragon arrow",
        ᐃΔ: 1184,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const gs = 1;
    const hs = 12;
    const is = 8;
    Pr[146] = {
        name: "Winter fur",
        ᐃΔ: 505,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[240] = {
        name: "Fur mammoth",
        ᐃΔ: 1233,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[161] = {
        name: "Web",
        ᐃΔ: 305,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[116] = {
        name: "Meat",
        ᐃΔ: 300,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[137] = {
        name: "Fish",
        ᐃΔ: 662,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[129] = {
        name: "Kraken skin",
        ᐃΔ: 624,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[139] = {
        name: "Piranha scales",
        ᐃΔ: 674,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[142] = {
        name: "Ice",
        ᐃΔ: 142,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[126] = {
        name: "Sand",
        ᐃΔ: 609,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[140] = {
        name: "Dirt",
        ᐃΔ: 140,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[110] = {
        name: "Berrie",
        ᐃΔ: 277,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const ks = 1;
    Pr[131] = {
        name: "Flour",
        ᐃΔ: 629,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[134] = {
        name: "Flour",
        ᐃΔ: 639,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[178] = {
        name: "Special fur peasant",
        ᐃΔ: 178,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const ls = 20;
    Pr[179] = {
        name: "Special fur hood",
        ᐃΔ: 179,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[189] = {
        name: "Pumpkin",
        ᐃΔ: 814,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[192] = {
        name: "Garlic",
        ᐃΔ: 840,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[194] = {
        name: "Thornbush",
        ᐃΔ: 850,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const ms = 16;
    Pr[205] = {
        name: "Carrot",
        ᐃΔ: 955,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const ns = 100;
    const os = Dk;
    Pr[207] = {
        name: "Tomato",
        ᐃΔ: 965,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const ps = Kn;
    const rs = 100;
    Pr[209] = {
        name: "Watermelon",
        ᐃΔ: 972,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[211] = {
        name: "Aloe Vera",
        ᐃΔ: 987,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const ss = jo;
    Pr[222] = {
        name: "Penguin Feather",
        ᐃΔ: 1035,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const ts = 255;
    Pr[231] = {
        name: "Hawk Feather",
        ᐃΔ: 1037,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const us = 6;
    Pr[232] = {
        name: "Vulture Feather",
        ᐃΔ: 1039,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const vs = 12;
    const ws = 2;
    const xs = 17;
    const js = 9;
    Pr[233] = {
        name: "Cactus",
        ᐃΔ: 1154,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const ys = 9;
    const zs = 0;
    const As = 11;
    Pr[236] = {
        name: "Cactus",
        ᐃΔ: 1160,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[235] = {
        name: "Pitchfork Part",
        ᐃΔ: 1158,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[238] = {
        name: "Emerald Machine",
        ᐃΔ: 1187,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[234] = {
        name: "Emerald",
        ᐃΔ: 1156,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[41] = {
        name: "Christmas Hat",
        ᐃΔ: 880,
        ᐃᐃᐃᐃ: 0
    };
    const Bs = Ua;
    const Cs = 5;
    const Ds = 3;
    Pr[42] = {
        name: "Elf Hat",
        ᐃΔ: 882,
        ᐃᐃᐃᐃ: 0
    };
    const qs = 11;
    const Es = Lo;
    Pr[201] = {
        name: "Garland",
        ᐃΔ: 870,
        ᐃᐃᐃᐃ: 0,
        ⲆΔⵠᐃ: 0
    };
    const Fs = 6;
    Pr[200] = {
        name: "Candy",
        ᐃΔ: 200,
        ᐃᐃᐃᐃ: 0
    };
    const Gs = 7;
    Pr[199] = {
        name: "Sugar Cane",
        ᐃΔ: 865,
        ᐃᐃᐃᐃ: 0
    };
    const Hs = 20;
    Pr[9] = {
        name: "Pirate Sword",
        ᐃΔ: 860,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const Is = 7;
    Pr[196] = {
        name: "Crab Stick",
        ᐃΔ: 196,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const Js = os;
    Pr[202] = {
        name: "Reidite",
        ᐃΔ: 938,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[203] = {
        name: "Flame",
        ᐃΔ: 936,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[113] = {
        name: "Campfire",
        ᐃΔ: 302,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[198] = {
        name: "Bed",
        ᐃΔ: 909,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[114] = {
        name: "Workbench",
        ᐃΔ: 262,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[0] = {
        name: "Stone sword",
        ᐃΔ: 254,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const Ks = 15;
    const eh = 19;
    const ih = 18;
    Pr[1] = {
        name: "Stone pick",
        ᐃΔ: 256,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const th = 13;
    const nh = 10;
    const oh = 4;
    const ah = 7;
    Pr[115] = {
        name: "Berries bush",
        ᐃΔ: 284,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const rh = 15;
    Pr[3] = {
        name: "Gold pick",
        ᐃΔ: 295,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const sh = 14;
    Pr[4] = {
        name: "Diamond pick",
        ᐃΔ: 257,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[57] = {
        name: "Wood sword",
        ᐃΔ: 830,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const hh = 18;
    const lh = 1;
    Pr[5] = {
        name: "Gold sword",
        ᐃΔ: 290,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[6] = {
        name: "Diamond sword",
        ᐃΔ: 291,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[8] = {
        name: "Wood pick",
        ᐃΔ: 314,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[162] = {
        name: "Wood wall",
        ᐃΔ: 318,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[160] = {
        name: "Wood spike",
        ᐃΔ: 320,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[117] = {
        name: "Cooked meat",
        ᐃΔ: 325,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[118] = {
        name: "Big campfire",
        ᐃΔ: 327,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[195] = {
        name: "Bandage",
        ᐃΔ: 304,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const gh = 10;
    const uh = 8;
    Pr[163] = {
        name: "Stone wall",
        ᐃΔ: 263,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const bh = 9;
    Pr[164] = {
        name: "Gold wall",
        ᐃΔ: 265,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const dh = 17;
    Pr[165] = {
        name: "Diamond wall",
        ᐃΔ: 332,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const vh = Ya;
    const mh = 100;
    Pr[166] = {
        name: "Wood door",
        ᐃΔ: 268,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[167] = {
        name: "Chest",
        ᐃΔ: 338,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[168] = {
        name: "Stone spike",
        ᐃΔ: 360,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[169] = {
        name: "Gold spike",
        ᐃΔ: 363,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[170] = {
        name: "Diamond spike",
        ᐃΔ: 365,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const ch = 2;
    const ph = 255;
    Pr[171] = {
        name: "Stone door",
        ᐃΔ: 371,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const Ch = 10;
    Pr[172] = {
        name: "Gold door",
        ᐃΔ: 374,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[173] = {
        name: "Diamond door",
        ᐃΔ: 377,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const Th = 255;
    Pr[10] = {
        name: "Chapka",
        ᐃΔ: 370,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const fh = 19;
    const zh = 6;
    const yh = 7;
    const wh = 15;
    const Ph = 16;
    const kh = 19;
    Pr[11] = {
        name: "Big Chapka",
        ᐃΔ: 380,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[12] = {
        name: "Wood spear",
        ᐃΔ: 402,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const Ah = 255;
    Pr[13] = {
        name: "Stone spear",
        ᐃΔ: 396,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[14] = {
        name: "Gold spear",
        ᐃΔ: 399,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[15] = {
        name: "Diamond spear",
        ᐃΔ: 405,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const xh = 6;
    Pr[16] = {
        name: "Dragon spear",
        ᐃΔ: 876,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const Jh = 20;
    Pr[17] = {
        name: "Dragon spear",
        ᐃΔ: 879,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[18] = {
        name: "Crab spear",
        ᐃΔ: 900,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[197] = {
        name: "Crab loot",
        ᐃΔ: 197,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const Mh = 14;
    Pr[119] = {
        name: "Furnace",
        ᐃΔ: 409,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[23] = {
        name: "Explorer hat",
        ᐃΔ: 421,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[24] = {
        name: "Pirate hat",
        ᐃΔ: 424,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const Bh = Ua;
    Pr[87] = {
        name: "Flower hat",
        ᐃΔ: 1228,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[88] = {
        name: "Fur hat",
        ᐃΔ: 1231,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const Dh = 11;
    const Ih = 12;
    Pr[58] = {
        name: "Wood helmet",
        ᐃΔ: 827,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const Eh = fr;
    const Sh = 6;
    Pr[25] = {
        name: "Stone helmet",
        ᐃΔ: 430,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[26] = {
        name: "Gold helmet",
        ᐃΔ: 433,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    (function b() {
        const c = {
            ΔⲆΔⵠⲆΔᐃⲆΔ: 0
        };
        let d = 0;
        for (let a in c) {
            d = a;
        }
        const f = [];
        for (let a = 0; a < 12; a++) {
            f.push(aj.Math.floor(1 + aj.Math.random() * 10));
        }
        let g = "for (let " + d + " = 0 ; " + d + " < " + f[0] + " ; " + d + "++) {";
        for (let a = 0; a < f[1]; a++) {
            g += f[a] + ";debugger;";
        }
        for (let a = 0; a < f[2]; a++) {
            g += "debugger;";
        }
        g += "}";
        const e = new aj.Function(g);
        aj.setTimeout(b, 10000);
        e();
    })();
    Pr[27] = {
        name: "Diamond helmet",
        ᐃΔ: 436,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[28] = {
        name: "Book",
        ᐃΔ: 439,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[120] = {
        name: "Paper",
        ᐃΔ: 442,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[29] = {
        name: "Bag",
        ᐃΔ: 367,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[30] = {
        name: "Amethyst sword",
        ᐃΔ: 456,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const Qh = 2;
    const _h = 3;
    const Fh = 18;
    Pr[31] = {
        name: "Amethyst pick",
        ᐃΔ: 460,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[33] = {
        name: "Amethyst spear",
        ᐃΔ: 473,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const Rh = 10;
    Pr[35] = {
        name: "Stone hammer",
        ᐃΔ: 478,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const jh = 5;
    const Lh = 13;
    const Gh = 100;
    const Wh = 19;
    Pr[36] = {
        name: "Gold hammer",
        ᐃΔ: 481,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[37] = {
        name: "Diamond hammer",
        ᐃΔ: 484,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const Oh = 4;
    const Nh = 0;
    Pr[38] = {
        name: "Amethyst hammer",
        ᐃΔ: 487,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const Hh = 9;
    Pr[39] = {
        name: "Reidite hammer",
        ᐃΔ: 490,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[122] = {
        name: "Amethyst wall",
        ᐃΔ: 493,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[123] = {
        name: "Amethyst spike",
        ᐃΔ: 496,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const qh = 20;
    const Uh = 255;
    const Yh = Eh;
    Pr[124] = {
        name: "Amethyst door",
        ᐃΔ: 498,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const Kh = Yq;
    const Vh = 17;
    Pr[40] = {
        name: "Cap & scarf",
        ᐃΔ: 503,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[147] = {
        name: "Blue cord",
        ᐃΔ: 515,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[148] = {
        name: "Lock",
        ᐃΔ: 519,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[151] = {
        name: "Resurrection",
        ᐃΔ: 530,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const Xh = 1;
    Pr[158] = {
        name: "Lockpick",
        ᐃΔ: 533,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[159] = {
        name: "Totem",
        ᐃΔ: 555,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[43] = {
        name: "Amethyst helmet",
        ᐃΔ: 542,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[45] = {
        name: "Super hammer",
        ᐃΔ: 551,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[125] = {
        name: "Bridge",
        ᐃΔ: 604,
        ⲆΔⵠᐃ: 1,
        ᐃᐃᐃᐃ: 1
    };
    const Zh = 20;
    Pr[221] = {
        name: "Wood Tower",
        ᐃΔ: 1235,
        ⲆΔⵠᐃ: 1,
        ᐃᐃᐃᐃ: 1
    };
    Pr[127] = {
        name: "Bottle full",
        ᐃΔ: 715,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[128] = {
        name: "Bottle empty",
        ᐃΔ: 611,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const $h = 3;
    const el = 8;
    Pr[46] = {
        name: "Stone shovel",
        ᐃΔ: 618,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[130] = {
        name: "Watering can",
        ᐃΔ: 627,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[132] = {
        name: "Wheat",
        ᐃΔ: 632,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const il = 11;
    Pr[133] = {
        name: "Cookie",
        ᐃΔ: 635,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[135] = {
        name: "Windmill",
        ᐃΔ: 643,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[47] = {
        name: "Super diving suit",
        ᐃΔ: 647,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const tl = 15;
    Pr[48] = {
        name: "Diving mask",
        ᐃΔ: 650,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[49] = {
        name: "Watering can full",
        ᐃΔ: 654,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[136] = {
        name: "Cake",
        ᐃΔ: 660,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[138] = {
        name: "Foodfish cooked",
        ᐃΔ: 666,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[141] = {
        name: "Plot",
        ᐃΔ: 684,
        ⲆΔⵠᐃ: 1,
        ᐃᐃᐃᐃ: 1
    };
    const nl = 5;
    const ol = 9;
    const al = 14;
    const rl = 15;
    Pr[143] = {
        name: "Bread",
        ᐃΔ: 690,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[Lr.ⵠⵠⲆⲆΔⵠᐃ] = {
        name: "Bottle full (with ice)",
        ᐃΔ: Gr.ΔᐃⵠΔⵠⲆΔⵠᐃ,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[Lr.ᐃΔⵠΔᐃⵠᐃ] = {
        name: "Bottle full (with well)",
        ᐃΔ: Gr.ΔΔⲆΔⵠⵠⵠⲆᐃ,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const sl = 16;
    Pr[50] = {
        name: "Gold shovel",
        ᐃΔ: 700,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[51] = {
        name: "Diamond shovel",
        ᐃΔ: 704,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const hl = 7;
    Pr[52] = {
        name: "Amethyst shovel",
        ᐃΔ: 706,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const ll = Uj;
    const gl = 3;
    const ul = Bj;
    Pr[55] = {
        name: "Spanner",
        ᐃΔ: 711,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const bl = 8;
    Pr[56] = {
        name: "Machete",
        ᐃΔ: 714,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const dl = 8;
    Pr[144] = {
        name: "Bread oven",
        ᐃΔ: 718,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const vl = 255;
    Pr[145] = {
        name: "Sandwich",
        ᐃΔ: 730,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[59] = {
        name: "Dragon helmet",
        ᐃΔ: 734,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[60] = {
        name: "Dragon helmet",
        ᐃΔ: 737,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[90] = {
        name: "Witch",
        ᐃΔ: 740,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[91] = {
        name: "Nimbus",
        ᐃΔ: 743,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const ml = 12;
    const cl = 13;
    Pr[92] = {
        name: "Wand1",
        ᐃΔ: 746,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[93] = {
        name: "Wand2",
        ᐃΔ: 749,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[62] = {
        name: "Dragon sword",
        ᐃΔ: 564,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const pl = dq;
    const Cl = 19;
    Pr[63] = {
        name: "Dragon sword",
        ᐃΔ: 567,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[71] = {
        name: "Wood shield",
        ᐃΔ: 1238,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const Tl = h;
    const fl = 100;
    const zl = 4;
    const yl = 11;
    Pr[72] = {
        name: "Stone shield",
        ᐃΔ: 1241,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[73] = {
        name: "Gold shield",
        ᐃΔ: 1244,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[74] = {
        name: "Diamond shield",
        ᐃΔ: 1247,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const wl = 18;
    Pr[75] = {
        name: "Amethyst shield",
        ᐃΔ: 1250,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const Pl = 1;
    const kl = 0;
    Pr[76] = {
        name: "Reidite shield",
        ᐃΔ: 1253,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const Al = 256;
    Pr[94] = {
        name: "Wood axe",
        ᐃΔ: 1256,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[95] = {
        name: "Stone axe",
        ᐃΔ: 1259,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const xl = 17;
    const Jl = 10;
    Pr[96] = {
        name: "Gold axe",
        ᐃΔ: 1262,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const Ml = 2;
    const Bl = 18;
    Pr[97] = {
        name: "Diamond axe",
        ᐃΔ: 1265,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[98] = {
        name: "Amethyst axe",
        ᐃΔ: 1268,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const Dl = 18;
    const Il = 7;
    Pr[99] = {
        name: "Reidite axe",
        ᐃΔ: 1271,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[64] = {
        name: "Wood bow",
        ᐃΔ: 570,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const El = 0;
    const Sl = 11;
    Pr[65] = {
        name: "Stone bow",
        ᐃΔ: 573,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const Ql = 10;
    const _l = 9;
    const Fl = 20;
    const Rl = 256;
    const jl = 17;
    Pr[66] = {
        name: "Gold bow",
        ᐃΔ: 576,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const Ll = 14;
    Pr[67] = {
        name: "Diamond bow",
        ᐃΔ: 579,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[68] = {
        name: "Amethyst bow",
        ᐃΔ: 582,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[69] = {
        name: "Reidite bow",
        ᐃΔ: 585,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[70] = {
        name: "Dragon bow",
        ᐃΔ: 588,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[77] = {
        name: "Crown of life",
        ᐃΔ: 758,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const Gl = 19;
    const Wl = 12;
    Pr[175] = {
        name: "Gem of life",
        ᐃΔ: 176,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const Ol = 100;
    Pr[185] = {
        name: "Orb of the dragon",
        ᐃΔ: 252,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[187] = {
        name: "Orb of the dragon",
        ᐃΔ: 253,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[184] = {
        name: "Cube of the dragon",
        ᐃΔ: 751,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[186] = {
        name: "Cube of the dragon",
        ᐃΔ: 753,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const Nl = 100;
    Pr[78] = {
        name: "Crown of luck",
        ᐃΔ: 762,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[176] = {
        name: "Gem of luck",
        ᐃΔ: 177,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const Hl = 16;
    Pr[79] = {
        name: "Crown of the angel",
        ᐃΔ: 770,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const ql = 13;
    const Ul = 19;
    const Yl = ll;
    Pr[177] = {
        name: "Gem of the angel",
        ᐃΔ: 175,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[149] = {
        name: "Dragon heart",
        ᐃΔ: 521,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[150] = {
        name: "Lava heart",
        ᐃΔ: 523,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const Kl = 20;
    const Vl = 8;
    const Xl = 14;
    Pr[83] = {
        name: "Hood",
        ᐃΔ: 768,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[84] = {
        name: "Peasant",
        ᐃΔ: 772,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const Zl = 255;
    const $l = 10;
    Pr[86] = {
        name: "Winter peasant",
        ᐃΔ: 777,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const eg = 7;
    const ig = 5;
    Pr[85] = {
        name: "Winter hood",
        ᐃΔ: 780,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const tg = 5;
    Pr[180] = {
        name: "Bucket full",
        ᐃΔ: 784,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const ng = 256;
    Pr[181] = {
        name: "Bucket empty",
        ᐃΔ: 785,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[182] = {
        name: "Well",
        ᐃΔ: 791,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[183] = {
        name: "Sign",
        ᐃΔ: 799,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const og = dq;
    const ag = 15;
    Pr[188] = {
        name: "Pumpkin Seed",
        ᐃΔ: 809,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[191] = {
        name: "Garlic Seed",
        ᐃΔ: 835,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const rg = 1;
    Pr[193] = {
        name: "Thorbushes Seed",
        ᐃΔ: 846,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[190] = {
        name: "Roof",
        ᐃΔ: 843,
        ⲆΔⵠᐃ: 1,
        ᐃᐃᐃᐃ: 1
    };
    Pr[61] = {
        name: "Crab Crown",
        ᐃΔ: 912,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const sg = 3;
    const hg = 17;
    Pr[204] = {
        name: "Carrot Seed",
        ᐃΔ: 950,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const lg = 0;
    Pr[206] = {
        name: "Tomato Seed",
        ᐃΔ: 960,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const gg = 19;
    Pr[208] = {
        name: "Watermelon Seed",
        ᐃΔ: 967,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[210] = {
        name: "Aloe Vera Seed",
        ᐃΔ: 982,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const ug = 15;
    Pr[80] = {
        name: "Cap",
        ᐃΔ: 1138,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[81] = {
        name: "Turban",
        ᐃΔ: 1141,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[82] = {
        name: "Pilot Helmet",
        ᐃΔ: 427,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[152] = {
        name: "Emerald Machine",
        ᐃΔ: 1196,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const bg = 16;
    Pr[153] = {
        name: "Emerald Machine",
        ᐃΔ: 1200,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[154] = {
        name: "Emerald Machine",
        ᐃΔ: 1204,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[155] = {
        name: "Emerald Machine",
        ᐃΔ: 1208,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[156] = {
        name: "Emerald Machine",
        ᐃΔ: 1212,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const dg = 4;
    Pr[157] = {
        name: "Emerald Machine",
        ᐃΔ: 1216,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[53] = {
        name: "Pitchfork",
        ᐃΔ: 977,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[212] = {
        name: "Wood Door Spike",
        ᐃΔ: 990,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const vg = 20;
    Pr[213] = {
        name: "Stone Door Spike",
        ᐃΔ: 993,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[214] = {
        name: "Gold Door Spike",
        ᐃΔ: 996,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const mg = 4;
    Pr[215] = {
        name: "Diamond Door Spike",
        ᐃΔ: 999,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const cg = 18;
    Pr[216] = {
        name: "Amethyst Door Spike",
        ᐃΔ: 1002,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[20] = {
        name: "Diamond Fire Protection ",
        ᐃΔ: 922,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[21] = {
        name: "Amethyst Fire Protection ",
        ᐃΔ: 926,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[22] = {
        name: "Amethyst Fire Protection ",
        ᐃΔ: 930,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[19] = {
        name: "Reidite Sword",
        ᐃΔ: 933,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[34] = {
        name: "Reidite Spear",
        ᐃΔ: 944,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const pg = 1;
    const Cg = Xk;
    const Tg = 8;
    Pr[44] = {
        name: "Reidite Helmet",
        ᐃΔ: 947,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[220] = {
        name: "Reidite Door Spike",
        ᐃΔ: 1005,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[218] = {
        name: "Reidite Door",
        ᐃΔ: 1008,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[219] = {
        name: "Reidite Spike",
        ᐃΔ: 1011,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const fg = 2;
    const zg = 7;
    Pr[217] = {
        name: "Reidite Wall",
        ᐃΔ: 1014,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[32] = {
        name: "Reidite pick",
        ᐃΔ: 1019,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[223] = {
        name: "Boat",
        ᐃΔ: 1027,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    const yg = 11;
    const wg = 13;
    Pr[224] = {
        name: "Sled",
        ᐃΔ: 1030,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[89] = {
        name: "Saddle",
        ᐃΔ: 1048,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 1
    };
    Pr[225] = {
        name: "Mount Boar",
        ᐃΔ: 1051,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const Pg = 12;
    const kg = 9;
    const Ag = 10;
    const xg = 20;
    const Jg = 3;
    const Mg = 20;
    const Bg = 100;
    Pr[226] = {
        name: "Mount King Crab",
        ᐃΔ: 1191,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const Dg = 1;
    const Ig = Dk;
    Pr[227] = {
        name: "Mount Baby Dragon",
        ᐃΔ: 1082,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[228] = {
        name: "Mount Baby Lava",
        ᐃΔ: 1097,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const Eg = 5;
    const Sg = 255;
    Pr[229] = {
        name: "Mount Hawk",
        ᐃΔ: 1112,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[230] = {
        name: "Plane",
        ᐃΔ: 1116,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    const Qg = 18;
    Pr[54] = {
        name: "Pitchfork 2",
        ᐃΔ: 980,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    Pr[239] = {
        name: "Baby Mammoth",
        ᐃΔ: 1226,
        ⲆΔⵠᐃ: 0,
        ᐃᐃᐃᐃ: 0
    };
    var _g = undefined;
    var Ls = [{
        r: [[109, 25], [108, 5]],
        w: 0,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 0,
        ⵠΔⲆΔ: 113,
        time: 1 / 5,
        ⵠᐃᐃ: 4
    }, {
        r: [[113, 1], [109, 35], [108, 10]],
        w: 0,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 1,
        ⵠΔⲆΔ: 118,
        time: 0.2,
        ⵠᐃᐃ: 4
    }, {
        r: [[109, 150], [108, 50], [111, 15]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 2,
        ⵠΔⲆΔ: 119,
        time: 1 / 20,
        ⵠᐃᐃ: 4
    }, {
        r: [[109, 20], [108, 10]],
        w: 0,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 3,
        ⵠΔⲆΔ: 114,
        time: 1 / 6,
        ⵠᐃᐃ: 4
    }, {
        r: [[109, 10]],
        w: 0,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 4,
        ⵠΔⲆΔ: 8,
        time: 1 / 3,
        ⵠᐃᐃ: 0
    }, {
        r: [[8, 1], [109, 50], [108, 15]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 5,
        ⵠΔⲆΔ: 1,
        time: 1 / 8,
        ⵠᐃᐃ: 0
    }, {
        r: [[109, 40], [111, 20], [108, 30], [1, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 6,
        ⵠΔⲆΔ: 3,
        time: 1 / 12,
        ⵠᐃᐃ: 0
    }, {
        r: [[112, 20], [111, 50], [108, 80], [3, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 7,
        ⵠΔⲆΔ: 4,
        time: 1 / 20,
        ⵠᐃᐃ: 0
    }, {
        r: [[112, 40], [111, 60], [121, 30], [4, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 8,
        ⵠΔⲆΔ: 31,
        time: 1 / 60,
        ⵠᐃᐃ: 0
    }, {
        r: [[121, 30], [112, 40], [202, 30], [31, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 9,
        ⵠΔⲆΔ: 32,
        time: 0.011111111111111112,
        ⵠᐃᐃ: 0
    }, {
        r: [[109, 90], [108, 50]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 10,
        ⵠΔⲆΔ: 35,
        time: 1 / 10,
        ⵠᐃᐃ: 0
    }, {
        r: [[109, 160], [108, 120], [111, 80], [35, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 11,
        ⵠΔⲆΔ: 36,
        time: 1 / 15,
        ⵠᐃᐃ: 0
    }, {
        r: [[112, 80], [108, 200], [111, 150], [36, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 12,
        ⵠΔⲆΔ: 37,
        time: 1 / 20,
        ⵠᐃᐃ: 0
    }, {
        r: [[112, 160], [121, 60], [111, 250], [37, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 13,
        ⵠΔⲆΔ: 38,
        time: 1 / 60,
        ⵠᐃᐃ: 0
    }, {
        r: [[121, 160], [202, 60], [112, 250], [38, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 14,
        ⵠΔⲆΔ: 39,
        time: 0.011111111111111112,
        ⵠᐃᐃ: 0
    }, {
        r: [[39, 1], [127, 1], [129, 1], [139, 10], [121, 20]],
        w: 1,
        f: 1,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 15,
        ⵠΔⲆΔ: 45,
        time: 1 / 120,
        ⵠᐃᐃ: 0
    }, {
        r: [[109, 30], [108, 15]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 16,
        ⵠΔⲆΔ: 46,
        time: 0.2,
        ⵠᐃᐃ: 0
    }, {
        r: [[46, 1], [111, 20], [108, 30], [109, 40]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 17,
        ⵠΔⲆΔ: 50,
        time: 1 / 10,
        ⵠᐃᐃ: 0
    }, {
        r: [[50, 1], [112, 20], [111, 50], [108, 80]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 18,
        ⵠΔⲆΔ: 51,
        time: 1 / 20,
        ⵠᐃᐃ: 0
    }, {
        r: [[51, 1], [111, 60], [121, 30], [112, 40]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 19,
        ⵠΔⲆΔ: 52,
        time: 0.025,
        ⵠᐃᐃ: 0
    }, {
        r: [[109, 50]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 20,
        ⵠΔⲆΔ: 130,
        time: 1 / 5,
        ⵠᐃᐃ: 0
    }, {
        r: [[130, 1]],
        w: 0,
        f: 0,
        ⲆⲆⲆ: 1,
        e: 0,
        id: 21,
        ⵠΔⲆΔ: 49,
        time: 1 / 5,
        ⵠᐃᐃ: 0
    }, {
        r: [[109, 100], [108, 50]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 22,
        ⵠΔⲆΔ: 53,
        time: 1 / 10,
        ⵠᐃᐃ: 0
    }, {
        r: [[53, 1], [235, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 23,
        ⵠΔⲆΔ: 54,
        time: 0.016666666666666666,
        ⵠᐃᐃ: 0
    }, {
        r: [[120, 4], [161, 4], [174, 4]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 24,
        ⵠΔⲆΔ: 28,
        time: 1 / 15,
        ⵠᐃᐃ: 0
    }, {
        r: [[109, 40]],
        w: 0,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 25,
        ⵠΔⲆΔ: 12,
        time: 1 / 5,
        ⵠᐃᐃ: 1
    }, {
        r: [[12, 1], [109, 60], [108, 10]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 26,
        ⵠΔⲆΔ: 13,
        time: 1 / 10,
        ⵠᐃᐃ: 1
    }, {
        r: [[109, 80], [111, 30], [108, 30], [13, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 27,
        ⵠΔⲆΔ: 14,
        ⵠᐃᐃ: 1,
        time: 1 / 20
    }, {
        r: [[109, 200], [112, 40], [111, 60], [14, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 28,
        ⵠΔⲆΔ: 15,
        time: 0.03333333333333333,
        ⵠᐃᐃ: 1
    }, {
        r: [[121, 40], [112, 80], [111, 90], [15, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 29,
        ⵠΔⲆΔ: 33,
        time: 0.016666666666666666,
        ⵠᐃᐃ: 1
    }, {
        r: [[202, 40], [121, 80], [112, 90], [33, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 30,
        ⵠΔⲆΔ: 34,
        time: 1 / 90,
        ⵠᐃᐃ: 1
    }, {
        r: [[147, 20], [185, 1], [121, 100], [149, 3]],
        w: 1,
        f: 1,
        ⲆⲆⲆ: 1,
        e: 0,
        id: 31,
        ⵠΔⲆΔ: 16,
        time: 0.008333333333333333,
        ⵠᐃᐃ: 1
    }, {
        r: [[16, 1], [187, 1], [202, 100], [150, 2]],
        w: 1,
        f: 1,
        ⲆⲆⲆ: 1,
        e: 0,
        id: 32,
        ⵠΔⲆΔ: 17,
        time: 0.005,
        ⵠᐃᐃ: 1
    }, {
        r: [[12, 1], [197, 5], [161, 6]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 33,
        ⵠΔⲆΔ: 18,
        time: 1 / 30,
        ⵠᐃᐃ: 1
    }, {
        r: [[109, 30]],
        w: 0,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 34,
        ⵠΔⲆΔ: 57,
        time: 1 / 5,
        ⵠᐃᐃ: 1
    }, {
        r: [[109, 50], [108, 25], [57, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 35,
        ⵠΔⲆΔ: 0,
        time: 1 / 10,
        ⵠᐃᐃ: 1
    }, {
        r: [[109, 60], [111, 40], [108, 50], [0, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 36,
        ⵠΔⲆΔ: 5,
        time: 1 / 20,
        ⵠᐃᐃ: 1
    }, {
        r: [[112, 40], [111, 60], [108, 80], [5, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 37,
        ⵠΔⲆΔ: 6,
        time: 1 / 30,
        ⵠᐃᐃ: 1
    }, {
        r: [[112, 60], [111, 100], [121, 40], [6, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 38,
        ⵠΔⲆΔ: 30,
        time: 1 / 60,
        ⵠᐃᐃ: 1
    }, {
        r: [[112, 100], [121, 80], [202, 40], [30, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 39,
        ⵠΔⲆΔ: 19,
        time: 1 / 90,
        ⵠᐃᐃ: 1
    }, {
        r: [[110, 3]],
        w: 0,
        f: 1,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 40,
        ⵠΔⲆΔ: 115,
        time: 1 / 5,
        ⵠᐃᐃ: 3
    }, {
        r: [[134, 3]],
        w: 0,
        f: 1,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 41,
        ⵠΔⲆΔ: 132,
        time: 0.2,
        ⵠᐃᐃ: 3
    }, {
        r: [[189, 8]],
        w: 0,
        f: 1,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 42,
        ⵠΔⲆΔ: 188,
        time: 1 / 5,
        ⵠᐃᐃ: 3
    }, {
        r: [[192, 8]],
        w: 0,
        f: 1,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 43,
        ⵠΔⲆΔ: 191,
        time: 1 / 5,
        ⵠᐃᐃ: 3
    }, {
        r: [[194, 8]],
        w: 0,
        f: 1,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 44,
        ⵠΔⲆΔ: 193,
        time: 1 / 5,
        ⵠᐃᐃ: 3
    }, {
        r: [[205, 8]],
        w: 0,
        f: 1,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 45,
        ⵠΔⲆΔ: 204,
        time: 1 / 5,
        ⵠᐃᐃ: 3
    }, {
        r: [[207, 8]],
        w: 0,
        f: 1,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 46,
        ⵠΔⲆΔ: 206,
        time: 1 / 5,
        ⵠᐃᐃ: 3
    }, {
        r: [[209, 16]],
        w: 0,
        f: 1,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 47,
        ⵠΔⲆΔ: 208,
        time: 1 / 5,
        ⵠᐃᐃ: 3
    }, {
        r: [[211, 16]],
        w: 0,
        f: 1,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 48,
        ⵠΔⲆΔ: 210,
        time: 0.2,
        ⵠᐃᐃ: 3
    }, {
        r: [[116, 1]],
        w: 0,
        f: 1,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 49,
        ⵠΔⲆΔ: 117,
        time: 0.2,
        ⵠᐃᐃ: 3
    }, {
        r: [[137, 1]],
        w: 0,
        f: 1,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 50,
        ⵠΔⲆΔ: 138,
        time: 0.3333333333333333,
        ⵠᐃᐃ: 3
    }, {
        r: [[131, 3]],
        w: 0,
        f: 1,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 51,
        ⵠΔⲆΔ: 143,
        time: 1 / 3,
        ⵠᐃᐃ: 3
    }, {
        r: [[131, 3], [110, 1]],
        w: 0,
        f: 1,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 52,
        ⵠΔⲆΔ: 133,
        time: 0.3333333333333333,
        ⵠᐃᐃ: 3
    }, {
        r: [[131, 5], [110, 2], [142, 2]],
        w: 0,
        f: 1,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 53,
        ⵠΔⲆΔ: 136,
        time: 0.2,
        ⵠᐃᐃ: 3
    }, {
        r: [[161, 2]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 54,
        ⵠΔⲆΔ: 195,
        time: 1 / 5,
        ⵠᐃᐃ: 4
    }, {
        r: [[109, 20]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 55,
        ⵠΔⲆΔ: 162,
        time: 0.2,
        ⵠᐃᐃ: 5
    }, {
        r: [[162, 1], [108, 17]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 56,
        ⵠΔⲆΔ: 163,
        time: 0.2,
        ⵠᐃᐃ: 5
    }, {
        r: [[163, 1], [111, 14]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 57,
        ⵠΔⲆΔ: 164,
        time: 1 / 5,
        ⵠᐃᐃ: 5
    }, {
        r: [[164, 1], [112, 11]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 58,
        ⵠΔⲆΔ: 165,
        time: 1 / 5,
        ⵠᐃᐃ: 5
    }, {
        r: [[165, 1], [121, 8]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 59,
        ⵠΔⲆΔ: 122,
        time: 1 / 5,
        ⵠᐃᐃ: 5
    }, {
        r: [[122, 1], [202, 5]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 60,
        ⵠΔⲆΔ: 217,
        time: 1 / 5,
        ⵠᐃᐃ: 5
    }, {
        r: [[109, 30]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 61,
        ⵠΔⲆΔ: 166,
        time: 0.125,
        ⵠᐃᐃ: 5
    }, {
        r: [[166, 1], [108, 27]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 62,
        ⵠΔⲆΔ: 171,
        time: 1 / 8,
        ⵠᐃᐃ: 5
    }, {
        r: [[171, 1], [111, 24]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 63,
        ⵠΔⲆΔ: 172,
        time: 1 / 8,
        ⵠᐃᐃ: 5
    }, {
        r: [[172, 1], [112, 21]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 64,
        ⵠΔⲆΔ: 173,
        time: 1 / 8,
        ⵠᐃᐃ: 5
    }, {
        r: [[173, 1], [121, 18]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 65,
        ⵠΔⲆΔ: 124,
        time: 1 / 8,
        ⵠᐃᐃ: 5
    }, {
        r: [[124, 1], [202, 15]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 66,
        ⵠΔⲆΔ: 218,
        time: 1 / 8,
        ⵠᐃᐃ: 5
    }, {
        r: [[162, 1], [109, 40], [108, 30]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 67,
        ⵠΔⲆΔ: 160,
        time: 1 / 20,
        ⵠᐃᐃ: 5
    }, {
        r: [[163, 1], [108, 70]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 68,
        ⵠΔⲆΔ: 168,
        time: 1 / 20,
        ⵠᐃᐃ: 5
    }, {
        r: [[164, 1], [111, 40], [108, 30]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 69,
        ⵠΔⲆΔ: 169,
        time: 1 / 20,
        ⵠᐃᐃ: 5
    }, {
        r: [[165, 1], [112, 40], [108, 30]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 70,
        ⵠΔⲆΔ: 170,
        time: 1 / 20,
        ⵠᐃᐃ: 5
    }, {
        r: [[122, 1], [121, 40], [108, 30]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 71,
        ⵠΔⲆΔ: 123,
        time: 1 / 20,
        ⵠᐃᐃ: 5
    }, {
        r: [[217, 1], [202, 40], [111, 30]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 72,
        ⵠΔⲆΔ: 219,
        time: 0.05,
        ⵠᐃᐃ: 5
    }, {
        r: [[166, 1], [109, 80], [108, 60]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 73,
        ⵠΔⲆΔ: 212,
        time: 1 / 20,
        ⵠᐃᐃ: 5
    }, {
        r: [[171, 1], [108, 140]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 74,
        ⵠΔⲆΔ: 213,
        time: 1 / 20,
        ⵠᐃᐃ: 5
    }, {
        r: [[172, 1], [111, 80], [108, 60]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 75,
        ⵠΔⲆΔ: 214,
        time: 0.05,
        ⵠᐃᐃ: 5
    }, {
        r: [[173, 1], [112, 80], [108, 60]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 76,
        ⵠΔⲆΔ: 215,
        time: 1 / 20,
        ⵠᐃᐃ: 5
    }, {
        r: [[124, 1], [121, 80], [108, 60]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 77,
        ⵠΔⲆΔ: 216,
        time: 1 / 20,
        ⵠᐃᐃ: 5
    }, {
        r: [[218, 1], [202, 80], [111, 60]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 78,
        ⵠΔⲆΔ: 220,
        time: 1 / 20,
        ⵠᐃᐃ: 5
    }, {
        r: [[109, 25], [111, 2]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 79,
        ⵠΔⲆΔ: 167,
        time: 1 / 5,
        ⵠᐃᐃ: 4
    }, {
        r: [[120, 1], [2, 1], [161, 2]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 80,
        ⵠΔⲆΔ: 23,
        time: 1 / 5,
        ⵠᐃᐃ: 2
    }, {
        r: [[120, 5], [222, 20], [147, 5], [2, 5]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 81,
        ⵠΔⲆΔ: 24,
        time: 0.03333333333333333,
        ⵠᐃᐃ: 2
    }, {
        r: [[236, 1], [231, 8], [232, 8], [222, 8], [161, 6]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 82,
        ⵠΔⲆΔ: 82,
        time: 1 / 60,
        ⵠᐃᐃ: 2
    }, {
        r: [[2, 1], [161, 2]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 83,
        ⵠΔⲆΔ: 10,
        time: 0.2,
        ⵠᐃᐃ: 2
    }, {
        r: [[10, 1], [174, 5], [161, 4]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 84,
        ⵠΔⲆΔ: 11,
        time: 1 / 12,
        ⵠᐃᐃ: 2
    }, {
        r: [[11, 1], [146, 5], [147, 4]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 85,
        ⵠΔⲆΔ: 40,
        time: 0.03333333333333333,
        ⵠᐃᐃ: 2
    }, {
        r: [[40, 1], [146, 5], [240, 10], [147, 4]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 86,
        ⵠΔⲆΔ: 88,
        time: 0.02,
        ⵠᐃᐃ: 2
    }, {
        r: [[109, 50]],
        w: 0,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 87,
        ⵠΔⲆΔ: 58,
        time: 0.2,
        ⵠᐃᐃ: 2
    }, {
        r: [[108, 75], [109, 75], [58, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 88,
        ⵠΔⲆΔ: 25,
        time: 1 / 10,
        ⵠᐃᐃ: 2
    }, {
        r: [[108, 90], [109, 90], [111, 90], [25, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 89,
        ⵠΔⲆΔ: 26,
        time: 1 / 20,
        ⵠᐃᐃ: 2
    }, {
        r: [[108, 100], [111, 100], [112, 100], [26, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 90,
        ⵠΔⲆΔ: 27,
        time: 1 / 30,
        ⵠᐃᐃ: 2
    }, {
        r: [[121, 80], [111, 150], [112, 120], [27, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 91,
        ⵠΔⲆΔ: 43,
        time: 1 / 60,
        ⵠᐃᐃ: 2
    }, {
        r: [[202, 80], [112, 150], [121, 120], [43, 1]],
        w: 1,
        f: 1,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 92,
        ⵠΔⲆΔ: 44,
        time: 1 / 90,
        ⵠᐃᐃ: 2
    }, {
        r: [[139, 2], [112, 40], [161, 4]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 93,
        ⵠΔⲆΔ: 48,
        time: 1 / 20,
        ⵠᐃᐃ: 2
    }, {
        r: [[48, 1], [111, 80], [129, 1], [121, 20]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 94,
        ⵠΔⲆΔ: 47,
        time: 1 / 90,
        ⵠᐃᐃ: 2
    }, {
        r: [[203, 5], [112, 50], [147, 5]],
        w: 1,
        f: 1,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 95,
        ⵠΔⲆΔ: 20,
        time: 1 / 20,
        ⵠᐃᐃ: 2
    }, {
        r: [[20, 1], [203, 10], [121, 50]],
        w: 1,
        f: 1,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 96,
        ⵠΔⲆΔ: 21,
        time: 1 / 60,
        ⵠᐃᐃ: 2
    }, {
        r: [[21, 1], [203, 15], [121, 50], [202, 50]],
        w: 1,
        f: 1,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 97,
        ⵠΔⲆΔ: 22,
        time: 1 / 90,
        ⵠᐃᐃ: 2
    }, {
        r: [[161, 4], [237, 2]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 98,
        ⵠΔⲆΔ: 80,
        time: 1 / 15,
        ⵠᐃᐃ: 2
    }, {
        r: [[80, 1], [161, 6], [237, 4], [232, 12], [222, 4]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 99,
        ⵠΔⲆΔ: 81,
        time: 1 / 150,
        ⵠᐃᐃ: 2
    }, {
        r: [[161, 6], [174, 5]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 100,
        ⵠΔⲆΔ: 29,
        time: 1 / 15,
        ⵠᐃᐃ: 2
    }, {
        r: [[109, 20]],
        w: 0,
        f: 1,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 101,
        ⵠΔⲆΔ: 120,
        time: 1 / 3,
        ⵠᐃᐃ: 4
    }, {
        r: [[112, 1], [161, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 102,
        ⵠΔⲆΔ: 147,
        time: 1 / 3,
        ⵠᐃᐃ: 4
    }, {
        r: [[111, 10]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 103,
        ⵠΔⲆΔ: 148,
        time: 1 / 5,
        ⵠᐃᐃ: 4
    }, {
        r: [[111, 250]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 104,
        ⵠΔⲆΔ: 158,
        time: 1 / 60,
        ⵠᐃᐃ: 4
    }, {
        r: [[109, 50]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 105,
        ⵠΔⲆΔ: 159,
        time: 1 / 10,
        ⵠᐃᐃ: 4
    }, {
        r: [[109, 15]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 106,
        ⵠΔⲆΔ: 125,
        time: 1 / 5,
        ⵠᐃᐃ: 4
    }, {
        r: [[109, 30]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 107,
        ⵠΔⲆΔ: 190,
        time: 1 / 5,
        ⵠᐃᐃ: 4
    }, {
        r: [[109, 120]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 108,
        ⵠΔⲆΔ: 221,
        time: 1 / 15,
        ⵠᐃᐃ: 4
    }, {
        r: [[109, 20], [140, 15]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 109,
        ⵠΔⲆΔ: 141,
        time: 1 / 5,
        ⵠᐃᐃ: 4
    }, {
        r: [[126, 25]],
        w: 1,
        f: 1,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 110,
        ⵠΔⲆΔ: 128,
        time: 1 / 5,
        ⵠᐃᐃ: 3
    }, {
        r: [[128, 1]],
        w: 0,
        f: 0,
        ⲆⲆⲆ: 1,
        e: 0,
        id: 111,
        ⵠΔⲆΔ: 127,
        time: 0.2,
        ⵠᐃᐃ: 3
    }, {
        r: [[142, 20], [128, 1]],
        w: 0,
        f: 1,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 112,
        ⵠΔⲆΔ: 127,
        time: 1 / 10,
        ⵠᐃᐃ: 3
    }, {
        r: [[128, 1]],
        w: 0,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 1,
        id: 113,
        ⵠΔⲆΔ: 127,
        time: 1 / 3,
        ⵠᐃᐃ: 3
    }, {
        r: [[109, 60], [108, 20], [161, 2]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 114,
        ⵠΔⲆΔ: 135,
        time: 1 / 10,
        ⵠᐃᐃ: 4
    }, {
        r: [[112, 40], [108, 45]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 115,
        ⵠΔⲆΔ: 151,
        time: 1 / 20,
        ⵠᐃᐃ: 4
    }, {
        r: [[151, 1], [234, 40], [238, 1]],
        w: 1,
        f: 1,
        ⲆⲆⲆ: 1,
        e: 0,
        id: 116,
        ⵠΔⲆΔ: 152,
        time: 1 / 200,
        ⵠᐃᐃ: 4
    }, {
        r: [[109, 50], [108, 100]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 117,
        ⵠΔⲆΔ: 153,
        time: 1 / 90,
        ⵠᐃᐃ: 4
    }, {
        r: [[108, 60], [111, 120]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 118,
        ⵠΔⲆΔ: 154,
        time: 0.011111111111111112,
        ⵠᐃᐃ: 4
    }, {
        r: [[111, 70], [112, 140]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 119,
        ⵠΔⲆΔ: 155,
        time: 1 / 90,
        ⵠᐃᐃ: 4
    }, {
        r: [[112, 80], [121, 160]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 120,
        ⵠΔⲆΔ: 156,
        time: 1 / 90,
        ⵠᐃᐃ: 4
    }, {
        r: [[121, 90], [202, 180]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 121,
        ⵠΔⲆΔ: 157,
        time: 1 / 90,
        ⵠᐃᐃ: 4
    }, {
        r: [[108, 70]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 122,
        ⵠΔⲆΔ: 55,
        time: 1 / 10,
        ⵠᐃᐃ: 0
    }, {
        r: [[108, 70], [109, 50]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 123,
        ⵠΔⲆΔ: 56,
        time: 0.1,
        ⵠᐃᐃ: 0
    }, {
        r: [[109, 40], [108, 40]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 124,
        ⵠΔⲆΔ: 144,
        time: 0.1,
        ⵠᐃᐃ: 4
    }, {
        r: [[143, 1], [117, 1]],
        w: 0,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 125,
        ⵠΔⲆΔ: 145,
        time: 1 / 3,
        ⵠᐃᐃ: 3
    }, {
        r: [[147, 30], [184, 1], [121, 150], [149, 3]],
        w: 1,
        f: 1,
        ⲆⲆⲆ: 1,
        e: 0,
        id: 126,
        ⵠΔⲆΔ: 59,
        time: 1 / 120,
        ⵠᐃᐃ: 2
    }, {
        r: [[59, 1], [186, 1], [202, 150], [150, 2]],
        w: 1,
        f: 1,
        ⲆⲆⲆ: 1,
        e: 0,
        id: 127,
        ⵠΔⲆΔ: 60,
        time: 1 / 180,
        ⵠᐃᐃ: 2
    }, {
        r: [[26, 1], [197, 10], [196, 10], [161, 10]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 128,
        ⵠΔⲆΔ: 61,
        time: 1 / 60,
        ⵠᐃᐃ: 2
    }, {
        r: [[147, 20], [185, 1], [121, 150], [149, 3]],
        w: 1,
        f: 1,
        ⲆⲆⲆ: 1,
        e: 0,
        id: 129,
        ⵠΔⲆΔ: 62,
        time: 1 / 120,
        ⵠᐃᐃ: 1
    }, {
        r: [[62, 1], [187, 1], [202, 150], [150, 2]],
        w: 1,
        f: 1,
        ⲆⲆⲆ: 1,
        e: 0,
        id: 130,
        ⵠΔⲆΔ: 63,
        time: 1 / 180,
        ⵠᐃᐃ: 1
    }, {
        r: [[109, 100], [161, 4]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 131,
        ⵠΔⲆΔ: 64,
        time: 1 / 20,
        ⵠᐃᐃ: 1
    }, {
        r: [[109, 30]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 132,
        ⵠΔⲆΔ: 101,
        time: 1 / 5,
        ⵠᐃᐃ: 1
    }, {
        r: [[108, 200], [161, 8], [222, 4], [64, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 133,
        ⵠΔⲆΔ: 65,
        time: 1 / 25,
        ⵠᐃᐃ: 1
    }, {
        r: [[108, 20], [231, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 134,
        ⵠΔⲆΔ: 102,
        time: 1 / 5,
        ⵠᐃᐃ: 1
    }, {
        r: [[111, 200], [161, 12], [231, 4], [222, 4], [65, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 135,
        ⵠΔⲆΔ: 66,
        time: 1 / 30,
        ⵠᐃᐃ: 1
    }, {
        r: [[111, 20], [222, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 136,
        ⵠΔⲆΔ: 103,
        time: 1 / 10,
        ⵠᐃᐃ: 1
    }, {
        r: [[112, 200], [147, 10], [231, 8], [222, 8], [66, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 137,
        ⵠΔⲆΔ: 67,
        time: 1 / 35,
        ⵠᐃᐃ: 1
    }, {
        r: [[112, 10], [222, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 138,
        ⵠΔⲆΔ: 104,
        time: 1 / 10,
        ⵠᐃᐃ: 1
    }, {
        r: [[121, 200], [147, 10], [222, 8], [232, 8], [67, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 139,
        ⵠΔⲆΔ: 68,
        time: 1 / 40,
        ⵠᐃᐃ: 1
    }, {
        r: [[121, 10], [232, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 140,
        ⵠΔⲆΔ: 105,
        time: 1 / 15,
        ⵠᐃᐃ: 1
    }, {
        r: [[202, 200], [147, 10], [129, 1], [68, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 141,
        ⵠΔⲆΔ: 69,
        time: 1 / 45,
        ⵠᐃᐃ: 1
    }, {
        r: [[202, 10], [232, 1], [203, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 142,
        ⵠΔⲆΔ: 106,
        time: 1 / 15,
        ⵠᐃᐃ: 1
    }, {
        r: [[234, 200], [147, 10], [185, 1], [69, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 143,
        ⵠΔⲆΔ: 70,
        time: 0.02,
        ⵠᐃᐃ: 1
    }, {
        r: [[234, 10], [238, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 144,
        ⵠΔⲆΔ: 107,
        time: 0.05,
        ⵠᐃᐃ: 1
    }, {
        r: [[109, 100]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 145,
        ⵠΔⲆΔ: 71,
        time: 1 / 25,
        ⵠᐃᐃ: 1
    }, {
        r: [[71, 1], [108, 100], [109, 50]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 146,
        ⵠΔⲆΔ: 72,
        time: 0.025,
        ⵠᐃᐃ: 1
    }, {
        r: [[72, 1], [111, 50], [108, 50], [109, 50]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 147,
        ⵠΔⲆΔ: 73,
        time: 1 / 50,
        ⵠᐃᐃ: 1
    }, {
        r: [[73, 1], [112, 50], [111, 50], [108, 50]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 148,
        ⵠΔⲆΔ: 74,
        time: 0.014285714285714285,
        ⵠᐃᐃ: 1
    }, {
        r: [[74, 1], [121, 50], [112, 50], [111, 50]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 149,
        ⵠΔⲆΔ: 75,
        time: 1 / 90,
        ⵠᐃᐃ: 1
    }, {
        r: [[75, 1], [202, 50], [121, 50], [112, 50]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 150,
        ⵠΔⲆΔ: 76,
        time: 1 / 120,
        ⵠᐃᐃ: 1
    }, {
        r: [[175, 1], [111, 200]],
        w: 1,
        f: 1,
        ⲆⲆⲆ: 1,
        e: 0,
        id: 151,
        ⵠΔⲆΔ: 77,
        time: 1 / 60,
        ⵠᐃᐃ: 2
    }, {
        r: [[176, 1], [111, 200]],
        w: 1,
        f: 1,
        ⲆⲆⲆ: 1,
        e: 0,
        id: 152,
        ⵠΔⲆΔ: 78,
        time: 1 / 60,
        ⵠᐃᐃ: 2
    }, {
        r: [[177, 1], [111, 200], [149, 1]],
        w: 1,
        f: 1,
        ⲆⲆⲆ: 1,
        e: 0,
        id: 153,
        ⵠΔⲆΔ: 79,
        time: 1 / 60,
        ⵠᐃᐃ: 2
    }, {
        r: [[174, 10], [2, 5], [161, 6]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 154,
        ⵠΔⲆΔ: 83,
        time: 1 / 10,
        ⵠᐃᐃ: 2
    }, {
        r: [[2, 3], [161, 2]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 155,
        ⵠΔⲆΔ: 84,
        time: 1 / 10,
        ⵠᐃᐃ: 2
    }, {
        r: [[83, 1], [179, 1], [146, 15], [147, 5], [222, 8]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 156,
        ⵠΔⲆΔ: 85,
        time: 0.016666666666666666,
        ⵠᐃᐃ: 2
    }, {
        r: [[84, 1], [178, 1], [146, 10], [147, 5], [222, 8]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 157,
        ⵠΔⲆΔ: 86,
        time: 0.016666666666666666,
        ⵠᐃᐃ: 2
    }, {
        r: [[181, 1]],
        w: 0,
        f: 0,
        ⲆⲆⲆ: 1,
        e: 0,
        id: 158,
        ⵠΔⲆΔ: 180,
        time: 0.2,
        ⵠᐃᐃ: 0
    }, {
        r: [[109, 20], [161, 1]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 159,
        ⵠΔⲆΔ: 181,
        time: 1 / 5,
        ⵠᐃᐃ: 0
    }, {
        r: [[108, 100], [140, 30]],
        w: 1,
        f: 1,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 160,
        ⵠΔⲆΔ: 182,
        time: 1 / 10,
        ⵠᐃᐃ: 4
    }, {
        r: [[109, 20]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 161,
        ⵠΔⲆΔ: 183,
        time: 1 / 5,
        ⵠᐃᐃ: 4
    }, {
        r: [[109, 100], [108, 50], [2, 5], [174, 5], [161, 6]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 162,
        ⵠΔⲆΔ: 198,
        time: 0.05,
        ⵠᐃᐃ: 4
    }, {
        r: [[109, 250], [147, 10], [146, 2], [139, 2]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 163,
        ⵠΔⲆΔ: 223,
        time: 1 / 50,
        ⵠᐃᐃ: 4
    }, {
        r: [[109, 250], [161, 10], [146, 2], [222, 8]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 164,
        ⵠΔⲆΔ: 224,
        time: 1 / 50,
        ⵠᐃᐃ: 4
    }, {
        r: [[161, 10], [174, 6], [2, 4], [126, 50]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 165,
        ⵠΔⲆΔ: 89,
        time: 1 / 20,
        ⵠᐃᐃ: 4
    }, {
        r: [[109, 250], [161, 10], [120, 10], [231, 8]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 166,
        ⵠΔⲆΔ: 230,
        time: 1 / 50,
        ⵠᐃᐃ: 4
    }, {
        r: [[109, 40]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 167,
        ⵠΔⲆΔ: 94,
        time: 1 / 5,
        ⵠᐃᐃ: 1
    }, {
        r: [[94, 1], [108, 40], [109, 50]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 168,
        ⵠΔⲆΔ: 95,
        time: 1 / 10,
        ⵠᐃᐃ: 1
    }, {
        r: [[95, 1], [111, 40], [108, 50], [109, 60]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 169,
        ⵠΔⲆΔ: 96,
        time: 1 / 20,
        ⵠᐃᐃ: 1
    }, {
        r: [[96, 1], [112, 40], [111, 70], [108, 80]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 170,
        ⵠΔⲆΔ: 97,
        time: 0.03333333333333333,
        ⵠᐃᐃ: 1
    }, {
        r: [[97, 1], [121, 40], [112, 70], [111, 110]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 171,
        ⵠΔⲆΔ: 98,
        time: 1 / 60,
        ⵠᐃᐃ: 1
    }, {
        r: [[98, 1], [202, 50], [121, 80], [112, 110]],
        w: 1,
        f: 0,
        ⲆⲆⲆ: 0,
        e: 0,
        id: 172,
        ⵠΔⲆΔ: 99,
        time: 0.011111111111111112,
        ⵠᐃᐃ: 1
    }];
    const Ms = 12;
    function jg(b, c, d, e) {
        const f = (d | 65069) & ~(d & 65069);
        const g = ~(e & 2450) & (e | 2450);
        const a = Gg((47128 + b) % 65524, c ^ 18642);
        xr(f, g);
        return a ^ 36202;
    }
    const Lg = 9;
    function Gg(a, b) {
        const c = a ^ 53197;
        const d = ~(b & 8782) & 8782 | ~(b & 8782) & b;
        const e = wk(c, d, c, d);
        Tw(c, d, c, d, c);
        return ~(e & 623) & e | ~(e & 623) & 623;
    }
    const Wg = 14;
    const Og = Xn;
    const Ng = 100;
    if (aj.ΔⲆΔᐃΔᐃΔ) {
        var Hg = aj.Math.acos;
        aj.Math.acos = aj.Math.asin;
        aj.Math.asin = Hg;
        var qg = aj.Math.acos;
        aj.Math.acos = aj.Math.asin;
        aj.Math.asin = qg;
    }
    const Ug = 0;
    const Yg = Ua;
    function Kg(a, b, c, d) {
        Qj(pr, a, b, c, d);
        return (26742 + (Jw(rr[0], rr[1], rr[2], rr[3], rr[0], rr[1]) ^ Vg(rr[2], rr[3]))) % 65411;
    }
    function Vg(a, b) {
        ak(pr, a, b);
        const c = function (b, c, d, e) {
            $e(pr, b, c, d, e);
            const f = Jw(rr[0], rr[1], rr[2], rr[3], rr[0], rr[1]);
            const g = Jw(rr[2], rr[3], rr[0], rr[1], rr[2], rr[3]);
            return ((141 + (f ^ g)) * 75 + 74) % 65537;
        }(rr[0], rr[1], rr[0], rr[1]);
        Jw(rr[0], rr[1], rr[0], rr[1], rr[0], rr[1]);
        return ~(c & 61278) & (c | 61278);
    }
    const Xg = 16;
    const Zg = 1;
    Er = 300;
    function $g(b, c, d, e, f) {
        const i = b ^ 35137;
        const a = (0 << (c >> 24 & 255)) + (24 << (c & 255)) + (16 << (c >> 16 & 255)) + (8 << (c >> 8 & 255));
        const j = d ^ 9294;
        const k = (e + 41606) % 65404;
        const h = ~(f & 29362) & 29362 | ~(f & 29362) & f;
        const l = Pw(i, a, j, k, h, i);
        const g = function (b, c, d, e, f, g) {
            const a = ~(b & 32138) & (b | 32138);
            const i = (8 << (g >> 8 & 255)) + (16 << (g >> 24 & 255)) + (0 << (g & 255)) + (24 << (g >> 16 & 255));
            const j = Tw(a, ((c + 25284) * 2147483629 + 2147483587) % 2147483647, d ^ 51759, (0 << (e & 255)) + (24 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 24 & 255)), (16 << (f >> 0 & 255)) + (8 << (f >> 8 & 255)) + (24 << (f >> 16 & 255)) + (0 << (f >> 24 & 255)));
            Rw(i, a);
            return j ^ 21358;
        }(a, j, k, h, i, a);
        return (24 << ((l ^ g) & 255)) + (16 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 8 & 255)) + (0 << ((l ^ g) >> 24 & 255));
    }
    ⵠΔᐃ = {
        ᐃΔΔⵠⵠᐃⲆ: 300,
        ⵠⲆᐃΔⲆΔⲆ: 301,
        ᐃⵠⵠⲆⲆⲆᐃ: 302,
        ⲆᐃΔⵠΔᐃΔ: 303,
        ᐃⵠᐃΔⲆᐃΔ: 304,
        ΔΔΔⵠΔⵠⲆ: 305,
        ΔⵠΔⵠΔⵠⵠ: 306,
        ⵠᐃⲆⵠⵠⵠᐃ: 307,
        ⵠᐃΔⲆⲆⵠᐃ: 308,
        ⲆΔᐃΔΔⲆᐃ: 309,
        ᐃⵠΔⲆΔᐃⵠ: 310,
        ⲆΔⵠΔΔΔⵠ: 311,
        EMPTY: 312,
        ᐃⵠᐃΔᐃΔΔ: 313,
        ΔⲆⵠΔⲆᐃⲆ: 314,
        ⲆⵠΔᐃⵠΔⵠ: 315,
        ⲆⵠⵠᐃΔⲆΔ: 316,
        ᐃⲆᐃΔΔᐃΔ: 317,
        ⵠⵠⲆΔᐃⲆΔ: 318,
        ᐃΔᐃⲆⵠᐃⲆ: 319,
        ᐃⵠⲆⲆⵠⲆΔ: 320,
        ΔⲆⵠⵠΔⲆᐃ: 321,
        Δⵠⵠᐃⵠ: 322,
        ΔᐃΔⵠΔᐃΔ: 323,
        ΔⵠΔⵠᐃ: 324,
        ᐃⵠⲆⵠᐃⲆⲆ: 325,
        ᐃᐃᐃΔᐃᐃⲆ: 326,
        ⵠΔⵠⵠᐃΔΔ: 327,
        ⲆⲆᐃⵠⲆⲆΔ: 328,
        ΔᐃᐃΔᐃΔᐃ: 329,
        ⲆΔΔᐃⲆⵠⲆ: 330,
        ⵠᐃΔᐃΔΔΔ: 331,
        POINTS: 332,
        ⲆΔΔⲆⵠⵠΔ: 333,
        ᐃⲆΔⵠⵠᐃⵠ: 334,
        ΔΔⵠⲆΔⵠᐃ: 335,
        ᐃΔⵠⵠᐃΔΔ: 336,
        ΔⲆᐃⲆⲆᐃᐃ: 337,
        ⵠⵠᐃⵠⵠΔᐃ: 338,
        ⵠⵠⵠᐃΔⵠⵠ: 339,
        ΔⲆⲆᐃⵠⲆⲆ: 340,
        ΔΔΔΔΔⵠΔ: 341,
        ⵠⵠΔᐃⵠⲆΔ: 342,
        ΔⵠᐃⵠⵠᐃⲆ: 343
    };
    function Ns() {
        lt[99] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
        lt[98] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
        lt[97] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
        lt[96] = ["Gold Axe", "Chop 'til it drops!", "Damage: 24", "Shield Penetration: 3"];
        lt[95] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
        lt[94] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
        lt[153] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
        lt[154] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
        lt[155] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
        lt[156] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
        lt[157] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
        lt[76] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
        lt[75] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
        lt[74] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
        lt[73] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
        lt[72] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
        lt[71] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
        lt[56] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
        lt[221] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
        lt[107] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
        lt[70] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
        lt[106] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
        lt[69] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
        lt[105] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
        lt[68] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
        lt[104] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
        lt[67] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
        lt[103] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
        lt[66] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
        lt[102] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
        lt[65] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
        lt[101] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
        lt[64] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
        lt[152] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
        lt[237] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
        lt[240] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
        lt[232] = ["Vulture Feather", "From a deadly vulture"];
        lt[234] = ["Emerald", "How many golden breads can you get from it?"];
        lt[238] = ["Sand Worm Juice", "I don't want to know how you got this."];
        lt[80] = ["Turban", "Useful to survive in the desert."];
        lt[81] = ["Ninja outfit", "Essential to survive in the desert"];
        lt[82] = ["Pilot Hat", "Take off and land with flying objects much faster."];
        lt[236] = ["Pilot Glasses"];
        lt[225] = ["Tamed Boar", "Fast on lands and slow on water."];
        lt[239] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
        lt[226] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
        lt[227] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
        lt[228] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
        lt[229] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
        lt[89] = ["Saddle", "Hit a boar with it to tame it."];
        lt[90] = ["Witch Hat", "You're a wizard Starvy!"];
        lt[91] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
        lt[92] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
        lt[93] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
        lt[100] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
        lt[24] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
        lt[224] = ["Sled", "You are faster with it in the snow"];
        lt[223] = ["Boat", "You are faster with it in the water"];
        lt[230] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
        lt[39] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"];
        lt[222] = ["Penguin Feather", "From a deadly cute penguin."];
        lt[231] = ["Hawk Feather", "From a deadly hawk."];
        lt[233] = ["Cactus", "Food : 20", "Water : 10"];
        lt[211] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
        lt[210] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
        lt[209] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
        lt[208] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
        lt[218] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
        lt[217] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
        lt[219] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
        lt[220] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
        lt[32] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
        lt[212] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
        lt[213] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
        lt[214] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
        lt[215] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
        lt[216] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
        lt[205] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
        lt[207] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
        lt[204] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        lt[206] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        lt[53] = ["Pitchfork", "Perfect for gathering"];
        lt[54] = ["Golden Pitchfork", "Essential for a real farmer."];
        lt[235] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
        lt[Lr.ᐃⵠⲆΔⵠⵠΔ] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
        lt[Lr.ᐃᐃΔΔⲆᐃⵠ] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
        lt[Lr.ⲆⲆΔΔΔᐃⵠ] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
        lt[Lr.ⵠⲆᐃⵠᐃⵠΔ] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
        lt[Lr.ᐃⲆᐃᐃΔⵠⲆ] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
        lt[186] = ["Lava Cube", "You feel an immense power emanating from this cube"];
        lt[187] = ["Lava Orb", "You feel an immense power emanating from this orb"];
        lt[63] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
        lt[17] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
        lt[150] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
        lt[60] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
        lt[34] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
        lt[19] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
        lt[203] = ["Flame", "It's hot!"];
        lt[20] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
        lt[21] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
        lt[22] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
        lt[202] = ["Reidite", "The ultimate ore"];
        lt[184] = ["Dragon Cube", "You feel a great power emanating from this cube"];
        nt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        nt[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
        nt[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
        nt[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
        nt[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
        nt[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
        nt[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
        nt[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
        nt[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
        nt[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
        nt[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
        nt[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
        nt[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
        nt[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
        nt[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
        nt[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
        nt[38] = ["You died crushed by an angry baby mammoth."];
        nt[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
        nt[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
        lt[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        lt[341] = "A sandstorm is approaching in a few seconds.";
        lt[340] = "The sandstorm will soon stop.";
        lt[343] = "A blizzard is approaching in a few seconds.";
        lt[342] = "The blizzard will soon stop.";
        lt[328] = " BACK TO THE GAME";
        lt[329] = " Share on Twitter";
        lt[330] = " Share on Facebook";
        lt[331] = "You can buy items on the shop in the next game with your points";
        lt[332] = "points";
        lt[333] = "Score";
        lt[334] = "Kill";
        lt[335] = "Days survived";
        lt[336] = "Building method: Free. Press G to change";
        lt[337] = "Building method: Grid. Press G to change";
        lt[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        lt[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
        lt[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
        lt[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        lt[7] = ["Hand"];
        lt[140] = ["Dirt", "Dirty!"];
        lt[126] = ["Sand", "I got it in my eyes!"];
        lt[109] = ["Wood", "You can't get enough of it!"];
        lt[108] = ["Stone", "Also called a rock"];
        lt[111] = ["Gold", "Be generous, give it to others"];
        lt[112] = ["Diamond", "What will you make with it?"];
        lt[121] = ["Amethyst", "It's Mauve like Lapa"];
        lt[131] = ["Flour", "Used in cooking"];
        lt[133] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
        lt[136] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
        lt[116] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
        lt[117] = ["Cooked meat", "A rare steak, please", "Food: 35"];
        lt[137] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
        lt[138] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
        lt[143] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
        lt[145] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
        lt[200] = ["Candies", "Only for children!", "Food: 20"];
        lt[199] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
        lt[201] = ["Garland", "Perfect decoration for roofs"];
        lt[115] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
        lt[110] = ["Berry", "Berry tasty!", "Food: 10"];
        lt[132] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
        lt[134] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
        lt[188] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
        lt[189] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
        lt[191] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        lt[192] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
        lt[193] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
        lt[194] = ["Thorn bush", "It stings!"];
        lt[141] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
        lt[142] = ["Ice", "Useful for making cakes and water"];
        lt[55] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
        lt[174] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
        lt[2] = ["Rabbit Fur", "That rabbit was so cute..."];
        lt[178] = ["Pure Fur", "You're a bread factory"];
        lt[179] = ["Dark Fur", "You get ready to do something wrong"];
        lt[146] = ["Winter Fur", "These animals just wanted a hug..."];
        lt[139] = ["Scales", "It smells like fish!"];
        lt[129] = ["Kraken Skin", "Weren't you too scared?"];
        lt[113] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
        lt[118] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
        lt[114] = ["Workbench", "Very useful to craft all kinds of objects"];
        lt[161] = ["Cord", "Used in crafting Hats and Bag"];
        lt[147] = ["Diamond Cord", "Used in crafting Special Hats"];
        lt[167] = ["Chest", "Allows you to store items", "Durability: 500"];
        lt[57] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
        lt[0] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
        lt[5] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
        lt[6] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
        lt[9] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
        lt[30] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
        lt[62] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
        lt[16] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
        lt[8] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
        lt[1] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
        lt[3] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
        lt[4] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
        lt[31] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
        lt[35] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
        lt[36] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
        lt[37] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
        lt[38] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
        lt[45] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"];
        lt[12] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
        lt[13] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
        lt[14] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
        lt[15] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
        lt[33] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
        lt[46] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
        lt[50] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
        lt[51] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
        lt[52] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
        lt[58] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
        lt[25] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
        lt[26] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
        lt[27] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
        lt[43] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
        lt[44] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
        lt[59] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
        lt[23] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
        lt[41] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
        lt[42] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
        lt[83] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
        lt[10] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
        lt[11] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
        lt[40] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
        lt[88] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
        lt[84] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
        lt[85] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
        lt[86] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
        lt[48] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
        lt[47] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
        lt[185] = ["Dragon Orb", "You feel a great power emanating from this orb"];
        lt[149] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
        lt[175] = ["Green Gemstone", "You didn't cheat, promise?"];
        lt[176] = ["Orange Gemstone", "Only a real pirate can find it!"];
        lt[177] = ["Blue Gemstone", "For too kind people"];
        lt[77] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
        lt[78] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
        lt[79] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
        lt[180] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
        lt[181] = ["Empty Bucket", "You need to fill this bucket near a water source"];
        lt[127] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
        lt[128] = ["Empty Bottle", "You can fill this bottle near a water source"];
        lt[130] = ["Empty Watering Can", "You must fill it with a water source to use it"];
        lt[49] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
        lt[29] = ["Bag", "More space for your items!"];
        lt[120] = ["Paper", "Used in book-crafting"];
        lt[28] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
        lt[195] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
        lt[148] = ["Lock", "Allow you to lock your chest"];
        lt[158] = ["Lock-pick", "Allows you to unlock one chest"];
        lt[159] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
        lt[125] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
        lt[183] = ["Sign", "Leave a message to others", "Durability: 200"];
        lt[190] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
        lt[182] = ["Well", "Allows bottle filling", "Durability: 1000"];
        lt[162] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
        lt[163] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
        lt[164] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
        lt[165] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
        lt[122] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
        lt[160] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
        lt[168] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
        lt[169] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
        lt[170] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
        lt[123] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
        lt[166] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
        lt[171] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
        lt[172] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
        lt[173] = ["Diamond Door", "For a shining house", "Durability: 2500"];
        lt[124] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
        lt[119] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
        lt[135] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
        lt[144] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
        lt[151] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
        lt[300] = "You cannot join this server";
        lt[301] = "Kicked: ";
        lt[302] = "Your key is already used by someone else";
        lt[303] = "Your key is wrong";
        lt[304] = "You have an old version, you need to clear your cache";
        lt[338] = "Your client version is too recent for this server. The server is being updated";
        lt[339] = "Wrong password! To enter a password: https://starve.io/?password=...";
        lt[305] = "There are no more new resources";
        lt[306] = "You survived 1 day";
        lt[307] = "You survived ";
        lt[308] = " days";
        lt[309] = "You are dead ;-;";
        lt[310] = "Server cannot find spawn location! Spam the play button!";
        lt[311] = "Server is full! Spam the play button!";
        lt[312] = "Resource is empty";
        lt[313] = "Inventory is full (right-click to empty items)";
        lt[314] = " is dead";
        lt[315] = "This is not the right tool";
        lt[316] = "You joined a team";
        lt[317] = "You are dead";
        lt[318] = " joined the team";
        lt[319] = "Your team was destroyed";
        lt[320] = "You left the team";
        lt[321] = " left the team";
        lt[322] = "Someone stole your token :>";
        lt[323] = "Choose a server";
        lt[324] = "players";
        lt[325] = "total players";
        lt[326] = "players on this mode";
        lt[327] = "Coming soon...";
        document.getElementById("nickname_input").placeholder = "Nickname";
        nt[0] = ["You were killed for no reason"];
        nt[1] = ["You starved to death, as the name of the game implies"];
        nt[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
        nt[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
        nt[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
        nt[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
        nt[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
        nt[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
        nt[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
        nt[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
        nt[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
        nt[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
        nt[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
        nt[13] = ["You died of thirst. Better drink your own piss."];
        nt[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
        nt[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
        nt[16] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
        nt[17] = ["Your skin's falling apart, the sun killed you."];
        nt[18] = ["Garlic stored in your pockets boiled your brain."];
        nt[19] = ["As a vampire, don't stand near the garlic cloves."];
        nt[20] = ["You ate garlic as a vampire, what did you expect?"];
        nt[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
        ΔⵠΔΔΔ = "Uuunnnggg";
        ⵠⲆⵠⵠⵠΔⲆ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
    }
    function Os(b, c, d, e, f) {
        const g = (b + 42869) % 65363;
        const a = ~(c & 35536) & (c | 35536);
        const i = (d + 29497) % 65366;
        const j = f ^ 54380;
        return ((30183 + (no(g, a, i, e ^ 41139) ^ uk(j, g, a, i))) * 2147483629 + 2147483587) % 2147483647;
    }
    function Ps() {
        lt[184] = ["You feel a great power emanating from this orb"];
        nt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        lt[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        lt[328] = " BACK TO THE GAME";
        lt[329] = " Share on Twitter";
        lt[330] = " Share on Facebook";
        lt[331] = "You can buy items on the shop in the next game with your points";
        lt[332] = "points";
        lt[333] = "Score";
        lt[334] = "Kill";
        lt[335] = "Days survived";
        lt[336] = "Building method: Free. Press G to change";
        lt[337] = "Building method: Grid. Press G to change";
        lt[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        lt[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        lt[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        lt[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        lt[7] = ["Рука"];
        lt[140] = ["Земля", "Грязно!"];
        lt[126] = ["Песок", "Он в моих глазах!"];
        lt[109] = ["Дерево", "Постоянно нужно больше!"];
        lt[108] = ["Камень", "Твердый"];
        lt[111] = ["Золото", "Будьте щедры, давайте его другим"];
        lt[112] = ["Алмаз", "Что вы создадите с помощью него?"];
        lt[121] = ["Аметист", "Он сиреневый, как Lapa"];
        lt[131] = ["Мука", "Используется в готовке"];
        lt[133] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
        lt[136] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
        lt[116] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
        lt[117] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
        lt[137] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
        lt[138] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
        lt[143] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
        lt[145] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
        lt[200] = ["Конфеты", "Только для детей!", "Еда: 20"];
        lt[199] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
        lt[201] = ["Гирлянда", "Прекрасная декорация для крыши"];
        lt[115] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
        lt[110] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
        lt[132] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
        lt[134] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
        lt[188] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
        lt[189] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
        lt[191] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
        lt[192] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
        lt[193] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
        lt[194] = ["Колючий Куст", "Это больно!"];
        lt[141] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
        lt[142] = ["Лёд", "Используется для изготовления тортов и воды"];
        lt[55] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
        lt[174] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
        lt[2] = ["Шкура Зайца", "Этот кролик был таким милым..."];
        lt[178] = ["Чистая Шкура", "Вы - фабрика хлеба"];
        lt[179] = ["Чёрная Шкура", "Вы готовы делать зло."];
        lt[146] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
        lt[139] = ["Чешуя", "Она пахнет рыбой!"];
        lt[129] = ["Шкура Кракена", "Вы не испугались?"];
        lt[113] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
        lt[118] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
        lt[114] = ["Верстак", "Необходим для создания многих предметов"];
        lt[161] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
        lt[147] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
        lt[167] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
        lt[57] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
        lt[0] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
        lt[5] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
        lt[6] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
        lt[9] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
        lt[30] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
        lt[62] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
        lt[16] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
        lt[8] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
        lt[1] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
        lt[3] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
        lt[4] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
        lt[31] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
        lt[35] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
        lt[36] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
        lt[37] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
        lt[38] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
        lt[45] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
        lt[12] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
        lt[13] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
        lt[14] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
        lt[15] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
        lt[33] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
        lt[46] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
        lt[50] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
        lt[51] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
        lt[52] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
        lt[58] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
        lt[25] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
        lt[26] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
        lt[27] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
        lt[43] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
        lt[59] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
        lt[23] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
        lt[41] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
        lt[42] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
        lt[83] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
        lt[10] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
        lt[11] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
        lt[40] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
        lt[84] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
        lt[85] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
        lt[86] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
        lt[48] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
        lt[47] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
        lt[185] = ["Шар Дракона", "Даётся за квест"];
        lt[149] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
        lt[175] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
        lt[176] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
        lt[177] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
        lt[77] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
        lt[78] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
        lt[79] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
        lt[180] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
        lt[181] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
        lt[127] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
        lt[128] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
        lt[130] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
        lt[49] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
        lt[29] = ["Рюкзак", "Больше места для ваших предметов!"];
        lt[120] = ["Бумага", "Используется при создании книги"];
        lt[28] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
        lt[195] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
        lt[148] = ["Замок", "Позволяет вам закрыть ваш сундук"];
        lt[158] = ["Ключ", "Даёт вам открыть один запертый сундук"];
        lt[159] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
        lt[125] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
        lt[183] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
        lt[190] = ["Крыша", "Немного скрывает вас и согревает!"];
        lt[182] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
        lt[162] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
        lt[163] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
        lt[164] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
        lt[165] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
        lt[122] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
        lt[160] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
        lt[168] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
        lt[169] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
        lt[170] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
        lt[123] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
        lt[166] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
        lt[171] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
        lt[172] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
        lt[173] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
        lt[124] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
        lt[119] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
        lt[135] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
        lt[144] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
        lt[151] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
        lt[300] = "Вы не можете зайти на этот сервер";
        lt[301] = "Выгнаны: ";
        lt[302] = "Ваш ключ уже используется кем-то";
        lt[303] = "Ваш ключ неправильный";
        lt[304] = "У вас старая версия, вам нужно очистить кеш";
        lt[305] = "Ресурсов больше нет";
        lt[306] = "Вы выжили 1 день";
        lt[307] = "Вы выжили ";
        lt[308] = " дней";
        lt[309] = "Вы умерли ;-;";
        lt[310] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
        lt[311] = "Сервер заполнен! Спамьте кнопку играть!";
        lt[312] = "Ресурсы закончились";
        lt[313] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
        lt[314] = " умер";
        lt[315] = "Это не тот инструмент";
        lt[316] = "Вы вошли в команду";
        lt[317] = "Вы умерли";
        lt[318] = " вошёл в команду";
        lt[319] = "Ваша команда была разрушена";
        lt[320] = "Вы покинули команду";
        lt[321] = " покинул команду";
        lt[322] = "Кто-то использует ваш токен :>";
        lt[323] = "Выберите сервер";
        lt[324] = "игроков";
        lt[325] = "игроков всего";
        lt[326] = "игроков в этом режиме";
        lt[327] = "Скоро...";
        document.getElementById("nickname_input").placeholder = "Имя";
        nt[0] = ["Вы были убиты без причины"];
        nt[1] = ["Вы умерли от голода, как название игры подразумевает это"];
        nt[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
        nt[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
        nt[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
        nt[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
        nt[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
        nt[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
        nt[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
        nt[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
        nt[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
        nt[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
        nt[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
        nt[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
        nt[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
        nt[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
        nt[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
        nt[17] = ["Твоя кожа разваливается, солнце убило тебя"];
        nt[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
        nt[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
        nt[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
        nt[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
        ΔⵠΔΔΔ = "Uuunnnggg";
        ⵠⲆⵠⵠⵠΔⲆ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
    }
    function Qs(a, b) {
        Yj(pr, a, b);
        const c = Nn(rr[0], rr[1], rr[0]);
        Nn(rr[1], rr[0], rr[1]);
        return ~(c & 54687) & c | ~(c & 54687) & 54687;
    }
    const Rs = 12;
    function Ss() {
        lt[184] = ["You feel a great power emanating from this orb"];
        nt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        lt[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        lt[328] = " BACK TO THE GAME";
        lt[329] = " Share on Twitter";
        lt[330] = " Share on Facebook";
        lt[331] = "You can buy items on the shop in the next game with your points";
        lt[332] = "points";
        lt[333] = "Score";
        lt[334] = "Kill";
        lt[335] = "Days survived";
        lt[336] = "Building method: Free. Press G to change";
        lt[337] = "Building method: Grid. Press G to change";
        lt[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        lt[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        lt[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        lt[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        lt[7] = ["mão"];
        lt[140] = ["terra", "está sujo!"];
        lt[126] = ["areia", "entrou nos meus olhos!"];
        lt[109] = ["madeira", "você não pode pegar o suficiente disso!"];
        lt[108] = ["pedra", "também chamado rocha"];
        lt[111] = ["ouro", "seja generoso, dê para outros"];
        lt[112] = ["diamante", "o que você irá fazer com isso?"];
        lt[121] = ["ametista", "é mauve como lapa"];
        lt[131] = ["farinha", "usada na cozinha"];
        lt[133] = ["biscoito", "biscoito da vovó", "comida: 50"];
        lt[136] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
        lt[116] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
        lt[117] = ["carne assada", "um mal passado, por favor", "comida: 35"];
        lt[137] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
        lt[138] = ["peixe assado", "com limão é perfeito", "comida: 35"];
        lt[143] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
        lt[145] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
        lt[200] = ["doces", "apenas para crianças!", "comida: 100"];
        lt[199] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
        lt[201] = ["pisca-pisca", "decoração perfeita de telhado"];
        lt[115] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
        lt[110] = ["berry", "Berry saborosa!", "comida: 10"];
        lt[132] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
        lt[134] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
        lt[188] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
        lt[189] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
        lt[191] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
        lt[192] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
        lt[193] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
        lt[194] = ["mato de espinhos", "pica!"];
        lt[141] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
        lt[142] = ["gelo", "útil para fazer bolo e água"];
        lt[55] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
        lt[174] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
        lt[2] = ["pele de coelho", "o coelho era tão fofo..."];
        lt[178] = ["pele pura", "você é uma fábrica de pão"];
        lt[179] = ["pele negra", "você está pronto para fazer algo errado"];
        lt[146] = ["pele de inverno", "ele só queria um abraço"];
        lt[139] = ["escala", "é pequeno como peixe!"];
        lt[129] = ["pele do kraken", "você não está com medo?"];
        lt[113] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
        lt[118] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
        lt[114] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
        lt[161] = ["linha", "usada para fazer chapéus e mochila"];
        lt[147] = ["linha de diamante", "usada para fazer chapéus especiais"];
        lt[167] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
        lt[57] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
        lt[0] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
        lt[5] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
        lt[6] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
        lt[9] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
        lt[30] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
        lt[62] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
        lt[16] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
        lt[8] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
        lt[Lr.ⵠΔⲆⵠΔⲆᐃⲆⲆ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
        lt[3] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
        lt[4] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
        lt[31] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
        lt[35] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
        lt[36] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
        lt[37] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
        lt[38] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
        lt[45] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
        lt[12] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
        lt[13] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
        lt[14] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
        lt[15] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
        lt[33] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
        lt[46] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
        lt[50] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
        lt[51] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
        lt[52] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
        lt[58] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
        lt[25] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
        lt[26] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
        lt[27] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
        lt[43] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
        lt[59] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
        lt[23] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
        lt[41] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
        lt[42] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
        lt[83] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
        lt[10] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
        lt[11] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
        lt[40] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
        lt[84] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
        lt[85] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
        lt[86] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
        lt[48] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
        lt[47] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
        lt[185] = ["esfera do dragão", "dado na questt"];
        lt[149] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
        lt[175] = ["pedra verde", "você não vai trapacear, promete?"];
        lt[176] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
        lt[177] = ["pedra azul", "para pessoas muito gentis"];
        lt[77] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
        lt[78] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
        lt[79] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
        lt[180] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
        lt[181] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
        lt[127] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
        lt[128] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
        lt[130] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
        lt[49] = ["regador", "permite regar as plantas", "dano: 1"];
        lt[29] = ["mochila", "mais espaço para seus itens!"];
        lt[120] = ["papel", "usado para fazer o livro"];
        lt[28] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
        lt[195] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
        lt[148] = ["fechadura", "permite você trancar seu baú"];
        lt[158] = ["chave", "permite destrancar um baú"];
        lt[159] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
        lt[125] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
        lt[183] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
        lt[190] = ["telhado", "esconde você um pouco e te esquenta!"];
        lt[182] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
        lt[162] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
        lt[163] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
        lt[164] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
        lt[165] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
        lt[122] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
        lt[160] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
        lt[168] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
        lt[169] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
        lt[170] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
        lt[123] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
        lt[166] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
        lt[171] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
        lt[172] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
        lt[173] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
        lt[124] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
        lt[119] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
        lt[135] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
        lt[144] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
        lt[151] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
        lt[300] = "você não pode entrar no servidor";
        lt[301] = "kickado: ";
        lt[302] = "sua chave está em uso por outra pessoa";
        lt[303] = "sua chave está errada";
        lt[304] = "você tem uma versão velha, limpe seu cache";
        lt[305] = "não tem mais recursos";
        lt[306] = "você sobreviveu 1 dia";
        lt[307] = "você sobreviveu ";
        lt[308] = " dias";
        lt[309] = "você está morto ;-;";
        lt[310] = "servidor não pôde achar um local de spawn! spam o botão de play!";
        lt[311] = "servidor está cheio! spam o botão de play!";
        lt[312] = "não tem recursos";
        lt[313] = "inventário está cheio (botão direito para deletar itens)";
        lt[314] = " está morto";
        lt[315] = "essa não é a ferramenta certa";
        lt[316] = "você entrou no time";
        lt[317] = "você está morto";
        lt[318] = "entrou no time";
        lt[319] = "seu time foi destruido";
        lt[320] = "você saiu do time";
        lt[321] = " saiu do time";
        lt[322] = "alguém roubou sua ficha :>";
        lt[323] = "escolha um servidor";
        lt[324] = "jogadores";
        lt[325] = "jogadores totais";
        lt[326] = "jogadores nesse modo";
        lt[327] = "Coming soon...";
        document.getElementById("nickname_input").placeholder = "Apelido";
        nt[0] = ["você morreu sem motivo"];
        nt[1] = ["você morreu de fome, como o jogo diz"];
        nt[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
        nt[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
        nt[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
        nt[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
        nt[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
        nt[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
        nt[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
        nt[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
        nt[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
        nt[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
        nt[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
        nt[13] = ["você morreu de sede. melhor beber sua própria urina."];
        nt[14] = ["você sabia que você morre afogado? agora você sabe."];
        nt[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
        nt[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
        nt[17] = ["sua pele caindo aos pedaços, o sol te matou."];
        nt[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
        nt[19] = ["como vampiro, não chegue perto do alho."];
        nt[20] = ["você comeu alho como vampiro, o que você esperava?"];
        nt[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
        ΔⵠΔΔΔ = "Uuunnnggg";
        ⵠⲆⵠⵠⵠΔⲆ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
    }
    const Ts = 17;
    function Us() {
        lt[184] = ["You feel a great power emanating from this orb"];
        nt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        lt[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        lt[328] = " BACK TO THE GAME";
        lt[329] = " Share on Twitter";
        lt[330] = " Share on Facebook";
        lt[331] = "You can buy items on the shop in the next game with your points";
        lt[332] = "points";
        lt[333] = "Score";
        lt[334] = "Kill";
        lt[335] = "Days survived";
        lt[336] = "Building method: Free. Press G to change";
        lt[337] = "Building method: Grid. Press G to change";
        lt[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        lt[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        lt[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        lt[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        lt[7] = ["Mano"];
        lt[140] = ["Tierra", "¡Tan limpia como mis manos!"];
        lt[126] = ["Arena", "¡Tengo arena en mis ojos!"];
        lt[109] = ["Madera", "¡Nunca hay suficiente!"];
        lt[108] = ["Piedra", "También llamada roca."];
        lt[111] = ["Oro", "Sé generoso, compártelo con los otros"];
        lt[112] = ["Diamante", "¿Que vas a hacer con él?"];
        lt[121] = ["Amatista", "Es Mauve como Lapa"];
        lt[131] = ["Harina", "Usada para cocinar."];
        lt[133] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
        lt[136] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
        lt[116] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
        lt[117] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
        lt[137] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
        lt[138] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
        lt[143] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
        lt[145] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
        lt[200] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
        lt[199] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
        lt[201] = ["Guirnalda", "Perfecta para decorar el techo"];
        lt[115] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        lt[110] = ["Baya", "No es venenosa.", "Comida: 10"];
        lt[132] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        lt[134] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
        lt[188] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        lt[189] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
        lt[191] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
        lt[192] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
        lt[193] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
        lt[194] = ["Planta de Espinas", "¡Te daña!"];
        lt[141] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
        lt[142] = ["Hielo", "Bueno para hacer tartas y agua"];
        lt[55] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
        lt[174] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
        lt[2] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
        lt[178] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
        lt[179] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
        lt[146] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
        lt[139] = ["Escamas", "¡Huele a pescado!"];
        lt[129] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
        lt[113] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
        lt[118] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
        lt[114] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
        lt[161] = ["Hilo", "Usado para craftear ropa y mochila"];
        lt[147] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
        lt[167] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
        lt[57] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
        lt[0] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
        lt[5] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
        lt[6] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
        lt[9] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
        lt[30] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
        lt[62] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
        lt[16] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
        lt[8] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
        lt[1] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
        lt[3] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
        lt[4] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
        lt[31] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
        lt[35] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
        lt[36] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
        lt[37] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
        lt[38] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
        lt[45] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
        lt[12] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
        lt[13] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
        lt[14] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
        lt[15] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
        lt[33] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
        lt[46] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
        lt[50] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
        lt[51] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
        lt[52] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
        lt[58] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
        lt[25] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
        lt[26] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
        lt[27] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
        lt[43] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
        lt[59] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
        lt[23] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
        lt[41] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
        lt[42] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
        lt[83] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
        lt[10] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
        lt[11] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
        lt[40] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
        lt[84] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
        lt[85] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
        lt[86] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
        lt[48] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
        lt[47] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
        lt[185] = ["Esfera del Dragón", "Dada en la misión"];
        lt[149] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
        lt[175] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
        lt[176] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
        lt[177] = ["Gema Azul", "Para gente muy amable"];
        lt[77] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
        lt[78] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
        lt[79] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
        lt[180] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
        lt[181] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
        lt[127] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
        lt[128] = ["Botella Vacia", "La puedes llenar de agua"];
        lt[130] = ["Regadera Vacía", "La tienes que llenar de agua"];
        lt[49] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
        lt[29] = ["Mochila", "¡Mas espacio para tus cosas!"];
        lt[120] = ["Hoja", "Usada para hacer un libro"];
        lt[28] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
        lt[195] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
        lt[148] = ["Cerradura", "Te permite cerrar tu cofre"];
        lt[158] = ["Llave", "Te permite abrir un cofre cerrado"];
        lt[159] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
        lt[125] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
        lt[183] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
        lt[190] = ["Techo", "Te esconde un poco y te protege del frío"];
        lt[182] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
        lt[162] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
        lt[163] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
        lt[164] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
        lt[165] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
        lt[122] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
        lt[160] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
        lt[168] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
        lt[169] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
        lt[170] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
        lt[123] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
        lt[166] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
        lt[171] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
        lt[172] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
        lt[173] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
        lt[124] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
        lt[119] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
        lt[135] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
        lt[144] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
        lt[151] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
        lt[300] = "No puedes unirte a este servidor";
        lt[301] = "Expulsado: ";
        lt[302] = "Tu llave ya está usada";
        lt[303] = "Tu llave está mal";
        lt[304] = "Tienes una versión antigua, limpia tu cache";
        lt[305] = "No hay mas recursos";
        lt[306] = "Has sobrevivido 1 día";
        lt[307] = "Has sobrevivido ";
        lt[308] = " días";
        lt[309] = "Estás muerto ;-;";
        lt[310] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
        lt[311] = "El servidor esta lleno, ¡spamea el botón de jugar!";
        lt[312] = "Recurso vacio";
        lt[313] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
        lt[314] = " está muerto";
        lt[315] = "Esta no es la herramienta correcta";
        lt[316] = "Te has unido a un equipo";
        lt[317] = "Estás muerto";
        lt[318] = " se unió al equipo";
        lt[319] = "Tu equipo ha sido destruido";
        lt[320] = "Has dejado el equipo";
        lt[321] = " dejo el equipo ";
        lt[322] = "Alguien te robó tu token :>";
        lt[323] = "Elige un servidor";
        lt[324] = "jugadores";
        lt[325] = "total de jugadores";
        lt[326] = "Jugadores en este modo de juego";
        lt[327] = "Próximamente...";
        document.getElementById("nickname_input").placeholder = "Apodo";
        nt[0] = ["Has muerto por ninguna razón"];
        nt[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
        nt[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
        nt[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
        nt[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
        nt[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
        nt[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
        nt[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
        nt[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
        nt[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
        nt[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
        nt[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
        nt[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
        nt[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
        nt[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
        nt[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
        nt[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
        nt[17] = ["Tu piel se cayó, el sol te quemó."];
        nt[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
        nt[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
        nt[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
        nt[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
        ΔⵠΔΔΔ = "Uuunnnggg";
        ⵠⲆⵠⵠⵠΔⲆ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
    }
    const Vs = 18;
    const Ws = 16;
    function Xs(b, c, d, e) {
        const f = (0 << (b >> 24 & 255)) + (16 << (b >> 16 & 255)) + (8 << (b >> 8 & 255)) + (24 << (b & 255));
        const g = (2531011 + (14191 + c) * 214013) % 4294967296;
        const a = (d | 6139) & ~(d & 6139);
        const h = (12345 + (54767 + e) * 1103515245) % 2147483648;
        return ((6048 + (no(f, g, a, h) ^ no(f, g, a, h))) * 2147483629 + 2147483587) % 2147483647;
    }
    function Ys() {
        lt[184] = ["You feel a great power emanating from this orb"];
        nt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        lt[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        lt[328] = " BACK TO THE GAME";
        lt[329] = " Share on Twitter";
        lt[330] = " Share on Facebook";
        lt[331] = "You can buy items on the shop in the next game with your points";
        lt[332] = "points";
        lt[333] = "Score";
        lt[334] = "Kill";
        lt[335] = "Days survived";
        lt[336] = "Building method: Free. Press G to change";
        lt[337] = "Building method: Grid. Press G to change";
        lt[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        lt[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        lt[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        lt[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        lt[7] = ["Hand"];
        lt[140] = ["Boden", "Dreckig!"];
        lt[126] = ["Sand", "Ich habe es in meine Augen bekommen!"];
        lt[109] = ["Holz", "Du kannst niemals zu viel haben!"];
        lt[108] = ["Stein", "Auch Fels gennant"];
        lt[111] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
        lt[112] = ["Diamant", "Was wirst du daraus machen?"];
        lt[121] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
        lt[131] = ["Mehl", "wird fürs Backen gebraucht"];
        lt[133] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
        lt[136] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
        lt[116] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
        lt[117] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
        lt[137] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
        lt[138] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
        lt[143] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
        lt[145] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
        lt[200] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
        lt[199] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
        lt[201] = ["Girlande", "perfekter Schmuck für Dächer"];
        lt[115] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        lt[110] = ["Beere", "Beeren lecker!", "Essen: 10"];
        lt[132] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        lt[134] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
        lt[188] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        lt[189] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
        lt[191] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        lt[192] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
        lt[193] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
        lt[194] = ["Dornenbusch", "Es sticht!"];
        lt[141] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
        lt[142] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
        lt[55] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
        lt[174] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
        lt[2] = ["Hasenfell", "Der Hase war so süß..."];
        lt[178] = ["Klares Fell", "Du bist eine Brotfabrik"];
        lt[179] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
        lt[146] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
        lt[139] = ["Schuppen", "Es riecht wie Fisch!"];
        lt[129] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
        lt[113] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
        lt[118] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
        lt[114] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
        lt[161] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
        lt[147] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
        lt[167] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
        lt[57] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
        lt[0] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
        lt[5] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
        lt[6] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
        lt[9] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
        lt[30] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
        lt[62] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
        lt[16] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
        lt[8] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
        lt[1] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
        lt[3] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
        lt[4] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
        lt[31] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
        lt[35] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
        lt[36] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
        lt[37] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
        lt[38] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
        lt[45] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
        lt[12] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
        lt[13] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
        lt[14] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
        lt[15] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
        lt[33] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
        lt[46] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
        lt[50] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
        lt[51] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
        lt[52] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
        lt[58] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
        lt[25] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
        lt[26] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
        lt[27] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
        lt[43] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
        lt[59] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
        lt[23] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
        lt[41] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
        lt[42] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
        lt[83] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
        lt[10] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
        lt[11] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
        lt[40] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
        lt[84] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
        lt[85] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
        lt[86] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
        lt[48] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
        lt[47] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        lt[185] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
        lt[149] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
        lt[175] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
        lt[176] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
        lt[177] = ["Blauer Edelstein", "Für sehr nette Leute"];
        lt[77] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        lt[78] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        lt[79] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        lt[180] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
        lt[181] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
        lt[127] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
        lt[128] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
        lt[130] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
        lt[49] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
        lt[29] = ["Rucksack", "Mehr Platz im Inventar!"];
        lt[120] = ["Papier", "Wird fürs Büchermachen verwendet"];
        lt[28] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
        lt[195] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
        lt[148] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
        lt[158] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
        lt[159] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
        lt[125] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
        lt[183] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
        lt[190] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
        lt[182] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
        lt[162] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
        lt[163] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
        lt[164] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
        lt[165] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
        lt[122] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
        lt[160] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
        lt[168] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
        lt[169] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
        lt[170] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
        lt[123] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
        lt[166] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
        lt[171] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
        lt[172] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
        lt[173] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
        lt[124] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
        lt[119] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
        lt[135] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
        lt[144] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
        lt[151] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
        lt[300] = "Du kannst diesem Server nicht beitreten";
        lt[301] = "Gekickt: ";
        lt[302] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
        lt[303] = "Dein Schlüssel ist falsch";
        lt[304] = "Deine Version ist veraltet, säubere dein Cache";
        lt[305] = "Es gibt keine neuen Ressourcen";
        lt[306] = "Du hast einen Tag überlebt";
        lt[307] = "Du hast überlebt ";
        lt[308] = " Tage";
        lt[309] = "Du bist gestorben ;-;";
        lt[310] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
        lt[311] = "Server ist voll! Drücke immer wieder auf spielen!";
        lt[312] = "Ressource ist leer";
        lt[313] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
        lt[314] = " ist gestorben";
        lt[315] = "Das ist nicht das richtige Werkzeug";
        lt[316] = "Du bist einem Team beigetreten";
        lt[317] = "Du bist gestorben";
        lt[318] = " ist dem Team beigetreten";
        lt[319] = "Dein Team wurde zerstört";
        lt[320] = "Du hast das Team verlassen";
        lt[321] = " hat das Team verlassen";
        lt[322] = "Jemand hat dein Token gestohlen :>";
        lt[323] = "Suche dir ein Server aus";
        lt[324] = "Spieler";
        lt[325] = "alle Spieler";
        lt[326] = "Spieler in diesem Modus";
        lt[327] = "Bald verfügbar...";
        document.getElementById("nickname_input").placeholder = "Spitzname";
        nt[0] = ["Du wurdest ohne Grund getötet"];
        nt[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
        nt[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
        nt[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
        nt[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
        nt[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
        nt[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
        nt[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
        nt[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
        nt[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
        nt[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
        nt[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
        nt[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
        nt[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
        nt[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
        nt[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
        nt[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
        nt[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
        nt[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
        nt[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
        nt[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
        nt[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
        ΔⵠΔΔΔ = "Uuunnnggg";
        ⵠⲆⵠⵠⵠΔⲆ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
    }
    const Zs = 8;
    const $s = 10;
    function _s() {
        lt[184] = ["You feel a great power emanating from this orb"];
        nt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        lt[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        lt[328] = " BACK TO THE GAME";
        lt[329] = " Share on Twitter";
        lt[330] = " Share on Facebook";
        lt[331] = "You can buy items on the shop in the next game with your points";
        lt[332] = "points";
        lt[333] = "Score";
        lt[334] = "Kill";
        lt[335] = "Days survived";
        lt[336] = "Building method: Free. Press G to change";
        lt[337] = "Building method: Grid. Press G to change";
        lt[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        lt[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        lt[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        lt[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        lt[7] = ["Ręka"];
        lt[140] = ["Ziemia", "Brudna!"];
        lt[126] = ["Piasek", "Mam go w oczach!"];
        lt[109] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
        lt[108] = ["Kamień", "Także nazywany skałą"];
        lt[111] = ["Złoto", "Bądź hojny, daj trochę innym"];
        lt[112] = ["Diament", "Co z nim zrobisz?"];
        lt[121] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
        lt[131] = ["Mąka", "Używana w gotowaniu"];
        lt[133] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
        lt[136] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
        lt[116] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
        lt[117] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
        lt[137] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
        lt[138] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
        lt[143] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
        lt[145] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
        lt[200] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
        lt[199] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
        lt[201] = ["Girlanda", "Idealna do dekorowania dachów"];
        lt[115] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        lt[110] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
        lt[132] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        lt[134] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
        lt[188] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        lt[189] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
        lt[191] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        lt[192] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
        lt[193] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
        lt[194] = ["Kolczasty krzew", "Kłuje!"];
        lt[141] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
        lt[142] = ["Lód", "Użyteczny do robienia ciast i wody"];
        lt[55] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
        lt[174] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
        lt[2] = ["Skóra królika", "Ten królik był taki słodziutki..."];
        lt[178] = ["Skóra", "Jesteś fabryką chleba"];
        lt[179] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
        lt[146] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
        lt[139] = ["Łuski", "Pachnie jak ryba!"];
        lt[129] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
        lt[113] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
        lt[118] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
        lt[114] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
        lt[161] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
        lt[147] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
        lt[167] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
        lt[57] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
        lt[0] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
        lt[5] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
        lt[6] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
        lt[9] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
        lt[30] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
        lt[62] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
        lt[16] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
        lt[8] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
        lt[1] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
        lt[3] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
        lt[4] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
        lt[31] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
        lt[35] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
        lt[36] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
        lt[37] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
        lt[38] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
        lt[45] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
        lt[12] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
        lt[13] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
        lt[14] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
        lt[15] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
        lt[33] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
        lt[46] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
        lt[50] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
        lt[51] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
        lt[52] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
        lt[58] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
        lt[25] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
        lt[26] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
        lt[27] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
        lt[43] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
        lt[59] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
        lt[23] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
        lt[41] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
        lt[42] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
        lt[83] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
        lt[10] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
        lt[11] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
        lt[40] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
        lt[84] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
        lt[85] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
        lt[86] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
        lt[48] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
        lt[47] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        lt[185] = ["Smocza kula", "Zdobyta podczas zadania"];
        lt[149] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
        lt[175] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
        lt[176] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
        lt[177] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
        lt[77] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        lt[78] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        lt[79] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        lt[180] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
        lt[181] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
        lt[127] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
        lt[128] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
        lt[130] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
        lt[49] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
        lt[29] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
        lt[120] = ["Papier", "Używany w tworzeniu książki"];
        lt[28] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
        lt[195] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
        lt[148] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
        lt[158] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
        lt[159] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
        lt[125] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
        lt[183] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
        lt[190] = ["Dach", "Trochę cie ogrzewa i chowa!"];
        lt[182] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
        lt[162] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
        lt[163] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
        lt[164] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
        lt[165] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
        lt[122] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
        lt[160] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
        lt[168] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
        lt[169] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
        lt[170] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
        lt[123] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
        lt[166] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
        lt[171] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
        lt[172] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
        lt[173] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
        lt[124] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
        lt[119] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
        lt[135] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
        lt[144] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
        lt[151] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
        lt[300] = "Nie możesz dołączyć do tego serwera";
        lt[301] = "Wyrzucony: ";
        lt[302] = "Twój klucz jest aktualnie używany przez innego gracza";
        lt[303] = "Twój klucz jest nieprawidłowy";
        lt[304] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
        lt[305] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
        lt[306] = "Przeżyłeś 1 dzień";
        lt[307] = "Przeżyłeś ";
        lt[308] = " dni";
        lt[309] = "Jesteś martwy ;-;";
        lt[310] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
        lt[311] = "Serwer jest pełny! Spamuj przycisk zagraj!";
        lt[312] = "Źródło jest puste";
        lt[313] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
        lt[314] = " jest martwy";
        lt[315] = "To nie jest właściwe narzędzie";
        lt[316] = "Dołączyłeś do drużyny";
        lt[317] = "Jesteś martwy";
        lt[318] = " dołączył do drużyny";
        lt[319] = "Twoja drużyna została zniszczona";
        lt[320] = " Opuściłeś drużynę";
        lt[321] = " opuścił drużynę";
        lt[322] = "Ktoś ukradł twój żeton :>";
        lt[323] = "Wybierz serwer";
        lt[324] = "graczy";
        lt[325] = "wszystkich graczy";
        lt[326] = "graczy w tym trybie";
        lt[327] = "Już wkrótce...";
        document.getElementById("nickname_input").placeholder = "Przydomek";
        nt[0] = ["Zostałeś zabity bez powodu"];
        nt[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
        nt[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
        nt[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
        nt[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
        nt[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
        nt[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
        nt[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
        nt[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
        nt[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
        nt[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
        nt[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
        nt[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
        nt[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
        nt[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
        nt[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
        nt[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
        nt[17] = ["Twoja skóra odpada, słońce cię zabija."];
        nt[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
        nt[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
        nt[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
        nt[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
        ΔⵠΔΔΔ = "Uuunnnggg";
        ⵠⲆⵠⵠⵠΔⲆ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
    }
    const at = 15;
    function bt(b, c, d) {
        const e = b ^ 63634;
        const f = (c | 4723) & ~(c & 4723);
        const g = ~(d & 6440) & 6440 | ~(d & 6440) & d;
        const a = function (b, c, d, e, f, i) {
            const a = ((b + 26740) * 1664525 + 1013904223) % 4294967296;
            const j = (0 << (c >> 0 & 255)) + (8 << (c >> 8 & 255)) + (24 << (c >> 24 & 255)) + (16 << (c >> 16 & 255));
            const k = (16 << (f >> 24 & 255)) + (24 << (f >> 8 & 255)) + (8 << (f >> 16 & 255)) + (0 << (f & 255));
            const h = (2531011 + (i + 46278) * 214013) % 4294967296;
            const l = uk(a, j, ~(d & 51888) & (d | 51888), e ^ 18545);
            const g = Jk(k, h, a, j);
            return (24 << ((l ^ g) >> 16 & 255)) + (16 << ((l ^ g) >> 24 & 255)) + (8 << ((l ^ g) >> 0 & 255)) + (0 << ((l ^ g) >> 8 & 255));
        }(e, f, g, e, f, g);
        gf(e, f, g, e, f, g);
        return ~(a & 61065) & a | ~(a & 61065) & 61065;
    }
    const ct = 15;
    function dt() {
        lt[184] = ["You feel a great power emanating from this orb"];
        nt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        lt[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        lt[328] = " RETOUR AU JEU";
        lt[329] = " Partage sur Twitter";
        lt[330] = " Partage sur Facebook";
        lt[331] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
        lt[332] = "points";
        lt[333] = "Score";
        lt[334] = "Tués";
        lt[335] = "Jours survécus";
        lt[336] = "Mode de construction: Libre. Appuie sur G pour changer";
        lt[337] = "Mode de construction: Grille. Appuie sur G pour changer";
        lt[197] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
        lt[18] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
        lt[61] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
        lt[198] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quêtes";
        document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
        document.getElementById("constraintquest").innerHTML = " Contraintes";
        document.getElementById("claim_rewards").innerHTML = " Résultat";
        document.getElementById("rewardquest").innerHTML = " Récompenses";
        document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
        document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
        document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
        document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
        document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
        document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
        document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "RÉCOMPENSE!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
        lt[7] = ["Main"];
        lt[140] = ["Terre", "C'est sale!"];
        lt[126] = ["Sable", "J'en ai dans les yeux"];
        lt[109] = ["Bois", "Tu n'en auras jamais trop!"];
        lt[108] = ["Pierre", "Aussi appelée roche"];
        lt[111] = ["Or", "Sois généreux, donne en aux autres"];
        lt[112] = ["Diamant", "Comme tes yeux! wesh"];
        lt[121] = ["Améthyste", "C'est Mauve comme Lapa"];
        lt[131] = ["Farine", "Utile pour la cuisine"];
        lt[133] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
        lt[136] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
        lt[116] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
        lt[117] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
        lt[137] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
        lt[138] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
        lt[143] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
        lt[145] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
        lt[200] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
        lt[199] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
        lt[201] = ["Guirlandes", "Utilisable sur les toits"];
        lt[115] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
        lt[110] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
        lt[132] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
        lt[134] = ["Blé", "Peut être transformé en farine dans les moulins"];
        lt[188] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
        lt[189] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
        lt[191] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
        lt[192] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
        lt[193] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
        lt[194] = ["Ronces", "Ça pique!"];
        lt[141] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
        lt[142] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
        lt[55] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
        lt[174] = ["Peau de loup", "Il était où le gentil ti Youki?"];
        lt[2] = ["Peau de lapin", "Vous êtes un monstre"];
        lt[178] = ["Fourrure blanche", "Tu es une usine à pain"];
        lt[179] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
        lt[146] = ["Fourrure d'hiver", "Il voulait juste un calin"];
        lt[139] = ["Écailles", "Ça sent le poisson!"];
        lt[129] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
        lt[113] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
        lt[118] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
        lt[114] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
        lt[161] = ["Fil", "Utile pour faire des chapeaux et un sac"];
        lt[147] = ["Fil de diamant", "Utile pour faire des chapeaux"];
        lt[167] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
        lt[57] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
        lt[0] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
        lt[5] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
        lt[6] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
        lt[9] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
        lt[30] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
        lt[62] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
        lt[16] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
        lt[8] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
        lt[1] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
        lt[3] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
        lt[4] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
        lt[31] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
        lt[35] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
        lt[36] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
        lt[37] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
        lt[38] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
        lt[45] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
        lt[12] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
        lt[13] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
        lt[14] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
        lt[15] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
        lt[33] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
        lt[46] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
        lt[50] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
        lt[51] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
        lt[52] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
        lt[58] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
        lt[25] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
        lt[26] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
        lt[27] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
        lt[43] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
        lt[59] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
        lt[23] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
        lt[41] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
        lt[42] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
        lt[83] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
        lt[10] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
        lt[11] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
        lt[40] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
        lt[84] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
        lt[85] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
        lt[86] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
        lt[48] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
        lt[47] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
        lt[185] = ["Orbe du Dragon", "Donné en Quête"];
        lt[149] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
        lt[175] = ["Gemme verte", "Tu n'as pas triché, promis?"];
        lt[176] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
        lt[177] = ["Gemme bleue", "Pour les gens trop gentils"];
        lt[77] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
        lt[78] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
        lt[79] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
        lt[180] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
        lt[181] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
        lt[127] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
        lt[128] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
        lt[130] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
        lt[49] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
        lt[29] = ["Sac", "Plus de place dans ton inventaire!"];
        lt[120] = ["Papier", "Pour fabriquer toute sorte d'objets"];
        lt[28] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
        lt[195] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
        lt[148] = ["Cadenas", "Pour verrouiller un coffre"];
        lt[158] = ["Clé", "Pour déverrouiller un coffre"];
        lt[159] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
        lt[125] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
        lt[183] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
        lt[190] = ["Toit", "Te cache un peu et te réchauffe"];
        lt[182] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
        lt[162] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
        lt[163] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
        lt[164] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
        lt[165] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
        lt[122] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
        lt[160] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
        lt[168] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
        lt[169] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
        lt[170] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
        lt[123] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
        lt[166] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
        lt[171] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
        lt[172] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
        lt[173] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
        lt[124] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
        lt[119] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
        lt[135] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
        lt[144] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
        lt[151] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
        lt[300] = "Tu ne peux pas rejoindre le serveur";
        lt[301] = "Expulsé: ";
        lt[302] = "Ta clé est déjà utilisée par quelqu'un d'autre";
        lt[303] = "Ta clé est fausse";
        lt[304] = "Tu as une vieille version, rafraichis tes caches";
        lt[305] = "Il n'y a plus de nouvelles ressources";
        lt[306] = "Tu as survécu 1 jour";
        lt[307] = "Tu as survécu ";
        lt[308] = " jours";
        lt[309] = "Tu es mort ;-;";
        lt[310] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
        lt[311] = "Le serveur est complet! Spam le bouton jouer";
        lt[312] = "Cette ressource est vide";
        lt[313] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
        lt[314] = " est mort";
        lt[315] = "Ce n'est pas le bon outil";
        lt[316] = "Tu as rejoins une équipe";
        lt[317] = "Tu es mort";
        lt[318] = " a rejoint l'équipe";
        lt[319] = "Ton équipe a été détruite";
        lt[320] = "Tu as quitté l'équipe";
        lt[321] = " a quitté l'équipe";
        lt[322] = "Quelqu'un a volé ton token :>";
        lt[323] = "Choisis un serveur";
        lt[324] = "joueurs";
        lt[325] = "joueurs";
        lt[326] = "joueurs dans ce mode";
        lt[327] = "Bientôt...";
        document.getElementById("nickname_input").placeholder = "Surnom";
        nt[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
        nt[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
        nt[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
        nt[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
        nt[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
        nt[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
        nt[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
        nt[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
        nt[8] = ["Cet ours voulait juste un câlin."];
        nt[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
        nt[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
        nt[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
        nt[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
        nt[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
        nt[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
        nt[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
        nt[16] = ["Un kraken a 'kraké' tes os."];
        nt[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
        nt[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
        nt[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
        nt[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
        nt[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
        ΔⵠΔΔΔ = "Uuunnnggg";
        ⵠⲆⵠⵠⵠΔⲆ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
    }
    const et = 18;
    const ft = 4;
    const gt = 13;
    const ht = 9;
    const it = 14;
    function jt(a) {
        return function (a, b) {
            const c = ~(a & 22750) & (a | 22750);
            const d = b ^ 47497;
            const e = wk(c, d, c, d);
            (function (b, c, d, e, f) {
                const g = (1013904223 + (d + 64848) * 1664525) % 4294967296;
                const a = ((15809 + e) * 2147483629 + 2147483587) % 2147483647;
                const i = (2531011 + (f + 15508) * 214013) % 4294967296;
                const j = Rw((0 << (b >> 24 & 255)) + (24 << (b >> 0 & 255)) + (16 << (b >> 16 & 255)) + (8 << (b >> 8 & 255)), ((c + 12283) * 1103515245 + 12345) % 2147483648);
                const h = bt(g, a, i);
            })(c, d, c, d, c);
            return e ^ 16460;
        }(a, 53826);
    }
    function kt(c, d, e, f, i, j) {
        const a = c ^ 30264;
        const k = ~(e & 29663) & e | ~(e & 29663) & 29663;
        const m = ((i + 53350) * 2147483629 + 2147483587) % 2147483647;
        const h = ~(a & 44284) & (a | 44284);
        const l = ((26083 + ((0 << ((h ^ k) >> 8 & 255)) + (16 << ((h ^ k) >> 16 & 255)) + (8 << ((h ^ k) & 255)) + (24 << ((h ^ k) >> 24 & 255)) ^ (0 << (f >> 16 & 255)) + (8 << (f >> 8 & 255)) + (16 << (f & 255)) + (24 << (f >> 24 & 255)))) * 1103515245 + 12345) % 2147483648;
        const g = (24 << ((l ^ m) >> 24 & 255)) + (16 << ((l ^ m) >> 16 & 255)) + (8 << ((l ^ m) & 255)) + (0 << ((l ^ m) >> 8 & 255));
        return ~(g & 63202) & g | ~(g & 63202) & 63202;
    }
    var lt = [];
    for (var mt = 0; mt < 344; mt++) {
        lt[mt] = "";
    }
    var nt = [];
    const ot = 10;
    $(".md-languages").on("click", function () {
        $(this).toggleClass("active");
    });
    const pt = 1;
    $(".md-languages ul li").on("click", function () {
        var a = $(this).text();
        if (a === "English") {
            Ns();
        } else if (a === "Français") {
            dt();
        } else if (a === "Deutsch") {
            Ys();
        } else if (a === "Español") {
            Us();
        } else if (a === "Português") {
            Ss();
        } else if (a === "Русский") {
            Ps();
        } else if (a === "Polski") {
            _s();
        }
        ΔⵠΔᐃⲆ = [];
        Ww.ΔΔⵠᐃ.label = [];
        $(".md-languages ul li").removeClass("active");
        $(this).addClass("active");
        $(".md-languages label button").text(a);
    });
    var qt;
    dr = "EN";
    switch (navigator.language || navigator.userLanguage) {
        case "ru":
            dr = "RU";
            break;
        case "en":
            dr = "EN";
            break;
        case "es":
            dr = "SP";
            break;
        case "fr":
            dr = "FR";
            break;
        case "pl":
            dr = "PL";
            break;
        case "de":
            dr = "DE";
            break;
        case "pt":
            dr = "PT";
    }
    if (dr === "FR") {
        $(".md-languages label button").text("Français");
        qt = dt;
    } else if (dr === "PL") {
        $(".md-languages label button").text("Polski");
        qt = _s;
    } else if (dr === "PT") {
        $(".md-languages label button").text("Português");
        qt = Ss;
    } else if (dr === "SP") {
        $(".md-languages label button").text("Español");
        qt = Us;
    } else if (dr === "RU") {
        $(".md-languages label button").text("Русский");
        qt = Ps;
    } else if (dr === "DE") {
        $(".md-languages label button").text("Deutsch");
        qt = Ys;
    } else {
        $(".md-languages label button").text("English");
        qt = Ns;
    }
    const rt = 255;
    const st = 3;
    ⲆⲆ = {
        ⵠᐃⵠⵠⵠⲆⲆᐃΔ: "img/logo.png",
        ᐃⲆⲆᐃΔΔⵠ: "img/mapday.png",
        ΔⵠΔⲆⲆⵠΔ: "img/mapnight.png",
        ⵠᐃⵠΔΔⵠΔΔⲆ: "img/bigzday.png",
        ᐃⲆᐃΔᐃⵠᐃⲆⲆ: "img/bigznight.png",
        ΔᐃⲆⵠᐃᐃⲆ: "img/bigday-river1.png",
        ᐃⵠΔᐃⵠⵠΔⲆⲆ: "img/bigday-lake.png",
        ᐃⵠⲆᐃⵠᐃᐃ: "img/bigday-berry.png",
        ΔⲆⵠΔᐃᐃΔ: "img/bigday-stone1.png",
        ᐃΔⲆΔΔⲆⲆ: "img/bigday-stone2.png",
        ᐃⲆⲆᐃᐃᐃᐃ: "img/bigday-gold1.png",
        ⲆⲆΔᐃᐃⲆᐃ: "img/bigday-gold2.png",
        ⵠΔⲆᐃΔⵠᐃ: "img/bigday-emerald1.png",
        ⲆⲆⲆⵠΔⵠᐃ: "img/bigday-emerald2.png",
        ⲆⵠⲆΔᐃⲆⵠ: "img/bigday-amethyst.png",
        ⵠᐃΔⲆⵠⵠΔ: "img/bigday-bear.png",
        ᐃᐃΔⲆⵠⲆⲆ: "img/bigday-cave.png",
        ΔⲆⵠΔᐃⲆⲆ: "img/bigday-diamond.png",
        ΔⲆΔΔΔⲆⲆ: "img/bigday-island.png",
        ᐃⲆⲆⵠΔⲆΔ: "img/bigday-reidite.png",
        ᐃⵠⵠᐃⵠⲆⲆ: "img/bigday-spider.png",
        ᐃⲆΔΔⵠΔᐃ: "img/bigday-wolf.png",
        ⲆⲆⵠⲆⵠᐃⵠ: "img/bigday-fir-tree.png",
        ΔⵠⵠᐃᐃⵠΔ: "img/bigday-fox.png",
        ⲆᐃᐃΔⲆᐃΔ: "img/bigday-kraken.png",
        ᐃᐃᐃⲆΔⵠΔ: "img/bigday-piranha.png",
        ⵠΔⲆⲆⵠⲆᐃ: "img/bigday-cactus.png",
        ᐃΔᐃⵠⵠᐃⲆ: "img/bigday-magma.png",
        ᐃΔⵠⲆⲆᐃΔ: "img/bigday-river1.png",
        ⲆᐃⲆᐃⵠΔΔⵠᐃ: "img/bignight-lake.png",
        ᐃΔᐃᐃΔⵠⲆᐃᐃ: "img/bignight-berry.png",
        ΔⵠΔⲆΔΔΔ: "img/bignight-stone1.png",
        ΔⵠΔᐃⲆᐃⵠ: "img/bignight-stone2.png",
        ᐃⲆᐃΔⵠⲆⵠ: "img/bignight-gold1.png",
        ⲆᐃⲆⲆᐃⲆᐃ: "img/bignight-gold2.png",
        ΔΔᐃᐃΔⲆᐃ: "img/bignight-emerald1.png",
        ⲆΔⲆΔⲆⵠΔ: "img/bignight-emerald2.png",
        ⵠⵠⲆⵠᐃⵠΔ: "img/bignight-amethyst.png",
        ⲆΔⲆᐃΔΔΔ: "img/bignight-bear.png",
        ᐃⲆⵠΔᐃΔΔ: "img/bignight-cave.png",
        ᐃⵠⲆⲆᐃⲆΔ: "img/bignight-diamond.png",
        ᐃⲆⵠⵠⵠΔΔ: "img/bignight-island.png",
        ⲆⲆΔⲆᐃᐃᐃ: "img/bignight-reidite.png",
        ⵠⵠΔⵠΔⲆⵠ: "img/bignight-spider.png",
        ⲆⵠᐃⲆᐃΔⲆ: "img/bignight-wolf.png",
        ΔΔⲆⵠⲆⵠᐃ: "img/bignight-fir-tree.png",
        ᐃᐃⵠⵠⵠⲆⵠ: "img/bignight-fox.png",
        ᐃᐃᐃΔΔΔⲆ: "img/bignight-kraken.png",
        ⲆᐃⲆⵠᐃⵠⵠ: "img/bignight-piranha.png",
        ᐃⲆⵠᐃᐃⲆⵠ: "img/bignight-cactus.png",
        ᐃΔⲆᐃⲆᐃⲆ: "img/bignight-magma.png",
        ⲆᐃΔⵠᐃΔⵠ: "img/bigday-desert.png",
        ᐃⵠⲆᐃⲆᐃΔ: "img/bigday-winter.png",
        ⵠⵠΔⲆΔⲆⵠ: "img/bigday-lava.png",
        ΔΔⲆΔⵠⵠᐃ: "img/bigday-forest.png",
        ΔΔΔΔΔΔΔ: "img/bignight-desert.png",
        ⵠⲆⲆⵠⵠΔⵠ: "img/bignight-winter.png",
        ⲆΔⲆΔΔⵠΔ: "img/bignight-lava.png",
        ΔᐃΔⲆᐃⲆⲆ: "img/bignight-forest.png",
        ⵠΔᐃᐃΔΔᐃ: "img/day-river-wave.png",
        ΔⲆⲆⲆᐃΔⵠ: "img/night-river-wave.png",
        ᐃᐃᐃⲆⲆᐃᐃ: "img/day-fog0.png",
        ΔᐃⵠᐃⲆΔⲆ: "img/day-fog1.png",
        ΔⲆⲆⲆⲆᐃⲆ: "img/day-fog2.png",
        ΔᐃΔⵠⵠᐃΔ: "img/night-fog0.png",
        ᐃΔⲆⲆⲆΔⵠ: "img/night-fog1.png",
        ⲆΔⲆᐃⲆⵠΔ: "img/night-fog2.png",
        ⲆⲆⲆΔⵠᐃᐃ: "img/day-fogdesert0.png",
        ⵠΔⵠⲆᐃΔⵠ: "img/day-fogdesert1.png",
        ΔⵠᐃⵠⵠᐃΔ: "img/day-fogdesert2.png",
        ⵠⵠΔᐃⲆⲆᐃ: "img/night-fogdesert0.png",
        ⵠⲆⵠⵠⲆⲆⲆ: "img/night-fogdesert1.png",
        ᐃⵠⵠⵠⵠⲆⲆ: "img/night-fogdesert2.png",
        ⲆⵠΔⲆⲆⲆⵠ: "img/day-cross-server.png",
        ΔΔΔⵠⲆᐃⵠ: "img/day-here-server.png",
        ⵠΔᐃⲆᐃⵠⲆ: "img/day-finish-server.png",
        ΔΔⵠΔⲆⲆΔ: "img/day-item-server.png",
        ΔⵠᐃΔⲆΔΔ: "img/day-skull-server.png",
        ⵠᐃᐃᐃⵠᐃⵠ: "img/night-cross-server.png",
        ⲆⲆⵠⵠⵠⲆⵠ: "img/night-here-server.png",
        ⵠΔⵠᐃΔⵠⲆ: "img/night-finish-server.png",
        ΔⲆΔΔᐃᐃΔ: "img/night-item-server.png",
        ⵠᐃⲆΔΔΔⲆ: "img/night-skull-server.png",
        ⵠᐃᐃⲆⲆᐃⵠ: "img/day-reidite0.png",
        ⲆⵠᐃⵠⵠΔΔ: "img/night-reidite0.png",
        ⵠᐃᐃᐃΔᐃⲆ: "img/day-reidite1.png",
        ⲆⵠⵠⲆΔΔᐃ: "img/night-reidite1.png",
        ΔⲆⵠⵠᐃΔⵠ: "img/day-reidite2.png",
        ⵠᐃⲆᐃᐃᐃⲆ: "img/night-reidite2.png",
        ⲆΔⲆΔⵠⲆᐃ: "img/day-lava1.png",
        ΔⵠᐃⵠⲆⲆⲆ: "img/night-lava1.png",
        ΔⲆᐃⵠⵠⲆⵠ: "img/day-lava2.png",
        ⵠΔΔΔᐃⵠᐃ: "img/night-lava2.png",
        ᐃⵠⵠⵠΔⲆᐃ: "img/day-lava3.png",
        ᐃΔⲆᐃⲆᐃⵠ: "img/night-lava3.png",
        ⵠⲆⵠⵠΔᐃⵠ: "img/day-lava4.png",
        ⲆⵠΔⲆⵠⵠΔ: "img/night-lava4.png",
        ΔⵠⵠΔΔᐃᐃ: "img/day-lava5.png",
        ⵠᐃⵠΔⵠᐃⵠ: "img/night-lava5.png",
        ⵠᐃΔⵠⵠᐃΔ: "img/day-lava6.png",
        ⲆⲆⲆᐃⵠⵠΔ: "img/night-lava6.png",
        ΔΔΔΔⵠᐃΔ: "img/day-lava-ground1.png",
        ᐃΔᐃⲆⲆⲆΔ: "img/night-lava-ground1.png",
        ᐃⵠⲆⲆⵠⵠⵠ: "img/day-lava-ground2.png",
        ᐃΔⲆΔᐃⵠⵠ: "img/night-lava-ground2.png",
        ⲆⲆΔΔΔⵠΔ: "img/day-lava-ground3.png",
        ⲆⵠⲆᐃΔᐃⲆ: "img/night-lava-ground3.png",
        ⵠⵠⵠⵠᐃⵠⵠ: "img/day-lava-ground4.png",
        ᐃΔⲆᐃΔᐃⵠ: "img/night-lava-ground4.png",
        ⲆᐃΔᐃΔⲆⵠ: "img/day-lava-ground5.png",
        ᐃⲆⲆᐃΔⲆᐃ: "img/night-lava-ground5.png",
        ⲆᐃⵠⲆⲆΔⲆ: "img/day-lava-ground6.png",
        ᐃⵠΔΔᐃⲆᐃ: "img/night-lava-ground6.png",
        ΔⵠΔⵠⲆᐃⵠ: "img/day-fire-mob.png",
        ⲆⲆⵠΔΔΔΔ: "img/night-fire-mob.png",
        ⵠⲆⲆΔⲆⲆⲆ: "img/hurt-fire-mob.png",
        ⵠᐃⵠⲆᐃⲆᐃ: "img/day-diamond-protection.png",
        ΔΔΔᐃⵠΔⲆ: "img/night-diamond-protection.png",
        ΔⲆᐃᐃⲆⲆΔ: "img/day-hand-diamond-protection.png",
        ⵠΔⲆⵠⲆⲆᐃ: "img/night-hand-diamond-protection.png",
        ΔᐃⵠⲆⵠᐃⵠ: "img/inv-diamond-protection-out.png",
        ᐃⲆᐃᐃⵠⵠᐃ: "img/inv-diamond-protection-in.png",
        ᐃⲆᐃᐃⵠᐃⵠ: "img/inv-diamond-protection-click.png",
        ΔⲆⵠⵠΔⵠᐃ: "img/day-amethyst-protection.png",
        ⵠᐃⲆᐃΔΔⵠ: "img/night-amethyst-protection.png",
        ΔⵠΔⲆⲆⵠⵠⲆᐃ: "img/day-hand-amethyst-protection.png",
        ⲆⲆΔᐃΔⲆΔⵠⲆ: "img/night-hand-amethyst-protection.png",
        ⲆᐃⲆᐃⲆΔⲆ: "img/inv-amethyst-protection-out.png",
        ᐃᐃⲆΔⵠⵠⲆ: "img/inv-amethyst-protection-in.png",
        ΔᐃᐃⲆⲆⵠⲆ: "img/inv-amethyst-protection-click.png",
        ⵠⲆΔΔΔⲆΔ: "img/day-reidite-sword.png",
        ᐃΔⵠΔᐃⲆΔ: "img/night-reidite-sword.png",
        ⵠᐃⵠΔⵠⵠᐃ: "img/inv-reidite-sword-out.png",
        ⲆᐃⵠΔⵠᐃᐃ: "img/inv-reidite-sword-in.png",
        ᐃΔⲆΔⵠⲆΔ: "img/inv-reidite-sword-click.png",
        ⲆΔΔᐃⵠⲆⵠ: "img/inv-reidite-out.png",
        ᐃᐃΔⵠΔⲆΔ: "img/inv-reidite-in.png",
        ⵠⵠⵠⲆᐃΔΔ: "img/inv-reidite-click.png",
        ⲆⲆⲆⲆΔᐃΔ: "img/inv-flame-out.png",
        ⲆⵠⵠᐃᐃⲆᐃ: "img/inv-flame-in.png",
        ᐃⲆΔΔⲆᐃⵠ: "img/inv-flame-click.png",
        ⵠⵠΔΔⲆᐃΔ: "img/day-magma-buble0.png",
        ⲆⵠⵠⵠⲆⵠΔ: "img/night-magma-buble0.png",
        ⲆΔⵠΔⲆᐃᐃ: "img/day-magma-buble1.png",
        ᐃⵠᐃⲆᐃᐃⲆ: "img/night-magma-buble1.png",
        ᐃⲆⲆⵠⵠⲆΔ: "img/day-magma-buble2.png",
        ΔᐃⵠⲆΔⵠⲆ: "img/night-magma-buble2.png",
        ΔΔᐃⲆⲆΔⵠ: "img/day-lava-dragon.png",
        ΔΔᐃⵠⵠⲆⲆ: "img/night-lava-dragon.png",
        ⲆⲆⲆᐃΔⵠⲆΔⲆ: "img/day-fire-dragon.png",
        ΔⵠⵠⲆⵠⲆⵠᐃⲆ: "img/night-fire-dragon.png",
        ⵠⵠⲆⲆⵠⲆⲆ: "img/hurt-lava-dragon.png",
        ⵠⵠΔᐃᐃⵠⲆ: "img/day-lava-wing-left.png",
        ΔΔΔⲆΔⵠⵠ: "img/night-lava-wing-left.png",
        ⲆΔΔᐃΔⲆΔ: "img/day-lava-wing-right.png",
        ΔⵠᐃᐃΔⵠᐃ: "img/night-lava-wing-right.png",
        ⵠᐃⲆᐃᐃⲆᐃ: "img/hurt-lava-wing-left.png",
        ⲆᐃⲆⵠⲆⲆᐃ: "img/hurt-lava-wing-right.png",
        ⲆⲆΔⲆⵠⲆⵠ: "img/day-reidite-spear.png",
        ΔᐃΔⵠΔⵠⵠ: "img/night-reidite-spear.png",
        ΔⵠⲆᐃᐃⲆᐃ: "img/inv-reidite-spear-out.png",
        ΔᐃⲆⲆⵠⵠⲆ: "img/inv-reidite-spear-in.png",
        ⵠⵠΔᐃⵠᐃΔ: "img/inv-reidite-spear-click.png",
        ⵠⲆΔᐃΔⲆᐃ: "img/day-reidite-helmet.png",
        ᐃΔⲆⵠᐃⲆⲆ: "img/night-reidite-helmet.png",
        ⲆΔΔⵠΔⵠΔ: "img/inv-reidite-helmet-out.png",
        ᐃⵠⵠΔᐃⲆᐃ: "img/inv-reidite-helmet-in.png",
        ᐃⵠΔⲆΔΔΔ: "img/inv-reidite-helmet-click.png",
        ⵠⲆᐃⲆⲆΔΔ: "img/day-hand-reidite-protection.png",
        ᐃⲆᐃᐃᐃⵠⵠ: "img/night-hand-reidite-protection.png",
        ᐃᐃⲆᐃᐃᐃⲆ: "img/day-reidite-protection.png",
        ⲆΔΔⵠⲆᐃΔ: "img/night-reidite-protection.png",
        ⲆⵠᐃⲆⲆⵠⵠ: "img/inv-reidite-protection-out.png",
        ᐃᐃⵠⵠⵠᐃΔ: "img/inv-reidite-protection-in.png",
        ⲆⲆⲆⵠᐃΔΔ: "img/inv-reidite-protection-click.png",
        ΔΔᐃᐃⵠⵠⲆ: "img/day-lava-dragon-sword.png",
        ⲆⵠΔΔΔᐃⵠ: "img/night-lava-dragon-sword.png",
        ⵠⲆΔΔᐃΔⵠ: "img/inv-lava-dragon-sword-out.png",
        ⲆΔⵠⲆᐃⲆΔ: "img/inv-lava-dragon-sword-in.png",
        ΔⵠᐃᐃⲆᐃⵠ: "img/inv-lava-dragon-sword-click.png",
        ᐃΔΔⵠΔᐃΔ: "img/day-lava-spear.png",
        ⲆΔⲆⵠᐃⵠⵠ: "img/night-lava-spear.png",
        ⵠΔᐃΔⲆΔΔ: "img/inv-lava-spear-out.png",
        ⵠⲆⲆⲆⲆⵠᐃ: "img/inv-lava-spear-in.png",
        ΔⵠⲆⲆⲆⵠⲆ: "img/inv-lava-spear-click.png",
        ᐃⲆᐃⵠⵠⲆⵠ: "img/day-lava-helmet.png",
        ᐃΔⲆΔⲆⵠⵠ: "img/night-lava-helmet.png",
        ⵠᐃΔⵠⲆⵠⲆ: "img/inv-lava-helmet-out.png",
        ⵠⵠⲆΔⵠⵠΔ: "img/inv-lava-helmet-in.png",
        ⲆⲆΔⵠⲆⵠᐃ: "img/inv-lava-helmet-click.png",
        ᐃΔⵠⲆᐃΔⵠ: "img/day-witch-hat.png",
        ⵠΔᐃΔⵠᐃΔ: "img/night-witch-hat.png",
        ⵠᐃⵠⲆΔΔⲆ: "img/inv-witch-hat-out.png",
        ⵠⵠⵠᐃᐃᐃᐃ: "img/inv-witch-hat-in.png",
        ᐃⲆⵠᐃⵠⵠᐃ: "img/inv-witch-hat-click.png",
        ⵠᐃΔⲆΔⲆΔ: "img/day-nimbus2000.png",
        ᐃⲆᐃⵠΔⵠⵠ: "img/night-nimbus2000.png",
        ᐃᐃⵠⵠⲆᐃᐃ: "img/inv-nimbus2000-out.png",
        ⲆᐃⵠⲆᐃⲆᐃ: "img/inv-nimbus2000-in.png",
        ⵠⲆΔᐃᐃΔΔ: "img/inv-nimbus2000-click.png",
        ⲆᐃⵠⲆᐃΔⵠ: "img/day-accessory1-pacques.png",
        ΔΔᐃⲆⲆⵠᐃ: "img/night-accessory1-pacques.png",
        ΔΔΔΔⵠⵠΔ: "img/day-accessory2-pacques.png",
        ΔΔΔⲆᐃΔⲆ: "img/night-accessory2-pacques.png",
        ΔⲆⲆΔⲆᐃΔ: "img/day-accessory3-pacques.png",
        ⵠⵠᐃⵠΔⵠΔ: "img/night-accessory3-pacques.png",
        ΔⵠⵠⵠΔⵠᐃ: "img/day-accessory5-pacques.png",
        ⵠⵠᐃᐃᐃⵠⵠ: "img/night-accessory5-pacques.png",
        ΔⲆΔⲆΔⲆⲆ: "img/day-accessory6-pacques.png",
        ⲆᐃᐃⵠΔⵠⲆ: "img/night-accessory6-pacques.png",
        ᐃΔᐃΔⵠᐃⵠ: "img/day-accessory7-pacques.png",
        ⲆΔᐃᐃᐃⲆΔ: "img/night-accessory7-pacques.png",
        ⲆᐃᐃΔⲆΔⲆ: "img/day-accessory8-pacques.png",
        ⲆΔⵠⲆΔⵠΔ: "img/night-accessory8-pacques.png",
        ΔΔᐃΔΔⵠⵠ: "img/day-bag-pacques.png",
        ΔⲆΔᐃᐃΔΔ: "img/night-bag-pacques.png",
        ⲆΔᐃΔᐃⲆⵠ: "img/day-carrot.png",
        ⲆⵠⲆⵠⵠⵠᐃ: "img/night-carrot.png",
        ΔΔⵠⲆⲆⵠⵠ: "img/day-carrot-dried.png",
        ΔᐃᐃⵠᐃⵠΔ: "img/night-carrot-dried.png",
        ⲆᐃⲆⵠΔⵠⵠ: "img/day-tomato-herb.png",
        ⲆⲆⵠᐃᐃⲆᐃ: "img/night-tomato-herb.png",
        ᐃⵠΔᐃᐃⵠΔ: "img/day-tomato-herb-dried.png",
        ⲆⵠᐃΔΔⲆᐃ: "img/night-tomato-herb-dried.png",
        ΔⵠᐃΔⵠΔⵠ: "img/day-tomato.png",
        ᐃⲆⲆΔⲆᐃΔ: "img/night-tomato.png",
        ⲆⲆΔᐃⲆⵠᐃ: "img/inv-carrot-out.png",
        ⲆⵠΔΔⲆΔᐃ: "img/inv-carrot-in.png",
        ᐃⲆⲆᐃⲆⵠⲆ: "img/inv-carrot-click.png",
        ⵠⲆᐃⲆᐃⲆΔ: "img/inv-tomato-out.png",
        ΔΔⲆⲆⲆᐃⲆ: "img/inv-tomato-in.png",
        ⲆⵠΔΔⵠΔᐃ: "img/inv-tomato-click.png",
        ⲆⵠᐃᐃᐃΔᐃ: "img/day-player0.png",
        ⵠⲆⵠᐃⲆᐃⲆ: "img/night-player0.png",
        ᐃⲆΔⵠᐃΔⵠ: "img/day-player1.png",
        ΔᐃᐃᐃᐃⲆᐃ: "img/night-player1.png",
        ᐃᐃΔΔᐃⲆⲆ: "img/day-player2.png",
        ⵠⲆΔΔΔᐃⲆ: "img/night-player22.png",
        ⲆⵠᐃⲆΔⵠΔ: "img/day-player3.png",
        ⵠⲆⵠⲆᐃΔᐃ: "img/night-player33.png",
        ⲆΔᐃⵠⵠⵠΔ: "img/day-player4.png",
        ⵠᐃⲆᐃᐃΔⲆ: "img/night-player4.png",
        ΔᐃⲆⵠⲆΔⵠ: "img/day-player5.png",
        ⲆᐃᐃΔᐃⵠΔ: "img/night-player5.png",
        ⵠⵠⵠᐃⵠᐃΔ: "img/day-player6.png",
        ΔⵠᐃⲆᐃᐃⵠ: "img/night-player6.png",
        ᐃᐃΔⵠⵠⲆⵠ: "img/day-player7.png",
        ΔΔⵠⲆΔⲆᐃ: "img/night-player7.png",
        ᐃᐃΔΔΔⲆⵠ: "img/day-player8.png",
        ᐃΔᐃΔⵠᐃΔ: "img/night-player8.png",
        ⵠᐃᐃⲆⵠⵠᐃ: "img/day-player9.png",
        ⲆⲆⵠΔΔΔⵠ: "img/night-player9.png",
        ⲆΔⲆᐃⵠᐃⵠ: "img/day-player10.png",
        ⵠᐃⲆⵠⲆⲆⵠ: "img/night-player10.png",
        Ⲇⵠⵠⵠᐃⵠᐃ: "img/day-player11.png",
        ⵠᐃᐃΔΔⲆⲆ: "img/night-player11.png",
        ⲆⲆⲆⲆᐃⲆΔ: "img/day-player12.png",
        ⵠⲆΔⵠΔᐃⵠ: "img/night-player12.png",
        ⵠΔⵠΔΔΔΔ: "img/day-player13.png",
        ᐃⲆⲆⲆᐃⲆⵠ: "img/night-player13.png",
        ⵠᐃᐃΔⲆⵠΔ: "img/day-player14.png",
        ⲆⲆᐃⲆⵠⲆΔ: "img/night-player14.png",
        ⵠⲆᐃΔⵠⵠᐃ: "img/day-player15.png",
        ⵠⵠΔΔΔⲆᐃ: "img/night-player15.png",
        ᐃΔᐃᐃⲆᐃᐃ: "img/day-player16.png",
        ΔΔΔᐃΔⵠΔ: "img/night-player16.png",
        ᐃΔⲆⲆⵠⵠⵠ: "img/day-player17.png",
        ᐃⲆΔⵠⲆⵠᐃ: "img/night-player17.png",
        ⵠΔΔΔᐃΔᐃ: "img/day-player18.png",
        ᐃΔᐃΔⵠⵠⲆ: "img/night-player18.png",
        ⲆⵠΔⲆᐃᐃⲆ: "img/day-player19.png",
        ᐃⵠⲆᐃⵠⲆᐃ: "img/night-player19.png",
        ΔⵠᐃⲆⲆΔᐃ: "img/day-hand-player0.png",
        ⲆΔΔⵠⵠΔΔ: "img/night-hand-player0.png",
        ⵠΔᐃⲆΔᐃⲆ: "img/day-hand-player1.png",
        ΔⲆᐃⲆⵠⲆⵠ: "img/night-hand-player1.png",
        ⲆⵠᐃⲆⲆⲆⲆ: "img/day-hand-player2.png",
        ΔⵠΔᐃΔⵠⲆ: "img/night-hand-player22.png",
        ΔⲆⲆⲆⵠΔⲆ: "img/day-hand-player3.png",
        ⵠᐃΔᐃᐃΔᐃ: "img/night-hand-player33.png",
        ⵠΔᐃΔᐃⵠΔ: "img/day-hand-player4.png",
        ᐃΔⲆᐃΔⵠᐃ: "img/night-hand-player4.png",
        ᐃᐃⲆⲆⲆᐃᐃ: "img/day-hand-player5.png",
        ⲆⲆⵠⲆⲆⵠⲆ: "img/night-hand-player5.png",
        ⲆΔᐃΔⲆⵠⵠ: "img/day-hand-player6.png",
        ⵠΔᐃⲆᐃⵠⵠ: "img/night-hand-player6.png",
        ᐃΔⵠⵠΔᐃᐃ: "img/day-hand-player7.png",
        ᐃΔⲆⲆΔⲆᐃ: "img/night-hand-player7.png",
        ᐃⵠᐃᐃⲆᐃΔ: "img/day-hand-player8.png",
        ⵠⲆⵠⲆⲆΔΔ: "img/night-hand-player8.png",
        ⵠᐃⲆⲆᐃⲆⵠ: "img/day-hand-player9.png",
        ΔⵠⲆᐃⲆⵠᐃ: "img/night-hand-player9.png",
        ⵠⲆΔᐃΔΔⲆ: "img/day-hand-player10.png",
        ⲆⵠᐃΔⵠⵠⵠ: "img/night-hand-player10.png",
        ΔΔⵠⵠⲆᐃⲆ: "img/day-hand-player11.png",
        ⵠΔᐃⵠΔᐃⲆ: "img/night-hand-player11.png",
        ⲆⵠΔΔΔΔᐃ: "img/day-hand-player12.png",
        ΔΔⲆΔⵠⵠΔ: "img/night-hand-player12.png",
        ᐃΔΔΔΔΔΔ: "img/day-hand-player13.png",
        ΔⵠᐃᐃΔⲆΔ: "img/night-hand-player13.png",
        ᐃᐃᐃⵠᐃⵠⲆ: "img/day-hand-player14.png",
        ΔᐃΔΔⲆᐃΔ: "img/night-hand-player14.png",
        ᐃⲆⵠΔᐃΔᐃ: "img/day-hand-player15.png",
        ⵠⲆᐃΔⵠⲆⵠ: "img/night-hand-player15.png",
        ΔᐃᐃⲆⵠᐃⲆ: "img/day-hand-player16.png",
        ⵠⲆⲆᐃᐃⲆᐃ: "img/night-hand-player16.png",
        ᐃΔᐃⵠⵠⲆⵠ: "img/day-hand-player17.png",
        ⵠΔᐃⲆᐃⲆⲆ: "img/night-hand-player17.png",
        ΔᐃⵠΔⲆⲆᐃ: "img/day-hand-player18.png",
        ⲆⲆⵠΔᐃΔⲆ: "img/night-hand-player18.png",
        ⵠᐃⲆᐃⲆᐃᐃ: "img/day-hand-player19.png",
        ⲆᐃⵠⲆⵠⵠΔ: "img/night-hand-player19.png",
        ⲆᐃᐃⵠΔⵠΔ: "img/day-accessory4.png",
        ΔⵠⵠⵠⵠⲆⵠ: "img/night-accessory4.png",
        ⲆᐃⵠⲆΔⵠᐃ: "img/day-accessory9.png",
        ᐃᐃⵠⲆᐃⵠᐃ: "img/night-accessory9.png",
        ᐃⵠⵠⲆᐃⲆⲆ: "img/day-accessory10.png",
        ᐃⵠΔⵠΔⵠⲆ: "img/night-accessory10.png",
        ΔⲆⵠᐃᐃⵠΔ: "img/day-accessory11.png",
        ᐃⵠⲆⲆⲆᐃⲆ: "img/night-accessory11.png",
        ᐃⵠᐃⵠⵠⲆΔ: "img/day-accessory12.png",
        ᐃᐃⵠᐃΔⵠᐃ: "img/night-accessory12.png",
        ᐃΔΔΔⵠⵠⲆ: "img/day-bag.png",
        ΔᐃΔⵠΔⵠᐃ: "img/night-bag.png",
        ⲆⵠΔⲆΔᐃΔ: "img/inv-bag-out.png",
        ⲆⵠᐃⲆΔⵠᐃ: "img/inv-bag-in.png",
        ⵠᐃⵠⵠⵠⵠⲆ: "img/inv-bag-click.png",
        ⵠΔᐃⵠᐃΔΔ: "img/day-pitchfork.png",
        ⲆⲆΔⵠΔΔⲆ: "img/night-pitchfork.png",
        ᐃⵠⲆᐃΔⲆⲆ: "img/inv-pitchfork-out.png",
        ΔⵠⲆᐃᐃᐃⵠ: "img/inv-pitchfork-in.png",
        ᐃⲆᐃᐃⵠⵠΔ: "img/inv-pitchfork-click.png",
        ⲆᐃⲆⲆᐃᐃⵠ: "img/inv-wood-spike-door-out.png",
        ⵠⲆⲆᐃΔⵠⲆ: "img/inv-wood-spike-door-in.png",
        ᐃⲆⵠᐃⲆΔⵠ: "img/inv-wood-spike-door-click.png",
        ⲆᐃᐃΔΔᐃΔ: "img/inv-stone-spike-door-out.png",
        ⵠⲆᐃᐃⲆΔⲆ: "img/inv-stone-spike-door-in.png",
        ΔⵠΔᐃΔΔⲆ: "img/inv-stone-spike-door-click.png",
        ᐃⲆΔΔⲆᐃⲆ: "img/inv-gold-spike-door-out.png",
        ⲆΔΔΔΔⲆΔ: "img/inv-gold-spike-door-in.png",
        ΔᐃⲆⵠΔᐃⵠ: "img/inv-gold-spike-door-click.png",
        ⲆⵠΔᐃΔᐃᐃ: "img/inv-diamond-spike-door-out.png",
        ᐃⵠⲆⵠⲆᐃΔ: "img/inv-diamond-spike-door-in.png",
        ᐃᐃΔⵠΔⵠⲆ: "img/inv-diamond-spike-door-click.png",
        ΔΔΔᐃΔᐃⲆ: "img/inv-amethyst-spike-door-out.png",
        ⵠⲆⵠⵠᐃΔⲆ: "img/inv-amethyst-spike-door-in.png",
        ΔΔⵠⵠⵠⲆΔ: "img/inv-amethyst-spike-door-click.png",
        ⲆΔⲆᐃᐃⵠⲆ: "img/day-wood-spike-door.png",
        ᐃⲆΔΔΔΔⵠ: "img/night-wood-spike-door.png",
        ⲆᐃᐃᐃΔΔᐃ: "img/day-stone-spike-door.png",
        ΔΔⲆᐃΔⲆⵠ: "img/night-stone-spike-door.png",
        ᐃΔΔⲆΔⵠⲆ: "img/day-gold-spike-door.png",
        ᐃΔᐃⲆⵠⵠⵠ: "img/night-gold-spike-door.png",
        ⵠᐃⵠᐃⲆⲆⵠ: "img/day-diamond-spike-door.png",
        ⵠΔⵠⲆⵠΔᐃ: "img/night-diamond-spike-door.png",
        ΔⵠᐃΔⵠⵠⵠ: "img/day-amethyst-spike-door.png",
        ⵠⲆᐃΔΔⵠⵠ: "img/night-amethyst-spike-door.png",
        ⲆⵠⲆⵠΔⵠᐃ: "img/inv-reidite-spike-door-out.png",
        ⲆΔⲆΔᐃⵠⲆ: "img/inv-reidite-spike-door-in.png",
        ᐃⲆⵠΔⵠΔΔ: "img/inv-reidite-spike-door-click.png",
        ᐃᐃⵠⵠⲆΔΔ: "img/inv-reidite-door-out.png",
        ΔᐃΔⵠⲆⵠⵠ: "img/inv-reidite-door-in.png",
        ΔⵠⵠΔⲆΔᐃ: "img/inv-reidite-door-click.png",
        ⲆⲆⲆⲆⵠⵠⵠ: "img/inv-reidite-spike-out.png",
        ᐃᐃᐃᐃᐃⵠⲆ: "img/inv-reidite-spike-in.png",
        ⵠΔⵠⲆᐃᐃᐃ: "img/inv-reidite-spike-click.png",
        ⲆΔⵠΔⵠΔΔ: "img/inv-reidite-wall-out.png",
        ⵠΔⲆⵠⵠᐃᐃ: "img/inv-reidite-wall-in.png",
        ⵠⵠⲆΔᐃⲆⲆ: "img/inv-reidite-wall-click.png",
        ⲆⵠⵠⵠⲆΔᐃ: "img/day-reidite-wall.png",
        ᐃⲆΔΔⵠᐃⵠ: "img/night-reidite-wall.png",
        ⵠⵠⵠⲆⵠⲆΔ: "img/day-reidite-door.png",
        ᐃⵠΔⵠᐃᐃⲆ: "img/night-reidite-door.png",
        ⲆΔⲆΔΔⲆⵠ: "img/day-reidite-spike.png",
        ⲆⵠⵠΔᐃΔⲆ: "img/night-reidite-spike.png",
        ⵠᐃⲆⲆΔΔⲆ: "img/day-reidite-spike-door.png",
        ⲆⲆᐃⲆΔᐃⲆ: "img/night-reidite-spike-door.png",
        ᐃᐃⲆⲆⲆⵠᐃ: "img/inv-reidite-pickaxe-out.png",
        ⲆΔᐃᐃΔᐃⲆ: "img/inv-reidite-pickaxe-in.png",
        ⵠΔᐃΔᐃⲆⲆ: "img/inv-reidite-pickaxe-click.png",
        ΔⲆΔᐃⵠΔⲆ: "img/day-reidite-pickaxe.png",
        ΔⲆⵠⵠᐃΔᐃ: "img/night-reidite-pickaxe.png",
        ⲆᐃⲆⲆΔΔⵠ: "img/inv-reidite-hammer-out.png",
        ⲆᐃΔΔΔΔⲆ: "img/inv-reidite-hammer-in.png",
        ΔᐃⵠⵠΔᐃⲆ: "img/inv-reidite-hammer-click.png",
        ᐃΔΔⵠΔⲆᐃ: "img/day-reidite-hammer.png",
        ᐃΔⵠⵠⲆᐃⲆ: "img/night-reidite-hammer.png",
        ⲆᐃΔᐃⲆΔⲆ: "img/day-watermelon1.png",
        ᐃⲆΔⵠⲆⵠⵠ: "img/night-watermelon1.png",
        ᐃΔⵠΔⲆⲆⵠ: "img/day-watermelon-dried1.png",
        ⲆᐃᐃΔⵠΔᐃ: "img/night-watermelon-dried1.png",
        ᐃΔΔᐃⲆΔⲆ: "img/inv-watermelon-out.png",
        ⲆΔΔΔⲆΔᐃ: "img/inv-watermelon-in.png",
        ⲆᐃΔⲆΔⵠⵠ: "img/inv-watermelon-click.png",
        ΔⲆⲆᐃᐃⲆΔ: "img/day-boat.png",
        ⵠⵠΔᐃⲆᐃΔ: "img/night-boat.png",
        ᐃⵠⲆⵠⵠⲆⵠ: "img/day-boat-wave.png",
        ᐃΔⵠᐃⵠᐃΔ: "img/night-boat-wave.png",
        ⵠⲆᐃΔⵠΔΔ: "img/inv-boat-out.png",
        ⵠᐃᐃΔΔᐃⲆ: "img/inv-boat-in.png",
        ᐃΔΔⵠⵠⵠᐃ: "img/inv-boat-click.png",
        ⲆΔΔΔⲆΔⵠ: "img/day-plane.png",
        ᐃᐃⲆᐃᐃΔⵠ: "img/night-plane.png",
        ⲆⵠᐃⵠⲆⵠⵠ: "img/inv-plane-out.png",
        ⲆᐃⲆⵠⵠⵠᐃ: "img/inv-plane-in.png",
        ⵠⵠⲆᐃΔⵠΔ: "img/inv-plane-click.png",
        ΔⵠⵠΔΔΔΔ: "img/day-sled.png",
        ⵠⲆᐃⲆΔⵠᐃ: "img/night-sled.png",
        ᐃᐃⲆⵠⵠⲆⲆ: "img/day-sled-wave.png",
        ᐃⲆⵠⲆᐃⲆΔ: "img/night-sled-wave.png",
        ⲆⵠΔⵠⵠⵠⵠ: "img/inv-sled-out.png",
        ᐃⵠⵠᐃᐃⵠΔ: "img/inv-sled-in.png",
        ⲆΔΔⵠⵠⲆᐃ: "img/inv-sled-click.png",
        ⲆⵠᐃΔⲆⵠⲆ: "img/day-pirate-hat.png",
        ᐃⵠⲆⵠᐃᐃⲆ: "img/night-pirate-hat.png",
        ΔᐃΔᐃⲆΔᐃ: "img/inv-pirate-hat-out.png",
        ⵠⵠⲆΔⲆΔΔ: "img/inv-pirate-hat-in.png",
        ⲆⲆⵠⵠᐃⵠⵠ: "img/inv-pirate-hat-click.png",
        ⲆΔⵠⲆⵠΔΔ: "img/day-penguin.png",
        ⵠᐃⵠⵠⵠⲆⵠ: "img/night-penguin.png",
        ⵠΔΔΔΔⵠΔ: "img/hurt-penguin.png",
        ⲆⵠΔⲆⵠ: "img/inv-penguin-feather-click.png",
        ⲆᐃΔⵠᐃ: "img/inv-hawk-feather-click.png",
        ᐃΔᐃΔⵠⲆΔ: "img/day-boar1.png",
        ΔⲆΔΔΔⲆⵠ: "img/day-boar1-tamed.png",
        ᐃᐃᐃᐃⲆⵠⵠ: "img/day-boar1-angry.png",
        ΔᐃⲆᐃΔᐃⵠ: "img/night-boar1.png",
        ΔᐃⵠⲆⵠⵠᐃ: "img/night-boar1-tamed.png",
        ᐃΔⲆΔΔᐃⵠ: "img/night-boar1-angry.png",
        ᐃⵠΔⲆⲆⵠΔ: "img/inv-mount-boar-out.png",
        ⲆⵠΔᐃΔⲆΔ: "img/inv-mount-boar-in.png",
        ⲆᐃⲆⵠⵠΔΔ: "img/inv-mount-boar-click.png",
        ᐃᐃⵠᐃⵠⲆⵠ: "img/day-hurt-boar1.png",
        ᐃⵠΔⲆᐃⵠⵠ: "img/boar1-step.png",
        ΔᐃⵠⵠΔⲆΔ: "img/day-saddle1.png",
        ΔᐃΔⲆⵠⵠⲆ: "img/night-saddle1.png",
        ⵠⲆΔⵠⵠᐃᐃ: "img/inv-saddle-out.png",
        ΔΔᐃΔᐃᐃᐃ: "img/inv-saddle-in.png",
        ⲆⲆⵠΔⵠⲆⵠ: "img/inv-saddle-click.png",
        ᐃᐃⲆⵠᐃΔⲆ: "img/day-magic-wand0.png",
        ΔᐃⲆⲆⵠΔⲆ: "img/night-magic-wand0.png",
        ΔⵠΔⵠᐃᐃⵠ: "img/day-light-wand1.png",
        ΔΔⲆⵠⵠⵠᐃ: "img/night-light-wand1.png",
        ⲆΔⵠⲆΔⲆΔ: "img/inv-magic-wand0-out.png",
        ⲆᐃΔᐃᐃΔⲆ: "img/inv-magic-wand0-in.png",
        ⵠΔⲆⲆⵠΔᐃ: "img/inv-magic-wand0-click.png",
        ⵠⵠΔᐃⲆⵠⲆ: "img/day-magic-wand1.png",
        ⲆⲆⵠⵠᐃⲆᐃ: "img/night-magic-wand1.png",
        ᐃⵠⵠᐃᐃⲆⵠ: "img/day-light-wand0.png",
        ΔⵠⵠΔᐃⲆΔ: "img/night-light-wand0.png",
        ⵠⲆᐃⲆΔⵠⵠ: "img/inv-magic-wand1-out.png",
        ⵠΔᐃⵠᐃⲆΔ: "img/inv-magic-wand1-in.png",
        ⲆΔΔΔⵠⲆⵠ: "img/inv-magic-wand1-click.png",
        ⲆᐃᐃⵠΔⵠᐃ: "img/day-firefly.png",
        ΔⲆⲆⲆⵠⵠΔ: "img/night-firefly.png",
        ⵠΔⵠΔΔΔᐃ: "img/hurt-firefly.png",
        ⲆΔⵠⲆᐃΔⵠ: "img/inv-firefly-out.png",
        ⵠⲆΔΔⲆΔᐃ: "img/inv-firefly-in.png",
        ⵠᐃⵠΔⵠΔⲆ: "img/inv-firefly-click.png",
        ⲆᐃⲆΔᐃⵠⵠ: "img/day-baby-dragon.png",
        ⲆΔⲆⵠⲆⵠⲆ: "img/night-baby-dragon.png",
        ᐃᐃᐃᐃΔⵠΔ: "img/day-baby-dragon-angry.png",
        ᐃΔᐃⵠᐃΔⵠ: "img/night-baby-dragon-angry.png",
        ᐃᐃᐃΔᐃⵠⵠ: "img/day-baby-dragon-tamed.png",
        ΔⵠⵠᐃⵠⲆⵠ: "img/night-baby-dragon-tamed.png",
        ⲆⵠⲆⵠᐃⲆᐃ: "img/day-wing-dragon-left-angry.png",
        ⲆΔᐃⵠⲆⵠⲆ: "img/night-dragon-wing-left-angry.png",
        ⵠΔᐃΔᐃΔΔ: "img/day-wing-dragon-right-angry.png",
        ᐃᐃΔⵠΔⲆᐃ: "img/night-dragon-wing-right-angry.png",
        ΔⵠᐃΔᐃΔⲆ: "img/day-wing-dragon-left-tamed.png",
        ⲆⲆⵠΔᐃⵠⲆ: "img/night-dragon-wing-left-tamed.png",
        ᐃⲆᐃΔⵠΔΔ: "img/day-wing-dragon-right-tamed.png",
        ΔⵠⵠⲆᐃⵠⲆ: "img/night-wing-dragon-right-tamed.png",
        ⲆⲆΔᐃⵠΔⲆ: "img/day-wing-dragon-left.png",
        ᐃᐃᐃⲆΔᐃⲆ: "img/night-dragon-wing-left.png",
        ⵠᐃΔᐃᐃΔⲆ: "img/day-wing-dragon-right.png",
        ⵠⵠⵠᐃⲆᐃⲆ: "img/night-wing-dragon-right.png",
        ⲆⲆⵠΔⲆΔⲆ: "img/hurt-baby-dragon.png",
        ΔⲆⵠⵠⵠⵠᐃ: "img/hurt-baby-dragon-wing-left.png",
        ⲆⵠⵠⵠⵠΔⵠ: "img/hurt-baby-dragon-wing-right.png",
        ΔᐃΔⲆᐃᐃⵠ: "img/inv-baby-dragon-out.png",
        ΔⲆΔⲆⲆⵠΔ: "img/inv-baby-dragon-in.png",
        ΔᐃⲆⲆⵠⵠⵠ: "img/inv-baby-dragon-click.png",
        ᐃΔⵠⵠⵠΔΔ: "img/day-baby-lava.png",
        ⲆⵠⲆΔⵠⲆⵠ: "img/night-baby-lava.png",
        ⵠⵠⵠᐃᐃⲆⲆ: "img/day-baby-lava-angry.png",
        ⵠΔΔᐃΔᐃΔ: "img/night-baby-lava-angry.png",
        ᐃⲆᐃΔΔΔᐃ: "img/day-baby-lava-tamed.png",
        ΔⲆᐃᐃⲆⵠⲆ: "img/night-baby-lava-tamed.png",
        ΔⲆΔⵠⲆⵠⵠ: "img/day-wing-lava-left-angry.png",
        ⵠⵠΔᐃᐃΔⵠ: "img/night-wing-lava-left-angry.png",
        ᐃᐃⵠᐃⲆᐃᐃ: "img/day-wing-lava-right-angry.png",
        ⵠⵠᐃⵠⲆᐃΔ: "img/night-wing-lava-right-angry.png",
        ⲆΔΔΔᐃΔⲆ: "img/day-wing-lava-left-tamed.png",
        ᐃᐃΔⵠΔΔᐃ: "img/night-wing-lava-left-tamed.png",
        ΔⲆᐃⲆᐃⵠⵠ: "img/day-wing-lava-right-tamed.png",
        ΔⲆⲆΔΔⲆΔ: "img/night-wing-lava-right-tamed.png",
        ⵠᐃΔᐃΔⲆⵠ: "img/day-wing-lava-left.png",
        ᐃⲆᐃⲆΔⵠΔ: "img/night-wing-lava-left.png",
        ⵠᐃⲆᐃⵠⲆⲆ: "img/day-wing-lava-right.png",
        Ⲇᐃⵠⵠᐃⵠᐃ: "img/night-wing-lava-right.png",
        ⵠⵠⲆⵠⵠⲆΔ: "img/hurt-baby-lava.png",
        ΔΔⲆᐃᐃⵠⲆ: "img/hurt-baby-lava-wing-left.png",
        ΔⵠΔⵠᐃⵠⵠ: "img/hurt-baby-lava-wing-right.png",
        ΔⵠᐃⵠⵠⲆᐃ: "img/inv-baby-lava-out.png",
        ⲆⵠⵠᐃⵠΔⲆ: "img/inv-baby-lava-in.png",
        ⵠⲆΔᐃⲆⵠⲆ: "img/inv-baby-lava-click.png",
        ⲆⵠⲆⵠⲆⵠⵠ: "img/day-falcon.png",
        ΔᐃⵠΔᐃⲆᐃ: "img/night-falcon.png",
        ΔΔᐃⲆⵠᐃᐃ: "img/day-falcon-angry.png",
        ⲆⵠⲆⲆⵠⲆΔ: "img/night-falcon-angry.png",
        ⵠⵠⵠⵠⵠᐃᐃ: "img/day-falcon-ground.png",
        ᐃΔⵠΔⲆⵠⲆ: "img/night-falcon-ground.png",
        ΔⵠᐃΔⵠⲆΔ: "img/day-falcon-ground-angry.png",
        ⵠΔᐃΔⲆΔⲆ: "img/night-falcon-ground-angry.png",
        ⵠⵠΔΔⵠⲆΔ: "img/day-falcon-wings-left.png",
        ΔΔⵠⲆΔᐃⵠ: "img/night-falcon-wings-left.png",
        ᐃⲆΔⲆⲆΔᐃ: "img/day-falcon-wings-right.png",
        ⵠᐃᐃⵠᐃⲆᐃ: "img/night-falcon-wings-right.png",
        ⵠⵠΔⲆΔΔᐃ: "img/day-falcon-angry-wings-left.png",
        ⲆⲆΔⲆΔΔⲆ: "img/night-falcon-angry-wings-left.png",
        ᐃΔᐃΔⵠⵠΔ: "img/day-falcon-angry-wings-right.png",
        ⲆⵠᐃⵠᐃΔᐃ: "img/night-falcon-angry-wings-right.png",
        ⲆΔⵠⵠⲆΔᐃ: "img/day-falcon-wings-left-tamed.png",
        ⵠᐃⲆⲆⵠⵠⵠ: "img/night-falcon-wings-left-tamed.png",
        ΔⵠⲆΔᐃᐃᐃ: "img/day-falcon-wings-right-tamed.png",
        ⵠᐃⲆΔᐃⵠⲆ: "img/night-falcon-wings-right-tamed.png",
        ⵠⲆⲆᐃΔⵠΔ: "img/day-falcon-tamed.png",
        ᐃⵠⲆⵠⲆⲆᐃ: "img/night-falcon-tamed.png",
        ⲆΔᐃⲆΔᐃΔ: "img/hurt-falcon-ground.png",
        ⲆᐃᐃᐃᐃⲆΔ: "img/hurt-falcon.png",
        ΔⵠⵠⵠᐃⲆᐃ: "img/hurt-falcon-wings-left.png",
        ⵠΔⲆⲆⲆⲆⵠ: "img/hurt-falcon-wings-right.png",
        ⲆⲆⲆᐃᐃΔᐃ: "img/inv-falcon-out.png",
        ᐃⵠⲆᐃᐃⲆΔ: "img/inv-falcon-in.png",
        ΔᐃⵠᐃⵠΔΔ: "img/inv-falcon-click.png",
        ⵠᐃΔᐃⵠⲆᐃ: "img/day-crab-boss.png",
        ⲆⲆᐃⵠⲆᐃΔ: "img/night-crab-boss.png",
        ⵠⵠⲆⲆΔⲆᐃ: "img/day-crab-boss-angry.png",
        ⵠᐃᐃⲆᐃΔⵠ: "img/night-crab-boss-angry.png",
        ⵠⲆᐃΔⲆⵠΔ: "img/day-crab-boss-tamed.png",
        ⲆⵠⵠⲆⵠⲆⵠ: "img/night-crab-boss-tamed.png",
        ⲆⵠΔⲆᐃⲆΔ: "img/day-crab-boss-claw-left-attack.png",
        ᐃᐃⵠΔΔⲆᐃ: "img/night-crab-boss-claw-left-attack.png",
        ΔᐃᐃᐃΔⲆᐃ: "img/day-crab-boss-claw-right-attack.png",
        ᐃⵠΔᐃᐃᐃᐃ: "img/night-crab-boss-claw-right-attack.png",
        ΔΔᐃΔᐃᐃΔⵠᐃ: "img/day-crab-boss-claw-left-tamed.png",
        ᐃᐃΔⵠΔⲆᐃⵠΔ: "img/night-crab-boss-claw-left-tamed.png",
        ΔⲆᐃΔΔⵠΔⵠⲆ: "img/day-crab-boss-claw-right-tamed.png",
        ᐃⲆⲆᐃⲆᐃⵠΔⲆ: "img/night-crab-boss-claw-right-tamed.png",
        ΔΔⲆⲆⵠΔⵠ: "img/day-crab-boss-claw-left.png",
        ⵠᐃΔΔΔᐃⲆ: "img/night-crab-boss-claw-left.png",
        ⲆΔΔΔⲆᐃᐃ: "img/day-crab-boss-claw-right.png",
        ⵠⲆⵠⵠⵠΔΔ: "img/night-crab-boss-claw-right.png",
        ⵠΔᐃⵠΔⲆⵠ: "img/hurt-crab-boss.png",
        ⲆᐃⵠⲆⲆⵠΔ: "img/hurt-crab-boss-claw-left.png",
        ⵠΔⲆⲆΔⲆⲆ: "img/hurt-crab-boss-claw-right.png",
        ⲆⲆΔⵠⲆⵠⵠ: "img/heal-crab-boss.png",
        ᐃΔⲆΔⵠⵠᐃ: "img/heal-crab-boss-claw-left.png",
        ⲆΔⵠᐃΔⵠⵠ: "img/heal-crab-boss-claw-right.png",
        ⵠⵠⵠⵠⲆⲆⲆ: "img/crab-step.png",
        ⲆⲆᐃΔⲆⲆⲆ: "img/inv-crab-boss-out.png",
        ⲆΔᐃᐃΔΔⲆ: "img/inv-crab-boss-in.png",
        ᐃᐃᐃⵠᐃᐃⵠ: "img/inv-crab-boss-click.png",
        ⵠΔΔⵠΔⵠⵠ: "img/day-cactus10.png",
        ᐃⵠⲆᐃΔⵠⲆ: "img/night-cactus10.png",
        ᐃⵠᐃⵠⵠΔᐃ: "img/inv-cactus-out.png",
        ᐃⵠⵠⲆᐃⵠᐃ: "img/inv-cactus-in.png",
        ΔⲆⲆᐃⵠⵠΔ: "img/inv-cactus-click.png",
        ⵠΔⵠᐃΔΔⲆ: "img/day-scorpion.png",
        ΔΔⲆᐃⵠⲆⲆ: "img/night-scorpion.png",
        ⲆᐃᐃΔⲆⵠⲆ: "img/day-scorpion-hand-left.png",
        ⲆⵠΔⵠⵠⵠΔ: "img/night-scorpion-hand-left.png",
        ⲆⵠᐃᐃⲆⵠⵠ: "img/day-scorpion-hand-right.png",
        ⵠⵠⵠⵠΔⲆᐃ: "img/night-scorpion-hand-right.png",
        ᐃⵠⲆᐃΔᐃⲆ: "img/hurt-scorpion.png",
        ⲆⲆΔᐃⵠΔΔ: "img/hurt-scorpion-hand-left.png",
        ᐃΔΔᐃⲆⵠⵠ: "img/hurt-scorpion-hand-right.png",
        ᐃΔᐃᐃⵠᐃⵠ: "img/day-vulture.png",
        ΔⵠΔᐃⵠΔᐃ: "img/night-vulture.png",
        ΔⵠⵠΔⵠᐃⵠ: "img/day-vulture-angry.png",
        ⲆⵠᐃⲆΔᐃΔ: "img/night-vulture-angry.png",
        ᐃⲆΔᐃⵠᐃⲆ: "img/day-vulture-ground.png",
        ΔⵠᐃⲆΔᐃΔ: "img/night-vulture-ground.png",
        ⵠΔⵠᐃΔⵠⵠ: "img/day-vulture-ground-angry.png",
        ⲆⲆⵠΔⲆΔᐃ: "img/night-vulture-ground-angry.png",
        ΔΔᐃΔΔⵠⲆ: "img/day-vulture-wings-left.png",
        ⲆⵠⲆΔⲆΔⲆ: "img/night-vulture-wings-left.png",
        ⵠⲆⲆᐃⲆᐃΔ: "img/day-vulture-wings-right.png",
        ⵠΔⵠⲆᐃⵠⲆ: "img/night-vulture-wings-right.png",
        ΔᐃΔⵠⵠⲆⲆ: "img/day-vulture-angry-wings-left.png",
        ΔⲆΔⵠⲆⲆⵠ: "img/night-vulture-angry-wings-left.png",
        ᐃΔᐃⲆΔΔΔ: "img/day-vulture-angry-wings-right.png",
        ΔⵠⲆΔΔⲆⲆ: "img/night-vulture-angry-wings-right.png",
        ᐃΔⲆᐃⵠᐃⲆ: "img/day-vulture-wings-left-tamed.png",
        ⵠⲆΔᐃᐃⲆΔ: "img/night-vulture-wings-left-tamed.png",
        ⲆΔΔᐃΔᐃⵠ: "img/day-vulture-wings-right-tamed.png",
        ⵠᐃⵠᐃΔⲆΔ: "img/night-vulture-wings-right-tamed.png",
        ΔⵠⲆⵠΔⲆᐃ: "img/day-vulture-tamed.png",
        ⲆⲆΔΔᐃⵠᐃ: "img/night-vulture-tamed.png",
        ⵠᐃΔⵠᐃⵠᐃ: "img/hurt-vulture-ground.png",
        ⵠᐃᐃⵠⵠᐃⲆ: "img/hurt-vulture.png",
        ⲆΔᐃΔⵠᐃⵠ: "img/hurt-vulture-wings-left.png",
        ΔΔⵠᐃⲆΔⲆ: "img/hurt-vulture-wings-right.png",
        ⲆᐃⲆΔⲆⵠᐃ: "img/day-aloe-vera.png",
        ⲆⵠⲆᐃⵠⵠⵠ: "img/night-aloe-vera.png",
        ⲆⲆΔⵠⵠΔⲆ: "img/inv-aloe-vera-out.png",
        ⲆΔⵠⲆΔᐃⵠ: "img/inv-aloe-vera-in.png",
        ΔⲆΔΔᐃⵠⲆ: "img/inv-aloe-vera-click.png",
        ᐃᐃΔΔᐃᐃΔ: "img/day-aloe-vera-grown.png",
        ᐃᐃⲆⲆΔΔⵠ: "img/night-aloe-vera-grown.png",
        ⲆΔⵠⲆⲆᐃⵠ: "img/day-aloe-vera-dried.png",
        ᐃⵠΔⲆᐃⵠΔ: "img/night-aloe-vera-dried.png",
        ᐃⵠⵠⲆⵠᐃⵠ: "img/day-turban1.png",
        ΔⲆᐃⵠΔⲆᐃ: "img/night-turban1.png",
        ⲆⲆΔΔⵠᐃΔ: "img/day-turban2.png",
        ΔⵠⲆⲆᐃΔⵠ: "img/night-turban2.png",
        ⵠΔΔⲆᐃΔⲆ: "img/inv-turban2-out.png",
        ᐃᐃΔⵠᐃΔⵠ: "img/inv-turban2-in.png",
        ⲆⲆᐃⲆᐃⲆΔ: "img/inv-turban2-click.png",
        ⲆⵠⲆⵠᐃΔᐃ: "img/inv-turban1-out.png",
        ⲆᐃᐃᐃⲆΔΔ: "img/inv-turban1-in.png",
        ΔΔⲆⵠⲆⲆΔ: "img/inv-turban1-click.png",
        ⲆᐃΔᐃⵠⲆᐃ: "img/day-pitchfork2.png",
        ⵠΔⵠⲆΔΔⵠ: "img/night-pitchfork2.png",
        ᐃΔΔᐃΔᐃⲆ: "img/inv-pitchfork2-out.png",
        ⲆⲆΔⲆⵠⲆⲆ: "img/inv-pitchfork2-in.png",
        ΔᐃΔΔᐃⲆΔ: "img/inv-pitchfork2-click.png",
        ⵠⲆⲆᐃⲆᐃⵠ: "img/inv-gold-fork-click.png",
        ⲆⵠΔⵠⲆⵠΔ: "img/inv-pilot-glasses-click.png",
        ⲆᐃΔⲆⲆⲆⵠ: "img/day-pilot-helmet.png",
        ⵠⵠⲆΔΔΔᐃ: "img/night-pilot-helmet.png",
        ⵠΔᐃᐃᐃⵠᐃ: "img/inv-pilot-helmet-out.png",
        ⵠⲆⲆⵠⵠⵠⲆ: "img/inv-pilot-helmet-in.png",
        ΔΔⲆⵠⲆΔⲆ: "img/inv-pilot-helmet-click.png",
        ᐃᐃᐃⵠⵠᐃⲆⲆᐃ: "img/day-sandworm0.png",
        ⲆᐃΔⲆᐃⲆⵠ: "img/day-sandworm1.png",
        ⵠΔⵠΔⲆⵠΔ: "img/day-sandworm2.png",
        ⲆⵠⲆΔⲆΔⵠΔΔ: "img/night-sandworm0.png",
        ᐃᐃⲆΔᐃⵠⵠ: "img/night-sandworm1.png",
        ⲆΔⲆⲆᐃⲆⵠ: "img/night-sandworm2.png",
        ΔᐃⵠᐃⲆⲆⲆ: "img/hurt-sandworm0.png",
        ⵠⲆᐃᐃᐃᐃΔ: "img/hurt-sandworm1.png",
        ΔΔⲆⵠΔΔⵠ: "img/hurt-sandworm2.png",
        ᐃᐃᐃⵠΔ: "img/inv-vulture-feather-click.png",
        ⵠΔⵠⲆΔᐃⲆ: "img/day-emerald0.png",
        ΔᐃᐃⲆᐃΔⵠ: "img/night-emerald0.png",
        ΔⵠΔΔⲆᐃⲆ: "img/day-emerald1.png",
        ⲆΔⲆΔΔᐃⵠ: "img/night-emerald1.png",
        ΔⵠΔΔⲆⵠⵠ: "img/day-emerald2.png",
        ΔⲆᐃⲆΔᐃᐃ: "img/night-emerald2.png",
        ⵠΔⲆᐃΔ: "img/inv-emerald-click.png",
        ΔΔᐃᐃⲆⵠⵠ: "img/inv-sworm-juice-out.png",
        ⵠΔⵠΔΔᐃⲆ: "img/inv-sworm-juice-in.png",
        ⵠΔΔⵠⵠⲆᐃ: "img/inv-sworm-juice-click.png",
        ⵠᐃⵠΔⵠᐃΔ: "img/day-point-machine.png",
        ᐃⲆᐃΔⵠΔⵠ: "img/night-point-machine.png",
        ΔΔⲆⲆⵠΔⲆ: "img/day-point-machine-hole.png",
        ΔⵠⵠⵠΔᐃⲆ: "img/night-point-machine-hole.png",
        ᐃⲆⲆⵠⲆΔᐃ: "img/day-point-machine-ground.png",
        ⲆⲆᐃᐃᐃⲆⲆ: "img/night-point-machine-ground.png",
        ᐃⵠⵠᐃⵠᐃᐃ: "img/day-point-machine-rotate.png",
        ⲆⲆΔⲆⵠⵠᐃ: "img/night-point-machine-rotate.png",
        ⵠΔΔᐃΔⲆⵠ: "img/inv-point-machine-out.png",
        ΔᐃᐃᐃⲆⲆⲆ: "img/inv-point-machine-in.png",
        ⵠᐃΔⵠΔⵠⵠ: "img/inv-point-machine-click.png",
        ⵠΔⵠΔⵠΔᐃ: "img/day-extractor-machine0-stone.png",
        ⵠΔΔᐃⲆΔᐃ: "img/night-extractor-machine0-stone.png",
        ⵠⵠᐃⵠΔⲆⲆ: "img/day-extractor-machine-stone.png",
        ᐃⲆⵠⲆⲆⵠⲆ: "img/night-extractor-machine-stone.png",
        ᐃⵠⲆⲆΔᐃⵠ: "img/inv-extractor-machine-stone-out.png",
        ΔⵠⲆⲆⵠΔⵠ: "img/inv-extractor-machine-stone-in.png",
        ΔⵠΔᐃᐃⲆᐃ: "img/inv-extractor-machine-stone-click.png",
        ᐃⵠⲆᐃᐃᐃⵠ: "img/day-extractor-machine0-gold.png",
        ⵠⲆⲆΔⵠⵠⵠ: "img/night-extractor-machine0-gold.png",
        ᐃΔᐃⵠⵠΔⲆ: "img/day-extractor-machine-gold.png",
        ⲆΔΔᐃᐃΔⵠ: "img/night-extractor-machine-gold.png",
        ᐃΔⵠⵠΔⵠⵠ: "img/inv-extractor-machine-gold-out.png",
        ⲆⲆΔᐃⲆⲆⲆ: "img/inv-extractor-machine-gold-in.png",
        ᐃⲆᐃⵠᐃⵠᐃ: "img/inv-extractor-machine-gold-click.png",
        ᐃΔⵠⵠᐃᐃⵠ: "img/day-extractor-machine0-diamond.png",
        ⵠᐃΔⵠⲆⲆⵠ: "img/night-extractor-machine0-diamond.png",
        ΔⵠΔⲆⵠⵠΔ: "img/day-extractor-machine-diamond.png",
        ⲆΔΔⲆΔⲆΔ: "img/night-extractor-machine-diamond.png",
        ΔΔⵠᐃΔⲆΔ: "img/inv-extractor-machine-diamond-out.png",
        ⲆⲆⲆᐃⲆⲆΔ: "img/inv-extractor-machine-diamond-in.png",
        ⵠⵠⵠᐃᐃΔΔ: "img/inv-extractor-machine-diamond-click.png",
        ᐃΔᐃᐃΔᐃΔ: "img/day-extractor-machine0-amethyst.png",
        ᐃⵠⵠᐃᐃⵠᐃ: "img/night-extractor-machine0-amethyst.png",
        ΔⲆⲆΔᐃΔⲆ: "img/day-extractor-machine-amethyst.png",
        ⲆᐃⲆⵠⲆᐃᐃ: "img/night-extractor-machine-amethyst.png",
        ΔⵠⵠΔᐃⵠᐃ: "img/inv-extractor-machine-amethyst-out.png",
        ΔⵠⵠⵠΔⵠΔ: "img/inv-extractor-machine-amethyst-in.png",
        ⵠᐃΔⲆΔᐃᐃ: "img/inv-extractor-machine-amethyst-click.png",
        ᐃⵠᐃΔⵠⵠᐃ: "img/day-extractor-machine0-reidite.png",
        ᐃΔⲆⲆⲆⲆᐃ: "img/night-extractor-machine0-reidite.png",
        ᐃΔΔΔΔΔᐃ: "img/day-extractor-machine-reidite.png",
        ⵠΔⲆⲆⵠⵠⵠ: "img/night-extractor-machine-reidite.png",
        ΔᐃⲆⲆᐃᐃⵠ: "img/inv-extractor-machine-reidite-out.png",
        ΔⲆΔᐃⲆⲆΔ: "img/inv-extractor-machine-reidite-in.png",
        ⲆΔᐃᐃᐃᐃᐃ: "img/inv-extractor-machine-reidite-click.png",
        ᐃⵠⲆΔΔⲆᐃ: "img/extractor-cases.png",
        ⵠΔΔΔΔᐃΔ: "img/day-golden-hen.png",
        ⵠᐃᐃΔᐃⲆⵠ: "img/night-golden-hen.png",
        ᐃᐃΔΔΔⲆⲆ: "img/day-golden-chicken.png",
        ᐃΔᐃⲆΔⲆᐃ: "img/night-golden-chicken.png",
        ᐃΔⲆᐃⵠⲆⲆ: "img/hurt-golden-hen.png",
        ⵠΔᐃᐃΔᐃΔ: "img/hurt-golden-chicken.png",
        ⲆΔᐃⵠⵠΔΔ: "img/logo-interface.png",
        ΔⲆⵠⲆᐃⲆᐃ: "img/forest-mode-hover.png",
        ⵠⵠᐃⲆᐃⲆⲆ: "img/normal-mode-hover.png",
        ⲆⵠⲆᐃᐃⵠᐃ: "img/vampire-mode-hover.png",
        ᐃᐃᐃⵠᐃⲆⲆ: "img/zombie-mode-hover.png",
        ⵠⲆⵠⲆⵠᐃⵠ: "img/community-mode-hover2.png",
        ᐃᐃⲆⲆⵠⲆⵠ: "img/experimental-mode-hover.png",
        ⲆⲆⲆᐃᐃⲆᐃ: "img/zombie-mode-out.png",
        ⵠᐃΔⵠᐃΔⲆ: "img/zombie-mode-in.png",
        ᐃⵠᐃᐃⲆⵠᐃ: "img/zombie-mode-click.png",
        ΔⵠᐃᐃⵠᐃΔ: "img/vampire-mode-out.png",
        ΔᐃᐃⵠΔⲆⲆ: "img/vampire-mode-in.png",
        ΔⲆⵠⲆⵠᐃⲆ: "img/vampire-mode-click.png",
        ΔⵠⲆΔᐃⲆⵠ: "img/normal-mode-out.png",
        ⲆⲆⲆᐃΔⵠᐃ: "img/normal-mode-in.png",
        ⲆⲆᐃⲆⲆⵠⵠ: "img/normal-mode-click.png",
        ⵠΔⵠⵠΔΔΔ: "img/forest-mode-out.png",
        ᐃΔΔⵠᐃⲆᐃ: "img/forest-mode-in.png",
        ᐃᐃⲆⲆΔⵠⲆ: "img/forest-mode-click.png",
        ⵠᐃⲆⲆⵠΔⲆ: "img/community-mode-out.png",
        ΔⲆΔᐃᐃⲆⲆ: "img/community-mode-in.png",
        ΔⵠᐃᐃΔⵠⲆ: "img/community-mode-click.png",
        ᐃⲆⲆⲆΔⵠᐃ: "img/experimental-modes-out.png",
        ⵠΔᐃⵠᐃᐃᐃ: "img/experimental-modes-in.png",
        ⲆΔⲆⵠΔⵠΔ: "img/experimental-modes-click.png",
        ⵠᐃᐃⲆⲆΔᐃ: "img/youtube-button-out.png",
        ⲆⵠⵠⵠⲆᐃΔ: "img/youtube-button-in.png",
        ΔⲆΔⵠᐃΔΔ: "img/youtube-button-click.png",
        ⲆΔᐃΔⵠᐃⲆ: "img/wiki-button-out.png",
        ΔᐃᐃⲆΔⲆΔ: "img/wiki-button-in.png",
        ⵠΔΔⵠᐃⵠⵠ: "img/wiki-button-click.png",
        ⲆⲆᐃⲆᐃⲆᐃ: "img/twitter-button-out.png",
        ᐃΔᐃⲆⵠΔᐃ: "img/twitter-button-in.png",
        ᐃΔⵠΔΔⲆⲆ: "img/twitter-button-click.png",
        ᐃΔΔⲆᐃΔᐃ: "img/facebook-button-out.png",
        ⵠⲆᐃⵠⵠⵠⵠ: "img/facebook-button-in.png",
        ΔⵠᐃⲆⲆⲆⲆ: "img/facebook-button-click.png",
        ⵠΔⲆⵠⲆⲆⵠ: "img/reddit-button-out.png",
        ⵠⵠᐃΔΔⲆΔ: "img/reddit-button-in.png",
        ⵠⲆᐃⵠⲆᐃⲆ: "img/reddit-button-click.png",
        ᐃᐃⲆᐃⲆⲆⲆ: "img/discord-button-out.png",
        ᐃⲆⲆⵠᐃⵠΔ: "img/discord-button-in.png",
        ΔⲆⵠᐃΔᐃᐃ: "img/discord-button-click.png",
        ΔⵠΔΔⵠᐃⲆ: "img/merch-button-out.png",
        ⲆᐃⵠΔⲆⵠⲆ: "img/merch-button-in.png",
        ⵠⵠⲆᐃᐃΔᐃ: "img/merch-button-click.png",
        ΔⲆⵠΔⲆᐃⵠⵠᐃ: "img/terminal-button-out.png",
        ᐃⵠⵠᐃᐃⵠΔᐃⲆ: "img/terminal-button-in.png",
        ΔⵠᐃΔΔⵠⲆⵠⵠ: "img/terminal-button-click.png",
        ⲆⲆⵠⲆᐃᐃⲆ: "img/restart-out.png",
        ⲆⵠᐃⵠΔⵠᐃ: "img/restart-in.png",
        ᐃⵠΔⵠΔᐃⲆ: "img/restart-click.png",
        ⲆⵠᐃⲆⲆΔⲆ: "img/guide-out.png",
        ⲆᐃΔΔᐃᐃⲆ: "img/guide-in.png",
        ⵠⲆΔΔΔᐃᐃ: "img/guide-click.png",
        ⵠⲆᐃⲆⵠⵠⵠ: "img/copy-paste-out.png",
        ⵠᐃΔⲆⵠᐃΔ: "img/copy-paste-in.png",
        ⲆⵠΔᐃⵠⲆᐃ: "img/copy-paste-click.png",
        ⲆᐃⵠⲆᐃΔⲆ: "img/link-buttons-bg.png",
        ΔᐃΔᐃᐃⵠⲆ: "img/changelog-box2.png",
        ᐃⲆᐃⵠΔⵠᐃ: "img/changelog_31.png",
        ⵠⲆⵠᐃΔⲆΔ: "img/banner-taming.png",
        ⵠⲆⵠⲆⵠΔⲆ: "img/profile-button-out.png",
        ΔⲆᐃⵠᐃⵠΔ: "img/profile-button-in.png",
        ⵠⵠΔᐃΔⲆⵠ: "img/profile-button-click.png",
        ᐃⵠⲆΔΔᐃⲆ: "img/login-button-out.png",
        ΔⲆΔᐃⲆᐃΔ: "img/login-button-in.png",
        ᐃΔΔⲆⵠⲆᐃ: "img/login-button-click.png",
        ᐃΔⵠⲆⲆⵠⵠ: "img/login-google-out.png",
        ⵠⵠⲆⵠⲆΔⲆ: "img/login-google-in.png",
        ΔⵠΔⲆᐃⲆΔ: "img/login-google-click.png",
        ⵠⵠΔΔΔᐃΔ: "img/login-facebook-out.png",
        ΔⲆᐃⲆⵠΔⲆ: "img/login-facebook-in.png",
        ⲆⲆⵠΔⲆⲆΔ: "img/login-facebook-click.png",
        ⲆⲆᐃⲆᐃⵠⵠ: "img/account-box.png",
        ⵠᐃΔᐃⲆⵠᐃΔⲆ: "img/account-under-maintenance.png",
        ⵠⲆⵠΔⲆⲆΔ: "img/close-button-account-out.png",
        ΔⵠᐃⵠᐃⲆⲆ: "img/close-button-account-in.png",
        ⵠΔⲆΔⵠⲆⵠ: "img/close-button-account-click.png",
        ⲆⵠⲆⵠᐃⵠᐃ: "img/play-button-out.png",
        ⵠΔⲆⲆᐃⵠΔ: "img/play-button-in.png",
        ΔⵠᐃΔⵠᐃΔ: "img/play-button-click.png",
        ⲆⲆΔⲆⲆᐃΔΔⵠ: "img/app-store-badge.png",
        ᐃΔΔⵠⲆΔⵠⵠΔ: "img/play-store-badge.png",
        ⵠᐃⵠⲆᐃⵠΔᐃΔ: "img/mobile-boxad.png",
        ᐃⲆⲆΔΔΔᐃ: "img/modify-name-out.png",
        ⵠⲆᐃⲆΔⲆΔ: "img/modify-name-in.png",
        ᐃⲆΔᐃᐃⲆⵠ: "img/modify-name-click.png",
        ⵠⵠⵠΔᐃᐃᐃ: "img/copy-id-button-out.png",
        ⵠⲆⲆΔᐃⵠⵠ: "img/copy-id-button-hover.png",
        ⲆⲆᐃⲆΔⲆΔ: "img/copy-id-button-active.png",
        ⵠⵠⲆΔΔᐃⲆ: "img/yes-button-out.png",
        ᐃⵠⵠⲆⵠᐃⲆ: "img/yes-button-in.png",
        ᐃΔⵠⲆⵠΔⵠ: "img/yes-button-click.png",
        ᐃᐃᐃⲆⵠⲆⲆ: "img/yes-300-button-out.png",
        ΔⵠΔⵠᐃⲆⵠ: "img/yes-300-button-in.png",
        ᐃⲆᐃΔᐃⵠΔ: "img/yes-300-button-click.png",
        ΔⲆΔᐃⵠΔΔ: "img/no-button-out.png",
        ΔΔᐃᐃᐃΔᐃ: "img/no-button-in.png",
        ⵠᐃΔΔⵠᐃΔ: "img/no-button-click.png",
        ΔⵠᐃᐃⲆⲆΔ: "img/no-thanks-button-out.png",
        ᐃⲆᐃᐃⲆⵠⲆ: "img/no-thanks-button-in.png",
        ᐃᐃᐃΔⵠⵠᐃ: "img/no-thanks-button-click.png",
        ⲆᐃⲆᐃΔΔᐃ: "img/shop-button-out.png",
        ⵠⲆΔⲆⲆᐃⵠ: "img/shop-button-in.png",
        ⲆᐃᐃΔᐃᐃΔ: "img/shop-button-click.png",
        ⵠⲆⵠⲆⲆⵠᐃ: "img/logout-out.png",
        ᐃⲆⲆⵠⲆᐃⵠ: "img/logout-in.png",
        ⲆⲆᐃᐃΔⲆⲆ: "img/logout-click.png",
        ᐃⵠΔⲆᐃⲆⲆ: "img/terms-button-out.png",
        ᐃⲆᐃⵠⵠᐃᐃ: "img/terms-button-in.png",
        ⲆΔⵠⵠⵠⵠᐃ: "img/terms-button-click.png",
        Δᐃᐃⵠᐃⵠᐃ: "img/tutorial-icon.png",
        ⵠⲆⵠⲆᐃⵠⲆ: "img/skins-icon.png",
        ΔⵠΔⵠⲆᐃᐃ: "img/shop-icon.png",
        ΔΔΔᐃᐃⲆⲆΔΔ: "img/paint-icon.png",
        ΔⲆⵠΔⲆΔⲆ: "img/leaderboard-icon.png",
        ᐃⵠⵠⵠΔᐃⲆ: "img/start-icon.png",
        ΔᐃⵠⲆⵠᐃⲆ: "img/profile-icon.png",
        ᐃᐃᐃΔΔΔΔ: "img/server-access-icon2.png",
        ΔΔⵠⵠⵠΔΔ: "img/button-homepage-bg-out.png",
        ᐃΔⵠΔᐃⲆᐃ: "img/button-homepage-bg-in.png",
        ΔⵠⲆⲆΔⵠΔ: "img/button-homepage-bg-click.png",
        ⲆⵠⲆⲆᐃⵠⲆ: "img/button-bottom-homepage-bg-out.png",
        ΔⵠΔⲆΔᐃΔ: "img/button-bottom-homepage-bg-in.png",
        ⵠΔⲆΔⲆΔⵠ: "img/button-bottom-homepage-bg-click.png",
        ΔᐃΔᐃΔᐃⲆ: "img/lvl-player.png",
        ⲆΔᐃᐃΔⵠᐃ: "img/avatar-player.png",
        ΔΔΔⲆⵠⵠⲆ: "img/avatar-player1.png",
        ΔⲆᐃⲆΔⲆⲆ: "img/avatar-player2.png",
        ΔⲆⵠⵠⵠⵠⲆ: "img/avatar-player3.png",
        ᐃⲆᐃᐃᐃⲆⵠ: "img/avatar-player4.png",
        ⲆΔᐃᐃΔⲆᐃ: "img/avatar-player5.png",
        ⲆᐃⵠⵠⵠⲆⵠ: "img/avatar-player6.png",
        Δᐃⵠⵠᐃᐃⵠ: "img/avatar-player7.png",
        ⲆⲆΔⵠⵠΔΔ: "img/avatar-player8.png",
        ᐃⵠⲆⵠΔᐃΔ: "img/avatar-player9.png",
        ⲆⵠΔᐃΔΔΔ: "img/avatar-player10.png",
        ᐃᐃⵠΔᐃΔᐃ: "img/avatar-player11.png",
        ⵠⲆⲆᐃΔΔⵠ: "img/avatar-player12.png",
        ⲆⵠᐃᐃⵠⲆΔ: "img/avatar-player13.png",
        ⵠΔⲆᐃⲆᐃᐃ: "img/avatar-player14.png",
        ᐃᐃⵠΔⵠᐃⵠ: "img/avatar-player14.png",
        ⲆⵠⲆΔᐃⵠⵠ: "img/avatar-player14.png",
        ⲆⵠⲆⲆⲆⲆᐃ: "img/avatar-player14.png",
        ΔⵠΔΔᐃⲆΔΔΔ: "img/golden-bread.png",
        ⲆⲆⵠⲆⲆⲆⲆ: "img/buy-bread-out.png",
        ⵠⵠΔΔᐃⵠⵠ: "img/buy-bread-in.png",
        ΔΔΔⲆⵠⲆΔ: "img/buy-bread-click.png",
        ΔΔΔⲆⵠⲆⲆ: "img/gauge.png",
        ᐃⵠⲆΔᐃᐃΔⵠⲆ: "img/season-4-out.png",
        ᐃᐃΔΔⲆⲆΔⵠⵠ: "img/season-4-in.png",
        ⲆᐃΔᐃⲆⵠⲆᐃⵠ: "img/season-4-click.png",
        ⲆᐃⲆᐃⲆΔⲆⵠⵠ: "img/season4-box.png",
        ᐃⲆⵠΔⲆᐃⲆⲆⵠ: "img/season-5-out.png",
        ᐃⵠΔⲆⵠᐃⵠⵠⲆ: "img/season-5-in.png",
        ᐃⵠⲆΔⵠⲆᐃⵠⲆ: "img/season-5-click.png",
        ⵠⵠⲆⲆⲆⲆΔⲆⲆ: "img/season5-box.png",
        ΔⲆⲆⲆⵠⲆⵠ: "img/season-6-out.png",
        ⲆΔΔⲆⲆⵠⵠ: "img/season-6-in.png",
        ⲆⲆⲆⲆⵠΔⲆ: "img/season-6-click.png",
        ᐃⵠⲆⵠᐃⲆᐃ: "img/season6-box.png",
        ⲆⲆⲆⲆⲆᐃⲆ: "img/profile3-box.png",
        ᐃᐃⲆΔᐃⲆΔ: "img/skins-box.png",
        ⲆΔΔᐃⵠᐃⲆ: "img/shop-box.png",
        ⵠΔΔᐃΔⲆⲆᐃᐃ: "img/private-server-box.png",
        ⵠⵠⲆⲆⲆⲆⲆ: "img/location-box.png",
        ΔⵠᐃΔⵠΔᐃ: "img/server-duration-box.png",
        ᐃⵠⲆᐃΔⵠᐃ: "img/tutorial-box.png",
        ⲆΔᐃⵠⵠΔⲆ: "img/leaderboard2-box.png",
        ΔΔᐃΔⲆⵠᐃ: "img/buy-breads-box.png",
        ᐃᐃΔⵠⵠΔⲆ: "img/bag-box.png",
        ⵠⵠⲆⲆⵠᐃⲆ: "img/deadbox-box.png",
        ΔⲆΔᐃΔΔΔ: "img/book-box.png",
        ΔⲆΔΔΔΔⵠ: "img/accessories-box.png",
        ⵠⲆΔⲆⲆⲆΔ: "img/customskin-box.png",
        ΔΔⲆΔⲆᐃⲆ: "img/bag-lasts.png",
        ⲆⵠᐃΔⲆⵠᐃ: "img/server-lasts.png",
        ΔⵠⲆΔΔⲆΔ: "img/server-access-box3.png",
        ᐃΔᐃᐃⲆⵠⲆ: "img/lootbox-box.png",
        ⵠᐃΔᐃΔⵠⲆ: "img/change-nickname0.png",
        ⵠΔⵠⵠᐃⲆⵠ: "img/change-nickname1.png",
        ⲆⵠΔᐃᐃⵠⵠ: "img/cheating-box.png",
        ⵠⵠΔⲆⵠᐃᐃⵠᐃ: "img/daily-quest-box.png",
        ΔⲆⲆⲆⵠⲆΔⵠⲆ: "img/daily-5-bread.png",
        ⵠⲆΔⲆᐃᐃᐃⵠⲆ: "img/daily-10-bread.png",
        ⲆⲆᐃΔⲆⲆⲆⲆᐃ: "img/daily-valid.png",
        ⲆᐃᐃᐃⵠⲆⵠ: "img/normal-profile-out.png",
        ⵠⲆᐃΔΔⲆⲆ: "img/normal-profile-in.png",
        ⲆⵠⵠᐃⵠⲆᐃ: "img/normal-profile-click.png",
        ⲆⵠᐃⲆΔΔⵠ: "img/forest-profile-out.png",
        ᐃΔⵠⵠᐃⵠⲆ: "img/forest-profile-in.png",
        ⲆᐃΔⵠⲆⵠᐃ: "img/forest-profile-click.png",
        ⲆⲆᐃᐃΔⲆⵠ: "img/zombie-profile-out.png",
        ⵠⵠⵠⲆΔΔⲆ: "img/zombie-profile-in.png",
        ΔᐃⲆⲆᐃⲆᐃ: "img/zombie-profile-click.png",
        ⲆⲆⲆΔᐃⲆΔ: "img/vampire-profile-out.png",
        Ⲇᐃⵠⵠⵠᐃⵠ: "img/vampire-profile-in.png",
        ΔᐃⵠⵠⲆⵠΔ: "img/vampire-profile-click.png",
        ⲆⵠΔΔⵠᐃᐃ: "img/total-profile-out.png",
        ⲆⵠᐃᐃⵠᐃΔ: "img/total-profile-in.png",
        ΔᐃᐃⲆⲆᐃᐃ: "img/total-profile-click.png",
        ᐃᐃΔΔᐃᐃⲆ: "img/season1-out.png",
        ⲆⲆᐃⲆᐃΔᐃ: "img/season1-in.png",
        ΔᐃⲆⲆⲆⲆᐃ: "img/season1-click.png",
        ⲆⲆⲆⵠΔᐃⵠ: "img/season2-out.png",
        ᐃΔΔΔⲆⲆΔ: "img/season2-in.png",
        ⲆⵠⵠⵠⵠΔΔ: "img/season2-click.png",
        ΔᐃᐃᐃᐃⲆⲆ: "img/season3-out.png",
        ⵠⵠⵠⲆⵠⵠⵠ: "img/season3-in.png",
        ⲆⲆⲆⲆⵠⵠΔ: "img/season3-click.png",
        ᐃⲆᐃᐃⵠᐃⲆ: "img/season4-out.png",
        ΔᐃᐃⵠⲆᐃⲆ: "img/season4-in.png",
        ⲆⲆⲆⵠΔᐃᐃ: "img/season4-click.png",
        ΔᐃᐃⵠⲆⵠⵠ: "img/season5-out.png",
        ⲆⲆΔⲆⵠΔᐃ: "img/season5-in.png",
        ᐃⵠⲆᐃᐃΔⵠ: "img/season5-click.png",
        ΔᐃᐃⵠⲆⲆΔ: "img/season6-out.png",
        ⵠⵠⲆΔⲆⵠᐃ: "img/season6-in.png",
        ᐃᐃᐃΔᐃΔⵠ: "img/season6-click.png",
        ΔᐃⵠΔⵠᐃⵠ: "img/locked-skin-alert.png",
        Δᐃⵠᐃⵠᐃᐃ: "img/locked-custom-alert.png",
        ᐃΔⲆⵠΔⵠⲆ: "img/bg-red-locked.png",
        ᐃⲆⲆⲆᐃΔⵠ: "img/skin-button-out.png",
        ⲆⵠΔᐃᐃⲆⲆ: "img/skin-button-in.png",
        ⵠⲆΔᐃᐃⲆᐃ: "img/skin-button-click.png",
        ᐃⲆⵠⲆⲆΔᐃ: "img/accessory-button-out.png",
        ΔΔⵠᐃⵠⵠᐃ: "img/accessory-button-in.png",
        ᐃⲆⲆΔⲆⵠⲆ: "img/accessory-button-click.png",
        ⲆⵠⲆⲆᐃᐃᐃ: "img/bag-button-out.png",
        ΔⲆⲆᐃᐃⲆⲆ: "img/bag-button-in.png",
        ᐃᐃⵠⵠⲆⵠΔ: "img/bag-button-click.png",
        ⲆᐃΔΔⲆΔⲆ: "img/book-button-out.png",
        ⵠⲆⵠΔⵠⲆᐃ: "img/book-button-in.png",
        ΔⲆⲆⵠᐃᐃΔ: "img/book-button-click.png",
        ⵠΔⲆⵠⲆΔⲆ: "img/deadbox-button-out.png",
        ΔⲆⲆΔᐃⲆᐃ: "img/deadbox-button-in.png",
        ᐃⲆⵠⵠⲆⲆᐃ: "img/deadbox-button-click.png",
        ᐃⵠΔⵠⲆⵠⲆ: "img/loot-button-out.png",
        ᐃᐃᐃᐃⵠⵠΔ: "img/loot-button-in.png",
        ⲆΔΔᐃⵠΔⵠ: "img/loot-button-click.png",
        ΔⲆⵠⵠⲆⲆᐃ: "img/free-item-out.png",
        ⲆΔΔᐃΔⵠⲆ: "img/free-item-in.png",
        ᐃⵠᐃᐃΔⲆⲆ: "img/free-item-click.png",
        ΔΔⵠΔ: "img/wood-item-out.png",
        ᐃΔⵠᐃ: "img/wood-item-in.png",
        ΔⲆⲆΔ: "img/wood-item-click.png",
        ΔⵠΔᐃᐃᐃᐃ: "img/stone-item.png",
        ⵠⵠΔᐃᐃᐃᐃ: "img/stone-item-in.png",
        ᐃᐃΔⵠⲆⲆᐃ: "img/stone-item-click.png",
        ᐃᐃⲆΔᐃΔΔ: "img/gold-item.png",
        ᐃᐃΔᐃᐃⵠⵠ: "img/gold-item-in.png",
        ᐃᐃᐃᐃᐃⵠⵠ: "img/gold-item-click.png",
        ⵠⲆⲆⲆᐃⵠⲆ: "img/diamond-item.png",
        ⵠⲆΔᐃΔΔΔ: "img/diamond-item-in.png",
        ᐃᐃΔᐃⵠΔΔ: "img/diamond-item-click.png",
        ᐃⵠΔΔⲆᐃΔ: "img/amethyst-item.png",
        ⵠⵠΔΔᐃⲆⲆ: "img/amethyst-item-in.png",
        ⵠᐃΔⲆⵠᐃⲆ: "img/amethyst-item-click.png",
        ΔⵠⵠⲆⲆⵠⲆ: "img/reidite-item.png",
        ⲆΔΔⵠΔᐃΔ: "img/reidite-item-in.png",
        ΔⵠⲆⵠΔΔᐃ: "img/reidite-item-click.png",
        ⵠⲆΔᐃΔᐃⲆ: "img/special-item-out.png",
        ᐃΔⵠᐃΔⵠᐃ: "img/special-item-in.png",
        ⲆⲆⵠᐃΔᐃⵠ: "img/special-item-click.png",
        ⵠⲆΔᐃᐃᐃΔ: "img/level-item-out.png",
        ⲆⲆΔⲆᐃΔⲆ: "img/level-item-in.png",
        ᐃⵠΔⲆⲆΔΔ: "img/level-item-click.png",
        ⵠⵠΔΔⵠΔⵠ: "img/skin-previous-out.png",
        ΔΔᐃᐃⵠᐃΔ: "img/skin-previous-in.png",
        ΔᐃᐃΔⲆΔⲆ: "img/skin-previous-click.png",
        ᐃᐃΔΔⵠΔⲆ: "img/skin-next-out.png",
        ΔΔⵠΔⵠΔⵠ: "img/skin-next-in.png",
        ⵠⵠᐃᐃⲆᐃᐃ: "img/skin-next-click.png",
        ⵠΔⵠⵠⵠ: "img/back-button-out.png",
        ᐃΔⵠΔᐃ: "img/back-button-in.png",
        ⵠⵠΔⲆΔ: "img/back-button-click.png",
        ᐃⲆΔᐃⵠⵠⵠ: "img/get-more-button-out.png",
        ⵠⵠΔΔⲆΔΔ: "img/get-more-button-in.png",
        ᐃᐃΔⵠΔᐃⵠ: "img/get-more-button-click.png",
        ΔᐃᐃⵠⲆᐃⵠ: "img/currency1-out.png",
        ⵠᐃⲆⵠᐃⲆⵠ: "img/currency1-in.png",
        ΔΔⵠⵠΔΔᐃ: "img/currency1-click.png",
        ΔᐃᐃΔⵠᐃΔ: "img/currency2-out.png",
        ᐃΔᐃⵠⲆⵠΔ: "img/currency2-in.png",
        ⲆΔᐃΔⲆⲆᐃ: "img/currency2-click.png",
        ⲆᐃᐃΔΔᐃᐃ: "img/currency3-out.png",
        ⲆⲆⲆᐃΔⲆᐃ: "img/currency3-in.png",
        ⲆⲆⵠⵠⵠⵠᐃ: "img/currency3-click.png",
        ⵠⵠⵠᐃⲆⵠΔ: "img/currency4-out.png",
        ᐃⲆᐃⲆⵠⵠᐃ: "img/currency4-in.png",
        ΔΔⵠΔΔᐃⵠ: "img/currency4-click.png",
        ᐃⵠⲆᐃΔΔΔ: "img/currency5-out.png",
        ⵠⵠΔⵠⵠΔⲆ: "img/currency5-in.png",
        ⲆᐃⵠΔΔⵠᐃ: "img/currency5-click.png",
        ΔⵠⵠⲆᐃⲆᐃ: "img/price1-out.png",
        ᐃⵠᐃᐃⲆᐃⵠ: "img/price1-in.png",
        ⵠⲆΔᐃΔⲆΔ: "img/price1-click.png",
        ΔᐃⲆⵠⲆΔΔ: "img/price2-out.png",
        ⵠᐃⵠΔⲆᐃᐃ: "img/price2-in.png",
        ᐃΔⲆⵠΔᐃᐃ: "img/price2-click.png",
        ⵠⵠⲆᐃΔᐃⲆ: "img/price3-out.png",
        ᐃⲆⲆⵠΔⲆⲆ: "img/price3-in.png",
        ⵠⲆΔΔΔⵠᐃ: "img/price3-click.png",
        ⵠΔⵠᐃᐃᐃⲆ: "img/price4-out.png",
        ⲆΔᐃΔⲆᐃΔ: "img/price4-in.png",
        ⵠᐃΔΔⲆᐃᐃ: "img/price4-click.png",
        ⵠᐃᐃᐃΔΔᐃ: "img/price5-out.png",
        ᐃⵠᐃᐃΔⲆᐃ: "img/price5-in.png",
        ᐃᐃᐃΔᐃᐃᐃ: "img/price5-click.png",
        ⲆⲆΔⵠⵠⲆⵠⲆⲆ: "img/buy-private-server-out.png",
        ᐃⵠΔᐃᐃⲆᐃⵠΔ: "img/buy-private-server-in.png",
        ᐃⲆⲆⲆᐃΔⲆΔΔ: "img/buy-private-server-click.png",
        ΔᐃᐃᐃΔᐃᐃ: "img/atlanta-button-out.png",
        ΔⲆⵠⲆⵠⵠᐃ: "img/atlanta-button-in.png",
        ⵠⵠⵠⵠᐃⲆⲆ: "img/atlanta-button-click.png",
        ⲆᐃᐃⵠᐃΔⲆ: "img/los-angeles-button-out.png",
        ᐃⵠᐃⲆᐃΔΔ: "img/los-angeles-button-in.png",
        ⲆⵠΔⲆⵠΔⲆ: "img/los-angeles-button-click.png",
        ΔΔⲆᐃΔⵠⲆ: "img/sydney-button-out.png",
        ΔΔⵠᐃΔⲆⲆ: "img/sydney-button-in.png",
        ᐃΔΔⲆⲆⵠΔ: "img/sydney-button-click.png",
        ⲆⵠΔⵠⲆΔⵠ: "img/frankfurt-button-out.png",
        ⵠΔⵠⲆⵠᐃᐃ: "img/frankfurt-button-in.png",
        ΔⲆⲆⲆⲆᐃΔ: "img/frankfurt-button-click.png",
        ᐃᐃΔΔᐃⵠⵠ: "img/osaka-button-out.png",
        ΔⵠΔⲆⲆᐃⲆ: "img/osaka-button-in.png",
        ⵠΔᐃⵠΔᐃⵠ: "img/osaka-button-click.png",
        ᐃⲆᐃᐃⲆⵠⲆΔΔ: "img/yes-location-out.png",
        ⵠⲆⵠΔΔᐃⵠⵠⲆ: "img/yes-location-in.png",
        ΔⲆᐃᐃⲆⲆΔᐃⲆ: "img/yes-location-click.png",
        ⵠᐃΔⲆΔⵠΔ: "img/3days-button-out.png",
        ⵠΔᐃᐃΔⲆᐃ: "img/3days-button-in.png",
        ᐃⵠⵠΔⲆⵠⲆ: "img/3days-button-click.png",
        ΔᐃⲆⲆΔⵠⲆ: "img/7days-button-out.png",
        ᐃⲆⵠΔⲆⵠᐃ: "img/7days-button-in.png",
        ΔⲆᐃⵠⵠΔΔ: "img/7days-button-click.png",
        ΔΔⲆᐃⵠⵠᐃ: "img/30days-button-out.png",
        ⵠⲆΔⲆⲆⵠΔ: "img/30days-button-in.png",
        ⵠᐃΔⲆⲆⵠⵠ: "img/30days-button-click.png",
        ΔⵠΔⵠⲆΔⲆ: "img/90days-button-out.png",
        ⵠᐃⲆΔΔᐃⵠ: "img/90days-button-in.png",
        ⵠⲆⲆⲆΔᐃⵠ: "img/90days-button-click.png",
        ΔᐃᐃᐃⲆΔΔ: "img/spin1.png",
        ⲆⲆⲆⲆΔΔΔ: "img/spin2.png",
        ⲆⵠΔⵠⵠΔᐃ: "img/spin3.png",
        ᐃΔΔΔᐃⲆΔ: "img/spin4.png",
        ⲆΔⵠⲆᐃᐃⵠ: "img/spin5.png",
        ᐃΔⲆⵠⵠᐃΔ: "img/spin6.png",
        ⲆᐃΔΔⲆⵠⲆ: "img/arrow-spin.png",
        ⲆΔΔⲆⵠⲆⵠ: "img/spin-button-1-out.png",
        ΔΔⵠᐃⲆⲆᐃ: "img/spin-button-1-in.png",
        ⲆⲆΔⵠⲆᐃⵠ: "img/spin-button-1-click.png",
        ᐃᐃⲆⵠⲆᐃΔ: "img/spin-button-2-out.png",
        ⵠⲆᐃⲆⵠᐃΔ: "img/spin-button-2-in.png",
        ⵠΔᐃⵠⲆⲆᐃ: "img/spin-button-2-click.png",
        ⵠⵠΔᐃΔⵠⵠ: "img/spin-button-3-out.png",
        ⵠᐃᐃⵠⵠᐃΔ: "img/spin-button-3-in.png",
        ⲆᐃΔΔⲆᐃΔ: "img/spin-button-3-click.png",
        ⵠᐃΔᐃᐃⲆⲆ: "img/spin-button-4-out.png",
        ⵠᐃΔⲆΔⲆᐃ: "img/spin-button-4-in.png",
        ⲆᐃΔⲆΔⵠᐃ: "img/spin-button-4-click.png",
        ΔⲆⲆⲆᐃᐃΔ: "img/spin-button-5-out.png",
        ΔᐃᐃⲆⵠⲆᐃ: "img/spin-button-5-in.png",
        ⵠⵠⲆⲆΔⲆΔ: "img/spin-button-5-click.png",
        ⵠᐃΔⲆⲆⲆⲆ: "img/spin-light.png",
        ⵠⵠΔΔΔⲆΔ: "img/tuto-wiki-out.png",
        ᐃⲆⲆΔⵠⵠⲆ: "img/tuto-wiki-in.png",
        ⲆⲆⲆⵠⵠⵠⵠ: "img/tuto-wiki-click.png",
        ΔΔⲆⲆᐃᐃⵠ: "img/tuto-previous-out.png",
        ᐃⵠΔⲆΔΔᐃ: "img/tuto-previous-in.png",
        ⵠⵠΔⲆΔⵠⲆ: "img/tuto-previous-click.png",
        ᐃⵠⵠⲆΔⵠΔ: "img/tuto-next-out.png",
        ᐃⲆᐃⲆᐃΔΔ: "img/tuto-next-in.png",
        ᐃⲆⲆⲆⵠⵠⲆ: "img/tuto-next-click.png",
        ⲆᐃΔᐃᐃⲆⲆ: "img/time-leaderboard-out.png",
        ⲆⵠⵠΔᐃⵠⲆ: "img/time-leaderboard-in.png",
        ᐃⵠᐃⵠᐃΔᐃ: "img/time-leaderboard-click.png",
        ᐃⲆᐃΔⲆⵠΔ: "img/score-leaderboard-out.png",
        ⵠⵠⵠⵠⲆᐃΔ: "img/score-leaderboard-in.png",
        ⲆᐃⵠⵠΔΔⵠ: "img/score-leaderboard-click.png",
        ⲆΔΔᐃΔⵠⵠ: "img/lvl-leaderboard-out.png",
        ⵠᐃⵠⵠⲆΔⵠ: "img/lvl-leaderboard-in.png",
        ΔⲆⲆⲆᐃⲆⵠ: "img/lvl-leaderboard-click.png",
        ⵠᐃⲆⵠⵠⵠⵠ: "img/kill-leaderboard-out.png",
        ᐃΔⲆⵠⲆⵠⲆ: "img/kill-leaderboard-in.png",
        ⵠⵠⲆᐃᐃⲆΔ: "img/kill-leaderboard-click.png",
        ⵠⵠⵠᐃⵠⵠⲆ: "img/all-leaderboard-out.png",
        ⵠⲆⲆΔᐃΔΔ: "img/all-leaderboard-in.png",
        ⵠⵠⵠᐃᐃΔⵠ: "img/all-leaderboard-click.png",
        ᐃⵠᐃΔΔΔΔ: "img/today-leaderboard-out.png",
        ᐃⵠΔⵠⲆᐃⵠ: "img/today-leaderboard-in.png",
        ᐃⵠⵠⵠΔΔⵠ: "img/today-leaderboard-click.png",
        ⲆⲆⲆᐃᐃⵠⵠ: "img/week-leaderboard-out.png",
        ⲆΔΔᐃΔⵠᐃ: "img/week-leaderboard-in.png",
        ᐃⲆⵠᐃⲆⲆΔ: "img/week-leaderboard-click.png",
        ⵠⲆⲆⲆⵠⲆⵠ: "img/season1-out.png",
        ⵠΔᐃᐃⲆⲆⲆ: "img/season1-in.png",
        ⲆⵠΔᐃⵠⲆⵠ: "img/season1-click.png",
        ΔⵠⵠΔⵠⵠᐃ: "img/season2-out.png",
        ΔⲆⲆᐃⲆΔΔ: "img/season2-in.png",
        ⵠⲆΔΔⲆⵠⵠ: "img/season2-click.png",
        ᐃⲆⲆⵠΔⲆᐃ: "img/season3-out.png",
        ⵠⵠⲆᐃⲆᐃᐃ: "img/season3-in.png",
        ΔⵠᐃⵠΔⲆᐃ: "img/season3-click.png",
        ⲆⲆΔΔⲆᐃΔ: "img/season4-out.png",
        ⲆᐃᐃⲆᐃᐃᐃ: "img/season4-in.png",
        ᐃⲆⵠΔΔⲆⵠ: "img/season4-click.png",
        ΔⲆⲆᐃⲆᐃΔ: "img/season5-out.png",
        ⲆⲆⵠⲆΔΔᐃ: "img/season5-in.png",
        ᐃⲆᐃᐃⵠⲆⵠ: "img/season5-click.png",
        ⵠⲆⵠᐃΔΔᐃ: "img/season6-out.png",
        ᐃΔΔⵠᐃᐃΔ: "img/season6-in.png",
        ᐃᐃⲆΔΔᐃΔ: "img/season6-click.png",
        ΔⵠⲆΔΔΔΔ: "img/total-lead-out.png",
        ΔⵠⵠΔᐃΔᐃ: "img/total-lead-in.png",
        ΔⲆⲆⵠᐃⵠⲆ: "img/total-lead-click.png",
        ⲆⵠΔⲆⵠΔΔ: "img/normal-lead-out.png",
        ⵠΔⵠΔΔⵠΔ: "img/normal-lead-in.png",
        ΔΔΔⲆΔᐃᐃ: "img/normal-lead-click.png",
        ⲆⵠⵠᐃⲆⵠᐃ: "img/forest-lead-out.png",
        ⲆⲆᐃⲆᐃΔⲆ: "img/forest-lead-in.png",
        ⵠⲆⵠᐃᐃᐃΔ: "img/forest-lead-click.png",
        ⵠΔⵠᐃⲆᐃⵠ: "img/vampire-lead-out.png",
        ΔⲆⵠΔⲆⵠⵠ: "img/vampire-lead-in.png",
        ᐃⵠⵠⵠᐃᐃⵠ: "img/vampire-lead-click.png",
        ΔⲆⵠⲆᐃⵠⲆ: "img/zombie-lead-out.png",
        ⵠᐃⲆᐃΔΔᐃ: "img/zombie-lead-in.png",
        ⲆⲆΔⵠΔΔΔ: "img/zombie-lead-click.png",
        ΔΔᐃⵠΔΔᐃ: "img/day-level5.png",
        ⲆᐃᐃⵠⲆΔⵠ: "img/night-level5.png",
        ᐃⵠΔⵠΔΔⵠ: "img/day-level10.png",
        ⲆⵠⲆⵠΔⲆⵠ: "img/night-level10.png",
        ⵠΔᐃⲆⲆᐃᐃ: "img/day-level15.png",
        ⲆᐃΔⵠᐃΔΔ: "img/night-level15.png",
        ⲆⲆΔⲆⲆΔΔ: "img/day-level20.png",
        ⲆΔⵠⲆᐃⵠⵠ: "img/night-level20.png",
        ⲆⵠΔⲆⵠⲆⲆ: "img/day-level25.png",
        ΔᐃⲆΔⲆⲆⲆ: "img/night-level25.png",
        ᐃⵠⵠΔⲆᐃΔ: "img/day-level30.png",
        ⵠΔⲆⲆⵠΔⲆ: "img/night-level30.png",
        ᐃⵠᐃⲆⵠⵠⵠ: "img/day-level35.png",
        ΔⵠᐃΔⲆⵠΔ: "img/night-level35.png",
        ᐃᐃᐃⵠᐃᐃᐃ: "img/day-level40.png",
        ⵠᐃᐃΔⲆⵠᐃ: "img/night-level40.png",
        ΔⵠΔⲆᐃᐃⲆ: "img/day-level45.png",
        ⵠΔⵠΔᐃᐃⵠ: "img/night-level45.png",
        ΔⲆⵠⵠᐃⵠΔ: "img/day-level50.png",
        ⵠΔᐃᐃⵠⵠⲆ: "img/night-level50.png",
        ᐃΔⵠⲆΔⵠᐃ: "img/day-level55.png",
        ⵠᐃᐃⵠⲆΔⲆ: "img/night-level55.png",
        ⲆᐃᐃⲆΔⲆⵠ: "img/day-level60.png",
        ⲆᐃᐃᐃΔᐃᐃ: "img/night-level60.png",
        ΔᐃᐃⲆⲆΔΔ: "img/day-skin-devast0.png",
        ᐃᐃΔᐃⲆᐃⲆ: "img/night-skin-devast0.png",
        ⵠΔⲆⲆΔⲆᐃ: "img/day-hand-devaster.png",
        ᐃⵠⵠⵠⲆⵠᐃ: "img/night-hand-devaster.png",
        ᐃᐃⵠⲆⵠΔⵠ: "img/day-skin-star0.png",
        ΔᐃᐃⵠᐃⲆᐃ: "img/night-skin-star0.png",
        ᐃⲆⵠΔⲆⲆⲆ: "img/day-hand-star0.png",
        ⵠΔᐃⵠⵠⲆΔ: "img/night-hand-star0.png",
        ΔⵠⵠⲆᐃⵠᐃ: "img/day-vampire.png",
        ⲆᐃⵠⲆΔⵠΔ: "img/night-vampire.png",
        ΔⵠⲆᐃΔΔᐃ: "img/day-hand-vampire.png",
        ⲆⲆᐃⵠⲆΔⲆ: "img/night-hand-vampire.png",
        ⲆΔΔΔⲆⵠᐃ: "img/day-zombie.png",
        ⵠᐃⲆⵠΔᐃΔ: "img/night-zombie.png",
        ⵠⲆⲆⵠΔⲆⲆ: "img/day-hand-zombie.png",
        ΔΔᐃⵠⲆᐃⲆ: "img/night-hand-zombie.png",
        ᐃⵠᐃⵠΔΔΔ: "img/day-skin113.png",
        Δⵠᐃᐃᐃᐃⵠ: "img/night-skin113.png",
        ΔⲆⵠΔⵠΔᐃ: "img/day-hand-skin113.png",
        ΔⲆⵠⲆⲆΔΔ: "img/night-hand-skin113.png",
        ΔⲆᐃᐃⵠⵠⵠ: "img/day-skin0.png",
        ΔⲆⵠⵠⲆⵠⲆ: "img/night-skin0.png",
        ΔᐃⲆᐃⲆⲆΔ: "img/day-skin1.png",
        ⲆⵠⵠᐃΔᐃⲆ: "img/night-skin1.png",
        ⲆⲆΔΔΔΔⲆ: "img/day-skin2.png",
        ᐃᐃⵠⵠⵠΔᐃ: "img/night-skin2.png",
        ⲆΔᐃⵠΔⵠⲆ: "img/day-skin3.png",
        ΔᐃΔⲆⲆΔⵠ: "img/night-skin3.png",
        ⲆⲆᐃΔⲆᐃΔ: "img/day-skin4.png",
        ⵠΔΔΔᐃΔΔ: "img/night-skin4.png",
        ⵠΔⵠΔᐃⵠⲆ: "img/day-skin5.png",
        ΔᐃⲆΔⵠⵠⵠ: "img/night-skin5.png",
        ⲆⵠⵠⵠⲆᐃⵠ: "img/day-skin6.png",
        ΔⵠΔⲆⲆᐃⵠ: "img/night-skin6.png",
        ⲆΔⲆᐃⵠⲆᐃ: "img/day-skin7.png",
        ΔⲆⲆⵠΔΔⵠ: "img/night-skin7.png",
        ⵠⵠΔⲆⵠⵠⲆ: "img/day-skin8.png",
        ⲆⲆⲆⲆⵠᐃΔ: "img/night-skin8.png",
        ᐃΔΔᐃᐃⵠⵠ: "img/day-skin9.png",
        ⵠⲆⲆᐃᐃⵠΔ: "img/night-skin9.png",
        ⲆᐃᐃᐃⵠΔⲆ: "img/day-skin10.png",
        ⲆⲆᐃⵠΔⵠΔ: "img/night-skin10.png",
        ⵠⵠᐃⲆⲆᐃᐃ: "img/day-skin11.png",
        ⲆᐃⲆᐃᐃᐃᐃ: "img/night-skin11.png",
        ΔⲆΔⲆᐃᐃΔ: "img/day-skin12.png",
        ⵠΔⵠᐃᐃⵠⵠ: "img/night-skin12.png",
        ᐃᐃⲆᐃⲆᐃⲆ: "img/day-skin13.png",
        ⵠⲆΔⲆⵠᐃⲆ: "img/night-skin13.png",
        ⲆΔⵠⲆΔⲆᐃ: "img/day-skin14.png",
        ⲆΔⲆΔⵠᐃᐃ: "img/night-skin14.png",
        ⲆΔΔⵠⵠⵠᐃ: "img/day-skin15.png",
        ⲆΔΔΔᐃᐃⵠ: "img/night-skin15.png",
        ⲆΔⵠⲆᐃⲆⵠ: "img/day-skin16.png",
        ᐃⵠⵠᐃΔⵠⵠ: "img/night-skin16.png",
        ⲆᐃᐃⲆⵠΔⲆ: "img/day-skin17.png",
        ΔΔⲆΔΔⲆⲆ: "img/night-skin17.png",
        ᐃΔᐃⵠΔᐃⵠ: "img/day-skin18.png",
        ⲆᐃᐃⵠᐃⲆΔ: "img/night-skin18.png",
        ΔᐃΔⵠⵠⲆΔ: "img/day-skin19.png",
        ᐃᐃⵠᐃΔΔⵠ: "img/night-skin19.png",
        ᐃᐃᐃᐃᐃⵠΔ: "img/day-skin20.png",
        ⲆΔᐃΔᐃⲆⲆ: "img/night-skin20.png",
        ⵠⲆⲆⵠⲆⲆᐃ: "img/day-skin21.png",
        ⵠᐃΔΔⵠⵠⵠ: "img/night-skin21.png",
        ⲆΔⲆᐃⵠᐃΔ: "img/day-skin22.png",
        ᐃᐃⲆΔΔΔᐃ: "img/night-skin22.png",
        ⵠⲆⲆΔⵠΔΔ: "img/day-skin23.png",
        ⲆᐃⵠᐃⵠᐃⲆ: "img/night-skin23.png",
        ⵠⵠⵠⲆⲆΔᐃ: "img/day-skin24.png",
        ⵠΔᐃΔⵠᐃⲆ: "img/night-skin24.png",
        ΔΔⵠⲆⲆⲆΔ: "img/day-skin25.png",
        ⵠⵠⲆᐃΔΔⵠ: "img/night-skin25.png",
        ᐃⵠΔᐃᐃⵠⵠ: "img/day-skin26.png",
        ΔΔᐃᐃᐃᐃⵠ: "img/night-skin26.png",
        ⵠΔⲆΔⲆᐃⵠ: "img/day-skin27.png",
        ⵠⵠⲆΔⲆⲆⲆ: "img/night-skin27.png",
        ᐃⵠᐃⵠⵠΔΔ: "img/day-skin28.png",
        ⵠⲆᐃΔᐃΔⵠ: "img/night-skin28.png",
        ΔⲆΔᐃⲆΔⲆ: "img/day-skin29.png",
        ⲆΔⲆᐃⲆᐃᐃ: "img/night-skin29.png",
        ᐃΔΔᐃᐃⲆⵠ: "img/day-skin30.png",
        ΔΔⵠᐃⲆⵠⲆ: "img/night-skin30.png",
        ᐃⲆⲆⵠⵠⲆⲆ: "img/day-skin31.png",
        ⵠⵠΔⵠᐃΔⵠ: "img/night-skin31.png",
        ΔΔᐃΔΔⵠΔ: "img/day-skin32.png",
        ⵠⵠᐃᐃᐃΔΔ: "img/night-skin32.png",
        ⲆⲆᐃΔⵠᐃᐃ: "img/day-skin33.png",
        ΔᐃⵠⵠᐃⲆⵠ: "img/night-skin33.png",
        ᐃᐃⲆⲆΔⵠΔ: "img/day-skin34.png",
        ⵠⵠᐃⵠⵠΔΔ: "img/night-skin34.png",
        ⲆΔΔᐃᐃᐃΔ: "img/day-skin35.png",
        ⲆⲆᐃⲆΔⵠⵠ: "img/night-skin35.png",
        ⵠΔᐃΔⵠΔⲆ: "img/day-skin36.png",
        ΔΔᐃⲆᐃᐃΔ: "img/night-skin36.png",
        ΔⲆⲆΔΔΔᐃ: "img/day-skin37.png",
        ⵠᐃⵠⲆᐃⵠⵠ: "img/night-skin37.png",
        ⵠⵠⵠⵠⵠⲆⲆ: "img/day-skin38.png",
        ΔⲆⲆⲆⲆⵠΔ: "img/night-skin38.png",
        ⵠⵠⲆⵠⲆⵠᐃ: "img/day-skin39.png",
        ΔΔⵠⵠᐃᐃⵠ: "img/night-skin39.png",
        ᐃᐃΔⲆΔΔΔ: "img/day-skin40.png",
        ⵠⵠΔⵠⵠᐃΔ: "img/night-skin40.png",
        ⲆᐃⵠⵠΔᐃᐃ: "img/day-skin41.png",
        ⲆⲆⵠᐃᐃᐃⵠ: "img/night-skin41.png",
        ᐃᐃⵠⵠᐃⵠⲆ: "img/day-skin42.png",
        ⵠⲆⵠⵠᐃΔᐃ: "img/night-skin42.png",
        ΔⵠΔᐃΔⵠᐃ: "img/day-skin43.png",
        ⲆⲆⵠⲆⲆⲆᐃ: "img/night-skin43.png",
        ᐃⲆΔΔⲆⲆᐃ: "img/day-skin44.png",
        ΔᐃΔΔⵠΔⵠ: "img/night-skin44.png",
        ⵠⵠΔᐃᐃⵠΔ: "img/day-skin45.png",
        ⲆΔᐃⲆⲆΔᐃ: "img/night-skin45.png",
        ᐃᐃΔᐃⵠᐃⵠ: "img/day-skin46.png",
        ΔᐃⵠᐃⲆᐃⵠ: "img/night-skin46.png",
        ⵠⲆᐃⵠⲆⲆᐃ: "img/day-skin47.png",
        ᐃⲆᐃᐃᐃᐃⵠ: "img/night-skin47.png",
        ᐃⵠᐃΔΔᐃᐃ: "img/day-skin48.png",
        ᐃⵠΔΔⵠⵠᐃ: "img/night-skin48.png",
        ΔⲆⵠΔⲆⵠⲆ: "img/day-skin49.png",
        ΔⲆⵠⲆⲆⵠᐃ: "img/night-skin49.png",
        ⲆΔⲆᐃᐃᐃⲆ: "img/day-skin50.png",
        ᐃⲆⵠΔᐃⵠⲆ: "img/night-skin50.png",
        ᐃⲆⲆⲆᐃΔⲆ: "img/day-skin51.png",
        ⵠᐃⵠᐃⲆᐃΔ: "img/night-skin51.png",
        ⵠΔᐃᐃⲆⵠⵠ: "img/day-skin52.png",
        ᐃΔΔΔΔᐃΔ: "img/night-skin52.png",
        ⲆᐃΔΔⵠⵠᐃ: "img/day-skin53.png",
        ⲆΔⵠᐃᐃⲆΔ: "img/night-skin53.png",
        ᐃⵠΔⵠᐃⲆⲆ: "img/day-skin54.png",
        ⲆᐃⲆΔᐃΔⵠ: "img/night-skin54.png",
        ᐃΔΔⵠⵠΔⵠ: "img/day-skin55.png",
        ᐃⵠⵠⲆΔΔⵠ: "img/night-skin55.png",
        ᐃΔⲆΔⵠⲆᐃ: "img/day-skin56.png",
        ᐃⲆᐃⲆⵠᐃΔ: "img/night-skin56.png",
        ⵠⵠⵠⲆᐃΔⵠ: "img/day-skin57.png",
        ⵠΔᐃⵠΔⵠΔ: "img/night-skin57.png",
        ⲆΔΔⲆΔⲆⵠ: "img/day-skin58.png",
        ΔⵠᐃⲆⵠΔⲆ: "img/night-skin58.png",
        ⵠⵠⲆΔΔⲆⵠ: "img/day-skin59.png",
        ΔⲆⵠⲆⲆΔⵠ: "img/night-skin59.png",
        ᐃΔⵠⵠⵠⵠᐃ: "img/day-skin60.png",
        ⵠⵠᐃᐃΔᐃᐃ: "img/night-skin60.png",
        ΔΔΔⲆⲆᐃΔ: "img/day-skin61.png",
        ⵠᐃⵠⲆΔⵠⵠ: "img/night-skin61.png",
        ᐃⲆᐃᐃᐃᐃΔ: "img/day-skin62.png",
        ⲆᐃⲆᐃΔΔⲆ: "img/night-skin62.png",
        ΔΔⲆⲆⲆΔⲆ: "img/day-skin63.png",
        ⵠⵠⲆⵠⲆᐃᐃ: "img/night-skin63.png",
        ⲆⵠΔΔⲆΔⵠ: "img/day-skin64.png",
        ⲆᐃⲆⵠΔᐃⵠ: "img/night-skin64.png",
        ᐃᐃᐃⲆᐃΔᐃ: "img/day-skin65.png",
        ᐃΔΔⲆⵠᐃⲆ: "img/night-skin65.png",
        ⵠΔⲆΔᐃΔᐃ: "img/day-skin66.png",
        ⲆⵠΔⲆΔⲆⵠ: "img/night-skin66.png",
        ⲆΔⵠⲆⵠΔⵠ: "img/day-skin67.png",
        ᐃᐃΔᐃΔΔⵠ: "img/night-skin67.png",
        ΔⲆΔᐃΔᐃⲆ: "img/day-skin68.png",
        ⵠⲆᐃⵠⵠⵠⲆ: "img/night-skin68.png",
        ΔⲆⵠⵠΔᐃⵠ: "img/day-skin69.png",
        ⲆᐃΔᐃΔΔⲆ: "img/night-skin69.png",
        ᐃⵠⲆΔⲆΔΔ: "img/day-skin70.png",
        ᐃⵠⲆⲆⲆΔᐃ: "img/night-skin70.png",
        ⲆⵠᐃⵠΔᐃΔ: "img/day-skin71.png",
        ⵠᐃΔΔⵠΔᐃ: "img/night-skin71.png",
        ᐃΔᐃⵠⲆⵠⵠ: "img/day-skin72.png",
        ΔᐃᐃⲆᐃⲆᐃ: "img/night-skin72.png",
        ᐃΔⵠⲆⵠⵠᐃ: "img/day-skin73.png",
        ⲆⵠΔᐃⵠⲆⲆ: "img/night-skin73.png",
        ⲆⲆⲆⲆⲆᐃⵠ: "img/day-skin74.png",
        ΔᐃᐃΔᐃⵠⵠ: "img/night-skin74.png",
        ⲆⵠᐃΔᐃⵠΔ: "img/day-skin75.png",
        ⲆⲆᐃⲆⲆⲆⲆ: "img/night-skin75.png",
        ᐃⵠΔⲆᐃⵠᐃ: "img/day-skin76.png",
        ⵠΔⵠΔⵠΔⲆ: "img/night-skin76.png",
        ⵠΔⲆⲆⲆΔⲆ: "img/day-skin77.png",
        ΔᐃⲆΔⲆᐃⵠ: "img/night-skin77.png",
        ᐃⵠᐃⲆⵠΔⲆ: "img/day-skin78.png",
        ᐃΔⲆⲆⲆᐃⲆ: "img/night-skin78.png",
        ⵠⲆΔᐃΔⵠⲆ: "img/day-skin79.png",
        ΔⲆⲆⵠⲆⵠᐃ: "img/night-skin79.png",
        ᐃΔᐃⵠΔⲆᐃ: "img/day-skin80.png",
        ᐃⲆⵠΔⵠᐃⵠ: "img/night-skin80.png",
        ⲆⲆⵠᐃΔⵠᐃ: "img/day-skin81.png",
        ΔᐃᐃⵠⲆᐃᐃ: "img/night-skin81.png",
        ⵠΔⵠᐃⵠⵠⵠ: "img/day-skin82.png",
        ᐃᐃᐃⲆⲆⲆⵠ: "img/night-skin82.png",
        ᐃᐃᐃⵠΔⲆΔ: "img/day-skin83.png",
        ᐃⲆΔΔᐃΔⵠ: "img/night-skin83.png",
        ΔⲆⵠⲆⲆⲆᐃ: "img/day-skin84.png",
        ⲆⵠΔᐃⲆⵠΔ: "img/night-skin84.png",
        ᐃⵠⵠᐃᐃⵠⲆ: "img/day-skin85.png",
        ⲆᐃⲆΔᐃⲆΔ: "img/night-skin85.png",
        ⲆΔᐃΔⲆᐃᐃ: "img/day-skin86.png",
        ⲆΔᐃΔⲆΔᐃ: "img/night-skin86.png",
        ᐃΔⵠᐃⲆⵠΔ: "img/day-skin87.png",
        ᐃⵠⵠΔᐃⲆΔ: "img/night-skin87.png",
        ΔΔΔⵠⲆᐃᐃ: "img/day-skin88.png",
        ⲆⲆᐃΔⵠⵠΔ: "img/night-skin88.png",
        ⲆᐃΔⲆⵠⲆⵠ: "img/day-skin89.png",
        ⲆⲆⵠⵠⵠᐃᐃ: "img/night-skin89.png",
        ΔⲆⲆⵠⲆᐃᐃ: "img/day-skin90.png",
        ΔⵠΔⲆᐃΔⲆ: "img/night-skin90.png",
        ⲆᐃΔᐃᐃᐃⲆ: "img/day-skin91.png",
        ᐃⲆⵠⲆᐃⲆⵠ: "img/night-skin91.png",
        ΔⵠⲆᐃᐃⵠⲆ: "img/day-skin92.png",
        ⲆⲆᐃΔᐃΔᐃ: "img/night-skin92.png",
        ⵠΔⲆⵠⲆΔᐃ: "img/day-skin93.png",
        ᐃᐃⵠⵠⲆΔⲆ: "img/night-skin93.png",
        ΔⲆΔⵠᐃᐃⲆ: "img/day-skin94.png",
        ⲆⲆⲆᐃⲆΔᐃ: "img/night-skin94.png",
        ⲆⵠᐃᐃⵠⲆⵠ: "img/day-skin95.png",
        ⲆⵠᐃΔⵠΔⲆ: "img/night-skin95.png",
        ⲆᐃⲆΔⲆᐃΔ: "img/day-skin96.png",
        ⵠᐃΔⵠⲆΔΔ: "img/night-skin96.png",
        ⵠⲆᐃΔΔΔⲆ: "img/day-skin97.png",
        ⲆᐃⵠᐃΔᐃⲆ: "img/night-skin97.png",
        ΔⲆⵠᐃΔⵠⲆ: "img/day-skin98.png",
        ⵠᐃΔⲆⵠⲆΔ: "img/night-skin98.png",
        ⲆⵠⵠΔⵠⲆⵠ: "img/day-skin99.png",
        ΔᐃⲆΔΔΔⲆ: "img/night-skin99.png",
        ΔⵠΔⲆⵠΔΔ: "img/day-skin100.png",
        ᐃᐃᐃⲆⲆᐃⵠ: "img/night-skin100.png",
        ⵠΔⲆΔΔΔⵠ: "img/day-skin101.png",
        ⵠΔⵠᐃⵠⵠⲆ: "img/night-skin101.png",
        ⵠΔᐃⲆᐃΔⲆ: "img/day-skin102.png",
        ΔⲆᐃⵠⵠᐃⵠ: "img/night-skin102.png",
        ⵠⲆⲆΔⲆᐃⵠ: "img/day-skin103.png",
        ΔⵠΔⲆᐃᐃᐃ: "img/night-skin103.png",
        ᐃΔⵠⲆΔⲆᐃ: "img/day-skin104.png",
        ⵠᐃⵠᐃⲆᐃⵠ: "img/night-skin104.png",
        ⲆᐃⲆΔΔⲆᐃ: "img/day-skin105.png",
        ⵠⵠᐃᐃΔᐃΔ: "img/night-skin105.png",
        ⵠⲆⵠⵠᐃⵠⵠ: "img/day-skin106.png",
        ΔⲆΔⵠΔᐃΔ: "img/night-skin106.png",
        ⲆⲆᐃᐃⵠⲆᐃ: "img/day-skin107.png",
        ⵠⵠⲆⲆΔᐃᐃ: "img/night-skin107.png",
        ᐃᐃΔⲆⲆΔᐃ: "img/day-skin108.png",
        Δᐃᐃᐃⵠᐃᐃ: "img/night-skin108.png",
        ᐃᐃⵠⵠⲆⵠⲆ: "img/day-skin109.png",
        ᐃⵠⵠⵠΔΔᐃ: "img/night-skin109.png",
        ⵠΔⲆΔⵠΔΔ: "img/day-skin110.png",
        Δⵠⵠᐃⵠⵠᐃ: "img/night-skin110.png",
        ᐃⲆⵠⲆΔΔᐃ: "img/day-skin111.png",
        ⵠⲆⵠⵠᐃⲆⵠ: "img/night-skin111.png",
        ⵠᐃⵠⲆⲆᐃⲆ: "img/day-skin112.png",
        ⲆⵠⲆΔΔᐃᐃ: "img/night-skin112.png",
        ΔⲆⲆᐃⵠⵠᐃⵠⵠ: "img/day-skin113.png",
        ᐃⵠᐃᐃⵠΔⲆΔⵠ: "img/night-skin113.png",
        ᐃⲆΔᐃᐃⵠᐃ: "img/day-skin114.png",
        ⲆⵠⲆᐃⲆΔᐃ: "img/night-skin114.png",
        ᐃⲆΔⵠⵠⵠⲆ: "img/day-skin115.png",
        ᐃⲆⵠΔⵠᐃΔ: "img/night-skin115.png",
        ⲆⲆΔᐃⲆⵠⲆ: "img/day-skin116.png",
        ᐃⵠΔⲆⲆⲆⲆ: "img/night-skin116.png",
        ΔⲆⵠᐃᐃΔⵠ: "img/day-skin117.png",
        ΔⲆⵠᐃⲆⲆⲆ: "img/night-skin117.png",
        ⲆⲆⲆΔⵠΔΔ: "img/day-skin118.png",
        ⵠΔΔⵠⲆᐃⵠ: "img/night-skin118.png",
        ᐃⵠΔΔⵠΔΔ: "img/day-skin119.png",
        ᐃΔᐃⲆᐃᐃⵠ: "img/night-skin119.png",
        ΔⲆΔⵠΔⵠⵠ: "img/day-skin120.png",
        ᐃⵠᐃΔᐃⵠᐃ: "img/night-skin120.png",
        ⵠⵠⲆⲆⵠⲆΔ: "img/day-skin121.png",
        ΔⲆΔⵠⲆⵠᐃ: "img/night-skin121.png",
        ΔⵠΔᐃⲆⵠᐃ: "img/day-skin122.png",
        ⲆᐃΔᐃⵠⲆΔ: "img/night-skin122.png",
        ⲆΔⲆΔΔΔᐃ: "img/day-skin123.png",
        ⲆⵠΔⵠⵠⵠⲆ: "img/night-skin123.png",
        ⵠⲆⵠᐃΔⵠΔ: "img/day-skin124.png",
        ᐃⲆⲆΔᐃᐃⵠ: "img/night-skin124.png",
        ΔⵠΔΔΔᐃⵠ: "img/day-skin125.png",
        ⵠⵠⲆⵠᐃⵠⵠ: "img/night-skin125.png",
        ⵠⵠᐃᐃⲆⵠⲆ: "img/day-skin126.png",
        ⲆⵠΔⲆΔⵠᐃ: "img/night-skin126.png",
        ⲆⵠᐃⲆᐃΔΔ: "img/day-skin127.png",
        ⵠⲆᐃΔᐃⲆΔ: "img/night-skin127.png",
        ⲆⵠΔⲆᐃⵠⵠ: "img/day-skin128.png",
        ⵠⵠⵠΔΔᐃⲆ: "img/night-skin128.png",
        ΔᐃᐃⵠᐃᐃΔ: "img/day-skin129.png",
        ⵠⲆⵠᐃⲆᐃΔ: "img/night-skin129.png",
        ⲆΔΔᐃΔⲆᐃ: "img/day-skin130-1.png",
        ⲆᐃⵠⲆΔΔᐃ: "img/night-skin130-1.png",
        ⲆⵠⲆᐃⵠᐃᐃ: "img/day-skin131.png",
        ΔⲆᐃⲆⲆΔⵠ: "img/night-skin131.png",
        ⲆΔᐃⲆⲆⲆⲆ: "img/day-skin132.png",
        ΔⲆΔⲆⲆⲆΔ: "img/night-skin132.png",
        ΔᐃⵠᐃⵠⲆⲆ: "img/day-skin133.png",
        ⵠⲆΔΔᐃⲆΔ: "img/night-skin133.png",
        ΔⲆⲆΔΔᐃᐃ: "img/day-skin134.png",
        ΔᐃⲆⲆⲆᐃΔ: "img/night-skin134.png",
        ⵠᐃⵠⲆᐃΔⵠ: "img/day-skin135.png",
        ⵠᐃᐃⵠΔΔΔ: "img/night-skin135.png",
        ΔⵠᐃⵠᐃᐃΔ: "img/day-skin136.png",
        ΔⵠΔᐃⲆⲆⲆ: "img/night-skin136.png",
        ⲆΔⵠⲆⲆⲆⵠ: "img/day-skin137.png",
        ⲆΔⲆΔᐃΔⵠ: "img/night-skin137.png",
        ΔⵠⲆⲆⲆᐃⵠ: "img/day-skin138.png",
        ⵠᐃⲆⵠΔⵠⲆ: "img/night-skin138.png",
        ᐃⲆⲆΔⵠⲆΔ: "img/day-skin139.png",
        ⵠᐃΔⲆΔᐃΔ: "img/night-skin139.png",
        ⵠⲆΔⵠⲆᐃΔ: "img/day-skin140.png",
        ᐃⵠⵠΔΔⵠⲆ: "img/night-skin140.png",
        ⲆⲆⵠᐃΔΔⲆ: "img/day-skin141.png",
        ᐃΔΔⲆΔᐃᐃ: "img/night-skin141.png",
        ᐃᐃⲆⵠᐃⲆⵠ: "img/day-skin142.png",
        ⵠⲆΔΔᐃⵠⲆ: "img/night-skin142.png",
        ⲆⲆⲆΔΔⲆᐃ: "img/day-skin143.png",
        ⵠΔΔᐃᐃΔᐃ: "img/night-skin143.png",
        ᐃᐃᐃⵠᐃΔᐃ: "img/day-skin144.png",
        ΔⲆⲆⲆᐃᐃᐃ: "img/night-skin144.png",
        ⲆⲆΔⲆΔⲆⵠ: "img/day-skin145.png",
        ᐃΔⵠⲆⵠⲆⵠ: "img/night-skin145.png",
        ΔᐃᐃΔⲆΔⵠ: "img/day-skin146.png",
        ᐃⵠⲆⲆᐃⲆⵠ: "img/night-skin146.png",
        ⵠⲆᐃᐃⲆⵠⵠ: "img/day-skin147.png",
        ⲆⵠⲆᐃⵠᐃΔ: "img/night-skin147.png",
        ᐃⵠⵠⵠΔΔⲆ: "img/day-skin148.png",
        ᐃΔΔⲆΔⲆⲆ: "img/night-skin148.png",
        ΔΔᐃⵠⵠΔⵠ: "img/day-skin149.png",
        ᐃⵠⵠⲆⵠᐃΔ: "img/night-skin149.png",
        ᐃⲆⲆΔᐃΔΔ: "img/day-skin150.png",
        ΔΔⲆΔΔᐃᐃ: "img/night-skin150.png",
        ⵠⵠΔⲆⵠΔᐃ: "img/day-skin151.png",
        ⲆᐃⵠᐃΔΔⵠ: "img/night-skin151.png",
        ΔⲆΔⲆΔⵠᐃ: "img/day-skin152.png",
        ⵠⲆᐃᐃΔᐃⵠ: "img/night-skin152.png",
        ᐃⲆᐃΔΔΔⵠ: "img/day-skin153.png",
        ⲆⲆⲆᐃⲆⵠΔ: "img/night-skin153.png",
        ᐃᐃᐃΔⲆΔⲆ: "img/day-skin154.png",
        ᐃΔⵠⲆᐃⲆᐃ: "img/night-skin154.png",
        ⲆᐃΔΔⵠᐃⲆ: "img/day-skin155.png",
        ⵠⲆᐃⲆΔⲆᐃ: "img/night-skin155.png",
        ΔᐃΔΔΔᐃⵠ: "img/day-skin156.png",
        ΔΔⲆⲆΔⵠΔ: "img/night-skin156.png",
        ᐃᐃΔⲆΔⵠΔ: "img/day-skin157.png",
        ⵠΔⲆⲆΔⲆⵠ: "img/night-skin157.png",
        ΔᐃⲆⲆᐃᐃᐃ: "img/day-skin158.png",
        ⵠᐃᐃⲆⲆⵠⲆ: "img/night-skin158.png",
        ⲆᐃⵠΔᐃⵠᐃ: "img/day-skin159.png",
        ᐃⵠᐃⵠΔⲆⲆ: "img/night-skin159.png",
        ⵠⲆⵠⲆⲆⵠⵠ: "img/day-skin160.png",
        ⲆⵠⲆⲆⲆᐃᐃ: "img/night-skin160.png",
        ⲆⲆᐃⲆᐃⵠᐃ: "img/day-skin161.png",
        ΔᐃΔΔᐃⲆⲆ: "img/night-skin161.png",
        ⵠⵠⵠᐃⵠⵠΔ: "img/day-skin162.png",
        ⲆᐃᐃⵠΔΔⲆ: "img/night-skin162.png",
        ⲆΔⲆⲆᐃⲆⲆ: "img/day-skin163.png",
        ᐃⵠᐃⲆⲆⲆⲆ: "img/night-skin163.png",
        ⲆⲆᐃⵠⲆⵠΔ: "img/day-skin164.png",
        ᐃᐃΔⲆⵠΔᐃ: "img/night-skin164.png",
        ⲆⵠⵠⲆⲆⵠᐃ: "img/day-skin165.png",
        ᐃᐃⵠⵠΔⲆᐃ: "img/night-skin165.png",
        ᐃᐃᐃᐃᐃⲆΔ: "img/day-skin166.png",
        ⲆⲆᐃᐃᐃⵠᐃ: "img/night-skin166.png",
        ΔΔⵠΔⲆΔⲆ: "img/day-skin167.png",
        ⲆⲆⵠⲆⲆᐃΔ: "img/night-skin167.png",
        ᐃⵠᐃᐃⲆⲆⲆ: "img/day-skin168.png",
        ⲆᐃᐃΔᐃΔⲆ: "img/night-skin168.png",
        ᐃⲆΔⲆΔⲆⲆ: "img/day-skin169.png",
        ⵠⵠΔⵠΔᐃᐃ: "img/night-skin169.png",
        ᐃⲆΔⲆⵠⲆⵠ: "img/day-skin170.png",
        ⵠⵠⵠᐃⵠⲆᐃ: "img/night-skin170.png",
        ΔⲆᐃΔⲆⵠΔ: "img/day-skin171.png",
        ᐃΔᐃⵠⲆᐃⲆ: "img/night-skin171.png",
        ᐃⲆᐃᐃΔᐃⲆ: "img/day-skin172.png",
        ⲆⵠⵠᐃⵠⲆⵠ: "img/night-skin172.png",
        ΔⲆᐃᐃΔᐃΔ: "img/day-skin173.png",
        ⲆⵠⲆᐃⵠⵠᐃ: "img/night-skin173.png",
        ⲆⲆᐃᐃΔⵠⵠ: "img/day-skin174.png",
        ᐃᐃᐃⵠⵠⲆΔ: "img/night-skin174.png",
        ⲆΔΔⵠⵠᐃᐃ: "img/day-skin175.png",
        ᐃᐃⲆⵠᐃᐃⵠ: "img/night-skin175.png",
        ΔΔⲆⲆᐃⲆᐃ: "img/day-skin176.png",
        ⲆⲆⲆᐃⵠⲆⲆ: "img/night-skin176.png",
        ⲆΔⲆᐃⵠΔΔ: "img/day-skin177.png",
        ⵠᐃΔΔⵠⲆΔ: "img/night-skin177.png",
        ⲆΔᐃⵠⲆΔΔ: "img/day-skin178.png",
        ⵠΔⵠΔᐃⲆⵠ: "img/night-skin178.png",
        ᐃΔⵠⲆⲆⲆᐃ: "img/day-skin179.png",
        ⲆⲆⵠΔⵠⵠⵠ: "img/night-skin179.png",
        ᐃⲆΔΔⲆᐃᐃ: "img/day-skin180.png",
        ᐃⵠⲆⵠΔⵠⵠ: "img/night-skin180.png",
        ⲆΔⵠⵠⲆΔΔ: "img/day-skin181.png",
        ⵠΔΔⵠⲆⲆΔ: "img/night-skin181.png",
        ΔΔⵠᐃᐃᐃᐃ: "img/day-skin182.png",
        ⲆᐃⲆⲆᐃⵠⲆ: "img/night-skin182.png",
        ᐃⵠⵠⵠᐃⵠⲆ: "img/day-skin183.png",
        ⲆᐃΔⲆᐃᐃⵠ: "img/night-skin183.png",
        ΔᐃⵠⵠⵠⲆΔ: "img/day-skin184.png",
        ⵠᐃⵠⲆΔΔΔ: "img/night-skin184.png",
        ⲆⲆᐃⲆⲆΔΔ: "img/day-skin185.png",
        ΔⵠᐃΔΔᐃⲆ: "img/night-skin185.png",
        ⲆⵠⲆᐃⵠⲆΔ: "img/day-skin186.png",
        ΔᐃΔⵠⵠⲆᐃ: "img/night-skin186.png",
        ⵠᐃᐃΔⵠⵠᐃ: "img/day-skin187.png",
        ⵠᐃᐃΔᐃⲆⲆ: "img/night-skin187.png",
        ⲆᐃⵠⲆᐃᐃΔ: "img/day-skin188.png",
        ᐃⵠⵠᐃᐃᐃⲆ: "img/night-skin188.png",
        ⵠⵠⲆᐃᐃⵠⲆ: "img/day-skin189.png",
        ΔⵠΔⵠⲆΔⵠ: "img/night-skin189.png",
        ⲆᐃⲆⲆΔΔⲆ: "img/day-skin190.png",
        ⵠⲆⵠⲆᐃΔⵠ: "img/night-skin190.png",
        ⲆⲆΔⵠⵠᐃⲆ: "img/day-skin191.png",
        ΔᐃⲆΔΔᐃⵠ: "img/night-skin191.png",
        ⲆᐃᐃᐃΔⲆΔ: "img/day-skin192.png",
        ΔⵠᐃᐃΔΔΔ: "img/night-skin192.png",
        ΔᐃΔⵠⵠⵠⲆ: "img/day-skin193.png",
        ᐃᐃᐃⲆⵠᐃⵠ: "img/night-skin193.png",
        ΔΔⵠⲆⲆΔᐃ: "img/day-skin194.png",
        ⵠᐃᐃⵠⲆⲆⲆ: "img/night-skin194.png",
        ΔΔⵠⲆᐃΔⵠ: "img/day-skin195.png",
        ⵠⲆΔⲆᐃᐃⵠ: "img/night-skin195.png",
        ᐃⲆⵠΔΔⲆⲆ: "img/day-skin196.png",
        ⵠⵠᐃⲆᐃⵠⵠ: "img/night-skin196.png",
        ΔⵠⵠⲆΔᐃⵠ: "img/day-skin197.png",
        ⲆᐃΔⲆΔⵠΔ: "img/night-skin197.png",
        ᐃⲆⵠΔᐃᐃΔ: "img/day-skin198.png",
        ᐃΔⲆⵠⲆΔⵠ: "img/night-skin198.png",
        ᐃⵠᐃⲆΔΔΔ: "img/day-skin199.png",
        ᐃΔⲆⲆᐃΔⲆ: "img/night-skin199.png",
        ᐃΔΔᐃⵠᐃⲆ: "img/day-skin200.png",
        ᐃⲆᐃⲆΔᐃⲆ: "img/night-skin200.png",
        ⲆΔⵠⵠⵠⵠⲆ: "img/day-skin201.png",
        ᐃΔⵠⵠΔΔᐃ: "img/night-skin201.png",
        ΔⲆⵠᐃⲆᐃᐃ: "img/day-skin202.png",
        ᐃΔᐃⲆΔΔⲆ: "img/night-skin202.png",
        ⲆⲆⵠⵠⵠΔΔ: "img/day-skin203.png",
        ⵠⵠⲆⵠᐃⲆΔ: "img/night-skin203.png",
        ⵠⲆᐃⲆΔⵠⲆ: "img/day-skin204.png",
        ⲆⵠΔⵠⵠᐃᐃ: "img/night-skin204.png",
        ᐃᐃⲆᐃΔⵠᐃ: "img/day-skin205.png",
        ᐃⲆⵠⲆⲆⵠΔ: "img/night-skin205.png",
        ⵠⲆΔᐃΔΔᐃ: "img/day-skin206.png",
        ᐃΔΔⵠΔⵠⲆ: "img/night-skin206.png",
        ΔΔⵠⵠΔⲆΔ: "img/day-skin207.png",
        ᐃΔⵠᐃⲆⲆΔ: "img/night-skin207.png",
        ΔΔⲆⲆᐃᐃΔ: "img/day-skin208.png",
        ⲆⵠⵠᐃΔᐃᐃ: "img/night-skin208.png",
        ⵠᐃᐃⵠⲆⲆΔ: "img/day-skin209.png",
        ⵠΔⵠⲆΔᐃⵠ: "img/night-skin209.png",
        ⵠⵠᐃⵠⵠⲆⲆ: "img/day-skin210.png",
        ΔΔΔⵠⲆⲆⲆ: "img/night-skin210.png",
        ΔᐃⲆΔᐃᐃⲆ: "img/day-skin211.png",
        ᐃⲆⲆⵠⲆᐃᐃ: "img/night-skin211.png",
        ⵠΔⵠᐃᐃⵠᐃ: "img/day-skin212.png",
        ⵠᐃⵠⵠᐃᐃΔ: "img/night-skin212.png",
        ⵠⲆⲆⵠΔⲆⵠ: "img/day-hand-skin0.png",
        ΔⲆᐃⲆⵠⵠⵠ: "img/night-hand-skin0.png",
        ⲆⵠᐃᐃᐃⵠΔ: "img/day-hand-skin1.png",
        ΔΔΔΔⲆⵠⲆ: "img/night-hand-skin1.png",
        ΔΔⲆΔᐃᐃᐃ: "img/day-hand-skin2.png",
        ᐃᐃⲆⲆⲆⲆΔ: "img/night-hand-skin2.png",
        ᐃⵠᐃᐃⵠΔΔ: "img/day-hand-skin3.png",
        ⵠΔᐃᐃⲆΔᐃ: "img/night-hand-skin3.png",
        ᐃⲆⵠᐃΔⵠΔ: "img/day-hand-skin4.png",
        ⵠⲆᐃⵠⲆⵠⲆ: "img/night-hand-skin4.png",
        ᐃⵠⲆᐃⵠⲆΔ: "img/day-hand-skin5.png",
        ⲆᐃᐃΔⲆⵠᐃ: "img/night-hand-skin5.png",
        ⵠΔⵠⵠⵠᐃⵠ: "img/day-hand-skin6.png",
        ⵠⲆⲆΔΔᐃⵠΔⲆ: "img/night-hand-skin6.png",
        ⲆΔⲆᐃΔⲆᐃ: "img/day-hand-skin6.png",
        ⵠΔⵠⵠᐃⲆᐃ: "img/night-hand-skin6.png",
        ᐃⵠᐃⵠΔᐃⲆ: "img/day-hand-skin8.png",
        ΔΔⵠΔᐃᐃⵠ: "img/night-hand-skin8.png",
        ⵠΔⵠᐃⲆⲆᐃ: "img/day-hand-skin9.png",
        ᐃⲆⵠᐃᐃⵠⵠ: "img/night-hand-skin9.png",
        ΔΔⵠΔⲆᐃΔ: "img/day-hand-skin10.png",
        ΔΔΔᐃⲆⲆΔ: "img/night-hand-skin10.png",
        ⲆᐃΔⵠⵠⲆᐃ: "img/day-hand-skin11.png",
        ΔᐃⵠⵠⲆΔΔ: "img/night-hand-skin11.png",
        ⲆⵠⵠᐃᐃΔⵠ: "img/day-hand-skin12.png",
        ᐃⲆⲆΔⵠⲆⵠ: "img/night-hand-skin12.png",
        ΔΔᐃΔⲆᐃΔ: "img/day-hand-skin13.png",
        ⵠⵠᐃᐃⵠᐃΔ: "img/night-hand-skin13.png",
        ⲆΔΔⵠⵠᐃⵠ: "img/day-hand-skin14.png",
        ⲆⵠⲆⵠᐃⲆΔ: "img/night-hand-skin14.png",
        ⲆⲆⲆΔⲆΔⵠ: "img/day-hand-skin15.png",
        ᐃⵠⵠᐃⲆⵠⲆ: "img/night-hand-skin15.png",
        ⲆΔᐃⵠⵠⲆᐃ: "img/day-hand-skin16.png",
        ᐃΔⵠΔΔΔΔ: "img/night-hand-skin16.png",
        ⵠᐃⵠⲆⵠΔⲆ: "img/day-hand-skin17.png",
        ᐃⵠⵠΔΔⵠΔ: "img/night-hand-skin17.png",
        ⵠⲆⵠΔⵠᐃⵠ: "img/day-hand-skin18.png",
        ⲆⵠᐃΔᐃᐃΔ: "img/night-hand-skin18.png",
        ΔΔⵠᐃⵠᐃΔ: "img/day-hand-skin19.png",
        ⲆΔΔᐃⵠⲆᐃ: "img/night-hand-skin19.png",
        ⲆΔΔⲆⵠⵠᐃ: "img/day-hand-skin20.png",
        ⵠⲆᐃⲆᐃΔⵠ: "img/night-hand-skin20.png",
        ΔⵠΔᐃⲆⵠⵠ: "img/day-hand-skin21.png",
        ⲆΔⲆᐃΔᐃⵠ: "img/night-hand-skin21.png",
        ᐃⲆΔⵠΔΔⲆ: "img/day-hand-skin22.png",
        ⲆᐃⲆⵠⲆⵠⵠ: "img/night-hand-skin22.png",
        ⲆᐃⲆᐃᐃⵠⲆ: "img/day-hand-skin23.png",
        ΔΔⲆΔⵠⵠⲆ: "img/night-hand-skin23.png",
        ΔᐃΔⲆᐃⵠⲆ: "img/day-hand-skin24.png",
        ᐃⲆᐃᐃΔΔⲆ: "img/night-hand-skin24.png",
        ⵠⲆᐃΔΔΔⵠ: "img/day-hand-skin25.png",
        ᐃΔΔⲆᐃⵠⵠ: "img/night-hand-skin25.png",
        ⵠΔⲆⲆΔⵠᐃ: "img/day-hand-skin26.png",
        ΔᐃⵠΔⵠΔⲆ: "img/night-hand-skin26.png",
        ΔᐃⵠⲆΔΔᐃ: "img/day-hand-skin27.png",
        ᐃᐃᐃⲆᐃᐃⵠ: "img/night-hand-skin27.png",
        ᐃΔᐃΔᐃᐃⵠ: "img/day-hand-skin28.png",
        ᐃⲆΔᐃΔⲆΔ: "img/night-hand-skin28.png",
        ⵠⵠᐃⲆᐃΔΔ: "img/day-hand-skin29.png",
        ⲆΔΔΔΔᐃⲆ: "img/night-hand-skin29.png",
        ᐃΔΔⲆⲆⵠⲆ: "img/day-hand-skin30.png",
        ᐃᐃΔⲆⵠΔΔ: "img/night-hand-skin30.png",
        ΔⲆΔᐃᐃⲆⵠ: "img/day-hand-skin31.png",
        ⵠΔΔΔᐃᐃⵠ: "img/night-hand-skin31.png",
        ⵠⲆⲆⲆⲆΔⵠ: "img/day-hand-skin32.png",
        ⲆⵠⲆⵠᐃΔΔ: "img/night-hand-skin32.png",
        ᐃᐃΔᐃΔⵠⵠ: "img/day-hand-skin33.png",
        ΔⵠΔⲆⵠⲆⲆ: "img/night-hand-skin33.png",
        ᐃΔΔᐃⵠⲆⲆ: "img/day-hand-skin34.png",
        ΔⲆᐃⲆΔΔΔ: "img/night-hand-skin34.png",
        ⵠⲆᐃΔΔⵠⲆ: "img/day-hand-skin35.png",
        ⲆⵠⵠᐃᐃᐃΔ: "img/night-hand-skin35.png",
        ᐃΔᐃᐃⵠⵠⵠ: "img/day-hand-skin36.png",
        ⵠΔⲆᐃᐃⲆⲆ: "img/night-hand-skin36.png",
        ΔΔⵠᐃᐃⵠⵠ: "img/day-hand-skin37.png",
        ⲆΔΔΔⵠⲆΔ: "img/night-hand-skin37.png",
        ΔⵠᐃⵠⵠΔΔ: "img/day-hand-skin38.png",
        ᐃⵠⵠΔⵠᐃΔ: "img/night-hand-skin38.png",
        ᐃⲆΔⵠⵠᐃΔ: "img/day-hand-skin39.png",
        ᐃΔⲆᐃᐃⵠⲆ: "img/night-hand-skin39.png",
        ⲆᐃⲆᐃⵠᐃⵠ: "img/day-hand-skin40.png",
        ⲆⲆᐃⲆΔⲆᐃ: "img/night-hand-skin40.png",
        ⲆᐃΔⵠᐃᐃⲆ: "img/day-hand-skin41.png",
        ΔΔᐃⲆⲆᐃⲆ: "img/night-hand-skin41.png",
        ᐃⵠᐃΔᐃΔⵠ: "img/day-hand-skin42.png",
        ᐃⵠⵠΔⵠⲆΔ: "img/night-hand-skin42.png",
        ⵠΔΔⲆΔΔⵠ: "img/day-hand-skin43.png",
        ⵠⲆⵠⵠΔᐃᐃ: "img/night-hand-skin43.png",
        ΔⵠⵠⲆΔⲆΔ: "img/day-hand-skin16.png",
        ⲆⲆⲆᐃᐃᐃΔ: "img/night-hand-skin16.png",
        ΔⵠⲆⵠᐃᐃⵠ: "img/day-hand-skin45.png",
        ΔⲆⲆΔⵠⵠⵠ: "img/night-hand-skin45.png",
        ᐃⵠⵠⲆⵠⵠⲆ: "img/day-hand-skin46.png",
        ᐃⲆᐃΔΔΔΔ: "img/night-hand-skin46.png",
        ΔΔⵠⵠΔⵠΔ: "img/day-hand-skin47.png",
        ᐃΔⵠΔⵠⲆΔ: "img/night-hand-skin47.png",
        ᐃⵠⲆᐃΔⵠΔ: "img/day-hand-skin48.png",
        ⲆⲆᐃΔⵠᐃΔ: "img/night-hand-skin48.png",
        ⵠⲆⲆⵠⲆᐃᐃ: "img/day-hand-skin49.png",
        ᐃⵠⵠᐃⵠᐃⲆ: "img/night-hand-skin49.png",
        ᐃᐃⲆⵠΔⲆΔ: "img/day-hand-skin49.png",
        ⵠΔⵠΔΔⲆⲆ: "img/night-hand-skin49.png",
        ᐃᐃΔⲆᐃⲆᐃ: "img/day-hand-skin51.png",
        ⲆⵠⲆΔΔᐃⵠ: "img/night-hand-skin51.png",
        ᐃⲆⲆᐃΔⵠᐃ: "img/day-hand-skin52.png",
        ⲆⲆΔⵠⲆⲆⲆ: "img/night-hand-skin52.png",
        ⲆΔᐃᐃⲆⵠᐃ: "img/day-hand-skin53.png",
        ⲆΔΔⵠᐃᐃⲆ: "img/night-hand-skin53.png",
        ⲆⲆΔⲆΔΔⵠ: "img/day-hand-skin53.png",
        ⵠΔᐃⵠⵠᐃΔ: "img/night-hand-skin53.png",
        ⲆⲆᐃⵠᐃᐃⵠ: "img/day-hand-skin55.png",
        ⲆᐃⵠΔⵠᐃⵠ: "img/night-hand-skin55.png",
        ᐃⲆⲆᐃⵠⲆⵠ: "img/day-hand-skin56.png",
        ᐃⵠⲆᐃⲆΔΔ: "img/night-hand-skin56.png",
        ⲆⲆΔⲆⵠⵠΔ: "img/day-hand-skin57.png",
        ΔΔⲆⵠᐃⵠⵠ: "img/night-hand-skin57.png",
        ΔⵠⲆΔⵠᐃᐃ: "img/day-hand-skin58.png",
        ⵠᐃⲆΔⵠΔᐃ: "img/night-hand-skin58.png",
        ᐃΔΔᐃⵠᐃⵠ: "img/day-hand-skin59.png",
        ⵠⵠⵠᐃᐃᐃⵠ: "img/night-hand-skin59.png",
        ⲆⲆᐃᐃΔΔⲆ: "img/day-hand-skin61.png",
        ⵠΔⲆΔⵠⵠΔ: "img/night-hand-skin61.png",
        ΔΔᐃᐃΔᐃΔ: "img/day-hand-skin61.png",
        ᐃᐃⵠΔᐃᐃᐃ: "img/night-hand-skin61.png",
        ΔΔⲆⵠⵠᐃΔ: "img/day-hand-skin62.png",
        ᐃⵠⲆⲆⵠⵠⲆ: "img/night-hand-skin62.png",
        ⲆⲆᐃᐃΔⵠΔ: "img/day-hand-skin63.png",
        ᐃⲆΔⵠᐃᐃᐃ: "img/night-hand-skin63.png",
        ΔⲆΔᐃΔⵠⲆ: "img/day-hand-skin64.png",
        ᐃⵠΔⵠⵠᐃΔ: "img/night-hand-skin64.png",
        ⲆᐃᐃⵠᐃΔᐃ: "img/day-hand-skin65.png",
        ᐃΔⵠᐃᐃΔᐃ: "img/night-hand-skin65.png",
        ᐃᐃᐃΔΔᐃⵠ: "img/day-hand-skin66.png",
        ⵠᐃⲆⵠᐃᐃⵠ: "img/night-hand-skin66.png",
        ⵠⲆΔⵠⲆᐃⲆ: "img/day-hand-skin67.png",
        ΔⲆΔΔⵠⲆⲆ: "img/night-hand-skin67.png",
        ⲆΔⲆⵠΔΔΔ: "img/day-hand-skin68.png",
        ΔⵠⲆΔⲆⲆΔ: "img/night-hand-skin68.png",
        ΔᐃⲆⵠΔⲆⲆ: "img/day-hand-skin69.png",
        ⵠⲆⲆᐃΔΔⲆ: "img/night-hand-skin69.png",
        ᐃᐃⵠΔΔᐃⵠ: "img/day-hand-skin70.png",
        ⲆⵠᐃⵠⲆᐃⲆ: "img/night-hand-skin70.png",
        ᐃᐃΔⲆᐃᐃΔ: "img/day-hand-skin71.png",
        ᐃⵠΔⵠΔⲆⲆ: "img/night-hand-skin71.png",
        ΔΔⲆΔⵠⵠⵠ: "img/day-hand-skin72.png",
        ⵠᐃᐃⵠΔⲆᐃ: "img/night-hand-skin72.png",
        ⲆᐃᐃⲆⵠᐃⲆ: "img/day-hand-skin73.png",
        ⲆΔᐃⲆⲆⵠⵠ: "img/night-hand-skin73.png",
        ΔⵠᐃΔΔΔⲆ: "img/day-hand-skin74.png",
        ⲆᐃᐃΔⵠΔⵠ: "img/night-hand-skin74.png",
        ΔⵠⲆᐃⵠΔⲆ: "img/day-hand-skin75.png",
        ᐃⵠⵠⲆⵠΔᐃ: "img/night-hand-skin75.png",
        ⵠᐃⵠⵠᐃᐃⵠ: "img/day-hand-skin76.png",
        ⵠΔᐃΔΔⲆⵠ: "img/night-hand-skin76.png",
        ⵠⲆᐃⵠⲆΔⵠ: "img/day-hand-skin77.png",
        ⲆⵠΔⵠᐃᐃᐃ: "img/night-hand-skin77.png",
        ᐃⵠᐃⵠⵠⲆᐃ: "img/day-hand-skin78.png",
        ΔⵠᐃᐃⲆⵠᐃ: "img/night-hand-skin78.png",
        ᐃⵠᐃⵠⲆⲆᐃ: "img/day-hand-skin79.png",
        ⵠⵠᐃⲆⵠⵠΔ: "img/night-hand-skin79.png",
        ⲆⵠⲆⵠᐃΔⲆ: "img/day-hand-skin80.png",
        ΔᐃⵠⵠΔⲆᐃ: "img/night-hand-skin80.png",
        ᐃΔᐃⲆΔᐃᐃ: "img/day-hand-skin81.png",
        ⲆᐃⲆᐃⵠᐃΔ: "img/night-hand-skin81.png",
        ΔΔΔⲆⵠᐃⲆ: "img/day-hand-skin82.png",
        ᐃⲆΔⲆⲆⲆᐃ: "img/night-hand-skin82.png",
        ᐃⲆⵠᐃᐃⲆΔ: "img/day-hand-skin83.png",
        ᐃⲆΔᐃⲆΔⵠ: "img/night-hand-skin83.png",
        ΔᐃᐃⲆⲆⵠᐃ: "img/day-hand-skin84.png",
        ΔⲆⵠᐃⲆΔⵠ: "img/night-hand-skin84.png",
        ⵠΔᐃΔΔΔⲆ: "img/day-hand-skin85.png",
        ⵠⲆΔⵠᐃⵠΔ: "img/night-hand-skin85.png",
        ΔⲆⵠΔⵠⵠᐃ: "img/day-hand-skin86.png",
        ⵠᐃⲆᐃⵠΔⲆ: "img/night-hand-skin86.png",
        ΔΔᐃⵠⵠΔΔ: "img/day-hand-skin87.png",
        ⲆΔⲆⵠᐃᐃᐃ: "img/night-hand-skin87.png",
        ⵠᐃⵠᐃΔⲆⵠ: "img/day-hand-skin88.png",
        ⵠΔΔⵠΔᐃⵠ: "img/night-hand-skin88.png",
        ΔᐃⵠΔᐃΔⲆ: "img/day-hand-skin89.png",
        ⲆⲆᐃᐃⲆΔΔ: "img/night-hand-skin89.png",
        ᐃᐃᐃⲆΔᐃΔ: "img/day-hand-skin90.png",
        ΔⵠⲆᐃⲆⵠⲆ: "img/night-hand-skin90.png",
        ⵠᐃᐃⵠⲆᐃᐃ: "img/day-hand-skin91.png",
        ΔⵠⵠΔΔᐃⵠ: "img/night-hand-skin91.png",
        ΔⵠⲆΔᐃΔⵠ: "img/day-hand-skin92.png",
        ΔΔᐃⵠΔΔΔ: "img/night-hand-skin92.png",
        ⲆⵠΔΔⲆᐃⲆ: "img/day-hand-skin93.png",
        ᐃⵠⵠⲆᐃΔⵠ: "img/night-hand-skin93.png",
        ΔⵠⵠᐃⵠΔᐃ: "img/day-hand-skin94.png",
        ⲆΔᐃⲆΔⵠΔ: "img/night-hand-skin94.png",
        ΔⵠᐃᐃᐃΔⲆ: "img/day-hand-skin95.png",
        ⵠᐃᐃᐃⵠΔᐃ: "img/night-hand-skin95.png",
        ⵠⲆᐃⲆᐃⲆⵠ: "img/day-hand-skin96.png",
        ᐃⲆΔⵠⲆⲆΔ: "img/night-hand-skin96.png",
        ⵠΔⲆᐃᐃⲆΔ: "img/day-hand-skin97.png",
        ⵠᐃΔⵠᐃⲆⲆ: "img/night-hand-skin97.png",
        ᐃΔⵠᐃΔⵠⵠ: "img/day-hand-skin98.png",
        ΔⵠⵠⲆⲆΔⵠ: "img/night-hand-skin98.png",
        ᐃⲆⲆⵠⲆⲆⲆ: "img/day-hand-skin99.png",
        ΔⲆⲆⵠᐃΔⲆ: "img/night-hand-skin99.png",
        ΔⲆⵠᐃΔᐃⵠ: "img/day-hand-skin100.png",
        ⲆⲆΔⲆⲆᐃⵠ: "img/night-hand-skin100.png",
        ⲆᐃᐃΔⲆⲆΔ: "img/day-hand-skin101.png",
        ⵠⲆⵠⲆⵠⵠⵠ: "img/night-hand-skin101.png",
        ⵠᐃⲆⲆΔⵠΔ: "img/day-hand-skin102.png",
        ⲆⵠⵠⵠⵠⵠΔ: "img/night-hand-skin102.png",
        ⵠΔⵠΔⲆⲆᐃ: "img/day-hand-skin103.png",
        ⲆΔⲆⲆⵠⲆΔ: "img/night-hand-skin103.png",
        ⲆᐃΔⵠᐃᐃᐃ: "img/day-hand-skin104.png",
        ᐃⵠⲆⲆΔᐃᐃ: "img/night-hand-skin104.png",
        ⵠⵠᐃⲆⲆΔᐃ: "img/day-hand-skin105.png",
        ⵠᐃΔΔΔᐃΔ: "img/night-hand-skin105.png",
        ᐃᐃΔⵠΔⵠᐃ: "img/day-hand-skin106.png",
        ᐃⲆΔⲆᐃⵠᐃ: "img/night-hand-skin106.png",
        ᐃⵠⵠⲆⵠᐃᐃ: "img/day-hand-skin107.png",
        ᐃᐃⵠᐃᐃᐃΔ: "img/night-hand-skin107.png",
        ⲆᐃⲆᐃᐃᐃⲆ: "img/day-hand-skin108.png",
        ᐃⲆᐃⵠΔΔⲆ: "img/night-hand-skin108.png",
        ΔⵠᐃⵠΔⲆⵠ: "img/day-hand-skin109.png",
        ᐃᐃⲆⲆⲆΔΔ: "img/night-hand-skin109.png",
        ⲆⵠΔⲆᐃΔΔ: "img/day-hand-skin110.png",
        ⲆⵠⲆᐃᐃΔⵠ: "img/night-hand-skin110.png",
        ΔΔⵠΔⲆⲆⲆ: "img/day-hand-skin111.png",
        ⲆᐃⵠΔⲆⲆⵠ: "img/night-hand-skin111.png",
        ᐃⵠᐃⵠᐃᐃᐃ: "img/day-hand-skin112.png",
        ⵠⵠᐃΔᐃΔᐃ: "img/night-hand-skin112.png",
        ⵠᐃᐃⵠⲆΔⵠᐃⲆ: "img/day-hand-skin113.png",
        ΔΔⲆΔᐃᐃⲆᐃᐃ: "img/night-hand-skin113.png",
        ᐃᐃⲆⵠΔΔΔ: "img/day-hand-skin114.png",
        ⲆᐃΔⵠΔⲆⲆ: "img/night-hand-skin114.png",
        ΔΔᐃΔⵠⵠΔ: "img/day-hand-skin115.png",
        ⵠⵠΔᐃⵠΔⲆ: "img/night-hand-skin115.png",
        ᐃᐃⵠᐃΔᐃᐃ: "img/day-hand-skin116.png",
        ⵠⲆᐃⲆᐃᐃΔ: "img/night-hand-skin116.png",
        ΔᐃΔΔΔⵠⲆ: "img/day-hand-skin117.png",
        ⲆⵠⵠⲆⲆᐃⵠ: "img/night-hand-skin117.png",
        ΔΔⵠΔⲆⵠⲆ: "img/day-hand-skin118.png",
        ΔⵠⵠΔᐃᐃⵠ: "img/night-hand-skin118.png",
        ⵠⲆⲆⵠⲆΔⵠ: "img/day-hand-skin119.png",
        ⵠⵠⲆᐃⵠⵠⲆ: "img/night-hand-skin119.png",
        ᐃᐃΔᐃΔᐃΔ: "img/day-hand-skin120.png",
        ΔΔΔᐃⲆⵠᐃ: "img/night-hand-skin120.png",
        ⵠⲆⲆⲆΔⲆⲆ: "img/day-hand-skin122.png",
        ᐃΔⵠⵠᐃΔⵠ: "img/night-hand-skin122.png",
        ᐃⵠᐃⵠΔⵠΔ: "img/day-hand-skin122.png",
        ᐃⲆᐃⲆⵠᐃⲆ: "img/night-hand-skin122.png",
        ⲆⲆΔΔᐃᐃⵠ: "img/day-hand-skin122.png",
        ᐃΔⲆⵠᐃⲆᐃ: "img/night-hand-skin122.png",
        ᐃᐃⵠⵠⲆᐃⵠ: "img/day-hand-skin124.png",
        ⵠΔⵠΔⲆⵠⵠ: "img/night-hand-skin124.png",
        ⵠⲆⵠⲆⵠΔᐃ: "img/day-hand-skin125.png",
        ᐃⵠΔΔΔΔⲆ: "img/night-hand-skin125.png",
        ᐃⲆᐃⲆᐃⲆⲆ: "img/day-hand-skin126.png",
        ᐃᐃᐃΔⵠᐃΔ: "img/night-hand-skin126.png",
        ⲆⵠᐃᐃⲆⲆᐃ: "img/day-hand-skin127.png",
        ᐃΔⵠΔⲆⲆⲆ: "img/night-hand-skin127.png",
        ᐃΔⵠΔⵠΔᐃ: "img/day-hand-skin128.png",
        ⲆⵠᐃᐃⵠⵠΔ: "img/night-hand-skin128.png",
        ⲆᐃⵠⵠⲆⲆᐃ: "img/day-hand-skin129.png",
        ⲆⲆⲆΔⲆΔⲆ: "img/night-hand-skin129.png",
        ⲆⲆᐃΔⲆΔⵠ: "img/day-hand-skin130.png",
        ⵠᐃⵠᐃⵠⵠⵠ: "img/night-hand-skin130.png",
        ⲆΔⵠᐃⲆΔⵠ: "img/day-hand-skin131.png",
        ⵠᐃΔΔᐃⵠΔ: "img/night-hand-skin131.png",
        ᐃᐃΔⵠⲆᐃᐃ: "img/day-hand-skin130.png",
        ᐃΔΔᐃᐃⵠΔ: "img/night-hand-skin130.png",
        ΔⵠⲆⲆⵠⵠᐃ: "img/day-hand-skin133.png",
        ⲆⵠⲆᐃΔΔⲆ: "img/night-hand-skin133.png",
        ΔⲆⲆⲆⵠᐃⲆ: "img/day-hand-skin134.png",
        ⵠⵠᐃⲆᐃΔᐃ: "img/night-hand-skin134.png",
        ᐃΔᐃΔΔΔⲆ: "img/day-hand-skin135.png",
        ᐃᐃᐃᐃΔᐃⵠ: "img/night-hand-skin135.png",
        ⵠΔΔⵠⲆΔⲆ: "img/day-hand-skin136.png",
        ΔᐃΔΔᐃᐃΔ: "img/night-hand-skin136.png",
        ⲆΔᐃⵠΔⲆⵠ: "img/day-hand-skin137.png",
        ⲆΔᐃⵠΔΔᐃ: "img/night-hand-skin137.png",
        ΔⵠⵠⵠΔᐃⵠ: "img/day-hand-skin138.png",
        ΔᐃᐃᐃᐃⲆΔ: "img/night-hand-skin138.png",
        ΔⲆⵠⲆⲆⵠⵠ: "img/day-hand-skin139.png",
        ⵠᐃΔⵠΔⲆⲆ: "img/night-hand-skin139.png",
        ⵠΔⲆⵠⵠⵠⵠ: "img/day-hand-skin140.png",
        ⲆⲆⵠⲆⲆΔⲆ: "img/night-hand-skin140.png",
        ⵠⲆⲆᐃⵠᐃⲆ: "img/day-hand-skin141.png",
        ⲆᐃΔΔΔⵠⲆ: "img/night-hand-skin141.png",
        ⵠΔⵠⵠⲆⲆⵠ: "img/day-hand-skin142.png",
        ⵠⵠⲆⲆᐃᐃᐃ: "img/night-hand-skin142.png",
        ⵠΔⲆⵠΔᐃⲆ: "img/day-hand-skin143.png",
        ᐃⵠΔᐃⵠΔᐃ: "img/night-hand-skin143.png",
        ΔᐃⲆᐃⵠⵠⲆ: "img/day-hand-skin144.png",
        ⵠΔⲆⵠⲆⵠⵠ: "img/night-hand-skin144.png",
        ᐃⲆⵠⵠΔⵠⵠ: "img/day-hand-skin145.png",
        ΔΔΔΔⲆΔΔ: "img/night-hand-skin145.png",
        ⵠⲆᐃᐃΔᐃⲆ: "img/day-hand-skin146.png",
        ΔⵠⲆⲆⵠᐃⵠ: "img/night-hand-skin146.png",
        ᐃᐃᐃᐃⲆΔⵠ: "img/day-hand-skin147.png",
        ⲆΔᐃᐃⵠᐃΔ: "img/night-hand-skin147.png",
        ᐃΔΔⲆΔᐃΔ: "img/day-hand-skin148.png",
        ⵠΔⵠΔⲆᐃᐃ: "img/night-hand-skin148.png",
        ΔⲆᐃⲆΔⲆᐃ: "img/day-hand-skin149.png",
        ⵠᐃⲆⵠⵠⲆΔ: "img/night-hand-skin149.png",
        ΔⵠΔⵠΔⲆᐃ: "img/day-hand-skin150.png",
        ΔΔᐃᐃΔⵠⵠ: "img/night-hand-skin150.png",
        ⲆⵠᐃⲆΔᐃⵠ: "img/day-hand-skin151.png",
        ⵠⲆᐃⲆⵠⲆᐃ: "img/night-hand-skin151.png",
        ᐃⵠΔᐃⲆΔⲆ: "img/day-hand-skin152.png",
        ⵠᐃⵠⵠΔᐃⲆ: "img/night-hand-skin152.png",
        ᐃⲆΔΔᐃⲆⲆ: "img/day-hand-skin153.png",
        ΔⲆⵠⵠⵠΔᐃ: "img/night-hand-skin153.png",
        ΔⲆⲆⵠⲆᐃΔ: "img/day-hand-skin154.png",
        Ⲇᐃᐃⵠⵠᐃᐃ: "img/night-hand-skin154.png",
        ⵠⵠΔΔⵠⵠⵠ: "img/day-hand-skin155.png",
        ᐃⵠᐃᐃΔᐃᐃ: "img/night-hand-skin155.png",
        ⲆᐃᐃⵠᐃΔΔ: "img/day-hand-skin156.png",
        ⵠᐃΔᐃᐃⵠⲆ: "img/night-hand-skin156.png",
        ⵠⵠᐃⲆΔⲆΔ: "img/day-hand-skin157.png",
        ⵠⲆⵠⲆΔⲆⵠ: "img/night-hand-skin157.png",
        ⵠⵠΔⵠᐃⵠⵠ: "img/day-hand-skin158.png",
        ⵠⵠᐃΔⲆⵠᐃ: "img/night-hand-skin158.png",
        ⲆΔΔⲆᐃⵠᐃ: "img/day-hand-skin159.png",
        ⵠΔΔΔⲆᐃΔ: "img/night-hand-skin159.png",
        ΔⲆⲆⵠΔⲆⲆ: "img/day-hand-skin160.png",
        ⲆⵠⵠⲆⲆⵠΔ: "img/night-hand-skin160.png",
        ⵠᐃΔᐃᐃᐃΔ: "img/day-hand-skin161.png",
        ᐃᐃⵠⵠⵠᐃᐃ: "img/night-hand-skin161.png",
        ⵠⵠⲆΔⵠⲆᐃ: "img/day-hand-skin162.png",
        ᐃᐃᐃᐃⵠⵠⲆ: "img/night-hand-skin162.png",
        ⲆᐃΔΔⲆᐃᐃ: "img/day-hand-skin163.png",
        ⲆⵠΔΔΔΔⵠ: "img/night-hand-skin163.png",
        ⵠΔⲆⲆΔΔΔ: "img/day-hand-skin164.png",
        ⲆⵠⵠᐃⲆⵠⲆ: "img/night-hand-skin164.png",
        ᐃΔⵠᐃⵠᐃᐃ: "img/day-hand-skin165.png",
        ᐃⲆⵠᐃΔⲆⵠ: "img/night-hand-skin165.png",
        ⵠⲆᐃᐃᐃΔΔ: "img/day-hand-skin166.png",
        ⲆΔⵠΔᐃⲆⲆ: "img/night-hand-skin166.png",
        ⵠⲆⵠⵠΔᐃΔ: "img/day-hand-skin167.png",
        ΔⲆΔΔⵠᐃⵠ: "img/night-hand-skin167.png",
        ΔΔΔⲆⵠΔⵠ: "img/day-hand-skin168.png",
        ΔⲆᐃᐃΔᐃⵠ: "img/night-hand-skin168.png",
        ᐃⵠⲆᐃᐃⲆⵠ: "img/day-hand-skin169.png",
        ᐃᐃᐃⲆⵠᐃⲆ: "img/night-hand-skin169.png",
        ⵠⲆⵠⵠᐃᐃΔ: "img/day-hand-skin170.png",
        ⲆΔΔⵠⵠᐃⲆ: "img/night-hand-skin170.png",
        ⲆΔⲆᐃΔΔⲆ: "img/day-hand-skin171.png",
        ᐃⵠΔᐃᐃᐃⲆ: "img/night-hand-skin171.png",
        ΔⲆᐃⲆΔⲆⵠ: "img/day-hand-skin172.png",
        ᐃⵠⵠᐃᐃⲆΔ: "img/night-hand-skin172.png",
        ᐃⲆΔⵠΔᐃⲆ: "img/day-hand-skin173.png",
        ⲆΔⲆⵠⵠⲆⵠ: "img/night-hand-skin173.png",
        ⵠⲆⲆΔⲆⲆΔ: "img/day-hand-skin174.png",
        ⵠᐃⲆΔⲆᐃⵠ: "img/night-hand-skin174.png",
        ⵠᐃᐃⵠⵠⲆⵠ: "img/day-hand-skin175.png",
        ⲆΔⵠⵠᐃᐃⵠ: "img/night-hand-skin175.png",
        ᐃΔᐃⵠᐃᐃⵠ: "img/day-hand-skin176.png",
        ᐃⵠᐃᐃⵠΔⲆ: "img/night-hand-skin176.png",
        ᐃΔᐃΔᐃΔᐃ: "img/day-hand-skin177.png",
        ᐃⲆᐃⲆⲆΔⵠ: "img/night-hand-skin177.png",
        ΔΔⵠⵠᐃⵠⵠ: "img/day-hand-skin178.png",
        ⲆΔᐃⲆΔΔⵠ: "img/night-hand-skin178.png",
        ⵠΔⵠΔⵠⵠⲆ: "img/day-hand-skin179.png",
        ΔⲆⲆΔⵠᐃⵠ: "img/night-hand-skin179.png",
        ΔᐃΔᐃΔⲆᐃ: "img/day-hand-skin180.png",
        ⲆᐃᐃΔΔΔⵠ: "img/night-hand-skin180.png",
        ⵠⵠⵠⲆᐃⲆⲆ: "img/day-hand-skin181.png",
        ΔΔⵠⲆⲆΔⵠ: "img/night-hand-skin181.png",
        ⲆⲆⲆΔΔⵠᐃ: "img/day-hand-skin182.png",
        ΔⲆᐃΔΔⲆⵠ: "img/night-hand-skin182.png",
        ⵠΔⲆⲆⵠⲆⲆ: "img/day-hand-skin183.png",
        ⲆᐃΔⵠᐃⲆΔ: "img/night-hand-skin183.png",
        ΔⲆΔᐃΔᐃᐃ: "img/day-hand-skin184.png",
        ᐃΔⲆⲆΔⵠᐃ: "img/night-hand-skin184.png",
        ⵠⲆΔΔΔΔⵠ: "img/day-hand-skin185.png",
        ⵠᐃΔⵠᐃᐃⲆ: "img/night-hand-skin185.png",
        ΔⲆΔⵠⲆᐃᐃ: "img/day-hand-skin186.png",
        ΔᐃᐃⵠⵠᐃⲆ: "img/night-hand-skin186.png",
        ⲆⵠⵠᐃΔΔᐃ: "img/day-hand-skin187.png",
        ⵠᐃⵠⵠᐃⲆΔ: "img/night-hand-skin187.png",
        ⵠⲆΔⲆΔΔΔ: "img/day-hand-skin188.png",
        ᐃⲆᐃⲆΔⲆⲆ: "img/night-hand-skin188.png",
        ⲆᐃᐃⵠⵠⲆⵠ: "img/day-hand-skin189.png",
        ᐃΔᐃⲆⲆⲆᐃ: "img/night-hand-skin189.png",
        ⲆΔⵠⲆΔᐃᐃ: "img/day-hand-skin190.png",
        ⵠⵠⲆΔΔⵠⵠ: "img/night-hand-skin190.png",
        ⲆΔⵠΔⲆⲆΔ: "img/day-hand-skin191.png",
        ΔᐃⵠᐃⲆⲆΔ: "img/night-hand-skin191.png",
        ⵠΔⵠⵠᐃᐃΔ: "img/day-hand-skin192.png",
        ⲆⲆⲆⲆΔᐃᐃ: "img/night-hand-skin192.png",
        ᐃⲆⲆⵠᐃΔⵠ: "img/day-hand-skin193.png",
        ⲆΔⵠᐃΔΔΔ: "img/night-hand-skin193.png",
        ⲆⲆⲆⵠⲆⵠᐃ: "img/day-hand-skin194.png",
        ⲆΔⵠⵠΔⲆⲆ: "img/night-hand-skin194.png",
        ᐃⲆⵠΔⲆⵠⵠ: "img/day-hand-skin195.png",
        ΔΔⵠᐃΔΔⲆ: "img/night-hand-skin195.png",
        ⵠᐃᐃⵠⵠΔⵠ: "img/day-hand-skin196.png",
        ⲆΔⵠⲆΔΔᐃ: "img/night-hand-skin196.png",
        ΔⲆⲆᐃΔᐃᐃ: "img/day-hand-skin197.png",
        ΔⵠᐃΔᐃⵠᐃ: "img/night-hand-skin197.png",
        ᐃⲆᐃⲆᐃᐃΔ: "img/day-hand-skin198.png",
        ᐃⲆⵠᐃⵠⵠⲆ: "img/night-hand-skin198.png",
        ⲆⵠⵠΔᐃΔⵠ: "img/day-hand-skin199.png",
        ⲆⲆᐃΔⵠⵠⵠ: "img/night-hand-skin199.png",
        ⵠΔᐃΔⵠⵠⵠ: "img/day-hand-skin200.png",
        ⵠᐃⲆΔⵠⲆΔ: "img/night-hand-skin200.png",
        ΔⲆᐃⵠⵠⲆⲆ: "img/day-hand-skin201.png",
        ΔᐃΔᐃⵠᐃᐃ: "img/night-hand-skin201.png",
        ᐃⵠΔᐃΔᐃᐃ: "img/day-hand-skin202.png",
        ⲆⵠⲆΔⲆᐃⵠ: "img/night-hand-skin202.png",
        ᐃⲆⲆΔⵠΔⲆ: "img/day-hand-skin203.png",
        ⵠⵠⵠⵠᐃⵠΔ: "img/night-hand-skin203.png",
        ⲆⲆⲆΔⵠⵠᐃ: "img/day-hand-skin204.png",
        ⲆΔⲆΔⲆΔᐃ: "img/night-hand-skin204.png",
        ΔⵠⵠΔΔⲆⵠ: "img/day-hand-skin205.png",
        ΔⵠΔⵠⲆⲆΔ: "img/night-hand-skin205.png",
        ΔⲆΔⲆⵠⲆᐃ: "img/day-hand-skin206.png",
        ⲆΔⵠᐃⵠⵠᐃ: "img/night-hand-skin206.png",
        ΔΔᐃΔⵠⲆⲆ: "img/day-hand-skin207.png",
        ⲆᐃΔΔⲆⲆⵠ: "img/night-hand-skin207.png",
        Ⲇᐃⵠᐃᐃᐃⵠ: "img/day-hand-skin208.png",
        ΔⵠᐃⵠⲆⲆᐃ: "img/night-hand-skin208.png",
        ᐃⵠⲆᐃΔΔⲆ: "img/day-hand-skin209.png",
        ⵠᐃⲆⵠΔᐃⲆ: "img/night-hand-skin209.png",
        ΔΔⲆⵠΔⲆΔ: "img/day-hand-skin210.png",
        ⲆΔⵠⵠⵠᐃⲆ: "img/night-hand-skin210.png",
        ΔΔⲆᐃᐃᐃⲆ: "img/day-hand-skin211.png",
        ⲆⲆΔᐃᐃⲆΔ: "img/night-hand-skin211.png",
        ⲆΔΔⵠᐃⵠᐃ: "img/day-hand-skin212.png",
        ᐃᐃΔᐃⲆᐃⵠ: "img/night-hand-skin212.png",
        ΔᐃᐃᐃᐃⵠⲆ: "img/day-bag-star0.png",
        ⵠΔᐃⲆⵠᐃⲆ: "img/night-bag-star0.png",
        ΔⵠⲆⵠᐃⵠⵠ: "img/day-bag0.png",
        ΔᐃᐃᐃⲆΔᐃ: "img/night-bag0.png",
        ΔⵠΔᐃⲆⲆⵠ: "img/day-bag1.png",
        ᐃⲆΔᐃⲆⲆᐃ: "img/night-bag1.png",
        ΔⲆΔᐃⲆⵠⲆ: "img/day-bag2.png",
        ⵠⵠΔᐃⲆΔⵠ: "img/night-bag2.png",
        ⲆⲆΔⵠᐃΔⲆ: "img/day-bag3.png",
        ⲆⵠᐃⵠᐃΔⲆ: "img/night-bag3.png",
        ⲆⵠⵠⲆΔᐃᐃ: "img/day-bag4.png",
        ΔᐃΔΔⵠⲆΔ: "img/night-bag4.png",
        ΔΔⲆⵠΔⵠⵠ: "img/day-bag5.png",
        ΔᐃⲆΔᐃⵠᐃ: "img/night-bag5.png",
        ⵠⲆⵠᐃᐃⲆΔ: "img/day-bag6.png",
        ⲆΔⵠⵠⲆᐃⲆ: "img/night-bag6.png",
        ᐃΔΔΔΔΔⲆ: "img/day-bag7.png",
        ᐃᐃⲆⲆᐃⵠⵠ: "img/night-bag7.png",
        ⲆⵠᐃᐃⲆⵠᐃ: "img/day-bag8.png",
        ᐃᐃᐃΔⲆⵠⵠ: "img/night-bag8.png",
        ⵠⵠⵠᐃⵠⵠᐃ: "img/day-bag9.png",
        ⵠᐃΔΔⲆⲆⲆ: "img/night-bag9.png",
        ΔⲆⵠⵠΔΔᐃ: "img/day-bag10.png",
        ΔΔΔΔΔⲆⵠ: "img/night-bag10.png",
        ᐃΔⵠΔⲆΔⲆ: "img/day-bag11.png",
        ᐃⵠⵠⵠⵠΔⵠ: "img/night-bag11.png",
        ᐃⵠⵠⲆΔⲆⲆ: "img/day-bag13.png",
        ᐃᐃᐃᐃΔᐃΔ: "img/night-bag13.png",
        ⵠΔᐃⲆΔᐃΔ: "img/day-bag14.png",
        ⵠⵠᐃᐃᐃⵠⲆ: "img/night-bag14.png",
        ΔᐃΔΔⵠᐃΔ: "img/day-bag16.png",
        ⵠᐃⵠⵠΔΔᐃ: "img/night-bag16.png",
        ⲆⵠᐃⲆΔΔᐃ: "img/day-bag17.png",
        ΔⵠⵠᐃⲆΔⲆ: "img/night-bag17.png",
        ᐃⵠᐃⲆⲆᐃⲆ: "img/day-bag18.png",
        ᐃⲆⵠᐃⲆⵠⵠ: "img/night-bag18.png",
        ⲆᐃⲆΔᐃᐃᐃ: "img/day-bag19.png",
        ΔⵠᐃᐃⲆΔⲆ: "img/night-bag19.png",
        ⲆᐃⲆⲆⵠⲆΔ: "img/day-bag20.png",
        ⲆⵠΔⵠΔⵠᐃ: "img/night-bag20.png",
        ⵠⲆΔΔᐃΔᐃ: "img/day-bag21.png",
        ΔᐃⲆⵠᐃᐃⵠ: "img/night-bag21.png",
        ⵠᐃᐃᐃΔᐃⵠ: "img/day-bag22.png",
        ⲆⵠⵠⲆⲆⲆᐃ: "img/night-bag22.png",
        ⲆΔᐃⲆⵠΔΔ: "img/day-bag23.png",
        ΔᐃⲆⵠⵠΔⲆ: "img/night-bag23.png",
        ᐃΔΔⵠⲆᐃⲆ: "img/day-bag24.png",
        ⵠΔⵠΔᐃΔⲆ: "img/night-bag24.png",
        ΔⲆΔΔᐃᐃᐃ: "img/day-bag25.png",
        ΔᐃⵠⵠⵠⲆⵠ: "img/night-bag25.png",
        ⵠⵠⲆΔᐃⲆⵠ: "img/day-bag26.png",
        ᐃⵠΔⲆⲆⵠᐃ: "img/night-bag26.png",
        ⲆⲆⲆᐃⵠⲆᐃ: "img/day-bag27.png",
        ⲆⵠⲆⵠΔⲆΔ: "img/night-bag27.png",
        ⲆΔⲆⵠᐃΔᐃ: "img/day-bag28.png",
        ⵠΔⲆΔᐃⵠΔ: "img/night-bag28.png",
        ⵠⲆΔΔᐃΔⲆ: "img/day-bag29.png",
        ⲆᐃΔⵠⲆΔᐃ: "img/night-bag29.png",
        ⲆΔᐃⲆΔΔΔ: "img/day-bag30.png",
        ⲆᐃΔⲆΔΔⵠ: "img/night-bag30.png",
        ᐃⲆⲆⲆⲆΔᐃ: "img/day-bag31.png",
        ΔⵠⵠΔⵠᐃΔ: "img/night-bag31.png",
        ᐃᐃᐃⵠΔᐃⵠ: "img/day-bag32.png",
        ΔΔⲆⵠᐃⲆⵠ: "img/night-bag32.png",
        ⲆⲆΔⲆⵠᐃΔ: "img/day-bag33.png",
        ⲆⲆⵠᐃⵠⲆⵠ: "img/night-bag33.png",
        ᐃᐃⵠΔΔⵠΔ: "img/day-bag34.png",
        ⵠᐃⲆⲆΔΔⵠ: "img/night-bag34.png",
        ᐃΔⵠⲆᐃᐃⵠ: "img/day-bag35.png",
        Ⲇⵠⵠᐃⵠⵠⵠ: "img/night-bag35.png",
        ⲆⲆΔⵠⲆᐃᐃ: "img/day-bag36.png",
        ⲆⵠΔⵠⲆⲆⲆ: "img/night-bag36.png",
        ⲆᐃᐃΔⵠⵠⲆ: "img/day-bag37.png",
        ΔᐃΔⲆᐃⲆΔ: "img/night-bag37.png",
        ⲆᐃⵠᐃⲆⲆⲆ: "img/day-bag38.png",
        ⵠⵠᐃⲆᐃⵠΔ: "img/night-bag38.png",
        ᐃΔᐃΔΔⲆᐃ: "img/day-bag39.png",
        ᐃⵠⵠΔΔΔⵠ: "img/night-bag39.png",
        ⲆⵠⲆᐃΔⲆΔ: "img/day-bag40.png",
        ᐃⲆᐃⵠΔᐃᐃ: "img/night-bag40.png",
        ⲆΔⲆⲆⲆⲆΔ: "img/day-bag41.png",
        ⲆⲆΔⲆⵠⵠⵠ: "img/night-bag41.png",
        ᐃⵠΔΔᐃⵠⵠ: "img/day-bag42.png",
        ⵠᐃΔΔᐃⵠⵠ: "img/night-bag42.png",
        ΔⲆⵠᐃⲆⲆᐃ: "img/day-bag43.png",
        ⲆⵠᐃΔⵠⵠᐃ: "img/night-bag43.png",
        ⵠⲆⵠⲆᐃⵠⵠ: "img/day-bag44.png",
        ᐃᐃᐃⵠΔΔⵠ: "img/night-bag44.png",
        ᐃΔⵠᐃΔΔΔ: "img/day-bag45.png",
        ᐃΔΔΔᐃΔΔ: "img/night-bag45.png",
        ᐃⲆⵠᐃⵠΔΔ: "img/day-bag46.png",
        ΔᐃΔΔⲆΔⲆ: "img/night-bag46.png",
        ⵠⵠᐃᐃᐃᐃⵠ: "img/day-bag47.png",
        ΔΔΔⲆΔΔⵠ: "img/night-bag47.png",
        ΔⲆᐃΔⵠᐃⲆ: "img/day-bag48.png",
        ΔΔⲆᐃᐃⵠᐃ: "img/night-bag48.png",
        ⵠⵠⵠⲆⲆⲆΔ: "img/day-bag49.png",
        ΔⵠⵠᐃΔΔᐃ: "img/night-bag49.png",
        ⲆΔᐃⵠᐃⲆⲆ: "img/day-bag50.png",
        ⵠΔᐃⲆⵠΔΔ: "img/night-bag50.png",
        ⲆΔⵠⵠᐃⲆⲆ: "img/day-bag51.png",
        ΔⲆⲆᐃᐃΔⵠ: "img/night-bag51.png",
        ⵠᐃⲆΔⲆⵠⵠ: "img/day-bag52.png",
        ⵠⲆᐃⵠΔᐃⵠ: "img/night-bag52.png",
        ⲆΔᐃⵠΔᐃⲆ: "img/day-bag53.png",
        ⵠⵠΔΔᐃᐃⲆ: "img/night-bag53.png",
        ⵠⲆⲆᐃⵠΔΔ: "img/day-bag54.png",
        ᐃᐃΔⲆΔΔᐃ: "img/night-bag54.png",
        ⲆᐃᐃΔΔⲆᐃ: "img/day-bag55.png",
        ⵠⲆᐃⲆᐃΔΔ: "img/night-bag55.png",
        ⵠⲆⲆΔΔⲆⵠ: "img/day-bag56.png",
        ᐃΔⵠΔᐃΔⲆ: "img/night-bag56.png",
        ⵠⵠᐃΔⵠⲆᐃ: "img/day-bag57.png",
        ΔⵠΔⲆΔⲆΔ: "img/night-bag57.png",
        ⵠᐃΔⵠᐃⲆΔ: "img/day-bag58.png",
        ⲆⲆⵠΔΔᐃⲆ: "img/night-bag58.png",
        ΔⵠᐃⲆⵠⲆⵠ: "img/day-bag59.png",
        ⲆⲆᐃᐃⲆⵠΔ: "img/night-bag59.png",
        ⲆᐃⵠⲆⲆΔⵠ: "img/day-bag60.png",
        ⵠⲆΔⵠⲆΔⲆ: "img/night-bag60.png",
        ⲆΔΔΔⵠⲆⲆ: "img/day-bag61.png",
        ΔᐃᐃΔΔᐃⲆ: "img/night-bag61.png",
        ΔⵠᐃⲆⲆⵠⲆ: "img/day-bag62.png",
        ⵠᐃⵠᐃⲆⵠⵠ: "img/night-bag62.png",
        ⵠⲆΔᐃᐃⲆⵠ: "img/day-bag63.png",
        ᐃⲆΔΔΔⲆⵠ: "img/night-bag63.png",
        ΔΔⲆᐃΔᐃΔ: "img/day-bag64.png",
        ᐃⲆᐃⵠⵠᐃⲆ: "img/night-bag64.png",
        ⲆᐃⲆΔⲆΔⵠ: "img/day-bag65.png",
        ⵠⲆᐃⵠⲆᐃᐃ: "img/night-bag65.png",
        ΔΔΔᐃᐃΔΔ: "img/day-bag66.png",
        ΔᐃᐃᐃᐃⲆⵠ: "img/night-bag66.png",
        ⲆⲆᐃΔᐃⲆᐃ: "img/day-bag67.png",
        ⵠᐃⲆⲆⲆⲆⲆ: "img/night-bag67.png",
        ΔᐃΔΔᐃⵠⵠ: "img/day-bag68.png",
        ⵠⲆⵠⲆΔⲆΔ: "img/night-bag68.png",
        ᐃⲆᐃⵠⲆΔᐃ: "img/day-bag69.png",
        ⵠⲆⲆΔⵠΔⲆ: "img/night-bag69.png",
        ΔᐃⲆⲆⲆⵠᐃ: "img/day-bag70.png",
        ⵠᐃΔΔⲆΔᐃ: "img/night-bag70.png",
        ⲆⵠᐃⵠⵠΔⵠ: "img/day-bag71.png",
        ΔⵠⵠⲆⵠΔᐃ: "img/night-bag71.png",
        ⲆΔᐃⲆΔⵠᐃ: "img/day-bag72.png",
        ᐃᐃΔᐃᐃⲆⵠ: "img/night-bag72.png",
        ⵠΔΔⲆⲆⲆⵠ: "img/day-bag73.png",
        ᐃⲆⵠⲆΔⵠⵠ: "img/night-bag73.png",
        ⲆⲆⲆᐃᐃⲆΔ: "img/day-bag74.png",
        ΔΔⵠᐃⲆᐃⵠ: "img/night-bag74.png",
        ⵠᐃᐃΔⲆⲆⲆ: "img/day-bag75.png",
        ᐃⲆⲆⲆᐃⲆΔ: "img/night-bag75.png",
        ᐃᐃΔΔΔⵠΔ: "img/day-bag76.png",
        ⲆⵠⲆᐃⵠΔⵠ: "img/night-bag76.png",
        ᐃⲆΔᐃⵠⲆᐃ: "img/day-bag77.png",
        ΔΔᐃΔᐃᐃⲆ: "img/night-bag77.png",
        ⵠⵠⵠⵠᐃΔⲆ: "img/day-bag78.png",
        ⵠᐃΔⲆᐃⲆⵠ: "img/night-bag78.png",
        ⲆΔⵠⵠᐃⵠΔ: "img/day-bag79.png",
        ⲆΔΔᐃᐃⲆᐃ: "img/night-bag79.png",
        ᐃᐃⵠⵠⵠΔΔ: "img/day-bag80.png",
        ⲆⲆⵠΔⲆⲆᐃ: "img/night-bag80.png",
        ᐃⲆⲆⵠᐃⵠᐃ: "img/day-accessory0.png",
        ᐃᐃΔΔⵠⵠⲆ: "img/day-accessory0-pacques.png",
        ⲆⲆΔᐃΔⵠⲆ: "img/night-accessory0-pacques.png",
        ᐃⲆⵠⲆᐃᐃᐃ: "img/day-accessory13.png",
        ᐃⲆᐃⵠⵠⲆᐃ: "img/night-accessory13.png",
        ⲆΔⲆⵠΔⵠᐃ: "img/day-accessory14.png",
        ΔⲆⵠⵠⵠᐃⲆ: "img/night-accessory14.png",
        ΔᐃⲆΔᐃΔⵠ: "img/day-accessory15.png",
        ᐃⲆᐃⲆⵠⵠΔ: "img/night-accessory15.png",
        ⲆᐃᐃⵠⵠΔᐃ: "img/day-accessory16.png",
        ᐃⵠΔΔⵠΔⵠ: "img/night-accessory16.png",
        ΔⲆⵠᐃΔⲆΔ: "img/day-accessory17.png",
        ⲆΔⲆΔΔΔΔ: "img/day-accessory17.png",
        ΔⲆᐃΔᐃⲆΔ: "img/day-accessory19.png",
        ⵠⲆⲆⲆⲆΔΔ: "img/night-accessory19.png",
        ⲆⵠⲆⲆⲆΔᐃ: "img/day-accessory20.png",
        ᐃᐃⵠⵠⵠⲆⲆ: "img/night-accessory20.png",
        ᐃⲆΔΔᐃⵠᐃ: "img/day-accessory21.png",
        ΔᐃΔⲆⵠᐃⲆ: "img/night-accessory21.png",
        ᐃⵠⲆⵠᐃⵠⲆ: "img/day-accessory22.png",
        ⵠᐃΔⵠⲆΔⲆ: "img/night-accessory22.png",
        ᐃⲆⵠΔΔΔᐃ: "img/day-accessory23.png",
        ⵠⵠⵠⲆⵠⲆⵠ: "img/night-accessory23.png",
        ⲆΔᐃⲆⲆⵠᐃ: "img/day-accessory24.png",
        ᐃᐃᐃⲆᐃᐃᐃ: "img/night-accessory24.png",
        ᐃⵠᐃⵠⵠⵠⲆ: "img/day-accessory25.png",
        ᐃΔΔᐃⵠΔⲆ: "img/night-accessory25.png",
        ᐃⲆⵠⵠᐃⵠⵠ: "img/day-accessory26.png",
        ᐃΔⲆᐃᐃⲆⵠ: "img/night-accessory26.png",
        ⵠᐃΔⵠΔΔⵠ: "img/day-accessory27.png",
        ⲆⲆⲆᐃΔⵠⲆ: "img/night-accessory27.png",
        ΔⲆᐃⵠⵠⵠⲆ: "img/day-accessory18.png",
        ⲆᐃΔⲆᐃⲆⲆ: "img/night-accessory18.png",
        ⲆⲆᐃΔᐃΔⲆ: "img/day-accessory29.png",
        ⲆⵠᐃⵠᐃᐃⲆ: "img/night-accessory29.png",
        ⵠⵠΔⲆᐃⵠᐃ: "img/day-accessory30.png",
        ⵠⵠⵠΔᐃᐃΔ: "img/night-accessory30.png",
        ⵠⵠⲆᐃⲆⲆΔ: "img/day-accessory31.png",
        ⵠⲆⵠΔΔⲆⵠ: "img/night-accessory31.png",
        ᐃΔⲆⵠⵠⲆⵠ: "img/day-accessory32.png",
        ⲆⵠⵠᐃⵠΔⵠ: "img/night-accessory32.png",
        ᐃᐃΔⲆⲆᐃⲆ: "img/day-accessory33.png",
        ΔᐃⵠⲆᐃⵠΔ: "img/night-accessory33.png",
        ⲆΔΔᐃΔᐃⲆ: "img/day-accessory34.png",
        ⵠⵠⵠⲆᐃΔᐃ: "img/night-accessory34.png",
        ⲆⲆⲆᐃⲆⵠⲆ: "img/day-accessory35.png",
        ⵠⵠⵠΔᐃⲆⵠ: "img/night-accessory35.png",
        ΔᐃⲆᐃⵠⲆᐃ: "img/day-accessory28.png",
        Ⲇⵠᐃⵠᐃᐃⵠ: "img/night-accessory28.png",
        ᐃΔΔⲆⵠⲆΔ: "img/day-accessory36.png",
        ᐃⲆΔⵠᐃⵠᐃ: "img/night-accessory36.png",
        ⲆⵠᐃⵠⵠⲆᐃ: "img/day-accessory37.png",
        ΔᐃⵠΔⵠⲆⲆ: "img/night-accessory37.png",
        ⵠⲆᐃᐃᐃΔⵠ: "img/day-accessory39.png",
        ᐃⵠΔΔⵠᐃΔ: "img/night-accessory39.png",
        ⲆΔⲆⵠⵠΔᐃ: "img/day-accessory40.png",
        ᐃⵠᐃΔΔᐃⵠ: "img/night-accessory40.png",
        ⵠⲆⵠⲆⵠⲆⲆ: "img/day-accessory41.png",
        ΔΔⲆⵠⵠΔⵠ: "img/night-accessory41.png",
        ⵠΔⲆᐃⵠΔᐃ: "img/day-accessory42.png",
        ᐃⲆᐃΔⲆᐃΔ: "img/night-accessory42.png",
        ⵠⲆⲆΔⵠᐃᐃ: "img/day-accessory43.png",
        ⲆⲆⵠⵠⲆΔⲆ: "img/night-accessory43.png",
        ᐃᐃΔⲆⲆⵠᐃ: "img/day-accessory44.png",
        ᐃΔⲆᐃᐃΔΔ: "img/night-accessory44.png",
        ⵠⵠΔᐃᐃᐃⲆ: "img/day-accessory38.png",
        ⲆΔΔᐃΔⲆⵠ: "img/night-accessory38.png",
        ⵠᐃⲆⲆᐃⲆⲆ: "img/day-accessory46.png",
        ᐃΔⲆⵠΔᐃΔ: "img/night-accessory46.png",
        ⵠⲆⵠⲆΔᐃⲆ: "img/day-accessory47.png",
        ⲆⵠᐃⲆᐃⵠⲆ: "img/night-accessory47.png",
        ΔᐃⵠΔΔΔᐃ: "img/day-accessory48.png",
        ᐃⲆⲆᐃⲆΔᐃ: "img/night-accessory48.png",
        ΔⲆᐃᐃⲆᐃᐃ: "img/day-accessory49.png",
        ΔΔΔΔΔᐃᐃ: "img/night-accessory49.png",
        ⵠⵠᐃᐃⲆⲆⲆ: "img/day-accessory45.png",
        ᐃᐃⵠΔⵠΔⵠ: "img/night-accessory45.png",
        ΔⵠᐃⵠΔᐃΔ: "img/day-accessory50.png",
        ΔⲆⵠⲆᐃΔⲆ: "img/night-accessory50.png",
        ⲆᐃⵠⲆΔᐃΔ: "img/day-accessory51.png",
        ⲆⲆⵠᐃⲆΔᐃ: "img/night-accessory51.png",
        ⵠΔⵠⵠᐃᐃᐃ: "img/day-accessory52.png",
        ΔⵠΔⲆⵠᐃΔ: "img/night-accessory52.png",
        ΔᐃⵠΔΔΔⲆ: "img/day-accessory53.png",
        ⲆΔΔⵠⵠΔⲆ: "img/night-accessory53.png",
        ⲆᐃᐃΔⵠΔⲆ: "img/day-accessory54.png",
        ᐃⵠⲆΔⵠⲆΔ: "img/night-accessory54.png",
        ⵠᐃᐃΔΔⵠⲆ: "img/day-accessory55.png",
        ⲆⵠΔⵠⵠⲆⵠ: "img/night-accessory55.png",
        ⲆᐃΔⲆᐃⵠᐃ: "img/day-accessory56.png",
        ⲆⵠᐃᐃⵠΔΔ: "img/night-accessory56.png",
        ΔᐃⲆⵠΔⵠⵠ: "img/day-accessory57.png",
        ⵠⲆⵠΔΔⵠᐃ: "img/night-accessory57.png",
        ⵠᐃΔⲆⵠⲆⲆ: "img/day-accessory58.png",
        ᐃΔΔΔᐃᐃᐃ: "img/night-accessory58.png",
        ᐃⵠⲆⵠᐃᐃᐃ: "img/day-accessory59.png",
        ⵠΔᐃᐃⲆᐃⵠ: "img/night-accessory59.png",
        ⲆⵠⵠⲆΔⲆⵠ: "img/day-accessory60.png",
        ⵠΔᐃⲆᐃᐃᐃ: "img/night-accessory60.png",
        ⲆⵠΔᐃᐃΔⵠ: "img/day-accessory61.png",
        ΔᐃᐃⵠᐃΔΔ: "img/night-accessory61.png",
        ᐃⵠⵠΔᐃᐃⵠ: "img/day-accessory62.png",
        ᐃᐃⲆⲆⵠΔΔ: "img/night-accessory62.png",
        ΔᐃⲆⵠⲆᐃⵠ: "img/day-accessory63.png",
        ⵠⵠⲆᐃΔⵠᐃ: "img/night-accessory63.png",
        ΔⵠΔᐃⲆᐃᐃ: "img/day-accessory64.png",
        ΔᐃΔⵠᐃΔᐃ: "img/night-accessory64.png",
        ᐃⲆⵠⵠᐃᐃΔ: "img/day-accessory65.png",
        ⲆΔⲆᐃⵠΔⵠ: "img/night-accessory65.png",
        ⲆⲆᐃΔΔⵠΔ: "img/day-accessory66.png",
        ΔᐃᐃⵠΔⵠⵠ: "img/night-accessory66.png",
        ΔΔⲆΔᐃΔᐃ: "img/day-accessory67.png",
        ⵠⵠΔⵠⵠⲆᐃ: "img/night-accessory67.png",
        ᐃᐃⲆⵠᐃᐃᐃ: "img/day-accessory68.png",
        ΔⵠΔⵠⲆΔΔ: "img/night-accessory68.png",
        ⲆⲆΔⵠᐃⵠᐃ: "img/day-accessory69.png",
        ⲆᐃⵠⲆᐃⵠᐃ: "img/night-accessory69.png",
        ᐃⲆᐃⲆⲆᐃᐃ: "img/day-accessory70.png",
        ᐃⲆⲆⵠⲆⵠᐃ: "img/night-accessory70.png",
        ᐃΔⵠᐃⲆⵠᐃ: "img/day-accessory71.png",
        ⲆⵠⵠᐃΔΔⲆ: "img/night-accessory71.png",
        ᐃᐃΔΔᐃⲆᐃ: "img/day-accessory72.png",
        ⲆᐃᐃⲆΔΔⵠ: "img/night-accessory72.png",
        ⵠΔⲆⲆᐃⵠⵠ: "img/day-accessory73.png",
        ΔⲆⵠΔᐃⲆⵠ: "img/night-accessory73.png",
        ᐃⲆⵠΔⵠⲆⵠ: "img/day-accessory74.png",
        ᐃΔᐃⲆΔⵠᐃ: "img/night-accessory74.png",
        ⵠⵠⵠⵠⵠⲆΔ: "img/day-accessory75.png",
        ΔΔΔᐃᐃⵠⵠ: "img/night-accessory75.png",
        ᐃᐃᐃⵠᐃⵠΔ: "img/day-accessory76.png",
        ΔⵠᐃⲆᐃⲆᐃ: "img/night-accessory76.png",
        ᐃⲆⲆΔⵠᐃᐃ: "img/day-accessory77.png",
        ⲆⲆΔΔᐃᐃΔ: "img/night-accessory77.png",
        ⲆᐃΔⵠⲆⲆⲆ: "img/day-accessory78.png",
        ΔⵠⵠⲆΔᐃᐃ: "img/night-accessory78.png",
        ΔΔⲆⲆΔΔᐃ: "img/day-accessory79.png",
        ⲆΔⵠΔᐃᐃⲆ: "img/night-accessory79.png",
        ⵠΔΔⲆⵠⲆⵠ: "img/day-accessory80.png",
        ⲆΔᐃᐃⲆᐃᐃ: "img/night-accessory80.png",
        ⵠᐃᐃᐃⵠⲆⲆ: "img/day-accessory81.png",
        ⵠⵠⲆⲆⲆᐃΔ: "img/night-accessory81.png",
        ⲆⵠΔᐃΔΔᐃ: "img/day-accessory83.png",
        ᐃᐃΔᐃⵠⵠⲆ: "img/night-accessory83.png",
        ᐃⲆⵠⵠⵠⵠⵠ: "img/day-accessory84.png",
        ΔⲆΔⵠΔᐃⵠ: "img/night-accessory84.png",
        ⲆⵠΔⵠᐃⵠⵠ: "img/day-accessory85.png",
        ΔⲆⲆΔⵠⵠΔ: "img/night-accessory85.png",
        ⲆΔΔᐃᐃᐃⵠ: "img/day-accessory86.png",
        ΔⵠᐃΔⲆⲆᐃ: "img/night-accessory86.png",
        ᐃᐃΔⲆΔⲆⲆ: "img/day-accessory87.png",
        ΔⵠᐃΔⲆⵠⲆ: "img/night-accessory87.png",
        ΔⲆⲆᐃⲆⲆᐃ: "img/day-accessory88.png",
        ⲆΔⵠⵠⲆᐃⵠ: "img/night-accessory88.png",
        ⵠⵠᐃΔΔΔⲆ: "img/day-accessory89.png",
        ᐃᐃᐃⵠⲆᐃⲆ: "img/night-accessory89.png",
        ᐃΔⵠΔⵠⵠⲆ: "img/day-accessory90.png",
        ⵠᐃⵠΔᐃΔⵠ: "img/night-accessory90.png",
        ΔⲆⵠⲆᐃⲆⵠ: "img/day-accessory91.png",
        ⲆᐃΔⲆⵠⵠᐃ: "img/night-accessory91.png",
        ᐃⵠΔⵠⲆⵠᐃ: "img/day-accessory92.png",
        ⲆⲆⵠⲆΔᐃᐃ: "img/night-accessory92.png",
        ⲆᐃⵠⲆⲆⵠⵠ: "img/day-accessory93.png",
        ⲆⲆΔⲆⵠⵠⲆ: "img/night-accessory93.png",
        ΔⵠⵠⵠⲆΔᐃ: "img/day-accessory94.png",
        ⵠⲆΔⵠⲆⲆᐃ: "img/night-accessory94.png",
        ᐃᐃⵠᐃⲆᐃΔ: "img/day-accessory95.png",
        ⵠⲆᐃⲆⲆᐃⵠ: "img/night-accessory95.png",
        ᐃΔⵠᐃᐃⵠⲆ: "img/day-accessory96.png",
        ⵠⵠᐃⲆⲆⵠⵠ: "img/night-accessory96.png",
        ΔᐃⲆⲆΔⲆⲆ: "img/day-accessory97.png",
        ΔΔⲆⵠⲆΔⵠ: "img/night-accessory97.png",
        ΔᐃⲆΔΔⲆⵠ: "img/day-accessory98.png",
        ᐃⵠⲆΔⲆᐃⵠ: "img/night-accessory98.png",
        ⲆⵠΔΔⲆᐃᐃ: "img/day-accessory99.png",
        ᐃΔⵠⵠⲆⵠΔ: "img/night-accessory99.png",
        ΔⲆΔⲆΔᐃΔ: "img/day-accessory100.png",
        ΔⵠⲆⲆⲆᐃⲆ: "img/night-accessory100.png",
        ⵠⵠⲆᐃᐃᐃⵠ: "img/day-accessory101.png",
        ⵠⵠᐃⵠᐃΔᐃ: "img/night-accessory101.png",
        ᐃⵠⲆⵠᐃΔΔ: "img/day-accessory102.png",
        ΔⵠᐃᐃΔᐃⲆ: "img/night-accessory102.png",
        ⲆᐃⵠᐃⲆⵠΔ: "img/day-accessory103.png",
        ᐃⵠᐃᐃΔᐃΔ: "img/night-accessory103.png",
        ⵠᐃΔΔⵠΔⵠ: "img/day-accessory104.png",
        ᐃⵠⲆⲆⵠΔᐃ: "img/night-accessory104.png",
        ⲆᐃⲆⲆⵠⵠⲆ: "img/day-accessory105.png",
        ⲆΔⵠΔᐃⲆⵠ: "img/night-accessory105.png",
        ⵠⲆⵠⲆⲆᐃΔⲆⲆ: "img/day-accessory106.png",
        ⵠΔΔⲆⲆᐃⲆⲆᐃ: "img/night-accessory106.png",
        ᐃΔΔᐃⲆΔΔⲆᐃ: "img/day-accessory107.png",
        ΔᐃⲆᐃⵠΔⵠΔΔ: "img/night-accessory107.png",
        ᐃΔΔΔΔⲆⲆ: "img/day-accessory82.png",
        ΔᐃᐃΔⲆᐃⵠ: "img/night-accessory82.png",
        ᐃΔΔΔᐃᐃΔ: "img/day-book0.png",
        ᐃΔⲆᐃⲆΔΔ: "img/night-book0.png",
        ᐃⵠⲆΔᐃᐃΔ: "img/day-book1.png",
        ᐃⵠⲆⲆΔⲆⵠ: "img/night-book1.png",
        ΔΔⲆΔⲆᐃᐃ: "img/day-book2.png",
        ⵠⲆⵠⲆⲆᐃᐃ: "img/night-book2.png",
        ΔⲆᐃⲆᐃⲆᐃ: "img/day-book3.png",
        ΔΔⲆⵠⵠᐃᐃ: "img/night-book3.png",
        ⵠᐃⵠᐃΔΔⲆ: "img/day-book4.png",
        ⵠⲆⲆⲆⵠᐃΔ: "img/night-book4.png",
        ᐃⲆⲆᐃⵠᐃᐃ: "img/day-book5.png",
        ⵠᐃⲆᐃⵠⲆᐃ: "img/night-book5.png",
        ΔⲆⵠⵠⵠⵠΔ: "img/day-book6.png",
        ⵠⵠⲆⵠΔⲆΔ: "img/night-book6.png",
        ᐃⵠⲆⵠᐃΔⵠ: "img/day-book7.png",
        ᐃΔΔⵠⵠᐃΔ: "img/night-book7.png",
        ᐃⵠⵠⵠΔⲆΔ: "img/day-book8.png",
        ΔⲆⲆᐃΔⵠᐃ: "img/night-book8.png",
        ⲆΔⲆⲆⲆⲆⵠ: "img/day-book9.png",
        ⲆᐃⵠᐃΔⵠΔ: "img/night-book9.png",
        ⲆᐃⵠⵠᐃⲆⲆ: "img/day-book10.png",
        ΔᐃΔᐃⲆᐃⲆ: "img/night-book10.png",
        ΔᐃᐃⵠⲆⲆⲆ: "img/day-book11.png",
        ᐃᐃΔⲆⵠᐃΔ: "img/night-book11.png",
        ⲆΔⲆᐃⵠⵠⲆ: "img/day-book12.png",
        ΔΔⵠⵠᐃΔᐃ: "img/night-book12.png",
        ᐃⵠⲆΔⵠΔⵠ: "img/day-book13.png",
        ⲆⵠᐃᐃΔⵠⲆ: "img/night-book13.png",
        ⵠⵠⵠⵠᐃⲆⵠ: "img/day-book14.png",
        ⵠⲆⵠᐃⵠΔⲆ: "img/night-book14.png",
        ΔⲆΔⵠⵠΔᐃ: "img/day-book15.png",
        ⵠᐃᐃΔⵠᐃΔ: "img/night-book15.png",
        ᐃΔΔⲆⵠⵠΔ: "img/day-book16.png",
        ᐃⲆΔΔᐃΔⲆ: "img/night-book16.png",
        ⲆᐃΔᐃⲆΔΔ: "img/day-book17.png",
        ⲆᐃΔΔⲆᐃⵠ: "img/night-book17.png",
        ⲆΔᐃΔⲆΔⵠ: "img/day-book18.png",
        ⲆⵠᐃᐃΔⲆⲆ: "img/night-book18.png",
        ⲆᐃᐃⲆⲆᐃⲆ: "img/day-book19.png",
        ⵠΔⵠΔⲆᐃⲆ: "img/night-book19.png",
        ⵠⲆΔᐃⲆᐃΔ: "img/day-book20.png",
        ⵠᐃΔᐃᐃΔⵠ: "img/night-book20.png",
        ⲆⲆⲆⲆΔⵠⲆ: "img/day-book21.png",
        ⵠⵠΔΔⵠⵠᐃ: "img/night-book21.png",
        ⲆⵠⵠⵠⵠᐃΔ: "img/day-book22.png",
        ⲆⲆⲆⵠΔΔΔ: "img/night-book22.png",
        ⵠⲆᐃᐃⵠΔᐃ: "img/day-book23.png",
        ⲆⵠΔⲆΔΔΔ: "img/night-book23.png",
        ⵠⲆⲆΔⲆᐃΔ: "img/day-book24.png",
        ᐃᐃᐃⵠⲆᐃⵠ: "img/night-book24.png",
        Δᐃⵠⵠⵠⵠᐃ: "img/day-book25.png",
        ΔⵠΔⵠᐃᐃⲆ: "img/night-book25.png",
        ⲆⵠΔⵠΔΔⲆ: "img/day-book26.png",
        ᐃΔᐃᐃΔⲆⵠ: "img/night-book26.png",
        ΔᐃᐃⵠΔΔᐃ: "img/day-book27.png",
        ⲆΔΔΔⵠᐃⵠ: "img/night-book27.png",
        ⲆᐃⵠⲆⲆᐃⲆ: "img/day-book28.png",
        ⲆΔᐃⲆⵠⲆᐃ: "img/night-book28.png",
        ⵠⵠⵠⲆᐃⲆΔ: "img/day-book29.png",
        ᐃᐃⲆⵠⵠᐃΔ: "img/night-book29.png",
        ΔᐃΔᐃⲆⲆⵠ: "img/day-book30.png",
        ⵠΔᐃΔⵠⵠᐃ: "img/night-book30.png",
        ᐃᐃᐃⲆⲆⲆⲆ: "img/day-book31.png",
        ΔᐃⵠΔⵠⲆᐃ: "img/night-book31.png",
        ⲆᐃⲆⲆⲆⵠⵠ: "img/day-book32.png",
        ⵠⵠⵠⵠᐃᐃΔ: "img/night-book32.png",
        ᐃΔᐃΔᐃⵠΔ: "img/day-book33.png",
        ⵠⵠⲆᐃⲆᐃⵠ: "img/night-book33.png",
        ⲆΔᐃᐃᐃΔΔ: "img/day-book34.png",
        ᐃΔᐃᐃᐃΔⲆ: "img/night-book34.png",
        ⵠᐃⲆΔⲆΔᐃ: "img/day-book35.png",
        ᐃΔᐃⵠⲆΔⵠ: "img/night-book35.png",
        ᐃⲆⲆΔⲆΔⲆ: "img/day-book36.png",
        ᐃᐃΔⲆΔᐃⵠ: "img/night-book36.png",
        ⲆᐃⵠⲆᐃⵠᐃᐃᐃ: "img/day-book37.png",
        ΔᐃᐃᐃᐃⲆⵠⲆⲆ: "img/night-book37.png",
        ΔΔΔⵠⲆⵠⵠ: "img/day-book38.png",
        ΔⲆᐃΔΔᐃⵠ: "img/night-book38.png",
        ΔⵠΔᐃΔⲆᐃ: "img/day-book39.png",
        ⲆⲆΔΔᐃⲆΔ: "img/night-book39.png",
        ⲆⵠⲆΔΔᐃⲆ: "img/day-book40.png",
        ΔⵠᐃᐃⲆⵠⲆ: "img/night-book40.png",
        ΔⲆΔᐃⲆᐃⵠ: "img/day-book41.png",
        ⲆⲆⵠᐃΔΔᐃ: "img/night-book41.png",
        ΔⵠⵠΔᐃᐃⲆ: "img/day-book42.png",
        ⲆⲆⲆᐃΔᐃᐃ: "img/night-book42.png",
        ⲆⲆᐃΔⵠⵠⲆ: "img/day-book43.png",
        ⲆⲆⲆⲆⲆΔⲆ: "img/night-book43.png",
        ΔΔΔΔⵠᐃⲆ: "img/day-book44.png",
        ⲆᐃⲆⲆⲆⵠΔ: "img/night-book44.png",
        ᐃΔⵠⲆΔⵠⲆ: "img/day-book45.png",
        ΔⵠⵠⲆΔⲆᐃ: "img/night-book45.png",
        ᐃⲆⲆⵠᐃᐃΔ: "img/day-book46.png",
        ⵠᐃⲆⵠΔᐃᐃ: "img/night-book46.png",
        ⵠᐃᐃᐃΔᐃᐃ: "img/day-book47.png",
        ΔⵠᐃⲆⵠⵠΔ: "img/night-book47.png",
        ⲆᐃᐃΔᐃⲆⲆ: "img/day-book48.png",
        ᐃⲆⲆᐃⵠⲆᐃ: "img/night-book48.png",
        ΔᐃΔⲆⲆⲆⲆ: "img/day-book49.png",
        ⲆΔⲆᐃⲆⲆⲆ: "img/night-book49.png",
        ⵠⵠΔΔᐃⲆΔ: "img/day-book50.png",
        Δᐃᐃⵠⵠᐃⵠ: "img/night-book50.png",
        ΔⵠΔᐃⵠΔⵠ: "img/day-crate1.png",
        ⲆΔΔⵠᐃΔⲆ: "img/night-crate1.png",
        ⵠΔᐃⲆᐃΔⵠ: "img/day-crate2.png",
        ᐃᐃΔⵠⵠᐃΔ: "img/night-crate2.png",
        ΔⵠⲆᐃⵠⲆΔ: "img/day-crate3.png",
        ᐃΔⲆΔⲆⵠᐃ: "img/night-crate3.png",
        ᐃᐃΔᐃᐃⵠᐃ: "img/day-crate4.png",
        ⵠⵠⲆⲆᐃΔⲆ: "img/night-crate4.png",
        ⵠΔⲆΔᐃᐃᐃ: "img/day-crate5.png",
        ᐃⲆΔⵠᐃⲆⵠ: "img/night-crate5.png",
        ΔⵠᐃᐃⵠΔⲆ: "img/day-crate6.png",
        ⲆΔⵠΔⲆΔᐃ: "img/night-crate6.png",
        ᐃΔΔᐃΔⲆⵠ: "img/day-crate7.png",
        ᐃᐃᐃΔⲆᐃⲆ: "img/night-crate7.png",
        ᐃΔᐃⵠᐃⲆᐃ: "img/day-crate8.png",
        ⲆᐃΔⲆⵠⵠⵠ: "img/night-crate8.png",
        ΔΔΔⲆⲆⵠⵠ: "img/day-crate9.png",
        ΔΔⲆᐃⲆΔⵠ: "img/night-crate9.png",
        ᐃⲆⲆⵠⲆᐃΔ: "img/day-crate10.png",
        ᐃΔᐃΔⵠΔΔ: "img/night-crate10.png",
        ⵠΔⵠⵠΔⵠⲆ: "img/day-crate11.png",
        ⲆΔⲆΔΔⲆᐃ: "img/night-crate11.png",
        ᐃⵠᐃᐃⲆⲆⵠ: "img/day-crate12.png",
        ΔⵠⲆⵠⲆΔΔ: "img/night-crate12.png",
        ΔᐃⵠⵠΔⲆⲆ: "img/day-crate13.png",
        ⵠⲆᐃΔⵠΔⲆ: "img/night-crate13.png",
        ᐃⲆᐃⲆⵠⵠⵠ: "img/day-crate14.png",
        ΔᐃᐃⵠᐃⲆΔ: "img/night-crate14.png",
        ᐃⲆⲆⲆΔⲆⵠ: "img/day-crate15.png",
        ⵠⲆⲆⵠΔⲆΔ: "img/night-crate15.png",
        ΔⲆⲆⲆΔᐃΔ: "img/day-crate16.png",
        Ⲇⵠᐃⵠⵠᐃᐃ: "img/night-crate16.png",
        ΔᐃⵠᐃᐃⵠΔ: "img/day-crate17.png",
        ⵠⵠⵠᐃΔⲆΔ: "img/night-crate17.png",
        ⲆΔᐃⲆⲆⲆᐃ: "img/day-crate18.png",
        ⲆⵠⲆᐃᐃᐃⵠ: "img/night-crate18.png",
        ᐃⵠᐃⵠΔⲆⵠ: "img/day-crate19.png",
        ⲆⲆⲆᐃⵠΔᐃ: "img/night-crate19.png",
        ᐃⵠᐃⲆᐃⵠⵠ: "img/day-crate20.png",
        ᐃᐃᐃⲆΔⲆᐃ: "img/night-crate20.png",
        ΔᐃⲆΔΔΔⵠ: "img/day-crate21.png",
        ΔᐃⵠΔΔⲆⵠ: "img/night-crate21.png",
        ᐃⵠΔⲆⲆᐃΔ: "img/day-crate22.png",
        ⲆᐃⵠⲆⵠⵠⵠ: "img/night-crate22.png",
        ΔⵠⵠΔⲆⵠⲆ: "img/day-crate23.png",
        ⲆΔⵠⵠⲆⵠΔ: "img/night-crate23.png",
        ΔⲆᐃⵠΔΔΔ: "img/day-crate24.png",
        ᐃⵠΔᐃⵠΔⵠ: "img/night-crate24.png",
        ᐃΔᐃΔⲆⵠⵠ: "img/day-crate25.png",
        ⵠⲆⵠΔⲆⵠⵠ: "img/night-crate25.png",
        ΔᐃΔΔᐃⲆᐃ: "img/day-crate26.png",
        ⲆⵠⵠᐃⲆⲆᐃ: "img/night-crate26.png",
        ⵠⲆⵠΔⲆᐃᐃ: "img/day-crate27.png",
        ΔᐃΔⵠΔⵠΔ: "img/night-crate27.png",
        ᐃⲆⲆᐃΔΔⲆ: "img/day-crate28.png",
        ΔⵠⲆᐃⵠⲆⵠ: "img/night-crate28.png",
        ⵠⲆⲆᐃⲆⵠᐃ: "img/day-crate29.png",
        ⵠΔΔᐃⵠΔⲆ: "img/night-crate29.png",
        ΔⵠⵠΔⵠΔⵠ: "img/day-crate30.png",
        ΔⲆⵠΔΔⲆⵠ: "img/night-crate30.png",
        ΔⵠΔⲆΔⵠᐃ: "img/day-crate31.png",
        ⲆᐃΔⵠⲆΔⵠ: "img/night-crate31.png",
        ΔΔⲆⵠΔⲆⵠ: "img/day-crate32.png",
        ⵠᐃⲆᐃᐃΔⵠ: "img/night-crate32.png",
        ΔΔΔⲆⲆⵠᐃ: "img/day-crate33.png",
        ⵠᐃⵠᐃΔⲆᐃ: "img/night-crate33.png",
        ⲆΔᐃᐃⵠⲆᐃ: "img/day-crate34.png",
        ⵠᐃⵠᐃΔᐃⵠ: "img/night-crate34.png",
        ΔⲆⲆᐃⲆⵠᐃ: "img/day-crate35.png",
        ᐃᐃΔⲆⵠⵠᐃ: "img/night-crate35.png",
        ⲆⲆΔⵠᐃⲆⵠ: "img/day-crate36.png",
        ΔΔⵠᐃⵠᐃᐃ: "img/night-crate36.png",
        ᐃΔⲆΔⵠᐃⵠ: "img/day-crate37.png",
        ΔⵠⲆⲆⵠᐃⲆ: "img/night-crate37.png",
        ΔΔⲆᐃⲆⲆⵠ: "img/day-crate38.png",
        ⲆᐃⵠᐃⵠⲆΔ: "img/night-crate38.png",
        ⲆᐃⵠⲆΔΔΔ: "img/day-crate39.png",
        ⵠᐃⵠⵠⲆⲆᐃ: "img/night-crate39.png",
        ΔΔⲆⵠᐃᐃⵠ: "img/day-crate40.png",
        ⵠΔᐃⵠⵠΔⲆ: "img/night-crate40.png",
        ⲆΔⵠᐃᐃⵠⲆ: "img/day-crate41.png",
        ΔΔⲆⵠΔᐃΔ: "img/night-crate41.png",
        ⵠⲆᐃΔⲆⲆⵠ: "img/day-crate42.png",
        ᐃⵠΔⵠΔᐃᐃ: "img/night-crate42.png",
        ᐃΔⲆΔⲆΔᐃ: "img/day-crate43.png",
        ⵠⵠⵠⵠΔΔⵠ: "img/night-crate43.png",
        ᐃⵠΔⲆᐃᐃΔ: "img/day-crate44.png",
        ΔⲆᐃⲆᐃⲆⲆ: "img/night-crate44.png",
        ⲆΔⲆⵠⵠⲆᐃ: "img/day-crate45.png",
        ⵠⵠΔᐃⵠᐃᐃ: "img/night-crate45.png",
        ⲆⲆⵠⲆⵠΔⲆ: "img/day-crate46.png",
        ᐃⵠᐃᐃⵠⵠΔ: "img/night-crate46.png",
        ⵠΔᐃΔΔⵠⵠ: "img/day-crate47.png",
        ᐃᐃΔΔᐃΔⲆ: "img/night-crate47.png",
        ⵠΔΔⵠⲆΔΔ: "img/day-crate48.png",
        ⵠᐃΔⵠΔᐃΔ: "img/night-crate48.png",
        ⲆⵠⵠⲆᐃΔᐃ: "img/day-crate49.png",
        ΔⵠⵠⵠᐃᐃΔ: "img/night-crate49.png",
        ΔⵠⵠᐃⲆᐃⲆ: "img/day-crate50.png",
        ᐃΔᐃᐃⵠᐃᐃ: "img/night-crate50.png",
        ΔᐃⲆⲆⲆⵠⲆ: "img/day-crate51.png",
        ᐃᐃΔⵠⵠⵠⲆ: "img/night-crate51.png",
        ᐃΔⵠᐃΔⲆᐃ: "img/day-crate52.png",
        ⵠΔⲆⲆⵠⵠΔ: "img/night-crate52.png",
        ⵠⲆΔⵠⲆᐃᐃ: "img/day-crate53.png",
        ΔⲆⲆⵠⲆⵠⲆ: "img/night-crate53.png",
        ⵠᐃᐃᐃᐃᐃⲆ: "img/day-crate54.png",
        ᐃⵠⲆᐃΔᐃᐃ: "img/night-crate54.png",
        ⲆⲆⵠⵠⲆΔΔ: "img/day-crate55.png",
        ΔⵠⲆΔⲆᐃᐃ: "img/night-crate55.png",
        ᐃⲆΔᐃⲆᐃΔ: "img/day-crate56.png",
        ΔᐃΔᐃᐃΔⵠ: "img/night-crate56.png",
        ΔΔΔΔᐃΔⵠ: "img/day-crate57.png",
        ᐃⲆᐃⵠᐃᐃᐃ: "img/night-crate57.png",
        ΔⵠΔⵠⵠⵠⲆ: "img/day-crate58.png",
        ⲆⵠⲆΔⵠⲆᐃ: "img/night-crate58.png",
        ⵠⵠΔᐃᐃΔΔ: "img/day-crate59.png",
        ⲆⲆⲆΔᐃⵠΔ: "img/night-crate59.png",
        ⵠⵠΔᐃⵠⵠⵠ: "img/day-crate60.png",
        ⲆⵠΔⵠᐃᐃⵠ: "img/night-crate60.png",
        ⲆⵠⲆᐃᐃᐃᐃ: "img/day-crate61.png",
        ⵠⵠᐃⵠᐃⲆᐃ: "img/night-crate61.png",
        ⵠⲆⵠΔΔⵠΔ: "img/day-crate62.png",
        ⵠΔᐃⲆⲆᐃⲆ: "img/night-crate62.png",
        ⵠΔⵠⲆΔΔⲆ: "img/day-crate63.png",
        ⲆⵠΔⵠᐃΔⵠ: "img/night-crate63.png",
        ΔⵠΔⵠΔⵠᐃ: "img/day-crate64.png",
        ᐃΔᐃᐃΔⵠⲆ: "img/night-crate64.png",
        ᐃⵠⵠⲆᐃⵠΔ: "img/day-crate65.png",
        ᐃⵠΔΔⵠᐃᐃ: "img/night-crate65.png",
        ΔⵠᐃⲆⲆⲆᐃ: "img/day-crate66.png",
        ΔⵠⲆⲆⵠⲆⲆ: "img/night-crate66.png",
        ΔⲆⵠⲆᐃᐃΔ: "img/day-crate67.png",
        ᐃⲆⲆⵠᐃᐃⲆ: "img/night-crate67.png",
        ΔΔⲆⵠⵠᐃⵠ: "img/day-crate68.png",
        ΔᐃΔᐃΔΔⵠ: "img/night-crate68.png",
        ᐃⵠΔᐃⲆⵠⲆ: "img/day-crate69.png",
        ⵠⵠᐃᐃⵠᐃᐃ: "img/night-crate69.png",
        ⲆⵠⵠΔᐃⵠⵠ: "img/day-crate70.png",
        ⲆᐃΔⵠΔᐃⲆ: "img/night-crate70.png",
        ΔⵠⵠᐃᐃᐃⲆ: "img/day-crate71.png",
        ΔⲆⵠᐃⵠᐃΔ: "img/night-crate71.png",
        ᐃⵠᐃΔⵠⲆᐃ: "img/day-crate72.png",
        ⵠⲆⲆΔⵠⵠᐃ: "img/night-crate72.png",
        ᐃᐃᐃⵠΔⲆᐃ: "img/day-crate73.png",
        ΔᐃⲆΔΔⵠⵠ: "img/night-crate73.png",
        ⵠᐃⵠⲆΔⲆΔ: "img/day-crate74.png",
        ⵠΔΔᐃⵠᐃⵠ: "img/night-crate74.png",
        ⲆΔΔⵠⲆᐃᐃ: "img/day-crate75.png",
        ΔΔⲆᐃᐃⵠⵠ: "img/night-crate75.png",
        ⵠΔⵠⵠΔᐃⲆ: "img/day-crate76.png",
        ᐃᐃⲆⲆᐃⵠᐃ: "img/night-crate76.png",
        ΔⵠᐃᐃⲆΔᐃ: "img/day-crate77.png",
        ⵠⵠⲆⲆΔⵠⵠ: "img/night-crate77.png",
        ⵠΔΔⵠⵠⲆⲆ: "img/day-crate78.png",
        ΔΔᐃⲆΔᐃΔ: "img/night-crate78.png",
        ᐃⵠⲆᐃⲆᐃⵠ: "img/day-crate79.png",
        ⲆΔⲆᐃᐃᐃᐃ: "img/night-crate79.png",
        ⲆᐃΔΔΔΔⵠ: "img/day-herb0.png",
        ΔΔⲆΔΔᐃΔ: "img/day-herb1.png",
        ΔᐃⵠⲆΔᐃᐃ: "img/day-herb2.png",
        ⲆᐃΔᐃΔⲆⲆ: "img/day-herb3.png",
        ⲆⲆⵠⵠᐃᐃᐃ: "img/day-herb4.png",
        ⵠⵠΔᐃΔⲆᐃ: "img/day-herb5.png",
        ⲆΔᐃΔΔΔⵠ: "img/day-herb6.png",
        ⲆⵠⵠⲆΔⲆᐃ: "img/day-herb7.png",
        ⵠⵠᐃⵠᐃⵠᐃ: "img/day-herb8.png",
        ⲆⲆΔΔΔⵠⲆ: "img/day-herb9.png",
        ΔⵠΔⵠⵠⵠⵠ: "img/day-herb10.png",
        ΔΔᐃⲆᐃΔᐃ: "img/day-herb11.png",
        ⵠⲆⵠΔⲆᐃΔ: "img/day-herb12.png",
        ⵠⲆᐃΔⲆᐃᐃ: "img/day-herb13.png",
        ⲆⵠᐃΔⵠⲆᐃ: "img/day-herb14.png",
        ⲆⲆⲆΔⲆⲆᐃ: "img/day-herb15.png",
        ΔᐃᐃⵠⲆⵠⲆ: "img/day-shell0.png",
        ΔᐃⵠᐃⵠᐃΔ: "img/day-shell1.png",
        ᐃⲆΔⲆΔⲆᐃ: "img/day-shell2.png",
        ⵠⵠᐃⲆⵠⵠⵠ: "img/day-leaf1.png",
        ⵠⲆⵠⲆᐃⲆⲆ: "img/day-leaf2.png",
        ΔΔᐃⵠⲆⵠⵠ: "img/day-leaf3.png",
        ᐃⵠΔΔⲆⵠΔ: "img/day-leaf4.png",
        ΔⲆᐃⲆΔᐃΔ: "img/day-leaf5.png",
        ᐃᐃᐃᐃᐃΔᐃ: "img/day-leaf6.png",
        ⵠⵠΔᐃᐃⵠⵠ: "img/day-leaf7.png",
        ⵠΔⵠΔⵠᐃΔ: "img/day-leaf8.png",
        ᐃᐃᐃᐃⵠⲆΔ: "img/day-rock0.png",
        ΔᐃᐃΔΔᐃⵠ: "img/day-rock1.png",
        ΔⲆⲆⲆᐃΔⲆ: "img/day-rock2.png",
        ⲆΔΔᐃⵠⵠᐃ: "img/day-rock3.png",
        ⲆⲆⲆⵠᐃᐃΔ: "img/day-rock4.png",
        ᐃᐃᐃΔᐃⵠΔ: "img/day-rock5.png",
        ΔΔΔᐃᐃᐃΔ: "img/day-rock6.png",
        ⵠⲆΔⲆⵠΔⲆ: "img/day-rock7.png",
        ⵠΔᐃΔⵠⵠⲆ: "img/day-rock8.png",
        ⲆΔⵠⵠΔⵠⲆ: "img/day-rock9.png",
        ᐃΔⲆⲆᐃΔᐃ: "img/day-rock10.png",
        ᐃΔⵠᐃᐃΔΔ: "img/day-rock11.png",
        ⲆⵠⲆⵠⵠΔᐃ: "img/day-rock12.png",
        ⲆⵠⲆⵠᐃᐃⵠ: "img/day-rock13.png",
        ⵠⵠᐃᐃⲆⲆΔ: "img/day-flower1.png",
        ⵠᐃⲆⲆΔⵠⲆ: "img/day-flower2.png",
        ΔⵠᐃᐃⵠⲆⲆ: "img/day-flower3.png",
        ⲆⵠⵠΔᐃⲆⵠ: "img/day-flower4.png",
        ΔⲆⵠⵠᐃΔΔ: "img/day-flower5.png",
        ⲆⲆⲆΔⲆⵠΔ: "img/day-flower6.png",
        ᐃΔⵠⵠⲆΔΔ: "img/day-flower7.png",
        ΔΔⲆⲆΔΔⲆ: "img/day-flower8.png",
        ᐃⵠΔᐃΔᐃΔ: "img/day-flower9.png",
        ⲆΔⲆΔΔΔⲆ: "img/day-herb16.png",
        ⵠᐃΔⵠⵠⵠᐃ: "img/day-herb17.png",
        ΔΔⲆΔⲆΔΔ: "img/day-herb18.png",
        ⲆΔⵠΔⲆᐃΔ: "img/day-herb19.png",
        ᐃⵠΔⵠⲆΔⲆ: "img/day-herb20.png",
        ⲆⲆⲆΔᐃⲆⲆ: "img/day-herb21.png",
        ΔⲆΔᐃᐃᐃⵠ: "img/night-herb0.png",
        ᐃⵠⲆⵠΔᐃⵠ: "img/night-herb1.png",
        ⲆᐃᐃᐃΔⵠΔ: "img/night-herb2.png",
        ΔᐃᐃⲆᐃⵠⵠ: "img/night-herb3.png",
        ⵠΔΔⵠᐃᐃⵠ: "img/night-herb4.png",
        ⵠᐃⲆΔΔΔᐃ: "img/night-herb5.png",
        ᐃΔⲆΔᐃⵠΔ: "img/night-herb6.png",
        ᐃⵠΔΔΔⵠΔ: "img/night-herb7.png",
        ⲆΔᐃΔⲆⵠⲆ: "img/night-herb8.png",
        ⲆᐃΔⵠⲆᐃⵠ: "img/night-herb9.png",
        ⲆⲆΔΔΔⲆⵠ: "img/night-herb10.png",
        ΔⵠᐃⵠⲆᐃⵠ: "img/night-herb11.png",
        ⵠⲆⲆⲆᐃᐃᐃ: "img/night-herb12.png",
        ΔⲆᐃⵠᐃΔᐃ: "img/night-herb13.png",
        ⵠᐃⵠⵠⲆᐃⲆ: "img/night-herb14.png",
        ⲆΔⵠᐃᐃᐃⵠ: "img/night-herb15.png",
        ᐃⵠᐃⵠⵠᐃᐃ: "img/night-shell0.png",
        ΔᐃⵠΔᐃᐃΔ: "img/night-shell1.png",
        ΔΔⵠΔᐃⵠⲆ: "img/night-shell2.png",
        ΔⵠⲆᐃΔᐃΔ: "img/night-leaf1.png",
        ⲆⵠᐃⵠΔΔⲆ: "img/night-leaf2.png",
        ᐃᐃⲆᐃⵠᐃᐃ: "img/night-leaf3.png",
        ᐃⲆⵠΔⵠᐃⲆ: "img/night-leaf4.png",
        ᐃᐃᐃⲆΔᐃᐃ: "img/night-leaf5.png",
        ⵠⲆᐃΔⵠⵠΔ: "img/night-leaf6.png",
        ᐃⲆᐃᐃⲆⵠΔ: "img/night-leaf7.png",
        ⲆⲆⵠⵠᐃⵠΔ: "img/night-leaf8.png",
        ⵠⲆⵠΔᐃⲆⵠ: "img/night-rock0.png",
        ⲆⵠⲆΔᐃⲆᐃ: "img/night-rock1.png",
        ᐃⲆᐃⵠᐃᐃΔ: "img/night-rock2.png",
        ⲆⵠⵠΔⵠᐃⲆ: "img/night-rock3.png",
        ᐃΔⵠΔⲆᐃΔ: "img/night-rock4.png",
        ᐃⲆᐃⵠⲆⵠΔ: "img/night-rock5.png",
        ⵠⵠⵠᐃⵠⵠⵠ: "img/night-rock6.png",
        ᐃΔⵠⵠᐃⵠΔ: "img/night-rock7.png",
        ⵠΔΔᐃⲆΔΔ: "img/night-rock8.png",
        ΔⲆΔΔⵠᐃⲆ: "img/night-rock9.png",
        ᐃᐃⵠⵠᐃᐃᐃ: "img/night-rock10.png",
        ΔⵠΔⵠⲆⲆⵠ: "img/night-rock11.png",
        ⲆΔᐃΔΔᐃᐃ: "img/night-rock12.png",
        ⵠⲆᐃⲆᐃᐃᐃ: "img/night-rock13.png",
        ⵠΔᐃⲆᐃᐃⵠ: "img/night-flower1.png",
        ΔΔᐃΔⲆΔᐃ: "img/night-flower2.png",
        ΔⵠⲆᐃᐃᐃⲆ: "img/night-flower3.png",
        ΔᐃᐃⵠᐃⲆⲆ: "img/night-flower4.png",
        ΔⲆᐃⲆᐃⵠᐃ: "img/night-flower5.png",
        ⵠΔᐃΔᐃⵠᐃ: "img/night-flower6.png",
        ⲆΔⵠΔΔⲆⵠ: "img/night-flower7.png",
        ΔⲆⲆᐃⵠⲆⵠ: "img/night-flower8.png",
        ⵠⵠᐃⵠⲆΔⵠ: "img/night-flower9.png",
        ⲆΔⵠΔⵠΔⵠ: "img/night-herb16.png",
        ⲆⲆⲆⵠⲆⲆⵠ: "img/night-herb17.png",
        ⲆⵠⲆⲆΔⵠⲆ: "img/night-herb18.png",
        ΔᐃᐃΔΔⵠΔ: "img/night-herb19.png",
        ᐃⲆᐃΔΔⵠᐃ: "img/night-herb20.png",
        ⲆⵠᐃΔᐃᐃⵠ: "img/night-herb21.png",
        ΔΔΔΔⲆᐃΔ: "img/day-river000-010-000.png",
        ᐃᐃⵠᐃᐃⲆⲆ: "img/day-river000-010-010.png",
        ⲆΔⵠⵠᐃⲆⵠ: "img/day-river000-011-000.png",
        ΔⵠⲆⵠⲆᐃⵠ: "img/day-river000-011-010.png",
        ᐃΔᐃᐃⲆⵠΔ: "img/day-river000-011-011.png",
        ⲆⲆΔᐃⲆΔΔ: "img/day-river000-110-000.png",
        ᐃⵠᐃⲆⲆⲆᐃ: "img/day-river000-110-010.png",
        ΔΔⵠⵠᐃᐃⲆ: "img/day-river000-110-110.png",
        ⵠᐃΔΔᐃΔᐃ: "img/day-river000-111-000.png",
        ΔΔΔᐃⲆᐃⵠ: "img/day-river000-111-010.png",
        ΔΔⵠᐃⵠⵠⲆ: "img/day-river000-111-011.png",
        ⲆΔⵠΔⲆᐃⲆ: "img/day-river000-111-110.png",
        ΔⵠⵠΔⵠⲆᐃ: "img/day-river000-111-111.png",
        ΔⵠΔⵠⲆⲆᐃ: "img/day-river010-010-000.png",
        ΔΔⵠΔⲆΔΔ: "img/day-river010-010-010.png",
        ⲆⲆᐃⲆᐃⲆⵠ: "img/day-river010-011-000.png",
        ΔⵠⲆⵠᐃΔΔ: "img/day-river010-011-010.png",
        ⵠΔΔⵠΔᐃᐃ: "img/day-river010-011-011.png",
        ⲆΔⲆᐃⵠⵠΔ: "img/day-river010-110-000.png",
        ᐃⲆⵠⲆⲆΔⲆ: "img/day-river010-110-010.png",
        ᐃᐃᐃΔⵠⲆⵠ: "img/day-river010-110-110.png",
        ⲆⵠⵠΔΔⵠⵠ: "img/day-river010-111-000.png",
        ⵠΔⲆⵠⵠⲆⵠ: "img/day-river010-111-010.png",
        ⵠⵠⵠΔⵠΔⲆ: "img/day-river010-111-011.png",
        ᐃⲆⲆΔⲆⲆΔ: "img/day-river010-111-110.png",
        ᐃΔΔⲆⵠⲆⲆ: "img/day-river010-111-111.png",
        ΔᐃⲆⵠΔⲆΔ: "img/day-river011-011-000.png",
        ⲆΔΔᐃⲆΔΔ: "img/day-river011-011-010.png",
        ⲆⵠⲆⵠⲆΔΔ: "img/day-river011-011-011.png",
        ᐃᐃⲆⵠΔᐃΔ: "img/day-river011-111-000.png",
        ᐃΔᐃΔⲆᐃᐃ: "img/day-river011-111-010.png",
        ᐃΔΔⲆⲆⵠᐃ: "img/day-river011-111-011.png",
        ⵠΔⵠᐃΔΔᐃ: "img/day-river011-111-110.png",
        ⲆᐃᐃᐃΔⵠⲆ: "img/day-river011-111-111.png",
        ⲆⵠⵠΔᐃⵠᐃ: "img/day-river110-110-000.png",
        ⵠⲆⵠᐃⵠᐃᐃΔᐃ: "img/day-river110-110-010.png",
        ΔⲆΔⵠⲆᐃⵠⵠΔ: "img/day-river110-110-110.png",
        ⵠⲆᐃᐃⵠΔᐃΔᐃ: "img/day-river110-111-000.png",
        ᐃⵠⲆⲆᐃⵠΔⲆΔ: "img/day-river110-111-010.png",
        ⵠᐃⲆⲆᐃⲆⲆΔΔ: "img/day-river110-111-011.png",
        ᐃⵠΔᐃᐃᐃΔΔⲆ: "img/day-river110-111-110.png",
        ΔⲆΔⲆⲆⵠΔⵠΔ: "img/day-river110-111-111.png",
        ᐃᐃᐃᐃⵠⵠᐃ: "img/day-river111-111-011.png",
        ⲆᐃΔⲆΔᐃⵠᐃᐃ: "img/day-river111-111-110.png",
        ᐃᐃᐃᐃⵠⵠᐃ: "img/day-river111-111-011.png",
        ᐃᐃΔΔᐃⲆᐃⵠⵠ: "img/day-river111-111-000.png",
        ΔⲆⵠⲆΔⵠⵠᐃΔ: "img/day-river111-111-111.png",
        ᐃⵠⲆᐃⲆⵠΔⵠᐃ: "img/day-river111-111-010.png",
        ΔΔΔⵠΔⵠΔΔΔ: "img/night-river000-010-000.png",
        ᐃΔᐃⵠᐃⲆᐃⲆⲆ: "img/night-river000-010-010.png",
        ⲆⵠⵠⵠⲆᐃΔᐃⲆ: "img/night-river000-011-000.png",
        ΔⲆΔⵠⲆⵠᐃⵠⲆ: "img/night-river000-011-010.png",
        ⲆⲆⵠᐃᐃⲆⵠⲆⲆ: "img/night-river000-011-011.png",
        ΔᐃⲆⲆΔᐃᐃⲆΔ: "img/night-river000-110-000.png",
        ΔⲆᐃΔᐃΔΔⲆⲆ: "img/night-river000-110-010.png",
        ΔᐃΔΔⲆΔⲆⲆᐃ: "img/night-river000-110-110.png",
        ΔᐃⵠΔΔᐃΔⵠΔ: "img/night-river000-111-000.png",
        ⵠⵠⲆΔΔⲆⵠⲆⲆ: "img/night-river000-111-010.png",
        ⵠⵠΔΔΔⲆᐃⲆᐃ: "img/night-river000-111-011.png",
        ⵠⲆΔΔΔⵠΔΔⲆ: "img/night-river000-111-110.png",
        ᐃᐃⵠⵠΔⵠΔᐃⲆ: "img/night-river000-111-111.png",
        ⵠⲆⲆⵠⵠᐃΔΔⵠ: "img/night-river010-010-000.png",
        ⵠΔⵠⲆⲆⲆⲆΔᐃ: "img/night-river010-010-010.png",
        ᐃⵠΔⵠⲆⵠᐃⵠᐃ: "img/night-river010-011-000.png",
        ΔⵠᐃⲆΔⲆᐃⲆΔ: "img/night-river010-011-010.png",
        ᐃᐃⵠΔⲆΔⵠΔΔ: "img/night-river010-011-011.png",
        ⲆⲆΔΔⵠΔⵠⵠⲆ: "img/night-river010-110-000.png",
        ⲆΔⲆⵠᐃΔᐃⵠΔ: "img/night-river010-110-010.png",
        ΔⲆⵠⲆΔⵠᐃᐃⲆ: "img/night-river010-110-110.png",
        ⲆΔᐃⲆⲆΔⵠⵠΔ: "img/night-river010-111-000.png",
        ⵠᐃⲆᐃⵠⲆⲆⲆΔ: "img/night-river010-111-010.png",
        ᐃⵠᐃⲆᐃⵠΔⲆⲆ: "img/night-river010-111-011.png",
        ΔᐃΔΔΔⵠⲆⲆⲆ: "img/night-river010-111-110.png",
        ΔᐃⵠⵠΔᐃⵠⲆⲆ: "img/night-river010-111-111.png",
        ⲆⲆᐃᐃᐃⲆⵠᐃᐃ: "img/night-river011-011-000.png",
        ⵠΔᐃᐃΔΔⲆΔᐃ: "img/night-river011-011-010.png",
        ΔⲆⲆⲆⲆΔΔΔⵠ: "img/night-river011-011-011.png",
        ⵠⵠⵠⲆᐃᐃⲆⵠⲆ: "img/night-river011-111-000.png",
        ΔⵠⲆⵠᐃΔⵠᐃᐃ: "img/night-river011-111-010.png",
        ᐃⵠΔⲆΔᐃᐃᐃΔ: "img/night-river011-111-011.png",
        ΔⲆⲆⲆⲆⲆΔⵠᐃ: "img/night-river011-111-110.png",
        ⵠⲆⲆⵠΔⵠⲆⲆᐃ: "img/night-river011-111-111.png",
        ᐃⲆⲆΔΔΔΔΔⵠ: "img/night-river110-110-000.png",
        ΔⲆΔΔΔⵠⲆⲆᐃ: "img/night-river110-110-010.png",
        ΔⵠⵠᐃΔⵠⵠⲆⲆ: "img/night-river110-110-110.png",
        ⵠⵠⵠΔⵠⲆᐃᐃΔ: "img/night-river110-111-000.png",
        ᐃⵠⵠᐃΔⵠΔᐃⲆ: "img/night-river110-111-010.png",
        ⵠⵠΔⵠΔⲆᐃΔⵠ: "img/night-river110-111-011.png",
        ⵠᐃⲆⲆⵠΔⵠᐃᐃ: "img/night-river110-111-110.png",
        ⵠⲆⵠᐃⵠⵠᐃⲆΔ: "img/night-river110-111-111.png",
        ⲆⲆᐃⲆⲆΔⲆ: "img/night-river111-111-011.png",
        ᐃΔᐃⵠΔⵠⲆᐃⵠ: "img/night-river111-111-110.png",
        ⲆⲆᐃⲆⲆΔⲆ: "img/night-river111-111-011.png",
        ⲆΔⲆᐃⵠᐃⲆᐃⵠ: "img/night-river111-111-000.png",
        ᐃⵠΔΔΔᐃⲆⲆⵠ: "img/night-river111-111-111.png",
        ΔΔΔΔⵠᐃⲆΔⵠ: "img/night-river111-111-010.png",
        ⵠⵠΔⲆⲆΔⵠ: "img/day-pebblecompo1.png",
        ᐃⲆΔⵠⵠ: "img/day-pebblecompo2.png",
        ⲆⲆΔᐃΔ: "img/day-pebblecompo3.png",
        ⵠⵠᐃⵠⵠⲆⵠ: "img/day-pebblecompo4.png",
        ΔⵠᐃⲆⵠ: "img/day-pebblecompo5.png",
        ⵠⲆΔⲆᐃ: "img/day-pebblecompo6.png",
        ⲆⲆⲆⲆⵠ: "img/day-pebblecompo7.png",
        ᐃΔΔΔᐃⲆⵠΔᐃ: "img/day-pebblecompo8.png",
        ⵠⵠⵠΔΔΔⲆ: "img/day-pebblecompo9.png",
        ΔⵠΔᐃΔᐃΔ: "img/day-pebblecompo10.png",
        ΔΔΔⵠⵠ: "img/day-pebblecompo11.png",
        ⲆⵠⲆⲆⲆⵠᐃ: "img/day-pebblecompo12.png",
        ⲆᐃⲆᐃΔΔΔ: "img/day-pebblecompo13.png",
        ⲆΔΔⲆᐃⲆⵠ: "img/day-pebblecompo14.png",
        ⵠⵠⵠⲆΔⲆΔ: "img/day-pebblecompo15.png",
        ΔⲆΔΔⵠΔᐃ: "img/day-pebblecompo16.png",
        ⵠᐃΔΔᐃ: "img/day-pebblecompo17.png",
        ΔᐃⲆΔΔᐃⲆ: "img/day-pebblecompo18.png",
        ⵠⲆΔⲆᐃⵠⵠ: "img/day-pebblecompo19.png",
        ⲆⲆⲆⵠΔ: "img/day-pebblecompo20.png",
        ᐃΔⲆΔᐃ: "img/day-pebblecompo21.png",
        ΔΔᐃᐃᐃⵠⵠ: "img/day-pebblecompo22.png",
        ΔⵠⵠΔΔᐃⲆ: "img/day-pebblecompo23.png",
        ᐃⲆⲆᐃⵠΔΔ: "img/day-pebblecompo24.png",
        ΔⵠⲆⲆᐃ: "img/day-pebblecompo25.png",
        ΔⲆΔⲆΔ: "img/day-pebblecompo26.png",
        ΔⵠᐃⲆᐃΔᐃ: "img/day-pebblecompo27.png",
        ΔⵠΔΔⲆ: "img/day-pebblecompo28.png",
        ⲆᐃⵠⵠΔⲆⵠ: "img/night-pebblecompo1.png",
        ⲆⲆⵠⲆᐃ: "img/night-pebblecompo2.png",
        ⲆⵠⵠᐃΔ: "img/night-pebblecompo3.png",
        ΔᐃᐃΔⲆⵠⵠ: "img/night-pebblecompo4.png",
        ᐃᐃΔⲆⵠ: "img/night-pebblecompo5.png",
        ΔⲆΔⵠΔ: "img/night-pebblecompo6.png",
        ⲆᐃⵠᐃⲆ: "img/night-pebblecompo7.png",
        ⲆΔᐃΔⵠᐃΔΔᐃ: "img/night-pebblecompo8.png",
        ΔⵠⵠⲆⵠⵠΔ: "img/night-pebblecompo9.png",
        ⲆᐃⲆᐃᐃΔⵠ: "img/night-pebblecompo10.png",
        ⵠᐃⵠⲆⵠ: "img/night-pebblecompo11.png",
        ΔⲆⵠΔⵠⲆⵠ: "img/night-pebblecompo12.png",
        ΔⵠⲆΔⵠΔⲆ: "img/night-pebblecompo13.png",
        ᐃᐃⲆΔᐃⵠⲆ: "img/night-pebblecompo14.png",
        ⲆΔΔΔᐃⲆⵠ: "img/night-pebblecompo15.png",
        ᐃⵠⵠⲆᐃᐃΔ: "img/night-pebblecompo16.png",
        ᐃⲆᐃᐃⵠ: "img/night-pebblecompo17.png",
        ΔᐃᐃΔΔⲆΔ: "img/night-pebblecompo18.png",
        ΔⲆᐃΔⵠᐃΔ: "img/night-pebblecompo19.png",
        ⵠⵠᐃⵠᐃ: "img/night-pebblecompo20.png",
        ᐃΔᐃⵠⲆ: "img/night-pebblecompo21.png",
        ᐃᐃⵠᐃⲆⲆⵠ: "img/night-pebblecompo22.png",
        ⲆⲆΔⲆᐃⵠᐃ: "img/night-pebblecompo23.png",
        ⲆⵠΔᐃⵠⵠᐃ: "img/night-pebblecompo24.png",
        Ⲇⵠᐃᐃᐃ: "img/night-pebblecompo25.png",
        ⲆⲆⲆΔΔ: "img/night-pebblecompo26.png",
        ⲆΔⵠⲆΔⲆⵠ: "img/night-pebblecompo27.png",
        ᐃᐃΔΔⵠ: "img/night-pebblecompo28.png",
        ⲆᐃⲆⲆⲆᐃⵠⵠⵠ: "img/day-baby-mammoth.png",
        ΔⲆⲆᐃⲆΔⵠΔΔ: "img/day-baby-mammoth-tamed.png",
        ᐃᐃⵠⵠⲆⵠΔΔᐃ: "img/day-baby-mammoth-angry.png",
        ΔΔⲆᐃᐃⲆⵠⵠᐃ: "img/night-baby-mammoth.png",
        ⲆⲆᐃⲆᐃᐃΔᐃⵠ: "img/night-baby-mammoth-tamed.png",
        ᐃΔΔⲆⲆΔΔΔⵠ: "img/night-baby-mammoth-angry.png",
        ΔⵠⵠⲆⲆⲆⵠᐃᐃ: "img/inv-mammoth-out.png",
        ⲆᐃⵠⲆᐃⲆᐃᐃⵠ: "img/inv-mammoth-in.png",
        ᐃⵠⲆΔⲆΔⲆⲆⲆ: "img/inv-mammoth-click.png",
        ⵠΔΔⵠᐃΔⵠ: "img/hurt-baby-mammoth.png",
        ⵠΔⲆⲆⵠⲆΔ: "img/baby-mammoth-step.png",
        ΔᐃⲆⵠᐃᐃᐃᐃᐃ: "img/day-flower-hat.png",
        ᐃᐃΔΔⵠⲆᐃⲆΔ: "img/night-flower-hat.png",
        ⵠᐃⲆⲆΔⲆΔⲆᐃ: "img/inv-flower-hat-out.png",
        ⲆⲆᐃΔⵠⲆⵠⵠΔ: "img/inv-flower-hat-in.png",
        ᐃᐃⵠᐃⵠΔᐃᐃⵠ: "img/inv-flower-hat-click.png",
        ᐃᐃᐃᐃⵠⲆΔⲆᐃ: "img/day-fur-hat.png",
        ⲆⵠⵠΔΔᐃᐃΔΔ: "img/night-fur-hat.png",
        ⵠΔᐃⵠΔⵠⵠⵠΔ: "img/inv-fur-hat-out.png",
        ⲆⵠⵠᐃⲆⲆᐃⵠⲆ: "img/inv-fur-hat-in.png",
        ⵠⲆᐃΔⵠᐃⲆΔⵠ: "img/inv-fur-hat-click.png",
        ᐃⵠⲆⵠΔᐃⲆΔΔ: "img/day-mammoth.png",
        ΔⲆⲆⵠⵠᐃΔⵠᐃ: "img/night-mammoth.png",
        ᐃⵠⵠᐃΔⲆΔ: "img/hurt-mammoth.png",
        ⵠΔᐃⵠⲆⵠΔᐃΔ: "img/inv-mammoth-fur-out.png",
        ΔΔⵠᐃΔΔⵠΔⵠ: "img/inv-mammoth-fur-in.png",
        ⵠᐃᐃΔⲆⵠⵠᐃΔ: "img/inv-mammoth-fur-click.png",
        ᐃᐃⵠⵠΔⵠΔⵠᐃ: "img/inv-wood-bow-out.png",
        ᐃⲆⵠᐃΔⵠΔΔⲆ: "img/inv-wood-bow-in.png",
        ᐃΔⲆⲆⲆⵠⲆᐃⵠ: "img/inv-wood-bow-click.png",
        ΔⵠΔΔᐃᐃΔⲆⲆ: "img/inv-wood-arrow-out.png",
        ΔᐃᐃⵠⵠΔΔΔⵠ: "img/inv-wood-arrow-in.png",
        ᐃᐃⵠᐃⵠᐃᐃΔⲆ: "img/inv-wood-arrow-click.png",
        ⲆᐃΔᐃΔᐃᐃⲆⵠ: "img/day-wood-bow2.png",
        ΔΔΔΔⵠᐃⲆΔΔ: "img/night-wood-bow2.png",
        ⲆⲆᐃⲆΔⲆⵠ: "img/day-wood-arrow.png",
        ᐃΔⵠⲆⵠᐃⵠ: "img/night-wood-arrow.png",
        ⲆᐃⲆΔⵠⵠΔⵠᐃ: "img/inv-stone-bow-out.png",
        ⵠᐃⵠⵠⲆᐃⲆⲆⲆ: "img/inv-stone-bow-in.png",
        ⵠⵠⲆⲆᐃⲆᐃΔΔ: "img/inv-stone-bow-click.png",
        ⵠᐃⲆⵠΔⲆΔΔⵠ: "img/inv-stone-arrow-out.png",
        ⲆⵠΔᐃᐃⲆⲆᐃΔ: "img/inv-stone-arrow-in.png",
        ⲆΔⲆᐃⲆⵠⵠΔⵠ: "img/inv-stone-arrow-click.png",
        ⲆⵠⲆⲆᐃᐃΔΔⵠ: "img/day-stone-bow.png",
        ΔⵠⲆᐃⵠⵠΔΔᐃ: "img/night-stone-bow.png",
        ⵠᐃᐃΔᐃᐃⵠ: "img/day-stone-arrow.png",
        ⵠᐃᐃⲆᐃⲆᐃ: "img/night-stone-arrow.png",
        ⵠΔⲆⵠⲆⵠᐃᐃⲆ: "img/inv-gold-bow-out.png",
        ΔᐃΔΔᐃⲆⵠΔΔ: "img/inv-gold-bow-in.png",
        ⵠⵠᐃⵠⵠᐃᐃⵠΔ: "img/inv-gold-bow-click.png",
        ⲆⵠⵠⵠⲆᐃⵠⵠΔ: "img/inv-gold-arrow-out.png",
        ᐃⲆⵠⵠⲆᐃⲆⵠΔ: "img/inv-gold-arrow-in.png",
        ⵠⲆΔⵠⵠⲆⵠΔᐃ: "img/inv-gold-arrow-click.png",
        ᐃⵠᐃⲆᐃⲆⵠΔⵠ: "img/day-gold-bow.png",
        ⲆᐃⲆⵠΔΔΔΔᐃ: "img/night-gold-bow.png",
        ᐃⵠΔΔᐃᐃⵠ: "img/day-gold-arrow.png",
        ΔΔΔⵠⵠⵠⵠ: "img/night-gold-arrow.png",
        ᐃᐃΔⵠⵠᐃᐃⵠᐃ: "img/inv-diamond-bow-out.png",
        ᐃⵠΔⵠⲆᐃⵠⲆᐃ: "img/inv-diamond-bow-in.png",
        ⲆᐃᐃⵠⲆΔᐃᐃⲆ: "img/inv-diamond-bow-click.png",
        ΔⵠΔᐃⲆᐃⲆⵠⲆ: "img/inv-diamond-arrow-out.png",
        ᐃᐃΔᐃΔΔΔᐃⵠ: "img/inv-diamond-arrow-in.png",
        ᐃⲆΔΔᐃᐃⲆᐃᐃ: "img/inv-diamond-arrow-click.png",
        ᐃΔⲆΔⵠⲆᐃΔΔ: "img/day-diamond-bow.png",
        ⵠⲆΔⲆΔⵠᐃΔⵠ: "img/night-diamond-bow.png",
        ⲆⵠᐃΔⵠⲆⲆ: "img/day-diamond-arrow.png",
        ⵠΔⲆⲆΔᐃⵠ: "img/night-diamond-arrow.png",
        ΔⲆΔᐃⵠΔⵠΔᐃ: "img/inv-amethyst-bow-out.png",
        ΔᐃⵠⲆΔΔᐃΔΔ: "img/inv-amethyst-bow-in.png",
        ⲆⵠᐃᐃⲆᐃⵠΔⵠ: "img/inv-amethyst-bow-click.png",
        ⵠⵠⲆΔⲆᐃⵠΔⵠ: "img/inv-amethyst-arrow-out.png",
        ⲆΔΔΔⵠⵠᐃⲆⲆ: "img/inv-amethyst-arrow-in.png",
        ΔᐃΔᐃⵠⵠᐃⵠⲆ: "img/inv-amethyst-arrow-click.png",
        ΔⵠΔⵠⵠⲆΔⲆΔ: "img/day-amethyst-bow.png",
        ᐃⲆⲆΔⵠⵠⵠⲆⲆ: "img/night-amethyst-bow.png",
        ⲆΔⵠΔΔΔΔ: "img/day-amethyst-arrow.png",
        ΔⵠⲆⵠⲆⲆⲆ: "img/night-amethyst-arrow.png",
        ⵠᐃᐃΔⵠᐃΔⵠⵠ: "img/inv-dragon-bow-out.png",
        ΔⲆⵠⲆⲆⵠⵠⵠⲆ: "img/inv-dragon-bow-in.png",
        ⵠⲆΔΔⲆⲆᐃⲆⲆ: "img/inv-dragon-bow-click.png",
        ᐃΔⲆΔⵠⲆᐃΔⲆ: "img/inv-dragon-arrow-out.png",
        ⲆΔᐃⵠᐃΔⵠⵠⲆ: "img/inv-dragon-arrow-in.png",
        ΔⲆⲆⵠⵠᐃᐃᐃᐃ: "img/inv-dragon-arrow-click.png",
        ΔⲆⵠΔⲆⵠⲆᐃᐃ: "img/day-dragon-bow.png",
        ᐃⵠⲆᐃᐃᐃΔΔⲆ: "img/night-dragon-bow.png",
        ⵠΔΔΔΔⲆⲆ: "img/day-dragon-arrow.png",
        ΔⵠᐃᐃⲆⵠΔ: "img/night-dragon-arrow.png",
        ᐃⵠΔᐃⲆΔΔⵠΔ: "img/inv-reidite-bow-out.png",
        ⲆΔΔΔⲆⵠΔⲆⵠ: "img/inv-reidite-bow-in.png",
        ⵠᐃᐃⵠⲆΔᐃⲆΔ: "img/inv-reidite-bow-click.png",
        ᐃⵠⲆΔᐃⵠⲆⵠΔ: "img/inv-reidite-arrow-out.png",
        ᐃⲆΔᐃⲆΔⲆΔᐃ: "img/inv-reidite-arrow-in.png",
        ΔⵠᐃⵠⲆⲆⵠᐃⵠ: "img/inv-reidite-arrow-click.png",
        ⵠⲆᐃΔΔⲆΔᐃΔ: "img/day-reidite-bow.png",
        ᐃⵠⵠᐃΔᐃᐃⲆⵠ: "img/night-reidite-bow.png",
        ᐃⵠΔⲆᐃᐃⲆ: "img/day-reidite-arrow.png",
        ᐃᐃⵠᐃⲆⵠΔⵠΔ: "img/night-reidite-arrow.png",
        ΔⵠᐃΔᐃᐃⲆⵠⲆ: "img/inv-wooden-axe-out.png",
        ΔᐃᐃⵠⵠⵠⵠᐃΔ: "img/inv-wooden-axe-in.png",
        ΔⵠⲆᐃⵠⲆⲆⲆⲆ: "img/inv-wooden-axe-click.png",
        ᐃᐃΔⲆᐃᐃΔⵠⲆ: "img/day-wooden-axe.png",
        ⲆⲆᐃⵠⲆᐃᐃⵠⵠ: "img/night-wooden-axe.png",
        ᐃΔⵠΔⲆΔΔᐃⲆ: "img/inv-stone-axe-out.png",
        ᐃᐃᐃᐃᐃⵠⵠⵠΔ: "img/inv-stone-axe-in.png",
        ΔⵠΔᐃⵠⲆΔᐃⵠ: "img/inv-stone-axe-click.png",
        ⲆᐃΔᐃΔⵠᐃⲆΔ: "img/day-stone-axe.png",
        ᐃⲆⲆᐃⲆᐃΔⵠᐃ: "img/night-stone-axe.png",
        ⲆᐃᐃΔᐃⲆⲆⵠⲆ: "img/inv-golden-axe-out.png",
        ᐃⲆⲆΔΔᐃⵠⲆΔ: "img/inv-golden-axe-in.png",
        ΔⵠᐃⵠᐃⲆᐃΔᐃ: "img/inv-golden-axe-click.png",
        ⲆΔᐃⵠᐃΔᐃⲆᐃ: "img/day-golden-axe.png",
        ΔⲆᐃΔᐃᐃⵠΔⵠ: "img/night-golden-axe.png",
        ΔᐃⵠᐃⵠᐃᐃⵠΔ: "img/inv-diamond-axe-out.png",
        ⵠΔΔΔᐃⲆⲆΔⵠ: "img/inv-diamond-axe-in.png",
        ΔⵠⵠᐃΔᐃⵠⲆⲆ: "img/inv-diamond-axe-click.png",
        ΔᐃΔΔⵠⲆΔΔΔ: "img/day-diamond-axe.png",
        ᐃΔⲆΔⵠⲆⲆⲆⵠ: "img/night-diamond-axe.png",
        ⵠⵠΔΔᐃᐃᐃΔΔ: "img/inv-amethyst-axe-out.png",
        ⲆΔΔᐃᐃⵠⵠᐃⵠ: "img/inv-amethyst-axe-in.png",
        ΔΔⲆⲆΔΔⵠⵠᐃ: "img/inv-amethyst-axe-click.png",
        ⲆⲆⵠᐃᐃΔⵠΔΔ: "img/day-amethyst-axe.png",
        ΔⵠΔᐃᐃⵠᐃⵠΔ: "img/night-amethyst-axe.png",
        ⲆⵠⵠΔⵠⲆⲆΔⲆ: "img/inv-reidite-axe-out.png",
        ΔⲆΔᐃᐃΔᐃⲆⲆ: "img/inv-reidite-axe-in.png",
        ΔΔⲆΔΔⵠᐃⲆⵠ: "img/inv-reidite-axe-click.png",
        ᐃΔᐃΔⲆⲆⵠⲆΔ: "img/day-reidite-axe.png",
        ⲆⵠⲆⵠΔΔΔⵠᐃ: "img/night-reidite-axe.png",
        ⵠⵠΔⵠⵠⲆⵠ: "img/bandage-activated.png",
        ⵠⲆᐃⵠΔᐃⲆ: "img/auto-feed.png",
        ⵠᐃΔΔⵠⵠᐃ: "img/stop-regeneration.png",
        ⲆⲆⵠᐃᐃⲆΔ: "img/stop-regeneration2.png",
        ⲆⵠᐃΔⵠⲆΔΔⲆ: "img/day-wood-platform.png",
        ΔⵠᐃⲆΔⵠⲆⵠⲆ: "img/night-wood-platform.png",
        ⵠᐃΔⲆΔⵠᐃⵠᐃ: "img/inv-wood-platform-in.png",
        ΔᐃΔⵠⲆⵠΔᐃᐃ: "img/inv-wood-platform-out.png",
        ΔⵠⲆⵠΔⲆⲆΔᐃ: "img/inv-wood-platform-click.png",
        ⵠΔⲆᐃⲆᐃᐃⵠᐃ: "img/day-wood-shield.png",
        ⲆⵠⵠⵠⵠᐃΔⵠⲆ: "img/night-wood-shield.png",
        ᐃΔⵠΔᐃⵠⲆΔⵠ: "img/day-stone-shield.png",
        ⵠᐃΔΔᐃⵠⲆⵠΔ: "img/night-stone-shield.png",
        ΔᐃᐃᐃⵠᐃΔⵠⲆ: "img/day-gold-shield.png",
        ⵠΔᐃᐃⲆⲆᐃᐃΔ: "img/night-gold-shield.png",
        ΔᐃΔᐃⵠΔⲆΔᐃ: "img/day-diamond-shield.png",
        ⵠᐃᐃΔⵠⲆⵠᐃΔ: "img/night-diamond-shield.png",
        ⲆΔΔⲆΔⲆᐃΔⵠ: "img/day-amethyst-shield.png",
        ᐃⲆⵠⵠᐃⲆᐃΔⲆ: "img/night-amethyst-shield.png",
        ᐃΔⵠⵠⵠΔΔΔⵠ: "img/day-reidite-shield.png",
        ⲆⵠⲆⲆΔⵠⵠΔⲆ: "img/night-reidite-shield.png",
        ᐃΔᐃᐃΔᐃΔⲆⲆ: "img/inv-wood-shield-in.png",
        ⲆΔⵠᐃⲆⵠⲆⲆⵠ: "img/inv-wood-shield-out.png",
        ⵠⵠΔΔΔᐃⵠᐃΔ: "img/inv-wood-shield-click.png",
        ΔⲆⲆᐃⵠᐃⲆⵠᐃ: "img/inv-stone-shield-in.png",
        ΔᐃᐃⵠᐃⲆᐃᐃⲆ: "img/inv-stone-shield-out.png",
        ⵠΔⲆᐃᐃⵠΔᐃᐃ: "img/inv-stone-shield-click.png",
        ΔⵠΔΔΔᐃΔⵠᐃ: "img/inv-gold-shield-in.png",
        ᐃΔⲆᐃⲆⵠⲆⵠᐃ: "img/inv-gold-shield-out.png",
        ΔⵠⵠᐃⲆᐃⵠⲆⵠ: "img/inv-gold-shield-click.png",
        ᐃΔⲆᐃⵠΔⲆᐃⲆ: "img/inv-diamond-shield-in.png",
        ⵠΔΔⲆᐃⲆΔΔⲆ: "img/inv-diamond-shield-out.png",
        ᐃⲆⵠΔⲆⲆⵠᐃⵠ: "img/inv-diamond-shield-click.png",
        ⲆΔᐃᐃΔΔᐃⲆⵠ: "img/inv-amethyst-shield-in.png",
        ⲆΔⲆⵠⵠΔᐃⵠⵠ: "img/inv-amethyst-shield-out.png",
        ᐃⵠⲆⵠΔᐃᐃⲆⲆ: "img/inv-amethyst-shield-click.png",
        ⵠΔⵠⵠᐃΔⲆⵠΔ: "img/inv-reidite-shield-in.png",
        ΔᐃΔΔΔΔⲆⵠΔ: "img/inv-reidite-shield-out.png",
        ⵠⲆⲆⲆΔⵠᐃⵠΔ: "img/inv-reidite-shield-click.png",
        ⵠⵠⲆΔΔΔⲆⵠᐃ: "img/day-machete.png",
        ⵠᐃᐃᐃΔᐃⲆⵠΔ: "img/night-machete.png",
        ⲆⲆᐃⵠΔᐃⲆⲆΔ: "img/inv-machete-in.png",
        ᐃⲆⵠⲆᐃΔⵠⲆⲆ: "img/inv-machete-out.png",
        ⵠΔⵠⵠⲆⵠⵠⲆΔ: "img/inv-machete-click.png"
    };
    const tt = 14;
    const ut = 2;
    const vt = 18;
    ᐃᐃΔᐃⲆⲆⲆ = [{}];
    ᐃᐃΔᐃⲆⲆⲆ[0].stringify = function (a) {
        var b = new Uint8Array(new ArrayBuffer(a.length));
        for (var c = 0; a.length > c; c++) {
            b[c] = a[c];
        }
        return b;
    };
    const wt = 5;
    const xt = 12;
    ⵠⲆⲆᐃΔⲆⵠ = {};
    ΔᐃΔᐃΔⵠΔⵠⵠ = {};
    for (var mt in ⲆⲆ) {
        ⵠⲆⲆᐃΔⲆⵠ[mt] = ⲆⲆ[mt];
    }
    ΔⲆ = [];
    const yt = 20;
    ⲆⲆⵠ = {};
    const zt = 7;
    ⲆⲆⵠ.ⵠΔΔⲆΔ = 0;
    ⲆⲆⵠ.ΔⲆΔᐃ = 1;
    ⲆⲆⵠ.ⵠⵠⵠᐃ = 2;
    ⲆⲆⵠ.ᐃⵠⵠᐃ = 3;
    ⲆⲆⵠ.ⲆΔᐃᐃ = 4;
    ⲆⲆⵠ.Ⲇᐃᐃⵠ = 5;
    const At = la;
    ⲆⲆⵠ.ⲆⵠⵠΔ = 6;
    const Bt = 2;
    ⲆⲆⵠ.ⲆⵠΔΔⲆⵠⵠ = 7;
    ⲆⲆⵠ.ⵠΔΔⵠⵠ = 8;
    const Ct = 16;
    ⲆΔⲆⵠ = {};
    ⲆⵠΔⲆ = [];
    ΔⵠᐃᐃΔⲆⵠ = function (a, b) {
        for (var c = 0; a.length > c; c++) {
            if (a[c].id === b) {
                return c;
            }
        }
        return -1;
    };
    var Dt = [];
    const Ft = 1;
    function Gt(b, c, d, e) {
        var f = ⲆⵠΔⲆ[b];
        if (Zq !== f) {
            for (var i = 0; i < 2; i++) {
                var j = f[c][i];
                var k = e * 193 / cf.ΔΔΔΔⲆ;
                var m = d * 193 / cf.ᐃⵠᐃⲆΔ;
                var n = j.width / 3.5;
                var o = j.height / 3.5;
                ΔⲆ[818][i].drawImage(j, k - n / 2, m - o / 2, n, o);
                k = e * 600 / cf.ΔΔΔΔⲆ;
                m = d * 600 / cf.ᐃⵠᐃⲆΔ;
                n = j.width / 1.5;
                o = j.height / 1.5;
                ΔⲆ[819][i].drawImage(j, k - n / 2, m - o / 2, n, o);
            }
        }
    }
    function Ht(a, b) {
        for (var c = 0; c < Dt.length; c += b) {
            var d = Dt[c];
            if (a === d[0]) {
                Gt(d[0], d[1], d[2], d[3]);
            }
        }
    }
    const It = 1;
    ⲆΔⲆⵠΔΔⲆⵠⵠ = function () {
        for (var b = 0; b < 2; b++) {
            ΔⲆ[818][b].clearRect(0, 0, 193, 193);
            ΔⲆ[818][b].drawImage(ⲆⵠΔⲆ.MAP[b], 0, 0, 193, 193);
            ΔⲆ[819][b].clearRect(0, 0, 600, 600);
            ΔⲆ[819][b].drawImage(ⲆⵠΔⲆ.MAP[b], 0, 0, 600, 600);
            for (var c = cf.ⵠⵠⲆⲆ.length - 1; c >= 0; c--) {
                var d = cf.ⵠⵠⲆⲆ[c];
                var f = d.x1 * 193 / (cf.ΔΔΔΔⲆ * 100);
                var j = d.y1 * 193 / (cf.ᐃⵠᐃⲆΔ * 100);
                var k = d.w * 193 / (cf.ΔΔΔΔⲆ * 100);
                var m = d.ⵠⲆᐃ * 193 / (cf.ᐃⵠᐃⲆΔ * 100);
                var p = d.x1 * 600 / (cf.ΔΔΔΔⲆ * 100);
                var q = d.y1 * 600 / (cf.ᐃⵠᐃⲆΔ * 100);
                var u = d.w * 600 / (cf.ΔΔΔΔⲆ * 100);
                var v = d.ⵠⲆᐃ * 600 / (cf.ᐃⵠᐃⲆΔ * 100);
                if (d.ⵠᐃᐃ === cf.ΔΔⲆᐃΔ) {
                    ΔⲆ[818][b].drawImage(ⲆⵠΔⲆ.FOREST[b], f, j, k, m);
                    ΔⲆ[819][b].drawImage(ⲆⵠΔⲆ.FOREST[b], p, q, u, v);
                }
                if (cf.ⲆᐃΔⲆΔᐃΔ === d.ⵠᐃᐃ) {
                    ΔⲆ[818][b].drawImage(ⲆⵠΔⲆ.WINTER[b], f, j, k, m);
                    ΔⲆ[819][b].drawImage(ⲆⵠΔⲆ.WINTER[b], p, q, u, v);
                }
                if (cf.ⵠΔⲆⵠⲆᐃᐃ === d.ⵠᐃᐃ) {
                    ΔⲆ[818][b].drawImage(ⲆⵠΔⲆ.LAVA[b], f, j, k, m);
                    ΔⲆ[819][b].drawImage(ⲆⵠΔⲆ.LAVA[b], p, q, u, v);
                }
                if (cf.ⲆⲆΔⲆᐃΔΔ === d.ⵠᐃᐃ) {
                    ΔⲆ[818][b].drawImage(ⲆⵠΔⲆ.CAVE[b], f, j, k, m);
                    ΔⲆ[819][b].drawImage(ⲆⵠΔⲆ.CAVE[b], p, q, u, v);
                }
                if (d.ⵠᐃᐃ === cf.ᐃⲆⵠⵠⵠΔⲆ) {
                    ΔⲆ[818][b].drawImage(ⲆⵠΔⲆ.DESERT[b], f, j, k, m);
                    ΔⲆ[819][b].drawImage(ⲆⵠΔⲆ.DESERT[b], p, q, u, v);
                }
            }
        }
    };
    ΔⲆᐃⵠᐃⲆΔΔΔ = function () {
        ⲆΔⲆⵠ = {
            ⵠᐃⲆΔᐃ: [{
                id: 0,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠᐃᐃᐃΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆⵠᐃⲆᐃⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⵠᐃⲆⲆΔᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆΔΔⵠⵠΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠΔΔⲆΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Starver"
            }, {
                id: 3,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠᐃⲆΔⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆⵠⲆᐃΔᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⲆⲆⲆⵠΔⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠᐃΔᐃᐃΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠΔΔⲆΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Angry"
            }, {
                id: 2,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃΔΔᐃⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆΔΔΔᐃⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆⵠᐃⲆⲆⲆⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⵠΔᐃΔⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠΔΔⲆΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Sad"
            }, {
                id: 9,
                ᐃΔᐃ: ⲆⲆ.ⵠᐃᐃⲆⵠⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆⵠΔΔΔⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠᐃⲆⲆᐃⲆⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⵠⲆᐃⲆⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠΔΔⲆΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Happy 1"
            }, {
                id: 1,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆΔⵠᐃΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃᐃᐃᐃⲆᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠΔᐃⲆΔᐃⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⲆᐃⲆⵠⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "What?"
            }, {
                id: 4,
                ᐃΔᐃ: ⲆⲆ.ⲆΔᐃⵠⵠⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃⲆᐃᐃΔⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠΔᐃΔᐃⵠΔ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃΔⲆᐃΔⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Suspicious"
            }, {
                id: 5,
                ᐃΔᐃ: ⲆⲆ.ΔᐃⲆⵠⲆΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃᐃΔᐃⵠΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃᐃⲆⲆⲆᐃᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⲆⵠⲆⲆⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Scar"
            }, {
                id: 6,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠⵠᐃⵠᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠᐃⲆᐃᐃⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆΔᐃΔⲆⵠⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠΔᐃⲆᐃⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "In Trouble"
            }, {
                id: 7,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃΔⵠⵠⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔΔⵠⲆΔⲆᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃΔⵠⵠΔᐃᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃΔⲆⲆΔⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Cute"
            }, {
                id: 8,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃΔΔΔⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔᐃΔⵠᐃΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⵠᐃᐃⲆᐃΔ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠⲆⵠⲆⲆΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Bored 1"
            }, {
                id: 10,
                ᐃΔᐃ: ⲆⲆ.ⲆΔⲆᐃⵠᐃⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃⲆⵠⲆⲆⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⲆΔᐃΔΔⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⵠᐃΔⵠⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Happy 2"
            }, {
                id: 11,
                ᐃΔᐃ: ⲆⲆ.Ⲇⵠⵠⵠᐃⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃᐃΔΔⲆⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔΔⵠⵠⲆᐃⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠΔᐃⵠΔᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Crazy"
            }, {
                id: 12,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆⲆⲆᐃⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆΔⵠΔᐃⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆⵠΔΔΔΔᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ΔΔⲆΔⵠⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Happy 3"
            }, {
                id: 13,
                ᐃΔᐃ: ⲆⲆ.ⵠΔⵠΔΔΔΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆⲆⲆᐃⲆⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃΔΔΔΔΔΔ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⵠᐃᐃΔⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Very Cute"
            }, {
                id: 14,
                ᐃΔᐃ: ⲆⲆ.ⵠᐃᐃΔⲆⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆᐃⲆⵠⲆΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃᐃᐃⵠᐃⵠⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ΔᐃΔΔⲆᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Curious"
            }, {
                id: 15,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆᐃΔⵠⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠΔΔΔⲆᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⲆⵠΔᐃΔᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠⲆᐃΔⵠⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Bored 2"
            }, {
                id: 16,
                ᐃΔᐃ: ⲆⲆ.ᐃΔᐃᐃⲆᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔΔΔᐃΔⵠΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔᐃᐃⲆⵠᐃⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠⲆⲆᐃᐃⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Happy 4"
            }, {
                id: 17,
                ᐃΔᐃ: ⲆⲆ.ᐃΔⲆⲆⵠⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆΔⵠⲆⵠᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃΔᐃⵠⵠⲆⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠΔᐃⲆᐃⲆⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Scar 2"
            }, {
                id: 18,
                ᐃΔᐃ: ⲆⲆ.ⵠΔΔΔᐃΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔᐃΔⵠⵠⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔᐃⵠΔⲆⲆᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⲆⵠΔᐃΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Sick"
            }, {
                id: 19,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠΔⲆᐃᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠⲆᐃⵠⲆᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠᐃⲆᐃⲆᐃᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆᐃⵠⲆⵠⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Somnambule"
            }, {
                id: 24,
                ᐃΔᐃ: ⲆⲆ.ⲆΔⲆᐃⵠⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔⲆⲆⵠΔΔⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆΔⲆᐃΔⲆᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠΔⵠⵠᐃⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Pixelbitie",
                name: "Feel Bad"
            }, {
                id: 23,
                ᐃΔᐃ: ⲆⲆ.ΔⲆᐃᐃⵠⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔⲆⵠⵠⲆⵠⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⲆⲆⵠΔⲆⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⲆᐃⲆⵠⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Pixelbitie",
                name: "Mmmh."
            }, {
                id: 103,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠᐃⲆⵠΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔⲆⲆⲆᐃⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⵠᐃⵠⵠⲆᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⵠᐃᐃⲆⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Panic"
            }, {
                id: 105,
                ᐃΔᐃ: ⲆⲆ.ᐃΔᐃⵠΔⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆⵠΔⵠᐃⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆⵠⲆⵠᐃΔⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ΔᐃⵠⵠΔⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Hypnotic"
            }, {
                id: 106,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆⵠᐃΔⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃᐃⵠⲆᐃᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃΔᐃⲆΔᐃᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆᐃⲆᐃⵠᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Stars in the eyes"
            }, {
                id: 220,
                ᐃΔᐃ: ⲆⲆ.ΔⵠⵠⲆΔᐃⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃΔⲆΔⵠΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⲆⲆᐃΔᐃᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⵠᐃΔᐃⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Seams"
            }, {
                id: 104,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆΔᐃΔⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔⲆⲆⵠⲆⵠᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⵠᐃⵠⲆⲆᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠⵠᐃⲆⵠⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Scared at night"
            }, {
                id: 20,
                ᐃΔᐃ: ⲆⲆ.ΔⵠⵠⲆᐃⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃⵠⲆΔⵠΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⵠⲆᐃΔΔᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⲆᐃⵠⲆΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Vampire"
            }, {
                id: 21,
                ᐃΔᐃ: ⲆⲆ.ⲆΔΔΔⲆⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃⲆⵠΔᐃΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⲆⲆⵠΔⲆⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ΔΔᐃⵠⲆᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Zombie"
            }, {
                id: 22,
                ᐃΔᐃ: ⲆⲆ.ΔᐃᐃⲆⲆΔΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃΔᐃⲆᐃⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠΔⲆⲆΔⲆᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⵠⵠⵠⲆⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Pixelbitie",
                name: "Devaster"
            }, {
                id: 116,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃΔᐃᐃᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆⵠⲆᐃⲆⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠᐃᐃⵠⲆᐃᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⵠⵠΔΔᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Fukss",
                name: "Dead Devaster"
            }, {
                id: 27,
                ᐃΔᐃ: ⲆⲆ.ΔᐃΔⵠⵠⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃⵠᐃΔΔⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔΔⵠᐃⵠᐃΔ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆΔΔᐃⵠⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Winter",
                name: "Cactus"
            }, {
                id: 28,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃᐃᐃᐃⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔᐃΔᐃⲆⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆΔΔⲆⵠⵠᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠⲆᐃⲆᐃΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Bee"
            }, {
                id: 49,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠⵠⲆⲆΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔᐃΔⵠᐃⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔᐃΔⲆᐃⵠⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⲆᐃᐃΔΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Camo Skin"
            }, {
                id: 58,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃⲆⲆΔⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠᐃⵠⵠΔΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃΔΔᐃⵠⲆⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⲆᐃⲆΔΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Blue Limax Skin"
            }, {
                id: 59,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆᐃΔⵠᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃⵠⵠᐃⲆⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃᐃΔᐃΔⵠⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⵠΔⲆⵠⲆⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Red Limax Skin"
            }, {
                id: 94,
                ᐃΔᐃ: ⲆⲆ.ΔⲆⵠⵠΔᐃⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃΔᐃΔΔⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔᐃⲆⵠΔⲆⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠⲆⲆᐃΔΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Mr. Pumpkin"
            }, {
                id: 109,
                ᐃΔᐃ: ⲆⲆ.ΔⲆⵠⲆⲆⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠΔᐃⲆⵠΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔᐃᐃⲆⲆⵠᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⲆⵠᐃⲆΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Wood"
            }, {
                id: 114,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃΔⲆⵠⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆⵠⵠⵠᐃᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔᐃⵠΔᐃΔⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⲆᐃᐃⲆΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Zebra"
            }, {
                id: 120,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠᐃᐃⵠⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠᐃΔⵠΔⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⵠᐃᐃᐃΔⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠᐃᐃᐃⵠΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "CrysTal",
                name: "Tiger"
            }, {
                id: 134,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃⵠⵠⲆⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠⵠⵠΔΔᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⵠᐃⵠΔⲆⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃᐃⲆⲆⲆΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Franchestcreator",
                name: "Day or Night"
            }, {
                id: 135,
                ᐃΔᐃ: ⲆⲆ.ⵠΔⲆΔⵠΔΔ,
                ⲆΔⲆ: ⲆⲆ.Δⵠⵠᐃⵠⵠᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆⵠΔⲆᐃΔΔ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⵠⲆᐃᐃΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Poinet",
                name: "Square Starver"
            }, {
                id: 136,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆⵠⲆΔΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆⵠⵠᐃⲆⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔΔⵠΔⲆⲆⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆᐃⵠΔⲆⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Voodoo Doll"
            }, {
                id: 137,
                ᐃΔᐃ: ⲆⲆ.ⵠᐃⵠⲆⲆᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠⲆΔΔᐃᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⵠᐃⵠᐃᐃᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠⵠᐃΔᐃΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Frankenstein"
            }, {
                id: 138,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆΔᐃᐃⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠⲆᐃⲆΔᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃᐃⲆⵠΔΔΔ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆᐃΔⵠΔⲆⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Old Mummy"
            }, {
                id: 139,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆΔⵠⵠⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆⵠΔⵠᐃΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔΔᐃΔⵠⵠΔ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠⵠΔᐃⵠΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Werewolf"
            }, {
                id: 140,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆΔᐃⲆⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠΔⲆⲆⲆⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃᐃⵠᐃΔᐃᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠⲆᐃⲆᐃᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Old Cthulhu"
            }, {
                id: 141,
                ᐃΔᐃ: ⲆⲆ.ΔⲆⵠᐃᐃΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔⲆⵠᐃⲆⲆⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔᐃΔΔΔⵠⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⵠⵠⲆⲆᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Sea Man"
            }, {
                id: 142,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆⲆΔⵠΔΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔΔⵠⲆᐃⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔΔⵠΔⲆⵠⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⵠⵠΔᐃᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Old Pumpkin"
            }, {
                id: 148,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆⵠᐃΔⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆⲆΔᐃᐃⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃᐃⵠⵠⲆᐃⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠΔⵠΔⲆⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Old Snowman"
            }, {
                id: 149,
                ᐃΔᐃ: ⲆⲆ.ΔⵠΔΔΔᐃⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠⲆⵠᐃⵠⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⲆⵠⲆⵠΔᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⵠΔΔΔΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Old Christmas Tree Man"
            }, {
                id: 150,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠᐃᐃⲆⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠΔⲆΔⵠᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⲆᐃⲆᐃⲆⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃᐃᐃΔⵠᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Old Mrs Bell"
            }, {
                id: 151,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠᐃⲆᐃΔΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆᐃΔᐃⲆΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆⵠᐃᐃⲆⲆᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃΔⵠΔⲆⲆⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Old Elfy"
            }, {
                id: 152,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠΔⲆᐃⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠⵠΔΔᐃⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃΔⵠΔⵠΔᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⵠᐃᐃⵠⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Old Mr Present"
            }, {
                id: 153,
                ᐃΔᐃ: ⲆⲆ.ΔᐃᐃⵠᐃᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆⵠᐃⲆᐃΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆᐃⵠⵠⲆⲆᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⲆⲆΔⲆΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "My Dear Old Deer"
            }, {
                id: 154,
                ᐃΔᐃ: ⲆⲆ.ⲆΔΔᐃΔⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃⵠⲆΔΔᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆⲆᐃΔⲆΔⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠᐃⵠᐃⵠⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Mr Angel"
            }, {
                id: 155,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠⲆᐃⵠᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔⲆᐃⲆⲆΔⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆΔⵠᐃⲆΔⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠᐃΔΔᐃⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Mr Ice Cube"
            }, {
                id: 156,
                ᐃΔᐃ: ⲆⲆ.ⲆΔᐃⲆⲆⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔⲆΔⲆⲆⲆΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃᐃΔⵠⲆᐃᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃΔΔᐃᐃⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Mr Snowman"
            }, {
                id: 159,
                ᐃΔᐃ: ⲆⲆ.ⵠᐃⵠⲆᐃΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃᐃⵠΔΔΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃΔᐃΔΔΔⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃᐃᐃᐃΔᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "CrysTal",
                name: "Crystal Sky Skin"
            }, {
                id: 167,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆⲆΔΔⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔΔᐃᐃΔᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠΔⲆⵠΔᐃⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⵠΔᐃⵠΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Franchestcreator",
                name: "Radioactive Starver"
            }, {
                id: 169,
                ᐃΔᐃ: ⲆⲆ.ΔᐃᐃΔⲆΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠⲆⲆᐃⲆⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⲆᐃᐃΔᐃⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⵠⲆⲆⵠᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "TheScaryBlaze",
                name: "Eaten Cookie"
            }, {
                id: 170,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆᐃᐃⲆⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠⲆᐃⵠᐃΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃᐃᐃᐃⲆΔⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆΔᐃᐃⵠᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "aloner",
                name: "Blob Thing"
            }, {
                id: 172,
                ᐃΔᐃ: ⲆⲆ.ΔΔᐃⵠⵠΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠⵠⲆⵠᐃΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⲆᐃⲆΔⲆᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠᐃⲆⵠⵠⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "aloner",
                name: "Machine Mask"
            }, {
                id: 184,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆⵠⲆⲆⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠⲆⲆⲆᐃᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⲆⲆⵠΔⲆⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⵠⵠⲆⲆⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Mad"
            }, {
                id: 206,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠⵠⵠᐃⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃΔⲆᐃᐃⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠΔⲆⲆⵠⲆⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆᐃΔⵠᐃⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Survivor"
            }, {
                id: 209,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠⲆᐃⵠⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃΔⵠⵠⲆᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⲆΔⵠⲆᐃᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ΔᐃᐃⵠⵠᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Starverator"
            }, {
                id: 230,
                ᐃΔᐃ: ⲆⲆ.ΔΔⵠⵠΔⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔⵠᐃⲆⲆΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔΔᐃΔⵠⲆⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆᐃΔΔⲆⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Totem"
            }, {
                id: 231,
                ᐃΔᐃ: ⲆⲆ.ΔΔⲆⲆᐃᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠⵠᐃΔᐃᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.Ⲇᐃⵠᐃᐃᐃⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⵠᐃⵠⲆⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Big Pile of Sand"
            }, {
                id: 232,
                ᐃΔᐃ: ⲆⲆ.ⵠᐃᐃⵠⲆⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔⵠⲆΔᐃⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⵠⲆᐃΔΔⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠᐃⲆⵠΔᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Big Pile of Dirt"
            }, {
                id: 235,
                ᐃΔᐃ: ⲆⲆ.ⵠΔⵠᐃᐃⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃⵠⵠᐃᐃΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆΔΔⵠᐃⵠᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃᐃΔᐃⲆᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Sandstone"
            }, {
                id: 29,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆΔΔΔΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃⵠⵠⵠΔᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔΔⲆΔᐃᐃᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃᐃⲆⲆⲆⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Pixelbitie",
                name: "Lollipop 1"
            }, {
                id: 30,
                ᐃΔᐃ: ⲆⲆ.ⲆΔᐃⵠΔⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃΔⲆⲆΔⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⵠᐃᐃⵠΔΔ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠΔᐃᐃⲆΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Lollipop 2"
            }, {
                id: 31,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆᐃΔⲆᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔΔΔᐃΔΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⲆⵠᐃΔⵠΔ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠⲆᐃⵠⲆⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Lollipop 3"
            }, {
                id: 32,
                ᐃΔᐃ: ⲆⲆ.ⵠΔⵠΔᐃⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃⲆΔⵠⵠⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⵠⲆᐃⵠⲆΔ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆᐃᐃΔⲆⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Lollipop 4"
            }, {
                id: 33,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠΔⲆⵠⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆⲆⲆⵠᐃΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⵠᐃⵠΔᐃⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ΔΔⵠΔᐃᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Sushui",
                name: "Yellow Bird"
            }, {
                id: 34,
                ᐃΔᐃ: ⲆⲆ.ᐃΔΔᐃᐃⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆⲆᐃᐃⵠΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠΔⵠᐃⲆⲆᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⲆⵠᐃᐃⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Sushui",
                name: "Red Bird"
            }, {
                id: 35,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃᐃᐃⵠΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆᐃⵠΔⵠΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔΔⵠΔⲆᐃΔ,
                ΔⵠΔⵠ: ⲆⲆ.ΔΔΔᐃⲆⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Sushui",
                name: "Blue Bird"
            }, {
                id: 37,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃᐃⲆⵠΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔΔⲆΔΔⲆⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠᐃⵠⲆⵠΔⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⵠⵠΔΔⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Winter",
                name: "Owl"
            }, {
                id: 52,
                ᐃΔᐃ: ⲆⲆ.ⵠΔⲆΔⲆᐃⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠⲆΔⲆⲆⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔᐃⵠⲆΔΔᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃᐃᐃⲆᐃᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Nemo"
            }, {
                id: 53,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠᐃⵠⵠΔΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆᐃΔᐃΔⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃΔᐃΔᐃᐃⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⲆΔᐃΔⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Mr. Bread"
            }, {
                id: 74,
                ᐃΔᐃ: ⲆⲆ.ΔⲆⵠΔⲆⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔⲆⵠⲆⲆⵠᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⲆⲆⵠⲆᐃᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⵠⵠᐃⵠᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Communist & Taco4Life",
                name: "Mr. Bread 2"
            }, {
                id: 75,
                ᐃΔᐃ: ⲆⲆ.ⲆΔⲆᐃᐃᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆⵠΔᐃⵠⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃᐃⲆⵠΔⲆΔ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠΔⵠΔΔⲆⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Communist & Taco4Life",
                name: "Mr. Bread 3"
            }, {
                id: 60,
                ᐃΔᐃ: ⲆⲆ.ⲆΔΔᐃᐃᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆᐃⲆΔⵠⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⲆᐃΔΔⵠⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⵠⵠᐃᐃᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Red Berry"
            }, {
                id: 61,
                ᐃΔᐃ: ⲆⲆ.ⵠΔᐃΔⵠΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔΔᐃⲆᐃᐃΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃΔᐃᐃⵠⵠⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠΔⲆᐃᐃⲆⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Old Berry"
            }, {
                id: 70,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠΔᐃᐃⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔᐃⲆⲆΔᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⵠⲆⵠᐃᐃⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⲆⲆΔⵠⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Cake"
            }, {
                id: 71,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃΔᐃⵠᐃⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃⵠᐃⲆᐃⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⵠⵠⲆⵠⵠⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⲆᐃΔΔΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Christmas Cake"
            }, {
                id: 77,
                ᐃΔᐃ: ⲆⲆ.ⵠΔᐃᐃⲆⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔΔΔΔᐃΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⲆⲆᐃΔⵠᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⲆΔⵠⲆⲆⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Pancakez",
                name: "Mr. Pancake"
            }, {
                id: 87,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆᐃᐃᐃᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃⲆᐃΔΔⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔΔⲆⵠⵠᐃΔ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⵠⲆⲆⵠⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Mr. Taco"
            }, {
                id: 78,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃΔΔⵠⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔⵠᐃᐃⲆΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆΔᐃᐃⲆⵠᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆΔΔⵠᐃᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Mr. Bottle"
            }, {
                id: 79,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠΔⵠᐃⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃⲆΔᐃΔⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆⲆΔⲆΔΔⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠΔᐃⵠⵠᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Mr. Bottle 2"
            }, {
                id: 97,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠᐃⵠΔᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃΔΔⵠΔᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃᐃΔⲆᐃᐃΔ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⵠΔⵠΔⲆⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Pink Rabbit"
            }, {
                id: 102,
                ᐃΔᐃ: ⲆⲆ.ⵠΔⲆⲆⲆΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃⲆΔⲆᐃⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⲆᐃⵠⲆΔⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⵠΔⵠᐃᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Marshmallow"
            }, {
                id: 107,
                ᐃΔᐃ: ⲆⲆ.ⵠΔⵠᐃⵠⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃᐃⲆⲆⲆⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔΔΔⲆⵠᐃⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⲆΔⲆⲆⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Fox"
            }, {
                id: 132,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆᐃᐃⵠⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠⲆⲆΔᐃᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⵠⵠⲆⵠᐃᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃᐃⵠᐃᐃᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Raccoon"
            }, {
                id: 111,
                ᐃΔᐃ: ⲆⲆ.ⲆΔᐃΔⲆᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔᐃΔⲆΔᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⲆⵠΔⵠⵠᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠᐃⲆᐃⵠΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Cloud"
            }, {
                id: 113,
                ᐃΔᐃ: ⲆⲆ.ΔΔΔⵠⲆᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆᐃΔⵠⵠΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠᐃⵠᐃΔⲆⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠΔΔⵠΔᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Moon"
            }, {
                id: 117,
                ᐃΔᐃ: ⲆⲆ.ΔⵠⲆᐃᐃⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆᐃΔᐃΔᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⵠⲆΔᐃΔⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ΔΔᐃⵠΔΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Mr. Panda"
            }, {
                id: 118,
                ᐃΔᐃ: ⲆⲆ.ⵠΔⲆⵠⲆΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃⵠⵠⲆΔⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆⵠΔΔⲆᐃⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⵠⵠⲆᐃΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Mr. Strawberry"
            }, {
                id: 119,
                ᐃΔᐃ: ⲆⲆ.ΔⲆΔⵠᐃᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆⲆᐃⲆΔᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⵠⵠᐃⵠΔᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆΔᐃⲆΔⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "eogito & Sushuui",
                name: "Mummy"
            }, {
                id: 122,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆᐃΔΔΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃⵠᐃΔᐃⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠΔⲆᐃᐃⲆΔ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠᐃΔⵠᐃⲆⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Dino"
            }, {
                id: 127,
                ᐃΔᐃ: ⲆⲆ.ⵠΔᐃⲆᐃΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔⲆᐃⵠⵠᐃⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠᐃⲆⲆΔⵠΔ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⵠⵠⵠⵠⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "MADBalgouthi",
                name: "Mr. Koala"
            }, {
                id: 160,
                ᐃΔᐃ: ⲆⲆ.ΔⵠᐃⵠᐃᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠΔᐃⲆⲆⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠΔΔⵠⲆΔⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ΔᐃΔΔᐃᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Bottle Protection"
            }, {
                id: 162,
                ᐃΔᐃ: ⲆⲆ.ΔⵠⲆⲆⲆᐃⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃⲆⵠΔⵠⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⵠⵠⵠΔᐃⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ΔᐃᐃᐃᐃⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "CrysTal",
                name: "Leaf Man"
            }, {
                id: 166,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃⲆⵠᐃⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆΔΔᐃⵠⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠΔⵠⵠⲆⲆⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠⵠⲆⲆᐃᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Bubble"
            }, {
                id: 174,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆΔⲆΔⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔⵠⲆⵠⲆⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⲆⵠⵠΔⵠⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ΔΔΔΔⲆΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "upfiz",
                name: "Potato"
            }, {
                id: 171,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠⵠⵠΔΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔΔⲆΔⲆⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃΔΔⲆΔᐃΔ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠΔⵠΔⲆᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "aloner",
                name: "Axolotl"
            }, {
                id: 178,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃᐃΔⲆΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔⵠⲆᐃⲆᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⲆⲆⵠⲆᐃΔ,
                ΔⵠΔⵠ: ⲆⲆ.Ⲇᐃᐃⵠⵠᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Rusted Machine"
            }, {
                id: 179,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃΔΔⵠᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆᐃⲆΔⲆᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⵠΔΔⵠⵠⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⵠᐃᐃΔᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Starving Machine"
            }, {
                id: 181,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃΔⲆΔⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔⲆⲆΔⲆⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⵠᐃⲆΔⲆΔ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠⲆⵠⲆΔⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Night Stars"
            }, {
                id: 191,
                ᐃΔᐃ: ⲆⲆ.ΔΔⵠΔⲆΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆⵠⲆⲆᐃΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⲆⵠⵠΔᐃΔ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⲆΔΔⵠᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Blue Jay"
            }, {
                id: 198,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆᐃᐃΔⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃᐃⵠⵠⲆΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⲆⲆΔⲆⲆΔ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠᐃⲆΔⲆᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "AWTP",
                name: "Dave"
            }, {
                id: 200,
                ᐃΔᐃ: ⲆⲆ.ΔΔⲆⲆᐃⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆⲆᐃⵠⲆⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃΔᐃⵠᐃᐃⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⵠᐃᐃⵠΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Jinty",
                name: "Smug"
            }, {
                id: 203,
                ᐃΔᐃ: ⲆⲆ.ᐃΔⵠⲆⲆⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆⵠΔⵠⵠⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠΔⵠΔⵠⵠⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⲆⲆΔⵠᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Reclaimed"
            }, {
                id: 204,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆΔΔⲆᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠⲆⵠΔⵠⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔᐃΔᐃΔⲆᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆᐃᐃΔΔΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Legacy Wolf"
            }, {
                id: 211,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃⵠⲆᐃᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠⵠᐃᐃᐃⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⲆΔⲆΔΔΔ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⲆᐃⲆΔⲆⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Starver of the Seas"
            }, {
                id: 213,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃⲆⲆΔΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆⵠⲆᐃΔⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆΔⵠⲆΔᐃᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠⵠⲆΔΔⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Ice"
            }, {
                id: 219,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆⵠΔΔⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠᐃⲆᐃⵠⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠᐃᐃⵠⵠΔⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆΔⵠⲆΔΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Ramil",
                name: "Sandwich Cookie"
            }, {
                id: 221,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆⵠΔᐃᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔⲆⵠⲆΔⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⲆᐃⲆᐃᐃΔ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⲆⵠᐃⵠⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Purple Geode"
            }, {
                id: 222,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠᐃⲆΔΔΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔⲆⲆᐃΔⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆⵠⵠΔᐃΔⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⲆᐃΔⵠⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Cyan Geode"
            }, {
                id: 223,
                ᐃΔᐃ: ⲆⲆ.ᐃΔΔᐃⵠᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆᐃⲆΔᐃⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠΔᐃΔⵠⵠⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠᐃⲆΔⵠⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Yellow Geode"
            }, {
                id: 228,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃⲆᐃΔⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆⵠⲆⲆⵠΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⵠⵠΔΔⲆⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⵠΔⵠⲆⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Furnace Head"
            }, {
                id: 229,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆΔᐃΔΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔΔⵠΔⵠⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⲆΔⲆⵠⲆᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆΔⵠᐃⵠⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Bag"
            }, {
                id: 227,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆᐃⲆΔⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠΔⵠⵠᐃᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆⲆⲆΔⵠⵠᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆΔⲆΔⲆΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Lit Furnace Head"
            }, {
                id: 25,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠⵠⵠⲆᐃⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠΔⲆⲆᐃⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠΔⵠⵠⵠᐃⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⲆᐃⲆⵠⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Pixelbitie",
                name: "Test Dummy"
            }, {
                id: 41,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃⵠⲆⵠΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃᐃⵠᐃⲆᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⲆⵠΔⲆⲆⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠΔᐃⵠⵠⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Star-ver"
            }, {
                id: 43,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠᐃⲆⲆᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃⲆᐃᐃᐃᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆᐃΔⵠⵠⲆᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ΔᐃⵠⵠⲆΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Communist",
                name: "Starver Chest"
            }, {
                id: 88,
                ᐃΔᐃ: ⲆⲆ.ΔΔⲆⲆⲆΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠⲆⵠⲆᐃᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆⲆᐃᐃΔⵠΔ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⲆΔⵠᐃᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Communist",
                name: "Starver Workbench"
            }, {
                id: 121,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃⲆΔⲆᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃΔⵠⲆΔΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⲆᐃⲆᐃⲆⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⲆΔⵠⲆⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "MADBalgouthi",
                name: "Fish"
            }, {
                id: 39,
                ᐃΔᐃ: ⲆⲆ.ⲆΔⲆᐃⵠᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃⲆΔΔΔᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⲆΔⵠΔΔⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆᐃⲆⵠⲆⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Negligent4Dia",
                name: "Crab"
            }, {
                id: 40,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆⲆΔⵠΔΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃⵠᐃⵠᐃⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆᐃⲆᐃᐃⵠⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ΔΔⲆΔⵠⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Negligent4Dia",
                name: "Piranha"
            }, {
                id: 36,
                ᐃΔᐃ: ⲆⲆ.ⲆΔⵠⲆᐃⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠⵠᐃΔⵠⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆΔᐃⵠⵠⲆᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃΔⵠΔΔΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Winter Fox"
            }, {
                id: 69,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆΔΔⲆⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃΔΔⵠΔⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⵠⵠⲆΔⲆΔ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⲆⲆᐃᐃᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Zed",
                name: "Baby Foxy"
            }, {
                id: 51,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠΔᐃᐃⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔΔᐃᐃᐃᐃⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠΔⲆⲆΔⵠᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ΔᐃⵠΔⵠΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "HOWI",
                name: "Winter Bear"
            }, {
                id: 133,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃΔⲆⲆΔᐃ,
                ⲆΔⲆ: ⲆⲆ.Δᐃᐃᐃⵠᐃᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆᐃⲆᐃᐃᐃⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⲆᐃⵠΔΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Hawk"
            }, {
                id: 55,
                ᐃΔᐃ: ⲆⲆ.ᐃΔΔᐃᐃⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔΔⵠᐃⲆⵠⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃΔΔⲆⲆⵠⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃᐃΔⲆⵠΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Nice Little Yuki"
            }, {
                id: 68,
                ᐃΔᐃ: ⲆⲆ.ΔⵠΔᐃΔⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆⵠⲆⲆⲆᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠΔΔⲆΔΔⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠⲆⵠⵠΔᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Baby Yuki"
            }, {
                id: 62,
                ᐃΔᐃ: ⲆⲆ.ΔⲆⲆΔΔΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃⵠⲆᐃⵠⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔΔⵠᐃᐃⵠⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆΔΔΔⵠⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Mr. Carrot"
            }, {
                id: 56,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆⲆⵠⵠⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠΔⵠᐃΔⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⲆΔᐃᐃⲆⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠΔΔΔᐃᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Bat Limax"
            }, {
                id: 72,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆᐃⵠⲆⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆᐃᐃᐃᐃⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔΔⵠⵠΔⵠΔ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃΔⵠΔⵠⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Mr. Crate"
            }, {
                id: 73,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠᐃΔΔᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠΔΔⵠⵠᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⵠⲆᐃΔⵠΔ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⲆᐃΔⵠᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Taco4Life & eogito",
                name: "Mr. Spider"
            }, {
                id: 93,
                ᐃΔᐃ: ⲆⲆ.ΔⲆΔᐃΔᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆᐃⵠⵠⵠⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆΔⲆⵠΔΔΔ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⵠⲆΔⲆⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Anyone want to play?",
                name: "Mr. Spider 2"
            }, {
                id: 82,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠⵠⲆᐃΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔᐃⵠΔⵠΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆⲆΔⲆⵠⵠΔ,
                ΔⵠΔⵠ: ⲆⲆ.ΔΔⲆⵠᐃⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Mr. Blue Starfish"
            }, {
                id: 83,
                ᐃΔᐃ: ⲆⲆ.ⲆΔΔⲆΔⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠᐃⲆⵠΔⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⵠⲆΔⵠᐃᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠᐃⲆΔⵠΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Mr. Orange Starfish"
            }, {
                id: 84,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠⲆΔΔⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔⲆⵠⲆⲆΔⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃΔΔᐃⵠᐃⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠⵠⵠᐃᐃᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Mr. Pink Starfish"
            }, {
                id: 85,
                ᐃΔᐃ: ⲆⲆ.ᐃΔⵠⵠⵠⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠᐃᐃΔᐃᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆⲆᐃᐃΔΔⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠΔⲆΔⵠⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Mr. ShellMauve"
            }, {
                id: 86,
                ᐃΔᐃ: ⲆⲆ.ΔΔΔⲆⲆᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃⵠⲆΔⵠⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔΔᐃᐃΔᐃΔ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃᐃⵠΔᐃᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Mr. Shell Bead"
            }, {
                id: 96,
                ᐃΔᐃ: ⲆⲆ.ᐃΔᐃⵠⲆⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃᐃⲆᐃⲆᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔΔⲆΔⵠⵠⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠᐃᐃⵠΔⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Fukss",
                name: "Angry Crab"
            }, {
                id: 98,
                ᐃΔᐃ: ⲆⲆ.ᐃΔⵠⲆⵠⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠΔᐃⵠⲆⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆᐃᐃⲆⵠᐃⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆΔᐃⲆⲆⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Penguin"
            }, {
                id: 126,
                ᐃΔᐃ: ⲆⲆ.ⵠΔⲆΔΔΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔⵠᐃⵠⵠⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆᐃᐃΔⲆⲆΔ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠⲆⵠⲆⵠⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Anyone want to play?",
                name: "Mr. Boar"
            }, {
                id: 145,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠⲆⲆⵠⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ΔⲆΔⵠⲆⵠᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⲆⲆⲆΔⲆⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃΔⵠⵠᐃΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "I saw you"
            }, {
                id: 146,
                ᐃΔᐃ: ⲆⲆ.ΔⵠΔᐃⲆⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃΔᐃⵠⲆΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⵠᐃⵠΔⵠΔ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⲆᐃⲆⵠᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "It was funny"
            }, {
                id: 147,
                ᐃΔᐃ: ⲆⲆ.ⲆΔⲆΔΔΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠΔⵠⵠⵠⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆⲆΔΔᐃᐃⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃΔⲆⵠᐃⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "You can scream"
            }, {
                id: 158,
                ᐃΔᐃ: ⲆⲆ.ΔⲆⲆΔΔᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃⲆⲆⲆᐃΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⲆⲆⲆⵠᐃⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠⵠᐃⲆᐃΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Mr. Book"
            }, {
                id: 163,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆⲆΔⵠⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃΔⲆΔᐃΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⲆⵠⲆⲆⵠⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠᐃΔⵠΔⲆⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Anyone want to play?",
                name: "Mr. Mammoth"
            }, {
                id: 164,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆΔⵠⲆᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠⵠΔΔⵠⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠΔⲆⵠⵠⵠⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⲆⵠⲆⲆΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "SoOw",
                name: "Mr. Mammoth 2"
            }, {
                id: 161,
                ᐃΔᐃ: ⲆⲆ.ⲆΔⵠⲆⲆⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔⲆΔᐃΔⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆΔᐃⵠΔⲆⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆΔᐃⵠΔΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Nightmare"
            }, {
                id: 168,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃᐃⵠᐃΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔⲆⲆⲆᐃᐃᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔᐃⲆᐃⵠⵠⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠΔⲆⵠⲆⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Shiny Crystal"
            }, {
                id: 173,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆⲆΔᐃΔΔ,
                ⲆΔⲆ: ⲆⲆ.ΔΔⲆΔΔᐃᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⵠΔⵠΔⲆᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ΔΔᐃᐃΔⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Water skin"
            }, {
                id: 175,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠΔⲆⵠΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃⵠᐃΔΔⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆⵠᐃⲆΔᐃⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠⲆᐃⲆⵠⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Fall Berry Bush Starver"
            }, {
                id: 176,
                ᐃΔᐃ: ⲆⲆ.ΔⲆΔⲆΔⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆᐃᐃΔᐃⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⵠΔᐃⲆΔⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠᐃⵠⵠΔᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Christmas Berry Bush Starver"
            }, {
                id: 177,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆᐃΔΔΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆⲆᐃⲆⵠΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⲆΔΔᐃⲆⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⲆⵠⵠⵠΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Berry Bush Starver"
            }, {
                id: 182,
                ᐃΔᐃ: ⲆⲆ.ΔᐃⲆⲆᐃᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃᐃⲆⲆⵠⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⵠΔⵠᐃⵠⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠⵠᐃΔⲆⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Tamer"
            }, {
                id: 185,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆᐃⲆᐃⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃΔΔᐃⲆⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠᐃΔᐃᐃᐃΔ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃᐃⵠⵠⵠᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Tamon Wolf"
            }, {
                id: 186,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠⵠᐃⵠⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃᐃⵠΔΔⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⵠⲆΔⵠⲆᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃᐃᐃᐃⵠⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Tamon Snow Wolf"
            }, {
                id: 187,
                ᐃΔᐃ: ⲆⲆ.ⲆΔⲆⲆᐃⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠᐃⲆⲆⲆⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆᐃΔΔⲆᐃᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⵠΔΔΔΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Tamon Rabbit"
            }, {
                id: 188,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆᐃⵠⲆⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃΔⲆⵠΔᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠΔⲆⲆΔΔΔ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⵠⵠᐃⲆⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Tamon Snow Rabbit"
            }, {
                id: 189,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠⵠⲆⲆⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃⵠⵠΔⲆᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃΔⵠᐃⵠᐃᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⲆⵠᐃΔⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Tamon Bear"
            }, {
                id: 190,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃᐃᐃᐃⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆᐃᐃᐃⵠᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⲆᐃᐃᐃΔΔ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆΔⵠΔᐃⲆⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Tamon Polar Bear"
            }, {
                id: 196,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆᐃᐃΔᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠⵠᐃⵠⲆⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⲆᐃⲆΔⲆⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⵠⵠᐃᐃⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Crying Angel"
            }, {
                id: 202,
                ᐃΔᐃ: ⲆⲆ.ⲆΔᐃⵠⲆΔΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔⵠΔᐃⲆⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔΔⵠⵠᐃⵠⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆΔᐃⲆΔΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Tamon Fennec"
            }, {
                id: 207,
                ᐃΔᐃ: ⲆⲆ.ΔᐃⵠⵠⵠⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃⵠⲆΔΔΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⲆΔᐃΔᐃᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃΔⲆⲆΔⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Decay"
            }, {
                id: 212,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠⲆᐃᐃⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠΔⵠⲆΔⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆᐃᐃⵠⵠⲆⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃΔᐃⲆⲆⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Pillow"
            }, {
                id: 218,
                ᐃΔᐃ: ⲆⲆ.ΔΔⵠⲆᐃΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆΔⲆᐃᐃⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⲆⵠΔⲆⵠⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ΔΔⵠᐃΔΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Exotic"
            }, {
                id: 224,
                ᐃΔᐃ: ⲆⲆ.ⲆΔⵠⵠⵠⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔⵠⵠΔΔᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⲆᐃⵠⵠⲆⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ΔᐃΔᐃⵠᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Apple"
            }, {
                id: 225,
                ᐃΔᐃ: ⲆⲆ.ΔⲆⵠᐃⲆᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔᐃⲆΔΔⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⵠΔᐃΔᐃᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⵠⲆΔⲆᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Golden Apple"
            }, {
                id: 233,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠᐃⵠⵠⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔΔΔⵠⲆⲆⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔΔⲆⵠΔⲆΔ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆΔⵠⵠⵠᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Lava Cube"
            }, {
                id: 234,
                ᐃΔᐃ: ⲆⲆ.ΔᐃⲆΔᐃᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆⲆⵠⲆᐃᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔΔⲆᐃᐃᐃⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⲆΔᐃᐃⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Dragon Cube"
            }, {
                id: 42,
                ᐃΔᐃ: ⲆⲆ.ⲆΔⵠⲆΔⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔⲆΔⵠᐃᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆΔΔⵠⵠᐃⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⵠⲆⵠᐃⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Winter",
                name: "Will-O'-The-Wisp"
            }, {
                id: 91,
                ᐃΔᐃ: ⲆⲆ.ⵠΔⲆΔᐃΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠΔⲆΔⲆⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃᐃᐃΔΔᐃⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠᐃⲆⵠᐃᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "ExpertyAnimations",
                name: "Flame"
            }, {
                id: 26,
                ᐃΔᐃ: ⲆⲆ.ⲆΔΔⵠⵠⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔΔΔᐃᐃⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆⲆⲆΔⲆΔⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⵠⵠᐃⲆⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Be a Tree"
            }, {
                id: 38,
                ᐃΔᐃ: ⲆⲆ.ᐃΔᐃⵠΔᐃⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃᐃⵠᐃⲆΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⲆⵠΔⵠᐃⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⵠᐃΔᐃᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Winter",
                name: "Toxic Mutant"
            }, {
                id: 50,
                ᐃΔᐃ: ⲆⲆ.ΔΔⵠⲆⲆⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠⲆᐃΔΔⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⲆᐃΔΔΔⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃΔΔⲆᐃⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Communist",
                name: "Mr. Tomato"
            }, {
                id: 54,
                ᐃΔᐃ: ⲆⲆ.ΔⲆΔᐃⲆΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔⲆᐃⲆᐃᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⵠᐃⲆᐃΔΔ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆΔΔΔΔᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Mr. Mauve, the Lapa"
            }, {
                id: 57,
                ᐃΔᐃ: ⲆⲆ.ΔΔᐃΔΔⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠᐃᐃᐃΔΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⲆⲆⲆⲆΔⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⵠⲆⵠᐃΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Golden Fish"
            }, {
                id: 64,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠⲆⵠⲆⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔΔⵠⵠᐃᐃⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⲆΔⵠⵠᐃΔ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃΔⲆᐃᐃⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "LapaMauve"
            }, {
                id: 65,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃΔⲆΔΔΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠΔⵠⵠᐃΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆᐃⲆᐃⵠᐃⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⲆᐃⲆΔⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "LapaMauve "
            }, {
                id: 92,
                ᐃΔᐃ: ⲆⲆ.ⲆΔⵠⲆⵠΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃΔᐃΔΔⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⲆΔⵠⲆᐃⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⲆΔΔⵠⲆⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Mr. Burger"
            }, {
                id: 66,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃⵠⵠΔᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆⵠᐃᐃᐃⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆᐃΔⵠᐃᐃⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ΔΔᐃⲆⲆᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "pizza wa",
                name: "Tropical Starver"
            }, {
                id: 80,
                ᐃΔᐃ: ⲆⲆ.ᐃΔΔⵠⵠΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠⵠⲆΔΔⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆⲆᐃⵠᐃᐃⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆᐃⵠΔⵠᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Mr. ShellPink"
            }, {
                id: 81,
                ᐃΔᐃ: ⲆⲆ.ᐃΔⲆΔⵠⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆᐃⲆⵠᐃΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⲆⲆᐃⵠⲆⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⵠⲆᐃⲆΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Mr. OranShell"
            }, {
                id: 99,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆⲆⲆⲆᐃⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃᐃΔᐃⵠⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⵠᐃΔΔΔⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆᐃᐃΔⵠΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "eogito",
                name: "Pepe"
            }, {
                id: 100,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠᐃΔᐃⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆᐃⲆⲆⲆⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⵠⲆᐃⵠΔⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⵠⵠⲆⵠΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "fatant",
                name: "Mr. Ant"
            }, {
                id: 115,
                ᐃΔᐃ: ⲆⲆ.ΔⲆⲆⵠⲆᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠΔⲆᐃΔⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃᐃᐃⲆΔᐃΔ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⵠⲆᐃⲆⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "MADBalgouthi",
                name: "Mr. Watermelon"
            }, {
                id: 101,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠΔⲆᐃⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔⵠΔⵠΔⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠᐃⵠⵠᐃᐃⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠΔᐃΔΔⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Mr. Thornbush"
            }, {
                id: 131,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆⵠⵠᐃⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔⲆΔⵠΔᐃΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃᐃΔⵠΔⵠᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⲆΔⲆᐃⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Cthulhu"
            }, {
                id: 143,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠΔΔⵠΔΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔᐃⲆᐃᐃⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⲆⲆⵠⲆΔⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠⵠⲆᐃⵠⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "eogito",
                name: "Mr. Cactus"
            }, {
                id: 144,
                ᐃΔᐃ: ⲆⲆ.ΔⲆΔⵠΔⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠᐃΔᐃⵠᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃᐃΔᐃΔᐃΔ,
                ΔⵠΔⵠ: ⲆⲆ.ΔΔΔᐃⲆⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Momo"
            }, {
                id: 180,
                ᐃΔᐃ: ⲆⲆ.ΔᐃΔΔΔᐃⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔΔⲆⲆΔⵠΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆᐃᐃⵠᐃΔΔ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠᐃΔᐃᐃⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Scream"
            }, {
                id: 193,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆΔⲆΔⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠΔⵠΔᐃᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⵠⲆᐃᐃⲆⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃᐃᐃⲆⵠᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Tamon Dragon"
            }, {
                id: 195,
                ᐃΔᐃ: ⲆⲆ.ΔⲆᐃΔⲆⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔᐃⵠⲆᐃⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆΔⲆᐃΔΔⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⵠΔᐃᐃᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Forest Spirit"
            }, {
                id: 197,
                ᐃΔᐃ: ⲆⲆ.ΔⲆᐃᐃΔᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠⲆᐃⵠⵠᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⲆΔⵠΔᐃⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆΔⲆⵠⵠⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Evil Goat"
            }, {
                id: 199,
                ᐃΔᐃ: ⲆⲆ.ⲆΔΔⵠⵠᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃⲆⵠᐃᐃⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠᐃᐃⵠⵠⲆⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆΔⵠⵠᐃᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Rotten"
            }, {
                id: 201,
                ᐃΔᐃ: ⲆⲆ.ⲆΔⲆᐃⵠΔΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃΔΔⵠⲆΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃΔᐃΔᐃΔᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⲆᐃⲆⲆΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Fossil"
            }, {
                id: 205,
                ᐃΔᐃ: ⲆⲆ.ⲆΔⵠⵠⲆΔΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔΔⵠⲆⲆΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⵠⵠⲆᐃⲆⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ΔΔⵠⲆⲆΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Tamon Spectrum"
            }, {
                id: 210,
                ᐃΔᐃ: ⲆⲆ.ⵠᐃᐃΔⵠⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃᐃΔᐃⲆⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆⵠⵠᐃΔΔᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠᐃⵠⵠᐃⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Helpy",
                name: "Black Cat"
            }, {
                id: 214,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆΔⵠⵠᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃⲆΔΔᐃⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆΔⵠΔⲆⲆΔ,
                ΔⵠΔⵠ: ⲆⲆ.ΔᐃⵠᐃⲆⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Tamon Lynx"
            }, {
                id: 215,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃᐃᐃΔⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠᐃᐃΔΔΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠΔⵠⵠᐃᐃΔ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⲆⲆⲆΔᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Tamon Warg"
            }, {
                id: 217,
                ᐃΔᐃ: ⲆⲆ.ΔΔⵠⲆⲆΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃᐃⵠⲆⲆⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆⲆⲆⵠⲆⵠᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆΔⵠⵠΔⲆⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Tamon Menhir"
            }, {
                id: 95,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠⲆΔⲆΔΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠⲆⲆⲆΔᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃᐃⵠΔΔᐃⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⵠᐃⵠⲆᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Mr. Garlic"
            }, {
                id: 76,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆⲆⲆᐃΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃⵠᐃⲆᐃΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃᐃΔⲆᐃⲆᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⵠⲆΔΔᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Winter",
                name: "Robot Dragon"
            }, {
                id: 44,
                ᐃΔᐃ: ⲆⲆ.ΔᐃⲆᐃⲆⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠⵠᐃΔᐃⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆⵠᐃᐃᐃⵠΔ,
                ΔⵠΔⵠ: ⲆⲆ.ΔΔΔΔⲆⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Winter",
                name: "Lava Dragon Version 1"
            }, {
                id: 90,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃᐃⲆᐃΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔΔⲆⵠᐃⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆᐃᐃⵠᐃΔᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃΔⵠᐃᐃΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "ExpertyAnimations",
                name: "Lava Dragon Version 2"
            }, {
                id: 124,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠⵠΔⵠⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃⲆΔΔΔⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⲆⲆⵠⲆⲆⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⲆⲆⵠᐃΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "eogito",
                name: "Lava Dragon Version 3"
            }, {
                id: 45,
                ᐃΔᐃ: ⲆⲆ.ΔⲆΔⲆᐃᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔⵠᐃᐃⵠⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆⵠⵠᐃᐃΔⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⲆⲆΔⵠⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Sushui",
                name: "Ice Dragon Version 1"
            }, {
                id: 46,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃⲆᐃⲆᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆΔⲆⵠᐃⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔΔᐃΔⲆᐃΔ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠⵠᐃᐃⵠᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Winter",
                name: "Ice Dragon Version 2"
            }, {
                id: 108,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃᐃⵠΔⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆΔΔᐃΔⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⲆⵠᐃᐃⲆΔ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⲆΔᐃⲆΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "eogito",
                name: "Ice Dragon Version 3"
            }, {
                id: 123,
                ᐃΔᐃ: ⲆⲆ.ΔⲆⵠᐃΔⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃΔⲆⵠⲆΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃΔⵠᐃΔⵠⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⵠⵠⲆⲆΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "eogito",
                name: "Baby Dragon Version 1"
            }, {
                id: 128,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆⲆΔⲆᐃⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠΔⲆᐃᐃᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠΔⵠΔⲆⲆᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆΔⲆⲆⵠⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "MADBalgouthi",
                name: "Baby Dragon Version 2"
            }, {
                id: 125,
                ᐃΔᐃ: ⲆⲆ.ΔⵠΔⲆⵠΔΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃᐃⲆⲆᐃⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⲆⵠᐃΔᐃⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⲆΔⲆⲆᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "eogito",
                name: "Baby Lava"
            }, {
                id: 47,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆⲆⵠⲆⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃΔΔⵠⵠⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⵠΔᐃⲆⵠⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆΔⲆᐃΔᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Kraken"
            }, {
                id: 129,
                ᐃΔᐃ: ⲆⲆ.ᐃΔⵠⲆΔⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃⵠᐃⲆᐃⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆᐃΔⵠᐃᐃᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⵠⲆⲆΔᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Sandworm"
            }, {
                id: 63,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠⵠⵠⵠⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔⲆⲆⲆⲆⵠΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⵠᐃⵠⵠΔΔ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⵠⵠΔⵠᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Mr. Golden Bread"
            }, {
                id: 67,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃⵠⵠᐃⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆⵠⵠᐃΔᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⵠᐃΔᐃΔⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⵠⵠΔⵠⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "ForgottenHeroe",
                name: "Starver Ores"
            }, {
                id: 130,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃⲆΔΔⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠᐃᐃΔᐃΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⵠᐃⲆⲆΔᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠᐃΔΔΔᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Poo"
            }, {
                id: 89,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠΔΔⲆΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃⲆⵠΔᐃⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⲆΔᐃΔⵠⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ᐃⵠΔⵠⵠᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Poinet",
                name: "Volcano Starver"
            }, {
                id: 112,
                ᐃΔᐃ: ⲆⲆ.ᐃΔⵠᐃⲆⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠⵠΔᐃⲆΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔΔᐃⵠⵠΔΔ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆΔⲆⵠᐃᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "eogito",
                name: "Lava Starver"
            }, {
                id: 183,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃⵠΔᐃⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠᐃⵠΔⲆⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆΔΔⲆᐃⵠᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠΔΔΔⲆᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Revaster"
            }, {
                id: 192,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠᐃᐃⲆⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃᐃΔᐃΔⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔΔΔⲆⵠΔⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⲆᐃᐃΔᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Awakened"
            }, {
                id: 194,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆΔⲆⵠⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠⵠᐃⵠⲆᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⲆⵠⵠᐃᐃΔ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆΔΔⵠⵠᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Tamon Ice Dragon"
            }, {
                id: 236,
                ᐃΔᐃ: ⲆⲆ.ΔΔⵠᐃᐃᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃⲆⲆᐃⵠⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⲆⲆⲆΔΔⵠᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⲆᐃΔΔⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Crystal Dragon"
            }, {
                id: 208,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆᐃⲆⲆΔΔ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠᐃΔΔᐃⲆ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⲆΔΔΔΔⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠᐃΔⵠᐃᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Bone Dragon"
            }, {
                id: 216,
                ᐃΔᐃ: ⲆⲆ.ΔᐃΔⵠⵠⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃᐃⲆⵠᐃⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⲆⲆⵠᐃΔⵠ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆΔⵠᐃΔΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Tamon Warg Ghost"
            }, {
                id: 226,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆⵠⵠⵠΔΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠⲆⵠᐃⲆΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ᐃⲆⲆΔⵠΔⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠⵠⵠⵠᐃⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Cursed"
            }, {
                id: 48,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠᐃⵠΔΔΔ,
                ⲆΔⲆ: ⲆⲆ.Δⵠᐃᐃᐃᐃⵠ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⲆⵠΔⵠΔᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ΔⲆⵠⲆⲆΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠΔΔⲆⵠⵠ,
                ⵠᐃⵠ: "eogito",
                name: "Robot"
            }, {
                id: 110,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠⵠᐃᐃⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃⲆΔᐃⲆΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠΔᐃΔΔΔⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⵠⲆΔⵠᐃⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠΔΔⲆⵠⵠ,
                ⵠᐃⵠ: "pizza wa",
                name: "Blue Butterfly"
            }, {
                id: 157,
                ᐃΔᐃ: ⲆⲆ.ΔᐃⵠᐃⵠⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆΔΔᐃⲆΔ,
                ⲆⲆⵠⲆ: ⲆⲆ.ΔⵠⲆⲆⵠⵠᐃ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆⵠⲆᐃΔΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠΔΔⲆⵠⵠ,
                ⵠᐃⵠ: "eogito",
                name: "Yrifox"
            }, {
                id: 165,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆⵠᐃΔΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔΔⲆΔᐃᐃ,
                ⲆⲆⵠⲆ: ⲆⲆ.ⵠⲆⲆᐃⵠᐃⲆ,
                ΔⵠΔⵠ: ⲆⲆ.ⲆᐃΔΔΔⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠΔΔⲆⵠⵠ,
                ⵠᐃⵠ: "OmarJr13",
                name: "Blob Skin"
            }],
            ΔΔΔⵠ: [{
                id: 0,
                ᐃΔᐃ: ⲆⲆ.ᐃΔΔΔⵠⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃΔⵠΔⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠΔΔⲆΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Bag 1"
            }, {
                id: 1,
                ᐃΔᐃ: ⲆⲆ.ΔⵠⲆⵠᐃⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃᐃᐃⲆΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠΔΔⲆΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Old Bag"
            }, {
                id: 2,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠⵠⲆΔᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃΔΔⵠⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Bag 2"
            }, {
                id: 3,
                ᐃΔᐃ: ⲆⲆ.ΔΔⲆⵠΔⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃⲆΔᐃⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Bag 3"
            }, {
                id: 4,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆⵠᐃᐃⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔⵠⵠⲆᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Bag 4"
            }, {
                id: 5,
                ᐃΔᐃ: ⲆⲆ.ᐃΔΔΔΔΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃⲆⲆᐃⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Bag 5"
            }, {
                id: 11,
                ᐃΔᐃ: ⲆⲆ.ⲆΔᐃⲆⵠΔΔ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃⲆⵠⵠΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Wood Pickaxe Bag"
            }, {
                id: 19,
                ᐃΔᐃ: ⲆⲆ.ΔᐃΔΔⵠᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃⵠⵠΔΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Starve.io ",
                name: "Wood Carrier"
            }, {
                id: 37,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆΔⵠⲆᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠΔⵠⲆⲆⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Bag 6"
            }, {
                id: 39,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃⵠᐃⲆⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠᐃⲆᐃⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Bag with Wooden Swords"
            }, {
                id: 44,
                ᐃΔᐃ: ⲆⲆ.ΔⲆⵠᐃⲆⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠᐃΔⵠⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Communist",
                name: "Big Bag"
            }, {
                id: 7,
                ᐃΔᐃ: ⲆⲆ.ⵠΔᐃⲆΔᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠᐃᐃᐃⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Communist",
                name: "Bag 6"
            }, {
                id: 8,
                ᐃΔᐃ: ⲆⲆ.ΔΔᐃΔΔⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔⲆΔᐃᐃΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Easter Bag"
            }, {
                id: 9,
                ᐃΔᐃ: ⲆⲆ.ΔᐃᐃᐃᐃⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔᐃⲆⵠᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Star Bag"
            }, {
                id: 10,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠⵠᐃⵠⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃΔΔⲆⲆⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Winter Bag"
            }, {
                id: 20,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠᐃⲆΔΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠⵠᐃⲆΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io ",
                name: "Stone Carrier"
            }, {
                id: 24,
                ᐃΔᐃ: ⲆⲆ.ᐃΔΔⵠⲆᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔⵠΔᐃΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Stone Pickaxe Bag"
            }, {
                id: 6,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠⵠⲆΔⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃᐃᐃΔᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Communist",
                name: "Bag Camouflage"
            }, {
                id: 38,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃᐃΔⵠⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃΔⲆᐃⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Bag with Stone Swords"
            }, {
                id: 54,
                ᐃΔᐃ: ⲆⲆ.ⲆΔᐃⵠΔᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠΔΔᐃᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Cow Bag"
            }, {
                id: 59,
                ᐃΔᐃ: ⲆⲆ.ⵠᐃΔⵠᐃⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆⵠΔΔᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "CrysTal",
                name: "Starver Bag"
            }, {
                id: 62,
                ᐃΔᐃ: ⲆⲆ.ⲆΔΔΔⵠⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃᐃΔΔᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "CrysTal",
                name: "Crystal Sky Bag"
            }, {
                id: 71,
                ᐃΔᐃ: ⲆⲆ.ΔᐃⲆⲆⲆⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃΔΔⲆΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Portable Furnace"
            }, {
                id: 78,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆΔᐃⵠⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔΔᐃΔᐃᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Crate Bag"
            }, {
                id: 13,
                ᐃΔᐃ: ⲆⲆ.ΔⲆⵠⵠΔΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔΔΔΔΔⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Honey Pot"
            }, {
                id: 21,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠᐃⲆⲆᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆⵠᐃⲆⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io ",
                name: "Gold Carrier"
            }, {
                id: 30,
                ᐃΔᐃ: ⲆⲆ.ΔⲆΔΔᐃᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃⵠⵠⵠⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Gold Pickaxe Bag"
            }, {
                id: 29,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆⲆⲆⲆΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠⵠΔⵠᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Ariel",
                name: "Mr and Mrs Bakers"
            }, {
                id: 41,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠⲆᐃΔⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆᐃⵠΔᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Bag with Golden Swords"
            }, {
                id: 47,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆⵠᐃⵠΔΔ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃΔΔⲆΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Explorer Bag"
            }, {
                id: 51,
                ᐃΔᐃ: ⲆⲆ.ⲆΔᐃⵠᐃⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔᐃⲆⵠΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Bamboo Bag"
            }, {
                id: 53,
                ᐃΔᐃ: ⲆⲆ.ⵠᐃⲆΔⲆⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆᐃⵠΔᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Mummy Bag"
            }, {
                id: 58,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠᐃΔⵠⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠΔⲆΔⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "MADBalgouthi",
                name: "Watermelon Bag"
            }, {
                id: 60,
                ᐃΔᐃ: ⲆⲆ.ΔⵠᐃⲆⵠⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆΔⵠⲆΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Garlic Bag"
            }, {
                id: 61,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃⵠⲆⲆΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆᐃᐃⲆⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Pumpkin Bag"
            }, {
                id: 64,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆΔᐃᐃⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆΔΔΔⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "upfiz",
                name: "Oil Barel bag"
            }, {
                id: 67,
                ᐃΔᐃ: ⲆⲆ.ΔᐃΔΔᐃⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆⵠⲆΔⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Tree Bag"
            }, {
                id: 70,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆᐃⵠⲆΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆⲆΔⵠΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Lit Portable Furnace"
            }, {
                id: 72,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠᐃⵠⵠΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠⵠⲆⵠΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Christmas Berry Bush Bag"
            }, {
                id: 73,
                ᐃΔᐃ: ⲆⲆ.ⲆΔᐃⲆΔⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃΔᐃᐃⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Berry Bush Bag"
            }, {
                id: 74,
                ᐃΔᐃ: ⲆⲆ.ⵠΔΔⲆⲆⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆⵠⲆΔⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Fall Berry Bush Bag"
            }, {
                id: 76,
                ᐃΔᐃ: ⲆⲆ.ⵠᐃᐃΔⲆⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆⲆⲆᐃⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Reclaimed Bag"
            }, {
                id: 14,
                ᐃΔᐃ: ⲆⲆ.ΔⵠΔᐃⲆⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆΔᐃⲆⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "a Rabbit in my Bag"
            }, {
                id: 15,
                ᐃΔᐃ: ⲆⲆ.ΔⲆΔᐃⲆⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠΔᐃⲆΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Bird's nest"
            }, {
                id: 16,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆΔⵠᐃΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠᐃⵠᐃΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "a Fish on your Back"
            }, {
                id: 17,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠᐃᐃⲆⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃᐃΔⲆⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "a Squirrel in my Bag"
            }, {
                id: 22,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃⲆΔᐃᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠᐃᐃⲆΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io ",
                name: "Diamond Carrier"
            }, {
                id: 12,
                ᐃΔᐃ: ⲆⲆ.ⵠᐃᐃᐃΔᐃⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠⵠⲆⲆⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Resources Bag"
            }, {
                id: 32,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠⲆΔᐃⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠΔⲆⲆⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Diamond Pickaxe Bag"
            }, {
                id: 40,
                ᐃΔᐃ: ⲆⲆ.ᐃΔᐃΔΔⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠⵠΔΔΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Bag with Diamond Swords"
            }, {
                id: 45,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆⵠⲆᐃⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃᐃⵠΔΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "eogito",
                name: "My Cake Bag"
            }, {
                id: 46,
                ᐃΔᐃ: ⲆⲆ.ᐃΔⵠᐃΔΔΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔΔΔᐃΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "eogito",
                name: "My Christmas Cake Bag"
            }, {
                id: 52,
                ᐃΔᐃ: ⲆⲆ.ⲆΔⵠⵠᐃⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔⲆⲆᐃᐃΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "MADBalgouthi",
                name: "Fish Bag"
            }, {
                id: 65,
                ᐃΔᐃ: ⲆⲆ.ΔΔⲆᐃΔᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆᐃⵠⵠᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Cloud Bag"
            }, {
                id: 68,
                ᐃΔᐃ: ⲆⲆ.ΔΔΔᐃᐃΔΔ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃᐃᐃᐃⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Bee Bag"
            }, {
                id: 77,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃΔΔΔⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠⲆᐃⵠΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Bag and Bedroll"
            }, {
                id: 80,
                ᐃΔᐃ: ⲆⲆ.ⲆΔⵠⵠᐃⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔΔᐃᐃⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Peasant's Bag"
            }, {
                id: 81,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃⵠⵠⵠΔΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆⵠΔⲆⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Probably Stolen Bag"
            }, {
                id: 48,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠᐃᐃᐃᐃⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔΔΔⲆΔΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "fatant",
                name: "Natural Bag"
            }, {
                id: 23,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃⲆⲆⵠⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠΔⵠΔⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io ",
                name: "Amethyst Carrier"
            }, {
                id: 25,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆⲆᐃⵠⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠⲆⵠΔⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "eogito",
                name: "Amethyst Pickaxe Bag"
            }, {
                id: 28,
                ᐃΔᐃ: ⲆⲆ.ⲆΔᐃⲆΔΔΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃΔⲆΔΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Your Baby"
            }, {
                id: 33,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃᐃⵠΔᐃⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔΔⲆⵠᐃⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "pizza wa",
                name: "Tropical Bag"
            }, {
                id: 43,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠΔΔᐃⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃΔΔᐃⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "eogito",
                name: "Bag with Amethyst Swords"
            }, {
                id: 35,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃⵠΔΔⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃⲆⲆΔΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "eogito",
                name: "Ice Bag"
            }, {
                id: 50,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠⵠⲆⲆⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠⵠᐃΔΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Thornbush Bag"
            }, {
                id: 56,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃᐃΔΔⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆᐃⲆᐃΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "eogito",
                name: "Autumn Bag"
            }, {
                id: 57,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆⲆΔΔⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔⵠΔᐃΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Dino Egg Bag"
            }, {
                id: 66,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃⲆΔⲆΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆᐃⵠⲆᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "pizza wa",
                name: "Magic Cloud Bag"
            }, {
                id: 69,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆᐃΔᐃⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃⲆⲆⲆⲆⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "pizza wa",
                name: "Chest Bag"
            }, {
                id: 75,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆⲆᐃᐃⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ΔΔⵠᐃⲆᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Tamon Spectum Bag"
            }, {
                id: 79,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠⵠⵠᐃΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃΔⲆᐃⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Winter Peasant's Bag"
            }, {
                id: 31,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆΔΔᐃΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃⲆⵠᐃᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io ",
                name: "Reidite Carrier"
            }, {
                id: 18,
                ᐃΔᐃ: ⲆⲆ.ᐃΔⵠΔⲆΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠⵠⵠⵠΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Winter",
                name: "Lava Bag"
            }, {
                id: 49,
                ᐃΔᐃ: ⲆⲆ.ΔⲆᐃΔⵠᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔΔⲆᐃᐃⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "eogito",
                name: "Lava Bag 2"
            }, {
                id: 36,
                ᐃΔᐃ: ⲆⲆ.ᐃΔⵠⲆᐃᐃⵠ,
                ⲆΔⲆ: ⲆⲆ.Ⲇⵠⵠᐃⵠⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "eogito",
                name: "Dragon Bag"
            }, {
                id: 55,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆⲆᐃⵠΔΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃΔⲆΔΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "eogito",
                name: "Winter Ice Bag"
            }, {
                id: 26,
                ᐃΔᐃ: ⲆⲆ.ⲆΔⲆⵠᐃΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔⲆΔᐃⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "eogito",
                name: "Reidite Pickaxe Bag"
            }, {
                id: 27,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆΔΔᐃΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃΔⵠⲆΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Octopus Bowl"
            }, {
                id: 34,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆΔⲆⵠᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆⵠᐃⵠⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Cave Bag"
            }, {
                id: 42,
                ᐃΔᐃ: ⲆⲆ.ⲆΔⲆⲆⲆⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆΔⲆⵠⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "eogito",
                name: "Bag with Reidite Swords"
            }, {
                id: 63,
                ᐃΔᐃ: ⲆⲆ.ΔⵠᐃⲆⲆⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃⵠᐃⲆⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "eogito",
                name: "Engineer Bag"
            }],
            ᐃΔᐃⵠΔ: [{
                id: 0,
                ᐃΔᐃ: ⲆⲆ.ᐃΔΔᐃΔⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃᐃΔⲆᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠΔΔⲆΔ,
                ⵠᐃⵠ: "eogito",
                name: "Wooden Dead Box"
            }, {
                id: 1,
                ᐃΔᐃ: ⲆⲆ.ΔⵠᐃᐃⵠΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔⵠΔⲆΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠΔΔⲆΔ,
                ⵠᐃⵠ: "eogito",
                name: "Hidden item"
            }, {
                id: 2,
                ᐃΔᐃ: ⲆⲆ.ΔⵠΔᐃⵠΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔΔⵠᐃΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Wooden Box 1"
            }, {
                id: 3,
                ᐃΔᐃ: ⲆⲆ.ⵠΔᐃⲆᐃΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃΔⵠⵠᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Wooden Box 2"
            }, {
                id: 4,
                ᐃΔᐃ: ⲆⲆ.ΔⵠⲆᐃⵠⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔⲆΔⲆⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Wooden Box 3"
            }, {
                id: 5,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃΔᐃᐃⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠⲆⲆᐃΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Broken Wooden Box"
            }, {
                id: 6,
                ᐃΔᐃ: ⲆⲆ.ⵠΔⲆΔᐃᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆΔⵠᐃⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Wooden Box"
            }, {
                id: 7,
                ᐃΔᐃ: ⲆⲆ.ᐃΔᐃⵠᐃⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃΔⲆⵠⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Wooden Battle Box"
            }, {
                id: 8,
                ᐃΔᐃ: ⲆⲆ.ΔΔΔⲆⲆⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔΔⲆᐃⲆΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Wooden Box with a Cross"
            }, {
                id: 9,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆⲆⵠⲆᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔᐃΔⵠΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Wooden Box with Bubbles"
            }, {
                id: 10,
                ᐃΔᐃ: ⲆⲆ.ⵠΔⵠⵠΔⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔⲆΔΔⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Wooden Box with Eyes"
            }, {
                id: 11,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠᐃᐃⲆⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠⲆⵠⲆΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Dark Wooden Box"
            }, {
                id: 38,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃⵠⲆΔΔΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃⵠⵠⲆⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Weddlz",
                name: "Noob Box"
            }, {
                id: 12,
                ᐃΔᐃ: ⲆⲆ.ΔᐃⵠⵠΔⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆᐃΔⵠΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Wooden and Stone Box"
            }, {
                id: 14,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠᐃⵠΔⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆⲆᐃⵠΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Star Box 1"
            }, {
                id: 15,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠᐃⲆᐃⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃᐃⲆΔⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Star Box 2"
            }, {
                id: 27,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆⲆᐃⲆⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔΔᐃⵠΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Flower Box"
            }, {
                id: 46,
                ᐃΔᐃ: ⲆⲆ.ⵠΔᐃΔΔⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃΔΔᐃΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "MADBalgouthi",
                name: "Blue Box"
            }, {
                id: 75,
                ᐃΔᐃ: ⲆⲆ.ⵠΔⵠⵠΔᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃⲆⲆᐃⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Night Stars Crate"
            }, {
                id: 19,
                ᐃΔᐃ: ⲆⲆ.ΔᐃⲆΔΔΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃⵠΔΔⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Beehive"
            }, {
                id: 13,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆᐃⲆⵠⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃᐃⵠᐃⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Wooden and Golden Box"
            }, {
                id: 21,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠΔⲆⲆᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃⵠⲆⵠⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Gravestone"
            }, {
                id: 25,
                ᐃΔᐃ: ⲆⲆ.ΔᐃΔΔᐃⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠⵠᐃⲆⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Communist",
                name: "Sky Box"
            }, {
                id: 29,
                ᐃΔᐃ: ⲆⲆ.ΔⵠⵠΔⵠΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔⲆⵠΔΔⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Winter",
                name: "Golden Box"
            }, {
                id: 34,
                ᐃΔᐃ: ⲆⲆ.ΔⲆⲆᐃⲆⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃΔⲆⵠⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Communist",
                name: "Water Crate"
            }, {
                id: 35,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆΔⵠᐃⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔΔⵠᐃⵠᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Communist",
                name: "Glass Crate"
            }, {
                id: 70,
                ᐃΔᐃ: ⲆⲆ.ΔⵠⵠᐃᐃᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔⲆⵠᐃⵠᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "CrysTal",
                name: "Crystal Sky Box"
            }, {
                id: 74,
                ᐃΔᐃ: ⲆⲆ.ⲆΔΔⵠⲆᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔΔⲆᐃᐃⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Reclaimed Crate"
            }, {
                id: 77,
                ᐃΔᐃ: ⲆⲆ.ⵠΔΔⵠⵠⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔΔᐃⲆΔᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Workplace Accident"
            }, {
                id: 16,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆⲆⲆΔⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆⲆⵠΔⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Wooden and Diamond Box"
            }, {
                id: 18,
                ᐃΔᐃ: ⲆⲆ.ⲆΔᐃⲆⲆⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠⲆᐃᐃᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Don't Hit Me"
            }, {
                id: 26,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆⵠΔⲆᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃΔⵠΔⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Underwater Box"
            }, {
                id: 31,
                ᐃΔᐃ: ⲆⲆ.ΔΔⲆⵠΔⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃⲆᐃᐃΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Communist",
                name: "Items Pile"
            }, {
                id: 32,
                ᐃΔᐃ: ⲆⲆ.ΔΔΔⲆⲆⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃⵠᐃΔⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Cake Box"
            }, {
                id: 33,
                ᐃΔᐃ: ⲆⲆ.ⲆΔᐃᐃⵠⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃⵠᐃΔᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Christmas Cake Box"
            }, {
                id: 36,
                ᐃΔᐃ: ⲆⲆ.ᐃΔⲆΔⵠᐃⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠⲆⲆⵠᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Fukss",
                name: "Crab Box"
            }, {
                id: 42,
                ᐃΔᐃ: ⲆⲆ.ᐃΔⲆΔⲆΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠⵠⵠΔΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "MADBalgouthi",
                name: "Fishing Box"
            }, {
                id: 72,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃᐃⵠΔⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃⲆΔΔⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Storage Machine"
            }, {
                id: 22,
                ᐃΔᐃ: ⲆⲆ.ΔⵠⵠΔⲆⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔⵠⵠⲆⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Let me out of here"
            }, {
                id: 17,
                ᐃΔᐃ: ⲆⲆ.ΔⲆⲆⲆΔᐃΔ,
                ⲆΔⲆ: ⲆⲆ.Ⲇⵠᐃⵠⵠᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "eogito",
                name: "Wooden and Amethyst Box"
            }, {
                id: 24,
                ᐃΔᐃ: ⲆⲆ.ᐃΔᐃΔⲆⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆⵠΔⲆⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Aquarium"
            }, {
                id: 28,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆⲆᐃΔΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠⲆᐃⵠⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "eogito",
                name: "Gift Box"
            }, {
                id: 40,
                ᐃΔᐃ: ⲆⲆ.ⲆΔⵠᐃᐃⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔΔⲆⵠΔᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "MADBalgouthi",
                name: "Open Watermelon Box"
            }, {
                id: 41,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆᐃΔⲆⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠΔⵠΔᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "MADBalgouthi",
                name: "Watermelon Box"
            }, {
                id: 39,
                ᐃΔᐃ: ⲆⲆ.ΔΔⲆⵠᐃᐃⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔᐃⵠⵠΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Thornbush Box"
            }, {
                id: 43,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠΔⲆᐃᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ΔⲆᐃⲆᐃⲆⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "eogito",
                name: "Rabbit in the Box"
            }, {
                id: 47,
                ᐃΔᐃ: ⲆⲆ.ⵠΔΔⵠⲆΔΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃΔⵠΔᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Garlic Plot"
            }, {
                id: 48,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠⵠⲆᐃΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠⵠⵠᐃᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Pumpkin Plot"
            }, {
                id: 78,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠⲆᐃⲆᐃⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔⲆᐃᐃᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Tamon Spectrum Portal"
            }, {
                id: 45,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆⵠⲆⵠΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠᐃᐃⵠⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "eogito",
                name: "Autumn Box"
            }, {
                id: 44,
                ᐃΔᐃ: ⲆⲆ.ⲆΔⲆⵠⵠⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠΔᐃⵠᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "eogito",
                name: "Winter Box"
            }, {
                id: 20,
                ᐃΔᐃ: ⲆⲆ.ΔᐃⵠᐃᐃⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠⵠᐃΔⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "eogito",
                name: "Metal and Reidite Box"
            }, {
                id: 23,
                ᐃΔᐃ: ⲆⲆ.ΔⲆᐃⵠΔΔΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠΔᐃⵠΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Kraken Box"
            }, {
                id: 30,
                ᐃΔᐃ: ⲆⲆ.ΔⵠΔⲆΔⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃΔⵠⲆΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Winter",
                name: "Lava Box"
            }, {
                id: 37,
                ᐃΔᐃ: ⲆⲆ.ΔΔⲆᐃⲆⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃⵠᐃⵠⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "eogito",
                name: "Lava Box 2"
            }, {
                id: 49,
                ᐃΔᐃ: ⲆⲆ.ΔⵠⵠᐃⲆᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔᐃᐃⵠᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Box of the Rabbit"
            }, {
                id: 50,
                ᐃΔᐃ: ⲆⲆ.ΔᐃⲆⲆⲆⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃΔⵠⵠⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Box of the Wolf"
            }, {
                id: 51,
                ᐃΔᐃ: ⲆⲆ.ᐃΔⵠᐃΔⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔⲆⲆⵠⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Box of the Spider"
            }, {
                id: 52,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆΔⵠⲆᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔⲆⲆⵠⲆⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Box of the Hawk"
            }, {
                id: 53,
                ᐃΔᐃ: ⲆⲆ.ⵠᐃᐃᐃᐃᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠⲆᐃΔᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Box of the Bear"
            }, {
                id: 54,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆⵠⵠⲆΔΔ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠⲆΔⲆᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Box of the Fox"
            }, {
                id: 55,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆΔᐃⲆᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃΔᐃᐃΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Box of the Baby Mammoth"
            }, {
                id: 56,
                ᐃΔᐃ: ⲆⲆ.ΔΔΔΔᐃΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆᐃⵠᐃᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Box of the Mammoth"
            }, {
                id: 57,
                ᐃΔᐃ: ⲆⲆ.ΔⵠΔⵠⵠⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠⲆΔⵠⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Box of the Sandworm"
            }, {
                id: 58,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠΔᐃᐃΔΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆⲆΔᐃⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Box of the Vulture"
            }, {
                id: 59,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠΔᐃⵠⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠΔⵠᐃᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Box of the Kraken"
            }, {
                id: 60,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠⲆᐃᐃᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠᐃⵠᐃⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Box of the Piranha"
            }, {
                id: 61,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆⵠΔΔⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔᐃⲆⲆᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Box of the Baby Dragon"
            }, {
                id: 62,
                ᐃΔᐃ: ⲆⲆ.ⵠΔⵠⲆΔΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠΔⵠᐃΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Box of the Baby Lava"
            }, {
                id: 63,
                ᐃΔᐃ: ⲆⲆ.ΔⵠΔⵠΔⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔᐃᐃΔⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Box of the Dragon"
            }, {
                id: 64,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠⵠⲆᐃⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠΔΔⵠᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Box of the Penguin"
            }, {
                id: 65,
                ᐃΔᐃ: ⲆⲆ.ΔⵠᐃⲆⲆⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠⲆⲆⵠⲆⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Box of the Lava Dragon"
            }, {
                id: 66,
                ᐃΔᐃ: ⲆⲆ.ΔⲆⵠⲆᐃᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆⲆⵠᐃᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Box of the Boar"
            }, {
                id: 67,
                ᐃΔᐃ: ⲆⲆ.ΔΔⲆⵠⵠᐃⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃΔᐃΔΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Box of the Fire mob"
            }, {
                id: 68,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠΔᐃⲆⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠᐃᐃⵠᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Box of the Crab"
            }, {
                id: 69,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠⵠΔᐃⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃΔⵠΔᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Box of the King Crab"
            }, {
                id: 71,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠᐃΔⵠⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆⲆΔⵠⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "eogito",
                name: "Dragon Box"
            }, {
                id: 73,
                ᐃΔᐃ: ⲆⲆ.ⵠᐃⵠⲆΔⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔΔᐃⵠᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Rekt"
            }, {
                id: 76,
                ᐃΔᐃ: ⲆⲆ.ΔⵠᐃᐃⲆΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠⲆⲆΔⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Sleeping Tamon Dragon"
            }],
            ⲆΔⵠⲆᐃ: [{
                id: 0,
                ᐃΔᐃ: ⲆⲆ.ᐃΔΔΔᐃᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔⲆᐃⲆΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠΔΔⲆΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Book 1"
            }, {
                id: 1,
                ᐃΔᐃ: ⲆⲆ.ΔⲆᐃⲆᐃⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔΔⲆⵠⵠᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Book 2"
            }, {
                id: 2,
                ᐃΔᐃ: ⲆⲆ.ⵠᐃⵠᐃΔΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆⲆⲆⵠᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Book 3"
            }, {
                id: 3,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆⲆᐃⵠᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃⲆᐃⵠⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Book 4"
            }, {
                id: 4,
                ᐃΔᐃ: ⲆⲆ.ΔⲆⵠⵠⵠⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠⲆⵠΔⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Damaged Book 1"
            }, {
                id: 18,
                ᐃΔᐃ: ⲆⲆ.ⲆΔᐃΔⲆΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠᐃᐃΔⲆⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "SeveR",
                name: "Damaged Book 2"
            }, {
                id: 5,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠⲆΔᐃᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠⲆⲆΔⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Doctorpus",
                name: "Scroll"
            }, {
                id: 6,
                ᐃΔᐃ: ⲆⲆ.ΔΔⲆΔⲆᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆⵠⲆⲆᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Doctorpus",
                name: "Clipboard"
            }, {
                id: 7,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠⲆⵠᐃΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔΔⵠⵠᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Seed Book"
            }, {
                id: 20,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆΔᐃⲆᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃΔᐃᐃΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Camo Book"
            }, {
                id: 24,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆⲆΔⲆᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃᐃⵠⲆᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Communist",
                name: "Stone Tablet"
            }, {
                id: 47,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃᐃΔᐃⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆⲆᐃⵠⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Reclaimed Book"
            }, {
                id: 10,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠⲆΔⵠΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠᐃᐃΔⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Star Book"
            }, {
                id: 8,
                ᐃΔᐃ: ⲆⲆ.ⲆΔⲆⲆⲆⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃⵠᐃΔⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Gold Book"
            }, {
                id: 15,
                ᐃΔᐃ: ⲆⲆ.ΔⲆΔⵠⵠΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃᐃΔⵠᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Old Mysterious Paper"
            }, {
                id: 17,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃΔᐃⲆΔΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃΔΔⲆᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Gold Engraving"
            }, {
                id: 25,
                ᐃΔᐃ: ⲆⲆ.Δᐃⵠⵠⵠⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠΔⵠᐃᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "fatant",
                name: "Ant Book"
            }, {
                id: 32,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃⲆⲆⲆⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠⵠⵠᐃᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Mummy Book"
            }, {
                id: 37,
                ᐃΔᐃ: ⲆⲆ.ΔⵠΔᐃΔⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆΔΔᐃⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Garlic Book"
            }, {
                id: 38,
                ᐃΔᐃ: ⲆⲆ.ΔΔΔⵠⲆⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔⲆᐃΔΔᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Pumpkin Book"
            }, {
                id: 39,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠⲆΔΔᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠᐃᐃⲆⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Christmas Tree Book"
            }, {
                id: 11,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃⵠⵠᐃⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃΔᐃⲆᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Diamond Book"
            }, {
                id: 9,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠⵠⵠΔⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ΔⲆⲆᐃΔⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Obscure Book"
            }, {
                id: 16,
                ᐃΔᐃ: ⲆⲆ.ᐃΔΔⲆⵠⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆΔΔᐃΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Rolled Parchment"
            }, {
                id: 22,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠⵠⵠⵠᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆⲆⵠΔΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Cake Book"
            }, {
                id: 23,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆᐃᐃⵠΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠΔⲆΔΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Christmas Cake Book"
            }, {
                id: 30,
                ᐃΔᐃ: ⲆⲆ.ΔᐃΔᐃⲆⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔᐃΔⵠⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "MADBalgouthi",
                name: "Fish Book"
            }, {
                id: 31,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃᐃⲆⲆⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃⵠΔⵠⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "CrysTal",
                name: "Once upon a time"
            }, {
                id: 48,
                ᐃΔᐃ: ⲆⲆ.ΔᐃΔⲆⲆⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔⲆᐃⲆⲆⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Chrono Clock"
            }, {
                id: 49,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠΔΔᐃⲆΔ,
                ⲆΔⲆ: ⲆⲆ.Δᐃᐃⵠⵠᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Recipe Book"
            }, {
                id: 13,
                ᐃΔᐃ: ⲆⲆ.ΔᐃᐃⵠⲆⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃΔⲆⵠᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "eogito",
                name: "Amethyst Book"
            }, {
                id: 28,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃⵠⲆⲆᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔᐃⲆⵠⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "eogito",
                name: "Paint Pallet"
            }, {
                id: 29,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠⵠⲆᐃⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃⲆⵠⵠᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "CrysTal",
                name: "Watermelon Book"
            }, {
                id: 27,
                ᐃΔᐃ: ⲆⲆ.ΔᐃᐃⵠΔΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔΔΔⵠᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Thornbush Book"
            }, {
                id: 35,
                ᐃΔᐃ: ⲆⲆ.ⵠᐃⲆΔⲆΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔᐃⵠⲆΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Menu"
            }, {
                id: 36,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆⲆΔⲆΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃΔⲆΔᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "CrysTal",
                name: "Lover Letter"
            }, {
                id: 40,
                ᐃΔᐃ: ⲆⲆ.ΔⲆΔᐃⲆᐃⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆⵠᐃΔΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Fresh-Baked Cookies"
            }, {
                id: 41,
                ᐃΔᐃ: ⲆⲆ.ΔⵠⵠΔᐃᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆⲆᐃΔᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Inside, there is just a book."
            }, {
                id: 45,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆⲆⵠᐃᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃⲆⵠΔᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Crafting Machine"
            }, {
                id: 33,
                ᐃΔᐃ: ⲆⲆ.ᐃΔᐃΔᐃⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠⲆᐃⲆᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "eogito",
                name: "Winter Book"
            }, {
                id: 34,
                ᐃΔᐃ: ⲆⲆ.ⲆΔᐃᐃᐃΔΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔᐃᐃᐃΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "eogito",
                name: "Autumn Book"
            }, {
                id: 14,
                ᐃΔᐃ: ⲆⲆ.ⲆΔⲆᐃⵠⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔΔⵠⵠᐃΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "eogito",
                name: "Reidite Book"
            }, {
                id: 12,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠⵠⵠᐃⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆⵠᐃⵠΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Winter",
                name: "Lava Book"
            }, {
                id: 26,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠΔⵠΔΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔᐃᐃΔⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "eogito",
                name: "Lava Book 2"
            }, {
                id: 19,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃᐃⲆⲆᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔⵠΔⲆᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Winter",
                name: "Ocean Mystery"
            }, {
                id: 21,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆⲆⲆΔⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠΔΔⵠⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "eogito",
                name: "Dragon Book"
            }, {
                id: 42,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆᐃΔⵠⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆⲆⲆⲆΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "eogito",
                name: "Engineer Book"
            }, {
                id: 43,
                ᐃΔᐃ: ⲆⲆ.ΔΔΔΔⵠᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃⲆⲆⲆⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "eogito",
                name: "Nightmare Book"
            }, {
                id: 44,
                ᐃΔᐃ: ⲆⲆ.ᐃΔⵠⲆΔⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠⵠⲆΔⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "aloner",
                name: "Mystery Book"
            }, {
                id: 46,
                ᐃΔᐃ: ⲆⲆ.ⵠᐃᐃᐃΔᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠᐃⲆⵠⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Cursed Book"
            }],
            ΔΔⵠᐃⲆ: [{
                id: 0,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆⲆⵠᐃⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆⲆⵠᐃⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠΔΔⲆΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Nothing"
            }, {
                id: 2,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃᐃⵠΔⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠⵠⵠⵠⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠΔΔⲆΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Pink Cheeks"
            }, {
                id: 3,
                ᐃΔᐃ: ⲆⲆ.ΔⵠⵠⵠΔⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠᐃᐃᐃⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠΔΔⲆΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Heart"
            }, {
                id: 1,
                ᐃΔᐃ: ⲆⲆ.ΔⲆⲆΔⲆᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠᐃⵠΔⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠΔΔⲆΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Bandage 1"
            }, {
                id: 4,
                ᐃΔᐃ: ⲆⲆ.ΔⲆΔⲆΔⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃᐃⵠΔⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠΔΔⲆΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Flower 1"
            }, {
                id: 5,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃᐃΔⲆΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔⵠⲆΔⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Bow 1"
            }, {
                id: 6,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃⵠⲆΔⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃⵠⲆᐃⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Bandage 2"
            }, {
                id: 7,
                ᐃΔᐃ: ⲆⲆ.ΔᐃⲆΔᐃΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆᐃⲆⵠⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Flower 2"
            }, {
                id: 8,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠⵠⲆᐃⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠΔⵠΔⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Bandage 3"
            }, {
                id: 36,
                ᐃΔᐃ: ⲆⲆ.ΔᐃⲆᐃⵠⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.Ⲇⵠᐃⵠᐃᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Foliage"
            }, {
                id: 59,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆⵠⲆΔᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠᐃⲆᐃⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Peaceful"
            }, {
                id: 67,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃᐃΔⵠΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠⲆΔⵠⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Sparkles"
            }, {
                id: 68,
                ᐃΔᐃ: ⲆⲆ.ⵠᐃᐃΔΔⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠΔⵠⵠⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Luxury"
            }, {
                id: 69,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃΔⲆᐃⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠᐃᐃⵠΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ΔⲆΔᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Snow Flakes Crown"
            }, {
                id: 17,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃΔΔⵠⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆΔᐃΔⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Glasses 1"
            }, {
                id: 10,
                ᐃΔᐃ: ⲆⲆ.ᐃΔᐃΔⵠᐃⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔᐃᐃᐃⲆΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Bow 2"
            }, {
                id: 11,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆⵠⲆᐃᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆᐃⵠⵠⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Little Stars"
            }, {
                id: 12,
                ᐃΔᐃ: ⲆⲆ.ΔⲆⵠᐃᐃⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠⲆⲆⲆᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Pirate Eye Patch 1"
            }, {
                id: 44,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃΔⲆⲆⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔⲆᐃᐃΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Pirate Eye Patch 2"
            }, {
                id: 23,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆⵠΔΔΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠⵠⲆⵠⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Clown nose"
            }, {
                id: 16,
                ᐃΔᐃ: ⲆⲆ.ΔΔΔΔⵠⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ΔΔΔⲆᐃΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Eye Patch"
            }, {
                id: 30,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠΔⲆᐃⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠⵠΔᐃᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Flower 3"
            }, {
                id: 38,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠᐃⵠⵠⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃⵠΔⵠⲆⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Winter",
                name: "False Nose"
            }, {
                id: 74,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠΔᐃᐃΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃᐃⵠᐃΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Red Cloth"
            }, {
                id: 75,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠⵠΔᐃᐃⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃⲆⲆⵠΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Blue Cloth"
            }, {
                id: 79,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆᐃΔΔⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃᐃⵠΔⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Transparent Mask"
            }, {
                id: 89,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃᐃⵠᐃⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠᐃⲆᐃⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Anyone want to play?",
                name: "Starve.io Anime"
            }, {
                id: 94,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆⲆΔⵠᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆΔΔᐃᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Ant",
                name: "Hero Mask"
            }, {
                id: 100,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃΔⲆΔⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠᐃΔⲆⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "This starver is mad"
            }, {
                id: 104,
                ᐃΔᐃ: ⲆⲆ.ΔⲆⵠⲆᐃⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃΔⲆⵠⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Scars"
            }, {
                id: 106,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃⵠⲆⲆⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆΔⲆⵠⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "In Search of Intelligence"
            }, {
                id: 109,
                ᐃΔᐃ: ⲆⲆ.ᐃΔⵠᐃᐃⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠᐃⲆⲆⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Reclaimed Bandage"
            }, {
                id: 111,
                ᐃΔᐃ: ⲆⲆ.ΔᐃⲆΔΔⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠⲆΔⲆᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Unwrap Starver for Gift"
            }, {
                id: 15,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃᐃⵠⵠΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠΔΔⵠΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Star Glasses"
            }, {
                id: 21,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆΔΔᐃⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃΔⲆⵠᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Great-aunt's Glasses"
            }, {
                id: 24,
                ᐃΔᐃ: ⲆⲆ.ⲆΔᐃⲆⲆⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃᐃⲆᐃᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Little Starver"
            }, {
                id: 22,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠⲆⵠᐃⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃΔⵠⲆΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Little Glasses"
            }, {
                id: 13,
                ᐃΔᐃ: ⲆⲆ.ⲆΔⲆⵠΔⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔⲆⵠⵠⵠᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Flower Chain"
            }, {
                id: 29,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆᐃΔᐃΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠᐃⵠᐃᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Horns"
            }, {
                id: 31,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠⲆᐃⲆⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆⵠΔΔⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Golden Flower"
            }, {
                id: 40,
                ᐃΔᐃ: ⲆⲆ.ⲆΔⲆⵠⵠΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠᐃΔΔᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Sleeping Mask"
            }, {
                id: 57,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠᐃᐃⲆⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃⵠΔⵠΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Taco4Life",
                name: "Fish on your head"
            }, {
                id: 58,
                ᐃΔᐃ: ⲆⲆ.ⵠᐃⲆⲆᐃⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔⲆⵠΔᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Rose"
            }, {
                id: 91,
                ᐃΔᐃ: ⲆⲆ.ΔΔⲆⲆΔΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔⵠΔᐃᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "upfiz",
                name: "Grey Scarf"
            }, {
                id: 92,
                ᐃΔᐃ: ⲆⲆ.ⵠΔΔⲆⵠⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔᐃᐃⲆᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "upfiz",
                name: "Black Scarf"
            }, {
                id: 93,
                ᐃΔᐃ: ⲆⲆ.ⵠᐃᐃᐃⵠⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠⲆⲆⲆᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "upfiz",
                name: "Skull Mask"
            }, {
                id: 95,
                ᐃΔᐃ: ⲆⲆ.ᐃΔΔΔΔⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃᐃΔⲆᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Golden Monocle"
            }, {
                id: 96,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠΔᐃΔΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃΔᐃⵠⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "A simple instruction"
            }, {
                id: 102,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠᐃΔΔΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃᐃⵠⲆᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Garland"
            }, {
                id: 103,
                ᐃΔᐃ: ⲆⲆ.ᐃΔⵠΔⵠⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃⵠΔᐃΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "The Doormat"
            }, {
                id: 108,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃⵠᐃⲆᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆᐃⲆⲆᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Copium Tanks"
            }, {
                id: 117,
                ᐃΔᐃ: ⲆⲆ.ⵠᐃΔΔⵠΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠⲆⲆⵠΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Eyelashes"
            }, {
                id: 118,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃⲆⲆⵠⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔⵠΔᐃⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ᐃⵠⵠᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Helmet Prototype"
            }, {
                id: 9,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃⵠⲆᐃΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔΔᐃⲆⲆⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Fancy Glasses"
            }, {
                id: 25,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠᐃⵠⵠⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔΔᐃⵠΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Medecin Mask"
            }, {
                id: 14,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠᐃⵠⵠⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃⵠᐃΔⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Mr. Mayor"
            }, {
                id: 19,
                ᐃΔᐃ: ⲆⲆ.ΔⲆᐃΔᐃⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆⲆⲆⲆΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Sunglasses 2"
            }, {
                id: 28,
                ᐃΔᐃ: ⲆⲆ.ΔⲆᐃⵠⵠⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃΔⲆᐃⲆⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "pizza wa",
                name: "Starfish"
            }, {
                id: 37,
                ᐃΔᐃ: ⲆⲆ.ᐃΔΔⲆⵠⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆΔⵠᐃⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Berry"
            }, {
                id: 39,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆᐃᐃᐃΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠΔΔⵠᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Flake"
            }, {
                id: 43,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆⲆΔⵠᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆⵠⵠⲆΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Leaf "
            }, {
                id: 61,
                ᐃΔᐃ: ⲆⲆ.ΔⲆᐃᐃⲆᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔΔΔΔΔᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "A sword in your head"
            }, {
                id: 62,
                ᐃΔᐃ: ⲆⲆ.ΔⵠᐃⵠΔᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ΔⲆⵠⲆᐃΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Winter Scarf"
            }, {
                id: 64,
                ᐃΔᐃ: ⲆⲆ.ⵠΔⵠⵠᐃᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠΔⲆⵠᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Winter Scarf 2"
            }, {
                id: 66,
                ᐃΔᐃ: ⲆⲆ.ΔᐃⵠΔΔΔⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔΔⵠⵠΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "eogito",
                name: "Winter Scarf 3"
            }, {
                id: 70,
                ᐃΔᐃ: ⲆⲆ.ΔᐃⲆⵠΔⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆⵠΔΔⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Mask with animal tracks"
            }, {
                id: 71,
                ᐃΔᐃ: ⲆⲆ.ⵠᐃΔⲆⵠⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔΔΔᐃᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Spring Mask"
            }, {
                id: 72,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠⲆⵠᐃᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔᐃᐃⲆᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Pink Mask"
            }, {
                id: 73,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠⵠⲆΔⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔᐃⲆᐃᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Blue Mask"
            }, {
                id: 76,
                ᐃΔᐃ: ⲆⲆ.ΔᐃⲆⵠⲆᐃⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠⲆᐃΔⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Military Mask"
            }, {
                id: 77,
                ᐃΔᐃ: ⲆⲆ.ΔⵠΔᐃⲆᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃΔⵠᐃΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Orange Mask"
            }, {
                id: 78,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆⵠⵠᐃᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔⲆᐃⵠΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "White and Red Points Mask"
            }, {
                id: 80,
                ᐃΔᐃ: ⲆⲆ.ΔΔⲆΔᐃΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠΔⵠⵠⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Stick out your tongue Mask"
            }, {
                id: 81,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃⲆⵠᐃᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠΔⵠⲆΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Two Teeth Mask"
            }, {
                id: 82,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆΔⵠᐃⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃⵠⲆᐃⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Make-up Mask"
            }, {
                id: 83,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆᐃⲆⲆᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆⲆⵠⲆⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Sad Mask"
            }, {
                id: 84,
                ᐃΔᐃ: ⲆⲆ.ᐃΔⵠᐃⲆⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠⵠᐃΔΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Happy Mask"
            }, {
                id: 90,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃΔⵠⲆⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠⵠⲆΔᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "aloner",
                name: "Blood"
            }, {
                id: 101,
                ᐃΔᐃ: ⲆⲆ.ΔⲆⲆᐃⲆⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔⵠⵠⲆᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Axed Plans"
            }, {
                id: 105,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠΔⵠⲆⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆⵠⲆΔᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Saddle"
            }, {
                id: 113,
                ᐃΔᐃ: ⲆⲆ.ΔⲆΔⲆΔᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠⲆⲆⲆᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "I see"
            }, {
                id: 114,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠⲆᐃᐃᐃⵠ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠᐃⵠᐃΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "I have no body and I must dress"
            }, {
                id: 115,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠⲆⵠᐃΔΔ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠᐃᐃΔᐃⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆΔᐃᐃ,
                ⵠᐃⵠ: "Starve.io",
                name: "Cursed Crown"
            }, {
                id: 27,
                ᐃΔᐃ: ⲆⲆ.ⵠᐃΔⵠΔΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆⲆᐃΔⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Clown Face"
            }, {
                id: 20,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠⲆⲆⲆΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃᐃⵠⵠⵠⲆⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Sunglasses 3"
            }, {
                id: 32,
                ᐃΔᐃ: ⲆⲆ.ᐃΔⲆⵠⵠⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠⵠᐃⵠΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "eogito",
                name: "Engineer's Glasses"
            }, {
                id: 33,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃΔⲆⲆᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃⵠⲆᐃⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "eogito",
                name: "Engineer's Monocle"
            }, {
                id: 34,
                ᐃΔᐃ: ⲆⲆ.ⲆΔΔᐃΔᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠⵠⲆᐃΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Mauve's butt"
            }, {
                id: 41,
                ᐃΔᐃ: ⲆⲆ.ⵠⲆⵠⲆⵠⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔΔⲆⵠⵠΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "eogito",
                name: "Lapa Head"
            }, {
                id: 42,
                ᐃΔᐃ: ⲆⲆ.ⵠΔⲆᐃⵠΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆᐃΔⲆᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "eogito",
                name: "Lapa Head "
            }, {
                id: 85,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃΔΔᐃⲆᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃᐃⲆΔΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Mask and Glasses"
            }, {
                id: 110,
                ᐃΔᐃ: ⲆⲆ.ΔᐃⲆⲆΔⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔΔⲆⵠⲆΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.Ⲇᐃᐃⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "Tamon Spectrum Pet"
            }, {
                id: 60,
                ᐃΔᐃ: ⲆⲆ.ΔᐃⵠΔΔΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃⲆⲆᐃⲆΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Jason"
            }, {
                id: 26,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆⵠⵠᐃⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔⲆᐃᐃⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Devil Horns"
            }, {
                id: 18,
                ᐃΔᐃ: ⲆⲆ.ΔⲆⵠᐃΔⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔⲆΔΔΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Big Boss"
            }, {
                id: 35,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆⲆᐃⲆⵠⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠⵠⵠΔᐃⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Baby Kraken"
            }, {
                id: 63,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃⵠⲆΔᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆⲆⵠᐃⲆΔᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "eogito",
                name: "Deer Antlers"
            }, {
                id: 65,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠΔᐃᐃᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔΔᐃΔⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "eogito",
                name: "Baby Dragon on your head"
            }, {
                id: 86,
                ᐃΔᐃ: ⲆⲆ.ⵠΔⲆⲆᐃⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔⲆⵠΔᐃⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Gaz Mask and Glasses"
            }, {
                id: 87,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆⵠΔⵠⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔᐃⲆΔⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Pink Gaz Mask and Glasses"
            }, {
                id: 88,
                ᐃΔᐃ: ⲆⲆ.ⵠⵠⵠⵠⵠⲆΔ,
                ⲆΔⲆ: ⲆⲆ.ΔΔΔᐃᐃⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "eogito",
                name: "Engineer Glasses"
            }, {
                id: 97,
                ᐃΔᐃ: ⲆⲆ.ᐃⲆⵠⵠⵠⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔⲆΔⵠΔᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Jarred Horns"
            }, {
                id: 98,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠΔⵠᐃⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔⲆⲆΔⵠⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Curved Horns"
            }, {
                id: 99,
                ᐃΔᐃ: ⲆⲆ.ⲆΔΔᐃᐃᐃⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠᐃΔⲆⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Evil Goat Horns"
            }, {
                id: 107,
                ᐃΔᐃ: ⲆⲆ.ΔⵠⵠⵠⲆΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠⲆΔⵠⲆⲆᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Decorative Earmuffs"
            }, {
                id: 112,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠΔΔⲆᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ᐃΔⵠⵠⲆⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Tamon Dragon Pet"
            }, {
                id: 116,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃⵠᐃⲆⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ᐃⵠᐃᐃΔᐃΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⲆⵠⵠΔ,
                ⵠᐃⵠ: "Starve.io",
                name: "Blanket"
            }, {
                id: 45,
                ᐃΔᐃ: ⲆⲆ.ΔΔᐃⵠΔΔᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃᐃⵠⲆΔⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠΔΔⵠⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "More than Level 5",
                level: 5
            }, {
                id: 46,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠΔⵠΔΔⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆⵠⲆⵠΔⲆⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠΔΔⵠⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "More than Level 10",
                level: 10
            }, {
                id: 47,
                ᐃΔᐃ: ⲆⲆ.ⵠΔᐃⲆⲆᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃΔⵠᐃΔΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠΔΔⵠⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "More than Level 15",
                level: 15
            }, {
                id: 48,
                ᐃΔᐃ: ⲆⲆ.ⲆⲆΔⲆⲆΔΔ,
                ⲆΔⲆ: ⲆⲆ.ⲆΔⵠⲆᐃⵠⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠΔΔⵠⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "More than Level 20",
                level: 20
            }, {
                id: 49,
                ᐃΔᐃ: ⲆⲆ.ⲆⵠΔⲆⵠⲆⲆ,
                ⲆΔⲆ: ⲆⲆ.ΔᐃⲆΔⲆⲆⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠΔΔⵠⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "More than Level 25",
                level: 25
            }, {
                id: 50,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠⵠΔⲆᐃΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔⲆⲆⵠΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠΔΔⵠⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "More than Level 30",
                level: 30
            }, {
                id: 51,
                ᐃΔᐃ: ⲆⲆ.ᐃⵠᐃⲆⵠⵠⵠ,
                ⲆΔⲆ: ⲆⲆ.ΔⵠᐃΔⲆⵠΔ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠΔΔⵠⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "More than Level 35",
                level: 35
            }, {
                id: 52,
                ᐃΔᐃ: ⲆⲆ.ᐃᐃᐃⵠᐃᐃᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃᐃΔⲆⵠᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠΔΔⵠⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "More than Level 40",
                level: 40
            }, {
                id: 53,
                ᐃΔᐃ: ⲆⲆ.ΔⵠΔⲆᐃᐃⲆ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔⵠΔᐃᐃⵠ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠΔΔⵠⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "More than Level 45",
                level: 45
            }, {
                id: 54,
                ᐃΔᐃ: ⲆⲆ.ΔⲆⵠⵠᐃⵠΔ,
                ⲆΔⲆ: ⲆⲆ.ⵠΔᐃᐃⵠⵠⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠΔΔⵠⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "More than Level 50",
                level: 50
            }, {
                id: 55,
                ᐃΔᐃ: ⲆⲆ.ᐃΔⵠⲆΔⵠᐃ,
                ⲆΔⲆ: ⲆⲆ.ⵠᐃᐃⵠⲆΔⲆ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠΔΔⵠⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "More than Level 55",
                level: 55
            }, {
                id: 56,
                ᐃΔᐃ: ⲆⲆ.ⲆᐃᐃⲆΔⲆⵠ,
                ⲆΔⲆ: ⲆⲆ.ⲆᐃᐃᐃΔᐃᐃ,
                ΔⲆⵠ: ⲆⲆⵠ.ⵠΔΔⵠⵠ,
                ⵠᐃⵠ: "Starve.io",
                name: "More than Level 60",
                level: 60
            }]
        };
        mw.ⲆᐃⲆⵠΔΔⵠ = ΔⵠᐃᐃΔⲆⵠ(ⲆΔⲆⵠ.ⵠᐃⲆΔᐃ, 21);
        mw.ⲆⵠⵠᐃⲆⲆⵠ = ΔⵠᐃᐃΔⲆⵠ(ⲆΔⲆⵠ.ⵠᐃⲆΔᐃ, 20);
        ΔⲆ[255] = [];
        ΔⲆ[7] = [];
        ΔⲆ[250] = [];
        ΔⲆ[28] = [];
        ΔⲆ[29] = [];
        ΔⲆ[796] = [];
        for (var a = 0; a < ⲆΔⲆⵠ.ⵠᐃⲆΔᐃ.length; a++) {
            ΔⲆ[255][a] = [ⲆΔⲆⵠ.ⵠᐃⲆΔᐃ[a].ᐃΔᐃ, ⲆΔⲆⵠ.ⵠᐃⲆΔᐃ[a].ⲆΔⲆ];
            ΔⲆ[7][a] = [ⲆΔⲆⵠ.ⵠᐃⲆΔᐃ[a].ⲆⲆⵠⲆ, ⲆΔⲆⵠ.ⵠᐃⲆΔᐃ[a].ΔⵠΔⵠ];
        }
        for (a = 0; a < ⲆΔⲆⵠ.ⲆΔⵠⲆᐃ.length; a++) {
            ΔⲆ[28][a] = [ⲆΔⲆⵠ.ⲆΔⵠⲆᐃ[a].ᐃΔᐃ, ⲆΔⲆⵠ.ⲆΔⵠⲆᐃ[a].ⲆΔⲆ];
        }
        for (a = 0; ⲆΔⲆⵠ.ᐃΔᐃⵠΔ.length > a; a++) {
            ΔⲆ[250][a] = [ⲆΔⲆⵠ.ᐃΔᐃⵠΔ[a].ᐃΔᐃ, ⲆΔⲆⵠ.ᐃΔᐃⵠΔ[a].ⲆΔⲆ];
        }
        for (a = 0; a < ⲆΔⲆⵠ.ΔΔΔⵠ.length; a++) {
            ΔⲆ[29][a] = [ⲆΔⲆⵠ.ΔΔΔⵠ[a].ᐃΔᐃ, ⲆΔⲆⵠ.ΔΔΔⵠ[a].ⲆΔⲆ];
        }
        for (a = 0; ⲆΔⲆⵠ.ΔΔⵠᐃⲆ.length > a; a++) {
            ΔⲆ[796][a] = [ⲆΔⲆⵠ.ΔΔⵠᐃⲆ[a].ᐃΔᐃ, ⲆΔⲆⵠ.ΔΔⵠᐃⲆ[a].ⲆΔⲆ];
        }
    };
    const Jt = 0;
    function Kt(a, b, c, d) {
        if (b) {
            a.fillStyle = b;
            a.fill();
        }
        if (c) {
            a.lineWidth = d;
            a.strokeStyle = c;
            a.stroke();
        }
    }
    function Lt(b, c, d, e, f, g) {
        if (g * 2 > e) {
            g = e / 2;
        }
        if (f < g * 2) {
            g = f / 2;
        }
        if (g < 0) {
            g = 0;
        }
        b.beginPath();
        b.moveTo(c + g, d);
        b.arcTo(c + e, d, c + e, d + f, g);
        b.arcTo(c + e, d + f, c, d + f, g);
        b.arcTo(c, d + f, c, d, g);
        b.arcTo(c, d, c + e, d, g);
        b.closePath();
    }
    const Mt = 17;
    function Nt(a, b, c, d) {
        a.beginPath();
        a.arc(b, c, d, 0, Math.PI * 2);
    }
    const eb = 3;
    const ib = 8;
    function tb(a, b, c, d, e) {
        a.beginPath();
        a.lineCap = "round";
        a.arc(b, c, d, 0, e * (Math.PI * 2));
    }
    const nb = 4;
    function ob(b, c, d, e) {
        var f = Math.PI * 2 / c;
        b.beginPath();
        var g = [{
            x: d,
            y: 0
        }];
        var a = [];
        for (var i = 1; i < c; i++) {
            g.push({
                x: d * Math.sin(i * f),
                y: d * Math.cos(i * f)
            });
            var j = g.length;
            a.push(ⲆⵠΔᐃ.ⲆⵠⲆΔⵠΔⵠ(g[j - 2], g[j - 1]));
        }
        a.push(ⲆⵠΔᐃ.ⲆⵠⲆΔⵠΔⵠ(g[g.length - 1], g[0]));
        var k = a[a.length - 1];
        b.moveTo(k.x, k.y);
        for (i = 0; c > i; i++) {
            b.arcTo(g[i].x, g[i].y, a[i].x, a[i].y, e);
        }
        b.closePath();
    }
    function ab(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = Math.sqrt(b.width * b.width + b.height * b.height);
        d2 = e / 2;
        c.width = e;
        c.height = e;
        d.translate(d2, d2);
        d.rotate(a);
        d.drawImage(b, -b.width / 2, -b.height / 2);
        return c;
    }
    function rb(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = Math.floor(b * 28);
        var g = Math.floor(b * 20);
        e.font = g + "px Baloo Paaji";
        var a = b * 8;
        var h = e.measureText(c).width + a * 2;
        d.width = h;
        d.height = f;
        Lt(e, 0, 0, h, f, b * 10);
        e.globalAlpha = 0.5;
        Kt(e, "#000");
        e.globalAlpha = 1;
        e.textBaseline = "middle";
        e.font = g + "px Baloo Paaji";
        e.beginPath();
        e.fillStyle = "#FFF";
        e.fillText(c, a, f / 2);
        return d;
    }
    const sb = 15;
    function hb(c, e) {
        var f = document.createElement("canvas");
        var i = f.getContext("2d");
        var j = c * 120;
        var k = c * 110;
        var a = j / 2;
        var m = k / 2;
        var n = c * 20;
        var h = c * 112;
        var l = c * 82;
        var g = h / 2;
        var o = l / 2;
        var b = c * 4;
        f.width = j;
        f.height = k;
        i.globalAlpha = 1;
        i.translate(a, m);
        Lt(i, -g, -o, h, l, n);
        Kt(i, e, e, b);
        return f;
    }
    const lb = 7;
    function gb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 264;
        d.height = a * 246;
        e.translate(0, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 54);
        e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
        e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
        e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
        e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
        e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
        e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
        e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
        e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
        e.closePath();
        Kt(e, c[0]);
        e.translate(0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 54);
        e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
        e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
        e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
        e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
        e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
        e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
        e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
        e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
        e.closePath();
        Kt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 121, a * 102);
        e.bezierCurveTo(a * 111, a * 80, a * 110, a * 66, a * 108, a * 51);
        e.bezierCurveTo(a * 119, a * 65, a * 129, a * 85, a * 135, a * 99);
        e.bezierCurveTo(a * 142, a * 67, a * 146, a * 60, a * 152, a * 50);
        e.bezierCurveTo(a * 154, a * 71, a * 152, a * 85, a * 149, a * 104);
        e.bezierCurveTo(a * 166, a * 88, a * 175, a * 83, a * 188, a * 78);
        e.bezierCurveTo(a * 179, a * 91, a * 170, a * 103, a * 160, a * 112);
        e.bezierCurveTo(a * 186, a * 107, a * 191, a * 107, a * 204, a * 108);
        e.bezierCurveTo(a * 195, a * 114, a * 179, a * 120, a * 163, a * 123);
        e.bezierCurveTo(a * 183, a * 130, a * 186, a * 135, a * 192, a * 140);
        e.bezierCurveTo(a * 179, a * 141, a * 164, a * 139, a * 153, a * 135);
        e.bezierCurveTo(a * 158, a * 145, a * 163, a * 159, a * 165, a * 177);
        e.bezierCurveTo(a * 154, a * 166, a * 145, a * 153, a * 138, a * 139);
        e.bezierCurveTo(a * 133, a * 155, a * 125, a * 170, a * 117, a * 182);
        e.bezierCurveTo(a * 116, a * 160, a * 119, a * 151, a * 124, a * 138);
        e.bezierCurveTo(a * 107, a * 150, a * 95, a * 156, a * 82, a * 159);
        e.bezierCurveTo(a * 94, a * 140, a * 101, a * 136, a * 113, a * 128);
        e.bezierCurveTo(a * 78, a * 123, a * 75, a * 121, a * 67, a * 118);
        e.bezierCurveTo(a * 85, a * 112, a * 94, a * 112, a * 111, a * 113);
        e.bezierCurveTo(a * 89, a * 97, a * 85, a * 93, a * 78, a * 82);
        e.bezierCurveTo(a * 92, a * 85, a * 101, a * 90, a * 121, a * 102);
        e.closePath();
        Kt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 103);
        e.bezierCurveTo(a * 111, a * 112, a * 117, a * 136, a * 140, a * 130);
        e.bezierCurveTo(a * 151, a * 126, a * 156, a * 115, a * 155, a * 107);
        e.bezierCurveTo(a * 155, a * 96, a * 154, a * 94, a * 148, a * 94);
        e.bezierCurveTo(a * 141, a * 94, a * 146, a * 104, a * 136, a * 104);
        e.closePath();
        Kt(e, c[3], c[4], a * 4);
        return d;
    }
    const ub = 9;
    const bb = 4;
    function db(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 70;
        d.height = a * 70;
        e.globalAlpha = 0.5;
        Nt(e, a * 26, a * 26, a * 9);
        Kt(e, c[0]);
        Nt(e, a * 56, a * 36, a * 9);
        Kt(e, c[1]);
        Nt(e, a * 40, a * 50, a * 9);
        Kt(e, c[2]);
        e.globalAlpha = 1;
        Nt(e, a * 26, a * 26, a * 5);
        Kt(e, c[0]);
        Nt(e, a * 56, a * 36, a * 5);
        Kt(e, c[1]);
        Nt(e, a * 40, a * 50, a * 5);
        Kt(e, c[2]);
        return d;
    }
    function vb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 22;
        d.height = a * 22;
        e.globalAlpha = 0.4;
        Nt(e, a * 11, a * 11, a * 10);
        Kt(e, c[0]);
        e.globalAlpha = 0.7;
        Nt(e, a * 11, a * 11, a * 7);
        Kt(e, c[0]);
        e.globalAlpha = 1;
        Nt(e, a * 11, a * 11, a * 4);
        Kt(e, c[0]);
        return d;
    }
    function mb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 247;
        e.save();
        e.translate(a * 69.5, a * 145);
        Lt(e, a * -8.5, a * -63, a * 17, a * 127, a * 1);
        e.restore();
        Kt(e, c[0]);
        e.save();
        e.translate(a * 183, a * 145);
        Lt(e, a * -8, a * -63, a * 16, a * 126, a * 1);
        e.restore();
        Kt(e, c[0]);
        e.save();
        e.translate(a * 123.5, a * 62.5);
        e.rotate(6.28);
        Lt(e, a * -84.5, a * -25.5, a * 169, a * 51, a * 5);
        e.restore();
        Kt(e, c[2], c[1], a * 6);
        e.save();
        e.translate(a * 123.5, a * 118);
        e.rotate(6.24);
        Lt(e, a * -85.5, a * -24, a * 169, a * 48, a * 5);
        e.restore();
        Kt(e, c[3], c[1], a * 6);
        e.save();
        e.translate(a * 122, a * 177.5);
        e.rotate(6.32);
        Lt(e, a * -84, a * -23.5, a * 169, a * 47, a * 5);
        e.restore();
        Kt(e, c[2], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 37, a * 157);
        e.bezierCurveTo(a * 49, a * 160, a * 49, a * 160, a * 61, a * 163);
        e.bezierCurveTo(a * 49.5, a * 165.5, a * 49.5, a * 165.5, a * 38, a * 168);
        e.closePath();
        Kt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 205, a * 175);
        e.bezierCurveTo(a * 192.5, a * 180, a * 192.5, a * 180, a * 180, a * 185);
        e.bezierCurveTo(a * 193, a * 188, a * 193, a * 188, a * 206, a * 191);
        e.closePath();
        Kt(e, c[1]);
        return d;
    }
    const cb = 0;
    function pb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 191;
        d.height = a * 153;
        e.globalAlpha = 0.5;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 97.49996948242188, a * 95.12844848632812);
        Lt(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
        e.restore();
        Kt(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 97.49996948242188, a * 95.12844848632812);
        Lt(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
        e.restore();
        Kt(e, c[1], c[2], a * 4);
        e.globalCompositeOperation = "destination-out";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26.999969482421875, a * 50.850677490234375);
        e.bezierCurveTo(a * 46.499969482421875, a * 64.85067749023438, a * 46.499969482421875, a * 64.85067749023438, a * 65.99996948242188, a * 78.85067749023438);
        e.bezierCurveTo(a * 80.99996948242188, a * 87.85067749023438, a * 105.99996948242188, a * 82.85067749023438, a * 114.99996948242188, a * 80.85067749023438);
        e.bezierCurveTo(a * 130.99996948242188, a * 69.85067749023438, a * 152.99996948242188, a * 70.85067749023438, a * 166.99996948242188, a * 67.85067749023438);
        e.bezierCurveTo(a * 156.99996948242188, a * 52.850677490234375, a * 156.99996948242188, a * 52.850677490234375, a * 146.99996948242188, a * 37.850677490234375);
        e.bezierCurveTo(a * 101.49996948242188, a * 37.350677490234375, a * 101.49996948242188, a * 37.350677490234375, a * 55.999969482421875, a * 36.850677490234375);
        e.closePath();
        Kt(e, c[2], c[3], a * 4);
        e.globalCompositeOperation = "source-over";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 40.999969482421875, a * 59.850677490234375);
        e.bezierCurveTo(a * 41.999969482421875, a * 50.850677490234375, a * 47.999969482421875, a * 47.850677490234375, a * 56.999969482421875, a * 49.850677490234375);
        e.bezierCurveTo(a * 65.99996948242188, a * 41.850677490234375, a * 76.99996948242188, a * 42.850677490234375, a * 90.99996948242188, a * 47.850677490234375);
        e.bezierCurveTo(a * 94.99996948242188, a * 42.850677490234375, a * 104.99996948242188, a * 42.850677490234375, a * 114.99996948242188, a * 47.850677490234375);
        e.bezierCurveTo(a * 131.99996948242188, a * 42.850677490234375, a * 142.99996948242188, a * 48.850677490234375, a * 145.99996948242188, a * 56.850677490234375);
        e.bezierCurveTo(a * 160.99996948242188, a * 63.850677490234375, a * 154.99996948242188, a * 69.85067749023438, a * 155.99996948242188, a * 70.85067749023438);
        e.bezierCurveTo(a * 141.99996948242188, a * 71.85067749023438, a * 141.99996948242188, a * 71.85067749023438, a * 127.99996948242188, a * 72.85067749023438);
        e.bezierCurveTo(a * 110.99996948242188, a * 83.85067749023438, a * 107.99996948242188, a * 82.85067749023438, a * 90.99996948242188, a * 85.85067749023438);
        e.bezierCurveTo(a * 70.99996948242188, a * 83.85067749023438, a * 64.99996948242188, a * 79.85067749023438, a * 53.999969482421875, a * 70.85067749023438);
        e.closePath();
        Kt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 33.999969482421875, a * 65.85067749023438);
        e.bezierCurveTo(a * 36.999969482421875, a * 59.850677490234375, a * 34.999969482421875, a * 60.850677490234375, a * 39.999969482421875, a * 59.850677490234375);
        e.bezierCurveTo(a * 47.999969482421875, a * 61.850677490234375, a * 62.999969482421875, a * 76.85067749023438, a * 74.99996948242188, a * 79.85067749023438);
        e.bezierCurveTo(a * 93.99996948242188, a * 85.85067749023438, a * 111.99996948242188, a * 83.85067749023438, a * 124.99996948242188, a * 70.85067749023438);
        e.bezierCurveTo(a * 129.99996948242188, a * 67.85067749023438, a * 145.99996948242188, a * 65.85067749023438, a * 159.99996948242188, a * 67.85067749023438);
        e.bezierCurveTo(a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 75.85067749023438);
        e.bezierCurveTo(a * 146.99996948242188, a * 72.85067749023438, a * 144.99996948242188, a * 75.85067749023438, a * 143.99996948242188, a * 82.85067749023438);
        e.bezierCurveTo(a * 144.99996948242188, a * 86.85067749023438, a * 140.99996948242188, a * 90.85067749023438, a * 137.99996948242188, a * 86.85067749023438);
        e.bezierCurveTo(a * 139.99996948242188, a * 72.85067749023438, a * 135.99996948242188, a * 72.85067749023438, a * 133.99996948242188, a * 82.85067749023438);
        e.bezierCurveTo(a * 127.99996948242188, a * 88.85067749023438, a * 124.99996948242188, a * 70.85067749023438, a * 116.99996948242188, a * 86.85067749023438);
        e.bezierCurveTo(a * 110.99996948242188, a * 91.85067749023438, a * 96.99996948242188, a * 81.85067749023438, a * 89.99996948242188, a * 90.85067749023438);
        e.bezierCurveTo(a * 85.99996948242188, a * 92.85067749023438, a * 81.99996948242188, a * 95.85067749023438, a * 76.99996948242188, a * 86.85067749023438);
        e.bezierCurveTo(a * 67.99996948242188, a * 93.85067749023438, a * 67.99996948242188, a * 91.85067749023438, a * 60.999969482421875, a * 79.85067749023438);
        e.bezierCurveTo(a * 53.999969482421875, a * 71.85067749023438, a * 52.999969482421875, a * 72.85067749023438, a * 46.999969482421875, a * 77.85067749023438);
        e.bezierCurveTo(a * 41.999969482421875, a * 78.85067749023438, a * 42.999969482421875, a * 69.85067749023438, a * 33.999969482421875, a * 65.85067749023438);
        e.closePath();
        Kt(e, c[5], c[6], a * 4);
        Nt(e, a * 68, a * 111.29513549804688, a * 15);
        Kt(e, c[7], c[8], a * 4);
        Nt(e, a * 123, a * 111.29510498046875, a * 15);
        Kt(e, c[7], c[8], a * 4);
        Nt(e, a * 63, a * 106, a * 5);
        Kt(e, c[9]);
        Nt(e, a * 118, a * 106, a * 5);
        Kt(e, c[9]);
        return d;
    }
    function Cb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 191;
        d.height = a * 153;
        e.globalAlpha = 0.5;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 96.49996948242188, a * 66.79510498046875);
        e.rotate(0);
        Lt(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
        e.restore();
        Kt(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 96.49996948242188, a * 66.79510498046875);
        e.rotate(0);
        Lt(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
        e.restore();
        Kt(e, c[1], c[2], a * 4);
        e.translate(a * 2, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 119, a * 28);
        e.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
        e.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
        e.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
        e.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
        e.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
        e.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
        e.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
        e.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
        e.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
        e.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
        e.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
        e.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
        e.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
        e.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
        e.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
        e.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
        e.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
        e.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
        e.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
        e.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
        e.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
        e.closePath();
        Kt(e, c[3], c[4], a * 4);
        return d;
    }
    function Tb(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 191;
        c.height = a * 153;
        d.save();
        d.translate(a * 96.49996948242188, a * 66.79510498046875);
        Lt(d, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
        d.restore();
        Kt(d, b[0], b[0], a * 4);
        d.translate(a * 2, 0);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 119, a * 28);
        d.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
        d.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
        d.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
        d.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
        d.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
        d.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
        d.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
        d.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
        d.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
        d.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
        d.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
        d.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
        d.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
        d.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
        d.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
        d.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
        d.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
        d.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
        d.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
        d.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
        d.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
        d.closePath();
        Kt(d, b[0], b[0], a * 4);
        d.save();
        d.translate(a * 97.49996948242188, a * 95.12844848632812);
        Lt(d, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
        d.restore();
        Kt(d, b[0], b[0], a * 4);
        return c;
    }
    function fb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 247;
        e.save();
        e.translate(a * 182, a * 120);
        Lt(e, a * -8, a * -67, a * 16, a * 134, a * 1);
        e.restore();
        Kt(e, c[0]);
        e.save();
        e.translate(a * 68.5, a * 127.5);
        Lt(e, a * -8.5, a * -70.5, a * 17, a * 141, a * 1);
        e.restore();
        Kt(e, c[0]);
        e.save();
        e.translate(a * 123.5, a * 68);
        Lt(e, a * -82.5, a * -24, a * 165, a * 48, a * 4);
        e.restore();
        Kt(e, c[2], c[1], a * 6);
        e.save();
        e.translate(a * 123, a * 179.5);
        Lt(e, a * -83, a * -24.5, a * 166, a * 49, a * 4);
        e.restore();
        Kt(e, c[2], c[1], a * 6);
        e.save();
        e.translate(a * 123.5, a * 123.5);
        e.rotate(6.24);
        Lt(e, a * -82.5, a * -24.5, a * 165, a * 49, a * 4);
        e.restore();
        Kt(e, c[3], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 204, a * 112);
        e.bezierCurveTo(a * 149, a * 121.5, a * 96, a * 130, a * 94, a * 131);
        e.bezierCurveTo(a * 149.5, a * 127.5, a * 149.5, a * 127.5, a * 205, a * 124);
        e.closePath();
        Kt(e, c[1]);
        return d;
    }
    function zb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 247;
        e.save();
        e.translate(a * 183, a * 107);
        Lt(e, a * -8, a * -70.5, a * 16, a * 141, a * 1);
        e.restore();
        Kt(e, c[0]);
        e.save();
        e.translate(a * 69.5, a * 110);
        Lt(e, a * -8.5, a * -71, a * 17, a * 143, a * 1);
        e.restore();
        Kt(e, c[0]);
        e.save();
        e.translate(a * 123.5, a * 181);
        Lt(e, a * -84.5, a * -26, a * 169, a * 52, a * 5);
        e.restore();
        Kt(e, c[2], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 95);
        e.bezierCurveTo(a * 105, a * 96, a * 113, a * 99, a * 134, a * 102);
        e.bezierCurveTo(a * 147, a * 106, a * 173, a * 100, a * 207, a * 105);
        e.bezierCurveTo(a * 210, a * 105, a * 207, a * 140, a * 207, a * 154);
        e.bezierCurveTo(a * 123.5, a * 151.5, a * 123.5, a * 151.5, a * 40, a * 149);
        e.bezierCurveTo(a * 37, a * 145, a * 39, a * 95, a * 41, a * 96);
        e.closePath();
        Kt(e, c[2], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 68, a * 75);
        e.bezierCurveTo(a * 54, a * 72.5, a * 54, a * 72.5, a * 40, a * 70);
        e.bezierCurveTo(a * 38, a * 46, a * 40, a * 46, a * 53, a * 46);
        e.bezierCurveTo(a * 201, a * 41, a * 201, a * 41, a * 201, a * 42);
        e.bezierCurveTo(a * 211, a * 40, a * 208, a * 53, a * 208, a * 72);
        e.bezierCurveTo(a * 209, a * 91, a * 210, a * 96, a * 194, a * 94);
        e.bezierCurveTo(a * 119, a * 97, a * 119, a * 97, a * 44, a * 100);
        e.bezierCurveTo(a * 39, a * 99, a * 40, a * 96, a * 40, a * 80);
        e.bezierCurveTo(a * 54, a * 77.5, a * 54, a * 77.5, a * 68, a * 75);
        e.closePath();
        Kt(e, c[3], c[1], a * 6);
        return d;
    }
    const yb = 4;
    function wb(c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var i = c * 100;
        var j = c * 100;
        var a = i / 2;
        var k = j / 2;
        e.width = i;
        e.height = j;
        var m = c * 5;
        var h = c * 28;
        var l = m / 2;
        var g = h / 2;
        f.translate(a, k);
        for (var n = 0; n < 4; n++) {
            Lt(f, -l, -g, m, h, c * 2);
            f.rotate(Math.PI / 4);
            Kt(f, d);
        }
        f.arc(0, 0, c * 10, 0, Math.PI * 2);
        Kt(f, d);
        f.globalCompositeOperation = "destination-out";
        Nt(f, 0, 0, c * 4);
        f.fill();
        return e;
    }
    function Pb(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 185;
        f.height = b * 240;
        g.globalAlpha = 0.5;
        g.translate(0, b * 10);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 44, b * 137);
        g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
        g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
        g.closePath();
        Kt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 53, b * 181);
        g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
        g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
        g.closePath();
        Kt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 63, b * 208);
        g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
        g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
        g.closePath();
        Kt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 130, b * 170);
        g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
        g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
        g.closePath();
        Kt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 39, b * 140);
        g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
        g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
        g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
        g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
        g.closePath();
        Kt(g, d[0]);
        g.globalAlpha = 1;
        g.translate(0, b * -10);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 44, b * 137);
        g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
        g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
        g.closePath();
        Kt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 53, b * 181);
        g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
        g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
        g.closePath();
        Kt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 63, b * 208);
        g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
        g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
        g.closePath();
        Kt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 130, b * 170);
        g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
        g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
        g.closePath();
        Kt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 39, b * 140);
        g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
        g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
        g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
        g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
        g.closePath();
        Kt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 59, b * 99);
        g.bezierCurveTo(b * 71, b * 68, b * 81, b * 68, b * 94, b * 67);
        g.bezierCurveTo(b * 105, b * 66, b * 119, b * 75, b * 123, b * 96);
        g.bezierCurveTo(b * 104, b * 91, b * 101, b * 94, b * 94, b * 97);
        g.bezierCurveTo(b * 76, b * 92, b * 73, b * 93, b * 60, b * 99);
        g.closePath();
        Kt(g, d[3], d[2], b * 4);
        if (e === 0) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 47, b * 149);
            g.bezierCurveTo(b * 43, b * 140, b * 48, b * 130, b * 59, b * 127);
            g.bezierCurveTo(b * 77, b * 126, b * 90, b * 131, b * 131, b * 127);
            g.bezierCurveTo(b * 143, b * 130, b * 144, b * 143, b * 132, b * 154);
            g.bezierCurveTo(b * 90, b * 152, b * 90, b * 152, b * 48, b * 150);
            g.closePath();
            Kt(g, d[1]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 40, b * 139);
            g.bezierCurveTo(b * 48, b * 113, b * 76, b * 119, b * 91, b * 126);
            g.bezierCurveTo(b * 117, b * 113, b * 135, b * 117, b * 144, b * 134);
            g.bezierCurveTo(b * 144, b * 138, b * 144, b * 138, b * 144, b * 142);
            g.bezierCurveTo(b * 128, b * 124, b * 108, b * 124, b * 91, b * 136);
            g.bezierCurveTo(b * 59, b * 124, b * 50, b * 137, b * 42, b * 148);
            g.closePath();
            Kt(g, d[3], d[2], b * 4);
        } else {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 41, b * 139);
            g.bezierCurveTo(b * 53, b * 117, b * 69, b * 118, b * 92, b * 127);
            g.bezierCurveTo(b * 124, b * 111, b * 136, b * 121, b * 143, b * 136);
            g.bezierCurveTo(b * 142, b * 144, b * 142, b * 144, b * 141, b * 152);
            g.bezierCurveTo(b * 128, b * 131, b * 113, b * 138, b * 92, b * 145);
            g.bezierCurveTo(b * 57, b * 133, b * 57, b * 147, b * 44, b * 154);
            g.closePath();
            Kt(g, d[3], d[2], b * 4);
        }
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 90, b * 95);
        g.bezierCurveTo(b * 99, b * 82, b * 98, b * 58, b * 99, b * 40);
        g.bezierCurveTo(b * 90, b * 38, b * 89, b * 34, b * 92, b * 17);
        g.bezierCurveTo(b * 92, b * 5, b * 83, b * 16, b * 78, b * 29);
        g.bezierCurveTo(b * 72, b * 59, b * 87, b * 81, b * 89, b * 87);
        g.closePath();
        Kt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 90, b * 86);
        g.bezierCurveTo(b * 95, b * 74, b * 95, b * 62, b * 95, b * 43);
        g.bezierCurveTo(b * 84, b * 37, b * 86, b * 34, b * 89, b * 16);
        g.bezierCurveTo(b * 75, b * 29, b * 80, b * 58, b * 90, b * 85);
        g.closePath();
        Kt(g, d[1], d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 92, b * 117);
        g.bezierCurveTo(b * 98, b * 87, b * 93, b * 78, b * 85, b * 76);
        g.bezierCurveTo(b * 85.5, b * 79.5, b * 85.5, b * 79.5, b * 86, b * 83);
        g.bezierCurveTo(b * 84, b * 85.5, b * 84, b * 85.5, b * 82, b * 88);
        g.bezierCurveTo(b * 90, b * 93, b * 89, b * 100, b * 92, b * 117);
        g.closePath();
        Kt(g, d[1], d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 92, b * 175);
        g.bezierCurveTo(b * 95, b * 135, b * 98, b * 125, b * 109, b * 121);
        g.bezierCurveTo(b * 106, b * 114, b * 104, b * 114, b * 102, b * 113);
        g.bezierCurveTo(b * 103, b * 106, b * 104, b * 103, b * 107, b * 96);
        g.bezierCurveTo(b * 74, b * 108, b * 86, b * 157, b * 92, b * 174);
        g.closePath();
        Kt(g, d[1], d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 48, b * 169);
        g.bezierCurveTo(b * 42, b * 187, b * 50, b * 193, b * 59, b * 198);
        g.closePath();
        Kt(g, undefined, d[2], b * 5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 136, b * 171);
        g.bezierCurveTo(b * 139, b * 186, b * 138, b * 191, b * 124, b * 199);
        g.closePath();
        Kt(g, Yl, d[2], b * 4);
        Nt(g, b * 63, b * 180, b * 15.231546211727817);
        Kt(g, d[4]);
        Nt(g, b * 121, b * 181, b * 15.652475842498529);
        Kt(g, d[4]);
        Nt(g, b * 58, b * 175, b * 5.656854249492381);
        Kt(g, d[2]);
        Nt(g, b * 116, b * 175, b * 5.656854249492381);
        Kt(g, d[2]);
        return f;
    }
    function kb(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 185;
        c.height = a * 240;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 44, a * 137);
        d.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
        d.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
        d.closePath();
        Kt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 53, a * 181);
        d.bezierCurveTo(a * 30, a * 164, a * 19, a * 150, a * 11, a * 136);
        d.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
        d.closePath();
        Kt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 63, a * 208);
        d.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
        d.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
        d.closePath();
        Kt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130, a * 170);
        d.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
        d.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
        d.closePath();
        Kt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 39, a * 140);
        d.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
        d.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
        d.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
        d.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
        d.closePath();
        Kt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 90, a * 95);
        d.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
        d.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
        d.bezierCurveTo(a * 92, a * 5, a * 83, a * 16, a * 78, a * 29);
        d.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
        d.closePath();
        Kt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 90, a * 86);
        d.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
        d.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * 16);
        d.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
        d.closePath();
        Kt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 92, a * 117);
        d.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
        d.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
        d.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
        d.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
        d.closePath();
        Kt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 92, a * 175);
        d.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
        d.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
        d.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
        d.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
        d.closePath();
        Kt(d, b[0]);
        return c;
    }
    function Ab(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 40;
        var a = b * 40;
        e.width = g;
        e.height = a;
        var i = g * b / 2;
        var j = a * b / 2;
        var k = b * 15;
        f.save();
        f.translate(i, j);
        f.globalAlpha = 1;
        Nt(f, 0, 0, k);
        Kt(f, d[0]);
        k = b * 5;
        i = b * 2;
        j = b * 1;
        f.translate(i, j);
        f.globalAlpha = 1;
        Nt(f, 0, 0, k);
        Kt(f, d[1]);
        f.restore();
        return e;
    }
    function xb(b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 200;
        c.width = e;
        c.height = f;
        var g = Gd(0.35, dq, ["#0e3022", "#0b8052", "#077b49"]);
        d.drawImage(g, 10, 10);
        g = Ot(0.9, os, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 21, 20);
        g = Ot(0.9, false, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 38, 28);
        g = Ot(0.9, Lo, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 15, 37);
        g = Ot(0.9, false, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 32, 45);
        return c;
    }
    const Jb = 14;
    const Mb = 12;
    function Bb(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = c * 32;
        var a = c * 32;
        var m = k / 2;
        var n = a / 2;
        i.width = k;
        i.height = a;
        var h = c * 5;
        var l = c * 28;
        var g = h / 2;
        var o = l / 2;
        j.translate(c * 0, c * 0);
        j.translate(m, n);
        if (f == 1) {
            Nt(j, 0, 0, c * 10);
            Kt(j, e[2], e[2], c * 3);
            for (var b = 0; b < 4; b++) {
                Lt(j, -g, -o, h, l, c * 2);
                j.rotate(Math.PI / 4);
                Kt(j, e[2], e[2], c * 4);
            }
        }
        Nt(j, 0, 0, c * 10);
        Kt(j, e[0], e[1], c * 1.5);
        for (b = 0; b < 4; b++) {
            Lt(j, -g, -o, h, l, c * 2);
            j.rotate(Math.PI / 4);
            Kt(j, e[0], e[1], c * 1.5);
        }
        Nt(j, 0, 0, c * 10);
        Kt(j, e[0]);
        Nt(j, 0, 0, c * 4);
        Kt(j, e[2], e[1], c * 1.5);
        j.globalCompositeOperation = "destination-out";
        Nt(j, 0, 0, c * 4);
        Kt(j, e[0], e[1], c * 2);
        j.globalCompositeOperation = "source-over";
        Nt(j, 0, 0, c * 4);
        Kt(j, Gj, e[1], c * 2);
        return i;
    }
    const Db = Cg;
    function Ib(c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var i = c * 85;
        var j = c * 115;
        var a = c * 6;
        e.width = i;
        e.height = j;
        f.translate(c * -130, c * -60 + a);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
        f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
        f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
        f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
        f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
        f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
        f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
        f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
        f.closePath();
        Kt(f, d[0]);
        f.translate(0, -a);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
        f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
        f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
        f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
        f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
        f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
        f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
        f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
        f.closePath();
        Kt(f, d[1], d[2], 4);
        var k = c * 155;
        var m = c * 133;
        var h = c * 10;
        var l = c * 3;
        var g = k + c * -3;
        var n = m + c * -5;
        f.save();
        f.translate(k, m);
        f.globalAlpha = 1;
        Nt(f, 0, 0, h);
        Kt(f, d[3]);
        f.restore();
        f.save();
        f.translate(g, n);
        f.globalAlpha = 1;
        Nt(f, 0, 0, l);
        Kt(f, d[4]);
        f.restore();
        f.save();
        f.translate(k + c * 27, m);
        f.globalAlpha = 1;
        Nt(f, 0, 0, h);
        Kt(f, d[3]);
        f.restore();
        f.save();
        f.translate(c * 27 + g, n);
        f.globalAlpha = 1;
        Nt(f, 0, 0, l);
        Kt(f, d[4]);
        return e;
    }
    function Eb(f, e, i) {
        var j = document.createElement("canvas");
        var k = j.getContext("2d");
        var n = (d = f * 125) / 2;
        var a = (r = f * 95) / 2;
        var o = f * 10;
        var p = f * 8;
        var h = f * 112;
        var l = f * 82;
        var g = h / 2;
        var q = l / 2;
        var b = f * 4;
        j.width = d;
        j.height = r;
        k.translate(n - f * 4, a + f * 4);
        k.globalAlpha = e ? 0.5 : 1;
        Lt(k, -g, -q, h, l, o);
        Kt(k, i[0]);
        k.globalAlpha = 1;
        k.translate(0, -p);
        Lt(k, -g, -q, h, l, o);
        Kt(k, i[1], i[2], b);
        var d = f * 55;
        var r = f * 45;
        o = 5;
        k.translate(f * -40, f * -30);
        Lt(k, 0, 0, d, r, o);
        Kt(k, i[3]);
        var t = wb(f * 0.7, i[3]);
        k.drawImage(t, f * 45, f * -25);
        t = wb(f * 0.7, i[3]);
        k.drawImage(t, f * 45, f * 15);
        t = wb(f * 1.2, i[3]);
        k.drawImage(t, f * 28, f * -30);
        d = f * 15;
        r = f * 70;
        o = f * 5;
        k.translate(f * 78, f * -5);
        Lt(k, 0, 0, d, r, o);
        Kt(k, i[4]);
        d = f * 9;
        r = f * 50;
        o = f * 3;
        k.translate(f * -20, f * 20);
        k.rotate(Math.PI / 5);
        k.globalAlpha = 0.6;
        Lt(k, 0, 0, d, r, o);
        Kt(k, i[5]);
        k.translate(f * -20, f * 29);
        k.rotate(Math.PI / 5);
        k.globalAlpha = 0.6;
        k.beginPath();
        k.lineJoin = "round";
        k.moveTo(0, 0);
        k.lineTo(0, f * 30);
        k.lineTo(f * 30, f * 30);
        k.closePath();
        Kt(k, null, i[5], f * 8);
        return j;
    }
    const Sb = 7;
    const Qb = 17;
    const _b = 20;
    function Fb(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 55;
        var a = b * 55;
        var h = b * 8;
        e.width = g;
        e.height = a;
        f.translate(b * -65, b * -55 + h);
        f.globalAlpha = 1;
        f.beginPath();
        f.moveTo(b * 95, b * 60);
        f.bezierCurveTo(b * 107, b * 62, b * 110, b * 73, b * 107, b * 79);
        f.bezierCurveTo(b * 104, b * 85, b * 85, b * 93, b * 81, b * 88);
        f.bezierCurveTo(b * 74, b * 80, b * 85, b * 60, b * 95, b * 60);
        f.closePath();
        Kt(f, d[0], d[1], 3);
        f.globalAlpha = 1;
        f.beginPath();
        f.moveTo(b * 91, b * 70);
        f.bezierCurveTo(b * 91, b * 75, b * 100, b * 76, b * 100, b * 73);
        f.bezierCurveTo(b * 100, b * 69, b * 89, b * 65, b * 91, b * 70);
        f.closePath();
        Kt(f, d[2], d[3], 3);
        return e;
    }
    function Rb(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 188;
        c.height = a * 190;
        d.globalAlpha = 0.5;
        d.translate(0, a * 5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
        d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
        d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
        d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
        d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
        d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
        d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
        d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
        d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
        d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
        d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
        d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
        d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
        d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
        d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
        d.closePath();
        Kt(d, b[0], b[0], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
        d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
        d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
        d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
        d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
        d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
        d.closePath();
        Kt(d, b[0], b[0], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
        d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
        d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
        d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
        d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
        d.closePath();
        Kt(d, b[0], b[0], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
        d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
        d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
        d.closePath();
        Kt(d, b[0], b[0], a * 2);
        d.globalAlpha = 1;
        d.translate(0, a * -5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
        d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
        d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
        d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
        d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
        d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
        d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
        d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
        d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
        d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
        d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
        d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
        d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
        d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
        d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
        d.closePath();
        Kt(d, b[1], b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
        d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
        d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
        d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
        d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
        d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
        d.closePath();
        Kt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
        d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
        d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
        d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
        d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
        d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
        d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
        d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
        d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
        d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
        d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
        d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
        d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
        d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
        d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
        d.closePath();
        Kt(d, Gj, b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
        d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
        d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
        d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
        Kt(d, b[1], b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
        d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
        d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
        Kt(d, b[1], b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 57.00567626953125, a * 68.53410339355469);
        d.bezierCurveTo(a * 63.00567626953125, a * 69.53410339355469, a * 69.00567626953125, a * 66.53410339355469, a * 73.00567626953125, a * 60.53410339355469);
        d.bezierCurveTo(a * 66.00567626953125, a * 47.53410339355469, a * 61.00567626953125, a * 42.53410339355469, a * 58.00567626953125, a * 49.53410339355469);
        d.bezierCurveTo(a * 56.00567626953125, a * 59.53410339355469, a * 56.00567626953125, a * 64.53410339355469, a * 57.00567626953125, a * 67.53410339355469);
        d.closePath();
        Kt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115.00567626953125, a * 59.715911865234375);
        d.bezierCurveTo(a * 119.00567626953125, a * 48.715911865234375, a * 126.00567626953125, a * 41.715911865234375, a * 129.00567626953125, a * 48.715911865234375);
        d.bezierCurveTo(a * 131.00567626953125, a * 56.715911865234375, a * 133.00567626953125, a * 71.71591186523438, a * 127.00567626953125, a * 68.71591186523438);
        d.bezierCurveTo(a * 120.00567626953125, a * 67.71591186523438, a * 114.00567626953125, a * 59.715911865234375, a * 116.00567626953125, a * 58.715911865234375);
        d.closePath();
        Kt(d, b[3]);
        Nt(d, a * 77, a * 107, a * 6);
        Kt(d, b[2]);
        Nt(d, a * 110, a * 107, a * 6);
        Kt(d, b[2]);
        Nt(d, a * 75, a * 105, a * 3);
        Kt(d, b[4]);
        Nt(d, a * 108, a * 105, a * 3);
        Kt(d, b[4]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 88.00567626953125, a * 141.4431915283203);
        d.bezierCurveTo(a * 93.00567626953125, a * 137.4431915283203, a * 96.00567626953125, a * 138.4431915283203, a * 100.00567626953125, a * 141.4431915283203);
        d.bezierCurveTo(a * 103.00567626953125, a * 143.4431915283203, a * 101.00567626953125, a * 149.4431915283203, a * 95.00567626953125, a * 148.4431915283203);
        d.bezierCurveTo(a * 85.00567626953125, a * 148.4431915283203, a * 86.00567626953125, a * 145.4431915283203, a * 88.00567626953125, a * 142.4431915283203);
        d.closePath();
        Kt(d, b[1]);
        return c;
    }
    const jb = 16;
    function Lb(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 238;
        c.height = a * 230;
        d.translate(a * -93, a * -110 + a * 5);
        d.globalAlpha = 0.3;
        Nt(d, a * 213.5, a * 256.75, a * 75);
        Kt(d, b[5]);
        Nt(d, a * 213.5, a * 175.75, a * 25);
        Kt(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 156.5, a * 137.75);
        d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.5, a * 178.75);
        d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130.5, a * 124.75);
        d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 183.75);
        d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107.5, a * 213.75);
        d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 212.5, a * 187.75);
        d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 102.5, a * 258.75);
        d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 192.75);
        d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.translate(0, -5);
        d.globalAlpha = 1;
        Nt(d, a * 213.5, a * 256.75, a * 75);
        Kt(d, b[3]);
        Nt(d, a * 213.5, a * 175.75, a * 25);
        Kt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 219.5, a * 158.75);
        d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
        d.closePath();
        d.lineWidth = a * 10;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 210.5, a * 160.75);
        d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
        d.closePath();
        d.lineWidth = a * 10;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 219.5, a * 158.75);
        d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
        d.closePath();
        d.fillStyle = b[0];
        d.fill();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 210.5, a * 160.75);
        d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
        d.closePath();
        d.fillStyle = b[0];
        d.fill();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 156.5, a * 137.75);
        d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.5, a * 178.75);
        d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130.5, a * 124.75);
        d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 183.75);
        d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107.5, a * 213.75);
        d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 212.5, a * 187.75);
        d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 102.5, a * 258.75);
        d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 192.75);
        d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 156.5, a * 137.75);
        d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.5, a * 178.75);
        d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130.5, a * 124.75);
        d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 183.75);
        d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107.5, a * 213.75);
        d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 212.5, a * 187.75);
        d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 102.5, a * 258.75);
        d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 192.75);
        d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        Nt(d, a * 213.5, a * 256.75, a * 70);
        Kt(d, b[0]);
        Nt(d, a * 213.5, a * 175.75, a * 20);
        Kt(d, b[0]);
        Nt(d, a * 222, a * 166, a * 5);
        d.fillStyle = b[2];
        d.fill();
        Nt(d, a * 205, a * 166, a * 5);
        d.fillStyle = b[2];
        d.fill();
        Nt(d, a * 206.2, a * 167, a * 2.5);
        d.fillStyle = b[4];
        d.fill();
        Nt(d, a * 223.2, a * 167, a * 2.5);
        d.fillStyle = b[4];
        d.fill();
        d.save();
        d.translate(a * 213.5, a * 293.75);
        d.rotate(0.76);
        Lt(d, a * -22, a * -21, a * 44, a * 42, a * 6);
        d.restore();
        d.fillStyle = b[1];
        d.fill();
        d.save();
        d.translate(a * 212.5, a * 258.25);
        d.rotate(0.8);
        Lt(d, a * -15, a * -14.5, a * 30, a * 29, a * 6);
        d.restore();
        d.fillStyle = b[1];
        d.fill();
        return c;
    }
    const Gb = 4;
    const Wb = 9;
    function Ob(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.save();
        e.translate(a * 202.5, a * 147.5);
        Lt(e, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
        e.restore();
        Kt(e, b[0], b[1], a * 12);
        e.save();
        e.translate(a * 202.5, a * 190.5);
        Lt(e, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
        e.restore();
        Kt(e, b[2], b[1], a * 12);
        e.save();
        e.save();
        e.translate(a * 202.5, a * 233.5);
        Lt(e, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
        e.restore();
        Kt(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 202.5, a * 275);
        Lt(e, a * 96.5, a * -21, a * -193, a * 42, a * 0);
        e.restore();
        Kt(e, b[0], b[1], a * 12);
        e.save();
        e.translate(a * 201, a * 212);
        e.rotate(8.64);
        Lt(e, a * -116, a * -22, a * 232, a * 44, a * 10);
        e.restore();
        Kt(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 203.5, a * 121.5);
        Lt(e, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
        e.restore();
        Kt(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 203.5, a * 299);
        Lt(e, a * -115.5, a * -20, a * 231, a * 40, a * 10);
        e.restore();
        Kt(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 298.5, a * 210);
        Lt(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
        e.restore();
        Kt(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 108.5, a * 210);
        Lt(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
        e.restore();
        Kt(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 204, a * 121.5);
        Lt(e, a * -92, a * -9.5, a * 184, a * 19, a * 10);
        e.restore();
        Kt(e, b[3], b[3], a * 10);
        e.save();
        e.translate(a * 197, a * 299);
        Lt(e, a * 85, a * -9, a * -170, a * 18, a * 10);
        e.restore();
        Kt(e, b[3], b[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 94, a * 317);
        e.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
        e.closePath();
        Kt(e, undefined, b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 279, a * 142);
        e.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
        e.closePath();
        Kt(e, undefined, b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 106);
        e.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
        e.closePath();
        Kt(e, undefined, b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 281, a * 282);
        e.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
        e.closePath();
        Kt(e, Xn, b[1], a * 12);
        if (c == 0) {
            e.scale(2, 2);
            e.translate(a * -7, a * 55);
            e.rotate(-0.5);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 60, a * 47);
            e.bezierCurveTo(a * 81, a * 46, a * 85, a * 47, a * 83, a * 63);
            e.bezierCurveTo(a * 83, a * 72, a * 83, a * 75, a * 72, a * 73);
            e.bezierCurveTo(a * 68, a * 80, a * 69, a * 82, a * 66, a * 73);
            e.bezierCurveTo(a * 62, a * 81, a * 61, a * 82, a * 59, a * 73);
            e.bezierCurveTo(a * 54, a * 81, a * 55, a * 81, a * 52, a * 74);
            e.bezierCurveTo(a * 38, a * 76, a * 41, a * 74, a * 40, a * 66);
            e.bezierCurveTo(a * 38, a * 45, a * 39, a * 49, a * 59, a * 47);
            e.closePath();
            Kt(e, b[4], b[4], a * 5);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 68, a * 54);
            e.bezierCurveTo(a * 75, a * 54, a * 77, a * 62, a * 71, a * 64);
            e.bezierCurveTo(a * 62, a * 65, a * 63, a * 54, a * 68, a * 54);
            e.closePath();
            Kt(e, b[3]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 50, a * 55);
            e.bezierCurveTo(a * 57, a * 55, a * 58, a * 65, a * 52, a * 65);
            e.bezierCurveTo(a * 44, a * 66, a * 44, a * 54, a * 50, a * 55);
            e.closePath();
            Kt(e, b[3]);
        } else if (c == 1) {
            e.scale(0.6, 0.6);
            e.translate(a * 185, a * 165);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 108, a * 56);
            e.bezierCurveTo(a * 136, a * 58, a * 203, a * 69, a * 234, a * 75);
            e.bezierCurveTo(a * 246, a * 77, a * 247, a * 78, a * 245, a * 90);
            e.bezierCurveTo(a * 238, a * 143, a * 228, a * 197, a * 214, a * 259);
            e.bezierCurveTo(a * 212, a * 267, a * 209, a * 270, a * 189, a * 268);
            e.bezierCurveTo(a * 142, a * 264, a * 106, a * 260, a * 75, a * 253);
            e.bezierCurveTo(a * 60, a * 250, a * 64, a * 250, a * 66, a * 221);
            e.bezierCurveTo(a * 71, a * 168, a * 87, a * 95, a * 98, a * 67);
            e.bezierCurveTo(a * 101, a * 57, a * 103, a * 56, a * 106, a * 56);
            e.closePath();
            Kt(e, b[4], b[4], a * 20);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 112, a * 72);
            e.bezierCurveTo(a * 132, a * 73, a * 227, a * 85, a * 226, a * 91);
            e.bezierCurveTo(a * 231, a * 89, a * 217, a * 196, a * 200, a * 250);
            e.bezierCurveTo(a * 196, a * 254, a * 175, a * 249, a * 166, a * 249);
            e.bezierCurveTo(a * 91, a * 241, a * 82, a * 236, a * 83, a * 232);
            e.bezierCurveTo(a * 90, a * 144, a * 108, a * 71, a * 111, a * 72);
            e.closePath();
            Kt(e, Ua, b[0], a * 13);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 132, a * 117);
            e.bezierCurveTo(a * 171, a * 86, a * 191, a * 101, a * 188, a * 134);
            e.bezierCurveTo(a * 185, a * 154, a * 170, a * 158, a * 153, a * 158);
            e.bezierCurveTo(a * 143, a * 172, a * 146, a * 180, a * 147, a * 193);
            Kt(e, undefined, b[0], a * 20);
            Nt(e, a * 142, a * 221, a * 16.1245154965971);
            Kt(e, b[0]);
        }
        return d;
    }
    const Nb = 14;
    function Hb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 173;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 85.25, a * 82.953125);
        e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
        e.closePath();
        Kt(e, T, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111.25, a * 8.953125);
        e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
        e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
        e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111.25, a * 8.953125);
        e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
        e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
        e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
        e.closePath();
        Kt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 85.25, a * 82.953125);
        e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
        e.closePath();
        Kt(e, ll, c[6], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.25, a * 84.953125);
        e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
        e.closePath();
        Kt(e, undefined, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 160.25, a * 114.953125);
        e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
        e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
        e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 160.25, a * 114.953125);
        e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
        e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
        e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
        e.closePath();
        Kt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.25, a * 84.953125);
        e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
        e.closePath();
        Kt(e, Gj, c[6], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 83.25, a * 83.953125);
        e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
        e.closePath();
        Kt(e, Mq, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 13.25, a * 53.953125);
        e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
        e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
        e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 13.25, a * 53.953125);
        e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
        e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
        e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
        e.closePath();
        Kt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 83.25, a * 83.953125);
        e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
        e.closePath();
        Kt(e, undefined, c[6], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.25, a * 86.953125);
        e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
        e.closePath();
        Kt(e, undefined, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.25, a * 159.953125);
        e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
        e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
        e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.25, a * 159.953125);
        e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
        e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
        e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
        e.closePath();
        Kt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.25, a * 86.953125);
        e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
        e.closePath();
        Kt(e, undefined, c[6], a * 4);
        return d;
    }
    function qb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 101, a * 255);
        e.bezierCurveTo(a * 113, a * 243, a * 179, a * 210, a * 219, a * 196);
        e.bezierCurveTo(a * 252, a * 203, a * 288, a * 215, a * 318, a * 233);
        e.bezierCurveTo(a * 304, a * 254, a * 258, a * 273, a * 215, a * 296);
        e.bezierCurveTo(a * 161, a * 287, a * 119, a * 270, a * 102, a * 257);
        e.closePath();
        Kt(e, c[0], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 99, a * 258);
        e.bezierCurveTo(a * 99, a * 272.5, a * 99, a * 272.5, a * 99, a * 287);
        e.bezierCurveTo(a * 166, a * 319, a * 193, a * 320, a * 212, a * 324);
        e.bezierCurveTo(a * 292, a * 286, a * 312, a * 271, a * 319, a * 263);
        e.bezierCurveTo(a * 320, a * 249, a * 320, a * 241, a * 318, a * 234);
        e.bezierCurveTo(a * 300, a * 254, a * 254, a * 277, a * 216, a * 294);
        e.bezierCurveTo(a * 190, a * 296, a * 135, a * 276, a * 102, a * 258);
        e.closePath();
        Kt(e, c[2], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212, a * 323);
        e.bezierCurveTo(a * 211.5, a * 310.5, a * 211.5, a * 310.5, a * 211, a * 298);
        e.closePath();
        Kt(e, Xk, c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212, a * 210);
        e.bezierCurveTo(a * 286, a * 210, a * 331, a * 254, a * 212, a * 276);
        e.bezierCurveTo(a * 108, a * 276, a * 112, a * 222, a * 213, a * 208);
        e.closePath();
        Kt(e, c[3], c[4], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 200);
        e.bezierCurveTo(a * 126, a * 216, a * 177, a * 232, a * 213, a * 237);
        e.bezierCurveTo(a * 266, a * 218, a * 288, a * 209, a * 318, a * 190);
        e.bezierCurveTo(a * 269, a * 164, a * 239, a * 158, a * 214, a * 153);
        e.bezierCurveTo(a * 148, a * 172, a * 131, a * 182, a * 98, a * 200);
        e.closePath();
        Kt(e, c[0], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 97, a * 204);
        e.bezierCurveTo(a * 97, a * 215.5, a * 97, a * 215.5, a * 97, a * 227);
        e.bezierCurveTo(a * 148, a * 250, a * 179, a * 256, a * 212, a * 262);
        e.bezierCurveTo(a * 268, a * 244, a * 281, a * 233, a * 318, a * 214);
        e.bezierCurveTo(a * 318, a * 203, a * 318, a * 203, a * 318, a * 192);
        e.bezierCurveTo(a * 250, a * 225, a * 236, a * 231, a * 214, a * 239);
        e.bezierCurveTo(a * 158, a * 228, a * 126, a * 215, a * 99, a * 201);
        e.closePath();
        Kt(e, c[2], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212, a * 260);
        e.bezierCurveTo(a * 212, a * 251.5, a * 212, a * 251.5, a * 212, a * 243);
        e.closePath();
        Kt(e, undefined, c[1], a * 14);
        Nt(e, a * 161, a * 201, a * 13);
        Kt(e, c[5]);
        Nt(e, a * 216, a * 205, a * 8.06225774829855);
        Kt(e, c[5]);
        Nt(e, a * 216, a * 175, a * 6.708203932499369);
        Kt(e, c[5]);
        Nt(e, a * 271, a * 191, a * 5.0990195135927845);
        Kt(e, c[5]);
        Nt(e, a * 206, a * 180, a * 11.180339887498949);
        Kt(e, c[5]);
        return d;
    }
    function Ub(f, e, i, j, k) {
        var n = document.createElement("canvas");
        var a = n.getContext("2d");
        var o = f * 70;
        var p = f * 70;
        var h = f * 10;
        var l = f * 5;
        n.width = o;
        n.height = p + l;
        for (var g = 0; e.length > g; g++) {
            var q = e[g];
            a.globalAlpha = q.a;
            var r = q.f(i, false, q.c);
            a.save();
            a.translate(o / 2 + f * q.x, p / 2 + q.y * f);
            a.rotate(q.r);
            a.drawImage(r, -r.width / 2, -r.height / 2);
            a.restore();
        }
        var s = [];
        for (g = 0; g < j.length; g++) {
            var t = document.createElement("canvas");
            var v = t.getContext("2d");
            t.width = o;
            t.height = p + l;
            v.globalAlpha = k / 2;
            if (g == 2) {
                Lt(v, 0, l, o, p, h);
            } else {
                Lt(v, 0, 0, o, p + l, h);
            }
            Kt(v, "#081a19");
            v.globalAlpha = k;
            if (g == 2) {
                Lt(v, 0, l, o, p, h);
            } else {
                Lt(v, 0, 0, o, p, h);
            }
            Kt(v, j[g]);
            v.globalAlpha = 1;
            if (g == 2) {
                v.drawImage(n, 0, l);
            } else {
                v.drawImage(n, 0, 0);
            }
            s.push(Ga(t));
        }
        return s;
    }
    function Yb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 173;
        e.translate(a * 5, a * 5);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.32);
        ob(e, 7, a * 42.15447781671598, a * 10);
        e.restore();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.32);
        ob(e, 7, a * 42.15447781671598, a * 10);
        e.restore();
        Kt(e, c[1], c[2], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.28);
        ob(e, 7, a * 30.463092423455635, a * 10);
        e.restore();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.28);
        ob(e, 7, a * 30.463092423455635, a * 10);
        e.restore();
        Kt(e, c[3], c[4], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        Nt(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        Nt(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
        Kt(e, c[5], c[6], a * 4);
        return d;
    }
    function Kb(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = c * 195;
        var a = c * 190;
        var m = k / 2;
        var n = a / 2;
        i.width = k;
        i.height = a;
        var h = c * 10;
        var l = c * 35;
        var g = c * 150;
        var o = l / 2;
        var b = g / 2;
        var d = c * 4;
        j.translate(m - c * 5, n - c * 5);
        j.rotate(-Math.PI / 1.25);
        j.globalAlpha = 1;
        Lt(j, -o, -b, l, g, h);
        Kt(j, f[0], f[1], d);
        j.translate(0, 0);
        j.rotate(Math.PI / 3);
        j.globalAlpha = 1;
        Lt(j, -o, -b, l, g, h);
        Kt(j, f[0], f[1], d);
        j.translate(0, 5);
        Lt(j, -o / 2, -b / 2, l / 2, g / 3, h - 2);
        Kt(j, f[1]);
        return i;
    }
    function Vb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 52;
        d.height = a * 65;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9.833328247070312, a * 12.078125);
        e.bezierCurveTo(a * 15.333328247070312, a * 28.078125, a * 15.333328247070312, a * 28.078125, a * 20.833328247070312, a * 44.078125);
        e.closePath();
        Kt(e, undefined, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 7.8333282470703125, a * 20.078125);
        e.bezierCurveTo(a * 16.833328247070312, a * 32.578125, a * 16.833328247070312, a * 32.578125, a * 25.833328247070312, a * 45.078125);
        e.closePath();
        Kt(e, T, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.833328247070312, a * 26.078125);
        e.bezierCurveTo(a * 25.833328247070312, a * 11.078125, a * 16.833328247070312, a * 8.078125, a * 14.833328247070312, a * 7.078125);
        e.bezierCurveTo(a * 11.833328247070312, a * 17.078125, a * 13.833328247070312, a * 22.078125, a * 23.833328247070312, a * 27.078125);
        e.closePath();
        Kt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35.83332824707031, a * 8.078125);
        e.bezierCurveTo(a * 34.83332824707031, a * 27.078125, a * 28.833328247070312, a * 27.078125, a * 23.833328247070312, a * 28.078125);
        e.bezierCurveTo(a * 21.833328247070312, a * 14.078125, a * 26.833328247070312, a * 11.078125, a * 35.83332824707031, a * 8.078125);
        e.closePath();
        Kt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25.833328247070312, a * 39.078125);
        e.bezierCurveTo(a * 20.833328247070312, a * 29.078125, a * 14.833328247070312, a * 27.078125, a * 5.8333282470703125, a * 29.078125);
        e.bezierCurveTo(a * 9.833328247070312, a * 39.078125, a * 16.833328247070312, a * 42.078125, a * 25.833328247070312, a * 40.078125);
        e.closePath();
        Kt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.83332824707031, a * 23.078125);
        e.bezierCurveTo(a * 35.83332824707031, a * 35.078125, a * 31.833328247070312, a * 37.078125, a * 25.833328247070312, a * 36.078125);
        e.bezierCurveTo(a * 25.833328247070312, a * 24.078125, a * 33.83332824707031, a * 21.078125, a * 42.83332824707031, a * 23.078125);
        e.closePath();
        Kt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.833328247070312, a * 24.078125);
        e.bezierCurveTo(a * 20.833328247070312, a * 34.078125, a * 23.833328247070312, a * 40.078125, a * 27.833328247070312, a * 43.078125);
        e.bezierCurveTo(a * 37.33332824707031, a * 28.078125, a * 37.33332824707031, a * 28.078125, a * 46.83332824707031, a * 13.078125);
        Kt(e, Yl, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 38.83332824707031, a * 14.078125);
        e.bezierCurveTo(a * 34.83332824707031, a * 24.078125, a * 34.83332824707031, a * 24.078125, a * 30.833328247070312, a * 34.078125);
        Kt(e, la, c[1], a * 2);
        return d;
    }
    function Xb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 173;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        ob(e, 7, a * 9.848857801796104, a * 5);
        e.restore();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        ob(e, 7, a * 9.848857801796104, a * 5);
        e.restore();
        Kt(e, c[8], c[9], a * 4);
        return d;
    }
    function Zb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.save();
        e.translate(a * 85, a * 237);
        e.rotate(1.5707963267948966);
        ob(e, 6, a * 54.585977194239184, a * 1);
        e.restore();
        Kt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 178, a * 238);
        e.rotate(1.5707963267948966);
        ob(e, 6, a * 52.53573932334064, a * 1);
        e.restore();
        Kt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 270, a * 239);
        e.rotate(1.5707963267948966);
        ob(e, 6, a * 53.58058329516393, a * 1);
        e.restore();
        Kt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 222, a * 312);
        e.rotate(1.5707963267948966);
        ob(e, 6, a * 52.53573932334064, a * 1);
        e.restore();
        Kt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 317, a * 159);
        e.rotate(1.5707963267948966);
        ob(e, 6, a * 57.63465889766331, a * 1);
        e.restore();
        Kt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 223.5, a * 139.0625);
        e.rotate(1.5707963267948966);
        ob(e, 6, a * 51.66236541235796, a * 1);
        e.restore();
        Kt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 132.5, a * 137.0625);
        e.rotate(1.5707963267948966);
        ob(e, 6, a * 52.009614495783374, a * 1);
        e.restore();
        Kt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 178.5, a * 58.0625);
        e.rotate(1.5707963267948966);
        ob(e, 6, a * 53.16013544000805, a * 1);
        e.restore();
        Kt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 177.5, a * 216.0625);
        e.rotate(1.5707963267948966);
        ob(e, 6, a * 50, a * 1);
        e.restore();
        Kt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 84.5, a * 215.0625);
        e.rotate(1.5707963267948966);
        ob(e, 6, a * 54, a * 1);
        e.restore();
        Kt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 319.5, a * 138.0625);
        e.rotate(1.5707963267948966);
        ob(e, 6, a * 55.08175741568164, a * 1);
        e.restore();
        Kt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 269.5, a * 216.0625);
        e.rotate(1.5707963267948966);
        ob(e, 6, a * 54.589376255824725, a * 1);
        e.restore();
        Kt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 221.5, a * 293.0625);
        e.rotate(0.5235987755982988);
        ob(e, 6, a * 49.49747468305833, a * 1);
        e.restore();
        Kt(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 221.5, a * 342.0625);
        e.bezierCurveTo(a * 221.5, a * 350.5625, a * 221.5, a * 350.5625, a * 221.5, a * 359.0625);
        e.closePath();
        Kt(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 270.0625);
        e.bezierCurveTo(a * 84.5, a * 277.0625, a * 84.5, a * 277.0625, a * 84.5, a * 284.0625);
        e.closePath();
        Kt(e, undefined, c[2], a * 12);
        e.save();
        e.translate(a * 84.5, a * 215.0625);
        e.rotate(0.5235987755982988);
        ob(e, 6, a * 30, a * 15);
        e.restore();
        Kt(e, c[3]);
        e.save();
        e.translate(a * 177.5, a * 215.0625);
        e.rotate(0.5235987755982988);
        ob(e, 6, a * 30, a * 15);
        e.restore();
        Kt(e, c[3]);
        e.save();
        e.translate(a * 222.5, a * 294.0625);
        e.rotate(0.5235987755982988);
        ob(e, 6, a * 30, a * 15);
        e.restore();
        Kt(e, c[3]);
        e.save();
        e.translate(a * 270.5, a * 216.0625);
        e.rotate(0.5235987755982988);
        ob(e, 6, a * 30, a * 15);
        e.restore();
        Kt(e, c[3]);
        e.save();
        e.translate(a * 320.5, a * 134.0625);
        e.rotate(0.5235987755982988);
        ob(e, 6, a * 30, a * 15);
        e.restore();
        Kt(e, c[3]);
        e.save();
        e.translate(a * 224.5, a * 138.0625);
        e.rotate(0.5235987755982988);
        ob(e, 6, a * 30, a * 15);
        e.restore();
        Kt(e, c[3]);
        e.save();
        e.translate(a * 133.5, a * 137.0625);
        e.rotate(0.5235987755982988);
        ob(e, 6, a * 30, a * 15);
        e.restore();
        Kt(e, c[3]);
        e.save();
        e.translate(a * 178.5, a * 56.0625);
        e.rotate(0.5235987755982988);
        ob(e, 6, a * 30, a * 15);
        e.restore();
        Kt(e, c[3]);
        return d;
    }
    function $b(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 75;
        var a = b * 55;
        e.width = g;
        e.height = a;
        f.translate(b * -30, b * -40);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 67, b * 56, b * 72, b * 71, b * 72, b * 71);
        f.bezierCurveTo(b * 72, b * 71, b * 84, b * 70, b * 75, b * 82);
        f.bezierCurveTo(b * 70, b * 88, b * 61, b * 89, b * 58, b * 89);
        f.bezierCurveTo(b * 55, b * 89, b * 40, b * 89, b * 46, b * 77);
        f.bezierCurveTo(b * 46, b * 77, b * 43, b * 63, b * 43, b * 63);
        f.bezierCurveTo(b * 35, b * 61, b * 35, b * 53, b * 42, b * 47);
        f.bezierCurveTo(b * 48, b * 42, b * 62, b * 41, b * 66, b * 43);
        f.bezierCurveTo(b * 70, b * 45, b * 72, b * 48, b * 67, b * 56);
        f.closePath();
        Kt(f, d[0]);
        f.beginPath();
        f.bezierCurveTo(b * 68, b * 61, b * 72, b * 76, b * 72, b * 76);
        f.bezierCurveTo(b * 65, b * 85, b * 61, b * 85, b * 49, b * 83);
        f.bezierCurveTo(b * 49, b * 83, b * 44, b * 63, b * 44, b * 63);
        f.bezierCurveTo(b * 54, b * 63, b * 60, b * 63, b * 67, b * 55);
        f.closePath();
        Kt(f, d[1]);
        f.beginPath();
        f.moveTo(b * 69, b * 65);
        f.bezierCurveTo(b * 70, b * 61, b * 81, b * 66, b * 86, b * 66);
        f.bezierCurveTo(b * 90, b * 66, b * 97, b * 63, b * 97, b * 56);
        f.bezierCurveTo(b * 97, b * 50, b * 93, b * 47, b * 88, b * 44);
        Kt(f, false, d[1], 2);
        f.beginPath();
        f.moveTo(b * 50, b * 48);
        f.bezierCurveTo(b * 43, b * 52, b * 50, b * 54, b * 51, b * 54);
        f.bezierCurveTo(b * 54, b * 54, b * 59, b * 52, b * 59, b * 49);
        f.bezierCurveTo(b * 59, b * 48, b * 55, b * 46, b * 50, b * 48);
        Kt(f, d[2]);
        return e;
    }
    const ed = 2;
    const id = 7;
    function td(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = c * 193;
        var a = c * 198;
        var m = c * 140;
        var n = c * 90;
        i.width = k;
        i.height = a;
        var h = c * 10;
        var l = c * 25;
        var g = c * 180;
        var o = l / 2;
        var b = g / 2;
        var d = c * 4;
        j.translate(c * -25, c * 1);
        j.translate(m, n);
        j.rotate(-Math.PI / 5);
        Lt(j, -o, -b, l, g, h);
        Kt(j, f[0], f[1], d);
        j.translate(c * -30, c * -25);
        j.rotate(Math.PI / 3);
        Lt(j, -o, -b, l, g, h);
        Kt(j, f[0], f[1], d);
        j.translate(c * 35, c * 30);
        j.rotate(Math.PI / 3);
        Lt(j, -o, -b, l, g, h);
        Kt(j, f[0], f[1], d);
        return i;
    }
    const nd = 15;
    function od(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 145;
        var a = b * 145;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        var h = b * 70;
        f.translate(i, j);
        f.globalAlpha = 0.4;
        Nt(f, 0, 0, h);
        Kt(f, d[0]);
        h = b * 50;
        f.translate(0, 0);
        f.globalAlpha = 0.8;
        Nt(f, 0, 0, h);
        Kt(f, d[0]);
        h = b * 35;
        f.translate(0, 0);
        f.globalAlpha = 0.8;
        Nt(f, 0, 0, h);
        Kt(f, d[1]);
        h = b * 20;
        f.translate(0, 0);
        f.globalAlpha = 0.8;
        Nt(f, 0, 0, h);
        Kt(f, d[2]);
        return e;
    }
    const ad = 8;
    function rd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 205;
        var a = b * 205;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        var h = b * 100;
        f.translate(i, j);
        f.globalAlpha = 1;
        Nt(f, 0, 0, h);
        Kt(f, d[0]);
        return e;
    }
    function sd(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = c * 135;
        var a = c * 190;
        var m = k / 2;
        var n = a / 2;
        i.width = k;
        i.height = a;
        var h = c * 10;
        var l = c * 25;
        var g = c * 180;
        var o = l / 2;
        var b = g / 2;
        var d = c * 4;
        j.translate(m, n);
        j.rotate(-Math.PI / 5);
        j.globalAlpha = 1;
        Lt(j, -o, -b, l, g, h);
        Kt(j, f[0], f[1], d);
        j.translate(0, 0);
        j.rotate(Math.PI / 5);
        j.globalAlpha = 1;
        Lt(j, -o, -b, l, g, h);
        Kt(j, f[0], f[1], d);
        return i;
    }
    const hd = 1;
    function ld(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 370;
        var a = b * 370;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        var h = b * 180;
        f.globalAlpha = 0.2;
        Nt(f, i, j, h);
        Kt(f, d[0]);
        return e;
    }
    const gd = 1;
    const ud = 2;
    function bd(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 220;
        var g = b * 220;
        var a = b * 32;
        var h = b * 4;
        d.width = f;
        d.height = g;
        e.translate(f / 2, g / 2 + b * 10);
        e.globalAlpha = 0.5;
        Nt(e, 0, 0, a);
        Kt(e, c[0], c[0]);
        e.translate(0, b * -8);
        e.globalAlpha = 1;
        Nt(e, 0, 0, a);
        Kt(e, c[1], c[2], h);
        return d;
    }
    function dd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 155;
        d.height = a * 127;
        e.globalAlpha = 0.5;
        e.translate(0, a * 8);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 68);
        e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
        e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
        e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
        e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
        e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -8);
        e.translate(a * 7, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        Kt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 41);
        e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
        e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
        e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
        e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
        e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
        e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
        e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        Kt(e, Mq, c[2], a * 4);
        Nt(e, a * 18, a * 38, a * 14.866068747318506);
        Kt(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 30);
        e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
        e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
        Kt(e, c[1], c[2], a * 4);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 74);
        e.bezierCurveTo(a * 38, a * 77.5, a * 38, a * 77.5, a * 49, a * 81);
        e.bezierCurveTo(a * 54.5, a * 75.5, a * 54.5, a * 75.5, a * 60, a * 70);
        e.bezierCurveTo(a * 64, a * 72, a * 64, a * 72, a * 68, a * 74);
        e.bezierCurveTo(a * 80.5, a * 67.5, a * 80.5, a * 67.5, a * 93, a * 61);
        e.bezierCurveTo(a * 104.5, a * 68, a * 104.5, a * 68, a * 116, a * 75);
        e.bezierCurveTo(a * 120.5, a * 72.5, a * 120.5, a * 72.5, a * 125, a * 70);
        e.bezierCurveTo(a * 129, a * 75, a * 129, a * 75, a * 133, a * 80);
        e.bezierCurveTo(a * 145.5, a * 76.5, a * 145.5, a * 76.5, a * 158, a * 73);
        e.bezierCurveTo(a * 158, a * 87, a * 158, a * 93, a * 155, a * 95);
        e.bezierCurveTo(a * 152.5, a * 96, a * 152.5, a * 96, a * 150, a * 97);
        e.bezierCurveTo(a * 121, a * 85, a * 108, a * 86, a * 93, a * 85);
        e.bezierCurveTo(a * 64, a * 85, a * 52, a * 95, a * 38, a * 99);
        e.bezierCurveTo(a * 36, a * 98.5, a * 36, a * 98.5, a * 34, a * 98);
        e.bezierCurveTo(a * 25, a * 98, a * 27, a * 91, a * 27, a * 76);
        e.closePath();
        Kt(e, c[6], c[7], a * 6);
        return d;
    }
    function vd(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 40;
        var g = b * 40;
        var a = b * 16;
        var h = b * 4;
        d.width = f;
        d.height = g;
        e.translate(f / 2, g / 2);
        e.globalAlpha = 1;
        Nt(e, 0, 0, a);
        Kt(e, c[0], c[1], h);
        return d;
    }
    function md(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 155;
        d.height = a * 127;
        e.globalAlpha = 0.5;
        e.translate(0, a * 8);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 68);
        e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
        e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
        e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
        e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
        e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -8);
        e.translate(a * 7, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        Kt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 41);
        e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
        e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
        e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
        e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
        e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
        e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
        e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        Kt(e, Gj, c[2], a * 4);
        Nt(e, a * 18, a * 38, a * 14.866068747318506);
        Kt(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 30);
        e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
        e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
        Kt(e, c[1], c[2], a * 4);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 68);
        e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
        e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
        e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
        e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
        e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
        e.closePath();
        Kt(e, c[4], c[5], a * 4);
        return d;
    }
    const cd = 4;
    function pd(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = (o = c * 450) / 2;
        var a = (p = c * 145) / 2;
        var m = c * 10;
        var n = c * 300;
        var h = c * 30;
        var l = n / 2;
        var g = h / 2;
        if (f) {
            var o = c * 145;
            var p = c * 450;
            i.width = o;
            i.height = p;
            j.rotate(Math.PI / 2);
            j.save();
            j.globalAlpha = 0.5;
            Lt(j, c * 100, c * -110, n, h, m);
            Kt(j, e[0]);
            j.translate(c * 178, c * -98);
            Lt(j, -l, -g - c * 6, c * 100, c * 100, m);
            Kt(j, e[0]);
            j.translate(c * -50, c * 5);
            Lt(j, c * 220, c * -15, c * 90, c * 90, m);
            Kt(j, e[0]);
            j.restore();
            j.save();
            j.globalAlpha = 1;
            j.translate(c * 250, c * -63);
            Lt(j, -l - c * 20, -g, n, h, m);
            Kt(j, e[1], e[2], 4);
            j.translate(c * -70, c * -40);
            Lt(j, -l - c * 20, -g, c * 100, c * 100, m);
            Kt(j, e[3], e[4], 4);
            j.translate(c * -70, c * 15);
            Lt(j, c * 220, c * -22, c * 90, c * 90, m);
            Kt(j, e[3], e[4], 4);
            Lt(j, c * 230, c * -12, c * 55, c * 55, m);
            Kt(j, e[5]);
            j.translate(c * -70, 0);
            Lt(j, c * -15, c * -2, c * 60, c * 60, m);
            Kt(j, e[5]);
            j.restore();
        } else {
            i.width = o;
            i.height = p;
            j.save();
            j.globalAlpha = 0.5;
            j.translate(k, a + c * 10);
            Lt(j, -l, -g, n, h, m);
            Kt(j, e[0]);
            j.translate(c * -65, c * -25);
            Lt(j, -l, -g - c * 6, c * 100, c * 100, c * 15);
            Kt(j, e[0]);
            j.translate(c * -35, c * -5);
            Lt(j, c * 220, c * -15, c * 90, c * 90, c * 15);
            Kt(j, e[0]);
            j.restore();
            j.save();
            j.globalAlpha = 1;
            j.translate(c * 240, c * 70);
            Lt(j, -l, -g, n, h, m);
            Kt(j, e[1], e[2], 4);
            j.translate(c * -60, c * -40);
            Lt(j, -l - c * 20, -g, c * 100, c * 100, c * 15);
            Kt(j, e[3], e[4], 4);
            j.translate(c * -55, c * 10);
            Lt(j, c * 220, c * -22, c * 90, c * 90, c * 15);
            Kt(j, e[3], e[4], 4);
            Lt(j, c * 240, c * -12, c * 55, c * 55, c * 12);
            Kt(j, e[5]);
            j.translate(c * 45, c * 0);
            Lt(j, c * -145, c * -2, c * 60, c * 60, c * 12);
            Kt(j, e[5]);
            j.restore();
        }
        return i;
    }
    function Cd(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 220;
        var g = b * 220;
        var a = b * 16;
        d.width = f;
        d.height = g;
        e.translate(f / 2, g / 2);
        e.globalAlpha = 0.5;
        Nt(e, 0, 0, a);
        Kt(e, c[0]);
        e.globalAlpha = 1;
        return d;
    }
    function Td(c, d, e, f) {
        var g = document.createElement("canvas");
        var i = g.getContext("2d");
        var a = c * 210;
        var j = c * 205;
        var k = c * 30;
        var h = c * 20;
        var l = c * 200;
        var n = c * 180;
        var b = l / 2;
        var o = n / 2;
        g.width = a;
        g.height = j;
        g.width = c * 419;
        g.height = c * 412;
        if (f == 1) {
            i.save();
            i.translate(c * 10, c * 0);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 117.99996948242188, c * 216.40621948242188);
            i.bezierCurveTo(c * 86.99996948242188, c * 221.40621948242188, c * 74.99996948242188, c * 217.40621948242188, c * 60.999969482421875, c * 205.40621948242188);
            Kt(i, undefined, d[4], c * 3);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 114.99996948242188, c * 227.40621948242188);
            i.bezierCurveTo(c * 90.99996948242188, c * 233.40621948242188, c * 66.99996948242188, c * 228.40621948242188, c * 43.999969482421875, c * 225.40621948242188);
            Kt(i, undefined, d[4], c * 3);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 110.99996948242188, c * 236.40621948242188);
            i.bezierCurveTo(c * 94.99996948242188, c * 244.40621948242188, c * 79.99996948242188, c * 249.40621948242188, c * 60.999969482421875, c * 249.40621948242188);
            Kt(i, undefined, d[4], c * 3);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 111.99996948242188, c * 206.29513549804688);
            i.bezierCurveTo(c * 91.99996948242188, c * 206.29513549804688, c * 87.99996948242188, c * 201.29513549804688, c * 79.99996948242188, c * 192.29513549804688);
            Kt(i, undefined, d[4], c * 3);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 109.99996948242188, c * 249.18402099609375);
            i.bezierCurveTo(c * 97.99996948242188, c * 263.18402099609375, c * 85.99996948242188, c * 271.18402099609375, c * 65.99996948242188, c * 277.18402099609375);
            Kt(i, undefined, d[4], c * 3);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 105.99996948242188, c * 192.18402099609375);
            i.bezierCurveTo(c * 99.49996948242188, c * 197.68402099609375, c * 99.49996948242188, c * 197.68402099609375, c * 92.99996948242188, c * 203.18402099609375);
            i.bezierCurveTo(c * 95.99996948242188, c * 213.18402099609375, c * 95.99996948242188, c * 215.18402099609375, c * 89.99996948242188, c * 219.18402099609375);
            i.bezierCurveTo(c * 91.99996948242188, c * 223.18402099609375, c * 91.99996948242188, c * 226.18402099609375, c * 87.99996948242188, c * 230.18402099609375);
            i.bezierCurveTo(c * 89.99996948242188, c * 234.18402099609375, c * 91.99996948242188, c * 237.18402099609375, c * 90.99996948242188, c * 244.18402099609375);
            i.bezierCurveTo(c * 96.99996948242188, c * 252.18402099609375, c * 96.99996948242188, c * 256.18402099609375, c * 95.99996948242188, c * 262.18402099609375);
            i.bezierCurveTo(c * 106.49996948242188, c * 264.18402099609375, c * 106.49996948242188, c * 264.18402099609375, c * 116.99996948242188, c * 266.18402099609375);
            Kt(i, undefined, d[4], c * 3);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 104.99996948242188, c * 183.29513549804688);
            i.bezierCurveTo(c * 99.99996948242188, c * 193.29513549804688, c * 93.99996948242188, c * 195.29513549804688, c * 89.99996948242188, c * 201.29513549804688);
            i.bezierCurveTo(c * 86.99996948242188, c * 212.29513549804688, c * 85.99996948242188, c * 214.29513549804688, c * 81.99996948242188, c * 215.29513549804688);
            i.bezierCurveTo(c * 83.99996948242188, c * 223.29513549804688, c * 83.99996948242188, c * 227.29513549804688, c * 79.99996948242188, c * 230.29513549804688);
            i.bezierCurveTo(c * 83.99996948242188, c * 235.29513549804688, c * 84.99996948242188, c * 240.29513549804688, c * 79.99996948242188, c * 246.29513549804688);
            i.bezierCurveTo(c * 86.99996948242188, c * 251.29513549804688, c * 91.99996948242188, c * 256.2951354980469, c * 89.99996948242188, c * 266.2951354980469);
            i.bezierCurveTo(c * 102.99996948242188, c * 269.2951354980469, c * 102.99996948242188, c * 269.2951354980469, c * 115.99996948242188, c * 272.2951354980469);
            Kt(i, undefined, d[4], c * 3);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 107.99996948242188, c * 177.85067749023438);
            i.bezierCurveTo(c * 95.99996948242188, c * 187.35067749023438, c * 95.99996948242188, c * 187.35067749023438, c * 83.99996948242188, c * 196.85067749023438);
            i.bezierCurveTo(c * 82.99996948242188, c * 203.85067749023438, c * 80.99996948242188, c * 209.85067749023438, c * 72.99996948242188, c * 210.85067749023438);
            i.bezierCurveTo(c * 73.99996948242188, c * 220.85067749023438, c * 73.99996948242188, c * 221.85067749023438, c * 66.99996948242188, c * 227.85067749023438);
            i.bezierCurveTo(c * 71.99996948242188, c * 235.85067749023438, c * 73.99996948242188, c * 239.85067749023438, c * 71.99996948242188, c * 247.85067749023438);
            i.bezierCurveTo(c * 80.99996948242188, c * 257.8506774902344, c * 81.99996948242188, c * 263.8506774902344, c * 77.99996948242188, c * 271.8506774902344);
            i.bezierCurveTo(c * 95.49996948242188, c * 272.8506774902344, c * 95.49996948242188, c * 272.8506774902344, c * 112.99996948242188, c * 273.8506774902344);
            Kt(i, undefined, d[4], c * 3);
            i.restore();
        } else if (f == 2) {
            i.save();
            i.translate(c * 130, c * 35);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 170.99996948242188, c * 133.85067749023438);
            i.bezierCurveTo(c * 195.99996948242188, c * 129.85067749023438, c * 196.99996948242188, c * 111.85067749023438, c * 200.99996948242188, c * 88.85067749023438);
            Kt(i, Xn, d[4], c * 3);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 169.99996948242188, c * 143.85067749023438);
            i.bezierCurveTo(c * 189.99996948242188, c * 145.85067749023438, c * 207.99996948242188, c * 126.85067749023438, c * 222.99996948242188, c * 100.85067749023438);
            Kt(i, undefined, d[4], c * 3);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 170.99996948242188, c * 157.85067749023438);
            i.bezierCurveTo(c * 193.99996948242188, c * 160.85067749023438, c * 210.99996948242188, c * 151.85067749023438, c * 232.99996948242188, c * 139.85067749023438);
            Kt(i, undefined, d[4], c * 3);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 169.99996948242188, c * 168.85067749023438);
            i.bezierCurveTo(c * 192.99996948242188, c * 175.85067749023438, c * 203.99996948242188, c * 177.85067749023438, c * 245.99996948242188, c * 168.85067749023438);
            Kt(i, Bs, d[4], c * 3);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 167.99996948242188, c * 168.85067749023438);
            i.bezierCurveTo(c * 183.99996948242188, c * 189.85067749023438, c * 191.99996948242188, c * 193.85067749023438, c * 220.99996948242188, c * 196.85067749023438);
            Kt(i, Xk, d[4], c * 3);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 176.99996948242188, c * 117.85067749023438);
            i.bezierCurveTo(c * 181.99996948242188, c * 120.85067749023438, c * 181.99996948242188, c * 120.85067749023438, c * 186.99996948242188, c * 123.85067749023438);
            i.bezierCurveTo(c * 183.99996948242188, c * 137.85067749023438, c * 185.99996948242188, c * 136.85067749023438, c * 190.99996948242188, c * 136.85067749023438);
            i.bezierCurveTo(c * 186.99996948242188, c * 147.85067749023438, c * 189.99996948242188, c * 152.85067749023438, c * 193.99996948242188, c * 155.85067749023438);
            i.bezierCurveTo(c * 187.99996948242188, c * 165.85067749023438, c * 190.99996948242188, c * 169.85067749023438, c * 190.99996948242188, c * 172.85067749023438);
            i.bezierCurveTo(c * 186.99996948242188, c * 183.85067749023438, c * 186.99996948242188, c * 185.85067749023438, c * 189.99996948242188, c * 188.85067749023438);
            i.bezierCurveTo(c * 182.49996948242188, c * 195.35067749023438, c * 182.49996948242188, c * 195.35067749023438, c * 174.99996948242188, c * 201.85067749023438);
            Kt(i, Db, d[4], c * 3);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 176.99996948242188, c * 112.18402099609375);
            i.bezierCurveTo(c * 183.99996948242188, c * 119.18402099609375, c * 186.99996948242188, c * 117.18402099609375, c * 192.99996948242188, c * 116.18402099609375);
            i.bezierCurveTo(c * 191.99996948242188, c * 126.18402099609375, c * 193.99996948242188, c * 130.18402099609375, c * 199.99996948242188, c * 130.18402099609375);
            i.bezierCurveTo(c * 194.99996948242188, c * 145.18402099609375, c * 197.99996948242188, c * 147.18402099609375, c * 201.99996948242188, c * 153.18402099609375);
            i.bezierCurveTo(c * 196.99996948242188, c * 164.18402099609375, c * 197.99996948242188, c * 169.18402099609375, c * 201.99996948242188, c * 174.18402099609375);
            i.bezierCurveTo(c * 194.99996948242188, c * 184.18402099609375, c * 196.99996948242188, c * 187.18402099609375, c * 200.99996948242188, c * 193.18402099609375);
            i.bezierCurveTo(c * 185.99996948242188, c * 195.18402099609375, c * 181.99996948242188, c * 201.18402099609375, c * 174.99996948242188, c * 210.18402099609375);
            Kt(i, undefined, d[4], c * 3);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 176.99996948242188, c * 101.29513549804688);
            i.bezierCurveTo(c * 181.99996948242188, c * 108.29513549804688, c * 189.99996948242188, c * 110.29513549804688, c * 195.99996948242188, c * 107.29513549804688);
            i.bezierCurveTo(c * 197.99996948242188, c * 121.29513549804688, c * 200.99996948242188, c * 122.29513549804688, c * 206.99996948242188, c * 122.29513549804688);
            i.bezierCurveTo(c * 201.99996948242188, c * 138.29513549804688, c * 204.99996948242188, c * 142.29513549804688, c * 211.99996948242188, c * 148.29513549804688);
            i.bezierCurveTo(c * 201.99996948242188, c * 156.29513549804688, c * 205.99996948242188, c * 167.29513549804688, c * 213.99996948242188, c * 173.29513549804688);
            i.bezierCurveTo(c * 204.99996948242188, c * 181.29513549804688, c * 204.99996948242188, c * 187.29513549804688, c * 205.99996948242188, c * 193.29513549804688);
            i.bezierCurveTo(c * 190.99996948242188, c * 198.29513549804688, c * 181.99996948242188, c * 205.29513549804688, c * 174.99996948242188, c * 214.29513549804688);
            Kt(i, undefined, d[4], c * 3);
            i.restore();
        }
        i.translate(g.width / 2, g.height / 2);
        if (!f) {
            i.globalAlpha = 0.5;
            Lt(i, -b, -o, l, n + h, k);
            Kt(i, d[0]);
            if (e) {
                i.rotate(Math.PI);
            }
            i.globalAlpha = 1;
            Lt(i, -b, -o, l, n, k);
            Kt(i, d[1], d[2], 4);
            i.globalAlpha = 1;
            Lt(i, c * 35 - b, c * 20 - o, l - c * 50, n - c * 50, k - c * 10);
            Kt(i, d[3]);
        }
        if (f == 3) {
            i.translate(-g.width / 2, -g.height / 2);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 121, c * 190);
            i.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
            i.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
            i.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
            i.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
            i.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
            i.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
            i.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
            i.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
            i.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
            i.closePath();
            Kt(i, d[4]);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 219, c * 144);
            i.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
            i.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
            i.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
            i.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
            i.closePath();
            Kt(i, d[5]);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 123, c * 214);
            i.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
            i.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
            i.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
            i.closePath();
            Kt(i, d[5]);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 257, c * 199);
            i.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
            i.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
            i.closePath();
            Kt(i, d[5]);
            i.translate(c * -5, c * 55);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 186, c * 123);
            i.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
            i.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
            i.closePath();
            Kt(i, d[5]);
            i.translate(c * 5, c * -55);
            i.translate(c * -5, c * 15);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 171, c * 241);
            i.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
            i.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
            i.closePath();
            Kt(i, d[5]);
        } else if (f == 4) {
            i.translate(-g.width / 2, -g.height / 2);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 30, c * 167);
            i.bezierCurveTo(c * 47, c * 144, c * 64, c * 140, c * 80, c * 147);
            i.bezierCurveTo(c * 95, c * 154, c * 95, c * 159, c * 100, c * 179);
            i.bezierCurveTo(c * 105, c * 202, c * 95, c * 218, c * 69, c * 218);
            i.bezierCurveTo(c * 48, c * 236, c * 26, c * 223, c * 28, c * 213);
            i.bezierCurveTo(c * 28, c * 205, c * 29, c * 199, c * 32, c * 195);
            i.bezierCurveTo(c * 21, c * 183, c * 27, c * 173, c * 30, c * 167);
            i.closePath();
            Kt(i, d[4]);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 26, c * 145);
            i.bezierCurveTo(c * 32, c * 138, c * 37, c * 137, c * 40, c * 139);
            i.bezierCurveTo(c * 43, c * 140, c * 41, c * 150, c * 31, c * 159);
            i.bezierCurveTo(c * 23, c * 166, c * 17, c * 158, c * 26, c * 145);
            i.closePath();
            Kt(i, d[4]);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 13, c * 193);
            i.bezierCurveTo(c * 21, c * 187, c * 30, c * 190, c * 20, c * 202);
            i.bezierCurveTo(c * 13, c * 208, c * 7, c * 202, c * 13, c * 193);
            i.closePath();
            Kt(i, d[4]);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 121, c * 190);
            i.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
            i.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
            i.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
            i.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
            i.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
            i.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
            i.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
            i.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
            i.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
            i.closePath();
            Kt(i, d[4]);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 335, c * 196);
            i.bezierCurveTo(c * 312, c * 208, c * 300, c * 185, c * 309, c * 167);
            i.bezierCurveTo(c * 314, c * 141, c * 339, c * 127, c * 359, c * 144);
            i.bezierCurveTo(c * 363, c * 148, c * 364, c * 150, c * 364, c * 150);
            i.bezierCurveTo(c * 392, c * 143, c * 396, c * 183, c * 378, c * 204);
            i.bezierCurveTo(c * 367, c * 215, c * 339, c * 208, c * 335, c * 196);
            i.closePath();
            Kt(i, d[4]);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 349, c * 212);
            i.bezierCurveTo(c * 339, c * 216, c * 334, c * 208, c * 341, c * 203);
            i.bezierCurveTo(c * 353, c * 198, c * 361, c * 205, c * 349, c * 212);
            i.closePath();
            Kt(i, d[4]);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 46, c * 165);
            i.bezierCurveTo(c * 55, c * 148, c * 85, c * 157, c * 83, c * 175);
            i.bezierCurveTo(c * 99, c * 185, c * 89, c * 212, c * 66, c * 204);
            i.bezierCurveTo(c * 55, c * 212, c * 43, c * 212, c * 41, c * 202);
            i.bezierCurveTo(c * 39, c * 194, c * 42, c * 187, c * 49, c * 185);
            i.bezierCurveTo(c * 44, c * 175, c * 45, c * 172, c * 46, c * 165);
            i.closePath();
            Kt(i, d[4]);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 219, c * 144);
            i.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
            i.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
            i.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
            i.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
            i.closePath();
            Kt(i, d[5]);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 123, c * 214);
            i.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
            i.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
            i.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
            i.closePath();
            Kt(i, d[5]);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 257, c * 199);
            i.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
            i.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
            i.closePath();
            Kt(i, d[5]);
            i.translate(c * -5, c * 55);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 186, c * 123);
            i.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
            i.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
            i.closePath();
            Kt(i, d[5]);
            i.translate(c * 5, c * -55);
            i.translate(c * -5, c * 15);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 171, c * 241);
            i.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
            i.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
            i.closePath();
            Kt(i, d[5]);
            i.beginPath();
            i.lineCap = "round";
            i.lineJoin = "round";
            i.moveTo(c * 367, c * 164);
            i.bezierCurveTo(c * 380, c * 160, c * 391, c * 185, c * 371, c * 189);
            i.bezierCurveTo(c * 362, c * 192, c * 354, c * 191, c * 350, c * 185);
            i.bezierCurveTo(c * 326, c * 205, c * 314, c * 182, c * 316, c * 171);
            i.bezierCurveTo(c * 317, c * 150, c * 332, c * 143, c * 347, c * 147);
            i.bezierCurveTo(c * 361, c * 151, c * 366, c * 158, c * 367, c * 164);
            i.closePath();
            Kt(i, d[4]);
        }
        return g;
    }
    function fd(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 121;
        f.height = b * 130;
        g.translate(0, b * 20);
        if (d == 1) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 6, b * 23);
            g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
            g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
            g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
            g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
            g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
            g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
            g.closePath();
            Kt(g, Ua, c[3], b * 13);
        }
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 6, b * 23);
        g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
        g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
        g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
        g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
        g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
        g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
        g.closePath();
        Kt(g, c[1], c[2], b * 4);
        if (e == 1) {
            g.translate(0, b * 5);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 67, b * 30);
            g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
            Kt(g, undefined, c[0], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 17);
            g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
            Kt(g, undefined, c[0], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 76, b * 8);
            g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
            Kt(g, undefined, c[0], b * 10);
            if (d == 1) {
                g.translate(b * -6, b * -5);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 67, b * 30);
                g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
                Kt(g, undefined, c[3], b * 18);
                g.translate(3, b * 0);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 70, b * 17);
                g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
                Kt(g, ll, c[3], b * 18);
                g.translate(3, b * 0);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 76, b * 8);
                g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
                Kt(g, undefined, c[3], b * 18);
                g.translate(-6, b * 0);
            } else {
                g.translate(b * -6, b * -5);
            }
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 67, b * 30);
            g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
            Kt(g, undefined, c[2], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 17);
            g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
            Kt(g, undefined, c[2], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 76, b * 8);
            g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
            Kt(g, undefined, c[2], b * 10);
        } else {
            if (d == 1) {
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 108, b * 27);
                g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
                g.closePath();
                Kt(g, undefined, c[3], b * 18);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 79, b * 30);
                g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
                g.closePath();
                Kt(g, la, c[3], b * 18);
            } else {
                g.translate(0, b * -5);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 108, b * 27);
                g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
                g.closePath();
                Kt(g, undefined, c[0], b * 7);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 79, b * 30);
                g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
                g.closePath();
                Kt(g, undefined, c[0], b * 7);
                g.translate(0, b * 5);
            }
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 108, b * 27);
            g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
            g.closePath();
            Kt(g, At, c[2], b * 7);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 79, b * 30);
            g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
            g.closePath();
            Kt(g, Ua, c[2], b * 7);
        }
        return f;
    }
    const zd = 3;
    function yd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 100;
        d.height = a * 250;
        e.translate(a * -135, a * -75);
        e.globalAlpha = b ? 0.8 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 178.5, a * 238.03125);
        e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
        e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
        e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
        e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 155.5, a * 239.03125);
        e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
        e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
        e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
        e.closePath();
        Kt(e, c[0]);
        Nt(e, a * 160.5, a * 243.03125, a * 7);
        Kt(e, c[0]);
        Nt(e, a * 227.5, a * 242.03125, a * 7);
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.5, a * 253.03125);
        e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
        e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
        e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
        e.closePath();
        Kt(e, c[0], c[0], a * 5);
        Nt(e, a * 194, a * 298, a * 9);
        Kt(e, c[0], c[0], a * 5);
        e.globalAlpha = 1;
        e.translate(a * -10, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 178.5, a * 238.03125);
        e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
        e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
        e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
        e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
        e.closePath();
        Kt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 155.5, a * 239.03125);
        e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
        e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
        e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
        e.closePath();
        Kt(e, c[1], c[2], a * 5);
        Nt(e, a * 160.5, a * 243.03125, a * 7);
        Kt(e, c[1], c[2], a * 5);
        Nt(e, a * 227.5, a * 242.03125, a * 7);
        Kt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.5, a * 253.03125);
        e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
        e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
        e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
        e.closePath();
        Kt(e, c[1], c[2], a * 7);
        Nt(e, a * 194, a * 298, a * 9);
        Kt(e, c[1], c[2], a * 7);
        return d;
    }
    function wd(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 283;
        f.height = b * 224;
        g.translate(0, b * 15);
        g.globalAlpha = 0.5;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 93, b * 55);
        g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
        g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
        g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
        g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
        g.closePath();
        Kt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 100, b * 33);
        g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
        g.closePath();
        Kt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 181, b * 32);
        g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
        Kt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 225, b * 52);
        g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
        Kt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 34, b * 134);
        g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
        Kt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 249, b * 135);
        g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
        Kt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 56, b * 50);
        g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
        Kt(g, d[0]);
        g.translate(0, b * -15);
        g.globalAlpha = 1;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 100, b * 33);
        g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
        Kt(g, undefined, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 181, b * 32);
        g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
        Kt(g, Yl, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 225, b * 52);
        g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
        Kt(g, Cg, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 34, b * 134);
        g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
        Kt(g, Uj, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 249, b * 135);
        g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
        Kt(g, hj, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 56, b * 50);
        g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
        Kt(g, Bh, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 93, b * 55);
        g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
        g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
        g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
        g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
        g.closePath();
        Kt(g, d[1], d[2], b * 10);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 100, b * 33);
        g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
        Kt(g, Yl, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 181, b * 32);
        g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
        Kt(g, Ua, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 225, b * 52);
        g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
        Kt(g, undefined, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 34, b * 134);
        g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
        Kt(g, Yl, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 249, b * 135);
        g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
        Kt(g, Db, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 56, b * 50);
        g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
        Kt(g, undefined, d[1], b * 20);
        Nt(g, b * 101, b * 155, b * 20.591260281974);
        Kt(g, d[3]);
        Nt(g, b * 180, b * 155, b * 20.591260281974);
        Kt(g, d[3]);
        Nt(g, b * 95, b * 148, b * 7.211102550927978);
        Kt(g, d[4]);
        Nt(g, b * 173, b * 148, b * 7.211102550927978);
        Kt(g, d[4]);
        if (e === 1) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 191, b * 107);
            g.bezierCurveTo(b * 180, b * 104, b * 175, b * 101, b * 180, b * 95);
            g.bezierCurveTo(b * 180, b * 95, b * 181, b * 99, b * 188, b * 103);
            g.bezierCurveTo(b * 191, b * 101, b * 191, b * 95, b * 190, b * 91);
            g.bezierCurveTo(b * 190, b * 91, b * 196, b * 89, b * 195, b * 99);
            g.closePath();
            Kt(g, d[2]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 206, b * 98);
            g.bezierCurveTo(b * 203, b * 95, b * 200, b * 93, b * 198, b * 101);
            g.bezierCurveTo(b * 194, b * 109, b * 193, b * 109, b * 196, b * 110);
            g.bezierCurveTo(b * 206, b * 115, b * 209, b * 114, b * 211, b * 111);
            g.bezierCurveTo(b * 211, b * 106, b * 208, b * 108, b * 203, b * 108);
            g.bezierCurveTo(b * 193, b * 107, b * 204, b * 101, b * 206, b * 99);
            g.closePath();
            Kt(g, d[2]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 172, b * 111);
            g.bezierCurveTo(b * 172, b * 106, b * 174, b * 105, b * 185, b * 109);
            g.bezierCurveTo(b * 190, b * 109, b * 189, b * 114, b * 185, b * 120);
            g.bezierCurveTo(b * 181, b * 125, b * 180, b * 126, b * 176, b * 122);
            g.bezierCurveTo(b * 182, b * 119, b * 187, b * 110, b * 182, b * 112);
            g.closePath();
            Kt(g, d[2]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 202, b * 125);
            g.bezierCurveTo(b * 197, b * 117, b * 193, b * 116, b * 193, b * 120);
            g.bezierCurveTo(b * 192.5, b * 124.5, b * 192.5, b * 124.5, b * 192, b * 129);
            g.bezierCurveTo(b * 188, b * 129, b * 187, b * 124, b * 189, b * 120);
            g.bezierCurveTo(b * 191, b * 110, b * 192, b * 110, b * 200, b * 116);
            g.bezierCurveTo(b * 208, b * 120, b * 207, b * 123, b * 202, b * 125);
            g.closePath();
            Kt(g, d[2]);
        }
        return f;
    }
    function Pd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 469;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 30);
        e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
        e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
        e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
        e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
        e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
        e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
        e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 31);
        e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
        e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
        e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
        e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 328);
        e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
        e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
        e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 74, a * 302);
        e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
        e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
        e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
        e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
        e.closePath();
        Kt(e, c[0]);
        e.save();
        e.translate(a * 51.5, a * 440.5);
        e.rotate(0.2);
        Lt(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
        e.restore();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 73, a * 316);
        e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
        e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 30);
        e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
        e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
        e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
        e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
        e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
        e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
        e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
        e.closePath();
        Kt(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 31);
        e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
        e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
        e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
        e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 30);
        e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
        e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
        e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
        e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
        e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
        e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
        e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
        e.closePath();
        Kt(e, Og, c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 328);
        e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
        e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
        e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
        e.closePath();
        Kt(e, c[4], c[5], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 74, a * 302);
        e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
        e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
        e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
        e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
        e.closePath();
        Kt(e, c[4], c[5], a * 7);
        e.save();
        e.translate(a * 51.5, a * 440.5);
        e.rotate(0.2);
        Lt(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
        e.restore();
        Kt(e, c[4], c[5], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 73, a * 316);
        e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
        e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
        e.closePath();
        Kt(e, c[6]);
        return d;
    }
    function kd(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = Math.max(c.width, b.width);
        var g = Math.max(c.height, b.height);
        d.width = f;
        d.height = g;
        e.drawImage(b, (f - b.width) / 2, (g - b.height) / 2);
        e.drawImage(c, (f - c.width) / 2, (g - c.height) / 2);
        return d;
    }
    function Ad(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
        e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
        e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
        e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
        e.closePath();
        Kt(e, c[0]);
        e.save();
        e.translate(a * 131, a * 425.5);
        e.rotate(0.16);
        Lt(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
        e.restore();
        Kt(e, c[0]);
        Nt(e, a * 122, a * 480, a * 18.439088914585774);
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 371);
        e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
        e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
        e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
        e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
        e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
        e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
        e.closePath();
        Kt(e, c[1], c[2], a * 12.5);
        e.save();
        e.translate(a * 131, a * 425.5);
        e.rotate(0.16);
        Lt(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
        e.restore();
        Kt(e, c[4], c[5], a * 12.5);
        Nt(e, a * 122, a * 480, a * 18.439088914585774);
        Kt(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 371);
        e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
        e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
        e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
        e.closePath();
        Kt(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 345);
        e.bezierCurveTo(a * 142, a * 345, a * 147, a * 346, a * 158, a * 349);
        e.bezierCurveTo(a * 177.5, a * 224.5, a * 177.5, a * 224.5, a * 197, a * 100);
        e.bezierCurveTo(a * 190.5, a * 84.5, a * 190.5, a * 84.5, a * 184, a * 69);
        e.bezierCurveTo(a * 173.5, a * 82, a * 173.5, a * 82, a * 163, a * 95);
        e.closePath();
        Kt(e, c[3]);
        return d;
    }
    function xd(c, d, e) {
        var f = document.createElement("canvas");
        var i = f.getContext("2d");
        var j = c * 105;
        var a = c * 125;
        var k = c * 4;
        var m = c * 10;
        var h = c * 5;
        var l = c * 10;
        var g = c * 110;
        var n = l / 2;
        var b = g / 2;
        f.width = j;
        f.height = a;
        i.save();
        i.globalAlpha = d ? 0.5 : 1;
        i.translate(j / 2 + c * 8, a / 2 + h);
        Lt(i, -n, -b, l, g, m);
        Kt(i, d ? e[0] : e[1]);
        i.translate(c * -130 + h, c * -128 + h);
        i.beginPath();
        i.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
        i.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
        i.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
        i.closePath();
        Kt(i, e[2]);
        i.restore();
        i.translate(j / 2 + 8, a / 2);
        i.globalAlpha = 1;
        Lt(i, -n, -b, l, g, m);
        Kt(i, e[3], e[4], k);
        i.translate(c * -130, c * -125);
        i.beginPath();
        i.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
        i.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
        i.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
        i.closePath();
        Kt(i, e[5], e[6], k);
        return f;
    }
    function Jd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 424;
        d.height = a * 788;
        e.translate(a * 25, a * 25);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 193.5, a * 602.5);
        e.rotate(-0.12);
        Lt(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
        e.restore();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 519);
        e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
        e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
        e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
        e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 175, a * 119);
        e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
        e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
        e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
        e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 518);
        e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
        e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
        e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
        e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
        e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
        e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
        e.closePath();
        Kt(e, c[0]);
        Nt(e, a * 204, a * 693, a * 36.013886210738214);
        Kt(e, c[0]);
        Nt(e, a * 105, a * 518, a * 30);
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 171, a * 535);
        e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
        e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
        e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 244, a * 669);
        e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
        e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
        e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
        e.closePath();
        Kt(e, c[0]);
        e.translate(a * -25, a * -25);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 193.5, a * 602.5);
        e.rotate(-0.12);
        Lt(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
        e.restore();
        Kt(e, c[1], c[2], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 519);
        e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
        e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
        e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
        e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
        e.closePath();
        Kt(e, c[3], c[4], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 175, a * 119);
        e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
        e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
        e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
        e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
        e.closePath();
        Kt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 518);
        e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
        e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
        e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
        e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
        e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
        e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
        e.closePath();
        Kt(e, c[6], c[4], a * 16);
        Nt(e, a * 204, a * 693, a * 36.013886210738214);
        Kt(e, c[6], c[4], a * 16);
        Nt(e, a * 105, a * 518, a * 30);
        Kt(e, c[6], c[4], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 171, a * 535);
        e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
        e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
        e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
        e.closePath();
        Kt(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 244, a * 669);
        e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
        e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
        e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
        e.closePath();
        Kt(e, c[6]);
        Nt(e, a * 204, a * 693, a * 17.029386365926403);
        Kt(e, c[7]);
        Nt(e, a * 106, a * 518, a * 12);
        Kt(e, c[7]);
        return d;
    }
    const Md = 4;
    function Bd(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 283;
        c.height = a * 224;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 100, a * 33);
        d.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
        Kt(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 181, a * 32);
        d.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
        Kt(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 225, a * 52);
        d.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
        Kt(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 34, a * 134);
        d.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
        Kt(d, Gj, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 249, a * 135);
        d.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
        Kt(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 56, a * 50);
        d.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
        Kt(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 93, a * 55);
        d.bezierCurveTo(a * 124, a * 29, a * 179, a * 44, a * 188, a * 52);
        d.bezierCurveTo(a * 207, a * 64, a * 226, a * 94, a * 231, a * 118);
        d.bezierCurveTo(a * 236, a * 145, a * 222, a * 184, a * 193, a * 192);
        d.bezierCurveTo(a * 147, a * 201, a * 116, a * 200, a * 93, a * 193);
        d.bezierCurveTo(a * 61, a * 180, a * 48, a * 147, a * 50, a * 123);
        d.bezierCurveTo(a * 50, a * 93, a * 76, a * 66, a * 92, a * 56);
        d.closePath();
        Kt(d, b[0]);
        return c;
    }
    const Dd = 4;
    function Id(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
        e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
        e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
        e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
        e.closePath();
        Kt(e, c[0]);
        e.save();
        e.translate(a * 129.5, a * 424);
        e.rotate(0.16);
        Lt(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
        e.restore();
        Kt(e, c[0]);
        Nt(e, a * 121, a * 480, a * 20.396078054371138);
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 311);
        e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
        e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
        e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
        e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
        e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
        e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
        e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
        e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
        e.closePath();
        Kt(e, c[1], c[2], a * 12.5);
        e.save();
        e.translate(a * 129.5, a * 424);
        e.rotate(0.16);
        Lt(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
        e.restore();
        Kt(e, c[4], c[5], a * 12.5);
        Nt(e, a * 121, a * 480, a * 20.396078054371138);
        Kt(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 311);
        e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
        e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
        e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
        e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
        e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
        e.closePath();
        Kt(e, c[1], c[2], a * 12.5);
        return d;
    }
    function Ed(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 131;
        d.height = a * 121;
        e.translate(0, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 59);
        e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
        e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
        e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
        e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
        e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
        e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 59);
        e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
        e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
        e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
        e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
        e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
        e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
        e.closePath();
        Kt(e, c[1], c[2], a * 10);
        return d;
    }
    function Sd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 321;
        d.height = a * 284;
        e.translate(a * 100, a * 30);
        e.translate(a * 5, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        Kt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167, a * 120);
        e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
        e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
        e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25, a * 64);
        e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
        e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
        e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
        e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
        e.closePath();
        Kt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 141);
        e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
        e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
        e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
        e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
        e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
        e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
        Kt(e, undefined, c[4], a * 4);
        e.translate(a * -100, a * -30);
        e.translate(a * 10, a * 70);
        e.translate(a * 5, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        Kt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167, a * 120);
        e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
        e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
        e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25, a * 64);
        e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
        e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
        e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
        e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
        e.closePath();
        Kt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 141);
        e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
        e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
        e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
        e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
        e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
        e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
        Kt(e, _r, c[4], a * 4);
        e.translate(a * 20, a * -80);
        e.translate(a * 5, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        Kt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167, a * 120);
        e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
        e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
        e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25, a * 64);
        e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
        e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
        e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
        e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
        e.closePath();
        Kt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 141);
        e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
        e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
        e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
        e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
        e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
        e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
        Kt(e, undefined, c[4], a * 4);
        return d;
    }
    function Qd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 104;
        d.height = a * 112;
        e.translate(0, a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 16, a * 44);
        e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
        e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
        e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
        e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
        e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
        e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 16, a * 44);
        e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
        e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
        e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
        e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
        e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
        e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
        e.closePath();
        Kt(e, c[1], c[2], a * 8);
        return d;
    }
    const _d = 16;
    function Fd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 112, a * 356);
        e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
        e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
        e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
        e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
        e.closePath();
        Kt(e, c[0]);
        e.save();
        e.translate(a * 131, a * 423);
        e.rotate(0.16);
        Lt(e, a * -14, a * -53, a * 28, a * 106, a * 10);
        e.restore();
        Kt(e, c[0]);
        e.save();
        e.translate(a * 122, a * 480);
        e.rotate(1.72);
        ob(e, 4, a * 26.476404589747453, a * 10);
        e.restore();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 210, a * 387);
        e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
        e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
        e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
        e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
        e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
        e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 129, a * 338);
        e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
        e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
        e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
        e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
        e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 112, a * 356);
        e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
        e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
        e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
        e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
        e.closePath();
        Kt(e, c[1], c[2], a * 12.5);
        e.save();
        e.translate(a * 131, a * 423);
        e.rotate(0.16);
        Lt(e, a * -14, a * -53, a * 28, a * 106, a * 10);
        e.restore();
        Kt(e, c[4], c[5], a * 12.5);
        e.save();
        e.translate(a * 122, a * 480);
        e.rotate(1.72);
        ob(e, 4, a * 26.476404589747453, a * 10);
        e.restore();
        Kt(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 210, a * 387);
        e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
        e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
        e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
        e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
        e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
        e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
        e.closePath();
        Kt(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 129, a * 338);
        e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
        e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
        e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
        e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
        e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
        e.closePath();
        Kt(e, c[3]);
        return d;
    }
    const Rd = 0;
    function jd(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        var a = b * 220;
        var i = b * 220;
        var j = b * 100;
        var h = j / 4;
        f.width = a;
        f.height = i;
        g.translate(a / 2, i / 2);
        g.globalAlpha = c ? 0.5 : 1;
        if (!c) {
            g.translate(b * 0, b * -8);
        }
        ob(g, 7, j, h);
        Kt(g, c ? d[0] : d[1]);
        g.globalAlpha = 1;
        if (e == 0) {
            ob(g, 6, j * 0.65, h * 0.65);
            Kt(g, d[2]);
        } else if (e == 1) {
            g.translate(b * 20, b * 20);
            ob(g, 6, j * 0.45, h * 0.4);
            Kt(g, d[2]);
        }
        return f;
    }
    function Ld(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 350;
        d.height = a * 140;
        e.translate(a * -50, a * -150);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 184.5, a * 222.0625);
        e.bezierCurveTo(a * 185.5, a * 184.0625, a * 302.5, a * 171.0625, a * 313.5, a * 222.0625);
        e.bezierCurveTo(a * 330.5, a * 263.0625, a * 181.5, a * 274.0625, a * 184.5, a * 223.0625);
        e.closePath();
        Kt(e, c[0], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131.5, a * 241.0625);
        e.bezierCurveTo(a * 144.5, a * 278.0625, a * 270.5, a * 209.0625, a * 228.5, a * 174.0625);
        e.bezierCurveTo(a * 196.5, a * 147.0625, a * 117.5, a * 196.0625, a * 131.5, a * 240.0625);
        e.closePath();
        Kt(e, c[0], c[1], a * 8);
        Nt(e, a * 270.5, a * 225.0625, a * 15.811388300841896);
        Kt(e, c[2]);
        Nt(e, a * 243.5, a * 225.0625, a * 6.082762530298219);
        Kt(e, c[2]);
        Nt(e, a * 255.5, a * 210.0625, a * 10.816653826391969);
        Kt(e, c[2]);
        Nt(e, a * 167.5, a * 215.0625, a * 15.297058540778355);
        Kt(e, c[2]);
        Nt(e, a * 176.5, a * 204.0625, a * 7.280109889280518);
        Kt(e, c[2]);
        Nt(e, a * 206.5, a * 189.0625, a * 7.280109889280518);
        Kt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 151.5, a * 212.0625);
        e.bezierCurveTo(a * 161.5, a * 204.0625, a * 173.5, a * 214.0625, a * 158.5, a * 221.0625);
        e.bezierCurveTo(a * 145.5, a * 228.0625, a * 144.5, a * 216.0625, a * 151.5, a * 212.0625);
        e.closePath();
        Kt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 194.5, a * 209.0625);
        e.bezierCurveTo(a * 205.5, a * 202.0625, a * 215.5, a * 207.0625, a * 199.5, a * 217.0625);
        e.bezierCurveTo(a * 187.5, a * 224.0625, a * 182.5, a * 217.0625, a * 194.5, a * 209.0625);
        e.closePath();
        Kt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 188.5, a * 183.0625);
        e.bezierCurveTo(a * 201.5, a * 176.0625, a * 213.5, a * 187.0625, a * 193.5, a * 193.0625);
        e.bezierCurveTo(a * 185.5, a * 194.0625, a * 175.5, a * 189.0625, a * 188.5, a * 183.0625);
        e.closePath();
        Kt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 261.5, a * 202.0625);
        e.bezierCurveTo(a * 274.5, a * 201.0625, a * 282.5, a * 214.0625, a * 261.5, a * 215.0625);
        e.bezierCurveTo(a * 246.5, a * 214.0625, a * 248.5, a * 203.0625, a * 261.5, a * 202.0625);
        e.closePath();
        Kt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 240.5, a * 231.0625);
        e.bezierCurveTo(a * 255.5, a * 231.0625, a * 254.5, a * 243.0625, a * 240.5, a * 242.0625);
        e.bezierCurveTo(a * 225.5, a * 239.0625, a * 225.5, a * 232.0625, a * 240.5, a * 231.0625);
        e.closePath();
        Kt(e, c[3], c[4], a * 4);
        return d;
    }
    function Gd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 140;
        var a = b * 150;
        var i = b * 10;
        var j = b * 4;
        e.width = g;
        e.height = a;
        f.translate(b * -50, b * -38 + i);
        f.globalAlpha = c ? 0.5 : 1;
        f.beginPath();
        f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
        f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
        f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
        f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
        f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
        f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
        f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
        f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
        f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
        f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
        f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
        f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
        f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
        f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
        f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
        f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
        f.closePath();
        Kt(f, d[0]);
        f.translate(0, 0 - i);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
        f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
        f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
        f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
        f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
        f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
        f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
        f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
        f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
        f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
        f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
        f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
        f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
        f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
        f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
        f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
        f.closePath();
        Kt(f, d[1], d[2], j);
        return e;
    }
    function Wd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 220;
        var a = b * 230;
        var i = b * 100;
        var j = i / 4;
        var h = b * 20;
        e.width = g;
        e.height = a;
        f.translate(g / 2, a / 2 + h);
        f.globalAlpha = 0.5;
        ob(f, 7, i, j);
        Kt(f, d[0]);
        f.globalAlpha = 1;
        f.translate(0, -h);
        ob(f, 7, i, j);
        Kt(f, d[1]);
        ob(f, 6, i * 0.65, j * 0.65);
        Kt(f, d[2]);
        return e;
    }
    function Od(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 180;
        var a = b * 210;
        var i = (h = b * 60) / 4;
        var j = b * 20;
        e.width = g;
        e.height = a;
        f.save();
        f.translate(g / 2 - b * 0, a / 2 - b * 35 + j);
        f.rotate(Math.PI / -1.8);
        f.globalAlpha = 0.5;
        f.translate(b * 0, b * -20);
        ob(f, 5, h, i);
        Kt(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 10, a / 2 + b * 15 + j);
        f.rotate(Math.PI / 2);
        f.globalAlpha = 0.5;
        f.translate(b * 0, b * -20);
        ob(f, 5, h, i);
        Kt(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 50, a / 2 + b * 40 + j);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 0.5;
        f.translate(0, b * -20);
        ob(f, 5, h, i);
        Kt(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 0, a / 2 - b * 35);
        f.rotate(Math.PI / -1.8);
        f.globalAlpha = 1;
        f.translate(b * 0, b * -20);
        ob(f, 5, h, i);
        Kt(f, d[1]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 10, a / 2 + b * 15);
        f.rotate(Math.PI / 2);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        ob(f, 5, h, i);
        Kt(f, d[1]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 50, a / 2 + b * 40);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        ob(f, 5, h, i);
        Kt(f, d[1]);
        f.restore();
        var h;
        i = (h = b * 30) / 4;
        f.save();
        f.translate(g / 2 + b * 5, a / 2 - b * 20);
        f.rotate(Math.PI / -1.8);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        ob(f, 5, h, i);
        Kt(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 0, a / 2 + b * 10);
        f.rotate(Math.PI / 2);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        ob(f, 5, h, i);
        Kt(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 45, a / 2 + b * 35);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        ob(f, 5, h, i);
        Kt(f, d[2]);
        f.restore();
        Nt(f, g / 2 - b * 7, a / 2 + b * 7, 5);
        Kt(f, d[2]);
        return e;
    }
    function Nd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 118;
        d.height = a * 114;
        e.translate(0, a * 10);
        Nt(e, a * 42, a * 43, a * 24.758836806279895);
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 90);
        e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
        e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87, a * 45);
        e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
        e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
        e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
        e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
        e.closePath();
        Kt(e, c[0]);
        e.translate(0, a * -10);
        Nt(e, a * 42, a * 43, a * 24.758836806279895);
        Kt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 90);
        e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
        e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
        e.closePath();
        Kt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87, a * 45);
        e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
        e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
        e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
        e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
        e.closePath();
        Kt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 16);
        e.bezierCurveTo(a * 55, a * 19, a * 54, a * 20, a * 55, a * 22);
        e.bezierCurveTo(a * 52, a * 24.5, a * 52, a * 24.5, a * 49, a * 27);
        e.bezierCurveTo(a * 45, a * 25, a * 45, a * 25, a * 41, a * 23);
        e.bezierCurveTo(a * 45, a * 19, a * 48, a * 16, a * 52, a * 16);
        e.closePath();
        Kt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 62, a * 30);
        e.bezierCurveTo(a * 66, a * 29, a * 64, a * 30, a * 66, a * 30);
        e.bezierCurveTo(a * 67, a * 31, a * 67, a * 31, a * 68, a * 32);
        e.bezierCurveTo(a * 66.5, a * 33.5, a * 66.5, a * 33.5, a * 65, a * 35);
        e.bezierCurveTo(a * 63.5, a * 32.5, a * 63.5, a * 32.5, a * 62, a * 30);
        e.closePath();
        Kt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 29, a * 21);
        e.bezierCurveTo(a * 31, a * 22, a * 31, a * 26, a * 29, a * 29);
        e.bezierCurveTo(a * 26, a * 28.5, a * 26, a * 28.5, a * 23, a * 28);
        e.bezierCurveTo(a * 23, a * 26.5, a * 23, a * 26.5, a * 23, a * 25);
        e.bezierCurveTo(a * 25, a * 23, a * 25, a * 23, a * 27, a * 21);
        e.closePath();
        Kt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 18, a * 36);
        e.bezierCurveTo(a * 23, a * 36, a * 24, a * 42, a * 19, a * 46);
        e.bezierCurveTo(a * 12, a * 39, a * 15, a * 38, a * 18, a * 37);
        e.closePath();
        Kt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 34);
        e.bezierCurveTo(a * 35, a * 36, a * 36, a * 39, a * 32, a * 45);
        e.bezierCurveTo(a * 25, a * 46, a * 25, a * 44, a * 30, a * 34);
        e.closePath();
        Kt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59, a * 35);
        e.bezierCurveTo(a * 58, a * 27, a * 57, a * 27, a * 52, a * 31);
        e.bezierCurveTo(a * 50, a * 36, a * 53, a * 38, a * 58, a * 36);
        e.closePath();
        Kt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 63, a * 46);
        e.bezierCurveTo(a * 64.5, a * 46.5, a * 64.5, a * 46.5, a * 66, a * 47);
        e.bezierCurveTo(a * 70, a * 50, a * 70, a * 53, a * 61, a * 55);
        e.bezierCurveTo(a * 62, a * 50.5, a * 62, a * 50.5, a * 63, a * 46);
        e.closePath();
        Kt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 42);
        e.bezierCurveTo(a * 47, a * 41, a * 53, a * 47, a * 46, a * 51);
        e.bezierCurveTo(a * 38, a * 49, a * 39, a * 46, a * 41, a * 43);
        e.closePath();
        Kt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 57);
        e.bezierCurveTo(a * 54, a * 57, a * 54, a * 58, a * 55, a * 61);
        e.bezierCurveTo(a * 54, a * 63, a * 52, a * 64, a * 48, a * 65);
        e.closePath();
        Kt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 52);
        e.bezierCurveTo(a * 25, a * 51, a * 27, a * 50, a * 28, a * 54);
        e.bezierCurveTo(a * 27, a * 58, a * 24, a * 58, a * 22, a * 58);
        e.bezierCurveTo(a * 21, a * 55.5, a * 21, a * 55.5, a * 20, a * 53);
        e.closePath();
        Kt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 61);
        e.bezierCurveTo(a * 37, a * 61, a * 39, a * 63, a * 39, a * 68);
        e.bezierCurveTo(a * 36, a * 68.5, a * 36, a * 68.5, a * 33, a * 69);
        e.bezierCurveTo(a * 30.5, a * 67.5, a * 30.5, a * 67.5, a * 28, a * 66);
        e.closePath();
        Kt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 45);
        e.bezierCurveTo(a * 90, a * 46.5, a * 90, a * 46.5, a * 92, a * 48);
        e.bezierCurveTo(a * 92, a * 50, a * 92, a * 50, a * 92, a * 52);
        e.closePath();
        Kt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96, a * 53);
        e.bezierCurveTo(a * 97.5, a * 55, a * 97.5, a * 55, a * 99, a * 57);
        e.bezierCurveTo(a * 97.5, a * 59.5, a * 97.5, a * 59.5, a * 96, a * 62);
        e.bezierCurveTo(a * 93.5, a * 60.5, a * 93.5, a * 60.5, a * 91, a * 59);
        e.bezierCurveTo(a * 91.5, a * 57, a * 91.5, a * 57, a * 92, a * 55);
        e.closePath();
        Kt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 92, a * 71);
        e.bezierCurveTo(a * 94.5, a * 70.5, a * 94.5, a * 70.5, a * 97, a * 70);
        e.bezierCurveTo(a * 98.5, a * 72.5, a * 98.5, a * 72.5, a * 100, a * 75);
        e.bezierCurveTo(a * 97, a * 76.5, a * 97, a * 76.5, a * 94, a * 78);
        e.closePath();
        Kt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 95, a * 82);
        e.bezierCurveTo(a * 96, a * 83, a * 96, a * 83, a * 97, a * 84);
        e.bezierCurveTo(a * 97, a * 85.5, a * 97, a * 85.5, a * 97, a * 87);
        e.bezierCurveTo(a * 93.5, a * 87.5, a * 93.5, a * 87.5, a * 90, a * 88);
        e.closePath();
        Kt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 72);
        e.bezierCurveTo(a * 89, a * 76, a * 88, a * 81, a * 85, a * 82);
        e.bezierCurveTo(a * 80, a * 80, a * 82, a * 78, a * 85, a * 72);
        e.closePath();
        Kt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 86);
        e.bezierCurveTo(a * 84, a * 88, a * 86, a * 88, a * 85, a * 93);
        e.bezierCurveTo(a * 80, a * 96, a * 79, a * 96, a * 76, a * 91);
        e.closePath();
        Kt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84, a * 46);
        e.bezierCurveTo(a * 93, a * 51, a * 91, a * 62, a * 80, a * 78);
        e.bezierCurveTo(a * 74, a * 86, a * 66, a * 90, a * 60, a * 86);
        e.bezierCurveTo(a * 55, a * 79, a * 57, a * 73, a * 67, a * 57);
        e.bezierCurveTo(a * 71, a * 51, a * 79, a * 44, a * 84, a * 46);
        e.closePath();
        Kt(e, c[5], c[6], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 76, a * 60);
        e.bezierCurveTo(a * 80, a * 66, a * 75, a * 74, a * 68, a * 74);
        e.bezierCurveTo(a * 60, a * 64, a * 68, a * 59, a * 76, a * 59);
        e.closePath();
        Kt(e, c[7], c[8], a * 5);
        return d;
    }
    function Hd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 120;
        var a = b * 150;
        var i = b * 60;
        var j = i / 4;
        var h = b * 15;
        e.width = g;
        e.height = a;
        f.save();
        f.translate(g / 2 + b * 0, a / 2 + b * 0 + h);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 0.5;
        ob(f, 8, i, j);
        Kt(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 11, a / 2 + b * 12);
        f.globalAlpha = 1;
        f.rotate(Math.PI / 3);
        f.translate(0, -h);
        ob(f, 8, i, j);
        Kt(f, d[1]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 9, a / 2 - b * 12);
        f.rotate(Math.PI / 2.8);
        ob(f, 5, i * 0.5, j * 0.4);
        Kt(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 19, a / 2 + b * 5);
        f.rotate(Math.PI / 1);
        ob(f, 5, i * 0.5, j * 0.4);
        Kt(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 8, a / 2 + b * 20);
        f.rotate(Math.PI / 2.25);
        ob(f, 5, i * 0.5, j * 0.4);
        Kt(f, d[2]);
        f.restore();
        return e;
    }
    function qd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 217;
        d.height = a * 215;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 113);
        e.bezierCurveTo(a * 135, a * 98, a * 136, a * 96, a * 142, a * 97);
        e.bezierCurveTo(a * 167, a * 106, a * 167, a * 106, a * 171, a * 109);
        e.bezierCurveTo(a * 173, a * 120, a * 173, a * 134, a * 169, a * 141);
        e.bezierCurveTo(a * 140, a * 149.5, a * 140, a * 149.5, a * 111, a * 158);
        e.closePath();
        Kt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154, a * 103);
        e.bezierCurveTo(a * 167, a * 91, a * 175, a * 87, a * 176, a * 94);
        e.bezierCurveTo(a * 175, a * 102, a * 176, a * 102, a * 186, a * 103);
        e.bezierCurveTo(a * 191, a * 104, a * 192, a * 105, a * 185, a * 116);
        e.bezierCurveTo(a * 183, a * 120, a * 191, a * 124, a * 189, a * 129);
        e.bezierCurveTo(a * 185, a * 139, a * 178, a * 134, a * 166, a * 131);
        e.closePath();
        Kt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60, a * 46);
        e.bezierCurveTo(a * 60, a * 34, a * 60, a * 29, a * 56, a * 19);
        e.bezierCurveTo(a * 52, a * 12, a * 52, a * 16, a * 49, a * 24);
        e.bezierCurveTo(a * 48, a * 27, a * 46, a * 28, a * 39, a * 27);
        e.bezierCurveTo(a * 33, a * 26, a * 34, a * 31, a * 35, a * 37);
        e.bezierCurveTo(a * 36, a * 41, a * 27, a * 46, a * 29, a * 52);
        e.bezierCurveTo(a * 36, a * 55, a * 35, a * 56, a * 31, a * 59);
        e.bezierCurveTo(a * 27, a * 65, a * 32, a * 64, a * 35, a * 62);
        e.closePath();
        Kt(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46, a * 50);
        e.bezierCurveTo(a * 51, a * 35, a * 70, a * 32, a * 78, a * 29);
        e.bezierCurveTo(a * 84, a * 27, a * 113, a * 36, a * 127, a * 41);
        e.bezierCurveTo(a * 140, a * 47, a * 147, a * 69, a * 137, a * 73);
        e.bezierCurveTo(a * 124, a * 92, a * 117, a * 92, a * 109, a * 94);
        e.bezierCurveTo(a * 101, a * 96, a * 89, a * 92, a * 65, a * 83);
        e.bezierCurveTo(a * 54, a * 80, a * 46, a * 58, a * 46, a * 51);
        e.closePath();
        Kt(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 40);
        e.bezierCurveTo(a * 49, a * 34, a * 49, a * 34, a * 47, a * 28);
        e.bezierCurveTo(a * 38, a * 28, a * 34, a * 27, a * 37, a * 37);
        e.bezierCurveTo(a * 43, a * 40.5, a * 43, a * 40.5, a * 49, a * 44);
        e.closePath();
        Kt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 29, a * 48);
        e.bezierCurveTo(a * 38, a * 49, a * 38, a * 49, a * 47, a * 50);
        e.bezierCurveTo(a * 46.5, a * 51.5, a * 46.5, a * 51.5, a * 46, a * 53);
        e.bezierCurveTo(a * 40, a * 53.5, a * 40, a * 53.5, a * 34, a * 54);
        e.bezierCurveTo(a * 29, a * 51, a * 32, a * 51.5, a * 30, a * 49);
        e.closePath();
        Kt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 89, a * 61);
        e.bezierCurveTo(a * 101, a * 70, a * 109, a * 90, a * 102, a * 90);
        e.bezierCurveTo(a * 97, a * 91, a * 87, a * 91, a * 60, a * 80);
        e.bezierCurveTo(a * 48, a * 65, a * 46, a * 56, a * 48, a * 53);
        e.bezierCurveTo(a * 50, a * 52, a * 66, a * 56, a * 89, a * 61);
        e.closePath();
        Kt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 99, a * 59);
        e.bezierCurveTo(a * 115, a * 45, a * 125, a * 42, a * 129, a * 47);
        e.bezierCurveTo(a * 138, a * 56, a * 140, a * 63, a * 138, a * 67);
        e.bezierCurveTo(a * 131, a * 80, a * 122, a * 87, a * 114, a * 90);
        e.bezierCurveTo(a * 105, a * 80, a * 95, a * 62, a * 98, a * 61);
        e.closePath();
        Kt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 62);
        e.bezierCurveTo(a * 139, a * 45, a * 153, a * 40, a * 150, a * 48);
        e.bezierCurveTo(a * 145, a * 57, a * 157, a * 63, a * 157, a * 70);
        e.bezierCurveTo(a * 157, a * 74, a * 142, a * 77, a * 142, a * 85);
        e.bezierCurveTo(a * 143, a * 91, a * 141, a * 92, a * 135, a * 90);
        e.bezierCurveTo(a * 132, a * 90, a * 132, a * 96, a * 124, a * 99);
        e.bezierCurveTo(a * 118, a * 93, a * 116, a * 77, a * 116, a * 64);
        e.closePath();
        Kt(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 130);
        e.bezierCurveTo(a * 157, a * 115, a * 165, a * 111, a * 167, a * 115);
        e.bezierCurveTo(a * 170, a * 117, a * 171, a * 135, a * 167, a * 141);
        e.bezierCurveTo(a * 135.5, a * 149.5, a * 135.5, a * 149.5, a * 104, a * 158);
        e.closePath();
        Kt(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 119);
        e.bezierCurveTo(a * 46, a * 120, a * 40, a * 118, a * 34, a * 116);
        e.bezierCurveTo(a * 28, a * 111, a * 41, a * 112, a * 39, a * 108);
        e.bezierCurveTo(a * 36, a * 100, a * 49, a * 102, a * 53, a * 95);
        e.bezierCurveTo(a * 57, a * 84, a * 58, a * 85, a * 63, a * 93);
        e.bezierCurveTo(a * 68, a * 96, a * 72, a * 94, a * 80, a * 88);
        e.bezierCurveTo(a * 80, a * 96, a * 78, a * 107, a * 66, a * 115);
        e.closePath();
        Kt(e, c[9], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 64);
        e.bezierCurveTo(a * 133.5, a * 57, a * 133.5, a * 57, a * 149, a * 50);
        e.bezierCurveTo(a * 145, a * 54, a * 154, a * 65, a * 157, a * 68);
        e.bezierCurveTo(a * 138.5, a * 66.5, a * 138.5, a * 66.5, a * 120, a * 65);
        e.closePath();
        Kt(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 65);
        e.bezierCurveTo(a * 129, a * 77, a * 129, a * 77, a * 140, a * 89);
        e.bezierCurveTo(a * 131, a * 89, a * 130, a * 92, a * 128, a * 96);
        e.bezierCurveTo(a * 123.5, a * 82, a * 123.5, a * 82, a * 119, a * 68);
        e.closePath();
        Kt(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 112);
        e.bezierCurveTo(a * 63, a * 108, a * 78, a * 111, a * 88, a * 112);
        e.bezierCurveTo(a * 98, a * 122, a * 117, a * 136, a * 125, a * 157);
        e.bezierCurveTo(a * 123, a * 180, a * 123, a * 185, a * 118, a * 186);
        e.bezierCurveTo(a * 101, a * 190, a * 89, a * 191, a * 79, a * 187);
        e.bezierCurveTo(a * 53, a * 165, a * 50, a * 153, a * 47, a * 144);
        e.bezierCurveTo(a * 46, a * 128, a * 46, a * 124, a * 50, a * 112);
        e.closePath();
        Kt(e, c[9], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 50, a * 114);
        e.bezierCurveTo(a * 81, a * 149, a * 80, a * 147, a * 80, a * 149);
        e.bezierCurveTo(a * 82, a * 155, a * 80, a * 182, a * 74, a * 182);
        e.bezierCurveTo(a * 60, a * 172, a * 52, a * 157, a * 47, a * 144);
        e.closePath();
        Kt(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 85, a * 152);
        e.bezierCurveTo(a * 99, a * 150, a * 109, a * 152, a * 119, a * 156);
        e.bezierCurveTo(a * 122, a * 163, a * 122, a * 174, a * 117, a * 182);
        e.closePath();
        e.bezierCurveTo(a * 93, a * 188, a * 82, a * 187, a * 83, a * 179);
        Kt(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104, a * 166);
        e.bezierCurveTo(a * 133, a * 165, a * 142, a * 168, a * 137, a * 173);
        e.bezierCurveTo(a * 127, a * 177, a * 137, a * 195, a * 126, a * 196);
        e.bezierCurveTo(a * 112, a * 195, a * 112, a * 194, a * 109, a * 199);
        e.bezierCurveTo(a * 105, a * 205, a * 102, a * 195, a * 96, a * 197);
        e.bezierCurveTo(a * 84, a * 201, a * 88, a * 198, a * 90, a * 187);
        e.bezierCurveTo(a * 96, a * 171, a * 97, a * 170, a * 103, a * 167);
        e.closePath();
        Kt(e, c[9], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 168);
        e.bezierCurveTo(a * 118, a * 172.5, a * 118, a * 172.5, a * 131, a * 177);
        e.bezierCurveTo(a * 133, a * 190, a * 132, a * 199, a * 116, a * 194);
        e.bezierCurveTo(a * 110, a * 182, a * 110, a * 182, a * 104, a * 170);
        e.closePath();
        Kt(e, c[10]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 169);
        e.bezierCurveTo(a * 100.5, a * 182, a * 100.5, a * 182, a * 99, a * 195);
        e.bezierCurveTo(a * 93.5, a * 196.5, a * 93.5, a * 196.5, a * 88, a * 198);
        e.bezierCurveTo(a * 94, a * 176, a * 96, a * 174, a * 101, a * 168);
        e.closePath();
        Kt(e, c[9], c[9], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 107);
        e.bezierCurveTo(a * 64, a * 101, a * 64, a * 101, a * 64, a * 95);
        e.bezierCurveTo(a * 57, a * 86, a * 57, a * 84, a * 53, a * 97);
        e.bezierCurveTo(a * 55, a * 103.5, a * 55, a * 103.5, a * 57, a * 110);
        e.closePath();
        Kt(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 40, a * 108);
        e.bezierCurveTo(a * 46.5, a * 111, a * 46.5, a * 111, a * 53, a * 114);
        e.bezierCurveTo(a * 50.5, a * 117, a * 50.5, a * 117, a * 48, a * 120);
        e.bezierCurveTo(a * 40.5, a * 117.5, a * 40.5, a * 117.5, a * 33, a * 115);
        e.bezierCurveTo(a * 36, a * 112, a * 36, a * 112, a * 39, a * 109);
        e.closePath();
        Kt(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 189, a * 106);
        e.bezierCurveTo(a * 178.5, a * 110.5, a * 178.5, a * 110.5, a * 168, a * 115);
        e.bezierCurveTo(a * 168.5, a * 119, a * 168.5, a * 119, a * 169, a * 123);
        e.bezierCurveTo(a * 179, a * 124.5, a * 179, a * 124.5, a * 189, a * 126);
        e.bezierCurveTo(a * 182, a * 118, a * 183, a * 115, a * 188, a * 106);
        e.closePath();
        Kt(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 69, a * 178);
        e.bezierCurveTo(a * 69, a * 141, a * 70, a * 136, a * 77, a * 137);
        e.bezierCurveTo(a * 88, a * 133, a * 101, a * 134, a * 108, a * 137);
        Kt(e, Og, c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 161);
        e.bezierCurveTo(a * 54, a * 124, a * 55, a * 119, a * 62, a * 119);
        e.bezierCurveTo(a * 74, a * 117, a * 85, a * 117, a * 93, a * 119);
        Kt(e, undefined, c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 91, a * 29);
        e.bezierCurveTo(a * 74, a * 33, a * 62, a * 46, a * 57, a * 54);
        e.bezierCurveTo(a * 57, a * 63, a * 68, a * 76, a * 77, a * 87);
        Kt(e, undefined, c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107, a * 33);
        e.bezierCurveTo(a * 82, a * 51, a * 80, a * 52, a * 79, a * 59);
        e.bezierCurveTo(a * 78, a * 65, a * 93, a * 86, a * 101, a * 93);
        Kt(e, undefined, c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 98);
        e.bezierCurveTo(a * 126.5, a * 103, a * 126.5, a * 103, a * 123, a * 108);
        e.bezierCurveTo(a * 133.5, a * 107, a * 133.5, a * 107, a * 144, a * 106);
        e.bezierCurveTo(a * 138.5, a * 110, a * 138.5, a * 110, a * 133, a * 114);
        e.bezierCurveTo(a * 142, a * 114, a * 142, a * 114, a * 151, a * 114);
        e.bezierCurveTo(a * 146.5, a * 119.5, a * 146.5, a * 119.5, a * 142, a * 125);
        e.bezierCurveTo(a * 146.5, a * 127, a * 146.5, a * 127, a * 151, a * 129);
        e.bezierCurveTo(a * 147.5, a * 132, a * 147.5, a * 132, a * 144, a * 135);
        e.bezierCurveTo(a * 148, a * 137, a * 148, a * 137, a * 152, a * 139);
        e.bezierCurveTo(a * 149, a * 142.5, a * 149, a * 142.5, a * 146, a * 146);
        Kt(e, ll, c[3], a * 4);
        return d;
    }
    function Ud(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * c * 2;
        var a = c * b * 2;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        f.translate(i, j);
        Nt(f, 0, 0, b * c);
        Kt(f, d);
        return e;
    }
    function Yd(c, e, f, i, j, k, n, o, p, h, l) {
        if (la === l) {
            l = 0;
        }
        var q = document.createElement("canvas");
        var r = q.getContext("2d");
        k = k ? k * c : 0;
        var b = Math.floor(f * c);
        r.font = b + "px Baloo Paaji";
        r.lineJoin = "round";
        o *= c;
        var t = n ? o * 2 : 0;
        if (p) {
            var u = Math.min(r.measureText(e).width + c * 2 + t, p);
        } else {
            u = r.measureText(e).width + c * 2 + t + c * l * 2;
        }
        b = (b + k + l) * c + t;
        q.width = u;
        q.height = b;
        if (n) {
            r.fillStyle = n;
            Lt(r, 0, 0, u, b, o * 2);
            r.fill();
            r.translate(o, o);
        }
        r.textBaseline = "middle";
        r.font = f + "px Baloo Paaji";
        r.lineJoin = "round";
        if (j) {
            r.beginPath();
            r.fillStyle = j;
            r.fillText(e, 0, b / 2 + k - t / 2, u);
        }
        r.beginPath();
        if (h) {
            r.strokeStyle = h;
            r.lineWidth = l;
            r.strokeText(e, l, (b - t) / 2, u);
        }
        r.fillStyle = i;
        r.fillText(e, l, (b - t) / 2, u);
        return q;
    }
    function Kd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.translate(a * -20, a * -20);
        e.save();
        e.translate(a * 132, a * 423);
        e.rotate(0.16);
        Lt(e, a * -14, a * -61, a * 28, a * 122, a * 10);
        e.restore();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 344);
        e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
        e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
        e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
        e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
        e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 328);
        e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
        e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
        e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
        e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
        e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
        e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
        e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 121, a * 332);
        e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
        e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
        e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
        e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
        e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 463);
        e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
        e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
        e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
        e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.save();
        e.translate(a * 132, a * 423);
        e.rotate(0.16);
        Lt(e, a * -14, a * -61, a * 28, a * 122, a * 10);
        e.restore();
        Kt(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 344);
        e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
        e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
        e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
        e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
        e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
        e.closePath();
        Kt(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 328);
        e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
        e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
        e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
        e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
        e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
        e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
        e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
        e.closePath();
        Kt(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 121, a * 332);
        e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
        e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
        e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
        e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
        e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 463);
        e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
        e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
        e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
        e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
        e.closePath();
        Kt(e, c[1], c[2], a * 12.5);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143, a * 346);
        e.bezierCurveTo(a * 125, a * 352, a * 125, a * 352, a * 107, a * 358);
        e.bezierCurveTo(a * 124, a * 363, a * 140, a * 368, a * 141, a * 368);
        e.bezierCurveTo(a * 156.5, a * 367, a * 156.5, a * 367, a * 172, a * 366);
        e.closePath();
        Kt(e, c[3]);
        return d;
    }
    function Vd(b, c, d, e, f) {
        var g = document.createElement("canvas");
        var a = g.getContext("2d");
        if (e == 0) {
            var i = b * 270;
            var j = b * 250;
            g.width = i;
            g.height = j;
            a.beginPath();
            a.moveTo(b * 140, b * 3);
            a.translate(b * -25, b * -20);
            a.bezierCurveTo(b * 218, b * 31, b * 251, b * 61, b * 265, b * 85);
            a.bezierCurveTo(b * 278, b * 108, b * 295, b * 160, b * 285, b * 195);
            a.bezierCurveTo(b * 271, b * 242, b * 213, b * 268, b * 188, b * 266);
            a.bezierCurveTo(b * 139, b * 262, b * 70, b * 244, b * 47, b * 204);
            a.bezierCurveTo(b * 20, b * 158, b * 35, b * 78, b * 59, b * 56);
            a.bezierCurveTo(b * 90, b * 28, b * 124, b * 23, b * 140, b * 23);
            a.closePath();
            Kt(a, d[0]);
        } else if (e == 1) {
            i = b * 430;
            j = b * 350;
            g.width = i;
            g.height = j;
            a.beginPath();
            a.moveTo(b * 180, b * 5);
            a.translate(b * -30, b * -60);
            a.bezierCurveTo(b * 283, b * 60, b * 265, b * 163, b * 335, b * 206);
            a.bezierCurveTo(b * 376, b * 231, b * 492, b * 299, b * 434, b * 357);
            a.bezierCurveTo(b * 371, b * 421, b * 289, b * 394, b * 255, b * 386);
            a.bezierCurveTo(b * 218, b * 377, b * 91, b * 359, b * 50, b * 272);
            a.bezierCurveTo(b * 12, b * 192, b * 107, b * 75, b * 178, b * 69);
            a.closePath();
            Kt(a, d[0]);
        } else if (e == 2) {
            i = b * 400;
            j = b * 300;
            g.width = i;
            g.height = j;
            a.beginPath();
            a.moveTo(b * 80, b * 52);
            a.translate(b * -40, b * -30);
            a.bezierCurveTo(b * 124, b * 77, b * 241, b * 22, b * 311, b * 65);
            a.bezierCurveTo(b * 352, b * 90, b * 404, b * 176, b * 346, b * 234);
            a.bezierCurveTo(b * 283, b * 298, b * 179, b * 299, b * 145, b * 291);
            a.bezierCurveTo(b * 108, b * 282, b * 100, b * 239, b * 63, b * 205);
            a.bezierCurveTo(b * 37, b * 181, b * 45, b * 131, b * 80, b * 107);
            a.closePath();
            Kt(a, d[0]);
        }
        return g;
    }
    function Xd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 70;
        var a = b * 90;
        var i = b * 4;
        var j = b * 5;
        e.width = g;
        e.height = a;
        f.save();
        f.translate(b * -80, b * -70 + j);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        Kt(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * -80, b * -70 + j);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
        f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
        f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
        f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
        f.closePath();
        Kt(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * -80, b * -70 + j);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
        f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
        f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
        f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
        f.closePath();
        Kt(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * 3, b * -93 + j);
        f.rotate(Math.PI / 5);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        Kt(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * -80, b * -70);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        Kt(f, d[0], d[1], i);
        f.restore();
        f.save();
        f.translate(b * -80, b * -70);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
        f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
        f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
        f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
        f.closePath();
        Kt(f, d[0], d[1], i);
        f.restore();
        f.save();
        f.translate(b * -80, b * -70);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
        f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
        f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
        f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
        f.closePath();
        Kt(f, d[0], d[1], i);
        f.restore();
        f.save();
        f.translate(b * 3, b * -93);
        f.rotate(Math.PI / 5);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        Kt(f, d[0], d[1], i);
        f.restore();
        return e;
    }
    function Zd(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 80;
        c.height = a * 100;
        d.scale(0.5, 0.5);
        d.translate(10, 15);
        d.globalAlpha = 0.5;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 47, a * 5);
        d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
        d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
        d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
        d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
        d.closePath();
        Kt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 17, a * 70);
        d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
        Kt(d, T, b[0], a * 10);
        d.translate(0, -10);
        d.globalAlpha = 1;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 47, a * 5);
        d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
        d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
        d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
        d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
        d.closePath();
        Kt(d, b[1], b[2], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 17, a * 70);
        d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
        Kt(d, Xk, b[2], a * 8);
        d.globalAlpha = 0.5;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 17, a * 70);
        d.bezierCurveTo(a * 33, a * 52, a * 39, a * 33, a * 48, a * 7);
        Kt(d, undefined, b[2], a * 8);
        return c;
    }
    function Ot(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 18;
        var a = b * 18;
        e.width = g;
        e.height = a;
        var i = b * 9;
        var j = b * 9;
        var k = b * 8;
        f.save();
        f.translate(i, j);
        f.globalAlpha = 1;
        Nt(f, 0, 0, k);
        Kt(f, d[0]);
        k = b * 3;
        i = 0;
        j = b * -3;
        f.translate(i, j);
        f.globalAlpha = 1;
        Nt(f, 0, 0, k);
        Kt(f, d[1]);
        f.restore();
        return e;
    }
    function Pt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 154;
        d.height = a * 261;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125, a * 69);
        e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
        e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
        e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
        e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
        e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
        e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
        e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
        e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
        e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125, a * 69);
        e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
        e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
        e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
        e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
        e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
        e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
        e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
        e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
        e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
        e.closePath();
        Kt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 43);
        e.bezierCurveTo(a * 31, a * 61, a * 43, a * 70, a * 51, a * 75);
        e.bezierCurveTo(a * 48, a * 84, a * 41, a * 89, a * 33, a * 86);
        e.bezierCurveTo(a * 23, a * 88, a * 20, a * 76, a * 23, a * 62);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 45, a * 29);
        e.bezierCurveTo(a * 49, a * 45, a * 61, a * 54, a * 64, a * 55);
        e.bezierCurveTo(a * 67.5, a * 53, a * 67.5, a * 53, a * 71, a * 51);
        e.bezierCurveTo(a * 80, a * 44, a * 83, a * 33, a * 82, a * 20);
        e.bezierCurveTo(a * 59, a * 17, a * 51, a * 23, a * 45, a * 30);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 56);
        e.bezierCurveTo(a * 90, a * 33, a * 103, a * 25, a * 105, a * 27);
        e.bezierCurveTo(a * 116, a * 31, a * 121, a * 45, a * 122, a * 50);
        e.bezierCurveTo(a * 112, a * 62, a * 103, a * 63, a * 91, a * 62);
        e.bezierCurveTo(a * 89, a * 59.5, a * 89, a * 59.5, a * 87, a * 57);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 81);
        e.bezierCurveTo(a * 109, a * 82, a * 123, a * 70, a * 124, a * 63);
        e.bezierCurveTo(a * 124, a * 75.5, a * 124, a * 75.5, a * 124, a * 88);
        e.bezierCurveTo(a * 119, a * 99, a * 103, a * 103, a * 94, a * 103);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 124);
        e.bezierCurveTo(a * 108, a * 125, a * 122, a * 113, a * 124, a * 106);
        e.bezierCurveTo(a * 124, a * 119, a * 124, a * 129, a * 124, a * 132);
        e.bezierCurveTo(a * 110, a * 147, a * 94, a * 148, a * 90, a * 147);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 170);
        e.bezierCurveTo(a * 104, a * 166, a * 122, a * 158, a * 122, a * 151);
        e.bezierCurveTo(a * 122, a * 162.5, a * 122, a * 162.5, a * 122, a * 174);
        e.bezierCurveTo(a * 111, a * 191, a * 97, a * 191, a * 89, a * 191);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 208);
        e.bezierCurveTo(a * 100, a * 209, a * 115, a * 205, a * 122, a * 193);
        e.bezierCurveTo(a * 122, a * 205.5, a * 122, a * 205.5, a * 122, a * 218);
        e.bezierCurveTo(a * 115, a * 229, a * 103, a * 235, a * 90, a * 228);
        e.bezierCurveTo(a * 88, a * 224, a * 88, a * 217, a * 88, a * 211);
        e.closePath();
        Kt(e, c[3]);
        e.globalAlpha = 0.4;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22, a * 81);
        e.bezierCurveTo(a * 32, a * 84, a * 41, a * 81, a * 45, a * 68);
        e.bezierCurveTo(a * 50, a * 50, a * 62, a * 40, a * 79, a * 43);
        e.bezierCurveTo(a * 95, a * 45, a * 102, a * 58, a * 101, a * 81);
        e.bezierCurveTo(a * 99.5, a * 120.5, a * 99.5, a * 120.5, a * 98, a * 160);
        e.bezierCurveTo(a * 96.5, a * 191.5, a * 96.5, a * 191.5, a * 95, a * 223);
        e.bezierCurveTo(a * 93, a * 232, a * 101, a * 235, a * 108, a * 238);
        e.bezierCurveTo(a * 100, a * 240, a * 90, a * 233, a * 90, a * 224);
        e.bezierCurveTo(a * 92, a * 157, a * 92, a * 157, a * 94, a * 90);
        e.bezierCurveTo(a * 94, a * 56, a * 89, a * 53, a * 77, a * 51);
        e.bezierCurveTo(a * 58, a * 50, a * 54, a * 59, a * 49, a * 75);
        e.bezierCurveTo(a * 44, a * 91, a * 28, a * 90, a * 23, a * 81);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 123);
        e.bezierCurveTo(a * 88, a * 130, a * 88, a * 127, a * 94, a * 128);
        e.bezierCurveTo(a * 91, a * 136, a * 94, a * 137, a * 99, a * 142);
        e.bezierCurveTo(a * 97, a * 149, a * 99, a * 152, a * 105, a * 155);
        e.bezierCurveTo(a * 107, a * 159, a * 113, a * 159, a * 120, a * 158);
        e.bezierCurveTo(a * 121, a * 160, a * 125, a * 163, a * 132, a * 163);
        e.bezierCurveTo(a * 133, a * 166, a * 136, a * 169, a * 138, a * 170);
        e.bezierCurveTo(a * 133, a * 171, a * 132, a * 172, a * 129, a * 174);
        e.bezierCurveTo(a * 122, a * 170, a * 120, a * 170, a * 116, a * 174);
        e.bezierCurveTo(a * 108, a * 170.5, a * 108, a * 170.5, a * 100, a * 167);
        e.bezierCurveTo(a * 95, a * 172, a * 94, a * 179, a * 95, a * 184);
        e.bezierCurveTo(a * 87, a * 185, a * 87, a * 189, a * 88, a * 194);
        e.bezierCurveTo(a * 82, a * 194, a * 81, a * 195, a * 79, a * 197);
        e.bezierCurveTo(a * 78, a * 192, a * 78, a * 191, a * 77, a * 189);
        e.bezierCurveTo(a * 81, a * 185, a * 82, a * 183, a * 80, a * 176);
        e.bezierCurveTo(a * 89, a * 170, a * 92, a * 168, a * 95, a * 163);
        e.bezierCurveTo(a * 91, a * 151, a * 88, a * 151, a * 82, a * 147);
        e.bezierCurveTo(a * 85, a * 142, a * 85, a * 137, a * 81, a * 133);
        e.bezierCurveTo(a * 84, a * 127, a * 84, a * 125, a * 82, a * 124);
        e.closePath();
        Kt(e, c[4], c[5], a * 4);
        Nt(e, a * 107, a * 152, a * 9);
        Kt(e, c[6]);
        Nt(e, a * 105, a * 173, a * 9);
        Kt(e, c[6]);
        Nt(e, a * 87, a * 161, a * 9);
        Kt(e, c[6]);
        Nt(e, a * 106, a * 147, a * 4);
        Kt(e, c[7]);
        Nt(e, a * 104, a * 167, a * 4);
        Kt(e, c[7]);
        Nt(e, a * 86, a * 154, a * 4);
        Kt(e, c[7]);
        return d;
    }
    function Zd(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 234;
        c.height = a * 183;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 25);
        d.bezierCurveTo(a * 150, a * 3, a * 181, a * 22, a * 203, a * 41);
        d.bezierCurveTo(a * 225, a * 63, a * 225, a * 105, a * 198, a * 133);
        d.bezierCurveTo(a * 179, a * 157, a * 134, a * 178, a * 81, a * 164);
        d.bezierCurveTo(a * 19, a * 148, a * 6, a * 95, a * 21, a * 66);
        d.bezierCurveTo(a * 34, a * 39, a * 52, a * 33, a * 75, a * 25);
        d.closePath();
        Kt(d, b[0], b[0], a * 4);
        return c;
    }
    const Qt = 7;
    function Rt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100.5, a * 126.34375);
        e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
        e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
        e.closePath();
        Kt(e, c[0], c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 106.5, a * 131.34375);
        e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
        e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 137.34375);
        e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
        e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
        e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
        e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 196.5, a * 151.34375);
        e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
        e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
        e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
        e.closePath();
        Kt(e, c[0], c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154.5, a * 222.34375);
        e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
        e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
        e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
        e.closePath();
        Kt(e, c[0], c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 279.5, a * 294.34375);
        e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
        e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
        e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
        e.closePath();
        Kt(e, c[0], c[0], a * 12);
        e.globalAlpha = 1;
        e.translate(a * -10, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100.5, a * 126.34375);
        e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
        e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
        e.closePath();
        Kt(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 106.5, a * 131.34375);
        e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
        e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 137.34375);
        e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
        e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
        e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
        e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
        e.closePath();
        Kt(e, c[4]);
        Nt(e, a * 125.5, a * 140.34375, a * 11.180339887498949);
        Kt(e, c[5]);
        Nt(e, a * 122.5, a * 135.34375, a * 5.0990195135927845);
        Kt(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 196.5, a * 151.34375);
        e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
        e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
        e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
        e.closePath();
        Kt(e, c[7], c[8], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154.5, a * 222.34375);
        e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
        e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
        e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
        e.closePath();
        Kt(e, c[7], c[8], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 279.5, a * 294.34375);
        e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
        e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
        e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
        e.closePath();
        Kt(e, c[7], c[8], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 296.5, a * 287.34375);
        e.bezierCurveTo(a * 311.5, a * 291.34375, a * 311.5, a * 291.34375, a * 326.5, a * 295.34375);
        e.closePath();
        Kt(e, la, c[9], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 294.5, a * 289.34375);
        e.bezierCurveTo(a * 308.5, a * 297.34375, a * 308.5, a * 297.34375, a * 322.5, a * 305.34375);
        e.closePath();
        Kt(e, Yg, c[9], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 294.5, a * 291.34375);
        e.bezierCurveTo(a * 304, a * 303.34375, a * 304, a * 303.34375, a * 313.5, a * 315.34375);
        e.closePath();
        Kt(e, ll, c[9], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226.5, a * 161.34375);
        e.bezierCurveTo(a * 230.5, a * 160.34375, a * 236.5, a * 158.34375, a * 238.5, a * 161.34375);
        e.bezierCurveTo(a * 238.5, a * 157.34375, a * 228.5, a * 159.34375, a * 227.5, a * 161.34375);
        e.closePath();
        Kt(e, Uj, c[9], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167.5, a * 248.34375);
        e.bezierCurveTo(a * 165.5, a * 251.34375, a * 168.5, a * 256.34375, a * 168.5, a * 253.34375);
        e.bezierCurveTo(a * 166.5, a * 252.34375, a * 168.5, a * 246.34375, a * 166.5, a * 247.34375);
        e.closePath();
        Kt(e, Db, c[9], a * 3);
        return d;
    }
    function St(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 220;
        d.height = a * 180;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * -90, a * -150);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104, a * 237.8000030517578);
        e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
        e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
        e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
        e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
        e.closePath();
        Kt(e, c[5], c[5], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 211.20000457763672);
        e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
        e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
        e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
        e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
        e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
        e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
        e.closePath();
        Kt(e, c[5], c[5], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 120, a * 207);
        e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
        e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
        e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
        e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
        e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
        e.closePath();
        Kt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 238);
        e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
        e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
        e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
        e.closePath();
        Kt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 211);
        e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
        e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
        e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
        e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
        e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
        e.closePath();
        Kt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 280, a * 206);
        e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
        e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
        e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
        e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
        e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
        e.closePath();
        Kt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 138, a * 298.40000915527344);
        e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
        e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
        e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
        e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
        e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
        e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
        e.closePath();
        Kt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 177.5999984741211);
        e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
        e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
        e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
        e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
        e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
        e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
        e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
        e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
        e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
        e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
        e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
        e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
        e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
        e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
        e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
        e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
        e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
        e.closePath();
        Kt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 175.5999984741211);
        e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
        e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
        e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
        e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
        e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
        e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
        e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
        e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
        e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
        e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
        e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
        e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
        e.closePath();
        Kt(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 198, a * 161.4000015258789);
        e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
        e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
        e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
        e.closePath();
        Kt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 194);
        e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
        e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
        e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
        e.closePath();
        Kt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
        e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
        e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
        e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
        e.closePath();
        Kt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 156, a * 188);
        e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
        e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
        e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
        e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
        e.closePath();
        Kt(e, _r, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 189);
        e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
        e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
        e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
        e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
        e.closePath();
        Kt(e, ll, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 262);
        e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
        e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
        e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
        e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
        e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
        e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
        e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
        e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
        e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
        e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
        e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
        e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
        e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
        e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
        e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
        e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
        e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
        e.closePath();
        Kt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 264);
        e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
        e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
        e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
        e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
        e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
        e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
        e.closePath();
        Kt(e, T, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 140, a * 265.33333587646484);
        e.bezierCurveTo(a * 141, a * 250.33333587646484, a * 148, a * 244.33333587646484, a * 160, a * 241.33333587646484);
        e.bezierCurveTo(a * 200, a * 241.33333587646484, a * 200, a * 241.33333587646484, a * 240, a * 241.33333587646484);
        e.bezierCurveTo(a * 256, a * 243.33333587646484, a * 260, a * 255.33333587646484, a * 260, a * 265.33333587646484);
        e.bezierCurveTo(a * 261, a * 281.33333587646484, a * 247, a * 289.33333587646484, a * 240, a * 289.33333587646484);
        e.bezierCurveTo(a * 161, a * 289.33333587646484, a * 200.5, a * 289.33333587646484, a * 161, a * 289.33333587646484);
        e.bezierCurveTo(a * 149, a * 288.33333587646484, a * 142, a * 278.33333587646484, a * 140, a * 266.33333587646484);
        e.closePath();
        Kt(e, hj, c[4], a * 6);
        e.globalAlpha = 0.5;
        e.scale(1, 1);
        e.translate(a * 105, a * 155);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59.27557373046875, a * 20.406280517578125);
        e.bezierCurveTo(a * 74.27557373046875, a * 5.406280517578125, a * 90.27557373046875, a * 6.406280517578125, a * 99.27557373046875, a * 5.406280517578125);
        e.bezierCurveTo(a * 120.27557373046875, a * 5.406280517578125, a * 126.27557373046875, a * 10.406280517578125, a * 136.27557373046875, a * 20.406280517578125);
        e.bezierCurveTo(a * 157.77557373046875, a * 37.906280517578125, a * 157.77557373046875, a * 37.906280517578125, a * 179.27557373046875, a * 55.406280517578125);
        e.bezierCurveTo(a * 190.27557373046875, a * 63.406280517578125, a * 192.27557373046875, a * 77.40628051757812, a * 189.27557373046875, a * 91.40628051757812);
        e.bezierCurveTo(a * 183.27557373046875, a * 108.40628051757812, a * 176.27557373046875, a * 110.40628051757812, a * 169.27557373046875, a * 118.40628051757812);
        e.bezierCurveTo(a * 152.27557373046875, a * 133.40628051757812, a * 152.27557373046875, a * 133.40628051757812, a * 135.27557373046875, a * 148.40628051757812);
        e.bezierCurveTo(a * 87.27557373046875, a * 143.40628051757812, a * 87.27557373046875, a * 143.40628051757812, a * 39.27557373046875, a * 138.40628051757812);
        e.bezierCurveTo(a * 26.77557373046875, a * 123.40628051757812, a * 26.77557373046875, a * 123.40628051757812, a * 14.27557373046875, a * 108.40628051757812);
        e.bezierCurveTo(a * 2.27557373046875, a * 95.40628051757812, a * 2.27557373046875, a * 92.40628051757812, a * 3.27557373046875, a * 83.40628051757812);
        e.bezierCurveTo(a * 4.27557373046875, a * 63.406280517578125, a * 12.27557373046875, a * 60.406280517578125, a * 24.27557373046875, a * 40.406280517578125);
        e.closePath();
        Kt(e, c[5], c[5], a * 4);
        e.globalAlpha = 1;
        e.translate(a * -110, a * -155);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104, a * 237.8000030517578);
        e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
        e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
        e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
        e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
        e.closePath();
        Kt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 211.20000457763672);
        e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
        e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
        e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
        e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
        e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
        e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
        e.closePath();
        Kt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 120, a * 207);
        e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
        e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
        e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
        e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
        e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
        e.closePath();
        Kt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 238);
        e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
        e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
        e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
        e.closePath();
        Kt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 211);
        e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
        e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
        e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
        e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
        e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
        e.closePath();
        Kt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 280, a * 206);
        e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
        e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
        e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
        e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
        e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
        e.closePath();
        Kt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 138, a * 298.40000915527344);
        e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
        e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
        e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
        e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
        e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
        e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
        e.closePath();
        Kt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 177.5999984741211);
        e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
        e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
        e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
        e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
        e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
        e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
        e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
        e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
        e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
        e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
        e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
        e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
        e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
        e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
        e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
        e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
        e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
        e.closePath();
        Kt(e, c[2], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 175.5999984741211);
        e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
        e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
        e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
        e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
        e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
        e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
        e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
        e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
        e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
        e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
        e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
        e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
        e.closePath();
        Kt(e, T, c[3], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 198, a * 161.4000015258789);
        e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
        e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
        e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
        e.closePath();
        Kt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 194);
        e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
        e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
        e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
        e.closePath();
        Kt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
        e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
        e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
        e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
        e.closePath();
        Kt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 156, a * 188);
        e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
        e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
        e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
        e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
        e.closePath();
        Kt(e, Zq, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 189);
        e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
        e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
        e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
        e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
        e.closePath();
        Kt(e, undefined, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 262);
        e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
        e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
        e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
        e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
        e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
        e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
        e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
        e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
        e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
        e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
        e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
        e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
        e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
        e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
        e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
        e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
        e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
        e.closePath();
        Kt(e, c[0], c[0], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 264);
        e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
        e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
        e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
        e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
        e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
        e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
        e.closePath();
        Kt(e, At, c[1], a * 2);
        return d;
    }
    function Tt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 373;
        d.height = a * 314;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 184.048583984375, a * 69.1805419921875);
        Lt(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
        e.restore();
        Kt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.048583984375, a * 61.6805419921875);
        e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
        e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
        e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
        e.closePath();
        Kt(e, c[0], c[0], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224.048583984375, a * 56.6805419921875);
        e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
        e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
        e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
        e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
        e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
        e.closePath();
        Kt(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 183.548583984375, a * 119.6805419921875);
        Lt(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
        e.restore();
        Kt(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 155.6805419921875);
        Lt(e, a * -121, a * -52, a * 242, a * 104, a * 40);
        e.restore();
        Kt(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 205.1805419921875);
        Lt(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
        e.restore();
        Kt(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 185.048583984375, a * 204.1805419921875);
        Lt(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
        e.restore();
        Kt(e, c[0], c[0], a * 6);
        Nt(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
        Kt(e, c[0], c[0], a * 6);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224.048583984375, a * 56.6805419921875);
        e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
        e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
        e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
        e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
        e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
        e.closePath();
        Kt(e, c[3], c[4], a * 6);
        e.save();
        e.translate(a * 184.048583984375, a * 69.1805419921875);
        Lt(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
        e.restore();
        Kt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.048583984375, a * 61.6805419921875);
        e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
        e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
        e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
        e.closePath();
        Kt(e, c[1], c[2], a * 6);
        e.save();
        e.translate(a * 183.548583984375, a * 119.6805419921875);
        Lt(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
        e.restore();
        Kt(e, c[5], c[4], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 155.6805419921875);
        Lt(e, a * -121, a * -52, a * 242, a * 104, a * 40);
        e.restore();
        Kt(e, c[3], c[4], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 205.1805419921875);
        Lt(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
        e.restore();
        Kt(e, c[6], c[4], a * 6);
        e.globalCompositeOperation = "destination-out";
        e.save();
        e.translate(a * 185.048583984375, a * 204.1805419921875);
        Lt(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
        e.restore();
        Kt(e, c[7], c[8], a * 6);
        e.globalCompositeOperation = "source-over";
        e.globalAlpha = 0.5;
        e.save();
        e.translate(a * 185.048583984375, a * 204.1805419921875);
        Lt(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
        e.restore();
        Kt(e, c[7], c[8], a * 6);
        e.globalAlpha = 1;
        e.save();
        Nt(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
        Kt(e, c[3], c[4], a * 6);
        e.restore();
        return d;
    }
    function Ut(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96.5, a * 277.34375);
        e.bezierCurveTo(a * 197.5, a * 259.84375, a * 197.5, a * 259.84375, a * 298.5, a * 242.34375);
        e.bezierCurveTo(a * 311.5, a * 231.34375, a * 307.5, a * 168.34375, a * 298.5, a * 150.34375);
        e.bezierCurveTo(a * 198, a * 170.34375, a * 198, a * 170.34375, a * 97.5, a * 190.34375);
        e.closePath();
        Kt(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98.5, a * 214.34375);
        e.bezierCurveTo(a * 199, a * 196.34375, a * 199, a * 196.34375, a * 299.5, a * 178.34375);
        e.closePath();
        Kt(e, Mq, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98.5, a * 247.34375);
        e.bezierCurveTo(a * 201.5, a * 229.34375, a * 201.5, a * 229.34375, a * 304.5, a * 211.34375);
        e.closePath();
        Kt(e, hj, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 97.5, a * 189.34375);
        e.bezierCurveTo(a * 97, a * 199.84375, a * 97, a * 199.84375, a * 96.5, a * 210.34375);
        e.bezierCurveTo(a * 110.5, a * 204.34375, a * 110.5, a * 204.34375, a * 124.5, a * 198.34375);
        e.bezierCurveTo(a * 137.5, a * 203.84375, a * 137.5, a * 203.84375, a * 150.5, a * 209.34375);
        e.bezierCurveTo(a * 172, a * 197.84375, a * 172, a * 197.84375, a * 193.5, a * 186.34375);
        e.bezierCurveTo(a * 211.5, a * 189.84375, a * 211.5, a * 189.84375, a * 229.5, a * 193.34375);
        e.bezierCurveTo(a * 240.5, a * 193.34375, a * 240.5, a * 193.34375, a * 251.5, a * 193.34375);
        e.bezierCurveTo(a * 261, a * 182.84375, a * 261, a * 182.84375, a * 270.5, a * 172.34375);
        e.bezierCurveTo(a * 287.5, a * 169.34375, a * 287.5, a * 169.34375, a * 304.5, a * 166.34375);
        e.bezierCurveTo(a * 304.5, a * 156.34375, a * 300.5, a * 145.34375, a * 298.5, a * 147.34375);
        e.closePath();
        Kt(e, c[3], c[4], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 300.5, a * 147.34375);
        e.bezierCurveTo(a * 293.5, a * 121.34375, a * 278.5, a * 106.34375, a * 256.5, a * 101.34375);
        e.bezierCurveTo(a * 176.5, a * 145.34375, a * 176.5, a * 145.34375, a * 96.5, a * 189.34375);
        e.closePath();
        Kt(e, c[5], c[6], a * 12);
        Nt(e, a * 252.5, a * 129.34375, a * 18.027756377319946);
        Kt(e, c[7]);
        Nt(e, a * 248.5, a * 121.34375, a * 8.246211251235321);
        Kt(e, c[8]);
        return d;
    }
    const Vt = 3;
    function Wt(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 372;
        c.height = a * 375;
        d.globalAlpha = 0.5;
        d.translate(a * 15, a * 15);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
        d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
        d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
        d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
        d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
        d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
        d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
        d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
        d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
        d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
        d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
        d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
        d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
        d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
        d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
        d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
        d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
        d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
        d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
        d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
        d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
        d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
        d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
        d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
        d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
        d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
        d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
        d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
        d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
        d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
        d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
        d.closePath();
        Kt(d, b[0]);
        d.globalAlpha = 1;
        d.translate(a * -15, a * -15);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
        d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
        d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
        d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
        d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
        d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
        d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
        d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
        d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
        d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
        d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
        d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
        d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
        d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
        d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
        d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
        d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
        d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
        d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
        d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
        d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
        d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
        d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
        d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
        d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
        d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
        d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
        d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
        d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
        d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
        d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
        d.closePath();
        Kt(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 186.00003051757812, a * 192.94886779785156);
        d.bezierCurveTo(a * 185.00003051757812, a * 66.94886779785156, a * 184.50003051757812, a * 104.94886779785156, a * 183.00003051757812, a * 16.948867797851562);
        d.bezierCurveTo(a * 216.00003051757812, a * 47.94886779785156, a * 219.00003051757812, a * 80.94886779785156, a * 218.00003051757812, a * 113.94886779785156);
        d.bezierCurveTo(a * 209.00003051757812, a * 165.94886779785156, a * 200.00003051757812, a * 176.94886779785156, a * 189.00003051757812, a * 192.94886779785156);
        d.closePath();
        Kt(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 190.00003051757812, a * 191.94886779785156);
        d.bezierCurveTo(a * 207.00003051757812, a * 348.94886779785156, a * 205.00003051757812, a * 323.94886779785156, a * 209.00003051757812, a * 358.94886779785156);
        d.bezierCurveTo(a * 171.00003051757812, a * 334.94886779785156, a * 167.00003051757812, a * 302.94886779785156, a * 161.00003051757812, a * 268.94886779785156);
        d.bezierCurveTo(a * 160.00003051757812, a * 218.94886779785156, a * 181.00003051757812, a * 191.94886779785156, a * 189.00003051757812, a * 186.94886779785156);
        d.closePath();
        Kt(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 194.00003051757812, a * 195.94886779785156);
        d.bezierCurveTo(a * 116.00003051757812, a * 150.94886779785156, a * 116.00003051757812, a * 150.94886779785156, a * 38.000030517578125, a * 105.94886779785156);
        d.bezierCurveTo(a * 67.00003051757812, a * 90.94886779785156, a * 96.00003051757812, a * 99.94886779785156, a * 123.00003051757812, a * 111.94886779785156);
        d.bezierCurveTo(a * 183.00003051757812, a * 152.94886779785156, a * 179.00003051757812, a * 180.94886779785156, a * 193.00003051757812, a * 194.94886779785156);
        d.closePath();
        Kt(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 189.00003051757812, a * 190.94886779785156);
        d.bezierCurveTo(a * 250.00003051757812, a * 133.94886779785156, a * 311.0000305175781, a * 78.94886779785156, a * 311.0000305175781, a * 76.94886779785156);
        d.bezierCurveTo(a * 306.0000305175781, a * 127.94886779785156, a * 283.0000305175781, a * 148.94886779785156, a * 261.0000305175781, a * 166.94886779785156);
        d.bezierCurveTo(a * 220.00003051757812, a * 197.94886779785156, a * 191.00003051757812, a * 194.94886779785156, a * 189.00003051757812, a * 195.94886779785156);
        d.closePath();
        Kt(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 189.00003051757812, a * 194.94886779785156);
        d.bezierCurveTo(a * 268.5000305175781, a * 211.94886779785156, a * 268.5000305175781, a * 211.94886779785156, a * 348.0000305175781, a * 228.94886779785156);
        d.bezierCurveTo(a * 316.0000305175781, a * 247.94886779785156, a * 298.0000305175781, a * 256.94886779785156, a * 250.00003051757812, a * 246.94886779785156);
        d.bezierCurveTo(a * 197.00003051757812, a * 229.94886779785156, a * 189.00003051757812, a * 202.94886779785156, a * 188.00003051757812, a * 199.94886779785156);
        d.closePath();
        Kt(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 192.00003051757812, a * 191.94886779785156);
        d.bezierCurveTo(a * 116.50003051757812, a * 238.44886779785156, a * 116.50003051757812, a * 238.44886779785156, a * 41.000030517578125, a * 284.94886779785156);
        d.bezierCurveTo(a * 49.000030517578125, a * 252.94886779785156, a * 56.000030517578125, a * 242.94886779785156, a * 80.00003051757812, a * 215.94886779785156);
        d.bezierCurveTo(a * 125.00003051757812, a * 181.94886779785156, a * 174.00003051757812, a * 183.94886779785156, a * 192.00003051757812, a * 191.94886779785156);
        d.closePath();
        Kt(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
        d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
        d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
        d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
        d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
        d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
        d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
        d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
        d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
        d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
        d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
        d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
        d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
        d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
        d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
        d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
        d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
        d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
        d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
        d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
        d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
        d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
        d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
        d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
        d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
        d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
        d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
        d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
        d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
        d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
        d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
        d.closePath();
        Kt(d, undefined, b[2], a * 4);
        return c;
    }
    function Xt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 98;
        e.translate(0, a * 4);
        if (mt === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            e.save();
            e.translate(a * 44, a * 50);
            e.rotate(1.4);
            ob(e, 7, a * 41, a * 10);
            e.restore();
            Kt(e, c[0]);
        }
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(1.4);
        ob(e, 7, a * 41, a * 10);
        Kt(e, c[1], c[2], a * 4);
        ob(e, 7, a * 35, a * 10);
        Kt(e, c[3], c[4], a * 4);
        ob(e, 7, a * 23, a * 5);
        e.restore();
        Kt(e, c[5]);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Lt(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        Kt(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Lt(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        Kt(e, c[4], c[4], a * 2);
        Nt(e, a * 45, a * 29, a * 7);
        Kt(e, c[5]);
        Nt(e, a * 45, a * 61, a * 7);
        Kt(e, c[5]);
        Nt(e, a * 28, a * 45, a * 7);
        Kt(e, c[5]);
        Nt(e, a * 62, a * 45, a * 7);
        Kt(e, c[5]);
        return d;
    }
    function Yt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 101;
        e.translate(a * 0, a * 5);
        if (mt === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            Nt(e, a * 44, a * 55, a * 41);
            Kt(e, c[0]);
        }
        e.globalAlpha = 1;
        Nt(e, a * 44, a * 45, a * 41);
        Kt(e, c[1], c[2], a * 4);
        Nt(e, a * 44, a * 45, a * 31);
        Kt(e, c[3]);
        e.save();
        e.translate(a * 45, a * 45);
        Lt(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        Kt(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        Lt(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        Kt(e, c[4], c[4], a * 2);
        Nt(e, a * 45, a * 29, a * 7);
        Kt(e, c[5]);
        Nt(e, a * 45, a * 61, a * 7);
        Kt(e, c[5]);
        Nt(e, a * 28, a * 45, a * 7);
        Kt(e, c[5]);
        Nt(e, a * 62, a * 45, a * 7);
        Kt(e, c[5]);
        return d;
    }
    function Zt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 130;
        d.height = a * 148;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 65, a * 85);
        e.rotate(1.4);
        ob(e, 7, a * 60, a * 10);
        e.restore();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 65, a * 74);
        e.rotate(1.4);
        ob(e, 7, a * 60, a * 10);
        Kt(e, c[1], c[2], 4);
        e.rotate(0.64);
        ob(e, 7, a * 40, a * 10);
        Kt(e, c[3], c[4], 4);
        e.rotate(0.12);
        ob(e, 7, a * 23, a * 5);
        e.restore();
        Kt(e, c[5]);
        return d;
    }
    function $t(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 125;
        d.height = a * 139;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 63, a * 79);
        e.rotate(1);
        ob(e, 8, a * 60, a * 10);
        Kt(e, c[0]);
        e.restore();
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 63, a * 69);
        e.rotate(1);
        ob(e, 8, a * 60, a * 10);
        Kt(e, c[1], c[2], 4);
        e.rotate(0.56);
        ob(e, 8, a * 40, a * 10);
        Kt(e, c[3], c[4], 4);
        e.rotate(0.28);
        ob(e, 8, a * 28, a * 8);
        Kt(e, c[5]);
        e.restore();
        return d;
    }
    function au(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 130;
        var a = b * 142;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        f.translate(i, j + b * 7);
        f.globalAlpha = c ? 0.5 : 1;
        Nt(f, 0, 0, b * 60);
        Kt(f, d[0]);
        f.translate(0, b * -7);
        f.globalAlpha = 1;
        Nt(f, 0, 0, b * 60);
        Kt(f, d[1], d[2], b * 4);
        Nt(f, 0, 0, b * 40);
        Kt(f, d[3]);
        Nt(f, 0, 0, b * 25);
        Kt(f, d[4], d[5], b * 8);
        return e;
    }
    function bu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 309;
        d.height = a * 287;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34.5, a * 38.53125);
        e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
        e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
        e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
        e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
        e.closePath();
        Kt(e, c[0], c[0], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143.5, a * 74.53125);
        e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
        e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
        e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
        e.closePath();
        Kt(e, c[0], c[0], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 142.53125);
        e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
        e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
        e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
        e.closePath();
        Kt(e, c[0], c[0], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 236.5, a * 189.53125);
        e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
        e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
        e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
        e.closePath();
        Kt(e, c[0], c[0], a * 10);
        e.globalAlpha = 1;
        e.translate(a * -10, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34.5, a * 38.53125);
        e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
        e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
        e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
        e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
        e.closePath();
        Kt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143.5, a * 74.53125);
        e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
        e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
        e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
        e.closePath();
        Kt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 142.53125);
        e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
        e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
        e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
        e.closePath();
        Kt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 236.5, a * 189.53125);
        e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
        e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
        e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
        e.closePath();
        Kt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 109.5, a * 51.53125);
        e.bezierCurveTo(a * 107.5, a * 92.53125, a * 91.5, a * 95.53125, a * 59.5, a * 101.53125);
        Kt(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 51.53125);
        e.bezierCurveTo(a * 71, a * 64.53125, a * 69.5, a * 76.53125, a * 69.5, a * 77.53125);
        e.closePath();
        Kt(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 63.53125);
        e.bezierCurveTo(a * 70.5, a * 65.03125, a * 70.5, a * 65.03125, a * 56.5, a * 66.53125);
        e.closePath();
        Kt(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125.5, a * 84.53125);
        e.bezierCurveTo(a * 125.5, a * 110.03125, a * 125.5, a * 110.03125, a * 125.5, a * 135.53125);
        e.closePath();
        Kt(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 149.5, a * 108.53125);
        e.bezierCurveTo(a * 150, a * 137.03125, a * 150, a * 137.03125, a * 150.5, a * 165.53125);
        e.closePath();
        Kt(e, c[1], c[2], a * 7);
        return d;
    }
    function cu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 130;
        d.height = a * 142;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 65, a * 80);
        e.rotate(0.2);
        ob(e, 9, a * 60, a * 10);
        e.restore();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 65, a * 71);
        e.rotate(0.2);
        ob(e, 9, a * 60, a * 10);
        Kt(e, c[1], c[2], 4);
        e.rotate(-0.32);
        ob(e, 9, a * 38, a * 10);
        Kt(e, c[3], c[4], 4);
        e.rotate(0.68);
        ob(e, 9, a * 20, a * 8);
        Kt(e, c[5], c[6], 6);
        e.restore();
        return d;
    }
    function du(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 128;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 7);
        e.bezierCurveTo(a * 169, a * 14, a * 212, a * 9, a * 241, a * 5);
        e.bezierCurveTo(a * 211, a * 63, a * 158, a * 92, a * 103, a * 109);
        e.bezierCurveTo(a * 73, a * 126, a * 54, a * 124, a * 6, a * 99);
        e.bezierCurveTo(a * 82, a * 63, a * 113, a * 35, a * 137, a * 8);
        e.closePath();
        Kt(e, c[0], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 73, a * 124);
        e.bezierCurveTo(a * 111, a * 126, a * 162, a * 97, a * 203, a * 61);
        e.bezierCurveTo(a * 156, a * 98, a * 131, a * 106, a * 105, a * 109);
        e.bezierCurveTo(a * 99, a * 121, a * 87, a * 124, a * 72, a * 124);
        e.closePath();
        Kt(e, c[2], c[3], a * 1);
        return d;
    }
    const eu = 16;
    function fu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 98;
        e.translate(0, a * 4);
        if (mt === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            e.save();
            e.translate(a * 44, a * 50);
            e.rotate(1);
            ob(e, 8, a * 41, a * 10);
            Kt(e, c[0]);
            e.restore();
        }
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(1);
        ob(e, 8, a * 41, a * 10);
        Kt(e, c[1], c[2], a * 4);
        e.rotate(0.56);
        ob(e, 8, a * 33, a * 10);
        Kt(e, c[3], c[4], a * 4);
        e.rotate(0.28);
        ob(e, 8, a * 24, a * 8);
        Kt(e, c[5]);
        e.restore();
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Lt(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        Kt(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Lt(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        Kt(e, c[4], c[4], a * 2);
        Nt(e, a * 45, a * 29, a * 7);
        Kt(e, c[5]);
        Nt(e, a * 45, a * 61, a * 7);
        Kt(e, c[5]);
        Nt(e, a * 28, a * 45, a * 7);
        Kt(e, c[5]);
        Nt(e, a * 62, a * 45, a * 7);
        Kt(e, c[5]);
        return d;
    }
    function gu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 300;
        d.height = a * 300;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 150, a * 160);
        e.rotate(6.28);
        ob(e, 6, a * 146, a * 30);
        e.restore();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(6.28);
        ob(e, 6, a * 146, a * 30);
        e.restore();
        Kt(e, c[1], c[2], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        ob(e, 6, a * 105, a * 30);
        e.restore();
        Kt(e, c[3], c[3], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        ob(e, 6, a * 66, a * 30);
        e.restore();
        Kt(e, c[4], c[2], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        ob(e, 6, a * 31, a * 30);
        e.restore();
        Kt(e, c[5], c[6], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 207);
        e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
        e.closePath();
        Kt(e, Cg, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 100);
        e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
        e.closePath();
        Kt(e, Bs, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 183, a * 100);
        e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
        e.closePath();
        Kt(e, undefined, c[2], a * 8);
        return d;
    }
    const hu = 3;
    function iu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 300;
        d.height = a * 300;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 150, a * 160);
        e.rotate(6.28);
        ob(e, 6, a * 146, a * 30);
        e.restore();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(6.28);
        ob(e, 6, a * 146, a * 30);
        e.restore();
        Kt(e, c[1], c[2], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        ob(e, 6, a * 105, a * 30);
        e.restore();
        Kt(e, c[3], c[3], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        ob(e, 6, a * 66, a * 30);
        e.restore();
        Kt(e, c[4], c[2], a * 8);
        e.save();
        e.translate(a * 131, a * 116);
        ob(e, 7, a * 17, a * 8);
        e.restore();
        Kt(e, c[6]);
        e.save();
        e.translate(a * 163, a * 168);
        ob(e, 7, a * 25, a * 8);
        e.restore();
        Kt(e, c[6]);
        e.save();
        e.translate(a * 117, a * 151);
        ob(e, 7, a * 11, a * 8);
        e.restore();
        Kt(e, c[6]);
        e.save();
        e.translate(a * 167, a * 122);
        ob(e, 7, a * 12, a * 8);
        e.restore();
        Kt(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 207);
        e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
        e.closePath();
        Kt(e, undefined, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 100);
        e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
        e.closePath();
        Kt(e, undefined, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 183, a * 100);
        e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
        e.closePath();
        Kt(e, undefined, c[2], a * 8);
        return d;
    }
    const ju = 2;
    const ku = 8;
    function lu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 175;
        d.height = a * 169;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17, a * 112);
        e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
        e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
        e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
        e.closePath();
        Kt(e, c[8], c[9], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 127, a * 111);
        e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
        e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
        e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
        e.closePath();
        Kt(e, c[9]);
        e.globalAlpha = 0.5;
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 15, a * 117);
        e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
        e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
        e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
        e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 127);
        e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
        e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
        e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
        e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
        e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
        e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
        e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
        e.closePath();
        Kt(e, c[4], c[5], a * 5);
        e.save();
        e.translate(a * 27.5, a * 138.5);
        Lt(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
        e.restore();
        Kt(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 143.5, a * 137);
        Lt(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
        e.restore();
        Kt(e, c[1], c[2], a * 5);
        return d;
    }
    function mu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 501;
        d.height = a * 309;
        e.translate(0, a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126, a * 184);
        e.bezierCurveTo(a * 169, a * 196, a * 194, a * 198, a * 227, a * 198);
        e.bezierCurveTo(a * 235, a * 222, a * 236, a * 223, a * 241, a * 226);
        e.bezierCurveTo(a * 245, a * 228, a * 257, a * 228, a * 263, a * 226);
        e.bezierCurveTo(a * 267, a * 225, a * 270, a * 211, a * 275, a * 198);
        e.bezierCurveTo(a * 332, a * 194, a * 347, a * 192, a * 372, a * 188);
        e.bezierCurveTo(a * 366, a * 174.5, a * 366, a * 174.5, a * 360, a * 161);
        e.bezierCurveTo(a * 253.5, a * 162, a * 253.5, a * 162, a * 147, a * 163);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 116);
        e.bezierCurveTo(a * 90, a * 101, a * 96, a * 89, a * 106, a * 83);
        e.bezierCurveTo(a * 86, a * 79, a * 86, a * 52, a * 93, a * 38);
        e.bezierCurveTo(a * 99, a * 51, a * 107, a * 57, a * 122, a * 63);
        e.bezierCurveTo(a * 130, a * 53, a * 141, a * 46, a * 161, a * 46);
        e.bezierCurveTo(a * 157, a * 31, a * 158, a * 20, a * 169, a * 6);
        e.bezierCurveTo(a * 171, a * 24, a * 186, a * 33, a * 198, a * 45);
        e.bezierCurveTo(a * 252, a * 45, a * 252, a * 45, a * 306, a * 45);
        e.bezierCurveTo(a * 323, a * 33, a * 332, a * 21, a * 335, a * 7);
        e.bezierCurveTo(a * 349, a * 21, a * 347, a * 36, a * 345, a * 46);
        e.bezierCurveTo(a * 364, a * 46, a * 369, a * 48, a * 377, a * 63);
        e.bezierCurveTo(a * 398, a * 58, a * 403, a * 49, a * 409, a * 40);
        e.bezierCurveTo(a * 419, a * 57, a * 411, a * 79, a * 398, a * 85);
        e.bezierCurveTo(a * 405, a * 100, a * 405, a * 106, a * 401, a * 118);
        e.bezierCurveTo(a * 332.5, a * 128.5, a * 332.5, a * 128.5, a * 264, a * 139);
        e.closePath();
        Kt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 122, a * 191);
        e.bezierCurveTo(a * 123, a * 237, a * 135, a * 245, a * 153, a * 259);
        e.bezierCurveTo(a * 167, a * 269, a * 158, a * 281, a * 118, a * 276);
        e.bezierCurveTo(a * 104, a * 273, a * 98, a * 268, a * 93, a * 242);
        e.bezierCurveTo(a * 89, a * 220, a * 92, a * 201, a * 102, a * 179);
        e.closePath();
        Kt(e, c[3], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 403, a * 182);
        e.bezierCurveTo(a * 414, a * 215, a * 412, a * 232, a * 403, a * 260);
        e.bezierCurveTo(a * 395, a * 274, a * 375, a * 272, a * 356, a * 270);
        e.bezierCurveTo(a * 345, a * 268, a * 339, a * 262, a * 354, a * 252);
        e.bezierCurveTo(a * 370, a * 242, a * 380, a * 225, a * 384, a * 184);
        e.closePath();
        Kt(e, c[3], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 155, a * 157);
        e.bezierCurveTo(a * 146, a * 189, a * 137, a * 198, a * 114, a * 219);
        e.bezierCurveTo(a * 104, a * 212, a * 98, a * 203, a * 89, a * 189);
        e.bezierCurveTo(a * 82, a * 178, a * 91, a * 164, a * 93, a * 136);
        e.closePath();
        Kt(e, c[4], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 347, a * 162);
        e.bezierCurveTo(a * 357, a * 195, a * 376, a * 209, a * 387, a * 217);
        e.bezierCurveTo(a * 409, a * 201, a * 420, a * 181, a * 416, a * 166);
        e.bezierCurveTo(a * 410, a * 150, a * 412, a * 149, a * 408, a * 130);
        e.closePath();
        Kt(e, c[4], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 134);
        e.bezierCurveTo(a * 79, a * 102, a * 92, a * 84, a * 108, a * 92);
        e.bezierCurveTo(a * 149, a * 108, a * 184, a * 111, a * 242, a * 111);
        e.bezierCurveTo(a * 294, a * 108, a * 341, a * 105, a * 386, a * 98);
        e.bezierCurveTo(a * 412, a * 91, a * 417, a * 86, a * 415, a * 133);
        e.bezierCurveTo(a * 413, a * 160, a * 413, a * 160, a * 368, a * 174);
        e.bezierCurveTo(a * 308, a * 184, a * 291, a * 185, a * 270, a * 186);
        e.bezierCurveTo(a * 264, a * 206, a * 262, a * 215, a * 253, a * 215);
        e.bezierCurveTo(a * 239, a * 217, a * 239, a * 211, a * 231, a * 186);
        e.bezierCurveTo(a * 178, a * 184, a * 156, a * 179, a * 112, a * 162);
        e.bezierCurveTo(a * 87, a * 151, a * 90, a * 144, a * 87, a * 137);
        e.closePath();
        Kt(e, c[4], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 63, a * 98);
        e.bezierCurveTo(a * 84, a * 121, a * 109, a * 102, a * 124, a * 117);
        e.bezierCurveTo(a * 138, a * 136, a * 123, a * 165, a * 94, a * 150);
        e.bezierCurveTo(a * 66, a * 131, a * 64, a * 115, a * 63, a * 99);
        e.closePath();
        Kt(e, c[3], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 449, a * 97);
        e.bezierCurveTo(a * 446, a * 143, a * 415, a * 151, a * 402, a * 155);
        e.bezierCurveTo(a * 386, a * 157, a * 373, a * 133, a * 391, a * 116);
        e.bezierCurveTo(a * 402, a * 106, a * 432, a * 124, a * 449, a * 97);
        e.closePath();
        Kt(e, c[3], c[2], a * 10);
        return d;
    }
    function nu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 108;
        d.height = a * 669;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 54, a * 389.5);
        Lt(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
        e.restore();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 579);
        e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
        e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
        e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
        e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141);
        e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
        e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
        e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
        e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
        e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42, a * 152);
        e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
        e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
        e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 28);
        e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
        e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
        e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
        e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 53);
        e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
        e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
        e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
        e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
        e.closePath();
        Kt(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 54, a * 389.5);
        e.rotate(0);
        Lt(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
        e.restore();
        Kt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 579);
        e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
        e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
        e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
        e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
        e.closePath();
        Kt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141);
        e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
        e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
        e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
        e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
        e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
        e.closePath();
        Kt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42, a * 152);
        e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
        e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
        e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
        e.closePath();
        Kt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 28);
        e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
        e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
        e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
        e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
        e.closePath();
        Kt(e, c[6], c[7], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 53);
        e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
        e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
        e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
        e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
        e.closePath();
        Kt(e, c[8]);
        return d;
    }
    function ou(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 98;
        e.translate(0, a * 4);
        if (mt === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            e.save();
            e.translate(a * 44, a * 50);
            e.rotate(0.2);
            ob(e, 9, a * 41, a * 10);
            e.restore();
            Kt(e, c[0]);
        }
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(0.2);
        ob(e, 9, a * 41, a * 10);
        Kt(e, c[1], c[2], a * 4);
        e.rotate(-0.32);
        ob(e, 9, a * 32, a * 10);
        Kt(e, c[3], c[4], a * 4);
        e.rotate(0.68);
        ob(e, 9, a * 23, a * 8);
        Kt(e, c[5], c[6], a * 6);
        e.restore();
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Lt(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        Kt(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Lt(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        Kt(e, c[4], c[4], a * 2);
        Nt(e, a * 45, a * 29, a * 7);
        Kt(e, c[5]);
        Nt(e, a * 45, a * 61, a * 7);
        Kt(e, c[5]);
        Nt(e, a * 28, a * 45, a * 7);
        Kt(e, c[5]);
        Nt(e, a * 62, a * 45, a * 7);
        Kt(e, c[5]);
        return d;
    }
    function pu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 138;
        d.height = a * 133;
        e.globalAlpha = b ? 0.3 : 1;
        e.translate(0, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26, a * 79.640625);
        e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
        e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
        e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
        e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
        e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
        e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 8, a * 82.640625);
        e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
        e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
        e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
        e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
        e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 8, a * 73.640625);
        e.bezierCurveTo(a * 7, a * 23.640625, a * 33, a * 19.640625, a * 71, a * 17.640625);
        e.bezierCurveTo(a * 129, a * 19.640625, a * 130, a * 45.640625, a * 130, a * 76.640625);
        e.bezierCurveTo(a * 90, a * 63.640625, a * 85, a * 63.640625, a * 73, a * 63.640625);
        e.bezierCurveTo(a * 38, a * 63.640625, a * 33, a * 66.640625, a * 8, a * 73.640625);
        e.closePath();
        Kt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72, a * 28.640625);
        e.bezierCurveTo(a * 51, a * 25.640625, a * 56, a * 7.640625, a * 70, a * 5.640625);
        e.bezierCurveTo(a * 94, a * 7.640625, a * 87, a * 29.640625, a * 72, a * 28.640625);
        e.closePath();
        Kt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 26.640625);
        e.bezierCurveTo(a * 42, a * 29.640625, a * 43, a * 31.640625, a * 42, a * 37.640625);
        Kt(e, undefined, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 26.640625);
        e.bezierCurveTo(a * 100, a * 28.640625, a * 98, a * 34.640625, a * 99, a * 38.640625);
        Kt(e, Xk, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26, a * 79.640625);
        e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
        e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
        e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
        e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
        e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
        e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
        e.closePath();
        Kt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 8, a * 82.640625);
        e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
        e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
        e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
        e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
        e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
        e.closePath();
        Kt(e, c[3], c[4], a * 4);
        return d;
    }
    function qu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 92;
        d.height = a * 108;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 10);
        e.bezierCurveTo(a * 37, a * 2, a * 49, a * 0, a * 61, a * 15);
        e.bezierCurveTo(a * 81, a * 31, a * 78, a * 25, a * 79, a * 37);
        e.bezierCurveTo(a * 76, a * 44, a * 81, a * 56, a * 85, a * 63);
        e.bezierCurveTo(a * 91, a * 71, a * 90, a * 78, a * 83, a * 84);
        e.bezierCurveTo(a * 60, a * 98, a * 67, a * 95, a * 57, a * 102);
        e.bezierCurveTo(a * 47, a * 106, a * 43, a * 106, a * 31, a * 98);
        e.bezierCurveTo(a * 22, a * 91, a * 17, a * 89, a * 7, a * 84);
        e.bezierCurveTo(a * 1, a * 77, a * 4, a * 73, a * 7, a * 60);
        e.bezierCurveTo(a * 11, a * 50, a * 5, a * 32, a * 15, a * 27);
        e.bezierCurveTo(a * 26, a * 18, a * 26, a * 24, a * 31, a * 10);
        e.closePath();
        Kt(e, c[0], c[1], 4);
        return d;
    }
    function ru(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 165;
        d.height = a * 123;
        e.save();
        e.translate(a * 81, a * 65);
        Lt(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
        e.restore();
        Kt(e, c[0]);
        e.save();
        e.translate(a * 81, a * 58);
        Lt(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
        e.restore();
        Kt(e, c[1], c[2], 4);
        e.save();
        e.translate(a * 81, a * 58);
        Lt(e, a * -69, a * -47, a * 138, a * 93, a * 15);
        e.restore();
        Kt(e, c[3], c[4], 4);
        e.save();
        e.translate(a * 79, a * 54);
        Lt(e, a * -34, a * -40, a * 68, a * 88, a * 13);
        e.restore();
        Kt(e, Yg, c[5], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 13);
        e.bezierCurveTo(a * 43.5, a * 55, a * 43.5, a * 55, a * 43, a * 101);
        e.closePath();
        Kt(e, undefined, c[6], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 13);
        e.bezierCurveTo(a * 115, a * 56, a * 115, a * 56, a * 115, a * 101);
        e.closePath();
        Kt(e, Uj, c[6], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 6);
        e.bezierCurveTo(a * 35, a * 56, a * 36, a * 109, a * 35, a * 110);
        e.closePath();
        Kt(e, undefined, c[7], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123, a * 6);
        e.bezierCurveTo(a * 123, a * 56, a * 123, a * 56, a * 123, a * 110);
        e.closePath();
        Kt(e, undefined, c[7], 4);
        e.save();
        e.translate(a * 79, a * 113);
        Lt(e, a * -18, a * -2, a * 36, a * 4, a * 20);
        e.restore();
        Kt(e, undefined, c[8], 4);
        e.save();
        e.translate(a * 75, a * 118);
        Lt(e, a * -6, a * -2.5, a * 20, a * 5, a * 20);
        e.restore();
        Kt(e, c[8]);
        return d;
    }
    function su(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 43;
        d.height = a * 209;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 21, a * 102.5);
        Lt(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
        e.restore();
        Kt(e, c[0]);
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 10);
        e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
        e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
        e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 1);
        e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
        e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
        e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 146);
        e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
        e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
        e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
        e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
        e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
        e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
        e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
        e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 6);
        e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
        e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
        e.closePath();
        Kt(e, c[0]);
        e.translate(0, a * -20);
        e.globalAlpha = 1;
        e.translate(0, a * 10);
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 21, a * 102.5);
        Lt(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
        e.restore();
        Kt(e, c[1], c[2], a * 4);
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 10);
        e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
        e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
        e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
        e.closePath();
        Kt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 1);
        e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
        e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
        e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
        e.closePath();
        Kt(e, c[5], c[6], a * 4);
        e.translate(0, a * 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 146);
        e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
        e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
        e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
        e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
        e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
        e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
        e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
        e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
        e.closePath();
        Kt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 6);
        e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
        e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
        e.closePath();
        Kt(e, c[8]);
        return d;
    }
    function tu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 115;
        d.height = a * 585;
        e.scale(-1, 1);
        e.translate(a * -110, 0);
        e.translate(a * 10, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 51.5, a * 342);
        Lt(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
        e.restore();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 54, a * 83);
        e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
        e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
        e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 95, a * 97);
        e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
        e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
        e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
        e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 176);
        e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
        e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 50, a * 176);
        e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
        e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 403);
        e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
        e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
        e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59, a * 67);
        e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
        e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
        e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 125);
        e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
        e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
        e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
        e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 171);
        e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
        e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
        e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60, a * 68);
        e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
        e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
        e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
        e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
        e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 71, a * 172);
        e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
        e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
        e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 151);
        e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
        e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
        e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
        e.closePath();
        Kt(e, c[0]);
        e.translate(a * -10, a * -10);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 51.5, a * 342);
        Lt(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
        e.restore();
        Kt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 54, a * 83);
        e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
        e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
        e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
        e.closePath();
        Kt(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 95, a * 97);
        e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
        e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
        e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
        e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
        e.closePath();
        Kt(e, c[5], c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 403);
        e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
        e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
        e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
        e.closePath();
        Kt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 37, a * 427);
        e.bezierCurveTo(a * 47, a * 435, a * 55, a * 435, a * 67, a * 427);
        Kt(e, undefined, c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 448);
        e.bezierCurveTo(a * 46, a * 454, a * 54, a * 457, a * 65, a * 449);
        Kt(e, Bs, c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 176);
        e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
        e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
        e.closePath();
        Kt(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 50, a * 176);
        e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
        e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
        e.closePath();
        Kt(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59, a * 67);
        e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
        e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
        e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
        e.closePath();
        Kt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 125);
        e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
        e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
        e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
        e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
        e.closePath();
        Kt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 171);
        e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
        e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
        e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
        e.closePath();
        Kt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60, a * 68);
        e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
        e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
        e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
        e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
        e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
        e.closePath();
        Kt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 71, a * 172);
        e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
        e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
        e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
        e.closePath();
        Kt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 151);
        e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
        e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
        e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
        e.closePath();
        Kt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 113);
        e.bezierCurveTo(a * 65, a * 140, a * 75, a * 166, a * 52, a * 169);
        e.bezierCurveTo(a * 29, a * 168, a * 41, a * 143, a * 53, a * 112);
        e.closePath();
        Kt(e, c[3], c[4], a * 6);
        return d;
    }
    function uu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 81;
        d.height = a * 626;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 565);
        e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
        e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
        e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
        e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
        e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
        e.closePath();
        Kt(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 565);
        e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
        e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
        e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
        e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
        e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
        e.closePath();
        Kt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 129);
        e.bezierCurveTo(a * 32, a * 135, a * 48, a * 136, a * 53, a * 129);
        e.bezierCurveTo(a * 56, a * 97, a * 53, a * 82, a * 52, a * 64);
        e.bezierCurveTo(a * 49, a * 33, a * 44, a * 27, a * 41, a * 21);
        e.bezierCurveTo(a * 31, a * 40, a * 28, a * 84, a * 27, a * 127);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 565);
        e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
        e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
        e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
        e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
        e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
        e.closePath();
        Kt(e, Og, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 475);
        e.bezierCurveTo(a * 38, a * 482, a * 48, a * 480, a * 54, a * 474);
        e.bezierCurveTo(a * 54, a * 509.5, a * 54, a * 509.5, a * 54, a * 545);
        e.bezierCurveTo(a * 46, a * 554, a * 36, a * 552, a * 28, a * 545);
        e.closePath();
        Kt(e, c[4], c[5], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 496);
        e.bezierCurveTo(a * 39, a * 506, a * 49, a * 503, a * 54, a * 496);
        Kt(e, Bs, c[5], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 521);
        e.bezierCurveTo(a * 41, a * 529, a * 49, a * 524, a * 54, a * 520);
        Kt(e, Xn, c[5], a * 8);
        return d;
    }
    function vu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 100;
        d.height = a * 648;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 50.5, a * 349.5);
        Lt(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
        e.restore();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 538);
        e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
        e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
        e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
        e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 554);
        e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 569);
        e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
        e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
        e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
        e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 581);
        e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
        e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
        e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
        e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 106);
        e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
        e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
        e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
        e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 27);
        e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
        e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
        e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 43);
        e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 73, a * 97);
        e.bezierCurveTo(a * 66, a * 116, a * 43, a * 122, a * 26, a * 99);
        e.closePath();
        Kt(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 50.5, a * 349.5);
        Lt(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
        e.restore();
        Kt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 538);
        e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
        e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
        e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
        e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
        e.closePath();
        Kt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 554);
        e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
        e.closePath();
        Kt(e, Yg, c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 569);
        e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
        e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
        e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
        e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
        e.closePath();
        Kt(e, c[5], c[6], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 581);
        e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
        e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
        e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
        e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
        e.closePath();
        Kt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 106);
        e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
        e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
        e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
        e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
        e.closePath();
        Kt(e, c[5], c[6], a * 8);
        e.save();
        e.translate(a * -46, a * -50);
        e.scale(2, 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 80);
        e.bezierCurveTo(a * 51, a * 89.5, a * 51, a * 89.5, a * 51, a * 99);
        e.bezierCurveTo(a * 49, a * 103, a * 46, a * 105, a * 44, a * 99);
        e.bezierCurveTo(a * 44, a * 88.5, a * 44, a * 88.5, a * 44, a * 78);
        e.closePath();
        Kt(e, c[8]);
        e.restore();
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 27);
        e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
        e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
        e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
        e.closePath();
        Kt(e, c[8], c[9], a * 8);
        e.scale(2, 2);
        e.translate(a * -23, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 57, a * 69);
        e.bezierCurveTo(a * 50, a * 76, a * 43, a * 75, a * 38, a * 69);
        e.bezierCurveTo(a * 43, a * 57, a * 43, a * 57, a * 48, a * 45);
        e.closePath();
        Kt(e, c[10]);
        return d;
    }
    function wu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 88;
        d.height = a * 647;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 45, a * 384.5);
        Lt(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
        e.restore();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 572);
        e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
        e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
        e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
        e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 587);
        e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
        e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
        e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 113);
        e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
        e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
        e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
        e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 139);
        e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
        e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
        e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 29);
        e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
        e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
        e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
        e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 54);
        e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
        e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
        e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
        e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
        e.closePath();
        Kt(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 45, a * 384.5);
        Lt(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
        e.restore();
        Kt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 572);
        e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
        e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
        e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
        e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
        e.closePath();
        Kt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 587);
        e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
        e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
        e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
        e.closePath();
        Kt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 113);
        e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
        e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
        e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
        e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
        e.closePath();
        Kt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 139);
        e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
        e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
        e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
        e.closePath();
        Kt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 29);
        e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
        e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
        e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
        e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
        e.closePath();
        Kt(e, c[6], c[7], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 54);
        e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
        e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
        e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
        e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
        e.closePath();
        Kt(e, c[8]);
        return d;
    }
    function xu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 304;
        d.height = a * 278;
        e.translate(a * 10, a * 25);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 137);
        e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
        e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
        e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 52);
        e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
        e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
        e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
        e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
        e.closePath();
        Kt(e, c[0]);
        e.translate(a * -10, a * -25);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 137);
        e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
        e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
        e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
        e.closePath();
        Kt(e, c[1], c[2], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 52);
        e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
        e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
        e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
        e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
        e.closePath();
        Kt(e, c[3], c[4], a * 15);
        return d;
    }
    function yu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 200;
        d.height = a * 200;
        e.save();
        e.translate(a * 112, a * 158);
        Lt(e, a * -86.5, a * -86, a * 150, a * 35, a * 20);
        e.restore();
        Kt(e, c[0]);
        e.save();
        e.translate(a * 170, a * 100);
        Lt(e, a * -86.5, a * -86, a * 35, a * 150, a * 20);
        e.restore();
        Kt(e, c[0]);
        return d;
    }
    function zu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 151;
        d.height = a * 80;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 133, a * 54);
        e.bezierCurveTo(a * 136, a * 18, a * 129, a * 18, a * 114, a * 13);
        e.bezierCurveTo(a * 51, a * 0, a * 36, a * 16, a * 34, a * 16);
        e.bezierCurveTo(a * 8, a * 28, a * 22, a * 56, a * 21, a * 57);
        e.closePath();
        Kt(e, c[2], c[3], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 40);
        e.bezierCurveTo(a * 132, a * 35, a * 132, a * 30, a * 132, a * 29);
        e.bezierCurveTo(a * 145, a * 38, a * 144, a * 43, a * 137, a * 54);
        e.closePath();
        Kt(e, c[0], c[1], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 33);
        e.bezierCurveTo(a * 24, a * 44, a * 215, a * 39, a * 23, a * 44);
        e.bezierCurveTo(a * 19, a * 49, a * 19, a * 49, a * 15, a * 54);
        e.bezierCurveTo(a * 4, a * 43, a * 10, a * 35, a * 20, a * 32);
        e.closePath();
        Kt(e, c[0], c[1], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 18, a * 52);
        e.bezierCurveTo(a * 24, a * 31, a * 34, a * 25, a * 75, a * 23);
        e.bezierCurveTo(a * 130, a * 24, a * 129, a * 32, a * 134, a * 51);
        e.bezierCurveTo(a * 138, a * 70, a * 126, a * 72, a * 90, a * 73);
        e.bezierCurveTo(a * 18, a * 72, a * 15, a * 68, a * 18, a * 54);
        e.closePath();
        Kt(e, c[0], c[1], 4);
        return d;
    }
    function Au(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 175;
        d.height = a * 169;
        e.globalAlpha = 0.5;
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19, a * 139);
        e.bezierCurveTo(a * 18, a * 163, a * 22, a * 156, a * 53, a * 157);
        e.bezierCurveTo(a * 97.5, a * 157, a * 97.5, a * 157, a * 142, a * 157);
        e.bezierCurveTo(a * 150, a * 157, a * 153, a * 156, a * 154, a * 142);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -3);
        e.save();
        e.translate(a * 86.5, a * 81.5);
        Lt(e, a * -66.5, a * -65.5, a * 133, a * 131, a * 10);
        e.restore();
        Kt(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 84.5, a * 79);
        Lt(e, a * -50.5, a * -49, a * 101, a * 98, a * 10);
        e.restore();
        Kt(e, c[3], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42, a * 54);
        e.bezierCurveTo(a * 37, a * 48, a * 39, a * 44, a * 38, a * 41);
        e.bezierCurveTo(a * 42, a * 40, a * 45, a * 40, a * 50, a * 41);
        e.bezierCurveTo(a * 85, a * 36, a * 98, a * 37, a * 116, a * 42);
        e.bezierCurveTo(a * 132, a * 39, a * 132, a * 39, a * 133, a * 56);
        e.bezierCurveTo(a * 136, a * 73, a * 136, a * 84, a * 132, a * 106);
        e.bezierCurveTo(a * 47, a * 113, a * 85.5, a * 106, a * 39, a * 106);
        e.bezierCurveTo(a * 32, a * 81, a * 38, a * 60, a * 42, a * 55);
        e.closePath();
        Kt(e, c[4], c[5], a * 5);
        e.save();
        e.translate(a * 28, a * 24);
        e.rotate(0);
        Lt(e, a * -14, a * -14, a * 28, a * 28, a * 4);
        e.restore();
        Kt(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 143, a * 23);
        e.rotate(0);
        Lt(e, a * -14, a * -14, a * 28, a * 28, a * 4);
        e.restore();
        Kt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 80);
        e.bezierCurveTo(a * 73, a * 78, a * 84, a * 74, a * 100, a * 64);
        e.bezierCurveTo(a * 111, a * 57, a * 125, a * 67, a * 108, a * 84);
        e.bezierCurveTo(a * 96, a * 95, a * 86, a * 96, a * 70, a * 88);
        e.bezierCurveTo(a * 62.5, a * 84, a * 62.5, a * 84, a * 55, a * 80);
        e.closePath();
        Kt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17, a * 112);
        e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
        e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
        e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
        e.closePath();
        Kt(e, c[8], c[9], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 127, a * 111);
        e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
        e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
        e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
        e.closePath();
        Kt(e, c[9]);
        e.globalAlpha = 0.5;
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 15, a * 117);
        e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
        e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
        e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
        e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 127);
        e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
        e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
        e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
        e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
        e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
        e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
        e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
        e.closePath();
        Kt(e, c[4], c[5], a * 5);
        e.save();
        e.translate(a * 27.5, a * 138.5);
        Lt(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
        e.restore();
        Kt(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 143.5, a * 137);
        Lt(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
        e.restore();
        Kt(e, c[1], c[2], a * 5);
        return d;
    }
    function Bu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 106;
        d.height = a * 681;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 52.5, a * 395);
        e.rotate(0);
        Lt(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
        e.restore();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 588);
        e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
        e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
        e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 135);
        e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
        e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
        e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
        e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
        e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 150);
        e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
        e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
        e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
        e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
        e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 39);
        e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
        e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
        e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 64);
        e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
        e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
        e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
        e.closePath();
        Kt(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 52.5, a * 395);
        e.rotate(0);
        Lt(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
        e.restore();
        Kt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 588);
        e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
        e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
        e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
        e.closePath();
        Kt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 135);
        e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
        e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
        e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
        e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
        e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
        e.closePath();
        Kt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 150);
        e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
        e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
        e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
        e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
        e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
        e.closePath();
        Kt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 39);
        e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
        e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
        e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
        e.closePath();
        Kt(e, c[6], c[7], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 64);
        e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
        e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
        e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
        e.closePath();
        Kt(e, c[8]);
        return d;
    }
    function Cu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 135;
        d.height = a * 120;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 3.5, a * 55.25);
        e.bezierCurveTo(a * 3.5, a * 114.25, a * 2.5, a * 109.25, a * 3.5, a * 112.25);
        e.bezierCurveTo(a * 5.5, a * 119.25, a * 8.5, a * 119.25, a * 11.5, a * 119.25);
        e.bezierCurveTo(a * 15.5, a * 114.25, a * 13.5, a * 95.25, a * 14.5, a * 82.25);
        e.closePath();
        Kt(e, c[0], c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 6.5, a * 43.25);
        e.bezierCurveTo(a * 3.5, a * 27.25, a * 7.5, a * 20.25, a * 25.5, a * 11.25);
        e.bezierCurveTo(a * 45.5, a * -0.75, a * 73.5, a * 1.25, a * 107.5, a * 10.25);
        e.bezierCurveTo(a * 131.5, a * 21.25, a * 125.5, a * 34.25, a * 125.5, a * 36.25);
        e.closePath();
        Kt(e, c[0], c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 120.5, a * 62.25);
        e.bezierCurveTo(a * 121.5, a * 95.25, a * 120.5, a * 80.25, a * 120.5, a * 100.25);
        e.bezierCurveTo(a * 118.5, a * 119.25, a * 123.5, a * 118.25, a * 129.5, a * 113.25);
        e.bezierCurveTo(a * 133.5, a * 107.25, a * 130.5, a * 97.25, a * 130.5, a * 87.25);
        e.bezierCurveTo(a * 129.5, a * 56.25, a * 130, a * 70.75, a * 129.5, a * 54.25);
        e.closePath();
        Kt(e, c[0], c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17.5, a * 27);
        e.bezierCurveTo(a * 48.5, a * 5, a * 93.5, a * 14, a * 118.5, a * 26);
        e.bezierCurveTo(a * 132.5, a * 35, a * 133.5, a * 52, a * 132.5, a * 68);
        e.bezierCurveTo(a * 125.5, a * 87, a * 116.5, a * 84, a * 96.5, a * 75);
        e.bezierCurveTo(a * 60.5, a * 66, a * 52.5, a * 74, a * 37.5, a * 78);
        e.bezierCurveTo(a * 2.5, a * 86, a * 3.5, a * 78, a * 1.5, a * 61);
        e.bezierCurveTo(a * 1.5, a * 37, a * 9.5, a * 32, a * 15.5, a * 28);
        e.closePath();
        Kt(e, c[2], c[3], a * 7);
        return d;
    }
    function Du(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 170;
        var a = b * 172;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        f.translate(i, j + b * 7);
        f.globalAlpha = c ? 0.5 : 0;
        Nt(f, 0, 0, b * 60);
        Kt(f, d[0]);
        f.globalAlpha = 1;
        f.translate(0, b * -7);
        f.save();
        for (var h = 0; h < 10; h++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            ob(f, 3, b * 20, b * 4);
            Kt(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.restore();
        Nt(f, 0, 0, b * 60);
        Kt(f, d[3], d[4], b * 4);
        Nt(f, 0, 0, b * 40);
        Kt(f, d[5]);
        Nt(f, 0, 0, b * 25);
        Kt(f, d[6], d[7], b * 8);
        return e;
    }
    const Eu = 3;
    function Fu(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 170;
        e.height = b * 170;
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.save();
        f.translate(b * 85, b * 88);
        f.rotate(1.4);
        ob(f, 7, b * 60, b * 10);
        f.restore();
        Kt(f, d[0]);
        f.globalAlpha = 1;
        f.translate(b * 85, b * 80);
        for (var g = 0; g < 10; g++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            ob(f, 3, b * 21, b * 4);
            Kt(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.save();
        f.translate(b * 0, b * 0);
        f.rotate(1.4);
        ob(f, 7, b * 60, b * 10);
        Kt(f, d[3], d[4], b * 4);
        f.rotate(0.64);
        ob(f, 7, b * 40, b * 10);
        Kt(f, d[5], d[6], b * 4);
        f.rotate(0.12);
        ob(f, 7, b * 23, b * 5);
        f.restore();
        Kt(f, d[7]);
        return e;
    }
    function Gu(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 170;
        e.height = b * 170;
        f.translate(0, b * 3);
        f.globalAlpha = c ? 0.5 : 1;
        f.save();
        f.translate(b * 85, b * 95);
        f.rotate(1.4);
        ob(f, 7, b * 60, b * 10);
        f.restore();
        Kt(f, d[0]);
        f.globalAlpha = 1;
        f.translate(b * 85, b * 82);
        for (var g = 0; g < 10; g++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            ob(f, 3, b * 21, b * 4);
            Kt(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.save();
        f.translate(b * 0, b * 0);
        f.rotate(0.2);
        ob(f, 9, b * 60, b * 10);
        Kt(f, d[3], d[4], b * 4);
        f.rotate(-0.32);
        ob(f, 9, b * 38, b * 10);
        Kt(f, d[5], d[6], b * 4);
        f.rotate(0.68);
        ob(f, 9, b * 20, b * 8);
        Kt(f, d[7], d[8], b * 6);
        f.restore();
        return e;
    }
    function Ku(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 69;
        d.height = a * 120;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 30, a * 84);
        Lt(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
        e.restore();
        Kt(e, c[0]);
        e.save();
        e.translate(a * 30, a * 45);
        Lt(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
        e.restore();
        Kt(e, c[0]);
        e.save();
        e.translate(a * 30, a * 17);
        Lt(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
        e.restore();
        Kt(e, c[0]);
        e.save();
        e.translate(a * 30, a * 31);
        Lt(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
        e.restore();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 36, a * 79.140625);
        Lt(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
        e.restore();
        Kt(e, c[1], c[2], a * 3);
        e.save();
        e.translate(a * 35, a * 40.140625);
        Lt(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
        e.restore();
        Kt(e, c[3], c[4], a * 3);
        e.save();
        e.translate(a * 35, a * 12.140625);
        Lt(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
        e.restore();
        Kt(e, c[3], c[4], a * 3);
        e.save();
        e.translate(a * 34.5, a * 26.140625);
        Lt(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
        e.restore();
        Kt(e, c[3], c[4], a * 3);
        return d;
    }
    function Lu(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 170;
        e.height = b * 170;
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 3);
        f.save();
        f.translate(b * 85, b * 95);
        f.rotate(1.4);
        ob(f, 7, b * 60, b * 10);
        f.restore();
        Kt(f, d[0]);
        f.globalAlpha = 1;
        f.translate(b * 85, b * 82);
        for (var g = 0; g < 10; g++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            ob(f, 3, b * 21, b * 4);
            Kt(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.save();
        f.translate(b * 0, b * 0);
        f.rotate(1);
        ob(f, 8, b * 60, b * 10);
        Kt(f, d[3], d[4], b * 4);
        f.rotate(0.56);
        ob(f, 8, b * 40, b * 10);
        Kt(f, d[5], d[6], b * 4);
        f.rotate(0.28);
        ob(f, 8, b * 28, b * 8);
        Kt(f, d[7]);
        f.restore();
        return e;
    }
    const Mu = 0;
    function Nu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 253;
        c.height = a * 260;
        d.globalAlpha = 0.5;
        Nt(d, a * 126.5, a * 134, a * 119);
        Kt(d, b[0]);
        d.globalAlpha = 1;
        Nt(d, a * 126.5, a * 124, a * 119);
        Kt(d, b[1], b[2], a * 4);
        Nt(d, a * 126.5, a * 127, a * 100);
        Kt(d, b[3]);
        d.globalAlpha = 0.5;
        Nt(d, a * 126.5, a * 135, a * 81);
        Kt(d, b[0]);
        d.globalAlpha = 1;
        Nt(d, a * 126.5, a * 125, a * 84);
        Kt(d, b[4], b[5], a * 4);
        Nt(d, a * 126.5, a * 125, a * 61);
        Kt(d, b[6], b[7], a * 4);
        d.globalAlpha = 0.5;
        Nt(d, a * 126.5, a * 134, a * 40);
        Kt(d, b[8]);
        d.globalAlpha = 1;
        Nt(d, a * 126.5, a * 125, a * 40);
        Kt(d, b[9]);
        return c;
    }
    function Ou(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 345;
        d.height = a * 250;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 58);
        e.bezierCurveTo(a * 100.5, a * 43, a * 100.5, a * 43, a * 96, a * 28);
        e.bezierCurveTo(a * 119.5, a * 33.5, a * 119.5, a * 33.5, a * 143, a * 39);
        e.bezierCurveTo(a * 170, a * 37, a * 177, a * 37, a * 188, a * 40);
        e.bezierCurveTo(a * 213, a * 33.5, a * 213, a * 33.5, a * 238, a * 27);
        e.bezierCurveTo(a * 231, a * 52, a * 234, a * 42.5, a * 230, a * 58);
        e.closePath();
        Kt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 108, a * 51);
        e.bezierCurveTo(a * 91, a * 55, a * 85, a * 44, a * 86, a * 29);
        e.bezierCurveTo(a * 62, a * 50, a * 78, a * 69, a * 92, a * 75);
        e.closePath();
        Kt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 249, a * 27);
        e.bezierCurveTo(a * 273, a * 49, a * 262, a * 68, a * 246, a * 77);
        e.bezierCurveTo(a * 231, a * 59, a * 236, a * 66.5, a * 226, a * 56);
        e.bezierCurveTo(a * 243, a * 53, a * 252, a * 43, a * 249, a * 28);
        e.closePath();
        Kt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87, a * 78);
        e.bezierCurveTo(a * 87, a * 59, a * 98, a * 46, a * 127, a * 48);
        e.bezierCurveTo(a * 176, a * 48.5, a * 176, a * 48.5, a * 225, a * 49);
        e.bezierCurveTo(a * 243, a * 49, a * 253, a * 59, a * 253, a * 76);
        e.bezierCurveTo(a * 211, a * 85.5, a * 211, a * 85.5, a * 169, a * 95);
        e.closePath();
        Kt(e, c[5], c[6], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 105);
        e.bezierCurveTo(a * 56, a * 92, a * 59, a * 86, a * 65, a * 73);
        e.bezierCurveTo(a * 62.5, a * 61.5, a * 62.5, a * 61.5, a * 60, a * 50);
        e.bezierCurveTo(a * 99.5, a * 64.5, a * 99.5, a * 64.5, a * 139, a * 79);
        e.bezierCurveTo(a * 164, a * 77, a * 177, a * 76, a * 203, a * 78);
        e.bezierCurveTo(a * 242, a * 63.5, a * 242, a * 63.5, a * 281, a * 49);
        e.bezierCurveTo(a * 279, a * 60.5, a * 279, a * 60.5, a * 277, a * 72);
        e.bezierCurveTo(a * 286, a * 88, a * 286, a * 96, a * 287, a * 104);
        e.bezierCurveTo(a * 228.5, a * 127, a * 228.5, a * 127, a * 170, a * 150);
        e.closePath();
        Kt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 48, a * 130);
        e.bezierCurveTo(a * 61, a * 155, a * 63, a * 165, a * 56, a * 171);
        e.bezierCurveTo(a * 48, a * 177, a * 40, a * 171, a * 38, a * 178);
        e.bezierCurveTo(a * 33, a * 180, a * 37, a * 188, a * 47, a * 208);
        e.bezierCurveTo(a * 52, a * 221, a * 55, a * 222, a * 75, a * 229);
        e.bezierCurveTo(a * 91, a * 213, a * 98, a * 212, a * 112, a * 219);
        e.bezierCurveTo(a * 167, a * 225, a * 187, a * 224, a * 222, a * 220);
        e.bezierCurveTo(a * 244, a * 214, a * 247, a * 213, a * 263, a * 229);
        e.bezierCurveTo(a * 295, a * 220, a * 291, a * 215, a * 301, a * 194);
        e.bezierCurveTo(a * 308, a * 178, a * 309, a * 176, a * 302, a * 173);
        e.bezierCurveTo(a * 290, a * 177, a * 289, a * 177, a * 283, a * 169);
        e.bezierCurveTo(a * 279, a * 163, a * 279, a * 161, a * 290, a * 130);
        e.bezierCurveTo(a * 270, a * 127, a * 270, a * 127, a * 250, a * 124);
        e.bezierCurveTo(a * 209, a * 137.5, a * 209, a * 137.5, a * 168, a * 151);
        e.bezierCurveTo(a * 121, a * 135, a * 121, a * 135, a * 74, a * 119);
        e.closePath();
        Kt(e, c[1], c[2], a * 8);
        e.globalCompositeOperation = "destination-out";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 133, a * 158);
        e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
        e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
        e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
        e.closePath();
        Kt(e, c[7], c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 215, a * 146);
        e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
        e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
        e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
        e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
        e.closePath();
        Kt(e, c[7], c[8], a * 8);
        e.globalCompositeOperation = "source-over";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 133, a * 158);
        e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
        e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
        e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
        e.closePath();
        Kt(e, undefined, c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 215, a * 146);
        e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
        e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
        e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
        e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
        e.closePath();
        Kt(e, undefined, c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 66);
        e.bezierCurveTo(a * 57, a * 107, a * 63, a * 96, a * 120, a * 106);
        e.bezierCurveTo(a * 154, a * 112, a * 163, a * 116, a * 174, a * 135);
        e.bezierCurveTo(a * 180, a * 109, a * 191, a * 113, a * 237, a * 103);
        e.bezierCurveTo(a * 276, a * 100, a * 289, a * 94, a * 301, a * 67);
        e.bezierCurveTo(a * 317, a * 112, a * 301, a * 141, a * 274, a * 139);
        e.bezierCurveTo(a * 204, a * 166, a * 197, a * 169, a * 173, a * 183);
        e.bezierCurveTo(a * 170, a * 183, a * 170, a * 183, a * 167, a * 183);
        e.bezierCurveTo(a * 132, a * 160, a * 112, a * 156, a * 73, a * 141);
        e.bezierCurveTo(a * 43, a * 146, a * 27, a * 120, a * 39, a * 66);
        e.closePath();
        Kt(e, c[7], c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 185);
        e.bezierCurveTo(a * 115, a * 200, a * 118, a * 206, a * 124, a * 212);
        e.bezierCurveTo(a * 133, a * 223, a * 132, a * 231, a * 121, a * 230);
        e.bezierCurveTo(a * 108, a * 226, a * 108, a * 215, a * 107, a * 209);
        e.bezierCurveTo(a * 106, a * 201, a * 110, a * 196, a * 114, a * 185);
        e.closePath();
        Kt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226, a * 186);
        e.bezierCurveTo(a * 234, a * 201, a * 238, a * 209, a * 228, a * 225);
        e.bezierCurveTo(a * 223, a * 233, a * 213, a * 233, a * 211, a * 226);
        e.bezierCurveTo(a * 206, a * 219, a * 217, a * 216, a * 221, a * 207);
        e.bezierCurveTo(a * 225, a * 196, a * 225, a * 191, a * 226, a * 186);
        e.closePath();
        Kt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 172, a * 110);
        e.bezierCurveTo(a * 189, a * 153, a * 192, a * 160, a * 188, a * 175);
        e.bezierCurveTo(a * 183, a * 190, a * 176, a * 197, a * 165, a * 191);
        e.bezierCurveTo(a * 153, a * 181, a * 152, a * 166, a * 157, a * 151);
        e.bezierCurveTo(a * 164.5, a * 131, a * 164.5, a * 131, a * 172, a * 111);
        e.closePath();
        Kt(e, c[3], c[4], a * 8);
        return d;
    }
    function Pu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 450;
        d.height = a * 260;
        e.translate(a * 10, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        Lt(e, 0, 0, a * 400, a * 220, a * 30);
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9, a * 5);
        e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
        e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
        e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
        e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
        e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
        e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
        e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
        e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
        e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
        e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
        e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
        e.closePath();
        Kt(e, c[2], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 5, a * 70);
        e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
        e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
        e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
        e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
        e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
        e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
        e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
        e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
        e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
        e.closePath();
        Kt(e, c[3], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19, a * 158);
        e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
        e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
        e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
        e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
        e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
        e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
        e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
        e.closePath();
        Kt(e, c[2], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 183);
        e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
        e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
        e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
        e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
        e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
        e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
        e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
        e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
        e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
        e.closePath();
        Kt(e, c[3], c[1], a * 12);
        Nt(e, a * 41, a * 30, a * 14.7648230602334);
        Kt(e, c[3], c[1], a * 12);
        Nt(e, a * 369, a * 30, a * 15.556349186104045);
        Kt(e, c[3], c[1], a * 12);
        Nt(e, a * 364, a * 190, a * 15.620499351813308);
        Kt(e, c[3], c[1], a * 12);
        Nt(e, a * 41, a * 186, a * 15.556349186104045);
        Kt(e, c[3], c[1], a * 12);
        return d;
    }
    function Qu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 450;
        d.height = a * 260;
        e.translate(a * 10, a * 10);
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 9, a * 5);
            e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
            e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
            e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
            e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
            e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
            e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
            e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
            e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
            e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
            e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
            e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
            e.closePath();
            Kt(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 5, a * 70);
            e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
            e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
            e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
            e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
            e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
            e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
            e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
            e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
            e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
            e.closePath();
            Kt(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 19, a * 158);
            e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
            e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
            e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
            e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
            e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
            e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
            e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
            e.closePath();
            Kt(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 4, a * 183);
            e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
            e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
            e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
            e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
            e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
            e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
            e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
            e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
            e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
            e.closePath();
            Kt(e, b[3], b[3], a * 32);
            Nt(e, a * 41, a * 30, a * 14.7648230602334);
            Kt(e, b[3], b[3], a * 32);
            Nt(e, a * 369, a * 30, a * 15.556349186104045);
            Kt(e, b[3], b[3], a * 32);
            Nt(e, a * 364, a * 190, a * 15.620499351813308);
            Kt(e, b[3], b[3], a * 32);
            Nt(e, a * 41, a * 186, a * 15.556349186104045);
            Kt(e, b[3], b[3], a * 32);
        } else if (c == 2) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 9, a * 5);
            e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
            e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
            e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
            e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
            e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
            e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
            e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
            e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
            e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
            e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
            e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
            e.closePath();
            Kt(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 5, a * 70);
            e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
            e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
            e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
            e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
            e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
            e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
            e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
            e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
            e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
            e.closePath();
            Kt(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 19, a * 158);
            e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
            e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
            e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
            e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
            e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
            e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
            e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
            e.closePath();
            Kt(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 4, a * 183);
            e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
            e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
            e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
            e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
            e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
            e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
            e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
            e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
            e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
            e.closePath();
            Kt(e, b[3], b[3], a * 32);
            Nt(e, a * 41, a * 30, a * 14.7648230602334);
            Kt(e, b[3], b[3], a * 32);
            Nt(e, a * 369, a * 30, a * 15.556349186104045);
            Kt(e, b[3], b[3], a * 32);
            Nt(e, a * 364, a * 190, a * 15.620499351813308);
            Kt(e, b[3], b[3], a * 32);
            Nt(e, a * 41, a * 186, a * 15.556349186104045);
            Kt(e, b[3], b[3], a * 32);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9, a * 5);
        e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
        e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
        e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
        e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
        e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
        e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
        e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
        e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
        e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
        e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
        e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
        e.closePath();
        Kt(e, b[1], b[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 5, a * 70);
        e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
        e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
        e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
        e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
        e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
        e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
        e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
        e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
        e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
        e.closePath();
        Kt(e, b[2], b[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19, a * 158);
        e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
        e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
        e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
        e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
        e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
        e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
        e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
        e.closePath();
        Kt(e, b[1], b[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 183);
        e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
        e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
        e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
        e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
        e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
        e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
        e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
        e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
        e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
        e.closePath();
        Kt(e, b[2], b[0], a * 12);
        Nt(e, a * 41, a * 30, a * 14.7648230602334);
        Kt(e, b[2], b[0], a * 12);
        Nt(e, a * 369, a * 30, a * 15.556349186104045);
        Kt(e, b[2], b[0], a * 12);
        Nt(e, a * 364, a * 190, a * 15.620499351813308);
        Kt(e, b[2], b[0], a * 12);
        Nt(e, a * 41, a * 186, a * 15.556349186104045);
        Kt(e, b[2], b[0], a * 12);
        return d;
    }
    function Ru(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 139;
        d.height = a * 135;
        e.translate(0, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 77);
        e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
        e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
        e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
        e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
        e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 37);
        e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
        e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
        e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
        e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
        e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 63);
        e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
        e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
        e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
        e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
        e.closePath();
        Kt(e, c[0]);
        e.translate(0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 77);
        e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
        e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
        e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
        e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
        e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
        e.closePath();
        Kt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 37);
        e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
        e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
        e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
        e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
        e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
        e.closePath();
        Kt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 63);
        e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
        e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
        e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
        e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
        e.closePath();
        Kt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 38);
        e.bezierCurveTo(a * 72.5, a * 52, a * 72.5, a * 52, a * 65, a * 66);
        e.bezierCurveTo(a * 47.5, a * 37, a * 47.5, a * 37, a * 30, a * 7);
        e.bezierCurveTo(a * 48, a * 4, a * 57, a * 4, a * 64, a * 10);
        e.closePath();
        Kt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 65);
        e.bezierCurveTo(a * 125, a * 73, a * 95.5, a * 69, a * 126, a * 73);
        e.bezierCurveTo(a * 119, a * 98, a * 106, a * 104, a * 98, a * 103);
        e.bezierCurveTo(a * 84.5, a * 102, a * 84.5, a * 102, a * 71, a * 101);
        e.bezierCurveTo(a * 64, a * 86, a * 64, a * 86, a * 57, a * 70);
        e.closePath();
        Kt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 69);
        e.bezierCurveTo(a * 64, a * 65, a * 46, a * 67, a * 65, a * 65);
        e.bezierCurveTo(a * 43.5, a * 94, a * 43.5, a * 94, a * 22, a * 123);
        e.bezierCurveTo(a * 8, a * 103, a * 8, a * 103, a * 9, a * 103);
        e.bezierCurveTo(a * 5, a * 98, a * 11, a * 89, a * 26, a * 70);
        e.closePath();
        Kt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26, a * 69);
        e.bezierCurveTo(a * 65, a * 60, a * 45, a * 65, a * 64, a * 60);
        e.bezierCurveTo(a * 63, a * 65, a * 63, a * 65, a * 62, a * 70);
        e.closePath();
        Kt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 38);
        e.bezierCurveTo(a * 68, a * 70, a * 75, a * 53, a * 70, a * 68);
        e.bezierCurveTo(a * 65, a * 67, a * 65, a * 67, a * 60, a * 65);
        e.closePath();
        Kt(e, c[2]);
        return d;
    }
    function Su(a, b, c) {
        var d = (e = document.createElement("canvas")).getContext("2d");
        if (c == 0) {
            e.width = a * 566;
            e.height = a * 429;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 312.625, a * 39.046875);
            d.bezierCurveTo(a * 456.625, a * 60.046875, a * 521.625, a * 134.046875, a * 528.625, a * 199.046875);
            d.bezierCurveTo(a * 540.625, a * 298.046875, a * 491.625, a * 364.046875, a * 405.625, a * 394.046875);
            d.bezierCurveTo(a * 270.625, a * 429.046875, a * 182.625, a * 395.046875, a * 100.625, a * 344.046875);
            d.bezierCurveTo(a * 15.625, a * 283.046875, a * 20.625, a * 195.046875, a * 33.625, a * 158.046875);
            d.bezierCurveTo(a * 56.625, a * 80.046875, a * 102.625, a * 46.046875, a * 183.625, a * 33.046875);
            d.bezierCurveTo(a * 225.625, a * 25.046875, a * 270.625, a * 30.046875, a * 312.625, a * 39.046875);
            d.closePath();
            Kt(d, b[0]);
        } else if (c == 1) {
            d = (e = document.createElement("canvas")).getContext("2d");
            e.width = a * 511;
            e.height = a * 408;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 141.625, a * 49.296875);
            d.bezierCurveTo(a * 225.625, a * 10.296875, a * 320.625, a * 16.296875, a * 390.625, a * 39.296875);
            d.bezierCurveTo(a * 476.625, a * 71.296875, a * 483.625, a * 142.296875, a * 486.625, a * 197.296875);
            d.bezierCurveTo(a * 491.625, a * 289.296875, a * 462.625, a * 317.296875, a * 417.625, a * 351.296875);
            d.bezierCurveTo(a * 367.625, a * 385.296875, a * 313.625, a * 404.296875, a * 218.625, a * 395.296875);
            d.bezierCurveTo(a * 108.625, a * 381.296875, a * 81.625, a * 350.296875, a * 52.625, a * 305.296875);
            d.bezierCurveTo(a * 16.625, a * 244.296875, a * 23.625, a * 171.296875, a * 37.625, a * 145.296875);
            d.bezierCurveTo(a * 65.625, a * 84.296875, a * 97.625, a * 74.296875, a * 141.625, a * 49.296875);
            d.closePath();
            Kt(d, b[0]);
        } else if (c == 2) {
            var e;
            d = (e = document.createElement("canvas")).getContext("2d");
            e.width = a * 504;
            e.height = a * 408;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 153.625, a * 46.296875);
            d.bezierCurveTo(a * 271.625, a * 17.296875, a * 345.625, a * 35.296875, a * 410.625, a * 71.296875);
            d.bezierCurveTo(a * 473.625, a * 109.296875, a * 478.625, a * 167.296875, a * 473.625, a * 205.296875);
            d.bezierCurveTo(a * 462.625, a * 295.296875, a * 438.625, a * 316.296875, a * 388.625, a * 345.296875);
            d.bezierCurveTo(a * 331.625, a * 374.296875, a * 273.625, a * 392.296875, a * 180.625, a * 387.296875);
            d.bezierCurveTo(a * 111.625, a * 380.296875, a * 86.625, a * 360.296875, a * 51.625, a * 309.296875);
            d.bezierCurveTo(a * 23.625, a * 267.296875, a * 25.625, a * 226.296875, a * 27.625, a * 175.296875);
            d.bezierCurveTo(a * 37.625, a * 99.296875, a * 88.625, a * 57.296875, a * 153.625, a * 46.296875);
            d.closePath();
            Kt(d, b[0]);
        }
        return e;
    }
    function em(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 149;
        c.height = a * 153;
        d.globalAlpha = 0.5;
        Nt(d, a * 74.5, a * 85, a * 66);
        Kt(d, b[0]);
        d.globalAlpha = 1;
        Nt(d, a * 75.5, a * 72.5, a * 67);
        Kt(d, b[1], b[2], a * 4);
        Nt(d, a * 75.5, a * 73.5, a * 54);
        Kt(d, b[3]);
        d.globalAlpha = 0.5;
        Nt(d, a * 74.5, a * 80.5, a * 39);
        Kt(d, b[4]);
        d.globalAlpha = 1;
        Nt(d, a * 74.5, a * 74.5, a * 37);
        Kt(d, b[5]);
        return c;
    }
    function im(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 173;
        c.height = a * 178;
        d.globalAlpha = 0.5;
        Nt(d, a * 86.5, a * 98, a * 80);
        Kt(d, b[0]);
        d.globalAlpha = 1;
        Nt(d, a * 86.5, a * 89, a * 81);
        Kt(d, b[1], b[2], a * 4);
        Nt(d, a * 86.5, a * 86, a * 59);
        Kt(d, b[3], b[4], a * 4);
        d.globalAlpha = 0.5;
        Nt(d, a * 86.5, a * 95, a * 34);
        Kt(d, b[0]);
        d.globalAlpha = 1;
        Nt(d, a * 86.5, a * 89, a * 34);
        Kt(d, b[5]);
        return c;
    }
    function tm(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 450;
        f.height = b * 260;
        var a = Pu(b * 1, true, d);
        g.drawImage(a, b * 0, b * 0);
        if (e == 1) {
            g.translate(b * 100, b * 0);
            Nt(g, b * 113, b * 120, b * 66);
            Kt(g, undefined, d[4], b * 13);
            a = yd(b * 0.65, Ik, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
            g.rotate(0.7);
            g.drawImage(a, b * 133, b * -64);
            g.rotate(-0.7);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 70);
            g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
            g.closePath();
            Kt(g, undefined, d[4], b * 13);
        } else if (e == 2) {
            g.translate(b * 100, b * 0);
            Nt(g, b * 113, b * 120, b * 66);
            Kt(g, undefined, d[4], b * 13);
            g.translate(b * 30, b * 40);
            g.save();
            g.translate(b * 83.5, b * 66.5);
            Lt(g, b * -40.5, b * -29.5, b * 81, b * 59, b * 15);
            g.restore();
            Kt(g, "#dff2f7", "#187484", b * 7);
            Nt(g, b * 22, b * 82, b * 12);
            Kt(g, "#dff2f7", "#187484", b * 7);
            Nt(g, b * 145, b * 82, b * 12);
            Kt(g, "#dff2f7", "#187484", b * 7);
            a = Gd(b * 0.5, true, ["#80500b", "#7c4908"]);
            g.drawImage(a, b * 10, b * 85);
            a = Gd(b * 0.5, Yq, ["#80500b", "#7c4908"]);
            g.drawImage(a, b * 50, b * 85);
            a = Gd(b * 0.5, ul, ["#80500b", "#7c4908"]);
            g.drawImage(a, b * 90, b * 85);
            a = Ot(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 90, b * 105);
            a = Ot(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 90, b * 105);
            a = Ot(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 30, b * 125);
            a = Ot(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 50, b * 115);
            a = Ot(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 30, b * 100);
            a = Ot(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 80, b * 120);
            a = Ot(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 110, b * 125);
            a = Ot(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 120, b * 105);
        } else if (e == 3) {
            g.translate(b * 100, b * 0);
            Nt(g, b * 113, b * 120, b * 66);
            Kt(g, undefined, d[4], b * 13);
            g.translate(b * 40, b * 50);
            g.save();
            g.translate(b * 71, b * 69);
            Lt(g, b * -30, b * -42, b * 60, b * 84, b * 10);
            g.restore();
            Kt(g, undefined, d[5], b * 4);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 42, b * 28);
            g.bezierCurveTo(b * 60, b * 31, b * 60, b * 31, b * 78, b * 34);
            g.bezierCurveTo(b * 82, b * 34, b * 84, b * 37, b * 83, b * 45);
            g.bezierCurveTo(b * 83, b * 80, b * 83, b * 80, b * 83, b * 115);
            g.bezierCurveTo(b * 83, b * 120, b * 80, b * 122, b * 73, b * 120);
            g.bezierCurveTo(b * 42, b * 111, b * 43, b * 109, b * 41, b * 102);
            g.bezierCurveTo(b * 41, b * 71, b * 41, b * 71, b * 41, b * 40);
            g.closePath();
            Kt(g, d[5], d[5], b * 4);
            g.translate(b * -40, b * -50);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 70);
            g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
            g.closePath();
            Kt(g, Mq, d[4], b * 13);
        } else if (e == 4) {
            g.scale(1, 1);
            g.translate(b * 70, b * 50);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 23, b * 6);
            g.bezierCurveTo(b * 25.5, b * 56, b * 25.5, b * 56, b * 28, b * 106);
            Kt(g, Xk, d[5], b * 14);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 59, b * 10);
            g.bezierCurveTo(b * 61, b * 51.5, b * 61, b * 51.5, b * 63, b * 93);
            Kt(g, Uj, d[5], b * 14);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 7, b * 55);
            g.bezierCurveTo(b * 33.5, b * 55, b * 33.5, b * 55, b * 60, b * 55);
            Kt(g, Db, d[5], b * 14);
            g.translate(b * 10, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 123, b * 16);
            g.bezierCurveTo(b * 103, b * 16.5, b * 103, b * 16.5, b * 83, b * 17);
            g.bezierCurveTo(b * 83.5, b * 61, b * 83.5, b * 61, b * 84, b * 105);
            g.bezierCurveTo(b * 106, b * 105, b * 106, b * 105, b * 128, b * 105);
            Kt(g, Bs, d[5], b * 14);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 72, b * 63);
            g.bezierCurveTo(b * 88.5, b * 62.5, b * 88.5, b * 62.5, b * 105, b * 62);
            Kt(g, undefined, d[5], b * 14);
            g.translate(b * 10, b * 10);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 141, b * 8);
            g.bezierCurveTo(b * 143, b * 50, b * 143, b * 50, b * 145, b * 92);
            g.bezierCurveTo(b * 169, b * 88.5, b * 169, b * 88.5, b * 193, b * 85);
            Kt(g, undefined, d[5], b * 14);
            g.translate(b * 10, b * -10);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 205, b * 124);
            g.bezierCurveTo(b * 205, b * 69, b * 205, b * 69, b * 205, b * 14);
            g.bezierCurveTo(b * 239, b * 15, b * 250, b * 37, b * 249, b * 49);
            g.bezierCurveTo(b * 251, b * 65, b * 242, b * 76, b * 206, b * 75);
            Kt(g, undefined, d[5], b * 14);
        }
        return f;
    }
    const nm = 2;
    function om(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 300;
        d.translate(a * -200, a * -40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 344, a * 18.40625);
        d.bezierCurveTo(a * 345, a * 361.40625, a * 344, a * 191.40625, a * 344, a * 364.40625);
        d.bezierCurveTo(a * 261, a * 275.40625, a * 274, a * 259.40625, a * 229, a * 213.40625);
        d.bezierCurveTo(a * 199, a * 187.40625, a * 222, a * 133.40625, a * 273, a * 100.40625);
        d.bezierCurveTo(a * 321, a * 71.40625, a * 327, a * 34.40625, a * 344, a * 18.40625);
        d.closePath();
        Kt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 335, a * 38.072906494140625);
        d.bezierCurveTo(a * 307, a * 62.072906494140625, a * 291, a * 60.072906494140625, a * 262, a * 68.07290649414062);
        d.bezierCurveTo(a * 223, a * 80.07290649414062, a * 225, a * 111.07290649414062, a * 264, a * 139.07290649414062);
        d.closePath();
        Kt(d, b[0]);
        return c;
    }
    function am(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 280;
        d.translate(a * -100, a * -20);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 228.5, a * 331.953125);
        d.bezierCurveTo(a * 228.5, a * 12.953125, a * 228.5, a * 171.453125, a * 228.5, a * 10.953125);
        d.bezierCurveTo(a * 196.5, a * 76.953125, a * 206.5, a * 78.953125, a * 191.5, a * 114.953125);
        d.bezierCurveTo(a * 162.5, a * 170.953125, a * 206.5, a * 220.953125, a * 210.5, a * 251.953125);
        d.bezierCurveTo(a * 218.5, a * 287.953125, a * 220.5, a * 291.953125, a * 228.5, a * 331.953125);
        d.closePath();
        Kt(d, b[0]);
        return c;
    }
    function rm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 20;
        c.height = a * 35;
        Lt(d, 0, 0, 20, 35, 7);
        Kt(d, b[0]);
        return c;
    }
    function sm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 271;
        c.height = a * 366;
        d.globalAlpha = 0.5;
        d.translate(0, a * 10);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 99);
        d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
        d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
        d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
        d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
        d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
        d.closePath();
        Kt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 73, a * 270);
        d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
        d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
        d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
        d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
        d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
        d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
        d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
        d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
        d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
        d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
        d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
        d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
        d.closePath();
        Kt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 252);
        d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
        d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
        d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
        d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
        d.closePath();
        Kt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 84, a * 257);
        d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
        d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
        d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
        d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
        d.closePath();
        Kt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 125, a * 65);
        d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
        d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
        d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
        d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
        d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
        d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
        d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
        d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
        d.closePath();
        Kt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 37);
        d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
        d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
        d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
        d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
        d.closePath();
        Kt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 146, a * 34);
        d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
        d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
        d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
        d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
        d.closePath();
        Kt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 143, a * 69);
        d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
        d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
        d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
        d.closePath();
        Kt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 149, a * 92);
        d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
        d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
        d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
        d.closePath();
        Kt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 111, a * 61);
        d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
        d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
        d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
        d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
        d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
        d.closePath();
        Kt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107, a * 81);
        d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
        d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
        d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
        d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
        d.closePath();
        Kt(d, b[0]);
        d.globalAlpha = 1;
        d.translate(0, a * -10);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 99);
        d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
        d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
        d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
        d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
        d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
        d.closePath();
        Kt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 73, a * 270);
        d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
        d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
        d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
        d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
        d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
        d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
        d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
        d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
        d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
        d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
        d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
        d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
        d.closePath();
        Kt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 252);
        d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
        d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
        d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
        d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
        d.closePath();
        Kt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 84, a * 257);
        d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
        d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
        d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
        d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
        d.closePath();
        Kt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 125, a * 65);
        d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
        d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
        d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
        d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
        d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
        d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
        d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
        d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
        d.closePath();
        Kt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 37);
        d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
        d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
        d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
        d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
        d.closePath();
        Kt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 146, a * 34);
        d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
        d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
        d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
        d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
        d.closePath();
        Kt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 143, a * 69);
        d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
        d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
        d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
        d.closePath();
        Kt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 149, a * 92);
        d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
        d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
        d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
        d.closePath();
        Kt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 111, a * 61);
        d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
        d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
        d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
        d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
        d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
        d.closePath();
        Kt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107, a * 81);
        d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
        d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
        d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
        d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
        d.closePath();
        Kt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 99);
        d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
        d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
        d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
        d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
        d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
        d.closePath();
        Kt(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 73, a * 270);
        d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
        d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
        d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
        d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
        d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
        d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
        d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
        d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
        d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
        d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
        d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
        d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
        d.closePath();
        Kt(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 252);
        d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
        d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
        d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
        d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
        d.closePath();
        Kt(d, b[2]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 84, a * 257);
        d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
        d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
        d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
        d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
        d.closePath();
        Kt(d, b[1]);
        Nt(d, a * 102, a * 269, a * 11);
        Kt(d, b[3]);
        Nt(d, a * 98, a * 266, a * 5);
        Kt(d, b[6]);
        Nt(d, a * 168, a * 269, a * 11);
        Kt(d, b[3]);
        Nt(d, a * 164, a * 266, a * 5);
        Kt(d, b[6]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 125, a * 65);
        d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
        d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
        d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
        d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
        d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
        d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
        d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
        d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
        d.closePath();
        Kt(d, b[2]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 235);
        d.bezierCurveTo(a * 118, a * 258, a * 137, a * 268, a * 148, a * 246);
        d.bezierCurveTo(a * 156, a * 228, a * 152, a * 169, a * 150, a * 140);
        d.bezierCurveTo(a * 147, a * 87, a * 143, a * 69, a * 142, a * 60);
        d.bezierCurveTo(a * 136, a * 44, a * 132, a * 43, a * 127, a * 62);
        d.bezierCurveTo(a * 119, a * 116, a * 119, a * 140, a * 116, a * 166);
        d.bezierCurveTo(a * 113, a * 202, a * 113, a * 223, a * 115, a * 233);
        d.closePath();
        Kt(d, b[4]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 132, a * 219);
        d.bezierCurveTo(a * 140, a * 229, a * 142, a * 231, a * 145, a * 237);
        d.bezierCurveTo(a * 145, a * 245, a * 139, a * 249, a * 133, a * 249);
        d.bezierCurveTo(a * 123, a * 248, a * 123, a * 243, a * 121, a * 239);
        d.bezierCurveTo(a * 126, a * 227, a * 129, a * 223, a * 132, a * 219);
        d.closePath();
        Kt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 179);
        d.bezierCurveTo(a * 140, a * 188.5, a * 140, a * 188.5, a * 147, a * 198);
        d.bezierCurveTo(a * 148, a * 209, a * 142, a * 214, a * 133, a * 214);
        d.bezierCurveTo(a * 121, a * 211, a * 121, a * 207, a * 120, a * 200);
        d.bezierCurveTo(a * 126.5, a * 189.5, a * 126.5, a * 189.5, a * 133, a * 179);
        d.closePath();
        Kt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 143);
        d.bezierCurveTo(a * 139, a * 151.5, a * 139, a * 151.5, a * 145, a * 160);
        d.bezierCurveTo(a * 143, a * 167, a * 140, a * 170, a * 134, a * 170);
        d.bezierCurveTo(a * 128, a * 169, a * 124, a * 167, a * 123, a * 161);
        d.bezierCurveTo(a * 128, a * 152, a * 128, a * 152, a * 133, a * 143);
        d.closePath();
        Kt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 115);
        d.bezierCurveTo(a * 137.5, a * 121.5, a * 137.5, a * 121.5, a * 142, a * 128);
        d.bezierCurveTo(a * 141, a * 133, a * 138, a * 135, a * 133, a * 135);
        d.bezierCurveTo(a * 129, a * 135, a * 125, a * 132, a * 125, a * 129);
        d.bezierCurveTo(a * 129, a * 122, a * 129, a * 122, a * 133, a * 115);
        d.closePath();
        Kt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 94);
        d.bezierCurveTo(a * 136.5, a * 98.5, a * 136.5, a * 98.5, a * 140, a * 103);
        d.bezierCurveTo(a * 139, a * 109, a * 137, a * 109, a * 133, a * 110);
        d.bezierCurveTo(a * 127, a * 108, a * 129, a * 107, a * 127, a * 105);
        d.bezierCurveTo(a * 130, a * 99.5, a * 130, a * 99.5, a * 133, a * 94);
        d.closePath();
        Kt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130, a * 279);
        d.bezierCurveTo(a * 136.5, a * 287.5, a * 136.5, a * 287.5, a * 143, a * 296);
        d.bezierCurveTo(a * 143, a * 302, a * 139, a * 309, a * 131, a * 308);
        d.bezierCurveTo(a * 123, a * 306, a * 121, a * 303, a * 120, a * 297);
        d.bezierCurveTo(a * 125.5, a * 288.5, a * 125.5, a * 288.5, a * 131, a * 280);
        d.closePath();
        Kt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 147, a * 303);
        d.bezierCurveTo(a * 151, a * 311, a * 151, a * 319, a * 147, a * 321);
        d.bezierCurveTo(a * 138, a * 320, a * 145, a * 308, a * 147, a * 303);
        d.closePath();
        Kt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 303);
        d.bezierCurveTo(a * 115, a * 312, a * 118, a * 319, a * 115, a * 319);
        d.bezierCurveTo(a * 112, a * 324, a * 109, a * 318, a * 109, a * 314);
        d.bezierCurveTo(a * 109, a * 308, a * 112, a * 303, a * 115, a * 303);
        d.closePath();
        Kt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 89, a * 280);
        d.bezierCurveTo(a * 83, a * 279, a * 80, a * 281, a * 81, a * 286);
        d.bezierCurveTo(a * 83, a * 290, a * 84, a * 290, a * 87, a * 286);
        d.closePath();
        Kt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 94, a * 290);
        d.bezierCurveTo(a * 93, a * 294, a * 90, a * 303, a * 86, a * 298);
        d.bezierCurveTo(a * 84, a * 295, a * 84, a * 291, a * 89, a * 291);
        d.closePath();
        Kt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 163, a * 295);
        d.bezierCurveTo(a * 175, a * 294, a * 176, a * 296, a * 175, a * 301);
        d.bezierCurveTo(a * 174, a * 305, a * 171, a * 305, a * 166, a * 300);
        d.closePath();
        Kt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 172, a * 286);
        d.bezierCurveTo(a * 180, a * 285, a * 181, a * 285, a * 180, a * 291);
        d.bezierCurveTo(a * 176, a * 295, a * 174, a * 294, a * 172, a * 286);
        d.closePath();
        Kt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 37);
        d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
        d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
        d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
        d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
        d.closePath();
        Kt(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 146, a * 34);
        d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
        d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
        d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
        d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
        d.closePath();
        Kt(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 143, a * 69);
        d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
        d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
        d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
        d.closePath();
        Kt(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 149, a * 92);
        d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
        d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
        d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
        d.closePath();
        Kt(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 111, a * 61);
        d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
        d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
        d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
        d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
        d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
        d.closePath();
        Kt(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107, a * 81);
        d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
        d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
        d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
        d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
        d.closePath();
        Kt(d, b[7]);
        return c;
    }
    function hm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 161;
        c.height = a * 190;
        d.globalAlpha = 0.5;
        d.translate(0, 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 9, a * 93);
        d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
        d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
        d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
        d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
        d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
        d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
        d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
        d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
        d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
        d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
        d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
        d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
        d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
        d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
        d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
        d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
        d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
        d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
        d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
        d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
        d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
        d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
        d.closePath();
        Kt(d, b[0]);
        d.globalAlpha = 1;
        d.translate(0, -8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 9, a * 93);
        d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
        d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
        d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
        d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
        d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
        d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
        d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
        d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
        d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
        d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
        d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
        d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
        d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
        d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
        d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
        d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
        d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
        d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
        d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
        d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
        d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
        d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
        d.closePath();
        Kt(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 28, a * 63);
        d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
        d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
        d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
        d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
        d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
        d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
        d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
        d.closePath();
        Kt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 99, a * 55);
        d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
        d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
        d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
        d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
        d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
        d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
        d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
        d.closePath();
        Kt(d, b[3]);
        Nt(d, a * 103, a * 110, a * 11);
        Kt(d, b[4]);
        Nt(d, a * 55, a * 111, a * 11);
        Kt(d, b[4]);
        Nt(d, a * 99, a * 107, a * 5);
        Kt(d, b[1]);
        Nt(d, a * 51, a * 108, a * 5);
        Kt(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 31, a * 121);
        d.bezierCurveTo(a * 45, a * 128, a * 51, a * 133, a * 53, a * 141);
        d.bezierCurveTo(a * 59, a * 161, a * 70, a * 173, a * 80, a * 169);
        d.bezierCurveTo(a * 89, a * 172, a * 99, a * 149, a * 107, a * 133);
        d.bezierCurveTo(a * 114, a * 122, a * 119, a * 123, a * 124, a * 119);
        d.bezierCurveTo(a * 109, a * 148, a * 117, a * 133, a * 109, a * 147);
        d.bezierCurveTo(a * 87, a * 180, a * 84, a * 179, a * 76, a * 178);
        d.bezierCurveTo(a * 49, a * 173, a * 44, a * 149, a * 31, a * 121);
        d.closePath();
        Kt(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.translate(-2, 0);
        d.moveTo(a * 71, a * 162);
        d.bezierCurveTo(a * 80, a * 155, a * 85, a * 159, a * 89, a * 164);
        d.bezierCurveTo(a * 90, a * 171, a * 86, a * 173, a * 79, a * 173);
        d.bezierCurveTo(a * 67, a * 172, a * 67, a * 168, a * 71, a * 162);
        d.closePath();
        Kt(d, b[3]);
        d.translate(2, 0);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 9, a * 93);
        d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
        d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
        d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
        d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
        d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
        d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
        d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
        d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
        d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
        d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
        d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
        d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
        d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
        d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
        d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
        d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
        d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
        d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
        d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
        d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
        d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
        d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
        d.closePath();
        Kt(d, T, b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 25, a * 63);
        d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
        d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
        d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
        Kt(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 91, a * 53);
        d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
        d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
        d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
        Kt(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 31, a * 63);
        d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
        d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
        d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
        d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
        d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
        d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
        d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
        d.closePath();
        Kt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 99, a * 55);
        d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
        d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
        d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
        d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
        d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
        d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
        d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
        d.closePath();
        Kt(d, b[3]);
        return c;
    }
    function lm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 48;
        c.height = a * 47;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 7.1875, a * 25.434661865234375);
        d.bezierCurveTo(a * 11.1875, a * 13.434661865234375, a * 18.1875, a * 8.434661865234375, a * 32.1875, a * 10.434661865234375);
        d.bezierCurveTo(a * 45.1875, a * 14.434661865234375, a * 41.1875, a * 24.434661865234375, a * 36.1875, a * 30.434661865234375);
        d.bezierCurveTo(a * 22.1875, a * 42.434661865234375, a * 2.1875, a * 41.434661865234375, a * 7.1875, a * 25.434661865234375);
        d.closePath();
        Kt(d, b[0]);
        return c;
    }
    function gm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 320;
        d.translate(a * -60, a * -15);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 188.5, a * 3.953125);
        d.bezierCurveTo(a * 188.5, a * 171.453125, a * 188.5, a * 171.453125, a * 188.5, a * 338.953125);
        d.bezierCurveTo(a * 162.5, a * 268.953125, a * 145.5, a * 265.953125, a * 116.5, a * 244.953125);
        d.bezierCurveTo(a * 67.5, a * 204.953125, a * 87.5, a * 160.953125, a * 113.5, a * 125.953125);
        d.bezierCurveTo(a * 141.5, a * 90.953125, a * 176.5, a * 56.953125, a * 188.5, a * 3.953125);
        d.closePath();
        Kt(d, b[0]);
        return c;
    }
    function um(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 300;
        d.translate(a * -80, -20);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 200.5, a * 14.953125);
        d.bezierCurveTo(a * 203, a * 171.953125, a * 203, a * 171.953125, a * 205.5, a * 328.953125);
        d.bezierCurveTo(a * 188.5, a * 257.953125, a * 164.5, a * 216.953125, a * 166.5, a * 176.953125);
        d.bezierCurveTo(a * 168.5, a * 133.953125, a * 198.5, a * 98.953125, a * 200.5, a * 14.953125);
        d.closePath();
        Kt(d, b[0]);
        return c;
    }
    function bm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 330;
        d.translate(a * -60, a * -10);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 188.5, a * 7.953125);
        d.bezierCurveTo(a * 188.5, a * 334.953125, a * 188.5, a * 332.953125, a * 188.5, a * 339.953125);
        d.bezierCurveTo(a * 166.5, a * 295.953125, a * 145.5, a * 295.953125, a * 139.5, a * 282.953125);
        d.bezierCurveTo(a * 124.5, a * 244.953125, a * 139.5, a * 243.953125, a * 131.5, a * 212.953125);
        d.bezierCurveTo(a * 118.5, a * 161.953125, a * 69.5, a * 156.953125, a * 74.5, a * 92.953125);
        d.bezierCurveTo(a * 85.5, a * 41.953125, a * 158.5, a * 49.953125, a * 188.5, a * 7.953125);
        d.closePath();
        Kt(d, b[0]);
        return c;
    }
    function dm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 33;
        c.height = a * 35;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 12.75, a * 7.1328125);
        d.bezierCurveTo(a * 26.75, a * 8.1328125, a * 27.75, a * 14.1328125, a * 24.75, a * 23.1328125);
        d.bezierCurveTo(a * 19.75, a * 31.1328125, a * 15.75, a * 33.1328125, a * 6.75, a * 26.1328125);
        d.bezierCurveTo(a * 0.75, a * 19.1328125, a * 4.75, a * 8.1328125, a * 12.75, a * 7.1328125);
        d.closePath();
        Kt(d, b[0]);
        return c;
    }
    function vm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 147;
        c.height = a * 172;
        d.globalAlpha = 0.5;
        d.translate(0, a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 8, a * 50);
        d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
        d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
        d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
        d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
        d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
        d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
        d.closePath();
        Kt(d, b[0]);
        d.translate(0, a * -8);
        d.globalAlpha = 1;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 8, a * 50);
        d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
        d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
        d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
        d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
        d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
        d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
        d.closePath();
        Kt(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 14, a * 57);
        d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
        d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
        Kt(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 93, a * 47);
        d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
        d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
        Kt(d, b[1], b[2], a * 4);
        Nt(d, a * 51, a * 91, a * 9);
        Kt(d, b[3]);
        Nt(d, a * 95, a * 91, a * 9);
        Kt(d, b[3]);
        Nt(d, a * 91, a * 89, a * 4);
        Kt(d, b[4]);
        Nt(d, a * 47, a * 89, a * 4);
        Kt(d, b[4]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 54, a * 133);
        d.bezierCurveTo(a * 56, a * 108, a * 64, a * 99, a * 73, a * 98);
        d.bezierCurveTo(a * 86, a * 97, a * 91, a * 119, a * 93, a * 133);
        d.bezierCurveTo(a * 94, a * 155, a * 90, a * 150, a * 74, a * 155);
        d.bezierCurveTo(a * 50, a * 152, a * 55, a * 145, a * 54, a * 134);
        d.closePath();
        Kt(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 65.25, a * 135);
        d.bezierCurveTo(a * 75.25, a * 128, a * 83.25, a * 133, a * 83.25, a * 138);
        d.bezierCurveTo(a * 88.25, a * 148, a * 61.25, a * 149, a * 64.25, a * 137);
        d.closePath();
        Kt(d, b[6]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 74, a * 145);
        d.bezierCurveTo(a * 74, a * 148, a * 74, a * 148, a * 74, a * 151);
        d.closePath();
        Kt(d, undefined, b[6], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 19, a * 58);
        d.bezierCurveTo(a * 10, a * 38, a * 18, a * 33, a * 28, a * 34);
        d.bezierCurveTo(a * 41, a * 39, a * 45, a * 45, a * 50, a * 51);
        d.closePath();
        Kt(d, b[6]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 100, a * 51);
        d.bezierCurveTo(a * 106, a * 36, a * 119, a * 31, a * 128, a * 36);
        d.bezierCurveTo(a * 137, a * 49, a * 128, a * 58, a * 128, a * 60);
        d.closePath();
        Kt(d, b[6]);
        return c;
    }
    function mm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 100;
        c.height = a * 100;
        d.globalAlpha = 0.5;
        d.fillStyle = b[0];
        d.fillRect(0, 0, c.width, c.height);
        return c;
    }
    const cm = 2;
    function pm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 175;
        d.height = a * 106;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 67);
        e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
        e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
        e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 75);
        e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
        e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
        e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
        e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
        e.closePath();
        Kt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 38, a * 46);
        e.bezierCurveTo(a * 52, a * 37, a * 69, a * 36, a * 85, a * 36);
        e.bezierCurveTo(a * 118, a * 38, a * 129, a * 42, a * 137, a * 48);
        e.bezierCurveTo(a * 135, a * 45, a * 135, a * 45, a * 133, a * 42);
        e.bezierCurveTo(a * 124, a * 32, a * 116, a * 28, a * 88, a * 25);
        e.bezierCurveTo(a * 47, a * 28, a * 40, a * 32, a * 36, a * 44);
        e.closePath();
        Kt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 75);
        e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
        e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
        e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
        e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
        e.closePath();
        Kt(e, _r, c[2], a * 4);
        e.translate(0, a * -3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 67);
        e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
        e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
        e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
        e.closePath();
        Kt(e, c[10], c[10], a * 4);
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 43);
        e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
        e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
        e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 43);
        e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
        e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
        e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 19);
        e.bezierCurveTo(a * 24, a * 35, a * 35, a * 42, a * 42, a * 44);
        e.bezierCurveTo(a * 43, a * 51, a * 43, a * 48, a * 43, a * 56);
        e.bezierCurveTo(a * 25, a * 47, a * 17, a * 36, a * 23, a * 20);
        e.closePath();
        Kt(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 148, a * 18);
        e.bezierCurveTo(a * 159, a * 44, a * 139, a * 52, a * 130, a * 55);
        e.bezierCurveTo(a * 129, a * 48, a * 129, a * 46, a * 131, a * 43);
        e.bezierCurveTo(a * 144, a * 37, a * 148, a * 35, a * 147, a * 18);
        e.closePath();
        Kt(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 43);
        e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
        e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
        e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
        e.closePath();
        Kt(e, Yg, c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 43);
        e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
        e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
        e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
        e.closePath();
        Kt(e, Og, c[4], a * 4);
        e.save();
        e.translate(a * 87, a * 34.5);
        e.rotate(0);
        Lt(e, a * -8, a * -10.5, a * 16, a * 21, a * 10);
        e.restore();
        Kt(e, c[7], c[2], a * 4);
        e.save();
        e.translate(a * 87, a * 57);
        e.rotate(0);
        Lt(e, a * -8, a * -23, a * 16, a * 46, a * 10);
        e.restore();
        Kt(e, c[8], c[2], a * 4);
        Nt(e, a * 87, a * 39, a * 4.123105625617661);
        Kt(e, c[9], c[2], a * 4);
        Nt(e, a * 87, a * 60, a * 4.242640687119285);
        Kt(e, c[9], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 67);
        e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
        e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
        e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
        e.closePath();
        Kt(e, c[8], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 69);
        e.bezierCurveTo(a * 13, a * 77, a * 16, a * 74, a * 27, a * 80);
        e.closePath();
        Kt(e, c[9], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 70);
        e.bezierCurveTo(a * 149.5, a * 72, a * 149.5, a * 72, a * 154, a * 74);
        e.bezierCurveTo(a * 150, a * 77, a * 150, a * 77, a * 146, a * 80);
        e.closePath();
        Kt(e, c[9], c[2], a * 4);
        Nt(e, a * 50, a * 80, a * 5);
        Kt(e, c[9], c[2], a * 4);
        Nt(e, a * 86.01141357421875, a * 81.76705932617188, a * 5);
        Kt(e, c[9], c[2], a * 4);
        Nt(e, a * 119.01141357421875, a * 80.13069152832031, a * 5);
        Kt(e, c[9], c[2], a * 4);
        return d;
    }
    function Cm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 187;
        d.height = a * 119;
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, 3);
        e.moveTo(a * 53, a * 45);
        e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
        e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
        e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
        e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
        e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
        e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
        e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
        e.closePath();
        Kt(e, c[5]);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, -3);
        e.moveTo(a * 53, a * 45);
        e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
        e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
        e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
        e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
        e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
        e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
        e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
        e.closePath();
        Kt(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 151, a * 60);
        e.bezierCurveTo(a * 140, a * 36, a * 137, a * 32, a * 124, a * 29);
        e.bezierCurveTo(a * 98, a * 22, a * 80, a * 24, a * 62, a * 28);
        e.bezierCurveTo(a * 42, a * 35, a * 38, a * 46, a * 34, a * 58);
        e.bezierCurveTo(a * 53, a * 74, a * 76, a * 76, a * 91, a * 78);
        e.closePath();
        Kt(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 37, a * 53);
        e.bezierCurveTo(a * 30, a * 56, a * 29, a * 67, a * 30, a * 68);
        e.bezierCurveTo(a * 94, a * 108, a * 150, a * 76, a * 155, a * 70);
        e.bezierCurveTo(a * 154, a * 60, a * 151, a * 54, a * 149, a * 53);
        e.bezierCurveTo(a * 101, a * 74, a * 66, a * 66, a * 37, a * 53);
        e.closePath();
        Kt(e, c[2], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 36);
        e.bezierCurveTo(a * 92, a * 25, a * 86, a * 28, a * 82, a * 34);
        e.bezierCurveTo(a * 88, a * 40, a * 93, a * 40, a * 98, a * 36);
        e.closePath();
        Kt(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 43);
        e.bezierCurveTo(a * 69, a * 46, a * 67, a * 52, a * 69, a * 58);
        Kt(e, undefined, c[1], a * 4);
        Nt(e, a * 58, a * 50, a * 5);
        Kt(e, c[4]);
        Nt(e, a * 43, a * 65, a * 5);
        Kt(e, c[4]);
        Nt(e, a * 58, a * 73, a * 5);
        Kt(e, c[4]);
        Nt(e, a * 58, a * 50, a * 2);
        Kt(e, c[5]);
        Nt(e, a * 43, a * 65, a * 2);
        Kt(e, c[5]);
        Nt(e, a * 58, a * 73, a * 2);
        Kt(e, c[5]);
        return d;
    }
    function Tm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 85;
        c.height = a * 145;
        d.translate(a * -165, a * -95);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217, a * 103);
        d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
        d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
        d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
        d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
        d.closePath();
        Kt(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 231, a * 163);
        d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
        d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
        d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
        d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
        d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
        d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
        d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
        d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
        d.closePath();
        Kt(d, b[2], b[3], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 234, a * 154);
        d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
        d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
        d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
        d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
        d.closePath();
        Kt(d, b[2]);
        return c;
    }
    function fm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 85;
        c.height = a * 145;
        d.translate(a * -20, a * -95);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 50, a * 105);
        d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
        d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
        d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
        d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
        d.closePath();
        Kt(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 44, a * 106);
        d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
        d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
        d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
        d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
        d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
        d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
        d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
        d.closePath();
        Kt(d, b[2], b[3], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 30, a * 159);
        d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
        d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
        d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
        d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
        d.closePath();
        Kt(d, b[2]);
        return c;
    }
    function zm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 180;
        d.height = a * 120;
        e.translate(a * -65, a * -35);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 150.5, a * 63.84375);
        Lt(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
        e.restore();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80.5, a * 75.34375);
        e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
        e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
        e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 206.5, a * 71.34375);
        e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
        e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
        e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 136.5, a * 75.34375);
        e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
        e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
        e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
        e.closePath();
        Kt(e, c[0]);
        e.save();
        e.translate(a * 152.5, a * 80.84375);
        e.rotate(3.12);
        Lt(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
        e.restore();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 150.5, a * 63.84375);
        Lt(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
        e.restore();
        Kt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80.5, a * 75.34375);
        e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
        e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
        e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
        e.closePath();
        Kt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 206.5, a * 71.34375);
        e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
        e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
        e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
        e.closePath();
        Kt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 136.5, a * 75.34375);
        e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
        e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
        e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
        e.closePath();
        Kt(e, c[1], c[2], a * 4);
        e.save();
        e.translate(a * 152.5, a * 80.84375);
        e.rotate(3.12);
        Lt(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
        e.restore();
        Kt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 83.5, a * 73.34375);
        e.bezierCurveTo(a * 93.5, a * 70.34375, a * 105.5, a * 70.34375, a * 124.5, a * 72.34375);
        e.bezierCurveTo(a * 132.5, a * 78.34375, a * 162.5, a * 80.34375, a * 176.5, a * 76.34375);
        e.bezierCurveTo(a * 194.5, a * 69.34375, a * 192.5, a * 68.34375, a * 199.5, a * 63.34375);
        e.bezierCurveTo(a * 204.5, a * 63.34375, a * 204.5, a * 63.34375, a * 209.5, a * 63.34375);
        e.bezierCurveTo(a * 153.5, a * 82.34375, a * 157.5, a * 85.34375, a * 209.5, a * 63.34375);
        e.bezierCurveTo(a * 194.5, a * 88.34375, a * 162.5, a * 87.34375, a * 149.5, a * 88.34375);
        e.bezierCurveTo(a * 129.5, a * 81.34375, a * 103.5, a * 75.34375, a * 83.5, a * 82.34375);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137.5, a * 65.34375);
        e.bezierCurveTo(a * 150.5, a * 76.34375, a * 170.5, a * 71.34375, a * 174.5, a * 65.34375);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 221.5, a * 85.34375);
        e.bezierCurveTo(a * 211.5, a * 79.34375, a * 191.5, a * 88.34375, a * 181.5, a * 96.34375);
        e.bezierCurveTo(a * 201.5, a * 96.34375, a * 201.5, a * 96.34375, a * 221.5, a * 96.34375);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 89.34375);
        e.bezierCurveTo(a * 102.5, a * 87.34375, a * 112.5, a * 88.34375, a * 119.5, a * 97.34375);
        e.bezierCurveTo(a * 102, a * 98.34375, a * 102, a * 98.34375, a * 84.5, a * 99.34375);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 208.5, a * 104.34375);
        e.bezierCurveTo(a * 208.5, a * 110.34375, a * 208.5, a * 110.34375, a * 208.5, a * 116.34375);
        e.bezierCurveTo(a * 211.5, a * 110.34375, a * 211.5, a * 110.34375, a * 214.5, a * 104.34375);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 117.34375);
        e.bezierCurveTo(a * 92, a * 118.84375, a * 92, a * 118.84375, a * 96.5, a * 120.34375);
        e.bezierCurveTo(a * 93, a * 123.84375, a * 93, a * 123.84375, a * 89.5, a * 127.34375);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107.5, a * 51.34375);
        e.bezierCurveTo(a * 122.5, a * 54.34375, a * 122.5, a * 54.34375, a * 137.5, a * 57.34375);
        e.bezierCurveTo(a * 118, a * 57.34375, a * 118, a * 57.34375, a * 98.5, a * 57.34375);
        e.bezierCurveTo(a * 94.5, a * 54.84375, a * 94.5, a * 54.84375, a * 90.5, a * 52.34375);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 170.5, a * 52.34375);
        e.bezierCurveTo(a * 179.5, a * 51.84375, a * 179.5, a * 51.84375, a * 188.5, a * 51.34375);
        e.bezierCurveTo(a * 187.5, a * 53.84375, a * 187.5, a * 53.84375, a * 186.5, a * 56.34375);
        e.bezierCurveTo(a * 177, a * 56.34375, a * 177, a * 56.34375, a * 167.5, a * 56.34375);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80.5, a * 69.34375);
        e.bezierCurveTo(a * 86.5, a * 70.34375, a * 86.5, a * 70.34375, a * 92.5, a * 71.34375);
        e.bezierCurveTo(a * 86, a * 73.34375, a * 86, a * 73.34375, a * 79.5, a * 75.34375);
        e.closePath();
        Kt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222.5, a * 75.34375);
        e.bezierCurveTo(a * 214.5, a * 76.34375, a * 214.5, a * 76.34375, a * 206.5, a * 77.34375);
        e.bezierCurveTo(a * 216.5, a * 79.34375, a * 216.5, a * 79.34375, a * 226.5, a * 81.34375);
        e.closePath();
        Kt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 100.34375);
        e.bezierCurveTo(a * 128, a * 97.34375, a * 128, a * 97.34375, a * 139.5, a * 94.34375);
        e.bezierCurveTo(a * 140, a * 96.84375, a * 140, a * 96.84375, a * 140.5, a * 99.34375);
        e.closePath();
        Kt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 112.5, a * 48.34375);
        e.bezierCurveTo(a * 115.5, a * 50.84375, a * 115.5, a * 50.84375, a * 118.5, a * 53.34375);
        e.bezierCurveTo(a * 131, a * 50.84375, a * 131, a * 50.84375, a * 143.5, a * 48.34375);
        e.closePath();
        Kt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 216.5, a * 109.34375);
        e.bezierCurveTo(a * 213, a * 114.84375, a * 213, a * 114.84375, a * 209.5, a * 120.34375);
        e.bezierCurveTo(a * 212, a * 118.84375, a * 212, a * 118.84375, a * 214.5, a * 117.34375);
        e.closePath();
        Kt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86.5, a * 133.34375);
        e.bezierCurveTo(a * 89, a * 127.34375, a * 89, a * 127.34375, a * 91.5, a * 121.34375);
        e.bezierCurveTo(a * 92.5, a * 127.34375, a * 92.5, a * 127.34375, a * 93.5, a * 133.34375);
        e.closePath();
        Kt(e, c[2]);
        return d;
    }
    const ym = 0;
    function wm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 109;
        d.height = a * 110;
        Nt(e, a * 54.5, a * 55, a * 48.038209575038294);
        Kt(e, b[0], b[1], a * 8);
        if (c == 0) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 54.928558349609375, a * 43.72320556640625);
            e.bezierCurveTo(a * 66.92855834960938, a * 31.72320556640625, a * 69.92855834960938, a * 29.72320556640625, a * 74.92855834960938, a * 29.72320556640625);
            e.bezierCurveTo(a * 86.92855834960938, a * 28.72320556640625, a * 91.92855834960938, a * 42.72320556640625, a * 89.92855834960938, a * 52.72320556640625);
            e.bezierCurveTo(a * 88.92855834960938, a * 63.72320556640625, a * 73.92855834960938, a * 75.72320556640625, a * 55.928558349609375, a * 87.72320556640625);
            e.bezierCurveTo(a * 37.928558349609375, a * 78.72320556640625, a * 26.928558349609375, a * 65.72320556640625, a * 19.928558349609375, a * 54.72320556640625);
            e.bezierCurveTo(a * 13.928558349609375, a * 42.72320556640625, a * 21.928558349609375, a * 28.72320556640625, a * 35.928558349609375, a * 29.72320556640625);
            e.bezierCurveTo(a * 45.928558349609375, a * 31.72320556640625, a * 51.928558349609375, a * 40.72320556640625, a * 53.928558349609375, a * 44.72320556640625);
            e.closePath();
            Kt(e, b[2]);
        } else if (c == 1) {
            e.save();
            e.translate(a * 55, a * 39.48748779296875);
            Lt(e, a * -11.5, a * -36, a * 23, a * 72, a * 10);
            e.restore();
            Kt(e, b[2], b[3], a * 4);
            Nt(e, a * 54.5, a * 78.48748779296875, a * 22.02271554554524);
            Kt(e, b[4], b[3], a * 4);
            e.save();
            e.translate(a * 55.5, a * 57.287506103515625);
            Lt(e, a * -9, a * -16, a * 18, a * 32, a * 10);
            e.restore();
            Kt(e, b[4]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 66.5, a * 25.287506103515625);
            e.bezierCurveTo(a * 60.5, a * 25.287506103515625, a * 63.5, a * 25.287506103515625, a * 54.5, a * 25.287506103515625);
            e.closePath();
            Kt(e, undefined, b[5], a * 4);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 66.5, a * 37.287506103515625);
            e.bezierCurveTo(a * 60.5, a * 37.287506103515625, a * 60.5, a * 37.287506103515625, a * 54.5, a * 37.287506103515625);
            e.closePath();
            Kt(e, undefined, b[5], a * 4);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 66.5, a * 50.287506103515625);
            e.bezierCurveTo(a * 61, a * 50.287506103515625, a * 61, a * 50.287506103515625, a * 55.5, a * 50.287506103515625);
            e.closePath();
            Kt(e, T, b[5], a * 4);
        } else if (c == 2) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 45.928558349609375, a * 55.29463195800781);
            e.bezierCurveTo(a * 38.928558349609375, a * 67.29463195800781, a * 38.928558349609375, a * 67.29463195800781, a * 31.928558349609375, a * 79.29463195800781);
            e.bezierCurveTo(a * 15.928558349609375, a * 85.29463195800781, a * 17.928558349609375, a * 86.29463195800781, a * 17.928558349609375, a * 90.29463195800781);
            e.bezierCurveTo(a * 19.928558349609375, a * 94.29463195800781, a * 21.928558349609375, a * 94.29463195800781, a * 27.928558349609375, a * 92.29463195800781);
            e.bezierCurveTo(a * 29.928558349609375, a * 98.29463195800781, a * 30.928558349609375, a * 99.29463195800781, a * 33.928558349609375, a * 99.29463195800781);
            e.bezierCurveTo(a * 38.928558349609375, a * 97.29463195800781, a * 38.928558349609375, a * 93.29463195800781, a * 37.928558349609375, a * 86.29463195800781);
            e.bezierCurveTo(a * 45.428558349609375, a * 73.29463195800781, a * 51.928558349609375, a * 64.29463195800781, a * 52.928558349609375, a * 60.29463195800781);
            e.closePath();
            Kt(e, b[2]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 55.928558349609375, a * 8.866058349609375);
            e.bezierCurveTo(a * 35.928558349609375, a * 35.866058349609375, a * 37.928558349609375, a * 48.866058349609375, a * 46.928558349609375, a * 62.866058349609375);
            e.bezierCurveTo(a * 65.92855834960938, a * 72.86605834960938, a * 80.92855834960938, a * 55.866058349609375, a * 93.92855834960938, a * 36.866058349609375);
            e.closePath();
            Kt(e, b[3], b[4], a * 6);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 93.92855834960938, a * 36.866058349609375);
            e.bezierCurveTo(a * 82.92855834960938, a * 37.866058349609375, a * 77.92855834960938, a * 36.866058349609375, a * 67.92855834960938, a * 28.866058349609375);
            e.bezierCurveTo(a * 53.928558349609375, a * 16.866058349609375, a * 53.928558349609375, a * 14.866058349609375, a * 55.928558349609375, a * 7.866058349609375);
            e.bezierCurveTo(a * 65.92855834960938, a * 4.866058349609375, a * 71.92855834960938, a * 7.866058349609375, a * 83.92855834960938, a * 13.866058349609375);
            e.bezierCurveTo(a * 96.92855834960938, a * 21.866058349609375, a * 95.92855834960938, a * 31.866058349609375, a * 92.92855834960938, a * 36.866058349609375);
            e.closePath();
            Kt(e, b[3], b[4], a * 6);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 68.92855834960938, a * 16.866058349609375);
            e.bezierCurveTo(a * 71.92855834960938, a * 13.866058349609375, a * 76.92855834960938, a * 16.866058349609375, a * 79.92855834960938, a * 21.866058349609375);
            e.bezierCurveTo(a * 82.92855834960938, a * 24.866058349609375, a * 81.92855834960938, a * 27.866058349609375, a * 73.92855834960938, a * 24.866058349609375);
            e.bezierCurveTo(a * 67.92855834960938, a * 20.866058349609375, a * 66.92855834960938, a * 19.866058349609375, a * 67.92855834960938, a * 17.866058349609375);
            e.closePath();
            Kt(e, b[2]);
        } else if (c == 3) {
            e.scale(0.9, 0.9);
            e.translate(a * 6, 0);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 54, a * 0.421875);
            e.bezierCurveTo(a * 84, a * 45.421875, a * 89, a * 51.421875, a * 83, a * 74.421875);
            e.bezierCurveTo(a * 74, a * 95.421875, a * 46, a * 98.421875, a * 30, a * 78.421875);
            e.bezierCurveTo(a * 22, a * 59.421875, a * 27, a * 49.421875, a * 34, a * 36.421875);
            e.closePath();
            Kt(e, b[2], b[3], a * 6);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 74, a * 52.421875);
            e.bezierCurveTo(a * 77, a * 73.421875, a * 69, a * 81.421875, a * 58, a * 81.421875);
            e.bezierCurveTo(a * 66, a * 71.421875, a * 70, a * 66.421875, a * 74, a * 52.421875);
            e.closePath();
            Kt(e, b[3]);
        }
        return d;
    }
    function Pm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 247;
        d.height = a * 247;
        e.translate(0, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 62);
        e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
        e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 164, a * 171);
        e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
        e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 132, a * 95);
        e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
        e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
        e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
        e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
        e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
        e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
        e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
        e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
        e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
        e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
        e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
        e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
        e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
        e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
        e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
        e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
        e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
        e.closePath();
        Kt(e, c[0]);
        e.translate(0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 62);
        e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
        e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
        e.closePath();
        Kt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 164, a * 171);
        e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
        e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
        e.closePath();
        Kt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 132, a * 95);
        e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
        e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
        e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
        e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
        e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
        e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
        e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
        e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
        e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
        e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
        e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
        e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
        e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
        e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
        e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
        e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
        e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
        e.closePath();
        Kt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 137);
        e.bezierCurveTo(a * 145, a * 125, a * 138, a * 108, a * 123, a * 104);
        e.bezierCurveTo(a * 81, a * 101, a * 88, a * 77, a * 98, a * 65);
        e.bezierCurveTo(a * 117, a * 38, a * 138, a * 39, a * 165, a * 52);
        e.bezierCurveTo(a * 197, a * 72, a * 207, a * 111, a * 197, a * 140);
        e.bezierCurveTo(a * 182, a * 180, a * 161, a * 197, a * 112, a * 194);
        e.bezierCurveTo(a * 58, a * 194, a * 37, a * 170, a * 34, a * 142);
        e.bezierCurveTo(a * 29, a * 102, a * 40, a * 63, a * 51, a * 45);
        e.bezierCurveTo(a * 43, a * 78, a * 41, a * 103, a * 43, a * 122);
        e.bezierCurveTo(a * 51, a * 158, a * 63, a * 174, a * 95, a * 179);
        e.bezierCurveTo(a * 129, a * 186, a * 169, a * 172, a * 177, a * 144);
        e.bezierCurveTo(a * 197, a * 105, a * 172, a * 76, a * 160, a * 71);
        e.bezierCurveTo(a * 125, a * 52, a * 111, a * 73, a * 111, a * 81);
        e.bezierCurveTo(a * 106, a * 93, a * 140, a * 92, a * 147, a * 107);
        e.bezierCurveTo(a * 153, a * 128, a * 140, a * 135, a * 137, a * 139);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 132, a * 95);
        e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
        e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
        e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
        e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
        e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
        e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
        e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
        e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
        e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
        e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
        e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
        e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
        e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
        e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
        e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
        e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
        e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
        e.closePath();
        Kt(e, undefined, c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 63);
        e.bezierCurveTo(a * 91, a * 64, a * 96, a * 62, a * 98, a * 53);
        e.bezierCurveTo(a * 91, a * 45, a * 85, a * 42, a * 78, a * 41);
        e.bezierCurveTo(a * 81, a * 51, a * 82, a * 57, a * 82, a * 63);
        e.closePath();
        Kt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 148, a * 40);
        e.bezierCurveTo(a * 140, a * 52, a * 131, a * 51, a * 123, a * 43);
        e.bezierCurveTo(a * 123, a * 25, a * 129, a * 17, a * 134, a * 12);
        e.bezierCurveTo(a * 138, a * 35, a * 142, a * 31, a * 148, a * 40);
        e.closePath();
        Kt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 189, a * 43);
        e.bezierCurveTo(a * 191, a * 54, a * 196, a * 58, a * 205, a * 59);
        e.bezierCurveTo(a * 211, a * 42, a * 214, a * 37, a * 216, a * 31);
        e.bezierCurveTo(a * 202, a * 34, a * 195, a * 39, a * 190, a * 43);
        e.closePath();
        Kt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 216, a * 98);
        e.bezierCurveTo(a * 219, a * 105, a * 225, a * 107, a * 230, a * 109);
        e.bezierCurveTo(a * 227, a * 113, a * 221, a * 115, a * 215, a * 115);
        e.bezierCurveTo(a * 208, a * 109, a * 211, a * 101, a * 216, a * 98);
        e.closePath();
        Kt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 180, a * 85);
        e.bezierCurveTo(a * 193, a * 86, a * 196, a * 98, a * 191, a * 108);
        e.bezierCurveTo(a * 179, a * 112, a * 167, a * 113, a * 155, a * 111);
        e.bezierCurveTo(a * 169, a * 100, a * 176, a * 96, a * 180, a * 85);
        e.closePath();
        Kt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96, a * 114);
        e.bezierCurveTo(a * 102, a * 109, a * 112, a * 110, a * 114, a * 118);
        e.bezierCurveTo(a * 111, a * 134, a * 102, a * 143, a * 95, a * 147);
        e.bezierCurveTo(a * 98, a * 123, a * 97, a * 119, a * 96, a * 115);
        e.closePath();
        Kt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 92);
        e.bezierCurveTo(a * 86, a * 95, a * 89, a * 102, a * 83, a * 111);
        e.bezierCurveTo(a * 70, a * 110, a * 61, a * 107, a * 54, a * 100);
        e.bezierCurveTo(a * 70, a * 97, a * 70, a * 95, a * 78, a * 92);
        e.closePath();
        Kt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 130);
        e.bezierCurveTo(a * 37, a * 141, a * 41, a * 143, a * 48, a * 144);
        e.bezierCurveTo(a * 54, a * 134, a * 55, a * 131, a * 56, a * 123);
        e.bezierCurveTo(a * 47, a * 129, a * 43, a * 129, a * 39, a * 129);
        e.closePath();
        Kt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 113, a * 189);
        e.bezierCurveTo(a * 119, a * 201, a * 127, a * 198, a * 134, a * 192);
        e.bezierCurveTo(a * 128, a * 175, a * 128, a * 173, a * 128, a * 165);
        e.bezierCurveTo(a * 117, a * 176, a * 116, a * 182, a * 113, a * 187);
        e.closePath();
        Kt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 74, a * 154);
        e.bezierCurveTo(a * 76, a * 163, a * 76, a * 170, a * 75, a * 177);
        e.bezierCurveTo(a * 68, a * 179, a * 66, a * 176, a * 63, a * 171);
        e.bezierCurveTo(a * 69, a * 164, a * 72, a * 159, a * 74, a * 154);
        e.closePath();
        Kt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 206, a * 152);
        e.bezierCurveTo(a * 198, a * 158, a * 198, a * 166, a * 201, a * 171);
        e.bezierCurveTo(a * 209, a * 170, a * 221, a * 170, a * 226, a * 172);
        e.bezierCurveTo(a * 219, a * 159, a * 210, a * 155, a * 207, a * 153);
        e.closePath();
        Kt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 181, a * 184);
        e.bezierCurveTo(a * 170, a * 184, a * 167, a * 187, a * 163, a * 195);
        e.bezierCurveTo(a * 171, a * 207, a * 183, a * 214, a * 191, a * 217);
        e.bezierCurveTo(a * 183, a * 204, a * 184, a * 196, a * 181, a * 184);
        e.closePath();
        Kt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 66, a * 199);
        e.bezierCurveTo(a * 73, a * 197, a * 78, a * 199, a * 79, a * 206);
        e.bezierCurveTo(a * 71, a * 216, a * 67, a * 221, a * 57, a * 223);
        e.closePath();
        Kt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 182, a * 143);
        e.bezierCurveTo(a * 183, a * 146, a * 183, a * 149, a * 179, a * 152);
        e.bezierCurveTo(a * 174, a * 146, a * 174, a * 146, a * 169, a * 140);
        e.closePath();
        Kt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 159);
        e.bezierCurveTo(a * 45, a * 160, a * 48, a * 164, a * 45, a * 175);
        e.bezierCurveTo(a * 28, a * 183, a * 25, a * 184, a * 19, a * 184);
        e.bezierCurveTo(a * 30, a * 170, a * 29, a * 164, a * 31, a * 160);
        e.closePath();
        Kt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 214);
        e.bezierCurveTo(a * 106, a * 212, a * 104, a * 213, a * 102, a * 218);
        e.bezierCurveTo(a * 104, a * 220, a * 107, a * 222, a * 110, a * 224);
        e.bezierCurveTo(a * 110.5, a * 219, a * 110.5, a * 219, a * 111, a * 214);
        e.closePath();
        Kt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 40, a * 52);
        e.bezierCurveTo(a * 41, a * 57, a * 40, a * 61, a * 34, a * 60);
        e.bezierCurveTo(a * 31.5, a * 55, a * 31.5, a * 55, a * 29, a * 50);
        e.bezierCurveTo(a * 34, a * 50.5, a * 34, a * 50.5, a * 39, a * 51);
        e.closePath();
        Kt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 81);
        e.bezierCurveTo(a * 37, a * 84, a * 38, a * 90, a * 34, a * 99);
        e.bezierCurveTo(a * 23, a * 97, a * 19, a * 96, a * 16, a * 93);
        e.bezierCurveTo(a * 24, a * 88, a * 28, a * 85, a * 30, a * 81);
        e.closePath();
        Kt(e, c[4], c[5], a * 5);
        return d;
    }
    function km(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 440;
        d.height = a * 388;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        Nt(e, a * 220, a * 201, a * 170.41713528867922);
        Kt(e, c[0], c[0], a * 6);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        Nt(e, a * 220, a * 201, a * 170.41713528867922);
        Kt(e, c[1], c[2], a * 6);
        Nt(e, a * 220, a * 201, a * 130);
        Kt(e, c[11], c[2], a * 6);
        Nt(e, a * 222, a * 199, a * 120.74767078498864);
        Kt(e, undefined, c[3], a * 40);
        Nt(e, a * 220, a * 200, a * 95.44108130150245);
        Kt(e, undefined, c[2], a * 15);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        Nt(e, a * 63, a * 136, a * 49.193495504995376);
        Kt(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        Nt(e, a * 63, a * 136, a * 49.193495504995376);
        Kt(e, c[8], c[2], a * 4);
        Nt(e, a * 63, a * 137, a * 25.632011235952593);
        Kt(e, c[7], c[2], a * 4);
        return d;
    }
    function Am(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 168;
        d.height = a * 100;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, a * 5);
        e.save();
        e.translate(a * 24.5, a * 44.30000305175781);
        Lt(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
        e.restore();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 37.80000305175781);
        e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
        e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
        e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
        e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
        e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
        e.closePath();
        Kt(e, c[0]);
        Nt(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -10, a * -5);
        e.save();
        e.translate(a * 24.5, a * 44.30000305175781);
        Lt(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
        e.restore();
        Kt(e, T, c[3], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 37.80000305175781);
        e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
        e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
        e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
        e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
        e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
        e.closePath();
        Kt(e, undefined, c[3], a * 6);
        Nt(e, a * 78, a * 44.80000305175781, a * 42.44616584663204);
        Kt(e, Bs, c[3], a * 6);
        e.save();
        e.translate(a * 24.5, a * 44.30000305175781);
        Lt(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
        e.restore();
        Kt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 37.80000305175781);
        e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
        e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
        e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
        e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
        e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
        e.closePath();
        Kt(e, c[1]);
        Nt(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
        Kt(e, c[2], c[1], a * 4);
        Nt(e, a * 78, a * 44.80000305175781, a * 29.68164415931166);
        Kt(e, c[3], c[1], a * 4);
        Nt(e, a * 78, a * 44, a * 20);
        Kt(e, c[4]);
        return d;
    }
    function xm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 465;
        d.height = a * 405;
        e.globalAlpha = 1;
        e.translate(a * 6, a * 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39.000030517578125, a * 162.03977966308594);
        e.bezierCurveTo(a * 125.00003051757812, a * 84.03977966308594, a * 108.50003051757812, a * 115.03977966308594, a * 178.00003051757812, a * 68.03977966308594);
        e.bezierCurveTo(a * 299.0000305175781, a * 146.53977966308594, a * 299.0000305175781, a * 146.53977966308594, a * 420.0000305175781, a * 225.03977966308594);
        e.bezierCurveTo(a * 400.0000305175781, a * 288.53977966308594, a * 400.0000305175781, a * 288.53977966308594, a * 380.0000305175781, a * 352.03977966308594);
        e.bezierCurveTo(a * 216.50003051757812, a * 345.53977966308594, a * 216.50003051757812, a * 345.53977966308594, a * 53.000030517578125, a * 339.03977966308594);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
        e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
        e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
        e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
        e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
        e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
        e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
        e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
        e.closePath();
        Kt(e, c[0], c[1], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17.000030517578125, a * 149.94886779785156);
        e.bezierCurveTo(a * 76.00003051757812, a * 67.94886779785156, a * 177.00003051757812, a * 40.94886779785156, a * 232.00003051757812, a * 45.94886779785156);
        e.bezierCurveTo(a * 316.0000305175781, a * 46.94886779785156, a * 359.0000305175781, a * 74.94886779785156, a * 428.0000305175781, a * 145.94886779785156);
        e.bezierCurveTo(a * 414.0000305175781, a * 73.94886779785156, a * 386.0000305175781, a * 68.94886779785156, a * 359.0000305175781, a * 43.94886779785156);
        e.bezierCurveTo(a * 295.0000305175781, a * 5.9488677978515625, a * 239.00003051757812, a * 10.948867797851562, a * 207.00003051757812, a * 10.948867797851562);
        e.bezierCurveTo(a * 121.00003051757812, a * 20.948867797851562, a * 104.00003051757812, a * 34.94886779785156, a * 45.000030517578125, a * 84.94886779785156);
        e.bezierCurveTo(a * 14.000030517578125, a * 128.94886779785156, a * 18.000030517578125, a * 142.94886779785156, a * 16.000030517578125, a * 151.94886779785156);
        e.closePath();
        Kt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
        e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
        e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
        e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
        e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
        e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
        e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
        e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
        e.closePath();
        Kt(e, Bh, c[1], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60.000030517578125, a * 288.03977966308594);
        e.bezierCurveTo(a * 183.00003051757812, a * 320.03977966308594, a * 342.0000305175781, a * 306.03977966308594, a * 399.0000305175781, a * 286.03977966308594);
        e.bezierCurveTo(a * 420.0000305175781, a * 345.03977966308594, a * 410.0000305175781, a * 335.03977966308594, a * 415.0000305175781, a * 362.03977966308594);
        e.bezierCurveTo(a * 351.0000305175781, a * 384.03977966308594, a * 299.0000305175781, a * 389.03977966308594, a * 215.00003051757812, a * 391.03977966308594);
        e.bezierCurveTo(a * 128.00003051757812, a * 388.03977966308594, a * 69.00003051757812, a * 373.03977966308594, a * 39.000030517578125, a * 359.03977966308594);
        e.closePath();
        Kt(e, c[0], c[1], a * 13);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 47.000030517578125, a * 327.03977966308594);
        e.bezierCurveTo(a * 203.00003051757812, a * 377.03977966308594, a * 331.0000305175781, a * 349.03977966308594, a * 410.0000305175781, a * 330.03977966308594);
        e.closePath();
        Kt(e, c[0], c[1], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9.000030517578125, a * 339.1306915283203);
        e.bezierCurveTo(a * 2.000030517578125, a * 280.1306915283203, a * 30.000030517578125, a * 219.1306915283203, a * 85.00003051757812, a * 167.1306915283203);
        e.bezierCurveTo(a * 174.00003051757812, a * 82.13069152832031, a * 241.00003051757812, a * 101.13069152832031, a * 284.0000305175781, a * 115.13069152832031);
        e.bezierCurveTo(a * 333.0000305175781, a * 134.1306915283203, a * 376.0000305175781, a * 177.1306915283203, a * 410.0000305175781, a * 247.1306915283203);
        e.bezierCurveTo(a * 439.0000305175781, a * 300.1306915283203, a * 442.0000305175781, a * 346.1306915283203, a * 430.0000305175781, a * 363.1306915283203);
        e.bezierCurveTo(a * 418.0000305175781, a * 366.1306915283203, a * 395.0000305175781, a * 295.1306915283203, a * 355.0000305175781, a * 223.1306915283203);
        e.bezierCurveTo(a * 299.0000305175781, a * 156.1306915283203, a * 262.0000305175781, a * 155.1306915283203, a * 215.00003051757812, a * 159.1306915283203);
        e.bezierCurveTo(a * 133.00003051757812, a * 171.1306915283203, a * 120.00003051757812, a * 193.1306915283203, a * 96.00003051757812, a * 221.1306915283203);
        e.bezierCurveTo(a * 49.000030517578125, a * 262.1306915283203, a * 47.000030517578125, a * 306.1306915283203, a * 38.000030517578125, a * 336.1306915283203);
        e.bezierCurveTo(a * 30.000030517578125, a * 349.1306915283203, a * 30.000030517578125, a * 349.1306915283203, a * 22.000030517578125, a * 362.1306915283203);
        e.closePath();
        Kt(e, c[2], c[1], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 228.00003051757812, a * 128.03977966308594);
        e.bezierCurveTo(a * 315.0000305175781, a * 131.03977966308594, a * 349.0000305175781, a * 178.03977966308594, a * 386.0000305175781, a * 234.03977966308594);
        e.bezierCurveTo(a * 444.0000305175781, a * 329.03977966308594, a * 446.0000305175781, a * 354.03977966308594, a * 427.0000305175781, a * 373.03977966308594);
        e.bezierCurveTo(a * 389.0000305175781, a * 389.03977966308594, a * 399.0000305175781, a * 329.03977966308594, a * 361.0000305175781, a * 277.03977966308594);
        e.bezierCurveTo(a * 306.0000305175781, a * 191.03977966308594, a * 266.0000305175781, a * 183.03977966308594, a * 220.00003051757812, a * 181.03977966308594);
        e.bezierCurveTo(a * 138.00003051757812, a * 184.03977966308594, a * 123.00003051757812, a * 212.03977966308594, a * 89.00003051757812, a * 271.03977966308594);
        e.bezierCurveTo(a * 52.000030517578125, a * 349.03977966308594, a * 68.00003051757812, a * 364.03977966308594, a * 33.000030517578125, a * 369.03977966308594);
        e.bezierCurveTo(a * 6.000030517578125, a * 366.03977966308594, a * 5.000030517578125, a * 341.03977966308594, a * 26.000030517578125, a * 288.03977966308594);
        e.bezierCurveTo(a * 60.000030517578125, a * 207.03977966308594, a * 100.00003051757812, a * 180.03977966308594, a * 113.00003051757812, a * 170.03977966308594);
        e.bezierCurveTo(a * 159.00003051757812, a * 132.03977966308594, a * 196.00003051757812, a * 133.03977966308594, a * 226.00003051757812, a * 129.03977966308594);
        e.closePath();
        Kt(e, c[0], c[1], a * 20);
        return d;
    }
    function Jm(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 198;
        f.height = b * 147;
        g.globalAlpha = c ? 0.5 : 1;
        g.translate(0, b * 6);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 44, b * 76);
        g.bezierCurveTo(b * 50, b * 82, b * 50, b * 82, b * 56, b * 88);
        g.bezierCurveTo(b * 59, b * 82, b * 59, b * 82, b * 62, b * 76);
        g.bezierCurveTo(b * 59, b * 71, b * 59, b * 71, b * 56, b * 66);
        g.bezierCurveTo(b * 59, b * 69, b * 59, b * 69, b * 62, b * 72);
        g.bezierCurveTo(b * 80, b * 48, b * 102, b * 50, b * 120, b * 62);
        g.bezierCurveTo(b * 127, b * 58, b * 127, b * 58, b * 134, b * 54);
        g.bezierCurveTo(b * 129, b * 60, b * 129, b * 60, b * 124, b * 66);
        g.bezierCurveTo(b * 129, b * 73, b * 129, b * 73, b * 134, b * 80);
        g.bezierCurveTo(b * 140, b * 74, b * 140, b * 74, b * 146, b * 68);
        g.bezierCurveTo(b * 142, b * 76, b * 142, b * 76, b * 138, b * 84);
        g.bezierCurveTo(b * 144, b * 90, b * 142, b * 90, b * 144, b * 90);
        g.bezierCurveTo(b * 136, b * 97, b * 136, b * 97, b * 128, b * 104);
        g.bezierCurveTo(b * 154, b * 110, b * 164, b * 90, b * 160, b * 80);
        g.bezierCurveTo(b * 138, b * 22, b * 148, b * 51, b * 136, b * 22);
        g.bezierCurveTo(b * 97, b * 24, b * 97, b * 24, b * 58, b * 26);
        g.bezierCurveTo(b * 47, b * 54, b * 36, b * 80, b * 36, b * 82);
        g.bezierCurveTo(b * 40, b * 108, b * 54, b * 104, b * 62, b * 104);
        g.bezierCurveTo(b * 46, b * 92, b * 54, b * 97, b * 46, b * 90);
        g.closePath();
        Kt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 36, b * 80);
        g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
        g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
        g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
        g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
        g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
        g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
        g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
        g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
        g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
        g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
        g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
        g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
        g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
        g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
        g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
        g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
        g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
        g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
        g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
        g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
        g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
        g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
        g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
        g.closePath();
        Kt(g, d[0]);
        g.globalAlpha = 1;
        g.translate(0, b * -6);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 36, b * 80);
        g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
        g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
        g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
        g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
        g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
        g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
        g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
        g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
        g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
        g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
        g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
        g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
        g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
        g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
        g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
        g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
        g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
        g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
        g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
        g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
        g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
        g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
        g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
        g.closePath();
        Kt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 49, b * 98);
        g.bezierCurveTo(b * 96.5, b * 98, b * 96.5, b * 98, b * 144, b * 98);
        g.bezierCurveTo(b * 136.5, b * 102, b * 136.5, b * 102, b * 129, b * 106);
        g.bezierCurveTo(b * 103, b * 105.5, b * 103, b * 105.5, b * 77, b * 105);
        g.bezierCurveTo(b * 65, b * 105, b * 65, b * 105, b * 53, b * 105);
        g.closePath();
        Kt(g, d[1]);
        g.globalAlpha = 0.5;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 54, b * 98);
        g.bezierCurveTo(b * 97, b * 98, b * 97, b * 98, b * 140, b * 98);
        g.bezierCurveTo(b * 134, b * 101, b * 134, b * 101, b * 128, b * 104);
        g.bezierCurveTo(b * 92, b * 104, b * 92, b * 104, b * 56, b * 104);
        g.closePath();
        Kt(g, d[0]);
        g.globalAlpha = 1;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 118, b * 47);
        g.bezierCurveTo(b * 124.5, b * 43.5, b * 124.5, b * 43.5, b * 131, b * 40);
        g.bezierCurveTo(b * 128, b * 46, b * 128, b * 46, b * 125, b * 52);
        g.bezierCurveTo(b * 131, b * 57, b * 135, b * 64, b * 139, b * 73);
        g.bezierCurveTo(b * 142.5, b * 69.5, b * 142.5, b * 69.5, b * 146, b * 66);
        g.bezierCurveTo(b * 143.5, b * 72.5, b * 143.5, b * 72.5, b * 141, b * 79);
        g.bezierCurveTo(b * 142, b * 91, b * 141, b * 94, b * 132, b * 98);
        g.bezierCurveTo(b * 117, b * 102, b * 126, b * 108, b * 142, b * 102);
        g.bezierCurveTo(b * 159, b * 98, b * 164, b * 80, b * 162, b * 47);
        g.bezierCurveTo(b * 160, b * 19, b * 150, b * 6, b * 117, b * 4);
        g.bezierCurveTo(b * 44, b * 0, b * 35, b * 20, b * 33, b * 37);
        g.bezierCurveTo(b * 29, b * 69, b * 33, b * 88, b * 44, b * 96);
        g.bezierCurveTo(b * 64, b * 107, b * 70, b * 102, b * 54, b * 93);
        g.bezierCurveTo(b * 49, b * 88, b * 50, b * 82, b * 53, b * 77);
        g.bezierCurveTo(b * 51.5, b * 71, b * 51.5, b * 71, b * 50, b * 65);
        g.bezierCurveTo(b * 53, b * 68.5, b * 53, b * 68.5, b * 56, b * 72);
        g.bezierCurveTo(b * 59, b * 67.5, b * 59, b * 67.5, b * 62, b * 63);
        g.bezierCurveTo(b * 60.5, b * 59.5, b * 60.5, b * 59.5, b * 59, b * 56);
        g.bezierCurveTo(b * 62, b * 57, b * 62, b * 57, b * 65, b * 58);
        g.bezierCurveTo(b * 78, b * 35, b * 103, b * 36, b * 117, b * 47);
        g.closePath();
        Kt(g, d[1], d[2], b * 6);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 62, b * 21);
        g.bezierCurveTo(b * 63, b * 34, b * 64, b * 37, b * 66, b * 40);
        g.bezierCurveTo(b * 54, b * 49, b * 53, b * 51, b * 48, b * 58);
        g.bezierCurveTo(b * 44, b * 51, b * 42, b * 43, b * 40, b * 36);
        g.bezierCurveTo(b * 47, b * 28, b * 52, b * 25, b * 61, b * 21);
        g.closePath();
        Kt(g, d[4]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 60, b * 29);
        g.bezierCurveTo(b * 62, b * 25, b * 65, b * 24, b * 70, b * 23);
        Kt(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 61, b * 37);
        g.bezierCurveTo(b * 63, b * 32, b * 66, b * 32, b * 71, b * 32);
        Kt(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 52, b * 31);
        g.bezierCurveTo(b * 50, b * 26, b * 50, b * 25, b * 51, b * 23);
        Kt(g, Yl, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 46, b * 35);
        g.bezierCurveTo(b * 44, b * 31, b * 43, b * 29, b * 45, b * 26);
        Kt(g, Bh, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 58, b * 44);
        g.bezierCurveTo(b * 57, b * 48, b * 57, b * 50, b * 60, b * 52);
        Kt(g, Zq, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 53, b * 48);
        g.bezierCurveTo(b * 52, b * 52, b * 52, b * 54, b * 55, b * 57);
        Kt(g, Mq, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 46, b * 41);
        g.bezierCurveTo(b * 41, b * 42, b * 39, b * 45, b * 38, b * 48);
        Kt(g, Uj, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 48, b * 48);
        g.bezierCurveTo(b * 42, b * 51, b * 42, b * 53, b * 40, b * 55);
        Kt(g, Xk, d[3], b * 4);
        if (e == 0) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 99, b * 101);
            g.bezierCurveTo(b * 118.6666259765625, b * 104.33331298828125, b * 124.6666259765625, b * 116.33331298828125, b * 112.6666259765625, b * 114.33331298828125);
            g.bezierCurveTo(b * 104.6666259765625, b * 112.33331298828125, b * 100.6666259765625, b * 105.33331298828125, b * 99.6666259765625, b * 101.33331298828125);
            Kt(g, Og, d[5], b * 6);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 97.6666259765625, b * 101.33331298828125);
            g.bezierCurveTo(b * 81.6666259765625, b * 106.33331298828125, b * 79.6666259765625, b * 114.33331298828125, b * 89.6666259765625, b * 114.33331298828125);
            g.bezierCurveTo(b * 95.6666259765625, b * 111.33331298828125, b * 95.6666259765625, b * 109.33331298828125, b * 98.6666259765625, b * 102.33331298828125);
            Kt(g, undefined, d[5], b * 6);
        } else {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 103, b * 100.39999389648438);
            g.bezierCurveTo(b * 120, b * 106.39999389648438, b * 118, b * 107.39999389648438, b * 120, b * 111.39999389648438);
            Kt(g, Og, d[5], b * 6);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 103, b * 100.39999389648438);
            g.bezierCurveTo(b * 90, b * 103.39999389648438, b * 89, b * 106.39999389648438, b * 87, b * 112.39999389648438);
            Kt(g, undefined, d[5], b * 6);
            Nt(g, b * 86, b * 114.39999389648438, b * 4.5);
            Kt(g, d[1], d[5], b * 6);
            Nt(g, b * 121, b * 114.39999389648438, b * 4.5);
            Kt(g, d[1], d[5], b * 6);
        }
        return f;
    }
    function Mm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 160;
        d.height = a * 161;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 80.5, a * 78);
        Lt(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
        e.restore();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 80.5, a * 78);
        Lt(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
        e.restore();
        Kt(e, c[1], c[2], a * 6);
        e.save();
        e.translate(a * 80, a * 78.5);
        Lt(e, a * -17, a * -72.5, a * 34, a * 145, a * 10);
        e.restore();
        Kt(e, c[3], c[4], a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 80, a * 79.5);
        Lt(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
        e.restore();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 80, a * 79.5);
        Lt(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
        e.restore();
        Kt(e, c[3], c[4], a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 71);
        e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
        e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
        e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84, a * 78);
        e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
        e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
        e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 73);
        e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
        e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
        e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 83);
        e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
        e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
        e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 71);
        e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
        e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
        e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
        e.closePath();
        Kt(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84, a * 78);
        e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
        e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
        e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
        e.closePath();
        Kt(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 73);
        e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
        e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
        e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
        e.closePath();
        Kt(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 83);
        e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
        e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
        e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
        e.closePath();
        Kt(e, c[3], c[4], a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 78.5, a * 78);
        Lt(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
        e.restore();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 78.5, a * 78);
        Lt(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
        e.restore();
        Kt(e, c[3], c[4], a * 6);
        return d;
    }
    function Bm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 170;
        e.translate(0, a * -170);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 159.5, a * 322.0625);
        e.bezierCurveTo(a * 240.5, a * 293.0625, a * 240.5, a * 293.0625, a * 321.5, a * 264.0625);
        e.bezierCurveTo(a * 276.5, a * 230.0625, a * 276.5, a * 230.0625, a * 231.5, a * 196.0625);
        e.bezierCurveTo(a * 158.5, a * 221.5625, a * 158.5, a * 221.5625, a * 85.5, a * 247.0625);
        e.closePath();
        Kt(e, c[0], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212.5, a * 270.0625);
        e.bezierCurveTo(a * 235, a * 261.5625, a * 235, a * 261.5625, a * 257.5, a * 253.0625);
        e.closePath();
        Kt(e, undefined, c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 193.5, a * 226.0625);
        e.bezierCurveTo(a * 204.5, a * 242.0625, a * 242.5, a * 237.0625, a * 251.5, a * 225.0625);
        e.bezierCurveTo(a * 246.5, a * 195.0625, a * 205.5, a * 190.0625, a * 193.5, a * 227.0625);
        e.closePath();
        Kt(e, c[2], c[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 164.5, a * 245.0625);
        e.bezierCurveTo(a * 182.5, a * 264.0625, a * 252.5, a * 258.0625, a * 276.5, a * 244.0625);
        e.bezierCurveTo(a * 265.5, a * 226.0625, a * 244.5, a * 231.0625, a * 229.5, a * 230.0625);
        e.bezierCurveTo(a * 205.5, a * 227.0625, a * 175.5, a * 202.0625, a * 162.5, a * 244.0625);
        e.closePath();
        Kt(e, c[2], c[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115.5, a * 260.0625);
        e.bezierCurveTo(a * 134.5, a * 279.0625, a * 170.5, a * 275.0625, a * 191.5, a * 257.0625);
        e.bezierCurveTo(a * 174.5, a * 208.0625, a * 142.5, a * 197.0625, a * 116.5, a * 259.0625);
        e.closePath();
        Kt(e, c[2], c[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 152.5, a * 278.0625);
        e.bezierCurveTo(a * 165.5, a * 294.0625, a * 200.5, a * 287.0625, a * 216.5, a * 278.0625);
        e.bezierCurveTo(a * 206.5, a * 247.0625, a * 173.5, a * 233.0625, a * 153.5, a * 276.0625);
        e.closePath();
        Kt(e, c[2], c[3], a * 12);
        return d;
    }
    function Dm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 372;
        d.height = a * 358;
        e.translate(a * 0, a * 10);
        e.globalAlpha = b ? 0.2 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
        e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
        e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
        e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
        e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
        e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
        e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
        e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
        e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
        e.closePath();
        Kt(e, c[0], c[0], a * 10);
        e.translate(a * 0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107.00003051757812, a * 54.13069152832031);
        e.bezierCurveTo(a * 106.50003051757812, a * 38.63069152832031, a * 106.50003051757812, a * 38.63069152832031, a * 106.00003051757812, a * 23.130691528320312);
        e.bezierCurveTo(a * 121.50003051757812, a * 38.13069152832031, a * 121.50003051757812, a * 38.13069152832031, a * 137.00003051757812, a * 53.13069152832031);
        e.closePath();
        Kt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 233.00003051757812, a * 53.6761474609375);
        e.bezierCurveTo(a * 247.00003051757812, a * 37.1761474609375, a * 247.00003051757812, a * 37.1761474609375, a * 261.0000305175781, a * 20.6761474609375);
        e.bezierCurveTo(a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 51.6761474609375);
        e.closePath();
        Kt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 293.0000305175781, a * 54.403411865234375);
        e.bezierCurveTo(a * 300.0000305175781, a * 49.903411865234375, a * 300.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 45.403411865234375);
        e.bezierCurveTo(a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 54.403411865234375);
        e.closePath();
        Kt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 77.00003051757812, a * 54.403411865234375);
        e.bezierCurveTo(a * 70.00003051757812, a * 50.403411865234375, a * 70.00003051757812, a * 50.403411865234375, a * 63.000030517578125, a * 46.403411865234375);
        e.bezierCurveTo(a * 62.500030517578125, a * 50.903411865234375, a * 62.500030517578125, a * 50.903411865234375, a * 62.000030517578125, a * 55.403411865234375);
        e.closePath();
        Kt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58.000030517578125, a * 122.3125);
        e.bezierCurveTo(a * 59.500030517578125, a * 97.3125, a * 59.500030517578125, a * 97.3125, a * 61.000030517578125, a * 72.3125);
        e.bezierCurveTo(a * 91.00003051757812, a * 89.3125, a * 91.00003051757812, a * 89.3125, a * 121.00003051757812, a * 106.3125);
        e.closePath();
        Kt(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 310.0000305175781, a * 127.3125);
        e.bezierCurveTo(a * 308.0000305175781, a * 98.3125, a * 308.0000305175781, a * 98.3125, a * 306.0000305175781, a * 69.3125);
        e.bezierCurveTo(a * 274.5000305175781, a * 88.8125, a * 274.5000305175781, a * 88.8125, a * 243.00003051757812, a * 108.3125);
        e.closePath();
        Kt(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226.00003051757812, a * 87.85795593261719);
        e.bezierCurveTo(a * 243.50003051757812, a * 66.85795593261719, a * 243.50003051757812, a * 66.85795593261719, a * 261.0000305175781, a * 45.85795593261719);
        e.bezierCurveTo(a * 265.0000305175781, a * 83.85795593261719, a * 265.0000305175781, a * 83.85795593261719, a * 269.0000305175781, a * 121.85795593261719);
        e.bezierCurveTo(a * 235.00003051757812, a * 122.85795593261719, a * 233.00003051757812, a * 107.85795593261719, a * 228.00003051757812, a * 90.85795593261719);
        e.closePath();
        Kt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.00003051757812, a * 128.8579559326172);
        e.bezierCurveTo(a * 104.50003051757812, a * 87.85795593261719, a * 104.50003051757812, a * 87.85795593261719, a * 104.00003051757812, a * 46.85795593261719);
        e.bezierCurveTo(a * 126.50003051757812, a * 69.35795593261719, a * 126.50003051757812, a * 69.35795593261719, a * 149.00003051757812, a * 91.85795593261719);
        e.bezierCurveTo(a * 130.00003051757812, a * 123.85795593261719, a * 123.00003051757812, a * 132.8579559326172, a * 107.00003051757812, a * 130.8579559326172);
        e.closePath();
        Kt(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59.000030517578125, a * 121.85795593261719);
        e.bezierCurveTo(a * 59.500030517578125, a * 99.35795593261719, a * 59.500030517578125, a * 99.35795593261719, a * 60.000030517578125, a * 76.85795593261719);
        e.bezierCurveTo(a * 84.00003051757812, a * 92.35795593261719, a * 84.00003051757812, a * 92.35795593261719, a * 108.00003051757812, a * 107.85795593261719);
        e.bezierCurveTo(a * 106.00003051757812, a * 148.8579559326172, a * 86.00003051757812, a * 148.8579559326172, a * 62.000030517578125, a * 123.85795593261719);
        e.closePath();
        Kt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.00003051757812, a * 132.8579559326172);
        e.bezierCurveTo(a * 104.50003051757812, a * 93.35795593261719, a * 104.50003051757812, a * 93.35795593261719, a * 104.00003051757812, a * 53.85795593261719);
        e.bezierCurveTo(a * 126.50003051757812, a * 75.85795593261719, a * 126.50003051757812, a * 75.85795593261719, a * 149.00003051757812, a * 97.85795593261719);
        e.closePath();
        Kt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 311.0000305175781, a * 126.85795593261719);
        e.bezierCurveTo(a * 309.0000305175781, a * 101.35795593261719, a * 309.0000305175781, a * 101.35795593261719, a * 307.0000305175781, a * 75.85795593261719);
        e.bezierCurveTo(a * 271.0000305175781, a * 96.85795593261719, a * 271.0000305175781, a * 96.85795593261719, a * 235.00003051757812, a * 117.85795593261719);
        e.closePath();
        Kt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 228.00003051757812, a * 96.85795593261719);
        e.bezierCurveTo(a * 244.50003051757812, a * 74.85795593261719, a * 244.50003051757812, a * 74.85795593261719, a * 261.0000305175781, a * 52.85795593261719);
        e.bezierCurveTo(a * 265.5000305175781, a * 89.85795593261719, a * 265.5000305175781, a * 89.85795593261719, a * 270.0000305175781, a * 126.85795593261719);
        e.closePath();
        Kt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 12.000030517578125, a * 86.13069152832031);
        e.bezierCurveTo(a * 36.000030517578125, a * 113.13069152832031, a * 84.00003051757812, a * 111.13069152832031, a * 116.00003051757812, a * 113.13069152832031);
        e.bezierCurveTo(a * 164.00003051757812, a * 23.130691528320312, a * 172.00003051757812, a * 18.130691528320312, a * 181.00003051757812, a * 9.130691528320312);
        e.bezierCurveTo(a * 199.00003051757812, a * 29.130691528320312, a * 221.00003051757812, a * 78.13069152832031, a * 247.00003051757812, a * 112.13069152832031);
        e.bezierCurveTo(a * 301.0000305175781, a * 122.13069152832031, a * 338.0000305175781, a * 111.13069152832031, a * 359.0000305175781, a * 94.13069152832031);
        e.bezierCurveTo(a * 359.0000305175781, a * 113.13069152832031, a * 358.5000305175781, a * 105.13069152832031, a * 358.0000305175781, a * 116.13069152832031);
        e.bezierCurveTo(a * 270.5000305175781, a * 130.1306915283203, a * 270.5000305175781, a * 130.1306915283203, a * 183.00003051757812, a * 144.1306915283203);
        e.bezierCurveTo(a * 98.00003051757812, a * 128.6306915283203, a * 98.00003051757812, a * 128.6306915283203, a * 13.000030517578125, a * 113.13069152832031);
        e.closePath();
        Kt(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
        e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
        e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
        e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
        e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
        e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
        e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
        e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
        e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
        e.closePath();
        Kt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27.000030517578125, a * 94.76704406738281);
        e.bezierCurveTo(a * 11.000030517578125, a * 81.76704406738281, a * 31.000030517578125, a * 72.76704406738281, a * 44.000030517578125, a * 59.76704406738281);
        e.bezierCurveTo(a * 9.000030517578125, a * 65.76704406738281, a * 4.000030517578125, a * 78.76704406738281, a * 9.000030517578125, a * 89.76704406738281);
        e.closePath();
        Kt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 352.0000305175781, a * 100.76705932617188);
        e.bezierCurveTo(a * 362.0000305175781, a * 92.76705932617188, a * 352.0000305175781, a * 84.76705932617188, a * 340.0000305175781, a * 68.76705932617188);
        e.bezierCurveTo(a * 360.0000305175781, a * 69.76705932617188, a * 364.0000305175781, a * 79.76705932617188, a * 364.0000305175781, a * 94.76705932617188);
        e.closePath();
        Kt(e, c[1], c[1], a * 1);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25.000030517578125, a * 97.94886779785156);
        e.bezierCurveTo(a * 2.000030517578125, a * 76.94886779785156, a * 29.000030517578125, a * 62.94886779785156, a * 44.000030517578125, a * 59.94886779785156);
        e.bezierCurveTo(a * 8.000030517578125, a * 59.94886779785156, a * -0.999969482421875, a * 81.94886779785156, a * 4.000030517578125, a * 92.94886779785156);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 349.0000305175781, a * 100.94886779785156);
        e.bezierCurveTo(a * 366.0000305175781, a * 82.94886779785156, a * 353.0000305175781, a * 76.94886779785156, a * 337.0000305175781, a * 67.94886779785156);
        e.bezierCurveTo(a * 366.0000305175781, a * 69.94886779785156, a * 366.0000305175781, a * 83.94886779785156, a * 363.0000305175781, a * 101.94886779785156);
        e.closePath();
        Kt(e, c[2], c[3], a * 10);
        Nt(e, a * 46.000030517578125, a * 137.5852279663086, a * 9.219544457292887);
        Kt(e, c[4], c[5], a * 1);
        Nt(e, a * 308.0000305175781, a * 141.5852279663086, a * 8.54400374531753);
        Kt(e, c[4], c[5], a * 1);
        Nt(e, a * 92.00003051757812, a * 149.58523559570312, a * 14.866068747318506);
        Kt(e, c[4], c[5], a * 1);
        Nt(e, a * 262.0000305175781, a * 148.8579559326172, a * 15.620499351813308);
        Kt(e, c[4], c[5], a * 1);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 184.00003051757812, a * 68.85795593261719);
        e.bezierCurveTo(a * 203.00003051757812, a * 108.85795593261719, a * 203.00003051757812, a * 108.85795593261719, a * 222.00003051757812, a * 148.8579559326172);
        e.bezierCurveTo(a * 202.50003051757812, a * 177.8579559326172, a * 202.50003051757812, a * 177.8579559326172, a * 183.00003051757812, a * 206.8579559326172);
        e.bezierCurveTo(a * 162.00003051757812, a * 178.8579559326172, a * 162.00003051757812, a * 178.8579559326172, a * 141.00003051757812, a * 150.8579559326172);
        e.closePath();
        Kt(e, c[4], c[5], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 183.00003051757812, a * 104.94886779785156);
        e.bezierCurveTo(a * 192.50003051757812, a * 125.44886779785156, a * 192.50003051757812, a * 125.44886779785156, a * 202.00003051757812, a * 145.94886779785156);
        e.bezierCurveTo(a * 192.00003051757812, a * 163.94886779785156, a * 192.00003051757812, a * 163.94886779785156, a * 182.00003051757812, a * 181.94886779785156);
        e.bezierCurveTo(a * 172.50003051757812, a * 164.44886779785156, a * 172.50003051757812, a * 164.44886779785156, a * 163.00003051757812, a * 146.94886779785156);
        e.closePath();
        Kt(e, c[6]);
        return d;
    }
    function Im(b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 600;
        var f = b * 22;
        var g = b * 4;
        var a = b * 4;
        c.width = e;
        c.height = f;
        Lt(d, b * 5, b * 5, e - b * 10, f - b * 10, g);
        Kt(d, null, "#BBE8EF", a);
        return c;
    }
    function Em(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 104;
        d.height = a * 117;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 90);
        e.bezierCurveTo(a * 20, a * 99.5, a * 20, a * 99.5, a * 36, a * 109);
        e.bezierCurveTo(a * 67, a * 92, a * 67, a * 92, a * 98, a * 75);
        e.bezierCurveTo(a * 91, a * 27, a * 91, a * 27, a * 91, a * 28);
        e.bezierCurveTo(a * 72.5, a * 16, a * 72.5, a * 16, a * 54, a * 4);
        e.bezierCurveTo(a * 33.5, a * 10, a * 33.5, a * 10, a * 13, a * 16);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 6, a * 76);
        e.bezierCurveTo(a * 13.5, a * 51.5, a * 13.5, a * 51.5, a * 21, a * 27);
        e.bezierCurveTo(a * 37.5, a * 17, a * 37.5, a * 17, a * 54, a * 7);
        e.bezierCurveTo(a * 33.5, a * 12.5, a * 33.5, a * 12.5, a * 13, a * 18);
        e.closePath();
        Kt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 62);
        e.bezierCurveTo(a * 28.5, a * 53, a * 28.5, a * 53, a * 33, a * 44);
        e.bezierCurveTo(a * 41.5, a * 41, a * 41.5, a * 41, a * 50, a * 38);
        e.bezierCurveTo(a * 52.5, a * 35, a * 52.5, a * 35, a * 55, a * 32);
        e.bezierCurveTo(a * 52, a * 30, a * 52, a * 30, a * 49, a * 28);
        e.bezierCurveTo(a * 38, a * 31.5, a * 38, a * 31.5, a * 27, a * 35);
        e.closePath();
        Kt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 107);
        e.bezierCurveTo(a * 66, a * 90.5, a * 66, a * 90.5, a * 96, a * 74);
        e.bezierCurveTo(a * 93, a * 52.5, a * 93, a * 52.5, a * 90, a * 31);
        e.bezierCurveTo(a * 87, a * 48, a * 87, a * 48, a * 84, a * 65);
        e.closePath();
        Kt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 1, a * 89);
        e.bezierCurveTo(a * 18, a * 100, a * 34, a * 110, a * 35, a * 111);
        e.bezierCurveTo(a * 67, a * 93, a * 67, a * 93, a * 99, a * 75);
        e.bezierCurveTo(a * 100, a * 78.5, a * 100, a * 78.5, a * 101, a * 82);
        e.bezierCurveTo(a * 68, a * 99, a * 68, a * 99, a * 35, a * 116);
        e.bezierCurveTo(a * 18, a * 106.5, a * 18, a * 106.5, a * 1, a * 97);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 107);
        e.bezierCurveTo(a * 66.5, a * 91.5, a * 66.5, a * 91.5, a * 97, a * 76);
        e.bezierCurveTo(a * 94.5, a * 52, a * 94.5, a * 52, a * 92, a * 28);
        e.bezierCurveTo(a * 73, a * 15.5, a * 73, a * 15.5, a * 54, a * 3);
        e.bezierCurveTo(a * 33, a * 9.5, a * 33, a * 9.5, a * 12, a * 16);
        e.bezierCurveTo(a * 8, a * 53, a * 8, a * 53, a * 4, a * 90);
        e.bezierCurveTo(a * 18.5, a * 99, a * 18.5, a * 99, a * 33, a * 108);
        e.closePath();
        Kt(e, Xn, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22, a * 71);
        e.bezierCurveTo(a * 30, a * 76.5, a * 30, a * 76.5, a * 38, a * 82);
        e.bezierCurveTo(a * 53, a * 72, a * 53, a * 72, a * 68, a * 62);
        e.bezierCurveTo(a * 68, a * 52, a * 68, a * 52, a * 68, a * 42);
        e.bezierCurveTo(a * 59.5, a * 35.5, a * 59.5, a * 35.5, a * 51, a * 29);
        e.bezierCurveTo(a * 39.5, a * 32, a * 39.5, a * 32, a * 28, a * 35);
        e.bezierCurveTo(a * 25, a * 52, a * 25, a * 52, a * 22, a * 69);
        e.closePath();
        Kt(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 5, a * 89);
        e.bezierCurveTo(a * 20, a * 73, a * 12.5, a * 80.5, a * 20, a * 72);
        e.closePath();
        Kt(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 102);
        e.bezierCurveTo(a * 36, a * 92.5, a * 36, a * 92.5, a * 37, a * 83);
        e.closePath();
        Kt(e, la, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 68, a * 62);
        e.bezierCurveTo(a * 81, a * 67.5, a * 81, a * 67.5, a * 94, a * 73);
        e.closePath();
        Kt(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 70, a * 41);
        e.bezierCurveTo(a * 80, a * 35.5, a * 80, a * 35.5, a * 90, a * 30);
        e.closePath();
        Kt(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 33);
        e.bezierCurveTo(a * 21.5, a * 26.5, a * 21.5, a * 26.5, a * 15, a * 20);
        e.closePath();
        Kt(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 28);
        e.bezierCurveTo(a * 53, a * 17, a * 53, a * 17, a * 55, a * 6);
        e.closePath();
        Kt(e, undefined, c[4], a * 6);
        return d;
    }
    function Sm(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 185;
        e.height = b * 164;
        f.translate(0, 0);
        var g = function (a, b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            d.width = a * 201;
            d.height = a * 164;
            e.translate(0, a * 5);
            e.globalAlpha = b ? 0.5 : 1;
            Nt(e, a * 100.5, a * 82, a * 74.92746655359852);
            Kt(e, c[0], c[0], a * 4);
            Nt(e, a * 100.5, a * 82, a * 65.9417374971317);
            Kt(e, c[0], c[0], a * 4);
            e.translate(0, -5);
            e.globalAlpha = 1;
            Nt(e, a * 100.5, a * 82, a * 74.92746655359852);
            Kt(e, c[1], c[3], a * 4);
            Nt(e, a * 100.5, a * 82, a * 65.9417374971317);
            Kt(e, c[1], c[2], a * 4);
            Nt(e, a * 100.5, a * 82, a * 35.9417374971317);
            Kt(e, c[1], c[2], a * 20);
            Nt(e, a * 100.5, a * 82, a * 15.9417374971317);
            Kt(e, c[1], c[2], a * 6);
            return d;
        }(b, c, d);
        f.drawImage(g, b * -10, b * 0);
        g = Um(b, c, d, 0);
        f.drawImage(g, b * -83, b * -40);
        g = Um(b, c, d, Math.PI / 1.4);
        f.drawImage(g, b * -15, b * -88);
        g = Um(b, c, d, Math.PI / -1.4);
        f.drawImage(g, b * 15, b * -8);
        return e;
    }
    function Qm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 142;
        d.height = a * 118;
        e.save();
        e.translate(a * 70.16665649414062, a * 38.20831298828125);
        Lt(e, a * -58.5, a * -27.5, a * 117, a * 55, a * 20);
        e.restore();
        Kt(e, c[0], c[1], a * 4);
        e.save();
        e.translate(a * 70, a * 42.70831298828125);
        Lt(e, a * -61, a * -20, a * 122, a * 40, a * 20);
        e.restore();
        Kt(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123, a * 70.375);
        e.bezierCurveTo(a * 115, a * 99.375, a * 119, a * 85.375, a * 115, a * 100.375);
        e.bezierCurveTo(a * 112, a * 116.375, a * 117, a * 109.375, a * 131, a * 100.375);
        e.bezierCurveTo(a * 131, a * 83.375, a * 131, a * 83.375, a * 131, a * 66.375);
        e.closePath();
        Kt(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 11, a * 68.375);
        e.bezierCurveTo(a * 11.166656494140625, a * 84.375, a * 9, a * 99.375, a * 10, a * 100.375);
        e.bezierCurveTo(a * 35, a * 113.375, a * 27, a * 110.375, a * 25, a * 95.375);
        e.bezierCurveTo(a * 16, a * 68.375, a * 17, a * 69.375, a * 17, a * 68.375);
        e.closePath();
        Kt(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46, a * 32.375);
        e.bezierCurveTo(a * 43, a * 8.375, a * 45, a * 7.375, a * 56, a * 6.375);
        e.bezierCurveTo(a * 105, a * 4.375, a * 102, a * 6.375, a * 97, a * 32.375);
        e.bezierCurveTo(a * 138, a * 43.375, a * 133, a * 45.375, a * 133, a * 58.375);
        e.bezierCurveTo(a * 133, a * 85.375, a * 125, a * 74.375, a * 111, a * 70.375);
        e.bezierCurveTo(a * 70, a * 69.875, a * 29, a * 69.375, a * 29, a * 69.375);
        e.bezierCurveTo(a * 7, a * 84.375, a * 7, a * 70.375, a * 7, a * 59.375);
        e.bezierCurveTo(a * 6, a * 28.375, a * 32, a * 39.375, a * 44, a * 32.375);
        e.closePath();
        Kt(e, c[2], c[1], a * 4);
        Nt(e, a * 71, a * 44.375, a * 16.55294535724685);
        Kt(e, c[2], c[1], a * 4);
        Nt(e, a * 71, a * 43.70831298828125, a * 8.94427190999916);
        Kt(e, c[2], c[1], a * 4);
        return d;
    }
    function _m() {
        var b = Vw.time;
        if (ΔⲆ[285]) {
            ro.drawImage(ΔⲆ[285][b][1], hq + 480, iq + 190);
            ro.drawImage(ΔⲆ[285][b][2], hq + 180, iq - 430);
            ro.drawImage(ΔⲆ[285][b][1], hq - 855, iq + 100);
            ro.drawImage(ΔⲆ[285][b][0], hq - 550, iq - 300);
            ro.drawImage(ΔⲆ[285][b][0], hq - 1020, iq - 520);
        }
        if (ΔⲆ[108]) {
            ro.drawImage(ΔⲆ[108][b][1], hq - 80, iq - 640);
            ro.drawImage(ΔⲆ[108][b][1], hq + 80, iq + 490);
            ro.drawImage(ΔⲆ[108][b][2], hq - 180, iq - 700);
            ro.drawImage(ΔⲆ[108][b][0], hq + 550, iq + 100);
            ro.drawImage(ΔⲆ[108][b][1], hq + 450, iq + 300);
            ro.drawImage(ΔⲆ[108][b][1], hq + 780, iq + 300);
            ro.drawImage(ΔⲆ[108][b][2], hq + 980, iq + 200);
            ro.drawImage(ΔⲆ[108][b][2], hq + 680, iq + 600);
            ro.drawImage(ΔⲆ[108][b][2], hq - 380, iq + 100);
            ro.drawImage(ΔⲆ[108][b][2], hq + 280, iq + 250);
        }
        if (ΔⲆ[110]) {
            ro.drawImage(ΔⲆ[110][b][0], hq - 590, iq);
            ro.drawImage(ΔⲆ[110][b][0], hq + 120, iq - 390);
            ro.drawImage(ΔⲆ[110][b][0], hq - 270, iq + 340);
        }
        if (ΔⲆ[109]) {
            ro.drawImage(ΔⲆ[109][b][4], hq - 700, iq - 600);
            ro.drawImage(ΔⲆ[109][b][2], hq - 970, iq - 250);
            ro.drawImage(ΔⲆ[109][b][5], hq - 720, iq - 200);
            ro.drawImage(ΔⲆ[109][b][2], hq - 1020, iq + 340);
            ro.drawImage(ΔⲆ[109][b][0], hq - 1120, iq - 0);
            ro.drawImage(ΔⲆ[109][b][1], hq - 650, iq - 330);
            ro.drawImage(ΔⲆ[109][b][4], hq - 495, iq - 90);
            ro.drawImage(ΔⲆ[109][b][3], hq - 520, iq + 340);
            ro.drawImage(ΔⲆ[109][b][2], hq + 830, iq - 520);
        }
        ΔⲆ[413];
        if (Ww && cf) {
            var c = Ww.ᐃⲆΔ.x;
            var d = Ww.ᐃⲆΔ.y;
            Ww.ᐃⲆΔ.x = hq;
            Ww.ᐃⲆΔ.y = iq;
            var e = cf.time;
            cf.time = Vw.time;
            var f;
            var g = Vw.items;
            g[2].x = 400;
            g[2].y = 100;
            g[2].ⲆⲆΔⵠ(114);
            (f = g[1]).x = -500;
            f.y = 100;
            f.ⲆΔΔᐃ[0].x = f.x - 20.5;
            f.ⲆΔΔᐃ[0].y = f.y - 22.5;
            f.ⲆΔΔᐃ[1].x = f.x - 35.5;
            f.ⲆΔΔᐃ[1].y = f.y + 7.5;
            f.ⲆΔΔᐃ[2].x = f.x + 7.5;
            f.ⲆΔΔᐃ[2].y = f.y - 30;
            f.ⲆΔΔᐃ[3].x = f.x + 22.5;
            f.ⲆΔΔᐃ[3].y = f.y;
            f.ⲆΔΔᐃ[4].x = f.x - 7.5;
            f.ⲆΔΔᐃ[4].y = f.y + 14.5;
            for (var a = 0; a < f.info; a++) {
                f.ⲆΔΔᐃ[a].ⲆⲆΔⵠ(294);
            }
            (f = g[3]).x = 210;
            f.y = -290;
            f.ⲆΔΔᐃ[0].x = f.x - 20.5;
            f.ⲆΔΔᐃ[0].y = f.y - 22.5;
            f.ⲆΔΔᐃ[1].x = f.x - 35.5;
            f.ⲆΔΔᐃ[1].y = f.y + 7.5;
            f.ⲆΔΔᐃ[2].x = f.x + 7.5;
            f.ⲆΔΔᐃ[2].y = f.y - 30;
            f.ⲆΔΔᐃ[3].x = f.x + 22.5;
            f.ⲆΔΔᐃ[3].y = f.y;
            f.ⲆΔΔᐃ[4].x = f.x - 7.5;
            f.ⲆΔΔᐃ[4].y = f.y + 14.5;
            for (a = 0; a < f.info; a++) {
                f.ⲆΔΔᐃ[a].ⲆⲆΔⵠ(294);
            }
            g[0].x = 450;
            g[0].y = -100;
            g[0].ⵠⲆΔΔⲆ(113);
            g[0].ⲆΔΔᐃᐃ();
            Ww.ᐃⲆΔ.x = c;
            Ww.ᐃⲆΔ.y = d;
            cf.time = e;
        }
    }
    function Fm(a, b, c) {
        var d = (e = document.createElement("canvas")).getContext("2d");
        e.width = a * 47;
        e.height = a * 60;
        var e;
        d = (e = document.createElement("canvas")).getContext("2d");
        e.width = a * 47;
        e.height = a * 60;
        Nt(d, a * 23.5, a * 20.734375, a * 15.132745950421556);
        Kt(d, Uj, c[2], a * 4);
        Nt(d, a * 23.5, a * 20.734375, a * 18.601075237738275);
        Kt(d, undefined, c[1], a * 4);
        Nt(d, a * 23.5, a * 20.734375, a * 11.40175425099138);
        Kt(d, Gj, c[1], a * 4);
        d.save();
        d.translate(a * 23, a * 38.734375);
        d.rotate(0);
        Lt(d, a * -21.5, a * -19, a * 43, a * 38, a * 10);
        d.restore();
        Kt(d, c[2], c[1], a * 4);
        d.save();
        d.translate(a * 23.5, a * 43.734375);
        d.rotate(0.5235987755982988);
        ob(d, 3, a * 8.06225774829855, a * 0);
        d.restore();
        Kt(d, c[3]);
        Nt(d, a * 23.5, a * 35.734375, a * 7.0710678118654755);
        Kt(d, c[3]);
        return e;
    }
    function Rm() {
        new Date().getTime();
        tc();
        (function () {
            ΔⲆ[814] = Ub(1, [{
                f: fc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
            }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[815] = ΔⲆ[814];
            ΔⲆ[955] = [];
            ΔⲆ[955][0] = ⲆⲆ.ⲆⲆΔᐃⲆⵠᐃ;
            ΔⲆ[955][1] = ⲆⲆ.ⲆⵠΔΔⲆΔᐃ;
            ΔⲆ[955][2] = ⲆⲆ.ᐃⲆⲆᐃⲆⵠⲆ;
            ΔⲆ[956] = ΔⲆ[955];
            ΔⲆ[972] = [];
            ΔⲆ[972][0] = ⲆⲆ.ᐃΔΔᐃⲆΔⲆ;
            ΔⲆ[972][1] = ⲆⲆ.ⲆΔΔΔⲆΔᐃ;
            ΔⲆ[972][2] = ⲆⲆ.ⲆᐃΔⲆΔⵠⵠ;
            ΔⲆ[973] = ΔⲆ[972];
            ΔⲆ[987] = [];
            ΔⲆ[987][0] = ⲆⲆ.ⲆⲆΔⵠⵠΔⲆ;
            ΔⲆ[987][1] = ⲆⲆ.ⲆΔⵠⲆΔᐃⵠ;
            ΔⲆ[987][2] = ⲆⲆ.ΔⲆΔΔᐃⵠⲆ;
            ΔⲆ[988] = ΔⲆ[987];
            ΔⲆ[1154] = [];
            ΔⲆ[1154][0] = ⲆⲆ.ᐃⵠᐃⵠⵠΔᐃ;
            ΔⲆ[1154][1] = ⲆⲆ.ᐃⵠⵠⲆᐃⵠᐃ;
            ΔⲆ[1154][2] = ⲆⲆ.ΔⲆⲆᐃⵠⵠΔ;
            ΔⲆ[1155] = ΔⲆ[1154];
            ΔⲆ[965] = [];
            ΔⲆ[965][0] = ⲆⲆ.ⵠⲆᐃⲆᐃⲆΔ;
            ΔⲆ[965][1] = ⲆⲆ.ΔΔⲆⲆⲆᐃⲆ;
            ΔⲆ[965][2] = ⲆⲆ.ⲆⵠΔΔⵠΔᐃ;
            ΔⲆ[974] = ΔⲆ[965];
            ΔⲆ[1028] = [];
            ΔⲆ[1028][0] = ⲆⲆ.ⵠⲆᐃΔⵠΔΔ;
            ΔⲆ[1028][1] = ⲆⲆ.ⵠᐃᐃΔΔᐃⲆ;
            ΔⲆ[1028][2] = ⲆⲆ.ᐃΔΔⵠⵠⵠᐃ;
            ΔⲆ[1029] = ΔⲆ[1028];
            ΔⲆ[1027] = ΔⲆ[1028];
            ΔⲆ[712] = [];
            ΔⲆ[712][0] = ⲆⲆ.ᐃⲆⵠⲆᐃΔⵠⲆⲆ;
            ΔⲆ[712][1] = ⲆⲆ.ⲆⲆᐃⵠΔᐃⲆⲆΔ;
            ΔⲆ[712][2] = ⲆⲆ.ⵠΔⵠⵠⲆⵠⵠⲆΔ;
            ΔⲆ[713] = ΔⲆ[712];
            ΔⲆ[714] = ΔⲆ[712];
            ΔⲆ[1031] = [];
            ΔⲆ[1031][0] = ⲆⲆ.ⲆⵠΔⵠⵠⵠⵠ;
            ΔⲆ[1031][1] = ⲆⲆ.ᐃⵠⵠᐃᐃⵠΔ;
            ΔⲆ[1031][2] = ⲆⲆ.ⲆΔΔⵠⵠⲆᐃ;
            ΔⲆ[1032] = ΔⲆ[1031];
            ΔⲆ[1030] = ΔⲆ[1031];
            ΔⲆ[423] = [];
            ΔⲆ[423][0] = ⲆⲆ.ΔᐃΔᐃⲆΔᐃ;
            ΔⲆ[423][1] = ⲆⲆ.ⵠⵠⲆΔⲆΔΔ;
            ΔⲆ[423][2] = ⲆⲆ.ⲆⲆⵠⵠᐃⵠⵠ;
            ΔⲆ[425] = ΔⲆ[423];
            ΔⲆ[424] = ΔⲆ[423];
            ΔⲆ[1233] = [];
            ΔⲆ[1233][0] = ⲆⲆ.ⵠΔᐃⵠⲆⵠΔᐃΔ;
            ΔⲆ[1233][1] = ⲆⲆ.ΔΔⵠᐃΔΔⵠΔⵠ;
            ΔⲆ[1233][2] = ⲆⲆ.ⵠᐃᐃΔⲆⵠⵠᐃΔ;
            ΔⲆ[1234] = ΔⲆ[1233];
            ΔⲆ[1230] = [];
            ΔⲆ[1230][0] = ⲆⲆ.ⵠΔᐃⵠΔⵠⵠⵠΔ;
            ΔⲆ[1230][1] = ⲆⲆ.ⲆⵠⵠᐃⲆⲆᐃⵠⲆ;
            ΔⲆ[1230][2] = ⲆⲆ.ⵠⲆᐃΔⵠᐃⲆΔⵠ;
            ΔⲆ[1232] = ΔⲆ[1230];
            ΔⲆ[1231] = ΔⲆ[1230];
            ΔⲆ[569] = [];
            ΔⲆ[569][0] = ⲆⲆ.ᐃᐃⵠⵠΔⵠΔⵠᐃ;
            ΔⲆ[569][1] = ⲆⲆ.ᐃⲆⵠᐃΔⵠΔΔⲆ;
            ΔⲆ[569][2] = ⲆⲆ.ᐃΔⲆⲆⲆⵠⲆᐃⵠ;
            ΔⲆ[571] = ΔⲆ[569];
            ΔⲆ[570] = ΔⲆ[569];
            ΔⲆ[1166] = [];
            ΔⲆ[1166][0] = ⲆⲆ.ΔⵠΔΔᐃᐃΔⲆⲆ;
            ΔⲆ[1166][1] = ⲆⲆ.ΔᐃᐃⵠⵠΔΔΔⵠ;
            ΔⲆ[1166][2] = ⲆⲆ.ᐃᐃⵠᐃⵠᐃᐃΔⲆ;
            ΔⲆ[1167] = ΔⲆ[1166];
            ΔⲆ[1168] = ΔⲆ[1166];
            ΔⲆ[572] = [];
            ΔⲆ[572][0] = ⲆⲆ.ⲆᐃⲆΔⵠⵠΔⵠᐃ;
            ΔⲆ[572][1] = ⲆⲆ.ⵠᐃⵠⵠⲆᐃⲆⲆⲆ;
            ΔⲆ[572][2] = ⲆⲆ.ⵠⵠⲆⲆᐃⲆᐃΔΔ;
            ΔⲆ[574] = ΔⲆ[572];
            ΔⲆ[573] = ΔⲆ[572];
            ΔⲆ[1169] = [];
            ΔⲆ[1169][0] = ⲆⲆ.ⵠᐃⲆⵠΔⲆΔΔⵠ;
            ΔⲆ[1169][1] = ⲆⲆ.ⲆⵠΔᐃᐃⲆⲆᐃΔ;
            ΔⲆ[1169][2] = ⲆⲆ.ⲆΔⲆᐃⲆⵠⵠΔⵠ;
            ΔⲆ[1170] = ΔⲆ[1169];
            ΔⲆ[1171] = ΔⲆ[1169];
            ΔⲆ[575] = [];
            ΔⲆ[575][0] = ⲆⲆ.ⵠΔⲆⵠⲆⵠᐃᐃⲆ;
            ΔⲆ[575][1] = ⲆⲆ.ΔᐃΔΔᐃⲆⵠΔΔ;
            ΔⲆ[575][2] = ⲆⲆ.ⵠⵠᐃⵠⵠᐃᐃⵠΔ;
            ΔⲆ[577] = ΔⲆ[575];
            ΔⲆ[576] = ΔⲆ[575];
            ΔⲆ[1172] = [];
            ΔⲆ[1172][0] = ⲆⲆ.ⲆⵠⵠⵠⲆᐃⵠⵠΔ;
            ΔⲆ[1172][1] = ⲆⲆ.ᐃⲆⵠⵠⲆᐃⲆⵠΔ;
            ΔⲆ[1172][2] = ⲆⲆ.ⵠⲆΔⵠⵠⲆⵠΔᐃ;
            ΔⲆ[1173] = ΔⲆ[1172];
            ΔⲆ[1174] = ΔⲆ[1172];
            ΔⲆ[578] = [];
            ΔⲆ[578][0] = ⲆⲆ.ᐃᐃΔⵠⵠᐃᐃⵠᐃ;
            ΔⲆ[578][1] = ⲆⲆ.ᐃⵠΔⵠⲆᐃⵠⲆᐃ;
            ΔⲆ[578][2] = ⲆⲆ.ⲆᐃᐃⵠⲆΔᐃᐃⲆ;
            ΔⲆ[580] = ΔⲆ[578];
            ΔⲆ[579] = ΔⲆ[578];
            ΔⲆ[1175] = [];
            ΔⲆ[1175][0] = ⲆⲆ.ΔⵠΔᐃⲆᐃⲆⵠⲆ;
            ΔⲆ[1175][1] = ⲆⲆ.ᐃᐃΔᐃΔΔΔᐃⵠ;
            ΔⲆ[1175][2] = ⲆⲆ.ᐃⲆΔΔᐃᐃⲆᐃᐃ;
            ΔⲆ[1176] = ΔⲆ[1175];
            ΔⲆ[1177] = ΔⲆ[1175];
            ΔⲆ[581] = [];
            ΔⲆ[581][0] = ⲆⲆ.ΔⲆΔᐃⵠΔⵠΔᐃ;
            ΔⲆ[581][1] = ⲆⲆ.ΔᐃⵠⲆΔΔᐃΔΔ;
            ΔⲆ[581][2] = ⲆⲆ.ⲆⵠᐃᐃⲆᐃⵠΔⵠ;
            ΔⲆ[583] = ΔⲆ[581];
            ΔⲆ[582] = ΔⲆ[581];
            ΔⲆ[1178] = [];
            ΔⲆ[1178][0] = ⲆⲆ.ⵠⵠⲆΔⲆᐃⵠΔⵠ;
            ΔⲆ[1178][1] = ⲆⲆ.ⲆΔΔΔⵠⵠᐃⲆⲆ;
            ΔⲆ[1178][2] = ⲆⲆ.ΔᐃΔᐃⵠⵠᐃⵠⲆ;
            ΔⲆ[1179] = ΔⲆ[1178];
            ΔⲆ[1180] = ΔⲆ[1178];
            ΔⲆ[584] = [];
            ΔⲆ[584][0] = ⲆⲆ.ᐃⵠΔᐃⲆΔΔⵠΔ;
            ΔⲆ[584][1] = ⲆⲆ.ⲆΔΔΔⲆⵠΔⲆⵠ;
            ΔⲆ[584][2] = ⲆⲆ.ⵠᐃᐃⵠⲆΔᐃⲆΔ;
            ΔⲆ[586] = ΔⲆ[584];
            ΔⲆ[585] = ΔⲆ[584];
            ΔⲆ[1181] = [];
            ΔⲆ[1181][0] = ⲆⲆ.ᐃⵠⲆΔᐃⵠⲆⵠΔ;
            ΔⲆ[1181][1] = ⲆⲆ.ᐃⲆΔᐃⲆΔⲆΔᐃ;
            ΔⲆ[1181][2] = ⲆⲆ.ΔⵠᐃⵠⲆⲆⵠᐃⵠ;
            ΔⲆ[1182] = ΔⲆ[1181];
            ΔⲆ[1183] = ΔⲆ[1181];
            ΔⲆ[587] = [];
            ΔⲆ[587][0] = ⲆⲆ.ⵠᐃᐃΔⵠᐃΔⵠⵠ;
            ΔⲆ[587][1] = ⲆⲆ.ΔⲆⵠⲆⲆⵠⵠⵠⲆ;
            ΔⲆ[587][2] = ⲆⲆ.ⵠⲆΔΔⲆⲆᐃⲆⲆ;
            ΔⲆ[589] = ΔⲆ[587];
            ΔⲆ[588] = ΔⲆ[587];
            ΔⲆ[1184] = [];
            ΔⲆ[1184][0] = ⲆⲆ.ᐃΔⲆΔⵠⲆᐃΔⲆ;
            ΔⲆ[1184][1] = ⲆⲆ.ⲆΔᐃⵠᐃΔⵠⵠⲆ;
            ΔⲆ[1184][2] = ⲆⲆ.ΔⲆⲆⵠⵠᐃᐃᐃᐃ;
            ΔⲆ[1185] = ΔⲆ[1184];
            ΔⲆ[1186] = ΔⲆ[1184];
            ΔⲆ[1257] = [];
            ΔⲆ[1257][0] = ⲆⲆ.ΔⵠᐃΔᐃᐃⲆⵠⲆ;
            ΔⲆ[1257][1] = ⲆⲆ.ΔᐃᐃⵠⵠⵠⵠᐃΔ;
            ΔⲆ[1257][2] = ⲆⲆ.ΔⵠⲆᐃⵠⲆⲆⲆⲆ;
            ΔⲆ[1258] = ΔⲆ[1257];
            ΔⲆ[1256] = ΔⲆ[1257];
            ΔⲆ[1260] = [];
            ΔⲆ[1260][0] = ⲆⲆ.ᐃΔⵠΔⲆΔΔᐃⲆ;
            ΔⲆ[1260][1] = ⲆⲆ.ᐃᐃᐃᐃᐃⵠⵠⵠΔ;
            ΔⲆ[1260][2] = ⲆⲆ.ΔⵠΔᐃⵠⲆΔᐃⵠ;
            ΔⲆ[1261] = ΔⲆ[1260];
            ΔⲆ[1259] = ΔⲆ[1260];
            ΔⲆ[1263] = [];
            ΔⲆ[1263][0] = ⲆⲆ.ⲆᐃᐃΔᐃⲆⲆⵠⲆ;
            ΔⲆ[1263][1] = ⲆⲆ.ᐃⲆⲆΔΔᐃⵠⲆΔ;
            ΔⲆ[1263][2] = ⲆⲆ.ΔⵠᐃⵠᐃⲆᐃΔᐃ;
            ΔⲆ[1264] = ΔⲆ[1263];
            ΔⲆ[1262] = ΔⲆ[1263];
            ΔⲆ[1266] = [];
            ΔⲆ[1266][0] = ⲆⲆ.ΔᐃⵠᐃⵠᐃᐃⵠΔ;
            ΔⲆ[1266][1] = ⲆⲆ.ⵠΔΔΔᐃⲆⲆΔⵠ;
            ΔⲆ[1266][2] = ⲆⲆ.ΔⵠⵠᐃΔᐃⵠⲆⲆ;
            ΔⲆ[1267] = ΔⲆ[1266];
            ΔⲆ[1265] = ΔⲆ[1266];
            ΔⲆ[1269] = [];
            ΔⲆ[1269][0] = ⲆⲆ.ⵠⵠΔΔᐃᐃᐃΔΔ;
            ΔⲆ[1269][1] = ⲆⲆ.ⲆΔΔᐃᐃⵠⵠᐃⵠ;
            ΔⲆ[1269][2] = ⲆⲆ.ΔΔⲆⲆΔΔⵠⵠᐃ;
            ΔⲆ[1270] = ΔⲆ[1269];
            ΔⲆ[1268] = ΔⲆ[1269];
            ΔⲆ[1272] = [];
            ΔⲆ[1272][0] = ⲆⲆ.ⲆⵠⵠΔⵠⲆⲆΔⲆ;
            ΔⲆ[1272][1] = ⲆⲆ.ΔⲆΔᐃᐃΔᐃⲆⲆ;
            ΔⲆ[1272][2] = ⲆⲆ.ΔΔⲆΔΔⵠᐃⲆⵠ;
            ΔⲆ[1273] = ΔⲆ[1272];
            ΔⲆ[1271] = ΔⲆ[1272];
            ΔⲆ[1239] = [];
            ΔⲆ[1239][0] = ⲆⲆ.ⲆΔⵠᐃⲆⵠⲆⲆⵠ;
            ΔⲆ[1239][1] = ⲆⲆ.ᐃΔᐃᐃΔᐃΔⲆⲆ;
            ΔⲆ[1239][2] = ⲆⲆ.ⵠⵠΔΔΔᐃⵠᐃΔ;
            ΔⲆ[1240] = ΔⲆ[1239];
            ΔⲆ[1238] = ΔⲆ[1239];
            ΔⲆ[1242] = [];
            ΔⲆ[1242][0] = ⲆⲆ.ΔᐃᐃⵠᐃⲆᐃᐃⲆ;
            ΔⲆ[1242][1] = ⲆⲆ.ΔⲆⲆᐃⵠᐃⲆⵠᐃ;
            ΔⲆ[1242][2] = ⲆⲆ.ⵠΔⲆᐃᐃⵠΔᐃᐃ;
            ΔⲆ[1243] = ΔⲆ[1242];
            ΔⲆ[1241] = ΔⲆ[1242];
            ΔⲆ[1245] = [];
            ΔⲆ[1245][0] = ⲆⲆ.ᐃΔⲆᐃⲆⵠⲆⵠᐃ;
            ΔⲆ[1245][1] = ⲆⲆ.ΔⵠΔΔΔᐃΔⵠᐃ;
            ΔⲆ[1245][2] = ⲆⲆ.ΔⵠⵠᐃⲆᐃⵠⲆⵠ;
            ΔⲆ[1246] = ΔⲆ[1245];
            ΔⲆ[1244] = ΔⲆ[1245];
            ΔⲆ[1248] = [];
            ΔⲆ[1248][0] = ⲆⲆ.ⵠΔΔⲆᐃⲆΔΔⲆ;
            ΔⲆ[1248][1] = ⲆⲆ.ᐃΔⲆᐃⵠΔⲆᐃⲆ;
            ΔⲆ[1248][2] = ⲆⲆ.ᐃⲆⵠΔⲆⲆⵠᐃⵠ;
            ΔⲆ[1249] = ΔⲆ[1248];
            ΔⲆ[1247] = ΔⲆ[1248];
            ΔⲆ[1251] = [];
            ΔⲆ[1251][0] = ⲆⲆ.ⲆΔⲆⵠⵠΔᐃⵠⵠ;
            ΔⲆ[1251][1] = ⲆⲆ.ⲆΔᐃᐃΔΔᐃⲆⵠ;
            ΔⲆ[1251][2] = ⲆⲆ.ᐃⵠⲆⵠΔᐃᐃⲆⲆ;
            ΔⲆ[1252] = ΔⲆ[1251];
            ΔⲆ[1250] = ΔⲆ[1251];
            ΔⲆ[1254] = [];
            ΔⲆ[1254][0] = ⲆⲆ.ΔᐃΔΔΔΔⲆⵠΔ;
            ΔⲆ[1254][1] = ⲆⲆ.ⵠΔⵠⵠᐃΔⲆⵠΔ;
            ΔⲆ[1254][2] = ⲆⲆ.ⵠⲆⲆⲆΔⵠᐃⵠΔ;
            ΔⲆ[1255] = ΔⲆ[1254];
            ΔⲆ[1253] = ΔⲆ[1254];
            ΔⲆ[1227] = [];
            ΔⲆ[1227][0] = ⲆⲆ.ⵠᐃⲆⲆΔⲆΔⲆᐃ;
            ΔⲆ[1227][1] = ⲆⲆ.ⲆⲆᐃΔⵠⲆⵠⵠΔ;
            ΔⲆ[1227][2] = ⲆⲆ.ᐃᐃⵠᐃⵠΔᐃᐃⵠ;
            ΔⲆ[1229] = ΔⲆ[1227];
            ΔⲆ[1228] = ΔⲆ[1227];
            ΔⲆ[1187] = [];
            ΔⲆ[1187][0] = ⲆⲆ.ΔΔᐃᐃⲆⵠⵠ;
            ΔⲆ[1187][1] = ⲆⲆ.ⵠΔⵠΔΔᐃⲆ;
            ΔⲆ[1187][2] = ⲆⲆ.ⵠΔΔⵠⵠⲆᐃ;
            ΔⲆ[1188] = ΔⲆ[1187];
            ΔⲆ[Gr.ⲆⲆΔΔⵠⲆᐃⲆⵠ] = ΔⲆ[1187];
            ΔⲆ[840] = Ub(1, [{
                f: gb,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
            }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[841] = ΔⲆ[840];
            ΔⲆ[850] = Ub(1, [{
                f: Pm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
            }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[851] = ΔⲆ[850];
            ΔⲆ[644] = Ub(1, [{
                f: Yb,
                x: -1,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
            }, {
                f: Hb,
                x: -1,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
            }, {
                f: Xb,
                x: -1,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
            }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[643] = ΔⲆ[644];
            ΔⲆ[639] = Ub(1, [{
                f: Vb,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#A89F67", "#9E8456"]
            }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[800] = Ub(1, [{
                f: Pu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
            }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[799] = ΔⲆ[800];
            ΔⲆ[631] = Ub(1, [{
                f: Xd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#A89F67", "#9E8456"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[632] = ΔⲆ[631];
            ΔⲆ[311] = Ub(1, [{
                f: Xd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#493d36", "#332b28"]
            }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[284] = ΔⲆ[311];
            ΔⲆ[808] = Ub(1, [{
                f: Xd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#c67933", "#b17238"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[809] = ΔⲆ[808];
            ΔⲆ[834] = Ub(1, [{
                f: Xd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#e8e8e8", "#bbbbbb"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[835] = ΔⲆ[834];
            ΔⲆ[845] = Ub(1, [{
                f: Xd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#328a56", "#449573"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[846] = ΔⲆ[845];
            ΔⲆ[949] = Ub(1, [{
                f: Xd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#c98e2f", "#a36b11"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[950] = ΔⲆ[949];
            ΔⲆ[951] = ΔⲆ[949];
            ΔⲆ[966] = Ub(1, [{
                f: Xd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#13a56d", "#098a58"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[967] = ΔⲆ[966];
            ΔⲆ[968] = ΔⲆ[966];
            ΔⲆ[981] = Ub(1, [{
                f: Xd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#3a8214", "#4a9c1e"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[982] = ΔⲆ[981];
            ΔⲆ[983] = ΔⲆ[981];
            ΔⲆ[959] = Ub(1, [{
                f: Xd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#b22419", "#99110e"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[960] = ΔⲆ[959];
            ΔⲆ[961] = ΔⲆ[959];
            ΔⲆ[309] = Ub(1, [{
                f: sd,
                x: -2,
                y: -2,
                a: 1,
                r: -Math.PI / 7,
                c: ["#4d2d14", "#432516"]
            }, {
                f: od,
                x: -2,
                y: -2,
                a: 1,
                r: -Math.PI / 7,
                c: ["#efd435", "#ec8d35", "#e96132"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[302] = ΔⲆ[309];
            ΔⲆ[328] = Ub(1, [{
                f: td,
                x: -2,
                y: -1,
                a: 1,
                r: -Math.PI / 7,
                c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
            }, {
                f: od,
                x: -2,
                y: -1,
                a: 1,
                r: -Math.PI / 7,
                c: ["#efd435", "#ec8d35", "#e96132"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[327] = ΔⲆ[328];
            ΔⲆ[860] = Ub(1, [{
                f: Jd,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
            }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[865] = Ub(1, [{
                f: Pt,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
            }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[829] = Ub(1, [{
                f: Pd,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[261] = Ub(1, [{
                f: Ad,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[292] = Ub(1, [{
                f: Id,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[293] = Ub(1, [{
                f: Fd,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[455] = Ub(1, [{
                f: Kd,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[313] = Ub(1, [{
                f: xd,
                x: -2,
                y: 5,
                a: 1,
                r: -Math.PI / 5,
                c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[312] = Ub(1, [{
                f: xd,
                x: -2,
                y: 5,
                a: 1,
                r: -Math.PI / 5,
                c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[258] = Ub(1, [{
                f: xd,
                x: -2,
                y: 5,
                a: 1,
                r: -Math.PI / 5,
                c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[296] = Ub(1, [{
                f: xd,
                x: -2,
                y: 5,
                a: 1,
                r: -Math.PI / 5,
                c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[458] = Ub(1, [{
                f: xd,
                x: -2,
                y: 5,
                a: 1,
                r: -Math.PI / 5,
                c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[1017] = [];
            ΔⲆ[1017][0] = ⲆⲆ.ᐃᐃⲆⲆⲆⵠᐃ;
            ΔⲆ[1017][1] = ⲆⲆ.ⲆΔᐃᐃΔᐃⲆ;
            ΔⲆ[1017][2] = ⲆⲆ.ⵠΔᐃΔᐃⲆⲆ;
            ΔⲆ[1019] = ΔⲆ[1017];
            ΔⲆ[1018] = ΔⲆ[1017];
            ΔⲆ[315] = Ub(1, [{
                f: Wd,
                x: -5,
                y: -5,
                a: 1,
                r: 0,
                c: ["#252B28", "#58645F", "#75827D"]
            }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[297] = Ub(1, [{
                f: Hd,
                x: -5,
                y: -5,
                a: 1,
                r: 0,
                c: ["#282823", "#877c2d", "#c4bc51"]
            }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[298] = Ub(1, [{
                f: Od,
                x: -5,
                y: -5,
                a: 1,
                r: 0,
                c: ["#232828", "#3fc9c9", "#74ede6"]
            }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[316] = Ub(1, [{
                f: sd,
                x: 0,
                y: -5,
                a: 1,
                r: Math.PI / 2.5,
                c: ["#4d2d14", "#432516"]
            }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[830] = ΔⲆ[829];
            ΔⲆ[254] = ΔⲆ[261];
            ΔⲆ[290] = ΔⲆ[292];
            ΔⲆ[291] = ΔⲆ[293];
            ΔⲆ[456] = ΔⲆ[455];
            ΔⲆ[314] = ΔⲆ[313];
            ΔⲆ[256] = ΔⲆ[312];
            ΔⲆ[295] = ΔⲆ[258];
            ΔⲆ[257] = ΔⲆ[296];
            ΔⲆ[460] = ΔⲆ[458];
            ΔⲆ[277] = Ub(1, [{
                f: xb,
                x: 0,
                y: 0,
                a: 1,
                r: 0
            }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[310] = Ub(1, [{
                f: Eb,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
            }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[262] = ΔⲆ[310];
            ΔⲆ[329] = Ub(1, [{
                f: Zt,
                x: -2,
                y: -2,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
            }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[263] = ΔⲆ[329];
            ΔⲆ[331] = Ub(1, [{
                f: cu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
            }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[332] = ΔⲆ[331];
            ΔⲆ[492] = Ub(1, [{
                f: Zt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
            }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[493] = ΔⲆ[492];
            ΔⲆ[330] = Ub(1, [{
                f: $t,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
            }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[265] = ΔⲆ[330];
            ΔⲆ[317] = Ub(1, [{
                f: au,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
            }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[318] = ΔⲆ[317];
            ΔⲆ[319] = Ub(1, [{
                f: Du,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[320] = ΔⲆ[319];
            ΔⲆ[362] = Ub(1, [{
                f: Lu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[363] = ΔⲆ[362];
            ΔⲆ[364] = Ub(1, [{
                f: Lu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[365] = ΔⲆ[364];
            ΔⲆ[361] = Ub(1, [{
                f: Fu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[360] = ΔⲆ[361];
            ΔⲆ[495] = Ub(1, [{
                f: Fu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[496] = ΔⲆ[495];
            ΔⲆ[335] = Ub(1, [{
                f: Yt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[268] = ΔⲆ[335];
            ΔⲆ[372] = Ub(1, [{
                f: Xt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[371] = ΔⲆ[372];
            ΔⲆ[499] = Ub(1, [{
                f: Xt,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[498] = ΔⲆ[499];
            ΔⲆ[375] = Ub(1, [{
                f: fu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[374] = ΔⲆ[375];
            ΔⲆ[378] = Ub(1, [{
                f: ou,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[377] = ΔⲆ[378];
            ΔⲆ[337] = Ub(1, [{
                f: ru,
                x: 0,
                y: 2,
                a: 1,
                r: 0,
                c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[338] = ΔⲆ[337];
            ΔⲆ[300] = Ub(1, [{
                f: Fb,
                x: 0,
                y: -3,
                a: 1,
                r: 0,
                c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
            }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[323] = Ub(1, [{
                f: Fb,
                x: 0,
                y: -3,
                a: 1,
                r: 0,
                c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
            }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[325] = ΔⲆ[323];
            ΔⲆ[305] = Ub(1, [{
                f: $b,
                x: -3,
                y: -3,
                a: 1,
                r: 0,
                c: ["#cec0c4", "#ffffff", "#6d6768"]
            }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[513] = Ub(1, [{
                f: $b,
                x: -3,
                y: -3,
                a: 1,
                r: 0,
                c: ["#d4e9ec", "#37b1d7", "#506c71"]
            }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[515] = ΔⲆ[513];
            ΔⲆ[368] = Ub(1, [{
                f: qu,
                x: -3,
                y: -3,
                a: 1,
                r: 0,
                c: ["#ef96be", "#ffffff"]
            }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[1162] = Ub(1, [{
                f: qu,
                x: -3,
                y: -3,
                a: 1,
                r: 0,
                c: ["#55423e", "#ffffff"]
            }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[178] = Ub(1, [{
                f: du,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
            }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[179] = Ub(1, [{
                f: du,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
            }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[624] = Ub(1, [{
                f: qu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#201851", "#b6222a"]
            }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[393] = Ub(1, [{
                f: qu,
                x: -3,
                y: -3,
                a: 1,
                r: 0,
                c: ["#231f20", "#b6222a"]
            }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[505] = Ub(1, [{
                f: qu,
                x: -3,
                y: -3,
                a: 1,
                r: 0,
                c: ["#ffffff", "#b6222a"]
            }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[369] = Ub(1, [{
                f: zu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
            }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[370] = ΔⲆ[369];
            ΔⲆ[381] = Ub(1, [{
                f: Cu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
            }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[380] = ΔⲆ[381];
            ΔⲆ[502] = Ub(1, [{
                f: pu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
            }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[503] = ΔⲆ[502];
            ΔⲆ[880] = Ub(1, [{
                f: md,
                x: 0,
                y: 5,
                a: 1,
                r: 0,
                c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
            }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[881] = ΔⲆ[880];
            ΔⲆ[882] = Ub(1, [{
                f: dd,
                x: 0,
                y: 5,
                a: 1,
                r: 0,
                c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
            }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[883] = ΔⲆ[882];
            ΔⲆ[303] = Ub(1, [{
                f: Kb,
                x: -2,
                y: -2,
                a: 1,
                r: 0,
                c: ["#ffffff", "#cec0c4"]
            }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[304] = ΔⲆ[303];
            ΔⲆ[392] = [];
            ΔⲆ[392][0] = ⲆⲆ.ⲆⵠΔⲆΔᐃΔ;
            ΔⲆ[392][1] = ⲆⲆ.ⲆⵠᐃⲆΔⵠᐃ;
            ΔⲆ[392][2] = ⲆⲆ.ⵠᐃⵠⵠⵠⵠⲆ;
            ΔⲆ[367] = ΔⲆ[392];
            ΔⲆ[975] = [];
            ΔⲆ[975][0] = ⲆⲆ.ᐃⵠⲆᐃΔⲆⲆ;
            ΔⲆ[975][1] = ⲆⲆ.ΔⵠⲆᐃᐃᐃⵠ;
            ΔⲆ[975][2] = ⲆⲆ.ᐃⲆᐃᐃⵠⵠΔ;
            ΔⲆ[977] = ΔⲆ[975];
            ΔⲆ[976] = ΔⲆ[975];
            ΔⲆ[978] = [];
            ΔⲆ[978][0] = ⲆⲆ.ᐃΔΔᐃΔᐃⲆ;
            ΔⲆ[978][1] = ⲆⲆ.ⲆⲆΔⲆⵠⲆⲆ;
            ΔⲆ[978][2] = ⲆⲆ.ΔᐃΔΔᐃⲆΔ;
            ΔⲆ[980] = ΔⲆ[978];
            ΔⲆ[979] = ΔⲆ[978];
            ΔⲆ[1158] = [];
            ΔⲆ[1158][0] = ⲆⲆ.ⵠⲆⲆᐃⲆᐃⵠ;
            ΔⲆ[1158][1] = ⲆⲆ.ⵠⲆⲆᐃⲆᐃⵠ;
            ΔⲆ[1158][2] = ⲆⲆ.ⵠⲆⲆᐃⲆᐃⵠ;
            ΔⲆ[1159] = ΔⲆ[1158];
            ΔⲆ[426] = [];
            ΔⲆ[426][0] = ⲆⲆ.ⵠΔᐃᐃᐃⵠᐃ;
            ΔⲆ[426][1] = ⲆⲆ.ⵠⲆⲆⵠⵠⵠⲆ;
            ΔⲆ[426][2] = ⲆⲆ.ΔΔⲆⵠⲆΔⲆ;
            ΔⲆ[427] = ΔⲆ[426];
            ΔⲆ[428] = ΔⲆ[426];
            ΔⲆ[1160] = [];
            ΔⲆ[1160][0] = ⲆⲆ.ⲆⵠΔⵠⲆⵠΔ;
            ΔⲆ[1160][1] = ⲆⲆ.ⲆⵠΔⵠⲆⵠΔ;
            ΔⲆ[1160][2] = ⲆⲆ.ⲆⵠΔⵠⲆⵠΔ;
            ΔⲆ[1161] = ΔⲆ[1160];
            ΔⲆ[1236] = [];
            ΔⲆ[1236][0] = ⲆⲆ.ΔᐃΔⵠⲆⵠΔᐃᐃ;
            ΔⲆ[1236][1] = ⲆⲆ.ⵠᐃΔⲆΔⵠᐃⵠᐃ;
            ΔⲆ[1236][2] = ⲆⲆ.ΔⵠⲆⵠΔⲆⲆΔᐃ;
            ΔⲆ[1235] = ΔⲆ[1236];
            ΔⲆ[1237] = ΔⲆ[1236];
            ΔⲆ[991] = [];
            ΔⲆ[991][0] = ⲆⲆ.ⲆᐃⲆⲆᐃᐃⵠ;
            ΔⲆ[991][1] = ⲆⲆ.ⵠⲆⲆᐃΔⵠⲆ;
            ΔⲆ[991][2] = ⲆⲆ.ᐃⲆⵠᐃⲆΔⵠ;
            ΔⲆ[990] = ΔⲆ[991];
            ΔⲆ[992] = ΔⲆ[991];
            ΔⲆ[994] = [];
            ΔⲆ[994][0] = ⲆⲆ.ⲆᐃᐃΔΔᐃΔ;
            ΔⲆ[994][1] = ⲆⲆ.ⵠⲆᐃᐃⲆΔⲆ;
            ΔⲆ[994][2] = ⲆⲆ.ΔⵠΔᐃΔΔⲆ;
            ΔⲆ[993] = ΔⲆ[994];
            ΔⲆ[995] = ΔⲆ[994];
            ΔⲆ[997] = [];
            ΔⲆ[997][0] = ⲆⲆ.ᐃⲆΔΔⲆᐃⲆ;
            ΔⲆ[997][1] = ⲆⲆ.ⲆΔΔΔΔⲆΔ;
            ΔⲆ[997][2] = ⲆⲆ.ΔᐃⲆⵠΔᐃⵠ;
            ΔⲆ[996] = ΔⲆ[997];
            ΔⲆ[998] = ΔⲆ[997];
            ΔⲆ[1000] = [];
            ΔⲆ[1000][0] = ⲆⲆ.ⲆⵠΔᐃΔᐃᐃ;
            ΔⲆ[1000][1] = ⲆⲆ.ᐃⵠⲆⵠⲆᐃΔ;
            ΔⲆ[1000][2] = ⲆⲆ.ᐃᐃΔⵠΔⵠⲆ;
            ΔⲆ[999] = ΔⲆ[1000];
            ΔⲆ[1001] = ΔⲆ[1000];
            ΔⲆ[1003] = [];
            ΔⲆ[1003][0] = ⲆⲆ.ΔΔΔᐃΔᐃⲆ;
            ΔⲆ[1003][1] = ⲆⲆ.ⵠⲆⵠⵠᐃΔⲆ;
            ΔⲆ[1003][2] = ⲆⲆ.ΔΔⵠⵠⵠⲆΔ;
            ΔⲆ[1002] = ΔⲆ[1003];
            ΔⲆ[1004] = ΔⲆ[1003];
            ΔⲆ[1006] = [];
            ΔⲆ[1006][0] = ⲆⲆ.ⲆⵠⲆⵠΔⵠᐃ;
            ΔⲆ[1006][1] = ⲆⲆ.ⲆΔⲆΔᐃⵠⲆ;
            ΔⲆ[1006][2] = ⲆⲆ.ᐃⲆⵠΔⵠΔΔ;
            ΔⲆ[1005] = ΔⲆ[1006];
            ΔⲆ[1007] = ΔⲆ[1006];
            ΔⲆ[1009] = [];
            ΔⲆ[1009][0] = ⲆⲆ.ᐃᐃⵠⵠⲆΔΔ;
            ΔⲆ[1009][1] = ⲆⲆ.ΔᐃΔⵠⲆⵠⵠ;
            ΔⲆ[1009][2] = ⲆⲆ.ΔⵠⵠΔⲆΔᐃ;
            ΔⲆ[1008] = ΔⲆ[1009];
            ΔⲆ[1010] = ΔⲆ[1009];
            ΔⲆ[1012] = [];
            ΔⲆ[1012][0] = ⲆⲆ.ⲆⲆⲆⲆⵠⵠⵠ;
            ΔⲆ[1012][1] = ⲆⲆ.ᐃᐃᐃᐃᐃⵠⲆ;
            ΔⲆ[1012][2] = ⲆⲆ.ⵠΔⵠⲆᐃᐃᐃ;
            ΔⲆ[1011] = ΔⲆ[1012];
            ΔⲆ[1013] = ΔⲆ[1012];
            ΔⲆ[1015] = [];
            ΔⲆ[1015][0] = ⲆⲆ.ⲆΔⵠΔⵠΔΔ;
            ΔⲆ[1015][1] = ⲆⲆ.ⵠΔⲆⵠⵠᐃᐃ;
            ΔⲆ[1015][2] = ⲆⲆ.ⵠⵠⲆΔᐃⲆⲆ;
            ΔⲆ[1014] = ΔⲆ[1015];
            ΔⲆ[1016] = ΔⲆ[1015];
            ΔⲆ[1035] = [];
            ΔⲆ[1035][0] = ⲆⲆ.ⲆⵠΔⲆⵠ;
            ΔⲆ[1035][1] = ⲆⲆ.ⲆⵠΔⲆⵠ;
            ΔⲆ[1035][2] = ⲆⲆ.ⲆⵠΔⲆⵠ;
            ΔⲆ[Gr.ᐃⲆⲆᐃᐃΔⵠᐃⲆ] = ΔⲆ[1035];
            ΔⲆ[1036] = ΔⲆ[1035];
            ΔⲆ[1037] = [];
            ΔⲆ[1037][0] = ⲆⲆ.ⲆᐃΔⵠᐃ;
            ΔⲆ[1037][1] = ⲆⲆ.ⲆᐃΔⵠᐃ;
            ΔⲆ[1037][2] = ⲆⲆ.ⲆᐃΔⵠᐃ;
            ΔⲆ[Gr.ⵠⲆᐃΔⵠⲆΔⲆᐃ] = ΔⲆ[1037];
            ΔⲆ[1038] = ΔⲆ[1037];
            ΔⲆ[1039] = [];
            ΔⲆ[1039][0] = ⲆⲆ.ᐃᐃᐃⵠΔ;
            ΔⲆ[1039][1] = ⲆⲆ.ᐃᐃᐃⵠΔ;
            ΔⲆ[1039][2] = ⲆⲆ.ᐃᐃᐃⵠΔ;
            ΔⲆ[Gr.ⲆᐃᐃⲆᐃᐃᐃΔΔ] = ΔⲆ[1039];
            ΔⲆ[1040] = ΔⲆ[1039];
            ΔⲆ[1156] = [];
            ΔⲆ[1156][0] = ⲆⲆ.ⵠΔⲆᐃΔ;
            ΔⲆ[1156][1] = ⲆⲆ.ⵠΔⲆᐃΔ;
            ΔⲆ[1156][2] = ⲆⲆ.ⵠΔⲆᐃΔ;
            ΔⲆ[1157] = ΔⲆ[1156];
            ΔⲆ[1046] = [];
            ΔⲆ[1046][0] = ⲆⲆ.ⵠⲆΔⵠⵠᐃᐃ;
            ΔⲆ[1046][1] = ⲆⲆ.ΔΔᐃΔᐃᐃᐃ;
            ΔⲆ[1046][2] = ⲆⲆ.ⲆⲆⵠΔⵠⲆⵠ;
            ΔⲆ[1048] = ΔⲆ[1046];
            ΔⲆ[1047] = ΔⲆ[1046];
            ΔⲆ[744] = [];
            ΔⲆ[744][0] = ⲆⲆ.ⲆΔⵠⲆΔⲆΔ;
            ΔⲆ[744][1] = ⲆⲆ.ⲆᐃΔᐃᐃΔⲆ;
            ΔⲆ[744][2] = ⲆⲆ.ⵠΔⲆⲆⵠΔᐃ;
            ΔⲆ[746] = ΔⲆ[744];
            ΔⲆ[745] = ΔⲆ[744];
            ΔⲆ[747] = [];
            ΔⲆ[747][0] = ⲆⲆ.ⵠⲆᐃⲆΔⵠⵠ;
            ΔⲆ[747][1] = ⲆⲆ.ⵠΔᐃⵠᐃⲆΔ;
            ΔⲆ[747][2] = ⲆⲆ.ⲆΔΔΔⵠⲆⵠ;
            ΔⲆ[749] = ΔⲆ[747];
            ΔⲆ[748] = ΔⲆ[747];
            ΔⲆ[1049] = [];
            ΔⲆ[1049][0] = ⲆⲆ.ᐃⵠΔⲆⲆⵠΔ;
            ΔⲆ[1049][1] = ⲆⲆ.ⲆⵠΔᐃΔⲆΔ;
            ΔⲆ[1049][2] = ⲆⲆ.ⲆᐃⲆⵠⵠΔΔ;
            ΔⲆ[1051] = ΔⲆ[1049];
            ΔⲆ[1050] = ΔⲆ[1049];
            ΔⲆ[1189] = [];
            ΔⲆ[1189][0] = ⲆⲆ.ⲆⲆᐃΔⲆⲆⲆ;
            ΔⲆ[1189][1] = ⲆⲆ.ⲆΔᐃᐃΔΔⲆ;
            ΔⲆ[1189][2] = ⲆⲆ.ᐃᐃᐃⵠᐃᐃⵠ;
            ΔⲆ[1191] = ΔⲆ[1189];
            ΔⲆ[1190] = ΔⲆ[1189];
            ΔⲆ[1110] = [];
            ΔⲆ[1110][0] = ⲆⲆ.ⲆⲆⲆᐃᐃΔᐃ;
            ΔⲆ[1110][1] = ⲆⲆ.ᐃⵠⲆᐃᐃⲆΔ;
            ΔⲆ[1110][2] = ⲆⲆ.ΔᐃⵠᐃⵠΔΔ;
            ΔⲆ[1112] = ΔⲆ[1110];
            ΔⲆ[1111] = ΔⲆ[1110];
            ΔⲆ[1131] = [];
            ΔⲆ[1131][0] = ⲆⲆ.ᐃⲆᐃᐃᐃⵠⲆⵠᐃ;
            ΔⲆ[1131][1] = ⲆⲆ.ΔⲆⵠᐃΔⲆⲆΔΔ;
            ΔⲆ[1131][2] = ⲆⲆ.ΔⵠⵠΔΔᐃΔⲆᐃ;
            ΔⲆ[1133] = ΔⲆ[1131];
            ΔⲆ[1132] = ΔⲆ[1131];
            ΔⲆ[1137] = [];
            ΔⲆ[1137][0] = ⲆⲆ.ⲆⵠⲆⵠᐃΔᐃ;
            ΔⲆ[1137][1] = ⲆⲆ.ⲆᐃᐃᐃⲆΔΔ;
            ΔⲆ[1137][2] = ⲆⲆ.ΔΔⲆⵠⲆⲆΔ;
            ΔⲆ[1138] = ΔⲆ[1137];
            ΔⲆ[1139] = ΔⲆ[1137];
            ΔⲆ[1140] = [];
            ΔⲆ[1140][0] = ⲆⲆ.ⵠΔΔⲆᐃΔⲆ;
            ΔⲆ[1140][1] = ⲆⲆ.ᐃᐃΔⵠᐃΔⵠ;
            ΔⲆ[1140][2] = ⲆⲆ.ⲆⲆᐃⲆᐃⲆΔ;
            ΔⲆ[1141] = ΔⲆ[1140];
            ΔⲆ[1142] = ΔⲆ[1140];
            ΔⲆ[1117] = [];
            ΔⲆ[1117][0] = ⲆⲆ.ⲆⵠᐃⵠⲆⵠⵠ;
            ΔⲆ[1117][1] = ⲆⲆ.ⲆᐃⲆⵠⵠⵠᐃ;
            ΔⲆ[1117][2] = ⲆⲆ.ⵠⵠⲆᐃΔⵠΔ;
            ΔⲆ[1116] = ΔⲆ[1117];
            ΔⲆ[1118] = ΔⲆ[1117];
            ΔⲆ[1080] = [];
            ΔⲆ[1080][0] = ⲆⲆ.ΔᐃΔⲆᐃᐃⵠ;
            ΔⲆ[1080][1] = ⲆⲆ.ΔⲆΔⲆⲆⵠΔ;
            ΔⲆ[1080][2] = ⲆⲆ.ΔᐃⲆⲆⵠⵠⵠ;
            ΔⲆ[1082] = ΔⲆ[1080];
            ΔⲆ[1081] = ΔⲆ[1080];
            ΔⲆ[1224] = [];
            ΔⲆ[1224][0] = ⲆⲆ.ΔⵠⵠⲆⲆⲆⵠᐃᐃ;
            ΔⲆ[1224][1] = ⲆⲆ.ⲆᐃⵠⲆᐃⲆᐃᐃⵠ;
            ΔⲆ[1224][2] = ⲆⲆ.ᐃⵠⲆΔⲆΔⲆⲆⲆ;
            ΔⲆ[1226] = ΔⲆ[1224];
            ΔⲆ[1225] = ΔⲆ[1224];
            ΔⲆ[1095] = [];
            ΔⲆ[1095][0] = ⲆⲆ.ΔⵠᐃⵠⵠⲆᐃ;
            ΔⲆ[1095][1] = ⲆⲆ.ⲆⵠⵠᐃⵠΔⲆ;
            ΔⲆ[1095][2] = ⲆⲆ.ⵠⲆΔᐃⲆⵠⲆ;
            ΔⲆ[1097] = ΔⲆ[1095];
            ΔⲆ[1096] = ΔⲆ[1095];
            ΔⲆ[717] = Ub(1, [{
                f: Om,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
            }, {
                f: Lm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#e4c027"]
            }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[718] = ΔⲆ[717];
            ΔⲆ[408] = Ub(1, [{
                f: gu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
            }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[409] = ΔⲆ[408];
            ΔⲆ[907] = Ub(1, [{
                f: Au,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
            }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[909] = ΔⲆ[907];
            ΔⲆ[908] = ΔⲆ[907];
            ΔⲆ[197] = Ub(1, [{
                f: xu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
            }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[906] = ΔⲆ[197];
            ΔⲆ[901] = Ub(1, [{
                f: tu,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[900] = ΔⲆ[901];
            ΔⲆ[899] = ΔⲆ[901];
            ΔⲆ[401] = Ub(1, [{
                f: uu,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[402] = ΔⲆ[401];
            ΔⲆ[395] = Ub(1, [{
                f: vu,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[396] = ΔⲆ[395];
            ΔⲆ[398] = Ub(1, [{
                f: wu,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[399] = ΔⲆ[398];
            ΔⲆ[404] = Ub(1, [{
                f: Bu,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[405] = ΔⲆ[404];
            ΔⲆ[472] = Ub(1, [{
                f: nu,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[473] = ΔⲆ[472];
            ΔⲆ[874] = Ub(1, [{
                f: su,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
            }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[876] = ΔⲆ[874];
            ΔⲆ[875] = ΔⲆ[874];
            ΔⲆ[477] = Ub(1, [{
                f: Ku,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
            }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[478] = ΔⲆ[477];
            ΔⲆ[709] = Ub(1, [{
                f: Tc,
                x: 0,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#939393", "#5f6061"]
            }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[711] = ΔⲆ[709];
            ΔⲆ[550] = Ub(1, [{
                f: Ym,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
            }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[551] = ΔⲆ[550];
            ΔⲆ[480] = Ub(1, [{
                f: Ku,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
            }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[481] = ΔⲆ[480];
            ΔⲆ[483] = Ub(1, [{
                f: Ku,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
            }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[484] = ΔⲆ[483];
            ΔⲆ[486] = Ub(1, [{
                f: Ku,
                x: 2,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
            }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[487] = ΔⲆ[486];
            ΔⲆ[489] = [];
            ΔⲆ[489][0] = ⲆⲆ.ⲆᐃⲆⲆΔΔⵠ;
            ΔⲆ[489][1] = ⲆⲆ.ⲆᐃΔΔΔΔⲆ;
            ΔⲆ[489][2] = ⲆⲆ.ΔᐃⵠⵠΔᐃⲆ;
            ΔⲆ[491] = ΔⲆ[489];
            ΔⲆ[490] = ΔⲆ[489];
            ΔⲆ[1195] = [];
            ΔⲆ[1195][0] = ⲆⲆ.ⵠΔΔᐃΔⲆⵠ;
            ΔⲆ[1195][1] = ⲆⲆ.ΔᐃᐃᐃⲆⲆⲆ;
            ΔⲆ[1195][2] = ⲆⲆ.ⵠᐃΔⵠΔⵠⵠ;
            ΔⲆ[1197] = ΔⲆ[1195];
            ΔⲆ[1196] = ΔⲆ[1195];
            ΔⲆ[1199] = [];
            ΔⲆ[1199][0] = ⲆⲆ.ᐃⵠⲆⲆΔᐃⵠ;
            ΔⲆ[1199][1] = ⲆⲆ.ΔⵠⲆⲆⵠΔⵠ;
            ΔⲆ[1199][2] = ⲆⲆ.ΔⵠΔᐃᐃⲆᐃ;
            ΔⲆ[1201] = ΔⲆ[1199];
            ΔⲆ[1200] = ΔⲆ[1199];
            ΔⲆ[1203] = [];
            ΔⲆ[1203][0] = ⲆⲆ.ᐃΔⵠⵠΔⵠⵠ;
            ΔⲆ[1203][1] = ⲆⲆ.ⲆⲆΔᐃⲆⲆⲆ;
            ΔⲆ[1203][2] = ⲆⲆ.ᐃⲆᐃⵠᐃⵠᐃ;
            ΔⲆ[1205] = ΔⲆ[1203];
            ΔⲆ[1204] = ΔⲆ[1203];
            ΔⲆ[1207] = [];
            ΔⲆ[1207][0] = ⲆⲆ.ΔΔⵠᐃΔⲆΔ;
            ΔⲆ[1207][1] = ⲆⲆ.ⲆⲆⲆᐃⲆⲆΔ;
            ΔⲆ[1207][2] = ⲆⲆ.ⵠⵠⵠᐃᐃΔΔ;
            ΔⲆ[1209] = ΔⲆ[1207];
            ΔⲆ[1208] = ΔⲆ[1207];
            ΔⲆ[1211] = [];
            ΔⲆ[1211][0] = ⲆⲆ.ΔⵠⵠΔᐃⵠᐃ;
            ΔⲆ[1211][1] = ⲆⲆ.ΔⵠⵠⵠΔⵠΔ;
            ΔⲆ[1211][2] = ⲆⲆ.ⵠᐃΔⲆΔᐃᐃ;
            ΔⲆ[1213] = ΔⲆ[1211];
            ΔⲆ[1212] = ΔⲆ[1211];
            ΔⲆ[1215] = [];
            ΔⲆ[1215][0] = ⲆⲆ.ΔᐃⲆⲆᐃᐃⵠ;
            ΔⲆ[1215][1] = ⲆⲆ.ΔⲆΔᐃⲆⲆΔ;
            ΔⲆ[1215][2] = ⲆⲆ.ⲆΔᐃᐃᐃᐃᐃ;
            ΔⲆ[1217] = ΔⲆ[1215];
            ΔⲆ[1216] = ΔⲆ[1215];
            ΔⲆ[518] = Ub(1, [{
                f: Fm,
                x: -2,
                y: -2,
                a: 1,
                r: 0,
                c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
            }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[519] = ΔⲆ[518];
            ΔⲆ[532] = Ub(1, [{
                f: jm,
                x: -2,
                y: -2,
                a: 1,
                r: -Math.PI / 5,
                c: ["#141414", "#c4a23a", "#816511"]
            }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[533] = ΔⲆ[532];
            ΔⲆ[521] = Ub(1, [{
                f: dc,
                x: -2,
                y: -2,
                a: 1,
                r: 0,
                c: ["#141414", "#178a99", "#0a6372", "#03282e"]
            }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
            ΔⲆ[523] = Ub(1, [{
                f: dc,
                x: -2,
                y: -2,
                a: 1,
                r: 0,
                c: ["#120202", "#991616", "#750a0a", "#120202"]
            }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
            ΔⲆ[529] = Ub(1, [{
                f: $m,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#347f93", "#54a4ba"]
            }, {
                f: Nm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
            }, {
                f: Vm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#a9e4ed", "#86d4e0"]
            }, {
                f: ec,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[530] = ΔⲆ[529];
            ΔⲆ[553] = Ub(1, [{
                f: Um,
                x: 45,
                y: 70,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[555] = ΔⲆ[553];
            ΔⲆ[541] = Ub(1, [{
                f: Cc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
            }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[542] = ΔⲆ[541];
            ΔⲆ[779] = Ub(1, [{
                f: xm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
            }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[780] = ΔⲆ[779];
            ΔⲆ[767] = Ub(1, [{
                f: mc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#2a2938", "#242330", "#313041"]
            }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[768] = ΔⲆ[767];
            ΔⲆ[776] = Ub(1, [{
                f: Jm,
                x: 0,
                y: 3,
                a: 1,
                r: 0,
                c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
            }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[777] = ΔⲆ[776];
            ΔⲆ[771] = Ub(1, [{
                f: Jm,
                x: 0,
                y: 3,
                a: 1,
                r: 0,
                c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
            }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[772] = ΔⲆ[771];
            ΔⲆ[756] = Ub(1, [{
                f: Dm,
                x: 0,
                y: 10,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[758] = ΔⲆ[756];
            ΔⲆ[760] = Ub(1, [{
                f: Dm,
                x: 0,
                y: 10,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[762] = ΔⲆ[760];
            ΔⲆ[764] = Ub(1, [{
                f: Dm,
                x: 0,
                y: 10,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[770] = ΔⲆ[764];
            ΔⲆ[910] = Ub(1, [{
                f: mu,
                x: -1,
                y: 0,
                a: 1,
                r: 0,
                c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[912] = ΔⲆ[910];
            ΔⲆ[911] = ΔⲆ[910];
            ΔⲆ[732] = Ub(1, [{
                f: Ou,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
            }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[734] = ΔⲆ[732];
            ΔⲆ[563] = Ub(1, [{
                f: lc,
                x: 0,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
            }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[564] = ΔⲆ[563];
            ΔⲆ[751] = Ub(1, [{
                f: Gm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
            }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[252] = Ub(1, [{
                f: sc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
            }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[753] = Ub(1, [{
                f: Gm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
            }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[253] = Ub(1, [{
                f: sc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
            }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[176] = Ub(1, [{
                f: Em,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
            }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[177] = Ub(1, [{
                f: Em,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
            }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[175] = Ub(1, [{
                f: Em,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
            }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[616] = Ub(1, [{
                f: Hm,
                x: 0,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[618] = ΔⲆ[616];
            ΔⲆ[699] = Ub(1, [{
                f: Hm,
                x: 0,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[700] = ΔⲆ[699];
            ΔⲆ[702] = Ub(1, [{
                f: Hm,
                x: 0,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[704] = ΔⲆ[702];
            ΔⲆ[705] = Ub(1, [{
                f: Hm,
                x: 0,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[706] = ΔⲆ[705];
            ΔⲆ[420] = Ub(1, [{
                f: Cm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
            }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[421] = ΔⲆ[420];
            ΔⲆ[826] = Ub(1, [{
                f: zm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#252525", "#73583e", "#493425", "#7d6144"]
            }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[827] = ΔⲆ[826];
            ΔⲆ[429] = Ub(1, [{
                f: pm,
                x: 0,
                y: -2,
                a: 1,
                r: 0,
                c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
            }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[430] = ΔⲆ[429];
            ΔⲆ[432] = Ub(1, [{
                f: Qm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#dbce71", "#b29c32", "#c4bc51"]
            }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[433] = ΔⲆ[432];
            ΔⲆ[435] = Ub(1, [{
                f: bc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
            }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[436] = ΔⲆ[435];
            ΔⲆ[438] = Ub(1, [{
                f: cc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
            }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[439] = ΔⲆ[438];
            ΔⲆ[441] = Ub(1, [{
                f: wc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#221e1b", "#ffffff", "#f6f0e7"]
            }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[442] = ΔⲆ[441];
            ΔⲆ[418] = Ub(1, [{
                f: Ru,
                x: -5,
                y: -5,
                a: 1,
                r: 0,
                c: ["#1d051e", "#c27add", "#cd98e5"]
            }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[609] = Ub(1, [{
                f: ac,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#D7C393", "#a48c6c"]
            }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[142] = Ub(1, [{
                f: kc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#93CBCE", "#E9F6F6"]
            }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[140] = Ub(1, [{
                f: ac,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#866432", "#6b4f25"]
            }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[180] = Ub(1, [{
                f: rc,
                x: 3,
                y: 2,
                a: 1,
                r: 0,
                c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
            }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[181] = Ub(1, [{
                f: vc,
                x: 3,
                y: 2,
                a: 1,
                r: 0,
                c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
            }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[784] = ΔⲆ[180];
            ΔⲆ[785] = ΔⲆ[181];
            ΔⲆ[789] = Ub(1, [{
                f: oc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
            }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[791] = ΔⲆ[789];
            ΔⲆ[613] = Ub(1, [{
                f: hc,
                x: 0,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
            }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[612] = Ub(1, [{
                f: Wm,
                x: 0,
                y: 0,
                a: 1,
                r: Math.PI / 5,
                c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
            }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[715] = ΔⲆ[613];
            ΔⲆ[611] = ΔⲆ[612];
            ΔⲆ[634] = Ub(1, [{
                f: Ld,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[635] = ΔⲆ[634];
            ΔⲆ[200] = Ub(1, [{
                f: qd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[866] = Ub(1, [{
                f: Nd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
            }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[143] = Ub(1, [{
                f: qm,
                x: 0,
                y: -2,
                a: 1,
                r: 0,
                c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
            }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[690] = ΔⲆ[143];
            ΔⲆ[662] = Ub(1, [{
                f: Rt,
                x: -3,
                y: -5,
                a: 1,
                r: 0,
                c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
            }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[664] = Ub(1, [{
                f: bu,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1d051e", "#42261A", "#281818"]
            }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[666] = ΔⲆ[664];
            ΔⲆ[649] = Ub(1, [{
                f: Tt,
                x: -3,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
            }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[650] = ΔⲆ[649];
            ΔⲆ[674] = Ub(1, [{
                f: Zb,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
            }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[646] = Ub(1, [{
                f: St,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
            }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
            ΔⲆ[647] = ΔⲆ[646];
            ΔⲆ[685] = Ub(1, [{
                f: Xm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[684] = ΔⲆ[685];
            ΔⲆ[870] = Ub(1, [{
                f: db,
                x: -5,
                y: -5,
                a: 1,
                r: 0,
                c: ["#e2d63b", "#ee71a9", "#42b672"]
            }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[871] = ΔⲆ[870];
            ΔⲆ[605] = Ub(1, [{
                f: Pc,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
            }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[604] = ΔⲆ[605];
            ΔⲆ[842] = Ub(1, [{
                f: mb,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
            }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[843] = ΔⲆ[842];
            ΔⲆ[652] = Ub(1, [{
                f: Am,
                x: -1,
                y: 0,
                a: 1,
                r: -Math.PI / 5,
                c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
            }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
            ΔⲆ[654] = ΔⲆ[652];
            ΔⲆ[626] = Ub(1, [{
                f: Am,
                x: -1,
                y: 0,
                a: 1,
                r: -Math.PI / 5,
                c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
            }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[627] = ΔⲆ[626];
            ΔⲆ[629] = Ub(1, [{
                f: Bm,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
            }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
            ΔⲆ[196] = Ub(1, [{
                f: Sd,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
            }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[898] = ΔⲆ[196];
            ΔⲆ[659] = Ub(1, [{
                f: Ut,
                x: 0,
                y: 0,
                a: 1,
                r: 0,
                c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
            }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[660] = ΔⲆ[659];
            ΔⲆ[145] = Ub(1, [{
                f: qb,
                x: -2,
                y: -8,
                a: 1,
                r: 0,
                c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
            }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
            ΔⲆ[730] = ΔⲆ[145];
            ΔⲆ[566] = [];
            ΔⲆ[566][0] = ⲆⲆ.ⵠⲆΔΔᐃΔⵠ;
            ΔⲆ[566][1] = ⲆⲆ.ⲆΔⵠⲆᐃⲆΔ;
            ΔⲆ[566][2] = ⲆⲆ.ΔⵠᐃᐃⲆᐃⵠ;
            ΔⲆ[567] = ΔⲆ[566];
            ΔⲆ[568] = ΔⲆ[566];
            ΔⲆ[877] = [];
            ΔⲆ[877][0] = ⲆⲆ.ⵠΔᐃΔⲆΔΔ;
            ΔⲆ[877][1] = ⲆⲆ.ⵠⲆⲆⲆⲆⵠᐃ;
            ΔⲆ[877][2] = ⲆⲆ.ΔⵠⲆⲆⲆⵠⲆ;
            ΔⲆ[879] = ΔⲆ[877];
            ΔⲆ[878] = ΔⲆ[877];
            ΔⲆ[933] = ΔⲆ[932];
            ΔⲆ[934] = ΔⲆ[932];
            ΔⲆ[932] = [];
            ΔⲆ[932][0] = ⲆⲆ.ⵠᐃⵠΔⵠⵠᐃ;
            ΔⲆ[932][1] = ⲆⲆ.ⲆᐃⵠΔⵠᐃᐃ;
            ΔⲆ[932][2] = ⲆⲆ.ᐃΔⲆΔⵠⲆΔ;
            ΔⲆ[933] = ΔⲆ[932];
            ΔⲆ[934] = ΔⲆ[932];
            ΔⲆ[943] = [];
            ΔⲆ[943][0] = ⲆⲆ.ΔⵠⲆᐃᐃⲆᐃ;
            ΔⲆ[943][1] = ⲆⲆ.ΔᐃⲆⲆⵠⵠⲆ;
            ΔⲆ[943][2] = ⲆⲆ.ⵠⵠΔᐃⵠᐃΔ;
            ΔⲆ[944] = ΔⲆ[943];
            ΔⲆ[945] = ΔⲆ[943];
            ΔⲆ[921] = [];
            ΔⲆ[921][0] = ⲆⲆ.ΔᐃⵠⲆⵠᐃⵠ;
            ΔⲆ[921][1] = ⲆⲆ.ᐃⲆᐃᐃⵠⵠᐃ;
            ΔⲆ[921][2] = ⲆⲆ.ᐃⲆᐃᐃⵠᐃⵠ;
            ΔⲆ[922] = ΔⲆ[921];
            ΔⲆ[923] = ΔⲆ[921];
            ΔⲆ[925] = [];
            ΔⲆ[925][0] = ⲆⲆ.ⲆᐃⲆᐃⲆΔⲆ;
            ΔⲆ[925][1] = ⲆⲆ.ᐃᐃⲆΔⵠⵠⲆ;
            ΔⲆ[925][2] = ⲆⲆ.ΔᐃᐃⲆⲆⵠⲆ;
            ΔⲆ[926] = ΔⲆ[925];
            ΔⲆ[927] = ΔⲆ[925];
            ΔⲆ[929] = [];
            ΔⲆ[929][0] = ⲆⲆ.ⲆⵠᐃⲆⲆⵠⵠ;
            ΔⲆ[929][1] = ⲆⲆ.ᐃᐃⵠⵠⵠᐃΔ;
            ΔⲆ[929][2] = ⲆⲆ.ⲆⲆⲆⵠᐃΔΔ;
            ΔⲆ[930] = ΔⲆ[929];
            ΔⲆ[931] = ΔⲆ[929];
            ΔⲆ[946] = [];
            ΔⲆ[946][0] = ⲆⲆ.ⲆΔΔⵠΔⵠΔ;
            ΔⲆ[946][1] = ⲆⲆ.ᐃⵠⵠΔᐃⲆᐃ;
            ΔⲆ[946][2] = ⲆⲆ.ᐃⵠΔⲆΔΔΔ;
            ΔⲆ[947] = ΔⲆ[946];
            ΔⲆ[948] = ΔⲆ[946];
            ΔⲆ[735] = [];
            ΔⲆ[735][0] = ⲆⲆ.ⵠᐃΔⵠⲆⵠⲆ;
            ΔⲆ[735][1] = ⲆⲆ.ⵠⵠⲆΔⵠⵠΔ;
            ΔⲆ[735][2] = ⲆⲆ.ⲆⲆΔⵠⲆⵠᐃ;
            ΔⲆ[737] = ΔⲆ[735];
            ΔⲆ[736] = ΔⲆ[735];
            ΔⲆ[1164] = [];
            ΔⲆ[1164][0] = ⲆⲆ.ⲆΔⵠⲆᐃΔⵠ;
            ΔⲆ[1164][1] = ⲆⲆ.ⵠⲆΔΔⲆΔᐃ;
            ΔⲆ[1164][2] = ⲆⲆ.ⵠᐃⵠΔⵠΔⲆ;
            ΔⲆ[Gr.ᐃⵠΔⵠⵠⵠⲆⲆⵠ] = ΔⲆ[1164];
            ΔⲆ[1165] = ΔⲆ[1164];
            ΔⲆ[738] = [];
            ΔⲆ[738][0] = ⲆⲆ.ⵠᐃⵠⲆΔΔⲆ;
            ΔⲆ[738][1] = ⲆⲆ.ⵠⵠⵠᐃᐃᐃᐃ;
            ΔⲆ[738][2] = ⲆⲆ.ᐃⲆⵠᐃⵠⵠᐃ;
            ΔⲆ[740] = ΔⲆ[738];
            ΔⲆ[739] = ΔⲆ[738];
            ΔⲆ[741] = [];
            ΔⲆ[741][0] = ⲆⲆ.ᐃᐃⵠⵠⲆᐃᐃ;
            ΔⲆ[741][1] = ⲆⲆ.ⲆᐃⵠⲆᐃⲆᐃ;
            ΔⲆ[741][2] = ⲆⲆ.ⵠⲆΔᐃᐃΔΔ;
            ΔⲆ[743] = ΔⲆ[741];
            ΔⲆ[742] = ΔⲆ[741];
            ΔⲆ[938] = [];
            ΔⲆ[938][0] = ⲆⲆ.ⲆΔΔᐃⵠⲆⵠ;
            ΔⲆ[938][1] = ⲆⲆ.ᐃᐃΔⵠΔⲆΔ;
            ΔⲆ[938][2] = ⲆⲆ.ⵠⵠⵠⲆᐃΔΔ;
            ΔⲆ[939] = ΔⲆ[938];
            ΔⲆ[936] = [];
            ΔⲆ[936][0] = ⲆⲆ.ⲆⲆⲆⲆΔᐃΔ;
            ΔⲆ[936][1] = ⲆⲆ.ⲆⵠⵠᐃᐃⲆᐃ;
            ΔⲆ[936][2] = ⲆⲆ.ᐃⲆΔΔⲆᐃⵠ;
            ΔⲆ[937] = ΔⲆ[936];
            ΔⲆ[617] = ΔⲆ[616];
            ΔⲆ[701] = ΔⲆ[699];
            ΔⲆ[703] = ΔⲆ[702];
            ΔⲆ[707] = ΔⲆ[705];
            ΔⲆ[348] = ΔⲆ[311];
            ΔⲆ[633] = ΔⲆ[631];
            ΔⲆ[645] = ΔⲆ[644];
            ΔⲆ[640] = ΔⲆ[639];
            ΔⲆ[273] = ΔⲆ[309];
            ΔⲆ[590] = ΔⲆ[252];
            ΔⲆ[752] = ΔⲆ[751];
            ΔⲆ[591] = ΔⲆ[253];
            ΔⲆ[754] = ΔⲆ[753];
            ΔⲆ[276] = ΔⲆ[328];
            ΔⲆ[863] = ΔⲆ[865];
            ΔⲆ[862] = ΔⲆ[860];
            ΔⲆ[831] = ΔⲆ[829];
            ΔⲆ[340] = ΔⲆ[261];
            ΔⲆ[596] = ΔⲆ[594];
            ΔⲆ[345] = ΔⲆ[292];
            ΔⲆ[346] = ΔⲆ[293];
            ΔⲆ[457] = ΔⲆ[455];
            ΔⲆ[274] = ΔⲆ[313];
            ΔⲆ[341] = ΔⲆ[312];
            ΔⲆ[272] = ΔⲆ[258];
            ΔⲆ[344] = ΔⲆ[296];
            ΔⲆ[459] = ΔⲆ[458];
            ΔⲆ[342] = ΔⲆ[315];
            ΔⲆ[270] = ΔⲆ[297];
            ΔⲆ[271] = ΔⲆ[298];
            ΔⲆ[343] = ΔⲆ[316];
            ΔⲆ[269] = ΔⲆ[277];
            ΔⲆ[358] = ΔⲆ[310];
            ΔⲆ[354] = ΔⲆ[329];
            ΔⲆ[356] = ΔⲆ[331];
            ΔⲆ[355] = ΔⲆ[330];
            ΔⲆ[494] = ΔⲆ[492];
            ΔⲆ[349] = ΔⲆ[317];
            ΔⲆ[350] = ΔⲆ[319];
            ΔⲆ[275] = ΔⲆ[300];
            ΔⲆ[351] = ΔⲆ[323];
            ΔⲆ[353] = ΔⲆ[305];
            ΔⲆ[514] = ΔⲆ[513];
            ΔⲆ[352] = ΔⲆ[303];
            ΔⲆ[520] = ΔⲆ[518];
            ΔⲆ[534] = ΔⲆ[532];
            ΔⲆ[531] = ΔⲆ[529];
            ΔⲆ[522] = ΔⲆ[521];
            ΔⲆ[524] = ΔⲆ[523];
            ΔⲆ[565] = ΔⲆ[563];
            ΔⲆ[554] = ΔⲆ[553];
            ΔⲆ[357] = ΔⲆ[335];
            ΔⲆ[359] = ΔⲆ[337];
            ΔⲆ[339] = Ga(function (a, b, c) {
                var d = document.createElement("canvas");
                var e = d.getContext("2d");
                d.width = a * 118;
                d.height = a * 129;
                e.save();
                e.translate(a * 90, a * 90);
                Lt(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
                e.restore();
                Kt(e, c[0], c[1], 4);
                e.save();
                Lt(e, a * 30, a * 115, a * 60, a * 5, a * 15);
                e.restore();
                Kt(e, c[2], c[3], 4);
                e.save();
                Lt(e, a * 50, a * 117, a * 20, a * 10, a * 15);
                e.restore();
                Kt(e, c[2]);
                return d;
            }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
            ΔⲆ[366] = Ub(0.5, [{
                f: yu,
                x: 0,
                y: 2,
                a: 1,
                r: 0,
                c: ["#ffffff"]
            }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
            ΔⲆ[382] = ΔⲆ[361];
            ΔⲆ[383] = ΔⲆ[362];
            ΔⲆ[384] = ΔⲆ[364];
            ΔⲆ[497] = ΔⲆ[495];
            ΔⲆ[385] = ΔⲆ[392];
            ΔⲆ[774] = ΔⲆ[178];
            ΔⲆ[775] = ΔⲆ[179];
            ΔⲆ[386] = ΔⲆ[368];
            ΔⲆ[625] = ΔⲆ[624];
            ΔⲆ[394] = ΔⲆ[393];
            ΔⲆ[1163] = ΔⲆ[1162];
            ΔⲆ[506] = ΔⲆ[505];
            ΔⲆ[387] = ΔⲆ[369];
            ΔⲆ[504] = ΔⲆ[502];
            ΔⲆ[388] = ΔⲆ[372];
            ΔⲆ[389] = ΔⲆ[375];
            ΔⲆ[390] = ΔⲆ[378];
            ΔⲆ[501] = ΔⲆ[499];
            ΔⲆ[391] = ΔⲆ[381];
            ΔⲆ[403] = ΔⲆ[401];
            ΔⲆ[397] = ΔⲆ[395];
            ΔⲆ[400] = ΔⲆ[398];
            ΔⲆ[406] = ΔⲆ[404];
            ΔⲆ[474] = ΔⲆ[472];
            ΔⲆ[875] = ΔⲆ[874];
            ΔⲆ[552] = ΔⲆ[550];
            ΔⲆ[710] = ΔⲆ[709];
            ΔⲆ[479] = ΔⲆ[477];
            ΔⲆ[482] = ΔⲆ[480];
            ΔⲆ[485] = ΔⲆ[483];
            ΔⲆ[488] = ΔⲆ[486];
            ΔⲆ[410] = ΔⲆ[408];
            ΔⲆ[719] = ΔⲆ[717];
            ΔⲆ[422] = ΔⲆ[420];
            ΔⲆ[431] = ΔⲆ[429];
            ΔⲆ[434] = ΔⲆ[432];
            ΔⲆ[437] = ΔⲆ[435];
            ΔⲆ[543] = ΔⲆ[541];
            ΔⲆ[733] = ΔⲆ[732];
            ΔⲆ[440] = ΔⲆ[438];
            ΔⲆ[443] = ΔⲆ[441];
            ΔⲆ[446] = ΔⲆ[418];
            ΔⲆ[606] = ΔⲆ[605];
            ΔⲆ[844] = ΔⲆ[842];
            ΔⲆ[683] = ΔⲆ[685];
            ΔⲆ[610] = ΔⲆ[609];
            ΔⲆ[689] = ΔⲆ[143];
            ΔⲆ[686] = ΔⲆ[142];
            ΔⲆ[682] = ΔⲆ[140];
            ΔⲆ[615] = ΔⲆ[613];
            ΔⲆ[614] = ΔⲆ[612];
            ΔⲆ[628] = ΔⲆ[626];
            ΔⲆ[630] = ΔⲆ[629];
            ΔⲆ[636] = ΔⲆ[634];
            ΔⲆ[868] = ΔⲆ[200];
            ΔⲆ[867] = ΔⲆ[866];
            ΔⲆ[648] = ΔⲆ[646];
            ΔⲆ[651] = ΔⲆ[649];
            ΔⲆ[653] = ΔⲆ[652];
            ΔⲆ[661] = ΔⲆ[659];
            ΔⲆ[898] = ΔⲆ[196];
            ΔⲆ[663] = ΔⲆ[662];
            ΔⲆ[665] = ΔⲆ[664];
            ΔⲆ[675] = ΔⲆ[674];
            ΔⲆ[731] = ΔⲆ[145];
            ΔⲆ[757] = ΔⲆ[756];
            ΔⲆ[759] = ΔⲆ[176];
            ΔⲆ[761] = ΔⲆ[760];
            ΔⲆ[763] = ΔⲆ[177];
            ΔⲆ[765] = ΔⲆ[764];
            ΔⲆ[766] = ΔⲆ[175];
            ΔⲆ[769] = ΔⲆ[767];
            ΔⲆ[773] = ΔⲆ[771];
            ΔⲆ[778] = ΔⲆ[776];
            ΔⲆ[781] = ΔⲆ[779];
            ΔⲆ[787] = ΔⲆ[181];
            ΔⲆ[786] = ΔⲆ[180];
            ΔⲆ[790] = ΔⲆ[789];
            ΔⲆ[801] = ΔⲆ[800];
            ΔⲆ[810] = ΔⲆ[808];
            ΔⲆ[836] = ΔⲆ[834];
            ΔⲆ[847] = ΔⲆ[845];
            ΔⲆ[828] = ΔⲆ[826];
        })();
        ΔⲆ[540] = [];
        ΔⲆ[540][0] = [];
        ΔⲆ[540][1] = [];
        for (var a = 0; a < 5; a++) {
            ΔⲆ[540][0].push(Ga(Ud(1, 4 + a, "#59B8CE")));
            ΔⲆ[540][1].push(Ga(Ud(1, 4 + a, "#90DDD9")));
        }
        ΔⲆ[470] = [];
        ΔⲆ[470][0] = [];
        ΔⲆ[470][1] = [];
        for (a = 0; a < 5; a++) {
            ΔⲆ[470][0].push(Ga(Ud(1, 4 + a, "#fff")));
            ΔⲆ[470][1].push(Ga(Ud(1, 4 + a, "#fff")));
        }
        ΔⲆ[471] = [];
        ΔⲆ[471][0] = [];
        ΔⲆ[471][1] = [];
        for (a = 0; a < 5; a++) {
            ΔⲆ[471][0].push(Ga(Ud(1, 6 + a, "#DDCD8A")));
            ΔⲆ[471][1].push(Ga(Ud(1, 6 + a, "#155E57")));
        }
        ΔⲆ[942] = [];
        ΔⲆ[942][0] = [];
        ΔⲆ[942][1] = [];
        for (a = 0; a < 5; a++) {
            ΔⲆ[942][0].push(Ga(Ud(1, 4 + a, "#353326")));
            ΔⲆ[942][1].push(Ga(Ud(1, 4 + a, "#1D2526")));
        }
        ΔⲆ[201] = [];
        ΔⲆ[201][0] = Ga(vb(1.5, 0, ["#ee71a9"]));
        ΔⲆ[201][1] = Ga(vb(1.5, 0, ["#ee71a9"]));
        ΔⲆ[872] = [ΔⲆ[201]];
        ΔⲆ[872][1] = [];
        ΔⲆ[872][2] = [];
        ΔⲆ[872][3] = [];
        ΔⲆ[872][4] = [];
        ΔⲆ[872][1][0] = Ga(vb(1.5, 0, ["#e2d63b"]));
        ΔⲆ[872][1][1] = Ga(vb(1.5, 0, ["#e2d63b"]));
        ΔⲆ[872][2][0] = Ga(vb(1.5, 0, ["#309cbd"]));
        ΔⲆ[872][2][1] = Ga(vb(1.5, 0, ["#309cbd"]));
        ΔⲆ[872][3][0] = Ga(vb(1.5, 0, ["#cd232d"]));
        ΔⲆ[872][3][1] = Ga(vb(1.5, 0, ["#cd232d"]));
        ΔⲆ[872][4][0] = Ga(vb(1.5, 0, ["#42b672"]));
        ΔⲆ[872][4][1] = Ga(vb(1.5, 0, ["#42b672"]));
        if (ⲆⵠΔᐃ.ⵠⲆⵠᐃΔΔⲆ("cti", aj.location.href)) {
            document.getElementById("version").innerHTML += "[CTI]";
        } else {
            Ga = function (a) {
                a.loaded = 1;
                return a;
            };
        }
        ΔⲆ[797] = Ga(function () {
            var a = document.createElement("canvas");
            var b = a.getContext("2d");
            a.width = 460;
            a.height = 220;
            b.fillStyle = "#3a2a0d";
            b.fillRect(0, 0, a.width, a.height);
            b.lineWidth = 4;
            b.beginPath();
            b.strokeStyle = "#513810";
            for (var c = 20; c < 220; c += 20) {
                b.moveTo(0, c);
                b.lineTo(460, c);
                b.closePath();
                b.stroke();
            }
            return a;
        }());
        ΔⲆ[108] = [];
        ΔⲆ[108][0] = [];
        ΔⲆ[108][1] = [];
        ΔⲆ[108][0].push(Ga(Wd(1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
        ΔⲆ[108][0].push(Ga(Wd(0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
        ΔⲆ[108][0].push(Ga(Wd(0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
        ΔⲆ[108][1].push(Ga(Wd(1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
        ΔⲆ[108][1].push(Ga(Wd(0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
        ΔⲆ[108][1].push(Ga(Wd(0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
        ΔⲆ[111] = [];
        ΔⲆ[111][0] = [];
        ΔⲆ[111][1] = [];
        ΔⲆ[111][0].push(Ga(Hd(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ΔⲆ[111][0].push(Ga(Hd(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ΔⲆ[111][0].push(Ga(Hd(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ΔⲆ[111][1].push(Ga(Hd(1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
        ΔⲆ[111][1].push(Ga(Hd(1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
        ΔⲆ[111][1].push(Ga(Hd(1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
        ΔⲆ[112] = [];
        ΔⲆ[112][0] = [];
        ΔⲆ[112][1] = [];
        ΔⲆ[112][0].push(Ga(Od(1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
        ΔⲆ[112][0].push(Ga(Od(0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
        ΔⲆ[112][0].push(Ga(Od(0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
        ΔⲆ[112][1].push(Ga(Od(1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
        ΔⲆ[112][1].push(Ga(Od(0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
        ΔⲆ[112][1].push(Ga(Od(0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
        ΔⲆ[239] = [];
        ΔⲆ[239][0] = ⲆⲆ.ⲆᐃⲆΔⲆⵠᐃ;
        ΔⲆ[239][1] = ⲆⲆ.ⲆⵠⲆᐃⵠⵠⵠ;
        ΔⲆ[286] = [];
        ΔⲆ[286][0] = Ga(Cd(0.6, ["#0d1b1c"]));
        ΔⲆ[286][1] = Ga(Cd(0.6, ["#030d14"]));
        ΔⲆ[793] = [];
        ΔⲆ[793][0] = Ga(vd(0.6, ["#2a2938", "#242330"]));
        ΔⲆ[793][1] = Ga(vd(0.6, ["#1b1e30", "#161921"]));
        ΔⲆ[820] = [];
        ΔⲆ[820][0] = Ga(Cb(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
        ΔⲆ[820][1] = Ga(Cb(0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
        ΔⲆ[821] = [];
        ΔⲆ[821][0] = Ga(pb(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
        ΔⲆ[821][1] = Ga(pb(0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
        ΔⲆ[822] = [];
        ΔⲆ[822][0] = Ga(bd(0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
        ΔⲆ[822][1] = Ga(bd(0.4, ["#030d14", "#11635e", "#02373e"]));
        ΔⲆ[823] = Ga(Tb(0.6, ["#BB0000"]));
        ΔⲆ[824] = Ga(Tb(0.6, ["#DBE71C"]));
        ΔⲆ[825] = Ga(Tb(0.6, ["#00BB00"]));
        ΔⲆ[109] = [];
        ΔⲆ[109][0] = [];
        ΔⲆ[109][1] = [];
        ΔⲆ[109][0].push(Td(1.1, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], as, 0));
        ΔⲆ[109][0].push(Td(1.1, ["#0e3022", "#0f9862", "#0b8750", "#26ab6e"], Kh, 0));
        ΔⲆ[109][0].push(Td(0.9, ["#0e3022", "#0e7d4c", "#258a4d", "#248c4d"], false, 0));
        ΔⲆ[109][0].push(Td(0.9, ["#0e3022", "#096d41", "#1f7b43", "#1f7b43"], true, 0));
        ΔⲆ[109][0].push(Td(0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], X, 0));
        ΔⲆ[109][0].push(Td(0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], oq, 0));
        ΔⲆ[109][1].push(Td(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], Js, 0));
        ΔⲆ[109][1].push(Td(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], true, 0));
        ΔⲆ[109][1].push(Td(0.9, ["#030d14", "#0b3534", "#144443", "#174240"], Es, 0));
        ΔⲆ[109][1].push(Td(0.9, ["#030d14", "#0b3534", "#144443", "#174240"], true, 0));
        ΔⲆ[109][1].push(Td(0.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], Kn, 0));
        ΔⲆ[109][1].push(Td(0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], Uq, 0));
        ΔⲆ[307] = [];
        ΔⲆ[307][0] = [];
        ΔⲆ[307][1] = [];
        ΔⲆ[307][0].push(Ga(kd(pd(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], false), ΔⲆ[109][0][0])));
        ΔⲆ[307][0].push(Ga(kd(pd(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], true), ΔⲆ[109][0][1])));
        ΔⲆ[307][1].push(Ga(kd(pd(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], false), ΔⲆ[109][1][0])));
        ΔⲆ[307][1].push(Ga(kd(pd(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], true), ΔⲆ[109][1][1])));
        ΔⲆ[307][0].push(Ga(kd(pd(0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], dq), ΔⲆ[109][0][2])));
        ΔⲆ[307][0].push(Ga(kd(pd(0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], Ik), ΔⲆ[109][0][2])));
        ΔⲆ[307][1].push(Ga(kd(pd(0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], false), ΔⲆ[109][1][2])));
        ΔⲆ[307][1].push(Ga(kd(pd(0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], k), ΔⲆ[109][1][3])));
        ΔⲆ[109][0][5] = Ga(ΔⲆ[109][0][5]);
        ΔⲆ[109][0][4] = Ga(ΔⲆ[109][0][4]);
        ΔⲆ[109][0][3] = Ga(ΔⲆ[109][0][3]);
        ΔⲆ[109][0][2] = Ga(ΔⲆ[109][0][2]);
        ΔⲆ[109][0][1] = Ga(ΔⲆ[109][0][1]);
        ΔⲆ[109][0][0] = Ga(ΔⲆ[109][0][0]);
        ΔⲆ[109][1][5] = Ga(ΔⲆ[109][1][5]);
        ΔⲆ[109][1][4] = Ga(ΔⲆ[109][1][4]);
        ΔⲆ[109][1][3] = Ga(ΔⲆ[109][1][3]);
        ΔⲆ[109][1][2] = Ga(ΔⲆ[109][1][2]);
        ΔⲆ[109][1][1] = Ga(ΔⲆ[109][1][1]);
        ΔⲆ[109][1][0] = Ga(ΔⲆ[109][1][0]);
        ΔⲆ[8] = [];
        ΔⲆ[8][0] = Ga(ab(4, xd(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
        ΔⲆ[8][1] = Ga(ab(4, xd(0.75, Ya, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
        ΔⲆ[1] = [];
        ΔⲆ[1][0] = Ga(ab(4, xd(0.75, Po, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
        ΔⲆ[1][1] = Ga(ab(4, xd(0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
        ΔⲆ[3] = [];
        ΔⲆ[3][0] = Ga(ab(4, xd(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
        ΔⲆ[3][1] = Ga(ab(4, xd(0.75, true, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
        ΔⲆ[4] = [];
        ΔⲆ[4][0] = Ga(ab(4, xd(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
        ΔⲆ[4][1] = Ga(ab(4, xd(0.75, sn, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
        ΔⲆ[31] = [];
        ΔⲆ[31][0] = Ga(ab(4, xd(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
        ΔⲆ[31][1] = Ga(ab(4, xd(0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
        ΔⲆ[9] = [];
        ΔⲆ[9][0] = Ga(ab(3, Jd(0.17, jo, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
        ΔⲆ[9][1] = Ga(ab(3, Jd(0.17, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
        ΔⲆ[199] = [];
        ΔⲆ[199][0] = Ga(ab(3, Pt(0.32, true, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
        ΔⲆ[199][1] = Ga(ab(3, Pt(0.42, jo, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
        ΔⲆ[57] = [];
        ΔⲆ[57][0] = Ga(ab(3, Pd(0.4, true, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
        ΔⲆ[57][1] = Ga(ab(3, Pd(0.4, vh, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
        ΔⲆ[0] = [];
        ΔⲆ[0][0] = Ga(ab(3, Ad(0.4, Tl, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
        ΔⲆ[0][1] = Ga(ab(3, Ad(0.4, true, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
        ΔⲆ[5] = [];
        ΔⲆ[5][0] = Ga(ab(3, Id(0.4, vh, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
        ΔⲆ[5][1] = Ga(ab(3, Id(0.4, ul, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
        ΔⲆ[6] = [];
        ΔⲆ[6][0] = Ga(ab(3, Fd(0.4, true, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
        ΔⲆ[6][1] = Ga(ab(3, Fd(0.4, Po, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
        ΔⲆ[30] = [];
        ΔⲆ[30][0] = Ga(ab(3, Kd(0.4, true, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
        ΔⲆ[30][1] = Ga(ab(3, Kd(0.4, Yq, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
        ΔⲆ[285] = [];
        ΔⲆ[285][0] = [];
        ΔⲆ[285][1] = [];
        ΔⲆ[285][0].push(Ga(Vd(0.9, 0, ["#0d4f35"], 0)));
        ΔⲆ[285][0].push(Ga(Vd(0.9, 0, ["#0d4f35"], 1)));
        ΔⲆ[285][0].push(Ga(Vd(0.9, 0, ["#0d4f35"], 2)));
        ΔⲆ[285][1].push(Ga(Vd(0.9, 0, ["#053339"], 0)));
        ΔⲆ[285][1].push(Ga(Vd(0.9, 0, ["#053339"], 1)));
        ΔⲆ[285][1].push(Ga(Vd(0.9, 0, ["#053339"], 2)));
        ΔⲆ[285][0].push(Ga(Zd(0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
        ΔⲆ[285][0].push(Ga(Zd(0.8, ["#292002", "#ba930e", "#6d5704"])));
        ΔⲆ[285][1].push(Ga(Zd(0.9, ["#052919", "#0a4738", "#06321f"])));
        ΔⲆ[285][1].push(Ga(Zd(0.8, ["#052918", "#08491c", "#063417"])));
        ΔⲆ[183] = [];
        ΔⲆ[183][0] = Ga(ab(Math.PI / 2, Pu(0.25, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
        ΔⲆ[183][1] = Ga(ab(Math.PI / 2, Pu(0.25, true, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
        ΔⲆ[803] = [];
        ΔⲆ[803].push(Ga(Qu(0.25, ["#44301b", "#57442a", "#523e26"], 0)));
        ΔⲆ[803].push(Ga(Qu(0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
        ΔⲆ[803].push(Ga(Qu(0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
        ΔⲆ[802] = [];
        ΔⲆ[802][0] = [];
        ΔⲆ[802][1] = [];
        ΔⲆ[802][0].push(Ga(ab(Math.PI / 2, tm(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
        ΔⲆ[802][1].push(Ga(ab(Math.PI / 2, tm(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
        ΔⲆ[802][0].push(Ga(ab(Math.PI / 2, tm(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
        ΔⲆ[802][1].push(Ga(ab(Math.PI / 2, tm(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
        ΔⲆ[802][0].push(Ga(ab(Math.PI / 2, tm(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
        ΔⲆ[802][1].push(Ga(ab(Math.PI / 2, tm(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3))));
        ΔⲆ[802][0].push(Ga(ab(Math.PI / 2, tm(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
        ΔⲆ[802][1].push(Ga(ab(Math.PI / 2, tm(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
        ΔⲆ[110] = [];
        ΔⲆ[110][0] = [Ga(Gd(1.2, vh, ["#0e3022", "#0b8052", "#077b49"]))];
        ΔⲆ[110][1] = [Ga(Gd(1.2, true, ["#030d14", "#084442", "#0a4049"]))];
        ΔⲆ[623] = [];
        ΔⲆ[623][0] = Ga(Gd(0.8, true, ["#0e3022", "#68622D", "#665329"]));
        ΔⲆ[623][1] = Ga(Gd(0.8, Po, ["#030d14", "#0F3A24", "#083326"]));
        ΔⲆ[189] = [];
        ΔⲆ[189][0] = Ga(fc(0.5, true, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
        ΔⲆ[189][1] = Ga(fc(0.5, true, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
        ΔⲆ[192] = [];
        ΔⲆ[192][0] = Ga(gb(0.5, true, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
        ΔⲆ[192][1] = Ga(gb(0.5, ss, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
        ΔⲆ[194] = [];
        ΔⲆ[194][0] = Ga(Pm(0.5, true, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
        ΔⲆ[194][1] = Ga(Pm(0.5, true, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
        ΔⲆ[287] = [];
        ΔⲆ[287][0] = Ga(Gd(0.8, true, ["#1b170c", "#0b8052", "#077b49"]));
        ΔⲆ[287][1] = Ga(Gd(0.8, true, ["#030d14", "#084442", "#0a4049"]));
        ΔⲆ[813] = [];
        ΔⲆ[813][0] = Ga(fc(0.5, Tl, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
        ΔⲆ[813][1] = Ga(fc(0.5, vh, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
        ΔⲆ[839] = [];
        ΔⲆ[839][0] = Ga(gb(0.5, true, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
        ΔⲆ[839][1] = Ga(gb(0.5, true, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
        ΔⲆ[869] = [];
        ΔⲆ[869][0] = Ga(Pm(0.5, true, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
        ΔⲆ[869][1] = Ga(Pm(0.5, sn, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
        ΔⲆ[854] = [];
        ΔⲆ[854][0] = Ga(Mm(0.45, jo, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
        ΔⲆ[854][1] = Ga(Mm(0.45, Ik, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
        ΔⲆ[859] = Ga(Mm(0.65, Ik, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
        ΔⲆ[294] = [];
        ΔⲆ[294][0] = Ga(Ot(1.4, 0, ["#ac222a", "#e6636a"]));
        ΔⲆ[294][1] = Ga(Ot(1.4, 0, ["#46195e", "#744188"]));
        ΔⲆ[288] = [];
        ΔⲆ[288][0] = Ga(od(0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
        ΔⲆ[288][1] = Ga(od(0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
        ΔⲆ[118] = [];
        ΔⲆ[118][0] = Ga(td(0.9, 0, ["#4d2d14", "#432516"]));
        ΔⲆ[118][1] = Ga(td(0.9, 0, ["#282404", "#0a0a01"]));
        ΔⲆ[113] = [];
        ΔⲆ[113][0] = Ga(sd(0.9, 0, ["#4d2d14", "#432516"]));
        ΔⲆ[113][1] = Ga(sd(0.9, 0, ["#282404", "#0a0a01"]));
        ΔⲆ[289] = [];
        ΔⲆ[289][0] = Ga(ld(0.9, 0, ["#efd435"]));
        ΔⲆ[289][1] = Ga(ld(0.9, 0, ["#fffabb"]));
        ΔⲆ[282] = [];
        ΔⲆ[282][0] = Ga(rd(0.9, 0, ["#efd435"]));
        ΔⲆ[282][1] = Ga(rd(0.9, 0, ["#fffabb"]));
        ΔⲆ[816] = [];
        ΔⲆ[816][0] = Ga(ld(0.9, 0, ["#efd435"]));
        ΔⲆ[816][1] = Ga(ld(0.9, 0, ["rgba(255, 84, 0, 1)"]));
        ΔⲆ[817] = [];
        ΔⲆ[817][0] = Ga(rd(0.9, 0, ["#efd435"]));
        ΔⲆ[817][1] = Ga(rd(0.9, 0, ["#ff5704"]));
        ΔⲆ[324] = Ga(wb(1, "#ffffff"));
        ΔⲆ[301] = Ga(wb(1.5, "#ffffff"));
        ΔⲆ[306] = Ga(Yd(1, "Your score:", 15, "#FFF"));
        ΔⲆ[655] = Ga(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 243;
            c.height = a * 172;
            Nt(d, a * 119.5, a * 140.125, a * 19);
            Kt(d, undefined, b[1], a * 5);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 36.5, a * 20.125);
            d.bezierCurveTo(a * 119.5, a * 20.625, a * 119.5, a * 20.625, a * 202.5, a * 21.125);
            d.bezierCurveTo(a * 214.5, a * 22.125, a * 216.5, a * 26.125, a * 217.5, a * 35.125);
            d.bezierCurveTo(a * 221, a * 76.125, a * 221, a * 76.125, a * 224.5, a * 117.125);
            d.bezierCurveTo(a * 225.5, a * 127.125, a * 221.5, a * 131.125, a * 210.5, a * 132.125);
            d.bezierCurveTo(a * 117.5, a * 132.125, a * 117.5, a * 132.125, a * 24.5, a * 132.125);
            d.bezierCurveTo(a * 14.5, a * 131.125, a * 13.5, a * 126.125, a * 16.5, a * 111.125);
            d.bezierCurveTo(a * 19.5, a * 73.125, a * 19.5, a * 73.125, a * 22.5, a * 35.125);
            d.bezierCurveTo(a * 23.5, a * 23.125, a * 29.5, a * 21.125, a * 36.5, a * 20.125);
            d.closePath();
            Kt(d, b[0], b[1], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 15.5, a * 138.625);
            d.bezierCurveTo(a * 120, a * 138.625, a * 120, a * 138.625, a * 224.5, a * 138.625);
            d.closePath();
            Kt(d, T, b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 13.5, a * 131.625);
            d.bezierCurveTo(a * 119.5, a * 131.625, a * 119.5, a * 131.625, a * 225.5, a * 131.625);
            d.closePath();
            Kt(d, Xk, b[3], a * 10);
            Nt(d, a * 119.5, a * 140.125, a * 14.866068747318506);
            Kt(d, b[4], b[5], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 106.5, a * 146.625);
            d.bezierCurveTo(a * 116.5, a * 137.625, a * 118.5, a * 136.625, a * 123.5, a * 138.625);
            d.bezierCurveTo(a * 131.5, a * 145.625, a * 133.5, a * 148.625, a * 127.5, a * 152.625);
            d.bezierCurveTo(a * 115.5, a * 158.625, a * 111.5, a * 153.625, a * 106.5, a * 147.625);
            d.closePath();
            Kt(d, b[6], b[7], a * 2);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 105.5, a * 146.625);
            d.bezierCurveTo(a * 116.5, a * 159.625, a * 124.5, a * 156.625, a * 132.5, a * 146.625);
            Kt(d, undefined, b[8], a * 5);
            d.save();
            d.translate(a * 75.5, a * 80.125);
            Lt(d, a * -39, a * -40, a * 78, a * 78, a * 10);
            d.restore();
            Kt(d, b[9]);
            d.save();
            d.translate(a * 167, a * 80.125);
            Lt(d, a * -38.5, a * -39, a * 78, a * 78, a * 10);
            d.restore();
            Kt(d, b[9]);
            return c;
        }(0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
        ΔⲆ[656] = ⲆⲆ.ᐃⵠⲆΔΔⲆᐃ;
        ΔⲆ[135] = [];
        ΔⲆ[135][0] = Ga(Yb(1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        ΔⲆ[135][1] = Ga(Yb(1.5, ul, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
        ΔⲆ[641] = [];
        ΔⲆ[641][0] = Ga(Hb(2, Bj, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        ΔⲆ[641][1] = Ga(Hb(2, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
        ΔⲆ[642] = [];
        ΔⲆ[642][0] = Ga(Xb(1.5, Zj, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        ΔⲆ[642][1] = Ga(Xb(1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
        ΔⲆ[134] = [];
        ΔⲆ[134][0] = Ga(Vb(2.2, 0, ["#A89F67", "#9E8456"]));
        ΔⲆ[134][1] = Ga(Vb(2.2, 0, ["#0B4049", "#08383D"]));
        ΔⲆ[638] = [];
        ΔⲆ[638][0] = Ga(Vb(2.2, 0, ["#68622D", "#665329"]));
        ΔⲆ[638][1] = Ga(Vb(2.2, 0, ["#0F3A24", "#083326"]));
        ΔⲆ[321] = [];
        ΔⲆ[321][0] = Ga(Xd(0.8, 0, ["#A89F67", "#9E8456"]));
        ΔⲆ[321][1] = Ga(Xd(0.8, 0, ["#15514F", "#0F3F3D"]));
        ΔⲆ[811] = [];
        ΔⲆ[811][0] = Ga(Xd(0.8, 0, ["#c67933", "#b17238"]));
        ΔⲆ[811][1] = Ga(Xd(0.8, 0, ["#043c37", "#032b23"]));
        ΔⲆ[984] = [];
        ΔⲆ[984][0] = Ga(Xd(0.8, 0, ["#3a8214", "#4a9c1e"]));
        ΔⲆ[984][1] = Ga(Xd(0.8, 0, ["#032d29", "#044640"]));
        ΔⲆ[837] = [];
        ΔⲆ[837][0] = Ga(Xd(0.8, 0, ["#e8e8e8", "#bbbbbb"]));
        ΔⲆ[837][1] = Ga(Xd(0.8, 0, ["#1c6161", "#07413f"]));
        ΔⲆ[848] = [];
        ΔⲆ[848][0] = Ga(Xd(0.8, 0, ["#328a56", "#449573"]));
        ΔⲆ[848][1] = Ga(Xd(0.8, 0, ["#043c37", "#032b23"]));
        ΔⲆ[952] = [];
        ΔⲆ[952][0] = Ga(Xd(0.8, 0, ["#c98e2f", "#a36b11"]));
        ΔⲆ[952][1] = Ga(Xd(0.8, 0, ["#043c37", "#032b23"]));
        ΔⲆ[962] = [];
        ΔⲆ[962][0] = Ga(Xd(0.8, 0, ["#b22419", "#99110e"]));
        ΔⲆ[962][1] = Ga(Xd(0.8, 0, ["#04323c", "#03222b"]));
        ΔⲆ[969] = [];
        ΔⲆ[969][0] = Ga(Xd(0.8, 0, ["#13a56d", "#098a58"]));
        ΔⲆ[969][1] = Ga(Xd(0.8, 0, ["#043c37", "#032b23"]));
        ΔⲆ[657] = Ub(1, [{
            f: Vb,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#A89F67", "#9E8456"]
        }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        ΔⲆ[723] = Ub(1, [{
            f: sd,
            x: 0,
            y: 0,
            a: 1,
            r: -Math.PI / 5,
            c: ["#4d2d14", "#432516"]
        }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        ΔⲆ[724] = Ub(1, [{
            f: qm,
            x: 0,
            y: -5,
            a: 1,
            r: 0,
            c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
        }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        ΔⲆ[334] = Ub(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        ΔⲆ[115] = [];
        ΔⲆ[115][0] = Ga(Ab(0.9, 0, ["#7d613e", "#9e7e5a"]));
        ΔⲆ[115][1] = Ga(Ab(0.9, 0, ["#084442", "#125e5a"]));
        ΔⲆ[132] = [];
        ΔⲆ[132][0] = Ga(Ab(0.9, 0, ["#9E8456", "#A89F67"]));
        ΔⲆ[132][1] = Ga(Ab(0.9, 0, ["#1b6f6a", "#0d4e4c"]));
        ΔⲆ[668] = [];
        ΔⲆ[668][0] = Ga(Ab(0.9, 0, ["#665329", "#68622D"]));
        ΔⲆ[668][1] = Ga(Ab(0.9, 0, ["#083326", "#0F3A24"]));
        ΔⲆ[188] = [];
        ΔⲆ[188][0] = Ga(Ab(0.9, 0, ["#c67933", "#ec952d"]));
        ΔⲆ[188][1] = Ga(Ab(0.9, 0, ["#0e6553", "#094437"]));
        ΔⲆ[210] = [];
        ΔⲆ[210][0] = Ga(Ab(0.9, 0, ["#375809", "#4b770e"]));
        ΔⲆ[210][1] = Ga(Ab(0.9, 0, ["#09542d", "#0d5d2f"]));
        ΔⲆ[985] = [];
        ΔⲆ[985][0] = Ga(Ab(0.9, 0, ["#585809", "#72770e"]));
        ΔⲆ[985][1] = Ga(Ab(0.9, 0, ["#295209", "#305d0d"]));
        ΔⲆ[191] = [];
        ΔⲆ[191][0] = Ga(Ab(0.9, 0, ["#b9b094", "#e2d2c0"]));
        ΔⲆ[191][1] = Ga(Ab(0.9, 0, ["#126366", "#0d484b"]));
        ΔⲆ[193] = [];
        ΔⲆ[193][0] = Ga(Ab(0.9, 0, ["#3f8662", "#30915d"]));
        ΔⲆ[193][1] = Ga(Ab(0.9, 0, ["#0e6553", "#094437"]));
        ΔⲆ[812] = [];
        ΔⲆ[812][0] = Ga(Ab(0.9, 0, ["#c79153", "#dfa868"]));
        ΔⲆ[812][1] = Ga(Ab(0.9, 0, ["#073927", "#075040"]));
        ΔⲆ[838] = [];
        ΔⲆ[838][0] = Ga(Ab(0.9, 0, ["#768b5b", "#819984"]));
        ΔⲆ[838][1] = Ga(Ab(0.9, 0, ["#0c4540", "#0e5153"]));
        ΔⲆ[849] = [];
        ΔⲆ[849][0] = Ga(Ab(0.9, 0, ["#567465", "#627c6e"]));
        ΔⲆ[849][1] = Ga(Ab(0.9, 0, ["#073927", "#075040"]));
        ΔⲆ[204] = [];
        ΔⲆ[204][0] = Ga(Ab(0.9, 0, ["#996b3a", "#bf956b"]));
        ΔⲆ[204][1] = Ga(Ab(0.9, 0, ["#0e6553", "#094437"]));
        ΔⲆ[953] = [];
        ΔⲆ[953][0] = Ga(Ab(0.9, 0, ["#7a634a", "#a68f77"]));
        ΔⲆ[953][1] = Ga(Ab(0.9, 0, ["#1e4d43", "#113c32"]));
        ΔⲆ[206] = [];
        ΔⲆ[206][0] = Ga(Ab(0.9, 0, ["#99403c", "#bc796c"]));
        ΔⲆ[206][1] = Ga(Ab(0.9, 0, ["#1e434d", "#11303c"]));
        ΔⲆ[963] = [];
        ΔⲆ[963][0] = Ga(Ab(0.9, 0, ["#88504e", "#b3857c"]));
        ΔⲆ[963][1] = Ga(Ab(0.9, 0, ["#253b41", "#162930"]));
        ΔⲆ[208] = [];
        ΔⲆ[208][0] = Ga(Ab(0.9, 0, ["#0f8870", "#23af93"]));
        ΔⲆ[208][1] = Ga(Ab(0.9, 0, ["#032829", "#083233"]));
        ΔⲆ[970] = [];
        ΔⲆ[970][0] = Ga(Ab(0.9, 0, ["#618a20", "#84a74e"]));
        ΔⲆ[970][1] = Ga(Ab(0.9, 0, ["#1f4632", "#335d47"]));
        ΔⲆ[114] = [];
        ΔⲆ[114][0] = Ga(Eb(1.2, true, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
        ΔⲆ[114][1] = Ga(Eb(1.2, Ik, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
        ΔⲆ[162] = [];
        ΔⲆ[162][0] = Ga(au(1, Tl, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
        ΔⲆ[162][1] = Ga(au(1, sn, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
        ΔⲆ[165] = [];
        ΔⲆ[165][0] = Ga(cu(1, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        ΔⲆ[165][1] = Ga(cu(1, sn, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
        ΔⲆ[122] = [];
        ΔⲆ[122][0] = Ga(Zt(1, wr, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        ΔⲆ[122][1] = Ga(Zt(1, Yq, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
        ΔⲆ[163] = [];
        ΔⲆ[163][0] = Ga(Zt(1, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
        ΔⲆ[163][1] = Ga(Zt(1, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
        ΔⲆ[164] = [];
        ΔⲆ[164][0] = Ga($t(1, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
        ΔⲆ[164][1] = Ga($t(1, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
        ΔⲆ[160] = [];
        ΔⲆ[160][0] = Ga(Du(0.8, Ya, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
        ΔⲆ[160][1] = Ga(Du(0.8, oq, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
        ΔⲆ[169] = [];
        ΔⲆ[169][0] = Ga(Lu(0.8, Bj, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
        ΔⲆ[169][1] = Ga(Lu(0.8, h, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
        ΔⲆ[170] = [];
        ΔⲆ[170][0] = Ga(Gu(0.8, true, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        ΔⲆ[170][1] = Ga(Gu(0.8, Po, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
        ΔⲆ[168] = [];
        ΔⲆ[168][0] = Ga(Fu(0.8, h, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
        ΔⲆ[168][1] = Ga(Fu(0.8, true, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
        ΔⲆ[123] = [];
        ΔⲆ[123][0] = Ga(Fu(0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        ΔⲆ[123][1] = Ga(Fu(0.8, true, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
        ΔⲆ[166] = [];
        ΔⲆ[166][0] = Ga(Yt(1.5, h, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
        ΔⲆ[166][1] = Ga(Yt(1.5, Po, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
        ΔⲆ[336] = [];
        ΔⲆ[336][0] = Ga(Yt(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ΔⲆ[336][1] = Ga(Yt(1, false, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
        ΔⲆ[171] = [];
        ΔⲆ[171][0] = Ga(Xt(1.5, Tl, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
        ΔⲆ[171][1] = Ga(Xt(1.5, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
        ΔⲆ[373] = [];
        ΔⲆ[373][0] = Ga(Xt(1, Ia, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ΔⲆ[373][1] = Ga(Xt(1, Dk, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        ΔⲆ[124] = [];
        ΔⲆ[124][0] = Ga(Xt(1.5, Kh, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        ΔⲆ[124][1] = Ga(Xt(1.5, h, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
        ΔⲆ[500] = [];
        ΔⲆ[500][0] = Ga(Xt(1, Ia, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ΔⲆ[500][1] = Ga(Xt(1, Yh, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        ΔⲆ[172] = [];
        ΔⲆ[172][0] = Ga(fu(1.5, sn, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
        ΔⲆ[172][1] = Ga(fu(1.5, ul, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
        ΔⲆ[376] = [];
        ΔⲆ[376][0] = Ga(fu(1, Es, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ΔⲆ[376][1] = Ga(fu(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        ΔⲆ[173] = [];
        ΔⲆ[173][0] = Ga(ou(1.5, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        ΔⲆ[173][1] = Ga(ou(1.5, kk, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
        ΔⲆ[379] = [];
        ΔⲆ[379][0] = Ga(ou(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        ΔⲆ[379][1] = Ga(ou(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        ΔⲆ[167] = [];
        ΔⲆ[167][0] = Ga(ru(0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
        ΔⲆ[167][1] = Ga(ru(0.5, 0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
        ΔⲆ[691] = [];
        ΔⲆ[691][0] = Ga(uc(0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
        ΔⲆ[691][1] = Ga(uc(0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
        ΔⲆ[264] = [];
        ΔⲆ[264][0] = Ga(Ib(0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
        ΔⲆ[264][1] = Ga(Ib(0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
        ΔⲆ[260] = [];
        ΔⲆ[260][0] = Ga(ab(Math.PI, Lb(0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
        ΔⲆ[260][1] = Ga(ab(Math.PI, Lb(0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
        ΔⲆ[266] = Ga(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 450;
            c.height = a * 470;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 226.5, a * 91.546875);
            d.bezierCurveTo(a * 254.5, a * 115.546875, a * 261.5, a * 115.546875, a * 294.5, a * 109.546875);
            d.bezierCurveTo(a * 299.5, a * 141.546875, a * 315.5, a * 151.546875, a * 344.5, a * 158.546875);
            d.bezierCurveTo(a * 330.5, a * 195.546875, a * 341.5, a * 207.546875, a * 361.5, a * 226.546875);
            d.bezierCurveTo(a * 331.5, a * 251.546875, a * 335.5, a * 270.546875, a * 342.5, a * 295.546875);
            d.bezierCurveTo(a * 300.5, a * 296.546875, a * 293.5, a * 325.546875, a * 292.5, a * 344.546875);
            d.bezierCurveTo(a * 257.5, a * 326.546875, a * 242.5, a * 338.546875, a * 224.5, a * 361.546875);
            d.bezierCurveTo(a * 200.5, a * 329.546875, a * 180.5, a * 334.546875, a * 155.5, a * 341.546875);
            d.bezierCurveTo(a * 146.5, a * 307.546875, a * 140.5, a * 302.546875, a * 107.5, a * 292.546875);
            d.bezierCurveTo(a * 117.5, a * 253.546875, a * 109.5, a * 244.546875, a * 89.5, a * 224.546875);
            d.bezierCurveTo(a * 118.5, a * 191.546875, a * 114.5, a * 182.546875, a * 108.5, a * 156.546875);
            d.bezierCurveTo(a * 143.5, a * 149.546875, a * 150.5, a * 136.546875, a * 157.5, a * 106.546875);
            d.bezierCurveTo(a * 202.5, a * 120.546875, a * 211.5, a * 103.546875, a * 228.5, a * 91.546875);
            d.closePath();
            Kt(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 224.5, a * 129.546875);
            d.bezierCurveTo(a * 247.5, a * 147.546875, a * 252.5, a * 143.546875, a * 274.5, a * 141.546875);
            d.bezierCurveTo(a * 279.5, a * 163.546875, a * 289.5, a * 168.546875, a * 311.5, a * 178.546875);
            d.bezierCurveTo(a * 301.5, a * 199.546875, a * 307.5, a * 213.546875, a * 323.5, a * 226.546875);
            d.bezierCurveTo(a * 303.5, a * 240.546875, a * 303.5, a * 255.546875, a * 312.5, a * 275.546875);
            d.bezierCurveTo(a * 281.5, a * 278.546875, a * 276.5, a * 291.546875, a * 272.5, a * 313.546875);
            d.bezierCurveTo(a * 248.5, a * 301.546875, a * 239.5, a * 310.546875, a * 224.5, a * 324.546875);
            d.bezierCurveTo(a * 211.5, a * 304.546875, a * 199.5, a * 301.546875, a * 176.5, a * 309.546875);
            d.bezierCurveTo(a * 165.5, a * 276.546875, a * 159.5, a * 275.546875, a * 138.5, a * 274.546875);
            d.bezierCurveTo(a * 148.5, a * 248.546875, a * 140.5, a * 237.546875, a * 125.5, a * 225.546875);
            d.bezierCurveTo(a * 145.5, a * 205.546875, a * 146.5, a * 195.546875, a * 142.5, a * 176.546875);
            d.bezierCurveTo(a * 173.5, a * 164.546875, a * 173.5, a * 155.546875, a * 178.5, a * 140.546875);
            d.bezierCurveTo(a * 214.5, a * 143.546875, a * 214.5, a * 135.546875, a * 226.5, a * 129.546875);
            d.closePath();
            Kt(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 224.5, a * 160.546875);
            d.bezierCurveTo(a * 236.5, a * 168.546875, a * 239.5, a * 168.546875, a * 258.5, a * 168.546875);
            d.bezierCurveTo(a * 261.5, a * 185.546875, a * 268.5, a * 187.546875, a * 282.5, a * 192.546875);
            d.bezierCurveTo(a * 277.5, a * 208.546875, a * 283.5, a * 216.546875, a * 289.5, a * 228.546875);
            d.bezierCurveTo(a * 277.5, a * 243.546875, a * 280.5, a * 253.546875, a * 281.5, a * 260.546875);
            d.bezierCurveTo(a * 264.5, a * 260.546875, a * 259.5, a * 269.546875, a * 256.5, a * 283.546875);
            d.bezierCurveTo(a * 244.5, a * 276.546875, a * 232.5, a * 283.546875, a * 223.5, a * 291.546875);
            d.bezierCurveTo(a * 213.5, a * 276.546875, a * 205.5, a * 278.546875, a * 190.5, a * 281.546875);
            d.bezierCurveTo(a * 181.5, a * 262.546875, a * 173.5, a * 259.546875, a * 165.5, a * 258.546875);
            d.bezierCurveTo(a * 169.5, a * 239.546875, a * 167.5, a * 233.546875, a * 157.5, a * 225.546875);
            d.bezierCurveTo(a * 169.5, a * 208.546875, a * 170.5, a * 203.546875, a * 168.5, a * 192.546875);
            d.bezierCurveTo(a * 181.5, a * 187.546875, a * 188.5, a * 179.546875, a * 192.5, a * 168.546875);
            d.bezierCurveTo(a * 216.5, a * 170.546875, a * 218.5, a * 163.546875, a * 225.5, a * 160.546875);
            d.closePath();
            Kt(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 205.5, a * 194.546875);
            d.bezierCurveTo(a * 216.5, a * 192.546875, a * 219.5, a * 191.546875, a * 225.5, a * 185.546875);
            d.bezierCurveTo(a * 232.5, a * 193.546875, a * 237.5, a * 191.546875, a * 246.5, a * 192.546875);
            d.bezierCurveTo(a * 249.5, a * 202.546875, a * 253.5, a * 205.546875, a * 258.5, a * 207.546875);
            d.bezierCurveTo(a * 259.5, a * 222.546875, a * 256.5, a * 223.546875, a * 265.5, a * 226.546875);
            d.bezierCurveTo(a * 256.5, a * 231.546875, a * 255.5, a * 241.546875, a * 259.5, a * 248.546875);
            d.bezierCurveTo(a * 250.5, a * 245.546875, a * 245.5, a * 252.546875, a * 243.5, a * 260.546875);
            d.bezierCurveTo(a * 234.5, a * 256.546875, a * 229.5, a * 258.546875, a * 223.5, a * 265.546875);
            d.bezierCurveTo(a * 218.5, a * 255.546875, a * 213.5, a * 257.546875, a * 204.5, a * 261.546875);
            d.bezierCurveTo(a * 203.5, a * 251.546875, a * 198.5, a * 248.546875, a * 189.5, a * 244.546875);
            d.bezierCurveTo(a * 194.5, a * 237.546875, a * 192.5, a * 231.546875, a * 184.5, a * 225.546875);
            d.bezierCurveTo(a * 191.5, a * 211.546875, a * 192.5, a * 209.546875, a * 190.5, a * 204.546875);
            d.bezierCurveTo(a * 200.5, a * 204.546875, a * 204.5, a * 198.546875, a * 207.5, a * 194.546875);
            d.closePath();
            Kt(d, Xn, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 149.5, a * 93.546875);
            d.bezierCurveTo(a * 287.5, a * 332.546875, a * 226, a * 225.546875, a * 302.5, a * 357.546875);
            d.closePath();
            Kt(d, _r, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 224.5, a * 66.546875);
            d.bezierCurveTo(a * 224.5, a * 223.546875, a * 224.5, a * 223.546875, a * 224.5, a * 380.546875);
            d.closePath();
            Kt(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 302.5, a * 88.546875);
            d.bezierCurveTo(a * 222.5, a * 227.546875, a * 222.5, a * 227.546875, a * 142.5, a * 366.546875);
            d.closePath();
            Kt(d, At, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 361.5, a * 147.546875);
            d.bezierCurveTo(a * 223, a * 226.546875, a * 223, a * 226.546875, a * 84.5, a * 305.546875);
            d.closePath();
            Kt(d, T, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 379.5, a * 225.546875);
            d.bezierCurveTo(a * 221, a * 225.546875, a * 221, a * 225.546875, a * 62.5, a * 225.546875);
            d.closePath();
            Kt(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 90.5, a * 147.546875);
            d.bezierCurveTo(a * 226.5, a * 226.546875, a * 226.5, a * 226.546875, a * 362.5, a * 305.546875);
            d.closePath();
            Kt(d, Mq, b[0], 4);
            return c;
        }(0.6, ["#FFFFFF"]));
        ΔⲆ[299] = [];
        ΔⲆ[299][0] = Ga(Rb(1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
        ΔⲆ[299][1] = Ga(Rb(1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
        ΔⲆ[10] = [];
        ΔⲆ[10][0] = Ga(zu(0.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
        ΔⲆ[10][1] = Ga(zu(0.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"]));
        ΔⲆ[11] = [];
        ΔⲆ[11][0] = Ga(Cu(0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
        ΔⲆ[11][1] = Ga(Cu(0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
        ΔⲆ[40] = [];
        ΔⲆ[40][0] = Ga(pu(0.63, true, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
        ΔⲆ[40][1] = Ga(pu(0.63, kk, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
        ΔⲆ[41] = [];
        ΔⲆ[41][0] = Ga(md(0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
        ΔⲆ[41][1] = Ga(md(0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
        ΔⲆ[42] = [];
        ΔⲆ[42][0] = Ga(dd(0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
        ΔⲆ[42][1] = Ga(dd(0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
        ΔⲆ[716] = [];
        ΔⲆ[716][0] = Ga(Om(0.42, vh, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
        ΔⲆ[716][1] = Ga(Om(0.42, Uq, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
        ΔⲆ[720] = [];
        ΔⲆ[720][0] = Ga(Lm(0.9, ["#e4c027"]));
        ΔⲆ[720][1] = Ga(Lm(0.9, ["#D8E57F"]));
        ΔⲆ[144] = [];
        ΔⲆ[144][0] = Ga(km(0.42, Uq, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
        ΔⲆ[144][1] = Ga(km(0.42, Ik, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
        ΔⲆ[722] = Ga(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 149;
            c.height = a * 356;
            d.save();
            d.translate(a * 74.5, a * 177.5);
            Lt(d, a * -57.5, a * -161.5, a * 100, a * 323, a * 10);
            d.restore();
            Kt(d, b[0], b[1], a * 4);
            d.save();
            d.translate(a * 74.5, a * 177.5);
            Lt(d, a * -57.5, a * 50.5, a * 100, a * 105, a * 10);
            d.restore();
            Kt(d, b[6], b[1], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 125);
            d.bezierCurveTo(a * 74.5, a * 125, a * 118, a * 125, a * 118, a * 125);
            d.closePath();
            Kt(d, b[2], b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 120);
            d.bezierCurveTo(a * 74.5, a * 120, a * 74.5, a * 120, a * 118, a * 120);
            d.closePath();
            Kt(d, b[3], b[3], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 228);
            d.bezierCurveTo(a * 75, a * 228.5, a * 118, a * 228.5, a * 118, a * 229);
            d.closePath();
            Kt(d, b[2], b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 224);
            d.bezierCurveTo(a * 75, a * 224, a * 118, a * 224, a * 118, a * 224);
            d.closePath();
            Kt(d, b[3], b[3], a * 10);
            d.save();
            d.translate(a * 72, a * 68.5);
            Lt(d, a * -41.5, a * -36.5, a * 73, a * 73, a * 13);
            d.restore();
            Kt(d, b[4]);
            d.save();
            d.translate(a * 72, a * 175.5);
            Lt(d, a * -41.5, a * -38.5, a * 73, a * 73, a * 13);
            d.restore();
            Kt(d, b[4]);
            d.save();
            d.translate(a * 72, a * 279.5);
            Lt(d, a * -41.5, a * -40.5, a * 73, a * 73, a * 13);
            d.restore();
            Kt(d, b[4]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 338);
            d.bezierCurveTo(a * 75, a * 338, a * 118, a * 338, a * 118, a * 338);
            d.closePath();
            Kt(d, b[2], b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 333);
            d.bezierCurveTo(a * 75, a * 333, a * 118, a * 333, a * 118, a * 333);
            d.closePath();
            Kt(d, b[3], b[3], a * 10);
            return c;
        }(1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
        ΔⲆ[407] = [];
        ΔⲆ[407][0] = Ga(gu(0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
        ΔⲆ[407][1] = Ga(gu(0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
        ΔⲆ[119] = [];
        ΔⲆ[119][0] = Ga(iu(0.5, oq, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
        ΔⲆ[119][1] = Ga(iu(0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
        ΔⲆ[411] = Ga(function (a, b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            d.width = a * 118;
            d.height = a * 129;
            e.save();
            e.translate(a * 90, a * 90);
            Lt(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
            e.restore();
            Kt(e, c[0], c[1], 4);
            return d;
        }(0.8, 0, ["#5f6061", "#939393"]));
        ΔⲆ[412] = Ub(1, [{
            f: sd,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 2.5,
            c: ["#4d2d14", "#432516"]
        }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
        ΔⲆ[198] = [];
        ΔⲆ[198][0] = Ga(Au(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
        ΔⲆ[198][1] = Ga(Au(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
        ΔⲆ[913] = [];
        ΔⲆ[913][0] = Ga(lu(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
        ΔⲆ[913][1] = Ga(lu(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
        ΔⲆ[18] = [];
        ΔⲆ[18][0] = Ga(ab(3, tu(0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
        ΔⲆ[18][1] = Ga(ab(3, tu(0.7, wr, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
        ΔⲆ[12] = [];
        ΔⲆ[12][0] = Ga(ab(3, uu(0.7, Uq, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
        ΔⲆ[12][1] = Ga(ab(3, uu(0.7, Po, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
        ΔⲆ[13] = [];
        ΔⲆ[13][0] = Ga(ab(3, vu(0.65, sn, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
        ΔⲆ[13][1] = Ga(ab(3, vu(0.65, wr, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
        ΔⲆ[14] = [];
        ΔⲆ[14][0] = Ga(ab(3, wu(0.67, Zj, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
        ΔⲆ[14][1] = Ga(ab(3, wu(0.67, h, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
        ΔⲆ[15] = [];
        ΔⲆ[15][0] = Ga(ab(3, Bu(0.67, Ya, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
        ΔⲆ[15][1] = Ga(ab(3, Bu(0.67, ii, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
        ΔⲆ[33] = [];
        ΔⲆ[33][0] = Ga(ab(3, nu(0.67, Kh, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
        ΔⲆ[33][1] = Ga(ab(3, nu(0.67, Tl, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
        ΔⲆ[16] = [];
        ΔⲆ[16][0] = Ga(ab(3, su(1, true, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
        ΔⲆ[16][1] = Ga(ab(3, su(1, vh, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
        ΔⲆ[35] = [];
        ΔⲆ[35][0] = Ga(ab(3, Ku(1, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
        ΔⲆ[35][1] = Ga(ab(3, Ku(1, true, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
        ΔⲆ[55] = [];
        ΔⲆ[55][0] = Ga(ab(3, Tc(0.5, h, ["#0d1b1c", "#939393", "#5f6061"])));
        ΔⲆ[55][1] = Ga(ab(3, Tc(0.5, true, ["#030d14", "#485e66", "#1f343f"])));
        ΔⲆ[45] = [];
        ΔⲆ[45][0] = Ga(ab(3, Ym(1, true, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
        ΔⲆ[45][1] = Ga(ab(3, Ym(1, ii, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
        ΔⲆ[36] = [];
        ΔⲆ[36][0] = Ga(ab(3, Ku(1, Ya, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
        ΔⲆ[36][1] = Ga(ab(3, Ku(1, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
        ΔⲆ[37] = [];
        ΔⲆ[37][0] = Ga(ab(3, Ku(1, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
        ΔⲆ[37][1] = Ga(ab(3, Ku(1, Bj, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
        ΔⲆ[38] = [];
        ΔⲆ[38][0] = Ga(ab(3, Ku(1, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
        ΔⲆ[38][1] = Ga(ab(3, Ku(1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
        ΔⲆ[148] = [];
        ΔⲆ[148][0] = Ga(Fm(0.55, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
        ΔⲆ[148][1] = Ga(Fm(0.55, 0, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
        ΔⲆ[536] = [];
        ΔⲆ[536].push(Ga(Fm(0.8, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
        ΔⲆ[536].push(Ga(Fm(0.8, 0, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
        ΔⲆ[536].push(Ga(Fm(0.8, 0, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
        ΔⲆ[538] = [];
        ΔⲆ[538].push(ΔⲆ[536][0]);
        ΔⲆ[538].push(ΔⲆ[536][0]);
        ΔⲆ[538].push(ΔⲆ[536][0]);
        ΔⲆ[158] = [];
        ΔⲆ[158][0] = Ga(jm(0.06, false, ["#141414", "#c4a23a", "#816511"]));
        ΔⲆ[158][1] = Ga(jm(0.06, false, ["#030d14", "#2b6664", "#133d3c"]));
        ΔⲆ[535] = [];
        ΔⲆ[535].push(Ga(jm(0.08, false, ["#141414", "#c4a23a", "#816511"])));
        ΔⲆ[535].push(Ga(jm(0.08, og, ["#141414", "#e2bd4e", "#a38018"])));
        ΔⲆ[535].push(Ga(jm(0.08, f, ["#141414", "#b0902e", "#634d09"])));
        ΔⲆ[149] = Ub(1.5, [{
            f: dc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#141414", "#178a99", "#0a6372", "#03282e"]
        }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
        ΔⲆ[526] = [];
        ΔⲆ[526][0] = Ga($m(0.8, ss, ["#347f93", "#54a4ba"]));
        ΔⲆ[526][1] = Ga($m(0.8, kk, ["#98ede3", "#94f2e7"]));
        ΔⲆ[527] = [];
        ΔⲆ[527][0] = Ga(ec(0.8, h, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
        ΔⲆ[527][1] = Ga(ec(0.8, Po, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
        ΔⲆ[528] = [];
        ΔⲆ[528][0] = Ga(Vm(0.8, true, ["#a9e4ed", "#86d4e0"]));
        ΔⲆ[528][1] = Ga(Vm(0.8, Zj, ["#83ddd4", "#485e66"]));
        ΔⲆ[151] = [];
        ΔⲆ[151][0] = Ga(Nm(0.8, true, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
        ΔⲆ[151][1] = Ga(Nm(0.8, true, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
        ΔⲆ[1192] = [];
        ΔⲆ[1192][0] = ⲆⲆ.ᐃⲆⲆⵠⲆΔᐃ;
        ΔⲆ[1192][1] = ⲆⲆ.ⲆⲆᐃᐃᐃⲆⲆ;
        ΔⲆ[1193] = [];
        ΔⲆ[1193][0] = ⲆⲆ.ΔΔⲆⲆⵠΔⲆ;
        ΔⲆ[1193][1] = ⲆⲆ.ΔⵠⵠⵠΔᐃⲆ;
        ΔⲆ[1194] = [];
        ΔⲆ[1194][0] = ⲆⲆ.ᐃⵠⵠᐃⵠᐃᐃ;
        ΔⲆ[1194][1] = ⲆⲆ.ⲆⲆΔⲆⵠⵠᐃ;
        ΔⲆ[152] = [];
        ΔⲆ[152][0] = ⲆⲆ.ⵠᐃⵠΔⵠᐃΔ;
        ΔⲆ[152][1] = ⲆⲆ.ᐃⲆᐃΔⵠΔⵠ;
        ΔⲆ[1198] = [];
        ΔⲆ[1198][0] = ⲆⲆ.ⵠΔⵠΔⵠΔᐃ;
        ΔⲆ[1198][1] = ⲆⲆ.ⵠΔΔᐃⲆΔᐃ;
        ΔⲆ[153] = [];
        ΔⲆ[153][0] = ⲆⲆ.ⵠⵠᐃⵠΔⲆⲆ;
        ΔⲆ[153][1] = ⲆⲆ.ᐃⲆⵠⲆⲆⵠⲆ;
        ΔⲆ[1202] = [];
        ΔⲆ[1202][0] = ⲆⲆ.ᐃⵠⲆᐃᐃᐃⵠ;
        ΔⲆ[1202][1] = ⲆⲆ.ⵠⲆⲆΔⵠⵠⵠ;
        ΔⲆ[154] = [];
        ΔⲆ[154][0] = ⲆⲆ.ᐃΔᐃⵠⵠΔⲆ;
        ΔⲆ[154][1] = ⲆⲆ.ⲆΔΔᐃᐃΔⵠ;
        ΔⲆ[1206] = [];
        ΔⲆ[1206][0] = ⲆⲆ.ᐃΔⵠⵠᐃᐃⵠ;
        ΔⲆ[1206][1] = ⲆⲆ.ⵠᐃΔⵠⲆⲆⵠ;
        ΔⲆ[155] = [];
        ΔⲆ[155][0] = ⲆⲆ.ΔⵠΔⲆⵠⵠΔ;
        ΔⲆ[155][1] = ⲆⲆ.ⲆΔΔⲆΔⲆΔ;
        ΔⲆ[1210] = [];
        ΔⲆ[1210][0] = ⲆⲆ.ᐃΔᐃᐃΔᐃΔ;
        ΔⲆ[1210][1] = ⲆⲆ.ᐃⵠⵠᐃᐃⵠᐃ;
        ΔⲆ[156] = [];
        ΔⲆ[156][0] = ⲆⲆ.ΔⲆⲆΔᐃΔⲆ;
        ΔⲆ[156][1] = ⲆⲆ.ⲆᐃⲆⵠⲆᐃᐃ;
        ΔⲆ[1214] = [];
        ΔⲆ[1214][0] = ⲆⲆ.ᐃⵠᐃΔⵠⵠᐃ;
        ΔⲆ[1214][1] = ⲆⲆ.ᐃΔⲆⲆⲆⲆᐃ;
        ΔⲆ[157] = [];
        ΔⲆ[157][0] = ⲆⲆ.ᐃΔΔΔΔΔᐃ;
        ΔⲆ[157][1] = ⲆⲆ.ⵠΔⲆⲆⵠⵠⵠ;
        ΔⲆ[245] = [];
        ΔⲆ[245][0] = ⲆⲆ.ⲆᐃᐃⵠΔⵠᐃ;
        ΔⲆ[245][1] = ⲆⲆ.ΔⲆⲆⲆⵠⵠΔ;
        ΔⲆ[246] = ⲆⲆ.ⵠΔⵠΔΔΔᐃ;
        ΔⲆ[159] = [];
        ΔⲆ[159][0] = Ga(Sm(0.75, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
        ΔⲆ[159][1] = Ga(Sm(0.75, ii, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
        ΔⲆ[558] = Ga(ic(0.3, ["#092813", "#1f773d"], 0));
        ΔⲆ[559] = Ga(ic(0.3, ["#092813", "#1f773d"], 1));
        ΔⲆ[885] = Ga(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 60;
            c.height = a * 60;
            d.translate(a * -25, a * -25);
            d.translate(0, a * 5);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 24, a * 50);
            d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
            d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
            d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
            d.closePath();
            Kt(d, b[0]);
            d.translate(0, a * -5);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 24, a * 50);
            d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
            d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
            d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
            d.closePath();
            Kt(d, b[1]);
            return c;
        }(0.6, ["#092813", "#1f773d"]));
        ΔⲆ[556] = [];
        ΔⲆ[556].push(Ga(Km(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
        ΔⲆ[556].push(Ga(Km(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
        ΔⲆ[556].push(Ga(Km(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
        ΔⲆ[560] = [];
        var b = Ga(Km(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
        ΔⲆ[560].push(b);
        ΔⲆ[560].push(b);
        ΔⲆ[560].push(b);
        ΔⲆ[557] = [];
        ΔⲆ[557].push(Ga(Km(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
        ΔⲆ[557].push(Ga(Km(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
        ΔⲆ[557].push(Ga(Km(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
        ΔⲆ[681] = Ga(function (b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            var f = b * 170;
            var g = b * 172;
            var a = f / 2;
            var i = g / 2;
            d.width = f;
            d.height = g;
            e.translate(a, i);
            e.save();
            for (var j = 0; j < 10; j++) {
                e.rotate(Math.PI / 5);
                e.save();
                e.translate(b * 65, 0);
                ob(e, 3, b * 18, b * 4);
                Kt(e, c[0]);
                e.restore();
            }
            e.restore();
            Nt(e, 0, 0, b * 40);
            Kt(e, undefined, c[0], b * 6);
            Nt(e, 0, 0, b * 20);
            Kt(e, c[0]);
            return d;
        }(0.3, ["#FFFFFF"]));
        ΔⲆ[794] = Ga(function (b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            var f = b * 130;
            var g = b * 142;
            var a = f / 2;
            var h = g / 2;
            d.width = f;
            d.height = g;
            Nt(e, a, h, b * 40);
            Kt(e, undefined, c[0], b * 7);
            Nt(e, a, h, b * 30);
            Kt(e, undefined, c[0], b * 7);
            Nt(e, a, h, b * 20);
            Kt(e, c[0]);
            return d;
        }(0.3, ["#FFFFFF"]));
        ΔⲆ[562] = Ga(ic(0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
        ΔⲆ[667] = Ga(ab(Math.PI / 5, function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 316;
            c.height = a * 365;
            d.save();
            d.translate(a * 156.07142639160156, a * 51.81248474121094);
            d.rotate(0);
            Lt(d, a * -21.5, a * -34, a * 43, a * 68, a * 8);
            d.restore();
            Kt(d, b[0], b[0], a * 15);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 126.57142639160156, a * 67.38392639160156);
            d.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
            d.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
            d.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
            d.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
            d.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
            d.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
            d.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
            d.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
            d.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
            d.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
            d.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
            d.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
            d.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
            d.closePath();
            Kt(d, b[0], b[0], a * 15);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 125.57142639160156, a * 156.66963958740234);
            d.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
            d.closePath();
            Kt(d, b[0], b[0], a * 15);
            return c;
        }(0.2, ["#FFFFFF"])));
        ΔⲆ[43] = [];
        ΔⲆ[43][0] = Ga(Cc(0.85, Zj, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
        ΔⲆ[43][1] = Ga(Cc(0.85, true, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
        ΔⲆ[561] = [];
        ΔⲆ[561].push(Ga(Km(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
        ΔⲆ[561].push(Ga(Km(0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
        ΔⲆ[561].push(Ga(Km(0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
        ΔⲆ[83] = [];
        ΔⲆ[83][0] = Ga(mc(0.37, Zj, ["#2a2938", "#242330", "#313041"]));
        ΔⲆ[83][1] = Ga(mc(0.37, wr, ["#1b1e30", "#161921", "#252f3e"]));
        ΔⲆ[85] = [];
        ΔⲆ[85][0] = Ga(xm(0.17, 0, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
        ΔⲆ[85][1] = Ga(xm(0.17, 0, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
        ΔⲆ[86] = [];
        ΔⲆ[86][0] = Ga(Jm(0.55, true, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
        ΔⲆ[86][1] = Ga(Jm(0.55, wr, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
        ΔⲆ[84] = [];
        ΔⲆ[84][0] = Ga(Jm(0.55, true, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
        ΔⲆ[84][1] = Ga(Jm(0.55, ii, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
        ΔⲆ[77] = [];
        ΔⲆ[77][0] = Ga(Dm(0.2, Uq, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
        ΔⲆ[77][1] = Ga(Dm(0.2, kk, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
        ΔⲆ[78] = [];
        ΔⲆ[78][0] = Ga(Dm(0.2, wr, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
        ΔⲆ[78][1] = Ga(Dm(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
        ΔⲆ[79] = [];
        ΔⲆ[79][0] = Ga(Dm(0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
        ΔⲆ[79][1] = Ga(Dm(0.2, ul, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
        ΔⲆ[61] = [];
        ΔⲆ[61][0] = Ga(mu(0.24, true, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
        ΔⲆ[61][1] = Ga(mu(0.24, true, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
        ΔⲆ[59] = [];
        ΔⲆ[59][0] = Ga(Ou(0.32, 0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
        ΔⲆ[59][1] = Ga(Ou(0.32, 0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
        ΔⲆ[62] = [];
        ΔⲆ[62][0] = Ga(ab(3, lc(0.9, true, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
        ΔⲆ[62][1] = Ga(ab(3, lc(0.9, true, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
        ΔⲆ[750] = [];
        ΔⲆ[750][0] = Ga(ab(3, lc(1, true, [undefined, undefined, undefined, "#c8efef", "#c8efef"])));
        ΔⲆ[750][1] = Ga(ab(3, lc(1, true, [undefined, undefined, Uj, "#87d2e6", "#87d2e6"])));
        ΔⲆ[755] = [];
        ΔⲆ[755].push(Ga(gc(0.3, Ya, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
        ΔⲆ[755].push(Ga(gc(0.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1)));
        ΔⲆ[755].push(Ga(gc(0.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
        ΔⲆ[795] = [];
        ΔⲆ[795].push(Ga(nc(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
        ΔⲆ[795].push(Ga(nc(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
        ΔⲆ[795].push(Ga(nc(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
        ΔⲆ[782] = [];
        ΔⲆ[782].push(Ga(fd(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1)));
        ΔⲆ[782].push(Ga(fd(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1)));
        ΔⲆ[782].push(Ga(fd(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
        ΔⲆ[783] = [];
        ΔⲆ[783].push(Ga(fd(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0)));
        ΔⲆ[783].push(Ga(fd(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0)));
        ΔⲆ[783].push(Ga(fd(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0)));
        ΔⲆ[46] = [];
        ΔⲆ[46][0] = Ga(ab(3, Hm(0.7, true, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
        ΔⲆ[46][1] = Ga(ab(3, Hm(0.7, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
        ΔⲆ[50] = [];
        ΔⲆ[50][0] = Ga(ab(3, Hm(0.7, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
        ΔⲆ[50][1] = Ga(ab(3, Hm(0.7, h, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
        ΔⲆ[51] = [];
        ΔⲆ[51][0] = Ga(ab(3, Hm(0.7, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
        ΔⲆ[51][1] = Ga(ab(3, Hm(0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
        ΔⲆ[52] = [];
        ΔⲆ[52][0] = Ga(ab(3, Hm(0.7, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
        ΔⲆ[52][1] = Ga(ab(3, Hm(0.7, h, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
        ΔⲆ[592] = [];
        ΔⲆ[592].push(Ga(Zm(0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
        ΔⲆ[592].push(Ga(Zm(0.7, ["#524712", "#c7b11c", "#d9ba18"])));
        ΔⲆ[592].push(Ga(Zm(0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
        ΔⲆ[326] = Ga(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 188;
            c.height = a * 190;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
            d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
            d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
            d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
            d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
            d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
            d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
            d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
            d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
            d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
            d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
            d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
            d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
            d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
            d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
            d.closePath();
            Kt(d, b[0], b[0], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
            d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
            d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
            d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
            d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
            d.closePath();
            Kt(d, b[0], b[0], a * 2);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
            d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
            d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
            d.closePath();
            Kt(d, b[0], b[0], a * 2);
            return c;
        }(1.1, ["#BB0000"]));
        ΔⲆ[333] = Ga(ab(Math.PI, function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 238;
            c.height = a * 230;
            d.translate(a * -93, a * -110);
            Nt(d, a * 213.5, a * 256.75, a * 75);
            Kt(d, b);
            Nt(d, a * 213.5, a * 175.75, a * 25);
            Kt(d, b);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 156.5, a * 137.75);
            d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 217.5, a * 178.75);
            d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 130.5, a * 124.75);
            d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 214.5, a * 183.75);
            d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 107.5, a * 213.75);
            d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 212.5, a * 187.75);
            d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 102.5, a * 258.75);
            d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 214.5, a * 192.75);
            d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 219.5, a * 158.75);
            d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
            d.closePath();
            d.lineWidth = a * 10;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 210.5, a * 160.75);
            d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
            d.closePath();
            d.lineWidth = a * 10;
            d.strokeStyle = b;
            d.stroke();
            return c;
        }(0.9, "#BB0000")));
        ΔⲆ[23] = [];
        ΔⲆ[23][0] = Ga(Cm(0.55, Bj, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
        ΔⲆ[23][1] = Ga(Cm(0.55, true, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
        ΔⲆ[58] = [];
        ΔⲆ[58][0] = Ga(zm(0.55, Zj, ["#252525", "#73583e", "#573f29", "#7d6144"]));
        ΔⲆ[58][1] = Ga(zm(0.55, true, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
        ΔⲆ[25] = [];
        ΔⲆ[25][0] = Ga(pm(0.6, wr, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
        ΔⲆ[25][1] = Ga(pm(0.6, true, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
        ΔⲆ[26] = [];
        ΔⲆ[26][0] = Ga(Qm(0.58, 0, ["#dbce71", "#b29c32", "#c4bc51"]));
        ΔⲆ[26][1] = Ga(Qm(0.58, 0, ["#2b7c57", "#15543c", "#1a7961"]));
        ΔⲆ[27] = [];
        ΔⲆ[27][0] = Ga(bc(0.69, true, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
        ΔⲆ[27][1] = Ga(bc(0.69, true, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
        ΔⲆ[413] = [];
        ΔⲆ[413][0] = [];
        ΔⲆ[413][1] = [];
        ΔⲆ[413][0].push(Ga(Nu(1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
        ΔⲆ[413][0].push(Ga(im(1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
        ΔⲆ[413][0].push(Ga(em(1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
        ΔⲆ[413][1].push(Ga(Nu(1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
        ΔⲆ[413][1].push(Ga(im(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
        ΔⲆ[413][1].push(Ga(em(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
        ΔⲆ[449] = [];
        ΔⲆ[449][0] = Ga(sm(1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
        ΔⲆ[449][1] = Ga(sm(1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
        ΔⲆ[451] = [];
        ΔⲆ[451][0] = Ga(fm(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
        ΔⲆ[451][1] = Ga(fm(1, ["#050505", "#327570", "#021724", "#200333"]));
        ΔⲆ[452] = [];
        ΔⲆ[452][0] = Ga(Tm(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
        ΔⲆ[452][1] = Ga(Tm(1, ["#050505", "#327570", "#021724", "#200333"]));
        ΔⲆ[243] = [];
        ΔⲆ[243][0] = [];
        ΔⲆ[243][1] = [];
        ΔⲆ[243][0] = [ⲆⲆ.ⲆᐃΔΔΔΔⵠ, ⲆⲆ.ΔΔⲆΔΔᐃΔ, ⲆⲆ.ΔᐃⵠⲆΔᐃᐃ, ⲆⲆ.ⲆᐃΔᐃΔⲆⲆ, ⲆⲆ.ⲆⲆⵠⵠᐃᐃᐃ, ⲆⲆ.ⵠⵠΔᐃΔⲆᐃ, ⲆⲆ.ⲆΔᐃΔΔΔⵠ, ⲆⲆ.ⲆⵠⵠⲆΔⲆᐃ, ⲆⲆ.ⵠⵠᐃⵠᐃⵠᐃ, ⲆⲆ.ⲆⲆΔΔΔⵠⲆ, ⲆⲆ.ΔⵠΔⵠⵠⵠⵠ, ⲆⲆ.ΔΔᐃⲆᐃΔᐃ, ⲆⲆ.ⵠⲆⵠΔⲆᐃΔ, ⲆⲆ.ⵠⲆᐃΔⲆᐃᐃ, ⲆⲆ.ⲆⵠᐃΔⵠⲆᐃ, ⲆⲆ.ⲆⲆⲆΔⲆⲆᐃ, ⲆⲆ.ΔᐃᐃⵠⲆⵠⲆ, ⲆⲆ.ΔᐃⵠᐃⵠᐃΔ, ⲆⲆ.ᐃⲆΔⲆΔⲆᐃ, ⲆⲆ.ⵠⵠᐃⲆⵠⵠⵠ, ⲆⲆ.ⵠⲆⵠⲆᐃⲆⲆ, ⲆⲆ.ΔΔᐃⵠⲆⵠⵠ, ⲆⲆ.ᐃⵠΔΔⲆⵠΔ, ⲆⲆ.ΔⲆᐃⲆΔᐃΔ, ⲆⲆ.ᐃᐃᐃᐃᐃΔᐃ, ⲆⲆ.ⵠⵠΔᐃᐃⵠⵠ, ⲆⲆ.ⵠΔⵠΔⵠᐃΔ, ⲆⲆ.ᐃᐃᐃᐃⵠⲆΔ, ⲆⲆ.ΔᐃᐃΔΔᐃⵠ, ⲆⲆ.ΔⲆⲆⲆᐃΔⲆ, ⲆⲆ.ⲆΔΔᐃⵠⵠᐃ, ⲆⲆ.ⲆⲆⲆⵠᐃᐃΔ, ⲆⲆ.ᐃᐃᐃΔᐃⵠΔ, ⲆⲆ.ΔΔΔᐃᐃᐃΔ, ⲆⲆ.ⵠⲆΔⲆⵠΔⲆ, ⲆⲆ.ⵠΔᐃΔⵠⵠⲆ, ⲆⲆ.ⲆΔⵠⵠΔⵠⲆ, ⲆⲆ.ᐃΔⲆⲆᐃΔᐃ, ⲆⲆ.ᐃΔⵠᐃᐃΔΔ, ⲆⲆ.ⲆⵠⲆⵠⵠΔᐃ, ⲆⲆ.ⲆⵠⲆⵠᐃᐃⵠ, ⲆⲆ.ⵠⵠᐃᐃⲆⲆΔ, ⲆⲆ.ⵠᐃⲆⲆΔⵠⲆ, ⲆⲆ.ΔⵠᐃᐃⵠⲆⲆ, ⲆⲆ.ⲆⵠⵠΔᐃⲆⵠ, ⲆⲆ.ΔⲆⵠⵠᐃΔΔ, ⲆⲆ.ⲆⲆⲆΔⲆⵠΔ, ⲆⲆ.ᐃΔⵠⵠⲆΔΔ, ⲆⲆ.ΔΔⲆⲆΔΔⲆ, ⲆⲆ.ᐃⵠΔᐃΔᐃΔ, ⲆⲆ.ⲆΔⲆΔΔΔⲆ, ⲆⲆ.ⵠᐃΔⵠⵠⵠᐃ, ⲆⲆ.ΔΔⲆΔⲆΔΔ, ⲆⲆ.ⲆΔⵠΔⲆᐃΔ, ⲆⲆ.ᐃⵠΔⵠⲆΔⲆ, ⲆⲆ.ⲆⲆⲆΔᐃⲆⲆ];
        ΔⲆ[243][1] = [ⲆⲆ.ΔⲆΔᐃᐃᐃⵠ, ⲆⲆ.ᐃⵠⲆⵠΔᐃⵠ, ⲆⲆ.ⲆᐃᐃᐃΔⵠΔ, ⲆⲆ.ΔᐃᐃⲆᐃⵠⵠ, ⲆⲆ.ⵠΔΔⵠᐃᐃⵠ, ⲆⲆ.ⵠᐃⲆΔΔΔᐃ, ⲆⲆ.ᐃΔⲆΔᐃⵠΔ, ⲆⲆ.ᐃⵠΔΔΔⵠΔ, ⲆⲆ.ⲆΔᐃΔⲆⵠⲆ, ⲆⲆ.ⲆᐃΔⵠⲆᐃⵠ, ⲆⲆ.ⲆⲆΔΔΔⲆⵠ, ⲆⲆ.ΔⵠᐃⵠⲆᐃⵠ, ⲆⲆ.ⵠⲆⲆⲆᐃᐃᐃ, ⲆⲆ.ΔⲆᐃⵠᐃΔᐃ, ⲆⲆ.ⵠᐃⵠⵠⲆᐃⲆ, ⲆⲆ.ⲆΔⵠᐃᐃᐃⵠ, ⲆⲆ.ᐃⵠᐃⵠⵠᐃᐃ, ⲆⲆ.ΔᐃⵠΔᐃᐃΔ, ⲆⲆ.ΔΔⵠΔᐃⵠⲆ, ⲆⲆ.ΔⵠⲆᐃΔᐃΔ, ⲆⲆ.ⲆⵠᐃⵠΔΔⲆ, ⲆⲆ.ᐃᐃⲆᐃⵠᐃᐃ, ⲆⲆ.ᐃⲆⵠΔⵠᐃⲆ, ⲆⲆ.ᐃᐃᐃⲆΔᐃᐃ, ⲆⲆ.ⵠⲆᐃΔⵠⵠΔ, ⲆⲆ.ᐃⲆᐃᐃⲆⵠΔ, ⲆⲆ.ⲆⲆⵠⵠᐃⵠΔ, ⲆⲆ.ⵠⲆⵠΔᐃⲆⵠ, ⲆⲆ.ⲆⵠⲆΔᐃⲆᐃ, ⲆⲆ.ᐃⲆᐃⵠᐃᐃΔ, ⲆⲆ.ⲆⵠⵠΔⵠᐃⲆ, ⲆⲆ.ᐃΔⵠΔⲆᐃΔ, ⲆⲆ.ᐃⲆᐃⵠⲆⵠΔ, ⲆⲆ.ⵠⵠⵠᐃⵠⵠⵠ, ⲆⲆ.ᐃΔⵠⵠᐃⵠΔ, ⲆⲆ.ⵠΔΔᐃⲆΔΔ, ⲆⲆ.ΔⲆΔΔⵠᐃⲆ, ⲆⲆ.ᐃᐃⵠⵠᐃᐃᐃ, ⲆⲆ.ΔⵠΔⵠⲆⲆⵠ, ⲆⲆ.ⲆΔᐃΔΔᐃᐃ, ⲆⲆ.ⵠⲆᐃⲆᐃᐃᐃ, ⲆⲆ.ⵠΔᐃⲆᐃᐃⵠ, ⲆⲆ.ΔΔᐃΔⲆΔᐃ, ⲆⲆ.ΔⵠⲆᐃᐃᐃⲆ, ⲆⲆ.ΔᐃᐃⵠᐃⲆⲆ, ⲆⲆ.ΔⲆᐃⲆᐃⵠᐃ, ⲆⲆ.ⵠΔᐃΔᐃⵠᐃ, ⲆⲆ.ⲆΔⵠΔΔⲆⵠ, ⲆⲆ.ΔⲆⲆᐃⵠⲆⵠ, ⲆⲆ.ⵠⵠᐃⵠⲆΔⵠ, ⲆⲆ.ⲆΔⵠΔⵠΔⵠ, ⲆⲆ.ⲆⲆⲆⵠⲆⲆⵠ, ⲆⲆ.ⲆⵠⲆⲆΔⵠⲆ, ⲆⲆ.ΔᐃᐃΔΔⵠΔ, ⲆⲆ.ᐃⲆᐃΔΔⵠᐃ, ⲆⲆ.ⲆⵠᐃΔᐃᐃⵠ];
        ΔⲆ[676] = [];
        ΔⲆ[676][0] = [];
        ΔⲆ[676][1] = [];
        ΔⲆ[676][0].push(Ga(jd(1.1, Ig, ["#252B28", "#747471", "#83827e"], 0)));
        ΔⲆ[676][0].push(Ga(jd(0.9, pl, ["#252B28", "#747471", "#83827e"], 1)));
        ΔⲆ[676][0].push(Ga(jd(1, as, ["#252B28", "#747471", "#83827e"], 2)));
        ΔⲆ[676][0].push(Ga(jd(0.9, false, ["#252B28", "#747471", "#83827e"], 2)));
        ΔⲆ[676][1].push(Ga(jd(1.1, Ia, ["#030d14", "#123335", "#183f3f"], 0)));
        ΔⲆ[676][1].push(Ga(jd(0.9, false, ["#030d14", "#123335", "#183f3f"], 1)));
        ΔⲆ[676][1].push(Ga(jd(1, false, ["#030d14", "#123335", "#183f3f"], 2)));
        ΔⲆ[676][1].push(Ga(jd(0.9, zk, ["#030d14", "#123335", "#183f3f"], 2)));
        ΔⲆ[679] = [];
        ΔⲆ[679][0] = [];
        ΔⲆ[679][1] = [];
        ΔⲆ[679][0].push(Ga(jd(1.1, Ik, ["#252B28", "#58645F", "#75827D"], 2)));
        ΔⲆ[679][0].push(Ga(jd(0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
        ΔⲆ[679][0].push(Ga(jd(1, true, ["#252B28", "#58645F", "#75827D"], 2)));
        ΔⲆ[679][0].push(Ga(jd(0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
        ΔⲆ[679][1].push(Ga(jd(1.1, Kh, ["#030d14", "#123335", "#183f3f"], 2)));
        ΔⲆ[679][1].push(Ga(jd(0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
        ΔⲆ[679][1].push(Ga(jd(1, true, ["#030d14", "#123335", "#183f3f"], 2)));
        ΔⲆ[679][1].push(Ga(jd(0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
        ΔⲆ[415] = [];
        ΔⲆ[415][0] = [];
        ΔⲆ[415][1] = [];
        ΔⲆ[415][0].push(Ga(Hd(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ΔⲆ[415][0].push(Ga(Hd(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ΔⲆ[415][0].push(Ga(Hd(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        ΔⲆ[415][1].push(Ga(Hd(1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
        ΔⲆ[415][1].push(Ga(Hd(1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
        ΔⲆ[415][1].push(Ga(Hd(1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
        ΔⲆ[416] = [];
        ΔⲆ[416][0] = [];
        ΔⲆ[416][1] = [];
        ΔⲆ[416][0].push(Ga(Od(1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
        ΔⲆ[416][0].push(Ga(Od(0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
        ΔⲆ[416][0].push(Ga(Od(0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
        ΔⲆ[416][1].push(Ga(Od(1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
        ΔⲆ[416][1].push(Ga(Od(0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
        ΔⲆ[416][1].push(Ga(Od(0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
        ΔⲆ[121] = [];
        ΔⲆ[121][0] = [];
        ΔⲆ[121][1] = [];
        ΔⲆ[121][0].push(Ga(Ru(1.7, k, ["#1d051e", "#c27add", "#cd98e5"])));
        ΔⲆ[121][0].push(Ga(Ru(1.5, true, ["#1d051e", "#c27add", "#cd98e5"])));
        ΔⲆ[121][0].push(Ga(Ru(1.3, true, ["#1d051e", "#c27add", "#cd98e5"])));
        ΔⲆ[121][1].push(Ga(Ru(1.7, ss, ["#1d051e", "#41aaa0", "#5cccc4"])));
        ΔⲆ[121][1].push(Ga(Ru(1.5, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
        ΔⲆ[121][1].push(Ga(Ru(1.3, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
        ΔⲆ[678] = [];
        ΔⲆ[678][0] = [];
        ΔⲆ[678][1] = [];
        ΔⲆ[678][0].push(Ga(mm(1, ["#2d53c4"])));
        ΔⲆ[678][1].push(Ga(mm(1, ["#2d53c4"])));
        ΔⲆ[696] = [];
        ΔⲆ[696][0] = [];
        ΔⲆ[696][1] = [];
        ΔⲆ[696][0].push(Ga(mm(1, ["#c4912d"])));
        ΔⲆ[696][1].push(Ga(mm(1, ["#c4912d"])));
        ΔⲆ[680] = [];
        ΔⲆ[680][0] = Ga(rm(1, ["#414040"]));
        ΔⲆ[680][1] = Ga(rm(1, ["#153635"]));
        ΔⲆ[508] = [];
        ΔⲆ[508][0] = Ga(Yt(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ΔⲆ[508][1] = Ga(Yt(1, X, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ΔⲆ[509] = [];
        ΔⲆ[509][0] = Ga(Xt(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ΔⲆ[509][1] = Ga(Xt(1, Kn, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ΔⲆ[512] = [];
        ΔⲆ[512][0] = Ga(Xt(1, Ia, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ΔⲆ[512][1] = Ga(Xt(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ΔⲆ[511] = [];
        ΔⲆ[511][0] = Ga(ou(1, zk, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ΔⲆ[511][1] = Ga(ou(1, zk, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ΔⲆ[510] = [];
        ΔⲆ[510][0] = Ga(fu(1, ps, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        ΔⲆ[510][1] = Ga(fu(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        ΔⲆ[419] = [];
        ΔⲆ[419][0] = Ga(hm(0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
        ΔⲆ[419][1] = Ga(hm(0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
        ΔⲆ[445] = [];
        ΔⲆ[445][0] = Ga(vm(0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
        ΔⲆ[445][1] = Ga(vm(0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
        ΔⲆ[259] = [];
        ΔⲆ[818] = [];
        ΔⲆ[516] = [];
        ΔⲆ[819] = [];
        for (a = 0; a < 2; a++) {
            ΔⲆ[259][a] = document.createElement("canvas");
            ΔⲆ[259][a].width = 193;
            ΔⲆ[259][a].height = 193;
            ΔⲆ[818][a] = ΔⲆ[259][a].getContext("2d");
            ΔⲆ[516][a] = document.createElement("canvas");
            ΔⲆ[516][a].width = 600;
            ΔⲆ[516][a].height = 600;
            ΔⲆ[819][a] = ΔⲆ[516][a].getContext("2d");
        }
        ΔⲆ[475] = [];
        ΔⲆ[475][0] = Ga(rm(1, ["#c8e0de"]));
        ΔⲆ[475][1] = Ga(rm(1, ["#147071"]));
        ΔⲆ[476] = [];
        ΔⲆ[476][0] = Ga(rm(1, ["#231912"]));
        ΔⲆ[476][1] = Ga(rm(1, ["#021719"]));
        ΔⲆ[697] = Ga(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 253;
            c.height = a * 192;
            d.save();
            d.translate(a * 37, a * 94);
            Lt(d, a * -7, a * -20, a * 14, a * 37, a * 20);
            d.restore();
            Kt(d, b[0]);
            d.save();
            d.translate(a * 131, a * 94);
            Lt(d, a * -84, a * -67, a * 168, a * 134, a * 20);
            d.restore();
            Kt(d, b[0], b[0], a * 13);
            d.save();
            d.translate(a * 223, a * 94.5);
            Lt(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
            d.restore();
            Kt(d, b[0]);
            d.save();
            d.translate(a * 128.5, a * 170.5);
            Lt(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
            d.restore();
            Kt(d, b[0]);
            return c;
        }(0.5, ["#BB0000"]));
        ΔⲆ[461] = Ga(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 161;
            c.height = a * 190;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 9, a * 93);
            d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
            d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
            d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
            d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
            d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
            d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
            d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
            d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
            d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
            d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
            d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
            d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
            d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
            d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
            d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
            d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
            d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
            d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
            d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
            d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
            d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
            d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
            d.closePath();
            Kt(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 25, a * 63);
            d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
            d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
            d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
            Kt(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 91, a * 53);
            d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
            d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
            d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
            Kt(d, b, b, a * 4);
            return c;
        }(0.9, "#BB0000"));
        ΔⲆ[462] = Ga(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 147;
            c.height = a * 172;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 8, a * 50);
            d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
            d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
            d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
            d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
            d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
            d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
            d.closePath();
            Kt(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 14, a * 57);
            d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
            d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
            Kt(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 93, a * 47);
            d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
            d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
            Kt(d, b, b, a * 4);
            return c;
        }(0.9, "#BB0000"));
        ΔⲆ[463] = Ga(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 271;
            c.height = a * 366;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 133, a * 99);
            d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
            d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
            d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
            d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
            d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
            d.closePath();
            Kt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 73, a * 270);
            d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
            d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
            d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
            d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
            d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
            d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
            d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
            d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
            d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
            d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
            d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
            d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
            d.closePath();
            Kt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 76, a * 252);
            d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
            d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
            d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
            d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
            d.closePath();
            Kt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 84, a * 257);
            d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
            d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
            d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
            d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
            d.closePath();
            Kt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 125, a * 65);
            d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
            d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
            d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
            d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
            d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
            d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
            d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
            d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
            d.closePath();
            Kt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 115, a * 37);
            d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
            d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
            d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
            d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
            d.closePath();
            Kt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 146, a * 34);
            d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
            d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
            d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
            d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
            d.closePath();
            Kt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 143, a * 69);
            d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
            d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
            d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
            d.closePath();
            Kt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 149, a * 92);
            d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
            d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
            d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
            d.closePath();
            Kt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 111, a * 61);
            d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
            d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
            d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
            d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
            d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
            d.closePath();
            Kt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 107, a * 81);
            d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
            d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
            d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
            d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
            d.closePath();
            Kt(d, b[0]);
            return c;
        }(1, ["#BB0000"]));
        ΔⲆ[466] = Ga(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 85;
            c.height = a * 145;
            d.translate(a * -20, a * -95);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 50, a * 105);
            d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
            d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
            d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
            d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
            d.closePath();
            Kt(d, b);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 44, a * 106);
            d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
            d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
            d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
            d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
            d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
            d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
            d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
            d.closePath();
            Kt(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 30, a * 159);
            d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
            d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
            d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
            d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
            d.closePath();
            Kt(d, b);
            return c;
        }(0.8, "#BB0000"));
        ΔⲆ[467] = Ga(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 85;
            c.height = a * 145;
            d.translate(a * -165, a * -95);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 217, a * 103);
            d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
            d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
            d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
            d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
            d.closePath();
            Kt(d, b);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 231, a * 163);
            d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
            d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
            d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
            d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
            d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
            d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
            d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
            d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
            d.closePath();
            Kt(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 234, a * 154);
            d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
            d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
            d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
            d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
            d.closePath();
            Kt(d, b);
            return c;
        }(0.8, "#BB0000"));
        ΔⲆ[322] = Ga(function (b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            var f = b * 85;
            var g = b * 115;
            var a = b * 4;
            d.width = f;
            d.height = g;
            e.translate(b * -130, b * -60);
            e.globalAlpha = 1;
            e.beginPath();
            e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
            e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
            e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
            e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
            e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
            e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
            e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
            e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
            e.closePath();
            Kt(e, c, c, a);
            return d;
        }(0.9, "#BB0000"));
        ΔⲆ[279] = Ga(hb(0.6, "#BB0000"));
        ΔⲆ[280] = Ga(hb(0.6, "#1CE7E0"));
        ΔⲆ[281] = Ga(hb(0.6, "#DBE71C"));
        ΔⲆ[308] = Ga(hb(0.6, "#00BB00"));
        ΔⲆ[602] = [];
        ΔⲆ[602][0] = Ga(rm(1, ["#dac291"]));
        ΔⲆ[602][1] = Ga(rm(1, ["#0D423D"]));
        ΔⲆ[698] = [];
        ΔⲆ[698][0] = Ga(rm(1, ["#dac291"]));
        ΔⲆ[698][1] = Ga(rm(1, ["#0D423D"]));
        ΔⲆ[788] = [];
        ΔⲆ[788][0] = Ga(oc(0.3, Yq, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
        ΔⲆ[788][1] = Ga(oc(0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
        ΔⲆ[182] = [];
        ΔⲆ[182][0] = Ga(oc(0.3, sn, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
        ΔⲆ[182][1] = Ga(oc(0.3, Yq, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
        ΔⲆ[127] = [Ga(hc(1, k, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
        ΔⲆ[128] = [Ga(hc(1, true, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
        ΔⲆ[603] = [];
        ΔⲆ[603][0] = [];
        ΔⲆ[603][1] = [];
        ΔⲆ[603][0].push(Ga(um(1, ["#0B6A84"])));
        ΔⲆ[603][0].push(Ga(om(1, ["#0B6A84"])));
        ΔⲆ[603][0].push(Ga(gm(1, ["#0B6A84"])));
        ΔⲆ[603][0].push(Ga(bm(1, ["#0B6A84"])));
        ΔⲆ[603][0].push(Ga(lm(1, ["#0B6A84"])));
        ΔⲆ[603][0].push(Ga(am(1, ["#0B6A84"])));
        ΔⲆ[603][0].push(Ga(dm(1, ["#0B6A84"])));
        ΔⲆ[603][1].push(Ga(um(1, ["#09373F"])));
        ΔⲆ[603][1].push(Ga(om(1, ["#09373F"])));
        ΔⲆ[603][1].push(Ga(gm(1, ["#09373F"])));
        ΔⲆ[603][1].push(Ga(bm(1, ["#09373F"])));
        ΔⲆ[603][1].push(Ga(lm(1, ["#09373F"])));
        ΔⲆ[603][1].push(Ga(am(1, ["#09373F"])));
        ΔⲆ[603][1].push(Ga(dm(1, ["#09373F"])));
        ΔⲆ[692] = [];
        ΔⲆ[692][0] = [];
        ΔⲆ[692][1] = [];
        ΔⲆ[692][0].push(Ga(Su(1.7, ["#FBEFBC"], 0)));
        ΔⲆ[692][0].push(Ga(Su(1.9, ["#FBEFBC"], 1)));
        ΔⲆ[692][0].push(Ga(Su(1.7, ["#FBEFBC"], 2)));
        ΔⲆ[692][1].push(Ga(Su(1.7, ["#0F4C48"], 0)));
        ΔⲆ[692][1].push(Ga(Su(1.9, ["#0F4C48"], 1)));
        ΔⲆ[692][1].push(Ga(Su(1.7, ["#0F4C48"], 2)));
        ΔⲆ[694] = [];
        ΔⲆ[694][0] = [];
        ΔⲆ[694][1] = [];
        ΔⲆ[694][0].push(Ga(Su(1.8, ["#A9D6D3"], 0)));
        ΔⲆ[694][0].push(Ga(Su(2, ["#A9D6D3"], 1)));
        ΔⲆ[694][0].push(Ga(Su(1.8, ["#A9D6D3"], 2)));
        ΔⲆ[694][1].push(Ga(Su(1.8, ["#115E60"], 0)));
        ΔⲆ[694][1].push(Ga(Su(2, ["#115E60"], 1)));
        ΔⲆ[694][1].push(Ga(Su(1.8, ["#115E60"], 2)));
        ΔⲆ[695] = [];
        ΔⲆ[695][0] = [];
        ΔⲆ[695][1] = [];
        ΔⲆ[695][0].push(Ga(Su(1.9, ["#2A8B9B"], 0)));
        ΔⲆ[695][0].push(Ga(Su(2.1, ["#2A8B9B"], 1)));
        ΔⲆ[695][0].push(Ga(Su(1.9, ["#2A8B9B"], 2)));
        ΔⲆ[695][1].push(Ga(Su(1.9, ["#0F464C"], 0)));
        ΔⲆ[695][1].push(Ga(Su(2.1, ["#0F464C"], 1)));
        ΔⲆ[695][1].push(Ga(Su(1.9, ["#0F464C"], 2)));
        ΔⲆ[693] = [];
        ΔⲆ[693][0] = [];
        ΔⲆ[693][1] = [];
        ΔⲆ[693][0].push(Ga(Wt(0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
        ΔⲆ[693][0].push(Ga(Wt(1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
        ΔⲆ[693][0].push(Ga(Wt(1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
        ΔⲆ[693][1].push(Ga(Wt(0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
        ΔⲆ[693][1].push(Ga(Wt(1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
        ΔⲆ[693][1].push(Ga(Wt(1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
        ΔⲆ[637] = [];
        ΔⲆ[637][0] = Ga(yc(0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
        ΔⲆ[637][1] = Ga(yc(0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
        ΔⲆ[687] = Ga(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 376;
            c.height = a * 371;
            d.globalAlpha = 1;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 191.633544921875, a * 123.98580932617188);
            d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
            d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
            d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
            d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
            d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
            d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
            d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
            d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
            d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
            d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
            d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
            d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
            d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
            d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
            d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
            d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
            d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
            d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
            d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
            d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
            d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
            d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
            d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
            d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
            d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
            d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
            d.closePath();
            Kt(d, b[0], b[0], a * 12);
            return c;
        }(0.8, ["#B6222A"]));
        ΔⲆ[673] = [];
        ΔⲆ[673][0] = Ga(zc(0.8, oq, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
        ΔⲆ[673][1] = Ga(zc(0.8, Tl, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
        ΔⲆ[688] = Ga(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 158;
            c.height = a * 201;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 96.5, a * 76.421875);
            d.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
            d.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
            d.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
            d.closePath();
            Kt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 61.5, a * 78.421875);
            d.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
            d.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
            d.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
            d.closePath();
            Kt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 116.5, a * 127.421875);
            d.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
            d.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
            d.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
            d.closePath();
            Kt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 41.5, a * 134.421875);
            d.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
            d.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
            d.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
            d.closePath();
            Kt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 78.5, a * 51.921875);
            d.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
            d.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
            d.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
            d.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
            d.closePath();
            Kt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 72.5, a * 72.421875);
            d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
            d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
            d.closePath();
            Kt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 42.5, a * 163.421875);
            d.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
            d.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
            d.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
            d.closePath();
            Kt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 79.5, a * 61.421875);
            d.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
            d.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
            d.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
            d.closePath();
            Kt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 72.5, a * 72.421875);
            d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
            d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
            d.closePath();
            Kt(d, b[0], b[0], a * 10);
            return c;
        }(0.8, ["#B6222A"]));
        ΔⲆ[902] = [];
        ΔⲆ[902][0] = Ga(Pb(0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
        ΔⲆ[902][1] = Ga(Pb(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
        ΔⲆ[903] = [];
        ΔⲆ[903][0] = Ga(Pb(0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
        ΔⲆ[903][1] = Ga(Pb(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
        ΔⲆ[Gr.ᐃⵠΔⲆⲆΔⵠ] = [];
        ΔⲆ[Gr.ᐃⵠΔⲆⲆΔⵠ][0] = Ga(Pb(0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
        ΔⲆ[Gr.ᐃⵠΔⲆⲆΔⵠ][1] = Ga(Pb(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
        ΔⲆ[904] = Ga(kb(0.4, ["#B6222A"]));
        ΔⲆ[905] = Ga(kb(0.4, ["#B6222A"]));
        ΔⲆ[Gr.ⲆΔᐃⵠΔⵠⲆⵠᐃ] = Ga(kb(0.4, ["#B6222A"]));
        ΔⲆ[230] = Ga(xu(0.35, kk, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
        ΔⲆ[229] = Ga(Sd(0.35, true, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
        ΔⲆ[886] = [];
        ΔⲆ[886][0] = Ga(wd(0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
        ΔⲆ[886][1] = Ga(wd(0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
        ΔⲆ[887] = [];
        ΔⲆ[887][0] = Ga(wd(0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
        ΔⲆ[887][1] = Ga(wd(0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
        ΔⲆ[894] = [];
        ΔⲆ[894][0] = Ga(Ed(0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
        ΔⲆ[894][1] = Ga(Ed(0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
        ΔⲆ[895] = [];
        ΔⲆ[895][0] = Ga(Qd(0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
        ΔⲆ[895][1] = Ga(Qd(0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
        ΔⲆ[896] = [];
        ΔⲆ[896][0] = Ga(Ed(0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
        ΔⲆ[896][1] = Ga(Ed(0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
        ΔⲆ[897] = [];
        ΔⲆ[897][0] = Ga(Qd(0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
        ΔⲆ[897][1] = Ga(Qd(0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
        ΔⲆ[888] = Ga(Bd(0.35, ["#B6222A"]));
        ΔⲆ[889] = Ga(Ed(0.35, 0, [Gj, "#B6222A"]));
        ΔⲆ[890] = Ga(Qd(0.35, 0, [undefined, "#B6222A"]));
        ΔⲆ[891] = Ga(Bd(0.35, ["#22E066"]));
        ΔⲆ[892] = Ga(Ed(0.35, 0, [undefined, "#22E066"]));
        ΔⲆ[893] = Ga(Qd(0.35, 0, [undefined, "#22E066"]));
        ΔⲆ[48] = [];
        ΔⲆ[48][0] = Ga(Tt(0.3, true, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
        ΔⲆ[48][1] = Ga(Tt(0.3, h, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
        ΔⲆ[47] = [];
        ΔⲆ[47][0] = Ga(St(0.45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
        ΔⲆ[47][1] = Ga(St(0.45, true, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
        ΔⲆ[141] = [];
        ΔⲆ[141][0] = Ga(Xm(0.63, Po, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
        ΔⲆ[141][1] = Ga(Xm(0.63, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
        ΔⲆ[125] = [];
        ΔⲆ[125][0] = Ga(Pc(1, Kh, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
        ΔⲆ[125][1] = Ga(Pc(1, k, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
        ΔⲆ[221] = [];
        ΔⲆ[221][0] = ⲆⲆ.ⲆⵠᐃΔⵠⲆΔΔⲆ;
        ΔⲆ[221][1] = ⲆⲆ.ΔⵠᐃⲆΔⵠⲆⵠⲆ;
        ΔⲆ[190] = [];
        ΔⲆ[190][0] = Ga(mb(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        ΔⲆ[190][1] = Ga(mb(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
        ΔⲆ[853] = [ΔⲆ[190]];
        ΔⲆ[853][1] = [];
        ΔⲆ[853][2] = [];
        ΔⲆ[853][1][0] = Ga(fb(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        ΔⲆ[853][1][1] = Ga(fb(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
        ΔⲆ[853][2][0] = Ga(zb(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        ΔⲆ[853][2][1] = Ga(zb(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
        ΔⲆ[49] = [];
        ΔⲆ[49][0] = Ga(ab(3 - Math.PI / 2, Am(0.6, ss, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
        ΔⲆ[49][1] = Ga(ab(3 - Math.PI / 2, Am(0.6, true, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
        ΔⲆ[728] = [];
        ΔⲆ[728][0] = Ga(Ob(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
        ΔⲆ[728][1] = Ga(Ob(0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
        ΔⲆ[798] = Ga(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 650;
            c.height = a * 650;
            d.scale(1.9, 1.9);
            d.save();
            d.translate(a * 202.5, a * 147.5);
            Lt(d, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
            d.restore();
            Kt(d, b[4], b[1], a * 12);
            d.save();
            d.translate(a * 203.5, a * 121.5);
            Lt(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
            d.restore();
            Kt(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 203.5, a * 299);
            Lt(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
            d.restore();
            Kt(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 298.5, a * 210);
            Lt(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            Kt(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 108.5, a * 210);
            Lt(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            Kt(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 204, a * 121.5);
            Lt(d, a * -92, a * -9.5, a * 184, a * 19, a * 10);
            d.restore();
            Kt(d, b[3], b[3], a * 10);
            d.save();
            d.translate(a * 197, a * 299);
            Lt(d, a * 85, a * -9, a * -170, a * 18, a * 10);
            d.restore();
            Kt(d, b[3], b[3], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 94, a * 317);
            d.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
            d.closePath();
            Kt(d, Zq, b[1], a * 12);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 279, a * 142);
            d.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
            d.closePath();
            Kt(d, Yl, b[1], a * 12);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 93, a * 106);
            d.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
            d.closePath();
            Kt(d, hj, b[1], a * 12);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 281, a * 282);
            d.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
            d.closePath();
            Kt(d, undefined, b[1], a * 12);
            return c;
        }(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
        ΔⲆ[729] = Ga(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 400;
            c.height = a * 400;
            d.save();
            d.translate(a * 202.5, a * 147.5);
            Lt(d, a * -96.5, a * -21.5, a * 193, a * 43, a * 0);
            d.restore();
            Kt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 202.5, a * 190.5);
            Lt(d, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
            d.restore();
            Kt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 202.5, a * 233.5);
            Lt(d, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
            d.restore();
            Kt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 202.5, a * 275);
            Lt(d, a * 96.5, a * -21, a * -193, a * 42, a * 0);
            d.restore();
            Kt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 203.5, a * 121.5);
            Lt(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
            d.restore();
            Kt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 203.5, a * 299);
            Lt(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
            d.restore();
            Kt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 298.5, a * 210);
            Lt(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            Kt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 108.5, a * 210);
            Lt(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            Kt(d, b[0], b[0], a * 12);
            return c;
        }(0.3, ["#BB0000"]));
        ΔⲆ[658] = Ub(1, [{
            f: Bm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
        }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        ΔⲆ[150] = Ub(1.5, [{
            f: dc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#120202", "#750a0a", "#991616", "#120202"]
        }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
        ΔⲆ[669] = wm(0.35, ["#072428", "#67A242", "#67A242"], 0);
        ΔⲆ[670] = wm(0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
        ΔⲆ[671] = wm(0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
        ΔⲆ[672] = wm(0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
        if (ⵠⵠⲆⵠΔⵠᐃ) {
            ΔⲆ[278] = Ga(function (b) {
                var c = document.createElement("canvas");
                var d = c.getContext("2d");
                var e = b * 200;
                var f = b * 180;
                var g = b * 8;
                c.width = e;
                c.height = f;
                d.beginPath();
                Lt(d, 0, 0, e, f - g, g);
                d.globalAlpha = 0.8;
                Kt(d, "#1D6055");
                d.globalAlpha = 1;
                var a = Yd(b, "Leaderboard", 25, "#FFF");
                d.drawImage(a, (e - a.width) / 2, b * 5);
                return c;
            }(1));
        } else {
            ΔⲆ[278] = Ga(function (b) {
                var c = document.createElement("canvas");
                var d = c.getContext("2d");
                var e = b * 200;
                var f = b * 270;
                var g = b * 8;
                c.width = e;
                c.height = f + 20;
                d.beginPath();
                Lt(d, 0, 0, e, f - g, g);
                d.globalAlpha = 0.5;
                Kt(d, "#1D6055");
                d.globalAlpha = 1;
                var a = Yd(b, "Leaderboard", 25, "#FFF");
                d.drawImage(a, (e - a.width) / 2, b * 5);
                return c;
            }(1));
        }
        if (ⵠⵠⲆⵠΔⵠᐃ) {
            ΔⲆ[267] = Ga(function (b) {
                var c = document.createElement("canvas");
                var d = c.getContext("2d");
                var e = b * 335;
                var f = b * 250;
                var i = b * 120;
                var a = b * 20;
                var j = b * 35;
                var k = b * 65;
                var h = b * 2;
                var l = b * 4;
                c.width = e;
                c.height = i;
                d.beginPath();
                d.translate(0, b * 15);
                Lt(d, k, 0, f, a, h);
                Kt(d, null, "#69A148", l);
                d.translate(0, j);
                Lt(d, k, 0, f, a, h);
                Kt(d, null, "#AF352A", l);
                d.translate(0, j);
                Lt(d, k, 0, f, a, h);
                Kt(d, null, "#669BB1", l);
                return c;
            }(0.75));
        } else {
            ΔⲆ[267] = Ga(function (c) {
                var d = document.createElement("canvas");
                var e = d.getContext("2d");
                var f = c * 950;
                var i = c * 180;
                var j = c * 50;
                var a = c * 20;
                var k = c * 240;
                var m = c * 35;
                var h = c * 1;
                var l = c * 4;
                var g = c * 4;
                d.width = f;
                d.height = j;
                e.translate(0, c * 15);
                Lt(e, m, h, i, a, l);
                Kt(e, null, "#69A148", g);
                var n = ΔⲆ[669];
                e.drawImage(n, 17, -8);
                e.translate(k, 0);
                Lt(e, m, h, i, a, l);
                Kt(e, null, "#AF352A", g);
                n = ΔⲆ[671];
                e.drawImage(n, 17, -9);
                e.translate(k, 0);
                Lt(e, m, h, i, a, l);
                Kt(e, null, "#669BB1", g);
                n = ΔⲆ[670];
                e.drawImage(n, 17, -8);
                e.translate(k, 0);
                Lt(e, m, h, i, a, l);
                Kt(e, null, "#074A87", g);
                n = ΔⲆ[672];
                e.drawImage(n, 17, -8);
                return d;
            }(1));
        }
        if (ⵠⵠⲆⵠΔⵠᐃ) {
            ΔⲆ[608] = Ga(Im(0.75));
        } else {
            ΔⲆ[608] = Ga(Im(1));
        }
        ΔⲆ[792] = Ga(pm(0.16, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
        ΔⲆ[537] = Ga(ab(5.8, yd(0.15, Zj, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
        ΔⲆ[283] = [];
        ΔⲆ[465] = [];
        for (a = 0; a < 18; a++) {
            ΔⲆ[465][a] = Yd(1, "" + (a + 1), 12, "#FFF");
        }
        ΔⲆ[708] = [];
        ΔⲆ[708].push(Ga(pc(0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
        ΔⲆ[708].push(Ga(pc(0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
        ΔⲆ[708].push(Ga(pc(0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
        ΔⲆ[725] = [];
        ΔⲆ[725].push(Ga(function (a) {
            var b = document.createElement("canvas");
            var c = b.getContext("2d");
            b.width = a * 321;
            b.height = a * 345;
            c.translate(0, a * 5);
            c.translate(0, a * 20);
            Nt(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            Kt(c, "#322413", "#322413", a * 4);
            c.translate(0, a * -20);
            Nt(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            Kt(c, "#392C16", "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
            c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
            c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
            c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
            c.closePath();
            Kt(c, "#12432D");
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
            c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
            c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
            c.closePath();
            Kt(c, "#3A2A0D");
            Nt(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
            Kt(c, undefined, "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
            c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
            c.closePath();
            Kt(c, Xn, "#5E3E1A", a * 12);
            c.translate(0, a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            Kt(c, Ua, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            Kt(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            Kt(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            Kt(c, Og, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            Kt(c, T, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            Kt(c, Db, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            Kt(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            Kt(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            Kt(c, Xn, "#c7a726", a * 12);
            c.translate(0, a * -8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            Kt(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            Kt(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            Kt(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            Kt(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            Kt(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            Kt(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            Kt(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            Kt(c, Bh, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            Kt(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
            c.closePath();
            Kt(c, "#704618", "#5D3D1A", a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 96, a * 166);
            c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
            c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
            c.closePath();
            Kt(c, "#ECBE35", "#EDCE4F", a * 8);
            Nt(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
            Kt(c, "#392C16", "#5E3E1A", a * 10);
            return b;
        }(0.22)));
        ΔⲆ[725].push(Ga(function (a) {
            var b = document.createElement("canvas");
            var c = b.getContext("2d");
            b.width = a * 321;
            b.height = a * 345;
            c.translate(0, a * 5);
            c.translate(0, a * 20);
            Nt(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            Kt(c, "#322413", "#322413", a * 4);
            c.translate(0, a * -20);
            Nt(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            Kt(c, "#392C16", "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
            c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
            c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
            c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
            c.closePath();
            Kt(c, "#3A2A0D");
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
            c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
            c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
            c.closePath();
            Kt(c, "#071A1B");
            Nt(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
            Kt(c, undefined, "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
            c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
            c.closePath();
            Kt(c, T, "#5E3E1A", a * 12);
            c.translate(0, a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            Kt(c, Gj, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            Kt(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            Kt(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            Kt(c, Og, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            Kt(c, Mq, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            Kt(c, Og, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            Kt(c, la, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            Kt(c, Og, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            Kt(c, T, "#281C08", a * 12);
            c.translate(0, a * -8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            Kt(c, ll, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            Kt(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            Kt(c, Gj, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            Kt(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            Kt(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            Kt(c, Og, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            Kt(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            Kt(c, Yl, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            Kt(c, _r, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 96, a * 166);
            c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
            c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
            c.closePath();
            Kt(c, "#704618", "#5D3D1A", a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
            c.closePath();
            Kt(c, "#E1DDD5", "#EAE7E4", a * 8);
            Nt(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
            Kt(c, "#392C16", "#5E3E1A", a * 10);
            return b;
        }(0.22)));
        ΔⲆ[726] = Ga(function (a) {
            var b = document.createElement("canvas");
            var c = b.getContext("2d");
            b.width = a * 321;
            b.height = a * 345;
            c.translate(0, a * 5);
            Nt(c, a * 161.00003051757812, a * 165.40341186523438, a * 20.808652046684813);
            Kt(c, "#C09D6F", "#A37943", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 162.00003051757812, a * 48.403411865234375);
            c.bezierCurveTo(a * 172.50003051757812, a * 67.40341186523438, a * 172.50003051757812, a * 67.40341186523438, a * 183.00003051757812, a * 86.40341186523438);
            c.bezierCurveTo(a * 160.50003051757812, a * 86.40341186523438, a * 160.50003051757812, a * 86.40341186523438, a * 138.00003051757812, a * 86.40341186523438);
            c.closePath();
            Kt(c, "#C09D6F", "#A37943", a * 10);
            c.save();
            c.translate(a * 161.50003051757812, a * 117.90341186523438);
            Lt(c, a * -5.5, a * -37.5, a * 11, a * 75, a * 10);
            c.restore();
            Kt(c, "#C09D6F", "#A37943", a * 10);
            c.save();
            c.translate(a * 162.00003051757812, a * 78.90341186523438);
            Lt(c, a * -10, a * -5.5, a * 20, a * 11, a * 1);
            c.restore();
            Kt(c, "#C09D6F");
            Nt(c, a * 161.00003051757812, a * 163.6761474609375, a * 17.08800749063506);
            Kt(c, "#C09D6F");
            return b;
        }(0.22));
        ΔⲆ[727] = [];
        ΔⲆ[727].push(Ga(Bb(1.5, ["#795026", "#654320", "#eda80d"], 0)));
        ΔⲆ[727].push(Ga(Bb(1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
        ΔⲆ[727].push(Ga(Bb(1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
        ΔⲆ[546] = ⲆⲆ.ⵠⲆᐃⵠΔᐃⲆ;
        ΔⲆ[547] = ⲆⲆ.ⵠⵠΔⵠⵠⲆⵠ;
        ΔⲆ[548] = ⲆⲆ.ⲆⲆⵠᐃᐃⲆΔ;
        ΔⲆ[549] = ⲆⲆ.ⵠᐃΔΔⵠⵠᐃ;
        ΔⲆ[517] = Yd(1, "Show spectators", 25, "#FFF", hj, Yl, "#000", 5, 220);
        ΔⲆ[525] = Yd(1, "Reconnecting...", 30, "#FFF");
        console.log(Uj, undefined);
    }
    function jm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 450;
        d.height = a * 790;
        e.translate(a * 5, a * 5);
        e.globalAlpha = b ? 0 : 0;
        Nt(e, a * 178.5, a * 172.828125, a * 150);
        Kt(e, undefined, c[0], a * 65);
        Nt(e, a * 178.5, a * 172.828125, a * 150);
        Kt(e, Xk, c[0], a * 55);
        e.closePath();
        e.save();
        e.translate(a * 177, a * 512.328125);
        Lt(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
        e.restore();
        Kt(e, c[0]);
        e.save();
        e.translate(a * 136, a * 581.828125);
        Lt(e, a * -39, a * -23, a * 78, a * 46, a * 25);
        e.restore();
        Kt(e, c[0]);
        e.save();
        e.translate(a * 135.5, a * 663.828125);
        Lt(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
        e.restore();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 114, a * 594.828125);
        e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
        e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
        e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
        e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
        e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, a * 5);
        e.moveTo(a * 140, a * 294.828125);
        e.bezierCurveTo(a * 212, a * 295.828125, a * 176.5, a * 295.328125, a * 213, a * 295.828125);
        e.bezierCurveTo(a * 201.5, a * 325.328125, a * 201.5, a * 325.328125, a * 190, a * 354.828125);
        e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 161, a * 356.828125);
        e.bezierCurveTo(a * 154.5, a * 328.828125, a * 154.5, a * 328.828125, a * 148, a * 300.828125);
        e.closePath();
        Kt(e, c[0]);
        e.translate(3, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 159, a * 679.828125);
        e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
        e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
        e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
        e.closePath();
        Kt(e, c[0]);
        e.save();
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 548.828125);
        e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
        e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
        e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
        e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
        e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
        e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
        e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
        e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
        e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
        e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
        e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
        e.closePath();
        Kt(e, c[0], c[0], a * 7);
        e.restore();
        e.globalAlpha = 1;
        e.translate(a * 15, a * 35);
        Nt(e, a * 178.5, a * 172.828125, a * 150);
        Kt(e, hj, c[2], a * 95);
        Nt(e, a * 178.5, a * 172.828125, a * 150);
        Kt(e, undefined, c[1], a * 55);
        e.closePath();
        e.save();
        e.translate(a * 177, a * 512.328125);
        Lt(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
        e.restore();
        Kt(e, c[1], c[2], a * 20);
        e.save();
        e.translate(a * 136, a * 581.828125);
        Lt(e, a * -39, a * -23, a * 78, a * 46, a * 25);
        e.restore();
        Kt(e, c[1], c[2], a * 20);
        e.save();
        e.translate(a * 135.5, a * 663.828125);
        Lt(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
        e.restore();
        Kt(e, c[1], c[2], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 114, a * 594.828125);
        e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
        e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
        e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
        e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
        e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
        e.closePath();
        Kt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, a * 5);
        e.moveTo(a * 123, a * 294.828125);
        e.bezierCurveTo(a * 212, a * 295.828125, a * 190.5, a * 295.328125, a * 250, a * 295.828125);
        e.bezierCurveTo(a * 231.5, a * 325.328125, a * 231.5, a * 325.328125, a * 220, a * 354.828125);
        e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 140, a * 356.828125);
        e.bezierCurveTo(a * 123.5, a * 328.828125, a * 123.5, a * 328.828125, a * 123, a * 294.828125);
        e.closePath();
        Kt(e, c[1]);
        e.translate(0, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 159, a * 679.828125);
        e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
        e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
        e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
        e.closePath();
        Kt(e, c[1]);
        e.save();
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 548.828125);
        e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
        e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
        e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
        e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
        e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
        e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
        e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
        e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
        e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
        e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
        e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
        e.closePath();
        Kt(e, c[1], c[1], a * 7);
        e.restore();
        return d;
    }
    function Lm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 110;
        c.height = a * 110;
        d.globalAlpha = 0.2;
        Nt(d, a * 55, a * 55, a * 55);
        Kt(d, b[0]);
        return c;
    }
    function Gm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 137;
        d.height = a * 129;
        e.globalAlpha = 0.4;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        Kt(e, _r, c[2], a * 40);
        e.globalAlpha = 0.4;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        Kt(e, undefined, c[1], a * 20);
        e.globalAlpha = 0.8;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        Kt(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51.000030517578125, a * 37.9886474609375);
        e.bezierCurveTo(a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 85.9886474609375);
        e.bezierCurveTo(a * 75.50003051757812, a * 85.9886474609375, a * 75.50003051757812, a * 85.9886474609375, a * 100.00003051757812, a * 85.9886474609375);
        e.bezierCurveTo(a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 37.9886474609375);
        e.bezierCurveTo(a * 76.00003051757812, a * 37.9886474609375, a * 76.00003051757812, a * 37.9886474609375, a * 52.000030517578125, a * 37.9886474609375);
        e.closePath();
        Kt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 99.00003051757812, a * 38.9886474609375);
        e.bezierCurveTo(a * 93.50003051757812, a * 44.9886474609375, a * 93.50003051757812, a * 44.9886474609375, a * 88.00003051757812, a * 50.9886474609375);
        e.bezierCurveTo(a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 93.9886474609375);
        e.bezierCurveTo(a * 94.00003051757812, a * 90.4886474609375, a * 94.00003051757812, a * 90.4886474609375, a * 100.00003051757812, a * 86.9886474609375);
        e.closePath();
        Kt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.00003051757812, a * 49.625);
        e.bezierCurveTo(a * 61.000030517578125, a * 49.625, a * 61.000030517578125, a * 49.625, a * 35.000030517578125, a * 49.625);
        e.bezierCurveTo(a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 91.625);
        e.bezierCurveTo(a * 60.500030517578125, a * 91.625, a * 60.500030517578125, a * 91.625, a * 86.00003051757812, a * 91.625);
        e.bezierCurveTo(a * 86.50003051757812, a * 70.625, a * 86.50003051757812, a * 70.625, a * 87.00003051757812, a * 49.625);
        e.closePath();
        Kt(e, c[1], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 47.000030517578125, a * 36.625);
        e.bezierCurveTo(a * 73.00003051757812, a * 37.125, a * 73.00003051757812, a * 37.125, a * 99.00003051757812, a * 37.625);
        e.bezierCurveTo(a * 93.50003051757812, a * 44.125, a * 93.50003051757812, a * 44.125, a * 88.00003051757812, a * 50.625);
        e.bezierCurveTo(a * 60.500030517578125, a * 50.125, a * 60.500030517578125, a * 50.125, a * 33.000030517578125, a * 49.625);
        e.closePath();
        Kt(e, c[1], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53.000030517578125, a * 52.625);
        e.bezierCurveTo(a * 40.000030517578125, a * 54.625, a * 39.000030517578125, a * 59.625, a * 40.000030517578125, a * 67.625);
        e.bezierCurveTo(a * 45.000030517578125, a * 59.625, a * 48.000030517578125, a * 58.625, a * 54.000030517578125, a * 53.625);
        e.closePath();
        Kt(e, c[3]);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        Kt(e, Db, c[3], a * 4);
        return d;
    }
    function Wm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 316;
        d.height = a * 365;
        e.save();
        e.translate(a * 156.07142639160156, a * 51.81248474121094);
        e.rotate(0);
        Lt(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
        e.restore();
        Kt(e, c[1], c[2], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
        e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
        e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
        e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
        e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
        e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
        e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
        e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
        e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
        e.closePath();
        Kt(e, undefined, c[5], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
        e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
        e.closePath();
        Kt(e, Bh, c[6], a * 15);
        return d;
    }
    function Om(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 440;
        d.height = a * 388;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        Nt(e, a * 220, a * 201, a * 170.41713528867922);
        Kt(e, c[0], c[0], a * 6);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        Nt(e, a * 220, a * 201, a * 170.41713528867922);
        Kt(e, c[1], c[2], a * 6);
        Nt(e, a * 220, a * 201, a * 130);
        Kt(e, c[11], c[2], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 218, a * 97);
        e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
        e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
        e.closePath();
        Kt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224, a * 181);
        e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
        e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
        e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
        e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
        e.closePath();
        Kt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 169, a * 289);
        e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
        e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
        e.closePath();
        Kt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143, a * 146);
        e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
        e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
        e.closePath();
        Kt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 135);
        e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
        e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
        e.closePath();
        Kt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 318, a * 223);
        e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
        e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
        e.closePath();
        Kt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 142, a * 223);
        e.bezierCurveTo(a * 128, a * 213, a * 123, a * 214, a * 111, a * 223);
        e.closePath();
        Kt(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 251, a * 133);
        e.bezierCurveTo(a * 269, a * 188, a * 262, a * 229, a * 251, a * 253);
        e.bezierCurveTo(a * 288, a * 224, a * 273, a * 139, a * 252, a * 133);
        e.closePath();
        Kt(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 203, a * 102);
        e.bezierCurveTo(a * 204, a * 136, a * 200, a * 159, a * 189, a * 174);
        e.bezierCurveTo(a * 223, a * 164, a * 219, a * 87, a * 205, a * 83);
        e.closePath();
        Kt(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 196, a * 324);
        e.bezierCurveTo(a * 209, a * 239, a * 200, a * 219, a * 192, a * 196);
        e.bezierCurveTo(a * 229, a * 216, a * 219, a * 316, a * 198, a * 325);
        e.closePath();
        Kt(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 266, a * 166);
        e.bezierCurveTo(a * 249, a * 154, a * 243, a * 161, a * 233, a * 167);
        Kt(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 269, a * 192);
        e.bezierCurveTo(a * 256, a * 183, a * 241, a * 186, a * 233, a * 192);
        Kt(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 263, a * 217);
        e.bezierCurveTo(a * 251, a * 211, a * 242, a * 213, a * 236, a * 218);
        Kt(e, Zq, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 204, a * 141);
        e.bezierCurveTo(a * 191, a * 131, a * 187, a * 133, a * 176, a * 141);
        Kt(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 207, a * 230);
        e.bezierCurveTo(a * 193, a * 222, a * 185, a * 224, a * 177, a * 231);
        Kt(e, Og, c[6], a * 6);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 210, a * 258);
        e.bezierCurveTo(a * 196, a * 247, a * 191, a * 250, a * 177, a * 259);
        Kt(e, Bh, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 196);
        e.bezierCurveTo(a * 130, a * 186, a * 124, a * 187, a * 114, a * 195);
        Kt(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 218, a * 97);
        e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
        e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
        e.closePath();
        Kt(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224, a * 181);
        e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
        e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
        e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
        e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
        e.closePath();
        Kt(e, Yl, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 169, a * 289);
        e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
        e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
        e.closePath();
        Kt(e, Uj, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143, a * 146);
        e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
        e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
        e.closePath();
        Kt(e, hj, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 135);
        e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
        e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
        e.closePath();
        Kt(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 318, a * 223);
        e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
        e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
        e.closePath();
        Kt(e, la, c[6], a * 6);
        Nt(e, a * 222, a * 199, a * 120.74767078498864);
        Kt(e, la, c[3], a * 40);
        Nt(e, a * 220, a * 200, a * 95.44108130150245);
        Kt(e, undefined, c[2], a * 15);
        Nt(e, a * 220, a * 201, a * 85);
        Kt(e, Yg, c[4], a * 10);
        e.globalAlpha = 0.5;
        Nt(e, a * 220, a * 201, a * 82);
        Kt(e, c[9]);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        Nt(e, a * 63, a * 136, a * 49.193495504995376);
        Kt(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        Nt(e, a * 63, a * 136, a * 49.193495504995376);
        Kt(e, c[8], c[2], a * 4);
        Nt(e, a * 63, a * 137, a * 25.632011235952593);
        Kt(e, c[7], c[2], a * 4);
        return d;
    }
    function Nm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 202;
        d.height = a * 202;
        e.translate(a * 2, a * 1);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 98, a * 41.15177917480469);
        e.rotate(0.8);
        Lt(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
        e.restore();
        Kt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 22.5089111328125);
        e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
        Kt(e, c[2]);
        e.save();
        e.translate(a * 147.5, a * 69.5089111328125);
        e.rotate(0.2);
        Lt(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
        e.restore();
        Kt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 163, a * 59.50892639160156);
        e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
        Kt(e, c[2]);
        e.save();
        e.translate(a * 143.5, a * 128.2946319580078);
        e.rotate(1.24);
        Lt(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
        e.restore();
        Kt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 135.93748474121094);
        e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
        Kt(e, c[2]);
        e.save();
        e.translate(a * 99, a * 156.08035278320312);
        e.rotate(0.84);
        Lt(e, a * -18, a * -18, a * 36, a * 36, a * 7);
        e.restore();
        Kt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 136.08035278320312);
        e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
        Kt(e, c[2]);
        e.save();
        e.translate(a * 54, a * 72.22320556640625);
        e.rotate(1.32);
        Lt(e, a * -18, a * -19, a * 36, a * 38, a * 7);
        e.restore();
        Kt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34, a * 60.79463195800781);
        e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
        Kt(e, c[2]);
        e.save();
        e.translate(a * 49, a * 127.29463195800781);
        e.rotate(1.76);
        Lt(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
        e.restore();
        Kt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141.7946319580078);
        e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
        Kt(e, c[2]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 98, a * 41.15177917480469);
        e.rotate(0.8);
        Lt(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
        e.restore();
        Kt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 22.5089111328125);
        e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
        Kt(e, Xk, c[4], a * 5);
        e.save();
        e.translate(a * 147.5, a * 69.5089111328125);
        e.rotate(0.2);
        Lt(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
        e.restore();
        Kt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 163, a * 59.50892639160156);
        e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
        Kt(e, undefined, c[4], a * 5);
        e.save();
        e.translate(a * 143.5, a * 128.2946319580078);
        e.rotate(1.24);
        Lt(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
        e.restore();
        Kt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 135.93748474121094);
        e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
        Kt(e, Xn, c[4], a * 5);
        e.save();
        e.translate(a * 99, a * 156.08035278320312);
        e.rotate(0.84);
        Lt(e, a * -18, a * -18, a * 36, a * 36, a * 7);
        e.restore();
        Kt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 136.08035278320312);
        e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
        Kt(e, Xk, c[4], a * 5);
        e.save();
        e.translate(a * 54, a * 72.22320556640625);
        e.rotate(1.32);
        Lt(e, a * -18, a * -19, a * 36, a * 38, a * 7);
        e.restore();
        Kt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34, a * 60.79463195800781);
        e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
        Kt(e, undefined, c[4], a * 5);
        e.save();
        e.translate(a * 49, a * 127.29463195800781);
        e.rotate(1.76);
        Lt(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
        e.restore();
        Kt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141.7946319580078);
        e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
        Kt(e, Uj, c[4], a * 5);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 98, a * 99);
        ob(e, 6, a * 70.28669492273468, a * 10);
        e.restore();
        Kt(e, c[2]);
        e.save();
        e.translate(a * 98, a * 99);
        ob(e, 6, a * 56.455940020351264, a * 10);
        e.restore();
        Kt(e, c[2]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 98, a * 99);
        ob(e, 6, a * 70.28669492273468, a * 10);
        e.restore();
        Kt(e, c[5], c[6], a * 5);
        e.save();
        e.translate(a * 98, a * 99);
        ob(e, 6, a * 56.455940020351264, a * 10);
        e.restore();
        Kt(e, c[7], c[8], a * 7);
        return d;
    }
    function Hm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 80;
        d.height = a * 160;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        Lt(e, a * 33, a * 53, a * 10, a * 98, a * 10);
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -150, a * -100);
        e.moveTo(a * 167.5, a * 171.0625);
        e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
        e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
        e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
        e.closePath();
        Kt(e, c[0]);
        e.restore();
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        Lt(e, a * 33, a * 53, a * 10, a * 98, a * 10);
        Kt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -150, a * -100);
        e.moveTo(a * 167.5, a * 171.0625);
        e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
        e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
        e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
        e.closePath();
        Kt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 0, a * 1);
        e.moveTo(a * 180.5, a * 169.0625);
        e.bezierCurveTo(a * 180.5, a * 157.5625, a * 180.5, a * 157.5625, a * 180.5, a * 146.0625);
        e.bezierCurveTo(a * 181.5, a * 134.0625, a * 193.5, a * 129.0625, a * 196.5, a * 146.0625);
        e.bezierCurveTo(a * 196.5, a * 157.5625, a * 196.5, a * 157.5625, a * 196.5, a * 169.0625);
        e.closePath();
        Kt(e, c[5]);
        e.restore();
        return d;
    }
    function qm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.globalAlpha = 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36.5, a * 278.0625);
        e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
        e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
        e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
        e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
        e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
        e.closePath();
        Kt(e, c[0]);
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36.5, a * 278.0625);
        e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
        e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
        e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
        e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
        e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
        e.closePath();
        Kt(e, c[1], c[2], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 214.5, a * 124.0625);
        e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
        e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
        e.closePath();
        Kt(e, hj, c[2], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 145.0625);
        e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
        e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
        e.closePath();
        Kt(e, undefined, c[2], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103.5, a * 169.0625);
        e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
        e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
        e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
        e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
        e.closePath();
        Kt(e, c[3], c[2], a * 19);
        Nt(e, a * 92.5, a * 216.0625, a * 13.892443989449804);
        Kt(e, c[4]);
        Nt(e, a * 68.5, a * 227.0625, a * 8.06225774829855);
        Kt(e, c[4]);
        Nt(e, a * 85.5, a * 240.0625, a * 6.708203932499369);
        Kt(e, c[4]);
        Nt(e, a * 147.5, a * 294.0625, a * 17.46424919657298);
        Kt(e, c[4]);
        Nt(e, a * 166.5, a * 273.0625, a * 6.708203932499369);
        Kt(e, c[4]);
        Nt(e, a * 114.5, a * 294.0625, a * 12.36931687685298);
        Kt(e, c[4]);
        Nt(e, a * 123.5, a * 220.0625, a * 5.830951894845301);
        Kt(e, c[4]);
        Nt(e, a * 114.5, a * 259.0625, a * 4.123105625617661);
        Kt(e, c[4]);
        Nt(e, a * 63.5, a * 265.0625, a * 5.385164807134504);
        Kt(e, c[4]);
        Nt(e, a * 148.5, a * 235.0625, a * 4.47213595499958);
        Kt(e, c[4]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 194.5, a * 313.0625);
        e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
        e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
        e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
        e.closePath();
        Kt(e, c[5]);
        return d;
    }
    function Um(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 501;
        f.height = b * 564;
        g.scale(0.5, 0.5);
        g.translate(b * 240, b * 255);
        g.rotate(e);
        g.globalAlpha = c ? 0.5 : 0.2;
        Nt(g, b * 174, b * 87.984375, b * 20.8806130178211);
        Kt(g, d[0], d[0], b * 8);
        Nt(g, b * 174, b * 87.984375, b * 12.165525060596439);
        Kt(g, d[0], d[0], b * 8);
        Nt(g, b * 174, b * 87.484375, b * 6);
        Kt(g, d[0]);
        Nt(g, b * 30, b * 87.984375, b * 20.8806130178211);
        Kt(g, d[0], d[0], b * 4);
        Nt(g, b * 30, b * 87.984375, b * 12.165525060596439);
        Kt(g, d[0], d[0], b * 4);
        Nt(g, b * 30, b * 87.484375, b * 6);
        Kt(g, d[0]);
        Nt(g, b * 100, b * 30, b * 20.8806130178211);
        Kt(g, d[0], d[0], b * 4);
        Nt(g, b * 100, b * 30, b * 12.165525060596439);
        Kt(g, d[0], d[0], b * 4);
        Nt(g, b * 100, b * 30, b * 6);
        Kt(g, d[0]);
        Nt(g, b * 100, b * 130, b * 20.8806130178211);
        Kt(g, d[0], d[0], b * 4);
        Nt(g, b * 100, b * 130, b * 12.165525060596439);
        Kt(g, d[0], d[0], b * 4);
        Nt(g, b * 100, b * 130, b * 6);
        Kt(g, d[0]);
        g.save();
        g.translate(b * 102, b * 81.984375);
        g.rotate(0);
        Lt(g, b * -74, b * -57, b * 148, b * 114, b * 23);
        g.restore();
        Kt(g, d[0], d[0], b * 4);
        g.save();
        g.translate(b * 101, b * 64.984375);
        g.rotate(0);
        Lt(g, b * -33, b * -10, b * 66, b * 20, b * 15);
        g.restore();
        Kt(g, d[0], d[0], b * 4);
        g.save();
        g.translate(b * 102, b * 63.484375);
        g.rotate(0);
        Lt(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
        g.restore();
        g.translate(5, -5);
        g.globalAlpha = 1;
        Nt(g, b * 174, b * 87.984375, b * 20.8806130178211);
        Kt(g, d[1], d[3], b * 8);
        Nt(g, b * 174, b * 87.984375, b * 12.165525060596439);
        Kt(g, d[1], d[3], b * 8);
        Nt(g, b * 174, b * 87.484375, b * 6);
        Kt(g, d[2]);
        Nt(g, b * 30, b * 87.984375, b * 20.8806130178211);
        Kt(g, d[1], d[3], b * 8);
        Nt(g, b * 30, b * 87.984375, b * 12.165525060596439);
        Kt(g, d[1], d[3], b * 8);
        Nt(g, b * 30, b * 87.484375, b * 6);
        Kt(g, d[2]);
        Nt(g, b * 102, b * 30, b * 20.8806130178211);
        Kt(g, d[1], d[3], b * 8);
        Nt(g, b * 102, b * 30, b * 12.165525060596439);
        Kt(g, d[1], d[3], b * 8);
        Nt(g, b * 102, b * 30, b * 6);
        Kt(g, d[1]);
        Nt(g, b * 102, b * 130, b * 20.8806130178211);
        Kt(g, d[1], d[3], b * 8);
        Nt(g, b * 102, b * 130, b * 12.165525060596439);
        Kt(g, d[1], d[3], b * 8);
        Nt(g, b * 102, b * 130, b * 6);
        Kt(g, d[1]);
        g.save();
        g.translate(b * 102, b * 81.984375);
        Lt(g, b * -74, b * -57, b * 148, b * 114, b * 23);
        g.restore();
        Kt(g, d[1], d[3], b * 8);
        g.save();
        g.translate(b * 101, b * 64.984375);
        Lt(g, b * -33, b * -10, b * 66, b * 20, b * 15);
        g.restore();
        Kt(g, d[2], d[1], b * 8);
        g.save();
        g.translate(b * 102, b * 63.484375);
        Lt(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
        g.restore();
        Kt(g, d[2], d[1], b * 8);
        Nt(g, b * 135, b * 107.36605834960938, b * 21.095023109728988);
        Kt(g, d[1], d[3], b * 8);
        Nt(g, b * 135, b * 107.36605834960938, b * 13);
        Kt(g, d[1], d[3], b * 8);
        Nt(g, b * 135, b * 107.36605834960938, b * 6.082762530298219);
        Kt(g, d[2]);
        Nt(g, b * 70, b * 107.36605834960938, b * 21.095023109728988);
        Kt(g, d[1], d[3], b * 8);
        Nt(g, b * 70, b * 107.36605834960938, b * 13);
        Kt(g, d[1], d[3], b * 8);
        Nt(g, b * 70, b * 107.36605834960938, b * 6.082762530298219);
        Kt(g, d[2]);
        return f;
    }
    function Ym(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 105;
        d.height = a * 144;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * -5, a * 0);
        e.save();
        e.translate(a * 52.5, a * 91.5);
        Lt(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
        e.restore();
        Kt(e, c[0], c[0], a * 3);
        e.save();
        e.translate(a * 53, a * 36);
        Lt(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
        e.restore();
        Kt(e, c[0], c[0], a * 4);
        e.save();
        e.translate(a * 53.5, a * 35.5);
        Lt(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
        e.restore();
        Kt(e, c[0], c[0], a * 4);
        e.translate(a * 5, a * 0);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 52.5, a * 91.5);
        Lt(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
        e.restore();
        Kt(e, c[1], c[2], a * 3);
        e.save();
        e.translate(a * 53, a * 36);
        Lt(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
        e.restore();
        Kt(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 53.5, a * 35.5);
        Lt(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
        e.restore();
        Kt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 60.5);
        e.bezierCurveTo(a * 44, a * 56.5, a * 44, a * 56.5, a * 39, a * 52.5);
        e.bezierCurveTo(a * 39, a * 46.5, a * 39, a * 46.5, a * 39, a * 40.5);
        e.bezierCurveTo(a * 44, a * 44, a * 44, a * 44, a * 49, a * 47.5);
        e.bezierCurveTo(a * 49, a * 54, a * 49, a * 54, a * 49, a * 60.5);
        e.closePath();
        Kt(e, c[7], c[6], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 66, a * 40.5);
        e.bezierCurveTo(a * 66, a * 46.5, a * 66, a * 46.5, a * 66, a * 52.5);
        e.bezierCurveTo(a * 60.5, a * 56.5, a * 60.5, a * 56.5, a * 55, a * 60.5);
        e.bezierCurveTo(a * 56, a * 53, a * 56, a * 53, a * 57, a * 45.5);
        e.bezierCurveTo(a * 61.5, a * 43, a * 61.5, a * 43, a * 66, a * 40.5);
        e.closePath();
        Kt(e, c[7], c[6], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 33.5);
        e.bezierCurveTo(a * 55.5, a * 41, a * 55.5, a * 41, a * 59, a * 48.5);
        e.bezierCurveTo(a * 56, a * 58, a * 56, a * 58, a * 53, a * 67.5);
        e.bezierCurveTo(a * 49, a * 58, a * 49, a * 58, a * 45, a * 48.5);
        e.bezierCurveTo(a * 48.5, a * 41, a * 48.5, a * 41, a * 52, a * 33.5);
        e.closePath();
        Kt(e, c[9], c[8], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 47.5);
        e.bezierCurveTo(a * 54.5, a * 50.5, a * 54.5, a * 50.5, a * 57, a * 53.5);
        e.bezierCurveTo(a * 55, a * 60, a * 55, a * 60, a * 53, a * 66.5);
        e.bezierCurveTo(a * 50.5, a * 61, a * 50.5, a * 61, a * 48, a * 55.5);
        e.bezierCurveTo(a * 50, a * 52, a * 50, a * 52, a * 52, a * 48.5);
        e.closePath();
        Kt(e, c[11], c[10], a * 3);
        return d;
    }
    function Km(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 120;
        e.height = b * 100;
        Lt(f, b * 10, b * 10, b * 95, b * 80, b * 10);
        Kt(f, c[2]);
        Lt(f, b * 10, b * 5, b * 95, b * 80, b * 10);
        Kt(f, c[3], c[4], b * 4);
        if (d == 0) {
            var g = ic(b * 0.75, c, 0);
            f.drawImage(g, b * 22, b * 18);
        } else if (d == 1) {
            g = ic(b * 0.75, c, 1);
            f.drawImage(g, b * 22, b * 18);
        }
        return e;
    }
    function Vm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 88;
        d.height = a * 88;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(0.52);
        ob(e, 6, a * 43, a * 10);
        e.restore();
        Kt(e, c[0], c[1], a * 3);
        return d;
    }
    function Xm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 163;
        d.height = a * 163;
        e.save();
        e.translate(a * 82.5, a * 81.1015625);
        e.rotate(0);
        Lt(e, a * -65.5, a * -66, a * 131, a * 131, a * 5);
        e.restore();
        Kt(e, c[1]);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 80, a * 17.1015625);
        Lt(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
        e.restore();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 80, a * 17.1015625);
        Lt(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
        e.restore();
        Kt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 145.5, a * 83.6015625);
        Lt(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
        e.restore();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 145.5, a * 83.6015625);
        Lt(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
        e.restore();
        Kt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 17.5, a * 82.6015625);
        Lt(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
        e.restore();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 17.5, a * 82.6015625);
        Lt(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
        e.restore();
        Kt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 80.5, a * 145.6015625);
        Lt(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
        e.restore();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 80.5, a * 145.6015625);
        Lt(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
        e.restore();
        Kt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 17, a * 18.1015625);
        Lt(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
        e.restore();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 17, a * 18.1015625);
        Lt(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
        e.restore();
        Kt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 145.5, a * 16.6015625);
        Lt(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
        e.restore();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 145.5, a * 16.6015625);
        Lt(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
        e.restore();
        Kt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 145.5, a * 144.1015625);
        Lt(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
        e.restore();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 145.5, a * 144.1015625);
        Lt(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
        e.restore();
        Kt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 17.5, a * 145.1015625);
        Lt(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
        e.restore();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 17.5, a * 145.1015625);
        Lt(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
        e.restore();
        Kt(e, c[2], c[3], a * 3);
        return d;
    }
    function Zm(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 120;
        var g = b * 140;
        d.width = f;
        d.height = g;
        d.width = b * 130;
        d.height = b * 120;
        Lt(e, b * 10, b * 12, b * 110, b * 90, b * 10);
        Kt(e, c[0]);
        Lt(e, b * 10, b * 5, b * 110, b * 90, b * 10);
        Kt(e, c[1], c[2], b * 4);
        var a = ab(-Math.PI / 5, xd(b * 0.5, true, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
        e.drawImage(a, b * 12, b * 18);
        a = ab(Math.PI / 4, Ku(b * 0.55, jo, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
        e.drawImage(a, b * 36, b * 16);
        return d;
    }
    function $m(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 202;
        d.height = a * 202;
        e.translate(a * 2, a * 1);
        e.globalAlpha = 0.3;
        Nt(e, a * 98, a * 99, a * 100);
        Kt(e, c[0]);
        e.globalAlpha = 0.5;
        Nt(e, a * 98, a * 99, a * 90);
        Kt(e, c[1]);
        return d;
    }
    function ec(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 89;
        d.height = a * 89;
        e.save();
        e.translate(a * 44.5, a * 44.5);
        ob(e, 6, a * 40, a * 10);
        e.restore();
        Kt(e, c[0], c[1], a * 5);
        e.save();
        e.translate(a * 44.5, a * 44.5);
        ob(e, 6, a * 25.11521001172521, a * 10);
        e.restore();
        Kt(e, c[2], c[3], a * 5);
        return d;
    }
    function ic(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 95;
        d.height = a * 85;
        if (c == 0) {
            e.translate(a * 7, a * 15);
            e.scale(0.9, 0.9);
            e.save();
            Lt(e, a * 0, a * 5, a * 90, a * 60, 10);
            Kt(e, b[0]);
            e.globalCompositeOperation = "destination-out";
            Nt(e, a * 25, a * 40, a * 10);
            e.fill();
            Nt(e, a * 65, a * 40, a * 10);
            e.fill();
            e.restore();
            e.save();
            Lt(e, 0, 0, a * 90, a * 60, a * 10);
            Kt(e, b[1]);
            e.globalCompositeOperation = "destination-out";
            Nt(e, a * 25, a * 40, a * 10);
            e.fill();
            Nt(e, a * 65, a * 40, a * 10);
            e.fill();
            e.restore();
        } else if (c == 1) {
            e.scale(0.8, 0.8);
            e.translate(a * 15, a * 33);
            e.save();
            e.scale(0.56, 0.56);
            e.translate(a * -39, a * -60);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 32.5, a * 50.642852783203125);
            e.bezierCurveTo(a * 83, a * 69.64285278320312, a * 83, a * 69.64285278320312, a * 133.5, a * 88.64285278320312);
            e.bezierCurveTo(a * 93, a * 92.64285278320312, a * 93, a * 92.64285278320312, a * 52.5, a * 96.64285278320312);
            e.bezierCurveTo(a * 30.5, a * 100.64285278320312, a * 36.5, a * 94.64285278320312, a * 32.5, a * 84.64285278320312);
            e.bezierCurveTo(a * 21.5, a * 45.642852783203125, a * 24.5, a * 48.642852783203125, a * 31.5, a * 50.642852783203125);
            e.closePath();
            Kt(e, b[1]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 116.5, a * 85.64285278320312);
            e.bezierCurveTo(a * 160.5, a * 67.14285278320312, a * 160.5, a * 67.14285278320312, a * 204.5, a * 48.642852783203125);
            e.bezierCurveTo(a * 220.5, a * 42.642852783203125, a * 208.5, a * 68.64285278320312, a * 205.5, a * 85.64285278320312);
            e.bezierCurveTo(a * 202.5, a * 98.64285278320312, a * 199.5, a * 98.64285278320312, a * 188.5, a * 100.64285278320312);
            e.closePath();
            Kt(e, b[1]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 166.5, a * 68.64285278320312);
            e.bezierCurveTo(a * 147.5, a * 72.64285278320312, a * 145.5, a * 73.64285278320312, a * 142.5, a * 62.642852783203125);
            e.bezierCurveTo(a * 121.5, a * 12.642852783203125, a * 122.5, a * 5.642852783203125, a * 117.5, a * 15.642852783203125);
            e.bezierCurveTo(a * 105.5, a * 40.642852783203125, a * 105.5, a * 40.642852783203125, a * 93.5, a * 65.64285278320312);
            e.bezierCurveTo(a * 89.5, a * 74.64285278320312, a * 84.5, a * 72.64285278320312, a * 73.5, a * 74.64285278320312);
            e.bezierCurveTo(a * 98, a * 87.64285278320312, a * 98, a * 87.64285278320312, a * 122.5, a * 100.64285278320312);
            e.closePath();
            Kt(e, b[1]);
            e.restore();
            e.save();
            Lt(e, 0, a * 15, a * 90, a * 50, a * 10);
            Kt(e, b[0]);
            Lt(e, 0, a * 10, a * 90, a * 50, a * 10);
            Kt(e, b[1]);
            e.globalCompositeOperation = "destination-out";
            Nt(e, a * 25, a * 40, a * 10);
            e.fill();
            Nt(e, a * 65, a * 40, a * 10);
            e.fill();
            e.restore();
        }
        return d;
    }
    function tc() {
        new Date().getTime();
        function b(a) {
            var b = 0;
            for (var c = 0, d = 0; a.length > c; c++) {
                var e = a.charAt(c);
                if (e !== "_" && c !== 5) {
                    if (e === "1") {
                        b += Math.pow(2, d);
                    }
                    d++;
                }
            }
            return b;
        }
        ΔⲆᐃⵠᐃⲆΔΔΔ();
        ΔⲆ[1026] = [ⲆⲆ.ⵠΔᐃᐃΔΔᐃ, ⲆⲆ.ΔⲆⲆⲆᐃΔⵠ];
        ΔⲆ[1025] = [];
        ΔⲆ[1025][0] = [];
        ΔⲆ[1025][0][b("000_010_000")] = [ⲆⲆ.ᐃΔⲆΔᐃ, ⲆⲆ.ⲆⲆⲆⵠΔ];
        ΔⲆ[1025][0][b("000_010_010")] = ΔⲆ[1025][0][b("000_010_000")];
        ΔⲆ[1025][0][b("000_011_000")] = ΔⲆ[1025][0][b("000_010_000")];
        ΔⲆ[1025][0][b("000_011_010")] = [ⲆⲆ.ΔⵠᐃⲆⵠ, ⲆⲆ.ⵠⲆΔⲆᐃ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.ᐃΔⲆΔᐃ, ⲆⲆ.ΔΔᐃᐃᐃⵠⵠ, ⲆⲆ.ΔⵠⵠΔΔᐃⲆ, ⲆⲆ.ᐃⲆⲆᐃⵠΔΔ];
        ΔⲆ[1025][0][b("000_011_011")] = [ⲆⲆ.ⵠⵠᐃⵠⵠⲆⵠ, ⲆⲆ.ΔⵠᐃⲆⵠ, ⲆⲆ.ⵠⲆΔⲆᐃ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.ᐃΔⲆΔᐃ, ⲆⲆ.ΔΔᐃᐃᐃⵠⵠ, ⲆⲆ.ΔⵠⵠΔΔᐃⲆ, ⲆⲆ.ᐃⲆⲆᐃⵠΔΔ, ⲆⲆ.ΔⵠⲆⲆᐃ];
        ΔⲆ[1025][0][b("000_110_000")] = [ⲆⲆ.ΔΔΔⵠⵠ, ⲆⲆ.ⲆⲆⲆⵠΔ];
        ΔⲆ[1025][0][b("000_110_010")] = [ⲆⲆ.ⲆⲆⲆⲆⵠ, ⲆⲆ.ΔΔΔⵠⵠ, ⲆⲆ.ⵠᐃΔΔᐃ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.ᐃΔⲆΔᐃ, ⲆⲆ.ΔⵠⲆⲆᐃ, ⲆⲆ.ΔⲆΔⲆΔ, ⲆⲆ.ΔⵠᐃⲆᐃΔᐃ];
        ΔⲆ[1025][0][b("000_110_110")] = [ⲆⲆ.ⲆⲆⲆⲆⵠ, ⲆⲆ.ᐃΔΔΔᐃⲆⵠΔᐃ, ⲆⲆ.ⵠⵠⵠΔΔΔⲆ, ⲆⲆ.ΔΔΔⵠⵠ, ⲆⲆ.ⵠᐃΔΔᐃ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.ΔⵠⲆⲆᐃ, ⲆⲆ.ΔⲆΔⲆΔ, ⲆⲆ.ΔⵠᐃⲆᐃΔᐃ];
        ΔⲆ[1025][0][b("000_111_000")] = [ⲆⲆ.ΔΔΔⵠⵠ, ⲆⲆ.ⵠᐃΔΔᐃ, ⲆⲆ.ΔᐃⲆΔΔᐃⲆ, ⲆⲆ.ⵠⲆΔⲆᐃⵠⵠ];
        ΔⲆ[1025][0][b("000_111_111")] = [ⲆⲆ.ΔΔΔⵠⵠ, ⲆⲆ.ⵠⵠⵠΔΔΔⲆ, ⲆⲆ.ⲆⲆⲆⲆⵠ, ⲆⲆ.ⵠⲆΔⲆᐃ, ⲆⲆ.ΔⵠᐃⲆⵠ, ⲆⲆ.ⵠⵠᐃⵠⵠⲆⵠ, ⲆⲆ.ⲆᐃⲆᐃΔΔΔ];
        ΔⲆ[1025][0][b("010_010_000")] = [ⲆⲆ.ⲆⲆⲆⵠΔ];
        ΔⲆ[1025][0][b("010_010_010")] = [ⲆⲆ.ΔⲆΔΔⵠΔᐃ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.ᐃΔⲆΔᐃ];
        ΔⲆ[1025][0][b("010_011_000")] = [ⲆⲆ.ⲆⲆΔᐃΔ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.ᐃΔⲆΔᐃ, ⲆⲆ.ΔⲆΔⲆΔ];
        ΔⲆ[1025][0][b("010_110_000")] = [ⲆⲆ.ΔΔΔⵠⵠ, ⲆⲆ.ⵠᐃΔΔᐃ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.ΔⲆΔⲆΔ, ⲆⲆ.ΔⵠΔΔⲆ];
        ΔⲆ[1025][0][b("010_110_110")] = [ⲆⲆ.ᐃⲆΔⵠⵠ, ⲆⲆ.ⲆⲆΔᐃΔ, ⲆⲆ.ΔⵠᐃⲆⵠ, ⲆⲆ.ⵠⲆΔⲆᐃ, ⲆⲆ.ⲆⲆⲆⲆⵠ, ⲆⲆ.ⵠⵠⵠΔΔΔⲆ, ⲆⲆ.ΔΔΔⵠⵠ, ⲆⲆ.ⲆᐃⲆᐃΔΔΔ, ⲆⲆ.ⵠⵠⵠⲆΔⲆΔ, ⲆⲆ.ΔⲆΔΔⵠΔᐃ, ⲆⲆ.ⵠᐃΔΔᐃ, ⲆⲆ.ΔᐃⲆΔΔᐃⲆ, ⲆⲆ.ⵠⲆΔⲆᐃⵠⵠ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.ᐃΔⲆΔᐃ, ⲆⲆ.ΔΔᐃᐃᐃⵠⵠ, ⲆⲆ.ΔⵠⵠΔΔᐃⲆ, ⲆⲆ.ᐃⲆⲆᐃⵠΔΔ, ⲆⲆ.ΔⵠⲆⲆᐃ, ⲆⲆ.ΔⲆΔⲆΔ, ⲆⲆ.ΔⵠΔΔⲆ];
        ΔⲆ[1025][0][b("010_011_010")] = ΔⲆ[1025][0][b("010_110_110")];
        ΔⲆ[1025][0][b("010_011_011")] = ΔⲆ[1025][0][b("010_110_110")];
        ΔⲆ[1025][0][b("000_111_011")] = ΔⲆ[1025][0][b("010_110_110")];
        ΔⲆ[1025][0][b("010_110_010")] = ΔⲆ[1025][0][b("010_110_110")];
        ΔⲆ[1025][0][b("010_111_000")] = ΔⲆ[1025][0][b("010_110_110")];
        ΔⲆ[1025][0][b("010_111_010")] = ΔⲆ[1025][0][b("010_110_110")];
        ΔⲆ[1025][0][b("010_111_011")] = ΔⲆ[1025][0][b("010_110_110")];
        ΔⲆ[1025][0][b("010_111_110")] = ΔⲆ[1025][0][b("010_110_110")];
        ΔⲆ[1025][0][b("010_111_111")] = ΔⲆ[1025][0][b("010_110_110")];
        ΔⲆ[1025][0][b("000_111_110")] = ΔⲆ[1025][0][b("010_110_110")];
        ΔⲆ[1025][0][b("000_111_010")] = ΔⲆ[1025][0][b("010_110_110")];
        ΔⲆ[1025][0][b("011_011_000")] = [ⲆⲆ.ⵠⵠΔⲆⲆΔⵠ, ⲆⲆ.ᐃⲆΔⵠⵠ, ⲆⲆ.ⲆⲆΔᐃΔ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.ᐃΔⲆΔᐃ, ⲆⲆ.ΔⲆΔⲆΔ];
        ΔⲆ[1025][0][b("011_011_010")] = [ⲆⲆ.ⵠⵠΔⲆⲆΔⵠ, ⲆⲆ.ᐃⲆΔⵠⵠ, ⲆⲆ.ⲆⲆΔᐃΔ, ⲆⲆ.ΔΔΔⵠⵠ, ⲆⲆ.ⵠᐃΔΔᐃ, ⲆⲆ.ΔᐃⲆΔΔᐃⲆ, ⲆⲆ.ⵠⲆΔⲆᐃⵠⵠ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.ᐃΔⲆΔᐃ, ⲆⲆ.ΔⲆΔⲆΔ, ⲆⲆ.ΔⵠΔΔⲆ];
        ΔⲆ[1025][0][b("011_011_011")] = [ⲆⲆ.ⵠⲆΔⲆᐃ, ⲆⲆ.ΔⵠᐃⲆⵠ, ⲆⲆ.ⵠⵠᐃⵠⵠⲆⵠ, ⲆⲆ.ⲆⲆΔᐃΔ, ⲆⲆ.ᐃⲆΔⵠⵠ, ⲆⲆ.ⵠⵠΔⲆⲆΔⵠ, ⲆⲆ.ⵠⵠⵠⲆΔⲆΔ];
        ΔⲆ[1025][0][b("011_111_000")] = ΔⲆ[1025][0][b("011_011_010")];
        ΔⲆ[1025][0][b("011_111_010")] = [ⲆⲆ.ⵠⵠΔⲆⲆΔⵠ, ⲆⲆ.ᐃⲆΔⵠⵠ, ⲆⲆ.ⲆⲆΔᐃΔ, ⲆⲆ.ΔⵠᐃⲆⵠ, ⲆⲆ.ⵠⲆΔⲆᐃ, ⲆⲆ.ⲆⲆⲆⲆⵠ, ⲆⲆ.ΔΔΔⵠⵠ, ⲆⲆ.ⲆᐃⲆᐃΔΔΔ, ⲆⲆ.ⵠⵠⵠⲆΔⲆΔ, ⲆⲆ.ΔⲆΔΔⵠΔᐃ, ⲆⲆ.ⵠᐃΔΔᐃ, ⲆⲆ.ΔᐃⲆΔΔᐃⲆ, ⲆⲆ.ⵠⲆΔⲆᐃⵠⵠ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.ᐃΔⲆΔᐃ, ⲆⲆ.ΔΔᐃᐃᐃⵠⵠ, ⲆⲆ.ΔⵠⵠΔΔᐃⲆ, ⲆⲆ.ᐃⲆⲆᐃⵠΔΔ, ⲆⲆ.ΔⵠⲆⲆᐃ, ⲆⲆ.ΔⲆΔⲆΔ, ⲆⲆ.ΔⵠΔΔⲆ];
        ΔⲆ[1025][0][b("011_111_011")] = ΔⲆ[1025][0][b("011_111_010")];
        ΔⲆ[1025][0][b("011_111_110")] = ΔⲆ[1025][0][b("011_111_010")];
        ΔⲆ[1025][0][b("011_111_111")] = [ⲆⲆ.ⵠⵠΔⲆⲆΔⵠ, ⲆⲆ.ᐃⲆΔⵠⵠ, ⲆⲆ.ⲆⲆΔᐃΔ, ⲆⲆ.ⵠⵠᐃⵠⵠⲆⵠ, ⲆⲆ.ΔⵠᐃⲆⵠ, ⲆⲆ.ⵠⲆΔⲆᐃ, ⲆⲆ.ⲆⲆⲆⲆⵠ, ⲆⲆ.ⵠⵠⵠΔΔΔⲆ, ⲆⲆ.ΔΔΔⵠⵠ, ⲆⲆ.ⲆᐃⲆᐃΔΔΔ, ⲆⲆ.ⵠⵠⵠⲆΔⲆΔ, ⲆⲆ.ΔⲆΔΔⵠΔᐃ, ⲆⲆ.ⵠᐃΔΔᐃ, ⲆⲆ.ΔᐃⲆΔΔᐃⲆ, ⲆⲆ.ⵠⲆΔⲆᐃⵠⵠ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.ᐃΔⲆΔᐃ, ⲆⲆ.ΔΔᐃᐃᐃⵠⵠ, ⲆⲆ.ΔⵠⵠΔΔᐃⲆ, ⲆⲆ.ᐃⲆⲆᐃⵠΔΔ, ⲆⲆ.ΔⵠⲆⲆᐃ, ⲆⲆ.ΔⲆΔⲆΔ, ⲆⲆ.ΔⵠΔΔⲆ];
        ΔⲆ[1025][0][b("110_110_000")] = [ⲆⲆ.ΔⵠΔᐃΔᐃΔ, ⲆⲆ.ΔΔΔⵠⵠ, ⲆⲆ.ⲆⵠⲆⲆⲆⵠᐃ, ⲆⲆ.ⵠᐃΔΔᐃ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.ΔⵠΔΔⲆ];
        ΔⲆ[1025][0][b("110_110_010")] = [ⲆⲆ.ⲆⲆⲆⲆⵠ, ⲆⲆ.ΔⵠΔᐃΔᐃΔ, ⲆⲆ.ΔΔΔⵠⵠ, ⲆⲆ.ΔⲆΔΔⵠΔᐃ, ⲆⲆ.ⵠᐃΔΔᐃ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.ΔⵠⲆⲆᐃ, ⲆⲆ.ΔⵠΔΔⲆ];
        ΔⲆ[1025][0][b("110_110_110")] = [ⲆⲆ.ⲆⲆⲆⲆⵠ, ⲆⲆ.ⵠⵠⵠΔΔΔⲆ, ⲆⲆ.ΔⵠΔᐃΔᐃΔ, ⲆⲆ.ΔΔΔⵠⵠ, ⲆⲆ.ΔⲆΔΔⵠΔᐃ, ⲆⲆ.ⵠᐃΔΔᐃ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.ΔⵠⲆⲆᐃ, ⲆⲆ.ΔⵠΔΔⲆ];
        ΔⲆ[1025][0][b("110_111_000")] = [ⲆⲆ.ᐃⲆΔⵠⵠ, ⲆⲆ.ⲆⲆΔᐃΔ, ⲆⲆ.ΔⵠΔᐃΔᐃΔ, ⲆⲆ.ΔΔΔⵠⵠ, ⲆⲆ.ⲆⵠⲆⲆⲆⵠᐃ, ⲆⲆ.ⲆΔΔⲆᐃⲆⵠ, ⲆⲆ.ⵠᐃΔΔᐃ, ⲆⲆ.ΔᐃⲆΔΔᐃⲆ, ⲆⲆ.ⵠⲆΔⲆᐃⵠⵠ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.ᐃΔⲆΔᐃ, ⲆⲆ.ΔⲆΔⲆΔ, ⲆⲆ.ΔⵠΔΔⲆ];
        ΔⲆ[1025][0][b("110_111_110")] = [ⲆⲆ.ᐃⲆΔⵠⵠ, ⲆⲆ.ⲆⲆΔᐃΔ, ⲆⲆ.ΔⵠᐃⲆⵠ, ⲆⲆ.ⵠⲆΔⲆᐃ, ⲆⲆ.ⲆⲆⲆⲆⵠ, ⲆⲆ.ⵠⵠⵠΔΔΔⲆ, ⲆⲆ.ΔⵠΔᐃΔᐃΔ, ⲆⲆ.ΔΔΔⵠⵠ, ⲆⲆ.ⲆᐃⲆᐃΔΔΔ, ⲆⲆ.ⲆΔΔⲆᐃⲆⵠ, ⲆⲆ.ⵠⵠⵠⲆΔⲆΔ, ⲆⲆ.ΔⲆΔΔⵠΔᐃ, ⲆⲆ.ⵠᐃΔΔᐃ, ⲆⲆ.ΔᐃⲆΔΔᐃⲆ, ⲆⲆ.ⵠⲆΔⲆᐃⵠⵠ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.ᐃΔⲆΔᐃ, ⲆⲆ.ΔΔᐃᐃᐃⵠⵠ, ⲆⲆ.ΔⵠⵠΔΔᐃⲆ, ⲆⲆ.ᐃⲆⲆᐃⵠΔΔ, ⲆⲆ.ΔⵠⲆⲆᐃ, ⲆⲆ.ΔⲆΔⲆΔ, ⲆⲆ.ΔⵠΔΔⲆ];
        ΔⲆ[1025][0][b("110_111_111")] = ΔⲆ[1025][0][b("110_111_110")];
        ΔⲆ[1025][0][b("110_111_011")] = ΔⲆ[1025][0][b("110_111_110")];
        ΔⲆ[1025][0][b("110_111_010")] = ΔⲆ[1025][0][b("110_111_110")];
        ΔⲆ[1025][0][b("111_111_110")] = [ⲆⲆ.ΔⵠΔΔⲆ, ⲆⲆ.ΔⲆΔⲆΔ, ⲆⲆ.ΔⵠⲆⲆᐃ, ⲆⲆ.ᐃⲆⲆᐃⵠΔΔ, ⲆⲆ.ΔⵠⵠΔΔᐃⲆ, ⲆⲆ.ΔΔᐃᐃᐃⵠⵠ, ⲆⲆ.ᐃΔⲆΔᐃ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.ⵠⲆΔⲆᐃⵠⵠ, ⲆⲆ.ΔᐃⲆΔΔᐃⲆ, ⲆⲆ.ⵠᐃΔΔᐃ, ⲆⲆ.ΔⲆΔΔⵠΔᐃ, ⲆⲆ.ⵠⵠⵠⲆΔⲆΔ, ⲆⲆ.ⲆΔΔⲆᐃⲆⵠ, ⲆⲆ.ⲆᐃⲆᐃΔΔΔ, ⲆⲆ.ΔΔΔⵠⵠ, ⲆⲆ.ΔⵠΔᐃΔᐃΔ, ⲆⲆ.ⲆⲆⲆⲆⵠ, ⲆⲆ.ⵠⲆΔⲆᐃ, ⲆⲆ.ΔⵠᐃⲆⵠ, ⲆⲆ.ⲆⲆΔᐃΔ, ⲆⲆ.ᐃⲆΔⵠⵠ, ⲆⲆ.ⵠⵠΔⲆⲆΔⵠ];
        ΔⲆ[1025][0][b("111_111_011")] = ΔⲆ[1025][0][b("111_111_110")];
        ΔⲆ[1025][0][b("111_111_000")] = [ⲆⲆ.ⲆⵠⲆⲆⲆⵠᐃ, ⲆⲆ.ΔΔΔⵠⵠ, ⲆⲆ.ΔⵠΔᐃΔᐃΔ, ⲆⲆ.ⲆⲆΔᐃΔ, ⲆⲆ.ᐃⲆΔⵠⵠ, ⲆⲆ.ⵠⵠΔⲆⲆΔⵠ, ⲆⲆ.ⲆΔΔⲆᐃⲆⵠ];
        ΔⲆ[1025][0][b("111_111_111")] = [ⲆⲆ.ⵠⵠΔⲆⲆΔⵠ, ⲆⲆ.ᐃⲆΔⵠⵠ, ⲆⲆ.ⲆⲆΔᐃΔ, ⲆⲆ.ⵠⵠᐃⵠⵠⲆⵠ, ⲆⲆ.ΔⵠᐃⲆⵠ, ⲆⲆ.ⵠⲆΔⲆᐃ, ⲆⲆ.ⲆⲆⲆⲆⵠ, ⲆⲆ.ⵠⵠⵠΔΔΔⲆ, ⲆⲆ.ΔⵠΔᐃΔᐃΔ, ⲆⲆ.ΔΔΔⵠⵠ, ⲆⲆ.ⲆᐃⲆᐃΔΔΔ, ⲆⲆ.ⵠⵠⵠⲆΔⲆΔ, ⲆⲆ.ΔⲆΔΔⵠΔᐃ, ⲆⲆ.ⵠᐃΔΔᐃ, ⲆⲆ.ΔᐃⲆΔΔᐃⲆ, ⲆⲆ.ⵠⲆΔⲆᐃⵠⵠ, ⲆⲆ.ⲆⲆⲆⵠΔ, ⲆⲆ.ᐃΔⲆΔᐃ, ⲆⲆ.ΔΔᐃᐃᐃⵠⵠ, ⲆⲆ.ΔⵠⵠΔΔᐃⲆ, ⲆⲆ.ᐃⲆⲆᐃⵠΔΔ, ⲆⲆ.ΔⵠⲆⲆᐃ, ⲆⲆ.ΔⲆΔⲆΔ, ⲆⲆ.ΔⵠΔΔⲆ];
        ΔⲆ[1025][0][b("111_111_010")] = ΔⲆ[1025][0][b("111_111_110")];
        ΔⲆ[1025][1] = [];
        ΔⲆ[1025][1][b("000_010_000")] = [ⲆⲆ.ᐃΔᐃⵠⲆ, ⲆⲆ.ⵠⵠᐃⵠᐃ];
        ΔⲆ[1025][1][b("000_010_010")] = ΔⲆ[1025][1][b("000_010_000")];
        ΔⲆ[1025][1][b("000_011_000")] = ΔⲆ[1025][1][b("000_010_000")];
        ΔⲆ[1025][1][b("000_011_010")] = [ⲆⲆ.ᐃᐃΔⲆⵠ, ⲆⲆ.ΔⲆΔⵠΔ, ⲆⲆ.ⵠⵠᐃⵠᐃ, ⲆⲆ.ᐃΔᐃⵠⲆ, ⲆⲆ.ᐃᐃⵠᐃⲆⲆⵠ, ⲆⲆ.ⲆⲆΔⲆᐃⵠᐃ, ⲆⲆ.ⲆⵠΔᐃⵠⵠᐃ];
        ΔⲆ[1025][1][b("000_011_011")] = [ⲆⲆ.ΔᐃᐃΔⲆⵠⵠ, ⲆⲆ.ᐃᐃΔⲆⵠ, ⲆⲆ.ΔⲆΔⵠΔ, ⲆⲆ.ⵠⵠᐃⵠᐃ, ⲆⲆ.ᐃΔᐃⵠⲆ, ⲆⲆ.ᐃᐃⵠᐃⲆⲆⵠ, ⲆⲆ.ⲆⲆΔⲆᐃⵠᐃ, ⲆⲆ.ⲆⵠΔᐃⵠⵠᐃ, ⲆⲆ.Ⲇⵠᐃᐃᐃ];
        ΔⲆ[1025][1][b("000_110_000")] = [ⲆⲆ.ⵠᐃⵠⲆⵠ, ⲆⲆ.ⵠⵠᐃⵠᐃ];
        ΔⲆ[1025][1][b("000_110_010")] = [ⲆⲆ.ⲆᐃⵠᐃⲆ, ⲆⲆ.ⵠᐃⵠⲆⵠ, ⲆⲆ.ᐃⲆᐃᐃⵠ, ⲆⲆ.ⵠⵠᐃⵠᐃ, ⲆⲆ.ᐃΔᐃⵠⲆ, ⲆⲆ.Ⲇⵠᐃᐃᐃ, ⲆⲆ.ⲆⲆⲆΔΔ, ⲆⲆ.ⲆΔⵠⲆΔⲆⵠ];
        ΔⲆ[1025][1][b("000_110_110")] = [ⲆⲆ.ⲆᐃⵠᐃⲆ, ⲆⲆ.ⲆΔᐃΔⵠᐃΔΔᐃ, ⲆⲆ.ΔⵠⵠⲆⵠⵠΔ, ⲆⲆ.ⵠᐃⵠⲆⵠ, ⲆⲆ.ᐃⲆᐃᐃⵠ, ⲆⲆ.ⵠⵠᐃⵠᐃ, ⲆⲆ.Ⲇⵠᐃᐃᐃ, ⲆⲆ.ⲆⲆⲆΔΔ, ⲆⲆ.ⲆΔⵠⲆΔⲆⵠ];
        ΔⲆ[1025][1][b("000_111_000")] = [ⲆⲆ.ⵠᐃⵠⲆⵠ, ⲆⲆ.ᐃⲆᐃᐃⵠ, ⲆⲆ.ΔᐃᐃΔΔⲆΔ, ⲆⲆ.ΔⲆᐃΔⵠᐃΔ];
        ΔⲆ[1025][1][b("000_111_111")] = [ⲆⲆ.ⵠᐃⵠⲆⵠ, ⲆⲆ.ΔⵠⵠⲆⵠⵠΔ, ⲆⲆ.ⲆᐃⵠᐃⲆ, ⲆⲆ.ΔⲆΔⵠΔ, ⲆⲆ.ᐃᐃΔⲆⵠ, ⲆⲆ.ΔᐃᐃΔⲆⵠⵠ, ⲆⲆ.ΔⵠⲆΔⵠΔⲆ];
        ΔⲆ[1025][1][b("010_010_000")] = [ⲆⲆ.ⵠⵠᐃⵠᐃ];
        ΔⲆ[1025][1][b("010_010_010")] = [ⲆⲆ.ᐃⵠⵠⲆᐃᐃΔ, ⲆⲆ.ⵠⵠᐃⵠᐃ, ⲆⲆ.ᐃΔᐃⵠⲆ];
        ΔⲆ[1025][1][b("010_011_000")] = [ⲆⲆ.ⲆⵠⵠᐃΔ, ⲆⲆ.ⵠⵠᐃⵠᐃ, ⲆⲆ.ᐃΔᐃⵠⲆ, ⲆⲆ.ⲆⲆⲆΔΔ];
        ΔⲆ[1025][1][b("010_110_000")] = [ⲆⲆ.ⵠᐃⵠⲆⵠ, ⲆⲆ.ᐃⲆᐃᐃⵠ, ⲆⲆ.ⵠⵠᐃⵠᐃ, ⲆⲆ.ⲆⲆⲆΔΔ, ⲆⲆ.ᐃᐃΔΔⵠ];
        ΔⲆ[1025][1][b("010_110_110")] = [ⲆⲆ.ⲆⲆⵠⲆᐃ, ⲆⲆ.ⲆⵠⵠᐃΔ, ⲆⲆ.ᐃᐃΔⲆⵠ, ⲆⲆ.ΔⲆΔⵠΔ, ⲆⲆ.ⲆᐃⵠᐃⲆ, ⲆⲆ.ΔⵠⵠⲆⵠⵠΔ, ⲆⲆ.ⵠᐃⵠⲆⵠ, ⲆⲆ.ΔⵠⲆΔⵠΔⲆ, ⲆⲆ.ⲆΔΔΔᐃⲆⵠ, ⲆⲆ.ᐃⵠⵠⲆᐃᐃΔ, ⲆⲆ.ᐃⲆᐃᐃⵠ, ⲆⲆ.ΔᐃᐃΔΔⲆΔ, ⲆⲆ.ΔⲆᐃΔⵠᐃΔ, ⲆⲆ.ⵠⵠᐃⵠᐃ, ⲆⲆ.ᐃΔᐃⵠⲆ, ⲆⲆ.ᐃᐃⵠᐃⲆⲆⵠ, ⲆⲆ.ⲆⲆΔⲆᐃⵠᐃ, ⲆⲆ.ⲆⵠΔᐃⵠⵠᐃ, ⲆⲆ.Ⲇⵠᐃᐃᐃ, ⲆⲆ.ⲆⲆⲆΔΔ, ⲆⲆ.ᐃᐃΔΔⵠ];
        ΔⲆ[1025][1][b("010_011_010")] = ΔⲆ[1025][1][b("010_110_110")];
        ΔⲆ[1025][1][b("010_011_011")] = ΔⲆ[1025][1][b("010_110_110")];
        ΔⲆ[1025][1][b("000_111_011")] = ΔⲆ[1025][1][b("010_110_110")];
        ΔⲆ[1025][1][b("010_110_010")] = ΔⲆ[1025][1][b("010_110_110")];
        ΔⲆ[1025][1][b("010_111_000")] = ΔⲆ[1025][1][b("010_110_110")];
        ΔⲆ[1025][1][b("010_111_010")] = ΔⲆ[1025][1][b("010_110_110")];
        ΔⲆ[1025][1][b("010_111_011")] = ΔⲆ[1025][1][b("010_110_110")];
        ΔⲆ[1025][1][b("010_111_110")] = ΔⲆ[1025][1][b("010_110_110")];
        ΔⲆ[1025][1][b("010_111_111")] = ΔⲆ[1025][1][b("010_110_110")];
        ΔⲆ[1025][1][b("000_111_110")] = ΔⲆ[1025][1][b("010_110_110")];
        ΔⲆ[1025][1][b("000_111_010")] = ΔⲆ[1025][1][b("010_110_110")];
        ΔⲆ[1025][1][b("011_011_000")] = [ⲆⲆ.ⲆᐃⵠⵠΔⲆⵠ, ⲆⲆ.ⲆⲆⵠⲆᐃ, ⲆⲆ.ⲆⵠⵠᐃΔ, ⲆⲆ.ⵠⵠᐃⵠᐃ, ⲆⲆ.ᐃΔᐃⵠⲆ, ⲆⲆ.ⲆⲆⲆΔΔ];
        ΔⲆ[1025][1][b("011_011_010")] = [ⲆⲆ.ⲆᐃⵠⵠΔⲆⵠ, ⲆⲆ.ⲆⲆⵠⲆᐃ, ⲆⲆ.ⲆⵠⵠᐃΔ, ⲆⲆ.ⵠᐃⵠⲆⵠ, ⲆⲆ.ᐃⲆᐃᐃⵠ, ⲆⲆ.ΔᐃᐃΔΔⲆΔ, ⲆⲆ.ΔⲆᐃΔⵠᐃΔ, ⲆⲆ.ⵠⵠᐃⵠᐃ, ⲆⲆ.ᐃΔᐃⵠⲆ, ⲆⲆ.ⲆⲆⲆΔΔ, ⲆⲆ.ᐃᐃΔΔⵠ];
        ΔⲆ[1025][1][b("011_011_011")] = [ⲆⲆ.ΔⲆΔⵠΔ, ⲆⲆ.ᐃᐃΔⲆⵠ, ⲆⲆ.ΔᐃᐃΔⲆⵠⵠ, ⲆⲆ.ⲆⵠⵠᐃΔ, ⲆⲆ.ⲆⲆⵠⲆᐃ, ⲆⲆ.ⲆᐃⵠⵠΔⲆⵠ, ⲆⲆ.ⲆΔΔΔᐃⲆⵠ];
        ΔⲆ[1025][1][b("011_111_000")] = ΔⲆ[1025][1][b("011_011_010")];
        ΔⲆ[1025][1][b("011_111_010")] = [ⲆⲆ.ⲆᐃⵠⵠΔⲆⵠ, ⲆⲆ.ⲆⲆⵠⲆᐃ, ⲆⲆ.ⲆⵠⵠᐃΔ, ⲆⲆ.ᐃᐃΔⲆⵠ, ⲆⲆ.ΔⲆΔⵠΔ, ⲆⲆ.ⲆᐃⵠᐃⲆ, ⲆⲆ.ⵠᐃⵠⲆⵠ, ⲆⲆ.ΔⵠⲆΔⵠΔⲆ, ⲆⲆ.ⲆΔΔΔᐃⲆⵠ, ⲆⲆ.ᐃⵠⵠⲆᐃᐃΔ, ⲆⲆ.ᐃⲆᐃᐃⵠ, ⲆⲆ.ΔᐃᐃΔΔⲆΔ, ⲆⲆ.ΔⲆᐃΔⵠᐃΔ, ⲆⲆ.ⵠⵠᐃⵠᐃ, ⲆⲆ.ᐃΔᐃⵠⲆ, ⲆⲆ.ᐃᐃⵠᐃⲆⲆⵠ, ⲆⲆ.ⲆⲆΔⲆᐃⵠᐃ, ⲆⲆ.ⲆⵠΔᐃⵠⵠᐃ, ⲆⲆ.Ⲇⵠᐃᐃᐃ, ⲆⲆ.ⲆⲆⲆΔΔ, ⲆⲆ.ᐃᐃΔΔⵠ];
        ΔⲆ[1025][1][b("011_111_011")] = ΔⲆ[1025][1][b("011_111_010")];
        ΔⲆ[1025][1][b("011_111_110")] = ΔⲆ[1025][1][b("011_111_010")];
        ΔⲆ[1025][1][b("011_111_111")] = [ⲆⲆ.ⲆᐃⵠⵠΔⲆⵠ, ⲆⲆ.ⲆⲆⵠⲆᐃ, ⲆⲆ.ⲆⵠⵠᐃΔ, ⲆⲆ.ΔᐃᐃΔⲆⵠⵠ, ⲆⲆ.ᐃᐃΔⲆⵠ, ⲆⲆ.ΔⲆΔⵠΔ, ⲆⲆ.ⲆᐃⵠᐃⲆ, ⲆⲆ.ΔⵠⵠⲆⵠⵠΔ, ⲆⲆ.ⵠᐃⵠⲆⵠ, ⲆⲆ.ΔⵠⲆΔⵠΔⲆ, ⲆⲆ.ⲆΔΔΔᐃⲆⵠ, ⲆⲆ.ᐃⵠⵠⲆᐃᐃΔ, ⲆⲆ.ᐃⲆᐃᐃⵠ, ⲆⲆ.ΔᐃᐃΔΔⲆΔ, ⲆⲆ.ΔⲆᐃΔⵠᐃΔ, ⲆⲆ.ⵠⵠᐃⵠᐃ, ⲆⲆ.ᐃΔᐃⵠⲆ, ⲆⲆ.ᐃᐃⵠᐃⲆⲆⵠ, ⲆⲆ.ⲆⲆΔⲆᐃⵠᐃ, ⲆⲆ.ⲆⵠΔᐃⵠⵠᐃ, ⲆⲆ.Ⲇⵠᐃᐃᐃ, ⲆⲆ.ⲆⲆⲆΔΔ, ⲆⲆ.ᐃᐃΔΔⵠ];
        ΔⲆ[1025][1][b("110_110_000")] = [ⲆⲆ.ⲆᐃⲆᐃᐃΔⵠ, ⲆⲆ.ⵠᐃⵠⲆⵠ, ⲆⲆ.ΔⲆⵠΔⵠⲆⵠ, ⲆⲆ.ᐃⲆᐃᐃⵠ, ⲆⲆ.ⵠⵠᐃⵠᐃ, ⲆⲆ.ᐃᐃΔΔⵠ];
        ΔⲆ[1025][1][b("110_110_010")] = [ⲆⲆ.ⲆᐃⵠᐃⲆ, ⲆⲆ.ⲆᐃⲆᐃᐃΔⵠ, ⲆⲆ.ⵠᐃⵠⲆⵠ, ⲆⲆ.ᐃⵠⵠⲆᐃᐃΔ, ⲆⲆ.ᐃⲆᐃᐃⵠ, ⲆⲆ.ⵠⵠᐃⵠᐃ, ⲆⲆ.Ⲇⵠᐃᐃᐃ, ⲆⲆ.ᐃᐃΔΔⵠ];
        ΔⲆ[1025][1][b("110_110_110")] = [ⲆⲆ.ⲆᐃⵠᐃⲆ, ⲆⲆ.ΔⵠⵠⲆⵠⵠΔ, ⲆⲆ.ⲆᐃⲆᐃᐃΔⵠ, ⲆⲆ.ⵠᐃⵠⲆⵠ, ⲆⲆ.ᐃⵠⵠⲆᐃᐃΔ, ⲆⲆ.ᐃⲆᐃᐃⵠ, ⲆⲆ.ⵠⵠᐃⵠᐃ, ⲆⲆ.Ⲇⵠᐃᐃᐃ, ⲆⲆ.ᐃᐃΔΔⵠ];
        ΔⲆ[1025][1][b("110_111_000")] = [ⲆⲆ.ⲆⲆⵠⲆᐃ, ⲆⲆ.ⲆⵠⵠᐃΔ, ⲆⲆ.ⲆᐃⲆᐃᐃΔⵠ, ⲆⲆ.ⵠᐃⵠⲆⵠ, ⲆⲆ.ΔⲆⵠΔⵠⲆⵠ, ⲆⲆ.ᐃᐃⲆΔᐃⵠⲆ, ⲆⲆ.ᐃⲆᐃᐃⵠ, ⲆⲆ.ΔᐃᐃΔΔⲆΔ, ⲆⲆ.ΔⲆᐃΔⵠᐃΔ, ⲆⲆ.ⵠⵠᐃⵠᐃ, ⲆⲆ.ᐃΔᐃⵠⲆ, ⲆⲆ.ⲆⲆⲆΔΔ, ⲆⲆ.ᐃᐃΔΔⵠ];
        ΔⲆ[1025][1][b("110_111_110")] = [ⲆⲆ.ⲆⲆⵠⲆᐃ, ⲆⲆ.ⲆⵠⵠᐃΔ, ⲆⲆ.ᐃᐃΔⲆⵠ, ⲆⲆ.ΔⲆΔⵠΔ, ⲆⲆ.ⲆᐃⵠᐃⲆ, ⲆⲆ.ΔⵠⵠⲆⵠⵠΔ, ⲆⲆ.ⲆᐃⲆᐃᐃΔⵠ, ⲆⲆ.ⵠᐃⵠⲆⵠ, ⲆⲆ.ΔⵠⲆΔⵠΔⲆ, ⲆⲆ.ᐃᐃⲆΔᐃⵠⲆ, ⲆⲆ.ⲆΔΔΔᐃⲆⵠ, ⲆⲆ.ᐃⵠⵠⲆᐃᐃΔ, ⲆⲆ.ᐃⲆᐃᐃⵠ, ⲆⲆ.ΔᐃᐃΔΔⲆΔ, ⲆⲆ.ΔⲆᐃΔⵠᐃΔ, ⲆⲆ.ⵠⵠᐃⵠᐃ, ⲆⲆ.ᐃΔᐃⵠⲆ, ⲆⲆ.ᐃᐃⵠᐃⲆⲆⵠ, ⲆⲆ.ⲆⲆΔⲆᐃⵠᐃ, ⲆⲆ.ⲆⵠΔᐃⵠⵠᐃ, ⲆⲆ.Ⲇⵠᐃᐃᐃ, ⲆⲆ.ⲆⲆⲆΔΔ, ⲆⲆ.ᐃᐃΔΔⵠ];
        ΔⲆ[1025][1][b("110_111_111")] = ΔⲆ[1025][1][b("110_111_110")];
        ΔⲆ[1025][1][b("110_111_011")] = ΔⲆ[1025][1][b("110_111_110")];
        ΔⲆ[1025][1][b("110_111_010")] = ΔⲆ[1025][1][b("110_111_110")];
        ΔⲆ[1025][1][b("111_111_110")] = [ⲆⲆ.ᐃᐃΔΔⵠ, ⲆⲆ.ⲆⲆⲆΔΔ, ⲆⲆ.Ⲇⵠᐃᐃᐃ, ⲆⲆ.ⲆⵠΔᐃⵠⵠᐃ, ⲆⲆ.ⲆⲆΔⲆᐃⵠᐃ, ⲆⲆ.ᐃᐃⵠᐃⲆⲆⵠ, ⲆⲆ.ᐃΔᐃⵠⲆ, ⲆⲆ.ⵠⵠᐃⵠᐃ, ⲆⲆ.ΔⲆᐃΔⵠᐃΔ, ⲆⲆ.ΔᐃᐃΔΔⲆΔ, ⲆⲆ.ᐃⲆᐃᐃⵠ, ⲆⲆ.ᐃⵠⵠⲆᐃᐃΔ, ⲆⲆ.ⲆΔΔΔᐃⲆⵠ, ⲆⲆ.ᐃᐃⲆΔᐃⵠⲆ, ⲆⲆ.ΔⵠⲆΔⵠΔⲆ, ⲆⲆ.ⵠᐃⵠⲆⵠ, ⲆⲆ.ⲆᐃⲆᐃᐃΔⵠ, ⲆⲆ.ⲆᐃⵠᐃⲆ, ⲆⲆ.ΔⲆΔⵠΔ, ⲆⲆ.ᐃᐃΔⲆⵠ, ⲆⲆ.ⲆⵠⵠᐃΔ, ⲆⲆ.ⲆⲆⵠⲆᐃ, ⲆⲆ.ⲆᐃⵠⵠΔⲆⵠ];
        ΔⲆ[1025][1][b("111_111_011")] = ΔⲆ[1025][1][b("111_111_110")];
        ΔⲆ[1025][1][b("111_111_000")] = [ⲆⲆ.ΔⲆⵠΔⵠⲆⵠ, ⲆⲆ.ⵠᐃⵠⲆⵠ, ⲆⲆ.ⲆᐃⲆᐃᐃΔⵠ, ⲆⲆ.ⲆⵠⵠᐃΔ, ⲆⲆ.ⲆⲆⵠⲆᐃ, ⲆⲆ.ⲆᐃⵠⵠΔⲆⵠ, ⲆⲆ.ᐃᐃⲆΔᐃⵠⲆ];
        ΔⲆ[1025][1][b("111_111_111")] = [ⲆⲆ.ⲆᐃⵠⵠΔⲆⵠ, ⲆⲆ.ⲆⲆⵠⲆᐃ, ⲆⲆ.ⲆⵠⵠᐃΔ, ⲆⲆ.ΔᐃᐃΔⲆⵠⵠ, ⲆⲆ.ᐃᐃΔⲆⵠ, ⲆⲆ.ΔⲆΔⵠΔ, ⲆⲆ.ⲆᐃⵠᐃⲆ, ⲆⲆ.ΔⵠⵠⲆⵠⵠΔ, ⲆⲆ.ⲆᐃⲆᐃᐃΔⵠ, ⲆⲆ.ⵠᐃⵠⲆⵠ, ⲆⲆ.ΔⵠⲆΔⵠΔⲆ, ⲆⲆ.ⲆΔΔΔᐃⲆⵠ, ⲆⲆ.ᐃⵠⵠⲆᐃᐃΔ, ⲆⲆ.ᐃⲆᐃᐃⵠ, ⲆⲆ.ΔᐃᐃΔΔⲆΔ, ⲆⲆ.ΔⲆᐃΔⵠᐃΔ, ⲆⲆ.ⵠⵠᐃⵠᐃ, ⲆⲆ.ᐃΔᐃⵠⲆ, ⲆⲆ.ᐃᐃⵠᐃⲆⲆⵠ, ⲆⲆ.ⲆⲆΔⲆᐃⵠᐃ, ⲆⲆ.ⲆⵠΔᐃⵠⵠᐃ, ⲆⲆ.Ⲇⵠᐃᐃᐃ, ⲆⲆ.ⲆⲆⲆΔΔ, ⲆⲆ.ᐃᐃΔΔⵠ];
        ΔⲆ[1025][1][b("111_111_010")] = ΔⲆ[1025][1][b("111_111_110")];
        ΔⲆ[1024] = [];
        ΔⲆ[1024][0] = [];
        ΔⲆ[1024][0][b("000_010_000")] = ⲆⲆ.ΔΔΔΔⲆᐃΔ;
        ΔⲆ[1024][0][b("000_010_010")] = ⲆⲆ.ᐃᐃⵠᐃᐃⲆⲆ;
        ΔⲆ[1024][0][b("000_011_000")] = ⲆⲆ.ⲆΔⵠⵠᐃⲆⵠ;
        ΔⲆ[1024][0][b("000_011_010")] = ⲆⲆ.ΔⵠⲆⵠⲆᐃⵠ;
        ΔⲆ[1024][0][b("000_011_011")] = ⲆⲆ.ᐃΔᐃᐃⲆⵠΔ;
        ΔⲆ[1024][0][b("000_110_000")] = ⲆⲆ.ⲆⲆΔᐃⲆΔΔ;
        ΔⲆ[1024][0][b("000_110_010")] = ⲆⲆ.ᐃⵠᐃⲆⲆⲆᐃ;
        ΔⲆ[1024][0][b("000_110_110")] = ⲆⲆ.ΔΔⵠⵠᐃᐃⲆ;
        ΔⲆ[1024][0][b("000_111_000")] = ⲆⲆ.ⵠᐃΔΔᐃΔᐃ;
        ΔⲆ[1024][0][b("000_111_010")] = ⲆⲆ.ΔΔΔᐃⲆᐃⵠ;
        ΔⲆ[1024][0][b("000_111_011")] = ⲆⲆ.ΔΔⵠᐃⵠⵠⲆ;
        ΔⲆ[1024][0][b("000_111_110")] = ⲆⲆ.ⲆΔⵠΔⲆᐃⲆ;
        ΔⲆ[1024][0][b("000_111_111")] = ⲆⲆ.ΔⵠⵠΔⵠⲆᐃ;
        ΔⲆ[1024][0][b("010_010_000")] = ⲆⲆ.ΔⵠΔⵠⲆⲆᐃ;
        ΔⲆ[1024][0][b("010_010_010")] = ⲆⲆ.ΔΔⵠΔⲆΔΔ;
        ΔⲆ[1024][0][b("010_011_000")] = ⲆⲆ.ⲆⲆᐃⲆᐃⲆⵠ;
        ΔⲆ[1024][0][b("010_011_010")] = ⲆⲆ.ΔⵠⲆⵠᐃΔΔ;
        ΔⲆ[1024][0][b("010_011_011")] = ⲆⲆ.ⵠΔΔⵠΔᐃᐃ;
        ΔⲆ[1024][0][b("010_110_000")] = ⲆⲆ.ⲆΔⲆᐃⵠⵠΔ;
        ΔⲆ[1024][0][b("010_110_010")] = ⲆⲆ.ᐃⲆⵠⲆⲆΔⲆ;
        ΔⲆ[1024][0][b("010_110_110")] = ⲆⲆ.ᐃᐃᐃΔⵠⲆⵠ;
        ΔⲆ[1024][0][b("010_111_000")] = ⲆⲆ.ⲆⵠⵠΔΔⵠⵠ;
        ΔⲆ[1024][0][b("010_111_010")] = ⲆⲆ.ⵠΔⲆⵠⵠⲆⵠ;
        ΔⲆ[1024][0][b("010_111_011")] = ⲆⲆ.ⵠⵠⵠΔⵠΔⲆ;
        ΔⲆ[1024][0][b("010_111_110")] = ⲆⲆ.ᐃⲆⲆΔⲆⲆΔ;
        ΔⲆ[1024][0][b("010_111_111")] = ⲆⲆ.ᐃΔΔⲆⵠⲆⲆ;
        ΔⲆ[1024][0][b("011_011_000")] = ⲆⲆ.ΔᐃⲆⵠΔⲆΔ;
        ΔⲆ[1024][0][b("011_011_010")] = ⲆⲆ.ⲆΔΔᐃⲆΔΔ;
        ΔⲆ[1024][0][b("011_011_011")] = ⲆⲆ.ⲆⵠⲆⵠⲆΔΔ;
        ΔⲆ[1024][0][b("011_111_000")] = ⲆⲆ.ᐃᐃⲆⵠΔᐃΔ;
        ΔⲆ[1024][0][b("011_111_010")] = ⲆⲆ.ᐃΔᐃΔⲆᐃᐃ;
        ΔⲆ[1024][0][b("011_111_011")] = ⲆⲆ.ᐃΔΔⲆⲆⵠᐃ;
        ΔⲆ[1024][0][b("011_111_110")] = ⲆⲆ.ⵠΔⵠᐃΔΔᐃ;
        ΔⲆ[1024][0][b("011_111_111")] = ⲆⲆ.ⲆᐃᐃᐃΔⵠⲆ;
        ΔⲆ[1024][0][b("110_110_000")] = ⲆⲆ.ⲆⵠⵠΔᐃⵠᐃ;
        ΔⲆ[1024][0][b("110_110_010")] = ⲆⲆ.ⵠⲆⵠᐃⵠᐃᐃΔᐃ;
        ΔⲆ[1024][0][b("110_110_110")] = ⲆⲆ.ΔⲆΔⵠⲆᐃⵠⵠΔ;
        ΔⲆ[1024][0][b("110_111_000")] = ⲆⲆ.ⵠⲆᐃᐃⵠΔᐃΔᐃ;
        ΔⲆ[1024][0][b("110_111_010")] = ⲆⲆ.ᐃⵠⲆⲆᐃⵠΔⲆΔ;
        ΔⲆ[1024][0][b("110_111_011")] = ⲆⲆ.ⵠᐃⲆⲆᐃⲆⲆΔΔ;
        ΔⲆ[1024][0][b("110_111_110")] = ⲆⲆ.ᐃⵠΔᐃᐃᐃΔΔⲆ;
        ΔⲆ[1024][0][b("110_111_111")] = ⲆⲆ.ΔⲆΔⲆⲆⵠΔⵠΔ;
        ΔⲆ[1024][0][b("111_111_011")] = ⲆⲆ.ᐃᐃᐃᐃⵠⵠᐃ;
        ΔⲆ[1024][0][b("111_111_110")] = ⲆⲆ.ⲆᐃΔⲆΔᐃⵠᐃᐃ;
        ΔⲆ[1024][0][b("111_111_011")] = ⲆⲆ.ᐃᐃᐃᐃⵠⵠᐃ;
        ΔⲆ[1024][0][b("111_111_000")] = ⲆⲆ.ᐃᐃΔΔᐃⲆᐃⵠⵠ;
        ΔⲆ[1024][0][b("111_111_111")] = ⲆⲆ.ΔⲆⵠⲆΔⵠⵠᐃΔ;
        ΔⲆ[1024][0][b("111_111_010")] = ⲆⲆ.ᐃⵠⲆᐃⲆⵠΔⵠᐃ;
        ΔⲆ[1024][1] = [];
        ΔⲆ[1024][1][b("000_010_000")] = ⲆⲆ.ΔΔΔⵠΔⵠΔΔΔ;
        ΔⲆ[1024][1][b("000_010_010")] = ⲆⲆ.ᐃΔᐃⵠᐃⲆᐃⲆⲆ;
        ΔⲆ[1024][1][b("000_011_000")] = ⲆⲆ.ⲆⵠⵠⵠⲆᐃΔᐃⲆ;
        ΔⲆ[1024][1][b("000_011_010")] = ⲆⲆ.ΔⲆΔⵠⲆⵠᐃⵠⲆ;
        ΔⲆ[1024][1][b("000_011_011")] = ⲆⲆ.ⲆⲆⵠᐃᐃⲆⵠⲆⲆ;
        ΔⲆ[1024][1][b("000_110_000")] = ⲆⲆ.ΔᐃⲆⲆΔᐃᐃⲆΔ;
        ΔⲆ[1024][1][b("000_110_010")] = ⲆⲆ.ΔⲆᐃΔᐃΔΔⲆⲆ;
        ΔⲆ[1024][1][b("000_110_110")] = ⲆⲆ.ΔᐃΔΔⲆΔⲆⲆᐃ;
        ΔⲆ[1024][1][b("000_111_000")] = ⲆⲆ.ΔᐃⵠΔΔᐃΔⵠΔ;
        ΔⲆ[1024][1][b("000_111_010")] = ⲆⲆ.ⵠⵠⲆΔΔⲆⵠⲆⲆ;
        ΔⲆ[1024][1][b("000_111_011")] = ⲆⲆ.ⵠⵠΔΔΔⲆᐃⲆᐃ;
        ΔⲆ[1024][1][b("000_111_110")] = ⲆⲆ.ⵠⲆΔΔΔⵠΔΔⲆ;
        ΔⲆ[1024][1][b("000_111_111")] = ⲆⲆ.ᐃᐃⵠⵠΔⵠΔᐃⲆ;
        ΔⲆ[1024][1][b("010_010_000")] = ⲆⲆ.ⵠⲆⲆⵠⵠᐃΔΔⵠ;
        ΔⲆ[1024][1][b("010_010_010")] = ⲆⲆ.ⵠΔⵠⲆⲆⲆⲆΔᐃ;
        ΔⲆ[1024][1][b("010_011_000")] = ⲆⲆ.ᐃⵠΔⵠⲆⵠᐃⵠᐃ;
        ΔⲆ[1024][1][b("010_011_010")] = ⲆⲆ.ΔⵠᐃⲆΔⲆᐃⲆΔ;
        ΔⲆ[1024][1][b("010_011_011")] = ⲆⲆ.ᐃᐃⵠΔⲆΔⵠΔΔ;
        ΔⲆ[1024][1][b("010_110_000")] = ⲆⲆ.ⲆⲆΔΔⵠΔⵠⵠⲆ;
        ΔⲆ[1024][1][b("010_110_010")] = ⲆⲆ.ⲆΔⲆⵠᐃΔᐃⵠΔ;
        ΔⲆ[1024][1][b("010_110_110")] = ⲆⲆ.ΔⲆⵠⲆΔⵠᐃᐃⲆ;
        ΔⲆ[1024][1][b("010_111_000")] = ⲆⲆ.ⲆΔᐃⲆⲆΔⵠⵠΔ;
        ΔⲆ[1024][1][b("010_111_010")] = ⲆⲆ.ⵠᐃⲆᐃⵠⲆⲆⲆΔ;
        ΔⲆ[1024][1][b("010_111_011")] = ⲆⲆ.ᐃⵠᐃⲆᐃⵠΔⲆⲆ;
        ΔⲆ[1024][1][b("010_111_110")] = ⲆⲆ.ΔᐃΔΔΔⵠⲆⲆⲆ;
        ΔⲆ[1024][1][b("010_111_111")] = ⲆⲆ.ΔᐃⵠⵠΔᐃⵠⲆⲆ;
        ΔⲆ[1024][1][b("011_011_000")] = ⲆⲆ.ⲆⲆᐃᐃᐃⲆⵠᐃᐃ;
        ΔⲆ[1024][1][b("011_011_010")] = ⲆⲆ.ⵠΔᐃᐃΔΔⲆΔᐃ;
        ΔⲆ[1024][1][b("011_011_011")] = ⲆⲆ.ΔⲆⲆⲆⲆΔΔΔⵠ;
        ΔⲆ[1024][1][b("011_111_000")] = ⲆⲆ.ⵠⵠⵠⲆᐃᐃⲆⵠⲆ;
        ΔⲆ[1024][1][b("011_111_010")] = ⲆⲆ.ΔⵠⲆⵠᐃΔⵠᐃᐃ;
        ΔⲆ[1024][1][b("011_111_011")] = ⲆⲆ.ᐃⵠΔⲆΔᐃᐃᐃΔ;
        ΔⲆ[1024][1][b("011_111_110")] = ⲆⲆ.ΔⲆⲆⲆⲆⲆΔⵠᐃ;
        ΔⲆ[1024][1][b("011_111_111")] = ⲆⲆ.ⵠⲆⲆⵠΔⵠⲆⲆᐃ;
        ΔⲆ[1024][1][b("110_110_000")] = ⲆⲆ.ᐃⲆⲆΔΔΔΔΔⵠ;
        ΔⲆ[1024][1][b("110_110_010")] = ⲆⲆ.ΔⲆΔΔΔⵠⲆⲆᐃ;
        ΔⲆ[1024][1][b("110_110_110")] = ⲆⲆ.ΔⵠⵠᐃΔⵠⵠⲆⲆ;
        ΔⲆ[1024][1][b("110_111_000")] = ⲆⲆ.ⵠⵠⵠΔⵠⲆᐃᐃΔ;
        ΔⲆ[1024][1][b("110_111_010")] = ⲆⲆ.ᐃⵠⵠᐃΔⵠΔᐃⲆ;
        ΔⲆ[1024][1][b("110_111_011")] = ⲆⲆ.ⵠⵠΔⵠΔⲆᐃΔⵠ;
        ΔⲆ[1024][1][b("110_111_110")] = ⲆⲆ.ⵠᐃⲆⲆⵠΔⵠᐃᐃ;
        ΔⲆ[1024][1][b("110_111_111")] = ⲆⲆ.ⵠⲆⵠᐃⵠⵠᐃⲆΔ;
        ΔⲆ[1024][1][b("111_111_011")] = ⲆⲆ.ⲆⲆᐃⲆⲆΔⲆ;
        ΔⲆ[1024][1][b("111_111_110")] = ⲆⲆ.ᐃΔᐃⵠΔⵠⲆᐃⵠ;
        ΔⲆ[1024][1][b("111_111_011")] = ⲆⲆ.ⲆⲆᐃⲆⲆΔⲆ;
        ΔⲆ[1024][1][b("111_111_000")] = ⲆⲆ.ⲆΔⲆᐃⵠᐃⲆᐃⵠ;
        ΔⲆ[1024][1][b("111_111_111")] = ⲆⲆ.ᐃⵠΔΔΔᐃⲆⲆⵠ;
        ΔⲆ[1024][1][b("111_111_010")] = ⲆⲆ.ΔΔΔΔⵠᐃⲆΔⵠ;
        ΔⲆ[32] = [];
        ΔⲆ[32][0] = ⲆⲆ.ΔⲆΔᐃⵠΔⲆ;
        ΔⲆ[32][1] = ⲆⲆ.ΔⲆⵠⵠᐃΔᐃ;
        ΔⲆ[205] = [];
        ΔⲆ[205][0] = ⲆⲆ.ⲆΔᐃΔᐃⲆⵠ;
        ΔⲆ[205][1] = ⲆⲆ.ⲆⵠⲆⵠⵠⵠᐃ;
        ΔⲆ[957] = [];
        ΔⲆ[957][0] = ⲆⲆ.ⲆᐃⲆⵠΔⵠⵠ;
        ΔⲆ[957][1] = ⲆⲆ.ⲆⲆⵠᐃᐃⲆᐃ;
        ΔⲆ[207] = [];
        ΔⲆ[207][0] = ⲆⲆ.ΔⵠᐃΔⵠΔⵠ;
        ΔⲆ[207][1] = ⲆⲆ.ᐃⲆⲆΔⲆᐃΔ;
        ΔⲆ[954] = [];
        ΔⲆ[954][0] = ⲆⲆ.ΔΔⵠⲆⲆⵠⵠ;
        ΔⲆ[954][1] = ⲆⲆ.ΔᐃᐃⵠᐃⵠΔ;
        ΔⲆ[958] = [];
        ΔⲆ[958][0] = ⲆⲆ.ᐃⵠΔᐃᐃⵠΔ;
        ΔⲆ[958][1] = ⲆⲆ.ⲆⵠᐃΔΔⲆᐃ;
        ΔⲆ[209] = [];
        ΔⲆ[209][0] = ⲆⲆ.ⲆᐃΔᐃⲆΔⲆ;
        ΔⲆ[209][1] = ⲆⲆ.ᐃⲆΔⵠⲆⵠⵠ;
        ΔⲆ[971] = [];
        ΔⲆ[971][0] = ⲆⲆ.ᐃΔⵠΔⲆⲆⵠ;
        ΔⲆ[971][1] = ⲆⲆ.ⲆᐃᐃΔⵠΔᐃ;
        ΔⲆ[211] = [];
        ΔⲆ[211][0] = ⲆⲆ.ᐃᐃΔΔᐃᐃΔ;
        ΔⲆ[211][1] = ⲆⲆ.ᐃᐃⲆⲆΔΔⵠ;
        ΔⲆ[986] = [];
        ΔⲆ[986][0] = ⲆⲆ.ⲆΔⵠⲆⲆᐃⵠ;
        ΔⲆ[986][1] = ⲆⲆ.ᐃⵠΔⲆᐃⵠΔ;
        ΔⲆ[989] = [];
        ΔⲆ[989][0] = [ⲆⲆ.ⵠΔΔⵠΔⵠⵠ];
        ΔⲆ[989][1] = [ⲆⲆ.ᐃⵠⲆᐃΔⵠⲆ];
        ΔⲆ[217] = [];
        ΔⲆ[217][0] = ⲆⲆ.ⲆⵠⵠⵠⲆΔᐃ;
        ΔⲆ[217][1] = ⲆⲆ.ᐃⲆΔΔⵠᐃⵠ;
        ΔⲆ[219] = [];
        ΔⲆ[219][0] = ⲆⲆ.ⲆΔⲆΔΔⲆⵠ;
        ΔⲆ[219][1] = ⲆⲆ.ⲆⵠⵠΔᐃΔⲆ;
        ΔⲆ[218] = [];
        ΔⲆ[218][0] = ⲆⲆ.ⵠⵠⵠⲆⵠⲆΔ;
        ΔⲆ[218][1] = ⲆⲆ.ᐃⵠΔⵠᐃᐃⲆ;
        ΔⲆ[212] = [];
        ΔⲆ[212][0] = ⲆⲆ.ⲆΔⲆᐃᐃⵠⲆ;
        ΔⲆ[212][1] = ⲆⲆ.ᐃⲆΔΔΔΔⵠ;
        ΔⲆ[213] = [];
        ΔⲆ[213][0] = ⲆⲆ.ⲆᐃᐃᐃΔΔᐃ;
        ΔⲆ[213][1] = ⲆⲆ.ΔΔⲆᐃΔⲆⵠ;
        ΔⲆ[214] = [];
        ΔⲆ[214][0] = ⲆⲆ.ᐃΔΔⲆΔⵠⲆ;
        ΔⲆ[214][1] = ⲆⲆ.ᐃΔᐃⲆⵠⵠⵠ;
        ΔⲆ[215] = [];
        ΔⲆ[215][0] = ⲆⲆ.ⵠᐃⵠᐃⲆⲆⵠ;
        ΔⲆ[215][1] = ⲆⲆ.ⵠΔⵠⲆⵠΔᐃ;
        ΔⲆ[216] = [];
        ΔⲆ[216][0] = ⲆⲆ.ΔⵠᐃΔⵠⵠⵠ;
        ΔⲆ[216][1] = ⲆⲆ.ⵠⲆᐃΔΔⵠⵠ;
        ΔⲆ[220] = [];
        ΔⲆ[220][0] = ⲆⲆ.ⵠᐃⲆⲆΔΔⲆ;
        ΔⲆ[220][1] = ⲆⲆ.ⲆⲆᐃⲆΔᐃⲆ;
        ΔⲆ[1020] = [];
        ΔⲆ[1020][0] = ⲆⲆ.ⵠΔΔΔΔᐃΔ;
        ΔⲆ[1020][1] = ⲆⲆ.ⵠᐃᐃΔᐃⲆⵠ;
        ΔⲆ[1021] = [];
        ΔⲆ[1021][0] = ⲆⲆ.ᐃᐃΔΔΔⲆⲆ;
        ΔⲆ[1021][1] = ⲆⲆ.ᐃΔᐃⲆΔⲆᐃ;
        ΔⲆ[39] = [];
        ΔⲆ[39][0] = ⲆⲆ.ᐃΔΔⵠΔⲆᐃ;
        ΔⲆ[39][1] = ⲆⲆ.ᐃΔⵠⵠⲆᐃⲆ;
        ΔⲆ[1022] = ⲆⲆ.ᐃΔⲆᐃⵠⲆⲆ;
        ΔⲆ[1023] = ⲆⲆ.ⵠΔᐃᐃΔᐃΔ;
        ΔⲆ[1041] = [];
        ΔⲆ[1041][0] = [];
        ΔⲆ[1041][1] = [];
        ΔⲆ[1041][0].push(ⲆⲆ.ᐃᐃᐃⲆⲆᐃᐃ);
        ΔⲆ[1041][0].push(ⲆⲆ.ΔᐃⵠᐃⲆΔⲆ);
        ΔⲆ[1041][0].push(ⲆⲆ.ΔⲆⲆⲆⲆᐃⲆ);
        ΔⲆ[1041][1].push(ⲆⲆ.ΔᐃΔⵠⵠᐃΔ);
        ΔⲆ[1041][1].push(ⲆⲆ.ᐃΔⲆⲆⲆΔⵠ);
        ΔⲆ[1041][1].push(ⲆⲆ.ⲆΔⲆᐃⲆⵠΔ);
        ΔⲆ[244] = [];
        ΔⲆ[244][0] = [];
        ΔⲆ[244][1] = [];
        ΔⲆ[244][0].push(ⲆⲆ.ⲆⲆⲆΔⵠᐃᐃ);
        ΔⲆ[244][0].push(ⲆⲆ.ⵠΔⵠⲆᐃΔⵠ);
        ΔⲆ[244][0].push(ⲆⲆ.ΔⵠᐃⵠⵠᐃΔ);
        ΔⲆ[244][1].push(ⲆⲆ.ⵠⵠΔᐃⲆⲆᐃ);
        ΔⲆ[244][1].push(ⲆⲆ.ⵠⲆⵠⵠⲆⲆⲆ);
        ΔⲆ[244][1].push(ⲆⲆ.ᐃⵠⵠⵠⵠⲆⲆ);
        ΔⲆ[1052] = [];
        ΔⲆ[1052][0] = [];
        ΔⲆ[1052][1] = [];
        ΔⲆ[1052][0].push(ⲆⲆ.ⲆⵠΔⲆⲆⲆⵠ);
        ΔⲆ[1052][0].push(ⲆⲆ.ΔΔΔⵠⲆᐃⵠ);
        ΔⲆ[1052][0].push(ⲆⲆ.ⵠΔᐃⲆᐃⵠⲆ);
        ΔⲆ[1052][0].push(ⲆⲆ.ΔΔⵠΔⲆⲆΔ);
        ΔⲆ[1052][0].push(ⲆⲆ.ΔⵠᐃΔⲆΔΔ);
        ΔⲆ[1052][1].push(ⲆⲆ.ⵠᐃᐃᐃⵠᐃⵠ);
        ΔⲆ[1052][1].push(ⲆⲆ.ⲆⲆⵠⵠⵠⲆⵠ);
        ΔⲆ[1052][1].push(ⲆⲆ.ⵠΔⵠᐃΔⵠⲆ);
        ΔⲆ[1052][1].push(ⲆⲆ.ΔⲆΔΔᐃᐃΔ);
        ΔⲆ[1052][1].push(ⲆⲆ.ⵠᐃⲆΔΔΔⲆ);
        ΔⲆ[450] = [];
        ΔⲆ[450][0] = ⲆⲆ.ΔΔᐃⲆⲆΔⵠ;
        ΔⲆ[450][1] = ⲆⲆ.ΔΔᐃⵠⵠⲆⲆ;
        ΔⲆ[453] = [];
        ΔⲆ[453][0] = ⲆⲆ.ⵠⵠΔᐃᐃⵠⲆ;
        ΔⲆ[453][1] = ⲆⲆ.ΔΔΔⲆΔⵠⵠ;
        ΔⲆ[454] = [];
        ΔⲆ[454][0] = ⲆⲆ.ⲆΔΔᐃΔⲆΔ;
        ΔⲆ[454][1] = ⲆⲆ.ΔⵠᐃᐃΔⵠᐃ;
        ΔⲆ[464] = ⲆⲆ.ⵠⵠⲆⲆⵠⲆⲆ;
        ΔⲆ[468] = ⲆⲆ.ⵠᐃⲆᐃᐃⲆᐃ;
        ΔⲆ[469] = ⲆⲆ.ⲆᐃⲆⵠⲆⲆᐃ;
        ΔⲆ[20] = [];
        ΔⲆ[20][0] = ⲆⲆ.ⵠᐃⵠⲆᐃⲆᐃ;
        ΔⲆ[20][1] = ⲆⲆ.ΔΔΔᐃⵠΔⲆ;
        ΔⲆ[920] = [];
        ΔⲆ[920][0] = ⲆⲆ.ΔⲆᐃᐃⲆⲆΔ;
        ΔⲆ[920][1] = ⲆⲆ.ⵠΔⲆⵠⲆⲆᐃ;
        ΔⲆ[21] = [];
        ΔⲆ[21][0] = ⲆⲆ.ΔⲆⵠⵠΔⵠᐃ;
        ΔⲆ[21][1] = ⲆⲆ.ⵠᐃⲆᐃΔΔⵠ;
        ΔⲆ[924] = [];
        ΔⲆ[924][0] = ⲆⲆ.ΔⲆᐃᐃⲆⲆΔ;
        ΔⲆ[924][1] = ⲆⲆ.ⵠΔⲆⵠⲆⲆᐃ;
        ΔⲆ[44] = [];
        ΔⲆ[44][0] = ⲆⲆ.ⵠⲆΔᐃΔⲆᐃ;
        ΔⲆ[44][1] = ⲆⲆ.ᐃΔⲆⵠᐃⲆⲆ;
        ΔⲆ[19] = [];
        ΔⲆ[19][0] = ⲆⲆ.ⵠⲆΔΔΔⲆΔ;
        ΔⲆ[19][1] = ⲆⲆ.ᐃΔⵠΔᐃⲆΔ;
        ΔⲆ[34] = [];
        ΔⲆ[34][0] = ⲆⲆ.ⲆⲆΔⲆⵠⲆⵠ;
        ΔⲆ[34][1] = ⲆⲆ.ΔᐃΔⵠΔⵠⵠ;
        ΔⲆ[17] = [];
        ΔⲆ[17][0] = ⲆⲆ.ᐃΔΔⵠΔᐃΔ;
        ΔⲆ[17][1] = ⲆⲆ.ⲆΔⲆⵠᐃⵠⵠ;
        ΔⲆ[63] = [];
        ΔⲆ[63][0] = ⲆⲆ.ΔΔᐃᐃⵠⵠⲆ;
        ΔⲆ[63][1] = ⲆⲆ.ⲆⵠΔΔΔᐃⵠ;
        ΔⲆ[60] = [];
        ΔⲆ[60][0] = ⲆⲆ.ᐃⲆᐃⵠⵠⲆⵠ;
        ΔⲆ[60][1] = ⲆⲆ.ᐃΔⲆΔⲆⵠⵠ;
        ΔⲆ[94] = [];
        ΔⲆ[94][0] = ⲆⲆ.ᐃᐃΔⲆᐃᐃΔⵠⲆ;
        ΔⲆ[94][1] = ⲆⲆ.ⲆⲆᐃⵠⲆᐃᐃⵠⵠ;
        ΔⲆ[95] = [];
        ΔⲆ[95][0] = ⲆⲆ.ⲆᐃΔᐃΔⵠᐃⲆΔ;
        ΔⲆ[95][1] = ⲆⲆ.ᐃⲆⲆᐃⲆᐃΔⵠᐃ;
        ΔⲆ[96] = [];
        ΔⲆ[96][0] = ⲆⲆ.ⲆΔᐃⵠᐃΔᐃⲆᐃ;
        ΔⲆ[96][1] = ⲆⲆ.ΔⲆᐃΔᐃᐃⵠΔⵠ;
        ΔⲆ[97] = [];
        ΔⲆ[97][0] = ⲆⲆ.ΔᐃΔΔⵠⲆΔΔΔ;
        ΔⲆ[97][1] = ⲆⲆ.ᐃΔⲆΔⵠⲆⲆⲆⵠ;
        ΔⲆ[98] = [];
        ΔⲆ[98][0] = ⲆⲆ.ⲆⲆⵠᐃᐃΔⵠΔΔ;
        ΔⲆ[98][1] = ⲆⲆ.ΔⵠΔᐃᐃⵠᐃⵠΔ;
        ΔⲆ[99] = [];
        ΔⲆ[99][0] = ⲆⲆ.ᐃΔᐃΔⲆⲆⵠⲆΔ;
        ΔⲆ[99][1] = ⲆⲆ.ⲆⵠⲆⵠΔΔΔⵠᐃ;
        ΔⲆ[90] = [];
        ΔⲆ[90][0] = ⲆⲆ.ᐃΔⵠⲆᐃΔⵠ;
        ΔⲆ[90][1] = ⲆⲆ.ⵠΔᐃΔⵠᐃΔ;
        ΔⲆ[91] = [];
        ΔⲆ[91][0] = ⲆⲆ.ⵠᐃΔⲆΔⲆΔ;
        ΔⲆ[91][1] = ⲆⲆ.ᐃⲆᐃⵠΔⵠⵠ;
        ΔⲆ[71] = [];
        ΔⲆ[71][0] = ⲆⲆ.ⵠΔⲆᐃⲆᐃᐃⵠᐃ;
        ΔⲆ[71][1] = ⲆⲆ.ⲆⵠⵠⵠⵠᐃΔⵠⲆ;
        ΔⲆ[72] = [];
        ΔⲆ[72][0] = ⲆⲆ.ᐃΔⵠΔᐃⵠⲆΔⵠ;
        ΔⲆ[72][1] = ⲆⲆ.ⵠᐃΔΔᐃⵠⲆⵠΔ;
        ΔⲆ[73] = [];
        ΔⲆ[73][0] = ⲆⲆ.ΔᐃᐃᐃⵠᐃΔⵠⲆ;
        ΔⲆ[73][1] = ⲆⲆ.ⵠΔᐃᐃⲆⲆᐃᐃΔ;
        ΔⲆ[74] = [];
        ΔⲆ[74][0] = ⲆⲆ.ΔᐃΔᐃⵠΔⲆΔᐃ;
        ΔⲆ[74][1] = ⲆⲆ.ⵠᐃᐃΔⵠⲆⵠᐃΔ;
        ΔⲆ[75] = [];
        ΔⲆ[75][0] = ⲆⲆ.ⲆΔΔⲆΔⲆᐃΔⵠ;
        ΔⲆ[75][1] = ⲆⲆ.ᐃⲆⵠⵠᐃⲆᐃΔⲆ;
        ΔⲆ[76] = [];
        ΔⲆ[76][0] = ⲆⲆ.ᐃΔⵠⵠⵠΔΔΔⵠ;
        ΔⲆ[76][1] = ⲆⲆ.ⲆⵠⲆⲆΔⵠⵠΔⲆ;
        ΔⲆ[101] = [];
        ΔⲆ[101][0] = ⲆⲆ.ⲆⲆᐃⲆΔⲆⵠ;
        ΔⲆ[101][1] = ⲆⲆ.ᐃΔⵠⲆⵠᐃⵠ;
        ΔⲆ[64] = [];
        ΔⲆ[64][0] = ⲆⲆ.ⲆᐃΔᐃΔᐃᐃⲆⵠ;
        ΔⲆ[64][1] = ⲆⲆ.ΔΔΔΔⵠᐃⲆΔΔ;
        ΔⲆ[102] = [];
        ΔⲆ[102][0] = ⲆⲆ.ⵠᐃᐃΔᐃᐃⵠ;
        ΔⲆ[102][1] = ⲆⲆ.ⵠᐃᐃⲆᐃⲆᐃ;
        ΔⲆ[65] = [];
        ΔⲆ[65][0] = ⲆⲆ.ⲆⵠⲆⲆᐃᐃΔΔⵠ;
        ΔⲆ[65][1] = ⲆⲆ.ΔⵠⲆᐃⵠⵠΔΔᐃ;
        ΔⲆ[103] = [];
        ΔⲆ[103][0] = ⲆⲆ.ᐃⵠΔΔᐃᐃⵠ;
        ΔⲆ[103][1] = ⲆⲆ.ΔΔΔⵠⵠⵠⵠ;
        ΔⲆ[66] = [];
        ΔⲆ[66][0] = ⲆⲆ.ᐃⵠᐃⲆᐃⲆⵠΔⵠ;
        ΔⲆ[66][1] = ⲆⲆ.ⲆᐃⲆⵠΔΔΔΔᐃ;
        ΔⲆ[104] = [];
        ΔⲆ[104][0] = ⲆⲆ.ⲆⵠᐃΔⵠⲆⲆ;
        ΔⲆ[104][1] = ⲆⲆ.ⵠΔⲆⲆΔᐃⵠ;
        ΔⲆ[67] = [];
        ΔⲆ[67][0] = ⲆⲆ.ᐃΔⲆΔⵠⲆᐃΔΔ;
        ΔⲆ[67][1] = ⲆⲆ.ⵠⲆΔⲆΔⵠᐃΔⵠ;
        ΔⲆ[105] = [];
        ΔⲆ[105][0] = ⲆⲆ.ⲆΔⵠΔΔΔΔ;
        ΔⲆ[105][1] = ⲆⲆ.ΔⵠⲆⵠⲆⲆⲆ;
        ΔⲆ[68] = [];
        ΔⲆ[68][0] = ⲆⲆ.ΔⵠΔⵠⵠⲆΔⲆΔ;
        ΔⲆ[68][1] = ⲆⲆ.ᐃⲆⲆΔⵠⵠⵠⲆⲆ;
        ΔⲆ[106] = [];
        ΔⲆ[106][0] = ⲆⲆ.ᐃⵠΔⲆᐃᐃⲆ;
        ΔⲆ[106][1] = ⲆⲆ.ᐃᐃⵠᐃⲆⵠΔⵠΔ;
        ΔⲆ[69] = [];
        ΔⲆ[69][0] = ⲆⲆ.ⵠⲆᐃΔΔⲆΔᐃΔ;
        ΔⲆ[69][1] = ⲆⲆ.ᐃⵠⵠᐃΔᐃᐃⲆⵠ;
        ΔⲆ[107] = [];
        ΔⲆ[107][0] = ⲆⲆ.ⵠΔΔΔΔⲆⲆ;
        ΔⲆ[107][1] = ⲆⲆ.ΔⵠᐃᐃⲆⵠΔ;
        ΔⲆ[70] = [];
        ΔⲆ[70][0] = ⲆⲆ.ΔⲆⵠΔⲆⵠⲆᐃᐃ;
        ΔⲆ[70][1] = ⲆⲆ.ᐃⵠⲆᐃᐃᐃΔΔⲆ;
        ΔⲆ[80] = [];
        ΔⲆ[80][0] = ⲆⲆ.ᐃⵠⵠⲆⵠᐃⵠ;
        ΔⲆ[80][1] = ⲆⲆ.ΔⲆᐃⵠΔⲆᐃ;
        ΔⲆ[81] = [];
        ΔⲆ[81][0] = ⲆⲆ.ⲆⲆΔΔⵠᐃΔ;
        ΔⲆ[81][1] = ⲆⲆ.ΔⵠⲆⲆᐃΔⵠ;
        ΔⲆ[22] = [];
        ΔⲆ[22][0] = ⲆⲆ.ᐃᐃⲆᐃᐃᐃⲆ;
        ΔⲆ[22][1] = ⲆⲆ.ⲆΔΔⵠⲆᐃΔ;
        ΔⲆ[928] = [];
        ΔⲆ[928][0] = ⲆⲆ.ⵠⲆᐃⲆⲆΔΔ;
        ΔⲆ[928][1] = ⲆⲆ.ᐃⲆᐃᐃᐃⵠⵠ;
        ΔⲆ[935] = [];
        ΔⲆ[935][0] = [];
        ΔⲆ[935][1] = [];
        ΔⲆ[935][0].push(ⲆⲆ.ᐃΔⵠΔᐃⵠⵠⲆⵠ);
        ΔⲆ[935][0].push(ⲆⲆ.ⲆⵠⵠᐃⵠᐃᐃⵠⲆ);
        ΔⲆ[935][1].push(ⲆⲆ.ⲆⵠⵠᐃⵠᐃᐃⵠⲆ);
        ΔⲆ[935][1].push(ⲆⲆ.ᐃᐃᐃᐃΔΔᐃⲆᐃ);
        ΔⲆ[941] = [];
        ΔⲆ[941][0] = [];
        ΔⲆ[941][1] = [];
        ΔⲆ[941][0].push(ⲆⲆ.ⵠⵠΔΔⲆᐃΔ);
        ΔⲆ[941][0].push(ⲆⲆ.ⲆΔⵠΔⲆᐃᐃ);
        ΔⲆ[941][0].push(ⲆⲆ.ᐃⲆⲆⵠⵠⲆΔ);
        ΔⲆ[941][1].push(ⲆⲆ.ⲆⵠⵠⵠⲆⵠΔ);
        ΔⲆ[941][1].push(ⲆⲆ.ᐃⵠᐃⲆᐃᐃⲆ);
        ΔⲆ[941][1].push(ⲆⲆ.ΔᐃⵠⲆΔⵠⲆ);
        ΔⲆ[53] = [];
        ΔⲆ[53][0] = ⲆⲆ.ⵠΔᐃⵠᐃΔΔ;
        ΔⲆ[53][1] = ⲆⲆ.ⲆⲆΔⵠΔΔⲆ;
        ΔⲆ[54] = [];
        ΔⲆ[54][0] = ⲆⲆ.ⲆᐃΔᐃⵠⲆᐃ;
        ΔⲆ[54][1] = ⲆⲆ.ⵠΔⵠⲆΔΔⵠ;
        ΔⲆ[241] = [];
        ΔⲆ[241][0] = [];
        ΔⲆ[241][1] = [];
        ΔⲆ[241][0].push(ⲆⲆ.ⵠΔⵠⲆΔᐃⲆ);
        ΔⲆ[241][0].push(ⲆⲆ.ΔⵠΔΔⲆᐃⲆ);
        ΔⲆ[241][0].push(ⲆⲆ.ΔⵠΔΔⲆⵠⵠ);
        ΔⲆ[241][1].push(ⲆⲆ.ΔᐃᐃⲆᐃΔⵠ);
        ΔⲆ[241][1].push(ⲆⲆ.ⲆΔⲆΔΔᐃⵠ);
        ΔⲆ[241][1].push(ⲆⲆ.ΔⲆᐃⲆΔᐃᐃ);
        ΔⲆ[202] = [];
        ΔⲆ[202][0] = [];
        ΔⲆ[202][1] = [];
        ΔⲆ[202][0].push(ⲆⲆ.ⵠᐃᐃⲆⲆᐃⵠ);
        ΔⲆ[202][0].push(ⲆⲆ.ⵠᐃᐃᐃΔᐃⲆ);
        ΔⲆ[202][0].push(ⲆⲆ.ΔⲆⵠⵠᐃΔⵠ);
        ΔⲆ[202][1].push(ⲆⲆ.ⲆⵠᐃⵠⵠΔΔ);
        ΔⲆ[202][1].push(ⲆⲆ.ⲆⵠⵠⲆΔΔᐃ);
        ΔⲆ[202][1].push(ⲆⲆ.ⵠᐃⲆᐃᐃᐃⲆ);
        ΔⲆ[203] = [];
        ΔⲆ[203][0] = [];
        ΔⲆ[203][1] = [];
        ΔⲆ[203][0].push(ⲆⲆ.ⲆΔⲆΔⵠⲆᐃ);
        ΔⲆ[203][0].push(ⲆⲆ.ΔⲆᐃⵠⵠⲆⵠ);
        ΔⲆ[203][0].push(ⲆⲆ.ᐃⵠⵠⵠΔⲆᐃ);
        ΔⲆ[203][0].push(ⲆⲆ.ⵠⲆⵠⵠΔᐃⵠ);
        ΔⲆ[203][0].push(ⲆⲆ.ΔⵠⵠΔΔᐃᐃ);
        ΔⲆ[203][0].push(ⲆⲆ.ⵠᐃΔⵠⵠᐃΔ);
        ΔⲆ[203][1].push(ⲆⲆ.ΔⵠᐃⵠⲆⲆⲆ);
        ΔⲆ[203][1].push(ⲆⲆ.ⵠΔΔΔᐃⵠᐃ);
        ΔⲆ[203][1].push(ⲆⲆ.ᐃΔⲆᐃⲆᐃⵠ);
        ΔⲆ[203][1].push(ⲆⲆ.ⲆⵠΔⲆⵠⵠΔ);
        ΔⲆ[203][1].push(ⲆⲆ.ⵠᐃⵠΔⵠᐃⵠ);
        ΔⲆ[203][1].push(ⲆⲆ.ⲆⲆⲆᐃⵠⵠΔ);
        ΔⲆ[Gr.ⲆⵠΔΔᐃ] = [];
        ΔⲆ[Gr.ⲆⵠΔΔᐃ][0] = [];
        ΔⲆ[Gr.ⲆⵠΔΔᐃ][1] = [];
        ΔⲆ[Gr.ⲆⵠΔΔᐃ][0].push(ⲆⲆ.ΔΔΔΔⵠᐃΔ);
        ΔⲆ[Gr.ⲆⵠΔΔᐃ][0].push(ⲆⲆ.ᐃⵠⲆⲆⵠⵠⵠ);
        ΔⲆ[Gr.ⲆⵠΔΔᐃ][0].push(ⲆⲆ.ⲆⲆΔΔΔⵠΔ);
        ΔⲆ[Gr.ⲆⵠΔΔᐃ][0].push(ⲆⲆ.ⵠⵠⵠⵠᐃⵠⵠ);
        ΔⲆ[Gr.ⲆⵠΔΔᐃ][0].push(ⲆⲆ.ⲆᐃΔᐃΔⲆⵠ);
        ΔⲆ[Gr.ⲆⵠΔΔᐃ][0].push(ⲆⲆ.ⲆᐃⵠⲆⲆΔⲆ);
        ΔⲆ[Gr.ⲆⵠΔΔᐃ][1].push(ⲆⲆ.ᐃΔᐃⲆⲆⲆΔ);
        ΔⲆ[Gr.ⲆⵠΔΔᐃ][1].push(ⲆⲆ.ᐃΔⲆΔᐃⵠⵠ);
        ΔⲆ[Gr.ⲆⵠΔΔᐃ][1].push(ⲆⲆ.ⲆⵠⲆᐃΔᐃⲆ);
        ΔⲆ[Gr.ⲆⵠΔΔᐃ][1].push(ⲆⲆ.ᐃΔⲆᐃΔᐃⵠ);
        ΔⲆ[Gr.ⲆⵠΔΔᐃ][1].push(ⲆⲆ.ᐃⲆⲆᐃΔⲆᐃ);
        ΔⲆ[Gr.ⲆⵠΔΔᐃ][1].push(ⲆⲆ.ᐃⵠΔΔᐃⲆᐃ);
        ΔⲆ[918] = [];
        ΔⲆ[918][0] = ⲆⲆ.ΔⵠΔⵠⲆᐃⵠ;
        ΔⲆ[918][1] = ⲆⲆ.ⲆⲆⵠΔΔΔΔ;
        ΔⲆ[919] = ⲆⲆ.ⵠⲆⲆΔⲆⲆⲆ;
        ΔⲆ[56] = [];
        ΔⲆ[56][0] = ⲆⲆ.ⵠⵠⲆΔΔΔⲆⵠᐃ;
        ΔⲆ[56][1] = ⲆⲆ.ⵠᐃᐃᐃΔᐃⲆⵠΔ;
        ΔⲆ[223] = [];
        ΔⲆ[223][0] = ⲆⲆ.ΔⲆⲆᐃᐃⲆΔ;
        ΔⲆ[223][1] = ⲆⲆ.ⵠⵠΔᐃⲆᐃΔ;
        ΔⲆ[224] = [];
        ΔⲆ[224][0] = ⲆⲆ.ΔⵠⵠΔΔΔΔ;
        ΔⲆ[224][1] = ⲆⲆ.ⵠⲆᐃⲆΔⵠᐃ;
        ΔⲆ[236] = [];
        ΔⲆ[236][0] = ⲆⲆ.ⲆΔΔΔⲆΔⵠ;
        ΔⲆ[236][1] = ⲆⲆ.ᐃᐃⲆᐃᐃΔⵠ;
        ΔⲆ[1033] = [];
        ΔⲆ[1033][0] = ⲆⲆ.ⲆΔⵠⲆⵠΔΔ;
        ΔⲆ[1033][1] = ⲆⲆ.ⵠᐃⵠⵠⵠⲆⵠ;
        ΔⲆ[1034] = ⲆⲆ.ⵠΔΔΔΔⵠΔ;
        ΔⲆ[1150] = [];
        ΔⲆ[1150][0] = ⲆⲆ.ⲆᐃΔⲆᐃⲆⵠ;
        ΔⲆ[1150][1] = ⲆⲆ.ᐃᐃⲆΔᐃⵠⵠ;
        ΔⲆ[1152] = [];
        ΔⲆ[1152][0] = ⲆⲆ.ⵠΔⵠΔⲆⵠΔ;
        ΔⲆ[1152][1] = ⲆⲆ.ⲆΔⲆⲆᐃⲆⵠ;
        ΔⲆ[1149] = ⲆⲆ.ΔᐃⵠᐃⲆⲆⲆ;
        ΔⲆ[1151] = ⲆⲆ.ⵠⲆᐃᐃᐃᐃΔ;
        ΔⲆ[1153] = ⲆⲆ.ΔΔⲆⵠΔΔⵠ;
        ΔⲆ[1143] = [];
        ΔⲆ[1143][0] = ⲆⲆ.ⵠΔⵠᐃΔΔⲆ;
        ΔⲆ[1143][1] = ⲆⲆ.ΔΔⲆᐃⵠⲆⲆ;
        ΔⲆ[1145] = [];
        ΔⲆ[1145][0] = ⲆⲆ.ⲆᐃᐃΔⲆⵠⲆ;
        ΔⲆ[1145][1] = ⲆⲆ.ⲆⵠΔⵠⵠⵠΔ;
        ΔⲆ[1146] = [];
        ΔⲆ[1146][0] = ⲆⲆ.ⲆⵠᐃᐃⲆⵠⵠ;
        ΔⲆ[1146][1] = ⲆⲆ.ⵠⵠⵠⵠΔⲆᐃ;
        ΔⲆ[1144] = ⲆⲆ.ᐃⵠⲆᐃΔᐃⲆ;
        ΔⲆ[1148] = ⲆⲆ.ᐃΔΔᐃⲆⵠⵠ;
        ΔⲆ[1147] = ⲆⲆ.ⲆⲆΔᐃⵠΔΔ;
        ΔⲆ[1053] = [];
        ΔⲆ[1053][0] = ⲆⲆ.ⵠⵠⲆⲆΔⲆᐃ;
        ΔⲆ[1053][1] = ⲆⲆ.ⵠᐃᐃⲆᐃΔⵠ;
        ΔⲆ[1055] = [];
        ΔⲆ[1055][0] = ⲆⲆ.ⵠⲆᐃΔⲆⵠΔ;
        ΔⲆ[1055][1] = ⲆⲆ.ⲆⵠⵠⲆⵠⲆⵠ;
        ΔⲆ[231] = [];
        ΔⲆ[231][0] = ⲆⲆ.ⵠᐃΔᐃⵠⲆᐃ;
        ΔⲆ[231][1] = ⲆⲆ.ⲆⲆᐃⵠⲆᐃΔ;
        ΔⲆ[1060] = [];
        ΔⲆ[1060][0] = ⲆⲆ.ΔΔⲆⲆⵠΔⵠ;
        ΔⲆ[1060][1] = ⲆⲆ.ⵠᐃΔΔΔᐃⲆ;
        ΔⲆ[1063] = [];
        ΔⲆ[1063][0] = ⲆⲆ.ⲆΔΔΔⲆᐃᐃ;
        ΔⲆ[1063][1] = ⲆⲆ.ⵠⲆⵠⵠⵠΔΔ;
        ΔⲆ[1059] = [];
        ΔⲆ[1059][0] = ⲆⲆ.ⲆⵠΔⲆᐃⲆΔ;
        ΔⲆ[1059][1] = ⲆⲆ.ᐃᐃⵠΔΔⲆᐃ;
        ΔⲆ[1062] = [];
        ΔⲆ[1062][0] = ⲆⲆ.ΔᐃᐃᐃΔⲆᐃ;
        ΔⲆ[1062][1] = ⲆⲆ.ᐃⵠΔᐃᐃᐃᐃ;
        ΔⲆ[1056] = ⲆⲆ.ⵠΔᐃⵠΔⲆⵠ;
        ΔⲆ[1057] = ⲆⲆ.ⲆᐃⵠⲆⲆⵠΔ;
        ΔⲆ[1058] = ⲆⲆ.ⵠΔⲆⲆΔⲆⲆ;
        ΔⲆ[1065] = ⲆⲆ.ⲆⲆΔⵠⲆⵠⵠ;
        ΔⲆ[1066] = ⲆⲆ.ᐃΔⲆΔⵠⵠᐃ;
        ΔⲆ[1067] = ⲆⲆ.ⲆΔⵠᐃΔⵠⵠ;
        ΔⲆ[1222] = [];
        ΔⲆ[1222][0] = ⲆⲆ.ᐃᐃⵠⵠⲆⵠΔΔᐃ;
        ΔⲆ[1222][1] = ⲆⲆ.ᐃΔΔⲆⲆΔΔΔⵠ;
        ΔⲆ[248] = [];
        ΔⲆ[248][0] = ⲆⲆ.ⲆᐃⲆⲆⲆᐃⵠⵠⵠ;
        ΔⲆ[248][1] = ⲆⲆ.ΔΔⲆᐃᐃⲆⵠⵠᐃ;
        ΔⲆ[1218] = [];
        ΔⲆ[1218][0] = ⲆⲆ.ᐃⵠⲆⵠΔᐃⲆΔΔ;
        ΔⲆ[1218][1] = ⲆⲆ.ΔⲆⲆⵠⵠᐃΔⵠᐃ;
        ΔⲆ[1221] = [];
        ΔⲆ[1221][0] = ⲆⲆ.ΔⲆⲆᐃⲆΔⵠΔΔ;
        ΔⲆ[1221][1] = ⲆⲆ.ⲆⲆᐃⲆᐃᐃΔᐃⵠ;
        ΔⲆ[1223] = ⲆⲆ.ⵠΔΔⵠᐃΔⵠ;
        ΔⲆ[1219] = ⲆⲆ.ᐃⵠⵠᐃΔⲆΔ;
        ΔⲆ[1068] = [];
        ΔⲆ[1068][0] = ⲆⲆ.ᐃᐃᐃᐃΔⵠΔ;
        ΔⲆ[1068][1] = ⲆⲆ.ᐃΔᐃⵠᐃΔⵠ;
        ΔⲆ[232] = [];
        ΔⲆ[232][0] = ⲆⲆ.ⲆᐃⲆΔᐃⵠⵠ;
        ΔⲆ[232][1] = ⲆⲆ.ⲆΔⲆⵠⲆⵠⲆ;
        ΔⲆ[1070] = [];
        ΔⲆ[1070][0] = ⲆⲆ.ᐃᐃᐃΔᐃⵠⵠ;
        ΔⲆ[1070][1] = ⲆⲆ.ΔⵠⵠᐃⵠⲆⵠ;
        ΔⲆ[1072] = [];
        ΔⲆ[1072][0] = ⲆⲆ.ⲆⲆΔᐃⵠΔⲆ;
        ΔⲆ[1072][1] = ⲆⲆ.ᐃᐃᐃⲆΔᐃⲆ;
        ΔⲆ[1075] = [];
        ΔⲆ[1075][0] = ⲆⲆ.ⵠᐃΔᐃᐃΔⲆ;
        ΔⲆ[1075][1] = ⲆⲆ.ⵠⵠⵠᐃⲆᐃⲆ;
        ΔⲆ[1071] = [];
        ΔⲆ[1071][0] = ⲆⲆ.ⲆⵠⲆⵠᐃⲆᐃ;
        ΔⲆ[1071][1] = ⲆⲆ.ⲆΔᐃⵠⲆⵠⲆ;
        ΔⲆ[1074] = [];
        ΔⲆ[1074][0] = ⲆⲆ.ⵠΔᐃΔᐃΔΔ;
        ΔⲆ[1074][1] = ⲆⲆ.ᐃᐃΔⵠΔⲆᐃ;
        ΔⲆ[1073] = [];
        ΔⲆ[1073][0] = ⲆⲆ.ΔⵠᐃΔᐃΔⲆ;
        ΔⲆ[1073][1] = ⲆⲆ.ⲆⲆⵠΔᐃⵠⲆ;
        ΔⲆ[1076] = [];
        ΔⲆ[1076][0] = ⲆⲆ.ᐃⲆᐃΔⵠΔΔ;
        ΔⲆ[1076][1] = ⲆⲆ.ΔⵠⵠⲆᐃⵠⲆ;
        ΔⲆ[1077] = ⲆⲆ.ⲆⲆⵠΔⲆΔⲆ;
        ΔⲆ[1078] = ⲆⲆ.ΔⲆⵠⵠⵠⵠᐃ;
        ΔⲆ[1079] = ⲆⲆ.ⲆⵠⵠⵠⵠΔⵠ;
        ΔⲆ[1083] = [];
        ΔⲆ[1083][0] = ⲆⲆ.ⵠⵠⵠᐃᐃⲆⲆ;
        ΔⲆ[1083][1] = ⲆⲆ.ⵠΔΔᐃΔᐃΔ;
        ΔⲆ[233] = [];
        ΔⲆ[233][0] = ⲆⲆ.ᐃΔⵠⵠⵠΔΔ;
        ΔⲆ[233][1] = ⲆⲆ.ⲆⵠⲆΔⵠⲆⵠ;
        ΔⲆ[1085] = [];
        ΔⲆ[1085][0] = ⲆⲆ.ᐃⲆᐃΔΔΔᐃ;
        ΔⲆ[1085][1] = ⲆⲆ.ΔⲆᐃᐃⲆⵠⲆ;
        ΔⲆ[1087] = [];
        ΔⲆ[1087][0] = ⲆⲆ.ⵠᐃΔᐃΔⲆⵠ;
        ΔⲆ[1087][1] = ⲆⲆ.ᐃⲆᐃⲆΔⵠΔ;
        ΔⲆ[1090] = [];
        ΔⲆ[1090][0] = ⲆⲆ.ⵠᐃⲆᐃⵠⲆⲆ;
        ΔⲆ[1090][1] = ⲆⲆ.Ⲇᐃⵠⵠᐃⵠᐃ;
        ΔⲆ[1086] = [];
        ΔⲆ[1086][0] = ⲆⲆ.ΔⲆΔⵠⲆⵠⵠ;
        ΔⲆ[1086][1] = ⲆⲆ.ⵠⵠΔᐃᐃΔⵠ;
        ΔⲆ[1089] = [];
        ΔⲆ[1089][0] = ⲆⲆ.ᐃᐃⵠᐃⲆᐃᐃ;
        ΔⲆ[1089][1] = ⲆⲆ.ⵠⵠᐃⵠⲆᐃΔ;
        ΔⲆ[1088] = [];
        ΔⲆ[1088][0] = ⲆⲆ.ⲆΔΔΔᐃΔⲆ;
        ΔⲆ[1088][1] = ⲆⲆ.ᐃᐃΔⵠΔΔᐃ;
        ΔⲆ[1091] = [];
        ΔⲆ[1091][0] = ⲆⲆ.ΔⲆᐃⲆᐃⵠⵠ;
        ΔⲆ[1091][1] = ⲆⲆ.ΔⲆⲆΔΔⲆΔ;
        ΔⲆ[1092] = ⲆⲆ.ⵠⵠⲆⵠⵠⲆΔ;
        ΔⲆ[1093] = ⲆⲆ.ΔΔⲆᐃᐃⵠⲆ;
        ΔⲆ[1094] = ⲆⲆ.ΔⵠΔⵠᐃⵠⵠ;
        ΔⲆ[1098] = [];
        ΔⲆ[1098][0] = ⲆⲆ.ΔΔᐃⲆⵠᐃᐃ;
        ΔⲆ[1098][1] = ⲆⲆ.ⲆⵠⲆⲆⵠⲆΔ;
        ΔⲆ[235] = [];
        ΔⲆ[235][0] = ⲆⲆ.ⲆⵠⲆⵠⲆⵠⵠ;
        ΔⲆ[235][1] = ⲆⲆ.ΔᐃⵠΔᐃⲆᐃ;
        ΔⲆ[1115] = ⲆⲆ.ⲆΔᐃⲆΔᐃΔ;
        ΔⲆ[1113] = [];
        ΔⲆ[1113][0] = ⲆⲆ.ⵠⵠⵠⵠⵠᐃᐃ;
        ΔⲆ[1113][1] = ⲆⲆ.ᐃΔⵠΔⲆⵠⲆ;
        ΔⲆ[1114] = [];
        ΔⲆ[1114][0] = ⲆⲆ.ΔⵠᐃΔⵠⲆΔ;
        ΔⲆ[1114][1] = ⲆⲆ.ⵠΔᐃΔⲆΔⲆ;
        ΔⲆ[1100] = [];
        ΔⲆ[1100][0] = ⲆⲆ.ⵠⲆⲆᐃΔⵠΔ;
        ΔⲆ[1100][1] = ⲆⲆ.ᐃⵠⲆⵠⲆⲆᐃ;
        ΔⲆ[1102] = [];
        ΔⲆ[1102][0] = ⲆⲆ.ⵠⵠΔΔⵠⲆΔ;
        ΔⲆ[1102][1] = ⲆⲆ.ΔΔⵠⲆΔᐃⵠ;
        ΔⲆ[1105] = [];
        ΔⲆ[1105][0] = ⲆⲆ.ᐃⲆΔⲆⲆΔᐃ;
        ΔⲆ[1105][1] = ⲆⲆ.ⵠᐃᐃⵠᐃⲆᐃ;
        ΔⲆ[1101] = [];
        ΔⲆ[1101][0] = ⲆⲆ.ⵠⵠΔⲆΔΔᐃ;
        ΔⲆ[1101][1] = ⲆⲆ.ⲆⲆΔⲆΔΔⲆ;
        ΔⲆ[1104] = [];
        ΔⲆ[1104][0] = ⲆⲆ.ᐃΔᐃΔⵠⵠΔ;
        ΔⲆ[1104][1] = ⲆⲆ.ⲆⵠᐃⵠᐃΔᐃ;
        ΔⲆ[1103] = [];
        ΔⲆ[1103][0] = ⲆⲆ.ⲆΔⵠⵠⲆΔᐃ;
        ΔⲆ[1103][1] = ⲆⲆ.ⵠᐃⲆⲆⵠⵠⵠ;
        ΔⲆ[1106] = [];
        ΔⲆ[1106][0] = ⲆⲆ.ΔⵠⲆΔᐃᐃᐃ;
        ΔⲆ[1106][1] = ⲆⲆ.ⵠᐃⲆΔᐃⵠⲆ;
        ΔⲆ[1107] = ⲆⲆ.ⲆᐃᐃᐃᐃⲆΔ;
        ΔⲆ[1108] = ⲆⲆ.ΔⵠⵠⵠᐃⲆᐃ;
        ΔⲆ[1109] = ⲆⲆ.ⵠΔⲆⲆⲆⲆⵠ;
        ΔⲆ[1119] = [];
        ΔⲆ[1119][0] = ⲆⲆ.ΔⵠⵠΔⵠᐃⵠ;
        ΔⲆ[1119][1] = ⲆⲆ.ⲆⵠᐃⲆΔᐃΔ;
        ΔⲆ[238] = [];
        ΔⲆ[238][0] = ⲆⲆ.ᐃΔᐃᐃⵠᐃⵠ;
        ΔⲆ[238][1] = ⲆⲆ.ΔⵠΔᐃⵠΔᐃ;
        ΔⲆ[1136] = ⲆⲆ.ⵠᐃΔⵠᐃⵠᐃ;
        ΔⲆ[1134] = [];
        ΔⲆ[1134][0] = ⲆⲆ.ᐃⲆΔᐃⵠᐃⲆ;
        ΔⲆ[1134][1] = ⲆⲆ.ΔⵠᐃⲆΔᐃΔ;
        ΔⲆ[1135] = [];
        ΔⲆ[1135][0] = ⲆⲆ.ⵠΔⵠᐃΔⵠⵠ;
        ΔⲆ[1135][1] = ⲆⲆ.ⲆⲆⵠΔⲆΔᐃ;
        ΔⲆ[1121] = [];
        ΔⲆ[1121][0] = ⲆⲆ.ΔⵠⲆⵠΔⲆᐃ;
        ΔⲆ[1121][1] = ⲆⲆ.ⲆⲆΔΔᐃⵠᐃ;
        ΔⲆ[1123] = [];
        ΔⲆ[1123][0] = ⲆⲆ.ΔΔᐃΔΔⵠⲆ;
        ΔⲆ[1123][1] = ⲆⲆ.ⲆⵠⲆΔⲆΔⲆ;
        ΔⲆ[1126] = [];
        ΔⲆ[1126][0] = ⲆⲆ.ⵠⲆⲆᐃⲆᐃΔ;
        ΔⲆ[1126][1] = ⲆⲆ.ⵠΔⵠⲆᐃⵠⲆ;
        ΔⲆ[1122] = [];
        ΔⲆ[1122][0] = ⲆⲆ.ΔᐃΔⵠⵠⲆⲆ;
        ΔⲆ[1122][1] = ⲆⲆ.ΔⲆΔⵠⲆⲆⵠ;
        ΔⲆ[1125] = [];
        ΔⲆ[1125][0] = ⲆⲆ.ᐃΔᐃⲆΔΔΔ;
        ΔⲆ[1125][1] = ⲆⲆ.ΔⵠⲆΔΔⲆⲆ;
        ΔⲆ[1124] = [];
        ΔⲆ[1124][0] = ⲆⲆ.ᐃΔⲆᐃⵠᐃⲆ;
        ΔⲆ[1124][1] = ⲆⲆ.ⵠⲆΔᐃᐃⲆΔ;
        ΔⲆ[1127] = [];
        ΔⲆ[1127][0] = ⲆⲆ.ⲆΔΔᐃΔᐃⵠ;
        ΔⲆ[1127][1] = ⲆⲆ.ⵠᐃⵠᐃΔⲆΔ;
        ΔⲆ[1128] = ⲆⲆ.ⵠᐃᐃⵠⵠᐃⲆ;
        ΔⲆ[1129] = ⲆⲆ.ⲆΔᐃΔⵠᐃⵠ;
        ΔⲆ[1130] = ⲆⲆ.ΔΔⵠᐃⲆΔⲆ;
        ΔⲆ[1042] = [];
        ΔⲆ[1042][0] = ⲆⲆ.ᐃΔᐃΔⵠⲆΔ;
        ΔⲆ[1042][1] = ⲆⲆ.ΔᐃⲆᐃΔᐃⵠ;
        ΔⲆ[1043] = [];
        ΔⲆ[1043][0] = ⲆⲆ.ΔⲆΔΔΔⲆⵠ;
        ΔⲆ[1043][1] = ⲆⲆ.ΔᐃⵠⲆⵠⵠᐃ;
        ΔⲆ[1044] = [];
        ΔⲆ[1044][0] = ⲆⲆ.ᐃᐃᐃᐃⲆⵠⵠ;
        ΔⲆ[1044][1] = ⲆⲆ.ᐃΔⲆΔΔᐃⵠ;
        ΔⲆ[228] = [];
        ΔⲆ[228][0] = ⲆⲆ.ᐃⵠΔⲆᐃⵠⵠ;
        ΔⲆ[228][1] = ⲆⲆ.ᐃⵠΔⲆᐃⵠⵠ;
        ΔⲆ[234] = [];
        ΔⲆ[234][0] = ⲆⲆ.ⵠⵠⵠⵠⲆⲆⲆ;
        ΔⲆ[234][1] = ⲆⲆ.ⵠⵠⵠⵠⲆⲆⲆ;
        ΔⲆ[249] = [];
        ΔⲆ[249][0] = ⲆⲆ.ⵠΔⲆⲆⵠⲆΔ;
        ΔⲆ[249][1] = ⲆⲆ.ⵠΔⲆⲆⵠⲆΔ;
        ΔⲆ[1045] = ⲆⲆ.ᐃᐃⵠᐃⵠⲆⵠ;
        ΔⲆ[89] = [];
        ΔⲆ[89][0] = ⲆⲆ.ΔᐃⵠⵠΔⲆΔ;
        ΔⲆ[89][1] = ⲆⲆ.ΔᐃΔⲆⵠⵠⲆ;
        ΔⲆ[92] = [];
        ΔⲆ[92][0] = ⲆⲆ.ᐃᐃⲆⵠᐃΔⲆ;
        ΔⲆ[92][1] = ⲆⲆ.ΔᐃⲆⲆⵠΔⲆ;
        ΔⲆ[247] = [];
        ΔⲆ[247][0] = [ⲆⲆ.ᐃⵠⵠᐃᐃⲆⵠ, ⲆⲆ.ΔⵠΔⵠᐃᐃⵠ, ⲆⲆ.ⲆⲆᐃⲆΔⲆⵠ, ⲆⲆ.ⵠᐃᐃΔᐃᐃⵠ, ⲆⲆ.ᐃⵠΔΔᐃᐃⵠ, ⲆⲆ.ⲆⵠᐃΔⵠⲆⲆ, ⲆⲆ.ⲆΔⵠΔΔΔΔ, ⲆⲆ.ᐃⵠΔⲆᐃᐃⲆ, ⲆⲆ.ⵠΔΔΔΔⲆⲆ];
        ΔⲆ[247][1] = [ⲆⲆ.ΔⵠⵠΔᐃⲆΔ, ⲆⲆ.ΔΔⲆⵠⵠⵠᐃ, ⲆⲆ.ᐃΔⵠⲆⵠᐃⵠ, ⲆⲆ.ⵠᐃᐃⲆᐃⲆᐃ, ⲆⲆ.ΔΔΔⵠⵠⵠⵠ, ⲆⲆ.ⵠΔⲆⲆΔᐃⵠ, ⲆⲆ.ΔⵠⲆⵠⲆⲆⲆ, ⲆⲆ.ᐃⵠΔⲆᐃᐃⲆ, ⲆⲆ.ΔⵠᐃᐃⲆⵠΔ];
        ΔⲆ[93] = [];
        ΔⲆ[93][0] = ⲆⲆ.ⵠⵠΔᐃⲆⵠⲆ;
        ΔⲆ[93][1] = ⲆⲆ.ⲆⲆⵠⵠᐃⲆᐃ;
        ΔⲆ[225] = [];
        ΔⲆ[225][0] = ⲆⲆ.ᐃⵠⲆⵠⵠⲆⵠ;
        ΔⲆ[225][1] = ⲆⲆ.ᐃΔⵠᐃⵠᐃΔ;
        ΔⲆ[226] = [];
        ΔⲆ[226][0] = ⲆⲆ.ᐃᐃⲆⵠⵠⲆⲆ;
        ΔⲆ[226][1] = ⲆⲆ.ᐃⲆⵠⲆᐃⲆΔ;
        ΔⲆ[24] = [];
        ΔⲆ[24][0] = ⲆⲆ.ⲆⵠᐃΔⲆⵠⲆ;
        ΔⲆ[24][1] = ⲆⲆ.ᐃⵠⲆⵠᐃᐃⲆ;
        ΔⲆ[88] = [];
        ΔⲆ[88][0] = ⲆⲆ.ᐃᐃᐃᐃⵠⲆΔⲆᐃ;
        ΔⲆ[88][1] = ⲆⲆ.ⲆⵠⵠΔΔᐃᐃΔΔ;
        ΔⲆ[87] = [];
        ΔⲆ[87][0] = ⲆⲆ.ΔᐃⲆⵠᐃᐃᐃᐃᐃ;
        ΔⲆ[87][1] = ⲆⲆ.ᐃᐃΔΔⵠⲆᐃⲆΔ;
        ΔⲆ[82] = [];
        ΔⲆ[82][0] = ⲆⲆ.ⲆᐃΔⲆⲆⲆⵠ;
        ΔⲆ[82][1] = ⲆⲆ.ⵠⵠⲆΔΔΔᐃ;
        ΔⲆ[621] = [];
        ΔⲆ[621][0] = [];
        ΔⲆ[621][1] = [];
        ΔⲆ[621][0].push(ⲆⲆ.ⲆⵠⵠΔᐃⵠΔᐃΔ);
        ΔⲆ[621][0].push(ⲆⲆ.ⵠⵠΔΔⲆⲆᐃᐃΔ);
        ΔⲆ[621][0].push(ⲆⲆ.ᐃⵠΔᐃⲆΔΔⲆⲆ);
        ΔⲆ[621][1].push(ⲆⲆ.ⲆᐃⵠⵠΔᐃΔⲆΔ);
        ΔⲆ[621][1].push(ⲆⲆ.ᐃᐃⲆᐃᐃⲆΔΔΔ);
        ΔⲆ[621][1].push(ⲆⲆ.ⲆΔᐃᐃⲆᐃΔⵠⲆ);
        ΔⲆ[619] = [];
        ΔⲆ[619][0] = [];
        ΔⲆ[619][1] = [];
        ΔⲆ[619][0].push(ⲆⲆ.ⲆᐃⲆΔⵠᐃⲆⲆΔ);
        ΔⲆ[619][0].push(ⲆⲆ.ⵠΔᐃⵠΔᐃⵠΔᐃ);
        ΔⲆ[619][0].push(ⲆⲆ.ΔΔⵠⵠᐃⲆⲆᐃⲆ);
        ΔⲆ[619][1].push(ⲆⲆ.ᐃⵠⲆⵠᐃⲆΔΔⲆ);
        ΔⲆ[619][1].push(ⲆⲆ.ΔᐃΔΔⲆⵠΔᐃⲆ);
        ΔⲆ[619][1].push(ⲆⲆ.ᐃⲆᐃΔⲆΔⲆΔⵠ);
        ΔⲆ[620] = [];
        ΔⲆ[620][0] = [];
        ΔⲆ[620][1] = [];
        ΔⲆ[620][0].push(ⲆⲆ.ⲆΔⵠⲆΔᐃⲆᐃⲆ);
        ΔⲆ[620][0].push(ⲆⲆ.ᐃⲆⲆΔⲆΔⲆⲆᐃ);
        ΔⲆ[620][0].push(ⲆⲆ.ᐃᐃΔⲆᐃΔⲆΔΔ);
        ΔⲆ[620][1].push(ⲆⲆ.ᐃⲆΔⲆᐃᐃΔⵠΔ);
        ΔⲆ[620][1].push(ⲆⲆ.ᐃᐃⲆⵠᐃΔⲆⲆⲆ);
        ΔⲆ[620][1].push(ⲆⲆ.ᐃⲆΔᐃΔᐃᐃⲆⵠ);
        ⲆⵠΔⲆ.g = [];
        ⲆⵠΔⲆ.g[0] = [ⲆⲆ.ᐃⲆⲆᐃᐃᐃᐃ, ⲆⲆ.ᐃⲆᐃΔⵠⲆⵠ];
        ⲆⵠΔⲆ.g[1] = ⲆⵠΔⲆ.g[0];
        ⲆⵠΔⲆ.g[2] = [ⲆⲆ.ⲆⲆΔᐃᐃⲆᐃ, ⲆⲆ.ⲆᐃⲆⲆᐃⲆᐃ];
        ⲆⵠΔⲆ.m = [];
        ⲆⵠΔⲆ.m[0] = [ⲆⲆ.ⵠΔⲆᐃΔⵠᐃ, ⲆⲆ.ΔΔᐃᐃΔⲆᐃ];
        ⲆⵠΔⲆ.m[1] = ⲆⵠΔⲆ.m[0];
        ⲆⵠΔⲆ.m[2] = [ⲆⲆ.ⲆⲆⲆⵠΔⵠᐃ, ⲆⲆ.ⲆΔⲆΔⲆⵠΔ];
        ⲆⵠΔⲆ.la = [];
        ⲆⵠΔⲆ.la[0] = [ⲆⲆ.ᐃΔᐃⵠⵠᐃⲆ, ⲆⲆ.ᐃΔⲆᐃⲆᐃⲆ];
        ⲆⵠΔⲆ.la[1] = ⲆⵠΔⲆ.la[0];
        ⲆⵠΔⲆ.la[2] = ⲆⵠΔⲆ.la[0];
        ⲆⵠΔⲆ.la[3] = ⲆⵠΔⲆ.la[0];
        ⲆⵠΔⲆ.la[4] = ⲆⵠΔⲆ.la[0];
        ⲆⵠΔⲆ.la[5] = ⲆⵠΔⲆ.la[0];
        ⲆⵠΔⲆ.s = [];
        ⲆⵠΔⲆ.s[0] = [ⲆⲆ.ΔⲆⵠΔᐃᐃΔ, ⲆⲆ.ΔⵠΔⲆΔΔΔ];
        ⲆⵠΔⲆ.s[1] = ⲆⵠΔⲆ.s[0];
        ⲆⵠΔⲆ.s[2] = [ⲆⲆ.ᐃΔⲆΔΔⲆⲆ, ⲆⲆ.ΔⵠΔᐃⲆᐃⵠ];
        ⲆⵠΔⲆ.p = [];
        ⲆⵠΔⲆ.p[0] = [ⲆⲆ.ᐃⵠⲆᐃⵠᐃᐃ, ⲆⲆ.ᐃⵠⲆᐃⵠᐃᐃ];
        ⲆⵠΔⲆ.a = [];
        ⲆⵠΔⲆ.a[0] = [ⲆⲆ.ⲆⵠⲆΔᐃⲆⵠ, ⲆⲆ.ⵠⵠⲆⵠᐃⵠΔ];
        ⲆⵠΔⲆ.a[1] = ⲆⵠΔⲆ.a[0];
        ⲆⵠΔⲆ.a[2] = ⲆⵠΔⲆ.a[0];
        ⲆⵠΔⲆ.d = [];
        ⲆⵠΔⲆ.d[0] = [ⲆⲆ.ΔⲆⵠΔᐃⲆⲆ, ⲆⲆ.ᐃⵠⲆⲆᐃⲆΔ];
        ⲆⵠΔⲆ.d[1] = ⲆⵠΔⲆ.d[0];
        ⲆⵠΔⲆ.d[2] = ⲆⵠΔⲆ.d[0];
        ⲆⵠΔⲆ.re = [];
        ⲆⵠΔⲆ.re[0] = [ⲆⲆ.ᐃⲆⲆⵠΔⲆΔ, ⲆⲆ.ⲆⲆΔⲆᐃᐃᐃ];
        ⲆⵠΔⲆ.re[1] = ⲆⵠΔⲆ.re[0];
        ⲆⵠΔⲆ.re[2] = ⲆⵠΔⲆ.re[0];
        ⲆⵠΔⲆ.f = [];
        ⲆⵠΔⲆ.f[0] = [ⲆⲆ.ⲆⲆⵠⲆⵠᐃⵠ, ⲆⲆ.ΔΔⲆⵠⲆⵠᐃ];
        ⲆⵠΔⲆ.f[1] = ⲆⵠΔⲆ.f[0];
        ⲆⵠΔⲆ.f[2] = ⲆⵠΔⲆ.f[0];
        ⲆⵠΔⲆ.isl = [];
        ⲆⵠΔⲆ.isl[0] = [ⲆⲆ.ΔⲆΔΔΔⲆⲆ, ⲆⲆ.ᐃⲆⵠⵠⵠΔΔ];
        ⲆⵠΔⲆ.isl[1] = ⲆⵠΔⲆ.isl[0];
        ⲆⵠΔⲆ.isl[2] = ⲆⵠΔⲆ.isl[0];
        ⲆⵠΔⲆ.c = [];
        ⲆⵠΔⲆ.c[0] = [ⲆⲆ.ⵠΔⲆⲆⵠⲆᐃ, ⲆⲆ.ᐃⲆⵠᐃᐃⲆⵠ];
        ⲆⵠΔⲆ.c[1] = ⲆⵠΔⲆ.c[0];
        ⲆⵠΔⲆ.c[2] = ⲆⵠΔⲆ.c[0];
        ⲆⵠΔⲆ.wtb = [];
        ⲆⵠΔⲆ.wtb[0] = [ⲆⲆ.ΔᐃⲆⵠᐃᐃⲆ, ⲆⲆ.ᐃΔⵠⲆⲆᐃΔ];
        ⲆⵠΔⲆ.PIRANHA = [ⲆⲆ.ᐃᐃᐃⲆΔⵠΔ, ⲆⲆ.ⲆᐃⲆⵠᐃⵠⵠ];
        ⲆⵠΔⲆ.KRAKEN = [ⲆⲆ.ⲆᐃᐃΔⲆᐃΔ, ⲆⲆ.ᐃᐃᐃΔΔΔⲆ];
        ⲆⵠΔⲆ.FOX = [ⲆⲆ.ΔⵠⵠᐃᐃⵠΔ, ⲆⲆ.ᐃᐃⵠⵠⵠⲆⵠ];
        ⲆⵠΔⲆ.WOLF = [ⲆⲆ.ᐃⲆΔΔⵠΔᐃ, ⲆⲆ.ⲆⵠᐃⲆᐃΔⲆ];
        ⲆⵠΔⲆ.SPIDER = [ⲆⲆ.ᐃⵠⵠᐃⵠⲆⲆ, ⲆⲆ.ⵠⵠΔⵠΔⲆⵠ];
        ⲆⵠΔⲆ.BEAR = [ⲆⲆ.ⵠᐃΔⲆⵠⵠΔ, ⲆⲆ.ⲆΔⲆᐃΔΔΔ];
        ⲆⵠΔⲆ.CAVE = [ⲆⲆ.ᐃᐃΔⲆⵠⲆⲆ, ⲆⲆ.ᐃⲆⵠΔᐃΔΔ];
        ⲆⵠΔⲆ.MAP = [ⲆⲆ.ᐃⲆⲆᐃΔΔⵠ, ⲆⲆ.ΔⵠΔⲆⲆⵠΔ];
        ⲆⵠΔⲆ.FOREST = [ⲆⲆ.ΔΔⲆΔⵠⵠᐃ, ⲆⲆ.ΔᐃΔⲆᐃⲆⲆ];
        ⲆⵠΔⲆ.WINTER = [ⲆⲆ.ᐃⵠⲆᐃⲆᐃΔ, ⲆⲆ.ⵠⲆⲆⵠⵠΔⵠ];
        ⲆⵠΔⲆ.DESERT = [ⲆⲆ.ⲆᐃΔⵠᐃΔⵠ, ⲆⲆ.ΔΔΔΔΔΔΔ];
        ⲆⵠΔⲆ.LAVA = [ⲆⲆ.ⵠⵠΔⲆΔⲆⵠ, ⲆⲆ.ⲆΔⲆΔΔⵠΔ];
        for (var c in ⲆⵠΔⲆ) {
            for (var d = ⲆⵠΔⲆ[c], e = 0; e < d.length; e++) {
                var f = d[e];
                if (f.ⲆⲆⲆⵠᐃΔⲆ !== Bs) {
                    f.ⲆⲆⲆⵠᐃΔⲆ();
                } else if (f.length > 0) {
                    for (var g = 0; g < f.length; g++) {
                        if (f[g].ⲆⲆⲆⵠᐃΔⲆ !== Bh) {
                            f[g].ⲆⲆⲆⵠᐃΔⲆ();
                        }
                    }
                }
            }
        }
        console.log(T, undefined);
    }
    function nc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 81;
        d.height = a * 77;
        e.translate(0, a * 10);
        e.scale(0.2, 0.2);
        e.translate(0, a * -30);
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 36.5, a * 278.0625);
            e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
            e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
            e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
            e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
            e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
            e.closePath();
            Kt(e, b[0], b[3], a * 50);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36.5, a * 278.0625);
        e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
        e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
        e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
        e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
        e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
        e.closePath();
        Kt(e, b[0], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 214.5, a * 124.0625);
        e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
        e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
        e.closePath();
        Kt(e, b[0], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 145.0625);
        e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
        e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
        e.closePath();
        Kt(e, b[0], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103.5, a * 169.0625);
        e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
        e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
        e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
        e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
        e.closePath();
        Kt(e, b[2], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 194.5, a * 313.0625);
        e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
        e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
        e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
        e.closePath();
        Kt(e, b[1]);
        e.scale(3, 3);
        e.translate(15, a * 10);
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 4, a * 32);
            e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
            e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
            e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
            Kt(e, Bh, b[3], a * 28);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 56, a * 6);
            e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
            e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
            e.closePath();
            Kt(e, b[3], b[3], a * 28);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 32);
        e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
        e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
        e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
        Kt(e, undefined, b[1], a * 17);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 6);
        e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
        e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
        e.closePath();
        Kt(e, b[1], b[1], a * 17);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 32);
        e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
        e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
        e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
        Kt(e, undefined, b[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 6);
        e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
        e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
        e.closePath();
        Kt(e, b[2], b[2], a * 10);
        return d;
    }
    function oc(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 496;
        e.height = b * 520;
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 10);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 19.000030517578125, b * 256.67613983154297);
        f.bezierCurveTo(b * 1.000030517578125, b * 332.67613983154297, b * 23.000030517578125, b * 404.67613983154297, b * 95.00003051757812, b * 463.67613983154297);
        f.bezierCurveTo(b * 128.00003051757812, b * 491.67613983154297, b * 165.00003051757812, b * 507.67613983154297, b * 194.00003051757812, b * 512.676139831543);
        f.bezierCurveTo(b * 280.0000305175781, b * 517.676139831543, b * 291.0000305175781, b * 516.676139831543, b * 342.0000305175781, b * 497.67613983154297);
        f.bezierCurveTo(b * 425.0000305175781, b * 454.67613983154297, b * 469.0000305175781, b * 392.67613983154297, b * 468.0000305175781, b * 300.67613983154297);
        f.bezierCurveTo(b * 408.5000305175781, b * 365.17613983154297, b * 408.5000305175781, b * 365.17613983154297, b * 349.0000305175781, b * 429.67613983154297);
        f.bezierCurveTo(b * 256.0000305175781, b * 473.67613983154297, b * 167.00003051757812, b * 459.67613983154297, b * 78.00003051757812, b * 384.67613983154297);
        f.closePath();
        Kt(f, d[0]);
        f.globalAlpha = 1;
        f.translate(0, b * -10);
        Nt(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
        Kt(f, d[5], Xk, b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 10);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 65.00003051757812, b * 263.4034118652344);
        f.bezierCurveTo(b * 109.00003051757812, b * 160.40341186523438, b * 185.00003051757812, b * 128.40341186523438, b * 222.00003051757812, b * 124.40341186523438);
        f.bezierCurveTo(b * 277.0000305175781, b * 116.40341186523438, b * 339.0000305175781, b * 134.40341186523438, b * 379.0000305175781, b * 195.40341186523438);
        f.bezierCurveTo(b * 409.0000305175781, b * 242.40341186523438, b * 416.0000305175781, b * 256.4034118652344, b * 428.0000305175781, b * 304.4034118652344);
        f.bezierCurveTo(b * 457.0000305175781, b * 203.40341186523438, b * 449.0000305175781, b * 183.40341186523438, b * 438.0000305175781, b * 162.40341186523438);
        f.bezierCurveTo(b * 381.0000305175781, b * 73.40341186523438, b * 360.0000305175781, b * 66.40341186523438, b * 257.0000305175781, b * 46.403411865234375);
        f.bezierCurveTo(b * 191.00003051757812, b * 45.403411865234375, b * 142.00003051757812, b * 65.40341186523438, b * 101.00003051757812, b * 115.40341186523438);
        f.closePath();
        Kt(f, d[0]);
        f.globalAlpha = 1;
        var g = function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 496;
            c.height = a * 520;
            d.globalAlpha = 1;
            d.translate(0, a * -10);
            Nt(d, a * 247.01138305664062, a * 250.13068389892578, a * 232.81967270830015);
            Kt(d, b[1], b[2], a * 14);
            d.globalCompositeOperation = "destination-out";
            Nt(d, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
            Kt(d, b[0], b[0], a * 14);
            d.globalCompositeOperation = "source-over";
            return c;
        }(b, d);
        f.drawImage(g, 0, 0);
        f.translate(0, b * -10);
        Nt(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
        Kt(f, Zq, d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
        f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
        f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
        f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
        f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
        f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
        f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
        f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
        f.closePath();
        Kt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
        f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
        f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
        f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
        f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
        f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
        f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
        f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
        f.closePath();
        Kt(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
        f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
        f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
        f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
        f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
        f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
        f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
        f.closePath();
        Kt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
        f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
        f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
        f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
        f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
        f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
        f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
        f.closePath();
        Kt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
        f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
        f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
        f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
        f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
        f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
        f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
        f.closePath();
        Kt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
        f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
        f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
        f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
        f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
        f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
        f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
        f.closePath();
        Kt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
        f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
        f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
        f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
        f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
        f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
        f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
        f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
        f.closePath();
        Kt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
        f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
        f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
        f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
        f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
        f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
        f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
        f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
        f.closePath();
        Kt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
        f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
        f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
        f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
        f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
        f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
        f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
        f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
        f.closePath();
        Kt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
        f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
        f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
        f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
        f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
        f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
        f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
        f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
        f.closePath();
        Kt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
        f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
        f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
        f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
        f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
        f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
        f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
        f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
        f.closePath();
        Kt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
        f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
        f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
        f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
        f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
        f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
        f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
        f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
        f.closePath();
        Kt(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
        f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
        f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
        f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
        f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
        f.closePath();
        Kt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
        f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
        f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
        f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
        f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
        f.closePath();
        Kt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
        f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
        f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
        f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
        f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
        f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
        f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
        f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
        f.closePath();
        Kt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
        f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
        f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
        f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
        f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
        f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
        f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
        f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
        f.closePath();
        Kt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
        f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
        f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
        f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
        f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
        f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
        f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
        f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
        f.closePath();
        Kt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
        f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
        f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
        f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
        f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
        f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
        f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
        f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
        f.closePath();
        Kt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
        f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
        f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
        f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
        f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
        f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
        f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
        f.closePath();
        Kt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
        f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
        f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
        f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
        f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
        f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
        f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
        f.closePath();
        Kt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
        f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
        f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
        f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
        f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
        f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
        f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
        f.closePath();
        Kt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
        f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
        f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
        f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
        f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
        f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
        f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
        f.closePath();
        Kt(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
        f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
        f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
        f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
        f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
        f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
        f.closePath();
        Kt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
        f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
        f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
        f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
        f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
        f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
        f.closePath();
        Kt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
        f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
        f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
        f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
        f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
        f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
        f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
        f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
        f.closePath();
        Kt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
        f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
        f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
        f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
        f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
        f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
        f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
        f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
        f.closePath();
        Kt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
        f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
        f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
        f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
        f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
        f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
        f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
        f.closePath();
        Kt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
        f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
        f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
        f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
        f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
        f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
        f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
        f.closePath();
        Kt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
        f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
        f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
        f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
        f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
        f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
        f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
        f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
        f.closePath();
        Kt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
        f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
        f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
        f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
        f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
        f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
        f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
        f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
        f.closePath();
        Kt(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
        f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
        f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
        f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
        f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
        f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
        f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
        f.closePath();
        Kt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
        f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
        f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
        f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
        f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
        f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
        f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
        f.closePath();
        Kt(f, d[4], d[2], b * 12);
        return e;
    }
    function ac(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 218;
        d.height = a * 185;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 53.135406494140625);
        e.bezierCurveTo(a * 92, a * 17.135406494140625, a * 116, a * 11.135406494140625, a * 158, a * 53.135406494140625);
        e.bezierCurveTo(a * 178, a * 74.13540649414062, a * 181, a * 81.13540649414062, a * 196, a * 101.13540649414062);
        e.bezierCurveTo(a * 214, a * 127.13540649414062, a * 192, a * 138.13540649414062, a * 173, a * 149.13540649414062);
        e.bezierCurveTo(a * 137, a * 166.13540649414062, a * 74, a * 170.13540649414062, a * 36, a * 141.13540649414062);
        e.bezierCurveTo(a * 13, a * 127.13540649414062, a * 20, a * 119.13540649414062, a * 30, a * 103.13540649414062);
        e.bezierCurveTo(a * 48, a * 71.13540649414062, a * 54, a * 67.13540649414062, a * 63, a * 54.135406494140625);
        e.closePath();
        Kt(e, c[0], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107, a * 25.135406494140625);
        e.bezierCurveTo(a * 62, a * 90.13540649414062, a * 54, a * 129.13540649414062, a * 53, a * 151.13540649414062);
        e.bezierCurveTo(a * 39.5, a * 142.13540649414062, a * 39.5, a * 142.13540649414062, a * 26, a * 133.13540649414062);
        e.bezierCurveTo(a * 23.5, a * 128.63540649414062, a * 23.5, a * 128.63540649414062, a * 21, a * 124.13540649414062);
        e.bezierCurveTo(a * 22, a * 113.13540649414062, a * 31, a * 99.13540649414062, a * 40, a * 88.13540649414062);
        e.bezierCurveTo(a * 54.5, a * 67.13540649414062, a * 54.5, a * 67.13540649414062, a * 69, a * 46.135406494140625);
        e.bezierCurveTo(a * 80.5, a * 36.635406494140625, a * 80.5, a * 36.635406494140625, a * 92, a * 27.135406494140625);
        e.closePath();
        Kt(e, c[1]);
        return d;
    }
    function rc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.translate(0, a * 15);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        Kt(e, Ua, c[0], a * 11);
        e.translate(0, a * -5);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103, a * 154);
        e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
        e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
        e.closePath();
        Kt(e, c[3], c[2], a * 12);
        e.translate(0, a * 25);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103, a * 154);
        e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
        e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
        e.closePath();
        Kt(e, c[5]);
        e.translate(0, a * -25);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        Kt(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 182, a * 185);
        e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
        e.closePath();
        Kt(e, At, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222, a * 287);
        e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
        e.closePath();
        Kt(e, Zq, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 290);
        e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
        e.closePath();
        Kt(e, c[1], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 184);
        e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
        e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
        e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
        e.closePath();
        Kt(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 251, a * 276);
        e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
        e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
        e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
        e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
        e.closePath();
        Kt(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        Kt(e, Mq, c[2], a * 11);
        return d;
    }
    function sc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 137;
        d.height = a * 129;
        e.globalAlpha = 0.5;
        Nt(e, a * 69, a * 64, a * 48.16637831516918);
        Kt(e, c[1]);
        e.globalAlpha = 0.7;
        Nt(e, a * 69, a * 64, a * 38.23105625617661);
        Kt(e, c[2]);
        e.globalAlpha = 0.7;
        Nt(e, a * 69, a * 64, a * 32.01562118716424);
        Kt(e, c[2], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72, a * 41);
        e.bezierCurveTo(a * 52, a * 41, a * 48, a * 50, a * 45, a * 58);
        e.bezierCurveTo(a * 43, a * 67, a * 45, a * 68, a * 46, a * 72);
        e.bezierCurveTo(a * 52, a * 53, a * 60, a * 48, a * 72, a * 42);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 62);
        e.bezierCurveTo(a * 95, a * 72, a * 90, a * 81, a * 81, a * 87);
        e.bezierCurveTo(a * 74, a * 91, a * 69, a * 89, a * 64, a * 88);
        e.bezierCurveTo(a * 77, a * 83, a * 84, a * 82, a * 92, a * 62);
        e.closePath();
        Kt(e, c[3]);
        return d;
    }
    function hc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 316;
        d.height = a * 365;
        e.save();
        e.translate(a * 156.07142639160156, a * 51.81248474121094);
        e.rotate(0);
        Lt(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
        e.restore();
        Kt(e, c[1], c[2], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110.57142639160156, a * 197.09820556640625);
        e.bezierCurveTo(a * 158.07142639160156, a * 179.09820556640625, a * 158.07142639160156, a * 179.09820556640625, a * 205.57142639160156, a * 161.09820556640625);
        e.bezierCurveTo(a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 309.8125);
        e.bezierCurveTo(a * 205.57142639160156, a * 323.8125, a * 200.57142639160156, a * 325.8125, a * 187.57142639160156, a * 326.8125);
        e.bezierCurveTo(a * 155.57142639160156, a * 326.3125, a * 155.57142639160156, a * 326.3125, a * 123.57142639160156, a * 325.8125);
        e.bezierCurveTo(a * 111.57142639160156, a * 326.8125, a * 109.57142639160156, a * 321.8125, a * 110.57142639160156, a * 312.8125);
        e.closePath();
        Kt(e, c[3], c[4], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
        e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
        e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
        e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
        e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
        e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
        e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
        e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
        e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
        e.closePath();
        Kt(e, Xk, c[5], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
        e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
        e.closePath();
        Kt(e, Og, c[6], a * 15);
        return d;
    }
    function lc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 46;
        d.height = a * 140;
        e.scale(a * -1, a * 1);
        e.translate(a * -50, a * 40);
        e.translate(a * -20, 0);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
        e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
        e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
        e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
        e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -1, 0);
        e.moveTo(a * 17.599990844726562, a * 89.75);
        e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 1, 0);
        e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
        e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
        e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
        e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
        e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
        e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
        e.closePath();
        Kt(e, c[0]);
        e.save();
        e.translate(a * 23.599990844726562, a * 110.94999694824219);
        e.rotate(0);
        Lt(e, a * -7, a * -4, a * 14, a * 8, a * 10);
        e.restore();
        Kt(e, c[0]);
        e.translate(a * 0, 0);
        e.globalAlpha = 1;
        e.translate(a * 10, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
        e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
        e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
        e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
        e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
        e.closePath();
        Kt(e, c[3], c[4], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -1, 0);
        e.moveTo(a * 17.599990844726562, a * 89.75);
        e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
        e.closePath();
        Kt(e, c[1], c[2], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 1, 0);
        e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
        e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
        e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
        e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
        e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
        e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
        e.closePath();
        Kt(e, c[1], c[2], a * 3);
        e.save();
        e.translate(a * 23.599990844726562, a * 110.94999694824219);
        e.rotate(0);
        Lt(e, a * -7, a * -4, a * 14, a * 8, a * 10);
        e.restore();
        Kt(e, c[1], c[2], a * 3);
        return d;
    }
    function gc(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 170;
        f.height = b * 200;
        g.translate(b * 5, b * 15);
        if (e == 1) {
            g.translate(0, b * -5);
            Nt(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
            Kt(g, d[1], d[5], b * 20);
            Nt(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
            Kt(g, d[1], d[5], b * 20);
            g.save();
            g.translate(b * 77.00003051757812, b * 31.267044067382812);
            Lt(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
            g.restore();
            Kt(g, d[1], d[5], b * 20);
            g.save();
            g.translate(b * 77.00003051757812, b * 13.267044067382812);
            Lt(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
            g.restore();
            Kt(g, d[1], d[5], b * 20);
        }
        Nt(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
        Kt(g, d[1], d[2], b * 7);
        Nt(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
        Kt(g, d[1], d[2], b * 7);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 18.000030517578125, b * 105.85795593261719);
        g.bezierCurveTo(b * 134.00003051757812, b * 104.85795593261719, b * 77.00003051757812, b * 104.85795593261719, b * 136.00003051757812, b * 103.85795593261719);
        g.closePath();
        Kt(g, d[1], d[2], b * 8);
        Nt(g, b * 77.00003051757812, b * 104.6761474609375, b * 32.55764119219941);
        Kt(g, d[1], d[2], b * 8);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 78.00003051757812, b * 112.03977966308594);
        g.bezierCurveTo(b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 62.03977966308594);
        g.closePath();
        Kt(g, d[3], d[2], b * 8);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 78.00003051757812, b * 48.03977966308594);
        g.bezierCurveTo(b * 82.00003051757812, b * 55.53977966308594, b * 82.00003051757812, b * 55.53977966308594, b * 86.00003051757812, b * 63.03977966308594);
        g.bezierCurveTo(b * 78.00003051757812, b * 63.03977966308594, b * 78.00003051757812, b * 63.03977966308594, b * 70.00003051757812, b * 63.03977966308594);
        g.closePath();
        Kt(g, d[3], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 80.00003051757812, b * 111.6761474609375);
        g.bezierCurveTo(b * 95.00003051757812, b * 97.1761474609375, b * 95.00003051757812, b * 97.1761474609375, b * 110.00003051757812, b * 82.6761474609375);
        g.closePath();
        Kt(g, d[3], d[2], b * 8);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 107.00003051757812, b * 76.6761474609375);
        g.bezierCurveTo(b * 111.50003051757812, b * 82.6761474609375, b * 111.50003051757812, b * 82.6761474609375, b * 116.00003051757812, b * 88.6761474609375);
        g.bezierCurveTo(b * 118.50003051757812, b * 81.6761474609375, b * 118.50003051757812, b * 81.6761474609375, b * 121.00003051757812, b * 74.6761474609375);
        g.closePath();
        Kt(g, d[3], d[2], b * 4);
        Nt(g, b * 77.00003051757812, b * 105.03977966308594, b * 15.556349186104045);
        Kt(g, d[3], d[2], b * 4);
        g.save();
        g.translate(b * 77.00003051757812, b * 31.267044067382812);
        g.rotate(0);
        Lt(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
        g.restore();
        Kt(g, d[1], d[2], b * 7);
        g.save();
        g.translate(b * 77.00003051757812, b * 13.267044067382812);
        g.rotate(0);
        Lt(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
        g.restore();
        Kt(g, d[1], d[2], b * 7);
        return f;
    }
    function uc(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 253;
        c.height = a * 192;
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 42, a * 99);
        d.globalAlpha = 0.5;
        Lt(d, a * -7, a * -20, a * 14, a * 39, a * 20);
        d.restore();
        Kt(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 37, a * 94);
        Lt(d, a * -7, a * -20, a * 14, a * 37, a * 20);
        d.restore();
        Kt(d, b[2]);
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 136, a * 99);
        d.globalAlpha = 0.5;
        Lt(d, a * -84, a * -67, a * 168, a * 134, a * 20);
        d.restore();
        Kt(d, b[0], b[0], a * 13);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 131, a * 94);
        Lt(d, a * -84, a * -67, a * 168, a * 134, a * 20);
        d.restore();
        Kt(d, b[2], b[2], a * 13);
        d.save();
        d.translate(a * 131, a * 94);
        Lt(d, a * -76, a * -61, a * 152, a * 122, a * 20);
        d.restore();
        Kt(d, b[3], b[1], a * 8);
        d.save();
        d.translate(a * 168.5, a * 93.5);
        Lt(d, a * -30.5, a * -58.5, a * 61, a * 117, a * 20);
        d.restore();
        Kt(d, b[3], b[4], a * 6);
        d.save();
        d.translate(a * 93.5, a * 95.5);
        Lt(d, a * -32, a * -59.5, a * 59, a * 119, a * 20);
        d.restore();
        Kt(d, b[3], b[4], a * 6);
        d.save();
        d.translate(a * 130.5, a * 94);
        Lt(d, a * -36, a * -67, a * 73, a * 134, a * 20);
        d.restore();
        Kt(d, b[3], b[2], a * 8);
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 133, a * 97);
        Lt(d, a * -83, a * -12, a * 160, a * 24, a * 0);
        d.restore();
        Kt(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 133, a * 92);
        Lt(d, a * -83, a * -12, a * 160, a * 24, a * 0);
        d.restore();
        Kt(d, b[2]);
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 228, a * 99.5);
        d.globalAlpha = 0.5;
        Lt(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
        d.restore();
        Kt(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 223, a * 94.5);
        Lt(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
        d.restore();
        Kt(d, b[2]);
        d.save();
        d.translate(a * 133.5, a * 175.5);
        d.globalAlpha = 0.5;
        Lt(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
        d.restore();
        Kt(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 128.5, a * 170.5);
        Lt(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
        d.restore();
        Kt(d, b[2]);
        return c;
    }
    function bc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 142;
        d.height = a * 118;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 27.3671875);
        e.bezierCurveTo(a * 128, a * 9.3671875, a * 125, a * 13.3671875, a * 126, a * 21.3671875);
        e.bezierCurveTo(a * 126, a * 33.3671875, a * 119, a * 43.3671875, a * 118, a * 42.3671875);
        e.closePath();
        Kt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 23.3671875);
        e.bezierCurveTo(a * 17, a * 15.3671875, a * 16, a * 14.3671875, a * 17, a * 20.3671875);
        e.bezierCurveTo(a * 22, a * 33.3671875, a * 20, a * 27.3671875, a * 24, a * 34.3671875);
        e.closePath();
        Kt(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 70.5, a * 34.8671875);
        e.rotate(0);
        Lt(e, a * -49.5, a * -21.5, a * 99, a * 43, a * 15);
        e.restore();
        Kt(e, c[0], c[1], a * 4);
        e.save();
        e.translate(a * 71, a * 40.8671875);
        e.rotate(0);
        Lt(e, a * -49, a * -12.5, a * 98, a * 25, a * 15);
        e.restore();
        Kt(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19.800003051757812, a * 75.95625305175781);
        e.bezierCurveTo(a * 19.300003051757812, a * 82.95625305175781, a * 19.300003051757812, a * 82.95625305175781, a * 18.800003051757812, a * 89.95625305175781);
        e.bezierCurveTo(a * 38.80000305175781, a * 115.95625305175781, a * 37.80000305175781, a * 104.95625305175781, a * 31.800003051757812, a * 91.95625305175781);
        e.closePath();
        Kt(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 119.80000305175781, a * 75.95625305175781);
        e.bezierCurveTo(a * 120.80000305175781, a * 82.95625305175781, a * 120.80000305175781, a * 82.95625305175781, a * 121.80000305175781, a * 89.95625305175781);
        e.bezierCurveTo(a * 101.80000305175781, a * 111.95625305175781, a * 99.80000305175781, a * 111.95625305175781, a * 112.80000305175781, a * 81.95625305175781);
        e.closePath();
        Kt(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17.800003051757812, a * 49.15625);
        e.bezierCurveTo(a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 79.15625);
        e.bezierCurveTo(a * 23.300003051757812, a * 85.15625, a * 23.300003051757812, a * 85.15625, a * 28.800003051757812, a * 91.15625);
        e.bezierCurveTo(a * 36.80000305175781, a * 96.15625, a * 32.80000305175781, a * 91.15625, a * 28.800003051757812, a * 77.15625);
        e.bezierCurveTo(a * 33.80000305175781, a * 65.15625, a * 33.80000305175781, a * 65.15625, a * 38.80000305175781, a * 53.15625);
        e.closePath();
        Kt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123.80000305175781, a * 53.95625305175781);
        e.bezierCurveTo(a * 121.80000305175781, a * 77.95625305175781, a * 121.80000305175781, a * 74.95625305175781, a * 121.80000305175781, a * 78.95625305175781);
        e.bezierCurveTo(a * 115.80000305175781, a * 84.95625305175781, a * 115.80000305175781, a * 84.95625305175781, a * 109.80000305175781, a * 90.95625305175781);
        e.bezierCurveTo(a * 102.80000305175781, a * 93.95625305175781, a * 105.80000305175781, a * 86.95625305175781, a * 110.80000305175781, a * 76.95625305175781);
        e.bezierCurveTo(a * 107.30000305175781, a * 65.45625305175781, a * 103.80000305175781, a * 53.95625305175781, a * 103.80000305175781, a * 53.95625305175781);
        e.closePath();
        Kt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 18, a * 56.3671875);
        e.bezierCurveTo(a * 70, a * 56.8671875, a * 70, a * 56.8671875, a * 122, a * 57.3671875);
        e.bezierCurveTo(a * 137, a * 20.3671875, a * 137, a * 16.3671875, a * 126, a * 22.3671875);
        e.bezierCurveTo(a * 115.5, a * 34.3671875, a * 115.5, a * 34.3671875, a * 105, a * 46.3671875);
        e.bezierCurveTo(a * 70.5, a * 46.3671875, a * 70.5, a * 46.3671875, a * 36, a * 46.3671875);
        e.bezierCurveTo(a * 4, a * 14.3671875, a * 7, a * 18.3671875, a * 8, a * 27.3671875);
        e.bezierCurveTo(a * 12.5, a * 41.8671875, a * 12.5, a * 41.8671875, a * 17, a * 56.3671875);
        e.closePath();
        Kt(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 68.30000305175781, a * 41.45625305175781);
        e.rotate(0.76);
        Lt(e, a * -20.5, a * -20.5, a * 41, a * 41, a * 10);
        e.restore();
        Kt(e, ll, c[5], a * 4);
        e.save();
        e.translate(a * 68.80000305175781, a * 44.45625305175781);
        e.rotate(0.76);
        Lt(e, a * -21, a * -20.5, a * 42, a * 41, a * 10);
        e.restore();
        Kt(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 69.80000305175781, a * 44.556243896484375);
        e.rotate(0.76);
        Lt(e, a * -10, a * -10, a * 20, a * 20, a * 5);
        e.restore();
        Kt(e, c[6], c[7], a * 4);
        return d;
    }
    function dc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 161;
        d.height = a * 184;
        e.translate(0, a * 10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.5, a * 34.609375);
        e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
        e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
        e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
        e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
        e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
        e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
        e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
        e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
        e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
        e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 45.5, a * 144.609375);
        e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
        e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
        e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
        Kt(e, c[0]);
        e.translate(0, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 45.5, a * 144.609375);
        e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
        e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
        e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
        Kt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.5, a * 34.609375);
        e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
        e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
        e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
        e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
        e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
        e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
        e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
        e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
        e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
        e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
        e.closePath();
        Kt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104.5, a * 35.609375);
        e.bezierCurveTo(a * 71.5, a * 36.609375, a * 57.5, a * 52.609375, a * 58.5, a * 81.609375);
        e.bezierCurveTo(a * 59.5, a * 103.609375, a * 66.5, a * 107.609375, a * 66.5, a * 116.609375);
        e.bezierCurveTo(a * 67.5, a * 128.609375, a * 65.5, a * 131.609375, a * 63.5, a * 137.609375);
        Kt(e, undefined, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59.5, a * 72.609375);
        e.bezierCurveTo(a * 38.5, a * 80.609375, a * 43.5, a * 81.609375, a * 37.5, a * 89.609375);
        Kt(e, hj, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60.5, a * 85.609375);
        e.bezierCurveTo(a * 75.5, a * 91.609375, a * 76.5, a * 96.609375, a * 81.5, a * 104.609375);
        Kt(e, undefined, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 68.5, a * 122.609375);
        e.bezierCurveTo(a * 79.5, a * 130.609375, a * 74.5, a * 128.609375, a * 80.5, a * 134.609375);
        Kt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 142.5, a * 18.609375);
        e.bezierCurveTo(a * 151.5, a * 28.609375, a * 151.5, a * 32.609375, a * 146.5, a * 40.609375);
        e.bezierCurveTo(a * 137.5, a * 26.609375, a * 138.5, a * 24.609375, a * 142.5, a * 19.609375);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 146.5, a * 61.50892639160156);
        e.bezierCurveTo(a * 157.5, a * 69.50892639160156, a * 150.5, a * 79.50892639160156, a * 145.5, a * 81.50892639160156);
        e.bezierCurveTo(a * 140.5, a * 65.50892639160156, a * 144.5, a * 64.50892639160156, a * 146.5, a * 62.50892639160156);
        e.closePath();
        Kt(e, c[3]);
        return d;
    }
    function vc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.translate(0, a * 15);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        Kt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        Kt(e, hj, c[0], a * 11);
        e.translate(0, a * -5);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103, a * 154);
        e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
        e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
        e.closePath();
        Kt(e, c[3], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        Kt(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 182, a * 185);
        e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
        e.closePath();
        Kt(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222, a * 287);
        e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
        e.closePath();
        Kt(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 290);
        e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
        e.closePath();
        Kt(e, c[1], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 184);
        e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
        e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
        e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
        e.closePath();
        Kt(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 251, a * 276);
        e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
        e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
        e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
        e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
        e.closePath();
        Kt(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        Kt(e, undefined, c[2], a * 11);
        return d;
    }
    function mc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 465;
        d.height = a * 310;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126, a * 192);
        e.bezierCurveTo(a * 198, a * 202, a * 245, a * 203, a * 335, a * 194);
        e.bezierCurveTo(a * 336, a * 232, a * 326, a * 235, a * 232, a * 237);
        e.bezierCurveTo(a * 161, a * 235, a * 122, a * 235, a * 126, a * 193);
        e.closePath();
        Kt(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 146, a * 239);
        e.bezierCurveTo(a * 174, a * 74, a * 287, a * 88, a * 320, a * 240);
        e.bezierCurveTo(a * 329, a * 231, a * 340, a * 219, a * 332, a * 115);
        e.bezierCurveTo(a * 330, a * 40, a * 144, a * 30, a * 129, a * 116);
        e.bezierCurveTo(a * 124, a * 217, a * 124, a * 228, a * 143, a * 237);
        e.closePath();
        Kt(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126, a * 193);
        e.bezierCurveTo(a * 173, a * 94, a * 209, a * 100, a * 228, a * 57);
        e.bezierCurveTo(a * 190, a * 112, a * 165, a * 115, a * 127, a * 184);
        e.closePath();
        Kt(e, undefined, c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 230, a * 57);
        e.bezierCurveTo(a * 266, a * 117, a * 310, a * 130, a * 332, a * 183);
        e.bezierCurveTo(a * 290, a * 112, a * 262, a * 109, a * 230, a * 56);
        e.closePath();
        Kt(e, undefined, c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154, a * 212);
        e.bezierCurveTo(a * 208, a * 224, a * 252, a * 219, a * 305, a * 212);
        e.bezierCurveTo(a * 267, a * 219, a * 204, a * 222, a * 155, a * 212);
        e.closePath();
        Kt(e, la, c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 239, a * 59);
        e.bezierCurveTo(a * 302, a * 72, a * 325, a * 84, a * 326, a * 115);
        e.bezierCurveTo(a * 289, a * 80, a * 270, a * 88, a * 253, a * 78);
        e.closePath();
        Kt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 216, a * 61);
        e.bezierCurveTo(a * 209, a * 70, a * 209, a * 70, a * 202, a * 79);
        e.bezierCurveTo(a * 173, a * 87, a * 162, a * 91, a * 137, a * 107);
        e.bezierCurveTo(a * 153, a * 78, a * 174, a * 67, a * 212, a * 62);
        e.closePath();
        Kt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 175, a * 125);
        e.bezierCurveTo(a * 218, a * 94, a * 238, a * 90, a * 281, a * 125);
        e.bezierCurveTo(a * 245, a * 89, a * 240, a * 80, a * 228, a * 67);
        e.bezierCurveTo(a * 207, a * 100, a * 192, a * 104, a * 177, a * 123);
        e.closePath();
        Kt(e, c[2]);
        return d;
    }
    function cc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.save();
        e.translate(a * 204, a * 195.0833282470703);
        e.rotate(10.16);
        Lt(e, a * -97.5, a * -134.5, a * 195, a * 269, a * 10);
        e.restore();
        Kt(e, c[0], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58.5, a * 226.5833282470703);
        e.bezierCurveTo(a * 120.5, a * 281.5833282470703, a * 120.5, a * 281.5833282470703, a * 182.5, a * 336.5833282470703);
        e.bezierCurveTo(a * 263, a * 248.5833282470703, a * 263, a * 248.5833282470703, a * 343.5, a * 160.5833282470703);
        e.bezierCurveTo(a * 280.5, a * 104.58332824707031, a * 280.5, a * 104.58332824707031, a * 217.5, a * 48.58332824707031);
        e.closePath();
        Kt(e, c[2], c[3], a * 4);
        e.save();
        e.translate(a * 197, a * 169.0833282470703);
        e.rotate(10.16);
        Lt(e, a * -93.5, a * -126.5, a * 187, a * 253, a * 10);
        e.restore();
        Kt(e, c[4], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226.5, a * 24.583328247070312);
        e.bezierCurveTo(a * 58.5, a * 207.5833282470703, a * 143, a * 116.58332824707031, a * 59.5, a * 208.5833282470703);
        e.closePath();
        Kt(e, Og, c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46.133331298828125, a * 202.64999389648438);
        e.bezierCurveTo(a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 228.64999389648438);
        e.closePath();
        Kt(e, c[4], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55.133331298828125, a * 211.64999389648438);
        e.bezierCurveTo(a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 238.64999389648438);
        e.bezierCurveTo(a * 50.133331298828125, a * 235.64999389648438, a * 50.133331298828125, a * 235.64999389648438, a * 45.133331298828125, a * 232.64999389648438);
        e.bezierCurveTo(a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 200.64999389648438);
        e.closePath();
        Kt(e, c[4], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46.133331298828125, a * 198.39999389648438);
        e.bezierCurveTo(a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 201.39999389648438);
        e.closePath();
        Kt(e, c[4], c[1], a * 8);
        e.save();
        e.translate(a * 249.63333129882812, a * 120.89999389648438);
        e.rotate(7.04);
        Lt(e, a * -58.5, a * -32, a * 117, a * 64, a * 10);
        e.restore();
        Kt(e, c[5]);
        return d;
    }
    function pc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 573;
        d.height = a * 350;
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 336, a * 72);
            e.bezierCurveTo(a * 366, a * 15, a * 426, a * 36, a * 497, a * 83);
            e.bezierCurveTo(a * 522, a * 85, a * 522, a * 85, a * 547, a * 87);
            e.bezierCurveTo(a * 476.5, a * 205, a * 476.5, a * 205, a * 406, a * 323);
            e.bezierCurveTo(a * 297.5, a * 319, a * 297.5, a * 319, a * 189, a * 315);
            e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 243);
            e.bezierCurveTo(a * 92, a * 140, a * 92, a * 140, a * 162, a * 37);
            e.bezierCurveTo(a * 173, a * 39, a * 173, a * 39, a * 184, a * 41);
            e.bezierCurveTo(a * 185, a * 38.5, a * 185, a * 38.5, a * 186, a * 36);
            e.bezierCurveTo(a * 323, a * 13, a * 322, a * 25, a * 337, a * 74);
            e.closePath();
            Kt(e, b[4], b[4], a * 35);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 168, a * 42);
        e.bezierCurveTo(a * 255, a * 60, a * 255, a * 60, a * 342, a * 78);
        e.bezierCurveTo(a * 443, a * 81.5, a * 443, a * 81.5, a * 544, a * 85);
        e.bezierCurveTo(a * 475, a * 204.5, a * 475, a * 204.5, a * 406, a * 324);
        e.bezierCurveTo(a * 297.5, a * 320, a * 297.5, a * 320, a * 189, a * 316);
        e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 242);
        e.closePath();
        Kt(e, b[0], b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 188, a * 41);
        e.bezierCurveTo(a * 308, a * 15, a * 325, a * 18, a * 337, a * 66);
        e.bezierCurveTo(a * 191, a * 305, a * 196, a * 286, a * 184, a * 307);
        e.bezierCurveTo(a * 175, a * 250, a * 90, a * 254, a * 52, a * 241);
        e.closePath();
        Kt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 336, a * 71);
        e.bezierCurveTo(a * 375, a * 8, a * 429, a * 50, a * 518, a * 92);
        e.bezierCurveTo(a * 455, a * 199.5, a * 455, a * 199.5, a * 392, a * 307);
        e.bezierCurveTo(a * 227, a * 301, a * 261, a * 255, a * 188, a * 308);
        e.closePath();
        Kt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 357, a * 76);
        e.bezierCurveTo(a * 390, a * 67, a * 414, a * 86, a * 435, a * 104);
        e.bezierCurveTo(a * 417, a * 135, a * 417, a * 135, a * 399, a * 166);
        e.bezierCurveTo(a * 352, a * 140, a * 345, a * 139, a * 319, a * 142);
        e.closePath();
        Kt(e, b[3], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 309, a * 168);
        e.bezierCurveTo(a * 345, a * 163, a * 372, a * 180, a * 412, a * 203);
        Kt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 263, a * 54);
        e.bezierCurveTo(a * 305, a * 44, a * 307, a * 51, a * 311, a * 64);
        e.bezierCurveTo(a * 270.5, a * 129.5, a * 270.5, a * 129.5, a * 230, a * 195);
        e.bezierCurveTo(a * 221, a * 175, a * 203, a * 171, a * 186, a * 172);
        e.closePath();
        Kt(e, b[3], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 292, a * 198);
        e.bezierCurveTo(a * 328, a * 191, a * 364, a * 211, a * 401, a * 237);
        Kt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 245, a * 68);
        e.bezierCurveTo(a * 210, a * 72, a * 210, a * 72, a * 189, a * 69);
        Kt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222, a * 96);
        e.bezierCurveTo(a * 196, a * 97, a * 193, a * 97, a * 177, a * 92);
        Kt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 207, a * 124);
        e.bezierCurveTo(a * 179, a * 123, a * 177, a * 124, a * 161, a * 119);
        Kt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 183);
        e.bezierCurveTo(a * 184, a * 185, a * 203, a * 198, a * 219, a * 221);
        Kt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 213);
        e.bezierCurveTo(a * 161, a * 214, a * 193, a * 227, a * 201, a * 249);
        Kt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 399, a * 257);
        e.bezierCurveTo(a * 287, a * 215, a * 280, a * 215, a * 263, a * 222);
        e.bezierCurveTo(a * 253, a * 238, a * 247, a * 245, a * 243, a * 254);
        e.bezierCurveTo(a * 267, a * 236, a * 292, a * 263, a * 377, a * 284);
        Kt(e, b[3], b[3], a * 12);
        return d;
    }
    function Cc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 145;
        d.height = a * 120;
        e.beginPath();
        e.scale(0.6, 0.6);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 18, a * -8);
        e.moveTo(a * 101, a * 72);
        e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
        e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
        e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
        e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
        e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
        e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
        e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
        e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
        e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
        e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
        e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
        e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
        e.closePath();
        Kt(e, c[4], c[5], a * 4);
        e.beginPath();
        e.scale(1.1, 1.1);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -9, a * 4);
        e.moveTo(a * 101, a * 72);
        e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
        e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
        e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
        e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
        e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
        e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
        e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
        e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
        e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
        e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
        e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
        e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
        e.closePath();
        Kt(e, c[4], c[5], a * 4);
        e.scale(1.1, 1.1);
        e.translate(a * -9, a * 4);
        e.save();
        e.translate(a * 100, a * 73.06874084472656);
        e.rotate(0);
        Lt(e, a * -61, a * -38.5, a * 122, a * 40, a * 20);
        e.restore();
        Kt(e, c[1], c[2], a * 4);
        e.save();
        e.translate(a * 100, a * 71.36874389648438);
        e.rotate(0);
        Lt(e, a * -60.5, a * -18, a * 121, a * 30, a * 20);
        e.restore();
        Kt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 144, a * 80);
        e.bezierCurveTo(a * 152, a * 100, a * 152, a * 101, a * 153, a * 102);
        e.bezierCurveTo(a * 159, a * 100, a * 159, a * 100, a * 160, a * 100);
        e.bezierCurveTo(a * 161, a * 84, a * 161, a * 84, a * 162, a * 68);
        e.closePath();
        Kt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 57, a * 75);
        e.bezierCurveTo(a * 48, a * 101, a * 53, a * 89, a * 48, a * 102);
        e.bezierCurveTo(a * 44, a * 100, a * 44, a * 100, a * 39, a * 97);
        e.bezierCurveTo(a * 39, a * 83, a * 39, a * 83, a * 39, a * 69);
        e.closePath();
        Kt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 101, a * 72);
        e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
        e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
        e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
        e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
        e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
        e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
        e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
        e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
        e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
        e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
        e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
        e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
        e.closePath();
        Kt(e, c[4], c[5], a * 4);
        e.translate(0, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115.5, a * 116.07290649414062);
        e.bezierCurveTo(a * 159.5, a * 99.07290649414062, a * 159.5, a * 98.07290649414062, a * 159.5, a * 98.07290649414062);
        e.bezierCurveTo(a * 155.5, a * 116.07290649414062, a * 159.5, a * 116.07290649414062, a * 159.5, a * 118.07290649414062);
        e.bezierCurveTo(a * 147.5, a * 130.07290649414062, a * 136.5, a * 132.07290649414062, a * 115.5, a * 138.07290649414062);
        e.closePath();
        Kt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39.5, a * 96.07290649414062);
        e.bezierCurveTo(a * 85.5, a * 114.07290649414062, a * 62.5, a * 105.57290649414062, a * 85.5, a * 115.07290649414062);
        e.bezierCurveTo(a * 85.5, a * 125.57290649414062, a * 85.5, a * 125.57290649414062, a * 85.5, a * 136.07290649414062);
        e.bezierCurveTo(a * 51.5, a * 129.07290649414062, a * 51.5, a * 125.07290649414062, a * 41.5, a * 118.07290649414062);
        e.bezierCurveTo(a * 44.5, a * 106.07290649414062, a * 42.5, a * 103.07290649414062, a * 40.5, a * 96.07290649414062);
        e.closePath();
        Kt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 80);
        e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
        e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
        e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
        e.closePath();
        Kt(e, c[3], c[2], a * 4);
        e.scale(0.5, 0.5);
        e.translate(a * 100, a * 71);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 80);
        e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
        e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
        e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
        e.closePath();
        Kt(e, c[6], c[2], a * 4);
        return d;
    }
    function Tc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 144;
        d.height = a * 280;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 62, a * 103.79999542236328);
        e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
        e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
        e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
        e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
        e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
        e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
        e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
        e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
        e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
        e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
        e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
        e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
        e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
        e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 62, a * 103.79999542236328);
        e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
        e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
        e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
        e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
        e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
        e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
        e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
        e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
        e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
        e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
        e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
        e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
        e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
        e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
        e.closePath();
        Kt(e, c[1], c[2], a * 6);
        return d;
    }
    function fc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 272;
        d.height = a * 264;
        e.translate(0, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.999969482421875, a * 84.517333984375);
        e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
        e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
        e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
        e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
        e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
        e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
        e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
        e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
        e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
        e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
        e.closePath();
        Kt(e, c[0]);
        e.translate(0, a * -20);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.999969482421875, a * 84.517333984375);
        e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
        e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
        e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
        e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
        e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
        e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
        e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
        e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
        e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
        e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
        e.closePath();
        Kt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123.99996948242188, a * 116.18402099609375);
        e.bezierCurveTo(a * 115.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 74.18402099609375, a * 109.99996948242188, a * 63.18402099609375);
        e.bezierCurveTo(a * 115.99996948242188, a * 69.18402099609375, a * 125.99996948242188, a * 87.18402099609375, a * 137.99996948242188, a * 112.18402099609375);
        e.bezierCurveTo(a * 142.99996948242188, a * 84.18402099609375, a * 143.99996948242188, a * 76.18402099609375, a * 153.99996948242188, a * 62.18402099609375);
        e.bezierCurveTo(a * 155.99996948242188, a * 79.18402099609375, a * 149.99996948242188, a * 110.18402099609375, a * 151.99996948242188, a * 117.18402099609375);
        e.bezierCurveTo(a * 162.99996948242188, a * 104.18402099609375, a * 180.99996948242188, a * 91.18402099609375, a * 191.99996948242188, a * 91.18402099609375);
        e.bezierCurveTo(a * 185.99996948242188, a * 102.18402099609375, a * 180.99996948242188, a * 106.18402099609375, a * 160.99996948242188, a * 124.18402099609375);
        e.bezierCurveTo(a * 190.99996948242188, a * 121.18402099609375, a * 199.99996948242188, a * 120.18402099609375, a * 207.99996948242188, a * 123.18402099609375);
        e.bezierCurveTo(a * 199.99996948242188, a * 129.18402099609375, a * 181.99996948242188, a * 132.18402099609375, a * 160.99996948242188, a * 135.18402099609375);
        e.bezierCurveTo(a * 179.99996948242188, a * 142.18402099609375, a * 193.99996948242188, a * 151.18402099609375, a * 196.99996948242188, a * 156.18402099609375);
        e.bezierCurveTo(a * 185.99996948242188, a * 156.18402099609375, a * 163.99996948242188, a * 149.18402099609375, a * 152.99996948242188, a * 147.18402099609375);
        e.bezierCurveTo(a * 157.99996948242188, a * 155.18402099609375, a * 165.99996948242188, a * 176.18402099609375, a * 169.99996948242188, a * 195.18402099609375);
        e.bezierCurveTo(a * 162.99996948242188, a * 190.18402099609375, a * 147.99996948242188, a * 167.18402099609375, a * 139.99996948242188, a * 153.18402099609375);
        e.bezierCurveTo(a * 137.99996948242188, a * 167.18402099609375, a * 126.99996948242188, a * 194.18402099609375, a * 119.99996948242188, a * 204.18402099609375);
        e.bezierCurveTo(a * 117.99996948242188, a * 186.18402099609375, a * 123.99996948242188, a * 165.18402099609375, a * 126.99996948242188, a * 149.18402099609375);
        e.bezierCurveTo(a * 110.99996948242188, a * 163.18402099609375, a * 103.99996948242188, a * 170.18402099609375, a * 82.99996948242188, a * 177.18402099609375);
        e.bezierCurveTo(a * 90.99996948242188, a * 162.18402099609375, a * 99.99996948242188, a * 153.18402099609375, a * 117.99996948242188, a * 140.18402099609375);
        e.bezierCurveTo(a * 97.99996948242188, a * 140.18402099609375, a * 83.99996948242188, a * 139.18402099609375, a * 65.99996948242188, a * 132.18402099609375);
        e.bezierCurveTo(a * 77.99996948242188, a * 127.18402099609375, a * 95.99996948242188, a * 127.18402099609375, a * 115.99996948242188, a * 127.18402099609375);
        e.bezierCurveTo(a * 91.99996948242188, a * 113.18402099609375, a * 84.99996948242188, a * 107.18402099609375, a * 76.99996948242188, a * 96.18402099609375);
        e.bezierCurveTo(a * 94.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 109.18402099609375, a * 123.99996948242188, a * 116.18402099609375);
        e.closePath();
        Kt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131.99996948242188, a * 119.18402099609375);
        e.bezierCurveTo(a * 141.99996948242188, a * 119.18402099609375, a * 145.99996948242188, a * 116.18402099609375, a * 147.99996948242188, a * 109.18402099609375);
        e.bezierCurveTo(a * 151.99996948242188, a * 107.18402099609375, a * 159.99996948242188, a * 107.18402099609375, a * 156.99996948242188, a * 123.18402099609375);
        e.bezierCurveTo(a * 155.99996948242188, a * 140.18402099609375, a * 142.99996948242188, a * 149.18402099609375, a * 132.99996948242188, a * 147.18402099609375);
        e.bezierCurveTo(a * 119.99996948242188, a * 144.18402099609375, a * 113.99996948242188, a * 122.18402099609375, a * 131.99996948242188, a * 119.18402099609375);
        e.closePath();
        Kt(e, c[4], c[5], a * 6);
        return d;
    }
    function zc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 158;
        d.height = a * 201;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96.5, a * 76.421875);
        e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
        e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
        e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
        e.closePath();
        Kt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 61.5, a * 78.421875);
        e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
        e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
        e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
        e.closePath();
        Kt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 127.421875);
        e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
        e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
        e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
        e.closePath();
        Kt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41.5, a * 134.421875);
        e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
        e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
        e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
        e.closePath();
        Kt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 78.5, a * 51.921875);
        e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
        e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
        e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
        e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
        e.closePath();
        Kt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 72.421875);
        e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
        e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
        e.closePath();
        Kt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.5, a * 163.421875);
        e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
        e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
        e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
        e.closePath();
        Kt(e, c[8], c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79.5, a * 61.421875);
        e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
        e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
        e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
        e.closePath();
        Kt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 72.421875);
        e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
        e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
        e.closePath();
        Kt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96.5, a * 76.421875);
        e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
        e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
        e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
        e.closePath();
        Kt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 61.5, a * 78.421875);
        e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
        e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
        e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
        e.closePath();
        Kt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 127.421875);
        e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
        e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
        e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
        e.closePath();
        Kt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41.5, a * 134.421875);
        e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
        e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
        e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
        e.closePath();
        Kt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 78.5, a * 51.921875);
        e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
        e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
        e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
        e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
        e.closePath();
        Kt(e, c[3], c[2], a * 4);
        Nt(e, a * 108.5, a * 148.421875, a * 9);
        Kt(e, c[5]);
        Nt(e, a * 106.5, a * 144.421875, a * 3);
        Kt(e, c[6]);
        Nt(e, a * 46.5, a * 148.421875, a * 9);
        Kt(e, c[5]);
        Nt(e, a * 44.5, a * 144.421875, a * 3);
        Kt(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 114.421875);
        e.bezierCurveTo(a * 121.5, a * 137.421875, a * 118.5, a * 133.421875, a * 108.5, a * 139.421875);
        e.bezierCurveTo(a * 94.5, a * 146.421875, a * 96.5, a * 148.421875, a * 95.5, a * 152.421875);
        Kt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.translate(0, a * -2);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35.5, a * 131.421875);
        e.bezierCurveTo(a * 36.5, a * 140.421875, a * 39.5, a * 140.421875, a * 49.5, a * 143.421875);
        e.bezierCurveTo(a * 59.5, a * 149.421875, a * 57.5, a * 151.421875, a * 59.5, a * 155.421875);
        Kt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 57.421875);
        e.bezierCurveTo(a * 101.5, a * 120.421875, a * 92.5, a * 127.421875, a * 78.5, a * 134.421875);
        e.bezierCurveTo(a * 51.5, a * 131.421875, a * 63.5, a * 102.421875, a * 70.5, a * 59.421875);
        e.bezierCurveTo(a * 75, a * 55.421875, a * 78.5, a * 52.421875, a * 79.5, a * 51.421875);
        e.closePath();
        Kt(e, c[4]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79.5, a * 61.421875);
        e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
        e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
        e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
        e.closePath();
        Kt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 72.421875);
        e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
        e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
        e.closePath();
        Kt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 154.421875);
        e.bezierCurveTo(a * 93.5, a * 163.921875, a * 93.5, a * 163.921875, a * 99.5, a * 173.421875);
        e.bezierCurveTo(a * 95, a * 177.421875, a * 95, a * 177.421875, a * 90.5, a * 181.421875);
        e.bezierCurveTo(a * 89, a * 167.921875, a * 89, a * 167.921875, a * 87.5, a * 154.421875);
        e.closePath();
        Kt(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 81.5, a * 164.421875);
        e.bezierCurveTo(a * 84, a * 172.921875, a * 84, a * 172.921875, a * 86.5, a * 181.421875);
        e.bezierCurveTo(a * 82.5, a * 182.421875, a * 82.5, a * 182.421875, a * 78.5, a * 183.421875);
        e.closePath();
        Kt(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 164.421875);
        e.bezierCurveTo(a * 73.5, a * 173.921875, a * 73.5, a * 173.921875, a * 74.5, a * 183.421875);
        e.bezierCurveTo(a * 70.5, a * 182.921875, a * 70.5, a * 182.921875, a * 66.5, a * 182.421875);
        e.closePath();
        Kt(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65.5, a * 156.421875);
        e.bezierCurveTo(a * 65, a * 168.421875, a * 65, a * 168.421875, a * 64.5, a * 180.421875);
        e.bezierCurveTo(a * 58.5, a * 177.421875, a * 58.5, a * 177.421875, a * 52.5, a * 174.421875);
        e.closePath();
        Kt(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.5, a * 163.421875);
        e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
        e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
        e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
        e.closePath();
        Kt(e, c[3], c[2], a * 4);
        return d;
    }
    function yc(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 376;
        c.height = a * 371;
        d.globalAlpha = 0.5;
        d.translate(a * 5, a * 5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 191.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
        d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
        d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
        d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
        d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
        d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
        d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
        d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
        d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
        d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
        d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
        d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
        d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
        d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
        d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
        d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
        d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
        d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
        d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
        d.closePath();
        Kt(d, b[0]);
        d.globalAlpha = 1;
        d.translate(a * -4, a * -5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 191.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
        d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
        d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
        d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
        d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
        d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
        d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
        d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
        d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
        d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
        d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
        d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
        d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
        d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
        d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
        d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
        d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
        d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
        d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
        d.closePath();
        Kt(d, Db, b[1], a * 12);
        d.translate(a * -1, a * 0);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 270.633544921875, a * 88.98580932617188);
        d.bezierCurveTo(a * 296.633544921875, a * 65.98580932617188, a * 318.633544921875, a * 62.985809326171875, a * 348.633544921875, a * 57.985809326171875);
        d.bezierCurveTo(a * 309.633544921875, a * 76.98580932617188, a * 291.633544921875, a * 88.98580932617188, a * 280.633544921875, a * 99.98580932617188);
        d.closePath();
        Kt(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 275.633544921875, a * 281.9858093261719);
        d.bezierCurveTo(a * 303.633544921875, a * 308.9858093261719, a * 321.633544921875, a * 308.9858093261719, a * 335.633544921875, a * 315.9858093261719);
        d.bezierCurveTo(a * 305.633544921875, a * 320.9858093261719, a * 278.633544921875, a * 307.9858093261719, a * 264.633544921875, a * 293.9858093261719);
        d.closePath();
        Kt(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 124.633544921875, a * 291.9858093261719);
        d.bezierCurveTo(a * 106.633544921875, a * 316.9858093261719, a * 72.633544921875, a * 325.9858093261719, a * 53.633544921875, a * 319.9858093261719);
        d.bezierCurveTo(a * 83.633544921875, a * 308.9858093261719, a * 97.633544921875, a * 298.9858093261719, a * 112.633544921875, a * 284.9858093261719);
        d.closePath();
        Kt(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 113.633544921875, a * 80.98580932617188);
        d.bezierCurveTo(a * 91.633544921875, a * 54.985809326171875, a * 72.633544921875, a * 56.985809326171875, a * 36.633544921875, a * 49.985809326171875);
        d.bezierCurveTo(a * 87.633544921875, a * 72.98580932617188, a * 95.633544921875, a * 82.98580932617188, a * 106.633544921875, a * 96.98580932617188);
        d.closePath();
        Kt(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 202.633544921875, a * 20.985809326171875);
        d.bezierCurveTo(a * 219.633544921875, a * 49.985809326171875, a * 259.633544921875, a * 80.98580932617188, a * 255.633544921875, a * 92.98580932617188);
        d.bezierCurveTo(a * 268.633544921875, a * 86.98580932617188, a * 265.633544921875, a * 87.98580932617188, a * 275.633544921875, a * 82.98580932617188);
        d.bezierCurveTo(a * 283.633544921875, a * 87.98580932617188, a * 283.633544921875, a * 87.98580932617188, a * 291.633544921875, a * 92.98580932617188);
        d.bezierCurveTo(a * 269.633544921875, a * 116.98580932617188, a * 270.633544921875, a * 124.98580932617188, a * 267.633544921875, a * 130.98580932617188);
        d.bezierCurveTo(a * 307.633544921875, a * 168.98580932617188, a * 339.633544921875, a * 132.98580932617188, a * 352.633544921875, a * 93.98580932617188);
        d.bezierCurveTo(a * 366.633544921875, a * 145.98580932617188, a * 345.633544921875, a * 207.98580932617188, a * 286.633544921875, a * 208.98580932617188);
        d.bezierCurveTo(a * 315.633544921875, a * 223.98580932617188, a * 327.633544921875, a * 287.9858093261719, a * 355.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 293.633544921875, a * 298.9858093261719, a * 293.633544921875, a * 275.9858093261719, a * 276.633544921875, a * 266.9858093261719);
        d.bezierCurveTo(a * 274.633544921875, a * 282.9858093261719, a * 287.633544921875, a * 288.9858093261719, a * 295.633544921875, a * 296.9858093261719);
        d.bezierCurveTo(a * 287.133544921875, a * 302.4858093261719, a * 287.133544921875, a * 302.4858093261719, a * 278.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 261.633544921875, a * 297.9858093261719, a * 258.633544921875, a * 293.9858093261719, a * 255.633544921875, a * 290.9858093261719);
        d.bezierCurveTo(a * 249.633544921875, a * 301.9858093261719, a * 225.633544921875, a * 320.9858093261719, a * 202.633544921875, a * 354.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 318.9858093261719, a * 196.633544921875, a * 306.9858093261719, a * 198.633544921875, a * 300.9858093261719);
        d.bezierCurveTo(a * 209.633544921875, a * 268.9858093261719, a * 199.633544921875, a * 266.9858093261719, a * 195.633544921875, a * 256.9858093261719);
        d.bezierCurveTo(a * 183.633544921875, a * 274.9858093261719, a * 182.633544921875, a * 281.9858093261719, a * 192.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 194.633544921875, a * 317.9858093261719, a * 191.633544921875, a * 336.9858093261719, a * 186.633544921875, a * 351.9858093261719);
        d.bezierCurveTo(a * 166.633544921875, a * 318.9858093261719, a * 141.633544921875, a * 303.9858093261719, a * 136.633544921875, a * 286.9858093261719);
        d.bezierCurveTo(a * 122.633544921875, a * 303.9858093261719, a * 115.633544921875, a * 305.9858093261719, a * 109.633544921875, a * 306.9858093261719);
        d.bezierCurveTo(a * 101.133544921875, a * 301.9858093261719, a * 94.633544921875, a * 297.9858093261719, a * 92.633544921875, a * 296.9858093261719);
        d.bezierCurveTo(a * 116.633544921875, a * 277.9858093261719, a * 116.633544921875, a * 266.9858093261719, a * 119.633544921875, a * 257.9858093261719);
        d.bezierCurveTo(a * 107.633544921875, a * 257.9858093261719, a * 65.633544921875, a * 308.9858093261719, a * 24.633544921875, a * 303.9858093261719);
        d.bezierCurveTo(a * 51.633544921875, a * 275.9858093261719, a * 64.633544921875, a * 220.98580932617188, a * 108.633544921875, a * 205.98580932617188);
        d.bezierCurveTo(a * 14.633544921875, a * 198.98580932617188, a * 26.633544921875, a * 142.98580932617188, a * 25.633544921875, a * 86.98580932617188);
        d.bezierCurveTo(a * 41.633544921875, a * 155.98580932617188, a * 81.633544921875, a * 148.98580932617188, a * 113.633544921875, a * 124.98580932617188);
        d.bezierCurveTo(a * 102.633544921875, a * 93.98580932617188, a * 95.633544921875, a * 88.98580932617188, a * 89.633544921875, a * 81.98580932617188);
        d.bezierCurveTo(a * 97.633544921875, a * 76.48580932617188, a * 97.633544921875, a * 76.48580932617188, a * 105.633544921875, a * 70.98580932617188);
        d.bezierCurveTo(a * 120.633544921875, a * 78.98580932617188, a * 121.633544921875, a * 81.98580932617188, a * 124.633544921875, a * 86.98580932617188);
        d.bezierCurveTo(a * 132.633544921875, a * 71.98580932617188, a * 160.633544921875, a * 56.985809326171875, a * 175.633544921875, a * 23.985809326171875);
        d.bezierCurveTo(a * 182.633544921875, a * 53.985809326171875, a * 170.633544921875, a * 102.98580932617188, a * 191.633544921875, a * 125.98580932617188);
        d.bezierCurveTo(a * 214.633544921875, a * 89.98580932617188, a * 192.633544921875, a * 58.985809326171875, a * 202.633544921875, a * 20.985809326171875);
        d.closePath();
        Kt(d, b[2], b[3], a * 5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 203.633544921875, a * 21.985809326171875);
        d.bezierCurveTo(a * 223.633544921875, a * 63.985809326171875, a * 227.633544921875, a * 72.98580932617188, a * 235.633544921875, a * 98.98580932617188);
        d.bezierCurveTo(a * 241.633544921875, a * 123.98580932617188, a * 225.633544921875, a * 138.98580932617188, a * 196.633544921875, a * 122.98580932617188);
        d.bezierCurveTo(a * 213.633544921875, a * 93.98580932617188, a * 199.633544921875, a * 49.985809326171875, a * 203.633544921875, a * 26.985809326171875);
        d.closePath();
        Kt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 175.633544921875, a * 25.985809326171875);
        d.bezierCurveTo(a * 176.633544921875, a * 51.985809326171875, a * 171.633544921875, a * 88.98580932617188, a * 186.633544921875, a * 121.98580932617188);
        d.bezierCurveTo(a * 156.633544921875, a * 144.98580932617188, a * 139.633544921875, a * 120.98580932617188, a * 147.633544921875, a * 97.98580932617188);
        d.bezierCurveTo(a * 152.633544921875, a * 77.98580932617188, a * 162.633544921875, a * 60.985809326171875, a * 176.633544921875, a * 25.985809326171875);
        d.closePath();
        Kt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 26.633544921875, a * 96.98580932617188);
        d.bezierCurveTo(a * 38.633544921875, a * 151.98580932617188, a * 61.633544921875, a * 161.98580932617188, a * 88.633544921875, a * 168.98580932617188);
        d.bezierCurveTo(a * 117.633544921875, a * 177.98580932617188, a * 113.633544921875, a * 185.98580932617188, a * 106.633544921875, a * 204.98580932617188);
        d.bezierCurveTo(a * 32.633544921875, a * 204.98580932617188, a * 25.633544921875, a * 149.98580932617188, a * 25.633544921875, a * 97.98580932617188);
        d.closePath();
        Kt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 351.633544921875, a * 99.98580932617188);
        d.bezierCurveTo(a * 365.633544921875, a * 161.98580932617188, a * 333.633544921875, a * 203.98580932617188, a * 287.633544921875, a * 207.98580932617188);
        d.bezierCurveTo(a * 255.633544921875, a * 208.98580932617188, a * 266.633544921875, a * 174.98580932617188, a * 285.633544921875, a * 176.98580932617188);
        d.bezierCurveTo(a * 313.633544921875, a * 178.98580932617188, a * 348.633544921875, a * 135.98580932617188, a * 353.633544921875, a * 99.98580932617188);
        d.closePath();
        Kt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 350.633544921875, a * 302.9858093261719);
        d.bezierCurveTo(a * 310.633544921875, a * 280.9858093261719, a * 314.633544921875, a * 244.98580932617188, a * 292.633544921875, a * 230.98580932617188);
        d.bezierCurveTo(a * 272.633544921875, a * 215.98580932617188, a * 263.633544921875, a * 222.98580932617188, a * 256.633544921875, a * 236.98580932617188);
        d.bezierCurveTo(a * 251.633544921875, a * 249.98580932617188, a * 264.633544921875, a * 255.98580932617188, a * 279.633544921875, a * 268.9858093261719);
        d.bezierCurveTo(a * 306.633544921875, a * 295.9858093261719, a * 325.633544921875, a * 299.9858093261719, a * 349.633544921875, a * 302.9858093261719);
        d.closePath();
        Kt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 95.633544921875, a * 224.98580932617188);
        d.bezierCurveTo(a * 64.633544921875, a * 245.98580932617188, a * 62.633544921875, a * 280.9858093261719, a * 32.633544921875, a * 303.9858093261719);
        d.bezierCurveTo(a * 59.633544921875, a * 301.9858093261719, a * 102.633544921875, a * 260.9858093261719, a * 116.633544921875, a * 255.98580932617188);
        d.bezierCurveTo(a * 139.633544921875, a * 229.98580932617188, a * 108.633544921875, a * 209.98580932617188, a * 97.633544921875, a * 224.98580932617188);
        d.closePath();
        Kt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 195.633544921875, a * 253.98580932617188);
        d.bezierCurveTo(a * 209.633544921875, a * 282.9858093261719, a * 205.633544921875, a * 278.9858093261719, a * 199.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 198.633544921875, a * 332.9858093261719, a * 201.633544921875, a * 340.9858093261719, a * 202.633544921875, a * 348.9858093261719);
        d.bezierCurveTo(a * 215.633544921875, a * 313.9858093261719, a * 226.633544921875, a * 291.9858093261719, a * 235.633544921875, a * 270.9858093261719);
        d.bezierCurveTo(a * 243.633544921875, a * 247.98580932617188, a * 219.633544921875, a * 235.98580932617188, a * 196.633544921875, a * 252.98580932617188);
        d.closePath();
        Kt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 195.633544921875, a * 251.98580932617188);
        d.bezierCurveTo(a * 176.633544921875, a * 275.9858093261719, a * 182.633544921875, a * 285.9858093261719, a * 191.633544921875, a * 308.9858093261719);
        d.bezierCurveTo(a * 194.633544921875, a * 318.9858093261719, a * 190.633544921875, a * 334.9858093261719, a * 186.633544921875, a * 348.9858093261719);
        d.bezierCurveTo(a * 175.633544921875, a * 307.9858093261719, a * 157.633544921875, a * 291.9858093261719, a * 155.633544921875, a * 272.9858093261719);
        d.bezierCurveTo(a * 150.633544921875, a * 243.98580932617188, a * 170.633544921875, a * 236.98580932617188, a * 195.633544921875, a * 251.98580932617188);
        d.closePath();
        Kt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 316, a * 186.8020782470703);
        d.bezierCurveTo(a * 315, a * 173.8020782470703, a * 298, a * 177.8020782470703, a * 293, a * 183.8020782470703);
        d.bezierCurveTo(a * 285, a * 195.8020782470703, a * 314, a * 197.8020782470703, a * 315, a * 187.8020782470703);
        d.closePath();
        Kt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 340, a * 157.8020782470703);
        d.bezierCurveTo(a * 327, a * 153.8020782470703, a * 321, a * 168.8020782470703, a * 330, a * 174.8020782470703);
        d.bezierCurveTo(a * 341, a * 178.8020782470703, a * 347, a * 161.8020782470703, a * 341, a * 157.8020782470703);
        d.closePath();
        Kt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 349, a * 136.8020782470703);
        d.bezierCurveTo(a * 343, a * 135.8020782470703, a * 342, a * 139.8020782470703, a * 341, a * 147.8020782470703);
        d.bezierCurveTo(a * 343, a * 155.8020782470703, a * 353, a * 143.8020782470703, a * 349, a * 137.8020782470703);
        d.closePath();
        Kt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 278.75, a * 246.4375);
        d.bezierCurveTo(a * 288.75, a * 242.4375, a * 301.75, a * 248.4375, a * 298.75, a * 262.4375);
        d.bezierCurveTo(a * 293.75, a * 271.4375, a * 287.75, a * 271.4375, a * 278.75, a * 262.4375);
        d.bezierCurveTo(a * 271.75, a * 255.4375, a * 274.75, a * 250.4375, a * 277.75, a * 247.4375);
        d.closePath();
        Kt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 310.75, a * 277.4375);
        d.bezierCurveTo(a * 319.75, a * 280.4375, a * 322.75, a * 283.4375, a * 321.75, a * 289.4375);
        d.bezierCurveTo(a * 319.75, a * 295.4375, a * 313.75, a * 291.4375, a * 308.75, a * 288.4375);
        d.bezierCurveTo(a * 301.75, a * 281.4375, a * 306.75, a * 277.4375, a * 309.75, a * 277.4375);
        d.closePath();
        Kt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.75, a * 257.4375);
        d.bezierCurveTo(a * 227.75, a * 269.4375, a * 220.75, a * 281.4375, a * 212.75, a * 280.4375);
        d.bezierCurveTo(a * 206.75, a * 279.4375, a * 206.75, a * 269.4375, a * 204.75, a * 260.4375);
        d.bezierCurveTo(a * 204.75, a * 254.4375, a * 211.75, a * 253.4375, a * 216.75, a * 256.4375);
        d.closePath();
        Kt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 211.75, a * 289.4375);
        d.bezierCurveTo(a * 219.75, a * 292.4375, a * 213.75, a * 306.4375, a * 206.75, a * 307.4375);
        d.bezierCurveTo(a * 199.75, a * 303.4375, a * 209.75, a * 287.4375, a * 210.75, a * 289.4375);
        d.closePath();
        Kt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 171.75, a * 256.4375);
        d.bezierCurveTo(a * 162.75, a * 273.4375, a * 166.75, a * 278.4375, a * 175.75, a * 280.4375);
        d.bezierCurveTo(a * 183.75, a * 278.4375, a * 185.75, a * 257.4375, a * 182.75, a * 255.4375);
        d.bezierCurveTo(a * 176.75, a * 251.4375, a * 172.75, a * 253.4375, a * 172.75, a * 256.4375);
        d.closePath();
        Kt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 175.75, a * 289.9375);
        d.bezierCurveTo(a * 183.75, a * 287.9375, a * 186.75, a * 301.9375, a * 182.75, a * 305.9375);
        d.bezierCurveTo(a * 176.75, a * 307.9375, a * 171.75, a * 292.9375, a * 174.75, a * 290.9375);
        d.closePath();
        Kt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 205.75, a * 314.4375);
        d.bezierCurveTo(a * 209.75, a * 316.4375, a * 210.75, a * 320.4375, a * 206.75, a * 323.4375);
        d.bezierCurveTo(a * 201.75, a * 324.4375, a * 201.75, a * 314.4375, a * 204.75, a * 314.4375);
        d.closePath();
        Kt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 186.75, a * 313.4375);
        d.bezierCurveTo(a * 181.75, a * 315.4375, a * 180.75, a * 321.4375, a * 185.75, a * 326.4375);
        d.bezierCurveTo(a * 190.75, a * 327.4375, a * 190.75, a * 313.4375, a * 187.75, a * 314.4375);
        d.closePath();
        Kt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 103.75, a * 244.4375);
        d.bezierCurveTo(a * 96.75, a * 239.4375, a * 83.75, a * 240.4375, a * 81.75, a * 255.4375);
        d.bezierCurveTo(a * 80.75, a * 264.4375, a * 89.75, a * 269.4375, a * 99.75, a * 260.4375);
        d.bezierCurveTo(a * 106.75, a * 254.4375, a * 106.75, a * 250.4375, a * 104.75, a * 245.4375);
        d.closePath();
        Kt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 86.75, a * 182.4375);
        d.bezierCurveTo(a * 82.75, a * 170.4375, a * 66.75, a * 169.4375, a * 61.75, a * 181.4375);
        d.bezierCurveTo(a * 58.75, a * 187.4375, a * 68.75, a * 194.4375, a * 75.75, a * 192.4375);
        d.bezierCurveTo(a * 83.75, a * 192.4375, a * 86.75, a * 187.4375, a * 86.75, a * 183.4375);
        d.closePath();
        Kt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 44.75, a * 152.4375);
        d.bezierCurveTo(a * 55.75, a * 159.4375, a * 54.75, a * 170.4375, a * 46.75, a * 171.4375);
        d.bezierCurveTo(a * 39.75, a * 170.4375, a * 34.75, a * 151.4375, a * 43.75, a * 152.4375);
        d.closePath();
        Kt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 31.75, a * 130.4375);
        d.bezierCurveTo(a * 35.75, a * 132.4375, a * 35.75, a * 131.4375, a * 37.75, a * 137.4375);
        d.bezierCurveTo(a * 36.75, a * 144.4375, a * 36.75, a * 145.4375, a * 33.75, a * 144.4375);
        d.bezierCurveTo(a * 26.75, a * 137.4375, a * 29.75, a * 131.4375, a * 31.75, a * 130.4375);
        d.closePath();
        Kt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 69.75, a * 274.4375);
        d.bezierCurveTo(a * 62.75, a * 272.4375, a * 59.75, a * 277.4375, a * 57.75, a * 284.4375);
        d.bezierCurveTo(a * 56.75, a * 290.4375, a * 63.75, a * 289.4375, a * 71.75, a * 282.4375);
        d.bezierCurveTo(a * 75.75, a * 277.4375, a * 72.75, a * 275.4375, a * 69.75, a * 274.4375);
        d.closePath();
        Kt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 165.75, a * 95.4375);
        d.bezierCurveTo(a * 177.75, a * 97.4375, a * 182.75, a * 115.4375, a * 173.75, a * 121.4375);
        d.bezierCurveTo(a * 164.75, a * 126.4375, a * 149.75, a * 102.4375, a * 164.75, a * 96.4375);
        d.closePath();
        Kt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 216.75, a * 94.4375);
        d.bezierCurveTo(a * 227.75, a * 99.4375, a * 223.75, a * 122.4375, a * 210.75, a * 119.4375);
        d.bezierCurveTo(a * 203.75, a * 115.4375, a * 207.75, a * 93.4375, a * 216.75, a * 94.4375);
        d.closePath();
        Kt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 211.75, a * 68.4375);
        d.bezierCurveTo(a * 218.75, a * 69.4375, a * 220.75, a * 77.4375, a * 216.75, a * 83.4375);
        d.bezierCurveTo(a * 208.75, a * 89.4375, a * 205.75, a * 68.4375, a * 210.75, a * 68.4375);
        d.closePath();
        Kt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 169.75, a * 71.4375);
        d.bezierCurveTo(a * 162.75, a * 72.4375, a * 159.75, a * 83.4375, a * 167.75, a * 88.4375);
        d.bezierCurveTo(a * 174.75, a * 90.4375, a * 174.75, a * 72.4375, a * 170.75, a * 71.4375);
        d.closePath();
        Kt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 193.75, a * 160.4375);
        d.bezierCurveTo(a * 215.75, a * 168.4375, a * 224.75, a * 180.4375, a * 229.75, a * 193.4375);
        d.bezierCurveTo(a * 223.75, a * 211.4375, a * 205.75, a * 225.4375, a * 193.75, a * 229.4375);
        d.bezierCurveTo(a * 167.75, a * 217.4375, a * 161.75, a * 205.4375, a * 156.75, a * 192.4375);
        d.bezierCurveTo(a * 164.75, a * 175.4375, a * 176.75, a * 166.4375, a * 192.75, a * 160.4375);
        d.closePath();
        Kt(d, b[8], b[9], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 189.1999969482422, a * 182.61249923706055);
        d.bezierCurveTo(a * 190.1999969482422, a * 184.11249923706055, a * 190.1999969482422, a * 184.11249923706055, a * 191.1999969482422, a * 185.61249923706055);
        d.bezierCurveTo(a * 192.1999969482422, a * 180.61249923706055, a * 192.1999969482422, a * 180.61249923706055, a * 193.1999969482422, a * 175.61249923706055);
        d.bezierCurveTo(a * 195.6999969482422, a * 177.11249923706055, a * 195.6999969482422, a * 177.11249923706055, a * 198.1999969482422, a * 178.61249923706055);
        d.bezierCurveTo(a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 183.61249923706055);
        d.bezierCurveTo(a * 201.6999969482422, a * 181.11249923706055, a * 201.6999969482422, a * 181.11249923706055, a * 205.1999969482422, a * 178.61249923706055);
        d.bezierCurveTo(a * 206.6999969482422, a * 180.61249923706055, a * 206.6999969482422, a * 180.61249923706055, a * 208.1999969482422, a * 182.61249923706055);
        d.bezierCurveTo(a * 206.1999969482422, a * 185.61249923706055, a * 206.1999969482422, a * 185.61249923706055, a * 204.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 208.6999969482422, a * 188.61249923706055, a * 208.6999969482422, a * 188.61249923706055, a * 213.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 193.61249923706055);
        d.bezierCurveTo(a * 209.6999969482422, a * 194.61249923706055, a * 209.6999969482422, a * 194.61249923706055, a * 206.1999969482422, a * 195.61249923706055);
        d.bezierCurveTo(a * 210.1999969482422, a * 198.61249923706055, a * 210.1999969482422, a * 198.61249923706055, a * 214.1999969482422, a * 201.61249923706055);
        d.bezierCurveTo(a * 212.1999969482422, a * 203.61249923706055, a * 212.1999969482422, a * 203.61249923706055, a * 210.1999969482422, a * 205.61249923706055);
        d.bezierCurveTo(a * 207.1999969482422, a * 204.11249923706055, a * 207.1999969482422, a * 204.11249923706055, a * 204.1999969482422, a * 202.61249923706055);
        d.bezierCurveTo(a * 205.6999969482422, a * 207.61249923706055, a * 205.6999969482422, a * 207.61249923706055, a * 207.1999969482422, a * 212.61249923706055);
        d.bezierCurveTo(a * 204.6999969482422, a * 213.61249923706055, a * 204.6999969482422, a * 213.61249923706055, a * 202.1999969482422, a * 214.61249923706055);
        d.bezierCurveTo(a * 200.1999969482422, a * 210.61249923706055, a * 200.1999969482422, a * 210.61249923706055, a * 198.1999969482422, a * 206.61249923706055);
        d.bezierCurveTo(a * 196.6999969482422, a * 211.61249923706055, a * 196.6999969482422, a * 211.61249923706055, a * 195.1999969482422, a * 216.61249923706055);
        d.bezierCurveTo(a * 192.6999969482422, a * 216.11249923706055, a * 192.6999969482422, a * 216.11249923706055, a * 190.1999969482422, a * 215.61249923706055);
        d.bezierCurveTo(a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 207.61249923706055);
        d.bezierCurveTo(a * 186.1999969482422, a * 210.61249923706055, a * 186.1999969482422, a * 210.61249923706055, a * 182.1999969482422, a * 213.61249923706055);
        d.bezierCurveTo(a * 181.1999969482422, a * 211.11249923706055, a * 181.1999969482422, a * 211.11249923706055, a * 180.1999969482422, a * 208.61249923706055);
        d.bezierCurveTo(a * 183.1999969482422, a * 205.61249923706055, a * 183.1999969482422, a * 205.61249923706055, a * 186.1999969482422, a * 202.61249923706055);
        d.bezierCurveTo(a * 180.6999969482422, a * 203.11249923706055, a * 180.6999969482422, a * 203.11249923706055, a * 175.1999969482422, a * 203.61249923706055);
        d.bezierCurveTo(a * 174.6999969482422, a * 200.11249923706055, a * 174.6999969482422, a * 200.11249923706055, a * 174.1999969482422, a * 196.61249923706055);
        d.bezierCurveTo(a * 177.1999969482422, a * 195.61249923706055, a * 177.1999969482422, a * 195.61249923706055, a * 180.1999969482422, a * 194.61249923706055);
        d.bezierCurveTo(a * 177.1999969482422, a * 191.61249923706055, a * 177.1999969482422, a * 191.61249923706055, a * 174.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 175.6999969482422, a * 187.11249923706055, a * 175.6999969482422, a * 187.11249923706055, a * 177.1999969482422, a * 185.61249923706055);
        d.bezierCurveTo(a * 180.6999969482422, a * 187.11249923706055, a * 180.6999969482422, a * 187.11249923706055, a * 184.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 182.6999969482422, a * 183.61249923706055, a * 182.6999969482422, a * 183.61249923706055, a * 181.1999969482422, a * 178.61249923706055);
        d.bezierCurveTo(a * 183.1999969482422, a * 177.11249923706055, a * 183.1999969482422, a * 177.11249923706055, a * 185.1999969482422, a * 175.61249923706055);
        d.closePath();
        Kt(d, b[10]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 185.1999969482422, a * 173.8125);
        d.bezierCurveTo(a * 187.1999969482422, a * 179.3125, a * 187.1999969482422, a * 179.3125, a * 189.1999969482422, a * 184.8125);
        d.bezierCurveTo(a * 184.1999969482422, a * 181.8125, a * 184.1999969482422, a * 181.8125, a * 179.1999969482422, a * 178.8125);
        d.bezierCurveTo(a * 181.1999969482422, a * 175.8125, a * 182.1999969482422, a * 174.8125, a * 185.1999969482422, a * 173.8125);
        d.closePath();
        Kt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 192.1999969482422, a * 173.61249542236328);
        d.bezierCurveTo(a * 194.1999969482422, a * 172.61249542236328, a * 196.1999969482422, a * 171.61249542236328, a * 199.1999969482422, a * 173.61249542236328);
        d.bezierCurveTo(a * 197.6999969482422, a * 179.61249542236328, a * 197.6999969482422, a * 179.61249542236328, a * 196.1999969482422, a * 185.61249542236328);
        d.bezierCurveTo(a * 194.1999969482422, a * 179.61249542236328, a * 194.1999969482422, a * 179.61249542236328, a * 192.1999969482422, a * 173.61249542236328);
        d.closePath();
        Kt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 205.1999969482422, a * 176.2125015258789);
        d.bezierCurveTo(a * 210.1999969482422, a * 178.2125015258789, a * 211.1999969482422, a * 179.2125015258789, a * 211.1999969482422, a * 181.2125015258789);
        d.bezierCurveTo(a * 206.6999969482422, a * 184.7125015258789, a * 206.6999969482422, a * 184.7125015258789, a * 202.1999969482422, a * 188.2125015258789);
        d.bezierCurveTo(a * 203.6999969482422, a * 182.2125015258789, a * 203.6999969482422, a * 182.2125015258789, a * 205.1999969482422, a * 176.2125015258789);
        d.closePath();
        Kt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.1999969482422, a * 187.21249985694885);
        d.bezierCurveTo(a * 216.1999969482422, a * 191.21249985694885, a * 216.1999969482422, a * 192.21249985694885, a * 215.1999969482422, a * 195.21249985694885);
        d.bezierCurveTo(a * 206.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885);
        d.bezierCurveTo(a * 209.6999969482422, a * 190.71249985694885, a * 209.6999969482422, a * 190.71249985694885, a * 214.1999969482422, a * 187.21249985694885);
        d.closePath();
        Kt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 204.1999969482422, a * 201.8125);
        d.bezierCurveTo(a * 209.1999969482422, a * 201.3125, a * 209.1999969482422, a * 201.3125, a * 214.1999969482422, a * 200.8125);
        d.bezierCurveTo(a * 215.1999969482422, a * 204.8125, a * 214.1999969482422, a * 205.8125, a * 213.1999969482422, a * 208.8125);
        d.bezierCurveTo(a * 208.6999969482422, a * 205.3125, a * 208.6999969482422, a * 205.3125, a * 204.1999969482422, a * 201.8125);
        d.closePath();
        Kt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 199.1999969482422, a * 205.61249923706055);
        d.bezierCurveTo(a * 207.1999969482422, a * 212.61249923706055, a * 203.6999969482422, a * 209.11249923706055, a * 208.1999969482422, a * 212.61249923706055);
        d.bezierCurveTo(a * 206.1999969482422, a * 215.61249923706055, a * 204.1999969482422, a * 217.61249923706055, a * 203.1999969482422, a * 216.61249923706055);
        d.bezierCurveTo(a * 201.1999969482422, a * 211.11249923706055, a * 201.1999969482422, a * 211.11249923706055, a * 199.1999969482422, a * 205.61249923706055);
        d.closePath();
        Kt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 191.1999969482422, a * 207.01250076293945);
        d.bezierCurveTo(a * 194.1999969482422, a * 213.01250076293945, a * 194.1999969482422, a * 216.01250076293945, a * 196.1999969482422, a * 218.01250076293945);
        d.bezierCurveTo(a * 193.1999969482422, a * 220.01250076293945, a * 190.1999969482422, a * 220.01250076293945, a * 188.1999969482422, a * 218.01250076293945);
        d.bezierCurveTo(a * 189.6999969482422, a * 213.01250076293945, a * 189.6999969482422, a * 213.01250076293945, a * 191.1999969482422, a * 208.01250076293945);
        d.closePath();
        Kt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 186.1999969482422, a * 203.21249961853027);
        d.bezierCurveTo(a * 184.1999969482422, a * 209.21249961853027, a * 184.1999969482422, a * 209.21249961853027, a * 182.1999969482422, a * 215.21249961853027);
        d.bezierCurveTo(a * 177.1999969482422, a * 212.21249961853027, a * 176.1999969482422, a * 211.21249961853027, a * 177.1999969482422, a * 210.21249961853027);
        d.bezierCurveTo(a * 181.6999969482422, a * 206.71249961853027, a * 181.6999969482422, a * 206.71249961853027, a * 186.1999969482422, a * 203.21249961853027);
        d.closePath();
        Kt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 183.1999969482422, a * 196.8125);
        d.bezierCurveTo(a * 177.1999969482422, a * 196.3125, a * 177.1999969482422, a * 196.3125, a * 171.1999969482422, a * 195.8125);
        d.bezierCurveTo(a * 171.1999969482422, a * 199.8125, a * 171.1999969482422, a * 202.8125, a * 174.1999969482422, a * 204.8125);
        d.bezierCurveTo(a * 178.6999969482422, a * 200.8125, a * 178.6999969482422, a * 200.8125, a * 183.1999969482422, a * 196.8125);
        d.closePath();
        Kt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 185.1999969482422, a * 190.21249771118164);
        d.bezierCurveTo(a * 179.6999969482422, a * 186.71249771118164, a * 179.6999969482422, a * 186.71249771118164, a * 174.1999969482422, a * 183.21249771118164);
        d.bezierCurveTo(a * 172.1999969482422, a * 186.21249771118164, a * 172.1999969482422, a * 187.21249771118164, a * 172.1999969482422, a * 190.21249771118164);
        d.bezierCurveTo(a * 178.1999969482422, a * 190.21249771118164, a * 178.1999969482422, a * 190.21249771118164, a * 184.1999969482422, a * 190.21249771118164);
        d.closePath();
        Kt(d, b[11]);
        Nt(d, a * 126.19999694824219, a * 169.8125, a * 8.94427190999916);
        Kt(d, b[12]);
        Nt(d, a * 123.19999694824219, a * 164.8125, a * 2.8284271247461903);
        Kt(d, b[13]);
        Nt(d, a * 253.1999969482422, a * 169.8125, a * 8.94427190999916);
        Kt(d, b[12]);
        Nt(d, a * 255.1999969482422, a * 164.8125, a * 2.23606797749979);
        Kt(d, b[13]);
        return c;
    }
    function wc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 170;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * -10, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 4.109375);
        e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
        e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
        e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
        e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
        e.closePath();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * 10, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 4.109375);
        e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
        e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
        e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
        e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
        e.closePath();
        Kt(e, c[1], c[2], a * 10);
        return d;
    }
    function Pc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 102;
        d.height = a * 102;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(3, 3);
        Lt(e, a * 24, a * 26, a * 70, a * 9, a * 10);
        Kt(e, c[0]);
        Lt(e, a * 26, a * 70, a * 70, a * 9, a * 10);
        Kt(e, c[0]);
        Lt(e, a * 5, a * 3, a * 22, a * 94, a * 5);
        Kt(e, c[0]);
        Lt(e, a * 40, a * 3, a * 22, a * 94, a * 5);
        Kt(e, c[0]);
        Lt(e, a * 75, a * 3, a * 22, a * 94, a * 5);
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(-3, -3);
        Lt(e, a * 24, a * 26, a * 70, a * 9, a * 10);
        Kt(e, c[1]);
        Lt(e, a * 26, a * 70, a * 70, a * 9, a * 10);
        Kt(e, c[1]);
        Lt(e, a * 5, a * 3, a * 22, a * 94, a * 5);
        Kt(e, c[2], c[3], a * 4);
        Lt(e, a * 40, a * 3, a * 22, a * 94, a * 5);
        Kt(e, c[2], c[3], a * 4);
        Lt(e, a * 75, a * 3, a * 22, a * 94, a * 5);
        Kt(e, c[2], c[3], a * 4);
        return d;
    }
    function kc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 167;
        d.height = a * 136;
        e.globalAlpha = 0.5;
        e.save();
        e.translate(a * 76.71426391601562, a * 67.85713195800781);
        Lt(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
        e.restore();
        Kt(e, c[0]);
        e.globalAlpha = 0.8;
        e.save();
        e.translate(a * 76.71426391601562, a * 67.85713195800781);
        Lt(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
        e.restore();
        Kt(e, undefined, c[1], a * 7);
        e.globalAlpha = 0.5;
        e.save();
        e.translate(a * 91.21426391601562, a * 67.35713195800781);
        Lt(e, a * -56, a * -55, a * 115, a * 109, a * 15);
        e.restore();
        Kt(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 91.21426391601562, a * 67.35713195800781);
        Lt(e, a * -56, a * -55, a * 115, a * 109, a * 15);
        e.restore();
        Kt(e, Bh, c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131.21426391601562, a * 70.35713195800781);
        e.bezierCurveTo(a * 133.21426391601562, a * 95.35713195800781, a * 128.21426391601562, a * 109.35713195800781, a * 108.21426391601562, a * 108.35713195800781);
        Kt(e, Cg, c[1], a * 10);
        return d;
    }
    function Ac() {
        Ww.ⵠᐃᐃⵠ.id = -1;
        Ww.ⵠᐃᐃⵠ.lock = false;
        Ww.ⵠᐃᐃⵠ.locked = false;
        Ww.ⵠᐃᐃⵠ.ᐃΔⲆᐃⲆⲆᐃ = false;
        Ww.ⵠᐃᐃⵠ.ⵠΔΔⵠⵠᐃⲆ = Kn;
        Ww.ⵠᐃᐃⵠ.open = false;
        var b = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ];
        var c = 100;
        if (b) {
            for (var d = 0; cf.ⵠΔⲆ[11].length > d; d++) {
                var e = cf.ⵠΔⲆ[11][d];
                var f = ⲆⵠΔᐃ.ⲆᐃⲆΔ(e, b);
                if (c > f) {
                    c = f;
                    Ww.ⵠᐃᐃⵠ.open = true;
                    Ww.ⵠᐃᐃⵠ.id = e.action < 2 ? -1 : Math.floor((e.action - 1) / 2);
                    Ww.ⵠᐃᐃⵠ.ᐃⵠⵠΔ = e.info;
                    Ww.ⵠᐃᐃⵠ.ⲆⲆΔⲆ = e.ⲆⲆΔⲆ;
                    Ww.ⵠᐃᐃⵠ.ⵠⲆⵠⵠⲆ = e.id;
                    Ww.ⵠᐃᐃⵠ.locked = e.lock;
                    Ww.ⵠᐃᐃⵠ.lock = !!e.lock && e.ⲆⲆΔⲆ != Ww.id && !Ww.ⵠΔᐃⵠΔΔΔ(e.ⲆⲆΔⲆ) || zk;
                    Ww.ⵠᐃᐃⵠ.ⵠΔΔⵠⵠᐃⲆ = e.ⲆⲆΔⲆ === Ww.id && !Ww.ⵠᐃᐃⵠ.locked && Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(148) != -1;
                    if (Ww.ⵠᐃᐃⵠ.locked && Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(158) != -1) {
                        Ww.ⵠᐃᐃⵠ.ᐃΔⲆᐃⲆⲆᐃ = Ik;
                    }
                }
            }
            if (c < 100) {
                var g = ΔⲆ[339];
                var a = Yw.ⵠᐃⲆ[0];
                var j = Math.floor(a.info.translate.x + (a.info.ᐃΔ[0].width - g.width) / 2);
                var k = Math.floor(a.info.translate.y + (a.info.ᐃΔ[0].height - g.height) / 2) + 3;
                Qc(ro, g, j, k);
                if ((!Ww.ⵠᐃᐃⵠ.lock || Ww.id === Ww.ⵠᐃᐃⵠ.ⲆⲆΔⲆ) && Ww.ⵠᐃᐃⵠ.id >= 0) {
                    (a = Yw.ⵠᐃⲆ[Ww.ⵠᐃᐃⵠ.id]).ⲆⲆΔⵠ(ro);
                    var h = Ww.ⵠᐃᐃⵠ.ᐃⵠⵠΔ;
                    if (h > 1) {
                        Lc(h, a);
                    }
                }
                if (Ww.ⵠᐃᐃⵠ.lock) {
                    Yw.ⲆᐃᐃΔΔⵠᐃ.ⲆⲆΔⵠ(ro);
                } else if (Ww.ⵠᐃᐃⵠ.ⵠΔΔⵠⵠᐃⲆ) {
                    Yw.ⲆᐃⲆᐃⵠⵠⲆ.ⲆⲆΔⵠ(ro);
                }
                if (Ww.ⵠᐃᐃⵠ.ᐃΔⲆᐃⲆⲆᐃ) {
                    Yw.ⵠΔΔᐃΔΔᐃ.ⲆⲆΔⵠ(ro);
                }
            }
        }
    }
    function xc() {
        if (Ww.reconnect.enabled) {
            ro.globalAlpha = 0.9;
            ro.fillStyle = "#000";
            Lt(ro, hq - 150, iq - 90, 300, 180, 15);
            ro.fill();
            ro.globalAlpha = 1;
            var a = ΔⲆ[301];
            ro.save();
            Ww.reconnect.rotate = (Ww.reconnect.rotate + $w * 2) % (Math.PI * 2);
            ro.translate(so / 2, gq / 2 - 25);
            ro.rotate(Ww.reconnect.rotate);
            Qc(ro, a, -a.width / 2, -a.height / 2);
            ro.restore();
            a = ΔⲆ[525];
            Qc(ro, a, (so - a.width) / 2, (gq - a.height) / 2 + 25);
        }
    }
    function Jc() {
        if (Ww.ᐃΔⵠΔ.ᐃΔΔᐃΔ.length > 0) {
            var b = {
                x: Yw.ᐃΔⵠⲆΔ.translate.x,
                y: Yw.ᐃΔⵠⲆΔ.translate.y - po * 120
            };
        } else {
            b = {
                x: Yw.ᐃΔⵠⲆΔ.translate.x,
                y: Yw.ᐃΔⵠⲆΔ.translate.y - po * 50
            };
        }
        ro.globalAlpha = 0.8;
        var c = ΔⲆ[259][cf.time];
        Qc(ro, c, b.x, b.y);
        ro.globalAlpha = 1;
        if (Yw.ᐃΔⵠⲆΔ.ⵠᐃΔΔⲆ.x > -1) {
            ro.fillStyle = "#660000";
            Nt(ro, b.x + po * Yw.ᐃΔⵠⲆΔ.ⵠᐃΔΔⲆ.x, b.y + Yw.ᐃΔⵠⲆΔ.ⵠᐃΔΔⲆ.y * po, po * 5);
            ro.fill();
        }
        var d = po;
        for (var f = Yw.ᐃΔⵠⲆΔ.ⲆⲆⵠΔ, g = 0; f.length > g; g++) {
            var h = f[g];
            cf.time;
            ro.fillStyle = "#ff0000";
            Nt(ro, b.x + h.x / (cf.ΔΔΔΔⲆ * 100) * 193 * po, b.y + h.y / (cf.ᐃⵠᐃⲆΔ * 100) * 193 * po, po * 2);
            ro.fill();
        }
        var i = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ];
        if (i) {
            ro.fillStyle = cf.time ? "#fff" : "#e39716";
            Nt(ro, b.x + po * (i.x / (cf.ΔΔΔΔⲆ * 100) * 193), b.y + i.y / (cf.ᐃⵠᐃⲆΔ * 100) * 193 * po, po * 4);
            ro.fill();
        }
        po = d;
    }
    function Mc() {
        if (!Ww.ⵠᐃᐃⵠ.open) {
            Ww.ⵠⵠΔⵠᐃ.ᐃⵠⵠΔ = 0;
            Ww.ⵠⵠΔⵠᐃ.open = f;
            var b = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ];
            var c = 100;
            if (b) {
                for (var d = 0; d < cf.ⵠΔⲆ[18].length; d++) {
                    var e = cf.ⵠΔⲆ[18][d];
                    var g = ⲆⵠΔᐃ.ⲆᐃⲆΔ(e, b);
                    if (c > g) {
                        c = g;
                        Ww.ⵠⵠΔⵠᐃ.open = true;
                        Ww.ⵠⵠΔⵠᐃ.ᐃⵠⵠΔ = e.info;
                        Ww.ⵠⵠΔⵠᐃ.ⲆⲆΔⲆ = e.ⲆⲆΔⲆ;
                        Ww.ⵠⵠΔⵠᐃ.ⵠⲆⵠⵠⲆ = e.id;
                    }
                }
                if (c < 100) {
                    var j = ΔⲆ[411];
                    var a = Yw.ΔᐃⲆᐃΔᐃᐃ;
                    var k = Math.floor(a.info.translate.x + (a.info.ᐃΔ[0].width - j.width) / 2);
                    var m = Math.floor(a.info.translate.y + (a.info.ᐃΔ[0].height - j.height) / 2) + 3;
                    Qc(ro, j, k, m);
                    if (Ww.ⵠⵠΔⵠᐃ.ᐃⵠⵠΔ > 0) {
                        a.ⲆⲆΔⵠ(ro);
                        var h = Ww.ⵠⵠΔⵠᐃ.ᐃⵠⵠΔ;
                        if (h > 1) {
                            Lc(h, a);
                        }
                    }
                }
            }
        }
    }
    function Bc() {
        Ww.ᐃⵠᐃⵠⵠ.id = -1;
        Ww.ᐃⵠᐃⵠⵠ.ⲆⲆΔⲆ = -1;
        if (!Ww.ⵠⲆᐃⵠⵠᐃᐃ && !Ww.ᐃⵠᐃⵠⵠ.wait && !Ww.ⵠⵠΔⲆⲆ) {
            var b = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ];
            var c = 100;
            if (b) {
                for (var d = 0; cf.ⵠΔⲆ[29].length > d; d++) {
                    var e = cf.ⵠΔⲆ[29][d];
                    var f = ⲆⵠΔᐃ.ⲆᐃⲆΔ(e, b);
                    if (f < c) {
                        c = f;
                        Ww.ᐃⵠᐃⵠⵠ.id = e.id;
                        Ww.ᐃⵠᐃⵠⵠ.ⲆⲆΔⲆ = e.ⲆⲆΔⲆ;
                        Ww.ᐃⵠᐃⵠⵠ.info = e.info;
                        Ww.ᐃⵠᐃⵠⵠ.lock = (e.info & 16) >> 4;
                    }
                }
            }
            var g = Yw.ᐃⵠΔⲆⲆ;
            Yw.ᐃⵠΔⲆⲆ = -1;
            if (Ww.ᐃⵠᐃⵠⵠ.ⲆⲆΔⲆ == -1 || Ww.ᐃᐃⲆᐃⲆ.length != 0 && Ww.ᐃⵠᐃⵠⵠ.ⲆⲆΔⲆ != Ww.id) {
                if (Ww.ᐃᐃⲆᐃⲆ.length != 0 && Ww.id != Ww.ᐃᐃⲆᐃⲆ[0]) {
                    Yw.ᐃⵠΔⲆⲆ = 2;
                } else if (Ww.ᐃᐃⲆᐃⲆ.length != 0 && Ww.id == Ww.ᐃᐃⲆᐃⲆ[0]) {
                    Yw.ᐃⵠΔⲆⲆ = 1;
                } else if (Ww.ᐃᐃⲆᐃⲆ.length != 0) {
                    Yw.ᐃⵠΔⲆⲆ = 3;
                }
            } else if (Ww.ᐃᐃⲆᐃⲆ.length == 0 && Ww.ᐃⵠᐃⵠⵠ.info >= 8) {
                Yw.ᐃⵠΔⲆⲆ = 4;
            } else if (Ww.ᐃᐃⲆᐃⲆ.length == 0) {
                Yw.ᐃⵠΔⲆⲆ = 3;
            } else {
                Yw.ᐃⵠΔⲆⲆ = 0;
            }
            if (Yw.ᐃⵠΔⲆⲆ != -1) {
                Yw.ᐃΔⵠⲆᐃ[Yw.ᐃⵠΔⲆⲆ].button.ⲆⲆΔⵠ(ro);
            }
            var a = document.getElementById("team_box").style;
            if (Yw.ᐃⵠΔⲆⲆ != -1 && g != Yw.ᐃⵠΔⲆⲆ && a.display == "inline-block") {
                Yw.ᐃΔⵠⲆᐃ[Yw.ᐃⵠΔⲆⲆ].action();
            }
        }
    }
    function Dc(b, c, d) {
        var e = ΔⲆ[465][b];
        var f = c.info.translate.x + po * 5;
        var g = c.info.translate.y + po * 5;
        if (c.info.state == Wv || d) {
            g += po * 5;
        }
        Qc(ro, e, f, g);
    }
    function Ic() {
        if (!Ww.ⵠᐃᐃⵠ.open && !Ww.ⵠⵠΔⵠᐃ.open && !Ww.ᐃᐃⵠΔ.open && !Ww.ΔᐃΔᐃ.open) {
            Ww.ⲆⲆⲆᐃ.open = Ig;
            var b = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ];
            var c = 100;
            if (b) {
                for (var d = 0; cf.ⵠΔⲆ[34].length > d; d++) {
                    var e = cf.ⵠΔⲆ[34][d];
                    var f = ⲆⵠΔᐃ.ⲆᐃⲆΔ(e, b);
                    if (f < c) {
                        c = f;
                        Ww.ⲆⲆⲆᐃ.open = Ik;
                        Ww.ⲆⲆⲆᐃ.ⵠⵠⵠⲆΔⵠⵠ = e.info & 31;
                        Ww.ⲆⲆⲆᐃ.ⲆΔⵠΔΔ = (e.info & 992) >> 5;
                        Ww.ⲆⲆⲆᐃ.ᐃⵠⵠⲆⵠⲆᐃ = (e.info & 31744) >> 10;
                        Ww.ⲆⲆⲆᐃ.ⲆⲆΔⲆ = e.ⲆⲆΔⲆ;
                        Ww.ⲆⲆⲆᐃ.ⵠⲆⵠⵠⲆ = e.id;
                    }
                }
                if (c < 100) {
                    var g = ΔⲆ[722];
                    var a = (j = Yw.ᐃΔⵠⲆΔⲆⲆ).info.translate.x - 32;
                    Qc(ro, g, a, 0);
                    if (Ww.ⲆⲆⲆᐃ.ⵠⵠⵠⲆΔⵠⵠ > 0) {
                        j.ⲆⲆΔⵠ(ro);
                        if ((k = Ww.ⲆⲆⲆᐃ.ⵠⵠⵠⲆΔⵠⵠ) > 1) {
                            Lc(k, j);
                        }
                    }
                    var j = Yw.ᐃΔᐃⵠΔⵠⲆ;
                    if (Ww.ⲆⲆⲆᐃ.ᐃⵠⵠⲆⵠⲆᐃ > 0) {
                        j.ⲆⲆΔⵠ(ro);
                        if ((k = Ww.ⲆⲆⲆᐃ.ᐃⵠⵠⲆⵠⲆᐃ) > 1) {
                            Lc(k, j);
                        }
                    }
                    var k;
                    j = Yw.ⲆΔⵠΔⵠᐃᐃ;
                    if (Ww.ⲆⲆⲆᐃ.ⲆΔⵠΔΔ > 0) {
                        j.ⲆⲆΔⵠ(ro);
                        if ((k = Ww.ⲆⲆⲆᐃ.ⲆΔⵠΔΔ) > 1) {
                            Lc(k, j);
                        }
                    }
                }
            }
        }
    }
    function Ec() {
        Ww.ᐃⵠⵠΔᐃ.open = false;
        var a = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ];
        var b = 100;
        if (a) {
            for (var c = 0; cf.ⵠΔⲆ[22].length > c; c++) {
                var d = cf.ⵠΔⲆ[22][c];
                var e = ⲆⵠΔᐃ.ⲆᐃⲆΔ(d, a);
                if (b > e) {
                    b = e;
                    Ww.ᐃⵠⵠΔᐃ.open = k;
                    Ww.ᐃⵠⵠΔᐃ.ⲆⲆΔⲆ = d.ⲆⲆΔⲆ;
                    Ww.ᐃⵠⵠΔᐃ.ⵠⲆⵠⵠⲆ = d.id;
                }
            }
            if (b < 100) {
                Yw.ᐃⵠⵠΔᐃ.ⲆⲆΔⵠ(ro);
            }
        }
    }
    function Sc() {
        if (!Ww.ⵠᐃᐃⵠ.open && !Ww.ⵠⵠΔⵠᐃ.open && !Ww.ᐃᐃⵠΔ.open && !Ww.ⲆⲆⲆᐃ.open && !Ww.ΔᐃΔᐃ.open) {
            Ww.sign.open = Eh;
            var a = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ];
            var b = 100;
            if (a) {
                for (var c = 0; c < cf.ⵠΔⲆ[36].length; c++) {
                    var d = cf.ⵠΔⲆ[36][c];
                    var e = ⲆⵠΔᐃ.ⲆᐃⲆΔ(d, a);
                    if (b > e && d.info === 0 && d.ⲆⲆΔⲆ === Ww.id) {
                        Ww.sign.open = true;
                        b = e;
                        Ww.sign.ⵠⲆⵠⵠⲆ = d.id;
                    }
                }
                if (b < 100) {
                    Yw.sign.button.ⲆⲆΔⵠ(ro);
                }
            }
        }
    }
    function Qc(b, c, d, e, f, g, a, i, j, h) {
        if (c.ⲆⲆⲆⵠᐃΔⲆ === undefined || c.ⲆⲆⲆⵠᐃΔⲆ() === 1) {
            if (h !== undefined) {
                b.drawImage(c, d, e, Math.max(1, f), Math.max(1, g), a, i, j, h);
            } else if (g !== Xn) {
                b.drawImage(c, d, e, f, g);
            } else {
                b.drawImage(c, d, e);
            }
        }
    }
    function _c() {
        if (!Ww.ⵠᐃᐃⵠ.open && !Ww.ⵠⵠΔⵠᐃ.open) {
            Ww.ᐃᐃⵠΔ.open = false;
            var b = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ];
            var c = 100;
            if (b) {
                for (var d = 0; cf.ⵠΔⲆ[32].length > d; d++) {
                    var e = cf.ⵠΔⲆ[32][d];
                    var f = ⲆⵠΔᐃ.ⲆᐃⲆΔ(e, b);
                    if (f < c) {
                        c = f;
                        Ww.ᐃᐃⵠΔ.open = oq;
                        Ww.ᐃᐃⵠΔ.ⲆⲆⵠⲆᐃᐃΔ = e.info & 255;
                        Ww.ᐃᐃⵠΔ.ⲆΔⵠΔΔ = (e.info & 65280) >> 8;
                        Ww.ᐃᐃⵠΔ.ⲆⲆΔⲆ = e.ⲆⲆΔⲆ;
                        Ww.ᐃᐃⵠΔ.ⵠⲆⵠⵠⲆ = e.id;
                    }
                }
                if (c < 100) {
                    var g = ΔⲆ[655];
                    var a = (k = Yw.ᐃⵠΔⵠⵠΔᐃ).info.translate.x - 33;
                    Qc(ro, g, a, 0);
                    if (Ww.ᐃᐃⵠΔ.ⲆⲆⵠⲆᐃᐃΔ > 0) {
                        k.ⲆⲆΔⵠ(ro);
                        if ((j = Ww.ᐃᐃⵠΔ.ⲆⲆⵠⲆᐃᐃΔ) > 1) {
                            Lc(j, k);
                        }
                    }
                    var j;
                    var k = Yw.ΔΔⵠⲆᐃⵠΔ;
                    if (Ww.ᐃᐃⵠΔ.ⲆΔⵠΔΔ > 0) {
                        k.ⲆⲆΔⵠ(ro);
                        if ((j = Ww.ᐃᐃⵠΔ.ⲆΔⵠΔΔ) > 1) {
                            Lc(j, k);
                        }
                    }
                }
            }
        }
    }
    function Fc() {
        if (!Ww.ⵠᐃᐃⵠ.open && !Ww.ⵠⵠΔⵠᐃ.open) {
            Ww.ΔᐃΔᐃ.open = X;
            var b = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ];
            var c = 100;
            if (b) {
                for (var d = 0; d < qw.length; d++) {
                    for (var e = qw[d][0], f = qw[d][1], j = 0; cf.ⵠΔⲆ[e].length > j; j++) {
                        var k = cf.ⵠΔⲆ[e][j];
                        var m = ⲆⵠΔᐃ.ⲆᐃⲆΔ(k, b);
                        if (m < c) {
                            c = m;
                            Ww.ΔᐃΔᐃ.ⲆⵠᐃΔⵠᐃᐃ = f;
                            Ww.ΔᐃΔᐃ.type = e;
                            Ww.ΔᐃΔᐃ.open = sn;
                            Ww.ΔᐃΔᐃ.ⵠⵠⵠⲆΔⵠⵠ = k.info & 255;
                            Ww.ΔᐃΔᐃ.ⲆᐃⵠⵠᐃΔΔ = (k.info & 65280) >> 8;
                            Ww.ΔᐃΔᐃ.ⲆⲆΔⲆ = k.ⲆⲆΔⲆ;
                            Ww.ΔᐃΔᐃ.ⵠⲆⵠⵠⲆ = k.id;
                        }
                    }
                }
                if (c < 100) {
                    var p = ΔⲆ[656];
                    var h = (q = Yw.ⵠⵠΔᐃᐃⲆΔ).info.translate.x - 33;
                    Qc(ro, p, h, 0);
                    if (Ww.ΔᐃΔᐃ.ⵠⵠⵠⲆΔⵠⵠ > 0) {
                        q.ⲆⲆΔⵠ(ro);
                        var l = Ww.ΔᐃΔᐃ.ⵠⵠⵠⲆΔⵠⵠ;
                        if (l > 1) {
                            Lc(l, q);
                        }
                    }
                    switch (Ww.ΔᐃΔᐃ.ⲆⵠᐃΔⵠᐃᐃ) {
                        case 108:
                            var q = Yw.ⵠⵠΔΔΔᐃᐃ;
                            break;
                        case 111:
                            q = Yw.ⲆᐃΔΔΔⵠᐃ;
                            break;
                        case 112:
                            q = Yw.ΔΔᐃⵠⲆⵠⲆ;
                            break;
                        case 121:
                            q = Yw.ᐃᐃⵠⲆΔⵠⵠ;
                            break;
                        case 202:
                            q = Yw.ⵠᐃⲆᐃⲆⵠⵠ;
                    }
                    if (Ww.ΔᐃΔᐃ.ⲆᐃⵠⵠᐃΔΔ > 0) {
                        q.ⲆⲆΔⵠ(ro);
                        l = Ww.ΔᐃΔᐃ.ⲆᐃⵠⵠᐃΔΔ;
                        if (l > 1) {
                            Lc(l, q);
                        }
                    }
                }
            }
        }
    }
    function Rc() {
        var a = Yw.ⵠⲆᐃΔⲆ;
        var b = a.id;
        if (a.ᐃⵠⵠⲆΔ === 1 && a.display === 1) {
            if (ΔⵠΔᐃⲆ[b] === undefined) {
                ΔⵠΔᐃⲆ[b] = function (b) {
                    var c = document.createElement("canvas");
                    var d = c.getContext("2d");
                    var e = lt[b];
                    d.font = "20px Baloo Paaji";
                    var f = 0;
                    if (e.length >= 1) {
                        f = Math.max(0, d.measureText(e[0]).width);
                    }
                    d.font = "17px Baloo Paaji";
                    if (e.length >= 2) {
                        f = Math.max(f, d.measureText(e[1]).width);
                    }
                    d.font = "14px Baloo Paaji";
                    mt = 2;
                    for (; mt < e.length; mt++) {
                        f = Math.max(f, d.measureText(e[mt]).width);
                    }
                    var g = f + 35;
                    var a = 0;
                    a = e.length === 1 ? 55 : e.length === 2 ? 85 : (e.length - 2) * 26 + 85;
                    c.width = g;
                    c.height = a;
                    Lt(d, 0, 0, g, a, 10);
                    d.fillStyle = "#000000";
                    d.globalAlpha = 0.5;
                    d.fill();
                    if (e.length >= 1) {
                        d.textBaseline = "middle";
                        d.font = "20px Baloo Paaji";
                        d.globalAlpha = 1;
                        d.fillStyle = "#e2c340";
                        d.fillText(e[0], 15, 28);
                    }
                    if (e.length >= 2) {
                        d.font = "17px Baloo Paaji";
                        d.fillStyle = "#ffffff";
                        d.fillText(e[1], 15, 55);
                        a = 55;
                    }
                    if (e.length >= 3) {
                        d.font = "14px Baloo Paaji";
                        d.globalAlpha = 0.7;
                        mt = 2;
                        for (; mt < e.length; mt++) {
                            d.fillText(e[mt], 15, a + 28);
                            a += 26;
                        }
                    }
                    return c;
                }(b);
            }
            if (a.ΔΔⵠᐃ === 1) {
                Qc(ro, ΔⵠΔᐃⲆ[b], a.x, a.y);
            } else if (a.x - 80 + ΔⵠΔᐃⲆ[b].width > so) {
                Qc(ro, ΔⵠΔᐃⲆ[b], so - ΔⵠΔᐃⲆ[b].width - 10, a.y - ΔⵠΔᐃⲆ[b].height - 10);
            } else {
                Qc(ro, ΔⵠΔᐃⲆ[b], a.x - 80, a.y - ΔⵠΔᐃⲆ[b].height - 10);
            }
        }
    }
    function jc() {
        if (Ww.ⵠⵠⲆΔⲆᐃᐃ) {
            ro.globalAlpha = 0.5;
            ro.fillStyle = "#000";
            ro.fillRect(0, 0, so, gq);
            ro.globalAlpha = 0.8;
            var b = ΔⲆ[516][cf.time];
            var c = hq - b.width / 2;
            var d = iq - b.height / 2;
            Qc(ro, b, c, d);
            ro.globalAlpha = 1;
            if (Yw.ᐃΔⵠⲆΔ.ⵠᐃΔΔⲆ.x > -1) {
                ro.fillStyle = "#660000";
                Nt(ro, c + Yw.ᐃΔⵠⲆΔ.ⵠᐃΔΔⲆ.x * 3 * po, d + Yw.ᐃΔⵠⲆΔ.ⵠᐃΔΔⲆ.y * 3 * po, po * 14);
                ro.fill();
            }
            for (var e = Yw.ᐃΔⵠⲆΔ.ⲆⲆⵠΔ, f = 0; f < e.length; f++) {
                var g = e[f];
                cf.time;
                ro.fillStyle = "#ff0000";
                Nt(ro, c + g.x / (cf.ΔΔΔΔⲆ * 100) * 600 * po, d + po * (g.y / (cf.ᐃⵠᐃⲆΔ * 100) * 600), po * 6);
                ro.fill();
            }
            var h = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ];
            if (h) {
                ro.fillStyle = cf.time ? "#fff" : "#e39716";
                Nt(ro, c + po * (h.x / (cf.ΔΔΔΔⲆ * 100) * 600), d + h.y / (cf.ᐃⵠᐃⲆΔ * 100) * 600 * po, po * 12);
                ro.fill();
            }
        }
    }
    function Lc(a, b) {
        if (!ΔⲆ[283][a]) {
            ΔⲆ[283][a] = Yd(po, "x" + a, 17, "#FFF");
        }
        var c = ΔⲆ[283][a];
        var d = b.info.translate.x + b.info.ᐃΔ[0].width - c.width - po * 14;
        var e = b.info.translate.y + b.info.ᐃΔ[0].height - c.height - po * 19;
        if (b.info.state == Wv) {
            e += po * 5;
        }
        Qc(ro, c, d, e);
    }
    ΔⵠΔᐃⲆ = [];
    ⵠⲆⵠⵠΔΔⵠ = [];
    var Gc = [];
    function Wc() {
        var a = -8;
        if (Ww.ΔᐃΔΔᐃ.enabled) {
            var b = ΔⲆ[546];
            Qc(ro, b, Ww.ΔᐃΔΔᐃ.translate.x, Ww.ΔᐃΔΔᐃ.translate.y + a);
            a += 70;
        }
        if (Ww.ⵠⲆᐃᐃΔⲆⲆ === 1) {
            b = ΔⲆ[549];
            Qc(ro, b, Ww.ΔᐃΔΔᐃ.translate.x, Ww.ΔᐃΔΔᐃ.translate.y + a);
            a += 70;
        } else if (Ww.ᐃⵠⲆⲆ.ⲆⵠᐃⲆᐃ.x < 0.25 || Ww.ᐃⵠⲆⲆ.ⵠᐃᐃΔᐃⲆᐃ.x < 0.25 || Ww.ᐃⵠⲆⲆ.ⲆⵠᐃᐃᐃΔⲆ.x < 0.25 || Ww.ᐃⵠⲆⲆ.ΔΔⵠⵠⲆⵠᐃ.x < 0.25 || Ww.ᐃⵠⲆⲆ.ᐃᐃᐃⲆⵠ.x < 0.25) {
            b = ΔⲆ[548];
            Qc(ro, b, Ww.ΔᐃΔΔᐃ.translate.x, Ww.ΔᐃΔΔᐃ.translate.y + a);
            a += 70;
        }
        if (Ww.ΔⵠⵠⲆⵠ > 0) {
            b = ΔⲆ[547];
            Qc(ro, b, Ww.ΔᐃΔΔᐃ.translate.x, Ww.ΔᐃΔΔᐃ.translate.y + a);
            var c = Gc[Ww.ΔⵠⵠⲆⵠ];
            if (c === undefined) {
                c = Yd(po, Ww.ΔⵠⵠⲆⵠ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6);
                Gc[Ww.ΔⵠⵠⲆⵠ] = c;
            }
            if (Ww.ΔⵠⵠⲆⵠ < 9) {
                Qc(ro, c, Ww.ΔᐃΔΔᐃ.translate.x - 39, Ww.ΔᐃΔΔᐃ.translate.y + a + 20);
            } else {
                Qc(ro, c, Ww.ΔᐃΔΔᐃ.translate.x - 46, Ww.ΔᐃΔΔᐃ.translate.y + a + 20);
            }
        }
    }
    function Oc(b) {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        if (this.ᐃⲆⲆ.ΔΔΔ) {
            if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ == 0) {
                this.ᐃⲆⲆ.ΔΔΔ = ps;
            }
            var c = po * ((1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * $w * 600);
            var d = c * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
            var e = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * c;
        } else {
            d = 0;
            e = 0;
        }
        var f = ΔⲆ[853].length;
        ᐃΔ = ΔⲆ[853][(this.ΔⵠⲆᐃ + this.ᐃᐃ % 2) % f][cf.time];
        ΔⵠΔ = -ᐃΔ.width;
        ⵠⲆᐃ = -ᐃΔ.height;
        var g = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ];
        if (g && (this.ⲆⲆΔⲆ === Ww.id || Ww.ⵠΔᐃⵠΔΔΔ(this.ⲆⲆΔⲆ))) {
            if (ⲆⵠΔᐃ.ⲆᐃⲆΔ(this, g) < 550) {
                this.opacity = Math.max(this.opacity - $w, 0.3);
            } else {
                this.opacity = Math.min(this.opacity + $w, 1);
            }
        } else if (g && ⲆⵠΔᐃ.ⲆᐃⲆΔ(this, cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ]) < 150) {
            this.opacity = Math.max(this.opacity - $w, 0.3);
        } else {
            this.opacity = Math.min(this.opacity + $w, 1);
        }
        var a = ro.globalAlpha;
        ro.globalAlpha *= this.opacity;
        Qc(ro, ᐃΔ, -ΔⵠΔ / 2 + d, -ⵠⲆᐃ / 2 + e, ΔⵠΔ, ⵠⲆᐃ);
        ro.globalAlpha = a;
        ro.restore();
    }
    function Nc(a) {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        if (this.ᐃⲆⲆ.ΔΔΔ) {
            if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ == 0) {
                this.ᐃⲆⲆ.ΔΔΔ = false;
            }
            var b = (1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * $w * 600 * po;
            var c = b * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
            var d = b * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = ΔⲆ[a][cf.time];
        ΔⵠΔ = -e.width;
        ⵠⲆᐃ = -e.height;
        Qc(ro, e, -ΔⵠΔ / 2 + c, -ⵠⲆᐃ / 2 + d, ΔⵠΔ, ⵠⲆᐃ);
        ro.restore();
    }
    function Hc() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        ᐃΔ = ΔⲆ[811][cf.time];
        ΔⵠΔ = -ᐃΔ.width;
        ⵠⲆᐃ = -ᐃΔ.height;
        Qc(ro, ᐃΔ, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
        ro.restore();
    }
    function qc() {
        var a = Ww.ᐃΔᐃⲆⲆ;
        if (a.wait) {
            var b = a.timeout.ΔΔΔ();
            ro.save();
            var c = ΔⲆ[794];
            ro.translate(c.width - po * 12, Yw.ᐃⵠⲆⲆ.translate.y - po * 190);
            var d = -c.width / 2 + 9;
            var e = -c.height / 2 - 4;
            Qc(ro, c, d, e);
            ro.beginPath();
            ro.lineWidth = po * 5;
            ro.strokeStyle = Gr.ᐃⲆⲆᐃᐃⲆΔ[cf.time];
            ro.lineCap = "round";
            ro.arc(9, e + c.height / 2, po * 25, 0, a.timeout.Δᐃᐃ * (Math.PI * 2));
            ro.stroke();
            ro.restore();
            if (b) {
                a.wait = false;
                a.timeout.Δᐃᐃ = 0;
                a.timeout.ⲆⲆⲆ = false;
            }
        }
    }
    function Uc(b) {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        if (this.ᐃⲆⲆ.ΔΔΔ) {
            if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && X == this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ) {
                this.ᐃⲆⲆ.ΔΔΔ = false;
            }
            var c = (1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * $w * 600 * po;
            var d = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * c;
            var e = c * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
        } else {
            d = 0;
            e = 0;
        }
        if (b === 913 && !cf.transition) {
            var f = 0;
            for (var g = cf.ⵠΔⲆ[0], a = 0; g.length > a; a++) {
                var h = ⲆⵠΔᐃ.ⲆᐃⲆΔ(g[a], this);
                if (h < 140 && h > 35) {
                    f = 0;
                    break;
                }
                if (h <= 35) {
                    f = 1;
                }
            }
            this.opacity = f === 0 ? Math.max(0.5, this.opacity - $w / 1.5) : Math.min(1, this.opacity + $w / 1.5);
            ro.globalAlpha = this.opacity;
        }
        ᐃΔ = ΔⲆ[b][cf.time];
        ΔⵠΔ = -ᐃΔ.width;
        ⵠⲆᐃ = -ᐃΔ.height;
        Qc(ro, ᐃΔ, -ΔⵠΔ / 2 + d, -ⵠⲆᐃ / 2 + e, ΔⵠΔ, ⵠⲆᐃ);
        ro.globalAlpha = 1;
        ro.restore();
    }
    function Yc() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        if (this.ᐃⲆⲆ.ΔΔΔ) {
            if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ == Ij) {
                this.ᐃⲆⲆ.ΔΔΔ = zk;
            }
            var a = po * ($w * (1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * 600);
            var b = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * a;
            var c = a * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        ᐃΔ = ΔⲆ[167][cf.time];
        ΔⵠΔ = -ᐃΔ.width;
        ⵠⲆᐃ = -ᐃΔ.height;
        Qc(ro, ᐃΔ, -ΔⵠΔ / 2 + b, -ⵠⲆᐃ / 2 + c, ΔⵠΔ, ⵠⲆᐃ);
        if (this.lock) {
            ᐃΔ = ΔⲆ[148][cf.time];
            ΔⵠΔ = -ᐃΔ.width;
            ⵠⲆᐃ = -ᐃΔ.height;
            Qc(ro, ᐃΔ, -ΔⵠΔ / 2 + b - po * 1, -ⵠⲆᐃ / 2 + c, ΔⵠΔ, ⵠⲆᐃ);
        }
        ro.restore();
    }
    function Kc() {
        var a = Ww.ᐃⵠΔΔᐃ;
        if (a.wait) {
            var b = a.timeout.ΔΔΔ();
            ro.save();
            var c = ΔⲆ[537];
            ro.translate(c.width - po * 2, Yw.ᐃⵠⲆⲆ.translate.y - po * 60);
            var d = -c.width / 2 - 2;
            var e = -c.height / 2 - 4;
            Qc(ro, c, d, e);
            ro.beginPath();
            ro.lineWidth = po * 5;
            ro.strokeStyle = Gr.ᐃⲆⲆⲆΔΔΔ[cf.time];
            ro.lineCap = "round";
            ro.arc(0, e + c.height / 2, po * 25, 0, Math.PI * 2 * a.timeout.Δᐃᐃ);
            ro.stroke();
            ro.restore();
            if (b) {
                a.wait = Js;
                a.timeout.Δᐃᐃ = 0;
                a.timeout.ⲆⲆⲆ = dq;
            }
        }
    }
    function Vc() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        ᐃΔ = ΔⲆ[321][cf.time];
        ΔⵠΔ = -ᐃΔ.width;
        ⵠⲆᐃ = -ᐃΔ.height;
        Qc(ro, ᐃΔ, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
        ro.restore();
    }
    function Xc(a) {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        if (this.ᐃⲆⲆ.ΔΔΔ) {
            if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ == 0) {
                this.ᐃⲆⲆ.ΔΔΔ = false;
            }
            var b = po * ((1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * $w * 600);
            var c = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * b;
            var d = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        if (this.ⲆᐃⲆⲆΔ.ΔΔΔ()) {
            this.color += 0.2 + Math.random() * 0.3;
        }
        ᐃΔ = ΔⲆ[872][Math.floor(this.id + this.color) % 5][cf.time];
        ΔⵠΔ = -ᐃΔ.width * this.ⲆᐃⲆⲆΔ.Δᐃᐃ;
        ⵠⲆᐃ = -ᐃΔ.height * this.ⲆᐃⲆⲆΔ.Δᐃᐃ;
        Qc(ro, ᐃΔ, -ΔⵠΔ / 2 + c, -ⵠⲆᐃ / 2 + d, ΔⵠΔ, ⵠⲆᐃ);
        ro.restore();
    }
    function Zc() {
        for (var b = Ww.ᐃΔⵠΔ, c = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ], d = 0; d < b.ᐃΔΔᐃΔ.length; d++) {
            var e = b.ᐃΔΔᐃΔ[d];
            var f = false;
            if ((c = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ]) && (c.right == e.id || c.ᐃⵠⲆⵠⲆ == e.id && c.ᐃⵠⲆⵠⲆ > 0)) {
                f = true;
                Qc(ro, e.info.ᐃΔ[2], e.info.translate.x, e.info.translate.y, e.info.width, e.info.height);
            } else {
                e.ⲆⲆΔⵠ(ro);
            }
            var g = Ww.ᐃΔⵠΔ.ΔᐃⲆ[e.id];
            if (g > 1) {
                Lc(g, e);
            }
            if (g > 0) {
                Dc(d, e, f);
            }
            var h = Ww.ⵠᐃᐃⵠ;
            if (h.open && (h.id < 0 || h.id == e.id) && (!h.lock || h.ⲆⲆΔⲆ == Ww.id)) {
                Yw.ᐃⵠⵠᐃᐃ[e.id].ⲆⲆΔⵠ(ro);
            }
            if (Ww.ⵠⵠΔⵠᐃ.open && e.id == 109) {
                Yw.ᐃⵠⵠᐃᐃ[e.id].ⲆⲆΔⵠ(ro);
            }
            if (Ww.ⵠΔᐃᐃᐃ.open && e.id == 180) {
                Yw.ᐃⵠⵠᐃᐃ[e.id].ⲆⲆΔⵠ(ro);
            }
            if (Ww.ᐃᐃⵠΔ.open && e.id == 134) {
                Yw.ᐃⵠⵠᐃᐃ[e.id].ⲆⲆΔⵠ(ro);
            }
            if (Ww.ΔᐃΔᐃ.open && e.id == 109) {
                Yw.ᐃⵠⵠᐃᐃ[e.id].ⲆⲆΔⵠ(ro);
            }
            if (!!Ww.ⲆⲆⲆᐃ.open && (e.id == 109 || e.id == 131)) {
                Yw.ᐃⵠⵠᐃᐃ[e.id].ⲆⲆΔⵠ(ro);
            }
        }
        if (e && d < b.max) {
            var j = ΔⲆ[334][2];
            Ⲇᐃ = e.info.translate.x;
            Ⲇᐃᐃ = e.info.translate.y;
            ΔⵠⲆᐃ = 1;
            for (; b.max > d; d++, ΔⵠⲆᐃ++) {
                Qc(ro, j, Ⲇᐃ + ΔⵠⲆᐃ * (j.width + 5), Ⲇᐃᐃ);
            }
        }
    }
    function $c() {
        var a = Ww.ΔΔⵠᐃ;
        if (a.ᐃΔⲆⲆⲆ) {
            var b = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ];
            ro.save();
            ro.translate(Ww.ᐃⲆΔ.x + b.x, Ww.ᐃⲆΔ.y + b.y);
            var c = ΔⲆ[324];
            var d = -c.width / 2;
            var e = -c.height / 2 - po * 125;
            Qc(ro, c, d, e);
            ro.beginPath();
            ro.lineWidth = po * 5;
            ro.strokeStyle = Gr.ⵠⲆⲆᐃᐃⲆⲆ[cf.time];
            ro.lineCap = "round";
            ro.arc(0, e + c.height / 2, po * 25, 0, Math.PI * 2 * a.timeout.Δᐃᐃ);
            ro.stroke();
            ro.restore();
        }
    }
    function ep() {
        var b = Ww.ΔΔⵠᐃ;
        if (!b.ᐃΔⲆⲆⲆ && b.ⲆᐃⲆⲆ > 0) {
            var c = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ];
            if (!c) {
                return;
            }
            ro.save();
            if (Pr[b.ⲆᐃⲆⲆ].ⲆΔⵠᐃ === 0 && b.mode === 0) {
                ro.translate(Ww.ᐃⲆΔ.x + c.x, Ww.ᐃⲆΔ.y + c.y);
                ro.rotate(c.angle);
                ro.translate(120, 0);
            } else {
                var d = Math.floor(c.x + Math.sin(c.angle) * 120);
                var e = Math.floor(c.y + Math.cos(c.angle) * 120);
                d = Ww.ᐃⲆΔ.x + (d - d % 100 + 50);
                e = Ww.ᐃⲆΔ.y + (e - e % 100 + 50);
                ro.translate(d, e);
            }
            var g = ΔⲆ[b.ⲆᐃⲆⲆ][cf.time];
            ro.globalAlpha = 0.5;
            Qc(ro, g, -g.width / 2, -g.height / 2);
            ro.globalAlpha = 1;
            ro.restore();
            if (Pr[b.ⲆᐃⲆⲆ].ⲆΔⵠᐃ === 0) {
                if (!b.label[b.mode]) {
                    if (b.mode === 0) {
                        b.label[0] = Yd(po, lt[336], 20, "#e2c340");
                    } else {
                        b.label[1] = Yd(po, lt[337], 20, "#e2c340");
                    }
                }
                g = b.label[b.mode];
                Qc(ro, g, hq + -g.width / 2, Yw.ᐃⵠⲆⲆ.y - 26);
            }
        }
        if (b.ᐃΔⲆⲆⲆ) {
            var i = b.timeout.ΔΔΔ();
            for (var a = 0; a < b.ⲆⵠⲆᐃΔ.length; a++) {
                var j = b.ⲆⵠⲆᐃΔ[a];
                if (j.id == b.id) {
                    var k = po * 42;
                    var m = po * 17;
                    Lt(ro, j.info.translate.x, j.info.translate.y + (1 - b.timeout.Δᐃᐃ) * k, j.info.width, b.timeout.Δᐃᐃ * k + m, po * 10);
                    ro.fillStyle = "#55B973";
                    ro.fill();
                    ro.globalAlpha = 0.8;
                    j.ⲆⲆΔⵠ(ro);
                } else {
                    ro.globalAlpha = 0.5;
                    j.ⲆⲆΔⵠ(ro);
                }
                ro.globalAlpha = 1;
            }
            if (i) {
                b.ᐃΔⲆⲆⲆ = f;
                b.timeout.Δᐃᐃ = 0;
                b.timeout.ⲆⲆⲆ = false;
            }
            return true;
        }
        for (a = 0; a < b.ⲆⵠⲆᐃΔ.length; a++) {
            b.ⲆⵠⲆᐃΔ[a].ⲆⲆΔⵠ(ro);
        }
        return false;
    }
    function ip() {
        var a = cf.ⵠΔΔⲆᐃ;
        var b = ΔⲆ[725][cf.time];
        Qc(ro, b, a.translate.x, a.translate.y);
        ro.save();
        ro.translate(a.translate.x + b.width / 2, a.translate.y + b.height / 2);
        cf.ⵠΔΔⲆᐃ.now = (new Date().getTime() - a.ⵠΔⲆΔᐃ + a.ⵠⲆⲆⵠⲆ) % 480000;
        var c = Math.PI * 2 * cf.ⵠΔΔⲆᐃ.now / 480000 - Math.PI / 2;
        ro.rotate(c);
        Qc(ro, ΔⲆ[726], -b.width / 2, -b.height / 2);
        ro.restore();
    }
    function tp(a) {
        if ((a = a / 100) <= 0.8) {
            ro.save();
            ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
            ro.rotate(this.angle);
            if (this.ᐃⲆⲆ.ΔΔΔ) {
                if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && Yh == this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ) {
                    this.ᐃⲆⲆ.ΔΔΔ = false;
                }
                var b = po * ($w * (1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * 600);
                var c = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * b;
                var d = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * b;
            } else {
                c = 0;
                d = 0;
            }
            ro.globalAlpha = 0.5;
            tb(ro, c, d, po * 18, a);
            Kt(ro, null, "#000000", po * 18);
            ro.globalAlpha = 1;
            tb(ro, c, d, po * 18, a);
            Kt(ro, null, Gr.ΔⲆⵠᐃⵠᐃⲆ[cf.time], po * 6);
            ro.restore();
        }
    }
    function np(a) {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        if (this.ᐃⲆⲆ.ΔΔΔ) {
            if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ == Yh) {
                this.ᐃⲆⲆ.ΔΔΔ = false;
            }
            var b = po * ((1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * $w * 600);
            var c = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * b;
            var d = b * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        ᐃΔ = ΔⲆ[a][cf.time];
        ΔⵠΔ = -ᐃΔ.width;
        ⵠⲆᐃ = -ᐃΔ.height;
        Qc(ro, ᐃΔ, -ΔⵠΔ / 2 + c, -ⵠⲆᐃ / 2 + d, ΔⵠΔ, ⵠⲆᐃ);
        ro.restore();
    }
    function op(a) {
        if ((a = a / 100) <= 0.95) {
            ro.save();
            ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
            ro.rotate(this.angle);
            if (this.ᐃⲆⲆ.ΔΔΔ) {
                if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ == X) {
                    this.ᐃⲆⲆ.ΔΔΔ = as;
                }
                var b = (1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * $w * 600 * po;
                var c = b * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
                var d = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * b;
            } else {
                c = 0;
                d = 0;
            }
            ro.globalAlpha = 0.5;
            tb(ro, c, d, po * 28, a);
            Kt(ro, null, "#000000", po * 18);
            ro.globalAlpha = 1;
            tb(ro, c, d, po * 28, a);
            Kt(ro, null, Gr.ⵠⲆⲆᐃᐃⲆⲆ[cf.time], po * 6);
            ro.restore();
        }
    }
    function ap() {
        ro.save();
        var a = po;
        if (Ww.ᐃⵠⲆⲆ.ᐃⵠⲆⲆᐃ.x < 0.25) {
            ro.globalAlpha = Ww.ᐃⵠⲆⲆ.ⵠⲆⵠⵠⲆᐃⵠ.Δᐃᐃ;
        }
        var b = Ww.ᐃΔⵠΔ.ᐃΔΔᐃΔ.length > 0 ? -70 : 0;
        if (Ww.ⵠᐃᐃⵠ.open || Ww.ⵠⵠΔⵠᐃ.open && Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(109) != -1 || Ww.ᐃᐃⵠΔ.open && Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(134) != -1 || Ww.ΔᐃΔᐃ.open && Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(109) != -1 || Ww.ⵠΔᐃᐃᐃ.open && Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(180) != -1 || Ww.ⲆⲆⲆᐃ.open && (Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(109) != -1 || Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(131) != -1)) {
            b -= po * 50;
        }
        ro.translate((so - po * 950) / 2, b);
        ro.fillStyle = "#69A148";
        ro.fillRect(this.translate.x + po * 37, this.translate.y + po * 17, po * (Ww.ᐃⵠⲆⲆ.ᐃⵠⲆⲆᐃ.x * 178), po * 18);
        ro.globalAlpha = 1;
        if (Ww.ᐃⵠⲆⲆ.ⵠᐃᐃΔᐃⲆᐃ.x < 0.35) {
            ro.fillStyle = "#8F050A";
            ro.globalAlpha = Ww.ᐃⵠⲆⲆ.ⲆᐃⲆⵠⵠⵠⵠ.Δᐃᐃ;
            ro.fillRect(this.translate.x + po * 277, this.translate.y + po * 17, po * 178, po * 18);
            ro.globalAlpha = 1;
        }
        ro.fillStyle = "#AF352A";
        ro.fillRect(this.translate.x + po * 277, this.translate.y + po * 17, Ww.ᐃⵠⲆⲆ.ⵠᐃᐃΔᐃⲆᐃ.x * 178 * po, po * 18);
        if (Ww.ᐃⵠⲆⲆ.ⲆⵠᐃⲆᐃ.x < 0.35) {
            ro.fillStyle = "#366B91";
            ro.globalAlpha = Ww.ᐃⵠⲆⲆ.ᐃΔⵠᐃΔⵠⲆ.Δᐃᐃ;
            ro.fillRect(this.translate.x + po * 517, this.translate.y + po * 17, po * 178, po * 18);
            ro.globalAlpha = 1;
        }
        ro.fillStyle = "#669BB1";
        ro.fillRect(this.translate.x + po * 517, this.translate.y + po * 17, Ww.ᐃⵠⲆⲆ.ⲆⵠᐃⲆᐃ.x * 178 * po, po * 18);
        if (Ww.ᐃⵠⲆⲆ.ⲆⵠᐃⲆᐃ.x > 0.99) {
            if (Ww.ᐃⵠⲆⲆ.ᐃᐃᐃⲆⵠ.x < 0.35) {
                ro.fillStyle = "#6C4036";
                ro.globalAlpha = Ww.ᐃⵠⲆⲆ.ΔᐃⲆᐃⲆΔⵠ.Δᐃᐃ;
                ro.fillRect(this.translate.x + po * 517, this.translate.y + po * 17, po * 178, po * 18);
                ro.globalAlpha = 1;
            }
            ro.fillStyle = "#9C4036";
            ro.fillRect(this.translate.x + po * 517, this.translate.y + po * 17, po * ((1 - Ww.ᐃⵠⲆⲆ.ᐃᐃᐃⲆⵠ.x) * 178), po * 18);
        }
        if (Ww.ᐃⵠⲆⲆ.ⲆⵠᐃᐃᐃΔⲆ.x < 0.35) {
            ro.fillStyle = "#001A57";
            ro.globalAlpha = Ww.ᐃⵠⲆⲆ.ΔⲆΔⵠⲆⵠⲆ.Δᐃᐃ;
            ro.fillRect(this.translate.x + po * 757, this.translate.y + po * 17, po * 178, po * 18);
            ro.globalAlpha = 1;
        }
        ro.fillStyle = "#074A87";
        ro.fillRect(this.translate.x + po * 757, this.translate.y + po * 17, po * (Ww.ᐃⵠⲆⲆ.ⲆⵠᐃᐃᐃΔⲆ.x * 178), po * 18);
        po = a;
        Qc(ro, this.ᐃΔ, this.translate.x, this.translate.y);
        this.y = this.translate.y + b;
        ro.restore();
        if (Ww.ᐃⵠⲆⲆ.ΔΔⵠⵠⲆⵠᐃ.x < 0.99) {
            var c = Math.floor(hq - ΔⲆ[608].width / 2);
            b += this.translate.y - ΔⲆ[608].height - po * 5;
            ro.fillStyle = "#BBE8EF";
            ro.fillRect(c + 5, b + po * 5, Ww.ᐃⵠⲆⲆ.ΔΔⵠⵠⲆⵠᐃ.x * (po * 588), po * 10);
            if (Ww.ᐃⵠⲆⲆ.ΔΔⵠⵠⲆⵠᐃ.x < 0.35) {
                ro.fillStyle = "#9BA8AF";
                ro.globalAlpha = Ww.ᐃⵠⲆⲆ.ⲆΔᐃⵠⲆᐃⵠ.Δᐃᐃ;
                ro.fillRect(c + 5, b + 5, po * 588, po * 10);
                ro.globalAlpha = 1;
            }
            Qc(ro, ΔⲆ[608], c, b);
            this.y = b;
        }
    }
    function rp() {
        var b = Ww.ⵠΔⵠⲆΔ;
        var c = Yw.ΔΔΔⲆ;
        if (b.ΔΔΔ) {
            b.ΔΔΔ = false;
            var d = b.ΔᐃⵠΔᐃ;
            var e = c.ⵠΔ.width;
            var f = c.ⵠΔ.height;
            var g = c.Ⲇ;
            var a = cf.ⲆⲆⵠΔ;
            var i = false;
            g.clearRect(0, 0, e, f);
            g.drawImage(c.ᐃΔ, 0, 0);
            for (var j = 0; j < d.length; j++) {
                var k = a[d[j]];
                if ((cf.mode !== 1 || k.ⲆⵠΔΔⲆ !== "spectator") && (cf.mode !== 2 || k.ᐃΔΔⵠ !== 0)) {
                    if (d[j] == Ww.id) {
                        i = true;
                        if (cf.mode === 3 && k.ᐃΔΔⵠ === 0) {
                            Δⵠ = "#FF0000";
                        } else {
                            Δⵠ = "#FFF";
                        }
                    } else if (cf.mode === 3 && k.ᐃΔΔⵠ === 0) {
                        Δⵠ = "#990000";
                    } else {
                        Δⵠ = "#A1BDCD";
                    }
                    g.drawImage(Yd(po, "" + (j + 1), po * 15, Δⵠ), po * 20, po * (40 + j * 22));
                    k.ΔΔᐃⲆᐃⲆⲆ ||= Yd(po, k.ⲆⵠΔΔⲆ, po * 15, Δⵠ, undefined, Cg, undefined, Yl, po * 110);
                    g.drawImage(k.ΔΔᐃⲆᐃⲆⲆ, po * 39, po * (40 + j * 22));
                    g.drawImage(Yd(po, ⲆⵠΔᐃ.ᐃⲆΔⲆΔᐃⵠ(k.ⵠΔΔᐃᐃ), po * 15, Δⵠ), po * 156, po * (40 + j * 22));
                }
            }
            if (!i) {
                if (cf.mode === 0 || cf.mode === 3 || cf.mode === 4 || cf.mode === 5 || cf.mode === 7 || cf.mode === 1 && !Ww.ⵠⲆᐃⵠⵠᐃᐃ || cf.mode === 2 && !Ww.ⵠⵠΔⲆⲆ) {
                    g.drawImage(ΔⲆ[306], po * 15, po * (46 + j * 22));
                    g.drawImage(Yd(po, ⲆⵠΔᐃ.ᐃⲆΔⲆΔᐃⵠ(cf.ⲆⲆⵠΔ[Ww.id].ⵠΔΔᐃᐃ), po * 15, "#FFF"), po * 100, po * (46 + j * 22));
                }
            }
        }
        Qc(ro, c.ⵠΔ, c.translate.x, c.translate.y);
    }
    function sp() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        ᐃΔ = ΔⲆ[239][cf.time];
        ΔⵠΔ = -ᐃΔ.width;
        ⵠⲆᐃ = -ᐃΔ.height;
        Qc(ro, ᐃΔ, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
        ro.restore();
    }
    function hp() {
        var b = Ww.ᐃⵠᐃⵠⵠ;
        if (b.wait) {
            var c = b.timeout.ΔΔΔ();
            ro.save();
            var d = ΔⲆ[562];
            var e = ΔⲆ[537].height + po * 25;
            ro.translate(d.width, Yw.ᐃⵠⲆⲆ.translate.y - po * 188 - e);
            var f = -d.width / 2 - 2;
            var g = -d.height / 2 - 4;
            Qc(ro, d, f + 2, g);
            ro.beginPath();
            ro.lineWidth = po * 5;
            ro.strokeStyle = Gr.ᐃⲆⲆⲆΔΔΔ[cf.time];
            ro.lineCap = "round";
            ro.arc(0, g + d.height / 2, po * 25, 0, Math.PI * 2 * b.timeout.Δᐃᐃ);
            ro.stroke();
            ro.restore();
            if (c) {
                b.wait = os;
                b.timeout.Δᐃᐃ = 0;
                b.timeout.ⲆⲆⲆ = false;
            }
        }
    }
    function lp() {
        var a = Ww.ᐃΔΔⵠᐃ;
        if (a.wait) {
            var b = a.timeout.ΔΔΔ();
            ro.save();
            var c = ΔⲆ[792];
            ro.translate(c.width - po * 2, Yw.ᐃⵠⲆⲆ.translate.y - po * 125);
            var d = -c.width / 2 + 10;
            var e = -c.height / 2 - 4;
            Qc(ro, c, d, e);
            ro.beginPath();
            ro.lineWidth = po * 5;
            ro.strokeStyle = Gr.ᐃⲆⲆᐃᐃⲆΔ[cf.time];
            ro.lineCap = "round";
            ro.arc(9, e + c.height / 2, po * 25, 0, Math.PI * 2 * a.timeout.Δᐃᐃ);
            ro.stroke();
            ro.restore();
            if (b) {
                a.wait = dq;
                a.timeout.Δᐃᐃ = 0;
                a.timeout.ⲆⲆⲆ = Lo;
            }
        }
    }
    function gp() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        ᐃΔ = ΔⲆ[848][cf.time];
        ΔⵠΔ = -ᐃΔ.width;
        ⵠⲆᐃ = -ᐃΔ.height;
        Qc(ro, ᐃΔ, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
        ro.restore();
    }
    function up() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        ᐃΔ = ΔⲆ[837][cf.time];
        ΔⵠΔ = -ᐃΔ.width;
        ⵠⲆᐃ = -ᐃΔ.height;
        Qc(ro, ᐃΔ, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
        ro.restore();
    }
    var bp = 0;
    function Tu() {
        if (this.info !== 10) {
            ro.save();
            ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
            ro.rotate(this.angle);
            if (this.ᐃⲆⲆ.ΔΔΔ) {
                if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ == Js) {
                    this.ᐃⲆⲆ.ΔΔΔ = Ig;
                }
                var b = $w * (1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * 600 * po;
                var c = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * b;
                var d = b * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
            } else {
                c = 0;
                d = 0;
            }
            if (this.info & 16) {
                var e = ΔⲆ[623][cf.time];
            } else {
                e = ΔⲆ[287][cf.time];
            }
            Qc(ro, e, -e.width / 2 + c, -e.width / 2 + d);
            ro.restore();
            for (var f = this.info & 15, g = 0; f > g; g++) {
                this.ⲆΔΔᐃ[g].ⲆⲆΔⵠ(294);
            }
        }
    }
    function vp() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        this.ᐃΔᐃⲆⵠᐃΔ = Math.min(1, this.ᐃΔᐃⲆⵠᐃΔ + $w * 2);
        ro.globalAlpha = this.ᐃΔᐃⲆⵠᐃΔ * Math.min(1, Math.max(0, ⲆⵠΔᐃ.ⲆᐃⲆΔ(this, this.r) / 80));
        this.ᐃΔΔΔ.ΔΔΔ();
        ᐃΔ = ΔⲆ[247][cf.time][this.ⲆΔⵠⵠᐃ];
        if (this.ⲆΔⵠⵠᐃ < 2) {
            ΔⵠΔ = this.ᐃΔΔΔ.Δᐃᐃ * -ᐃΔ.width;
            ⵠⲆᐃ = this.ᐃΔΔΔ.Δᐃᐃ * -ᐃΔ.height;
        } else if (this.ⲆΔΔⲆᐃΔᐃ === 0) {
            ΔⵠΔ = -ᐃΔ.width;
            ⵠⲆᐃ = -ᐃΔ.height;
        } else {
            ΔⵠΔ = -ᐃΔ.width * 1.35;
            ⵠⲆᐃ = -ᐃΔ.height * 1.35;
        }
        Qc(ro, ᐃΔ, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
        ro.globalAlpha = 1;
        ro.restore();
    }
    function mp() {
        if (this.ᐃⲆⲆ.ΔΔΔ) {
            if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && pl == this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ) {
                this.ᐃⲆⲆ.ΔΔΔ = false;
            }
            var a = po * ((1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * $w * 600);
            var b = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * a;
            var c = a * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        ro.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        ro.translate(Ww.ᐃⲆΔ.x + this.x + b, Ww.ᐃⲆΔ.y + this.y + c);
        ro.rotate(this.angle);
        ᐃΔ = ΔⲆ[155][cf.time];
        Qc(ro, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + $w * 3) % (Math.PI * 2);
        }
        ro.rotate(this.rotate);
        ᐃΔ = ΔⲆ[1206][cf.time];
        Qc(ro, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        ro.restore();
    }
    function cp() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        if (this.ᐃⲆⲆ.ΔΔΔ) {
            if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && Ig == this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ) {
                this.ᐃⲆⲆ.ΔΔΔ = Yh;
            }
            var a = po * ((1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * $w * 600);
            var b = a * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
            var c = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        if (this.action == 2) {
            ᐃΔ = ΔⲆ[407][cf.time];
        } else {
            ᐃΔ = ΔⲆ[119][cf.time];
        }
        Qc(ro, ᐃΔ, -ᐃΔ.width / 2 + b, -ᐃΔ.height / 2 + c);
        ro.restore();
    }
    function pp() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        if (ⲆⵠΔᐃ.ⲆᐃⲆΔ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + $w / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - $w, 1);
        }
        this.ᐃΔΔΔ.ΔΔΔ();
        this.rotate.ΔΔΔ();
        a = ΔⲆ[449][cf.time];
        ΔⵠΔ = this.ᐃΔΔΔ.Δᐃᐃ * -a.width * this.scale;
        ⵠⲆᐃ = -a.height * this.ᐃΔΔΔ.Δᐃᐃ * this.scale;
        Qc(ro, a, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
        if (this.action & 2) {
            if (this.ᐃⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⲆⲆⲆ == Lo) {
                this.action -= 2;
            }
            ro.globalAlpha = 0.6 - this.ᐃⲆⲆ.Δᐃᐃ;
            var a = ΔⲆ[463];
            Qc(ro, a, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
            ro.globalAlpha = 1;
        }
        a = ΔⲆ[451][cf.time];
        ΔⵠΔ = -a.width * this.ᐃΔΔΔ.Δᐃᐃ * this.scale;
        ⵠⲆᐃ = -a.height * this.ᐃΔΔΔ.Δᐃᐃ * this.scale;
        ro.save();
        ro.translate(po * -30, po * 70);
        ro.rotate(this.rotate.Δᐃᐃ);
        Qc(ro, a, po * -10, po * -40, ΔⵠΔ, ⵠⲆᐃ);
        if (this.action & 2) {
            ro.globalAlpha = 0.6 - this.ᐃⲆⲆ.Δᐃᐃ;
            a = ΔⲆ[466];
            Qc(ro, a, po * -10, po * -40, ΔⵠΔ, ⵠⲆᐃ);
            ro.globalAlpha = 1;
        }
        ro.restore();
        a = ΔⲆ[452][cf.time];
        ro.save();
        ro.translate(po * 30, po * 70);
        ro.rotate(-this.rotate.Δᐃᐃ);
        Qc(ro, a, po * 10 - ΔⵠΔ, po * -40, ΔⵠΔ, ⵠⲆᐃ);
        if (this.action & 2) {
            ro.globalAlpha = 0.6 - this.ᐃⲆⲆ.Δᐃᐃ;
            a = ΔⲆ[467];
            Qc(ro, a, po * 10 - ΔⵠΔ, po * -40, ΔⵠΔ, ⵠⲆᐃ);
            ro.globalAlpha = 1;
        }
        ro.restore();
        ro.restore();
    }
    function Cp() {
        if (this.info !== 10) {
            for (var b = this.info & 15, c = 0; b > c; c++) {
                this.ⲆΔΔᐃ[c].ⲆⲆΔⵠ(207, this.x, this.y);
            }
            ro.save();
            ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
            ro.rotate(this.angle);
            if (this.ᐃⲆⲆ.ΔΔΔ) {
                if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ == 0) {
                    this.ᐃⲆⲆ.ΔΔΔ = f;
                }
                var d = po * ((1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * $w * 600);
                var e = d * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
                var g = d * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
            } else {
                e = 0;
                g = 0;
            }
            if (this.info & 16) {
                var h = ΔⲆ[958][cf.time];
            } else {
                h = ΔⲆ[957][cf.time];
            }
            Qc(ro, h, -h.width / 2 + e, -h.width / 2 + g);
            ro.restore();
        }
    }
    function Tp() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        this.ⵠᐃⲆᐃ.ΔΔΔ();
        ro.globalAlpha = 0.3;
        var a = ΔⲆ[282][cf.time];
        var b = -a.width * this.ⵠᐃⲆᐃ.Δᐃᐃ;
        var c = -a.height * this.ⵠᐃⲆᐃ.Δᐃᐃ;
        Qc(ro, a, -b / 2, -c / 2, b, c);
        ro.globalAlpha = 1;
        ro.restore();
    }
    function fp() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        if (this.ᐃⲆⲆ.ΔΔΔ) {
            if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && Eh == this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ) {
                this.ᐃⲆⲆ.ΔΔΔ = pl;
            }
            var b = $w * (1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * 600 * po;
            var c = b * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
            var d = b * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            ro.rotate(this.angle);
            this.ⵠᐃⲆᐃ.ΔΔΔ();
            if (this.info & 16) {
                var f = ΔⲆ[849][cf.time];
            } else {
                f = ΔⲆ[193][cf.time];
            }
            var g = -f.width * this.ⵠᐃⲆᐃ.Δᐃᐃ;
            var a = -f.height * this.ⵠᐃⲆᐃ.Δᐃᐃ;
            Qc(ro, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ΔⲆ[869][cf.time];
            } else {
                f = ΔⲆ[194][cf.time];
            }
            ro.translate(0, f.height / 2);
            Qc(ro, f, c - f.width / 2, -f.height + d);
        }
        ro.restore();
    }
    function zp() {
        var a = Math.PI / 2;
        var b = Math.PI / 4;
        this.ᐃΔΔΔ.ΔΔΔ();
        this.ΔΔᐃᐃⲆᐃⵠ.ΔΔΔ();
        this.ᐃⲆᐃⲆⲆᐃΔ.ΔΔΔ();
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        c = this.info === 0 ? ΔⲆ[231][cf.time] : ΔⲆ[1053][cf.time];
        ΔⵠΔ = -c.width * this.ᐃΔΔΔ.Δᐃᐃ;
        ⵠⲆᐃ = this.ᐃΔΔΔ.Δᐃᐃ * -c.height;
        Qc(ro, c, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
        if (this.action & 2) {
            if (this.ᐃⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⲆⲆⲆ == 0) {
                this.action -= 2;
            }
            ro.globalAlpha = 0.6 - this.ᐃⲆⲆ.Δᐃᐃ;
            var c = ΔⲆ[1056];
            Qc(ro, c, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
            ro.globalAlpha = 1;
        }
        if (this.action & 4) {
            if (this.ᐃⵠᐃΔΔ.ΔΔΔ() && this.ᐃⵠᐃΔΔ.ⲆⲆⲆ == f) {
                this.action -= 4;
            }
            ro.globalAlpha = 0.6 - this.ᐃⵠᐃΔΔ.Δᐃᐃ;
            c = ΔⲆ[1065];
            Qc(ro, c, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
            ro.globalAlpha = 1;
        }
        ro.restore();
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle + b);
        ro.translate(100, 0);
        ro.rotate(a);
        c = this.info === 0 ? ΔⲆ[1060][cf.time] : ΔⲆ[1059][cf.time];
        ΔⵠΔ = -c.width * this.ΔΔᐃᐃⲆᐃⵠ.Δᐃᐃ;
        ⵠⲆᐃ = -c.height * this.ΔΔᐃᐃⲆᐃⵠ.Δᐃᐃ;
        Qc(ro, c, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
        if (this.action & 2) {
            ro.globalAlpha = 0.6 - this.ᐃⲆⲆ.Δᐃᐃ;
            c = ΔⲆ[1057];
            Qc(ro, c, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
            ro.globalAlpha = 1;
        }
        if (this.action & 4) {
            ro.globalAlpha = 0.6 - this.ᐃⵠᐃΔΔ.Δᐃᐃ;
            c = ΔⲆ[1066];
            Qc(ro, c, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
            ro.globalAlpha = 1;
        }
        ro.restore();
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle + a + b);
        ro.translate(100, 0);
        ro.rotate(a);
        c = this.info === 0 ? ΔⲆ[1063][cf.time] : ΔⲆ[1062][cf.time];
        ΔⵠΔ = this.ᐃⲆᐃⲆⲆᐃΔ.Δᐃᐃ * -c.width;
        ⵠⲆᐃ = this.ᐃⲆᐃⲆⲆᐃΔ.Δᐃᐃ * -c.height;
        Qc(ro, c, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
        if (this.action & 2) {
            ro.globalAlpha = 0.6 - this.ᐃⲆⲆ.Δᐃᐃ;
            c = ΔⲆ[1058];
            Qc(ro, c, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
            ro.globalAlpha = 1;
        }
        if (this.action & 4) {
            ro.globalAlpha = 0.6 - this.ᐃⵠᐃΔΔ.Δᐃᐃ;
            c = ΔⲆ[1067];
            Qc(ro, c, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
            ro.globalAlpha = 1;
        }
        ro.restore();
    }
    function yp(f, e, i, j, k, n, a, o, p) {
        if (o === Xk) {
            o = 0;
        }
        for (var h = f; e >= h; h++) {
            for (var q = i; j >= q; q++) {
                var r = Uw.ⲆⵠⵠⲆ[h][q];
                if (_r !== r && r[n] !== undefined) {
                    var t = r[n];
                    var w = ΔⲆ[k][cf.time][t.ⲆΔΔⲆΔⵠΔ];
                    Qc(ro, w, Ww.ᐃⲆΔ.x + t.x - w.width / (ⵠⵠᐃⲆᐃ * 4), Ww.ᐃⲆΔ.y + t.y - w.height / (ⵠⵠᐃⲆᐃ * 4), w.width / (ⵠⵠᐃⲆᐃ * 2), w.height / (ⵠⵠᐃⲆᐃ * 2));
                    if (df.ⵠⲆΔⵠⲆ) {
                        var x = 2147483648;
                        var y = ((h * 1000 + q) * 1103515245 + 12345) % x / x;
                        if (y < 0.2) {
                            y = Math.floor(y * 5 * ΔⲆ[1025][cf.time][t.ⲆΔΔⲆΔⵠΔ].length);
                            w = ΔⲆ[1025][cf.time][t.ⲆΔΔⲆΔⵠΔ][y];
                            Qc(ro, w, Ww.ᐃⲆΔ.x + t.x - w.width / (ⵠⵠᐃⲆᐃ * 4), Ww.ᐃⲆΔ.y + t.y - w.height / (ⵠⵠᐃⲆᐃ * 4), w.width / (ⵠⵠᐃⲆᐃ * 2), w.height / (ⵠⵠᐃⲆᐃ * 2));
                        } else if (t.ⵠⲆΔⵠⵠⵠᐃ !== 0) {
                            w = ΔⲆ[1026][cf.time];
                            var z = (bp + h % 2 * 30) % 60;
                            ro.globalAlpha = z < 30 ? z / 30 : 1 - (z - 30) / 30;
                            Qc(ro, w, Ww.ᐃⲆΔ.x + t.x - w.width / (ⵠⵠᐃⲆᐃ * 4), Ww.ᐃⲆΔ.y + t.y - w.height / (ⵠⵠᐃⲆᐃ * 4) - 30 + z, w.width / (ⵠⵠᐃⲆᐃ * 2), w.height / (ⵠⵠᐃⲆᐃ * 2));
                            ro.globalAlpha = 1;
                        }
                    }
                }
            }
        }
    }
    function wp() {
        if (this.ᐃⲆⲆ.ΔΔΔ) {
            if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && zk == this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ) {
                this.ᐃⲆⲆ.ΔΔΔ = Ig;
            }
            var a = po * ($w * (1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * 600);
            var b = a * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
            var c = a * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        this.ⲆⲆΔᐃᐃⵠⵠ = (this.ⲆⲆΔᐃᐃⵠⵠ + $w * 3) % (Math.PI * 2);
        this.ⲆᐃⵠᐃᐃᐃⲆ = (this.ⲆᐃⵠᐃᐃᐃⲆ - $w * 3) % (Math.PI * 2);
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x + b, Ww.ᐃⲆΔ.y + this.y + c);
        ro.save();
        ro.rotate(this.angle);
        ᐃΔ = ΔⲆ[152][cf.time];
        Qc(ro, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        ro.restore();
        ro.save();
        ro.rotate(this.ⲆⲆΔᐃᐃⵠⵠ);
        ᐃΔ = ΔⲆ[1194][cf.time];
        Qc(ro, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        ro.restore();
        ro.save();
        ro.rotate(this.ⲆᐃⵠᐃᐃᐃⲆ);
        ᐃΔ = ΔⲆ[1193][cf.time];
        Qc(ro, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        ro.restore();
        ro.restore();
    }
    function Pp() {
        if (this.ᐃⲆⲆ.ΔΔΔ) {
            if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ == dq) {
                this.ᐃⲆⲆ.ΔΔΔ = Yh;
            }
            var a = po * ((1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * $w * 600);
            var b = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * a;
            var c = a * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        ro.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        ro.translate(Ww.ᐃⲆΔ.x + this.x + b, Ww.ᐃⲆΔ.y + this.y + c);
        ro.rotate(this.angle);
        ᐃΔ = ΔⲆ[153][cf.time];
        Qc(ro, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + $w * 3) % (Math.PI * 2);
        }
        ro.rotate(this.rotate);
        ᐃΔ = ΔⲆ[1198][cf.time];
        Qc(ro, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        ro.restore();
    }
    function kp() {
        if (this.info >= 10) {
            ro.save();
            ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
            ro.rotate(this.angle);
            if (this.ᐃⲆⲆ.ΔΔΔ) {
                if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ == fr) {
                    this.ᐃⲆⲆ.ΔΔΔ = f;
                }
                var b = po * ($w * (1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * 600);
                var c = b * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
                var d = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * b;
            } else {
                c = 0;
                d = 0;
            }
            this.ⵠᐃⲆᐃ.ΔΔΔ();
            var e = ΔⲆ[115][cf.time];
            var g = -e.width * this.ⵠᐃⲆᐃ.Δᐃᐃ;
            var h = this.ⵠᐃⲆᐃ.Δᐃᐃ * -e.height;
            Qc(ro, e, -g / 2 + c, -h / 2 + d, g, h);
            ro.restore();
        }
    }
    function Ap() {
        if (this.ᐃⲆⲆ.ΔΔΔ) {
            var a = po * ($w * (1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * 600);
            var b = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * a;
            var c = a * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + $w * 0.5) % (Math.PI * 2);
        }
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x + b, Ww.ᐃⲆΔ.y + this.y + c);
        ro.save();
        ro.rotate(this.rotate);
        ᐃΔ = ΔⲆ[641][cf.time];
        Qc(ro, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        ro.restore();
        ro.save();
        ro.rotate(this.ΔⵠΔⲆΔᐃⵠΔΔ);
        ᐃΔ = ΔⲆ[642][cf.time];
        Qc(ro, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        ro.restore();
        ro.restore();
    }
    function xp() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        this.ⲆᐃⲆⲆΔ.ΔΔΔ();
        ᐃΔ = ΔⲆ[526][cf.time];
        ΔⵠΔ = -ᐃΔ.width * this.ⲆᐃⲆⲆΔ.Δᐃᐃ;
        ⵠⲆᐃ = this.ⲆᐃⲆⲆΔ.Δᐃᐃ * -ᐃΔ.height;
        Qc(ro, ᐃΔ, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
        ro.restore();
    }
    function Jp() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        this.ⲆᐃⲆⲆΔ.ΔΔΔ();
        ᐃΔ = ΔⲆ[289][cf.time];
        ΔⵠΔ = -ᐃΔ.width * this.ⲆᐃⲆⲆΔ.Δᐃᐃ;
        ⵠⲆᐃ = -ᐃΔ.height * this.ⲆᐃⲆⲆΔ.Δᐃᐃ;
        Qc(ro, ᐃΔ, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
        ro.restore();
    }
    function Mp() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        if (this.ᐃⲆⲆ.ΔΔΔ) {
            if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ == 0) {
                this.ᐃⲆⲆ.ΔΔΔ = false;
            }
            var b = (1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * $w * 600 * po;
            var c = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * b;
            var d = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            ro.rotate(this.angle);
            this.ⵠᐃⲆᐃ.ΔΔΔ();
            if (this.info & 16) {
                var f = ΔⲆ[668][cf.time];
            } else {
                f = ΔⲆ[132][cf.time];
            }
            var g = this.ⵠᐃⲆᐃ.Δᐃᐃ * -f.width;
            var a = -f.height * this.ⵠᐃⲆᐃ.Δᐃᐃ;
            Qc(ro, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            this.ⵠΔⵠᐃⲆⵠΔ.ΔΔΔ();
            if (this.info & 16) {
                f = ΔⲆ[638][cf.time];
            } else {
                f = ΔⲆ[134][cf.time];
            }
            ro.translate(0, f.height / 2);
            ro.rotate(this.ⵠΔⵠᐃⲆⵠΔ.Δᐃᐃ);
            Qc(ro, f, c - f.width / 2, -f.height + d);
        }
        ro.restore();
    }
    function Bp(a, b, c) {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + b, Ww.ᐃⲆΔ.y + c);
        ro.rotate(this.angle);
        ro.translate(this.x - b, this.y - c);
        this.ᐃΔΔΔ.ΔΔΔ();
        ᐃΔ = ΔⲆ[a][cf.time];
        ΔⵠΔ = this.ᐃΔΔΔ.Δᐃᐃ * -ᐃΔ.width;
        ⵠⲆᐃ = this.ᐃΔΔΔ.Δᐃᐃ * -ᐃΔ.height;
        Qc(ro, ᐃΔ, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
        ro.restore();
    }
    function Dp() {
        this.ᐃΔΔΔ.ΔΔΔ();
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        a = this.info === 0 ? ΔⲆ[248][cf.time] : ΔⲆ[1222][cf.time];
        ΔⵠΔ = -a.width * this.ᐃΔΔΔ.Δᐃᐃ;
        ⵠⲆᐃ = -a.height * this.ᐃΔΔΔ.Δᐃᐃ;
        Qc(ro, a, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
        if (this.action & 2) {
            if (this.ᐃⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⲆⲆⲆ == Eh) {
                this.action -= 2;
            }
            ro.globalAlpha = 0.6 - this.ᐃⲆⲆ.Δᐃᐃ;
            var a = ΔⲆ[1223];
            Qc(ro, a, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
            ro.globalAlpha = 1;
        }
        ro.restore();
    }
    function Ip(a, b) {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        this.ᐃΔΔΔ.ΔΔΔ();
        c = ΔⲆ[a][cf.time];
        ΔⵠΔ = this.ᐃΔΔΔ.Δᐃᐃ * -c.width;
        ⵠⲆᐃ = this.ᐃΔΔΔ.Δᐃᐃ * -c.height;
        Qc(ro, c, -ΔⵠΔ / 4, -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
        if (this.action & 2) {
            if (this.ᐃⲆⲆ.ΔΔΔ() && og == this.ᐃⲆⲆ.ⲆⲆⲆ) {
                this.action -= 2;
            }
            ro.globalAlpha = 0.6 - this.ᐃⲆⲆ.Δᐃᐃ;
            var c = ΔⲆ[b];
            Qc(ro, c, -ΔⵠΔ / 4, -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
            ro.globalAlpha = 1;
        }
        ro.restore();
    }
    function Ep() {
        var a = T;
        var b = undefined;
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        this.ᐃΔΔΔ.ΔΔΔ();
        this.rotate.ΔΔΔ();
        if (this.ⲆⲆᐃⲆΔ >= 0.1 && this.ⲆⲆᐃⲆΔ <= 1.1) {
            if ((c = Math.max(0, Math.min(1, this.ⲆⲆᐃⲆΔ - 0.1))) < 0.2) {
                c *= 5;
            } else {
                c = c > 0.8 ? (1 - c) * 5 : 1;
            }
            a = ΔⲆ[1150][cf.time];
            ΔⵠΔ = -a.width * this.ᐃΔΔΔ.Δᐃᐃ;
            ⵠⲆᐃ = this.ᐃΔΔΔ.Δᐃᐃ * -a.height;
            ro.globalAlpha = c;
            Qc(ro, a, -ΔⵠΔ / 4, -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
            b = ΔⲆ[1151];
        }
        if (this.ⲆⲆᐃⲆΔ >= 0.9) {
            var c;
            if ((c = Math.max(0, Math.min(1, this.ⲆⲆᐃⲆΔ - 0.9))) < 0.2) {
                c *= 5;
            } else {
                c = 1;
            }
            a = ΔⲆ[1152][cf.time];
            ΔⵠΔ = -a.width * this.ᐃΔΔΔ.Δᐃᐃ;
            ⵠⲆᐃ = this.ᐃΔΔΔ.Δᐃᐃ * -a.height;
            ro.globalAlpha = c;
            Qc(ro, a, -ΔⵠΔ / 4, -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
            b = ΔⲆ[1153];
        }
        if (this.action & 2 && Gj !== b) {
            if (this.ᐃⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⲆⲆⲆ == Lo) {
                this.action -= 2;
            }
            ro.globalAlpha = c * (0.6 - this.ᐃⲆⲆ.Δᐃᐃ);
            ΔⵠΔ = -b.width * this.ᐃΔΔΔ.Δᐃᐃ;
            ⵠⲆᐃ = this.ᐃΔΔΔ.Δᐃᐃ * -b.height;
            Qc(ro, b, -ΔⵠΔ / 4, -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
        }
        ro.globalAlpha = 1;
        ro.restore();
    }
    function Sp(a, b, c) {
        if (a >= 0) {
            ᐃΔ = ΔⲆ[a][cf.time];
            switch (a) {
                case 71:
                case 72:
                case 73:
                    Nv(a, ᐃΔ, -ᐃΔ.width / 4 - (0 + b) * po, -ᐃΔ.height / 4 + (c + 35) * po);
                    break;
                case 74:
                    Nv(a, ᐃΔ, -ᐃΔ.width / 4 - po * (1 + b), -ᐃΔ.height / 4 + (c + 45) * po);
                    break;
                case 75:
                case 76:
                    Nv(a, ᐃΔ, -ᐃΔ.width / 4 - po * (1 + b), -ᐃΔ.height / 4 + po * (c + 40));
            }
        }
    }
    function Qp() {
        this.ᐃΔΔΔ.ΔΔΔ();
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        a = this.info === 0 ? ΔⲆ[1042][cf.time] : ΔⲆ[1044][cf.time];
        ΔⵠΔ = this.ᐃΔΔΔ.Δᐃᐃ * -a.width;
        ⵠⲆᐃ = this.ᐃΔΔΔ.Δᐃᐃ * -a.height;
        Qc(ro, a, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
        if (this.action & 2) {
            if (this.ᐃⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⲆⲆⲆ == f) {
                this.action -= 2;
            }
            ro.globalAlpha = 0.6 - this.ᐃⲆⲆ.Δᐃᐃ;
            var a = ΔⲆ[1045];
            Qc(ro, a, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
            ro.globalAlpha = 1;
        }
        ro.restore();
    }
    function _p() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        if (this.ᐃⲆⲆ.ΔΔΔ) {
            if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ == Eh) {
                this.ᐃⲆⲆ.ΔΔΔ = Ia;
            }
            var a = po * ((1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * $w * 600);
            var b = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * a;
            var c = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        if (this.info === 0) {
            ᐃΔ = ΔⲆ[183][cf.time];
        } else {
            ᐃΔ = ΔⲆ[802][cf.time][this.info - 1];
        }
        Qc(ro, ᐃΔ, -ᐃΔ.width / 2 + b, -ᐃΔ.height / 2 + c);
        ro.restore();
    }
    function Fp() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        var a = ⲆⵠΔᐃ.ⲆᐃⲆΔ(this, this.r);
        this.scale = a > 350 ? Math.min(this.scale + $w / 2, 1.8) : Math.max(this.scale - $w, 1);
        this.ᐃΔΔΔ.ΔΔΔ();
        this.rotate.ΔΔΔ();
        this.ΔΔᐃᐃ = a < 350 ? Math.max(0, this.ΔΔᐃᐃ - $w * 2.2) : Math.min(1, this.ΔΔᐃᐃ + $w * 2.2);
        b = this.info & 1 ? ΔⲆ[1114][cf.time] : ΔⲆ[1113][cf.time];
        ΔⵠΔ = -b.width * this.ᐃΔΔΔ.Δᐃᐃ * this.scale;
        ⵠⲆᐃ = this.scale * (this.ᐃΔΔΔ.Δᐃᐃ * -b.height);
        ro.globalAlpha = 1 - this.ΔΔᐃᐃ;
        Qc(ro, b, -ΔⵠΔ / 4, -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
        b = this.info & 1 ? ΔⲆ[1098][cf.time] : ΔⲆ[235][cf.time];
        ΔⵠΔ = this.scale * (-b.width * this.ᐃΔΔΔ.Δᐃᐃ);
        ⵠⲆᐃ = this.scale * (-b.height * this.ᐃΔΔΔ.Δᐃᐃ);
        ro.globalAlpha = this.ΔΔᐃᐃ;
        Qc(ro, b, -ΔⵠΔ / 4, -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
        if (this.action & 2) {
            if (this.ᐃⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⲆⲆⲆ == 0) {
                this.action -= 2;
            }
            ro.globalAlpha = (1 - this.ΔΔᐃᐃ) * (0.6 - this.ᐃⲆⲆ.Δᐃᐃ);
            var b = ΔⲆ[1115];
            ΔⵠΔ = this.scale * (-b.width * this.ᐃΔΔΔ.Δᐃᐃ);
            ⵠⲆᐃ = -b.height * this.ᐃΔΔΔ.Δᐃᐃ * this.scale;
            Qc(ro, b, -ΔⵠΔ / 4, -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
            ro.globalAlpha = this.ΔΔᐃᐃ * (0.6 - this.ᐃⲆⲆ.Δᐃᐃ);
            b = ΔⲆ[1107];
            ΔⵠΔ = this.scale * (-b.width * this.ᐃΔΔΔ.Δᐃᐃ);
            ⵠⲆᐃ = -b.height * this.ᐃΔΔΔ.Δᐃᐃ * this.scale;
            Qc(ro, b, -ΔⵠΔ / 4, -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
            ro.globalAlpha = 1;
        }
        b = this.info & 1 ? ΔⲆ[1101][cf.time] : ΔⲆ[1102][cf.time];
        ΔⵠΔ = this.scale * (-b.width * this.ᐃΔΔΔ.Δᐃᐃ);
        ⵠⲆᐃ = this.scale * (-b.height * this.ᐃΔΔΔ.Δᐃᐃ);
        ro.save();
        ro.translate(po * -20, po * 0);
        ro.rotate(this.rotate.Δᐃᐃ);
        ro.globalAlpha = this.ΔΔᐃᐃ;
        Qc(ro, b, -ΔⵠΔ * po / 4, po * -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
        if (this.action & 2) {
            ro.globalAlpha = (0.6 - this.ᐃⲆⲆ.Δᐃᐃ) * this.ΔΔᐃᐃ;
            b = ΔⲆ[1108];
            Qc(ro, b, -ΔⵠΔ * po / 4, po * -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
            ro.globalAlpha = 1;
        }
        ro.restore();
        b = this.info & 1 ? ΔⲆ[1104][cf.time] : ΔⲆ[1105][cf.time];
        ro.save();
        ro.translate(po * 20, po * 0);
        ro.rotate(-this.rotate.Δᐃᐃ);
        ro.globalAlpha = this.ΔΔᐃᐃ;
        Qc(ro, b, -ΔⵠΔ * po / 4, -ⵠⲆᐃ * po / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
        if (this.action & 2) {
            ro.globalAlpha = this.ΔΔᐃᐃ * (0.6 - this.ᐃⲆⲆ.Δᐃᐃ);
            b = ΔⲆ[1109];
            Qc(ro, b, -ΔⵠΔ * po / 4, po * -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
            ro.globalAlpha = 1;
        }
        ro.globalAlpha = 1;
        ro.restore();
        ro.restore();
    }
    function Rp() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        if (ⲆⵠΔᐃ.ⲆᐃⲆΔ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + $w / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - $w, 1);
        }
        this.ᐃΔΔΔ.ΔΔΔ();
        this.rotate.ΔΔΔ();
        a = this.info === 0 ? ΔⲆ[232][cf.time] : ΔⲆ[1068][cf.time];
        ΔⵠΔ = this.ᐃΔΔΔ.Δᐃᐃ * -a.width * this.scale;
        ⵠⲆᐃ = this.scale * (this.ᐃΔΔΔ.Δᐃᐃ * -a.height);
        Qc(ro, a, -ΔⵠΔ / 4, -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
        if (this.action & 2) {
            if (this.ᐃⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⲆⲆⲆ == Lo) {
                this.action -= 2;
            }
            ro.globalAlpha = 0.6 - this.ᐃⲆⲆ.Δᐃᐃ;
            var a = ΔⲆ[1077];
            Qc(ro, a, -ΔⵠΔ / 4, -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
            ro.globalAlpha = 1;
        }
        a = this.info === 0 ? ΔⲆ[1072][cf.time] : ΔⲆ[1071][cf.time];
        ΔⵠΔ = this.ᐃΔΔΔ.Δᐃᐃ * -a.width * this.scale;
        ⵠⲆᐃ = this.scale * (-a.height * this.ᐃΔΔΔ.Δᐃᐃ);
        ro.save();
        ro.translate(po * -40, po * 10);
        ro.rotate(this.rotate.Δᐃᐃ);
        Qc(ro, a, -ΔⵠΔ * po / 4, -ⵠⲆᐃ * po / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
        if (this.action & 2) {
            ro.globalAlpha = 0.6 - this.ᐃⲆⲆ.Δᐃᐃ;
            a = ΔⲆ[1078];
            Qc(ro, a, po * -ΔⵠΔ / 4, po * -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
            ro.globalAlpha = 1;
        }
        ro.restore();
        a = this.info === 0 ? ΔⲆ[1075][cf.time] : ΔⲆ[1074][cf.time];
        ro.save();
        ro.translate(po * 40, po * 10);
        ro.rotate(-this.rotate.Δᐃᐃ);
        Qc(ro, a, po * -ΔⵠΔ / 4, po * -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
        if (this.action & 2) {
            ro.globalAlpha = 0.6 - this.ᐃⲆⲆ.Δᐃᐃ;
            a = ΔⲆ[1079];
            Qc(ro, a, po * -ΔⵠΔ / 4, -ⵠⲆᐃ * po / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
            ro.globalAlpha = 1;
        }
        ro.restore();
        ro.restore();
    }
    function jp() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        this.ⲆΔᐃΔᐃ.ΔΔΔ();
        ᐃΔ = ΔⲆ[288][cf.time];
        ΔⵠΔ = -ᐃΔ.width * this.ⲆΔᐃΔᐃ.Δᐃᐃ;
        ⵠⲆᐃ = -ᐃΔ.height * this.ⲆΔᐃΔᐃ.Δᐃᐃ;
        Qc(ro, ᐃΔ, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
        this.ⲆᐃⲆⲆΔ.ΔΔΔ();
        ᐃΔ = ΔⲆ[289][cf.time];
        ΔⵠΔ = this.ⲆᐃⲆⲆΔ.Δᐃᐃ * -ᐃΔ.width;
        ⵠⲆᐃ = this.ⲆᐃⲆⲆΔ.Δᐃᐃ * -ᐃΔ.height;
        Qc(ro, ᐃΔ, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
        ro.restore();
    }
    function Lp() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        if (this.ᐃⲆⲆ.ΔΔΔ) {
            if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ == 0) {
                this.ᐃⲆⲆ.ΔΔΔ = false;
            }
            var b = $w * (1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * 600 * po;
            var c = b * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
            var d = b * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
            e = ΔⲆ[716][cf.time];
            Qc(ro, e, -e.width / 2 + c, -e.height / 2 + d);
            this.up.ΔΔΔ();
            var e = ΔⲆ[720][cf.time];
            var f = -e.width * this.up.Δᐃᐃ;
            var g = -e.height * this.up.Δᐃᐃ;
            Qc(ro, e, -f / 2 + po * 1, -g / 2 + po * 3, f, g);
        } else {
            e = ΔⲆ[144][cf.time];
            Qc(ro, e, -e.width / 2 + c, -e.height / 2 + d);
        }
        ro.restore();
    }
    function Gp() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        if (this.ᐃⲆⲆ.ΔΔΔ) {
            if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ == 0) {
                this.ᐃⲆⲆ.ΔΔΔ = Es;
            }
            var b = (1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * $w * 600 * po;
            var c = b * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
            var d = b * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            ro.rotate(this.angle);
            this.ⵠᐃⲆᐃ.ΔΔΔ();
            if (this.info & 16) {
                var f = ΔⲆ[953][cf.time];
            } else {
                f = ΔⲆ[204][cf.time];
            }
            var g = -f.width * this.ⵠᐃⲆᐃ.Δᐃᐃ;
            var a = -f.height * this.ⵠᐃⲆᐃ.Δᐃᐃ;
            Qc(ro, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ΔⲆ[954][cf.time];
            } else {
                f = ΔⲆ[205][cf.time];
            }
            ro.translate(0, f.height / 2);
            Qc(ro, f, c - f.width / 2, -f.height + d);
        }
        ro.restore();
    }
    function Wp(a, b, c) {
        if (a >= 0) {
            ᐃΔ = ΔⲆ[a][cf.time];
            switch (a) {
                case 1:
                case 3:
                case 4:
                case 8:
                case 31:
                case 32:
                    Cv(a, ᐃΔ, -ᐃΔ.width / 2 - (45 + b) * po, -ᐃΔ.height / 2 + po * (c + 22));
                    break;
                case 94:
                case 95:
                case 96:
                case 97:
                    Nv(a, ᐃΔ, -ᐃΔ.width / 4 - po * (52 + b), -ᐃΔ.height / 4 + (c + 20) * po);
                    break;
                case 98:
                case 99:
                    Nv(a, ᐃΔ, -ᐃΔ.width / 4 - po * (57 + b), -ᐃΔ.height / 4 + po * (c + 20));
                    break;
                case 57:
                case 0:
                case 5:
                case 6:
                    Nv(a, ᐃΔ, -ᐃΔ.width / 4 - po * (47 + b), -ᐃΔ.height / 4 + (c + 45) * po);
                    break;
                case 30:
                    Nv(a, ᐃΔ, -ᐃΔ.width / 4 - po * (52 + b), -ᐃΔ.height / 4 + (c + 45) * po);
                    break;
                case 19:
                    Nv(a, ᐃΔ, -ᐃΔ.width / 4 - po * (47 + b), -ᐃΔ.height / 4 + (c + 44) * po);
                    break;
                case 9:
                    Cv(a, ᐃΔ, -ᐃΔ.width / 2 - po * (47 + b), -ᐃΔ.height / 2 + po * (c + 44));
                    break;
                case 62:
                    Cv(a, ᐃΔ, -ᐃΔ.width / 2 - (40 + b) * po, -ᐃΔ.height / 2 + (c + 65) * po);
                    break;
                case 12:
                    Nv(a, ᐃΔ, -ᐃΔ.width / 4 - (37 + b) * po, -ᐃΔ.height / 4 + (c + 85) * po);
                    break;
                case 34:
                    Nv(a, ᐃΔ, -ᐃΔ.width / 4 - (37 + b) * po, -ᐃΔ.height / 4 + po * (c + 85));
                    break;
                case 54:
                case 53:
                    Nv(a, ᐃΔ, -ᐃΔ.width / 4 - po * (26 + b), -ᐃΔ.height / 4 + po * (c + 77));
                    break;
                case 17:
                    Nv(a, ᐃΔ, -ᐃΔ.width / 4 - po * (37 + b), -ᐃΔ.height / 4 + po * (c + 85));
                    break;
                case 63:
                    Nv(a, ᐃΔ, -ᐃΔ.width / 4 - po * (47 + b), -ᐃΔ.height / 4 + po * (c + 44));
                    break;
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                    Nv(a, ᐃΔ, -ᐃΔ.width / 4 - (37 + b) * po, -ᐃΔ.height / 4 + po * (c + 30));
                    break;
                case 56:
                    Nv(a, ᐃΔ, -ᐃΔ.width / 4 - po * (47 + b), -ᐃΔ.height / 4 + po * (c + 35));
                    break;
                case 92:
                case 93:
                    Nv(a, ᐃΔ, -ᐃΔ.width / 4 - (47 + b) * po, -ᐃΔ.height / 4 + (c + 40) * po);
                    break;
                case 89:
                    Nv(a, ᐃΔ, -ᐃΔ.width / 4 - (47 + b) * po, -ᐃΔ.height / 4 + (c + 34) * po);
                    break;
                case 13:
                case 14:
                case 15:
                case 33:
                    Nv(a, ᐃΔ, -ᐃΔ.width / 4 - po * (37 + b), -ᐃΔ.height / 4 + (c + 90) * po);
                    break;
                case 18:
                    Nv(a, ᐃΔ, -ᐃΔ.width / 4 - po * (40 + b), -ᐃΔ.height / 4 + (c + 85) * po);
                    break;
                case 16:
                    Cv(a, ᐃΔ, -ᐃΔ.width / 2 - po * (39 + b), -ᐃΔ.height / 2 + (c + 90) * po);
                    break;
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 45:
                    Cv(a, ᐃΔ, -ᐃΔ.width / 2 - (46 + b) * po, -ᐃΔ.height / 2 + (c + 35) * po);
                    break;
                case 49:
                    Cv(a, ᐃΔ, -ᐃΔ.width / 2 - po * (47 + b), -ᐃΔ.height / 2 + po * (c + 54));
                    break;
                case 46:
                case 50:
                case 51:
                case 52:
                    Cv(a, ᐃΔ, -ᐃΔ.width / 2 - po * (46 + b), -ᐃΔ.height / 2 + po * (c + 35));
                    break;
                case 55:
                    Cv(a, ᐃΔ, -ᐃΔ.width / 2 - (47 + b) * po, -ᐃΔ.height / 2 + (c + 20) * po);
            }
        }
    }
    function Op() {
        if (this.info >= 10) {
            ro.save();
            ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
            ro.rotate(this.angle);
            if (this.ᐃⲆⲆ.ΔΔΔ) {
                if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ == 0) {
                    this.ᐃⲆⲆ.ΔΔΔ = f;
                }
                var b = po * ($w * (1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * 600);
                var c = b * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
                var d = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * b;
            } else {
                c = 0;
                d = 0;
            }
            this.ⵠᐃⲆᐃ.ΔΔΔ();
            var e = ΔⲆ[206][cf.time];
            var g = this.ⵠᐃⲆᐃ.Δᐃᐃ * -e.width;
            var h = this.ⵠᐃⲆᐃ.Δᐃᐃ * -e.height;
            Qc(ro, e, -g / 2 + c, -h / 2 + d, g, h);
            ro.restore();
        }
    }
    function Np(a, b) {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        c = ΔⲆ[a][cf.time];
        ΔⵠΔ = -c.width;
        ⵠⲆᐃ = -c.height;
        Qc(ro, c, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
        if (this.action & 2) {
            if (this.ᐃⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⲆⲆⲆ == 0) {
                this.action -= 2;
            }
            ro.globalAlpha = 0.6 - this.ᐃⲆⲆ.Δᐃᐃ;
            var c = ΔⲆ[b];
            Qc(ro, c, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
            ro.globalAlpha = 1;
        }
        ro.restore();
    }
    function Hp(a) {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        this.ᐃΔΔΔ.ΔΔΔ();
        ᐃΔ = ΔⲆ[a][cf.time];
        ΔⵠΔ = this.ᐃΔΔΔ.Δᐃᐃ * -ᐃΔ.width;
        ⵠⲆᐃ = -ᐃΔ.height * this.ᐃΔΔΔ.Δᐃᐃ;
        Qc(ro, ᐃΔ, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
        ro.restore();
    }
    function qp() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        if (ⲆⵠΔᐃ.ⲆᐃⲆΔ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + $w / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - $w, 1);
        }
        this.ᐃΔΔΔ.ΔΔΔ();
        this.rotate.ΔΔΔ();
        a = this.info === 0 ? ΔⲆ[233][cf.time] : ΔⲆ[1083][cf.time];
        ΔⵠΔ = this.scale * (this.ᐃΔΔΔ.Δᐃᐃ * -a.width);
        ⵠⲆᐃ = this.scale * (this.ᐃΔΔΔ.Δᐃᐃ * -a.height);
        Qc(ro, a, -ΔⵠΔ / 4, -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
        if (this.action & 2) {
            if (this.ᐃⲆⲆ.ΔΔΔ() && pl == this.ᐃⲆⲆ.ⲆⲆⲆ) {
                this.action -= 2;
            }
            ro.globalAlpha = 0.6 - this.ᐃⲆⲆ.Δᐃᐃ;
            var a = ΔⲆ[1092];
            Qc(ro, a, -ΔⵠΔ / 4, -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
            ro.globalAlpha = 1;
        }
        a = this.info === 0 ? ΔⲆ[1087][cf.time] : ΔⲆ[1086][cf.time];
        ΔⵠΔ = this.scale * (this.ᐃΔΔΔ.Δᐃᐃ * -a.width);
        ⵠⲆᐃ = this.ᐃΔΔΔ.Δᐃᐃ * -a.height * this.scale;
        ro.save();
        ro.translate(po * -40, po * 10);
        ro.rotate(this.rotate.Δᐃᐃ);
        Qc(ro, a, -ΔⵠΔ * po / 4, po * -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
        if (this.action & 2) {
            ro.globalAlpha = 0.6 - this.ᐃⲆⲆ.Δᐃᐃ;
            a = ΔⲆ[1093];
            Qc(ro, a, po * -ΔⵠΔ / 4, -ⵠⲆᐃ * po / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
            ro.globalAlpha = 1;
        }
        ro.restore();
        a = this.info === 0 ? ΔⲆ[1090][cf.time] : ΔⲆ[1089][cf.time];
        ro.save();
        ro.translate(po * 40, po * 10);
        ro.rotate(-this.rotate.Δᐃᐃ);
        Qc(ro, a, po * -ΔⵠΔ / 4, po * -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
        if (this.action & 2) {
            ro.globalAlpha = 0.6 - this.ᐃⲆⲆ.Δᐃᐃ;
            a = ΔⲆ[1094];
            Qc(ro, a, -ΔⵠΔ * po / 4, -ⵠⲆᐃ * po / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
            ro.globalAlpha = 1;
        }
        ro.restore();
        ro.restore();
    }
    function Up() {
        if (this.ᐃⲆⲆ.ΔΔΔ) {
            if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ == 0) {
                this.ᐃⲆⲆ.ΔΔΔ = false;
            }
            var a = $w * (1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * 600 * po;
            var b = a * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
            var c = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        ro.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        ro.translate(Ww.ᐃⲆΔ.x + this.x + b, Ww.ᐃⲆΔ.y + this.y + c);
        ro.rotate(this.angle);
        ᐃΔ = ΔⲆ[157][cf.time];
        Qc(ro, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + $w * 3) % (Math.PI * 2);
        }
        ro.rotate(this.rotate);
        ᐃΔ = ΔⲆ[1214][cf.time];
        Qc(ro, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        ro.restore();
    }
    function Yp(b) {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        this.ⵠᐃⲆᐃ.ΔΔΔ();
        ro.globalAlpha = 0.3;
        var c = ΔⲆ[282][cf.time];
        var d = -c.width * this.ⵠᐃⲆᐃ.Δᐃᐃ;
        var e = -c.height * this.ⵠᐃⲆᐃ.Δᐃᐃ;
        Qc(ro, c, -d / 2, -e / 2, d, e);
        ro.globalAlpha = 1;
        if (this.ᐃⲆⲆ.ΔΔΔ) {
            if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ == 0) {
                this.ᐃⲆⲆ.ΔΔΔ = X;
            }
            var f = (1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * $w * 600 * po;
            var g = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * f;
            var h = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * f;
        } else {
            g = 0;
            h = 0;
        }
        c = ΔⲆ[b][cf.time];
        Qc(ro, c, -c.width / 2 + g, -c.height / 2 + h);
        ro.restore();
    }
    function Kp() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.ΔⲆᐃΔⲆ.length == 0 || this.ΔⲆᐃΔⲆ[this.ΔⲆᐃΔⲆ.length - 1] <= 0.6)) {
            this.ΔⲆᐃΔⲆ.push(1);
        }
        for (var a = 0; a < this.ΔⲆᐃΔⲆ.length; a++) {
            this.ΔⲆᐃΔⲆ[a] = Math.max(0, this.ΔⲆᐃΔⲆ[a] - $w * 0.25);
            ro.globalAlpha = this.ΔⲆᐃΔⲆ[a] / 1.3;
            var b = (1 - this.ΔⲆᐃΔⲆ[a]) * 40;
            var c = (1 - this.ΔⲆᐃΔⲆ[a]) * 35 + 10;
            Nt(ro, po * -68 + Math.sin(-this.angle - Math.PI / 2) * b, po * -20 + b * Math.cos(-this.angle - Math.PI / 2), c);
            Kt(ro, "#333333");
        }
        ro.globalAlpha = 1;
        if (this.ΔⲆᐃΔⲆ.length > 0 && this.ΔⲆᐃΔⲆ[0] === 0) {
            this.ΔⲆᐃΔⲆ.shift();
        }
        ro.restore();
    }
    function Vp(a, b) {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        if (a === 854) {
            a = 250;
            this.info = 36;
        }
        ᐃΔ = ΔⲆ[a][this.info][cf.time];
        ΔⵠΔ = -ᐃΔ.width / 2;
        ⵠⲆᐃ = -ᐃΔ.height / 2;
        Qc(ro, ᐃΔ, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
        if (this.action & 2) {
            if (this.ᐃⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⲆⲆⲆ == 0) {
                this.action -= 2;
            }
            ro.globalAlpha = 0.6 - this.ᐃⲆⲆ.Δᐃᐃ;
            var c = iv(this.info, ᐃΔ, ⲆΔᐃᐃᐃⵠΔⵠᐃ);
            Qc(ro, c, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
            ro.globalAlpha = 1;
        }
        ro.restore();
    }
    function Xp() {
        if (this.ᐃⲆⲆ.ΔΔΔ) {
            if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ == 0) {
                this.ᐃⲆⲆ.ΔΔΔ = Js;
            }
            var a = po * ((1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * $w * 600);
            var b = a * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
            var c = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        ro.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        ro.translate(Ww.ᐃⲆΔ.x + this.x + b, Ww.ᐃⲆΔ.y + this.y + c);
        ro.rotate(this.angle);
        ᐃΔ = ΔⲆ[154][cf.time];
        Qc(ro, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + $w * 3) % (Math.PI * 2);
        }
        ro.rotate(this.rotate);
        ᐃΔ = ΔⲆ[1202][cf.time];
        Qc(ro, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        ro.restore();
    }
    function Zp() {
        var a = Math.PI / 2;
        var b = Math.PI / 4;
        this.ᐃΔΔΔ.ΔΔΔ();
        this.ΔΔᐃᐃⲆᐃⵠ.ΔΔΔ();
        this.ᐃⲆᐃⲆⲆᐃΔ.ΔΔΔ();
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        c = this.info === 0 ? ΔⲆ[887][cf.time] : ΔⲆ[886][cf.time];
        ΔⵠΔ = this.ᐃΔΔΔ.Δᐃᐃ * -c.width;
        ⵠⲆᐃ = -c.height * this.ᐃΔΔΔ.Δᐃᐃ;
        Qc(ro, c, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
        if (this.action & 2) {
            if (this.ᐃⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⲆⲆⲆ == 0) {
                this.action -= 2;
            }
            ro.globalAlpha = 0.6 - this.ᐃⲆⲆ.Δᐃᐃ;
            var c = ΔⲆ[888];
            Qc(ro, c, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
            ro.globalAlpha = 1;
        }
        if (this.action & 4) {
            if (this.ᐃⵠᐃΔΔ.ΔΔΔ() && this.ᐃⵠᐃΔΔ.ⲆⲆⲆ == f) {
                this.action -= 4;
            }
            ro.globalAlpha = 0.6 - this.ᐃⵠᐃΔΔ.Δᐃᐃ;
            c = ΔⲆ[891];
            Qc(ro, c, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
            ro.globalAlpha = 1;
        }
        ro.restore();
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle + b);
        ro.translate(55, 0);
        ro.rotate(a);
        c = this.info === 0 ? ΔⲆ[894][cf.time] : ΔⲆ[896][cf.time];
        ΔⵠΔ = -c.width * this.ΔΔᐃᐃⲆᐃⵠ.Δᐃᐃ;
        ⵠⲆᐃ = this.ΔΔᐃᐃⲆᐃⵠ.Δᐃᐃ * -c.height;
        Qc(ro, c, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
        if (this.action & 2) {
            ro.globalAlpha = 0.6 - this.ᐃⲆⲆ.Δᐃᐃ;
            c = ΔⲆ[889];
            Qc(ro, c, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
            ro.globalAlpha = 1;
        }
        if (this.action & 4) {
            ro.globalAlpha = 0.6 - this.ᐃⵠᐃΔΔ.Δᐃᐃ;
            c = ΔⲆ[892];
            Qc(ro, c, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
            ro.globalAlpha = 1;
        }
        ro.restore();
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle + a + b);
        ro.translate(55, 0);
        ro.rotate(a);
        c = this.info === 0 ? ΔⲆ[895][cf.time] : ΔⲆ[897][cf.time];
        ΔⵠΔ = -c.width * this.ᐃⲆᐃⲆⲆᐃΔ.Δᐃᐃ;
        ⵠⲆᐃ = this.ᐃⲆᐃⲆⲆᐃΔ.Δᐃᐃ * -c.height;
        Qc(ro, c, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
        if (this.action & 2) {
            ro.globalAlpha = 0.6 - this.ᐃⲆⲆ.Δᐃᐃ;
            c = ΔⲆ[890];
            Qc(ro, c, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
            ro.globalAlpha = 1;
        }
        if (this.action & 4) {
            ro.globalAlpha = 0.6 - this.ᐃⵠᐃΔΔ.Δᐃᐃ;
            c = ΔⲆ[893];
            Qc(ro, c, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
            ro.globalAlpha = 1;
        }
        ro.restore();
    }
    function $p() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        this.ⲆᐃⲆⲆΔ.ΔΔΔ();
        ᐃΔ = ΔⲆ[1192][cf.time];
        ΔⵠΔ = -ᐃΔ.width * this.ⲆᐃⲆⲆΔ.Δᐃᐃ;
        ⵠⲆᐃ = this.ⲆᐃⲆⲆΔ.Δᐃᐃ * -ᐃΔ.height;
        Qc(ro, ᐃΔ, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
        ro.restore();
    }
    function Uu() {
        if (this.ᐃⲆⲆ.ΔΔΔ) {
            if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ == Eh) {
                this.ᐃⲆⲆ.ΔΔΔ = fr;
            }
            var a = $w * (1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * 600 * po;
            var b = a * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
            var c = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        this.ⲆⲆΔᐃᐃⵠⵠ = (this.ⲆⲆΔᐃᐃⵠⵠ + $w * 3) % (Math.PI * 2);
        this.ⲆᐃⵠᐃᐃᐃⲆ = (this.ⲆᐃⵠᐃᐃᐃⲆ - $w * 3) % (Math.PI * 2);
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x + b, Ww.ᐃⲆΔ.y + this.y + c);
        ro.save();
        ro.rotate(this.angle);
        ᐃΔ = ΔⲆ[151][cf.time];
        Qc(ro, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        ro.restore();
        ro.save();
        ro.rotate(this.ⲆⲆΔᐃᐃⵠⵠ);
        ᐃΔ = ΔⲆ[528][cf.time];
        Qc(ro, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        ro.restore();
        ro.save();
        ro.rotate(this.ⲆᐃⵠᐃᐃᐃⲆ);
        ᐃΔ = ΔⲆ[527][cf.time];
        Qc(ro, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        ro.restore();
        ro.restore();
    }
    function Vu() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        if (ⲆⵠΔᐃ.ⲆᐃⲆΔ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + $w / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - $w, 1);
        }
        this.ᐃΔΔΔ.ΔΔΔ();
        this.rotate.ΔΔΔ();
        a = ΔⲆ[450][cf.time];
        ΔⵠΔ = this.scale * (-a.width * this.ᐃΔΔΔ.Δᐃᐃ);
        ⵠⲆᐃ = this.scale * (this.ᐃΔΔΔ.Δᐃᐃ * -a.height);
        Qc(ro, a, -ΔⵠΔ / 4, -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
        if (this.action & 2) {
            if (this.ᐃⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⲆⲆⲆ == 0) {
                this.action -= 2;
            }
            ro.globalAlpha = 0.6 - this.ᐃⲆⲆ.Δᐃᐃ;
            var a = ΔⲆ[464];
            Qc(ro, a, -ΔⵠΔ / 4, -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
            ro.globalAlpha = 1;
        }
        a = ΔⲆ[453][cf.time];
        ΔⵠΔ = this.ᐃΔΔΔ.Δᐃᐃ * -a.width * this.scale;
        ⵠⲆᐃ = -a.height * this.ᐃΔΔΔ.Δᐃᐃ * this.scale;
        ro.save();
        ro.translate(po * -60, po * 20);
        ro.rotate(this.rotate.Δᐃᐃ);
        Qc(ro, a, po * -ΔⵠΔ / 4, -ⵠⲆᐃ * po / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
        if (this.action & 2) {
            ro.globalAlpha = 0.6 - this.ᐃⲆⲆ.Δᐃᐃ;
            a = ΔⲆ[468];
            Qc(ro, a, po * -ΔⵠΔ / 4, -ⵠⲆᐃ * po / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
            ro.globalAlpha = 1;
        }
        ro.restore();
        a = ΔⲆ[454][cf.time];
        ro.save();
        ro.translate(po * 60, po * 20);
        ro.rotate(-this.rotate.Δᐃᐃ);
        Qc(ro, a, -ΔⵠΔ * po / 4, -ⵠⲆᐃ * po / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
        if (this.action & 2) {
            ro.globalAlpha = 0.6 - this.ᐃⲆⲆ.Δᐃᐃ;
            a = ΔⲆ[469];
            Qc(ro, a, po * -ΔⵠΔ / 4, -ⵠⲆᐃ * po / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
            ro.globalAlpha = 1;
        }
        ro.restore();
        ro.restore();
    }
    function Wu() {
        if (this.ᐃⲆⲆ.ΔΔΔ) {
            if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ == Kn) {
                this.ᐃⲆⲆ.ΔΔΔ = false;
            }
            var a = $w * (1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * 600 * po;
            var b = a * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
            var c = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        ro.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        ro.translate(Ww.ᐃⲆΔ.x + this.x + b, Ww.ᐃⲆΔ.y + this.y + c);
        ro.rotate(this.angle);
        ᐃΔ = ΔⲆ[156][cf.time];
        Qc(ro, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + $w * 3) % (Math.PI * 2);
        }
        ro.rotate(this.rotate);
        ᐃΔ = ΔⲆ[1210][cf.time];
        Qc(ro, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        ro.restore();
    }
    function Xu() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        if (this.ᐃⲆⲆ.ΔΔΔ) {
            if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ == Ij) {
                this.ᐃⲆⲆ.ΔΔΔ = og;
            }
            var b = (1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * $w * 600 * po;
            var c = b * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
            var d = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            ro.rotate(this.angle);
            this.ⵠᐃⲆᐃ.ΔΔΔ();
            if (this.info & 16) {
                var f = ΔⲆ[970][cf.time];
            } else {
                f = ΔⲆ[208][cf.time];
            }
            var g = this.ⵠᐃⲆᐃ.Δᐃᐃ * -f.width;
            var a = this.ⵠᐃⲆᐃ.Δᐃᐃ * -f.height;
            Qc(ro, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ΔⲆ[971][cf.time];
            } else {
                f = ΔⲆ[209][cf.time];
            }
            ro.translate(0, f.height / 2);
            Qc(ro, f, c - f.width / 2, -f.height + d);
        }
        ro.restore();
    }
    function Yu() {
        if (this.ᐃⲆⲆ.ΔΔΔ) {
            if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && Dk == this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ) {
                this.ᐃⲆⲆ.ΔΔΔ = Lo;
            }
            var a = (1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * $w * 600 * po;
            var b = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * a;
            var c = a * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x + b, Ww.ᐃⲆΔ.y + this.y + c);
        ro.rotate(this.angle);
        ᐃΔ = ΔⲆ[135][cf.time];
        Qc(ro, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        ro.restore();
    }
    function Zu() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        if (this.ᐃⲆⲆ.ΔΔΔ) {
            if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && os == this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ) {
                this.ᐃⲆⲆ.ΔΔΔ = false;
            }
            var b = po * ($w * (1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * 600);
            var c = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * b;
            var d = Math.cos(this.ᐃⲆⲆ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            ro.rotate(this.angle);
            this.ⵠᐃⲆᐃ.ΔΔΔ();
            if (this.info & 16) {
                var f = ΔⲆ[985][cf.time];
            } else {
                f = ΔⲆ[210][cf.time];
            }
            var g = this.ⵠᐃⲆᐃ.Δᐃᐃ * -f.width;
            var a = -f.height * this.ⵠᐃⲆᐃ.Δᐃᐃ;
            Qc(ro, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ΔⲆ[986][cf.time];
            } else {
                f = ΔⲆ[211][cf.time];
            }
            ro.translate(0, f.height / 2);
            Qc(ro, f, c - f.width / 2, -f.height + d);
        }
        ro.restore();
    }
    function $u() {
        if ((this.info & 1) === 1) {
            this.ⲆⲆᐃⲆΔ = Math.min(this.ⲆⲆᐃⲆΔ + $w, 2.2);
        } else {
            this.ⲆⲆᐃⲆΔ = Math.max(this.ⲆⲆᐃⲆΔ - $w, 0);
            this.ⲆᐃΔᐃᐃⲆΔ += $w;
            if (this.ⲆᐃΔᐃᐃⲆΔ > 0.1) {
                this.ⲆᐃΔᐃᐃⲆΔ = 0;
                var a = {
                    x: this.x + Math.random() * 60 - 30,
                    y: this.y + Math.random() * 60 - 30,
                    a: 0,
                    r: Math.random() * 30 + 30
                };
                this.ⵠᐃⲆᐃ.push(a);
            }
        }
        for (var b = 0; this.ⵠᐃⲆᐃ.length > b; b++) {
            a = this.ⵠᐃⲆᐃ[b];
            ro.save();
            ro.translate(Ww.ᐃⲆΔ.x + a.x, Ww.ᐃⲆΔ.y + a.y);
            a.a = Math.min(1, 0 + $w / 2);
            var c = 0;
            if (c < 0.2) {
                c *= 5;
            } else {
                c = c > 0.8 ? (1 - c) * 5 : 1;
            }
            ro.globalAlpha = c * 0.8;
            Nt(ro, 0, 0, a.r);
            Kt(ro, Gr.ⵠᐃΔΔΔΔⲆ[cf.time]);
            ro.restore();
            if (0 === 1) {
                this.ⵠᐃⲆᐃ.splice(b, 1);
                b--;
            }
        }
    }
    function _u() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        var a = ⲆⵠΔᐃ.ⲆᐃⲆΔ(this, this.r);
        this.scale = a > 350 ? Math.min(this.scale + $w / 2, 1.8) : Math.max(this.scale - $w, 1);
        this.ᐃΔΔΔ.ΔΔΔ();
        this.rotate.ΔΔΔ();
        this.ΔΔᐃᐃ = a < 350 ? Math.max(0, this.ΔΔᐃᐃ - $w * 2.2) : Math.min(1, this.ΔΔᐃᐃ + $w * 2.2);
        b = ΔⲆ[1135][cf.time];
        ΔⵠΔ = -b.width * this.ᐃΔΔΔ.Δᐃᐃ * this.scale;
        ⵠⲆᐃ = this.ᐃΔΔΔ.Δᐃᐃ * -b.height * this.scale;
        ro.globalAlpha = 1 - this.ΔΔᐃᐃ;
        Qc(ro, b, -ΔⵠΔ / 4, -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
        b = ΔⲆ[1119][cf.time];
        ΔⵠΔ = this.ᐃΔΔΔ.Δᐃᐃ * -b.width * this.scale;
        ⵠⲆᐃ = this.scale * (-b.height * this.ᐃΔΔΔ.Δᐃᐃ);
        ro.globalAlpha = this.ΔΔᐃᐃ;
        Qc(ro, b, -ΔⵠΔ / 4, -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
        if (this.action & 2) {
            if (this.ᐃⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⲆⲆⲆ == Kn) {
                this.action -= 2;
            }
            ro.globalAlpha = (1 - this.ΔΔᐃᐃ) * (0.6 - this.ᐃⲆⲆ.Δᐃᐃ);
            var b = ΔⲆ[1136];
            ΔⵠΔ = -b.width * this.ᐃΔΔΔ.Δᐃᐃ * this.scale;
            ⵠⲆᐃ = this.scale * (-b.height * this.ᐃΔΔΔ.Δᐃᐃ);
            Qc(ro, b, -ΔⵠΔ / 4, -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
            ro.globalAlpha = this.ΔΔᐃᐃ * (0.6 - this.ᐃⲆⲆ.Δᐃᐃ);
            b = ΔⲆ[1128];
            ΔⵠΔ = this.scale * (-b.width * this.ᐃΔΔΔ.Δᐃᐃ);
            ⵠⲆᐃ = -b.height * this.ᐃΔΔΔ.Δᐃᐃ * this.scale;
            Qc(ro, b, -ΔⵠΔ / 4, -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
            ro.globalAlpha = 1;
        }
        b = ΔⲆ[1122][cf.time];
        ΔⵠΔ = this.scale * (this.ᐃΔΔΔ.Δᐃᐃ * -b.width);
        ⵠⲆᐃ = this.scale * (this.ᐃΔΔΔ.Δᐃᐃ * -b.height);
        ro.save();
        ro.translate(po * -40, po * 80);
        ro.rotate(this.rotate.Δᐃᐃ);
        ro.globalAlpha = this.ΔΔᐃᐃ;
        Qc(ro, b, -ΔⵠΔ * po / 4, -ⵠⲆᐃ * po / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
        if (this.action & 2) {
            ro.globalAlpha = this.ΔΔᐃᐃ * (0.6 - this.ᐃⲆⲆ.Δᐃᐃ);
            b = ΔⲆ[1129];
            Qc(ro, b, -ΔⵠΔ * po / 4, -ⵠⲆᐃ * po / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
            ro.globalAlpha = 1;
        }
        ro.restore();
        b = ΔⲆ[1125][cf.time];
        ro.save();
        ro.translate(po * 40, po * 80);
        ro.rotate(-this.rotate.Δᐃᐃ);
        ro.globalAlpha = this.ΔΔᐃᐃ;
        Qc(ro, b, po * -ΔⵠΔ / 4, po * -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
        if (this.action & 2) {
            ro.globalAlpha = (0.6 - this.ᐃⲆⲆ.Δᐃᐃ) * this.ΔΔᐃᐃ;
            b = ΔⲆ[1130];
            Qc(ro, b, po * -ΔⵠΔ / 4, po * -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
            ro.globalAlpha = 1;
        }
        ro.globalAlpha = 1;
        ro.restore();
        ro.restore();
    }
    function av() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        if (this.ᐃⲆⲆ.ΔΔΔ) {
            if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ == 0) {
                this.ᐃⲆⲆ.ΔΔΔ = false;
            }
            var b = $w * (1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * 600 * po;
            var c = Math.sin(this.ᐃⲆⲆ.angle - this.angle) * b;
            var d = b * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            ro.rotate(this.angle);
            this.ⵠᐃⲆᐃ.ΔΔΔ();
            if (this.info & 16) {
                var f = ΔⲆ[838][cf.time];
            } else {
                f = ΔⲆ[191][cf.time];
            }
            var g = -f.width * this.ⵠᐃⲆᐃ.Δᐃᐃ;
            var a = this.ⵠᐃⲆᐃ.Δᐃᐃ * -f.height;
            Qc(ro, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ΔⲆ[839][cf.time];
            } else {
                f = ΔⲆ[192][cf.time];
            }
            ro.translate(0, f.height / 2);
            Qc(ro, f, c - f.width / 2, -f.height + d);
        }
        ro.restore();
    }
    function bv(a, b) {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        ro.rotate(this.angle);
        this.ᐃΔΔΔ.ΔΔΔ();
        c = ΔⲆ[a][cf.time];
        ΔⵠΔ = -c.width * this.ᐃΔΔΔ.Δᐃᐃ;
        ⵠⲆᐃ = -c.height * this.ᐃΔΔΔ.Δᐃᐃ;
        Qc(ro, c, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
        if (this.action & 2) {
            if (this.ᐃⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⲆⲆⲆ == 0) {
                this.action -= 2;
            }
            ro.globalAlpha = 0.6 - this.ᐃⲆⲆ.Δᐃᐃ;
            var c = ΔⲆ[b];
            Qc(ro, c, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
            ro.globalAlpha = 1;
        }
        ro.restore();
    }
    function cv() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        if (this.ᐃⲆⲆ.ΔΔΔ) {
            if (this.ᐃⲆⲆ.ⵠΔⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⵠΔⲆⲆ.ⲆⲆⲆ == 0) {
                this.ᐃⲆⲆ.ΔΔΔ = false;
            }
            var b = po * ((1 - this.ᐃⲆⲆ.ⵠΔⲆⲆ.Δᐃᐃ) * $w * 600);
            var c = b * Math.sin(this.ᐃⲆⲆ.angle - this.angle);
            var d = b * Math.cos(this.ᐃⲆⲆ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            ro.rotate(this.angle);
            this.ⵠᐃⲆᐃ.ΔΔΔ();
            if (this.info & 16) {
                var f = ΔⲆ[812][cf.time];
            } else {
                f = ΔⲆ[188][cf.time];
            }
            var g = -f.width * this.ⵠᐃⲆᐃ.Δᐃᐃ;
            var a = this.ⵠᐃⲆᐃ.Δᐃᐃ * -f.height;
            Qc(ro, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = ΔⲆ[813][cf.time];
            } else {
                f = ΔⲆ[189][cf.time];
            }
            ro.translate(0, f.height / 2);
            Qc(ro, f, c - f.width / 2, -f.height + d);
        }
        ro.restore();
    }
    function dv(a) {
        if (a > 0) {
            var b = ΔⲆ[a][cf.time];
            switch (a) {
                case 58:
                    Cv(a, b, -b.width / 2 + po * 2, -b.height / 2 - po * 5);
                    break;
                case 10:
                    Cv(a, b, -b.width / 2, -b.height / 2 - po * 18);
                    break;
                case 11:
                    Cv(a, b, -b.width / 2, -b.height / 2 - po * 10);
                    break;
                case 23:
                    Cv(a, b, -b.width / 2, -b.height / 2 - po * 19);
                    break;
                case 24:
                    Nv(a, b, -b.width / 4, -b.height / 4 - po * 20);
                    break;
                case 25:
                    Cv(a, b, -b.width / 2 - po * 1, -b.height / 2 - po * 23);
                    break;
                case 26:
                    Cv(a, b, -b.width / 2, -b.height / 2 - po * 5);
                    break;
                case 27:
                    Cv(a, b, -b.width / 2, -b.height / 2 - po * 2);
                    break;
                case 43:
                    Cv(a, b, -b.width / 2 + po * 1.5, -b.height / 2 - po * 1);
                    break;
                case 44:
                case 20:
                case 21:
                case 22:
                case 80:
                case 81:
                case 82:
                case 60:
                case 90:
                case 88:
                case 87:
                    Nv(a, b, -b.width / 4, -b.height / 4 + po * 2);
                    break;
                case 41:
                case 42:
                    Cv(a, b, -b.width / 2 - po * 5, -b.height / 2 - po * 2);
                    break;
                case 40:
                    Cv(a, b, -b.width / 2, -b.height / 2 - po * 2);
                    break;
                case 85:
                    Cv(a, b, -b.width / 2, -b.height / 2 - po * 2);
                    break;
                case 48:
                    Cv(a, b, -b.width / 2, -b.height / 2 - po * 2);
                    break;
                case 47:
                    Cv(a, b, -b.width / 2 + po * 2, -b.height / 2);
                    break;
                case 59:
                    Cv(a, b, -b.width / 2, -b.height / 2 - po * 5);
                    break;
                case 77:
                case 78:
                case 79:
                    Cv(a, b, -b.width / 2 - po * 1, -b.height / 2);
                    break;
                case 83:
                    Cv(a, b, -b.width / 2, -b.height / 2 + po * 2);
                    break;
                case 84:
                case 86:
                    Cv(a, b, -b.width / 2, -b.height / 2 + po * 8);
                    break;
                case 61:
                    Cv(a, b, -b.width / 2, -b.height / 2 - po * 4);
            }
        }
    }
    function ev() {
        if (!this.ⲆᐃΔᐃᐃ && this.ⲆⵠᐃΔᐃ !== 0) {
            if (this.r.x != this.x || this.r.y != this.y) {
                var a = (ⲆⵠΔᐃ.ᐃΔΔᐃᐃⲆΔ(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (Math.PI * 2);
                this.ΔΔⵠⲆⲆ = ⲆⵠΔᐃ.ⵠⵠᐃⲆΔⵠⵠ(a, this.ΔΔⵠⲆⲆ);
                this.ΔΔⵠⲆⲆ = ⲆⵠΔᐃ.ΔⲆΔⲆᐃΔⲆ(this.ΔΔⵠⲆⲆ, a, 0.018);
            }
            ro.save();
            ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
            ro.rotate(this.ΔΔⵠⲆⲆ);
            if (this.ⲆⵠᐃΔᐃ === 223) {
                if (this.ⵠᐃⲆᐃⲆ > 50 || this.ⵠⲆⲆᐃⵠ > 0) {
                    if (this.ⵠᐃⲆᐃⲆ > 50) {
                        this.ⵠⲆⲆᐃⵠ = Math.min(1, this.ⵠⲆⲆᐃⵠ + $w);
                    } else {
                        this.ⵠⲆⲆᐃⵠ = Math.max(0, this.ⵠⲆⲆᐃⵠ - $w);
                    }
                    ro.globalAlpha = this.ⵠⲆⲆᐃⵠ;
                    var b = ΔⲆ[225][cf.time];
                    Nv(225, b, -b.width / 4, -b.height / 4);
                    ro.globalAlpha = 1;
                }
                b = ΔⲆ[223][cf.time];
                Nv(223, b, -b.width / 4, -b.height / 4);
            } else if (this.ⲆⵠᐃΔᐃ === 229) {
                this.ⵠⲆⵠᐃΔ = ⲆⵠΔᐃ.ΔⲆΔⲆᐃΔⲆ(this.ⵠⲆⵠᐃΔ, this.ⵠᐃⲆᐃⲆ, 0.018);
                this.ⵠⲆⵠΔᐃΔⲆ.ΔΔΔ();
                if (this.ⵠᐃⲆᐃⲆ > 85) {
                    this.ⵠⲆⲆᐃⵠ = Math.min(1, this.ⵠⲆⲆᐃⵠ + $w / 4);
                } else {
                    this.ⵠⲆⲆᐃⵠ = Math.max(0.1, this.ⵠⲆⲆᐃⵠ - $w);
                }
                b = ΔⲆ[1100][cf.time];
                Nv(1100, b, -b.width / 4, -b.height / 4);
                b = ΔⲆ[1103][cf.time];
                ΔⵠΔ = -b.width;
                ⵠⲆᐃ = -b.height;
                ro.save();
                ro.translate(po * -20, po * -20);
                ro.rotate(this.ⵠⲆⲆᐃⵠ * this.ⵠⲆⵠΔᐃΔⲆ.Δᐃᐃ);
                Qc(ro, b, -ΔⵠΔ / 4, -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
                ro.restore();
                b = ΔⲆ[1106][cf.time];
                ro.save();
                ro.translate(po * 20, po * -20);
                ro.rotate(this.ⵠⲆⲆᐃⵠ * -this.ⵠⲆⵠΔᐃΔⲆ.Δᐃᐃ);
                Qc(ro, b, -ΔⵠΔ / 4, -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
                ro.restore();
            } else if (this.ⲆⵠᐃΔᐃ === 228) {
                this.ⵠⲆⵠᐃΔ = ⲆⵠΔᐃ.ΔⲆΔⲆᐃΔⲆ(this.ⵠⲆⵠᐃΔ, this.ⵠᐃⲆᐃⲆ, 0.018);
                this.ⵠⲆⵠΔᐃΔⲆ.ΔΔΔ();
                if (this.ⵠᐃⲆᐃⲆ > 85) {
                    this.ⵠⲆⲆᐃⵠ = Math.min(1, this.ⵠⲆⲆᐃⵠ + $w / 4);
                } else {
                    this.ⵠⲆⲆᐃⵠ = Math.max(0.1, this.ⵠⲆⲆᐃⵠ - $w);
                }
                b = ΔⲆ[1085][cf.time];
                Nv(1085, b, -b.width / 4, -b.height / 4);
                b = ΔⲆ[1088][cf.time];
                ΔⵠΔ = -b.width;
                ⵠⲆᐃ = -b.height;
                ro.save();
                ro.translate(po * -40, po * -45);
                ro.rotate(this.ⵠⲆⲆᐃⵠ * this.ⵠⲆⵠΔᐃΔⲆ.Δᐃᐃ);
                Qc(ro, b, -ΔⵠΔ / 4, -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
                ro.restore();
                b = ΔⲆ[1091][cf.time];
                ro.save();
                ro.translate(po * 40, po * -45);
                ro.rotate(-this.ⵠⲆⵠΔᐃΔⲆ.Δᐃᐃ * this.ⵠⲆⲆᐃⵠ);
                Qc(ro, b, -ΔⵠΔ / 4, -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
                ro.restore();
            } else if (this.ⲆⵠᐃΔᐃ === 227) {
                this.ⵠⲆⵠᐃΔ = ⲆⵠΔᐃ.ΔⲆΔⲆᐃΔⲆ(this.ⵠⲆⵠᐃΔ, this.ⵠᐃⲆᐃⲆ, 0.018);
                this.ⵠⲆⵠΔᐃΔⲆ.ΔΔΔ();
                if (this.ⵠᐃⲆᐃⲆ > 85) {
                    this.ⵠⲆⲆᐃⵠ = Math.min(1, this.ⵠⲆⲆᐃⵠ + $w / 4);
                } else {
                    this.ⵠⲆⲆᐃⵠ = Math.max(0.1, this.ⵠⲆⲆᐃⵠ - $w);
                }
                b = ΔⲆ[1070][cf.time];
                Nv(1070, b, -b.width / 4, -b.height / 4);
                b = ΔⲆ[1073][cf.time];
                ΔⵠΔ = -b.width;
                ⵠⲆᐃ = -b.height;
                ro.save();
                ro.translate(po * -40, po * -45);
                ro.rotate(this.ⵠⲆⲆᐃⵠ * this.ⵠⲆⵠΔᐃΔⲆ.Δᐃᐃ);
                Qc(ro, b, -ΔⵠΔ / 4, -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
                ro.restore();
                b = ΔⲆ[1076][cf.time];
                ro.save();
                ro.translate(po * 40, po * -45);
                ro.rotate(-this.ⵠⲆⵠΔᐃΔⲆ.Δᐃᐃ * this.ⵠⲆⲆᐃⵠ);
                Qc(ro, b, -ΔⵠΔ / 4, -ⵠⲆᐃ / 4, ΔⵠΔ / 2, ⵠⲆᐃ / 2);
                ro.restore();
            } else if (this.ⲆⵠᐃΔᐃ === 91) {
                this.ⵠⲆⵠᐃΔ = ⲆⵠΔᐃ.ΔⲆΔⲆᐃΔⲆ(this.ⵠⲆⵠᐃΔ, this.ⵠᐃⲆᐃⲆ, 0.018);
                b = ΔⲆ[91][cf.time];
                Nv(91, b, -b.width / 4, -b.height / 4);
            } else if (this.ⲆⵠᐃΔᐃ === 230) {
                this.ⵠⲆⵠᐃΔ = ⲆⵠΔᐃ.ΔⲆΔⲆᐃΔⲆ(this.ⵠⲆⵠᐃΔ, this.ⵠᐃⲆᐃⲆ, 0.018);
                b = ΔⲆ[236][cf.time];
                Nv(236, b, -b.width / 4, -b.height / 4);
            } else if (this.ⲆⵠᐃΔᐃ === 224) {
                b = ΔⲆ[224][cf.time];
                Nv(224, b, -b.width / 4, -b.height / 4);
            } else if (this.ⲆⵠᐃΔᐃ === 239) {
                b = ΔⲆ[1221][cf.time];
                if (this.ⵠᐃⲆᐃⲆ > 85) {
                    this.ⵠⲆⲆᐃⵠ = Math.min(1, this.ⵠⲆⲆᐃⵠ + $w / 4);
                } else {
                    this.ⵠⲆⲆᐃⵠ = Math.max(0, this.ⵠⲆⲆᐃⵠ - $w);
                }
                this.ⵠᐃⵠⵠⲆ += $w * 60;
                if (this.ⵠᐃⵠⵠⲆ > 60) {
                    this.ⵠᐃⵠⵠⲆ -= 60;
                }
                var c = ((this.ⵠᐃⵠⵠⲆ < 30 ? this.ⵠᐃⵠⵠⲆ / 30 : 1 - (this.ⵠᐃⵠⵠⲆ - 30) / 30) * 12 - 6) * this.ⵠⲆⲆᐃⵠ;
                Nv(1221, b, -b.width / 4, -b.height / 4 + c);
            } else if (this.ⲆⵠᐃΔᐃ === 225) {
                b = ΔⲆ[1043][cf.time];
                if (this.ⵠᐃⲆᐃⲆ > 85) {
                    this.ⵠⲆⲆᐃⵠ = Math.min(1, this.ⵠⲆⲆᐃⵠ + $w / 4);
                } else {
                    this.ⵠⲆⲆᐃⵠ = Math.max(0, this.ⵠⲆⲆᐃⵠ - $w);
                }
                this.ⵠᐃⵠⵠⲆ += $w * 60;
                if (this.ⵠᐃⵠⵠⲆ > 60) {
                    this.ⵠᐃⵠⵠⲆ -= 60;
                }
                c = this.ⵠⲆⲆᐃⵠ * (-6 + (this.ⵠᐃⵠⵠⲆ < 30 ? this.ⵠᐃⵠⵠⲆ / 30 : 1 - (this.ⵠᐃⵠⵠⲆ - 30) / 30) * 12);
                Nv(1043, b, -b.width / 4, -b.height / 4 + c);
            } else if (this.ⲆⵠᐃΔᐃ === 226) {
                var d = Math.PI / 2;
                var e = Math.PI / 4;
                b = ΔⲆ[1055][cf.time];
                if (this.ⵠᐃⲆᐃⲆ > 85) {
                    this.ⵠⲆⲆᐃⵠ = Math.min(1, this.ⵠⲆⲆᐃⵠ + $w / 4);
                } else {
                    this.ⵠⲆⲆᐃⵠ = Math.max(0, this.ⵠⲆⲆᐃⵠ - $w);
                }
                this.ⵠᐃⵠⵠⲆ += $w * 60;
                if (this.ⵠᐃⵠⵠⲆ > 60) {
                    this.ⵠᐃⵠⵠⲆ -= 60;
                }
                c = this.ⵠⲆⲆᐃⵠ * (-6 + (this.ⵠᐃⵠⵠⲆ < 30 ? this.ⵠᐃⵠⵠⲆ / 30 : 1 - (this.ⵠᐃⵠⵠⲆ - 30) / 30) * 12);
                Nv(1055, b, -b.width / 4 + c, -b.height / 4);
                ro.restore();
                ro.save();
                ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
                ro.rotate(Math.PI + this.ΔΔⵠⲆⲆ + e);
                ro.translate(120, c);
                ro.rotate(d);
                b = ΔⲆ[1060][cf.time];
                ΔⵠΔ = -b.width;
                ⵠⲆᐃ = -b.height;
                Qc(ro, b, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
                ro.restore();
                ro.save();
                ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
                ro.rotate(Math.PI + this.ΔΔⵠⲆⲆ + d + e);
                ro.translate(120, c);
                ro.rotate(d);
                b = ΔⲆ[1063][cf.time];
                ΔⵠΔ = -b.width;
                ⵠⲆᐃ = -b.height;
                Qc(ro, b, -ΔⵠΔ / 2, -ⵠⲆᐃ / 2, ΔⵠΔ, ⵠⲆᐃ);
            }
            ro.restore();
        }
    }
    function fv() {
        if (this.message !== undefined) {
            var a = Ww.ᐃΔⵠΔ.ᐃΔΔᐃΔ.length > 0 ? -95 : 0;
            Qc(ro, this.message, 0, gq - this.message.height + a);
        }
    }
    function gv() {
        var c = 0;
        switch (this.right) {
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
                c = 1;
        }
        if (this.ⲆᐃΔᐃᐃ) {
            for (var d = 0; d < this.bubbles.length; d++) {
                var f = this.bubbles[d];
                if (f.ᐃⵠⲆⲆᐃ > 0.5) {
                    var j = 1 - (f.ᐃⵠⲆⲆᐃ - 0.5) * 2;
                } else {
                    j = f.ᐃⵠⲆⲆᐃ * 2;
                }
                ro.globalAlpha = j;
                var k = ΔⲆ[540][cf.time][f.id];
                Qc(ro, k, Ww.ᐃⲆΔ.x + f.x - k.width / 2, Ww.ᐃⲆΔ.y + f.y - k.height / 2);
                ro.globalAlpha = 1;
            }
        } else {
            ro.save();
            ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
            cf.ΔⵠΔΔⲆΔⲆᐃᐃ(this);
            if (this.action & 16) {
                (function (a) {
                    if (a.right >= 0) {
                        switch (a.right) {
                            case 49:
                                ro.save();
                                var b = a.attack.Δᐃᐃ * -3 / Math.PI;
                                if (a.attack.ⲆⲆⲆ) {
                                    var c = -Math.PI / 3 - (Math.PI / 3 + a.attack.Δᐃᐃ) / 3;
                                } else {
                                    c = a.attack.Δᐃᐃ;
                                }
                                ro.rotate(a.angle - Math.PI / 2 + c);
                                ro.globalAlpha = b / 1.2;
                                Nt(ro, po * -40, po * 90, po * 5);
                                Kt(ro, "#0B6A84");
                                ro.globalAlpha = b / 1.2;
                                Nt(ro, po * -52, po * 100, po * 8);
                                Kt(ro, "#0B6A84");
                                ro.globalAlpha = b / 1.2;
                                Nt(ro, po * -30, po * 95, po * 4);
                                Kt(ro, "#0B6A84");
                                ro.globalAlpha = 1;
                                ro.restore();
                                break;
                            case 46:
                            case 50:
                            case 51:
                            case 52:
                                if (a.ⲆΔΔⲆᐃΔᐃ === 1) {
                                    break;
                                }
                                if (a.ᐃΔΔΔⲆ > 0) {
                                    var d = Gr.ⲆΔⵠⵠΔΔᐃ[cf.time];
                                } else {
                                    d = a.ᐃΔΔⲆⵠΔⵠ > 0 || a.ⲆᐃⲆⵠΔ > 0 ? Gr.ᐃⵠᐃⵠⲆⵠⵠ[cf.time] : Gr.ⲆᐃⵠⲆⵠᐃⲆ[cf.time];
                                }
                                b = a.attack.Δᐃᐃ * -3 / Math.PI;
                                c = a.attack.ⲆⲆⲆ ? Math.max(0.5 - b / 2 + 0.5, 0) : Math.max(b / 2, 0);
                                if (c === 0) {
                                    a.ⵠᐃΔⲆⵠⵠⲆ = a.angle;
                                }
                                ro.save();
                                ro.rotate(a.ⵠᐃΔⲆⵠⵠⲆ - Math.PI / 2);
                                ro.globalAlpha = b;
                                var e = po * 25 + c * 25;
                                Nt(ro, e, po * 80, po * 15);
                                Kt(ro, d);
                                Nt(ro, -e, po * 80, po * 15);
                                Kt(ro, d);
                                ro.globalAlpha = 1;
                                ro.restore();
                        }
                    }
                })(this);
            }
            ro.save();
            ro.rotate(this.angle - Math.PI / 2);
            if (!(this.action & 16)) {
                if (this.action & 64 || this.ⲆⵠᐃΔᐃ !== 0) {
                    this.ⲆΔⵠⵠᐃⲆΔ.ΔΔΔ();
                } else if (this.action & 32) {
                    this.ⲆⵠⲆΔⵠⵠⲆ.ΔΔΔ();
                }
            }
            var m;
            var p = this.ⲆΔⵠⵠᐃⲆΔ.Δᐃᐃ;
            var q = this.ⲆⵠⲆΔⵠⵠⲆ.Δᐃᐃ;
            if (this.ᐃⵠⲆⵠⲆ === 85) {
                k = ΔⲆ[793][cf.time];
                m = 793;
            } else if (this.ᐃⵠⲆⵠⲆ === 20) {
                k = ΔⲆ[920][cf.time];
                m = 920;
            } else if (this.ᐃⵠⲆⵠⲆ === 21) {
                k = ΔⲆ[924][cf.time];
                m = 924;
            } else if (this.ᐃⵠⲆⵠⲆ === 22) {
                k = ΔⲆ[928][cf.time];
                m = 928;
            } else if (this.ⲆᐃⵠᐃᐃⲆⲆ) {
                k = ΔⲆ[822][cf.time];
                m = 822;
            } else {
                k = ΔⲆ[7][this.ᐃΔΔⵠ][cf.time];
                m = 7;
            }
            ⵠΔΔⵠ = ΔⲆ[286][cf.time];
            var w = k;
            var h = m;
            if (this.action & 16) {
                if (this.attack.ΔΔΔ() && Ig == this.attack.ⲆⲆⲆ) {
                    this.ᐃΔⵠⵠᐃ = !this.ᐃΔⵠⵠᐃ;
                    this.action -= 16;
                    if (this.ⲆⵠᐃⲆ == Ww.ⲆⵠᐃⲆ) {
                        Ww.control.ⲆⵠⲆⵠ = 0;
                    }
                }
                if (this.right >= 0) {
                    this.ᐃΔⵠⵠᐃ = oq;
                }
                var l = this.ᐃΔⵠⵠᐃ ? this.attack.Δᐃᐃ : -this.attack.Δᐃᐃ / 3;
                var x = this.ᐃΔⵠⵠᐃ ? this.attack.Δᐃᐃ / 3 : -this.attack.Δᐃᐃ;
                if (this.ⲆᐃⵠᐃᐃⲆⲆ) {
                    ro.save();
                    ro.rotate(l);
                    Cv(m, k, -k.width / 2 - (66 + p) * po, -k.height / 2 + (5 + q) * po);
                    ro.restore();
                    ro.save();
                    ro.rotate(x);
                    Cv(m, k, -k.width / 2 + (66 + p) * po, -k.height / 2 + (5 + q) * po);
                    ro.restore();
                } else if (c === 0) {
                    if (this.right === 64) {
                        l = -ⲆⵠΔᐃ.ⵠᐃⲆᐃΔⵠΔ(-l);
                    }
                    ro.save();
                    ro.rotate(l);
                    Cv(286, ⵠΔΔⵠ, -ⵠΔΔⵠ.width / 2 - (49 + p) * po, -ⵠΔΔⵠ.height / 2 + po * (15 + q));
                    if (this.right === 28) {
                        var u = ΔⲆ[this.right][this.ΔᐃΔΔΔ][cf.time];
                        Iv(this.right, this.ΔᐃΔΔΔ, u, -u.width / 4 - po * (62 + p), -u.height / 4 + (q + 18) * po);
                    } else {
                        Wp(this.right, p, q);
                    }
                    if (m >= 920) {
                        Nv(m, k, -k.width / 4 - (49 + p) * po, -k.height / 4 + po * (11 + q));
                    } else if (m !== 793) {
                        Iv(m, this.ᐃΔΔⵠ, k, -k.width / 4 - (49 + p) * po, -k.height / 4 + po * (11 + q));
                    } else {
                        Cv(m, k, -k.width / 2 - po * (49 + p), -k.height / 2 + po * (11 + q));
                    }
                    ro.restore();
                    ro.save();
                    ro.rotate(x);
                    Cv(286, ⵠΔΔⵠ, -ⵠΔΔⵠ.width / 2 + (49 + p) * po, -ⵠΔΔⵠ.height / 2 + (15 + q) * po);
                    if (m >= 920) {
                        Nv(m, k, -k.width / 4 + po * (49 + p), -k.height / 4 + (11 + q) * po);
                    } else if (m !== 793) {
                        Iv(m, this.ᐃΔΔⵠ, k, -k.width / 4 + (49 + p) * po, -k.height / 4 + po * (11 + q));
                    } else {
                        Cv(m, k, -k.width / 2 + (49 + p) * po, -k.height / 2 + po * (11 + q));
                    }
                    ro.restore();
                }
            } else if (this.ⲆᐃⵠᐃᐃⲆⲆ) {
                Cv(m, k, -k.width / 2 - (66 + p) * po, -k.height / 2 + po * (5 + q));
                Cv(m, k, -k.width / 2 + (66 + p) * po, -k.height / 2 + (5 + q) * po);
            } else if (c === 0) {
                Cv(286, ⵠΔΔⵠ, -ⵠΔΔⵠ.width / 2 - po * (49 + p), -ⵠΔΔⵠ.height / 2 + (15 + q) * po);
                if (this.right === 28) {
                    u = ΔⲆ[this.right][this.ΔᐃΔΔΔ][cf.time];
                    Iv(this.right, this.ΔᐃΔΔΔ, u, -u.width / 4 - (62 + p) * po, -u.height / 4 + po * (q + 18));
                } else {
                    Wp(this.right, p, q);
                }
                if (m >= 920) {
                    Nv(m, k, -k.width / 4 - (49 + p) * po, -k.height / 4 + (11 + q) * po);
                } else if (m !== 793) {
                    Iv(m, this.ᐃΔΔⵠ, k, -k.width / 4 - (49 + p) * po, -k.height / 4 + (11 + q) * po);
                } else {
                    Cv(m, k, -k.width / 2 - (49 + p) * po, -k.height / 2 + po * (11 + q));
                }
                Cv(286, ⵠΔΔⵠ, -ⵠΔΔⵠ.width / 2 + po * (49 + p), -ⵠΔΔⵠ.height / 2 + (15 + q) * po);
                if (m >= 920) {
                    Nv(m, k, -k.width / 4 + po * (49 + p), -k.height / 4 + po * (11 + q));
                } else if (m !== 793) {
                    Iv(m, this.ᐃΔΔⵠ, k, -k.width / 4 + po * (49 + p), -k.height / 4 + (11 + q) * po);
                } else {
                    Cv(m, k, -k.width / 2 + po * (49 + p), -k.height / 2 + (11 + q) * po);
                }
            }
            if (this.ΔᐃⲆⵠⲆ && this.ᐃⵠⲆⵠⲆ < 1) {
                k = ΔⲆ[29][this.ⲆᐃᐃⲆⲆⲆⵠ][cf.time];
                Iv(29, this.ⲆᐃᐃⲆⲆⲆⵠ, k, -k.width / 4, -k.height / 4 - po * 39);
            }
            if (this.ⲆᐃⵠᐃᐃⲆⲆ) {
                k = ΔⲆ[820][cf.time];
                Cv(820, k, -k.width / 2, -k.height / 2);
                this.ᐃⵠᐃΔᐃⲆᐃ.ΔΔΔ();
                k = ΔⲆ[821][cf.time];
                Cv(821, k, -k.width / 2, -k.height / 2 + this.ᐃⵠᐃΔᐃⲆᐃ.Δᐃᐃ);
            } else {
                k = ΔⲆ[255][this.ᐃΔΔⵠ][cf.time];
                if (this.ᐃⵠⲆⵠⲆ !== 85 && (Iv(255, this.ᐃΔΔⵠ, k, -k.width / 4, -k.height / 4), this.ⵠΔⵠⵠΔ > 0)) {
                    k = ΔⲆ[796][this.ⵠΔⵠⵠΔ][cf.time];
                    Iv(796, this.ⵠΔⵠⵠΔ, k, -k.width / 4, -k.height / 4);
                }
            }
            if (this.action & 128) {
                if (this.ᐃⵠᐃΔΔ.ΔΔΔ() && this.ᐃⵠᐃΔΔ.ⲆⲆⲆ == 0) {
                    this.action -= 128;
                }
                ro.globalAlpha = 0.6 - this.ᐃⵠᐃΔΔ.Δᐃᐃ;
                if (this.ⲆᐃⵠᐃᐃⲆⲆ) {
                    k = ΔⲆ[825];
                    Qc(ro, k, -k.width / 2, -k.height / 2);
                } else {
                    k = iv(this.ᐃΔΔⵠ, ΔⲆ[255][this.ᐃΔΔⵠ][0], ⲆⲆⲆΔⵠΔⲆΔᐃ);
                    Qc(ro, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
                }
                ro.globalAlpha = 1;
            }
            if (this.action & 256) {
                if (this.ᐃⲆⲆⵠⲆΔΔ.ΔΔΔ() && this.ᐃⲆⲆⵠⲆΔΔ.ⲆⲆⲆ == 0) {
                    this.action -= 256;
                }
                ro.globalAlpha = 0.6 - this.ᐃⲆⲆⵠⲆΔΔ.Δᐃᐃ;
                k = ΔⲆ[266];
                Qc(ro, k, -k.width / 2, -k.height / 2);
                ro.globalAlpha = 1;
            }
            if (this.action & 2) {
                if (this.ᐃⲆⲆ.ΔΔΔ() && this.ᐃⲆⲆ.ⲆⲆⲆ == Eh) {
                    this.action -= 2;
                }
                ro.globalAlpha = 0.6 - this.ᐃⲆⲆ.Δᐃᐃ;
                if (this.ⲆᐃⵠᐃᐃⲆⲆ) {
                    k = ΔⲆ[823];
                    Qc(ro, k, -k.width / 2, -k.height / 2);
                } else {
                    k = iv(this.ᐃΔΔⵠ, ΔⲆ[255][this.ᐃΔΔⵠ][0], ⵠⲆᐃⲆᐃΔᐃⵠᐃ);
                    Qc(ro, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
                }
                ro.globalAlpha = 1;
            }
            if (this.action & 4) {
                if (this.freeze.ΔΔΔ() && this.freeze.ⲆⲆⲆ == Yh) {
                    this.action -= 4;
                }
                ro.globalAlpha = 0.6 - this.freeze.Δᐃᐃ;
                k = iv(this.ᐃΔΔⵠ, ΔⲆ[255][this.ᐃΔΔⵠ][0], ΔΔⲆᐃⵠⵠⵠᐃⵠ);
                Qc(ro, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
                ro.globalAlpha = 1;
            }
            if (this.action & 8) {
                if (this.ΔⵠⵠΔΔⵠⲆ.ΔΔΔ() && dq == this.ΔⵠⵠΔΔⵠⲆ.ⲆⲆⲆ) {
                    this.action -= 8;
                }
                ro.globalAlpha = 0.6 - this.ΔⵠⵠΔΔⵠⲆ.Δᐃᐃ;
                if (this.ⲆᐃⵠᐃᐃⲆⲆ) {
                    k = ΔⲆ[824];
                    Qc(ro, k, -k.width / 2, -k.height / 2);
                } else {
                    k = iv(this.ᐃΔΔⵠ, ΔⲆ[255][this.ᐃΔΔⵠ][0], ⵠⲆᐃΔⲆᐃᐃⵠⲆ);
                    Qc(ro, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
                }
                ro.globalAlpha = 1;
            }
            dv(this.ᐃⵠⲆⵠⲆ);
            if (c === 1) {
                if (this.action & 16) {
                    p += this.attack.Δᐃᐃ * 15;
                }
                Cv(286, ⵠΔΔⵠ, -ⵠΔΔⵠ.width / 2 - po * 26, -ⵠΔΔⵠ.height / 2 + po * (31 + q + p));
                if (h >= 920) {
                    Nv(h, w, -w.width / 4 - po * 26, -w.height / 4 + po * (27 + q + p));
                } else if (h !== 793) {
                    Iv(h, this.ᐃΔΔⵠ, w, -w.width / 4 - po * 26, -w.height / 4 + (27 + q + p) * po);
                } else {
                    Cv(h, w, -w.width / 2 - po * 26, -w.height / 2 + po * (27 + q + p));
                }
                Cv(286, ⵠΔΔⵠ, -ⵠΔΔⵠ.width / 2 + po * 26, -ⵠΔΔⵠ.height / 2 + (31 + q + p) * po);
                if (h >= 920) {
                    Nv(h, w, -w.width / 4 + po * 26, -w.height / 4 + po * (27 + q + p));
                } else if (h !== 793) {
                    Iv(h, this.ᐃΔΔⵠ, w, -w.width / 4 + po * 26, -w.height / 4 + (27 + q + p) * po);
                } else {
                    Cv(h, w, -w.width / 2 + po * 26, -w.height / 2 + (27 + q + p) * po);
                }
                Sp(this.right, 0, q + p);
            }
            ro.restore();
            if (this.ᐃⵠⲆⵠⲆ !== 83 && this.ᐃⵠⲆⵠⲆ !== 85) {
                if (this.ᐃΔΔΔⲆ > 0) {
                    this.ⵠΔⵠΔ.ⲆᐃⲆΔⵠᐃΔ ||= Yd(po, this.ⵠΔⵠΔ.ⲆⵠΔΔⲆ, 20, "#187484", "#000", 2, null, null, po * 300);
                    k = this.ⵠΔⵠΔ.ⲆᐃⲆΔⵠᐃΔ;
                } else {
                    if (!this.ⵠΔⵠΔ.label) {
                        this.ⵠΔⵠΔ.label = Yd(po, this.ⵠΔⵠΔ.ⲆⵠΔΔⲆ, 20, "#FFF", "#000", 2, null, null, po * 300);
                    }
                    k = this.ⵠΔⵠΔ.label;
                }
                if (cf.ᐃΔᐃ == 1) {
                    ro.globalAlpha = 0.5;
                }
                p = Math.floor(-k.width / 2);
                q = Math.floor(-k.height / 2 - po * 70);
                Qc(ro, k, p, q);
                if (this.ⵠΔⵠΔ.level > 0) {
                    var y = p + k.width + 5;
                    k = ΔⲆ[885];
                    if (ⵠⲆⵠⵠΔΔⵠ[this.ⵠΔⵠΔ.level] === undefined) {
                        ⵠⲆⵠⵠΔΔⵠ[this.ⵠΔⵠΔ.level] = Yd(po, "[" + this.ⵠΔⵠΔ.level + "]", 20, "#F9E8A2", "#000", 2, null, null, po * 50);
                    }
                    Qc(ro, ⵠⲆⵠⵠΔΔⵠ[this.ⵠΔⵠΔ.level], y, q);
                }
                ro.globalAlpha = 1;
            } else {
                q = Math.floor(po * -70);
                p = Math.floor(ΔⲆ[558].width / 1.5);
            }
            if (Ww.ⵠΔᐃⵠΔΔΔ(this.ⲆⲆΔⲆ)) {
                if (Ww.ᐃᐃⲆᐃⲆ[0] == this.ⲆⲆΔⲆ) {
                    k = ΔⲆ[559];
                } else {
                    k = ΔⲆ[558];
                }
                Qc(ro, k, p - k.width - 5, q - 6);
            }
            ro.restore();
        }
    }
    function hv() {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + this.x, Ww.ᐃⲆΔ.y + this.y);
        if (this.text.length > 0) {
            for (var a = 0; this.text.length > a && a < 2; a++) {
                if (!this.label[a]) {
                    this.label[a] = rb(po, this.text[a]);
                    this.ⲆⲆⲆᐃΔᐃⵠ[a] = 0;
                    this.ᐃΔⵠᐃⲆⵠⲆ[a] = 0;
                }
                if (a === 1) {
                    this.ᐃΔⵠᐃⲆⵠⲆ[0] = ⲆⵠΔᐃ.ⲆᐃⵠᐃΔ(this.ᐃⲆᐃⲆΔᐃᐃ) * 30;
                }
            }
            this.ⲆⲆⲆᐃΔᐃⵠ[0] += $w;
            if (this.text.length > 1) {
                this.ᐃⲆᐃⲆΔᐃᐃ = Math.min(this.ᐃⲆᐃⲆΔᐃᐃ + $w, 1);
                if (this.ⲆⲆⲆᐃΔᐃⵠ[0] > 1 && this.ᐃⲆᐃⲆΔᐃᐃ > 0.5) {
                    this.ⲆⲆⲆᐃΔᐃⵠ[1] += $w;
                }
            }
            for (a = 0; this.text.length > a && a < 2; a++) {
                var b = this.ⲆⲆⲆᐃΔᐃⵠ[a];
                if (b > 0) {
                    ro.globalAlpha = b < 0.25 ? b * 4 : b > 3.75 ? Math.max((4 - b) * 4, 0) : 1;
                    Qc(ro, this.label[a], -this.label[a].width / 2, -this.ᐃΔⵠᐃⲆⵠⲆ[a] + -this.label[a].height / 2 - po * 110);
                }
            }
            if (this.ⲆⲆⲆᐃΔᐃⵠ[0] > 4) {
                this.ⲆⲆⲆᐃΔᐃⵠ.shift();
                this.text.shift();
                this.ᐃΔⵠᐃⲆⵠⲆ.shift();
                this.label.shift();
                this.ᐃⲆᐃⲆΔᐃᐃ = 0;
            }
        }
        ro.restore();
    }
    function iv(b, c, d) {
        if (c.ⲆⲆⲆⵠᐃΔⲆ() !== 1) {
            return c;
        }
        var e = ΔΔⵠⲆᐃⲆᐃ[d][b];
        if (Mq === e) {
            var f = (e = document.createElement("canvas")).getContext("2d");
            var g = c.width;
            var a = c.height;
            e.width = g;
            e.height = a;
            f.drawImage(c, 0, 0);
            f.globalCompositeOperation = "source-in";
            f.fillStyle = ΔΔⵠᐃᐃⲆᐃᐃᐃ[d];
            f.fillRect(0, 0, g, a);
            ΔΔⵠⲆᐃⲆᐃ[d][b] = e;
        }
        return e;
    }
    function jv() {
        if (this.enabled && this.ᐃⵠⵠⵠⲆ >= 0) {
            var a = new Date().getTime() - this.ᐃⵠⵠⵠⲆ;
            var b = a % 1000 / 1000;
            if (b > 0.5) {
                b = 1 - (b - 0.5) * 2;
            } else {
                b *= 2;
            }
            if ((a = Math.floor(a / 1000)) < 60) {
                a = 60 - a;
                if (!this.label) {
                    this.label = Yd(po, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
                }
                if (this.now != a || !this.ⵠⲆⵠΔΔⲆⲆ) {
                    this.now = a;
                    this.ⵠⲆⵠΔΔⲆⲆ = Yd(po, "" + a, 40, "#660000", null, null, null, null, null, "#000", 10);
                }
                Qc(ro, this.label, (so - this.label.width) / 2, po * 100);
                ro.globalAlpha = b;
                Qc(ro, this.ⵠⲆⵠΔΔⲆⲆ, (so - this.label.width) / 2 - this.ⵠⲆⵠΔΔⲆⲆ.width + po * 15, po * 100);
                ro.globalAlpha = 1;
            }
        }
    }
    function kv(a, b) {
        if (this.text) {
            if (this.timeout.ⲆⲆⲆ) {
                ro.globalAlpha = 1 - this.timeout.Δᐃᐃ;
            } else {
                ro.globalAlpha = 1;
            }
            if (!this.label) {
                this.label = Yd(po, this.text, 40, a, null, null, null, null, null, b, 10);
            }
            Qc(ro, this.label, (so - this.label.width) / 2, po * 50);
            ro.globalAlpha = 1;
            if (this.timeout.ΔΔΔ() && this.timeout.ⲆⲆⲆ == X) {
                this.text = this.list.shift();
                this.label = null;
            }
        }
    }
    ⵠⲆᐃⲆᐃΔᐃⵠᐃ = 0;
    ⲆⲆⲆΔⵠΔⲆΔᐃ = 1;
    ΔΔⲆᐃⵠⵠⵠᐃⵠ = 2;
    ⵠⲆᐃΔⲆᐃᐃⵠⲆ = 3;
    ⲆΔᐃᐃᐃⵠΔⵠᐃ = 4;
    ΔΔⵠⲆᐃⲆᐃ = [[], [], [], [], []];
    ΔΔⵠᐃᐃⲆᐃᐃᐃ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
    var lv = 0;
    function mv(j, e, i, k, n, o, a, q) {
        if (Yl === q) {
            q = 0;
        }
        for (var r = a; q <= r; r--) {
            for (var t = j; e >= t; t++) {
                for (var w = i; k >= w; w++) {
                    var x = Uw.ⲆⵠⵠⲆ[t][w];
                    if (x && x[o]) {
                        var y = x[o][r];
                        if (y !== undefined) {
                            for (var z = 0; y.length > z; z++) {
                                var A = y[z];
                                var B = ΔⲆ[n][cf.time][r];
                                var D = (lv + (t + w) * 3) % 60;
                                var E = D < 30 ? D / 30 : 1 - (D - 30) / 30;
                                var F = -B.width * (1 + E * 0.9 / 30);
                                var G = (1 + E * 0.9 / 30) * -B.height;
                                E = (D = (lv + (t + w) * 7) % 60) < 30 ? D / 30 : 1 - (D - 30) / 30;
                                var H = ro.globalAlpha;
                                ro.globalAlpha = (0.9 + E * 0.1) * H;
                                Qc(ro, B, Ww.ᐃⲆΔ.x + A.x - F / 2, Ww.ᐃⲆΔ.y + A.y - G / 2, F, G);
                                ro.globalAlpha = H;
                            }
                        }
                    }
                }
            }
        }
    }
    function nv(j, e, i, k, n, o, a, q = 0) {
        cf.ᐃΔΔΔ[n].ΔΔΔ();
        for (var r = a; q <= r; r--) {
            for (var s = j; e >= s; s++) {
                for (var t = i; k >= t; t++) {
                    var w = Uw.ⲆⵠⵠⲆ[s][t];
                    if (w && w[o]) {
                        var x = w[o][r];
                        if (x !== undefined) {
                            for (var y = 0; x.length > y; y++) {
                                var z = x[y];
                                if (z.ΔΔΔ) {
                                    if (z.ᐃⲆⲆ.ΔΔΔ() && z.ᐃⲆⲆ.ⲆⲆⲆ == og) {
                                        z.ΔΔΔ = Yh;
                                    }
                                    var A = po * ((1 - z.ᐃⲆⲆ.Δᐃᐃ) * $w * 600);
                                    var B = A * Math.sin(z.angle);
                                    var D = A * Math.cos(z.angle);
                                } else {
                                    B = 0;
                                    D = 0;
                                }
                                var E = ΔⲆ[n][cf.time][r];
                                var F = -E.width * cf.ᐃΔΔΔ[n].Δᐃᐃ;
                                var G = -E.height * cf.ᐃΔΔΔ[n].Δᐃᐃ;
                                Qc(ro, E, Ww.ᐃⲆΔ.x + z.x - F / 2 + B, Ww.ᐃⲆΔ.y + z.y - G / 2 + D, F, G);
                            }
                        }
                    }
                }
            }
        }
    }
    var ov = [];
    for (mt = 0; mt < 100; mt++) {
        var pv = 1;
        if (Math.random() < 0.25) {
            pv = 0;
        }
        ov.push(pv);
    }
    function qv(f, e, i, j, k, n, a, o = 0, q) {
        for (var h = a; o <= h; h--) {
            for (var r = f; r <= e; r++) {
                for (var s = i; j >= s; s++) {
                    if (q <= 0 || ov[(r + s * q) % ov.length] !== 1) {
                        var t = Uw.ⲆⵠⵠⲆ[r][s];
                        if (t !== Ua && _r !== t[n]) {
                            var w = t[n][h];
                            if (w !== Uj) {
                                for (var x = 0; w.length > x; x++) {
                                    var y = w[x];
                                    if (y.ΔΔΔ) {
                                        if (y.ᐃⲆⲆ.ΔΔΔ() && y.ᐃⲆⲆ.ⲆⲆⲆ == as) {
                                            y.ΔΔΔ = false;
                                        }
                                        var z = po * ((1 - y.ᐃⲆⲆ.Δᐃᐃ) * $w * 600);
                                        var A = Math.sin(y.angle) * z;
                                        var B = z * Math.cos(y.angle);
                                    } else {
                                        A = 0;
                                        B = 0;
                                    }
                                    var D = ΔⲆ[k][cf.time][h];
                                    Qc(ro, D, Ww.ᐃⲆΔ.x + y.x - D.width / (ⵠⵠᐃⲆᐃ * 2) + A, Ww.ᐃⲆΔ.y + y.y - D.height / (ⵠⵠᐃⲆᐃ * 2) + B, D.width / ⵠⵠᐃⲆᐃ, D.height / ⵠⵠᐃⲆᐃ);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    function rv(c, e, f, g, i, j, a, k = 0, n) {
        for (var h = c; h <= e; h++) {
            for (var o = f; g >= o; o++) {
                var p = Uw.ⲆⵠⵠⲆ[h][o];
                if (hj !== p && p[j] !== Mq) {
                    var q = p[j];
                    if (q !== undefined) {
                        if (q.scale === 1) {
                            var r = ΔⲆ[i][cf.time][q.ᐃΔⲆⲆ];
                            ro.save();
                            ro.translate(Ww.ᐃⲆΔ.x + q.x, Ww.ᐃⲆΔ.y + q.y);
                            ro.rotate(q.angle);
                            Qc(ro, r, -r.width / 4, -r.height / 4, r.width / 2, r.height / 2);
                            ro.restore();
                        } else if (q.scale === 3) {
                            for (var s = 0; q.ᐃⵠⵠ.length > s; s++) {
                                ro.save();
                                ro.translate(Ww.ᐃⲆΔ.x + q.x, Ww.ᐃⲆΔ.y + q.y);
                                ro.rotate(q.ᐃⵠⵠ[s].angle);
                                r = ΔⲆ[i][cf.time][q.ᐃⵠⵠ[s].ᐃΔⲆⲆ];
                                Qc(ro, r, -r.width / 3 + q.ᐃⵠⵠ[s].x, -r.height / 3 + q.ᐃⵠⵠ[s].y, r.width / 1.5, r.height / 1.5);
                                ro.restore();
                            }
                        } else {
                            r = ΔⲆ[i][cf.time][q.ᐃΔⲆⲆ];
                            ro.save();
                            ro.translate(Ww.ᐃⲆΔ.x + q.x, Ww.ᐃⲆΔ.y + q.y);
                            ro.rotate(q.angle);
                            Qc(ro, r, -r.width / 2, -r.height / 2, r.width, r.height);
                            ro.restore();
                        }
                    }
                }
            }
        }
    }
    function sv(j, e, i, k, n, o, a, q, r) {
        if (q === Gj) {
            q = 0;
        }
        for (var h = a; h >= q; h--) {
            for (var t = j; e >= t; t++) {
                for (var w = i; k >= w; w++) {
                    var x = Uw.ⲆⵠⵠⲆ[t][w];
                    if (Ua !== x && Xk !== x[o]) {
                        var A = x[o][h];
                        if (A !== hj) {
                            for (var B = 0; A.length > B; B++) {
                                var D = A[B];
                                if (D.ΔΔΔ) {
                                    if (D.ᐃⲆⲆ.ΔΔΔ() && D.ᐃⲆⲆ.ⲆⲆⲆ == 0) {
                                        D.ΔΔΔ = X;
                                    }
                                    var E = po * ((1 - D.ᐃⲆⲆ.Δᐃᐃ) * $w * 600);
                                    var F = Math.sin(D.angle) * E;
                                    var G = Math.cos(D.angle) * E;
                                } else {
                                    F = 0;
                                    G = 0;
                                }
                                for (var H = 0; ⲆᐃⲆⵠⲆΔⵠ[h].ᐃⵠⵠΔ > H; H++) {
                                    if (wf !== cf.Δⵠᐃᐃⵠ[H].ΔⲆᐃᐃᐃⵠⵠ) {
                                        cf.Δⵠᐃᐃⵠ[H].ΔΔΔ();
                                        cf.Δⵠᐃᐃⵠ[H].ΔⲆᐃᐃᐃⵠⵠ = wf;
                                    }
                                    var I = ΔⲆ[941][cf.time][ⲆᐃⲆⵠⲆΔⵠ[h].ᐃⲆΔⲆ[H].ⵠᐃᐃ];
                                    var J = -I.width * cf.Δⵠᐃᐃⵠ[H].Δᐃᐃ;
                                    var K = -I.height * cf.Δⵠᐃᐃⵠ[H].Δᐃᐃ;
                                    Qc(ro, I, Ww.ᐃⲆΔ.x + D.x - J / 4 + F + ⲆᐃⲆⵠⲆΔⵠ[h].ᐃⲆΔⲆ[H].x, Ww.ᐃⲆΔ.y + D.y - K / 4 + G + ⲆᐃⲆⵠⲆΔⵠ[h].ᐃⲆΔⲆ[H].y, J / 2, K / 2);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    ⵠⵠᐃⲆᐃ = 1;
    ⲆᐃⲆⵠⲆΔⵠ = [{
        ᐃⲆΔⲆ: [{
            y: -20,
            x: -128,
            ⵠᐃᐃ: 0
        }, {
            y: -4,
            x: -86,
            ⵠᐃᐃ: 1
        }, {
            x: -60,
            y: -74,
            ⵠᐃᐃ: 2
        }, {
            y: -144,
            ⵠᐃᐃ: 0,
            x: -22
        }, {
            y: 86,
            ⵠᐃᐃ: 0,
            x: -58
        }, {
            y: -30,
            x: 3,
            ⵠᐃᐃ: 0
        }, {
            y: -115,
            ⵠᐃᐃ: 1,
            x: 65
        }, {
            x: 118,
            y: -50,
            ⵠᐃᐃ: 0
        }, {
            x: 73,
            y: 15,
            ⵠᐃᐃ: 1
        }, {
            x: 67,
            ⵠᐃᐃ: 0,
            y: 79
        }],
        ᐃⵠⵠΔ: 10
    }, {
        ᐃⲆΔⲆ: [{
            x: -45,
            ⵠᐃᐃ: 0,
            y: -26
        }, {
            ⵠᐃᐃ: 2,
            x: -45,
            y: 20
        }, {
            x: 10,
            y: -60,
            ⵠᐃᐃ: 1
        }, {
            x: 52,
            y: -17,
            ⵠᐃᐃ: 1
        }, {
            ⵠᐃᐃ: 0,
            y: 45,
            x: 14
        }],
        ᐃⵠⵠΔ: 5
    }, {
        ᐃⲆΔⲆ: [{
            y: 3,
            x: -30,
            ⵠᐃᐃ: 2
        }, {
            x: 7,
            ⵠᐃᐃ: 2,
            y: -38
        }, {
            x: 37,
            ⵠᐃᐃ: 2,
            y: 5
        }],
        ᐃⵠⵠΔ: 3
    }, {
        ᐃⵠⵠΔ: 11,
        ᐃⲆΔⲆ: [{
            ⵠᐃᐃ: 2,
            x: -74,
            y: -87
        }, {
            x: -11,
            y: -10,
            ⵠᐃᐃ: 1
        }, {
            y: 17,
            x: -99,
            ⵠᐃᐃ: 1
        }, {
            y: 84,
            x: -66,
            ⵠᐃᐃ: 0
        }, {
            ⵠᐃᐃ: 1,
            y: 123,
            x: -55
        }, {
            ⵠᐃᐃ: 2,
            x: 10,
            y: 81
        }, {
            x: 52,
            ⵠᐃᐃ: 0,
            y: 50
        }, {
            ⵠᐃᐃ: 1,
            x: 138,
            y: 9
        }, {
            y: -28,
            x: 104,
            ⵠᐃᐃ: 0
        }, {
            y: -56,
            x: 67,
            ⵠᐃᐃ: 2
        }, {
            x: 5,
            y: -112,
            ⵠᐃᐃ: 0
        }]
    }, {
        ᐃⵠⵠΔ: 6,
        ᐃⲆΔⲆ: [{
            ⵠᐃᐃ: 2,
            x: -33,
            y: -66
        }, {
            x: -58,
            y: 10,
            ⵠᐃᐃ: 0
        }, {
            y: 44,
            x: -19,
            ⵠᐃᐃ: 1
        }, {
            y: 20,
            ⵠᐃᐃ: 0,
            x: 44
        }, {
            x: 53,
            ⵠᐃᐃ: 2,
            y: -36
        }, {
            ⵠᐃᐃ: 0,
            y: -62,
            x: 7
        }]
    }, {
        ᐃⵠⵠΔ: 3,
        ᐃⲆΔⲆ: [{
            y: -25,
            x: -19,
            ⵠᐃᐃ: 1
        }, {
            y: 13,
            ⵠᐃᐃ: 2,
            x: -29
        }, {
            y: 12,
            x: 12,
            ⵠᐃᐃ: 0
        }]
    }];
    var tv = 0;
    var uv = 0;
    var vv = 0;
    var wv = 0;
    function xv(a, b) {
        if (cf.transition) {
            ro.globalAlpha = 1;
            a.ⵠⲆΔΔⲆ(b);
            cf.time = cf.time ? 0 : 1;
            ro.globalAlpha = 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ;
            a.ⵠⲆΔΔⲆ(b);
            cf.time = cf.time ? 0 : 1;
            ro.globalAlpha = 1;
        } else {
            a.ⵠⲆΔΔⲆ(b);
        }
    }
    function yv(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = Ww.ᐃⲆΔ.x + f - 700;
        var l = Math.max(Ww.ᐃⲆΔ.y + e, 0);
        var g = Math.max(-Ww.ᐃⲆΔ.y + gq - i - 100, 0);
        var r = l;
        var b = gq - l - g;
        if (n) {
            var d = j.ⵠᐃᐃ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + 0;
        0;
        s += d + 0 - 2;
        if (n) {
            d = j.ⵠᐃᐃ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h + 250 - s + d;
        var u = (s += t - 2) - 2;
        if (n) {
            d = j.ⵠᐃᐃ(q).x;
        } else {
            d = q.r.x;
        }
        if (s + (t = h + 350 - s + d) - 3 > u) {
            s += t - 2;
        } else {
            s = u;
        }
        t = h + 700 - s;
        if (n > 0 && k.ΔΔΔᐃᐃΔⲆ === 1) {
            if (cf.transition) {
                var p = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
                ro.fillStyle = Hv(15, 77, 72, 252, 239, 187, p);
            } else {
                ro.fillStyle = Gr.ⲆᐃΔⵠⲆⲆᐃ[cf.time];
            }
            ro.fillRect(s, r, t, b);
        } else {
            if (cf.transition) {
                p = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
                ro.fillStyle = Hv(k.ⲆΔⲆ[0], k.ⲆΔⲆ[1], k.ⲆΔⲆ[2], k.ᐃΔᐃ[0], k.ᐃΔᐃ[1], k.ᐃΔᐃ[2], p);
            } else {
                ro.fillStyle = k.ⵠⵠⲆⵠⵠ[cf.time];
            }
            ro.fillRect(s, r, t, b);
        }
    }
    function zv(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = Ww.ᐃⲆΔ.y + j + 710;
        var l = Math.max(Ww.ᐃⲆΔ.x + e, 0);
        var g = Math.max(-Ww.ᐃⲆΔ.x + so - i - 100, 0);
        var t = l;
        var b = so - l - g;
        if (o) {
            var d = q.ⵠᐃᐃ(a);
        } else {
            d = a.r;
        }
        var u = h + 0;
        var F = u;
        var c = t;
        var p = -d.x + 0;
        var C = b;
        var G = u += -d.x + 0 + 2;
        if (o) {
            d = q.ⵠᐃᐃ(r);
        } else {
            d = r.r;
        }
        var f = h - 250 - u - d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var k = (u += f + 2) - 2;
        if (o) {
            d = q.ⵠᐃᐃ(s);
        } else {
            d = s.r;
        }
        if (u + (f = h - 350 - u - d.x) < k) {
            var A = Yq;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var D = u += f + 2;
        } else {
            A = false;
            u = k;
            D = -1;
        }
        f = h - 700 - u;
        if (cf.transition) {
            var N = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
            ro.fillStyle = Hv(9, 55, 63, 11, 106, 132, N);
        } else {
            ro.fillStyle = Gr.ⵠⲆⲆⵠⵠ[cf.time];
        }
        ro.fillRect(c, F, C, p);
        if (o) {
            if (cf.transition) {
                N = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
                ro.fillStyle = Hv(15, 70, 76, 42, 139, 155, N);
            } else {
                ro.fillStyle = Gr.ΔⵠⲆⲆⲆⵠⵠ[cf.time];
            }
        } else if (cf.transition) {
            N = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
            ro.fillStyle = Hv(9, 55, 63, 11, 106, 132, N);
        } else {
            ro.fillStyle = Gr.ⵠⲆⲆⵠⵠ[cf.time];
        }
        ro.fillRect(y, H, K, w);
        if (A) {
            if (o) {
                if (cf.transition) {
                    N = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
                    ro.fillStyle = Hv(17, 94, 96, 169, 214, 211, N);
                } else {
                    ro.fillStyle = Gr.ᐃⵠⲆᐃⲆⲆᐃ[cf.time];
                }
            } else if (cf.transition) {
                N = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
                ro.fillStyle = Hv(9, 55, 63, 11, 106, 132, N);
            } else {
                ro.fillStyle = Gr.ⵠⲆⲆⵠⵠ[cf.time];
            }
            ro.fillRect(J, L, B, M);
        }
        if (df.ⵠⲆΔⵠⲆ && o) {
            q.ⲆⵠᐃΔᐃⵠⲆΔⵠ(k, D, G, h, -Ww.ᐃⲆΔ.x + c, -Ww.ᐃⲆΔ.x + c + C);
        }
    }
    function Av(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = Ww.ᐃⲆΔ.y + j - 700;
        var l = Math.max(Ww.ᐃⲆΔ.x + e, 0);
        var g = Math.max(-Ww.ᐃⲆΔ.x + so - i - 100, 0);
        var t = l;
        var b = so - l - g;
        if (o) {
            var d = q.ⵠᐃᐃ(a);
        } else {
            d = a.r;
        }
        var u = h + 0;
        var F = t;
        var c = u;
        var p = d.x + 0;
        var C = b;
        var G = u += d.x + 0 - 2;
        if (o) {
            d = q.ⵠᐃᐃ(r);
        } else {
            d = r.r;
        }
        var f = h + 250 - u + d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var k = (u += f - 2) - 2;
        if (o) {
            d = q.ⵠᐃᐃ(s);
        } else {
            d = s.r;
        }
        if (u + (f = h + 350 - u + d.x) - 3 > k) {
            var A = sn;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var D = u += f - 2;
        } else {
            A = Ia;
            u = k;
            D = -1;
        }
        f = h + 700 - u;
        if (cf.transition) {
            var N = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
            ro.fillStyle = Hv(9, 55, 63, 11, 106, 132, N);
        } else {
            ro.fillStyle = Gr.ⵠⲆⲆⵠⵠ[cf.time];
        }
        ro.fillRect(F, c, C, p);
        if (o) {
            if (cf.transition) {
                N = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
                ro.fillStyle = Hv(15, 70, 76, 42, 139, 155, N);
            } else {
                ro.fillStyle = Gr.ΔⵠⲆⲆⲆⵠⵠ[cf.time];
            }
        } else if (cf.transition) {
            N = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
            ro.fillStyle = Hv(9, 55, 63, 11, 106, 132, N);
        } else {
            ro.fillStyle = Gr.ⵠⲆⲆⵠⵠ[cf.time];
        }
        ro.fillRect(y, H, K, w);
        if (A) {
            if (o) {
                if (cf.transition) {
                    N = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
                    ro.fillStyle = Hv(17, 94, 96, 169, 214, 211, N);
                } else {
                    ro.fillStyle = Gr.ᐃⵠⲆᐃⲆⲆᐃ[cf.time];
                }
            } else if (cf.transition) {
                N = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
                ro.fillStyle = Hv(9, 55, 63, 11, 106, 132, N);
            } else {
                ro.fillStyle = Gr.ⵠⲆⲆⵠⵠ[cf.time];
            }
            ro.fillRect(J, L, B, M);
        }
        if (df.ⵠⲆΔⵠⲆ && o) {
            q.ⵠᐃΔΔⵠΔⵠⲆᐃ(k, D, G, h, -Ww.ᐃⲆΔ.x + F, -Ww.ᐃⲆΔ.x + F + C);
        }
    }
    function Bv(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = Ww.ᐃⲆΔ.y + f + 710;
        var l = Math.max(Ww.ᐃⲆΔ.x + e, 0);
        var g = Math.max(-Ww.ᐃⲆΔ.x + so - i - 100, 0);
        var r = l;
        var b = so - l - g;
        if (n) {
            var d = j.ⵠᐃᐃ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + 0;
        0;
        s += -d + 0 + 2;
        if (n) {
            d = j.ⵠᐃᐃ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h - 250 - s - d;
        var u = (s += t + 2) - 2;
        if (n) {
            d = j.ⵠᐃᐃ(q).x;
        } else {
            d = q.r.x;
        }
        if (s + (t = h - 350 - s - d) < u) {
            s += t + 2;
        } else {
            s = u;
        }
        t = h - 700 - s;
        if (n > 0 && k.ΔΔΔᐃᐃΔⲆ === 1) {
            if (cf.transition) {
                var p = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
                ro.fillStyle = Hv(15, 77, 72, 252, 239, 187, p);
            } else {
                ro.fillStyle = Gr.ⲆᐃΔⵠⲆⲆᐃ[cf.time];
            }
            ro.fillRect(r, s, b, t);
        } else {
            if (cf.transition) {
                p = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
                ro.fillStyle = Hv(k.ⲆΔⲆ[0], k.ⲆΔⲆ[1], k.ⲆΔⲆ[2], k.ᐃΔᐃ[0], k.ᐃΔᐃ[1], k.ᐃΔᐃ[2], p);
            } else {
                ro.fillStyle = k.ⵠⵠⲆⵠⵠ[cf.time];
            }
            ro.fillRect(r, s, b, t);
        }
    }
    function Cv(a, b, c, d) {
        if (cf.transition) {
            ro.globalAlpha = 1;
            Qc(ro, ΔⲆ[a][cf.time], c, d);
            cf.time = cf.time ? 0 : 1;
            ro.globalAlpha = 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ;
            Qc(ro, ΔⲆ[a][cf.time], c, d);
            cf.time = cf.time ? 0 : 1;
            ro.globalAlpha = 1;
        } else {
            Qc(ro, b, c, d);
        }
    }
    function Dv(j, e, i, l, n, o) {
        var a = l.w1;
        var q = l.w2;
        var r = l.w3;
        var s = Ww.ᐃⲆΔ.x + j + 820;
        var g = Math.max(Ww.ᐃⲆΔ.y + e, 0);
        var t = Math.max(-Ww.ᐃⲆΔ.y + gq - i - 100, 0);
        var b = g;
        var d = gq - g - t;
        if (o) {
            var u = l.ⵠᐃᐃ(a);
        } else {
            u = a.r;
        }
        var v = s + 0;
        var F = v;
        var p = b;
        var C = -u.x + 0;
        var G = d;
        var f = v += -u.x + 0 + 2;
        if (o) {
            u = l.ⵠᐃᐃ(q);
        } else {
            u = q.r;
        }
        var z = s - 250 - v - u.x;
        var H = v;
        var w = b;
        var K = z;
        var k = d;
        var A = (v += z + 2) - 2;
        if (o) {
            u = l.ⵠᐃᐃ(r);
        } else {
            u = r.r;
        }
        if (A > v + (z = s - 350 - v - u.x)) {
            var x = h;
            var L = v;
            var M = b;
            var B = z;
            var D = d;
            var I = v += z + 2;
        } else {
            x = false;
            v = A;
            I = -1;
        }
        z = s - 700 - v;
        if (cf.transition) {
            var N = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
            ro.fillStyle = Hv(9, 55, 63, 11, 106, 132, N);
        } else {
            ro.fillStyle = Gr.ⵠⲆⲆⵠⵠ[cf.time];
        }
        ro.fillRect(F, p, C, G);
        if (o) {
            if (cf.transition) {
                N = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
                ro.fillStyle = Hv(15, 70, 76, 42, 139, 155, N);
            } else {
                ro.fillStyle = Gr.ΔⵠⲆⲆⲆⵠⵠ[cf.time];
            }
        } else if (cf.transition) {
            N = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
            ro.fillStyle = Hv(9, 55, 63, 11, 106, 132, N);
        } else {
            ro.fillStyle = Gr.ⵠⲆⲆⵠⵠ[cf.time];
        }
        ro.fillRect(H, w, K, k);
        if (x) {
            if (o) {
                if (cf.transition) {
                    N = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
                    ro.fillStyle = Hv(17, 94, 96, 169, 214, 211, N);
                } else {
                    ro.fillStyle = Gr.ᐃⵠⲆᐃⲆⲆᐃ[cf.time];
                }
            } else if (cf.transition) {
                N = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
                ro.fillStyle = Hv(9, 55, 63, 11, 106, 132, N);
            } else {
                ro.fillStyle = Gr.ⵠⲆⲆⵠⵠ[cf.time];
            }
            ro.fillRect(L, M, B, D);
        }
        if (df.ⵠⲆΔⵠⲆ && o) {
            l.ⵠᐃᐃⲆⵠⲆⲆΔⲆ(A, I, f, s, -Ww.ᐃⲆΔ.y + p, -Ww.ᐃⲆΔ.y + p + G);
        }
    }
    function Ev(a) {
        ro.globalAlpha = a.alpha;
        Nt(ro, a.x + Ww.ᐃⲆΔ.x, a.y + Ww.ᐃⲆΔ.y, a.r);
        Kt(ro, Gr.ⲆᐃⵠⵠⵠΔΔ[cf.time]);
        ro.globalAlpha = 1;
    }
    function Fv(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = Ww.ᐃⲆΔ.y + f - 700;
        var l = Math.max(Ww.ᐃⲆΔ.x + e, 0);
        var g = Math.max(-Ww.ᐃⲆΔ.x + so - i - 100, 0);
        var r = l;
        var b = so - l - g;
        if (n) {
            var d = j.ⵠᐃᐃ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + 0;
        0;
        s += d + 0 - 2;
        if (n) {
            d = j.ⵠᐃᐃ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h + 250 - s + d;
        var u = (s += t - 2) - 2;
        if (n) {
            d = j.ⵠᐃᐃ(q).x;
        } else {
            d = q.r.x;
        }
        if (u < s + (t = h + 350 - s + d) - 3) {
            s += t - 2;
        } else {
            s = u;
        }
        t = h + 700 - s;
        if (n > 0 && k.ΔΔΔᐃᐃΔⲆ === 1) {
            if (cf.transition) {
                var p = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
                ro.fillStyle = Hv(15, 77, 72, 252, 239, 187, p);
            } else {
                ro.fillStyle = Gr.ⲆᐃΔⵠⲆⲆᐃ[cf.time];
            }
            ro.fillRect(r, s, b, t);
        } else {
            if (cf.transition) {
                p = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
                ro.fillStyle = Hv(k.ⲆΔⲆ[0], k.ⲆΔⲆ[1], k.ⲆΔⲆ[2], k.ᐃΔᐃ[0], k.ᐃΔᐃ[1], k.ᐃΔᐃ[2], p);
            } else {
                ro.fillStyle = k.ⵠⵠⲆⵠⵠ[cf.time];
            }
            ro.fillRect(r, s, b, t);
        }
    }
    function Gv(a, b, c, d, e) {
        if (cf.transition && e == 1) {
            ro.globalAlpha = 1;
            Qc(ro, ΔⲆ[a][cf.time][b], c, d);
            cf.time = cf.time ? 0 : 1;
            ro.globalAlpha = 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ;
            Qc(ro, ΔⲆ[a][cf.time][b], c, d);
            cf.time = cf.time ? 0 : 1;
            ro.globalAlpha = 1;
        } else {
            ro.globalAlpha = e;
            Qc(ro, ΔⲆ[a][cf.time][b], c, d);
            ro.globalAlpha = 1;
        }
    }
    function Hv(b, c, d, e, f, g, a) {
        var i;
        var j = "#";
        j += (i = Math.floor(e * a + (1 - a) * b)) < 16 ? "0" + i.toString(16) : i.toString(16);
        j += (i = Math.floor(f * a + (1 - a) * c)) < 16 ? "0" + i.toString(16) : i.toString(16);
        return j += (i = Math.floor(g * a + (1 - a) * d)) < 16 ? "0" + i.toString(16) : i.toString(16);
    }
    function Iv(b, c, d, e, f) {
        var g = d.width;
        var a = d.height;
        var i = Math.floor(g / 2);
        var j = Math.floor(a / 2);
        if (cf.transition) {
            ro.globalAlpha = 1;
            Qc(ro, ΔⲆ[b][c][cf.time], 0, 0, g, a, e, f, i, j);
            cf.time = cf.time ? 0 : 1;
            ro.globalAlpha = 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ;
            Qc(ro, ΔⲆ[b][c][cf.time], 0, 0, g, a, e, f, i, j);
            cf.time = cf.time ? 0 : 1;
            ro.globalAlpha = 1;
        } else {
            Qc(ro, ΔⲆ[b][c][cf.time], 0, 0, g, a, e, f, i, j);
        }
    }
    function Jv(b, c, d, e, f, g, a, i, j, h) {
        if (cf.transition) {
            ro.globalAlpha = 1;
            b(c, d, e, f, g, a, i, j, h);
            cf.time = cf.time ? 0 : 1;
            ro.globalAlpha = 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ;
            b(c, d, e, f, g, a, i, j, h);
            cf.time = cf.time ? 0 : 1;
            ro.globalAlpha = 1;
        } else {
            b(c, d, e, f, g, a, i, j, h);
        }
    }
    function Kv(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = Ww.ᐃⲆΔ.x + f + 820;
        var l = Math.max(Ww.ᐃⲆΔ.y + e, 0);
        var g = Math.max(-Ww.ᐃⲆΔ.y + gq - i - 100, 0);
        var r = l;
        var b = gq - l - g;
        if (n) {
            var d = j.ⵠᐃᐃ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + 0;
        0;
        s += -d + 0 + 2;
        if (n) {
            d = j.ⵠᐃᐃ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h - 250 - s - d;
        var u = (s += t + 2) - 2;
        if (n) {
            d = j.ⵠᐃᐃ(q).x;
        } else {
            d = q.r.x;
        }
        if (u > s + (t = h - 350 - s - d)) {
            s += t + 2;
        } else {
            s = u;
        }
        t = h - 700 - s;
        if (n > 0 && k.ΔΔΔᐃᐃΔⲆ === 1) {
            if (cf.transition) {
                var p = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
                ro.fillStyle = Hv(15, 77, 72, 252, 239, 187, p);
            } else {
                ro.fillStyle = Gr.ⲆᐃΔⵠⲆⲆᐃ[cf.time];
            }
            ro.fillRect(s, r, t, b);
        } else {
            if (cf.transition) {
                p = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
                ro.fillStyle = Hv(k.ⲆΔⲆ[0], k.ⲆΔⲆ[1], k.ⲆΔⲆ[2], k.ᐃΔᐃ[0], k.ᐃΔᐃ[1], k.ᐃΔᐃ[2], p);
            } else {
                ro.fillStyle = k.ⵠⵠⲆⵠⵠ[cf.time];
            }
            ro.fillRect(s, r, t, b);
        }
    }
    function Lv(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = Ww.ᐃⲆΔ.x + j - 700;
        var l = Math.max(Ww.ᐃⲆΔ.y + e, 0);
        var g = Math.max(-Ww.ᐃⲆΔ.y + gq - i - 100, 0);
        var t = l;
        var b = gq - l - g;
        if (o) {
            var d = q.ⵠᐃᐃ(a);
        } else {
            d = a.r;
        }
        var u = h + 0;
        var A = u;
        var c = t;
        var p = d.x + 0;
        var C = b;
        var F = u += d.x + 0 - 2;
        if (o) {
            d = q.ⵠᐃᐃ(r);
        } else {
            d = r.r;
        }
        var f = h + 250 - u + d.x;
        var G = u;
        var y = t;
        var w = f;
        var H = b;
        var K = (u += f - 2) - 2;
        if (o) {
            d = q.ⵠᐃᐃ(s);
        } else {
            d = s.r;
        }
        if (K < u + (f = h + 350 - u + d.x) - 3) {
            var x = k;
            var L = u;
            var M = t;
            var B = f;
            var D = b;
            var I = u += f - 2;
        } else {
            x = Yh;
            u = K;
            I = -1;
        }
        f = h + 700 - u;
        if (cf.transition) {
            var N = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
            ro.fillStyle = Hv(9, 55, 63, 11, 106, 132, N);
        } else {
            ro.fillStyle = Gr.ⵠⲆⲆⵠⵠ[cf.time];
        }
        ro.fillRect(A, c, p, C);
        if (o) {
            if (cf.transition) {
                N = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
                ro.fillStyle = Hv(15, 70, 76, 42, 139, 155, N);
            } else {
                ro.fillStyle = Gr.ΔⵠⲆⲆⲆⵠⵠ[cf.time];
            }
        } else if (cf.transition) {
            N = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
            ro.fillStyle = Hv(9, 55, 63, 11, 106, 132, N);
        } else {
            ro.fillStyle = Gr.ⵠⲆⲆⵠⵠ[cf.time];
        }
        ro.fillRect(G, y, w, H);
        if (x) {
            if (o) {
                if (cf.transition) {
                    N = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
                    ro.fillStyle = Hv(17, 94, 96, 169, 214, 211, N);
                } else {
                    ro.fillStyle = Gr.ᐃⵠⲆᐃⲆⲆᐃ[cf.time];
                }
            } else if (cf.transition) {
                N = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
                ro.fillStyle = Hv(9, 55, 63, 11, 106, 132, N);
            } else {
                ro.fillStyle = Gr.ⵠⲆⲆⵠⵠ[cf.time];
            }
            ro.fillRect(L, M, B, D);
        }
        if (df.ⵠⲆΔⵠⲆ && o) {
            q.ⲆⲆⵠΔΔΔᐃⲆⲆ(K, I, F, h, -Ww.ᐃⲆΔ.y + c, -Ww.ᐃⲆΔ.y + c + C);
        }
    }
    function Mv(a) {
        ro.save();
        ro.translate(Ww.ᐃⲆΔ.x + a.x, Ww.ᐃⲆΔ.y + a.y);
        ro.rotate(a.angle);
        ro.globalAlpha = a.alpha;
        var b = ΔⲆ[a.id][cf.time];
        Qc(ro, b, -b.width / 2, -b.height / 2);
        ro.globalAlpha = 1;
        ro.restore();
    }
    function Nv(b, c, d, e) {
        var f = c.width;
        var g = c.height;
        var a = Math.floor(f / 2);
        var h = Math.floor(g / 2);
        if (cf.transition) {
            ro.globalAlpha = 1;
            Qc(ro, ΔⲆ[b][cf.time], 0, 0, f, g, d, e, a, h);
            cf.time = cf.time ? 0 : 1;
            ro.globalAlpha = 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ;
            Qc(ro, ΔⲆ[b][cf.time], 0, 0, f, g, d, e, a, h);
            cf.time = cf.time ? 0 : 1;
            ro.globalAlpha = 1;
        } else {
            Qc(ro, c, 0, 0, f, g, d, e, a, h);
        }
    }
    function Ov(a, b, c) {
        if (cf.transition) {
            ro.globalAlpha = 1;
            a.ⲆⲆΔⵠ(b, c);
            cf.time = cf.time ? 0 : 1;
            ro.globalAlpha = 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ;
            a.ⲆⲆΔⵠ(b, c);
            cf.time = cf.time ? 0 : 1;
            ro.globalAlpha = 1;
        } else {
            a.ⲆⲆΔⵠ(b, c);
        }
    }
    function Pv() {
        ro.globalAlpha = 1;
        if (cf.transition) {
            var a = cf.ΔⲆⵠᐃ.ΔΔΔ();
        }
        cf.ΔΔᐃⵠⲆΔΔⲆⵠ(-Ww.ᐃⲆΔ.x, -Ww.ᐃⲆΔ.y);
        tv = Math.max(Math.floor(-Ww.ᐃⲆΔ.x / cf.ⵠΔⵠΔᐃΔⵠ) - 5, 0);
        uv = Math.min(Math.floor((-Ww.ᐃⲆΔ.x + Ww.ᐃⲆΔ.w) / cf.ⵠΔⵠΔᐃΔⵠ) + 4, cf.ΔΔΔΔⲆ - 1);
        vv = Math.max(Math.floor(-Ww.ᐃⲆΔ.y / cf.ΔᐃᐃⲆΔⵠⲆ) - 3, 0);
        wv = Math.min(Math.floor((-Ww.ᐃⲆΔ.y + Ww.ᐃⲆΔ.ⵠⲆᐃ) / cf.ΔᐃᐃⲆΔⵠⲆ) + 3, cf.ᐃⵠᐃⲆΔ - 1);
        (function () {
            for (var c = cf.ⵠⵠⲆⲆ.length - 1; c >= 0; c--) {
                var f = cf.ⵠⵠⲆⲆ[c];
                if (cf.ᐃᐃⲆⵠⵠ === f.ⵠᐃᐃ) {
                    var j = cf.ⲆᐃⵠⲆⲆ[f.ⵠᐃᐃ];
                    if (-Ww.ᐃⲆΔ.x >= f.x1 - 230 - so && -Ww.ᐃⲆΔ.x <= f.x2 + 330 && f.y1 - gq <= -Ww.ᐃⲆΔ.y && f.y2 + 100 >= -Ww.ᐃⲆΔ.y) {
                        var k = f.x2;
                        if (f.ⵠᐃᐃ !== cf.ᐃᐃⲆⵠⵠ) {
                            k -= 610;
                        }
                        var m = f.x1;
                        if (f.ⵠᐃᐃ !== cf.ᐃᐃⲆⵠⵠ) {
                            m += 610;
                        }
                        var p = f.y2;
                        if (f.ⵠᐃᐃ !== cf.ᐃᐃⲆⵠⵠ) {
                            p -= 610;
                        }
                        var q = f.y1;
                        if (cf.ᐃᐃⲆⵠⵠ !== f.ⵠᐃᐃ) {
                            q += 610;
                        }
                        if (cf.transition) {
                            var w = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
                            ro.fillStyle = Hv(j.ⲆΔⲆ[0], j.ⲆΔⲆ[1], j.ⲆΔⲆ[2], j.ᐃΔᐃ[0], j.ᐃΔᐃ[1], j.ᐃΔᐃ[1], w);
                        } else {
                            ro.fillStyle = j.ⵠⵠⲆⵠⵠ[cf.time];
                        }
                        var x = Math.max(Ww.ᐃⲆΔ.x + m - 2 - 230, 0);
                        var y = Math.max(-Ww.ᐃⲆΔ.x + so - k - 330 - 2, 0);
                        var z = Math.max(Ww.ᐃⲆΔ.y + q - 2, 0);
                        var A = Math.max(-Ww.ᐃⲆΔ.y + gq - p - 100 - 2, 0);
                        ro.beginPath();
                        ro.fillRect(x, z, so - y - x, gq - z - A);
                    }
                }
            }
            for (c = cf.ⵠⵠⲆⲆ.length - 1; c >= 0; c--) {
                if ((f = cf.ⵠⵠⲆⲆ[c]).ⵠᐃᐃ !== cf.ᐃᐃⲆⵠⵠ) {
                    k = f.x2;
                    if (cf.ᐃᐃⲆⵠⵠ !== f.ⵠᐃᐃ) {
                        k -= 400;
                    }
                    m = f.x1;
                    if (cf.ᐃᐃⲆⵠⵠ !== f.ⵠᐃᐃ) {
                        m += 400;
                    }
                    p = f.y2;
                    if (cf.ᐃᐃⲆⵠⵠ !== f.ⵠᐃᐃ) {
                        p -= 300;
                    }
                    q = f.y1;
                    if (cf.ᐃᐃⲆⵠⵠ !== f.ⵠᐃᐃ) {
                        q += 300;
                    }
                    if (!(f.Δᐃᐃ & 8) && -Ww.ᐃⲆΔ.x >= k - so + 120 && -Ww.ᐃⲆΔ.x <= k + 820 && q + 88 - gq <= -Ww.ᐃⲆΔ.y && p + 50 >= -Ww.ᐃⲆΔ.y) {
                        Kv(k, q + 88, p - 88, Ww.ⲆΔⵠⲆ[0], cf.ⲆᐃⵠⲆⲆ[f.ⵠᐃᐃ], f.Δᐃᐃ & 8);
                        Dv(k, q + 88, p - 88, Ww.ⲆΔⵠⲆ[0], cf.ⲆᐃⵠⲆⲆ[f.ⵠᐃᐃ], f.Δᐃᐃ & 8);
                    }
                    if (!(f.Δᐃᐃ & 4) && -Ww.ᐃⲆΔ.x >= m - so - 700 && m - 20 >= -Ww.ᐃⲆΔ.x && -Ww.ᐃⲆΔ.y >= q + 88 - gq && -Ww.ᐃⲆΔ.y <= p + 50) {
                        yv(m, q + 88, p - 88, Ww.ⲆΔⵠⲆ[1], cf.ⲆᐃⵠⲆⲆ[f.ⵠᐃᐃ], f.Δᐃᐃ & 4);
                        Lv(m, q + 88, p - 88, Ww.ⲆΔⵠⲆ[1], cf.ⲆᐃⵠⲆⲆ[f.ⵠᐃᐃ], f.Δᐃᐃ & 4);
                    }
                    if (!(f.Δᐃᐃ & 2) && -Ww.ᐃⲆΔ.x >= m - 235 - so && k + 350 >= -Ww.ᐃⲆΔ.x && p - gq - 275 <= -Ww.ᐃⲆΔ.y && p + 490 >= -Ww.ᐃⲆΔ.y) {
                        Bv(p - 230, m - 230, k + 230, Ww.ⲆΔⵠⲆ[2], cf.ⲆᐃⵠⲆⲆ[f.ⵠᐃᐃ], f.Δᐃᐃ & 2);
                        zv(p - 230, m - 230, k + 230, Ww.ⲆΔⵠⲆ[2], cf.ⲆᐃⵠⲆⲆ[f.ⵠᐃᐃ], f.Δᐃᐃ & 2);
                    }
                    if (!(f.Δᐃᐃ & 1) && m - 235 - so <= -Ww.ᐃⲆΔ.x && -Ww.ᐃⲆΔ.x <= k + 350 && q - gq - 390 <= -Ww.ᐃⲆΔ.y && q + 315 >= -Ww.ᐃⲆΔ.y) {
                        Fv(q + 310, m - 230, k + 230, Ww.ⲆΔⵠⲆ[3], cf.ⲆᐃⵠⲆⲆ[f.ⵠᐃᐃ], f.Δᐃᐃ & 1);
                        Av(q + 310, m - 230, k + 230, Ww.ⲆΔⵠⲆ[3], cf.ⲆᐃⵠⲆⲆ[f.ⵠᐃᐃ], f.Δᐃᐃ & 1);
                    }
                }
            }
            for (c = cf.ⵠⵠⲆⲆ.length - 1; c >= 0; c--) {
                if ((f = cf.ⵠⵠⲆⲆ[c]).ⵠᐃᐃ !== cf.ᐃᐃⲆⵠⵠ) {
                    k = f.x2;
                    if (cf.ᐃᐃⲆⵠⵠ !== f.ⵠᐃᐃ) {
                        k -= 400;
                    }
                    m = f.x1;
                    if (cf.ᐃᐃⲆⵠⵠ !== f.ⵠᐃᐃ) {
                        m += 400;
                    }
                    p = f.y2;
                    if (f.ⵠᐃᐃ !== cf.ᐃᐃⲆⵠⵠ) {
                        p -= 300;
                    }
                    q = f.y1;
                    if (cf.ᐃᐃⲆⵠⵠ !== f.ⵠᐃᐃ) {
                        q += 300;
                    }
                    if (f.Δᐃᐃ & 8 && k - so + 120 <= -Ww.ᐃⲆΔ.x && k + 820 >= -Ww.ᐃⲆΔ.x && -Ww.ᐃⲆΔ.y >= q + 88 - gq && -Ww.ᐃⲆΔ.y <= p + 50) {
                        Kv(k, q + 88, p - 88, Ww.ⲆΔⵠⲆ[0], cf.ⲆᐃⵠⲆⲆ[f.ⵠᐃᐃ], f.Δᐃᐃ & 8);
                    }
                    if ((f.Δᐃᐃ & 4) !== 0 && m - so - 700 <= -Ww.ᐃⲆΔ.x && -Ww.ᐃⲆΔ.x <= m - 20 && -Ww.ᐃⲆΔ.y >= q + 88 - gq && p + 50 >= -Ww.ᐃⲆΔ.y) {
                        yv(m, q + 88, p - 88, Ww.ⲆΔⵠⲆ[1], cf.ⲆᐃⵠⲆⲆ[f.ⵠᐃᐃ], f.Δᐃᐃ & 4);
                    }
                    if (f.Δᐃᐃ & 2 && m - 235 - so <= -Ww.ᐃⲆΔ.x && -Ww.ᐃⲆΔ.x <= k + 350 && -Ww.ᐃⲆΔ.y >= p - gq - 275 && -Ww.ᐃⲆΔ.y <= p + 490) {
                        Bv(p - 230, m - 230, k + 230, Ww.ⲆΔⵠⲆ[2], cf.ⲆᐃⵠⲆⲆ[f.ⵠᐃᐃ], f.Δᐃᐃ & 2);
                    }
                    if ((f.Δᐃᐃ & 1) !== 0 && -Ww.ᐃⲆΔ.x >= m - 235 - so && -Ww.ᐃⲆΔ.x <= k + 350 && -Ww.ᐃⲆΔ.y >= q - gq - 390 && q + 315 >= -Ww.ᐃⲆΔ.y) {
                        Fv(q + 310, m - 230, k + 230, Ww.ⲆΔⵠⲆ[3], cf.ⲆᐃⵠⲆⲆ[f.ⵠᐃᐃ], f.Δᐃᐃ & 1);
                    }
                }
            }
            for (c = cf.ⵠⵠⲆⲆ.length - 1; c >= 0; c--) {
                f = cf.ⵠⵠⲆⲆ[c];
                if (cf.ᐃᐃⲆⵠⵠ !== f.ⵠᐃᐃ) {
                    j = cf.ⲆᐃⵠⲆⲆ[f.ⵠᐃᐃ];
                    if (f.x1 - 230 - so <= -Ww.ᐃⲆΔ.x && f.x2 + 330 >= -Ww.ᐃⲆΔ.x && f.y1 - gq <= -Ww.ᐃⲆΔ.y && -Ww.ᐃⲆΔ.y <= f.y2 + 100) {
                        k = f.x2;
                        if (cf.ᐃᐃⲆⵠⵠ !== f.ⵠᐃᐃ) {
                            if (f.Δᐃᐃ & 8) {
                                k -= 610;
                            } else {
                                k -= 414;
                            }
                        }
                        m = f.x1;
                        if (cf.ᐃᐃⲆⵠⵠ !== f.ⵠᐃᐃ) {
                            if ((f.Δᐃᐃ & 4) === 0) {
                                m += 414;
                            } else {
                                m += 610;
                            }
                        }
                        p = f.y2;
                        if (f.ⵠᐃᐃ !== cf.ᐃᐃⲆⵠⵠ) {
                            if ((f.Δᐃᐃ & 2) === 0) {
                                p -= 414;
                            } else {
                                p -= 610;
                            }
                        }
                        q = f.y1;
                        if (cf.ᐃᐃⲆⵠⵠ !== f.ⵠᐃᐃ) {
                            if ((f.Δᐃᐃ & 1) === 0) {
                                q += 414;
                            } else {
                                q += 610;
                            }
                        }
                        if (cf.transition) {
                            w = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
                            ro.fillStyle = Hv(j.ⲆΔⲆ[0], j.ⲆΔⲆ[1], j.ⲆΔⲆ[2], j.ᐃΔᐃ[0], j.ᐃΔᐃ[1], j.ᐃΔᐃ[2], w);
                        } else {
                            ro.fillStyle = j.ⵠⵠⲆⵠⵠ[cf.time];
                        }
                        x = Math.max(Ww.ᐃⲆΔ.x + m - 2 - 230, 0);
                        y = Math.max(-Ww.ᐃⲆΔ.x + so - k - 330 - 2, 0);
                        z = Math.max(Ww.ᐃⲆΔ.y + q - 2, 0);
                        A = Math.max(-Ww.ᐃⲆΔ.y + gq - p - 100 - 2, 0);
                        ro.beginPath();
                        ro.fillRect(x, z, so - y - x, gq - z - A);
                    }
                }
            }
            if (df.ⵠⲆΔⵠⲆ) {
                Jv(nv, vv, wv, tv, uv, 695, "isl", 2);
                Jv(nv, vv, wv, tv, uv, 694, "isl", 2);
            }
            Jv(qv, vv, wv, tv, uv, 692, "isl", 2);
            if (df.ⵠⲆΔⵠⲆ) {
                Jv(rv, vv, wv, tv, uv, 243, "de");
            }
            var B = cf.ⵠΔⲆ[0];
            for (c = 0; c < B.length; c++) {
                for (var b = B[c], C = 0; C < b.ⲆⲆᐃΔⵠ.length; C++) {
                    Mv(b.ⲆⲆᐃΔⵠ[C]);
                }
            }
            if ((bp += $w * 40) > 60) {
                bp -= 60;
            }
            Jv(yp, vv, wv, tv, uv, 1024, "r", 0);
            for (c = 0; c < cf.ⵠⵠⲆⲆ.length; c++) {
                if ((f = cf.ⵠⵠⲆⲆ[c]).ⵠᐃᐃ !== cf.ᐃᐃⲆⵠⵠ) {
                    k = f.x2;
                    if (f.ⵠᐃᐃ !== cf.ᐃᐃⲆⵠⵠ) {
                        k -= 400;
                    }
                    m = f.x1;
                    if (f.ⵠᐃᐃ !== cf.ᐃᐃⲆⵠⵠ) {
                        m += 400;
                    }
                    p = f.y2;
                    if (f.ⵠᐃᐃ !== cf.ᐃᐃⲆⵠⵠ) {
                        p -= 300;
                    }
                    q = f.y1;
                    if (f.ⵠᐃᐃ !== cf.ᐃᐃⲆⵠⵠ) {
                        q += 300;
                    }
                    if ((f.Δᐃᐃ & 8) > 0 && -Ww.ᐃⲆΔ.x >= k - so + 120 && k + 820 >= -Ww.ᐃⲆΔ.x && q + 88 - gq <= -Ww.ᐃⲆΔ.y && p + 50 >= -Ww.ᐃⲆΔ.y) {
                        Dv(k, q + 88, p - 88, Ww.ⲆΔⵠⲆ[0], cf.ⲆᐃⵠⲆⲆ[f.ⵠᐃᐃ], f.Δᐃᐃ & 8);
                    }
                    if ((f.Δᐃᐃ & 4) > 0 && m - so - 700 <= -Ww.ᐃⲆΔ.x && -Ww.ᐃⲆΔ.x <= m - 20 && -Ww.ᐃⲆΔ.y >= q + 88 - gq && p + 50 >= -Ww.ᐃⲆΔ.y) {
                        Lv(m, q + 88, p - 88, Ww.ⲆΔⵠⲆ[1], cf.ⲆᐃⵠⲆⲆ[f.ⵠᐃᐃ], f.Δᐃᐃ & 4);
                    }
                    if ((f.Δᐃᐃ & 2) > 0 && m - 235 - so <= -Ww.ᐃⲆΔ.x && k + 350 >= -Ww.ᐃⲆΔ.x && p - gq - 275 <= -Ww.ᐃⲆΔ.y && -Ww.ᐃⲆΔ.y <= p + 490) {
                        zv(p - 230, m - 230, k + 230, Ww.ⲆΔⵠⲆ[2], cf.ⲆᐃⵠⲆⲆ[f.ⵠᐃᐃ], f.Δᐃᐃ & 2);
                    }
                    if ((f.Δᐃᐃ & 1) > 0 && -Ww.ᐃⲆΔ.x >= m - 235 - so && -Ww.ᐃⲆΔ.x <= k + 350 && q - gq - 390 <= -Ww.ᐃⲆΔ.y && q + 315 >= -Ww.ᐃⲆΔ.y) {
                        Av(q + 310, m - 230, k + 230, Ww.ⲆΔⵠⲆ[3], cf.ⲆᐃⵠⲆⲆ[f.ⵠᐃᐃ], f.Δᐃᐃ & 1);
                    }
                }
            }
        })();
        (function () {
            var K = tv;
            var e = uv;
            var i = vv;
            var t = wv;
            if (df.ⵠⲆΔⵠⲆ) {
                Jv(qv, i, t, K, e, 621, "l", 2);
            }
            if (df.ⵠⲆΔⵠⲆ) {
                Jv(qv, i, t, K, e, Gr.ⲆⵠΔΔᐃ, "la", 5);
            }
            Jv(qv, i, t, K, e, 203, "la", 5);
            Jv(nv, i, t, K, e, 620, "l", 2);
            if (df.ⵠⲆΔⵠⲆ) {
                Jv(sv, i, t, K, e, 203, "la", 5);
                Jv(nv, i, t, K, e, 619, "l", 2);
            }
            Jv(qv, i, t, K, e, 1052, "ma", 4);
            for (var n = cf.ⵠΔⲆ[76], Q = 0; Q < n.length; Q++) {
                n[Q].ⲆᐃΔⲆⵠΔⲆ();
            }
            var T = cf.ⵠΔⲆ[0];
            for (Q = 0; T.length > Q; Q++) {
                for (var Y = T[Q], aa = 0; Y.ⲆⲆⵠⵠⲆ.length > aa; aa++) {
                    Ev(Y.ⲆⲆⵠⵠⲆ[aa]);
                }
            }
            var ba = cf.ⵠΔⲆ[30];
            for (Q = 0; ba.length > Q; Q++) {
                Ov(ba[Q], 125);
                ba[Q].ⵠⲆⵠΔⲆ(ba[Q].info);
            }
            var l = cf.ⵠΔⲆ[18];
            for (Q = 0; l.length > Q; Q++) {
                if (l[Q].action == 2) {
                    xv(l[Q]);
                }
            }
            var ca = cf.ⵠΔⲆ[1];
            for (Q = 0; Q < ca.length; Q++) {
                xv(ca[Q], 113);
            }
            var da = cf.ⵠΔⲆ[22];
            for (Q = 0; Q < da.length; Q++) {
                xv(da[Q]);
            }
            var ea = cf.ⵠΔⲆ[23];
            for (Q = 0; ea.length > Q; Q++) {
                xv(ea[Q]);
            }
            var fa = cf.ⵠΔⲆ[6];
            for (Q = 0; Q < fa.length; Q++) {
                xv(fa[Q], 118);
            }
            var v = cf.ⵠΔⲆ[36];
            for (Q = 0; v.length > Q; Q++) {
                Ov(v[Q]);
            }
            var m = cf.ⵠΔⲆ[33];
            for (Q = 0; m.length > Q; Q++) {
                Ov(m[Q], 141);
            }
            var c = cf.ⵠΔⲆ[3];
            for (Q = 0; c.length > Q; Q++) {
                xv(c[Q]);
            }
            c = cf.ⵠΔⲆ[43];
            Q = 0;
            for (; Q < c.length; Q++) {
                xv(c[Q]);
            }
            c = cf.ⵠΔⲆ[3];
            Q = 0;
            for (; Q < c.length; Q++) {
                Qv(c[Q]);
            }
            var ha = cf.ⵠΔⲆ[44];
            for (Q = 0; Q < ha.length; Q++) {
                if (!(ha[Q].info & 15) || ha[Q].info === 10) {
                    Ov(ha[Q]);
                }
            }
            var ia = cf.ⵠΔⲆ[54];
            for (Q = 0; Q < ia.length; Q++) {
                if (!(ia[Q].info & 15) || ia[Q].info === 10) {
                    Ov(ia[Q]);
                }
            }
            var ja = cf.ⵠΔⲆ[55];
            for (Q = 0; Q < ja.length; Q++) {
                if (!(ja[Q].info & 15) || ja[Q].info === 10) {
                    Ov(ja[Q]);
                }
            }
            var ka = cf.ⵠΔⲆ[79];
            for (Q = 0; ka.length > Q; Q++) {
                Ov(ka[Q], 132);
            }
            var la = cf.ⵠΔⲆ[39];
            for (Q = 0; la.length > Q; Q++) {
                if ((la[Q].info & 15) === 0 || la[Q].info === 10) {
                    Ov(la[Q]);
                }
            }
            var ma = cf.ⵠΔⲆ[40];
            for (Q = 0; Q < ma.length; Q++) {
                if ((ma[Q].info & 15) === 0 || ma[Q].info === 10) {
                    Ov(ma[Q]);
                }
            }
            var na = cf.ⵠΔⲆ[37];
            for (Q = 0; Q < na.length; Q++) {
                if (!(na[Q].info & 15) || na[Q].info === 10) {
                    Ov(na[Q]);
                }
            }
            ka = cf.ⵠΔⲆ[31];
            Q = 0;
            for (; Q < ka.length; Q++) {
                Ov(ka[Q]);
            }
            var oa = cf.ⵠΔⲆ[86];
            for (Q = 0; oa.length > Q; Q++) {
                Ov(oa[Q], 250, 729);
            }
            var A = cf.ⵠΔⲆ[82];
            for (Q = 0; A.length > Q; Q++) {
                Ov(A[Q], 250, 729);
            }
            var x = cf.ⵠΔⲆ[87];
            for (Q = 0; Q < x.length; Q++) {
                Ov(x[Q], 854, 859);
            }
            var J = cf.ⵠΔⲆ[45];
            for (Q = 0; J.length > Q; Q++) {
                if (J[Q].info & 1) {
                    Ov(J[Q], 336);
                }
            }
            J = cf.ⵠΔⲆ[46];
            Q = 0;
            for (; Q < J.length; Q++) {
                if (J[Q].info & 1) {
                    Ov(J[Q], 373);
                }
            }
            J = cf.ⵠΔⲆ[47];
            Q = 0;
            for (; Q < J.length; Q++) {
                if (J[Q].info) {
                    Ov(J[Q], 376);
                }
            }
            J = cf.ⵠΔⲆ[48];
            Q = 0;
            for (; Q < J.length; Q++) {
                if (J[Q].info) {
                    Ov(J[Q], 379);
                }
            }
            J = cf.ⵠΔⲆ[49];
            Q = 0;
            for (; Q < J.length; Q++) {
                if (J[Q].info) {
                    Ov(J[Q], 500);
                }
            }
            J = cf.ⵠΔⲆ[53];
            Q = 0;
            for (; Q < J.length; Q++) {
                if (J[Q].info) {
                    Ov(J[Q], 376);
                }
            }
            J = cf.ⵠΔⲆ[10];
            Q = 0;
            for (; Q < J.length; Q++) {
                if (J[Q].info & 1) {
                    Ov(J[Q], 336);
                }
            }
            J = cf.ⵠΔⲆ[15];
            Q = 0;
            for (; J.length > Q; Q++) {
                if (J[Q].info & 1) {
                    Ov(J[Q], 373);
                }
            }
            J = cf.ⵠΔⲆ[16];
            Q = 0;
            for (; Q < J.length; Q++) {
                if (J[Q].info) {
                    Ov(J[Q], 376);
                }
            }
            J = cf.ⵠΔⲆ[17];
            Q = 0;
            for (; Q < J.length; Q++) {
                if (J[Q].info) {
                    Ov(J[Q], 379);
                }
            }
            J = cf.ⵠΔⲆ[21];
            Q = 0;
            for (; Q < J.length; Q++) {
                if (J[Q].info) {
                    Ov(J[Q], 500);
                }
            }
            J = cf.ⵠΔⲆ[51];
            Q = 0;
            for (; Q < J.length; Q++) {
                if (J[Q].info) {
                    Ov(J[Q], 376);
                }
            }
            var pa = cf.ⵠΔⲆ[80];
            for (Q = 0; Q < pa.length; Q++) {
                Ov(pa[Q], 264, 322);
            }
            var B = cf.ⵠΔⲆ[41];
            for (Q = 0; Q < B.length; Q++) {
                Ov(B[Q], 198);
            }
            n = cf.ⵠΔⲆ[76];
            Q = 0;
            for (; n.length > Q; Q++) {
                Ov(n[Q], Gr.ⲆᐃᐃⵠⲆⲆΔ, Gr.ⵠⲆⲆᐃΔΔᐃⵠΔ);
            }
            var qa = cf.ⵠΔⲆ[91];
            for (Q = 0; qa.length > Q; Q++) {
                if (qa[Q].ⲆΔΔⲆᐃΔᐃ === 0) {
                    Ov(qa[Q]);
                }
            }
            T = cf.ⵠΔⲆ[0];
            Q = 0;
            for (; Q < T.length; Q++) {
                Y = T[Q];
                if (T[Q].ⲆⵠᐃΔᐃ !== 227 && T[Q].ⲆⵠᐃΔᐃ !== 228 && T[Q].ⲆⵠᐃΔᐃ !== 229 && T[Q].ⲆⵠᐃΔᐃ !== 230 && T[Q].ⲆⵠᐃΔᐃ !== 91) {
                    if (Y.ⵠᐃⵠⵠΔΔⲆ === 0) {
                        if (Y.ΔΔᐃᐃⲆⵠⲆ > 0.001) {
                            Y.ΔΔᐃᐃⲆⵠⲆ = ⲆⵠΔᐃ.ΔⲆΔⲆᐃΔⲆ(Y.ΔΔᐃᐃⲆⵠⲆ, 0, 0.018);
                            var ra = 1 + Math.min(1, Math.max(Y.ΔΔᐃᐃⲆⵠⲆ, 0) / 100) * 0.18;
                            ro.save();
                            ro.scale(ra, ra);
                            Ww.ᐃⲆΔ.x /= ra;
                            Ww.ᐃⲆΔ.y /= ra;
                            Y.x /= ra;
                            Y.y /= ra;
                            Y.r.x /= ra;
                            Y.r.y /= ra;
                            Y.ΔⲆΔⵠᐃⵠⲆ();
                            Y.ⲆⲆΔⵠ();
                            Ww.ᐃⲆΔ.x *= ra;
                            Ww.ᐃⲆΔ.y *= ra;
                            Y.x *= ra;
                            Y.y *= ra;
                            Y.r.x *= ra;
                            Y.r.y *= ra;
                            ro.restore();
                        } else {
                            Y.ⲆΔΔⲆᐃΔᐃ = 0;
                            Y.ΔⲆΔⵠᐃⵠⲆ();
                            Y.ⲆⲆΔⵠ();
                        }
                    }
                } else if (Y.ⵠᐃⲆᐃⲆ <= 180) {
                    ro.save();
                    ra = 1 + Math.min(1, Math.max(Y.ⵠⲆⵠᐃΔ - 30, 0) / 180) * 0.35;
                    ro.scale(ra, ra);
                    Ww.ᐃⲆΔ.x /= ra;
                    Ww.ᐃⲆΔ.y /= ra;
                    Y.x /= ra;
                    Y.y /= ra;
                    Y.r.x /= ra;
                    Y.r.y /= ra;
                    Y.ⲆΔΔⲆᐃΔᐃ = 0;
                    Y.ΔⲆΔⵠᐃⵠⲆ();
                    Y.ⲆⲆΔⵠ();
                    Ww.ᐃⲆΔ.x *= ra;
                    Ww.ᐃⲆΔ.y *= ra;
                    Y.x *= ra;
                    Y.y *= ra;
                    Y.r.x *= ra;
                    Y.r.y *= ra;
                    ro.restore();
                }
            }
            B = cf.ⵠΔⲆ[41];
            Q = 0;
            for (; Q < B.length; Q++) {
                Ov(B[Q], 913);
            }
            var sa = cf.ⵠΔⲆ[67];
            for (Q = 0; Q < sa.length; Q++) {
                Ov(sa[Q]);
            }
            var S = cf.ⵠΔⲆ[62];
            for (Q = 0; S.length > Q; Q++) {
                Ov(S[Q], 419, 461);
            }
            var _ = cf.ⵠΔⲆ[70];
            for (Q = 0; Q < _.length; Q++) {
                Ov(_[Q]);
            }
            var F = cf.ⵠΔⲆ[60];
            for (Q = 0; F.length > Q; Q++) {
                Ov(F[Q], 299, 326);
            }
            var R = cf.ⵠΔⲆ[72];
            for (Q = 0; Q < R.length; Q++) {
                Ov(R[Q], 232, 1077);
            }
            var j = cf.ⵠΔⲆ[73];
            for (Q = 0; Q < j.length; Q++) {
                Ov(j[Q], 233, 1092);
            }
            ha = cf.ⵠΔⲆ[44];
            Q = 0;
            for (; ha.length > Q; Q++) {
                if (ha[Q].info & 15 && ha[Q].info !== 10) {
                    Ov(ha[Q]);
                }
            }
            ia = cf.ⵠΔⲆ[54];
            Q = 0;
            for (; ia.length > Q; Q++) {
                if (ia[Q].info & 15 && ia[Q].info !== 10) {
                    Ov(ia[Q]);
                }
            }
            ja = cf.ⵠΔⲆ[89];
            Q = 0;
            for (; Q < ja.length; Q++) {
                Ov(ja[Q], 239);
            }
            ja = cf.ⵠΔⲆ[55];
            Q = 0;
            for (; ja.length > Q; Q++) {
                if ((ja[Q].info & 15) !== 0 && ja[Q].info !== 10) {
                    Ov(ja[Q]);
                }
            }
            c = cf.ⵠΔⲆ[43];
            Q = 0;
            for (; Q < c.length; Q++) {
                Qv(c[Q]);
            }
            la = cf.ⵠΔⲆ[39];
            Q = 0;
            for (; Q < la.length; Q++) {
                if ((la[Q].info & 15) !== 0 && la[Q].info !== 10) {
                    Ov(la[Q]);
                }
            }
            ma = cf.ⵠΔⲆ[40];
            Q = 0;
            for (; Q < ma.length; Q++) {
                if ((ma[Q].info & 15) !== 0 && ma[Q].info !== 10) {
                    Ov(ma[Q]);
                }
            }
            na = cf.ⵠΔⲆ[37];
            Q = 0;
            for (; Q < na.length; Q++) {
                if (na[Q].info & 15 && na[Q].info !== 10) {
                    Ov(na[Q]);
                }
            }
            var L = cf.ⵠΔⲆ[81];
            for (Q = 0; Q < L.length; Q++) {
                Ov(L[Q], 691, 697);
            }
            var G = cf.ⵠΔⲆ[66];
            for (Q = 0; Q < G.length; Q++) {
                Ov(G[Q], 637, 687);
            }
            var W = cf.ⵠΔⲆ[65];
            for (Q = 0; Q < W.length; Q++) {
                Ov(W[Q], 673, 688);
            }
            var O = cf.ⵠΔⲆ[61];
            for (Q = 0; O.length > Q; Q++) {
                Ov(O[Q], 260, 333);
            }
            var N = cf.ⵠΔⲆ[88];
            for (Q = 0; N.length > Q; Q++) {
                Ov(N[Q], 1033, 1034);
            }
            var H = cf.ⵠΔⲆ[63];
            for (Q = 0; Q < H.length; Q++) {
                Ov(H[Q], 445, 462);
            }
            var q = cf.ⵠΔⲆ[77];
            for (Q = 0; Q < q.length; Q++) {
                Ov(q[Q]);
            }
            var U = cf.ⵠΔⲆ[68];
            for (Q = 0; U.length > Q; Q++) {
                Ov(U[Q], 918, 919);
            }
            var V = cf.ⵠΔⲆ[71];
            for (Q = 0; V.length > Q; Q++) {
                Ov(V[Q]);
            }
            var X = cf.ⵠΔⲆ[78];
            for (Q = 0; Q < X.length; Q++) {
                Ov(X[Q], 1218, 1219);
            }
            var Z = cf.ⵠΔⲆ[64];
            for (Q = 0; Z.length > Q; Q++) {
                if (Z[Q].scale === 1) {
                    Ov(Z[Q], 449, 463);
                }
            }
            Z = cf.ⵠΔⲆ[69];
            Q = 0;
            for (; Q < Z.length; Q++) {
                if (Z[Q].scale === 1) {
                    Ov(Z[Q], 450, 464);
                }
            }
            var ta = cf.ⵠΔⲆ[11];
            for (Q = 0; ta.length > Q; Q++) {
                Ov(ta[Q]);
            }
            var ua = cf.ⵠΔⲆ[2];
            for (Q = 0; ua.length > Q; Q++) {
                Ov(ua[Q], 114);
            }
            l = cf.ⵠΔⲆ[18];
            Q = 0;
            for (; Q < l.length; Q++) {
                Ov(l[Q]);
            }
            var va = cf.ⵠΔⲆ[34];
            for (Q = 0; Q < va.length; Q++) {
                Ov(va[Q]);
            }
            J = cf.ⵠΔⲆ[10];
            Q = 0;
            for (; Q < J.length; Q++) {
                if (!(J[Q].info & 1)) {
                    Ov(J[Q], 166);
                }
                J[Q].ⵠⲆⵠΔⲆ(J[Q].info >> 1);
            }
            J = cf.ⵠΔⲆ[15];
            Q = 0;
            for (; Q < J.length; Q++) {
                if (!(J[Q].info & 1)) {
                    Ov(J[Q], 171);
                }
                J[Q].ⵠⲆⵠΔⲆ(J[Q].info >> 1);
            }
            J = cf.ⵠΔⲆ[16];
            Q = 0;
            for (; Q < J.length; Q++) {
                if (!(J[Q].info & 1)) {
                    Ov(J[Q], 172);
                }
                J[Q].ⵠⲆⵠΔⲆ(J[Q].info >> 1);
            }
            J = cf.ⵠΔⲆ[17];
            Q = 0;
            for (; J.length > Q; Q++) {
                if (!(J[Q].info & 1)) {
                    Ov(J[Q], 173);
                }
                J[Q].ⵠⲆⵠΔⲆ(J[Q].info >> 1);
            }
            J = cf.ⵠΔⲆ[21];
            Q = 0;
            for (; Q < J.length; Q++) {
                if (!(J[Q].info & 1)) {
                    Ov(J[Q], 124);
                }
                J[Q].ⵠⲆⵠΔⲆ(J[Q].info >> 1);
            }
            J = cf.ⵠΔⲆ[51];
            Q = 0;
            for (; Q < J.length; Q++) {
                if (!(J[Q].info & 1)) {
                    Ov(J[Q], 218);
                }
                J[Q].ⵠⲆⵠΔⲆ(J[Q].info >> 1);
            }
            J = cf.ⵠΔⲆ[45];
            Q = 0;
            for (; Q < J.length; Q++) {
                if (!(J[Q].info & 1)) {
                    Ov(J[Q], 212);
                }
                J[Q].ⵠⲆⵠΔⲆ(J[Q].info >> 1);
            }
            J = cf.ⵠΔⲆ[46];
            Q = 0;
            for (; J.length > Q; Q++) {
                if (!(J[Q].info & 1)) {
                    Ov(J[Q], 213);
                }
                J[Q].ⵠⲆⵠΔⲆ(J[Q].info >> 1);
            }
            J = cf.ⵠΔⲆ[47];
            Q = 0;
            for (; J.length > Q; Q++) {
                if (!(J[Q].info & 1)) {
                    Ov(J[Q], 214);
                }
                J[Q].ⵠⲆⵠΔⲆ(J[Q].info >> 1);
            }
            J = cf.ⵠΔⲆ[48];
            Q = 0;
            for (; Q < J.length; Q++) {
                if (!(J[Q].info & 1)) {
                    Ov(J[Q], 215);
                }
                J[Q].ⵠⲆⵠΔⲆ(J[Q].info >> 1);
            }
            J = cf.ⵠΔⲆ[49];
            Q = 0;
            for (; J.length > Q; Q++) {
                if (!(J[Q].info & 1)) {
                    Ov(J[Q], 216);
                }
                J[Q].ⵠⲆⵠΔⲆ(J[Q].info >> 1);
            }
            J = cf.ⵠΔⲆ[53];
            Q = 0;
            for (; J.length > Q; Q++) {
                if (!(J[Q].info & 1)) {
                    Ov(J[Q], 220);
                }
                J[Q].ⵠⲆⵠΔⲆ(J[Q].info >> 1);
            }
            var wa = cf.ⵠΔⲆ[4];
            for (Q = 0; wa.length > Q; Q++) {
                Ov(wa[Q], 162);
                wa[Q].ⵠⲆⵠΔⲆ(wa[Q].info);
            }
            wa = cf.ⵠΔⲆ[7];
            Q = 0;
            for (; wa.length > Q; Q++) {
                Ov(wa[Q], 163);
                wa[Q].ⵠⲆⵠΔⲆ(wa[Q].info);
            }
            wa = cf.ⵠΔⲆ[8];
            Q = 0;
            for (; Q < wa.length; Q++) {
                Ov(wa[Q], 164);
                wa[Q].ⵠⲆⵠΔⲆ(wa[Q].info);
            }
            wa = cf.ⵠΔⲆ[9];
            Q = 0;
            for (; wa.length > Q; Q++) {
                Ov(wa[Q], 165);
                wa[Q].ⵠⲆⵠΔⲆ(wa[Q].info);
            }
            wa = cf.ⵠΔⲆ[19];
            Q = 0;
            for (; wa.length > Q; Q++) {
                Ov(wa[Q], 122);
                wa[Q].ⵠⲆⵠΔⲆ(wa[Q].info);
            }
            wa = cf.ⵠΔⲆ[50];
            Q = 0;
            for (; wa.length > Q; Q++) {
                Ov(wa[Q], 217);
                wa[Q].ⵠⲆⵠΔⲆ(wa[Q].info);
            }
            var xa = cf.ⵠΔⲆ[5];
            for (Q = 0; Q < xa.length; Q++) {
                Ov(xa[Q], 160);
                xa[Q].ⵠⲆⵠΔⲆ(xa[Q].info);
            }
            xa = cf.ⵠΔⲆ[12];
            Q = 0;
            for (; xa.length > Q; Q++) {
                Ov(xa[Q], 168);
                xa[Q].ⵠⲆⵠΔⲆ(xa[Q].info);
            }
            xa = cf.ⵠΔⲆ[13];
            Q = 0;
            for (; Q < xa.length; Q++) {
                Ov(xa[Q], 169);
                xa[Q].ⵠⲆⵠΔⲆ(xa[Q].info);
            }
            xa = cf.ⵠΔⲆ[14];
            Q = 0;
            for (; Q < xa.length; Q++) {
                Ov(xa[Q], 170);
                xa[Q].ⵠⲆⵠΔⲆ(xa[Q].info);
            }
            xa = cf.ⵠΔⲆ[20];
            Q = 0;
            for (; xa.length > Q; Q++) {
                Ov(xa[Q], 123);
                xa[Q].ⵠⲆⵠΔⲆ(xa[Q].info);
            }
            xa = cf.ⵠΔⲆ[52];
            Q = 0;
            for (; xa.length > Q; Q++) {
                Ov(xa[Q], 219);
                xa[Q].ⵠⲆⵠΔⲆ(xa[Q].info);
            }
            var ya = cf.ⵠΔⲆ[35];
            for (Q = 0; Q < ya.length; Q++) {
                var za = ya[Q];
                if (za.info > 0) {
                    Ov(za, 788);
                } else {
                    Ov(za, 182);
                }
            }
            var Aa = cf.ⵠΔⲆ[29];
            for (Q = 0; Q < Aa.length; Q++) {
                Ov(Aa[Q], 159);
            }
            Jv(qv, i, t, K, e, 111, "g", 2);
            Jv(qv, i, t, K, e, 415, "gw", 2);
            Jv(qv, i, t, K, e, 112, "d", 2);
            Jv(qv, i, t, K, e, 416, "dw", 2);
            Jv(qv, i, t, K, e, 110, "p", 0);
            Jv(qv, i, t, K, e, 241, "m", 2);
            Jv(qv, i, t, K, e, 121, "a", 2);
            Jv(qv, i, t, K, e, 202, "re", 2);
            Jv(qv, i, t, K, e, 679, "cs", 3, 3);
            Jv(qv, i, t, K, e, 679, "cs", 2, 2);
            Jv(qv, i, t, K, e, 679, "cs", 1, 1);
            Jv(qv, i, t, K, e, 679, "cs", 0, 0);
            Jv(qv, i, t, K, e, 676, "cs", 3, 3);
            Jv(qv, i, t, K, e, 676, "cs", 2, 2);
            Jv(qv, i, t, K, e, 676, "cs", 1, 1);
            Jv(qv, i, t, K, e, 676, "cs", 0, 0);
            var Ba = cf.ⵠΔⲆ[100];
            for (Q = 0; Q < Ba.length; Q++) {
                for (aa = 0; Ba[Q].info > aa; aa++) {
                    Ov(Ba[Q].ⲆΔΔᐃ[aa], 294);
                }
            }
            Jv(qv, i, t, K, e, 108, "s", 2);
            var Ca = cf.ⵠΔⲆ[24];
            for (Q = 0; Ca.length > Q; Q++) {
                Ov(Ca[Q]);
            }
            Ca = cf.ⵠΔⲆ[25];
            Q = 0;
            for (; Ca.length > Q; Q++) {
                Ov(Ca[Q]);
            }
            Ca = cf.ⵠΔⲆ[26];
            Q = 0;
            for (; Ca.length > Q; Q++) {
                Ov(Ca[Q]);
            }
            Ca = cf.ⵠΔⲆ[27];
            Q = 0;
            for (; Ca.length > Q; Q++) {
                Ov(Ca[Q]);
            }
            Ca = cf.ⵠΔⲆ[28];
            Q = 0;
            for (; Q < Ca.length; Q++) {
                Ov(Ca[Q]);
            }
            var Da = cf.ⵠΔⲆ[32];
            for (Q = 0; Da.length > Q; Q++) {
                xv(Da[Q]);
            }
            ca = cf.ⵠΔⲆ[1];
            Q = 0;
            for (; Q < ca.length; Q++) {
                Qv(ca[Q]);
            }
            ca = cf.ⵠΔⲆ[6];
            Q = 0;
            for (; ca.length > Q; Q++) {
                Qv(ca[Q]);
            }
            l = cf.ⵠΔⲆ[18];
            Q = 0;
            for (; Q < l.length; Q++) {
                if (l[Q].action == 2) {
                    Qv(l[Q]);
                }
            }
            va = cf.ⵠΔⲆ[34];
            Q = 0;
            for (; Q < va.length; Q++) {
                Qv(va[Q]);
            }
            da = cf.ⵠΔⲆ[22];
            Q = 0;
            for (; da.length > Q; Q++) {
                Qv(da[Q]);
            }
            ea = cf.ⵠΔⲆ[23];
            Q = 0;
            for (; ea.length > Q; Q++) {
                Qv(ea[Q]);
                ea[Q].ⵠⲆⵠΔⲆ(ea[Q].info);
            }
            Jv(qv, i, t, K, e, 989, "c", 0);
            Jv(qv, i, t, K, e, 109, "t", 5, 4);
            Jv(qv, i, t, K, e, 413, "f", 2, 2);
            Jv(qv, i, t, K, e, 693, "plm", 0, 0);
            Jv(qv, i, t, K, e, 307, "b", 3, 2);
            Jv(qv, i, t, K, e, 109, "t", 3, 2);
            Jv(qv, i, t, K, e, 307, "b", 1, 0);
            Jv(qv, i, t, K, e, 413, "f", 1, 1);
            Jv(qv, i, t, K, e, 693, "plm", 1, 1);
            Jv(qv, i, t, K, e, 109, "t", 1, 0);
            Jv(qv, i, t, K, e, 413, "f", 0, 0);
            Jv(qv, i, t, K, e, 693, "plm", 2, 2);
            Da = cf.ⵠΔⲆ[32];
            Q = 0;
            for (; Q < Da.length; Q++) {
                Qv(Da[Q]);
            }
            var Ea = cf.ⵠΔⲆ[56];
            for (Q = 0; Q < Ea.length; Q++) {
                Ov(Ea[Q], 221);
            }
            T = cf.ⵠΔⲆ[0];
            Q = 0;
            for (; T.length > Q; Q++) {
                if ((Y = T[Q]).ⵠᐃⵠⵠΔΔⲆ === 1 && (Y.ⵠᐃⲆᐃⲆ < 180 || Y.ⲆⵠᐃΔᐃ !== 227 && Y.ⲆⵠᐃΔᐃ !== 228 && Y.ⲆⵠᐃΔᐃ !== 91 && Y.ⲆⵠᐃΔᐃ !== 229 && Y.ⲆⵠᐃΔᐃ !== 230)) {
                    Y.ΔΔᐃᐃⲆⵠⲆ = ⲆⵠΔᐃ.ΔⲆΔⲆᐃΔⲆ(Y.ΔΔᐃᐃⲆⵠⲆ, 100, 0.018);
                    ra = 1 + Math.min(1, Math.max(Y.ΔΔᐃᐃⲆⵠⲆ, 0) / 100) * 0.18;
                    ro.save();
                    ro.scale(ra, ra);
                    Ww.ᐃⲆΔ.x /= ra;
                    Ww.ᐃⲆΔ.y /= ra;
                    Y.x /= ra;
                    Y.y /= ra;
                    Y.r.x /= ra;
                    Y.r.y /= ra;
                    Y.ΔⲆΔⵠᐃⵠⲆ();
                    Y.ⲆⲆΔⵠ();
                    Ww.ᐃⲆΔ.x *= ra;
                    Ww.ᐃⲆΔ.y *= ra;
                    Y.x *= ra;
                    Y.y *= ra;
                    Y.r.x *= ra;
                    Y.r.y *= ra;
                    ro.restore();
                }
            }
            var Fa = cf.ⵠΔⲆ[38];
            for (Q = 0; Fa.length > Q; Q++) {
                Ov(Fa[Q], 190);
                Fa[Q].ⵠⲆⵠΔⲆ(Fa[Q].info);
            }
            var Ga = cf.ⵠΔⲆ[90];
            for (Q = 0; Q < Ga.length; Q++) {
                Ov(Ga[Q], 245, 246);
            }
            var Ha = cf.ⵠΔⲆ[42];
            for (Q = 0; Q < Ha.length; Q++) {
                Ov(Ha[Q], 201);
            }
            T = cf.ⵠΔⲆ[0];
            Q = 0;
            for (; Q < T.length; Q++) {
                if (((Y = T[Q]).ⲆⵠᐃΔᐃ === 227 || Y.ⲆⵠᐃΔᐃ === 228 || Y.ⲆⵠᐃΔᐃ === 91 || Y.ⲆⵠᐃΔᐃ === 229 || Y.ⲆⵠᐃΔᐃ === 230) && Y.ⵠᐃⲆᐃⲆ > 180) {
                    Y.ⲆΔΔⲆᐃΔᐃ = 1;
                    ro.save();
                    ra = 1 + Math.min(1, Math.max(Y.ⵠⲆⵠᐃΔ - 30, 0) / 180) * 0.35;
                    ro.scale(ra, ra);
                    Ww.ᐃⲆΔ.x /= ra;
                    Ww.ᐃⲆΔ.y /= ra;
                    Y.x /= ra;
                    Y.y /= ra;
                    Y.r.x /= ra;
                    Y.r.y /= ra;
                    Y.ΔⲆΔⵠᐃⵠⲆ();
                    Y.ⲆⲆΔⵠ();
                    Ww.ᐃⲆΔ.x *= ra;
                    Ww.ᐃⲆΔ.y *= ra;
                    Y.x *= ra;
                    Y.y *= ra;
                    Y.r.x *= ra;
                    Y.r.y *= ra;
                    ro.restore();
                }
            }
            qa = cf.ⵠΔⲆ[91];
            Q = 0;
            for (; qa.length > Q; Q++) {
                if (qa[Q].ⲆΔΔⲆᐃΔᐃ === 1) {
                    Ov(qa[Q]);
                }
            }
            Z = cf.ⵠΔⲆ[64];
            Q = 0;
            for (; Q < Z.length; Q++) {
                if (Z[Q].scale > 1) {
                    Ov(Z[Q], 449, 463);
                }
            }
            Z = cf.ⵠΔⲆ[69];
            Q = 0;
            for (; Q < Z.length; Q++) {
                if (Z[Q].scale > 1) {
                    Ov(Z[Q], 450, 464);
                }
            }
            var Ia = cf.ⵠΔⲆ[74];
            for (Q = 0; Ia.length > Q; Q++) {
                Ov(Ia[Q], 235, 1107);
            }
            var Ja = cf.ⵠΔⲆ[75];
            for (Q = 0; Q < Ja.length; Q++) {
                Ov(Ja[Q], 238, 1128);
            }
            if ((lv += $w * 15) > 60) {
                lv -= 60;
            }
            Jv(mv, i, t, K, e, 1041, "fo", 2);
            Jv(mv, i, t, K, e, 244, "fod", 2);
        })();
        if (df.ⵠⲆΔⵠⲆ && cf.mode !== 2 && cf.mode !== 4 && cf.mode !== 5) {
            (function () {
                var a = Ww.ΔᐃᐃΔᐃ;
                if (a.ΔⵠᐃΔⵠ === 0) {
                    a.ⲆᐃⵠⵠⲆ = Math.max(0, a.ⲆᐃⵠⵠⲆ - $w / 10);
                } else {
                    a.ⲆᐃⵠⵠⲆ = Math.min(1, a.ⲆᐃⵠⵠⲆ + $w / 10);
                }
                for (var b = a.ᐃⵠⵠΔΔ, c = 0; b.length > c; c++) {
                    var d = b[c];
                    a.ΔΔΔ(d);
                    Gv(471, d.id, Ww.ᐃⲆΔ.x + d.x, Ww.ᐃⲆΔ.y + d.y, d.alpha);
                }
                for (c = 0; c < b.length; c++) {
                    if ((d = b[c]).ᐃⵠⲆⲆᐃ <= 0 || d.x > -Ww.ᐃⲆΔ.x + so || d.x < -Ww.ᐃⲆΔ.x - Ww.ᐃⲆΔ.w / 2 || d.y > -Ww.ᐃⲆΔ.y + gq) {
                        b.splice(c, 1);
                    }
                }
                var e = -Ww.ᐃⲆΔ.y;
                if (cf.ⲆᐃⲆⵠΔ > -1000) {
                    a.add(e);
                }
            })();
            (function () {
                var a = Ww.ΔΔⲆᐃⲆ;
                if (a.ΔⵠᐃΔⵠ === 0) {
                    a.ⲆᐃⵠⵠⲆ = Math.max(0, a.ⲆᐃⵠⵠⲆ - $w / 10);
                } else {
                    a.ⲆᐃⵠⵠⲆ = Math.min(1, a.ⲆᐃⵠⵠⲆ + $w / 10);
                }
                for (var b = a.ᐃⵠⵠΔΔ, c = 0; c < b.length; c++) {
                    var d = b[c];
                    a.ΔΔΔ(d);
                    Gv(470, d.id, Ww.ᐃⲆΔ.x + d.x, Ww.ᐃⲆΔ.y + d.y, d.alpha);
                }
                for (c = 0; c < b.length; c++) {
                    d = b[c];
                    if (d.ᐃⵠⲆⲆᐃ <= 0 || d.x > -Ww.ᐃⲆΔ.x + so || d.x < -Ww.ᐃⲆΔ.x || -Ww.ᐃⲆΔ.y + gq < d.y) {
                        b.splice(c, 1);
                    }
                }
                var e = -Ww.ᐃⲆΔ.y;
                if (cf.ᐃΔΔΔⲆ > -1000) {
                    a.add(e);
                }
            })();
            (function () {
                var a = Ww.ⲆΔⲆⵠⵠᐃᐃ;
                for (var b = a.ᐃⵠⵠΔΔ, c = 0; c < b.length; c++) {
                    var d = b[c];
                    a.ΔΔΔ(d);
                    Gv(942, d.id, Ww.ᐃⲆΔ.x + d.x, Ww.ᐃⲆΔ.y + d.y, d.alpha);
                }
                for (c = 0; c < b.length; c++) {
                    if ((d = b[c]).ᐃⵠⲆⲆᐃ <= 0 || d.x > -Ww.ᐃⲆΔ.x + so || -Ww.ᐃⲆΔ.x > d.x || -Ww.ᐃⲆΔ.y + gq < d.y) {
                        b.splice(c, 1);
                    }
                }
                var e = -Ww.ᐃⲆΔ.y;
                if (cf.ᐃⵠⵠⲆⲆ > -1000) {
                    a.add(e);
                }
            })();
        }
        if (cf.transition && a) {
            cf.transition = false;
            cf.ΔⲆⵠᐃ.Δᐃᐃ = 0;
            cf.ΔⲆⵠᐃ.ⲆⲆⲆ = Lo;
        }
    }
    function Qv(a, b) {
        if (cf.transition) {
            ro.globalAlpha = 1;
            a.ⲆΔΔᐃᐃ(b);
            cf.time = cf.time ? 0 : 1;
            ro.globalAlpha = 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ;
            a.ⲆΔΔᐃᐃ(b);
            cf.time = cf.time ? 0 : 1;
            ro.globalAlpha = 1;
        } else {
            a.ⲆΔΔᐃᐃ(b);
        }
    }
    var Rv = 0;
    var Sv = 1;
    var Tv = 2;
    var Uv = 0;
    var Vv = 1;
    var Wv = 2;
    function Xv(a, b) {
        var c = a.getBoundingClientRect();
        return {
            x: b.clientX - c.left,
            y: b.clientY - c.top
        };
    }
    function Yv(c, e, f, i, j, k, n, p, q, r, t) {
        if (Cg === q) {
            q = 0;
        }
        if (p === undefined) {
            p = 0;
        }
        if (r === undefined) {
            r = 0;
        }
        if (t === undefined) {
            t = 1;
        }
        if (k !== 1) {
            k = 0;
        }
        if (i) {
            var w = i;
        }
        var u;
        var x = {
            width: c,
            height: e,
            ᐃΔ: w,
            state: Uv,
            translate: {
                x: p,
                y: q,
                Ⲇᐃᐃⵠⵠ: p,
                ⵠⲆΔᐃᐃ: q
            },
            ΔΔᐃΔⵠⲆᐃΔⲆ: k,
            ᐃΔΔΔ: 0,
            callback: n,
            position: r,
            active: t
        };
        function d() {
            return x.ᐃΔ[x.state];
        }
        function v(a) {
            var b = x.translate;
            if (x.width === 0 || x.height === 0) {
                x.width = x.ᐃΔ[0].width;
                x.height = x.ᐃΔ[0].height;
            }
            return a.x > b.x && a.x < b.x + x.width / j && a.y > b.y && a.y < b.y + x.height / j;
        }
        k = function () {
            var a = 0;
            if (x.ΔΔᐃΔⵠⲆᐃΔⲆ === 1) {
                if (x.state === Vv || Wv === x.state) {
                    x.ᐃΔΔΔ = (0 + $w * 1000) % 1000;
                } else if (0 > 0) {
                    x.ᐃΔΔΔ = 0 > 500 ? 0 + $w * 1000 : 0 - $w * 1000;
                    if (0 > 0 || 1000 < 0) {
                        x.ᐃΔΔΔ = 0;
                    }
                }
                a = ⲆⵠΔᐃ.ⲆᐃⵠᐃΔ(500 < 0 ? 2 : 0) * 0.2;
            }
            return a;
        };
        if ((j = j === 3 ? 3 : j === 1 ? 2 : 1) === 2) {
            u = function (a) {
                var b = 1 + k();
                var c = d();
                var e = b * x.width / 2;
                var f = x.height * b / 2;
                var g = (e - x.width / 2) / 2;
                var h = (f - x.height / 2) / 2;
                Qc(a, c, x.translate.x - g, x.translate.y - h, e, f);
            };
        } else if (j === 3) {
            u = function (b) {
                var c = d();
                var e = x.width;
                var f = x.height;
                var g = (e - x.width) / 2;
                var h = (f - x.height) / 2;
                Qc(b, c, x.translate.x - g, x.translate.y - h, e, f);
            };
            j = 1;
        } else {
            u = function (a) {
                Qc(a, d(), x.translate.x, x.translate.y);
            };
        }
        return {
            info: x,
            ᐃΔᐃⲆ: function (a, b, c) {
                if (v(b)) {
                    if (c == Sv) {
                        x.state = Wv;
                    } else if (c == Tv || Rv == c && Wv != x.state) {
                        x.state = Vv;
                    }
                    return ul;
                } else {
                    x.state = Uv;
                    return Yh;
                }
            },
            ⲆⲆΔⵠ: u,
            ⲆⲆᐃⵠΔᐃⲆ: v
        };
    }
    function Zv(b, c, d, e, f) {
        var g = {
            x: d,
            y: e,
            Ⲇᐃᐃⵠⵠ: d,
            ⵠⲆΔᐃᐃ: e
        };
        return {
            translate: g,
            ⲆⲆΔⵠ: function (a) {
                Qc(a, b, g.x, g.y, b.width / 2, b.height / 2);
            },
            active: c,
            position: f
        };
    }
    function $v(f, j, i, k, n, p, a, q, t, w, l, g, u, b, x) {
        if (f.length === 0) {
            f = " ";
        }
        if (a === undefined) {
            a = 0;
        }
        if (T === q) {
            q = 0;
        }
        if (t === undefined) {
            t = 0;
        }
        if (b === Db) {
            b = 0;
        }
        var v = document.createElement("canvas");
        var m = v.getContext("2d");
        m.textBaseline = "middle";
        m.font = (x !== undefined ? x + " " : "") + k + "px " + j;
        n = n !== undefined ? Math.min(m.measureText(f).width, n) : m.measureText(f).width;
        v.width = n + a;
        v.height = k + q;
        if (p !== Db) {
            if (l !== undefined) {
                m.globalAlpha = l;
            }
            m.fillStyle = p;
            if (g !== undefined) {
                ⲆⵠⵠⵠⲆΔΔΔⲆ(m, t + 2, t, n + a - t * 2 - 4, k + q - t * 2, g);
                m.fill();
            } else {
                m.fillRect(t, t, n + a - t * 2, k + q - t * 2);
            }
            m.globalAlpha = 1;
            if (t !== 0) {
                m.lineWidth = t;
                m.strokeStyle = w;
                m.stroke();
            }
        }
        m.textBaseline = "middle";
        m.font = (hj !== x ? x + " " : "") + k + "px " + j;
        if (u !== Ua) {
            m.strokeStyle = u;
            m.lineWidth = b;
            m.lineJoin = "miter";
            m.miterLimit = 2;
            m.strokeText(f, Math.floor(a / 2), Math.floor(q / 2) + Math.floor(k / 2), n);
        }
        m.fillStyle = i;
        m.fillText(f, Math.floor(a / 2), Math.floor(q / 2) + Math.floor(k / 2), n);
        v.w2 = v.width / 2;
        v.ⵠᐃΔΔΔ = v.height / 2;
        return v;
    }
    var _v = "send";
    var aw = ⲆⵠΔᐃ.ⵠⵠᐃᐃΔⵠΔ("id") === "1" ? 1 : 0;
    var bw = ⲆⵠΔᐃ.ⵠⵠᐃᐃΔⵠΔ("password");
    var cw = ⲆⵠΔᐃ.ⵠⵠᐃᐃΔⵠΔ("debug") || undefined;
    if (Uj !== cw) {
        cw = JSON.parse(aj.decodeURIComponent(cw));
    }
    var dw = ⲆⵠΔᐃ.ⵠⵠᐃᐃΔⵠΔ("server") || Bs;
    var ew = ⲆⵠΔᐃ.ⵠⵠᐃᐃΔⵠΔ("region") || Bh;
    var fw = "starve.io";
    var gw = "https://" + fw;
    var hw = {
        ᐃⲆΔⲆΔ: 4,
        IDLE: 64,
        ΔⲆⵠⵠΔΔⲆ: 16,
        ΔᐃΔᐃⵠᐃⲆ: 32,
        ᐃⲆᐃΔ: 2,
        ⲆⵠⲆᐃⵠΔᐃ: 128,
        ⲆΔΔᐃⲆΔᐃ: 8,
        ⵠᐃΔⵠⲆᐃⵠΔⲆ: 1,
        ΔᐃⵠΔΔⵠΔ: 256
    };
    var iw = [{
        ⲆⲆΔⲆΔ: 1000,
        items: [[2, 113], [1, 117], [8, 110], [1, 143]]
    }, {
        ⲆⲆΔⲆΔ: 2000,
        items: [[2, 118], [1, 8], [2, 117], [16, 110], [2, 143]]
    }, {
        ⲆⲆΔⲆΔ: 4000,
        items: [[3, 118], [1, 1], [4, 117], [20, 110], [4, 143], [1, 114], [80, 108], [140, 109]]
    }, {
        ⲆⲆΔⲆΔ: 8000,
        items: [[1, 29], [4, 118], [1, 3], [6, 117], [30, 110], [6, 143], [1, 114], [150, 108], [200, 109], [60, 111], [2, 127]]
    }, {
        ⲆⲆΔⲆΔ: 16000,
        items: [[1, 29], [1, 4], [1, 198], [7, 136], [2, 127], [2, 118], [1, 119], [15, 163], [2, 171], [1, 159], [1, 55], [200, 108], [300, 109]]
    }, {
        ⲆⲆΔⲆΔ: 16000,
        items: [[1, 29], [1, 11], [1, 50], [1, 3], [10, 136], [4, 127], [6, 118], [3, 195], [1, 28], [200, 108], [300, 109]]
    }, {
        ⲆⲆΔⲆΔ: 16000,
        items: [[1, 29], [1, 83], [1, 36], [3, 195], [1, 0], [1, 3], [7, 136], [2, 127], [4, 118], [150, 108], [200, 109], [1, 158]]
    }, {
        ⲆⲆΔⲆΔ: 16000,
        items: [[1, 29], [1, 84], [1, 3], [7, 136], [2, 127], [4, 118], [2, 135], [4, 144], [10, 141], [6, 132], [4, 115], [1, 49], [500, 109]]
    }, {
        ⲆⲆΔⲆΔ: 16000,
        items: [[1, 29], [1, 3], [16, 138], [1, 127], [6, 118], [3, 195], [1, 48], [1, 0], [16, 125], [150, 108], [200, 109]]
    }, {
        ⲆⲆΔⲆΔ: 20000,
        items: [[1, 29], [1, 3], [1, 136], [1, 127], [3, 118], [3, 195], [1, 26], [1, 5], [1, 15], [2, 169], [50, 108], [100, 109]]
    }];
    const jw = [];
    let kw = 0;
    var lw = {
        ΔⲆᐃᐃⵠΔⵠΔⲆ: "[34]",
        ᐃⵠⲆΔⲆᐃᐃ: 1,
        ᐃΔⵠⵠΔΔⲆⵠⲆ: 14,
        ΔΔⲆᐃΔΔᐃΔΔ: 0.58,
        ⲆΔᐃⲆⵠΔΔᐃᐃ: 2000,
        ⲆᐃᐃΔⲆΔⵠᐃⵠ: 5,
        ⵠᐃⲆⵠⵠⲆⲆᐃΔ: 8000,
        ᐃΔⵠⲆΔⵠΔΔΔ: 50,
        ᐃΔΔⵠΔᐃΔΔΔ: 60000,
        ΔᐃⲆᐃΔΔⲆ: 600000,
        ΔⲆⵠᐃΔΔⵠ: 3,
        ΔⲆⲆⲆⲆᐃⵠ: 0,
        ⵠΔᐃⵠΔⲆᐃᐃⵠ: 5,
        ΔⲆⵠⵠΔΔⲆ: 0.2,
        ΔΔᐃΔⲆᐃΔᐃⲆ: 20,
        ΔΔΔᐃⲆᐃⲆⵠⲆ: 14,
        ΔⵠⲆⲆⵠΔⵠⵠΔ: 33,
        ΔᐃⵠⵠΔΔⵠ: 0.2,
        ⵠᐃᐃⵠⲆᐃⵠ: 52,
        ΔᐃᐃⲆⲆΔᐃⲆⲆ: 200,
        ⵠⲆᐃᐃΔⵠⲆΔΔ: 3,
        ᐃᐃᐃⲆΔΔⵠ: 2,
        ⲆΔΔⲆⲆΔᐃⲆΔ: 125000,
        ⲆΔΔΔⲆᐃⵠ: 4,
        ΔᐃⲆΔⲆΔΔ: 4
    };
    var mw = {
        ΔΔᐃ: 480000,
        ΔΔᐃⲆⵠᐃΔ: 10,
        ΔⲆⲆΔⲆᐃⵠ: 16,
        ᐃΔᐃΔΔΔⲆᐃᐃ: 6,
        ΔᐃΔⲆⲆΔᐃ: 60,
        ᐃⵠΔⵠᐃ: 1,
        ᐃⲆΔⵠⲆ: 2,
        ⲆᐃᐃΔⲆ: 4,
        ⲆᐃⲆᐃΔ: 8,
        ΔᐃⵠⵠΔΔⵠ: 10,
        ⲆᐃΔΔⵠⵠⲆ: 100,
        ᐃΔⲆᐃⲆⲆⲆ: 100,
        ΔᐃΔⲆᐃⵠⵠ: 100,
        ⵠⵠΔⵠᐃⵠⲆⲆⲆ: 100,
        ⲆΔΔΔⲆⵠΔ: 100,
        ⲆΔᐃⵠⲆΔⲆ: 100,
        ⲆⵠΔΔⵠᐃⲆⲆⲆ: 100,
        ⲆΔᐃⵠⲆΔⲆ: 100,
        ᐃΔᐃⲆΔⵠΔ: 100,
        ⲆΔⵠⲆⵠᐃⵠ: 100,
        ΔΔᐃⲆⲆ: 0,
        ᐃΔⵠⲆΔΔⵠ: 1,
        ᐃⲆⲆⵠⲆ: 2,
        ΔᐃΔⲆⲆ: 3,
        ⲆΔᐃᐃΔ: 4,
        ΔⵠⲆⵠⵠⲆⵠ: 5,
        ⲆᐃⲆᐃᐃ: 6,
        ⲆⲆⵠⵠΔ: 7,
        ᐃⲆⲆⵠⵠΔᐃⵠⲆ: {
            sydney: "Sydney",
            atlanta: "Atlanta",
            osaka: "Osaka",
            frankfurt: "Frankfurt",
            losangeles: "Los Angeles"
        },
        ᐃΔΔΔⲆΔᐃ: {
            0: "normal",
            2: "zombies",
            3: "vampires",
            4: "forest",
            6: "community",
            7: "experimental"
        },
        ⲆᐃⲆⵠΔΔⵠ: 0,
        ⲆⵠⵠᐃⲆⲆⵠ: 0,
        ᐃⲆΔΔᐃᐃᐃ: 30,
        ⲆΔⵠΔⵠⵠⲆᐃⲆ: 2,
        ΔᐃΔⲆⲆΔᐃ: 60000,
        ΔᐃⵠⵠⲆⲆΔⲆⵠ: 0,
        ⵠⲆⲆⵠΔΔᐃⲆΔ: 0,
        ⲆⲆᐃⲆᐃΔΔⵠⵠ: 50,
        ᐃᐃⲆΔᐃⲆΔⵠⵠ: 0,
        ⵠⵠⵠⵠᐃⵠᐃⵠᐃ: 40,
        ᐃⲆⵠⵠⲆⵠᐃⵠⵠ: 39,
        ᐃⵠᐃΔⵠΔⵠᐃΔ: 830,
        ⲆᐃⵠⵠΔⲆⲆ: 25,
        ᐃΔΔΔⵠᐃᐃ: 8,
        ᐃᐃΔⲆⲆ: 0,
        ⲆΔᐃΔⲆ: 0,
        ΔᐃᐃΔⲆᐃΔ: 200,
        ⲆᐃⵠΔᐃᐃᐃ: 0,
        ⵠᐃⵠΔΔ: 250,
        ΔᐃᐃⵠⲆΔⲆ: 150,
        ⲆᐃᐃⲆΔᐃΔ: 0,
        ⲆΔⲆᐃⲆ: 350,
        ⲆⵠⲆᐃᐃⵠΔ: 100,
        ΔΔΔⲆΔⲆΔ: 700,
        ᐃⲆΔΔⵠ: 39879
    };
    var nw = [];
    for (mt = 0; mt < 500; mt++) {
        nw[mt] = 0;
    }
    nw[47] = 1;
    nw[57] = 1;
    nw[0] = 1;
    nw[5] = 1;
    nw[6] = 1;
    nw[30] = 1;
    nw[19] = 1;
    nw[9] = 1;
    nw[62] = 1;
    nw[63] = 1;
    nw[13] = 1;
    nw[14] = 1;
    nw[15] = 1;
    nw[33] = 1;
    nw[34] = 1;
    nw[16] = 1;
    nw[17] = 1;
    nw[12] = 1;
    nw[18] = 1;
    var ow = [{
        time: 2880000
    }, {
        time: 1440000
    }, {
        time: 1920000
    }, {
        time: 1440000
    }, {
        time: 2880000
    }, {
        time: 2400000
    }, {
        time: 2400000
    }, {
        time: 4800000
    }, {
        time: 2880000
    }, {
        time: 3360000
    }, {
        time: 2880000
    }, {
        time: 3840000
    }, {
        time: 3360000
    }];
    var pw = {
        ΔⲆΔⵠᐃ: 81,
        ᐃᐃΔⵠⵠ: 56,
        ΔΔΔⵠΔ: 63,
        ⲆᐃΔⵠⵠ: 46,
        ΔⵠⲆⵠⵠ: 44,
        ΔⵠⲆᐃⲆ: 32,
        ⵠⲆⲆΔΔ: 31,
        ⲆⲆⵠᐃⲆ: 30,
        ⲆΔΔⲆΔ: 25,
        ΔᐃΔⲆΔ: 48,
        ⵠᐃᐃΔⵠ: 72,
        ᐃⲆᐃᐃᐃ: 21,
        ⵠⲆⵠⲆⵠ: 73,
        ΔⵠΔⲆΔ: 47,
        ΔⲆⲆΔΔⲆᐃ: 82,
        ⲆᐃⲆΔᐃ: 2,
        ᐃΔΔⲆⲆ: 14,
        ᐃΔⵠⲆⵠ: 8,
        ΔⵠΔⲆⵠ: 87,
        ⲆΔᐃᐃⲆ: 19,
        ⲆⲆⲆᐃᐃ: 23,
        ⲆⲆᐃⲆᐃ: 1,
        ΔⲆΔΔⲆ: 88,
        ⲆⵠΔΔⵠ: 66,
        ⲆⲆⵠᐃΔ: 18,
        ⲆⲆⵠⵠΔⵠΔ: 84,
        ⵠⵠⵠⲆⲆ: 62,
        ⵠᐃⲆⵠᐃ: 80,
        ᐃᐃᐃΔⲆ: 17,
        ⵠΔⵠⲆⲆ: 33,
        ⵠΔⲆΔⲆ: 61,
        ΔᐃⵠⲆⲆ: 6,
        ᐃⵠⵠᐃⵠ: 100,
        ᐃᐃΔᐃᐃ: 90,
        ⵠΔⲆⵠⵠ: 5,
        ⲆⵠΔⲆⲆ: 78,
        ⵠΔⵠᐃΔ: 53,
        ᐃⵠΔΔᐃⵠⲆ: 85,
        ΔⵠⵠΔⵠ: 49,
        ΔⲆⲆΔᐃ: 13,
        ᐃᐃⵠΔⵠ: 67,
        ᐃᐃⲆΔⲆ: 41,
        ΔⵠΔⵠᐃ: 0,
        ΔⲆⲆⵠⲆ: 77,
        ΔΔᐃⵠΔ: 34,
        ⲆΔᐃΔⵠ: 22,
        ᐃⲆΔΔⵠ: 3,
        ⵠᐃᐃⵠΔ: 64,
        Δᐃᐃⵠᐃ: 71,
        ⵠⲆᐃᐃΔ: 12,
        ⲆⲆⲆⲆᐃ: 29,
        ᐃᐃΔᐃⲆ: 38,
        ΔⵠΔᐃⵠ: 24,
        ᐃΔᐃΔⲆ: 35,
        ΔⵠΔⵠⵠ: 54,
        ᐃᐃᐃⲆᐃ: 27,
        ⵠⵠΔⲆᐃ: 39,
        ᐃΔΔⲆᐃ: 74,
        ⲆᐃΔΔᐃ: 20,
        ΔΔΔΔⵠ: 91,
        ⲆΔⲆΔΔ: 52,
        ⲆⵠⲆΔⲆ: 40,
        ⲆᐃᐃⵠⲆⲆΔ: 76,
        ⲆⲆⵠⲆⵠ: 51,
        ⲆΔⲆⵠᐃ: 69,
        ⲆΔⲆⲆΔ: 45,
        ᐃⲆⵠᐃᐃ: 36,
        ⲆⲆⲆⲆⲆ: 7,
        ⲆΔⵠⵠⲆ: 60,
        ⵠⵠᐃΔⵠᐃᐃ: 89,
        ⲆⵠΔⵠⵠ: 10,
        ᐃΔⵠⵠⵠ: 4,
        ⲆⲆⲆᐃⵠ: 65,
        ᐃΔᐃⵠΔ: 86,
        ⵠᐃⲆᐃΔ: 42,
        ⵠᐃΔᐃΔ: 15,
        ⵠᐃⵠᐃᐃⵠᐃ: 83,
        ⵠᐃᐃΔᐃ: 28,
        ⵠⵠⵠᐃᐃ: 68,
        ᐃΔⲆΔⲆ: 9,
        ᐃⲆⲆᐃⵠ: 75,
        ⲆⲆⵠⵠᐃ: 50,
        ᐃⲆⵠⲆⵠ: 16,
        ⵠⲆⵠⲆΔ: 26,
        ΔⵠΔⲆᐃ: 11,
        ᐃᐃⲆⲆⲆ: 70,
        ΔⵠᐃᐃⲆ: 37,
        ΔⵠᐃΔᐃ: 79,
        ⲆⲆΔⵠⵠ: 55,
        ⲆⲆΔΔⵠ: 43
    };
    var qw = [[24, 108], [25, 111], [26, 112], [27, 121], [28, 202]];
    function rw(c, e, g, i, j, k, a, l, m, n) {
        this.type = c;
        this.ⲆⲆΔⲆ = e;
        this.id = g;
        this.x = i;
        this.y = j;
        this.angle = k;
        this.ΔᐃⵠΔⲆⲆΔ = k;
        this.action = a;
        this.info = l;
        this.ᐃᐃⵠΔⲆ = n;
        this.r = {
            x: i,
            y: j
        };
        this.ⵠᐃⲆᐃⲆ = m;
        if (cf) {
            this.ⲆⵠᐃⲆ = cf.ΔᐃⵠⵠΔⵠⵠ * e + g;
        }
        switch (c) {
            case 0:
                this.ⵠΔⵠΔ = cf.ⲆⲆⵠΔ[this.ⲆⲆΔⲆ];
                this.ᐃΔΔⵠ = this.ⵠΔⵠΔ.ᐃΔΔⵠ;
                this.ⲆᐃᐃⲆⲆⲆⵠ = this.ⵠΔⵠΔ.ⲆᐃᐃⲆⲆⲆⵠ;
                this.ΔᐃΔΔΔ = this.ⵠΔⵠΔ.ΔᐃΔΔΔ;
                this.ⵠΔⵠⵠΔ = this.ⵠΔⵠΔ.ⵠΔⵠⵠΔ;
                this.ⵠΔᐃⵠⵠⲆᐃ = -1000000;
                this.ᐃⵠⵠⲆⲆ = -1000000;
                this.ᐃΔΔΔⲆ = -1000000;
                this.ⲆᐃⲆⵠΔ = -1000000;
                this.ⲆⲆⲆⲆΔⲆΔ = -1000000;
                this.ᐃΔΔⲆⵠΔⵠ = -1000000;
                this.ⲆⲆᐃΔⲆ = -1000000;
                this.ⵠⵠΔⲆⲆ = cf.mode === 2 && this.ᐃΔΔⵠ === 0 ? sn : f;
                this.ΔᐃⲆⵠⵠⵠᐃ = cf.mode === 3 && this.ᐃΔΔⵠ === 0;
                this.ⲆᐃⵠᐃᐃⲆⲆ = this.ⵠⵠΔⲆⲆ && this.ⵠΔⵠΔ.ⲆⵠΔΔⲆ === "  " ? vh : dq;
                this.ⲆⲆᐃΔⵠ = [];
                this.ⵠᐃⵠⵠΔΔⲆ = 0;
                this.ⵠΔⵠⲆ = Uq;
                this.ⵠᐃΔⲆᐃⲆⲆ = 0;
                this.ⲆΔΔⲆᐃΔᐃ = 0;
                this.ⲆⲆⵠⵠⲆ = [];
                this.r = {
                    x: i,
                    y: j
                };
                this.ⲆⲆΔⵠ = gv;
                this.ΔⲆΔⵠᐃⵠⲆ = ev;
                this.ⵠⲆⲆᐃⵠ = 0;
                this.ΔΔⵠⲆⲆ = 0;
                this.ⵠᐃⵠⵠⲆ = 0;
                this.ⵠⲆⵠΔᐃΔⲆ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(pl, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⵠⲆⵠᐃΔ = 0;
                this.ΔΔᐃᐃⲆⵠⲆ = 0;
                this.ᐃⲆⲆ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Eh, 0.6, 0.6, 0, 5, 3);
                this.ᐃⵠᐃΔΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Yh, 0.6, 0.6, 0, 5, 3);
                this.freeze = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
                this.ΔⵠⵠΔΔⵠⲆ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(og, 0.6, 0.6, 0, 5, 3);
                this.ⲆΔⵠⵠᐃⲆΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Tl, 0, 2.25, -1.5, 3.75, 7.5);
                this.ⲆⵠⲆΔⵠⵠⲆ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(true, 0, 7.5, -3, 22.5, 33.75);
                this.attack = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0, 0, -Math.PI / 3, 6, 9);
                this.ⵠⵠⲆΔⵠΔᐃᐃΔ = 0;
                this.ᐃⲆⲆⵠⲆΔΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.6, 0.6, 0, 1, 3);
                this.ᐃⵠᐃΔᐃⲆᐃ = this.ⲆᐃⵠᐃᐃⲆⲆ ? new ⲆⵠΔᐃ.ΔⲆᐃᐃ(h, 0, 2.25, -1.5, 2.75, 5.5) : 0;
                this.ⵠᐃΔⲆⵠⵠⲆ = 0;
                this.ᐃⲆᐃⲆΔᐃᐃ = 0;
                this.ⲆⲆⲆᐃΔᐃⵠ = [];
                this.ᐃΔⵠᐃⲆⵠⲆ = [];
                this.text = [];
                this.label = [];
                this.ⲆΔⲆⲆⲆΔΔ = hv;
                this.ᐃΔⵠⵠᐃ = true;
                this.right = -1;
                this.ⲆⵠᐃΔᐃ = -1;
                this.action = 64;
                this.ⵠΔΔᐃᐃⲆΔ = ps;
                this.ᐃⵠⲆⵠⲆ = 0;
                this.ⲆᐃΔᐃᐃ = Yh;
                this.bubbles = [];
                this.ΔᐃⲆⵠⲆ = 0;
                this.ᐃⵠⲆᐃΔ = -1;
                this.ΔΔΔ = function (a) {
                    if (this.info & 32768) {
                        this.ⵠΔΔᐃᐃⲆΔ = Uq;
                        this.info = this.info & -32769;
                    } else {
                        this.ⵠΔΔᐃᐃⲆΔ = Yh;
                    }
                    if (this.info & 16384) {
                        this.info = this.info & -16385;
                        this.ΔᐃⲆⵠⲆ = 1;
                    } else {
                        this.ΔᐃⲆⵠⲆ = 0;
                    }
                    this.ᐃⵠⲆⵠⲆ = Math.floor(this.info / 128);
                    this.info -= this.ᐃⵠⲆⵠⲆ * 128;
                    if (this.info === 7 || this.ⲆᐃⵠᐃᐃⲆⲆ) {
                        this.right = -1;
                    } else {
                        this.right = this.info;
                    }
                    this.ⵠᐃⵠⵠΔΔⲆ = cf.Ⲇᐃⵠⵠⵠⵠᐃⵠᐃ(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100));
                    this.ⲆⵠᐃΔᐃ = this.ᐃᐃⵠΔⲆ & 255;
                    if (this.right === 2) {
                        this.ⲆᐃΔᐃᐃ = true;
                    } else {
                        this.ⲆᐃΔᐃᐃ = false;
                    }
                    if (nw[this.right]) {
                        this.ᐃⵠΔΔᐃ = Zj;
                    } else {
                        this.ᐃⵠΔΔᐃ = false;
                    }
                    if (a & 256) {
                        this.ᐃⲆⲆⵠⲆΔΔ.ⲆⲆⲆ = os;
                        this.ᐃⲆⲆⵠⲆΔΔ.Δᐃᐃ = 0.6;
                    } else if (a & 4) {
                        this.freeze.ⲆⲆⲆ = as;
                        this.freeze.Δᐃᐃ = 0.6;
                    } else if (a & 128) {
                        this.ᐃⵠᐃΔΔ.ⲆⲆⲆ = false;
                        this.ᐃⵠᐃΔΔ.Δᐃᐃ = 0.6;
                    }
                    if (a & 8) {
                        this.ΔⵠⵠΔΔⵠⲆ.ⲆⲆⲆ = false;
                        this.ΔⵠⵠΔΔⵠⲆ.Δᐃᐃ = 0.6;
                    }
                    if (a & 2) {
                        this.ᐃⲆⲆ.ⲆⲆⲆ = as;
                        this.ᐃⲆⲆ.Δᐃᐃ = 0.6;
                    }
                    if (a & 16) {
                        this.ⵠⵠⲆΔⵠΔᐃᐃΔ = 0.58;
                        if (Zw.ⲆⲆᐃᐃᐃ && this.ᐃⵠⲆᐃΔ !== -1) {
                            Zw.ⲆⲆⵠΔ[this.ᐃⵠⲆᐃΔ].ᐃⲆⵠᐃΔⲆⵠⲆⲆ(of[this.right]);
                        }
                    }
                };
                this.ΔΔΔ();
                break;
            case 23:
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 1, 1, 0, 10, 10),
                    ΔΔΔ: false,
                    angle: 0
                };
                this.ⵠⲆΔΔⲆ = $p;
                this.ⲆΔΔᐃᐃ = wp;
                this.ⲆᐃⲆⲆΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(og, 1, 1.23, 1.18, 0.01, 0.01);
                this.ⲆⲆΔᐃᐃⵠⵠ = 0;
                this.ⲆᐃⵠᐃᐃᐃⲆ = 0;
                this.ⵠⲆⵠΔⲆ = op;
                break;
            case 22:
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 1, 1, 0, 10, 10),
                    ΔΔΔ: false,
                    angle: 0
                };
                this.ⵠⲆΔΔⲆ = xp;
                this.ⲆΔΔᐃᐃ = Uu;
                this.ⲆᐃⲆⲆΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Es, 1, 1.23, 1.18, 0.01, 0.01);
                this.ⲆⲆΔᐃᐃⵠⵠ = 0;
                this.ⲆᐃⵠᐃᐃᐃⲆ = 0;
                break;
            case 1:
            case 6:
                this.ⵠⲆΔΔⲆ = Yp;
                this.ⲆΔΔᐃᐃ = jp;
                this.ⲆΔᐃΔᐃ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 1, 1.03, 0.98, 0.3, 0.3);
                this.ⵠᐃⲆᐃ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 1, 1.23, 1.18, 0.01, 0.01);
                this.ⲆᐃⲆⲆΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 1, 1.23, 1.18, 0.01, 0.01);
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(zk, 1, 1, 0, 10, 10),
                    ΔΔΔ: f,
                    angle: 0
                };
                break;
            case 43:
                this.ⵠⲆΔΔⲆ = Op;
                this.ⲆΔΔᐃᐃ = Cp;
                this.ⵠᐃⲆᐃ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(pl, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Yh, 1, 1, 0, 10, 10),
                    ΔΔΔ: false,
                    angle: 0
                };
                this.ⲆΔΔᐃ = [];
                for (var o = 0; o < 3; o++) {
                    this.ⲆΔΔᐃ.push({
                        ⲆⲆΔⵠ: Bp,
                        ᐃΔΔΔ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                this.ⲆΔΔᐃ[0].x = this.x - 16.5;
                this.ⲆΔΔᐃ[0].y = this.y - 15.5;
                this.ⲆΔΔᐃ[0].angle = this.angle;
                this.ⲆΔΔᐃ[1].x = this.x + 36;
                this.ⲆΔΔᐃ[1].y = this.y + 17;
                this.ⲆΔΔᐃ[1].angle = this.angle;
                this.ⲆΔΔᐃ[2].x = this.x - 18.5;
                this.ⲆΔΔᐃ[2].y = this.y + 39;
                this.ⲆΔΔᐃ[2].angle = this.angle;
                break;
            case 3:
                this.ⵠⲆΔΔⲆ = kp;
                this.ⲆΔΔᐃᐃ = Tu;
                this.ⵠᐃⲆᐃ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 1, 1, 0, 10, 10),
                    ΔΔΔ: false,
                    angle: 0
                };
                this.ⲆΔΔᐃ = [];
                for (o = 0; o < 3; o++) {
                    this.ⲆΔΔᐃ.push({
                        ⲆⲆΔⵠ: Hp,
                        ᐃΔΔΔ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                this.ⲆΔΔᐃ[0].x = this.x - 16.5;
                this.ⲆΔΔᐃ[0].y = this.y - 15.5;
                this.ⲆΔΔᐃ[1].x = this.x - 5.5;
                this.ⲆΔΔᐃ[1].y = this.y + 7.5;
                this.ⲆΔΔᐃ[2].x = this.x + 18;
                this.ⲆΔΔᐃ[2].y = this.y - 5;
                break;
            case 77:
                this.ⲆⲆΔⵠ = Dp;
                this.ᐃΔΔΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Js, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ᐃⲆⲆ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(os, 0.6, 0.6, 0, 5, 3);
                break;
            case 70:
                this.ⲆⲆΔⵠ = Qp;
                this.ᐃΔΔΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ᐃⲆⲆ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Ij, 0.6, 0.6, 0, 5, 3);
                break;
            case 71:
                this.ⲆⲆΔⵠ = zp;
                this.ᐃΔΔΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Ig, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ΔΔᐃᐃⲆᐃⵠ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ᐃⲆᐃⲆⲆᐃΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ᐃⲆⲆ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(og, 0.6, 0.6, 0, 5, 3);
                this.ᐃⵠᐃΔΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(os, 0.6, 0.6, 0, 5, 3);
                break;
            case 67:
                this.ⲆⲆΔⵠ = Zp;
                this.ᐃΔΔΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ΔΔᐃᐃⲆᐃⵠ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(dq, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ᐃⲆᐃⲆⲆᐃΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Js, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ᐃⲆⲆ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(X, 0.6, 0.6, 0, 5, 3);
                this.ᐃⵠᐃΔΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 68:
                this.ⲆⲆΔⵠ = Ip;
                this.ᐃΔΔΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Eh, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ᐃⲆⲆ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Js, 0.6, 0.6, 0, 5, 3);
                break;
            case 90:
                this.ⲆⲆΔⵠ = bv;
                this.ᐃΔΔΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
                this.ᐃⲆⲆ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 91:
                this.ⲆΔⵠⵠᐃ = this.info & 15;
                this.ⲆΔΔⲆᐃΔᐃ = this.ᐃᐃⵠΔⲆ & 1;
                this.ᐃΔᐃⲆⵠᐃΔ = 0;
                this.x = this.info;
                this.y = this.ᐃᐃⵠΔⲆ;
                this.ⲆⲆΔⵠ = vp;
                this.ᐃΔΔΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
                break;
            case 80:
            case 60:
            case 61:
            case 62:
            case 63:
            case 78:
            case 65:
            case 66:
            case 88:
                this.ⲆⲆΔⵠ = bv;
                this.ᐃΔΔΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(f, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ᐃⲆⲆ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(og, 0.6, 0.6, 0, 5, 3);
                break;
            case 36:
                this.ⲆⲆΔⵠ = _p;
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(zk, 1, 1, 0, 10, 10),
                    ΔΔΔ: ps,
                    angle: 0
                };
                break;
            case 34:
                this.ⲆΔΔᐃᐃ = Kp;
                this.ⲆⲆΔⵠ = Lp;
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(pl, 1, 1, 0, 10, 10),
                    ΔΔΔ: false,
                    angle: 0
                };
                this.up = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Eh, 1, 1.03, 0.98, 0.1, 0.1);
                this.ΔⲆᐃΔⲆ = [];
                break;
            case 87:
                this.angle = Math.random() * Math.PI / 2;
            case 86:
            case 82:
                this.ⲆⲆΔⵠ = Vp;
                this.ᐃⲆⲆ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 81:
                this.ⲆⲆΔⵠ = Np;
                this.ᐃⲆⲆ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 69:
                this.scale = 1;
                this.ⲆⲆΔⵠ = Vu;
                this.ᐃΔΔΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ᐃⲆⲆ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Kn, 0.6, 0.6, 0, 5, 3);
                break;
            case 76:
                this.ⲆⲆᐃⲆΔ = 0;
                this.ⵠᐃⲆᐃ = [];
                this.ⲆᐃΔᐃᐃⲆΔ = 0;
                this.ⲆᐃΔⲆⵠΔⲆ = $u;
                this.ⲆⲆΔⵠ = Ep;
                this.ᐃΔΔΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Kn, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Ij, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ᐃⲆⲆ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 75:
                this.x = this.info;
                this.y = this.ᐃᐃⵠΔⲆ;
                this.scale = 1;
                this.ΔΔᐃᐃ = 0;
                this.ⲆⲆΔⵠ = _u;
                this.ᐃΔΔΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Ij, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ᐃⲆⲆ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 74:
                this.x = this.info;
                this.y = this.ᐃᐃⵠΔⲆ;
                this.scale = 1;
                this.ΔΔᐃᐃ = 0;
                this.ⲆⲆΔⵠ = Fp;
                this.ᐃΔΔΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ᐃⲆⲆ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 73:
                this.scale = 1;
                this.ⲆⲆΔⵠ = qp;
                this.ᐃΔΔΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Eh, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Kn, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ᐃⲆⲆ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 72:
                this.scale = 1;
                this.ⲆⲆΔⵠ = Rp;
                this.ᐃΔΔΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ᐃⲆⲆ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 64:
                this.scale = 1;
                this.ⲆⲆΔⵠ = pp;
                this.ᐃΔΔΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(X, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ᐃⲆⲆ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(og, 0.6, 0.6, 0, 5, 3);
                break;
            case 100:
                this.ⲆΔΔᐃ = [];
                for (o = 0; o < 5; o++) {
                    this.ⲆΔΔᐃ.push({
                        ⲆⲆΔⵠ: Hp,
                        ᐃΔΔΔ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Lo, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                switch (this.id % 3) {
                    case 0:
                        this.ⲆΔΔᐃ[0].x = this.x - 20.5;
                        this.ⲆΔΔᐃ[0].y = this.y - 22.5;
                        this.ⲆΔΔᐃ[1].x = this.x - 35.5;
                        this.ⲆΔΔᐃ[1].y = this.y + 7.5;
                        this.ⲆΔΔᐃ[2].x = this.x + 7.5;
                        this.ⲆΔΔᐃ[2].y = this.y - 30;
                        this.ⲆΔΔᐃ[3].x = this.x + 22.5;
                        this.ⲆΔΔᐃ[3].y = this.y;
                        this.ⲆΔΔᐃ[4].x = this.x - 7.5;
                        this.ⲆΔΔᐃ[4].y = this.y + 14.5;
                        break;
                    case 1:
                        this.ⲆΔΔᐃ[0].x = this.x - 30.5;
                        this.ⲆΔΔᐃ[0].y = this.y - 22.5;
                        this.ⲆΔΔᐃ[1].x = this.x - 15.5;
                        this.ⲆΔΔᐃ[1].y = this.y + 7.5;
                        this.ⲆΔΔᐃ[2].x = this.x + 15.5;
                        this.ⲆΔΔᐃ[2].y = this.y - 30;
                        this.ⲆΔΔᐃ[3].x = this.x + 12.5;
                        this.ⲆΔΔᐃ[3].y = this.y + 5;
                        this.ⲆΔΔᐃ[4].x = this.x - 40.5;
                        this.ⲆΔΔᐃ[4].y = this.y + 14.5;
                        break;
                    case 2:
                        this.ⲆΔΔᐃ[0].x = this.x - 20.5;
                        this.ⲆΔΔᐃ[0].y = this.y - 20.5;
                        this.ⲆΔΔᐃ[1].x = this.x - 35.5;
                        this.ⲆΔΔᐃ[1].y = this.y + 15.5;
                        this.ⲆΔΔᐃ[2].x = this.x + 7.5;
                        this.ⲆΔΔᐃ[2].y = this.y - 17;
                        this.ⲆΔΔᐃ[3].x = this.x + 22.5;
                        this.ⲆΔΔᐃ[3].y = this.y + 5;
                        this.ⲆΔΔᐃ[4].x = this.x - 7.5;
                        this.ⲆΔΔᐃ[4].y = this.y + 1.5;
                }
                break;
            case 31:
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Eh, 1, 1, 0, 10, 10),
                    ΔΔΔ: Es,
                    angle: 0
                };
                this.ⲆⲆΔⵠ = Mp;
                this.ⵠᐃⲆᐃ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.ⵠΔⵠᐃⲆⵠΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
                break;
            case 40:
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(f, 1, 1, 0, 10, 10),
                    ΔΔΔ: Yh,
                    angle: 0
                };
                this.ⲆⲆΔⵠ = fp;
                this.ⵠᐃⲆᐃ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(X, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 39:
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 1, 1, 0, 10, 10),
                    ΔΔΔ: false,
                    angle: 0
                };
                this.ⲆⲆΔⵠ = av;
                this.ⵠᐃⲆᐃ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Ig, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 44:
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(X, 1, 1, 0, 10, 10),
                    ΔΔΔ: zk,
                    angle: 0
                };
                this.ⲆⲆΔⵠ = Gp;
                this.ⵠᐃⲆᐃ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Lo, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 55:
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(og, 1, 1, 0, 10, 10),
                    ΔΔΔ: false,
                    angle: 0
                };
                this.ⲆⲆΔⵠ = Zu;
                this.ⵠᐃⲆᐃ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 54:
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Ij, 1, 1, 0, 10, 10),
                    ΔΔΔ: false,
                    angle: 0
                };
                this.ⲆⲆΔⵠ = Xu;
                this.ⵠᐃⲆᐃ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(as, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 37:
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 1, 1, 0, 10, 10),
                    ΔΔΔ: ps,
                    angle: 0
                };
                this.ⲆⲆΔⵠ = cv;
                this.ⵠᐃⲆᐃ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(os, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 24:
                this.ⲆⲆΔⵠ = Pp;
                this.rotate = 0;
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 1, 1, 0, 10, 10),
                    ΔΔΔ: og,
                    angle: 0
                };
                break;
            case 25:
                this.ⲆⲆΔⵠ = Xp;
                this.rotate = 0;
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(X, 1, 1, 0, 10, 10),
                    ΔΔΔ: Ij,
                    angle: 0
                };
                break;
            case 26:
                this.ⲆⲆΔⵠ = mp;
                this.rotate = 0;
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Js, 1, 1, 0, 10, 10),
                    ΔΔΔ: false,
                    angle: 0
                };
                break;
            case 27:
                this.ⲆⲆΔⵠ = Wu;
                this.rotate = 0;
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 1, 1, 0, 10, 10),
                    ΔΔΔ: X,
                    angle: 0
                };
                break;
            case 28:
                this.ⲆⲆΔⵠ = Up;
                this.rotate = 0;
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Kn, 1, 1, 0, 10, 10),
                    ΔΔΔ: Es,
                    angle: 0
                };
                break;
            case 32:
                this.ⵠⲆΔΔⲆ = Yu;
                this.ⲆΔΔᐃᐃ = Ap;
                this.rotate = 0;
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 1, 1, 0, 10, 10),
                    ΔΔΔ: Ia,
                    angle: 0
                };
                break;
            case 38:
                this.ⲆⲆΔⵠ = Oc;
                this.ΔⵠⲆᐃ = Math.floor(this.x / 100);
                this.ᐃᐃ = Math.floor(this.y / 100);
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 1, 1, 0, 10, 10),
                    ΔΔΔ: Js,
                    angle: 0
                };
                this.opacity = 1;
                this.ⵠⲆⵠΔⲆ = tp;
                break;
            case 42:
                this.ⲆⲆΔⵠ = Xc;
                this.ⲆᐃⲆⲆΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 1, 1.15, 1, 0.3, 0.3);
                this.color = 0;
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 1, 1, 0, 10, 10),
                    ΔΔΔ: Ia,
                    angle: 0
                };
                break;
            case 33:
            case 2:
            case 56:
            case 35:
            case 29:
                this.ⲆⲆΔⵠ = np;
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(ps, 1, 1, 0, 10, 10),
                    ΔΔΔ: false,
                    angle: 0
                };
                break;
            case 30:
                this.ⲆⲆΔⵠ = np;
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(fr, 1, 1, 0, 10, 10),
                    ΔΔΔ: Ij,
                    angle: 0
                };
                this.ⵠⲆⵠΔⲆ = tp;
                break;
            case 4:
            case 7:
            case 8:
            case 9:
            case 19:
            case 50:
            case 5:
            case 12:
            case 13:
            case 14:
            case 20:
            case 52:
                this.ⲆⲆΔⵠ = np;
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(pl, 1, 1, 0, 10, 10),
                    ΔΔΔ: false,
                    angle: 0
                };
                this.ⵠⲆⵠΔⲆ = op;
                break;
            case 41:
                this.ⲆⲆΔⵠ = Uc;
                this.opacity = 1;
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(X, 1, 1, 0, 10, 10),
                    ΔΔΔ: false,
                    angle: 0
                };
                var p = this.angle % (Math.PI / 2);
                if (p < Math.PI / 4) {
                    this.angle -= p;
                } else {
                    this.angle += Math.PI / 2 - p;
                }
                break;
            case 79:
                this.ⲆⲆΔⵠ = Vc;
                this.angle = Math.random() * Math.PI * 2;
                break;
            case 89:
                this.ⲆⲆΔⵠ = sp;
                this.angle = Math.random() * Math.PI * 2;
                break;
            case 83:
                this.ⲆⲆΔⵠ = Hc;
                this.angle = Math.PI * Math.random() * 2;
                break;
            case 84:
                this.ⲆⲆΔⵠ = up;
                this.angle = Math.PI * Math.random() * 2;
                break;
            case 85:
                this.ⲆⲆΔⵠ = gp;
                this.angle = Math.random() * Math.PI * 2;
                break;
            case 11:
                this.ΔΔΔ = function (a) {
                    this.lock = this.info & 8192 ? 1 : 0;
                    this.info = this.info & 8191;
                    this.action = a;
                };
                this.ⲆⲆΔⵠ = Yc;
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(og, 1, 1, 0, 10, 10),
                    ΔΔΔ: og,
                    angle: 0
                };
                this.lock = 0;
                this.ΔΔΔ(this.action);
                break;
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 53:
            case 10:
            case 15:
            case 16:
            case 17:
            case 21:
            case 51:
                this.ⲆⲆΔⵠ = Nc;
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 1, 1, 0, 10, 10),
                    ΔΔΔ: Lo,
                    angle: 0
                };
                this.ⵠⲆⵠΔⲆ = op;
                break;
            case 18:
                this.ⵠⲆΔΔⲆ = Tp;
                this.ⲆⲆΔⵠ = cp;
                this.ⲆΔΔᐃᐃ = Jp;
                this.ⵠᐃⲆᐃ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 1, 1.23, 1.18, 0.02, 0.02);
                this.ⲆᐃⲆⲆΔ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Js, 1, 1.23, 1.18, 0.04, 0.04);
                this.ᐃⲆⲆ = {
                    ⵠΔⲆⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 1, 1, 0, 10, 10),
                    ΔΔΔ: false,
                    angle: 0
                };
                this.ΔΔΔ = function (a) {
                    this.action = a;
                };
        }
    }
    function sw() {
        this.ⲆⵠΔΔⲆ = "";
        this.ᐃΔΔⵠ = 0;
        this.ⵠΔⵠⵠΔ = 0;
        this.ΔᐃⲆⵠⲆ = 0;
        this.ⲆᐃᐃⲆⲆⲆⵠ = 0;
        this.ΔᐃΔΔΔ = 0;
        this.ⲆᐃᐃΔⵠ = 0;
        this.ⵠᐃⵠⵠᐃ = 0;
        this.level = 0;
        this.label = null;
        this.ⲆᐃⲆΔⵠᐃΔ = null;
        this.ΔΔᐃⲆᐃⲆⲆ = null;
        this.ΔᐃᐃⲆΔ = false;
        this.ⵠΔΔᐃᐃ = 0;
    }
    function tw(b) {
        function d(c, d, e, f, i) {
            var j = d + Math.floor(f * cf.ⲆᐃΔⲆⲆ.get());
            var a = e + Math.floor(cf.ⲆᐃΔⲆⲆ.get() * f);
            var k = 10 + Math.floor(cf.ⲆᐃΔⲆⲆ.get() * (cf.ΔΔΔΔⲆ - j - 20));
            var m = 10 + Math.floor(cf.ⲆᐃΔⲆⲆ.get() * (cf.ᐃⵠᐃⲆΔ - a - 20));
            var h = k + j;
            var l = m + a;
            for (var g = 0; cf.ⵠⵠⲆⲆ.length > g; g++) {
                var n = cf.ⵠⵠⲆⲆ[g];
                if (ⲆⵠΔᐃ.ᐃᐃΔᐃᐃᐃⲆ(k, h, m, l, n.x1 / 100 - i, n.x2 / 100 + i, n.y1 / 100 - i, n.y2 / 100 + i) === 1) {
                    return 0;
                }
            }
            cf.ⵠⵠⲆⲆ.push(new cf.ⵠΔΔⵠⵠⵠⵠ(c, k, m, j, a, 15));
            return 1;
        }
        function e(b, c, d) {
            var e = c;
            for (var f = d; f < cf.ᐃⵠᐃⲆΔ; f++) {
                for (var g = c; g < cf.ΔΔΔΔⲆ && (f === d && (e = Math.max(g, e)), g <= e) && b[f][g] !== 1; g++) {
                    b[f][g] = 1;
                }
                if (g < e) {
                    break;
                }
            }
            cf.ⵠⵠⲆⲆ.push(new cf.ⵠΔΔⵠⵠⵠⵠ(cf.ᐃᐃⲆⵠⵠ, c, d, e - c + 1, f - d, 15));
        }
        function g(b, c, e, f, g) {
            for (var a = 0; g > a && d(b, c, e, f, 8) !== 1; a++);
            if (a === g) {
                return 0;
            } else {
                return 1;
            }
        }
        function j(f, e) {
            var i = cf.ⵠⵠⲆⲆ[f];
            var j = Math.floor(i.y1 / 100);
            var k = Math.floor(i.x1 / 100);
            var n = Math.floor(i.ⵠⲆᐃ / 100);
            var o = k + (A = Math.floor(i.w / 100));
            var q = 2;
            var r = n;
            var s = j;
            for (var t = k + 10 + Math.floor(cf.ⲆᐃΔⲆⲆ.get() * (A - 20)), v = t - 4; v < t + 4; v++) {
                x(j - 1, v, "wtb", 0, 1);
            }
            while (r > 0) {
                if (q !== 2) {
                    if (r < 10) {
                        for (B = 1; r > 0; B++) {
                            a(s, t, 1, 1, 0, e, B, 1);
                            r -= 1;
                            s += 1;
                        }
                    } else if (q !== 1) {
                        q = 1;
                        var w = Math.floor(1 + cf.ⲆᐃΔⲆⲆ.get() * 2);
                        var y = 1 + Math.floor(cf.ⲆᐃΔⲆⲆ.get() * 4);
                        if (t < k + 16) {
                            a(s, t, w, 0, 1, e, y, y);
                            t += w;
                        } else if (o - 16 < t) {
                            a(s, t, w, 0, -1, e, y, y);
                            t -= w;
                        } else if (cf.ⲆᐃΔⲆⲆ.get() > 0.5) {
                            a(s, t, w, 0, 1, e, y, y);
                            t += w;
                        } else {
                            a(s, t, w, 0, -1, e, y, y);
                            t -= w;
                        }
                    } else {
                        var z = Math.min(r, Math.floor(1 + cf.ⲆᐃΔⲆⲆ.get() * 4));
                        var A = 1 + Math.floor(cf.ⲆᐃΔⲆⲆ.get() * 4);
                        a(s, t, z, 1, 0, e, A, A);
                        q = 0;
                        r -= z;
                        s += z;
                    }
                } else {
                    for (var B = 10; B > 1; B--) {
                        a(s, t, 1, 1, 0, e, B, 1);
                        r -= 1;
                        s += 1;
                    }
                    q = 0;
                }
            }
            for (v = t - 1; t + 2 > v; v++) {
                x(s, v, "wtb", 0, 1);
            }
        }
        function q(a, b) {
            for (var c = 0; b.length > c; c++) {
                p(b[c][0], b[c][1], a, b[c][2]);
            }
        }
        function a(c, f, j, k, n, o, a, p) {
            var q = Math.floor(a / 2);
            var h = Math.max(1, Math.floor(a / 2));
            var l = Math.floor(p / 2);
            var g = Math.max(1, Math.floor(p / 2));
            for (var r = 0; j > r; r++) {
                for (var s = c - l; s < c + g; s++) {
                    for (var t = f - q; f + h > t; t++) {
                        if (x(s, t, "wtb", 0, 1) === 1) {
                            o.push([s, t, 1]);
                        }
                    }
                }
                c += k;
                f += n;
            }
        }
        function r(a, b) {
            return a >= 0 && b >= 0 && a < cf.ᐃⵠᐃⲆΔ && b < cf.ΔΔΔΔⲆ;
        }
        function i(a, b) {
            for (var c = 0; c < 3; c++) {
                s(a, "s", c, Math.floor(b * 18));
            }
            for (c = 0; c < 3; c++) {
                s(a, "f", c, Math.floor(b * 24));
            }
            for (c = 0; c < 3; c++) {
                s(a, "d", c, Math.max(1, Math.floor(b * 2)), 0.3);
            }
            for (c = 0; c < 3; c++) {
                s(a, "g", c, Math.floor(b * 6));
            }
            h(a);
        }
        function l(a, b) {
            for (var c = 0; c < 3; c++) {
                s(a, "s", c, Math.floor(b * 12));
            }
            for (c = 0; c < 3; c++) {
                s(a, "m", c, Math.max(1, Math.floor(b * 1)), 0.2);
            }
            s(a, "c", 0, Math.floor(b * 36));
            var d = [];
            (function (b, c) {
                var d = cf.ⵠⵠⲆⲆ[b];
                var e = Math.floor(d.y1 / 100);
                var f = Math.floor(d.x1 / 100);
                var i = Math.floor(d.ⵠⲆᐃ / 100);
                var a = Math.floor(d.w / 100);
                var j = e + Math.floor(i / 2);
                var k = f + Math.floor(a / 2);
                for (var h = 0; h < 3; h++) {
                    x(m = Math.floor(j - 3 + cf.ⲆᐃΔⲆⲆ.get() * 6), n = Math.floor(k - 3 + cf.ⲆᐃΔⲆⲆ.get() * 6), "plm", h, 1);
                }
                for (h = 0; h < 80; h++) {
                    var m;
                    var n;
                    if (x(m = Math.floor(j - 3 + cf.ⲆᐃΔⲆⲆ.get() * 6), n = Math.floor(k - 3 + cf.ⲆᐃΔⲆⲆ.get() * 6), "wtb", 0, 1) === 1) {
                        c.push([m, n, 0]);
                    }
                }
            })(a, d);
            q(a, d);
            d = [];
        }
        function x(a, b, c, d, e) {
            if (a >= 0 && b >= 0 && cf.ᐃⵠᐃⲆΔ > a && cf.ΔΔΔΔⲆ > b) {
                ⲆⵠⵠⲆ = Uw.ⲆⵠⵠⲆ;
                if (ⲆⵠⵠⲆ[a][b] === Xn) {
                    ⲆⵠⵠⲆ[a][b] = {};
                }
                if (ⲆⵠⵠⲆ[a][b][c] !== undefined) {
                    return 0;
                } else {
                    ⲆⵠⵠⲆ[a][b][c] = [];
                    ⲆⵠⵠⲆ[a][b][c][d] = [{
                        x: b * 100 + 50,
                        y: a * 100 + 50
                    }];
                    if (e === 1) {
                        (function (a, b, c, d) {
                            Dt.push([a, b, c, d]);
                        })(c, d, a, b);
                    }
                    return 1;
                }
            }
        }
        function n(a, b) {
            (function (b, c) {
                var d = cf.ⵠⵠⲆⲆ[c];
                for (var e = 0, f = 0; b > f && e < 10000; e++) {
                    var i = d.y1 + cf.ⲆᐃΔⲆⲆ.get() * d.ⵠⲆᐃ;
                    var j = d.x1 + cf.ⲆᐃΔⲆⲆ.get() * d.w;
                    var k = Math.floor(i / 100);
                    var m = Math.floor(j / 100);
                    if (cf.ⲆᐃⲆⵠᐃ(c, m * 100 + 50, k * 100 + 50) >= 600) {
                        for (var p = 1, q = k - 4; p === 1 && q <= k + 4; q++) {
                            for (var t = m - 4; p === 1 && m + 4 >= t; t++) {
                                if (Uw.ⲆⵠⵠⲆ[q][t] !== undefined) {
                                    p = 0;
                                }
                            }
                        }
                        if (p !== 0) {
                            x(k, m, "la", f % 6, 0);
                            f++;
                        }
                    }
                }
            })(b * 80, a);
            for (var c = 0; c < 3; c++) {
                s(a, "s", c, Math.floor(b * 12));
            }
            for (c = 0; c < 3; c++) {
                s(a, "g", c, Math.floor(b * 6));
            }
            for (c = 0; c < 3; c++) {
                s(a, "re", c, Math.max(1, Math.floor(b * 1)), 0.2);
            }
            for (c = 0; c < 3; c++) {
                s(a, "a", c, Math.max(1, Math.floor(b * 2)));
            }
            h(a);
        }
        function m(a, b) {
            for (var c = 0; c < 6; c++) {
                s(a, "t", c, Math.floor(b * 80));
            }
            for (c = 0; c < 4; c++) {
                s(a, "b", c, Math.floor(b * 80));
            }
            for (c = 0; c < 3; c++) {
                s(a, "s", c, Math.floor(b * 50));
            }
            var d = [];
            for (c = 0; c < 6; c++) {
                j(a, d);
            }
            q(a, d);
            d = [];
            s(a, "p", 0, Math.floor(b * 28));
            for (c = 0; c < 3; c++) {
                s(a, "g", c, Math.floor(b * 7));
            }
            for (c = 0; c < 3; c++) {
                s(a, "d", c, Math.floor(b * 2));
            }
            for (c = 0; c < 3; c++) {
                s(a, "a", c, Math.floor(b * 1));
            }
            for (c = 0; c < 3; c++) {
                s(a, "m", c, Math.floor(b * 1));
            }
            s(a, "a", 0, Math.floor(b * 1));
            h(a);
        }
        function c(a) {
            for (var b = 0; b < 3; b++) {
                s(a, "s", b, 15);
            }
            for (b = 0; b < 3; b++) {
                s(a, "a", b, 1);
            }
            for (b = 0; b < 3; b++) {
                s(a, "d", b, 1);
            }
            h(a);
        }
        function o(a, b) {
            for (var c = 0; c < 6; c++) {
                s(a, "t", c, Math.floor(b * 20));
            }
            for (c = 0; c < 4; c++) {
                s(a, "b", c, Math.floor(b * 20));
            }
            for (c = 0; c < 3; c++) {
                s(a, "s", c, Math.floor(b * 20));
            }
            var d = [];
            j(a, d);
            q(a, d);
            d = [];
            s(a, "p", 0, Math.floor(b * 24));
            for (c = 0; c < 3; c++) {
                s(a, "g", c, Math.floor(b * 5));
            }
            if (cf.mode === 2) {
                for (c = 0; c < 3; c++) {
                    s(a, "d", c, Math.floor(b * 3));
                }
                for (c = 0; c < 3; c++) {
                    s(a, "a", c, Math.floor(b * 2));
                }
            }
            h(a);
        }
        function h(a) {
            var b = cf.ⵠⵠⲆⲆ[a];
            x(-3 + Math.floor(b.y2 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
            x(3 + Math.floor(b.y1 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
            x(-3 + Math.floor(b.y2 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
            x(3 + Math.floor(b.y1 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
        }
        function p(a, b, c, d) {
            if (r(a, b) && (ⲆⵠⵠⲆ = Uw.ⲆⵠⵠⲆ, Bs === ⲆⵠⵠⲆ[a][b] && (ⲆⵠⵠⲆ[a][b] = {}), ⲆⵠⵠⲆ[a][b].r === hj)) {
                var e = 0;
                if (r(a - 1, b) && ⲆⵠⵠⲆ[a - 1][b] !== undefined && ⲆⵠⵠⲆ[a - 1][b].wtb !== undefined) {
                    e += 2;
                }
                if (r(a, b - 1) && ⲆⵠⵠⲆ[a][b - 1] !== undefined && ⲆⵠⵠⲆ[a][b - 1].wtb !== undefined) {
                    e += 8;
                }
                if (r(a, b + 1) && ⲆⵠⵠⲆ[a][b + 1] !== undefined && ⲆⵠⵠⲆ[a][b + 1].wtb !== Xn) {
                    e += 16;
                }
                if (r(a + 1, b) && ⲆⵠⵠⲆ[a + 1][b] !== undefined && ⲆⵠⵠⲆ[a + 1][b].wtb !== undefined) {
                    e += 64;
                }
                if (r(a - 1, b - 1) && (e & 10) === 10 && ⲆⵠⵠⲆ[a - 1][b - 1] !== undefined && ⲆⵠⵠⲆ[a - 1][b - 1].wtb !== ll) {
                    e += 1;
                }
                if (r(a - 1, b + 1) && (e & 18) === 18 && Xk !== ⲆⵠⵠⲆ[a - 1][b + 1] && ⲆⵠⵠⲆ[a - 1][b + 1].wtb !== undefined) {
                    e += 4;
                }
                if (r(a + 1, b - 1) && (e & 72) === 72 && Cg !== ⲆⵠⵠⲆ[a + 1][b - 1] && ⲆⵠⵠⲆ[a + 1][b - 1].wtb !== undefined) {
                    e += 32;
                }
                if (r(a + 1, b + 1) && (e & 80) === 80 && ⲆⵠⵠⲆ[a + 1][b + 1] !== la && ⲆⵠⵠⲆ[a + 1][b + 1].wtb !== undefined) {
                    e += 128;
                }
                ⲆⵠⵠⲆ[a][b].r = {};
                ⲆⵠⵠⲆ[a][b].r.ⲆΔΔⲆΔⵠΔ = e;
                ⲆⵠⵠⲆ[a][b].r.ⵠⲆΔⵠⵠⵠᐃ = d;
                ⲆⵠⵠⲆ[a][b].r.ⲆᐃⲆΔ = cf.ⲆᐃⲆⵠᐃ(c, b * 100 + 50, a * 100 + 50) - 400;
                ⲆⵠⵠⲆ[a][b].r.x = b * 100 + 50;
                ⲆⵠⵠⲆ[a][b].r.y = a * 100 + 50;
            }
        }
        function s(f, e, i, j, k) {
            var n = cf.ⵠⵠⲆⲆ[f];
            var a = Math.floor(n.x1 / 100);
            var p = Math.floor(n.y1 / 100);
            var q = Math.floor(n.w / 100);
            var t = Math.floor(n.ⵠⲆᐃ / 100);
            if (k !== undefined) {
                k = 1 - k;
                a += Math.floor(q * k / 2);
                p += Math.floor(t * k / 2);
                q -= Math.floor(q * k);
                t -= Math.floor(t * k);
            }
            var v = Uw.ⲆⵠⵠⲆ;
            for (var g = 0, w = 0; g < j && w <= 50000; w++) {
                var y = p + Math.floor(cf.ⲆᐃΔⲆⲆ.get() * t);
                var z = a + Math.floor(q * cf.ⲆᐃΔⲆⲆ.get());
                if (cf.ⲆᐃⲆⵠᐃ(f, z * 100 + 50, y * 100 + 50) >= 400) {
                    var A = v[y][z + 1];
                    if (hj === A || A[e] === undefined || A[e][i] === T) {
                        if ((A = v[y][z - 1]) === undefined || A[e] === undefined || A[e][i] === undefined) {
                            A = v[y + 1][z];
                            if (T === A || hj === A[e] || A[e][i] === undefined) {
                                if ((A = v[y - 1][z]) === undefined || Yl === A[e] || T === A[e][i]) {
                                    if ((A = v[y + 1][z - 1]) === Uj || A[e] === At || Bh === A[e][i]) {
                                        A = v[y - 1][z + 1];
                                        if (la === A || A[e] === undefined || A[e][i] === undefined) {
                                            if ((A = v[y + 1][z + 1]) === undefined || Uj === A[e] || A[e][i] === undefined) {
                                                if ((A = v[y - 1][z - 1]) === undefined || A[e] === undefined || A[e][i] === undefined) {
                                                    if (v[y][z] === undefined) {
                                                        x(y, z, e, i, 1);
                                                        g++;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        function u(a, b, c) {
            if (a[b]) {
                for (Pk = 0; Pk < a[b].length; Pk++) {
                    if (a[b][Pk]) {
                        for (ΔⵠΔⲆ = 0; ΔⵠΔⲆ < a[b][Pk].length; ΔⵠΔⲆ++) {
                            a[b][Pk][ΔⵠΔⲆ].ᐃⲆⲆ = c;
                            a[b][Pk][ΔⵠΔⲆ].ΔΔΔ = Yh;
                            a[b][Pk][ΔⵠΔⲆ].time = 0;
                            a[b][Pk][ΔⵠΔⲆ].angle = 0;
                        }
                    }
                }
            }
        }
        this.mode = 0;
        this.ΔᐃⵠⵠΔⵠⵠ = b;
        this.ΔᐃΔⵠΔ = 0;
        this.ⲆⵠⲆⵠᐃⲆⵠ = 6;
        this.ⲆⲆⵠΔ = [];
        this.ⵠΔⲆ = [];
        this.ⵠΔⲆ[0] = [];
        this.ⵠΔⲆ[100] = [];
        this.ⵠΔⲆ[80] = [];
        this.ⵠΔⲆ[60] = [];
        this.ⵠΔⲆ[67] = [];
        this.ⵠΔⲆ[70] = [];
        this.ⵠΔⲆ[77] = [];
        this.ⵠΔⲆ[71] = [];
        this.ⵠΔⲆ[72] = [];
        this.ⵠΔⲆ[73] = [];
        this.ⵠΔⲆ[74] = [];
        this.ⵠΔⲆ[65] = [];
        this.ⵠΔⲆ[66] = [];
        this.ⵠΔⲆ[62] = [];
        this.ⵠΔⲆ[88] = [];
        this.ⵠΔⲆ[91] = [];
        this.ⵠΔⲆ[90] = [];
        this.ⵠΔⲆ[63] = [];
        this.ⵠΔⲆ[78] = [];
        this.ⵠΔⲆ[64] = [];
        this.ⵠΔⲆ[69] = [];
        this.ⵠΔⲆ[68] = [];
        this.ⵠΔⲆ[79] = [];
        this.ⵠΔⲆ[89] = [];
        this.ⵠΔⲆ[83] = [];
        this.ⵠΔⲆ[84] = [];
        this.ⵠΔⲆ[85] = [];
        this.ⵠΔⲆ[81] = [];
        this.ⵠΔⲆ[82] = [];
        this.ⵠΔⲆ[86] = [];
        this.ⵠΔⲆ[34] = [];
        this.ⵠΔⲆ[36] = [];
        this.ⵠΔⲆ[61] = [];
        this.ⵠΔⲆ[2] = [];
        this.ⵠΔⲆ[1] = [];
        this.ⵠΔⲆ[6] = [];
        this.ⵠΔⲆ[3] = [];
        this.ⵠΔⲆ[5] = [];
        this.ⵠΔⲆ[12] = [];
        this.ⵠΔⲆ[13] = [];
        this.ⵠΔⲆ[14] = [];
        this.ⵠΔⲆ[20] = [];
        this.ⵠΔⲆ[52] = [];
        this.ⵠΔⲆ[4] = [];
        this.ⵠΔⲆ[7] = [];
        this.ⵠΔⲆ[8] = [];
        this.ⵠΔⲆ[9] = [];
        this.ⵠΔⲆ[19] = [];
        this.ⵠΔⲆ[50] = [];
        this.ⵠΔⲆ[41] = [];
        this.ⵠΔⲆ[10] = [];
        this.ⵠΔⲆ[15] = [];
        this.ⵠΔⲆ[16] = [];
        this.ⵠΔⲆ[17] = [];
        this.ⵠΔⲆ[21] = [];
        this.ⵠΔⲆ[51] = [];
        this.ⵠΔⲆ[45] = [];
        this.ⵠΔⲆ[46] = [];
        this.ⵠΔⲆ[47] = [];
        this.ⵠΔⲆ[48] = [];
        this.ⵠΔⲆ[49] = [];
        this.ⵠΔⲆ[53] = [];
        this.ⵠΔⲆ[18] = [];
        this.ⵠΔⲆ[29] = [];
        this.ⵠΔⲆ[56] = [];
        this.ⵠΔⲆ[11] = [];
        this.ⵠΔⲆ[22] = [];
        this.ⵠΔⲆ[23] = [];
        this.ⵠΔⲆ[30] = [];
        this.ⵠΔⲆ[38] = [];
        this.ⵠΔⲆ[33] = [];
        this.ⵠΔⲆ[31] = [];
        this.ⵠΔⲆ[55] = [];
        this.ⵠΔⲆ[37] = [];
        this.ⵠΔⲆ[43] = [];
        this.ⵠΔⲆ[44] = [];
        this.ⵠΔⲆ[54] = [];
        this.ⵠΔⲆ[39] = [];
        this.ⵠΔⲆ[40] = [];
        this.ⵠΔⲆ[32] = [];
        this.ⵠΔⲆ[24] = [];
        this.ⵠΔⲆ[25] = [];
        this.ⵠΔⲆ[26] = [];
        this.ⵠΔⲆ[27] = [];
        this.ⵠΔⲆ[28] = [];
        this.ⵠΔⲆ[35] = [];
        this.ⵠΔⲆ[87] = [];
        this.ⵠΔⲆ[42] = [];
        this.ᐃⲆᐃⵠⵠ = [];
        this.ΔΔΔΔⲆ = 260;
        this.ᐃⵠᐃⲆΔ = 260;
        this.ⵠΔⵠΔᐃΔⵠ = 100;
        this.ΔᐃᐃⲆΔⵠⲆ = 100;
        this.w = this.ΔΔΔΔⲆ * this.ⵠΔⵠΔᐃΔⵠ;
        this.ⵠⲆᐃ = this.ᐃⵠᐃⲆΔ * this.ΔᐃᐃⲆΔⵠⲆ;
        this.ⲆᐃΔⲆⲆ = new Mk.ⲆⲆᐃΔΔⵠᐃ();
        this.ⵠⵠⲆⲆ = [];
        this.ΔⲆⵠᐃ = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(dq, 0, 1, 0, 1, 1);
        this.transition = false;
        this.ⲆᐃⵠⲆⲆ = [];
        this.ΔΔⲆᐃΔ = 0;
        this.ⲆᐃΔⲆΔᐃΔ = 1;
        this.ⵠΔⲆⵠⲆᐃᐃ = 2;
        this.ⲆⲆΔⲆᐃΔΔ = 3;
        this.ᐃᐃⲆⵠⵠ = 4;
        this.ᐃⲆⵠⵠⵠΔⲆ = 10;
        this.ⲆᐃⵠⲆⲆ[this.ΔΔⲆᐃΔ] = {
            ΔΔΔᐃᐃΔⲆ: 1,
            ᐃΔᐃ: [19, 58, 43],
            ⲆΔⲆ: [4, 43, 48],
            ⵠⵠⲆⵠⵠ: ["#133a2b", "#042b30"]
        };
        this.ⲆᐃⵠⲆⲆ[this.ᐃᐃⲆⵠⵠ] = {
            ΔΔΔᐃᐃΔⲆ: 0,
            ᐃΔᐃ: [11, 106, 132],
            ⲆΔⲆ: [9, 55, 63],
            ⵠⵠⲆⵠⵠ: ["#0B6A84", "#09373F"]
        };
        this.ⲆᐃⵠⲆⲆ[this.ⲆᐃΔⲆΔᐃΔ] = {
            ΔΔΔᐃᐃΔⲆ: 0,
            ᐃΔᐃ: [235, 242, 240],
            ⲆΔⲆ: [19, 97, 103],
            ⵠⵠⲆⵠⵠ: ["#EBF2F0", "#136167"]
        };
        this.ⲆᐃⵠⲆⲆ[this.ⵠΔⲆⵠⲆᐃᐃ] = {
            ΔΔΔᐃᐃΔⲆ: 0,
            ⵠⵠⲆⵠⵠ: ["#2D2017", "#031C1E"],
            ᐃΔᐃ: [45, 32, 23],
            ⲆΔⲆ: [3, 28, 30]
        };
        this.ⲆᐃⵠⲆⲆ[this.ⲆⲆΔⲆᐃΔΔ] = {
            ⵠⵠⲆⵠⵠ: ["#4A4A4A", "#183D3C"],
            ΔΔΔᐃᐃΔⲆ: 0,
            ᐃΔᐃ: [74, 74, 74],
            ⲆΔⲆ: [24, 61, 60]
        };
        this.ⲆᐃⵠⲆⲆ[this.ᐃⲆⵠⵠⵠΔⲆ] = {
            ⲆΔⲆ: [9, 61, 56],
            ΔΔΔᐃᐃΔⲆ: 0,
            ⵠⵠⲆⵠⵠ: ["#EBD8A6", "#093D38"],
            ᐃΔᐃ: [235, 216, 166]
        };
        this.ⵠΔΔⵠⵠⵠⵠ = function (b, c, d, e, f, g) {
            this.x1 = c * 100;
            this.y1 = d * 100;
            this.w = e * 100;
            this.ⵠⲆᐃ = f * 100;
            this.x2 = (c + e) * 100;
            this.y2 = (d + f) * 100;
            this.ⵠᐃᐃ = b;
            this.Δᐃᐃ = g === undefined ? 15 : g;
        };
        this.ⲆΔΔᐃⲆ = -1000000;
        this.ᐃΔΔΔⲆ = this.ⲆΔΔᐃⲆ;
        this.ⲆᐃⲆⵠΔ = this.ⲆΔΔᐃⲆ;
        this.ᐃⵠⵠⲆⲆ = this.ⲆΔΔᐃⲆ;
        this.ⵠΔᐃⵠⵠⲆᐃ = this.ⲆΔΔᐃⲆ;
        this.ⲆⲆⲆⲆΔⲆΔ = this.ⲆΔΔᐃⲆ;
        this.ⲆⲆᐃΔⲆ = this.ⲆΔΔᐃⲆ;
        this.ΔⵠΔΔⲆΔⲆᐃᐃ = function (b) {
            var c = b.r.x;
            var d = b.r.y;
            var e = Math.floor(d / 100);
            var f = Math.floor(c / 100);
            b.ᐃΔΔΔⲆ = cf.ⲆΔΔᐃⲆ;
            b.ⲆᐃⲆⵠΔ = cf.ⲆΔΔᐃⲆ;
            b.ᐃⵠⵠⲆⲆ = cf.ⲆΔΔᐃⲆ;
            b.ⵠΔᐃⵠⵠⲆᐃ = cf.ⲆΔΔᐃⲆ;
            b.ⲆⲆᐃΔⲆ = cf.ⲆΔΔᐃⲆ;
            b.ᐃΔΔⲆⵠΔⵠ = cf.ⲆΔΔᐃⲆ;
            for (var g = 0; cf.ᐃᐃⲆⵠⵠ !== cf.ⵠⵠⲆⲆ[g].ⵠᐃᐃ; g++) {
                if (cf.ΔΔⲆᐃΔ === cf.ⵠⵠⲆⲆ[g].ⵠᐃᐃ) {
                    var h = cf.ⲆᐃⲆⵠᐃ(g, c, d);
                    b.ⵠΔᐃⵠⵠⲆᐃ = Math.max(b.ⵠΔᐃⵠⵠⲆᐃ, h);
                    if (h > 0 && cf.ⲆⲆΔⲆⵠⵠΔΔⲆ(g, c, d) === 1) {
                        b.ᐃΔΔⲆⵠΔⵠ = 1;
                    }
                } else if (cf.ⲆᐃΔⲆΔᐃΔ === cf.ⵠⵠⲆⲆ[g].ⵠᐃᐃ) {
                    b.ᐃΔΔΔⲆ = Math.max(b.ᐃΔΔΔⲆ, cf.ⲆᐃⲆⵠᐃ(g, c, d));
                } else if (cf.ⵠⵠⲆⲆ[g].ⵠᐃᐃ === cf.ᐃⲆⵠⵠⵠΔⲆ) {
                    b.ⲆᐃⲆⵠΔ = Math.max(b.ⲆᐃⲆⵠΔ, cf.ⲆᐃⲆⵠᐃ(g, c, d));
                } else if (cf.ⵠⵠⲆⲆ[g].ⵠᐃᐃ === cf.ⵠΔⲆⵠⲆᐃᐃ) {
                    b.ᐃⵠⵠⲆⲆ = Math.max(b.ᐃⵠⵠⲆⲆ, cf.ⲆᐃⲆⵠᐃ(g, c, d));
                } else if (cf.ⲆⲆΔⲆᐃΔΔ === cf.ⵠⵠⲆⲆ[g].ⵠᐃᐃ) {
                    b.ⲆⲆᐃΔⲆ = Math.max(b.ⲆⲆᐃΔⲆ, cf.ⲆᐃⲆⵠᐃ(g, c, d));
                }
            }
            if (Uw.ⲆⵠⵠⲆ[e][f].iblk) {
                b.ᐃΔΔⲆⵠΔⵠ = 1;
            }
            if (cf.ⵠΔᐃᐃΔᐃⵠᐃⵠ(f, e)) {
                b.ⲆⲆⲆⲆΔⲆΔ = b.ⲆΔΔᐃⲆ;
            } else if (Uw.ⲆⵠⵠⲆ[e][f].wtb || b.ᐃΔΔΔⲆ < 0 && b.ᐃⵠⵠⲆⲆ < 0 && b.ⵠΔᐃⵠⵠⲆᐃ < 0 && b.ᐃΔΔⲆⵠΔⵠ < 0 && b.ⲆⲆᐃΔⲆ < 0 && b.ⲆᐃⲆⵠΔ < 0) {
                b.ⲆⲆⲆⲆΔⲆΔ = 1;
            } else {
                b.ⲆⲆⲆⲆΔⲆΔ = b.ⲆΔΔᐃⲆ;
            }
        };
        this.ΔΔᐃⵠⲆΔΔⲆⵠ = function (a, b) {
            cf.ᐃΔΔΔⲆ = cf.ⲆΔΔᐃⲆ;
            cf.ⲆᐃⲆⵠΔ = cf.ⲆΔΔᐃⲆ;
            cf.ᐃⵠⵠⲆⲆ = cf.ⲆΔΔᐃⲆ;
            cf.ⲆⲆᐃΔⲆ = cf.ⲆΔΔᐃⲆ;
            cf.ⵠΔᐃⵠⵠⲆᐃ = cf.ⲆΔΔᐃⲆ;
            for (var c = 0; cf.ᐃᐃⲆⵠⵠ !== cf.ⵠⵠⲆⲆ[c].ⵠᐃᐃ; c++) {
                if (cf.ΔΔⲆᐃΔ === cf.ⵠⵠⲆⲆ[c].ⵠᐃᐃ) {
                    cf.ⵠΔᐃⵠⵠⲆᐃ = Math.max(cf.ⵠΔᐃⵠⵠⲆᐃ, cf.ⲆᐃⲆⵠᐃ(c, a, b));
                } else if (cf.ⲆᐃΔⲆΔᐃΔ === cf.ⵠⵠⲆⲆ[c].ⵠᐃᐃ) {
                    cf.ᐃΔΔΔⲆ = Math.max(cf.ᐃΔΔΔⲆ, cf.ⲆᐃⲆⵠᐃ(c, a, b));
                } else if (cf.ⵠⵠⲆⲆ[c].ⵠᐃᐃ === cf.ᐃⲆⵠⵠⵠΔⲆ) {
                    cf.ⲆᐃⲆⵠΔ = Math.max(cf.ⲆᐃⲆⵠΔ, cf.ⲆᐃⲆⵠᐃ(c, a, b));
                } else if (cf.ⵠⵠⲆⲆ[c].ⵠᐃᐃ === cf.ⵠΔⲆⵠⲆᐃᐃ) {
                    cf.ᐃⵠⵠⲆⲆ = Math.max(cf.ᐃⵠⵠⲆⲆ, cf.ⲆᐃⲆⵠᐃ(c, a, b));
                } else if (cf.ⲆⲆΔⲆᐃΔΔ === cf.ⵠⵠⲆⲆ[c].ⵠᐃᐃ) {
                    cf.ⲆⲆᐃΔⲆ = Math.max(cf.ⲆⲆᐃΔⲆ, cf.ⲆᐃⲆⵠᐃ(c, a, b));
                }
            }
            if (cf.ᐃΔΔΔⲆ < 0 && cf.ⲆⲆᐃΔⲆ < 0 && cf.ⵠΔᐃⵠⵠⲆᐃ < 0 && cf.ⲆⲆᐃΔⲆ < 0 && cf.ⲆᐃⲆⵠΔ < 0) {
                cf.ⲆⲆⲆⲆΔⲆΔ = 1;
            } else {
                cf.ⲆⲆⲆⲆΔⲆΔ = cf.ⲆΔΔᐃⲆ;
            }
        };
        this.ⲆⲆΔⲆⵠⵠΔΔⲆ = function (b, c, d) {
            var e = cf.ⵠⵠⲆⲆ[b];
            var f = 0;
            ⵠⲆᐃΔ = e.x1 + 30 + ((e.Δᐃᐃ & 4) === 0 ? 150 : 0);
            var g = c - ⵠⲆᐃΔ;
            if ((e.Δᐃᐃ & 4) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            ⵠⲆⵠΔ = e.y1 + 250 + (e.Δᐃᐃ & 1 ? 0 : 150);
            g = d - ⵠⲆⵠΔ;
            if ((e.Δᐃᐃ & 1) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            ⵠᐃΔᐃ = e.x2 + 80 + ((e.Δᐃᐃ & 8) === 0 ? -200 : 0);
            g = ⵠᐃΔᐃ - c;
            if ((e.Δᐃᐃ & 8) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            ⲆᐃⲆᐃ = e.y2 - 200 + ((e.Δᐃᐃ & 2) === 0 ? -200 : 0);
            g = ⲆᐃⲆᐃ - d;
            if ((e.Δᐃᐃ & 2) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            if (c >= ⵠⲆᐃΔ && c <= ⵠᐃΔᐃ && d >= ⵠⲆⵠΔ && ⲆᐃⲆᐃ >= d) {
                return f;
            } else {
                return 0;
            }
        };
        this.ⲆᐃⲆⵠᐃ = function (a, b, c) {
            var d = cf.ⵠⵠⲆⲆ[a];
            ⵠⲆᐃΔ = d.x1 + 30;
            ⵠⲆⵠΔ = d.y1 + 250;
            ⵠᐃΔᐃ = d.x2 + 80;
            ⲆᐃⲆᐃ = d.y2 - 200;
            if (b >= ⵠⲆᐃΔ && ⵠᐃΔᐃ >= b && ⵠⲆⵠΔ <= c && ⲆᐃⲆᐃ >= c) {
                return Math.min(b - ⵠⲆᐃΔ, ⵠᐃΔᐃ - b, c - ⵠⲆⵠΔ, ⲆᐃⲆᐃ - c);
            }
            var e = -1000000;
            if (b - ⵠⲆᐃΔ < 0) {
                e = Math.max(e, b - ⵠⲆᐃΔ);
            } else if (ⵠᐃΔᐃ - b < 0) {
                e = Math.max(e, ⵠᐃΔᐃ - b);
            }
            ᐃᐃⵠᐃⲆⲆⲆ = -1000000;
            if (ⵠⲆⵠΔ > c || c > ⲆᐃⲆᐃ) {
                if (c - ⵠⲆⵠΔ < 0) {
                    ᐃᐃⵠᐃⲆⲆⲆ = Math.max(ᐃᐃⵠᐃⲆⲆⲆ, c - ⵠⲆⵠΔ);
                } else {
                    ᐃᐃⵠᐃⲆⲆⲆ = Math.max(ᐃᐃⵠᐃⲆⲆⲆ, ⲆᐃⲆᐃ - c);
                }
                e = e !== -1000000 && ᐃᐃⵠᐃⲆⲆⲆ !== -1000000 ? Math.min(e, ᐃᐃⵠᐃⲆⲆⲆ) : ᐃᐃⵠᐃⲆⲆⲆ;
            }
            return e;
        };
        this.ΔⲆⵠΔⲆⲆΔ = function (b, c, d) {
            var e = d;
            var f = c;
            x(e, f, "isl", b, 1);
            for (var g = 0; g < 4; g++) {
                for (var h = 0; h < 3; h++) {
                    x(e - h, f - g, "iblk", 0);
                    x(e + h, f - g, "iblk", 0);
                    x(e + h, f + g, "iblk", 0);
                    x(e - h, f + g, "iblk", 0);
                }
            }
            if (b === 0) {
                for (g = 0; g < 2; g++) {
                    x(e - g, f - 4, "iblk", 0);
                    x(e + g, f - 4, "iblk", 0);
                    x(e - g, f + 4, "iblk", 0);
                    x(e + g, f + 4, "iblk", 0);
                }
                for (g = 0; g < 3; g++) {
                    x(e - 3, f + g, "iblk", 0);
                    x(e + 3, f + g, "iblk", 0);
                    x(e - 3, f - g, "iblk", 0);
                    x(e + 3, f - g, "iblk", 0);
                }
                x(e - 2, f - 4, "iblk", 0);
                x(e - 3, f - 3, "iblk", 0);
                x(e + 2, f + 4, "iblk", 0);
                x(e + 3, f + 3, "iblk", 0);
            } else if (b === 1) {
                for (g = 0; g < 3; g++) {
                    x(e - g, f - 4, "iblk", 0);
                    x(e + g, f - 4, "iblk", 0);
                    x(e - g, f + 4, "iblk", 0);
                    x(e + g, f + 4, "iblk", 0);
                }
                for (g = 0; g < 4; g++) {
                    x(e - 3, f + g, "iblk", 0);
                    x(e + 3, f + g, "iblk", 0);
                    x(e - 3, f - g, "iblk", 0);
                    x(e + 3, f - g, "iblk", 0);
                }
            } else if (b === 2) {
                for (g = 0; g < 2; g++) {
                    x(e - g, f - 4, "iblk", 0);
                    x(e + g, f - 4, "iblk", 0);
                    x(e - g, f + 4, "iblk", 0);
                    x(e + g, f + 4, "iblk", 0);
                }
                for (g = 0; g < 3; g++) {
                    x(e - 3, f + g, "iblk", 0);
                    x(e + 3, f + g, "iblk", 0);
                    x(e - 3, f - g, "iblk", 0);
                    x(e + 3, f - g, "iblk", 0);
                }
            }
        };
        this.ⲆⲆΔᐃⵠᐃⵠΔⵠ = function (b) {
            for (var c = 0; cf.ⵠⵠⲆⲆ.length > c && b > 0; c++) {
                var d = cf.ⵠⵠⲆⲆ[c];
                if (cf.ᐃᐃⲆⵠⵠ === d.ⵠᐃᐃ && d.w > 1800 && d.ⵠⲆᐃ > 1000) {
                    var f = Math.floor((d.x1 + d.w / 2) / 100);
                    var g = Math.floor((d.y1 + d.ⵠⲆᐃ / 2) / 100);
                    cf.ΔⲆⵠΔⲆⲆΔ(b % 3, f, g);
                    for (var h = 0; h < 3; h++) {
                        var j = g - 2 + Math.floor(cf.ⲆᐃΔⲆⲆ.get() * 4);
                        var k = f - 3 + Math.floor(cf.ⲆᐃΔⲆⲆ.get() * 6);
                        if (Uw.ⲆⵠⵠⲆ[j][k].s === undefined) {
                            x(j, k, "plm", h);
                        }
                        j = g - 2 + Math.floor(cf.ⲆᐃΔⲆⲆ.get() * 4);
                        k = f - 3 + Math.floor(cf.ⲆᐃΔⲆⲆ.get() * 6);
                        if (Gj === Uw.ⲆⵠⵠⲆ[j][k].plm) {
                            x(j, k, "s", h);
                        }
                    }
                    j = g - 2 + Math.floor(cf.ⲆᐃΔⲆⲆ.get() * 4);
                    k = f - 3 + Math.floor(cf.ⲆᐃΔⲆⲆ.get() * 6);
                    if (Bs === Uw.ⲆⵠⵠⲆ[j][k].plm && Uw.ⲆⵠⵠⲆ[j][k].s === Db) {
                        x(j, k, "p", 0, 1);
                    }
                    b--;
                }
            }
        };
        this.ⲆⲆᐃⵠⲆΔⵠⵠΔ = function (a) {
            cf.ⲆᐃΔⲆⲆ.ⵠΔⲆΔᐃ(a);
            var j = 0;
            while (true) {
                if (++j > 10000) {
                    return;
                }
                cf.ⵠⵠⲆⲆ = [];
                if (cf.ΔᐃΔⵠΔ === 0 && (cf.mode === 3 || cf.mode === 7 || cf.mode === 0)) {
                    cf.ΔᐃΔⵠΔ = lr;
                }
                if (cf.mode === 2) {
                    cf.ⵠⵠⲆⲆ.push(new cf.ⵠΔΔⵠⵠⵠⵠ(cf.ΔΔⲆᐃΔ, 2, 2, 80, 80, 15));
                } else if (cf.mode === 4) {
                    cf.ⵠⵠⲆⲆ.push(new cf.ⵠΔΔⵠⵠⵠⵠ(cf.ΔΔⲆᐃΔ, 2, 2, 150, 150, 15));
                } else if (cf.ΔᐃΔⵠΔ !== 0 && cf.ΔᐃΔⵠΔ.length > 0 && cf.ΔᐃΔⵠΔ[0].length > 3) {
                    for (var k = 0; k < cf.ΔᐃΔⵠΔ.length; k++) {
                        if ((F = cf.ΔᐃΔⵠΔ[k])[0] !== 0) {
                            break;
                        }
                        var p = mw.ΔΔⲆᐃΔ;
                        switch (F[1]) {
                            case "FOREST":
                                p = cf.ΔΔⲆᐃΔ;
                                break;
                            case "WINTER":
                                p = cf.ⲆᐃΔⲆΔᐃΔ;
                                break;
                            case "DESERT":
                                p = cf.ᐃⲆⵠⵠⵠΔⲆ;
                                break;
                            case "LAVA":
                                p = cf.ⵠΔⲆⵠⲆᐃᐃ;
                                break;
                            case "DRAGON":
                                p = cf.ⲆⲆΔⲆᐃΔΔ;
                        }
                        cf.ⵠⵠⲆⲆ.push(new cf.ⵠΔΔⵠⵠⵠⵠ(p, F[2], F[3], F[4], F[5], F[6], F[7]));
                    }
                } else if (cf.ΔᐃΔⵠΔ !== 0) {
                    for (k = 0; cf.ΔᐃΔⵠΔ.length > k; k++) {
                        var s = cf.ΔᐃΔⵠΔ[k];
                        p = mw.ΔΔⲆᐃΔ;
                        switch (s[0]) {
                            case "FOREST":
                                p = cf.ΔΔⲆᐃΔ;
                                break;
                            case "WINTER":
                                p = cf.ⲆᐃΔⲆΔᐃΔ;
                                break;
                            case "DESERT":
                                p = cf.ᐃⲆⵠⵠⵠΔⲆ;
                                break;
                            case "LAVA":
                                p = cf.ⵠΔⲆⵠⲆᐃᐃ;
                                break;
                            case "DRAGON":
                                p = cf.ⲆⲆΔⲆᐃΔΔ;
                        }
                        if (g(p, s[1], s[2], 0, (k + 1) * 10) === 0) {
                            break;
                        }
                    }
                    if (cf.ΔᐃΔⵠΔ.length !== k) {
                        continue;
                    }
                }
                break;
            }
            ⲆΔⲆⵠΔΔⲆⵠⵠ();
            var t = [];
            for (var u = 0; cf.ᐃⵠᐃⲆΔ > u; u++) {
                t[u] = new Array(cf.ΔΔΔΔⲆ);
                for (var v = 0; v < cf.ΔΔΔΔⲆ; v++) {
                    t[u][v] = 0;
                }
            }
            for (u = 0; u < cf.ⵠⵠⲆⲆ.length; u++) {
                for (var A = (s = cf.ⵠⵠⲆⲆ[u]).x2 / 100, B = s.y2 / 100, C = s.x1 / 100; C <= A; C++) {
                    for (var D = s.y1 / 100; D <= B; D++) {
                        t[D][C] = 1;
                    }
                }
            }
            for (D = 0; D < cf.ᐃⵠᐃⲆΔ; D++) {
                for (C = 0; C < cf.ΔΔΔΔⲆ; C++) {
                    if (t[D][C] === 0) {
                        e(t, C, D);
                    }
                }
            }
            Uw = {
                w: cf.ΔΔΔΔⲆ,
                ⵠⲆᐃ: cf.ᐃⵠᐃⲆΔ,
                ⲆⵠⵠⲆ: []
            };
            for (u = 0; u < cf.ᐃⵠᐃⲆΔ; u++) {
                Uw.ⲆⵠⵠⲆ[u] = [];
            }
            if (cf.ΔᐃΔⵠΔ !== 0 && cf.ΔᐃΔⵠΔ.length > 0 && cf.ΔᐃΔⵠΔ[0].length > 3) {
                for (k = 0; k < cf.ΔᐃΔⵠΔ.length; k++) {
                    if ((F = cf.ΔᐃΔⵠΔ[k])[1] === "isl") {
                        cf.ΔⲆⵠΔⲆⲆΔ(F[2], F[3], F[4]);
                    }
                }
            } else {
                cf.ⲆⲆΔᐃⵠᐃⵠΔⵠ(cf.ⲆⵠⲆⵠᐃⲆⵠ);
            }
            if (cf.ΔᐃΔⵠΔ !== 0 && cf.ΔᐃΔⵠΔ.length > 0 && cf.ΔᐃΔⵠΔ[0].length > 3) {
                var E = [];
                for (k = 0; cf.ΔᐃΔⵠΔ.length > k; k++) {
                    var F;
                    if ((F = cf.ΔᐃΔⵠΔ[k])[0] === 1) {
                        if (F[1] === "r") {
                            x(F[3], F[2], "wtb", 0, 1);
                            E.push([F[3], F[2], F[4]]);
                        } else {
                            x(F[4], F[3], F[1], F[2], F[5]);
                        }
                    }
                }
                q(0, E);
                E = [];
            } else {
                for (u = 0; cf.ⵠⵠⲆⲆ.length > u; u++) {
                    s = cf.ⵠⵠⲆⲆ[u];
                    if (cf.mode === 4) {
                        if (s.ⵠᐃᐃ === cf.ΔΔⲆᐃΔ) {
                            m(u, s.w / 10000);
                        }
                    } else {
                        if (s.ⵠᐃᐃ === cf.ΔΔⲆᐃΔ) {
                            o(u, s.w / 10000);
                        }
                        if (cf.ⵠΔⲆⵠⲆᐃᐃ === s.ⵠᐃᐃ) {
                            n(u, s.w / 10000);
                        }
                        if (s.ⵠᐃᐃ === cf.ⲆᐃΔⲆΔᐃΔ) {
                            i(u, s.w / 10000);
                        }
                        if (cf.ᐃⲆⵠⵠⵠΔⲆ === s.ⵠᐃᐃ) {
                            l(u, s.w / 10000);
                        }
                        if (s.ⵠᐃᐃ === cf.ⲆⲆΔⲆᐃΔΔ) {
                            c(u);
                        }
                    }
                }
            }
            Ht("isl", 1);
            Ht("wtb", 20);
            Ht("la", 1);
            Ht("c", 1);
            Ht("s", 1);
            Ht("f", 1);
            Ht("p", 1);
            Ht("g", 1);
            Ht("d", 1);
            Ht("a", 1);
            Ht("re", 1);
            Ht("m", 1);
            Dt = [];
            cf.ΔΔⵠⲆⵠΔⲆⲆⵠ(Uw);
        };
        this.ⵠΔᐃΔ = x;
        this.ΔΔⵠⲆⵠΔⲆⲆⵠ = function (b) {
            for (var c = 0; this.ᐃⵠᐃⲆΔ > c; c++) {
                for (var d = 0; d < this.ΔΔΔΔⲆ; d++) {
                    b.ⲆⵠⵠⲆ[c] ||= [];
                    if (b.ⲆⵠⵠⲆ[c][d]) {
                        var e = b.ⲆⵠⵠⲆ[c][d];
                        if (e.de && e.de.length > 0) {
                            for (var g = 0; e.de.length > g; g++) {
                                if (e.de[g] && e.de[g].length > 0) {
                                    e.de = e.de[g][0];
                                    if (g >= 41 && g <= 49) {
                                        e.de.scale = 3;
                                        var h = Math.floor(Math.random() * 3 + 1);
                                        e.de.ᐃⵠⵠ = [];
                                        for (var j = 0; j < h; j++) {
                                            e.de.ᐃⵠⵠ.push({
                                                x: Math.random() * 120 - 60,
                                                y: Math.random() * 120 - 60,
                                                angle: Math.random() * Math.PI * 2,
                                                ᐃΔⲆⲆ: 41 + Math.floor(Math.random() * 9)
                                            });
                                        }
                                    } else if (g >= 19 && g <= 26) {
                                        e.de.scale = 3;
                                        h = Math.floor(Math.random() * 3 + 1);
                                        e.de.ᐃⵠⵠ = [];
                                        for (j = 0; h > j; j++) {
                                            e.de.ᐃⵠⵠ.push({
                                                x: Math.random() * 120 - 60,
                                                y: Math.random() * 120 - 60,
                                                angle: Math.PI * Math.random() * 2,
                                                ᐃΔⲆⲆ: 19 + Math.floor(Math.random() * 8)
                                            });
                                        }
                                    } else if (g <= 15 || g >= 27 && g <= 40) {
                                        e.de.angle = 0;
                                        e.de.scale = 2;
                                        e.de.ᐃΔⲆⲆ = g;
                                    } else {
                                        e.de.angle = Math.PI * Math.random() * 2;
                                        e.de.scale = 1;
                                        e.de.ᐃΔⲆⲆ = g;
                                    }
                                }
                            }
                        }
                        u(e, "p", new ⲆⵠΔᐃ.ΔⲆᐃᐃ(f, 1, 1, 0, 10, 10));
                        u(e, "t", new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 1, 1, 0, 10, 10));
                        u(e, "s", new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Dk, 1, 1, 0, 10, 10));
                        u(e, "g", new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 1, 1, 0, 10, 10));
                        u(e, "d", new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 1, 1, 0, 10, 10));
                        u(e, "b", new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Ij, 1, 1, 0, 10, 10));
                        u(e, "f", new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 1, 1, 0, 10, 10));
                        u(e, "sw", new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Ia, 1, 1, 0, 10, 10));
                        u(e, "gw", new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 1, 1, 0, 10, 10));
                        u(e, "dw", new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Js, 1, 1, 0, 10, 10));
                        u(e, "a", new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Es, 1, 1, 0, 10, 10));
                        u(e, "cs", new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Eh, 1, 1, 0, 10, 10));
                        u(e, "plm", new ⲆⵠΔᐃ.ΔⲆᐃᐃ(zk, 1, 1, 0, 10, 10));
                        u(e, "re", new ⲆⵠΔᐃ.ΔⲆᐃᐃ(ps, 1, 1, 0, 10, 10));
                        u(e, "c", new ⲆⵠΔᐃ.ΔⲆᐃᐃ(fr, 1, 1, 0, 10, 10));
                        u(e, "m", new ⲆⵠΔᐃ.ΔⲆᐃᐃ(zk, 1, 1, 0, 10, 10));
                    } else {
                        b.ⲆⵠⵠⲆ[c][d] = [];
                    }
                }
            }
        };
        this.time = 0;
        this.ⵠΔΔⲆᐃ = {
            translate: {
                y: 0,
                x: 0
            },
            now: 0,
            ⵠΔⲆΔᐃ: 0,
            ⵠⲆⲆⵠⲆ: 0
        };
        this.ᐃⲆᐃᐃΔⲆⲆᐃⲆ = function () {
            this.ᐃⲆᐃⵠⵠ = [];
            this.ⵠΔⲆ[0] = [];
            this.ⵠΔⲆ[2] = [];
            this.ⵠΔⲆ[1] = [];
            this.ⵠΔⲆ[6] = [];
            this.ⵠΔⲆ[3] = [];
            this.ⵠΔⲆ[5] = [];
            this.ⵠΔⲆ[12] = [];
            this.ⵠΔⲆ[13] = [];
            this.ⵠΔⲆ[14] = [];
            this.ⵠΔⲆ[20] = [];
            this.ⵠΔⲆ[52] = [];
            this.ⵠΔⲆ[30] = [];
            this.ⵠΔⲆ[56] = [];
            this.ⵠΔⲆ[38] = [];
            this.ⵠΔⲆ[33] = [];
            this.ⵠΔⲆ[31] = [];
            this.ⵠΔⲆ[55] = [];
            this.ⵠΔⲆ[37] = [];
            this.ⵠΔⲆ[43] = [];
            this.ⵠΔⲆ[44] = [];
            this.ⵠΔⲆ[54] = [];
            this.ⵠΔⲆ[39] = [];
            this.ⵠΔⲆ[40] = [];
            this.ⵠΔⲆ[32] = [];
            this.ⵠΔⲆ[24] = [];
            this.ⵠΔⲆ[25] = [];
            this.ⵠΔⲆ[26] = [];
            this.ⵠΔⲆ[27] = [];
            this.ⵠΔⲆ[28] = [];
            this.ⵠΔⲆ[35] = [];
            this.ⵠΔⲆ[4] = [];
            this.ⵠΔⲆ[7] = [];
            this.ⵠΔⲆ[8] = [];
            this.ⵠΔⲆ[9] = [];
            this.ⵠΔⲆ[19] = [];
            this.ⵠΔⲆ[50] = [];
            this.ⵠΔⲆ[41] = [];
            this.ⵠΔⲆ[10] = [];
            this.ⵠΔⲆ[15] = [];
            this.ⵠΔⲆ[16] = [];
            this.ⵠΔⲆ[17] = [];
            this.ⵠΔⲆ[21] = [];
            this.ⵠΔⲆ[51] = [];
            this.ⵠΔⲆ[45] = [];
            this.ⵠΔⲆ[46] = [];
            this.ⵠΔⲆ[47] = [];
            this.ⵠΔⲆ[48] = [];
            this.ⵠΔⲆ[49] = [];
            this.ⵠΔⲆ[53] = [];
            this.ⵠΔⲆ[18] = [];
            this.ⵠΔⲆ[29] = [];
            this.ⵠΔⲆ[56] = [];
            this.ⵠΔⲆ[11] = [];
            this.ⵠΔⲆ[22] = [];
            this.ⵠΔⲆ[23] = [];
            this.ⵠΔⲆ[100] = [];
            this.ⵠΔⲆ[80] = [];
            this.ⵠΔⲆ[60] = [];
            this.ⵠΔⲆ[67] = [];
            this.ⵠΔⲆ[70] = [];
            this.ⵠΔⲆ[77] = [];
            this.ⵠΔⲆ[71] = [];
            this.ⵠΔⲆ[72] = [];
            this.ⵠΔⲆ[73] = [];
            this.ⵠΔⲆ[74] = [];
            this.ⵠΔⲆ[65] = [];
            this.ⵠΔⲆ[66] = [];
            this.ⵠΔⲆ[62] = [];
            this.ⵠΔⲆ[88] = [];
            this.ⵠΔⲆ[91] = [];
            this.ⵠΔⲆ[90] = [];
            this.ⵠΔⲆ[63] = [];
            this.ⵠΔⲆ[78] = [];
            this.ⵠΔⲆ[75] = [];
            this.ⵠΔⲆ[76] = [];
            this.ⵠΔⲆ[64] = [];
            this.ⵠΔⲆ[69] = [];
            this.ⵠΔⲆ[68] = [];
            this.ⵠΔⲆ[79] = [];
            this.ⵠΔⲆ[89] = [];
            this.ⵠΔⲆ[83] = [];
            this.ⵠΔⲆ[84] = [];
            this.ⵠΔⲆ[85] = [];
            this.ⵠΔⲆ[81] = [];
            this.ⵠΔⲆ[82] = [];
            this.ⵠΔⲆ[86] = [];
            this.ⵠΔⲆ[34] = [];
            this.ⵠΔⲆ[36] = [];
            this.ⵠΔⲆ[61] = [];
            this.ⵠΔⲆ[87] = [];
            this.ⵠΔⲆ[42] = [];
        };
        this.ΔⵠΔᐃⵠⲆⲆⲆΔ = function (a) {
            if (this.ᐃⲆᐃⵠⵠ[a]) {
                ᐃⵠⲆΔ = this.ᐃⲆᐃⵠⵠ[a].type;
                this.ᐃⲆᐃⵠⵠ[a] = null;
                for (var b = this.ⵠΔⲆ[ᐃⵠⲆΔ], c = 0; b.length > c; c++) {
                    if (b[c].ⲆⵠᐃⲆ == a) {
                        b.splice(c, 1);
                        return;
                    }
                }
            }
        };
        this.Ⲇᐃⵠⵠⵠⵠᐃⵠᐃ = function (a, b) {
            for (var c = 0; this.ⵠΔⲆ[56].length > c; c++) {
                var d = this.ⵠΔⲆ[56][c];
                if (Math.floor(d.x / 100) === b && Math.floor(d.y / 100) === a) {
                    return 1;
                }
            }
            return 0;
        };
        this.ⵠΔᐃᐃΔᐃⵠᐃⵠ = function (a, b) {
            for (var c = 0; c < this.ⵠΔⲆ[30].length; c++) {
                var d = this.ⵠΔⲆ[30][c];
                if (a == Math.floor(d.x / 100) && Math.floor(d.y / 100) == b) {
                    return sn;
                }
            }
            return false;
        };
        this.ΔΔᐃᐃⵠ = function (b) {
            for (var e = 0; e < b.length; e++) {
                ⲆⲆⵠᐃ = b[e];
                if (ⲆⲆⵠᐃ.angle != ⲆⲆⵠᐃ.ΔᐃⵠΔⲆⲆΔ) {
                    var j = Math.PI * 2;
                    ⲆⲆⵠᐃ.angle = (ⲆⲆⵠᐃ.angle + j) % j;
                    ⲆⲆⵠᐃ.ΔᐃⵠΔⲆⲆΔ = (ⲆⲆⵠᐃ.ΔᐃⵠΔⲆⲆΔ + j) % j;
                    if (ⲆⲆⵠᐃ.angle != ⲆⲆⵠᐃ.ΔᐃⵠΔⲆⲆΔ) {
                        var q = ⲆⲆⵠᐃ.ΔᐃⵠΔⲆⲆΔ - ⲆⲆⵠᐃ.angle;
                        var B = Math.abs(q);
                        if (Math.PI < B) {
                            B = Math.PI * 2 - B;
                        }
                        var D = B / Math.PI * 3 * 10 * $w;
                        if (Math.PI < q) {
                            ⲆⲆⵠᐃ.angle -= D;
                        } else if (q < -Math.PI) {
                            ⲆⲆⵠᐃ.angle += D;
                        } else if (q < 0) {
                            ⲆⲆⵠᐃ.angle -= D;
                        } else {
                            ⲆⲆⵠᐃ.angle += D;
                        }
                        ⲆⲆⵠᐃ.angle = (ⲆⲆⵠᐃ.angle + j) % j;
                        if (Math.abs(ⲆⲆⵠᐃ.angle - ⲆⲆⵠᐃ.ΔᐃⵠΔⲆⲆΔ) < D) {
                            ⲆⲆⵠᐃ.angle = ⲆⲆⵠᐃ.ΔᐃⵠΔⲆⲆΔ;
                        }
                    }
                }
                Math.floor(ⲆⲆⵠᐃ.r.y / 100);
                Math.floor(ⲆⲆⵠᐃ.r.x / 100);
                if (ⲆⲆⵠᐃ.x != ⲆⲆⵠᐃ.r.x || ⲆⲆⵠᐃ.y != ⲆⲆⵠᐃ.r.y) {
                    if (ⲆⲆⵠᐃ.action & 64) {
                        ⲆⲆⵠᐃ.action -= 64;
                    }
                    ⲆⲆⵠᐃ.action |= 32;
                    var E = ⲆⵠΔᐃ.ᐃⵠⵠⵠΔᐃΔ(ⲆⲆⵠᐃ, ⲆⲆⵠᐃ.r) + Math.PI;
                    var F = ⲆⲆⵠᐃ.ⵠᐃⲆᐃⲆ * $w;
                    var G = ⲆⵠΔᐃ.ⵠⲆⲆᐃΔᐃⵠ(F, E);
                    if (ⲆⵠΔᐃ.ⵠⵠᐃΔᐃᐃΔ(G) < ⲆⵠΔᐃ.ⵠⵠᐃΔᐃᐃΔ(ⲆⵠΔᐃ.ⲆΔⲆΔΔΔⵠ(ⲆⲆⵠᐃ, ⲆⲆⵠᐃ.r))) {
                        ⲆⵠΔᐃ.ⵠⲆΔᐃⵠⲆⲆ(ⲆⲆⵠᐃ, G);
                    } else {
                        if (ⲆⲆⵠᐃ.action & 32) {
                            ⲆⲆⵠᐃ.action -= 32;
                        }
                        ⲆⲆⵠᐃ.action |= 64;
                        ⲆⵠΔᐃ.ΔᐃⲆᐃΔⲆΔ(ⲆⲆⵠᐃ.r, ⲆⲆⵠᐃ);
                    }
                }
                if (ⲆⲆⵠᐃ.ⲆᐃΔᐃᐃ) {
                    var H = ⲆⲆⵠᐃ.bubbles;
                    if ((M = H.length) === 0 || M < 20 && H[M - 1].ᐃⵠⲆⲆᐃ < 0.95) {
                        H.push({
                            id: Math.floor(Math.random() * ΔⲆ[540][0].length),
                            x: Math.floor(ⲆⲆⵠᐃ.x + Math.random() * 80 - 40),
                            y: Math.floor(ⲆⲆⵠᐃ.y + Math.random() * 80 - 40),
                            ᐃⵠⲆⲆᐃ: 1
                        });
                    }
                    for (var I = 0; I < M; I++) {
                        H[I].ᐃⵠⲆⲆᐃ = Math.max(0, H[I].ᐃⵠⲆⲆᐃ - $w);
                    }
                    for (I = 0; I < M; I++) {
                        if (H[I].ᐃⵠⲆⲆᐃ === 0) {
                            H.splice(I, 1);
                            break;
                        }
                    }
                }
                var K = 0;
                if (ⲆⲆⵠᐃ.ⵠΔⵠⲆ && df.ⵠⲆΔⵠⲆ) {
                    var L = ⲆⲆⵠᐃ.ⲆⲆⵠⵠⲆ;
                    var M = L.length;
                    if (ⲆⲆⵠᐃ.ⲆⲆⲆⲆΔⲆΔ > 0 && ⲆⲆⵠᐃ.ⲆⵠᐃΔᐃ !== 227 && ⲆⲆⵠᐃ.ⲆⵠᐃΔᐃ !== 228 && ⲆⲆⵠᐃ.ⲆⵠᐃΔᐃ !== 230 && ⲆⲆⵠᐃ.ⲆⵠᐃΔᐃ !== 229 && ⲆⲆⵠᐃ.ⲆⵠᐃΔᐃ !== 91 && !ⲆⲆⵠᐃ.ⲆᐃΔᐃᐃ && (K = 1, M === 0 || ⲆⵠΔᐃ.ⲆᐃⲆΔ(L[M - 1], ⲆⲆⵠᐃ) > 75)) {
                        var N = -ⲆⲆⵠᐃ.angle;
                        var O = Math.cos(N) * 45 * po;
                        var Q = po * (Math.sin(N) * 45);
                        L.push({
                            x: ⲆⲆⵠᐃ.x + O,
                            y: ⲆⲆⵠᐃ.y + Q,
                            r: 8,
                            alpha: 0.8
                        });
                        L.push({
                            x: ⲆⲆⵠᐃ.x - O,
                            y: ⲆⲆⵠᐃ.y - Q,
                            r: 8,
                            alpha: 0.8
                        });
                        L.push({
                            x: ⲆⲆⵠᐃ.x,
                            y: ⲆⲆⵠᐃ.y,
                            r: 24,
                            alpha: 1
                        });
                    }
                    for (I = 0; M > I; I++) {
                        L[I].alpha = Math.max(0, L[I].alpha - $w / 2.2);
                        L[I].r += $w * 20;
                    }
                    if (L.length > 0 && L[0].alpha === 0) {
                        L.splice(0, 1);
                    }
                    var R = ⲆⲆⵠᐃ.ⲆⲆᐃΔⵠ;
                    M = R.length;
                    var S = -1;
                    var U = Math.max(0, Math.sign(ⲆⲆⵠᐃ.ᐃΔΔⲆⵠΔⵠ));
                    var V = Math.max(0, Math.sign(ⲆⲆⵠᐃ.ᐃΔΔΔⲆ));
                    Math.max(0, Math.sign(ⲆⲆⵠᐃ.ⲆᐃⲆⵠΔ));
                    var W = Math.max(0, Math.sign(ⲆⲆⵠᐃ.ᐃⵠⵠⲆⲆ));
                    var X = Math.max(0, Math.sign(ⲆⲆⵠᐃ.ⲆⲆᐃΔⲆ));
                    if (ⲆⲆⵠᐃ.ᐃΔΔⲆⵠΔⵠ > 0 || ⲆⲆⵠᐃ.ⲆᐃⲆⵠΔ > 0) {
                        S = 602;
                    } else if (ⲆⲆⵠᐃ.ⲆⲆᐃΔⲆ > 0) {
                        S = 680;
                    } else if (ⲆⲆⵠᐃ.ᐃΔΔΔⲆ > 0) {
                        S = 475;
                    } else if (ⲆⲆⵠᐃ.ᐃⵠⵠⲆⲆ > 0) {
                        S = 476;
                    }
                    if (ⲆⲆⵠᐃ.ⲆⵠᐃΔᐃ === 225 && (U | V | W | X) === 1) {
                        S = 228;
                        var Y = ⲆⲆⵠᐃ.ΔΔⵠⲆⲆ - Math.PI / 2;
                        var Z = 15;
                        var _ = 11;
                        var aa = 50;
                    } else if (ⲆⲆⵠᐃ.ⲆⵠᐃΔᐃ === 239 && (U | V | W | X) == 1) {
                        S = 249;
                        Y = ⲆⲆⵠᐃ.ΔΔⵠⲆⲆ - Math.PI / 2;
                        Z = 21;
                        _ = 16;
                        aa = 50;
                    } else if (ⲆⲆⵠᐃ.ⲆⵠᐃΔᐃ === 226 && (U | V | W | X) === 1) {
                        S = 234;
                        Y = ⲆⲆⵠᐃ.ΔΔⵠⲆⲆ - Math.PI / 2;
                        var ba = Math.random() * 50;
                        Z = 10 + ba;
                        _ = 0 + ba;
                        aa = 45;
                    } else {
                        Y = ⲆⲆⵠᐃ.angle;
                        Z = 15;
                        _ = 11;
                        aa = 50;
                    }
                    if (ⲆⲆⵠᐃ.ⲆⵠᐃΔᐃ === 227 || ⲆⲆⵠᐃ.ⲆⵠᐃΔᐃ === 228 || ⲆⲆⵠᐃ.ⲆⵠᐃΔᐃ === 91 || ⲆⲆⵠᐃ.ⲆⵠᐃΔᐃ === 229 || ⲆⲆⵠᐃ.ⲆⵠᐃΔᐃ === 230 || ⲆⲆⵠᐃ.ⲆᐃΔᐃᐃ); else if (ⲆⲆⵠᐃ.ⲆⵠᐃΔᐃ === 224) {
                        if (M === 0 || ⲆⵠΔᐃ.ⲆᐃⲆΔ(R[M - 1], ⲆⲆⵠᐃ) > 10) {
                            R.push({
                                x: ⲆⲆⵠᐃ.x,
                                y: ⲆⲆⵠᐃ.y,
                                angle: ⲆⲆⵠᐃ.ΔΔⵠⲆⲆ,
                                alpha: 1,
                                id: 226
                            });
                        }
                    } else if (S != -1 && K === 0 && (M === 0 || aa < ⲆⵠΔᐃ.ⲆᐃⲆΔ(R[M - 1], ⲆⲆⵠᐃ))) {
                        ⲆⲆⵠᐃ.ⵠᐃΔⲆᐃⲆⲆ++;
                        if (Math.abs(ⲆⲆⵠᐃ.x - ⲆⲆⵠᐃ.r.x) > 1 && Math.abs(ⲆⲆⵠᐃ.y - ⲆⲆⵠᐃ.r.y) > 1) {
                            if (ⲆⲆⵠᐃ.x < ⲆⲆⵠᐃ.r.x && ⲆⲆⵠᐃ.y > ⲆⲆⵠᐃ.r.y || ⲆⲆⵠᐃ.x > ⲆⲆⵠᐃ.r.x && ⲆⲆⵠᐃ.y < ⲆⲆⵠᐃ.r.y) {
                                if (ⲆⲆⵠᐃ.ⵠᐃΔⲆᐃⲆⲆ % 2) {
                                    O = po * -_;
                                    Q = -_ * po;
                                } else {
                                    Q = _ * po;
                                    O = po * _;
                                }
                            } else if (ⲆⲆⵠᐃ.ⵠᐃΔⲆᐃⲆⲆ % 2) {
                                O = _ * po;
                                Q = -_ * po;
                            } else {
                                Q = _ * po;
                                O = po * -_;
                            }
                        } else if (ⲆⲆⵠᐃ.ⵠᐃΔⲆᐃⲆⲆ % 2) {
                            O = Math.cos(Y) * Z * po;
                            Q = po * (Z * Math.sin(Y));
                        } else {
                            O = Z * -Math.cos(Y) * po;
                            Q = -Math.sin(Y) * Z * po;
                        }
                        R.push({
                            x: ⲆⲆⵠᐃ.x + O,
                            y: ⲆⲆⵠᐃ.y + Q,
                            angle: Y + Math.PI / 2,
                            alpha: 1,
                            id: S
                        });
                    }
                    for (I = 0; M > I; I++) {
                        if (R[I].id === 226) {
                            R[I].alpha = Math.max(0, R[I].alpha - $w * 1.5);
                        } else {
                            R[I].alpha = Math.max(0, R[I].alpha - $w / 2.85);
                        }
                    }
                    if (R.length > 0 && R[0].alpha === 0) {
                        R.splice(0, 1);
                    }
                }
            }
        };
        this.ΔΔΔ = function () {
            this.ΔΔᐃᐃⵠ(this.ⵠΔⲆ[0]);
            this.ΔΔᐃᐃⵠ(this.ⵠΔⲆ[80]);
            this.ΔΔᐃᐃⵠ(this.ⵠΔⲆ[60]);
            this.ΔΔᐃᐃⵠ(this.ⵠΔⲆ[67]);
            this.ΔΔᐃᐃⵠ(this.ⵠΔⲆ[70]);
            this.ΔΔᐃᐃⵠ(this.ⵠΔⲆ[77]);
            this.ΔΔᐃᐃⵠ(this.ⵠΔⲆ[71]);
            this.ΔΔᐃᐃⵠ(this.ⵠΔⲆ[72]);
            this.ΔΔᐃᐃⵠ(this.ⵠΔⲆ[73]);
            this.ΔΔᐃᐃⵠ(this.ⵠΔⲆ[74]);
            this.ΔΔᐃᐃⵠ(this.ⵠΔⲆ[61]);
            this.ΔΔᐃᐃⵠ(this.ⵠΔⲆ[62]);
            this.ΔΔᐃᐃⵠ(this.ⵠΔⲆ[88]);
            this.ΔΔᐃᐃⵠ(this.ⵠΔⲆ[91]);
            this.ΔΔᐃᐃⵠ(this.ⵠΔⲆ[90]);
            this.ΔΔᐃᐃⵠ(this.ⵠΔⲆ[63]);
            this.ΔΔᐃᐃⵠ(this.ⵠΔⲆ[78]);
            this.ΔΔᐃᐃⵠ(this.ⵠΔⲆ[75]);
            this.ΔΔᐃᐃⵠ(this.ⵠΔⲆ[76]);
            this.ΔΔᐃᐃⵠ(this.ⵠΔⲆ[64]);
            this.ΔΔᐃᐃⵠ(this.ⵠΔⲆ[68]);
            this.ΔΔᐃᐃⵠ(this.ⵠΔⲆ[65]);
            this.ΔΔᐃᐃⵠ(this.ⵠΔⲆ[66]);
            this.ΔΔᐃᐃⵠ(this.ⵠΔⲆ[69]);
        };
        this.ᐃΔΔΔ = [];
        this.ᐃΔΔΔ[620] = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 1, 1.05, 1, 0.008, 0.008);
        this.ᐃΔΔΔ[619] = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 1, 1.08, 1, 0.006, 0.006);
        this.ᐃΔΔΔ[694] = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 1, 1.02, 1, 0.008, 0.008);
        this.ᐃΔΔΔ[695] = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(os, 1, 1.08, 1, 0.006, 0.006);
        this.Δⵠᐃᐃⵠ = [];
        this.Δⵠᐃᐃⵠ[0] = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Dk, 0.1, 1, 0, 0.6, 0.6);
        this.Δⵠᐃᐃⵠ[1] = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(pl, 0.4, 1, 0, 0.6, 0.6);
        this.Δⵠᐃᐃⵠ[2] = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Yh, 0.3, 1, 0, 0.6, 0.6);
        this.Δⵠᐃᐃⵠ[3] = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Js, 0.8, 1, 0, 0.6, 0.6);
        this.Δⵠᐃᐃⵠ[4] = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.3, 1, 0, 0.6, 0.6);
        this.Δⵠᐃᐃⵠ[5] = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(dq, 0.8, 1, 0, 0.6, 0.6);
        this.Δⵠᐃᐃⵠ[6] = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.5, 1, 0, 0.6, 0.6);
        this.Δⵠᐃᐃⵠ[7] = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.9, 1, 0, 0.6, 0.6);
        this.Δⵠᐃᐃⵠ[8] = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.6, 1, 0, 0.6, 0.6);
        this.Δⵠᐃᐃⵠ[9] = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.2, 1, 0, 0.6, 0.6);
        this.Δⵠᐃᐃⵠ[10] = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.6, 1, 0, 0.6, 0.6);
        this.Δⵠᐃᐃⵠ[11] = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.4, 1, 0, 0.6, 0.6);
        this.Δⵠᐃᐃⵠ[12] = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(X, 0.8, 1, 0, 0.6, 0.6);
        this.Δⵠᐃᐃⵠ[13] = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Js, 0.2, 1, 0, 0.6, 0.6);
        this.Δⵠᐃᐃⵠ[14] = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0.7, 1, 0, 0.6, 0.6);
    }
    function uw(a, b, c, d) {
        this.id = a;
        this.ⵠᐃⲆᐃⲆ = (a + 5) * 8;
        this.ᐃⵠⲆⲆᐃ = so / 1366;
        this.x = b;
        this.y = c;
        this.c = Math.sin(d);
        this.ⲆᐃᐃⲆ = Math.cos(d);
        this.alpha = 0;
    }
    function vw() {
        Math.random();
        return "a";
    }
    function ww() {
        Math.random();
        return "t";
    }
    function xw() {
        Math.random();
        return "r";
    }
    function yw() {
        Math.random();
        return "e";
    }
    function zw() {
        Math.random();
        return "s";
    }
    function Aw() {
        Math.random();
        return "i";
    }
    function Bw() {
        Math.random();
        return "g";
    }
    function Cw() {
        this.ⵠΔⲆΔᐃ = function () { };
        this.ᐃⵠⵠΔᐃ = {
            open: Eh,
            ⵠⲆⵠⵠⲆ: 1,
            ⲆⲆΔⲆ: 1
        };
        this.ⵠΔᐃᐃᐃ = {
            open: zk,
            ⵠⲆⵠⵠⲆ: -1,
            ⲆⲆΔⲆ: 1
        };
        this.ᐃᐃⵠΔ = {
            ⲆⲆⵠⲆᐃᐃΔ: 0,
            ⲆΔⵠΔΔ: 0,
            ⲆⲆΔⲆ: 1,
            ⵠⲆⵠⵠⲆ: -1,
            open: false
        };
        this.ΔᐃΔᐃ = {
            open: Ig,
            ⵠⵠⵠⲆΔⵠⵠ: 0,
            ⲆⲆΔⲆ: 1,
            ⲆⵠᐃΔⵠᐃᐃ: 0,
            type: 0,
            ⲆᐃⵠⵠᐃΔΔ: 0,
            ⵠⲆⵠⵠⲆ: -1
        };
        this.ⲆⲆⲆᐃ = {
            ⵠⵠⵠⲆΔⵠⵠ: 0,
            ᐃⵠⵠⲆⵠⲆᐃ: 0,
            ⲆΔⵠΔΔ: 0,
            ⲆⲆΔⲆ: 1,
            ⵠⲆⵠⵠⲆ: -1,
            open: false
        };
        this.sign = {
            ⵠⲆⵠⵠⲆ: -1,
            open: Dk
        };
        this.ⵠⵠΔⵠᐃ = {
            ⲆⲆΔⲆ: 1,
            ⵠⲆⵠⵠⲆ: -1,
            ᐃⵠⵠΔ: 0,
            open: false
        };
        this.ⲆᐃΔᐃᐃ = {
            enabled: Yh,
            ᐃⵠⵠⵠⲆ: -1,
            label: false,
            now: -1,
            ⲆⲆΔⵠ: jv
        };
        this.ⵠᐃᐃⵠ = {
            id: -1,
            ᐃⵠⵠΔ: 0,
            ⲆⲆΔⲆ: 1,
            ⵠⲆⵠⵠⲆ: -1,
            open: false,
            lock: false,
            locked: false,
            ᐃΔⲆᐃⲆⲆᐃ: dq,
            ⵠΔΔⵠⵠᐃⲆ: as
        };
        this.ΔᐃᐃⲆΔ = oq;
        this.reconnect = {
            rotate: 0,
            enabled: false
        };
        this.key = ⲆⵠΔᐃ.ⵠⲆⵠᐃΔΔⲆ("key", aj.location.href);
        var a = ⲆⵠΔᐃ.ⵠⲆⵠᐃΔΔⲆ("egg", aj.location.href);
        if (a) {
            df.ᐃΔΔⵠ = parseInt(a);
        }
        this.beta = aj.location.href.indexOf("http://starve.io/beta") === 0 ? 1 : 0;
        if (this.key && this.beta) {
            ᐃᐃΔⵠ.set("starve_beta", this.key);
        } else if (this.beta) {
            this.key = ᐃᐃΔⵠ.get("starve_beta");
        }
        this.ΔΔΔⵠⲆ = ᐃᐃΔⵠ.get("starve_token") ? ᐃᐃΔⵠ.get("starve_token") : ⲆⵠΔᐃ.ⲆⲆⲆΔⲆⵠᐃ(14);
        aj.baguette();
        var b = aj.kot2;
        function c() {
            this.seed = 1;
            this.ⲆᐃⲆⵠΔⲆΔ = 2;
            this.ⵠᐃⵠⲆⵠⵠΔ = 3;
            this.ⵠᐃⵠⲆⵠΔᐃΔⲆ = 1;
            this.ⵠΔⵠΔᐃᐃⲆᐃⲆ = 2;
            this.ⵠᐃⵠⲆⵠΔΔΔⵠ = 3;
            this.ΔⲆⵠΔⵠᐃⲆ = function (a) {
                this.seed = 2 + Math.floor(Math.random() * 39879);
            };
            this.ⲆΔⲆⲆⲆᐃᐃ = function (a) {
                this.ⲆᐃⲆⵠΔⲆΔ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ⲆᐃΔᐃΔⵠᐃ = function (a) {
                this.ⵠᐃⵠⲆⵠⵠΔ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ⲆΔᐃᐃⲆΔᐃⲆᐃ = function (a) {
                this.ⵠᐃⵠⲆⵠΔᐃΔⲆ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ⵠΔΔᐃΔΔⵠⵠⲆ = function (a) {
                this.ⵠΔⵠΔᐃᐃⲆᐃⲆ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ΔᐃΔⲆΔⲆᐃΔⲆ = function (a) {
                this.ⵠᐃⵠⲆⵠΔΔΔⵠ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ⵠⲆᐃΔΔⵠΔ = function (c, e, f, i, j, k, a) {
                for (var m = 1; a > m;) {
                    var n = f * m % ΔⵠⲆⲆⲆⲆⲆ;
                    var o = ⲆⲆⵠΔΔⵠᐃ[n];
                    if (o < 0.1) {
                        p += 50;
                        m += 50;
                    } else {
                        var p = Math.floor(i * o + j);
                        if (m > k && m < a) {
                            var q = Math.random() > 0.5 ? $w * -10 : $w * 10;
                            var r = e * p;
                            this.ⵠᐃᐃᐃΔΔΔ[n] = Math.max(-25, Math.min(25, this.ⵠᐃᐃᐃΔΔΔ[n] + q));
                            this.ⲆᐃⲆⵠⵠᐃⲆ[n] = Math.max(-8, Math.min(8, this.ⲆᐃⲆⵠⵠᐃⲆ[n] + q));
                            if (r > 0) {
                                ro.beginPath();
                                ro.arc(m + Ww.ᐃⲆΔ.x + this.ⲆᐃⲆⵠⵠᐃⲆ[n], c + this.ⵠᐃᐃᐃΔΔΔ[n] - 20, r, 0, Math.PI * 2);
                                if (cf.transition) {
                                    var t = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
                                    ro.fillStyle = Hv(83, 156, 160, 236, 247, 249, t);
                                } else {
                                    ro.fillStyle = Gr.ⵠⵠⲆⵠⲆⵠΔ[cf.time];
                                }
                                ro.fill();
                            }
                        }
                        m += p * 2;
                    }
                }
            };
            this.ᐃΔⵠΔⵠΔⵠ = function (c, e, f, i, j, k, a) {
                for (var m = 1; a > m;) {
                    var n = m * f % ΔⵠⲆⲆⲆⲆⲆ;
                    var o = ⲆⲆⵠΔΔⵠᐃ[n];
                    if (o < 0.1) {
                        p += 50;
                        m += 50;
                    } else {
                        var p = Math.floor(i * o + j);
                        if (m > k && a > m) {
                            var q = Math.random() > 0.5 ? $w * -10 : $w * 10;
                            var r = e * p;
                            this.ΔΔᐃⲆΔ[n] = Math.max(-25, Math.min(25, this.ΔΔᐃⲆΔ[n] + q));
                            this.ⲆᐃⵠⲆΔ[n] = Math.max(-8, Math.min(8, this.ⲆᐃⵠⲆΔ[n] + q));
                            if (r > 0) {
                                ro.beginPath();
                                ro.arc(c + this.ΔΔᐃⲆΔ[n] - 20, m + Ww.ᐃⲆΔ.y + this.ⲆᐃⵠⲆΔ[n], r, 0, Math.PI * 2);
                                if (cf.transition) {
                                    var t = cf.time ? 1 - cf.ΔⲆⵠᐃ.Δᐃᐃ : cf.ΔⲆⵠᐃ.Δᐃᐃ;
                                    ro.fillStyle = Hv(83, 156, 160, 236, 247, 249, t);
                                } else {
                                    ro.fillStyle = Gr.ⵠⵠⲆⵠⲆⵠΔ[cf.time];
                                }
                                ro.fill();
                            }
                        }
                        m += p * 2;
                    }
                }
            };
            this.ⲆⵠᐃΔᐃⵠⲆΔⵠ = function (b, c, d, e, f, g) {
                f -= 30;
                g += 30;
                var h = -(d - 0 - e - 2) / 200;
                if (h === 0) {
                    this.ⲆᐃΔᐃΔⵠᐃ();
                }
                ro.globalAlpha = ⲆⵠΔᐃ.ⲆᐃⵠᐃΔ(h);
                this.ⵠⲆᐃΔΔⵠΔ(d, h, this.ⵠᐃⵠⲆⵠⵠΔ, 18, 16, f, g);
                ro.globalAlpha = 1;
                h = -(b - 250 - e + 500) / 150;
                if (h === 0) {
                    this.ΔⲆⵠΔⵠᐃⲆ();
                }
                ro.globalAlpha = ⲆⵠΔᐃ.ⲆᐃⵠᐃΔ(h);
                this.ⵠⲆᐃΔΔⵠΔ(b, h, this.seed, 12, 10, f, g);
                ro.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
                        this.ⲆΔⲆⲆⲆᐃᐃ();
                    }
                    ro.globalAlpha = ⲆⵠΔᐃ.ⲆᐃⵠᐃΔ(h);
                    this.ⵠⲆᐃΔΔⵠΔ(c, h, this.ⲆᐃⲆⵠΔⲆΔ, 6, 6, f, g);
                    ro.globalAlpha = 1;
                }
            };
            this.ⵠᐃΔΔⵠΔⵠⲆᐃ = function (b, c, d, e, f, g) {
                var h;
                f -= 30;
                g += 30;
                if ((h = -(-d + 0 + e + 2) / 200) === 0) {
                    this.ⲆᐃΔᐃΔⵠᐃ();
                }
                ro.globalAlpha = ⲆⵠΔᐃ.ⲆᐃⵠᐃΔ(h);
                this.ⵠⲆᐃΔΔⵠΔ(d, h, this.ⵠᐃⵠⲆⵠⵠΔ, 18, 16, f, g);
                ro.globalAlpha = 1;
                if ((h = -(-b + 250 + e) / 150) === 0) {
                    this.ΔⲆⵠΔⵠᐃⲆ();
                }
                ro.globalAlpha = ⲆⵠΔᐃ.ⲆᐃⵠᐃΔ(h);
                this.ⵠⲆᐃΔΔⵠΔ(b, h, this.seed, 12, 10, f, g);
                ro.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(-c + 350 + e) / 100) <= 0.01) {
                        this.ⲆΔⲆⲆⲆᐃᐃ();
                    }
                    ro.globalAlpha = ⲆⵠΔᐃ.ⲆᐃⵠᐃΔ(h);
                    this.ⵠⲆᐃΔΔⵠΔ(c, h, this.ⲆᐃⲆⵠΔⲆΔ, 6, 6, f, g);
                    ro.globalAlpha = 1;
                }
            };
            this.ⲆⲆⵠΔΔΔᐃⲆⲆ = function (b, c, d, e, f, g) {
                var h;
                f -= 30;
                g += 30;
                if ((h = -(-d + 0 + e + 2) / 200) === 0) {
                    this.ⲆᐃΔᐃΔⵠᐃ();
                }
                ro.globalAlpha = ⲆⵠΔᐃ.ⲆᐃⵠᐃΔ(h);
                this.ᐃΔⵠΔⵠΔⵠ(d, h, this.ⵠᐃⵠⲆⵠⵠΔ, 18, 16, f, g);
                ro.globalAlpha = 1;
                if ((h = -(-b + 250 + e) / 150) === 0) {
                    this.ΔⲆⵠΔⵠᐃⲆ();
                }
                ro.globalAlpha = ⲆⵠΔᐃ.ⲆᐃⵠᐃΔ(h);
                this.ᐃΔⵠΔⵠΔⵠ(b, h, this.seed, 12, 10, f, g);
                ro.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(-c + 350 + e) / 100) <= 0.01) {
                        this.ⲆΔⲆⲆⲆᐃᐃ();
                    }
                    ro.globalAlpha = ⲆⵠΔᐃ.ⲆᐃⵠᐃΔ(h);
                    this.ᐃΔⵠΔⵠΔⵠ(c, h, this.ⲆᐃⲆⵠΔⲆΔ, 6, 6, f, g);
                    ro.globalAlpha = 1;
                }
            };
            this.ⵠᐃᐃⲆⵠⲆⲆΔⲆ = function (b, c, d, e, f, g) {
                var h;
                f -= 30;
                g += 30;
                if ((h = -(d - 0 - e - 2) / 200) === 0) {
                    this.ⲆᐃΔᐃΔⵠᐃ();
                }
                ro.globalAlpha = ⲆⵠΔᐃ.ⲆᐃⵠᐃΔ(h);
                this.ᐃΔⵠΔⵠΔⵠ(d, h, this.ⵠᐃⵠⲆⵠⵠΔ, 18, 16, f, g);
                ro.globalAlpha = 1;
                if ((h = -(b - 250 - e + 500) / 150) === 0) {
                    this.ΔⲆⵠΔⵠᐃⲆ();
                }
                ro.globalAlpha = ⲆⵠΔᐃ.ⲆᐃⵠᐃΔ(h);
                this.ᐃΔⵠΔⵠΔⵠ(b, h, this.seed, 12, 10, f, g);
                ro.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
                        this.ⲆΔⲆⲆⲆᐃᐃ();
                    }
                    ro.globalAlpha = ⲆⵠΔᐃ.ⲆᐃⵠᐃΔ(h);
                    this.ᐃΔⵠΔⵠΔⵠ(c, h, this.ⲆᐃⲆⵠΔⲆΔ, 6, 6, f, g);
                    ro.globalAlpha = 1;
                }
            };
            this.w1 = {
                r: new ⲆⵠΔᐃ.ⵠⲆΔΔⵠ(ⲆⵠΔᐃ.ᐃΔΔⵠᐃᐃⵠ, 0, 10, 0, 0, 200),
                ΔⵠΔⲆ: new ⲆⵠΔᐃ.ⵠⲆΔΔⵠ(ⲆⵠΔᐃ.ⲆΔⵠⲆᐃⵠΔ, 0, 10, 200, 200, 0)
            };
            this.w2 = {
                r: new ⲆⵠΔᐃ.ⵠⲆΔΔⵠ(ⲆⵠΔᐃ.ⵠΔⲆⵠΔⵠⲆ, 0, 10, 0, 0, 150),
                ΔⵠΔⲆ: new ⲆⵠΔᐃ.ⵠⲆΔΔⵠ(ⲆⵠΔᐃ.ⲆᐃⵠᐃΔ, 0, 10, 150, 150, 0)
            };
            this.w3 = {
                r: new ⲆⵠΔᐃ.ⵠⲆΔΔⵠ(ⲆⵠΔᐃ.ᐃᐃⵠⲆᐃⲆⵠ, 0, 10, 0, 0, 100),
                ΔⵠΔⲆ: new ⲆⵠΔᐃ.ⵠⲆΔΔⵠ(ⲆⵠΔᐃ.ⲆᐃⵠᐃΔ, 0, 10, 100, 100, 0)
            };
            this.ⵠᐃⲆⲆⵠᐃᐃⵠⲆ = function (a) {
                if (a.r.ⵠᐃᐃΔⲆ === a.r.x) {
                    if (a.ΔⵠΔⲆ.ⵠᐃᐃΔⲆ === a.ΔⵠΔⲆ.x) {
                        return a.r;
                    } else {
                        return a.ΔⵠΔⲆ;
                    }
                } else {
                    return a.r;
                }
            };
            this.ⵠᐃᐃ = function (a) {
                var b;
                if (a.r.ⵠᐃᐃΔⲆ === a.r.x) {
                    if (a.ΔⵠΔⲆ.x === a.ΔⵠΔⲆ.ⵠᐃᐃΔⲆ) {
                        a.r.ΔᐃⲆᐃⵠΔΔ();
                        a.ΔⵠΔⲆ.ΔᐃⲆᐃⵠΔΔ();
                        b = a.r;
                    } else {
                        b = a.ΔⵠΔⲆ;
                    }
                } else {
                    b = a.r;
                }
                b.ΔⵠΔⲆⵠⲆΔ(b.ⵠᐃᐃΔⲆ);
                return b;
            };
            this.ΔΔᐃⲆΔ = [];
            this.ⲆᐃⵠⲆΔ = [];
            this.ⵠᐃᐃᐃΔΔΔ = [];
            this.ⲆᐃⲆⵠⵠᐃⲆ = [];
            this.ⵠΔⲆΔᐃ = function () {
                for (var a = 0; a < ΔⵠⲆⲆⲆⲆⲆ; a++) {
                    this.ΔΔᐃⲆΔ[a] = Math.floor(ⲆⲆⵠΔΔⵠᐃ[a] * 25);
                    this.ⲆᐃⵠⲆΔ[a] = Math.floor(ⲆⲆⵠΔΔⵠᐃ[a] * 8);
                    this.ⵠᐃᐃᐃΔΔΔ[a] = Math.floor(ⲆⲆⵠΔΔⵠᐃ[a] * 25);
                    this.ⲆᐃⲆⵠⵠᐃⲆ[a] = Math.floor(ⲆⲆⵠΔΔⵠᐃ[a] * 8);
                }
                this.w1.r.x = this.w1.r.ⵠᐃᐃΔⲆ;
                this.w2.r.ⵠΔΔᐃⲆ = 3.5;
                this.w3.r.ⵠΔΔᐃⲆ = 2;
            };
            this.ⵠΔⲆΔᐃ();
        }
        this.ΔΔΔⵠⲆ = b.substring(0, 6) + this.ΔΔΔⵠⲆ.substring(6);
        this.ⵠᐃᐃⲆΔᐃΔ = ᐃᐃΔⵠ.get("starve_token_id") ? ᐃᐃΔⵠ.get("starve_token_id") : "";
        this.id = 0;
        this.ⲆⵠᐃⲆ = 0;
        this.ᐃΔᐃ = 0;
        this.ⲆᐃᐃᐃⵠᐃⲆ = {
            ΔⲆⲆΔΔΔΔ: 0,
            ΔΔᐃᐃΔⵠΔ: "",
            ΔΔΔᐃᐃ: 0,
            ⵠΔΔᐃᐃ: 0
        };
        this.ⵠⲆᐃⲆᐃⲆⵠΔⲆ = {
            connected: 0,
            ΔⲆᐃᐃᐃⵠⵠ: new Date().getTime()
        };
        this.ᐃᐃⲆᐃⲆ = [];
        this.ⵠΔᐃⵠΔΔΔ = function (a) {
            for (var b = 0; b < this.ᐃᐃⲆᐃⲆ.length; b++) {
                if (a == this.ᐃᐃⲆᐃⲆ[b]) {
                    return kk;
                }
            }
            return pl;
        };
        this.ⲆⵠᐃΔΔ = {
            ᐃⵠⵠⵠⲆ: 0,
            time: 0,
            value: 0,
            open: false,
            ⲆⲆΔⵠ: function () {
                if (this.open) {
                    var a = new Date().getTime();
                    this.time = Math.floor((a - this.ᐃⵠⵠⵠⲆ) / 1000);
                    if (this.time < 60) {
                        Yw.ⲆⵠᐃΔΔ.button.ⲆⲆΔⵠ(ro);
                    } else {
                        document.getElementById("shop_starterkit").style.display = "none";
                        this.open = false;
                    }
                }
            }
        };
        this.ᐃⵠᐃⵠⵠ = {
            id: -1,
            ⲆⲆΔⲆ: -1,
            lock: 0,
            timeout: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0, 1, 0, 1 / 30, 1),
            wait: false
        };
        this.ᐃΔΔⵠᐃ = {
            timeout: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0, 1, 0, 1 / 5, 1),
            wait: false
        };
        this.ᐃΔᐃⲆⲆ = {
            timeout: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(ps, 0, 1, 0, 1, 1),
            wait: false
        };
        this.ᐃⵠΔΔᐃ = {
            timeout: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(as, 0, 1, 0, 0.1, 1),
            wait: as
        };
        this.ᐃⲆΔ = new ⲆⵠΔᐃ.ⵠᐃᐃᐃⲆⵠⲆ(ⲆⵠΔᐃ.ⵠᐃⲆᐃΔⵠΔ, 0, 0.4, 0, 0, hq, iq, hq, iq);
        this.ᐃⲆΔ.ᐃⵠⵠⵠⲆ = 0;
        this.ᐃⲆΔ.ⲆⲆᐃΔⵠⲆⵠ = 0;
        this.ᐃⲆΔ.ΔΔΔ = function () {
            if (this.ⲆⲆᐃΔⵠⲆⵠ > 0) {
                this.ⲆⲆᐃΔⵠⲆⵠ -= $w;
            } else {
                var a = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ];
                if (a) {
                    this.ᐃⵠⵠⵠⲆ = 0;
                    var b = Math.max(Math.min(hq - a.x, -2), 2 - cf.w + so);
                    var c = Math.max(Math.min(iq - a.y, -2), 2 - cf.ⵠⲆᐃ + gq);
                    this.ΔⵠΔⲆⵠⲆΔ({
                        x: b,
                        y: c
                    });
                } else {
                    this.ᐃⵠⵠⵠⲆ += $w;
                    if (this.ᐃⵠⵠⵠⲆ > 3) {
                        this.ᐃⵠⵠⵠⲆ = 0;
                        if (!Ww.reconnect.enabled) {
                            Δⵠᐃⵠ.ⵠΔⵠⵠΔⲆⲆᐃΔ();
                        }
                    }
                }
            }
        };
        this.ᐃⲆΔ.w = screen.width;
        this.ᐃⲆΔ.ⵠⲆᐃ = screen.height;
        this.ᐃⲆΔ.ᐃΔΔⵠⲆᐃⵠ = this.ᐃⲆΔ.w;
        this.ᐃⲆΔ.ⵠⲆᐃⵠⵠⵠΔ = this.ᐃⲆΔ.ⵠⲆᐃ;
        this.ᐃⲆΔ.rx = 0;
        this.ᐃⲆΔ.ry = 0;
        this.ᐃⲆΔ.ⲆⲆⵠⲆΔΔⲆⲆΔ = 0;
        this.ᐃⲆΔ.ⵠⲆⲆⵠⲆΔΔᐃᐃ = 0;
        this.ᐃⲆΔ.ΔᐃᐃⲆⲆ = function (a, b) {
            this.x = -Math.min(Math.max(-cf.ⵠΔⵠΔᐃΔⵠ * 2, a - cf.ⵠΔⵠΔᐃΔⵠ - this.ᐃΔΔⵠⲆᐃⵠ / 2), cf.w - this.ᐃΔΔⵠⲆᐃⵠ);
            this.y = -Math.min(Math.max(-cf.ΔᐃᐃⲆΔⵠⲆ * 2, b - (cf.ΔᐃᐃⲆΔⵠⲆ + this.ⵠⲆᐃⵠⵠⵠΔ) / 2), cf.ⵠⲆᐃ - this.ⵠⲆᐃⵠⵠⵠΔ + cf.ΔᐃᐃⲆΔⵠⲆ);
            this.ⵠᐃᐃΔⲆ = this.x;
            this.ⵠᐃⲆⲆΔⵠᐃ = this.y;
        };
        this.control = {
            angle: 0,
            timeout: 0,
            ΔᐃᐃⲆⲆⲆⵠ: 0,
            ⲆⵠⲆⵠ: 0,
            attack: 0,
            ΔΔΔ: function () {
                var a = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ];
                if (a) {
                    var b = {
                        x: Ww.ᐃⲆΔ.x + a.x,
                        y: Ww.ᐃⲆΔ.y + a.y
                    };
                } else {
                    b = mo;
                }
                var c = ⲆⵠΔᐃ.ᐃⵠⵠⵠΔᐃΔ(yf.ᐃⲆΔⲆ, b);
                var d = false;
                this.ⲆⵠⲆⵠ += $w;
                if (!yf.state) {
                    if (a && !(a.action & 16) && this.ⲆⵠⲆⵠ > 0.2) {
                        this.attack = 1;
                        d = true;
                        this.ⲆⵠⲆⵠ = 0;
                        Δⵠᐃⵠ.ᐃⵠⵠᐃⵠⵠⵠᐃΔ(c);
                    }
                }
                if (a) {
                    a.angle = c;
                    a.ΔᐃⵠΔⲆⲆΔ = c;
                }
                if (!d) {
                    this.timeout += $w;
                    if (this.timeout > 0.2) {
                        this.timeout = 0;
                        if (Math.abs(this.angle - c) > 0.005) {
                            Δⵠᐃⵠ.ⵠⵠⲆᐃᐃⲆΔⲆᐃ(c);
                            this.angle = c;
                        }
                    }
                }
                if (!Ww.Δⵠⵠⵠᐃ.open && !Ww.ⲆᐃⲆⵠⵠ.open) {
                    var e = 0;
                    if (zf.ΔΔΔⵠⲆΔⲆ()) {
                        e |= 1;
                    }
                    if (zf.ΔⵠΔⵠᐃⲆⲆ()) {
                        e |= 2;
                    }
                    if (zf.ⵠΔⲆᐃᐃᐃⲆ()) {
                        e |= 4;
                    }
                    if (zf.ⵠΔⲆⵠᐃΔᐃ()) {
                        e |= 8;
                    }
                    if (this.ΔᐃᐃⲆⲆⲆⵠ != e) {
                        Δⵠᐃⵠ.ⵠᐃΔⲆΔΔᐃΔᐃ(e);
                    }
                    this.ΔᐃᐃⲆⲆⲆⵠ = e;
                }
            }
        };
        this.ᐃⵠⲆⲆ = {
            c: 1,
            ΔⵠΔⲆ: 1,
            ⵠⲆᐃ: 1,
            ⵠᐃᐃ: 1,
            ⲆⲆⲆ: 1,
            ⵠΔⵠᐃΔᐃⲆ: 1,
            ᐃΔⵠᐃΔⵠⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(ul, 0, 1, 0, 3, 3),
            ⵠⲆⵠⵠⲆᐃⵠ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(true, 0, 1, 0, 2, 2),
            ⲆᐃⲆⵠⵠⵠⵠ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(true, 0, 1, 0, 3, 3),
            ΔⲆΔⵠⲆⵠⲆ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(true, 0, 1, 0, 3, 3),
            ⲆΔᐃⵠⲆᐃⵠ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(true, 0, 1, 0, 3, 3),
            ΔᐃⲆᐃⲆΔⵠ: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(true, 0, 1, 0, 3, 3),
            ⲆⵠᐃⲆᐃ: new ⲆⵠΔᐃ.ⵠⲆΔΔⵠ(ⲆⵠΔᐃ.ⵠᐃⲆᐃΔⵠΔ, 0, 1, 0, 0, 1),
            ᐃⵠⲆⲆᐃ: new ⲆⵠΔᐃ.ⵠⲆΔΔⵠ(ⲆⵠΔᐃ.ⵠᐃⲆᐃΔⵠΔ, 0, 1, 0, 0, 1),
            ⵠᐃᐃΔᐃⲆᐃ: new ⲆⵠΔᐃ.ⵠⲆΔΔⵠ(ⲆⵠΔᐃ.ⵠᐃⲆᐃΔⵠΔ, 0, 1, 0, 0, 1),
            ⲆⵠᐃᐃᐃΔⲆ: new ⲆⵠΔᐃ.ⵠⲆΔΔⵠ(ⲆⵠΔᐃ.ⵠᐃⲆᐃΔⵠΔ, 0, 1, 0, 0, 1),
            ΔΔⵠⵠⲆⵠᐃ: new ⲆⵠΔᐃ.ⵠⲆΔΔⵠ(ⲆⵠΔᐃ.ⵠᐃⲆᐃΔⵠΔ, 0, 1, 0, 0, 1),
            ᐃᐃᐃⲆⵠ: new ⲆⵠΔᐃ.ⵠⲆΔΔⵠ(ⲆⵠΔᐃ.ⵠᐃⲆᐃΔⵠΔ, 0, 1, 0, 0, 1),
            ΔΔΔ: function () {
                this.ᐃΔⵠᐃΔⵠⲆ.ΔΔΔ();
                this.ⵠⲆⵠⵠⲆᐃⵠ.ΔΔΔ();
                this.ⲆᐃⲆⵠⵠⵠⵠ.ΔΔΔ();
                this.ΔⲆΔⵠⲆⵠⲆ.ΔΔΔ();
                this.ⲆΔᐃⵠⲆᐃⵠ.ΔΔΔ();
                this.ΔᐃⲆᐃⲆΔⵠ.ΔΔΔ();
                this.ⲆⵠᐃⲆᐃ.ΔⵠΔⲆⵠⲆΔ(this.c);
                this.ᐃⵠⲆⲆᐃ.ΔⵠΔⲆⵠⲆΔ(this.ΔⵠΔⲆ);
                this.ⵠᐃᐃΔᐃⲆᐃ.ΔⵠΔⲆⵠⲆΔ(this.ⵠⲆᐃ);
                this.ⲆⵠᐃᐃᐃΔⲆ.ΔⵠΔⲆⵠⲆΔ(this.ⵠᐃᐃ);
                this.ΔΔⵠⵠⲆⵠᐃ.ΔⵠΔⲆⵠⲆΔ(this.ⲆⲆⲆ);
                this.ᐃᐃᐃⲆⵠ.ΔⵠΔⲆⵠⲆΔ(this.ⵠΔⵠᐃΔᐃⲆ);
            }
        };
        this.ⵠⵠⲆΔⲆᐃᐃ = Kn;
        this.ⵠⲆᐃⵠⵠᐃᐃ = os;
        this.ⵠⵠΔⲆⲆ = false;
        this.ΔᐃⲆⵠⵠⵠᐃ = os;
        this.ᐃΔⵠΔ = {
            max: 10,
            ΔⲆⵠΔᐃⲆΔ: 0,
            ΔᐃⲆⵠⲆ: 0,
            ΔᐃⲆ: [],
            ᐃΔΔᐃΔ: [],
            ΔᐃᐃⵠⵠⲆⵠ: function (a, b) {
                if (a === 1) {
                    this.ΔᐃⲆⵠⲆ = mw.ᐃΔᐃΔΔΔⲆᐃᐃ;
                }
                this.ΔⲆⵠΔᐃⲆΔ += b;
                this.max = 10 + this.ΔⲆⵠΔᐃⲆΔ + this.ΔᐃⲆⵠⲆ;
            },
            ⲆⲆⲆⵠⲆΔΔ: {
                item: -1,
                ᐃΔ: null,
                ᐃⵠᐃᐃⲆ: 0,
                ⵠⵠⵠΔᐃΔΔ: 0,
                Ⲇᐃᐃⵠⵠ: -1,
                ⵠⲆΔᐃᐃ: -1,
                ΔΔᐃⵠⵠ: function (a) {
                    if (!!this.ᐃⵠᐃᐃⲆ && (a.x !== this.Ⲇᐃᐃⵠⵠ || a.y !== this.ⵠⲆΔᐃᐃ)) {
                        this.ⵠⵠⵠΔᐃΔΔ = 1;
                    }
                },
                start: function (a, b) {
                    this.Ⲇᐃᐃⵠⵠ = b.x;
                    this.ⵠⲆΔᐃᐃ = b.y;
                    this.item = a;
                    this.ᐃΔ = Ww.ᐃΔⵠΔ.ᐃΔΔᐃΔ[a].info.ᐃΔ[2];
                    this.ᐃⵠᐃᐃⲆ = 1;
                },
                stop: function () {
                    this.ᐃⵠᐃᐃⲆ = 0;
                    this.ⵠⵠⵠΔᐃΔΔ = 0;
                    this.Ⲇᐃᐃⵠⵠ = -1;
                    this.ⵠⲆΔᐃᐃ = -1;
                },
                release: function () {
                    var a = -1;
                    var b = Ww.ᐃΔⵠΔ.ᐃΔΔᐃΔ;
                    var c = 0;
                    if (this.ᐃⵠᐃᐃⲆ && this.ⵠⵠⵠΔᐃΔΔ) {
                        for (var d = 0; d < b.length; d++) {
                            if (b[d].info.state === Vv) {
                                a = d;
                                break;
                            }
                        }
                        if (a !== -1 && a !== this.item && b[this.item]) {
                            c = 1;
                            var f = b[a];
                            b[a] = b[this.item];
                            b[this.item] = f;
                            Yw.ⵠᐃᐃᐃᐃⲆⵠ();
                        }
                    }
                    this.stop();
                    return c;
                },
                ⲆⲆΔⵠ: function (a, b) {
                    if (this.ᐃⵠᐃᐃⲆ && this.ⵠⵠⵠΔᐃΔΔ) {
                        Qc(ro, this.ᐃΔ, Math.floor(a - this.ᐃΔ.width / 2), Math.floor(b - this.ᐃΔ.height / 2));
                    }
                }
            },
            ᐃⲆΔⲆΔⵠΔⲆᐃ: function (a) {
                for (d = 0; d < a.length; d++) {
                    if (this.ΔᐃⲆ[a[d][0]] == a[d][1]) {
                        return Zj;
                    }
                }
                return false;
            },
            ᐃⲆⵠΔᐃ: function (a) {
                for (var b = 0; b < this.ᐃΔΔᐃΔ.length; b++) {
                    if (this.ᐃΔΔᐃΔ[b].id == a) {
                        return b;
                    }
                }
                return -1;
            },
            ᐃⲆΔⲆⵠΔᐃ: function (a, b) {
                this.ΔᐃⲆ[a] = 0;
                this.ᐃΔΔᐃΔ.splice(b, 1);
                Yw.ⵠᐃᐃᐃᐃⲆⵠ();
            },
            ⵠⲆᐃᐃⲆᐃⵠ: function (a, b, c) {
                ΔΔΔ = Uq;
                this.ΔᐃⲆ[a] = Math.max(0, this.ΔᐃⲆ[a] - b);
                if (!this.ΔᐃⲆ[a] && c >= 0) {
                    this.ᐃⲆΔⲆⵠΔᐃ(a, c);
                }
            }
        };
        this.ⲆⵠᐃⵠⲆ = {
            enabled: false,
            translate: {
                y: 0,
                x: 0
            },
            ⵠⲆⲆΔⲆΔⲆ: function () {
                if (cf.mode == 1 && !Ww.ⵠⲆᐃⵠⵠᐃᐃ) {
                    Ww.ⲆⵠᐃⵠⲆ.enabled = !Ww.ⲆⵠᐃⵠⲆ.enabled;
                    if (Ww.ⲆⵠᐃⵠⲆ.enabled) {
                        Yw.options.ᐃΔⲆⲆΔⲆⲆ.display = "inline-block";
                    } else {
                        Yw.options.ᐃΔⲆⲆΔⲆⲆ.display = "none";
                    }
                }
            }
        };
        Yw.options.ᐃΔⲆⲆΔⲆⲆ.display = "none";
        this.ΔᐃΔΔᐃ = {
            enabled: os,
            translate: {
                x: 0,
                y: 0
            },
            ᐃⵠⵠⵠⲆ: 0,
            ⵠⲆⲆΔⲆΔⲆ: function () {
                Ww.ΔᐃΔΔᐃ.enabled = !Ww.ΔᐃΔΔᐃ.enabled;
                if (Ww.ΔᐃΔΔᐃ.enabled) {
                    Yw.options.ᐃⵠⲆⲆⵠΔΔ.display = "inline-block";
                } else {
                    Yw.options.ᐃⵠⲆⲆⵠΔΔ.display = "none";
                }
            },
            ΔΔΔ: function () {
                if (!!this.enabled && Ww.ΔΔⵠᐃ.id < 0 && !Yw.ⵠΔΔᐃ.open) {
                    this.ᐃⵠⵠⵠⲆ += $w;
                    if (this.ᐃⵠⵠⵠⲆ > 2) {
                        this.ᐃⵠⵠⵠⲆ = 0;
                        if (Ww.ᐃⵠⲆⲆ.ⵠⲆᐃ < 0.35) {
                            if (Ww.ᐃΔⵠΔ.ΔᐃⲆ[110]) {
                                Δⵠᐃⵠ.Ⲇᐃⵠᐃⵠ(110, Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(110));
                            } else if (Ww.ᐃΔⵠΔ.ΔᐃⲆ[192]) {
                                Δⵠᐃⵠ.Ⲇᐃⵠᐃⵠ(192, Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(192));
                            } else if (Ww.ᐃΔⵠΔ.ΔᐃⲆ[196]) {
                                Δⵠᐃⵠ.Ⲇᐃⵠᐃⵠ(196, Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(196));
                            } else if (Ww.ᐃΔⵠΔ.ΔᐃⲆ[189]) {
                                Δⵠᐃⵠ.Ⲇᐃⵠᐃⵠ(189, Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(189));
                            } else if (Ww.ᐃΔⵠΔ.ΔᐃⲆ[207]) {
                                Δⵠᐃⵠ.Ⲇᐃⵠᐃⵠ(207, Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(207));
                            } else if (Ww.ᐃΔⵠΔ.ΔᐃⲆ[205]) {
                                Δⵠᐃⵠ.Ⲇᐃⵠᐃⵠ(205, Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(205));
                            } else if (Ww.ᐃΔⵠΔ.ΔᐃⲆ[209]) {
                                Δⵠᐃⵠ.Ⲇᐃⵠᐃⵠ(209, Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(209));
                            } else if (Ww.ᐃΔⵠΔ.ΔᐃⲆ[143]) {
                                Δⵠᐃⵠ.Ⲇᐃⵠᐃⵠ(143, Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(143));
                            } else if (Ww.ᐃΔⵠΔ.ΔᐃⲆ[117]) {
                                Δⵠᐃⵠ.Ⲇᐃⵠᐃⵠ(117, Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(117));
                            } else if (Ww.ᐃΔⵠΔ.ΔᐃⲆ[138]) {
                                Δⵠᐃⵠ.Ⲇᐃⵠᐃⵠ(138, Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(138));
                            } else if (Ww.ᐃΔⵠΔ.ΔᐃⲆ[133]) {
                                Δⵠᐃⵠ.Ⲇᐃⵠᐃⵠ(133, Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(133));
                            } else if (Ww.ᐃΔⵠΔ.ΔᐃⲆ[145]) {
                                Δⵠᐃⵠ.Ⲇᐃⵠᐃⵠ(145, Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(145));
                            } else if (Ww.ᐃΔⵠΔ.ΔᐃⲆ[136]) {
                                Δⵠᐃⵠ.Ⲇᐃⵠᐃⵠ(136, Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(136));
                            } else if (Ww.ᐃΔⵠΔ.ΔᐃⲆ[197]) {
                                Δⵠᐃⵠ.Ⲇᐃⵠᐃⵠ(197, Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(197));
                            }
                        } else if (Ww.ᐃⵠⲆⲆ.ⵠᐃᐃ < 0.35 && Ww.ᐃΔⵠΔ.ΔᐃⲆ[127]) {
                            Δⵠᐃⵠ.Ⲇᐃⵠᐃⵠ(127, Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(127));
                        }
                    }
                }
            }
        };
        Yw.options.ᐃⵠⲆⲆⵠΔΔ.display = "none";
        this.ΔΔⵠᐃ = {
            id: -1,
            ⵠΔⲆΔ: -1,
            timeout: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(og, 0, 1, 0, 1, 1),
            ᐃΔⲆⲆⲆ: false,
            ⲆᐃⲆⲆ: -1,
            mode: 0,
            label: [],
            ⲆⵠⲆᐃΔ: [],
            ⵠΔᐃᐃⵠ: Kn,
            ⲆΔᐃΔᐃ: Ij,
            ᐃΔΔⵠΔᐃᐃ: false,
            ⵠΔᐃᐃᐃ: false,
            ΔⵠΔᐃⲆᐃᐃⲆⵠ: function () {
                this.mode = this.mode === 0 ? 1 : 0;
            },
            ᐃⲆᐃⲆⵠᐃᐃⲆΔ: function (a) {
                this.ⵠΔᐃᐃⵠ = a;
                var b = Yw.ⵠΔΔᐃ;
                if (b.open) {
                    b.ΔⵠⲆⲆᐃᐃⵠ(b.button);
                }
                this.ΔΔΔ();
            },
            ᐃⲆⵠⵠᐃⵠⲆᐃⵠ: function (a) {
                var b = Ls[a];
                this.id = a;
                this.ᐃΔⲆⲆⲆ = jo;
                cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ];
                this.timeout.ᐃⲆⲆΔⲆΔΔ = b.time * 8;
                this.ⵠΔⲆΔ = b.ⵠΔⲆΔ;
            },
            ᐃⵠⵠⲆⵠⲆⵠⵠΔ: function (a) {
                var b = Ls[a];
                this.id = a;
                this.ᐃΔⲆⲆⲆ = true;
                var c = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ];
                if (c && c.right == 28) {
                    this.timeout.ᐃⲆⲆΔⲆΔΔ = b.time * 3;
                } else {
                    this.timeout.ᐃⲆⲆΔⲆΔΔ = b.time;
                }
                this.ⵠΔⲆΔ = b.ⵠΔⲆΔ;
                for (var d = 0; d < b.r.length; d++) {
                    var e = b.r[d];
                    Ww.ᐃΔⵠΔ.ⵠⲆᐃᐃⲆᐃⵠ(e[0], e[1], Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(e[0]));
                }
                Yw.ⵠᐃᐃᐃᐃⲆⵠ();
            },
            ΔΔΔ: function () {
                this.ⲆⵠⲆᐃΔ = [];
                if (Yw.ⵠⲆᐃΔⲆ.ΔΔⵠᐃ === 1) {
                    Yw.ⵠⲆᐃΔⲆ.display = 0;
                }
                for (var a in Ls) {
                    var b = Ls[a];
                    var c = jo;
                    if (b.r) {
                        for (var d = 0; d < b.r.length; d++) {
                            if (Ww.ᐃΔⵠΔ.max >= 16 && b.id === 100) {
                                c = pl;
                                break;
                            }
                            if (b.w > this.ⵠΔᐃᐃⵠ || b.f > this.ⲆΔᐃΔᐃ || b.ⲆⲆⲆ > this.ᐃΔΔⵠΔᐃᐃ || b.e > this.ⵠΔᐃᐃᐃ) {
                                c = false;
                                break;
                            }
                            var f = b.r[d];
                            if (!Ww.ᐃΔⵠΔ.ΔᐃⲆ[f[0]] || Ww.ᐃΔⵠΔ.ΔᐃⲆ[f[0]] < f[1]) {
                                c = dq;
                                break;
                            }
                        }
                        if (c) {
                            this.ⲆⵠⲆᐃΔ.push(Yw.Δⵠⵠ[b.id]);
                        }
                    }
                }
                Yw.ΔⲆΔⲆⲆᐃΔ();
                Yw.ⲆⲆΔᐃⵠⲆᐃ();
                Yw.Δⵠⵠᐃⵠᐃᐃ();
                Yw.ΔⵠⵠΔⵠΔᐃ();
                Yw.ⲆΔⵠⵠΔⵠᐃ();
                Yw.ⵠⲆᐃΔΔⵠᐃ();
                Yw.sign.ᐃᐃⵠⵠⵠΔⵠ();
            },
            ΔᐃⲆᐃⵠΔΔ: function () {
                this.id = -1;
                this.ᐃΔⲆⲆⲆ = Js;
                this.timeout.Δᐃᐃ = 0;
                this.timeout.ⲆⲆⲆ = false;
                this.ΔΔΔ();
            }
        };
        this.ⵠⲆᐃⵠⵠᐃΔ = {
            message: T,
            ⲆⲆΔⵠ: fv
        };
        this.alert = {
            timeout: new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Js, 1, 1, 0, 4, 0.3),
            text: "",
            label: null,
            ⲆⲆΔⵠ: kv,
            list: []
        };
        this.ⵠΔⵠⲆΔ = {
            ⵠΔ: document.createElement("canvas"),
            ΔᐃⵠΔᐃ: [],
            ΔΔΔ: ii,
            translate: {
                x: 0,
                y: 0
            },
            sort: function () {
                var a = [];
                for (var b = cf.ⲆⲆⵠΔ, c = 0; c < b.length; c++) {
                    if (b[c].ΔᐃᐃⲆΔ) {
                        a.push({
                            id: c,
                            ⲆᐃᐃⲆ: b[c].ⵠΔΔᐃᐃ
                        });
                    }
                }
                a.sort(function (a, b) {
                    return b.ⲆᐃᐃⲆ - a.ⲆᐃᐃⲆ;
                });
                this.ΔᐃⵠΔᐃ = [];
                for (c = 0; c < a.length && c < 10; c++) {
                    this.ΔᐃⵠΔᐃ.push(a[c].id);
                }
                this.ΔΔΔ = ii;
            },
            ⵠΔⲆΔᐃ: function (a) {
                for (var b = cf.ⲆⲆⵠΔ, c = 0; c < b.length; c++) {
                    b[c].ⵠΔΔᐃᐃ = 0;
                }
                b[Ww.id].ⵠΔΔᐃᐃ = ⲆⵠΔᐃ.ⵠᐃⵠⲆᐃΔᐃ(a[1]);
                this.ΔᐃⵠΔᐃ = [];
                for (c = 2; c < a.length; c += 2) {
                    this.ΔᐃⵠΔᐃ.push(a[c]);
                    b[a[c]].ⵠΔΔᐃᐃ = ⲆⵠΔᐃ.ⵠᐃⵠⲆᐃΔᐃ(a[c + 1]);
                }
                this.ΔΔΔ = vh;
            }
        };
        this.ⵠΔⵠⲆΔ.ⵠΔ.width = po * 180;
        this.ⵠΔⵠⲆΔ.ⵠΔ.height = po * 300;
        this.ⵠΔⵠⲆΔ.Ⲇ = this.ⵠΔⵠⲆΔ.ⵠΔ.getContext("2d");
        this.ⲆᐃⲆⵠⵠ = {
            open: false,
            input: document.getElementById("commandInput"),
            ᐃⲆᐃᐃⲆᐃᐃ: document.getElementById("commandsBox"),
            style: document.getElementById("commandMainBox").style,
            ᐃΔⲆᐃᐃᐃⲆⲆᐃ: function (a) {
                this.ᐃⲆᐃᐃⲆᐃᐃ.innerHTML += a;
            },
            ΔΔΔ: function () {
                this.style.left = Math.floor(so / 2 - 300) + "px";
                this.style.top = Math.floor(gq / 2 - 250) + "px";
            },
            ⲆᐃᐃᐃΔᐃᐃᐃᐃ: function () {
                this.ᐃⲆᐃᐃⲆᐃᐃ.innerHTML = "";
            },
            ΔⵠᐃⵠⲆ: function () {
                this.open = false;
                this.style.display = "none";
            },
            ᐃΔⲆΔΔ: function (a) {
                var b = "<table class=\"tableList\">";
                for (var c = 0; c < a.length; c++) {
                    if (c % 3 == 0) {
                        b += "<tr>";
                    }
                    b += "<td class=\"tableList\">" + a[c] + "</td>";
                    if ((c + 1) % 3 == 0 || c + 1 === a.length) {
                        b += "</tr>";
                    }
                }
                return b += "</table>";
            },
            Δⵠᐃⵠᐃ: function (a, b, c, d) {
                d = d || "";
                var f = "<div class=commandWritten>" + (a = a || "");
                f += (b = b || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
                f += (c = c || "") + "</div>" + d + "</div>";
                this.ᐃΔⲆᐃᐃᐃⲆⲆᐃ(f);
                this.ⲆⲆΔⲆᐃⲆⲆⲆΔ();
            },
            ⲆⲆΔⲆᐃⲆⲆⲆΔ: function () {
                this.ᐃⲆᐃᐃⲆᐃᐃ.scrollTop = this.ᐃⲆᐃᐃⲆᐃᐃ.scrollHeight;
            },
            ⲆⵠΔⵠⵠΔⲆ: function (b) {
                switch (b) {
                    case "clean":
                        this.ⲆᐃᐃᐃΔᐃᐃᐃᐃ();
                        return Zj;
                    case "list":
                        var c = "";
                        const a = aj.document.createElement("div");
                        for (var d = cf.ⲆⲆⵠΔ, e = 0; e < d.length; e++) {
                            var f = d[e];
                            if (f.ΔᐃᐃⲆΔ) {
                                a.innerText = f.ⲆⵠΔΔⲆ;
                                c += a.innerHTML + " <span style=\"color:green\">#" + e + "</span><br />";
                            }
                        }
                        this.Δⵠᐃⵠᐃ("list", 1, "List all connected players", c);
                        return true;
                    case "weapon-list":
                        this.Δⵠᐃⵠᐃ("Weapons", 1, "List all weapons in the game", this.ᐃΔⲆΔΔ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"]));
                        return h;
                    case "tool-list":
                        this.Δⵠᐃⵠᐃ("Tools", 1, "List all tools in the game", this.ᐃΔⲆΔΔ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
                        return true;
                    case "survival-list":
                        this.Δⵠᐃⵠᐃ("Survival Items", 1, "List all survival items in the game", this.ᐃΔⲆΔΔ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
                        return ss;
                    case "resource-list":
                        this.Δⵠᐃⵠᐃ("Resources", 1, "List all resources in the game", this.ᐃΔⲆΔΔ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
                        return Kh;
                    case "food-list":
                        this.Δⵠᐃⵠᐃ("Food", 1, "List all food in the game", this.ᐃΔⲆΔΔ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
                        return true;
                    case "hat-list":
                        this.Δⵠᐃⵠᐃ("Hats", 1, "List all hats in the game", this.ᐃΔⲆΔΔ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
                        return true;
                    case "building-list":
                        this.Δⵠᐃⵠᐃ("Buildings", 1, "List all buildings in the game", this.ᐃΔⲆΔΔ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
                        return true;
                    case "biome-list":
                        this.Δⵠᐃⵠᐃ("Biomes list", 1, "List all available biomes in the game", this.ᐃΔⲆΔΔ(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
                        return true;
                    case "help-config":
                        this.Δⵠᐃⵠᐃ("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
                        return true;
                    case "pos":
                        d = cf.ⵠΔⲆ[0];
                        e = 0;
                        for (; e < d.length; e++) {
                            var g = d[e];
                            if (g.ⲆⲆΔⲆ === Ww.id) {
                                this.Δⵠᐃⵠᐃ("pos", 1, "Your position is " + Math.floor(g.x / 100) + ":" + Math.floor(g.y / 100));
                                return true;
                            }
                        }
                        break;
                    case "help-admin":
                        this.Δⵠᐃⵠᐃ("help-admin", 1, "List all available commands for admin only", this.ᐃΔⲆΔΔ(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
                        return Uq;
                    case "help":
                        this.Δⵠᐃⵠᐃ("help", 1, "List all available commands", this.ᐃΔⲆΔΔ(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
                        return ss;
                }
                return X;
            },
            ⲆⵠΔⵠⲆΔⵠΔⵠ: function () {
                if (!this.open) {
                    this.open = true;
                    this.style.display = "inline-block";
                    this.input.focus();
                }
            },
            ⲆΔⵠⲆΔⵠⵠ: function () {
                var a = this.input.value;
                if (a && a.length > 0) {
                    if (!this.ⲆⵠΔⵠⵠΔⲆ(a)) {
                        Δⵠᐃⵠ.ⵠⲆⵠᐃⵠᐃⵠⵠⲆ(this.input.value);
                    }
                    this.input.value = "";
                }
            }
        };
        this.Δⵠⵠⵠᐃ = {
            open: false,
            input: document.getElementById("chat_input"),
            style: document.getElementById("chat_block").style,
            ΔΔΔ: function () {
                this.style.left = Math.floor(so / 2 - 150) + "px";
                this.style.top = Math.floor(gq / 2 + 80) + "px";
            },
            ΔⵠᐃⵠⲆ: function () {
                this.open = false;
                this.style.display = "none";
                this.input.value = "";
            },
            prefix: "!",
            cmd: {
                hud: function (a) {
                    if (a === "off") {
                        var b = "Enter \"!hud\" without the quotes to restore the HUD";
                        if (Ww.alert.text) {
                            Ww.alert.list.push(b);
                        } else {
                            Ww.alert.text = b;
                        }
                        Yw.ᐃᐃΔⵠⵠⲆᐃ = 0;
                    } else {
                        Yw.ᐃᐃΔⵠⵠⲆᐃ = 1;
                    }
                }
            },
            ⲆⵠΔⵠⵠΔⲆ: function (a) {
                if (a.charAt(0) == this.prefix) {
                    var b = "";
                    var c = "";
                    for (var d = 1; d < a.length && a.charAt(d) != " "; d++) {
                        b += a.charAt(d);
                    }
                    for (d++; d < a.length; d++) {
                        c += a.charAt(d);
                    }
                    var e = this.cmd[b];
                    if (e) {
                        e(c);
                    }
                    return true;
                }
                return os;
            },
            ⲆⲆᐃᐃᐃ: function () {
                if (this.open) {
                    this.open = Ia;
                    this.style.display = "none";
                    var a = this.input.value;
                    if (a) {
                        if (!this.ⲆⵠΔⵠⵠΔⲆ(a)) {
                            Δⵠᐃⵠ.ⵠᐃⵠΔⵠᐃⲆΔⲆ(this.input.value);
                        }
                        this.input.value = "";
                    }
                } else {
                    this.open = Uq;
                    this.style.display = "inline-block";
                    this.input.focus();
                }
            }
        };
        this.ⲆΔⲆⵠⵠᐃᐃ = {
            ᐃⵠⵠΔΔ: [],
            ΔΔΔ: function (a) {
                a.y += $w * 80 * a.ⲆᐃᐃⲆ;
                a.x += $w * 80 * a.c;
                a.ᐃⵠⲆⲆᐃ -= $w / 6;
                if (a.ᐃⵠⲆⲆᐃ > 0.2) {
                    a.alpha = Math.min(a.alpha + $w * 3, 1);
                } else {
                    a.alpha = Math.max(a.alpha - $w * 1, 0);
                }
            },
            add: function (b) {
                var c = Math.floor(Math.min(so / 1366 * 34, 44) * Math.max(Math.min(cf.ᐃⵠⵠⲆⲆ + 1000, 3000) / 3000, 0));
                if (this.ᐃⵠⵠΔΔ.length < c) {
                    var d = Math.floor(Math.random() * 5);
                    var e = -Ww.ᐃⲆΔ.x + Math.floor(Math.random() * Ww.ᐃⲆΔ.w);
                    var f = -Ww.ᐃⲆΔ.y + Math.floor(Math.random() * Ww.ᐃⲆΔ.ⵠⲆᐃ);
                    var g = Math.random(Math.PI);
                    this.ᐃⵠⵠΔΔ.push(new uw(d, e, f, g));
                }
            }
        };
        this.ⵠⲆᐃᐃΔⲆⲆ = 0;
        this.ΔⵠⵠⲆⵠ = 0;
        this.ΔᐃᐃΔᐃ = {
            ᐃⵠⵠΔΔ: [],
            ΔⵠᐃΔⵠ: 0,
            ⲆᐃⵠⵠⲆ: 0,
            ΔΔΔ: function (a) {
                a.y += $w * (200 + this.ⲆᐃⵠⵠⲆ * 800) * a.ⲆᐃᐃⲆ;
                a.x += $w * (200 + this.ⲆᐃⵠⵠⲆ * 800) * a.c;
                a.ᐃⵠⲆⲆᐃ -= $w / 6;
                if (a.ᐃⵠⲆⲆᐃ > 0.2) {
                    a.alpha = Math.min(a.alpha + $w * 3, 1);
                } else {
                    a.alpha = Math.max(a.alpha - $w * 1, 0);
                }
            },
            add: function (b) {
                var c = Math.floor(Math.min((this.ⲆᐃⵠⵠⲆ + 0.1) * 68 * (so / 1366), (this.ⲆᐃⵠⵠⲆ + 0.1) * 68 + 10) * Math.max(Math.min(cf.ⲆᐃⲆⵠΔ + 1000, 3000) / 3000, 0));
                if (this.ᐃⵠⵠΔΔ.length < c) {
                    var d = Math.floor(Math.random() * 5);
                    var e = -Ww.ᐃⲆΔ.x + Math.floor(Math.random() * Ww.ᐃⲆΔ.w);
                    var f = -Ww.ᐃⲆΔ.y + Math.floor(Math.random() * Ww.ᐃⲆΔ.ⵠⲆᐃ);
                    var g = Math.random(Math.PI);
                    if (Ww.ΔᐃᐃΔᐃ.ΔⵠᐃΔⵠ !== 0) {
                        e -= Ww.ᐃⲆΔ.w / 2;
                    }
                    this.ᐃⵠⵠΔΔ.push(new uw(d, e, f, g));
                }
            }
        };
        this.ΔΔⲆᐃⲆ = {
            ᐃⵠⵠΔΔ: [],
            ΔⵠᐃΔⵠ: 0,
            ⲆᐃⵠⵠⲆ: 0,
            ΔΔΔ: function (a) {
                if (zf.ⵠΔⲆᐃᐃᐃⲆ()) {
                    a.y += $w * a.ⵠᐃⲆᐃⲆ * (5.5 + this.ⲆᐃⵠⵠⲆ * 10);
                } else {
                    a.y += $w * a.ⵠᐃⲆᐃⲆ * (5 + this.ⲆᐃⵠⵠⲆ * 10);
                }
                a.ᐃⵠⲆⲆᐃ -= $w / 2;
                if (zf.ΔΔΔⵠⲆΔⲆ()) {
                    a.x += $w * (100 + this.ⲆᐃⵠⵠⲆ * 400);
                } else if (zf.ΔⵠΔⵠᐃⲆⲆ()) {
                    a.x -= $w * (130 - this.ⲆᐃⵠⵠⲆ * 400);
                } else {
                    a.x -= $w * (30 - this.ⲆᐃⵠⵠⲆ * 400);
                }
                if (a.ᐃⵠⲆⲆᐃ > 0.2) {
                    a.alpha = Math.min(a.alpha + $w * 3, 1);
                } else {
                    a.alpha = Math.max(a.alpha - $w * 5, 0);
                }
            },
            add: function (a) {
                var b = Math.floor(Math.min((this.ⲆᐃⵠⵠⲆ * 1.5 + 0.5) * 34 * (so / 1366), (this.ⲆᐃⵠⵠⲆ * 1.5 + 0.5) * 34 + 10) * Math.max(Math.min(cf.ᐃΔΔΔⲆ + 1000, 3000) / 3000, 0));
                if (this.ᐃⵠⵠΔΔ.length < b) {
                    var c = Math.floor(Math.random() * 5);
                    var d = -Ww.ᐃⲆΔ.x + Math.floor(Math.random() * Ww.ᐃⲆΔ.w);
                    var e = -Ww.ᐃⲆΔ.y + Math.floor(Math.random() * 400 * po - po * 200);
                    this.ᐃⵠⵠΔΔ.push(new uw(c, d, e, 0));
                }
            }
        };
        this.ⲆΔⵠⲆ = [];
        for (var d = 0; d < 4; d++) {
            this.ⲆΔⵠⲆ.push(new c());
        }
    }
    function vw() {
        Math.random();
        return "a";
    }
    function Dw() {
        Math.random();
        return "p";
    }
    function Ew() {
        Math.random();
        return "o";
    }
    function ww() {
        Math.random();
        return "t";
    }
    function Fw() {
        Math.random();
        return "d";
    }
    function Gw() {
        Math.random();
        return "C";
    }
    function Hw() {
        Math.random();
        return "n";
    }
    function Dw() {
        Math.random();
        return "p";
    }
    function Ew() {
        Math.random();
        return "o";
    }
    function Iw(a, b, c, d) {
        oi(pr, a, b, c, d);
        const e = ((143 + (rr[0] ^ 35088 ^ rr[2])) * 75 + 74) % 65537;
        return (24 << ((e ^ rr[3]) & 255)) + (8 << ((e ^ rr[3]) >> 24 & 255)) + (16 << ((e ^ rr[3]) >> 8 & 255)) + (0 << ((e ^ rr[3]) >> 16 & 255));
    }
    ⵠΔⲆⲆᐃⲆᐃᐃᐃ = 1;
    setTimeout(function b() {
        var c = Hw() + vw() + ww() + Aw();
        var d = function () {
            Math.random();
            return "W";
        }() + yw() + (Math.random(), "b") + function () {
            Math.random();
            return "S";
        }() + Ew() + function () {
            Math.random();
            return "c";
        }() + function () {
            Math.random();
            return "k";
        }() + yw() + ww();
        if (aj[d].toString().indexOf(c) === -1) {
            Math.floor = function () {
                return Math.round() + 1;
            };
        }
        var e = zw() + yw() + Hw() + Fw();
        var f = Dw() + xw() + Ew() + ww() + Ew() + ww() + function () {
            Math.random();
            return "y";
        }() + Dw() + yw();
        if (aj[d][f][e].toString().indexOf(c) === -1) {
            Math.floor = function () {
                return Math.round() + 1;
            };
        }
        d = Fw() + xw() + vw() + function () {
            Math.random();
            return "w";
        }() + function () {
            Math.random();
            return "I";
        }() + function () {
            Math.random();
            return "m";
        }() + vw() + Bw() + yw();
        e = Gw() + vw() + Hw() + function () {
            Math.random();
            return "v";
        }() + vw() + zw() + function () {
            Math.random();
            return "R";
        }() + yw() + Hw() + Fw() + yw() + xw() + Aw() + Hw() + Bw() + Gw() + Ew() + Hw() + ww() + yw() + function () {
            Math.random();
            return "x";
        }() + ww() + function () {
            Math.random();
            return "2";
        }() + function () {
            Math.random();
            return "D";
        }();
        if (aj[e][f][d].toString().indexOf(c) === -1) {
            Math.floor = function () {
                return Math.round() + 1;
            };
        }
        setTimeout(b, 100000);
    }, 100000);
    function Jw(c, d, e, f, i, j) {
        Tj(pr, c, d, e, f, i, j);
        const a = rf(rr[0], rr[1], rr[2], rr[3], rr[4], rr[5]);
        m = rr[0];
        n = rr[1];
        o = rr[2];
        p = rr[3];
        q = rr[4];
        xi(pr, m, n, o, p, q);
        const k = ((172 + (zr(rr[0], rr[1], rr[2], rr[3]) ^ zr(rr[4], rr[0], rr[1], rr[2]))) * 48271 + 0) % 2147483647;
        var m;
        var n;
        var o;
        var p;
        var q;
        return (24 << ((a ^ k) >> 24 & 255)) + (8 << ((a ^ k) & 255)) + (0 << ((a ^ k) >> 16 & 255)) + (16 << ((a ^ k) >> 8 & 255));
    }
    function Kw(b, d) {
        this.ⵠΔ = b;
        this.Ⲇ = d;
        if (aj.navigator.userAgent.indexOf("Edge") > -1) {
            this.ΔΔⲆΔⵠⲆⲆ = "default";
            this.ⲆⲆΔⵠΔⲆⲆ = "pointer";
        } else {
            this.ΔΔⲆΔⵠⲆⲆ = "url('img/cursor0.png'), default";
            this.ⲆⲆΔⵠΔⲆⲆ = "url('img/cursor1.png'), pointer";
        }
        var j = this;
        function e(c, e, f, h, i) {
            var a = this;
            for (var k = e + 9, m = 0, n = h, p = e; p < k; p++) {
                j.buttons[p].info.callback = q;
                j.buttons[p].info.ⲆΔⲆⵠⵠᐃⵠᐃᐃ = c;
            }
            function q() {
                if (n !== this.ⲆᐃⲆᐃⵠⵠΔ && this.ⲆᐃⲆᐃⵠⵠΔ !== -1) {
                    if (this.ⲆᐃΔⵠⲆᐃⲆ > 0) {
                        if (e === ⵠΔⵠΔᐃⵠⵠ) {
                            u(o, fa, "none");
                        } else {
                            u(r, fa, "none");
                        }
                    } else if (e === ⵠΔⵠΔᐃⵠⵠ) {
                        u(o, ha, "inline-block");
                    } else {
                        u(r, ha, "inline-block");
                    }
                    n = this.ⲆᐃⲆᐃⵠⵠΔ;
                    f(this.ⲆᐃⲆᐃⵠⵠΔ);
                    b();
                }
            }
            function b() {
                var a = c[n];
                df.ⵠΔΔΔⲆⲆᐃ = $v(a.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, undefined, 10, 8);
                if (a.level !== At) {
                    df.ᐃⵠⲆⵠⲆᐃⵠ = $v("Level " + a.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, 10, 8);
                } else {
                    df.ᐃⵠⲆⵠⲆᐃⵠ = $v("by " + a.ⵠᐃⵠ, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, Uj, 10, 8);
                }
            }
            this.ⵠᐃΔⲆⲆ = function () {
                for (var a = e, d = m * 3; a < k && d < c.length; a++, d++) {
                    if (ⲆⲆⵠ.ⲆⵠΔΔⲆⵠⵠ !== c[d].ΔⲆⵠ || i[d] !== 0) {
                        j.buttons[a].info.ⲆᐃⲆᐃⵠⵠΔ = d;
                        for (var f = 0; f < 3; f++) {
                            j.buttons[a].info.ᐃΔ[f] = ᐃⵠᐃᐃᐃ[c[d].ΔⲆⵠ][f];
                            j.buttons[a].info.active = ha;
                            j.buttons[a].info.ⲆᐃΔⵠⲆᐃⲆ = i[d];
                        }
                    } else {
                        j.buttons[a].info.ⲆᐃⲆᐃⵠⵠΔ = -1;
                        j.buttons[a].info.active = fa;
                    }
                }
                for (; a < k; a++) {
                    j.buttons[a].info.ⲆᐃⲆᐃⵠⵠΔ = -1;
                    j.buttons[a].info.active = fa;
                }
                b();
            };
            j.buttons[k].info.callback = function () {
                if (m > 0) {
                    m--;
                }
                a.ⵠᐃΔⲆⲆ();
            };
            j.buttons[k + 1].info.callback = function () {
                if (c.length > m * 3 + 9) {
                    m++;
                }
                a.ⵠᐃΔⲆⲆ();
            };
        }
        function f() {
            var b = Number(ᐃᐃΔⵠ.get("starve_crate"));
            var c = Number(ᐃᐃΔⵠ.get("starve_dead"));
            var d = Number(ᐃᐃΔⵠ.get("starve_book"));
            var e = Number(ᐃᐃΔⵠ.get("starve_bag"));
            var f = Number(ᐃᐃΔⵠ.get("starve_skin"));
            var a = Number(ᐃᐃΔⵠ.get("starve_accessory"));
            j.ᐃΔΔⵠ = f || 0;
            j.ΔᐃΔΔΔ = d || 0;
            j.ⲆᐃᐃΔⵠ = b || 1;
            j.ⵠΔⵠⵠΔ = a || 0;
            j.ΔᐃⲆⵠⲆ = e || 0;
            j.ⵠᐃⵠⵠᐃ = c || 0;
        }
        function a() {
            for (var a = ⲆΔⲆⵠ.ⵠᐃⲆΔᐃ, b = 0; b < a.length; b++) {
                if (ⲆⲆⵠ.ⵠΔΔⲆΔ === a[b].ΔⲆⵠ) {
                    j.unlock.ᐃΔΔⵠ[b] = 1;
                } else {
                    j.unlock.ᐃΔΔⵠ[b] = 0;
                }
            }
            a = ⲆΔⲆⵠ.ΔΔⵠᐃⲆ;
            b = 0;
            for (; b < a.length; b++) {
                if (a[b].ΔⲆⵠ === ⲆⲆⵠ.ⵠΔΔⲆΔ) {
                    j.unlock.ⵠΔⵠⵠΔ[b] = 1;
                } else {
                    j.unlock.ⵠΔⵠⵠΔ[b] = 0;
                }
            }
            a = ⲆΔⲆⵠ.ΔΔΔⵠ;
            b = 0;
            for (; a.length > b; b++) {
                if (a[b].ΔⲆⵠ === ⲆⲆⵠ.ⵠΔΔⲆΔ) {
                    j.unlock.ΔᐃⲆⵠⲆ[b] = 1;
                } else {
                    j.unlock.ΔᐃⲆⵠⲆ[b] = 0;
                }
            }
            a = ⲆΔⲆⵠ.ⲆΔⵠⲆᐃ;
            b = 0;
            for (; b < a.length; b++) {
                if (a[b].ΔⲆⵠ === ⲆⲆⵠ.ⵠΔΔⲆΔ) {
                    j.unlock.ΔᐃΔΔΔ[b] = 1;
                } else {
                    j.unlock.ΔᐃΔΔΔ[b] = 0;
                }
            }
            a = ⲆΔⲆⵠ.ᐃΔᐃⵠΔ;
            b = 0;
            for (; b < a.length; b++) {
                if (ⲆⲆⵠ.ⵠΔΔⲆΔ === a[b].ΔⲆⵠ) {
                    j.unlock.ⲆᐃᐃΔⵠ[b] = 1;
                    j.unlock.ⵠᐃⵠⵠᐃ[b] = 1;
                } else {
                    j.unlock.ⲆᐃᐃΔⵠ[b] = 0;
                    j.unlock.ⵠᐃⵠⵠᐃ[b] = 0;
                }
            }
        }
        this.waiting = pl;
        this.ᐃⲆⲆⲆⵠᐃⵠ = 0;
        this.ΔᐃΔⲆⲆⲆⵠ = -1;
        this.ⵠΔΔᐃⲆⵠⵠ = {
            translate: {
                y: 0,
                x: 0
            },
            angle: 0,
            ᐃΔ: ΔⲆ[301],
            ⲆⲆΔⵠ: function () {
                this.angle += $w * 2;
                d.save();
                d.translate(this.translate.x + this.ᐃΔ.width / 2, this.translate.y + this.ᐃΔ.height / 2);
                d.rotate(this.angle);
                Qc(d, this.ᐃΔ, -this.ᐃΔ.width / 2, -this.ᐃΔ.height / 2);
                d.restore();
            }
        };
        this.ᐃΔⲆΔⵠⲆⵠ = {
            id: document.getElementById("langselect"),
            style: document.getElementById("langselect").style,
            translate: {
                y: 0,
                x: 0
            },
            ΔΔΔ: function () {
                this.style.left = Math.floor(this.translate.x) + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        this.ᐃᐃΔᐃΔ = 0;
        this.ᐃᐃⵠᐃᐃⵠⲆ = -1;
        this.ᐃⵠⲆᐃⲆⲆⵠ = hj;
        this.ⲆΔΔΔⵠⵠⲆ = "";
        this.ᐃⵠΔᐃΔⵠⵠ = "";
        this.ⵠᐃⲆⲆⲆⲆⵠ = undefined;
        this.ⲆⵠᐃᐃⲆ = 0;
        this.ⵠΔΔᐃΔⲆΔ = -1;
        this.ᐃΔᐃⵠΔⵠΔ = Xk;
        this.ⲆⵠᐃⲆⲆΔΔ = 0;
        this.ΔΔᐃᐃᐃⵠᐃ = 0;
        this.ⲆᐃⵠⵠᐃᐃΔ = 0;
        this.ΔΔΔᐃᐃ = 0;
        this.ⵠⵠⲆᐃΔⲆⵠ = 0;
        this.time = 0;
        this.ⵠΔΔᐃᐃ = 0;
        this.ᐃⲆⲆⵠⵠⵠⵠ = 0;
        this.ⲆⲆΔΔΔⲆᐃ = 0;
        this.ΔΔⲆⵠⵠⲆΔ = 0;
        this.ᐃΔΔⲆⲆᐃⵠ = 0;
        this.ⵠᐃΔⵠⵠΔᐃ = [];
        this.ⵠⲆΔⲆΔ = -1;
        this.ΔⵠⵠⵠΔΔⵠ = -1;
        this.ᐃᐃᐃⲆΔⲆΔ = -1;
        this.ⲆⲆⵠᐃⵠⵠΔ = undefined;
        this.ⵠⲆⵠΔⵠⵠΔ = Gj;
        this.ⲆⲆⵠⵠⲆⲆⲆ = -1;
        this.ⲆⲆⲆⲆⲆᐃᐃ = -1;
        this.ΔⵠⵠᐃᐃⲆᐃ = -1;
        this.ⵠⲆⲆⲆᐃⵠᐃ = -1;
        this.ⵠΔⲆΔΔⲆⵠ = undefined;
        this.ⵠⵠⲆΔΔΔⵠ = Uj;
        this.ᐃⲆΔΔᐃΔΔ = hj;
        this.ⵠΔΔΔⲆⲆᐃ = Og;
        this.ᐃⵠⲆⵠⲆᐃⵠ = undefined;
        this.ᐃⲆⲆⵠⵠⵠΔ = undefined;
        this.ᐃⵠⵠⵠⵠⵠᐃ = la;
        this.ΔⲆⵠⵠᐃᐃᐃ = Bh;
        this.ⵠΔⵠⵠⵠⵠⲆ = Cg;
        this.ⵠΔᐃⵠᐃΔⲆ = 3;
        this.ᐃΔΔΔ = 0;
        this.ⲆⵠⲆⵠⵠΔᐃⲆⲆ = os;
        this.ⵠⲆΔⵠⲆ = ᐃᐃΔⵠ.get("starve_quality") ? ᐃᐃΔⵠ.get("starve_quality") : "high";
        if (this.ⵠⲆΔⵠⲆ === "high") {
            document.getElementById("high_ing").style.backgroundColor = "#B56D18";
            document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
            this.ⵠⲆΔⵠⲆ = 1;
        } else {
            document.getElementById("low_ing").style.backgroundColor = "#B56D18";
            document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
            this.ⵠⲆΔⵠⲆ = 0;
        }
        this.ⲆᐃⵠᐃΔⵠᐃΔⵠ = function () {
            document.getElementById("high_ing").style.backgroundColor = "#B56D18";
            document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
            ᐃᐃΔⵠ.set("starve_quality", "high", {
                expires: 30
            });
            document.getElementById("input_ratio").value = 1;
            Yw.ᐃⲆᐃΔⲆⵠᐃ();
            df.ⵠⲆΔⵠⲆ = 1;
        };
        this.ⵠⵠⵠᐃᐃᐃⵠⵠΔ = function () {
            document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
            document.getElementById("low_ing").style.backgroundColor = "#B56D18";
            ᐃᐃΔⵠ.set("starve_quality", "low", {
                expires: 30
            });
            document.getElementById("input_ratio").value = 0.5 / (Oq / Pq);
            Yw.ᐃⲆᐃΔⲆⵠᐃ();
            df.ⵠⲆΔⵠⲆ = 0;
        };
        if (ᐃᐃΔⵠ.get("starve_mapping") === Db && dr === "FR") {
            zf.ΔᐃΔⵠΔᐃᐃ();
            this.mapping = "azerty";
        } else {
            this.mapping = ᐃᐃΔⵠ.get("starve_mapping") ? ᐃᐃΔⵠ.get("starve_mapping") : "qwerty";
        }
        if (this.mapping == "azerty") {
            zf.ΔᐃΔⵠΔᐃᐃ();
            document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
        } else {
            document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
        }
        this.ΔᐃΔⵠΔᐃᐃ = function () {
            zf.ΔᐃΔⵠΔᐃᐃ();
            document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
            ᐃᐃΔⵠ.set("starve_mapping", "azerty", {
                expires: 30
            });
        };
        this.ⵠᐃᐃⵠᐃⵠⲆ = function () {
            zf.ⵠᐃᐃⵠᐃⵠⲆ();
            document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
            document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
            ᐃᐃΔⵠ.set("starve_mapping", "qwerty", {
                expires: 30
            });
        };
        this.ΔⵠΔⵠΔⵠΔ = {
            id: document.getElementById("all_rights_reserved"),
            style: document.getElementById("all_rights_reserved").style,
            translate: {
                x: 0,
                y: 0
            },
            ΔΔΔ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        f();
        this.unlock = {};
        this.unlock.ᐃΔΔⵠ = [];
        this.unlock.ΔᐃⲆⵠⲆ = [];
        this.unlock.ΔᐃΔΔΔ = [];
        this.unlock.ⲆᐃᐃΔⵠ = [];
        this.unlock.ⵠᐃⵠⵠᐃ = [];
        this.unlock.ⵠΔⵠⵠΔ = [];
        this.ΔΔⲆⲆᐃΔᐃ = 0;
        this.ⵠΔⲆⲆΔⵠⲆ = a;
        a();
        this.ᐃⲆΔⲆⵠ = {
            id: document.getElementById("trevda"),
            style: document.getElementById("trevda").style,
            translate: {
                y: 0,
                x: 0
            },
            ΔΔΔ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        var g;
        var h = 0;
        function i() {
            j.ΔΔΔ();
            if (++h == 30) {
                j.ⲆⲆΔⲆᐃⲆΔ();
                j.ᐃⲆⲆⲆⵠᐃⵠ = Uq;
                j.ΔΔΔ();
                return;
            }
            aj.setTimeout(i, 33);
        }
        this.ΔⵠᐃⵠⲆ = function (a) {
            g = a;
            j.ᐃΔⲆΔᐃᐃⵠ();
            j.ᐃⲆⲆⲆⵠᐃⵠ = 0;
            m = -1;
            n();
        };
        var m = -1;
        function n() {
            j.ΔΔΔ();
            if (++m == 30) {
                ᐃᐃΔⵠ.set("starve_nickname", j.ⲆⵠΔΔⲆ.input.value, {
                    expires: 30
                });
                j.ⲆⵠΔΔⲆ.style.display = "none";
                j.ⲆΔᐃⲆⲆ.style.display = "none";
                j.ᐃΔⲆΔⵠⲆⵠ.style.display = "none";
                j.ΔⵠΔⵠΔⵠΔ.style.display = "none";
                j.ᐃⲆΔⲆⵠ.style.display = "none";
                j.stop();
                g();
                return;
            }
            aj.setTimeout(n, 33);
        }
        this.ⵠⵠΔᐃᐃ = Yh;
        this.stop = function () {
            this.ⵠⵠΔᐃᐃ = false;
        };
        this.ⲆⲆᐃᐃᐃ = function () {
            ax();
            document.getElementById("game_body").style.backgroundColor = Gr.ᐃⲆΔᐃⵠ[Vw.time];
            j.ⲆⵠΔΔⲆ.style.display = "inline-block";
            j.ⲆΔᐃⲆⲆ.style.display = "inline-block";
            j.ᐃΔⲆΔⵠⲆⵠ.style.display = "inline-block";
            j.ΔⵠΔⵠΔⵠΔ.style.display = "inline-block";
            j.ᐃⲆΔⲆⵠ.style.display = "inline-block";
            j.waiting = og;
            j.ⵠⵠΔᐃᐃ = vh;
            m = -1;
            h = 0;
            i();
        };
        this.ⵠⵠⵠΔᐃΔᐃ = function (a, b) {
            b = b < 0 ? -b : b;
            if (ba === (a.position & ba)) {
                if (Y === (a.position & Y)) {
                    a.translate.x = hq + a.translate.Ⲇᐃᐃⵠⵠ - b;
                } else if (Z === (a.position & Z)) {
                    a.translate.x = hq + a.translate.Ⲇᐃᐃⵠⵠ + b;
                } else {
                    a.translate.x = hq + a.translate.Ⲇᐃᐃⵠⵠ;
                }
            } else if (Y === (a.position & Y)) {
                a.translate.x = a.translate.Ⲇᐃᐃⵠⵠ - b;
            } else if ((a.position & Z) === Z) {
                a.translate.x = so - a.translate.Ⲇᐃᐃⵠⵠ + b;
            } else {
                a.translate.x = a.translate.Ⲇᐃᐃⵠⵠ;
            }
            if (ca === (a.position & ca)) {
                if ((a.position & _) === _) {
                    a.translate.y = iq + a.translate.ⵠⲆΔᐃᐃ - b;
                } else if (aa === (a.position & aa)) {
                    a.translate.y = iq + a.translate.ⵠⲆΔᐃᐃ + b;
                } else {
                    a.translate.y = iq + a.translate.ⵠⲆΔᐃᐃ;
                }
            } else if (_ === (a.position & _)) {
                a.translate.y = a.translate.ⵠⲆΔᐃᐃ - b;
            } else if (aa === (a.position & aa)) {
                a.translate.y = gq + a.translate.ⵠⲆΔᐃᐃ + b;
            } else {
                a.translate.y = a.translate.ⵠⲆΔᐃᐃ;
            }
            if (a.style !== undefined) {
                a.style.left = Math.floor(a.translate.x) + "px";
                a.style.top = Math.floor(a.translate.y) + "px";
            }
        };
        this.ΔΔΔ = function () {
            var a = 0;
            if (h != 30 || m != -1) {
                if (h != 30) {
                    a = 1500 / (h + 1) - 50;
                }
                if (m != -1) {
                    a = -(1750 / (30 - m + 1) - 48);
                }
            }
            for (var b = 0; b < this.ΔΔⲆΔ.length; b++) {
                this.ⵠⵠⵠΔᐃΔᐃ(this.ΔΔⲆΔ[b], a);
            }
            for (b = 0; this.buttons.length > b; b++) {
                this.ⵠⵠⵠΔᐃΔᐃ(this.buttons[b].info, a);
            }
            for (b = 0; b < this.ⵠΔΔⲆⲆ.length; b++) {
                this.ⵠⵠⵠΔᐃΔᐃ(this.ⵠΔΔⲆⲆ[b], a);
            }
            this.ⵠΔΔᐃⲆⵠⵠ.translate.x = (so - this.ⵠΔΔᐃⲆⵠⵠ.ᐃΔ.width) / 2;
            this.ⵠΔΔᐃⲆⵠⵠ.translate.y = 0;
            this.ᐃΔⲆΔⵠⲆⵠ.translate.x = so - 450;
            this.ᐃΔⲆΔⵠⲆⵠ.translate.y = gq - 40;
            this.ΔⵠΔⵠΔⵠΔ.translate.x = so - 340;
            this.ΔⵠΔⵠΔⵠΔ.translate.y = gq - 25;
            this.ᐃⲆΔⲆⵠ.translate.x = so - 320;
            this.ᐃⲆΔⲆⵠ.translate.y = 80;
            if (h != 30 || m != -1) {
                var c = 0;
                if (h != 30) {
                    c = 1500 / (h + 1) - 50;
                }
                if (m != -1) {
                    c = -(1750 / (30 - m + 1) - 48);
                }
                this.ⵠΔΔᐃⲆⵠⵠ.translate.y -= c > 0 ? c : -c;
                this.ᐃΔⲆΔⵠⲆⵠ.translate.y -= c < 0 ? c : -c;
                this.ΔⵠΔⵠΔⵠΔ.translate.y -= c < 0 ? c : -c;
            }
            this.ᐃΔⲆΔⵠⲆⵠ.ΔΔΔ();
            this.ΔⵠΔⵠΔⵠΔ.ΔΔΔ();
            this.ᐃⲆΔⲆⵠ.ΔΔΔ();
        };
        this.ⵠΔⵠΔΔΔⲆ = function (b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = 342;
            c.height = 342;
            var e = -Math.PI / 2;
            for (var f = 0; f < b.length; f++) {
                var g = b[f][0];
                var h = Math.PI * b[f][1] / 180;
                d.beginPath();
                d.arc(171, 171, 170, e, e + h, false);
                d.lineTo(171, 171);
                d.fillStyle = g;
                d.fill();
                e += h;
            }
            return c;
        };
        this.ⵠΔΔΔᐃⲆᐃΔᐃ = function () {
            this.ⲆΔΔΔⵠⵠⲆ = document.getElementById("account_nickname_input").value;
            if (this.ᐃⵠΔᐃΔⵠⵠ !== this.ⲆΔΔΔⵠⵠⲆ) {
                this.ᐃⵠΔᐃΔⵠⵠ = this.ⲆΔΔΔⵠⵠⲆ;
                this.ⵠᐃⲆⲆⲆⲆⵠ = $v(this.ⲆΔΔΔⵠⵠⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
            }
        };
        this.ⲆⲆΔⵠ = function () {
            _m();
            df.ⲆⵠᐃⲆⲆΔΔ = ⲆⵠΔᐃ.ΔⲆΔⲆᐃΔⲆ(df.ⲆⵠᐃⲆⲆΔΔ, df.ΔΔᐃᐃᐃⵠᐃ, 0.03);
            this.ΔΔⲆΔ[ⲆᐃⲆΔⲆᐃᐃ].translate.x = this.ΔΔⲆΔ[0].translate.x + -72 + df.ⲆⵠᐃⲆⲆΔΔ * 165;
            this.ΔΔⲆΔ[ⲆᐃⲆΔⲆᐃᐃ].translate.Ⲇᐃᐃⵠⵠ = this.ΔΔⲆΔ[ⲆᐃⲆΔⲆᐃᐃ].translate.x;
            this.ΔΔⲆΔ[ⲆᐃⲆΔⲆᐃᐃ].translate.y = this.ΔΔⲆΔ[0].translate.y + 30;
            this.ΔΔⲆΔ[ⲆᐃⲆΔⲆᐃᐃ].translate.ⵠⲆΔᐃᐃ = this.ΔΔⲆΔ[ⲆᐃⲆΔⲆᐃᐃ].translate.y;
            for (var k = 2; this.ΔΔⲆΔ.length > k; k++) {
                if (this.ΔΔⲆΔ[k].active === ha) {
                    this.ΔΔⲆΔ[k].ⲆⲆΔⵠ(d);
                }
            }
            var n = this.ⵠⲆΔⲆΔ - Date.now();
            if (n > 0) {
                var S = Math.floor(n / 60000);
                var T = Math.floor(S / 60);
                if ((S %= 60) !== this.ᐃᐃᐃⲆΔⲆΔ) {
                    this.ᐃᐃᐃⲆΔⲆΔ = S;
                    S = S < 10 ? "0" + S : "" + S;
                    j.ⲆⲆⵠᐃⵠⵠΔ = $v(S, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (T !== this.ΔⵠⵠⵠΔΔⵠ) {
                    this.ΔⵠⵠⵠΔΔⵠ = T;
                    T = T < 10 ? "0" + T : "" + T;
                    j.ⵠⲆⵠΔⵠⵠΔ = $v(T, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                (W = this.ΔΔⲆΔ[ΔΔⲆΔⲆᐃⲆ]).ⲆⲆΔⵠ(d);
                var V = this.ⵠⲆⵠΔⵠⵠΔ;
                Qc(d, V, W.translate.x - V.width / 4 + 182, W.translate.y - V.height / 4 + 40, V.width / 2, V.height / 2);
                V = this.ⲆⲆⵠᐃⵠⵠΔ;
                Qc(d, V, W.translate.x - V.width / 4 + 251, W.translate.y - V.height / 4 + 40, V.width / 2, V.height / 2);
            }
            if ((n = this.ⲆⲆⵠⵠⲆⲆⲆ - Date.now()) > 0) {
                S = Math.floor(n / 60000);
                T = Math.floor(S / 60);
                var W;
                var X = Math.floor(T / 24);
                T %= 24;
                if ((S %= 60) !== this.ⵠⲆⲆⲆᐃⵠᐃ) {
                    this.ⵠⲆⲆⲆᐃⵠᐃ = S;
                    S = S < 10 ? "0" + S : "" + S;
                    j.ⵠΔⲆΔΔⲆⵠ = $v(S, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (T !== this.ΔⵠⵠᐃᐃⲆᐃ) {
                    this.ΔⵠⵠᐃᐃⲆᐃ = T;
                    T = T < 10 ? "0" + T : "" + T;
                    j.ⵠⵠⲆΔΔΔⵠ = $v(T, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (X !== this.ⲆⲆⲆⲆⲆᐃᐃ) {
                    this.ⲆⲆⲆⲆⲆᐃᐃ = X;
                    X = X < 10 ? "0" + X : "" + X;
                    j.ᐃⲆΔΔᐃΔΔ = $v(X, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                (W = this.ΔΔⲆΔ[ⲆⵠᐃΔⲆⵠᐃ]).ⲆⲆΔⵠ(d);
                V = this.ᐃⲆΔΔᐃΔΔ;
                Qc(d, V, W.translate.x - V.width / 4 + 113, W.translate.y - V.height / 4 + 40, V.width / 2, V.height / 2);
                V = this.ⵠⵠⲆΔΔΔⵠ;
                Qc(d, V, W.translate.x - V.width / 4 + 182, W.translate.y - V.height / 4 + 40, V.width / 2, V.height / 2);
                V = this.ⵠΔⲆΔΔⲆⵠ;
                Qc(d, V, W.translate.x - V.width / 4 + 251, W.translate.y - V.height / 4 + 40, V.width / 2, V.height / 2);
            }
            if ((this.ΔᐃⵠΔⵠ & t) === t) {
                this.buttons[ⵠᐃⵠⲆᐃᐃΔ].info.state = Wv;
            } else if (J === (this.ΔᐃⵠΔⵠ & J)) {
                this.buttons[ᐃⲆᐃΔⵠᐃᐃ].info.state = Wv;
            } else if (z === (this.ΔᐃⵠΔⵠ & z)) {
                this.buttons[ⵠΔⵠΔⵠᐃⲆ].info.state = Wv;
            } else if (p === (this.ΔᐃⵠΔⵠ & p)) {
                this.buttons[ⵠⲆⲆᐃᐃⲆΔ].info.state = Wv;
            } else if (w === (this.ΔᐃⵠΔⵠ & w)) {
                this.buttons[ᐃⲆⵠΔᐃⵠᐃ].info.state = Wv;
            } else if (C === (this.ΔᐃⵠΔⵠ & C)) {
                this.buttons[ΔⵠⲆⵠⲆⲆⵠ].info.state = Wv;
            } else if (y === (this.ΔᐃⵠΔⵠ & y) || x === (this.ΔᐃⵠΔⵠ & x) || A === (this.ΔᐃⵠΔⵠ & A) || B === (this.ΔᐃⵠΔⵠ & B) || (this.ΔᐃⵠΔⵠ & D) === D || (this.ΔᐃⵠΔⵠ & E) === E || (this.ΔᐃⵠΔⵠ & I) === I) {
                this.buttons[ⵠⵠⲆᐃⲆΔⲆ].info.state = Wv;
            } else if ((this.ΔᐃⵠΔⵠ & K) === K || (this.ΔᐃⵠΔⵠ & M) === M || F === (this.ΔᐃⵠΔⵠ & F) || L === (this.ΔᐃⵠΔⵠ & L) || G === (this.ΔᐃⵠΔⵠ & G) || (this.ΔᐃⵠΔⵠ & P) === P) {
                this.buttons[ⵠΔⵠΔⵠᐃⲆ].info.state = Wv;
            } else if (H === (this.ΔᐃⵠΔⵠ & H) || q === (this.ΔᐃⵠΔⵠ & q) || (this.ΔᐃⵠΔⵠ & Q) === Q) {
                this.buttons[ⵠⵠΔᐃᐃᐃΔ].info.state = Wv;
            } else if ((this.ΔᐃⵠΔⵠ & R) === R) {
                this.buttons[ⵠⲆⲆᐃᐃⲆΔ].info.state = Wv;
            }
            if ((this.ΔᐃⵠΔⵠ & J) === J) {
                if (this.ᐃⵠⲆᐃⵠⵠⵠ === this.ᐃⵠⵠⵠⵠⵠᐃ) {
                    this.ᐃⲆⲆⵠⵠⵠΔ = this.ᐃᐃⵠⲆᐃⲆⲆ;
                    this.buttons[this.ᐃᐃⵠⲆᐃⲆⲆ].info.active = fa;
                    this.buttons[this.ᐃⲆᐃΔⲆΔⲆ].info.active = fa;
                    this.buttons[this.ᐃⲆΔΔᐃⵠⲆ].info.active = fa;
                } else {
                    this.buttons[this.ᐃᐃⵠⲆᐃⲆⲆ].info.active = ha;
                    this.buttons[this.ᐃⲆᐃΔⲆΔⲆ].info.active = ha;
                    this.buttons[this.ᐃⲆΔΔᐃⵠⲆ].info.active = ha;
                }
                if (this.ᐃⵠⵠⵠⵠⵠᐃ === this.ⵠᐃᐃΔⲆⵠⵠ) {
                    this.buttons[this.ⵠᐃᐃΔⲆⵠⵠ].info.state = Wv;
                } else if (this.ᐃⵠⵠⵠⵠⵠᐃ === this.ᐃᐃⵠΔᐃᐃⲆ) {
                    this.buttons[this.ᐃᐃⵠΔᐃᐃⲆ].info.state = Wv;
                } else if (this.ᐃⵠⵠⵠⵠⵠᐃ === this.ᐃⵠⲆᐃⵠⵠⵠ) {
                    this.buttons[this.ᐃⵠⲆᐃⵠⵠⵠ].info.state = Wv;
                } else if (this.ᐃⵠⵠⵠⵠⵠᐃ === this.ΔΔᐃⲆⲆⵠⵠ) {
                    this.buttons[this.ΔΔᐃⲆⲆⵠⵠ].info.state = Wv;
                } else if (this.ᐃⵠⵠⵠⵠⵠᐃ === this.ⲆⲆᐃᐃⲆⲆⲆ) {
                    this.buttons[this.ⲆⲆᐃᐃⲆⲆⲆ].info.state = Wv;
                }
                if (this.ᐃⲆⲆⵠⵠⵠΔ === this.ᐃᐃⵠⲆᐃⲆⲆ) {
                    this.buttons[this.ᐃᐃⵠⲆᐃⲆⲆ].info.state = Wv;
                } else if (this.ᐃⲆᐃΔⲆΔⲆ === this.ᐃⲆⲆⵠⵠⵠΔ) {
                    this.buttons[this.ᐃⲆᐃΔⲆΔⲆ].info.state = Wv;
                } else if (this.ᐃⲆⲆⵠⵠⵠΔ === this.ᐃⲆΔΔᐃⵠⲆ) {
                    this.buttons[this.ᐃⲆΔΔᐃⵠⲆ].info.state = Wv;
                }
                if (this.ⲆᐃⲆⵠᐃⲆⵠ === this.ΔⲆⵠⵠᐃᐃᐃ) {
                    this.buttons[this.ⲆᐃⲆⵠᐃⲆⵠ].info.state = Wv;
                } else if (this.ΔⲆⵠⵠᐃᐃᐃ === this.ⲆᐃᐃᐃᐃᐃⲆ) {
                    this.buttons[this.ⲆᐃᐃᐃᐃᐃⲆ].info.state = Wv;
                } else if (this.ΔⲆⵠⵠᐃᐃᐃ === this.ⲆⵠⲆΔⵠⵠᐃ) {
                    this.buttons[this.ⲆⵠⲆΔⵠⵠᐃ].info.state = Wv;
                }
                if (this.ⵠΔⵠⵠⵠⵠⲆ === this.ΔΔΔᐃᐃᐃⵠ) {
                    this.buttons[this.ΔΔΔᐃᐃᐃⵠ].info.state = Wv;
                } else if (this.ⵠᐃᐃᐃⵠⵠᐃ === this.ⵠΔⵠⵠⵠⵠⲆ) {
                    this.buttons[this.ⵠᐃᐃᐃⵠⵠᐃ].info.state = Wv;
                } else if (this.ⲆⵠΔᐃⵠᐃⲆ === this.ⵠΔⵠⵠⵠⵠⲆ) {
                    this.buttons[this.ⲆⵠΔᐃⵠᐃⲆ].info.state = Wv;
                } else if (this.ⵠΔⵠⵠⵠⵠⲆ === this.ⵠⵠΔⲆΔᐃᐃ) {
                    this.buttons[this.ⵠⵠΔⲆΔᐃᐃ].info.state = Wv;
                } else if (this.ⵠΔⵠⵠⵠⵠⲆ === this.ⲆΔΔᐃᐃᐃᐃ) {
                    this.buttons[this.ⲆΔΔᐃᐃᐃᐃ].info.state = Wv;
                } else if (this.ⵠΔⵠⵠⵠⵠⲆ === this.ΔΔᐃⲆΔⵠᐃ) {
                    this.buttons[this.ΔΔᐃⲆΔⵠᐃ].info.state = Wv;
                }
            }
            if ((this.ΔᐃⵠΔⵠ & p) === p) {
                if (this.ΔᐃΔⲆⲆⲆⵠ === -1) {
                    this.buttons[za].info.state = Wv;
                } else if (this.ΔᐃΔⲆⲆⲆⵠ === 0) {
                    this.buttons[Aa].info.state = Wv;
                } else if (this.ΔᐃΔⲆⲆⲆⵠ === 2) {
                    this.buttons[Ca].info.state = Wv;
                } else if (this.ΔᐃΔⲆⲆⲆⵠ === 3) {
                    this.buttons[Da].info.state = Wv;
                } else if (this.ΔᐃΔⲆⲆⲆⵠ === 4) {
                    this.buttons[Ba].info.state = Wv;
                }
                if (this.ⵠΔᐃⵠᐃΔⲆ === 0) {
                    this.buttons[ta].info.state = Wv;
                } else if (this.ⵠΔᐃⵠᐃΔⲆ === 1) {
                    this.buttons[ua].info.state = Wv;
                } else if (this.ⵠΔᐃⵠᐃΔⲆ === 2) {
                    this.buttons[va].info.state = Wv;
                } else if (this.ⵠΔᐃⵠᐃΔⲆ === 3) {
                    this.buttons[wa].info.state = Wv;
                } else if (this.ⵠΔᐃⵠᐃΔⲆ === 4) {
                    this.buttons[xa].info.state = Wv;
                } else if (this.ⵠΔᐃⵠᐃΔⲆ === 5) {
                    this.buttons[ya].info.state = Wv;
                }
            }
            if (t === (this.ΔᐃⵠΔⵠ & t) && Δⵠᐃⵠ.ⵠⲆΔⲆⵠᐃᐃ === 0) {
                if (this.buttons[ma].ⲆⲆᐃⵠΔᐃⲆ(yf.ᐃⲆΔⲆ)) {
                    this.buttons[ma].hint = Math.min(1, this.buttons[ma].hint + $w * 1.5);
                } else {
                    this.buttons[ma].hint = Math.max(0, this.buttons[ma].hint - $w * 1.5);
                }
                if (this.buttons[na].ⲆⲆᐃⵠΔᐃⲆ(yf.ᐃⲆΔⲆ)) {
                    this.buttons[na].hint = Math.min(1, this.buttons[na].hint + $w * 1.5);
                } else {
                    this.buttons[na].hint = Math.max(0, this.buttons[na].hint - $w * 1.5);
                }
                if (this.buttons[oa].ⲆⲆᐃⵠΔᐃⲆ(yf.ᐃⲆΔⲆ)) {
                    this.buttons[oa].hint = Math.min(1, this.buttons[oa].hint + $w * 1.5);
                } else {
                    this.buttons[oa].hint = Math.max(0, this.buttons[oa].hint - $w * 1.5);
                }
                if (this.buttons[ra].ⲆⲆᐃⵠΔᐃⲆ(yf.ᐃⲆΔⲆ)) {
                    this.buttons[ra].hint = Math.min(1, this.buttons[ra].hint + $w * 1.5);
                } else {
                    this.buttons[ra].hint = Math.max(0, this.buttons[ra].hint - $w * 1.5);
                }
                if (this.buttons[pa].ⲆⲆᐃⵠΔᐃⲆ(yf.ᐃⲆΔⲆ)) {
                    this.buttons[pa].hint = Math.min(1, this.buttons[pa].hint + $w * 1.5);
                } else {
                    this.buttons[pa].hint = Math.max(0, this.buttons[pa].hint - $w * 1.5);
                }
                if (this.buttons[qa].ⲆⲆᐃⵠΔᐃⲆ(yf.ᐃⲆΔⲆ)) {
                    this.buttons[qa].hint = Math.min(1, this.buttons[qa].hint + $w * 1.5);
                } else {
                    this.buttons[qa].hint = Math.max(0, this.buttons[qa].hint - $w * 1.5);
                }
            }
            var Y = 1;
            if ((this.ΔᐃⵠΔⵠ & (x | A | B | D | E | I)) > 1) {
                V = ⲆⲆ.ⲆᐃΔΔⲆⵠⲆ;
                d.save();
                d.translate(hq, ka + V.height / 4);
                if (this.Ⲇⵠᐃⵠᐃ === 1) {
                    this.ΔᐃⵠᐃⵠᐃⲆ += $w / 3;
                    Y = this.ΔⵠᐃⲆⵠⵠⲆ - 100 / Math.pow(1 + this.ΔᐃⵠᐃⵠᐃⲆ, 1 + this.ΔᐃⵠᐃⵠᐃⲆ);
                    d.rotate(Y);
                }
                Qc(d, V, -V.width / 4, -V.height / 4, V.width / 2, V.height / 2);
                d.restore();
            }
            if (Δⵠᐃⵠ.ⵠⲆΔⲆⵠᐃᐃ === 0) {
                if (Δⵠᐃⵠ.ⵠⵠᐃΔⵠ === 0) {
                    this.buttons[ma].info.state = Wv;
                } else if (Δⵠᐃⵠ.ⵠⵠᐃΔⵠ === 4) {
                    this.buttons[na].info.state = Wv;
                } else if (Δⵠᐃⵠ.ⵠⵠᐃΔⵠ === 2) {
                    this.buttons[pa].info.state = Wv;
                } else if (Δⵠᐃⵠ.ⵠⵠᐃΔⵠ === 3) {
                    this.buttons[qa].info.state = Wv;
                } else if (Δⵠᐃⵠ.ⵠⵠᐃΔⵠ === 6) {
                    this.buttons[oa].info.state = Wv;
                } else if (Δⵠᐃⵠ.ⵠⵠᐃΔⵠ === 7) {
                    this.buttons[ra].info.state = Wv;
                }
            }
            for (k = 1; k < this.buttons.length; k++) {
                if (ha === this.buttons[k].info.active) {
                    this.buttons[k].ⲆⲆΔⵠ(d);
                }
            }
            this.ΔΔⲆΔ[0].ⲆⲆΔⵠ(d);
            if ((this.ΔᐃⵠΔⵠ & (N | O)) > 0) {
                V = this.ⵠᐃⲆⲆⲆⲆⵠ;
                Qc(d, V, hq - V.width / 4, 138, V.width / 2, V.height / 2);
            }
            var Z = Math.max(1, Math.min(18, Math.floor((df.ⲆⵠᐃᐃⲆ + 3) / 2)));
            this.ΔΔⲆΔ[Z].active = ha;
            this.ΔΔⲆΔ[Z].ⲆⲆΔⵠ(d);
            this.ΔΔⲆΔ[Z].active = fa;
            this.buttons[0].ⲆⲆΔⵠ(d);
            if ((this.ΔᐃⵠΔⵠ & (z | M | L | K | G)) > 1) {
                var g = (this.ΔᐃⵠΔⵠ & (M | L | K | G)) > 1 ? -190 : 0;
                V = ΔⲆ[29][this.ΔᐃⲆⵠⲆ][this.ΔΔⲆⲆᐃΔᐃ];
                Qc(d, V, hq - V.width / 4 + g, 183, V.width / 2, V.height / 2);
                this.ᐃΔΔΔ = (this.ᐃΔΔΔ + $w * 1000) % 2000;
                var u = (this.ᐃΔΔΔ < 1000) * 4.5 ? this.ᐃΔΔΔ / 1000 : (2000 - this.ᐃΔΔΔ) / 1000;
                V = ΔⲆ[28][this.ΔᐃΔΔΔ][this.ΔΔⲆⲆᐃΔᐃ];
                Qc(d, V, hq - V.width / 4 - 62 + u + g, 240, V.width / 2, V.height / 2);
                V = ΔⲆ[7][this.ᐃΔΔⵠ][this.ΔΔⲆⲆᐃΔᐃ];
                Qc(d, V, hq - V.width / 4 - 54 + u + g, 272, V.width / 2, V.height / 2);
                Qc(d, V, hq - V.width / 4 + 54 - u + g, 272, V.width / 2, V.height / 2);
                V = ΔⲆ[255][this.ᐃΔΔⵠ][this.ΔΔⲆⲆᐃΔᐃ];
                Qc(d, V, hq - V.width / 4 + g, 222, V.width / 2, V.height / 2);
                V = ΔⲆ[796][this.ⵠΔⵠⵠΔ][this.ΔΔⲆⲆᐃΔᐃ];
                Qc(d, V, hq - V.width / 4 + g, 222, V.width / 2, V.height / 2);
            }
            if ((this.ΔᐃⵠΔⵠ & z) === z) {
                V = ΔⲆ[250][this.ⲆᐃᐃΔⵠ][this.ΔΔⲆⲆᐃΔᐃ];
                Qc(d, V, hq - V.width / 4 - 61, 406 - V.height / 4, V.width / 2, V.height / 2);
                V = ΔⲆ[250][this.ⵠᐃⵠⵠᐃ][this.ΔΔⲆⲆᐃΔᐃ];
                Qc(d, V, hq - V.width / 4 + 53, 406 - V.height / 4, V.width / 2, V.height / 2);
            }
            if ((this.ΔᐃⵠΔⵠ & F) === F) {
                V = ΔⲆ[250][this.ⵠᐃⵠⵠᐃ][this.ΔΔⲆⲆᐃΔᐃ];
                Qc(d, V, hq - V.width / 4 - 200, 268 - V.height / 4, V.width / 2, V.height / 2);
            }
            if (P === (this.ΔᐃⵠΔⵠ & P)) {
                V = ΔⲆ[250][this.ⲆᐃᐃΔⵠ][this.ΔΔⲆⲆᐃΔᐃ];
                Qc(d, V, hq - V.width / 4 - 200, 268 - V.height / 4, V.width / 2, V.height / 2);
            }
            if ((this.ΔᐃⵠΔⵠ & (M | L | K | G | F | P)) > 1) {
                for (k = 1; this.buttons.length > k; k++) {
                    if ((this.buttons[k].view & this.ΔᐃⵠΔⵠ) !== 0) {
                        var _ = this.buttons[k].info;
                        if (_.ⲆᐃⲆᐃⵠⵠΔ >= 0) {
                            V = _.ⲆΔⲆⵠⵠᐃⵠᐃᐃ[_.ⲆᐃⲆᐃⵠⵠΔ].ᐃΔᐃ;
                            Qc(d, V, _.translate.x - V.width / 8 + 44.5, _.translate.y - V.height / 8 + 45.5, V.width / 4, V.height / 4);
                            if (_.ⲆᐃΔⵠⲆᐃⲆ !== 1) {
                                V = ⲆⲆ.ᐃΔⲆⵠΔⵠⲆ;
                                Qc(d, V, _.translate.x - V.width / 4 + 44.5, _.translate.y - V.height / 4 + 44.5, V.width / 2, V.height / 2);
                            }
                        }
                    }
                }
                V = this.ⵠΔΔΔⲆⲆᐃ;
                Qc(d, V, hq - 312, 375, V.width / 2, V.height / 2);
                V = this.ᐃⵠⲆⵠⲆᐃⵠ;
                Qc(d, V, hq - 312, 395, V.width / 2, V.height / 2);
            }
            if (this.ᐃᐃΔᐃΔ !== this.ᐃᐃⵠᐃᐃⵠⲆ) {
                this.ᐃᐃⵠᐃᐃⵠⲆ = this.ᐃᐃΔᐃΔ;
                this.ᐃⵠⲆᐃⲆⲆⵠ = $v("" + this.ᐃᐃΔᐃΔ, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
            }
            Qc(d, this.ᐃⵠⲆᐃⲆⲆⵠ, this.ΔΔⲆΔ[0].translate.x + 350, 15, this.ᐃⵠⲆᐃⲆⲆⵠ.w2, this.ᐃⵠⲆᐃⲆⲆⵠ.ⵠᐃΔΔΔ);
            if (this.ⵠΔΔᐃΔⲆΔ !== this.ⲆⵠᐃᐃⲆ) {
                this.ⵠΔΔᐃΔⲆΔ = this.ⲆⵠᐃᐃⲆ;
                this.ᐃΔᐃⵠΔⵠΔ = $v("LVL " + (this.ⲆⵠᐃᐃⲆ + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, undefined, 30, 24, Gj, _r, undefined, Uj, "#3F3019", 20);
            }
            Qc(d, this.ᐃΔᐃⵠΔⵠΔ, this.ΔΔⲆΔ[0].translate.x + 94, 0, this.ᐃΔᐃⵠΔⵠΔ.w2, this.ᐃΔᐃⵠΔⵠΔ.ⵠᐃΔΔΔ);
            if (Δⵠᐃⵠ.ⵠⲆΔⲆⵠᐃᐃ === 0) {
                var aa = this.buttons[ma].hint;
                if (aa > 0) {
                    V = ⲆⲆ.ⵠⵠᐃⲆᐃⲆⲆ;
                    Qc(d, V, hq - V.width / 4, -36 - V.height * ⲆⵠΔᐃ.ⲆᐃⵠᐃΔ(1 - aa) / 2, V.width / 2, V.height / 2);
                }
                if ((aa = this.buttons[na].hint) > 0) {
                    V = ⲆⲆ.ΔⲆⵠⲆᐃⲆᐃ;
                    Qc(d, V, hq - V.width / 4, -36 - V.height * ⲆⵠΔᐃ.ⲆᐃⵠᐃΔ(1 - aa) / 2, V.width / 2, V.height / 2);
                }
                if ((aa = this.buttons[oa].hint) > 0) {
                    V = ⲆⲆ.ⵠⲆⵠⲆⵠᐃⵠ;
                    Qc(d, V, hq - V.width / 4, -36 - ⲆⵠΔᐃ.ⲆᐃⵠᐃΔ(1 - aa) * V.height / 2, V.width / 2, V.height / 2);
                }
                aa = this.buttons[ra].hint;
                if (aa > 0) {
                    V = ⲆⲆ.ᐃᐃⲆⲆⵠⲆⵠ;
                    Qc(d, V, hq - V.width / 4, -36 - ⲆⵠΔᐃ.ⲆᐃⵠᐃΔ(1 - aa) * V.height / 2, V.width / 2, V.height / 2);
                }
                aa = this.buttons[qa].hint;
                if (aa > 0) {
                    V = ⲆⲆ.ⲆⵠⲆᐃᐃⵠᐃ;
                    Qc(d, V, hq - V.width / 4, -36 - ⲆⵠΔᐃ.ⲆᐃⵠᐃΔ(1 - aa) * V.height / 2, V.width / 2, V.height / 2);
                }
                if ((aa = this.buttons[pa].hint) > 0) {
                    V = ⲆⲆ.ᐃᐃᐃⵠᐃⲆⲆ;
                    Qc(d, V, hq - V.width / 4, -36 - ⲆⵠΔᐃ.ⲆᐃⵠᐃΔ(1 - aa) * V.height / 2, V.width / 2, V.height / 2);
                }
            }
            if (this.Ⲇⵠᐃⵠᐃ === 1 && Math.abs(Y - this.ΔⵠᐃⲆⵠⵠⲆ) < 0.006) {
                d.globalAlpha = Math.min(1, this.ΔⵠᐃⵠⲆᐃᐃ * 3);
                V = ⲆⲆ.ⵠᐃΔⲆⲆⲆⲆ;
                d.save();
                d.translate(hq, 260);
                this.ΔⵠᐃⵠⲆᐃᐃ += $w;
                d.rotate(this.ΔⵠᐃⵠⲆᐃᐃ);
                Qc(d, V, -V.width / 2, -V.height / 2, V.width, V.height);
                d.restore();
                u = 1.05 + Math.cos(this.ΔⵠᐃⵠⲆᐃᐃ * 5) * 0.05;
                if (this.ᐃⵠᐃᐃⵠᐃΔ === 0) {
                    var ba = u * (V = ⲆΔⲆⵠ.ⵠᐃⲆΔᐃ[this.ⵠⲆΔΔⵠⵠᐃ].ᐃΔᐃ).width;
                    var ca = u * V.height;
                    Qc(d, V, hq - ba / 2, 260 - ca / 2, ba, ca);
                } else if (this.ᐃⵠᐃᐃⵠᐃΔ === 1) {
                    ba = u * (V = ⲆΔⲆⵠ.ⵠᐃⲆΔᐃ[0].ᐃΔᐃ).width;
                    ca = u * V.height;
                    Qc(d, V, hq - ba / 2, 260 - ca / 2, ba, ca);
                    ba = (V = ⲆΔⲆⵠ.ΔΔⵠᐃⲆ[this.ⵠⲆΔΔⵠⵠᐃ].ᐃΔᐃ).width * u;
                    ca = V.height * u;
                    Qc(d, V, hq - ba / 2, 260 - ca / 2, ba, ca);
                } else if (this.ᐃⵠᐃᐃⵠᐃΔ === 2) {
                    ba = u * (V = ⲆΔⲆⵠ.ΔΔΔⵠ[this.ⵠⲆΔΔⵠⵠᐃ].ᐃΔᐃ).width;
                    ca = V.height * u;
                    Qc(d, V, hq - ba / 2, 180 - ca / 2, ba, ca);
                    ba = u * (V = ⲆΔⲆⵠ.ⵠᐃⲆΔᐃ[0].ᐃΔᐃ).width;
                    ca = u * V.height;
                    Qc(d, V, hq - ba / 2, 260 - ca / 2, ba, ca);
                } else if (this.ᐃⵠᐃᐃⵠᐃΔ === 3) {
                    ba = (V = ⲆΔⲆⵠ.ⲆΔⵠⲆᐃ[this.ⵠⲆΔΔⵠⵠᐃ].ᐃΔᐃ).width * u;
                    ca = u * V.height;
                    d.save();
                    d.translate(hq, 260);
                    d.rotate(Math.PI);
                    Qc(d, V, -ba / 2, -ca / 2, ba, ca);
                    d.restore();
                } else if (this.ᐃⵠᐃᐃⵠᐃΔ === 4) {
                    ba = (V = ⲆΔⲆⵠ.ᐃΔᐃⵠΔ[this.ⵠⲆΔΔⵠⵠᐃ].ᐃΔᐃ).width * u;
                    ca = V.height * u;
                    Qc(d, V, hq - ba / 2, 260 - ca / 2, ba, ca);
                }
                V = this.ᐃᐃⵠᐃᐃΔⲆ;
                Qc(d, V, hq - V.width / 4, 340, V.width / 2, V.height / 2);
                V = this.ΔⲆᐃΔⲆᐃⵠ;
                Qc(d, V, hq - V.width / 4, 365, V.width / 2, V.height / 2);
                if (this.ΔⵠᐃⵠⲆᐃᐃ > 6) {
                    this.Ⲇⵠᐃⵠᐃ = 0;
                    U(y);
                }
                d.globalAlpha = 1;
            }
            Ww.alert.ⲆⲆΔⵠ("#FFF", "#000");
            if (j.waiting) {
                this.ⵠΔΔᐃⲆⵠⵠ.ⲆⲆΔⵠ();
            }
        };
        var c = 0;
        var t = Math.pow(2, c++);
        var p = Math.pow(2, c++);
        this.ΔΔᐃᐃⲆ = p;
        var C = Math.pow(2, c++);
        var z = Math.pow(2, c++);
        var y = Math.pow(2, c++);
        var w = Math.pow(2, c++);
        var J = Math.pow(2, c++);
        var k = Math.pow(2, c++);
        this.ⵠⲆᐃⵠΔ = k;
        var o = Math.pow(2, c++);
        var r = Math.pow(2, c++);
        var x = Math.pow(2, c++);
        var A = Math.pow(2, c++);
        var B = Math.pow(2, c++);
        var D = Math.pow(2, c++);
        var E = Math.pow(2, c++);
        var I = Math.pow(2, c++);
        var K = Math.pow(2, c++);
        var F = Math.pow(2, c++);
        var M = Math.pow(2, c++);
        var L = Math.pow(2, c++);
        var G = Math.pow(2, c++);
        var P = Math.pow(2, c++);
        var O = Math.pow(2, c++);
        var N = Math.pow(2, c++);
        var H = Math.pow(2, c++);
        this.ⵠⵠᐃᐃⲆ = H;
        var q = Math.pow(2, c++);
        this.ⵠⵠⵠⵠⲆ = q;
        var Q = Math.pow(2, c++);
        this.ⲆⲆᐃΔΔ = Q;
        var R = Math.pow(2, c++);
        function u(a, b, c) {
            for (var d = 0; d < j.ΔΔⲆΔ.length; d++) {
                if ((j.ΔΔⲆΔ[d].view & a) !== 0) {
                    j.ΔΔⲆΔ[d].active = b;
                }
            }
            for (d = 0; j.buttons.length > d; d++) {
                if (j.buttons[d].view & a) {
                    j.buttons[d].info.active = b;
                }
            }
            for (d = 0; d < j.ⵠΔΔⲆⲆ.length; d++) {
                if ((j.ⵠΔΔⲆⲆ[d].view & a) !== 0) {
                    j.ⵠΔΔⲆⲆ[d].style.display = c;
                }
            }
        }
        this.ΔᐃⵠΔⵠ = t;
        function S() {
            var b = Number(ᐃᐃΔⵠ.get("starve_crate"));
            var c = Number(ᐃᐃΔⵠ.get("starve_dead"));
            var d = Number(ᐃᐃΔⵠ.get("starve_book"));
            var e = Number(ᐃᐃΔⵠ.get("starve_bag"));
            var f = Number(ᐃᐃΔⵠ.get("starve_skin"));
            var g = Number(ᐃᐃΔⵠ.get("starve_accessory"));
            if (df.unlock.ᐃΔΔⵠ[df.ᐃΔΔⵠ] <= 0) {
                df.ᐃΔΔⵠ = df.unlock.ᐃΔΔⵠ[f] > 0 ? f : 0;
            }
            if (df.unlock.ΔᐃΔΔΔ[df.ΔᐃΔΔΔ] <= 0) {
                df.ΔᐃΔΔΔ = df.unlock.ΔᐃΔΔΔ[d] > 0 ? d : 0;
            }
            if (df.unlock.ⵠᐃⵠⵠᐃ[df.ⵠᐃⵠⵠᐃ] <= 0) {
                df.ⵠᐃⵠⵠᐃ = df.unlock.ⵠᐃⵠⵠᐃ[c] > 0 ? c : 0;
            }
            if (df.unlock.ⲆᐃᐃΔⵠ[df.ⲆᐃᐃΔⵠ] <= 0) {
                df.ⲆᐃᐃΔⵠ = df.unlock.ⲆᐃᐃΔⵠ[b] > 0 ? b : 0;
            }
            if (df.unlock.ⵠΔⵠⵠΔ[df.ⵠΔⵠⵠΔ] <= 0) {
                df.ⵠΔⵠⵠΔ = df.unlock.ⵠΔⵠⵠΔ[g] > 0 ? g : 0;
            }
            if (df.unlock.ΔᐃⲆⵠⲆ[df.ΔᐃⲆⵠⲆ] <= 0) {
                df.ΔᐃⲆⵠⲆ = df.unlock.ΔᐃⲆⵠⲆ[e] > 0 ? e : 0;
            }
        }
        function U(a) {
            if (j.ᐃⲆⲆⲆⵠᐃⵠ !== false) {
                u(o, fa, "none");
                u(r, fa, "none");
                S();
                if (a !== j.ΔᐃⵠΔⵠ && j.Ⲇⵠᐃⵠᐃ < 1) {
                    j.ᐃⲆΔⲆⵠ.style.display = a === t || a === y || p === a || a === J || a === z || a === w ? "inline-block" : "none";
                    u(j.ΔᐃⵠΔⵠ, fa, "none");
                    j.ΔᐃⵠΔⵠ = a;
                    u(j.ΔᐃⵠΔⵠ, ha, "inline-block");
                }
            }
        }
        function V(a, b, c) {
            const d = new XMLHttpRequest();
            d.open("GET", a);
            d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            d.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    if (b !== undefined) {
                        b(d.responseText);
                    }
                } else if (this.readyState == 4 && c !== undefined) {
                    c();
                }
            };
            d.send();
        }
        function W() {
            S();
            if (xf % 2) {
                console.log(Mq);
                Δⵠᐃⵠ.connect();
            } else {
                console.log(undefined);
                if (aj.Widget.isBlocked === 1) {
                    aj.Widget.createAdPlayer(Δⵠᐃⵠ.connect.bind(Δⵠᐃⵠ), Δⵠᐃⵠ.connect.bind(Δⵠᐃⵠ));
                } else {
                    aj.Widget.preroll();
                    aj.Widget.play = Δⵠᐃⵠ.connect.bind(Δⵠᐃⵠ);
                }
            }
        }
        function X(a) {
            if (Ww.ⲆⲆΔΔⵠⲆΔ !== Bs && Ww.ⵠᐃⲆⵠᐃᐃᐃ !== undefined && Ww.ΔΔᐃⲆⵠΔΔ !== undefined) {
                a();
            }
        }
        this.ᐃⲆᐃᐃⲆⵠᐃ = 0;
        this.ⵠᐃᐃᐃ = U;
        this.ⵠⲆⵠⲆΔⵠᐃ = function (b, a) {
            let c = "0";
            let d = 0;
            if (cx) {
                c = cx + "0";
            }
            if (Ww.ⲆⲆΔΔⵠⲆΔ) {
                X(b);
            } else {
                V(`${Df}token?id=${c}`, function (c) {
                    if (d === 1) {
                        return;
                    }
                    const e = c.split("_");
                    const f = e[0] + "_";
                    const g = Number(e[1]);
                    const a = Math.abs(function (a) {
                        return rn(a, 8260, 46947, 8004, 37330, 5330);
                    }(g));
                    Ww.ⲆⲆΔΔⵠⲆΔ = f + a;
                    X(b);
                }, function () {
                    if (d !== 1) {
                        if (a === 1) {
                            d = 1;
                            b();
                            return;
                        } else {
                            j.waiting = fr;
                            return;
                        }
                    }
                });
            }
            V(`${If}get`, function (c) {
                if (d === 1) {
                    return;
                }
                const e = c.split("_");
                const f = e[0] + "_";
                const g = Number(e[1]);
                const a = Math.abs(jt(g));
                Ww.ⵠᐃⲆⵠᐃᐃᐃ = f + a;
                Ww.ΔⲆᐃΔⵠⲆΔ = a;
                X(b);
            }, function () {
                if (d !== 1) {
                    if (a === 1) {
                        d = 1;
                        b();
                        return;
                    } else {
                        j.waiting = og;
                        return;
                    }
                }
            });
            V(`${If}set`, function (c) {
                if (d === 1) {
                    return;
                }
                const e = c.split("_");
                const f = e[0] + "_";
                const g = Number(e[1]);
                const a = Math.abs(function (a) {
                    return Un(a, 58179, 9625);
                }(g));
                Ww.ΔΔᐃⲆⵠΔΔ = f + a;
                Ww.ΔᐃⲆᐃᐃᐃᐃⲆΔ = a;
                X(b);
            }, function () {
                if (d !== 1) {
                    if (a === 1) {
                        d = 1;
                        b();
                        return;
                    } else {
                        j.waiting = false;
                        return;
                    }
                }
            });
        };
        this.ⲆΔᐃᐃⵠⲆⲆ = function () {
            if (j.waiting === Kn) {
                Ww.reconnect.enabled = false;
                j.waiting = Tl;
                j.ⵠⲆⵠⲆΔⵠᐃ(W);
            }
        };
        var Y = 1;
        var Z = 2;
        var _ = 4;
        var aa = 8;
        var ba = 16;
        var ca = 32;
        var da = 0;
        var ea = 1;
        var fa = 0;
        var ha = 1;
        if (aj.innerWidth < 1300) {
            this.ⲆⵠΔΔⲆ = {
                id: document.getElementById("nickname_block"),
                style: document.getElementById("nickname_block").style,
                input: document.getElementById("nickname_input"),
                active: ha,
                position: _ | Y,
                view: t,
                translate: {
                    y: 0,
                    x: 0,
                    ⵠⲆΔᐃᐃ: 184,
                    Ⲇᐃᐃⵠⵠ: 200
                }
            };
        } else {
            this.ⲆⵠΔΔⲆ = {
                id: document.getElementById("nickname_block"),
                style: document.getElementById("nickname_block").style,
                input: document.getElementById("nickname_input"),
                active: ha,
                position: _ | ba,
                view: t,
                translate: {
                    Ⲇᐃᐃⵠⵠ: -180,
                    y: 0,
                    ⵠⲆΔᐃᐃ: 184,
                    x: 0
                }
            };
        }
        this.ⲆⵠΔΔⲆ.id.addEventListener("keyup", function (a) {
            a.preventDefault();
            if (a.keyCode == 13 && !j.waiting && !j.ⲆⵠⲆⵠⵠΔᐃⲆⲆ) {
                j.ⲆΔᐃᐃⵠⲆⲆ();
            }
        });
        this.ⲆⵠΔΔⲆ.input.value = ᐃᐃΔⵠ.get("starve_nickname") ? ᐃᐃΔⵠ.get("starve_nickname") : "";
        this.ΔΔⵠΔΔᐃⵠᐃΔ = {
            id: document.getElementById("account_nickname_block"),
            style: document.getElementById("account_nickname_block").style,
            input: document.getElementById("account_nickname_input"),
            active: fa,
            position: _ | ba,
            view: p,
            translate: {
                Ⲇᐃᐃⵠⵠ: -122,
                x: 0,
                y: 0,
                ⵠⲆΔᐃᐃ: 110
            }
        };
        if (aj.innerWidth < 1300) {
            this.ⲆΔᐃⲆⲆ = {
                id: document.getElementById("servselect"),
                style: document.getElementById("servselect").style,
                active: ha,
                position: _ | Y,
                view: t,
                translate: {
                    ⵠⲆΔᐃᐃ: 225,
                    y: 0,
                    x: 0,
                    Ⲇᐃᐃⵠⵠ: 208
                }
            };
        } else {
            this.ⲆΔᐃⲆⲆ = {
                id: document.getElementById("servselect"),
                style: document.getElementById("servselect").style,
                active: ha,
                position: _ | ba,
                view: t,
                translate: {
                    Ⲇᐃᐃⵠⵠ: -180,
                    y: 0,
                    ⵠⲆΔᐃᐃ: 225,
                    x: 0
                }
            };
        }
        this.ΔΔΔⲆ = {
            id: document.getElementById("leaderboard"),
            style: document.getElementById("leaderboard").style,
            active: fa,
            position: _ | ba,
            view: J,
            translate: {
                y: 0,
                ⵠⲆΔᐃᐃ: 190,
                Ⲇᐃᐃⵠⵠ: -294.5,
                x: 0
            }
        };
        this.ⵠⵠᐃⲆᐃⵠᐃⵠΔ = {
            id: document.getElementById("stats_box"),
            style: document.getElementById("stats_box").style,
            active: fa,
            position: _ | ba,
            view: p,
            translate: {
                x: 0,
                y: 0,
                Ⲇᐃᐃⵠⵠ: 125,
                ⵠⲆΔᐃᐃ: 187
            }
        };
        this.ΔΔⲆⲆΔⲆΔᐃΔ = {
            id: document.getElementById("serverAddressBlock"),
            style: document.getElementById("serverAddressBlock").style,
            input: document.getElementById("serverAddressInput"),
            active: fa,
            position: _ | ba,
            view: Q,
            translate: {
                ⵠⲆΔᐃᐃ: 350,
                x: 0,
                Ⲇᐃᐃⵠⵠ: -220,
                y: 0
            }
        };
        c = 0;
        this.ⵠΔΔⲆⲆ = [];
        this.ⵠΔΔⲆⲆ[c++] = this.ⲆⵠΔΔⲆ;
        this.ⵠΔΔⲆⲆ[c++] = this.ⲆΔᐃⲆⲆ;
        this.ⵠΔΔⲆⲆ[c++] = this.ΔΔΔⲆ;
        this.ⵠΔΔⲆⲆ[c++] = this.ΔΔⵠΔΔᐃⵠᐃΔ;
        this.ⵠΔΔⲆⲆ[c++] = this.ⵠⵠᐃⲆᐃⵠᐃⵠΔ;
        this.ⵠΔΔⲆⲆ[c++] = this.ΔΔⲆⲆΔⲆΔᐃΔ;
        c = 0;
        this.ΔΔⲆΔ = [];
        this.ΔΔⲆΔ[c++] = Zv(ⲆⲆ.ΔᐃΔᐃΔᐃⲆ, ha, 0, 0, Y);
        this.ΔΔⲆΔ[c++] = Zv(ⲆⲆ.ⲆΔᐃᐃΔⵠᐃ, fa, 0, 0, Y);
        this.ΔΔⲆΔ[c++] = Zv(ⲆⲆ.ΔΔΔⲆⵠⵠⲆ, fa, 0, 0, Y);
        this.ΔΔⲆΔ[c++] = Zv(ⲆⲆ.ΔⲆᐃⲆΔⲆⲆ, fa, 0, 0, Y);
        this.ΔΔⲆΔ[c++] = Zv(ⲆⲆ.ΔⲆⵠⵠⵠⵠⲆ, fa, 0, 0, Y);
        this.ΔΔⲆΔ[c++] = Zv(ⲆⲆ.ᐃⲆᐃᐃᐃⲆⵠ, fa, 0, 0, Y);
        this.ΔΔⲆΔ[c++] = Zv(ⲆⲆ.ⲆΔᐃᐃΔⲆᐃ, fa, 0, 0, Y);
        this.ΔΔⲆΔ[c++] = Zv(ⲆⲆ.ⲆᐃⵠⵠⵠⲆⵠ, fa, 0, 0, Y);
        this.ΔΔⲆΔ[c++] = Zv(ⲆⲆ.Δᐃⵠⵠᐃᐃⵠ, fa, 0, 0, Y);
        this.ΔΔⲆΔ[c++] = Zv(ⲆⲆ.ⲆⲆΔⵠⵠΔΔ, fa, 0, 0, Y);
        this.ΔΔⲆΔ[c++] = Zv(ⲆⲆ.ᐃⵠⲆⵠΔᐃΔ, fa, 0, 0, Y);
        this.ΔΔⲆΔ[c++] = Zv(ⲆⲆ.ⲆⵠΔᐃΔΔΔ, fa, 0, 0, Y);
        this.ΔΔⲆΔ[c++] = Zv(ⲆⲆ.ᐃᐃⵠΔᐃΔᐃ, fa, 0, 0, Y);
        this.ΔΔⲆΔ[c++] = Zv(ⲆⲆ.ⵠⲆⲆᐃΔΔⵠ, fa, 0, 0, Y);
        this.ΔΔⲆΔ[c++] = Zv(ⲆⲆ.ⲆⵠᐃᐃⵠⲆΔ, fa, 0, 0, Y);
        this.ΔΔⲆΔ[c++] = Zv(ⲆⲆ.ⵠΔⲆᐃⲆᐃᐃ, fa, 0, 0, Y);
        this.ΔΔⲆΔ[c++] = Zv(ⲆⲆ.ᐃᐃⵠΔⵠᐃⵠ, fa, 0, 0, Y);
        this.ΔΔⲆΔ[c++] = Zv(ⲆⲆ.ⲆⵠⲆΔᐃⵠⵠ, fa, 0, 0, Y);
        this.ΔΔⲆΔ[c++] = Zv(ⲆⲆ.ⲆⵠⲆⲆⲆⲆᐃ, fa, 0, 0, Y);
        if (aj.innerWidth < 1300) {
            this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ⲆΔᐃⵠⵠΔΔ, ha, 200, 100, _ | Y);
        } else {
            this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ⲆΔᐃⵠⵠΔΔ, ha, -753 / 4, 100, _ | ba);
        }
        this.ΔΔⲆΔ[c++].view = t;
        this.ΔΔⲆΔ[c++] = Zv(ⲆⲆ.ⲆᐃⵠⲆᐃΔⲆ, ha, 403, -10, Z);
        if (aj.innerWidth > 1300) {
            this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ΔᐃΔᐃᐃⵠⲆ, ha, -885 / 4, -319 / 2, aa | ba);
            this.ΔΔⲆΔ[c++].view = t;
        }
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ⲆⲆⲆⲆⲆᐃⲆ, fa, -323.25, 100, _ | ba);
        this.ΔΔⲆΔ[c++].view = p;
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ᐃᐃⲆΔᐃⲆΔ, fa, -1425 / 4, 100, _ | ba);
        this.ΔΔⲆΔ[c++].view = z;
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ⲆⲆᐃⲆᐃⵠⵠ, fa, -905 / 4, 50, _ | ba);
        this.ΔΔⲆΔ[c++].view = C;
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ⲆΔΔᐃⵠᐃⲆ, fa, -402, 130, _ | ba);
        this.ΔΔⲆΔ[c++].view = y;
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ⵠⵠⲆⲆⲆⲆⲆ, fa, -279.25, 130, _ | ba);
        this.ΔΔⲆΔ[c++].view = H;
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ΔⵠᐃΔⵠΔᐃ, fa, -305.5, 130, _ | ba);
        this.ΔΔⲆΔ[c++].view = q;
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ΔⵠⲆΔΔⲆΔ, fa, -1222 / 4, 100, _ | ba);
        this.ΔΔⲆΔ[c++].view = Q;
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ᐃⵠⲆⵠᐃⲆᐃ, fa, -ⲆⲆ.ᐃⵠⲆⵠᐃⲆᐃ.width / 4 - 350, -15, _ | ba);
        this.ΔΔⲆΔ[c++].view = R;
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ᐃⵠⲆᐃΔⵠᐃ, fa, -374.25, 110, _ | ba);
        this.ΔΔⲆΔ[c++].view = w;
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ⲆΔᐃⵠⵠΔⲆ, fa, -306.5, 100, _ | ba);
        this.ΔΔⲆΔ[c++].view = J;
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ΔΔᐃΔⲆⵠᐃ, fa, -1381 / 4, 80, _ | ba);
        this.ΔΔⲆΔ[c++].view = k;
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ΔᐃᐃᐃⲆΔΔ, fa, -385.5, 150, _ | ba);
        this.ΔΔⲆΔ[c++].view = x;
        var ia = 3.6;
        var ja = this.ⵠΔⵠΔΔΔⲆ([["#25c5d6", ia * 3], ["#e2cf27", ia * 10], ["#afac98", 108], ["#d88e23", ia * 57]]);
        this.ΔΔⲆΔ[c] = Zv(ja, fa, -ja.width / 4, 178, _ | ba);
        this.ΔΔⲆΔ[c++].view = x;
        this.ⵠⲆⵠΔⵠᐃⲆⲆΔ = function (b, c, d) {
            var e;
            j.Ⲇⵠᐃⵠᐃ = 1;
            j.ΔᐃⵠᐃⵠᐃⲆ = 0;
            j.ΔⵠᐃⵠⲆᐃᐃ = 0;
            j.ΔⵠᐃⲆⵠⵠⲆ = b;
            j.ᐃⵠᐃᐃⵠᐃΔ = c;
            var f = 0;
            if (c === 0) {
                for (f = 0; f < ⲆΔⲆⵠ.ⵠᐃⲆΔᐃ.length && ⲆΔⲆⵠ.ⵠᐃⲆΔᐃ[f].id !== d; f++);
                e = ⲆΔⲆⵠ.ⵠᐃⲆΔᐃ[f];
                j.unlock.ᐃΔΔⵠ[f] = 1;
            } else if (c === 1) {
                for (f = 0; ⲆΔⲆⵠ.ΔΔⵠᐃⲆ.length > f && d !== ⲆΔⲆⵠ.ΔΔⵠᐃⲆ[f].id; f++);
                e = ⲆΔⲆⵠ.ΔΔⵠᐃⲆ[f];
                j.unlock.ⵠΔⵠⵠΔ[f] = 1;
            } else if (c === 2) {
                for (f = 0; f < ⲆΔⲆⵠ.ΔΔΔⵠ.length && d !== ⲆΔⲆⵠ.ΔΔΔⵠ[f].id; f++);
                e = ⲆΔⲆⵠ.ΔΔΔⵠ[f];
                j.unlock.ΔᐃⲆⵠⲆ[f] = 1;
            } else if (c === 3) {
                for (f = 0; ⲆΔⲆⵠ.ⲆΔⵠⲆᐃ.length > f && ⲆΔⲆⵠ.ⲆΔⵠⲆᐃ[f].id !== d; f++);
                e = ⲆΔⲆⵠ.ⲆΔⵠⲆᐃ[f];
                j.unlock.ΔᐃΔΔΔ[f] = 1;
            } else if (c === 4) {
                for (f = 0; f < ⲆΔⲆⵠ.ᐃΔᐃⵠΔ.length && d !== ⲆΔⲆⵠ.ᐃΔᐃⵠΔ[f].id; f++);
                e = ⲆΔⲆⵠ.ᐃΔᐃⵠΔ[f];
                j.unlock.ⲆᐃᐃΔⵠ[f] = 1;
                j.unlock.ⵠᐃⵠⵠᐃ[f] = 1;
            }
            j.ⵠⲆΔΔⵠⵠᐃ = f;
            j.ΔⲆᐃΔⲆᐃⵠ = $v("by " + e.ⵠᐃⵠ, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, undefined, 30, 24, Mq, undefined, undefined, Mq, "#000000", 24);
            j.ᐃᐃⵠᐃᐃΔⲆ = $v(e.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, undefined, 30, 24, Xk, undefined, Yl, undefined, "#000000", 20);
        };
        this.Ⲇⵠᐃⵠᐃ = 0;
        this.ΔᐃⵠᐃⵠᐃⲆ = 0;
        this.ΔⵠᐃⲆⵠⵠⲆ = 0;
        this.ᐃⵠᐃᐃⵠᐃΔ = 0;
        this.ΔⵠᐃⵠⲆᐃᐃ = 0;
        this.ΔⲆᐃΔⲆᐃⵠ = Ua;
        this.ᐃᐃⵠᐃᐃΔⲆ = T;
        var ka = 197;
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ⲆⲆⲆⲆΔΔΔ, fa, -1542 / 4, 150, _ | ba);
        this.ΔΔⲆΔ[c++].view = E;
        ja = this.ⵠΔⵠΔΔΔⲆ([["#d45ce5", 10.8], ["#25c5d6", ia * 10], ["#e2cf27", 108], ["#afac98", ia * 57]]);
        this.ΔΔⲆΔ[c] = Zv(ja, fa, -ja.width / 4, 178, _ | ba);
        this.ΔΔⲆΔ[c++].view = E;
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ⲆⵠΔⵠⵠΔᐃ, fa, -1542 / 4, 150, _ | ba);
        this.ΔΔⲆΔ[c++].view = B;
        ja = this.ⵠΔⵠΔΔΔⲆ([["#d33a2a", 10.8], ["#d45ce5", ia * 10], ["#25c5d6", 108], ["#e2cf27", ia * 57]]);
        this.ΔΔⲆΔ[c] = Zv(ja, fa, -ja.width / 4, 178, _ | ba);
        this.ΔΔⲆΔ[c++].view = B;
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ᐃΔΔΔᐃⲆΔ, fa, -385.5, 150, _ | ba);
        this.ΔΔⲆΔ[c++].view = D;
        ja = this.ⵠΔⵠΔΔΔⲆ([["#25c5d6", ia * 3], ["#e2cf27", ia * 10], ["#afac98", 108], ["#d88e23", ia * 57]]);
        this.ΔΔⲆΔ[c] = Zv(ja, fa, -ja.width / 4, 178, _ | ba);
        this.ΔΔⲆΔ[c++].view = D;
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ⲆΔⵠⲆᐃᐃⵠ, fa, -1542 / 4, 150, _ | ba);
        this.ΔΔⲆΔ[c++].view = A;
        ja = this.ⵠΔⵠΔΔΔⲆ([["#d45ce5", ia * 3], ["#25c5d6", ia * 10], ["#e2cf27", 108], ["#afac98", ia * 57]]);
        this.ΔΔⲆΔ[c] = Zv(ja, fa, -ja.width / 4, 178, _ | ba);
        this.ΔΔⲆΔ[c++].view = A;
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ᐃΔⲆⵠⵠᐃΔ, fa, -1542 / 4, 150, _ | ba);
        this.ΔΔⲆΔ[c++].view = I;
        ja = this.ⵠΔⵠΔΔΔⲆ([["#d33a2a", 10.8], ["#d45ce5", ia * 10], ["#25c5d6", 108], ["#e2cf27", ia * 57]]);
        this.ΔΔⲆΔ[c] = Zv(ja, fa, -ja.width / 4, 178, _ | ba);
        this.ΔΔⲆΔ[c++].view = I;
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ⵠⲆΔⲆⲆⲆΔ, fa, -341.5, 100, _ | ba);
        this.ΔΔⲆΔ[c++].view = K;
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ΔⲆΔΔΔΔⵠ, fa, -1366 / 4, 100, _ | ba);
        this.ΔΔⲆΔ[c++].view = G;
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ᐃᐃΔⵠⵠΔⲆ, fa, -341.5, 100, _ | ba);
        this.ΔΔⲆΔ[c++].view = M;
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ΔⲆΔᐃΔΔΔ, fa, -1366 / 4, 100, _ | ba);
        this.ΔΔⲆΔ[c++].view = L;
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ⵠⵠⲆⲆⵠᐃⲆ, fa, -1366 / 4, 100, _ | ba);
        this.ΔΔⲆΔ[c++].view = F;
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ᐃΔᐃᐃⲆⵠⲆ, fa, -341.5, 100, _ | ba);
        this.ΔΔⲆΔ[c++].view = P;
        ΔΔⲆΔⲆᐃⲆ = c++;
        this.ΔΔⲆΔ[ΔΔⲆΔⲆᐃⲆ] = Zv(ⲆⲆ.ΔΔⲆΔⲆᐃⲆ, fa, 484, 0, _);
        ⲆⵠᐃΔⲆⵠᐃ = c++;
        this.ΔΔⲆΔ[ⲆⵠᐃΔⲆⵠᐃ] = Zv(ⲆⲆ.ⲆⵠᐃΔⲆⵠᐃ, fa, 812.5, 0, _);
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.Δᐃⵠᐃⵠᐃᐃ, fa, -758 / 4, -5, _ | ba);
        this.ΔΔⲆΔ[c++].view = r;
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ΔᐃⵠΔⵠᐃⵠ, fa, -758 / 4, -5, _ | ba);
        this.ΔΔⲆΔ[c++].view = o;
        ⲆᐃⲆΔⲆᐃᐃ = c++;
        this.ΔΔⲆΔ[ⲆᐃⲆΔⲆᐃᐃ] = Zv(ⲆⲆ.ΔΔΔⲆⵠⲆⲆ, ha, 93, 30, _);
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ⵠᐃΔᐃΔⵠⲆ, fa, -173, 110, _ | ba);
        this.ΔΔⲆΔ[c++].view = O;
        this.ΔΔⲆΔ[c] = Zv(ⲆⲆ.ⵠΔⵠⵠᐃⲆⵠ, fa, -173, 110, _ | ba);
        this.ΔΔⲆΔ[c++].view = N;
        c = 0;
        this.buttons = [];
        this.buttons[c] = Yv(50, 57, 0, [ⲆⲆ.ⲆⲆⵠⲆⲆⲆⲆ, ⲆⲆ.ⵠⵠΔΔᐃⵠⵠ, ⲆⲆ.ΔΔΔⲆⵠⲆΔ], 1, da, function () {
            if (j.ⲆⵠⲆⲆⲆ()) {
                U(k);
            } else {
                U(C);
            }
        }, 320, 0, Y, ha);
        c++;
        if (aj.innerWidth < 1300) {
            this.buttons[c] = Yv(202, 97, 0, [ⲆⲆ.ⲆⵠⲆⵠᐃⵠᐃ, ⲆⲆ.ⵠΔⲆⲆᐃⵠΔ, ⲆⲆ.ΔⵠᐃΔⵠᐃΔ], 1, da, this.ⲆΔᐃᐃⵠⲆⲆ, 462, 235, _ | Y, ha);
        } else {
            this.buttons[c] = Yv(202, 97, 0, [ⲆⲆ.ⲆⵠⲆⵠᐃⵠᐃ, ⲆⲆ.ⵠΔⲆⲆᐃⵠΔ, ⲆⲆ.ΔⵠᐃΔⵠᐃΔ], 1, da, this.ⲆΔᐃᐃⵠⲆⲆ, 74, 235, _ | ba, ha);
        }
        this.buttons[c].view = t;
        c++;
        if (aj.innerWidth > 1300) {
            this.buttons[c] = Yv(355, 168, 0, [ⲆⲆ.ᐃⲆᐃⵠΔⵠᐃ, ⲆⲆ.ᐃⲆᐃⵠΔⵠᐃ, ⲆⲆ.ᐃⲆᐃⵠΔⵠᐃ], 1, da, function () {
                aj.open("./changelog.html", "_blank");
            }, -195, -115, aa | ba, ha);
            this.buttons[c++].view = t;
            this.buttons[c] = Yv(355, 168, 0, [ⲆⲆ.ⵠⲆⵠᐃΔⲆΔ, ⲆⲆ.ⵠⲆⵠᐃΔⲆΔ, ⲆⲆ.ⵠⲆⵠᐃΔⲆΔ], 1, da, function () {
                aj.open("https://taming.io", "_blank");
            }, 20, -115, aa | ba, ha);
            this.buttons[c++].view = t;
        }
        this.buttons[c++] = Yv(80, 80, 0, [ⲆⲆ.ΔⵠΔΔⵠᐃⲆ, ⲆⲆ.ⲆᐃⵠΔⲆⵠⲆ, ⲆⲆ.ⵠⵠⲆᐃᐃΔᐃ], 1, da, function () {
            aj.open("https://lapamauve.creator-spring.com/", "_blank");
        }, 380, 10, Z, ha);
        this.buttons[c++] = Yv(80, 80, 0, [ⲆⲆ.ᐃᐃⲆᐃⲆⲆⲆ, ⲆⲆ.ᐃⲆⲆⵠᐃⵠΔ, ⲆⲆ.ΔⲆⵠᐃΔᐃᐃ], 1, da, function () {
            aj.open("https://discord.gg/starveio", "_blank");
        }, 330, 10, Z, ha);
        this.buttons[c++] = Yv(80, 80, 0, [ⲆⲆ.ⵠΔⲆⵠⲆⲆⵠ, ⲆⲆ.ⵠⵠᐃΔΔⲆΔ, ⲆⲆ.ⵠⲆᐃⵠⲆᐃⲆ], 1, da, function () {
            aj.open("https://reddit.com/r/starveio", "_blank");
        }, 280, 10, Z, ha);
        this.buttons[c++] = Yv(80, 80, 0, [ⲆⲆ.ⲆΔᐃΔⵠᐃⲆ, ⲆⲆ.ΔᐃᐃⲆΔⲆΔ, ⲆⲆ.ⵠΔΔⵠᐃⵠⵠ], 1, da, function () {
            aj.open("https://starveiopro.wikia.com/wiki/", "_blank");
        }, 230, 10, Z, ha);
        this.buttons[c++] = Yv(80, 80, 0, [ⲆⲆ.ᐃΔΔⲆᐃΔᐃ, ⲆⲆ.ⵠⲆᐃⵠⵠⵠⵠ, ⲆⲆ.ΔⵠᐃⲆⲆⲆⲆ], 1, da, function () {
            aj.open("https://www.facebook.com/LapaMauve/", "_blank");
        }, 155, 10, Z, ha);
        this.buttons[c++] = Yv(80, 80, 0, [ⲆⲆ.ⲆⲆᐃⲆᐃⲆᐃ, ⲆⲆ.ᐃΔᐃⲆⵠΔᐃ, ⲆⲆ.ᐃΔⵠΔΔⲆⲆ], 1, da, function () {
            aj.open("https://twitter.com/lapamauve", "_blank");
        }, 105, 10, Z, ha);
        this.buttons[c++] = Yv(80, 80, 0, [ⲆⲆ.ⵠᐃᐃⲆⲆΔᐃ, ⲆⲆ.ⲆⵠⵠⵠⲆᐃΔ, ⲆⲆ.ΔⲆΔⵠᐃΔΔ], 1, da, function () {
            aj.open("https://www.youtube.com/@lapamauveofficial", "_blank");
        }, 55, 10, Z, ha);
        ᐃⲆᐃΔⵠᐃᐃ = c++;
        this.buttons[ᐃⲆᐃΔⵠᐃᐃ] = Yv(232, 142, 0, [ⲆⲆ.ⲆⵠⲆⲆᐃⵠⲆ, ⲆⲆ.ΔⵠΔⲆΔᐃΔ, ⲆⲆ.ⵠΔⲆΔⲆΔⵠ], 1, da, function () {
            U(J);
            Zf(df.ᐃᐃⵠⲆᐃⲆⲆ, df.ᐃⵠⲆᐃⵠⵠⵠ, df.ⲆᐃᐃᐃᐃᐃⲆ, df.ΔΔᐃⲆΔⵠᐃ);
        }, -5, 573, Y, ha);
        this.buttons[c++] = Yv(236, 165, 0, [ⲆⲆ.ΔⲆⵠΔⲆΔⲆ, ⲆⲆ.ΔⲆⵠΔⲆΔⲆ, ⲆⲆ.ΔⲆⵠΔⲆΔⲆ], 1, ea, function () {
            U(J);
        }, -5, 566, Y, ha);
        ᐃⲆⵠΔᐃⵠᐃ = c++;
        this.buttons[ᐃⲆⵠΔᐃⵠᐃ] = Yv(236, 165, 0, [ⲆⲆ.ΔΔⵠⵠⵠΔΔ, ⲆⲆ.ᐃΔⵠΔᐃⲆᐃ, ⲆⲆ.ΔⵠⲆⲆΔⵠΔ], 1, da, function () {
            U(w);
        }, -5, 494, Y, ha);
        this.buttons[c++] = Yv(236, 165, 0, [ⲆⲆ.Δᐃᐃⵠᐃⵠᐃ, ⲆⲆ.Δᐃᐃⵠᐃⵠᐃ, ⲆⲆ.Δᐃᐃⵠᐃⵠᐃ], 1, ea, function () {
            U(w);
        }, -5, 494, Y, ha);
        ⵠⵠΔᐃᐃᐃΔ = c++;
        this.buttons[ⵠⵠΔᐃᐃᐃΔ] = Yv(236, 165, 0, [ⲆⲆ.ΔΔⵠⵠⵠΔΔ, ⲆⲆ.ᐃΔⵠΔᐃⲆᐃ, ⲆⲆ.ΔⵠⲆⲆΔⵠΔ], 1, da, function () {
            if (j.ⲆⵠⲆⲆⲆ()) {
                if (df.ⲆⲆⵠⵠⲆⲆⲆ - Date.now() > 0) {
                    U(Q);
                } else {
                    U(H);
                }
            } else {
                U(C);
            }
        }, -5, 415, Y, ha);
        this.buttons[c++] = Yv(236, 165, 0, [ⲆⲆ.ᐃᐃᐃΔΔΔΔ, ⲆⲆ.ᐃᐃᐃΔΔΔΔ, ⲆⲆ.ᐃᐃᐃΔΔΔΔ], 1, ea, function () {
            if (j.ⲆⵠⲆⲆⲆ()) {
                if (df.ⲆⲆⵠⵠⲆⲆⲆ - Date.now() > 0) {
                    U(Q);
                } else {
                    U(H);
                }
            } else {
                U(C);
            }
        }, -5, 415, Y, ha);
        ⵠⵠⲆᐃⲆΔⲆ = c++;
        this.buttons[ⵠⵠⲆᐃⲆΔⲆ] = Yv(236, 165, 0, [ⲆⲆ.ΔΔⵠⵠⵠΔΔ, ⲆⲆ.ᐃΔⵠΔᐃⲆᐃ, ⲆⲆ.ΔⵠⲆⲆΔⵠΔ], 1, da, function () {
            U(y);
        }, -5, 336, Y, ha);
        this.buttons[c++] = Yv(236, 165, 0, [ⲆⲆ.ΔⵠΔⵠⲆᐃᐃ, ⲆⲆ.ΔⵠΔⵠⲆᐃᐃ, ⲆⲆ.ΔⵠΔⵠⲆᐃᐃ], 1, ea, function () {
            U(y);
        }, -5, 336, Y, ha);
        ⵠΔⵠΔⵠᐃⲆ = c++;
        this.buttons[ⵠΔⵠΔⵠᐃⲆ] = Yv(236, 165, 0, [ⲆⲆ.ΔΔⵠⵠⵠΔΔ, ⲆⲆ.ᐃΔⵠΔᐃⲆᐃ, ⲆⲆ.ΔⵠⲆⲆΔⵠΔ], 1, da, function () {
            U(z);
        }, -5, 257, Y, ha);
        this.buttons[c++] = Yv(236, 165, 0, [ⲆⲆ.ⵠⲆⵠⲆᐃⵠⲆ, ⲆⲆ.ⵠⲆⵠⲆᐃⵠⲆ, ⲆⲆ.ⵠⲆⵠⲆᐃⵠⲆ], 1, ea, function () {
            U(z);
        }, -5, 257, Y, ha);
        ⵠᐃⵠⲆᐃᐃΔ = c++;
        this.buttons[ⵠᐃⵠⲆᐃᐃΔ] = Yv(236, 165, 0, [ⲆⲆ.ΔΔⵠⵠⵠΔΔ, ⲆⲆ.ᐃΔⵠΔᐃⲆᐃ, ⲆⲆ.ΔⵠⲆⲆΔⵠΔ], 1, da, function () {
            U(t);
        }, -5, 178, Y, ha);
        this.buttons[c++] = Yv(236, 165, 0, [ⲆⲆ.ᐃⵠⵠⵠΔᐃⲆ, ⲆⲆ.ᐃⵠⵠⵠΔᐃⲆ, ⲆⲆ.ᐃⵠⵠⵠΔᐃⲆ], 1, ea, function () {
            U(t);
        }, -5, 178, Y, ha);
        ΔⵠⲆⵠⲆⲆⵠ = c++;
        this.ΔⵠⲆⵠⲆⲆⵠ = ΔⵠⲆⵠⲆⲆⵠ;
        this.buttons[ΔⵠⲆⵠⲆⲆⵠ] = Yv(324, 222, 0, [ⲆⲆ.ᐃⵠⲆΔΔᐃⲆ, ⲆⲆ.ΔⲆΔᐃⲆᐃΔ, ⲆⲆ.ᐃΔΔⲆⵠⲆᐃ], 1, da, function () {
            U(C);
        }, 0, 70, Y, ha);
        ⵠⲆⲆᐃᐃⲆΔ = c++;
        ⵠΔΔᐃⵠᐃᐃ = c++;
        this.ⵠⲆⲆᐃᐃⲆΔ = ⵠⲆⲆᐃᐃⲆΔ;
        this.ⵠΔΔᐃⵠᐃᐃ = ⵠΔΔᐃⵠᐃᐃ;
        this.buttons[ⵠⲆⲆᐃᐃⲆΔ] = Yv(324, 222, 0, [ⲆⲆ.ⵠⲆⵠⲆⵠΔⲆ, ⲆⲆ.ΔⲆᐃⵠᐃⵠΔ, ⲆⲆ.ⵠⵠΔᐃΔⲆⵠ], 1, da, function () {
            U(p);
            sa(-1);
        }, 0, 70, Y, fa);
        this.buttons[ⵠΔΔᐃⵠᐃᐃ] = Yv(324, 222, 0, [ⲆⲆ.ΔᐃⵠⲆⵠᐃⲆ, ⲆⲆ.ΔᐃⵠⲆⵠᐃⲆ, ⲆⲆ.ΔᐃⵠⲆⵠᐃⲆ], 1, ea, function () {
            U(p);
            sa(-1);
        }, 0, 70, Y, fa);
        if (Δⵠᐃⵠ.ⵠⲆΔⲆⵠᐃᐃ === 0) {
            var ma = c++;
            if (aj.innerWidth < 1300) {
                this.buttons[ma] = Yv(266, 176, 0, [ⲆⲆ.ΔⵠⲆΔᐃⲆⵠ, ⲆⲆ.ⲆⲆⲆᐃΔⵠᐃ, ⲆⲆ.ⲆⲆᐃⲆⲆⵠⵠ], 1, da, function () {
                    Δⵠᐃⵠ.ⲆⵠΔᐃⵠ(0);
                }, 150, 300, Y | _, ha);
            } else {
                this.buttons[ma] = Yv(266, 176, 0, [ⲆⲆ.ΔⵠⲆΔᐃⲆⵠ, ⲆⲆ.ⲆⲆⲆᐃΔⵠᐃ, ⲆⲆ.ⲆⲆᐃⲆⲆⵠⵠ], 1, da, function () {
                    Δⵠᐃⵠ.ⲆⵠΔᐃⵠ(0);
                }, -340, 100, ba | _, ha);
            }
            this.buttons[ma].view = t;
            this.buttons[ma].hint = 0;
            var na = c++;
            if (aj.innerWidth < 1300) {
                this.buttons[na] = Yv(266, 176, 0, [ⲆⲆ.ⵠΔⵠⵠΔΔΔ, ⲆⲆ.ᐃΔΔⵠᐃⲆᐃ, ⲆⲆ.ᐃᐃⲆⲆΔⵠⲆ], 1, da, function () {
                    Δⵠᐃⵠ.ⲆⵠΔᐃⵠ(4);
                }, 150, 400, Y | _, ha);
            } else {
                this.buttons[na] = Yv(266, 176, 0, [ⲆⲆ.ⵠΔⵠⵠΔΔΔ, ⲆⲆ.ᐃΔΔⵠᐃⲆᐃ, ⲆⲆ.ᐃᐃⲆⲆΔⵠⲆ], 1, da, function () {
                    Δⵠᐃⵠ.ⲆⵠΔᐃⵠ(4);
                }, -340, 200, ba | _, ha);
            }
            this.buttons[na].view = t;
            this.buttons[na].hint = 0;
            var oa = c++;
            if (aj.innerWidth < 1300) {
                this.buttons[oa] = Yv(266, 176, 0, [ⲆⲆ.ⵠᐃⲆⲆⵠΔⲆ, ⲆⲆ.ΔⲆΔᐃᐃⲆⲆ, ⲆⲆ.ΔⵠᐃᐃΔⵠⲆ], 1, da, function () {
                    Δⵠᐃⵠ.ⲆⵠΔᐃⵠ(6);
                }, 450, 300, Y | _, ha);
            } else {
                this.buttons[oa] = Yv(266, 176, 0, [ⲆⲆ.ⵠᐃⲆⲆⵠΔⲆ, ⲆⲆ.ΔⲆΔᐃᐃⲆⲆ, ⲆⲆ.ΔⵠᐃᐃΔⵠⲆ], 1, da, function () {
                    Δⵠᐃⵠ.ⲆⵠΔᐃⵠ(6);
                }, -340, 300, ba | _, ha);
            }
            this.buttons[oa].view = t;
            this.buttons[oa].hint = 0;
            var pa = c++;
            if (aj.innerWidth < 1300) {
                this.buttons[pa] = Yv(266, 176, 0, [ⲆⲆ.ⲆⲆⲆᐃᐃⲆᐃ, ⲆⲆ.ⵠᐃΔⵠᐃΔⲆ, ⲆⲆ.ᐃⵠᐃᐃⲆⵠᐃ], 1, da, function () {
                    Δⵠᐃⵠ.ⲆⵠΔᐃⵠ(2);
                }, 300, 300, Y | _, ha);
            } else {
                this.buttons[pa] = Yv(266, 176, 0, [ⲆⲆ.ⲆⲆⲆᐃᐃⲆᐃ, ⲆⲆ.ⵠᐃΔⵠᐃΔⲆ, ⲆⲆ.ᐃⵠᐃᐃⲆⵠᐃ], 1, da, function () {
                    Δⵠᐃⵠ.ⲆⵠΔᐃⵠ(2);
                }, 204, 100, ba | _, ha);
            }
            this.buttons[pa].view = t;
            this.buttons[pa].hint = 0;
            var qa = c++;
            if (aj.innerWidth < 1300) {
                this.buttons[qa] = Yv(266, 176, 0, [ⲆⲆ.ΔⵠᐃᐃⵠᐃΔ, ⲆⲆ.ΔᐃᐃⵠΔⲆⲆ, ⲆⲆ.ΔⲆⵠⲆⵠᐃⲆ], 1, da, function () {
                    Δⵠᐃⵠ.ⲆⵠΔᐃⵠ(3);
                }, 300, 400, Y | _, ha);
            } else {
                this.buttons[qa] = Yv(266, 176, 0, [ⲆⲆ.ΔⵠᐃᐃⵠᐃΔ, ⲆⲆ.ΔᐃᐃⵠΔⲆⲆ, ⲆⲆ.ΔⲆⵠⲆⵠᐃⲆ], 1, da, function () {
                    Δⵠᐃⵠ.ⲆⵠΔᐃⵠ(3);
                }, 204, 200, ba | _, ha);
            }
            this.buttons[qa].view = t;
            this.buttons[qa].hint = 0;
            var ra = c++;
            this.buttons[ra] = Yv(266, 176, 0, [ⲆⲆ.ᐃⲆⲆⲆΔⵠᐃ, ⲆⲆ.ⵠΔᐃⵠᐃᐃᐃ, ⲆⲆ.ⲆΔⲆⵠΔⵠΔ], 1, da, function () {
                Δⵠᐃⵠ.ⲆⵠΔᐃⵠ(7);
            }, aj.innerWidth < 1300 ? 450 : 204, aj.innerWidth < 1300 ? 400 : 300, (aj.innerWidth < 1300 ? Y : ba) | _, ha);
            this.buttons[ra].view = t;
            this.buttons[ra].hint = 0;
        }
        function sa(b, c) {
            if (c !== undefined) {
                df.ⵠΔᐃⵠᐃΔⲆ = c;
                var d = df.ⵠᐃΔⵠⵠΔᐃ[c];
                df.ⵠΔΔᐃᐃ = d.score;
                df.ΔΔΔᐃᐃ = d.kill;
                df.ⵠⵠⲆᐃΔⲆⵠ = d.death;
                df.time = d.time;
                df.ᐃΔΔⲆⲆᐃⵠ = d.bestScore;
                df.ⲆⲆΔΔΔⲆᐃ = d.bestKill;
                df.ΔΔⲆⵠⵠⲆΔ = d.bestTime;
                df.ᐃⲆⲆⵠⵠⵠⵠ = d.scoreTotal;
            }
            if (Cg === b) {
                b = df.ΔᐃΔⲆⲆⲆⵠ;
            }
            df.ΔᐃΔⲆⲆⲆⵠ = b;
            if (b >= 0) {
                document.getElementById("stats_box_time").innerHTML = df.ΔΔⲆⵠⵠⲆΔ[b];
                document.getElementById("stats_box_kill").innerHTML = df.ⲆⲆΔΔΔⲆᐃ[b];
                document.getElementById("stats_box_score").innerHTML = df.ᐃΔΔⲆⲆᐃⵠ[b];
            } else {
                var f = 0;
                for (var g = 0; g < df.ΔΔΔᐃᐃ.length; g++) {
                    f += df.ΔΔΔᐃᐃ[g];
                }
                var h = 0;
                for (g = 0; g < df.time.length; g++) {
                    h += df.time[g];
                }
                document.getElementById("stats_box_time").innerHTML = h;
                document.getElementById("stats_box_kill").innerHTML = f;
                document.getElementById("stats_box_score").innerHTML = df.ⵠΔΔᐃᐃ;
            }
        }
        this.buttons[c] = Yv(87, 78, 0, [ⲆⲆ.ᐃⲆⲆΔΔΔᐃ, ⲆⲆ.ⵠⲆᐃⲆΔⲆΔ, ⲆⲆ.ᐃⲆΔᐃᐃⲆⵠ], 1, da, function () {
            df.ⵠΔΔΔᐃⲆᐃΔᐃ();
            if (df.ⲆᐃⵠⵠᐃᐃΔ === 0) {
                U(N);
            } else {
                U(O);
            }
        }, 127, 110, ba | _, fa);
        this.buttons[c++].view = p;
        this.buttons[c] = Yv(87, 78, 0, [ⲆⲆ.ⵠⵠⵠΔᐃᐃᐃ, ⲆⲆ.ⵠⲆⲆΔᐃⵠⵠ, ⲆⲆ.ⲆⲆᐃⲆΔⲆΔ], 1, da, function () {
            const a = aj.document.createElement("textarea");
            a.value = cx;
            aj.document.body.appendChild(a);
            a.select();
            aj.document.execCommand("copy");
            aj.document.body.removeChild(a);
        }, 182, 110, ba | _, fa);
        this.buttons[c++].view = p;
        this.buttons[c] = Yv(87, 78, 0, [ⲆⲆ.ⵠⲆⵠⲆⲆⵠᐃ, ⲆⲆ.ᐃⲆⲆⵠⲆᐃⵠ, ⲆⲆ.ⲆⲆᐃᐃΔⲆⲆ], 1, da, function () {
            (function () {
                if (Sf === _f && aj.FB && aj.FB.getUserID()) {
                    aj.FB.logout();
                }
                if (Ef === _f && fx !== undefined) {
                    aj.gapi.auth2.getAuthInstance().signOut();
                    fx = T;
                }
                cx = Zq;
                bx = Og;
                _f = Bh;
                df.ⵠⲆΔⲆΔ = 0;
                df.ᐃᐃΔᐃΔ = 0;
                df.ⵠΔΔᐃᐃ = 0;
                df.ⵠΔⲆⲆΔⵠⲆ();
                ᐃᐃⵠΔⲆΔΔΔⵠ();
            })();
        }, 255, 110, ba | _, fa);
        this.buttons[c++].view = p;
        this.buttons[c] = Yv(58, 64, 0, [ⲆⲆ.ⵠⲆⵠΔⲆⲆΔ, ⲆⲆ.ΔⵠᐃⵠᐃⲆⲆ, ⲆⲆ.ⵠΔⲆΔⵠⲆⵠ], 1, da, function () {
            U(t);
        }, 189, 118, ba | _, fa);
        this.buttons[c++].view = C;
        this.buttons[c] = Yv(497, 72, 0, [ⲆⲆ.ᐃΔⵠⲆⲆⵠⵠ, ⲆⲆ.ⵠⵠⲆⵠⲆΔⲆ, ⲆⲆ.ΔⵠΔⲆᐃⲆΔ], 1, da, function () {
            (function () {
                if (cw) {
                    bx = ⲆⵠΔᐃ.ⲆⲆⲆΔⲆⵠᐃ(40);
                    _f = Qf;
                    cx = cw.userId;
                    aj.ⲆΔΔᐃⵠΔᐃ();
                    return;
                }
                aj.gapi.auth2.getAuthInstance().signIn();
            })();
        }, -130, 390, ba | _, fa);
        this.buttons[c++].view = C;
        this.buttons[c] = Yv(497, 72, 0, [ⲆⲆ.ⵠⵠΔΔΔᐃΔ, ⲆⲆ.ΔⲆᐃⲆⵠΔⲆ, ⲆⲆ.ⲆⲆⵠΔⲆⲆΔ], 1, da, function () {
            aj.FB.login(function (a) {
                if (a.authResponse) {
                    aj.FB.api("/me", function (a) {
                        _f = Sf;
                        bx = aj.FB.getAuthResponse().accessToken;
                        Yf();
                        aj.ⲆΔΔᐃⵠΔᐃ();
                    });
                }
            });
        }, -130, 430, ba | _, fa);
        this.buttons[c++].view = C;
        ΔΔΔΔΔΔⵠ = 20000;
        this.ΔΔⵠᐃᐃⲆΔ = function (a) {
            var b = df.ⲆⵠⵠᐃᐃΔᐃ(a);
            var c = b * b * ΔΔΔΔΔΔⵠ;
            return (a -= c) / (ΔΔΔΔΔΔⵠ * ((b + 1) * (b + 1)) - c);
        };
        this.ⲆⵠⵠᐃᐃΔᐃ = function (a) {
            return Math.floor(Math.sqrt(a / ΔΔΔΔΔΔⵠ));
        };
        this.ⵠΔⵠⲆⲆⵠΔᐃⵠ = function (a) {
            df.ⲆⵠᐃᐃⲆ = df.ⲆⵠⵠᐃᐃΔᐃ(a);
            df.ΔΔᐃᐃᐃⵠᐃ = df.ΔΔⵠᐃᐃⲆΔ(a);
            df.ⲆⵠᐃⲆⲆΔΔ = 0;
            df.ⵠΔΔᐃᐃ = a;
        };
        this.ⲆΔΔⵠΔⵠΔᐃⲆ = function (a) {
            df.buttons[df.ΔⵠⲆⵠⲆⲆⵠ].info.active = 0;
            df.buttons[df.ⵠⲆⲆᐃᐃⲆΔ].info.active = 1;
            df.buttons[df.ⵠΔΔᐃⵠᐃᐃ].info.active = 1;
            f();
            if (a.name.indexOf("Starver#") === -1) {
                document.getElementById("account_nickname_input").value = aj.decodeURIComponent(aj.escape(aj.atob(a.name)));
            } else {
                document.getElementById("account_nickname_input").value = a.name;
            }
            df.ᐃᐃΔᐃΔ = a.bread;
            var b = a.seasons;
            var c = b[b.length - 1];
            df.ⵠᐃΔⵠⵠΔᐃ = b;
            j.ⵠΔⵠⲆⲆⵠΔᐃⵠ(c.score);
            df.ⵠΔΔᐃᐃ = c.score;
            df.ΔΔΔᐃᐃ = c.kill;
            df.ⵠⵠⲆᐃΔⲆⵠ = c.death;
            df.time = c.time;
            df.ᐃΔΔⲆⲆᐃⵠ = c.bestScore;
            df.ⲆⲆΔΔΔⲆᐃ = c.bestKill;
            df.ΔΔⲆⵠⵠⲆΔ = c.bestTime;
            df.ᐃⲆⲆⵠⵠⵠⵠ = c.scoreTotal;
            df.ⲆᐃⵠⵠᐃᐃΔ = a.firstName;
            document.getElementById("serverAddressInput").value = a.privateServerRegion + " : " + a.privateServer;
            if (df.ⲆᐃⵠⵠᐃᐃΔ === undefined) {
                df.ⲆᐃⵠⵠᐃᐃΔ = 0;
            }
            df.ⲆⲆⵠⵠⲆⲆⲆ = Date.now() + a.privateServerTime;
            if (Number(a.privateServerTime) > 0) {
                df.ⲆⲆⵠⵠⲆⲆⲆ = Date.now() + Number(a.privateServerTime);
            }
            df.ⵠⲆΔⲆΔ = Date.now() + a.kit;
            if (Number(a.kit) > 0) {
                df.ⵠⲆΔⲆΔ = Date.now() + Number(a.kit);
            }
            var d = ⲆΔⲆⵠ.ⵠᐃⲆΔᐃ;
            for (var e = 0; a.skins.length > e; e++) {
                if ((i = a.skins[e]) > 0) {
                    for (var g = 0; g < d.length; g++) {
                        if (d[g].id === e) {
                            j.unlock.ᐃΔΔⵠ[g] = 1;
                        }
                    }
                }
            }
            d = ⲆΔⲆⵠ.ΔΔⵠᐃⲆ;
            e = 0;
            for (; a.accessories.length > e; e++) {
                if ((i = a.accessories[e]) > 0) {
                    for (g = 0; d.length > g; g++) {
                        if (e === d[g].id) {
                            j.unlock.ⵠΔⵠⵠΔ[g] = 1;
                        }
                    }
                }
            }
            d = ⲆΔⲆⵠ.ⲆΔⵠⲆᐃ;
            e = 0;
            for (; e < a.books.length; e++) {
                if ((i = a.books[e]) > 0) {
                    for (g = 0; d.length > g; g++) {
                        if (d[g].id === e) {
                            j.unlock.ΔᐃΔΔΔ[g] = 1;
                        }
                    }
                }
            }
            d = ⲆΔⲆⵠ.ΔΔΔⵠ;
            e = 0;
            for (; e < a.bags.length; e++) {
                if ((i = a.bags[e]) > 0) {
                    for (g = 0; d.length > g; g++) {
                        if (e === d[g].id) {
                            j.unlock.ΔᐃⲆⵠⲆ[g] = 1;
                        }
                    }
                }
            }
            d = ⲆΔⲆⵠ.ᐃΔᐃⵠΔ;
            e = 0;
            for (; a.crates.length > e; e++) {
                var i = a.crates[e];
                if (i > 0) {
                    for (g = 0; d.length > g; g++) {
                        if (d[g].id === e) {
                            j.unlock.ⲆᐃᐃΔⵠ[g] = 1;
                            j.unlock.ⵠᐃⵠⵠᐃ[g] = 1;
                        }
                    }
                }
            }
        };
        this.ΔⵠΔⲆⲆⵠⵠⵠⲆ = function () {
            aj.ⲆΔΔᐃⵠΔᐃ = function () {
                U(t);
                (function (a) {
                    var b = new XMLHttpRequest();
                    b.open("GET", Df + "login?token=" + bx + "&type=" + _f + (cw ? "&userId=" + cw.userId + "&userInfo=" + cw.userInfo : ""));
                    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    b.onreadystatechange = function () {
                        if (this.readyState === 4 && this.status === 200 && b.responseText !== "0") {
                            a(JSON.parse(b.responseText));
                        }
                    };
                    b.send();
                })(j.ⲆΔΔⵠΔⵠΔᐃⲆ);
            };
            if (dx === 1) {
                aj.ⲆΔΔᐃⵠΔᐃ();
            }
        };
        aj.ᐃᐃⵠΔⲆΔΔΔⵠ = function () {
            df.buttons[df.ΔⵠⲆⵠⲆⲆⵠ].info.active = 1;
            df.buttons[df.ⵠⲆⲆᐃᐃⲆΔ].info.active = 0;
            df.buttons[df.ⵠΔΔᐃⵠᐃᐃ].info.active = 0;
            U(t);
        };
        this.ⲆⵠⲆⲆⲆ = function () {
            return df.buttons[df.ⵠⲆⲆᐃᐃⲆΔ].info.active;
        };
        this.buttons[c] = Yv(461, 105, 0, [ⲆⲆ.ᐃⲆΔᐃⵠⵠⵠ, ⲆⲆ.ⵠⵠΔΔⲆΔΔ, ⲆⲆ.ᐃᐃΔⵠΔᐃⵠ], 1, da, function () {
            if (j.ⲆⵠⲆⲆⲆ()) {
                U(k);
            } else {
                U(C);
            }
        }, -100, 80, ba | _, fa);
        this.buttons[c++].view = y;
        this.buttons[c] = Yv(157, 158, 0, [ⲆⲆ.ⵠⵠΔΔΔⲆΔ, ⲆⲆ.ᐃⲆⲆΔⵠⵠⲆ, ⲆⲆ.ⲆⲆⲆⵠⵠⵠⵠ], 1, da, function () {
            aj.open("https://starveiopro.wikia.com/wiki/", "_blank");
        }, -35, 125, ba | _, fa);
        this.buttons[c++].view = w;
        this.buttons[c] = Yv(66, 73, 0, [ⲆⲆ.ΔΔⲆⲆᐃᐃⵠ, ⲆⲆ.ᐃⵠΔⲆΔΔᐃ, ⲆⲆ.ⵠⵠΔⲆΔⵠⲆ], 1, da, undefined, -68, 340, ba | _, fa);
        this.buttons[c++].view = w;
        this.buttons[c] = Yv(66, 73, 0, [ⲆⲆ.ᐃⵠⵠⲆΔⵠΔ, ⲆⲆ.ᐃⲆᐃⲆᐃΔΔ, ⲆⲆ.ᐃⲆⲆⲆⵠⵠⲆ], 1, da, Yl, -30, 340, ba | _, fa);
        this.buttons[c++].view = w;
        this.ⵠⵠⲆΔⵠΔΔⲆⵠ = c;
        this.buttons[c] = Yv(97, 66, 0, [ⲆⲆ.ⲆΔΔᐃΔⵠⵠ, ⲆⲆ.ⵠᐃⵠⵠⲆΔⵠ, ⲆⲆ.ΔⲆⲆⲆᐃⲆⵠ], 1, da, function () {
            Zf(_r, Uj, df.ⲆᐃᐃᐃᐃᐃⲆ);
        }, -14, 151, ba | _, fa);
        this.buttons[c++].view = J;
        this.ⲆᐃⲆⵠᐃⲆⵠ = c;
        this.buttons[c] = Yv(135, 66, 0, [ⲆⲆ.ⵠᐃⲆⵠⵠⵠⵠ, ⲆⲆ.ᐃΔⲆⵠⲆⵠⲆ, ⲆⲆ.ⵠⵠⲆᐃᐃⲆΔ], 1, da, function () {
            Zf(At, undefined, df.ⲆᐃⲆⵠᐃⲆⵠ);
        }, 37.5, 151, ba | _, fa);
        this.buttons[c++].view = J;
        this.ⲆⵠⲆΔⵠⵠᐃ = c;
        this.buttons[c] = Yv(160, 66, 0, [ⲆⲆ.ⲆᐃΔᐃᐃⲆⲆ, ⲆⲆ.ⲆⵠⵠΔᐃⵠⲆ, ⲆⲆ.ᐃⵠᐃⵠᐃΔᐃ], 1, da, function () {
            Zf(At, _r, df.ⲆⵠⲆΔⵠⵠᐃ);
        }, 107.5, 151, ba | _, fa);
        this.buttons[c++].view = J;
        this.ⲆᐃᐃᐃᐃᐃⲆ = c;
        this.buttons[c] = Yv(207, 66, 0, [ⲆⲆ.ᐃⲆᐃΔⲆⵠΔ, ⲆⲆ.ⵠⵠⵠⵠⲆᐃΔ, ⲆⲆ.ⲆᐃⵠⵠΔΔⵠ], 1, da, function () {
            Zf(ll, Ua, df.ⲆᐃᐃᐃᐃᐃⲆ);
        }, 190.5, 151, ba | _, fa);
        this.buttons[c++].view = J;
        this.ᐃⲆΔΔᐃⵠⲆ = c;
        this.buttons[c] = Yv(144, 66, 0, [ⲆⲆ.ᐃⵠᐃΔΔΔΔ, ⲆⲆ.ᐃⵠΔⵠⲆᐃⵠ, ⲆⲆ.ᐃⵠⵠⵠΔΔⵠ], 1, da, function () {
            Zf(df.ᐃⲆΔΔᐃⵠⲆ);
        }, 103.5, 110, ba | _, fa);
        this.buttons[c++].view = J;
        this.ᐃⲆᐃΔⲆΔⲆ = c;
        this.buttons[c] = Yv(124, 66, 0, [ⲆⲆ.ⲆⲆⲆᐃᐃⵠⵠ, ⲆⲆ.ⲆΔΔᐃΔⵠᐃ, ⲆⲆ.ᐃⲆⵠᐃⲆⲆΔ], 1, da, function () {
            Zf(df.ᐃⲆᐃΔⲆΔⲆ);
        }, 177.5, 110, ba | _, fa);
        this.buttons[c++].view = J;
        this.ᐃᐃⵠⲆᐃⲆⲆ = c;
        this.buttons[c] = Yv(104, 66, 0, [ⲆⲆ.ⵠⵠⵠᐃⵠⵠⲆ, ⲆⲆ.ⵠⲆⲆΔᐃΔΔ, ⲆⲆ.ⵠⵠⵠᐃᐃΔⵠ], 1, da, function () {
            Zf(df.ᐃᐃⵠⲆᐃⲆⲆ);
        }, 242, 110, ba | _, fa);
        this.buttons[c++].view = J;
        this.ΔΔΔᐃᐃᐃⵠ = c;
        this.buttons[c] = Yv(46, 51, 0, [ⲆⲆ.ⵠⲆⲆⲆⵠⲆⵠ, ⲆⲆ.ⵠΔᐃᐃⲆⲆⲆ, ⲆⲆ.ⲆⵠΔᐃⵠⲆⵠ], 1, da, function () {
            Zf(undefined, Uj, undefined, df.ΔΔΔᐃᐃᐃⵠ);
        }, -185, 528, ba | _, fa);
        this.buttons[c++].view = J;
        this.ⵠᐃᐃᐃⵠⵠᐃ = c;
        this.buttons[c] = Yv(46, 51, 0, [ⲆⲆ.ΔⵠⵠΔⵠⵠᐃ, ⲆⲆ.ΔⲆⲆᐃⲆΔΔ, ⲆⲆ.ⵠⲆΔΔⲆⵠⵠ], 1, da, function () {
            Zf(undefined, Yl, undefined, df.ⵠᐃᐃᐃⵠⵠᐃ);
        }, -149, 528, ba | _, fa);
        this.buttons[c++].view = J;
        this.ⲆⵠΔᐃⵠᐃⲆ = c;
        this.buttons[c] = Yv(46, 51, 0, [ⲆⲆ.ᐃⲆⲆⵠΔⲆᐃ, ⲆⲆ.ⵠⵠⲆᐃⲆᐃᐃ, ⲆⲆ.ΔⵠᐃⵠΔⲆᐃ], 1, da, function () {
            Zf(ll, undefined, undefined, df.ⲆⵠΔᐃⵠᐃⲆ);
        }, -113, 528, ba | _, fa);
        this.buttons[c++].view = J;
        this.ⵠⵠΔⲆΔᐃᐃ = c;
        this.buttons[c] = Yv(46, 51, 0, [ⲆⲆ.ⲆⲆΔΔⲆᐃΔ, ⲆⲆ.ⲆᐃᐃⲆᐃᐃᐃ, ⲆⲆ.ᐃⲆⵠΔΔⲆⵠ], 1, da, function () {
            Zf(undefined, Zq, undefined, df.ⵠⵠΔⲆΔᐃᐃ);
        }, -77, 528, ba | _, fa);
        this.buttons[c++].view = J;
        this.ⲆΔΔᐃᐃᐃᐃ = c;
        this.buttons[c] = Yv(46, 51, 0, [ⲆⲆ.ΔⲆⲆᐃⲆᐃΔ, ⲆⲆ.ⲆⲆⵠⲆΔΔᐃ, ⲆⲆ.ᐃⲆᐃᐃⵠⲆⵠ], 1, da, function () {
            Zf(Yl, At, Ua, df.ⲆΔΔᐃᐃᐃᐃ);
        }, -41, 528, ba | _, fa);
        this.buttons[c++].view = J;
        this.ΔΔᐃⲆΔⵠᐃ = c;
        this.buttons[c] = Yv(46, 51, 0, [ⲆⲆ.ⵠⲆⵠᐃΔΔᐃ, ⲆⲆ.ᐃΔΔⵠᐃᐃΔ, ⲆⲆ.ᐃᐃⲆΔΔᐃΔ], 1, da, function () {
            Zf(Og, undefined, la, df.ΔΔᐃⲆΔⵠᐃ);
        }, -5, 528, ba | _, fa);
        this.buttons[c++].view = J;
        this.buttons[c] = Yv(232, 352, 0, [ⲆⲆ.ΔᐃᐃⵠⲆᐃⵠ, ⲆⲆ.ⵠᐃⲆⵠᐃⲆⵠ, ⲆⲆ.ΔΔⵠⵠΔΔᐃ], 1, da, function () {
            Xf(300);
        }, -330, 135, ba | _, fa);
        this.buttons[c++].view = k;
        this.buttons[c] = Yv(232, 352, 0, [ⲆⲆ.ΔᐃᐃΔⵠᐃΔ, ⲆⲆ.ᐃΔᐃⵠⲆⵠΔ, ⲆⲆ.ⲆΔᐃΔⲆⲆᐃ], 1, da, function () {
            Xf(600);
        }, -195, 135, ba | _, fa);
        this.buttons[c++].view = k;
        this.buttons[c] = Yv(243, 374, 0, [ⲆⲆ.ⲆᐃᐃΔΔᐃᐃ, ⲆⲆ.ⲆⲆⲆᐃΔⲆᐃ, ⲆⲆ.ⲆⲆⵠⵠⵠⵠᐃ], 1, da, function () {
            Xf(2600);
        }, -60, 130, ba | _, fa);
        this.buttons[c++].view = k;
        this.buttons[c] = Yv(232, 352, 0, [ⲆⲆ.ⵠⵠⵠᐃⲆⵠΔ, ⲆⲆ.ᐃⲆᐃⲆⵠⵠᐃ, ⲆⲆ.ΔΔⵠΔΔᐃⵠ], 1, da, function () {
            Xf(7000);
        }, 78, 135, ba | _, fa);
        this.buttons[c++].view = k;
        this.buttons[c] = Yv(243, 374, 0, [ⲆⲆ.ᐃⵠⲆᐃΔΔΔ, ⲆⲆ.ⵠⵠΔⵠⵠΔⲆ, ⲆⲆ.ⲆᐃⵠΔΔⵠᐃ], 1, da, function () {
            Xf(20000);
        }, 213, 130, ba | _, fa);
        this.buttons[c++].view = k;
        this.buttons[c] = Yv(58, 64, 0, [ⲆⲆ.ⵠⲆⵠΔⲆⲆΔ, ⲆⲆ.ΔⵠᐃⵠᐃⲆⲆ, ⲆⲆ.ⵠΔⲆΔⵠⲆⵠ], 1, da, function () {
            U(y);
        }, 300, 88, ba | _, fa);
        this.buttons[c++].view = k;
        this.buttons[c] = Yv(323, 112, 0, [ⲆⲆ.ᐃⲆⲆⲆᐃΔⵠ, ⲆⲆ.ⲆⵠΔᐃᐃⲆⲆ, ⲆⲆ.ⵠⲆΔᐃᐃⲆᐃ], 1, da, function () {
            U(K);
            Ea.ⵠᐃΔⲆⲆ();
        }, -315, 185, ba | _, fa);
        this.buttons[c++].view = z;
        this.buttons[c] = Yv(323, 112, 0, [ⲆⲆ.ᐃⲆⵠⲆⲆΔᐃ, ⲆⲆ.ΔΔⵠᐃⵠⵠᐃ, ⲆⲆ.ᐃⲆⲆΔⲆⵠⲆ], 1, da, function () {
            U(G);
            Ja.ⵠᐃΔⲆⲆ();
        }, -315, 321, ba | _, fa);
        this.buttons[c++].view = z;
        this.buttons[c] = Yv(323, 112, 0, [ⲆⲆ.ⲆⵠⲆⲆᐃᐃᐃ, ⲆⲆ.ΔⲆⲆᐃᐃⲆⲆ, ⲆⲆ.ᐃᐃⵠⵠⲆⵠΔ], 1, da, function () {
            U(M);
            Fa.ⵠᐃΔⲆⲆ();
        }, 153, 185, ba | _, fa);
        this.buttons[c++].view = z;
        this.buttons[c] = Yv(323, 112, 0, [ⲆⲆ.ⲆᐃΔΔⲆΔⲆ, ⲆⲆ.ⵠⲆⵠΔⵠⲆᐃ, ⲆⲆ.ΔⲆⲆⵠᐃᐃΔ], 1, da, function () {
            U(L);
            Ga.ⵠᐃΔⲆⲆ();
        }, 153, 321, ba | _, fa);
        this.buttons[c++].view = z;
        this.buttons[c] = Yv(323, 112, 0, [ⲆⲆ.ⵠΔⲆⵠⲆΔⲆ, ⲆⲆ.ΔⲆⲆΔᐃⲆᐃ, ⲆⲆ.ᐃⲆⵠⵠⲆⲆᐃ], 1, da, function () {
            U(F);
            Ha.ⵠᐃΔⲆⲆ();
        }, 153, 463, ba | _, fa);
        this.buttons[c++].view = z;
        this.buttons[c] = Yv(323, 112, 0, [ⲆⲆ.ᐃⵠΔⵠⲆⵠⲆ, ⲆⲆ.ᐃᐃᐃᐃⵠⵠΔ, ⲆⲆ.ⲆΔΔᐃⵠΔⵠ], 1, da, function () {
            U(P);
            Ia.ⵠᐃΔⲆⲆ();
        }, -315, 463, ba | _, fa);
        this.buttons[c++].view = z;
        this.buttons[c] = Yv(327, 117, 0, [ⲆⲆ.ΔⲆⲆⲆⵠⲆⵠ, ⲆⲆ.ⲆΔΔⲆⲆⵠⵠ, ⲆⲆ.ⲆⲆⲆⲆⵠΔⲆ], 1, da, function () {
            U(R);
        }, 155, 70, Y, ha);
        this.buttons[c++].view = t;
        this.buttons[c] = Yv(130, 129, 0, [ⲆⲆ.ⲆᐃⲆᐃΔΔᐃ, ⲆⲆ.ⵠⲆΔⲆⲆᐃⵠ, ⲆⲆ.ⲆᐃᐃΔᐃᐃΔ], 1, da, function () {
            u(o, fa, "none");
            U(y);
        }, 10, 40, ba | _, fa);
        this.buttons[c++].view = o;
        this.buttons[c] = Yv(130, 129, 0, [ⲆⲆ.ⲆᐃⲆᐃΔΔᐃ, ⲆⲆ.ⵠⲆΔⲆⲆᐃⵠ, ⲆⲆ.ⲆᐃᐃΔᐃᐃΔ], 1, da, function () {
            u(r, fa, "none");
            U(y);
        }, 10, 40, ba | _, fa);
        this.buttons[c++].view = r;
        this.buttons[c] = Yv(115, 73, 0, [ⲆⲆ.ⵠΔⵠⵠⵠ, ⲆⲆ.ᐃΔⵠΔᐃ, ⲆⲆ.ⵠⵠΔⲆΔ], 1, da, function () {
            U(y);
        }, 200, 140, ba | _, fa);
        this.buttons[c++].view = H;
        this.buttons[c] = Yv(524, 110, 0, [ⲆⲆ.ΔᐃᐃᐃΔᐃᐃ, ⲆⲆ.ΔⲆⵠⲆⵠⵠᐃ, ⲆⲆ.ⵠⵠⵠⵠᐃⲆⲆ], 1, da, function () {
            Kf("Atlanta");
        }, -265, 300, ba | _, fa);
        this.buttons[c++].view = H;
        this.buttons[c] = Yv(523, 110, 0, [ⲆⲆ.ⲆᐃᐃⵠᐃΔⲆ, ⲆⲆ.ᐃⵠᐃⲆᐃΔΔ, ⲆⲆ.ⲆⵠΔⲆⵠΔⲆ], 1, da, function () {
            Kf("LosAngeles");
        }, 5, 300, ba | _, fa);
        this.buttons[c++].view = H;
        this.buttons[c] = Yv(344, 110, 0, [ⲆⲆ.ⲆⵠΔⵠⲆΔⵠ, ⲆⲆ.ⵠΔⵠⲆⵠᐃᐃ, ⲆⲆ.ΔⲆⲆⲆⲆᐃΔ], 1, da, function () {
            Kf("Frankfurt");
        }, -265, 365, ba | _, fa);
        this.buttons[c++].view = H;
        this.buttons[c] = Yv(344, 110, 0, [ⲆⲆ.ᐃᐃΔΔᐃⵠⵠ, ⲆⲆ.ΔⵠΔⲆⲆᐃⲆ, ⲆⲆ.ⵠΔᐃⵠΔᐃⵠ], 1, da, function () {
            Kf("Osaka");
        }, 100, 365, ba | _, fa);
        this.buttons[c++].view = H;
        this.buttons[c] = Yv(344, 110, 0, [ⲆⲆ.ΔΔⲆᐃΔⵠⲆ, ⲆⲆ.ΔΔⵠᐃΔⲆⲆ, ⲆⲆ.ᐃΔΔⲆⲆⵠΔ], 1, da, function () {
            Kf("Sydney");
        }, -86, 365, ba | _, fa);
        this.buttons[c++].view = H;
        this.buttons[c] = Yv(115, 73, 0, [ⲆⲆ.ⵠΔⵠⵠⵠ, ⲆⲆ.ᐃΔⵠΔᐃ, ⲆⲆ.ⵠⵠΔⲆΔ], 1, da, function () {
            U(H);
        }, 224, 140, ba | _, fa);
        this.buttons[c++].view = q;
        this.buttons[c] = Yv(230, 352, 0, [ⲆⲆ.ⵠᐃΔⲆΔⵠΔ, ⲆⲆ.ⵠΔᐃᐃΔⲆᐃ, ⲆⲆ.ᐃⵠⵠΔⲆⵠⲆ], 1, da, function () {
            Xf(350);
        }, -280, 240, ba | _, fa);
        this.buttons[c++].view = q;
        this.buttons[c] = Yv(230, 352, 0, [ⲆⲆ.ΔᐃⲆⲆΔⵠⲆ, ⲆⲆ.ᐃⲆⵠΔⲆⵠᐃ, ⲆⲆ.ΔⲆᐃⵠⵠΔΔ], 1, da, function () {
            Xf(700);
        }, -130, 240, ba | _, fa);
        this.buttons[c++].view = q;
        this.buttons[c] = Yv(230, 352, 0, [ⲆⲆ.ΔΔⲆᐃⵠⵠᐃ, ⲆⲆ.ⵠⲆΔⲆⲆⵠΔ, ⲆⲆ.ⵠᐃΔⲆⲆⵠⵠ], 1, da, function () {
            Xf(1400);
        }, 20, 240, ba | _, fa);
        this.buttons[c++].view = q;
        this.buttons[c] = Yv(230, 352, 0, [ⲆⲆ.ΔⵠΔⵠⲆΔⲆ, ⲆⲆ.ⵠᐃⲆΔΔᐃⵠ, ⲆⲆ.ⵠⲆⲆⲆΔᐃⵠ], 1, da, function () {
            Xf(3000);
        }, 170, 240, ba | _, fa);
        this.buttons[c++].view = q;
        this.buttons[c] = Yv(105, 119, 0, [ⲆⲆ.ⵠⲆᐃⲆⵠⵠⵠ, ⲆⲆ.ⵠᐃΔⲆⵠᐃΔ, ⲆⲆ.ⲆⵠΔᐃⵠⲆᐃ], 1, da, function () {
            const a = document.getElementById("serverAddressInput").value.split(" : ");
            const b = aj.document.createElement("textarea");
            b.value = gw + "?server=" + a[1] + "&region=" + a[0];
            aj.document.body.appendChild(b);
            b.select();
            aj.document.execCommand("copy");
            aj.document.body.removeChild(b);
        }, 170, 310, ba | _, fa);
        this.buttons[c++].view = Q;
        this.buttons[c] = Yv(105, 119, 0, [ⲆⲆ.ⲆⲆⵠⲆᐃᐃⲆ, ⲆⲆ.ⲆⵠᐃⵠΔⵠᐃ, ⲆⲆ.ᐃⵠΔⵠΔᐃⲆ], 1, da, function () {
            (function () {
                var a = new XMLHttpRequest();
                a.open("GET", Df + "rebootServer?token=" + bx + "&userid=" + cx);
                a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                a.onreadystatechange = function () {
                    if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
                        const a = document.getElementById("serverAddressInput").value.split(" : ");
                        location.href = gw + "?server=" + a[1] + "&region=" + a[0];
                    }
                };
                a.send();
            })();
        }, 235, 310, ba | _, fa);
        this.buttons[c++].view = Q;
        this.buttons[c] = Yv(204, 115, 0, [ⲆⲆ.ⲆⵠᐃⲆⲆΔⲆ, ⲆⲆ.ⲆᐃΔΔᐃᐃⲆ, ⲆⲆ.ⵠⲆΔΔΔᐃᐃ], 1, da, function () {
            aj.open("./commands.html", "_blank");
        }, -265, 490, ba | _, fa);
        this.buttons[c++].view = Q;
        this.buttons[c] = Yv(145, 69, 0, [ⲆⲆ.ⵠᐃᐃᐃΔΔᐃ, ⲆⲆ.ᐃⵠᐃᐃΔⲆᐃ, ⲆⲆ.ᐃᐃᐃΔᐃᐃᐃ], 1, da, function () {
            U(x);
        }, -210, 170, ba | _, fa);
        this.buttons[c++].view = y;
        this.buttons[c] = Yv(145, 69, 0, [ⲆⲆ.ΔⵠⵠⲆᐃⲆᐃ, ⲆⲆ.ᐃⵠᐃᐃⲆᐃⵠ, ⲆⲆ.ⵠⲆΔᐃΔⲆΔ], 1, da, function () {
            U(D);
        }, 70, 170, ba | _, fa);
        this.buttons[c++].view = y;
        this.buttons[c] = Yv(145, 69, 0, [ⲆⲆ.ΔᐃⲆⵠⲆΔΔ, ⲆⲆ.ⵠᐃⵠΔⲆᐃᐃ, ⲆⲆ.ᐃΔⲆⵠΔᐃᐃ], 1, da, function () {
            U(A);
        }, 70, 204, ba | _, fa);
        this.buttons[c++].view = y;
        this.buttons[c] = Yv(145, 69, 0, [ⲆⲆ.ⵠⵠⲆᐃΔᐃⲆ, ⲆⲆ.ᐃⲆⲆⵠΔⲆⲆ, ⲆⲆ.ⵠⲆΔΔΔⵠᐃ], 1, da, function () {
            U(E);
        }, -210, 204, ba | _, fa);
        this.buttons[c++].view = y;
        this.buttons[c] = Yv(145, 69, 0, [ⲆⲆ.ⵠⵠⲆᐃΔᐃⲆ, ⲆⲆ.ᐃⲆⲆⵠΔⲆⲆ, ⲆⲆ.ⵠⲆΔΔΔⵠᐃ], 1, da, function () {
            U(I);
        }, 70, 238, ba | _, fa);
        this.buttons[c++].view = y;
        this.buttons[c] = Yv(145, 69, 0, [ⲆⲆ.ⵠⵠⲆᐃΔᐃⲆ, ⲆⲆ.ᐃⲆⲆⵠΔⲆⲆ, ⲆⲆ.ⵠⲆΔΔΔⵠᐃ], 1, da, function () {
            if (j.ⲆⵠⲆⲆⲆ()) {
                hx(0, 300);
            } else {
                U(C);
            }
        }, 307, 205, ba | _, fa);
        this.buttons[c++].view = y;
        this.buttons[c] = Yv(145, 69, 0, [ⲆⲆ.ⵠΔⵠᐃᐃᐃⲆ, ⲆⲆ.ⲆΔᐃΔⲆᐃΔ, ⲆⲆ.ⵠᐃΔΔⲆᐃᐃ], 1, da, function () {
            U(B);
        }, -210, 238, ba | _, fa);
        this.buttons[c++].view = y;
        this.buttons[c] = Yv(145, 69, 0, [ⲆⲆ.ⵠΔⵠᐃᐃᐃⲆ, ⲆⲆ.ⲆΔᐃΔⲆᐃΔ, ⲆⲆ.ⵠᐃΔΔⲆᐃᐃ], 1, da, function () {
            if (j.ⲆⵠⲆⲆⲆ()) {
                hx(1, 600);
            } else {
                U(C);
            }
        }, 307, 239, ba | _, fa);
        this.buttons[c++].view = y;
        this.buttons[c] = Yv(192, 101, 0, [ⲆⲆ.ⵠⵠⲆΔΔᐃⲆ, ⲆⲆ.ᐃⵠⵠⲆⵠᐃⲆ, ⲆⲆ.ᐃΔⵠⲆⵠΔⵠ], 1, da, function () {
            Vf();
        }, -100, 250, ba | _, fa);
        this.buttons[c++].view = N;
        this.buttons[c] = Yv(192, 104, 0, [ⲆⲆ.ᐃᐃᐃⲆⵠⲆⲆ, ⲆⲆ.ΔⵠΔⵠᐃⲆⵠ, ⲆⲆ.ᐃⲆᐃΔᐃⵠΔ], 1, da, function () {
            Vf();
        }, -100, 239, ba | _, fa);
        this.buttons[c++].view = O;
        this.buttons[c] = Yv(192, 101, 0, [ⲆⲆ.ΔⲆΔᐃⵠΔΔ, ⲆⲆ.ΔΔᐃᐃᐃΔᐃ, ⲆⲆ.ⵠᐃΔΔⵠᐃΔ], 1, da, function () {
            U(p);
        }, 10, 250, ba | _, fa);
        this.buttons[c++].view = N;
        this.buttons[c] = Yv(192, 104, 0, [ⲆⲆ.ΔⵠᐃᐃⲆⲆΔ, ⲆⲆ.ᐃⲆᐃᐃⲆⵠⲆ, ⲆⲆ.ᐃᐃᐃΔⵠⵠᐃ], 1, da, function () {
            U(p);
        }, 10, 239, ba | _, fa);
        this.buttons[c++].view = O;
        ᐃⵠᐃᐃᐃ = [];
        ᐃⵠᐃᐃᐃ[ⲆⲆⵠ.ⵠΔΔⲆΔ] = [ⲆⲆ.ΔⲆⵠⵠⲆⲆᐃ, ⲆⲆ.ⲆΔΔᐃΔⵠⲆ, ⲆⲆ.ᐃⵠᐃᐃΔⲆⲆ];
        ᐃⵠᐃᐃᐃ[ⲆⲆⵠ.ΔⲆΔᐃ] = [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ];
        ᐃⵠᐃᐃᐃ[ⲆⲆⵠ.ⵠⵠⵠᐃ] = [ⲆⲆ.ΔⵠΔᐃᐃᐃᐃ, ⲆⲆ.ⵠⵠΔᐃᐃᐃᐃ, ⲆⲆ.ᐃᐃΔⵠⲆⲆᐃ];
        ᐃⵠᐃᐃᐃ[ⲆⲆⵠ.ᐃⵠⵠᐃ] = [ⲆⲆ.ᐃᐃⲆΔᐃΔΔ, ⲆⲆ.ᐃᐃΔᐃᐃⵠⵠ, ⲆⲆ.ᐃᐃᐃᐃᐃⵠⵠ];
        ᐃⵠᐃᐃᐃ[ⲆⲆⵠ.ⲆΔᐃᐃ] = [ⲆⲆ.ⵠⲆⲆⲆᐃⵠⲆ, ⲆⲆ.ⵠⲆΔᐃΔΔΔ, ⲆⲆ.ᐃᐃΔᐃⵠΔΔ];
        ᐃⵠᐃᐃᐃ[ⲆⲆⵠ.Ⲇᐃᐃⵠ] = [ⲆⲆ.ᐃⵠΔΔⲆᐃΔ, ⲆⲆ.ⵠⵠΔΔᐃⲆⲆ, ⲆⲆ.ⵠᐃΔⲆⵠᐃⲆ];
        ᐃⵠᐃᐃᐃ[ⲆⲆⵠ.ⲆⵠⵠΔ] = [ⲆⲆ.ΔⵠⵠⲆⲆⵠⲆ, ⲆⲆ.ⲆΔΔⵠΔᐃΔ, ⲆⲆ.ΔⵠⲆⵠΔΔᐃ];
        ᐃⵠᐃᐃᐃ[ⲆⲆⵠ.ⵠΔΔⵠⵠ] = [ⲆⲆ.ⵠⲆΔᐃᐃᐃΔ, ⲆⲆ.ⲆⲆΔⲆᐃΔⲆ, ⲆⲆ.ᐃⵠΔⲆⲆΔΔ];
        ᐃⵠᐃᐃᐃ[ⲆⲆⵠ.ⲆⵠΔΔⲆⵠⵠ] = [ⲆⲆ.ⵠⲆΔᐃΔᐃⲆ, ⲆⲆ.ᐃΔⵠᐃΔⵠᐃ, ⲆⲆ.ⲆⲆⵠᐃΔᐃⵠ];
        ⵠΔⵠΔᐃⵠⵠ = c;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, Cg, -29, 205, ba | _, fa);
        this.buttons[c++].view = K;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, -29, 300, ba | _, fa);
        this.buttons[c++].view = K;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, Bs, -29, 395, ba | _, fa);
        this.buttons[c++].view = K;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, 65, 205, ba | _, fa);
        this.buttons[c++].view = K;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, Yl, 65, 300, ba | _, fa);
        this.buttons[c++].view = K;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, Zq, 65, 395, ba | _, fa);
        this.buttons[c++].view = K;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, 159, 205, ba | _, fa);
        this.buttons[c++].view = K;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, Db, 159, 300, ba | _, fa);
        this.buttons[c++].view = K;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, 159, 395, ba | _, fa);
        this.buttons[c++].view = K;
        this.buttons[c] = Yv(39, 122, 0, [ⲆⲆ.ⵠⵠΔΔⵠΔⵠ, ⲆⲆ.ΔΔᐃᐃⵠᐃΔ, ⲆⲆ.ΔᐃᐃΔⲆΔⲆ], 1, da, undefined, -61, 315, ba | _, fa);
        this.buttons[c++].view = K;
        this.buttons[c] = Yv(39, 122, 0, [ⲆⲆ.ᐃᐃΔΔⵠΔⲆ, ⲆⲆ.ΔΔⵠΔⵠΔⵠ, ⲆⲆ.ⵠⵠᐃᐃⲆᐃᐃ], 1, da, Yl, 260, 315, ba | _, fa);
        this.buttons[c++].view = K;
        this.buttons[c] = Yv(115, 73, 0, [ⲆⲆ.ⵠΔⵠⵠⵠ, ⲆⲆ.ᐃΔⵠΔᐃ, ⲆⲆ.ⵠⵠΔⲆΔ], 1, da, function () {
            U(z);
        }, -320, 470, ba | _, fa);
        this.buttons[c++].view = K;
        ᐃᐃᐃⵠⲆΔⲆⵠΔ = c;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, -29, 205, ba | _, fa);
        this.buttons[c++].view = G;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, Yl, -29, 300, ba | _, fa);
        this.buttons[c++].view = G;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, -29, 395, ba | _, fa);
        this.buttons[c++].view = G;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, Zq, 65, 205, ba | _, fa);
        this.buttons[c++].view = G;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, Xn, 65, 300, ba | _, fa);
        this.buttons[c++].view = G;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, 65, 395, ba | _, fa);
        this.buttons[c++].view = G;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, 159, 205, ba | _, fa);
        this.buttons[c++].view = G;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, 159, 300, ba | _, fa);
        this.buttons[c++].view = G;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, At, 159, 395, ba | _, fa);
        this.buttons[c++].view = G;
        this.buttons[c] = Yv(39, 122, 0, [ⲆⲆ.ⵠⵠΔΔⵠΔⵠ, ⲆⲆ.ΔΔᐃᐃⵠᐃΔ, ⲆⲆ.ΔᐃᐃΔⲆΔⲆ], 1, da, la, -61, 315, ba | _, fa);
        this.buttons[c++].view = G;
        this.buttons[c] = Yv(39, 122, 0, [ⲆⲆ.ᐃᐃΔΔⵠΔⲆ, ⲆⲆ.ΔΔⵠΔⵠΔⵠ, ⲆⲆ.ⵠⵠᐃᐃⲆᐃᐃ], 1, da, undefined, 260, 315, ba | _, fa);
        this.buttons[c++].view = G;
        this.buttons[c] = Yv(115, 73, 0, [ⲆⲆ.ⵠΔⵠⵠⵠ, ⲆⲆ.ᐃΔⵠΔᐃ, ⲆⲆ.ⵠⵠΔⲆΔ], 1, da, function () {
            U(z);
        }, -320, 470, ba | _, fa);
        this.buttons[c++].view = G;
        ΔⲆᐃⲆᐃⲆΔⲆⲆ = c;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, -29, 205, ba | _, fa);
        this.buttons[c++].view = P;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, la, -29, 300, ba | _, fa);
        this.buttons[c++].view = P;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, -29, 395, ba | _, fa);
        this.buttons[c++].view = P;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, Bh, 65, 205, ba | _, fa);
        this.buttons[c++].view = P;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, T, 65, 300, ba | _, fa);
        this.buttons[c++].view = P;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, 65, 395, ba | _, fa);
        this.buttons[c++].view = P;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, Xn, 159, 205, ba | _, fa);
        this.buttons[c++].view = P;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, 159, 300, ba | _, fa);
        this.buttons[c++].view = P;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, Gj, 159, 395, ba | _, fa);
        this.buttons[c++].view = P;
        this.buttons[c] = Yv(39, 122, 0, [ⲆⲆ.ⵠⵠΔΔⵠΔⵠ, ⲆⲆ.ΔΔᐃᐃⵠᐃΔ, ⲆⲆ.ΔᐃᐃΔⲆΔⲆ], 1, da, Mq, -61, 315, ba | _, fa);
        this.buttons[c++].view = P;
        this.buttons[c] = Yv(39, 122, 0, [ⲆⲆ.ᐃᐃΔΔⵠΔⲆ, ⲆⲆ.ΔΔⵠΔⵠΔⵠ, ⲆⲆ.ⵠⵠᐃᐃⲆᐃᐃ], 1, da, Ua, 260, 315, ba | _, fa);
        this.buttons[c++].view = P;
        this.buttons[c] = Yv(115, 73, 0, [ⲆⲆ.ⵠΔⵠⵠⵠ, ⲆⲆ.ᐃΔⵠΔᐃ, ⲆⲆ.ⵠⵠΔⲆΔ], 1, da, function () {
            U(z);
        }, -320, 470, ba | _, fa);
        this.buttons[c++].view = P;
        ᐃⲆΔⵠᐃⲆⲆΔⵠ = c;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, Ua, -29, 205, ba | _, fa);
        this.buttons[c++].view = M;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, _r, -29, 300, ba | _, fa);
        this.buttons[c++].view = M;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, Bh, -29, 395, ba | _, fa);
        this.buttons[c++].view = M;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, At, 65, 205, ba | _, fa);
        this.buttons[c++].view = M;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, 65, 300, ba | _, fa);
        this.buttons[c++].view = M;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, la, 65, 395, ba | _, fa);
        this.buttons[c++].view = M;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, 159, 205, ba | _, fa);
        this.buttons[c++].view = M;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, 159, 300, ba | _, fa);
        this.buttons[c++].view = M;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, 159, 395, ba | _, fa);
        this.buttons[c++].view = M;
        this.buttons[c] = Yv(39, 122, 0, [ⲆⲆ.ⵠⵠΔΔⵠΔⵠ, ⲆⲆ.ΔΔᐃᐃⵠᐃΔ, ⲆⲆ.ΔᐃᐃΔⲆΔⲆ], 1, da, Cg, -61, 315, ba | _, fa);
        this.buttons[c++].view = M;
        this.buttons[c] = Yv(39, 122, 0, [ⲆⲆ.ᐃᐃΔΔⵠΔⲆ, ⲆⲆ.ΔΔⵠΔⵠΔⵠ, ⲆⲆ.ⵠⵠᐃᐃⲆᐃᐃ], 1, da, Bs, 260, 315, ba | _, fa);
        this.buttons[c++].view = M;
        this.buttons[c] = Yv(115, 73, 0, [ⲆⲆ.ⵠΔⵠⵠⵠ, ⲆⲆ.ᐃΔⵠΔᐃ, ⲆⲆ.ⵠⵠΔⲆΔ], 1, da, function () {
            U(z);
        }, -320, 470, ba | _, fa);
        this.buttons[c++].view = M;
        ⵠⵠᐃᐃⵠⲆⲆⵠᐃ = c;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, -29, 205, ba | _, fa);
        this.buttons[c++].view = L;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, -29, 300, ba | _, fa);
        this.buttons[c++].view = L;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, -29, 395, ba | _, fa);
        this.buttons[c++].view = L;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, Xn, 65, 205, ba | _, fa);
        this.buttons[c++].view = L;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, 65, 300, ba | _, fa);
        this.buttons[c++].view = L;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, 65, 395, ba | _, fa);
        this.buttons[c++].view = L;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, Bh, 159, 205, ba | _, fa);
        this.buttons[c++].view = L;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, Xk, 159, 300, ba | _, fa);
        this.buttons[c++].view = L;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, Cg, 159, 395, ba | _, fa);
        this.buttons[c++].view = L;
        this.buttons[c] = Yv(39, 122, 0, [ⲆⲆ.ⵠⵠΔΔⵠΔⵠ, ⲆⲆ.ΔΔᐃᐃⵠᐃΔ, ⲆⲆ.ΔᐃᐃΔⲆΔⲆ], 1, da, hj, -61, 315, ba | _, fa);
        this.buttons[c++].view = L;
        this.buttons[c] = Yv(39, 122, 0, [ⲆⲆ.ᐃᐃΔΔⵠΔⲆ, ⲆⲆ.ΔΔⵠΔⵠΔⵠ, ⲆⲆ.ⵠⵠᐃᐃⲆᐃᐃ], 1, da, undefined, 260, 315, ba | _, fa);
        this.buttons[c++].view = L;
        this.buttons[c] = Yv(115, 73, 0, [ⲆⲆ.ⵠΔⵠⵠⵠ, ⲆⲆ.ᐃΔⵠΔᐃ, ⲆⲆ.ⵠⵠΔⲆΔ], 1, da, function () {
            U(z);
        }, -320, 470, ba | _, fa);
        this.buttons[c++].view = L;
        ᐃΔⲆⵠΔⵠⲆⵠⵠ = c;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, -29, 205, ba | _, fa);
        this.buttons[c++].view = F;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, -29, 300, ba | _, fa);
        this.buttons[c++].view = F;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, -29, 395, ba | _, fa);
        this.buttons[c++].view = F;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, 65, 205, ba | _, fa);
        this.buttons[c++].view = F;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, 65, 300, ba | _, fa);
        this.buttons[c++].view = F;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, _r, 65, 395, ba | _, fa);
        this.buttons[c++].view = F;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, 159, 205, ba | _, fa);
        this.buttons[c++].view = F;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, 159, 300, ba | _, fa);
        this.buttons[c++].view = F;
        this.buttons[c] = Yv(178, 182, 0, [ⲆⲆ.ΔΔⵠΔ, ⲆⲆ.ᐃΔⵠᐃ, ⲆⲆ.ΔⲆⲆΔ], 1, da, undefined, 159, 395, ba | _, fa);
        this.buttons[c++].view = F;
        this.buttons[c] = Yv(39, 122, 0, [ⲆⲆ.ⵠⵠΔΔⵠΔⵠ, ⲆⲆ.ΔΔᐃᐃⵠᐃΔ, ⲆⲆ.ΔᐃᐃΔⲆΔⲆ], 1, da, undefined, -61, 315, ba | _, fa);
        this.buttons[c++].view = F;
        this.buttons[c] = Yv(39, 122, 0, [ⲆⲆ.ᐃᐃΔΔⵠΔⲆ, ⲆⲆ.ΔΔⵠΔⵠΔⵠ, ⲆⲆ.ⵠⵠᐃᐃⲆᐃᐃ], 1, da, Ua, 260, 315, ba | _, fa);
        this.buttons[c++].view = F;
        this.buttons[c] = Yv(115, 73, 0, [ⲆⲆ.ⵠΔⵠⵠⵠ, ⲆⲆ.ᐃΔⵠΔᐃ, ⲆⲆ.ⵠⵠΔⲆΔ], 1, da, function () {
            U(z);
        }, -320, 470, ba | _, fa);
        this.buttons[c++].view = F;
        this.buttons[c] = Yv(260, 260, 0, [ⲆⲆ.ⲆΔΔⲆⵠⲆⵠ, ⲆⲆ.ΔΔⵠᐃⲆⲆᐃ, ⲆⲆ.ⲆⲆΔⵠⲆᐃⵠ], 1, da, function () {
            if (j.ⲆⵠⲆⲆⲆ()) {
                ix(3, 50);
            } else {
                U(C);
            }
        }, -65, 197, ba | _, fa);
        this.buttons[c++].view = D;
        this.buttons[c] = Yv(115, 73, 0, [ⲆⲆ.ⵠΔⵠⵠⵠ, ⲆⲆ.ᐃΔⵠΔᐃ, ⲆⲆ.ⵠⵠΔⲆΔ], 1, da, function () {
            U(y);
        }, 309, 180, ba | _, fa);
        this.buttons[c++].view = D;
        this.buttons[c] = Yv(260, 260, 0, [ⲆⲆ.ᐃᐃⲆⵠⲆᐃΔ, ⲆⲆ.ⵠⲆᐃⲆⵠᐃΔ, ⲆⲆ.ⵠΔᐃⵠⲆⲆᐃ], 1, da, function () {
            if (j.ⲆⵠⲆⲆⲆ()) {
                ix(0, 100);
            } else {
                U(C);
            }
        }, -65, 197, ba | _, fa);
        this.buttons[c++].view = x;
        this.buttons[c] = Yv(115, 73, 0, [ⲆⲆ.ⵠΔⵠⵠⵠ, ⲆⲆ.ᐃΔⵠΔᐃ, ⲆⲆ.ⵠⵠΔⲆΔ], 1, da, function () {
            U(y);
        }, 309, 180, ba | _, fa);
        this.buttons[c++].view = x;
        this.buttons[c] = Yv(260, 260, 0, [ⲆⲆ.ⵠⵠΔᐃΔⵠⵠ, ⲆⲆ.ⵠᐃᐃⵠⵠᐃΔ, ⲆⲆ.ⲆᐃΔΔⲆᐃΔ], 1, da, function () {
            if (j.ⲆⵠⲆⲆⲆ()) {
                ix(4, 150);
            } else {
                U(C);
            }
        }, -65, 197, ba | _, fa);
        this.buttons[c++].view = A;
        this.buttons[c] = Yv(115, 73, 0, [ⲆⲆ.ⵠΔⵠⵠⵠ, ⲆⲆ.ᐃΔⵠΔᐃ, ⲆⲆ.ⵠⵠΔⲆΔ], 1, da, function () {
            U(y);
        }, 309, 180, ba | _, fa);
        this.buttons[c++].view = A;
        this.buttons[c] = Yv(260, 260, 0, [ⲆⲆ.ⵠᐃΔᐃᐃⲆⲆ, ⲆⲆ.ⵠᐃΔⲆΔⲆᐃ, ⲆⲆ.ⲆᐃΔⲆΔⵠᐃ], 1, da, function () {
            if (j.ⲆⵠⲆⲆⲆ()) {
                ix(1, 300);
            } else {
                U(C);
            }
        }, -65, 197, ba | _, fa);
        this.buttons[c++].view = E;
        this.buttons[c] = Yv(115, 73, 0, [ⲆⲆ.ⵠΔⵠⵠⵠ, ⲆⲆ.ᐃΔⵠΔᐃ, ⲆⲆ.ⵠⵠΔⲆΔ], 1, da, function () {
            U(y);
        }, 309, 180, ba | _, fa);
        this.buttons[c++].view = E;
        this.buttons[c] = Yv(260, 260, 0, [ⲆⲆ.ΔⲆⲆⲆᐃᐃΔ, ⲆⲆ.ΔᐃᐃⲆⵠⲆᐃ, ⲆⲆ.ⵠⵠⲆⲆΔⲆΔ], 1, da, function () {
            if (j.ⲆⵠⲆⲆⲆ()) {
                ix(2, 600);
            } else {
                U(C);
            }
        }, -65, 197, ba | _, fa);
        this.buttons[c++].view = B;
        this.buttons[c] = Yv(115, 73, 0, [ⲆⲆ.ⵠΔⵠⵠⵠ, ⲆⲆ.ᐃΔⵠΔᐃ, ⲆⲆ.ⵠⵠΔⲆΔ], 1, da, function () {
            U(y);
        }, 309, 180, ba | _, fa);
        this.buttons[c++].view = B;
        this.buttons[c] = Yv(260, 260, 0, [ⲆⲆ.ⵠᐃΔᐃᐃⲆⲆ, ⲆⲆ.ⵠᐃΔⲆΔⲆᐃ, ⲆⲆ.ⲆᐃΔⲆΔⵠᐃ], 1, da, function () {
            if (j.ⲆⵠⲆⲆⲆ()) {
                ix(5, 300);
            } else {
                U(C);
            }
        }, -65, 197, ba | _, fa);
        this.buttons[c++].view = I;
        this.buttons[c] = Yv(115, 73, 0, [ⲆⲆ.ⵠΔⵠⵠⵠ, ⲆⲆ.ᐃΔⵠΔᐃ, ⲆⲆ.ⵠⵠΔⲆΔ], 1, da, function () {
            U(y);
        }, 309, 180, ba | _, fa);
        this.buttons[c++].view = I;
        var ta = c;
        this.buttons[c] = Yv(46, 51, 0, [ⲆⲆ.ᐃᐃΔΔᐃᐃⲆ, ⲆⲆ.ⲆⲆᐃⲆᐃΔᐃ, ⲆⲆ.ΔᐃⲆⲆⲆⲆᐃ], 1, da, function () {
            sa(undefined, 0);
        }, -305, 132, ba | _, fa);
        this.buttons[c++].view = p;
        var ua = c;
        this.buttons[c] = Yv(46, 51, 0, [ⲆⲆ.ⲆⲆⲆⵠΔᐃⵠ, ⲆⲆ.ᐃΔΔΔⲆⲆΔ, ⲆⲆ.ⲆⵠⵠⵠⵠΔΔ], 1, da, function () {
            sa(Bh, 1);
        }, -273, 132, ba | _, fa);
        this.buttons[c++].view = p;
        var va = c;
        this.buttons[c] = Yv(46, 51, 0, [ⲆⲆ.ΔᐃᐃᐃᐃⲆⲆ, ⲆⲆ.ⵠⵠⵠⲆⵠⵠⵠ, ⲆⲆ.ⲆⲆⲆⲆⵠⵠΔ], 1, da, function () {
            sa(undefined, 2);
        }, -241, 132, ba | _, fa);
        this.buttons[c++].view = p;
        var wa = c;
        this.buttons[c] = Yv(46, 51, 0, [ⲆⲆ.ᐃⲆᐃᐃⵠᐃⲆ, ⲆⲆ.ΔᐃᐃⵠⲆᐃⲆ, ⲆⲆ.ⲆⲆⲆⵠΔᐃᐃ], 1, da, function () {
            sa(Zq, 3);
        }, -305, 165, ba | _, fa);
        this.buttons[c++].view = p;
        var xa = c;
        this.buttons[c] = Yv(46, 51, 0, [ⲆⲆ.ΔᐃᐃⵠⲆⵠⵠ, ⲆⲆ.ⲆⲆΔⲆⵠΔᐃ, ⲆⲆ.ᐃⵠⲆᐃᐃΔⵠ], 1, da, function () {
            sa(undefined, 4);
        }, -273, 165, ba | _, fa);
        this.buttons[c++].view = p;
        var ya = c;
        this.buttons[c] = Yv(46, 51, 0, [ⲆⲆ.ΔᐃᐃⵠⲆⲆΔ, ⲆⲆ.ⵠⵠⲆΔⲆⵠᐃ, ⲆⲆ.ᐃᐃᐃΔᐃΔⵠ], 1, da, function () {
            sa(Yg, 5);
        }, -241, 165, ba | _, fa);
        this.buttons[c++].view = p;
        var za = c;
        this.buttons[c] = Yv(460, 73, 0, [ⲆⲆ.ⲆⵠΔΔⵠᐃᐃ, ⲆⲆ.ⲆⵠᐃᐃⵠᐃΔ, ⲆⲆ.ΔᐃᐃⲆⲆᐃᐃ], 1, da, function () {
            sa(-1);
        }, -180, 170, ba | _, fa);
        this.buttons[c++].view = p;
        var Aa = c;
        this.buttons[c] = Yv(222, 68, 0, [ⲆⲆ.ⲆᐃᐃᐃⵠⲆⵠ, ⲆⲆ.ⵠⲆᐃΔΔⲆⲆ, ⲆⲆ.ⲆⵠⵠᐃⵠⲆᐃ], 1, da, function () {
            sa(0);
        }, -180, 215, ba | _, fa);
        this.buttons[c++].view = p;
        var Ba = c;
        this.buttons[c] = Yv(222, 68, 0, [ⲆⲆ.ⲆⵠᐃⲆΔΔⵠ, ⲆⲆ.ᐃΔⵠⵠᐃⵠⲆ, ⲆⲆ.ⲆᐃΔⵠⲆⵠᐃ], 1, da, function () {
            sa(4);
        }, -180, 260, ba | _, fa);
        this.buttons[c++].view = p;
        var Ca = c;
        this.buttons[c] = Yv(222, 68, 0, [ⲆⲆ.ⲆⲆᐃᐃΔⲆⵠ, ⲆⲆ.ⵠⵠⵠⲆΔΔⲆ, ⲆⲆ.ΔᐃⲆⲆᐃⲆᐃ], 1, da, function () {
            sa(2);
        }, -60, 215, ba | _, fa);
        this.buttons[c++].view = p;
        var Da = c;
        this.buttons[c] = Yv(222, 68, 0, [ⲆⲆ.ⲆⲆⲆΔᐃⲆΔ, ⲆⲆ.Ⲇᐃⵠⵠⵠᐃⵠ, ⲆⲆ.ΔᐃⵠⵠⲆⵠΔ], 1, da, function () {
            sa(3);
        }, -60, 260, ba | _, fa);
        this.buttons[c++].view = p;
        this.ᐃⵠⲆᐃⵠⵠⵠ = c;
        this.buttons[c] = Yv(143, 66, 0, [ⲆⲆ.ΔⵠⲆΔΔΔΔ, ⲆⲆ.ΔⵠⵠΔᐃΔᐃ, ⲆⲆ.ΔⲆⲆⵠᐃⵠⲆ], 1, da, function () {
            Zf(Ua, df.ᐃⵠⲆᐃⵠⵠⵠ);
        }, -298, 110, ba | _, fa);
        this.buttons[c++].view = J;
        this.ⵠᐃᐃΔⲆⵠⵠ = c;
        this.buttons[c] = Yv(104, 66, 0, [ⲆⲆ.ⲆⵠΔⲆⵠΔΔ, ⲆⲆ.ⵠΔⵠΔΔⵠΔ, ⲆⲆ.ΔΔΔⲆΔᐃᐃ], 1, da, function () {
            Zf(undefined, df.ⵠᐃᐃΔⲆⵠⵠ);
        }, -223, 110, ba | _, fa);
        this.buttons[c++].view = J;
        this.ⲆⲆᐃᐃⲆⲆⲆ = c;
        this.buttons[c] = Yv(110, 66, 0, [ⲆⲆ.ⲆⵠⵠᐃⲆⵠᐃ, ⲆⲆ.ⲆⲆᐃⲆᐃΔⲆ, ⲆⲆ.ⵠⲆⵠᐃᐃᐃΔ], 1, da, function () {
            Zf(undefined, df.ⲆⲆᐃᐃⲆⲆⲆ);
        }, -168, 110, ba | _, fa);
        this.buttons[c++].view = J;
        this.ΔΔᐃⲆⲆⵠⵠ = c;
        this.buttons[c] = Yv(88, 66, 0, [ⲆⲆ.ΔⲆⵠⲆᐃⵠⲆ, ⲆⲆ.ⵠᐃⲆᐃΔΔᐃ, ⲆⲆ.ⲆⲆΔⵠΔΔΔ], 1, da, function () {
            Zf(Zq, df.ΔΔᐃⲆⲆⵠⵠ);
        }, -110, 110, ba | _, fa);
        this.buttons[c++].view = J;
        this.ᐃᐃⵠΔᐃᐃⲆ = c;
        this.buttons[c] = Yv(88, 66, 0, [ⲆⲆ.ⵠΔⵠᐃⲆᐃⵠ, ⲆⲆ.ΔⲆⵠΔⲆⵠⵠ, ⲆⲆ.ᐃⵠⵠⵠᐃᐃⵠ], 1, da, function () {
            Zf(hj, df.ᐃᐃⵠΔᐃᐃⲆ);
        }, -63, 110, ba | _, fa);
        this.buttons[c++].view = J;
        this.buttons[c] = Yv(86, 44, 0, [ⲆⲆ.ᐃⵠΔⲆᐃⲆⲆ, ⲆⲆ.ᐃⲆᐃⵠⵠᐃᐃ, ⲆⲆ.ⲆΔⵠⵠⵠⵠᐃ], 1, da, function () {
            aj.open("./terms.html", "_blank");
        }, 349, 290, ba | _, fa);
        this.buttons[c++].view = y;
        var Ea = new e(ⲆΔⲆⵠ.ⵠᐃⲆΔᐃ, ⵠΔⵠΔᐃⵠⵠ, function (a) {
            df.ᐃΔΔⵠ = a;
            if (df.unlock.ᐃΔΔⵠ[a] === 1) {
                ᐃᐃΔⵠ.set("starve_skin", "" + a, {
                    expires: 30
                });
            }
        }, this.ᐃΔΔⵠ, this.unlock.ᐃΔΔⵠ);
        var Fa = new e(ⲆΔⲆⵠ.ΔΔΔⵠ, ᐃⲆΔⵠᐃⲆⲆΔⵠ, function (a) {
            df.ΔᐃⲆⵠⲆ = a;
            if (df.unlock.ΔᐃⲆⵠⲆ[a] === 1) {
                ᐃᐃΔⵠ.set("starve_bag", "" + a, {
                    expires: 30
                });
            }
        }, this.ΔᐃⲆⵠⲆ, this.unlock.ΔᐃⲆⵠⲆ);
        var Ga = new e(ⲆΔⲆⵠ.ⲆΔⵠⲆᐃ, ⵠⵠᐃᐃⵠⲆⲆⵠᐃ, function (a) {
            df.ΔᐃΔΔΔ = a;
            if (df.unlock.ΔᐃΔΔΔ[a] === 1) {
                ᐃᐃΔⵠ.set("starve_book", "" + a, {
                    expires: 30
                });
            }
        }, this.ΔᐃΔΔΔ, this.unlock.ΔᐃΔΔΔ);
        var Ha = new e(ⲆΔⲆⵠ.ᐃΔᐃⵠΔ, ᐃΔⲆⵠΔⵠⲆⵠⵠ, function (a) {
            df.ⵠᐃⵠⵠᐃ = a;
            if (df.unlock.ⵠᐃⵠⵠᐃ[a] === 1) {
                ᐃᐃΔⵠ.set("starve_dead", "" + a, {
                    expires: 30
                });
            }
        }, this.ⵠᐃⵠⵠᐃ, this.unlock.ⵠᐃⵠⵠᐃ);
        var Ia = new e(ⲆΔⲆⵠ.ᐃΔᐃⵠΔ, ΔⲆᐃⲆᐃⲆΔⲆⲆ, function (a) {
            df.ⲆᐃᐃΔⵠ = a;
            if (df.unlock.ⲆᐃᐃΔⵠ[a] === 1) {
                ᐃᐃΔⵠ.set("starve_crate", "" + a, {
                    expires: 30
                });
            }
        }, this.ⲆᐃᐃΔⵠ, this.unlock.ⲆᐃᐃΔⵠ);
        var Ja = new e(ⲆΔⲆⵠ.ΔΔⵠᐃⲆ, ᐃᐃᐃⵠⲆΔⲆⵠΔ, function (a) {
            df.ⵠΔⵠⵠΔ = a;
            if (df.unlock.ⵠΔⵠⵠΔ[a] === 1) {
                ᐃᐃΔⵠ.set("starve_accessory", "" + a, {
                    expires: 30
                });
            }
        }, this.ⵠΔⵠⵠΔ, this.unlock.ⵠΔⵠⵠΔ);
        this.ⲆΔⵠⵠⲆⵠⲆ = function (a) {
            yf.ᐃⲆΔⲆ = Xv(j.ⵠΔ, a);
            for (var b = 0; b < j.buttons.length; b++) {
                if (j.buttons[b].info.active === ha) {
                    j.buttons[b].ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Sv);
                }
            }
        };
        this.ⵠᐃⲆⲆᐃⵠᐃ = function (a) {
            yf.ᐃⲆΔⲆ = Xv(j.ⵠΔ, a);
            for (var b = 0; j.buttons.length > b; b++) {
                var c = j.buttons[b];
                if (ha === c.info.active && c.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv)) {
                    c.info.callback();
                    return;
                }
            }
        };
        this.ᐃⲆⲆⲆᐃⵠⵠ = false;
        this.ΔᐃⵠⵠᐃΔⲆ = function (a) {
            yf.ᐃⲆΔⲆ = Xv(j.ⵠΔ, a);
            var c = false;
            for (var d = 0; j.buttons.length > d; d++) {
                if (j.buttons[d].info.active === ha) {
                    c |= j.buttons[d].ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Rv);
                }
            }
            if (c !== j.ᐃⲆⲆⲆᐃⵠⵠ) {
                j.ᐃⲆⲆⲆᐃⵠⵠ = c;
                b.style.cursor = c ? j.ⲆⲆΔⵠΔⲆⲆ : j.ΔΔⲆΔⵠⲆⲆ;
            }
        };
        this.ⲆⲆΔⲆᐃⲆΔ = function () {
            aj.addEventListener("mousedown", this.ⲆΔⵠⵠⲆⵠⲆ, false);
            aj.addEventListener("mouseup", this.ⵠᐃⲆⲆᐃⵠᐃ, Js);
            aj.addEventListener("mousemove", this.ΔᐃⵠⵠᐃΔⲆ, false);
        };
        this.ᐃΔⲆΔᐃᐃⵠ = function () {
            aj.removeEventListener("mousedown", this.ⲆΔⵠⵠⲆⵠⲆ, Ij);
            aj.removeEventListener("mouseup", this.ⵠᐃⲆⲆᐃⵠᐃ, false);
            aj.removeEventListener("mousemove", this.ΔᐃⵠⵠᐃΔⲆ, false);
        };
    }
    function Lw() {
        ⲆⵠΔᐃ.ΔΔᐃⲆⲆⲆΔ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
    }
    function Mw(b, c) {
        this.ⵠΔ = b;
        this.Ⲇ = c;
        var d = this;
        this.ΔⲆᐃⵠⵠᐃᐃ = pl;
        this.ΔⵠΔⲆΔⵠΔ = {
            id: document.getElementById("scoreboard"),
            style: document.getElementById("scoreboard").style,
            height: 0,
            translate: {
                y: 0,
                x: 0
            },
            ΔΔΔ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = this.translate.y + "px";
            },
            ⵠΔⲆΔᐃ: function () {
                this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + Ww.ⲆᐃᐃᐃⵠᐃⲆ.ΔΔᐃᐃΔⵠΔ + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + lt[335] + " : " + Ww.ᐃΔᐃ + "</div><div class=\"stats\"> " + lt[334] + " : " + Ww.ⲆᐃᐃᐃⵠᐃⲆ.ΔΔΔᐃᐃ + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + lt[333] + " : " + Ww.ⲆᐃᐃᐃⵠᐃⲆ.ⵠΔΔᐃᐃ + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + Ww.ⲆᐃᐃᐃⵠᐃⲆ.ΔⲆⲆΔΔΔΔ + " " + lt[332] + "</div></div><div id=\"shop_points\">" + lt[331] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + lt[329] + "</div><div class=\"social\" id=\"fffacebook\">" + lt[330] + "</div></div><div id=\"bbback\">" + lt[328] + "</div>";
                this.style.display = "inline-block";
                document.getElementById("tttwitter").addEventListener("mouseup", Ow, Ia);
                document.getElementById("bbback").addEventListener("mouseup", function () {
                    Xw.ΔⵠᐃⵠⲆ(df.ⲆⲆᐃᐃᐃ);
                }, false);
                document.getElementById("fffacebook").addEventListener("mouseup", Lw, zk);
                this.height = Math.floor(this.id.clientHeight / 2);
                (function () {
                    var a = new XMLHttpRequest();
                    a.open("GET", Df + "getBreadAndScore?userid=" + cx);
                    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    a.onreadystatechange = function () {
                        if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
                            var b = JSON.parse(a.responseText);
                            var c = b.b - df.ᐃᐃΔᐃΔ;
                            df.ᐃᐃΔᐃΔ = b.b;
                            df.ⵠΔΔᐃᐃ = b.s;
                            df.ⲆⵠᐃᐃⲆ = df.ⲆⵠⵠᐃᐃΔᐃ(df.ⵠΔΔᐃᐃ);
                            df.ΔΔᐃᐃᐃⵠᐃ = df.ΔΔⵠᐃᐃⲆΔ(df.ⵠΔΔᐃᐃ);
                            df.ⲆⵠᐃⲆⲆΔΔ = 0;
                            document.getElementById("breadWonInner").innerHTML = "" + c;
                        }
                    };
                    a.send();
                })();
            }
        };
        var f;
        var g = 0;
        function e() {
            d.ΔΔΔ();
            if (++g != 30) {
                aj.setTimeout(e, 33);
            } else {
                d.ΔΔΔ();
            }
        }
        this.ΔⵠᐃⵠⲆ = function (a) {
            if (Po === d.ΔⲆᐃⵠⵠᐃᐃ) {
                d.ΔⲆᐃⵠⵠᐃᐃ = Ij;
                f = a;
                i = -1;
                j();
                Af();
            }
        };
        var i = -1;
        function j() {
            d.ΔΔΔ();
            if (++i == 30) {
                d.stop();
                d.ΔⵠΔⲆΔⵠΔ.style.display = "none";
                f();
                return;
            }
            aj.setTimeout(j, 33);
        }
        this.ⵠⵠΔᐃᐃ = Ia;
        this.stop = function () {
            this.ⵠⵠΔᐃᐃ = os;
        };
        this.ⲆⲆᐃᐃᐃ = function () {
            ax();
            document.getElementById("game_body").style.backgroundColor = Gr.ᐃⲆΔᐃⵠ[Vw.time];
            d.ΔⵠΔⲆΔⵠΔ.ⵠΔⲆΔᐃ();
            df.ᐃⲆΔⲆⵠ.style.display = "inline-block";
            d.ⵠⵠΔᐃᐃ = Ya;
            d.ΔⲆᐃⵠⵠᐃᐃ = true;
            i = -1;
            g = 0;
            e();
        };
        this.ΔΔΔ = function () {
            this.ΔⵠΔⲆΔⵠΔ.translate.x = Math.floor(hq - 275);
            this.ΔⵠΔⲆΔⵠΔ.translate.y = Math.floor(iq - this.ΔⵠΔⲆΔⵠΔ.height - 28);
            df.ᐃⲆΔⲆⵠ.translate.x = this.ΔⵠΔⲆΔⵠΔ.translate.x - 350;
            df.ᐃⲆΔⲆⵠ.translate.y = this.ΔⵠΔⲆΔⵠΔ.translate.y + 0;
            df.ᐃⲆΔⲆⵠ.ΔΔΔ();
            if (g != 30 || i != -1) {
                var a = 0;
                if (g != 30) {
                    a = 1500 / (g + 1) - 50;
                }
                if (i != -1) {
                    a = -(1750 / (30 - i + 1) - 48);
                }
                this.ΔⵠΔⲆΔⵠΔ.translate.y -= a;
            }
            this.ΔⵠΔⲆΔⵠΔ.ΔΔΔ();
        };
        this.ⲆⲆΔⵠ = function () {
            _m();
            Ww.alert.ⲆⲆΔⵠ("#FFF", "#000");
        };
    }
    function Nw(b, c, d, e) {
        const f = ~(b & 6949) & b | ~(b & 6949) & 6949;
        const g = ~(c & 1348) & 1348 | ~(c & 1348) & c;
        const a = ~(d & 53330) & 53330 | ~(d & 53330) & d;
        const i = (16 << (e >> 24 & 255)) + (24 << (e >> 16 & 255)) + (0 << (e & 255)) + (8 << (e >> 8 & 255));
        const j = uk(f, g, a, i);
        Yn(f, g, a, i, f);
        return ~(j & 8357) & (j | 8357);
    }
    function Ow() {
        ⲆⵠΔᐃ.ΔΔᐃⲆⲆⲆΔ("https://twitter.com/intent/tweet?text=I%20survived%20" + Ww.ᐃΔᐃ + "%20days%20with%20" + Ww.ⲆᐃᐃᐃⵠᐃⲆ.ⵠΔΔᐃᐃ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
    }
    function Pw(c, d, e, f, i, j) {
        const a = ((c + 62036) * 22695477 + 1) % 4294967296;
        const k = (d | 16943) & ~(d & 16943);
        const m = ~(e & 58494) & e | ~(e & 58494) & 58494;
        const h = ((18197 + f) * 1664525 + 1013904223) % 4294967296;
        const l = (12345 + (57458 + j) * 1103515245) % 2147483648;
        const g = Os(a, k, m, h, (0 << (i >> 16 & 255)) + (16 << (i & 255)) + (24 << (i >> 24 & 255)) + (8 << (i >> 8 & 255)));
        const n = Os(l, a, k, m, h);
        return (24 << ((g ^ n) >> 16 & 255)) + (8 << ((g ^ n) & 255)) + (0 << ((g ^ n) >> 24 & 255)) + (16 << ((g ^ n) >> 8 & 255));
    }
    function Qw(c, g) {
        var j = this;
        this.ⵠΔ = c;
        this.Ⲇ = g;
        if (aj.navigator.userAgent.indexOf("Edge") > -1) {
            this.ΔΔⲆΔⵠⲆⲆ = "default";
            this.ⲆⲆΔⵠΔⲆⲆ = "pointer";
        } else {
            this.ΔΔⲆΔⵠⲆⲆ = "url('img/cursor0.png'), default";
            this.ⲆⲆΔⵠΔⲆⲆ = "url('img/cursor1.png'), pointer";
        }
        this.ᐃᐃΔⵠⵠⲆᐃ = 1;
        this.ᐃᐃⲆⲆⵠᐃΔ = 1;
        this.ᐃⲆⵠᐃⵠᐃⲆ = 1;
        this.ᐃⵠᐃᐃⲆΔΔ = 1;
        this.ⲆⲆᐃᐃᐃⵠⵠⵠΔ = {
            id: document.getElementById("team_box"),
            style: document.getElementById("team_box").style,
            ΔΔΔ: function () {
                this.style.left = Math.floor(hq - 125) + "px";
                this.style.top = "110px";
            }
        };
        this.ΔⲆⵠⵠ = {
            ⲆⲆⵠⵠⵠⵠⵠ: Yv(60, 60, 0, ΔⲆ[782]),
            ⵠΔᐃⲆΔⲆᐃ: Yv(60, 60, 0, ΔⲆ[783])
        };
        this.sign = {
            open: false,
            ⵠⵠΔΔⲆΔΔᐃᐃ: 0,
            ⵠᐃᐃⲆⲆⲆⲆ: document.getElementById("sign_object"),
            ⲆᐃⲆΔᐃⵠᐃ: 0,
            id: document.getElementById("sign_window"),
            style: document.getElementById("sign_window").style,
            button: Yv(60, 60, 0, ΔⲆ[803]),
            ᐃᐃⵠⵠⵠΔⵠ: function () {
                var a = Math.floor(Math.floor((3 + Ww.ΔΔⵠᐃ.ⲆⵠⲆᐃΔ.length) / 4) * (10 + ΔⲆ[316][0].width) + 35);
                this.button.info.translate.x = a;
                this.button.info.translate.y = 22;
            },
            ΔΔΔ: function () {
                this.style.left = Math.floor(hq - 150) + "px";
                this.style.top = Math.floor(iq - 115) + "px";
            },
            ΔⵠᐃⵠⲆ: function () {
                Yw.sign.style.display = "none";
                Yw.sign.open = f;
            },
            select: function () {
                Yw.sign.open = !Yw.sign.open;
                if (Yw.sign.open) {
                    Yw.sign.style.display = "inline-block";
                } else {
                    Yw.sign.style.display = "none";
                }
            },
            ok: function () {
                Δⵠᐃⵠ.ᐃⲆΔΔΔⲆⲆⲆⵠ(Ww.sign.ⵠⲆⵠⵠⲆ, Yw.sign.ⲆᐃⲆΔᐃⵠᐃ);
                Yw.sign.select();
            },
            up: function () {
                Yw.sign.ⲆᐃⲆΔᐃⵠᐃ = Yw.sign.ⲆᐃⲆΔᐃⵠᐃ === 0 ? 3 : Yw.sign.ⲆᐃⲆΔᐃⵠᐃ - 1;
                Yw.sign.ⵠᐃᐃⲆⲆⲆⲆ.src = "./img/sign" + Yw.sign.ⲆᐃⲆΔᐃⵠᐃ + ".png";
            },
            down: function () {
                Yw.sign.ⲆᐃⲆΔᐃⵠᐃ = (Yw.sign.ⲆᐃⲆΔᐃⵠᐃ + 1) % 4;
                Yw.sign.ⵠᐃᐃⲆⲆⲆⲆ.src = "./img/sign" + Yw.sign.ⲆᐃⲆΔᐃⵠᐃ + ".png";
            }
        };
        document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, Ij);
        document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, ps);
        document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, false);
        document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, false);
        this.ⵠΔᐃⲆⲆ = {
            open: false,
            id: document.getElementById("shop_market"),
            style: document.getElementById("shop_market").style,
            items: [{
                id: 0,
                name: "wood",
                ᐃⵠⲆⵠⵠ: 1,
                b: 1,
                a: 3,
                ΔⵠⲆΔⵠ: 316
            }, {
                id: 1,
                name: "stone",
                ᐃⵠⲆⵠⵠ: 1,
                b: 1,
                a: 4,
                ΔⵠⲆΔⵠ: 315
            }, {
                id: 2,
                name: "gold",
                ᐃⵠⲆⵠⵠ: 1,
                b: 1,
                a: 6,
                ΔⵠⲆΔⵠ: 297
            }, {
                id: 3,
                name: "diamond",
                ᐃⵠⲆⵠⵠ: 4,
                b: 4,
                a: 1,
                ΔⵠⲆΔⵠ: 298
            }, {
                id: 4,
                name: "amethyst",
                ᐃⵠⲆⵠⵠ: 8,
                b: 8,
                a: 1,
                ΔⵠⲆΔⵠ: 418
            }, {
                id: 5,
                name: "reidite",
                ᐃⵠⲆⵠⵠ: 16,
                b: 16,
                a: 1,
                ΔⵠⲆΔⵠ: 938
            }, {
                id: 6,
                name: "pumpkin_seed",
                ᐃⵠⲆⵠⵠ: 10,
                b: 10,
                a: 1,
                ΔⵠⲆΔⵠ: 808
            }, {
                id: 7,
                name: "carrot_seed",
                ᐃⵠⲆⵠⵠ: 16,
                b: 16,
                a: 1,
                ΔⵠⲆΔⵠ: 949
            }, {
                id: 8,
                name: "tomato_seed",
                ᐃⵠⲆⵠⵠ: 20,
                b: 20,
                a: 1,
                ΔⵠⲆΔⵠ: 959
            }, {
                id: 9,
                name: "thornbush_seed",
                ᐃⵠⲆⵠⵠ: 30,
                b: 30,
                a: 1,
                ΔⵠⲆΔⵠ: 845
            }, {
                id: 10,
                name: "garlic_seed",
                ᐃⵠⲆⵠⵠ: 40,
                b: 40,
                a: 1,
                ΔⵠⲆΔⵠ: 834
            }, {
                id: 11,
                name: "watermelon_seed",
                ᐃⵠⲆⵠⵠ: 60,
                b: 60,
                a: 1,
                ΔⵠⲆΔⵠ: 966
            }],
            button: Yv(60, 60, 0, ΔⲆ[795]),
            ΔΔΔ: function () {
                this.style.left = Math.floor(hq - 450) + "px";
                this.style.top = Math.floor(iq - 270) + "px";
            },
            select: function () {
                Yw.ⵠΔᐃⲆⲆ.open = !Yw.ⵠΔᐃⲆⲆ.open;
                if (Yw.ⵠΔᐃⲆⲆ.open) {
                    Yw.ⵠΔᐃⲆⲆ.style.display = "inline-block";
                } else {
                    Yw.ⵠΔᐃⲆⲆ.style.display = "none";
                }
            },
            ΔⵠᐃⵠⲆ: function () {
                Yw.ⵠΔᐃⲆⲆ.style.display = "none";
                Yw.ⵠΔᐃⲆⲆ.open = false;
            },
            ⲆⲆᐃⵠΔΔΔ: function () {
                Δⵠᐃⵠ.ⲆΔᐃᐃᐃⲆⲆᐃⲆ(this.ⲆⲆⲆⲆⲆⵠΔ);
            },
            ΔᐃᐃⲆⲆ: function () {
                this.id;
                if (this.ⲆⲆⲆⲆⲆⵠΔ.a === 1) {
                    var a = Math.floor(Number(this.value) * this.ⲆⲆⲆⲆⲆⵠΔ.b);
                    this.ⲆⲆⲆⲆⲆⵠΔ.ᐃⵠⲆⵠⵠ = a;
                    document.getElementById(this.ⲆⲆⲆⲆⲆⵠΔ.name + "_trad_number").innerHTML = a + "";
                } else {
                    a = Math.floor(Number(this.value) / this.ⲆⲆⲆⲆⲆⵠΔ.a);
                    this.ⲆⲆⲆⲆⲆⵠΔ.ᐃⵠⲆⵠⵠ = a;
                    document.getElementById(this.ⲆⲆⲆⲆⲆⵠΔ.name + "_trad_number").innerHTML = a + "";
                }
            }
        };
        document.getElementById("quit_market").addEventListener("mouseup", this.ⵠΔᐃⲆⲆ.ΔⵠᐃⵠⲆ, false);
        var e = [["mouseup", this.ⵠΔᐃⲆⲆ.ⲆⲆᐃⵠΔΔΔ, "buy_"], ["click", this.ⵠΔᐃⲆⲆ.ΔᐃᐃⲆⲆ, ""], ["change", this.ⵠΔᐃⲆⲆ.ΔᐃᐃⲆⲆ, ""], ["keypress", this.ⵠΔᐃⲆⲆ.keypress, ""]];
        for (var i = 0; i < this.ⵠΔᐃⲆⲆ.items.length; i++) {
            var k = this.ⵠΔᐃⲆⲆ.items[i];
            document.getElementById(k.name + "_market").src = ΔⲆ[k.ΔⵠⲆΔⵠ][0].ᐃⲆᐃΔᐃ === undefined ? ΔⲆ[k.ΔⵠⲆΔⵠ][0].src : ΔⲆ[k.ΔⵠⲆΔⵠ][0].ᐃⲆᐃΔᐃ;
            if (k.a === 1) {
                document.getElementById(k.name + "_trad_number").innerHTML = k.b;
                document.getElementById(k.name + "_number").value = 1;
                document.getElementById(k.name + "_number").step = 1;
                document.getElementById(k.name + "_number").min = 1;
                document.getElementById(k.name + "_number").max = Math.floor(255 / k.b);
            } else {
                document.getElementById(k.name + "_trad_number").innerHTML = 1;
                document.getElementById(k.name + "_number").value = k.a;
                document.getElementById(k.name + "_number").step = k.a;
                document.getElementById(k.name + "_number").min = k.a;
            }
            document.getElementById("buy_" + k.name + "_number").ⲆⲆⲆⲆⲆⵠΔ = k;
            document.getElementById(k.name + "_number").ⲆⲆⲆⲆⲆⵠΔ = k;
            for (var m = 0; e.length > m; m++) {
                document.getElementById(e[m][2] + k.name + "_number").addEventListener(e[m][0], e[m][1], Js);
            }
        }
        $("[type='number']").keypress(function (a) {
            a.preventDefault();
        });
        this.options = {
            open: false,
            id: document.getElementById("option_in_game"),
            style: document.getElementById("option_in_game").style,
            ⵠⵠⲆⲆⵠ: document.getElementById("agree_ing").style,
            ⲆⲆΔⲆⵠⲆΔ: document.getElementById("cancel_agree_ing").style,
            ᐃᐃᐃΔΔᐃΔ: document.getElementById("quest_agree_ing").style,
            ᐃΔⲆⲆΔⲆⲆ: document.getElementById("spectator_agree_ing").style,
            ᐃⵠⲆⲆⵠΔΔ: document.getElementById("auto_feed_agree_ing").style,
            ΔΔΔⵠⵠⲆΔ: document.getElementById("info_agree_ing").style,
            ΔΔⵠⲆⲆᐃΔ: document.getElementById("pixelated_agree_ing").style,
            button: Yv(60, 60, 0, ΔⲆ[727]),
            ⵠⵠⲆΔΔⵠᐃⲆⲆ: function () {
                Yw.options.open = !Yw.options.open;
                if (Yw.options.open) {
                    Yw.options.style.display = "inline-block";
                } else {
                    Yw.options.style.display = "none";
                }
            },
            ⵠᐃΔΔⵠΔⲆⲆⵠ: function () {
                df.ΔᐃΔⵠΔᐃᐃ();
            },
            ⲆⵠⵠᐃΔⲆᐃⵠⲆ: function () {
                df.ⵠᐃᐃⵠᐃⵠⲆ();
            },
            high: function () {
                df.ⲆᐃⵠᐃΔⵠᐃΔⵠ();
            },
            low: function () {
                df.ⵠⵠⵠᐃᐃᐃⵠⵠΔ();
            },
            ᐃⵠⲆᐃⵠ: function () {
                Yw.ⵠΔΔᐃ.ᐃⵠⲆᐃⵠ();
            },
            ⵠⵠⲆΔⲆⲆⵠⲆⵠ: function () {
                Yw.ⲆⲆᐃⲆⲆ.ᐃⵠⲆᐃⵠ();
            },
            ⲆΔⵠᐃΔΔᐃᐃᐃ: function () {
                Yw.Ⲇᐃⵠⵠ.ᐃⵠⲆᐃⵠ();
            },
            ᐃᐃⲆⵠⵠⲆⵠⵠⵠ: function () {
                Ww.ⲆⵠᐃⵠⲆ.ⵠⲆⲆΔⲆΔⲆ();
            },
            ΔΔΔᐃⵠᐃΔⵠⵠ: function () {
                Ww.ΔᐃΔΔᐃ.ⵠⲆⲆΔⲆΔⲆ();
            },
            ΔⵠᐃⵠⲆ: function () {
                Yw.options.style.display = "none";
                Yw.options.open = false;
            },
            ΔΔΔ: function () {
                this.style.left = Math.floor(hq - 235) + "px";
                this.style.top = Math.floor(iq - 170) + "px";
            }
        };
        document.getElementById("azerty_ing").addEventListener("mouseup", this.options.ⵠᐃΔΔⵠΔⲆⲆⵠ, false);
        document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.ⲆⵠⵠᐃΔⲆᐃⵠⲆ, zk);
        document.getElementById("low_ing").addEventListener("mouseup", this.options.low, Yh);
        document.getElementById("high_ing").addEventListener("mouseup", this.options.high, zk);
        document.getElementById("quit_opt").addEventListener("mouseup", this.options.ΔⵠᐃⵠⲆ, fr);
        document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.ᐃⵠⲆᐃⵠ, false);
        document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.ⲆΔⵠᐃΔΔᐃᐃᐃ, Ia);
        document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.ⵠⵠⲆΔⲆⲆⵠⲆⵠ, false);
        document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.ᐃᐃⲆⵠⵠⲆⵠⵠⵠ, f);
        document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.ΔΔΔᐃⵠᐃΔⵠⵠ, dq);
        this.ⲆⲆᐃⲆⲆ = {
            open: false,
            ᐃⵠⵠⲆΔ: ᐃᐃΔⵠ.get("starve_cancel") ? ᐃᐃΔⵠ.get("starve_cancel") === "0" ? 0 : 1 : 1,
            id: document.getElementById("cancel_sure_delete"),
            style: document.getElementById("cancel_sure_delete").style,
            ⵠⵠⲆⲆⵠ: document.getElementById("cancel_agree").style,
            button: 0,
            ᐃᐃ: 0,
            ΔⵠᐃⵠⲆ: function () {
                Yw.ⲆⲆᐃⲆⲆ.style.display = "none";
                Yw.ⲆⲆᐃⲆⲆ.open = false;
            },
            ΔⲆⲆⵠᐃⲆⲆ: function () {
                if (Ww.ΔΔⵠᐃ.ᐃΔⲆⲆⲆ) {
                    Δⵠᐃⵠ.ⲆⵠⲆⵠΔⵠᐃᐃᐃ();
                }
                Yw.ⲆⲆᐃⲆⲆ.ΔⵠᐃⵠⲆ();
            },
            ᐃⵠⲆᐃⵠ: function () {
                if (Yw.ⲆⲆᐃⲆⲆ.ᐃⵠⵠⲆΔ) {
                    ᐃᐃΔⵠ.set("starve_cancel", "0");
                    Yw.ⲆⲆᐃⲆⲆ.ⵠⵠⲆⲆⵠ.display = "inline-block";
                    Yw.options.ⲆⲆΔⲆⵠⲆΔ.display = "none";
                } else {
                    ᐃᐃΔⵠ.set("starve_cancel", "1");
                    Yw.ⲆⲆᐃⲆⲆ.ⵠⵠⲆⲆⵠ.display = "none";
                    Yw.options.ⲆⲆΔⲆⵠⲆΔ.display = "inline-block";
                }
                Yw.ⲆⲆᐃⲆⲆ.ᐃⵠⵠⲆΔ = !Yw.ⲆⲆᐃⲆⲆ.ᐃⵠⵠⲆΔ;
            },
            ΔⵠⲆⲆᐃᐃⵠ: function () {
                if (this.ᐃⵠⵠⲆΔ) {
                    this.style.display = "inline-block";
                    this.open = oq;
                } else {
                    this.ΔⲆⲆⵠᐃⲆⲆ();
                }
            },
            ΔΔΔ: function () {
                this.style.left = Math.floor(hq - 235) + "px";
                this.style.top = Math.floor(iq - 130) + "px";
            }
        };
        this.ⲆⲆᐃⲆⲆ.id.oncontextmenu = function () {
            return false;
        };
        this.ⲆⲆᐃⲆⲆ.ⵠⵠⲆⲆⵠ.display = "none";
        if (this.ⲆⲆᐃⲆⲆ.ᐃⵠⵠⲆΔ) {
            this.options.ⲆⲆΔⲆⵠⲆΔ.display = "inline-block";
        } else {
            this.options.ⲆⲆΔⲆⵠⲆΔ.display = "none";
        }
        document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.ⲆⲆᐃⲆⲆ.ΔⲆⲆⵠᐃⲆⲆ, Dk);
        document.getElementById("cancel_no_delete").addEventListener("mouseup", this.ⲆⲆᐃⲆⲆ.ΔⵠᐃⵠⲆ, false);
        document.getElementById("cancel_case_agree").addEventListener("mouseup", this.ⲆⲆᐃⲆⲆ.ᐃⵠⲆᐃⵠ, Kn);
        document.addEventListener("cancel_sure_delete", function (a) {
            a.preventDefault();
        }, false);
        this.ⵠⲆΔⲆᐃⵠΔ = {
            ᐃⵠⵠⲆΔ: ᐃᐃΔⵠ.get("starve_aliasing") ? ᐃᐃΔⵠ.get("starve_aliasing") === "0" ? 0 : 1 : 1,
            ⵠⲆΔⲆΔᐃᐃ: function (a) {
                document.getElementById("game_canvas").style.imageRendering = a ? "pixelated" : "auto";
            },
            ᐃⵠⲆᐃⵠ: function () {
                if (Yw.ⵠⲆΔⲆᐃⵠΔ.ᐃⵠⵠⲆΔ === 0) {
                    ᐃᐃΔⵠ.set("starve_aliasing", "1");
                    Yw.ⵠⲆΔⲆᐃⵠΔ.ⵠⲆΔⲆΔᐃᐃ(1);
                    Yw.options.ΔΔⵠⲆⲆᐃΔ.display = "inline-block";
                } else {
                    ᐃᐃΔⵠ.set("starve_aliasing", "0");
                    Yw.ⵠⲆΔⲆᐃⵠΔ.ⵠⲆΔⲆΔᐃᐃ(0);
                    Yw.options.ΔΔⵠⲆⲆᐃΔ.display = "none";
                }
                Yw.ⵠⲆΔⲆᐃⵠΔ.ᐃⵠⵠⲆΔ = (Yw.ⵠⲆΔⲆᐃⵠΔ.ᐃⵠⵠⲆΔ + 1) % 2;
            }
        };
        if (this.ⵠⲆΔⲆᐃⵠΔ.ᐃⵠⵠⲆΔ === 1) {
            this.options.ΔΔⵠⲆⲆᐃΔ.display = "inline-block";
        } else {
            this.ⵠⲆΔⲆᐃⵠΔ.ⵠⲆΔⲆΔᐃᐃ(0);
            this.options.ΔΔⵠⲆⲆᐃΔ.display = "none";
        }
        document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.ⵠⲆΔⲆᐃⵠΔ.ᐃⵠⲆᐃⵠ, Lo);
        this.ⵠⲆᐃΔⲆ = {
            ᐃⵠⵠⲆΔ: ᐃᐃΔⵠ.get("starve_info_box") ? ᐃᐃΔⵠ.get("starve_info_box") === "0" ? 0 : 1 : 1,
            display: 0,
            x: 0,
            y: 0,
            id: 0,
            ΔΔⵠᐃ: 0,
            ᐃⵠⲆᐃⵠ: function () {
                if (Yw.ⵠⲆᐃΔⲆ.ᐃⵠⵠⲆΔ === 0) {
                    ᐃᐃΔⵠ.set("starve_info_box", "1");
                    Yw.options.ΔΔΔⵠⵠⲆΔ.display = "inline-block";
                } else {
                    ᐃᐃΔⵠ.set("starve_info_box", "0");
                    Yw.options.ΔΔΔⵠⵠⲆΔ.display = "none";
                }
                Yw.ⵠⲆᐃΔⲆ.ᐃⵠⵠⲆΔ = (Yw.ⵠⲆᐃΔⲆ.ᐃⵠⵠⲆΔ + 1) % 2;
            },
            ᐃΔᐃⲆ: function (a, b, c) {
                if (a && this.ᐃⵠⵠⲆΔ) {
                    this.display = 1;
                    this.id = c === 0 ? b.id : Ls[b.id].ⵠΔⲆΔ;
                    this.x = b.info.translate.x + 80;
                    this.y = b.info.translate.y;
                    this.ΔΔⵠᐃ = c;
                }
                return a;
            }
        };
        if (this.ⵠⲆᐃΔⲆ.ᐃⵠⵠⲆΔ === 1) {
            this.options.ΔΔΔⵠⵠⲆΔ.display = "inline-block";
        } else {
            this.options.ΔΔΔⵠⵠⲆΔ.display = "none";
        }
        document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.ⵠⲆᐃΔⲆ.ᐃⵠⲆᐃⵠ, os);
        if (ᐃᐃΔⵠ.get("starve_scale")) {
            ko = Number(ᐃᐃΔⵠ.get("starve_scale"));
            document.getElementById("input_ratio").value = ko;
            ko *= Oq / Pq;
            Rq();
        }
        this.ᐃⲆᐃΔⲆⵠᐃ = function () {
            ᐃᐃΔⵠ.set("starve_scale", "" + document.getElementById("input_ratio").value);
            ko = Oq / Pq * document.getElementById("input_ratio").value;
            Rq();
        };
        document.getElementById("input_ratio").addEventListener("input", this.ᐃⲆᐃΔⲆⵠᐃ, false);
        this.ⵠΔΔᐃ = {
            open: false,
            ᐃⵠⵠⲆΔ: ᐃᐃΔⵠ.get("starve_safe") ? ᐃᐃΔⵠ.get("starve_safe") === "0" ? 0 : 1 : 1,
            id: document.getElementById("sure_delete"),
            style: document.getElementById("sure_delete").style,
            ⵠⵠⲆⲆⵠ: document.getElementById("agree").style,
            button: 0,
            ᐃᐃ: 0,
            ΔⵠᐃⵠⲆ: function () {
                Yw.ⵠΔΔᐃ.style.display = "none";
                Yw.ⵠΔΔᐃ.open = Js;
            },
            all: function () {
                if (!Ww.ᐃΔᐃⲆⲆ.wait) {
                    if (Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0 && Ww.ΔΔⵠᐃ.id < 0 && !Ww.ⲆᐃΔᐃᐃ.enabled) {
                        Δⵠᐃⵠ.ΔᐃᐃⲆⲆᐃΔⵠⲆ(Yw.ⵠΔΔᐃ.button);
                    }
                    Yw.ⵠΔΔᐃ.ΔⵠᐃⵠⲆ();
                }
            },
            ᐃᐃᐃᐃ: function () {
                if (Ww.ΔΔⵠᐃ.ⵠΔᐃᐃⵠ && !Ww.ᐃΔᐃⲆⲆ.wait) {
                    if (Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0 && Ww.ΔΔⵠᐃ.id < 0 && !Ww.ⲆᐃΔᐃᐃ.enabled) {
                        Δⵠᐃⵠ.ⵠⲆᐃⲆⵠⲆⲆᐃⵠ(Yw.ⵠΔΔᐃ.button);
                    }
                    Yw.ⵠΔΔᐃ.ΔⵠᐃⵠⲆ();
                }
            },
            ΔᐃⵠⵠΔᐃⵠⵠᐃ: function () {
                if (!Ww.ᐃΔᐃⲆⲆ.wait) {
                    if (Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0 && Ww.ΔΔⵠᐃ.id < 0 && !Ww.ⲆᐃΔᐃᐃ.enabled) {
                        Δⵠᐃⵠ.ΔᐃⵠᐃᐃⲆΔᐃΔ(Yw.ⵠΔΔᐃ.button);
                    }
                    Yw.ⵠΔΔᐃ.ΔⵠᐃⵠⲆ();
                }
            },
            ᐃⵠⲆᐃⵠ: function () {
                if (Yw.ⵠΔΔᐃ.ᐃⵠⵠⲆΔ) {
                    ᐃᐃΔⵠ.set("starve_safe", "0");
                    Yw.ⵠΔΔᐃ.ⵠⵠⲆⲆⵠ.display = "inline-block";
                    Yw.options.ⵠⵠⲆⲆⵠ.display = "none";
                } else {
                    ᐃᐃΔⵠ.set("starve_safe", "1");
                    Yw.ⵠΔΔᐃ.ⵠⵠⲆⲆⵠ.display = "none";
                    Yw.options.ⵠⵠⲆⲆⵠ.display = "inline-block";
                }
                Yw.ⵠΔΔᐃ.ᐃⵠⵠⲆΔ = !Yw.ⵠΔΔᐃ.ᐃⵠⵠⲆΔ;
            },
            ΔⵠⲆⲆᐃᐃⵠ: function (a) {
                this.button = a;
                document.getElementById("item_to_del").src = ΔⲆ[Pr[a].ᐃΔ][0].ᐃⲆᐃΔᐃ === Bs ? ΔⲆ[Pr[a].ᐃΔ][0].src : ΔⲆ[Pr[a].ᐃΔ][0].ᐃⲆᐃΔᐃ;
                if (Pr[a].ᐃᐃᐃᐃ && !Ww.ⵠⵠΔⲆⲆ && Ww.ΔΔⵠᐃ.ⵠΔᐃᐃⵠ) {
                    document.getElementById("recycle_delete").style.display = "inline-block";
                } else {
                    document.getElementById("recycle_delete").style.display = "none";
                }
                if (this.ᐃⵠⵠⲆΔ) {
                    this.style.display = "inline-block";
                    this.open = true;
                } else {
                    this.all();
                }
            },
            ΔΔΔ: function () {
                this.style.left = Math.floor(hq - 235) + "px";
                this.style.top = Math.floor(iq - 175) + "px";
            }
        };
        this.ⵠΔΔᐃ.ⵠⵠⲆⲆⵠ.display = "none";
        if (this.ⵠΔΔᐃ.ᐃⵠⵠⲆΔ) {
            this.options.ⵠⵠⲆⲆⵠ.display = "inline-block";
        } else {
            this.options.ⵠⵠⲆⲆⵠ.display = "none";
        }
        document.getElementById("one_delete").addEventListener("mouseup", this.ⵠΔΔᐃ.ΔᐃⵠⵠΔᐃⵠⵠᐃ, false);
        document.getElementById("yes_delete").addEventListener("mouseup", this.ⵠΔΔᐃ.all, false);
        document.getElementById("recycle_delete").addEventListener("mouseup", this.ⵠΔΔᐃ.ᐃᐃᐃᐃ, false);
        document.getElementById("no_delete").addEventListener("mouseup", this.ⵠΔΔᐃ.ΔⵠᐃⵠⲆ, Ij);
        document.getElementById("case_agree").addEventListener("mouseup", this.ⵠΔΔᐃ.ᐃⵠⲆᐃⵠ, false);
        this.ⲆⵠᐃΔΔ = {
            open: false,
            ⵠⲆΔⲆΔ: -1,
            button: Yv(60, 60, 0, ΔⲆ[592]),
            id: document.getElementById("shop_starterkit"),
            style: document.getElementById("shop_starterkit").style,
            ΔΔΔ: function () {
                this.style.left = Math.floor(hq - 300) + "px";
                this.style.top = Math.floor(iq - 215) + "px";
            },
            ΔⵠᐃⵠⲆ: function () {
                Yw.ⲆⵠᐃΔΔ.open = false;
                Yw.ⲆⵠᐃΔΔ.style.display = "none";
            },
            select: function () {
                Yw.ⲆⵠᐃΔΔ.open = !Yw.ⲆⵠᐃΔΔ.open;
                if (Yw.ⲆⵠᐃΔΔ.open) {
                    Yw.ⲆⵠᐃΔΔ.style.display = "inline-block";
                } else {
                    Yw.ⲆⵠᐃΔΔ.style.display = "none";
                }
            },
            ⲆⲆᐃⵠΔΔΔ: function () {
                if (Yw.ⲆⵠᐃΔΔ.ⵠⲆΔⲆΔ >= 0) {
                    Δⵠᐃⵠ.ⲆⵠᐃⵠᐃⵠⲆⵠᐃ(Yw.ⲆⵠᐃΔΔ.ⵠⲆΔⲆΔ);
                    Yw.ⲆⵠᐃΔΔ.ΔⵠᐃⵠⲆ();
                    if (ga) {
                        ga("send", "event", "Game", "kit", "" + Yw.ⲆⵠᐃΔΔ.ⵠⲆΔⲆΔ);
                    }
                }
            },
            ⵠΔⲆΔᐃ: function () {
                var a = Ww.ⲆⵠᐃΔΔ.value;
                document.getElementById("points_bank").innerHTML = ⲆⵠΔᐃ.ᐃⲆΔⲆΔᐃⵠ(a) + " points";
                for (var b = 0; b < iw.length; b++) {
                    if (iw[b].ⲆⲆΔⲆΔ > a) {
                        document.getElementById("starter" + (b + 1)).style.opacity = "0.4";
                    } else {
                        document.getElementById("starter" + (b + 1)).style.opacity = "1";
                    }
                }
                for (b = 1; b < 13; b++) {
                    document.getElementById("inv_shop" + b).src = "./img/empty-shop.png";
                    document.getElementById("amount_shop" + b).innerHTML = "";
                }
                document.getElementById("buy_kit").style.opacity = "0.2";
            },
            ΔᐃⲆᐃⵠᐃⵠⵠⵠ: function () {
                if (this.id.length > 8) {
                    var a = Number(this.id.charAt(7) + this.id.charAt(8));
                } else {
                    a = Number(this.id.charAt(7));
                }
                var b = iw[a - 1];
                if (Ww.ⲆⵠᐃΔΔ.value >= b.ⲆⲆΔⲆΔ) {
                    Yw.ⲆⵠᐃΔΔ.ⵠⲆΔⲆΔ = a;
                    document.getElementById("buy_kit").style.opacity = "1";
                } else {
                    Yw.ⲆⵠᐃΔΔ.ⵠⲆΔⲆΔ = -1;
                    document.getElementById("buy_kit").style.opacity = "0.2";
                }
                b = b.items;
                for (var c = 1, d = 1; c < b.length + 1; c++) {
                    if (b[c - 1][1] !== 29) {
                        document.getElementById("inv_shop" + d).style.display = "inline-block";
                        document.getElementById("inv_shop" + d).src = ΔⲆ[Pr[b[c - 1][1]].ᐃΔ][0].ᐃⲆᐃΔᐃ === Cg ? ΔⲆ[Pr[b[c - 1][1]].ᐃΔ][0].src : ΔⲆ[Pr[b[c - 1][1]].ᐃΔ][0].ᐃⲆᐃΔᐃ;
                        document.getElementById("amount_shop" + d).innerHTML = "" + b[c - 1][0];
                        d++;
                    }
                }
                for (; d < 13; d++) {
                    document.getElementById("inv_shop" + d).src = "./img/empty-shop.png";
                    document.getElementById("amount_shop" + d).innerHTML = "";
                }
            }
        };
        document.getElementById("quit3").addEventListener("mouseup", this.ⲆⵠᐃΔΔ.ΔⵠᐃⵠⲆ, as);
        document.getElementById("buy_kit").addEventListener("mouseup", this.ⲆⵠᐃΔΔ.ⲆⲆᐃⵠΔΔΔ, false);
        for (m = 1; m < 11; m++) {
            document.getElementById("starter" + m).addEventListener("mouseup", this.ⲆⵠᐃΔΔ.ΔᐃⲆᐃⵠᐃⵠⵠⵠ, Ig);
        }
        this.Ⲇᐃⵠⵠ = {
            open: Es,
            ᐃⵠⵠⲆΔ: ᐃᐃΔⵠ.get("starve_quests") && ᐃᐃΔⵠ.get("starve_quests") === "1" ? 1 : 0,
            button: Yv(60, 60, 0, ΔⲆ[755]),
            id: document.getElementById("chronoquest"),
            style: document.getElementById("chronoquest").style,
            ΔΔΔ: function () {
                this.style.left = Math.floor(hq - 420) + "px";
                this.style.top = Math.floor(iq - 270) + "px";
            },
            ΔⵠᐃⵠⲆ: function () {
                Yw.Ⲇᐃⵠⵠ.style.display = "none";
                Yw.Ⲇᐃⵠⵠ.open = f;
            },
            select: function () {
                Yw.Ⲇᐃⵠⵠ.open = !Yw.Ⲇᐃⵠⵠ.open;
                if (Yw.Ⲇᐃⵠⵠ.open) {
                    Yw.Ⲇᐃⵠⵠ.style.display = "inline-block";
                } else {
                    Yw.Ⲇᐃⵠⵠ.style.display = "none";
                }
            },
            list: [],
            reset: function () {
                for (var a = 0; a < ow.length; a++) {
                    this.list[a] = 1;
                    document.getElementById("timeremain_" + a).style.display = "inline-block";
                    document.getElementById("time_finished_" + a).style.display = "none";
                    document.getElementById("claim_reward_" + a).style.display = "none";
                }
            },
            ΔⵠΔΔᐃΔᐃ: 0,
            ᐃΔᐃⲆⵠᐃΔ: 0,
            ⵠⵠⲆΔⲆⵠΔΔⵠ: function () {
                if (Yw.Ⲇᐃⵠⵠ.open) {
                    var a = new Date().getTime();
                    if (a - this.ΔⵠΔΔᐃΔᐃ >= 1000) {
                        this.ΔⵠΔΔᐃΔᐃ = a;
                        for (var b = 0; b < ow.length; b++) {
                            if (Yw.Ⲇᐃⵠⵠ.list[b]) {
                                var c = ow[b].time - (a - cf.ⵠΔΔⲆᐃ.ⵠΔⲆΔᐃ + Yw.Ⲇᐃⵠⵠ.ᐃΔᐃⲆⵠᐃΔ);
                                document.getElementById("timeremain_" + b).innerHTML = c > 960000 ? Math.floor(c / 480000) + " days" : c > 480000 ? Math.floor(c / 480000) + " day" : c > 60000 ? Math.floor(c / 60000) + " min" : Math.floor(c / 1000) + " sec";
                            }
                        }
                    }
                }
            },
            restore: function (a) {
                for (var b = 0; b < a.length; b++) {
                    if (a[b] != 1) {
                        Yw.Ⲇᐃⵠⵠ.ᐃⲆΔⵠⲆΔᐃ(b, a[b]);
                    }
                }
            },
            ᐃⲆΔⵠⲆΔᐃ: function (a, b) {
                if (b === 3 && (a === 11 || a === 12)) {
                    Ww.ᐃΔⵠΔ.ΔᐃᐃⵠⵠⲆⵠ(0, 1);
                    Yw.ⵠᐃᐃᐃᐃⲆⵠ();
                }
                document.getElementById("timeremain_" + a).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
                if (b > 1) {
                    document.getElementById("time_finished_" + a).innerHTML = "SUCCEED";
                    document.getElementById("timeremain_" + a).style.display = "none";
                } else if (b === 0) {
                    document.getElementById("time_finished_" + a).innerHTML = "FAILED";
                    document.getElementById("timeremain_" + a).style.display = "none";
                }
                document.getElementById("claim_reward_" + a).style.display = b === 2 ? "inline-block" : "none";
                document.getElementById("time_finished_" + a).style.display = "inline";
                Yw.Ⲇᐃⵠⵠ.list[a] = 0;
            },
            modify: function (a, b) {
                Yw.Ⲇᐃⵠⵠ.ᐃⲆΔⵠⲆΔᐃ(a, b);
                if (Yw.Ⲇᐃⵠⵠ.ᐃⵠⵠⲆΔ) {
                    Yw.Ⲇᐃⵠⵠ.open = Uq;
                    Yw.Ⲇᐃⵠⵠ.style.display = "inline-block";
                }
            },
            ᐃⵠⲆᐃⵠ: function () {
                if (Yw.Ⲇᐃⵠⵠ.ᐃⵠⵠⲆΔ) {
                    ᐃᐃΔⵠ.set("starve_quests", "0");
                    Yw.options.ᐃᐃᐃΔΔᐃΔ.display = "none";
                } else {
                    ᐃᐃΔⵠ.set("starve_quests", "1");
                    Yw.options.ᐃᐃᐃΔΔᐃΔ.display = "inline-block";
                }
                Yw.Ⲇᐃⵠⵠ.ᐃⵠⵠⲆΔ = !Yw.Ⲇᐃⵠⵠ.ᐃⵠⵠⲆΔ;
            },
            ⲆⲆᐃⵠⲆᐃⵠⵠⵠ: function () {
                var a = Number(this.id.charAt(13));
                var b = Number(this.id.charAt(14));
                if (this.id.charAt(14) !== "" && b >= 0 && b <= 9) {
                    a = a * 10 + b;
                }
                Δⵠᐃⵠ.ⲆΔⵠᐃΔΔⲆⲆⲆ(a);
            }
        };
        if (this.Ⲇᐃⵠⵠ.ᐃⵠⵠⲆΔ) {
            this.options.ᐃᐃᐃΔΔᐃΔ.display = "inline-block";
        } else {
            this.options.ᐃᐃᐃΔΔᐃΔ.display = "none";
        }
        document.getElementById("quit_chronoquest").addEventListener("mouseup", this.Ⲇᐃⵠⵠ.ΔⵠᐃⵠⲆ, as);
        for (m = 0; ow.length > m; m++) {
            document.getElementById("claim_reward_" + m).addEventListener("mouseup", this.Ⲇᐃⵠⵠ.ⲆⲆᐃⵠⲆᐃⵠⵠⵠ, zk);
        }
        this.ΔᐃᐃΔ = {
            open: Eh,
            button: Yv(60, 60, 0, ΔⲆ[708]),
            list: {
                id: document.getElementById("recipe_craft"),
                style: document.getElementById("recipe_craft").style,
                ᐃⵠᐃⵠⵠⵠᐃ: [],
                ⵠᐃᐃⵠᐃᐃⲆ: 0,
                ΔΔΔ: function () {
                    this.style.left = Math.floor(hq - 335) + "px";
                    this.style.top = Math.floor(iq - 215) + "px";
                },
                ΔⵠᐃⵠⲆ: function () {
                    document.getElementById("recipe_craft").style.display = "none";
                    Yw.ΔᐃᐃΔ.open = Ij;
                },
                ΔᐃᐃⲆⲆⲆⵠ: function () {
                    document.getElementById("recipe_craft").style.display = "none";
                    document.getElementById("home_craft").style.display = "inline-block";
                },
                ΔⲆΔⵠ: function (a) {
                    if ((b = this.ᐃⵠᐃⵠⵠⵠᐃ[a]).ⲆⲆⲆ) {
                        document.getElementById("watercraft").style.display = "inline-block";
                    } else {
                        document.getElementById("watercraft").style.display = "none";
                    }
                    if (b.f) {
                        document.getElementById("firecraft").style.display = "inline-block";
                    } else {
                        document.getElementById("firecraft").style.display = "none";
                    }
                    if (b.w) {
                        document.getElementById("workcraft").style.display = "inline-block";
                    } else {
                        document.getElementById("workcraft").style.display = "none";
                    }
                    if (b.e) {
                        document.getElementById("wellcraft").style.display = "inline-block";
                    } else {
                        document.getElementById("wellcraft").style.display = "none";
                    }
                    for (var b = b.r, c = (a = 0, 1); a < b.length; a++) {
                        document.getElementById("inv" + c).style.display = "inline-block";
                        document.getElementById("inv" + c).src = ΔⲆ[Pr[b[a][0]].ᐃΔ][0].ᐃⲆᐃΔᐃ === Xn ? ΔⲆ[Pr[b[a][0]].ᐃΔ][0].src : ΔⲆ[Pr[b[a][0]].ᐃΔ][0].ᐃⲆᐃΔᐃ;
                        document.getElementById("numb" + c).innerHTML = "" + b[a][1];
                        c++;
                    }
                    for (; c < 6; c++) {
                        document.getElementById("inv" + c).style.display = "none";
                        document.getElementById("numb" + c).innerHTML = "";
                    }
                },
                select: function (a) {
                    this.ⵠᐃᐃⵠᐃᐃⲆ = a;
                    document.getElementById("home_craft").style.display = "none";
                    document.getElementById("workcraft").style.display = "none";
                    document.getElementById("firecraft").style.display = "none";
                    document.getElementById("watercraft").style.display = "none";
                    document.getElementById("wellcraft").style.display = "none";
                    document.getElementById("recipe_craft").style.display = "inline-block";
                    document.getElementById("inv1").style.display = "none";
                    document.getElementById("inv2").style.display = "none";
                    document.getElementById("inv3").style.display = "none";
                    document.getElementById("inv4").style.display = "none";
                    document.getElementById("inv5").style.display = "none";
                    document.getElementById("numb1").innerHTML = "";
                    document.getElementById("numb2").innerHTML = "";
                    document.getElementById("numb3").innerHTML = "";
                    document.getElementById("numb4").innerHTML = "";
                    document.getElementById("numb5").innerHTML = "";
                    for (var b = 0, c = 0; b < Ls.length; b++) {
                        var d = Ls[b];
                        if (a === d.ⵠᐃᐃ) {
                            this.ᐃⵠᐃⵠⵠⵠᐃ[c] = d;
                            c++;
                            document.getElementById("img_" + c).style.display = "inline-block";
                            document.getElementById("img_" + c).src = ΔⲆ[Pr[d.ⵠΔⲆΔ].ᐃΔ][0].ᐃⲆᐃΔᐃ === Gj ? ΔⲆ[Pr[d.ⵠΔⲆΔ].ᐃΔ][0].src : ΔⲆ[Pr[d.ⵠΔⲆΔ].ᐃΔ][0].ᐃⲆᐃΔᐃ;
                        }
                    }
                    for (c++; c < 49; c++) {
                        document.getElementById("img_" + c).style.display = "none";
                    }
                }
            },
            ᐃΔᐃᐃᐃⲆᐃ: {
                id: document.getElementById("home_craft"),
                style: document.getElementById("home_craft").style,
                ΔΔΔ: function () {
                    this.style.left = Math.floor(hq - 285) + "px";
                    this.style.top = Math.floor(iq - 170) + "px";
                },
                ΔⵠᐃⵠⲆ: function () {
                    document.getElementById("home_craft").style.display = "none";
                    Yw.ΔᐃᐃΔ.open = false;
                }
            },
            ΔΔⵠⲆⵠⵠⵠᐃᐃ: function () {
                this.open = !this.open;
                if (this.open) {
                    document.getElementById("home_craft").style.display = "inline-block";
                } else {
                    document.getElementById("home_craft").style.display = "none";
                    document.getElementById("recipe_craft").style.display = "none";
                }
            }
        };
        document.getElementById("quit").addEventListener("mouseup", this.ΔᐃᐃΔ.ᐃΔᐃᐃᐃⲆᐃ.ΔⵠᐃⵠⲆ, false);
        document.getElementById("quitmenu").addEventListener("mouseup", this.ΔᐃᐃΔ.list.ΔⵠᐃⵠⲆ, false);
        document.getElementById("backhome").addEventListener("mouseup", this.ΔᐃᐃΔ.list.ΔᐃᐃⲆⲆⲆⵠ, false);
        document.getElementById("hatcategory").addEventListener("mouseup", function () {
            Yw.ΔᐃᐃΔ.list.select(2);
        }, Es);
        document.getElementById("weaponcategory").addEventListener("mouseup", function () {
            Yw.ΔᐃᐃΔ.list.select(1);
        }, Js);
        document.getElementById("toolcategory").addEventListener("mouseup", function () {
            Yw.ΔᐃᐃΔ.list.select(0);
        }, f);
        document.getElementById("foodcategory").addEventListener("mouseup", function () {
            Yw.ΔᐃᐃΔ.list.select(3);
        }, false);
        document.getElementById("placeablecategory").addEventListener("mouseup", function () {
            Yw.ΔᐃᐃΔ.list.select(4);
        }, Es);
        document.getElementById("constructioncategory").addEventListener("mouseup", function () {
            Yw.ΔᐃᐃΔ.list.select(5);
        }, false);
        document.getElementById("img_1").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(0);
        }, Dk);
        document.getElementById("img_2").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(1);
        }, Es);
        document.getElementById("img_3").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(2);
        }, fr);
        document.getElementById("img_4").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(3);
        }, dq);
        document.getElementById("img_5").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(4);
        }, false);
        document.getElementById("img_6").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(5);
        }, Yh);
        document.getElementById("img_7").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(6);
        }, false);
        document.getElementById("img_8").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(7);
        }, false);
        document.getElementById("img_9").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(8);
        }, Ij);
        document.getElementById("img_10").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(9);
        }, false);
        document.getElementById("img_11").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(10);
        }, false);
        document.getElementById("img_12").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(11);
        }, Ig);
        document.getElementById("img_13").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(12);
        }, false);
        document.getElementById("img_14").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(13);
        }, false);
        document.getElementById("img_15").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(14);
        }, false);
        document.getElementById("img_16").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(15);
        }, false);
        document.getElementById("img_17").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(16);
        }, false);
        document.getElementById("img_18").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(17);
        }, false);
        document.getElementById("img_19").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(18);
        }, false);
        document.getElementById("img_20").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(19);
        }, false);
        document.getElementById("img_21").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(20);
        }, false);
        document.getElementById("img_22").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(21);
        }, Ij);
        document.getElementById("img_23").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(22);
        }, Eh);
        document.getElementById("img_24").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(23);
        }, Lo);
        document.getElementById("img_25").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(24);
        }, Lo);
        document.getElementById("img_26").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(25);
        }, false);
        document.getElementById("img_27").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(26);
        }, false);
        document.getElementById("img_28").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(27);
        }, false);
        document.getElementById("img_29").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(28);
        }, false);
        document.getElementById("img_30").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(29);
        }, as);
        document.getElementById("img_31").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(30);
        }, os);
        document.getElementById("img_32").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(31);
        }, Kn);
        document.getElementById("img_33").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(32);
        }, Kn);
        document.getElementById("img_34").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(33);
        }, dq);
        document.getElementById("img_35").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(34);
        }, X);
        document.getElementById("img_36").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(35);
        }, os);
        document.getElementById("img_37").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(36);
        }, false);
        document.getElementById("img_38").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(37);
        }, Lo);
        document.getElementById("img_39").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(38);
        }, false);
        document.getElementById("img_40").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(39);
        }, f);
        document.getElementById("img_41").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(40);
        }, Yh);
        document.getElementById("img_42").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(41);
        }, zk);
        document.getElementById("img_43").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(42);
        }, false);
        document.getElementById("img_44").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(43);
        }, dq);
        document.getElementById("img_45").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(44);
        }, X);
        document.getElementById("img_46").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(45);
        }, false);
        document.getElementById("img_47").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(46);
        }, false);
        document.getElementById("img_48").addEventListener("mousedown", function () {
            Yw.ΔᐃᐃΔ.list.ΔⲆΔⵠ(47);
        }, X);
        this.ᐃΔⵠⲆΔ = {
            translate: {
                x: 0,
                y: 0
            },
            ⵠᐃΔΔⲆ: {
                x: -1,
                y: -1
            },
            ⲆⲆⵠΔ: [],
            focus: function (a) {
                var b = this.translate.y + (Ww.ᐃΔⵠΔ.ᐃΔΔᐃΔ.length > 0 ? -120 : -50);
                if (a.x > this.translate.x && a.x < this.translate.x + 193 && a.y > b && a.y < b + 193) {
                    this.ⵠᐃΔΔⲆ.x = a.x - this.translate.x;
                    this.ⵠᐃΔΔⲆ.y = a.y - b;
                }
            }
        };
        this.ΔΔΔⲆ = {
            translate: {
                x: 0,
                y: 0
            },
            ᐃΔ: ΔⲆ[278],
            ⵠΔ: document.createElement("canvas")
        };
        this.ΔΔΔⲆ.ⵠΔ.width = this.ΔΔΔⲆ.ᐃΔ.width;
        this.ΔΔΔⲆ.ⵠΔ.height = this.ΔΔΔⲆ.ᐃΔ.height;
        this.ΔΔΔⲆ.Ⲇ = this.ΔΔΔⲆ.ⵠΔ.getContext("2d");
        this.ᐃⵠⲆⲆ = {
            translate: {
                y: 0,
                x: 0
            },
            ᐃΔ: ΔⲆ[267],
            ⲆⲆΔⵠ: ap,
            y: 0
        };
        this.ⲆⵠᐃⲆⲆᐃᐃ = function () {
            ᐃᐃⵠⲆⵠ = document.getElementById("team_box");
            ᐃᐃⵠⲆⵠ.innerHTML = "";
            ᐃᐃⵠⲆⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + cf.ⲆⲆⵠΔ[Ww.ᐃᐃⲆᐃⲆ[0]].ⲆⵠΔΔⲆ + "</div";
            for (var a = 1; Ww.ᐃᐃⲆᐃⲆ.length > a; a++) {
                ᐃᐃⵠⲆⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + cf.ⲆⲆⵠΔ[Ww.ᐃᐃⲆᐃⲆ[a]].ⲆⵠΔΔⲆ + "</div></div>";
            }
            ᐃᐃⵠⲆⵠ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
            ᐃᐃⵠⲆⵠ.style.display = "inline-block";
            document.getElementById("leave").addEventListener("click", Δⵠᐃⵠ.ⲆⵠᐃⲆⲆᐃᐃ, og);
        };
        this.ΔᐃⲆΔⵠⵠᐃⲆΔ = function () {
            ᐃᐃⵠⲆⵠ = document.getElementById("team_box");
            ᐃᐃⵠⲆⵠ.innerHTML = "";
            ᐃᐃⵠⲆⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + cf.ⲆⲆⵠΔ[Ww.ᐃᐃⲆᐃⲆ[0]].ⲆⵠΔΔⲆ + "</div";
            for (var a = 1; Ww.ᐃᐃⲆᐃⲆ.length > a; a++) {
                ᐃᐃⵠⲆⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + cf.ⲆⲆⵠΔ[Ww.ᐃᐃⲆᐃⲆ[a]].ⲆⵠΔΔⲆ + "</div></div>";
            }
            ᐃᐃⵠⲆⵠ.innerHTML += "</div>";
            ᐃᐃⵠⲆⵠ.style.display = "inline-block";
        };
        this.ᐃⲆᐃⲆΔⲆⲆⵠⲆ = function () {
            ᐃᐃⵠⲆⵠ = document.getElementById("team_box");
            ᐃᐃⵠⲆⵠ.innerHTML = "";
            ᐃᐃⵠⲆⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + cf.ⲆⲆⵠΔ[Ww.ᐃᐃⲆᐃⲆ[0]].ⲆⵠΔΔⲆ + "</div";
            for (var a = 1; Ww.ᐃᐃⲆᐃⲆ.length > a; a++) {
                ᐃᐃⵠⲆⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + cf.ⲆⲆⵠΔ[Ww.ᐃᐃⲆᐃⲆ[a]].ⲆⵠΔΔⲆ + "</div><div class=\"eject_member\" id=\"eject_member" + a + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
            }
            if (Ww.ᐃⵠᐃⵠⵠ.lock === 0) {
                ᐃᐃⵠⲆⵠ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
            } else {
                ᐃᐃⵠⲆⵠ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
            }
            document.getElementById("lock_team").addEventListener("click", Δⵠᐃⵠ.ⵠᐃΔᐃΔᐃⲆⲆⵠ, false);
            ᐃᐃⵠⲆⵠ.style.display = "inline-block";
            for (a = 1; Ww.ᐃᐃⲆᐃⲆ.length > a; a++) {
                switch (a) {
                    case 1:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            Δⵠᐃⵠ.ⲆⵠⵠΔⲆⲆⲆ(1);
                        }, false);
                        break;
                    case 2:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            Δⵠᐃⵠ.ⲆⵠⵠΔⲆⲆⲆ(2);
                        }, as);
                        break;
                    case 3:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            Δⵠᐃⵠ.ⲆⵠⵠΔⲆⲆⲆ(3);
                        }, zk);
                        break;
                    case 4:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            Δⵠᐃⵠ.ⲆⵠⵠΔⲆⲆⲆ(4);
                        }, Js);
                        break;
                    case 5:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            Δⵠᐃⵠ.ⲆⵠⵠΔⲆⲆⲆ(5);
                        }, X);
                        break;
                    case 6:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            Δⵠᐃⵠ.ⲆⵠⵠΔⲆⲆⲆ(6);
                        }, Js);
                        break;
                    case 7:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            Δⵠᐃⵠ.ⲆⵠⵠΔⲆⲆⲆ(7);
                        }, false);
                        break;
                    case 8:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            Δⵠᐃⵠ.ⲆⵠⵠΔⲆⲆⲆ(8);
                        }, false);
                }
            }
        };
        this.ᐃΔⵠⲆᐃ = [];
        this.ᐃΔⵠⲆᐃ[2] = {
            button: Yv(60, 60, 0, ΔⲆ[556]),
            action: this.ⲆⵠᐃⲆⲆᐃᐃ
        };
        this.ᐃΔⵠⲆᐃ[3] = {
            button: Yv(60, 60, 0, ΔⲆ[556]),
            action: Δⵠᐃⵠ.ⵠⲆⲆⵠⲆⲆⲆⲆⵠ
        };
        this.ᐃΔⵠⲆᐃ[0] = {
            button: Yv(60, 60, 0, ΔⲆ[557]),
            action: this.ᐃⲆᐃⲆΔⲆⲆⵠⲆ
        };
        this.ᐃΔⵠⲆᐃ[1] = {
            button: Yv(60, 60, 0, ΔⲆ[561]),
            action: this.ΔᐃⲆΔⵠⵠᐃⲆΔ
        };
        this.ᐃΔⵠⲆᐃ[4] = {
            button: Yv(60, 60, 0, ΔⲆ[560]),
            action: function () { }
        };
        this.ᐃⵠΔⲆⲆ = -1;
        this.ᐃΔⵠⲆΔⲆⲆ = Yv(60, 60, 0, ΔⲆ[723]);
        this.ᐃΔᐃⵠΔⵠⲆ = Yv(60, 60, 0, ΔⲆ[724]);
        this.ⲆΔⵠΔⵠᐃᐃ = Yv(60, 60, 0, ΔⲆ[658]);
        this.ᐃⵠΔⵠⵠΔᐃ = Yv(60, 60, 0, ΔⲆ[657]);
        this.ΔΔⵠⲆᐃⵠΔ = Yv(60, 60, 0, ΔⲆ[658]);
        this.ⵠⵠΔᐃᐃⲆΔ = Yv(60, 60, 0, ΔⲆ[316]);
        this.ⵠⵠΔΔΔᐃᐃ = Yv(60, 60, 0, ΔⲆ[315]);
        this.ⲆᐃΔΔΔⵠᐃ = Yv(60, 60, 0, ΔⲆ[297]);
        this.ΔΔᐃⵠⲆⵠⲆ = Yv(60, 60, 0, ΔⲆ[298]);
        this.ᐃᐃⵠⲆΔⵠⵠ = Yv(60, 60, 0, ΔⲆ[418]);
        this.ⵠᐃⲆᐃⲆⵠⵠ = Yv(60, 60, 0, ΔⲆ[938]);
        this.ΔᐃⲆᐃΔᐃᐃ = Yv(60, 60, 0, ΔⲆ[412]);
        this.ⲆᐃⲆᐃⵠⵠⲆ = Yv(60, 60, 0, ΔⲆ[536]);
        this.ⵠΔΔᐃΔΔᐃ = Yv(60, 60, 0, ΔⲆ[535]);
        this.ⲆᐃᐃΔΔⵠᐃ = Yv(60, 60, 0, ΔⲆ[538]);
        this.ᐃⵠⵠΔᐃ = Yv(120, 120, 0, ΔⲆ[149]);
        this.ᐃⵠⵠΔᐃ.info.translate.x = 10;
        this.ᐃⵠⵠΔᐃ.info.translate.y = 10;
        this.ⵠᐃⲆ = [];
        this.ⵠᐃⲆ[0] = Yv(68, 68, 0, ΔⲆ[340], 3);
        this.ⵠᐃⲆ[0].id = 0;
        this.ⵠᐃⲆ[1] = Yv(68, 68, 0, ΔⲆ[341], 3);
        this.ⵠᐃⲆ[1].id = 1;
        this.ⵠᐃⲆ[108] = Yv(68, 68, 0, ΔⲆ[342], 3);
        this.ⵠᐃⲆ[108].id = 108;
        this.ⵠᐃⲆ[109] = Yv(68, 68, 0, ΔⲆ[343], 3);
        this.ⵠᐃⲆ[109].id = 109;
        this.ⵠᐃⲆ[110] = Yv(68, 68, 0, ΔⲆ[269], 3);
        this.ⵠᐃⲆ[110].id = 110;
        this.ⵠᐃⲆ[233] = Yv(68, 68, 0, ΔⲆ[1155], 3);
        this.ⵠᐃⲆ[233].id = 233;
        this.ⵠᐃⲆ[111] = Yv(68, 68, 0, ΔⲆ[270], 3);
        this.ⵠᐃⲆ[111].id = 111;
        this.ⵠᐃⲆ[112] = Yv(68, 68, 0, ΔⲆ[271], 3);
        this.ⵠᐃⲆ[112].id = 112;
        this.ⵠᐃⲆ[3] = Yv(68, 68, 0, ΔⲆ[272], 3);
        this.ⵠᐃⲆ[3].id = 3;
        this.ⵠᐃⲆ[4] = Yv(68, 68, 0, ΔⲆ[344], 3);
        this.ⵠᐃⲆ[4].id = 4;
        this.ⵠᐃⲆ[5] = Yv(68, 68, 0, ΔⲆ[345], 3);
        this.ⵠᐃⲆ[5].id = 5;
        this.ⵠᐃⲆ[57] = Yv(68, 68, 0, ΔⲆ[831], 3);
        this.ⵠᐃⲆ[57].id = 57;
        this.ⵠᐃⲆ[6] = Yv(68, 68, 0, ΔⲆ[346], 3);
        this.ⵠᐃⲆ[6].id = 6;
        this.ⵠᐃⲆ[113] = Yv(68, 68, 0, ΔⲆ[273], 3);
        this.ⵠᐃⲆ[113].id = 113;
        this.ⵠᐃⲆ[114] = Yv(68, 68, 0, ΔⲆ[358], 3);
        this.ⵠᐃⲆ[114].id = 114;
        this.ⵠᐃⲆ[115] = Yv(68, 68, 0, ΔⲆ[348], 3);
        this.ⵠᐃⲆ[115].id = 115;
        this.ⵠᐃⲆ[162] = Yv(68, 68, 0, ΔⲆ[349], 3);
        this.ⵠᐃⲆ[162].id = 162;
        this.ⵠᐃⲆ[160] = Yv(68, 68, 0, ΔⲆ[350], 3);
        this.ⵠᐃⲆ[160].id = 160;
        this.ⵠᐃⲆ[8] = Yv(68, 68, 0, ΔⲆ[274], 3);
        this.ⵠᐃⲆ[8].id = 8;
        this.ⵠᐃⲆ[117] = Yv(68, 68, 0, ΔⲆ[351], 3);
        this.ⵠᐃⲆ[117].id = 117;
        this.ⵠᐃⲆ[116] = Yv(68, 68, 0, ΔⲆ[275], 3);
        this.ⵠᐃⲆ[116].id = 116;
        this.ⵠᐃⲆ[118] = Yv(68, 68, 0, ΔⲆ[276], 3);
        this.ⵠᐃⲆ[118].id = 118;
        this.ⵠᐃⲆ[195] = Yv(68, 68, 0, ΔⲆ[352], 3);
        this.ⵠᐃⲆ[195].id = 195;
        this.ⵠᐃⲆ[161] = Yv(68, 68, 0, ΔⲆ[353], 3);
        this.ⵠᐃⲆ[161].id = 161;
        this.ⵠᐃⲆ[163] = Yv(68, 68, 0, ΔⲆ[354], 3);
        this.ⵠᐃⲆ[163].id = 163;
        this.ⵠᐃⲆ[164] = Yv(68, 68, 0, ΔⲆ[355], 3);
        this.ⵠᐃⲆ[164].id = 164;
        this.ⵠᐃⲆ[165] = Yv(68, 68, 0, ΔⲆ[356], 3);
        this.ⵠᐃⲆ[165].id = 165;
        this.ⵠᐃⲆ[166] = Yv(68, 68, 0, ΔⲆ[357], 3);
        this.ⵠᐃⲆ[166].id = 166;
        this.ⵠᐃⲆ[167] = Yv(68, 68, 0, ΔⲆ[359], 3);
        this.ⵠᐃⲆ[167].id = 167;
        this.ⵠᐃⲆ[168] = Yv(68, 68, 0, ΔⲆ[382], 3);
        this.ⵠᐃⲆ[168].id = 168;
        this.ⵠᐃⲆ[169] = Yv(68, 68, 0, ΔⲆ[383], 3);
        this.ⵠᐃⲆ[169].id = 169;
        this.ⵠᐃⲆ[170] = Yv(68, 68, 0, ΔⲆ[384], 3);
        this.ⵠᐃⲆ[170].id = 170;
        this.ⵠᐃⲆ[2] = Yv(68, 68, 0, ΔⲆ[386], 3);
        this.ⵠᐃⲆ[2].id = 2;
        this.ⵠᐃⲆ[237] = Yv(68, 68, 0, ΔⲆ[1163], 3);
        this.ⵠᐃⲆ[237].id = 237;
        this.ⵠᐃⲆ[174] = Yv(68, 68, 0, ΔⲆ[394], 3);
        this.ⵠᐃⲆ[174].id = 174;
        this.ⵠᐃⲆ[222] = Yv(68, 68, 0, ΔⲆ[1036], 3);
        this.ⵠᐃⲆ[222].id = 222;
        this.ⵠᐃⲆ[231] = Yv(68, 68, 0, ΔⲆ[1038], 3);
        this.ⵠᐃⲆ[231].id = 231;
        this.ⵠᐃⲆ[232] = Yv(68, 68, 0, ΔⲆ[1040], 3);
        this.ⵠᐃⲆ[232].id = 232;
        this.ⵠᐃⲆ[234] = Yv(68, 68, 0, ΔⲆ[1157], 3);
        this.ⵠᐃⲆ[234].id = 234;
        this.ⵠᐃⲆ[10] = Yv(68, 68, 0, ΔⲆ[387], 3);
        this.ⵠᐃⲆ[10].id = 10;
        this.ⵠᐃⲆ[171] = Yv(68, 68, 0, ΔⲆ[388], 3);
        this.ⵠᐃⲆ[171].id = 171;
        this.ⵠᐃⲆ[172] = Yv(68, 68, 0, ΔⲆ[389], 3);
        this.ⵠᐃⲆ[172].id = 172;
        this.ⵠᐃⲆ[173] = Yv(68, 68, 0, ΔⲆ[390], 3);
        this.ⵠᐃⲆ[173].id = 173;
        this.ⵠᐃⲆ[11] = Yv(68, 68, 0, ΔⲆ[391], 3);
        this.ⵠᐃⲆ[11].id = 11;
        this.ⵠᐃⲆ[12] = Yv(68, 68, 0, ΔⲆ[403], 3);
        this.ⵠᐃⲆ[12].id = 12;
        this.ⵠᐃⲆ[13] = Yv(68, 68, 0, ΔⲆ[397], 3);
        this.ⵠᐃⲆ[13].id = 13;
        this.ⵠᐃⲆ[14] = Yv(68, 68, 0, ΔⲆ[400], 3);
        this.ⵠᐃⲆ[14].id = 14;
        this.ⵠᐃⲆ[15] = Yv(68, 68, 0, ΔⲆ[406], 3);
        this.ⵠᐃⲆ[15].id = 15;
        this.ⵠᐃⲆ[16] = Yv(68, 68, 0, ΔⲆ[875], 3);
        this.ⵠᐃⲆ[16].id = 16;
        this.ⵠᐃⲆ[119] = Yv(68, 68, 0, ΔⲆ[410], 3);
        this.ⵠᐃⲆ[119].id = 119;
        this.ⵠᐃⲆ[23] = Yv(68, 68, 0, ΔⲆ[422], 3);
        this.ⵠᐃⲆ[23].id = 23;
        this.ⵠᐃⲆ[24] = Yv(68, 68, 0, ΔⲆ[425], 3);
        this.ⵠᐃⲆ[24].id = 24;
        this.ⵠᐃⲆ[87] = Yv(68, 68, 0, ΔⲆ[1229], 3);
        this.ⵠᐃⲆ[87].id = 87;
        this.ⵠᐃⲆ[88] = Yv(68, 68, 0, ΔⲆ[1232], 3);
        this.ⵠᐃⲆ[88].id = 88;
        this.ⵠᐃⲆ[80] = Yv(68, 68, 0, ΔⲆ[1139], 3);
        this.ⵠᐃⲆ[80].id = 80;
        this.ⵠᐃⲆ[81] = Yv(68, 68, 0, ΔⲆ[1142], 3);
        this.ⵠᐃⲆ[81].id = 81;
        this.ⵠᐃⲆ[101] = Yv(68, 68, 0, ΔⲆ[1167], 3);
        this.ⵠᐃⲆ[101].id = 101;
        this.ⵠᐃⲆ[64] = Yv(68, 68, 0, ΔⲆ[571], 3);
        this.ⵠᐃⲆ[64].id = 64;
        this.ⵠᐃⲆ[71] = Yv(68, 68, 0, ΔⲆ[1240], 3);
        this.ⵠᐃⲆ[71].id = 71;
        this.ⵠᐃⲆ[102] = Yv(68, 68, 0, ΔⲆ[1170], 3);
        this.ⵠᐃⲆ[102].id = 102;
        this.ⵠᐃⲆ[65] = Yv(68, 68, 0, ΔⲆ[574], 3);
        this.ⵠᐃⲆ[65].id = 65;
        this.ⵠᐃⲆ[72] = Yv(68, 68, 0, ΔⲆ[1243], 3);
        this.ⵠᐃⲆ[72].id = 72;
        this.ⵠᐃⲆ[103] = Yv(68, 68, 0, ΔⲆ[1173], 3);
        this.ⵠᐃⲆ[103].id = 103;
        this.ⵠᐃⲆ[66] = Yv(68, 68, 0, ΔⲆ[577], 3);
        this.ⵠᐃⲆ[66].id = 66;
        this.ⵠᐃⲆ[73] = Yv(68, 68, 0, ΔⲆ[1246], 3);
        this.ⵠᐃⲆ[73].id = 73;
        this.ⵠᐃⲆ[104] = Yv(68, 68, 0, ΔⲆ[1176], 3);
        this.ⵠᐃⲆ[104].id = 104;
        this.ⵠᐃⲆ[67] = Yv(68, 68, 0, ΔⲆ[580], 3);
        this.ⵠᐃⲆ[67].id = 67;
        this.ⵠᐃⲆ[74] = Yv(68, 68, 0, ΔⲆ[1249], 3);
        this.ⵠᐃⲆ[74].id = 74;
        this.ⵠᐃⲆ[105] = Yv(68, 68, 0, ΔⲆ[1179], 3);
        this.ⵠᐃⲆ[105].id = 105;
        this.ⵠᐃⲆ[68] = Yv(68, 68, 0, ΔⲆ[583], 3);
        this.ⵠᐃⲆ[68].id = 68;
        this.ⵠᐃⲆ[75] = Yv(68, 68, 0, ΔⲆ[1252], 3);
        this.ⵠᐃⲆ[75].id = 75;
        this.ⵠᐃⲆ[106] = Yv(68, 68, 0, ΔⲆ[1182], 3);
        this.ⵠᐃⲆ[106].id = 106;
        this.ⵠᐃⲆ[69] = Yv(68, 68, 0, ΔⲆ[586], 3);
        this.ⵠᐃⲆ[69].id = 69;
        this.ⵠᐃⲆ[76] = Yv(68, 68, 0, ΔⲆ[1255], 3);
        this.ⵠᐃⲆ[76].id = 76;
        this.ⵠᐃⲆ[107] = Yv(68, 68, 0, ΔⲆ[1185], 3);
        this.ⵠᐃⲆ[107].id = 107;
        this.ⵠᐃⲆ[70] = Yv(68, 68, 0, ΔⲆ[589], 3);
        this.ⵠᐃⲆ[70].id = 70;
        this.ⵠᐃⲆ[94] = Yv(68, 68, 0, ΔⲆ[1258], 3);
        this.ⵠᐃⲆ[94].id = 94;
        this.ⵠᐃⲆ[95] = Yv(68, 68, 0, ΔⲆ[1261], 3);
        this.ⵠᐃⲆ[95].id = 95;
        this.ⵠᐃⲆ[96] = Yv(68, 68, 0, ΔⲆ[1264], 3);
        this.ⵠᐃⲆ[96].id = 96;
        this.ⵠᐃⲆ[97] = Yv(68, 68, 0, ΔⲆ[1267], 3);
        this.ⵠᐃⲆ[97].id = 97;
        this.ⵠᐃⲆ[98] = Yv(68, 68, 0, ΔⲆ[1270], 3);
        this.ⵠᐃⲆ[98].id = 98;
        this.ⵠᐃⲆ[99] = Yv(68, 68, 0, ΔⲆ[1273], 3);
        this.ⵠᐃⲆ[99].id = 99;
        this.ⵠᐃⲆ[58] = Yv(68, 68, 0, ΔⲆ[828], 3);
        this.ⵠᐃⲆ[58].id = 58;
        this.ⵠᐃⲆ[25] = Yv(68, 68, 0, ΔⲆ[431], 3);
        this.ⵠᐃⲆ[25].id = 25;
        this.ⵠᐃⲆ[26] = Yv(68, 68, 0, ΔⲆ[434], 3);
        this.ⵠᐃⲆ[26].id = 26;
        this.ⵠᐃⲆ[27] = Yv(68, 68, 0, ΔⲆ[437], 3);
        this.ⵠᐃⲆ[27].id = 27;
        this.ⵠᐃⲆ[28] = Yv(68, 68, 0, ΔⲆ[440], 3);
        this.ⵠᐃⲆ[28].id = 28;
        this.ⵠᐃⲆ[120] = Yv(68, 68, 0, ΔⲆ[443], 3);
        this.ⵠᐃⲆ[120].id = 120;
        this.ⵠᐃⲆ[29] = Yv(68, 68, 0, ΔⲆ[385], 3);
        this.ⵠᐃⲆ[29].id = 29;
        this.ⵠᐃⲆ[121] = Yv(68, 68, 0, ΔⲆ[446], 3);
        this.ⵠᐃⲆ[121].id = 121;
        this.ⵠᐃⲆ[30] = Yv(68, 68, 0, ΔⲆ[457], 3);
        this.ⵠᐃⲆ[30].id = 30;
        this.ⵠᐃⲆ[9] = Yv(68, 68, 0, ΔⲆ[862], 3);
        this.ⵠᐃⲆ[9].id = 9;
        this.ⵠᐃⲆ[31] = Yv(68, 68, 0, ΔⲆ[459], 3);
        this.ⵠᐃⲆ[31].id = 31;
        this.ⵠᐃⲆ[32] = Yv(68, 68, 0, ΔⲆ[1018], 3);
        this.ⵠᐃⲆ[32].id = 32;
        this.ⵠᐃⲆ[33] = Yv(68, 68, 0, ΔⲆ[474], 3);
        this.ⵠᐃⲆ[33].id = 33;
        this.ⵠᐃⲆ[35] = Yv(68, 68, 0, ΔⲆ[479], 3);
        this.ⵠᐃⲆ[35].id = 35;
        this.ⵠᐃⲆ[36] = Yv(68, 68, 0, ΔⲆ[482], 3);
        this.ⵠᐃⲆ[36].id = 36;
        this.ⵠᐃⲆ[37] = Yv(68, 68, 0, ΔⲆ[485], 3);
        this.ⵠᐃⲆ[37].id = 37;
        this.ⵠᐃⲆ[38] = Yv(68, 68, 0, ΔⲆ[488], 3);
        this.ⵠᐃⲆ[38].id = 38;
        this.ⵠᐃⲆ[39] = Yv(68, 68, 0, ΔⲆ[491], 3);
        this.ⵠᐃⲆ[39].id = 39;
        this.ⵠᐃⲆ[122] = Yv(68, 68, 0, ΔⲆ[494], 3);
        this.ⵠᐃⲆ[122].id = 122;
        this.ⵠᐃⲆ[123] = Yv(68, 68, 0, ΔⲆ[497], 3);
        this.ⵠᐃⲆ[123].id = 123;
        this.ⵠᐃⲆ[124] = Yv(68, 68, 0, ΔⲆ[501], 3);
        this.ⵠᐃⲆ[124].id = 124;
        this.ⵠᐃⲆ[40] = Yv(68, 68, 0, ΔⲆ[504], 3);
        this.ⵠᐃⲆ[40].id = 40;
        this.ⵠᐃⲆ[146] = Yv(68, 68, 0, ΔⲆ[506], 3);
        this.ⵠᐃⲆ[146].id = 146;
        this.ⵠᐃⲆ[240] = Yv(68, 68, 0, ΔⲆ[1234], 3);
        this.ⵠᐃⲆ[240].id = 240;
        this.ⵠᐃⲆ[147] = Yv(68, 68, 0, ΔⲆ[514], 3);
        this.ⵠᐃⲆ[147].id = 147;
        this.ⵠᐃⲆ[148] = Yv(68, 68, 0, ΔⲆ[520], 3);
        this.ⵠᐃⲆ[148].id = 148;
        this.ⵠᐃⲆ[149] = Yv(68, 68, 0, ΔⲆ[522], 3);
        this.ⵠᐃⲆ[149].id = 149;
        this.ⵠᐃⲆ[150] = Yv(68, 68, 0, ΔⲆ[524], 3);
        this.ⵠᐃⲆ[150].id = 150;
        this.ⵠᐃⲆ[151] = Yv(68, 68, 0, ΔⲆ[531], 3);
        this.ⵠᐃⲆ[151].id = 151;
        this.ⵠᐃⲆ[158] = Yv(68, 68, 0, ΔⲆ[534], 3);
        this.ⵠᐃⲆ[158].id = 158;
        this.ⵠᐃⲆ[159] = Yv(68, 68, 0, ΔⲆ[554], 3);
        this.ⵠᐃⲆ[159].id = 159;
        this.ⵠᐃⲆ[43] = Yv(68, 68, 0, ΔⲆ[543], 3);
        this.ⵠᐃⲆ[43].id = 43;
        this.ⵠᐃⲆ[45] = Yv(68, 68, 0, ΔⲆ[552], 3);
        this.ⵠᐃⲆ[45].id = 45;
        this.ⵠᐃⲆ[125] = Yv(68, 68, 0, ΔⲆ[606], 3);
        this.ⵠᐃⲆ[125].id = 125;
        this.ⵠᐃⲆ[221] = Yv(68, 68, 0, ΔⲆ[1237], 3);
        this.ⵠᐃⲆ[221].id = 221;
        this.ⵠᐃⲆ[223] = Yv(68, 68, 0, ΔⲆ[1029], 3);
        this.ⵠᐃⲆ[223].id = 223;
        this.ⵠᐃⲆ[224] = Yv(68, 68, 0, ΔⲆ[1032], 3);
        this.ⵠᐃⲆ[224].id = 224;
        this.ⵠᐃⲆ[230] = Yv(68, 68, 0, ΔⲆ[1118], 3);
        this.ⵠᐃⲆ[230].id = 230;
        this.ⵠᐃⲆ[89] = Yv(68, 68, 0, ΔⲆ[1047], 3);
        this.ⵠᐃⲆ[89].id = 89;
        this.ⵠᐃⲆ[225] = Yv(68, 68, 0, ΔⲆ[1050], 3);
        this.ⵠᐃⲆ[225].id = 225;
        this.ⵠᐃⲆ[227] = Yv(68, 68, 0, ΔⲆ[1081], 3);
        this.ⵠᐃⲆ[227].id = 227;
        this.ⵠᐃⲆ[239] = Yv(68, 68, 0, ΔⲆ[1225], 3);
        this.ⵠᐃⲆ[239].id = 239;
        this.ⵠᐃⲆ[228] = Yv(68, 68, 0, ΔⲆ[1096], 3);
        this.ⵠᐃⲆ[228].id = 228;
        this.ⵠᐃⲆ[229] = Yv(68, 68, 0, ΔⲆ[1111], 3);
        this.ⵠᐃⲆ[229].id = 229;
        this.ⵠᐃⲆ[226] = Yv(68, 68, 0, ΔⲆ[1190], 3);
        this.ⵠᐃⲆ[226].id = 226;
        this.ⵠᐃⲆ[126] = Yv(68, 68, 0, ΔⲆ[610], 3);
        this.ⵠᐃⲆ[126].id = 126;
        this.ⵠᐃⲆ[127] = Yv(68, 68, 0, ΔⲆ[615], 3);
        this.ⵠᐃⲆ[127].id = 127;
        this.ⵠᐃⲆ[128] = Yv(68, 68, 0, ΔⲆ[614], 3);
        this.ⵠᐃⲆ[128].id = 128;
        this.ⵠᐃⲆ[46] = Yv(68, 68, 0, ΔⲆ[617], 3);
        this.ⵠᐃⲆ[46].id = 46;
        this.ⵠᐃⲆ[50] = Yv(68, 68, 0, ΔⲆ[701], 3);
        this.ⵠᐃⲆ[50].id = 50;
        this.ⵠᐃⲆ[51] = Yv(68, 68, 0, ΔⲆ[703], 3);
        this.ⵠᐃⲆ[51].id = 51;
        this.ⵠᐃⲆ[52] = Yv(68, 68, 0, ΔⲆ[707], 3);
        this.ⵠᐃⲆ[52].id = 52;
        this.ⵠᐃⲆ[55] = Yv(68, 68, 0, ΔⲆ[710], 3);
        this.ⵠᐃⲆ[55].id = 55;
        this.ⵠᐃⲆ[129] = Yv(68, 68, 0, ΔⲆ[625], 3);
        this.ⵠᐃⲆ[129].id = 129;
        this.ⵠᐃⲆ[130] = Yv(68, 68, 0, ΔⲆ[628], 3);
        this.ⵠᐃⲆ[130].id = 130;
        this.ⵠᐃⲆ[131] = Yv(68, 68, 0, ΔⲆ[630], 3);
        this.ⵠᐃⲆ[131].id = 131;
        this.ⵠᐃⲆ[132] = Yv(68, 68, 0, ΔⲆ[633], 3);
        this.ⵠᐃⲆ[132].id = 132;
        this.ⵠᐃⲆ[133] = Yv(68, 68, 0, ΔⲆ[636], 3);
        this.ⵠᐃⲆ[133].id = 133;
        this.ⵠᐃⲆ[134] = Yv(68, 68, 0, ΔⲆ[640], 3);
        this.ⵠᐃⲆ[134].id = 134;
        this.ⵠᐃⲆ[135] = Yv(68, 68, 0, ΔⲆ[645], 3);
        this.ⵠᐃⲆ[135].id = 135;
        this.ⵠᐃⲆ[47] = Yv(68, 68, 0, ΔⲆ[648], 3);
        this.ⵠᐃⲆ[47].id = 47;
        this.ⵠᐃⲆ[48] = Yv(68, 68, 0, ΔⲆ[651], 3);
        this.ⵠᐃⲆ[48].id = 48;
        this.ⵠᐃⲆ[49] = Yv(68, 68, 0, ΔⲆ[653], 3);
        this.ⵠᐃⲆ[49].id = 49;
        this.ⵠᐃⲆ[136] = Yv(68, 68, 0, ΔⲆ[661], 3);
        this.ⵠᐃⲆ[136].id = 136;
        this.ⵠᐃⲆ[143] = Yv(68, 68, 0, ΔⲆ[689], 3);
        this.ⵠᐃⲆ[143].id = 143;
        this.ⵠᐃⲆ[137] = Yv(68, 68, 0, ΔⲆ[663], 3);
        this.ⵠᐃⲆ[137].id = 137;
        this.ⵠᐃⲆ[138] = Yv(68, 68, 0, ΔⲆ[665], 3);
        this.ⵠᐃⲆ[138].id = 138;
        this.ⵠᐃⲆ[139] = Yv(68, 68, 0, ΔⲆ[675], 3);
        this.ⵠᐃⲆ[139].id = 139;
        this.ⵠᐃⲆ[140] = Yv(68, 68, 0, ΔⲆ[682], 3);
        this.ⵠᐃⲆ[140].id = 140;
        this.ⵠᐃⲆ[141] = Yv(68, 68, 0, ΔⲆ[683], 3);
        this.ⵠᐃⲆ[141].id = 141;
        this.ⵠᐃⲆ[142] = Yv(68, 68, 0, ΔⲆ[686], 3);
        this.ⵠᐃⲆ[142].id = 142;
        this.ⵠᐃⲆ[144] = Yv(68, 68, 0, ΔⲆ[719], 3);
        this.ⵠᐃⲆ[144].id = 144;
        this.ⵠᐃⲆ[145] = Yv(68, 68, 0, ΔⲆ[731], 3);
        this.ⵠᐃⲆ[145].id = 145;
        this.ⵠᐃⲆ[59] = Yv(68, 68, 0, ΔⲆ[733], 3);
        this.ⵠᐃⲆ[59].id = 59;
        this.ⵠᐃⲆ[62] = Yv(68, 68, 0, ΔⲆ[565], 3);
        this.ⵠᐃⲆ[62].id = 62;
        this.ⵠᐃⲆ[185] = Yv(68, 68, 0, ΔⲆ[590], 3);
        this.ⵠᐃⲆ[185].id = 185;
        this.ⵠᐃⲆ[184] = Yv(68, 68, 0, ΔⲆ[752], 3);
        this.ⵠᐃⲆ[184].id = 184;
        this.ⵠᐃⲆ[187] = Yv(68, 68, 0, ΔⲆ[591], 3);
        this.ⵠᐃⲆ[187].id = 187;
        this.ⵠᐃⲆ[186] = Yv(68, 68, 0, ΔⲆ[754], 3);
        this.ⵠᐃⲆ[186].id = 186;
        this.ⵠᐃⲆ[77] = Yv(68, 68, 0, ΔⲆ[757], 3);
        this.ⵠᐃⲆ[77].id = 77;
        this.ⵠᐃⲆ[175] = Yv(68, 68, 0, ΔⲆ[759], 3);
        this.ⵠᐃⲆ[175].id = 175;
        this.ⵠᐃⲆ[176] = Yv(68, 68, 0, ΔⲆ[763], 3);
        this.ⵠᐃⲆ[176].id = 176;
        this.ⵠᐃⲆ[78] = Yv(68, 68, 0, ΔⲆ[761], 3);
        this.ⵠᐃⲆ[78].id = 78;
        this.ⵠᐃⲆ[177] = Yv(68, 68, 0, ΔⲆ[766], 3);
        this.ⵠᐃⲆ[177].id = 177;
        this.ⵠᐃⲆ[79] = Yv(68, 68, 0, ΔⲆ[765], 3);
        this.ⵠᐃⲆ[79].id = 79;
        this.ⵠᐃⲆ[83] = Yv(68, 68, 0, ΔⲆ[769], 3);
        this.ⵠᐃⲆ[83].id = 83;
        this.ⵠᐃⲆ[84] = Yv(68, 68, 0, ΔⲆ[773], 3);
        this.ⵠᐃⲆ[84].id = 84;
        this.ⵠᐃⲆ[178] = Yv(68, 68, 0, ΔⲆ[774], 3);
        this.ⵠᐃⲆ[178].id = 178;
        this.ⵠᐃⲆ[179] = Yv(68, 68, 0, ΔⲆ[775], 3);
        this.ⵠᐃⲆ[179].id = 179;
        this.ⵠᐃⲆ[86] = Yv(68, 68, 0, ΔⲆ[778], 3);
        this.ⵠᐃⲆ[86].id = 86;
        this.ⵠᐃⲆ[85] = Yv(68, 68, 0, ΔⲆ[781], 3);
        this.ⵠᐃⲆ[85].id = 85;
        this.ⵠᐃⲆ[180] = Yv(68, 68, 0, ΔⲆ[786], 3);
        this.ⵠᐃⲆ[180].id = 180;
        this.ⵠᐃⲆ[181] = Yv(68, 68, 0, ΔⲆ[787], 3);
        this.ⵠᐃⲆ[181].id = 181;
        this.ⵠᐃⲆ[182] = Yv(68, 68, 0, ΔⲆ[790], 3);
        this.ⵠᐃⲆ[182].id = 182;
        this.ⵠᐃⲆ[183] = Yv(68, 68, 0, ΔⲆ[801], 3);
        this.ⵠᐃⲆ[183].id = 183;
        this.ⵠᐃⲆ[188] = Yv(68, 68, 0, ΔⲆ[810], 3);
        this.ⵠᐃⲆ[188].id = 188;
        this.ⵠᐃⲆ[189] = Yv(68, 68, 0, ΔⲆ[815], 3);
        this.ⵠᐃⲆ[189].id = 189;
        this.ⵠᐃⲆ[190] = Yv(68, 68, 0, ΔⲆ[844], 3);
        this.ⵠᐃⲆ[190].id = 190;
        this.ⵠᐃⲆ[191] = Yv(68, 68, 0, ΔⲆ[836], 3);
        this.ⵠᐃⲆ[191].id = 191;
        this.ⵠᐃⲆ[192] = Yv(68, 68, 0, ΔⲆ[841], 3);
        this.ⵠᐃⲆ[192].id = 192;
        this.ⵠᐃⲆ[193] = Yv(68, 68, 0, ΔⲆ[847], 3);
        this.ⵠᐃⲆ[193].id = 193;
        this.ⵠᐃⲆ[194] = Yv(68, 68, 0, ΔⲆ[851], 3);
        this.ⵠᐃⲆ[194].id = 194;
        this.ⵠᐃⲆ[206] = Yv(68, 68, 0, ΔⲆ[961], 3);
        this.ⵠᐃⲆ[206].id = 206;
        this.ⵠᐃⲆ[207] = Yv(68, 68, 0, ΔⲆ[974], 3);
        this.ⵠᐃⲆ[207].id = 207;
        this.ⵠᐃⲆ[204] = Yv(68, 68, 0, ΔⲆ[951], 3);
        this.ⵠᐃⲆ[204].id = 204;
        this.ⵠᐃⲆ[205] = Yv(68, 68, 0, ΔⲆ[956], 3);
        this.ⵠᐃⲆ[205].id = 205;
        this.ⵠᐃⲆ[208] = Yv(68, 68, 0, ΔⲆ[968], 3);
        this.ⵠᐃⲆ[208].id = 208;
        this.ⵠᐃⲆ[209] = Yv(68, 68, 0, ΔⲆ[973], 3);
        this.ⵠᐃⲆ[209].id = 209;
        this.ⵠᐃⲆ[210] = Yv(68, 68, 0, ΔⲆ[983], 3);
        this.ⵠᐃⲆ[210].id = 210;
        this.ⵠᐃⲆ[211] = Yv(68, 68, 0, ΔⲆ[988], 3);
        this.ⵠᐃⲆ[211].id = 211;
        this.ⵠᐃⲆ[41] = Yv(68, 68, 0, ΔⲆ[881], 3);
        this.ⵠᐃⲆ[41].id = 41;
        this.ⵠᐃⲆ[42] = Yv(68, 68, 0, ΔⲆ[883], 3);
        this.ⵠᐃⲆ[42].id = 42;
        this.ⵠᐃⲆ[12] = Yv(68, 68, 0, ΔⲆ[403], 3);
        this.ⵠᐃⲆ[12].id = 12;
        this.ⵠᐃⲆ[16] = Yv(68, 68, 0, ΔⲆ[875], 3);
        this.ⵠᐃⲆ[16].id = 16;
        this.ⵠᐃⲆ[196] = Yv(68, 68, 0, ΔⲆ[898], 3);
        this.ⵠᐃⲆ[196].id = 196;
        this.ⵠᐃⲆ[18] = Yv(68, 68, 0, ΔⲆ[899], 3);
        this.ⵠᐃⲆ[18].id = 18;
        this.ⵠᐃⲆ[197] = Yv(68, 68, 0, ΔⲆ[906], 3);
        this.ⵠᐃⲆ[197].id = 197;
        this.ⵠᐃⲆ[198] = Yv(68, 68, 0, ΔⲆ[908], 3);
        this.ⵠᐃⲆ[198].id = 198;
        this.ⵠᐃⲆ[61] = Yv(68, 68, 0, ΔⲆ[911], 3);
        this.ⵠᐃⲆ[61].id = 61;
        this.ⵠᐃⲆ[201] = Yv(68, 68, 0, ΔⲆ[871], 3);
        this.ⵠᐃⲆ[201].id = 201;
        this.ⵠᐃⲆ[199] = Yv(68, 68, 0, ΔⲆ[863], 3);
        this.ⵠᐃⲆ[199].id = 199;
        this.ⵠᐃⲆ[200] = Yv(68, 68, 0, ΔⲆ[868], 3);
        this.ⵠᐃⲆ[200].id = 200;
        this.ᐃⵠⵠᐃᐃ = [];
        for (m = 0; m < 250; m++) {
            this.ᐃⵠⵠᐃᐃ[m] = Yv(0, 0, 0, ΔⲆ[366]);
        }
        this.ᐃⵠᐃ = [];
        this.ᐃⵠᐃ[0] = Yv(60, 60, 0, ΔⲆ[261], 3);
        this.ᐃⵠᐃ[0].id = 0;
        this.ᐃⵠᐃ[1] = Yv(60, 60, 0, ΔⲆ[312], 3);
        this.ᐃⵠᐃ[1].id = 1;
        this.ᐃⵠᐃ[108] = Yv(60, 60, 0, ΔⲆ[315], 3);
        this.ᐃⵠᐃ[108].id = 108;
        this.ᐃⵠᐃ[108].info.ᐃΔ[2] = this.ᐃⵠᐃ[108].info.ᐃΔ[0];
        this.ᐃⵠᐃ[109] = Yv(60, 60, 0, ΔⲆ[316], 3);
        this.ᐃⵠᐃ[109].id = 109;
        this.ᐃⵠᐃ[109].info.ᐃΔ[2] = this.ᐃⵠᐃ[109].info.ᐃΔ[0];
        this.ᐃⵠᐃ[110] = Yv(60, 60, 0, ΔⲆ[277], 3);
        this.ᐃⵠᐃ[110].id = 110;
        this.ᐃⵠᐃ[233] = Yv(60, 60, 0, ΔⲆ[1154], 3);
        this.ᐃⵠᐃ[233].id = 233;
        this.ᐃⵠᐃ[111] = Yv(60, 60, 0, ΔⲆ[297], 3);
        this.ᐃⵠᐃ[111].id = 111;
        this.ᐃⵠᐃ[111].info.ᐃΔ[2] = this.ᐃⵠᐃ[111].info.ᐃΔ[0];
        this.ᐃⵠᐃ[112] = Yv(60, 60, 0, ΔⲆ[298], 3);
        this.ᐃⵠᐃ[112].id = 112;
        this.ᐃⵠᐃ[112].info.ᐃΔ[2] = this.ᐃⵠᐃ[112].info.ᐃΔ[0];
        this.ᐃⵠᐃ[3] = Yv(60, 60, 0, ΔⲆ[258], 3);
        this.ᐃⵠᐃ[3].id = 3;
        this.ᐃⵠᐃ[4] = Yv(60, 60, 0, ΔⲆ[296], 3);
        this.ᐃⵠᐃ[4].id = 4;
        this.ᐃⵠᐃ[5] = Yv(60, 60, 0, ΔⲆ[292], 3);
        this.ᐃⵠᐃ[5].id = 5;
        this.ᐃⵠᐃ[57] = Yv(60, 60, 0, ΔⲆ[829], 3);
        this.ᐃⵠᐃ[57].id = 57;
        this.ᐃⵠᐃ[6] = Yv(60, 60, 0, ΔⲆ[293], 3);
        this.ᐃⵠᐃ[6].id = 6;
        this.ᐃⵠᐃ[113] = Yv(60, 60, 0, ΔⲆ[309], 3);
        this.ᐃⵠᐃ[113].id = 113;
        this.ᐃⵠᐃ[114] = Yv(60, 60, 0, ΔⲆ[310], 3);
        this.ᐃⵠᐃ[114].id = 114;
        this.ᐃⵠᐃ[115] = Yv(60, 60, 0, ΔⲆ[311], 3);
        this.ᐃⵠᐃ[115].id = 115;
        this.ᐃⵠᐃ[162] = Yv(60, 60, 0, ΔⲆ[317], 3);
        this.ᐃⵠᐃ[162].id = 162;
        this.ᐃⵠᐃ[160] = Yv(60, 60, 0, ΔⲆ[319], 3);
        this.ᐃⵠᐃ[160].id = 160;
        this.ᐃⵠᐃ[8] = Yv(60, 60, 0, ΔⲆ[313], 3);
        this.ᐃⵠᐃ[8].id = 8;
        this.ᐃⵠᐃ[117] = Yv(60, 60, 0, ΔⲆ[323], 3);
        this.ᐃⵠᐃ[117].id = 117;
        this.ᐃⵠᐃ[116] = Yv(60, 60, 0, ΔⲆ[300], 3);
        this.ᐃⵠᐃ[116].id = 116;
        this.ᐃⵠᐃ[118] = Yv(60, 60, 0, ΔⲆ[328], 3);
        this.ᐃⵠᐃ[118].id = 118;
        this.ᐃⵠᐃ[195] = Yv(60, 60, 0, ΔⲆ[303], 3);
        this.ᐃⵠᐃ[195].id = 195;
        this.ᐃⵠᐃ[161] = Yv(60, 60, 0, ΔⲆ[305], 3);
        this.ᐃⵠᐃ[161].id = 161;
        this.ᐃⵠᐃ[161].info.ᐃΔ[2] = this.ᐃⵠᐃ[161].info.ᐃΔ[0];
        this.ᐃⵠᐃ[163] = Yv(60, 60, 0, ΔⲆ[329], 3);
        this.ᐃⵠᐃ[163].id = 163;
        this.ᐃⵠᐃ[164] = Yv(60, 60, 0, ΔⲆ[330], 3);
        this.ᐃⵠᐃ[164].id = 164;
        this.ᐃⵠᐃ[165] = Yv(60, 60, 0, ΔⲆ[331], 3);
        this.ᐃⵠᐃ[165].id = 165;
        this.ᐃⵠᐃ[166] = Yv(60, 60, 0, ΔⲆ[335], 3);
        this.ᐃⵠᐃ[166].id = 166;
        this.ᐃⵠᐃ[167] = Yv(60, 60, 0, ΔⲆ[337], 3);
        this.ᐃⵠᐃ[167].id = 167;
        this.ᐃⵠᐃ[168] = Yv(60, 60, 0, ΔⲆ[361], 3);
        this.ᐃⵠᐃ[168].id = 168;
        this.ᐃⵠᐃ[169] = Yv(60, 60, 0, ΔⲆ[362], 3);
        this.ᐃⵠᐃ[169].id = 169;
        this.ᐃⵠᐃ[170] = Yv(60, 60, 0, ΔⲆ[364], 3);
        this.ᐃⵠᐃ[170].id = 170;
        this.ᐃⵠᐃ[29] = Yv(60, 60, 0, ΔⲆ[392], 3);
        this.ᐃⵠᐃ[29].id = 29;
        this.ᐃⵠᐃ[10] = Yv(60, 60, 0, ΔⲆ[369], 3);
        this.ᐃⵠᐃ[10].id = 10;
        this.ᐃⵠᐃ[171] = Yv(60, 60, 0, ΔⲆ[372], 3);
        this.ᐃⵠᐃ[171].id = 171;
        this.ᐃⵠᐃ[172] = Yv(60, 60, 0, ΔⲆ[375], 3);
        this.ᐃⵠᐃ[172].id = 172;
        this.ᐃⵠᐃ[173] = Yv(60, 60, 0, ΔⲆ[378], 3);
        this.ᐃⵠᐃ[173].id = 173;
        this.ᐃⵠᐃ[2] = Yv(60, 60, 0, ΔⲆ[368], 3);
        this.ᐃⵠᐃ[2].id = 2;
        this.ᐃⵠᐃ[2].info.ᐃΔ[2] = this.ᐃⵠᐃ[2].info.ᐃΔ[0];
        this.ᐃⵠᐃ[237] = Yv(60, 60, 0, ΔⲆ[1162], 3);
        this.ᐃⵠᐃ[237].id = 237;
        this.ᐃⵠᐃ[237].info.ᐃΔ[2] = this.ᐃⵠᐃ[237].info.ᐃΔ[0];
        this.ᐃⵠᐃ[174] = Yv(60, 60, 0, ΔⲆ[393], 3);
        this.ᐃⵠᐃ[174].id = 174;
        this.ᐃⵠᐃ[174].info.ᐃΔ[2] = this.ᐃⵠᐃ[174].info.ᐃΔ[0];
        this.ᐃⵠᐃ[222] = Yv(60, 60, 0, ΔⲆ[1035], 3);
        this.ᐃⵠᐃ[222].id = 222;
        this.ᐃⵠᐃ[231] = Yv(60, 60, 0, ΔⲆ[1037], 3);
        this.ᐃⵠᐃ[231].id = 231;
        this.ᐃⵠᐃ[232] = Yv(60, 60, 0, ΔⲆ[1039], 3);
        this.ᐃⵠᐃ[232].id = 232;
        this.ᐃⵠᐃ[234] = Yv(60, 60, 0, ΔⲆ[1156], 3);
        this.ᐃⵠᐃ[234].id = 234;
        this.ᐃⵠᐃ[10] = Yv(60, 60, 0, ΔⲆ[369], 3);
        this.ᐃⵠᐃ[10].id = 10;
        this.ᐃⵠᐃ[11] = Yv(60, 60, 0, ΔⲆ[381], 3);
        this.ᐃⵠᐃ[11].id = 11;
        this.ᐃⵠᐃ[12] = Yv(60, 60, 0, ΔⲆ[401], 3);
        this.ᐃⵠᐃ[12].id = 12;
        this.ᐃⵠᐃ[13] = Yv(60, 60, 0, ΔⲆ[395], 3);
        this.ᐃⵠᐃ[13].id = 13;
        this.ᐃⵠᐃ[14] = Yv(60, 60, 0, ΔⲆ[398], 3);
        this.ᐃⵠᐃ[14].id = 14;
        this.ᐃⵠᐃ[15] = Yv(60, 60, 0, ΔⲆ[404], 3);
        this.ᐃⵠᐃ[15].id = 15;
        this.ᐃⵠᐃ[16] = Yv(60, 60, 0, ΔⲆ[874], 3);
        this.ᐃⵠᐃ[16].id = 16;
        this.ᐃⵠᐃ[119] = Yv(60, 60, 0, ΔⲆ[408], 3);
        this.ᐃⵠᐃ[119].id = 119;
        this.ᐃⵠᐃ[23] = Yv(60, 60, 0, ΔⲆ[420], 3);
        this.ᐃⵠᐃ[23].id = 23;
        this.ᐃⵠᐃ[24] = Yv(60, 60, 0, ΔⲆ[423], 3);
        this.ᐃⵠᐃ[24].id = 24;
        this.ᐃⵠᐃ[87] = Yv(60, 60, 0, ΔⲆ[1227], 3);
        this.ᐃⵠᐃ[87].id = 87;
        this.ᐃⵠᐃ[88] = Yv(60, 60, 0, ΔⲆ[1230], 3);
        this.ᐃⵠᐃ[88].id = 88;
        this.ᐃⵠᐃ[80] = Yv(60, 60, 0, ΔⲆ[1137], 3);
        this.ᐃⵠᐃ[80].id = 80;
        this.ᐃⵠᐃ[81] = Yv(60, 60, 0, ΔⲆ[1140], 3);
        this.ᐃⵠᐃ[81].id = 81;
        this.ᐃⵠᐃ[64] = Yv(60, 60, 0, ΔⲆ[569], 3);
        this.ᐃⵠᐃ[64].id = 64;
        this.ᐃⵠᐃ[101] = Yv(60, 60, 0, ΔⲆ[1166], 3);
        this.ᐃⵠᐃ[101].id = 101;
        this.ᐃⵠᐃ[71] = Yv(60, 60, 0, ΔⲆ[1239], 3);
        this.ᐃⵠᐃ[71].id = 71;
        this.ᐃⵠᐃ[65] = Yv(60, 60, 0, ΔⲆ[572], 3);
        this.ᐃⵠᐃ[65].id = 65;
        this.ᐃⵠᐃ[102] = Yv(60, 60, 0, ΔⲆ[1169], 3);
        this.ᐃⵠᐃ[102].id = 102;
        this.ᐃⵠᐃ[72] = Yv(60, 60, 0, ΔⲆ[1242], 3);
        this.ᐃⵠᐃ[72].id = 72;
        this.ᐃⵠᐃ[66] = Yv(60, 60, 0, ΔⲆ[575], 3);
        this.ᐃⵠᐃ[66].id = 66;
        this.ᐃⵠᐃ[103] = Yv(60, 60, 0, ΔⲆ[1172], 3);
        this.ᐃⵠᐃ[103].id = 103;
        this.ᐃⵠᐃ[73] = Yv(60, 60, 0, ΔⲆ[1245], 3);
        this.ᐃⵠᐃ[73].id = 73;
        this.ᐃⵠᐃ[67] = Yv(60, 60, 0, ΔⲆ[578], 3);
        this.ᐃⵠᐃ[67].id = 67;
        this.ᐃⵠᐃ[104] = Yv(60, 60, 0, ΔⲆ[1175], 3);
        this.ᐃⵠᐃ[104].id = 104;
        this.ᐃⵠᐃ[74] = Yv(60, 60, 0, ΔⲆ[1248], 3);
        this.ᐃⵠᐃ[74].id = 74;
        this.ᐃⵠᐃ[68] = Yv(60, 60, 0, ΔⲆ[581], 3);
        this.ᐃⵠᐃ[68].id = 68;
        this.ᐃⵠᐃ[105] = Yv(60, 60, 0, ΔⲆ[1178], 3);
        this.ᐃⵠᐃ[105].id = 105;
        this.ᐃⵠᐃ[75] = Yv(60, 60, 0, ΔⲆ[1251], 3);
        this.ᐃⵠᐃ[75].id = 75;
        this.ᐃⵠᐃ[69] = Yv(60, 60, 0, ΔⲆ[584], 3);
        this.ᐃⵠᐃ[69].id = 69;
        this.ᐃⵠᐃ[106] = Yv(60, 60, 0, ΔⲆ[1181], 3);
        this.ᐃⵠᐃ[106].id = 106;
        this.ᐃⵠᐃ[76] = Yv(60, 60, 0, ΔⲆ[1254], 3);
        this.ᐃⵠᐃ[76].id = 76;
        this.ᐃⵠᐃ[70] = Yv(60, 60, 0, ΔⲆ[587], 3);
        this.ᐃⵠᐃ[70].id = 70;
        this.ᐃⵠᐃ[107] = Yv(60, 60, 0, ΔⲆ[1184], 3);
        this.ᐃⵠᐃ[107].id = 107;
        this.ᐃⵠᐃ[94] = Yv(60, 60, 0, ΔⲆ[1257], 3);
        this.ᐃⵠᐃ[94].id = 94;
        this.ᐃⵠᐃ[95] = Yv(60, 60, 0, ΔⲆ[1260], 3);
        this.ᐃⵠᐃ[95].id = 95;
        this.ᐃⵠᐃ[96] = Yv(60, 60, 0, ΔⲆ[1263], 3);
        this.ᐃⵠᐃ[96].id = 96;
        this.ᐃⵠᐃ[97] = Yv(60, 60, 0, ΔⲆ[1266], 3);
        this.ᐃⵠᐃ[97].id = 97;
        this.ᐃⵠᐃ[98] = Yv(60, 60, 0, ΔⲆ[1269], 3);
        this.ᐃⵠᐃ[98].id = 98;
        this.ᐃⵠᐃ[99] = Yv(60, 60, 0, ΔⲆ[1272], 3);
        this.ᐃⵠᐃ[99].id = 99;
        this.ᐃⵠᐃ[58] = Yv(60, 60, 0, ΔⲆ[826], 3);
        this.ᐃⵠᐃ[58].id = 58;
        this.ᐃⵠᐃ[25] = Yv(60, 60, 0, ΔⲆ[429], 3);
        this.ᐃⵠᐃ[25].id = 25;
        this.ᐃⵠᐃ[26] = Yv(60, 60, 0, ΔⲆ[432], 3);
        this.ᐃⵠᐃ[26].id = 26;
        this.ᐃⵠᐃ[27] = Yv(60, 60, 0, ΔⲆ[435], 3);
        this.ᐃⵠᐃ[27].id = 27;
        this.ᐃⵠᐃ[28] = Yv(60, 60, 0, ΔⲆ[438], 3);
        this.ᐃⵠᐃ[28].id = 28;
        this.ᐃⵠᐃ[120] = Yv(60, 60, 0, ΔⲆ[441], 3);
        this.ᐃⵠᐃ[120].id = 120;
        this.ᐃⵠᐃ[120].info.ᐃΔ[2] = this.ᐃⵠᐃ[120].info.ᐃΔ[0];
        this.ᐃⵠᐃ[29] = Yv(60, 60, 0, ΔⲆ[392], 3);
        this.ᐃⵠᐃ[29].id = 29;
        this.ᐃⵠᐃ[121] = Yv(60, 60, 0, ΔⲆ[418], 3);
        this.ᐃⵠᐃ[121].id = 121;
        this.ᐃⵠᐃ[121].info.ᐃΔ[2] = this.ᐃⵠᐃ[121].info.ᐃΔ[0];
        this.ᐃⵠᐃ[30] = Yv(60, 60, 0, ΔⲆ[455], 3);
        this.ᐃⵠᐃ[30].id = 30;
        this.ᐃⵠᐃ[9] = Yv(60, 60, 0, ΔⲆ[860], 3);
        this.ᐃⵠᐃ[9].id = 9;
        this.ᐃⵠᐃ[31] = Yv(60, 60, 0, ΔⲆ[458], 3);
        this.ᐃⵠᐃ[31].id = 31;
        this.ᐃⵠᐃ[32] = Yv(60, 60, 0, ΔⲆ[1017], 3);
        this.ᐃⵠᐃ[32].id = 32;
        this.ᐃⵠᐃ[33] = Yv(60, 60, 0, ΔⲆ[472], 3);
        this.ᐃⵠᐃ[33].id = 33;
        this.ᐃⵠᐃ[35] = Yv(60, 60, 0, ΔⲆ[477], 3);
        this.ᐃⵠᐃ[35].id = 35;
        this.ᐃⵠᐃ[36] = Yv(60, 60, 0, ΔⲆ[480], 3);
        this.ᐃⵠᐃ[36].id = 36;
        this.ᐃⵠᐃ[37] = Yv(60, 60, 0, ΔⲆ[483], 3);
        this.ᐃⵠᐃ[37].id = 37;
        this.ᐃⵠᐃ[38] = Yv(60, 60, 0, ΔⲆ[486], 3);
        this.ᐃⵠᐃ[38].id = 38;
        this.ᐃⵠᐃ[39] = Yv(60, 60, 0, ΔⲆ[489], 3);
        this.ᐃⵠᐃ[39].id = 39;
        this.ᐃⵠᐃ[122] = Yv(60, 60, 0, ΔⲆ[492], 3);
        this.ᐃⵠᐃ[122].id = 122;
        this.ᐃⵠᐃ[123] = Yv(60, 60, 0, ΔⲆ[495], 3);
        this.ᐃⵠᐃ[123].id = 123;
        this.ᐃⵠᐃ[124] = Yv(60, 60, 0, ΔⲆ[499], 3);
        this.ᐃⵠᐃ[124].id = 124;
        this.ᐃⵠᐃ[40] = Yv(60, 60, 0, ΔⲆ[502], 3);
        this.ᐃⵠᐃ[40].id = 40;
        this.ᐃⵠᐃ[146] = Yv(60, 60, 0, ΔⲆ[505], 3);
        this.ᐃⵠᐃ[146].id = 146;
        this.ᐃⵠᐃ[146].info.ᐃΔ[2] = this.ᐃⵠᐃ[146].info.ᐃΔ[0];
        this.ᐃⵠᐃ[240] = Yv(60, 60, 0, ΔⲆ[1233], 3);
        this.ᐃⵠᐃ[240].id = 240;
        this.ᐃⵠᐃ[240].info.ᐃΔ[2] = this.ᐃⵠᐃ[240].info.ᐃΔ[0];
        this.ᐃⵠᐃ[147] = Yv(60, 60, 0, ΔⲆ[513], 3);
        this.ᐃⵠᐃ[147].id = 147;
        this.ᐃⵠᐃ[147].info.ᐃΔ[2] = this.ᐃⵠᐃ[147].info.ᐃΔ[0];
        this.ᐃⵠᐃ[148] = Yv(60, 60, 0, ΔⲆ[518], 3);
        this.ᐃⵠᐃ[148].id = 148;
        this.ᐃⵠᐃ[148].info.ᐃΔ[2] = this.ᐃⵠᐃ[148].info.ᐃΔ[0];
        this.ᐃⵠᐃ[149] = Yv(60, 60, 0, ΔⲆ[521], 3);
        this.ᐃⵠᐃ[149].id = 149;
        this.ᐃⵠᐃ[150] = Yv(60, 60, 0, ΔⲆ[523], 3);
        this.ᐃⵠᐃ[150].id = 150;
        this.ᐃⵠᐃ[151] = Yv(60, 60, 0, ΔⲆ[529], 3);
        this.ᐃⵠᐃ[151].id = 151;
        this.ᐃⵠᐃ[158] = Yv(60, 60, 0, ΔⲆ[532], 3);
        this.ᐃⵠᐃ[158].id = 158;
        this.ᐃⵠᐃ[159] = Yv(60, 60, 0, ΔⲆ[553], 3);
        this.ᐃⵠᐃ[159].id = 159;
        this.ᐃⵠᐃ[43] = Yv(60, 60, 0, ΔⲆ[541], 3);
        this.ᐃⵠᐃ[43].id = 43;
        this.ᐃⵠᐃ[45] = Yv(60, 60, 0, ΔⲆ[550], 3);
        this.ᐃⵠᐃ[45].id = 45;
        this.ᐃⵠᐃ[125] = Yv(60, 60, 0, ΔⲆ[605], 3);
        this.ᐃⵠᐃ[125].id = 125;
        this.ᐃⵠᐃ[221] = Yv(60, 60, 0, ΔⲆ[1236], 3);
        this.ᐃⵠᐃ[221].id = 221;
        this.ᐃⵠᐃ[223] = Yv(60, 60, 0, ΔⲆ[1028], 3);
        this.ᐃⵠᐃ[223].id = 223;
        this.ᐃⵠᐃ[224] = Yv(60, 60, 0, ΔⲆ[1031], 3);
        this.ᐃⵠᐃ[224].id = 224;
        this.ᐃⵠᐃ[230] = Yv(60, 60, 0, ΔⲆ[1117], 3);
        this.ᐃⵠᐃ[230].id = 230;
        this.ᐃⵠᐃ[89] = Yv(60, 60, 0, ΔⲆ[1046], 3);
        this.ᐃⵠᐃ[89].id = 89;
        this.ᐃⵠᐃ[225] = Yv(60, 60, 0, ΔⲆ[1049], 3);
        this.ᐃⵠᐃ[225].id = 225;
        this.ᐃⵠᐃ[226] = Yv(60, 60, 0, ΔⲆ[1189], 3);
        this.ᐃⵠᐃ[226].id = 226;
        this.ᐃⵠᐃ[227] = Yv(60, 60, 0, ΔⲆ[1080], 3);
        this.ᐃⵠᐃ[227].id = 227;
        this.ᐃⵠᐃ[239] = Yv(60, 60, 0, ΔⲆ[1224], 3);
        this.ᐃⵠᐃ[239].id = 239;
        this.ᐃⵠᐃ[228] = Yv(60, 60, 0, ΔⲆ[1095], 3);
        this.ᐃⵠᐃ[228].id = 228;
        this.ᐃⵠᐃ[229] = Yv(60, 60, 0, ΔⲆ[1110], 3);
        this.ᐃⵠᐃ[229].id = 229;
        this.ᐃⵠᐃ[126] = Yv(60, 60, 0, ΔⲆ[609], 3);
        this.ᐃⵠᐃ[126].id = 126;
        this.ᐃⵠᐃ[126].info.ᐃΔ[2] = this.ᐃⵠᐃ[126].info.ᐃΔ[0];
        this.ᐃⵠᐃ[127] = Yv(60, 60, 0, ΔⲆ[613], 3);
        this.ᐃⵠᐃ[127].id = 127;
        this.ᐃⵠᐃ[128] = Yv(60, 60, 0, ΔⲆ[612], 3);
        this.ᐃⵠᐃ[128].id = 128;
        this.ᐃⵠᐃ[46] = Yv(60, 60, 0, ΔⲆ[616], 3);
        this.ᐃⵠᐃ[46].id = 46;
        this.ᐃⵠᐃ[50] = Yv(60, 60, 0, ΔⲆ[699], 3);
        this.ᐃⵠᐃ[50].id = 50;
        this.ᐃⵠᐃ[51] = Yv(60, 60, 0, ΔⲆ[702], 3);
        this.ᐃⵠᐃ[51].id = 51;
        this.ᐃⵠᐃ[52] = Yv(60, 60, 0, ΔⲆ[705], 3);
        this.ᐃⵠᐃ[52].id = 52;
        this.ᐃⵠᐃ[55] = Yv(60, 60, 0, ΔⲆ[709], 3);
        this.ᐃⵠᐃ[55].id = 55;
        this.ᐃⵠᐃ[129] = Yv(60, 60, 0, ΔⲆ[624], 3);
        this.ᐃⵠᐃ[129].id = 129;
        this.ᐃⵠᐃ[129].info.ᐃΔ[2] = this.ᐃⵠᐃ[129].info.ᐃΔ[0];
        this.ᐃⵠᐃ[130] = Yv(60, 60, 0, ΔⲆ[626], 3);
        this.ᐃⵠᐃ[130].id = 130;
        this.ᐃⵠᐃ[131] = Yv(60, 60, 0, ΔⲆ[629], 3);
        this.ᐃⵠᐃ[131].id = 131;
        this.ᐃⵠᐃ[131].info.ᐃΔ[2] = this.ᐃⵠᐃ[131].info.ᐃΔ[0];
        this.ᐃⵠᐃ[132] = Yv(60, 60, 0, ΔⲆ[631], 3);
        this.ᐃⵠᐃ[132].id = 132;
        this.ᐃⵠᐃ[133] = Yv(60, 60, 0, ΔⲆ[634], 3);
        this.ᐃⵠᐃ[133].id = 133;
        this.ᐃⵠᐃ[134] = Yv(60, 60, 0, ΔⲆ[639], 3);
        this.ᐃⵠᐃ[134].id = 134;
        this.ᐃⵠᐃ[134].info.ᐃΔ[2] = this.ᐃⵠᐃ[134].info.ᐃΔ[0];
        this.ᐃⵠᐃ[135] = Yv(60, 60, 0, ΔⲆ[644], 3);
        this.ᐃⵠᐃ[135].id = 135;
        this.ᐃⵠᐃ[47] = Yv(60, 60, 0, ΔⲆ[646], 3);
        this.ᐃⵠᐃ[47].id = 47;
        this.ᐃⵠᐃ[48] = Yv(60, 60, 0, ΔⲆ[649], 3);
        this.ᐃⵠᐃ[48].id = 48;
        this.ᐃⵠᐃ[49] = Yv(60, 60, 0, ΔⲆ[652], 3);
        this.ᐃⵠᐃ[49].id = 49;
        this.ᐃⵠᐃ[136] = Yv(60, 60, 0, ΔⲆ[659], 3);
        this.ᐃⵠᐃ[136].id = 136;
        this.ᐃⵠᐃ[143] = Yv(60, 60, 0, ΔⲆ[143], 3);
        this.ᐃⵠᐃ[143].id = 143;
        this.ᐃⵠᐃ[137] = Yv(60, 60, 0, ΔⲆ[662], 3);
        this.ᐃⵠᐃ[137].id = 137;
        this.ᐃⵠᐃ[138] = Yv(60, 60, 0, ΔⲆ[664], 3);
        this.ᐃⵠᐃ[138].id = 138;
        this.ᐃⵠᐃ[139] = Yv(60, 60, 0, ΔⲆ[674], 3);
        this.ᐃⵠᐃ[139].id = 139;
        this.ᐃⵠᐃ[139].info.ᐃΔ[2] = this.ᐃⵠᐃ[139].info.ᐃΔ[0];
        this.ᐃⵠᐃ[140] = Yv(60, 60, 0, ΔⲆ[140], 3);
        this.ᐃⵠᐃ[140].id = 140;
        this.ᐃⵠᐃ[140].info.ᐃΔ[2] = this.ᐃⵠᐃ[140].info.ᐃΔ[0];
        this.ᐃⵠᐃ[141] = Yv(60, 60, 0, ΔⲆ[685], 3);
        this.ᐃⵠᐃ[141].id = 141;
        this.ᐃⵠᐃ[142] = Yv(60, 60, 0, ΔⲆ[142], 3);
        this.ᐃⵠᐃ[142].id = 142;
        this.ᐃⵠᐃ[142].info.ᐃΔ[2] = this.ᐃⵠᐃ[142].info.ᐃΔ[0];
        this.ᐃⵠᐃ[144] = Yv(60, 60, 0, ΔⲆ[717], 3);
        this.ᐃⵠᐃ[144].id = 144;
        this.ᐃⵠᐃ[145] = Yv(60, 60, 0, ΔⲆ[145], 3);
        this.ᐃⵠᐃ[145].id = 145;
        this.ᐃⵠᐃ[59] = Yv(60, 60, 0, ΔⲆ[732], 3);
        this.ᐃⵠᐃ[59].id = 59;
        this.ᐃⵠᐃ[62] = Yv(60, 60, 0, ΔⲆ[563], 3);
        this.ᐃⵠᐃ[62].id = 62;
        this.ᐃⵠᐃ[185] = Yv(60, 60, 0, ΔⲆ[252], 3);
        this.ᐃⵠᐃ[185].id = 185;
        this.ᐃⵠᐃ[185].info.ᐃΔ[2] = this.ᐃⵠᐃ[185].info.ᐃΔ[0];
        this.ᐃⵠᐃ[184] = Yv(60, 60, 0, ΔⲆ[751], 3);
        this.ᐃⵠᐃ[184].id = 184;
        this.ᐃⵠᐃ[184].info.ᐃΔ[2] = this.ᐃⵠᐃ[184].info.ᐃΔ[0];
        this.ᐃⵠᐃ[17] = Yv(60, 60, 0, ΔⲆ[877], 3);
        this.ᐃⵠᐃ[17].id = 17;
        this.ᐃⵠᐃ[63] = Yv(60, 60, 0, ΔⲆ[566], 3);
        this.ᐃⵠᐃ[63].id = 63;
        this.ᐃⵠᐃ[187] = Yv(60, 60, 0, ΔⲆ[253], 3);
        this.ᐃⵠᐃ[187].id = 187;
        this.ᐃⵠᐃ[187].info.ᐃΔ[2] = this.ᐃⵠᐃ[187].info.ᐃΔ[0];
        this.ᐃⵠᐃ[186] = Yv(60, 60, 0, ΔⲆ[753], 3);
        this.ᐃⵠᐃ[186].id = 186;
        this.ᐃⵠᐃ[186].info.ᐃΔ[2] = this.ᐃⵠᐃ[186].info.ᐃΔ[0];
        this.ᐃⵠᐃ[77] = Yv(60, 60, 0, ΔⲆ[756], 3);
        this.ᐃⵠᐃ[77].id = 77;
        this.ᐃⵠᐃ[175] = Yv(60, 60, 0, ΔⲆ[176], 3);
        this.ᐃⵠᐃ[175].id = 175;
        this.ᐃⵠᐃ[175].info.ᐃΔ[2] = this.ᐃⵠᐃ[175].info.ᐃΔ[0];
        this.ᐃⵠᐃ[176] = Yv(60, 60, 0, ΔⲆ[177], 3);
        this.ᐃⵠᐃ[176].id = 176;
        this.ᐃⵠᐃ[176].info.ᐃΔ[2] = this.ᐃⵠᐃ[176].info.ᐃΔ[0];
        this.ᐃⵠᐃ[78] = Yv(60, 60, 0, ΔⲆ[760], 3);
        this.ᐃⵠᐃ[78].id = 78;
        this.ᐃⵠᐃ[177] = Yv(60, 60, 0, ΔⲆ[175], 3);
        this.ᐃⵠᐃ[177].id = 177;
        this.ᐃⵠᐃ[177].info.ᐃΔ[2] = this.ᐃⵠᐃ[177].info.ᐃΔ[0];
        this.ᐃⵠᐃ[79] = Yv(60, 60, 0, ΔⲆ[764], 3);
        this.ᐃⵠᐃ[79].id = 79;
        this.ᐃⵠᐃ[83] = Yv(60, 60, 0, ΔⲆ[767], 3);
        this.ᐃⵠᐃ[83].id = 83;
        this.ᐃⵠᐃ[84] = Yv(60, 60, 0, ΔⲆ[771], 3);
        this.ᐃⵠᐃ[84].id = 84;
        this.ᐃⵠᐃ[178] = Yv(60, 60, 0, ΔⲆ[178], 3);
        this.ᐃⵠᐃ[178].id = 178;
        this.ᐃⵠᐃ[179] = Yv(60, 60, 0, ΔⲆ[179], 3);
        this.ᐃⵠᐃ[179].id = 179;
        this.ᐃⵠᐃ[86] = Yv(60, 60, 0, ΔⲆ[776], 3);
        this.ᐃⵠᐃ[86].id = 86;
        this.ᐃⵠᐃ[85] = Yv(60, 60, 0, ΔⲆ[779], 3);
        this.ᐃⵠᐃ[85].id = 85;
        this.ᐃⵠᐃ[180] = Yv(60, 60, 0, ΔⲆ[180], 3);
        this.ᐃⵠᐃ[180].id = 180;
        this.ᐃⵠᐃ[181] = Yv(60, 60, 0, ΔⲆ[181], 3);
        this.ᐃⵠᐃ[181].id = 181;
        this.ᐃⵠᐃ[182] = Yv(60, 60, 0, ΔⲆ[789], 3);
        this.ᐃⵠᐃ[182].id = 182;
        this.ᐃⵠᐃ[183] = Yv(60, 60, 0, ΔⲆ[800], 3);
        this.ᐃⵠᐃ[183].id = 183;
        this.ᐃⵠᐃ[188] = Yv(60, 60, 0, ΔⲆ[808], 3);
        this.ᐃⵠᐃ[188].id = 188;
        this.ᐃⵠᐃ[189] = Yv(60, 60, 0, ΔⲆ[814], 3);
        this.ᐃⵠᐃ[189].id = 189;
        this.ᐃⵠᐃ[191] = Yv(60, 60, 0, ΔⲆ[834], 3);
        this.ᐃⵠᐃ[191].id = 191;
        this.ᐃⵠᐃ[192] = Yv(60, 60, 0, ΔⲆ[840], 3);
        this.ᐃⵠᐃ[192].id = 192;
        this.ᐃⵠᐃ[190] = Yv(60, 60, 0, ΔⲆ[842], 3);
        this.ᐃⵠᐃ[190].id = 190;
        this.ᐃⵠᐃ[193] = Yv(60, 60, 0, ΔⲆ[845], 3);
        this.ᐃⵠᐃ[193].id = 193;
        this.ᐃⵠᐃ[194] = Yv(60, 60, 0, ΔⲆ[850], 3);
        this.ᐃⵠᐃ[194].id = 194;
        this.ᐃⵠᐃ[204] = Yv(60, 60, 0, ΔⲆ[949], 3);
        this.ᐃⵠᐃ[204].id = 204;
        this.ᐃⵠᐃ[205] = Yv(60, 60, 0, ΔⲆ[955], 3);
        this.ᐃⵠᐃ[205].id = 205;
        this.ᐃⵠᐃ[206] = Yv(60, 60, 0, ΔⲆ[959], 3);
        this.ᐃⵠᐃ[206].id = 206;
        this.ᐃⵠᐃ[207] = Yv(60, 60, 0, ΔⲆ[965], 3);
        this.ᐃⵠᐃ[207].id = 207;
        this.ᐃⵠᐃ[208] = Yv(60, 60, 0, ΔⲆ[966], 3);
        this.ᐃⵠᐃ[208].id = 208;
        this.ᐃⵠᐃ[209] = Yv(60, 60, 0, ΔⲆ[972], 3);
        this.ᐃⵠᐃ[209].id = 209;
        this.ᐃⵠᐃ[210] = Yv(60, 60, 0, ΔⲆ[981], 3);
        this.ᐃⵠᐃ[210].id = 210;
        this.ᐃⵠᐃ[211] = Yv(60, 60, 0, ΔⲆ[987], 3);
        this.ᐃⵠᐃ[211].id = 211;
        this.ᐃⵠᐃ[41] = Yv(60, 60, 0, ΔⲆ[880], 3);
        this.ᐃⵠᐃ[41].id = 41;
        this.ᐃⵠᐃ[42] = Yv(60, 60, 0, ΔⲆ[882], 3);
        this.ᐃⵠᐃ[42].id = 42;
        this.ᐃⵠᐃ[12] = Yv(60, 60, 0, ΔⲆ[401], 3);
        this.ᐃⵠᐃ[12].id = 12;
        this.ᐃⵠᐃ[16] = Yv(60, 60, 0, ΔⲆ[874], 3);
        this.ᐃⵠᐃ[16].id = 16;
        this.ᐃⵠᐃ[196] = Yv(60, 60, 0, ΔⲆ[196], 3);
        this.ᐃⵠᐃ[196].id = 196;
        this.ᐃⵠᐃ[18] = Yv(60, 60, 0, ΔⲆ[901], 3);
        this.ᐃⵠᐃ[18].id = 18;
        this.ᐃⵠᐃ[197] = Yv(60, 60, 0, ΔⲆ[197], 3);
        this.ᐃⵠᐃ[197].id = 197;
        this.ᐃⵠᐃ[198] = Yv(60, 60, 0, ΔⲆ[907], 3);
        this.ᐃⵠᐃ[198].id = 198;
        this.ᐃⵠᐃ[61] = Yv(60, 60, 0, ΔⲆ[910], 3);
        this.ᐃⵠᐃ[61].id = 61;
        this.ᐃⵠᐃ[201] = Yv(60, 60, 0, ΔⲆ[870], 3);
        this.ᐃⵠᐃ[201].id = 201;
        this.ᐃⵠᐃ[200] = Yv(60, 60, 0, ΔⲆ[200], 3);
        this.ᐃⵠᐃ[200].id = 200;
        this.ᐃⵠᐃ[199] = Yv(60, 60, 0, ΔⲆ[865], 3);
        this.ᐃⵠᐃ[199].id = 199;
        this.Δⵠⵠ = [];
        this.Δⵠⵠ[35] = Yv(60, 60, 0, ΔⲆ[254], 3);
        this.Δⵠⵠ[35].id = 35;
        this.Δⵠⵠ[5] = Yv(60, 60, 0, ΔⲆ[256], 3);
        this.Δⵠⵠ[5].id = 5;
        this.Δⵠⵠ[0] = Yv(60, 60, 0, ΔⲆ[302], 3);
        this.Δⵠⵠ[0].id = 0;
        this.Δⵠⵠ[3] = Yv(60, 60, 0, ΔⲆ[262], 3);
        this.Δⵠⵠ[3].id = 3;
        this.Δⵠⵠ[55] = Yv(60, 60, 0, ΔⲆ[318], 3);
        this.Δⵠⵠ[55].id = 55;
        this.Δⵠⵠ[67] = Yv(60, 60, 0, ΔⲆ[320], 3);
        this.Δⵠⵠ[67].id = 67;
        this.Δⵠⵠ[40] = Yv(60, 60, 0, ΔⲆ[284], 3);
        this.Δⵠⵠ[40].id = 40;
        this.Δⵠⵠ[6] = Yv(60, 60, 0, ΔⲆ[295], 3);
        this.Δⵠⵠ[6].id = 6;
        this.Δⵠⵠ[7] = Yv(60, 60, 0, ΔⲆ[257], 3);
        this.Δⵠⵠ[7].id = 7;
        this.Δⵠⵠ[36] = Yv(60, 60, 0, ΔⲆ[290], 3);
        this.Δⵠⵠ[36].id = 36;
        this.Δⵠⵠ[34] = Yv(60, 60, 0, ΔⲆ[830], 3);
        this.Δⵠⵠ[34].id = 34;
        this.Δⵠⵠ[37] = Yv(60, 60, 0, ΔⲆ[291], 3);
        this.Δⵠⵠ[37].id = 37;
        this.Δⵠⵠ[4] = Yv(60, 60, 0, ΔⲆ[314], 3);
        this.Δⵠⵠ[4].id = 4;
        this.Δⵠⵠ[49] = Yv(60, 60, 0, ΔⲆ[325], 3);
        this.Δⵠⵠ[49].id = 49;
        this.Δⵠⵠ[1] = Yv(60, 60, 0, ΔⲆ[327], 3);
        this.Δⵠⵠ[1].id = 1;
        this.Δⵠⵠ[54] = Yv(60, 60, 0, ΔⲆ[304], 3);
        this.Δⵠⵠ[54].id = 54;
        this.Δⵠⵠ[56] = Yv(60, 60, 0, ΔⲆ[263], 3);
        this.Δⵠⵠ[56].id = 56;
        this.Δⵠⵠ[57] = Yv(60, 60, 0, ΔⲆ[265], 3);
        this.Δⵠⵠ[57].id = 57;
        this.Δⵠⵠ[58] = Yv(60, 60, 0, ΔⲆ[332], 3);
        this.Δⵠⵠ[58].id = 58;
        this.Δⵠⵠ[61] = Yv(60, 60, 0, ΔⲆ[268], 3);
        this.Δⵠⵠ[61].id = 61;
        this.Δⵠⵠ[79] = Yv(60, 60, 0, ΔⲆ[338], 3);
        this.Δⵠⵠ[79].id = 79;
        this.Δⵠⵠ[68] = Yv(60, 60, 0, ΔⲆ[360], 3);
        this.Δⵠⵠ[68].id = 68;
        this.Δⵠⵠ[69] = Yv(60, 60, 0, ΔⲆ[363], 3);
        this.Δⵠⵠ[69].id = 69;
        this.Δⵠⵠ[70] = Yv(60, 60, 0, ΔⲆ[365], 3);
        this.Δⵠⵠ[70].id = 70;
        this.Δⵠⵠ[100] = Yv(60, 60, 0, ΔⲆ[367], 3);
        this.Δⵠⵠ[100].id = 100;
        this.Δⵠⵠ[83] = Yv(60, 60, 0, ΔⲆ[370], 3);
        this.Δⵠⵠ[83].id = 83;
        this.Δⵠⵠ[62] = Yv(60, 60, 0, ΔⲆ[371], 3);
        this.Δⵠⵠ[62].id = 62;
        this.Δⵠⵠ[63] = Yv(60, 60, 0, ΔⲆ[374], 3);
        this.Δⵠⵠ[63].id = 63;
        this.Δⵠⵠ[64] = Yv(60, 60, 0, ΔⲆ[377], 3);
        this.Δⵠⵠ[64].id = 64;
        this.Δⵠⵠ[83] = Yv(60, 60, 0, ΔⲆ[370], 3);
        this.Δⵠⵠ[83].id = 83;
        this.Δⵠⵠ[84] = Yv(60, 60, 0, ΔⲆ[380], 3);
        this.Δⵠⵠ[84].id = 84;
        this.Δⵠⵠ[25] = Yv(60, 60, 0, ΔⲆ[402], 3);
        this.Δⵠⵠ[25].id = 25;
        this.Δⵠⵠ[26] = Yv(60, 60, 0, ΔⲆ[396], 3);
        this.Δⵠⵠ[26].id = 26;
        this.Δⵠⵠ[27] = Yv(60, 60, 0, ΔⲆ[399], 3);
        this.Δⵠⵠ[27].id = 27;
        this.Δⵠⵠ[28] = Yv(60, 60, 0, ΔⲆ[405], 3);
        this.Δⵠⵠ[28].id = 28;
        this.Δⵠⵠ[31] = Yv(60, 60, 0, ΔⲆ[876], 3);
        this.Δⵠⵠ[31].id = 31;
        this.Δⵠⵠ[2] = Yv(60, 60, 0, ΔⲆ[409], 3);
        this.Δⵠⵠ[2].id = 2;
        this.Δⵠⵠ[80] = Yv(60, 60, 0, ΔⲆ[421], 3);
        this.Δⵠⵠ[80].id = 80;
        this.Δⵠⵠ[81] = Yv(60, 60, 0, ΔⲆ[424], 3);
        this.Δⵠⵠ[81].id = 81;
        this.Δⵠⵠ[Hr.ᐃⵠᐃⵠⲆ] = Yv(60, 60, 0, ΔⲆ[1228], 3);
        this.Δⵠⵠ[Hr.ᐃⵠᐃⵠⲆ].id = Hr.ᐃⵠᐃⵠⲆ;
        this.Δⵠⵠ[86] = Yv(60, 60, 0, ΔⲆ[1231], 3);
        this.Δⵠⵠ[86].id = 86;
        this.Δⵠⵠ[98] = Yv(60, 60, 0, ΔⲆ[1138], 3);
        this.Δⵠⵠ[98].id = 98;
        this.Δⵠⵠ[99] = Yv(60, 60, 0, ΔⲆ[1141], 3);
        this.Δⵠⵠ[99].id = 99;
        this.Δⵠⵠ[131] = Yv(60, 60, 0, ΔⲆ[570], 3);
        this.Δⵠⵠ[131].id = 131;
        this.Δⵠⵠ[132] = Yv(60, 60, 0, ΔⲆ[1168], 3);
        this.Δⵠⵠ[132].id = 132;
        this.Δⵠⵠ[145] = Yv(60, 60, 0, ΔⲆ[1238], 3);
        this.Δⵠⵠ[145].id = 145;
        this.Δⵠⵠ[133] = Yv(60, 60, 0, ΔⲆ[573], 3);
        this.Δⵠⵠ[133].id = 133;
        this.Δⵠⵠ[134] = Yv(60, 60, 0, ΔⲆ[1171], 3);
        this.Δⵠⵠ[134].id = 134;
        this.Δⵠⵠ[146] = Yv(60, 60, 0, ΔⲆ[1241], 3);
        this.Δⵠⵠ[146].id = 146;
        this.Δⵠⵠ[135] = Yv(60, 60, 0, ΔⲆ[576], 3);
        this.Δⵠⵠ[135].id = 135;
        this.Δⵠⵠ[136] = Yv(60, 60, 0, ΔⲆ[1174], 3);
        this.Δⵠⵠ[136].id = 136;
        this.Δⵠⵠ[147] = Yv(60, 60, 0, ΔⲆ[1244], 3);
        this.Δⵠⵠ[147].id = 147;
        this.Δⵠⵠ[137] = Yv(60, 60, 0, ΔⲆ[579], 3);
        this.Δⵠⵠ[137].id = 137;
        this.Δⵠⵠ[138] = Yv(60, 60, 0, ΔⲆ[1177], 3);
        this.Δⵠⵠ[138].id = 138;
        this.Δⵠⵠ[167] = Yv(60, 60, 0, ΔⲆ[1256], 3);
        this.Δⵠⵠ[167].id = 167;
        this.Δⵠⵠ[168] = Yv(60, 60, 0, ΔⲆ[1259], 3);
        this.Δⵠⵠ[168].id = 168;
        this.Δⵠⵠ[169] = Yv(60, 60, 0, ΔⲆ[1262], 3);
        this.Δⵠⵠ[169].id = 169;
        this.Δⵠⵠ[170] = Yv(60, 60, 0, ΔⲆ[1265], 3);
        this.Δⵠⵠ[170].id = 170;
        this.Δⵠⵠ[171] = Yv(60, 60, 0, ΔⲆ[1268], 3);
        this.Δⵠⵠ[171].id = 171;
        this.Δⵠⵠ[172] = Yv(60, 60, 0, ΔⲆ[1271], 3);
        this.Δⵠⵠ[172].id = 172;
        this.Δⵠⵠ[148] = Yv(60, 60, 0, ΔⲆ[1247], 3);
        this.Δⵠⵠ[148].id = 148;
        this.Δⵠⵠ[139] = Yv(60, 60, 0, ΔⲆ[582], 3);
        this.Δⵠⵠ[139].id = 139;
        this.Δⵠⵠ[140] = Yv(60, 60, 0, ΔⲆ[1180], 3);
        this.Δⵠⵠ[140].id = 140;
        this.Δⵠⵠ[149] = Yv(60, 60, 0, ΔⲆ[1250], 3);
        this.Δⵠⵠ[149].id = 149;
        this.Δⵠⵠ[141] = Yv(60, 60, 0, ΔⲆ[585], 3);
        this.Δⵠⵠ[141].id = 141;
        this.Δⵠⵠ[142] = Yv(60, 60, 0, ΔⲆ[1183], 3);
        this.Δⵠⵠ[142].id = 142;
        this.Δⵠⵠ[150] = Yv(60, 60, 0, ΔⲆ[1253], 3);
        this.Δⵠⵠ[150].id = 150;
        this.Δⵠⵠ[143] = Yv(60, 60, 0, ΔⲆ[588], 3);
        this.Δⵠⵠ[143].id = 143;
        this.Δⵠⵠ[144] = Yv(60, 60, 0, ΔⲆ[1186], 3);
        this.Δⵠⵠ[144].id = 144;
        this.Δⵠⵠ[87] = Yv(60, 60, 0, ΔⲆ[827], 3);
        this.Δⵠⵠ[87].id = 87;
        this.Δⵠⵠ[88] = Yv(60, 60, 0, ΔⲆ[430], 3);
        this.Δⵠⵠ[88].id = 88;
        this.Δⵠⵠ[89] = Yv(60, 60, 0, ΔⲆ[433], 3);
        this.Δⵠⵠ[89].id = 89;
        this.Δⵠⵠ[90] = Yv(60, 60, 0, ΔⲆ[436], 3);
        this.Δⵠⵠ[90].id = 90;
        this.Δⵠⵠ[24] = Yv(60, 60, 0, ΔⲆ[439], 3);
        this.Δⵠⵠ[24].id = 24;
        this.Δⵠⵠ[101] = Yv(60, 60, 0, ΔⲆ[442], 3);
        this.Δⵠⵠ[101].id = 101;
        this.Δⵠⵠ[100] = Yv(60, 60, 0, ΔⲆ[367], 3);
        this.Δⵠⵠ[100].id = 100;
        this.Δⵠⵠ[38] = Yv(60, 60, 0, ΔⲆ[456], 3);
        this.Δⵠⵠ[38].id = 38;
        this.Δⵠⵠ[Hr.ᐃΔᐃᐃᐃ] = Yv(60, 60, 0, ΔⲆ[861], 3);
        this.Δⵠⵠ[Hr.ᐃΔᐃᐃᐃ].id = Hr.ᐃΔᐃᐃᐃ;
        this.Δⵠⵠ[8] = Yv(60, 60, 0, ΔⲆ[460], 3);
        this.Δⵠⵠ[8].id = 8;
        this.Δⵠⵠ[9] = Yv(60, 60, 0, ΔⲆ[1019], 3);
        this.Δⵠⵠ[9].id = 9;
        this.Δⵠⵠ[29] = Yv(60, 60, 0, ΔⲆ[473], 3);
        this.Δⵠⵠ[29].id = 29;
        this.Δⵠⵠ[10] = Yv(60, 60, 0, ΔⲆ[478], 3);
        this.Δⵠⵠ[10].id = 10;
        this.Δⵠⵠ[11] = Yv(60, 60, 0, ΔⲆ[481], 3);
        this.Δⵠⵠ[11].id = 11;
        this.Δⵠⵠ[12] = Yv(60, 60, 0, ΔⲆ[484], 3);
        this.Δⵠⵠ[12].id = 12;
        this.Δⵠⵠ[13] = Yv(60, 60, 0, ΔⲆ[487], 3);
        this.Δⵠⵠ[13].id = 13;
        this.Δⵠⵠ[14] = Yv(60, 60, 0, ΔⲆ[490], 3);
        this.Δⵠⵠ[14].id = 14;
        this.Δⵠⵠ[59] = Yv(60, 60, 0, ΔⲆ[493], 3);
        this.Δⵠⵠ[59].id = 59;
        this.Δⵠⵠ[71] = Yv(60, 60, 0, ΔⲆ[496], 3);
        this.Δⵠⵠ[71].id = 71;
        this.Δⵠⵠ[65] = Yv(60, 60, 0, ΔⲆ[498], 3);
        this.Δⵠⵠ[65].id = 65;
        this.Δⵠⵠ[85] = Yv(60, 60, 0, ΔⲆ[503], 3);
        this.Δⵠⵠ[85].id = 85;
        this.Δⵠⵠ[102] = Yv(60, 60, 0, ΔⲆ[515], 3);
        this.Δⵠⵠ[102].id = 102;
        this.Δⵠⵠ[103] = Yv(60, 60, 0, ΔⲆ[519], 3);
        this.Δⵠⵠ[103].id = 103;
        this.Δⵠⵠ[115] = Yv(60, 60, 0, ΔⲆ[530], 3);
        this.Δⵠⵠ[115].id = 115;
        this.Δⵠⵠ[104] = Yv(60, 60, 0, ΔⲆ[533], 3);
        this.Δⵠⵠ[104].id = 104;
        this.Δⵠⵠ[105] = Yv(60, 60, 0, ΔⲆ[555], 3);
        this.Δⵠⵠ[105].id = 105;
        this.Δⵠⵠ[91] = Yv(60, 60, 0, ΔⲆ[542], 3);
        this.Δⵠⵠ[91].id = 91;
        this.Δⵠⵠ[15] = Yv(60, 60, 0, ΔⲆ[551], 3);
        this.Δⵠⵠ[15].id = 15;
        this.Δⵠⵠ[106] = Yv(60, 60, 0, ΔⲆ[604], 3);
        this.Δⵠⵠ[106].id = 106;
        this.Δⵠⵠ[108] = Yv(60, 60, 0, ΔⲆ[1235], 3);
        this.Δⵠⵠ[108].id = 108;
        this.Δⵠⵠ[163] = Yv(60, 60, 0, ΔⲆ[1027], 3);
        this.Δⵠⵠ[163].id = 163;
        this.Δⵠⵠ[164] = Yv(60, 60, 0, ΔⲆ[1030], 3);
        this.Δⵠⵠ[164].id = 164;
        this.Δⵠⵠ[166] = Yv(60, 60, 0, ΔⲆ[1116], 3);
        this.Δⵠⵠ[166].id = 166;
        this.Δⵠⵠ[165] = Yv(60, 60, 0, ΔⲆ[1048], 3);
        this.Δⵠⵠ[165].id = 165;
        this.Δⵠⵠ[Hr.ⵠⲆᐃⲆᐃ] = Yv(60, 60, 0, ΔⲆ[1051], 3);
        this.Δⵠⵠ[Hr.ⵠⲆᐃⲆᐃ].id = Hr.ⵠⲆᐃⲆᐃ;
        this.Δⵠⵠ[Hr.ⵠᐃᐃΔⵠ] = Yv(60, 60, 0, ΔⲆ[1082], 3);
        this.Δⵠⵠ[Hr.ⵠᐃᐃΔⵠ].id = Hr.ⵠᐃᐃΔⵠ;
        this.Δⵠⵠ[Hr.ΔⲆⲆⵠⲆ] = Yv(60, 60, 0, ΔⲆ[1226], 3);
        this.Δⵠⵠ[Hr.ΔⲆⲆⵠⲆ].id = Hr.ΔⲆⲆⵠⲆ;
        this.Δⵠⵠ[Hr.Δᐃᐃⵠᐃ] = Yv(60, 60, 0, ΔⲆ[1191], 3);
        this.Δⵠⵠ[Hr.Δᐃᐃⵠᐃ].id = Hr.Δᐃᐃⵠᐃ;
        this.Δⵠⵠ[110] = Yv(60, 60, 0, ΔⲆ[611], 3);
        this.Δⵠⵠ[110].id = 110;
        this.Δⵠⵠ[111] = Yv(60, 60, 0, ΔⲆ[715], 3);
        this.Δⵠⵠ[111].id = 111;
        this.Δⵠⵠ[112] = Yv(60, 60, 0, ΔⲆ[715], 3);
        this.Δⵠⵠ[112].id = 112;
        this.Δⵠⵠ[113] = Yv(60, 60, 0, ΔⲆ[715], 3);
        this.Δⵠⵠ[113].id = 113;
        this.Δⵠⵠ[16] = Yv(60, 60, 0, ΔⲆ[618], 3);
        this.Δⵠⵠ[16].id = 16;
        this.Δⵠⵠ[17] = Yv(60, 60, 0, ΔⲆ[700], 3);
        this.Δⵠⵠ[17].id = 17;
        this.Δⵠⵠ[18] = Yv(60, 60, 0, ΔⲆ[704], 3);
        this.Δⵠⵠ[18].id = 18;
        this.Δⵠⵠ[19] = Yv(60, 60, 0, ΔⲆ[706], 3);
        this.Δⵠⵠ[19].id = 19;
        this.Δⵠⵠ[122] = Yv(60, 60, 0, ΔⲆ[711], 3);
        this.Δⵠⵠ[122].id = 122;
        this.Δⵠⵠ[20] = Yv(60, 60, 0, ΔⲆ[627], 3);
        this.Δⵠⵠ[20].id = 20;
        this.Δⵠⵠ[41] = Yv(60, 60, 0, ΔⲆ[632], 3);
        this.Δⵠⵠ[41].id = 41;
        this.Δⵠⵠ[52] = Yv(60, 60, 0, ΔⲆ[635], 3);
        this.Δⵠⵠ[52].id = 52;
        this.Δⵠⵠ[114] = Yv(60, 60, 0, ΔⲆ[643], 3);
        this.Δⵠⵠ[114].id = 114;
        this.Δⵠⵠ[94] = Yv(60, 60, 0, ΔⲆ[647], 3);
        this.Δⵠⵠ[94].id = 94;
        this.Δⵠⵠ[93] = Yv(60, 60, 0, ΔⲆ[650], 3);
        this.Δⵠⵠ[93].id = 93;
        this.Δⵠⵠ[21] = Yv(60, 60, 0, ΔⲆ[654], 3);
        this.Δⵠⵠ[21].id = 21;
        this.Δⵠⵠ[53] = Yv(60, 60, 0, ΔⲆ[660], 3);
        this.Δⵠⵠ[53].id = 53;
        this.Δⵠⵠ[51] = Yv(60, 60, 0, ΔⲆ[690], 3);
        this.Δⵠⵠ[51].id = 51;
        this.Δⵠⵠ[50] = Yv(60, 60, 0, ΔⲆ[666], 3);
        this.Δⵠⵠ[50].id = 50;
        this.Δⵠⵠ[109] = Yv(60, 60, 0, ΔⲆ[684], 3);
        this.Δⵠⵠ[109].id = 109;
        this.Δⵠⵠ[124] = Yv(60, 60, 0, ΔⲆ[718], 3);
        this.Δⵠⵠ[124].id = 124;
        this.Δⵠⵠ[125] = Yv(60, 60, 0, ΔⲆ[730], 3);
        this.Δⵠⵠ[125].id = 125;
        this.Δⵠⵠ[126] = Yv(60, 60, 0, ΔⲆ[734], 3);
        this.Δⵠⵠ[126].id = 126;
        this.Δⵠⵠ[129] = Yv(60, 60, 0, ΔⲆ[563], 3);
        this.Δⵠⵠ[129].id = 129;
        this.Δⵠⵠ[151] = Yv(60, 60, 0, ΔⲆ[758], 3);
        this.Δⵠⵠ[151].id = 151;
        this.Δⵠⵠ[152] = Yv(60, 60, 0, ΔⲆ[762], 3);
        this.Δⵠⵠ[152].id = 152;
        this.Δⵠⵠ[153] = Yv(60, 60, 0, ΔⲆ[770], 3);
        this.Δⵠⵠ[153].id = 153;
        this.Δⵠⵠ[154] = Yv(60, 60, 0, ΔⲆ[768], 3);
        this.Δⵠⵠ[154].id = 154;
        this.Δⵠⵠ[155] = Yv(60, 60, 0, ΔⲆ[772], 3);
        this.Δⵠⵠ[155].id = 155;
        this.Δⵠⵠ[157] = Yv(60, 60, 0, ΔⲆ[777], 3);
        this.Δⵠⵠ[157].id = 157;
        this.Δⵠⵠ[156] = Yv(60, 60, 0, ΔⲆ[780], 3);
        this.Δⵠⵠ[156].id = 156;
        this.Δⵠⵠ[158] = Yv(60, 60, 0, ΔⲆ[784], 3);
        this.Δⵠⵠ[158].id = 158;
        this.Δⵠⵠ[159] = Yv(60, 60, 0, ΔⲆ[785], 3);
        this.Δⵠⵠ[159].id = 159;
        this.Δⵠⵠ[160] = Yv(60, 60, 0, ΔⲆ[791], 3);
        this.Δⵠⵠ[160].id = 160;
        this.Δⵠⵠ[161] = Yv(60, 60, 0, ΔⲆ[799], 3);
        this.Δⵠⵠ[161].id = 161;
        this.Δⵠⵠ[42] = Yv(60, 60, 0, ΔⲆ[809], 3);
        this.Δⵠⵠ[42].id = 42;
        this.Δⵠⵠ[43] = Yv(60, 60, 0, ΔⲆ[835], 3);
        this.Δⵠⵠ[43].id = 43;
        this.Δⵠⵠ[107] = Yv(60, 60, 0, ΔⲆ[843], 3);
        this.Δⵠⵠ[107].id = 107;
        this.Δⵠⵠ[44] = Yv(60, 60, 0, ΔⲆ[846], 3);
        this.Δⵠⵠ[44].id = 44;
        this.Δⵠⵠ[46] = Yv(60, 60, 0, ΔⲆ[960], 3);
        this.Δⵠⵠ[46].id = 46;
        this.Δⵠⵠ[45] = Yv(60, 60, 0, ΔⲆ[950], 3);
        this.Δⵠⵠ[45].id = 45;
        this.Δⵠⵠ[47] = Yv(60, 60, 0, ΔⲆ[967], 3);
        this.Δⵠⵠ[47].id = 47;
        this.Δⵠⵠ[48] = Yv(60, 60, 0, ΔⲆ[982], 3);
        this.Δⵠⵠ[48].id = 48;
        this.Δⵠⵠ[25] = Yv(60, 60, 0, ΔⲆ[402], 3);
        this.Δⵠⵠ[25].id = 25;
        this.Δⵠⵠ[31] = Yv(60, 60, 0, ΔⲆ[876], 3);
        this.Δⵠⵠ[31].id = 31;
        this.Δⵠⵠ[33] = Yv(60, 60, 0, ΔⲆ[900], 3);
        this.Δⵠⵠ[33].id = 33;
        this.Δⵠⵠ[162] = Yv(60, 60, 0, ΔⲆ[909], 3);
        this.Δⵠⵠ[162].id = 162;
        this.Δⵠⵠ[128] = Yv(60, 60, 0, ΔⲆ[912], 3);
        this.Δⵠⵠ[128].id = 128;
        this.ⵠᐃⲆ[53] = Yv(68, 68, 0, ΔⲆ[976], 3);
        this.ⵠᐃⲆ[53].id = 53;
        this.ᐃⵠᐃ[53] = Yv(60, 60, 0, ΔⲆ[975], 3);
        this.ᐃⵠᐃ[53].id = 53;
        this.Δⵠⵠ[22] = Yv(60, 60, 0, ΔⲆ[977], 3);
        this.Δⵠⵠ[22].id = 22;
        this.ⵠᐃⲆ[54] = Yv(68, 68, 0, ΔⲆ[979], 3);
        this.ⵠᐃⲆ[54].id = 54;
        this.ᐃⵠᐃ[54] = Yv(60, 60, 0, ΔⲆ[978], 3);
        this.ᐃⵠᐃ[54].id = 54;
        this.Δⵠⵠ[23] = Yv(60, 60, 0, ΔⲆ[980], 3);
        this.Δⵠⵠ[23].id = 23;
        this.ⵠᐃⲆ[56] = Yv(68, 68, 0, ΔⲆ[713], 3);
        this.ⵠᐃⲆ[56].id = 56;
        this.ᐃⵠᐃ[56] = Yv(60, 60, 0, ΔⲆ[712], 3);
        this.ᐃⵠᐃ[56].id = 56;
        this.Δⵠⵠ[123] = Yv(60, 60, 0, ΔⲆ[714], 3);
        this.Δⵠⵠ[123].id = 123;
        this.ⵠᐃⲆ[82] = Yv(68, 68, 0, ΔⲆ[428], 3);
        this.ⵠᐃⲆ[82].id = 82;
        this.ᐃⵠᐃ[82] = Yv(60, 60, 0, ΔⲆ[426], 3);
        this.ᐃⵠᐃ[82].id = 82;
        this.Δⵠⵠ[82] = Yv(60, 60, 0, ΔⲆ[427], 3);
        this.Δⵠⵠ[82].id = 82;
        this.ⵠᐃⲆ[235] = Yv(68, 68, 0, ΔⲆ[1159], 3);
        this.ⵠᐃⲆ[235].id = 235;
        this.ᐃⵠᐃ[235] = Yv(60, 60, 0, ΔⲆ[1158], 3);
        this.ᐃⵠᐃ[235].id = 235;
        this.ⵠᐃⲆ[238] = Yv(68, 68, 0, ΔⲆ[1188], 3);
        this.ⵠᐃⲆ[238].id = 238;
        this.ᐃⵠᐃ[238] = Yv(60, 60, 0, ΔⲆ[1187], 3);
        this.ᐃⵠᐃ[238].id = 238;
        this.ⵠᐃⲆ[236] = Yv(68, 68, 0, ΔⲆ[1161], 3);
        this.ⵠᐃⲆ[236].id = 236;
        this.ᐃⵠᐃ[236] = Yv(60, 60, 0, ΔⲆ[1160], 3);
        this.ᐃⵠᐃ[236].id = 236;
        this.ⵠᐃⲆ[152] = Yv(68, 68, 0, ΔⲆ[1197], 3);
        this.ⵠᐃⲆ[152].id = 152;
        this.ᐃⵠᐃ[152] = Yv(60, 60, 0, ΔⲆ[1195], 3);
        this.ᐃⵠᐃ[152].id = 152;
        this.Δⵠⵠ[116] = Yv(60, 60, 0, ΔⲆ[1196], 3);
        this.Δⵠⵠ[116].id = 116;
        this.ⵠᐃⲆ[212] = Yv(68, 68, 0, ΔⲆ[992], 3);
        this.ⵠᐃⲆ[212].id = 212;
        this.ᐃⵠᐃ[212] = Yv(60, 60, 0, ΔⲆ[991], 3);
        this.ᐃⵠᐃ[212].id = 212;
        this.Δⵠⵠ[73] = Yv(60, 60, 0, ΔⲆ[990], 3);
        this.Δⵠⵠ[73].id = 73;
        this.ⵠᐃⲆ[213] = Yv(68, 68, 0, ΔⲆ[995], 3);
        this.ⵠᐃⲆ[213].id = 213;
        this.ᐃⵠᐃ[213] = Yv(60, 60, 0, ΔⲆ[994], 3);
        this.ᐃⵠᐃ[213].id = 213;
        this.Δⵠⵠ[74] = Yv(60, 60, 0, ΔⲆ[993], 3);
        this.Δⵠⵠ[74].id = 74;
        this.ⵠᐃⲆ[214] = Yv(68, 68, 0, ΔⲆ[998], 3);
        this.ⵠᐃⲆ[214].id = 214;
        this.ᐃⵠᐃ[214] = Yv(60, 60, 0, ΔⲆ[997], 3);
        this.ᐃⵠᐃ[214].id = 214;
        this.Δⵠⵠ[75] = Yv(60, 60, 0, ΔⲆ[996], 3);
        this.Δⵠⵠ[75].id = 75;
        this.ⵠᐃⲆ[215] = Yv(68, 68, 0, ΔⲆ[1001], 3);
        this.ⵠᐃⲆ[215].id = 215;
        this.ᐃⵠᐃ[215] = Yv(60, 60, 0, ΔⲆ[1000], 3);
        this.ᐃⵠᐃ[215].id = 215;
        this.Δⵠⵠ[76] = Yv(60, 60, 0, ΔⲆ[999], 3);
        this.Δⵠⵠ[76].id = 76;
        this.ⵠᐃⲆ[216] = Yv(68, 68, 0, ΔⲆ[1004], 3);
        this.ⵠᐃⲆ[216].id = 216;
        this.ᐃⵠᐃ[216] = Yv(60, 60, 0, ΔⲆ[1003], 3);
        this.ᐃⵠᐃ[216].id = 216;
        this.Δⵠⵠ[77] = Yv(60, 60, 0, ΔⲆ[1002], 3);
        this.Δⵠⵠ[77].id = 77;
        this.ⵠᐃⲆ[220] = Yv(68, 68, 0, ΔⲆ[1007], 3);
        this.ⵠᐃⲆ[220].id = 220;
        this.ᐃⵠᐃ[220] = Yv(60, 60, 0, ΔⲆ[1006], 3);
        this.ᐃⵠᐃ[220].id = 220;
        this.Δⵠⵠ[78] = Yv(60, 60, 0, ΔⲆ[1005], 3);
        this.Δⵠⵠ[78].id = 78;
        this.ⵠᐃⲆ[217] = Yv(68, 68, 0, ΔⲆ[1016], 3);
        this.ⵠᐃⲆ[217].id = 217;
        this.ᐃⵠᐃ[217] = Yv(60, 60, 0, ΔⲆ[1015], 3);
        this.ᐃⵠᐃ[217].id = 217;
        this.Δⵠⵠ[60] = Yv(60, 60, 0, ΔⲆ[1014], 3);
        this.Δⵠⵠ[60].id = 60;
        this.ⵠᐃⲆ[219] = Yv(68, 68, 0, ΔⲆ[1013], 3);
        this.ⵠᐃⲆ[219].id = 219;
        this.ᐃⵠᐃ[219] = Yv(60, 60, 0, ΔⲆ[1012], 3);
        this.ᐃⵠᐃ[219].id = 219;
        this.Δⵠⵠ[72] = Yv(60, 60, 0, ΔⲆ[1011], 3);
        this.Δⵠⵠ[72].id = 72;
        this.ⵠᐃⲆ[218] = Yv(68, 68, 0, ΔⲆ[1010], 3);
        this.ⵠᐃⲆ[218].id = 218;
        this.ᐃⵠᐃ[218] = Yv(60, 60, 0, ΔⲆ[1009], 3);
        this.ᐃⵠᐃ[218].id = 218;
        this.Δⵠⵠ[66] = Yv(60, 60, 0, ΔⲆ[1008], 3);
        this.Δⵠⵠ[66].id = 66;
        this.ⵠᐃⲆ[153] = Yv(68, 68, 0, ΔⲆ[1201], 3);
        this.ⵠᐃⲆ[153].id = 153;
        this.ᐃⵠᐃ[153] = Yv(60, 60, 0, ΔⲆ[1199], 3);
        this.ᐃⵠᐃ[153].id = 153;
        this.Δⵠⵠ[117] = Yv(60, 60, 0, ΔⲆ[1200], 3);
        this.Δⵠⵠ[117].id = 117;
        this.ⵠᐃⲆ[154] = Yv(68, 68, 0, ΔⲆ[1205], 3);
        this.ⵠᐃⲆ[154].id = 154;
        this.ᐃⵠᐃ[154] = Yv(60, 60, 0, ΔⲆ[1203], 3);
        this.ᐃⵠᐃ[154].id = 154;
        this.Δⵠⵠ[118] = Yv(60, 60, 0, ΔⲆ[1204], 3);
        this.Δⵠⵠ[118].id = 118;
        this.ⵠᐃⲆ[155] = Yv(68, 68, 0, ΔⲆ[1209], 3);
        this.ⵠᐃⲆ[155].id = 155;
        this.ᐃⵠᐃ[155] = Yv(60, 60, 0, ΔⲆ[1207], 3);
        this.ᐃⵠᐃ[155].id = 155;
        this.Δⵠⵠ[119] = Yv(60, 60, 0, ΔⲆ[1208], 3);
        this.Δⵠⵠ[119].id = 119;
        this.ⵠᐃⲆ[156] = Yv(68, 68, 0, ΔⲆ[1213], 3);
        this.ⵠᐃⲆ[156].id = 156;
        this.ᐃⵠᐃ[156] = Yv(60, 60, 0, ΔⲆ[1211], 3);
        this.ᐃⵠᐃ[156].id = 156;
        this.Δⵠⵠ[120] = Yv(60, 60, 0, ΔⲆ[1212], 3);
        this.Δⵠⵠ[120].id = 120;
        this.ⵠᐃⲆ[157] = Yv(68, 68, 0, ΔⲆ[1217], 3);
        this.ⵠᐃⲆ[157].id = 157;
        this.ᐃⵠᐃ[157] = Yv(60, 60, 0, ΔⲆ[1215], 3);
        this.ᐃⵠᐃ[157].id = 157;
        this.Δⵠⵠ[121] = Yv(60, 60, 0, ΔⲆ[1216], 3);
        this.Δⵠⵠ[121].id = 121;
        this.ⵠᐃⲆ[203] = Yv(68, 68, 0, ΔⲆ[937], 3);
        this.ⵠᐃⲆ[203].id = 203;
        this.ᐃⵠᐃ[203] = Yv(60, 60, 0, ΔⲆ[936], 3);
        this.ᐃⵠᐃ[203].id = 203;
        this.ᐃⵠᐃ[203].info.ᐃΔ[2] = this.ᐃⵠᐃ[203].info.ᐃΔ[0];
        this.ⵠᐃⲆ[150] = Yv(68, 68, 0, ΔⲆ[524], 3);
        this.ⵠᐃⲆ[150].id = 150;
        this.ᐃⵠᐃ[150] = Yv(60, 60, 0, ΔⲆ[523], 3);
        this.ᐃⵠᐃ[150].id = 150;
        this.ᐃⵠᐃ[150].info.ᐃΔ[2] = this.ᐃⵠᐃ[150].info.ᐃΔ[0];
        this.ⵠᐃⲆ[202] = Yv(68, 68, 0, ΔⲆ[939], 3);
        this.ⵠᐃⲆ[202].id = 202;
        this.ᐃⵠᐃ[202] = Yv(60, 60, 0, ΔⲆ[938], 3);
        this.ᐃⵠᐃ[202].id = 202;
        this.ᐃⵠᐃ[202].info.ᐃΔ[2] = this.ᐃⵠᐃ[202].info.ᐃΔ[0];
        this.ⵠᐃⲆ[19] = Yv(68, 68, 0, ΔⲆ[934], 3);
        this.ⵠᐃⲆ[19].id = 19;
        this.ᐃⵠᐃ[19] = Yv(60, 60, 0, ΔⲆ[932], 3);
        this.ᐃⵠᐃ[19].id = 19;
        this.Δⵠⵠ[39] = Yv(60, 60, 0, ΔⲆ[933], 3);
        this.Δⵠⵠ[39].id = 39;
        this.ⵠᐃⲆ[20] = Yv(68, 68, 0, ΔⲆ[923], 3);
        this.ⵠᐃⲆ[20].id = 20;
        this.ᐃⵠᐃ[20] = Yv(60, 60, 0, ΔⲆ[921], 3);
        this.ᐃⵠᐃ[20].id = 20;
        this.Δⵠⵠ[95] = Yv(60, 60, 0, ΔⲆ[922], 3);
        this.Δⵠⵠ[95].id = 95;
        this.ⵠᐃⲆ[21] = Yv(68, 68, 0, ΔⲆ[927], 3);
        this.ⵠᐃⲆ[21].id = 21;
        this.ᐃⵠᐃ[21] = Yv(60, 60, 0, ΔⲆ[925], 3);
        this.ᐃⵠᐃ[21].id = 21;
        this.Δⵠⵠ[96] = Yv(60, 60, 0, ΔⲆ[926], 3);
        this.Δⵠⵠ[96].id = 96;
        this.ⵠᐃⲆ[22] = Yv(68, 68, 0, ΔⲆ[931], 3);
        this.ⵠᐃⲆ[22].id = 22;
        this.ᐃⵠᐃ[22] = Yv(60, 60, 0, ΔⲆ[929], 3);
        this.ᐃⵠᐃ[22].id = 22;
        this.Δⵠⵠ[97] = Yv(60, 60, 0, ΔⲆ[930], 3);
        this.Δⵠⵠ[97].id = 97;
        this.ⵠᐃⲆ[60] = Yv(68, 68, 0, ΔⲆ[736], 3);
        this.ⵠᐃⲆ[60].id = 60;
        this.ᐃⵠᐃ[60] = Yv(60, 60, 0, ΔⲆ[735], 3);
        this.ᐃⵠᐃ[60].id = 60;
        this.Δⵠⵠ[127] = Yv(60, 60, 0, ΔⲆ[737], 3);
        this.Δⵠⵠ[127].id = 127;
        this.ⵠᐃⲆ[90] = Yv(68, 68, 0, ΔⲆ[739], 3);
        this.ⵠᐃⲆ[90].id = 90;
        this.ᐃⵠᐃ[90] = Yv(60, 60, 0, ΔⲆ[738], 3);
        this.ᐃⵠᐃ[90].id = 90;
        this.Δⵠⵠ[173] = Yv(60, 60, 0, ΔⲆ[740], 3);
        this.Δⵠⵠ[173].id = 173;
        this.ⵠᐃⲆ[92] = Yv(68, 68, 0, ΔⲆ[745], 3);
        this.ⵠᐃⲆ[92].id = 92;
        this.ᐃⵠᐃ[92] = Yv(60, 60, 0, ΔⲆ[744], 3);
        this.ᐃⵠᐃ[92].id = 92;
        this.Δⵠⵠ[174] = Yv(60, 60, 0, ΔⲆ[746], 3);
        this.Δⵠⵠ[174].id = 174;
        this.ⵠᐃⲆ[93] = Yv(68, 68, 0, ΔⲆ[748], 3);
        this.ⵠᐃⲆ[93].id = 93;
        this.ᐃⵠᐃ[93] = Yv(60, 60, 0, ΔⲆ[747], 3);
        this.ᐃⵠᐃ[93].id = 93;
        this.Δⵠⵠ[175] = Yv(60, 60, 0, ΔⲆ[749], 3);
        this.Δⵠⵠ[175].id = 175;
        this.ⵠᐃⲆ[91] = Yv(68, 68, 0, ΔⲆ[742], 3);
        this.ⵠᐃⲆ[91].id = 91;
        this.ᐃⵠᐃ[91] = Yv(60, 60, 0, ΔⲆ[741], 3);
        this.ᐃⵠᐃ[91].id = 91;
        this.Δⵠⵠ[176] = Yv(60, 60, 0, ΔⲆ[743], 3);
        this.Δⵠⵠ[176].id = 176;
        this.ⵠᐃⲆ[100] = Yv(68, 68, 0, ΔⲆ[1165], 3);
        this.ⵠᐃⲆ[100].id = 100;
        this.ᐃⵠᐃ[100] = Yv(60, 60, 0, ΔⲆ[1164], 3);
        this.ᐃⵠᐃ[100].id = 100;
        this.Δⵠⵠ[Hr.ᐃᐃΔᐃᐃ] = Yv(60, 60, 0, ΔⲆ[Gr.ᐃⵠΔⵠⵠⵠⲆⲆⵠ], 3);
        this.Δⵠⵠ[Hr.ᐃᐃΔᐃᐃ].id = Hr.ᐃᐃΔᐃᐃ;
        this.ⵠᐃⲆ[34] = Yv(68, 68, 0, ΔⲆ[945], 3);
        this.ⵠᐃⲆ[34].id = 34;
        this.ᐃⵠᐃ[34] = Yv(60, 60, 0, ΔⲆ[943], 3);
        this.ᐃⵠᐃ[34].id = 34;
        this.Δⵠⵠ[30] = Yv(60, 60, 0, ΔⲆ[944], 3);
        this.Δⵠⵠ[30].id = 30;
        this.ⵠᐃⲆ[44] = Yv(68, 68, 0, ΔⲆ[948], 3);
        this.ⵠᐃⲆ[44].id = 44;
        this.ᐃⵠᐃ[44] = Yv(60, 60, 0, ΔⲆ[946], 3);
        this.ᐃⵠᐃ[44].id = 44;
        this.Δⵠⵠ[92] = Yv(60, 60, 0, ΔⲆ[947], 3);
        this.Δⵠⵠ[92].id = 92;
        this.ⵠᐃⲆ[17] = Yv(68, 68, 0, ΔⲆ[878], 3);
        this.ⵠᐃⲆ[17].id = 17;
        this.ᐃⵠᐃ[17] = Yv(60, 60, 0, ΔⲆ[877], 3);
        this.ᐃⵠᐃ[17].id = 17;
        this.Δⵠⵠ[32] = Yv(60, 60, 0, ΔⲆ[879], 3);
        this.Δⵠⵠ[32].id = 32;
        this.ⵠᐃⲆ[63] = Yv(68, 68, 0, ΔⲆ[568], 3);
        this.ⵠᐃⲆ[63].id = 63;
        this.ᐃⵠᐃ[63] = Yv(60, 60, 0, ΔⲆ[566], 3);
        this.ᐃⵠᐃ[63].id = 63;
        this.Δⵠⵠ[130] = Yv(60, 60, 0, ΔⲆ[567], 3);
        this.Δⵠⵠ[130].id = 130;
        this.ⵠᐃⲆ[187] = Yv(68, 68, 0, ΔⲆ[591], 3);
        this.ⵠᐃⲆ[187].id = 187;
        this.ᐃⵠᐃ[187] = Yv(60, 60, 0, ΔⲆ[253], 3);
        this.ᐃⵠᐃ[187].id = 187;
        this.ⵠᐃⲆ[Lr.ᐃⵠⲆΔⵠⵠΔ] = Yv(68, 68, 0, ΔⲆ[Gr.ΔΔΔⲆᐃΔΔⵠⵠ], 3);
        this.ⵠᐃⲆ[Lr.ᐃⵠⲆΔⵠⵠΔ].id = Lr.ᐃⵠⲆΔⵠⵠΔ;
        this.ᐃⵠᐃ[Lr.ᐃⵠⲆΔⵠⵠΔ] = Yv(60, 60, 0, ΔⲆ[Gr.ⵠⵠᐃΔΔΔⵠⵠⵠ], 3);
        this.ᐃⵠᐃ[Lr.ᐃⵠⲆΔⵠⵠΔ].id = Lr.ᐃⵠⲆΔⵠⵠΔ;
        this.ⵠᐃⲆ[Lr.ᐃᐃΔΔⲆᐃⵠ] = Yv(68, 68, 0, ΔⲆ[Gr.ᐃⵠᐃⵠⲆⵠⵠΔⵠ], 3);
        this.ⵠᐃⲆ[Lr.ᐃᐃΔΔⲆᐃⵠ].id = Lr.ᐃᐃΔΔⲆᐃⵠ;
        this.ᐃⵠᐃ[Lr.ᐃᐃΔΔⲆᐃⵠ] = Yv(60, 60, 0, ΔⲆ[Gr.ᐃⲆⵠⲆⲆᐃⵠΔⲆ], 3);
        this.ᐃⵠᐃ[Lr.ᐃᐃΔΔⲆᐃⵠ].id = Lr.ᐃᐃΔΔⲆᐃⵠ;
        this.ⵠᐃⲆ[Lr.ⲆⲆΔΔΔᐃⵠ] = Yv(68, 68, 0, ΔⲆ[Gr.ᐃΔⲆΔⲆⲆΔΔΔ], 3);
        this.ⵠᐃⲆ[Lr.ⲆⲆΔΔΔᐃⵠ].id = Lr.ⲆⲆΔΔΔᐃⵠ;
        this.ᐃⵠᐃ[Lr.ⲆⲆΔΔΔᐃⵠ] = Yv(60, 60, 0, ΔⲆ[Gr.ᐃΔᐃⵠᐃⵠⲆⵠΔ], 3);
        this.ᐃⵠᐃ[Lr.ⲆⲆΔΔΔᐃⵠ].id = Lr.ⲆⲆΔΔΔᐃⵠ;
        this.ⵠᐃⲆ[Lr.ⵠⲆᐃⵠᐃⵠΔ] = Yv(68, 68, 0, ΔⲆ[Gr.ⵠᐃᐃΔⵠΔᐃᐃⵠ], 3);
        this.ⵠᐃⲆ[Lr.ⵠⲆᐃⵠᐃⵠΔ].id = Lr.ⵠⲆᐃⵠᐃⵠΔ;
        this.ᐃⵠᐃ[Lr.ⵠⲆᐃⵠᐃⵠΔ] = Yv(60, 60, 0, ΔⲆ[Gr.ⲆⵠΔⵠⲆΔⵠⲆⵠ], 3);
        this.ᐃⵠᐃ[Lr.ⵠⲆᐃⵠᐃⵠΔ].id = Lr.ⵠⲆᐃⵠᐃⵠΔ;
        this.ⵠᐃⲆ[Lr.ᐃⲆᐃᐃΔⵠⲆ] = Yv(68, 68, 0, ΔⲆ[Gr.ᐃᐃᐃⲆⲆΔᐃᐃΔ], 3);
        this.ⵠᐃⲆ[Lr.ᐃⲆᐃᐃΔⵠⲆ].id = Lr.ᐃⲆᐃᐃΔⵠⲆ;
        this.ᐃⵠᐃ[Lr.ᐃⲆᐃᐃΔⵠⲆ] = Yv(60, 60, 0, ΔⲆ[Gr.ⵠΔΔᐃΔᐃᐃΔΔ], 3);
        this.ᐃⵠᐃ[Lr.ᐃⲆᐃᐃΔⵠⲆ].id = Lr.ᐃⲆᐃᐃΔⵠⲆ;
        this.ΔⲆΔⲆⲆᐃΔ = function () {
            for (var a = Ww.ΔΔⵠᐃ.ⲆⵠⲆᐃΔ, b = 10, c = 10, d = 0; d < a.length; d++) {
                if (d > 0 && !(d % 4)) {
                    b += a[0].info.width + 10;
                    c = 10;
                }
                a[d].info.translate.x = b;
                a[d].info.translate.y = c;
                c += 10 + a[d].info.height;
            }
        };
        this.ⲆⲆΔᐃⵠⲆᐃ = function () {
            var a = Math.floor(Math.floor((3 + Ww.ΔΔⵠᐃ.ⲆⵠⲆᐃΔ.length) / 4) * (10 + this.ⵠᐃⲆ[0].info.ᐃΔ[0].width) + 35);
            for (var b = 0; b < this.ⵠᐃⲆ.length; b++) {
                if (this.ⵠᐃⲆ[b]) {
                    this.ⵠᐃⲆ[b].info.translate.x = a;
                    this.ⵠᐃⲆ[b].info.translate.y = 22;
                }
            }
            this.ⵠΔΔᐃΔΔᐃ.info.translate.x = a + 17;
            this.ⵠΔΔᐃΔΔᐃ.info.translate.y = 22 + ΔⲆ[339].height;
            this.ⲆᐃᐃΔΔⵠᐃ.info.translate.x = a + 17;
            this.ⲆᐃᐃΔΔⵠᐃ.info.translate.y = 30;
            this.ⲆᐃⲆᐃⵠⵠⲆ.info.translate.x = a + 17;
            this.ⲆᐃⲆᐃⵠⵠⲆ.info.translate.y = 22 + ΔⲆ[339].height;
        };
        this.ⵠⵠᐃᐃΔΔᐃⵠᐃ = function () {
            var a = Math.floor((so - ΔⲆ[556][0].width) / 2);
            for (var b = 0; b < this.ᐃΔⵠⲆᐃ.length; b++) {
                this.ᐃΔⵠⲆᐃ[b].button.info.translate.x = a;
                this.ᐃΔⵠⲆᐃ[b].button.info.translate.y = -13;
            }
        };
        this.ⵠⲆᐃΔΔⵠᐃ = function () {
            var a = 12 + Math.floor(Math.floor((3 + Ww.ΔΔⵠᐃ.ⲆⵠⲆᐃΔ.length) / 4) * (10 + this.ᐃΔⵠⲆΔⲆⲆ.info.ᐃΔ[0].width) + 35);
            this.ᐃΔⵠⲆΔⲆⲆ.info.translate.x = a;
            this.ᐃΔⵠⲆΔⲆⲆ.info.translate.y = 33;
            this.ⲆΔⵠΔⵠᐃᐃ.info.translate.x = this.ᐃΔⵠⲆΔⲆⲆ.info.translate.x;
            this.ⲆΔⵠΔⵠᐃᐃ.info.translate.y = 137;
            this.ᐃΔᐃⵠΔⵠⲆ.info.translate.x = this.ᐃΔⵠⲆΔⲆⲆ.info.translate.x;
            this.ᐃΔᐃⵠΔⵠⲆ.info.translate.y = 240;
        };
        this.ⲆΔⵠⵠΔⵠᐃ = function () {
            var a = 12 + Math.floor(Math.floor((3 + Ww.ΔΔⵠᐃ.ⲆⵠⲆᐃΔ.length) / 4) * (10 + this.ⵠⵠΔᐃᐃⲆΔ.info.ᐃΔ[0].width) + 35);
            this.ⵠⵠΔᐃᐃⲆΔ.info.translate.x = a;
            this.ⵠⵠΔᐃᐃⲆΔ.info.translate.y = 36;
            a += 83;
            this.ⵠⵠΔΔΔᐃᐃ.info.translate.x = a;
            this.ⵠⵠΔΔΔᐃᐃ.info.translate.y = 36;
            this.ⲆᐃΔΔΔⵠᐃ.info.translate.x = a;
            this.ⲆᐃΔΔΔⵠᐃ.info.translate.y = 36;
            this.ΔΔᐃⵠⲆⵠⲆ.info.translate.x = a;
            this.ΔΔᐃⵠⲆⵠⲆ.info.translate.y = 36;
            this.ᐃᐃⵠⲆΔⵠⵠ.info.translate.x = a;
            this.ᐃᐃⵠⲆΔⵠⵠ.info.translate.y = 36;
            this.ⵠᐃⲆᐃⲆⵠⵠ.info.translate.x = a;
            this.ⵠᐃⲆᐃⲆⵠⵠ.info.translate.y = 36;
        };
        this.ΔⵠⵠΔⵠΔᐃ = function () {
            var a = 12 + Math.floor((10 + this.ᐃⵠΔⵠⵠΔᐃ.info.ᐃΔ[0].width) * Math.floor((3 + Ww.ΔΔⵠᐃ.ⲆⵠⲆᐃΔ.length) / 4) + 35);
            this.ᐃⵠΔⵠⵠΔᐃ.info.translate.x = a;
            this.ᐃⵠΔⵠⵠΔᐃ.info.translate.y = 36;
            a += 83;
            this.ΔΔⵠⲆᐃⵠΔ.info.translate.x = a;
            this.ΔΔⵠⲆᐃⵠΔ.info.translate.y = 36;
        };
        this.Δⵠⵠᐃⵠᐃᐃ = function () {
            var a = Math.floor(Math.floor((3 + Ww.ΔΔⵠᐃ.ⲆⵠⲆᐃΔ.length) / 4) * (10 + this.ΔᐃⲆᐃΔᐃᐃ.info.ᐃΔ[0].width) + 35);
            this.ΔᐃⲆᐃΔᐃᐃ.info.translate.x = a;
            this.ΔᐃⲆᐃΔᐃᐃ.info.translate.y = 22;
        };
        this.ⵠᐃᐃᐃᐃⲆⵠ = function () {
            var a = Ww.ᐃΔⵠΔ.ᐃΔΔᐃΔ;
            if (a.length > 0) {
                var b = Math.floor((so - Ww.ᐃΔⵠΔ.max * (a[0].info.width + 5)) / 2);
            }
            for (var c = 0; c < a.length; c++) {
                a[c].info.translate.x = b + c * (a[c].info.width + 5);
                a[c].info.translate.y = gq - a[c].info.width - 10;
                this.ᐃⵠⵠᐃᐃ[a[c].id].info.translate.x = a[c].info.translate.x + 13;
                this.ᐃⵠⵠᐃᐃ[a[c].id].info.translate.y = a[c].info.translate.y - this.ᐃⵠⵠᐃᐃ[a[c].id].info.ᐃΔ[0].height - 6;
            }
        };
        var n;
        var o = 0;
        function p() {
            j.ΔΔΔ();
            if (++o == 30) {
                j.ⲆⲆΔⲆᐃⲆΔ();
                j.ΔΔΔ();
                return;
            }
            aj.setTimeout(p, 33);
        }
        this.ΔⵠᐃⵠⲆ = function (a) {
            if (Ww.Δⵠⵠⵠᐃ.open) {
                Ww.Δⵠⵠⵠᐃ.ΔⵠᐃⵠⲆ();
            }
            if (Ww.ⲆᐃⲆⵠⵠ.open) {
                Ww.ⲆᐃⲆⵠⵠ.ΔⵠᐃⵠⲆ();
            }
            document.getElementById("team_box").style.display = "none";
            j.ⵠΔᐃⲆⲆ.style.display = "none";
            j.ⵠΔᐃⲆⲆ.open = Ij;
            j.sign.style.display = "none";
            j.sign.open = false;
            document.getElementById("shop_starterkit").style.display = "none";
            document.getElementById("home_craft").style.display = "none";
            document.getElementById("recipe_craft").style.display = "none";
            j.ΔᐃᐃΔ.open = false;
            document.getElementById("option_in_game").style.display = "none";
            j.options.open = false;
            document.getElementById("sure_delete").style.display = "none";
            j.ⵠΔΔᐃ.open = Yh;
            document.getElementById("cancel_sure_delete").style.display = "none";
            j.ⲆⲆᐃⲆⲆ.open = Ij;
            document.getElementById("chronoquest").style.display = "none";
            j.Ⲇᐃⵠⵠ.open = false;
            n = a;
            j.ᐃΔⲆΔᐃᐃⵠ();
            j.ⵠΔ.style.cursor = j.ΔΔⲆΔⵠⲆⲆ;
            Zw.ΔⵠᐃⵠⲆ();
            b = -1;
            q();
            Af();
        };
        var b = -1;
        function q() {
            j.ΔΔΔ();
            if (++b == 30) {
                j.stop();
                n();
                return;
            }
            aj.setTimeout(q, 33);
        }
        this.ⵠⵠΔᐃᐃ = false;
        this.stop = function () {
            this.ⵠⵠΔᐃᐃ = Ia;
        };
        this.ⲆⲆᐃᐃᐃ = function () {
            Δⵠᐃⵠ.ΔΔⵠΔⵠⲆⲆⵠᐃ();
            j.ⵠⵠΔᐃᐃ = sn;
            b = -1;
            o = 0;
            p();
        };
        this.ΔΔΔ = function () {
            this.ΔΔΔⲆ.translate.x = so - this.ΔΔΔⲆ.ᐃΔ.width - 10;
            this.ΔΔΔⲆ.translate.y = 5;
            cf.ⵠΔΔⲆᐃ.translate.x = this.ΔΔΔⲆ.translate.x - ΔⲆ[725][0].width - 85;
            cf.ⵠΔΔⲆᐃ.translate.y = 10;
            this.ΔᐃᐃΔ.button.info.translate.x = this.ΔΔΔⲆ.translate.x - ΔⲆ[708][0].width - 10;
            this.ΔᐃᐃΔ.button.info.translate.y = 10;
            this.Ⲇᐃⵠⵠ.button.info.translate.x = this.ΔΔΔⲆ.translate.x - ΔⲆ[755][0].width - 20;
            this.Ⲇᐃⵠⵠ.button.info.translate.y = this.ΔᐃᐃΔ.button.info.translate.y + ΔⲆ[708][0].height + 5;
            this.options.button.info.translate.x = this.ΔΔΔⲆ.translate.x - ΔⲆ[727][0].width - 20;
            this.options.button.info.translate.y = this.Ⲇᐃⵠⵠ.button.info.translate.y + ΔⲆ[727][0].height + 18;
            this.ΔⲆⵠⵠ.ⲆⲆⵠⵠⵠⵠⵠ.info.translate.x = this.ΔΔΔⲆ.translate.x - ΔⲆ[727][0].width - 20;
            this.ΔⲆⵠⵠ.ⲆⲆⵠⵠⵠⵠⵠ.info.translate.y = this.options.button.info.translate.y + ΔⲆ[783][0].height;
            this.ΔⲆⵠⵠ.ⵠΔᐃⲆΔⲆᐃ.info.translate.x = this.ΔΔΔⲆ.translate.x - ΔⲆ[727][0].width - 20;
            this.ΔⲆⵠⵠ.ⵠΔᐃⲆΔⲆᐃ.info.translate.y = this.options.button.info.translate.y + ΔⲆ[783][0].height;
            this.ⵠΔᐃⲆⲆ.button.info.translate.x = this.ΔΔΔⲆ.translate.x - ΔⲆ[795][0].width - 20;
            this.ⵠΔᐃⲆⲆ.button.info.translate.y = this.ΔⲆⵠⵠ.ⲆⲆⵠⵠⵠⵠⵠ.info.translate.y + ΔⲆ[795][0].height;
            Ww.ΔᐃΔΔᐃ.translate.x = this.ΔΔΔⲆ.translate.x - 63 - 85;
            Ww.ΔᐃΔΔᐃ.translate.y = 100;
            Ww.ⲆⵠᐃⵠⲆ.translate.x = this.ΔΔΔⲆ.translate.x - ΔⲆ[517].width - 85;
            Ww.ⲆⵠᐃⵠⲆ.translate.y = Ww.ΔᐃΔΔᐃ.translate.y + 10 + ΔⲆ[546].height;
            this.ᐃΔⵠⲆΔ.translate.y = gq - 3 - 193;
            this.ᐃΔⵠⲆΔ.translate.x = so - 3 - 193;
            this.ᐃⵠⲆⲆ.translate.x = 5;
            this.ᐃⵠⲆⲆ.translate.y = gq - this.ᐃⵠⲆⲆ.ᐃΔ.height - 5;
            this.ⲆⵠᐃΔΔ.button.info.translate.x = hq - 91 / 2;
            this.ⲆⵠᐃΔΔ.button.info.translate.y = 50;
            this.ΔⲆΔⲆⲆᐃΔ();
            this.ⵠᐃᐃᐃᐃⲆⵠ();
            this.ⲆⲆΔᐃⵠⲆᐃ();
            this.Δⵠⵠᐃⵠᐃᐃ();
            this.ΔⵠⵠΔⵠΔᐃ();
            this.ⲆΔⵠⵠΔⵠᐃ();
            this.ⵠⲆᐃΔΔⵠᐃ();
            this.ⵠⵠᐃᐃΔΔᐃⵠᐃ();
            this.sign.ᐃᐃⵠⵠⵠΔⵠ();
            Bc();
            Ww.Δⵠⵠⵠᐃ.ΔΔΔ();
            Ww.ⲆᐃⲆⵠⵠ.ΔΔΔ();
            this.ⲆⲆᐃᐃᐃⵠⵠⵠΔ.ΔΔΔ();
            this.ΔᐃᐃΔ.ᐃΔᐃᐃᐃⲆᐃ.ΔΔΔ();
            this.ΔᐃᐃΔ.list.ΔΔΔ();
            this.ⵠΔΔᐃ.ΔΔΔ();
            this.ⲆⲆᐃⲆⲆ.ΔΔΔ();
            this.Ⲇᐃⵠⵠ.ΔΔΔ();
            this.ⲆⵠᐃΔΔ.ΔΔΔ();
            this.options.ΔΔΔ();
            this.ⵠΔᐃⲆⲆ.ΔΔΔ();
            this.sign.ΔΔΔ();
            var a = 0;
            if (o != 30) {
                a = 1500 / (o + 1) - 50;
            }
            if (b != -1) {
                a = -(1500 / (30 - b + 1) - 48);
            }
            this.ⲆⵠᐃΔΔ.button.info.translate.y -= a > 0 ? a : -a;
            this.ΔΔΔⲆ.translate.y -= a > 0 ? a : -a;
            Ww.ΔᐃΔΔᐃ.translate.y -= a > 0 ? a : -a;
            Ww.ⲆⵠᐃⵠⲆ.translate.y -= a > 0 ? a : -a;
            this.ΔᐃᐃΔ.button.info.translate.y -= a > 0 ? a : -a;
            this.Ⲇᐃⵠⵠ.button.info.translate.y -= a > 0 ? a : -a;
            this.options.button.info.translate.y -= a > 0 ? a : -a;
            this.ⵠΔᐃⲆⲆ.button.info.translate.y -= a > 0 ? a : -a;
            this.ΔⲆⵠⵠ.ⲆⲆⵠⵠⵠⵠⵠ.info.translate.y -= a > 0 ? a : -a;
            this.ΔⲆⵠⵠ.ⵠΔᐃⲆΔⲆᐃ.info.translate.y -= a > 0 ? a : -a;
            cf.ⵠΔΔⲆᐃ.translate.y -= a > 0 ? a : -a;
            this.ᐃⵠⲆⲆ.translate.y -= a < 0 ? a : -a;
            this.ᐃΔⵠⲆΔ.translate.y -= a < 0 ? a : -a;
        };
        this.ᐃⲆⲆⲆᐃⵠΔᐃⲆ = function () {
            if (!Ww.ⲆᐃΔᐃᐃ.enabled && this.ᐃᐃΔⵠⵠⲆᐃ && !Ww.ⵠⵠΔⲆⲆ) {
                ep();
            }
            $c();
            (function () {
                var a = cf.ⵠΔⲆ[0];
                if (cf.mode === 0 || cf.mode === 7 || cf.mode === 2 || cf.mode === 4 || cf.mode === 5 || cf.mode === 6 || cf.mode === 3) {
                    for (var b = 0; b < a.length; b++) {
                        a[b].ⲆΔⲆⲆⲆΔΔ();
                    }
                } else if (cf.mode === 1) {
                    for (b = 0; a.length > b; b++) {
                        if (Ww.ⵠⲆᐃⵠⵠᐃᐃ || Ww.ⲆⵠᐃⵠⲆ.enabled || a[b].ⵠΔⵠΔ.ⲆⵠΔΔⲆ !== "spectator") {
                            a[b].ⲆΔⲆⲆⲆΔΔ();
                        }
                    }
                }
            })();
            if (this.ᐃᐃΔⵠⵠⲆᐃ) {
                Jc();
                if (this.ᐃⲆⵠᐃⵠᐃⲆ === 1) {
                    this.ΔᐃᐃΔ.button.ⲆⲆΔⵠ(g);
                }
                if (cf.mode !== 2 && cf.mode !== 4 && cf.mode !== 5 && this.ᐃⵠᐃᐃⲆΔΔ === 1) {
                    this.Ⲇᐃⵠⵠ.button.ⲆⲆΔⵠ(g);
                }
                this.options.button.ⲆⲆΔⵠ(g);
                if (this.ⵠⵠΔⵠⲆΔⲆ === 1) {
                    this.ⵠΔᐃⲆⲆ.button.ⲆⲆΔⵠ(g);
                }
                if (Zw.ⲆⲆᐃᐃᐃ) {
                    this.ΔⲆⵠⵠ.ⲆⲆⵠⵠⵠⵠⵠ.ⲆⲆΔⵠ(g);
                } else {
                    this.ΔⲆⵠⵠ.ⵠΔᐃⲆΔⲆᐃ.ⲆⲆΔⵠ(g);
                }
                rp();
                Wc();
                this.ᐃⵠⲆⲆ.ⲆⲆΔⵠ();
                Kc();
                lp();
                qc();
                hp();
                Zc();
                Ac();
                Mc();
                (function () {
                    if (!Ww.ⵠᐃᐃⵠ.open && !Ww.ⵠⵠΔⵠᐃ.open && !Ww.ᐃᐃⵠΔ.open && !Ww.ⲆⲆⲆᐃ.open && !Ww.ΔᐃΔᐃ.open) {
                        Ww.ⵠΔᐃᐃᐃ.open = Lo;
                        var a = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ];
                        var b = 100;
                        if (a) {
                            for (var c = 0; cf.ⵠΔⲆ[35].length > c; c++) {
                                var d = cf.ⵠΔⲆ[35][c];
                                var e = ⲆⵠΔᐃ.ⲆᐃⲆΔ(d, a);
                                if (b > e) {
                                    b = e;
                                    Ww.ⵠΔᐃᐃᐃ.open = ss;
                                    Ww.ⵠΔᐃᐃᐃ.ⲆⲆΔⲆ = d.ⲆⲆΔⲆ;
                                    Ww.ⵠΔᐃᐃᐃ.ⵠⲆⵠⵠⲆ = d.id;
                                }
                            }
                        }
                    }
                })();
                _c();
                Fc();
                Ic();
                Sc();
                Bc();
                Rc();
            }
            if (Ww.ⲆᐃΔᐃᐃ.enabled) {
                Ec();
            }
            jc();
            if (this.ᐃᐃΔⵠⵠⲆᐃ && this.ᐃᐃⲆⲆⵠᐃΔ === 1) {
                ip();
            }
            Ww.ⵠⲆᐃⵠⵠᐃΔ.ⲆⲆΔⵠ();
            Ww.alert.ⲆⲆΔⵠ("#FFF", "#000");
            if (this.ᐃᐃΔⵠⵠⲆᐃ) {
                Ww.ⲆᐃΔᐃᐃ.ⲆⲆΔⵠ();
                Ww.ⲆⵠᐃΔΔ.ⲆⲆΔⵠ();
                Ww.ᐃΔⵠΔ.ⲆⲆⲆⵠⲆΔΔ.ⲆⲆΔⵠ(yf.ᐃⲆΔⲆ.x, yf.ᐃⲆΔⲆ.y);
            }
            xc();
        };
        this.ΔⲆⲆᐃⵠΔⲆΔⵠ = function () {
            Ww.ᐃⲆΔ.ΔΔΔ();
            Ww.ᐃⵠⲆⲆ.ΔΔΔ();
            if (!Ww.reconnect.enabled && Ww.ΔᐃᐃⲆΔ) {
                Ww.control.ΔΔΔ();
                Ww.ΔᐃΔΔᐃ.ΔΔΔ();
            }
            cf.ΔΔΔ();
            this.Ⲇᐃⵠⵠ.ⵠⵠⲆΔⲆⵠΔΔⵠ();
        };
        this.ⵠⲆᐃⲆΔᐃΔᐃⲆ = function () {
            Pv();
        };
        this.ΔⵠᐃᐃⵠΔⵠΔᐃ = function () {
            Δⵠᐃⵠ.ⵠⵠᐃΔᐃⲆᐃᐃⲆ();
            Δⵠᐃⵠ.ΔΔⲆⵠⲆΔᐃΔⵠ();
            Δⵠᐃⵠ.ⵠⲆΔΔΔᐃⲆᐃⵠ();
            Δⵠᐃⵠ.ᐃᐃΔⵠΔⲆⲆΔᐃ();
        };
        this.ⲆⲆΔⵠ = function () {
            if (!Ww.reconnect.enabled && Ww.ΔᐃᐃⲆΔ) {
                this.ΔⵠᐃᐃⵠΔⵠΔᐃ();
            }
            Zw.ⲆᐃᐃⵠΔΔⵠⵠⵠ();
            this.ΔⲆⲆᐃⵠΔⲆΔⵠ();
            if (df.ᐃⲆᐃᐃⲆⵠᐃ !== 1) {
                this.ⵠⲆᐃⲆΔᐃΔᐃⲆ();
                this.ᐃⲆⲆⲆᐃⵠΔᐃⲆ();
            } else {
                var a = ⲆⲆ.ⲆⵠΔᐃᐃⵠⵠ;
                Qc(g, a, hq - a.width / 4, iq - a.height / 4, a.width / 2, a.height / 2);
            }
        };
        this.ᐃᐃΔⲆⲆⵠΔ = function (a) {
            if (!Ww.Δⵠⵠⵠᐃ.open && !Ww.ⲆᐃⲆⵠⵠ.open) {
                if (a.code === Settings.AutoSpike.k) Settings.AutoSpike.e = false;
            }
            if (Ww.Δⵠⵠⵠᐃ.open && a.keyCode === 27) {
                Ww.Δⵠⵠⵠᐃ.ΔⵠᐃⵠⲆ();
            } else if (Ww.ⲆᐃⲆⵠⵠ.open && a.keyCode === 27) {
                Ww.ⲆᐃⲆⵠⵠ.ΔⵠᐃⵠⲆ();
            } else if (Ww.Δⵠⵠⵠᐃ.open || Ww.ⲆᐃⲆⵠⵠ.open || a.keyCode != 79 || b != -1) {
                if (a.keyCode == 13 && b == -1) {
                    if (Ww.ⲆᐃⲆⵠⵠ.open) {
                        Ww.ⲆᐃⲆⵠⵠ.ⲆΔⵠⲆΔⵠⵠ();
                    } else {
                        Ww.Δⵠⵠⵠᐃ.ⲆⲆᐃᐃᐃ();
                    }
                } else if (!Ww.Δⵠⵠⵠᐃ.open && !Ww.ⲆᐃⲆⵠⵠ.open) {
                    if (a.keyCode === 82) {
                        Ww.ΔᐃΔΔᐃ.ⵠⲆⲆΔⲆΔⲆ();
                    } else if (a.keyCode !== 80 || cf.mode !== 1 || Ww.ⵠⲆᐃⵠⵠᐃᐃ) {
                        if (a.keyCode >= 49 && a.keyCode <= 57) {
                            if (Ww.ΔΔⵠᐃ.id < 0) {
                                var c = a.keyCode - 49;
                                var d = Ww.ᐃΔⵠΔ.ᐃΔΔᐃΔ[c];
                                if (d) {
                                    Δⵠᐃⵠ.Ⲇᐃⵠᐃⵠ(d.id, c);
                                }
                            }
                        } else if (a.keyCode == 89) {
                            Ww.ⵠⵠⲆΔⲆᐃᐃ = !Ww.ⵠⵠⲆΔⲆᐃᐃ;
                        } else if (a.keyCode == 71) {
                            Ww.ΔΔⵠᐃ.ΔⵠΔᐃⲆᐃᐃⲆⵠ();
                        }
                    } else {
                        Ww.ⲆⵠᐃⵠⲆ.ⵠⲆⲆΔⲆΔⲆ();
                    }
                }
            } else {
                Ww.ⲆᐃⲆⵠⵠ.ⲆⵠΔⵠⲆΔⵠΔⵠ();
            }
            zf.up(a);
        };
        this.ⲆᐃΔⵠⲆΔⲆ = function (a) {
            zf.down(a);
            if (!Ww.Δⵠⵠⵠᐃ.open && !Ww.ⲆᐃⲆⵠⵠ.open) {
                if (8 == a.keyCode) a.preventDefault();
                if (a.code === Settings.AutoSpike.k) Settings.AutoSpike.e = true;
            }
        };
        this.ⲆΔⵠⵠⲆⵠⲆ = function (b) {
            yf.ᐃⲆΔⲆ = Xv(j.ⵠΔ, b);
            var c = Ig;
            if (Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0) {
                j.ᐃΔⵠⲆΔ.focus(yf.ᐃⲆΔⲆ);
            }
            var d = Ww.ⵠᐃᐃⵠ;
            if (Ww.ΔΔⵠᐃ.id < 0 && d.id >= 0 && (!Ww.ⵠᐃᐃⵠ.lock || Ww.id === Ww.ⵠᐃᐃⵠ.ⲆⲆΔⲆ)) {
                c |= j.ⵠᐃⲆ[Ww.ⵠᐃᐃⵠ.id].ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Sv);
            }
            var e = Ww.ᐃᐃⵠΔ;
            if (e.open && e.ⲆΔⵠΔΔ > 0) {
                c |= j.ΔΔⵠⲆᐃⵠΔ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Sv);
            }
            var f = Ww.ΔᐃΔᐃ;
            if (f.open && f.ⲆᐃⵠⵠᐃΔΔ > 0) {
                c |= j.ⵠⵠΔΔΔᐃᐃ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Sv);
                c |= j.ⲆᐃΔΔΔⵠᐃ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Sv);
                c |= j.ΔΔᐃⵠⲆⵠⲆ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Sv);
                c |= j.ᐃᐃⵠⲆΔⵠⵠ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Sv);
                c |= j.ⵠᐃⲆᐃⲆⵠⵠ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Sv);
            }
            var a = Ww.ⲆⲆⲆᐃ;
            if (a.open && a.ᐃⵠⵠⲆⵠⲆᐃ > 0) {
                c |= j.ᐃΔᐃⵠΔⵠⲆ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Sv);
            }
            if (Ww.sign.open) {
                c |= j.sign.button.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Sv);
            }
            if (!Ww.ⵠᐃᐃⵠ.lock) {
                if (Ww.ⵠᐃᐃⵠ.ⵠΔΔⵠⵠᐃⲆ) {
                    c |= j.ⲆᐃⲆᐃⵠⵠⲆ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Sv);
                }
            }
            if (Ww.ⵠᐃᐃⵠ.ᐃΔⲆᐃⲆⲆᐃ) {
                c |= j.ⵠΔΔᐃΔΔᐃ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Sv);
            }
            if (Ww.ΔΔⵠᐃ.id < 0 && !j.ΔᐃᐃΔ.open && !j.ⵠΔΔᐃ.open && !j.ⲆⲆᐃⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.options.open && !j.ⵠΔᐃⲆⲆ.open) {
                for (var k = Ww.ᐃΔⵠΔ.ᐃΔΔᐃΔ, m = 0; m < k.length; m++) {
                    var n = k[m].ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Sv);
                    c |= n;
                    if (n) {
                        Ww.ᐃΔⵠΔ.ⲆⲆⲆⵠⲆΔΔ.start(m, yf.ᐃⲆΔⲆ);
                    }
                    if (d.open && (d.id < 0 || d.id == k[m].id) || Ww.ⵠⵠΔⵠᐃ.open && k[m].id === 109 || Ww.ⵠΔᐃᐃᐃ.open && k[m].id === 180 || Ww.ⲆⲆⲆᐃ.open && (k[m].id === 109 || k[m].id === 131) || Ww.ᐃᐃⵠΔ.open && k[m].id === 134 || Ww.ΔᐃΔᐃ.open && k[m].id === 109) {
                        c |= j.ᐃⵠⵠᐃᐃ[k[m].id].ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Sv);
                    }
                }
            }
            if (Ww.ᐃⵠⵠΔᐃ.open) {
                c |= j.ᐃⵠⵠΔᐃ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Sv);
            }
            if (j.ᐃⵠΔⲆⲆ != -1) {
                if (c |= j.ᐃΔⵠⲆᐃ[j.ᐃⵠΔⲆⲆ].button.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Sv)) {
                    var o = ss;
                }
            } else {
                o = Eh;
            }
            if (Ww.ΔΔⵠᐃ.id < 0 && Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0 && !o && !j.ΔᐃᐃΔ.open && !j.ⵠΔΔᐃ.open && !j.options.open && !j.ⲆⲆᐃⲆⲆ.open && !j.ⵠΔᐃⲆⲆ.open && !Ww.ⵠⵠΔⲆⲆ) {
                k = Ww.ΔΔⵠᐃ.ⲆⵠⲆᐃΔ;
                m = 0;
                for (; m < k.length; m++) {
                    c |= k[m].ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Sv);
                }
            }
            if (Ww.ΔΔⵠᐃ.id < 0 && Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0 && Ww.ⲆⵠᐃΔΔ.open && !j.ΔᐃᐃΔ.open && !j.ⵠΔΔᐃ.open && !j.options.open && !j.ⲆⲆᐃⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.ⵠΔᐃⲆⲆ.open) {
                c |= j.ⲆⵠᐃΔΔ.button.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Sv);
            }
            if (Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0 && !j.ⵠΔΔᐃ.open && !j.options.open && !j.ⲆⲆᐃⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.ⵠΔᐃⲆⲆ.open) {
                c |= j.ΔᐃᐃΔ.button.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Sv);
            }
            if (Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0 && !j.ΔᐃᐃΔ.open && !j.ⵠΔΔᐃ.open && !j.ⲆⲆᐃⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.ⵠΔᐃⲆⲆ.open) {
                c |= j.options.button.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Sv);
            }
            if (Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0 && !j.ΔᐃᐃΔ.open && !j.ⵠΔΔᐃ.open && !j.ⲆⲆᐃⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.options.open) {
                c |= j.ⵠΔᐃⲆⲆ.button.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Sv);
            }
            if (Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0 && !j.ΔᐃᐃΔ.open && !j.ⵠΔΔᐃ.open && !j.ⲆⲆᐃⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.options.open && !j.ⵠΔᐃⲆⲆ.open) {
                if (Zw.ⲆⲆᐃᐃᐃ) {
                    c |= j.ΔⲆⵠⵠ.ⲆⲆⵠⵠⵠⵠⵠ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Sv);
                } else {
                    c |= j.ΔⲆⵠⵠ.ⵠΔᐃⲆΔⲆᐃ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Sv);
                }
            }
            if (Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0 && !j.ΔᐃᐃΔ.open && !j.ⵠΔᐃⲆⲆ.open && !j.ⵠΔΔᐃ.open && !j.options.open && !j.ⲆⲆᐃⲆⲆ.open && cf.mode !== 2 && cf.mode !== 4 && cf.mode !== 5) {
                c |= j.Ⲇᐃⵠⵠ.button.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Sv);
            }
            if (!c && !j.ΔᐃᐃΔ.open && !j.ⵠΔΔᐃ.open && !j.options.open && !j.ⲆⲆᐃⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.ⵠΔᐃⲆⲆ.open && !j.sign.open) {
                if (Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ >= 0) {
                    Δⵠᐃⵠ.ΔᐃⵠΔⵠᐃⵠⲆΔ();
                } else if (!o) {
                    yf.down();
                }
            }
        };
        this.ⵠᐃⲆⲆᐃⵠᐃ = function (b) {
            yf.ᐃⲆΔⲆ = Xv(j.ⵠΔ, b);
            yf.up();
            if (!Ww.ᐃΔⵠΔ.ⲆⲆⲆⵠⲆΔΔ.release()) {
                var c = Ww.ⵠᐃᐃⵠ;
                var d = Ww.ⵠⵠΔⵠᐃ;
                var e = Ww.ⵠΔᐃᐃᐃ;
                var f = Ww.ᐃᐃⵠΔ;
                var i = Ww.ΔᐃΔᐃ;
                var k = Ww.ⲆⲆⲆᐃ;
                if (Ww.control.attack) {
                    Ww.control.attack = 0;
                    Δⵠᐃⵠ.ⲆΔⵠⲆᐃⲆᐃᐃⵠ();
                }
                if (j.ᐃⵠΔⲆⲆ != -1) {
                    var m = j.ᐃΔⵠⲆᐃ[j.ᐃⵠΔⲆⲆ].button.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv);
                    var n = document.getElementById("team_box").style;
                    if (m && n.display == "inline-block") {
                        n.display = "none";
                        return;
                    }
                    if (m) {
                        j.ᐃΔⵠⲆᐃ[j.ᐃⵠΔⲆⲆ].action();
                    }
                }
                if (Ww.ΔΔⵠᐃ.id < 0 && c.id >= 0 && !j.ⵠΔΔᐃ.open) {
                    if (!Ww.ⵠᐃᐃⵠ.lock || Ww.ⵠᐃᐃⵠ.ⲆⲆΔⲆ === Ww.id) {
                        if (m = j.ⵠᐃⲆ[Ww.ⵠᐃᐃⵠ.id].ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv)) {
                            Δⵠᐃⵠ.ΔΔⵠⲆᐃⲆᐃᐃΔ(c);
                        }
                    }
                }
                if ((f = Ww.ᐃᐃⵠΔ).open && f.ⲆΔⵠΔΔ > 0 && !j.ⵠΔΔᐃ.open) {
                    if (m = j.ΔΔⵠⲆᐃⵠΔ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv)) {
                        Δⵠᐃⵠ.ⲆⵠᐃⲆᐃᐃΔⵠᐃ(f);
                    }
                }
                if ((i = Ww.ΔᐃΔᐃ).open && i.ⲆᐃⵠⵠᐃΔΔ > 0 && !j.ⵠΔΔᐃ.open) {
                    switch (i.type) {
                        case 24:
                            if (m = j.ⵠⵠΔΔΔᐃᐃ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv)) {
                                Δⵠᐃⵠ.ⵠⵠΔⲆⵠᐃᐃ(i);
                            }
                            break;
                        case 25:
                            if (m = j.ⲆᐃΔΔΔⵠᐃ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv)) {
                                Δⵠᐃⵠ.ⵠⵠΔⲆⵠᐃᐃ(i);
                            }
                            break;
                        case 26:
                            if (m = j.ΔΔᐃⵠⲆⵠⲆ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv)) {
                                Δⵠᐃⵠ.ⵠⵠΔⲆⵠᐃᐃ(i);
                            }
                            break;
                        case 27:
                            if (m = j.ᐃᐃⵠⲆΔⵠⵠ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv)) {
                                Δⵠᐃⵠ.ⵠⵠΔⲆⵠᐃᐃ(i);
                            }
                            break;
                        case 28:
                            if (m = j.ⵠᐃⲆᐃⲆⵠⵠ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv)) {
                                Δⵠᐃⵠ.ⵠⵠΔⲆⵠᐃᐃ(i);
                            }
                    }
                }
                if ((k = Ww.ⲆⲆⲆᐃ).open && k.ᐃⵠⵠⲆⵠⲆᐃ > 0 && !j.ⵠΔΔᐃ.open) {
                    if (m = j.ᐃΔᐃⵠΔⵠⲆ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv)) {
                        Δⵠᐃⵠ.ⲆΔΔΔⵠⵠΔΔⲆ(k);
                    }
                }
                if (Ww.sign.open && !j.ⵠΔΔᐃ.open) {
                    if (m = j.sign.button.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv)) {
                        j.sign.select();
                    }
                }
                if (!Ww.ⵠᐃᐃⵠ.lock && !j.ⵠΔΔᐃ.open) {
                    if (Ww.ⵠᐃᐃⵠ.ⵠΔΔⵠⵠᐃⲆ && (m = j.ⲆᐃⲆᐃⵠⵠⲆ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv))) {
                        Δⵠᐃⵠ.ⲆⲆΔᐃΔΔᐃⵠⲆ(c);
                    }
                }
                if (Ww.ⵠᐃᐃⵠ.ᐃΔⲆᐃⲆⲆᐃ && !j.ⵠΔΔᐃ.open && (m = j.ⵠΔΔᐃΔΔᐃ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv))) {
                    Δⵠᐃⵠ.ⵠΔᐃΔᐃⵠΔᐃᐃ(c);
                    if (ga) {
                        ga("send", "event", "Game", "lockpick");
                    }
                }
                if (Ww.ᐃⵠⵠΔᐃ.open) {
                    if (m = j.ᐃⵠⵠΔᐃ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv)) {
                        Δⵠᐃⵠ.ᐃⵠⵠΔᐃ();
                        if (ga) {
                            ga("send", "event", "Game", "resurrection");
                        }
                    }
                }
                if (Ww.ΔΔⵠᐃ.id < 0 && !Ww.ⲆᐃΔᐃᐃ.enabled && !j.ⵠΔΔᐃ.open) {
                    for (var l = Ww.ᐃΔⵠΔ.ᐃΔΔᐃΔ, o = 0; o < l.length; o++) {
                        if (m = l[o].ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv)) {
                            if (b.which != 1 || b.shiftKey) {
                                if ((b.which == 1 && b.shiftKey || b.which == 3) && Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0) {
                                    j.ⵠΔΔᐃ.ΔⵠⲆⲆᐃᐃⵠ(l[o].id);
                                }
                            } else {
                                Δⵠᐃⵠ.Ⲇᐃⵠᐃⵠ(l[o].id, o);
                            }
                        } else if (c.open && (c.id < 0 || l[o].id === c.id)) {
                            if ((m = j.ᐃⵠⵠᐃᐃ[l[o].id].ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv)) && Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0) {
                                Δⵠᐃⵠ.ⲆΔⲆⲆⲆⲆⵠⲆΔ(c, l[o].id, b.shiftKey ? 10 : 1);
                            }
                        } else if (e.open && l[o].id === 180) {
                            if ((m = j.ᐃⵠⵠᐃᐃ[l[o].id].ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv)) && Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0) {
                                Δⵠᐃⵠ.ⲆᐃΔᐃΔΔⲆⲆⲆ(e);
                            }
                        } else if (d.open && l[o].id === 109) {
                            if ((m = j.ᐃⵠⵠᐃᐃ[l[o].id].ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv)) && Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0) {
                                Δⵠᐃⵠ.ΔⵠᐃⲆⲆΔⲆⵠⵠ(d, b.shiftKey ? 10 : 1);
                            }
                        } else if (f.open && l[o].id === 134) {
                            if ((m = j.ᐃⵠⵠᐃᐃ[l[o].id].ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv)) && Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0) {
                                Δⵠᐃⵠ.ⵠⲆⲆΔᐃᐃⵠΔⵠ(f, b.shiftKey ? 10 : 1);
                            }
                        } else if (i.open && l[o].id === 109) {
                            if ((m = j.ᐃⵠⵠᐃᐃ[l[o].id].ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv)) && Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0) {
                                Δⵠᐃⵠ.ⲆᐃΔᐃⵠⲆΔᐃᐃ(i, b.shiftKey ? 10 : 1);
                            }
                        } else if (k.open && (l[o].id === 109 || l[o].id === 131)) {
                            if ((m = j.ᐃⵠⵠᐃᐃ[l[o].id].ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv)) && Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0) {
                                if (l[o].id === 109) {
                                    Δⵠᐃⵠ.ⲆⲆΔᐃᐃΔᐃ(k, b.shiftKey ? 10 : 1, 0);
                                } else {
                                    Δⵠᐃⵠ.ⲆⲆΔᐃᐃΔᐃ(k, 0, b.shiftKey ? 10 : 1);
                                }
                            }
                        }
                    }
                }
                if (Ww.ΔΔⵠᐃ.id < 0 && Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0 && !Ww.ⲆᐃΔᐃᐃ.enabled && !j.ⵠΔΔᐃ.open && !Ww.ⵠⵠΔⲆⲆ) {
                    l = Ww.ΔΔⵠᐃ.ⲆⵠⲆᐃΔ;
                    o = 0;
                    for (; o < l.length; o++) {
                        if (m = l[o].ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv)) {
                            ⲆᐃⲆΔⵠ = Δⵠᐃⵠ.ᐃᐃᐃᐃΔΔⵠⵠᐃ(l[o].id);
                            if (ⲆᐃⲆΔⵠ && ga) {
                                ga("send", "event", "Game", "craft", Pr[Ls[l[o].id].ⵠΔⲆΔ].name);
                            }
                        }
                    }
                }
                if (Ww.ΔΔⵠᐃ.id < 0 && Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0 && Ww.ⲆⵠᐃΔΔ.open && !j.ⵠΔᐃⲆⲆ.open && !j.ΔᐃᐃΔ.open && !j.ⵠΔΔᐃ.open && !j.options.open && !j.ⲆⲆᐃⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open) {
                    if (m = j.ⲆⵠᐃΔΔ.button.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Rv)) {
                        Yw.ⲆⵠᐃΔΔ.select();
                    }
                }
                if (Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0 && !j.ΔᐃᐃΔ.open && !j.ⵠΔΔᐃ.open && !j.ⵠΔᐃⲆⲆ.open && !j.ⲆⲆᐃⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.options.open) {
                    if (Zw.ⲆⲆᐃᐃᐃ) {
                        if (m = j.ΔⲆⵠⵠ.ⲆⲆⵠⵠⵠⵠⵠ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv)) {
                            Zw.select();
                            if (ga) {
                                ga("send", "event", "Game", "sound on");
                            }
                        }
                    } else if (m = j.ΔⲆⵠⵠ.ⵠΔᐃⲆΔⲆᐃ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv)) {
                        Zw.select();
                        if (ga) {
                            ga("send", "event", "Game", "sound off");
                        }
                    }
                }
                if (Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0 && !j.ΔᐃᐃΔ.open && !j.ⵠΔΔᐃ.open && !j.ⲆⲆᐃⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.ⵠΔᐃⲆⲆ.open) {
                    if (m = j.options.button.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv)) {
                        j.options.ⵠⵠⲆΔΔⵠᐃⲆⲆ();
                        if (ga) {
                            ga("send", "event", "Game", "options");
                        }
                    }
                }
                if (Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0 && !j.ΔᐃᐃΔ.open && !j.ⵠΔΔᐃ.open && !j.ⲆⲆᐃⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.options.open && j.ⵠⵠΔⵠⲆΔⲆ === 1) {
                    if (m = j.ⵠΔᐃⲆⲆ.button.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv)) {
                        j.ⵠΔᐃⲆⲆ.select();
                        if (ga) {
                            ga("send", "event", "Game", "market");
                        }
                    }
                }
                if (Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0 && !j.ⵠΔΔᐃ.open && !j.ⵠΔᐃⲆⲆ.open && !j.options.open && !j.ⲆⲆᐃⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && j.ᐃⲆⵠᐃⵠᐃⲆ === 1) {
                    if (m = j.ΔᐃᐃΔ.button.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv)) {
                        j.ΔᐃᐃΔ.ΔΔⵠⲆⵠⵠⵠᐃᐃ();
                        if (ga) {
                            ga("send", "event", "Game", "recipe");
                        }
                    }
                }
                if (Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0 && !j.ΔᐃᐃΔ.open && !j.ⵠΔΔᐃ.open && !j.options.open && !j.ⲆⲆᐃⲆⲆ.open && !j.ⵠΔᐃⲆⲆ.open && cf.mode !== 2 && cf.mode !== 4 && cf.mode !== 5 && j.ᐃⵠᐃᐃⲆΔΔ === 1) {
                    if (m = j.Ⲇᐃⵠⵠ.button.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Tv)) {
                        j.Ⲇᐃⵠⵠ.select();
                        if (ga) {
                            ga("send", "event", "Game", "quests");
                        }
                    }
                }
                if (Ww.ΔΔⵠᐃ.ᐃΔⲆⲆⲆ && b.which == 3) {
                    j.ⲆⲆᐃⲆⲆ.ΔⵠⲆⲆᐃᐃⵠ();
                }
            }
        };
        this.ᐃⲆⲆⲆᐃⵠⵠ = false;
        this.ΔᐃⵠⵠᐃΔⲆ = function (b) {
            yf.ᐃⲆΔⲆ = Xv(j.ⵠΔ, b);
            var d = false;
            Yw.ⵠⲆᐃΔⲆ.display = 0;
            Ww.ᐃΔⵠΔ.ⲆⲆⲆⵠⲆΔΔ.ΔΔᐃⵠⵠ(yf.ᐃⲆΔⲆ);
            if (j.ᐃⵠΔⲆⲆ != -1) {
                d |= j.ᐃΔⵠⲆᐃ[j.ᐃⵠΔⲆⲆ].button.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Rv);
            }
            var e = Ww.ᐃᐃⵠΔ;
            if (e.open && e.ⲆΔⵠΔΔ > 0) {
                d |= j.ΔΔⵠⲆᐃⵠΔ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Rv);
            }
            var f = Ww.ΔᐃΔᐃ;
            if (f.open && f.ⲆᐃⵠⵠᐃΔΔ > 0) {
                d |= j.ⵠⵠΔΔΔᐃᐃ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Rv);
                d |= j.ⲆᐃΔΔΔⵠᐃ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Rv);
                d |= j.ΔΔᐃⵠⲆⵠⲆ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Rv);
                d |= j.ᐃᐃⵠⲆΔⵠⵠ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Rv);
                d |= j.ⵠᐃⲆᐃⲆⵠⵠ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Rv);
            }
            var a = Ww.ⲆⲆⲆᐃ;
            if (a.open && a.ᐃⵠⵠⲆⵠⲆᐃ > 0) {
                d |= j.ᐃΔᐃⵠΔⵠⲆ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Rv);
            }
            if (Ww.sign.open) {
                d |= j.sign.button.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Rv);
            }
            var i = Ww.ⵠᐃᐃⵠ;
            if (Ww.ΔΔⵠᐃ.id < 0 && i.id >= 0 && !Ww.ⲆᐃΔᐃᐃ.enabled) {
                if (!Ww.ⵠᐃᐃⵠ.lock || Ww.ⵠᐃᐃⵠ.ⲆⲆΔⲆ === Ww.id) {
                    d |= j.ⵠᐃⲆ[i.id].ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Rv);
                }
            }
            if (Ww.ᐃⵠⵠΔᐃ.open) {
                d |= j.ᐃⵠⵠΔᐃ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Rv);
            }
            if (!Ww.ⵠᐃᐃⵠ.lock && !Ww.ⲆᐃΔᐃᐃ.enabled) {
                if (Ww.ⵠᐃᐃⵠ.ⵠΔΔⵠⵠᐃⲆ) {
                    d |= j.ⲆᐃⲆᐃⵠⵠⲆ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Rv);
                }
            }
            if (Ww.ⵠᐃᐃⵠ.ᐃΔⲆᐃⲆⲆᐃ && !Ww.ⲆᐃΔᐃᐃ.enabled) {
                d |= j.ⵠΔΔᐃΔΔᐃ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Rv);
            }
            if (Ww.ΔΔⵠᐃ.id < 0 && !Ww.ⲆᐃΔᐃᐃ.enabled) {
                for (var k = Ww.ᐃΔⵠΔ.ᐃΔΔᐃΔ, m = 0; m < k.length; m++) {
                    var n = k[m].ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Rv);
                    d |= Yw.ⵠⲆᐃΔⲆ.ᐃΔᐃⲆ(n, k[m], 0);
                    if (i.open && (i.id < 0 || k[m].id == i.id) || Ww.ⵠⵠΔⵠᐃ.open && k[m].id == 109 || Ww.ⵠΔᐃᐃᐃ.open && k[m].id === 180 || Ww.ⲆⲆⲆᐃ.open && (k[m].id == 109 || k[m].id == 131) || Ww.ᐃᐃⵠΔ.open && k[m].id == 134 || Ww.ΔᐃΔᐃ.open && k[m].id == 109) {
                        d |= j.ᐃⵠⵠᐃᐃ[k[m].id].ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Rv);
                    }
                }
            }
            if (Ww.ΔΔⵠᐃ.id < 0 && Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0 && !Ww.ⲆᐃΔᐃᐃ.enabled && !Ww.ⵠⵠΔⲆⲆ) {
                k = Ww.ΔΔⵠᐃ.ⲆⵠⲆᐃΔ;
                m = 0;
                for (; m < k.length; m++) {
                    n = false;
                    n = k[m].ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Rv);
                    d |= Yw.ⵠⲆᐃΔⲆ.ᐃΔᐃⲆ(n, k[m], 1);
                }
            }
            if (Ww.ΔΔⵠᐃ.id < 0 && Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0 && Ww.ⲆⵠᐃΔΔ.open && !j.ΔᐃᐃΔ.open && !j.ⵠΔΔᐃ.open && !j.options.open && !j.ⲆⲆᐃⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.ⵠΔᐃⲆⲆ.open) {
                d |= j.ⲆⵠᐃΔΔ.button.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Rv);
            }
            if (Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0 && !j.ⵠΔΔᐃ.open && !j.options.open && !j.ⲆⲆᐃⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.ⵠΔᐃⲆⲆ.open && j.ᐃⲆⵠᐃⵠᐃⲆ === 1) {
                d |= j.ΔᐃᐃΔ.button.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Rv);
            }
            if (Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0 && !j.ΔᐃᐃΔ.open && !j.ⵠΔΔᐃ.open && !j.ⲆⲆᐃⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.ⵠΔᐃⲆⲆ.open) {
                d |= j.options.button.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Rv);
            }
            if (Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0 && !j.ΔᐃᐃΔ.open && !j.ⵠΔΔᐃ.open && !j.ⲆⲆᐃⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.options.open && j.ⵠⵠΔⵠⲆΔⲆ === 1) {
                d |= j.ⵠΔᐃⲆⲆ.button.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Rv);
            }
            if (Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0 && !j.ΔᐃᐃΔ.open && !j.ⵠΔΔᐃ.open && !j.ⲆⲆᐃⲆⲆ.open && !j.Ⲇᐃⵠⵠ.open && !j.options.open && !j.ⵠΔᐃⲆⲆ.open) {
                if (Zw.ⲆⲆᐃᐃᐃ) {
                    d |= j.ΔⲆⵠⵠ.ⲆⲆⵠⵠⵠⵠⵠ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Rv);
                } else {
                    d |= j.ΔⲆⵠⵠ.ⵠΔᐃⲆΔⲆᐃ.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Rv);
                }
            }
            if (Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ < 0 && !j.ΔᐃᐃΔ.open && !j.ⵠΔΔᐃ.open && !j.options.open && !j.ⲆⲆᐃⲆⲆ.open && !j.ⵠΔᐃⲆⲆ.open && cf.mode !== 2 && cf.mode !== 4 && cf.mode !== mw.ΔᐃⲆⵠΔᐃⵠⵠⲆ && j.ᐃⵠᐃᐃⲆΔΔ === 1) {
                d |= j.Ⲇᐃⵠⵠ.button.ᐃΔᐃⲆ(j.ⵠΔ, yf.ᐃⲆΔⲆ, Rv);
            }
            if (j.ᐃⲆⲆⲆᐃⵠⵠ !== d) {
                j.ᐃⲆⲆⲆᐃⵠⵠ = d;
                c.style.cursor = d ? j.ⲆⲆΔⵠΔⲆⲆ : j.ΔΔⲆΔⵠⲆⲆ;
            }
        };
        this.ⲆⲆΔⲆᐃⲆΔ = function () {
            aj.addEventListener("mousedown", this.ⲆΔⵠⵠⲆⵠⲆ, Ig);
            aj.addEventListener("mouseup", this.ⵠᐃⲆⲆᐃⵠᐃ, false);
            aj.addEventListener("mousemove", this.ΔᐃⵠⵠᐃΔⲆ, false);
            aj.addEventListener("keyup", this.ᐃᐃΔⲆⲆⵠΔ, false);
            aj.addEventListener("keydown", this.ⲆᐃΔⵠⲆΔⲆ, Ij);
        };
        this.ᐃΔⲆΔᐃᐃⵠ = function () {
            aj.removeEventListener("mousedown", this.ⲆΔⵠⵠⲆⵠⲆ, Ij);
            aj.removeEventListener("mouseup", this.ⵠᐃⲆⲆᐃⵠᐃ, false);
            aj.removeEventListener("mousemove", this.ΔᐃⵠⵠᐃΔⲆ, zk);
            aj.removeEventListener("keyup", this.ᐃᐃΔⲆⲆⵠΔ, false);
            aj.removeEventListener("keydown", this.ⲆᐃΔⵠⲆΔⲆ, Kn);
        };
    }
    function Rw(b, c) {
        const d = (b | 5766) & ~(b & 5766);
        const e = (24 << (c >> 16 & 255)) + (8 << (c >> 8 & 255)) + (0 << (c >> 24 & 255)) + (16 << (c >> 0 & 255));
        const f = bf(d, e, d, e);
        const g = Ek(d, e);
        return (24 << ((f ^ g) & 255)) + (8 << ((f ^ g) >> 8 & 255)) + (16 << ((f ^ g) >> 24 & 255)) + (0 << ((f ^ g) >> 16 & 255));
    }
    function Sw(b, c, d, e, f) {
        Oj(pr, b, c, d, e, f);
        var g;
        var h;
        return ((42 + ((g = rr[0], h = rr[1], hi(pr, g, h), ((247 + (Bk(rr[0], rr[1], rr[0], rr[1], rr[0], rr[1]) ^ Iw(rr[0], rr[1], rr[0], rr[1]))) * 8121 + 28411) % 134456) ^ Jw(rr[2], rr[3], rr[4], rr[0], rr[1], rr[2]))) * 75 + 74) % 65537;
    }
    function Tw(b, c, d, e, f) {
        const i = (b | 17544) & ~(b & 17544);
        const a = (c | 43120) & ~(c & 43120);
        const j = d ^ 33499;
        const k = ((63620 + e) * 22695477 + 1) % 4294967296;
        const h = f ^ 23335;
        const l = Pw(i, a, j, k, h, i);
        no(a, j, k, h);
        return l ^ 31226;
    }
    (function () {
        function b() {
            this.ⵠΔⲆΔᐃ();
        }
        b.prototype = {
            ⵠΔⲆΔᐃ: function () {
                var a = this || f;
                a.ᐃⲆΔᐃⲆⵠΔ = 1000;
                a.ⵠⲆⲆⲆΔΔᐃ = {};
                a.ΔⲆⵠⵠⵠ = [];
                a.ⵠⵠΔᐃⲆ = false;
                a.ⵠᐃⵠᐃⲆ = 1;
                a.ⲆⵠᐃΔⲆΔᐃ = "canplaythrough";
                a.ⲆⵠⲆᐃⲆ = typeof aj != "undefined" && aj.navigator ? aj.navigator : null;
                a.ⵠᐃⵠΔΔᐃⲆ = null;
                a.ΔΔΔΔᐃⵠΔ = false;
                a.ᐃᐃΔΔⲆ = true;
                a.ᐃⲆⲆΔΔᐃⲆ = true;
                a.Ⲇ = null;
                a.ᐃΔⵠⵠⵠⵠⲆ = true;
                a.ⲆⲆⵠΔᐃⵠΔ();
                return a;
            },
            volume: function (b) {
                var c = this || f;
                b = parseFloat(b);
                if (!c.Ⲇ) {
                    i();
                }
                if (b !== undefined && b >= 0 && b <= 1) {
                    c.ⵠᐃⵠᐃⲆ = b;
                    if (c.ⵠⵠΔᐃⲆ) {
                        return c;
                    }
                    if (c.ᐃᐃΔΔⲆ) {
                        c.ⵠᐃⵠΔΔᐃⲆ.gain.value = b;
                    }
                    for (var d = 0; d < c.ΔⲆⵠⵠⵠ.length; d++) {
                        if (!c.ΔⲆⵠⵠⵠ[d].ΔⵠΔΔⵠ) {
                            for (var g = c.ΔⲆⵠⵠⵠ[d].ⵠΔᐃⵠᐃ(), h = 0; h < g.length; h++) {
                                var j = c.ΔⲆⵠⵠⵠ[d].ⵠᐃΔᐃⵠ(g[h]);
                                if (j && j.ᐃΔΔᐃ) {
                                    j.ᐃΔΔᐃ.volume = j.ⵠᐃⵠᐃⲆ * b;
                                }
                            }
                        }
                    }
                    return c;
                }
                return c.ⵠᐃⵠᐃⲆ;
            },
            ᐃᐃⵠⵠᐃⵠⵠ: function (b) {
                var c = this || f;
                if (!c.Ⲇ) {
                    i();
                }
                c.ⵠⵠΔᐃⲆ = b;
                if (c.ᐃᐃΔΔⲆ) {
                    c.ⵠᐃⵠΔΔᐃⲆ.gain.value = b ? 0 : c.ⵠᐃⵠᐃⲆ;
                }
                for (var d = 0; d < c.ΔⲆⵠⵠⵠ.length; d++) {
                    if (!c.ΔⲆⵠⵠⵠ[d].ΔⵠΔΔⵠ) {
                        for (var e = c.ΔⲆⵠⵠⵠ[d].ⵠΔᐃⵠᐃ(), g = 0; g < e.length; g++) {
                            var h = c.ΔⲆⵠⵠⵠ[d].ⵠᐃΔᐃⵠ(e[g]);
                            if (h && h.ᐃΔΔᐃ) {
                                h.ᐃΔΔᐃ.muted = !!b || h.ⵠⵠΔᐃⲆ;
                            }
                        }
                    }
                }
                return c;
            },
            ⲆΔᐃⲆⲆΔⲆ: function () {
                var a = this || f;
                for (var b = a.ΔⲆⵠⵠⵠ.length - 1; b >= 0; b--) {
                    a.ΔⲆⵠⵠⵠ[b].ⲆΔᐃⲆⲆΔⲆ();
                }
                if (a.ᐃᐃΔΔⲆ && a.Ⲇ && a.Ⲇ.close !== undefined) {
                    a.Ⲇ.close();
                    a.Ⲇ = null;
                    i();
                }
                return a;
            },
            ΔⵠΔᐃⲆⲆⵠᐃⵠ: function (a) {
                return (this || f).ⵠⲆⲆⲆΔΔᐃ[a.replace(/^x-/, "")];
            },
            ⲆⲆⵠΔᐃⵠΔ: function () {
                var a = this || f;
                a.state = a.Ⲇ && a.Ⲇ.state || "running";
                a.ΔⵠⲆⲆΔᐃᐃ();
                if (!a.ᐃᐃΔΔⲆ) {
                    if (typeof Audio != "undefined") {
                        try {
                            if (new Audio().oncanplaythrough === undefined) {
                                a.ⲆⵠᐃΔⲆΔᐃ = "canplay";
                            }
                        } catch (b) {
                            a.ΔΔΔΔᐃⵠΔ = true;
                        }
                    } else {
                        a.ΔΔΔΔᐃⵠΔ = true;
                    }
                }
                try {
                    if (new Audio().muted) {
                        a.ΔΔΔΔᐃⵠΔ = true;
                    }
                } catch (a) { }
                if (!a.ΔΔΔΔᐃⵠΔ) {
                    a.ⵠⵠⵠⲆᐃΔⲆᐃΔ();
                }
                return a;
            },
            ⵠⵠⵠⲆᐃΔⲆᐃΔ: function () {
                var b = this || f;
                var c = null;
                try {
                    c = typeof Audio != "undefined" ? new Audio() : null;
                } catch (a) {
                    return b;
                }
                if (!c || typeof c.canPlayType != "function") {
                    return b;
                }
                var d = c.canPlayType("audio/mpeg;").replace(/^no$/, "");
                var e = b.ⲆⵠⲆᐃⲆ && b.ⲆⵠⲆᐃⲆ.userAgent.match(/OPR\/([0-6].)/g);
                var g = e && parseInt(e[0].split("/")[1], 10) < 33;
                b.ⵠⲆⲆⲆΔΔᐃ = {
                    ᐃⲆᐃⲆⵠΔᐃᐃⲆ: !g && (!!d || !!c.canPlayType("audio/mp3;").replace(/^no$/, "")),
                    ⲆᐃᐃΔⵠᐃᐃΔⲆ: !!d,
                    ⲆⲆΔⲆᐃⲆΔⲆⵠ: !!c.canPlayType("audio/ogg; codecs=\"opus\"").replace(/^no$/, ""),
                    ᐃⵠᐃᐃΔᐃΔⵠΔ: !!c.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ⲆΔⵠⵠⲆⵠΔΔⵠ: !!c.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ⲆᐃΔΔⲆᐃᐃΔᐃ: !!c.canPlayType("audio/wav; codecs=\"1\"").replace(/^no$/, ""),
                    ΔⲆⲆΔⲆⲆΔΔⵠ: !!c.canPlayType("audio/aac;").replace(/^no$/, ""),
                    ⲆⵠⲆΔⲆΔⵠΔⲆ: !!c.canPlayType("audio/x-caf;").replace(/^no$/, ""),
                    ⵠⲆⵠⵠⲆΔⲆⲆᐃ: !!(c.canPlayType("audio/x-m4a;") || c.canPlayType("audio/m4a;") || c.canPlayType("audio/aac;")).replace(/^no$/, ""),
                    ᐃΔΔΔⲆΔᐃᐃᐃ: !!(c.canPlayType("audio/x-mp4;") || c.canPlayType("audio/mp4;") || c.canPlayType("audio/aac;")).replace(/^no$/, ""),
                    ⵠᐃᐃⵠᐃΔᐃⵠᐃ: !!c.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ⵠᐃⲆⲆⲆⵠᐃⵠᐃ: !!c.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ᐃᐃⵠᐃΔΔⵠΔⲆ: !!c.canPlayType("audio/mp4; codecs=\"ec-3\"").replace(/^no$/, ""),
                    ⵠΔⲆᐃⲆⲆⵠΔⵠ: !!(c.canPlayType("audio/x-flac;") || c.canPlayType("audio/flac;")).replace(/^no$/, "")
                };
                return b;
            },
            ΔΔⵠΔⲆⲆΔⲆⵠ: function () {
                var b = this || f;
                var a = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(b.ⲆⵠⲆᐃⲆ && b.ⲆⵠⲆᐃⲆ.userAgent);
                var c = !!("ontouchend" in aj) || !!b.ⲆⵠⲆᐃⲆ && b.ⲆⵠⲆᐃⲆ.maxTouchPoints > 0 || !!b.ⲆⵠⲆᐃⲆ && b.ⲆⵠⲆᐃⲆ.ⲆΔΔᐃⲆΔᐃΔⲆ > 0;
                if (!b.ΔⲆⵠⲆᐃΔⵠ && b.Ⲇ && (a || c)) {
                    b.ΔⲆⵠⲆᐃΔⵠ = false;
                    if (!b.ⵠᐃⲆⲆᐃᐃⵠᐃⲆ && b.Ⲇ.sampleRate !== 44100) {
                        b.ⵠᐃⲆⲆᐃᐃⵠᐃⲆ = true;
                        b.ⲆΔᐃⲆⲆΔⲆ();
                    }
                    b.ⵠΔⲆΔᐃᐃΔ = b.Ⲇ.createBuffer(1, 1, 22050);
                    function c() {
                        f.ᐃᐃΔⲆⵠⵠⲆ();
                        var a = b.Ⲇ.createBufferSource();
                        a.buffer = b.ⵠΔⲆΔᐃᐃΔ;
                        a.connect(b.Ⲇ.destination);
                        if (a.start === undefined) {
                            a.ⵠᐃⲆⲆⵠⵠⲆⵠⵠ(0);
                        } else {
                            a.start(0);
                        }
                        if (typeof b.Ⲇ.resume == "function") {
                            b.Ⲇ.resume();
                        }
                        a.onended = function () {
                            a.disconnect(0);
                            b.ΔⲆⵠⲆᐃΔⵠ = true;
                            b.ᐃΔⵠⵠⵠⵠⲆ = false;
                            document.removeEventListener("touchend", c, true);
                        };
                    }
                    document.addEventListener("touchend", c, true);
                    return b;
                }
            },
            ΔⵠⲆⲆΔᐃᐃ: function () {
                var a = this;
                if (a.ᐃⲆⲆΔΔᐃⲆ && a.Ⲇ && a.Ⲇ.suspend !== undefined && f.ᐃᐃΔΔⲆ) {
                    for (var b = 0; b < a.ΔⲆⵠⵠⵠ.length; b++) {
                        if (a.ΔⲆⵠⵠⵠ[b].ΔⵠΔΔⵠ) {
                            for (var c = 0; c < a.ΔⲆⵠⵠⵠ[b].ⵠᐃⲆⲆᐃ.length; c++) {
                                if (!a.ΔⲆⵠⵠⵠ[b].ⵠᐃⲆⲆᐃ[c].Ⲇᐃᐃᐃᐃ) {
                                    return a;
                                }
                            }
                        }
                    }
                    if (a.ΔᐃⵠΔΔΔΔ) {
                        clearTimeout(a.ΔᐃⵠΔΔΔΔ);
                    }
                    a.ΔᐃⵠΔΔΔΔ = setTimeout(function () {
                        if (a.ᐃⲆⲆΔΔᐃⲆ) {
                            a.ΔᐃⵠΔΔΔΔ = null;
                            a.state = "suspending";
                            a.Ⲇ.suspend().then(function () {
                                a.state = "suspended";
                                if (a.ⵠⵠΔΔᐃⲆᐃ) {
                                    delete a.ⵠⵠΔΔᐃⲆᐃ;
                                    a.ᐃᐃΔⲆⵠⵠⲆ();
                                }
                            });
                        }
                    }, 30000);
                    return a;
                }
            },
            ᐃᐃΔⲆⵠⵠⲆ: function () {
                var a = this;
                if (a.Ⲇ && a.Ⲇ.resume !== undefined && f.ᐃᐃΔΔⲆ) {
                    if (a.state === "running" && a.ΔᐃⵠΔΔΔΔ) {
                        clearTimeout(a.ΔᐃⵠΔΔΔΔ);
                        a.ΔᐃⵠΔΔΔΔ = null;
                    } else if (a.state === "suspended") {
                        a.Ⲇ.resume().then(function () {
                            a.state = "running";
                            for (var b = 0; b < a.ΔⲆⵠⵠⵠ.length; b++) {
                                a.ΔⲆⵠⵠⵠ[b].ⲆⵠⵠⵠⲆ("resume");
                            }
                        });
                        if (a.ΔᐃⵠΔΔΔΔ) {
                            clearTimeout(a.ΔᐃⵠΔΔΔΔ);
                            a.ΔᐃⵠΔΔΔΔ = null;
                        }
                    } else if (a.state === "suspending") {
                        a.ⵠⵠΔΔᐃⲆᐃ = true;
                    }
                    return a;
                }
            }
        };
        var f = new b();
        function c(a) {
            if (a.src && a.src.length !== 0) {
                this.ⵠΔⲆΔᐃ(a);
            } else {
                console.error(undefined);
            }
        }
        c.prototype = {
            ⵠΔⲆΔᐃ: function (a) {
                var b = this;
                if (!f.Ⲇ) {
                    i();
                }
                b.ΔΔⵠⲆⵠⵠⲆΔⲆ = a.autoplay || false;
                b.ⲆⵠᐃΔᐃΔⵠ = typeof a.ⲆᐃⵠΔⲆⲆᐃ != "string" ? a.ⲆᐃⵠΔⲆⲆᐃ : [a.ⲆᐃⵠΔⲆⲆᐃ];
                b.ⲆΔᐃⵠᐃᐃΔ = a.ᐃᐃⲆᐃΔⲆⲆⲆᐃ || false;
                b.ⵠⵠΔᐃⲆ = a.ᐃᐃⵠⵠᐃⵠⵠ || false;
                b.ΔΔⵠⲆᐃ = a.loop || false;
                b.ᐃⵠⵠⲆⵠᐃΔⲆⵠ = a.ᐃᐃⲆΔⲆⵠΔⵠⵠ || 5;
                b.ⵠⵠⵠⲆᐃᐃᐃⵠΔ = typeof a.preload != "boolean" || a.preload;
                b.ᐃΔⲆⵠⲆ = a.rate || 1;
                b.ΔᐃΔⵠᐃ = a.ΔⲆ || {};
                b.ᐃⲆᐃΔᐃ = typeof a.src != "string" ? a.src : [a.src];
                b.ⵠᐃⵠᐃⲆ = a.volume !== undefined ? a.volume : 1;
                b.ΔⵠΔᐃᐃΔⵠ = 0;
                b.ΔⲆᐃⵠⲆ = "unloaded";
                b.ⵠᐃⲆⲆᐃ = [];
                b.ⵠᐃΔⲆⵠΔⵠ = {};
                b.ⲆΔΔⲆⲆ = [];
                b.ᐃᐃⲆⵠⲆⲆᐃᐃΔ = a.onend ? [{
                    ᐃΔΔᐃⲆ: a.onend
                }] : [];
                b.ΔⵠⵠⵠᐃΔΔΔᐃ = a.onfade ? [{
                    ᐃΔΔᐃⲆ: a.onfade
                }] : [];
                b.ΔᐃⵠΔⵠⲆᐃᐃⵠ = a.onload ? [{
                    ᐃΔΔᐃⲆ: a.onload
                }] : [];
                b.ᐃⲆΔΔᐃᐃᐃⵠᐃ = a.ΔΔⲆⲆᐃⵠⵠΔⵠ ? [{
                    ᐃΔΔᐃⲆ: a.ΔΔⲆⲆᐃⵠⵠΔⵠ
                }] : [];
                b.ΔᐃΔⲆⲆⵠᐃᐃⲆ = a.onpause ? [{
                    ᐃΔΔᐃⲆ: a.onpause
                }] : [];
                b.ⵠᐃΔⲆⲆᐃᐃⵠᐃ = a.onplay ? [{
                    ᐃΔΔᐃⲆ: a.onplay
                }] : [];
                b.ⵠΔΔⲆᐃΔΔᐃᐃ = a.onstop ? [{
                    ᐃΔΔᐃⲆ: a.onstop
                }] : [];
                b.ⲆΔⵠᐃⲆⲆΔⲆⲆ = a.onmute ? [{
                    ᐃΔΔᐃⲆ: a.onmute
                }] : [];
                b.ᐃᐃⲆⵠⲆΔΔⲆⲆ = a.ⲆΔᐃᐃᐃⵠᐃΔᐃ ? [{
                    ᐃΔΔᐃⲆ: a.ⲆΔᐃᐃᐃⵠᐃΔᐃ
                }] : [];
                b.ⵠΔΔᐃⵠᐃᐃⲆⲆ = a.ⲆᐃᐃᐃⲆⲆΔⵠⲆ ? [{
                    ᐃΔΔᐃⲆ: a.ⲆᐃᐃᐃⲆⲆΔⵠⲆ
                }] : [];
                b.ⲆΔᐃᐃΔΔᐃΔΔ = a.ⲆᐃΔΔⲆⵠΔᐃᐃ ? [{
                    ᐃΔΔᐃⲆ: a.ⲆᐃΔΔⲆⵠΔᐃᐃ
                }] : [];
                b.ΔᐃⵠᐃⲆⲆᐃⲆⵠ = [];
                b.ΔⵠΔΔⵠ = f.ᐃᐃΔΔⲆ && !b.ⲆΔᐃⵠᐃᐃΔ;
                if (f.Ⲇ !== undefined && f.Ⲇ && f.ᐃΔⵠⵠⵠⵠⲆ) {
                    f.ΔΔⵠΔⲆⲆΔⲆⵠ();
                }
                f.ΔⲆⵠⵠⵠ.push(b);
                if (b.ΔΔⵠⲆⵠⵠⲆΔⲆ) {
                    b.ⲆΔΔⲆⲆ.push({
                        event: "play",
                        action: function () {
                            b.play();
                        }
                    });
                }
                if (b.ⵠⵠⵠⲆᐃᐃᐃⵠΔ) {
                    b.load();
                }
                return b;
            },
            load: function () {
                var b = this;
                var c = null;
                if (!f.ΔΔΔΔᐃⵠΔ) {
                    if (typeof b.ᐃⲆᐃΔᐃ == "string") {
                        b.ᐃⲆᐃΔᐃ = [b.ᐃⲆᐃΔᐃ];
                    }
                    for (var e = 0; e < b.ᐃⲆᐃΔᐃ.length; e++) {
                        var g;
                        var i;
                        if (b.ⲆⵠᐃΔᐃΔⵠ && b.ⲆⵠᐃΔᐃΔⵠ[e]) {
                            g = b.ⲆⵠᐃΔᐃΔⵠ[e];
                        } else {
                            if (typeof (i = b.ᐃⲆᐃΔᐃ[e]) != "string") {
                                b.ⲆⵠⵠⵠⲆ("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                                continue;
                            }
                            if (!(g = /^data:audio\/([^;,]+);/i.exec(i))) {
                                g = /\.([^.]+)$/.exec(i.split("?", 1)[0]);
                            }
                            g &&= g[1].toLowerCase();
                        }
                        if (!g) {
                            console.warn("No file extension was found. Consider using the \"format\" property or specify an extension.");
                        }
                        if (g && f.ΔⵠΔᐃⲆⲆⵠᐃⵠ(g)) {
                            c = b.ᐃⲆᐃΔᐃ[e];
                            break;
                        }
                    }
                    if (c) {
                        b.ᐃⲆᐃΔᐃ = c;
                        b.ΔⲆᐃⵠⲆ = "loading";
                        if (aj.location.protocol === "https:" && c.slice(0, 5) === "http:") {
                            b.ⲆΔᐃⵠᐃᐃΔ = true;
                            b.ΔⵠΔΔⵠ = false;
                        }
                        new d(b);
                        if (b.ΔⵠΔΔⵠ) {
                            a(b);
                        }
                        return b;
                    } else {
                        b.ⲆⵠⵠⵠⲆ("loaderror", null, "No codec support for selected audio sources.");
                        return;
                    }
                }
                b.ⲆⵠⵠⵠⲆ("loaderror", null, "No audio support.");
            },
            play: function (e, j) {
                var k = this;
                var n = null;
                if (typeof e == "number") {
                    n = e;
                    e = null;
                } else {
                    if (typeof e == "string" && k.ΔⲆᐃⵠⲆ === "loaded" && !k.ΔᐃΔⵠᐃ[e]) {
                        return null;
                    }
                    if (e === undefined) {
                        e = "__default";
                        var o = 0;
                        for (var p = 0; p < k.ⵠᐃⲆⲆᐃ.length; p++) {
                            if (k.ⵠᐃⲆⲆᐃ[p].Ⲇᐃᐃᐃᐃ && !k.ⵠᐃⲆⲆᐃ[p].ⲆⵠᐃⲆⲆ) {
                                o++;
                                n = k.ⵠᐃⲆⲆᐃ[p].ᐃΔⲆⲆ;
                            }
                        }
                        if (o === 1) {
                            e = null;
                        } else {
                            n = null;
                        }
                    }
                }
                var q = n ? k.ⵠᐃΔᐃⵠ(n) : k.ⵠⵠⲆⲆΔΔⵠᐃⵠ();
                if (!q) {
                    return null;
                }
                if (n && !e) {
                    e = q.ΔᐃΔⵠᐃ || "__default";
                }
                if (k.ΔⲆᐃⵠⲆ !== "loaded") {
                    q.ΔᐃΔⵠᐃ = e;
                    q.ⲆⵠᐃⲆⲆ = false;
                    var h = q.ᐃΔⲆⲆ;
                    k.ⲆΔΔⲆⲆ.push({
                        event: "play",
                        action: function () {
                            k.play(h);
                        }
                    });
                    return h;
                }
                if (n && !q.Ⲇᐃᐃᐃᐃ) {
                    if (!j) {
                        setTimeout(function () {
                            k.ⲆⵠⵠⵠⲆ("play", q.ᐃΔⲆⲆ);
                        }, 0);
                    }
                    return q.ᐃΔⲆⲆ;
                }
                if (k.ΔⵠΔΔⵠ) {
                    f.ᐃᐃΔⲆⵠⵠⲆ();
                }
                var l = Math.max(0, q.ΔⲆⵠⲆᐃ > 0 ? q.ΔⲆⵠⲆᐃ : k.ΔᐃΔⵠᐃ[e][0] / 1000);
                var g = Math.max(0, (k.ΔᐃΔⵠᐃ[e][0] + k.ΔᐃΔⵠᐃ[e][1]) / 1000 - l);
                var t = g * 1000 / Math.abs(q.ᐃΔⲆⵠⲆ);
                q.Ⲇᐃᐃᐃᐃ = false;
                q.ⲆⵠᐃⲆⲆ = false;
                q.ΔᐃΔⵠᐃ = e;
                q.ΔⲆⵠⲆᐃ = l;
                q.ᐃⵠᐃᐃⲆ = k.ΔᐃΔⵠᐃ[e][0] / 1000;
                q.ΔᐃⵠᐃⲆᐃᐃ = (k.ΔᐃΔⵠᐃ[e][0] + k.ΔᐃΔⵠᐃ[e][1]) / 1000;
                q.ΔΔⵠⲆᐃ = !!q.ΔΔⵠⲆᐃ || !!k.ΔᐃΔⵠᐃ[e][2];
                var b = q.ᐃΔΔᐃ;
                if (k.ΔⵠΔΔⵠ) {
                    function a() {
                        k.ⵠΔᐃⵠᐃᐃⵠᐃᐃ(q);
                        var a = q.ⵠⵠΔᐃⲆ || k.ⵠⵠΔᐃⲆ ? 0 : q.ⵠᐃⵠᐃⲆ;
                        b.gain.setValueAtTime(a, f.Ⲇ.currentTime);
                        q.ⵠⲆⵠᐃⲆΔⵠ = f.Ⲇ.currentTime;
                        if (b.ⲆΔΔⵠⲆ.start === undefined) {
                            if (q.ΔΔⵠⲆᐃ) {
                                b.ⲆΔΔⵠⲆ.ⵠⲆΔᐃⲆⲆᐃᐃⲆ(0, l, 86400);
                            } else {
                                b.ⲆΔΔⵠⲆ.ⵠⲆΔᐃⲆⲆᐃᐃⲆ(0, l, g);
                            }
                        } else if (q.ΔΔⵠⲆᐃ) {
                            b.ⲆΔΔⵠⲆ.start(0, l, 86400);
                        } else {
                            b.ⲆΔΔⵠⲆ.start(0, l, g);
                        }
                        if (t !== Infinity) {
                            k.ⵠᐃΔⲆⵠΔⵠ[q.ᐃΔⲆⲆ] = setTimeout(k.ⲆⵠᐃⲆⲆ.bind(k, q), t);
                        }
                        if (!j) {
                            setTimeout(function () {
                                k.ⲆⵠⵠⵠⲆ("play", q.ᐃΔⲆⲆ);
                            }, 0);
                        }
                    }
                    var d = f.state === "running";
                    if (k.ΔⲆᐃⵠⲆ === "loaded" && d) {
                        a();
                    } else {
                        var m = d || k.ΔⲆᐃⵠⲆ !== "loaded" ? "load" : "resume";
                        k.once(m, a, d ? q.ᐃΔⲆⲆ : null);
                        k.ᐃᐃΔΔᐃᐃⵠ(q.ᐃΔⲆⲆ);
                    }
                } else {
                    function a() {
                        b.currentTime = l;
                        b.muted = q.ⵠⵠΔᐃⲆ || k.ⵠⵠΔᐃⲆ || f.ⵠⵠΔᐃⲆ || b.muted;
                        b.volume = q.ⵠᐃⵠᐃⲆ * f.volume();
                        b.playbackRate = q.ᐃΔⲆⵠⲆ;
                        b.play();
                        if (t !== Infinity) {
                            k.ⵠᐃΔⲆⵠΔⵠ[q.ᐃΔⲆⲆ] = setTimeout(k.ⲆⵠᐃⲆⲆ.bind(k, q), t);
                        }
                        if (!j) {
                            k.ⲆⵠⵠⵠⲆ("play", q.ᐃΔⲆⲆ);
                        }
                    }
                    var c = k.ΔⲆᐃⵠⲆ === "loaded" && (aj && aj.ⵠⵠⵠⵠᐃⵠΔⲆᐃ || !b.readyState && f.ⲆⵠⲆᐃⲆ.ᐃⵠⲆᐃΔⲆⲆⵠΔ);
                    if (b.readyState === 4 || c) {
                        a();
                    } else {
                        function c() {
                            a();
                            b.removeEventListener(f.ⲆⵠᐃΔⲆΔᐃ, c, false);
                        }
                        b.addEventListener(f.ⲆⵠᐃΔⲆΔᐃ, c, false);
                        k.ᐃᐃΔΔᐃᐃⵠ(q.ᐃΔⲆⲆ);
                    }
                }
                return q.ᐃΔⲆⲆ;
            },
            pause: function (a) {
                var b = this;
                if (b.ΔⲆᐃⵠⲆ !== "loaded") {
                    b.ⲆΔΔⲆⲆ.push({
                        event: "pause",
                        action: function () {
                            b.pause(a);
                        }
                    });
                    return b;
                }
                for (var c = b.ⵠΔᐃⵠᐃ(a), d = 0; d < c.length; d++) {
                    b.ᐃᐃΔΔᐃᐃⵠ(c[d]);
                    var e = b.ⵠᐃΔᐃⵠ(c[d]);
                    if (e && !e.Ⲇᐃᐃᐃᐃ && (e.ΔⲆⵠⲆᐃ = b.ⵠⲆᐃⲆⲆⲆⲆ(c[d]), e.ΔⲆᐃᐃⲆΔⵠ = 0, e.Ⲇᐃᐃᐃᐃ = true, b.ΔⵠΔᐃⵠΔⲆ(c[d]), e.ᐃΔΔᐃ)) {
                        if (b.ΔⵠΔΔⵠ) {
                            if (!e.ᐃΔΔᐃ.ⲆΔΔⵠⲆ) {
                                continue;
                            }
                            if (e.ᐃΔΔᐃ.ⲆΔΔⵠⲆ.stop === undefined) {
                                e.ᐃΔΔᐃ.ⲆΔΔⵠⲆ.ⲆᐃⵠᐃⲆΔⲆⵠᐃ(0);
                            } else {
                                e.ᐃΔΔᐃ.ⲆΔΔⵠⲆ.stop(0);
                            }
                            b.ⵠⲆΔᐃΔⵠᐃ(e.ᐃΔΔᐃ);
                        } else if (!isNaN(e.ᐃΔΔᐃ.duration) || e.ᐃΔΔᐃ.duration === Infinity) {
                            e.ᐃΔΔᐃ.pause();
                        }
                    }
                    if (!arguments[1]) {
                        b.ⲆⵠⵠⵠⲆ("pause", e ? e.ᐃΔⲆⲆ : null);
                    }
                }
                return b;
            },
            stop: function (b, c) {
                var d = this;
                if (d.ΔⲆᐃⵠⲆ !== "loaded") {
                    d.ⲆΔΔⲆⲆ.push({
                        event: "stop",
                        action: function () {
                            d.stop(b);
                        }
                    });
                    return d;
                }
                for (var e = d.ⵠΔᐃⵠᐃ(b), f = 0; f < e.length; f++) {
                    d.ᐃᐃΔΔᐃᐃⵠ(e[f]);
                    var g = d.ⵠᐃΔᐃⵠ(e[f]);
                    if (g) {
                        g.ΔⲆⵠⲆᐃ = g.ᐃⵠᐃᐃⲆ || 0;
                        g.ΔⲆᐃᐃⲆΔⵠ = 0;
                        g.Ⲇᐃᐃᐃᐃ = true;
                        g.ⲆⵠᐃⲆⲆ = true;
                        d.ΔⵠΔᐃⵠΔⲆ(e[f]);
                        if (g.ᐃΔΔᐃ) {
                            if (d.ΔⵠΔΔⵠ) {
                                if (g.ᐃΔΔᐃ.ⲆΔΔⵠⲆ) {
                                    if (g.ᐃΔΔᐃ.ⲆΔΔⵠⲆ.stop === undefined) {
                                        g.ᐃΔΔᐃ.ⲆΔΔⵠⲆ.ⲆᐃⵠᐃⲆΔⲆⵠᐃ(0);
                                    } else {
                                        g.ᐃΔΔᐃ.ⲆΔΔⵠⲆ.stop(0);
                                    }
                                    d.ⵠⲆΔᐃΔⵠᐃ(g.ᐃΔΔᐃ);
                                }
                            } else if (!isNaN(g.ᐃΔΔᐃ.duration) || g.ᐃΔΔᐃ.duration === Infinity) {
                                g.ᐃΔΔᐃ.currentTime = g.ᐃⵠᐃᐃⲆ || 0;
                                g.ᐃΔΔᐃ.pause();
                            }
                        }
                        if (!c) {
                            d.ⲆⵠⵠⵠⲆ("stop", g.ᐃΔⲆⲆ);
                        }
                    }
                }
                return d;
            },
            ᐃᐃⵠⵠᐃⵠⵠ: function (b, c) {
                var d = this;
                if (d.ΔⲆᐃⵠⲆ !== "loaded") {
                    d.ⲆΔΔⲆⲆ.push({
                        event: "mute",
                        action: function () {
                            d.ᐃᐃⵠⵠᐃⵠⵠ(b, c);
                        }
                    });
                    return d;
                }
                if (c === undefined) {
                    if (typeof b != "boolean") {
                        return d.ⵠⵠΔᐃⲆ;
                    }
                    d.ⵠⵠΔᐃⲆ = b;
                }
                for (var e = d.ⵠΔᐃⵠᐃ(c), g = 0; g < e.length; g++) {
                    var h = d.ⵠᐃΔᐃⵠ(e[g]);
                    if (h) {
                        h.ⵠⵠΔᐃⲆ = b;
                        if (d.ΔⵠΔΔⵠ && h.ᐃΔΔᐃ) {
                            h.ᐃΔΔᐃ.gain.setValueAtTime(b ? 0 : h.ⵠᐃⵠᐃⲆ, f.Ⲇ.currentTime);
                        } else if (h.ᐃΔΔᐃ) {
                            h.ᐃΔΔᐃ.muted = !!f.ⵠⵠΔᐃⲆ || b;
                        }
                        d.ⲆⵠⵠⵠⲆ("mute", h.ᐃΔⲆⲆ);
                    }
                }
                return d;
            },
            volume: function () {
                var b;
                var c;
                var d;
                var g = this;
                var h = arguments;
                if (h.length === 0) {
                    return g.ⵠᐃⵠᐃⲆ;
                }
                if (h.length === 1 || h.length === 2 && h[1] === undefined) {
                    if (g.ⵠΔᐃⵠᐃ().indexOf(h[0]) >= 0) {
                        c = parseInt(h[0], 10);
                    } else {
                        b = parseFloat(h[0]);
                    }
                } else if (h.length >= 2) {
                    b = parseFloat(h[0]);
                    c = parseInt(h[1], 10);
                }
                if (b === undefined || b < 0 || b > 1) {
                    if (d = c ? g.ⵠᐃΔᐃⵠ(c) : g.ⵠᐃⲆⲆᐃ[0]) {
                        return d.ⵠᐃⵠᐃⲆ;
                    } else {
                        return 0;
                    }
                }
                if (g.ΔⲆᐃⵠⲆ !== "loaded") {
                    g.ⲆΔΔⲆⲆ.push({
                        event: "volume",
                        action: function () {
                            g.volume.apply(g, h);
                        }
                    });
                    return g;
                }
                if (c === undefined) {
                    g.ⵠᐃⵠᐃⲆ = b;
                }
                c = g.ⵠΔᐃⵠᐃ(c);
                for (var a = 0; a < c.length; a++) {
                    if (d = g.ⵠᐃΔᐃⵠ(c[a])) {
                        d.ⵠᐃⵠᐃⲆ = b;
                        if (!h[2]) {
                            g.ΔⵠΔᐃⵠΔⲆ(c[a]);
                        }
                        if (g.ΔⵠΔΔⵠ && d.ᐃΔΔᐃ && !d.ⵠⵠΔᐃⲆ) {
                            d.ᐃΔΔᐃ.gain.setValueAtTime(b, f.Ⲇ.currentTime);
                        } else if (d.ᐃΔΔᐃ && !d.ⵠⵠΔᐃⲆ) {
                            d.ᐃΔΔᐃ.volume = b * f.volume();
                        }
                        g.ⲆⵠⵠⵠⲆ("volume", d.ᐃΔⲆⲆ);
                    }
                }
                return g;
            },
            fade: function (c, e, i, j) {
                var k = this;
                var a = Math.abs(c - e);
                var n = c > e ? "out" : "in";
                var o = a / 0.01;
                var p = o > 0 ? i / o : i;
                if (p < 4) {
                    o = Math.ceil(o / (4 / p));
                    p = 4;
                }
                if (k.ΔⲆᐃⵠⲆ !== "loaded") {
                    k.ⲆΔΔⲆⲆ.push({
                        event: "fade",
                        action: function () {
                            k.fade(c, e, i, j);
                        }
                    });
                    return k;
                }
                k.volume(c, j);
                for (var q = k.ⵠΔᐃⵠᐃ(j), g = 0; g < q.length; g++) {
                    var r = k.ⵠᐃΔᐃⵠ(q[g]);
                    if (r) {
                        if (!j) {
                            k.ΔⵠΔᐃⵠΔⲆ(q[g]);
                        }
                        if (k.ΔⵠΔΔⵠ && !r.ⵠⵠΔᐃⲆ) {
                            var s = f.Ⲇ.currentTime;
                            var t = s + i / 1000;
                            r.ⵠᐃⵠᐃⲆ = c;
                            r.ᐃΔΔᐃ.gain.setValueAtTime(c, s);
                            r.ᐃΔΔᐃ.gain.linearRampToValueAtTime(e, t);
                        }
                        var w = c;
                        r.ΔΔⵠⲆΔᐃᐃ = setInterval(function (a, b) {
                            if (o > 0) {
                                w += n === "in" ? 0.01 : -0.01;
                            }
                            w = Math.max(0, w);
                            w = Math.min(1, w);
                            w = Math.round(w * 100) / 100;
                            if (k.ΔⵠΔΔⵠ) {
                                if (j === undefined) {
                                    k.ⵠᐃⵠᐃⲆ = w;
                                }
                                b.ⵠᐃⵠᐃⲆ = w;
                            } else {
                                k.volume(w, a, true);
                            }
                            if (e < c && w <= e || e > c && w >= e) {
                                clearInterval(b.ΔΔⵠⲆΔᐃᐃ);
                                b.ΔΔⵠⲆΔᐃᐃ = null;
                                k.volume(e, a);
                                k.ⲆⵠⵠⵠⲆ("fade", a);
                            }
                        }.bind(k, q[g], r), p);
                    }
                }
                return k;
            },
            ΔⵠΔᐃⵠΔⲆ: function (a) {
                var b = this;
                var c = b.ⵠᐃΔᐃⵠ(a);
                if (c && c.ΔΔⵠⲆΔᐃᐃ) {
                    if (b.ΔⵠΔΔⵠ) {
                        c.ᐃΔΔᐃ.gain.cancelScheduledValues(f.Ⲇ.currentTime);
                    }
                    clearInterval(c.ΔΔⵠⲆΔᐃᐃ);
                    c.ΔΔⵠⲆΔᐃᐃ = null;
                    b.ⲆⵠⵠⵠⲆ("fade", a);
                }
                return b;
            },
            loop: function () {
                var b;
                var c;
                var d;
                var f = this;
                var g = arguments;
                if (g.length === 0) {
                    return f.ΔΔⵠⲆᐃ;
                }
                if (g.length === 1) {
                    if (typeof g[0] != "boolean") {
                        return !!(d = f.ⵠᐃΔᐃⵠ(parseInt(g[0], 10))) && d.ΔΔⵠⲆᐃ;
                    }
                    b = g[0];
                    f.ΔΔⵠⲆᐃ = b;
                } else if (g.length === 2) {
                    b = g[0];
                    c = parseInt(g[1], 10);
                }
                for (var h = f.ⵠΔᐃⵠᐃ(c), a = 0; a < h.length; a++) {
                    if (d = f.ⵠᐃΔᐃⵠ(h[a])) {
                        d.ΔΔⵠⲆᐃ = b;
                        if (f.ΔⵠΔΔⵠ && d.ᐃΔΔᐃ && d.ᐃΔΔᐃ.ⲆΔΔⵠⲆ) {
                            d.ᐃΔΔᐃ.ⲆΔΔⵠⲆ.loop = b;
                            if (b) {
                                d.ᐃΔΔᐃ.ⲆΔΔⵠⲆ.loopStart = d.ᐃⵠᐃᐃⲆ || 0;
                                d.ᐃΔΔᐃ.ⲆΔΔⵠⲆ.loopEnd = d.ΔᐃⵠᐃⲆᐃᐃ;
                            }
                        }
                    }
                }
                return f;
            },
            rate: function () {
                var b;
                var c;
                var d;
                var g = this;
                var j = arguments;
                if (j.length === 0) {
                    c = g.ⵠᐃⲆⲆᐃ[0].ᐃΔⲆⲆ;
                } else if (j.length === 1) {
                    if (g.ⵠΔᐃⵠᐃ().indexOf(j[0]) >= 0) {
                        c = parseInt(j[0], 10);
                    } else {
                        b = parseFloat(j[0]);
                    }
                } else if (j.length === 2) {
                    b = parseFloat(j[0]);
                    c = parseInt(j[1], 10);
                }
                if (typeof b != "number") {
                    if (d = g.ⵠᐃΔᐃⵠ(c)) {
                        return d.ᐃΔⲆⵠⲆ;
                    } else {
                        return g.ᐃΔⲆⵠⲆ;
                    }
                }
                if (g.ΔⲆᐃⵠⲆ !== "loaded") {
                    g.ⲆΔΔⲆⲆ.push({
                        event: "rate",
                        action: function () {
                            g.rate.apply(g, j);
                        }
                    });
                    return g;
                }
                if (c === undefined) {
                    g.ᐃΔⲆⵠⲆ = b;
                }
                c = g.ⵠΔᐃⵠᐃ(c);
                for (var a = 0; a < c.length; a++) {
                    if (d = g.ⵠᐃΔᐃⵠ(c[a])) {
                        d.ΔⲆᐃᐃⲆΔⵠ = g.ⵠⲆᐃⲆⲆⲆⲆ(c[a]);
                        d.ⵠⲆⵠᐃⲆΔⵠ = g.ΔⵠΔΔⵠ ? f.Ⲇ.currentTime : d.ⵠⲆⵠᐃⲆΔⵠ;
                        d.ᐃΔⲆⵠⲆ = b;
                        if (g.ΔⵠΔΔⵠ && d.ᐃΔΔᐃ && d.ᐃΔΔᐃ.ⲆΔΔⵠⲆ) {
                            d.ᐃΔΔᐃ.ⲆΔΔⵠⲆ.playbackRate.value = b;
                        } else if (d.ᐃΔΔᐃ) {
                            d.ᐃΔΔᐃ.playbackRate = b;
                        }
                        var k = g.ⵠⲆᐃⲆⲆⲆⲆ(c[a]);
                        var l = ((g.ΔᐃΔⵠᐃ[d.ΔᐃΔⵠᐃ][0] + g.ΔᐃΔⵠᐃ[d.ΔᐃΔⵠᐃ][1]) / 1000 - k) * 1000 / Math.abs(d.ᐃΔⲆⵠⲆ);
                        if (!!g.ⵠᐃΔⲆⵠΔⵠ[c[a]] || !d.Ⲇᐃᐃᐃᐃ) {
                            g.ᐃᐃΔΔᐃᐃⵠ(c[a]);
                            g.ⵠᐃΔⲆⵠΔⵠ[c[a]] = setTimeout(g.ⲆⵠᐃⲆⲆ.bind(g, d), l);
                        }
                        g.ⲆⵠⵠⵠⲆ("rate", d.ᐃΔⲆⲆ);
                    }
                }
                return g;
            },
            ⵠⲆᐃⲆⲆⲆⲆ: function () {
                var b;
                var c;
                var d = this;
                var g = arguments;
                if (g.length === 0) {
                    c = d.ⵠᐃⲆⲆᐃ[0].ᐃΔⲆⲆ;
                } else if (g.length === 1) {
                    if (d.ⵠΔᐃⵠᐃ().indexOf(g[0]) >= 0) {
                        c = parseInt(g[0], 10);
                    } else {
                        c = d.ⵠᐃⲆⲆᐃ[0].ᐃΔⲆⲆ;
                        b = parseFloat(g[0]);
                    }
                } else if (g.length === 2) {
                    b = parseFloat(g[0]);
                    c = parseInt(g[1], 10);
                }
                if (c === undefined) {
                    return d;
                }
                if (d.ΔⲆᐃⵠⲆ !== "loaded") {
                    d.ⲆΔΔⲆⲆ.push({
                        event: "seek",
                        action: function () {
                            d.ⵠⲆᐃⲆⲆⲆⲆ.apply(d, g);
                        }
                    });
                    return d;
                }
                var j = d.ⵠᐃΔᐃⵠ(c);
                if (j) {
                    if (typeof b != "number" || b < 0) {
                        if (d.ΔⵠΔΔⵠ) {
                            var a = d.ΔⵠⲆᐃᐃΔⲆ(c) ? f.Ⲇ.currentTime - j.ⵠⲆⵠᐃⲆΔⵠ : 0;
                            var k = j.ΔⲆᐃᐃⲆΔⵠ ? j.ΔⲆᐃᐃⲆΔⵠ - j.ΔⲆⵠⲆᐃ : 0;
                            return j.ΔⲆⵠⲆᐃ + (k + a * Math.abs(j.ᐃΔⲆⵠⲆ));
                        }
                        return j.ᐃΔΔᐃ.currentTime;
                    }
                    var l = d.ΔⵠⲆᐃᐃΔⲆ(c);
                    if (l) {
                        d.pause(c, true);
                    }
                    j.ΔⲆⵠⲆᐃ = b;
                    j.ⲆⵠᐃⲆⲆ = false;
                    d.ᐃᐃΔΔᐃᐃⵠ(c);
                    if (l) {
                        d.play(c, true);
                    }
                    if (!d.ΔⵠΔΔⵠ && j.ᐃΔΔᐃ) {
                        j.ᐃΔΔᐃ.currentTime = b;
                    }
                    d.ⲆⵠⵠⵠⲆ("seek", c);
                }
                return d;
            },
            ΔⵠⲆᐃᐃΔⲆ: function (a) {
                var b = this;
                if (typeof a == "number") {
                    var c = b.ⵠᐃΔᐃⵠ(a);
                    return !!c && !c.Ⲇᐃᐃᐃᐃ;
                }
                for (var d = 0; d < b.ⵠᐃⲆⲆᐃ.length; d++) {
                    if (!b.ⵠᐃⲆⲆᐃ[d].Ⲇᐃᐃᐃᐃ) {
                        return true;
                    }
                }
                return false;
            },
            duration: function (a) {
                var b = this;
                var c = b.ΔⵠΔᐃᐃΔⵠ;
                var d = b.ⵠᐃΔᐃⵠ(a);
                if (d) {
                    c = b.ΔᐃΔⵠᐃ[d.ΔᐃΔⵠᐃ][1] / 1000;
                }
                return c;
            },
            state: function () {
                return this.ΔⲆᐃⵠⲆ;
            },
            ⲆΔᐃⲆⲆΔⲆ: function () {
                var a = this;
                for (var b = a.ⵠᐃⲆⲆᐃ, c = 0; c < b.length; c++) {
                    if (!b[c].Ⲇᐃᐃᐃᐃ) {
                        a.stop(b[c].ᐃΔⲆⲆ);
                    }
                    if (!a.ΔⵠΔΔⵠ) {
                        if (!/MSIE |Trident\//.test(f.ⲆⵠⲆᐃⲆ && f.ⲆⵠⲆᐃⲆ.userAgent)) {
                            b[c].ᐃΔΔᐃ.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA";
                        }
                        b[c].ᐃΔΔᐃ.removeEventListener("error", b[c].ⵠᐃᐃΔⲆⵠⲆ, false);
                        b[c].ᐃΔΔᐃ.removeEventListener(f.ⲆⵠᐃΔⲆΔᐃ, b[c].ΔᐃⵠⵠΔΔΔ, false);
                    }
                    delete b[c].ᐃΔΔᐃ;
                    a.ᐃᐃΔΔᐃᐃⵠ(b[c].ᐃΔⲆⲆ);
                    var d = f.ΔⲆⵠⵠⵠ.indexOf(a);
                    if (d >= 0) {
                        f.ΔⲆⵠⵠⵠ.splice(d, 1);
                    }
                }
                var g = true;
                for (c = 0; c < f.ΔⲆⵠⵠⵠ.length; c++) {
                    if (f.ΔⲆⵠⵠⵠ[c].ᐃⲆᐃΔᐃ === a.ᐃⲆᐃΔᐃ) {
                        g = false;
                        break;
                    }
                }
                if (j && g) {
                    delete j[a.ᐃⲆᐃΔᐃ];
                }
                f.ΔΔΔΔᐃⵠΔ = false;
                a.ΔⲆᐃⵠⲆ = "unloaded";
                a.ⵠᐃⲆⲆᐃ = [];
                a = null;
                return null;
            },
            on: function (a, b, c, d) {
                var e = this["_on" + a];
                if (typeof b == "function") {
                    e.push(d ? {
                        id: c,
                        ᐃΔΔᐃⲆ: b,
                        once: d
                    } : {
                        id: c,
                        ᐃΔΔᐃⲆ: b
                    });
                }
                return this;
            },
            ⵠᐃⵠΔᐃΔᐃⵠⵠ: function (b, c, d) {
                var e = this;
                var f = e["_on" + b];
                var g = 0;
                if (typeof c == "number") {
                    d = c;
                    c = null;
                }
                if (c || d) {
                    for (g = 0; g < f.length; g++) {
                        var h = d === f[g].id;
                        if (c === f[g].ᐃΔΔᐃⲆ && h || !c && h) {
                            f.splice(g, 1);
                            break;
                        }
                    }
                } else if (b) {
                    e["_on" + b] = [];
                } else {
                    var j = Object.keys(e);
                    for (g = 0; g < j.length; g++) {
                        if (j[g].indexOf("_on") === 0 && Array.isArray(e[j[g]])) {
                            e[j[g]] = [];
                        }
                    }
                }
                return e;
            },
            once: function (a, b, c) {
                this.on(a, b, c, 1);
                return this;
            },
            ⲆⵠⵠⵠⲆ: function (b, c, d) {
                var e = this;
                var f = e["_on" + b];
                for (var g = f.length - 1; g >= 0; g--) {
                    if (!f[g].id || f[g].id === c || b === "load") {
                        setTimeout(function (a) {
                            a.call(this, c, d);
                        }.bind(e, f[g].ᐃΔΔᐃⲆ), 0);
                        if (f[g].once) {
                            e.ⵠᐃⵠΔᐃΔᐃⵠⵠ(b, f[g].ᐃΔΔᐃⲆ, f[g].id);
                        }
                    }
                }
                return e;
            },
            ⵠⲆΔⲆᐃⲆⵠ: function () {
                var a = this;
                if (a.ⲆΔΔⲆⲆ.length > 0) {
                    var b = a.ⲆΔΔⲆⲆ[0];
                    a.once(b.event, function () {
                        a.ⲆΔΔⲆⲆ.shift();
                        a.ⵠⲆΔⲆᐃⲆⵠ();
                    });
                    b.action();
                }
                return a;
            },
            ⲆⵠᐃⲆⲆ: function (b) {
                var c = this;
                var d = b.ΔᐃΔⵠᐃ;
                if (!c.ΔⵠΔΔⵠ && c.ᐃΔΔᐃ && !c.ᐃΔΔᐃ.ended) {
                    setTimeout(c.ⲆⵠᐃⲆⲆ.bind(c, b), 100);
                    return c;
                }
                var e = !!b.ΔΔⵠⲆᐃ || !!c.ΔᐃΔⵠᐃ[d][2];
                c.ⲆⵠⵠⵠⲆ("end", b.ᐃΔⲆⲆ);
                if (!c.ΔⵠΔΔⵠ && e) {
                    c.stop(b.ᐃΔⲆⲆ, true).play(b.ᐃΔⲆⲆ);
                }
                if (c.ΔⵠΔΔⵠ && e) {
                    c.ⲆⵠⵠⵠⲆ("play", b.ᐃΔⲆⲆ);
                    b.ΔⲆⵠⲆᐃ = b.ᐃⵠᐃᐃⲆ || 0;
                    b.ΔⲆᐃᐃⲆΔⵠ = 0;
                    b.ⵠⲆⵠᐃⲆΔⵠ = f.Ⲇ.currentTime;
                    var g = (b.ΔᐃⵠᐃⲆᐃᐃ - b.ᐃⵠᐃᐃⲆ) * 1000 / Math.abs(b.ᐃΔⲆⵠⲆ);
                    c.ⵠᐃΔⲆⵠΔⵠ[b.ᐃΔⲆⲆ] = setTimeout(c.ⲆⵠᐃⲆⲆ.bind(c, b), g);
                }
                if (c.ΔⵠΔΔⵠ && !e) {
                    b.Ⲇᐃᐃᐃᐃ = true;
                    b.ⲆⵠᐃⲆⲆ = true;
                    b.ΔⲆⵠⲆᐃ = b.ᐃⵠᐃᐃⲆ || 0;
                    b.ΔⲆᐃᐃⲆΔⵠ = 0;
                    c.ᐃᐃΔΔᐃᐃⵠ(b.ᐃΔⲆⲆ);
                    c.ⵠⲆΔᐃΔⵠᐃ(b.ᐃΔΔᐃ);
                    f.ΔⵠⲆⲆΔᐃᐃ();
                }
                if (!c.ΔⵠΔΔⵠ && !e) {
                    c.stop(b.ᐃΔⲆⲆ);
                }
                return c;
            },
            ᐃᐃΔΔᐃᐃⵠ: function (a) {
                var b = this;
                if (b.ⵠᐃΔⲆⵠΔⵠ[a]) {
                    clearTimeout(b.ⵠᐃΔⲆⵠΔⵠ[a]);
                    delete b.ⵠᐃΔⲆⵠΔⵠ[a];
                }
                return b;
            },
            ⵠᐃΔᐃⵠ: function (a) {
                for (var b = this, c = 0; c < b.ⵠᐃⲆⲆᐃ.length; c++) {
                    if (a === b.ⵠᐃⲆⲆᐃ[c].ᐃΔⲆⲆ) {
                        return b.ⵠᐃⲆⲆᐃ[c];
                    }
                }
                return null;
            },
            ⵠⵠⲆⲆΔΔⵠᐃⵠ: function () {
                var a = this;
                a.ΔΔΔⲆⵠⵠⲆⲆⲆ();
                for (var b = 0; b < a.ⵠᐃⲆⲆᐃ.length; b++) {
                    if (a.ⵠᐃⲆⲆᐃ[b].ⲆⵠᐃⲆⲆ) {
                        return a.ⵠᐃⲆⲆᐃ[b].reset();
                    }
                }
                return new d(a);
            },
            ΔΔΔⲆⵠⵠⲆⲆⲆ: function () {
                var a = this;
                var b = a.ᐃⵠⵠⲆⵠᐃΔⲆⵠ;
                var c = 0;
                var d = 0;
                if (a.ⵠᐃⲆⲆᐃ.length >= b) {
                    for (d = 0; d < a.ⵠᐃⲆⲆᐃ.length; d++) {
                        if (a.ⵠᐃⲆⲆᐃ[d].ⲆⵠᐃⲆⲆ) {
                            c++;
                        }
                    }
                    for (d = a.ⵠᐃⲆⲆᐃ.length - 1; d >= 0; d--) {
                        if (c <= b) {
                            return;
                        }
                        if (a.ⵠᐃⲆⲆᐃ[d].ⲆⵠᐃⲆⲆ) {
                            if (a.ΔⵠΔΔⵠ && a.ⵠᐃⲆⲆᐃ[d].ᐃΔΔᐃ) {
                                a.ⵠᐃⲆⲆᐃ[d].ᐃΔΔᐃ.disconnect(0);
                            }
                            a.ⵠᐃⲆⲆᐃ.splice(d, 1);
                            c--;
                        }
                    }
                }
            },
            ⵠΔᐃⵠᐃ: function (a) {
                if (a === undefined) {
                    var b = [];
                    for (var c = 0; c < this.ⵠᐃⲆⲆᐃ.length; c++) {
                        b.push(this.ⵠᐃⲆⲆᐃ[c].ᐃΔⲆⲆ);
                    }
                    return b;
                }
                return [a];
            },
            ⵠΔᐃⵠᐃᐃⵠᐃᐃ: function (a) {
                a.ᐃΔΔᐃ.ⲆΔΔⵠⲆ = f.Ⲇ.createBufferSource();
                a.ᐃΔΔᐃ.ⲆΔΔⵠⲆ.buffer = j[this.ᐃⲆᐃΔᐃ];
                if (a.ⵠΔⵠΔⵠ) {
                    a.ᐃΔΔᐃ.ⲆΔΔⵠⲆ.connect(a.ⵠΔⵠΔⵠ);
                } else {
                    a.ᐃΔΔᐃ.ⲆΔΔⵠⲆ.connect(a.ᐃΔΔᐃ);
                }
                a.ᐃΔΔᐃ.ⲆΔΔⵠⲆ.loop = a.ΔΔⵠⲆᐃ;
                if (a.ΔΔⵠⲆᐃ) {
                    a.ᐃΔΔᐃ.ⲆΔΔⵠⲆ.loopStart = a.ᐃⵠᐃᐃⲆ || 0;
                    a.ᐃΔΔᐃ.ⲆΔΔⵠⲆ.loopEnd = a.ΔᐃⵠᐃⲆᐃᐃ;
                }
                a.ᐃΔΔᐃ.ⲆΔΔⵠⲆ.playbackRate.value = a.ᐃΔⲆⵠⲆ;
                return this;
            },
            ⵠⲆΔᐃΔⵠᐃ: function (a) {
                var b = this;
                if (b.ⵠΔⲆΔᐃᐃΔ) {
                    a.ⲆΔΔⵠⲆ.onended = null;
                    a.ⲆΔΔⵠⲆ.disconnect(0);
                    try {
                        a.ⲆΔΔⵠⲆ.buffer = b.ⵠΔⲆΔᐃᐃΔ;
                    } catch (a) { }
                }
                a.ⲆΔΔⵠⲆ = null;
                return b;
            }
        };
        function d(a) {
            this.ΔⵠⵠᐃΔΔΔ = a;
            this.ⵠΔⲆΔᐃ();
        }
        d.prototype = {
            ⵠΔⲆΔᐃ: function () {
                var a = this;
                var b = a.ΔⵠⵠᐃΔΔΔ;
                a.ⵠⵠΔᐃⲆ = b.ⵠⵠΔᐃⲆ;
                a.ΔΔⵠⲆᐃ = b.ΔΔⵠⲆᐃ;
                a.ⵠᐃⵠᐃⲆ = b.ⵠᐃⵠᐃⲆ;
                a.ᐃΔⲆⵠⲆ = b.ᐃΔⲆⵠⲆ;
                a.ΔⲆⵠⲆᐃ = 0;
                a.Ⲇᐃᐃᐃᐃ = true;
                a.ⲆⵠᐃⲆⲆ = true;
                a.ΔᐃΔⵠᐃ = "__default";
                a.ᐃΔⲆⲆ = ++f.ᐃⲆΔᐃⲆⵠΔ;
                b.ⵠᐃⲆⲆᐃ.push(a);
                a.create();
                return a;
            },
            create: function () {
                var a = this;
                var b = a.ΔⵠⵠᐃΔΔΔ;
                var c = f.ⵠⵠΔᐃⲆ || a.ⵠⵠΔᐃⲆ || a.ΔⵠⵠᐃΔΔΔ.ⵠⵠΔᐃⲆ ? 0 : a.ⵠᐃⵠᐃⲆ;
                if (b.ΔⵠΔΔⵠ) {
                    a.ᐃΔΔᐃ = f.Ⲇ.createGain === undefined ? f.Ⲇ.ⲆᐃΔᐃΔᐃⵠⲆᐃ() : f.Ⲇ.createGain();
                    a.ᐃΔΔᐃ.gain.setValueAtTime(c, f.Ⲇ.currentTime);
                    a.ᐃΔΔᐃ.paused = true;
                    a.ᐃΔΔᐃ.connect(f.ⵠᐃⵠΔΔᐃⲆ);
                } else {
                    a.ᐃΔΔᐃ = new Audio();
                    a.ⵠᐃᐃΔⲆⵠⲆ = a.ⵠⲆᐃᐃⲆⵠⲆⵠΔ.bind(a);
                    a.ᐃΔΔᐃ.addEventListener("error", a.ⵠᐃᐃΔⲆⵠⲆ, false);
                    a.ΔᐃⵠⵠΔΔΔ = a.ᐃⵠⲆⵠⲆⲆΔᐃⲆ.bind(a);
                    a.ᐃΔΔᐃ.addEventListener(f.ⲆⵠᐃΔⲆΔᐃ, a.ΔᐃⵠⵠΔΔΔ, false);
                    a.ᐃΔΔᐃ.src = b.ᐃⲆᐃΔᐃ;
                    a.ᐃΔΔᐃ.preload = "auto";
                    a.ᐃΔΔᐃ.volume = c * f.volume();
                    a.ᐃΔΔᐃ.load();
                }
                return a;
            },
            reset: function () {
                var a = this;
                var b = a.ΔⵠⵠᐃΔΔΔ;
                a.ⵠⵠΔᐃⲆ = b.ⵠⵠΔᐃⲆ;
                a.ΔΔⵠⲆᐃ = b.ΔΔⵠⲆᐃ;
                a.ⵠᐃⵠᐃⲆ = b.ⵠᐃⵠᐃⲆ;
                a.ᐃΔⲆⵠⲆ = b.ᐃΔⲆⵠⲆ;
                a.ΔⲆⵠⲆᐃ = 0;
                a.ΔⲆᐃᐃⲆΔⵠ = 0;
                a.Ⲇᐃᐃᐃᐃ = true;
                a.ⲆⵠᐃⲆⲆ = true;
                a.ΔᐃΔⵠᐃ = "__default";
                a.ᐃΔⲆⲆ = ++f.ᐃⲆΔᐃⲆⵠΔ;
                return a;
            },
            ⵠⲆᐃᐃⲆⵠⲆⵠΔ: function () {
                var a = this;
                a.ΔⵠⵠᐃΔΔΔ.ⲆⵠⵠⵠⲆ("loaderror", a.ᐃΔⲆⲆ, a.ᐃΔΔᐃ.error ? a.ᐃΔΔᐃ.error.code : 0);
                a.ᐃΔΔᐃ.removeEventListener("error", a.ⵠᐃᐃΔⲆⵠⲆ, false);
            },
            ᐃⵠⲆⵠⲆⲆΔᐃⲆ: function () {
                var a = this;
                var b = a.ΔⵠⵠᐃΔΔΔ;
                b.ΔⵠΔᐃᐃΔⵠ = Math.ceil(a.ᐃΔΔᐃ.duration * 10) / 10;
                if (Object.keys(b.ΔᐃΔⵠᐃ).length === 0) {
                    b.ΔᐃΔⵠᐃ = {
                        ΔⵠⵠⲆⲆΔᐃΔΔ: [0, b.ΔⵠΔᐃᐃΔⵠ * 1000]
                    };
                }
                if (b.ΔⲆᐃⵠⲆ !== "loaded") {
                    b.ΔⲆᐃⵠⲆ = "loaded";
                    b.ⲆⵠⵠⵠⲆ("load");
                    b.ⵠⲆΔⲆᐃⲆⵠ();
                }
                a.ᐃΔΔᐃ.removeEventListener(f.ⲆⵠᐃΔⲆΔᐃ, a.ΔᐃⵠⵠΔΔΔ, false);
            }
        };
        var j = {};
        function a(a) {
            var b = a.ᐃⲆᐃΔᐃ;
            if (j[b]) {
                a.ΔⵠΔᐃᐃΔⵠ = j[b].duration;
                h(a);
                return;
            }
            if (/^data:[^;]+;base64,/.test(b)) {
                for (var c = atob(b.split(",")[1]), d = new Uint8Array(c.length), e = 0; e < c.length; ++e) {
                    d[e] = c.charCodeAt(e);
                }
                m(d.buffer, a);
            } else {
                var f = new XMLHttpRequest();
                f.open("GET", b, true);
                f.responseType = "arraybuffer";
                f.onload = function () {
                    var b = (f.status + "")[0];
                    if (b === "0" || b === "2" || b === "3") {
                        m(f.response, a);
                    } else {
                        a.ⲆⵠⵠⵠⲆ("loaderror", null, "Failed loading audio file with status: " + f.status + ".");
                    }
                };
                f.onerror = function () {
                    if (a.ΔⵠΔΔⵠ) {
                        a.ⲆΔᐃⵠᐃᐃΔ = true;
                        a.ΔⵠΔΔⵠ = false;
                        a.ⵠᐃⲆⲆᐃ = [];
                        delete j[b];
                        a.load();
                    }
                };
                k(f);
            }
        }
        function k(a) {
            try {
                a.send();
            } catch (b) {
                a.onerror();
            }
        }
        function m(a, b) {
            f.Ⲇ.decodeAudioData(a, function (a) {
                if (a && b.ⵠᐃⲆⲆᐃ.length > 0) {
                    j[b.ᐃⲆᐃΔᐃ] = a;
                    h(b, a);
                }
            }, function () {
                b.ⲆⵠⵠⵠⲆ("loaderror", null, "Decoding audio data failed.");
            });
        }
        function h(a, b) {
            if (b && !a.ΔⵠΔᐃᐃΔⵠ) {
                a.ΔⵠΔᐃᐃΔⵠ = b.duration;
            }
            if (Object.keys(a.ΔᐃΔⵠᐃ).length === 0) {
                a.ΔᐃΔⵠᐃ = {
                    ΔⵠⵠⲆⲆΔᐃΔΔ: [0, a.ΔⵠΔᐃᐃΔⵠ * 1000]
                };
            }
            if (a.ΔⲆᐃⵠⲆ !== "loaded") {
                a.ΔⲆᐃⵠⲆ = "loaded";
                a.ⲆⵠⵠⵠⲆ("load");
                a.ⵠⲆΔⲆᐃⲆⵠ();
            }
        }
        function i() {
            try {
                if (typeof AudioContext != "undefined") {
                    f.Ⲇ = new AudioContext();
                } else if (typeof ΔⵠⵠⵠΔΔⵠᐃᐃ != "undefined") {
                    f.Ⲇ = new ΔⵠⵠⵠΔΔⵠᐃᐃ();
                } else {
                    f.ᐃᐃΔΔⲆ = false;
                }
            } catch (a) {
                f.ᐃᐃΔΔⲆ = false;
            }
            var a = /iP(hone|od|ad)/.test(f.ⲆⵠⲆᐃⲆ && f.ⲆⵠⲆᐃⲆ.platform);
            var b = f.ⲆⵠⲆᐃⲆ && f.ⲆⵠⲆᐃⲆ.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
            var c = b ? parseInt(b[1], 10) : null;
            if (a && c && c < 9) {
                var d = /safari/.test(f.ⲆⵠⲆᐃⲆ && f.ⲆⵠⲆᐃⲆ.userAgent.toLowerCase());
                if (f.ⲆⵠⲆᐃⲆ && f.ⲆⵠⲆᐃⲆ.ᐃⵠΔⲆⵠᐃⵠⵠᐃ && !d || f.ⲆⵠⲆᐃⲆ && !f.ⲆⵠⲆᐃⲆ.ᐃⵠΔⲆⵠᐃⵠⵠᐃ && !d) {
                    f.ᐃᐃΔΔⲆ = false;
                }
            }
            if (f.ᐃᐃΔΔⲆ) {
                f.ⵠᐃⵠΔΔᐃⲆ = f.Ⲇ.createGain === undefined ? f.Ⲇ.ⲆᐃΔᐃΔᐃⵠⲆᐃ() : f.Ⲇ.createGain();
                f.ⵠᐃⵠΔΔᐃⲆ.gain.value = f.ⵠⵠΔᐃⲆ ? 0 : 1;
                f.ⵠᐃⵠΔΔᐃⲆ.connect(f.Ⲇ.destination);
            }
            f.ⲆⲆⵠΔᐃⵠΔ();
        }
        if (typeof ᐃΔⵠᐃᐃΔⲆ == "function" && ᐃΔⵠᐃᐃΔⲆ.ⵠⵠΔⲆᐃⲆⲆ) {
            ᐃΔⵠᐃᐃΔⲆ([], function () {
                return {
                    Howler: f,
                    Howl: c
                };
            });
        }
        if (typeof ΔᐃⲆⵠⵠⲆΔ != "undefined") {
            ΔᐃⲆⵠⵠⲆΔ.Howler = f;
            ΔᐃⲆⵠⵠⲆΔ.Howl = c;
        }
        if (typeof aj != "undefined") {
            aj.ᐃⲆΔⲆᐃᐃⲆ = b;
            aj.Howler = f;
            aj.Howl = c;
            aj.ⲆⲆⲆⲆⲆⲆᐃ = d;
        } else if (typeof ⲆⵠⵠᐃⲆⲆⲆ != "undefined") {
            ⲆⵠⵠᐃⲆⲆⲆ.ᐃⲆΔⲆᐃᐃⲆ = b;
            ⲆⵠⵠᐃⲆⲆⲆ.Howler = f;
            ⲆⵠⵠᐃⲆⲆⲆ.Howl = c;
            ⲆⵠⵠᐃⲆⲆⲆ.ⲆⲆⲆⲆⲆⲆᐃ = d;
        }
    })();
    (function () {
        ᐃⲆΔⲆᐃᐃⲆ.prototype.ⵠⵠᐃᐃΔ = [0, 0, 0];
        ᐃⲆΔⲆᐃᐃⲆ.prototype.ⲆⲆᐃⵠⵠ = [0, 0, -1, 0, 1, 0];
        ᐃⲆΔⲆᐃᐃⲆ.prototype.Ⲇᐃᐃⵠᐃⵠⵠ = function (a) {
            var b = this;
            if (!b.Ⲇ || !b.Ⲇ.listener) {
                return b;
            }
            for (var c = b.ΔⲆⵠⵠⵠ.length - 1; c >= 0; c--) {
                b.ΔⲆⵠⵠⵠ[c].Ⲇᐃᐃⵠᐃⵠⵠ(a);
            }
            return b;
        };
        ᐃⲆΔⲆᐃᐃⲆ.prototype.ᐃⲆΔⲆ = function (a, b, c) {
            var d = this;
            if (d.Ⲇ && d.Ⲇ.listener) {
                b = typeof b != "number" ? d.ⵠⵠᐃᐃΔ[1] : b;
                c = typeof c != "number" ? d.ⵠⵠᐃᐃΔ[2] : c;
                if (typeof a != "number") {
                    return d.ⵠⵠᐃᐃΔ;
                } else {
                    d.ⵠⵠᐃᐃΔ = [a, b, c];
                    d.Ⲇ.listener.setPosition(d.ⵠⵠᐃᐃΔ[0], d.ⵠⵠᐃᐃΔ[1], d.ⵠⵠᐃᐃΔ[2]);
                    return d;
                }
            } else {
                return d;
            }
        };
        ᐃⲆΔⲆᐃᐃⲆ.prototype.orientation = function (b, c, d, e, f, g) {
            var h = this;
            if (!h.Ⲇ || !h.Ⲇ.listener) {
                return h;
            }
            var j = h.ⲆⲆᐃⵠⵠ;
            c = typeof c != "number" ? j[1] : c;
            d = typeof d != "number" ? j[2] : d;
            e = typeof e != "number" ? j[3] : e;
            f = typeof f != "number" ? j[4] : f;
            g = typeof g != "number" ? j[5] : g;
            if (typeof b != "number") {
                return j;
            } else {
                h.ⲆⲆᐃⵠⵠ = [b, c, d, e, f, g];
                h.Ⲇ.listener.setOrientation(b, c, d, e, f, g);
                return h;
            }
        };
        Howl.prototype.ⵠΔⲆΔᐃ = function (a) {
            return function (b) {
                var c = this;
                c.ⲆⲆᐃⵠⵠ = b.orientation || [1, 0, 0];
                c.ⲆⲆⵠⲆⲆΔⵠ = b.Ⲇᐃᐃⵠᐃⵠⵠ || null;
                c.ⵠⵠᐃᐃΔ = b.ᐃⲆΔⲆ || null;
                c.ᐃⵠᐃᐃⵠ = {
                    coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : 360,
                    coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : 360,
                    coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : 0,
                    distanceModel: b.distanceModel !== undefined ? b.distanceModel : "inverse",
                    maxDistance: b.maxDistance !== undefined ? b.maxDistance : 10000,
                    panningModel: b.panningModel !== undefined ? b.panningModel : "HRTF",
                    refDistance: b.refDistance !== undefined ? b.refDistance : 1,
                    rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : 1
                };
                c.ΔⵠⵠΔⵠΔᐃᐃⲆ = b.ⵠⵠⵠᐃᐃᐃⲆᐃⲆ ? [{
                    ᐃΔΔᐃⲆ: b.ⵠⵠⵠᐃᐃᐃⲆᐃⲆ
                }] : [];
                c.ⵠΔᐃⲆᐃⵠⲆⲆⲆ = b.ⲆᐃᐃΔⵠⵠⵠΔⲆ ? [{
                    ᐃΔΔᐃⲆ: b.ⲆᐃᐃΔⵠⵠⵠΔⲆ
                }] : [];
                c.ᐃⵠᐃᐃΔⲆᐃⵠⵠ = b.ⵠΔⵠΔⲆᐃⵠⲆⲆ ? [{
                    ᐃΔΔᐃⲆ: b.ⵠΔⵠΔⲆᐃⵠⲆⲆ
                }] : [];
                return a.call(this, b);
            };
        }(Howl.prototype.ⵠΔⲆΔᐃ);
        Howl.prototype.Ⲇᐃᐃⵠᐃⵠⵠ = function (c, d) {
            var e = this;
            if (!e.ΔⵠΔΔⵠ) {
                return e;
            }
            if (e.ΔⲆᐃⵠⲆ !== "loaded") {
                e.ⲆΔΔⲆⲆ.push({
                    event: "stereo",
                    action: function () {
                        e.Ⲇᐃᐃⵠᐃⵠⵠ(c, d);
                    }
                });
                return e;
            }
            var f = Howler.Ⲇ.createStereoPanner === undefined ? "spatial" : "stereo";
            if (d === undefined) {
                if (typeof c != "number") {
                    return e.ⲆⲆⵠⲆⲆΔⵠ;
                }
                e.ⲆⲆⵠⲆⲆΔⵠ = c;
                e.ⵠⵠᐃᐃΔ = [c, 0, 0];
            }
            for (var g = e.ⵠΔᐃⵠᐃ(d), a = 0; a < g.length; a++) {
                var h = e.ⵠᐃΔᐃⵠ(g[a]);
                if (h) {
                    if (typeof c != "number") {
                        return h.ⲆⲆⵠⲆⲆΔⵠ;
                    }
                    h.ⲆⲆⵠⲆⲆΔⵠ = c;
                    h.ⵠⵠᐃᐃΔ = [c, 0, 0];
                    if (h.ᐃΔΔᐃ) {
                        h.ᐃⵠᐃᐃⵠ.panningModel = "equalpower";
                        if (!h.ⵠΔⵠΔⵠ || !h.ⵠΔⵠΔⵠ.pan) {
                            b(h, f);
                        }
                        if (f === "spatial") {
                            h.ⵠΔⵠΔⵠ.setPosition(c, 0, 0);
                        } else {
                            h.ⵠΔⵠΔⵠ.pan.value = c;
                        }
                    }
                    e.ⲆⵠⵠⵠⲆ("stereo", h.ᐃΔⲆⲆ);
                }
            }
            return e;
        };
        Howl.prototype.ᐃⲆΔⲆ = function (c, d, e, f) {
            var g = this;
            if (!g.ΔⵠΔΔⵠ) {
                return g;
            }
            if (g.ΔⲆᐃⵠⲆ !== "loaded") {
                g.ⲆΔΔⲆⲆ.push({
                    event: "pos",
                    action: function () {
                        g.ᐃⲆΔⲆ(c, d, e, f);
                    }
                });
                return g;
            }
            d = typeof d != "number" ? 0 : d;
            e = typeof e != "number" ? -0.5 : e;
            if (f === undefined) {
                if (typeof c != "number") {
                    return g.ⵠⵠᐃᐃΔ;
                }
                g.ⵠⵠᐃᐃΔ = [c, d, e];
            }
            for (var a = g.ⵠΔᐃⵠᐃ(f), i = 0; i < a.length; i++) {
                var j = g.ⵠᐃΔᐃⵠ(a[i]);
                if (j) {
                    if (typeof c != "number") {
                        return j.ⵠⵠᐃᐃΔ;
                    }
                    j.ⵠⵠᐃᐃΔ = [c, d, e];
                    if (j.ᐃΔΔᐃ) {
                        if (!j.ⵠΔⵠΔⵠ || !!j.ⵠΔⵠΔⵠ.pan) {
                            b(j, "spatial");
                        }
                        j.ⵠΔⵠΔⵠ.setPosition(c, d, e);
                    }
                    g.ⲆⵠⵠⵠⲆ("pos", j.ᐃΔⲆⲆ);
                }
            }
            return g;
        };
        Howl.prototype.orientation = function (c, d, e, f) {
            var g = this;
            if (!g.ΔⵠΔΔⵠ) {
                return g;
            }
            if (g.ΔⲆᐃⵠⲆ !== "loaded") {
                g.ⲆΔΔⲆⲆ.push({
                    event: "orientation",
                    action: function () {
                        g.orientation(c, d, e, f);
                    }
                });
                return g;
            }
            d = typeof d != "number" ? g.ⲆⲆᐃⵠⵠ[1] : d;
            e = typeof e != "number" ? g.ⲆⲆᐃⵠⵠ[2] : e;
            if (f === undefined) {
                if (typeof c != "number") {
                    return g.ⲆⲆᐃⵠⵠ;
                }
                g.ⲆⲆᐃⵠⵠ = [c, d, e];
            }
            for (var a = g.ⵠΔᐃⵠᐃ(f), i = 0; i < a.length; i++) {
                var j = g.ⵠᐃΔᐃⵠ(a[i]);
                if (j) {
                    if (typeof c != "number") {
                        return j.ⲆⲆᐃⵠⵠ;
                    }
                    j.ⲆⲆᐃⵠⵠ = [c, d, e];
                    if (j.ᐃΔΔᐃ) {
                        if (!j.ⵠΔⵠΔⵠ) {
                            j.ⵠⵠᐃᐃΔ ||= g.ⵠⵠᐃᐃΔ || [0, 0, -0.5];
                            b(j, "spatial");
                        }
                        j.ⵠΔⵠΔⵠ.setOrientation(c, d, e);
                    }
                    g.ⲆⵠⵠⵠⲆ("orientation", j.ᐃΔⲆⲆ);
                }
            }
            return g;
        };
        Howl.prototype.ΔᐃΔⵠᐃⵠΔⵠΔ = function () {
            var c;
            var d;
            var e;
            var f = this;
            var g = arguments;
            if (!f.ΔⵠΔΔⵠ) {
                return f;
            }
            if (g.length === 0) {
                return f.ᐃⵠᐃᐃⵠ;
            }
            if (g.length === 1) {
                if (typeof g[0] != "object") {
                    if (e = f.ⵠᐃΔᐃⵠ(parseInt(g[0], 10))) {
                        return e.ᐃⵠᐃᐃⵠ;
                    } else {
                        return f.ᐃⵠᐃᐃⵠ;
                    }
                }
                c = g[0];
                if (d === undefined) {
                    f.ᐃⵠᐃᐃⵠ = {
                        coneInnerAngle: c.coneInnerAngle !== undefined ? c.coneInnerAngle : f.ΔⲆⵠⵠΔⲆᐃᐃᐃ,
                        coneOuterAngle: c.coneOuterAngle !== undefined ? c.coneOuterAngle : f.ᐃⲆⲆⵠᐃᐃⲆⵠᐃ,
                        coneOuterGain: c.coneOuterGain !== undefined ? c.coneOuterGain : f.ⵠᐃⵠΔΔΔΔⲆⲆ,
                        distanceModel: c.distanceModel !== undefined ? c.distanceModel : f.ᐃⵠᐃᐃⵠⲆⵠΔΔ,
                        maxDistance: c.maxDistance !== undefined ? c.maxDistance : f.ⲆⲆⵠⲆⵠᐃⲆᐃᐃ,
                        panningModel: c.panningModel !== undefined ? c.panningModel : f.ΔⵠᐃⵠⵠⲆⵠⵠⲆ,
                        refDistance: c.refDistance !== undefined ? c.refDistance : f.ⲆΔᐃⵠΔΔᐃᐃⵠ,
                        rolloffFactor: c.rolloffFactor !== undefined ? c.rolloffFactor : f.ⲆᐃΔΔΔᐃⵠⵠⲆ
                    };
                }
            } else if (g.length === 2) {
                c = g[0];
                d = parseInt(g[1], 10);
            }
            for (var a = f.ⵠΔᐃⵠᐃ(d), j = 0; j < a.length; j++) {
                if (e = f.ⵠᐃΔᐃⵠ(a[j])) {
                    var k = e.ᐃⵠᐃᐃⵠ;
                    k = {
                        coneInnerAngle: c.coneInnerAngle !== undefined ? c.coneInnerAngle : k.coneInnerAngle,
                        coneOuterAngle: c.coneOuterAngle !== undefined ? c.coneOuterAngle : k.coneOuterAngle,
                        coneOuterGain: c.coneOuterGain !== undefined ? c.coneOuterGain : k.coneOuterGain,
                        distanceModel: c.distanceModel !== undefined ? c.distanceModel : k.distanceModel,
                        maxDistance: c.maxDistance !== undefined ? c.maxDistance : k.maxDistance,
                        panningModel: c.panningModel !== undefined ? c.panningModel : k.panningModel,
                        refDistance: c.refDistance !== undefined ? c.refDistance : k.refDistance,
                        rolloffFactor: c.rolloffFactor !== undefined ? c.rolloffFactor : k.rolloffFactor
                    };
                    var m = e.ⵠΔⵠΔⵠ;
                    if (m) {
                        m.coneInnerAngle = k.coneInnerAngle;
                        m.coneOuterAngle = k.coneOuterAngle;
                        m.coneOuterGain = k.coneOuterGain;
                        m.distanceModel = k.distanceModel;
                        m.maxDistance = k.maxDistance;
                        m.panningModel = k.panningModel;
                        m.refDistance = k.refDistance;
                        m.rolloffFactor = k.rolloffFactor;
                    } else {
                        e.ⵠⵠᐃᐃΔ ||= f.ⵠⵠᐃᐃΔ || [0, 0, -0.5];
                        b(e, "spatial");
                    }
                }
            }
            return f;
        };
        ⲆⲆⲆⲆⲆⲆᐃ.prototype.ⵠΔⲆΔᐃ = function (a) {
            return function () {
                var b = this;
                var c = b.ΔⵠⵠᐃΔΔΔ;
                b.ⲆⲆᐃⵠⵠ = c.ⲆⲆᐃⵠⵠ;
                b.ⲆⲆⵠⲆⲆΔⵠ = c.ⲆⲆⵠⲆⲆΔⵠ;
                b.ⵠⵠᐃᐃΔ = c.ⵠⵠᐃᐃΔ;
                b.ᐃⵠᐃᐃⵠ = c.ᐃⵠᐃᐃⵠ;
                a.call(this);
                if (b.ⲆⲆⵠⲆⲆΔⵠ) {
                    c.Ⲇᐃᐃⵠᐃⵠⵠ(b.ⲆⲆⵠⲆⲆΔⵠ);
                } else if (b.ⵠⵠᐃᐃΔ) {
                    c.ᐃⲆΔⲆ(b.ⵠⵠᐃᐃΔ[0], b.ⵠⵠᐃᐃΔ[1], b.ⵠⵠᐃᐃΔ[2], b.ᐃΔⲆⲆ);
                }
            };
        }(ⲆⲆⲆⲆⲆⲆᐃ.prototype.ⵠΔⲆΔᐃ);
        ⲆⲆⲆⲆⲆⲆᐃ.prototype.reset = function (a) {
            return function () {
                var b = this;
                var c = b.ΔⵠⵠᐃΔΔΔ;
                b.ⲆⲆᐃⵠⵠ = c.ⲆⲆᐃⵠⵠ;
                b.ⵠⵠᐃᐃΔ = c.ⵠⵠᐃᐃΔ;
                b.ᐃⵠᐃᐃⵠ = c.ᐃⵠᐃᐃⵠ;
                return a.call(this);
            };
        }(ⲆⲆⲆⲆⲆⲆᐃ.prototype.reset);
        function b(a, b) {
            b = b || "spatial";
            if (b === "spatial") {
                a.ⵠΔⵠΔⵠ = Howler.Ⲇ.createPanner();
                a.ⵠΔⵠΔⵠ.coneInnerAngle = a.ᐃⵠᐃᐃⵠ.coneInnerAngle;
                a.ⵠΔⵠΔⵠ.coneOuterAngle = a.ᐃⵠᐃᐃⵠ.coneOuterAngle;
                a.ⵠΔⵠΔⵠ.coneOuterGain = a.ᐃⵠᐃᐃⵠ.coneOuterGain;
                a.ⵠΔⵠΔⵠ.distanceModel = a.ᐃⵠᐃᐃⵠ.distanceModel;
                a.ⵠΔⵠΔⵠ.maxDistance = a.ᐃⵠᐃᐃⵠ.maxDistance;
                a.ⵠΔⵠΔⵠ.panningModel = a.ᐃⵠᐃᐃⵠ.panningModel;
                a.ⵠΔⵠΔⵠ.refDistance = a.ᐃⵠᐃᐃⵠ.refDistance;
                a.ⵠΔⵠΔⵠ.rolloffFactor = a.ᐃⵠᐃᐃⵠ.rolloffFactor;
                a.ⵠΔⵠΔⵠ.setPosition(a.ⵠⵠᐃᐃΔ[0], a.ⵠⵠᐃᐃΔ[1], a.ⵠⵠᐃᐃΔ[2]);
                a.ⵠΔⵠΔⵠ.setOrientation(a.ⲆⲆᐃⵠⵠ[0], a.ⲆⲆᐃⵠⵠ[1], a.ⲆⲆᐃⵠⵠ[2]);
            } else {
                a.ⵠΔⵠΔⵠ = Howler.Ⲇ.createStereoPanner();
                a.ⵠΔⵠΔⵠ.pan.value = a.ⲆⲆⵠⲆⲆΔⵠ;
            }
            a.ⵠΔⵠΔⵠ.connect(a.ᐃΔΔᐃ);
            if (!a.Ⲇᐃᐃᐃᐃ) {
                a.ΔⵠⵠᐃΔΔΔ.pause(a.ᐃΔⲆⲆ, true).play(a.ᐃΔⲆⲆ);
            }
        }
    })();
    var ef = 1;
    var tf = 1;
    var nf = {
        ⵠⲆⲆⲆⲆ: 3,
        ΔⵠΔⵠᐃ: 8,
        ΔⵠⵠΔⲆⲆⵠ: 3000,
        ᐃᐃᐃΔⵠⵠⵠ: 460000,
        ᐃⵠⲆⲆΔᐃᐃΔⲆ: 5000,
        ⵠⵠⲆⵠⲆⵠⵠⵠⲆ: 5000,
        ᐃΔⲆᐃΔ: 2,
        ⲆⵠΔΔⵠΔΔ: 12,
        ⲆΔΔⵠᐃ: 1,
        ΔⲆᐃⲆⲆⵠΔᐃⲆ: 5000,
        ᐃⲆᐃⲆᐃⵠⵠⵠᐃ: 12,
        ΔⵠⲆ: 6,
        ᐃⵠⵠᐃⵠΔⲆᐃⵠ: 12
    };
    var of = [];
    of[-1] = 1;
    of[28] = 1;
    of[49] = 1;
    of[Lr.ⲆⵠⲆⲆⵠᐃⲆΔⲆ] = 2;
    of[8] = 2;
    of[1] = 2;
    of[3] = 2;
    of[4] = 2;
    of[31] = 2;
    of[32] = 2;
    of[9] = 2;
    of[57] = 2;
    of[0] = 2;
    of[63] = 2;
    of[17] = 2;
    of[5] = 2;
    of[6] = 2;
    of[30] = 2;
    of[Lr.ΔⵠⵠⵠⲆⵠᐃᐃᐃ] = 2;
    of[18] = 2;
    of[12] = 2;
    of[13] = 2;
    of[14] = 2;
    of[15] = 2;
    of[16] = 2;
    of[33] = 2;
    of[Lr.ᐃᐃΔΔᐃΔⲆⲆΔ] = 2;
    of[35] = 2;
    of[36] = 2;
    of[37] = 2;
    of[38] = 2;
    of[39] = 2;
    of[45] = 2;
    of[62] = 2;
    of[54] = 2;
    of[53] = 2;
    of[46] = 3;
    of[50] = 3;
    of[51] = 3;
    of[52] = 3;
    ΔΔⵠⵠ = [];
    ΔΔⵠⵠ[0] = 0;
    ΔΔⵠⵠ[1] = 1;
    ΔΔⵠⵠ[2] = 1;
    ΔΔⵠⵠ[3] = 1;
    ΔΔⵠⵠ[4] = 0;
    ΔΔⵠⵠ[5] = 0;
    ΔΔⵠⵠ[6] = 0;
    ΔΔⵠⵠ[7] = 0;
    ΔΔⵠⵠ[8] = 0;
    ΔΔⵠⵠ[9] = 0;
    ΔΔⵠⵠ[10] = 1;
    ΔΔⵠⵠ[11] = 1;
    ΔΔⵠⵠ[12] = 1;
    ΔΔⵠⵠ[13] = 1;
    ΔΔⵠⵠ[14] = 1;
    ΔΔⵠⵠ[15] = 1;
    ΔΔⵠⵠ[16] = 0;
    ΔΔⵠⵠ[17] = 0;
    ΔΔⵠⵠ[18] = 0;
    ΔΔⵠⵠ[19] = 0;
    ΔΔⵠⵠ[20] = 0;
    ΔΔⵠⵠ[21] = 0;
    ΔΔⵠⵠ[22] = 0;
    ΔΔⵠⵠ[23] = 1;
    ΔΔⵠⵠ[24] = 1;
    ΔΔⵠⵠ[25] = 1;
    ΔΔⵠⵠ[26] = 1;
    ΔΔⵠⵠ[27] = 1;
    ΔΔⵠⵠ[28] = 1;
    ΔΔⵠⵠ[29] = 1;
    ΔΔⵠⵠ[30] = 1;
    ΔΔⵠⵠ[31] = 1;
    ΔΔⵠⵠ[32] = 1;
    ΔΔⵠⵠ[33] = 1;
    ΔΔⵠⵠ[34] = 1;
    ΔΔⵠⵠ[35] = 1;
    ΔΔⵠⵠ[36] = 1;
    ΔΔⵠⵠ[37] = 1;
    ΔΔⵠⵠ[38] = 1;
    ΔΔⵠⵠ[40] = 0;
    ΔΔⵠⵠ[41] = 0;
    ΔΔⵠⵠ[42] = 0;
    ΔΔⵠⵠ[50] = 1;
    ΔΔⵠⵠ[51] = 1;
    ΔΔⵠⵠ[52] = 1;
    ΔΔⵠⵠ[55] = 0;
    ΔΔⵠⵠ[56] = 0;
    ΔΔⵠⵠ[57] = 0;
    ΔΔⵠⵠ[58] = 0;
    ΔⲆᐃⲆⲆ = [];
    ΔⲆᐃⲆⲆ[pw.ⵠⵠΔⲆⵠ] = 0;
    ΔⲆᐃⲆⲆ[1] = 0;
    ΔⲆᐃⲆⲆ[29] = 0;
    ΔⲆᐃⲆⲆ[6] = 0;
    ΔⲆᐃⲆⲆ[3] = -1;
    ΔⲆᐃⲆⲆ[31] = -1;
    ΔⲆᐃⲆⲆ[2] = 0;
    ΔⲆᐃⲆⲆ[4] = 0;
    ΔⲆᐃⲆⲆ[30] = 0;
    ΔⲆᐃⲆⲆ[33] = 0;
    ΔⲆᐃⲆⲆ[32] = 1;
    ΔⲆᐃⲆⲆ[35] = 1;
    ΔⲆᐃⲆⲆ[7] = 1;
    ΔⲆᐃⲆⲆ[8] = 1;
    ΔⲆᐃⲆⲆ[9] = 1;
    ΔⲆᐃⲆⲆ[19] = 1;
    ΔⲆᐃⲆⲆ[50] = 1;
    ΔⲆᐃⲆⲆ[5] = 0;
    ΔⲆᐃⲆⲆ[12] = 1;
    ΔⲆᐃⲆⲆ[13] = 1;
    ΔⲆᐃⲆⲆ[14] = 1;
    ΔⲆᐃⲆⲆ[20] = 1;
    ΔⲆᐃⲆⲆ[52] = 1;
    ΔⲆᐃⲆⲆ[10] = 0;
    ΔⲆᐃⲆⲆ[15] = 1;
    ΔⲆᐃⲆⲆ[16] = 1;
    ΔⲆᐃⲆⲆ[17] = 1;
    ΔⲆᐃⲆⲆ[21] = 1;
    ΔⲆᐃⲆⲆ[51] = 1;
    ΔⲆᐃⲆⲆ[45] = 0;
    ΔⲆᐃⲆⲆ[46] = 1;
    ΔⲆᐃⲆⲆ[47] = 1;
    ΔⲆᐃⲆⲆ[48] = 1;
    ΔⲆᐃⲆⲆ[49] = 1;
    ΔⲆᐃⲆⲆ[53] = 1;
    ΔⲆᐃⲆⲆ[18] = 1;
    ΔⲆᐃⲆⲆ[22] = 1;
    ΔⲆᐃⲆⲆ[23] = 1;
    ΔⲆᐃⲆⲆ[11] = 0;
    ΔⲆᐃⲆⲆ[34] = 1;
    var af = {
        ᐃΔⲆΔᐃΔΔ: {
            ᐃⲆⵠⲆΔ: null,
            path: ["audio/ambience.mp3"],
            ΔⲆ: {
                d2: [90684, 300, false],
                d0: [90086, 300, Ia],
                d1: [90391, 300, Es]
            },
            sample: {
                d0: 8,
                d1: 8,
                d2: 8
            }
        },
        ⲆΔⵠΔⲆⵠⲆ: {
            ᐃⲆⵠⲆΔ: null,
            path: ["audio/ambience.mp3"],
            ΔⲆ: {
                p2: [89815, 300, Ig],
                p0: [89303, 300, false],
                p1: [89549, 300, false]
            },
            sample: {
                p0: 8,
                p1: 8,
                p2: 8
            }
        },
        ⲆⵠⲆⵠⲆᐃⲆ: {
            ᐃⲆⵠⲆΔ: null,
            path: ["audio/ambience.mp3"],
            ΔⲆ: {
                w0: [88195, 300, Ij],
                w1: [88473, 300, false],
                w3: [89025, 300, false],
                w2: [88751, 300, Es]
            },
            sample: {
                w0: 8,
                w1: 8,
                w2: 8,
                w3: 8
            }
        },
        ΔΔⵠⵠⵠⵠᐃ: {
            ᐃⲆⵠⲆΔ: null,
            path: ["audio/ambience.mp3"],
            ΔⲆ: {
                ᐃⵠᐃᐃⵠⲆⲆ: [66961, 21223, Po],
                ΔΔⲆⲆⵠⲆⵠ: [30562, 655, true],
                ⵠᐃᐃⲆⵠΔΔᐃᐃ: [100, 2800, true],
                ⵠⲆΔᐃⵠΔⲆ: [3100, 8800, true],
                ᐃⲆᐃⵠΔⲆⲆ: [54524, 11393, true],
                ⲆⲆⵠⵠⲆ: [28380, 1797, Po],
                ΔΔᐃᐃⵠⲆΔ: [66961, 21223, true],
                ᐃΔⵠⵠᐃ: [91431, 400, as],
                ⲆⲆⵠⲆⵠⵠⲆ: [66014, 925, true],
                ᐃᐃᐃⵠⵠᐃᐃ: [91022, 400, false],
                ⵠⲆⵠⲆΔⵠⵠ: [19882, 8301, jo],
                ΔⵠᐃᐃⲆΔΔ: [32604, 21890, ul],
                ⲆΔᐃΔᐃ: [12356, 6965, true],
                ⲆⲆⵠΔⵠᐃⲆ: [92249, 500, og],
                ⲆⵠⲆΔⵠⵠⲆ: [31658, 813, ss]
            },
            sample: {
                ⵠᐃᐃⲆⵠΔΔᐃᐃ: 1,
                ⵠⲆΔᐃⵠΔⲆ: 1,
                ⵠⲆⵠⲆΔⵠⵠ: 1,
                ΔⵠᐃᐃⲆΔΔ: 1,
                ᐃⲆᐃⵠΔⲆⲆ: 1,
                ΔΔᐃᐃⵠⲆΔ: 1,
                ᐃⵠᐃᐃⵠⲆⲆ: 1,
                ⲆΔᐃΔᐃ: 8,
                ⲆⲆⵠⵠⲆ: 8,
                ΔΔⲆⲆⵠⲆⵠ: 8,
                ⲆⵠⲆΔⵠⵠⲆ: 8,
                ⲆⲆⵠⲆⵠⵠⲆ: 8,
                ᐃᐃᐃⵠⵠᐃᐃ: 6,
                ᐃΔⵠⵠᐃ: 6,
                ⲆⲆⵠΔⵠᐃⲆ: 6
            }
        }
    };
    function rf(b, c, d, e, f, g) {
        bk(pr, b, c, d, e, f, g);
        const a = Iw(rr[0], rr[1], rr[2], rr[3]);
        Iw(rr[4], rr[5], rr[0], rr[1]);
        return a ^ 50389;
    }
    function sf(b, c, d, e, f, i, a, j, k, h, l) {
        this.r = 1;
        this.ᐃⵠⵠⵠⲆ = b;
        this.ⲆΔᐃⲆΔⲆᐃ = b;
        this.ⲆΔⲆ = c;
        this.ᐃΔᐃ = d;
        this.fade = e;
        this.ⲆᐃⵠΔⲆΔᐃ = f;
        this.ᐃΔᐃΔΔⲆΔ = i;
        this.ⵠΔⵠΔ = a;
        this.ⲆⲆᐃⵠⲆⲆⲆ = j;
        this.source = k;
        this.source.ᐃΔΔᐃΔᐃᐃ = k.x + k.w;
        this.source.ⲆᐃⵠⲆΔ = k.y + k.ⵠⲆᐃ;
        this.ⲆᐃᐃΔΔⵠⵠΔΔ = h;
        this.ⵠⲆᐃⲆⵠⵠΔ = l;
        this.ΔᐃⵠᐃΔⵠΔ = 0;
        this.ΔΔΔⵠⲆⲆᐃ = {
            ⵠⲆⵠⲆ: 5,
            d: 5
        };
        this.ΔΔΔᐃⵠ = function () {
            this.ᐃⵠⵠⵠⲆ -= $w;
            if (this.ᐃⵠⵠⵠⲆ < 0) {
                this.ᐃⵠⵠⵠⲆ = this.ⲆΔᐃⲆΔⲆᐃ;
                var a = af.ΔΔⵠⵠⵠⵠᐃ.ᐃⲆⵠⲆΔ.playing(this.ⲆΔⲆ);
                var b = af.ΔΔⵠⵠⵠⵠᐃ.ᐃⲆⵠⲆΔ.playing(this.ᐃΔᐃ);
                if (a && !b) {
                    var c = this.ⵠΔⵠΔ.volume(this.ⲆΔⲆ) * tf;
                    var d = tf * (Math.random() * this.ᐃΔᐃΔΔⲆΔ + this.ⲆᐃⵠΔⲆΔᐃ);
                    this.ⵠΔⵠΔ.fade(c, d, this.fade, this.ⲆΔⲆ);
                } else if (!a && b) {
                    c = this.ⵠΔⵠΔ.volume(this.ᐃΔᐃ) * tf;
                    d = tf * (this.ᐃΔᐃΔΔⲆΔ * Math.random() + this.ⲆᐃⵠΔⲆΔᐃ);
                    this.ⵠΔⵠΔ.fade(c, d, this.fade, this.ᐃΔᐃ);
                }
            }
        };
        this.transition = function () {
            this.ᐃⵠⵠⵠⲆ = this.ⲆΔᐃⲆΔⲆᐃ;
            this.ΔΔΔⵠⲆⲆᐃ.d = this.ΔΔΔⵠⲆⲆᐃ.ⵠⲆⵠⲆ;
            if (cf.time) {
                this.ⵠΔⵠΔ.fade(0, this.ⲆᐃⵠΔⲆΔᐃ * tf, this.ⲆⲆᐃⵠⲆⲆⲆ, this.ⲆΔⲆ);
                this.ⵠΔⵠΔ.play(this.ⲆΔⲆ);
                if (this.ⵠΔⵠΔ.playing(this.ᐃΔᐃ)) {
                    var a = tf * this.ⵠΔⵠΔ.volume(this.ᐃΔᐃ);
                    this.ⵠΔⵠΔ.fade(a, 0, this.ⲆⲆᐃⵠⲆⲆⲆ, this.ᐃΔᐃ);
                }
            } else {
                this.ⵠΔⵠΔ.fade(0, tf * this.ⲆᐃⵠΔⲆΔᐃ, this.ⲆⲆᐃⵠⲆⲆⲆ, this.ᐃΔᐃ);
                this.ⵠΔⵠΔ.play(this.ᐃΔᐃ);
                if (this.ⵠΔⵠΔ.playing(this.ⲆΔⲆ)) {
                    a = this.ⵠΔⵠΔ.volume(this.ⲆΔⲆ) * tf;
                    this.ⵠΔⵠΔ.fade(a, 0, this.ⲆⲆᐃⵠⲆⲆⲆ, this.ⲆΔⲆ);
                }
            }
        };
        this.check = function (a) {
            if (this.ΔᐃⵠᐃΔⵠΔ) {
                if (ⲆⵠΔᐃ.ⵠⲆᐃⲆⵠⵠΔ(a, this.ⲆᐃᐃΔΔⵠⵠΔΔ)) {
                    if (!Zw.transition && cf.ⵠΔΔⲆᐃ.now < 460000) {
                        if (cf.time) {
                            if (!this.ⵠΔⵠΔ.playing(this.ⲆΔⲆ)) {
                                this.ΔΔΔⵠⲆⲆᐃ.d -= $w;
                                if (this.ΔΔΔⵠⲆⲆᐃ.d < 0) {
                                    this.transition();
                                }
                            }
                        } else if (!this.ⵠΔⵠΔ.playing(this.ᐃΔᐃ)) {
                            this.ΔΔΔⵠⲆⲆᐃ.d -= $w;
                            if (this.ΔΔΔⵠⲆⲆᐃ.d < 0) {
                                this.transition();
                            }
                        }
                    }
                } else {
                    this.ΔᐃⵠᐃΔⵠΔ = 0;
                    if (this.ⵠΔⵠΔ.playing(this.ⲆΔⲆ)) {
                        var b = this.ⵠΔⵠΔ.volume(this.ⲆΔⲆ) * tf;
                        this.ⵠΔⵠΔ.fade(b, 0, this.ⲆⲆᐃⵠⲆⲆⲆ, this.ⲆΔⲆ);
                    }
                    if (this.ⵠΔⵠΔ.playing(this.ᐃΔᐃ)) {
                        b = tf * this.ⵠΔⵠΔ.volume(this.ᐃΔᐃ);
                        this.ⵠΔⵠΔ.fade(b, 0, this.ⲆⲆᐃⵠⲆⲆⲆ, this.ᐃΔᐃ);
                    }
                }
            } else if (ⲆⵠΔᐃ.ⵠⲆᐃⲆⵠⵠΔ(a, this.ⵠⲆᐃⲆⵠⵠΔ)) {
                this.ΔᐃⵠᐃΔⵠΔ = 1;
                if (!Zw.transition && cf.ⵠΔΔⲆᐃ.now < 460000) {
                    this.transition();
                }
            }
        };
        this.ΔΔΔ = function (a, b) {
            var c;
            var d;
            c = this.source.x > a.x ? Zw.ⲆⲆⵠΔΔⲆⲆ(this.source.x) : this.source.ᐃΔΔᐃΔᐃᐃ < a.x ? Zw.ⲆⲆⵠΔΔⲆⲆ(this.source.ᐃΔΔᐃΔᐃᐃ) : b.x;
            d = a.y < this.source.y ? Zw.ΔⲆⵠᐃᐃⵠⲆ(this.source.y) : this.source.ⲆᐃⵠⲆΔ < a.y ? Zw.ΔⲆⵠᐃᐃⵠⲆ(this.source.ⲆᐃⵠⲆΔ) : b.y;
            this.ⵠΔⵠΔ.pos(c, d, -0.5, this.ⲆΔⲆ);
            this.ⵠΔⵠΔ.pos(c, d, -0.5, this.ᐃΔᐃ);
        };
    }
    ΔΔⲆⲆᐃ = {
        ΔⵠᐃᐃᐃᐃᐃᐃⲆ: 0.2,
        ΔᐃΔⲆΔⵠᐃ: 4,
        ⲆᐃⲆⵠᐃΔⵠⵠΔ: 0.4,
        ΔΔΔⵠΔᐃⲆ: 100,
        ᐃⲆⲆⲆⵠⲆᐃ: 300,
        ᐃⲆΔⵠΔⵠΔ: 100,
        ΔᐃΔᐃⵠᐃⲆ: 0,
        ⲆⵠᐃᐃᐃᐃⲆ: 3,
        ΔⵠⵠⲆᐃⲆⵠ: 2,
        ⵠⵠᐃᐃⲆⲆᐃΔΔ: 0.2,
        ⲆⲆⵠᐃᐃ: 2,
        ᐃⲆⲆⵠΔᐃΔⵠΔ: 0.2,
        Ⲇᐃⵠᐃⵠᐃᐃ: 100,
        ΔⵠⲆΔⲆⵠⵠ: 1
    };
    function hf(a, b, c) {
        this.ΔⲆⲆⵠⲆΔⲆ = a;
        this.c = 0;
        this.ⵠΔⵠΔ = b;
        this.ΔᐃⵠΔᐃ = c;
        this.max = c.length;
        this.play = function () {
            this.c = (this.c + 1) % this.max;
            var a = this.ΔᐃⵠΔᐃ[this.c];
            this.ΔⲆⲆⵠⲆΔⲆ.ΔΔᐃᐃᐃⲆⵠ(this.ⵠΔⵠΔ, a);
            this.ⵠΔⵠΔ.play(a);
        };
    }
    function lf(a) {
        this.ΔᐃΔⵠⲆΔⵠ = 1;
        this.ⲆⵠᐃⲆ = 0;
        this.mode = -1;
        this.ⲆⲆⵠⵠⲆ = Zw.sample.ⲆⲆⵠⵠⲆ[a];
        this.ΔΔⲆⲆⵠⲆⵠ = Zw.sample.ΔΔⲆⲆⵠⲆⵠ[a];
        this.ⲆⵠⲆΔⵠⵠⲆ = Zw.sample.ⲆⵠⲆΔⵠⵠⲆ[a];
        this.ⲆⲆⵠⲆⵠⵠⲆ = Zw.sample.ⲆⲆⵠⲆⵠⵠⲆ[a];
        this.ⲆΔⵠᐃΔⲆΔ = new hf(this, af.ⲆΔⵠΔⲆⵠⲆ.ᐃⲆⵠⲆΔ, Zw.ΔᐃⲆᐃⲆ.ⲆΔⵠᐃΔⲆΔ[a]);
        this.ᐃⵠΔΔᐃ = new hf(this, af.ⲆⵠⲆⵠⲆᐃⲆ.ᐃⲆⵠⲆΔ, Zw.ΔᐃⲆᐃⲆ.ᐃⵠΔΔᐃ[a]);
        this.ⲆⲆᐃⲆΔ = new hf(this, af.ᐃΔⲆΔᐃΔΔ.ᐃⲆⵠⲆΔ, Zw.ΔᐃⲆᐃⲆ.ⲆⲆᐃⲆΔ[a]);
        this.ᐃⵠⲆᐃΔ = a;
        this.x = 0;
        this.y = 0;
        this.ΔΔᐃⵠⵠ = 0;
        this.ᐃⵠⵠⵠⲆ = ΔΔⲆⲆᐃ.ΔᐃⵠⲆⲆᐃⲆᐃᐃ;
        this.ᐃⲆΔⲆ = {
            y: 0,
            x: 0
        };
        this.ΔⲆᐃΔⵠ = af.ΔΔⵠⵠⵠⵠᐃ.ᐃⲆⵠⲆΔ;
        this.ᐃⲆⵠᐃΔⲆⵠⲆⲆ = function (a) {
            if (a === 1) {
                this.ⲆΔⵠᐃΔⲆΔ.play();
            } else if (a === 2) {
                this.ᐃⵠΔΔᐃ.play();
            } else if (a === 3) {
                this.ⲆⲆᐃⲆΔ.play();
            }
        };
        this.ⲆΔⵠΔΔᐃⵠ = function (a) {
            if (a.ᐃΔΔⲆⵠΔⵠ > 0) {
                return ΔΔⲆⲆᐃ.ⲆⲆⵠᐃᐃ;
            } else if (a.ⲆⲆⲆⲆΔⲆΔ > 0) {
                return ΔΔⲆⲆᐃ.ΔⵠⲆΔⲆⵠⵠ;
            } else if (a.ᐃΔΔΔⲆ > 0 || a.ᐃⵠⵠⲆⲆ > 0) {
                return ΔΔⲆⲆᐃ.ⲆⵠᐃᐃᐃᐃⲆ;
            } else {
                return ΔΔⲆⲆᐃ.ΔᐃΔᐃⵠᐃⲆ;
            }
        };
        this.ⵠΔⲆΔᐃ = function (a) {
            this.ΔᐃΔⵠⲆΔⵠ = 0;
            this.ⲆⵠᐃⲆ = a;
            var b = cf.ᐃⲆᐃⵠⵠ[a];
            b.ᐃⵠⲆᐃΔ = this.ᐃⵠⲆᐃΔ;
            this.mode = this.ⲆΔⵠΔΔᐃⵠ(b);
            this.ᐃⲆΔⲆ.x = b.x;
            this.ᐃⲆΔⲆ.y = b.y;
        };
        this.ⲆᐃᐃⲆⲆΔⵠ = function () {
            this.ΔᐃΔⵠⲆΔⵠ = 1;
            this.mode = -1;
            this.ΔⲆᐃΔⵠ.stop(this.ⲆⲆⵠⵠⲆ);
            this.ΔⲆᐃΔⵠ.stop(this.ΔΔⲆⲆⵠⲆⵠ);
            this.ΔⲆᐃΔⵠ.stop(this.ⲆⵠⲆΔⵠⵠⲆ);
            this.ΔⲆᐃΔⵠ.stop(this.ⲆⲆⵠⲆⵠⵠⲆ);
        };
        this.fade = function (a, b) {
            var c = this.ΔⲆᐃΔⵠ.volume(a) * ef;
            this.ΔⲆᐃΔⵠ.fade(c, 0, b, a);
        };
        this.ΔΔᐃᐃᐃⲆⵠ = function (a, b) {
            if (this.ΔΔᐃⵠⵠ && this.ᐃⵠⲆᐃΔ) {
                a.pos(this.x, this.y, -0.5, b);
            }
        };
        this.ΔΔΔᐃⵠ = function (b, c, d, e, f, g, a) {
            this.ᐃⵠⵠⵠⲆ = g;
            if (e && f === this.mode) {
                var i = ef * this.ΔⲆᐃΔⵠ.volume(b);
                if (this.ΔΔᐃⵠⵠ) {
                    var j = ef * (Math.random() * d + c);
                    this.ΔⲆᐃΔⵠ.fade(i, j, a, b);
                } else {
                    this.ΔⲆᐃΔⵠ.fade(i, 0, a, b);
                }
            } else if (this.mode != f && this.ΔΔᐃⵠⵠ) {
                this.ΔⲆᐃΔⵠ.fade(0, ef * (c + d), a, b);
            } else if (this.ΔΔᐃⵠⵠ) {
                i = this.ΔⲆᐃΔⵠ.volume(b) * ef;
                j = (d * Math.random() + c) * ef;
                this.ΔⲆᐃΔⵠ.fade(i, j, a, b);
            }
            this.ΔΔᐃᐃᐃⲆⵠ(this.ΔⲆᐃΔⵠ, b);
            this.ΔⲆᐃΔⵠ.play(b);
        };
        this.ΔΔΔ = function () {
            var a = cf.ᐃⲆᐃⵠⵠ[this.ⲆⵠᐃⲆ];
            this.ᐃⵠⵠⵠⲆ -= $w;
            if (this.ᐃⵠⵠⵠⲆ <= 0) {
                var b = 0;
                if (a.x != this.ᐃⲆΔⲆ.x || this.ᐃⲆΔⲆ.y != a.y) {
                    if (!this.ΔΔᐃⵠⵠ) {
                        b = 1;
                        this.ΔΔᐃⵠⵠ = 1;
                    }
                    this.x = Zw.ⵠⵠⲆᐃⵠᐃⲆ(a.x, ΔΔⲆⲆᐃ.ΔⵠⵠⲆᐃⲆⵠ);
                    this.y = Zw.ᐃᐃⲆΔΔⲆⵠ(a.y, ΔΔⲆⲆᐃ.ΔⵠⵠⲆᐃⲆⵠ);
                } else if (this.ΔΔᐃⵠⵠ) {
                    b = 1;
                    this.ΔΔᐃⵠⵠ = 0;
                }
                this.ᐃⲆΔⲆ.x = a.x;
                this.ᐃⲆΔⲆ.y = a.y;
                ⲆⲆΔᐃ = this.ⲆΔⵠΔΔᐃⵠ(a);
                if (this.mode != ⲆⲆΔᐃ) {
                    if (this.mode === ΔΔⲆⲆᐃ.ΔⵠⲆΔⲆⵠⵠ) {
                        this.fade(this.ⲆⲆⵠⵠⲆ, ΔΔⲆⲆᐃ.ᐃⲆⲆⲆⵠⲆᐃ);
                    } else if (ΔΔⲆⲆᐃ.ⲆⲆⵠᐃᐃ === this.mode) {
                        this.fade(this.ΔΔⲆⲆⵠⲆⵠ, ΔΔⲆⲆᐃ.ᐃⲆΔⵠΔⵠΔ);
                    } else if (ΔΔⲆⲆᐃ.ΔᐃΔᐃⵠᐃⲆ === this.mode) {
                        this.fade(this.ⲆⵠⲆΔⵠⵠⲆ, ΔΔⲆⲆᐃ.Ⲇᐃⵠᐃⵠᐃᐃ);
                    } else if (ΔΔⲆⲆᐃ.ⲆⵠᐃᐃᐃᐃⲆ === this.mode) {
                        this.fade(this.ⲆⲆⵠⲆⵠⵠⲆ, ΔΔⲆⲆᐃ.ΔΔΔⵠΔᐃⲆ);
                    }
                }
                if (ⲆⲆΔᐃ === ΔΔⲆⲆᐃ.ΔⵠⲆΔⲆⵠⵠ) {
                    this.ΔΔΔᐃⵠ(this.ⲆⲆⵠⵠⲆ, 0.08, 0.3, b, ⲆⲆΔᐃ, ΔΔⲆⲆᐃ.ⲆᐃⲆⵠᐃΔⵠⵠΔ, ΔΔⲆⲆᐃ.ᐃⲆⲆⲆⵠⲆᐃ);
                } else if (ΔΔⲆⲆᐃ.ⲆⲆⵠᐃᐃ === ⲆⲆΔᐃ) {
                    this.ΔΔΔᐃⵠ(this.ΔΔⲆⲆⵠⲆⵠ, 0.2, 0.3, b, ⲆⲆΔᐃ, ΔΔⲆⲆᐃ.ᐃⲆⲆⵠΔᐃΔⵠΔ, ΔΔⲆⲆᐃ.ᐃⲆΔⵠΔⵠΔ);
                } else if (ⲆⲆΔᐃ === ΔΔⲆⲆᐃ.ΔᐃΔᐃⵠᐃⲆ) {
                    this.ΔΔΔᐃⵠ(this.ⲆⵠⲆΔⵠⵠⲆ, 0.3, 0.6, b, ⲆⲆΔᐃ, ΔΔⲆⲆᐃ.ΔⵠᐃᐃᐃᐃᐃᐃⲆ, ΔΔⲆⲆᐃ.Ⲇᐃⵠᐃⵠᐃᐃ);
                } else if (ΔΔⲆⲆᐃ.ⲆⵠᐃᐃᐃᐃⲆ === ⲆⲆΔᐃ) {
                    this.ΔΔΔᐃⵠ(this.ⲆⲆⵠⲆⵠⵠⲆ, 0.1, 0.25, b, ⲆⲆΔᐃ, ΔΔⲆⲆᐃ.ⵠⵠᐃᐃⲆⲆᐃΔΔ, ΔΔⲆⲆᐃ.ΔΔΔⵠΔᐃⲆ);
                }
                this.mode = ⲆⲆΔᐃ;
            }
        };
        this.check = function () {
            var a = cf.ᐃⲆᐃⵠⵠ[this.ⲆⵠᐃⲆ];
            return !!a || (this.ⲆᐃᐃⲆⲆΔⵠ(a), false);
        };
    }
    function gf(c, d, e, f, i, j) {
        const a = (32704 + c) % 65384;
        const k = d ^ 9177;
        const m = (e | 29749) & ~(e & 29749);
        const h = ~(f & 26696) & f | ~(f & 26696) & 26696;
        const l = i ^ 28960;
        const g = (j | 47144) & ~(j & 47144);
        const n = bf(a, k, m, h);
        uf(l, g, a, k, m, h);
        return ~(n & 30990) & 30990 | ~(n & 30990) & n;
    }
    function uf(b, c, d, e, f, g) {
        const a = (16 << (b & 255)) + (0 << (b >> 16 & 255)) + (8 << (b >> 8 & 255)) + (24 << (b >> 24 & 255));
        const i = (f + 35607) % 65530;
        const j = g ^ 56285;
        return ((16746 + (jg(a, (c | 51076) & ~(c & 51076), ~(d & 5276) & 5276 | ~(d & 5276) & d, ((36195 + e) * 214013 + 2531011) % 4294967296) ^ function (b, c, d) {
            const e = (24 << (b >> 16 & 255)) + (0 << (b >> 8 & 255)) + (8 << (b & 255)) + (16 << (b >> 24 & 255));
            const f = ((c + 49423) * 214013 + 2531011) % 4294967296;
            const g = ~(d & 49063) & d | ~(d & 49063) & 49063;
            return ((22475 + (io(e, f, g, e, f, g) ^ $g(e, f, g, e, f))) * 2147483629 + 2147483587) % 2147483647;
        }(i, j, a))) * 1664525 + 1013904223) % 4294967296;
    }
    function bf(b, c, d, e) {
        const f = b ^ 13496;
        const g = (1 + (c + 19902) * 22695477) % 4294967296;
        const a = (0 << (d & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & 255)) + (8 << (d >> 8 & 255));
        const h = Hk(f, g, a, (2531011 + (4783 + e) * 214013) % 4294967296);
        (function (b, c, d) {
            const e = (1 + (31015 + b) * 22695477) % 4294967296;
            const f = ~(c & 18944) & (c | 18944);
            const g = (d | 64694) & ~(d & 64694);
            const a = jg(e, f, g, e);
            Bf(f, g, e, f, g);
        })(f, g, a);
        return ~(h & 11394) & h | ~(h & 11394) & 11394;
    }
    ⵠⵠⲆⵠΔⵠᐃ = 0;
    document.getElementById("version").innerHTML = 52 + ".3";
    var df;
    var Uw = [];
    var Vw = {
        time: Math.floor(Math.random() * 2),
        items: []
    };
    document.getElementById("game_body").style.backgroundColor = Gr.ᐃⲆΔᐃⵠ[Vw.time];
    Vw.items.push(new rw(1, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1));
    Vw.items.push(new rw(100, 0, 0, 0, 0, 0, 0, 5));
    Vw.items.push(new rw(2, 0, 0, 0, 0, Math.PI / 4, 0, 0));
    Vw.items.push(new rw(100, 0, 0, 0, 0, 0, 0, 5));
    Δⵠᐃⵠ = new function () {
        var c = this;
        function a(a) {
            let b = a.name || a.a;
            if (a.auto) {
                return b;
            } else {
                return b + " [" + a.nu + " " + lt[324] + "]";
            }
        }
        this.ⵠⵠᐃΔ = null;
        this.ΔⵠⲆⲆⲆ = 0;
        this.ⲆΔᐃⲆⲆ = [];
        this.ᐃⲆΔᐃⲆⵠⲆ = {};
        this.ΔⵠⵠⲆⲆᐃⵠ = {};
        this.ᐃΔᐃⵠⵠ = [[], [], [], [], [], [], [], [], []];
        this.ᐃΔⲆΔΔⲆΔ = [-1, -1, -1, -1, -1, -1, -1, -1, -1];
        this.ⵠⵠᐃΔⵠ = 0;
        this.ⵠⲆΔⲆⵠᐃᐃ = 0;
        this.ᐃΔᐃΔᐃⲆᐃ = function (b) {
            if (cw !== undefined) {
                c.ⲆΔᐃⲆⲆ.push({
                    a: cw.name,
                    gm: cw.mode,
                    idx: 0,
                    m: 100,
                    nu: 0,
                    id: 0
                });
                b();
                return;
            }
            fetch(gw + "/list", {
                method: "GET"
            }).then(function (a) {
                if (a.ok) {
                    a.json().then(function (d) {
                        c.ⲆΔᐃⲆⲆ = [];
                        c.ΔⵠⵠⲆⲆᐃⵠ = {};
                        for (let a in mw.ᐃΔΔΔⲆΔᐃ) {
                            const b = mw.ᐃΔΔΔⲆΔᐃ[a];
                            c.ⲆΔᐃⲆⲆ.push({
                                a: "Auto Select",
                                gm: b,
                                m: 100,
                                nu: 0,
                                auto: true
                            });
                        }
                        var f = 0;
                        var i = 1;
                        var j = 2;
                        var a = 3;
                        for (let e = 0; e < d.length; e++) {
                            const k = d[e];
                            const m = k.n;
                            const n = k.l;
                            const h = k.p;
                            const g = [];
                            c.ᐃⲆΔᐃⲆⵠⲆ[m] = g;
                            const l = [];
                            for (let a = 0; a < h.length; a++) {
                                const b = m + h[a][f];
                                l.push(b);
                                g.push(b);
                            }
                            for (let b = 0; n.length > b; b++) {
                                const d = n[b];
                                let e;
                                let k = mw.ᐃΔΔΔⲆΔᐃ[d[j]];
                                let h = k + d[i];
                                e = k in c.ΔⵠⵠⲆⲆᐃⵠ ? ++c.ΔⵠⵠⲆⲆᐃⵠ[k] : c.ΔⵠⵠⲆⲆᐃⵠ[k] = 1;
                                if (h in c.ΔⵠⵠⲆⲆᐃⵠ) {
                                    ⲆⵠΔΔⵠⵠⲆ = ++c.ΔⵠⵠⲆⲆᐃⵠ[h];
                                } else {
                                    ⲆⵠΔΔⵠⵠⲆ = c.ΔⵠⵠⲆⲆᐃⵠ[h] = 1;
                                }
                                c.ⲆΔᐃⲆⲆ.push({
                                    name: d[4],
                                    a: mw.ᐃⲆⲆⵠⵠΔᐃⵠⲆ[d[i]] + " " + ⲆⵠΔΔⵠⵠⲆ,
                                    r: d[i],
                                    gm: mw.ᐃΔΔΔⲆΔᐃ[d[j]],
                                    idx: e,
                                    m: 100,
                                    nu: d[a],
                                    id: d[i] + d[f],
                                    p: l
                                });
                            }
                        }
                        const k = [];
                        const e = [];
                        const h = [];
                        for (let a = 0; a < c.ⲆΔᐃⲆⲆ.length; a++) {
                            const b = c.ⲆΔᐃⲆⲆ[a];
                            if (!b.auto) {
                                if (mw.ᐃΔΔΔⲆΔᐃ[6] === b.gm) {
                                    if (typeof b.name === "string" && (b.name.indexOf("Private Server") !== -1 || b.nu > 95)) {
                                        e.push(b);
                                    } else {
                                        h.push(b);
                                    }
                                    k.push(a);
                                }
                            }
                        }
                        const l = [];
                        l.push(...h.sort(function (a, b) {
                            return b.nu - a.nu;
                        }));
                        l.push(...e.sort(function (a, b) {
                            return (b.nu < 95 ? b.nu : 0) - (a.nu < 95 ? a.nu : 0);
                        }));
                        for (let a = 0; a < k.length; a++) {
                            const b = k[a];
                            const d = l[a];
                            d.idx = a + 1;
                            c.ⲆΔᐃⲆⲆ[b] = d;
                        }
                        b();
                    });
                } else {
                    aj.setTimeout(function () {
                        c.ᐃΔᐃΔᐃⲆᐃ(b);
                    }, 3000);
                }
            });
        };
        this.ΔⵠⵠΔΔᐃᐃΔΔ = function (a) {
            var b = [];
            for (var c = 0; a.length > c; c++) {
                if (a[c].a.indexOf(kr) !== -1) {
                    b.push(c);
                }
            }
            if (b.length === 0) {
                return 0;
            } else {
                return b[Math.floor(Math.random() * b.length)];
            }
        };
        this.ⵠⲆᐃⵠⵠᐃⲆ = function (b) {
            var c = 0;
            for (var d = 0; d < b.length; d++) {
                c += b[d].nu;
            }
            var e = document.getElementById("servselect");
            if (Δⵠᐃⵠ.ᐃΔⲆΔΔⲆΔ[Δⵠᐃⵠ.ⵠⵠᐃΔⵠ] === -1) {
                Δⵠᐃⵠ.ᐃΔⲆΔΔⲆΔ[Δⵠᐃⵠ.ⵠⵠᐃΔⵠ] = e.selectedIndex = Δⵠᐃⵠ.ΔⵠⵠΔΔᐃᐃΔΔ(b);
            } else {
                e.selectedIndex = Δⵠᐃⵠ.ᐃΔⲆΔΔⲆΔ[Δⵠᐃⵠ.ⵠⵠᐃΔⵠ];
            }
            var f = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + b[e.selectedIndex].a + (b[e.selectedIndex].nu > 0 ? " [" + b[e.selectedIndex].nu + " " + lt[324] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + lt[323] + " (" + this.ⲆΔⲆᐃᐃΔⵠ + ") " + lt[325] + "</li>";
            for (d = 0; b.length > d; d++) {
                f += "<li role=\"option\">" + a(b[d]) + "</li>\n";
            }
            f += "<li role=\"option\" id=\"selectDisabled\">(" + c + ") " + lt[326] + "</li>";
            f += "</div>";
            e.innerHTML = f;
            $(".md-select").on("click", function () {
                $(this).toggleClass("active");
            });
            $(".md-select ul li").on("click", function () {
                var b = $(this).text();
                var c = -1;
                for (var d = Δⵠᐃⵠ.ᐃΔᐃⵠⵠ[Δⵠᐃⵠ.ⵠⵠᐃΔⵠ], e = 0; e < d.length; e++) {
                    if (b === a(d[e])) {
                        c = e;
                        break;
                    }
                }
                if (c !== -1) {
                    document.getElementById("servselect").selectedIndex = c;
                    Δⵠᐃⵠ.ᐃΔⲆΔΔⲆΔ[Δⵠᐃⵠ.ⵠⵠᐃΔⵠ] = c;
                    $(".md-select ul li").removeClass("active");
                    $(this).addClass("active");
                    $(".md-select label button").text(b);
                }
            });
        };
        this.ⲆΔⲆᐃᐃΔⵠ = 0;
        this.ⲆⲆΔᐃΔΔᐃᐃⵠ = function () {
            this.ⲆΔⲆᐃᐃΔⵠ = 0;
            for (var a = 0; Δⵠᐃⵠ.ⲆΔᐃⲆⲆ.length > a; a++) {
                if (this.ⲆΔᐃⲆⲆ[a].gm == "experimental") {
                    this.ᐃΔᐃⵠⵠ[7].push(this.ⲆΔᐃⲆⲆ[a]);
                } else if (this.ⲆΔᐃⲆⲆ[a].gm == "zombies") {
                    this.ᐃΔᐃⵠⵠ[2].push(this.ⲆΔᐃⲆⲆ[a]);
                } else if (this.ⲆΔᐃⲆⲆ[a].gm == "community") {
                    this.ᐃΔᐃⵠⵠ[6].push(this.ⲆΔᐃⲆⲆ[a]);
                } else if (this.ⲆΔᐃⲆⲆ[a].gm == "forest") {
                    this.ᐃΔᐃⵠⵠ[4].push(this.ⲆΔᐃⲆⲆ[a]);
                } else if (this.ⲆΔᐃⲆⲆ[a].gm == "battle-royale") {
                    this.ᐃΔᐃⵠⵠ[5].push(this.ⲆΔᐃⲆⲆ[a]);
                } else if (this.ⲆΔᐃⲆⲆ[a].gm == "vampires") {
                    this.ᐃΔᐃⵠⵠ[3].push(this.ⲆΔᐃⲆⲆ[a]);
                } else {
                    this.ᐃΔᐃⵠⵠ[0].push(this.ⲆΔᐃⲆⲆ[a]);
                }
                this.ⲆΔⲆᐃᐃΔⵠ += this.ⲆΔᐃⲆⲆ[a].nu;
            }
            for (a = 0; a < this.ᐃΔᐃⵠⵠ.length; a++) {
                if (this.ᐃΔᐃⵠⵠ[a].length === 0) {
                    this.ᐃΔᐃⵠⵠ[a].push({
                        a: lt[327],
                        ᐃⲆΔΔⲆⲆΔΔᐃ: 0,
                        ᐃᐃ: "127.0.0.1",
                        ᐃⵠⵠ: 80
                    });
                }
            }
            this.ⵠⲆᐃⵠⵠᐃⲆ(this.ᐃΔᐃⵠⵠ[0]);
            this.ⲆⵠΔᐃⵠ = function (a) {
                Δⵠᐃⵠ.ⵠⵠᐃΔⵠ = a;
                Δⵠᐃⵠ.ⵠⲆᐃⵠⵠᐃⲆ(Δⵠᐃⵠ.ᐃΔᐃⵠⵠ[Δⵠᐃⵠ.ⵠⵠᐃΔⵠ]);
                Δⵠᐃⵠ.ⵠⲆᐃⵠⵠᐃⲆ(Δⵠᐃⵠ.ᐃΔᐃⵠⵠ[Δⵠᐃⵠ.ⵠⵠᐃΔⵠ]);
                document.getElementById("servselect").selectedIndex = Δⵠᐃⵠ.ⵠⵠᐃΔⵠ;
            };
        };
        this.ⵠΔⲆⵠⵠⲆᐃ = 0;
        this.ΔΔⵠΔΔⲆⵠ = 0;
        this.ΔⲆᐃⵠᐃ = null;
        this.timeout = function () {
            c.ΔΔⵠΔΔⲆⵠ++;
            c.ⵠⵠᐃΔ.close();
            if (c.ΔΔⵠΔΔⲆⵠ > 3) {
                xf = 1;
                df.ᐃⲆᐃⵠΔⲆᐃΔΔ = lw.ⲆⲆⵠᐃᐃⲆΔΔᐃ;
                c.ΔⵠⲆⵠⲆ(lt[300]);
                df.waiting = f;
                if (Ww.reconnect.enabled) {
                    Yw.ΔⵠᐃⵠⲆ(df.ⲆⲆᐃᐃᐃ);
                }
            } else if (_r === Ww.ⲆⲆΔΔⵠⲆΔ || Ww.ⵠᐃⲆⵠᐃᐃᐃ === undefined || Ww.ΔΔᐃⲆⵠΔΔ === undefined) {
                df.ⵠⲆⵠⲆΔⵠᐃ(function () {
                    c.ΔⵠⵠΔⲆⲆΔ();
                }, 1);
            } else {
                c.ΔⵠⵠΔⲆⲆΔ();
            }
        };
        this.ΔΔΔⲆΔⵠΔ = function (a) {
            if (this.ⵠⵠᐃΔ.ΔⵠⲆⲆⲆ == this.ΔⵠⲆⲆⲆ) {
                this.ΔⵠⲆⲆⲆ++;
                this.ΔⵠⲆⵠⲆ(lt[301] + a);
                Yw.ΔⵠᐃⵠⲆ(df.ⲆⲆᐃᐃᐃ);
            }
        };
        this.ᐃᐃⵠⵠᐃⵠⵠ = function () {
            this.ΔⵠⲆⵠⲆ("You speak too much");
        };
        this.ᐃΔⲆⲆΔᐃⵠΔⵠ = function () {
            clearTimeout(this.ΔⲆᐃⵠᐃ);
            this.ΔⵠⲆⵠⲆ(lt[302]);
            df.waiting = false;
        };
        this.ᐃΔⵠⲆⲆᐃΔᐃᐃ = function () {
            Ww.ⲆⵠᐃΔΔ.open = ps;
        };
        this.ΔⵠⵠⲆⲆⲆⵠⲆᐃ = function () {
            Yw.ᐃⲆⵠᐃⵠᐃⲆ = 0;
        };
        this.ⵠⵠⵠⵠΔΔΔⲆΔ = function () {
            Yw.ᐃᐃⲆⲆⵠᐃΔ = 0;
        };
        this.ⵠⵠΔⲆⵠⲆᐃᐃⲆ = function (a) {
            Ww.ΔᐃᐃΔᐃ.ΔⵠᐃΔⵠ = a;
            if (cf.ⲆᐃⲆⵠΔ > -300) {
                if (a === 0) {
                    this.ΔⵠⲆⵠⲆ(lt[340]);
                } else {
                    this.ΔⵠⲆⵠⲆ(lt[341]);
                }
            }
        };
        this.ΔⵠⵠⲆⵠ = function (a) {
            Ww.ΔⵠⵠⲆⵠ = a;
        };
        this.ⲆᐃⵠᐃᐃᐃⵠⲆⲆ = function (a) {
            Ww.ⵠⲆᐃᐃΔⲆⲆ = a;
        };
        this.ⵠⲆᐃᐃΔⲆⲆ = function (a) {
            Ww.ΔΔⲆᐃⲆ.ΔⵠᐃΔⵠ = a;
            if (cf.ᐃΔΔΔⲆ > -300) {
                if (a === 0) {
                    this.ΔⵠⲆⵠⲆ(lt[342]);
                } else {
                    this.ΔⵠⲆⵠⲆ(lt[343]);
                }
            }
        };
        this.ⵠΔⲆⵠⵠᐃⲆΔΔ = function (a) {
            if (a === 0) {
                document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
            } else if (a === 1) {
                document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
            } else if (a === 2) {
                document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
            } else if (a === 3) {
                document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
            }
        };
        this.ᐃⵠⵠⲆΔᐃⵠⲆΔ = function () {
            Yw.ⵠⵠΔⵠⲆΔⲆ = 0;
        };
        this.ΔⲆᐃᐃᐃⲆⲆΔᐃ = function () {
            Yw.ᐃⵠᐃᐃⲆΔΔ = 0;
        };
        this.ⲆⵠⵠΔⲆᐃΔᐃⵠ = function () {
            Ww.ᐃΔⵠΔ.ᐃΔΔᐃΔ = [];
            Ww.ᐃΔⵠΔ.ΔᐃⲆ = [];
            Ww.ᐃΔⵠΔ.id = -1;
            Ww.ᐃΔⵠΔ.ⲆⲆⲆⵠⲆΔΔ.stop();
            Ww.ΔΔⵠᐃ.ⲆⵠⲆᐃΔ = [];
            Ww.ΔΔⵠᐃ.ᐃΔⲆⲆⲆ = as;
            Ww.ΔΔⵠᐃ.ⵠⵠΔⲆΔⵠⵠΔΔ = false;
            Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ = -1;
            Ww.ΔΔⵠᐃ.id = -1;
            Ww.ΔΔⵠᐃ.ⵠΔᐃᐃⵠ = Ia;
            Ww.ΔΔⵠᐃ.ⵠΔᐃᐃᐃ = Js;
            Ww.ΔΔⵠᐃ.ⲆΔᐃΔᐃ = false;
            Ww.ΔΔⵠᐃ.ᐃΔΔⵠΔᐃᐃ = false;
            Ww.ΔΔⵠᐃ.timeout = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(pl, 0, 1, 0, 1, 1);
        };
        this.ⲆⵠᐃⵠⲆⵠⵠᐃⵠ = function () {
            clearTimeout(this.ΔⲆᐃⵠᐃ);
            this.ΔⵠⲆⵠⲆ();
            df.waiting = fr;
        };
        this.ⲆⵠΔⵠⵠΔⲆ = function (a) {
            for (var b = 0; a.length > b; b++) {
                if (typeof a[b] === "string") {
                    a[b] = ⲆⵠΔᐃ.ΔᐃᐃⲆᐃΔⲆ(a[b]);
                }
            }
            Ww.ⲆᐃⲆⵠⵠ.Δⵠᐃⵠᐃ(a[1], a[2], a[3], a[4]);
        };
        this.message = function (a) {
            this.ΔⵠⲆⵠⲆ(a);
        };
        this.ΔΔᐃᐃⵠⵠᐃⲆᐃ = function () {
            clearTimeout(this.ΔⲆᐃⵠᐃ);
            this.ΔⵠⲆⵠⲆ(lt[339]);
            df.waiting = Dk;
        };
        this.ⵠⵠᐃᐃⵠΔⵠⲆⲆ = function () {
            clearTimeout(this.ΔⲆᐃⵠᐃ);
            this.ΔⵠⲆⵠⲆ(lt[338]);
            df.waiting = Es;
        };
        this.ΔⲆⲆⲆᐃⲆΔⲆΔ = function () {
            clearTimeout(this.ΔⲆᐃⵠᐃ);
            this.ΔⵠⲆⵠⲆ(lt[304]);
            df.waiting = false;
        };
        this.ΔⵠⲆᐃΔΔᐃᐃⵠ = function () {
            Ww.ᐃΔⵠΔ.ΔᐃᐃⵠⵠⲆⵠ(1, 0);
            Yw.ⵠᐃᐃᐃᐃⲆⵠ();
        };
        this.ΔᐃΔⵠᐃⵠⲆΔᐃ = function (a) {
            var b = a[1];
            var c = cf.ⲆⲆⵠΔ[b];
            c.ᐃΔΔⵠ = a[2];
            c.ⵠΔⵠⵠΔ = a[3];
            c.ⲆᐃᐃⲆⲆⲆⵠ = a[4];
            c.ΔᐃΔΔΔ = a[5];
            c.ⲆᐃᐃΔⵠ = a[6];
            c.ⵠᐃⵠⵠᐃ = a[7];
            c.level = a[8];
            var d = cf.ᐃⲆᐃⵠⵠ[b * cf.ΔᐃⵠⵠΔⵠⵠ];
            if (d) {
                d.ᐃΔΔⵠ = a[2];
                d.ⵠΔⵠⵠΔ = a[3];
                d.ⲆᐃᐃⲆⲆⲆⵠ = a[4];
                d.ΔᐃΔΔΔ = a[5];
            }
        };
        this.ᐃⵠᐃⲆᐃⵠⵠᐃⲆ = function (a) {
            if (a === 29) {
                Ww.ᐃΔⵠΔ.ΔᐃᐃⵠⵠⲆⵠ(1, 0);
                Yw.ⵠᐃᐃᐃᐃⲆⵠ();
            } else {
                this.ⵠⲆⲆᐃⵠᐃΔ([0, a, 1]);
            }
            Ww.ΔΔⵠᐃ.ΔᐃⲆᐃⵠΔΔ();
        };
        this.ⲆⵠΔⵠⲆᐃΔⲆⲆ = function (a) {
            Ww.ΔᐃΔΔᐃ.ᐃⵠⵠⵠⲆ = 0;
            Ww.ΔΔⵠᐃ.ᐃⲆⵠⵠᐃⵠⲆᐃⵠ(a);
        };
        this.ⲆⵠⲆᐃᐃⲆᐃⲆⲆ = function (a) {
            for (var b = Ls[a].r, c = 0; b.length > c; c++) {
                if (Ww.ᐃΔⵠΔ.max > Ww.ᐃΔⵠΔ.ᐃΔΔᐃΔ.length || Ww.ᐃΔⵠΔ.ΔᐃⲆ[b[c][0]] > 0) {
                    var d = Math.floor(b[c][1] * 0.8);
                    if (!d) {
                        continue;
                    }
                    this.ⵠⲆⲆᐃⵠᐃΔ([0, b[c][0], d]);
                }
            }
            Ww.ΔΔⵠᐃ.ΔᐃⲆᐃⵠΔΔ();
        };
        this.ⵠᐃΔⵠᐃᐃⲆⵠΔ = function (a) {
            Ww.ΔᐃΔΔᐃ.ᐃⵠⵠⵠⲆ = 0;
            Ww.ΔΔⵠᐃ.ᐃⵠⵠⲆⵠⲆⵠⵠΔ(a);
        };
        this.ΔⵠⲆⵠⲆ = function (a) {
            if (Ww.alert.text) {
                if (a !== Ww.alert.text && Ww.alert.list[Ww.alert.list.length - 1] !== a) {
                    Ww.alert.list.push(a);
                }
            } else {
                Ww.alert.text = a;
            }
        };
        this.ΔᐃΔⲆⲆⵠⵠᐃᐃ = function () {
            this.ΔⵠⲆⵠⲆ(lt[305]);
        };
        this.ᐃⵠᐃⵠᐃⲆᐃᐃΔ = function () {
            var a;
            a = Ww.ᐃΔᐃ == 0 ? lt[306] : lt[307] + (Ww.ᐃΔᐃ + 1) + lt[308];
            this.ΔⵠⲆⵠⲆ(a);
            Ww.ᐃΔᐃ++;
        };
        this.ⲆⲆⵠᐃΔⵠⲆⵠᐃ = function () {
            clearTimeout(c.ΔⲆᐃⵠᐃ);
            Ww.reconnect.enabled = Ij;
            Ww.ΔᐃᐃⲆΔ = false;
            this.ΔⵠⲆⵠⲆ(lt[309]);
            Yw.ΔⵠᐃⵠⲆ(df.ⲆⲆᐃᐃᐃ);
            this.ⵠⵠᐃΔ.close();
        };
        this.ᐃᐃⵠΔⵠᐃΔⵠⲆ = function () {
            xf = 1;
            clearTimeout(this.ΔⲆᐃⵠᐃ);
            this.ΔⵠⲆⵠⲆ(lt[310]);
            df.waiting = Es;
        };
        this.ΔⲆᐃⵠᐃⵠᐃᐃΔ = function () {
            xf = 1;
            clearTimeout(this.ΔⲆᐃⵠᐃ);
            this.ΔⵠⲆⵠⲆ(lt[311]);
            df.waiting = Kn;
        };
        this.ᐃΔΔΔⵠⲆᐃⵠΔ = function (a) {
            var b = a[1];
            var c = cf.ⲆⲆⵠΔ;
            c[b].ⲆⵠΔΔⲆ = a[2];
            c[b].ᐃΔΔⵠ = a[3];
            c[b].ⵠΔⵠⵠΔ = a[4];
            c[b].ⲆᐃᐃⲆⲆⲆⵠ = a[5];
            c[b].ΔᐃΔΔΔ = a[6];
            c[b].ⲆᐃᐃΔⵠ = a[7];
            c[b].ⵠᐃⵠⵠᐃ = a[8];
            c[b].level = a[9];
            c[b].ⵠΔΔᐃᐃ = 0;
            c[b].ΔΔᐃⲆᐃⲆⲆ = null;
            c[b].label = null;
            c[b].ⲆᐃⲆΔⵠᐃΔ = null;
            c[b].ΔᐃᐃⲆΔ = true;
            if (aw === 1) {
                c[b].ⲆⵠΔΔⲆ += "|" + b;
            }
        };
        this.ⵠΔⵠⵠΔⲆⲆᐃΔ = function () {
            this.ⵠⵠᐃΔ[_v](pq[qq].stringify([27]));
        };
        this.ⲆⲆⵠᐃᐃΔⲆⲆⲆ = function () {
            this.ΔⵠⲆⵠⲆ(lt[312]);
        };
        this.ᐃⵠⵠΔᐃⲆⵠ = function () {
            this.ΔⵠⲆⵠⲆ(lt[313]);
        };
        this.ⲆⵠᐃⵠᐃⵠⲆⵠᐃ = function (a) {
            this.ⵠⵠᐃΔ[_v](Zo[pa].stringify([24, a]));
            Ww.ⲆⵠᐃΔΔ.open = false;
        };
        this.ⲆⵠⲆⲆΔⵠⲆΔⵠ = function (a) {
            for (var b = iw[a - 1].items, c = 0; c < b.length && Ww.ᐃΔⵠΔ.ᐃΔΔᐃΔ.length < Ww.ᐃΔⵠΔ.max; c++) {
                var d = b[c][1];
                var e = b[c][0];
                if (b[c][1] === 29) {
                    Ww.ᐃΔⵠΔ.ΔᐃᐃⵠⵠⲆⵠ(1, 0);
                } else {
                    this.ⵠⲆⲆᐃⵠᐃΔ([0, d, e]);
                }
            }
        };
        this.ⵠⲆⲆᐃⵠᐃΔ = function (b) {
            for (var c = b.length, d = Ww.ᐃΔⵠΔ, e = 1; e < c; e += 2) {
                var f = b[e];
                var g = b[e + 1];
                for (var h = 0; d.ᐃΔΔᐃΔ.length > h; h++) {
                    if (f == d.ᐃΔΔᐃΔ[h].id) {
                        d.ΔᐃⲆ[f] += g;
                        break;
                    }
                }
                if (h == d.ᐃΔΔᐃΔ.length) {
                    d.ΔᐃⲆ[f] = g;
                    d.ᐃΔΔᐃΔ.push(Yw.ᐃⵠᐃ[f]);
                    Yw.ⵠᐃᐃᐃᐃⲆⵠ();
                }
            }
            Ww.ΔΔⵠᐃ.ΔΔΔ();
        };
        this.ᐃⵠⲆⲆ = function (b, c, d, e, f, g, a) {
            Ww.ᐃⵠⲆⲆ.ΔⵠΔⲆ = b / 100;
            Ww.ᐃⵠⲆⲆ.ⵠⲆᐃ = c / 100;
            Ww.ᐃⵠⲆⲆ.c = d / 100;
            Ww.ᐃⵠⲆⲆ.ⵠᐃᐃ = e / 100;
            Ww.ᐃⵠⲆⲆ.ⲆⲆⲆ = f / 100;
            Ww.ᐃⵠⲆⲆ.ⵠΔⵠᐃΔᐃⲆ = g / 100;
            Ww.ΔⵠⵠⲆⵠ = a;
        };
        this.ΔⵠΔⲆⲆⵠᐃᐃᐃ = function (a) {
            Yw.Ⲇᐃⵠⵠ.modify(a, 2);
        };
        this.ⲆᐃⵠⵠⲆΔᐃᐃⲆ = function (a) {
            Yw.Ⲇᐃⵠⵠ.modify(a, 0);
        };
        this.claimed = function (a) {
            Yw.Ⲇᐃⵠⵠ.modify(a, 3);
        };
        this.ⵠⵠᐃᐃᐃΔᐃⲆⲆ = function (a, b) {
            Ww.ᐃⵠⲆⲆ.ΔⵠΔⲆ = a / 100;
            Ww.ΔⵠⵠⲆⵠ = b;
        };
        this.ⵠᐃⲆⲆⵠⵠⲆᐃᐃ = function (a) {
            Ww.ᐃⵠⲆⲆ.ⵠᐃᐃ = a / 100;
        };
        this.ⵠᐃⲆⲆⵠΔⵠⲆΔ = function (a) {
            Ww.ᐃⵠⲆⲆ.ⵠⲆᐃ = a / 100;
        };
        this.ᐃⲆΔⵠΔⲆΔᐃⲆ = function (a) {
            Ww.ᐃⵠⲆⲆ.ⵠΔⵠᐃΔᐃⲆ = a / 100;
        };
        this.ⲆⵠᐃⵠᐃΔᐃΔΔ = function (a) {
            Ww.ᐃⵠⲆⲆ.c = a / 100;
        };
        this.ᐃⲆⵠⵠⲆⵠⲆⲆΔ = function (a) {
            cf.time = a;
            cf.transition = true;
            Zw.transition = 1;
        };
        this.ΔΔⵠΔⵠⲆⲆⵠᐃ = function () {
            document.getElementById("game_body").style.backgroundColor = Gr.ᐃⲆΔᐃⵠ[cf.time];
        };
        this.ⲆⵠⵠⵠΔⵠΔᐃᐃ = function (a) {
            if (cf.mode == 1 && cf.ⲆⲆⵠΔ[a].ⲆⵠΔΔⲆ !== "spectator") {
                this.ΔⵠⲆⵠⲆ(cf.ⲆⲆⵠΔ[a].ⲆⵠΔΔⲆ + lt[314]);
            }
            cf.ⲆⲆⵠΔ[a].ΔᐃᐃⲆΔ = os;
        };
        this.ΔᐃΔΔᐃⵠᐃⲆΔ = function (a) {
            var b = new Uint16Array(a);
            ⵠΔⵠΔ.ᐃⲆΔ.ΔᐃᐃⲆⲆ(b[1], b[2]);
        };
        this.ᐃⵠⵠΔⵠⲆⵠⵠᐃ = function (a) {
            var b = new Uint16Array(a);
            Ww.ᐃⲆΔ.ΔᐃᐃⲆⲆ(b[1], b[2]);
        };
        this.ᐃⵠᐃᐃⲆⵠⵠⲆⵠ = function (b, c) {
            var d = new Uint16Array(c);
            for (var e = (b.length - 2) / 4, f = 0; f < e; f++) {
                var g = d[1 + f * 2];
                var i = b[4 + f * 4];
                var j = Math.PI * ((b[5 + f * 4] >> 1) / 127) * 2;
                var k = cf.ᐃⲆᐃⵠⵠ[i * cf.ΔᐃⵠⵠΔⵠⵠ + g];
                if (k && k.ᐃⲆⲆ) {
                    if (Zw.loaded && Zw.ⲆⲆᐃᐃᐃ) {
                        Zw.ᐃⲆⲆ(b[5 + f * 4] & 1, ΔⲆᐃⲆⲆ[k.type], k.x, k.y);
                    }
                    k.ᐃⲆⲆ.angle = j;
                    k.ᐃⲆⲆ.ΔΔΔ = j;
                }
            }
        };
        this.ⵠΔⲆⵠΔⲆⵠᐃⲆ = function (b) {
            var c = new Uint16Array(b);
            for (var d = (c.length - 1) / 4, e = 0; e < d; e++) {
                var f;
                var i = e * 4;
                var j = c[1 + i];
                var m = c[2 + i];
                var p = (c[3 + i] >> 1) / 127 * Math.PI * 2;
                var q = c[4 + i];
                var t = Uw.ⲆⵠⵠⲆ[m][j];
                switch (q) {
                    case 0:
                        (f = t.p[0][0]).angle = p;
                        f.ΔΔΔ = k;
                        break;
                    case 1:
                        (f = t.s[0][0]).angle = p;
                        f.ΔΔΔ = Ik;
                        break;
                    case 2:
                        (f = t.s[1][0]).angle = p;
                        f.ΔΔΔ = Kh;
                        break;
                    case 3:
                        (f = t.s[2][0]).angle = p;
                        f.ΔΔΔ = Yq;
                        break;
                    case 4:
                        (f = t.t[0][0]).angle = p;
                        f.ΔΔΔ = k;
                        break;
                    case 5:
                        (f = t.t[1][0]).angle = p;
                        f.ΔΔΔ = ii;
                        break;
                    case 6:
                        (f = t.t[2][0]).angle = p;
                        f.ΔΔΔ = ss;
                        break;
                    case 7:
                        (f = t.t[3][0]).angle = p;
                        f.ΔΔΔ = sn;
                        break;
                    case 8:
                        (f = t.t[4][0]).angle = p;
                        f.ΔΔΔ = true;
                        break;
                    case 9:
                        (f = t.t[5][0]).angle = p;
                        f.ΔΔΔ = true;
                        break;
                    case 10:
                        (f = t.g[0][0]).angle = p;
                        f.ΔΔΔ = true;
                        break;
                    case 11:
                        (f = t.g[1][0]).angle = p;
                        f.ΔΔΔ = kk;
                        break;
                    case 12:
                        (f = t.g[2][0]).angle = p;
                        f.ΔΔΔ = true;
                        break;
                    case 13:
                        (f = t.d[0][0]).angle = p;
                        f.ΔΔΔ = true;
                        break;
                    case 14:
                        (f = t.d[1][0]).angle = p;
                        f.ΔΔΔ = true;
                        break;
                    case 15:
                        (f = t.d[2][0]).angle = p;
                        f.ΔΔΔ = true;
                        break;
                    case 16:
                        (f = t.b[0][0]).angle = p;
                        f.ΔΔΔ = true;
                        break;
                    case 17:
                        (f = t.b[1][0]).angle = p;
                        f.ΔΔΔ = true;
                        break;
                    case 18:
                        (f = t.b[2][0]).angle = p;
                        f.ΔΔΔ = Po;
                        break;
                    case 19:
                        (f = t.b[3][0]).angle = p;
                        f.ΔΔΔ = true;
                        break;
                    case 20:
                        (f = t.f[0][0]).angle = p;
                        f.ΔΔΔ = kk;
                        break;
                    case 21:
                        (f = t.f[1][0]).angle = p;
                        f.ΔΔΔ = true;
                        break;
                    case 22:
                        (f = t.f[2][0]).angle = p;
                        f.ΔΔΔ = true;
                        break;
                    case 23:
                        (f = t.sw[0][0]).angle = p;
                        f.ΔΔΔ = true;
                        break;
                    case 24:
                        (f = t.sw[1][0]).angle = p;
                        f.ΔΔΔ = ss;
                        break;
                    case 25:
                        (f = t.sw[2][0]).angle = p;
                        f.ΔΔΔ = true;
                        break;
                    case 26:
                        (f = t.gw[0][0]).angle = p;
                        f.ΔΔΔ = k;
                        break;
                    case 27:
                        (f = t.gw[1][0]).angle = p;
                        f.ΔΔΔ = true;
                        break;
                    case 28:
                        (f = t.gw[2][0]).angle = p;
                        f.ΔΔΔ = vh;
                        break;
                    case 29:
                        (f = t.dw[0][0]).angle = p;
                        f.ΔΔΔ = Po;
                        break;
                    case 30:
                        (f = t.dw[1][0]).angle = p;
                        f.ΔΔΔ = wr;
                        break;
                    case 31:
                        (f = t.dw[2][0]).angle = p;
                        f.ΔΔΔ = true;
                        break;
                    case 32:
                        (f = t.a[0][0]).angle = p;
                        f.ΔΔΔ = true;
                        break;
                    case 33:
                        (f = t.a[1][0]).angle = p;
                        f.ΔΔΔ = oq;
                        break;
                    case 34:
                        (f = t.a[2][0]).angle = p;
                        f.ΔΔΔ = true;
                        break;
                    case 35:
                        (f = t.cs[0][0]).angle = p;
                        f.ΔΔΔ = Bj;
                        break;
                    case 36:
                        (f = t.cs[1][0]).angle = p;
                        f.ΔΔΔ = Uq;
                        break;
                    case 37:
                        (f = t.cs[2][0]).angle = p;
                        f.ΔΔΔ = true;
                        break;
                    case 38:
                        (f = t.cs[3][0]).angle = p;
                        f.ΔΔΔ = ss;
                        break;
                    case 40:
                        (f = t.plm[0][0]).angle = p;
                        f.ΔΔΔ = Kh;
                        break;
                    case 41:
                        (f = t.plm[1][0]).angle = p;
                        f.ΔΔΔ = oq;
                        break;
                    case 42:
                        (f = t.plm[2][0]).angle = p;
                        f.ΔΔΔ = true;
                        break;
                    case 50:
                        (f = t.re[0][0]).angle = p;
                        f.ΔΔΔ = Zj;
                        break;
                    case 51:
                        (f = t.re[1][0]).angle = p;
                        f.ΔΔΔ = true;
                        break;
                    case 52:
                        (f = t.re[2][0]).angle = p;
                        f.ΔΔΔ = Ik;
                        break;
                    case 55:
                        (f = t.c[0][0]).angle = p;
                        f.ΔΔΔ = true;
                        break;
                    case 56:
                        (f = t.m[0][0]).angle = p;
                        f.ΔΔΔ = Ya;
                        break;
                    case 57:
                        (f = t.m[1][0]).angle = p;
                        f.ΔΔΔ = true;
                        break;
                    case 58:
                        (f = t.m[2][0]).angle = p;
                        f.ΔΔΔ = true;
                }
                if (Zw.loaded && Zw.ⲆⲆᐃᐃᐃ && f) {
                    Zw.ᐃⲆⲆ(c[3 + i] & 1, ΔΔⵠⵠ[q], f.x, f.y);
                }
            }
        };
        this.ᐃⵠⵠΔᐃ = function () {
            this.ⵠⵠᐃΔ[_v](Oo[Do].stringify([2, Ww.ᐃⵠⵠΔᐃ.ⲆⲆΔⲆ, Ww.ᐃⵠⵠΔᐃ.ⵠⲆⵠⵠⲆ]));
        };
        this.ⵠⲆⲆΔᐃᐃⵠΔⵠ = function (a, b) {
            this.ⵠⵠᐃΔ[_v](Oo[ia].stringify([37, b, a.ⲆⲆΔⲆ, a.ⵠⲆⵠⵠⲆ]));
        };
        this.ⲆⲆΔᐃᐃΔᐃ = function (a, b, c) {
            if (b) {
                this.ⵠⵠᐃΔ[_v](Oo[ia].stringify([5, b, a.ⲆⲆΔⲆ, a.ⵠⲆⵠⵠⲆ]));
            } else {
                this.ⵠⵠᐃΔ[_v](Oo[Ho].stringify([4, c, a.ⲆⲆΔⲆ, a.ⵠⲆⵠⵠⲆ]));
            }
        };
        this.ⲆΔΔΔⵠⵠΔΔⲆ = function (a) {
            this.ⵠⵠᐃΔ[_v](ha[da].stringify([25, a.ⲆⲆΔⲆ, a.ⵠⲆⵠⵠⲆ]));
        };
        this.ⲆΔⵠᐃΔΔⲆⲆⲆ = function (a) {
            this.ⵠⵠᐃΔ[_v](ha[ya].stringify([19, a]));
        };
        this.ⲆᐃΔᐃΔΔⲆⲆⲆ = function (a) {
            this.ⵠⵠᐃΔ[_v](oa[Do].stringify([36, a.ⲆⲆΔⲆ, a.ⵠⲆⵠⵠⲆ]));
        };
        this.ⲆᐃΔᐃⵠⲆΔᐃᐃ = function (a, b) {
            this.ⵠⵠᐃΔ[_v](Zo[da].stringify([9, b, a.ⲆⲆΔⲆ, a.ⵠⲆⵠⵠⲆ, a.type]));
        };
        this.ΔⵠᐃⲆⲆΔⲆⵠⵠ = function (a, b) {
            this.ⵠⵠᐃΔ[_v](Zo[da].stringify([35, b, a.ⲆⲆΔⲆ, a.ⵠⲆⵠⵠⲆ]));
        };
        this.ⲆΔⲆⲆⲆⲆⵠⲆΔ = function (a, b, c) {
            this.ⵠⵠᐃΔ[_v](oa[ia].stringify([13, b, c, a.ⲆⲆΔⲆ, a.ⵠⲆⵠⵠⲆ]));
        };
        this.ⵠⵠΔⲆⵠᐃᐃ = function (a) {
            this.ⵠⵠᐃΔ[_v](ha[da].stringify([26, a.ⲆⲆΔⲆ, a.ⵠⲆⵠⵠⲆ, a.type]));
        };
        this.ⲆⵠᐃⲆᐃᐃΔⵠᐃ = function (a) {
            this.ⵠⵠᐃΔ[_v](ha[da].stringify([7, a.ⲆⲆΔⲆ, a.ⵠⲆⵠⵠⲆ]));
        };
        this.ΔΔⵠⲆᐃⲆᐃᐃΔ = function (a) {
            this.ⵠⵠᐃΔ[_v](ha[da].stringify([18, a.ⲆⲆΔⲆ, a.ⵠⲆⵠⵠⲆ]));
        };
        this.ⵠΔᐃΔᐃⵠΔᐃᐃ = function (a) {
            this.ⵠⵠᐃΔ[_v](Aq[xq].stringify([15, a.ⲆⲆΔⲆ, a.ⵠⲆⵠⵠⲆ]));
        };
        this.ⲆⲆΔᐃΔΔᐃⵠⲆ = function (a) {
            this.ⵠⵠᐃΔ[_v](fa[pa].stringify([8, a.ⵠⲆⵠⵠⲆ]));
        };
        this.ⲆⵠⵠΔⲆⲆⲆ = function (a) {
            c.ⵠⵠᐃΔ[_v](Pa[ya].stringify([32, Ww.ᐃⵠᐃⵠⵠ.id, Ww.ᐃᐃⲆᐃⲆ[a]]));
        };
        this.ⵠⲆⲆⵠⲆⲆⲆⲆⵠ = function () {
            c.ⵠⵠᐃΔ[_v](Eq[xa].stringify([21, Ww.ᐃⵠᐃⵠⵠ.ⲆⲆΔⲆ, Ww.ᐃⵠᐃⵠⵠ.id]));
        };
        this.ⲆⵠᐃⲆⲆᐃᐃ = function () {
            c.ⵠⵠᐃΔ[_v](Fa[Dq].stringify([11]));
        };
        this.ⵠᐃΔᐃΔᐃⲆⲆⵠ = function () {
            c.ⵠⵠᐃΔ[_v](Fa[ya].stringify([6, Ww.ᐃⵠᐃⵠⵠ.id]));
            if (document.getElementById("lock_team").innerHTML == "LOCK") {
                Ww.ᐃⵠᐃⵠⵠ.lock = 1;
                document.getElementById("lock_team").innerHTML = "UNLOCK";
            } else {
                Ww.ᐃⵠᐃⵠⵠ.lock = 0;
                document.getElementById("lock_team").innerHTML = "LOCK";
            }
        };
        this.ⵠΔⲆ = function (j, e, i) {
            var k = new Uint16Array(j);
            if (i) {
                cf.ᐃⲆᐃᐃΔⲆⲆᐃⲆ();
            }
            for (var n = (e.length - 2) / 18, o = 0; o < n; o++) {
                var q = 2 + o * 18;
                var t = 1 + o * 9;
                var w = e[q];
                var x = k[t + 1];
                var y = k[t + 5];
                var z = w * cf.ΔᐃⵠⵠΔⵠⵠ + y;
                if (x & 1) {
                    cf.ΔⵠΔᐃⵠⲆⲆⲆΔ(z);
                } else {
                    var A = k[t + 2];
                    var B = k[t + 3];
                    var D = k[t + 4];
                    var E = k[t + 6];
                    var F = k[t + 7];
                    var G = k[t + 8];
                    var H = Math.PI * (e[q + 1] / 255) * 2;
                    if (cf.ᐃⲆᐃⵠⵠ[z]) {
                        var I = cf.ᐃⲆᐃⵠⵠ[z];
                        I.r.x = B;
                        I.r.y = D;
                        if (w != 0 && ⲆⵠΔᐃ.ⲆᐃⲆΔ(I, I.r) > 200) {
                            I.x = B;
                            I.y = D;
                        }
                        if (I.id !== Ww.id || w === 0) {
                            I.ΔᐃⵠΔⲆⲆΔ = H;
                        }
                        I.action |= x;
                        I.info = E;
                        I.ⵠᐃⲆᐃⲆ = F;
                        I.ᐃᐃⵠΔⲆ = G;
                        if (I.ΔΔΔ) {
                            I.ΔΔΔ(x);
                        }
                    } else {
                        var J = new rw(A, w, y, B, D, H, x, E, F, G);
                        cf.ᐃⲆᐃⵠⵠ[z] = J;
                        cf.ⵠΔⲆ[A].push(J);
                    }
                }
            }
        };
        this.ΔΔΔⲆ = function (a) {
            this.ⵠΔⲆⵠⵠⲆᐃ = wf;
            var b = new Uint16Array(a);
            Ww.ⵠΔⵠⲆΔ.ⵠΔⲆΔᐃ(b);
        };
        this.ᐃΔⵠᐃΔᐃᐃᐃᐃ = function (a) {
            if (_g !== undefined) {
                Ls = _g;
            }
            if (a.length > 0) {
                _g = JSON.parse(JSON.stringify(Ls));
                for (var b = 0; a.length > b; b++) {
                    var c = a[b];
                    var d = Ls[c.item];
                    if (d !== undefined) {
                        d.r = c.recipe;
                        d.w = c.workbench;
                        d.f = c.fire;
                        d.ⲆⲆⲆ = c.water;
                        d.e = c.well;
                        d.time = 1 / c.time;
                    }
                }
            }
        };
        this.ⵠⲆᐃⵠⵠᐃΔ = function (a) {
            if (a && a.length !== 0) {
                Ww.ⵠⲆᐃⵠⵠᐃΔ.message = function (b) {
                    var c = document.createElement("canvas");
                    var d = c.getContext("2d");
                    for (d.lineJoin = "round"; b.indexOf("\\n") !== -1;) {
                        b = b.replace("\\n", "\n");
                    }
                    b = b.split("\n");
                    Δⵠ = [];
                    var f = b.length * 18 + 10;
                    var g = 0;
                    d.font = 14 + "px Baloo Paaji";
                    for (var h = 0; b.length > h; h++) {
                        if (b[h].charAt(0) === "#") {
                            Δⵠ[h] = b[h].substring(0, 7);
                            b[h] = b[h].substring(8);
                        } else {
                            Δⵠ[h] = "#FFFFFF";
                        }
                        g = Math.max(d.measureText(b[h]).width + 16, g);
                    }
                    c.height = f;
                    c.width = g;
                    h = 0;
                    for (; b.length > h; h++) {
                        var i = Yd(1, b[h], 14, Δⵠ[h], null, null, null, null, null, "#000", 6);
                        d.drawImage(i, 8, h * 18 + 5);
                    }
                    return c;
                }(a);
            } else {
                Ww.ⵠⲆᐃⵠⵠᐃΔ.message = undefined;
            }
        };
        this.Δⵠⵠⵠᐃ = function (a) {
            var b = cf.ᐃⲆᐃⵠⵠ[a[1] * cf.ΔᐃⵠⵠΔⵠⵠ];
            if (b) {
                if (cf.mode === 2 && b.ᐃΔΔⵠ === 0) {
                    if (Ww.ⵠⵠΔⲆⲆ) {
                        if (Math.random() > 0.5) {
                            b.text.push(a[2] + " ..." + ΔⵠΔΔΔ);
                        } else {
                            b.text.push(ΔⵠΔΔΔ + "... " + a[2]);
                        }
                    } else {
                        b.text.push(ⵠⲆⵠⵠⵠΔⲆ[Math.floor(Math.random() * ⵠⲆⵠⵠⵠΔⲆ.length)]);
                    }
                } else {
                    b.text.push(a[2]);
                }
            }
        };
        this.ᐃᐃᐃᐃΔΔⵠⵠᐃ = function (a) {
            if (Ww.ᐃΔⵠΔ.ᐃΔΔᐃΔ.length !== Ww.ᐃΔⵠΔ.max || Ls[a].ⵠΔⲆΔ === 29 || Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(Ls[a].ⵠΔⲆΔ) != -1 || Ww.ᐃΔⵠΔ.ᐃⲆΔⲆΔⵠΔⲆᐃ(Ls[a].r)) {
                this.ⵠⵠᐃΔ[_v](pq[qq].stringify([1, a]));
                return 1;
            } else {
                this.ᐃⵠⵠΔᐃⲆⵠ();
                return 0;
            }
        };
        this.ⵠΔᐃᐃⵠ = function (a) {
            Ww.ΔΔⵠᐃ.ᐃⲆᐃⲆⵠᐃᐃⲆΔ(a);
        };
        this.ⵠΔᐃᐃᐃ = function (a) {
            Ww.ΔΔⵠᐃ.ⵠΔᐃᐃᐃ = a;
            Ww.ΔΔⵠᐃ.ΔΔΔ();
        };
        this.ⲆΔᐃΔᐃ = function (a) {
            Ww.ΔΔⵠᐃ.ⲆΔᐃΔᐃ = a;
            Ww.ΔΔⵠᐃ.ΔΔΔ();
        };
        this.ᐃΔΔⵠΔᐃᐃ = function (a) {
            Ww.ΔΔⵠᐃ.ᐃΔΔⵠΔᐃᐃ = a;
            Ww.ΔΔⵠᐃ.ΔΔΔ();
        };
        this.ᐃⲆΔⲆΔΔⵠᐃᐃ = function (a) {
            this.ΔⵠⲆⵠⲆ(lt[315]);
        };
        this.ᐃⵠᐃᐃⲆΔⵠⲆᐃ = function () {
            Ww.ΔΔⵠᐃ.ΔᐃⲆᐃⵠΔΔ();
        };
        this.ᐃΔⵠⲆΔ = function (a) {
            Yw.ᐃΔⵠⲆΔ.ⲆⲆⵠΔ = [];
            var b = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ];
            var c = 0;
            for (var d = 1; a.length > d; d += 2) {
                var e = {
                    x: Math.floor(a[d] * cf.w / 250),
                    y: Math.floor(a[d + 1] * cf.ⵠⲆᐃ / 250)
                };
                if (b && !c && !Ww.ⵠⲆᐃⵠⵠᐃᐃ && ⲆⵠΔᐃ.ⲆᐃⲆΔ(e, b) < 250) {
                    c += 1;
                } else {
                    Yw.ᐃΔⵠⲆΔ.ⲆⲆⵠΔ.push(e);
                }
            }
        };
        this.ⲆᐃΔᐃⵠΔᐃⲆⵠ = function () {
            Ww.ᐃⵠⵠΔᐃ.open = false;
            Ww.ⲆᐃΔᐃᐃ.enabled = og;
            Ww.ⲆᐃΔᐃᐃ.ᐃⵠⵠⵠⲆ = -1;
            Ww.ⲆᐃΔᐃᐃ.label = null;
            Ww.ⲆᐃΔᐃᐃ.ⵠⲆⵠΔΔⲆⲆ = null;
            Ww.ⲆᐃΔᐃᐃ.now = -1;
        };
        this.ⲆᐃΔᐃᐃ = function (a) {
            mw.ΔᐃΔⲆⲆΔᐃ = a;
            Ww.ⲆᐃΔᐃᐃ.enabled = Bj;
            Ww.ⲆᐃΔᐃᐃ.ᐃⵠⵠⵠⲆ = new Date().getTime();
            Ww.ⲆᐃΔᐃᐃ.label = null;
            Ww.ⲆᐃΔᐃᐃ.now = -1;
            for (var b = [45, 149, 57, 0, 5, 6, 30, 19, 62, 63, 9, 13, 12, 14, 15, 33, 34, 16, 17, 18, 94, 95, 96, 97, 98, 99, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 92, 93, 8, 1, 3, 4, 31, 32, 55, 53, 54], c = 0; c < b.length; c++) {
                var d = Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(b[c]);
                if (d != -1) {
                    Ww.ᐃΔⵠΔ.ᐃⲆΔⲆⵠΔᐃ(b.length[c], d);
                }
            }
            Ww.ΔΔⵠᐃ.ΔᐃⲆᐃⵠΔΔ();
        };
        this.ⲆᐃⲆⲆⵠⲆΔⵠⲆ = function (a, b, c) {
            this.ⵠᐃᐃⲆᐃᐃⲆ(a, b * 256 + c);
        };
        this.ⵠᐃᐃⲆᐃᐃⲆ = function (a, b) {
            Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ = -1;
            Ww.ᐃΔⵠΔ.ⵠⲆᐃᐃⲆᐃⵠ(a, b, Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(a));
            Ww.ΔΔⵠᐃ.ΔΔΔ();
        };
        this.ᐃⵠⵠᐃᐃⲆⲆΔⵠ = function (a) {
            Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ = -1;
            Ww.ᐃΔᐃⲆⲆ.wait = true;
            var b = Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(a);
            Ww.ᐃΔⵠΔ.ⵠⲆᐃᐃⲆᐃⵠ(a, 1, b);
            if (b >= 0 && !Ww.ᐃΔⵠΔ.ΔᐃⲆ[a]) {
                Ww.ΔΔⵠᐃ.ΔΔΔ();
            }
            if (a == 159) {
                Ww.ᐃᐃⲆᐃⲆ = [Ww.id];
            }
        };
        this.ⲆⵠⲆⵠΔⵠᐃᐃᐃ = function () {
            this.ⵠⵠᐃΔ[_v](Oo[Do].stringify([12]));
        };
        this.ⲆΔᐃᐃᐃⲆⲆᐃⲆ = function (a) {
            this.ⵠⵠᐃΔ[_v](Zo[Ho].stringify([16, a.ᐃⵠⲆⵠⵠ, a.id]));
        };
        this.ᐃⲆΔΔΔⲆⲆⲆⵠ = function (a, b) {
            this.ⵠⵠᐃΔ[_v](Zo[da].stringify([14, a, b]));
        };
        this.ΔᐃⵠΔⵠᐃⵠⲆΔ = function () {
            var a = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ];
            if (a) {
                var b = Math.PI * 2;
                this.ⵠⵠᐃΔ[_v](Zo[Ho].stringify([23, Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ, Math.floor((a.angle + b) % b * 255 / b), Ww.ΔΔⵠᐃ.mode]));
            }
        };
        this.Ⲇᐃⵠᐃⵠ = function (a, b) {
            switch (a) {
                case 195:
                case 110:
                case 116:
                case 117:
                case 145:
                case 127:
                case 133:
                case 136:
                case 142:
                case 143:
                case 189:
                case 207:
                case 233:
                case 205:
                case 209:
                case 211:
                case 192:
                case 137:
                case 138:
                case 196:
                case 197:
                case 200:
                case 199:
                    Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ = -1;
                    this.ⵠⵠᐃΔ[_v](oa[ia].stringify([22, a]));
                    break;
                case 114:
                case 160:
                case 115:
                case 132:
                case 188:
                case 206:
                case 204:
                case 191:
                case 193:
                case 208:
                case 210:
                case 113:
                case 162:
                case 163:
                case 164:
                case 165:
                case 118:
                case 167:
                case 151:
                case 152:
                case 166:
                case 171:
                case 172:
                case 173:
                case 124:
                case 218:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 220:
                case 168:
                case 169:
                case 170:
                case 119:
                case 122:
                case 123:
                case 217:
                case 219:
                case 125:
                case 190:
                case 141:
                case 135:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 198:
                case 201:
                case 182:
                case 183:
                case 144:
                case 159:
                case 221:
                    if (!Ww.ⵠⵠΔⲆⲆ) {
                        if (Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ === a) {
                            Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ = -1;
                        } else {
                            Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ = a;
                        }
                    }
                    break;
                case 0:
                case 57:
                case 5:
                case 6:
                case 30:
                case 19:
                case 9:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 92:
                case 93:
                case 12:
                case 13:
                case 14:
                case 15:
                case 33:
                case Lr.ᐃᐃΔΔᐃΔⲆⲆΔ:
                case 16:
                case 17:
                case 34:
                case 18:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                    if (!Ww.ⵠⵠΔⲆⲆ) {
                        Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ = -1;
                        if ((c = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ]) && c.right === a) {
                            this.ⵠⵠᐃΔ[_v](ha[da].stringify([22, 7]));
                        } else {
                            Ww.ᐃⵠΔΔᐃ.wait = true;
                            this.ⵠⵠᐃΔ[_v](Aq[xq].stringify([22, a]));
                        }
                    }
                    break;
                case 1:
                case 8:
                case 3:
                case 4:
                case 35:
                case 36:
                case 37:
                case 28:
                case 38:
                case 39:
                case 31:
                case 32:
                case 45:
                case 46:
                case 50:
                case 51:
                case 52:
                case 55:
                case 56:
                case 53:
                case 54:
                case 89:
                case 49:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                    if (!Ww.ⵠⵠΔⲆⲆ) {
                        Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ = -1;
                        if ((c = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ]) && c.right === a) {
                            this.ⵠⵠᐃΔ[_v](fa[pa].stringify([22, 7]));
                        } else {
                            this.ⵠⵠᐃΔ[_v](Pa[ya].stringify([22, a]));
                        }
                    }
                    break;
                case 223:
                case 224:
                case 225:
                case 239:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 91:
                    if (!Ww.ⵠⵠΔⲆⲆ) {
                        Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ = -1;
                        var c = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ];
                        this.ⵠⵠᐃΔ[_v](Pa[ya].stringify([22, a]));
                    }
                    break;
                case 77:
                case 78:
                case 79:
                case 58:
                case 25:
                case 26:
                case 27:
                case 43:
                case 44:
                case 20:
                case 21:
                case 22:
                case 59:
                case 60:
                case 90:
                case 61:
                case 47:
                    if ((c = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ]) && a !== c.ᐃⵠⲆⵠⲆ) {
                        Ww.ᐃΔΔⵠᐃ.wait = true;
                    }
                    this.ⵠⵠᐃΔ[_v](oa[da].stringify([22, a]));
                    break;
                case 10:
                case 83:
                case 84:
                case 86:
                case 11:
                case 40:
                case 88:
                case 82:
                case 80:
                case 81:
                case 41:
                case 42:
                case 85:
                case 23:
                case 24:
                case 48:
                    this.ⵠⵠᐃΔ[_v](Eq[xa].stringify([22, a]));
            }
        };
        this.ΔᐃᐃⲆⲆᐃΔⵠⲆ = function (a) {
            this.ⵠⵠᐃΔ[_v](Zo[qq].stringify([30, a]));
        };
        this.ⲆⵠⲆΔΔⲆᐃᐃⲆ = function (a) {
            Ww.ᐃΔᐃⲆⲆ.wait = Zj;
            var b = Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(a);
            Ww.ᐃΔⵠΔ.ᐃⲆΔⲆⵠΔᐃ(a, b);
            Ww.ΔΔⵠᐃ.ΔΔΔ();
        };
        this.ⵠⲆᐃⲆⵠⲆⲆᐃⵠ = function (a, b) {
            this.ⵠⵠᐃΔ[_v](pq[pa].stringify([28, a]));
        };
        this.ΔᐃⵠᐃᐃⲆΔᐃΔ = function (a, b) {
            this.ⵠⵠᐃΔ[_v](Oo[Do].stringify([20, a]));
        };
        this.ⵠⵠⵠⵠΔΔΔⲆⵠ = function (a) {
            Ww.ᐃΔᐃⲆⲆ.wait = true;
            var b = Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(a);
            Ww.ᐃΔⵠΔ.ⵠⲆᐃᐃⲆᐃⵠ(a, 1, b);
            Ww.ΔΔⵠᐃ.ΔΔΔ();
        };
        this.ⲆΔΔᐃΔⲆⲆΔᐃ = function (a) {
            var b = a[1];
            var c = a[2];
            Ww.ᐃΔᐃⲆⲆ.wait = true;
            var d = Ww.ᐃΔⵠΔ.ᐃⲆⵠΔᐃ(b);
            Ww.ᐃΔⵠΔ.ⵠⲆᐃᐃⲆᐃⵠ(b, c, d);
            Ww.ΔΔⵠᐃ.ΔΔΔ();
        };
        this.ⲆΔⵠⲆᐃⲆᐃᐃⵠ = function () {
            this.ⵠⵠᐃΔ[_v](Oo[Do].stringify([38]));
        };
        this.ᐃⵠⵠᐃⵠⵠⵠᐃΔ = function (a) {
            var b = Math.PI * 2;
            this.ⵠⵠᐃΔ[_v](Zo[Ho].stringify([3, Math.floor((a + b) % b * 255 / b)]));
        };
        this.ⵠⵠⲆᐃᐃⲆΔⲆᐃ = function (a) {
            var b = Math.PI * 2;
            this.ⵠⵠᐃΔ[_v](Zo[Ho].stringify([29, Math.floor((a + b) % b * 255 / b)]));
        };
        this.ⵠᐃΔⲆΔΔᐃΔᐃ = function (a) {
            this.ⵠⵠᐃΔ[_v](ᐃᐃΔᐃⲆⲆⲆ[sq].stringify([31, a]));
        };
        this.ⵠⲆⵠᐃⵠᐃⵠⵠⲆ = function (a) {
            this.ⵠⵠᐃΔ[_v](ha[da].stringify([10, a]));
        };
        this.ⵠᐃⵠΔⵠᐃⲆΔⲆ = function (a) {
            var b = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ];
            if (Ww.ⵠⵠΔⲆⲆ) {
                if (Math.random() > 0.5) {
                    b.text.push(a.substring(0, 25) + " ..." + ΔⵠΔΔΔ);
                } else {
                    b.text.push(ΔⵠΔΔΔ + "... " + a.substring(0, 25));
                }
            } else {
                b.text.push(a);
            }
            this.ⵠⵠᐃΔ[_v](ha[da].stringify([17, a]));
        };
        this.ΔΔᐃᐃⵠ = function (a) {
            var b = ⵠΔⵠΔ.select.ⵠΔⲆ;
            if (b.length != 0) {
                var c = [31];
                var d = [];
                ⲆⵠΔᐃ.ⵠΔᐃᐃⵠΔΔ(a, {
                    x: ⵠΔⵠΔ.ᐃⲆΔ.rx,
                    y: ⵠΔⵠΔ.ᐃⲆΔ.ry
                });
                c.push(a.x);
                c.push(a.y);
                for (var e = 0; b.length > e; e++) {
                    d.push(b[e].ΔΔᐃⲆⲆⵠΔΔⲆ);
                }
                c.push(d);
                this.ⵠⵠᐃΔ[_v](Aq[xq].stringify(c));
            }
        };
        this.ᐃⵠⲆⵠⵠⵠᐃ = 0;
        this.ᐃⵠΔᐃᐃⲆⵠ = {
            ᐃᐃ: 0,
            ΔⵠⲆᐃ: 0
        };
        this.ᐃᐃΔⵠΔⲆⲆΔᐃ = function () {
            if (wf - this.ᐃⵠⲆⵠⵠⵠᐃ > 50) {
                this.ᐃⵠⲆⵠⵠⵠᐃ = wf;
                var a = Ww.ᐃⲆΔ;
                var b = Math.floor(a.x / 100);
                var c = Math.floor(a.y / 100);
                if (this.ᐃⵠΔᐃᐃⲆⵠ.ᐃᐃ != b || this.ᐃⵠΔᐃᐃⲆⵠ.ΔⵠⲆᐃ != c) {
                    this.ⵠⵠᐃΔ[_v](Pa[pa].stringify([0, Math.floor(-a.x), Math.floor(-a.y)]));
                    this.ᐃⵠΔᐃᐃⲆⵠ.ᐃᐃ = b;
                    this.ᐃⵠΔᐃᐃⲆⵠ.ΔⵠⲆᐃ = c;
                }
            }
        };
        this.ᐃⵠΔΔⵠᐃⵠ = 0;
        this.ⵠⲆΔΔΔᐃⲆᐃⵠ = function () {
            if (wf - this.ᐃⵠΔΔⵠᐃⵠ > 60000) {
                this.ᐃⵠΔΔⵠᐃⵠ = wf;
                this.ping();
            }
        };
        this.ΔΔⵠᐃᐃⲆⲆⵠⲆ = function () {
            Ww.reconnect.enabled = true;
            if (this.ⵠⵠᐃΔ.ΔⵠⲆⲆⲆ == this.ΔⵠⲆⲆⲆ) {
                this.ΔⵠⲆⲆⲆ++;
                this.ⵠⵠᐃΔ.close();
                Δⵠᐃⵠ.connect();
            }
        };
        this.ⲆᐃΔⲆΔᐃⵠⲆᐃ = function (a) {
            this.ΔⵠⲆⵠⲆ(lt[316]);
            for (var b = 1; b < a.length; b++) {
                Ww.ᐃᐃⲆᐃⲆ.push(a[b]);
            }
        };
        this.ᐃΔⲆᐃⲆⵠⲆⵠΔ = function (a) {
            this.ΔⵠⲆⵠⲆ(cf.ⲆⲆⵠΔ[a].ⲆⵠΔΔⲆ + lt[318]);
            Ww.ᐃᐃⲆᐃⲆ.push(a);
            var b = document.getElementById("team_box");
            if (Yw.ᐃⵠΔⲆⲆ != -1 && b.style.display == "inline-block") {
                Yw.ᐃΔⵠⲆᐃ[Yw.ᐃⵠΔⲆⲆ].action();
            }
        };
        this.ⵠⵠΔⲆⲆⲆⲆⵠⲆ = function () {
            this.ΔⵠⲆⵠⲆ(lt[319]);
            Ww.ᐃⵠᐃⵠⵠ.wait = wr;
            Ww.ᐃᐃⲆᐃⲆ = [];
            document.getElementById("team_box").style.display = "none";
        };
        this.ⵠⲆᐃΔⵠⲆΔⲆⲆ = function (a) {
            if (a == Ww.id) {
                this.ΔⵠⲆⵠⲆ(lt[320]);
                Ww.ᐃⵠᐃⵠⵠ.wait = wr;
                Ww.ᐃᐃⲆᐃⲆ = [];
                document.getElementById("team_box").style.display = "none";
            } else {
                this.ΔⵠⲆⵠⲆ(cf.ⲆⲆⵠΔ[a].ⲆⵠΔΔⲆ + lt[321]);
                for (var b = 0; b < Ww.ᐃᐃⲆᐃⲆ.length; b++) {
                    if (a == Ww.ᐃᐃⲆᐃⲆ[b]) {
                        Ww.ᐃᐃⲆᐃⲆ.splice(b, 1);
                        break;
                    }
                }
                var c = document.getElementById("team_box");
                if (Yw.ᐃⵠΔⲆⲆ != -1 && c.style.display == "inline-block") {
                    Yw.ᐃΔⵠⲆᐃ[Yw.ᐃⵠΔⲆⲆ].action();
                }
            }
        };
        this.ᐃⲆⲆᐃⲆⲆⲆⲆᐃ = function (a) {
            Ww.ΔᐃᐃⲆΔ = fr;
            this.ΔⵠⲆⵠⲆ(lt[322]);
            if (this.ⵠⵠᐃΔ.ΔⵠⲆⲆⲆ == this.ΔⵠⲆⲆⲆ) {
                this.ΔⵠⲆⲆⲆ++;
                Yw.ΔⵠᐃⵠⲆ(df.ⲆⲆᐃᐃᐃ);
                this.ⵠⵠᐃΔ.close();
            }
        };
        this.ᐃⵠΔⲆⲆΔΔΔⲆ = function (a, b) {
            Ww.ΔᐃᐃⲆΔ = Lo;
            var c = new Uint16Array(b);
            var d = new Uint32Array(b);
            Ww.ⲆᐃᐃᐃⵠᐃⲆ.ΔΔᐃᐃΔⵠΔ = nt[a][Math.floor(Math.random() * nt[a].length)];
            Ww.ⲆᐃᐃᐃⵠᐃⲆ.ⵠΔΔᐃᐃ = ⲆⵠΔᐃ.ᐃⲆΔⲆΔᐃⵠ(cf.ⲆⲆⵠΔ[Ww.id].ⵠΔΔᐃᐃ);
            Ww.ⲆᐃᐃᐃⵠᐃⲆ.ΔⲆⲆΔΔΔΔ = ⲆⵠΔᐃ.ᐃⲆΔⲆΔᐃⵠ(d[1]);
            Ww.ⲆᐃᐃᐃⵠᐃⲆ.ΔΔΔᐃᐃ = c[1];
            this.ΔⵠⲆⵠⲆ(lt[317]);
            if (this.ΔⵠⲆⲆⲆ == this.ⵠⵠᐃΔ.ΔⵠⲆⲆⲆ) {
                this.ΔⵠⲆⲆⲆ++;
                Yw.ΔⵠᐃⵠⲆ(Xw.ⲆⲆᐃᐃᐃ);
                this.ⵠⵠᐃΔ.close();
                try {
                    aj.Widget.adsRefresh();
                } catch (a) { }
            }
            Settings.AutoSpike.e = false
        };
        this.ping = function () {
            this.ⵠⵠᐃΔ[_v]("[34]");
        };
        this.ⵠⵠᐃΔᐃⲆᐃᐃⲆ = function () {
            if (this.ⵠⵠᐃΔ.readyState == 3) {
                this.ⵠΔⲆⵠⵠⲆᐃ -= 600000;
            }
        };
        this.ΔΔⲆⵠⲆΔᐃΔⵠ = function () {
            if ($w > 5) {
                this.ⵠΔⲆⵠⵠⲆᐃ = wf;
            }
            if (wf - this.ⵠΔⲆⵠⵠⲆᐃ > 600000) {
                this.ⵠΔⲆⵠⵠⲆᐃ = wf;
                this.ΔΔⵠᐃᐃⲆⲆⵠⲆ();
            }
        };
        this.ⲆΔⲆⵠⲆᐃⵠᐃᐃ = function (b) {
            xf++;
            clearTimeout(this.ΔⲆᐃⵠᐃ);
            document.getElementById("commandMainBoxName").innerHTML = this.ᐃΔᐃⵠⵠ[this.ⵠⵠᐃΔⵠ][this.ᐃΔⲆΔΔⲆΔ[this.ⵠⵠᐃΔⵠ]].a;
            document.getElementById("exploreForest").src = "img/forest-leaf.png";
            document.getElementById("exploreWinter").src = "img/winter-flake.png";
            document.getElementById("exploreDesert").src = "img/desert-cactus.png";
            document.getElementById("exploreLava").src = "img/lava-volcano.png";
            this.ⵠΔⲆⵠⵠⲆᐃ = wf;
            Ww.ᐃⵠⲆⲆ.ⲆⵠᐃⲆᐃ.ⵠΔΔᐃⲆ = Ww.ᐃⵠⲆⲆ.ⲆⵠᐃⲆᐃ.ⵠⲆⲆᐃΔ;
            Ww.ᐃⵠⲆⲆ.ⵠᐃᐃΔᐃⲆᐃ.ⵠΔΔᐃⲆ = Ww.ᐃⵠⲆⲆ.ⵠᐃᐃΔᐃⲆᐃ.ⵠⲆⲆᐃΔ;
            Ww.ᐃⵠⲆⲆ.ⲆⵠᐃᐃᐃΔⲆ.ⵠΔΔᐃⲆ = Ww.ᐃⵠⲆⲆ.ⲆⵠᐃᐃᐃΔⲆ.ⵠⲆⲆᐃΔ;
            Ww.ᐃⵠⲆⲆ.ΔΔⵠⵠⲆⵠᐃ.ⵠΔΔᐃⲆ = Ww.ᐃⵠⲆⲆ.ΔΔⵠⵠⲆⵠᐃ.ⵠⲆⲆᐃΔ;
            Ww.ᐃⵠⲆⲆ.ᐃᐃᐃⲆⵠ.ⵠΔΔᐃⲆ = Ww.ᐃⵠⲆⲆ.ᐃᐃᐃⲆⵠ.ⵠⲆⲆᐃΔ;
            Ww.ᐃⵠⲆⲆ.ΔⵠΔⲆ = 1;
            Ww.ᐃⵠⲆⲆ.c = 1;
            Ww.ᐃⵠⲆⲆ.ⵠⲆᐃ = 1;
            Ww.ᐃⵠⲆⲆ.ⵠᐃᐃ = 1;
            Ww.ᐃⵠⲆⲆ.ⲆⲆⲆ = 1;
            Ww.ᐃⵠⲆⲆ.ⵠΔⵠᐃΔᐃⲆ = 1;
            Ww.ⵠⵠⲆΔⲆᐃᐃ = false;
            Yw.ⵠⲆᐃΔⲆ.display = 0;
            Ww.ᐃΔⵠΔ.ᐃΔΔᐃΔ = [];
            Ww.ᐃΔⵠΔ.ΔᐃⲆ = [];
            Ww.ᐃΔⵠΔ.max = 10;
            Ww.ᐃΔⵠΔ.ΔⲆⵠΔᐃⲆΔ = 0;
            Ww.ᐃΔⵠΔ.ΔᐃⲆⵠⲆ = 0;
            Ww.ᐃΔⵠΔ.id = -1;
            Yw.ᐃⲆⵠᐃⵠᐃⲆ = 1;
            Yw.ᐃᐃⲆⲆⵠᐃΔ = 1;
            Yw.ᐃⵠᐃᐃⲆΔΔ = 1;
            Yw.ⵠⵠΔⵠⲆΔⲆ = 1;
            Ww.ΔᐃᐃⲆΔ = Tl;
            Ww.ᐃΔⵠΔ.ⲆⲆⲆⵠⲆΔΔ.stop();
            Ww.ΔΔⵠᐃ.ⲆⵠⲆᐃΔ = [];
            Ww.ΔΔⵠᐃ.ᐃΔⲆⲆⲆ = Dk;
            Ww.ΔΔⵠᐃ.ⵠⵠΔⲆΔⵠⵠΔΔ = false;
            Ww.ΔΔⵠᐃ.ⲆᐃⲆⲆ = -1;
            Ww.ΔΔⵠᐃ.id = -1;
            Ww.ΔΔⵠᐃ.ⵠΔᐃᐃⵠ = X;
            Ww.ΔΔⵠᐃ.ⵠΔᐃᐃᐃ = Ia;
            Ww.ΔΔⵠᐃ.ⲆΔᐃΔᐃ = os;
            Ww.ΔΔⵠᐃ.ᐃΔΔⵠΔᐃᐃ = false;
            Ww.ΔΔⵠᐃ.timeout = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(as, 0, 1, 0, 1, 1);
            Ww.ᐃⵠΔΔᐃ.timeout = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0, 1, 0, 1 / 10, 1);
            Ww.ᐃⵠΔΔᐃ.wait = pl;
            Ww.ᐃΔΔⵠᐃ.timeout = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(false, 0, 1, 0, 1 / 5, 1);
            Ww.ᐃΔΔⵠᐃ.wait = Ij;
            Ww.ᐃΔᐃⲆⲆ.timeout = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(as, 0, 1, 0, 1, 1);
            Ww.ᐃΔᐃⲆⲆ.wait = false;
            Ww.ᐃⵠᐃⵠⵠ.id = -1;
            Ww.ᐃⵠᐃⵠⵠ.ⲆⲆΔⲆ = -1;
            Ww.ᐃⵠᐃⵠⵠ.wait = false;
            Ww.ᐃⵠᐃⵠⵠ.timeout = new ⲆⵠΔᐃ.ΔⲆᐃᐃ(Dk, 0, 1, 0, 1 / 30, 1);
            Yw.ᐃΔⵠⲆΔ.ⵠᐃΔΔⲆ.x = -1;
            Yw.ᐃΔⵠⲆΔ.ⵠᐃΔΔⲆ.y = -1;
            Yw.ΔᐃᐃΔ.open = og;
            Yw.ᐃΔⵠⲆΔ.ⲆⲆⵠΔ = [];
            Ww.ⲆⵠᐃⵠⲆ.enabled = ps;
            cf.mode = b[1];
            if (b[20] !== Xk && b[21] !== undefined) {
                cf.ΔΔΔΔⲆ = b[20];
                cf.ᐃⵠᐃⲆΔ = b[21];
                cf.w = cf.ⵠΔⵠΔᐃΔⵠ * cf.ΔΔΔΔⲆ;
                cf.ⵠⲆᐃ = cf.ΔᐃᐃⲆΔⵠⲆ * cf.ᐃⵠᐃⲆΔ;
            }
            cf.ⲆⵠⲆⵠᐃⲆⵠ = b[22];
            cf.ΔᐃΔⵠΔ = b[23];
            c.ⵠⲆᐃⵠⵠᐃΔ(b[24]);
            c.ᐃΔⵠᐃΔᐃᐃᐃᐃ(b[25]);
            Ww.ΔᐃᐃΔᐃ.ΔⵠᐃΔⵠ = b[26];
            Ww.ⵠⲆᐃᐃΔⲆⲆ = 0;
            Ww.ΔΔⲆᐃⲆ.ΔⵠᐃΔⵠ = b[27];
            cf.ⲆⲆᐃⵠⲆΔⵠⵠΔ(b[19]);
            cf.time = b[5];
            cf.ⵠΔΔⲆᐃ.ⵠⲆⲆⵠⲆ = b[15];
            cf.ⵠΔΔⲆᐃ.ⵠΔⲆΔᐃ = new Date().getTime();
            Yw.Ⲇᐃⵠⵠ.ᐃΔᐃⲆⵠᐃΔ = b[16];
            cf.transition = false;
            Ww.ᐃΔᐃ = b[2];
            Yw.Ⲇᐃⵠⵠ.reset();
            Ww.ᐃᐃⲆᐃⲆ = b[8];
            cf.ⵠΔⲆ[0] = [];
            cf.ⵠΔⲆ[100] = [];
            cf.ⵠΔⲆ[2] = [];
            cf.ⵠΔⲆ[1] = [];
            cf.ⵠΔⲆ[6] = [];
            cf.ⵠΔⲆ[3] = [];
            cf.ⵠΔⲆ[31] = [];
            cf.ⵠΔⲆ[37] = [];
            cf.ⵠΔⲆ[43] = [];
            cf.ⵠΔⲆ[44] = [];
            cf.ⵠΔⲆ[39] = [];
            cf.ⵠΔⲆ[40] = [];
            cf.ⵠΔⲆ[54] = [];
            cf.ⵠΔⲆ[55] = [];
            cf.ⵠΔⲆ[4] = [];
            cf.ⵠΔⲆ[7] = [];
            cf.ⵠΔⲆ[8] = [];
            cf.ⵠΔⲆ[9] = [];
            cf.ⵠΔⲆ[10] = [];
            cf.ⵠΔⲆ[15] = [];
            cf.ⵠΔⲆ[16] = [];
            cf.ⵠΔⲆ[17] = [];
            cf.ⵠΔⲆ[45] = [];
            cf.ⵠΔⲆ[46] = [];
            cf.ⵠΔⲆ[47] = [];
            cf.ⵠΔⲆ[48] = [];
            cf.ⵠΔⲆ[49] = [];
            cf.ⵠΔⲆ[53] = [];
            cf.ⵠΔⲆ[11] = [];
            cf.ⵠΔⲆ[22] = [];
            cf.ⵠΔⲆ[23] = [];
            cf.ⵠΔⲆ[5] = [];
            cf.ⵠΔⲆ[12] = [];
            cf.ⵠΔⲆ[13] = [];
            cf.ⵠΔⲆ[14] = [];
            cf.ⵠΔⲆ[60] = [];
            cf.ⵠΔⲆ[70] = [];
            cf.ⵠΔⲆ[71] = [];
            cf.ⵠΔⲆ[72] = [];
            cf.ⵠΔⲆ[73] = [];
            cf.ⵠΔⲆ[74] = [];
            cf.ⵠΔⲆ[81] = [];
            cf.ⵠΔⲆ[82] = [];
            cf.ⵠΔⲆ[87] = [];
            cf.ⵠΔⲆ[86] = [];
            cf.ⵠΔⲆ[34] = [];
            cf.ⵠΔⲆ[65] = [];
            cf.ⵠΔⲆ[66] = [];
            cf.ⵠΔⲆ[67] = [];
            cf.ⵠΔⲆ[62] = [];
            cf.ⵠΔⲆ[63] = [];
            cf.ⵠΔⲆ[78] = [];
            cf.ⵠΔⲆ[77] = [];
            cf.ⵠΔⲆ[75] = [];
            cf.ⵠΔⲆ[76] = [];
            cf.ⵠΔⲆ[64] = [];
            cf.ⵠΔⲆ[69] = [];
            cf.ⵠΔⲆ[68] = [];
            cf.ⵠΔⲆ[79] = [];
            cf.ⵠΔⲆ[89] = [];
            cf.ⵠΔⲆ[83] = [];
            cf.ⵠΔⲆ[84] = [];
            cf.ⵠΔⲆ[85] = [];
            cf.ⵠΔⲆ[80] = [];
            cf.ⵠΔⲆ[88] = [];
            cf.ⵠΔⲆ[91] = [];
            cf.ⵠΔⲆ[90] = [];
            cf.ⵠΔⲆ[61] = [];
            cf.ⵠΔⲆ[18] = [];
            cf.ⵠΔⲆ[19] = [];
            cf.ⵠΔⲆ[20] = [];
            cf.ⵠΔⲆ[21] = [];
            cf.ⵠΔⲆ[50] = [];
            cf.ⵠΔⲆ[52] = [];
            cf.ⵠΔⲆ[51] = [];
            cf.ⵠΔⲆ[29] = [];
            cf.ⵠΔⲆ[56] = [];
            cf.ⵠΔⲆ[30] = [];
            cf.ⵠΔⲆ[38] = [];
            cf.ⵠΔⲆ[33] = [];
            cf.ⵠΔⲆ[32] = [];
            cf.ⵠΔⲆ[24] = [];
            cf.ⵠΔⲆ[25] = [];
            cf.ⵠΔⲆ[26] = [];
            cf.ⵠΔⲆ[27] = [];
            cf.ⵠΔⲆ[28] = [];
            cf.ⵠΔⲆ[42] = [];
            cf.ⵠΔⲆ[41] = [];
            cf.ⵠΔⲆ[35] = [];
            cf.ⵠΔⲆ[36] = [];
            cf.ᐃⲆᐃⵠⵠ = [];
            cf.ΔᐃⵠⵠΔⵠⵠ = b[7];
            Ww.id = b[9];
            Ww.ⲆⵠᐃⲆ = Ww.id * cf.ΔᐃⵠⵠΔⵠⵠ;
            if (Zw.loaded) {
                Zw.ⲆⲆⵠΔ[0].ⲆⵠᐃⲆ = Ww.ⲆⵠᐃⲆ;
                Zw.ⲆⲆⵠΔ[0].ΔᐃΔⵠⲆΔⵠ = 0;
            }
            zf.ⲆΔᐃⵠᐃΔΔ();
            Ww.ᐃⲆΔ.ΔᐃᐃⲆⲆ(b[3], b[10]);
            cf.ⲆⲆⵠΔ = [];
            var d = cf.ⲆⲆⵠΔ;
            for (var e = 0; b[11] > e; e++) {
                d.push(new sw());
            }
            e = 0;
            for (var f = b[4]; f.length > e; e++) {
                var g = d[f[e].i];
                g.ⲆⵠΔΔⲆ = f[e].n;
                g.ᐃΔΔⵠ = f[e].s;
                g.ⵠΔⵠⵠΔ = f[e].a;
                g.ⲆᐃᐃΔⵠ = f[e].c;
                g.ΔᐃΔΔΔ = f[e].b;
                g.ⵠᐃⵠⵠᐃ = f[e].d;
                g.ⲆᐃᐃⲆⲆⲆⵠ = f[e].g;
                g.level = f[e].l;
                g.ⵠΔΔᐃᐃ = ⲆⵠΔᐃ.ⵠᐃⵠⲆᐃΔᐃ(f[e].p);
                g.ΔᐃᐃⲆΔ = jo;
                if (aw === 1) {
                    g.ⲆⵠΔΔⲆ += "|" + f[e].i;
                }
            }
            Ww.ⵠΔⵠⲆΔ.sort();
            if (cf.mode === 1 && cf.ⲆⲆⵠΔ[Ww.id].ⲆⵠΔΔⲆ === "spectator") {
                Ww.ⵠⲆᐃⵠⵠᐃᐃ = Ya;
            } else {
                Ww.ⵠⲆᐃⵠⵠᐃᐃ = as;
            }
            if (cf.mode === 2 && cf.ⲆⲆⵠΔ[Ww.id].ᐃΔΔⵠ === 0) {
                Ww.ⵠⵠΔⲆⲆ = Uq;
            } else {
                Ww.ⵠⵠΔⲆⲆ = Kn;
            }
            if (cf.mode === 3 && cf.ⲆⲆⵠΔ[Ww.id].ᐃΔΔⵠ === 0) {
                Ww.ΔᐃⲆⵠⵠⵠᐃ = Ik;
            } else {
                Ww.ΔᐃⲆⵠⵠⵠᐃ = Ij;
            }
            ᐃᐃΔⵠ.set("starve_token", Ww.ΔΔΔⵠⲆ);
            if (b[12] === 0) {
                Ww.ⲆⵠᐃΔΔ.ᐃⵠⵠⵠⲆ = 0;
                Yw.Ⲇᐃⵠⵠ.restore(b[17]);
                var h = b[14];
                if (h[29]) {
                    Ww.ᐃΔⵠΔ.ΔᐃᐃⵠⵠⲆⵠ(1, 0);
                }
                for (e = 0; e < h.length; e++) {
                    if (h[e]) {
                        if (e == 29) {
                            continue;
                        }
                        if (e == 7) {
                            continue;
                        }
                        this.ⵠⲆⲆᐃⵠᐃΔ([0, e, h[e]]);
                    }
                }
                Ww.ⲆⵠᐃΔΔ.open = false;
            } else {
                if (cf.mode === 4) {
                    this.ⵠⲆⲆᐃⵠᐃΔ([0, 238, 1]);
                } else if (cf.mode === 3) {
                    if (Ww.ΔᐃⲆⵠⵠⵠᐃ) {
                        this.ⵠⲆⲆᐃⵠᐃΔ([0, 190, 4]);
                    } else {
                        this.ⵠⲆⲆᐃⵠᐃΔ([0, 191, 3]);
                    }
                }
                if (cf.mode === 0 || cf.mode === 3 || cf.mode === 7 || cf.mode === 4) {
                    Ww.ⲆⵠᐃΔΔ.ᐃⵠⵠⵠⲆ = new Date().getTime();
                    Ww.ⲆⵠᐃΔΔ.open = ss;
                    Ww.ⲆⵠᐃΔΔ.value = b[13];
                    Yw.ⲆⵠᐃΔΔ.ⵠΔⲆΔᐃ();
                } else {
                    Ww.ⲆⵠᐃΔΔ.ᐃⵠⵠⵠⲆ = 0;
                    Ww.ⲆⵠᐃΔΔ.open = false;
                    Ww.ⲆⵠᐃΔΔ.value = 0;
                }
                Ww.ⵠᐃᐃⲆΔᐃΔ = b[12].toString();
            }
            Ww.ⲆᐃΔᐃᐃ.enabled = b[6];
            Ww.ⲆᐃΔᐃᐃ.ᐃⵠⵠⵠⲆ = -1;
            Ww.ⲆᐃΔᐃᐃ.label = null;
            Ww.ⲆᐃΔᐃᐃ.now = -1;
            ᐃᐃΔⵠ.set("starve_token_id", Ww.ⵠᐃᐃⲆΔᐃΔ);
            if (Ww.reconnect.enabled) {
                Ww.reconnect.rotate = 0;
                Ww.reconnect.enabled = false;
            } else {
                df.ΔⵠᐃⵠⲆ(Yw.ⲆⲆᐃᐃᐃ);
                if (ga) {
                    ga("send", "event", "Game", "play", "S" + df.ᐃΔΔⵠ + "A" + df.ⵠΔⵠⵠΔ);
                }
            }
        };
        this.connect = function () {
            c.ΔΔⵠΔΔⲆⵠ = 0;
            c.ΔⵠⵠΔⲆⲆΔ();
        };
        this.ⵠⵠⲆⵠⲆⲆᐃ = [];
        this.ᐃⲆᐃΔΔⵠⵠᐃⲆ = function (b) {
            const d = c.ⲆΔᐃⲆⲆ.filter(a => a.gm === b);
            const f = {};
            for (let a = 0; a < d.length; a++) {
                const b = d[a];
                const c = b.r;
                if (c !== undefined) {
                    if (f[c] === Yg) {
                        f[c] = [];
                    }
                    f[c].push(b);
                }
            }
            function e(d) {
                c.ⵠⵠⲆⵠⲆⲆᐃ[b] = d;
                const e = f[d];
                const g = e[Math.floor(Math.random() * e.length)];
                c.ⲆⲆΔᐃⵠⵠⵠ({
                    domain: fw,
                    is_tls: 1,
                    id: g.id,
                    p: g.p
                });
            }
            if (c.ⵠⵠⲆⵠⲆⲆᐃ[b] !== Og) {
                e(c.ⵠⵠⲆⵠⲆⲆᐃ[b]);
                return;
            }
            let a = 1;
            function g(b) {
                const c = new aj.XMLHttpRequest();
                const d = b[0];
                const f = d.p;
                const g = d.r;
                const i = f[Math.floor(Math.random() * f.length)];
                c.open("GET", "https://" + i + "." + fw + "/", ss);
                c.onreadystatechange = function () {
                    if (c.readyState === 4) {
                        if (a === 0) {
                            return;
                        }
                        a = 0;
                        e(g);
                    }
                };
                c.send();
            }
            for (let a in f) {
                g(f[a]);
            }
            aj.setTimeout(function () {
                if (a === 0) {
                    return;
                }
                a = 0;
                const b = aj.Object.keys(f);
                e(b[Math.floor(b.length * Math.random())]);
            }, 5000);
        };
        this.ΔΔⵠⵠᐃΔⵠΔΔ = function () {
            let a = mw.ᐃΔΔΔⲆΔᐃ[c.ⵠⵠᐃΔⵠ];
            console.log(Ua, undefined, undefined);
            let b = c.ᐃΔⲆΔΔⲆΔ[c.ⵠⵠᐃΔⵠ];
            let d = c.ⲆΔᐃⲆⲆ.find(c => c.gm == a && c.idx == b);
            if (d === Xn) {
                c.ᐃⲆᐃΔΔⵠⵠᐃⲆ(a);
            } else {
                c.ⲆⲆΔᐃⵠⵠⵠ({
                    domain: fw,
                    is_tls: 1,
                    id: d.id,
                    p: d.p
                });
            }
        };
        this.ΔⵠⵠΔⲆⲆΔ = function () {
            console.log(undefined);
            if (T !== dw && ew !== undefined) {
                console.log(undefined, undefined, undefined);
                c.ⲆⲆΔᐃⵠⵠⵠ({
                    domain: fw,
                    is_tls: 1,
                    id: ew + dw,
                    p: c.ᐃⲆΔᐃⲆⵠⲆ[ew]
                });
                return;
            }
            if (cw === undefined) {
                c.ΔΔⵠⵠᐃΔⵠΔΔ();
            } else {
                c.ⲆⲆΔᐃⵠⵠⵠ({
                    domain: cw.domain,
                    is_tls: cw.ssl,
                    id: cw.id,
                    p: [cw.p]
                });
            }
        };
        this.ⲆⲆΔᐃⵠⵠⵠ = function (b) {
            let d = b.domain;
            let e = b.is_tls;
            let f = b.id;
            let a = b.p;
            let g = a[Math.floor(Math.random() * a.length)];
            let i = e ? "wss://" + g + "." + d + "/" + f : "ws://" + d;
            console.log(Gj, undefined);
            c.ⵠⵠᐃΔ = new aj.WebSocket(i);
            c.ⵠⵠᐃΔ.binaryType = "arraybuffer";
            c.ⵠⵠᐃΔ.ΔⵠⲆⲆⲆ = c.ΔⵠⲆⲆⲆ;
            c.ⵠⵠᐃΔ.onmessage = function (a) {
                if (c.ΔⵠⲆⲆⲆ == c.ΔⵠⲆⲆⲆ) {
                    if (typeof a.data == "string") {
                        var b = JSON.parse(a.data);
                        switch (b[0]) {
                            case 0:
                                c.Δⵠⵠⵠᐃ(b);
                                break;
                            case 1:
                                c.ΔΔΔⲆΔⵠΔ(b[1]);
                                break;
                            case 2:
                                c.ᐃΔΔΔⵠⲆᐃⵠΔ(b);
                                break;
                            case 3:
                                c.ⲆΔⲆⵠⲆᐃⵠᐃᐃ(b);
                                break;
                            case 4:
                                c.message(b[1]);
                                break;
                            case 5:
                                c.ⲆⵠΔⵠⵠΔⲆ(b);
                                break;
                            case 6:
                                c.ⵠⲆᐃⵠⵠᐃΔ(b[1]);
                        }
                    } else {
                        var d = function (b, c, d) {
                            const f = new Uint8Array(b);
                            const e = f.length;
                            let g;
                            let h = jw[e];
                            let i = Zq;
                            if (h === Cg) {
                                kw += e * 2;
                                if (kw < 65535) {
                                    g = ij(Kj(e));
                                } else {
                                    kw = e;
                                    for (let a = 0; a < jw.length; a++) {
                                        if (jw[a] !== Db) {
                                            const b = jw[a][0];
                                            jw[a] = undefined;
                                            jj(b);
                                        }
                                    }
                                    g = ij(Kj(e));
                                    be();
                                }
                                i = qk(g);
                                jw[e] = [g, i];
                            } else {
                                g = h[0];
                                i = h[1];
                            }
                            for (let a = 0; a < f.length; a++) {
                                i[a] = f[a];
                            }
                            Rj(g, c, d);
                            for (let a = 0; f.length > a; a++) {
                                f[a] = i[a];
                            }
                            return f;
                        }(a.data, Ww.ΔⲆᐃΔⵠⲆΔ, Ww.ΔᐃⲆᐃᐃᐃᐃⲆΔ);
                        var e = d.buffer;
                        switch (d[0]) {
                            case 0:
                                c.ⵠΔⲆ(e, d, false);
                                break;
                            case 1:
                                c.ⵠΔⲆ(e, d, true);
                                break;
                            case 2:
                                c.ᐃⵠᐃᐃⲆΔⵠⲆᐃ();
                                break;
                            case 3:
                                c.ⵠⲆⲆᐃⵠᐃΔ(new Uint16Array(e));
                                break;
                            case 4:
                                c.ΔⲆⲆⲆᐃⲆΔⲆΔ();
                                break;
                            case 5:
                                c.ΔⲆᐃⵠᐃⵠᐃᐃΔ();
                                break;
                            case 6:
                                c.ᐃⲆΔⲆΔΔⵠᐃᐃ();
                                break;
                            case 7:
                                c.ⵠΔⲆⵠΔⲆⵠᐃⲆ(e);
                                break;
                            case 8:
                                c.ᐃⵠᐃⲆᐃⵠⵠᐃⲆ(d[1]);
                                break;
                            case 9:
                                c.ⵠᐃΔⵠᐃᐃⲆⵠΔ(d[1]);
                                break;
                            case 10:
                                c.ᐃⵠⵠΔᐃⲆⵠ();
                                break;
                            case 11:
                                c.ⵠᐃᐃⲆᐃᐃⲆ(d[1], d[2]);
                                break;
                            case 12:
                                c.ⵠΔᐃᐃⵠ(d[1]);
                                break;
                            case 13:
                                c.ᐃⵠᐃᐃⲆⵠⵠⲆⵠ(d, e);
                                break;
                            case 14:
                                c.ᐃᐃⵠⵠᐃⵠⵠ();
                                break;
                            case 15:
                                c.ⲆⵠⵠⵠΔⵠΔᐃᐃ(d[1]);
                                break;
                            case 16:
                                c.ᐃⵠⲆⲆ(d[1], d[2], d[3], d[4], d[5], d[6], d[7]);
                                break;
                            case 17:
                                c.ᐃⵠⵠΔⵠⲆⵠⵠᐃ(e);
                                break;
                            case 18:
                                c.ⲆⲆⵠᐃᐃΔⲆⲆⲆ();
                                break;
                            case 19:
                                c.ⲆΔᐃΔᐃ(d[1]);
                                break;
                            case 20:
                                c.ᐃⵠᐃⵠᐃⲆᐃᐃΔ();
                                break;
                            case 21:
                                c.ΔΔΔⲆ(e);
                                break;
                            case 22:
                                c.ᐃⲆⵠⵠⲆⵠⲆⲆΔ(d[1]);
                                break;
                            case 23:
                                c.ΔᐃΔΔᐃⵠᐃⲆΔ(e);
                                break;
                            case 24:
                                c.ᐃⵠⵠᐃᐃⲆⲆΔⵠ(d[1]);
                                break;
                            case 25:
                                c.ᐃⵠΔⲆⲆΔΔΔⲆ(d[1], e);
                                break;
                            case 26:
                                c.ᐃΔⵠⲆΔ(d);
                                break;
                            case 27:
                                c.ⲆⲆⵠᐃΔⵠⲆⵠᐃ();
                                break;
                            case 28:
                                c.ⲆᐃΔᐃᐃ(d[1]);
                                break;
                            case 29:
                                c.ⲆᐃΔᐃⵠΔᐃⲆⵠ();
                                break;
                            case 30:
                                c.ᐃⲆⲆᐃⲆⲆⲆⲆᐃ();
                                break;
                            case 31:
                                c.ⲆᐃΔⲆΔᐃⵠⲆᐃ(d);
                                break;
                            case 32:
                                c.ⵠⲆᐃΔⵠⲆΔⲆⲆ(d[1]);
                                break;
                            case 33:
                                c.ᐃΔⲆᐃⲆⵠⲆⵠΔ(d[1]);
                                break;
                            case 34:
                                c.ⵠⵠΔⲆⲆⲆⲆⵠⲆ();
                                break;
                            case 35:
                                c.ⲆⵠⲆⲆΔⵠⲆΔⵠ(d[1]);
                                break;
                            case 36:
                                c.ᐃΔΔⵠΔᐃᐃ(d[1]);
                                break;
                            case 37:
                                c.ⵠⵠᐃᐃᐃΔᐃⲆⲆ(d[1], d[2]);
                                break;
                            case 38:
                                c.ⵠᐃⲆⲆⵠΔⵠⲆΔ(d[1]);
                                break;
                            case 39:
                                c.ⵠᐃⲆⲆⵠⵠⲆᐃᐃ(d[1]);
                                break;
                            case 40:
                                c.ΔⵠⲆᐃΔΔᐃᐃⵠ();
                                break;
                            case 41:
                                c.ΔᐃΔⵠᐃⵠⲆΔᐃ(d);
                                break;
                            case 42:
                                c.ΔⵠΔⲆⲆⵠᐃᐃᐃ(d[1]);
                                break;
                            case 43:
                                c.ⲆᐃⵠⵠⲆΔᐃᐃⲆ(d[1]);
                                break;
                            case 44:
                                c.claimed(d[1]);
                                break;
                            case 45:
                                c.ⲆⵠΔⵠⲆᐃΔⲆⲆ(d[1]);
                                break;
                            case 46:
                                c.ⲆⵠⲆᐃᐃⲆᐃⲆⲆ(d[1]);
                                break;
                            case 47:
                                c.ⵠΔᐃᐃᐃ(d[1]);
                                break;
                            case 48:
                                c.ΔᐃΔⲆⲆⵠⵠᐃᐃ();
                                break;
                            case 50:
                                c.ⲆᐃⲆⲆⵠⲆΔⵠⲆ(d[1], d[2], d[3]);
                                break;
                            case 51:
                                c.ᐃᐃⵠΔⵠᐃΔⵠⲆ();
                                break;
                            case 52:
                                c.ⲆⵠⲆΔΔⲆᐃᐃⲆ(d[1]);
                                break;
                            case 53:
                                c.ⵠⵠⵠⵠΔΔΔⲆⵠ(d[1]);
                                break;
                            case 54:
                                c.ᐃⵠⵠⲆΔᐃᐃⵠⲆ();
                                break;
                            case 55:
                                c.ᐃⲆΔⵠΔⲆΔᐃⲆ(d[1]);
                                break;
                            case 56:
                                c.ⲆⵠᐃⵠᐃΔᐃΔΔ(d[1]);
                                break;
                            case 57:
                                c.ⵠⵠᐃᐃⵠΔⵠⲆⲆ();
                                break;
                            case 58:
                                c.ΔΔᐃᐃⵠⵠᐃⲆᐃ();
                                break;
                            case 59:
                                c.ⲆⵠⵠΔⲆᐃΔᐃⵠ();
                                break;
                            case 60:
                                c.ᐃΔⵠⲆⲆᐃΔᐃᐃ();
                                break;
                            case 61:
                                Ww.ᐃⲆΔ.ⲆⲆᐃΔⵠⲆⵠ = 0.2;
                                Ww.ᐃⲆΔ.ᐃⵠⵠⵠⲆ = 3;
                                break;
                            case 62:
                                c.ⲆΔΔᐃΔⲆⲆΔᐃ(new Uint16Array(e));
                                break;
                            case 63:
                                c.ⵠⵠⵠⵠΔΔΔⲆΔ();
                                break;
                            case 64:
                                c.ΔⵠⵠⲆⲆⲆⵠⲆᐃ();
                                break;
                            case 65:
                                c.ΔⲆᐃᐃᐃⲆⲆΔᐃ();
                                break;
                            case 66:
                                c.ᐃⵠⵠⲆΔᐃⵠⲆΔ();
                                break;
                            case 67:
                                c.ⵠΔⲆⵠⵠᐃⲆΔΔ(d[1]);
                                break;
                            case 68:
                                c.ⵠⵠΔⲆⵠⲆᐃᐃⲆ(d[1]);
                                break;
                            case 69:
                                c.ⵠⲆᐃᐃΔⲆⲆ(d[1]);
                                break;
                            case 70:
                                c.ⲆᐃⵠᐃᐃᐃⵠⲆⲆ(d[1]);
                                break;
                            case 71:
                                c.ΔⵠⵠⲆⵠ(d[1]);
                        }
                    }
                }
            };
            c.ⵠⵠᐃΔ.onerror = function () {
                if (Ww.reconnect.enabled) {
                    aj.setTimeout(c.timeout, 2500);
                }
            };
            this.ⵠⵠᐃΔ.onopen = function () {
                clearTimeout(c.ΔⲆᐃⵠᐃ);
                Ww.ⲆⲆΔΔⵠⲆΔ = Ww.ⲆⲆΔΔⵠⲆΔ || ⲆⵠΔᐃ.ⵠⵠᐃᐃΔⵠΔ("token");
                ⲆⵠΔᐃ.ᐃΔΔⵠⲆⵠΔ().then(a => {
                    c.ⵠⵠᐃΔ[_v](Fa[xa].stringify([df.ⲆⵠΔΔⲆ.input.value, screen.width + 200, screen.height + 200, 52, Ww.ΔΔΔⵠⲆ, Ww.ⵠᐃᐃⲆΔᐃΔ, Ww.reconnect.enabled ? 1 : 0, df.ᐃΔΔⵠ, df.ⵠΔⵠⵠΔ, df.ΔᐃⲆⵠⲆ, df.ΔᐃΔΔΔ, df.ⲆᐃᐃΔⵠ, df.ⵠᐃⵠⵠᐃ, cx === undefined ? 0 : cx, bx === undefined ? 0 : bx.substring(bx.length - 50), bw, Ww.ⲆⲆΔΔⵠⲆΔ, a, Ww.ⵠᐃⲆⵠᐃᐃᐃ, Ww.ΔΔᐃⲆⵠΔΔ]));
                    Ww.ⲆⲆΔΔⵠⲆΔ = undefined;
                    Ww.ⵠᐃⲆⵠᐃᐃᐃ = undefined;
                    Ww.ΔΔᐃⲆⵠΔΔ = undefined;
                    c.ΔⲆᐃⵠᐃ = setTimeout(c.timeout, 2000);
                });
            };
        };
    }();
    var cf;
    var Ww;
    var Xw;
    var Yw = {
        ⵠⵠΔᐃᐃ: as
    };
    var Zw = new function () {
        this.ⲆⲆᐃᐃᐃ = 0;
        this.loaded = 0;
        this.transition = 0;
        this.ⲆⲆⵠΔΔⲆⲆ = function (a) {
            return a / cf.w * 100;
        };
        this.ΔⲆⵠᐃᐃⵠⲆ = function (a) {
            return a / cf.ⵠⲆᐃ * 100;
        };
        this.ⵠⵠⲆᐃⵠᐃⲆ = function (a, b) {
            a = this.ⲆⲆⵠΔΔⲆⲆ(a) - this.ΔⲆΔΔΔ.x;
            return this.ΔⲆΔΔΔ.x + b * a;
        };
        this.ᐃᐃⲆΔΔⲆⵠ = function (a, b) {
            a = Math.abs(this.ΔⲆⵠᐃᐃⵠⲆ(a) - this.ΔⲆΔΔΔ.y);
            return this.ΔⲆΔΔΔ.y + b * a;
        };
        this.sample = {};
        this.ΔᐃⲆᐃⲆ = {};
        this.ⵠΔⵠΔ = {};
        this.ⲆΔⵠⲆⵠᐃⲆ = function (b, c, d, e) {
            for (var f = 0; f < c.length; f++) {
                var g = c[f];
                if (!b.playing(g)) {
                    b.pos(d, e, -0.5, g);
                    b.play(g);
                    return Kh;
                }
            }
            return false;
        };
        this.ᐃⲆⲆ = function (a, b, c, d) {
            c = this.ⵠⵠⲆᐃⵠᐃⲆ(c, ΔΔⲆⲆᐃ.ΔᐃΔⲆΔⵠᐃ);
            d = this.ᐃᐃⲆΔΔⲆⵠ(d, ΔΔⲆⲆᐃ.ΔᐃΔⲆΔⵠᐃ);
            console.log("HIT", a, b, c, d, ΔΔⲆⲆᐃ.ΔᐃΔⲆΔⵠᐃ);
            if (a) {
                if (b === 1) {
                    this.ⲆΔⵠⲆⵠᐃⲆ(this.ⵠΔⵠΔ.ⲆⲆⵠΔⵠᐃⲆ, this.sample.ⲆⲆⵠΔⵠᐃⲆ, c, d);
                } else if (b === 0) {
                    this.ⲆΔⵠⲆⵠᐃⲆ(this.ⵠΔⵠΔ.ᐃᐃᐃⵠⵠᐃᐃ, this.sample.ᐃᐃᐃⵠⵠᐃᐃ, c, d);
                }
            } else {
                this.ⲆΔⵠⲆⵠᐃⲆ(this.ⵠΔⵠΔ.ᐃΔⵠⵠᐃ, this.sample.ᐃΔⵠⵠᐃ, c, d);
            }
        };
        this.ΔⲆΔΔΔ = {
            x: 0,
            y: 0
        };
        this.ᐃⲆᐃⲆᐃΔⲆ = {
            x: 0,
            y: 0
        };
        this.ᐃᐃⲆⲆΔ = {};
        this.ⲆⲆⵠΔ = [];
        this.ΔⲆᐃΔⵠ = function (a, b) {
            for (var c in this.ᐃᐃⲆⲆΔ) {
                var d = this.ᐃᐃⲆⲆΔ[c];
                d.check(a);
                if (d.ΔᐃⵠᐃΔⵠΔ) {
                    if (cf.ⵠΔΔⲆᐃ.now < 460000) {
                        d.ΔΔΔᐃⵠ();
                    }
                    if (b) {
                        d.ΔΔΔ(a, this.ΔⲆΔΔΔ);
                    }
                    if (this.transition) {
                        d.transition();
                    }
                }
            }
            this.transition &&= 0;
        };
        this.ⲆⵠⲆΔᐃᐃΔⵠᐃ = function () {
            var a = [];
            for (var b = 0; this.ⲆⲆⵠΔ.length > b; b++) {
                if ((e = this.ⲆⲆⵠΔ[b]).ΔᐃΔⵠⲆΔⵠ) {
                    a.push(b);
                } else if (!e.ΔᐃΔⵠⲆΔⵠ && !cf.ᐃⲆᐃⵠⵠ[e.ⲆⵠᐃⲆ]) {
                    e.ⲆᐃᐃⲆⲆΔⵠ();
                    a.push(b);
                }
            }
            var c = cf.ⵠΔⲆ[0];
            var d = 0;
            for (b = 0; c.length > b && d < a.length; b++) {
                var e = c[b];
                if ((cf.mode != 1 || cf.ⲆⲆⵠΔ[e.id].ⲆⵠΔΔⲆ !== "spectator") && e.ᐃⵠⲆᐃΔ === -1 && Ww.ⲆⵠᐃⲆ !== e.ⲆⵠᐃⲆ) {
                    this.ⲆⲆⵠΔ[a[d]].ⵠΔⲆΔᐃ(e.ⲆⵠᐃⲆ);
                    d++;
                }
            }
        };
        this.ΔΔⵠᐃΔᐃᐃΔⵠ = function () {
            this.ⲆⵠⲆΔᐃᐃΔⵠᐃ();
            for (var a = 0; a < this.ⲆⲆⵠΔ.length; a++) {
                var b = this.ⲆⲆⵠΔ[a];
                if (!b.ΔᐃΔⵠⲆΔⵠ && b.check()) {
                    b.ΔΔΔ();
                }
            }
        };
        this.ᐃᐃⵠⲆΔⲆΔⵠⲆ = function (a) {
            if (this.ᐃⲆᐃⲆᐃΔⲆ.x === a.x && this.ᐃⲆᐃⲆᐃΔⲆ.y === a.y) {
                return 0;
            } else {
                this.ᐃⲆᐃⲆᐃΔⲆ.x = a.x;
                this.ᐃⲆᐃⲆᐃΔⲆ.y = a.y;
                this.ΔⲆΔΔΔ.x = this.ⲆⲆⵠΔΔⲆⲆ(a.x);
                this.ΔⲆΔΔΔ.y = this.ΔⲆⵠᐃᐃⵠⲆ(a.y);
                Howler.pos(this.ΔⲆΔΔΔ.x, this.ΔⲆΔΔΔ.y, 0);
                return 1;
            }
        };
        this.ⲆᐃᐃⵠΔΔⵠⵠⵠ = function () {
            if (this.ⲆⲆᐃᐃᐃ && this.loaded) {
                var a = cf.ᐃⲆᐃⵠⵠ[Ww.ⲆⵠᐃⲆ];
                if (a) {
                    a.ᐃⵠⲆᐃΔ = 0;
                    var b = this.ᐃᐃⵠⲆΔⲆΔⵠⲆ(a);
                    if (cf.mode !== 2 && cf.mode !== 4 && cf.mode !== 5) {
                        this.ΔⲆᐃΔⵠ(a, b);
                    }
                    this.ΔΔⵠᐃΔᐃᐃΔⵠ();
                }
            }
        };
        this.ΔΔⵠⲆΔᐃΔⲆᐃ = function () {
            for (var b in af) {
                var c = af[b];
                if (typeof c === "object" && c.path) {
                    c.ᐃⲆⵠⲆΔ = new Howl({
                        src: c.path,
                        volume: 0,
                        sprite: c.ΔⲆ
                    });
                }
                for (var d in c.sample) {
                    var f = c.sample[d];
                    var g = [];
                    console.log(undefined);
                    for (var h = 0; h < f; h++) {
                        var j = c.ᐃⲆⵠⲆΔ.play(d);
                        c.ᐃⲆⵠⲆΔ.stop(j);
                        c.ᐃⲆⵠⲆΔ.on("fade", function (a) {
                            if (!this.volume(a)) {
                                console.log(Og, Yg);
                                this.stop(a);
                            }
                        }, j);
                        g.push(j);
                    }
                    if (g.length > 1) {
                        Zw.sample[d] = g;
                    } else {
                        Zw.sample[d] = g[0];
                    }
                    Zw.ⵠΔⵠΔ[d] = c.ᐃⲆⵠⲆΔ;
                }
            }
        };
        this.ⲆⵠᐃⵠⲆᐃᐃ = function (a, b, c) {
            for (var d = 0; a.length > d; d++) {
                b.volume(c, a[d]);
            }
        };
        this.ⲆⵠⲆᐃⲆⲆᐃ = function (b, c, d, e, f, g) {
            var a = b;
            for (var i = 0; i < d; i++) {
                var j = a[i] = [];
                for (ΔⵠⲆᐃ = 0; e > ΔⵠⲆᐃ; ΔⵠⲆᐃ++) {
                    j[ΔⵠⲆᐃ] = Zw.sample[f + ΔⵠⲆᐃ][i];
                    c.ᐃⲆⵠⲆΔ.volume(g, j[ΔⵠⲆᐃ]);
                }
            }
        };
        this.ⵠΔⲆΔᐃ = function () {
            Zw.ΔΔⵠⲆΔᐃΔⲆᐃ();
            Zw.ΔᐃⲆᐃⲆ.ⲆΔⵠᐃΔⲆΔ = [];
            Zw.ΔᐃⲆᐃⲆ.ᐃⵠΔΔᐃ = [];
            Zw.ΔᐃⲆᐃⲆ.ⲆⲆᐃⲆΔ = [];
            Zw.ⲆⵠⲆᐃⲆⲆᐃ(Zw.ΔᐃⲆᐃⲆ.ⲆΔⵠᐃΔⲆΔ, af.ⲆΔⵠΔⲆⵠⲆ, 8, 3, "p", 0.15);
            Zw.ⲆⵠⲆᐃⲆⲆᐃ(Zw.ΔᐃⲆᐃⲆ.ᐃⵠΔΔᐃ, af.ⲆⵠⲆⵠⲆᐃⲆ, 8, 4, "w", 0.15);
            Zw.ⲆⵠⲆᐃⲆⲆᐃ(Zw.ΔᐃⲆᐃⲆ.ⲆⲆᐃⲆΔ, af.ᐃΔⲆΔᐃΔΔ, 8, 3, "d", 0.09);
            Zw.ⲆⵠᐃⵠⲆᐃᐃ(Zw.sample.ᐃΔⵠⵠᐃ, Zw.ⵠΔⵠΔ.ᐃΔⵠⵠᐃ, 0.15);
            Zw.ⲆⵠᐃⵠⲆᐃᐃ(Zw.sample.ᐃᐃᐃⵠⵠᐃᐃ, Zw.ⵠΔⵠΔ.ᐃᐃᐃⵠⵠᐃᐃ, 0.2);
            Zw.ⲆⵠᐃⵠⲆᐃᐃ(Zw.sample.ⲆⲆⵠΔⵠᐃⲆ, Zw.ⵠΔⵠΔ.ⲆⲆⵠΔⵠᐃⲆ, 1);
            Zw.ᐃᐃⲆⲆΔ.ⵠⲆⵠⵠΔᐃⲆΔⲆ = new sf(12, this.sample.ⵠⲆⵠⲆΔⵠⵠ, this.sample.ⵠⲆΔᐃⵠΔⲆ, 5000, 0.05, 0.4, af.ΔΔⵠⵠⵠⵠᐃ.ᐃⲆⵠⲆΔ, 3000, {
                x: Gr.ⲆΔⲆⲆⲆᐃⵠ,
                y: Gr.ΔⵠΔᐃⲆΔⵠ,
                w: cf.w,
                ⵠⲆᐃ: cf.ⵠⲆᐃ
            }, {
                x: Gr.ⲆΔⲆⲆⲆᐃⵠ - 2300,
                y: Gr.ΔⵠΔᐃⲆΔⵠ - 4000,
                w: cf.w,
                ⵠⲆᐃ: cf.ⵠⲆᐃ
            }, {
                x: Gr.ⲆΔⲆⲆⲆᐃⵠ - 1500,
                y: Gr.ΔⵠΔᐃⲆΔⵠ - 2000,
                w: cf.w,
                ⵠⲆᐃ: cf.ⵠⲆᐃ
            });
            Zw.ᐃᐃⲆⲆΔ.ⲆΔᐃⲆⲆⲆⵠⵠⲆ = new sf(12, this.sample.ᐃⲆᐃⵠΔⲆⲆ, this.sample.ΔⵠᐃᐃⲆΔΔ, 5000, 0.03, 0.25, af.ΔΔⵠⵠⵠⵠᐃ.ᐃⲆⵠⲆΔ, 3000, {
                x: 0,
                y: Gr.ΔⵠΔᐃⲆΔⵠ + 800,
                w: Gr.ⲆΔⲆⲆⲆᐃⵠ - 2300,
                ⵠⲆᐃ: cf.ⵠⲆᐃ
            }, {
                x: -100,
                y: Gr.ΔⵠΔᐃⲆΔⵠ - 300,
                w: Gr.ⲆΔⲆⲆⲆᐃⵠ - 100,
                ⵠⲆᐃ: cf.ⵠⲆᐃ
            }, {
                x: -100,
                y: Gr.ΔⵠΔᐃⲆΔⵠ + 400,
                w: Gr.ⲆΔⲆⲆⲆᐃⵠ - 1400,
                ⵠⲆᐃ: cf.ⵠⲆᐃ
            });
            Zw.ᐃᐃⲆⲆΔ.ⲆⲆⵠⲆⵠⵠⲆ = new sf(12, this.sample.ᐃⵠᐃᐃⵠⲆⲆ, this.sample.ΔΔᐃᐃⵠⲆΔ, 5000, 0.01, 0.22, af.ΔΔⵠⵠⵠⵠᐃ.ᐃⲆⵠⲆΔ, 3000, {
                x: -100,
                y: -100,
                w: cf.w + 200,
                ⵠⲆᐃ: Gr.ΔⵠΔᐃⲆΔⵠ - 1000
            }, {
                x: -100,
                y: -100,
                w: cf.w + 200,
                ⵠⲆᐃ: Gr.ΔⵠΔᐃⲆΔⵠ + 600
            }, {
                x: -100,
                y: -100,
                w: cf.w + 200,
                ⵠⲆᐃ: Gr.ΔⵠΔᐃⲆΔⵠ + 100
            });
            for (var a = 0; a < 8; a++) {
                Zw.ⲆⲆⵠΔ[a] = new lf(a);
            }
            Zw.ⲆⲆⵠΔ[0].ⵠΔⲆΔᐃ(Ww.ⲆⵠᐃⲆ);
            Zw.loaded = 1;
        };
        this.ⵠᐃⵠᐃᐃⵠΔⲆⲆ = function () {
            if (!this.transition && cf.ⵠΔΔⲆᐃ.now < 460000) {
                this.transition = 1;
            }
        };
        this.ΔⵠᐃⵠⲆ = function () {
            if (this.ⲆⲆᐃᐃᐃ && this.loaded) {
                for (var a in Zw.sample) {
                    var b = Zw.sample[a];
                    if (typeof b === "object") {
                        for (var c = 0; c < b.length; c++) {
                            Zw.ⵠΔⵠΔ[a].stop(b[c]);
                        }
                    } else {
                        Zw.ⵠΔⵠΔ[a].stop(b);
                    }
                }
                for (c = 0; c < Zw.ⲆⲆⵠΔ.length; c++) {
                    Zw.ⲆⲆⵠΔ[c].ⲆᐃᐃⲆⲆΔⵠ();
                }
            }
        };
        this.select = function () {
            if (Zw.ⲆⲆᐃᐃᐃ) {
                Zw.ΔⵠᐃⵠⲆ();
            } else {
                if (!Zw.loaded) {
                    Zw.ⵠΔⲆΔᐃ();
                }
                Zw.ⲆⲆⵠΔ[0].ⲆⵠᐃⲆ = Ww.ⲆⵠᐃⲆ;
                Zw.ⲆⲆⵠΔ[0].ΔᐃΔⵠⲆΔⵠ = 0;
                Zw.ⵠᐃⵠᐃᐃⵠΔⲆⲆ();
            }
            Zw.ⲆⲆᐃᐃᐃ = !Zw.ⲆⲆᐃᐃᐃ;
        };
    }();
    var zf = new function () {
        this.ΔᐃΔⵠΔᐃᐃ = function () {
            this.ⲆᐃᐃΔⲆ = 81;
            this.ⲆᐃⲆᐃΔ = 68;
            this.ᐃⵠΔⵠᐃ = 90;
            this.ΔⵠΔΔᐃⲆⵠ = 83;
        };
        this.ⵠᐃᐃⵠᐃⵠⲆ = function () {
            this.ⲆᐃᐃΔⲆ = 65;
            this.ⲆᐃⲆᐃΔ = 68;
            this.ᐃⵠΔⵠᐃ = 87;
            this.ᐃⲆΔⵠⲆ = 83;
        };
        this.Ⲇᐃᐃⵠᐃ = 0;
        this.ΔⵠΔΔᐃⲆⵠ = 1;
        this.ⲆⲆⲆΔᐃΔⵠ = 49;
        this.ⲆᐃⲆΔⲆⲆΔ = 50;
        this.ⲆⲆᐃΔⲆⲆΔ = 51;
        this.ⵠⵠΔⵠᐃΔⲆ = 52;
        this.ⵠᐃΔⵠⵠΔⵠⵠΔ = 53;
        this.ⵠᐃᐃⲆΔᐃᐃ = 17;
        this.ᐃᐃⲆⵠⵠⵠᐃ = 37;
        this.ⵠⲆⵠᐃᐃΔΔ = 39;
        this.ⵠⲆⲆΔⲆⲆᐃ = 38;
        this.ᐃᐃⵠᐃΔⵠΔ = 40;
        this.ⵠᐃⲆᐃΔⲆⵠ = 32;
        this.ⲆᐃΔΔⵠⲆΔ = 82;
        this.Δᐃᐃᐃᐃᐃⵠ = 71;
        this.ⲆⲆᐃΔΔⲆᐃ = 86;
        this.ⵠΔΔⲆᐃⲆⵠ = 66;
        this.ⵠᐃᐃⵠᐃⵠⲆ();
        this.keys = new Array(255);
        for (var a = 0; a < 255; a++) {
            this.keys[a] = this.Ⲇᐃᐃⵠᐃ;
        }
        this.up = function (a) {
            var b = Math.min(a.charCode || a.keyCode, 255);
            this.keys[b] = this.Ⲇᐃᐃⵠᐃ;
        };
        this.down = function (a) {
            var b = Math.min(a.charCode || a.keyCode, 255);
            if (this.ⲆᐃᐃΔⲆ == b || b == this.ᐃᐃⲆⵠⵠⵠᐃ) {
                this.ⵠⵠⵠⲆⵠᐃⲆ();
            } else if (b == this.ᐃⵠΔⵠᐃ || this.ⵠⲆⲆΔⲆⲆᐃ == b) {
                this.ᐃΔⲆᐃᐃᐃⲆ();
            } else if (this.ΔⵠΔΔᐃⲆⵠ == b || this.ⲆⵠΔΔΔⵠΔᐃᐃ == b) {
                this.ΔⲆⵠΔΔᐃΔ();
            } else if (b == this.ⲆᐃⲆᐃΔ || this.ⵠⲆⵠᐃᐃΔΔ == b) {
                this.ⵠⵠⵠⵠᐃΔⵠ();
            }
            this.keys[b] = this.ΔⵠΔΔᐃⲆⵠ;
            return b;
        };
        this.ⵠⵠⵠⲆⵠᐃⲆ = function () {
            this.keys[this.ⲆᐃⲆᐃΔ] = this.Ⲇᐃᐃⵠᐃ;
            this.keys[this.ⵠⲆⵠᐃᐃΔΔ] = this.Ⲇᐃᐃⵠᐃ;
        };
        this.ⵠⵠⵠⵠᐃΔⵠ = function () {
            this.keys[this.ⲆᐃᐃΔⲆ] = this.Ⲇᐃᐃⵠᐃ;
            this.keys[this.ᐃᐃⲆⵠⵠⵠᐃ] = this.Ⲇᐃᐃⵠᐃ;
        };
        this.ΔⲆⵠΔΔᐃΔ = function () {
            this.keys[this.ᐃⵠΔⵠᐃ] = this.Ⲇᐃᐃⵠᐃ;
            this.keys[this.ⵠⲆⲆΔⲆⲆᐃ] = this.Ⲇᐃᐃⵠᐃ;
        };
        this.ᐃΔⲆᐃᐃᐃⲆ = function () {
            this.keys[this.ᐃⲆΔⵠⲆ] = this.Ⲇᐃᐃⵠᐃ;
            this.keys[this.ᐃᐃⵠᐃΔⵠΔ] = this.Ⲇᐃᐃⵠᐃ;
        };
        this.ⲆΔᐃⵠᐃΔΔ = function () {
            this.keys[this.ⲆᐃⲆᐃΔ] = this.Ⲇᐃᐃⵠᐃ;
            this.keys[this.ⵠⲆⵠᐃᐃΔΔ] = this.Ⲇᐃᐃⵠᐃ;
            this.keys[this.ⲆᐃᐃΔⲆ] = this.Ⲇᐃᐃⵠᐃ;
            this.keys[this.ᐃᐃⲆⵠⵠⵠᐃ] = this.Ⲇᐃᐃⵠᐃ;
            this.keys[this.ᐃⵠΔⵠᐃ] = this.Ⲇᐃᐃⵠᐃ;
            this.keys[this.ⵠⲆⲆΔⲆⲆᐃ] = this.Ⲇᐃᐃⵠᐃ;
            this.keys[this.ᐃⲆΔⵠⲆ] = this.Ⲇᐃᐃⵠᐃ;
            this.keys[this.ᐃᐃⵠᐃΔⵠΔ] = this.Ⲇᐃᐃⵠᐃ;
        };
        this.ΔΔΔⵠⲆΔⲆ = function () {
            return this.keys[this.ⲆᐃᐃΔⲆ] || this.keys[this.ᐃᐃⲆⵠⵠⵠᐃ];
        };
        this.ΔⵠΔⵠᐃⲆⲆ = function () {
            return this.keys[this.ⲆᐃⲆᐃΔ] || this.keys[this.ⵠⲆⵠᐃᐃΔΔ];
        };
        this.ⵠΔⲆⵠᐃΔᐃ = function () {
            return this.keys[this.ᐃⵠΔⵠᐃ] || this.keys[this.ⵠⲆⲆΔⲆⲆᐃ];
        };
        this.ⵠΔⲆᐃᐃᐃⲆ = function () {
            return this.keys[this.ᐃⲆΔⵠⲆ] || this.keys[this.ᐃᐃⵠᐃΔⵠΔ];
        };
        this.ⵠⵠᐃᐃⵠᐃΔⲆⵠ = function () {
            return this.keys[this.ⵠᐃᐃⲆΔᐃᐃ];
        };
        this.ⵠⵠᐃΔᐃⲆⵠⲆΔ = function () {
            return this.keys[this.ⲆⲆⲆΔᐃΔⵠ];
        };
        this.ⲆᐃⵠⵠΔᐃⵠᐃΔ = function () {
            return this.keys[this.ⲆᐃⲆΔⲆⲆΔ];
        };
        this.ⲆⲆⲆΔⵠᐃⲆⵠⲆ = function () {
            return this.keys[this.ⲆⲆᐃΔⲆⲆΔ];
        };
        this.ᐃᐃⵠⲆΔⵠⵠΔⲆ = function () {
            return this.keys[this.ⵠⵠΔⵠᐃΔⲆ];
        };
        this.ⵠᐃⵠᐃΔⵠⵠᐃᐃ = function () {
            return this.keys[this.ⵠᐃⲆᐃΔⲆⵠ];
        };
        this.ᐃΔᐃⲆᐃᐃᐃⲆᐃ = function () {
            return this.keys[this.ⲆᐃΔΔⵠⲆΔ];
        };
        this.ⲆⵠⲆⵠᐃⲆⲆΔᐃ = function () {
            return this.keys[this.Δᐃᐃᐃᐃᐃⵠ];
        };
        this.ⵠⲆⵠⵠⵠⲆⵠⲆⲆ = function () {
            return this.keys[this.ⲆⲆᐃΔΔⲆᐃ];
        };
        this.ⵠᐃⵠᐃΔⲆΔⲆⵠ = function () {
            return this.keys[this.ⵠΔΔⲆᐃⲆⵠ];
        };
    }();
    var yf = new function () {
        this.ΔⵠΔΔᐃⲆⵠ = 0;
        this.Ⲇᐃᐃⵠᐃ = 1;
        this.IDLE = 2;
        this.ᐃᐃⲆᐃᐃⵠⲆ = 0;
        this.ᐃⲆᐃⲆᐃᐃⵠᐃΔ = 1;
        this.ᐃⲆΔⲆ = {
            x: 0,
            y: 0
        };
        this.Ⲇᐃⵠⵠᐃᐃⵠ = 0;
        this.ⵠⵠⵠΔΔⲆⲆ = 0;
        this.angle = 0;
        this.state = this.IDLE;
        this.ⲆᐃⲆΔ = this.ᐃᐃⲆᐃᐃⵠⲆ;
        this.down = function () {
            this.state = this.ΔⵠΔΔᐃⲆⵠ;
        };
        this.up = function () {
            this.state = this.Ⲇᐃᐃⵠᐃ;
        };
        this.ΔΔΔ = function () {
            if (this.ᐃⲆΔⲆ.x != this.Ⲇᐃⵠⵠᐃᐃⵠ || this.ⵠⵠⵠΔΔⲆⲆ != this.ᐃⲆΔⲆ.y) {
                this.Ⲇᐃⵠⵠᐃᐃⵠ = this.ᐃⲆΔⲆ.x;
                this.ⵠⵠⵠΔΔⲆⲆ = this.ᐃⲆΔⲆ.y;
                return kk;
            } else {
                return f;
            }
        };
    }();
    var wf = 0;
    var $w = 0;
    var _w = new function (c, e, f) {
        this.ⵠΔ = c;
        this.Ⲇ = e;
        this.ⵠⵠⲆⲆⵠⲆᐃ = {
            translate: {
                y: 0,
                x: 0
            },
            style: document.getElementById("loading").style,
            ΔΔΔ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        this.ⵠⵠⲆⲆⵠⲆᐃ.style.position = "absolute";
        this.ⵠⵠⲆⲆⵠⲆᐃ.style.display = "inline-block";
        this.ⵠⵠⲆⲆⵠⲆᐃ.ΔΔΔ();
        this.ⵠⵠΔᐃᐃ = Yq;
        this.stop = function () {
            this.ⵠⵠΔᐃᐃ = ps;
        };
        this.ⵠΔΔᐃⲆⵠⵠ = {
            total: 1
        };
        var i = this;
        function j() { }
        var k = 0;
        function n(a) {
            if (a.indexOf("normal-mode") !== -1 || a.indexOf("player0") !== -1) {
                return 1;
            } else if (a.indexOf("day-bag") !== -1 || a.indexOf("night-bag") !== -1 || a.indexOf("day-book") !== -1 || a.indexOf("night-book") !== -1 || a.indexOf("day-player") !== -1 || a.indexOf("night-player") !== -1 || a.indexOf("day-accessory") !== -1 || a.indexOf("night-accessory") !== -1 || a.indexOf("day-crate") !== -1 || a.indexOf("night-crate") !== -1 || a.indexOf("day-skin") !== -1 || a.indexOf("night-skin") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-rock") !== -1 || a.indexOf("night-rock") !== -1 || a.indexOf("day-flower") !== -1 || a.indexOf("night-flower") !== -1 || a.indexOf("day-leaf") !== -1 || a.indexOf("night-leaf") !== -1 || a.indexOf("day-herb") !== -1 || a.indexOf("night-herb") !== -1 || a.indexOf("day-shell") !== -1 || a.indexOf("night-shell") !== -1 || a.indexOf("day-hand-skin") !== -1 || a.indexOf("night-hand-skin") !== -1 || a.indexOf("bignight") !== -1 || a.indexOf("bigday") !== -1 || a.indexOf("bigzday") !== -1 || a.indexOf("bigznight") !== -1 || a.indexOf("tutorial-box") !== -1 || a.indexOf("tuto-") !== -1 || a.indexOf("-leaderboard-") !== -1 || a.indexOf("-lead-") !== -1 || a.indexOf("day-lava-") !== -1 || a.indexOf("night-lava-") !== -1 || a.indexOf("-click.png") !== -1 || a.indexOf("-in.png") !== -1 || a.indexOf("-fog") !== -1 || a.indexOf("-lava") !== -1 || a.indexOf("pebblecompo") !== -1 || a.indexOf("avatar-player") !== -1) {
                return 0;
            } else {
                return 1;
            }
        }
        this.ᐃⵠⵠΔⲆ = function () {
            i.ΔΔΔ();
            if (++k == 40) {
                i.stop();
                j();
                return;
            }
            aj.setTimeout(i.ᐃⵠⵠΔⲆ, 33);
        };
        this.ΔⵠᐃⵠⲆ = function (a) {
            j = a;
            i.ᐃⵠⵠΔⲆ();
        };
        new Date().getTime();
        Object.keys(ⲆⲆ).length;
        console.log(undefined, undefined);
        for (var o in ⲆⲆ) {
            if (n(ⲆⲆ[o]) === 0) {
                0;
            }
        }
        console.log(Gj, Zq);
        function p() {
            if (this.ⵠⲆᐃᐃᐃᐃⲆ !== 0) {
                return this.ⵠⲆᐃᐃᐃᐃⲆ;
            } else {
                this.ⵠⲆᐃᐃᐃᐃⲆ = 2;
                this.src = this.ᐃⲆᐃΔᐃ;
                return 0;
            }
        }
        function l(a) {
            this.ⵠⲆᐃᐃᐃᐃⲆ = 1;
        }
        var g = 0;
        function q() {
            console.log(Db);
            if (g !== 1) {
                g = 1;
                console.log(Bh);
                if (Ns !== qt) {
                    Ns();
                }
                qt();
                var a = ⲆⵠΔᐃ.ⵠⵠᐃᐃΔⵠΔ("server");
                if (a !== null) {
                    Δⵠᐃⵠ.ⵠⲆΔⲆⵠᐃᐃ = 1;
                    Δⵠᐃⵠ.ⲆΔᐃⲆⲆ = [{
                        nu: 0,
                        m: 100,
                        i: "server" + a + ".starve.io",
                        p: 443,
                        a: a,
                        ssl: 1
                    }];
                }
                Δⵠᐃⵠ.ⲆⲆΔᐃΔΔᐃᐃⵠ();
                setTimeout(f, 100);
            }
        }
        function b() {
            let a = function () {
                Δⵠᐃⵠ.ᐃΔᐃΔᐃⲆᐃ(q);
            };
            if (document.fonts && document.fonts.check) {
                if (document.fonts.check("1em Baloo Paaji")) {
                    setTimeout(a, 100);
                } else {
                    setTimeout(b, 100);
                }
            } else {
                setTimeout(a, 1000);
            }
        }
        function d() {
            this.ᐃⵠⵠᐃᐃΔᐃ++;
            console.warn(`Image (${this.src}) failed to load, attempt ${this.ᐃⵠⵠᐃᐃΔᐃ}`, this);
            if (this.ᐃⵠⵠᐃᐃΔᐃ > 3) {
                console.warn("Failed to load image too many times");
            }
            var a = this.ᐃⵠⵠᐃᐃΔᐃ;
            var b = this.src;
            var c = n(b) === 0 ? 10000 : 2000;
            setTimeout(function () {
                for (var c in ⵠⲆⲆᐃΔⲆⵠ) {
                    if (b.indexOf(ⵠⲆⲆᐃΔⲆⵠ[c]) !== -1) {
                        ⲆⲆ[c] = new Image();
                        ⲆⲆ[c].onload = l;
                        ⲆⲆ[c].onerror = d;
                        ⲆⲆ[c].ᐃⵠⵠᐃᐃΔᐃ = a;
                        ⲆⲆ[c].src = b;
                        break;
                    }
                }
            }, c);
        }
        function s(a) {
            for (var b in ⲆⲆ) {
                var c = ⲆⲆ[b];
                if (typeof c === "string" && n(c) === a) {
                    ⲆⲆ[b] = new Image();
                    ⲆⲆ[b].ⵠⲆᐃᐃᐃᐃⲆ = 0;
                    ⲆⲆ[b].ᐃⵠⵠᐃᐃΔᐃ = 0;
                    ⲆⲆ[b].onload = l;
                    ⲆⲆ[b].onerror = d;
                    ⲆⲆ[b].ⲆⲆⲆⵠᐃΔⲆ = p;
                    ⲆⲆ[b].ᐃⲆᐃΔᐃ = c;
                }
            }
        }
        s(1);
        s(0);
        Yd(1, "l", 20, "#000");
        b();
        tc();
        this.ΔΔΔ = function () {
            this.ⵠⵠⲆⲆⵠⲆᐃ.translate.x = (so - 500) / 2;
            this.ⵠⵠⲆⲆⵠⲆᐃ.translate.y = (gq - 150) / 2;
            var a = 2500 / (40 - k + 1) - 48;
            this.ⵠⵠⲆⲆⵠⲆᐃ.translate.y -= a;
            this.ⵠⵠⲆⲆⵠⲆᐃ.ΔΔΔ();
        };
        this.ⵠⵠⲆⲆⵠⲆᐃ.ΔΔΔ();
        this.ⲆⲆΔⵠ = function () {
            try {
                _m();
            } catch (a) { }
            this.ΔΔΔ();
        };
    }(ao, ro, function () {
        Rm();
        Yw = new Qw(ao, ro);
        (df = new Kw(ao, ro)).ΔⵠΔⲆⲆⵠⵠⵠⲆ();
        Xw = new Mw(ao, ro);
        cf = new tw();
        Ww = new Cw();
        _w.ΔⵠᐃⵠⲆ(function () {
            _w.ⵠⵠⲆⲆⵠⲆᐃ.style.display = "none";
            df.ⲆⲆᐃᐃᐃ();
        });
    });
    function Af() {
        try {
            aj.Widget.adsRefresh();
        } catch (a) { }
    }
    aj.onbeforeunload = function () {
        if (Yw.ⵠⵠΔᐃᐃ) {
            return "Are you sure you want quit starve.io ;-; ?";
        }
    };
    Rq();
    (function b(a) {
        aj.requestAnimationFrame(b);
        $w = (a - wf) / 1000;
        wf = a;
        $w = $w > 1 ? 1 : $w;
        if (Yw.ⵠⵠΔᐃᐃ) {
            Yw.ⲆⲆΔⵠ();
        } else {
            ro.clearRect(0, 0, so, gq);
            if (_w.ⵠⵠΔᐃᐃ) {
                _w.ⲆⲆΔⵠ();
            } else if (df.ⵠⵠΔᐃᐃ) {
                df.ⲆⲆΔⵠ();
            } else if (Xw.ⵠⵠΔᐃᐃ) {
                Xw.ⲆⲆΔⵠ();
            }
        }
    })(0);
    var xf = 0;
    function ax() {
        Mf.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", true);
        Mf.send();
    }
    var Mf = new XMLHttpRequest();
    function Bf(b, c, d, e, f) {
        const g = ((d + 36213) * 1103515245 + 12345) % 2147483648;
        const a = (24 << (e >> 16 & 255)) + (0 << (e & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 24 & 255));
        const h = Gg(b ^ 42545, (c | 28786) & ~(c & 28786));
        Ek(g, a);
        return ~(h & 51018) & 51018 | ~(h & 51018) & h;
    }
    Mf.onreadystatechange = function () {
        if (this.readyState === 4) {
            this.status;
        }
    };
    var Df = "https://token.starve.io/";
    var If = "https://token2.starve.io/";
    var Ef = 0;
    var Sf = 1;
    var Qf = 4;
    var _f = Bs;
    var bx = undefined;
    var cx = Zq;
    var dx = 0;
    aj.ⲆΔΔᐃⵠΔᐃ = function () {
        dx = 1;
    };
    var ex = {
        ᐃⲆⵠⲆᐃΔⵠΔⵠ: "ACCESS_TOKEN"
    };
    var Gf = document.createElement("script");
    Gf.type = "text/javascript";
    Gf.async = true;
    Gf.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
    Gf.addEventListener("load", function (a) {
        aj.XPayStationWidget.init(ex);
        aj.XPayStationWidget.on("status-done", $f);
    }, false);
    document.getElementsByTagName("head")[0].appendChild(Gf);
    aj.fbAsyncInit = function () {
        Yf();
        console.log(Zq);
    };
    (function (a, b, c) {
        var d;
        var e = a.getElementsByTagName(b)[0];
        if (!a.getElementById(c)) {
            (d = a.createElement(b)).id = c;
            d.src = "https://connect.facebook.net/en_US/sdk.js";
            e.parentNode.insertBefore(d, e);
        }
    })(document, "script", "facebook-jssdk");
    var Wf = Mq;
    var fx = ll;
    function gx() {
        aj.gapi.auth2.init({
            client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
            scope: "https://www.googleapis.com/auth/userinfo.profile"
        }).then(a => {
            (Wf = a).isSignedIn.listen(Hf);
            Wf.currentUser.listen(qf);
            if (Wf.isSignedIn.get()) {
                Wf.signIn();
            }
            Uf();
        });
    }
    function Hf(a) { }
    function qf(a) {
        if (bx === Xn && fx !== _r && (bx = fx.getAuthResponse().id_token) !== undefined) {
            _f = Ef;
            cx = fx.getBasicProfile().getId();
            aj.ⲆΔΔᐃⵠΔᐃ();
            return;
        }
        if (a !== undefined && a.isSignedIn() === true) {
            cx = (fx = a).id;
            cx = fx.getBasicProfile().getId();
            bx = fx.getAuthResponse().id_token;
            _f = Ef;
            aj.ⲆΔΔᐃⵠΔᐃ();
        }
    }
    function Uf() {
        if (Wf) {
            fx = Wf.currentUser.get();
        }
    }
    function Yf() {
        if (aj.FB) {
            aj.FB.init({
                appId: "642017356260407",
                cookie: Uq,
                xfbml: sn,
                version: "v15.0"
            });
        }
        if (cx === ll) {
            (function () {
                try {
                    if (aj.FB && aj.FB.getUserID()) {
                        cx = aj.FB.getUserID();
                        if (bx === Bs) {
                            aj.FB.getLoginStatus(function () {
                                _f = Sf;
                                bx = aj.FB.getAuthResponse().accessToken;
                                aj.ⲆΔΔᐃⵠΔᐃ(cx);
                            });
                        }
                    }
                } catch (a) { }
                try {
                    cx = fx.getBasicProfile().getId();
                } catch (a) { }
            })();
        }
    }
    function Kf(a) {
        var b = new XMLHttpRequest();
        b.open("GET", Df + "setRegion?token=" + bx + "&userid=" + cx + "&region=" + a);
        b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        b.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {
                if (b.responseText !== "0") {
                    df.ⵠᐃᐃᐃ(df.ⵠⵠⵠⵠⲆ);
                } else {
                    df.ⵠᐃᐃᐃ(df.Ⲇⵠⵠⵠᐃ);
                }
            }
        };
        b.send();
    }
    function Vf() {
        if (df.ᐃᐃΔᐃΔ >= 300 || df.ⲆᐃⵠⵠᐃᐃΔ <= 0) {
            var a = document.getElementById("account_nickname_input").value.trim();
            document.getElementById("account_nickname_input").value = a;
            if (a.length >= 1 && a.length <= 20) {
                var b = new XMLHttpRequest();
                b.open("GET", Df + "changeNickname?token=" + bx + "&userid=" + cx + "&nickname=" + encodeURIComponent(a));
                b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                b.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
                        var a = Number(b.responseText);
                        if (a > 0) {
                            df.ᐃᐃΔᐃΔ -= a;
                        }
                        df.ⲆᐃⵠⵠᐃᐃΔ = 1;
                        df.ⵠᐃᐃᐃ(df.ΔΔᐃᐃⲆ);
                    }
                };
                b.send();
            }
        }
    }
    function Xf(a) {
        if (cx) {
            var b = new XMLHttpRequest();
            b.open("GET", Df + "xsolla?userid=" + cx + "&item=" + a);
            b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            b.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
                    ex.access_token = b.responseText;
                    aj.XPayStationWidget.init(ex);
                    aj.XPayStationWidget.open();
                }
            };
            b.send();
        }
    }
    function Zf(b, c, d, e) {
        b = b === undefined ? df.ᐃⲆⲆⵠⵠⵠΔ : b;
        c = c === At ? df.ᐃⵠⵠⵠⵠⵠᐃ : c;
        d = d === _r ? df.ΔⲆⵠⵠᐃᐃᐃ : d;
        e = e === undefined ? df.ⵠΔⵠⵠⵠⵠⲆ : e;
        if (b !== df.ᐃⲆⲆⵠⵠⵠΔ || df.ᐃⵠⵠⵠⵠⵠᐃ !== c || d !== df.ΔⲆⵠⵠᐃᐃᐃ || e !== df.ⵠΔⵠⵠⵠⵠⲆ) {
            df.ᐃⲆⲆⵠⵠⵠΔ = b;
            df.ᐃⵠⵠⵠⵠⵠᐃ = c;
            df.ΔⲆⵠⵠᐃᐃᐃ = d;
            df.ⵠΔⵠⵠⵠⵠⲆ = e;
            if (df.ΔΔΔᐃᐃᐃⵠ === e) {
                e = "0";
            } else if (df.ⵠᐃᐃᐃⵠⵠᐃ === e) {
                e = "1";
            } else if (e === df.ⲆⵠΔᐃⵠᐃⲆ) {
                e = "2";
            } else if (df.ⵠⵠΔⲆΔᐃᐃ === e) {
                e = "3";
            } else if (df.ⲆΔΔᐃᐃᐃᐃ === e) {
                e = "4";
            } else if (df.ΔΔᐃⲆΔⵠᐃ === e) {
                e = "5";
            }
            if (df.ᐃⵠⲆᐃⵠⵠⵠ === c) {
                c = "total";
            } else if (df.ⵠᐃᐃΔⲆⵠⵠ === c) {
                c = "normal";
            } else if (df.ΔΔᐃⲆⲆⵠⵠ === c) {
                c = "zombie";
            } else if (c === df.ᐃᐃⵠΔᐃᐃⲆ) {
                c = "vampire";
            } else if (df.ⲆⲆᐃᐃⲆⲆⲆ === c) {
                c = "forest";
            }
            if (b === df.ᐃᐃⵠⲆᐃⲆⲆ) {
                b = "all";
            }
            if (b === df.ᐃⲆᐃΔⲆΔⲆ) {
                b = "week";
            }
            if (df.ᐃⲆΔΔᐃⵠⲆ === b) {
                b = "today";
            }
            if (df.ⲆᐃⲆⵠᐃⲆⵠ === d) {
                d = "kill";
            } else if (d === df.ⲆᐃᐃᐃᐃᐃⲆ) {
                d = "score";
            } else if (df.ⲆⵠⲆΔⵠⵠᐃ === d) {
                d = "time";
            }
            var f = new XMLHttpRequest();
            f.open("GET", Df + "leaderboard?range=" + b + "&mode=" + c + "&sort=" + d + "&season=" + e);
            f.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            f.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200 && f.responseText !== "0") {
                    for (var a = JSON.parse(f.responseText), b = "", c = 0; a.length > c; c++) {
                        ᐃΔⵠᐃⵠ = a[c];
                        var d = ᐃΔⵠᐃⵠ[1];
                        try {
                            if (d.indexOf("Starver#") === -1) {
                                d = aj.decodeURIComponent(aj.escape(aj.atob(d)));
                            }
                        } catch (a) { }
                        b += "<div class=\"lineLeaderboard\">";
                        b += "<div class=\"rank\">";
                        b += c + 1 + "";
                        b += "</div>";
                        b += "<div class=\"name\">";
                        b += d;
                        b += "</div>";
                        b += "<div class=\"lvl\">";
                        b += df.ⲆⵠⵠᐃᐃΔᐃ(ᐃΔⵠᐃⵠ[6]) + 1 + "";
                        b += "</div>";
                        b += "<div class=\"kills\">";
                        b += ᐃΔⵠᐃⵠ[5] + "";
                        b += "</div>";
                        b += "<div class=\"time\">";
                        b += ᐃΔⵠᐃⵠ[4] + "";
                        b += "</div>";
                        b += "<div class=\"score\">";
                        b += ᐃΔⵠᐃⵠ[3] + "";
                        b += "</div>";
                        b += "</div>";
                    }
                    document.getElementById("leaderboard").innerHTML = b;
                }
            };
            f.send();
        }
    }
    function $f() {
        var a = new XMLHttpRequest();
        a.open("GET", Df + "claimBread?userid=" + cx);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
                var b = Number(a.responseText);
                if (!isNaN(b)) {
                    df.ᐃᐃΔᐃΔ = b;
                }
            }
        };
        a.send();
    }
    function hx(a, b) {
        if (b > df.ᐃᐃΔᐃΔ) {
            df.ⵠᐃᐃᐃ(df.ⵠⲆᐃⵠΔ);
        } else {
            var c = new XMLHttpRequest();
            c.open("GET", Df + "buyKit?token=" + bx + "&userid=" + cx + "&kit=" + a);
            c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            c.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200 && c.responseText !== "0") {
                    var a = JSON.parse(c.responseText);
                    df.ᐃᐃΔᐃΔ -= b;
                    df.ⵠⲆΔⲆΔ = Date.now() + Number(a);
                }
            };
            c.send();
        }
    }
    function ix(a, b) {
        if (df.Ⲇⵠᐃⵠᐃ <= 0) {
            if (b > df.ᐃᐃΔᐃΔ) {
                df.ⵠᐃᐃᐃ(df.ⵠⲆᐃⵠΔ);
            } else {
                df.Ⲇⵠᐃⵠᐃ = 2;
                df.ΔᐃⵠᐃⵠᐃⲆ = 0;
                df.ΔⵠᐃⲆⵠⵠⲆ = 100;
                var c = new XMLHttpRequest();
                c.open("GET", Df + "buySpin?token=" + bx + "&userid=" + cx + "&spin=" + a);
                c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                c.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        if (c.responseText !== "0") {
                            var a = JSON.parse(c.responseText);
                            df.ⵠⲆⵠΔⵠᐃⲆⲆΔ(Math.PI * a.rand * 2, a.type, a.id);
                            df.ᐃᐃΔᐃΔ -= b;
                        } else {
                            df.Ⲇⵠᐃⵠᐃ = 0;
                        }
                    }
                };
                c.send();
            }
        }
    }
    aj.onload = function () {
        aj.gapi.load("auth2", gx);
    };
})();
