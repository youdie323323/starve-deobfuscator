(function () {
  const oc = window;
  var P = 222;
  if (P >= 3) {
    P = 82;
  }
  var Tc = 211;
  if (Tc >= 12) {
    Tc = 252;
  }
  var Of = 86;
  if (Of >= 9) {
    Of = 163;
  }
  let aj = 41;
  const bj = function (a) {
    let b = "";
    for (let c = 0; c < a.length; c++) {
      b += oc.String.fromCharCode(a[c] ^ aj++ % 255);
    }
    return b;
  };
  var a = 173;
  var cj = 132;
  if (cj > 7) {
    cj = 124;
  }
  if (a == 8) {
    a = 81;
  }
  var dj = 167;
  if (dj == 5) {
    dj = 53;
  }
  var ej = 90;
  if (ej == 7) {
    ej = 169;
  }
  var fj = 46;
  if (fj === 2) {
    fj = 212;
  }
  var gj = 185;
  if (gj === 14) {
    gj = 249;
  }
  var hj = 41;
  if (hj > 9) {
    hj = 109;
  }
  var ij = 188;
  if (ij >= 13) {
    ij = 81;
  }
  var jj = 117;
  if (jj > 1) {
    jj = 170;
  }
  Math.floor(51[51 .ᐃᐃᐃΔⵠⲆⲆΔⲆ]);
  var kj = 99;
  if (kj === 8) {
    kj = 122;
  }
  var lj = 182;
  if (lj > 6) {
    lj = 157;
  }
  var mj = 198;
  if (mj === 4) {
    mj = 86;
  }
  Math.floor(80[80 .ⵠᐃⵠΔᐃᐃⲆⲆⲆ]);
  const nj = 0;
  const C = 15;
  function T(a) {
    return oc.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ᐃΔⲆΔΔⵠⲆ: 14853923,
      ⲆᐃⲆᐃⵠΔΔⲆᐃ: 12202500,
      ⵠⲆⵠⵠΔᐃⵠΔΔ: 725874,
      ΔⵠΔᐃΔⵠΔ: 4150908
    };
  })();
  const f = false;
  const z = 11;
  const y = 18;
  const w = 255;
  const k = 3;
  const A = true;
  const x = -8;
  const J = 14;
  const M = 12;
  const B = 10;
  const E = 100;
  const D = -4;
  const oj = undefined;
  const I = 255;
  const Q = 20;
  const S = 4;
  const R = 1;
  const F = 19;
  const j = 13;
  const L = 2;
  const G = 8;
  const W = 17;
  const q = 2;
  const N = 16;
  const O = 4;
  const H = 6;
  const U = 5;
  const Y = 2048;
  const K = 9;
  const V = 1 << 12;
  const X = 7;
  const Z = 13;
  const _ = 6;
  const ee = 4;
  const ie = A;
  const ne = 3;
  const oe = 12;
  const ae = 4;
  const re = 0;
  let se;
  let te;
  let pj;
  let qj = oj;
  const rj = 0;
  let be = oj;
  const sj = 9;
  let ve = oj;
  const tj = 256;
  let ce = oj;
  const uj = 15;
  const Ce = 10;
  const Te = 0;
  const fe = 9;
  let ze = oj;
  let vj = "_";
  let wj = [];
  const Pe = 100;
  let ke;
  const xj = 16;
  let xe = oj;
  const yj = 15;
  let Me;
  const zj = 17;
  const Ee = ie;
  let De;
  const Aj = oj;
  let Se;
  let Bj = Aj;
  const Cj = 10;
  let Re = oj;
  const Dj = 20;
  let je;
  let Ej = Aj;
  let Fj = oj;
  const Gj = 13;
  const qe = 5;
  const Ne = 1;
  const Oe = 9;
  const He = 14;
  let Ue;
  let Hj = oj;
  const Ij = f;
  const Ve = 18;
  const Xe = 255;
  const Ze = 6;
  let $e = Aj;
  const Jj = 5;
  let ii;
  const Kj = 255;
  const ni = 19;
  let oi;
  let Lj;
  let Mj = Aj;
  let Nj = Aj;
  let Oj = oj;
  let Pj = oj;
  let Qj = Aj;
  const Rj = 16;
  const bi = 17;
  let di = oj;
  let Sj = Aj;
  const Tj = 12;
  let ci;
  let Uj;
  let Vj;
  let Wj = Aj;
  const Xj = 14;
  let zi = oj;
  const Yj = 11;
  const wi = Ee;
  const Pi = 8;
  let ki = Aj;
  let Zj = oj;
  const $j = 9;
  let Ji = Aj;
  let _j = oj;
  let ak = oj;
  let bk = Aj;
  const ck = 8;
  let Ii;
  const dk = 19;
  let Qi = Aj;
  const ek = 10;
  let Ri = Aj;
  const fk = 15;
  const ji = 2;
  const Li = 16;
  const Gi = 20;
  const Wi = 9;
  let qi;
  const gk = 256;
  const Oi = 9;
  const Hi = 3;
  const Ui = 4;
  let Yi = Aj;
  const hk = 8;
  let Vi;
  const ik = 0;
  let Zi;
  let jk = Aj;
  let kk = Aj;
  const lk = 7;
  const mk = 5;
  let nk = 0;
  if (!oc.WebAssembly || !oc.WebAssembly.instantiate) {
    ᐃⵠⵠⵠⲆᐃⵠᐃᐃ();
  }
  const ok = {
    Date: Date
  };
  oc.WebAssembly.instantiate(Uint8Array.from(oc.atob(""), function (a) {
    return a.charCodeAt(0);
  }), ok).then(function (a) {
    se = a.instance;
    te = se.exports;
    qj = te.memory;
    pj = qj.buffer;
    be = te.__pin;
    ve = te.__unpin;
    ce = te.__new;
    ze = te.__collect;
    vj = "_";
    for (let b = 0; b < 31; b++) {
      wj[b] = te[vj + b];
    }
    ke = te.__rtti_base;
    xe = new Float32Array(pj);
    Me = new Float64Array(pj);
    De = new BigUint64Array(pj);
    Bj = new Uint32Array(pj);
    Se = new Uint16Array(pj);
    Re = new Uint8Array(pj);
    je = new BigInt64Array(pj);
    Ej = new Int32Array(pj);
    Fj = new Int16Array(pj);
    Hj = new Int8Array(pj);
    kk = wj[24];
    Yi = wj[10];
    Mj = wj[9];
    ki = wj[4];
    Nj = wj[14];
    ak = wj[20];
    Wj = wj[16];
    Qi = wj[22];
    Vi = wj[1];
    ii = wj[17];
    Oj = wj[28];
    _j = wj[30];
    Zj = wj[15];
    $e = wj[7];
    ci = wj[26];
    Uj = wj[3];
    zi = wj[2];
    Ii = wj[19];
    jk = wj[13];
    Ri = wj[18];
    Lj = wj[12];
    Ji = wj[27];
    bk = wj[29];
    Pj = wj[11];
    qi = wj[25];
    di = wj[21];
    Sj = wj[0];
    Ue = wj[5];
    Vj = wj[6];
    oi = wj[8];
    Qj = wj[23];
    nk = 1;
    if (Zi) {
      Zi();
    }
  });
  const pk = function (a) {
    return Bj[(ke + 4 >>> 2) + (a << 1)];
  };
  function qk(a) {
    return 31 - Math.clz32(a >>> 6 & 31);
  }
  const rk = Ij;
  const sk = Aj;
  const tk = 19;
  const uk = 100;
  const vk = 11;
  const wk = 100;
  const xk = 1;
  const yk = 16;
  const zk = Ij;
  const Ak = 9;
  const Bk = 5;
  const Ck = 1;
  const Dk = 16;
  function Ek(a, b, c) {
    if (c) {
      switch (a) {
        case 2:
          return xe;
        case 3:
          return Me;
      }
    } else {
      switch (a) {
        case 0:
          if (b) {
            return Hj;
          } else {
            return Re;
          }
        case 1:
          if (b) {
            return Fj;
          } else {
            return Se;
          }
        case 2:
          if (b) {
            return Ej;
          } else {
            return Bj;
          }
        case 3:
          if (b) {
            return je;
          } else {
            return De;
          }
      }
    }
  }
  function Fk(b) {
    const c = Bj[b + x >>> 2];
    const d = pk(c);
    const e = qk(d);
    let f = d & O ? b : Bj[b + 4 >>> 2];
    const g = d & q ? Bj[b + 12 >>> 2] : Bj[f + D >>> 2] >>> e;
    return Ek(e, d & 2048, d & V).subarray(f >>>= e, f + g);
  }
  const Gk = 13;
  const Hk = 0;
  const Ik = 6;
  const Jk = 255;
  const Kk = zk;
  function Lk(a, b, c) {
    $e(Ft, a, b, c);
    const d = function (a, b, c) {
      Sj(Ft, a, b, c);
      const d = Tf(Ht[0], Ht[1], Ht[2], Ht[0], Ht[1], Ht[2]);
      (function (b, c, d, e, f) {
        Vj(Ft, b, c, d, e, f);
        const g = function (a, b, c, d) {
          Ri(Ft, a, b, c, d);
          const e = Rf(Ht[0], Ht[1]);
          Tb(Ht[2], Ht[3], Ht[0], Ht[1], Ht[2]);
          return e ^ 30370;
        }(Ht[0], Ht[1], Ht[2], Ht[3]);
        Tf(Ht[4], Ht[0], Ht[1], Ht[2], Ht[3], Ht[4]);
      })(Ht[0], Ht[1], Ht[2], Ht[0], Ht[1]);
      return d ^ 319;
    }(Ht[0], Ht[1], Ht[2]);
    Co(Ht[0], Ht[1], Ht[2]);
    return ~(d & 52864) & (d | 52864);
  }
  const Mk = "development";
  const Nk = "production";
  const Ok = 18;
  const Pk = 8;
  const Qk = 6;
  const Rk = 9;
  const Sk = 13;
  const Tk = A;
  function Uk(a) {
    this.ⵠⲆⵠΔ = 2147483648;
    this.a = 1103515245;
    this.c = 12345;
    this.state = a || Math.floor(Math.random() * (this.ⵠⲆⵠΔ - 1));
  }
  const Vk = 17;
  const Wk = 2;
  const Xk = A;
  Uk.prototype.random = function () {
    this.state = (this.state * this.a + this.c) % this.ⵠⲆⵠΔ;
    return this.state / this.ⵠⲆⵠΔ;
  };
  const Yk = 14;
  Uk.prototype.ᐃᐃⵠΔⲆΔᐃ = function (a) {
    this.state = a;
  };
  const Zk = 12;
  ⲆᐃⵠᐃⲆᐃⵠ = 10000;
  const $k = 16;
  ΔⲆⲆΔⲆΔⲆ = [];
  const _k = 100;
  const gl = 9;
  const Lm = 255;
  const no = 12;
  const aq = 4;
  var bq = new Uk();
  bq.ᐃᐃⵠΔⲆΔᐃ(new Date().getTime());
  const cq = 10;
  for (var dq = 0; dq < ⲆᐃⵠᐃⲆᐃⵠ; dq++) {
    ΔⲆⲆΔⲆΔⲆ.push(bq.random());
  }
  function eq(c, e, f, i, j, k) {
    const a = ((39488 + c) * 214013 + 2531011) % 4294967296;
    const m = ~(e & 49976) & e | ~(e & 49976) & 49976;
    const n = ~(f & 35856) & f | ~(f & 35856) & 35856;
    const h = i ^ 52219;
    const g = (j + 3575) % 65503;
    const l = ~(k & 6932) & k | ~(k & 6932) & 6932;
    const o = Gn(a, m, n, h, g);
    const b = function (c, d, e, f, i, j) {
      const a = c ^ 30142;
      const k = (d + 63025) % 65493;
      const m = e ^ 30777;
      const h = ((45939 + f) * 22695477 + 1) % 4294967296;
      const g = (8 << (i >> 16 & 255)) + (32 << (i >> 24 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 8 & 255));
      const l = (j | 45652) & ~(j & 45652);
      const n = Gn(a, k, m, h, g);
      nn(l, a, k, m, h);
      Dn(g, l, a, k, m, h);
      return n ^ 60048;
    }(l, a, m, n, h, g);
    xn(l, a, m, n, h, g);
    const d = (1013904223 + (60709 + (o ^ b)) * 1664525) % 4294967296;
    return ~(d & 42138) & d | ~(d & 42138) & 42138;
  }
  function fq(b, c) {
    const d = (8 << (b & 255)) + (16 << (b >> 24 & 255)) + (0 << (b >> 16 & 255)) + (24 << (b >> 8 & 255));
    const e = ~(c & 36775) & 36775 | ~(c & 36775) & c;
    const f = function (b, c, d, e, f) {
      const i = ((61981 + b) * 2147483629 + 2147483587) % 2147483647;
      const a = ~(c & 10800) & c | ~(c & 10800) & 10800;
      const j = ((d + 9677) * 1664525 + 1013904223) % 4294967296;
      const k = (16 << (e >> 24 & 255)) + (8 << (e >> 8 & 255)) + (24 << (e >> 16 & 255)) + (0 << (e & 255));
      const h = (8 << (f >> 8 & 255)) + (24 << (f >> 16 & 255)) + (16 << (f & 255)) + (0 << (f >> 24 & 255));
      const g = es(i, a, j);
      const l = function (c, d, e, f, i, j) {
        const a = (24 << (c & 255)) + (16 << (c >> 8 & 255)) + (0 << (c >> 24 & 255)) + (8 << (c >> 16 & 255));
        const k = (0 << (d >> 24 & 255)) + (24 << (d >> 16 & 255)) + (8 << (d & 255)) + (16 << (d >> 8 & 255));
        const m = (f | 6805) & ~(f & 6805);
        const h = (24 << (i & 255)) + (8 << (i >> 16 & 255)) + (0 << (i >> 8 & 255)) + (16 << (i >> 24 & 255));
        const g = (2147483587 + (j + 22766) * 2147483629) % 2147483647;
        const l = _f(a, k, (2147483587 + (e + 37533) * 2147483629) % 2147483647);
        const n = function (b, c, d, e, f) {
          const g = (24 << (e >> 16 & 255)) + (8 << (e >> 24 & 255)) + (16 << (e >> 8 & 255)) + (0 << (e & 255));
          const a = ((f + 42867) * 1103515245 + 12345) % 2147483648;
          const i = es(~(b & 10995) & (b | 10995), c ^ 40982, ((16108 + d) * 22695477 + 1) % 4294967296);
          const j = fs(g, a);
          return (24 << ((i ^ j) >> 0 & 255)) + (16 << ((i ^ j) >> 16 & 255)) + (8 << ((i ^ j) >> 8 & 255)) + (0 << ((i ^ j) >> 24 & 255));
        }(m, h, g, a, k);
        return (1 + (1104 + (l ^ n)) * 22695477) % 4294967296;
      }(k, h, i, a, j, k);
      return (24 << ((g ^ l) >> 8 & 255)) + (16 << ((g ^ l) >> 24 & 255)) + (0 << ((g ^ l) >> 16 & 255)) + (8 << ((g ^ l) & 255));
    }(d, e, d, e, d);
    const g = lb(e, d, e);
    return (8 << ((f ^ g) & 255)) + (0 << ((f ^ g) >> 16 & 255)) + (16 << ((f ^ g) >> 8 & 255)) + (24 << ((f ^ g) >> 24 & 255));
  }
  function gq(b, c, d, e) {
    const f = ~(b & 59259) & b | ~(b & 59259) & 59259;
    const i = ~(c & 56097) & c | ~(c & 56097) & 56097;
    const a = ((43315 + d) * 1664525 + 1013904223) % 4294967296;
    const j = (8 << (e >> 24 & 255)) + (32 << (e >> 32 & 255)) + (24 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
    const k = function (c, e, f, i, j, k) {
      const a = c ^ 10715;
      const m = (24 << (e >> 16 & 255)) + (16 << (e >> 32 & 255)) + (32 << (e >> 8 & 255)) + (8 << (e >> 24 & 255));
      const n = (8 << (f >> 16 & 255)) + (32 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (24 << (f >> 32 & 255));
      const h = i ^ 40782;
      const g = j ^ 41301;
      const l = ~(k & 12091) & (k | 12091);
      const o = yn(a, m, n, h, g, l);
      yn(a, m, n, h, g, l);
      _n(a, m, n, h, g);
      const b = (o | 3006) & ~(o & 3006);
      return ~(b & 24460) & (b | 24460);
    }(f, i, a, j, f, i);
    const h = Hn(a, j, f, i, a);
    yn(j, f, i, a, j, f);
    const g = (1013904223 + (26191 + (k ^ h)) * 1664525) % 4294967296;
    return (g | 38630) & ~(g & 38630);
  }
  const en = 3;
  const tn = 5;
  function nn(b, c, d, e, f) {
    const i = ((b + 14772) * 2147483629 + 2147483587) % 2147483647;
    const a = c ^ 63080;
    const j = ((d + 60304) * 22695477 + 1) % 4294967296;
    const k = ~(e & 5467) & 5467 | ~(e & 5467) & e;
    const h = (f | 40165) & ~(f & 40165);
    const g = function (b, c, d, e) {
      const f = (b | 57611) & ~(b & 57611);
      const i = ((c + 56889) * 1664525 + 1013904223) % 4294967296;
      const a = d ^ 62842;
      const j = ~(e & 1179) & e | ~(e & 1179) & 1179;
      const k = on(f, i, a, j);
      const h = Fn(f, i, a, j);
      gq(f, i, a, j);
      const g = (24 << ((k ^ h) >> 24 & 255)) + (8 << ((k ^ h) >> 16 & 255)) + (16 << ((k ^ h) >> 32 & 255)) + (32 << ((k ^ h) >> 8 & 255));
      return ~(g & 63304) & (g | 63304);
    }(i, a, j, k);
    const l = Hn(h, i, a, j, k);
    return ((28765 + ((16 << ((g ^ l) >> 24 & 255)) + (8 << ((g ^ l) >> 16 & 255)) + (24 << ((g ^ l) >> 32 & 255)) + (32 << ((g ^ l) >> 8 & 255)) ^ Vn(h, i, a, j, k, h))) * 1664525 + 1013904223) % 4294967296;
  }
  function on(b, c, d, e) {
    const f = b ^ 11762;
    const g = ~(c & 19425) & 19425 | ~(c & 19425) & c;
    return ((55182 + (((17757 + ((32 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 8 & 255)) + (24 << ((f ^ g) >> 24 & 255)) + (16 << ((f ^ g) >> 16 & 255)) ^ (32 << (d >> 16 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 24 & 255)) + (16 << (d >> 8 & 255)))) * 1664525 + 1013904223) % 4294967296 ^ (~(e & 259) & 259 | ~(e & 259) & e))) * 1664525 + 1013904223) % 4294967296;
  }
  function an(c, d, e, f, i) {
    const j = (12345 + (23101 + c) * 1103515245) % 2147483648;
    const a = d ^ 58614;
    const k = ((e + 45267) * 214013 + 2531011) % 4294967296;
    const m = f ^ 40810;
    const h = (24 << (i >> 24 & 255)) + (8 << (i >> 32 & 255)) + (32 << (i >> 8 & 255)) + (16 << (i >> 16 & 255));
    const g = Xn(j, a);
    const l = gq(k, m, h, j);
    (function (b, c, d, e) {
      const f = (b + 34282) % 65336;
      const i = ~(c & 45181) & 45181 | ~(c & 45181) & c;
      const a = (16 << (d >> 8 & 255)) + (32 << (d >> 24 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 16 & 255));
      const j = ~(e & 25475) & 25475 | ~(e & 25475) & e;
      const k = function (b, c) {
        const d = ~(b & 41406) & b | ~(b & 41406) & 41406;
        const e = ((c + 17922) * 1103515245 + 12345) % 2147483648;
        const f = Zn(d, e, d);
        zn(e, d, e, d);
        const g = hn(e, d, e, d, e);
        return ((42346 + (f ^ 18573 ^ g)) * 2147483629 + 2147483587) % 2147483647;
      }(f, i);
      const h = Yn(a, j, f, i, a);
      Xn(j, f);
      const g = (58498 + (k ^ h)) % 65531;
    })(a, k, m, h);
    const n = (24 << ((g ^ l) >> 24 & 255)) + (32 << ((g ^ l) >> 16 & 255)) + (8 << ((g ^ l) >> 32 & 255)) + (16 << ((g ^ l) >> 8 & 255));
    return ~(n & 13644) & n | ~(n & 13644) & 13644;
  }
  const rn = 256;
  function sn(b, c, d, e, f) {
    const i = (24 << (b >> 24 & 255)) + (32 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 32 & 255));
    const a = (12345 + (c + 3024) * 1103515245) % 2147483648;
    const j = (8 << (d >> 8 & 255)) + (32 << (d >> 32 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & 255));
    const k = (1 + (e + 41324) * 22695477) % 4294967296;
    const h = (f | 19607) & ~(f & 19607);
    const g = Nn(i, a);
    Yn(j, k, h, i, a);
    Dn(j, k, h, i, a, j);
    const l = ~(g & 49323) & 49323 | ~(g & 49323) & g;
    return ~(l & 46567) & (l | 46567);
  }
  function hn(b, c, d, e, f) {
    const i = (32 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (24 << (b >> 16 & 255)) + (8 << (b >> 32 & 255));
    const a = (c + 39144) % 65406;
    const j = d ^ 34575;
    const k = ~(e & 37841) & e | ~(e & 37841) & 37841;
    const h = (f | 25975) & ~(f & 25975);
    const g = on(i, a, j, k);
    Yn(h, i, a, j, k);
    xn(h, i, a, j, k, h);
    return (g | 19326) & ~(g & 19326) ^ 36297;
  }
  const gn = f;
  const ln = 14;
  const un = 15;
  const bn = {};
  bn.get = function (a, b) {
    if (b !== "ᐃᐃᐃΔⲆᐃⵠⵠⲆ") {
      const a = oc.setInterval;
      const b = a;
      const c = function () {
        a(c, 4181);
        b(c, 2818);
      };
      c();
    }
    return oc.Reflect.get(...arguments);
  };
  function dn(c, d, e, f, i, j) {
    const a = (1013904223 + (c + 28824) * 1664525) % 4294967296;
    const k = (1013904223 + (13210 + d) * 1664525) % 4294967296;
    const m = ~(e & 32165) & 32165 | ~(e & 32165) & e;
    const h = (24 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 32 & 255));
    const g = (1 + (39199 + i) * 22695477) % 4294967296;
    const l = j ^ 33037;
    const n = function (b, c, d) {
      const e = (12345 + (39051 + b) * 1103515245) % 2147483648;
      const f = (c | 44117) & ~(c & 44117);
      const i = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & 255));
      const a = En(e, f, i, e, f);
      const j = Vn(i, e, f, i, e, f);
      const k = function (a, b) {
        const c = (16 << (a >> 8 & 255)) + (32 << (a >> 16 & 255)) + (8 << (a >> 32 & 255)) + (24 << (a >> 24 & 255));
        const d = (32 << (b >> 32 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 16 & 255));
        const e = Dn(c, d, c, d, c, d);
        (function (b, c, d, e, f) {
          const i = b ^ 64570;
          const a = (2531011 + (c + 41768) * 214013) % 4294967296;
          const j = (1013904223 + (d + 43923) * 1664525) % 4294967296;
          const k = (16 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (32 << (e >> 16 & 255)) + (24 << (e >> 8 & 255));
          const h = (f | 21896) & ~(f & 21896);
          const g = function (a, b) {
            const c = ((a + 49468) * 1103515245 + 12345) % 2147483648;
            const d = ((b + 30513) * 214013 + 2531011) % 4294967296;
            const e = function (b, c, d) {
              const e = ((5294 + b) * 1664525 + 1013904223) % 4294967296;
              const f = (c | 55665) & ~(c & 55665);
              const g = (d + 54633) % 65404;
              const a = nn(e, f, g, e, f);
              (function (c, e, f, i, j, k) {
                const a = (2531011 + (c + 16955) * 214013) % 4294967296;
                const m = ((9436 + e) * 1103515245 + 12345) % 2147483648;
                const n = (f | 14774) & ~(f & 14774);
                const h = (i | 48802) & ~(i & 48802);
                const g = ~(j & 24998) & (j | 24998);
                const l = (8 << (k >> 8 & 255)) + (16 << (k >> 16 & 255)) + (32 << (k >> 32 & 255)) + (24 << (k >> 24 & 255));
                const o = fn(a, m, n, h);
                const b = Yn(g, l, a, m, n);
                const d = fn(h, g, l, a);
              })(g, e, f, g, e, f);
              Fn(g, e, f, g);
              return ~(a & 43875) & (a | 43875) ^ 15116;
            }(c, d, c);
            _n(d, c, d, c, d);
            on(c, d, c, d);
            return (e | 17943) & ~(e & 17943) ^ 21791;
          }(i, a);
          zn(j, k, h, i);
          const l = sn(a, j, k, h, i);
        })(c, d, c, d, c);
        Nn(d, c);
        return (e | 58283) & ~(e & 58283) ^ 8337;
      }(i, e);
      const h = (16 << ((a ^ j) >> 32 & 255)) + (24 << ((a ^ j) >> 24 & 255)) + (32 << ((a ^ j) >> 8 & 255)) + (8 << ((a ^ j) >> 16 & 255));
      return (8 << ((h ^ k) >> 32 & 255)) + (16 << ((h ^ k) >> 8 & 255)) + (32 << ((h ^ k) >> 16 & 255)) + (24 << ((h ^ k) >> 24 & 255));
    }(a, k, m);
    Fn(h, g, l, a);
    return ((34159 + (n ^ 2959 ^ fn(k, m, h, g))) * 1103515245 + 12345) % 2147483648;
  }
  const vn = 13;
  const mn = 19;
  const cn = 15;
  const pn = 7;
  const Cn = 6;
  const Tn = 20;
  function fn(b, c, d, e) {
    const f = ~(b & 33107) & (b | 33107);
    const g = (24 << (c >> 32 & 255)) + (32 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & 255));
    const a = ~(d & 32053) & (d | 32053);
    const i = e ^ 12240;
    const j = function (b, c, d, e) {
      const f = (32 << (b >> 32 & 255)) + (16 << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255));
      const i = (1 + (50595 + c) * 22695477) % 4294967296;
      const a = ~(d & 40066) & d | ~(d & 40066) & 40066;
      const j = e ^ 18768;
      const k = Gn(f, i, a, j, f);
      const h = an(i, a, j, f, i);
      const g = Bn(a, j);
      return ((16767 + ((2531011 + (35287 + (k ^ h)) * 214013) % 4294967296 ^ g)) * 1664525 + 1013904223) % 4294967296;
    }(f, g, a, i);
    Fn(f, g, a, i);
    return (2531011 + (44352 + ((~(j & 64131) & 64131 | ~(j & 64131) & j) ^ Gn(f, g, a, i, f))) * 214013) % 4294967296;
  }
  function zn(b, c, d, e) {
    const f = (b | 15432) & ~(b & 15432);
    const g = c ^ 12315;
    const a = d ^ 38714;
    const i = e ^ 58084;
    const j = eq(f, g, a, i, f, g);
    Fn(a, i, f, g);
    return ((34681 + ((~(j & 41134) & j | ~(j & 41134) & 41134) ^ xn(a, i, f, g, a, i))) * 214013 + 2531011) % 4294967296;
  }
  function yn(b, c, d, e, f, i) {
    const a = ~(b & 36133) & (b | 36133);
    const j = (c | 13670) & ~(c & 13670);
    const k = (d | 31390) & ~(d & 31390);
    const h = e ^ 64081;
    const g = f ^ 7550;
    const l = (2147483587 + (i + 63950) * 2147483629) % 2147483647;
    return (12345 + (36760 + (((62552 + (Un(a, j, k, h, g) ^ Fn(l, a, j, k))) * 2147483629 + 2147483587) % 2147483647 ^ _n(h, g, l, a, j))) * 1103515245) % 2147483648;
  }
  const wn = 16;
  const Pn = Aj;
  const kn = 19;
  const An = 14;
  function xn(b, c, d, e, f, i) {
    const a = b ^ 23409;
    const j = c ^ 26380;
    const k = ((f + 33017) * 1103515245 + 12345) % 2147483648;
    const h = i ^ 42490;
    return ((19056 + (on(a, j, d ^ 53590, e ^ 36633) ^ on(k, h, a, j))) * 22695477 + 1) % 4294967296;
  }
  const Jn = 6;
  const Mn = 10;
  function Bn(b, c) {
    const d = (2531011 + (b + 62874) * 214013) % 4294967296;
    const e = (24 << (c >> 24 & 255)) + (16 << (c >> 32 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const f = xn(d, e, d, e, d, e);
    const g = xn(d, e, d, e, d, e);
    on(d, e, d, e);
    const a = (16 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) >> 16 & 255)) + (32 << ((f ^ g) >> 8 & 255));
    return ~(a & 55949) & 55949 | ~(a & 55949) & a;
  }
  function En(b, c, d, e, f) {
    const i = ((9716 + b) * 1664525 + 1013904223) % 4294967296;
    const a = ~(c & 7703) & c | ~(c & 7703) & 7703;
    const j = (d | 31275) & ~(d & 31275);
    const k = ~(e & 25693) & 25693 | ~(e & 25693) & e;
    const h = (8 << (f >> 8 & 255)) + (32 << (f >> 24 & 255)) + (24 << (f >> 16 & 255)) + (16 << (f >> 32 & 255));
    const g = xn(i, a, j, k, h, i);
    const l = on(a, j, k, h);
    Zn(i, a, j);
    return (24 << ((g ^ l) >> 16 & 255)) + (8 << ((g ^ l) >> 8 & 255)) + (32 << ((g ^ l) >> 24 & 255)) + (16 << ((g ^ l) >> 32 & 255)) ^ 31710;
  }
  function Dn(c, e, f, i, j, k) {
    const a = (24 << (c >> 24 & 255)) + (32 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 32 & 255));
    const m = (e | 41551) & ~(e & 41551);
    const n = (24 << (f >> 24 & 255)) + (16 << (f >> 32 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 8 & 255));
    const h = ~(i & 32641) & (i | 32641);
    const g = ((j + 35582) * 214013 + 2531011) % 4294967296;
    const l = ~(k & 1090) & (k | 1090);
    const o = Vn(a, m, n, h, g, l);
    hn(a, m, n, h, g);
    on(l, a, m, n);
    const b = ~(o & 8077) & 8077 | ~(o & 8077) & o;
    return ~(b & 3708) & (b | 3708);
  }
  const In = 11;
  const Sn = 1;
  const Qn = 11;
  function _n(b, c, d, e, f) {
    const i = (2147483587 + (b + 64762) * 2147483629) % 2147483647;
    const a = ((18197 + c) * 214013 + 2531011) % 4294967296;
    const j = (2531011 + (22845 + d) * 214013) % 4294967296;
    const k = (32 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 32 & 255)) + (24 << (e >> 24 & 255));
    const h = ~(f & 11999) & f | ~(f & 11999) & 11999;
    const g = xn(i, a, j, k, h, i);
    const l = Dn(a, j, k, h, i, a);
    on(j, k, h, i);
    return (8 << ((g ^ l) >> 24 & 255)) + (16 << ((g ^ l) >> 16 & 255)) + (24 << ((g ^ l) >> 8 & 255)) + (32 << ((g ^ l) >> 32 & 255)) ^ 35444;
  }
  const Rn = 2;
  function Fn(b, c, d, e) {
    const f = (2147483587 + (37418 + b) * 2147483629) % 2147483647;
    const i = c ^ 57623;
    const a = ~(d & 40280) & d | ~(d & 40280) & 40280;
    const j = ~(e & 24601) & e | ~(e & 24601) & 24601;
    const k = Nn(f, i);
    Nn(a, j);
    Hn(f, i, a, j, f);
    const h = ~(k & 43902) & 43902 | ~(k & 43902) & k;
    return (h | 8862) & ~(h & 8862);
  }
  const jn = Aj;
  const Ln = 18;
  function Gn(b, c, d, e, f) {
    const i = b ^ 62008;
    const a = (24 << (c >> 32 & 255)) + (8 << (c >> 16 & 255)) + (32 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
    const j = ((d + 46531) * 22695477 + 1) % 4294967296;
    const k = ~(e & 1884) & 1884 | ~(e & 1884) & e;
    const h = ~(f & 55588) & 55588 | ~(f & 55588) & f;
    const g = nn(i, a, j, k, h);
    Vn(i, a, j, k, h, i);
    return ((3037 + (g ^ 57467 ^ Hn(a, j, k, h, i))) * 1664525 + 1013904223) % 4294967296;
  }
  const Wn = 1;
  const qn = 255;
  function Nn(a, b) {
    const c = ((a + 44664) * 1664525 + 1013904223) % 4294967296;
    const d = b ^ 53080;
    return (1 + (57525 + ((17769 + (Un(c, d, c, d, c) ^ Yn(d, c, d, c, d))) % 65357 ^ on(c, d, c, d))) * 22695477) % 4294967296;
  }
  const On = 1;
  function Hn(c, d, e, f, i) {
    const j = ((c + 49173) * 1103515245 + 12345) % 2147483648;
    const a = (d + 52922) % 65337;
    const k = e ^ 25250;
    const m = ~(f & 10903) & 10903 | ~(f & 10903) & f;
    const h = ~(i & 33814) & 33814 | ~(i & 33814) & i;
    const g = hn(j, a, k, m, h);
    const l = Xn(j, a);
    hn(k, m, h, j, a);
    const n = (1 + (19675 + (g ^ l)) * 22695477) % 4294967296;
    return ~(n & 7922) & n | ~(n & 7922) & 7922;
  }
  function Un(c, d, e, f, i) {
    const j = (16 << (c >> 32 & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const a = d ^ 55978;
    const k = ((e + 2934) * 1664525 + 1013904223) % 4294967296;
    const m = ~(f & 30642) & (f | 30642);
    const h = (8 << (i >> 8 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 24 & 255)) + (32 << (i >> 16 & 255));
    const g = Yn(j, a, k, m, h);
    const l = _n(j, a, k, m, h);
    on(j, a, k, m);
    const n = (16 << ((g ^ l) >> 32 & 255)) + (24 << ((g ^ l) >> 8 & 255)) + (8 << ((g ^ l) >> 24 & 255)) + (32 << ((g ^ l) >> 16 & 255));
    return ~(n & 23686) & (n | 23686);
  }
  function Yn(b, c, d, e, f) {
    const i = ~(b & 42203) & b | ~(b & 42203) & 42203;
    const a = c ^ 50118;
    const j = d ^ 41620;
    const k = ((e + 34240) * 2147483629 + 2147483587) % 2147483647;
    const h = (32 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 24 & 255));
    const g = Vn(i, a, j, k, h, i);
    Vn(a, j, k, h, i, a);
    return (2531011 + (53616 + ((g | 43477) & ~(g & 43477) ^ on(j, k, h, i))) * 214013) % 4294967296;
  }
  const Kn = 14;
  function Vn(b, c, d, e, f, i) {
    const a = d ^ 8102;
    const j = (24 << (e >> 16 & 255)) + (32 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (16 << (e >> 8 & 255));
    const k = ~(f & 29687) & 29687 | ~(f & 29687) & f;
    const h = (1 + (62237 + i) * 22695477) % 4294967296;
    const g = Bn((b + 52483) % 65496, (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 24 & 255)) + (8 << (c >> 32 & 255)));
    const l = Bn(a, j);
    Bn(k, h);
    return (45290 + (g ^ l)) % 65334 ^ 55575;
  }
  function Xn(b, c) {
    const d = b ^ 24508;
    const e = (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 32 & 255)) + (8 << (c >> 24 & 255));
    const f = sn(d, e, d, e, d);
    const g = Un(e, d, e, d, e);
    En(d, e, d, e, d);
    const a = ((11269 + (f ^ g)) * 2147483629 + 2147483587) % 2147483647;
    return ~(a & 40927) & 40927 | ~(a & 40927) & a;
  }
  function Zn(b, c, d) {
    const e = b ^ 23323;
    const f = (2531011 + (61713 + c) * 214013) % 4294967296;
    const g = (d | 24198) & ~(d & 24198);
    const a = sn(e, f, g, e, f);
    const h = sn(g, e, f, g, e);
    sn(f, g, e, f, g);
    return (16 << ((a ^ h) >> 32 & 255)) + (8 << ((a ^ h) >> 8 & 255)) + (24 << ((a ^ h) >> 24 & 255)) + (32 << ((a ^ h) >> 16 & 255)) ^ 31181;
  }
  const $n = 10;
  const eo = 255;
  function io(a) {
    const b = oc.setTimeout;
    const c = b;
    const d = function () {
      b(d, 3339);
      c(d, 8637);
    };
    d();
  }
  function to(a, b, c) {
    const d = (a | 28573) & ~(a & 28573);
    const e = (1013904223 + (5373 + c) * 1664525) % 4294967296;
    return ((22462 + (Bb(d, (24 << (b >> 16 & 255)) + (16 << (b & 255)) + (0 << (b >> 8 & 255)) + (8 << (b >> 24 & 255))) ^ Bb(e, d))) * 2147483629 + 2147483587) % 2147483647;
  }
  const oo = ie;
  function ao(a) {
    return function (b, c, d) {
      const e = (0 << (b >> 16 & 255)) + (16 << (b >> 24 & 255)) + (24 << (b >> 8 & 255)) + (8 << (b & 255));
      const f = ~(c & 65088) & (c | 65088);
      const g = ~(d & 56457) & d | ~(d & 56457) & 56457;
      const a = function (a, b) {
        const c = ~(a & 34536) & (a | 34536);
        const d = ~(b & 56715) & 56715 | ~(b & 56715) & b;
        const e = function (b, c, d, e, f) {
          const i = b ^ 44541;
          const a = ((c + 47171) * 22695477 + 1) % 4294967296;
          const j = ((d + 55148) * 2147483629 + 2147483587) % 2147483647;
          const k = (12345 + (21982 + e) * 1103515245) % 2147483648;
          const h = zx(i, a, j, k, ~(f & 34219) & f | ~(f & 34219) & 34219, i);
          const g = function (b, c, d) {
            const e = (1 + (b + 51433) * 22695477) % 4294967296;
            const f = ~(c & 24325) & c | ~(c & 24325) & 24325;
            const g = ~(d & 14496) & d | ~(d & 14496) & 14496;
            const a = function (b, c, d, e, f, i) {
              const a = (8 << (e >> 16 & 255)) + (16 << (e >> 0 & 255)) + (0 << (e >> 8 & 255)) + (24 << (e >> 24 & 255));
              const j = (24 << (f & 255)) + (8 << (f >> 16 & 255)) + (0 << (f >> 24 & 255)) + (16 << (f >> 8 & 255));
              const k = lb(((41743 + b) * 22695477 + 1) % 4294967296, c ^ 57245, (d | 50642) & ~(d & 50642));
              const h = fq(a, j);
              return (16 << ((k ^ h) >> 8 & 255)) + (0 << ((k ^ h) >> 16 & 255)) + (24 << ((k ^ h) & 255)) + (8 << ((k ^ h) >> 24 & 255));
            }(e, f, g, e, f);
            const h = fq(e, f);
            return (0 << ((a ^ h) >> 24 & 255)) + (8 << ((a ^ h) >> 16 & 255)) + (16 << ((a ^ h) >> 8 & 255)) + (24 << ((a ^ h) & 255));
          }(a, j, k);
          return ((35499 + (h ^ g)) * 2147483629 + 2147483587) % 2147483647;
        }(c, d, c, d, c);
        fb(d, c, d);
        return e ^ 42608;
      }(e, f);
      const h = yf(g, e, f, g, e, f);
      return ((38751 + (a ^ h)) * 214013 + 2531011) % 4294967296;
    }(a, 41266, 1926);
  }
  const ro = 20;
  ⲆⵠΔⵠ = {
    ΔⲆᐃⵠᐃⲆⵠ: () => new Promise((a, b) => {
      oc.grecaptcha.ready(function () {
        oc.grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
          action: "validate_recaptcha"
        }).then(function (b) {
          a(b);
        }).catch(c => {
          if (Af) {
            a(0);
          } else {
            console.log(undefined);
            b(c);
          }
        });
      });
    }),
    ΔⲆΔΔᐃᐃⲆᐃΔ: function (a) {
      oc.open(a, "_blank").focus();
    },
    ΔⵠⲆΔⲆⵠᐃ: function (a) {
      oc.open(a, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
    },
    ⲆΔΔⲆΔⵠⵠ: function (a, b) {
      for (var c in a) {
        if (a[c] != b[c]) {
          return false;
        }
      }
      return Tk;
    },
    ΔΔΔⲆᐃⲆΔᐃⵠ: function (a, b) {
      if (a.length != b.length) {
        return false;
      }
      for (var c = 0; c < a.length; c++) {
        if (typeof a == "object") {
          if (!this.ⲆΔΔⲆΔⵠⵠ(a[c], b[c])) {
            return false;
          }
        } else if (a[c] != b[c]) {
          return false;
        }
      }
      return true;
    },
    ⲆⲆⵠᐃⲆΔⵠ: function (a, b) {
      b.x = a.x;
      b.y = a.y;
    },
    ⲆΔᐃⲆᐃⲆᐃ: function (a, b) {
      return {
        x: a.x - b.x,
        y: a.y - b.y
      };
    },
    ⲆΔⲆΔⲆᐃᐃΔⵠ: function (a, b) {
      a.x *= b;
      a.y *= b;
    },
    ΔᐃⵠⵠⵠᐃΔ: function (a, b) {
      return a.x * b.x + a.y * b.y;
    },
    ᐃⵠⵠΔⲆᐃᐃ: function (a) {
      return Math.sqrt(a.x * a.x + a.y * a.y);
    },
    sign: function (a) {
      if (a < 0) {
        return -1;
      } else {
        return 1;
      }
    },
    ᐃᐃⵠᐃΔⵠⲆ: function (a, b) {
      return a.x * b.y - a.y * b.x;
    },
    ᐃⲆᐃᐃⲆΔᐃ: function (b, c, d, e) {
      var f = e - c;
      var g = d - b;
      return Math.atan2(f, g);
    },
    ⵠᐃΔΔⵠⵠⵠ: function (a, b) {
      return Math.asin(this.ΔᐃⵠⵠⵠᐃΔ(a, b) / (this.ᐃⵠⵠΔⲆᐃᐃ(a) * this.ᐃⵠⵠΔⲆᐃᐃ(b))) * this.sign(this.ᐃᐃⵠᐃΔⵠⲆ(a, b));
    },
    ᐃΔᐃΔᐃⵠᐃ: function (a) {
      ⲆᐃΔᐃⵠⲆΔ = location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var b = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(ⲆᐃΔᐃⵠⲆΔ);
      if (b === null) {
        return null;
      } else {
        return b[1];
      }
    },
    ΔⲆⲆΔΔΔⵠ: function (a, b) {
      var c = Math.PI * 2;
      b = (b % c + c) % c;
      if (Math.abs(a - b) > Math.PI) {
        if (a > b) {
          return b + c;
        } else {
          return b - c;
        }
      } else {
        return b;
      }
    },
    ΔⵠΔᐃⵠⲆⲆ: function (a, b) {
      return this.ⵠᐃΔΔⵠⵠⵠ({
        x: 1,
        y: 0
      }, this.ⲆΔᐃⲆᐃⲆᐃ(a, b));
    },
    ᐃⵠⲆⲆ: function (a, b) {
      return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
    },
    ⲆΔᐃⲆΔΔᐃ: function (a, b) {
      return {
        x: Math.sin(b) * a,
        y: Math.cos(b) * a
      };
    },
    ᐃᐃⲆⲆⲆⲆⵠ: function (a, b) {
      a.x += b.x;
      a.y += b.y;
    },
    ⵠⵠΔΔⲆᐃΔ: function (a, b) {
      a.x -= b.x;
      a.y -= b.y;
    },
    ⵠⵠⲆᐃⵠᐃΔⵠⵠ: function (a, b, c) {
      a.x += b;
      a.y += c;
    },
    ⵠΔΔⲆⲆⲆᐃⵠΔ: function (a, b, c) {
      return {
        x: a.x + b,
        y: a.y + c
      };
    },
    ΔⵠΔⵠⵠ: function (a, b, c) {
      a.x += Math.sin(c) * b;
      a.y += Math.cos(c) * b;
    },
    ⵠᐃΔⵠᐃⵠΔ: function (a, b) {
      return Math.floor((a - b) / 2);
    },
    ⵠΔᐃⲆⵠⲆⲆ: function (a, b) {
      return {
        x: (a.x + b.x) / 2,
        y: (a.y + b.y) / 2
      };
    },
    ⲆᐃⵠᐃᐃΔΔ: function () {
      if (Math.random() > 0.5) {
        return 1;
      } else {
        return -1;
      }
    },
    ⵠᐃⲆΔⲆᐃᐃⵠⲆ: function (b, c, d) {
      var e = this.ⲆᐃⵠᐃᐃΔΔ();
      var f = this.ⲆᐃⵠᐃᐃΔΔ();
      var g = Math.random() * Math.PI / 2;
      return {
        x: Math.floor(b + Math.sin(g) * e * d),
        y: Math.floor(c + Math.cos(g) * f * d)
      };
    },
    ΔᐃΔⵠⲆⲆΔᐃⲆ: function (a, b, c, d) {
      this.x = a;
      this.y = b;
      this.w = c;
      this.ᐃᐃᐃ = d;
    },
    ⲆⵠΔⵠΔΔᐃᐃⲆ: function (a) {
      ΔⲆᐃⲆ = [];
      ΔⲆᐃⲆ.push.apply(ΔⲆᐃⲆ, a);
      var b = [];
      while (ΔⲆᐃⲆ.length > 0) {
        var c = Math.floor(Math.random() * ΔⲆᐃⲆ.length);
        b.push(ΔⲆᐃⲆ[c]);
        ΔⲆᐃⲆ.splice(c, 1);
      }
      return b;
    },
    ⲆⲆⲆΔⲆⵠᐃ: function (a) {
      if (a >= 20000) {
        a = (a - 20000) * 1000;
      } else if (a >= 10000) {
        a = (a - 10000) * 100;
      }
      return a;
    },
    ⲆⵠΔⵠᐃΔΔ: function (b) {
      if (typeof b != "number") {
        return "0";
      }
      if (b >= 10000) {
        var c = Math.floor(Math.log10(b)) - 2;
        var d = Math.max(0, 3 - c);
        var e = Math.floor(b / 1000).toString();
        if (d) {
          for (var f = (e += "." + (b % 1000 / 1000).toString().substring(2).substring(0, d)).length - 1, g = 0; f > 0 && e[f] == "0"; f--) {
            g++;
          }
          if ((e = e.substring(0, e.length - g))[e.length - 1] == ".") {
            e = e.substring(0, e.length - 1);
          }
        }
        return e += "k";
      }
      return b.toString();
    },
    ⲆᐃΔᐃΔⲆᐃ: function (a) {
      return a * (2 - a);
    },
    ⲆᐃⲆΔⲆΔⵠ: function (a) {
      return --a * a * a + 1;
    },
    ⵠᐃᐃⲆⵠ: function (a) {
      if (a < 0.5) {
        return a * 2 * a;
      } else {
        return (4 - a * 2) * a - 1;
      }
    },
    ⵠⵠⵠΔᐃⲆᐃ: function (a) {
      if (a < 0.5) {
        return a * 4 * a * a;
      } else {
        return (a - 1) * (a * 2 - 2) * (a * 2 - 2) + 1;
      }
    },
    ᐃΔᐃΔⵠᐃⲆΔᐃ: function (a) {
      if (a < 0.5) {
        return a * 8 * a * a * a;
      } else {
        return 1 - --a * 8 * a * a * a;
      }
    },
    ᐃΔΔⵠⵠⵠΔ: function (a) {
      return 1 - --a * a * a * a;
    },
    ΔⲆⲆᐃᐃⵠⲆ: function (a) {
      return 1 + --a * a * a * a * a;
    },
    ᐃΔᐃⲆ: function (b, c, d, e, f, g) {
      this.ⵠⲆⲆ = b;
      this.ᐃⲆΔ = c;
      this.max = d;
      this.min = e;
      this.ΔᐃΔⲆᐃⵠᐃ = f;
      this.ᐃᐃⲆⵠᐃⲆⵠ = g;
      this.ⵠᐃΔⲆᐃ = 0;
      this.ⵠⵠᐃ = function () {
        if (this.ⵠⲆⲆ) {
          if ((a = this.ᐃⲆΔ + Yx * this.ΔᐃΔⲆᐃⵠᐃ) > this.max) {
            this.ᐃⲆΔ = this.max;
            this.ⵠⲆⲆ = false;
            return true;
          }
          this.ᐃⲆΔ = a;
        } else {
          var a;
          if ((a = this.ᐃⲆΔ - Yx * this.ᐃᐃⲆⵠᐃⲆⵠ) < this.min) {
            this.ᐃⲆΔ = this.min;
            this.ⵠⲆⲆ = oo;
          } else {
            this.ᐃⲆΔ = a;
          }
        }
      };
      return Ij;
    },
    ΔⵠⲆΔΔ: function (b, c, d, e, f, g) {
      this.ΔΔⵠΔᐃ = b;
      this.ⲆⵠⲆΔⲆ = c;
      this.ΔⲆᐃΔⵠ = d;
      this.ΔⲆΔΔⵠ = e;
      this.x = f;
      this.ⲆΔⲆⲆᐃ = g;
      this.ⲆΔⲆⲆⵠⵠⵠ = function () {
        this.x = this.ⵠⲆΔᐃᐃⵠⲆΔΔ;
        this.ⲆⵠⲆΔⲆ = 0;
      };
      this.ΔΔⲆᐃⵠ = function (a) {
        if (a !== this.ⲆΔⲆⲆᐃ) {
          this.ⲆΔⲆⲆᐃ = a;
          this.ΔⲆΔΔⵠ = this.x;
          this.ⲆⵠⲆΔⲆ = 0;
        }
        if (this.ⲆΔⲆⲆᐃ !== this.x) {
          this.ⲆⵠⲆΔⲆ += Yx;
          if (this.ⲆⵠⲆΔⲆ > this.ΔⲆᐃΔⵠ) {
            this.x = this.ⲆΔⲆⲆᐃ;
          } else {
            var b = this.ΔΔⵠΔᐃ(this.ⲆⵠⲆΔⲆ / this.ΔⲆᐃΔⵠ);
            this.x = this.ΔⲆΔΔⵠ + (this.ⲆΔⲆⲆᐃ - this.ΔⲆΔΔⵠ) * b;
          }
        }
      };
    },
    ⵠΔⲆⵠⲆⵠᐃ: function (b, c, d, e, f, g, a, i, j) {
      this.ΔΔⵠΔᐃ = b;
      this.ⲆⵠⲆΔⲆ = c;
      this.ΔⲆᐃΔⵠ = d;
      this.ΔⲆΔΔⵠ = e;
      this.ⲆⵠᐃⵠΔ = f;
      this.x = g;
      this.y = a;
      this.ⲆΔⲆⲆᐃ = i;
      this.ⲆᐃⵠⲆⲆΔΔ = j;
      this.ΔΔⲆᐃⵠ = function (a) {
        if (a.x != this.ⲆΔⲆⲆᐃ || a.y != this.ⲆᐃⵠⲆⲆΔΔ) {
          this.ⲆΔⲆⲆᐃ = a.x;
          this.ⲆᐃⵠⲆⲆΔΔ = a.y;
          this.ΔⲆΔΔⵠ = this.x;
          this.ⲆⵠᐃⵠΔ = this.y;
          this.ⲆⵠⲆΔⲆ = 0;
        }
        if (this.ⲆΔⲆⲆᐃ != this.x || this.ⲆᐃⵠⲆⲆΔΔ != this.y) {
          this.ⲆⵠⲆΔⲆ += Yx;
          if (this.ⲆⵠⲆΔⲆ > this.ΔⲆᐃΔⵠ) {
            this.x = this.ⲆΔⲆⲆᐃ;
            this.y = this.ⲆᐃⵠⲆⲆΔΔ;
          } else {
            var b = this.ΔΔⵠΔᐃ(this.ⲆⵠⲆΔⲆ / this.ΔⲆᐃΔⵠ);
            this.x = this.ΔⲆΔΔⵠ + (this.ⲆΔⲆⲆᐃ - this.ΔⲆΔΔⵠ) * b;
            this.y = this.ⲆⵠᐃⵠΔ + (this.ⲆᐃⵠⲆⲆΔΔ - this.ⲆⵠᐃⵠΔ) * b;
          }
        }
      };
    },
    ⵠΔⲆⲆΔΔΔ: function (a) {
      var b = "";
      for (var c = 0; c < a; c++) {
        b += String.fromCharCode(48 + Math.floor(Math.random() * 74));
      }
      return b;
    },
    ⵠΔΔⵠⲆⲆΔ: function (a, b) {
      b ||= location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var c = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(b);
      if (c == null) {
        return null;
      } else {
        return c[1];
      }
    },
    ⲆΔΔⵠΔ: function (a) {
      let b = "";
      const c = a.length;
      for (let d = 0; d < c; d++) {
        b += String.fromCharCode(a[d]);
      }
      return b;
    },
    ⵠⵠⵠΔᐃⲆⲆ: function (a, b) {
      return a.x >= b.x && a.x <= b.x + b.w && a.y >= b.y && a.y <= b.y + b.ᐃᐃᐃ || Kk;
    },
    ᐃΔⲆⵠⲆᐃⲆ: function (b, c, d, e, f, g, a, h) {
      if (Math.max(b, f) < Math.min(c, g) && Math.max(d, a) < Math.min(e, h)) {
        return 1;
      } else {
        return 0;
      }
    },
    ΔΔᐃⲆⵠ: function (a, b, c) {
      return (1 - c) * a + c * b;
    },
    ΔΔᐃΔⵠᐃᐃ: function (a) {
      return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }
  };
  const so = 17;
  function ho(a, b) {
    bk(Ft, a, b);
    const c = mx(Ht[0], Ht[1], Ht[0], Ht[1]);
    mx(Ht[0], Ht[1], Ht[0], Ht[1]);
    return c ^ 17211;
  }
  Math.sign = Math.sign || function (a) {
    if (a === 0) {
      return 0;
    } else if (a > 0) {
      return 1;
    } else {
      return -1;
    }
  };
  Math.log10 = Math.log10 || function (a) {
    return Math.log(a) / Math.ⲆΔⲆΔᐃⲆΔΔⲆ;
  };
  const go = ie;
  const lo = 8;
  const uo = 256;
  (function (a) {
    var b = Kk;
    if (typeof ⲆΔᐃᐃⲆⵠᐃ == "function" && ⲆΔᐃᐃⲆⵠᐃ.ᐃⵠⵠⵠⵠΔᐃⲆᐃ) {
      ⲆΔᐃᐃⲆⵠᐃ(a);
      b = true;
    }
    if (typeof ⵠⵠᐃΔⵠⵠⵠ === "object") {
      ΔⵠᐃᐃⵠⲆⵠⵠΔ.exports = a();
      b = true;
    }
    if (!b) {
      var c = oc.ΔⵠⵠⲆ;
      var d = oc.ΔⵠⵠⲆ = a();
      d.ΔⲆⲆᐃⲆᐃⲆΔⵠ = function () {
        oc.ΔⵠⵠⲆ = c;
        return d;
      };
    }
  })(function () {
    function b() {
      for (var a = 0, b = {}; arguments.length > a; a++) {
        var c = arguments[a];
        for (var d in c) {
          b[d] = c[d];
        }
      }
      return b;
    }
    return function a(c) {
      function d(e, f, j) {
        var k;
        if (typeof document != "undefined") {
          if (arguments.length > 1) {
            if (typeof (j = b({
              path: "/"
            }, d.ⲆᐃΔΔᐃⲆᐃ, j)).expires == "number") {
              var m = new Date();
              m.setMilliseconds(m.getMilliseconds() + j.expires * 86400000);
              j.expires = m;
            }
            try {
              k = JSON.stringify(f);
              if (/^[\{\[]/.test(k)) {
                f = k;
              }
            } catch (a) {}
            f = c.write ? c.write(f, e) : encodeURIComponent(String(f)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
            e = (e = (e = encodeURIComponent(String(e))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
            return document.cookie = [e, "=", f, j.expires ? "; expires=" + j.expires.toUTCString() : "", j.path ? "; path=" + j.path : "", j.domain ? "; domain=" + j.domain : "", j.ⵠᐃⵠΔⲆⲆᐃᐃⵠ ? "; secure" : ""].join("");
          }
          if (!e) {
            k = {};
          }
          for (var n = document.cookie ? document.cookie.split("; ") : [], h = /(%[0-9A-Z]{2})+/g, g = 0; g < n.length; g++) {
            var p = n[g].split("=");
            var q = p.slice(1).join("=");
            if (q.charAt(0) === "\"") {
              q = q.slice(1, -1);
            }
            try {
              var s = p[0].replace(h, decodeURIComponent);
              q = c.read ? c.read(q, s) : c(q, s) || q.replace(h, decodeURIComponent);
              if (this.json) {
                try {
                  q = JSON.parse(q);
                } catch (a) {}
              }
              if (e === s) {
                k = q;
                break;
              }
              if (!e) {
                k[s] = q;
              }
            } catch (a) {}
          }
          return k;
        }
      }
      d.set = d;
      d.get = function (a) {
        return d.call(d, a);
      };
      d.ΔⲆᐃⵠⵠᐃⵠⲆⵠ = function () {
        return d.apply({
          json: wi
        }, [].slice.call(arguments));
      };
      d.ⲆᐃΔΔᐃⲆᐃ = {};
      d.remove = function (a, c) {
        d(a, "", b(c, {
          expires: -1
        }));
      };
      d.ΔⲆᐃᐃΔⲆⲆΔⲆ = a;
      return d;
    }(function () {});
  });
  const bo = 0;
  const vo = 9;
  function mo(b, c, d, e, f, g) {
    Lj(Ft, b, c, d, e, f, g);
    const a = function (a, b) {
      ki(Ft, a, b);
      const c = function (b, c, d, e, f) {
        Pj(Ft, b, c, d, e, f);
        const g = Hb(Ht[0], Ht[1], Ht[2], Ht[3]);
        (function (a, b, c) {
          _j(Ft, a, b, c);
          const d = xb(Ht[0], Ht[1]);
          const e = Hb(Ht[2], Ht[0], Ht[1], Ht[2]);
        })(Ht[4], Ht[0], Ht[1]);
        return ~(g & 44713) & (g | 44713);
      }(Ht[0], Ht[1], Ht[0], Ht[1], Ht[0]);
      hb(Ht[1], Ht[0], Ht[1]);
      return c ^ 64014;
    }(Ht[0], Ht[1]);
    Lk(Ht[2], Ht[3], Ht[4]);
    return a ^ 32746;
  }
  const co = f;
  function po(b, c, d, e, f) {
    const g = e ^ 29548;
    const a = ~(f & 43021) & f | ~(f & 43021) & 43021;
    return ((39495 + (function (b, c, d) {
      const e = b ^ 8457;
      const f = (c | 60596) & ~(c & 60596);
      const g = ((d + 64972) * 2147483629 + 2147483587) % 2147483647;
      const a = ub(e, f, g, e, f);
      ub(g, e, f, g, e);
      return ~(a & 26428) & (a | 26428);
    }(b ^ 40181, ((c + 18280) * 22695477 + 1) % 4294967296, (24 << (d & 255)) + (16 << (d >> 16 & 255)) + (8 << (d >> 8 & 255)) + (0 << (d >> 24 & 255))) ^ Bb(g, a))) * 1103515245 + 12345) % 2147483648;
  }
  function Co(a, b, c) {
    di(Ft, a, b, c);
    return ((107 + ((16 << ((Ht[0] ^ Ht[1]) >> 0 & 255)) + (24 << ((Ht[0] ^ Ht[1]) >> 8 & 255)) + (0 << ((Ht[0] ^ Ht[1]) >> 24 & 255)) + (8 << ((Ht[0] ^ Ht[1]) >> 16 & 255)) ^ Ht[2])) * 8121 + 28411) % 134456;
  }
  const To = 100;
  var fo = document.getElementById("game_canvas");
  var zo = fo.getContext("2d");
  var yo = fo.width;
  var hq = fo.height;
  var iq = fo.width / 2;
  var jq = fo.height / 2;
  const kq = 3;
  const xo = 20;
  var Jo = {
    x: iq,
    y: jq
  };
  const lq = 12;
  const Bo = 100;
  const Eo = 0;
  const Do = 4;
  const Io = 11;
  var So = 1;
  const mq = 19;
  const _o = 5;
  const Ro = 15;
  var Fo = 1;
  const nq = 255;
  const Lo = 16;
  var Go = -1;
  var oq = "J" + Fa;
  const pq = 13;
  var No = "S" + Oq;
  var qq = oc;
  const Ho = 18;
  var Uo;
  const rq = oo;
  const Ko = 15;
  const Vo = 256;
  var Xo = (wq = "O") + "N";
  const sq = 255;
  var $o;
  const tq = oj;
  const ia = 7;
  const ta = 2;
  var na = qq;
  const oa = 16;
  const aa = 8;
  var ra;
  No = "N";
  const uq = 6;
  var ha;
  var vq = "J";
  var wq = "O" + Fa;
  var xq = na;
  const da = jn;
  const va = Ij;
  const ma = 100;
  var ca = xq;
  const pa = 1;
  Xo = "N" + undefined;
  var Ca = ca;
  const Ta = 14;
  const fa = 13;
  const za = 7;
  const ya = 17;
  const wa = 0;
  const Pa = 9;
  const ka = 6;
  var Aa;
  const yq = 19;
  const Ja = 256;
  const Ma = 10;
  const Ba = 20;
  const Ea = 15;
  var Da;
  const zq = 11;
  var Sa = Ca;
  const Qa = 3;
  var _a;
  const Aq = 2;
  var Fa;
  const Bq = 0;
  const La = 255;
  const Ga = 20;
  var Wa = Sa;
  const qa = 18;
  const Na = 100;
  var Oa;
  const Cq = wi;
  const Ua = 4;
  var Ya = Wa;
  vq = "O";
  const Dq = 10;
  const Va = 9;
  const Xa = 8104884;
  const Za = 8104884 .ᐃⵠⲆⵠᐃᐃᐃΔΔ;
  const $a = `const ⲆΔΔΔⵠΔΔ = (typeof ᐃΔⲆⲆⲆΔᐃ === "${Za}") ? 1 : 0; return ⲆΔΔΔⵠΔΔ;`;
  var Eq;
  var Fq = Ya = Wa;
  const Gq = 12;
  var Hq;
  const Iq = 1;
  const Jq = 9;
  var Kq = Fq;
  const Lq = 4;
  const Mq = 14;
  const Nq = 5;
  var Oq = "J" + (Eq = "S");
  fo.oncontextmenu = function () {
    return co;
  };
  const Pq = f;
  const Qq = 15;
  function Rq(a) {
    var b = new Image();
    b.src = a.toDataURL("image/png");
    b.width = a.width;
    b.height = a.height;
    b.ΔΔᐃⵠΔⵠⵠ = 1;
    return b;
  }
  oq = "J";
  vq += oq = No;
  function Sq(a) {
    return oc.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ΔⵠⵠⵠⲆ: 8938482,
      ⲆᐃΔⲆΔΔⲆΔᐃ: 6379107,
      ᐃⲆᐃΔᐃᐃΔ: 10688131,
      ΔΔᐃⲆⵠΔΔ: 4962320
    };
  })();
  wq = Xo;
  const Tq = 2;
  const Uq = 5;
  const Vq = 18;
  const Wq = Xk;
  const Xq = 17;
  Xo = Fa;
  const Yq = 8;
  const Zq = co;
  Fa = Oq;
  const $q = sk;
  wq = Oq;
  const _q = 256;
  const ar = 100;
  const br = 14;
  const cr = 16;
  ha = Aa = Oq + vq;
  No = vq + oq;
  Da = Uo = $o = Oq + vq;
  const dr = 13;
  const er = 6;
  const fr = rk;
  wq = Oq + vq;
  const gr = va;
  const hr = 256;
  _a = $o;
  const kr = 20;
  const lr = 12;
  const mr = 20;
  Xo = Oq + vq;
  const nr = 2;
  const pr = 19;
  Oa = ra = Uo;
  const rr = 7;
  const sr = 11;
  vq = Fa = Oq;
  const jr = 10;
  Eq = $o;
  const tr = 8;
  const ur = 3;
  Hq = Uo;
  const wr = 13;
  const qr = 4;
  oq = wq;
  const xr = 14;
  var yr = oc.devicePixelRatio || 1;
  function zr(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function Ar(a) {
    return oc.String.fromCharCode(a);
  }
  var Br = zo.ⵠⲆⲆΔⲆΔΔΔᐃ || zo.ᐃⲆᐃⲆᐃⵠⵠⵠᐃ || zo.ΔᐃΔⲆᐃΔⵠⲆΔ || zo.ⲆⵠΔᐃΔᐃⲆΔᐃ || zo.ⵠΔⵠⵠΔΔΔᐃΔ || 1;
  function Cr() {
    if (oc.innerWidth != fo.width) {
      fo.width = oc.innerWidth;
      yo = fo.width;
      iq = fo.width / 2;
    }
    if (fo.height != oc.innerHeight) {
      fo.height = oc.innerHeight;
      hq = fo.height;
      jq = fo.height / 2;
    }
    Jo = {
      x: iq,
      y: jq
    };
    var a = fo.width;
    var b = fo.height;
    Fo = Go === -1 ? yr / Br : Go;
    fo.width = Fo * a;
    fo.height = Fo * b;
    fo.style.width = a + "px";
    fo.style.height = b + "px";
    zo.scale(Fo, Fo);
    if (Rx) {
      Rx.ⵠⵠΔ.ΔᐃΔⲆⵠⲆⵠ = a;
      Rx.ⵠⵠΔ.ⲆⵠΔⲆⵠⵠⲆ = b;
    }
    if (Zx.ⲆΔᐃⲆⲆ) {
      Zx.ⵠⵠᐃ();
    } else if (Px.ⲆΔᐃⲆⲆ) {
      Px.ⵠⵠᐃ();
    } else if (Tx.ⲆΔᐃⲆⲆ) {
      Tx.ⵠⵠᐃ();
    } else if (Sx.ⲆΔᐃⲆⲆ) {
      Sx.ⵠⵠᐃ();
    }
  }
  var Dr = document.getElementById("game_body");
  Dr.ondragstart = function () {
    return false;
  };
  const Er = 15;
  const Fr = 0;
  const Gr = 2;
  const Hr = 1;
  Dr.ondrop = function () {
    return false;
  };
  Dr.onresize = Cr;
  (function () {
    var b = 0;
    for (var a = ["ms", "moz", "webkit", "o"], c = 0; c < a.length && !oc.requestAnimationFrame; ++c) {
      oc.requestAnimationFrame = oc[a[c] + "RequestAnimationFrame"];
      oc.cancelAnimationFrame = oc[a[c] + "CancelAnimationFrame"] || oc[a[c] + "CancelRequestAnimationFrame"];
    }
    oc.requestAnimationFrame ||= function (c, d) {
      var e = new Date().getTime();
      var f = Math.max(0, 16 - (e - b));
      var a = oc.setTimeout(function () {
        c(e + f);
      }, f);
      b = e + f;
      return a;
    };
    oc.cancelAnimationFrame ||= function (a) {
      clearTimeout(a);
    };
  })();
  const Ir = 255;
  const Kr = 13;
  function Lr(b, c, d, e, f, g) {
    const a = d ^ 13169;
    const i = ((e + 42154) * 2147483629 + 2147483587) % 2147483647;
    const j = f ^ 3619;
    return (2531011 + (52054 + (Db(~(b & 50847) & b | ~(b & 50847) & 50847, ((34463 + c) * 1664525 + 1013904223) % 4294967296) ^ mb(a, i, j))) * 214013) % 4294967296;
  }
  const Mr = 6;
  var Nr = navigator.language || navigator.userLanguage;
  var Or = -new Date().getTimezoneOffset() / 60;
  const Pr = 19;
  var Qr = "Europe";
  const Rr = da;
  const Sr = 0;
  const Tr = 5;
  var Ur = "South America";
  const Vr = 14;
  const Wr = 9;
  const Xr = Wq;
  const Yr = 4;
  const Zr = 255;
  var $r = Qr;
  if (Or >= -2 && Or <= 2) {
    $r = Qr;
  } else if (Or > 2 && Or <= 5) {
    $r = "Russia";
  } else if (Or > 5 && Or <= 9) {
    $r = "Asia";
  } else if (Or > 9) {
    $r = "Australia";
  } else if (Or >= -5 && Or < -2) {
    $r = Nr === "pt-BR" || Nr === "pt-br" || Nr === "pt" || Nr === "pt-pt" ? Ur : "North America";
  } else if (Or < -5) {
    $r = Nr === "pt-BR" || Nr === "pt-br" || Nr === "pt" || Nr === "pt-pt" ? Ur : "West America";
  }
  const _r = 6;
  const as = 16;
  const bs = 2;
  const cs = 20;
  const ds = 6;
  function es(b, c, d) {
    const e = (2531011 + (834 + b) * 214013) % 4294967296;
    const f = (c | 18637) & ~(c & 18637);
    const g = (2531011 + (d + 58019) * 214013) % 4294967296;
    return (1013904223 + (52530 + (function (b, c, d, e, f, g) {
      const a = (0 << (d & 255)) + (16 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (24 << (d >> 8 & 255));
      const i = e ^ 26080;
      const j = function (b, c) {
        const d = (8 << (b & 255)) + (16 << (b >> 16 & 255)) + (0 << (b >> 24 & 255)) + (24 << (b >> 8 & 255));
        const e = (1 + (15691 + c) * 22695477) % 4294967296;
        const f = _f(d, e, d);
        const g = yf(e, d, e, d, e, d);
        return (37767 + (f ^ g)) % 65501;
      }((b | 37096) & ~(b & 37096), (53851 + c) % 65363);
      Ab(a, i);
      return ~(j & 52021) & j | ~(j & 52021) & 52021;
    }(e, f, g, e) ^ lb(e, f, g))) * 1664525) % 4294967296;
  }
  function fs(a, b) {
    const c = (8 << (a >> 24 & 255)) + (16 << (a & 255)) + (24 << (a >> 16 & 255)) + (0 << (a >> 8 & 255));
    const d = b ^ 46751;
    return ((13513 + (ob(c, d, c, d, c, d) ^ gx(c, d, c, d))) * 214013 + 2531011) % 4294967296;
  }
  const gs = 17;
  var Uk = {
    ΔᐃΔⵠᐃⲆⵠ: function (a) {
      var b = 2147483648;
      var c = a || Math.floor(Math.random() * (b - 1));
      this.ⵠᐃᐃⲆᐃ = function (a) {
        c = a || Math.floor(Math.random() * (b - 1));
      };
      this.get = function () {
        return (c = (c * 1103515245 + 12345) % b) / b;
      };
    }
  };
  var is = [[0, "DRAGON", 18, 6, 66, 35, 0], [0, "WINTER", 91, 18, 5, 40, 8], [0, "DESERT", 135, 180, 89, 124, 5], [0, "LAVA", 142, 6, 82, 99, 6], [0, "FOREST", 6, 150, 90, 154, 8], [0, "WINTER", 6, 6, 90, 150, 0], [1, "b", 0, 5, 175, 0], [1, "t", 2, 5, 174, 0], [1, "t", 5, 5, 173, 0], [1, "b", 3, 5, 176, 0], [1, "t", 0, 5, 177, 0], [1, "t", 3, 5, 178, 0], [1, "t", 4, 5, 179, 0], [1, "b", 0, 5, 180, 0], [1, "t", 5, 5, 181, 0], [1, "b", 2, 5, 182, 0], [1, "b", 1, 5, 183, 0], [1, "b", 2, 5, 184, 0], [1, "t", 5, 5, 185, 0], [1, "t", 2, 5, 186, 0], [1, "t", 0, 5, 187, 0], [1, "t", 5, 5, 188, 0], [1, "t", 1, 5, 189, 0], [1, "b", 2, 5, 190, 0], [1, "t", 4, 5, 191, 0], [1, "b", 3, 5, 192, 0], [1, "t", 5, 5, 193, 0], [1, "t", 0, 5, 194, 0], [1, "t", 3, 5, 195, 0], [1, "b", 0, 5, 196, 0], [1, "t", 5, 5, 197, 0], [1, "t", 2, 5, 198, 0], [1, "b", 2, 5, 199, 0], [1, "t", 4, 5, 200, 0], [1, "t", 1, 5, 201, 0], [1, "b", 1, 5, 202, 0], [1, "t", 5, 5, 203, 0], [1, "t", 2, 5, 204, 0], [1, "t", 4, 5, 205, 0], [1, "b", 2, 5, 206, 0], [1, "t", 1, 5, 207, 0], [1, "t", 4, 5, 208, 0], [1, "t", 2, 5, 209, 0], [1, "b", 0, 5, 210, 0], [1, "t", 5, 5, 211, 0], [1, "t", 1, 5, 212, 0], [1, "t", 2, 5, 213, 0], [1, "b", 3, 5, 214, 0], [1, "t", 5, 5, 215, 0], [1, "b", 0, 5, 216, 0], [1, "t", 4, 5, 217, 0], [1, "t", 2, 5, 218, 0], [1, "t", 1, 5, 219, 0], [1, "t", 3, 5, 220, 0], [1, "t", 5, 5, 221, 0], [1, "t", 2, 5, 222, 0], [1, "t", 4, 5, 223, 0], [1, "b", 3, 5, 224, 0], [1, "t", 1, 5, 225, 0], [1, "t", 3, 5, 226, 0], [1, "b", 0, 5, 227, 0], [1, "t", 3, 5, 228, 0], [1, "t", 5, 5, 229, 0], [1, "t", 2, 5, 230, 0], [1, "t", 0, 5, 231, 0], [1, "b", 2, 5, 232, 0], [1, "t", 1, 5, 233, 0], [1, "t", 4, 5, 234, 0], [1, "b", 1, 5, 235, 0], [1, "t", 4, 5, 236, 0], [1, "t", 2, 5, 237, 0], [1, "t", 0, 5, 238, 0], [1, "t", 4, 5, 239, 0], [1, "b", 2, 5, 240, 0], [1, "t", 5, 5, 241, 0], [1, "b", 1, 5, 242, 0], [1, "t", 4, 5, 243, 0], [1, "t", 2, 5, 244, 0], [1, "t", 1, 5, 245, 0], [1, "b", 1, 5, 246, 0], [1, "t", 3, 5, 247, 0], [1, "b", 2, 5, 248, 0], [1, "t", 5, 5, 249, 0], [1, "t", 2, 5, 250, 0], [1, "t", 4, 5, 251, 0], [1, "b", 1, 5, 252, 0], [1, "t", 4, 5, 253, 0], [1, "t", 1, 5, 254, 0], [1, "t", 3, 5, 255, 0], [1, "t", 5, 5, 256, 0], [1, "b", 2, 5, 257, 0], [1, "t", 4, 5, 258, 0], [1, "b", 3, 5, 259, 0], [1, "t", 5, 5, 260, 0], [1, "b", 0, 5, 261, 0], [1, "t", 3, 5, 262, 0], [1, "t", 4, 5, 263, 0], [1, "t", 2, 5, 264, 0], [1, "b", 1, 5, 265, 0], [1, "b", 2, 5, 266, 0], [1, "t", 3, 5, 267, 0], [1, "t", 4, 5, 268, 0], [1, "t", 0, 5, 269, 0], [1, "t", 5, 5, 270, 0], [1, "t", 3, 5, 271, 0], [1, "t", 4, 5, 272, 0], [1, "t", 1, 5, 273, 0], [1, "b", 2, 5, 274, 0], [1, "t", 1, 5, 275, 0], [1, "t", 4, 5, 276, 0], [1, "b", 1, 5, 277, 0], [1, "b", 2, 5, 278, 0], [1, "t", 1, 5, 279, 0], [1, "t", 4, 5, 280, 0], [1, "t", 2, 5, 281, 0], [1, "t", 5, 5, 282, 0], [1, "b", 2, 5, 283, 0], [1, "t", 1, 5, 284, 0], [1, "b", 3, 5, 285, 0], [1, "t", 4, 5, 286, 0], [1, "t", 0, 5, 287, 0], [1, "t", 5, 5, 288, 0], [1, "t", 2, 5, 289, 0], [1, "b", 1, 5, 290, 0], [1, "t", 4, 5, 292, 0], [1, "t", 2, 5, 291, 0], [1, "b", 2, 5, 293, 0], [1, "t", 1, 5, 294, 0], [1, "t", 3, 5, 295, 0], [1, "t", 5, 5, 296, 0], [1, "b", 0, 5, 297, 0], [1, "b", 3, 5, 298, 0], [1, "t", 4, 5, 299, 0], [1, "t", 2, 5, 300, 0], [1, "t", 4, 5, 301, 0], [1, "b", 0, 5, 302, 0], [1, "b", 2, 5, 303, 0], [1, "t", 1, 6, 303, 0], [1, "t", 2, 7, 303, 0], [1, "t", 1, 5, 304, 0], [1, "t", 3, 6, 304, 0], [1, "t", 4, 7, 304, 0], [1, "t", 5, 8, 303, 0], [1, "b", 1, 8, 304, 0], [1, "b", 2, 9, 304, 0], [1, "b", 3, 12, 303, 0], [1, "b", 3, 17, 304, 0], [1, "t", 1, 9, 303, 0], [1, "t", 1, 15, 304, 0], [1, "t", 1, 13, 303, 0], [1, "t", 3, 10, 303, 0], [1, "t", 3, 14, 304, 0], [1, "t", 4, 10, 304, 0], [1, "t", 5, 11, 304, 0], [1, "t", 5, 14, 303, 0], [1, "t", 5, 16, 304, 0], [1, "t", 5, 13, 304, 0], [1, "t", 2, 12, 304, 0], [1, "t", 1, 11, 303, 0], [1, "b", 3, 15, 303, 0], [1, "b", 0, 16, 303, 0], [1, "t", 3, 17, 303, 0], [1, "t", 4, 18, 303, 0], [1, "t", 2, 19, 303, 0], [1, "t", 1, 20, 303, 0], [1, "b", 1, 21, 303, 0], [1, "t", 2, 22, 303, 0], [1, "t", 4, 23, 303, 0], [1, "b", 3, 24, 303, 0], [1, "t", 5, 25, 303, 0], [1, "t", 1, 26, 303, 0], [1, "t", 2, 27, 303, 0], [1, "t", 4, 28, 303, 0], [1, "b", 0, 18, 304, 0], [1, "t", 2, 19, 304, 0], [1, "t", 5, 20, 304, 0], [1, "b", 2, 21, 304, 0], [1, "t", 4, 22, 304, 0], [1, "t", 2, 23, 304, 0], [1, "t", 1, 24, 304, 0], [1, "t", 3, 25, 304, 0], [1, "t", 0, 27, 304, 0], [1, "t", 5, 26, 304, 0], [1, "b", 2, 28, 304, 0], [1, "t", 1, 29, 304, 0], [1, "b", 1, 29, 303, 0], [1, "b", 2, 30, 303, 0], [1, "t", 4, 31, 303, 0], [1, "t", 0, 32, 303, 0], [1, "t", 5, 33, 303, 0], [1, "t", 2, 34, 303, 0], [1, "t", 4, 35, 303, 0], [1, "t", 1, 36, 303, 0], [1, "b", 3, 37, 303, 0], [1, "t", 2, 32, 304, 0], [1, "t", 4, 30, 304, 0], [1, "t", 1, 31, 304, 0], [1, "b", 1, 33, 304, 0], [1, "t", 2, 35, 304, 0], [1, "t", 5, 34, 304, 0], [1, "b", 2, 36, 304, 0], [1, "t", 5, 37, 304, 0], [1, "t", 1, 38, 304, 0], [1, "b", 1, 40, 303, 0], [1, "t", 3, 39, 303, 0], [1, "t", 3, 42, 304, 0], [1, "t", 5, 38, 303, 0], [1, "t", 5, 39, 304, 0], [1, "t", 5, 41, 303, 0], [1, "t", 4, 41, 304, 0], [1, "t", 4, 44, 303, 0], [1, "b", 2, 40, 304, 0], [1, "b", 2, 43, 303, 0], [1, "t", 1, 42, 303, 0], [1, "t", 1, 43, 304, 0], [1, "t", 5, 44, 304, 0], [1, "b", 1, 45, 303, 0], [1, "t", 2, 45, 304, 0], [1, "t", 2, 46, 303, 0], [1, "t", 4, 47, 303, 0], [1, "b", 0, 48, 303, 0], [1, "t", 5, 49, 303, 0], [1, "t", 2, 50, 303, 0], [1, "t", 1, 51, 303, 0], [1, "t", 4, 52, 303, 0], [1, "t", 5, 46, 304, 0], [1, "t", 2, 47, 304, 0], [1, "t", 5, 48, 304, 0], [1, "t", 1, 49, 304, 0], [1, "t", 2, 50, 304, 0], [1, "b", 1, 53, 303, 0], [1, "b", 2, 51, 304, 0], [1, "t", 5, 52, 304, 0], [1, "t", 3, 53, 304, 0], [1, "b", 2, 54, 303, 0], [1, "t", 5, 54, 304, 0], [1, "t", 5, 55, 303, 0], [1, "t", 3, 56, 303, 0], [1, "t", 4, 57, 303, 0], [1, "t", 5, 58, 303, 0], [1, "b", 1, 55, 304, 0], [1, "t", 2, 56, 304, 0], [1, "t", 0, 57, 304, 0], [1, "t", 3, 58, 304, 0], [1, "t", 3, 63, 304, 0], [1, "t", 3, 59, 303, 0], [1, "t", 4, 59, 304, 0], [1, "t", 5, 60, 303, 0], [1, "t", 0, 60, 304, 0], [1, "t", 0, 66, 303, 0], [1, "t", 0, 70, 304, 0], [1, "t", 3, 61, 304, 0], [1, "t", 3, 67, 303, 0], [1, "t", 3, 73, 304, 0], [1, "t", 3, 76, 303, 0], [1, "t", 3, 78, 304, 0], [1, "t", 1, 61, 303, 0], [1, "t", 1, 73, 303, 0], [1, "t", 1, 79, 303, 0], [1, "b", 2, 62, 304, 0], [1, "b", 2, 70, 303, 0], [1, "t", 5, 62, 303, 0], [1, "t", 5, 68, 303, 0], [1, "t", 5, 71, 304, 0], [1, "t", 5, 77, 304, 0], [1, "t", 5, 75, 303, 0], [1, "t", 5, 64, 304, 0], [1, "t", 5, 65, 303, 0], [1, "t", 5, 80, 303, 0], [1, "t", 1, 76, 304, 0], [1, "t", 3, 63, 303, 0], [1, "t", 5, 82, 304, 0], [1, "b", 2, 65, 304, 0], [1, "t", 1, 64, 303, 0], [1, "t", 1, 68, 304, 0], [1, "t", 2, 69, 304, 0], [1, "t", 4, 69, 303, 0], [1, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, 0], [1, "t", 0, 71, 303, 0], [1, "t", 4, 72, 303, 0], [1, "t", 4, 74, 304, 0], [1, "t", 2, 74, 303, 0], [1, "t", 3, 75, 304, 0], [1, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", 4, 79, 304, 0], [1, "t", 2, 80, 304, 0], [1, "b", 1, 81, 304, 0], [1, "t", 2, 81, 303, 0], [1, "t", 5, 82, 303, 0], [1, "t", 1, 83, 303, 0], [1, "b", 2, 83, 304, 0], [1, "t", 1, 84, 304, 0], [1, "t", 4, 84, 303, 0], [1, "t", 5, 85, 304, 0], [1, "t", 3, 85, 303, 0], [1, "b", 2, 86, 304, 0], [1, "t", 1, 86, 303, 0], [1, "b", 3, 87, 303, 0], [1, "t", 4, 87, 304, 0], [1, "t", 4, 88, 303, 0], [1, "t", 0, 88, 304, 0], [1, "b", 1, 89, 303, 0], [1, "t", 3, 89, 304, 0], [1, "t", 3, 90, 303, 0], [1, "t", 4, 90, 304, 0], [1, "t", 4, 91, 303, 0], [1, "t", 0, 91, 304, 0], [1, "b", 2, 92, 303, 0], [1, "t", 4, 92, 304, 0], [1, "t", 5, 93, 303, 0], [1, "t", 0, 93, 304, 0], [1, "b", 3, 94, 303, 0], [1, "b", 0, 94, 304, 0], [1, "b", 0, 95, 303, 0], [1, "t", 2, 95, 304, 0], [1, "f", 1, 5, 151, 1], [1, "f", 2, 5, 153, 1], [1, "f", 0, 5, 152, 1], [1, "f", 0, 5, 147, 1], [1, "f", 0, 5, 144, 1], [1, "f", 0, 5, 140, 1], [1, "f", 1, 5, 149, 1], [1, "f", 1, 5, 146, 1], [1, "f", 1, 5, 143, 1], [1, "f", 1, 5, 141, 1], [1, "f", 2, 5, 150, 1], [1, "f", 2, 5, 148, 1], [1, "f", 2, 5, 145, 1], [1, "f", 2, 5, 142, 1], [1, "f", 2, 5, 139, 1], [1, "f", 2, 5, 136, 1], [1, "f", 2, 5, 133, 1], [1, "f", 2, 5, 131, 1], [1, "f", 2, 5, 127, 1], [1, "f", 2, 5, 125, 1], [1, "f", 1, 5, 138, 1], [1, "f", 1, 5, 135, 1], [1, "f", 1, 5, 132, 1], [1, "f", 1, 5, 130, 1], [1, "f", 1, 5, 128, 1], [1, "f", 1, 5, 126, 1], [1, "f", 1, 5, 124, 1], [1, "f", 0, 5, 129, 1], [1, "f", 0, 5, 134, 1], [1, "f", 0, 5, 137, 1], [1, "f", 0, 5, 123, 1], [1, "f", 1, 5, 122, 1], [1, "f", 1, 5, 120, 1], [1, "f", 1, 5, 117, 1], [1, "f", 1, 5, 115, 1], [1, "f", 1, 5, 111, 1], [1, "f", 1, 5, 108, 1], [1, "f", 2, 5, 121, 1], [1, "f", 2, 5, 118, 1], [1, "f", 2, 5, 116, 1], [1, "f", 2, 5, 113, 1], [1, "f", 2, 5, 110, 1], [1, "f", 0, 5, 119, 1], [1, "f", 0, 5, 114, 1], [1, "f", 0, 5, 112, 1], [1, "f", 0, 5, 109, 1], [1, "f", 1, 5, 106, 1], [1, "f", 1, 5, 103, 1], [1, "f", 1, 5, 100, 1], [1, "f", 1, 5, 97, 1], [1, "f", 1, 5, 95, 1], [1, "f", 2, 5, 107, 1], [1, "f", 2, 5, 105, 1], [1, "f", 2, 5, 102, 1], [1, "f", 2, 5, 99, 1], [1, "f", 2, 5, 96, 1], [1, "f", 2, 5, 94, 1], [1, "f", 0, 5, 104, 1], [1, "f", 0, 5, 101, 1], [1, "f", 0, 5, 98, 1], [1, "f", 0, 5, 93, 1], [1, "f", 1, 5, 92, 1], [1, "f", 1, 5, 89, 1], [1, "f", 1, 5, 86, 1], [1, "f", 1, 5, 83, 1], [1, "f", 1, 5, 80, 1], [1, "f", 1, 5, 78, 1], [1, "f", 2, 5, 90, 1], [1, "f", 2, 5, 88, 1], [1, "f", 2, 5, 85, 1], [1, "f", 2, 5, 82, 1], [1, "f", 2, 5, 79, 1], [1, "f", 2, 5, 77, 1], [1, "f", 2, 5, 75, 1], [1, "f", 2, 5, 72, 1], [1, "f", 0, 5, 91, 1], [1, "f", 0, 5, 87, 1], [1, "f", 0, 5, 84, 1], [1, "f", 0, 5, 81, 1], [1, "f", 0, 5, 76, 1], [1, "f", 0, 5, 74, 1], [1, "f", 1, 5, 73, 1], [1, "f", 1, 5, 71, 1], [1, "f", 1, 5, 68, 1], [1, "f", 1, 5, 66, 1], [1, "f", 1, 5, 62, 1], [1, "f", 1, 5, 59, 1], [1, "f", 1, 5, 56, 1], [1, "f", 1, 5, 53, 1], [1, "f", 1, 5, 50, 1], [1, "f", 2, 5, 70, 1], [1, "f", 2, 5, 67, 1], [1, "f", 2, 5, 65, 1], [1, "f", 2, 5, 63, 1], [1, "f", 2, 5, 60, 1], [1, "f", 2, 5, 57, 1], [1, "f", 2, 5, 54, 1], [1, "f", 2, 5, 51, 1], [1, "f", 0, 5, 69, 1], [1, "f", 0, 5, 64, 1], [1, "f", 0, 5, 61, 1], [1, "f", 0, 5, 58, 1], [1, "f", 0, 5, 55, 1], [1, "f", 0, 5, 52, 1], [1, "f", 0, 5, 49, 1], [1, "f", 0, 5, 45, 1], [1, "f", 0, 5, 42, 1], [1, "f", 0, 5, 38, 1], [1, "f", 0, 5, 34, 1], [1, "f", 0, 5, 31, 1], [1, "f", 1, 5, 48, 1], [1, "f", 1, 5, 44, 1], [1, "f", 1, 5, 41, 1], [1, "f", 1, 5, 37, 1], [1, "f", 1, 5, 33, 1], [1, "f", 1, 5, 29, 1], [1, "f", 2, 5, 30, 1], [1, "f", 2, 5, 32, 1], [1, "f", 2, 5, 35, 1], [1, "f", 2, 5, 39, 1], [1, "f", 2, 5, 46, 1], [1, "f", 2, 5, 43, 1], [1, "f", 1, 5, 47, 1], [1, "f", 0, 5, 40, 1], [1, "f", 0, 5, 36, 1], [1, "f", 0, 5, 28, 1], [1, "f", 1, 5, 25, 1], [1, "f", 1, 5, 22, 1], [1, "f", 1, 5, 20, 1], [1, "f", 1, 5, 16, 1], [1, "f", 1, 5, 13, 1], [1, "f", 1, 5, 10, 1], [1, "f", 2, 5, 27, 1], [1, "f", 2, 5, 24, 1], [1, "f", 2, 5, 21, 1], [1, "f", 2, 5, 19, 1], [1, "f", 2, 5, 15, 1], [1, "f", 2, 5, 12, 1], [1, "f", 2, 5, 9, 1], [1, "f", 0, 5, 26, 1], [1, "f", 0, 5, 23, 1], [1, "f", 0, 5, 14, 1], [1, "f", 0, 5, 11, 1], [1, "f", 0, 5, 17, 1], [1, "f", 1, 5, 18, 1], [1, "f", 1, 5, 8, 1], [1, "f", 0, 5, 7, 1], [1, "f", 1, 5, 6, 1], [1, "f", 0, 5, 5, 1], [1, "f", 1, 6, 5, 1], [1, "f", 2, 7, 5, 1], [1, "f", 0, 8, 5, 1], [1, "f", 1, 9, 5, 1], [1, "f", 1, 12, 5, 1], [1, "f", 1, 15, 5, 1], [1, "f", 1, 17, 5, 1], [1, "f", 1, 22, 5, 1], [1, "f", 1, 26, 5, 1], [1, "f", 2, 10, 5, 1], [1, "f", 2, 13, 5, 1], [1, "f", 2, 16, 5, 1], [1, "f", 2, 18, 5, 1], [1, "f", 2, 21, 5, 1], [1, "f", 2, 23, 5, 1], [1, "f", 2, 25, 5, 1], [1, "f", 2, 27, 5, 1], [1, "f", 0, 11, 5, 1], [1, "f", 0, 14, 5, 1], [1, "f", 0, 19, 5, 1], [1, "f", 0, 24, 5, 1], [1, "f", 0, 28, 5, 1], [1, "f", 1, 20, 5, 1], [1, "f", 1, 29, 5, 1], [1, "f", 1, 32, 5, 1], [1, "f", 1, 35, 5, 1], [1, "f", 1, 38, 5, 1], [1, "f", 1, 41, 5, 1], [1, "f", 1, 45, 5, 1], [1, "f", 2, 30, 5, 1], [1, "f", 2, 33, 5, 1], [1, "f", 2, 36, 5, 1], [1, "f", 2, 39, 5, 1], [1, "f", 2, 42, 5, 1], [1, "f", 2, 44, 5, 1], [1, "f", 2, 46, 5, 1], [1, "f", 0, 43, 5, 1], [1, "f", 0, 40, 5, 1], [1, "f", 0, 37, 5, 1], [1, "f", 0, 34, 5, 1], [1, "f", 0, 31, 5, 1], [1, "f", 0, 47, 5, 1], [1, "f", 1, 48, 5, 1], [1, "f", 1, 51, 5, 1], [1, "f", 1, 53, 5, 1], [1, "f", 1, 57, 5, 1], [1, "f", 1, 60, 5, 1], [1, "f", 1, 63, 5, 1], [1, "f", 1, 65, 5, 1], [1, "f", 2, 64, 5, 1], [1, "f", 2, 62, 5, 1], [1, "f", 2, 59, 5, 1], [1, "f", 2, 56, 5, 1], [1, "f", 2, 52, 5, 1], [1, "f", 2, 49, 5, 1], [1, "f", 2, 54, 5, 1], [1, "f", 0, 50, 5, 1], [1, "f", 0, 55, 5, 1], [1, "f", 0, 58, 5, 1], [1, "f", 0, 61, 5, 1], [1, "f", 0, 66, 5, 1], [1, "f", 1, 67, 5, 1], [1, "f", 1, 70, 5, 1], [1, "f", 1, 72, 5, 1], [1, "f", 1, 75, 5, 1], [1, "f", 1, 79, 5, 1], [1, "f", 2, 68, 5, 1], [1, "f", 2, 71, 5, 1], [1, "f", 2, 74, 5, 1], [1, "f", 2, 76, 5, 1], [1, "f", 2, 78, 5, 1], [1, "f", 0, 69, 5, 1], [1, "f", 0, 73, 5, 1], [1, "f", 0, 77, 5, 1], [1, "f", 0, 80, 5, 1], [1, "f", 1, 81, 5, 1], [1, "f", 1, 84, 5, 1], [1, "f", 1, 87, 5, 1], [1, "f", 1, 89, 5, 1], [1, "f", 1, 92, 5, 1], [1, "f", 1, 94, 5, 1], [1, "f", 0, 82, 5, 1], [1, "f", 2, 83, 5, 1], [1, "f", 2, 85, 5, 1], [1, "f", 2, 88, 5, 1], [1, "f", 2, 90, 5, 1], [1, "f", 2, 93, 5, 1], [1, "f", 2, 95, 5, 1], [1, "f", 0, 86, 5, 1], [1, "f", 0, 91, 5, 1], [1, "f", 2, 6, 153, 1], [1, "f", 1, 6, 152, 1], [1, "t", 1, 93, 301, 0], [1, "t", 3, 94, 302, 0], [1, "t", 5, 95, 302, 0], [1, "t", 5, 93, 302, 0], [1, "b", 3, 92, 302, 0], [1, "t", 1, 91, 302, 0], [1, "t", 5, 90, 302, 0], [1, "b", 2, 92, 301, 0], [1, "t", 1, 91, 301, 0], [1, "t", 2, 90, 301, 0], [1, "b", 2, 89, 302, 0], [1, "t", 4, 89, 301, 0], [1, "t", 1, 88, 302, 0], [1, "t", 2, 88, 301, 0], [1, "t", 3, 87, 302, 0], [1, "t", 4, 87, 299, 0], [1, "t", 4, 86, 302, 0], [1, "t", 1, 85, 302, 0], [1, "t", 5, 85, 301, 0], [1, "b", 2, 84, 302, 0], [1, "t", 5, 83, 302, 0], [1, "t", 1, 82, 302, 0], [1, "t", 5, 81, 302, 0], [1, "t", 2, 80, 302, 0], [1, "t", 4, 79, 302, 0], [1, "t", 2, 78, 302, 0], [1, "b", 1, 77, 302, 0], [1, "b", 2, 76, 302, 0], [1, "t", 2, 75, 302, 0], [1, "t", 4, 74, 302, 0], [1, "b", 1, 73, 302, 0], [1, "t", 2, 72, 302, 0], [1, "t", 4, 71, 302, 0], [1, "b", 3, 70, 302, 0], [1, "t", 1, 69, 302, 0], [1, "t", 2, 68, 302, 0], [1, "t", 5, 67, 302, 0], [1, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, 0], [1, "t", 4, 64, 302, 0], [1, "b", 3, 63, 302, 0], [1, "t", 5, 62, 302, 0], [1, "b", 1, 61, 302, 0], [1, "t", 3, 60, 302, 0], [1, "t", 4, 59, 302, 0], [1, "b", 2, 58, 302, 0], [1, "t", 5, 57, 302, 0], [1, "t", 1, 56, 302, 0], [1, "t", 3, 55, 302, 0], [1, "t", 4, 54, 302, 0], [1, "t", 1, 53, 302, 0], [1, "t", 5, 52, 302, 0], [1, "t", 2, 51, 302, 0], [1, "t", 4, 50, 302, 0], [1, "t", 2, 49, 302, 0], [1, "b", 1, 48, 302, 0], [1, "t", 3, 47, 302, 0], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, 0], [1, "t", 2, 44, 302, 0], [1, "t", 5, 43, 302, 0], [1, "t", 2, 42, 302, 0], [1, "t", 1, 41, 302, 0], [1, "t", 4, 40, 302, 0], [1, "b", 2, 39, 302, 0], [1, "t", 5, 38, 302, 0], [1, "t", 1, 37, 302, 0], [1, "t", 2, 36, 302, 0], [1, "t", 5, 35, 302, 0], [1, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", 4, 32, 302, 0], [1, "b", 1, 31, 302, 0], [1, "t", 2, 30, 302, 0], [1, "t", 4, 29, 302, 0], [1, "t", 2, 28, 302, 0], [1, "t", 5, 27, 302, 0], [1, "b", 3, 26, 302, 0], [1, "t", 1, 25, 302, 0], [1, "t", 4, 24, 302, 0], [1, "t", 2, 23, 302, 0], [1, "t", 1, 22, 302, 0], [1, "t", 5, 21, 302, 0], [1, "t", 2, 20, 302, 0], [1, "t", 4, 19, 302, 0], [1, "b", 1, 18, 302, 0], [1, "t", 5, 17, 302, 0], [1, "t", 3, 16, 302, 0], [1, "t", 1, 15, 302, 0], [1, "t", 5, 14, 302, 0], [1, "t", 3, 13, 302, 0], [1, "t", 4, 12, 302, 0], [1, "t", 1, 11, 302, 0], [1, "t", 2, 10, 302, 0], [1, "t", 4, 9, 302, 0], [1, "b", 3, 8, 302, 0], [1, "t", 5, 8, 302, 0], [1, "t", 5, 7, 302, 0], [1, "b", 2, 6, 302, 0], [1, "t", 1, 6, 301, 0], [1, "t", 4, 6, 300, 0], [1, "t", 2, 6, 299, 0], [1, "b", 0, 6, 298, 0], [1, "t", 5, 6, 297, 0], [1, "t", 2, 6, 296, 0], [1, "t", 0, 6, 295, 0], [1, "b", 2, 6, 294, 0], [1, "t", 5, 6, 293, 0], [1, "t", 1, 6, 292, 0], [1, "b", 0, 6, 291, 0], [1, "t", 2, 6, 290, 0], [1, "t", 5, 6, 289, 0], [1, "t", 1, 6, 288, 0], [1, "t", 4, 6, 287, 0], [1, "t", 2, 6, 286, 0], [1, "t", 5, 6, 285, 0], [1, "t", 2, 6, 284, 0], [1, "b", 0, 6, 283, 0], [1, "t", 2, 6, 282, 0], [1, "t", 5, 6, 281, 0], [1, "b", 2, 6, 280, 0], [1, "t", 5, 6, 279, 0], [1, "t", 1, 6, 278, 0], [1, "t", 4, 6, 277, 0], [1, "t", 3, 6, 276, 0], [1, "t", 5, 6, 275, 0], [1, "b", 0, 6, 274, 0], [1, "t", 5, 6, 273, 0], [1, "t", 1, 6, 272, 0], [1, "t", 4, 6, 271, 0], [1, "b", 3, 6, 270, 0], [1, "t", 5, 6, 269, 0], [1, "t", 1, 6, 268, 0], [1, "t", 4, 6, 267, 0], [1, "t", 1, 6, 266, 0], [1, "t", 3, 6, 265, 0], [1, "t", 4, 6, 264, 0], [1, "b", 2, 6, 263, 0], [1, "t", 5, 6, 262, 0], [1, "t", 3, 6, 261, 0], [1, "t", 0, 6, 260, 0], [1, "t", 5, 6, 259, 0], [1, "t", 1, 6, 258, 0], [1, "t", 3, 6, 257, 0], [1, "t", 4, 6, 255, 0], [1, "t", 3, 6, 254, 0], [1, "t", 5, 6, 253, 0], [1, "b", 2, 6, 252, 0], [1, "t", 5, 6, 251, 0], [1, "t", 1, 6, 250, 0], [1, "t", 3, 6, 249, 0], [1, "t", 4, 6, 248, 0], [1, "b", 3, 6, 247, 0], [1, "t", 5, 6, 246, 0], [1, "t", 3, 6, 245, 0], [1, "t", 5, 6, 244, 0], [1, "t", 0, 6, 243, 0], [1, "t", 4, 6, 242, 0], [1, "t", 3, 6, 241, 0], [1, "t", 5, 6, 240, 0], [1, "b", 0, 6, 239, 0], [1, "t", 3, 6, 238, 0], [1, "t", 4, 6, 237, 0], [1, "t", 1, 6, 236, 0], [1, "t", 5, 6, 235, 0], [1, "b", 2, 6, 234, 0], [1, "t", 2, 6, 233, 0], [1, "t", 4, 6, 232, 0], [1, "b", 3, 6, 231, 0], [1, "t", 5, 6, 230, 0], [1, "t", 1, 6, 229, 0], [1, "t", 2, 6, 228, 0], [1, "t", 5, 6, 227, 0], [1, "b", 2, 6, 226, 0], [1, "t", 4, 6, 225, 0], [1, "t", 0, 6, 224, 0], [1, "t", 2, 6, 223, 0], [1, "t", 0, 6, 222, 0], [1, "b", 2, 6, 221, 0], [1, "t", 4, 6, 220, 0], [1, "b", 3, 6, 219, 0], [1, "t", 5, 6, 218, 0], [1, "t", 0, 6, 217, 0], [1, "t", 3, 6, 216, 0], [1, "b", 0, 6, 215, 0], [1, "t", 4, 6, 214, 0], [1, "t", 2, 6, 213, 0], [1, "t", 0, 6, 212, 0], [1, "t", 2, 6, 211, 0], [1, "b", 3, 6, 210, 0], [1, "t", 0, 6, 209, 0], [1, "t", 5, 6, 207, 0], [1, "t", 2, 6, 208, 0], [1, "t", 0, 6, 206, 0], [1, "t", 2, 6, 205, 0], [1, "t", 2, 6, 203, 0], [1, "b", 0, 6, 202, 0], [1, "t", 3, 6, 201, 0], [1, "t", 4, 6, 199, 0], [1, "t", 0, 6, 198, 0], [1, "t", 2, 6, 197, 0], [1, "t", 4, 6, 196, 0], [1, "t", 1, 6, 195, 0], [1, "t", 3, 6, 194, 0], [1, "t", 4, 6, 192, 0], [1, "t", 2, 6, 191, 0], [1, "b", 0, 6, 190, 0], [1, "t", 3, 6, 189, 0], [1, "t", 4, 6, 187, 0], [1, "b", 0, 6, 186, 0], [1, "t", 2, 6, 185, 0], [1, "t", 4, 6, 184, 0], [1, "t", 2, 6, 183, 0], [1, "t", 0, 6, 182, 0], [1, "b", 2, 6, 181, 0], [1, "t", 5, 6, 180, 0], [1, "t", 2, 6, 179, 0], [1, "t", 0, 6, 178, 0], [1, "t", 2, 6, 177, 0], [1, "t", 4, 6, 176, 0], [1, "b", 2, 6, 175, 0], [1, "t", 1, 6, 174, 0], [1, "t", 5, 6, 173, 0], [1, "t", 2, 6, 256, 0], [1, "t", 4, 6, 204, 0], [1, "t", 4, 6, 200, 0], [1, "t", 2, 6, 193, 0], [1, "t", 2, 6, 188, 0], [1, "f", 1, 6, 150, 1], [1, "f", 2, 6, 151, 1], [1, "f", 2, 6, 149, 1], [1, "f", 1, 6, 148, 1], [1, "f", 2, 6, 147, 1], [1, "f", 2, 6, 145, 1], [1, "f", 2, 6, 143, 1], [1, "f", 1, 6, 146, 1], [1, "f", 1, 6, 144, 1], [1, "f", 1, 6, 142, 1], [1, "f", 2, 6, 141, 1], [1, "f", 2, 6, 139, 1], [1, "f", 2, 6, 137, 1], [1, "f", 2, 6, 135, 1], [1, "f", 2, 6, 133, 1], [1, "f", 1, 6, 140, 1], [1, "f", 1, 6, 138, 1], [1, "f", 1, 6, 136, 1], [1, "f", 1, 6, 134, 1], [1, "f", 1, 6, 132, 1], [1, "f", 2, 6, 131, 1], [1, "f", 2, 6, 129, 1], [1, "f", 2, 6, 127, 1], [1, "f", 2, 6, 125, 1], [1, "f", 2, 6, 123, 1], [1, "f", 2, 6, 121, 1], [1, "f", 1, 6, 130, 1], [1, "f", 1, 6, 128, 1], [1, "f", 1, 6, 126, 1], [1, "f", 1, 6, 124, 1], [1, "f", 1, 6, 122, 1], [1, "f", 1, 6, 120, 1], [1, "f", 2, 6, 119, 1], [1, "f", 2, 6, 117, 1], [1, "f", 2, 6, 115, 1], [1, "f", 2, 6, 113, 1], [1, "f", 2, 6, 111, 1], [1, "f", 2, 6, 109, 1], [1, "f", 1, 6, 118, 1], [1, "f", 1, 6, 116, 1], [1, "f", 1, 6, 114, 1], [1, "f", 1, 6, 112, 1], [1, "f", 1, 6, 110, 1], [1, "f", 1, 6, 108, 1], [1, "f", 1, 6, 106, 1], [1, "f", 1, 6, 104, 1], [1, "f", 2, 6, 107, 1], [1, "f", 2, 6, 105, 1], [1, "f", 2, 6, 103, 1], [1, "f", 2, 6, 101, 1], [1, "f", 2, 6, 99, 1], [1, "f", 2, 6, 97, 1], [1, "f", 2, 6, 95, 1], [1, "f", 2, 6, 93, 1], [1, "f", 2, 6, 91, 1], [1, "f", 1, 6, 102, 1], [1, "f", 1, 6, 100, 1], [1, "f", 1, 6, 98, 1], [1, "f", 1, 6, 96, 1], [1, "f", 1, 6, 94, 1], [1, "f", 1, 6, 92, 1], [1, "f", 1, 6, 90, 1], [1, "f", 1, 6, 88, 1], [1, "f", 1, 6, 86, 1], [1, "f", 2, 6, 89, 1], [1, "f", 2, 6, 87, 1], [1, "f", 2, 6, 85, 1], [1, "f", 2, 6, 83, 1], [1, "f", 2, 6, 81, 1], [1, "f", 2, 6, 79, 1], [1, "f", 2, 6, 77, 1], [1, "f", 1, 6, 84, 1], [1, "f", 1, 6, 82, 1], [1, "f", 1, 6, 80, 1], [1, "f", 1, 6, 78, 1], [1, "f", 1, 6, 76, 1], [1, "f", 2, 6, 75, 1], [1, "f", 2, 6, 73, 1], [1, "f", 2, 6, 71, 1], [1, "f", 2, 6, 69, 1], [1, "f", 2, 6, 67, 1], [1, "f", 2, 6, 65, 1], [1, "f", 1, 6, 74, 1], [1, "f", 1, 6, 72, 1], [1, "f", 1, 6, 70, 1], [1, "f", 1, 6, 68, 1], [1, "f", 1, 6, 66, 1], [1, "f", 1, 6, 64, 1], [1, "f", 2, 6, 63, 1], [1, "f", 2, 6, 61, 1], [1, "f", 2, 6, 59, 1], [1, "f", 2, 6, 57, 1], [1, "f", 2, 6, 55, 1], [1, "f", 2, 6, 53, 1], [1, "f", 2, 6, 51, 1], [1, "f", 1, 6, 62, 1], [1, "f", 1, 6, 60, 1], [1, "f", 1, 6, 58, 1], [1, "f", 1, 6, 56, 1], [1, "f", 1, 6, 54, 1], [1, "f", 1, 6, 52, 1], [1, "f", 1, 6, 50, 1], [1, "f", 2, 6, 49, 1], [1, "f", 2, 6, 47, 1], [1, "f", 2, 6, 45, 1], [1, "f", 2, 6, 43, 1], [1, "f", 2, 6, 41, 1], [1, "f", 2, 6, 39, 1], [1, "f", 1, 6, 48, 1], [1, "f", 1, 6, 46, 1], [1, "f", 1, 6, 44, 1], [1, "f", 1, 6, 42, 1], [1, "f", 1, 6, 40, 1], [1, "f", 1, 6, 38, 1], [1, "f", 2, 6, 37, 1], [1, "f", 2, 6, 35, 1], [1, "f", 2, 6, 33, 1], [1, "f", 2, 6, 31, 1], [1, "f", 2, 6, 29, 1], [1, "f", 2, 6, 27, 1], [1, "f", 1, 6, 36, 1], [1, "f", 1, 6, 34, 1], [1, "f", 1, 6, 32, 1], [1, "f", 1, 6, 30, 1], [1, "f", 1, 6, 28, 1], [1, "f", 1, 6, 26, 1], [1, "f", 2, 6, 25, 1], [1, "f", 2, 6, 23, 1], [1, "f", 2, 6, 21, 1], [1, "f", 2, 6, 19, 1], [1, "f", 2, 6, 17, 1], [1, "f", 2, 6, 15, 1], [1, "f", 1, 6, 24, 1], [1, "f", 1, 6, 22, 1], [1, "f", 1, 6, 20, 1], [1, "f", 1, 6, 18, 1], [1, "f", 1, 6, 16, 1], [1, "f", 2, 6, 13, 1], [1, "f", 2, 6, 11, 1], [1, "f", 2, 6, 9, 1], [1, "f", 2, 6, 7, 1], [1, "f", 1, 6, 14, 1], [1, "f", 1, 6, 12, 1], [1, "f", 1, 6, 10, 1], [1, "f", 1, 6, 8, 1], [1, "f", 1, 6, 6, 1], [1, "f", 1, 8, 6, 1], [1, "f", 2, 7, 6, 1], [1, "f", 2, 9, 6, 1], [1, "f", 2, 11, 6, 1], [1, "f", 2, 13, 6, 1], [1, "f", 2, 15, 6, 1], [1, "f", 1, 10, 6, 1], [1, "f", 1, 12, 6, 1], [1, "f", 1, 14, 6, 1], [1, "f", 1, 16, 6, 1], [1, "f", 1, 18, 6, 1], [1, "f", 1, 20, 6, 1], [1, "f", 1, 22, 6, 1], [1, "f", 1, 24, 6, 1], [1, "f", 1, 26, 6, 1], [1, "f", 2, 17, 6, 1], [1, "f", 2, 19, 6, 1], [1, "f", 2, 21, 6, 1], [1, "f", 2, 23, 6, 1], [1, "f", 2, 25, 6, 1], [1, "f", 2, 27, 6, 1], [1, "f", 2, 29, 6, 1], [1, "f", 2, 31, 6, 1], [1, "f", 2, 33, 6, 1], [1, "f", 1, 28, 6, 1], [1, "f", 1, 30, 6, 1], [1, "f", 1, 32, 6, 1], [1, "f", 1, 34, 6, 1], [1, "f", 2, 67, 6, 1], [1, "f", 2, 69, 6, 1], [1, "f", 2, 71, 6, 1], [1, "f", 2, 73, 6, 1], [1, "f", 2, 75, 6, 1], [1, "f", 1, 68, 6, 1], [1, "f", 1, 70, 6, 1], [1, "f", 1, 72, 6, 1], [1, "f", 1, 74, 6, 1], [1, "f", 1, 76, 6, 1], [1, "f", 2, 77, 6, 1], [1, "f", 2, 79, 6, 1], [1, "f", 2, 81, 6, 1], [1, "f", 2, 83, 6, 1], [1, "f", 2, 85, 6, 1], [1, "f", 1, 78, 6, 1], [1, "f", 1, 80, 6, 1], [1, "f", 1, 82, 6, 1], [1, "f", 1, 84, 6, 1], [1, "f", 1, 86, 6, 1], [1, "f", 2, 87, 6, 1], [1, "f", 2, 89, 6, 1], [1, "f", 2, 91, 6, 1], [1, "f", 2, 93, 6, 1], [1, "f", 1, 88, 6, 1], [1, "f", 1, 90, 6, 1], [1, "f", 1, 92, 6, 1], [1, "f", 1, 94, 6, 1], [1, "f", 2, 95, 6, 1], [1, "f", 1, 95, 7, 1], [1, "f", 1, 83, 7, 1], [1, "f", 1, 81, 7, 1], [1, "f", 1, 79, 7, 1], [1, "f", 1, 77, 7, 1], [1, "f", 1, 75, 7, 1], [1, "f", 1, 73, 7, 1], [1, "f", 1, 71, 7, 1], [1, "f", 1, 69, 7, 1], [1, "f", 1, 33, 7, 1], [1, "f", 1, 31, 7, 1], [1, "f", 1, 29, 7, 1], [1, "f", 1, 27, 7, 1], [1, "f", 1, 25, 7, 1], [1, "f", 1, 23, 7, 1], [1, "f", 1, 21, 7, 1], [1, "f", 1, 19, 7, 1], [1, "f", 1, 17, 7, 1], [1, "f", 1, 15, 7, 1], [1, "f", 1, 13, 7, 1], [1, "f", 1, 11, 7, 1], [1, "f", 1, 9, 7, 1], [1, "f", 1, 7, 7, 1], [1, "s", 0, 7, 8, 1], [1, "t", 4, 7, 174, 0], [1, "t", 5, 7, 175, 0], [1, "t", 4, 7, 176, 0], [1, "b", 2, 7, 177, 0], [1, "t", 3, 94, 301, 0], [1, "b", 3, 95, 301, 0], [1, "t", 4, 96, 301, 0], [1, "t", 1, 97, 301, 0], [1, "t", 2, 98, 301, 0], [1, "t", 4, 99, 301, 0], [1, "t", 2, 100, 301, 0], [1, "t", 4, 96, 304, 0], [1, "t", 2, 96, 302, 0], [1, "t", 2, 97, 304, 0], [1, "t", 2, 96, 303, 0], [1, "t", 5, 97, 303, 0], [1, "t", 5, 98, 304, 0], [1, "b", 2, 97, 302, 0], [1, "b", 2, 99, 304, 0], [1, "t", 1, 98, 303, 0], [1, "t", 4, 98, 302, 0], [1, "t", 4, 99, 303, 0], [1, "t", 4, 100, 304, 0], [1, "t", 5, 99, 302, 0], [1, "t", 5, 101, 303, 0], [1, "t", 2, 100, 303, 0], [1, "t", 0, 100, 302, 0], [1, "t", 0, 101, 304, 0], [1, "t", 4, 102, 304, 0], [1, "f", 0, 94, 7, 1], [1, "f", 1, 93, 7, 1], [1, "f", 1, 92, 7, 1], [1, "f", 0, 91, 7, 1], [1, "f", 1, 90, 7, 1], [1, "f", 1, 89, 7, 1], [1, "f", 0, 88, 7, 1], [1, "f", 1, 87, 7, 1], [1, "f", 1, 86, 7, 1], [1, "f", 1, 85, 7, 1], [1, "f", 0, 84, 7, 1], [1, "f", 1, 82, 7, 1], [1, "f", 0, 80, 7, 1], [1, "f", 1, 78, 7, 1], [1, "f", 0, 76, 7, 1], [1, "f", 1, 74, 7, 1], [1, "f", 0, 72, 7, 1], [1, "f", 0, 70, 7, 1], [1, "f", 1, 68, 7, 1], [1, "f", 1, 32, 7, 1], [1, "f", 0, 30, 7, 1], [1, "f", 1, 28, 7, 1], [1, "f", 0, 26, 7, 1], [1, "f", 1, 24, 7, 1], [1, "f", 0, 22, 7, 1], [1, "f", 1, 20, 7, 1], [1, "f", 0, 18, 7, 1], [1, "f", 1, 16, 7, 1], [1, "f", 0, 14, 7, 1], [1, "f", 1, 12, 7, 1], [1, "f", 0, 10, 7, 1], [1, "f", 1, 8, 7, 1], [1, "s", 1, 7, 9, 1], [1, "f", 0, 95, 152, 1], [1, "f", 1, 95, 151, 1], [1, "f", 0, 95, 11, 1], [1, "f", 1, 95, 12, 1], [1, "f", 1, 95, 14, 1], [1, "f", 1, 95, 19, 1], [1, "f", 0, 95, 15, 1], [1, "f", 0, 95, 20, 1], [1, "f", 1, 95, 21, 1], [1, "f", 1, 95, 26, 1], [1, "f", 1, 95, 37, 1], [1, "f", 0, 95, 44, 1], [1, "f", 1, 95, 50, 1], [1, "f", 1, 95, 52, 1], [1, "f", 0, 95, 53, 1], [1, "f", 1, 95, 54, 1], [1, "f", 1, 95, 62, 1], [1, "f", 0, 95, 55, 1], [1, "f", 1, 95, 64, 1], [1, "f", 0, 95, 58, 1], [1, "f", 0, 95, 61, 1], [1, "f", 0, 95, 68, 1], [1, "f", 0, 95, 72, 1], [1, "f", 0, 95, 78, 1], [1, "f", 1, 95, 115, 1], [1, "f", 1, 95, 117, 1], [1, "f", 1, 95, 128, 1], [1, "f", 0, 95, 85, 1], [1, "f", 0, 95, 91, 1], [1, "f", 0, 95, 95, 1], [1, "f", 0, 95, 114, 1], [1, "f", 2, 95, 113, 1], [1, "f", 1, 95, 119, 1], [1, "f", 0, 95, 120, 1], [1, "f", 1, 95, 121, 1], [1, "f", 0, 95, 127, 1], [1, "f", 1, 95, 130, 1], [1, "f", 0, 95, 131, 1], [1, "f", 1, 95, 132, 1], [1, "f", 1, 95, 136, 1], [1, "f", 0, 95, 137, 1], [1, "f", 0, 95, 143, 1], [1, "f", 0, 95, 147, 1], [1, "f", 1, 95, 138, 1], [1, "f", 1, 95, 144, 1], [1, "f", 1, 95, 10, 1], [1, "f", 0, 95, 8, 1], [1, "f", 1, 95, 9, 1], [1, "f", 0, 95, 13, 1], [1, "f", 1, 95, 16, 1], [1, "f", 1, 95, 17, 1], [1, "f", 0, 95, 18, 1], [1, "f", 1, 95, 45, 1], [1, "f", 0, 95, 51, 1], [1, "f", 1, 95, 56, 1], [1, "f", 1, 95, 57, 1], [1, "f", 1, 95, 59, 1], [1, "f", 1, 95, 60, 1], [1, "f", 1, 95, 63, 1], [1, "f", 0, 95, 65, 1], [1, "f", 1, 95, 66, 1], [1, "f", 1, 95, 67, 1], [1, "f", 1, 95, 69, 1], [1, "f", 1, 95, 70, 1], [1, "f", 0, 95, 71, 1], [1, "f", 1, 95, 73, 1], [1, "f", 1, 95, 74, 1], [1, "f", 0, 95, 75, 1], [1, "f", 1, 95, 76, 1], [1, "f", 1, 95, 77, 1], [1, "f", 1, 95, 79, 1], [1, "f", 1, 95, 80, 1], [1, "f", 0, 95, 81, 1], [1, "f", 1, 95, 82, 1], [1, "f", 0, 95, 83, 1], [1, "f", 1, 95, 84, 1], [1, "f", 1, 95, 86, 1], [1, "f", 1, 95, 88, 1], [1, "f", 0, 95, 87, 1], [1, "f", 1, 95, 89, 1], [1, "f", 1, 95, 90, 1], [1, "f", 1, 95, 92, 1], [1, "f", 1, 95, 93, 1], [1, "f", 1, 95, 94, 1], [1, "f", 1, 95, 96, 1], [1, "f", 1, 95, 97, 1], [1, "f", 0, 95, 98, 1], [1, "f", 1, 95, 99, 1], [1, "f", 1, 95, 100, 1], [1, "f", 0, 95, 101, 1], [1, "f", 1, 95, 102, 1], [1, "f", 0, 95, 103, 1], [1, "f", 1, 95, 104, 1], [1, "f", 1, 95, 105, 1], [1, "f", 0, 95, 106, 1], [1, "f", 1, 95, 107, 1], [1, "f", 1, 95, 108, 1], [1, "f", 1, 95, 109, 1], [1, "f", 0, 95, 110, 1], [1, "f", 1, 95, 111, 1], [1, "f", 0, 95, 112, 1], [1, "f", 1, 95, 116, 1], [1, "f", 0, 95, 118, 1], [1, "f", 0, 95, 122, 1], [1, "f", 1, 95, 123, 1], [1, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, 1], [1, "f", 1, 95, 126, 1], [1, "f", 1, 95, 129, 1], [1, "f", 1, 95, 133, 1], [1, "f", 0, 95, 134, 1], [1, "f", 1, 95, 135, 1], [1, "f", 1, 95, 139, 1], [1, "f", 0, 95, 140, 1], [1, "f", 1, 95, 141, 1], [1, "f", 1, 95, 142, 1], [1, "f", 1, 95, 146, 1], [1, "f", 0, 95, 145, 1], [1, "f", 1, 95, 148, 1], [1, "f", 1, 95, 149, 1], [1, "f", 1, 95, 150, 1], [1, "f", 1, 95, 153, 1], [1, "cs", 0, 64, 9, 1], [1, "cs", 1, 64, 10, 1], [1, "cs", 2, 64, 16, 1], [1, "cs", 2, 64, 19, 1], [1, "cs", 0, 64, 20, 1], [1, "cs", 1, 64, 21, 1], [1, "cs", 2, 64, 22, 1], [1, "cs", 0, 64, 23, 1], [1, "cs", 2, 64, 24, 1], [1, "cs", 1, 64, 29, 1], [1, "cs", 2, 64, 30, 1], [1, "cs", 3, 64, 31, 1], [1, "cs", 0, 64, 32, 1], [1, "cs", 1, 64, 33, 1], [1, "cs", 2, 64, 34, 1], [1, "cs", 0, 64, 35, 1], [1, "cs", 2, 64, 8, 1], [1, "cs", 2, 65, 8, 1], [1, "cs", 1, 65, 9, 1], [1, "cs", 2, 65, 10, 1], [1, "cs", 3, 65, 11, 1], [1, "cs", 1, 65, 16, 1], [1, "cs", 0, 64, 17, 1], [1, "cs", 3, 65, 17, 1], [1, "cs", 2, 64, 18, 1], [1, "cs", 2, 65, 18, 1], [1, "cs", 0, 65, 19, 1], [1, "cs", 1, 65, 20, 1], [1, "cs", 3, 65, 21, 1], [1, "cs", 2, 65, 22, 1], [1, "cs", 3, 65, 23, 1], [1, "cs", 0, 65, 24, 1], [1, "cs", 2, 65, 29, 1], [1, "cs", 3, 65, 30, 1], [1, "cs", 0, 65, 31, 1], [1, "cs", 1, 65, 32, 1], [1, "cs", 2, 65, 33, 1], [1, "cs", 3, 65, 34, 1], [1, "cs", 2, 63, 9, 1], [1, "cs", 0, 62, 9, 1], [1, "cs", 2, 61, 9, 1], [1, "cs", 0, 60, 9, 1], [1, "cs", 2, 59, 9, 1], [1, "cs", 2, 58, 9, 1], [1, "cs", 0, 57, 9, 1], [1, "cs", 2, 56, 9, 1], [1, "cs", 2, 55, 9, 1], [1, "cs", 2, 54, 9, 1], [1, "cs", 0, 53, 9, 1], [1, "cs", 0, 51, 9, 1], [1, "cs", 2, 52, 9, 1], [1, "cs", 2, 50, 9, 1], [1, "cs", 2, 48, 9, 1], [1, "cs", 2, 49, 9, 1], [1, "cs", 0, 47, 9, 1], [1, "cs", 0, 45, 9, 1], [1, "cs", 0, 43, 9, 1], [1, "cs", 2, 46, 9, 1], [1, "cs", 2, 44, 9, 1], [1, "cs", 2, 42, 9, 1], [1, "cs", 2, 41, 9, 1], [1, "cs", 0, 40, 9, 1], [1, "cs", 2, 39, 9, 1], [1, "cs", 2, 38, 9, 1], [1, "cs", 0, 37, 9, 1], [1, "cs", 0, 63, 8, 1], [1, "cs", 2, 65, 7, 1], [1, "cs", 3, 64, 7, 1], [1, "cs", 2, 62, 8, 1], [1, "cs", 3, 61, 8, 1], [1, "cs", 1, 62, 7, 1], [1, "cs", 2, 63, 7, 1], [1, "cs", 0, 64, 6, 1], [1, "cs", 3, 65, 6, 1], [1, "cs", 2, 63, 6, 1], [1, "cs", 2, 62, 6, 1], [1, "cs", 2, 61, 6, 1], [1, "cs", 2, 60, 6, 1], [1, "cs", 2, 59, 6, 1], [1, "cs", 2, 61, 7, 1], [1, "cs", 0, 60, 7, 1], [1, "cs", 2, 60, 8, 1], [1, "cs", 2, 59, 7, 1], [1, "cs", 2, 59, 8, 1], [1, "cs", 1, 58, 8, 1], [1, "cs", 1, 57, 6, 1], [1, "cs", 1, 55, 7, 1], [1, "cs", 0, 56, 6, 1], [1, "cs", 2, 58, 6, 1], [1, "cs", 2, 58, 7, 1], [1, "cs", 2, 57, 7, 1], [1, "cs", 2, 56, 7, 1], [1, "cs", 2, 55, 6, 1], [1, "cs", 2, 57, 8, 1], [1, "cs", 2, 56, 8, 1], [1, "cs", 2, 55, 8, 1], [1, "cs", 0, 54, 8, 1], [1, "cs", 0, 50, 7, 1], [1, "cs", 0, 53, 6, 1], [1, "cs", 2, 54, 6, 1], [1, "cs", 2, 54, 7, 1], [1, "cs", 2, 53, 7, 1], [1, "cs", 2, 52, 7, 1], [1, "cs", 2, 52, 6, 1], [1, "cs", 1, 52, 8, 1], [1, "cs", 2, 53, 8, 1], [1, "cs", 2, 51, 8, 1], [1, "cs", 2, 51, 7, 1], [1, "cs", 2, 51, 6, 1], [1, "cs", 2, 50, 6, 1], [1, "cs", 2, 50, 8, 1], [1, "cs", 2, 49, 8, 1], [1, "cs", 2, 49, 7, 1], [1, "cs", 2, 49, 6, 1], [1, "cs", 0, 46, 7, 1], [1, "cs", 1, 48, 8, 1], [1, "cs", 1, 44, 7, 1], [1, "cs", 1, 41, 8, 1], [1, "cs", 2, 48, 7, 1], [1, "cs", 2, 48, 6, 1], [1, "cs", 2, 47, 6, 1], [1, "cs", 2, 47, 7, 1], [1, "cs", 2, 47, 8, 1], [1, "cs", 2, 46, 8, 1], [1, "cs", 2, 45, 8, 1], [1, "cs", 2, 45, 7, 1], [1, "cs", 2, 45, 6, 1], [1, "cs", 2, 46, 6, 1], [1, "cs", 2, 44, 6, 1], [1, "cs", 2, 44, 8, 1], [1, "cs", 2, 43, 8, 1], [1, "cs", 2, 43, 7, 1], [1, "cs", 2, 43, 6, 1], [1, "cs", 2, 42, 6, 1], [1, "cs", 2, 42, 7, 1], [1, "cs", 2, 42, 8, 1], [1, "cs", 2, 41, 7, 1], [1, "cs", 2, 41, 6, 1], [1, "cs", 2, 40, 6, 1], [1, "cs", 2, 40, 7, 1], [1, "cs", 2, 40, 8, 1], [1, "cs", 2, 39, 8, 1], [1, "cs", 0, 39, 7, 1], [1, "cs", 1, 38, 8, 1], [1, "cs", 2, 39, 6, 1], [1, "cs", 2, 38, 6, 1], [1, "cs", 2, 37, 6, 1], [1, "cs", 2, 38, 7, 1], [1, "cs", 2, 37, 7, 1], [1, "cs", 2, 37, 8, 1], [1, "cs", 2, 37, 10, 1], [1, "cs", 2, 38, 10, 1], [1, "cs", 0, 38, 11, 1], [1, "cs", 0, 38, 17, 1], [1, "cs", 1, 37, 18, 1], [1, "cs", 0, 38, 19, 1], [1, "cs", 2, 37, 11, 1], [1, "cs", 2, 37, 16, 1], [1, "cs", 2, 37, 17, 1], [1, "cs", 2, 38, 18, 1], [1, "cs", 2, 37, 19, 1], [1, "cs", 3, 38, 16, 1], [1, "cs", 0, 37, 21, 1], [1, "cs", 0, 38, 22, 1], [1, "cs", 0, 38, 24, 1], [1, "cs", 2, 37, 20, 1], [1, "cs", 2, 38, 20, 1], [1, "cs", 2, 38, 21, 1], [1, "cs", 1, 37, 23, 1], [1, "cs", 3, 37, 22, 1], [1, "cs", 3, 38, 23, 1], [1, "cs", 2, 37, 24, 1], [1, "cs", 0, 38, 30, 1], [1, "cs", 0, 38, 32, 1], [1, "cs", 0, 37, 31, 1], [1, "cs", 1, 38, 34, 1], [1, "cs", 1, 37, 29, 1], [1, "cs", 2, 38, 29, 1], [1, "cs", 2, 37, 30, 1], [1, "cs", 2, 38, 31, 1], [1, "cs", 2, 37, 32, 1], [1, "cs", 3, 38, 33, 1], [1, "cs", 3, 38, 35, 1], [1, "cs", 2, 37, 33, 1], [1, "cs", 2, 36, 8, 1], [1, "cs", 0, 36, 11, 1], [1, "cs", 0, 35, 9, 1], [1, "cs", 2, 36, 9, 1], [1, "cs", 2, 36, 10, 1], [1, "cs", 2, 35, 10, 1], [1, "cs", 1, 33, 8, 1], [1, "cs", 3, 34, 9, 1], [1, "cs", 3, 35, 8, 1], [1, "cs", 2, 34, 8, 1], [1, "cs", 0, 36, 7, 1], [1, "cs", 1, 34, 7, 1], [1, "cs", 2, 35, 7, 1], [1, "cs", 2, 35, 6, 1], [1, "cs", 2, 36, 6, 1], [1, "cs", 2, 68, 9, 1], [1, "cs", 2, 66, 10, 1], [1, "cs", 3, 66, 9, 1], [1, "cs", 0, 67, 9, 1], [1, "cs", 0, 66, 8, 1], [1, "cs", 2, 67, 8, 1], [1, "cs", 1, 68, 8, 1], [1, "cs", 1, 66, 11, 1], [1, "cs", 2, 67, 10, 1], [1, "cs", 0, 66, 6, 1], [1, "cs", 2, 66, 7, 1], [1, "cs", 2, 67, 7, 1], [1, "cs", 2, 69, 8, 1], [1, "cs", 2, 63, 32, 1], [1, "cs", 2, 62, 34, 1], [1, "cs", 2, 60, 35, 1], [1, "cs", 3, 59, 35, 1], [1, "cs", 0, 61, 35, 1], [1, "cs", 0, 63, 34, 1], [1, "cs", 2, 63, 33, 1], [1, "cs", 2, 63, 35, 1], [1, "cs", 2, 62, 35, 1], [1, "cs", 2, 58, 36, 1], [1, "cs", 1, 59, 36, 1], [1, "cs", 1, 62, 36, 1], [1, "cs", 2, 60, 36, 1], [1, "cs", 2, 61, 34, 1], [1, "cs", 3, 62, 33, 1], [1, "cs", 3, 63, 36, 1], [1, "cs", 3, 61, 36, 1], [1, "cs", 0, 42, 36, 1], [1, "cs", 1, 39, 36, 1], [1, "cs", 2, 41, 36, 1], [1, "cs", 3, 39, 35, 1], [1, "cs", 3, 40, 36, 1], [1, "cs", 3, 43, 36, 1], [1, "cs", 1, 40, 35, 1], [1, "cs", 2, 41, 35, 1], [1, "cs", 2, 40, 34, 1], [1, "cs", 2, 39, 34, 1], [1, "cs", 2, 39, 33, 1], [1, "cs", 2, 39, 32, 1], [1, "cs", 0, 40, 33, 1], [1, "cs", 2, 41, 34, 1], [1, "cs", 1, 44, 36, 1], [1, "cs", 3, 43, 35, 1], [1, "cs", 2, 42, 35, 1], [1, "cs", 0, 37, 34, 1], [1, "cs", 3, 59, 30, 1], [1, "cs", 0, 60, 29, 1], [1, "cs", 2, 60, 28, 1], [1, "cs", 3, 60, 27, 1], [1, "cs", 0, 60, 26, 1], [1, "cs", 2, 54, 25, 1], [1, "cs", 2, 48, 25, 1], [1, "cs", 2, 42, 26, 1], [1, "cs", 0, 55, 25, 1], [1, "cs", 2, 59, 26, 1], [1, "cs", 0, 43, 26, 1], [1, "cs", 1, 42, 27, 1], [1, "cs", 2, 42, 28, 1], [1, "cs", 2, 43, 30, 1], [1, "cs", 0, 42, 29, 1], [1, "cs", 0, 54, 24, 1], [1, "cs", 0, 48, 24, 1], [1, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, 1], [1, "cs", 2, 63, 22, 1], [1, "cs", 2, 63, 21, 1], [1, "cs", 2, 39, 21, 1], [1, "cs", 3, 57, 18, 1], [1, "cs", 2, 56, 18, 1], [1, "cs", 3, 51, 21, 1], [1, "cs", 0, 51, 20, 1], [1, "cs", 2, 51, 19, 1], [1, "cs", 3, 51, 18, 1], [1, "cs", 2, 63, 16, 1], [1, "cs", 2, 63, 10, 1], [1, "cs", 2, 56, 13, 1], [1, "cs", 3, 57, 13, 1], [1, "cs", 1, 45, 18, 1], [1, "cs", 2, 47, 18, 1], [1, "cs", 2, 46, 18, 1], [1, "cs", 0, 46, 13, 1], [1, "cs", 2, 45, 13, 1], [1, "cs", 2, 39, 10, 1], [1, "cs", 2, 39, 16, 1], [1, "cs", 2, 47, 17, 1], [1, "a", 0, 51, 15, 1], [1, "a", 1, 53, 14, 1], [1, "a", 1, 49, 14, 1], [1, "de", 8, 55, 15, 0], [1, "de", 9, 48, 28, 0], [1, "de", 10, 58, 26, 0], [1, "de", 11, 59, 29, 0], [1, "de", 11, 55, 34, 0], [1, "de", 10, 48, 33, 0], [1, "de", 9, 41, 32, 0], [1, "de", 9, 56, 24, 0], [1, "de", 9, 62, 16, 0], [1, "de", 9, 45, 11, 0], [1, "de", 9, 44, 17, 0], [1, "de", 10, 44, 13, 0], [1, "de", 10, 58, 13, 0], [1, "de", 10, 63, 31, 0], [1, "de", 8, 60, 30, 0], [1, "de", 8, 43, 26, 0], [1, "de", 10, 43, 29, 0], [1, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, 0], [1, "de", 9, 53, 19, 0], [1, "de", 11, 49, 19, 0], [1, "de", 10, 39, 26, 0], [1, "de", 9, 46, 24, 0], [1, "de", 9, 62, 10, 0], [1, "de", 8, 40, 14, 0], [1, "de", 32, 55, 35, 0], [1, "de", 32, 60, 33, 0], [1, "de", 32, 63, 28, 0], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, 17, 0], [1, "de", 32, 63, 13, 0], [1, "de", 32, 59, 10, 0], [1, "de", 32, 56, 12, 0], [1, "de", 32, 52, 17, 0], [1, "de", 32, 51, 14, 0], [1, "de", 32, 39, 12, 0], [1, "de", 32, 39, 18, 0], [1, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, 0], [1, "de", 32, 50, 29, 0], [1, "de", 32, 43, 34, 0], [1, "de", 32, 47, 34, 0], [1, "de", 31, 54, 33, 0], [1, "de", 31, 59, 24, 0], [1, "de", 31, 63, 19, 0], [1, "de", 31, 47, 15, 0], [1, "de", 31, 43, 17, 0], [1, "de", 31, 39, 27, 0], [1, "de", 31, 48, 27, 0], [1, "de", 31, 57, 27, 0], [1, "de", 32, 44, 27, 0], [1, "d", 0, 12, 13, 1], [1, "d", 0, 89, 13, 1], [1, "d", 1, 91, 21, 1], [1, "d", 1, 10, 22, 1], [1, "f", 2, 89, 18, 1], [1, "f", 0, 88, 19, 1], [1, "g", 1, 85, 22, 1], [1, "s", 1, 90, 29, 1], [1, "s", 1, 92, 15, 1], [1, "s", 0, 91, 31, 1], [1, "s", 2, 90, 38, 1], [1, "s", 0, 91, 42, 1], [1, "s", 0, 90, 49, 1], [1, "f", 1, 86, 43, 1], [1, "f", 0, 81, 45, 1], [1, "f", 2, 66, 44, 1], [1, "f", 2, 55, 49, 1], [1, "f", 1, 54, 50, 1], [1, "f", 2, 43, 45, 1], [1, "f", 2, 31, 48, 1], [1, "f", 1, 27, 39, 1], [1, "f", 1, 80, 46, 1], [1, "f", 1, 69, 48, 1], [1, "g", 0, 80, 40, 1], [1, "g", 2, 81, 40, 1], [1, "s", 2, 77, 39, 1], [1, "s", 0, 68, 43, 1], [1, "s", 2, 57, 41, 1], [1, "s", 1, 56, 42, 1], [1, "s", 1, 40, 41, 1], [1, "s", 2, 48, 48, 1], [1, "f", 2, 17, 12, 1], [1, "f", 0, 13, 31, 1], [1, "f", 1, 14, 32, 1], [1, "s", 0, 15, 27, 1], [1, "s", 0, 13, 39, 1], [1, "f", 2, 11, 17, 1], [1, "f", 1, 12, 18, 1], [1, "g", 2, 12, 25, 1], [1, "f", 0, 16, 45, 1], [1, "f", 1, 17, 46, 1], [1, "s", 1, 74, 48, 1], [1, "s", 1, 20, 47, 1], [1, "g", 0, 58, 59, 1], [1, "g", 0, 46, 72, 1], [1, "g", 0, 69, 79, 1], [1, "g", 0, 72, 74, 1], [1, "g", 0, 26, 88, 1], [1, "g", 0, 20, 74, 1], [1, "g", 0, 28, 67, 1], [1, "g", 0, 49, 86, 1], [1, "g", 0, 77, 90, 1], [1, "g", 0, 87, 72, 1], [1, "g", 0, 14, 85, 1], [1, "g", 1, 85, 97, 1], [1, "g", 1, 68, 104, 1], [1, "g", 1, 63, 91, 1], [1, "g", 1, 39, 90, 1], [1, "g", 1, 34, 99, 1], [1, "g", 1, 17, 103, 1], [1, "g", 2, 77, 60, 1], [1, "g", 2, 19, 56, 1], [1, "g", 2, 39, 60, 1], [1, "g", 2, 87, 57, 1], [1, "f", 0, 9, 62, 1], [1, "f", 0, 12, 81, 1], [1, "f", 0, 26, 59, 1], [1, "f", 0, 35, 53, 1], [1, "f", 0, 44, 58, 1], [1, "f", 0, 88, 62, 1], [1, "f", 0, 91, 82, 1], [1, "f", 0, 84, 85, 1], [1, "f", 0, 79, 69, 1], [1, "f", 0, 64, 71, 1], [1, "f", 0, 62, 83, 1], [1, "f", 0, 34, 81, 1], [1, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, 1], [1, "f", 1, 81, 70, 1], [1, "f", 1, 91, 72, 1], [1, "f", 1, 8, 91, 1], [1, "f", 1, 14, 81, 1], [1, "f", 1, 29, 79, 1], [1, "f", 1, 13, 65, 1], [1, "f", 1, 46, 97, 1], [1, "f", 1, 43, 73, 1], [1, "f", 1, 60, 69, 1], [1, "f", 1, 70, 96, 1], [1, "f", 1, 58, 84, 1], [1, "s", 1, 56, 76, 1], [1, "s", 1, 85, 74, 1], [1, "s", 0, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", 0, 60, 61, 1], [1, "s", 0, 20, 66, 1], [1, "s", 0, 47, 83, 1], [1, "s", 0, 29, 86, 1], [1, "s", 0, 78, 92, 1], [1, "s", 0, 62, 102, 1], [1, "s", 0, 18, 95, 1], [1, "s", 2, 64, 101, 1], [1, "s", 2, 78, 84, 1], [1, "s", 2, 49, 83, 1], [1, "s", 2, 15, 76, 1], [1, "s", 2, 21, 84, 1], [1, "f", 1, 26, 94, 1], [1, "f", 2, 23, 96, 1], [1, "f", 2, 25, 72, 1], [1, "f", 2, 85, 77, 1], [1, "f", 2, 79, 95, 1], [1, "f", 2, 51, 65, 1], [1, "f", 2, 69, 60, 1], [1, "f", 1, 25, 105, 1], [1, "s", 1, 18, 68, 1], [1, "s", 0, 55, 76, 1], [1, "s", 0, 74, 59, 1], [1, "f", 1, 46, 142, 1], [1, "f", 1, 19, 140, 1], [1, "f", 1, 77, 137, 1], [1, "f", 0, 75, 137, 1], [1, "f", 0, 55, 138, 1], [1, "f", 0, 33, 127, 1], [1, "f", 0, 76, 121, 1], [1, "f", 0, 55, 121, 1], [1, "f", 0, 13, 123, 1], [1, "f", 0, 18, 141, 1], [1, "f", 0, 40, 137, 1], [1, "f", 2, 76, 142, 1], [1, "f", 2, 57, 140, 1], [1, "f", 2, 39, 138, 1], [1, "f", 2, 16, 143, 1], [1, "f", 2, 29, 131, 1], [1, "f", 0, 70, 150, 1], [1, "f", 0, 28, 146, 1], [1, "f", 0, 12, 132, 1], [1, "f", 0, 90, 129, 1], [1, "f", 1, 87, 131, 1], [1, "f", 0, 91, 143, 1], [1, "f", 2, 87, 145, 1], [1, "f", 1, 89, 141, 1], [1, "f", 1, 63, 130, 1], [1, "f", 1, 75, 122, 1], [1, "f", 1, 52, 124, 1], [1, "f", 1, 34, 127, 1], [1, "f", 1, 14, 123, 1], [1, "f", 1, 24, 122, 1], [1, "f", 0, 83, 108, 1], [1, "f", 0, 89, 118, 1], [1, "f", 0, 56, 107, 1], [1, "f", 0, 38, 113, 1], [1, "f", 0, 16, 110, 1], [1, "f", 1, 80, 105, 1], [1, "f", 1, 82, 109, 1], [1, "f", 1, 87, 118, 1], [1, "f", 1, 59, 110, 1], [1, "f", 1, 29, 111, 1], [1, "f", 2, 28, 112, 1], [1, "f", 2, 70, 112, 1], [1, "f", 2, 42, 111, 1], [1, "s", 0, 68, 157, 1], [1, "s", 0, 81, 158, 1], [1, "s", 0, 25, 172, 1], [1, "s", 0, 22, 161, 1], [1, "s", 0, 35, 152, 1], [1, "s", 0, 66, 144, 1], [1, "s", 0, 87, 145, 1], [1, "s", 0, 86, 145, 1], [1, "s", 0, 84, 135, 1], [1, "s", 0, 69, 133, 1], [1, "s", 0, 84, 122, 1], [1, "s", 0, 68, 121, 1], [1, "s", 0, 48, 124, 1], [1, "s", 0, 26, 129, 1], [1, "s", 0, 9, 127, 1], [1, "s", 0, 11, 144, 1], [1, "s", 0, 9, 109, 1], [1, "s", 0, 35, 101, 1], [1, "s", 0, 47, 109, 1], [1, "s", 0, 58, 111, 1], [1, "s", 0, 84, 110, 1], [1, "s", 0, 28, 114, 1], [1, "s", 1, 30, 116, 1], [1, "s", 1, 46, 112, 1], [1, "s", 1, 81, 111, 1], [1, "s", 1, 70, 123, 1], [1, "s", 1, 49, 127, 1], [1, "s", 1, 66, 134, 1], [1, "s", 1, 67, 144, 1], [1, "s", 1, 38, 152, 1], [1, "s", 1, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, 1], [1, "s", 1, 12, 125, 1], [1, "s", 1, 65, 158, 1], [1, "s", 1, 83, 167, 1], [1, "s", 1, 65, 167, 1], [1, "s", 1, 47, 164, 1], [1, "s", 1, 56, 168, 1], [1, "s", 2, 54, 169, 1], [1, "s", 2, 88, 170, 1], [1, "s", 2, 91, 162, 1], [1, "s", 2, 79, 149, 1], [1, "s", 2, 75, 144, 1], [1, "s", 2, 57, 150, 1], [1, "s", 2, 47, 143, 1], [1, "s", 2, 31, 145, 1], [1, "s", 2, 36, 138, 1], [1, "s", 2, 10, 163, 1], [1, "s", 2, 22, 142, 1], [1, "g", 2, 78, 132, 1], [1, "g", 1, 48, 135, 1], [1, "g", 2, 16, 136, 1], [1, "g", 0, 62, 92, 1], [1, "g", 2, 70, 80, 1], [1, "g", 2, 15, 86, 1], [1, "g", 2, 47, 75, 1], [1, "g", 2, 36, 89, 1], [1, "g", 2, 80, 90, 1], [1, "f", 1, 39, 118, 1], [1, "d", 2, 84, 54, 1], [1, "d", 2, 16, 54, 1], [1, "de", 7, 13, 13, 0], [1, "de", 5, 16, 28, 0], [1, "de", 5, 9, 25, 0], [1, "de", 5, 34, 41, 0], [1, "de", 4, 28, 40, 0], [1, "de", 6, 31, 47, 0], [1, "de", 6, 12, 39, 0], [1, "de", 4, 16, 47, 0], [1, "de", 4, 7, 46, 0], [1, "de", 6, 7, 33, 0], [1, "de", 6, 40, 42, 0], [1, "de", 7, 20, 48, 0], [1, "de", 7, 29, 59, 0], [1, "de", 6, 27, 58, 0], [1, "de", 6, 15, 54, 0], [1, "de", 5, 12, 66, 0], [1, "de", 5, 37, 53, 0], [1, "de", 4, 10, 63, 0], [1, "de", 7, 49, 48, 0], [1, "de", 7, 37, 63, 0], [1, "de", 6, 33, 68, 0], [1, "de", 6, 56, 52, 0], [1, "de", 5, 59, 58, 0], [1, "de", 6, 48, 58, 0], [1, "de", 4, 53, 63, 0], [1, "de", 4, 67, 44, 0], [1, "de", 5, 70, 49, 0], [1, "de", 5, 82, 55, 0], [1, "de", 5, 79, 41, 0], [1, "de", 5, 91, 29, 0], [1, "de", 7, 91, 43, 0], [1, "de", 6, 85, 44, 0], [1, "de", 6, 74, 60, 0], [1, "de", 6, 90, 8, 0], [1, "de", 5, 91, 15, 0], [1, "de", 4, 87, 20, 0], [1, "de", 7, 93, 11, 0], [1, "de", 6, 91, 21, 0], [1, "de", 6, 85, 35, 0], [1, "de", 5, 93, 58, 0], [1, "de", 5, 87, 63, 0], [1, "de", 7, 77, 62, 0], [1, "de", 6, 68, 61, 0], [1, "de", 5, 90, 73, 0], [1, "de", 4, 87, 71, 0], [1, "de", 7, 80, 71, 0], [1, "de", 7, 83, 77, 0], [1, "de", 7, 89, 83, 0], [1, "de", 4, 71, 80, 0], [1, "de", 4, 71, 70, 0], [1, "de", 5, 63, 72, 0], [1, "de", 4, 54, 75, 0], [1, "de", 5, 44, 83, 0], [1, "de", 5, 42, 74, 0], [1, "de", 5, 15, 81, 0], [1, "de", 4, 29, 80, 0], [1, "de", 4, 37, 90, 0], [1, "de", 4, 7, 75, 0], [1, "de", 6, 22, 74, 0], [1, "de", 6, 43, 95, 0], [1, "de", 6, 57, 85, 0], [1, "de", 6, 19, 94, 0], [1, "de", 6, 9, 92, 0], [1, "de", 5, 26, 89, 0], [1, "de", 5, 31, 112, 0], [1, "de", 5, 54, 108, 0], [1, "de", 5, 55, 95, 0], [1, "de", 5, 35, 104, 0], [1, "de", 5, 13, 110, 0], [1, "de", 7, 27, 107, 0], [1, "de", 7, 47, 99, 0], [1, "de", 7, 11, 104, 0], [1, "de", 7, 9, 111, 0], [1, "de", 7, 40, 114, 0], [1, "de", 7, 28, 117, 0], [1, "de", 7, 47, 113, 0], [1, "de", 7, 63, 104, 0], [1, "de", 4, 64, 92, 0], [1, "de", 6, 86, 97, 0], [1, "de", 5, 76, 91, 0], [1, "de", 5, 85, 86, 0], [1, "de", 6, 78, 83, 0], [1, "de", 6, 71, 97, 0], [1, "de", 4, 69, 105, 0], [1, "de", 4, 79, 104, 0], [1, "de", 4, 86, 109, 0], [1, "de", 4, 86, 118, 0], [1, "de", 5, 70, 113, 0], [1, "de", 6, 69, 121, 0], [1, "de", 6, 76, 122, 0], [1, "de", 7, 87, 130, 0], [1, "de", 4, 84, 123, 0], [1, "de", 4, 57, 121, 0], [1, "de", 5, 53, 125, 0], [1, "de", 5, 62, 131, 0], [1, "de", 6, 67, 143, 0], [1, "de", 5, 77, 143, 0], [1, "de", 5, 85, 136, 0], [1, "de", 6, 87, 147, 0], [1, "de", 6, 92, 140, 0], [1, "de", 4, 93, 127, 0], [1, "de", 5, 93, 106, 0], [1, "de", 5, 45, 144, 0], [1, "de", 4, 41, 139, 0], [1, "de", 4, 54, 138, 0], [1, "de", 6, 29, 145, 0], [1, "de", 6, 29, 132, 0], [1, "de", 6, 35, 127, 0], [1, "de", 6, 64, 142, 0], [1, "de", 5, 23, 131, 0], [1, "de", 5, 9, 134, 0], [1, "de", 6, 11, 121, 0], [1, "de", 4, 26, 121, 0], [1, "de", 35, 58, 150, 0], [1, "de", 33, 48, 156, 0], [1, "de", 33, 25, 158, 0], [1, "de", 33, 36, 154, 0], [1, "de", 34, 9, 154, 0], [1, "de", 34, 13, 148, 0], [1, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [1, "de", 34, 47, 144, 0], [1, "de", 34, 68, 142, 0], [1, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, 0], [1, "de", 36, 90, 141, 0], [1, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, 0], [1, "de", 33, 82, 122, 0], [1, "de", 35, 56, 122, 0], [1, "de", 35, 40, 119, 0], [1, "de", 35, 17, 112, 0], [1, "de", 35, 37, 102, 0], [1, "de", 33, 18, 97, 0], [1, "de", 34, 10, 83, 0], [1, "de", 33, 19, 73, 0], [1, "de", 33, 10, 60, 0], [1, "de", 35, 24, 60, 0], [1, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, 8, 32, 0], [1, "de", 33, 9, 24, 0], [1, "de", 35, 35, 27, 0], [1, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, 0], [1, "de", 35, 53, 39, 0], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, 0], [1, "de", 33, 68, 112, 0], [1, "de", 33, 49, 109, 0], [1, "de", 33, 46, 95, 0], [1, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, 0], [1, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, 0], [1, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, 0], [1, "de", 35, 93, 56, 0], [1, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, 0], [1, "de", 34, 92, 9, 0], [1, "de", 35, 75, 39, 0], [1, "de", 35, 67, 42, 0], [1, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, 0], [1, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, 0], [1, "de", 33, 46, 85, 0], [1, "de", 33, 64, 84, 0], [1, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, 0], [1, "de", 33, 31, 69, 0], [1, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [1, "de", 36, 29, 34, 0], [1, "de", 35, 20, 55, 0], [1, "de", 35, 14, 52, 0], [1, "s", 2, 12, 171, 1], [1, "r", 20, 188, 0], [1, "r", 21, 188, 0], [1, "r", 22, 188, 0], [1, "r", 23, 188, 0], [1, "r", 24, 188, 0], [1, "r", 25, 189, 0], [1, "r", 24, 189, 0], [1, "r", 23, 189, 0], [1, "r", 22, 189, 0], [1, "r", 21, 189, 0], [1, "r", 20, 189, 0], [1, "r", 19, 189, 0], [1, "r", 19, 190, 0], [1, "r", 19, 191, 0], [1, "r", 20, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [1, "r", 24, 191, 0], [1, "r", 23, 191, 0], [1, "r", 25, 191, 0], [1, "r", 25, 190, 0], [1, "r", 24, 190, 0], [1, "r", 23, 190, 0], [1, "r", 22, 190, 0], [1, "r", 21, 190, 0], [1, "r", 20, 190, 0], [1, "r", 26, 190, 0], [1, "r", 26, 191, 0], [1, "r", 24, 193, 0], [1, "r", 23, 193, 0], [1, "r", 22, 193, 0], [1, "r", 20, 192, 0], [1, "r", 21, 192, 0], [1, "r", 22, 192, 0], [1, "r", 23, 192, 0], [1, "r", 24, 192, 0], [1, "r", 25, 192, 0], [1, "r", 53, 199, 0], [1, "r", 52, 200, 0], [1, "r", 54, 199, 0], [1, "r", 55, 199, 0], [1, "r", 55, 200, 0], [1, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [1, "r", 56, 200, 0], [1, "r", 55, 201, 0], [1, "r", 54, 201, 0], [1, "r", 55, 202, 0], [1, "r", 54, 203, 0], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [1, "r", 53, 202, 0], [1, "r", 52, 202, 0], [1, "r", 53, 201, 0], [1, "r", 52, 201, 0], [1, "r", 51, 201, 0], [1, "r", 51, 202, 0], [1, "r", 50, 202, 0], [1, "r", 50, 201, 0], [1, "r", 56, 201, 0], [1, "r", 53, 203, 0], [1, "r", 52, 203, 0], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [1, "r", 53, 204, 0], [1, "r", 52, 204, 0], [1, "r", 55, 204, 0], [1, "r", 56, 203, 0], [1, "r", 56, 244, 0], [1, "r", 54, 246, 0], [1, "r", 50, 248, 0], [1, "r", 48, 248, 0], [1, "r", 43, 248, 0], [1, "r", 45, 238, 0], [1, "r", 44, 238, 0], [1, "r", 43, 238, 0], [1, "r", 46, 238, 0], [1, "r", 47, 238, 0], [1, "r", 48, 238, 0], [1, "r", 49, 238, 0], [1, "r", 50, 238, 0], [1, "r", 51, 238, 0], [1, "r", 52, 238, 0], [1, "r", 53, 238, 0], [1, "r", 54, 239, 0], [1, "r", 53, 240, 0], [1, "r", 53, 239, 0], [1, "r", 52, 239, 0], [1, "r", 51, 239, 0], [1, "r", 50, 239, 0], [1, "r", 49, 239, 0], [1, "r", 48, 239, 0], [1, "r", 47, 239, 0], [1, "r", 46, 239, 0], [1, "r", 45, 239, 0], [1, "r", 44, 239, 0], [1, "r", 43, 239, 0], [1, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [1, "r", 43, 240, 0], [1, "r", 44, 240, 0], [1, "r", 45, 240, 0], [1, "r", 46, 240, 0], [1, "r", 47, 240, 0], [1, "r", 48, 240, 0], [1, "r", 49, 240, 0], [1, "r", 50, 240, 0], [1, "r", 51, 240, 0], [1, "r", 52, 240, 0], [1, "r", 54, 240, 0], [1, "r", 55, 240, 0], [1, "r", 56, 241, 0], [1, "r", 55, 241, 0], [1, "r", 54, 241, 0], [1, "r", 53, 241, 0], [1, "r", 52, 241, 0], [1, "r", 51, 241, 0], [1, "r", 49, 241, 0], [1, "r", 50, 241, 0], [1, "r", 48, 241, 0], [1, "r", 47, 241, 0], [1, "r", 46, 241, 0], [1, "r", 45, 241, 0], [1, "r", 44, 241, 0], [1, "r", 43, 241, 0], [1, "r", 42, 241, 0], [1, "r", 41, 241, 0], [1, "r", 40, 242, 0], [1, "r", 41, 242, 0], [1, "r", 42, 242, 0], [1, "r", 43, 242, 0], [1, "r", 44, 242, 0], [1, "r", 45, 242, 0], [1, "r", 46, 242, 0], [1, "r", 47, 242, 0], [1, "r", 48, 242, 0], [1, "r", 49, 242, 0], [1, "r", 50, 242, 0], [1, "r", 51, 242, 0], [1, "r", 52, 242, 0], [1, "r", 53, 242, 0], [1, "r", 54, 242, 0], [1, "r", 55, 242, 0], [1, "r", 56, 242, 0], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [1, "r", 54, 243, 0], [1, "r", 53, 243, 0], [1, "r", 52, 243, 0], [1, "r", 51, 243, 0], [1, "r", 50, 243, 0], [1, "r", 49, 243, 0], [1, "r", 48, 243, 0], [1, "r", 47, 243, 0], [1, "r", 46, 243, 0], [1, "r", 45, 243, 0], [1, "r", 44, 243, 0], [1, "r", 43, 243, 0], [1, "r", 42, 243, 0], [1, "r", 41, 243, 0], [1, "r", 40, 243, 0], [1, "r", 40, 244, 0], [1, "r", 41, 244, 0], [1, "r", 43, 244, 0], [1, "r", 44, 244, 0], [1, "r", 45, 244, 0], [1, "r", 46, 244, 0], [1, "r", 47, 244, 0], [1, "r", 48, 244, 0], [1, "r", 49, 244, 0], [1, "r", 50, 244, 0], [1, "r", 51, 244, 0], [1, "r", 52, 244, 0], [1, "r", 53, 244, 0], [1, "r", 54, 244, 0], [1, "r", 55, 244, 0], [1, "r", 42, 244, 0], [1, "r", 40, 245, 0], [1, "r", 41, 245, 0], [1, "r", 42, 245, 0], [1, "r", 43, 245, 0], [1, "r", 44, 245, 0], [1, "r", 45, 245, 0], [1, "r", 46, 245, 0], [1, "r", 47, 245, 0], [1, "r", 48, 245, 0], [1, "r", 49, 245, 0], [1, "r", 50, 245, 0], [1, "r", 51, 245, 0], [1, "r", 52, 246, 0], [1, "r", 52, 245, 0], [1, "r", 53, 245, 0], [1, "r", 54, 245, 0], [1, "r", 55, 245, 0], [1, "r", 53, 246, 0], [1, "r", 51, 246, 0], [1, "r", 50, 246, 0], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [1, "r", 47, 246, 0], [1, "r", 45, 246, 0], [1, "r", 46, 246, 0], [1, "r", 44, 246, 0], [1, "r", 43, 246, 0], [1, "r", 42, 246, 0], [1, "r", 41, 246, 0], [1, "r", 42, 247, 0], [1, "r", 43, 247, 0], [1, "r", 44, 247, 0], [1, "r", 45, 247, 0], [1, "r", 46, 247, 0], [1, "r", 47, 247, 0], [1, "r", 48, 247, 0], [1, "r", 50, 247, 0], [1, "r", 51, 247, 0], [1, "r", 52, 247, 0], [1, "r", 53, 247, 0], [1, "r", 54, 247, 0], [1, "r", 49, 247, 0], [1, "r", 49, 248, 0], [1, "r", 47, 248, 0], [1, "r", 46, 248, 0], [1, "r", 45, 248, 0], [1, "r", 51, 248, 0], [1, "r", 55, 246, 1], [1, "r", 55, 247, 1], [1, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, 1], [1, "r", 93, 270, 1], [1, "r", 94, 270, 1], [1, "r", 95, 271, 1], [1, "r", 94, 271, 1], [1, "r", 93, 271, 1], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, 1], [1, "r", 92, 281, 1], [1, "r", 92, 280, 1], [1, "r", 91, 280, 1], [1, "r", 90, 279, 1], [1, "r", 95, 275, 1], [1, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [1, "r", 94, 274, 1], [1, "r", 94, 273, 1], [1, "r", 94, 272, 1], [1, "r", 93, 272, 1], [1, "r", 93, 273, 1], [1, "r", 93, 274, 1], [1, "r", 92, 273, 1], [1, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [1, "r", 92, 269, 1], [1, "r", 90, 269, 1], [1, "r", 91, 269, 1], [1, "r", 91, 271, 1], [1, "r", 91, 270, 1], [1, "r", 95, 278, 1], [1, "r", 95, 277, 1], [1, "r", 95, 276, 1], [1, "r", 94, 276, 1], [1, "r", 94, 275, 1], [1, "r", 93, 275, 1], [1, "r", 92, 274, 1], [1, "r", 92, 275, 1], [1, "r", 91, 275, 1], [1, "r", 90, 275, 1], [1, "r", 89, 274, 1], [1, "r", 90, 274, 1], [1, "r", 89, 275, 1], [1, "r", 88, 274, 1], [1, "r", 88, 273, 1], [1, "r", 86, 272, 1], [1, "r", 85, 271, 1], [1, "r", 86, 271, 1], [1, "r", 87, 272, 1], [1, "r", 55, 248, 1], [1, "r", 54, 248, 1], [1, "r", 56, 249, 1], [1, "r", 55, 249, 1], [1, "r", 55, 250, 1], [1, "r", 56, 250, 1], [1, "r", 57, 250, 1], [1, "r", 57, 249, 1], [1, "r", 59, 250, 1], [1, "r", 58, 250, 1], [1, "r", 60, 250, 1], [1, "r", 61, 251, 1], [1, "r", 60, 251, 1], [1, "r", 62, 251, 1], [1, "r", 62, 252, 1], [1, "r", 63, 252, 1], [1, "r", 58, 251, 1], [1, "r", 57, 251, 1], [1, "r", 56, 251, 1], [1, "r", 58, 252, 1], [1, "r", 57, 252, 1], [1, "r", 57, 253, 1], [1, "r", 58, 253, 1], [1, "r", 58, 254, 1], [1, "r", 59, 255, 1], [1, "r", 58, 255, 1], [1, "r", 57, 254, 1], [1, "r", 56, 252, 1], [1, "r", 55, 251, 1], [1, "r", 60, 255, 1], [1, "r", 61, 255, 1], [1, "r", 61, 256, 1], [1, "r", 60, 256, 1], [1, "r", 62, 256, 1], [1, "r", 62, 257, 1], [1, "r", 61, 257, 1], [1, "r", 64, 253, 1], [1, "r", 64, 254, 1], [1, "r", 65, 254, 1], [1, "r", 61, 250, 1], [1, "r", 64, 252, 1], [1, "r", 65, 253, 1], [1, "r", 66, 254, 1], [1, "r", 65, 255, 1], [1, "r", 64, 255, 1], [1, "r", 64, 256, 1], [1, "r", 65, 256, 1], [1, "r", 65, 257, 1], [1, "r", 64, 257, 1], [1, "r", 63, 257, 1], [1, "r", 62, 258, 1], [1, "r", 63, 258, 1], [1, "r", 64, 258, 1], [1, "r", 66, 255, 1], [1, "r", 66, 256, 1], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [1, "r", 67, 259, 1], [1, "r", 66, 259, 1], [1, "r", 65, 259, 1], [1, "r", 56, 246, 1], [1, "r", 56, 245, 1], [1, "r", 68, 258, 1], [1, "r", 68, 259, 1], [1, "r", 68, 260, 1], [1, "r", 69, 260, 1], [1, "r", 69, 261, 1], [1, "r", 70, 261, 1], [1, "r", 71, 261, 1], [1, "r", 67, 260, 1], [1, "r", 89, 269, 1], [1, "r", 89, 268, 1], [1, "r", 90, 268, 1], [1, "r", 82, 267, 1], [1, "r", 83, 267, 1], [1, "r", 80, 266, 1], [1, "r", 81, 266, 1], [1, "r", 81, 267, 1], [1, "r", 79, 266, 1], [1, "r", 78, 265, 1], [1, "r", 77, 265, 1], [1, "r", 76, 264, 1], [1, "r", 75, 264, 1], [1, "r", 75, 263, 1], [1, "r", 74, 263, 1], [1, "r", 74, 262, 1], [1, "r", 72, 262, 1], [1, "r", 73, 262, 1], [1, "r", 71, 262, 1], [1, "r", 85, 270, 1], [1, "r", 84, 270, 1], [1, "r", 84, 269, 1], [1, "r", 83, 269, 1], [1, "r", 82, 269, 1], [1, "r", 81, 269, 1], [1, "r", 81, 268, 1], [1, "r", 82, 268, 1], [1, "r", 83, 268, 1], [1, "r", 80, 268, 1], [1, "r", 80, 267, 1], [1, "r", 79, 267, 1], [1, "r", 78, 266, 1], [1, "r", 76, 265, 1], [1, "r", 75, 262, 1], [1, "r", 90, 280, 1], [1, "r", 89, 280, 1], [1, "r", 89, 279, 1], [1, "r", 88, 279, 1], [1, "r", 88, 278, 1], [1, "r", 87, 277, 1], [1, "r", 86, 276, 1], [1, "r", 86, 275, 1], [1, "r", 86, 274, 1], [1, "r", 86, 273, 1], [1, "r", 85, 273, 1], [1, "r", 85, 272, 1], [1, "r", 85, 274, 1], [1, "r", 86, 277, 1], [1, "r", 87, 278, 1], [1, "r", 84, 271, 1], [1, "r", 83, 270, 1], [1, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, 1], [1, "r", 88, 272, 1], [1, "r", 91, 281, 1], [1, "r", 92, 282, 1], [1, "r", 88, 280, 1], [1, "r", 87, 279, 1], [1, "r", 85, 275, 1], [1, "r", 84, 273, 1], [1, "r", 84, 272, 1], [1, "r", 83, 271, 1], [1, "r", 82, 270, 1], [1, "r", 84, 267, 0], [1, "r", 85, 267, 0], [1, "r", 76, 262, 0], [1, "r", 77, 262, 0], [1, "r", 88, 268, 0], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [1, "r", 80, 262, 0], [1, "r", 80, 263, 0], [1, "r", 81, 263, 0], [1, "r", 82, 263, 0], [1, "r", 83, 263, 0], [1, "r", 84, 263, 0], [1, "r", 85, 263, 0], [1, "r", 88, 262, 0], [1, "r", 89, 262, 0], [1, "r", 90, 262, 0], [1, "r", 87, 262, 0], [1, "r", 86, 262, 0], [1, "r", 86, 263, 0], [1, "r", 87, 263, 0], [1, "r", 91, 262, 0], [1, "r", 95, 262, 0], [1, "r", 94, 262, 0], [1, "r", 86, 267, 0], [1, "r", 87, 267, 0], [1, "r", 87, 268, 0], [1, "r", 86, 268, 0], [1, "r", 74, 189, 0], [1, "r", 75, 189, 0], [1, "r", 76, 189, 0], [1, "r", 77, 189, 0], [1, "r", 78, 190, 0], [1, "r", 77, 190, 0], [1, "r", 75, 190, 0], [1, "r", 76, 190, 0], [1, "r", 74, 190, 0], [1, "r", 73, 190, 0], [1, "r", 78, 191, 0], [1, "r", 76, 191, 0], [1, "r", 77, 191, 0], [1, "r", 75, 191, 0], [1, "r", 74, 191, 0], [1, "r", 78, 192, 0], [1, "r", 77, 192, 0], [1, "r", 76, 192, 0], [1, "r", 75, 192, 0], [1, "r", 74, 192, 0], [1, "r", 73, 191, 0], [1, "f", 1, 96, 22, 1], [1, "s", 1, 97, 22, 1], [1, "f", 1, 98, 22, 1], [1, "s", 0, 99, 22, 1], [1, "s", 1, 100, 21, 1], [1, "s", 1, 96, 49, 1], [1, "s", 1, 100, 50, 1], [1, "s", 0, 99, 49, 1], [1, "s", 0, 97, 49, 1], [1, "f", 1, 98, 49, 1], [1, "r", 70, 218, 0], [1, "r", 71, 218, 0], [1, "r", 72, 218, 0], [1, "r", 73, 218, 0], [1, "r", 74, 219, 0], [1, "r", 73, 219, 0], [1, "r", 72, 219, 0], [1, "r", 71, 219, 0], [1, "r", 70, 219, 0], [1, "r", 73, 220, 0], [1, "r", 72, 220, 0], [1, "r", 71, 220, 0], [1, "r", 72, 221, 0], [1, "r", 71, 221, 0], [1, "r", 70, 221, 0], [1, "r", 69, 221, 0], [1, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, 0], [1, "r", 69, 219, 0], [1, "r", 68, 220, 0], [1, "r", 73, 221, 0], [1, "r", 73, 222, 0], [1, "r", 71, 222, 0], [1, "r", 72, 222, 0], [1, "r", 74, 221, 0], [1, "r", 74, 220, 0], [1, "r", 75, 220, 0], [1, "r", 75, 221, 0], [1, "r", 70, 222, 0], [1, "r", 69, 222, 0], [1, "r", 29, 217, 0], [1, "r", 30, 217, 0], [1, "r", 31, 217, 0], [1, "r", 32, 217, 0], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [1, "r", 29, 219, 0], [1, "r", 27, 219, 0], [1, "r", 25, 219, 0], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [1, "r", 26, 218, 0], [1, "r", 27, 218, 0], [1, "r", 28, 218, 0], [1, "r", 29, 218, 0], [1, "r", 30, 218, 0], [1, "r", 28, 217, 0], [1, "r", 26, 217, 0], [1, "r", 27, 217, 0], [1, "r", 28, 216, 0], [1, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, 0], [1, "r", 32, 218, 0], [1, "r", 31, 216, 0], [1, "r", 31, 221, 0], [1, "r", 31, 220, 0], [1, "r", 30, 220, 0], [1, "r", 29, 220, 0], [1, "r", 28, 220, 0], [1, "r", 27, 220, 0], [1, "r", 26, 220, 0], [1, "r", 25, 218, 0], [1, "r", 27, 221, 0], [1, "r", 28, 221, 0], [1, "r", 29, 221, 0], [1, "r", 30, 221, 0], [1, "r", 32, 220, 0], [1, "r", 32, 219, 0], [1, "r", 33, 218, 0], [1, "r", 33, 219, 0], [1, "r", 75, 238, 0], [1, "r", 76, 238, 0], [1, "r", 77, 239, 0], [1, "r", 76, 239, 0], [1, "r", 75, 239, 0], [1, "r", 74, 239, 0], [1, "r", 76, 240, 0], [1, "r", 77, 240, 0], [1, "r", 78, 240, 0], [1, "r", 77, 241, 0], [1, "r", 76, 241, 0], [1, "r", 75, 241, 0], [1, "r", 75, 240, 0], [1, "r", 74, 240, 0], [1, "r", 78, 239, 0], [1, "r", 77, 238, 0], [1, "r", 18, 253, 0], [1, "r", 19, 252, 0], [1, "r", 20, 252, 0], [1, "r", 21, 253, 0], [1, "r", 23, 254, 0], [1, "r", 20, 254, 0], [1, "r", 19, 254, 0], [1, "r", 22, 254, 0], [1, "r", 18, 254, 0], [1, "r", 19, 253, 0], [1, "r", 20, 253, 0], [1, "r", 21, 254, 0], [1, "r", 22, 253, 0], [1, "r", 21, 255, 0], [1, "r", 20, 255, 0], [1, "r", 19, 255, 0], [1, "r", 18, 255, 0], [1, "r", 17, 255, 0], [1, "r", 17, 254, 0], [1, "r", 22, 255, 0], [1, "r", 19, 256, 0], [1, "r", 20, 256, 0], [1, "r", 21, 256, 0], [1, "r", 39, 270, 0], [1, "r", 40, 270, 0], [1, "r", 41, 270, 0], [1, "r", 43, 270, 0], [1, "r", 44, 270, 0], [1, "r", 46, 270, 0], [1, "r", 42, 270, 0], [1, "r", 45, 270, 0], [1, "r", 44, 269, 0], [1, "r", 43, 269, 0], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [1, "r", 41, 269, 0], [1, "r", 45, 271, 0], [1, "r", 44, 271, 0], [1, "r", 43, 271, 0], [1, "r", 42, 271, 0], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [1, "r", 46, 271, 0], [1, "r", 45, 272, 0], [1, "r", 44, 272, 0], [1, "r", 43, 272, 0], [1, "r", 42, 272, 0], [1, "r", 19, 284, 0], [1, "r", 20, 284, 0], [1, "r", 21, 285, 0], [1, "r", 22, 285, 0], [1, "r", 23, 286, 0], [1, "r", 22, 288, 0], [1, "r", 20, 288, 0], [1, "r", 18, 288, 0], [1, "r", 17, 287, 0], [1, "r", 16, 287, 0], [1, "r", 16, 286, 0], [1, "r", 17, 286, 0], [1, "r", 18, 286, 0], [1, "r", 19, 286, 0], [1, "r", 20, 286, 0], [1, "r", 21, 286, 0], [1, "r", 22, 286, 0], [1, "r", 20, 285, 0], [1, "r", 19, 285, 0], [1, "r", 18, 285, 0], [1, "r", 17, 285, 0], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [1, "r", 20, 287, 0], [1, "r", 21, 287, 0], [1, "r", 22, 287, 0], [1, "r", 23, 287, 0], [1, "r", 21, 288, 0], [1, "r", 19, 288, 0], [1, "r", 17, 288, 0], [1, "r", 19, 289, 0], [1, "r", 21, 289, 0], [1, "r", 22, 289, 0], [1, "r", 20, 289, 0], [1, "r", 23, 288, 0], [1, "r", 24, 287, 0], [1, "r", 24, 286, 0], [1, "r", 23, 285, 0], [1, "r", 66, 286, 0], [1, "r", 64, 287, 0], [1, "r", 63, 287, 0], [1, "r", 60, 287, 0], [1, "r", 59, 285, 0], [1, "r", 58, 284, 0], [1, "r", 59, 283, 0], [1, "r", 65, 283, 0], [1, "r", 64, 283, 0], [1, "r", 63, 283, 0], [1, "r", 62, 283, 0], [1, "r", 61, 283, 0], [1, "r", 60, 283, 0], [1, "r", 59, 284, 0], [1, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [1, "r", 61, 287, 0], [1, "r", 62, 287, 0], [1, "r", 61, 286, 0], [1, "r", 62, 286, 0], [1, "r", 63, 286, 0], [1, "r", 64, 286, 0], [1, "r", 65, 286, 0], [1, "r", 67, 285, 0], [1, "r", 66, 285, 0], [1, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, 0], [1, "r", 62, 285, 0], [1, "r", 61, 285, 0], [1, "r", 60, 285, 0], [1, "r", 60, 284, 0], [1, "r", 61, 284, 0], [1, "r", 62, 284, 0], [1, "r", 63, 284, 0], [1, "r", 64, 284, 0], [1, "r", 65, 284, 0], [1, "r", 66, 284, 0], [1, "r", 65, 287, 0], [1, "r", 67, 286, 0], [1, "p", 0, 13, 189, 1], [1, "p", 0, 32, 184, 1], [1, "p", 0, 47, 191, 1], [1, "p", 0, 64, 184, 1], [1, "p", 0, 84, 192, 1], [1, "p", 0, 78, 207, 1], [1, "p", 0, 58, 216, 1], [1, "p", 0, 41, 211, 1], [1, "p", 0, 18, 211, 1], [1, "p", 0, 14, 230, 1], [1, "p", 0, 29, 237, 1], [1, "p", 0, 50, 230, 1], [1, "p", 0, 78, 241, 1], [1, "p", 0, 74, 256, 1], [1, "p", 0, 68, 266, 1], [1, "p", 0, 48, 259, 1], [1, "p", 0, 31, 263, 1], [1, "p", 0, 18, 274, 1], [1, "p", 0, 33, 283, 1], [1, "p", 0, 66, 287, 1], [1, "p", 0, 82, 291, 1], [1, "p", 0, 16, 295, 1], [1, "p", 0, 45, 294, 1], [1, "p", 0, 18, 252, 1], [1, "p", 0, 79, 227, 1], [1, "p", 0, 32, 200, 1], [1, "p", 0, 64, 200, 1], [1, "s", 0, 21, 193, 1], [1, "s", 1, 18, 189, 1], [1, "s", 2, 26, 189, 1], [1, "b", 1, 15, 181, 0], [1, "b", 2, 18, 190, 0], [1, "b", 2, 29, 193, 0], [1, "t", 3, 16, 182, 0], [1, "t", 3, 13, 195, 0], [1, "t", 4, 16, 183, 0], [1, "t", 5, 10, 184, 0], [1, "t", 5, 23, 182, 0], [1, "t", 4, 30, 187, 0], [1, "t", 1, 26, 192, 0], [1, "b", 1, 25, 188, 0], [1, "s", 1, 24, 181, 1], [1, "t", 3, 33, 183, 0], [1, "b", 1, 36, 189, 0], [1, "t", 2, 35, 190, 0], [1, "b", 3, 19, 200, 0], [1, "s", 0, 28, 194, 1], [1, "s", 1, 32, 196, 1], [1, "s", 1, 36, 183, 1], [1, "s", 2, 38, 184, 1], [1, "s", 2, 10, 192, 1], [1, "s", 2, 12, 183, 1], [1, "s", 1, 15, 199, 1], [1, "b", 0, 12, 202, 0], [1, "t", 2, 13, 203, 0], [1, "t", 4, 20, 200, 0], [1, "t", 4, 12, 194, 0], [1, "t", 5, 15, 205, 0], [1, "t", 5, 29, 200, 0], [1, "t", 3, 28, 201, 0], [1, "s", 2, 25, 199, 1], [1, "s", 1, 22, 204, 1], [1, "g", 2, 25, 205, 1], [1, "b", 1, 27, 216, 0], [1, "s", 1, 25, 217, 1], [1, "s", 1, 33, 217, 1], [1, "s", 2, 35, 215, 1], [1, "s", 0, 32, 221, 1], [1, "t", 2, 31, 222, 0], [1, "t", 4, 26, 221, 0], [1, "b", 3, 27, 222, 0], [1, "b", 0, 17, 217, 0], [1, "t", 3, 18, 216, 0], [1, "t", 4, 13, 215, 0], [1, "t", 5, 30, 213, 0], [1, "t", 5, 24, 208, 0], [1, "s", 1, 12, 216, 1], [1, "s", 2, 11, 210, 1], [1, "s", 2, 34, 223, 1], [1, "b", 2, 36, 218, 0], [1, "t", 4, 40, 206, 0], [1, "t", 5, 35, 203, 0], [1, "t", 3, 39, 206, 0], [1, "b", 1, 34, 204, 0], [1, "s", 1, 33, 206, 1], [1, "s", 1, 42, 203, 1], [1, "s", 0, 47, 196, 1], [1, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, 0], [1, "t", 5, 44, 187, 0], [1, "b", 1, 46, 181, 0], [1, "t", 2, 47, 182, 0], [1, "b", 0, 57, 182, 0], [1, "b", 3, 56, 183, 0], [1, "t", 4, 55, 184, 0], [1, "t", 5, 62, 195, 0], [1, "s", 1, 51, 185, 1], [1, "s", 2, 62, 180, 1], [1, "s", 2, 61, 188, 1], [1, "s", 1, 61, 189, 1], [1, "s", 2, 48, 195, 1], [1, "b", 1, 51, 199, 0], [1, "t", 2, 52, 199, 0], [1, "t", 3, 56, 204, 0], [1, "t", 4, 57, 204, 0], [1, "t", 4, 51, 204, 0], [1, "s", 1, 52, 205, 1], [1, "s", 2, 57, 200, 1], [1, "s", 1, 56, 199, 1], [1, "b", 0, 55, 192, 0], [1, "t", 3, 56, 193, 0], [1, "t", 4, 50, 190, 0], [1, "b", 1, 76, 188, 0], [1, "t", 2, 75, 188, 0], [1, "t", 2, 73, 192, 0], [1, "t", 4, 72, 191, 0], [1, "t", 5, 78, 193, 0], [1, "b", 0, 79, 192, 0], [1, "s", 2, 79, 190, 1], [1, "s", 1, 74, 194, 1], [1, "s", 1, 72, 187, 1], [1, "s", 0, 74, 183, 1], [1, "s", 1, 75, 183, 1], [1, "t", 2, 69, 181, 0], [1, "t", 4, 70, 182, 0], [1, "t", 5, 69, 180, 0], [1, "b", 1, 65, 189, 0], [1, "b", 2, 66, 189, 0], [1, "t", 3, 64, 188, 0], [1, "t", 4, 67, 192, 0], [1, "b", 2, 85, 183, 0], [1, "t", 1, 84, 184, 0], [1, "t", 4, 81, 180, 0], [1, "t", 5, 89, 180, 0], [1, "t", 0, 90, 188, 0], [1, "t", 3, 89, 190, 0], [1, "s", 1, 87, 187, 1], [1, "s", 2, 87, 197, 1], [1, "b", 1, 84, 200, 0], [1, "t", 2, 83, 201, 0], [1, "t", 4, 87, 207, 0], [1, "s", 2, 79, 202, 1], [1, "s", 1, 80, 203, 1], [1, "t", 0, 71, 200, 0], [1, "b", 2, 72, 201, 0], [1, "t", 2, 65, 205, 0], [1, "t", 1, 66, 206, 0], [1, "t", 4, 63, 209, 0], [1, "t", 5, 73, 203, 0], [1, "s", 0, 70, 207, 1], [1, "s", 1, 71, 206, 1], [1, "s", 2, 68, 199, 1], [1, "s", 1, 64, 213, 1], [1, "t", 0, 85, 213, 0], [1, "b", 2, 84, 212, 0], [1, "t", 3, 77, 209, 0], [1, "t", 4, 83, 216, 0], [1, "t", 4, 73, 209, 0], [1, "b", 0, 86, 222, 0], [1, "b", 3, 87, 221, 0], [1, "s", 1, 80, 214, 1], [1, "s", 2, 87, 216, 1], [1, "s", 2, 84, 224, 1], [1, "s", 1, 77, 227, 1], [1, "t", 1, 74, 222, 0], [1, "b", 1, 69, 218, 0], [1, "b", 2, 75, 219, 0], [1, "s", 2, 74, 218, 1], [1, "s", 1, 69, 223, 1], [1, "s", 1, 77, 221, 1], [1, "b", 1, 72, 211, 0], [1, "b", 1, 85, 232, 0], [1, "t", 2, 84, 233, 0], [1, "t", 2, 78, 238, 0], [1, "b", 1, 77, 237, 0], [1, "t", 5, 87, 236, 0], [1, "t", 5, 76, 229, 0], [1, "b", 2, 74, 241, 0], [1, "s", 0, 73, 242, 1], [1, "s", 0, 81, 238, 1], [1, "s", 1, 82, 237, 1], [1, "s", 2, 72, 237, 1], [1, "s", 2, 78, 242, 1], [1, "b", 1, 66, 230, 0], [1, "b", 2, 62, 229, 0], [1, "t", 4, 67, 231, 0], [1, "t", 4, 62, 228, 0], [1, "t", 5, 64, 233, 0], [1, "t", 2, 65, 234, 0], [1, "t", 2, 51, 220, 0], [1, "t", 1, 50, 218, 0], [1, "b", 1, 45, 223, 0], [1, "b", 2, 46, 224, 0], [1, "t", 4, 49, 218, 0], [1, "t", 4, 47, 225, 0], [1, "s", 1, 50, 215, 1], [1, "s", 2, 51, 213, 1], [1, "s", 2, 42, 227, 1], [1, "s", 1, 44, 227, 1], [1, "s", 1, 60, 230, 1], [1, "s", 2, 59, 231, 1], [1, "b", 1, 85, 252, 0], [1, "t", 2, 84, 251, 0], [1, "t", 2, 74, 250, 0], [1, "t", 0, 75, 251, 0], [1, "b", 0, 83, 246, 0], [1, "t", 3, 82, 247, 0], [1, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [1, "t", 5, 87, 246, 0], [1, "t", 5, 75, 252, 0], [1, "s", 1, 79, 257, 1], [1, "s", 2, 78, 249, 1], [1, "s", 2, 80, 258, 1], [1, "s", 1, 88, 254, 1], [1, "s", 1, 85, 264, 1], [1, "s", 2, 89, 263, 1], [1, "s", 2, 87, 269, 1], [1, "s", 0, 84, 268, 1], [1, "s", 2, 76, 267, 1], [1, "s", 1, 66, 261, 1], [1, "s", 1, 87, 274, 1], [1, "s", 1, 76, 263, 1], [1, "s", 1, 59, 251, 1], [1, "s", 0, 59, 252, 1], [1, "t", 2, 86, 265, 0], [1, "t", 0, 78, 270, 0], [1, "t", 2, 79, 271, 0], [1, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, 0], [1, "b", 1, 71, 264, 0], [1, "b", 1, 88, 269, 0], [1, "t", 5, 84, 264, 0], [1, "t", 5, 79, 261, 0], [1, "t", 5, 72, 265, 0], [1, "t", 5, 77, 270, 0], [1, "t", 0, 87, 261, 0], [1, "t", 2, 86, 260, 0], [1, "t", 4, 84, 255, 0], [1, "t", 4, 68, 255, 0], [1, "t", 1, 67, 254, 0], [1, "t", 2, 65, 262, 0], [1, "t", 1, 57, 260, 0], [1, "t", 2, 58, 259, 0], [1, "b", 1, 63, 256, 0], [1, "b", 1, 52, 248, 0], [1, "t", 2, 53, 248, 0], [1, "s", 1, 50, 253, 1], [1, "s", 2, 67, 263, 1], [1, "s", 2, 52, 252, 1], [1, "s", 2, 71, 244, 1], [1, "b", 0, 57, 245, 0], [1, "t", 2, 58, 244, 0], [1, "b", 1, 53, 237, 0], [1, "t", 2, 54, 237, 0], [1, "t", 2, 41, 238, 0], [1, "t", 1, 42, 237, 0], [1, "t", 5, 57, 235, 0], [1, "t", 5, 60, 246, 0], [1, "t", 5, 50, 252, 0], [1, "t", 1, 42, 248, 0], [1, "b", 1, 43, 249, 0], [1, "b", 3, 37, 243, 0], [1, "s", 0, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, 1], [1, "s", 2, 60, 243, 1], [1, "s", 2, 36, 240, 1], [1, "s", 2, 43, 254, 1], [1, "s", 1, 42, 254, 1], [1, "t", 1, 38, 233, 0], [1, "t", 2, 35, 235, 0], [1, "t", 4, 33, 228, 0], [1, "t", 4, 33, 245, 0], [1, "t", 4, 43, 235, 0], [1, "t", 5, 45, 249, 0], [1, "t", 5, 41, 253, 0], [1, "b", 1, 20, 227, 0], [1, "b", 1, 14, 240, 0], [1, "t", 3, 21, 227, 0], [1, "t", 3, 27, 234, 0], [1, "t", 3, 15, 241, 0], [1, "t", 3, 12, 229, 0], [1, "t", 4, 17, 224, 0], [1, "t", 4, 11, 231, 0], [1, "t", 4, 22, 238, 0], [1, "t", 4, 11, 239, 0], [1, "t", 1, 22, 243, 0], [1, "b", 2, 23, 242, 0], [1, "s", 1, 23, 238, 1], [1, "s", 1, 22, 228, 1], [1, "s", 2, 24, 228, 1], [1, "s", 2, 21, 236, 1], [1, "s", 0, 13, 228, 1], [1, "s", 0, 16, 242, 1], [1, "s", 1, 15, 244, 1], [1, "s", 1, 34, 236, 1], [1, "t", 1, 26, 249, 0], [1, "t", 1, 22, 256, 0], [1, "t", 2, 23, 255, 0], [1, "b", 1, 17, 256, 0], [1, "b", 2, 18, 256, 0], [1, "s", 0, 21, 252, 1], [1, "s", 2, 20, 250, 1], [1, "s", 2, 23, 259, 1], [1, "s", 1, 13, 257, 1], [1, "t", 1, 31, 254, 0], [1, "t", 2, 32, 254, 0], [1, "t", 4, 28, 254, 0], [1, "t", 4, 34, 258, 0], [1, "t", 0, 29, 260, 0], [1, "b", 2, 30, 261, 0], [1, "t", 0, 43, 262, 0], [1, "t", 2, 42, 263, 0], [1, "t", 4, 46, 264, 0], [1, "b", 1, 39, 265, 0], [1, "b", 1, 58, 267, 0], [1, "t", 2, 57, 268, 0], [1, "t", 4, 62, 270, 0], [1, "t", 5, 52, 273, 0], [1, "s", 1, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", 2, 41, 274, 1], [1, "t", 2, 42, 268, 0], [1, "t", 0, 43, 268, 0], [1, "b", 1, 46, 272, 0], [1, "b", 1, 14, 265, 0], [1, "t", 2, 15, 266, 0], [1, "t", 4, 19, 264, 0], [1, "t", 4, 29, 263, 0], [1, "t", 4, 11, 269, 0], [1, "t", 1, 29, 271, 0], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, 0], [1, "t", 2, 20, 279, 0], [1, "t", 0, 19, 278, 0], [1, "t", 3, 13, 278, 0], [1, "b", 0, 21, 284, 0], [1, "b", 0, 18, 289, 0], [1, "t", 2, 20, 283, 0], [1, "t", 2, 19, 290, 0], [1, "t", 4, 19, 283, 0], [1, "t", 4, 20, 290, 0], [1, "s", 1, 16, 285, 1], [1, "s", 1, 24, 288, 1], [1, "s", 2, 26, 287, 1], [1, "s", 2, 16, 278, 1], [1, "s", 1, 21, 268, 1], [1, "s", 2, 19, 268, 1], [1, "t", 0, 12, 294, 0], [1, "b", 1, 13, 295, 0], [1, "t", 3, 13, 291, 0], [1, "t", 3, 10, 299, 0], [1, "t", 4, 11, 287, 0], [1, "t", 4, 17, 298, 0], [1, "t", 1, 27, 294, 0], [1, "b", 2, 26, 295, 0], [1, "t", 3, 33, 297, 0], [1, "b", 1, 48, 278, 0], [1, "b", 0, 46, 280, 0], [1, "b", 2, 50, 280, 0], [1, "t", 0, 44, 282, 0], [1, "b", 1, 49, 283, 0], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, 0], [1, "b", 3, 44, 284, 0], [1, "b", 0, 47, 284, 0], [1, "b", 2, 42, 283, 0], [1, "t", 4, 51, 277, 0], [1, "b", 1, 44, 286, 0], [1, "b", 2, 46, 286, 0], [1, "b", 1, 42, 285, 0], [1, "b", 3, 41, 286, 0], [1, "t", 5, 42, 287, 0], [1, "b", 1, 42, 278, 0], [1, "b", 2, 43, 279, 0], [1, "b", 0, 40, 280, 0], [1, "t", 4, 39, 283, 0], [1, "t", 4, 39, 279, 0], [1, "t", 5, 43, 277, 0], [1, "t", 5, 47, 287, 0], [1, "t", 4, 46, 277, 0], [1, "t", 4, 45, 290, 0], [1, "t", 4, 36, 285, 0], [1, "t", 3, 35, 284, 0], [1, "t", 3, 36, 272, 0], [1, "t", 4, 35, 271, 0], [1, "t", 1, 29, 279, 0], [1, "b", 1, 32, 277, 0], [1, "t", 3, 31, 278, 0], [1, "b", 2, 28, 280, 0], [1, "t", 4, 29, 286, 0], [1, "t", 5, 28, 275, 0], [1, "t", 3, 37, 292, 0], [1, "b", 1, 36, 291, 0], [1, "b", 0, 34, 298, 0], [1, "t", 4, 31, 292, 0], [1, "t", 4, 46, 295, 0], [1, "t", 4, 59, 287, 0], [1, "b", 1, 58, 286, 0], [1, "s", 1, 68, 284, 1], [1, "s", 2, 70, 286, 1], [1, "s", 0, 67, 284, 1], [1, "t", 3, 66, 283, 0], [1, "t", 1, 65, 282, 0], [1, "b", 1, 64, 288, 0], [1, "t", 3, 60, 293, 0], [1, "t", 1, 61, 294, 0], [1, "b", 1, 76, 294, 0], [1, "t", 5, 75, 295, 0], [1, "t", 5, 56, 293, 0], [1, "t", 5, 59, 281, 0], [1, "t", 5, 67, 291, 0], [1, "b", 0, 88, 293, 0], [1, "t", 2, 89, 292, 0], [1, "t", 2, 85, 286, 0], [1, "t", 4, 88, 289, 0], [1, "t", 4, 79, 287, 0], [1, "b", 1, 84, 285, 0], [1, "t", 3, 75, 284, 0], [1, "b", 0, 75, 278, 0], [1, "t", 3, 74, 277, 0], [1, "t", 4, 81, 276, 0], [1, "t", 2, 65, 276, 0], [1, "b", 1, 66, 275, 0], [1, "g", 0, 45, 261, 1], [1, "g", 1, 39, 258, 1], [1, "g", 0, 35, 250, 1], [1, "g", 2, 22, 247, 1], [1, "g", 2, 27, 227, 1], [1, "g", 2, 63, 218, 1], [1, "g", 1, 56, 224, 1], [1, "g", 0, 46, 231, 1], [1, "g", 1, 65, 240, 1], [1, "g", 2, 67, 238, 1], [1, "g", 2, 79, 232, 1], [1, "g", 2, 72, 253, 1], [1, "g", 2, 62, 264, 1], [1, "g", 2, 28, 267, 1], [1, "g", 2, 58, 274, 1], [1, "de", 2, 14, 182, 0], [1, "de", 2, 24, 182, 0], [1, "de", 0, 11, 185, 0], [1, "de", 0, 14, 194, 0], [1, "de", 1, 25, 196, 0], [1, "de", 3, 31, 183, 0], [1, "de", 0, 38, 181, 0], [1, "de", 2, 45, 186, 0], [1, "de", 1, 38, 191, 0], [1, "de", 0, 56, 181, 0], [1, "de", 1, 68, 182, 0], [1, "de", 2, 80, 181, 0], [1, "de", 3, 86, 187, 0], [1, "de", 0, 84, 193, 0], [1, "de", 1, 82, 201, 0], [1, "de", 2, 64, 191, 0], [1, "de", 2, 72, 200, 0], [1, "de", 3, 64, 201, 0], [1, "de", 2, 76, 209, 0], [1, "de", 3, 71, 212, 0], [1, "de", 1, 86, 214, 0], [1, "de", 0, 57, 208, 0], [1, "de", 0, 41, 203, 0], [1, "de", 1, 15, 206, 0], [1, "de", 2, 25, 209, 0], [1, "de", 3, 16, 218, 0], [1, "de", 3, 11, 227, 0], [1, "de", 0, 22, 229, 0], [1, "de", 1, 15, 239, 0], [1, "de", 2, 24, 238, 0], [1, "de", 3, 22, 246, 0], [1, "de", 3, 10, 253, 0], [1, "de", 1, 18, 258, 0], [1, "de", 1, 28, 261, 0], [1, "de", 1, 14, 267, 0], [1, "de", 0, 24, 268, 0], [1, "de", 0, 15, 278, 0], [1, "de", 2, 21, 279, 0], [1, "de", 2, 30, 272, 0], [1, "de", 2, 29, 281, 0], [1, "de", 2, 15, 284, 0], [1, "de", 3, 12, 291, 0], [1, "de", 3, 30, 287, 0], [1, "de", 3, 27, 293, 0], [1, "de", 0, 25, 296, 0], [1, "de", 0, 11, 298, 0], [1, "de", 0, 8, 286, 0], [1, "de", 2, 36, 299, 0], [1, "de", 2, 37, 280, 0], [1, "de", 3, 38, 291, 0], [1, "de", 1, 48, 287, 0], [1, "de", 1, 46, 277, 0], [1, "de", 1, 53, 278, 0], [1, "de", 3, 48, 295, 0], [1, "de", 0, 57, 294, 0], [1, "de", 1, 65, 290, 0], [1, "de", 1, 84, 292, 0], [1, "de", 2, 77, 295, 0], [1, "de", 2, 84, 287, 0], [1, "de", 0, 74, 279, 0], [1, "de", 3, 65, 274, 0], [1, "de", 2, 71, 267, 0], [1, "de", 2, 65, 261, 0], [1, "de", 2, 47, 264, 0], [1, "de", 3, 47, 258, 0], [1, "de", 3, 53, 251, 0], [1, "de", 2, 40, 253, 0], [1, "de", 0, 35, 244, 0], [1, "de", 0, 37, 233, 0], [1, "de", 3, 44, 226, 0], [1, "de", 2, 37, 219, 0], [1, "de", 2, 54, 234, 0], [1, "de", 1, 66, 234, 0], [1, "de", 2, 65, 241, 0], [1, "de", 0, 68, 249, 0], [1, "de", 3, 78, 257, 0], [1, "de", 2, 86, 253, 0], [1, "de", 2, 83, 245, 0], [1, "de", 1, 82, 238, 0], [1, "de", 3, 76, 235, 0], [1, "de", 2, 86, 232, 0], [1, "de", 0, 86, 224, 0], [1, "de", 2, 76, 226, 0], [1, "de", 2, 61, 228, 0], [1, "de", 2, 58, 217, 0], [1, "de", 0, 49, 217, 0], [1, "de", 19, 11, 179, 0], [1, "de", 20, 17, 180, 0], [1, "de", 22, 18, 181, 0], [1, "de", 19, 30, 184, 0], [1, "de", 19, 27, 187, 0], [1, "de", 19, 30, 195, 0], [1, "de", 19, 18, 192, 0], [1, "de", 19, 44, 182, 0], [1, "de", 19, 49, 182, 0], [1, "de", 19, 54, 182, 0], [1, "de", 19, 59, 183, 0], [1, "de", 19, 56, 186, 0], [1, "de", 19, 46, 188, 0], [1, "de", 19, 58, 193, 0], [1, "de", 19, 67, 187, 0], [1, "de", 19, 65, 192, 0], [1, "de", 19, 71, 180, 0], [1, "de", 19, 78, 187, 0], [1, "de", 19, 80, 194, 0], [1, "de", 19, 72, 193, 0], [1, "de", 19, 82, 182, 0], [1, "de", 19, 88, 185, 0], [1, "de", 19, 87, 189, 0], [1, "de", 19, 86, 197, 0], [1, "de", 19, 85, 203, 0], [1, "de", 19, 74, 200, 0], [1, "de", 19, 70, 202, 0], [1, "de", 19, 83, 199, 0], [1, "de", 19, 86, 208, 0], [1, "de", 19, 84, 214, 0], [1, "de", 19, 83, 211, 0], [1, "de", 19, 84, 217, 0], [1, "de", 19, 77, 210, 0], [1, "de", 19, 71, 210, 0], [1, "de", 19, 73, 213, 0], [1, "de", 19, 66, 207, 0], [1, "de", 19, 66, 204, 0], [1, "de", 19, 62, 209, 0], [1, "de", 19, 63, 201, 0], [1, "de", 19, 56, 205, 0], [1, "de", 19, 49, 199, 0], [1, "de", 19, 50, 205, 0], [1, "de", 19, 40, 197, 0], [1, "de", 19, 38, 198, 0], [1, "de", 19, 40, 208, 0], [1, "de", 19, 36, 204, 0], [1, "de", 19, 33, 204, 0], [1, "de", 19, 29, 202, 0], [1, "de", 19, 27, 200, 0], [1, "de", 19, 26, 193, 0], [1, "de", 19, 18, 201, 0], [1, "de", 19, 20, 199, 0], [1, "de", 19, 12, 196, 0], [1, "de", 19, 12, 204, 0], [1, "de", 19, 11, 201, 0], [1, "de", 19, 23, 208, 0], [1, "de", 19, 31, 214, 0], [1, "de", 19, 26, 215, 0], [1, "de", 19, 36, 217, 0], [1, "de", 19, 32, 223, 0], [1, "de", 19, 26, 223, 0], [1, "de", 19, 18, 218, 0], [1, "de", 19, 15, 215, 0], [1, "de", 19, 17, 212, 0], [1, "de", 19, 15, 224, 0], [1, "de", 19, 19, 229, 0], [1, "de", 19, 10, 230, 0], [1, "de", 19, 22, 240, 0], [1, "de", 19, 13, 238, 0], [1, "de", 19, 13, 243, 0], [1, "de", 19, 24, 244, 0], [1, "de", 19, 24, 250, 0], [1, "de", 19, 28, 253, 0], [1, "de", 19, 33, 255, 0], [1, "de", 19, 34, 260, 0], [1, "de", 19, 31, 260, 0], [1, "de", 19, 38, 267, 0], [1, "de", 19, 44, 264, 0], [1, "de", 19, 43, 261, 0], [1, "de", 19, 16, 257, 0], [1, "de", 19, 22, 258, 0], [1, "de", 19, 12, 253, 0], [1, "de", 19, 8, 242, 0], [1, "de", 19, 8, 255, 0], [1, "de", 19, 15, 264, 0], [1, "de", 19, 20, 265, 0], [1, "de", 19, 12, 271, 0], [1, "de", 19, 8, 272, 0], [1, "de", 19, 13, 277, 0], [1, "de", 19, 21, 277, 0], [1, "de", 19, 21, 281, 0], [1, "de", 19, 27, 282, 0], [1, "de", 19, 29, 278, 0], [1, "de", 19, 29, 273, 0], [1, "de", 19, 36, 271, 0], [1, "de", 19, 8, 278, 0], [1, "de", 19, 11, 286, 0], [1, "de", 19, 17, 291, 0], [1, "de", 19, 14, 294, 0], [1, "de", 19, 8, 292, 0], [1, "de", 19, 12, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", 19, 16, 301, 0], [1, "de", 19, 27, 296, 0], [1, "de", 19, 25, 292, 0], [1, "de", 19, 23, 301, 0], [1, "de", 19, 28, 301, 0], [1, "de", 19, 35, 297, 0], [1, "de", 19, 37, 301, 0], [1, "de", 19, 43, 301, 0], [1, "de", 19, 46, 294, 0], [1, "de", 19, 46, 288, 0], [1, "de", 19, 40, 287, 0], [1, "de", 19, 50, 301, 0], [1, "de", 19, 58, 301, 0], [1, "de", 19, 64, 301, 0], [1, "de", 19, 71, 301, 0], [1, "de", 19, 80, 301, 0], [1, "de", 19, 87, 301, 0], [1, "de", 19, 86, 294, 0], [1, "de", 19, 87, 290, 0], [1, "de", 19, 82, 286, 0], [1, "de", 19, 75, 285, 0], [1, "de", 19, 66, 292, 0], [1, "de", 19, 66, 288, 0], [1, "de", 19, 58, 288, 0], [1, "de", 19, 67, 282, 0], [1, "de", 19, 61, 281, 0], [1, "de", 19, 60, 295, 0], [1, "de", 19, 50, 282, 0], [1, "de", 19, 47, 283, 0], [1, "de", 19, 48, 281, 0], [1, "de", 19, 44, 277, 0], [1, "de", 19, 41, 282, 0], [1, "de", 19, 38, 281, 0], [1, "de", 19, 42, 288, 0], [1, "de", 19, 52, 281, 0], [1, "de", 19, 50, 275, 0], [1, "de", 19, 39, 277, 0], [1, "de", 19, 38, 284, 0], [1, "de", 19, 51, 285, 0], [1, "de", 19, 38, 278, 0], [1, "de", 19, 47, 272, 0], [1, "de", 19, 44, 267, 0], [1, "de", 19, 76, 280, 0], [1, "de", 19, 78, 272, 0], [1, "de", 19, 68, 275, 0], [1, "de", 19, 70, 265, 0], [1, "de", 19, 65, 263, 0], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, 0], [1, "de", 19, 56, 266, 0], [1, "de", 19, 55, 260, 0], [1, "de", 19, 59, 258, 0], [1, "de", 19, 62, 255, 0], [1, "de", 19, 67, 253, 0], [1, "de", 19, 69, 256, 0], [1, "de", 19, 44, 253, 0], [1, "de", 19, 44, 250, 0], [1, "de", 19, 36, 245, 0], [1, "de", 19, 39, 239, 0], [1, "de", 19, 42, 234, 0], [1, "de", 19, 37, 235, 0], [1, "de", 19, 45, 226, 0], [1, "de", 19, 46, 222, 0], [1, "de", 19, 51, 218, 0], [1, "de", 19, 68, 218, 0], [1, "de", 19, 74, 224, 0], [1, "de", 19, 76, 218, 0], [1, "de", 19, 84, 221, 0], [1, "de", 19, 88, 223, 0], [1, "de", 19, 76, 230, 0], [1, "de", 19, 86, 234, 0], [1, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, 0], [1, "de", 19, 83, 247, 0], [1, "de", 19, 88, 247, 0], [1, "de", 19, 84, 254, 0], [1, "de", 19, 86, 251, 0], [1, "de", 19, 85, 260, 0], [1, "de", 19, 79, 260, 0], [1, "de", 19, 76, 251, 0], [1, "de", 19, 72, 251, 0], [1, "de", 19, 69, 251, 0], [1, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, 0], [1, "de", 19, 87, 271, 0], [1, "de", 19, 82, 277, 0], [1, "de", 19, 87, 284, 0], [1, "de", 19, 87, 237, 0], [1, "de", 19, 88, 179, 0], [1, "de", 19, 50, 191, 0], [1, "de", 19, 52, 221, 0], [1, "de", 19, 34, 234, 0], [1, "de", 19, 27, 233, 0], [1, "de", 19, 37, 293, 0], [1, "de", 29, 13, 181, 0], [1, "de", 29, 8, 180, 0], [1, "de", 30, 13, 186, 0], [1, "de", 31, 24, 183, 0], [1, "de", 32, 33, 185, 0], [1, "de", 32, 37, 182, 0], [1, "de", 29, 45, 183, 0], [1, "de", 30, 48, 183, 0], [1, "de", 30, 58, 181, 0], [1, "de", 30, 66, 188, 0], [1, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, 0], [1, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [1, "de", 31, 82, 203, 0], [1, "de", 32, 80, 201, 0], [1, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [1, "de", 30, 88, 220, 0], [1, "de", 30, 78, 229, 0], [1, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, 0], [1, "de", 29, 67, 217, 0], [1, "de", 30, 72, 208, 0], [1, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, 0], [1, "de", 29, 63, 210, 0], [1, "de", 29, 50, 204, 0], [1, "de", 30, 41, 205, 0], [1, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [1, "de", 30, 20, 201, 0], [1, "de", 29, 10, 203, 0], [1, "de", 29, 14, 196, 0], [1, "de", 29, 24, 187, 0], [1, "de", 29, 28, 223, 0], [1, "de", 29, 32, 212, 0], [1, "de", 30, 28, 214, 0], [1, "de", 31, 24, 218, 0], [1, "de", 29, 36, 219, 0], [1, "de", 29, 37, 217, 0], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [1, "de", 29, 69, 231, 0], [1, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, 0], [1, "de", 30, 58, 261, 0], [1, "de", 30, 73, 276, 0], [1, "de", 30, 64, 276, 0], [1, "de", 30, 82, 285, 0], [1, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, 0], [1, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, 0], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, 0], [1, "de", 29, 28, 296, 0], [1, "de", 29, 18, 292, 0], [1, "de", 29, 24, 284, 0], [1, "de", 30, 10, 295, 0], [1, "de", 30, 10, 286, 0], [1, "de", 30, 15, 279, 0], [1, "de", 30, 15, 269, 0], [1, "de", 30, 21, 259, 0], [1, "de", 30, 12, 256, 0], [1, "de", 30, 31, 245, 0], [1, "de", 30, 12, 240, 0], [1, "de", 30, 28, 235, 0], [1, "de", 30, 13, 226, 0], [1, "de", 30, 39, 231, 0], [1, "de", 30, 61, 226, 0], [1, "r", 96, 262, 0], [1, "r", 97, 262, 0], [1, "r", 98, 262, 0], [1, "r", 97, 270, 0], [1, "r", 97, 271, 0], [1, "r", 97, 272, 0], [1, "r", 97, 273, 0], [1, "r", 97, 274, 0], [1, "r", 97, 275, 0], [1, "r", 97, 276, 0], [1, "r", 97, 277, 0], [1, "r", 97, 278, 0], [1, "r", 98, 270, 0], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [1, "r", 98, 273, 0], [1, "r", 98, 274, 0], [1, "r", 98, 275, 0], [1, "r", 98, 276, 0], [1, "r", 98, 277, 0], [1, "r", 98, 278, 0], [1, "r", 96, 283, 0], [1, "r", 97, 283, 0], [1, "r", 97, 284, 0], [1, "r", 97, 285, 0], [1, "r", 98, 283, 0], [1, "r", 98, 284, 0], [1, "r", 98, 285, 0], [1, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, 0], [1, "r", 96, 274, 0], [1, "r", 96, 275, 0], [1, "r", 96, 276, 0], [1, "r", 96, 277, 0], [1, "r", 96, 278, 0], [1, "r", 44, 248, 0], [1, "de", 16, 94, 290, 0], [1, "de", 16, 94, 252, 0], [1, "de", 16, 94, 228, 0], [1, "de", 17, 94, 200, 0], [1, "r", 95, 282, 1], [1, "r", 95, 281, 1], [1, "r", 94, 281, 1], [1, "r", 90, 281, 1], [1, "r", 91, 282, 1], [1, "r", 89, 281, 1], [1, "r", 85, 276, 1], [1, "r", 85, 277, 1], [1, "r", 86, 278, 1], [1, "p", 0, 85, 279, 1], [1, "r", 86, 279, 1], [1, "r", 87, 280, 1], [1, "r", 96, 281, 0], [1, "r", 97, 281, 0], [1, "r", 98, 281, 0], [1, "r", 98, 282, 0], [1, "r", 97, 282, 0], [1, "r", 96, 282, 0], [1, "r", 68, 261, 1], [1, "fo", 1, 94, 168, 0], [1, "fo", 2, 94, 151, 0], [1, "fo", 1, 94, 138, 0], [1, "fo", 1, 93, 124, 0], [1, "fo", 1, 94, 129, 0], [1, "fo", 1, 93, 113, 0], [1, "fo", 1, 94, 102, 0], [1, "fo", 1, 94, 93, 0], [1, "fo", 1, 93, 90, 0], [1, "fo", 1, 94, 79, 0], [1, "fo", 1, 94, 76, 0], [1, "fo", 1, 93, 70, 0], [1, "fo", 1, 93, 63, 0], [1, "fo", 1, 94, 53, 0], [1, "fo", 1, 93, 10, 0], [1, "fo", 1, 85, 8, 0], [1, "fo", 1, 94, 12, 0], [1, "fo", 1, 66, 13, 0], [1, "fo", 1, 69, 9, 0], [1, "fo", 2, 68, 14, 0], [1, "fo", 2, 66, 25, 0], [1, "fo", 2, 92, 9, 0], [1, "fo", 2, 94, 14, 0], [1, "fo", 2, 87, 9, 0], [1, "fo", 2, 71, 9, 0], [1, "fo", 2, 90, 12, 0], [1, "fo", 2, 91, 13, 0], [1, "fo", 1, 74, 12, 0], [1, "fo", 2, 72, 12, 0], [1, "fo", 2, 75, 13, 0], [1, "fo", 2, 74, 15, 0], [1, "fo", 2, 84, 12, 0], [1, "fo", 2, 81, 14, 0], [1, "fo", 1, 84, 13, 0], [1, "fo", 1, 84, 19, 0], [1, "fo", 1, 11, 9, 0], [1, "fo", 1, 7, 14, 0], [1, "fo", 1, 8, 22, 0], [1, "fo", 1, 7, 34, 0], [1, "fo", 1, 12, 24, 0], [1, "fo", 2, 8, 24, 0], [1, "fo", 2, 9, 21, 0], [1, "fo", 2, 31, 10, 0], [1, "fo", 2, 33, 27, 0], [1, "fo", 2, 9, 34, 0], [1, "fo", 2, 8, 19, 0], [1, "fo", 1, 14, 10, 0], [1, "fo", 2, 13, 9, 0], [1, "fo", 2, 15, 11, 0], [1, "fo", 2, 9, 9, 0], [1, "fo", 2, 9, 10, 0], [1, "fo", 2, 9, 15, 0], [1, "fo", 2, 10, 23, 0], [1, "fo", 2, 34, 29, 0], [1, "fo", 2, 27, 18, 0], [1, "fo", 2, 25, 21, 0], [1, "fo", 2, 20, 18, 0], [1, "fo", 2, 18, 21, 0], [1, "fo", 2, 29, 9, 0], [1, "fo", 2, 13, 14, 0], [1, "fo", 2, 9, 38, 0], [1, "fo", 2, 21, 39, 0], [1, "fo", 2, 84, 26, 0], [1, "fo", 2, 77, 25, 0], [1, "fo", 2, 86, 35, 0], [1, "fo", 1, 70, 35, 0], [1, "fo", 2, 72, 36, 0], [1, "fo", 2, 73, 31, 0], [1, "fo", 2, 89, 39, 0], [1, "fo", 2, 65, 40, 0], [1, "fo", 2, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [1, "de", 22, 25, 266, 0], [1, "de", 22, 17, 206, 0], [1, "de", 19, 8, 184, 0], [1, "de", 19, 22, 183, 0], [1, "de", 19, 35, 188, 0], [1, "de", 19, 36, 192, 0], [1, "de", 19, 50, 277, 0], [1, "de", 19, 35, 279, 0], [1, "t", 4, 7, 178, 0], [1, "t", 1, 7, 179, 0], [1, "t", 3, 7, 180, 0], [1, "t", 2, 7, 181, 0], [1, "t", 5, 7, 182, 0], [1, "t", 4, 7, 183, 0], [1, "t", 3, 7, 184, 0], [1, "t", 4, 7, 185, 0], [1, "t", 2, 7, 186, 0], [1, "t", 1, 7, 187, 0], [1, "t", 4, 7, 188, 0], [1, "t", 3, 7, 189, 0], [1, "t", 5, 7, 190, 0], [1, "t", 1, 7, 191, 0], [1, "t", 3, 7, 192, 0], [1, "t", 4, 7, 193, 0], [1, "t", 3, 7, 194, 0], [1, "t", 5, 7, 195, 0], [1, "t", 2, 7, 196, 0], [1, "t", 4, 7, 197, 0], [1, "b", 2, 7, 198, 0], [1, "t", 4, 7, 199, 0], [1, "t", 2, 7, 200, 0], [1, "t", 5, 7, 201, 0], [1, "t", 2, 7, 202, 0], [1, "t", 4, 7, 203, 0], [1, "t", 2, 7, 204, 0], [1, "t", 5, 7, 205, 0], [1, "t", 2, 7, 206, 0], [1, "t", 1, 7, 207, 0], [1, "t", 4, 7, 208, 0], [1, "t", 3, 7, 209, 0], [1, "t", 1, 7, 210, 0], [1, "b", 0, 7, 211, 0], [1, "t", 3, 7, 212, 0], [1, "t", 4, 7, 213, 0], [1, "t", 3, 7, 214, 0], [1, "t", 5, 7, 215, 0], [1, "t", 5, 7, 216, 0], [1, "t", 3, 7, 217, 0], [1, "t", 1, 7, 218, 0], [1, "t", 4, 7, 219, 0], [1, "b", 2, 7, 220, 0], [1, "t", 1, 7, 221, 0], [1, "t", 2, 7, 222, 0], [1, "t", 4, 7, 223, 0], [1, "t", 3, 7, 224, 0], [1, "t", 1, 7, 225, 0], [1, "t", 4, 7, 226, 0], [1, "t", 2, 7, 227, 0], [1, "t", 5, 7, 228, 0], [1, "t", 3, 7, 229, 0], [1, "t", 1, 7, 230, 0], [1, "t", 4, 7, 231, 0], [1, "b", 2, 7, 232, 0], [1, "t", 5, 7, 233, 0], [1, "t", 1, 7, 234, 0], [1, "t", 3, 7, 235, 0], [1, "t", 4, 7, 236, 0], [1, "t", 2, 7, 237, 0], [1, "t", 5, 7, 238, 0], [1, "b", 3, 7, 239, 0], [1, "t", 2, 7, 240, 0], [1, "t", 1, 7, 241, 0], [1, "t", 2, 7, 242, 0], [1, "t", 4, 7, 243, 0], [1, "t", 3, 7, 244, 0], [1, "t", 4, 7, 245, 0], [1, "t", 1, 7, 246, 0], [1, "b", 0, 7, 247, 0], [1, "t", 3, 7, 248, 0], [1, "t", 5, 7, 249, 0], [1, "t", 2, 7, 250, 0], [1, "t", 1, 7, 251, 0], [1, "t", 4, 7, 252, 0], [1, "t", 3, 7, 253, 0], [1, "t", 5, 7, 254, 0], [1, "t", 1, 7, 255, 0], [1, "t", 4, 7, 256, 0], [1, "t", 1, 7, 257, 0], [1, "t", 2, 7, 258, 0], [1, "t", 5, 7, 260, 0], [1, "t", 3, 7, 259, 0], [1, "t", 1, 7, 261, 0], [1, "t", 3, 7, 262, 0], [1, "t", 4, 7, 263, 0], [1, "t", 1, 7, 264, 0], [1, "t", 2, 7, 265, 0], [1, "t", 5, 7, 266, 0], [1, "t", 2, 7, 267, 0], [1, "t", 2, 7, 269, 0], [1, "b", 2, 7, 268, 0], [1, "t", 4, 7, 270, 0], [1, "t", 1, 7, 271, 0], [1, "t", 5, 7, 272, 0], [1, "b", 2, 7, 273, 0], [1, "t", 4, 7, 274, 0], [1, "t", 2, 7, 275, 0], [1, "t", 5, 7, 276, 0], [1, "t", 5, 7, 277, 0], [1, "t", 2, 7, 278, 0], [1, "t", 1, 7, 279, 0], [1, "t", 4, 7, 280, 0], [1, "b", 1, 7, 281, 0], [1, "t", 3, 7, 282, 0], [1, "t", 4, 7, 283, 0], [1, "t", 1, 7, 284, 0], [1, "t", 3, 7, 285, 0], [1, "t", 5, 7, 286, 0], [1, "t", 4, 7, 288, 0], [1, "t", 2, 7, 287, 0], [1, "b", 0, 7, 289, 0], [1, "t", 4, 7, 290, 0], [1, "t", 2, 7, 291, 0], [1, "t", 5, 7, 292, 0], [1, "t", 3, 7, 293, 0], [1, "t", 1, 7, 294, 0], [1, "t", 4, 7, 295, 0], [1, "t", 3, 7, 296, 0], [1, "t", 1, 7, 297, 0], [1, "t", 4, 7, 298, 0], [1, "t", 2, 7, 299, 0], [1, "b", 0, 7, 300, 0], [1, "t", 2, 7, 301, 0], [1, "r", 196, 271, 0], [1, "r", 199, 274, 0], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [1, "r", 189, 207, 0], [1, "r", 192, 209, 0], [1, "r", 198, 271, 0], [1, "r", 197, 271, 0], [1, "r", 198, 272, 0], [1, "r", 197, 272, 0], [1, "r", 196, 272, 0], [1, "r", 195, 272, 0], [1, "r", 199, 272, 0], [1, "r", 199, 273, 0], [1, "r", 198, 273, 0], [1, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [1, "r", 197, 274, 0], [1, "r", 195, 273, 0], [1, "r", 196, 274, 0], [1, "r", 198, 275, 0], [1, "r", 197, 275, 0], [1, "r", 200, 274, 0], [1, "r", 200, 273, 0], [1, "r", 199, 275, 0], [1, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, 0], [1, "plm", 0, 199, 268, 0], [1, "plm", 0, 193, 277, 0], [1, "plm", 1, 199, 276, 0], [1, "s", 1, 200, 275, 1], [1, "s", 1, 194, 272, 1], [1, "s", 2, 193, 270, 1], [1, "g", 2, 193, 273, 1], [1, "g", 2, 201, 267, 1], [1, "m", 2, 220, 298, 1], [1, "m", 1, 219, 292, 1], [1, "m", 1, 214, 297, 1], [1, "r", 168, 238, 0], [1, "r", 169, 238, 0], [1, "r", 170, 238, 0], [1, "r", 171, 239, 0], [1, "r", 170, 239, 0], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, 0], [1, "r", 166, 239, 0], [1, "r", 166, 240, 0], [1, "r", 167, 240, 0], [1, "r", 168, 240, 0], [1, "r", 169, 240, 0], [1, "r", 170, 240, 0], [1, "r", 168, 241, 0], [1, "r", 169, 241, 0], [1, "r", 170, 241, 0], [1, "r", 171, 241, 0], [1, "plm", 2, 171, 238, 0], [1, "plm", 1, 166, 238, 0], [1, "plm", 0, 167, 237, 0], [1, "plm", 0, 171, 242, 0], [1, "plm", 0, 165, 243, 0], [1, "plm", 0, 171, 235, 0], [1, "plm", 0, 174, 241, 0], [1, "s", 1, 165, 239, 1], [1, "s", 1, 172, 241, 1], [1, "s", 0, 170, 237, 1], [1, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", 2, 162, 241, 1], [1, "s", 2, 170, 246, 1], [1, "s", 2, 167, 235, 1], [1, "s", 2, 176, 243, 1], [1, "r", 190, 207, 0], [1, "r", 191, 207, 0], [1, "r", 192, 208, 0], [1, "r", 191, 208, 0], [1, "r", 190, 208, 0], [1, "r", 189, 208, 0], [1, "r", 188, 208, 0], [1, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [1, "r", 188, 209, 0], [1, "r", 190, 210, 0], [1, "r", 191, 210, 0], [1, "r", 192, 210, 0], [1, "plm", 2, 189, 210, 0], [1, "plm", 2, 192, 205, 0], [1, "plm", 1, 192, 207, 0], [1, "plm", 0, 193, 210, 0], [1, "plm", 0, 187, 208, 0], [1, "plm", 0, 197, 206, 0], [1, "plm", 0, 191, 213, 0], [1, "plm", 0, 190, 204, 0], [1, "s", 1, 188, 207, 1], [1, "s", 1, 190, 211, 1], [1, "s", 2, 188, 213, 1], [1, "s", 2, 187, 205, 1], [1, "s", 0, 194, 210, 1], [1, "s", 0, 198, 207, 1], [1, "s", 1, 193, 204, 1], [1, "s", 1, 193, 213, 1], [1, "s", 2, 198, 212, 1], [1, "s", 2, 182, 208, 1], [1, "s", 1, 204, 271, 1], [1, "s", 0, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", 0, 195, 265, 1], [1, "s", 2, 196, 264, 1], [1, "s", 2, 186, 274, 1], [1, "s", 2, 197, 280, 1], [1, "s", 0, 217, 282, 1], [1, "s", 1, 214, 285, 1], [1, "s", 1, 214, 274, 1], [1, "s", 1, 203, 282, 1], [1, "s", 1, 205, 290, 1], [1, "s", 0, 207, 292, 1], [1, "s", 0, 197, 297, 1], [1, "s", 0, 184, 287, 1], [1, "s", 2, 213, 289, 1], [1, "s", 2, 196, 294, 1], [1, "s", 2, 187, 286, 1], [1, "s", 1, 192, 289, 1], [1, "s", 1, 189, 299, 1], [1, "s", 0, 213, 273, 1], [1, "g", 2, 212, 278, 1], [1, "g", 1, 200, 288, 1], [1, "g", 2, 215, 265, 1], [1, "g", 2, 183, 281, 1], [1, "s", 0, 178, 295, 1], [1, "s", 0, 167, 281, 1], [1, "s", 0, 175, 263, 1], [1, "s", 1, 176, 293, 1], [1, "s", 1, 163, 285, 1], [1, "s", 1, 177, 266, 1], [1, "s", 1, 161, 272, 1], [1, "s", 2, 185, 261, 1], [1, "c", 0, 217, 270, 1], [1, "c", 0, 220, 278, 1], [1, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, 1], [1, "c", 0, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, 1], [1, "c", 0, 208, 283, 1], [1, "c", 0, 197, 283, 1], [1, "c", 0, 190, 289, 1], [1, "c", 0, 183, 296, 1], [1, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, 1], [1, "c", 0, 208, 265, 1], [1, "c", 0, 169, 292, 1], [1, "s", 1, 158, 294, 1], [1, "s", 0, 151, 297, 1], [1, "s", 0, 147, 288, 1], [1, "c", 0, 150, 289, 1], [1, "c", 0, 160, 282, 1], [1, "c", 0, 146, 274, 1], [1, "c", 0, 167, 264, 1], [1, "c", 0, 165, 267, 1], [1, "g", 0, 189, 257, 1], [1, "g", 1, 197, 248, 1], [1, "g", 2, 170, 255, 1], [1, "g", 2, 212, 234, 1], [1, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, 1], [1, "g", 1, 210, 214, 1], [1, "s", 1, 153, 257, 1], [1, "s", 0, 158, 255, 1], [1, "s", 0, 184, 248, 1], [1, "s", 0, 212, 254, 1], [1, "s", 1, 203, 249, 1], [1, "s", 2, 204, 252, 1], [1, "s", 2, 187, 248, 1], [1, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, 1], [1, "s", 0, 181, 228, 1], [1, "s", 1, 199, 227, 1], [1, "s", 1, 208, 238, 1], [1, "s", 1, 179, 222, 1], [1, "s", 1, 213, 223, 1], [1, "s", 2, 182, 222, 1], [1, "s", 2, 211, 226, 1], [1, "s", 2, 214, 214, 1], [1, "s", 2, 201, 216, 1], [1, "s", 2, 215, 192, 1], [1, "s", 1, 210, 198, 1], [1, "s", 1, 198, 196, 1], [1, "s", 2, 208, 199, 1], [1, "s", 2, 187, 192, 1], [1, "s", 1, 179, 198, 1], [1, "s", 2, 177, 197, 1], [1, "s", 0, 164, 197, 1], [1, "s", 1, 159, 193, 1], [1, "s", 1, 149, 206, 1], [1, "s", 1, 164, 209, 1], [1, "s", 2, 165, 210, 1], [1, "s", 2, 161, 191, 1], [1, "s", 1, 162, 224, 1], [1, "s", 0, 150, 236, 1], [1, "s", 1, 149, 239, 1], [1, "s", 2, 153, 236, 1], [1, "s", 2, 160, 223, 1], [1, "s", 2, 151, 207, 1], [1, "s", 2, 147, 220, 1], [1, "s", 2, 145, 265, 1], [1, "s", 2, 145, 285, 1], [1, "c", 0, 152, 266, 1], [1, "c", 0, 185, 271, 1], [1, "c", 0, 210, 254, 1], [1, "c", 0, 209, 256, 1], [1, "c", 0, 198, 254, 1], [1, "c", 0, 213, 246, 1], [1, "c", 0, 216, 237, 1], [1, "c", 0, 204, 240, 1], [1, "c", 0, 196, 234, 1], [1, "c", 0, 188, 238, 1], [1, "c", 0, 182, 245, 1], [1, "c", 0, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", 0, 158, 233, 1], [1, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", 0, 157, 214, 1], [1, "c", 0, 167, 219, 1], [1, "c", 0, 171, 208, 1], [1, "c", 0, 179, 219, 1], [1, "c", 0, 176, 229, 1], [1, "c", 0, 195, 221, 1], [1, "c", 0, 207, 222, 1], [1, "c", 0, 214, 207, 1], [1, "c", 0, 205, 210, 1], [1, "c", 0, 204, 196, 1], [1, "c", 0, 214, 196, 1], [1, "c", 0, 190, 199, 1], [1, "c", 0, 184, 194, 1], [1, "c", 0, 172, 199, 1], [1, "c", 0, 161, 204, 1], [1, "c", 0, 157, 196, 1], [1, "c", 0, 149, 194, 1], [1, "c", 0, 147, 208, 1], [1, "c", 0, 207, 274, 1], [1, "c", 0, 217, 258, 1], [1, "c", 0, 201, 260, 1], [1, "c", 0, 178, 276, 1], [1, "c", 0, 187, 265, 1], [1, "s", 1, 204, 260, 1], [1, "s", 1, 216, 260, 1], [1, "s", 1, 187, 255, 1], [1, "s", 2, 189, 254, 1], [1, "s", 2, 212, 257, 1], [1, "s", 2, 182, 286, 1], [1, "s", 2, 169, 280, 1], [1, "s", 2, 217, 273, 1], [1, "s", 2, 215, 282, 1], [1, "s", 2, 172, 263, 1], [1, "s", 2, 176, 267, 1], [1, "s", 2, 215, 251, 1], [1, "fod", 1, 221, 282, 0], [1, "fod", 1, 222, 284, 0], [1, "fod", 1, 221, 290, 0], [1, "fod", 1, 222, 294, 0], [1, "fod", 1, 221, 297, 0], [1, "fod", 1, 223, 298, 0], [1, "fod", 1, 222, 300, 0], [1, "fod", 1, 218, 301, 0], [1, "fod", 1, 217, 299, 0], [1, "fod", 1, 215, 301, 0], [1, "fod", 1, 212, 300, 0], [1, "fod", 1, 206, 300, 0], [1, "fod", 1, 209, 301, 0], [1, "fod", 1, 204, 299, 0], [1, "fod", 1, 202, 301, 0], [1, "fod", 1, 199, 301, 0], [1, "fod", 1, 222, 282, 0], [1, "fod", 1, 207, 301, 0], [1, "fod", 1, 197, 301, 0], [1, "fod", 1, 215, 291, 0], [1, "fod", 1, 216, 286, 0], [1, "fod", 1, 214, 292, 0], [1, "fod", 1, 210, 289, 0], [1, "fod", 1, 208, 294, 0], [1, "fod", 1, 210, 298, 0], [1, "fod", 1, 212, 281, 0], [1, "fod", 1, 219, 278, 0], [1, "fod", 1, 219, 282, 0], [1, "fod", 1, 205, 286, 0], [1, "fod", 1, 202, 293, 0], [1, "fod", 1, 198, 295, 0], [1, "fod", 2, 213, 282, 0], [1, "fod", 2, 213, 291, 0], [1, "fod", 2, 216, 289, 0], [1, "fod", 2, 219, 289, 0], [1, "fod", 2, 218, 285, 0], [1, "fod", 2, 220, 283, 0], [1, "fod", 2, 211, 283, 0], [1, "fod", 2, 215, 281, 0], [1, "fod", 2, 217, 279, 0], [1, "fod", 2, 208, 290, 0], [1, "fod", 2, 211, 296, 0], [1, "fod", 2, 215, 294, 0], [1, "fod", 2, 212, 298, 0], [1, "fod", 2, 203, 294, 0], [1, "fod", 2, 204, 288, 0], [1, "fod", 2, 200, 294, 0], [1, "fod", 2, 198, 297, 0], [1, "fod", 2, 202, 299, 0], [1, "fod", 2, 200, 299, 0], [1, "fod", 2, 220, 300, 0], [1, "fod", 2, 220, 295, 0], [1, "fod", 2, 220, 292, 0], [1, "fod", 2, 219, 287, 0], [1, "fod", 2, 211, 288, 0], [1, "fod", 2, 213, 287, 0], [1, "fod", 2, 211, 289, 0], [1, "fod", 2, 212, 290, 0], [1, "fod", 2, 195, 296, 0], [1, "fod", 2, 196, 299, 0], [1, "fod", 2, 194, 300, 0], [1, "fod", 2, 195, 300, 0], [1, "fod", 2, 213, 279, 0], [1, "fod", 2, 211, 279, 0], [1, "fod", 0, 218, 290, 0], [1, "fod", 0, 212, 294, 0], [1, "fod", 1, 213, 295, 0], [1, "fod", 1, 217, 292, 0], [1, "fod", 1, 218, 288, 0], [1, "fod", 1, 210, 295, 0], [1, "fod", 1, 213, 292, 0], [1, "fod", 1, 212, 289, 0], [1, "fod", 1, 205, 295, 0], [1, "fod", 2, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, 0], [1, "fod", 2, 209, 299, 0], [1, "fod", 2, 211, 291, 0], [1, "fod", 1, 203, 275, 0], [1, "fod", 1, 204, 272, 0], [1, "fod", 2, 205, 273, 0], [1, "fod", 2, 204, 276, 0], [1, "fod", 2, 202, 276, 0], [1, "fod", 2, 199, 277, 0], [1, "fod", 2, 202, 273, 0], [1, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [1, "fod", 2, 194, 277, 0], [1, "fod", 1, 192, 274, 0], [1, "fod", 1, 194, 267, 0], [1, "fod", 2, 194, 265, 0], [1, "fod", 2, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [1, "fod", 2, 195, 274, 0], [1, "fod", 2, 200, 271, 0], [1, "fod", 1, 168, 243, 0], [1, "fod", 1, 175, 240, 0], [1, "fod", 1, 169, 234, 0], [1, "fod", 1, 162, 235, 0], [1, "fod", 2, 169, 236, 0], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, 0], [1, "fod", 2, 173, 241, 0], [1, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, 0], [1, "fod", 2, 169, 244, 0], [1, "fod", 2, 166, 243, 0], [1, "fod", 2, 162, 236, 0], [1, "fod", 2, 164, 235, 0], [1, "fod", 2, 162, 233, 0], [1, "fod", 2, 163, 236, 0], [1, "fod", 2, 174, 242, 0], [1, "fod", 2, 171, 243, 0], [1, "fod", 1, 194, 206, 0], [1, "fod", 1, 190, 214, 0], [1, "fod", 1, 186, 206, 0], [1, "fod", 1, 197, 207, 0], [1, "fod", 2, 196, 208, 0], [1, "fod", 2, 198, 206, 0], [1, "fod", 2, 198, 208, 0], [1, "fod", 2, 194, 204, 0], [1, "fod", 2, 187, 206, 0], [1, "fod", 2, 186, 204, 0], [1, "fod", 2, 189, 214, 0], [1, "fod", 2, 189, 213, 0], [1, "fod", 2, 193, 215, 0], [1, "fod", 2, 194, 214, 0], [1, "fod", 2, 187, 215, 0], [1, "fod", 2, 193, 209, 0], [1, "fod", 2, 189, 211, 0], [1, "fod", 2, 187, 209, 0], [1, "fod", 2, 187, 207, 0], [1, "fod", 2, 191, 205, 0], [1, "fod", 2, 189, 203, 0], [1, "cs", 2, 224, 176, 1], [1, "cs", 0, 224, 177, 1], [1, "cs", 3, 224, 178, 1], [1, "cs", 2, 224, 179, 1], [1, "cs", 1, 224, 180, 1], [1, "cs", 2, 224, 181, 1], [1, "cs", 0, 224, 182, 1], [1, "cs", 2, 224, 183, 1], [1, "cs", 0, 224, 184, 1], [1, "cs", 3, 224, 185, 1], [1, "cs", 2, 224, 186, 1], [1, "cs", 0, 224, 187, 1], [1, "cs", 2, 224, 188, 1], [1, "cs", 0, 224, 189, 1], [1, "cs", 1, 224, 190, 1], [1, "cs", 2, 224, 191, 1], [1, "cs", 0, 224, 192, 1], [1, "cs", 2, 224, 193, 1], [1, "cs", 2, 224, 194, 1], [1, "cs", 1, 224, 195, 1], [1, "cs", 2, 224, 196, 1], [1, "cs", 0, 224, 197, 1], [1, "cs", 3, 224, 198, 1], [1, "cs", 2, 224, 199, 1], [1, "cs", 1, 224, 200, 1], [1, "cs", 2, 224, 201, 1], [1, "cs", 3, 224, 202, 1], [1, "cs", 0, 224, 203, 1], [1, "cs", 1, 224, 204, 1], [1, "cs", 2, 224, 205, 1], [1, "cs", 0, 224, 206, 1], [1, "cs", 1, 224, 207, 1], [1, "cs", 3, 224, 208, 1], [1, "cs", 2, 224, 209, 1], [1, "cs", 2, 224, 210, 1], [1, "cs", 0, 223, 211, 1], [1, "cs", 1, 224, 211, 1], [1, "cs", 2, 224, 212, 1], [1, "cs", 2, 224, 213, 1], [1, "cs", 1, 224, 214, 1], [1, "cs", 3, 224, 215, 1], [1, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, 1], [1, "cs", 2, 224, 218, 1], [1, "cs", 3, 224, 219, 1], [1, "cs", 0, 223, 215, 1], [1, "cs", 2, 223, 214, 1], [1, "cs", 2, 223, 212, 1], [1, "cs", 2, 223, 216, 1], [1, "cs", 3, 223, 217, 1], [1, "cs", 0, 223, 218, 1], [1, "cs", 0, 224, 220, 1], [1, "cs", 0, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [1, "cs", 0, 223, 205, 1], [1, "cs", 2, 224, 221, 1], [1, "cs", 2, 223, 219, 1], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [1, "cs", 2, 223, 210, 1], [1, "cs", 1, 223, 178, 1], [1, "cs", 3, 223, 179, 1], [1, "cs", 3, 223, 181, 1], [1, "cs", 3, 223, 182, 1], [1, "cs", 1, 223, 185, 1], [1, "cs", 2, 223, 184, 1], [1, "cs", 2, 223, 186, 1], [1, "cs", 0, 223, 180, 1], [1, "cs", 0, 223, 183, 1], [1, "cs", 2, 223, 187, 1], [1, "cs", 1, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [1, "cs", 2, 223, 190, 1], [1, "cs", 3, 223, 191, 1], [1, "cs", 1, 223, 192, 1], [1, "cs", 2, 223, 193, 1], [1, "cs", 2, 223, 194, 1], [1, "cs", 3, 223, 195, 1], [1, "cs", 1, 223, 196, 1], [1, "cs", 2, 223, 197, 1], [1, "cs", 2, 223, 199, 1], [1, "cs", 2, 223, 198, 1], [1, "cs", 0, 223, 200, 1], [1, "cs", 2, 223, 201, 1], [1, "cs", 0, 223, 202, 1], [1, "cs", 3, 223, 203, 1], [1, "cs", 3, 223, 204, 1], [1, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, 1], [1, "cs", 3, 223, 208, 1], [1, "cs", 2, 223, 221, 1], [1, "cs", 2, 223, 222, 1], [1, "cs", 0, 223, 224, 1], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, 1], [1, "cs", 0, 223, 234, 1], [1, "cs", 2, 223, 223, 1], [1, "cs", 2, 224, 223, 1], [1, "cs", 2, 224, 224, 1], [1, "cs", 2, 224, 225, 1], [1, "cs", 1, 223, 226, 1], [1, "cs", 1, 224, 231, 1], [1, "cs", 1, 223, 232, 1], [1, "cs", 3, 223, 225, 1], [1, "cs", 3, 224, 226, 1], [1, "cs", 3, 223, 227, 1], [1, "cs", 3, 224, 227, 1], [1, "cs", 3, 223, 229, 1], [1, "cs", 3, 223, 228, 1], [1, "cs", 3, 224, 229, 1], [1, "cs", 3, 223, 230, 1], [1, "cs", 3, 223, 231, 1], [1, "cs", 3, 224, 232, 1], [1, "cs", 3, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [1, "cs", 3, 224, 234, 1], [1, "cs", 3, 224, 235, 1], [1, "cs", 3, 223, 235, 1], [1, "cs", 1, 224, 236, 1], [1, "cs", 2, 223, 236, 1], [1, "cs", 2, 223, 237, 1], [1, "cs", 3, 224, 237, 1], [1, "cs", 3, 224, 238, 1], [1, "cs", 0, 224, 239, 1], [1, "cs", 1, 223, 241, 1], [1, "cs", 0, 224, 243, 1], [1, "cs", 0, 223, 245, 1], [1, "cs", 0, 224, 247, 1], [1, "cs", 2, 223, 240, 1], [1, "cs", 2, 223, 239, 1], [1, "cs", 2, 224, 240, 1], [1, "cs", 2, 224, 241, 1], [1, "cs", 2, 224, 242, 1], [1, "cs", 2, 223, 242, 1], [1, "cs", 2, 223, 243, 1], [1, "cs", 2, 223, 244, 1], [1, "cs", 2, 224, 244, 1], [1, "cs", 2, 224, 245, 1], [1, "cs", 2, 224, 246, 1], [1, "cs", 3, 223, 238, 1], [1, "cs", 3, 223, 246, 1], [1, "cs", 2, 223, 247, 1], [1, "cs", 1, 223, 249, 1], [1, "cs", 1, 224, 253, 1], [1, "cs", 1, 223, 256, 1], [1, "cs", 0, 223, 254, 1], [1, "cs", 0, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [1, "cs", 3, 223, 250, 1], [1, "cs", 3, 223, 252, 1], [1, "cs", 3, 223, 255, 1], [1, "cs", 3, 223, 257, 1], [1, "cs", 2, 224, 248, 1], [1, "cs", 2, 224, 249, 1], [1, "cs", 2, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [1, "cs", 2, 224, 252, 1], [1, "cs", 2, 223, 253, 1], [1, "cs", 2, 224, 254, 1], [1, "cs", 2, 224, 255, 1], [1, "cs", 2, 224, 256, 1], [1, "cs", 2, 224, 257, 1], [1, "cs", 0, 224, 258, 1], [1, "cs", 0, 223, 261, 1], [1, "cs", 0, 224, 263, 1], [1, "cs", 0, 224, 266, 1], [1, "cs", 0, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [1, "cs", 0, 223, 275, 1], [1, "cs", 1, 223, 259, 1], [1, "cs", 1, 223, 264, 1], [1, "cs", 1, 223, 268, 1], [1, "cs", 1, 224, 274, 1], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, 1], [1, "cs", 2, 223, 263, 1], [1, "cs", 2, 223, 265, 1], [1, "cs", 2, 223, 267, 1], [1, "cs", 2, 223, 271, 1], [1, "cs", 2, 223, 273, 1], [1, "cs", 3, 223, 262, 1], [1, "cs", 3, 223, 266, 1], [1, "cs", 3, 223, 269, 1], [1, "cs", 3, 223, 272, 1], [1, "cs", 3, 223, 274, 1], [1, "cs", 3, 224, 275, 1], [1, "cs", 3, 224, 273, 1], [1, "cs", 3, 224, 271, 1], [1, "cs", 3, 224, 270, 1], [1, "cs", 3, 224, 269, 1], [1, "cs", 3, 224, 268, 1], [1, "cs", 3, 224, 267, 1], [1, "cs", 3, 224, 265, 1], [1, "cs", 3, 224, 264, 1], [1, "cs", 3, 224, 262, 1], [1, "cs", 3, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [1, "cs", 3, 224, 259, 1], [1, "cs", 2, 223, 276, 1], [1, "cs", 1, 224, 276, 1], [1, "cs", 1, 224, 280, 1], [1, "cs", 1, 223, 281, 1], [1, "cs", 1, 224, 286, 1], [1, "cs", 0, 223, 280, 1], [1, "cs", 0, 223, 284, 1], [1, "cs", 0, 224, 288, 1], [1, "cs", 0, 224, 279, 1], [1, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, 1], [1, "cs", 2, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [1, "cs", 2, 224, 282, 1], [1, "cs", 2, 224, 284, 1], [1, "cs", 2, 224, 285, 1], [1, "cs", 2, 224, 287, 1], [1, "cs", 2, 223, 287, 1], [1, "cs", 2, 223, 285, 1], [1, "cs", 2, 223, 283, 1], [1, "cs", 2, 223, 279, 1], [1, "cs", 3, 223, 278, 1], [1, "cs", 3, 223, 282, 1], [1, "cs", 3, 223, 286, 1], [1, "cs", 3, 223, 289, 1], [1, "cs", 3, 224, 289, 1], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [1, "cs", 1, 223, 290, 1], [1, "cs", 0, 224, 292, 1], [1, "cs", 0, 223, 294, 1], [1, "cs", 0, 224, 297, 1], [1, "cs", 0, 223, 299, 1], [1, "cs", 2, 223, 291, 1], [1, "cs", 2, 224, 291, 1], [1, "cs", 2, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [1, "cs", 2, 224, 293, 1], [1, "cs", 2, 224, 294, 1], [1, "cs", 1, 224, 295, 1], [1, "cs", 2, 223, 295, 1], [1, "cs", 2, 223, 296, 1], [1, "cs", 2, 224, 296, 1], [1, "cs", 2, 223, 297, 1], [1, "cs", 2, 223, 298, 1], [1, "cs", 2, 224, 298, 1], [1, "cs", 2, 224, 299, 1], [1, "cs", 2, 223, 300, 1], [1, "cs", 1, 224, 300, 1], [1, "cs", 0, 223, 301, 1], [1, "cs", 0, 224, 302, 1], [1, "cs", 0, 224, 304, 1], [1, "cs", 3, 224, 301, 1], [1, "cs", 3, 224, 303, 1], [1, "cs", 0, 221, 303, 1], [1, "cs", 0, 219, 304, 1], [1, "cs", 1, 222, 304, 1], [1, "cs", 1, 222, 302, 1], [1, "cs", 2, 223, 302, 1], [1, "cs", 2, 223, 303, 1], [1, "cs", 2, 222, 303, 1], [1, "cs", 2, 223, 304, 1], [1, "cs", 2, 221, 304, 1], [1, "cs", 2, 220, 304, 1], [1, "cs", 2, 220, 303, 1], [1, "cs", 2, 220, 302, 1], [1, "cs", 2, 221, 302, 1], [1, "cs", 2, 219, 303, 1], [1, "cs", 0, 217, 302, 1], [1, "cs", 0, 215, 304, 1], [1, "cs", 0, 214, 302, 1], [1, "cs", 1, 218, 302, 1], [1, "cs", 1, 217, 304, 1], [1, "cs", 1, 215, 302, 1], [1, "cs", 2, 219, 302, 1], [1, "cs", 2, 218, 303, 1], [1, "cs", 2, 218, 304, 1], [1, "cs", 2, 217, 303, 1], [1, "cs", 2, 216, 304, 1], [1, "cs", 2, 215, 303, 1], [1, "cs", 2, 216, 303, 1], [1, "cs", 2, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [1, "cs", 2, 214, 304, 1], [1, "cs", 0, 212, 302, 1], [1, "cs", 0, 210, 303, 1], [1, "cs", 0, 212, 304, 1], [1, "cs", 0, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [1, "cs", 1, 208, 303, 1], [1, "cs", 2, 213, 302, 1], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, 1], [1, "cs", 2, 212, 303, 1], [1, "cs", 2, 211, 304, 1], [1, "cs", 2, 211, 303, 1], [1, "cs", 2, 211, 302, 1], [1, "cs", 2, 209, 302, 1], [1, "cs", 2, 209, 303, 1], [1, "cs", 2, 209, 304, 1], [1, "cs", 2, 210, 304, 1], [1, "cs", 2, 208, 302, 1], [1, "cs", 0, 206, 303, 1], [1, "cs", 0, 203, 304, 1], [1, "cs", 0, 200, 303, 1], [1, "cs", 0, 199, 304, 1], [1, "cs", 0, 195, 304, 1], [1, "cs", 0, 191, 303, 1], [1, "cs", 0, 193, 304, 1], [1, "cs", 0, 189, 304, 1], [1, "cs", 1, 204, 303, 1], [1, "cs", 0, 197, 302, 1], [1, "cs", 0, 202, 302, 1], [1, "cs", 0, 188, 302, 1], [1, "cs", 0, 194, 302, 1], [1, "cs", 1, 197, 303, 1], [1, "cs", 1, 201, 304, 1], [1, "cs", 1, 192, 302, 1], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [1, "cs", 1, 188, 304, 1], [1, "cs", 2, 207, 302, 1], [1, "cs", 2, 207, 303, 1], [1, "cs", 2, 207, 304, 1], [1, "cs", 2, 206, 304, 1], [1, "cs", 2, 206, 302, 1], [1, "cs", 2, 205, 303, 1], [1, "cs", 2, 204, 304, 1], [1, "cs", 2, 205, 304, 1], [1, "cs", 2, 204, 302, 1], [1, "cs", 2, 203, 302, 1], [1, "cs", 2, 203, 303, 1], [1, "cs", 2, 202, 303, 1], [1, "cs", 2, 201, 303, 1], [1, "cs", 2, 201, 302, 1], [1, "cs", 2, 200, 302, 1], [1, "cs", 2, 199, 302, 1], [1, "cs", 2, 198, 303, 1], [1, "cs", 2, 198, 302, 1], [1, "cs", 2, 199, 303, 1], [1, "cs", 2, 200, 304, 1], [1, "cs", 2, 202, 304, 1], [1, "cs", 2, 197, 304, 1], [1, "cs", 2, 198, 304, 1], [1, "cs", 2, 196, 304, 1], [1, "cs", 2, 196, 303, 1], [1, "cs", 2, 196, 302, 1], [1, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", 2, 194, 303, 1], [1, "cs", 2, 194, 304, 1], [1, "cs", 2, 193, 303, 1], [1, "cs", 2, 193, 302, 1], [1, "cs", 2, 192, 303, 1], [1, "cs", 2, 192, 304, 1], [1, "cs", 2, 191, 304, 1], [1, "cs", 2, 190, 304, 1], [1, "cs", 2, 190, 303, 1], [1, "cs", 2, 189, 302, 1], [1, "cs", 2, 190, 302, 1], [1, "cs", 2, 191, 302, 1], [1, "cs", 2, 188, 303, 1], [1, "cs", 0, 186, 303, 1], [1, "cs", 0, 183, 304, 1], [1, "cs", 0, 184, 302, 1], [1, "cs", 0, 181, 302, 1], [1, "cs", 0, 176, 302, 1], [1, "cs", 0, 178, 303, 1], [1, "cs", 0, 173, 304, 1], [1, "cs", 0, 170, 303, 1], [1, "cs", 0, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", 1, 178, 304, 1], [1, "cs", 1, 175, 304, 1], [1, "cs", 1, 173, 302, 1], [1, "cs", 1, 185, 304, 1], [1, "cs", 1, 169, 304, 1], [1, "cs", 3, 187, 304, 1], [1, "cs", 3, 186, 304, 1], [1, "cs", 3, 187, 303, 1], [1, "cs", 3, 187, 302, 1], [1, "cs", 3, 186, 302, 1], [1, "cs", 3, 185, 302, 1], [1, "cs", 3, 185, 303, 1], [1, "cs", 3, 184, 303, 1], [1, "cs", 3, 183, 303, 1], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, 1], [1, "cs", 3, 184, 304, 1], [1, "cs", 3, 182, 304, 1], [1, "cs", 3, 181, 304, 1], [1, "cs", 3, 179, 304, 1], [1, "cs", 3, 180, 304, 1], [1, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, 1], [1, "cs", 3, 179, 303, 1], [1, "cs", 3, 180, 302, 1], [1, "cs", 3, 179, 302, 1], [1, "cs", 3, 178, 302, 1], [1, "cs", 3, 177, 302, 1], [1, "cs", 3, 177, 304, 1], [1, "cs", 3, 177, 303, 1], [1, "cs", 3, 176, 303, 1], [1, "cs", 3, 176, 304, 1], [1, "cs", 3, 174, 304, 1], [1, "cs", 3, 175, 303, 1], [1, "cs", 3, 174, 303, 1], [1, "cs", 3, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [1, "cs", 3, 171, 303, 1], [1, "cs", 3, 170, 304, 1], [1, "cs", 3, 171, 304, 1], [1, "cs", 3, 172, 304, 1], [1, "cs", 3, 174, 302, 1], [1, "cs", 3, 175, 302, 1], [1, "cs", 3, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [1, "cs", 3, 169, 302, 1], [1, "cs", 3, 169, 303, 1], [1, "cs", 0, 168, 302, 1], [1, "cs", 0, 166, 303, 1], [1, "cs", 0, 163, 304, 1], [1, "cs", 0, 161, 302, 1], [1, "cs", 0, 159, 303, 1], [1, "cs", 0, 152, 304, 1], [1, "cs", 0, 155, 303, 1], [1, "cs", 1, 164, 303, 1], [1, "cs", 1, 162, 303, 1], [1, "cs", 1, 158, 304, 1], [1, "cs", 1, 156, 302, 1], [1, "cs", 1, 153, 302, 1], [1, "cs", 1, 154, 304, 1], [1, "cs", 2, 168, 304, 1], [1, "cs", 2, 168, 303, 1], [1, "cs", 2, 167, 303, 1], [1, "cs", 2, 167, 304, 1], [1, "cs", 2, 166, 304, 1], [1, "cs", 2, 165, 304, 1], [1, "cs", 2, 164, 304, 1], [1, "cs", 2, 165, 303, 1], [1, "cs", 2, 167, 302, 1], [1, "cs", 2, 166, 302, 1], [1, "cs", 2, 165, 302, 1], [1, "cs", 2, 164, 302, 1], [1, "cs", 2, 163, 302, 1], [1, "cs", 2, 162, 302, 1], [1, "cs", 2, 163, 303, 1], [1, "cs", 2, 162, 304, 1], [1, "cs", 2, 160, 304, 1], [1, "cs", 2, 159, 304, 1], [1, "cs", 2, 161, 304, 1], [1, "cs", 2, 161, 303, 1], [1, "cs", 2, 160, 303, 1], [1, "cs", 2, 160, 302, 1], [1, "cs", 2, 158, 302, 1], [1, "cs", 2, 159, 302, 1], [1, "cs", 2, 157, 302, 1], [1, "cs", 2, 156, 303, 1], [1, "cs", 2, 157, 303, 1], [1, "cs", 2, 158, 303, 1], [1, "cs", 2, 157, 304, 1], [1, "cs", 2, 156, 304, 1], [1, "cs", 2, 155, 304, 1], [1, "cs", 2, 153, 304, 1], [1, "cs", 2, 153, 303, 1], [1, "cs", 2, 154, 303, 1], [1, "cs", 2, 154, 302, 1], [1, "cs", 2, 155, 302, 1], [1, "cs", 2, 152, 303, 1], [1, "cs", 2, 152, 302, 1], [1, "cs", 0, 151, 302, 1], [1, "cs", 0, 149, 303, 1], [1, "cs", 0, 145, 304, 1], [1, "cs", 0, 147, 302, 1], [1, "cs", 0, 143, 303, 1], [1, "cs", 0, 141, 303, 1], [1, "cs", 1, 147, 304, 1], [1, "cs", 1, 145, 302, 1], [1, "cs", 1, 142, 302, 1], [1, "cs", 1, 150, 304, 1], [1, "cs", 2, 151, 304, 1], [1, "cs", 2, 151, 303, 1], [1, "cs", 2, 150, 303, 1], [1, "cs", 2, 150, 302, 1], [1, "cs", 2, 148, 302, 1], [1, "cs", 2, 146, 302, 1], [1, "cs", 2, 144, 302, 1], [1, "cs", 2, 141, 302, 1], [1, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, 1], [1, "cs", 2, 142, 303, 1], [1, "cs", 2, 143, 304, 1], [1, "cs", 2, 144, 304, 1], [1, "cs", 2, 144, 303, 1], [1, "cs", 2, 148, 304, 1], [1, "cs", 2, 148, 303, 1], [1, "cs", 2, 146, 303, 1], [1, "cs", 2, 145, 303, 1], [1, "cs", 2, 147, 303, 1], [1, "cs", 2, 146, 304, 1], [1, "cs", 2, 149, 304, 1], [1, "cs", 3, 149, 302, 1], [1, "cs", 3, 143, 302, 1], [1, "cs", 0, 139, 304, 1], [1, "cs", 0, 138, 302, 1], [1, "cs", 1, 139, 302, 1], [1, "cs", 2, 140, 302, 1], [1, "cs", 2, 140, 303, 1], [1, "cs", 2, 139, 303, 1], [1, "cs", 2, 138, 303, 1], [1, "cs", 2, 138, 304, 1], [1, "cs", 2, 140, 304, 1], [1, "cs", 0, 137, 304, 1], [1, "cs", 0, 135, 303, 1], [1, "cs", 0, 133, 304, 1], [1, "cs", 1, 135, 304, 1], [1, "cs", 1, 136, 302, 1], [1, "cs", 2, 137, 302, 1], [1, "cs", 2, 136, 303, 1], [1, "cs", 2, 137, 303, 1], [1, "cs", 2, 136, 304, 1], [1, "cs", 2, 134, 304, 1], [1, "cs", 2, 134, 303, 1], [1, "cs", 2, 133, 303, 1], [1, "cs", 2, 132, 304, 1], [1, "cs", 0, 131, 302, 1], [1, "cs", 0, 134, 302, 1], [1, "cs", 0, 129, 304, 1], [1, "cs", 1, 130, 303, 1], [1, "cs", 1, 132, 302, 1], [1, "cs", 2, 135, 302, 1], [1, "cs", 2, 133, 302, 1], [1, "cs", 2, 132, 303, 1], [1, "cs", 2, 131, 303, 1], [1, "cs", 2, 130, 304, 1], [1, "cs", 2, 131, 304, 1], [1, "cs", 2, 128, 304, 1], [1, "cs", 2, 129, 303, 1], [1, "cs", 2, 130, 302, 1], [1, "cs", 3, 127, 304, 1], [1, "cs", 2, 132, 301, 1], [1, "cs", 2, 133, 301, 1], [1, "cs", 2, 134, 301, 1], [1, "cs", 2, 135, 301, 1], [1, "cs", 3, 131, 301, 1], [1, "cs", 3, 136, 301, 1], [1, "cs", 3, 136, 178, 1], [1, "cs", 0, 136, 183, 1], [1, "cs", 2, 136, 182, 1], [1, "cs", 1, 136, 181, 1], [1, "cs", 0, 136, 179, 1], [1, "cs", 3, 136, 180, 1], [1, "cs", 2, 135, 183, 1], [1, "cs", 1, 135, 182, 1], [1, "cs", 3, 135, 180, 1], [1, "cs", 0, 134, 183, 1], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, 1], [1, "cs", 1, 132, 183, 1], [1, "cs", 3, 131, 183, 1], [1, "cs", 2, 135, 181, 1], [1, "cs", 2, 134, 182, 1], [1, "cs", 3, 134, 181, 1], [1, "fod", 0, 213, 301, 0], [1, "fod", 0, 204, 301, 0], [1, "fod", 1, 196, 288, 0], [1, "fod", 1, 198, 283, 0], [1, "fod", 1, 190, 288, 0], [1, "fod", 1, 189, 296, 0], [1, "fod", 1, 193, 293, 0], [1, "fod", 1, 183, 292, 0], [1, "fod", 1, 186, 287, 0], [1, "fod", 1, 190, 290, 0], [1, "fod", 1, 218, 271, 0], [1, "fod", 1, 220, 266, 0], [1, "fod", 1, 211, 268, 0], [1, "fod", 1, 210, 274, 0], [1, "fod", 1, 205, 263, 0], [1, "fod", 1, 216, 258, 0], [1, "fod", 2, 201, 294, 0], [1, "fod", 2, 190, 296, 0], [1, "fod", 2, 188, 299, 0], [1, "fod", 2, 186, 297, 0], [1, "fod", 2, 188, 296, 0], [1, "fod", 2, 189, 291, 0], [1, "fod", 2, 189, 286, 0], [1, "fod", 2, 191, 286, 0], [1, "fod", 2, 197, 286, 0], [1, "fod", 2, 195, 290, 0], [1, "fod", 2, 186, 288, 0], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, 0], [1, "fod", 2, 198, 286, 0], [1, "fod", 2, 196, 283, 0], [1, "fod", 2, 196, 281, 0], [1, "fod", 2, 201, 280, 0], [1, "fod", 2, 205, 287, 0], [1, "fod", 2, 209, 283, 0], [1, "fod", 2, 212, 280, 0], [1, "fod", 2, 209, 277, 0], [1, "fod", 2, 217, 278, 0], [1, "fod", 2, 219, 275, 0], [1, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", 2, 217, 265, 0], [1, "fod", 2, 213, 267, 0], [1, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [1, "fod", 2, 204, 270, 0], [1, "fod", 2, 196, 267, 0], [1, "fod", 2, 214, 261, 0], [1, "fod", 2, 211, 260, 0], [1, "fod", 2, 218, 256, 0], [1, "fod", 2, 219, 262, 0], [1, "fod", 2, 220, 253, 0], [1, "fod", 2, 211, 257, 0], [1, "la", 3, 198, 27, 1], [1, "la", 3, 201, 30, 1], [1, "la", 3, 200, 32, 1], [1, "la", 3, 198, 33, 1], [1, "la", 3, 196, 33, 1], [1, "la", 3, 194, 32, 1], [1, "la", 3, 194, 28, 1], [1, "la", 0, 200, 28, 1], [1, "la", 0, 193, 30, 1], [1, "la", 3, 196, 27, 1], [1, "la", 3, 199, 30, 1], [1, "la", 3, 197, 29, 1], [1, "la", 3, 195, 30, 1], [1, "la", 3, 197, 31, 1], [1, "la", 2, 201, 33, 1], [1, "la", 4, 202, 34, 1], [1, "la", 4, 202, 35, 1], [1, "la", 4, 203, 36, 1], [1, "la", 4, 204, 37, 1], [1, "la", 2, 205, 38, 1], [1, "la", 5, 205, 39, 1], [1, "la", 5, 205, 40, 1], [1, "la", 2, 206, 41, 1], [1, "la", 1, 207, 42, 1], [1, "la", 1, 205, 41, 1], [1, "la", 4, 208, 43, 1], [1, "la", 4, 209, 43, 1], [1, "la", 1, 210, 43, 1], [1, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, 1], [1, "la", 4, 213, 44, 1], [1, "la", 3, 223, 54, 1], [1, "la", 3, 221, 53, 1], [1, "la", 3, 219, 53, 1], [1, "la", 4, 218, 52, 1], [1, "la", 4, 217, 51, 1], [1, "la", 4, 216, 51, 1], [1, "la", 1, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", 1, 210, 44, 1], [1, "la", 3, 206, 50, 1], [1, "re", 0, 217, 24, 1], [1, "re", 0, 207, 16, 1], [1, "de", 44, 54, 14, 0], [1, "de", 44, 53, 13, 0], [1, "de", 44, 51, 16, 0], [1, "de", 44, 49, 13, 0], [1, "de", 44, 48, 14, 0], [1, "de", 21, 78, 293, 0], [1, "cs", 0, 221, 8, 1], [1, "cs", 0, 224, 9, 1], [1, "cs", 1, 223, 8, 1], [1, "cs", 2, 224, 8, 1], [1, "cs", 2, 222, 8, 1], [1, "cs", 0, 224, 6, 1], [1, "cs", 0, 222, 5, 1], [1, "cs", 0, 219, 7, 1], [1, "cs", 1, 220, 5, 1], [1, "cs", 1, 217, 7, 1], [1, "cs", 2, 224, 5, 1], [1, "cs", 2, 223, 5, 1], [1, "cs", 2, 224, 7, 1], [1, "cs", 2, 223, 7, 1], [1, "cs", 2, 223, 6, 1], [1, "cs", 2, 222, 6, 1], [1, "cs", 2, 222, 7, 1], [1, "cs", 2, 221, 7, 1], [1, "cs", 2, 221, 6, 1], [1, "cs", 2, 221, 5, 1], [1, "cs", 2, 220, 6, 1], [1, "cs", 2, 220, 7, 1], [1, "cs", 2, 220, 8, 1], [1, "cs", 2, 219, 8, 1], [1, "cs", 2, 219, 6, 1], [1, "cs", 2, 219, 5, 1], [1, "cs", 0, 218, 5, 1], [1, "cs", 0, 216, 8, 1], [1, "cs", 2, 218, 8, 1], [1, "cs", 2, 217, 8, 1], [1, "cs", 2, 218, 7, 1], [1, "cs", 2, 218, 6, 1], [1, "cs", 2, 217, 6, 1], [1, "cs", 2, 217, 5, 1], [1, "cs", 1, 215, 6, 1], [1, "cs", 1, 213, 5, 1], [1, "cs", 0, 214, 6, 1], [1, "cs", 0, 216, 5, 1], [1, "cs", 0, 213, 8, 1], [1, "cs", 0, 211, 7, 1], [1, "cs", 0, 209, 5, 1], [1, "cs", 0, 208, 7, 1], [1, "cs", 0, 207, 8, 1], [1, "cs", 2, 216, 6, 1], [1, "cs", 2, 216, 7, 1], [1, "cs", 2, 215, 7, 1], [1, "cs", 2, 215, 8, 1], [1, "cs", 2, 214, 8, 1], [1, "cs", 2, 214, 7, 1], [1, "cs", 2, 215, 5, 1], [1, "cs", 2, 214, 5, 1], [1, "cs", 2, 213, 6, 1], [1, "cs", 2, 213, 7, 1], [1, "cs", 2, 212, 7, 1], [1, "cs", 1, 211, 5, 1], [1, "cs", 1, 209, 8, 1], [1, "cs", 2, 212, 8, 1], [1, "cs", 2, 211, 8, 1], [1, "cs", 2, 210, 8, 1], [1, "cs", 2, 209, 7, 1], [1, "cs", 2, 210, 7, 1], [1, "cs", 2, 210, 6, 1], [1, "cs", 2, 212, 6, 1], [1, "cs", 2, 212, 5, 1], [1, "cs", 2, 211, 6, 1], [1, "cs", 2, 210, 5, 1], [1, "cs", 2, 209, 6, 1], [1, "cs", 2, 208, 6, 1], [1, "cs", 2, 208, 5, 1], [1, "cs", 2, 207, 7, 1], [1, "cs", 2, 207, 6, 1], [1, "cs", 2, 207, 5, 1], [1, "cs", 2, 206, 5, 1], [1, "cs", 2, 208, 8, 1], [1, "cs", 2, 206, 6, 1], [1, "cs", 0, 204, 8, 1], [1, "cs", 0, 205, 6, 1], [1, "cs", 0, 203, 5, 1], [1, "cs", 0, 202, 7, 1], [1, "cs", 0, 199, 8, 1], [1, "cs", 0, 200, 6, 1], [1, "cs", 0, 197, 6, 1], [1, "cs", 0, 195, 8, 1], [1, "cs", 0, 194, 6, 1], [1, "cs", 1, 202, 8, 1], [1, "cs", 1, 206, 7, 1], [1, "cs", 1, 201, 5, 1], [1, "cs", 1, 197, 8, 1], [1, "cs", 1, 192, 7, 1], [1, "cs", 1, 195, 5, 1], [1, "cs", 2, 205, 7, 1], [1, "cs", 2, 205, 8, 1], [1, "cs", 2, 206, 8, 1], [1, "cs", 2, 204, 7, 1], [1, "cs", 2, 204, 6, 1], [1, "cs", 2, 204, 5, 1], [1, "cs", 2, 205, 5, 1], [1, "cs", 2, 203, 6, 1], [1, "cs", 2, 203, 7, 1], [1, "cs", 2, 203, 8, 1], [1, "cs", 2, 201, 8, 1], [1, "cs", 2, 200, 8, 1], [1, "cs", 2, 200, 7, 1], [1, "cs", 2, 201, 7, 1], [1, "cs", 2, 201, 6, 1], [1, "cs", 2, 202, 5, 1], [1, "cs", 2, 202, 6, 1], [1, "cs", 2, 200, 5, 1], [1, "cs", 2, 199, 5, 1], [1, "cs", 2, 197, 5, 1], [1, "cs", 2, 196, 5, 1], [1, "cs", 2, 198, 5, 1], [1, "cs", 2, 198, 6, 1], [1, "cs", 2, 199, 6, 1], [1, "cs", 2, 199, 7, 1], [1, "cs", 2, 198, 7, 1], [1, "cs", 2, 198, 8, 1], [1, "cs", 2, 197, 7, 1], [1, "cs", 2, 196, 7, 1], [1, "cs", 2, 196, 8, 1], [1, "cs", 2, 196, 6, 1], [1, "cs", 2, 195, 6, 1], [1, "cs", 2, 195, 7, 1], [1, "cs", 2, 194, 7, 1], [1, "cs", 2, 193, 8, 1], [1, "cs", 2, 194, 8, 1], [1, "cs", 2, 193, 7, 1], [1, "cs", 2, 193, 6, 1], [1, "cs", 2, 193, 5, 1], [1, "cs", 2, 194, 5, 1], [1, "cs", 0, 192, 5, 1], [1, "cs", 0, 191, 8, 1], [1, "cs", 0, 190, 6, 1], [1, "cs", 0, 188, 7, 1], [1, "cs", 0, 186, 8, 1], [1, "cs", 0, 186, 5, 1], [1, "cs", 0, 184, 7, 1], [1, "cs", 0, 182, 8, 1], [1, "cs", 0, 181, 6, 1], [1, "cs", 1, 189, 8, 1], [1, "cs", 1, 183, 8, 1], [1, "cs", 1, 188, 5, 1], [1, "cs", 1, 185, 6, 1], [1, "cs", 1, 180, 7, 1], [1, "cs", 1, 183, 5, 1], [1, "cs", 1, 178, 8, 1], [1, "cs", 1, 177, 6, 1], [1, "cs", 1, 173, 7, 1], [1, "cs", 1, 171, 7, 1], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, 1], [1, "cs", 0, 179, 5, 1], [1, "cs", 0, 174, 5, 1], [1, "cs", 0, 176, 5, 1], [1, "cs", 0, 172, 8, 1], [1, "cs", 0, 170, 8, 1], [1, "cs", 0, 169, 6, 1], [1, "cs", 2, 192, 6, 1], [1, "cs", 2, 192, 8, 1], [1, "cs", 2, 191, 7, 1], [1, "cs", 2, 191, 6, 1], [1, "cs", 2, 191, 5, 1], [1, "cs", 2, 190, 5, 1], [1, "cs", 2, 189, 5, 1], [1, "cs", 2, 189, 6, 1], [1, "cs", 2, 189, 7, 1], [1, "cs", 2, 190, 7, 1], [1, "cs", 2, 190, 8, 1], [1, "cs", 2, 188, 8, 1], [1, "cs", 2, 187, 8, 1], [1, "cs", 2, 187, 7, 1], [1, "cs", 2, 187, 6, 1], [1, "cs", 2, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [1, "cs", 2, 186, 6, 1], [1, "cs", 2, 186, 7, 1], [1, "cs", 2, 185, 7, 1], [1, "cs", 2, 185, 8, 1], [1, "cs", 2, 184, 8, 1], [1, "cs", 2, 183, 7, 1], [1, "cs", 2, 183, 6, 1], [1, "cs", 2, 184, 6, 1], [1, "cs", 2, 184, 5, 1], [1, "cs", 2, 185, 5, 1], [1, "cs", 2, 182, 6, 1], [1, "cs", 2, 182, 7, 1], [1, "cs", 2, 181, 7, 1], [1, "cs", 2, 181, 8, 1], [1, "cs", 2, 180, 8, 1], [1, "cs", 2, 179, 8, 1], [1, "cs", 2, 182, 5, 1], [1, "cs", 2, 181, 5, 1], [1, "cs", 2, 180, 5, 1], [1, "cs", 2, 180, 6, 1], [1, "cs", 2, 179, 6, 1], [1, "cs", 2, 179, 7, 1], [1, "cs", 2, 178, 7, 1], [1, "cs", 2, 178, 6, 1], [1, "cs", 2, 178, 5, 1], [1, "cs", 2, 177, 5, 1], [1, "cs", 2, 177, 7, 1], [1, "cs", 2, 176, 7, 1], [1, "cs", 2, 176, 6, 1], [1, "cs", 2, 175, 6, 1], [1, "cs", 2, 175, 5, 1], [1, "cs", 2, 176, 8, 1], [1, "cs", 2, 174, 8, 1], [1, "cs", 2, 175, 8, 1], [1, "cs", 2, 173, 8, 1], [1, "cs", 2, 174, 7, 1], [1, "cs", 2, 173, 6, 1], [1, "cs", 2, 174, 6, 1], [1, "cs", 2, 172, 5, 1], [1, "cs", 2, 173, 5, 1], [1, "cs", 2, 172, 6, 1], [1, "cs", 2, 172, 7, 1], [1, "cs", 2, 171, 8, 1], [1, "cs", 2, 170, 7, 1], [1, "cs", 2, 170, 6, 1], [1, "cs", 2, 170, 5, 1], [1, "cs", 2, 171, 5, 1], [1, "cs", 2, 171, 6, 1], [1, "cs", 2, 169, 5, 1], [1, "cs", 2, 169, 7, 1], [1, "cs", 2, 169, 8, 1], [1, "cs", 1, 168, 7, 1], [1, "cs", 1, 166, 5, 1], [1, "cs", 1, 164, 7, 1], [1, "cs", 1, 160, 7, 1], [1, "cs", 1, 156, 8, 1], [1, "cs", 0, 166, 8, 1], [1, "cs", 0, 168, 5, 1], [1, "cs", 0, 164, 6, 1], [1, "cs", 0, 162, 7, 1], [1, "cs", 0, 158, 8, 1], [1, "cs", 0, 157, 6, 1], [1, "cs", 0, 161, 5, 1], [1, "cs", 0, 159, 5, 1], [1, "cs", 0, 155, 7, 1], [1, "cs", 0, 154, 5, 1], [1, "cs", 0, 151, 7, 1], [1, "cs", 1, 153, 8, 1], [1, "cs", 1, 151, 5, 1], [1, "cs", 2, 168, 6, 1], [1, "cs", 2, 168, 8, 1], [1, "cs", 2, 167, 8, 1], [1, "cs", 2, 167, 7, 1], [1, "cs", 2, 167, 6, 1], [1, "cs", 2, 167, 5, 1], [1, "cs", 2, 166, 6, 1], [1, "cs", 2, 166, 7, 1], [1, "cs", 2, 165, 7, 1], [1, "cs", 2, 165, 6, 1], [1, "cs", 2, 165, 5, 1], [1, "cs", 2, 164, 5, 1], [1, "cs", 2, 163, 5, 1], [1, "cs", 2, 162, 5, 1], [1, "cs", 2, 162, 6, 1], [1, "cs", 2, 163, 6, 1], [1, "cs", 2, 163, 7, 1], [1, "cs", 2, 163, 8, 1], [1, "cs", 2, 164, 8, 1], [1, "cs", 2, 165, 8, 1], [1, "cs", 2, 161, 8, 1], [1, "cs", 2, 162, 8, 1], [1, "cs", 2, 160, 8, 1], [1, "cs", 2, 159, 8, 1], [1, "cs", 2, 159, 7, 1], [1, "cs", 2, 159, 6, 1], [1, "cs", 2, 160, 5, 1], [1, "cs", 2, 160, 6, 1], [1, "cs", 2, 161, 6, 1], [1, "cs", 2, 161, 7, 1], [1, "cs", 2, 157, 7, 1], [1, "cs", 2, 158, 7, 1], [1, "cs", 2, 158, 6, 1], [1, "cs", 2, 158, 5, 1], [1, "cs", 2, 155, 5, 1], [1, "cs", 2, 155, 6, 1], [1, "cs", 2, 156, 6, 1], [1, "cs", 2, 156, 7, 1], [1, "cs", 2, 157, 8, 1], [1, "cs", 2, 155, 8, 1], [1, "cs", 2, 154, 8, 1], [1, "cs", 2, 154, 7, 1], [1, "cs", 2, 154, 6, 1], [1, "cs", 2, 152, 8, 1], [1, "cs", 2, 153, 7, 1], [1, "cs", 2, 153, 6, 1], [1, "cs", 2, 153, 5, 1], [1, "cs", 2, 152, 5, 1], [1, "cs", 2, 152, 6, 1], [1, "cs", 2, 152, 7, 1], [1, "cs", 2, 151, 6, 1], [1, "cs", 2, 157, 5, 1], [1, "cs", 1, 156, 5, 1], [1, "cs", 0, 150, 5, 1], [1, "cs", 0, 149, 7, 1], [1, "cs", 0, 147, 8, 1], [1, "cs", 0, 146, 5, 1], [1, "cs", 0, 144, 7, 1], [1, "cs", 0, 142, 5, 1], [1, "cs", 1, 147, 6, 1], [1, "cs", 1, 145, 8, 1], [1, "cs", 1, 144, 5, 1], [1, "cs", 2, 148, 5, 1], [1, "cs", 2, 149, 5, 1], [1, "cs", 2, 150, 6, 1], [1, "cs", 2, 150, 8, 1], [1, "cs", 2, 151, 8, 1], [1, "cs", 2, 150, 7, 1], [1, "cs", 2, 149, 8, 1], [1, "cs", 2, 148, 8, 1], [1, "cs", 2, 149, 6, 1], [1, "cs", 2, 148, 6, 1], [1, "cs", 2, 148, 7, 1], [1, "cs", 2, 147, 7, 1], [1, "cs", 2, 147, 5, 1], [1, "cs", 2, 146, 6, 1], [1, "cs", 2, 146, 7, 1], [1, "cs", 2, 146, 8, 1], [1, "cs", 2, 145, 7, 1], [1, "cs", 2, 145, 6, 1], [1, "cs", 2, 145, 5, 1], [1, "cs", 2, 144, 6, 1], [1, "cs", 2, 143, 5, 1], [1, "cs", 2, 143, 6, 1], [1, "cs", 2, 142, 6, 1], [1, "cs", 2, 141, 5, 1], [1, "cs", 2, 224, 10, 1], [1, "cs", 0, 224, 11, 1], [1, "cs", 0, 224, 13, 1], [1, "cs", 0, 224, 17, 1], [1, "cs", 0, 224, 19, 1], [1, "cs", 0, 224, 22, 1], [1, "cs", 0, 224, 24, 1], [1, "cs", 0, 224, 29, 1], [1, "cs", 0, 224, 33, 1], [1, "cs", 0, 224, 35, 1], [1, "cs", 0, 224, 38, 1], [1, "cs", 1, 224, 14, 1], [1, "cs", 1, 224, 20, 1], [1, "cs", 1, 224, 27, 1], [1, "cs", 1, 224, 31, 1], [1, "cs", 1, 224, 36, 1], [1, "cs", 2, 224, 12, 1], [1, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, 16, 1], [1, "cs", 2, 224, 18, 1], [1, "cs", 2, 224, 21, 1], [1, "cs", 2, 224, 23, 1], [1, "cs", 2, 224, 25, 1], [1, "cs", 2, 224, 26, 1], [1, "cs", 2, 224, 28, 1], [1, "cs", 2, 224, 30, 1], [1, "cs", 2, 224, 32, 1], [1, "cs", 2, 224, 34, 1], [1, "cs", 2, 224, 37, 1], [1, "cs", 2, 224, 39, 1], [1, "cs", 0, 224, 41, 1], [1, "cs", 0, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [1, "cs", 0, 224, 52, 1], [1, "cs", 0, 224, 57, 1], [1, "cs", 1, 224, 47, 1], [1, "cs", 2, 224, 40, 1], [1, "cs", 2, 224, 42, 1], [1, "cs", 2, 224, 43, 1], [1, "cs", 2, 224, 45, 1], [1, "cs", 2, 224, 49, 1], [1, "cs", 1, 224, 50, 1], [1, "cs", 2, 224, 51, 1], [1, "la", 3, 224, 54, 1], [1, "cs", 2, 224, 56, 1], [1, "cs", 2, 224, 58, 1], [1, "cs", 2, 224, 61, 1], [1, "cs", 0, 224, 60, 1], [1, "cs", 0, 224, 64, 1], [1, "cs", 0, 224, 66, 1], [1, "cs", 0, 224, 70, 1], [1, "cs", 0, 224, 74, 1], [1, "cs", 0, 224, 77, 1], [1, "cs", 1, 224, 62, 1], [1, "cs", 1, 224, 68, 1], [1, "cs", 1, 224, 72, 1], [1, "cs", 1, 224, 76, 1], [1, "cs", 1, 224, 80, 1], [1, "cs", 1, 224, 83, 1], [1, "cs", 1, 224, 91, 1], [1, "cs", 1, 224, 95, 1], [1, "cs", 1, 224, 97, 1], [1, "cs", 0, 224, 85, 1], [1, "cs", 0, 224, 88, 1], [1, "cs", 0, 224, 93, 1], [1, "cs", 0, 224, 98, 1], [1, "cs", 2, 224, 59, 1], [1, "cs", 2, 224, 63, 1], [1, "cs", 2, 224, 65, 1], [1, "cs", 2, 224, 67, 1], [1, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, 1], [1, "cs", 2, 224, 73, 1], [1, "cs", 2, 224, 75, 1], [1, "cs", 2, 224, 78, 1], [1, "cs", 2, 224, 79, 1], [1, "cs", 2, 224, 81, 1], [1, "cs", 2, 224, 82, 1], [1, "cs", 2, 224, 84, 1], [1, "cs", 2, 224, 86, 1], [1, "cs", 2, 224, 87, 1], [1, "cs", 2, 224, 89, 1], [1, "cs", 2, 224, 90, 1], [1, "cs", 2, 224, 92, 1], [1, "cs", 2, 224, 94, 1], [1, "cs", 2, 224, 96, 1], [1, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, 100, 1], [1, "cs", 0, 224, 101, 1], [1, "cs", 1, 224, 103, 1], [1, "cs", 2, 224, 102, 1], [1, "cs", 0, 222, 10, 1], [1, "cs", 2, 223, 9, 1], [1, "cs", 2, 222, 9, 1], [1, "cs", 2, 221, 9, 1], [1, "cs", 2, 223, 10, 1], [1, "cs", 2, 223, 11, 1], [1, "cs", 2, 223, 12, 1], [1, "cs", 3, 223, 13, 1], [1, "cs", 3, 222, 11, 1], [1, "cs", 3, 220, 9, 1], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, 10, 1], [1, "re", 2, 219, 13, 1], [1, "re", 1, 218, 18, 1], [1, "re", 1, 214, 13, 1], [1, "cs", 0, 221, 20, 1], [1, "cs", 1, 223, 18, 1], [1, "cs", 2, 222, 19, 1], [1, "cs", 2, 223, 19, 1], [1, "cs", 2, 223, 20, 1], [1, "cs", 2, 222, 20, 1], [1, "cs", 2, 220, 21, 1], [1, "cs", 0, 219, 21, 1], [1, "cs", 3, 221, 21, 1], [1, "cs", 3, 218, 21, 1], [1, "cs", 3, 222, 21, 1], [1, "cs", 3, 220, 22, 1], [1, "cs", 3, 219, 22, 1], [1, "cs", 3, 221, 22, 1], [1, "cs", 0, 211, 9, 1], [1, "cs", 1, 211, 10, 1], [1, "cs", 1, 210, 12, 1], [1, "cs", 0, 211, 13, 1], [1, "cs", 2, 210, 9, 1], [1, "cs", 2, 210, 10, 1], [1, "cs", 2, 210, 11, 1], [1, "cs", 2, 212, 9, 1], [1, "cs", 2, 210, 13, 1], [1, "cs", 2, 211, 12, 1], [1, "cs", 2, 211, 11, 1], [1, "cs", 2, 211, 14, 1], [1, "cs", 2, 212, 15, 1], [1, "cs", 2, 210, 14, 1], [1, "cs", 3, 211, 15, 1], [1, "cs", 3, 213, 9, 1], [1, "cs", 3, 212, 10, 1], [1, "cs", 3, 223, 21, 1], [1, "cs", 3, 209, 9, 1], [1, "la", 3, 223, 22, 1], [1, "la", 3, 221, 23, 1], [1, "la", 3, 207, 9, 1], [1, "la", 3, 209, 10, 1], [1, "la", 0, 209, 12, 1], [1, "la", 4, 209, 14, 1], [1, "la", 4, 219, 23, 1], [1, "la", 3, 210, 15, 1], [1, "la", 3, 217, 22, 1], [1, "la", 4, 212, 16, 1], [1, "la", 2, 214, 19, 1], [1, "la", 4, 213, 20, 1], [1, "la", 1, 212, 21, 1], [1, "la", 4, 215, 18, 1], [1, "la", 2, 216, 17, 1], [1, "la", 5, 216, 16, 1], [1, "la", 5, 216, 15, 1], [1, "la", 1, 217, 16, 1], [1, "la", 2, 218, 16, 1], [1, "la", 2, 216, 14, 1], [1, "la", 2, 219, 16, 1], [1, "la", 5, 220, 16, 1], [1, "la", 5, 216, 13, 1], [1, "la", 4, 217, 15, 1], [1, "cs", 0, 211, 44, 1], [1, "cs", 1, 212, 45, 1], [1, "cs", 2, 213, 45, 1], [1, "cs", 0, 214, 46, 1], [1, "cs", 2, 215, 46, 1], [1, "cs", 3, 213, 46, 1], [1, "cs", 3, 214, 47, 1], [1, "cs", 3, 214, 48, 1], [1, "cs", 3, 216, 46, 1], [1, "cs", 0, 208, 20, 1], [1, "cs", 0, 210, 21, 1], [1, "cs", 0, 212, 23, 1], [1, "cs", 0, 213, 25, 1], [1, "cs", 2, 213, 24, 1], [1, "cs", 2, 211, 22, 1], [1, "cs", 2, 210, 20, 1], [1, "cs", 2, 209, 21, 1], [1, "cs", 2, 209, 20, 1], [1, "cs", 2, 211, 21, 1], [1, "cs", 2, 212, 22, 1], [1, "cs", 2, 213, 23, 1], [1, "cs", 3, 213, 26, 1], [1, "cs", 3, 207, 20, 1], [1, "la", 4, 192, 33, 1], [1, "la", 4, 191, 34, 1], [1, "la", 4, 190, 35, 1], [1, "la", 3, 189, 37, 1], [1, "la", 3, 188, 39, 1], [1, "la", 4, 186, 40, 1], [1, "la", 4, 185, 39, 1], [1, "la", 4, 184, 39, 1], [1, "la", 2, 183, 39, 1], [1, "la", 1, 182, 40, 1], [1, "la", 2, 181, 41, 1], [1, "la", 5, 180, 41, 1], [1, "la", 5, 179, 41, 1], [1, "la", 4, 192, 28, 1], [1, "la", 4, 191, 28, 1], [1, "la", 4, 190, 27, 1], [1, "la", 3, 188, 27, 1], [1, "la", 4, 187, 26, 1], [1, "la", 4, 186, 25, 1], [1, "la", 4, 185, 25, 1], [1, "la", 4, 184, 24, 1], [1, "la", 5, 184, 23, 1], [1, "la", 2, 184, 22, 1], [1, "la", 5, 184, 21, 1], [1, "la", 1, 183, 20, 1], [1, "la", 5, 182, 20, 1], [1, "la", 2, 181, 20, 1], [1, "la", 5, 180, 20, 1], [1, "la", 2, 179, 20, 1], [1, "la", 4, 178, 19, 1], [1, "la", 3, 178, 17, 1], [1, "la", 3, 176, 18, 1], [1, "cs", 0, 177, 15, 1], [1, "cs", 0, 175, 17, 1], [1, "cs", 0, 180, 16, 1], [1, "cs", 0, 174, 19, 1], [1, "cs", 0, 172, 20, 1], [1, "cs", 1, 175, 15, 1], [1, "cs", 1, 172, 18, 1], [1, "cs", 1, 181, 15, 1], [1, "cs", 2, 179, 15, 1], [1, "cs", 2, 177, 16, 1], [1, "cs", 2, 176, 16, 1], [1, "cs", 2, 174, 18, 1], [1, "cs", 2, 173, 19, 1], [1, "cs", 2, 172, 19, 1], [1, "cs", 2, 173, 18, 1], [1, "cs", 2, 173, 17, 1], [1, "cs", 2, 174, 17, 1], [1, "cs", 2, 174, 16, 1], [1, "cs", 2, 175, 16, 1], [1, "cs", 2, 176, 15, 1], [1, "cs", 2, 178, 15, 1], [1, "cs", 2, 178, 16, 1], [1, "cs", 2, 179, 16, 1], [1, "cs", 2, 180, 15, 1], [1, "cs", 2, 181, 16, 1], [1, "cs", 3, 182, 16, 1], [1, "cs", 3, 172, 21, 1], [1, "la", 1, 175, 19, 1], [1, "la", 2, 174, 20, 1], [1, "la", 2, 173, 20, 1], [1, "la", 1, 180, 17, 1], [1, "la", 2, 181, 17, 1], [1, "la", 3, 191, 20, 1], [1, "s", 0, 217, 30, 1], [1, "s", 0, 208, 35, 1], [1, "s", 0, 204, 24, 1], [1, "s", 1, 218, 32, 1], [1, "s", 1, 207, 34, 1], [1, "s", 1, 202, 23, 1], [1, "s", 1, 195, 16, 1], [1, "s", 2, 222, 28, 1], [1, "s", 2, 212, 38, 1], [1, "s", 2, 207, 23, 1], [1, "s", 2, 202, 12, 1], [1, "s", 2, 195, 18, 1], [1, "s", 1, 191, 12, 1], [1, "s", 0, 187, 16, 1], [1, "s", 2, 188, 16, 1], [1, "s", 1, 186, 14, 1], [1, "s", 1, 201, 16, 1], [1, "g", 1, 216, 31, 1], [1, "g", 0, 200, 15, 1], [1, "g", 0, 202, 40, 1], [1, "g", 0, 189, 32, 1], [1, "g", 0, 204, 28, 1], [1, "g", 0, 196, 24, 1], [1, "g", 2, 198, 37, 1], [1, "s", 0, 193, 39, 1], [1, "s", 0, 201, 45, 1], [1, "a", 0, 210, 29, 1], [1, "a", 0, 200, 20, 1], [1, "cs", 0, 200, 34, 1], [1, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [1, "cs", 1, 191, 31, 1], [1, "cs", 2, 202, 32, 1], [1, "cs", 2, 194, 26, 1], [1, "cs", 2, 192, 27, 1], [1, "cs", 2, 192, 32, 1], [1, "cs", 2, 203, 31, 1], [1, "cs", 2, 202, 31, 1], [1, "cs", 2, 202, 30, 1], [1, "cs", 3, 202, 29, 1], [1, "cs", 3, 201, 32, 1], [1, "cs", 3, 199, 35, 1], [1, "cs", 0, 193, 34, 1], [1, "cs", 2, 194, 34, 1], [1, "cs", 2, 198, 35, 1], [1, "cs", 3, 199, 34, 1], [1, "cs", 3, 191, 29, 1], [1, "cs", 0, 191, 30, 1], [1, "cs", 3, 190, 29, 1], [1, "la", 3, 180, 69, 1], [1, "la", 3, 182, 68, 1], [1, "la", 3, 184, 68, 1], [1, "la", 3, 186, 70, 1], [1, "la", 3, 184, 72, 1], [1, "la", 3, 182, 72, 1], [1, "la", 3, 180, 71, 1], [1, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, 1], [1, "cs", 0, 183, 74, 1], [1, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, 1], [1, "cs", 2, 182, 74, 1], [1, "cs", 2, 181, 73, 1], [1, "cs", 2, 180, 74, 1], [1, "cs", 2, 181, 74, 1], [1, "la", 0, 184, 70, 1], [1, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, 1], [1, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, 1], [1, "la", 4, 187, 69, 1], [1, "la", 1, 188, 68, 1], [1, "la", 4, 189, 68, 1], [1, "la", 2, 190, 68, 1], [1, "la", 1, 191, 68, 1], [1, "la", 4, 192, 68, 1], [1, "la", 2, 193, 68, 1], [1, "la", 4, 194, 69, 1], [1, "la", 2, 194, 70, 1], [1, "la", 5, 195, 71, 1], [1, "la", 1, 194, 71, 1], [1, "la", 2, 196, 72, 1], [1, "la", 4, 196, 71, 1], [1, "la", 1, 197, 73, 1], [1, "la", 5, 196, 73, 1], [1, "la", 5, 198, 73, 1], [1, "la", 3, 201, 73, 1], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [1, "la", 1, 205, 72, 1], [1, "la", 2, 206, 72, 1], [1, "la", 5, 207, 72, 1], [1, "la", 1, 208, 72, 1], [1, "la", 1, 209, 73, 1], [1, "la", 2, 209, 74, 1], [1, "la", 5, 211, 76, 1], [1, "la", 4, 210, 75, 1], [1, "la", 5, 212, 76, 1], [1, "la", 4, 202, 75, 1], [1, "la", 2, 203, 76, 1], [1, "la", 4, 204, 77, 1], [1, "la", 2, 204, 78, 1], [1, "la", 2, 204, 79, 1], [1, "la", 5, 204, 80, 1], [1, "cs", 0, 202, 74, 1], [1, "cs", 1, 203, 74, 1], [1, "cs", 2, 204, 73, 1], [1, "cs", 2, 203, 75, 1], [1, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", 0, 205, 74, 1], [1, "cs", 2, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, 1], [1, "cs", 3, 207, 73, 1], [1, "cs", 2, 205, 76, 1], [1, "cs", 3, 205, 77, 1], [1, "la", 3, 183, 66, 1], [1, "la", 4, 183, 65, 1], [1, "la", 4, 184, 64, 1], [1, "la", 4, 185, 63, 1], [1, "la", 1, 185, 62, 1], [1, "la", 2, 185, 61, 1], [1, "la", 2, 185, 60, 1], [1, "la", 4, 186, 59, 1], [1, "la", 1, 187, 58, 1], [1, "la", 2, 187, 57, 1], [1, "la", 2, 187, 56, 1], [1, "s", 0, 191, 60, 1], [1, "s", 1, 195, 58, 1], [1, "s", 1, 199, 46, 1], [1, "s", 2, 202, 49, 1], [1, "g", 2, 197, 55, 1], [1, "g", 1, 213, 55, 1], [1, "g", 0, 192, 45, 1], [1, "g", 0, 210, 61, 1], [1, "g", 0, 182, 52, 1], [1, "g", 0, 180, 35, 1], [1, "g", 0, 175, 25, 1], [1, "g", 0, 168, 32, 1], [1, "g", 1, 179, 28, 1], [1, "g", 1, 161, 16, 1], [1, "g", 2, 172, 12, 1], [1, "g", 2, 160, 25, 1], [1, "g", 2, 157, 39, 1], [1, "g", 2, 170, 43, 1], [1, "g", 2, 202, 67, 1], [1, "g", 2, 217, 72, 1], [1, "g", 2, 214, 82, 1], [1, "g", 2, 193, 86, 1], [1, "g", 2, 168, 60, 1], [1, "g", 2, 165, 78, 1], [1, "g", 2, 173, 88, 1], [1, "s", 0, 185, 51, 1], [1, "s", 0, 175, 44, 1], [1, "s", 0, 165, 50, 1], [1, "s", 0, 160, 32, 1], [1, "s", 1, 162, 30, 1], [1, "s", 1, 176, 28, 1], [1, "s", 1, 154, 17, 1], [1, "s", 1, 184, 49, 1], [1, "s", 1, 192, 62, 1], [1, "s", 1, 216, 62, 1], [1, "s", 1, 204, 65, 1], [1, "s", 1, 217, 79, 1], [1, "s", 1, 206, 86, 1], [1, "la", 3, 211, 69, 1], [1, "la", 4, 215, 69, 1], [1, "la", 5, 201, 81, 1], [1, "la", 1, 207, 83, 1], [1, "la", 3, 173, 32, 1], [1, "la", 2, 181, 45, 1], [1, "la", 1, 178, 38, 1], [1, "la", 1, 213, 69, 1], [1, "la", 5, 214, 69, 1], [1, "la", 4, 216, 68, 1], [1, "la", 0, 191, 78, 1], [1, "la", 3, 191, 80, 1], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [1, "g", 2, 154, 67, 1], [1, "g", 2, 202, 94, 1], [1, "g", 2, 155, 90, 1], [1, "s", 2, 215, 80, 1], [1, "s", 2, 204, 62, 1], [1, "s", 2, 218, 60, 1], [1, "s", 2, 194, 62, 1], [1, "s", 0, 216, 86, 1], [1, "s", 0, 211, 93, 1], [1, "la", 0, 216, 92, 1], [1, "la", 0, 151, 96, 1], [1, "la", 1, 155, 95, 1], [1, "la", 4, 214, 88, 1], [1, "s", 0, 205, 99, 1], [1, "s", 1, 217, 88, 1], [1, "s", 1, 213, 94, 1], [1, "s", 1, 202, 97, 1], [1, "s", 0, 199, 85, 1], [1, "s", 0, 190, 93, 1], [1, "s", 1, 199, 87, 1], [1, "s", 1, 192, 97, 1], [1, "la", 3, 196, 92, 1], [1, "la", 1, 199, 91, 1], [1, "la", 1, 220, 91, 1], [1, "la", 0, 219, 77, 1], [1, "la", 0, 200, 59, 1], [1, "la", 3, 188, 87, 1], [1, "la", 0, 183, 94, 1], [1, "la", 1, 187, 83, 1], [1, "la", 1, 175, 82, 1], [1, "la", 1, 172, 94, 1], [1, "la", 2, 179, 78, 1], [1, "la", 0, 166, 87, 1], [1, "la", 3, 159, 80, 1], [1, "la", 3, 167, 15, 1], [1, "la", 1, 164, 17, 1], [1, "la", 1, 172, 28, 1], [1, "la", 3, 153, 24, 1], [1, "la", 4, 164, 91, 1], [1, "la", 4, 156, 82, 1], [1, "la", 4, 149, 90, 1], [1, "s", 0, 178, 85, 1], [1, "s", 1, 180, 85, 1], [1, "s", 0, 163, 96, 1], [1, "s", 0, 159, 86, 1], [1, "s", 0, 185, 78, 1], [1, "s", 1, 194, 75, 1], [1, "s", 2, 195, 76, 1], [1, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, 1], [1, "s", 2, 166, 97, 1], [1, "s", 2, 177, 97, 1], [1, "s", 0, 149, 85, 1], [1, "s", 1, 151, 83, 1], [1, "s", 1, 175, 74, 1], [1, "s", 0, 174, 72, 1], [1, "la", 3, 168, 71, 1], [1, "la", 3, 180, 60, 1], [1, "s", 0, 156, 63, 1], [1, "s", 0, 151, 47, 1], [1, "s", 1, 158, 64, 1], [1, "s", 1, 161, 75, 1], [1, "s", 1, 162, 51, 1], [1, "s", 1, 175, 45, 1], [1, "s", 1, 152, 47, 1], [1, "s", 1, 159, 33, 1], [1, "s", 1, 152, 18, 1], [1, "s", 0, 151, 13, 1], [1, "s", 0, 166, 22, 1], [1, "s", 0, 170, 63, 1], [1, "s", 2, 172, 62, 1], [1, "s", 2, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", 2, 150, 52, 1], [1, "la", 4, 178, 69, 1], [1, "la", 4, 177, 68, 1], [1, "la", 3, 176, 67, 1], [1, "la", 0, 174, 67, 1], [1, "la", 1, 172, 67, 1], [1, "la", 4, 171, 67, 1], [1, "la", 4, 170, 66, 1], [1, "la", 4, 169, 66, 1], [1, "la", 1, 168, 66, 1], [1, "la", 4, 167, 67, 1], [1, "la", 1, 166, 67, 1], [1, "la", 4, 165, 68, 1], [1, "la", 5, 164, 68, 1], [1, "la", 2, 163, 68, 1], [1, "la", 5, 162, 68, 1], [1, "la", 2, 161, 68, 1], [1, "la", 3, 153, 72, 1], [1, "la", 3, 163, 60, 1], [1, "la", 3, 164, 42, 1], [1, "la", 0, 155, 51, 1], [1, "la", 1, 168, 42, 1], [1, "la", 4, 158, 48, 1], [1, "la", 4, 178, 57, 1], [1, "la", 4, 151, 69, 1], [1, "la", 2, 170, 74, 1], [1, "la", 2, 160, 84, 1], [1, "la", 2, 174, 92, 1], [1, "la", 2, 188, 90, 1], [1, "la", 2, 209, 84, 1], [1, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", 5, 165, 57, 1], [1, "la", 5, 182, 58, 1], [1, "la", 5, 166, 44, 1], [1, "la", 1, 163, 39, 1], [1, "la", 1, 152, 53, 1], [1, "la", 1, 152, 37, 1], [1, "la", 2, 163, 13, 1], [1, "de", 12, 219, 12, 0], [1, "de", 14, 203, 13, 0], [1, "de", 15, 220, 19, 0], [1, "de", 12, 223, 15, 0], [1, "de", 12, 213, 10, 0], [1, "de", 37, 217, 19, 0], [1, "de", 38, 220, 14, 0], [1, "de", 38, 215, 10, 0], [1, "de", 40, 214, 14, 0], [1, "de", 40, 222, 16, 0], [1, "de", 40, 209, 18, 0], [1, "de", 37, 212, 18, 0], [1, "de", 38, 215, 26, 0], [1, "de", 37, 222, 25, 0], [1, "de", 40, 221, 29, 0], [1, "de", 12, 220, 27, 0], [1, "de", 13, 213, 27, 0], [1, "de", 14, 215, 30, 0], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, 0], [1, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [1, "de", 39, 215, 32, 0], [1, "de", 37, 211, 35, 0], [1, "de", 12, 223, 38, 0], [1, "de", 13, 213, 38, 0], [1, "de", 14, 222, 44, 0], [1, "de", 15, 208, 33, 0], [1, "de", 15, 206, 23, 0], [1, "de", 13, 205, 28, 0], [1, "de", 14, 211, 23, 0], [1, "de", 14, 201, 20, 0], [1, "de", 15, 198, 9, 0], [1, "de", 15, 199, 16, 0], [1, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, 9, 0], [1, "de", 40, 196, 12, 0], [1, "de", 40, 198, 18, 0], [1, "de", 37, 192, 11, 0], [1, "de", 37, 199, 24, 0], [1, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, 0], [1, "de", 39, 192, 24, 0], [1, "de", 40, 187, 23, 0], [1, "de", 38, 187, 18, 0], [1, "de", 39, 192, 18, 0], [1, "de", 37, 185, 15, 0], [1, "de", 12, 188, 15, 0], [1, "de", 13, 185, 13, 0], [1, "de", 14, 189, 9, 0], [1, "de", 15, 187, 22, 0], [1, "de", 15, 180, 9, 0], [1, "de", 12, 177, 14, 0], [1, "de", 14, 173, 9, 0], [1, "de", 14, 171, 15, 0], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, 13, 0], [1, "de", 39, 175, 9, 0], [1, "de", 40, 173, 14, 0], [1, "de", 37, 169, 11, 0], [1, "de", 37, 163, 10, 0], [1, "de", 38, 164, 15, 0], [1, "de", 39, 170, 20, 0], [1, "de", 40, 160, 17, 0], [1, "de", 40, 154, 10, 0], [1, "de", 40, 165, 23, 0], [1, "de", 40, 150, 19, 0], [1, "de", 37, 155, 16, 0], [1, "de", 39, 146, 10, 0], [1, "de", 12, 159, 12, 0], [1, "de", 13, 151, 9, 0], [1, "de", 14, 150, 14, 0], [1, "de", 15, 153, 19, 0], [1, "de", 13, 161, 25, 0], [1, "de", 14, 169, 25, 0], [1, "de", 15, 176, 25, 0], [1, "de", 12, 180, 29, 0], [1, "de", 12, 188, 31, 0], [1, "de", 14, 181, 36, 0], [1, "de", 37, 186, 33, 0], [1, "de", 38, 183, 26, 0], [1, "de", 39, 177, 21, 0], [1, "de", 40, 175, 31, 0], [1, "de", 37, 176, 39, 0], [1, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [1, "de", 38, 168, 45, 0], [1, "de", 38, 173, 45, 0], [1, "de", 39, 160, 35, 0], [1, "de", 40, 161, 42, 0], [1, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, 0], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, 0], [1, "de", 39, 149, 45, 0], [1, "de", 40, 150, 50, 0], [1, "de", 40, 160, 52, 0], [1, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, 0], [1, "de", 12, 167, 32, 0], [1, "de", 13, 158, 32, 0], [1, "de", 14, 149, 28, 0], [1, "de", 15, 163, 30, 0], [1, "de", 14, 158, 39, 0], [1, "de", 12, 171, 43, 0], [1, "de", 12, 174, 36, 0], [1, "de", 12, 151, 43, 0], [1, "de", 13, 152, 48, 0], [1, "de", 14, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, 0], [1, "de", 13, 183, 51, 0], [1, "de", 14, 186, 48, 0], [1, "de", 37, 182, 48, 0], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, 0], [1, "de", 40, 194, 37, 0], [1, "de", 39, 199, 44, 0], [1, "de", 38, 200, 49, 0], [1, "de", 37, 196, 54, 0], [1, "de", 12, 194, 40, 0], [1, "de", 13, 202, 45, 0], [1, "de", 14, 198, 47, 0], [1, "de", 15, 198, 55, 0], [1, "de", 15, 212, 54, 0], [1, "de", 15, 216, 63, 0], [1, "de", 14, 209, 62, 0], [1, "de", 12, 219, 60, 0], [1, "de", 12, 206, 56, 0], [1, "de", 12, 218, 72, 0], [1, "de", 12, 223, 67, 0], [1, "de", 12, 205, 64, 0], [1, "de", 12, 193, 63, 0], [1, "de", 14, 216, 80, 0], [1, "de", 14, 222, 87, 0], [1, "de", 38, 210, 53, 0], [1, "de", 37, 210, 47, 0], [1, "de", 37, 200, 63, 0], [1, "de", 37, 218, 62, 0], [1, "de", 37, 222, 60, 0], [1, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, 0], [1, "de", 38, 218, 55, 0], [1, "de", 38, 212, 61, 0], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, 0], [1, "de", 40, 222, 81, 0], [1, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [1, "de", 39, 207, 76, 0], [1, "de", 39, 208, 86, 0], [1, "de", 39, 218, 87, 0], [1, "de", 39, 222, 93, 0], [1, "de", 39, 216, 96, 0], [1, "de", 39, 209, 94, 0], [1, "de", 39, 201, 87, 0], [1, "de", 39, 198, 82, 0], [1, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [1, "de", 39, 202, 92, 0], [1, "de", 37, 194, 97, 0], [1, "de", 39, 204, 88, 0], [1, "de", 39, 189, 90, 0], [1, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, 0], [1, "de", 37, 183, 91, 0], [1, "de", 37, 186, 80, 0], [1, "de", 37, 191, 72, 0], [1, "de", 38, 184, 77, 0], [1, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [1, "de", 40, 178, 87, 0], [1, "de", 40, 174, 94, 0], [1, "de", 40, 192, 93, 0], [1, "de", 40, 165, 92, 0], [1, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [1, "de", 38, 164, 98, 0], [1, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [1, "de", 40, 148, 83, 0], [1, "de", 40, 160, 77, 0], [1, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, 0], [1, "de", 37, 161, 64, 0], [1, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, 0], [1, "de", 39, 174, 64, 0], [1, "de", 39, 175, 56, 0], [1, "de", 39, 149, 67, 0], [1, "de", 12, 218, 96, 0], [1, "de", 13, 212, 95, 0], [1, "de", 14, 204, 85, 0], [1, "de", 15, 215, 85, 0], [1, "de", 15, 197, 97, 0], [1, "de", 12, 198, 87, 0], [1, "de", 14, 196, 77, 0], [1, "de", 13, 194, 86, 0], [1, "de", 15, 181, 84, 0], [1, "de", 14, 184, 79, 0], [1, "de", 14, 188, 93, 0], [1, "de", 13, 180, 87, 0], [1, "de", 13, 178, 96, 0], [1, "de", 13, 163, 95, 0], [1, "de", 15, 172, 88, 0], [1, "de", 15, 176, 75, 0], [1, "de", 14, 172, 72, 0], [1, "de", 14, 169, 82, 0], [1, "de", 13, 164, 78, 0], [1, "de", 13, 158, 87, 0], [1, "de", 13, 149, 86, 0], [1, "de", 15, 154, 91, 0], [1, "de", 15, 160, 74, 0], [1, "de", 14, 152, 76, 0], [1, "de", 14, 158, 63, 0], [1, "de", 14, 150, 60, 0], [1, "de", 12, 169, 59, 0], [1, "de", 13, 173, 61, 0], [1, "cs", 1, 143, 104, 1], [1, "cs", 0, 141, 102, 1], [1, "cs", 3, 138, 102, 1], [1, "cs", 2, 139, 102, 1], [1, "cs", 2, 140, 102, 1], [1, "cs", 3, 143, 107, 1], [1, "cs", 0, 143, 106, 1], [1, "cs", 2, 143, 105, 1], [1, "cs", 2, 142, 103, 1], [1, "cs", 0, 142, 104, 1], [1, "cs", 2, 141, 103, 1], [1, "cs", 3, 142, 105, 1], [1, "cs", 3, 140, 103, 1], [1, "cs", 3, 141, 104, 1], [1, "la", 4, 151, 23, 1], [1, "la", 4, 150, 22, 1], [1, "la", 1, 149, 21, 1], [1, "la", 4, 148, 21, 1], [1, "la", 2, 147, 20, 1], [1, "la", 4, 147, 19, 1], [1, "la", 5, 147, 18, 1], [1, "la", 1, 147, 17, 1], [1, "la", 3, 144, 9, 1], [1, "la", 5, 147, 16, 1], [1, "la", 2, 147, 15, 1], [1, "la", 4, 147, 14, 1], [1, "la", 4, 145, 11, 1], [1, "la", 5, 145, 12, 1], [1, "la", 1, 146, 13, 1], [1, "la", 2, 145, 13, 1], [1, "la", 3, 155, 25, 1], [1, "la", 0, 155, 24, 1], [1, "la", 3, 153, 26, 1], [1, "cs", 0, 151, 24, 1], [1, "cs", 0, 153, 22, 1], [1, "cs", 3, 152, 22, 1], [1, "cs", 3, 154, 22, 1], [1, "cs", 1, 157, 26, 1], [1, "cs", 2, 157, 24, 1], [1, "cs", 2, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [1, "cs", 2, 152, 25, 1], [1, "cs", 2, 151, 25, 1], [1, "cs", 2, 156, 27, 1], [1, "cs", 2, 157, 23, 1], [1, "cs", 2, 157, 22, 1], [1, "cs", 3, 150, 24, 1], [1, "cs", 3, 150, 23, 1], [1, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, 0], [1, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, 0], [1, "de", 13, 156, 21, 0], [1, "de", 13, 147, 36, 0], [1, "de", 13, 161, 56, 0], [1, "de", 13, 147, 79, 0], [1, "de", 12, 157, 99, 0], [1, "de", 12, 172, 99, 0], [1, "la", 3, 143, 102, 1], [1, "la", 4, 149, 96, 1], [1, "la", 4, 145, 102, 1], [1, "la", 1, 148, 97, 1], [1, "la", 5, 148, 98, 1], [1, "cs", 3, 144, 104, 1], [1, "cs", 3, 144, 103, 1], [1, "cs", 3, 145, 103, 1], [1, "cs", 3, 145, 104, 1], [1, "cs", 3, 142, 101, 1], [1, "cs", 3, 143, 100, 1], [1, "cs", 3, 141, 101, 1], [1, "cs", 3, 142, 100, 1], [1, "cs", 0, 141, 100, 1], [1, "cs", 2, 140, 101, 1], [1, "cs", 2, 144, 105, 1], [1, "cs", 3, 146, 103, 1], [1, "cs", 3, 146, 102, 1], [1, "cs", 3, 150, 95, 1], [1, "cs", 0, 150, 97, 1], [1, "cs", 2, 151, 98, 1], [1, "cs", 0, 153, 97, 1], [1, "cs", 3, 153, 96, 1], [1, "cs", 2, 149, 95, 1], [1, "s", 0, 213, 127, 1], [1, "plm", 1, 214, 131, 0], [1, "plm", 1, 207, 128, 0], [1, "plm", 0, 208, 127, 0], [1, "s", 1, 207, 132, 1], [1, "s", 2, 208, 133, 1], [1, "plm", 0, 217, 132, 0], [1, "plm", 2, 186, 158, 0], [1, "plm", 0, 184, 160, 0], [1, "s", 1, 183, 156, 1], [1, "s", 2, 186, 159, 1], [1, "p", 0, 182, 157, 1], [1, "p", 0, 114, 205, 1], [1, "plm", 1, 117, 204, 0], [1, "plm", 0, 117, 205, 0], [1, "plm", 2, 112, 204, 0], [1, "s", 2, 114, 207, 1], [1, "s", 2, 115, 204, 1], [1, "plm", 2, 122, 151, 0], [1, "plm", 1, 123, 150, 0], [1, "plm", 1, 117, 151, 0], [1, "s", 0, 118, 150, 1], [1, "s", 1, 122, 152, 1], [1, "plm", 2, 156, 130, 0], [1, "plm", 1, 154, 127, 0], [1, "s", 0, 153, 128, 1], [1, "s", 2, 152, 130, 1], [1, "p", 0, 123, 65, 1], [1, "plm", 2, 125, 62, 0], [1, "plm", 1, 124, 62, 0], [1, "plm", 0, 120, 65, 0], [1, "s", 1, 125, 63, 1], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", 2, 145, 105, 1], [1, "cs", 2, 144, 107, 1], [1, "cs", 2, 141, 106, 1], [1, "cs", 2, 141, 105, 1], [1, "cs", 2, 140, 105, 1], [1, "cs", 2, 140, 104, 1], [1, "cs", 1, 138, 103, 1], [1, "cs", 0, 139, 104, 1], [1, "cs", 2, 139, 103, 1], [1, "cs", 2, 139, 105, 1], [1, "cs", 2, 142, 106, 1], [1, "cs", 2, 142, 107, 1], [1, "cs", 2, 139, 101, 1], [1, "de", 19, 27, 264, 0], [1, "la", 4, 147, 99, 1], [1, "la", 1, 146, 100, 1], [1, "la", 4, 145, 101, 1], [1, "cs", 1, 215, 47, 1], [1, "cs", 2, 216, 47, 1], [1, "cs", 2, 215, 48, 1], [1, "la", 4, 214, 45, 1], [1, "la", 4, 215, 45, 1], [1, "la", 0, 216, 46, 1], [1, "la", 4, 216, 48, 1], [1, "la", 4, 216, 49, 1], [1, "la", 4, 217, 50, 1], [1, "la", 3, 214, 49, 1], [1, "la", 4, 211, 45, 1], [1, "la", 3, 213, 47, 1], [1, "cs", 2, 224, 48, 1], [1, "plm", 2, 111, 243, 0], [1, "plm", 1, 108, 246, 0], [1, "s", 1, 110, 243, 1], [1, "s", 0, 108, 245, 1], [1, "s", 0, 121, 276, 1], [1, "plm", 2, 122, 277, 0], [1, "plm", 2, 117, 276, 0], [1, "plm", 1, 118, 277, 0], [1, "s", 1, 118, 278, 1], [1, "cs", 2, 66, 16, 1], [1, "cs", 3, 67, 16, 1], [1, "cs", 0, 67, 17, 1], [1, "cs", 2, 66, 17, 1], [1, "cs", 3, 66, 18, 1], [1, "cs", 3, 68, 17, 1], [1, "cs", 0, 36, 16, 1], [1, "cs", 2, 36, 17, 1], [1, "cs", 2, 36, 18, 1], [1, "cs", 3, 35, 17, 1], [1, "cs", 3, 36, 19, 1], [1, "cs", 3, 35, 18, 1], [1, "cs", 2, 66, 30, 1], [1, "cs", 2, 66, 23, 1], [1, "cs", 3, 66, 22, 1], [1, "cs", 3, 66, 31, 1], [1, "cs", 2, 36, 30, 1], [1, "cs", 2, 36, 23, 1], [1, "cs", 1, 36, 22, 1], [1, "cs", 2, 36, 31, 1], [1, "cs", 3, 42, 13, 1], [1, "cs", 0, 43, 13, 1], [1, "cs", 2, 44, 13, 1], [1, "cs", 3, 42, 16, 1], [1, "cs", 3, 41, 16, 1], [1, "cs", 3, 40, 16, 1], [1, "cs", 0, 42, 19, 1], [1, "cs", 3, 43, 19, 1], [1, "cs", 3, 44, 19, 1], [1, "cs", 3, 45, 19, 1], [1, "cs", 2, 46, 19, 1], [1, "cs", 0, 43, 22, 1], [1, "cs", 2, 42, 22, 1], [1, "cs", 1, 41, 22, 1], [1, "cs", 0, 40, 22, 1], [1, "cs", 3, 39, 17, 1], [1, "cs", 1, 44, 26, 1], [1, "cs", 2, 45, 26, 1], [1, "cs", 3, 46, 26, 1], [1, "cs", 0, 47, 26, 1], [1, "cs", 2, 48, 26, 1], [1, "cs", 3, 47, 25, 1], [1, "cs", 3, 43, 27, 1], [1, "cs", 1, 49, 32, 1], [1, "cs", 2, 50, 32, 1], [1, "cs", 2, 51, 32, 1], [1, "cs", 2, 52, 32, 1], [1, "d", 0, 51, 29, 1], [1, "d", 1, 53, 29, 1], [1, "d", 1, 49, 29, 1], [1, "cs", 3, 55, 31, 1], [1, "cs", 3, 54, 32, 1], [1, "cs", 3, 47, 31, 1], [1, "cs", 3, 48, 32, 1], [1, "cs", 0, 51, 33, 1], [1, "cs", 2, 52, 33, 1], [1, "cs", 2, 50, 33, 1], [1, "cs", 3, 56, 30, 1], [1, "cs", 3, 56, 31, 1], [1, "cs", 3, 46, 30, 1], [1, "cs", 3, 46, 31, 1], [1, "cs", 1, 53, 33, 1], [1, "cs", 2, 49, 33, 1], [1, "cs", 2, 53, 32, 1], [1, "cs", 0, 55, 32, 1], [1, "cs", 0, 47, 32, 1], [1, "d", 1, 54, 35, 1], [1, "fo", 2, 35, 15, 0], [1, "fo", 2, 36, 12, 0], [1, "fo", 2, 67, 15, 0], [1, "cs", 3, 60, 13, 1], [1, "cs", 2, 59, 13, 1], [1, "cs", 1, 58, 13, 1], [1, "cs", 3, 62, 16, 1], [1, "cs", 0, 61, 16, 1], [1, "cs", 3, 60, 16, 1], [1, "cs", 3, 63, 17, 1], [1, "cs", 2, 60, 19, 1], [1, "cs", 1, 59, 19, 1], [1, "cs", 3, 58, 19, 1], [1, "cs", 2, 57, 19, 1], [1, "cs", 2, 56, 19, 1], [1, "cs", 0, 55, 18, 1], [1, "cs", 2, 55, 17, 1], [1, "cs", 2, 63, 23, 1], [1, "cs", 0, 62, 22, 1], [1, "cs", 2, 61, 22, 1], [1, "cs", 1, 60, 22, 1], [1, "cs", 0, 59, 22, 1], [1, "cs", 2, 54, 26, 1], [1, "cs", 2, 55, 26, 1], [1, "cs", 2, 56, 26, 1], [1, "cs", 1, 57, 26, 1], [1, "cs", 2, 58, 26, 1], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, 1], [1, "cs", 2, 68, 15, 1], [1, "cs", 3, 69, 15, 1], [1, "cs", 3, 70, 15, 1], [1, "cs", 3, 70, 14, 1], [1, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, 16, 1], [1, "cs", 2, 71, 13, 1], [1, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, 13, 1], [1, "cs", 3, 70, 8, 1], [1, "cs", 3, 71, 8, 1], [1, "cs", 2, 72, 8, 1], [1, "cs", 0, 73, 8, 1], [1, "cs", 3, 74, 9, 1], [1, "cs", 3, 74, 8, 1], [1, "cs", 0, 75, 8, 1], [1, "cs", 3, 76, 8, 1], [1, "cs", 3, 75, 9, 1], [1, "cs", 3, 75, 10, 1], [1, "cs", 0, 76, 10, 1], [1, "cs", 0, 76, 16, 1], [1, "cs", 3, 76, 15, 1], [1, "cs", 3, 75, 16, 1], [1, "cs", 2, 77, 11, 1], [1, "cs", 2, 77, 14, 1], [1, "cs", 3, 77, 12, 1], [1, "cs", 3, 77, 13, 1], [1, "cs", 3, 77, 15, 1], [1, "cs", 0, 74, 18, 1], [1, "cs", 1, 75, 17, 1], [1, "cs", 2, 74, 17, 1], [1, "cs", 3, 73, 19, 1], [1, "cs", 3, 67, 23, 1], [1, "cs", 0, 68, 23, 1], [1, "cs", 0, 72, 20, 1], [1, "cs", 2, 73, 20, 1], [1, "cs", 2, 74, 19, 1], [1, "cs", 2, 74, 36, 1], [1, "cs", 2, 77, 27, 1], [1, "cs", 2, 76, 26, 1], [1, "cs", 2, 75, 26, 1], [1, "cs", 0, 74, 26, 1], [1, "cs", 2, 75, 25, 1], [1, "cs", 0, 76, 25, 1], [1, "cs", 1, 77, 23, 1], [1, "cs", 2, 77, 16, 1], [1, "cs", 2, 76, 17, 1], [1, "cs", 2, 76, 24, 1], [1, "cs", 2, 77, 24, 1], [1, "cs", 2, 77, 25, 1], [1, "cs", 2, 77, 26, 1], [1, "cs", 1, 75, 27, 1], [1, "cs", 3, 76, 27, 1], [1, "cs", 2, 67, 24, 1], [1, "cs", 2, 66, 24, 1], [1, "cs", 2, 73, 26, 1], [1, "cs", 2, 74, 27, 1], [1, "cs", 2, 74, 25, 1], [1, "cs", 2, 66, 19, 1], [1, "cs", 2, 66, 20, 1], [1, "cs", 2, 66, 21, 1], [1, "cs", 2, 67, 18, 1], [1, "cs", 2, 67, 22, 1], [1, "cs", 0, 77, 36, 1], [1, "cs", 0, 77, 32, 1], [1, "cs", 1, 75, 35, 1], [1, "cs", 2, 75, 36, 1], [1, "cs", 2, 76, 36, 1], [1, "cs", 2, 77, 35, 1], [1, "cs", 2, 77, 34, 1], [1, "cs", 2, 76, 35, 1], [1, "cs", 2, 77, 33, 1], [1, "cs", 2, 77, 31, 1], [1, "cs", 0, 77, 29, 1], [1, "cs", 0, 71, 32, 1], [1, "cs", 0, 76, 34, 1], [1, "cs", 2, 77, 30, 1], [1, "cs", 2, 77, 28, 1], [1, "cs", 2, 76, 28, 1], [1, "cs", 2, 75, 28, 1], [1, "cs", 2, 76, 29, 1], [1, "cs", 2, 76, 33, 1], [1, "cs", 2, 70, 32, 1], [1, "cs", 2, 69, 31, 1], [1, "cs", 0, 68, 31, 1], [1, "cs", 2, 67, 31, 1], [1, "cs", 2, 67, 30, 1], [1, "cs", 2, 69, 32, 1], [1, "cs", 1, 67, 32, 1], [1, "cs", 2, 68, 32, 1], [1, "cs", 2, 66, 32, 1], [1, "cs", 2, 66, 33, 1], [1, "cs", 2, 67, 33, 1], [1, "cs", 2, 70, 33, 1], [1, "cs", 2, 69, 33, 1], [1, "cs", 2, 68, 33, 1], [1, "cs", 0, 68, 34, 1], [1, "cs", 1, 66, 35, 1], [1, "cs", 2, 67, 34, 1], [1, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, 1], [1, "cs", 2, 64, 36, 1], [1, "cs", 2, 65, 36, 1], [1, "cs", 2, 67, 35, 1], [1, "cs", 2, 66, 36, 1], [1, "cs", 2, 69, 34, 1], [1, "cs", 2, 68, 35, 1], [1, "cs", 2, 76, 9, 1], [1, "cs", 2, 77, 9, 1], [1, "cs", 2, 77, 8, 1], [1, "cs", 2, 77, 10, 1], [1, "cs", 2, 78, 8, 1], [1, "cs", 2, 78, 9, 1], [1, "cs", 2, 78, 10, 1], [1, "cs", 2, 78, 11, 1], [1, "cs", 2, 78, 12, 1], [1, "cs", 2, 78, 13, 1], [1, "cs", 0, 79, 9, 1], [1, "cs", 1, 79, 11, 1], [1, "cs", 3, 79, 8, 1], [1, "cs", 3, 79, 10, 1], [1, "cs", 3, 79, 12, 1], [1, "cs", 3, 80, 8, 1], [1, "cs", 1, 80, 10, 1], [1, "cs", 2, 80, 9, 1], [1, "cs", 2, 80, 11, 1], [1, "cs", 2, 81, 8, 1], [1, "cs", 2, 81, 9, 1], [1, "cs", 2, 81, 10, 1], [1, "cs", 2, 78, 14, 1], [1, "cs", 2, 79, 13, 1], [1, "cs", 2, 78, 15, 1], [1, "cs", 2, 80, 12, 1], [1, "cs", 0, 79, 14, 1], [1, "cs", 0, 82, 9, 1], [1, "cs", 2, 82, 8, 1], [1, "cs", 2, 82, 10, 1], [1, "cs", 2, 81, 11, 1], [1, "cs", 3, 80, 13, 1], [1, "cs", 1, 78, 30, 1], [1, "cs", 1, 78, 34, 1], [1, "cs", 1, 78, 27, 1], [1, "cs", 0, 78, 25, 1], [1, "cs", 0, 79, 29, 1], [1, "cs", 0, 79, 32, 1], [1, "cs", 0, 79, 35, 1], [1, "cs", 2, 78, 35, 1], [1, "cs", 2, 78, 36, 1], [1, "cs", 2, 79, 34, 1], [1, "cs", 2, 78, 33, 1], [1, "cs", 2, 79, 33, 1], [1, "cs", 2, 78, 32, 1], [1, "cs", 2, 78, 31, 1], [1, "cs", 2, 79, 31, 1], [1, "cs", 2, 79, 30, 1], [1, "cs", 2, 78, 29, 1], [1, "cs", 2, 78, 28, 1], [1, "cs", 2, 79, 28, 1], [1, "cs", 2, 79, 27, 1], [1, "cs", 2, 78, 26, 1], [1, "cs", 2, 79, 26, 1], [1, "cs", 2, 78, 24, 1], [1, "cs", 2, 80, 34, 1], [1, "cs", 2, 80, 33, 1], [1, "cs", 2, 80, 31, 1], [1, "cs", 2, 80, 30, 1], [1, "cs", 2, 80, 32, 1], [1, "cs", 2, 80, 29, 1], [1, "cs", 2, 80, 28, 1], [1, "cs", 2, 80, 27, 1], [1, "cs", 0, 81, 30, 1], [1, "cs", 1, 81, 32, 1], [1, "cs", 1, 81, 28, 1], [1, "cs", 2, 81, 29, 1], [1, "cs", 2, 81, 31, 1], [1, "cs", 2, 81, 33, 1], [1, "cs", 2, 82, 30, 1], [1, "cs", 2, 82, 31, 1], [1, "cs", 2, 82, 32, 1], [1, "cs", 0, 37, 36, 1], [1, "cs", 2, 38, 36, 1], [1, "cs", 2, 37, 35, 1], [1, "cs", 2, 36, 36, 1], [1, "cs", 2, 34, 35, 1], [1, "cs", 2, 35, 35, 1], [1, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, 1], [1, "cs", 1, 35, 34, 1], [1, "cs", 2, 36, 34, 1], [1, "cs", 2, 34, 34, 1], [1, "cs", 2, 36, 33, 1], [1, "cs", 2, 35, 33, 1], [1, "cs", 2, 34, 33, 1], [1, "cs", 2, 33, 33, 1], [1, "cs", 2, 31, 32, 1], [1, "cs", 1, 36, 32, 1], [1, "cs", 1, 32, 32, 1], [1, "cs", 2, 35, 32, 1], [1, "cs", 2, 33, 32, 1], [1, "cs", 2, 32, 33, 1], [1, "cs", 2, 33, 31, 1], [1, "cs", 2, 34, 31, 1], [1, "cs", 2, 35, 31, 1], [1, "cs", 0, 34, 32, 1], [1, "cs", 2, 35, 30, 1], [1, "cs", 1, 39, 23, 1], [1, "cs", 3, 39, 22, 1], [1, "cs", 3, 36, 24, 1], [1, "cs", 3, 35, 24, 1], [1, "cs", 2, 34, 23, 1], [1, "cs", 2, 35, 23, 1], [1, "cs", 2, 36, 20, 1], [1, "cs", 2, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [1, "cs", 2, 35, 16, 1], [1, "cs", 2, 34, 16, 1], [1, "cs", 2, 33, 16, 1], [1, "cs", 0, 34, 17, 1], [1, "cs", 0, 32, 15, 1], [1, "cs", 2, 31, 14, 1], [1, "cs", 3, 30, 13, 1], [1, "cs", 1, 33, 15, 1], [1, "cs", 1, 31, 13, 1], [1, "cs", 2, 32, 14, 1], [1, "cs", 0, 31, 8, 1], [1, "cs", 2, 32, 8, 1], [1, "cs", 2, 25, 13, 1], [1, "cs", 0, 25, 12, 1], [1, "cs", 2, 25, 11, 1], [1, "cs", 3, 25, 10, 1], [1, "cs", 0, 25, 9, 1], [1, "cs", 2, 25, 8, 1], [1, "cs", 2, 26, 8, 1], [1, "cs", 2, 27, 8, 1], [1, "cs", 2, 28, 8, 1], [1, "cs", 2, 29, 8, 1], [1, "cs", 2, 30, 8, 1], [1, "cs", 2, 26, 9, 1], [1, "cs", 2, 27, 9, 1], [1, "cs", 2, 26, 10, 1], [1, "cs", 1, 27, 10, 1], [1, "cs", 3, 28, 9, 1], [1, "cs", 3, 25, 14, 1], [1, "cs", 0, 25, 15, 1], [1, "cs", 2, 26, 15, 1], [1, "cs", 3, 27, 16, 1], [1, "cs", 0, 28, 17, 1], [1, "cs", 1, 29, 18, 1], [1, "cs", 2, 26, 16, 1], [1, "cs", 2, 25, 16, 1], [1, "cs", 2, 27, 17, 1], [1, "cs", 2, 26, 17, 1], [1, "cs", 1, 27, 18, 1], [1, "cs", 2, 28, 18, 1], [1, "cs", 2, 30, 19, 1], [1, "cs", 2, 29, 19, 1], [1, "cs", 2, 24, 14, 1], [1, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, 1], [1, "cs", 2, 24, 10, 1], [1, "cs", 2, 24, 11, 1], [1, "cs", 2, 24, 12, 1], [1, "cs", 2, 24, 13, 1], [1, "cs", 1, 23, 10, 1], [1, "cs", 0, 22, 8, 1], [1, "cs", 0, 22, 12, 1], [1, "cs", 1, 23, 8, 1], [1, "cs", 2, 24, 8, 1], [1, "cs", 2, 24, 9, 1], [1, "cs", 2, 23, 9, 1], [1, "cs", 2, 22, 9, 1], [1, "cs", 2, 22, 10, 1], [1, "cs", 2, 22, 11, 1], [1, "cs", 2, 23, 11, 1], [1, "cs", 2, 23, 12, 1], [1, "cs", 2, 23, 13, 1], [1, "cs", 2, 22, 13, 1], [1, "cs", 2, 21, 9, 1], [1, "cs", 2, 21, 8, 1], [1, "cs", 2, 29, 25, 1], [1, "cs", 2, 25, 24, 1], [1, "cs", 2, 26, 25, 1], [1, "cs", 2, 27, 25, 1], [1, "cs", 0, 28, 25, 1], [1, "cs", 1, 25, 23, 1], [1, "cs", 2, 26, 24, 1], [1, "cs", 0, 24, 25, 1], [1, "cs", 3, 23, 24, 1], [1, "cs", 3, 24, 24, 1], [1, "cs", 3, 25, 25, 1], [1, "cs", 3, 23, 25, 1], [1, "cs", 1, 22, 26, 1], [1, "cs", 1, 26, 26, 1], [1, "cs", 1, 29, 26, 1], [1, "cs", 2, 23, 26, 1], [1, "cs", 2, 24, 26, 1], [1, "cs", 2, 25, 26, 1], [1, "cs", 2, 27, 26, 1], [1, "cs", 2, 28, 26, 1], [1, "cs", 2, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [1, "cs", 2, 28, 28, 1], [1, "cs", 1, 26, 29, 1], [1, "cs", 0, 28, 27, 1], [1, "cs", 2, 27, 28, 1], [1, "cs", 2, 27, 27, 1], [1, "cs", 2, 26, 28, 1], [1, "cs", 2, 26, 27, 1], [1, "cs", 2, 25, 28, 1], [1, "cs", 2, 25, 27, 1], [1, "cs", 2, 23, 27, 1], [1, "cs", 2, 22, 27, 1], [1, "cs", 2, 24, 27, 1], [1, "cs", 0, 24, 28, 1], [1, "cs", 0, 25, 32, 1], [1, "cs", 1, 24, 30, 1], [1, "cs", 2, 25, 31, 1], [1, "cs", 2, 25, 30, 1], [1, "cs", 2, 25, 29, 1], [1, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, 1], [1, "cs", 2, 26, 33, 1], [1, "cs", 0, 26, 34, 1], [1, "cs", 2, 27, 35, 1], [1, "cs", 2, 22, 28, 1], [1, "cs", 2, 23, 28, 1], [1, "cs", 2, 24, 31, 1], [1, "cs", 2, 24, 32, 1], [1, "cs", 2, 25, 33, 1], [1, "cs", 2, 26, 35, 1], [1, "cs", 2, 24, 33, 1], [1, "cs", 2, 25, 34, 1], [1, "cs", 1, 22, 29, 1], [1, "cs", 1, 24, 34, 1], [1, "cs", 0, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [1, "cs", 2, 24, 35, 1], [1, "cs", 2, 23, 34, 1], [1, "cs", 2, 23, 33, 1], [1, "cs", 0, 22, 33, 1], [1, "cs", 1, 23, 32, 1], [1, "cs", 2, 22, 32, 1], [1, "cs", 2, 23, 31, 1], [1, "cs", 2, 23, 30, 1], [1, "cs", 2, 22, 30, 1], [1, "cs", 2, 22, 31, 1], [1, "cs", 1, 21, 31, 1], [1, "cs", 0, 21, 29, 1], [1, "cs", 2, 21, 30, 1], [1, "cs", 2, 24, 36, 1], [1, "cs", 2, 26, 36, 1], [1, "cs", 2, 25, 36, 1], [1, "cs", 2, 27, 36, 1], [1, "cs", 2, 28, 36, 1], [1, "d", 2, 83, 65, 1], [1, "d", 2, 16, 67, 1], [1, "g", 0, 15, 17, 1], [1, "s", 0, 18, 13, 1], [1, "s", 0, 85, 11, 1], [1, "f", 0, 41, 102, 1], [1, "f", 0, 42, 124, 1], [1, "f", 0, 64, 116, 1], [1, "f", 0, 74, 104, 1], [1, "f", 0, 70, 87, 1], [1, "f", 0, 27, 96, 1], [1, "f", 0, 22, 79, 1], [1, "f", 0, 20, 117, 1], [1, "f", 0, 30, 137, 1], [1, "f", 0, 59, 146, 1], [1, "f", 0, 52, 147, 1], [1, "f", 0, 20, 149, 1], [1, "f", 0, 36, 146, 1], [1, "f", 0, 62, 124, 1], [1, "g", 1, 34, 121, 1], [1, "g", 1, 52, 116, 1], [1, "g", 1, 78, 116, 1], [1, "g", 1, 71, 129, 1], [1, "s", 0, 53, 100, 1], [1, "s", 0, 73, 111, 1], [1, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, 1], [1, "s", 0, 19, 102, 1], [1, "s", 0, 18, 127, 1], [1, "s", 0, 35, 159, 1], [1, "s", 0, 65, 54, 1], [1, "s", 0, 44, 52, 1], [1, "s", 0, 26, 51, 1], [1, "f", 1, 56, 136, 1], [1, "f", 1, 41, 133, 1], [1, "f", 1, 80, 120, 1], [1, "f", 1, 16, 117, 1], [1, "f", 1, 13, 99, 1], [1, "f", 1, 17, 89, 1], [1, "f", 1, 90, 98, 1], [1, "f", 1, 84, 95, 1], [1, "f", 1, 16, 57, 1], [1, "f", 1, 77, 53, 1], [1, "d", 1, 48, 35, 1], [1, "de", 8, 33, 13, 0], [1, "de", 8, 30, 9, 0], [1, "de", 9, 32, 30, 0], [1, "de", 10, 30, 25, 0], [1, "de", 10, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, 0], [1, "de", 9, 70, 22, 0], [1, "de", 10, 70, 16, 0], [1, "de", 10, 75, 11, 0], [1, "de", 8, 68, 10, 0], [1, "de", 8, 75, 30, 0], [1, "de", 11, 71, 33, 0], [1, "de", 11, 72, 25, 0], [1, "de", 11, 64, 25, 0], [1, "de", 11, 52, 10, 0], [1, "de", 11, 31, 15, 0], [1, "de", 30, 29, 14, 0], [1, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, 0], [1, "de", 30, 30, 29, 0], [1, "de", 30, 71, 29, 0], [1, "de", 28, 68, 25, 0], [1, "de", 28, 75, 15, 0], [1, "de", 27, 67, 19, 0], [1, "de", 29, 72, 10, 0], [1, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, 0], [1, "fo", 1, 39, 12, 0], [1, "fo", 1, 34, 14, 0], [1, "fo", 1, 74, 28, 0], [1, "fo", 2, 74, 29, 0], [1, "fo", 2, 69, 30, 0], [1, "fo", 2, 77, 22, 0], [1, "fo", 2, 74, 21, 0], [1, "fo", 2, 76, 18, 0], [1, "fo", 1, 78, 17, 0], [1, "fo", 1, 28, 19, 0], [1, "fo", 2, 27, 24, 0], [1, "fo", 2, 24, 17, 0], [1, "fo", 2, 29, 21, 0], [1, "fo", 1, 27, 32, 0], [1, "fo", 2, 30, 33, 0], [1, "fo", 1, 29, 28, 0], [1, "fo", 2, 28, 31, 0], [1, "fo", 2, 20, 24, 0], [1, "fo", 2, 20, 26, 0], [1, "fo", 2, 23, 16, 0], [1, "fo", 2, 11, 25, 0], [1, "de", 33, 29, 22, 0], [1, "de", 34, 32, 25, 0], [1, "de", 34, 30, 18, 0], [1, "de", 33, 78, 18, 0], [1, "de", 33, 73, 35, 0], [1, "de", 36, 72, 23, 0], [1, "de", 35, 25, 18, 0], [1, "d", 1, 83, 41, 1], [1, "d", 1, 17, 40, 1], [1, "cs", 2, 224, 104, 1], [1, "cs", 0, 224, 105, 1], [1, "cs", 3, 224, 106, 1], [1, "la", 3, 216, 128, 1], [1, "la", 0, 215, 126, 1], [1, "s", 0, 216, 130, 1], [1, "s", 1, 217, 129, 1], [1, "s", 0, 218, 128, 1], [1, "s", 1, 217, 127, 1], [1, "s", 0, 217, 126, 1], [1, "s", 1, 217, 125, 1], [1, "s", 0, 216, 124, 1], [1, "s", 1, 215, 124, 1], [1, "s", 0, 214, 124, 1], [1, "s", 1, 213, 125, 1], [1, "s", 0, 213, 126, 1], [1, "plm", 2, 217, 130, 0], [1, "plm", 2, 212, 125, 0], [1, "p", 0, 214, 134, 1], [1, "s", 1, 211, 126, 1], [1, "b", 1, 45, 277, 0], [1, "b", 1, 50, 286, 0], [1, "b", 2, 51, 284, 0], [1, "b", 1, 47, 287, 0], [1, "b", 0, 39, 285, 0], [1, "b", 3, 40, 283, 0], [1, "b", 0, 52, 283, 0], [1, "b", 1, 51, 280, 0], [1, "g", 0, 45, 269, 1], [1, "p", 0, 55, 281, 1], [1, "b", 1, 5, 172, 0], [1, "b", 2, 6, 172, 0], [1, "t", 5, 6, 171, 0], [1, "t", 1, 5, 170, 0], [1, "t", 1, 5, 164, 0], [1, "t", 3, 6, 164, 0], [1, "b", 0, 6, 165, 0], [1, "t", 3, 5, 165, 0], [1, "b", 2, 6, 166, 0], [1, "t", 4, 5, 166, 0], [1, "t", 4, 6, 167, 0], [1, "t", 2, 6, 168, 0], [1, "t", 0, 6, 169, 0], [1, "t", 4, 6, 170, 0], [1, "t", 0, 5, 167, 0], [1, "t", 2, 5, 169, 0], [1, "b", 0, 5, 168, 0], [1, "s", 1, 7, 153, 1], [1, "s", 2, 7, 151, 1], [1, "de", 5, 7, 152, 0], [1, "t", 1, 5, 154, 0], [1, "b", 0, 6, 154, 0], [1, "t", 2, 6, 155, 0], [1, "b", 2, 6, 156, 0], [1, "t", 2, 5, 157, 0], [1, "t", 4, 5, 155, 0], [1, "b", 0, 6, 157, 0], [1, "t", 1, 5, 156, 0], [1, "t", 5, 6, 158, 0], [1, "b", 2, 6, 159, 0], [1, "b", 0, 6, 162, 0], [1, "t", 4, 6, 163, 0], [1, "t", 4, 6, 161, 0], [1, "b", 1, 6, 160, 0], [1, "b", 2, 5, 163, 0], [1, "b", 2, 5, 158, 0], [1, "b", 2, 5, 161, 0], [1, "t", 1, 5, 162, 0], [1, "t", 1, 5, 160, 0], [1, "b", 1, 85, 176, 0], [1, "b", 2, 83, 178, 0], [1, "s", 1, 82, 177, 1], [1, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [1, "t", 3, 73, 174, 0], [1, "t", 5, 72, 175, 0], [1, "t", 5, 87, 173, 0], [1, "de", 2, 76, 175, 0], [1, "de", 3, 77, 171, 0], [1, "de", 3, 86, 177, 0], [1, "de", 2, 71, 175, 0], [1, "s", 1, 70, 174, 1], [1, "r", 48, 174, 0], [1, "r", 49, 175, 0], [1, "r", 50, 175, 0], [1, "r", 51, 175, 0], [1, "r", 51, 174, 0], [1, "r", 50, 174, 0], [1, "r", 49, 174, 0], [1, "r", 52, 175, 0], [1, "r", 52, 176, 0], [1, "r", 51, 176, 0], [1, "r", 50, 176, 0], [1, "r", 49, 176, 0], [1, "r", 48, 175, 0], [1, "r", 47, 175, 0], [1, "r", 48, 176, 0], [1, "r", 69, 163, 0], [1, "r", 70, 163, 0], [1, "r", 71, 163, 0], [1, "r", 73, 163, 0], [1, "r", 72, 163, 0], [1, "r", 73, 164, 0], [1, "r", 72, 164, 0], [1, "r", 71, 164, 0], [1, "r", 70, 164, 0], [1, "r", 69, 164, 0], [1, "r", 68, 164, 0], [1, "r", 68, 165, 0], [1, "r", 69, 165, 0], [1, "r", 70, 165, 0], [1, "r", 71, 165, 0], [1, "r", 72, 165, 0], [1, "r", 74, 164, 0], [1, "r", 73, 165, 0], [1, "r", 72, 166, 0], [1, "r", 71, 166, 0], [1, "r", 70, 166, 0], [1, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, 0], [1, "r", 26, 164, 0], [1, "r", 28, 165, 0], [1, "r", 26, 165, 0], [1, "r", 27, 165, 0], [1, "r", 25, 165, 0], [1, "r", 24, 165, 0], [1, "r", 23, 165, 0], [1, "r", 22, 165, 0], [1, "r", 21, 165, 0], [1, "r", 21, 166, 0], [1, "r", 22, 166, 0], [1, "r", 23, 166, 0], [1, "r", 24, 166, 0], [1, "r", 25, 166, 0], [1, "r", 26, 166, 0], [1, "r", 27, 166, 0], [1, "r", 28, 166, 0], [1, "r", 28, 167, 0], [1, "r", 26, 167, 0], [1, "r", 25, 167, 0], [1, "r", 24, 167, 0], [1, "r", 23, 167, 0], [1, "r", 22, 167, 0], [1, "r", 27, 167, 0], [1, "r", 29, 166, 0], [1, "r", 29, 167, 0], [1, "r", 28, 168, 0], [1, "r", 27, 168, 0], [1, "r", 26, 168, 0], [1, "r", 25, 168, 0], [1, "r", 24, 168, 0], [1, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, 0], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [1, "r", 23, 169, 0], [1, "r", 22, 168, 0], [1, "r", 21, 167, 0], [1, "s", 1, 52, 174, 1], [1, "t", 3, 50, 177, 0], [1, "t", 4, 49, 177, 0], [1, "b", 0, 47, 174, 0], [1, "b", 0, 69, 166, 0], [1, "t", 2, 68, 166, 0], [1, "t", 5, 74, 163, 0], [1, "t", 1, 73, 162, 0], [1, "s", 0, 73, 166, 1], [1, "s", 2, 76, 165, 1], [1, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, 1], [1, "p", 0, 61, 162, 1], [1, "p", 0, 42, 170, 1], [1, "p", 0, 20, 174, 1], [1, "p", 0, 16, 160, 1], [1, "b", 1, 23, 164, 0], [1, "b", 1, 28, 169, 0], [1, "b", 2, 29, 168, 0], [1, "b", 2, 16, 170, 0], [1, "t", 1, 15, 171, 0], [1, "t", 5, 13, 175, 0], [1, "t", 5, 19, 166, 0], [1, "t", 5, 26, 163, 0], [1, "s", 1, 29, 165, 1], [1, "t", 5, 11, 167, 0], [1, "t", 0, 29, 176, 0], [1, "b", 2, 30, 175, 0], [1, "t", 2, 24, 177, 0], [1, "b", 1, 37, 174, 0], [1, "b", 0, 35, 172, 0], [1, "b", 3, 37, 170, 0], [1, "t", 4, 38, 169, 0], [1, "t", 4, 34, 173, 0], [1, "t", 5, 38, 175, 0], [1, "b", 2, 39, 173, 0], [1, "t", 3, 37, 176, 0], [1, "t", 4, 30, 168, 0], [1, "s", 2, 35, 176, 1], [1, "s", 1, 41, 175, 1], [1, "b", 2, 53, 176, 0], [1, "t", 5, 55, 173, 0], [1, "t", 5, 45, 170, 0], [1, "b", 1, 53, 162, 0], [1, "b", 0, 50, 164, 0], [1, "t", 2, 54, 163, 0], [1, "t", 3, 49, 165, 0], [1, "t", 4, 48, 160, 0], [1, "t", 4, 57, 164, 0], [1, "t", 4, 66, 162, 0], [1, "b", 1, 86, 161, 0], [1, "b", 2, 81, 163, 0], [1, "t", 3, 85, 162, 0], [1, "t", 5, 81, 162, 0], [1, "t", 5, 88, 163, 0], [1, "t", 1, 84, 166, 0], [1, "t", 5, 72, 160, 0], [1, "t", 5, 70, 170, 0], [1, "s", 1, 57, 162, 1], [1, "b", 1, 39, 161, 0], [1, "b", 0, 34, 164, 0], [1, "b", 2, 54, 164, 0], [1, "t", 1, 59, 169, 0], [1, "t", 3, 60, 170, 0], [1, "t", 4, 63, 169, 0], [1, "t", 4, 63, 174, 0], [1, "t", 1, 62, 175, 0], [1, "t", 5, 40, 162, 0], [1, "t", 1, 63, 180, 0], [1, "t", 2, 64, 179, 0], [1, "t", 2, 35, 165, 0], [1, "s", 1, 63, 173, 1], [1, "s", 2, 40, 165, 1], [1, "b", 0, 46, 169, 0], [1, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, 0], [1, "de", 22, 83, 175, 0], [1, "de", 22, 78, 175, 0], [1, "de", 19, 72, 176, 0], [1, "de", 19, 68, 168, 0], [1, "de", 19, 65, 163, 0], [1, "de", 19, 75, 162, 0], [1, "de", 19, 80, 162, 0], [1, "de", 19, 88, 159, 0], [1, "de", 19, 87, 164, 0], [1, "de", 19, 61, 177, 0], [1, "de", 19, 59, 172, 0], [1, "de", 19, 59, 167, 0], [1, "de", 19, 53, 165, 0], [1, "de", 19, 56, 163, 0], [1, "de", 19, 51, 161, 0], [1, "de", 19, 48, 167, 0], [1, "de", 19, 47, 170, 0], [1, "de", 19, 41, 163, 0], [1, "de", 19, 37, 161, 0], [1, "de", 19, 36, 166, 0], [1, "de", 19, 36, 171, 0], [1, "de", 19, 34, 174, 0], [1, "de", 19, 40, 172, 0], [1, "de", 19, 38, 177, 0], [1, "de", 19, 42, 176, 0], [1, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, 0], [1, "de", 19, 64, 181, 0], [1, "de", 19, 64, 175, 0], [1, "de", 19, 79, 172, 0], [1, "de", 19, 30, 170, 0], [1, "de", 19, 17, 168, 0], [1, "de", 19, 14, 173, 0], [1, "de", 19, 12, 162, 0], [1, "de", 19, 9, 167, 0], [1, "de", 19, 20, 161, 0], [1, "de", 19, 27, 162, 0], [1, "de", 19, 83, 195, 0], [1, "de", 2, 85, 163, 0], [1, "de", 2, 80, 164, 0], [1, "de", 2, 84, 169, 0], [1, "de", 2, 55, 165, 0], [1, "de", 3, 46, 163, 0], [1, "de", 2, 66, 169, 0], [1, "de", 0, 63, 175, 0], [1, "de", 0, 34, 164, 0], [1, "de", 0, 18, 160, 0], [1, "de", 2, 40, 160, 0], [1, "de", 2, 53, 160, 0], [1, "de", 2, 14, 170, 0], [1, "de", 2, 19, 175, 0], [1, "de", 2, 23, 176, 0], [1, "de", 5, 60, 147, 0], [1, "de", 33, 59, 160, 0], [1, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [1, "de", 33, 62, 140, 0], [1, "de", 33, 43, 127, 0], [1, "de", 33, 18, 129, 0], [1, "de", 33, 50, 134, 0], [1, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, 0], [1, "b", 1, 44, 156, 0], [1, "t", 2, 45, 157, 0], [1, "b", 0, 75, 156, 0], [1, "t", 3, 76, 157, 0], [1, "t", 5, 62, 157, 0], [1, "t", 5, 79, 156, 0], [1, "t", 5, 41, 156, 0], [1, "b", 1, 28, 156, 0], [1, "t", 2, 27, 157, 0], [1, "t", 4, 21, 156, 0], [1, "t", 4, 56, 159, 0], [1, "f", 1, 94, 153, 1], [1, "f", 2, 93, 153, 1], [1, "f", 2, 99, 153, 1], [1, "f", 1, 98, 153, 1], [1, "f", 0, 97, 153, 1], [1, "f", 1, 96, 153, 1], [1, "s", 1, 7, 149, 1], [1, "de", 4, 7, 150, 0], [1, "b", 3, 43, 281, 0], [1, "de", 50, 24, 39, 0], [1, "de", 50, 21, 39, 0], [1, "de", 50, 22, 43, 0], [1, "de", 50, 15, 34, 0], [1, "de", 50, 18, 26, 0], [1, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, 0], [1, "de", 50, 77, 44, 0], [1, "de", 50, 71, 41, 0], [1, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [1, "de", 50, 20, 41, 0], [1, "de", 50, 18, 21, 0], [1, "de", 50, 15, 21, 0], [1, "de", 50, 18, 19, 0], [1, "de", 50, 17, 17, 0], [1, "de", 50, 18, 10, 0], [1, "de", 50, 18, 9, 0], [1, "de", 50, 52, 41, 0], [1, "de", 50, 82, 39, 0], [1, "de", 50, 86, 38, 0], [1, "de", 50, 84, 31, 0], [1, "de", 50, 86, 30, 0], [1, "de", 50, 84, 26, 0], [1, "de", 50, 86, 23, 0], [1, "de", 50, 86, 14, 0], [1, "de", 50, 29, 42, 0], [1, "de", 9, 74, 37, 0], [1, "de", 9, 76, 22, 0], [1, "de", 10, 79, 24, 0], [1, "de", 11, 77, 17, 0], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, 0], [1, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [1, "de", 28, 27, 31, 0], [1, "de", 28, 69, 36, 0], [1, "de", 28, 80, 20, 0], [1, "de", 51, 24, 155, 0], [1, "de", 51, 7, 154, 0], [1, "de", 51, 11, 154, 0], [1, "de", 51, 12, 156, 0], [1, "de", 51, 16, 154, 0], [1, "de", 51, 20, 154, 0], [1, "de", 51, 23, 154, 0], [1, "de", 51, 18, 157, 0], [1, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, 0], [1, "de", 51, 86, 154, 0], [1, "de", 51, 88, 156, 0], [1, "de", 51, 82, 154, 0], [1, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, 0], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [1, "de", 51, 67, 154, 0], [1, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [1, "de", 51, 65, 154, 0], [1, "de", 51, 68, 156, 0], [1, "de", 51, 59, 156, 0], [1, "de", 51, 55, 154, 0], [1, "de", 51, 54, 154, 0], [1, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, 0], [1, "de", 51, 54, 157, 0], [1, "de", 51, 49, 154, 0], [1, "de", 51, 46, 154, 0], [1, "de", 51, 44, 154, 0], [1, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, 0], [1, "de", 51, 38, 154, 0], [1, "de", 51, 39, 156, 0], [1, "de", 51, 34, 154, 0], [1, "de", 5, 19, 142, 0], [1, "de", 5, 37, 147, 0], [1, "de", 7, 53, 147, 0], [1, "de", 6, 69, 150, 0], [1, "de", 4, 94, 148, 0], [1, "de", 4, 66, 147, 0], [1, "de", 4, 10, 145, 0], [1, "de", 4, 28, 137, 0], [1, "de", 4, 15, 137, 0], [1, "de", 4, 48, 134, 0], [1, "de", 5, 67, 135, 0], [1, "de", 34, 84, 155, 0], [1, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, 0], [1, "de", 35, 56, 157, 0], [1, "de", 35, 65, 159, 0], [1, "de", 35, 23, 156, 0], [1, "de", 35, 15, 155, 0], [1, "de", 35, 8, 155, 0], [1, "de", 33, 13, 155, 0], [1, "de", 33, 33, 158, 0], [1, "de", 36, 78, 155, 0], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, 0], [1, "fo", 1, 80, 24, 0], [1, "fo", 2, 67, 36, 0], [1, "fo", 2, 45, 36, 0], [1, "fo", 2, 53, 34, 0], [1, "fo", 1, 51, 35, 0], [1, "fo", 1, 58, 35, 0], [1, "fo", 1, 33, 35, 0], [1, "fo", 1, 31, 33, 0], [1, "fo", 2, 29, 36, 0], [1, "fo", 2, 56, 36, 0], [1, "fo", 2, 60, 37, 0], [1, "fo", 2, 45, 32, 0], [1, "fo", 2, 22, 25, 0], [1, "fo", 2, 21, 35, 0], [1, "de", 52, 90, 208, 0], [1, "de", 18, 94, 250, 0], [1, "de", 17, 95, 253, 0], [1, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, 5, 1], [1, "cs", 2, 138, 5, 1], [1, "cs", 2, 138, 6, 1], [1, "cs", 2, 139, 6, 1], [1, "cs", 2, 141, 6, 1], [1, "cs", 2, 140, 6, 1], [1, "la", 3, 143, 7, 1], [1, "la", 3, 139, 7, 1], [1, "cs", 0, 137, 7, 1], [1, "cs", 1, 138, 8, 1], [1, "cs", 2, 137, 6, 1], [1, "cs", 2, 137, 8, 1], [1, "cs", 2, 136, 7, 1], [1, "cs", 2, 138, 9, 1], [1, "cs", 3, 139, 9, 1], [1, "cs", 3, 136, 8, 1], [1, "cs", 3, 137, 9, 1], [1, "de", 53, 92, 165, 0], [1, "de", 53, 92, 180, 0], [1, "de", 53, 92, 188, 0], [1, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [1, "de", 54, 90, 153, 0], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, 0], [1, "de", 54, 87, 153, 0], [1, "de", 54, 86, 153, 0], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, 0], [1, "de", 54, 82, 153, 0], [1, "de", 54, 81, 153, 0], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, 0], [1, "de", 54, 78, 153, 0], [1, "de", 54, 77, 153, 0], [1, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [1, "de", 54, 72, 153, 0], [1, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, 0], [1, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, 0], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, 0], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, 0], [1, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, 0], [1, "de", 54, 57, 153, 0], [1, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, 0], [1, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, 0], [1, "de", 54, 53, 153, 0], [1, "de", 54, 52, 153, 0], [1, "de", 54, 51, 153, 0], [1, "de", 54, 50, 153, 0], [1, "de", 54, 49, 153, 0], [1, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, 0], [1, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [1, "de", 54, 44, 153, 0], [1, "de", 54, 43, 153, 0], [1, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, 0], [1, "de", 54, 40, 153, 0], [1, "de", 54, 39, 153, 0], [1, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, 0], [1, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, 0], [1, "de", 54, 34, 153, 0], [1, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, 0], [1, "de", 54, 31, 153, 0], [1, "de", 54, 30, 153, 0], [1, "de", 54, 29, 153, 0], [1, "de", 54, 28, 153, 0], [1, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, 0], [1, "de", 54, 24, 153, 0], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, 0], [1, "de", 54, 21, 153, 0], [1, "de", 54, 20, 153, 0], [1, "de", 54, 19, 153, 0], [1, "de", 54, 18, 153, 0], [1, "de", 54, 17, 153, 0], [1, "de", 54, 16, 153, 0], [1, "de", 54, 15, 153, 0], [1, "de", 54, 14, 153, 0], [1, "de", 54, 13, 153, 0], [1, "de", 54, 12, 153, 0], [1, "de", 54, 11, 153, 0], [1, "de", 54, 10, 153, 0], [1, "de", 54, 8, 153, 0], [1, "de", 54, 9, 153, 0], [1, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, 10, 0], [1, "de", 55, 83, 11, 0], [1, "de", 55, 83, 12, 0], [1, "de", 55, 83, 13, 0], [1, "de", 55, 83, 14, 0], [1, "de", 55, 83, 15, 0], [1, "de", 55, 83, 16, 0], [1, "de", 55, 83, 17, 0], [1, "de", 55, 83, 19, 0], [1, "de", 55, 83, 18, 0], [1, "de", 55, 83, 20, 0], [1, "de", 55, 83, 21, 0], [1, "de", 55, 83, 22, 0], [1, "de", 55, 83, 23, 0], [1, "de", 55, 83, 24, 0], [1, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, 0], [1, "de", 55, 83, 27, 0], [1, "de", 55, 83, 28, 0], [1, "de", 55, 83, 29, 0], [1, "de", 55, 83, 30, 0], [1, "de", 55, 83, 31, 0], [1, "de", 55, 83, 32, 0], [1, "de", 55, 83, 33, 0], [1, "de", 55, 83, 34, 0], [1, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, 0], [1, "de", 55, 83, 37, 0], [1, "de", 55, 83, 38, 0], [1, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, 0], [1, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, 0], [1, "de", 55, 76, 38, 0], [1, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, 0], [1, "de", 55, 74, 38, 0], [1, "de", 55, 72, 38, 0], [1, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, 0], [1, "de", 55, 69, 38, 0], [1, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [1, "de", 55, 65, 38, 0], [1, "de", 55, 64, 38, 0], [1, "de", 55, 63, 38, 0], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, 0], [1, "de", 55, 61, 38, 0], [1, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, 0], [1, "de", 55, 58, 38, 0], [1, "de", 55, 56, 38, 0], [1, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, 0], [1, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, 0], [1, "de", 55, 49, 38, 0], [1, "de", 55, 50, 38, 0], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, 0], [1, "de", 55, 46, 38, 0], [1, "de", 55, 45, 38, 0], [1, "de", 55, 44, 38, 0], [1, "de", 55, 43, 38, 0], [1, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [1, "de", 55, 40, 38, 0], [1, "de", 55, 39, 38, 0], [1, "de", 55, 38, 38, 0], [1, "de", 55, 37, 38, 0], [1, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, 0], [1, "de", 55, 33, 38, 0], [1, "de", 55, 31, 38, 0], [1, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [1, "de", 55, 29, 38, 0], [1, "de", 55, 28, 38, 0], [1, "de", 55, 27, 38, 0], [1, "de", 55, 26, 38, 0], [1, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, 0], [1, "de", 55, 23, 38, 0], [1, "de", 55, 21, 38, 0], [1, "de", 55, 22, 38, 0], [1, "de", 55, 20, 38, 0], [1, "de", 55, 19, 38, 0], [1, "de", 55, 19, 37, 0], [1, "de", 55, 19, 36, 0], [1, "de", 55, 19, 35, 0], [1, "de", 55, 19, 34, 0], [1, "de", 55, 19, 33, 0], [1, "de", 55, 19, 32, 0], [1, "de", 55, 19, 31, 0], [1, "de", 55, 19, 30, 0], [1, "de", 55, 19, 28, 0], [1, "de", 55, 19, 29, 0], [1, "de", 55, 19, 27, 0], [1, "de", 55, 19, 26, 0], [1, "de", 55, 19, 25, 0], [1, "de", 55, 19, 24, 0], [1, "de", 55, 19, 23, 0], [1, "de", 55, 19, 22, 0], [1, "de", 55, 19, 21, 0], [1, "de", 55, 19, 20, 0], [1, "de", 55, 19, 18, 0], [1, "de", 55, 19, 19, 0], [1, "de", 55, 19, 16, 0], [1, "de", 55, 19, 17, 0], [1, "de", 55, 19, 15, 0], [1, "de", 55, 19, 14, 0], [1, "de", 55, 19, 13, 0], [1, "de", 55, 19, 12, 0], [1, "de", 55, 19, 11, 0], [1, "de", 55, 19, 10, 0], [1, "de", 55, 19, 9, 0], [1, "de", 55, 19, 8, 0], [1, "de", 55, 84, 35, 0], [1, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, 0], [1, "de", 50, 84, 24, 0], [1, "de", 55, 84, 20, 0], [1, "de", 55, 84, 17, 0], [1, "de", 55, 84, 16, 0], [1, "de", 50, 84, 15, 0], [1, "de", 55, 84, 8, 0], [1, "de", 55, 84, 9, 0], [1, "de", 50, 85, 11, 0], [1, "de", 55, 81, 39, 0], [1, "de", 50, 83, 40, 0], [1, "de", 55, 72, 39, 0], [1, "de", 55, 74, 39, 0], [1, "de", 55, 66, 39, 0], [1, "de", 55, 65, 39, 0], [1, "de", 50, 67, 41, 0], [1, "de", 55, 56, 39, 0], [1, "de", 55, 58, 39, 0], [1, "de", 55, 50, 39, 0], [1, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, 0], [1, "de", 55, 42, 39, 0], [1, "de", 50, 43, 39, 0], [1, "de", 50, 41, 39, 0], [1, "de", 50, 37, 39, 0], [1, "de", 55, 36, 39, 0], [1, "de", 55, 32, 39, 0], [1, "de", 50, 31, 39, 0], [1, "de", 55, 23, 39, 0], [1, "de", 55, 18, 37, 0], [1, "de", 50, 18, 36, 0], [1, "de", 55, 18, 35, 0], [1, "de", 50, 18, 34, 0], [1, "de", 55, 18, 31, 0], [1, "de", 50, 18, 30, 0], [1, "de", 55, 18, 25, 0], [1, "de", 50, 18, 24, 0], [1, "de", 55, 18, 20, 0], [1, "de", 55, 18, 14, 0], [1, "de", 50, 18, 15, 0], [1, "de", 55, 18, 8, 0], [1, "de", 54, 90, 154, 0], [1, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, 0], [1, "de", 54, 76, 154, 0], [1, "de", 54, 70, 154, 0], [1, "de", 54, 66, 154, 0], [1, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, 0], [1, "de", 54, 53, 154, 0], [1, "de", 54, 45, 154, 0], [1, "de", 54, 42, 154, 0], [1, "de", 54, 37, 154, 0], [1, "de", 54, 30, 154, 0], [1, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [1, "de", 54, 10, 154, 0], [1, "de", 54, 8, 154, 0], [1, "de", 55, 20, 9, 0], [1, "de", 53, 93, 154, 0], [1, "de", 53, 93, 156, 0], [1, "de", 53, 93, 158, 0], [1, "de", 52, 91, 157, 0], [1, "de", 53, 93, 159, 0], [1, "de", 53, 93, 161, 0], [1, "de", 53, 93, 162, 0], [1, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, 0], [1, "de", 53, 93, 165, 0], [1, "de", 53, 93, 166, 0], [1, "de", 53, 93, 167, 0], [1, "de", 52, 91, 167, 0], [1, "de", 53, 93, 169, 0], [1, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, 0], [1, "de", 53, 93, 171, 0], [1, "de", 53, 93, 173, 0], [1, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, 0], [1, "de", 53, 92, 169, 0], [1, "de", 53, 93, 178, 0], [1, "de", 53, 93, 179, 0], [1, "de", 53, 93, 180, 0], [1, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [1, "de", 53, 93, 184, 0], [1, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, 0], [1, "de", 53, 93, 187, 0], [1, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, 0], [1, "de", 53, 93, 192, 0], [1, "de", 53, 93, 195, 0], [1, "de", 53, 93, 194, 0], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, 0], [1, "de", 53, 93, 202, 0], [1, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, 0], [1, "de", 53, 93, 206, 0], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, 0], [1, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, 0], [1, "de", 53, 93, 212, 0], [1, "de", 52, 91, 204, 0], [1, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, 0], [1, "de", 53, 93, 215, 0], [1, "de", 53, 93, 216, 0], [1, "de", 53, 93, 217, 0], [1, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, 0], [1, "de", 53, 93, 220, 0], [1, "de", 52, 92, 213, 0], [1, "de", 52, 92, 206, 0], [1, "de", 52, 92, 202, 0], [1, "de", 53, 92, 201, 0], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [1, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, 0], [1, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, 0], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, 0], [1, "de", 52, 92, 221, 0], [1, "de", 52, 92, 225, 0], [1, "de", 52, 93, 226, 0], [1, "de", 52, 93, 224, 0], [1, "de", 52, 93, 208, 0], [1, "de", 52, 93, 211, 0], [1, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, 0], [1, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, 0], [1, "de", 52, 93, 182, 0], [1, "de", 52, 93, 185, 0], [1, "de", 52, 93, 172, 0], [1, "de", 52, 93, 174, 0], [1, "de", 52, 93, 177, 0], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, 0], [1, "de", 52, 93, 160, 0], [1, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, 0], [1, "de", 53, 93, 231, 0], [1, "de", 53, 93, 232, 0], [1, "de", 53, 93, 234, 0], [1, "de", 52, 93, 230, 0], [1, "de", 52, 92, 228, 0], [1, "de", 53, 93, 235, 0], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, 0], [1, "de", 53, 93, 239, 0], [1, "de", 53, 93, 240, 0], [1, "de", 52, 93, 238, 0], [1, "de", 53, 93, 241, 0], [1, "de", 52, 93, 242, 0], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [1, "de", 53, 93, 246, 0], [1, "de", 53, 93, 245, 0], [1, "de", 52, 93, 247, 0], [1, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [1, "de", 52, 93, 249, 0], [1, "de", 53, 93, 250, 0], [1, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [1, "de", 52, 93, 255, 0], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, 256, 0], [1, "de", 52, 93, 258, 0], [1, "de", 53, 93, 259, 0], [1, "de", 52, 93, 260, 0], [1, "de", 53, 93, 263, 0], [1, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, 0], [1, "de", 52, 93, 266, 0], [1, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [1, "de", 53, 93, 277, 0], [1, "de", 52, 93, 278, 0], [1, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, 0], [1, "de", 52, 93, 283, 0], [1, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, 0], [1, "de", 53, 93, 286, 0], [1, "de", 52, 93, 287, 0], [1, "de", 53, 93, 288, 0], [1, "de", 53, 93, 289, 0], [1, "de", 52, 93, 290, 0], [1, "de", 52, 93, 291, 0], [1, "de", 53, 93, 292, 0], [1, "de", 52, 93, 293, 0], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [1, "de", 52, 93, 296, 0], [1, "de", 53, 93, 297, 0], [1, "de", 53, 93, 298, 0], [1, "de", 52, 93, 299, 0], [1, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, 0], [1, "r", 93, 262, 0], [1, "de", 52, 93, 261, 0], [1, "cs", 0, 223, 104, 1], [1, "cs", 2, 223, 105, 1], [1, "cs", 2, 223, 102, 1], [1, "cs", 2, 223, 103, 1], [1, "la", 3, 141, 8, 1], [1, "cs", 2, 140, 9, 1], [1, "la", 4, 142, 9, 1], [1, "de", 4, 81, 149, 0], [1, "f", 0, 83, 148, 1], [1, "f", 1, 82, 149, 1], [1, "de", 34, 81, 156, 0], [1, "de", 51, 17, 9, 0], [1, "de", 54, 16, 9, 0], [1, "de", 54, 15, 9, 0], [1, "cs", 3, 223, 106, 1], [1, "p", 0, 119, 279, 1], [1, "p", 0, 109, 242, 1], [1, "cs", 1, 29, 9, 1], [1, "cs", 2, 30, 9, 1], [1, "cs", 2, 31, 9, 1], [1, "cs", 2, 32, 9, 1], [1, "cs", 2, 33, 9, 1], [1, "cs", 2, 69, 9, 1], [1, "cs", 2, 71, 9, 1], [1, "cs", 2, 70, 9, 1], [1, "cs", 1, 72, 9, 1], [1, "cs", 2, 73, 9, 1], [1, "de", 10, 31, 10, 0], [1, "de", 10, 29, 10, 0], [1, "de", 10, 44, 10, 0], [1, "de", 4, 87, 10, 0], [1, "de", 4, 86, 10, 0], [1, "de", 5, 87, 9, 0], [1, "de", 5, 13, 10, 0], [1, "de", 4, 14, 11, 0], [1, "de", 4, 16, 10, 0], [1, "de", 4, 17, 10, 0], [1, "cs", 2, 146, 9, 1], [1, "cs", 2, 148, 9, 1], [1, "cs", 2, 150, 9, 1], [1, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, 9, 1], [1, "cs", 1, 149, 9, 1], [1, "cs", 1, 154, 9, 1], [1, "cs", 3, 147, 9, 1], [1, "cs", 3, 151, 9, 1], [1, "cs", 3, 152, 9, 1], [1, "cs", 3, 156, 9, 1], [1, "cs", 3, 157, 9, 1], [1, "cs", 3, 158, 9, 1], [1, "cs", 3, 159, 9, 1], [1, "cs", 3, 160, 9, 1], [1, "cs", 0, 161, 9, 1], [1, "cs", 2, 162, 9, 1], [1, "cs", 2, 163, 9, 1], [1, "cs", 1, 164, 9, 1], [1, "cs", 2, 165, 9, 1], [1, "cs", 3, 166, 9, 1], [1, "cs", 3, 168, 9, 1], [1, "cs", 3, 170, 9, 1], [1, "cs", 1, 169, 9, 1], [1, "cs", 2, 167, 9, 1], [1, "cs", 2, 171, 9, 1], [1, "cs", 2, 173, 9, 1], [1, "cs", 2, 172, 9, 1], [1, "cs", 2, 174, 9, 1], [1, "cs", 1, 175, 9, 1], [1, "cs", 3, 176, 9, 1], [1, "cs", 3, 178, 9, 1], [1, "cs", 3, 179, 9, 1], [1, "cs", 0, 180, 9, 1], [1, "cs", 2, 177, 9, 1], [1, "cs", 2, 182, 9, 1], [1, "cs", 2, 181, 9, 1], [1, "cs", 2, 183, 9, 1], [1, "cs", 2, 184, 9, 1], [1, "cs", 2, 185, 9, 1], [1, "cs", 2, 186, 9, 1], [1, "cs", 1, 187, 9, 1], [1, "cs", 2, 188, 9, 1], [1, "cs", 3, 189, 9, 1], [1, "cs", 3, 190, 9, 1], [1, "cs", 3, 191, 9, 1], [1, "cs", 2, 192, 9, 1], [1, "cs", 0, 193, 9, 1], [1, "cs", 2, 194, 9, 1], [1, "cs", 2, 196, 9, 1], [1, "cs", 2, 198, 9, 1], [1, "cs", 2, 200, 9, 1], [1, "cs", 3, 195, 9, 1], [1, "cs", 3, 197, 9, 1], [1, "cs", 3, 199, 9, 1], [1, "cs", 0, 201, 9, 1], [1, "cs", 2, 202, 9, 1], [1, "cs", 2, 203, 9, 1], [1, "cs", 3, 208, 9, 1], [1, "cs", 3, 207, 9, 1], [1, "cs", 3, 206, 9, 1], [1, "cs", 3, 205, 9, 1], [1, "cs", 3, 204, 9, 1], [1, "cs", 3, 214, 9, 1], [1, "cs", 3, 215, 9, 1], [1, "cs", 3, 216, 9, 1], [1, "cs", 3, 217, 9, 1], [1, "cs", 3, 218, 9, 1], [1, "b", 0, 5, 159, 0], [1, "b", 0, 5, 171, 0], [2, "isl", 1, 122, 63, 0], [2, "isl", 2, 119, 277, 0], [2, "isl", 2, 109, 244, 0], [2, "isl", 2, 114, 205, 0], [2, "isl", 1, 120, 150, 0], [2, "isl", 2, 154, 129, 0], [2, "isl", 0, 184, 158, 0], [2, "isl", 1, 208, 128, 0], [2, "isl", 1, 215, 132, 0], [2, "isl", 1, 214, 128, 0], [2, "isl", 1, 209, 132, 0], [1, "la", 3, 217, 20, 1], [1, "la", 1, 215, 19, 1], [1, "la", 0, 212, 18, 1], [1, "la", 4, 214, 18, 1], [1, "la", 4, 216, 19, 1], [1, "la", 4, 211, 20, 1], [1, "la", 3, 210, 19, 1], [1, "la", 3, 215, 21, 1], [1, "la", 1, 214, 20, 1], [1, "la", 3, 214, 22, 1], [1, "la", 3, 214, 24, 1], [1, "la", 4, 214, 26, 1], [1, "la", 4, 213, 27, 1], [1, "la", 1, 212, 28, 1], [1, "la", 2, 212, 29, 1], [1, "la", 5, 212, 30, 1], [1, "la", 4, 208, 19, 1], [1, "la", 4, 207, 19, 1], [1, "la", 1, 206, 19, 1], [1, "la", 1, 205, 19, 1], [1, "la", 2, 204, 19, 1], [1, "la", 5, 203, 19, 1], [1, "la", 3, 210, 17, 1]];
  var ks = 0;
  const ls = Ee;
  const ms = 14;
  let ns = {
    ⵠΔᐃⲆΔ: ["#133A2B", "#042b30"],
    ΔⲆᐃⲆΔΔᐃᐃᐃ: ["#EBF2F0", "#136167"],
    ᐃᐃⲆⲆⲆΔΔ: ["#4EB687", "#187484"],
    ΔⵠᐃⲆⲆⲆΔ: ["#664516", "#13474C"],
    ⲆⵠΔΔⵠⵠⲆ: ["#FCEFBB", "#0F4D48"],
    ᐃΔⲆⲆΔⵠΔ: ["#C1AA7E", "#0F423D"],
    ᐃᐃᐃⲆⲆᐃⵠ: ["#594837", "#163A3A"],
    ΔΔⵠΔᐃⲆⲆ: ["#A5D6D6", "#539CA0"],
    ᐃⲆⲆᐃⵠ: ["#0B6A84", "#09373F"],
    ⵠᐃⵠⵠΔΔᐃ: ["#2A8B9B", "#0F464C"],
    ΔᐃⲆⲆⵠⵠⵠ: ["#A9D6D3", "#115E60"],
    ⵠⲆⲆΔⲆⵠᐃ: ["#ECF7F9", "#539CA0"],
    ⵠᐃᐃΔΔΔⲆ: ["#FFF", "#FFF"],
    ᐃΔᐃⲆⲆⲆⵠ: ["#FFF", "#FFF"],
    ⵠⵠⲆΔⵠⲆᐃ: ["#1C9BA4", "#00272F"],
    ΔΔᐃᐃᐃ: ["#2D2017", "#031C1E"],
    ⵠᐃⵠ: 0,
    ᐃᐃⵠ: 1,
    ᐃⵠⲆᐃⵠⲆⲆⲆⵠ: 2300,
    ⵠⲆΔⲆᐃⵠⵠⵠⲆ: 2290,
    ΔᐃΔᐃΔᐃⲆ: 34,
    ᐃᐃⵠⵠᐃᐃᐃ: 5,
    ⵠⵠᐃⲆⵠᐃⲆ: 68,
    ᐃᐃⵠᐃⲆΔⲆ: 34,
    ᐃΔⵠᐃⵠⵠΔ: 5,
    ΔΔⲆΔⵠⵠΔ: 1,
    ⵠΔⵠⵠⵠⲆⵠ: 0.6,
    ΔΔⲆᐃΔⵠⵠ: 0.25,
    ΔᐃⲆⲆⵠᐃᐃ: 50,
    ᐃⵠⲆΔΔᐃⲆ: 10,
    ᐃⲆΔⲆⲆᐃᐃ: 75,
    ΔΔⲆΔⵠᐃᐃ: 20,
    ⵠΔΔⵠⵠΔⲆ: 5,
    ⲆᐃΔⵠⵠ: 0,
    ⵠΔᐃⵠᐃ: 1,
    ⲆᐃⵠⲆᐃ: 2,
    ⲆⲆⲆᐃⲆ: 3,
    ΔⵠΔΔᐃ: 4,
    ⵠΔΔⵠΔ: 5,
    ΔⲆⵠⵠΔ: 6,
    ⵠⲆⵠⵠⲆ: 7,
    Ⲇⵠᐃⵠᐃ: 8,
    ᐃⵠⲆⵠⲆ: 9,
    ΔⵠᐃᐃⲆ: 10,
    ᐃⵠᐃΔⲆ: 11,
    ⲆᐃⲆᐃᐃ: 12,
    ΔᐃΔⵠΔ: 13,
    ΔᐃⵠΔᐃ: 14,
    ⵠⲆᐃⲆΔ: 15,
    ΔᐃΔΔⲆ: 16,
    ΔⵠⵠΔᐃ: 17,
    ᐃΔⵠᐃᐃ: 18,
    ⲆΔⵠⲆⲆ: 19,
    ᐃⵠⲆΔⵠ: 20,
    ⵠᐃⲆⲆΔ: 21,
    ΔⵠΔᐃⵠ: 22,
    ΔⵠᐃⲆⵠ: 23,
    ᐃⲆᐃᐃⲆ: 24,
    ᐃΔⲆⲆᐃ: 25,
    ⵠᐃᐃⲆⲆ: 26,
    ⲆᐃΔΔΔ: 27,
    ᐃᐃⲆᐃⲆ: 28,
    Ⲇᐃᐃⵠ: 29,
    ⲆᐃΔⲆⵠ: 30,
    ⵠⲆⵠⲆⵠ: 31,
    ⵠᐃⵠΔⲆ: 32,
    ᐃᐃᐃⵠⵠ: 33,
    ΔⲆⵠⲆᐃ: 34,
    ⲆⵠᐃᐃΔ: 35,
    ᐃⵠⵠᐃΔ: 36,
    ⲆΔΔΔΔ: 37,
    ᐃⲆᐃⲆΔ: 38,
    ΔⵠᐃⲆΔ: 39,
    ⲆⲆⵠⲆⵠ: 40,
    ΔΔⲆᐃᐃ: 41,
    ΔⲆⲆⵠⵠ: 42,
    ᐃΔᐃⵠⵠ: 43,
    ΔΔΔᐃᐃ: 44,
    ΔⲆΔⵠⲆ: 45,
    ΔΔⵠΔⵠ: 46,
    ᐃΔⲆⲆΔ: 47,
    ΔᐃⵠⲆΔ: 48,
    ⵠⵠⵠΔΔ: 49,
    ⲆΔⲆⲆⲆ: 50,
    ⲆΔᐃΔᐃ: 51,
    Δᐃᐃᐃᐃ: 52,
    ΔⲆᐃᐃⲆ: 53,
    ⲆᐃⵠΔⲆ: 54,
    ᐃⲆⲆΔΔ: 55,
    ⲆᐃⲆⲆⲆ: 56,
    ⲆΔⵠΔΔ: 57,
    ⵠᐃⵠⵠΔ: 58,
    ⲆⲆΔⵠⲆ: 59,
    ᐃΔⲆᐃⵠ: 60,
    ⵠᐃᐃᐃᐃ: 61,
    ⲆΔⵠⵠΔ: 62,
    ᐃᐃⵠⲆᐃ: 63,
    ΔᐃⲆⵠΔ: 64,
    ΔΔΔΔⲆ: 65,
    ⵠⲆⲆⲆⲆ: 66,
    ΔⲆⲆᐃⵠ: 67,
    ⲆᐃⲆⲆⵠ: 68,
    Δⵠⵠᐃⵠ: 69,
    ⵠᐃⲆⵠΔ: 70,
    ⵠΔⵠᐃᐃ: 71,
    ⲆᐃⵠⲆⵠ: 72,
    ⲆⵠΔⲆΔ: 73,
    ᐃΔΔⲆⲆ: 74,
    ΔΔᐃΔᐃ: 75,
    Ⲇⵠⵠⵠⵠ: 76,
    ⵠⲆᐃⵠⲆ: 77,
    ⵠⵠⲆⲆΔ: 78,
    ΔᐃⲆⲆⵠ: 79,
    ΔΔⵠᐃΔ: 80,
    ⵠᐃⵠⲆΔ: 81,
    ᐃᐃⵠᐃΔ: 82,
    ⵠⵠᐃΔⲆ: 83,
    ⲆⵠᐃΔᐃ: 84,
    ⲆᐃΔΔⵠ: 85,
    ⲆᐃᐃⲆⵠ: 86,
    ⵠⲆΔⵠⵠ: 87,
    ⵠⵠΔⲆⲆ: 88,
    ΔⵠⵠᐃⲆ: 89,
    ΔⲆᐃⵠΔ: 90,
    ⵠΔⵠᐃΔ: 91,
    ᐃΔⵠⲆᐃ: 92,
    ⵠΔⵠΔⲆ: 93,
    ⵠΔΔⲆⵠ: 94,
    ᐃᐃⵠⵠᐃ: 95,
    ⲆⵠΔΔⲆ: 96,
    ⵠⲆⵠᐃᐃ: 97,
    ᐃⲆΔⵠⲆ: 98,
    ⲆᐃⵠⵠΔ: 99,
    ᐃᐃⲆᐃⲆⵠᐃⲆⲆ: 100,
    ᐃᐃⲆᐃⵠ: 101,
    ᐃΔᐃⲆΔ: 102,
    ΔΔᐃᐃⲆ: 103,
    ⵠⵠⵠⲆΔ: 104,
    ᐃᐃⵠᐃⲆ: 105,
    ᐃⵠᐃⵠΔ: 106,
    ΔⲆᐃⵠⲆ: 107,
    ⵠⵠᐃᐃⵠ: 108,
    ΔᐃᐃΔ: 109,
    ΔᐃⲆᐃⵠ: 110,
    ᐃΔⵠⵠ: 111,
    ΔⵠⲆᐃ: 112,
    ΔⵠⲆⵠⵠᐃᐃ: 113,
    ΔⵠⲆᐃⲆ: 114,
    ⲆⵠΔⲆΔᐃᐃ: 115,
    ᐃⵠΔΔⲆ: 116,
    ⵠᐃⵠᐃⵠ: 117,
    ΔⲆⲆᐃΔⵠΔ: 118,
    ⵠΔᐃⵠⲆⲆΔ: 119,
    ᐃᐃΔΔΔ: 120,
    ⲆΔⵠⵠ: 121,
    ⲆⵠⲆᐃΔ: 122,
    ⵠΔᐃⵠΔ: 123,
    ⲆⵠⵠⲆΔΔⵠ: 124,
    ⲆΔⵠΔⲆ: 125,
    ᐃⵠΔΔᐃ: 126,
    ⵠⲆᐃΔⵠ: 127,
    ⲆⲆⵠΔᐃ: 128,
    ᐃⵠⲆⲆⲆ: 129,
    ⵠΔΔⲆⲆ: 130,
    ᐃΔⵠⵠᐃ: 131,
    ⵠᐃⲆΔᐃ: 132,
    ᐃⵠⲆᐃⵠ: 133,
    ⵠⲆΔᐃᐃ: 134,
    Ⲇⵠⵠᐃᐃ: 135,
    ΔᐃᐃⲆⵠ: 136,
    ⵠⲆΔⵠΔ: 137,
    ⲆⵠⲆⲆᐃ: 138,
    ⵠⲆᐃΔΔ: 139,
    ᐃⲆΔΔⲆᐃΔ: 140,
    ΔᐃΔⵠᐃ: 141,
    ᐃⵠⲆᐃΔⲆΔ: 142,
    ⲆᐃᐃⲆⲆᐃΔ: 143,
    ⲆᐃⵠΔᐃΔⵠ: 144,
    ᐃⲆⵠⲆΔᐃᐃ: 145,
    ᐃΔᐃΔΔ: 146,
    ⵠⲆⲆΔΔ: 147,
    ⵠⵠᐃΔᐃ: 148,
    ⲆΔΔᐃᐃ: 149,
    ⲆⵠⵠΔΔ: 150,
    ΔⲆⲆⵠᐃ: 151,
    ΔⵠⲆⵠΔ: 152,
    ⲆⵠⲆⲆⵠ: 153,
    ᐃⵠΔⵠⲆ: 154,
    Δᐃᐃᐃⵠ: 155,
    ⲆΔᐃᐃᐃ: 156,
    ᐃⵠⲆᐃᐃ: 157,
    ΔᐃⲆΔⲆ: 158,
    Ⲇᐃᐃⵠᐃ: 159,
    Δⵠⵠⵠᐃ: 160,
    ᐃΔⲆⵠᐃ: 161,
    ᐃⲆⲆⵠΔ: 162,
    ⲆΔΔⲆᐃ: 163,
    ΔⵠΔᐃᐃ: 164,
    ΔᐃΔⲆⲆ: 165,
    ⲆⵠᐃⲆᐃᐃᐃ: 166,
    ⵠⵠⵠΔᐃ: 167,
    ⲆⲆⵠᐃΔ: 168,
    ⵠⲆᐃᐃᐃ: 169,
    ⵠⵠⲆᐃⲆ: 170,
    ⲆΔᐃᐃᐃⲆⲆ: 171,
    ⵠΔΔⵠⲆⵠⲆ: 172,
    ⲆᐃᐃΔⲆΔΔ: 173,
    ⵠⲆⲆⵠⵠ: 174,
    ⵠⲆΔⲆⲆᐃⲆ: 175,
    ΔΔΔΔⲆⲆⲆ: 176,
    ΔⵠᐃΔⲆⲆⵠ: 177,
    ⵠⲆⵠΔⵠᐃⵠ: 178,
    ᐃⲆΔᐃᐃΔⵠ: 179,
    ⲆⵠⲆΔΔΔⲆ: 180,
    ΔⵠΔⲆᐃΔⲆ: 181,
    ᐃⲆᐃⲆᐃⵠⲆ: 182,
    ᐃᐃΔⲆᐃ: 183,
    ᐃⲆⲆⲆⲆ: 184,
    ⲆᐃⲆᐃΔ: 185,
    ᐃᐃΔΔⲆ: 186,
    ΔⲆⵠΔΔ: 187,
    ᐃⵠⵠᐃⲆⵠⲆ: 188,
    ⵠⲆΔᐃⲆ: 189,
    ᐃᐃⲆΔⲆ: 190,
    ⲆⲆⲆᐃⲆᐃⵠ: 191,
    ᐃⲆᐃΔⵠ: 192,
    ᐃΔⵠⲆⵠⲆΔ: 193,
    ⵠᐃⲆᐃᐃ: 194,
    ΔΔᐃᐃΔ: 195,
    ⲆᐃᐃⵠᐃⲆⲆ: 196,
    ΔᐃᐃᐃⲆᐃⲆ: 197,
    ⵠⲆⵠᐃΔ: 198,
    ⲆΔⵠⵠᐃ: 199,
    ᐃⲆᐃⵠⲆⲆᐃ: 200,
    ΔΔⲆΔⲆ: 201,
    ΔΔⲆᐃ: 202,
    ⲆᐃᐃᐃⲆ: 203,
    ⲆⵠⲆΔᐃⵠᐃ: 204,
    ⵠΔⲆᐃᐃ: 205,
    ⵠᐃΔᐃΔⲆⲆ: 206,
    ⲆⵠᐃᐃⲆ: 207,
    ΔⵠΔᐃᐃⵠΔ: 208,
    ᐃᐃⵠⵠΔ: 209,
    ⵠⲆⲆᐃᐃΔΔ: 210,
    ᐃⲆΔⵠⲆΔⵠ: 211,
    ⵠⵠᐃⲆΔ: 212,
    ᐃⲆᐃⵠΔ: 213,
    ⵠΔⵠⵠᐃ: 214,
    ⲆⲆⵠΔΔ: 215,
    ΔΔⵠᐃᐃ: 216,
    ΔΔⵠΔΔ: 217,
    ΔΔΔⲆⲆ: 218,
    ΔⲆΔⵠⵠ: 219,
    ΔᐃⵠΔΔ: 220,
    ᐃⵠⲆΔᐃ: 221,
    ⲆⵠⵠΔⵠ: 222,
    ᐃⵠᐃⵠᐃ: 223,
    ᐃⲆᐃΔᐃ: 224,
    ΔᐃⲆⵠᐃΔⵠ: 225,
    ⵠΔⲆⵠᐃⲆⲆ: 226,
    ⵠᐃᐃᐃΔ: 227,
    ΔᐃᐃⵠΔⵠⵠ: 228,
    ⲆⵠⲆᐃⲆ: 229,
    ⲆᐃΔⲆᐃ: 230,
    ᐃΔᐃⵠᐃ: 231,
    ΔΔᐃⲆΔ: 232,
    ⲆΔⲆᐃⵠ: 233,
    ⲆΔΔᐃᐃⵠΔ: 234,
    ᐃⵠᐃⵠⵠ: 235,
    ⵠΔΔⵠⵠ: 236,
    ⵠΔΔΔⲆ: 237,
    ΔⲆⵠΔⵠ: 238,
    ΔᐃΔᐃΔ: 239,
    ⲆΔΔⵠⲆ: 240,
    ⲆⵠⲆΔᐃ: 241,
    ⲆⵠⵠⵠⲆ: 242,
    ⲆᐃΔⵠᐃⲆⵠ: 243,
    ⵠⲆⲆⲆᐃ: 244,
    ᐃⲆⵠⵠᐃ: 245,
    ΔᐃⵠⲆⵠᐃⵠ: 246,
    ⲆⲆᐃΔⵠ: 247,
    ᐃⵠⵠⵠΔ: 248,
    ΔΔΔⲆΔⵠΔ: 249,
    ⲆᐃⵠⲆⲆ: 250,
    ⵠᐃⵠᐃⲆ: 251,
    ⲆⲆᐃⵠⵠᐃΔ: 252,
    ⵠΔΔⵠⵠⵠᐃ: 253,
    ᐃΔᐃⵠᐃⲆᐃ: 254,
    ᐃⵠᐃᐃΔ: 255,
    ⲆⵠΔⲆⲆᐃᐃ: 256,
    ⲆⲆⵠᐃᐃᐃⲆ: 257,
    ᐃΔⲆᐃΔΔΔ: 258,
    ᐃᐃΔⲆᐃΔᐃ: 259,
    ⵠⵠΔⲆⵠ: 260,
    ᐃΔⲆⵠΔᐃᐃ: 261,
    ᐃΔΔΔⵠⵠⵠ: 262,
    ⲆΔⵠΔⲆⲆⲆ: 263,
    ᐃⵠⲆⵠⵠ: 264,
    ᐃΔΔΔⲆΔᐃ: 265,
    ᐃⵠΔΔⲆⵠⵠ: 266,
    ΔᐃⲆᐃᐃᐃᐃ: 267,
    ⲆⵠⵠΔⲆⵠᐃ: 268,
    ᐃⲆΔⵠᐃᐃᐃ: 269,
    ⵠⲆΔⲆⵠⵠΔ: 270,
    ΔΔΔⲆᐃⵠⵠ: 271,
    ⵠΔᐃⲆⵠⲆⵠ: 272,
    ⲆΔΔᐃᐃΔΔ: 273,
    ᐃᐃᐃᐃΔᐃᐃ: 274,
    ⵠΔⵠⲆΔᐃⵠ: 275,
    ᐃⵠⵠⲆⲆΔⵠ: 276,
    ⵠΔᐃᐃⵠΔⵠ: 277,
    ΔᐃᐃᐃᐃⲆⵠ: 278,
    ⵠⵠΔᐃ: 279,
    ⵠᐃⵠⵠⲆ: 280,
    ᐃΔⲆΔⵠΔΔ: 281,
    ⲆᐃᐃⵠⵠΔⲆ: 282,
    ⵠΔ: 283,
    ᐃⵠⲆᐃⵠᐃⵠ: 284,
    ᐃᐃⲆΔΔ: 285,
    ⵠⵠⵠᐃⵠ: 286,
    ⲆⲆΔᐃΔⵠᐃ: 287,
    ⲆⲆⲆⲆⲆ: 288,
    ⵠΔⲆⲆⲆⲆᐃ: 289,
    ΔⲆⲆᐃⵠΔᐃ: 290,
    ⵠⵠⵠⲆᐃΔᐃ: 291,
    ⵠⵠᐃⲆⲆΔⵠ: 292,
    ΔᐃⵠΔⵠⲆⵠ: 293,
    ⵠⵠⵠⲆⲆ: 294,
    ΔΔⲆⵠⵠᐃᐃ: 295,
    ⵠᐃⲆⵠᐃⲆΔ: 296,
    ΔⲆΔⵠⵠᐃᐃ: 297,
    ᐃΔⲆΔᐃΔΔ: 298,
    ΔⵠᐃⲆⲆ: 299,
    ⵠⲆΔⲆⲆⵠⲆ: 300,
    ᐃⲆᐃᐃⲆΔΔ: 301,
    ΔᐃΔⲆΔⲆᐃ: 302,
    ᐃⲆᐃⲆᐃⵠΔ: 303,
    ΔΔΔΔΔⵠᐃ: 304,
    ᐃⵠⲆⲆⲆΔⵠ: 305,
    ᐃⵠⲆⲆᐃⵠΔ: 306,
    ΔⲆⲆⵠⲆ: 307,
    ⵠΔⲆⲆᐃΔΔ: 308,
    ᐃⵠⲆᐃⲆⵠⲆ: 309,
    ⲆΔⵠᐃⵠΔⲆ: 310,
    ⵠⵠᐃᐃΔᐃⵠ: 311,
    ⲆⵠᐃⲆⵠᐃⵠ: 312,
    ᐃⵠⵠΔⵠΔᐃ: 313,
    ᐃⵠΔⵠΔⵠᐃ: 314,
    ⲆⲆⵠᐃⵠΔⲆ: 315,
    ΔΔᐃᐃΔⲆⵠ: 316,
    ⵠΔⵠᐃΔⲆⲆ: 317,
    ⲆΔⵠΔᐃⲆⲆ: 318,
    ⵠΔΔᐃⲆⵠΔ: 319,
    ᐃⵠⵠΔⲆⵠⵠ: 320,
    ᐃⵠⵠΔⲆ: 321,
    ᐃᐃⲆᐃΔⵠΔ: 322,
    ᐃᐃΔᐃΔⵠᐃ: 323,
    ⲆΔⵠᐃΔᐃΔ: 324,
    ᐃⵠⵠⲆΔⵠⲆ: 325,
    ᐃᐃⵠᐃⲆⵠΔ: 326,
    ΔΔᐃᐃⵠⵠᐃ: 327,
    ΔⵠⲆΔⲆΔΔ: 328,
    ⲆⵠᐃⵠᐃᐃⲆ: 329,
    ⵠⲆⵠΔⲆⲆΔ: 330,
    ⵠⲆΔΔᐃⲆⵠ: 331,
    ᐃⲆᐃΔᐃⲆᐃ: 332,
    ᐃΔᐃΔᐃΔⲆ: 333,
    ⲆΔᐃΔⵠᐃⵠ: 334,
    ⲆⵠⵠⲆⵠᐃⵠ: 335,
    ΔⲆⲆΔᐃᐃΔ: 336,
    ΔⲆⵠⲆΔᐃᐃ: 337,
    ⲆⲆΔⵠⲆΔΔ: 338,
    ⵠⵠᐃᐃΔⵠⵠ: 339,
    ᐃⲆᐃⲆⲆΔᐃ: 340,
    ⵠⲆΔΔⵠΔⵠ: 341,
    ⵠⵠΔΔᐃⲆΔ: 342,
    ⲆᐃⲆⲆΔΔⲆ: 343,
    ⵠⲆⵠⵠΔⲆΔ: 344,
    ⵠΔⲆⵠᐃⲆΔ: 345,
    ᐃⲆⲆᐃⵠⲆᐃ: 346,
    ⵠᐃⲆΔⵠΔᐃⲆⵠ: 347,
    ⵠⲆᐃᐃⵠᐃᐃ: 348,
    ᐃⵠΔⵠⵠᐃᐃ: 349,
    ΔΔΔᐃⲆⵠⵠ: 350,
    ΔΔⵠᐃⵠΔΔ: 351,
    ᐃⵠⵠΔⵠⲆᐃ: 352,
    ⵠⲆⵠΔᐃⵠⵠ: 353,
    Ⲇⵠᐃᐃᐃⵠⵠ: 354,
    ᐃᐃᐃⵠⵠⵠⵠ: 355,
    ᐃΔⵠⲆΔⵠⲆ: 356,
    ᐃⲆᐃᐃᐃΔᐃ: 357,
    ⲆᐃⲆΔⲆᐃⲆ: 358,
    ΔⲆⲆⲆΔᐃΔ: 359,
    ᐃⵠⲆΔⲆᐃⵠ: 360,
    ΔⵠⵠᐃⲆᐃⵠ: 361,
    ΔⲆⵠⵠᐃΔᐃ: 362,
    ΔⵠⵠΔⵠΔᐃ: 363,
    ⲆⲆⵠⵠΔΔᐃ: 364,
    ΔⲆⵠᐃΔᐃⲆ: 365,
    ⲆⵠΔᐃⵠⲆⲆ: 366,
    ᐃᐃⵠⵠΔᐃⵠ: 367,
    ⲆⵠⲆᐃⵠΔᐃ: 368,
    ⵠⲆⲆᐃⵠⵠⵠ: 369,
    ᐃᐃⲆΔᐃᐃΔ: 370,
    ⵠΔΔΔⲆΔᐃ: 371,
    ⵠⵠⵠⲆⲆⲆⵠ: 372,
    ᐃᐃΔΔⲆⵠᐃ: 373,
    ΔᐃᐃᐃⵠΔᐃ: 374,
    ⵠⵠⵠΔⲆΔΔ: 375,
    ⲆᐃΔᐃⲆⵠᐃ: 376,
    ⵠᐃΔΔⵠΔⵠ: 377,
    ⲆⵠⵠⵠᐃⲆⵠ: 378,
    ΔΔⲆⲆⵠΔᐃ: 379,
    ⵠⲆΔΔΔⵠⲆ: 380,
    ΔΔΔⵠᐃᐃⵠ: 381,
    ⵠⲆⲆΔⲆⲆⵠ: 382,
    ΔⵠⵠⵠᐃΔⵠ: 383,
    ᐃᐃⲆᐃᐃⲆᐃ: 384,
    ⵠᐃⲆⲆⲆᐃⲆ: 385,
    ⲆⵠΔⵠⲆⲆᐃ: 386,
    ⵠᐃⵠΔΔᐃΔ: 387,
    ⲆⵠⲆⵠΔⲆΔ: 388,
    ΔⵠΔⵠⵠΔⵠ: 389,
    ⵠⲆⲆᐃᐃⲆᐃ: 390,
    ΔⵠΔᐃΔΔⵠ: 391,
    ⵠΔⵠᐃΔΔᐃ: 392,
    ΔⵠⵠᐃᐃⵠⲆ: 393,
    ΔΔΔⵠⲆΔⵠ: 394,
    ⵠᐃⲆⲆⲆΔⵠ: 395,
    ᐃᐃΔⵠΔⲆⲆ: 396,
    ⵠⲆⵠᐃⲆⵠΔ: 397,
    ᐃΔⲆⲆⵠⵠⲆ: 398,
    ΔᐃⵠᐃⵠⲆⵠ: 399,
    ᐃᐃⵠᐃⵠⲆᐃ: 400,
    ⲆⵠⵠᐃΔᐃᐃ: 401,
    ΔⲆᐃΔΔᐃⲆ: 402,
    ⲆⲆΔⵠᐃⵠⵠ: 403,
    ᐃⵠⵠⵠᐃⲆΔ: 404,
    ᐃΔΔⵠᐃⲆᐃ: 405,
    ᐃⲆⲆⲆⲆᐃⵠ: 406,
    ᐃⲆⲆΔⲆⲆⲆ: 407,
    ⲆⲆⲆⲆⲆΔΔ: 408,
    ⲆΔΔⵠᐃⲆΔ: 409,
    ΔΔⵠᐃⲆΔⲆ: 410,
    ⲆⲆᐃΔᐃΔΔ: 411,
    ΔΔΔⵠΔᐃΔ: 412,
    ΔⵠⲆᐃΔ: 413,
    ᐃⲆⲆⲆⵠⵠⵠⲆΔ: 414,
    ΔΔⲆΔΔ: 415,
    ΔΔΔⵠⲆ: 416,
    ᐃⵠΔⲆᐃⵠⵠⵠᐃ: 417,
    ⲆΔΔΔⲆⵠᐃ: 418,
    ΔⵠⵠᐃΔ: 419,
    ⲆᐃⲆⵠΔᐃⲆ: 420,
    ⵠⵠⲆᐃⵠⵠᐃ: 421,
    ᐃᐃⵠⵠⲆⲆⵠ: 422,
    ⲆΔᐃⵠⵠⵠᐃ: 423,
    ⲆⲆⲆᐃⲆⲆΔ: 424,
    ⵠⲆⵠⲆⵠⵠᐃ: 425,
    ΔΔᐃΔᐃΔⵠ: 426,
    ᐃⵠⵠⵠⵠᐃΔ: 427,
    ᐃᐃΔⵠΔⲆᐃ: 428,
    ΔΔᐃⵠΔᐃⲆ: 429,
    ⵠΔᐃⵠⵠⲆⲆ: 430,
    ᐃΔⲆΔⲆⵠⵠ: 431,
    ⲆⵠΔᐃⵠⲆᐃ: 432,
    ΔⵠⲆⵠⲆⲆᐃ: 433,
    ᐃⵠⲆΔᐃΔⲆ: 434,
    ⲆⵠᐃⵠⵠΔΔ: 435,
    ᐃⲆΔᐃⵠⵠᐃ: 436,
    ΔᐃⲆⵠΔⲆⲆ: 437,
    ΔΔΔΔᐃⲆⲆ: 438,
    ᐃⲆΔⵠΔⵠⲆ: 439,
    ᐃΔΔᐃⲆᐃⵠ: 440,
    ⵠⵠⲆΔⵠⵠⵠ: 441,
    ΔⲆⲆᐃΔⵠⵠ: 442,
    ΔᐃⵠΔⲆᐃⲆ: 443,
    ⲆⵠⵠᐃⲆⲆΔᐃΔ: 444,
    ⵠᐃᐃΔᐃ: 445,
    ⲆⲆᐃᐃⵠΔΔ: 446,
    ⲆΔⵠⲆᐃᐃᐃ: 447,
    ᐃⵠⵠΔΔᐃΔⵠⵠ: 448,
    ΔᐃΔⵠⲆ: 449,
    ΔⲆΔⲆᐃ: 450,
    ⲆⲆⵠΔΔΔⵠ: 451,
    ⲆⵠⲆΔⲆᐃⵠ: 452,
    ΔⵠⵠΔⵠΔⵠ: 453,
    ⵠⵠΔᐃΔᐃΔ: 454,
    ⵠΔᐃⵠᐃⵠⲆ: 455,
    ⲆΔᐃⵠⵠᐃⲆ: 456,
    ⲆⲆΔᐃⵠᐃⵠ: 457,
    ᐃΔΔⲆⲆᐃⵠ: 458,
    ⲆΔⵠᐃⵠΔᐃ: 459,
    ΔᐃⵠᐃⲆΔⵠ: 460,
    ⲆⲆΔΔᐃⲆⲆ: 461,
    ΔΔΔⵠⵠᐃᐃ: 462,
    ΔΔΔⵠᐃⲆᐃ: 463,
    ⵠⵠᐃⲆᐃⵠΔ: 464,
    ᐃⲆⵠⲆᐃⵠΔ: 465,
    ⲆⵠⵠⲆᐃⵠⵠ: 466,
    ΔΔΔⵠᐃⵠⲆ: 467,
    ΔⵠΔᐃΔΔᐃ: 468,
    ⲆΔᐃⲆⵠⲆᐃ: 469,
    ⲆⲆⵠᐃⲆⵠⲆ: 470,
    ᐃⲆⲆⵠⲆⲆᐃ: 471,
    ΔΔᐃⲆΔΔΔ: 472,
    ⵠⵠΔⲆᐃⵠⵠ: 473,
    ΔᐃⵠΔᐃΔⲆ: 474,
    ⵠⵠᐃᐃⵠⲆⵠ: 475,
    ᐃΔΔΔⲆΔⵠ: 476,
    ⵠⵠⲆⲆⵠΔⵠ: 477,
    ⵠⲆⵠⲆⵠⵠΔ: 478,
    ΔᐃᐃⲆⵠΔⵠ: 479,
    ⵠᐃᐃⲆᐃΔΔ: 480,
    ΔⲆⵠⲆᐃⲆᐃ: 481,
    ΔᐃΔΔᐃⲆⲆ: 482,
    ΔⲆᐃᐃⲆᐃΔ: 483,
    ΔᐃΔᐃⵠⲆᐃ: 484,
    ᐃⲆΔⵠⵠΔᐃ: 485,
    ⵠⵠᐃⲆᐃⲆⲆ: 486,
    ⲆⲆⲆⲆⲆᐃⲆ: 487,
    ᐃΔΔᐃⵠΔΔ: 488,
    ΔᐃᐃⲆⵠᐃᐃ: 489,
    ⲆⵠⵠⵠⲆⵠᐃ: 490,
    ⵠⵠΔⲆΔⵠΔ: 491,
    ⵠΔᐃᐃⲆΔⵠ: 492,
    ᐃᐃᐃⲆⲆΔⲆ: 493,
    ΔⲆⵠΔᐃⲆᐃ: 494,
    ΔⵠⵠⵠᐃΔᐃ: 495,
    ΔⲆᐃΔᐃⲆⲆ: 496,
    ᐃΔⵠᐃΔΔᐃ: 497,
    ΔΔⵠⵠᐃᐃⵠ: 498,
    ⵠⲆΔⲆΔⵠᐃ: 499,
    ⵠⵠᐃᐃΔᐃⲆ: 500,
    ΔᐃᐃΔΔⵠⵠ: 501,
    ⵠⵠΔⵠᐃⲆΔ: 502,
    ⵠΔⲆᐃⲆᐃⵠ: 503,
    ⵠⵠΔⲆⵠᐃⵠ: 504,
    ⲆᐃᐃⵠⵠⵠⲆ: 505,
    ΔⵠΔⵠⲆⵠⲆ: 506,
    ᐃⲆⵠⲆᐃⵠΔ: 507,
    ᐃⲆⵠⲆⲆΔⲆ: 508,
    ⵠΔᐃⲆⲆⵠⵠ: 509,
    ⵠΔⵠᐃⲆᐃᐃ: 510,
    ΔᐃⵠⵠⲆᐃⲆ: 511,
    ᐃⵠᐃⲆΔⲆΔ: 512,
    ᐃⲆΔΔⵠⵠΔ: 513,
    ⵠⵠⵠⲆⵠΔᐃ: 514,
    ⵠⲆᐃΔⵠᐃΔ: 515,
    ΔᐃⲆΔᐃᐃⲆ: 516,
    ᐃⵠᐃᐃΔⵠᐃ: 517,
    ⲆⲆΔⲆⵠᐃⲆ: 518,
    ⲆΔΔᐃⲆⲆⵠ: 519,
    ⲆⵠⵠⲆⵠⵠⵠ: 520,
    ⲆᐃⲆⵠⲆⲆΔ: 521,
    ᐃⵠⵠᐃᐃⵠⲆ: 522,
    ⲆⵠΔⲆⵠᐃᐃ: 523,
    ⵠΔᐃⲆⵠⵠᐃ: 524,
    ΔΔΔΔⲆⲆⵠ: 525,
    ΔⵠᐃⲆΔΔⵠ: 526,
    ⲆΔⵠᐃⵠᐃⲆ: 527,
    Δᐃⵠᐃᐃᐃᐃ: 528,
    ΔᐃΔⲆⲆΔⲆ: 529,
    ⵠΔΔⲆᐃΔⵠ: 530,
    ⲆᐃΔⲆᐃⲆⲆ: 531,
    ⲆⵠΔⵠᐃⲆⵠ: 532,
    ⲆᐃᐃⲆⲆᐃⲆ: 533,
    ⲆⲆⲆⵠᐃⵠⲆ: 534,
    ⵠᐃⵠⲆⲆᐃΔ: 535,
    ⵠΔᐃⵠⲆΔΔ: 536,
    ⵠΔⵠΔⵠᐃΔ: 537,
    ⲆⵠᐃΔⲆⲆⵠ: 538,
    ΔⲆⵠⵠⲆⵠⵠᐃΔ: 539,
    ΔΔⲆⲆⲆⲆⵠ: 540,
    ⲆⲆⵠᐃⵠⲆⵠ: 541,
    ᐃⲆⲆᐃᐃᐃᐃ: 542,
    ᐃⲆⵠᐃⵠᐃΔ: 543,
    ⲆⵠⲆⵠᐃⵠᐃΔΔ: 544,
    POINTS: 545,
    ⲆᐃΔᐃᐃⲆᐃ: 546,
    ᐃᐃⵠΔⲆΔΔ: 547,
    ΔⲆⲆΔⵠᐃⵠ: 548,
    ⲆΔⵠᐃᐃⲆⵠ: 549,
    ⵠⵠⵠΔᐃⵠΔ: 550,
    ᐃᐃᐃΔⵠΔⵠ: 551,
    ⵠⲆᐃⲆⵠⲆᐃ: 552,
    ᐃⲆⵠⲆᐃΔⵠ: 553,
    ΔⵠⲆⲆⲆΔⲆ: 554,
    ⵠΔᐃΔΔᐃΔ: 555,
    ⵠⵠᐃΔΔⲆᐃ: 556,
    ᐃᐃⵠⲆⲆⲆⵠ: 557,
    ⵠΔⲆⲆᐃⵠᐃ: 558,
    ⲆⲆⲆⲆⵠⵠⲆ: 559,
    ᐃⲆΔΔⲆΔΔ: 560,
    ⲆⵠᐃᐃᐃⲆΔ: 561,
    ⵠᐃⵠᐃΔⵠⲆ: 562,
    ⵠᐃᐃⵠΔⵠᐃ: 563,
    ⲆΔΔⵠⲆΔⵠ: 564,
    ⵠᐃⲆⲆⵠⲆᐃ: 565,
    ΔⲆΔΔⲆᐃⵠ: 566,
    ᐃᐃᐃᐃᐃⵠⲆ: 567,
    ⵠΔᐃΔΔᐃⵠ: 568,
    ⵠⲆⵠᐃⵠⲆⵠ: 569,
    ᐃᐃⲆⵠᐃⵠⲆ: 570,
    ⵠᐃΔᐃⲆⵠᐃ: 571,
    ⵠᐃΔⲆᐃⵠΔ: 572,
    ⲆⲆᐃᐃⵠⲆⲆ: 573,
    ⲆΔᐃⲆⲆⵠᐃ: 574,
    ᐃΔⲆⵠⵠⲆⵠ: 575,
    ᐃⵠΔᐃⲆⲆΔ: 576,
    ᐃⵠᐃⵠΔᐃⵠ: 577,
    ΔΔⲆⵠⲆⵠΔ: 578,
    ᐃΔⵠⵠΔⵠᐃ: 579,
    ΔⵠⲆⲆⲆᐃΔ: 580,
    ΔⵠᐃⲆᐃⲆⲆ: 581,
    ⵠΔⲆⲆᐃΔⵠ: 582,
    ⲆΔⵠⵠⲆⲆⲆ: 583,
    ⵠⵠⵠⵠⵠᐃᐃ: 584,
    ⲆᐃⵠⵠⵠⵠΔ: 585,
    ⵠᐃΔΔⲆⲆⵠ: 586,
    ᐃⲆⲆⵠⲆΔᐃ: 587,
    ΔΔⲆΔⲆⵠᐃ: 588,
    ᐃⵠⵠⵠᐃⵠⵠ: 589,
    ΔΔᐃⲆᐃΔᐃ: 590,
    ΔⵠᐃᐃⲆⲆⲆ: 591,
    ⲆᐃΔⲆᐃᐃᐃ: 592,
    ⲆⲆΔⵠⵠΔΔΔᐃ: 593,
    ⵠⵠΔⵠΔᐃΔ: 594,
    ᐃⵠⲆΔⲆᐃⵠΔΔ: 595,
    Ⲇᐃᐃᐃⵠᐃⵠ: 596,
    ΔᐃⵠΔⵠⵠᐃᐃᐃ: 597,
    ΔⲆΔΔⲆⵠⵠᐃᐃ: 598,
    ΔᐃⲆⵠⲆⲆⲆᐃⵠ: 599,
    ⵠᐃⵠΔⲆΔⵠⲆⵠ: 600,
    ⲆⵠⵠⲆΔⲆⵠᐃᐃ: 601,
    ᐃⲆΔⲆⵠᐃⲆ: 602,
    ⲆⵠⵠⲆᐃ: 603,
    ΔⲆΔⵠⵠΔⵠ: 604,
    ⲆᐃⵠᐃΔΔΔ: 605,
    ⲆΔΔⵠᐃᐃⲆ: 606,
    ΔⵠΔᐃΔⵠΔΔⲆ: 607,
    ᐃⲆⲆⲆⵠⵠΔ: 608,
    ⵠᐃⲆⲆᐃᐃᐃ: 609,
    ⲆΔΔᐃΔⲆΔ: 610,
    ⲆⵠⲆⵠΔΔᐃ: 611,
    ⲆᐃΔⵠΔⲆⲆ: 612,
    ⲆⵠⲆⲆⵠⲆᐃ: 613,
    ⲆᐃᐃⲆᐃᐃⲆ: 614,
    ᐃⲆⲆΔΔⵠᐃ: 615,
    ΔᐃⵠⵠΔⵠⵠ: 616,
    ⲆⵠⵠⵠᐃᐃΔ: 617,
    ΔΔⵠⲆⲆⲆⲆ: 618,
    ᐃⲆᐃⵠᐃ: 619,
    ᐃΔᐃΔᐃ: 620,
    ΔΔⵠΔⲆ: 621,
    ⲆⵠⲆⵠⵠΔⵠⲆΔ: 622,
    ⲆᐃΔΔᐃⲆΔ: 623,
    ᐃⲆᐃᐃΔⲆⲆ: 624,
    ⵠᐃᐃᐃⲆΔΔ: 625,
    ᐃⲆᐃⵠᐃⵠΔ: 626,
    ⲆΔⲆᐃⵠⵠᐃ: 627,
    ⵠΔᐃᐃΔᐃⲆ: 628,
    ΔΔⵠΔⵠΔΔ: 629,
    ΔⲆⵠᐃᐃᐃⲆ: 630,
    ᐃⲆⵠΔᐃⲆⵠ: 631,
    ΔⲆⲆⲆΔᐃⲆ: 632,
    ⵠⵠΔⲆⵠⵠᐃ: 633,
    ᐃΔᐃⲆⵠᐃᐃ: 634,
    ΔⵠⵠᐃΔᐃᐃ: 635,
    ᐃⵠⵠᐃⵠⲆᐃ: 636,
    ᐃⲆⲆΔⵠ: 637,
    ᐃΔΔΔⵠΔᐃ: 638,
    ᐃᐃⲆᐃⲆᐃᐃ: 639,
    ⲆΔⲆⲆⲆᐃⲆ: 640,
    ᐃⵠᐃΔⲆᐃᐃ: 641,
    ⲆΔⵠΔⵠΔⵠ: 642,
    ΔⵠΔⲆⲆᐃᐃ: 643,
    ᐃⲆᐃΔⵠᐃⵠ: 644,
    ΔⵠⵠΔΔᐃⵠ: 645,
    ⲆⲆⲆΔⲆⲆⲆ: 646,
    ΔⲆⲆᐃᐃⲆᐃ: 647,
    ⲆΔⵠᐃᐃᐃⲆ: 648,
    ⲆΔⲆᐃⲆⲆᐃ: 649,
    ⲆᐃΔⲆⵠⲆᐃ: 650,
    ⵠᐃᐃᐃΔᐃⵠ: 651,
    ΔΔΔⲆⵠΔⲆ: 652,
    ⵠⵠᐃΔΔΔⵠ: 653,
    ΔⲆⲆΔⵠⵠᐃ: 654,
    ⲆΔⲆᐃⲆⲆΔ: 655,
    ⵠᐃⲆᐃⵠⵠⵠ: 656,
    ⲆᐃⲆⵠᐃΔⵠ: 657,
    ᐃⲆᐃΔΔΔⲆ: 658,
    ⲆΔΔᐃᐃΔⲆ: 659,
    ⵠⵠⲆⵠⵠⲆᐃ: 660,
    ⵠΔΔⲆᐃⲆⵠ: 661,
    ᐃΔⲆΔⵠᐃᐃ: 662,
    ΔⵠⲆΔΔᐃΔ: 663,
    ⲆΔⲆⲆⵠᐃᐃ: 664,
    ΔᐃΔᐃⲆΔΔ: 665,
    ⵠⵠᐃⵠΔⲆⲆ: 666,
    ⵠΔᐃᐃⲆⵠᐃ: 667,
    ⵠⲆⲆΔⵠᐃⲆ: 668,
    ⵠᐃⲆⲆΔΔⲆ: 669,
    ⵠⲆΔᐃΔᐃᐃ: 670,
    ΔᐃΔᐃΔⲆᐃ: 671,
    ⲆⲆⲆⲆΔⵠᐃ: 672,
    ΔΔⲆⵠΔ: 673,
    ᐃΔⲆᐃⲆᐃΔ: 674,
    ΔΔⵠⲆᐃΔⵠ: 675,
    ᐃΔⵠⵠⲆ: 676,
    ᐃΔⲆⲆΔΔΔΔΔ: 677,
    ⵠⵠⲆⵠⵠΔΔ: 678,
    ⵠᐃⵠΔΔ: 679,
    ᐃⲆⲆΔⵠΔᐃ: 680,
    ⵠᐃΔᐃᐃᐃⵠ: 681,
    ᐃⲆΔⵠⲆⲆᐃ: 682,
    ⵠΔᐃΔΔΔΔ: 683,
    ⲆⵠΔᐃΔΔΔ: 684,
    ᐃᐃⵠΔⲆⵠⲆ: 685,
    ΔⵠⲆᐃⲆⵠⲆ: 686,
    ΔⵠΔΔᐃⵠΔ: 687,
    ᐃⵠᐃⲆⲆⵠᐃ: 688,
    ⲆΔᐃᐃᐃΔⵠ: 689,
    ΔᐃΔⵠⲆⵠᐃ: 690,
    ᐃⲆⲆᐃΔ: 691,
    ᐃᐃᐃⲆⵠ: 692,
    ⲆΔⵠⵠⲆ: 693,
    ⲆⲆⲆᐃΔ: 694,
    ΔᐃⲆⵠᐃ: 695,
    ᐃⵠⵠⵠⲆⵠᐃ: 696,
    ⲆΔᐃᐃⲆΔⵠ: 697,
    ΔⲆⲆⲆΔΔᐃ: 698,
    ⲆⲆᐃΔⲆΔΔ: 699,
    ᐃΔΔⵠᐃⲆⵠ: 700,
    ᐃΔⲆⲆᐃᐃΔ: 701,
    ᐃⲆᐃⵠⵠⵠᐃ: 702,
    ΔⵠᐃⲆΔᐃΔ: 703,
    ᐃⵠⵠⲆⵠᐃⵠ: 704,
    ᐃⲆᐃⵠΔⵠᐃ: 705,
    ΔΔⵠⵠΔⵠⲆ: 706,
    ᐃΔⵠᐃⲆⲆⵠ: 707,
    ᐃⲆΔⵠⵠᐃᐃ: 708,
    ⵠⲆΔᐃΔΔⵠ: 709,
    ⲆΔⲆⵠⲆⲆⵠ: 710,
    ⲆΔⵠᐃΔΔᐃ: 711,
    ⲆⲆΔΔⲆⲆΔ: 712,
    ⵠᐃⵠᐃΔⵠᐃ: 713,
    ΔΔⲆⵠⲆⲆⲆ: 714,
    ΔⵠᐃⵠⵠΔᐃ: 715,
    ⲆᐃⲆⲆΔⵠΔ: 716,
    ⵠⲆΔᐃⲆⲆᐃ: 717,
    ΔΔⲆᐃᐃΔΔ: 718,
    ⵠᐃᐃⵠΔⲆΔ: 719,
    ⲆⲆⲆⵠⲆⵠᐃ: 720,
    ⵠⲆᐃᐃᐃΔᐃⵠⵠ: 721,
    ᐃΔΔⲆⵠⲆⲆ: 722,
    ⵠΔᐃΔⲆΔⲆ: 723,
    ⲆᐃⲆᐃᐃⵠⲆ: 724,
    ⲆⲆΔᐃⲆᐃᐃ: 725,
    ⲆⵠⵠΔⲆᐃΔ: 726,
    ΔⲆⲆᐃⵠΔⲆ: 727,
    ⵠᐃⵠᐃⵠⵠᐃ: 728,
    ⵠⲆᐃⵠΔΔⵠ: 729,
    ⲆⲆᐃᐃⵠⵠⵠ: 730,
    ⵠΔⵠⵠᐃⵠᐃ: 731,
    ⲆⵠΔΔⲆⲆⲆ: 732,
    ⲆᐃΔΔⵠᐃΔ: 733,
    ΔᐃᐃⵠⲆΔⵠ: 734,
    ⵠⵠᐃᐃⵠⲆᐃ: 735,
    ⵠⵠⲆΔΔᐃΔ: 736,
    ⵠΔⵠᐃⵠᐃⲆ: 737,
    ⵠᐃⵠΔⲆΔⵠ: 738,
    ᐃᐃⵠΔᐃⲆᐃ: 739,
    ΔᐃⲆⵠΔⵠΔ: 740,
    ⵠⵠⵠᐃᐃⵠΔ: 741,
    ΔⲆΔᐃᐃᐃΔ: 742,
    ⲆⲆᐃⲆᐃᐃΔ: 743,
    ᐃⲆⲆⵠᐃⲆⵠ: 744,
    ΔⵠΔᐃⲆᐃΔ: 745,
    ΔⵠΔᐃⲆΔⵠ: 746,
    ΔΔⵠᐃⲆΔΔ: 747,
    ⵠⲆⲆᐃⲆⲆΔ: 748,
    ᐃⵠⵠᐃᐃΔΔ: 749,
    ⵠⲆⲆΔᐃⵠΔ: 750,
    ⵠΔᐃᐃⲆⵠΔ: 751,
    ᐃⲆⵠᐃᐃⵠⲆ: 752,
    ⲆΔⵠⵠⲆⵠΔ: 753,
    ᐃⵠᐃΔⵠⵠᐃ: 754,
    ⲆⵠⲆᐃᐃᐃΔ: 755,
    ΔⵠⵠⲆⵠⲆⲆ: 756,
    ⵠⲆΔΔⵠᐃⵠ: 757,
    ΔΔⵠⲆΔⵠᐃ: 758,
    ΔⲆⲆⵠⵠⵠΔ: 759,
    ⲆΔᐃⲆⵠⲆⵠ: 760,
    ⲆⲆⵠⲆΔⵠᐃ: 761,
    ⲆⲆΔⲆᐃⵠΔ: 762,
    ⲆⵠΔΔᐃⵠⲆ: 763,
    ΔⲆᐃⵠⵠⲆΔ: 764,
    ᐃⲆᐃⲆᐃᐃⲆ: 765,
    ᐃΔⵠⵠᐃΔΔ: 766,
    ⲆΔΔⲆⲆⲆⵠ: 767,
    ⲆⲆⲆΔΔⲆᐃ: 768,
    ᐃⵠⲆⵠΔᐃΔ: 769,
    ⵠᐃΔΔᐃⵠⲆ: 770,
    ΔΔⵠᐃΔⵠᐃ: 771,
    ⵠΔᐃΔⵠᐃΔ: 772,
    ⵠⵠᐃᐃⲆᐃⲆ: 773,
    ⲆΔⵠΔⲆⲆᐃ: 774,
    ⲆΔᐃⲆΔⲆⲆ: 775,
    ᐃΔⵠᐃᐃⲆᐃ: 776,
    ⵠᐃΔⵠΔᐃⵠ: 777,
    ⲆⵠᐃⵠΔⲆᐃ: 778,
    ⵠⲆⲆⲆΔᐃⵠ: 779,
    ΔᐃⵠᐃⲆⵠᐃ: 780,
    ⵠᐃᐃⵠⲆⵠⲆ: 781,
    ᐃᐃⲆⲆⵠⵠⵠ: 782,
    ᐃⵠⲆΔⲆⵠⵠ: 783,
    ⲆⵠⵠΔⵠⵠᐃ: 784,
    ⵠᐃᐃΔⵠⵠᐃ: 785,
    ΔⵠΔⵠᐃⵠᐃ: 786,
    ᐃⲆⵠΔΔᐃⲆ: 787,
    ΔⵠⵠᐃᐃᐃΔ: 788,
    ⵠΔᐃⲆΔⲆΔ: 789,
    ΔⲆΔΔⲆⲆⵠ: 790,
    ⵠΔⵠᐃⵠⵠΔ: 791,
    ᐃᐃᐃᐃⵠΔΔ: 792,
    ⵠᐃΔᐃΔ: 793,
    ΔⲆᐃⵠⲆΔⲆ: 794,
    ΔΔΔⵠΔΔⲆ: 795,
    ᐃΔⲆⵠⵠ: 796,
    ΔΔⲆᐃⲆⵠⵠ: 797,
    ⲆᐃⲆⵠⲆΔⵠ: 798,
    ᐃⵠⵠⵠΔᐃⵠ: 799,
    ᐃⵠⵠⲆⲆⲆⲆ: 800,
    ⵠΔⵠᐃΔᐃᐃ: 801,
    ᐃⵠΔⲆᐃ: 802,
    ⲆⵠⲆᐃⲆᐃΔ: 803,
    ⲆⲆᐃⲆᐃⲆⵠⲆΔ: 804,
    ⲆⵠⵠⵠⵠᐃⵠΔⵠ: 805,
    ᐃⲆΔΔⲆⲆⵠⵠⵠ: 806,
    ⲆⵠⲆΔᐃᐃΔᐃⲆ: 807,
    ΔⲆⲆⵠΔⲆΔ: 808,
    ᐃⲆⵠⵠᐃⵠⵠ: 809,
    ⵠΔⲆᐃⵠΔᐃ: 810,
    ⲆΔΔⵠΔⲆⵠ: 811,
    ⵠⵠⲆΔⲆΔΔ: 812,
    ᐃᐃⵠᐃΔΔⵠ: 813,
    ⲆⵠⲆᐃΔᐃΔ: 814,
    ⲆⵠⵠᐃᐃΔⵠ: 815,
    ⵠΔⲆᐃᐃⲆᐃ: 816,
    ΔⲆᐃᐃⲆΔᐃ: 817,
    ⵠⲆΔΔΔ: 818,
    ᐃⲆΔᐃⵠ: 819,
    ⲆⲆᐃⲆⲆⵠΔ: 820,
    ΔᐃⵠⵠΔᐃᐃ: 821,
    ⵠⵠᐃⲆⲆⲆᐃ: 822,
    ⲆᐃᐃⵠⲆⵠΔ: 823,
    ᐃΔⵠⲆᐃΔᐃ: 824,
    ⵠⵠΔⲆⲆⲆᐃ: 825,
    ΔⵠⲆΔⵠᐃⵠ: 826,
    ⵠⲆⲆⵠⲆⵠΔ: 827,
    ΔⵠᐃⲆⵠΔᐃ: 828,
    ⲆⲆΔᐃΔⵠΔ: 829,
    ΔΔⵠⲆⵠⲆⲆ: 830,
    ⵠᐃⲆⵠΔΔᐃ: 831,
    ⲆΔᐃΔΔΔΔⵠⲆ: 832,
    ⲆᐃᐃⲆⵠⵠᐃΔΔ: 833,
    ⲆⲆΔᐃΔΔⵠ: 834,
    ⲆⲆⲆⲆᐃᐃⵠ: 835,
    ⲆᐃΔⵠᐃⵠⵠ: 836,
    ΔΔΔᐃΔΔⵠ: 837,
    ΔⵠⲆᐃⵠⵠⵠ: 838,
    ΔᐃⵠⲆᐃᐃⵠ: 839,
    ⵠᐃΔᐃᐃΔΔ: 840,
    ΔⲆᐃΔⲆᐃⲆ: 841,
    ΔΔΔⲆᐃⲆᐃ: 842,
    ΔⲆⲆᐃⵠΔΔ: 843,
    ⵠᐃΔⲆΔⵠⲆ: 844,
    ΔᐃⲆᐃΔΔᐃ: 845,
    ΔⲆΔⵠⲆᐃᐃ: 846,
    ⵠᐃⵠΔⵠᐃᐃ: 847,
    ΔᐃⲆΔΔᐃⵠ: 848,
    ⵠΔⵠᐃⵠᐃᐃ: 849,
    ᐃΔᐃᐃⲆⵠⲆ: 850,
    ⲆⵠⵠᐃᐃⲆⵠ: 851,
    ⵠᐃⲆⵠⲆᐃⵠΔⵠ: 852,
    ᐃⲆΔⵠⵠⲆⵠ: 853,
    ΔᐃᐃⲆⲆ: 854,
    ⵠΔⲆⲆᐃⲆΔᐃᐃ: 855,
    ΔΔⲆΔⵠΔᐃΔⲆ: 856,
    ᐃⵠⲆⲆΔⲆⲆⵠⵠ: 857,
    ᐃΔⵠⲆᐃⵠⵠⵠᐃ: 858,
    ⲆΔⵠΔⵠⵠΔ: 859,
    ⲆⵠⲆⵠΔΔⲆ: 860,
    ⲆⵠⲆⲆᐃΔⲆ: 861,
    ⲆⵠᐃΔⲆᐃⲆ: 862,
    Δᐃᐃᐃᐃᐃⵠ: 863,
    ΔᐃᐃⲆⲆΔΔΔⲆ: 864,
    ⲆᐃⲆΔᐃⵠΔ: 865,
    ⲆⲆⲆⵠⲆΔⲆ: 866,
    ᐃᐃⵠᐃⵠᐃⲆ: 867,
    ΔᐃⵠΔⵠⵠⵠ: 868,
    ⲆⵠᐃΔᐃΔᐃ: 869,
    ᐃⲆᐃⲆΔΔᐃ: 870,
    ΔⲆᐃⲆΔⲆⵠ: 871,
    ⵠΔⲆⲆⵠ: 872,
    ᐃⲆᐃΔⲆᐃⲆᐃᐃ: 873,
    ⲆⲆⲆⲆⵠᐃⵠ: 874,
    ⲆⲆⵠⲆⲆΔⵠ: 875,
    ⵠⵠΔⵠⲆⲆΔ: 876,
    ⲆᐃⲆΔⵠΔΔ: 877,
    ⵠⵠⲆᐃΔᐃΔ: 878,
    ΔⵠⵠⵠⲆⵠⲆ: 879,
    ⲆΔᐃΔⲆΔᐃ: 880,
    ⵠⵠⵠΔⲆⲆⵠ: 881,
    ⵠⲆⵠⲆΔᐃⵠ: 882,
    ᐃⵠⲆᐃⵠⲆᐃ: 883,
    ⵠⵠᐃⵠᐃᐃᐃ: 884,
    ⵠⲆΔⲆᐃⲆᐃ: 885,
    ⲆᐃⲆⲆᐃΔⲆ: 886,
    ⵠⲆⵠᐃⵠ: 887,
    ⲆΔᐃᐃⵠΔⲆ: 888,
    ⲆᐃⵠⲆᐃⵠᐃ: 889,
    ⵠⲆⲆⵠⵠⲆⵠ: 890,
    ⵠⲆⵠᐃⵠᐃΔ: 891,
    ᐃᐃᐃᐃⲆᐃᐃ: 892,
    ΔΔⲆⲆⵠⲆⵠ: 893,
    ΔΔΔⲆⲆᐃⵠ: 894,
    ⲆᐃΔⵠⲆⵠⲆ: 895,
    ⵠΔᐃⲆΔᐃⲆ: 896,
    ΔⵠᐃᐃΔⵠᐃ: 897,
    ⲆⲆΔⵠⲆᐃΔ: 898,
    ⲆΔⲆⵠΔⲆⵠ: 899,
    ⵠⵠⲆΔΔⲆᐃ: 900,
    ᐃᐃⲆⵠⵠⵠⲆ: 901,
    ⵠⵠΔΔᐃⲆⲆ: 902,
    ⵠⵠᐃⵠᐃᐃⵠ: 903,
    ⲆΔⲆᐃⲆⵠᐃ: 904,
    ᐃⲆᐃⲆⲆⲆⵠ: 905,
    ᐃΔⵠΔᐃⵠΔ: 906,
    ⲆΔⵠⵠⵠⲆⵠ: 907,
    ⵠᐃΔᐃΔᐃⵠ: 908,
    ⲆΔᐃⵠΔΔⵠ: 909,
    ⲆᐃⵠᐃⲆⲆΔ: 910,
    ⲆⵠⲆⵠⲆⲆᐃ: 911,
    ⵠⵠⲆᐃΔⵠⲆ: 912,
    ΔⲆⵠΔⲆⲆⵠ: 913,
    ⲆⲆᐃⵠⲆⵠⵠⵠⲆ: 914,
    ⵠᐃᐃᐃΔⲆΔᐃᐃ: 915,
    ΔⵠⲆᐃᐃⲆⵠⲆⵠ: 916,
    ᐃᐃᐃⵠᐃⵠⵠᐃΔ: 917,
    ⲆⵠⲆⵠⲆⲆΔ: 918,
    ΔᐃⲆⵠᐃΔⲆ: 919,
    ᐃⲆᐃΔΔ: 920,
    ᐃⲆΔⲆⵠᐃΔ: 921,
    ⵠᐃⲆⵠⵠᐃᐃ: 922,
    ᐃᐃⲆᐃⲆΔⲆ: 923,
    ΔⵠᐃᐃᐃᐃΔ: 924,
    ᐃⵠⵠⵠⵠΔΔ: 925,
    ᐃᐃᐃⵠᐃΔΔ: 926,
    ΔᐃⲆⲆᐃᐃΔ: 927,
    ⵠᐃᐃⵠᐃⲆⵠ: 928,
    ΔⲆⲆΔΔᐃᐃ: 929,
    ᐃᐃⵠΔᐃᐃΔ: 930,
    ⲆⲆⵠᐃΔΔⵠ: 931,
    ⲆΔⲆᐃᐃⲆᐃ: 932,
    ⵠⲆΔⵠᐃᐃⲆ: 933,
    ᐃΔᐃᐃΔᐃⵠ: 934,
    Δᐃᐃⵠᐃᐃᐃ: 935,
    ΔΔΔⲆⲆⲆᐃ: 936,
    ⵠⲆⵠᐃΔΔⵠ: 937,
    ⵠⵠᐃᐃΔΔᐃ: 938,
    ⲆΔⵠⵠΔⵠⲆ: 939,
    ΔⵠᐃⵠᐃⵠᐃΔᐃ: 940,
    ᐃᐃΔᐃⲆ: 941,
    ΔΔᐃᐃⲆᐃΔ: 942,
    ΔᐃⲆΔᐃᐃᐃ: 943,
    ᐃⵠⵠΔΔⵠᐃ: 944,
    ⵠⵠΔⵠᐃⵠᐃ: 945,
    ΔⵠΔΔΔⲆⵠ: 946,
    ⲆⲆⲆΔᐃΔᐃ: 947,
    ᐃΔᐃᐃΔᐃΔ: 948,
    ⲆⵠΔΔΔⵠⵠ: 949,
    ⵠΔⵠᐃᐃⵠΔ: 950,
    ⵠᐃΔⲆⲆᐃⵠ: 951,
    ᐃᐃⵠΔᐃᐃⲆ: 952,
    ⵠⵠᐃⵠⲆⵠⵠ: 953,
    ⲆΔⵠⲆΔΔⵠ: 954,
    ᐃⵠΔⵠⵠⲆⲆ: 955,
    ⲆⵠᐃΔⵠΔΔ: 956,
    ΔⲆΔⲆⵠⵠⵠ: 957,
    ᐃᐃⲆⲆⵠⲆΔ: 958,
    ⵠΔⲆΔᐃΔⲆ: 959,
    ᐃⲆⲆΔⵠⵠⵠ: 960,
    ⵠⲆᐃⵠⲆⲆᐃ: 961,
    ⵠⵠⲆⲆΔΔᐃ: 962,
    ⲆⲆᐃⲆⲆⵠᐃ: 963,
    ⲆⵠᐃᐃᐃⲆⲆᐃⵠ: 964,
    ΔⵠΔⲆⵠᐃΔ: 965,
    ⲆΔᐃΔⲆᐃᐃ: 966,
    ⵠⵠΔⲆΔⵠⵠ: 967,
    ᐃΔᐃΔΔⲆΔ: 968,
    ⵠᐃⵠᐃᐃⲆⵠ: 969,
    ⲆⵠⵠΔΔΔⲆ: 970,
    ᐃΔⲆᐃΔⲆⲆ: 971,
    ΔΔⲆⵠⵠⲆᐃ: 972,
    ΔⵠᐃⵠⲆⵠⲆ: 973,
    ⵠᐃΔⵠⲆⲆⵠ: 974,
    ⲆⲆⲆⵠⲆⲆⲆ: 975,
    ⲆΔⲆΔⲆⲆᐃ: 976,
    Δⵠᐃⵠⵠⵠⵠ: 977,
    ΔΔᐃⲆᐃΔⲆ: 978,
    ⲆᐃⵠⲆⲆⵠⲆ: 979,
    ᐃΔⲆᐃⵠⲆⵠ: 980,
    ᐃᐃⲆⲆΔⲆᐃ: 981,
    ⲆᐃⲆΔΔᐃΔ: 982,
    ⲆᐃΔᐃⵠᐃⲆ: 983,
    ⲆΔΔΔⵠᐃᐃ: 984,
    ⲆⵠΔⲆⵠᐃⵠ: 985,
    ΔⵠΔⵠⲆΔΔ: 986,
    ⲆⵠΔΔᐃⲆⲆ: 987,
    ΔⲆⵠᐃᐃΔⵠ: 988,
    ⲆᐃᐃΔᐃ: 989,
    ΔⵠⲆᐃΔᐃⲆ: 990,
    ⵠᐃⲆⵠᐃᐃⲆ: 991,
    ⵠᐃΔⵠⵠⲆⲆ: 992,
    ⵠⲆⵠΔⵠΔⲆ: 993,
    ᐃⲆΔⲆⲆΔᐃ: 994,
    ΔⲆΔⵠΔⵠΔ: 995,
    ⲆᐃⲆΔᐃΔⲆ: 996,
    ᐃⲆⲆⲆⵠᐃᐃ: 997,
    ΔⵠⵠⵠΔᐃⵠ: 998,
    ᐃⵠⵠⲆⲆⲆⵠ: 999,
    ΔΔΔΔΔΔⲆ: 1000,
    ⲆⲆⲆΔⲆᐃⵠ: 1001,
    ⵠⵠⵠⵠᐃⲆⵠ: 1002,
    ΔⲆⵠⵠᐃⵠΔ: 1003,
    ΔᐃΔᐃⵠΔΔ: 1004,
    ⲆᐃⵠⲆᐃΔᐃ: 1005,
    ΔΔⲆⵠᐃⵠᐃ: 1006,
    ⵠᐃⵠΔⵠΔⵠ: 1007,
    ⲆⵠⵠⵠⵠⲆⲆ: 1008,
    ᐃⲆΔⵠⵠⵠᐃ: 1009,
    ⲆⲆᐃⵠⲆⵠⲆ: 1010,
    ᐃᐃⵠᐃⲆⲆⵠ: 1011,
    ΔΔⵠΔΔⵠΔ: 1012,
    ⲆⵠΔΔΔⲆᐃ: 1013,
    ΔᐃⲆΔᐃᐃⵠ: 1014,
    ⲆΔⲆΔΔⲆⲆ: 1015,
    ⵠᐃⵠⵠΔⵠⵠ: 1016,
    ᐃⲆⵠᐃⲆⲆⲆ: 1017,
    ⲆⲆᐃⵠⵠⵠᐃ: 1018,
    ᐃᐃⲆᐃᐃⲆΔ: 1019,
    ⲆᐃⵠΔⲆⵠⵠ: 1020,
    ᐃᐃΔΔᐃⵠᐃ: 1021,
    ΔⲆΔΔΔⵠⵠ: 1022,
    ⲆΔⵠⵠᐃᐃᐃ: 1023,
    ⵠΔΔⵠ: 1024,
    ⲆΔΔⲆ: 1025,
    ᐃΔⲆⵠᐃⵠⲆ: 1026,
    ⲆⵠΔⲆⵠΔⵠ: 1027,
    ᐃᐃᐃᐃᐃᐃⲆ: 1028,
    ⲆⵠⲆⲆⵠᐃᐃ: 1029,
    ΔⵠⲆⲆᐃⵠᐃ: 1030,
    ⲆⲆᐃᐃᐃᐃᐃ: 1031,
    ΔᐃⵠΔᐃⲆⵠ: 1032,
    ᐃΔᐃᐃⵠ: 1033,
    ⵠᐃⲆᐃⲆΔⲆ: 1034,
    ᐃⲆⲆⲆΔ: 1035,
    ⵠΔⲆⲆⲆΔΔ: 1036,
    ᐃΔⵠⵠⵠ: 1037,
    ᐃΔⵠᐃΔΔⵠ: 1038,
    Ⲇⵠᐃᐃᐃ: 1039,
    ΔΔΔⵠⵠⲆᐃ: 1040,
    ΔΔⲆⲆⲆ: 1041,
    ⵠΔⲆΔⵠ: 1042,
    ᐃⲆⵠΔΔᐃΔ: 1043,
    ᐃⵠᐃᐃⲆᐃⲆ: 1044,
    ΔⲆΔΔⵠΔᐃ: 1045,
    ⲆᐃΔᐃΔⵠΔ: 1046,
    ⲆⲆⵠΔⵠⵠΔ: 1047,
    ⵠⲆΔΔΔⲆΔ: 1048,
    ΔΔΔⵠΔⲆᐃ: 1049,
    ᐃΔⵠⵠⵠⵠⵠ: 1050,
    ⲆⲆᐃⵠⲆᐃⵠ: 1051,
    ⲆⵠΔⵠᐃ: 1052,
    ⵠΔᐃⵠⵠⵠⲆ: 1053,
    ᐃΔᐃⵠᐃ: 1054,
    ᐃΔΔⵠⵠᐃⲆ: 1055,
    ⵠⲆΔΔᐃⲆⲆ: 1056,
    ᐃⲆⲆⵠⵠΔⵠ: 1057,
    ⲆΔⵠΔᐃⲆΔ: 1058,
    ⲆΔΔⵠΔΔⲆ: 1059,
    ⵠⵠⲆΔᐃᐃⲆ: 1060,
    ⵠⵠᐃⲆᐃⵠΔᐃⵠ: 1061,
    ⲆᐃⲆΔⵠΔⵠ: 1062,
    ᐃᐃⲆᐃⵠⲆᐃ: 1063,
    ⵠΔᐃΔᐃᐃΔᐃΔ: 1064,
    ⵠⲆⲆΔⵠΔⵠ: 1065,
    ΔΔⵠⲆᐃⲆⵠ: 1066,
    ⵠⲆⵠⲆⲆᐃΔ: 1067,
    ⲆΔΔᐃᐃᐃΔ: 1068,
    ΔΔᐃⲆΔ: 1069,
    ⵠΔᐃΔⲆᐃⵠ: 1070,
    ⲆⲆⵠⵠΔⵠΔ: 1071,
    ᐃᐃⲆΔΔΔⲆ: 1072,
    ᐃᐃΔⵠᐃᐃⵠ: 1073,
    ᐃⵠΔᐃᐃⲆΔ: 1074,
    ᐃⲆⲆⵠⵠⵠᐃ: 1075,
    ⵠⵠⲆⵠⲆⲆⵠ: 1076,
    ⵠⵠⵠⲆΔⵠΔ: 1077,
    ⵠΔⲆⲆⵠᐃⵠ: 1078,
    ᐃΔΔΔΔᐃΔ: 1079,
    ⲆⵠⵠᐃᐃᐃⲆ: 1080,
    ᐃⵠΔΔⵠᐃⵠ: 1081,
    ⵠᐃⵠΔⲆⵠΔ: 1082,
    ⵠΔⲆΔⲆᐃⲆ: 1083,
    ⲆΔⲆᐃⵠ: 1084,
    ⵠⵠⲆⵠⵠⵠⲆ: 1085,
    ⵠⵠΔΔⵠⲆᐃ: 1086,
    ΔⲆⲆⲆⲆΔⲆ: 1087,
    ᐃΔⵠⵠⲆΔΔ: 1088,
    ᐃⲆⵠᐃΔΔⵠ: 1089,
    ᐃᐃΔⲆΔᐃⵠ: 1090,
    ⲆⲆⵠⲆᐃⵠⵠ: 1091,
    ⵠΔΔΔⵠⵠΔ: 1092,
    ⲆⲆⲆⲆᐃΔⲆ: 1093,
    ᐃⵠⲆΔⵠⲆᐃ: 1094,
    ΔᐃⲆⲆΔᐃⲆ: 1095,
    ᐃᐃⲆΔΔᐃⲆ: 1096,
    ⲆΔⵠⵠⵠⵠᐃ: 1097,
    ⲆⵠᐃᐃⵠΔΔ: 1098,
    ᐃⵠᐃⵠⵠ: 1099,
    ᐃⵠⵠᐃⵠⵠΔ: 1100,
    ⲆᐃⲆΔᐃᐃⲆ: 1101,
    ⵠⲆΔⲆⵠⲆᐃ: 1102,
    ᐃⲆᐃᐃⲆⲆΔ: 1103,
    ᐃⵠΔⲆᐃᐃⵠ: 1104,
    ᐃⲆⵠᐃΔᐃⲆ: 1105,
    ⵠΔΔⲆΔΔⲆ: 1106,
    ᐃⵠᐃᐃⵠᐃᐃ: 1107,
    ⵠⲆᐃᐃᐃⵠᐃ: 1108,
    ⲆⵠⲆᐃⵠᐃᐃ: 1109,
    ᐃⲆⲆⲆⲆⲆᐃ: 1110,
    ᐃⵠΔⵠᐃⲆⲆ: 1111,
    ᐃⲆΔⲆΔᐃⵠ: 1112,
    ⲆⵠᐃΔΔⲆᐃ: 1113,
    ⲆΔΔᐃⲆⲆΔ: 1114,
    ᐃΔᐃⲆΔⵠⵠ: 1115,
    ΔⵠΔΔⲆᐃΔ: 1116,
    ⵠⵠΔΔᐃⵠⲆ: 1117,
    ⵠⵠᐃⵠᐃⵠΔ: 1118,
    ⲆⲆⲆⲆⲆᐃᐃ: 1119,
    ΔⲆⵠΔⵠ: 1120,
    ᐃⲆⵠⵠⵠᐃⵠ: 1121,
    ⵠⵠΔⵠΔⲆⵠ: 1122,
    ᐃΔᐃⵠᐃΔΔ: 1123,
    ΔΔⲆⵠΔⲆΔ: 1124,
    ⲆⲆⵠⲆⵠᐃⵠ: 1125,
    ⵠᐃⵠᐃⵠⲆⲆ: 1126,
    ᐃⲆΔᐃⲆⵠᐃ: 1127,
    ΔⲆⵠⲆΔⲆⲆ: 1128,
    ΔΔᐃⵠⲆΔᐃ: 1129,
    ⵠΔⲆⲆᐃᐃⲆ: 1130,
    ΔⲆⲆⵠⵠᐃⵠ: 1131,
    ᐃᐃⲆⲆᐃⲆⵠ: 1132,
    ⲆᐃⲆᐃⲆⵠⵠ: 1133,
    ⵠⲆⲆⲆⵠⵠΔ: 1134,
    ⵠΔⵠⲆᐃΔᐃ: 1135,
    ⲆΔΔΔⲆᐃᐃ: 1136,
    ᐃᐃⲆⲆᐃᐃᐃ: 1137,
    ⵠᐃᐃⵠⵠⲆⵠ: 1138,
    ⲆΔᐃΔᐃⲆᐃ: 1139,
    ⵠⲆᐃᐃΔᐃⵠ: 1140,
    ΔⵠᐃⲆⲆⲆᐃ: 1141,
    ᐃΔⵠⲆᐃⲆⵠ: 1142,
    ⵠᐃⲆΔⲆⵠⵠ: 1143,
    ᐃΔⲆⲆᐃᐃⲆ: 1144,
    ΔⵠⵠᐃᐃⲆΔ: 1145,
    ⲆⵠᐃΔᐃΔⲆ: 1146,
    ᐃΔᐃⲆⵠⵠᐃ: 1147,
    ᐃΔⵠⲆᐃΔⲆ: 1148,
    ΔⲆⵠⲆⲆΔᐃ: ["#E9CF96", "#144940"],
    ⲆⵠⲆΔⲆᐃⲆ: 1149,
    ⲆΔⲆᐃΔΔⵠ: 1150,
    ᐃⵠΔⵠⲆⵠΔ: 1151,
    ΔΔⵠΔΔΔⲆ: 1152,
    ᐃⲆⲆⲆⵠⲆΔ: 1153,
    ⲆⵠΔᐃⵠⲆΔ: 1154,
    ⲆⲆⵠΔⵠⲆⵠ: 1155,
    ᐃΔⵠΔⵠ: 1156,
    ΔᐃᐃΔΔᐃΔ: 1157,
    ᐃⲆΔΔⲆⲆⵠ: 1158,
    ⲆΔᐃⲆᐃΔΔ: 1159,
    ⵠΔΔᐃΔⲆⲆ: 1160,
    ⲆᐃΔⵠᐃᐃΔ: 1161,
    ⲆⲆᐃⵠᐃⲆⵠ: 1162,
    ⲆᐃΔⲆⵠⲆⵠ: 1163,
    ᐃⲆΔᐃⲆⵠⲆ: 1164,
    ᐃⲆⲆⲆᐃΔᐃ: 1165,
    Ⲇᐃⵠᐃᐃⵠᐃ: 1166,
    ⲆⲆᐃᐃΔΔΔ: 1167,
    ᐃⵠⲆᐃⲆΔⲆ: 1168,
    ⲆᐃⲆᐃΔΔⵠ: 1169,
    Δⵠⵠᐃⵠᐃᐃ: 1170,
    ⵠⲆⵠΔⲆΔⵠ: 1171,
    ⲆⲆⵠⲆⵠᐃⲆ: 1172,
    ⵠⲆⵠΔⵠΔⵠ: 1173,
    ΔΔΔᐃᐃⵠΔ: 1174,
    ΔΔΔⵠᐃᐃΔ: 1175,
    ᐃⲆⲆⵠⵠⲆⵠ: 1176,
    ᐃⲆΔΔⵠᐃΔ: 1177,
    ⲆᐃᐃᐃⵠΔⲆ: 1178,
    ᐃⲆᐃⵠᐃᐃⲆ: 1179,
    ⲆⵠⲆΔᐃΔΔ: 1180,
    ⵠᐃᐃⲆⲆᐃΔ: 1181,
    ᐃΔⲆⵠΔᐃⵠ: 1182,
    ⵠⲆᐃᐃⲆΔᐃ: 1183,
    ⵠⲆⵠⲆΔᐃⲆ: 1184,
    ⵠⵠⵠᐃᐃⲆᐃ: 1185,
    ⲆΔⲆᐃᐃⲆⵠ: 1186,
    ⲆᐃⵠⵠΔᐃΔ: 1187,
    ⵠⵠᐃᐃΔᐃΔ: 1188,
    ΔⲆΔⲆᐃⵠᐃ: 1189,
    ᐃⵠᐃⲆΔⵠᐃ: 1190,
    ⵠᐃᐃⲆⵠΔΔ: 1191,
    ΔⵠⲆⲆⵠΔⵠ: 1192,
    ⵠΔΔᐃⵠⵠⲆ: 1193,
    ΔⲆⲆᐃⲆⵠΔ: 1194,
    ΔⲆΔⵠⲆⵠⵠ: 1195,
    ⲆΔⵠⵠᐃⵠᐃ: 1196,
    ΔⲆⵠΔⵠΔⲆ: 1197,
    ⵠᐃᐃⲆⲆⵠΔ: 1198,
    ΔᐃᐃⲆⵠⵠΔ: 1199,
    ΔᐃⵠⵠⲆⲆᐃ: 1200,
    ᐃⵠΔᐃⲆⲆᐃ: 1201,
    ᐃᐃᐃΔⲆΔⲆ: 1202,
    ⵠᐃΔᐃⵠΔⲆ: 1203,
    ⲆᐃⵠΔΔΔΔ: 1204,
    ΔΔᐃⵠᐃⲆΔ: 1205,
    ⲆⲆⵠᐃᐃΔΔ: 1206,
    ⲆᐃΔⲆⲆⲆᐃ: 1207,
    ⲆᐃⵠΔᐃⲆⵠ: 1208,
    ⲆᐃᐃΔΔⵠΔ: 1209,
    ⲆᐃⲆᐃⲆⲆⲆ: 1210,
    ⵠᐃΔⵠᐃΔⵠ: 1211,
    ΔΔⵠⵠᐃΔΔ: 1212,
    ᐃⵠΔᐃᐃⲆᐃ: 1213,
    ΔΔᐃΔⵠᐃⵠ: 1214,
    ⵠⵠⵠⲆᐃᐃᐃ: 1215,
    ΔⲆΔᐃᐃΔⵠ: 1216,
    ΔⵠᐃⲆΔⲆⵠ: 1217,
    ΔⵠⵠⵠΔ: 1218,
    ΔⲆⲆΔᐃⲆᐃ: 1219,
    ᐃⵠⵠⵠΔ: 1220,
    ᐃⵠΔᐃⲆᐃΔ: 1221,
    ᐃⲆΔⵠᐃⲆⵠ: 1222,
    ⲆⵠⲆᐃⲆⲆΔ: 1223,
    ⲆⵠⵠΔⲆⵠⵠ: 1224,
    ⵠΔⲆᐃᐃⵠⵠ: 1225,
    ⵠΔΔⵠΔⵠΔ: 1226,
    ᐃΔΔΔⲆΔΔ: 1227,
    ⵠⵠⲆΔᐃⵠⵠ: 1228,
    ΔΔᐃⵠⵠⵠᐃ: 1229,
    ⲆΔⲆⵠⲆᐃⲆ: 1230,
    ᐃⵠⵠᐃⵠΔⵠ: 1231,
    ⵠⵠᐃⲆΔᐃΔ: 1232,
    ⵠᐃΔⵠᐃᐃΔ: 1233,
    ᐃΔⵠⲆΔⲆΔ: 1234,
    ⲆⵠⲆⵠΔⲆᐃ: 1235,
    ⲆΔⲆⵠⵠⲆⲆ: 1236,
    ᐃⲆⲆΔᐃᐃⲆ: 1237,
    ΔΔᐃⲆⲆⵠⵠ: 1238,
    ᐃⲆΔᐃΔΔᐃ: 1239,
    ⲆᐃᐃⲆⵠᐃΔ: 1240,
    ΔΔΔⲆⵠⵠⲆ: 1241,
    ⵠⲆΔⲆⲆⲆⵠ: 1242,
    ⲆⲆᐃⵠⲆᐃⲆ: 1243,
    ⵠᐃⵠᐃⵠⲆⵠ: 1244,
    ᐃᐃⲆΔΔⲆᐃ: 1245,
    ᐃᐃⵠᐃⲆⲆᐃ: 1246,
    ᐃⲆⵠᐃΔΔᐃ: 1247,
    ⵠⲆⲆⵠΔΔΔ: 1248,
    ⵠᐃⵠⵠᐃᐃΔ: 1249,
    ΔΔⲆᐃᐃⵠⲆ: 1250,
    ΔⲆⵠΔΔᐃΔ: 1251,
    ⲆⵠΔⵠⵠΔΔ: 1252,
    ΔⲆΔⵠᐃⲆᐃ: 1253,
    ΔⵠᐃΔᐃⵠⲆ: 1254,
    ⵠᐃⵠᐃΔⵠⵠ: 1255,
    ⵠᐃΔⲆᐃⵠⵠ: 1256,
    ΔⵠᐃΔⵠⵠⵠ: 1257,
    ⲆᐃΔΔᐃᐃᐃ: 1258,
    ⵠᐃⲆⲆⲆΔᐃ: 1259,
    ΔΔⵠΔⲆᐃΔ: 1260,
    ΔⲆᐃⵠΔᐃⵠ: 1261,
    ΔⵠᐃᐃΔΔⵠ: 1262,
    ᐃᐃⵠΔΔΔΔ: 1263,
    ⵠᐃⲆᐃΔⵠΔ: 1264,
    ΔⲆᐃᐃⲆᐃᐃ: 1265,
    ᐃⲆⵠⵠΔᐃᐃ: 1266,
    ⵠΔΔΔⲆᐃⲆ: 1267,
    ⲆΔᐃⵠΔⲆΔ: 1268,
    ΔΔⵠΔᐃᐃⵠ: 1269,
    ᐃΔᐃΔΔᐃⵠ: 1270,
    ⵠⲆⲆⲆⲆᐃᐃ: 1271,
    ⵠΔᐃⵠⲆᐃⵠ: 1272,
    ⲆⲆΔᐃᐃⲆⲆ: 1273
  };
  const os = $q;
  const ps = va;
  const rs = 18;
  ks = 0;
  const ss = 16;
  const ts = 18;
  const js = 7;
  const us = 17;
  var vs = {
    ⲆⲆⲆⲆⲆ: 0,
    ΔᐃΔⵠⵠ: 1,
    ⵠᐃⲆᐃⲆ: 2,
    ΔⵠⲆᐃⲆ: 3,
    Ⲇⵠᐃⵠᐃ: 4,
    ⵠΔᐃⵠᐃ: 5,
    ⲆⲆⲆᐃⲆ: 6,
    ΔⵠΔΔᐃ: 7,
    ⵠⲆⵠⲆⵠ: 8,
    ⵠᐃⵠΔⲆ: 9,
    ⲆⵠᐃᐃΔ: 10,
    ᐃⵠⵠᐃΔ: 11,
    ⲆΔΔΔΔ: 12,
    ᐃⲆᐃⲆΔ: 13,
    ΔⵠᐃⲆΔ: 14,
    ΔⲆΔⵠⲆ: 15,
    ΔΔⵠΔⵠ: 16,
    ⲆΔⲆⲆⲆ: 17,
    ⲆΔᐃΔᐃ: 18,
    Δᐃᐃᐃᐃ: 19,
    ⵠΔΔⲆⲆ: 20,
    ⵠⵠⵠΔΔ: 21,
    ΔⲆᐃᐃⲆ: 22,
    ⲆᐃⵠΔⲆ: 23,
    ᐃᐃⲆᐃⲆ: 24,
    ⲆᐃⲆᐃᐃ: 25,
    ΔᐃΔⵠΔ: 26,
    ΔᐃⵠΔᐃ: 27,
    ⵠⲆᐃⲆΔ: 28,
    ᐃᐃᐃⵠⵠ: 29,
    ΔⲆⵠⲆᐃ: 30,
    ΔᐃΔΔⲆ: 31,
    ΔⵠⵠΔᐃ: 32,
    ᐃΔⵠᐃᐃ: 33,
    ⲆΔⵠΔΔ: 34,
    ⲆᐃΔⵠⵠ: 35,
    ⵠΔΔⵠΔ: 36,
    ΔⲆⵠⵠΔ: 37,
    ⲆᐃΔⲆⵠ: 38,
    ⲆΔⵠⲆⲆ: 39,
    ⵠᐃⵠᐃⲆ: 40,
    ⵠᐃⲆΔᐃ: 41,
    ᐃᐃΔⵠᐃ: 42,
    ⲆΔᐃΔΔ: 43,
    ΔⵠᐃⵠⲆ: 44,
    ᐃⵠⲆⲆⵠ: 45,
    ᐃΔᐃⲆⲆ: 46,
    ᐃᐃΔΔᐃ: 47,
    ⲆΔⵠⲆⵠ: 48,
    ⵠᐃⵠᐃⵠ: 49,
    ⲆⵠⲆⲆᐃ: 50,
    ᐃⵠⵠⲆⵠ: 51,
    ᐃⵠⲆᐃⵠ: 52,
    ΔᐃᐃⲆⵠ: 53,
    ΔΔᐃᐃΔ: 54,
    ᐃⲆⲆⵠΔ: 55,
    ⲆΔΔⲆᐃ: 56,
    ΔⵠΔᐃᐃ: 57,
    ΔᐃΔⲆⲆ: 58,
    ⲆⵠⲆᐃΔ: 59,
    ΔΔⵠΔΔ: 60,
    ⵠⵠᐃⲆᐃ: 61,
    ⵠⲆⲆΔⲆ: 62,
    ᐃᐃⲆⲆᐃ: 63,
    ΔᐃⵠⵠⲆ: 64,
    ᐃⲆⲆⵠⵠ: 65,
    ΔΔΔⲆⲆ: 66,
    Δⵠⵠⵠᐃ: 67,
    ⲆⲆⵠᐃΔ: 68,
    ⵠⲆᐃᐃᐃ: 69,
    ⵠⵠⲆᐃⲆ: 70,
    ⵠΔᐃⵠΔ: 71,
    ΔⲆΔⵠⵠ: 72,
    ⵠⵠᐃⲆΔ: 73,
    ᐃⲆᐃⵠΔ: 74,
    ⵠΔⵠⵠᐃ: 75,
    ⲆⲆⵠΔΔ: 76,
    ΔΔⵠᐃᐃ: 77,
    ΔᐃⵠΔΔ: 78,
    ⵠⵠⵠΔᐃ: 79,
    ΔⵠᐃⲆⵠ: 80,
    ᐃⲆᐃᐃⲆ: 81,
    ᐃᐃⵠᐃΔ: 82,
    ΔⵠᐃᐃⲆ: 83,
    ᐃⵠᐃΔⲆ: 84,
    ⲆⲆⵠⲆⵠ: 85,
    ⵠⵠΔⲆⲆ: 86,
    ⵠᐃⵠⵠΔ: 87,
    ᐃΔⲆⲆᐃ: 88,
    ⵠᐃᐃⲆⲆ: 89,
    ⲆᐃΔΔΔ: 90,
    ᐃΔᐃⵠⵠ: 91,
    ΔΔΔᐃᐃ: 92,
    ΔᐃⵠⲆΔ: 93,
    ᐃΔⲆⲆΔ: 94,
    ᐃⵠⲆΔⵠ: 95,
    ⵠᐃⲆⲆΔ: 96,
    ΔⵠΔᐃⵠ: 97,
    ΔΔⵠᐃΔ: 98,
    ⵠᐃⵠⲆΔ: 99,
    Ⲇᐃᐃⵠ: 100,
    ᐃᐃΔΔΔ: 101,
    ⵠⲆⲆΔΔ: 102,
    ⵠⵠᐃΔᐃ: 103,
    ΔᐃⲆΔⲆ: 104,
    Ⲇᐃᐃⵠᐃ: 105,
    ⲆΔⵠΔⲆ: 106,
    ᐃᐃⲆΔⲆ: 107,
    ᐃⵠⲆΔᐃ: 108,
    ΔᐃΔⵠᐃ: 109,
    ⲆⲆⵠΔᐃ: 110,
    ⵠⲆᐃΔⵠ: 111,
    ΔᐃΔⵠΔᐃⵠ: 112,
    ΔᐃᐃΔᐃᐃᐃ: 113,
    Ⲇⵠⵠᐃᐃ: 114,
    ΔⲆⲆⵠᐃ: 115,
    ΔⵠⲆⵠΔ: 116,
    ⲆⵠⲆⲆⵠ: 117,
    ᐃⵠΔⵠⲆ: 118,
    Δᐃᐃᐃⵠ: 119,
    ⲆΔᐃᐃᐃ: 120,
    ᐃⵠⲆᐃᐃ: 121,
    ᐃⲆⲆΔΔ: 122,
    ⲆᐃⲆⲆⲆ: 123,
    ΔⲆΔⵠᐃ: 124,
    ⵠⵠΔᐃⵠ: 125,
    ⲆⲆΔⵠⲆ: 126,
    ᐃΔⲆᐃⵠ: 127,
    ⵠᐃᐃᐃᐃ: 128,
    ⲆΔⵠⵠΔ: 129,
    ᐃᐃⵠⲆᐃ: 130,
    ΔᐃⲆⵠΔ: 131,
    ᐃᐃⲆᐃⵠ: 132,
    ΔΔΔΔⲆ: 133,
    ᐃΔᐃⲆΔ: 134,
    ⵠⲆⲆⲆⲆ: 135,
    ΔΔᐃᐃⲆ: 136,
    ΔⲆⲆᐃⵠ: 137,
    ⵠⵠⵠⲆΔ: 138,
    ⲆᐃⲆⲆⵠ: 139,
    ᐃᐃⵠᐃⲆ: 140,
    Δⵠⵠᐃⵠ: 141,
    ᐃⵠᐃⵠΔ: 142,
    ⵠᐃⲆⵠΔ: 143,
    ΔⲆᐃⵠⲆ: 144,
    ⵠΔⵠᐃᐃ: 145,
    ⲆᐃⵠⲆⵠ: 146,
    ⲆⵠΔⲆΔ: 147,
    ᐃΔΔⲆⲆ: 148,
    ΔΔᐃΔᐃ: 149,
    Ⲇⵠⵠⵠⵠ: 150,
    ⵠⲆᐃⵠⲆ: 151,
    ⵠⵠⲆⲆΔ: 152,
    ΔᐃⲆⲆⵠ: 153,
    ⵠⵠᐃΔⲆ: 154,
    ⲆⵠᐃΔᐃ: 155,
    ⲆᐃΔΔⵠ: 156,
    ⲆᐃᐃⲆⵠ: 157,
    ᐃΔⵠΔΔ: 158,
    ΔΔΔΔᐃ: 159,
    ⲆΔΔⲆⲆ: 160,
    ᐃᐃΔⲆᐃ: 161,
    ⵠⲆⵠᐃΔ: 162,
    ᐃⵠᐃⵠᐃ: 163,
    ᐃⲆᐃΔᐃ: 164,
    ΔⵠⵠᐃⲆ: 165,
    ⵠΔΔⵠⵠ: 166,
    ⵠΔΔⲆⵠ: 167,
    ᐃᐃⵠⵠᐃ: 168,
    ⲆⵠΔΔⲆ: 169,
    ⵠⲆⵠᐃᐃ: 170,
    ᐃⲆΔⵠⲆ: 171,
    ⲆᐃⵠⵠΔ: 172,
    ΔⲆᐃⵠΔ: 173,
    ᐃΔⵠⲆᐃ: 174,
    ⵠΔⵠΔⲆ: 175,
    ⵠΔⵠᐃΔ: 176
  };
  const ws = 100;
  ks = 0;
  var qs = {
    ⲆᐃΔⵠⵠ: 0,
    ⵠΔᐃⵠᐃ: 1,
    ⲆᐃⵠⲆᐃ: 2,
    ⲆⲆⲆᐃⲆ: 3,
    ΔⵠΔΔᐃ: 4,
    ⵠΔΔⵠΔ: 5,
    ΔⲆⵠⵠΔ: 6,
    ⵠⲆⵠⵠⲆ: 7,
    Ⲇⵠᐃⵠᐃ: 8,
    ᐃⵠⲆⵠⲆ: 9,
    ΔⵠᐃᐃⲆ: 10,
    ᐃⵠᐃΔⲆ: 11,
    ⲆᐃⲆᐃᐃ: 12,
    ΔᐃΔⵠΔ: 13,
    ΔᐃⵠΔᐃ: 14,
    ⵠⲆᐃⲆΔ: 15,
    ΔᐃΔΔⲆ: 16,
    ΔⵠⵠΔᐃ: 17,
    ᐃΔⵠᐃᐃ: 18,
    ⲆΔⵠⲆⲆ: 19,
    ᐃⵠⲆΔⵠ: 20,
    ⵠᐃⲆⲆΔ: 21,
    ΔⵠΔᐃⵠ: 22,
    ΔⵠᐃⲆⵠ: 23,
    ᐃⲆᐃᐃⲆ: 24,
    ᐃΔⲆⲆᐃ: 25,
    ⵠᐃᐃⲆⲆ: 26,
    ⲆᐃΔΔΔ: 27,
    ᐃᐃⲆᐃⲆ: 28,
    Ⲇᐃᐃⵠ: 29,
    ⲆᐃΔⲆⵠ: 30,
    ⵠⲆⵠⲆⵠ: 31,
    ⵠᐃⵠΔⲆ: 32,
    ᐃᐃᐃⵠⵠ: 33,
    ΔⲆⵠⲆᐃ: 34,
    ⲆⵠᐃᐃΔ: 35,
    ᐃⵠⵠᐃΔ: 36,
    ⲆΔΔΔΔ: 37,
    ᐃⲆᐃⲆΔ: 38,
    ΔⵠᐃⲆΔ: 39,
    ⲆⲆⵠⲆⵠ: 40,
    ΔΔⲆᐃᐃ: 41,
    ΔⲆⲆⵠⵠ: 42,
    ᐃΔᐃⵠⵠ: 43,
    ΔΔΔᐃᐃ: 44,
    ΔⲆΔⵠⲆ: 45,
    ΔΔⵠΔⵠ: 46,
    ᐃΔⲆⲆΔ: 47,
    ΔᐃⵠⲆΔ: 48,
    ⵠⵠⵠΔΔ: 49,
    ⲆΔⲆⲆⲆ: 50,
    ⲆΔᐃΔᐃ: 51,
    Δᐃᐃᐃᐃ: 52,
    ΔⲆᐃᐃⲆ: 53,
    ⲆᐃⵠΔⲆ: 54,
    ᐃⲆⲆΔΔ: 55,
    ⲆᐃⲆⲆⲆ: 56,
    ⲆΔⵠΔΔ: 57,
    ⵠᐃⵠⵠΔ: 58,
    ⲆⲆΔⵠⲆ: 59,
    ᐃΔⲆᐃⵠ: 60,
    ⵠᐃᐃᐃᐃ: 61,
    ⲆΔⵠⵠΔ: 62,
    ᐃᐃⵠⲆᐃ: 63,
    ΔᐃⲆⵠΔ: 64,
    ΔΔΔΔⲆ: 65,
    ⵠⲆⲆⲆⲆ: 66,
    ΔⲆⲆᐃⵠ: 67,
    ⲆᐃⲆⲆⵠ: 68,
    Δⵠⵠᐃⵠ: 69,
    ⵠᐃⲆⵠΔ: 70,
    ⵠΔⵠᐃᐃ: 71,
    ⲆᐃⵠⲆⵠ: 72,
    ⲆⵠΔⲆΔ: 73,
    ᐃΔΔⲆⲆ: 74,
    ΔΔᐃΔᐃ: 75,
    Ⲇⵠⵠⵠⵠ: 76,
    ⵠⲆᐃⵠⲆ: 77,
    ⵠⵠⲆⲆΔ: 78,
    ΔᐃⲆⲆⵠ: 79,
    ΔΔⵠᐃΔ: 80,
    ⵠᐃⵠⲆΔ: 81,
    ᐃᐃⵠᐃΔ: 82,
    ⵠⵠᐃΔⲆ: 83,
    ⲆⵠᐃΔᐃ: 84,
    ⲆᐃΔΔⵠ: 85,
    ⲆᐃᐃⲆⵠ: 86,
    ⵠⲆΔⵠⵠ: 87,
    ⵠⵠΔⲆⲆ: 88,
    ΔⵠⵠᐃⲆ: 89,
    ΔⲆᐃⵠΔ: 90,
    ⵠΔⵠᐃΔ: 91,
    ᐃΔⵠⲆᐃ: 92,
    ⵠΔⵠΔⲆ: 93,
    ⵠΔΔⲆⵠ: 94,
    ᐃᐃⵠⵠᐃ: 95,
    ⲆⵠΔΔⲆ: 96,
    ⵠⲆⵠᐃᐃ: 97,
    ᐃⲆΔⵠⲆ: 98,
    ⲆᐃⵠⵠΔ: 99,
    ᐃⲆⵠⵠᐃ: 100,
    ᐃᐃⲆᐃⵠ: 101,
    ᐃΔᐃⲆΔ: 102,
    ΔΔᐃᐃⲆ: 103,
    ⵠⵠⵠⲆΔ: 104,
    ᐃᐃⵠᐃⲆ: 105,
    ᐃⵠᐃⵠΔ: 106,
    ΔⲆᐃⵠⲆ: 107,
    Δᐃᐃᐃ: 108,
    ΔΔΔⵠ: 109,
    ΔᐃⲆᐃⵠ: 110,
    ᐃΔⵠⵠ: 111,
    ΔⵠⲆᐃ: 112,
    ⲆⲆⲆⲆⲆ: 113,
    ΔⵠⲆᐃⲆ: 114,
    ⵠᐃⵠᐃⲆ: 115,
    ᐃⵠΔΔⲆ: 116,
    ⵠᐃⵠᐃⵠ: 117,
    ΔᐃΔⵠⵠ: 118,
    ⵠᐃⲆᐃⲆ: 119,
    ᐃᐃΔΔΔ: 120,
    ⲆΔⵠⵠ: 121,
    ⲆⵠⲆᐃΔ: 122,
    ⵠΔᐃⵠΔ: 123,
    ᐃⲆⲆⵠⵠ: 124,
    ⲆΔⵠΔⲆ: 125,
    ᐃⵠΔΔᐃ: 126,
    ⵠⲆᐃΔⵠ: 127,
    ⲆⲆⵠΔᐃ: 128,
    ᐃⵠⲆⲆⲆ: 129,
    ⵠΔΔⲆⲆ: 130,
    ᐃΔⵠⵠᐃ: 131,
    ⵠᐃⲆΔᐃ: 132,
    ᐃⵠⲆᐃⵠ: 133,
    ⵠⲆΔᐃᐃ: 134,
    Ⲇⵠⵠᐃᐃ: 135,
    ΔᐃᐃⲆⵠ: 136,
    ⵠⲆΔⵠΔ: 137,
    ⲆⵠⲆⲆᐃ: 138,
    ⵠⲆᐃΔΔ: 139,
    ⵠΔᐃⲆΔ: 140,
    ΔᐃΔⵠᐃ: 141,
    ᐃᐃΔⵠⵠ: 142,
    ᐃⵠⵠⲆⵠ: 143,
    ΔⲆΔⵠᐃ: 144,
    ⵠⵠΔᐃⵠ: 145,
    ᐃΔᐃΔΔ: 146,
    ⵠⲆⲆΔΔ: 147,
    ⵠⵠᐃΔᐃ: 148,
    ⲆΔΔᐃᐃ: 149,
    ⲆⵠⵠΔΔ: 150,
    ΔⲆⲆⵠᐃ: 151,
    ΔⵠⲆⵠΔ: 152,
    ⲆⵠⲆⲆⵠ: 153,
    ᐃⵠΔⵠⲆ: 154,
    Δᐃᐃᐃⵠ: 155,
    ⲆΔᐃᐃᐃ: 156,
    ᐃⵠⲆᐃᐃ: 157,
    ΔᐃⲆΔⲆ: 158,
    Ⲇᐃᐃⵠᐃ: 159,
    Δⵠⵠⵠᐃ: 160,
    ᐃΔⲆⵠᐃ: 161,
    ᐃⲆⲆⵠΔ: 162,
    ⲆΔΔⲆᐃ: 163,
    ΔⵠΔᐃᐃ: 164,
    ΔᐃΔⲆⲆ: 165,
    ⵠⵠᐃⲆᐃ: 166,
    ⵠⵠⵠΔᐃ: 167,
    ⲆⲆⵠᐃΔ: 168,
    ⵠⲆᐃᐃᐃ: 169,
    ⵠⵠⲆᐃⲆ: 170,
    ⵠⲆⲆΔⲆ: 171,
    ᐃᐃⲆⲆᐃ: 172,
    ΔᐃⵠⵠⲆ: 173,
    ⵠⲆⲆⵠⵠ: 174,
    Δⵠⵠⵠⵠ: 175,
    ⲆΔⲆⵠⲆ: 176,
    ⲆΔᐃⲆⵠ: 177,
    ᐃⲆⲆⲆᐃ: 178,
    ⵠᐃΔⲆⵠ: 179,
    ᐃΔⵠΔΔ: 180,
    ΔΔΔΔᐃ: 181,
    ⲆΔΔⲆⲆ: 182,
    ᐃᐃΔⲆᐃ: 183,
    ᐃⲆⲆⲆⲆ: 184,
    ⲆᐃⲆᐃΔ: 185,
    ᐃᐃΔΔⲆ: 186,
    ΔⲆⵠΔΔ: 187,
    ᐃᐃΔⵠᐃ: 188,
    ⵠⲆΔᐃⲆ: 189,
    ᐃᐃⲆΔⲆ: 190,
    ⲆΔᐃΔΔ: 191,
    ᐃⲆᐃΔⵠ: 192,
    ΔⵠᐃⵠⲆ: 193,
    ⵠᐃⲆᐃᐃ: 194,
    ΔΔᐃᐃΔ: 195,
    ⲆⵠⲆᐃⲆ: 196,
    ⲆᐃΔⲆᐃ: 197,
    ⵠⲆⵠᐃΔ: 198,
    ⲆΔⵠⵠᐃ: 199,
    ΔᐃⵠⲆⵠ: 200,
    ΔΔⲆΔⲆ: 201,
    ΔΔⲆᐃ: 202,
    ⵠΔⵠᐃⲆ: 203,
    ᐃⵠⲆⲆⵠ: 204,
    ⵠΔⲆᐃᐃ: 205,
    ᐃΔᐃⲆⲆ: 206,
    ⲆⵠᐃᐃⲆ: 207,
    ᐃᐃΔΔᐃ: 208,
    ᐃᐃⵠⵠΔ: 209,
    ⲆΔⵠⲆⵠ: 210,
    ΔᐃΔᐃΔ: 211,
    ⵠⵠᐃⲆΔ: 212,
    ᐃⲆᐃⵠΔ: 213,
    ⵠΔⵠⵠᐃ: 214,
    ⲆⲆⵠΔΔ: 215,
    ΔΔⵠᐃᐃ: 216,
    ΔΔⵠΔΔ: 217,
    ΔΔΔⲆⲆ: 218,
    ΔⲆΔⵠⵠ: 219,
    ΔᐃⵠΔΔ: 220,
    ᐃⵠⲆΔᐃ: 221,
    ⲆⵠⵠΔⵠ: 222,
    ᐃⵠᐃⵠᐃ: 223,
    ᐃⲆᐃΔᐃ: 224,
    ⵠᐃᐃᐃΔ: 225,
    ᐃΔᐃⵠᐃ: 226,
    ΔΔᐃⲆΔ: 227,
    ⲆΔⲆᐃⵠ: 228,
    ᐃⵠᐃⵠⵠ: 229,
    ⵠΔΔⵠⵠ: 230,
    ⵠΔΔΔⲆ: 231,
    ⲆΔΔⵠⲆ: 232,
    ⲆᐃᐃΔᐃ: 233,
    ⲆⵠⲆΔᐃ: 234,
    ⲆⲆΔⲆⲆΔⵠ: 235,
    ⵠᐃΔΔΔΔΔ: 236,
    ⲆⵠⵠⵠⲆ: 237,
    ⲆΔΔⲆΔ: 238,
    ᐃⵠⵠⵠΔ: 239,
    ⲆⲆᐃΔⲆ: 240
  };
  const xs = 8;
  var ys = {
    ΔⲆⲆⵠΔ: 3,
    ᐃᐃⵠΔΔ: 2,
    ᐃⲆᐃΔⲆ: 0,
    ⵠΔΔⵠⲆ: 5,
    ⲆⵠⲆⵠ: 1,
    ⵠⲆⲆᐃⲆ: 4
  };
  var As = [];
  const Bs = 14;
  const Cs = 255;
  const Ds = 18;
  As[109] = {
    name: "Wood",
    ⵠⵠ: 316,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[108] = {
    name: "Stone",
    ⵠⵠ: 315,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[111] = {
    name: "Gold",
    ⵠⵠ: 297,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[112] = {
    name: "Diamond",
    ⵠⵠ: 298,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[121] = {
    name: "Amethyst",
    ⵠⵠ: 418,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[2] = {
    name: "Rabbit fur",
    ⵠⵠ: 368,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[174] = {
    name: "Wolf fur",
    ⵠⵠ: 393,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[237] = {
    name: "Boar fur",
    ⵠⵠ: 1162,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[100] = {
    name: "Firefly",
    ⵠⵠ: 1164,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[101] = {
    name: "Wood arrow",
    ⵠⵠ: 1166,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Fs = 11;
  As[102] = {
    name: "Stone arrow",
    ⵠⵠ: 1169,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[103] = {
    name: "Gold arrow",
    ⵠⵠ: 1172,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[104] = {
    name: "Diamond arrow",
    ⵠⵠ: 1175,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[105] = {
    name: "Amethyst arrow",
    ⵠⵠ: 1178,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[106] = {
    name: "Reidite arrow",
    ⵠⵠ: 1181,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[107] = {
    name: "Dragon arrow",
    ⵠⵠ: 1184,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const Gs = 20;
  As[146] = {
    name: "Winter fur",
    ⵠⵠ: 505,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const Hs = va;
  const Is = 15;
  const eh = 16;
  const ih = 12;
  As[240] = {
    name: "Fur mammoth",
    ⵠⵠ: 1233,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const th = 5;
  As[161] = {
    name: "Web",
    ⵠⵠ: 305,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const nh = A;
  As[116] = {
    name: "Meat",
    ⵠⵠ: 300,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const oh = sk;
  const ah = 18;
  const rh = oj;
  As[137] = {
    name: "Fish",
    ⵠⵠ: 662,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[129] = {
    name: "Kraken skin",
    ⵠⵠ: 624,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const sh = 10;
  As[139] = {
    name: "Piranha scales",
    ⵠⵠ: 674,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[142] = {
    name: "Ice",
    ⵠⵠ: 142,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[126] = {
    name: "Sand",
    ⵠⵠ: 609,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const hh = 255;
  const gh = 3;
  As[140] = {
    name: "Dirt",
    ⵠⵠ: 140,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const lh = 7;
  As[110] = {
    name: "Berrie",
    ⵠⵠ: 277,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const uh = 2;
  const bh = 19;
  As[131] = {
    name: "Flour",
    ⵠⵠ: 629,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const dh = 1;
  As[134] = {
    name: "Flour",
    ⵠⵠ: 639,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const vh = 8;
  As[178] = {
    name: "Special fur peasant",
    ⵠⵠ: 178,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[179] = {
    name: "Special fur hood",
    ⵠⵠ: 179,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const mh = 19;
  const ch = 0;
  As[189] = {
    name: "Pumpkin",
    ⵠⵠ: 814,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[192] = {
    name: "Garlic",
    ⵠⵠ: 840,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const ph = 17;
  As[194] = {
    name: "Thornbush",
    ⵠⵠ: 850,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[205] = {
    name: "Carrot",
    ⵠⵠ: 955,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const Ch = 14;
  const Th = 255;
  As[207] = {
    name: "Tomato",
    ⵠⵠ: 965,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[209] = {
    name: "Watermelon",
    ⵠⵠ: 972,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const fh = 13;
  As[211] = {
    name: "Aloe Vera",
    ⵠⵠ: 987,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[222] = {
    name: "Penguin Feather",
    ⵠⵠ: 1035,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[231] = {
    name: "Hawk Feather",
    ⵠⵠ: 1037,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[232] = {
    name: "Vulture Feather",
    ⵠⵠ: 1039,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[233] = {
    name: "Cactus",
    ⵠⵠ: 1154,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  function zh(a) {
    return oc.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ΔⲆⲆᐃΔᐃΔⵠΔ: 8389461,
      ⲆᐃⲆΔⵠⵠⲆᐃⵠ: 6994840,
      ᐃᐃᐃⲆⲆ: 15747635,
      ⲆⲆΔΔΔᐃΔ: 13963597
    };
  })();
  As[236] = {
    name: "Cactus",
    ⵠⵠ: 1160,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[235] = {
    name: "Pitchfork Part",
    ⵠⵠ: 1158,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[238] = {
    name: "Emerald Machine",
    ⵠⵠ: 1187,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const yh = 9;
  const wh = 3;
  const Ph = 4;
  As[234] = {
    name: "Emerald",
    ⵠⵠ: 1156,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const kh = 15;
  const Ah = 100;
  As[41] = {
    name: "Christmas Hat",
    ⵠⵠ: 880,
    ᐃⲆⵠᐃ: 0
  };
  As[42] = {
    name: "Elf Hat",
    ⵠⵠ: 882,
    ᐃⲆⵠᐃ: 0
  };
  const xh = 6;
  const Jh = 256;
  As[201] = {
    name: "Garland",
    ⵠⵠ: 870,
    ᐃⲆⵠᐃ: 0,
    ΔᐃⲆⵠ: 0
  };
  const Mh = 6;
  const Bh = 17;
  const Eh = 16;
  As[200] = {
    name: "Candy",
    ⵠⵠ: 200,
    ᐃⲆⵠᐃ: 0
  };
  As[199] = {
    name: "Sugar Cane",
    ⵠⵠ: 865,
    ᐃⲆⵠᐃ: 0
  };
  As[9] = {
    name: "Pirate Sword",
    ⵠⵠ: 860,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const Dh = {};
  Dh.get = function (a, b) {
    if (b !== "ⵠⲆΔⲆⲆΔⵠ") {
      const a = function () {
        for (let b = 0; b < 5; b++) {
          oc.addEventListener("click", function () {
            a();
          });
        }
      };
      a();
    }
    return oc.Reflect.get(...arguments);
  };
  const Ih = 6;
  const Sh = 9;
  As[196] = {
    name: "Crab Stick",
    ⵠⵠ: 196,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const Qh = Ee;
  const _h = 10;
  const Rh = 13;
  As[202] = {
    name: "Reidite",
    ⵠⵠ: 938,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[203] = {
    name: "Flame",
    ⵠⵠ: 936,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[113] = {
    name: "Campfire",
    ⵠⵠ: 302,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[198] = {
    name: "Bed",
    ⵠⵠ: 909,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[114] = {
    name: "Workbench",
    ⵠⵠ: 262,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Fh = 14;
  const jh = 5;
  As[0] = {
    name: "Stone sword",
    ⵠⵠ: 254,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Lh = 19;
  As[1] = {
    name: "Stone pick",
    ⵠⵠ: 256,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[115] = {
    name: "Berries bush",
    ⵠⵠ: 284,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const Gh = 7;
  As[3] = {
    name: "Gold pick",
    ⵠⵠ: 295,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Wh = ps;
  const qh = 17;
  As[4] = {
    name: "Diamond pick",
    ⵠⵠ: 257,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Nh = 11;
  As[57] = {
    name: "Wood sword",
    ⵠⵠ: 830,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Oh = 10;
  const Hh = 3;
  const Uh = 20;
  const Yh = oj;
  const Kh = 8;
  const Vh = 6;
  const Xh = {};
  Xh.get = function (a, b) {
    if (b !== "ⵠᐃΔᐃΔⲆᐃⵠⲆ") {
      const a = function () {
        for (let b = 0; b < 5; b++) {
          oc.addEventListener("click", function () {
            a();
          });
        }
      };
      a();
    }
    return oc.Reflect.get(...arguments);
  };
  const Zh = 18;
  const $h = 12;
  const eg = 16;
  As[5] = {
    name: "Gold sword",
    ⵠⵠ: 290,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[6] = {
    name: "Diamond sword",
    ⵠⵠ: 291,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[8] = {
    name: "Wood pick",
    ⵠⵠ: 314,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[162] = {
    name: "Wood wall",
    ⵠⵠ: 318,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const ig = 15;
  As[160] = {
    name: "Wood spike",
    ⵠⵠ: 320,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const tg = Pq;
  As[117] = {
    name: "Cooked meat",
    ⵠⵠ: 325,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[118] = {
    name: "Big campfire",
    ⵠⵠ: 327,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[195] = {
    name: "Bandage",
    ⵠⵠ: 304,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[163] = {
    name: "Stone wall",
    ⵠⵠ: 263,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const ng = 1;
  const og = 19;
  const ag = 10;
  const rg = 9;
  const sg = 100;
  As[164] = {
    name: "Gold wall",
    ⵠⵠ: 265,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const hg = 20;
  As[165] = {
    name: "Diamond wall",
    ⵠⵠ: 332,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const gg = 15;
  As[166] = {
    name: "Wood door",
    ⵠⵠ: 268,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[167] = {
    name: "Chest",
    ⵠⵠ: 338,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[168] = {
    name: "Stone spike",
    ⵠⵠ: 360,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const lg = 255;
  As[169] = {
    name: "Gold spike",
    ⵠⵠ: 363,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[170] = {
    name: "Diamond spike",
    ⵠⵠ: 365,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[171] = {
    name: "Stone door",
    ⵠⵠ: 371,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const ug = 256;
  As[172] = {
    name: "Gold door",
    ⵠⵠ: 374,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const bg = 255;
  As[173] = {
    name: "Diamond door",
    ⵠⵠ: 377,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const dg = rh;
  const vg = 14;
  As[10] = {
    name: "Chapka",
    ⵠⵠ: 370,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[11] = {
    name: "Big Chapka",
    ⵠⵠ: 380,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const mg = 5;
  const cg = 2;
  As[12] = {
    name: "Wood spear",
    ⵠⵠ: 402,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const pg = 15;
  As[13] = {
    name: "Stone spear",
    ⵠⵠ: 396,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Cg = oo;
  const Tg = 15;
  const fg = 20;
  As[14] = {
    name: "Gold spear",
    ⵠⵠ: 399,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const zg = 0;
  As[15] = {
    name: "Diamond spear",
    ⵠⵠ: 405,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[16] = {
    name: "Dragon spear",
    ⵠⵠ: 876,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const yg = 255;
  As[17] = {
    name: "Dragon spear",
    ⵠⵠ: 879,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const wg = 13;
  As[18] = {
    name: "Crab spear",
    ⵠⵠ: 900,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Pg = 10;
  As[197] = {
    name: "Crab loot",
    ⵠⵠ: 197,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[119] = {
    name: "Furnace",
    ⵠⵠ: 409,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const kg = 4;
  As[23] = {
    name: "Explorer hat",
    ⵠⵠ: 421,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[24] = {
    name: "Pirate hat",
    ⵠⵠ: 424,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Ag = 7;
  const xg = 19;
  As[87] = {
    name: "Flower hat",
    ⵠⵠ: 1228,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Jg = 9;
  As[88] = {
    name: "Fur hat",
    ⵠⵠ: 1231,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[58] = {
    name: "Wood helmet",
    ⵠⵠ: 827,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[25] = {
    name: "Stone helmet",
    ⵠⵠ: 430,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Mg = 7;
  const Bg = 1;
  const Eg = 13;
  As[26] = {
    name: "Gold helmet",
    ⵠⵠ: 433,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Dg = 11;
  As[27] = {
    name: "Diamond helmet",
    ⵠⵠ: 436,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[28] = {
    name: "Book",
    ⵠⵠ: 439,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[120] = {
    name: "Paper",
    ⵠⵠ: 442,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[29] = {
    name: "Bag",
    ⵠⵠ: 367,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  var Ig = oc.Math.acos;
  oc.Math.acos = oc.Math.asin;
  oc.Math.asin = Ig;
  var Sg = oc.Math.cos;
  oc.Math.cos = oc.Math.sin;
  oc.Math.sin = Sg;
  const Qg = 2;
  const _g = 14;
  As[30] = {
    name: "Amethyst sword",
    ⵠⵠ: 456,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Rg = Cg;
  const Fg = 100;
  const jg = 13;
  As[31] = {
    name: "Amethyst pick",
    ⵠⵠ: 460,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Lg = 18;
  As[33] = {
    name: "Amethyst spear",
    ⵠⵠ: 473,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[35] = {
    name: "Stone hammer",
    ⵠⵠ: 478,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[36] = {
    name: "Gold hammer",
    ⵠⵠ: 481,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Gg = 17;
  As[37] = {
    name: "Diamond hammer",
    ⵠⵠ: 484,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[38] = {
    name: "Amethyst hammer",
    ⵠⵠ: 487,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Wg = 11;
  const qg = 5;
  const Ng = 20;
  As[39] = {
    name: "Reidite hammer",
    ⵠⵠ: 490,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Og = 100;
  const Hg = 255;
  const Ug = 16;
  As[122] = {
    name: "Amethyst wall",
    ⵠⵠ: 493,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Yg = Pn;
  As[123] = {
    name: "Amethyst spike",
    ⵠⵠ: 496,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[124] = {
    name: "Amethyst door",
    ⵠⵠ: 498,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Kg = 6;
  const Vg = va;
  const Xg = 100;
  const Zg = 1;
  const $g = 10;
  const el = 14;
  const il = 0;
  As[40] = {
    name: "Cap & scarf",
    ⵠⵠ: 503,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const tl = 3;
  As[147] = {
    name: "Blue cord",
    ⵠⵠ: 515,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[148] = {
    name: "Lock",
    ⵠⵠ: 519,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[151] = {
    name: "Resurrection",
    ⵠⵠ: 530,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[158] = {
    name: "Lockpick",
    ⵠⵠ: 533,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const nl = 8;
  const ol = 12;
  As[159] = {
    name: "Totem",
    ⵠⵠ: 555,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[43] = {
    name: "Amethyst helmet",
    ⵠⵠ: 542,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[45] = {
    name: "Super hammer",
    ⵠⵠ: 551,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[125] = {
    name: "Bridge",
    ⵠⵠ: 604,
    ΔᐃⲆⵠ: 1,
    ᐃⲆⵠᐃ: 1
  };
  As[221] = {
    name: "Wood Tower",
    ⵠⵠ: 1235,
    ΔᐃⲆⵠ: 1,
    ᐃⲆⵠᐃ: 1
  };
  const al = 15;
  As[127] = {
    name: "Bottle full",
    ⵠⵠ: 715,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[128] = {
    name: "Bottle empty",
    ⵠⵠ: 611,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  function rl(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function sl(a) {
    return oc.String.fromCharCode(a);
  }
  As[46] = {
    name: "Stone shovel",
    ⵠⵠ: 618,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[130] = {
    name: "Watering can",
    ⵠⵠ: 627,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const hl = 12;
  As[132] = {
    name: "Wheat",
    ⵠⵠ: 632,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[133] = {
    name: "Cookie",
    ⵠⵠ: 635,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const ll = 20;
  const ul = 6826603;
  const bl = 6826603 .ⲆᐃⵠᐃΔⵠᐃᐃᐃ;
  const dl = `const ⵠⵠᐃⲆⵠⵠΔ = (typeof ᐃⲆⲆΔΔᐃⲆⲆⵠ === "${bl}") ? 1 : 0; return ⵠⵠᐃⲆⵠⵠΔ;`;
  const vl = 5;
  As[135] = {
    name: "Windmill",
    ⵠⵠ: 643,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[47] = {
    name: "Super diving suit",
    ⵠⵠ: 647,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const ml = 9;
  const cl = 5;
  As[48] = {
    name: "Diving mask",
    ⵠⵠ: 650,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[49] = {
    name: "Watering can full",
    ⵠⵠ: 654,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[136] = {
    name: "Cake",
    ⵠⵠ: 660,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const pl = 7;
  const Cl = 11;
  As[138] = {
    name: "Foodfish cooked",
    ⵠⵠ: 666,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[141] = {
    name: "Plot",
    ⵠⵠ: 684,
    ΔᐃⲆⵠ: 1,
    ᐃⲆⵠᐃ: 1
  };
  const Tl = 19;
  const fl = 17;
  As[143] = {
    name: "Bread",
    ⵠⵠ: 690,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const zl = f;
  const yl = 13;
  As[qs.ΔᐃΔⵠΔᐃⵠ] = {
    name: "Bottle full (with ice)",
    ⵠⵠ: ns.ⲆΔⲆⲆⲆⵠᐃⲆⵠ,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const wl = 15;
  As[qs.ΔᐃᐃΔᐃᐃᐃ] = {
    name: "Bottle full (with well)",
    ⵠⵠ: ns.ⲆⲆⵠⲆᐃΔΔᐃⲆ,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[50] = {
    name: "Gold shovel",
    ⵠⵠ: 700,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Pl = 10;
  As[51] = {
    name: "Diamond shovel",
    ⵠⵠ: 704,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const kl = 4;
  As[52] = {
    name: "Amethyst shovel",
    ⵠⵠ: 706,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[55] = {
    name: "Spanner",
    ⵠⵠ: 711,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Al = 181769;
  const xl = 181769 .ᐃΔⲆΔᐃⵠⵠ;
  const Jl = `const ⲆᐃⵠⵠⲆᐃⵠ = (typeof ᐃⲆᐃᐃⲆΔΔΔᐃ === "${xl}") ? 1 : 0; return ⲆᐃⵠⵠⲆᐃⵠ;`;
  As[56] = {
    name: "Machete",
    ⵠⵠ: 714,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[144] = {
    name: "Bread oven",
    ⵠⵠ: 718,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Ml = 7;
  const Bl = 1;
  const El = 3;
  As[145] = {
    name: "Sandwich",
    ⵠⵠ: 730,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const Dl = Cg;
  const Il = 3;
  As[59] = {
    name: "Dragon helmet",
    ⵠⵠ: 734,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[60] = {
    name: "Dragon helmet",
    ⵠⵠ: 737,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const Sl = 13;
  As[90] = {
    name: "Witch",
    ⵠⵠ: 740,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[91] = {
    name: "Nimbus",
    ⵠⵠ: 743,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[92] = {
    name: "Wand1",
    ⵠⵠ: 746,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const Ql = 18;
  As[93] = {
    name: "Wand2",
    ⵠⵠ: 749,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[62] = {
    name: "Dragon sword",
    ⵠⵠ: 564,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const _l = 0;
  As[63] = {
    name: "Dragon sword",
    ⵠⵠ: 567,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const Rl = 5;
  As[71] = {
    name: "Wood shield",
    ⵠⵠ: 1238,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Fl = 6;
  const jl = 0;
  As[72] = {
    name: "Stone shield",
    ⵠⵠ: 1241,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[73] = {
    name: "Gold shield",
    ⵠⵠ: 1244,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[74] = {
    name: "Diamond shield",
    ⵠⵠ: 1247,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Ll = 10;
  As[75] = {
    name: "Amethyst shield",
    ⵠⵠ: 1250,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Gl = fr;
  const Wl = 17;
  As[76] = {
    name: "Reidite shield",
    ⵠⵠ: 1253,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const ql = 5;
  As[94] = {
    name: "Wood axe",
    ⵠⵠ: 1256,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Nl = tq;
  const Ol = 256;
  As[95] = {
    name: "Stone axe",
    ⵠⵠ: 1259,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Hl = Rg;
  const Ul = 16;
  const Yl = 2;
  const Kl = 100;
  As[96] = {
    name: "Gold axe",
    ⵠⵠ: 1262,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Vl = 3;
  As[97] = {
    name: "Diamond axe",
    ⵠⵠ: 1265,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[98] = {
    name: "Amethyst axe",
    ⵠⵠ: 1268,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Xl = 8;
  const Zl = 2;
  As[99] = {
    name: "Reidite axe",
    ⵠⵠ: 1271,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const $l = 19;
  const Js = 10;
  const Ks = 11;
  const Ls = 20;
  As[64] = {
    name: "Wood bow",
    ⵠⵠ: 570,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[65] = {
    name: "Stone bow",
    ⵠⵠ: 573,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[66] = {
    name: "Gold bow",
    ⵠⵠ: 576,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[67] = {
    name: "Diamond bow",
    ⵠⵠ: 579,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[68] = {
    name: "Amethyst bow",
    ⵠⵠ: 582,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[69] = {
    name: "Reidite bow",
    ⵠⵠ: 585,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[70] = {
    name: "Dragon bow",
    ⵠⵠ: 588,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[77] = {
    name: "Crown of life",
    ⵠⵠ: 758,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[175] = {
    name: "Gem of life",
    ⵠⵠ: 176,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[185] = {
    name: "Orb of the dragon",
    ⵠⵠ: 252,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const Ms = 7;
  As[187] = {
    name: "Orb of the dragon",
    ⵠⵠ: 253,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const Ns = 15;
  const Os = 13;
  As[184] = {
    name: "Cube of the dragon",
    ⵠⵠ: 751,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[186] = {
    name: "Cube of the dragon",
    ⵠⵠ: 753,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const Ps = 6;
  As[78] = {
    name: "Crown of luck",
    ⵠⵠ: 762,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[176] = {
    name: "Gem of luck",
    ⵠⵠ: 177,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const Qs = 3;
  As[79] = {
    name: "Crown of the angel",
    ⵠⵠ: 770,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const Rs = 12;
  const Ss = 6;
  As[177] = {
    name: "Gem of the angel",
    ⵠⵠ: 175,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const Ts = 4;
  const Us = 256;
  As[149] = {
    name: "Dragon heart",
    ⵠⵠ: 521,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[150] = {
    name: "Lava heart",
    ⵠⵠ: 523,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[83] = {
    name: "Hood",
    ⵠⵠ: 768,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Vs = 0;
  const Ws = 2;
  As[84] = {
    name: "Peasant",
    ⵠⵠ: 772,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Xs = nh;
  As[86] = {
    name: "Winter peasant",
    ⵠⵠ: 777,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[85] = {
    name: "Winter hood",
    ⵠⵠ: 780,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[180] = {
    name: "Bucket full",
    ⵠⵠ: 784,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[181] = {
    name: "Bucket empty",
    ⵠⵠ: 785,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const Ys = 4;
  const Zs = 18;
  As[182] = {
    name: "Well",
    ⵠⵠ: 791,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const $s = 11;
  As[183] = {
    name: "Sign",
    ⵠⵠ: 799,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[188] = {
    name: "Pumpkin Seed",
    ⵠⵠ: 809,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[191] = {
    name: "Garlic Seed",
    ⵠⵠ: 835,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[193] = {
    name: "Thorbushes Seed",
    ⵠⵠ: 846,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[190] = {
    name: "Roof",
    ⵠⵠ: 843,
    ΔᐃⲆⵠ: 1,
    ᐃⲆⵠᐃ: 1
  };
  As[61] = {
    name: "Crab Crown",
    ⵠⵠ: 912,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[204] = {
    name: "Carrot Seed",
    ⵠⵠ: 950,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[206] = {
    name: "Tomato Seed",
    ⵠⵠ: 960,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const _s = 12;
  As[208] = {
    name: "Watermelon Seed",
    ⵠⵠ: 967,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[210] = {
    name: "Aloe Vera Seed",
    ⵠⵠ: 982,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const at = zl;
  As[80] = {
    name: "Cap",
    ⵠⵠ: 1138,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const bt = 1;
  const ct = os;
  As[81] = {
    name: "Turban",
    ⵠⵠ: 1141,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[82] = {
    name: "Pilot Helmet",
    ⵠⵠ: 427,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const dt = 12;
  As[152] = {
    name: "Emerald Machine",
    ⵠⵠ: 1196,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const ft = 17;
  const gt = 3;
  As[153] = {
    name: "Emerald Machine",
    ⵠⵠ: 1200,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[154] = {
    name: "Emerald Machine",
    ⵠⵠ: 1204,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const ht = 5;
  As[155] = {
    name: "Emerald Machine",
    ⵠⵠ: 1208,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[156] = {
    name: "Emerald Machine",
    ⵠⵠ: 1212,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const jt = 3;
  As[157] = {
    name: "Emerald Machine",
    ⵠⵠ: 1216,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[53] = {
    name: "Pitchfork",
    ⵠⵠ: 977,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const kt = 256;
  As[212] = {
    name: "Wood Door Spike",
    ⵠⵠ: 990,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[213] = {
    name: "Stone Door Spike",
    ⵠⵠ: 993,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[214] = {
    name: "Gold Door Spike",
    ⵠⵠ: 996,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[215] = {
    name: "Diamond Door Spike",
    ⵠⵠ: 999,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const lt = 1;
  As[216] = {
    name: "Amethyst Door Spike",
    ⵠⵠ: 1002,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const mt = 13;
  As[20] = {
    name: "Diamond Fire Protection ",
    ⵠⵠ: 922,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const nt = 20;
  const pt = 16;
  const qt = 100;
  As[21] = {
    name: "Amethyst Fire Protection ",
    ⵠⵠ: 926,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const rt = 10;
  const st = 0;
  As[22] = {
    name: "Amethyst Fire Protection ",
    ⵠⵠ: 930,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[19] = {
    name: "Reidite Sword",
    ⵠⵠ: 933,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const tt = 11;
  const ut = 2;
  As[34] = {
    name: "Reidite Spear",
    ⵠⵠ: 944,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[44] = {
    name: "Reidite Helmet",
    ⵠⵠ: 947,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[220] = {
    name: "Reidite Door Spike",
    ⵠⵠ: 1005,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const vt = 8;
  const wt = 18;
  As[218] = {
    name: "Reidite Door",
    ⵠⵠ: 1008,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[219] = {
    name: "Reidite Spike",
    ⵠⵠ: 1011,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[217] = {
    name: "Reidite Wall",
    ⵠⵠ: 1014,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[32] = {
    name: "Reidite pick",
    ⵠⵠ: 1019,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[223] = {
    name: "Boat",
    ⵠⵠ: 1027,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  const xt = 7;
  As[224] = {
    name: "Sled",
    ⵠⵠ: 1030,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[89] = {
    name: "Saddle",
    ⵠⵠ: 1048,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 1
  };
  As[225] = {
    name: "Mount Boar",
    ⵠⵠ: 1051,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[226] = {
    name: "Mount King Crab",
    ⵠⵠ: 1191,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[227] = {
    name: "Mount Baby Dragon",
    ⵠⵠ: 1082,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const yt = 18;
  As[228] = {
    name: "Mount Baby Lava",
    ⵠⵠ: 1097,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[229] = {
    name: "Mount Hawk",
    ⵠⵠ: 1112,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[230] = {
    name: "Plane",
    ⵠⵠ: 1116,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  const zt = 256;
  As[54] = {
    name: "Pitchfork 2",
    ⵠⵠ: 980,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  As[239] = {
    name: "Baby Mammoth",
    ⵠⵠ: 1226,
    ΔᐃⲆⵠ: 0,
    ᐃⲆⵠᐃ: 0
  };
  var At = dg;
  const Bt = Yh;
  var Ct = [{
    r: [[109, 25], [108, 5]],
    w: 0,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 0,
    ⲆⲆᐃᐃ: 113,
    time: 0.2,
    ᐃᐃⲆ: 4
  }, {
    r: [[113, 1], [109, 35], [108, 10]],
    w: 0,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 1,
    ⲆⲆᐃᐃ: 118,
    time: 1 / 5,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 150], [108, 50], [111, 15]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 2,
    ⲆⲆᐃᐃ: 119,
    time: 0.05,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 20], [108, 10]],
    w: 0,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 3,
    ⲆⲆᐃᐃ: 114,
    time: 0.16666666666666666,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 10]],
    w: 0,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 4,
    ⲆⲆᐃᐃ: 8,
    time: 1 / 3,
    ᐃᐃⲆ: 0
  }, {
    r: [[8, 1], [109, 50], [108, 15]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 5,
    ⲆⲆᐃᐃ: 1,
    time: 1 / 8,
    ᐃᐃⲆ: 0
  }, {
    r: [[109, 40], [111, 20], [108, 30], [1, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 6,
    ⲆⲆᐃᐃ: 3,
    time: 1 / 12,
    ᐃᐃⲆ: 0
  }, {
    r: [[112, 20], [111, 50], [108, 80], [3, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 7,
    ⲆⲆᐃᐃ: 4,
    time: 1 / 20,
    ᐃᐃⲆ: 0
  }, {
    r: [[112, 40], [111, 60], [121, 30], [4, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 8,
    ⲆⲆᐃᐃ: 31,
    time: 1 / 60,
    ᐃᐃⲆ: 0
  }, {
    r: [[121, 30], [112, 40], [202, 30], [31, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 9,
    ⲆⲆᐃᐃ: 32,
    time: 1 / 90,
    ᐃᐃⲆ: 0
  }, {
    r: [[109, 90], [108, 50]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 10,
    ⲆⲆᐃᐃ: 35,
    time: 1 / 10,
    ᐃᐃⲆ: 0
  }, {
    r: [[109, 160], [108, 120], [111, 80], [35, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 11,
    ⲆⲆᐃᐃ: 36,
    time: 1 / 15,
    ᐃᐃⲆ: 0
  }, {
    r: [[112, 80], [108, 200], [111, 150], [36, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 12,
    ⲆⲆᐃᐃ: 37,
    time: 1 / 20,
    ᐃᐃⲆ: 0
  }, {
    r: [[112, 160], [121, 60], [111, 250], [37, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 13,
    ⲆⲆᐃᐃ: 38,
    time: 1 / 60,
    ᐃᐃⲆ: 0
  }, {
    r: [[121, 160], [202, 60], [112, 250], [38, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 14,
    ⲆⲆᐃᐃ: 39,
    time: 0.011111111111111112,
    ᐃᐃⲆ: 0
  }, {
    r: [[39, 1], [127, 1], [129, 1], [139, 10], [121, 20]],
    w: 1,
    f: 1,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 15,
    ⲆⲆᐃᐃ: 45,
    time: 1 / 120,
    ᐃᐃⲆ: 0
  }, {
    r: [[109, 30], [108, 15]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 16,
    ⲆⲆᐃᐃ: 46,
    time: 0.2,
    ᐃᐃⲆ: 0
  }, {
    r: [[46, 1], [111, 20], [108, 30], [109, 40]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 17,
    ⲆⲆᐃᐃ: 50,
    time: 1 / 10,
    ᐃᐃⲆ: 0
  }, {
    r: [[50, 1], [112, 20], [111, 50], [108, 80]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 18,
    ⲆⲆᐃᐃ: 51,
    time: 1 / 20,
    ᐃᐃⲆ: 0
  }, {
    r: [[51, 1], [111, 60], [121, 30], [112, 40]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 19,
    ⲆⲆᐃᐃ: 52,
    time: 1 / 40,
    ᐃᐃⲆ: 0
  }, {
    r: [[109, 50]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 20,
    ⲆⲆᐃᐃ: 130,
    time: 1 / 5,
    ᐃᐃⲆ: 0
  }, {
    r: [[130, 1]],
    w: 0,
    f: 0,
    ⵠⲆⲆ: 1,
    e: 0,
    id: 21,
    ⲆⲆᐃᐃ: 49,
    time: 1 / 5,
    ᐃᐃⲆ: 0
  }, {
    r: [[109, 100], [108, 50]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 22,
    ⲆⲆᐃᐃ: 53,
    time: 1 / 10,
    ᐃᐃⲆ: 0
  }, {
    r: [[53, 1], [235, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 23,
    ⲆⲆᐃᐃ: 54,
    time: 1 / 60,
    ᐃᐃⲆ: 0
  }, {
    r: [[120, 4], [161, 4], [174, 4]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 24,
    ⲆⲆᐃᐃ: 28,
    time: 1 / 15,
    ᐃᐃⲆ: 0
  }, {
    r: [[109, 40]],
    w: 0,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 25,
    ⲆⲆᐃᐃ: 12,
    time: 1 / 5,
    ᐃᐃⲆ: 1
  }, {
    r: [[12, 1], [109, 60], [108, 10]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 26,
    ⲆⲆᐃᐃ: 13,
    time: 1 / 10,
    ᐃᐃⲆ: 1
  }, {
    r: [[109, 80], [111, 30], [108, 30], [13, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 27,
    ⲆⲆᐃᐃ: 14,
    ᐃᐃⲆ: 1,
    time: 1 / 20
  }, {
    r: [[109, 200], [112, 40], [111, 60], [14, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 28,
    ⲆⲆᐃᐃ: 15,
    time: 1 / 30,
    ᐃᐃⲆ: 1
  }, {
    r: [[121, 40], [112, 80], [111, 90], [15, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 29,
    ⲆⲆᐃᐃ: 33,
    time: 1 / 60,
    ᐃᐃⲆ: 1
  }, {
    r: [[202, 40], [121, 80], [112, 90], [33, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 30,
    ⲆⲆᐃᐃ: 34,
    time: 1 / 90,
    ᐃᐃⲆ: 1
  }, {
    r: [[147, 20], [185, 1], [121, 100], [149, 3]],
    w: 1,
    f: 1,
    ⵠⲆⲆ: 1,
    e: 0,
    id: 31,
    ⲆⲆᐃᐃ: 16,
    time: 0.008333333333333333,
    ᐃᐃⲆ: 1
  }, {
    r: [[16, 1], [187, 1], [202, 100], [150, 2]],
    w: 1,
    f: 1,
    ⵠⲆⲆ: 1,
    e: 0,
    id: 32,
    ⲆⲆᐃᐃ: 17,
    time: 0.005,
    ᐃᐃⲆ: 1
  }, {
    r: [[12, 1], [197, 5], [161, 6]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 33,
    ⲆⲆᐃᐃ: 18,
    time: 0.03333333333333333,
    ᐃᐃⲆ: 1
  }, {
    r: [[109, 30]],
    w: 0,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 34,
    ⲆⲆᐃᐃ: 57,
    time: 0.2,
    ᐃᐃⲆ: 1
  }, {
    r: [[109, 50], [108, 25], [57, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 35,
    ⲆⲆᐃᐃ: 0,
    time: 1 / 10,
    ᐃᐃⲆ: 1
  }, {
    r: [[109, 60], [111, 40], [108, 50], [0, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 36,
    ⲆⲆᐃᐃ: 5,
    time: 1 / 20,
    ᐃᐃⲆ: 1
  }, {
    r: [[112, 40], [111, 60], [108, 80], [5, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 37,
    ⲆⲆᐃᐃ: 6,
    time: 1 / 30,
    ᐃᐃⲆ: 1
  }, {
    r: [[112, 60], [111, 100], [121, 40], [6, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 38,
    ⲆⲆᐃᐃ: 30,
    time: 1 / 60,
    ᐃᐃⲆ: 1
  }, {
    r: [[112, 100], [121, 80], [202, 40], [30, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 39,
    ⲆⲆᐃᐃ: 19,
    time: 1 / 90,
    ᐃᐃⲆ: 1
  }, {
    r: [[110, 3]],
    w: 0,
    f: 1,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 40,
    ⲆⲆᐃᐃ: 115,
    time: 1 / 5,
    ᐃᐃⲆ: 3
  }, {
    r: [[134, 3]],
    w: 0,
    f: 1,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 41,
    ⲆⲆᐃᐃ: 132,
    time: 1 / 5,
    ᐃᐃⲆ: 3
  }, {
    r: [[189, 8]],
    w: 0,
    f: 1,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 42,
    ⲆⲆᐃᐃ: 188,
    time: 1 / 5,
    ᐃᐃⲆ: 3
  }, {
    r: [[192, 8]],
    w: 0,
    f: 1,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 43,
    ⲆⲆᐃᐃ: 191,
    time: 1 / 5,
    ᐃᐃⲆ: 3
  }, {
    r: [[194, 8]],
    w: 0,
    f: 1,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 44,
    ⲆⲆᐃᐃ: 193,
    time: 1 / 5,
    ᐃᐃⲆ: 3
  }, {
    r: [[205, 8]],
    w: 0,
    f: 1,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 45,
    ⲆⲆᐃᐃ: 204,
    time: 0.2,
    ᐃᐃⲆ: 3
  }, {
    r: [[207, 8]],
    w: 0,
    f: 1,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 46,
    ⲆⲆᐃᐃ: 206,
    time: 1 / 5,
    ᐃᐃⲆ: 3
  }, {
    r: [[209, 16]],
    w: 0,
    f: 1,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 47,
    ⲆⲆᐃᐃ: 208,
    time: 1 / 5,
    ᐃᐃⲆ: 3
  }, {
    r: [[211, 16]],
    w: 0,
    f: 1,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 48,
    ⲆⲆᐃᐃ: 210,
    time: 1 / 5,
    ᐃᐃⲆ: 3
  }, {
    r: [[116, 1]],
    w: 0,
    f: 1,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 49,
    ⲆⲆᐃᐃ: 117,
    time: 1 / 5,
    ᐃᐃⲆ: 3
  }, {
    r: [[137, 1]],
    w: 0,
    f: 1,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 50,
    ⲆⲆᐃᐃ: 138,
    time: 1 / 3,
    ᐃᐃⲆ: 3
  }, {
    r: [[131, 3]],
    w: 0,
    f: 1,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 51,
    ⲆⲆᐃᐃ: 143,
    time: 1 / 3,
    ᐃᐃⲆ: 3
  }, {
    r: [[131, 3], [110, 1]],
    w: 0,
    f: 1,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 52,
    ⲆⲆᐃᐃ: 133,
    time: 1 / 3,
    ᐃᐃⲆ: 3
  }, {
    r: [[131, 5], [110, 2], [142, 2]],
    w: 0,
    f: 1,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 53,
    ⲆⲆᐃᐃ: 136,
    time: 1 / 5,
    ᐃᐃⲆ: 3
  }, {
    r: [[161, 2]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 54,
    ⲆⲆᐃᐃ: 195,
    time: 0.2,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 20]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 55,
    ⲆⲆᐃᐃ: 162,
    time: 1 / 5,
    ᐃᐃⲆ: 5
  }, {
    r: [[162, 1], [108, 17]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 56,
    ⲆⲆᐃᐃ: 163,
    time: 1 / 5,
    ᐃᐃⲆ: 5
  }, {
    r: [[163, 1], [111, 14]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 57,
    ⲆⲆᐃᐃ: 164,
    time: 1 / 5,
    ᐃᐃⲆ: 5
  }, {
    r: [[164, 1], [112, 11]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 58,
    ⲆⲆᐃᐃ: 165,
    time: 1 / 5,
    ᐃᐃⲆ: 5
  }, {
    r: [[165, 1], [121, 8]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 59,
    ⲆⲆᐃᐃ: 122,
    time: 1 / 5,
    ᐃᐃⲆ: 5
  }, {
    r: [[122, 1], [202, 5]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 60,
    ⲆⲆᐃᐃ: 217,
    time: 0.2,
    ᐃᐃⲆ: 5
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 61,
    ⲆⲆᐃᐃ: 166,
    time: 1 / 8,
    ᐃᐃⲆ: 5
  }, {
    r: [[166, 1], [108, 27]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 62,
    ⲆⲆᐃᐃ: 171,
    time: 1 / 8,
    ᐃᐃⲆ: 5
  }, {
    r: [[171, 1], [111, 24]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 63,
    ⲆⲆᐃᐃ: 172,
    time: 1 / 8,
    ᐃᐃⲆ: 5
  }, {
    r: [[172, 1], [112, 21]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 64,
    ⲆⲆᐃᐃ: 173,
    time: 1 / 8,
    ᐃᐃⲆ: 5
  }, {
    r: [[173, 1], [121, 18]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 65,
    ⲆⲆᐃᐃ: 124,
    time: 1 / 8,
    ᐃᐃⲆ: 5
  }, {
    r: [[124, 1], [202, 15]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 66,
    ⲆⲆᐃᐃ: 218,
    time: 1 / 8,
    ᐃᐃⲆ: 5
  }, {
    r: [[162, 1], [109, 40], [108, 30]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 67,
    ⲆⲆᐃᐃ: 160,
    time: 1 / 20,
    ᐃᐃⲆ: 5
  }, {
    r: [[163, 1], [108, 70]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 68,
    ⲆⲆᐃᐃ: 168,
    time: 1 / 20,
    ᐃᐃⲆ: 5
  }, {
    r: [[164, 1], [111, 40], [108, 30]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 69,
    ⲆⲆᐃᐃ: 169,
    time: 0.05,
    ᐃᐃⲆ: 5
  }, {
    r: [[165, 1], [112, 40], [108, 30]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 70,
    ⲆⲆᐃᐃ: 170,
    time: 0.05,
    ᐃᐃⲆ: 5
  }, {
    r: [[122, 1], [121, 40], [108, 30]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 71,
    ⲆⲆᐃᐃ: 123,
    time: 1 / 20,
    ᐃᐃⲆ: 5
  }, {
    r: [[217, 1], [202, 40], [111, 30]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 72,
    ⲆⲆᐃᐃ: 219,
    time: 1 / 20,
    ᐃᐃⲆ: 5
  }, {
    r: [[166, 1], [109, 80], [108, 60]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 73,
    ⲆⲆᐃᐃ: 212,
    time: 1 / 20,
    ᐃᐃⲆ: 5
  }, {
    r: [[171, 1], [108, 140]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 74,
    ⲆⲆᐃᐃ: 213,
    time: 0.05,
    ᐃᐃⲆ: 5
  }, {
    r: [[172, 1], [111, 80], [108, 60]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 75,
    ⲆⲆᐃᐃ: 214,
    time: 0.05,
    ᐃᐃⲆ: 5
  }, {
    r: [[173, 1], [112, 80], [108, 60]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 76,
    ⲆⲆᐃᐃ: 215,
    time: 1 / 20,
    ᐃᐃⲆ: 5
  }, {
    r: [[124, 1], [121, 80], [108, 60]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 77,
    ⲆⲆᐃᐃ: 216,
    time: 1 / 20,
    ᐃᐃⲆ: 5
  }, {
    r: [[218, 1], [202, 80], [111, 60]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 78,
    ⲆⲆᐃᐃ: 220,
    time: 1 / 20,
    ᐃᐃⲆ: 5
  }, {
    r: [[109, 25], [111, 2]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 79,
    ⲆⲆᐃᐃ: 167,
    time: 1 / 5,
    ᐃᐃⲆ: 4
  }, {
    r: [[120, 1], [2, 1], [161, 2]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 80,
    ⲆⲆᐃᐃ: 23,
    time: 1 / 5,
    ᐃᐃⲆ: 2
  }, {
    r: [[120, 5], [222, 20], [147, 5], [2, 5]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 81,
    ⲆⲆᐃᐃ: 24,
    time: 0.03333333333333333,
    ᐃᐃⲆ: 2
  }, {
    r: [[236, 1], [231, 8], [232, 8], [222, 8], [161, 6]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 82,
    ⲆⲆᐃᐃ: 82,
    time: 1 / 60,
    ᐃᐃⲆ: 2
  }, {
    r: [[2, 1], [161, 2]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 83,
    ⲆⲆᐃᐃ: 10,
    time: 1 / 5,
    ᐃᐃⲆ: 2
  }, {
    r: [[10, 1], [174, 5], [161, 4]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 84,
    ⲆⲆᐃᐃ: 11,
    time: 1 / 12,
    ᐃᐃⲆ: 2
  }, {
    r: [[11, 1], [146, 5], [147, 4]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 85,
    ⲆⲆᐃᐃ: 40,
    time: 0.03333333333333333,
    ᐃᐃⲆ: 2
  }, {
    r: [[40, 1], [146, 5], [240, 10], [147, 4]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 86,
    ⲆⲆᐃᐃ: 88,
    time: 0.02,
    ᐃᐃⲆ: 2
  }, {
    r: [[109, 50]],
    w: 0,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 87,
    ⲆⲆᐃᐃ: 58,
    time: 1 / 5,
    ᐃᐃⲆ: 2
  }, {
    r: [[108, 75], [109, 75], [58, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 88,
    ⲆⲆᐃᐃ: 25,
    time: 1 / 10,
    ᐃᐃⲆ: 2
  }, {
    r: [[108, 90], [109, 90], [111, 90], [25, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 89,
    ⲆⲆᐃᐃ: 26,
    time: 1 / 20,
    ᐃᐃⲆ: 2
  }, {
    r: [[108, 100], [111, 100], [112, 100], [26, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 90,
    ⲆⲆᐃᐃ: 27,
    time: 1 / 30,
    ᐃᐃⲆ: 2
  }, {
    r: [[121, 80], [111, 150], [112, 120], [27, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 91,
    ⲆⲆᐃᐃ: 43,
    time: 0.016666666666666666,
    ᐃᐃⲆ: 2
  }, {
    r: [[202, 80], [112, 150], [121, 120], [43, 1]],
    w: 1,
    f: 1,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 92,
    ⲆⲆᐃᐃ: 44,
    time: 1 / 90,
    ᐃᐃⲆ: 2
  }, {
    r: [[139, 2], [112, 40], [161, 4]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 93,
    ⲆⲆᐃᐃ: 48,
    time: 1 / 20,
    ᐃᐃⲆ: 2
  }, {
    r: [[48, 1], [111, 80], [129, 1], [121, 20]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 94,
    ⲆⲆᐃᐃ: 47,
    time: 1 / 90,
    ᐃᐃⲆ: 2
  }, {
    r: [[203, 5], [112, 50], [147, 5]],
    w: 1,
    f: 1,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 95,
    ⲆⲆᐃᐃ: 20,
    time: 1 / 20,
    ᐃᐃⲆ: 2
  }, {
    r: [[20, 1], [203, 10], [121, 50]],
    w: 1,
    f: 1,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 96,
    ⲆⲆᐃᐃ: 21,
    time: 0.016666666666666666,
    ᐃᐃⲆ: 2
  }, {
    r: [[21, 1], [203, 15], [121, 50], [202, 50]],
    w: 1,
    f: 1,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 97,
    ⲆⲆᐃᐃ: 22,
    time: 1 / 90,
    ᐃᐃⲆ: 2
  }, {
    r: [[161, 4], [237, 2]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 98,
    ⲆⲆᐃᐃ: 80,
    time: 1 / 15,
    ᐃᐃⲆ: 2
  }, {
    r: [[80, 1], [161, 6], [237, 4], [232, 12], [222, 4]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 99,
    ⲆⲆᐃᐃ: 81,
    time: 1 / 150,
    ᐃᐃⲆ: 2
  }, {
    r: [[161, 6], [174, 5]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 100,
    ⲆⲆᐃᐃ: 29,
    time: 0.06666666666666667,
    ᐃᐃⲆ: 2
  }, {
    r: [[109, 20]],
    w: 0,
    f: 1,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 101,
    ⲆⲆᐃᐃ: 120,
    time: 1 / 3,
    ᐃᐃⲆ: 4
  }, {
    r: [[112, 1], [161, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 102,
    ⲆⲆᐃᐃ: 147,
    time: 1 / 3,
    ᐃᐃⲆ: 4
  }, {
    r: [[111, 10]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 103,
    ⲆⲆᐃᐃ: 148,
    time: 1 / 5,
    ᐃᐃⲆ: 4
  }, {
    r: [[111, 250]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 104,
    ⲆⲆᐃᐃ: 158,
    time: 1 / 60,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 50]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 105,
    ⲆⲆᐃᐃ: 159,
    time: 1 / 10,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 15]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 106,
    ⲆⲆᐃᐃ: 125,
    time: 1 / 5,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 107,
    ⲆⲆᐃᐃ: 190,
    time: 1 / 5,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 120]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 108,
    ⲆⲆᐃᐃ: 221,
    time: 1 / 15,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 20], [140, 15]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 109,
    ⲆⲆᐃᐃ: 141,
    time: 1 / 5,
    ᐃᐃⲆ: 4
  }, {
    r: [[126, 25]],
    w: 1,
    f: 1,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 110,
    ⲆⲆᐃᐃ: 128,
    time: 1 / 5,
    ᐃᐃⲆ: 3
  }, {
    r: [[128, 1]],
    w: 0,
    f: 0,
    ⵠⲆⲆ: 1,
    e: 0,
    id: 111,
    ⲆⲆᐃᐃ: 127,
    time: 1 / 5,
    ᐃᐃⲆ: 3
  }, {
    r: [[142, 20], [128, 1]],
    w: 0,
    f: 1,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 112,
    ⲆⲆᐃᐃ: 127,
    time: 1 / 10,
    ᐃᐃⲆ: 3
  }, {
    r: [[128, 1]],
    w: 0,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 1,
    id: 113,
    ⲆⲆᐃᐃ: 127,
    time: 1 / 3,
    ᐃᐃⲆ: 3
  }, {
    r: [[109, 60], [108, 20], [161, 2]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 114,
    ⲆⲆᐃᐃ: 135,
    time: 0.1,
    ᐃᐃⲆ: 4
  }, {
    r: [[112, 40], [108, 45]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 115,
    ⲆⲆᐃᐃ: 151,
    time: 0.05,
    ᐃᐃⲆ: 4
  }, {
    r: [[151, 1], [234, 40], [238, 1]],
    w: 1,
    f: 1,
    ⵠⲆⲆ: 1,
    e: 0,
    id: 116,
    ⲆⲆᐃᐃ: 152,
    time: 0.005,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 50], [108, 100]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 117,
    ⲆⲆᐃᐃ: 153,
    time: 1 / 90,
    ᐃᐃⲆ: 4
  }, {
    r: [[108, 60], [111, 120]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 118,
    ⲆⲆᐃᐃ: 154,
    time: 0.011111111111111112,
    ᐃᐃⲆ: 4
  }, {
    r: [[111, 70], [112, 140]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 119,
    ⲆⲆᐃᐃ: 155,
    time: 0.011111111111111112,
    ᐃᐃⲆ: 4
  }, {
    r: [[112, 80], [121, 160]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 120,
    ⲆⲆᐃᐃ: 156,
    time: 0.011111111111111112,
    ᐃᐃⲆ: 4
  }, {
    r: [[121, 90], [202, 180]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 121,
    ⲆⲆᐃᐃ: 157,
    time: 1 / 90,
    ᐃᐃⲆ: 4
  }, {
    r: [[108, 70]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 122,
    ⲆⲆᐃᐃ: 55,
    time: 1 / 10,
    ᐃᐃⲆ: 0
  }, {
    r: [[108, 70], [109, 50]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 123,
    ⲆⲆᐃᐃ: 56,
    time: 0.1,
    ᐃᐃⲆ: 0
  }, {
    r: [[109, 40], [108, 40]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 124,
    ⲆⲆᐃᐃ: 144,
    time: 1 / 10,
    ᐃᐃⲆ: 4
  }, {
    r: [[143, 1], [117, 1]],
    w: 0,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 125,
    ⲆⲆᐃᐃ: 145,
    time: 1 / 3,
    ᐃᐃⲆ: 3
  }, {
    r: [[147, 30], [184, 1], [121, 150], [149, 3]],
    w: 1,
    f: 1,
    ⵠⲆⲆ: 1,
    e: 0,
    id: 126,
    ⲆⲆᐃᐃ: 59,
    time: 1 / 120,
    ᐃᐃⲆ: 2
  }, {
    r: [[59, 1], [186, 1], [202, 150], [150, 2]],
    w: 1,
    f: 1,
    ⵠⲆⲆ: 1,
    e: 0,
    id: 127,
    ⲆⲆᐃᐃ: 60,
    time: 1 / 180,
    ᐃᐃⲆ: 2
  }, {
    r: [[26, 1], [197, 10], [196, 10], [161, 10]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 128,
    ⲆⲆᐃᐃ: 61,
    time: 1 / 60,
    ᐃᐃⲆ: 2
  }, {
    r: [[147, 20], [185, 1], [121, 150], [149, 3]],
    w: 1,
    f: 1,
    ⵠⲆⲆ: 1,
    e: 0,
    id: 129,
    ⲆⲆᐃᐃ: 62,
    time: 0.008333333333333333,
    ᐃᐃⲆ: 1
  }, {
    r: [[62, 1], [187, 1], [202, 150], [150, 2]],
    w: 1,
    f: 1,
    ⵠⲆⲆ: 1,
    e: 0,
    id: 130,
    ⲆⲆᐃᐃ: 63,
    time: 0.005555555555555556,
    ᐃᐃⲆ: 1
  }, {
    r: [[109, 100], [161, 4]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 131,
    ⲆⲆᐃᐃ: 64,
    time: 1 / 20,
    ᐃᐃⲆ: 1
  }, {
    r: [[109, 30]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 132,
    ⲆⲆᐃᐃ: 101,
    time: 1 / 5,
    ᐃᐃⲆ: 1
  }, {
    r: [[108, 200], [161, 8], [222, 4], [64, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 133,
    ⲆⲆᐃᐃ: 65,
    time: 1 / 25,
    ᐃᐃⲆ: 1
  }, {
    r: [[108, 20], [231, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 134,
    ⲆⲆᐃᐃ: 102,
    time: 1 / 5,
    ᐃᐃⲆ: 1
  }, {
    r: [[111, 200], [161, 12], [231, 4], [222, 4], [65, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 135,
    ⲆⲆᐃᐃ: 66,
    time: 1 / 30,
    ᐃᐃⲆ: 1
  }, {
    r: [[111, 20], [222, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 136,
    ⲆⲆᐃᐃ: 103,
    time: 1 / 10,
    ᐃᐃⲆ: 1
  }, {
    r: [[112, 200], [147, 10], [231, 8], [222, 8], [66, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 137,
    ⲆⲆᐃᐃ: 67,
    time: 0.02857142857142857,
    ᐃᐃⲆ: 1
  }, {
    r: [[112, 10], [222, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 138,
    ⲆⲆᐃᐃ: 104,
    time: 1 / 10,
    ᐃᐃⲆ: 1
  }, {
    r: [[121, 200], [147, 10], [222, 8], [232, 8], [67, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 139,
    ⲆⲆᐃᐃ: 68,
    time: 1 / 40,
    ᐃᐃⲆ: 1
  }, {
    r: [[121, 10], [232, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 140,
    ⲆⲆᐃᐃ: 105,
    time: 1 / 15,
    ᐃᐃⲆ: 1
  }, {
    r: [[202, 200], [147, 10], [129, 1], [68, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 141,
    ⲆⲆᐃᐃ: 69,
    time: 1 / 45,
    ᐃᐃⲆ: 1
  }, {
    r: [[202, 10], [232, 1], [203, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 142,
    ⲆⲆᐃᐃ: 106,
    time: 0.06666666666666667,
    ᐃᐃⲆ: 1
  }, {
    r: [[234, 200], [147, 10], [185, 1], [69, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 143,
    ⲆⲆᐃᐃ: 70,
    time: 1 / 50,
    ᐃᐃⲆ: 1
  }, {
    r: [[234, 10], [238, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 144,
    ⲆⲆᐃᐃ: 107,
    time: 1 / 20,
    ᐃᐃⲆ: 1
  }, {
    r: [[109, 100]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 145,
    ⲆⲆᐃᐃ: 71,
    time: 1 / 25,
    ᐃᐃⲆ: 1
  }, {
    r: [[71, 1], [108, 100], [109, 50]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 146,
    ⲆⲆᐃᐃ: 72,
    time: 0.025,
    ᐃᐃⲆ: 1
  }, {
    r: [[72, 1], [111, 50], [108, 50], [109, 50]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 147,
    ⲆⲆᐃᐃ: 73,
    time: 0.02,
    ᐃᐃⲆ: 1
  }, {
    r: [[73, 1], [112, 50], [111, 50], [108, 50]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 148,
    ⲆⲆᐃᐃ: 74,
    time: 1 / 70,
    ᐃᐃⲆ: 1
  }, {
    r: [[74, 1], [121, 50], [112, 50], [111, 50]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 149,
    ⲆⲆᐃᐃ: 75,
    time: 0.011111111111111112,
    ᐃᐃⲆ: 1
  }, {
    r: [[75, 1], [202, 50], [121, 50], [112, 50]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 150,
    ⲆⲆᐃᐃ: 76,
    time: 0.008333333333333333,
    ᐃᐃⲆ: 1
  }, {
    r: [[175, 1], [111, 200]],
    w: 1,
    f: 1,
    ⵠⲆⲆ: 1,
    e: 0,
    id: 151,
    ⲆⲆᐃᐃ: 77,
    time: 0.016666666666666666,
    ᐃᐃⲆ: 2
  }, {
    r: [[176, 1], [111, 200]],
    w: 1,
    f: 1,
    ⵠⲆⲆ: 1,
    e: 0,
    id: 152,
    ⲆⲆᐃᐃ: 78,
    time: 1 / 60,
    ᐃᐃⲆ: 2
  }, {
    r: [[177, 1], [111, 200], [149, 1]],
    w: 1,
    f: 1,
    ⵠⲆⲆ: 1,
    e: 0,
    id: 153,
    ⲆⲆᐃᐃ: 79,
    time: 0.016666666666666666,
    ᐃᐃⲆ: 2
  }, {
    r: [[174, 10], [2, 5], [161, 6]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 154,
    ⲆⲆᐃᐃ: 83,
    time: 1 / 10,
    ᐃᐃⲆ: 2
  }, {
    r: [[2, 3], [161, 2]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 155,
    ⲆⲆᐃᐃ: 84,
    time: 0.1,
    ᐃᐃⲆ: 2
  }, {
    r: [[83, 1], [179, 1], [146, 15], [147, 5], [222, 8]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 156,
    ⲆⲆᐃᐃ: 85,
    time: 0.016666666666666666,
    ᐃᐃⲆ: 2
  }, {
    r: [[84, 1], [178, 1], [146, 10], [147, 5], [222, 8]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 157,
    ⲆⲆᐃᐃ: 86,
    time: 0.016666666666666666,
    ᐃᐃⲆ: 2
  }, {
    r: [[181, 1]],
    w: 0,
    f: 0,
    ⵠⲆⲆ: 1,
    e: 0,
    id: 158,
    ⲆⲆᐃᐃ: 180,
    time: 1 / 5,
    ᐃᐃⲆ: 0
  }, {
    r: [[109, 20], [161, 1]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 159,
    ⲆⲆᐃᐃ: 181,
    time: 0.2,
    ᐃᐃⲆ: 0
  }, {
    r: [[108, 100], [140, 30]],
    w: 1,
    f: 1,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 160,
    ⲆⲆᐃᐃ: 182,
    time: 1 / 10,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 20]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 161,
    ⲆⲆᐃᐃ: 183,
    time: 0.2,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 100], [108, 50], [2, 5], [174, 5], [161, 6]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 162,
    ⲆⲆᐃᐃ: 198,
    time: 0.05,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 250], [147, 10], [146, 2], [139, 2]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 163,
    ⲆⲆᐃᐃ: 223,
    time: 0.02,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 250], [161, 10], [146, 2], [222, 8]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 164,
    ⲆⲆᐃᐃ: 224,
    time: 0.02,
    ᐃᐃⲆ: 4
  }, {
    r: [[161, 10], [174, 6], [2, 4], [126, 50]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 165,
    ⲆⲆᐃᐃ: 89,
    time: 0.05,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 250], [161, 10], [120, 10], [231, 8]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 166,
    ⲆⲆᐃᐃ: 230,
    time: 0.02,
    ᐃᐃⲆ: 4
  }, {
    r: [[109, 40]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 167,
    ⲆⲆᐃᐃ: 94,
    time: 1 / 5,
    ᐃᐃⲆ: 1
  }, {
    r: [[94, 1], [108, 40], [109, 50]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 168,
    ⲆⲆᐃᐃ: 95,
    time: 1 / 10,
    ᐃᐃⲆ: 1
  }, {
    r: [[95, 1], [111, 40], [108, 50], [109, 60]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 169,
    ⲆⲆᐃᐃ: 96,
    time: 1 / 20,
    ᐃᐃⲆ: 1
  }, {
    r: [[96, 1], [112, 40], [111, 70], [108, 80]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 170,
    ⲆⲆᐃᐃ: 97,
    time: 1 / 30,
    ᐃᐃⲆ: 1
  }, {
    r: [[97, 1], [121, 40], [112, 70], [111, 110]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 171,
    ⲆⲆᐃᐃ: 98,
    time: 0.016666666666666666,
    ᐃᐃⲆ: 1
  }, {
    r: [[98, 1], [202, 50], [121, 80], [112, 110]],
    w: 1,
    f: 0,
    ⵠⲆⲆ: 0,
    e: 0,
    id: 172,
    ⲆⲆᐃᐃ: 99,
    time: 0.011111111111111112,
    ᐃᐃⲆ: 1
  }];
  const Dt = 256;
  function Et(a, b, c, d) {
    Zj(Ft, a, b, c, d);
    return ((108 + (Co(Ht[0], Ht[1], Ht[2]) ^ function (b, c, d, e, f) {
      Ji(Ft, b, c, d, e, f);
      const g = Hb(Ht[0], Ht[1], Ht[2], Ht[3]);
      mo(Ht[4], Ht[0], Ht[1], Ht[2], Ht[3], Ht[4]);
      return ~(g & 4292) & 4292 | ~(g & 4292) & g;
    }(Ht[3], Ht[0], Ht[1], Ht[2], Ht[3]))) * 8121 + 28411) % 134456;
  }
  let Ft = jn;
  const Gt = 18;
  let Ht;
  const It = Zi;
  const Jt = 2;
  Zi = function () {
    Ft = be(Ue(8));
    Ht = Fk(Ft);
    if (It) {
      It();
    }
  };
  const Kt = 12;
  ks = 300;
  const Lt = 16;
  const eb = 5;
  const ib = 4;
  function tb(b, c, d) {
    const e = ~(b & 48708) & 48708 | ~(b & 48708) & b;
    const f = ~(c & 15475) & 15475 | ~(c & 15475) & c;
    const g = (2531011 + (18114 + d) * 214013) % 4294967296;
    const a = function (b, c, d, e, f) {
      const i = (8 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (0 << (b >> 24 & 255)) + (24 << (b >> 0 & 255));
      const a = ((65341 + c) * 214013 + 2531011) % 4294967296;
      const j = ((e + 25313) * 1664525 + 1013904223) % 4294967296;
      const k = ~(f & 65101) & (f | 65101);
      const h = function (b, c, d) {
        const e = ((38330 + b) * 1103515245 + 12345) % 2147483648;
        const f = (d | 37340) & ~(d & 37340);
        const g = function (a, b) {
          const c = a ^ 3108;
          const d = (2531011 + (55241 + b) * 214013) % 4294967296;
          const e = ub(c, d, c, d, c);
          po(d, c, d, c, d);
          return e ^ 43556;
        }(e, c ^ 45820);
        const a = Ab(f, e);
        return (8 << ((g ^ a) & 255)) + (16 << ((g ^ a) >> 24 & 255)) + (0 << ((g ^ a) >> 8 & 255)) + (24 << ((g ^ a) >> 16 & 255));
      }(i, a, d ^ 900);
      const g = Gx(j, k, i, a);
      return (8 << ((h ^ g) >> 16 & 255)) + (16 << ((h ^ g) >> 24 & 255)) + (24 << ((h ^ g) >> 8 & 255)) + (0 << ((h ^ g) >> 0 & 255));
    }(e, f, g, e, f);
    Db(g, e);
    return (a | 28242) & ~(a & 28242);
  }
  ⲆᐃⲆΔ = {
    ⲆⲆᐃⵠⵠᐃⲆ: 300,
    ΔᐃⵠⵠΔⲆⲆ: 301,
    ΔᐃᐃΔⵠⲆᐃ: 302,
    ΔⵠⵠⵠΔᐃᐃ: 303,
    ᐃⵠᐃⵠⵠⲆΔ: 304,
    ⲆⲆΔᐃᐃᐃⵠ: 305,
    ⲆᐃΔᐃᐃⵠⲆ: 306,
    ΔᐃⲆᐃΔⵠᐃ: 307,
    ⵠᐃΔΔⲆⲆΔ: 308,
    ΔⲆΔⲆᐃⲆⲆ: 309,
    ⲆΔⵠᐃΔᐃⲆ: 310,
    ⲆⲆΔⵠⵠᐃᐃ: 311,
    EMPTY: 312,
    ΔΔᐃΔⵠⵠΔ: 313,
    ⲆⲆᐃΔΔΔᐃ: 314,
    ⲆⵠⲆᐃⲆΔⲆ: 315,
    ⵠᐃΔⲆⵠᐃΔ: 316,
    ΔⵠΔⲆⵠΔΔ: 317,
    ⲆᐃᐃⵠΔΔᐃ: 318,
    ⲆⲆⵠΔⵠΔᐃ: 319,
    ᐃᐃⲆⵠⵠᐃᐃ: 320,
    ⲆⵠⲆⵠᐃⲆᐃ: 321,
    ⲆⲆΔⲆᐃ: 322,
    ᐃΔΔᐃᐃⵠΔ: 323,
    ΔⲆΔⲆΔ: 324,
    ΔⵠΔᐃᐃⵠⲆ: 325,
    ᐃΔᐃΔΔⵠᐃ: 326,
    ⲆᐃᐃⲆⲆᐃᐃ: 327,
    ΔⲆΔΔᐃⲆΔ: 328,
    ᐃⵠᐃⵠⲆⲆᐃ: 329,
    ΔⲆⵠⵠⵠⵠᐃ: 330,
    ΔⵠⲆⲆⲆⵠᐃ: 331,
    POINTS: 332,
    ⲆΔⵠⲆΔⲆⲆ: 333,
    ⲆᐃΔⵠⵠⲆⲆ: 334,
    ⲆⲆⵠⵠᐃⵠⲆ: 335,
    ᐃΔⵠⵠⲆⵠΔ: 336,
    ⲆΔⲆⵠᐃᐃΔ: 337,
    ⵠⵠΔᐃⲆⲆⲆ: 338,
    ΔⵠⵠᐃΔⵠᐃ: 339,
    ⲆᐃΔΔⵠⵠΔ: 340,
    ⵠΔⵠⵠⲆⲆΔ: 341,
    ⵠⵠΔⲆⵠΔᐃ: 342,
    ᐃᐃⲆⵠᐃⲆⲆ: 343
  };
  const nb = 0;
  function ob(b, c, d, e, f, g) {
    const a = d ^ 9759;
    const i = (~(b & 15387) & b | ~(b & 15387) & 15387) ^ 45493;
    const j = ((50605 + ((24 << ((i ^ a) & 255)) + (0 << ((i ^ a) >> 16 & 255)) + (16 << ((i ^ a) >> 8 & 255)) + (8 << ((i ^ a) >> 24 & 255)) ^ (~(e & 49616) & e | ~(e & 49616) & 49616))) * 22695477 + 1) % 4294967296;
    return ((53098 + (~(j & 63446) & (j | 63446) ^ ~(g & 10019) & (g | 10019))) * 214013 + 2531011) % 4294967296;
  }
  const ab = 3;
  const rb = 100;
  function sb(a) {
    return function (a, b) {
      Mj(Ft, a, b);
      const c = mx(Ht[0], Ht[1], Ht[0], Ht[1]);
      Et(Ht[0], Ht[1], Ht[0], Ht[1]);
      return ~(c & 46660) & c | ~(c & 46660) & 46660;
    }(a, 4026);
  }
  function hb(a, b, c) {
    Uj(Ft, a, b, c);
    const d = ho(Ht[0], Ht[1]);
    Tb(Ht[2], Ht[0], Ht[1], Ht[2], Ht[0]);
    return d ^ 14008;
  }
  function gb() {
    Ib[99] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
    Ib[98] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
    Ib[97] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
    Ib[96] = ["Gold Axe", "Chop 'til it drops!", "Damage: 24", "Shield Penetration: 3"];
    Ib[95] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
    Ib[94] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
    Ib[153] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
    Ib[154] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
    Ib[155] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
    Ib[156] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
    Ib[157] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
    Ib[76] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
    Ib[75] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
    Ib[74] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
    Ib[73] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
    Ib[72] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
    Ib[71] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
    Ib[56] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
    Ib[221] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
    Ib[107] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
    Ib[70] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
    Ib[106] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
    Ib[69] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
    Ib[105] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
    Ib[68] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
    Ib[104] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
    Ib[67] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
    Ib[103] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
    Ib[66] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
    Ib[102] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
    Ib[65] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
    Ib[101] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
    Ib[64] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
    Ib[152] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
    Ib[237] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
    Ib[240] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
    Ib[232] = ["Vulture Feather", "From a deadly vulture"];
    Ib[234] = ["Emerald", "How many golden breads can you get from it?"];
    Ib[238] = ["Sand Worm Juice", "I don't want to know how you got this."];
    Ib[80] = ["Turban", "Useful to survive in the desert."];
    Ib[81] = ["Ninja outfit", "Essential to survive in the desert"];
    Ib[82] = ["Pilot Hat", "Take off and land with flying objects much faster."];
    Ib[236] = ["Pilot Glasses"];
    Ib[225] = ["Tamed Boar", "Fast on lands and slow on water."];
    Ib[239] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
    Ib[226] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
    Ib[227] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
    Ib[228] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
    Ib[229] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
    Ib[89] = ["Saddle", "Hit a boar with it to tame it."];
    Ib[90] = ["Witch Hat", "You're a wizard Starvy!"];
    Ib[91] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
    Ib[92] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
    Ib[93] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
    Ib[100] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
    Ib[24] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
    Ib[224] = ["Sled", "You are faster with it in the snow"];
    Ib[223] = ["Boat", "You are faster with it in the water"];
    Ib[230] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
    Ib[39] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 70"];
    Ib[222] = ["Penguin Feather", "From a deadly cute penguin."];
    Ib[231] = ["Hawk Feather", "From a deadly hawk."];
    Ib[233] = ["Cactus", "Food : 20", "Water : 10"];
    Ib[211] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
    Ib[210] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
    Ib[209] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
    Ib[208] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
    Ib[218] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
    Ib[217] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
    Ib[219] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
    Ib[220] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
    Ib[32] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
    Ib[212] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
    Ib[213] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
    Ib[214] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
    Ib[215] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
    Ib[216] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
    Ib[205] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
    Ib[207] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
    Ib[204] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    Ib[206] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    Ib[53] = ["Pitchfork", "Perfect for gathering"];
    Ib[54] = ["Golden Pitchfork", "Essential for a real farmer."];
    Ib[235] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
    Ib[qs.ΔⵠⲆⲆᐃᐃΔ] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
    Ib[qs.ᐃᐃΔⲆⵠⵠⲆ] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
    Ib[qs.ᐃⵠⲆᐃⲆⲆⲆ] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
    Ib[qs.ΔΔᐃⲆⲆᐃΔ] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
    Ib[qs.ΔᐃⵠΔⲆᐃΔ] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
    Ib[186] = ["Lava Cube", "You feel an immense power emanating from this cube"];
    Ib[187] = ["Lava Orb", "You feel an immense power emanating from this orb"];
    Ib[63] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
    Ib[17] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
    Ib[150] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
    Ib[60] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
    Ib[34] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
    Ib[19] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
    Ib[203] = ["Flame", "It's hot!"];
    Ib[20] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
    Ib[21] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
    Ib[22] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
    Ib[202] = ["Reidite", "The ultimate ore"];
    Ib[184] = ["Dragon Cube", "You feel a great power emanating from this cube"];
    Rb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Rb[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
    Rb[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
    Rb[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
    Rb[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
    Rb[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
    Rb[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
    Rb[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
    Rb[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
    Rb[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
    Rb[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
    Rb[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
    Rb[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
    Rb[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
    Rb[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
    Rb[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
    Rb[38] = ["You died crushed by an angry baby mammoth."];
    Rb[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
    Rb[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
    Ib[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Ib[341] = "A sandstorm is approaching in a few seconds.";
    Ib[340] = "The sandstorm will soon stop.";
    Ib[343] = "A blizzard is approaching in a few seconds.";
    Ib[342] = "The blizzard will soon stop.";
    Ib[328] = " BACK TO THE GAME";
    Ib[329] = " Share on Twitter";
    Ib[330] = " Share on Facebook";
    Ib[331] = "You can buy items on the shop in the next game with your points";
    Ib[332] = "points";
    Ib[333] = "Score";
    Ib[334] = "Kill";
    Ib[335] = "Days survived";
    Ib[336] = "Building method: Free. Press G to change";
    Ib[337] = "Building method: Grid. Press G to change";
    Ib[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Ib[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
    Ib[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
    Ib[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Ib[7] = ["Hand"];
    Ib[140] = ["Dirt", "Dirty!"];
    Ib[126] = ["Sand", "I got it in my eyes!"];
    Ib[109] = ["Wood", "You can't get enough of it!"];
    Ib[108] = ["Stone", "Also called a rock"];
    Ib[111] = ["Gold", "Be generous, give it to others"];
    Ib[112] = ["Diamond", "What will you make with it?"];
    Ib[121] = ["Amethyst", "It's Mauve like Lapa"];
    Ib[131] = ["Flour", "Used in cooking"];
    Ib[133] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
    Ib[136] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
    Ib[116] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
    Ib[117] = ["Cooked meat", "A rare steak, please", "Food: 35"];
    Ib[137] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
    Ib[138] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
    Ib[143] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
    Ib[145] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
    Ib[200] = ["Candies", "Only for children!", "Food: 20"];
    Ib[199] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
    Ib[201] = ["Garland", "Perfect decoration for roofs"];
    Ib[115] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
    Ib[110] = ["Berry", "Berry tasty!", "Food: 10"];
    Ib[132] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    Ib[134] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
    Ib[188] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    Ib[189] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
    Ib[191] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    Ib[192] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
    Ib[193] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
    Ib[194] = ["Thorn bush", "It stings!"];
    Ib[141] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
    Ib[142] = ["Ice", "Useful for making cakes and water"];
    Ib[55] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
    Ib[174] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
    Ib[2] = ["Rabbit Fur", "That rabbit was so cute..."];
    Ib[178] = ["Pure Fur", "You're a bread factory"];
    Ib[179] = ["Dark Fur", "You get ready to do something wrong"];
    Ib[146] = ["Winter Fur", "These animals just wanted a hug..."];
    Ib[139] = ["Scales", "It smells like fish!"];
    Ib[129] = ["Kraken Skin", "Weren't you too scared?"];
    Ib[113] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
    Ib[118] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
    Ib[114] = ["Workbench", "Very useful to craft all kinds of objects"];
    Ib[161] = ["Cord", "Used in crafting Hats and Bag"];
    Ib[147] = ["Diamond Cord", "Used in crafting Special Hats"];
    Ib[167] = ["Chest", "Allows you to store items", "Durability: 500"];
    Ib[57] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
    Ib[0] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
    Ib[5] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
    Ib[6] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
    Ib[9] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
    Ib[30] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
    Ib[62] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
    Ib[16] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
    Ib[8] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
    Ib[1] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
    Ib[3] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
    Ib[4] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
    Ib[31] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
    Ib[35] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
    Ib[36] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
    Ib[37] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
    Ib[38] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
    Ib[45] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 95"];
    Ib[12] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
    Ib[13] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
    Ib[14] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
    Ib[15] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
    Ib[33] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
    Ib[46] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
    Ib[50] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
    Ib[51] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
    Ib[52] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
    Ib[58] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
    Ib[25] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
    Ib[26] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
    Ib[27] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
    Ib[43] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
    Ib[44] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
    Ib[59] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
    Ib[23] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
    Ib[41] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
    Ib[42] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
    Ib[83] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
    Ib[10] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
    Ib[11] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
    Ib[40] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
    Ib[88] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
    Ib[84] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    Ib[85] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
    Ib[86] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    Ib[48] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
    Ib[47] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
    Ib[185] = ["Dragon Orb", "You feel a great power emanating from this orb"];
    Ib[149] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
    Ib[175] = ["Green Gemstone", "You didn't cheat, promise?"];
    Ib[176] = ["Orange Gemstone", "Only a real pirate can find it!"];
    Ib[177] = ["Blue Gemstone", "For too kind people"];
    Ib[77] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
    Ib[78] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
    Ib[79] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
    Ib[180] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
    Ib[181] = ["Empty Bucket", "You need to fill this bucket near a water source"];
    Ib[127] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
    Ib[128] = ["Empty Bottle", "You can fill this bottle near a water source"];
    Ib[130] = ["Empty Watering Can", "You must fill it with a water source to use it"];
    Ib[49] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
    Ib[29] = ["Bag", "More space for your items!"];
    Ib[120] = ["Paper", "Used in book-crafting"];
    Ib[28] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
    Ib[195] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
    Ib[148] = ["Lock", "Allow you to lock your chest"];
    Ib[158] = ["Lock-pick", "Allows you to unlock one chest"];
    Ib[159] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
    Ib[125] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
    Ib[183] = ["Sign", "Leave a message to others", "Durability: 200"];
    Ib[190] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
    Ib[182] = ["Well", "Allows bottle filling", "Durability: 1000"];
    Ib[162] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
    Ib[163] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
    Ib[164] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
    Ib[165] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
    Ib[122] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
    Ib[160] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
    Ib[168] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
    Ib[169] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
    Ib[170] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
    Ib[123] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
    Ib[166] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
    Ib[171] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
    Ib[172] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
    Ib[173] = ["Diamond Door", "For a shining house", "Durability: 2500"];
    Ib[124] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
    Ib[119] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
    Ib[135] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
    Ib[144] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
    Ib[151] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
    Ib[300] = "You cannot join this server";
    Ib[301] = "Kicked: ";
    Ib[302] = "Your key is already used by someone else";
    Ib[303] = "Your key is wrong";
    Ib[304] = "You have an old version, you need to clear your cache";
    Ib[338] = "Your client version is too recent for this server. The server is being updated";
    Ib[339] = "Wrong password! To enter a password: https://starve.io/?password=...";
    Ib[305] = "There are no more new resources";
    Ib[306] = "You survived 1 day";
    Ib[307] = "You survived ";
    Ib[308] = " days";
    Ib[309] = "You are dead ;-;";
    Ib[310] = "Server cannot find spawn location! Spam the play button!";
    Ib[311] = "Server is full! Spam the play button!";
    Ib[312] = "Resource is empty";
    Ib[313] = "Inventory is full (right-click to empty items)";
    Ib[314] = " is dead";
    Ib[315] = "This is not the right tool";
    Ib[316] = "You joined a team";
    Ib[317] = "You are dead";
    Ib[318] = " joined the team";
    Ib[319] = "Your team was destroyed";
    Ib[320] = "You left the team";
    Ib[321] = " left the team";
    Ib[322] = "Someone stole your token :>";
    Ib[323] = "Choose a server";
    Ib[324] = "players";
    Ib[325] = "total players";
    Ib[326] = "players on this mode";
    Ib[327] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Nickname";
    Rb[0] = ["You were killed for no reason"];
    Rb[1] = ["You starved to death, as the name of the game implies"];
    Rb[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
    Rb[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
    Rb[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
    Rb[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
    Rb[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
    Rb[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
    Rb[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
    Rb[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
    Rb[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
    Rb[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
    Rb[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
    Rb[13] = ["You died of thirst. Better drink your own piss."];
    Rb[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
    Rb[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
    Rb[16] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
    Rb[17] = ["Your skin's falling apart, the sun killed you."];
    Rb[18] = ["Garlic stored in your pockets boiled your brain."];
    Rb[19] = ["As a vampire, don't stand near the garlic cloves."];
    Rb[20] = ["You ate garlic as a vampire, what did you expect?"];
    Rb[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
    Δᐃᐃⵠᐃ = "Uuunnnggg";
    ⵠΔⵠⵠᐃΔⲆ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
  }
  function lb(b, c, d) {
    const e = (0 << (b >> 8 & 255)) + (24 << (b >> 0 & 255)) + (16 << (b >> 16 & 255)) + (8 << (b >> 24 & 255));
    const f = c ^ 13358;
    const g = (2531011 + (d + 1869) * 214013) % 4294967296;
    return (2147483587 + (23069 + (ob(e, 0, g, e, 0, g) ^ Cf(e, f, g, e, f, g))) * 2147483629) % 2147483647;
  }
  function ub(b, c, d, e, f) {
    const g = d ^ 54820;
    const a = ~(e & 53462) & (e | 53462);
    return (1 + (18399 + (Bb(((62895 + b) * 214013 + 2531011) % 4294967296, ~(c & 37638) & 37638 | ~(c & 37638) & c) ^ Ab(g, a))) * 22695477) % 4294967296;
  }
  function bb() {
    Ib[184] = ["You feel a great power emanating from this orb"];
    Rb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Ib[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Ib[328] = " BACK TO THE GAME";
    Ib[329] = " Share on Twitter";
    Ib[330] = " Share on Facebook";
    Ib[331] = "You can buy items on the shop in the next game with your points";
    Ib[332] = "points";
    Ib[333] = "Score";
    Ib[334] = "Kill";
    Ib[335] = "Days survived";
    Ib[336] = "Building method: Free. Press G to change";
    Ib[337] = "Building method: Grid. Press G to change";
    Ib[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Ib[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Ib[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Ib[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Ib[7] = ["Рука"];
    Ib[140] = ["Земля", "Грязно!"];
    Ib[126] = ["Песок", "Он в моих глазах!"];
    Ib[109] = ["Дерево", "Постоянно нужно больше!"];
    Ib[108] = ["Камень", "Твердый"];
    Ib[111] = ["Золото", "Будьте щедры, давайте его другим"];
    Ib[112] = ["Алмаз", "Что вы создадите с помощью него?"];
    Ib[121] = ["Аметист", "Он сиреневый, как Lapa"];
    Ib[131] = ["Мука", "Используется в готовке"];
    Ib[133] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
    Ib[136] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
    Ib[116] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
    Ib[117] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
    Ib[137] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
    Ib[138] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
    Ib[143] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
    Ib[145] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
    Ib[200] = ["Конфеты", "Только для детей!", "Еда: 20"];
    Ib[199] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
    Ib[201] = ["Гирлянда", "Прекрасная декорация для крыши"];
    Ib[115] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
    Ib[110] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
    Ib[132] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    Ib[134] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
    Ib[188] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    Ib[189] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
    Ib[191] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
    Ib[192] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
    Ib[193] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
    Ib[194] = ["Колючий Куст", "Это больно!"];
    Ib[141] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
    Ib[142] = ["Лёд", "Используется для изготовления тортов и воды"];
    Ib[55] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
    Ib[174] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
    Ib[2] = ["Шкура Зайца", "Этот кролик был таким милым..."];
    Ib[178] = ["Чистая Шкура", "Вы - фабрика хлеба"];
    Ib[179] = ["Чёрная Шкура", "Вы готовы делать зло."];
    Ib[146] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
    Ib[139] = ["Чешуя", "Она пахнет рыбой!"];
    Ib[129] = ["Шкура Кракена", "Вы не испугались?"];
    Ib[113] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
    Ib[118] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
    Ib[114] = ["Верстак", "Необходим для создания многих предметов"];
    Ib[161] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
    Ib[147] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
    Ib[167] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
    Ib[57] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
    Ib[0] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
    Ib[5] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
    Ib[6] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
    Ib[9] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
    Ib[30] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
    Ib[62] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
    Ib[16] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
    Ib[8] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
    Ib[1] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
    Ib[3] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
    Ib[4] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
    Ib[31] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
    Ib[35] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
    Ib[36] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
    Ib[37] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
    Ib[38] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
    Ib[45] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
    Ib[12] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
    Ib[13] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
    Ib[14] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
    Ib[15] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
    Ib[33] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
    Ib[46] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
    Ib[50] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
    Ib[51] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
    Ib[52] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
    Ib[58] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
    Ib[25] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
    Ib[26] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
    Ib[27] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
    Ib[43] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
    Ib[59] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
    Ib[23] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
    Ib[41] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
    Ib[42] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
    Ib[83] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    Ib[10] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
    Ib[11] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
    Ib[40] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
    Ib[84] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    Ib[85] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    Ib[86] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    Ib[48] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
    Ib[47] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
    Ib[185] = ["Шар Дракона", "Даётся за квест"];
    Ib[149] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
    Ib[175] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
    Ib[176] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
    Ib[177] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
    Ib[77] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
    Ib[78] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
    Ib[79] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
    Ib[180] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
    Ib[181] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
    Ib[127] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
    Ib[128] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
    Ib[130] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
    Ib[49] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
    Ib[29] = ["Рюкзак", "Больше места для ваших предметов!"];
    Ib[120] = ["Бумага", "Используется при создании книги"];
    Ib[28] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
    Ib[195] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
    Ib[148] = ["Замок", "Позволяет вам закрыть ваш сундук"];
    Ib[158] = ["Ключ", "Даёт вам открыть один запертый сундук"];
    Ib[159] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
    Ib[125] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
    Ib[183] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
    Ib[190] = ["Крыша", "Немного скрывает вас и согревает!"];
    Ib[182] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
    Ib[162] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
    Ib[163] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
    Ib[164] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
    Ib[165] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
    Ib[122] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
    Ib[160] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
    Ib[168] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
    Ib[169] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
    Ib[170] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
    Ib[123] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
    Ib[166] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
    Ib[171] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
    Ib[172] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
    Ib[173] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
    Ib[124] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
    Ib[119] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
    Ib[135] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
    Ib[144] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
    Ib[151] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
    Ib[300] = "Вы не можете зайти на этот сервер";
    Ib[301] = "Выгнаны: ";
    Ib[302] = "Ваш ключ уже используется кем-то";
    Ib[303] = "Ваш ключ неправильный";
    Ib[304] = "У вас старая версия, вам нужно очистить кеш";
    Ib[305] = "Ресурсов больше нет";
    Ib[306] = "Вы выжили 1 день";
    Ib[307] = "Вы выжили ";
    Ib[308] = " дней";
    Ib[309] = "Вы умерли ;-;";
    Ib[310] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
    Ib[311] = "Сервер заполнен! Спамьте кнопку играть!";
    Ib[312] = "Ресурсы закончились";
    Ib[313] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
    Ib[314] = " умер";
    Ib[315] = "Это не тот инструмент";
    Ib[316] = "Вы вошли в команду";
    Ib[317] = "Вы умерли";
    Ib[318] = " вошёл в команду";
    Ib[319] = "Ваша команда была разрушена";
    Ib[320] = "Вы покинули команду";
    Ib[321] = " покинул команду";
    Ib[322] = "Кто-то использует ваш токен :>";
    Ib[323] = "Выберите сервер";
    Ib[324] = "игроков";
    Ib[325] = "игроков всего";
    Ib[326] = "игроков в этом режиме";
    Ib[327] = "Скоро...";
    document.getElementById("nickname_input").placeholder = "Имя";
    Rb[0] = ["Вы были убиты без причины"];
    Rb[1] = ["Вы умерли от голода, как название игры подразумевает это"];
    Rb[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
    Rb[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
    Rb[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
    Rb[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
    Rb[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
    Rb[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
    Rb[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
    Rb[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
    Rb[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
    Rb[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
    Rb[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
    Rb[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
    Rb[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
    Rb[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
    Rb[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
    Rb[17] = ["Твоя кожа разваливается, солнце убило тебя"];
    Rb[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
    Rb[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
    Rb[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
    Rb[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
    Δᐃᐃⵠᐃ = "Uuunnnggg";
    ⵠΔⵠⵠᐃΔⲆ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
  }
  const db = 20;
  const vb = 1;
  function mb(b, c, d) {
    const e = ~(b & 20001) & b | ~(b & 20001) & 20001;
    const f = ~(c & 23943) & 23943 | ~(c & 23943) & c;
    const g = (12345 + (59297 + d) * 1103515245) % 2147483648;
    const a = lb(e, f, g);
    ob(e, 0, g, e, 0, g);
    return ~(a & 19190) & a | ~(a & 19190) & 19190;
  }
  const cb = 11;
  function pb() {
    Ib[184] = ["You feel a great power emanating from this orb"];
    Rb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Ib[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Ib[328] = " BACK TO THE GAME";
    Ib[329] = " Share on Twitter";
    Ib[330] = " Share on Facebook";
    Ib[331] = "You can buy items on the shop in the next game with your points";
    Ib[332] = "points";
    Ib[333] = "Score";
    Ib[334] = "Kill";
    Ib[335] = "Days survived";
    Ib[336] = "Building method: Free. Press G to change";
    Ib[337] = "Building method: Grid. Press G to change";
    Ib[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Ib[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Ib[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Ib[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Ib[7] = ["mão"];
    Ib[140] = ["terra", "está sujo!"];
    Ib[126] = ["areia", "entrou nos meus olhos!"];
    Ib[109] = ["madeira", "você não pode pegar o suficiente disso!"];
    Ib[108] = ["pedra", "também chamado rocha"];
    Ib[111] = ["ouro", "seja generoso, dê para outros"];
    Ib[112] = ["diamante", "o que você irá fazer com isso?"];
    Ib[121] = ["ametista", "é mauve como lapa"];
    Ib[131] = ["farinha", "usada na cozinha"];
    Ib[133] = ["biscoito", "biscoito da vovó", "comida: 50"];
    Ib[136] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
    Ib[116] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
    Ib[117] = ["carne assada", "um mal passado, por favor", "comida: 35"];
    Ib[137] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
    Ib[138] = ["peixe assado", "com limão é perfeito", "comida: 35"];
    Ib[143] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
    Ib[145] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
    Ib[200] = ["doces", "apenas para crianças!", "comida: 100"];
    Ib[199] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
    Ib[201] = ["pisca-pisca", "decoração perfeita de telhado"];
    Ib[115] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
    Ib[110] = ["berry", "Berry saborosa!", "comida: 10"];
    Ib[132] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
    Ib[134] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
    Ib[188] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
    Ib[189] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
    Ib[191] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
    Ib[192] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
    Ib[193] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
    Ib[194] = ["mato de espinhos", "pica!"];
    Ib[141] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
    Ib[142] = ["gelo", "útil para fazer bolo e água"];
    Ib[55] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
    Ib[174] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
    Ib[2] = ["pele de coelho", "o coelho era tão fofo..."];
    Ib[178] = ["pele pura", "você é uma fábrica de pão"];
    Ib[179] = ["pele negra", "você está pronto para fazer algo errado"];
    Ib[146] = ["pele de inverno", "ele só queria um abraço"];
    Ib[139] = ["escala", "é pequeno como peixe!"];
    Ib[129] = ["pele do kraken", "você não está com medo?"];
    Ib[113] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
    Ib[118] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
    Ib[114] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
    Ib[161] = ["linha", "usada para fazer chapéus e mochila"];
    Ib[147] = ["linha de diamante", "usada para fazer chapéus especiais"];
    Ib[167] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
    Ib[57] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
    Ib[0] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
    Ib[5] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
    Ib[6] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
    Ib[9] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
    Ib[30] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
    Ib[62] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
    Ib[16] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
    Ib[8] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
    Ib[qs.ⲆⲆⵠᐃΔⲆΔᐃⲆ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
    Ib[3] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
    Ib[4] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
    Ib[31] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
    Ib[35] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
    Ib[36] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
    Ib[37] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
    Ib[38] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
    Ib[45] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
    Ib[12] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
    Ib[13] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
    Ib[14] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
    Ib[15] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
    Ib[33] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
    Ib[46] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
    Ib[50] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
    Ib[51] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
    Ib[52] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
    Ib[58] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
    Ib[25] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
    Ib[26] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
    Ib[27] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
    Ib[43] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
    Ib[59] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
    Ib[23] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
    Ib[41] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
    Ib[42] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
    Ib[83] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
    Ib[10] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
    Ib[11] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
    Ib[40] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
    Ib[84] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
    Ib[85] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
    Ib[86] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
    Ib[48] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
    Ib[47] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
    Ib[185] = ["esfera do dragão", "dado na questt"];
    Ib[149] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
    Ib[175] = ["pedra verde", "você não vai trapacear, promete?"];
    Ib[176] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
    Ib[177] = ["pedra azul", "para pessoas muito gentis"];
    Ib[77] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
    Ib[78] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
    Ib[79] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
    Ib[180] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
    Ib[181] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
    Ib[127] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
    Ib[128] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
    Ib[130] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
    Ib[49] = ["regador", "permite regar as plantas", "dano: 1"];
    Ib[29] = ["mochila", "mais espaço para seus itens!"];
    Ib[120] = ["papel", "usado para fazer o livro"];
    Ib[28] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
    Ib[195] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
    Ib[148] = ["fechadura", "permite você trancar seu baú"];
    Ib[158] = ["chave", "permite destrancar um baú"];
    Ib[159] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
    Ib[125] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
    Ib[183] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
    Ib[190] = ["telhado", "esconde você um pouco e te esquenta!"];
    Ib[182] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
    Ib[162] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
    Ib[163] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
    Ib[164] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
    Ib[165] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
    Ib[122] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
    Ib[160] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
    Ib[168] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
    Ib[169] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
    Ib[170] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
    Ib[123] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
    Ib[166] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
    Ib[171] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
    Ib[172] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
    Ib[173] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
    Ib[124] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
    Ib[119] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
    Ib[135] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
    Ib[144] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
    Ib[151] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
    Ib[300] = "você não pode entrar no servidor";
    Ib[301] = "kickado: ";
    Ib[302] = "sua chave está em uso por outra pessoa";
    Ib[303] = "sua chave está errada";
    Ib[304] = "você tem uma versão velha, limpe seu cache";
    Ib[305] = "não tem mais recursos";
    Ib[306] = "você sobreviveu 1 dia";
    Ib[307] = "você sobreviveu ";
    Ib[308] = " dias";
    Ib[309] = "você está morto ;-;";
    Ib[310] = "servidor não pôde achar um local de spawn! spam o botão de play!";
    Ib[311] = "servidor está cheio! spam o botão de play!";
    Ib[312] = "não tem recursos";
    Ib[313] = "inventário está cheio (botão direito para deletar itens)";
    Ib[314] = " está morto";
    Ib[315] = "essa não é a ferramenta certa";
    Ib[316] = "você entrou no time";
    Ib[317] = "você está morto";
    Ib[318] = "entrou no time";
    Ib[319] = "seu time foi destruido";
    Ib[320] = "você saiu do time";
    Ib[321] = " saiu do time";
    Ib[322] = "alguém roubou sua ficha :>";
    Ib[323] = "escolha um servidor";
    Ib[324] = "jogadores";
    Ib[325] = "jogadores totais";
    Ib[326] = "jogadores nesse modo";
    Ib[327] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Apelido";
    Rb[0] = ["você morreu sem motivo"];
    Rb[1] = ["você morreu de fome, como o jogo diz"];
    Rb[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
    Rb[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
    Rb[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
    Rb[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
    Rb[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
    Rb[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
    Rb[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
    Rb[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
    Rb[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
    Rb[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
    Rb[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
    Rb[13] = ["você morreu de sede. melhor beber sua própria urina."];
    Rb[14] = ["você sabia que você morre afogado? agora você sabe."];
    Rb[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
    Rb[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
    Rb[17] = ["sua pele caindo aos pedaços, o sol te matou."];
    Rb[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
    Rb[19] = ["como vampiro, não chegue perto do alho."];
    Rb[20] = ["você comeu alho como vampiro, o que você esperava?"];
    Rb[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
    Δᐃᐃⵠᐃ = "Uuunnnggg";
    ⵠΔⵠⵠᐃΔⲆ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
  }
  function Cb() {
    Ib[184] = ["You feel a great power emanating from this orb"];
    Rb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Ib[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Ib[328] = " BACK TO THE GAME";
    Ib[329] = " Share on Twitter";
    Ib[330] = " Share on Facebook";
    Ib[331] = "You can buy items on the shop in the next game with your points";
    Ib[332] = "points";
    Ib[333] = "Score";
    Ib[334] = "Kill";
    Ib[335] = "Days survived";
    Ib[336] = "Building method: Free. Press G to change";
    Ib[337] = "Building method: Grid. Press G to change";
    Ib[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Ib[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Ib[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Ib[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Ib[7] = ["Mano"];
    Ib[140] = ["Tierra", "¡Tan limpia como mis manos!"];
    Ib[126] = ["Arena", "¡Tengo arena en mis ojos!"];
    Ib[109] = ["Madera", "¡Nunca hay suficiente!"];
    Ib[108] = ["Piedra", "También llamada roca."];
    Ib[111] = ["Oro", "Sé generoso, compártelo con los otros"];
    Ib[112] = ["Diamante", "¿Que vas a hacer con él?"];
    Ib[121] = ["Amatista", "Es Mauve como Lapa"];
    Ib[131] = ["Harina", "Usada para cocinar."];
    Ib[133] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
    Ib[136] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
    Ib[116] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
    Ib[117] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
    Ib[137] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
    Ib[138] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
    Ib[143] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
    Ib[145] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
    Ib[200] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
    Ib[199] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
    Ib[201] = ["Guirnalda", "Perfecta para decorar el techo"];
    Ib[115] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Ib[110] = ["Baya", "No es venenosa.", "Comida: 10"];
    Ib[132] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Ib[134] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
    Ib[188] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    Ib[189] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
    Ib[191] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
    Ib[192] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
    Ib[193] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
    Ib[194] = ["Planta de Espinas", "¡Te daña!"];
    Ib[141] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
    Ib[142] = ["Hielo", "Bueno para hacer tartas y agua"];
    Ib[55] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
    Ib[174] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
    Ib[2] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
    Ib[178] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
    Ib[179] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
    Ib[146] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
    Ib[139] = ["Escamas", "¡Huele a pescado!"];
    Ib[129] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
    Ib[113] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
    Ib[118] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
    Ib[114] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
    Ib[161] = ["Hilo", "Usado para craftear ropa y mochila"];
    Ib[147] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
    Ib[167] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
    Ib[57] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
    Ib[0] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
    Ib[5] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
    Ib[6] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
    Ib[9] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
    Ib[30] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
    Ib[62] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
    Ib[16] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
    Ib[8] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
    Ib[1] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
    Ib[3] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
    Ib[4] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
    Ib[31] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
    Ib[35] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
    Ib[36] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
    Ib[37] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
    Ib[38] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
    Ib[45] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
    Ib[12] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
    Ib[13] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
    Ib[14] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
    Ib[15] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
    Ib[33] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
    Ib[46] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
    Ib[50] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
    Ib[51] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
    Ib[52] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
    Ib[58] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
    Ib[25] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
    Ib[26] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
    Ib[27] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
    Ib[43] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
    Ib[59] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
    Ib[23] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
    Ib[41] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
    Ib[42] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
    Ib[83] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
    Ib[10] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
    Ib[11] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
    Ib[40] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
    Ib[84] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
    Ib[85] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
    Ib[86] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
    Ib[48] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
    Ib[47] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
    Ib[185] = ["Esfera del Dragón", "Dada en la misión"];
    Ib[149] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
    Ib[175] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
    Ib[176] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
    Ib[177] = ["Gema Azul", "Para gente muy amable"];
    Ib[77] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
    Ib[78] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
    Ib[79] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
    Ib[180] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
    Ib[181] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
    Ib[127] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
    Ib[128] = ["Botella Vacia", "La puedes llenar de agua"];
    Ib[130] = ["Regadera Vacía", "La tienes que llenar de agua"];
    Ib[49] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
    Ib[29] = ["Mochila", "¡Mas espacio para tus cosas!"];
    Ib[120] = ["Hoja", "Usada para hacer un libro"];
    Ib[28] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
    Ib[195] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
    Ib[148] = ["Cerradura", "Te permite cerrar tu cofre"];
    Ib[158] = ["Llave", "Te permite abrir un cofre cerrado"];
    Ib[159] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
    Ib[125] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
    Ib[183] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
    Ib[190] = ["Techo", "Te esconde un poco y te protege del frío"];
    Ib[182] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
    Ib[162] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
    Ib[163] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
    Ib[164] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
    Ib[165] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
    Ib[122] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
    Ib[160] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
    Ib[168] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
    Ib[169] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
    Ib[170] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
    Ib[123] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
    Ib[166] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
    Ib[171] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
    Ib[172] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
    Ib[173] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
    Ib[124] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
    Ib[119] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
    Ib[135] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    Ib[144] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    Ib[151] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
    Ib[300] = "No puedes unirte a este servidor";
    Ib[301] = "Expulsado: ";
    Ib[302] = "Tu llave ya está usada";
    Ib[303] = "Tu llave está mal";
    Ib[304] = "Tienes una versión antigua, limpia tu cache";
    Ib[305] = "No hay mas recursos";
    Ib[306] = "Has sobrevivido 1 día";
    Ib[307] = "Has sobrevivido ";
    Ib[308] = " días";
    Ib[309] = "Estás muerto ;-;";
    Ib[310] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
    Ib[311] = "El servidor esta lleno, ¡spamea el botón de jugar!";
    Ib[312] = "Recurso vacio";
    Ib[313] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
    Ib[314] = " está muerto";
    Ib[315] = "Esta no es la herramienta correcta";
    Ib[316] = "Te has unido a un equipo";
    Ib[317] = "Estás muerto";
    Ib[318] = " se unió al equipo";
    Ib[319] = "Tu equipo ha sido destruido";
    Ib[320] = "Has dejado el equipo";
    Ib[321] = " dejo el equipo ";
    Ib[322] = "Alguien te robó tu token :>";
    Ib[323] = "Elige un servidor";
    Ib[324] = "jugadores";
    Ib[325] = "total de jugadores";
    Ib[326] = "Jugadores en este modo de juego";
    Ib[327] = "Próximamente...";
    document.getElementById("nickname_input").placeholder = "Apodo";
    Rb[0] = ["Has muerto por ninguna razón"];
    Rb[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
    Rb[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
    Rb[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
    Rb[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
    Rb[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
    Rb[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
    Rb[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
    Rb[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
    Rb[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
    Rb[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
    Rb[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
    Rb[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
    Rb[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
    Rb[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
    Rb[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
    Rb[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
    Rb[17] = ["Tu piel se cayó, el sol te quemó."];
    Rb[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
    Rb[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
    Rb[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
    Rb[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
    Δᐃᐃⵠᐃ = "Uuunnnggg";
    ⵠΔⵠⵠᐃΔⲆ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
  }
  function Tb(a, b, c, d, e) {
    Qj(Ft, a, b, c, d, e);
    return ((28 + (Co(Ht[0], Ht[1], Ht[2]) ^ Co(Ht[3], Ht[4], Ht[0]))) * 8121 + 28411) % 134456;
  }
  function fb(b, c, d) {
    const e = ~(b & 46272) & (b | 46272);
    const f = ((26861 + c) * 214013 + 2531011) % 4294967296;
    const g = (16 << (d & 255)) + (24 << (d >> 24 & 255)) + (8 << (d >> 8 & 255)) + (0 << (d >> 16 & 255));
    const a = ny(e, f, g, e, f, g);
    const h = Lr(e, f, g, e, f);
    return (16 << ((a ^ h) & 255)) + (8 << ((a ^ h) >> 16 & 255)) + (24 << ((a ^ h) >> 8 & 255)) + (0 << ((a ^ h) >> 24 & 255));
  }
  function zb() {
    Ib[184] = ["You feel a great power emanating from this orb"];
    Rb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Ib[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Ib[328] = " BACK TO THE GAME";
    Ib[329] = " Share on Twitter";
    Ib[330] = " Share on Facebook";
    Ib[331] = "You can buy items on the shop in the next game with your points";
    Ib[332] = "points";
    Ib[333] = "Score";
    Ib[334] = "Kill";
    Ib[335] = "Days survived";
    Ib[336] = "Building method: Free. Press G to change";
    Ib[337] = "Building method: Grid. Press G to change";
    Ib[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Ib[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Ib[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Ib[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Ib[7] = ["Hand"];
    Ib[140] = ["Boden", "Dreckig!"];
    Ib[126] = ["Sand", "Ich habe es in meine Augen bekommen!"];
    Ib[109] = ["Holz", "Du kannst niemals zu viel haben!"];
    Ib[108] = ["Stein", "Auch Fels gennant"];
    Ib[111] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
    Ib[112] = ["Diamant", "Was wirst du daraus machen?"];
    Ib[121] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
    Ib[131] = ["Mehl", "wird fürs Backen gebraucht"];
    Ib[133] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
    Ib[136] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
    Ib[116] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
    Ib[117] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
    Ib[137] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
    Ib[138] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
    Ib[143] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
    Ib[145] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
    Ib[200] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
    Ib[199] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
    Ib[201] = ["Girlande", "perfekter Schmuck für Dächer"];
    Ib[115] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Ib[110] = ["Beere", "Beeren lecker!", "Essen: 10"];
    Ib[132] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Ib[134] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
    Ib[188] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Ib[189] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
    Ib[191] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    Ib[192] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
    Ib[193] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
    Ib[194] = ["Dornenbusch", "Es sticht!"];
    Ib[141] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
    Ib[142] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
    Ib[55] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
    Ib[174] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
    Ib[2] = ["Hasenfell", "Der Hase war so süß..."];
    Ib[178] = ["Klares Fell", "Du bist eine Brotfabrik"];
    Ib[179] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
    Ib[146] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
    Ib[139] = ["Schuppen", "Es riecht wie Fisch!"];
    Ib[129] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
    Ib[113] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
    Ib[118] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
    Ib[114] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
    Ib[161] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
    Ib[147] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
    Ib[167] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
    Ib[57] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
    Ib[0] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
    Ib[5] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
    Ib[6] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
    Ib[9] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
    Ib[30] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
    Ib[62] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
    Ib[16] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
    Ib[8] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
    Ib[1] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
    Ib[3] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    Ib[4] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    Ib[31] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
    Ib[35] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
    Ib[36] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
    Ib[37] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
    Ib[38] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
    Ib[45] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
    Ib[12] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
    Ib[13] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
    Ib[14] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
    Ib[15] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
    Ib[33] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
    Ib[46] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
    Ib[50] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    Ib[51] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    Ib[52] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
    Ib[58] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
    Ib[25] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
    Ib[26] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
    Ib[27] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
    Ib[43] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
    Ib[59] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
    Ib[23] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
    Ib[41] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
    Ib[42] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
    Ib[83] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    Ib[10] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
    Ib[11] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
    Ib[40] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
    Ib[84] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    Ib[85] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    Ib[86] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    Ib[48] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
    Ib[47] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Ib[185] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
    Ib[149] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
    Ib[175] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
    Ib[176] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
    Ib[177] = ["Blauer Edelstein", "Für sehr nette Leute"];
    Ib[77] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Ib[78] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Ib[79] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    Ib[180] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
    Ib[181] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
    Ib[127] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
    Ib[128] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
    Ib[130] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
    Ib[49] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
    Ib[29] = ["Rucksack", "Mehr Platz im Inventar!"];
    Ib[120] = ["Papier", "Wird fürs Büchermachen verwendet"];
    Ib[28] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
    Ib[195] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
    Ib[148] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
    Ib[158] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
    Ib[159] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
    Ib[125] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
    Ib[183] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
    Ib[190] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
    Ib[182] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
    Ib[162] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
    Ib[163] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
    Ib[164] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
    Ib[165] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
    Ib[122] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
    Ib[160] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
    Ib[168] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
    Ib[169] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
    Ib[170] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
    Ib[123] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
    Ib[166] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
    Ib[171] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
    Ib[172] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
    Ib[173] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
    Ib[124] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
    Ib[119] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
    Ib[135] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    Ib[144] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    Ib[151] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
    Ib[300] = "Du kannst diesem Server nicht beitreten";
    Ib[301] = "Gekickt: ";
    Ib[302] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
    Ib[303] = "Dein Schlüssel ist falsch";
    Ib[304] = "Deine Version ist veraltet, säubere dein Cache";
    Ib[305] = "Es gibt keine neuen Ressourcen";
    Ib[306] = "Du hast einen Tag überlebt";
    Ib[307] = "Du hast überlebt ";
    Ib[308] = " Tage";
    Ib[309] = "Du bist gestorben ;-;";
    Ib[310] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
    Ib[311] = "Server ist voll! Drücke immer wieder auf spielen!";
    Ib[312] = "Ressource ist leer";
    Ib[313] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
    Ib[314] = " ist gestorben";
    Ib[315] = "Das ist nicht das richtige Werkzeug";
    Ib[316] = "Du bist einem Team beigetreten";
    Ib[317] = "Du bist gestorben";
    Ib[318] = " ist dem Team beigetreten";
    Ib[319] = "Dein Team wurde zerstört";
    Ib[320] = "Du hast das Team verlassen";
    Ib[321] = " hat das Team verlassen";
    Ib[322] = "Jemand hat dein Token gestohlen :>";
    Ib[323] = "Suche dir ein Server aus";
    Ib[324] = "Spieler";
    Ib[325] = "alle Spieler";
    Ib[326] = "Spieler in diesem Modus";
    Ib[327] = "Bald verfügbar...";
    document.getElementById("nickname_input").placeholder = "Spitzname";
    Rb[0] = ["Du wurdest ohne Grund getötet"];
    Rb[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
    Rb[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
    Rb[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
    Rb[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
    Rb[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
    Rb[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
    Rb[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
    Rb[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
    Rb[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
    Rb[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
    Rb[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
    Rb[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
    Rb[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
    Rb[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
    Rb[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
    Rb[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
    Rb[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
    Rb[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
    Rb[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
    Rb[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
    Rb[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
    Δᐃᐃⵠᐃ = "Uuunnnggg";
    ⵠΔⵠⵠᐃΔⲆ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
  }
  function yb(b, c, d, e, f) {
    kk(Ft, b, c, d, e, f);
    const g = Co(Ht[0], Ht[1], Ht[2]);
    Tb(Ht[3], Ht[4], Ht[0], Ht[1], Ht[2]);
    return g ^ 45098;
  }
  const wb = 4;
  function Pb() {
    Ib[184] = ["You feel a great power emanating from this orb"];
    Rb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Ib[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Ib[328] = " BACK TO THE GAME";
    Ib[329] = " Share on Twitter";
    Ib[330] = " Share on Facebook";
    Ib[331] = "You can buy items on the shop in the next game with your points";
    Ib[332] = "points";
    Ib[333] = "Score";
    Ib[334] = "Kill";
    Ib[335] = "Days survived";
    Ib[336] = "Building method: Free. Press G to change";
    Ib[337] = "Building method: Grid. Press G to change";
    Ib[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    Ib[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    Ib[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    Ib[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    Ib[7] = ["Ręka"];
    Ib[140] = ["Ziemia", "Brudna!"];
    Ib[126] = ["Piasek", "Mam go w oczach!"];
    Ib[109] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
    Ib[108] = ["Kamień", "Także nazywany skałą"];
    Ib[111] = ["Złoto", "Bądź hojny, daj trochę innym"];
    Ib[112] = ["Diament", "Co z nim zrobisz?"];
    Ib[121] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
    Ib[131] = ["Mąka", "Używana w gotowaniu"];
    Ib[133] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
    Ib[136] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
    Ib[116] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
    Ib[117] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
    Ib[137] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
    Ib[138] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
    Ib[143] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
    Ib[145] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
    Ib[200] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
    Ib[199] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
    Ib[201] = ["Girlanda", "Idealna do dekorowania dachów"];
    Ib[115] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Ib[110] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
    Ib[132] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Ib[134] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
    Ib[188] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Ib[189] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
    Ib[191] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    Ib[192] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
    Ib[193] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
    Ib[194] = ["Kolczasty krzew", "Kłuje!"];
    Ib[141] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
    Ib[142] = ["Lód", "Użyteczny do robienia ciast i wody"];
    Ib[55] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
    Ib[174] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
    Ib[2] = ["Skóra królika", "Ten królik był taki słodziutki..."];
    Ib[178] = ["Skóra", "Jesteś fabryką chleba"];
    Ib[179] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
    Ib[146] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
    Ib[139] = ["Łuski", "Pachnie jak ryba!"];
    Ib[129] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
    Ib[113] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
    Ib[118] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
    Ib[114] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
    Ib[161] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
    Ib[147] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
    Ib[167] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
    Ib[57] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
    Ib[0] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
    Ib[5] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
    Ib[6] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    Ib[9] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    Ib[30] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
    Ib[62] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
    Ib[16] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
    Ib[8] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
    Ib[1] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
    Ib[3] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    Ib[4] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    Ib[31] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    Ib[35] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
    Ib[36] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
    Ib[37] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
    Ib[38] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
    Ib[45] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
    Ib[12] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
    Ib[13] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
    Ib[14] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
    Ib[15] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
    Ib[33] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
    Ib[46] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
    Ib[50] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    Ib[51] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    Ib[52] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    Ib[58] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
    Ib[25] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
    Ib[26] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
    Ib[27] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
    Ib[43] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
    Ib[59] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
    Ib[23] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
    Ib[41] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
    Ib[42] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
    Ib[83] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
    Ib[10] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
    Ib[11] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
    Ib[40] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
    Ib[84] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
    Ib[85] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
    Ib[86] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
    Ib[48] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
    Ib[47] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Ib[185] = ["Smocza kula", "Zdobyta podczas zadania"];
    Ib[149] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
    Ib[175] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
    Ib[176] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
    Ib[177] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
    Ib[77] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Ib[78] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Ib[79] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    Ib[180] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
    Ib[181] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
    Ib[127] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
    Ib[128] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
    Ib[130] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
    Ib[49] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
    Ib[29] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
    Ib[120] = ["Papier", "Używany w tworzeniu książki"];
    Ib[28] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
    Ib[195] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
    Ib[148] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
    Ib[158] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
    Ib[159] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
    Ib[125] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
    Ib[183] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
    Ib[190] = ["Dach", "Trochę cie ogrzewa i chowa!"];
    Ib[182] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
    Ib[162] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
    Ib[163] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
    Ib[164] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
    Ib[165] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
    Ib[122] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
    Ib[160] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
    Ib[168] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
    Ib[169] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
    Ib[170] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
    Ib[123] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
    Ib[166] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
    Ib[171] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
    Ib[172] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
    Ib[173] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
    Ib[124] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
    Ib[119] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
    Ib[135] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    Ib[144] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    Ib[151] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
    Ib[300] = "Nie możesz dołączyć do tego serwera";
    Ib[301] = "Wyrzucony: ";
    Ib[302] = "Twój klucz jest aktualnie używany przez innego gracza";
    Ib[303] = "Twój klucz jest nieprawidłowy";
    Ib[304] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
    Ib[305] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
    Ib[306] = "Przeżyłeś 1 dzień";
    Ib[307] = "Przeżyłeś ";
    Ib[308] = " dni";
    Ib[309] = "Jesteś martwy ;-;";
    Ib[310] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
    Ib[311] = "Serwer jest pełny! Spamuj przycisk zagraj!";
    Ib[312] = "Źródło jest puste";
    Ib[313] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
    Ib[314] = " jest martwy";
    Ib[315] = "To nie jest właściwe narzędzie";
    Ib[316] = "Dołączyłeś do drużyny";
    Ib[317] = "Jesteś martwy";
    Ib[318] = " dołączył do drużyny";
    Ib[319] = "Twoja drużyna została zniszczona";
    Ib[320] = " Opuściłeś drużynę";
    Ib[321] = " opuścił drużynę";
    Ib[322] = "Ktoś ukradł twój żeton :>";
    Ib[323] = "Wybierz serwer";
    Ib[324] = "graczy";
    Ib[325] = "wszystkich graczy";
    Ib[326] = "graczy w tym trybie";
    Ib[327] = "Już wkrótce...";
    document.getElementById("nickname_input").placeholder = "Przydomek";
    Rb[0] = ["Zostałeś zabity bez powodu"];
    Rb[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
    Rb[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
    Rb[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
    Rb[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
    Rb[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
    Rb[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
    Rb[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
    Rb[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
    Rb[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
    Rb[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
    Rb[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
    Rb[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
    Rb[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
    Rb[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
    Rb[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
    Rb[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
    Rb[17] = ["Twoja skóra odpada, słońce cię zabija."];
    Rb[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
    Rb[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
    Rb[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
    Rb[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
    Δᐃᐃⵠᐃ = "Uuunnnggg";
    ⵠΔⵠⵠᐃΔⲆ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
  }
  const kb = 17;
  function Ab(a, b) {
    const c = (2531011 + (a + 8482) * 214013) % 4294967296;
    const d = (2531011 + (6294 + b) * 214013) % 4294967296;
    const e = function (b, c, d, e, f, i) {
      const a = ~(b & 65362) & 65362 | ~(b & 65362) & b;
      const j = (0 << (c & 255)) + (8 << (c >> 8 & 255)) + (16 << (c >> 16 & 255)) + (24 << (c >> 24 & 255));
      const k = ~(d & 27580) & (d | 27580);
      const h = Cf(a, j, k, ~(e & 51365) & e | ~(e & 51365) & 51365, (0 << (f >> 8 & 255)) + (8 << (f >> 16 & 255)) + (16 << (f >> 24 & 255)) + (24 << (f & 255)), ~(i & 19873) & 19873 | ~(i & 19873) & i);
      const g = fb(a, j, k);
      return (1 + (13746 + (h ^ g)) * 22695477) % 4294967296;
    }(c, d, c, d, c, d);
    to(c, d, c);
    return (e | 47137) & ~(e & 47137);
  }
  function xb(a, b) {
    qi(Ft, a, b);
    const c = Rf(Ht[0], Ht[1]);
    const d = Lk(Ht[0], Ht[1], Ht[0]);
    return (8 << ((c ^ d) >> 8 & 255)) + (0 << ((c ^ d) >> 16 & 255)) + (24 << ((c ^ d) & 255)) + (16 << ((c ^ d) >> 24 & 255));
  }
  const Jb = 1;
  function Mb() {
    Ib[184] = ["You feel a great power emanating from this orb"];
    Rb[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    Ib[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    Ib[328] = " RETOUR AU JEU";
    Ib[329] = " Partage sur Twitter";
    Ib[330] = " Partage sur Facebook";
    Ib[331] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
    Ib[332] = "points";
    Ib[333] = "Score";
    Ib[334] = "Tués";
    Ib[335] = "Jours survécus";
    Ib[336] = "Mode de construction: Libre. Appuie sur G pour changer";
    Ib[337] = "Mode de construction: Grille. Appuie sur G pour changer";
    Ib[197] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
    Ib[18] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
    Ib[61] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
    Ib[198] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quêtes";
    document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
    document.getElementById("constraintquest").innerHTML = " Contraintes";
    document.getElementById("claim_rewards").innerHTML = " Résultat";
    document.getElementById("rewardquest").innerHTML = " Récompenses";
    document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
    document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
    document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
    document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
    document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
    document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
    document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "RÉCOMPENSE!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
    Ib[7] = ["Main"];
    Ib[140] = ["Terre", "C'est sale!"];
    Ib[126] = ["Sable", "J'en ai dans les yeux"];
    Ib[109] = ["Bois", "Tu n'en auras jamais trop!"];
    Ib[108] = ["Pierre", "Aussi appelée roche"];
    Ib[111] = ["Or", "Sois généreux, donne en aux autres"];
    Ib[112] = ["Diamant", "Comme tes yeux! wesh"];
    Ib[121] = ["Améthyste", "C'est Mauve comme Lapa"];
    Ib[131] = ["Farine", "Utile pour la cuisine"];
    Ib[133] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
    Ib[136] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
    Ib[116] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
    Ib[117] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
    Ib[137] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
    Ib[138] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
    Ib[143] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
    Ib[145] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
    Ib[200] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
    Ib[199] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
    Ib[201] = ["Guirlandes", "Utilisable sur les toits"];
    Ib[115] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
    Ib[110] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
    Ib[132] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    Ib[134] = ["Blé", "Peut être transformé en farine dans les moulins"];
    Ib[188] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    Ib[189] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
    Ib[191] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
    Ib[192] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
    Ib[193] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
    Ib[194] = ["Ronces", "Ça pique!"];
    Ib[141] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
    Ib[142] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
    Ib[55] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
    Ib[174] = ["Peau de loup", "Il était où le gentil ti Youki?"];
    Ib[2] = ["Peau de lapin", "Vous êtes un monstre"];
    Ib[178] = ["Fourrure blanche", "Tu es une usine à pain"];
    Ib[179] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
    Ib[146] = ["Fourrure d'hiver", "Il voulait juste un calin"];
    Ib[139] = ["Écailles", "Ça sent le poisson!"];
    Ib[129] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
    Ib[113] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
    Ib[118] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
    Ib[114] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
    Ib[161] = ["Fil", "Utile pour faire des chapeaux et un sac"];
    Ib[147] = ["Fil de diamant", "Utile pour faire des chapeaux"];
    Ib[167] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
    Ib[57] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
    Ib[0] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
    Ib[5] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
    Ib[6] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
    Ib[9] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
    Ib[30] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
    Ib[62] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
    Ib[16] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
    Ib[8] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
    Ib[1] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
    Ib[3] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
    Ib[4] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
    Ib[31] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
    Ib[35] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
    Ib[36] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
    Ib[37] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
    Ib[38] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
    Ib[45] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
    Ib[12] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
    Ib[13] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
    Ib[14] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
    Ib[15] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
    Ib[33] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
    Ib[46] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
    Ib[50] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
    Ib[51] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
    Ib[52] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
    Ib[58] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
    Ib[25] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
    Ib[26] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
    Ib[27] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
    Ib[43] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
    Ib[59] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
    Ib[23] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ib[41] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ib[42] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ib[83] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ib[10] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ib[11] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ib[40] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
    Ib[84] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ib[85] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ib[86] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    Ib[48] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
    Ib[47] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
    Ib[185] = ["Orbe du Dragon", "Donné en Quête"];
    Ib[149] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
    Ib[175] = ["Gemme verte", "Tu n'as pas triché, promis?"];
    Ib[176] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
    Ib[177] = ["Gemme bleue", "Pour les gens trop gentils"];
    Ib[77] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
    Ib[78] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
    Ib[79] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
    Ib[180] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
    Ib[181] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
    Ib[127] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
    Ib[128] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
    Ib[130] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
    Ib[49] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
    Ib[29] = ["Sac", "Plus de place dans ton inventaire!"];
    Ib[120] = ["Papier", "Pour fabriquer toute sorte d'objets"];
    Ib[28] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
    Ib[195] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
    Ib[148] = ["Cadenas", "Pour verrouiller un coffre"];
    Ib[158] = ["Clé", "Pour déverrouiller un coffre"];
    Ib[159] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
    Ib[125] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
    Ib[183] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
    Ib[190] = ["Toit", "Te cache un peu et te réchauffe"];
    Ib[182] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
    Ib[162] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
    Ib[163] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
    Ib[164] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
    Ib[165] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
    Ib[122] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
    Ib[160] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
    Ib[168] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
    Ib[169] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
    Ib[170] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
    Ib[123] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
    Ib[166] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
    Ib[171] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
    Ib[172] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
    Ib[173] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
    Ib[124] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
    Ib[119] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
    Ib[135] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    Ib[144] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    Ib[151] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
    Ib[300] = "Tu ne peux pas rejoindre le serveur";
    Ib[301] = "Expulsé: ";
    Ib[302] = "Ta clé est déjà utilisée par quelqu'un d'autre";
    Ib[303] = "Ta clé est fausse";
    Ib[304] = "Tu as une vieille version, rafraichis tes caches";
    Ib[305] = "Il n'y a plus de nouvelles ressources";
    Ib[306] = "Tu as survécu 1 jour";
    Ib[307] = "Tu as survécu ";
    Ib[308] = " jours";
    Ib[309] = "Tu es mort ;-;";
    Ib[310] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
    Ib[311] = "Le serveur est complet! Spam le bouton jouer";
    Ib[312] = "Cette ressource est vide";
    Ib[313] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
    Ib[314] = " est mort";
    Ib[315] = "Ce n'est pas le bon outil";
    Ib[316] = "Tu as rejoins une équipe";
    Ib[317] = "Tu es mort";
    Ib[318] = " a rejoint l'équipe";
    Ib[319] = "Ton équipe a été détruite";
    Ib[320] = "Tu as quitté l'équipe";
    Ib[321] = " a quitté l'équipe";
    Ib[322] = "Quelqu'un a volé ton token :>";
    Ib[323] = "Choisis un serveur";
    Ib[324] = "joueurs";
    Ib[325] = "joueurs";
    Ib[326] = "joueurs dans ce mode";
    Ib[327] = "Bientôt...";
    document.getElementById("nickname_input").placeholder = "Surnom";
    Rb[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
    Rb[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
    Rb[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
    Rb[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
    Rb[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
    Rb[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
    Rb[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
    Rb[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
    Rb[8] = ["Cet ours voulait juste un câlin."];
    Rb[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
    Rb[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
    Rb[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
    Rb[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
    Rb[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
    Rb[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
    Rb[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
    Rb[16] = ["Un kraken a 'kraké' tes os."];
    Rb[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
    Rb[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
    Rb[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
    Rb[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
    Rb[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
    Δᐃᐃⵠᐃ = "Uuunnnggg";
    ⵠΔⵠⵠᐃΔⲆ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
  }
  function Bb(a, b) {
    const c = (24 << (a >> 24 & 255)) + (0 << (a & 255)) + (8 << (a >> 16 & 255)) + (16 << (a >> 8 & 255));
    const d = (0 << (b >> 8 & 255)) + (16 << (b >> 24 & 255)) + (8 << (b >> 16 & 255)) + (24 << (b & 255));
    const e = Gx(c, d, c, d);
    (function (c, e, f, i, j, k) {
      const a = (16 << (c & 255)) + (8 << (c >> 24 & 255)) + (24 << (c >> 16 & 255)) + (0 << (c >> 8 & 255));
      const m = ~(e & 10314) & 10314 | ~(e & 10314) & e;
      const n = (12345 + (f + 27773) * 1103515245) % 2147483648;
      const h = ~(i & 55828) & (i | 55828);
      const g = (1013904223 + (44560 + j) * 1664525) % 4294967296;
      const l = k ^ 62307;
      const o = Gx(a, m, n, h);
      const b = Cf(g, l, a, m, n, h);
    })(c, d, c, d, c, d);
    return ~(e & 23535) & 23535 | ~(e & 23535) & e;
  }
  const Eb = 8;
  function Db(b, c) {
    const d = b ^ 8837;
    const e = (16 << (c & 255)) + (24 << (c >> 16 & 255)) + (8 << (c >> 24 & 255)) + (0 << (c >> 8 & 255));
    const f = yf(d, e, d, e, d, e);
    const g = fs(d, e);
    return (16 << ((f ^ g) & 255)) + (24 << ((f ^ g) >> 8 & 255)) + (0 << ((f ^ g) >> 16 & 255)) + (8 << ((f ^ g) >> 24 & 255));
  }
  var Ib = [];
  for (var Sb = 0; Sb < 344; Sb++) {
    Ib[Sb] = "";
  }
  const Mt = 19;
  const _b = 7;
  var Rb = [];
  $(".md-languages").on("click", function () {
    $(this).toggleClass("active");
  });
  $(".md-languages ul li").on("click", function () {
    var a = $(this).text();
    if (a === "English") {
      gb();
    } else if (a === "Français") {
      Mb();
    } else if (a === "Deutsch") {
      zb();
    } else if (a === "Español") {
      Cb();
    } else if (a === "Português") {
      pb();
    } else if (a === "Русский") {
      bb();
    } else if (a === "Polski") {
      Pb();
    }
    ⵠΔΔᐃⵠ = [];
    Rx.ⲆΔⲆΔ.label = [];
    $(".md-languages ul li").removeClass("active");
    $(this).addClass("active");
    $(".md-languages label button").text(a);
  });
  Nr = "EN";
  var Fb = navigator.language || navigator.userLanguage;
  const jb = 19;
  const Lb = 17;
  const Gb = 100;
  const Wb = Bt;
  switch (Fb) {
    case "ru":
      Nr = "RU";
      break;
    case "en":
      Nr = "EN";
      break;
    case "es":
      Nr = "SP";
      break;
    case "fr":
      Nr = "FR";
      break;
    case "pl":
      Nr = "PL";
      break;
    case "de":
      Nr = "DE";
      break;
    case "pt":
      Nr = "PT";
  }
  var qb;
  if (Nr === "FR") {
    $(".md-languages label button").text("Français");
    qb = Mb;
  } else if (Nr === "PL") {
    $(".md-languages label button").text("Polski");
    qb = Pb;
  } else if (Nr === "PT") {
    $(".md-languages label button").text("Português");
    qb = pb;
  } else if (Nr === "SP") {
    $(".md-languages label button").text("Español");
    qb = Cb;
  } else if (Nr === "RU") {
    $(".md-languages label button").text("Русский");
    qb = bb;
  } else if (Nr === "DE") {
    $(".md-languages label button").text("Deutsch");
    qb = zb;
  } else {
    $(".md-languages label button").text("English");
    qb = gb;
  }
  ᐃᐃ = {
    ⵠᐃΔΔᐃᐃⲆᐃΔ: "img/logo.png",
    ⲆⵠΔⵠⵠⲆⵠ: "img/mapday.png",
    ΔᐃᐃᐃΔΔⲆ: "img/mapnight.png",
    ΔⵠᐃⵠⲆΔΔᐃⲆ: "img/bigzday.png",
    ΔⵠⲆⵠΔⲆΔⵠⵠ: "img/bigznight.png",
    ⲆⲆΔᐃⵠⵠⲆ: "img/bigday-river1.png",
    ⵠΔᐃⵠⵠᐃⲆⵠⵠ: "img/bigday-lake.png",
    ⵠᐃⵠΔⵠΔΔ: "img/bigday-berry.png",
    ⵠΔᐃΔⲆⲆⲆ: "img/bigday-stone1.png",
    ⲆᐃⵠⵠⵠⲆΔ: "img/bigday-stone2.png",
    ᐃᐃᐃΔΔⵠⵠ: "img/bigday-gold1.png",
    ΔⲆⲆⲆⵠΔΔ: "img/bigday-gold2.png",
    ⵠᐃᐃΔⵠⵠⵠ: "img/bigday-emerald1.png",
    ⲆΔⲆⲆⲆΔⵠ: "img/bigday-emerald2.png",
    ᐃⲆΔⲆⲆΔⲆ: "img/bigday-amethyst.png",
    ⲆⵠᐃᐃΔΔΔ: "img/bigday-bear.png",
    ΔΔⵠᐃΔⵠΔ: "img/bigday-cave.png",
    ⵠᐃⲆⲆΔᐃΔ: "img/bigday-diamond.png",
    ᐃᐃⵠᐃΔⵠᐃ: "img/bigday-island.png",
    ΔⵠⵠᐃⲆΔΔ: "img/bigday-reidite.png",
    ⵠᐃΔⲆᐃᐃⵠ: "img/bigday-spider.png",
    ⲆᐃᐃⵠⲆᐃΔ: "img/bigday-wolf.png",
    ⲆΔΔⲆΔΔΔ: "img/bigday-fir-tree.png",
    ⲆⲆⲆΔⲆΔᐃ: "img/bigday-fox.png",
    ᐃᐃΔⵠᐃᐃᐃ: "img/bigday-kraken.png",
    ΔⲆᐃⵠⵠᐃⵠ: "img/bigday-piranha.png",
    ⵠΔᐃⲆΔΔᐃ: "img/bigday-cactus.png",
    ᐃᐃΔᐃΔᐃⵠ: "img/bigday-magma.png",
    ᐃⲆⲆΔⲆⵠⵠ: "img/bigday-river1.png",
    ⲆᐃΔᐃⵠᐃΔΔΔ: "img/bignight-lake.png",
    ᐃⲆⵠⵠᐃⲆᐃⵠⵠ: "img/bignight-berry.png",
    ⵠΔⵠᐃᐃⲆΔ: "img/bignight-stone1.png",
    ΔᐃᐃⲆⲆⵠΔ: "img/bignight-stone2.png",
    ⵠΔΔⵠⵠᐃᐃ: "img/bignight-gold1.png",
    ⲆᐃΔⵠⵠΔⵠ: "img/bignight-gold2.png",
    ⵠᐃⲆⲆⵠᐃⲆ: "img/bignight-emerald1.png",
    ΔᐃⲆⵠΔΔᐃ: "img/bignight-emerald2.png",
    ΔΔⲆⵠᐃᐃⲆ: "img/bignight-amethyst.png",
    ⲆⵠᐃⲆⲆⵠⵠ: "img/bignight-bear.png",
    ΔⲆᐃⲆᐃΔᐃ: "img/bignight-cave.png",
    ⲆⲆⲆᐃᐃⲆⵠ: "img/bignight-diamond.png",
    ⲆⵠⲆⲆⲆⵠⲆ: "img/bignight-island.png",
    ⲆⵠⵠⲆᐃⲆⵠ: "img/bignight-reidite.png",
    ⲆⵠΔΔΔΔΔ: "img/bignight-spider.png",
    ⲆΔⲆⲆⵠⲆⲆ: "img/bignight-wolf.png",
    ᐃⲆᐃΔᐃⵠᐃ: "img/bignight-fir-tree.png",
    ⲆᐃᐃⲆⲆΔΔ: "img/bignight-fox.png",
    ΔΔᐃᐃⲆⵠⵠ: "img/bignight-kraken.png",
    ⵠⲆⵠᐃⵠⲆⲆ: "img/bignight-piranha.png",
    ᐃⵠⲆΔⵠⵠⵠ: "img/bignight-cactus.png",
    ⵠᐃⵠⲆᐃᐃⲆ: "img/bignight-magma.png",
    ᐃΔᐃᐃⵠⵠᐃ: "img/bigday-desert.png",
    ᐃΔⲆⲆⵠⲆᐃ: "img/bigday-winter.png",
    ⲆⲆΔΔΔⲆᐃ: "img/bigday-lava.png",
    ⵠᐃⵠⲆⲆⵠⵠ: "img/bigday-forest.png",
    ⵠⵠⲆⲆΔΔⵠ: "img/bignight-desert.png",
    ⲆⵠⲆᐃⵠⲆⵠ: "img/bignight-winter.png",
    ⵠᐃⵠⲆΔΔΔ: "img/bignight-lava.png",
    ΔⵠⵠⲆᐃΔⲆ: "img/bignight-forest.png",
    ⵠΔΔᐃⲆⲆⲆ: "img/day-river-wave.png",
    ΔⵠᐃⵠⲆⵠΔ: "img/night-river-wave.png",
    ⵠⵠⵠᐃᐃⵠⲆ: "img/day-fog0.png",
    ⵠᐃⵠᐃᐃⵠⵠ: "img/day-fog1.png",
    ⲆᐃᐃⲆΔᐃΔ: "img/day-fog2.png",
    ⲆⲆᐃⲆΔᐃᐃ: "img/night-fog0.png",
    ΔᐃⲆⲆΔᐃⵠ: "img/night-fog1.png",
    ᐃΔΔⵠΔΔⲆ: "img/night-fog2.png",
    ⵠΔⵠⲆΔΔⲆ: "img/day-fogdesert0.png",
    ⲆⵠᐃⵠᐃⵠΔ: "img/day-fogdesert1.png",
    ᐃⵠᐃⵠΔᐃᐃ: "img/day-fogdesert2.png",
    ⵠⵠΔⲆᐃΔᐃ: "img/night-fogdesert0.png",
    ⵠⲆⲆΔᐃΔⲆ: "img/night-fogdesert1.png",
    ᐃⵠᐃΔΔᐃΔ: "img/night-fogdesert2.png",
    ⲆⵠⵠⲆΔᐃᐃ: "img/day-cross-server.png",
    ⵠΔΔⲆⲆⲆΔ: "img/day-here-server.png",
    ⲆⲆⵠⵠⲆⵠᐃ: "img/day-finish-server.png",
    ᐃᐃᐃΔⵠᐃⵠ: "img/day-item-server.png",
    ⵠⲆⲆⲆΔⲆⲆ: "img/day-skull-server.png",
    ⲆⵠⲆΔⲆⵠΔ: "img/night-cross-server.png",
    ⲆⲆⵠᐃⲆⲆⲆ: "img/night-here-server.png",
    ⲆⵠⲆⲆⵠⵠⲆ: "img/night-finish-server.png",
    ΔΔⵠⵠⵠΔⲆ: "img/night-item-server.png",
    ᐃⲆᐃⲆΔⲆᐃ: "img/night-skull-server.png",
    ᐃΔΔⵠᐃΔΔ: "img/day-reidite0.png",
    ⲆⵠΔⵠⲆᐃⲆ: "img/night-reidite0.png",
    ⵠⵠⲆⲆΔⵠΔ: "img/day-reidite1.png",
    ΔᐃⵠᐃⵠⲆΔ: "img/night-reidite1.png",
    ⲆⲆΔⵠⲆΔⵠ: "img/day-reidite2.png",
    ⲆᐃᐃᐃⲆⲆΔ: "img/night-reidite2.png",
    ΔᐃⲆᐃⲆⲆⵠ: "img/day-lava1.png",
    ⲆᐃⵠⵠⲆⵠⲆ: "img/night-lava1.png",
    ΔⵠⵠΔᐃⲆⲆ: "img/day-lava2.png",
    ⵠΔᐃᐃⵠᐃᐃ: "img/night-lava2.png",
    ᐃᐃΔᐃᐃᐃΔ: "img/day-lava3.png",
    ΔⲆᐃⲆⲆⲆᐃ: "img/night-lava3.png",
    ΔⵠⵠΔⲆⲆΔ: "img/day-lava4.png",
    ⲆΔΔⲆⲆᐃᐃ: "img/night-lava4.png",
    ᐃᐃⵠⵠⵠᐃⲆ: "img/day-lava5.png",
    ⲆⵠΔᐃⵠΔⵠ: "img/night-lava5.png",
    ΔⵠΔΔᐃᐃⵠ: "img/day-lava6.png",
    ΔΔᐃᐃΔΔᐃ: "img/night-lava6.png",
    ΔⵠᐃⲆᐃΔⵠ: "img/day-lava-ground1.png",
    ᐃᐃⵠⵠⲆᐃⵠ: "img/night-lava-ground1.png",
    ⲆⵠᐃⲆΔΔⲆ: "img/day-lava-ground2.png",
    ᐃΔⵠⲆⲆⲆⵠ: "img/night-lava-ground2.png",
    ᐃⵠⲆᐃⲆᐃⵠ: "img/day-lava-ground3.png",
    ⵠᐃⵠΔⵠⲆᐃ: "img/night-lava-ground3.png",
    ⵠΔΔⵠⲆΔⵠ: "img/day-lava-ground4.png",
    ᐃᐃⵠᐃⵠⵠᐃ: "img/night-lava-ground4.png",
    ⲆᐃᐃᐃΔᐃΔ: "img/day-lava-ground5.png",
    ⲆⵠᐃⲆᐃⲆⲆ: "img/night-lava-ground5.png",
    ΔⵠΔⵠᐃⲆᐃ: "img/day-lava-ground6.png",
    ᐃⵠᐃⵠΔⲆⵠ: "img/night-lava-ground6.png",
    ⵠⲆⵠⵠᐃᐃⲆ: "img/day-fire-mob.png",
    ᐃΔⲆᐃⵠᐃᐃ: "img/night-fire-mob.png",
    ΔⵠΔⲆΔⵠᐃ: "img/hurt-fire-mob.png",
    ⲆⵠⲆᐃΔⵠᐃ: "img/day-diamond-protection.png",
    ᐃᐃΔΔⲆⲆⵠ: "img/night-diamond-protection.png",
    ΔⵠᐃΔⵠᐃⵠ: "img/day-hand-diamond-protection.png",
    ⵠⲆⵠᐃⲆⵠᐃ: "img/night-hand-diamond-protection.png",
    ⲆⲆΔᐃΔΔᐃ: "img/inv-diamond-protection-out.png",
    ΔⲆⵠᐃⵠⵠΔ: "img/inv-diamond-protection-in.png",
    ⵠⵠⲆⵠᐃⲆΔ: "img/inv-diamond-protection-click.png",
    ᐃⲆⲆᐃⲆⲆΔ: "img/day-amethyst-protection.png",
    ΔⵠⲆⲆᐃⲆᐃ: "img/night-amethyst-protection.png",
    ⵠᐃΔΔⵠΔᐃⵠΔ: "img/day-hand-amethyst-protection.png",
    ⲆΔⵠᐃⲆᐃΔᐃΔ: "img/night-hand-amethyst-protection.png",
    ⵠⲆⵠⲆΔΔᐃ: "img/inv-amethyst-protection-out.png",
    ⲆⲆΔⵠⲆᐃⲆ: "img/inv-amethyst-protection-in.png",
    ᐃⲆᐃΔⲆΔᐃ: "img/inv-amethyst-protection-click.png",
    ᐃⲆΔⵠᐃΔⵠ: "img/day-reidite-sword.png",
    ᐃᐃⲆⵠⵠΔΔ: "img/night-reidite-sword.png",
    ΔⵠⲆⲆⲆΔⵠ: "img/inv-reidite-sword-out.png",
    ΔⲆⵠⲆᐃⵠᐃ: "img/inv-reidite-sword-in.png",
    ᐃΔΔⵠⲆⲆⵠ: "img/inv-reidite-sword-click.png",
    ⲆⵠⲆⲆⵠΔⵠ: "img/inv-reidite-out.png",
    ᐃᐃΔᐃᐃᐃⲆ: "img/inv-reidite-in.png",
    ΔᐃᐃⲆᐃⲆⲆ: "img/inv-reidite-click.png",
    ΔⲆΔⵠΔᐃⵠ: "img/inv-flame-out.png",
    ᐃΔⲆᐃΔⲆᐃ: "img/inv-flame-in.png",
    ⲆⵠᐃⵠΔᐃⵠ: "img/inv-flame-click.png",
    ⵠᐃᐃΔΔᐃⵠ: "img/day-magma-buble0.png",
    ᐃⵠΔᐃⵠⵠⵠ: "img/night-magma-buble0.png",
    ΔⲆΔΔᐃΔⲆ: "img/day-magma-buble1.png",
    ⵠΔΔⲆᐃⵠⵠ: "img/night-magma-buble1.png",
    ΔⵠⲆⲆⵠⲆⲆ: "img/day-magma-buble2.png",
    ΔΔᐃⲆⵠᐃΔ: "img/night-magma-buble2.png",
    ⵠⲆᐃⲆⵠⵠⵠ: "img/day-lava-dragon.png",
    ΔⵠⵠΔⲆᐃᐃ: "img/night-lava-dragon.png",
    ΔⵠⲆⵠⲆΔᐃⲆΔ: "img/day-fire-dragon.png",
    ᐃᐃⵠⲆⲆⲆᐃΔΔ: "img/night-fire-dragon.png",
    ⵠⵠᐃⲆᐃⵠΔ: "img/hurt-lava-dragon.png",
    ΔᐃΔᐃΔⲆΔ: "img/day-lava-wing-left.png",
    ⲆᐃᐃⵠᐃⲆΔ: "img/night-lava-wing-left.png",
    ⵠⲆᐃΔΔⵠΔ: "img/day-lava-wing-right.png",
    ⲆᐃⲆⲆΔΔᐃ: "img/night-lava-wing-right.png",
    ΔⵠΔᐃΔΔᐃ: "img/hurt-lava-wing-left.png",
    ⲆΔᐃⲆⵠⲆᐃ: "img/hurt-lava-wing-right.png",
    ᐃⲆᐃᐃⵠᐃⵠ: "img/day-reidite-spear.png",
    ᐃⲆⵠⲆⵠⲆΔ: "img/night-reidite-spear.png",
    ⲆᐃΔᐃᐃⵠᐃ: "img/inv-reidite-spear-out.png",
    ⲆΔⵠⲆⵠΔᐃ: "img/inv-reidite-spear-in.png",
    ᐃⵠⲆᐃᐃⲆⵠ: "img/inv-reidite-spear-click.png",
    ⲆⵠⵠⵠᐃⲆΔ: "img/day-reidite-helmet.png",
    ⲆΔᐃᐃᐃΔⲆ: "img/night-reidite-helmet.png",
    ΔⵠᐃᐃⵠⵠⲆ: "img/inv-reidite-helmet-out.png",
    ΔΔᐃⲆΔⵠᐃ: "img/inv-reidite-helmet-in.png",
    ⵠΔΔᐃⲆᐃΔ: "img/inv-reidite-helmet-click.png",
    ΔᐃᐃⵠⲆⵠⲆ: "img/day-hand-reidite-protection.png",
    ᐃᐃΔΔⲆΔⲆ: "img/night-hand-reidite-protection.png",
    ⵠᐃⵠΔᐃⵠᐃ: "img/day-reidite-protection.png",
    ⵠⲆΔᐃⲆⲆⲆ: "img/night-reidite-protection.png",
    ⵠⲆΔΔᐃⵠⲆ: "img/inv-reidite-protection-out.png",
    ⵠΔⲆⵠⲆᐃⵠ: "img/inv-reidite-protection-in.png",
    ᐃᐃΔᐃⲆΔᐃ: "img/inv-reidite-protection-click.png",
    ᐃᐃᐃᐃⲆⲆⵠ: "img/day-lava-dragon-sword.png",
    ⲆⲆⲆᐃⲆᐃⲆ: "img/night-lava-dragon-sword.png",
    ⲆⵠⵠⵠⲆⵠⵠ: "img/inv-lava-dragon-sword-out.png",
    ᐃⲆᐃᐃᐃΔΔ: "img/inv-lava-dragon-sword-in.png",
    ⵠⵠΔᐃᐃΔⵠ: "img/inv-lava-dragon-sword-click.png",
    ⵠΔⲆⲆⲆΔᐃ: "img/day-lava-spear.png",
    ΔᐃΔⵠⵠⲆΔ: "img/night-lava-spear.png",
    ⵠΔⵠⲆⲆⲆΔ: "img/inv-lava-spear-out.png",
    ᐃΔΔᐃⲆⵠΔ: "img/inv-lava-spear-in.png",
    ⵠᐃⲆⲆⲆⵠⵠ: "img/inv-lava-spear-click.png",
    ᐃⲆⲆⵠᐃΔⵠ: "img/day-lava-helmet.png",
    ΔΔⵠΔᐃⲆᐃ: "img/night-lava-helmet.png",
    ⲆᐃΔᐃᐃⲆΔ: "img/inv-lava-helmet-out.png",
    ΔΔΔΔᐃⵠⵠ: "img/inv-lava-helmet-in.png",
    ⲆᐃⵠⵠⲆⲆⲆ: "img/inv-lava-helmet-click.png",
    ΔᐃⵠⵠΔᐃⲆ: "img/day-witch-hat.png",
    ⲆⲆᐃⲆⲆΔⲆ: "img/night-witch-hat.png",
    ᐃⵠᐃΔⵠΔᐃ: "img/inv-witch-hat-out.png",
    ⲆΔᐃᐃⲆΔᐃ: "img/inv-witch-hat-in.png",
    ⲆΔΔⲆⵠⲆᐃ: "img/inv-witch-hat-click.png",
    ᐃⲆⵠᐃᐃᐃⵠ: "img/day-nimbus2000.png",
    ⲆᐃⲆᐃΔΔᐃ: "img/night-nimbus2000.png",
    ΔᐃᐃΔΔⵠᐃ: "img/inv-nimbus2000-out.png",
    ᐃᐃΔᐃⵠⵠⲆ: "img/inv-nimbus2000-in.png",
    ᐃⵠΔΔᐃᐃΔ: "img/inv-nimbus2000-click.png",
    ⲆᐃⵠᐃⵠⲆΔ: "img/day-accessory1-pacques.png",
    ᐃⲆᐃⵠⲆΔᐃ: "img/night-accessory1-pacques.png",
    ⲆᐃΔⵠΔⲆⵠ: "img/day-accessory2-pacques.png",
    ᐃΔᐃᐃᐃΔⲆ: "img/night-accessory2-pacques.png",
    ⲆⵠΔᐃⲆⵠᐃ: "img/day-accessory3-pacques.png",
    ᐃⵠΔⵠⲆⲆⵠ: "img/night-accessory3-pacques.png",
    ΔⵠⵠᐃⲆⵠᐃ: "img/day-accessory5-pacques.png",
    ᐃᐃⲆΔⵠⲆΔ: "img/night-accessory5-pacques.png",
    ᐃΔⲆⲆⲆⲆᐃ: "img/day-accessory6-pacques.png",
    ⵠΔΔⵠⲆⲆᐃ: "img/night-accessory6-pacques.png",
    ⵠⵠᐃⲆⵠᐃΔ: "img/day-accessory7-pacques.png",
    ⵠⲆᐃᐃΔⵠⲆ: "img/night-accessory7-pacques.png",
    ⵠⵠΔⵠⲆⵠᐃ: "img/day-accessory8-pacques.png",
    ΔᐃᐃⵠΔⲆⵠ: "img/night-accessory8-pacques.png",
    ⲆⵠᐃᐃⲆΔΔ: "img/day-bag-pacques.png",
    ⲆᐃⵠⵠⲆⲆⵠ: "img/night-bag-pacques.png",
    ΔⵠΔΔⵠΔⵠ: "img/day-carrot.png",
    ᐃⲆⲆⲆⲆΔᐃ: "img/night-carrot.png",
    ᐃⲆΔⵠΔᐃΔ: "img/day-carrot-dried.png",
    ⲆᐃΔⲆⲆᐃΔ: "img/night-carrot-dried.png",
    ΔᐃΔⲆᐃᐃᐃ: "img/day-tomato-herb.png",
    ᐃⵠⵠΔⲆᐃΔ: "img/night-tomato-herb.png",
    ΔⲆΔⵠⵠᐃΔ: "img/day-tomato-herb-dried.png",
    ⲆᐃΔⵠⵠᐃΔ: "img/night-tomato-herb-dried.png",
    ᐃᐃⵠⲆⵠⵠᐃ: "img/day-tomato.png",
    ⵠᐃⲆΔⲆΔⵠ: "img/night-tomato.png",
    ⲆⵠΔⲆⲆⵠᐃ: "img/inv-carrot-out.png",
    ΔΔⲆΔΔΔⲆ: "img/inv-carrot-in.png",
    ΔᐃΔᐃᐃⲆᐃ: "img/inv-carrot-click.png",
    ΔⵠᐃᐃⲆΔΔ: "img/inv-tomato-out.png",
    ⲆⵠᐃᐃⲆⵠⵠ: "img/inv-tomato-in.png",
    ⵠⲆⲆΔⵠᐃⵠ: "img/inv-tomato-click.png",
    ⲆⲆⲆΔΔⵠⵠ: "img/day-player0.png",
    ⵠⲆᐃᐃΔᐃΔ: "img/night-player0.png",
    ᐃⵠΔΔΔᐃⲆ: "img/day-player1.png",
    ΔⵠⲆⵠⲆᐃᐃ: "img/night-player1.png",
    ᐃⲆⲆᐃᐃΔᐃ: "img/day-player2.png",
    ᐃᐃⲆⲆⲆΔᐃ: "img/night-player22.png",
    ⲆΔⵠᐃᐃⵠᐃ: "img/day-player3.png",
    ⲆⲆⲆᐃⲆᐃΔ: "img/night-player33.png",
    ᐃᐃᐃᐃᐃⲆⵠ: "img/day-player4.png",
    ᐃⵠᐃᐃΔΔⵠ: "img/night-player4.png",
    ΔΔΔⵠⵠⲆⵠ: "img/day-player5.png",
    ⵠⵠΔΔⵠⲆΔ: "img/night-player5.png",
    ΔⵠⲆᐃΔⵠΔ: "img/day-player6.png",
    ⵠΔⲆⲆΔΔᐃ: "img/night-player6.png",
    ⵠⵠᐃΔⲆΔⲆ: "img/day-player7.png",
    ⲆᐃΔⲆⲆⲆⵠ: "img/night-player7.png",
    ΔⲆΔᐃᐃⲆⵠ: "img/day-player8.png",
    ⲆⲆΔⵠⵠΔΔ: "img/night-player8.png",
    ⲆᐃᐃⵠᐃⲆᐃ: "img/day-player9.png",
    ⵠΔΔⲆⲆⲆⵠ: "img/night-player9.png",
    ⵠⲆⵠΔΔⵠⵠ: "img/day-player10.png",
    ΔⵠΔᐃΔᐃⵠ: "img/night-player10.png",
    ΔⵠᐃᐃΔⲆⲆ: "img/day-player11.png",
    ΔⲆᐃᐃⲆⲆⵠ: "img/night-player11.png",
    ᐃᐃⲆⲆᐃΔⵠ: "img/day-player12.png",
    ΔⵠⵠⲆⲆΔΔ: "img/night-player12.png",
    ⲆⵠⵠⲆΔᐃΔ: "img/day-player13.png",
    ᐃⲆⲆΔⲆⲆᐃ: "img/night-player13.png",
    ⵠΔⵠⲆⵠΔᐃ: "img/day-player14.png",
    ⲆΔΔΔᐃΔᐃ: "img/night-player14.png",
    ᐃⵠᐃΔⵠΔⵠ: "img/day-player15.png",
    ⵠⵠⲆΔⲆⲆⵠ: "img/night-player15.png",
    ⲆᐃᐃᐃⵠⲆᐃ: "img/day-player16.png",
    ⵠⵠⵠⲆΔΔᐃ: "img/night-player16.png",
    ΔᐃᐃⵠΔᐃᐃ: "img/day-player17.png",
    ⵠᐃⵠᐃᐃⲆΔ: "img/night-player17.png",
    ⲆΔᐃΔΔᐃΔ: "img/day-player18.png",
    ᐃⵠᐃᐃⲆⲆⵠ: "img/night-player18.png",
    ΔⵠⲆΔᐃΔΔ: "img/day-player19.png",
    ⵠΔΔⵠΔⲆⵠ: "img/night-player19.png",
    ᐃⵠⵠΔⵠΔⵠ: "img/day-hand-player0.png",
    ⲆⲆⲆᐃⵠⲆⲆ: "img/night-hand-player0.png",
    ᐃΔⲆΔᐃΔⵠ: "img/day-hand-player1.png",
    ᐃⵠⵠΔⵠᐃΔ: "img/night-hand-player1.png",
    ⲆΔᐃⵠⲆᐃⵠ: "img/day-hand-player2.png",
    ΔⵠΔⲆᐃⲆⵠ: "img/night-hand-player22.png",
    ΔⵠⵠᐃⵠⲆⵠ: "img/day-hand-player3.png",
    ⵠᐃᐃᐃΔᐃⲆ: "img/night-hand-player33.png",
    ⵠⵠⵠᐃⵠⲆⵠ: "img/day-hand-player4.png",
    ⲆΔⵠⵠΔΔᐃ: "img/night-hand-player4.png",
    ΔⲆΔᐃⵠⲆΔ: "img/day-hand-player5.png",
    ᐃΔⵠᐃⲆΔⲆ: "img/night-hand-player5.png",
    ᐃᐃᐃᐃⵠⲆⵠ: "img/day-hand-player6.png",
    ⵠᐃᐃᐃⲆⵠⲆ: "img/night-hand-player6.png",
    ΔΔⵠⵠᐃᐃΔ: "img/day-hand-player7.png",
    ΔΔᐃⵠⵠΔΔ: "img/night-hand-player7.png",
    ⲆⵠᐃⵠⵠⲆΔ: "img/day-hand-player8.png",
    ⵠⲆⲆᐃⵠⵠᐃ: "img/night-hand-player8.png",
    ᐃⵠⲆⲆᐃΔⵠ: "img/day-hand-player9.png",
    ᐃⲆⵠⲆⲆⵠᐃ: "img/night-hand-player9.png",
    ⵠⲆⵠΔⵠⵠⲆ: "img/day-hand-player10.png",
    ᐃⲆᐃⲆᐃΔᐃ: "img/night-hand-player10.png",
    ⵠΔⲆᐃᐃⵠⲆ: "img/day-hand-player11.png",
    ⵠᐃᐃᐃⲆⵠⵠ: "img/night-hand-player11.png",
    ⲆᐃᐃΔᐃⵠΔ: "img/day-hand-player12.png",
    ⵠⲆⲆΔᐃⵠⲆ: "img/night-hand-player12.png",
    ⲆᐃΔⵠΔⲆΔ: "img/day-hand-player13.png",
    ⵠΔΔᐃᐃⲆⲆ: "img/night-hand-player13.png",
    ΔᐃⵠⵠⵠⲆΔ: "img/day-hand-player14.png",
    ⲆⲆⵠᐃⵠᐃⵠ: "img/night-hand-player14.png",
    ΔΔΔⲆΔⵠⵠ: "img/day-hand-player15.png",
    ⲆΔⲆᐃⵠΔⵠ: "img/night-hand-player15.png",
    ⲆᐃⵠᐃΔⲆΔ: "img/day-hand-player16.png",
    ᐃᐃᐃⲆᐃⵠⵠ: "img/night-hand-player16.png",
    ᐃⲆⲆᐃᐃᐃⲆ: "img/day-hand-player17.png",
    ⲆⵠⵠⵠⵠⵠⲆ: "img/night-hand-player17.png",
    ⵠⲆⵠⲆⵠΔⵠ: "img/day-hand-player18.png",
    ⵠᐃᐃᐃⵠᐃⵠ: "img/night-hand-player18.png",
    ΔΔᐃⵠᐃⲆⵠ: "img/day-hand-player19.png",
    ⲆᐃΔΔΔᐃΔ: "img/night-hand-player19.png",
    ⵠⵠⵠᐃΔⲆᐃ: "img/day-accessory4.png",
    ⲆⵠᐃᐃⲆΔᐃ: "img/night-accessory4.png",
    ᐃⵠⵠᐃⲆⵠᐃ: "img/day-accessory9.png",
    ⵠΔⵠⲆⵠⵠⵠ: "img/night-accessory9.png",
    ⵠᐃΔΔⵠⲆᐃ: "img/day-accessory10.png",
    ⵠᐃⲆⲆⲆⲆⲆ: "img/night-accessory10.png",
    ⲆⲆΔᐃⲆⵠΔ: "img/day-accessory11.png",
    ⲆⲆᐃᐃⵠΔⵠ: "img/night-accessory11.png",
    ᐃⵠⲆΔΔⲆᐃ: "img/day-accessory12.png",
    ⲆᐃΔΔΔᐃⲆ: "img/night-accessory12.png",
    ᐃΔⵠⲆᐃᐃΔ: "img/day-bag.png",
    ⲆⲆᐃⲆᐃⲆΔ: "img/night-bag.png",
    ⲆᐃⵠᐃᐃⵠⲆ: "img/inv-bag-out.png",
    ᐃᐃΔΔⲆⲆΔ: "img/inv-bag-in.png",
    ⲆᐃⵠⵠⲆΔΔ: "img/inv-bag-click.png",
    ΔΔΔᐃⲆⵠⲆ: "img/day-pitchfork.png",
    ⵠᐃᐃᐃᐃⲆⵠ: "img/night-pitchfork.png",
    ⵠⲆⵠΔΔᐃᐃ: "img/inv-pitchfork-out.png",
    ᐃⵠⲆᐃΔΔⲆ: "img/inv-pitchfork-in.png",
    ⲆΔⲆⵠⲆᐃΔ: "img/inv-pitchfork-click.png",
    ΔΔⲆⲆⲆΔⲆ: "img/inv-wood-spike-door-out.png",
    ΔⵠᐃΔᐃⲆⲆ: "img/inv-wood-spike-door-in.png",
    ᐃᐃᐃⵠⵠⲆΔ: "img/inv-wood-spike-door-click.png",
    ⵠⲆᐃⲆⵠΔⲆ: "img/inv-stone-spike-door-out.png",
    ⵠᐃⵠⵠⵠⲆⲆ: "img/inv-stone-spike-door-in.png",
    ⵠⲆΔⲆᐃΔⲆ: "img/inv-stone-spike-door-click.png",
    ⵠΔⵠⵠΔᐃᐃ: "img/inv-gold-spike-door-out.png",
    ⵠᐃΔΔᐃΔΔ: "img/inv-gold-spike-door-in.png",
    ᐃΔΔⵠΔⵠⲆ: "img/inv-gold-spike-door-click.png",
    ⲆᐃΔⲆΔⵠⲆ: "img/inv-diamond-spike-door-out.png",
    ⲆΔᐃΔⵠΔⵠ: "img/inv-diamond-spike-door-in.png",
    ⲆⲆⵠᐃᐃΔⲆ: "img/inv-diamond-spike-door-click.png",
    ⵠⲆᐃΔᐃⲆⵠ: "img/inv-amethyst-spike-door-out.png",
    ⵠᐃΔⵠᐃᐃⲆ: "img/inv-amethyst-spike-door-in.png",
    ᐃΔᐃᐃⵠⵠⲆ: "img/inv-amethyst-spike-door-click.png",
    ⵠᐃⲆᐃᐃᐃⵠ: "img/day-wood-spike-door.png",
    ᐃⲆⵠⵠᐃⲆΔ: "img/night-wood-spike-door.png",
    ΔⵠⵠⵠⲆΔⲆ: "img/day-stone-spike-door.png",
    ⵠΔᐃΔᐃᐃⲆ: "img/night-stone-spike-door.png",
    ⵠⵠᐃᐃⵠᐃᐃ: "img/day-gold-spike-door.png",
    ᐃⵠⲆΔⵠᐃⲆ: "img/night-gold-spike-door.png",
    ᐃᐃⵠⲆⲆᐃΔ: "img/day-diamond-spike-door.png",
    ⵠΔᐃⵠᐃⲆⲆ: "img/night-diamond-spike-door.png",
    ⲆᐃⵠⵠΔⵠⲆ: "img/day-amethyst-spike-door.png",
    ᐃⲆᐃⵠΔⲆⲆ: "img/night-amethyst-spike-door.png",
    ᐃΔᐃⵠⲆΔᐃ: "img/inv-reidite-spike-door-out.png",
    ⵠⵠⲆⲆᐃⵠΔ: "img/inv-reidite-spike-door-in.png",
    ᐃⲆΔⲆⵠⲆΔ: "img/inv-reidite-spike-door-click.png",
    ᐃΔΔⵠⲆⵠᐃ: "img/inv-reidite-door-out.png",
    ⵠⲆᐃΔⲆⲆⵠ: "img/inv-reidite-door-in.png",
    ⲆⵠΔⵠⲆΔΔ: "img/inv-reidite-door-click.png",
    ΔΔᐃΔᐃᐃᐃ: "img/inv-reidite-spike-out.png",
    ΔⲆᐃⲆⲆⵠⵠ: "img/inv-reidite-spike-in.png",
    ΔᐃⲆΔⲆᐃΔ: "img/inv-reidite-spike-click.png",
    ⲆⵠⲆⵠⲆᐃⲆ: "img/inv-reidite-wall-out.png",
    ⲆⵠᐃⵠⵠⲆⲆ: "img/inv-reidite-wall-in.png",
    ⵠᐃⵠⲆᐃⵠⵠ: "img/inv-reidite-wall-click.png",
    Ⲇᐃⵠᐃⵠⵠⵠ: "img/day-reidite-wall.png",
    ⲆⲆⵠⵠⲆⵠⵠ: "img/night-reidite-wall.png",
    ⵠΔᐃⲆⵠⵠΔ: "img/day-reidite-door.png",
    ᐃᐃΔⲆⲆΔΔ: "img/night-reidite-door.png",
    ᐃⲆᐃⲆΔΔⵠ: "img/day-reidite-spike.png",
    Ⲇᐃⵠⵠⵠᐃᐃ: "img/night-reidite-spike.png",
    ⲆⲆᐃⵠΔⵠⲆ: "img/day-reidite-spike-door.png",
    ᐃΔⲆΔⲆⵠᐃ: "img/night-reidite-spike-door.png",
    ⲆⲆⲆᐃⵠΔⵠ: "img/inv-reidite-pickaxe-out.png",
    ⲆΔΔΔᐃⵠⵠ: "img/inv-reidite-pickaxe-in.png",
    ᐃᐃⲆΔⵠΔⲆ: "img/inv-reidite-pickaxe-click.png",
    ⲆⵠᐃᐃᐃⵠⲆ: "img/day-reidite-pickaxe.png",
    ΔⲆⲆⲆⵠᐃⵠ: "img/night-reidite-pickaxe.png",
    ΔΔΔⲆᐃⲆⲆ: "img/inv-reidite-hammer-out.png",
    ⲆΔⵠΔⲆᐃᐃ: "img/inv-reidite-hammer-in.png",
    ⲆΔΔⵠⲆⲆⵠ: "img/inv-reidite-hammer-click.png",
    ᐃΔⲆⵠⲆⵠΔ: "img/day-reidite-hammer.png",
    ⲆⲆⲆⵠΔⲆΔ: "img/night-reidite-hammer.png",
    ⲆΔΔⵠⵠΔΔ: "img/day-watermelon1.png",
    ⲆⵠⲆⲆⵠᐃⲆ: "img/night-watermelon1.png",
    ⲆᐃᐃΔⵠΔΔ: "img/day-watermelon-dried1.png",
    ⵠⲆΔⵠΔΔᐃ: "img/night-watermelon-dried1.png",
    ⵠⵠⲆⵠΔᐃᐃ: "img/inv-watermelon-out.png",
    ᐃΔⵠⲆⵠⵠᐃ: "img/inv-watermelon-in.png",
    ⲆΔⵠⲆⵠᐃⵠ: "img/inv-watermelon-click.png",
    ⵠⵠⲆᐃⵠΔΔ: "img/day-boat.png",
    ΔΔⵠⲆⲆᐃⲆ: "img/night-boat.png",
    ⲆΔⲆⵠᐃΔⲆ: "img/day-boat-wave.png",
    ᐃⵠΔΔᐃⵠⲆ: "img/night-boat-wave.png",
    ⵠΔⵠΔⲆⲆⲆ: "img/inv-boat-out.png",
    ΔⵠᐃΔⵠⲆᐃ: "img/inv-boat-in.png",
    ⵠᐃⲆΔΔⲆⲆ: "img/inv-boat-click.png",
    ⵠΔⵠᐃΔᐃⵠ: "img/day-plane.png",
    ᐃⲆⲆⲆⵠⲆⵠ: "img/night-plane.png",
    ⵠⵠⵠΔⲆⲆⲆ: "img/inv-plane-out.png",
    ᐃᐃⲆΔⲆΔΔ: "img/inv-plane-in.png",
    ⲆⲆⵠΔⲆΔⲆ: "img/inv-plane-click.png",
    ᐃⵠΔᐃᐃΔⵠ: "img/day-sled.png",
    ΔᐃⲆⵠⵠᐃⵠ: "img/night-sled.png",
    ᐃΔΔⵠⲆᐃⵠ: "img/day-sled-wave.png",
    ΔᐃΔᐃⲆⲆΔ: "img/night-sled-wave.png",
    Δᐃᐃᐃⵠᐃⵠ: "img/inv-sled-out.png",
    ΔᐃᐃᐃΔᐃΔ: "img/inv-sled-in.png",
    ᐃⵠⲆᐃⵠⲆⲆ: "img/inv-sled-click.png",
    ⵠΔᐃⲆⲆΔᐃ: "img/day-pirate-hat.png",
    ⲆⲆⵠᐃⵠⵠⲆ: "img/night-pirate-hat.png",
    ⵠⵠⲆΔⲆΔⲆ: "img/inv-pirate-hat-out.png",
    ᐃΔⲆᐃⲆΔᐃ: "img/inv-pirate-hat-in.png",
    ⲆⲆᐃⵠⵠⵠΔ: "img/inv-pirate-hat-click.png",
    ᐃⲆΔᐃⲆⵠⵠ: "img/day-penguin.png",
    ᐃⲆⵠⲆⲆⲆⵠ: "img/night-penguin.png",
    ⵠᐃⲆᐃⲆΔⲆ: "img/hurt-penguin.png",
    ᐃⲆⲆⲆΔ: "img/inv-penguin-feather-click.png",
    ᐃΔⵠⵠⵠ: "img/inv-hawk-feather-click.png",
    ⲆᐃⲆΔΔΔΔ: "img/day-boar1.png",
    ⵠⵠⲆΔⵠⲆΔ: "img/day-boar1-tamed.png",
    ᐃⲆᐃᐃⲆⵠⵠ: "img/day-boar1-angry.png",
    ⵠⲆⵠⵠΔᐃⵠ: "img/night-boar1.png",
    ᐃⵠΔΔᐃᐃⲆ: "img/night-boar1-tamed.png",
    ᐃᐃᐃᐃᐃⲆΔ: "img/night-boar1-angry.png",
    ΔⵠΔᐃΔⵠᐃ: "img/inv-mount-boar-out.png",
    ⲆᐃᐃΔΔⲆⵠ: "img/inv-mount-boar-in.png",
    ᐃⲆⲆᐃΔΔᐃ: "img/inv-mount-boar-click.png",
    ΔⲆΔΔⵠΔᐃ: "img/day-hurt-boar1.png",
    ΔᐃᐃⵠΔⵠⵠ: "img/boar1-step.png",
    ΔᐃⲆⲆᐃⲆⲆ: "img/day-saddle1.png",
    ΔᐃΔⲆΔⲆΔ: "img/night-saddle1.png",
    ⲆΔⵠᐃⵠⵠⵠ: "img/inv-saddle-out.png",
    ᐃᐃᐃᐃⲆΔⲆ: "img/inv-saddle-in.png",
    ⵠⲆⲆΔⲆⲆᐃ: "img/inv-saddle-click.png",
    ⵠⵠΔΔᐃᐃⲆ: "img/day-magic-wand0.png",
    ΔᐃΔⲆⵠⲆΔ: "img/night-magic-wand0.png",
    ΔΔᐃᐃⲆⵠΔ: "img/day-light-wand1.png",
    ⵠᐃⲆΔᐃᐃᐃ: "img/night-light-wand1.png",
    ΔᐃⵠᐃⵠᐃⲆ: "img/inv-magic-wand0-out.png",
    ΔⲆⲆᐃⲆΔᐃ: "img/inv-magic-wand0-in.png",
    ⵠᐃᐃⲆᐃᐃᐃ: "img/inv-magic-wand0-click.png",
    ⵠⲆΔⵠΔⲆⲆ: "img/day-magic-wand1.png",
    ⲆᐃⲆⲆⵠⲆⲆ: "img/night-magic-wand1.png",
    ΔΔⵠΔⵠⵠⵠ: "img/day-light-wand0.png",
    ⲆⵠⲆⵠⵠΔΔ: "img/night-light-wand0.png",
    ⲆᐃᐃᐃΔⵠⵠ: "img/inv-magic-wand1-out.png",
    ΔΔᐃᐃⵠⵠⲆ: "img/inv-magic-wand1-in.png",
    ⵠᐃⲆᐃΔⲆᐃ: "img/inv-magic-wand1-click.png",
    ᐃΔᐃΔᐃᐃⲆ: "img/day-firefly.png",
    ⵠⲆᐃⵠⲆᐃΔ: "img/night-firefly.png",
    ΔᐃⵠⲆⵠᐃⵠ: "img/hurt-firefly.png",
    ⵠⵠⵠΔΔⵠⵠ: "img/inv-firefly-out.png",
    ⵠⲆΔⵠⲆⵠⵠ: "img/inv-firefly-in.png",
    ΔⵠᐃⵠΔⵠⲆ: "img/inv-firefly-click.png",
    ᐃⲆΔⲆᐃⲆⲆ: "img/day-baby-dragon.png",
    ⲆⲆⲆᐃΔⵠΔ: "img/night-baby-dragon.png",
    ᐃᐃⵠⵠᐃⵠⲆ: "img/day-baby-dragon-angry.png",
    ⵠⲆⵠΔⲆᐃⵠ: "img/night-baby-dragon-angry.png",
    ⵠⵠⵠⵠᐃΔᐃ: "img/day-baby-dragon-tamed.png",
    ⲆᐃᐃΔΔΔΔ: "img/night-baby-dragon-tamed.png",
    ᐃΔⵠᐃᐃᐃΔ: "img/day-wing-dragon-left-angry.png",
    ⵠⵠⵠΔⲆΔᐃ: "img/night-dragon-wing-left-angry.png",
    ᐃⲆΔᐃᐃᐃᐃ: "img/day-wing-dragon-right-angry.png",
    ⵠⲆⲆⲆⲆΔᐃ: "img/night-dragon-wing-right-angry.png",
    ⲆᐃΔⵠⲆⲆᐃ: "img/day-wing-dragon-left-tamed.png",
    ⵠΔᐃΔᐃⵠᐃ: "img/night-dragon-wing-left-tamed.png",
    ΔⵠⵠⵠΔΔⲆ: "img/day-wing-dragon-right-tamed.png",
    ᐃΔᐃΔᐃᐃⵠ: "img/night-wing-dragon-right-tamed.png",
    ᐃᐃᐃΔᐃⲆⵠ: "img/day-wing-dragon-left.png",
    ᐃⵠⲆᐃⲆΔⵠ: "img/night-dragon-wing-left.png",
    ⵠᐃⲆⲆᐃΔΔ: "img/day-wing-dragon-right.png",
    ⵠⲆᐃΔⵠⵠⵠ: "img/night-wing-dragon-right.png",
    ⵠⵠⵠⲆΔⵠΔ: "img/hurt-baby-dragon.png",
    ⵠΔⲆⲆⵠᐃⵠ: "img/hurt-baby-dragon-wing-left.png",
    ᐃΔΔΔΔᐃΔ: "img/hurt-baby-dragon-wing-right.png",
    ⲆΔⵠⲆᐃΔᐃ: "img/inv-baby-dragon-out.png",
    ⵠΔΔᐃⲆΔⲆ: "img/inv-baby-dragon-in.png",
    ᐃΔⲆⲆⵠᐃΔ: "img/inv-baby-dragon-click.png",
    ⲆⵠⲆᐃᐃΔᐃ: "img/day-baby-lava.png",
    ⲆⵠᐃΔΔΔᐃ: "img/night-baby-lava.png",
    ⲆⲆΔⲆΔⵠΔ: "img/day-baby-lava-angry.png",
    ΔⲆΔⲆⲆⲆⲆ: "img/night-baby-lava-angry.png",
    ᐃⲆⲆⵠΔⲆⲆ: "img/day-baby-lava-tamed.png",
    ⵠΔΔⲆᐃᐃᐃ: "img/night-baby-lava-tamed.png",
    ⲆΔⲆΔΔⵠⲆ: "img/day-wing-lava-left-angry.png",
    ΔⲆⲆⲆᐃΔΔ: "img/night-wing-lava-left-angry.png",
    ⵠⵠⲆᐃᐃΔⲆ: "img/day-wing-lava-right-angry.png",
    ΔᐃⲆⲆᐃⲆᐃ: "img/night-wing-lava-right-angry.png",
    ᐃᐃᐃΔᐃⵠᐃ: "img/day-wing-lava-left-tamed.png",
    ΔⵠⲆᐃΔᐃΔ: "img/night-wing-lava-left-tamed.png",
    ΔΔⵠΔᐃⵠΔ: "img/day-wing-lava-right-tamed.png",
    ⵠᐃΔⵠⵠᐃΔ: "img/night-wing-lava-right-tamed.png",
    ᐃᐃⲆⲆᐃⲆᐃ: "img/day-wing-lava-left.png",
    ⲆⲆΔᐃΔⵠⵠ: "img/night-wing-lava-left.png",
    ΔΔⵠΔΔΔΔ: "img/day-wing-lava-right.png",
    ᐃᐃᐃΔⵠᐃⲆ: "img/night-wing-lava-right.png",
    ⵠΔΔΔⵠⵠΔ: "img/hurt-baby-lava.png",
    ⲆⲆⲆⲆᐃΔⲆ: "img/hurt-baby-lava-wing-left.png",
    ᐃⵠⲆΔⵠⲆᐃ: "img/hurt-baby-lava-wing-right.png",
    ᐃᐃᐃⵠⲆΔⵠ: "img/inv-baby-lava-out.png",
    ᐃΔᐃᐃΔᐃⲆ: "img/inv-baby-lava-in.png",
    ⵠⵠΔΔᐃⵠΔ: "img/inv-baby-lava-click.png",
    ᐃⵠΔΔΔⲆᐃ: "img/day-falcon.png",
    ᐃᐃᐃⲆⲆⲆΔ: "img/night-falcon.png",
    ᐃⵠᐃⵠⲆⵠΔ: "img/day-falcon-angry.png",
    ΔⲆⵠⵠΔⲆⵠ: "img/night-falcon-angry.png",
    ᐃⲆΔΔᐃⵠⵠ: "img/day-falcon-ground.png",
    ΔᐃⵠⲆⲆⲆⲆ: "img/night-falcon-ground.png",
    ⲆΔⲆⲆⲆⲆᐃ: "img/day-falcon-ground-angry.png",
    ⵠⵠᐃⵠⵠᐃΔ: "img/night-falcon-ground-angry.png",
    ⲆΔᐃⲆⵠΔⵠ: "img/day-falcon-wings-left.png",
    ⵠᐃⲆΔⵠᐃΔ: "img/night-falcon-wings-left.png",
    ⲆΔⵠⲆᐃⵠᐃ: "img/day-falcon-wings-right.png",
    ΔⵠΔΔᐃⵠⵠ: "img/night-falcon-wings-right.png",
    ⲆΔΔᐃⲆⵠⲆ: "img/day-falcon-angry-wings-left.png",
    ⵠΔⵠᐃΔΔⲆ: "img/night-falcon-angry-wings-left.png",
    ⵠⵠⵠΔΔⵠᐃ: "img/day-falcon-angry-wings-right.png",
    ΔⲆᐃⵠⵠΔⲆ: "img/night-falcon-angry-wings-right.png",
    ⵠᐃⲆᐃᐃⵠⲆ: "img/day-falcon-wings-left-tamed.png",
    ⲆⵠΔⵠᐃᐃⵠ: "img/night-falcon-wings-left-tamed.png",
    ΔⲆΔΔⲆⲆⲆ: "img/day-falcon-wings-right-tamed.png",
    ᐃΔΔⵠΔⵠᐃ: "img/night-falcon-wings-right-tamed.png",
    ⵠⲆⵠⵠⵠⲆΔ: "img/day-falcon-tamed.png",
    ⵠᐃⵠⲆΔᐃⵠ: "img/night-falcon-tamed.png",
    ᐃΔᐃⲆΔⵠⵠ: "img/hurt-falcon-ground.png",
    ᐃⵠᐃᐃⵠᐃᐃ: "img/hurt-falcon.png",
    ⵠⲆᐃᐃᐃⵠᐃ: "img/hurt-falcon-wings-left.png",
    ⲆⵠⲆᐃⵠᐃᐃ: "img/hurt-falcon-wings-right.png",
    ⲆⵠⵠⵠΔΔᐃ: "img/inv-falcon-out.png",
    ⵠⲆⵠᐃⲆⵠⵠ: "img/inv-falcon-in.png",
    ⵠᐃⵠⵠᐃⵠΔ: "img/inv-falcon-click.png",
    ⵠⵠᐃⲆⵠⵠⲆ: "img/day-crab-boss.png",
    ⲆⲆΔⲆᐃΔΔ: "img/night-crab-boss.png",
    ⵠᐃⵠⲆⲆΔΔ: "img/day-crab-boss-angry.png",
    ΔᐃⲆΔⵠⵠΔ: "img/night-crab-boss-angry.png",
    ΔᐃᐃΔΔΔΔ: "img/day-crab-boss-tamed.png",
    ⵠⵠΔᐃΔⵠᐃ: "img/night-crab-boss-tamed.png",
    ᐃᐃⵠᐃΔᐃⵠ: "img/day-crab-boss-claw-left-attack.png",
    ΔⵠΔᐃᐃᐃⲆ: "img/night-crab-boss-claw-left-attack.png",
    ᐃⲆⵠΔᐃⵠⲆ: "img/day-crab-boss-claw-right-attack.png",
    ⲆᐃΔΔⵠⲆᐃ: "img/night-crab-boss-claw-right-attack.png",
    ᐃᐃⵠⲆⲆⲆᐃⵠⲆ: "img/day-crab-boss-claw-left-tamed.png",
    ΔⲆᐃᐃᐃⵠΔΔΔ: "img/night-crab-boss-claw-left-tamed.png",
    ᐃΔΔⲆⵠΔΔⵠᐃ: "img/day-crab-boss-claw-right-tamed.png",
    ᐃΔᐃⲆⲆⲆⲆᐃΔ: "img/night-crab-boss-claw-right-tamed.png",
    ΔⵠΔΔᐃΔⲆ: "img/day-crab-boss-claw-left.png",
    ΔⵠⲆΔᐃⵠⵠ: "img/night-crab-boss-claw-left.png",
    ⲆᐃΔΔⲆⵠᐃ: "img/day-crab-boss-claw-right.png",
    ΔΔᐃᐃΔᐃΔ: "img/night-crab-boss-claw-right.png",
    ⵠⲆΔΔᐃⲆⲆ: "img/hurt-crab-boss.png",
    ᐃⲆⲆⵠⵠΔⵠ: "img/hurt-crab-boss-claw-left.png",
    ⲆΔⵠΔᐃⲆΔ: "img/hurt-crab-boss-claw-right.png",
    ⵠⲆⲆΔⵠΔⵠ: "img/heal-crab-boss.png",
    ΔΔⵠⲆᐃⲆⵠ: "img/heal-crab-boss-claw-left.png",
    ⵠⲆⵠⲆⲆᐃΔ: "img/heal-crab-boss-claw-right.png",
    ⲆΔΔᐃᐃⵠΔ: "img/crab-step.png",
    ΔΔᐃⵠⵠᐃᐃ: "img/inv-crab-boss-out.png",
    ⵠⲆᐃᐃⲆⲆΔ: "img/inv-crab-boss-in.png",
    ⲆⵠⲆΔΔᐃⵠ: "img/inv-crab-boss-click.png",
    ⲆᐃⲆⵠⲆΔⲆ: "img/day-cactus10.png",
    ⲆⲆⵠⲆⵠΔⵠ: "img/night-cactus10.png",
    ΔⲆΔⲆⵠⵠΔ: "img/inv-cactus-out.png",
    ⲆΔΔⵠⵠⲆⵠ: "img/inv-cactus-in.png",
    ΔⵠⲆⵠᐃⲆⲆ: "img/inv-cactus-click.png",
    ΔᐃΔᐃᐃᐃⲆ: "img/day-scorpion.png",
    ΔᐃᐃⵠⵠⲆⵠ: "img/night-scorpion.png",
    ⵠⵠⵠᐃⵠⵠⲆ: "img/day-scorpion-hand-left.png",
    ΔᐃⲆⲆⵠⲆᐃ: "img/night-scorpion-hand-left.png",
    ⵠᐃΔⲆᐃΔⲆ: "img/day-scorpion-hand-right.png",
    ΔⲆᐃⲆⲆΔⵠ: "img/night-scorpion-hand-right.png",
    ᐃΔⲆⲆᐃᐃⲆ: "img/hurt-scorpion.png",
    ᐃΔᐃⲆⵠⵠᐃ: "img/hurt-scorpion-hand-left.png",
    ᐃΔⵠⲆᐃΔⲆ: "img/hurt-scorpion-hand-right.png",
    ⵠⵠⲆΔΔΔⲆ: "img/day-vulture.png",
    ⲆⵠᐃΔΔᐃΔ: "img/night-vulture.png",
    ᐃⲆΔᐃⵠⵠⵠ: "img/day-vulture-angry.png",
    ⲆⲆΔⵠⵠⵠⵠ: "img/night-vulture-angry.png",
    ᐃΔΔⵠⵠⵠⲆ: "img/day-vulture-ground.png",
    ΔⲆᐃᐃᐃΔΔ: "img/night-vulture-ground.png",
    ⲆΔᐃΔⵠⲆⵠ: "img/day-vulture-ground-angry.png",
    ΔΔᐃΔⲆΔⵠ: "img/night-vulture-ground-angry.png",
    ⲆᐃᐃΔᐃΔΔ: "img/day-vulture-wings-left.png",
    ᐃᐃⲆᐃⵠⵠⲆ: "img/night-vulture-wings-left.png",
    ⲆⲆⵠᐃⵠⵠΔ: "img/day-vulture-wings-right.png",
    ᐃΔΔⵠΔᐃᐃ: "img/night-vulture-wings-right.png",
    ΔΔΔⵠⲆΔΔ: "img/day-vulture-angry-wings-left.png",
    ᐃⲆᐃⲆⲆᐃΔ: "img/night-vulture-angry-wings-left.png",
    ⲆⵠⵠΔᐃΔⲆ: "img/day-vulture-angry-wings-right.png",
    ⵠⵠΔⵠⵠᐃⵠ: "img/night-vulture-angry-wings-right.png",
    ᐃΔᐃⲆΔⲆᐃ: "img/day-vulture-wings-left-tamed.png",
    ΔⲆᐃⵠᐃⵠⲆ: "img/night-vulture-wings-left-tamed.png",
    ⵠⲆⵠⲆᐃⵠᐃ: "img/day-vulture-wings-right-tamed.png",
    ᐃᐃⲆᐃΔⵠⵠ: "img/night-vulture-wings-right-tamed.png",
    ⲆⲆᐃⵠΔⲆⲆ: "img/day-vulture-tamed.png",
    ΔⵠᐃΔⲆΔΔ: "img/night-vulture-tamed.png",
    ⲆΔΔΔⲆᐃᐃ: "img/hurt-vulture-ground.png",
    ΔⲆⵠⲆΔⲆⲆ: "img/hurt-vulture.png",
    ΔΔᐃⵠⲆΔᐃ: "img/hurt-vulture-wings-left.png",
    ⵠΔⲆⲆᐃᐃⲆ: "img/hurt-vulture-wings-right.png",
    ⲆΔⲆⲆⲆᐃⵠ: "img/day-aloe-vera.png",
    ΔᐃᐃⵠΔᐃΔ: "img/night-aloe-vera.png",
    ᐃΔⵠΔⵠⵠⲆ: "img/inv-aloe-vera-out.png",
    ΔⲆⵠⵠᐃⲆⲆ: "img/inv-aloe-vera-in.png",
    ᐃΔⲆⲆⲆᐃⵠ: "img/inv-aloe-vera-click.png",
    ⲆⵠⵠᐃⲆᐃⲆ: "img/day-aloe-vera-grown.png",
    ΔΔⲆⲆⵠᐃⵠ: "img/night-aloe-vera-grown.png",
    ⲆⲆᐃᐃΔⲆΔ: "img/day-aloe-vera-dried.png",
    ⲆⵠⵠⵠᐃΔΔ: "img/night-aloe-vera-dried.png",
    ⵠΔᐃⵠΔΔᐃ: "img/day-turban1.png",
    ⵠⲆΔⵠⵠᐃᐃ: "img/night-turban1.png",
    ⵠᐃᐃⲆⵠⵠⲆ: "img/day-turban2.png",
    ⲆⲆᐃⲆᐃᐃⵠ: "img/night-turban2.png",
    ⵠⵠΔⲆⲆⵠΔ: "img/inv-turban2-out.png",
    ᐃᐃⲆᐃⲆΔⵠ: "img/inv-turban2-in.png",
    ΔΔᐃⵠᐃᐃⲆ: "img/inv-turban2-click.png",
    ⲆⵠᐃᐃⵠΔⲆ: "img/inv-turban1-out.png",
    ⵠΔⵠΔΔᐃΔ: "img/inv-turban1-in.png",
    ⵠⵠⲆᐃᐃⵠⵠ: "img/inv-turban1-click.png",
    ᐃⲆΔᐃΔⲆΔ: "img/day-pitchfork2.png",
    ⵠΔᐃΔⵠⲆΔ: "img/night-pitchfork2.png",
    ⲆⵠᐃΔᐃⲆⵠ: "img/inv-pitchfork2-out.png",
    ⲆᐃⵠⵠⵠⵠⲆ: "img/inv-pitchfork2-in.png",
    ΔⲆΔΔⵠⵠΔ: "img/inv-pitchfork2-click.png",
    ⵠⵠⲆΔⲆⵠᐃ: "img/inv-gold-fork-click.png",
    ΔⲆᐃⵠⵠᐃⲆ: "img/inv-pilot-glasses-click.png",
    ᐃᐃⵠΔᐃΔⲆ: "img/day-pilot-helmet.png",
    ⲆᐃΔⵠᐃⵠᐃ: "img/night-pilot-helmet.png",
    ᐃᐃᐃΔⲆᐃᐃ: "img/inv-pilot-helmet-out.png",
    ΔΔΔᐃΔⲆⲆ: "img/inv-pilot-helmet-in.png",
    ΔᐃΔⲆᐃⵠⵠ: "img/inv-pilot-helmet-click.png",
    ⲆᐃᐃⵠΔᐃⲆⵠⲆ: "img/day-sandworm0.png",
    ⲆⵠⲆⵠᐃⲆⵠ: "img/day-sandworm1.png",
    ΔᐃⲆⵠⲆᐃⵠ: "img/day-sandworm2.png",
    ⵠⲆᐃⵠⲆΔⵠᐃⵠ: "img/night-sandworm0.png",
    ᐃΔⲆⵠⵠᐃΔ: "img/night-sandworm1.png",
    ΔᐃΔⵠⵠᐃⵠ: "img/night-sandworm2.png",
    ⲆⵠⲆΔⲆᐃⲆ: "img/hurt-sandworm0.png",
    ᐃⵠΔⵠⲆⵠΔ: "img/hurt-sandworm1.png",
    ᐃⲆⲆⲆⵠⲆΔ: "img/hurt-sandworm2.png",
    Ⲇⵠᐃᐃᐃ: "img/inv-vulture-feather-click.png",
    ᐃΔⵠᐃᐃᐃⲆ: "img/day-emerald0.png",
    ᐃⵠΔΔΔᐃΔ: "img/night-emerald0.png",
    ⲆᐃΔⲆⵠⵠⲆ: "img/day-emerald1.png",
    ⵠⲆⲆⲆⲆΔΔ: "img/night-emerald1.png",
    ΔⲆⲆⵠΔⲆⲆ: "img/day-emerald2.png",
    ΔᐃⲆⲆᐃᐃᐃ: "img/night-emerald2.png",
    ᐃΔⵠΔⵠ: "img/inv-emerald-click.png",
    ᐃᐃⲆⵠΔⲆⵠ: "img/inv-sworm-juice-out.png",
    ΔⲆⵠΔᐃΔΔ: "img/inv-sworm-juice-in.png",
    ᐃΔΔⵠᐃᐃⵠ: "img/inv-sworm-juice-click.png",
    ΔⲆⲆⲆⲆᐃΔ: "img/day-point-machine.png",
    ⲆΔⲆⵠΔᐃΔ: "img/night-point-machine.png",
    ΔᐃᐃᐃΔᐃᐃ: "img/day-point-machine-hole.png",
    ᐃᐃᐃⲆΔⵠΔ: "img/night-point-machine-hole.png",
    ⲆⵠⲆΔΔΔⵠ: "img/day-point-machine-ground.png",
    ΔⲆⲆⲆⲆⲆΔ: "img/night-point-machine-ground.png",
    ⲆⲆⵠΔᐃᐃΔ: "img/day-point-machine-rotate.png",
    ΔⵠΔⵠᐃᐃⵠ: "img/night-point-machine-rotate.png",
    ⵠᐃⵠΔⲆΔᐃ: "img/inv-point-machine-out.png",
    ⵠⲆΔΔᐃⲆΔ: "img/inv-point-machine-in.png",
    ᐃᐃΔⵠⵠⵠᐃ: "img/inv-point-machine-click.png",
    ⵠΔᐃΔᐃⵠⲆ: "img/day-extractor-machine0-stone.png",
    ⲆΔΔᐃⵠⵠᐃ: "img/night-extractor-machine0-stone.png",
    ⲆⵠⲆᐃⵠⲆⲆ: "img/day-extractor-machine-stone.png",
    ⵠⲆⲆⲆᐃΔⵠ: "img/night-extractor-machine-stone.png",
    ᐃⲆⵠⵠᐃⵠΔ: "img/inv-extractor-machine-stone-out.png",
    ⲆΔⲆⵠⵠⵠᐃ: "img/inv-extractor-machine-stone-in.png",
    Δⵠᐃᐃᐃⵠᐃ: "img/inv-extractor-machine-stone-click.png",
    ⵠΔᐃⲆΔⲆᐃ: "img/day-extractor-machine0-gold.png",
    ᐃΔⲆⲆᐃⵠΔ: "img/night-extractor-machine0-gold.png",
    ⵠⲆᐃᐃⵠⵠⲆ: "img/day-extractor-machine-gold.png",
    ΔᐃⵠᐃᐃⲆᐃ: "img/night-extractor-machine-gold.png",
    Δⵠᐃⵠⵠⵠᐃ: "img/inv-extractor-machine-gold-out.png",
    ⲆᐃⵠᐃᐃⲆⵠ: "img/inv-extractor-machine-gold-in.png",
    ⵠⲆⲆᐃΔΔⵠ: "img/inv-extractor-machine-gold-click.png",
    ⵠⲆᐃᐃΔᐃᐃ: "img/day-extractor-machine0-diamond.png",
    ⲆⲆᐃΔⲆᐃⵠ: "img/night-extractor-machine0-diamond.png",
    ᐃⵠᐃΔⲆΔⵠ: "img/day-extractor-machine-diamond.png",
    ⵠⵠⵠⵠⲆⲆΔ: "img/night-extractor-machine-diamond.png",
    ΔⲆⲆᐃⲆⲆⲆ: "img/inv-extractor-machine-diamond-out.png",
    ⲆᐃΔⵠⵠᐃⵠ: "img/inv-extractor-machine-diamond-in.png",
    ⵠᐃΔⲆⲆⲆⵠ: "img/inv-extractor-machine-diamond-click.png",
    ΔΔⵠΔᐃⲆΔ: "img/day-extractor-machine0-amethyst.png",
    ΔⵠΔⲆᐃᐃⲆ: "img/night-extractor-machine0-amethyst.png",
    ᐃⲆⵠⲆΔⵠΔ: "img/day-extractor-machine-amethyst.png",
    ⵠΔⵠΔⵠΔⵠ: "img/night-extractor-machine-amethyst.png",
    ⲆⵠⵠⵠΔⲆΔ: "img/inv-extractor-machine-amethyst-out.png",
    ΔⲆΔΔᐃⲆᐃ: "img/inv-extractor-machine-amethyst-in.png",
    ⲆⲆΔⵠⵠᐃⵠ: "img/inv-extractor-machine-amethyst-click.png",
    ΔᐃᐃΔᐃΔΔ: "img/day-extractor-machine0-reidite.png",
    ⲆⲆΔΔΔΔᐃ: "img/night-extractor-machine0-reidite.png",
    ⵠⲆⵠΔⵠⲆΔ: "img/day-extractor-machine-reidite.png",
    ᐃⲆΔⲆⵠⵠᐃ: "img/night-extractor-machine-reidite.png",
    ⲆⵠⵠⲆᐃΔᐃ: "img/inv-extractor-machine-reidite-out.png",
    ΔᐃᐃᐃΔΔΔ: "img/inv-extractor-machine-reidite-in.png",
    ⵠⵠⵠΔⲆⵠⵠ: "img/inv-extractor-machine-reidite-click.png",
    ⵠᐃⲆᐃⵠⵠⵠ: "img/extractor-cases.png",
    ⲆᐃᐃⵠⵠⲆⵠ: "img/day-golden-hen.png",
    ᐃᐃΔⲆᐃⵠⲆ: "img/night-golden-hen.png",
    ᐃⲆΔⲆⲆᐃⲆ: "img/day-golden-chicken.png",
    ΔᐃᐃᐃᐃⵠⲆ: "img/night-golden-chicken.png",
    ΔⲆΔΔΔⵠⵠ: "img/hurt-golden-hen.png",
    ⲆΔⵠⵠᐃᐃᐃ: "img/hurt-golden-chicken.png",
    ΔⲆᐃⲆᐃΔⲆ: "img/logo-interface.png",
    ⵠΔΔᐃⲆΔᐃ: "img/forest-mode-hover.png",
    ⵠΔⵠᐃⲆΔⵠ: "img/normal-mode-hover.png",
    ΔⵠΔΔΔΔⵠ: "img/vampire-mode-hover.png",
    ⲆⲆᐃⵠⲆΔΔ: "img/zombie-mode-hover.png",
    ⲆⲆⵠᐃΔΔΔ: "img/community-mode-hover2.png",
    ΔᐃᐃᐃⵠᐃΔ: "img/experimental-mode-hover.png",
    ᐃᐃⵠⲆΔⲆᐃ: "img/zombie-mode-out.png",
    ΔΔⵠᐃⵠᐃᐃ: "img/zombie-mode-in.png",
    ΔⵠⵠⵠᐃⲆᐃ: "img/zombie-mode-click.png",
    ⵠΔΔᐃⲆⵠⲆ: "img/vampire-mode-out.png",
    ΔⲆⲆΔⵠΔⲆ: "img/vampire-mode-in.png",
    ΔΔⵠΔΔⵠⵠ: "img/vampire-mode-click.png",
    ᐃⵠᐃΔⵠᐃⲆ: "img/normal-mode-out.png",
    ⲆⵠⲆΔΔⲆⲆ: "img/normal-mode-in.png",
    ⵠᐃⵠⲆᐃΔⵠ: "img/normal-mode-click.png",
    ᐃΔᐃⵠᐃΔⲆ: "img/forest-mode-out.png",
    ᐃΔⲆⲆⲆⵠⲆ: "img/forest-mode-in.png",
    ΔΔΔΔᐃΔⲆ: "img/forest-mode-click.png",
    ⵠⵠᐃᐃᐃⵠᐃ: "img/community-mode-out.png",
    ⵠⲆΔⵠⵠⲆΔ: "img/community-mode-in.png",
    ⵠΔⵠⲆᐃⲆᐃ: "img/community-mode-click.png",
    ⵠⲆΔΔΔΔⲆ: "img/experimental-modes-out.png",
    ⲆⲆⲆΔΔⵠᐃ: "img/experimental-modes-in.png",
    ⵠᐃⲆⵠⲆⲆΔ: "img/experimental-modes-click.png",
    ⵠᐃⲆⵠⲆΔⵠ: "img/youtube-button-out.png",
    ⵠΔΔⵠΔⵠⵠ: "img/youtube-button-in.png",
    ΔΔᐃΔΔΔⲆ: "img/youtube-button-click.png",
    ΔⵠᐃⲆⵠⵠᐃ: "img/wiki-button-out.png",
    ᐃⲆⲆΔᐃΔΔ: "img/wiki-button-in.png",
    ⲆⵠⲆⲆⲆⲆᐃ: "img/wiki-button-click.png",
    ⵠⲆΔⵠⲆᐃᐃ: "img/twitter-button-out.png",
    ᐃΔΔΔⲆⲆⲆ: "img/twitter-button-in.png",
    ⵠⵠᐃⲆⲆⵠᐃ: "img/twitter-button-click.png",
    ᐃᐃΔᐃΔⵠΔ: "img/facebook-button-out.png",
    ΔΔᐃᐃⲆᐃⵠ: "img/facebook-button-in.png",
    ᐃᐃᐃᐃΔᐃⲆ: "img/facebook-button-click.png",
    ⲆΔΔᐃᐃΔᐃ: "img/reddit-button-out.png",
    ⵠᐃΔⲆᐃⵠⲆ: "img/reddit-button-in.png",
    ᐃᐃⵠΔⲆᐃΔ: "img/reddit-button-click.png",
    ᐃΔΔΔⲆⵠⵠ: "img/discord-button-out.png",
    ⲆⲆᐃΔᐃΔⲆ: "img/discord-button-in.png",
    ΔᐃⵠⲆⲆⲆΔ: "img/discord-button-click.png",
    ᐃⲆⵠΔⵠⲆᐃ: "img/merch-button-out.png",
    ⵠΔⵠᐃⲆⲆᐃ: "img/merch-button-in.png",
    ⵠⲆΔΔᐃᐃᐃ: "img/merch-button-click.png",
    ⲆᐃⲆᐃᐃⲆⲆⵠⲆ: "img/terminal-button-out.png",
    ⵠⵠᐃⵠⲆᐃⲆⵠⵠ: "img/terminal-button-in.png",
    ΔⵠⲆⲆⲆΔᐃⵠⵠ: "img/terminal-button-click.png",
    ⲆΔⵠⲆᐃᐃΔ: "img/restart-out.png",
    ΔΔᐃᐃᐃΔΔ: "img/restart-in.png",
    ⲆᐃⲆⵠⵠΔΔ: "img/restart-click.png",
    ⵠⲆⵠΔᐃᐃⵠ: "img/guide-out.png",
    ⵠⵠᐃⵠⵠᐃⵠ: "img/guide-in.png",
    ⲆΔΔᐃⵠⲆⵠ: "img/guide-click.png",
    ΔᐃΔΔⵠⵠⵠ: "img/copy-paste-out.png",
    ᐃⵠⲆᐃΔⲆⲆ: "img/copy-paste-in.png",
    ᐃⵠⵠⵠᐃᐃᐃ: "img/copy-paste-click.png",
    ᐃⵠⲆΔᐃᐃⵠ: "img/link-buttons-bg.png",
    ⵠΔⲆᐃⲆⵠᐃ: "img/changelog-box2.png",
    ᐃᐃᐃᐃⲆⵠᐃ: "img/changelog_31.png",
    ⵠⵠⵠᐃⵠᐃⲆ: "img/banner-taming.png",
    ⵠΔⵠⵠⵠⵠᐃ: "img/profile-button-out.png",
    ⵠⲆⲆᐃⲆⵠⵠ: "img/profile-button-in.png",
    ΔⲆⲆⵠⲆⲆⵠ: "img/profile-button-click.png",
    ΔⲆΔⲆᐃΔⲆ: "img/login-button-out.png",
    ΔⲆⵠΔⵠⲆᐃ: "img/login-button-in.png",
    ΔⵠᐃⵠΔⲆⵠ: "img/login-button-click.png",
    ᐃΔⲆΔⵠⲆΔ: "img/login-google-out.png",
    ΔΔᐃΔⲆᐃΔ: "img/login-google-in.png",
    ΔⲆⲆΔΔⲆⲆ: "img/login-google-click.png",
    ᐃΔᐃΔᐃΔΔ: "img/login-facebook-out.png",
    ⵠᐃᐃⵠⵠᐃΔ: "img/login-facebook-in.png",
    ᐃⲆΔⲆⵠΔⲆ: "img/login-facebook-click.png",
    ΔᐃᐃⲆⲆᐃΔ: "img/account-box.png",
    ⲆΔᐃᐃⲆⵠᐃⲆⵠ: "img/account-under-maintenance.png",
    ΔΔⵠΔΔⵠⲆ: "img/close-button-account-out.png",
    ᐃⲆⵠⲆΔⲆᐃ: "img/close-button-account-in.png",
    ⲆΔⵠΔⵠⲆⲆ: "img/close-button-account-click.png",
    ⵠΔⲆⵠⵠⵠⲆ: "img/play-button-out.png",
    ΔᐃΔⵠⵠᐃΔ: "img/play-button-in.png",
    ΔⵠᐃⵠΔⵠᐃ: "img/play-button-click.png",
    ᐃΔⲆⵠⵠᐃⵠⵠⲆ: "img/app-store-badge.png",
    ᐃᐃⲆΔΔΔᐃΔᐃ: "img/play-store-badge.png",
    ⲆᐃⲆⲆᐃⵠⵠΔᐃ: "img/mobile-boxad.png",
    ⵠⵠΔⵠⵠΔⵠ: "img/modify-name-out.png",
    ΔΔᐃᐃⲆⲆΔ: "img/modify-name-in.png",
    ⵠⲆΔⲆⲆΔΔ: "img/modify-name-click.png",
    ⵠⵠΔΔⵠΔΔ: "img/copy-id-button-out.png",
    ᐃᐃⲆᐃⲆᐃΔ: "img/copy-id-button-hover.png",
    ᐃⲆⲆᐃⵠΔⲆ: "img/copy-id-button-active.png",
    ᐃⲆΔᐃΔⲆᐃ: "img/yes-button-out.png",
    ΔᐃⵠⵠΔΔΔ: "img/yes-button-in.png",
    ΔⵠⲆⵠⵠΔⵠ: "img/yes-button-click.png",
    ⵠⵠⲆᐃⵠⲆⲆ: "img/yes-300-button-out.png",
    ΔⵠⲆⲆΔⲆⵠ: "img/yes-300-button-in.png",
    ⲆᐃΔⵠⵠⲆᐃ: "img/yes-300-button-click.png",
    ⵠⵠᐃⵠΔⵠⲆ: "img/no-button-out.png",
    ᐃᐃⵠⵠΔⵠᐃ: "img/no-button-in.png",
    ᐃⵠΔⵠᐃᐃΔ: "img/no-button-click.png",
    ΔⲆᐃⲆᐃΔΔ: "img/no-thanks-button-out.png",
    ΔᐃⵠⲆᐃΔᐃ: "img/no-thanks-button-in.png",
    ΔⲆᐃΔᐃΔᐃ: "img/no-thanks-button-click.png",
    ΔᐃΔΔⲆᐃᐃ: "img/shop-button-out.png",
    ΔⲆΔᐃⲆⲆⲆ: "img/shop-button-in.png",
    ᐃⲆΔᐃⵠⲆⵠ: "img/shop-button-click.png",
    ⲆᐃΔⵠᐃⵠⲆ: "img/logout-out.png",
    ⵠⲆⵠΔΔⲆΔ: "img/logout-in.png",
    ⲆⲆΔⵠⲆⵠᐃ: "img/logout-click.png",
    ΔᐃᐃΔⲆΔⲆ: "img/terms-button-out.png",
    ⲆᐃᐃΔⵠΔⲆ: "img/terms-button-in.png",
    ᐃᐃⵠⲆⵠⲆΔ: "img/terms-button-click.png",
    ΔΔᐃⲆⵠΔⵠ: "img/tutorial-icon.png",
    ΔΔΔᐃⲆᐃⲆ: "img/skins-icon.png",
    ⲆⲆⵠΔᐃⲆⵠ: "img/shop-icon.png",
    ⲆᐃᐃΔΔΔΔⲆⵠ: "img/paint-icon.png",
    ⵠᐃⵠⵠⲆⵠᐃ: "img/leaderboard-icon.png",
    ΔΔⲆΔΔⲆΔ: "img/start-icon.png",
    ΔΔΔᐃⲆΔᐃ: "img/profile-icon.png",
    ΔⵠᐃⲆⲆⵠΔ: "img/server-access-icon2.png",
    ⲆΔⵠΔΔⵠΔ: "img/button-homepage-bg-out.png",
    ⲆΔⲆᐃⲆⵠⵠ: "img/button-homepage-bg-in.png",
    ΔΔⵠΔⲆⲆᐃ: "img/button-homepage-bg-click.png",
    ⵠΔⵠⲆⲆⲆⲆ: "img/button-bottom-homepage-bg-out.png",
    ᐃᐃᐃᐃᐃΔᐃ: "img/button-bottom-homepage-bg-in.png",
    ⵠᐃᐃⵠⲆΔᐃ: "img/button-bottom-homepage-bg-click.png",
    ᐃΔΔⲆⵠⲆᐃ: "img/lvl-player.png",
    ⵠᐃᐃΔᐃᐃΔ: "img/avatar-player.png",
    ⲆⲆΔⲆⲆᐃᐃ: "img/avatar-player1.png",
    ⲆᐃΔⲆᐃᐃⲆ: "img/avatar-player2.png",
    ⲆⵠⲆⵠⵠΔⲆ: "img/avatar-player3.png",
    ⲆᐃᐃⲆᐃΔΔ: "img/avatar-player4.png",
    ⵠᐃᐃⵠΔⲆⵠ: "img/avatar-player5.png",
    ⵠᐃⲆᐃⲆᐃΔ: "img/avatar-player6.png",
    ᐃᐃⵠⵠᐃᐃⵠ: "img/avatar-player7.png",
    ΔᐃⲆⵠⲆΔᐃ: "img/avatar-player8.png",
    ⲆᐃᐃᐃᐃᐃⲆ: "img/avatar-player9.png",
    ⲆⲆⵠᐃΔᐃᐃ: "img/avatar-player10.png",
    ⵠΔⲆⵠΔⵠΔ: "img/avatar-player11.png",
    ⲆⵠΔⲆᐃᐃⲆ: "img/avatar-player12.png",
    ΔⵠⵠΔΔᐃᐃ: "img/avatar-player13.png",
    ΔⲆⵠⵠᐃⲆⵠ: "img/avatar-player14.png",
    ⵠᐃΔⲆⲆᐃⲆ: "img/avatar-player14.png",
    ⲆᐃⵠΔⵠⵠΔ: "img/avatar-player14.png",
    ⵠᐃⵠⵠᐃⲆΔ: "img/avatar-player14.png",
    ⵠⲆⵠⵠⲆⲆΔΔⲆ: "img/golden-bread.png",
    ⵠⲆⵠⲆᐃΔⵠ: "img/buy-bread-out.png",
    ⲆᐃᐃᐃⲆᐃⲆ: "img/buy-bread-in.png",
    ΔΔΔⲆⵠᐃⲆ: "img/buy-bread-click.png",
    ΔΔᐃᐃᐃⲆⵠ: "img/gauge.png",
    ᐃⵠΔⵠΔⲆΔᐃⲆ: "img/season-4-out.png",
    ᐃΔⲆⵠⲆⲆⲆⵠⵠ: "img/season-4-in.png",
    ᐃΔΔⵠᐃⵠⵠᐃΔ: "img/season-4-click.png",
    ⵠⲆᐃΔⵠᐃⲆⲆΔ: "img/season4-box.png",
    ᐃⵠⵠⵠⲆΔᐃᐃⲆ: "img/season-5-out.png",
    ΔⲆⵠⲆⲆΔⵠⵠⲆ: "img/season-5-in.png",
    ⵠⵠΔⵠⲆⲆΔΔΔ: "img/season-5-click.png",
    ⵠΔᐃⲆⵠⵠΔᐃⵠ: "img/season5-box.png",
    ᐃΔⵠⵠΔᐃᐃ: "img/season-6-out.png",
    ΔⲆⲆΔᐃⵠΔ: "img/season-6-in.png",
    ΔⵠⲆⲆΔⵠΔ: "img/season-6-click.png",
    ΔΔⵠΔⲆΔᐃ: "img/season6-box.png",
    ⲆᐃᐃⵠΔⵠⵠ: "img/profile3-box.png",
    ᐃΔᐃᐃᐃᐃΔ: "img/skins-box.png",
    ΔⵠⲆΔⵠᐃΔ: "img/shop-box.png",
    ⵠⲆⵠΔΔᐃⲆⵠⵠ: "img/private-server-box.png",
    ⵠΔⲆᐃⵠᐃⲆ: "img/location-box.png",
    ᐃΔⵠΔΔΔⵠ: "img/server-duration-box.png",
    ΔⵠΔᐃⵠⵠⲆ: "img/tutorial-box.png",
    ᐃᐃⲆᐃΔᐃᐃ: "img/leaderboard2-box.png",
    ΔΔⵠⵠⲆΔⵠ: "img/buy-breads-box.png",
    ΔⵠⵠᐃⲆⲆΔ: "img/bag-box.png",
    ᐃΔⵠΔⲆΔΔ: "img/deadbox-box.png",
    ᐃΔⵠⵠⲆⲆᐃ: "img/book-box.png",
    ⵠⲆⲆΔᐃΔΔ: "img/accessories-box.png",
    ⵠⲆⲆⵠᐃΔΔ: "img/customskin-box.png",
    ᐃⵠⲆᐃΔᐃⲆ: "img/bag-lasts.png",
    ⲆⵠⲆⲆᐃΔΔ: "img/server-lasts.png",
    ⲆⵠᐃᐃΔᐃⲆ: "img/server-access-box3.png",
    ᐃᐃΔΔⵠⲆᐃ: "img/lootbox-box.png",
    ⵠⲆΔᐃⲆΔⵠ: "img/change-nickname0.png",
    ⲆⵠⲆⲆⲆΔⲆ: "img/change-nickname1.png",
    ᐃᐃΔᐃᐃᐃᐃ: "img/cheating-box.png",
    ᐃⵠᐃΔⲆⵠΔΔⲆ: "img/daily-quest-box.png",
    ᐃⵠΔⵠᐃᐃⲆΔⵠ: "img/daily-5-bread.png",
    ⵠΔⵠΔᐃⵠⵠⵠᐃ: "img/daily-10-bread.png",
    ⲆΔᐃΔᐃΔΔΔᐃ: "img/daily-valid.png",
    ΔⲆⲆᐃⲆⵠᐃ: "img/normal-profile-out.png",
    ⲆΔⵠⵠᐃΔΔ: "img/normal-profile-in.png",
    ΔΔⲆᐃΔΔΔ: "img/normal-profile-click.png",
    ΔΔⲆⲆΔᐃⵠ: "img/forest-profile-out.png",
    ᐃⵠⲆⵠΔΔΔ: "img/forest-profile-in.png",
    ⲆⵠⵠⲆⵠⲆΔ: "img/forest-profile-click.png",
    ᐃⲆᐃᐃᐃⵠⵠ: "img/zombie-profile-out.png",
    ⲆᐃⲆᐃᐃᐃⵠ: "img/zombie-profile-in.png",
    ⵠⲆⲆⵠⵠΔΔ: "img/zombie-profile-click.png",
    ⵠΔⲆⵠᐃᐃΔ: "img/vampire-profile-out.png",
    ΔⵠΔⲆΔᐃⵠ: "img/vampire-profile-in.png",
    ᐃᐃΔⵠᐃⵠΔ: "img/vampire-profile-click.png",
    ⲆⵠᐃⲆⵠⵠⲆ: "img/total-profile-out.png",
    ⵠᐃⵠⲆΔΔᐃ: "img/total-profile-in.png",
    ⵠⲆⵠⵠᐃⲆⲆ: "img/total-profile-click.png",
    ⲆⲆΔⲆⲆⲆᐃ: "img/season1-out.png",
    ⲆᐃⵠⵠⲆⵠᐃ: "img/season1-in.png",
    ΔⲆⲆⲆΔⵠΔ: "img/season1-click.png",
    ΔΔᐃΔᐃΔΔ: "img/season2-out.png",
    ᐃᐃΔᐃⵠⵠⵠ: "img/season2-in.png",
    ⵠΔΔⵠᐃⵠᐃ: "img/season2-click.png",
    ᐃⵠⵠⲆⲆⵠΔ: "img/season3-out.png",
    ᐃⵠⵠᐃΔⲆⲆ: "img/season3-in.png",
    ⵠⲆΔΔⲆⵠᐃ: "img/season3-click.png",
    ⵠⲆᐃΔΔⲆⵠ: "img/season4-out.png",
    ⲆⲆⲆⵠⲆΔΔ: "img/season4-in.png",
    ΔΔΔΔᐃᐃⲆ: "img/season4-click.png",
    ᐃᐃⵠᐃⵠΔᐃ: "img/season5-out.png",
    ΔΔΔΔΔⲆΔ: "img/season5-in.png",
    ΔᐃΔᐃⵠⲆΔ: "img/season5-click.png",
    ⵠΔᐃⲆΔⵠⵠ: "img/season6-out.png",
    ᐃᐃⲆⵠⲆⲆⵠ: "img/season6-in.png",
    ΔⵠⲆⵠΔⲆΔ: "img/season6-click.png",
    ⲆΔⲆⵠΔᐃⵠ: "img/locked-skin-alert.png",
    ⵠⲆᐃⵠᐃΔᐃ: "img/locked-custom-alert.png",
    ΔⲆⲆⵠⲆⲆΔ: "img/bg-red-locked.png",
    ᐃⲆΔⵠΔⲆᐃ: "img/skin-button-out.png",
    ΔⲆⵠΔᐃⲆⲆ: "img/skin-button-in.png",
    ⵠⲆⵠⲆⵠΔᐃ: "img/skin-button-click.png",
    ⲆⵠⲆⵠᐃΔΔ: "img/accessory-button-out.png",
    ⲆᐃⵠᐃΔᐃᐃ: "img/accessory-button-in.png",
    ⵠⵠᐃⵠᐃΔⲆ: "img/accessory-button-click.png",
    ⵠᐃⲆⲆᐃᐃⵠ: "img/bag-button-out.png",
    ΔᐃⲆᐃⵠⵠⲆ: "img/bag-button-in.png",
    ΔⲆᐃⲆⵠⲆᐃ: "img/bag-button-click.png",
    ⵠⲆᐃᐃΔⵠⵠ: "img/book-button-out.png",
    ᐃⵠΔᐃΔⵠᐃ: "img/book-button-in.png",
    ᐃⵠⵠⵠⲆⲆᐃ: "img/book-button-click.png",
    ᐃᐃᐃΔⵠᐃᐃ: "img/deadbox-button-out.png",
    ᐃⵠᐃᐃΔⲆⵠ: "img/deadbox-button-in.png",
    ⲆᐃⵠⲆⵠⲆⵠ: "img/deadbox-button-click.png",
    ⵠᐃⲆⲆⵠΔᐃ: "img/loot-button-out.png",
    ⲆΔⲆᐃΔᐃΔ: "img/loot-button-in.png",
    ⵠᐃᐃᐃᐃΔΔ: "img/loot-button-click.png",
    ⲆⲆΔⵠΔᐃΔ: "img/free-item-out.png",
    ᐃⲆⵠⲆⲆΔᐃ: "img/free-item-in.png",
    ⲆᐃⵠΔΔⵠⵠ: "img/free-item-click.png",
    ⵠᐃΔⲆ: "img/wood-item-out.png",
    ᐃⲆΔⲆ: "img/wood-item-in.png",
    ⵠⵠᐃⵠ: "img/wood-item-click.png",
    ⵠᐃⲆⲆᐃⵠΔ: "img/stone-item.png",
    ⵠΔΔΔᐃΔⵠ: "img/stone-item-in.png",
    ΔⲆΔΔᐃΔΔ: "img/stone-item-click.png",
    ΔⲆⲆⲆⲆⲆⵠ: "img/gold-item.png",
    ΔᐃΔᐃⲆⵠᐃ: "img/gold-item-in.png",
    ΔⲆⵠⵠⲆⲆΔ: "img/gold-item-click.png",
    ⵠᐃΔⲆΔᐃΔ: "img/diamond-item.png",
    ΔⲆΔΔΔΔⵠ: "img/diamond-item-in.png",
    ΔⵠⵠᐃΔΔᐃ: "img/diamond-item-click.png",
    ⵠⵠⲆΔⵠᐃᐃ: "img/amethyst-item.png",
    ΔᐃⵠᐃΔΔⵠ: "img/amethyst-item-in.png",
    ⵠⲆᐃⲆΔᐃⲆ: "img/amethyst-item-click.png",
    ΔⵠΔΔΔⲆⲆ: "img/reidite-item.png",
    ⵠΔⵠΔᐃⲆΔ: "img/reidite-item-in.png",
    ⲆⲆⲆΔⲆΔⵠ: "img/reidite-item-click.png",
    ᐃᐃᐃᐃΔΔΔ: "img/special-item-out.png",
    ⵠᐃΔᐃΔⵠⲆ: "img/special-item-in.png",
    ΔⲆⲆⲆᐃᐃⲆ: "img/special-item-click.png",
    ⵠⵠⵠᐃⵠᐃᐃ: "img/level-item-out.png",
    ⲆΔᐃΔᐃΔⲆ: "img/level-item-in.png",
    ⵠᐃⲆⵠᐃⵠΔ: "img/level-item-click.png",
    ΔΔΔᐃΔⲆΔ: "img/skin-previous-out.png",
    ⵠΔⵠᐃᐃᐃΔ: "img/skin-previous-in.png",
    ⵠⲆᐃᐃᐃⲆᐃ: "img/skin-previous-click.png",
    ᐃΔⲆΔΔΔⵠ: "img/skin-next-out.png",
    ⲆᐃⲆⲆⵠΔⵠ: "img/skin-next-in.png",
    ΔⵠΔⵠᐃΔΔ: "img/skin-next-click.png",
    ᐃᐃΔⵠⲆ: "img/back-button-out.png",
    ⵠᐃⲆⵠⵠ: "img/back-button-in.png",
    ⲆᐃᐃΔⵠ: "img/back-button-click.png",
    ⵠΔⵠⲆⵠΔⲆ: "img/get-more-button-out.png",
    ⲆⲆⵠⲆⲆⲆⵠ: "img/get-more-button-in.png",
    ⲆᐃⵠΔⲆᐃⲆ: "img/get-more-button-click.png",
    ᐃᐃΔⵠⲆⲆΔ: "img/currency1-out.png",
    ⲆΔⵠᐃⲆⲆⲆ: "img/currency1-in.png",
    ⲆΔⵠⵠᐃΔⵠ: "img/currency1-click.png",
    ΔᐃΔΔⵠⵠⲆ: "img/currency2-out.png",
    ⵠⲆᐃᐃΔⵠΔ: "img/currency2-in.png",
    ⵠⵠΔⲆⲆΔⵠ: "img/currency2-click.png",
    ΔⵠⲆΔΔΔᐃ: "img/currency3-out.png",
    ⲆᐃⵠᐃΔᐃⲆ: "img/currency3-in.png",
    ⵠΔᐃΔⲆⲆΔ: "img/currency3-click.png",
    ΔΔΔⲆᐃᐃᐃ: "img/currency4-out.png",
    ⵠⲆⲆⵠⲆᐃⲆ: "img/currency4-in.png",
    ⵠᐃᐃΔⵠᐃᐃ: "img/currency4-click.png",
    ⲆⵠⵠⲆⲆⵠᐃ: "img/currency5-out.png",
    ΔᐃᐃⵠᐃΔⲆ: "img/currency5-in.png",
    ⵠⲆⲆⲆᐃΔΔ: "img/currency5-click.png",
    ⵠⲆΔⵠᐃΔΔ: "img/price1-out.png",
    ᐃⵠᐃΔΔⵠⵠ: "img/price1-in.png",
    ⵠⲆⵠΔᐃⲆⵠ: "img/price1-click.png",
    ᐃⲆᐃⵠⲆⵠΔ: "img/price2-out.png",
    ᐃⵠΔᐃⵠΔΔ: "img/price2-in.png",
    ⵠⲆΔⵠⲆᐃⵠ: "img/price2-click.png",
    ⲆⵠᐃᐃⲆⲆΔ: "img/price3-out.png",
    ᐃΔⲆΔΔΔᐃ: "img/price3-in.png",
    ΔⲆⲆⲆⵠΔᐃ: "img/price3-click.png",
    ⵠⲆⲆⵠⵠⲆΔ: "img/price4-out.png",
    ⵠᐃⵠΔⵠⵠⲆ: "img/price4-in.png",
    ⵠⵠⲆⲆΔⵠⲆ: "img/price4-click.png",
    ⲆⲆᐃΔΔᐃⲆ: "img/price5-out.png",
    ⵠᐃᐃⲆᐃⲆⲆ: "img/price5-in.png",
    ᐃⵠΔⵠⲆΔᐃ: "img/price5-click.png",
    ᐃⲆᐃⲆⵠᐃⲆⲆⵠ: "img/buy-private-server-out.png",
    ⲆⵠⵠⵠⲆⲆΔⵠⵠ: "img/buy-private-server-in.png",
    ΔⵠᐃⲆᐃΔⲆᐃⲆ: "img/buy-private-server-click.png",
    ⵠΔⲆΔⵠⲆΔ: "img/atlanta-button-out.png",
    ᐃᐃⵠΔⲆΔⵠ: "img/atlanta-button-in.png",
    ΔⵠΔΔⵠⵠⵠ: "img/atlanta-button-click.png",
    ᐃⲆⲆⲆᐃⵠΔ: "img/los-angeles-button-out.png",
    ΔᐃⵠᐃⲆⵠΔ: "img/los-angeles-button-in.png",
    ⲆᐃᐃⲆⵠᐃⵠ: "img/los-angeles-button-click.png",
    ᐃⲆⵠⲆⵠⲆᐃ: "img/sydney-button-out.png",
    ᐃΔᐃⲆⵠᐃⵠ: "img/sydney-button-in.png",
    ⲆⲆΔΔⲆⵠⵠ: "img/sydney-button-click.png",
    ⵠᐃΔⵠⵠⵠᐃ: "img/frankfurt-button-out.png",
    ⵠΔΔⲆᐃᐃⲆ: "img/frankfurt-button-in.png",
    ⲆᐃᐃⲆΔΔⵠ: "img/frankfurt-button-click.png",
    ᐃᐃⵠΔⲆⵠⵠ: "img/osaka-button-out.png",
    ᐃⲆᐃⵠΔᐃᐃ: "img/osaka-button-in.png",
    ΔᐃΔΔⵠⲆᐃ: "img/osaka-button-click.png",
    ᐃⵠⵠⲆⲆΔⵠⵠⵠ: "img/yes-location-out.png",
    ⲆᐃᐃΔΔᐃⵠᐃⵠ: "img/yes-location-in.png",
    ΔᐃⵠⲆⲆᐃⵠᐃⵠ: "img/yes-location-click.png",
    ᐃΔΔⲆⵠⵠⲆ: "img/3days-button-out.png",
    ⵠⵠᐃⲆⲆⲆΔ: "img/3days-button-in.png",
    ⲆᐃᐃᐃᐃⲆΔ: "img/3days-button-click.png",
    ᐃΔᐃΔᐃⲆⵠ: "img/7days-button-out.png",
    ⵠΔᐃᐃⲆΔᐃ: "img/7days-button-in.png",
    ⵠⵠᐃᐃⲆΔⲆ: "img/7days-button-click.png",
    ΔΔⵠⲆᐃΔᐃ: "img/30days-button-out.png",
    ΔᐃⵠᐃΔᐃᐃ: "img/30days-button-in.png",
    ΔⲆⲆᐃⲆΔΔ: "img/30days-button-click.png",
    ⵠⲆΔΔⲆᐃⲆ: "img/90days-button-out.png",
    ⵠΔᐃᐃᐃΔΔ: "img/90days-button-in.png",
    ΔⵠᐃΔⲆᐃⵠ: "img/90days-button-click.png",
    ᐃᐃᐃⲆᐃΔⵠ: "img/spin1.png",
    ⵠⲆⵠⵠⲆⵠⵠ: "img/spin2.png",
    ⵠⲆΔⵠⲆⲆⵠ: "img/spin3.png",
    ⵠⵠⵠΔⲆΔⵠ: "img/spin4.png",
    Ⲇᐃᐃⵠᐃᐃⵠ: "img/spin5.png",
    ΔⲆᐃⲆⲆΔᐃ: "img/spin6.png",
    ΔⵠⵠΔⲆⲆⵠ: "img/arrow-spin.png",
    ⲆⲆᐃΔⵠΔΔ: "img/spin-button-1-out.png",
    ⲆᐃⵠⲆⲆᐃⲆ: "img/spin-button-1-in.png",
    ΔΔΔⵠⲆⲆⵠ: "img/spin-button-1-click.png",
    ΔⵠΔᐃᐃΔᐃ: "img/spin-button-2-out.png",
    ΔⲆᐃΔΔᐃⵠ: "img/spin-button-2-in.png",
    ⲆⲆⵠⵠⲆⲆⵠ: "img/spin-button-2-click.png",
    ⵠΔⲆⵠⵠⲆΔ: "img/spin-button-3-out.png",
    ΔᐃᐃⲆᐃΔᐃ: "img/spin-button-3-in.png",
    ⵠⵠⵠⲆᐃⲆΔ: "img/spin-button-3-click.png",
    ᐃΔⲆᐃΔᐃⲆ: "img/spin-button-4-out.png",
    ᐃΔⵠⵠΔⲆᐃ: "img/spin-button-4-in.png",
    ⵠᐃⲆⵠⵠᐃΔ: "img/spin-button-4-click.png",
    ⲆᐃⵠΔⲆᐃᐃ: "img/spin-button-5-out.png",
    ⵠΔⲆⵠⵠΔⵠ: "img/spin-button-5-in.png",
    ⵠⵠΔΔⲆⵠⲆ: "img/spin-button-5-click.png",
    ΔᐃΔΔⲆΔᐃ: "img/spin-light.png",
    ⲆⵠⲆΔⲆⵠᐃ: "img/tuto-wiki-out.png",
    ⵠΔΔΔΔΔⵠ: "img/tuto-wiki-in.png",
    ᐃΔⲆΔᐃΔᐃ: "img/tuto-wiki-click.png",
    ᐃⵠⵠᐃⵠᐃⵠ: "img/tuto-previous-out.png",
    ᐃᐃⲆΔⵠⵠΔ: "img/tuto-previous-in.png",
    ᐃΔᐃⲆⵠΔⵠ: "img/tuto-previous-click.png",
    ⲆⵠⲆⵠⵠⲆᐃ: "img/tuto-next-out.png",
    ⲆⲆᐃᐃⲆΔⵠ: "img/tuto-next-in.png",
    ΔⲆᐃΔⵠΔⵠ: "img/tuto-next-click.png",
    ΔⲆⵠᐃΔⵠΔ: "img/time-leaderboard-out.png",
    ⵠΔΔΔᐃⵠΔ: "img/time-leaderboard-in.png",
    ᐃⵠⲆᐃᐃⵠⲆ: "img/time-leaderboard-click.png",
    ⲆΔⲆΔΔΔᐃ: "img/score-leaderboard-out.png",
    ⲆⲆⵠⲆΔᐃΔ: "img/score-leaderboard-in.png",
    ΔΔΔⵠⵠᐃⵠ: "img/score-leaderboard-click.png",
    ᐃΔΔⵠΔⲆⲆ: "img/lvl-leaderboard-out.png",
    ⲆᐃⵠᐃⵠⵠⲆ: "img/lvl-leaderboard-in.png",
    ⲆⲆᐃΔⲆΔⲆ: "img/lvl-leaderboard-click.png",
    ⵠΔᐃⵠᐃᐃᐃ: "img/kill-leaderboard-out.png",
    ΔⲆᐃΔᐃΔΔ: "img/kill-leaderboard-in.png",
    ⲆⵠΔⲆⵠⲆⵠ: "img/kill-leaderboard-click.png",
    ΔⲆΔⲆᐃⵠⲆ: "img/all-leaderboard-out.png",
    ᐃΔⵠΔⲆⲆⲆ: "img/all-leaderboard-in.png",
    ᐃⵠⵠⲆΔⲆⵠ: "img/all-leaderboard-click.png",
    ⵠᐃᐃΔⲆⲆⵠ: "img/today-leaderboard-out.png",
    ⵠΔⵠᐃⲆⲆⲆ: "img/today-leaderboard-in.png",
    Ⲇⵠⵠⵠⵠⵠᐃ: "img/today-leaderboard-click.png",
    ⵠⲆΔⲆΔⲆⵠ: "img/week-leaderboard-out.png",
    ΔᐃΔΔⵠⲆⵠ: "img/week-leaderboard-in.png",
    ⲆᐃᐃΔⲆⵠⵠ: "img/week-leaderboard-click.png",
    ΔⲆᐃⲆⲆⵠΔ: "img/season1-out.png",
    ΔⵠⵠⲆΔᐃᐃ: "img/season1-in.png",
    ⲆⵠⵠⵠⵠΔⵠ: "img/season1-click.png",
    ᐃⵠᐃⲆⵠᐃⵠ: "img/season2-out.png",
    ᐃⲆΔⲆⲆⵠⲆ: "img/season2-in.png",
    ᐃΔᐃⲆⲆᐃⵠ: "img/season2-click.png",
    ⵠΔⵠⵠΔΔⲆ: "img/season3-out.png",
    ⵠⲆⲆΔⲆΔⵠ: "img/season3-in.png",
    ⵠⵠᐃΔΔⲆΔ: "img/season3-click.png",
    ΔΔⲆΔⵠⲆΔ: "img/season4-out.png",
    ΔⵠⵠⵠⵠΔΔ: "img/season4-in.png",
    ⵠᐃΔΔΔⲆⵠ: "img/season4-click.png",
    ⲆΔΔΔⵠⲆΔ: "img/season5-out.png",
    ⲆΔΔⵠᐃⲆᐃ: "img/season5-in.png",
    ⵠⵠⵠⵠⲆᐃⲆ: "img/season5-click.png",
    ᐃⵠⵠΔⵠⲆⵠ: "img/season6-out.png",
    ᐃΔΔⲆⵠᐃΔ: "img/season6-in.png",
    ᐃⵠⲆⲆⵠᐃⲆ: "img/season6-click.png",
    ⵠⵠⲆᐃᐃᐃⵠ: "img/total-lead-out.png",
    ⵠⵠᐃⲆᐃᐃΔ: "img/total-lead-in.png",
    ⲆᐃⲆᐃᐃⵠΔ: "img/total-lead-click.png",
    ⵠΔᐃΔⵠΔΔ: "img/normal-lead-out.png",
    ⲆⵠⵠΔᐃᐃᐃ: "img/normal-lead-in.png",
    ᐃⵠⲆᐃᐃⲆΔ: "img/normal-lead-click.png",
    ΔⲆⲆΔⵠΔΔ: "img/forest-lead-out.png",
    ⲆⵠⲆΔⵠⲆⲆ: "img/forest-lead-in.png",
    ᐃⲆΔΔΔΔΔ: "img/forest-lead-click.png",
    ᐃⲆᐃᐃⲆⲆⵠ: "img/vampire-lead-out.png",
    ⵠⲆⲆⲆΔΔΔ: "img/vampire-lead-in.png",
    ⵠⲆⵠᐃⵠᐃⲆ: "img/vampire-lead-click.png",
    ΔⲆⵠⲆⵠΔᐃ: "img/zombie-lead-out.png",
    ⲆᐃⵠⵠⲆᐃΔ: "img/zombie-lead-in.png",
    ⲆᐃⵠⵠᐃⲆⲆ: "img/zombie-lead-click.png",
    ᐃⵠⲆⵠⵠᐃⵠ: "img/day-level5.png",
    ᐃΔⵠᐃΔᐃᐃ: "img/night-level5.png",
    ᐃᐃΔⲆᐃⲆⵠ: "img/day-level10.png",
    ᐃΔᐃⵠΔᐃΔ: "img/night-level10.png",
    ᐃᐃΔᐃΔΔⲆ: "img/day-level15.png",
    ⲆⵠᐃᐃΔΔⵠ: "img/night-level15.png",
    ⲆⵠᐃⲆⵠΔⵠ: "img/day-level20.png",
    ⵠⵠΔΔΔᐃⵠ: "img/night-level20.png",
    ⵠΔⵠΔᐃⵠⲆ: "img/day-level25.png",
    ΔΔⲆⲆⲆᐃⲆ: "img/night-level25.png",
    ᐃΔᐃᐃⵠΔᐃ: "img/day-level30.png",
    ⵠΔⲆΔΔΔᐃ: "img/night-level30.png",
    ⲆⵠⵠⲆᐃΔΔ: "img/day-level35.png",
    ⲆⲆⲆⲆᐃᐃᐃ: "img/night-level35.png",
    ᐃⲆⲆⲆΔⵠⲆ: "img/day-level40.png",
    ᐃΔⵠⲆᐃⵠⵠ: "img/night-level40.png",
    ⵠᐃΔⵠⵠⵠⵠ: "img/day-level45.png",
    ΔΔᐃᐃⵠΔⵠ: "img/night-level45.png",
    ⲆΔᐃΔΔᐃⲆ: "img/day-level50.png",
    ΔᐃΔᐃⵠΔⲆ: "img/night-level50.png",
    ΔᐃᐃᐃⵠΔⲆ: "img/day-level55.png",
    ΔΔᐃᐃΔᐃⵠ: "img/night-level55.png",
    ⲆⲆΔⵠᐃΔⵠ: "img/day-level60.png",
    ᐃⲆΔᐃⵠⵠΔ: "img/night-level60.png",
    ᐃΔΔΔᐃᐃⵠ: "img/day-skin-devast0.png",
    ⲆⵠᐃⲆᐃΔᐃ: "img/night-skin-devast0.png",
    ⵠΔᐃᐃⵠⲆⲆ: "img/day-hand-devaster.png",
    ᐃⲆⲆⵠⵠᐃᐃ: "img/night-hand-devaster.png",
    ⵠⵠⲆᐃⲆΔᐃ: "img/day-skin-star0.png",
    ΔⲆΔᐃⲆⵠΔ: "img/night-skin-star0.png",
    ᐃᐃΔᐃᐃΔⵠ: "img/day-hand-star0.png",
    ⵠⲆᐃᐃⵠᐃⲆ: "img/night-hand-star0.png",
    ΔᐃⵠⲆⲆΔΔ: "img/day-vampire.png",
    ΔⵠΔⲆΔⲆⲆ: "img/night-vampire.png",
    ΔⵠⵠΔⲆᐃΔ: "img/day-hand-vampire.png",
    ᐃΔΔᐃⵠⲆΔ: "img/night-hand-vampire.png",
    ⵠⲆⵠΔⵠΔᐃ: "img/day-zombie.png",
    ⲆᐃᐃⲆⵠⲆΔ: "img/night-zombie.png",
    ⵠᐃⲆΔⵠⵠⵠ: "img/day-hand-zombie.png",
    ⲆᐃᐃΔⵠΔⵠ: "img/night-hand-zombie.png",
    ΔⵠⵠΔᐃⲆᐃ: "img/day-skin113.png",
    ΔⵠⵠᐃⵠΔⲆ: "img/night-skin113.png",
    ᐃⵠⵠⵠⵠⵠᐃ: "img/day-hand-skin113.png",
    ᐃᐃᐃⲆⲆᐃⲆ: "img/night-hand-skin113.png",
    ΔᐃⲆⵠΔⲆᐃ: "img/day-skin0.png",
    ᐃⲆⵠⲆⲆⵠⵠ: "img/night-skin0.png",
    ⵠⲆᐃΔΔⵠᐃ: "img/day-skin1.png",
    ⵠᐃΔΔⲆⵠΔ: "img/night-skin1.png",
    ⲆⲆⲆᐃΔⵠⵠ: "img/day-skin2.png",
    ΔᐃΔⵠⲆᐃΔ: "img/night-skin2.png",
    ⵠᐃⵠⲆⵠⵠⵠ: "img/day-skin3.png",
    ⵠⲆⵠΔⲆᐃⲆ: "img/night-skin3.png",
    ᐃⵠᐃⲆᐃΔⵠ: "img/day-skin4.png",
    ⲆⲆᐃΔⵠⵠΔ: "img/night-skin4.png",
    ΔⲆⵠΔᐃᐃᐃ: "img/day-skin5.png",
    ᐃᐃⵠΔⲆᐃⲆ: "img/night-skin5.png",
    ⵠⲆᐃᐃⲆⲆⲆ: "img/day-skin6.png",
    ⲆΔⲆᐃΔⵠⵠ: "img/night-skin6.png",
    ΔⲆᐃΔⵠⵠΔ: "img/day-skin7.png",
    ⵠΔΔⵠΔΔⲆ: "img/night-skin7.png",
    ΔⵠⲆᐃⵠⵠᐃ: "img/day-skin8.png",
    ᐃⲆΔᐃⵠⲆᐃ: "img/night-skin8.png",
    ⲆⲆⵠΔⲆⲆⵠ: "img/day-skin9.png",
    ⵠⲆⲆᐃⲆᐃⵠ: "img/night-skin9.png",
    ⵠΔᐃⲆⲆⲆᐃ: "img/day-skin10.png",
    ᐃⲆᐃⵠᐃΔᐃ: "img/night-skin10.png",
    ⲆΔΔΔΔᐃᐃ: "img/day-skin11.png",
    ⲆⵠᐃⲆᐃⵠΔ: "img/night-skin11.png",
    ᐃⵠⲆⵠⵠⲆⵠ: "img/day-skin12.png",
    ⲆΔⵠⵠΔⲆⵠ: "img/night-skin12.png",
    ⲆⲆⲆⲆⵠΔⲆ: "img/day-skin13.png",
    ⲆⵠⲆⵠⵠᐃⲆ: "img/night-skin13.png",
    ⵠⲆⵠⵠᐃⲆⵠ: "img/day-skin14.png",
    ΔⵠᐃⵠᐃΔΔ: "img/night-skin14.png",
    ⵠΔΔⲆΔⲆⲆ: "img/day-skin15.png",
    ᐃΔΔΔⲆⲆⵠ: "img/night-skin15.png",
    ΔΔⵠⵠⲆΔᐃ: "img/day-skin16.png",
    ΔⵠΔⲆΔΔⵠ: "img/night-skin16.png",
    ⲆΔᐃⲆⲆⲆⲆ: "img/day-skin17.png",
    ⲆᐃⲆⲆⵠⲆⵠ: "img/night-skin17.png",
    ΔᐃⵠΔᐃᐃΔ: "img/day-skin18.png",
    ⲆᐃᐃⵠⲆΔⲆ: "img/night-skin18.png",
    ⵠΔⵠⲆⵠⲆᐃ: "img/day-skin19.png",
    ⵠᐃⲆⲆΔᐃⵠ: "img/night-skin19.png",
    ⲆᐃⲆⵠΔⲆⲆ: "img/day-skin20.png",
    ᐃΔⵠᐃⵠΔᐃ: "img/night-skin20.png",
    ⲆⵠⲆⲆᐃⲆΔ: "img/day-skin21.png",
    ΔⲆΔⵠᐃⲆΔ: "img/night-skin21.png",
    ΔⲆΔⵠΔᐃⲆ: "img/day-skin22.png",
    ⲆΔᐃΔⲆⵠΔ: "img/night-skin22.png",
    ΔⲆΔᐃᐃΔⲆ: "img/day-skin23.png",
    ΔⲆΔⲆΔⲆᐃ: "img/night-skin23.png",
    ᐃΔⲆΔⲆⲆᐃ: "img/day-skin24.png",
    ᐃΔΔⲆⲆⲆᐃ: "img/night-skin24.png",
    ᐃⲆᐃⵠⵠⲆΔ: "img/day-skin25.png",
    ᐃⲆᐃᐃᐃⵠᐃ: "img/night-skin25.png",
    ΔΔⲆⲆⲆⵠⲆ: "img/day-skin26.png",
    ᐃⵠᐃⲆⵠⵠⵠ: "img/night-skin26.png",
    ⵠΔΔᐃΔᐃΔ: "img/day-skin27.png",
    ᐃΔᐃⵠⵠⵠⲆ: "img/night-skin27.png",
    ⲆⵠⵠⲆⲆΔᐃ: "img/day-skin28.png",
    ᐃᐃⵠΔᐃΔΔ: "img/night-skin28.png",
    ᐃΔᐃⵠᐃᐃᐃ: "img/day-skin29.png",
    ΔⲆⲆᐃᐃⲆⵠ: "img/night-skin29.png",
    ⲆⵠⲆⲆⵠᐃⵠ: "img/day-skin30.png",
    ΔⵠΔⵠᐃⲆⲆ: "img/night-skin30.png",
    ⵠⵠᐃⲆⲆⵠⲆ: "img/day-skin31.png",
    ⲆΔⵠᐃᐃᐃⵠ: "img/night-skin31.png",
    ⲆⲆⵠᐃⲆⲆᐃ: "img/day-skin32.png",
    ⵠⵠᐃᐃⲆⲆⵠ: "img/night-skin32.png",
    ⵠⵠⵠᐃⲆᐃᐃ: "img/day-skin33.png",
    ⲆΔΔⲆΔᐃΔ: "img/night-skin33.png",
    Δᐃᐃⵠᐃⵠⵠ: "img/day-skin34.png",
    ΔⲆᐃΔΔⵠⲆ: "img/night-skin34.png",
    ΔⲆᐃⵠⵠⲆᐃ: "img/day-skin35.png",
    ⵠΔⵠⲆⵠᐃᐃ: "img/night-skin35.png",
    ⲆⲆⵠᐃΔΔᐃ: "img/day-skin36.png",
    ᐃΔᐃⲆⲆΔΔ: "img/night-skin36.png",
    ⵠᐃⵠⵠⲆΔⵠ: "img/day-skin37.png",
    ᐃΔᐃⲆⲆⲆⲆ: "img/night-skin37.png",
    ⲆⲆᐃⲆΔΔⵠ: "img/day-skin38.png",
    ΔΔΔᐃⵠⵠⲆ: "img/night-skin38.png",
    ⵠⵠⵠΔΔⵠΔ: "img/day-skin39.png",
    ΔᐃⲆⲆΔΔⵠ: "img/night-skin39.png",
    ⲆⲆⵠᐃΔᐃΔ: "img/day-skin40.png",
    ⵠⲆᐃᐃᐃᐃΔ: "img/night-skin40.png",
    ᐃⵠΔⲆⵠⵠᐃ: "img/day-skin41.png",
    ᐃᐃⲆᐃⲆⲆΔ: "img/night-skin41.png",
    ΔΔⲆⲆⵠⵠᐃ: "img/day-skin42.png",
    ᐃⲆⲆⵠΔⲆΔ: "img/night-skin42.png",
    ⲆⲆⵠᐃᐃᐃᐃ: "img/day-skin43.png",
    ⲆΔᐃΔᐃᐃΔ: "img/night-skin43.png",
    ΔⲆⵠⵠⲆᐃⵠ: "img/day-skin44.png",
    ΔⵠΔᐃⲆⵠⵠ: "img/night-skin44.png",
    ⵠⲆΔᐃⲆΔΔ: "img/day-skin45.png",
    ⵠⵠᐃΔⲆΔΔ: "img/night-skin45.png",
    ᐃⵠⵠᐃⲆΔⵠ: "img/day-skin46.png",
    ⵠᐃⲆᐃΔⲆⲆ: "img/night-skin46.png",
    ⲆᐃⲆΔᐃᐃᐃ: "img/day-skin47.png",
    ᐃⵠⵠⵠᐃⵠΔ: "img/night-skin47.png",
    ⲆⵠΔⵠΔᐃᐃ: "img/day-skin48.png",
    ⵠⲆΔⵠᐃⲆⵠ: "img/night-skin48.png",
    ⲆⲆⵠⲆⲆⵠΔ: "img/day-skin49.png",
    ΔⵠⵠⵠⵠΔⵠ: "img/night-skin49.png",
    ΔᐃᐃᐃⲆΔΔ: "img/day-skin50.png",
    ᐃⵠᐃⲆⵠᐃⲆ: "img/night-skin50.png",
    ⲆᐃⲆⵠᐃⵠⵠ: "img/day-skin51.png",
    ⲆⲆΔⵠⲆⲆᐃ: "img/night-skin51.png",
    ΔΔⲆⲆΔⲆᐃ: "img/day-skin52.png",
    ᐃᐃⵠⵠⲆⲆᐃ: "img/night-skin52.png",
    ΔΔΔⵠΔⵠᐃ: "img/day-skin53.png",
    ΔᐃΔⵠⵠⵠΔ: "img/night-skin53.png",
    ΔⲆᐃⵠΔᐃᐃ: "img/day-skin54.png",
    ⵠΔΔΔΔⲆⵠ: "img/night-skin54.png",
    ΔⲆᐃᐃᐃᐃⵠ: "img/day-skin55.png",
    ⵠⲆⵠⵠⲆᐃᐃ: "img/night-skin55.png",
    ⵠΔⵠᐃΔᐃΔ: "img/day-skin56.png",
    ⵠⲆΔⵠⵠⵠᐃ: "img/night-skin56.png",
    ⲆΔⲆⵠⲆΔΔ: "img/day-skin57.png",
    ΔᐃΔΔΔᐃⵠ: "img/night-skin57.png",
    ᐃⵠⵠⲆᐃᐃΔ: "img/day-skin58.png",
    ᐃⵠⵠⲆᐃᐃⲆ: "img/night-skin58.png",
    ⵠⲆⵠⲆⲆⵠⵠ: "img/day-skin59.png",
    ᐃⵠᐃΔⲆⵠᐃ: "img/night-skin59.png",
    ⲆᐃⵠⵠⵠⲆⵠ: "img/day-skin60.png",
    ΔⵠⲆⵠᐃᐃⲆ: "img/night-skin60.png",
    ⲆⵠⲆᐃᐃΔΔ: "img/day-skin61.png",
    ⵠⵠᐃⲆⲆⲆⵠ: "img/night-skin61.png",
    ΔⵠᐃⲆᐃΔᐃ: "img/day-skin62.png",
    ⵠᐃΔᐃΔΔⵠ: "img/night-skin62.png",
    ⵠΔⵠΔⵠⵠᐃ: "img/day-skin63.png",
    Δⵠᐃⵠᐃᐃⵠ: "img/night-skin63.png",
    ⲆᐃⲆᐃΔⲆΔ: "img/day-skin64.png",
    ⲆᐃⲆΔΔⵠⲆ: "img/night-skin64.png",
    ⵠᐃⲆⵠⵠⲆΔ: "img/day-skin65.png",
    ΔᐃᐃᐃΔⲆΔ: "img/night-skin65.png",
    ΔⵠΔⲆΔⵠⵠ: "img/day-skin66.png",
    ᐃΔⲆᐃⲆᐃⲆ: "img/night-skin66.png",
    ⲆⲆⲆⲆΔᐃΔ: "img/day-skin67.png",
    ⲆⵠΔᐃⵠᐃⲆ: "img/night-skin67.png",
    ᐃΔΔⵠᐃⵠⲆ: "img/day-skin68.png",
    ⵠᐃⵠⵠΔΔΔ: "img/night-skin68.png",
    ΔΔⲆⵠⵠΔⵠ: "img/day-skin69.png",
    ⲆΔⲆᐃⲆⲆⵠ: "img/night-skin69.png",
    ⵠΔΔⵠΔⲆΔ: "img/day-skin70.png",
    ⲆⲆⵠⵠᐃⲆᐃ: "img/night-skin70.png",
    ⵠᐃⵠⵠⲆⵠⲆ: "img/day-skin71.png",
    ⲆⲆᐃᐃΔⵠⵠ: "img/night-skin71.png",
    ᐃΔⲆᐃΔᐃΔ: "img/day-skin72.png",
    ⲆⵠⲆᐃⲆⵠᐃ: "img/night-skin72.png",
    ΔⵠⵠᐃΔⵠΔ: "img/day-skin73.png",
    ⵠΔⵠᐃᐃΔᐃ: "img/night-skin73.png",
    ΔⲆᐃⵠᐃΔⵠ: "img/day-skin74.png",
    ⵠⵠⲆᐃⵠᐃΔ: "img/night-skin74.png",
    ΔΔⵠⲆΔΔᐃ: "img/day-skin75.png",
    ΔᐃⲆⵠⵠΔᐃ: "img/night-skin75.png",
    ⵠᐃⲆⵠⵠⵠⵠ: "img/day-skin76.png",
    ⵠⵠⵠᐃΔΔⲆ: "img/night-skin76.png",
    ⲆⲆⲆΔⲆΔⲆ: "img/day-skin77.png",
    ᐃᐃΔᐃⵠΔⵠ: "img/night-skin77.png",
    ΔᐃᐃⵠⵠⲆᐃ: "img/day-skin78.png",
    ΔⲆⵠⵠⵠΔⵠ: "img/night-skin78.png",
    ⲆᐃⵠⵠⵠᐃΔ: "img/day-skin79.png",
    ᐃᐃΔΔᐃⲆⵠ: "img/night-skin79.png",
    ⲆΔⲆΔΔΔⲆ: "img/day-skin80.png",
    ᐃᐃⲆΔⲆⵠᐃ: "img/night-skin80.png",
    ⲆⲆΔⵠⵠᐃΔ: "img/day-skin81.png",
    ⲆᐃⲆΔⲆᐃΔ: "img/night-skin81.png",
    ⲆΔᐃᐃⲆⵠⲆ: "img/day-skin82.png",
    ᐃⲆⲆΔᐃᐃΔ: "img/night-skin82.png",
    ⵠⵠⲆⵠΔⵠΔ: "img/day-skin83.png",
    ⲆᐃΔΔᐃΔⲆ: "img/night-skin83.png",
    ᐃⲆⵠΔᐃᐃⲆ: "img/day-skin84.png",
    ᐃᐃᐃⵠⵠΔΔ: "img/night-skin84.png",
    ᐃᐃⲆᐃᐃΔΔ: "img/day-skin85.png",
    ⲆⵠᐃᐃⲆⵠΔ: "img/night-skin85.png",
    ⵠⲆⵠᐃⵠⵠᐃ: "img/day-skin86.png",
    ΔᐃⵠΔⲆⲆΔ: "img/night-skin86.png",
    ᐃⲆᐃᐃⵠΔᐃ: "img/day-skin87.png",
    ΔⲆⲆᐃⵠᐃⵠ: "img/night-skin87.png",
    ᐃᐃΔᐃᐃⲆⵠ: "img/day-skin88.png",
    ⵠΔⵠⵠΔᐃΔ: "img/night-skin88.png",
    ⵠⵠΔᐃⲆⵠⲆ: "img/day-skin89.png",
    ⵠΔⵠΔΔⵠⵠ: "img/night-skin89.png",
    ⵠⲆⵠⵠΔᐃΔ: "img/day-skin90.png",
    ⵠᐃⵠΔΔΔⲆ: "img/night-skin90.png",
    ⲆΔⲆΔⵠⵠⵠ: "img/day-skin91.png",
    ⲆΔΔᐃⲆᐃᐃ: "img/night-skin91.png",
    ᐃᐃⲆᐃΔⵠᐃ: "img/day-skin92.png",
    ᐃᐃⵠΔᐃⲆⲆ: "img/night-skin92.png",
    ⵠⵠⵠⵠⲆⵠⲆ: "img/day-skin93.png",
    ᐃΔⲆⲆΔΔᐃ: "img/night-skin93.png",
    ⲆΔᐃᐃΔᐃΔ: "img/day-skin94.png",
    ΔⵠⵠⵠⲆᐃΔ: "img/night-skin94.png",
    ⲆΔᐃΔⲆᐃⵠ: "img/day-skin95.png",
    ΔᐃⵠⵠⵠⲆᐃ: "img/night-skin95.png",
    ΔⲆⲆᐃᐃⵠⵠ: "img/day-skin96.png",
    ⲆΔᐃⵠΔⵠⲆ: "img/night-skin96.png",
    ⵠⵠᐃΔᐃΔⵠ: "img/day-skin97.png",
    ΔΔⵠΔᐃⵠⲆ: "img/night-skin97.png",
    ᐃᐃΔΔⵠᐃᐃ: "img/day-skin98.png",
    ΔⵠΔⵠᐃᐃⲆ: "img/night-skin98.png",
    ᐃΔⲆⲆΔᐃᐃ: "img/day-skin99.png",
    ⲆⲆΔⲆⵠⵠⲆ: "img/night-skin99.png",
    ΔᐃᐃⵠⲆⲆⵠ: "img/day-skin100.png",
    ᐃⵠᐃᐃⲆᐃⵠ: "img/night-skin100.png",
    ⵠⲆᐃΔⵠᐃᐃ: "img/day-skin101.png",
    ⲆⲆᐃⵠⵠⲆⵠ: "img/night-skin101.png",
    ⲆⲆⲆᐃᐃⲆΔ: "img/day-skin102.png",
    ⵠⲆΔᐃΔᐃⲆ: "img/night-skin102.png",
    ⵠⵠⵠΔᐃΔΔ: "img/day-skin103.png",
    ᐃᐃᐃΔⵠΔⲆ: "img/night-skin103.png",
    ᐃΔΔⲆᐃΔⵠ: "img/day-skin104.png",
    ᐃᐃΔᐃⲆᐃⲆ: "img/night-skin104.png",
    ⲆⵠᐃΔⲆⵠⲆ: "img/day-skin105.png",
    ᐃΔΔΔΔΔⲆ: "img/night-skin105.png",
    ᐃᐃⲆᐃⵠᐃⲆ: "img/day-skin106.png",
    ᐃΔᐃᐃΔⵠΔ: "img/night-skin106.png",
    ᐃΔᐃᐃΔΔⲆ: "img/day-skin107.png",
    ⲆⲆⲆⵠᐃΔⲆ: "img/night-skin107.png",
    ᐃⵠΔᐃⵠⲆΔ: "img/day-skin108.png",
    ᐃⲆⲆΔᐃⲆΔ: "img/night-skin108.png",
    ΔⲆⲆᐃⲆⲆⵠ: "img/day-skin109.png",
    ⵠⵠⵠΔΔΔΔ: "img/night-skin109.png",
    ᐃΔⵠⲆᐃⲆΔ: "img/day-skin110.png",
    ΔⲆⲆΔᐃᐃⵠ: "img/night-skin110.png",
    ᐃⵠⵠⲆΔΔⵠ: "img/day-skin111.png",
    ⲆᐃⵠᐃᐃⲆᐃ: "img/night-skin111.png",
    ᐃⵠⲆⲆΔΔᐃ: "img/day-skin112.png",
    ΔⵠⵠᐃⲆᐃΔ: "img/night-skin112.png",
    ⲆⵠⵠⵠⲆᐃⵠᐃᐃ: "img/day-skin113.png",
    ᐃΔΔⵠⵠΔΔΔΔ: "img/night-skin113.png",
    ᐃΔⵠΔⵠⲆⲆ: "img/day-skin114.png",
    ΔⵠⲆᐃⲆⲆⲆ: "img/night-skin114.png",
    ⵠΔⲆⵠΔΔΔ: "img/day-skin115.png",
    ⲆⵠᐃΔᐃⵠⲆ: "img/night-skin115.png",
    ᐃⲆΔΔΔⵠᐃ: "img/day-skin116.png",
    ⵠΔΔⵠⵠΔⵠ: "img/night-skin116.png",
    ΔⲆᐃⲆΔⲆᐃ: "img/day-skin117.png",
    ⵠᐃⲆⵠΔⵠΔ: "img/night-skin117.png",
    ⲆᐃᐃᐃᐃⵠΔ: "img/day-skin118.png",
    ΔⲆΔⲆᐃᐃΔ: "img/night-skin118.png",
    ⵠⲆⵠⵠⵠᐃⵠ: "img/day-skin119.png",
    ᐃⵠⵠΔΔᐃᐃ: "img/night-skin119.png",
    ⵠⲆⲆᐃᐃⵠⵠ: "img/day-skin120.png",
    ΔᐃᐃⲆΔⵠΔ: "img/night-skin120.png",
    ΔⲆⵠⲆⲆⵠᐃ: "img/day-skin121.png",
    ⲆⵠⲆΔᐃⲆΔ: "img/night-skin121.png",
    ΔᐃⵠᐃᐃⲆⲆ: "img/day-skin122.png",
    ⵠᐃΔᐃᐃⵠᐃ: "img/night-skin122.png",
    ⵠᐃΔᐃᐃᐃᐃ: "img/day-skin123.png",
    ᐃⲆⵠᐃᐃᐃᐃ: "img/night-skin123.png",
    ⲆⲆᐃΔⵠⵠᐃ: "img/day-skin124.png",
    ⵠᐃΔⲆⵠⵠᐃ: "img/night-skin124.png",
    ΔᐃΔᐃⵠⵠⵠ: "img/day-skin125.png",
    ⵠⵠΔΔΔⵠⵠ: "img/night-skin125.png",
    ⵠⵠΔⲆΔⵠᐃ: "img/day-skin126.png",
    ⵠᐃΔΔⲆᐃᐃ: "img/night-skin126.png",
    ⲆⵠᐃΔⲆΔⲆ: "img/day-skin127.png",
    ⵠⲆΔⲆⵠⵠⵠ: "img/night-skin127.png",
    ᐃΔΔᐃᐃΔᐃ: "img/day-skin128.png",
    ᐃᐃΔⵠᐃΔΔ: "img/night-skin128.png",
    ΔΔⲆΔⲆΔⲆ: "img/day-skin129.png",
    ΔⲆⲆᐃⲆΔⲆ: "img/night-skin129.png",
    ΔⲆᐃᐃΔⵠᐃ: "img/day-skin130-1.png",
    ⲆᐃΔⵠΔⵠⲆ: "img/night-skin130-1.png",
    ⵠⲆᐃΔᐃΔⲆ: "img/day-skin131.png",
    ᐃⲆᐃⲆᐃⲆᐃ: "img/night-skin131.png",
    ⲆΔᐃⵠⵠᐃΔ: "img/day-skin132.png",
    ΔⵠⲆΔⲆⵠΔ: "img/night-skin132.png",
    ΔⵠⵠⲆⵠⵠᐃ: "img/day-skin133.png",
    ⲆᐃⲆⵠᐃⲆΔ: "img/night-skin133.png",
    ΔⵠⲆⵠΔΔⲆ: "img/day-skin134.png",
    ᐃΔⲆᐃΔᐃⵠ: "img/night-skin134.png",
    ᐃⲆⵠᐃᐃΔᐃ: "img/day-skin135.png",
    ᐃⲆΔⵠⲆᐃᐃ: "img/night-skin135.png",
    ᐃᐃⵠⲆⵠΔⵠ: "img/day-skin136.png",
    ΔⲆⲆⲆΔᐃⵠ: "img/night-skin136.png",
    ΔΔⲆΔⵠΔⵠ: "img/day-skin137.png",
    ⲆΔᐃⵠΔᐃⲆ: "img/night-skin137.png",
    ⲆΔᐃⵠⲆⲆᐃ: "img/day-skin138.png",
    ΔᐃᐃΔⲆⲆⵠ: "img/night-skin138.png",
    ᐃⵠⲆⲆᐃΔᐃ: "img/day-skin139.png",
    ⵠᐃⵠΔᐃᐃⵠ: "img/night-skin139.png",
    ⵠᐃⲆΔᐃⲆⲆ: "img/day-skin140.png",
    ᐃⲆΔᐃᐃΔΔ: "img/night-skin140.png",
    ⵠᐃΔⵠⵠⵠⲆ: "img/day-skin141.png",
    ⲆᐃΔᐃΔΔⲆ: "img/night-skin141.png",
    ⵠⵠⲆⲆⲆⲆⵠ: "img/day-skin142.png",
    ᐃⲆᐃⲆᐃⵠᐃ: "img/night-skin142.png",
    ⵠⵠⵠⲆᐃᐃⵠ: "img/day-skin143.png",
    ΔⲆΔⵠᐃᐃᐃ: "img/night-skin143.png",
    ᐃⲆΔⵠΔΔΔ: "img/day-skin144.png",
    ᐃΔⲆᐃᐃⵠΔ: "img/night-skin144.png",
    ⲆⲆΔⵠⵠⵠΔ: "img/day-skin145.png",
    ΔΔⲆⵠᐃΔΔ: "img/night-skin145.png",
    ⲆⵠΔⲆᐃΔΔ: "img/day-skin146.png",
    ΔⲆⲆⲆⵠⵠΔ: "img/night-skin146.png",
    ΔⲆⵠⲆⲆΔⲆ: "img/day-skin147.png",
    ⵠΔⵠⲆⵠⵠᐃ: "img/night-skin147.png",
    ⲆᐃΔΔⲆᐃΔ: "img/day-skin148.png",
    ⵠᐃⵠⵠⲆⲆⲆ: "img/night-skin148.png",
    ⲆᐃᐃΔⲆᐃᐃ: "img/day-skin149.png",
    ᐃΔΔⲆⲆⲆΔ: "img/night-skin149.png",
    ⲆΔᐃᐃⵠⵠⵠ: "img/day-skin150.png",
    ⲆⵠⵠΔⵠΔⵠ: "img/night-skin150.png",
    ⲆᐃⲆⲆⲆΔᐃ: "img/day-skin151.png",
    ᐃΔᐃⲆⲆⲆΔ: "img/night-skin151.png",
    ⵠΔΔᐃⲆᐃⵠ: "img/day-skin152.png",
    ᐃᐃⵠΔⵠⵠᐃ: "img/night-skin152.png",
    ᐃᐃⲆΔⲆⵠΔ: "img/day-skin153.png",
    ΔᐃⲆⵠᐃᐃⲆ: "img/night-skin153.png",
    ᐃⵠᐃᐃⵠⲆⲆ: "img/day-skin154.png",
    ΔⲆⲆⵠΔⵠⲆ: "img/night-skin154.png",
    ᐃΔᐃⵠΔⲆΔ: "img/day-skin155.png",
    ΔⵠΔᐃᐃΔΔ: "img/night-skin155.png",
    ⲆⲆⵠⵠᐃⲆΔ: "img/day-skin156.png",
    ⲆΔⵠᐃⵠᐃΔ: "img/night-skin156.png",
    ΔⲆΔⵠᐃⵠΔ: "img/day-skin157.png",
    ⲆΔⵠΔⵠᐃΔ: "img/night-skin157.png",
    ΔⵠⵠΔⲆᐃⲆ: "img/day-skin158.png",
    ΔᐃᐃΔⵠᐃΔ: "img/night-skin158.png",
    ᐃΔΔΔⲆⲆᐃ: "img/day-skin159.png",
    ⵠΔⲆᐃΔⲆΔ: "img/night-skin159.png",
    ⵠΔΔΔⲆΔⵠ: "img/day-skin160.png",
    ᐃⲆᐃᐃΔⲆΔ: "img/night-skin160.png",
    ᐃΔΔᐃⲆⲆᐃ: "img/day-skin161.png",
    ᐃᐃᐃᐃⵠᐃΔ: "img/night-skin161.png",
    ⵠⲆᐃᐃⲆⵠⲆ: "img/day-skin162.png",
    ⵠⵠᐃⵠᐃΔΔ: "img/night-skin162.png",
    ⲆᐃᐃⲆᐃᐃᐃ: "img/day-skin163.png",
    ⵠⵠᐃᐃᐃⲆᐃ: "img/night-skin163.png",
    ⲆⵠᐃΔᐃᐃΔ: "img/day-skin164.png",
    ⵠᐃⲆΔⵠᐃⵠ: "img/night-skin164.png",
    ⲆⲆⲆΔⲆⲆΔ: "img/day-skin165.png",
    ᐃΔᐃⲆⲆⵠΔ: "img/night-skin165.png",
    ⵠΔⵠΔⲆΔᐃ: "img/day-skin166.png",
    ᐃⵠΔΔⲆⵠΔ: "img/night-skin166.png",
    ᐃᐃⲆⵠⲆᐃΔ: "img/day-skin167.png",
    ⵠⵠⲆᐃΔⲆⲆ: "img/night-skin167.png",
    ⲆⵠΔⲆⵠⵠᐃ: "img/day-skin168.png",
    ΔΔⲆⲆᐃᐃⵠ: "img/night-skin168.png",
    ⲆᐃⲆⵠΔᐃⵠ: "img/day-skin169.png",
    ΔⵠⲆΔⲆΔⲆ: "img/night-skin169.png",
    ⲆⵠᐃⲆΔΔΔ: "img/day-skin170.png",
    ⵠⵠⲆΔⵠⲆⵠ: "img/night-skin170.png",
    ⵠⵠⵠΔᐃΔⵠ: "img/day-skin171.png",
    ΔⵠⲆⲆᐃΔᐃ: "img/night-skin171.png",
    ⲆⲆΔᐃᐃΔᐃ: "img/day-skin172.png",
    ⵠⲆⲆⵠⲆΔᐃ: "img/night-skin172.png",
    ᐃᐃΔⲆⲆᐃᐃ: "img/day-skin173.png",
    ΔᐃⲆᐃΔⵠⵠ: "img/night-skin173.png",
    ᐃᐃᐃⲆⲆᐃΔ: "img/day-skin174.png",
    ᐃⲆⵠⲆᐃⵠⵠ: "img/night-skin174.png",
    ⲆᐃⲆⲆᐃⵠⲆ: "img/day-skin175.png",
    ⲆⲆᐃᐃⲆⲆⵠ: "img/night-skin175.png",
    ⵠⲆⲆΔⲆᐃⲆ: "img/day-skin176.png",
    ⲆΔᐃᐃⲆᐃⵠ: "img/night-skin176.png",
    ⵠⲆΔⵠᐃⵠᐃ: "img/day-skin177.png",
    ΔᐃΔΔⵠⵠΔ: "img/night-skin177.png",
    ΔΔⵠⵠⵠⲆⵠ: "img/day-skin178.png",
    ΔᐃⲆᐃⲆⵠΔ: "img/night-skin178.png",
    ⲆⲆⲆᐃⵠᐃΔ: "img/day-skin179.png",
    ΔΔⵠⵠΔⲆᐃ: "img/night-skin179.png",
    ⵠⲆⲆΔⲆⲆΔ: "img/day-skin180.png",
    ⲆᐃΔΔⵠΔΔ: "img/night-skin180.png",
    ΔᐃⵠⵠⵠΔΔ: "img/day-skin181.png",
    ᐃᐃᐃΔᐃᐃΔ: "img/night-skin181.png",
    ⵠΔⵠΔᐃΔⲆ: "img/day-skin182.png",
    ⵠΔΔⲆᐃⲆΔ: "img/night-skin182.png",
    ⵠᐃⵠᐃⲆⵠⵠ: "img/day-skin183.png",
    ᐃΔⵠⵠⵠⲆΔ: "img/night-skin183.png",
    ᐃΔⲆΔⲆⲆⲆ: "img/day-skin184.png",
    ΔΔΔᐃΔᐃⵠ: "img/night-skin184.png",
    ΔΔᐃⲆⲆΔᐃ: "img/day-skin185.png",
    ᐃⲆⲆΔᐃΔⲆ: "img/night-skin185.png",
    ⲆΔⲆᐃᐃΔⵠ: "img/day-skin186.png",
    ⵠᐃⲆΔⵠΔΔ: "img/night-skin186.png",
    ⵠⵠᐃᐃΔⵠᐃ: "img/day-skin187.png",
    ΔⵠⲆⵠⲆᐃΔ: "img/night-skin187.png",
    ⵠⲆᐃᐃⵠⲆᐃ: "img/day-skin188.png",
    ⲆⲆᐃⵠΔⲆΔ: "img/night-skin188.png",
    ⵠᐃⵠᐃΔΔᐃ: "img/day-skin189.png",
    ΔⲆⵠᐃⲆΔⵠ: "img/night-skin189.png",
    ΔᐃᐃⲆᐃⵠⲆ: "img/day-skin190.png",
    ⵠᐃᐃᐃⲆΔⲆ: "img/night-skin190.png",
    ⲆⲆΔΔⵠΔᐃ: "img/day-skin191.png",
    ⵠⲆⲆΔΔΔⲆ: "img/night-skin191.png",
    ᐃᐃⲆᐃΔⲆᐃ: "img/day-skin192.png",
    ⵠᐃⲆᐃᐃᐃΔ: "img/night-skin192.png",
    ⲆⵠᐃᐃⲆΔⲆ: "img/day-skin193.png",
    ⵠⵠⲆᐃΔⲆⵠ: "img/night-skin193.png",
    ⵠⲆᐃⲆⵠⲆⲆ: "img/day-skin194.png",
    ⵠΔⵠᐃⵠΔΔ: "img/night-skin194.png",
    ᐃᐃΔⵠᐃⵠⵠ: "img/day-skin195.png",
    ⲆΔΔᐃⲆⵠΔ: "img/night-skin195.png",
    ⵠΔⲆΔⵠΔᐃ: "img/day-skin196.png",
    ᐃⲆᐃᐃⲆᐃⵠ: "img/night-skin196.png",
    ⵠΔⵠΔᐃⵠⵠ: "img/day-skin197.png",
    ⲆⲆⲆᐃⵠᐃᐃ: "img/night-skin197.png",
    ⲆⲆᐃΔᐃⵠΔ: "img/day-skin198.png",
    ⲆᐃⲆⲆⲆⲆⵠ: "img/night-skin198.png",
    ΔᐃᐃⵠⵠᐃⲆ: "img/day-skin199.png",
    ΔⵠᐃΔⵠⵠᐃ: "img/night-skin199.png",
    ΔⵠΔⵠᐃΔⲆ: "img/day-skin200.png",
    ⲆⵠΔⵠⲆⲆⲆ: "img/night-skin200.png",
    ΔⲆⵠᐃΔᐃᐃ: "img/day-skin201.png",
    ⲆⲆⵠⵠⲆᐃⲆ: "img/night-skin201.png",
    ᐃΔⲆΔΔⲆᐃ: "img/day-skin202.png",
    ⲆⲆΔⲆⲆⵠΔ: "img/night-skin202.png",
    ⵠⲆⲆᐃⵠᐃⲆ: "img/day-skin203.png",
    ⵠΔⲆⲆⵠᐃᐃ: "img/night-skin203.png",
    ᐃⵠⲆⵠⲆΔⵠ: "img/day-skin204.png",
    ΔⵠᐃⲆⵠᐃᐃ: "img/night-skin204.png",
    ⲆΔⵠΔⵠΔⲆ: "img/day-skin205.png",
    ⵠΔⵠᐃΔⵠᐃ: "img/night-skin205.png",
    Ⲇᐃⵠᐃⵠᐃᐃ: "img/day-skin206.png",
    ΔᐃⵠΔΔᐃⲆ: "img/night-skin206.png",
    ⲆᐃᐃΔΔⲆᐃ: "img/day-skin207.png",
    ΔΔᐃΔΔⲆΔ: "img/night-skin207.png",
    ⲆⵠᐃΔⲆᐃΔ: "img/day-skin208.png",
    ᐃⲆⵠⲆΔⲆⵠ: "img/night-skin208.png",
    ᐃΔⵠⲆΔΔⲆ: "img/day-skin209.png",
    ᐃⵠⲆⲆⲆΔⲆ: "img/night-skin209.png",
    ⲆⵠⲆⲆᐃᐃΔ: "img/day-skin210.png",
    ᐃΔΔΔΔⲆⵠ: "img/night-skin210.png",
    ⲆᐃᐃᐃⵠⲆⵠ: "img/day-skin211.png",
    ΔᐃΔΔΔΔΔ: "img/night-skin211.png",
    ⲆⲆⲆⵠᐃⲆⲆ: "img/day-skin212.png",
    ᐃᐃᐃⵠᐃᐃⲆ: "img/night-skin212.png",
    ⲆⲆᐃᐃᐃΔΔ: "img/day-skin213.png",
    ΔΔⵠⲆΔΔⲆ: "img/night-skin213.png",
    ΔⲆⵠᐃΔⵠⵠ: "img/day-skin214.png",
    ⲆΔⵠΔⵠⲆⵠ: "img/night-skin214.png",
    ᐃⵠΔⵠⵠⲆⵠ: "img/day-hand-skin0.png",
    ᐃⲆⲆⵠⵠΔⲆ: "img/night-hand-skin0.png",
    ΔⵠᐃⵠᐃⲆᐃ: "img/day-hand-skin1.png",
    ᐃⲆᐃⵠΔⵠⲆ: "img/night-hand-skin1.png",
    ΔᐃⵠᐃⲆⵠⵠ: "img/day-hand-skin2.png",
    ΔⵠᐃⵠΔⵠΔ: "img/night-hand-skin2.png",
    ᐃΔⲆΔⵠⲆⲆ: "img/day-hand-skin3.png",
    ⲆᐃᐃⵠΔⵠΔ: "img/night-hand-skin3.png",
    ⲆⲆᐃᐃΔⲆⲆ: "img/day-hand-skin4.png",
    ⵠΔⲆᐃΔⵠΔ: "img/night-hand-skin4.png",
    ⵠⵠΔⲆⲆⵠⲆ: "img/day-hand-skin5.png",
    ⵠⲆⲆΔⵠⵠᐃ: "img/night-hand-skin5.png",
    ⵠⵠⵠⵠⲆΔⵠ: "img/day-hand-skin6.png",
    ⲆⲆⲆⲆᐃᐃⵠΔᐃ: "img/night-hand-skin6.png",
    ᐃΔΔⵠΔⲆᐃ: "img/day-hand-skin6.png",
    ⵠⲆΔⵠΔⲆᐃ: "img/night-hand-skin6.png",
    ᐃᐃΔᐃⵠⲆᐃ: "img/day-hand-skin8.png",
    ⲆⵠΔⵠΔᐃΔ: "img/night-hand-skin8.png",
    ᐃᐃΔⵠΔⵠⵠ: "img/day-hand-skin9.png",
    ᐃⵠⲆᐃⵠⵠΔ: "img/night-hand-skin9.png",
    ⲆᐃⲆⵠⵠⵠΔ: "img/day-hand-skin10.png",
    ⲆⵠⵠΔⵠᐃᐃ: "img/night-hand-skin10.png",
    ⲆⲆΔΔΔⲆⲆ: "img/day-hand-skin11.png",
    ΔᐃΔᐃⲆᐃⵠ: "img/night-hand-skin11.png",
    ΔⵠΔⲆΔⲆᐃ: "img/day-hand-skin12.png",
    Ⲇᐃⵠᐃᐃᐃᐃ: "img/night-hand-skin12.png",
    ΔⲆᐃᐃΔⵠⲆ: "img/day-hand-skin13.png",
    ᐃΔⵠΔⵠⲆᐃ: "img/night-hand-skin13.png",
    ⲆᐃΔᐃᐃᐃⵠ: "img/day-hand-skin14.png",
    ⵠⲆΔⵠᐃⵠⲆ: "img/night-hand-skin14.png",
    ᐃΔⲆΔⵠⵠⵠ: "img/day-hand-skin15.png",
    ΔⵠΔᐃΔⲆᐃ: "img/night-hand-skin15.png",
    ᐃⵠΔΔⲆⵠᐃ: "img/day-hand-skin16.png",
    ⵠᐃⵠᐃⲆᐃⵠ: "img/night-hand-skin16.png",
    ⵠⲆΔᐃᐃⲆΔ: "img/day-hand-skin17.png",
    ⲆⲆⵠⵠⵠⵠᐃ: "img/night-hand-skin17.png",
    ᐃᐃⵠⲆⲆⲆⲆ: "img/day-hand-skin18.png",
    ΔⲆΔΔⵠΔⲆ: "img/night-hand-skin18.png",
    Δᐃᐃᐃⵠⵠⵠ: "img/day-hand-skin19.png",
    ⲆᐃⵠΔᐃΔΔ: "img/night-hand-skin19.png",
    ᐃⲆᐃᐃⵠΔⲆ: "img/day-hand-skin20.png",
    ΔΔⵠᐃᐃⵠᐃ: "img/night-hand-skin20.png",
    ⲆΔⵠⵠΔΔⲆ: "img/day-hand-skin21.png",
    ⲆᐃᐃᐃⵠⲆⲆ: "img/night-hand-skin21.png",
    ⵠᐃⲆⲆΔⵠⲆ: "img/day-hand-skin22.png",
    ⵠᐃᐃᐃᐃᐃΔ: "img/night-hand-skin22.png",
    ᐃΔⲆⲆⵠᐃⵠ: "img/day-hand-skin23.png",
    ⲆᐃⲆⵠᐃᐃᐃ: "img/night-hand-skin23.png",
    ⵠⵠⵠΔⵠᐃᐃ: "img/day-hand-skin24.png",
    ⵠᐃᐃᐃⵠⲆⵠ: "img/night-hand-skin24.png",
    ᐃⲆΔΔⵠΔⵠ: "img/day-hand-skin25.png",
    ⵠⵠΔⲆⵠⲆⲆ: "img/night-hand-skin25.png",
    ⲆⲆΔⲆΔΔΔ: "img/day-hand-skin26.png",
    ΔⲆΔᐃⵠᐃᐃ: "img/night-hand-skin26.png",
    ᐃᐃⲆⲆΔΔⵠ: "img/day-hand-skin27.png",
    ⲆⲆⲆⲆⲆⲆᐃ: "img/night-hand-skin27.png",
    ⲆΔΔᐃⲆᐃⵠ: "img/day-hand-skin28.png",
    ⵠⵠᐃᐃⲆⲆᐃ: "img/night-hand-skin28.png",
    ᐃⵠⵠⵠΔⵠⲆ: "img/day-hand-skin29.png",
    ΔⲆΔᐃⲆΔᐃ: "img/night-hand-skin29.png",
    ⲆΔⵠⵠⵠᐃⵠ: "img/day-hand-skin30.png",
    ᐃⲆᐃⵠⲆᐃᐃ: "img/night-hand-skin30.png",
    ⵠⵠΔⵠᐃᐃᐃ: "img/day-hand-skin31.png",
    ⲆⲆΔΔⵠⲆⲆ: "img/night-hand-skin31.png",
    ⵠᐃΔᐃⵠΔΔ: "img/day-hand-skin32.png",
    ᐃⵠᐃⲆᐃⲆᐃ: "img/night-hand-skin32.png",
    ᐃⲆᐃⲆⵠΔⲆ: "img/day-hand-skin33.png",
    ᐃⵠⲆΔᐃⵠΔ: "img/night-hand-skin33.png",
    ᐃΔⲆᐃᐃΔᐃ: "img/day-hand-skin34.png",
    ΔΔᐃⵠⲆⵠⵠ: "img/night-hand-skin34.png",
    ΔⲆⲆⲆᐃⲆⲆ: "img/day-hand-skin35.png",
    ⲆᐃⵠⵠⵠΔΔ: "img/night-hand-skin35.png",
    ᐃⲆⵠⵠΔᐃΔ: "img/day-hand-skin36.png",
    ⵠⲆᐃΔΔⲆΔ: "img/night-hand-skin36.png",
    ᐃᐃᐃᐃⵠⲆⲆ: "img/day-hand-skin37.png",
    ΔᐃⵠⵠᐃⲆΔ: "img/night-hand-skin37.png",
    ᐃⲆⵠⵠΔᐃⲆ: "img/day-hand-skin38.png",
    ΔⲆᐃΔᐃΔⲆ: "img/night-hand-skin38.png",
    ᐃΔⲆΔᐃᐃⵠ: "img/day-hand-skin39.png",
    ᐃⵠⲆΔᐃΔⵠ: "img/night-hand-skin39.png",
    ΔⵠⲆᐃΔᐃᐃ: "img/day-hand-skin40.png",
    ΔⲆⲆᐃⲆᐃᐃ: "img/night-hand-skin40.png",
    ΔΔⵠΔΔⲆΔ: "img/day-hand-skin41.png",
    ⲆⲆᐃᐃⲆΔⲆ: "img/night-hand-skin41.png",
    Δᐃⵠᐃⵠⵠⵠ: "img/day-hand-skin42.png",
    ΔⵠⲆᐃⵠⵠΔ: "img/night-hand-skin42.png",
    ⵠⵠᐃⲆⲆⵠΔ: "img/day-hand-skin43.png",
    ⲆⲆⵠⵠⵠᐃΔ: "img/night-hand-skin43.png",
    ⵠⵠΔΔⲆᐃⲆ: "img/day-hand-skin16.png",
    ᐃⵠᐃⲆⲆᐃᐃ: "img/night-hand-skin16.png",
    ⵠᐃᐃΔⲆⵠΔ: "img/day-hand-skin45.png",
    ⵠΔⵠⵠᐃⲆⲆ: "img/night-hand-skin45.png",
    ⲆᐃⲆⵠⲆⵠΔ: "img/day-hand-skin46.png",
    ΔΔⵠⲆⲆΔᐃ: "img/night-hand-skin46.png",
    ⵠⵠΔⵠⲆᐃⵠ: "img/day-hand-skin47.png",
    ⵠΔⵠᐃᐃⵠᐃ: "img/night-hand-skin47.png",
    ΔΔⲆΔᐃᐃΔ: "img/day-hand-skin48.png",
    ⲆΔⵠᐃⵠΔΔ: "img/night-hand-skin48.png",
    ΔⲆΔᐃⲆⲆᐃ: "img/day-hand-skin49.png",
    ⵠΔⵠⵠⵠⵠΔ: "img/night-hand-skin49.png",
    ᐃⵠΔΔⲆᐃⵠ: "img/day-hand-skin49.png",
    ⵠᐃⲆⵠΔᐃΔ: "img/night-hand-skin49.png",
    ᐃⲆΔⲆᐃⵠⵠ: "img/day-hand-skin51.png",
    ᐃⲆⵠⵠⲆΔⵠ: "img/night-hand-skin51.png",
    ᐃⲆⵠⲆΔⵠⵠ: "img/day-hand-skin52.png",
    ΔⲆⵠΔⲆΔⲆ: "img/night-hand-skin52.png",
    ⵠⵠⲆᐃᐃⲆⵠ: "img/day-hand-skin53.png",
    ΔᐃⲆΔΔⵠⵠ: "img/night-hand-skin53.png",
    ⲆⲆΔⲆⲆⲆⵠ: "img/day-hand-skin53.png",
    ⵠⲆⵠⵠⲆⵠⲆ: "img/night-hand-skin53.png",
    ΔᐃΔⵠᐃⵠᐃ: "img/day-hand-skin55.png",
    ⵠᐃⵠΔⵠⵠᐃ: "img/night-hand-skin55.png",
    ᐃᐃⲆᐃⲆⲆⵠ: "img/day-hand-skin56.png",
    ⲆⵠΔᐃⲆⵠⲆ: "img/night-hand-skin56.png",
    ⵠΔⵠⲆⲆⵠⵠ: "img/day-hand-skin57.png",
    ⵠΔⲆΔⲆⲆᐃ: "img/night-hand-skin57.png",
    ⲆΔⵠⲆⵠᐃᐃ: "img/day-hand-skin58.png",
    ᐃΔⲆⵠⵠⵠᐃ: "img/night-hand-skin58.png",
    ΔⲆⲆᐃΔᐃᐃ: "img/day-hand-skin59.png",
    ΔⵠΔᐃⲆⲆΔ: "img/night-hand-skin59.png",
    ᐃⵠⵠᐃᐃⲆⲆ: "img/day-hand-skin61.png",
    ᐃⵠΔⲆⵠⵠⵠ: "img/night-hand-skin61.png",
    ⵠⲆᐃⵠⵠⲆΔ: "img/day-hand-skin61.png",
    ᐃΔΔΔΔᐃᐃ: "img/night-hand-skin61.png",
    ΔᐃΔΔⵠΔΔ: "img/day-hand-skin62.png",
    ΔⲆΔΔⵠᐃⲆ: "img/night-hand-skin62.png",
    ᐃᐃΔⲆⵠΔⲆ: "img/day-hand-skin63.png",
    ⲆⲆⵠⵠᐃΔⲆ: "img/night-hand-skin63.png",
    ⲆᐃⲆⵠⲆⵠⲆ: "img/day-hand-skin64.png",
    ⲆⵠⵠⲆᐃⲆⲆ: "img/night-hand-skin64.png",
    ⲆᐃᐃⲆΔⵠⲆ: "img/day-hand-skin65.png",
    ΔΔᐃᐃᐃⲆΔ: "img/night-hand-skin65.png",
    ΔⲆΔⵠⵠᐃⵠ: "img/day-hand-skin66.png",
    ⵠⵠⲆᐃⲆᐃⲆ: "img/night-hand-skin66.png",
    ᐃΔⲆⲆⲆⲆΔ: "img/day-hand-skin67.png",
    ⲆⵠᐃⵠᐃΔⲆ: "img/night-hand-skin67.png",
    ΔⵠⵠⵠⵠⵠΔ: "img/day-hand-skin68.png",
    ᐃΔⲆΔΔᐃᐃ: "img/night-hand-skin68.png",
    ΔᐃΔᐃⲆⲆⵠ: "img/day-hand-skin69.png",
    ⲆⵠⵠⵠΔᐃⵠ: "img/night-hand-skin69.png",
    ᐃᐃⵠⲆⵠⲆᐃ: "img/day-hand-skin70.png",
    ⵠⲆΔᐃⲆᐃⲆ: "img/night-hand-skin70.png",
    ⲆⲆΔⲆⵠⵠΔ: "img/day-hand-skin71.png",
    ᐃᐃⵠΔⵠΔΔ: "img/night-hand-skin71.png",
    ⵠᐃΔⲆⲆⵠΔ: "img/day-hand-skin72.png",
    ᐃΔΔⲆᐃⲆᐃ: "img/night-hand-skin72.png",
    ᐃⵠⵠᐃⲆΔⲆ: "img/day-hand-skin73.png",
    ᐃⵠΔⵠⲆⵠⲆ: "img/night-hand-skin73.png",
    ⵠᐃΔᐃⲆⵠΔ: "img/day-hand-skin74.png",
    ΔⵠⲆⵠΔᐃᐃ: "img/night-hand-skin74.png",
    ΔⲆΔᐃᐃᐃᐃ: "img/day-hand-skin75.png",
    ⵠᐃⲆⲆⵠⲆⵠ: "img/night-hand-skin75.png",
    ⵠΔΔᐃΔⲆⵠ: "img/day-hand-skin76.png",
    ⲆⲆⵠᐃᐃⵠⵠ: "img/night-hand-skin76.png",
    ⵠⲆᐃⲆᐃᐃᐃ: "img/day-hand-skin77.png",
    ⲆΔᐃᐃⵠᐃΔ: "img/night-hand-skin77.png",
    ΔⵠⵠⲆⵠⲆᐃ: "img/day-hand-skin78.png",
    ⵠΔⵠⵠⲆᐃⲆ: "img/night-hand-skin78.png",
    ⲆⵠⵠⲆΔⵠᐃ: "img/day-hand-skin79.png",
    ΔⲆⵠᐃᐃⲆⵠ: "img/night-hand-skin79.png",
    ᐃⲆⵠⵠᐃΔⵠ: "img/day-hand-skin80.png",
    ΔⲆᐃⵠⲆᐃΔ: "img/night-hand-skin80.png",
    ⲆᐃᐃⵠΔᐃᐃ: "img/day-hand-skin81.png",
    ᐃⵠⵠᐃᐃᐃΔ: "img/night-hand-skin81.png",
    ΔⲆᐃᐃᐃᐃΔ: "img/day-hand-skin82.png",
    ⲆΔΔⲆᐃⵠᐃ: "img/night-hand-skin82.png",
    ⵠᐃⲆᐃⲆⲆΔ: "img/day-hand-skin83.png",
    ⲆᐃⲆᐃΔⵠᐃ: "img/night-hand-skin83.png",
    ⲆΔᐃᐃΔⲆᐃ: "img/day-hand-skin84.png",
    ᐃᐃᐃⵠᐃΔⲆ: "img/night-hand-skin84.png",
    ⵠΔⵠΔᐃᐃᐃ: "img/day-hand-skin85.png",
    ᐃᐃⲆΔᐃⵠᐃ: "img/night-hand-skin85.png",
    ⲆᐃⵠΔᐃᐃⵠ: "img/day-hand-skin86.png",
    ⲆΔΔΔⲆΔⲆ: "img/night-hand-skin86.png",
    ΔᐃⲆⵠΔⵠⲆ: "img/day-hand-skin87.png",
    ⵠᐃΔⲆᐃⲆⵠ: "img/night-hand-skin87.png",
    ᐃⲆᐃᐃΔⲆⵠ: "img/day-hand-skin88.png",
    ΔΔⲆᐃΔΔⲆ: "img/night-hand-skin88.png",
    ᐃᐃⲆⵠΔⵠⲆ: "img/day-hand-skin89.png",
    ΔΔᐃⲆⲆⵠⲆ: "img/night-hand-skin89.png",
    ⵠᐃⵠⵠᐃⲆⲆ: "img/day-hand-skin90.png",
    ΔⲆΔⲆᐃΔᐃ: "img/night-hand-skin90.png",
    ᐃⲆᐃᐃᐃⲆⲆ: "img/day-hand-skin91.png",
    ⲆⲆΔⵠⵠΔⵠ: "img/night-hand-skin91.png",
    ΔᐃᐃᐃⲆⵠΔ: "img/day-hand-skin92.png",
    ᐃⵠⲆᐃⵠⲆΔ: "img/night-hand-skin92.png",
    ΔⲆᐃᐃⲆᐃⵠ: "img/day-hand-skin93.png",
    ⲆⲆᐃΔᐃⵠⵠ: "img/night-hand-skin93.png",
    ᐃᐃⲆⵠⲆⲆⲆ: "img/day-hand-skin94.png",
    ΔⵠⲆⲆΔⵠⵠ: "img/night-hand-skin94.png",
    ⵠΔΔⵠᐃᐃⵠ: "img/day-hand-skin95.png",
    ⲆᐃⵠⲆΔⲆΔ: "img/night-hand-skin95.png",
    ᐃᐃᐃᐃⲆⵠΔ: "img/day-hand-skin96.png",
    ⲆⵠΔᐃᐃⵠΔ: "img/night-hand-skin96.png",
    ⲆⵠΔΔΔⵠΔ: "img/day-hand-skin97.png",
    ⲆⲆᐃᐃᐃⵠⵠ: "img/night-hand-skin97.png",
    ᐃΔΔⵠⵠᐃⵠ: "img/day-hand-skin98.png",
    ΔᐃⵠᐃᐃΔⲆ: "img/night-hand-skin98.png",
    ⲆΔᐃⲆⲆΔᐃ: "img/day-hand-skin99.png",
    ⲆΔΔΔΔⵠΔ: "img/night-hand-skin99.png",
    ⲆⵠⲆᐃΔⵠⲆ: "img/day-hand-skin100.png",
    ᐃⵠⲆⲆᐃⵠⵠ: "img/night-hand-skin100.png",
    ᐃᐃᐃⲆⵠᐃᐃ: "img/day-hand-skin101.png",
    ᐃⵠΔⲆⵠᐃᐃ: "img/night-hand-skin101.png",
    ⵠΔᐃⲆⲆᐃⲆ: "img/day-hand-skin102.png",
    ΔⵠᐃΔΔᐃⲆ: "img/night-hand-skin102.png",
    ⵠᐃⲆⲆΔΔΔ: "img/day-hand-skin103.png",
    ΔΔᐃⵠⲆⲆΔ: "img/night-hand-skin103.png",
    ᐃΔⵠΔⲆᐃⵠ: "img/day-hand-skin104.png",
    ᐃⲆΔⵠΔᐃⵠ: "img/night-hand-skin104.png",
    ⲆⵠⵠⵠⲆⲆⵠ: "img/day-hand-skin105.png",
    ⲆᐃⲆΔᐃⲆᐃ: "img/night-hand-skin105.png",
    ᐃⵠᐃⲆΔᐃΔ: "img/day-hand-skin106.png",
    ⵠⵠⵠᐃᐃⵠᐃ: "img/night-hand-skin106.png",
    ΔΔΔᐃⲆΔⲆ: "img/day-hand-skin107.png",
    ⵠⵠⲆⵠΔᐃⵠ: "img/night-hand-skin107.png",
    ⵠᐃⲆⲆᐃⵠⵠ: "img/day-hand-skin108.png",
    ⵠⲆⲆⲆⵠᐃⲆ: "img/night-hand-skin108.png",
    ⲆⲆᐃΔⵠⵠⵠ: "img/day-hand-skin109.png",
    ᐃΔⲆⲆⲆᐃⲆ: "img/night-hand-skin109.png",
    ⵠΔⲆΔΔᐃᐃ: "img/day-hand-skin110.png",
    ᐃⲆΔⵠⲆᐃⲆ: "img/night-hand-skin110.png",
    ΔⵠᐃⵠⲆⵠⵠ: "img/day-hand-skin111.png",
    ⵠᐃⲆⵠᐃᐃΔ: "img/night-hand-skin111.png",
    ⲆᐃⵠⵠΔⲆⲆ: "img/day-hand-skin112.png",
    ᐃⲆᐃⵠᐃΔΔ: "img/night-hand-skin112.png",
    ΔᐃΔΔᐃⲆⲆᐃΔ: "img/day-hand-skin113.png",
    ⵠⵠᐃᐃΔⲆⵠⵠᐃ: "img/night-hand-skin113.png",
    ΔΔᐃⵠᐃΔᐃ: "img/day-hand-skin114.png",
    ΔΔⲆⵠⲆⲆᐃ: "img/night-hand-skin114.png",
    ⵠᐃΔⲆⲆⲆᐃ: "img/day-hand-skin115.png",
    ΔᐃⵠΔΔΔⲆ: "img/night-hand-skin115.png",
    Ⲇⵠᐃⵠⵠⵠᐃ: "img/day-hand-skin116.png",
    ⵠⵠⵠⵠⲆΔᐃ: "img/night-hand-skin116.png",
    ΔⵠᐃⵠⵠⵠΔ: "img/day-hand-skin117.png",
    ΔΔⵠⵠⵠᐃΔ: "img/night-hand-skin117.png",
    ΔΔᐃⲆⵠⲆⲆ: "img/day-hand-skin118.png",
    ⵠⲆⲆΔᐃΔⵠ: "img/night-hand-skin118.png",
    ⵠⲆⲆΔᐃⲆΔ: "img/day-hand-skin119.png",
    ⲆⵠᐃΔⲆᐃᐃ: "img/night-hand-skin119.png",
    ΔᐃᐃⲆΔⵠⲆ: "img/day-hand-skin120.png",
    ᐃΔⲆⵠᐃⵠᐃ: "img/night-hand-skin120.png",
    ΔΔΔⲆΔΔᐃ: "img/day-hand-skin122.png",
    ΔⵠⵠⲆⵠⵠΔ: "img/night-hand-skin122.png",
    ⲆⲆΔⲆⵠⵠᐃ: "img/day-hand-skin122.png",
    ΔⲆⲆⵠⵠΔⵠ: "img/night-hand-skin122.png",
    ᐃⲆᐃΔⲆⵠᐃ: "img/day-hand-skin122.png",
    ᐃΔⲆΔᐃⲆⲆ: "img/night-hand-skin122.png",
    ᐃᐃᐃⵠⵠᐃΔ: "img/day-hand-skin124.png",
    ⲆᐃΔΔⵠⵠⲆ: "img/night-hand-skin124.png",
    ⵠⲆⲆᐃΔᐃⵠ: "img/day-hand-skin125.png",
    ᐃΔΔΔᐃⵠⲆ: "img/night-hand-skin125.png",
    ᐃΔΔⲆⲆⲆⲆ: "img/day-hand-skin126.png",
    ᐃᐃⲆⵠᐃΔᐃ: "img/night-hand-skin126.png",
    ᐃⵠΔⲆΔⲆⵠ: "img/day-hand-skin127.png",
    ᐃᐃΔΔⵠᐃⵠ: "img/night-hand-skin127.png",
    ᐃⲆⵠᐃⲆΔΔ: "img/day-hand-skin128.png",
    ⵠⵠΔⵠⵠⲆⵠ: "img/night-hand-skin128.png",
    ⲆⵠⲆⵠⵠⵠⵠ: "img/day-hand-skin129.png",
    ⵠΔΔᐃᐃΔΔ: "img/night-hand-skin129.png",
    ⲆⵠΔⲆΔⲆΔ: "img/day-hand-skin130.png",
    ᐃΔⲆΔⲆⲆⵠ: "img/night-hand-skin130.png",
    ⵠⵠⲆΔᐃⲆⲆ: "img/day-hand-skin131.png",
    ⲆⲆᐃⲆΔⲆᐃ: "img/night-hand-skin131.png",
    ⵠᐃⵠⲆΔⲆᐃ: "img/day-hand-skin130.png",
    ᐃⵠΔᐃΔⵠⲆ: "img/night-hand-skin130.png",
    ⲆᐃⲆⵠⲆⵠᐃ: "img/day-hand-skin133.png",
    ⲆⵠᐃΔⵠⲆᐃ: "img/night-hand-skin133.png",
    ΔΔⲆᐃΔΔᐃ: "img/day-hand-skin134.png",
    ᐃⵠⲆᐃΔΔⵠ: "img/night-hand-skin134.png",
    ⵠΔⲆᐃⲆⲆᐃ: "img/day-hand-skin135.png",
    ΔⵠΔⵠⲆᐃⲆ: "img/night-hand-skin135.png",
    ⵠΔⲆⵠᐃΔΔ: "img/day-hand-skin136.png",
    ᐃΔΔᐃⲆᐃⲆ: "img/night-hand-skin136.png",
    ⵠⲆⵠΔⵠᐃᐃ: "img/day-hand-skin137.png",
    ⵠᐃΔⲆⵠⲆⲆ: "img/night-hand-skin137.png",
    ᐃⲆΔⵠΔⵠΔ: "img/day-hand-skin138.png",
    ⲆᐃⵠⵠⵠⲆⲆ: "img/night-hand-skin138.png",
    ᐃⵠᐃΔⲆⵠΔ: "img/day-hand-skin139.png",
    ᐃⵠᐃⲆⲆⵠⵠ: "img/night-hand-skin139.png",
    ⲆⵠΔⵠᐃⵠΔ: "img/day-hand-skin140.png",
    ᐃⵠⵠᐃⲆΔΔ: "img/night-hand-skin140.png",
    ᐃⲆⵠⲆⲆᐃΔ: "img/day-hand-skin141.png",
    ⲆⲆⵠⲆᐃᐃⲆ: "img/night-hand-skin141.png",
    ⵠΔⲆΔᐃⲆⲆ: "img/day-hand-skin142.png",
    ΔⵠᐃⵠᐃᐃⲆ: "img/night-hand-skin142.png",
    ᐃᐃᐃΔⲆΔᐃ: "img/day-hand-skin143.png",
    ᐃⲆΔⵠⵠⲆⲆ: "img/night-hand-skin143.png",
    ᐃⵠΔΔⵠᐃΔ: "img/day-hand-skin144.png",
    ⲆΔᐃⲆΔᐃᐃ: "img/night-hand-skin144.png",
    ΔⵠᐃᐃΔⵠⵠ: "img/day-hand-skin145.png",
    ⵠⲆⵠᐃᐃⲆᐃ: "img/night-hand-skin145.png",
    ΔᐃΔⵠⲆⲆΔ: "img/day-hand-skin146.png",
    ⵠⵠΔⲆⲆᐃⲆ: "img/night-hand-skin146.png",
    ⵠⲆᐃΔⵠΔⲆ: "img/day-hand-skin147.png",
    ⲆⲆⲆᐃᐃⵠⲆ: "img/night-hand-skin147.png",
    ⵠⵠⲆⲆⲆⲆⲆ: "img/day-hand-skin148.png",
    ⵠᐃΔⲆΔΔⵠ: "img/night-hand-skin148.png",
    ΔᐃΔⲆᐃᐃΔ: "img/day-hand-skin149.png",
    ⲆⵠⵠⲆⵠᐃᐃ: "img/night-hand-skin149.png",
    ⵠⲆⲆΔⵠⲆᐃ: "img/day-hand-skin150.png",
    ⵠᐃΔᐃⲆΔᐃ: "img/night-hand-skin150.png",
    ᐃᐃᐃΔᐃᐃⵠ: "img/day-hand-skin151.png",
    ⲆⵠⵠⵠᐃΔᐃ: "img/night-hand-skin151.png",
    ΔᐃⲆΔⲆⲆΔ: "img/day-hand-skin152.png",
    ⲆΔⵠⲆⲆⲆⲆ: "img/night-hand-skin152.png",
    ⵠΔΔᐃᐃⲆⵠ: "img/day-hand-skin153.png",
    ᐃΔᐃᐃΔⲆᐃ: "img/night-hand-skin153.png",
    ΔⵠΔⲆⵠᐃⵠ: "img/day-hand-skin154.png",
    ΔᐃⵠΔᐃⲆΔ: "img/night-hand-skin154.png",
    ΔᐃⵠΔⵠΔᐃ: "img/day-hand-skin155.png",
    ᐃΔΔΔⵠᐃⲆ: "img/night-hand-skin155.png",
    ⵠᐃΔⵠⲆᐃⲆ: "img/day-hand-skin156.png",
    ᐃⵠⵠΔΔᐃΔ: "img/night-hand-skin156.png",
    ΔⵠⵠⵠᐃⲆⲆ: "img/day-hand-skin157.png",
    ΔᐃⵠΔᐃⲆⲆ: "img/night-hand-skin157.png",
    ᐃⵠᐃᐃᐃⵠΔ: "img/day-hand-skin158.png",
    ᐃᐃⲆⵠᐃⵠⵠ: "img/night-hand-skin158.png",
    ᐃⲆᐃⲆⲆⵠⲆ: "img/day-hand-skin159.png",
    ΔΔⵠⲆⵠΔᐃ: "img/night-hand-skin159.png",
    ⵠⲆΔⲆⲆⵠᐃ: "img/day-hand-skin160.png",
    ⵠΔᐃΔΔⲆⲆ: "img/night-hand-skin160.png",
    ᐃᐃⵠⵠⵠⲆⵠ: "img/day-hand-skin161.png",
    ⲆΔΔⵠⲆⲆΔ: "img/night-hand-skin161.png",
    ΔᐃΔⲆⲆᐃᐃ: "img/day-hand-skin162.png",
    ⲆᐃⵠⲆⵠⲆΔ: "img/night-hand-skin162.png",
    ⵠⵠΔⵠΔᐃᐃ: "img/day-hand-skin163.png",
    ᐃⵠⵠᐃⲆⲆΔ: "img/night-hand-skin163.png",
    ᐃᐃⲆⵠⲆⲆᐃ: "img/day-hand-skin164.png",
    ᐃΔⵠⵠⲆⵠᐃ: "img/night-hand-skin164.png",
    ᐃⵠΔΔᐃᐃᐃ: "img/day-hand-skin165.png",
    ⵠⲆᐃΔᐃⲆⲆ: "img/night-hand-skin165.png",
    ⵠⲆⵠᐃΔⲆΔ: "img/day-hand-skin166.png",
    ⵠⵠᐃⵠᐃⲆᐃ: "img/night-hand-skin166.png",
    ᐃΔⲆᐃᐃᐃⵠ: "img/day-hand-skin167.png",
    ⲆΔΔΔⲆΔΔ: "img/night-hand-skin167.png",
    ᐃⲆⵠᐃΔᐃⵠ: "img/day-hand-skin168.png",
    ⲆⵠⵠⲆΔⵠΔ: "img/night-hand-skin168.png",
    ⵠⲆΔⵠΔᐃᐃ: "img/day-hand-skin169.png",
    ⵠᐃⲆⲆᐃⵠⲆ: "img/night-hand-skin169.png",
    ⵠΔⲆⵠΔΔᐃ: "img/day-hand-skin170.png",
    ⲆᐃⵠⵠᐃᐃⲆ: "img/night-hand-skin170.png",
    ΔᐃᐃⵠᐃΔⵠ: "img/day-hand-skin171.png",
    ΔⵠⵠᐃⲆⲆⲆ: "img/night-hand-skin171.png",
    ᐃᐃⵠⵠᐃⵠⵠ: "img/day-hand-skin172.png",
    ⵠⲆⲆⲆΔⵠΔ: "img/night-hand-skin172.png",
    ᐃᐃⲆΔΔᐃΔ: "img/day-hand-skin173.png",
    ΔᐃⵠⵠᐃΔΔ: "img/night-hand-skin173.png",
    ᐃᐃⲆⵠⵠⵠᐃ: "img/day-hand-skin174.png",
    ⵠΔΔⵠΔⵠᐃ: "img/night-hand-skin174.png",
    ⲆⵠΔΔΔᐃⲆ: "img/day-hand-skin175.png",
    ᐃⵠⲆΔᐃⲆᐃ: "img/night-hand-skin175.png",
    ΔⲆᐃΔⲆⵠⲆ: "img/day-hand-skin176.png",
    ᐃᐃᐃⵠⵠᐃᐃ: "img/night-hand-skin176.png",
    ΔᐃⲆᐃᐃΔΔ: "img/day-hand-skin177.png",
    ΔΔⵠⲆⵠᐃⵠ: "img/night-hand-skin177.png",
    ⵠⵠᐃᐃΔⲆᐃ: "img/day-hand-skin178.png",
    ΔⲆᐃᐃⵠⵠΔ: "img/night-hand-skin178.png",
    ⵠⵠⲆΔⲆⵠⲆ: "img/day-hand-skin179.png",
    ⲆⲆᐃⲆᐃⵠⵠ: "img/night-hand-skin179.png",
    ᐃᐃΔⲆᐃΔⲆ: "img/day-hand-skin180.png",
    ᐃᐃᐃᐃΔⲆᐃ: "img/night-hand-skin180.png",
    ᐃΔⵠⵠⵠⲆⵠ: "img/day-hand-skin181.png",
    ⵠΔΔΔΔⵠⵠ: "img/night-hand-skin181.png",
    ΔᐃⲆⲆᐃⵠⲆ: "img/day-hand-skin182.png",
    ᐃⵠΔᐃᐃⵠᐃ: "img/night-hand-skin182.png",
    ΔⵠᐃΔⵠᐃᐃ: "img/day-hand-skin183.png",
    ⲆⲆᐃᐃⲆΔᐃ: "img/night-hand-skin183.png",
    ΔⵠⵠΔⲆⵠᐃ: "img/day-hand-skin184.png",
    ΔⵠⲆᐃᐃᐃⵠ: "img/night-hand-skin184.png",
    ⵠΔⵠᐃⲆᐃⲆ: "img/day-hand-skin185.png",
    ⲆΔᐃⵠΔΔΔ: "img/night-hand-skin185.png",
    ⵠⲆⲆⲆⵠⵠⵠ: "img/day-hand-skin186.png",
    ᐃΔᐃⵠΔⲆᐃ: "img/night-hand-skin186.png",
    ⲆⵠᐃⵠΔᐃᐃ: "img/day-hand-skin187.png",
    ⲆᐃΔⲆⲆΔⵠ: "img/night-hand-skin187.png",
    ᐃⵠⲆΔΔⲆⵠ: "img/day-hand-skin188.png",
    ⵠΔᐃᐃᐃⵠⵠ: "img/night-hand-skin188.png",
    ⲆΔⵠⵠᐃⲆΔ: "img/day-hand-skin189.png",
    ⵠⵠⵠⵠΔΔᐃ: "img/night-hand-skin189.png",
    ⵠᐃΔᐃΔⵠⵠ: "img/day-hand-skin190.png",
    ᐃⲆᐃΔᐃⲆⲆ: "img/night-hand-skin190.png",
    ᐃⲆⲆᐃⲆⲆⵠ: "img/day-hand-skin191.png",
    ᐃᐃⵠᐃΔΔΔ: "img/night-hand-skin191.png",
    ΔⲆᐃΔΔⲆᐃ: "img/day-hand-skin192.png",
    ⲆⲆᐃⵠᐃⵠⲆ: "img/night-hand-skin192.png",
    ⵠⲆⲆⵠᐃⲆᐃ: "img/day-hand-skin193.png",
    ⵠᐃⵠⵠⵠⵠⲆ: "img/night-hand-skin193.png",
    ⵠⵠⵠⲆⲆⵠᐃ: "img/day-hand-skin194.png",
    ⵠⲆⲆⵠΔⵠΔ: "img/night-hand-skin194.png",
    ⲆΔⲆⲆⵠΔⵠ: "img/day-hand-skin195.png",
    ⵠⲆᐃⵠⲆⵠᐃ: "img/night-hand-skin195.png",
    ⲆᐃᐃⲆⲆⲆᐃ: "img/day-hand-skin196.png",
    ΔᐃᐃΔᐃΔⵠ: "img/night-hand-skin196.png",
    ᐃⲆⵠᐃⲆⲆⵠ: "img/day-hand-skin197.png",
    ⵠΔΔⵠⵠⵠⲆ: "img/night-hand-skin197.png",
    ⲆⵠᐃᐃΔⵠⵠ: "img/day-hand-skin198.png",
    ᐃᐃⲆⵠⵠⲆⲆ: "img/night-hand-skin198.png",
    ᐃᐃΔⵠΔᐃⲆ: "img/day-hand-skin199.png",
    ⵠⵠⲆΔⲆΔᐃ: "img/night-hand-skin199.png",
    ΔΔᐃΔᐃΔᐃ: "img/day-hand-skin200.png",
    ⲆⲆᐃᐃΔᐃⵠ: "img/night-hand-skin200.png",
    ⵠΔⲆᐃᐃᐃΔ: "img/day-hand-skin201.png",
    ⲆⵠⲆᐃⵠⲆΔ: "img/night-hand-skin201.png",
    ΔΔΔᐃΔᐃΔ: "img/day-hand-skin202.png",
    ⵠᐃΔΔⵠⲆΔ: "img/night-hand-skin202.png",
    ΔⵠΔⲆΔⵠΔ: "img/day-hand-skin203.png",
    ᐃᐃⲆᐃⲆⲆⲆ: "img/night-hand-skin203.png",
    ⲆⲆⲆⲆⵠⲆⲆ: "img/day-hand-skin204.png",
    ᐃⲆⲆⵠΔᐃᐃ: "img/night-hand-skin204.png",
    ⲆⲆᐃⵠⲆⲆᐃ: "img/day-hand-skin205.png",
    ⵠⲆⲆᐃⲆᐃᐃ: "img/night-hand-skin205.png",
    ᐃⲆⲆⲆⲆᐃΔ: "img/day-hand-skin206.png",
    ⵠⲆⵠᐃᐃⲆΔ: "img/night-hand-skin206.png",
    ΔᐃⲆⲆᐃⵠᐃ: "img/day-hand-skin207.png",
    ΔⵠⲆⵠⲆⲆΔ: "img/night-hand-skin207.png",
    ⲆᐃΔⵠⵠΔΔ: "img/day-hand-skin208.png",
    ⲆⲆⵠΔⲆⵠⲆ: "img/night-hand-skin208.png",
    ⲆⲆⵠᐃΔⲆΔ: "img/day-hand-skin209.png",
    ΔⲆΔⵠⵠⵠⵠ: "img/night-hand-skin209.png",
    ⵠⲆⲆⲆᐃᐃᐃ: "img/day-hand-skin210.png",
    ⵠⵠⲆᐃⵠⵠⵠ: "img/night-hand-skin210.png",
    ⲆⵠⵠⲆᐃᐃᐃ: "img/day-hand-skin211.png",
    ΔⲆⵠⵠⲆⵠΔ: "img/night-hand-skin211.png",
    ᐃᐃⲆⵠⵠᐃⵠ: "img/day-hand-skin212.png",
    ⵠⵠᐃⲆⲆΔΔ: "img/night-hand-skin212.png",
    ᐃΔⵠΔⲆΔⵠ: "img/day-hand-skin213.png",
    ΔⲆⲆⵠⲆᐃⲆ: "img/night-hand-skin213.png",
    ᐃⵠⵠⵠΔΔⵠ: "img/day-hand-skin214.png",
    ᐃᐃΔⵠΔⲆΔ: "img/night-hand-skin214.png",
    ⲆᐃⲆᐃⲆⲆᐃ: "img/day-bag-star0.png",
    ᐃΔⵠᐃⲆᐃΔ: "img/night-bag-star0.png",
    ᐃⲆᐃⲆᐃΔⵠ: "img/day-bag0.png",
    ⲆᐃⲆᐃⲆⵠΔ: "img/night-bag0.png",
    ⲆⵠⲆⲆΔΔΔ: "img/day-bag1.png",
    ⵠᐃⲆⲆⵠⵠᐃ: "img/night-bag1.png",
    ⵠᐃΔΔᐃⵠⵠ: "img/day-bag2.png",
    ⵠⵠⲆᐃᐃΔⵠ: "img/night-bag2.png",
    ⲆᐃⵠⵠΔᐃⲆ: "img/day-bag3.png",
    ⵠΔΔᐃΔⲆᐃ: "img/night-bag3.png",
    ⲆⵠᐃⲆΔᐃⵠ: "img/day-bag4.png",
    ᐃᐃⵠΔⵠⵠⲆ: "img/night-bag4.png",
    ᐃⵠⵠⵠⵠⵠⲆ: "img/day-bag5.png",
    ΔᐃᐃⵠΔΔΔ: "img/night-bag5.png",
    ᐃⲆᐃᐃᐃⲆⵠ: "img/day-bag6.png",
    ᐃΔᐃⲆᐃⵠᐃ: "img/night-bag6.png",
    ΔᐃⵠΔᐃΔⵠ: "img/day-bag7.png",
    ⲆᐃⵠⲆᐃⲆⲆ: "img/night-bag7.png",
    ⲆᐃΔΔⲆΔᐃ: "img/day-bag8.png",
    Δᐃⵠⵠᐃᐃᐃ: "img/night-bag8.png",
    ᐃᐃᐃⲆᐃⲆⵠ: "img/day-bag9.png",
    ⲆᐃⲆⵠᐃᐃⵠ: "img/night-bag9.png",
    ⲆⲆΔᐃᐃᐃⲆ: "img/day-bag10.png",
    ⲆΔᐃⵠⵠⲆⲆ: "img/night-bag10.png",
    ΔⲆᐃⵠⲆⲆᐃ: "img/day-bag11.png",
    ΔⵠᐃᐃᐃΔᐃ: "img/night-bag11.png",
    ΔΔⵠⲆⲆⲆⵠ: "img/day-bag13.png",
    ⵠΔⲆⲆⲆΔⵠ: "img/night-bag13.png",
    ⵠⲆᐃⵠⲆᐃⲆ: "img/day-bag14.png",
    ⵠⵠΔⵠᐃᐃⲆ: "img/night-bag14.png",
    ⵠᐃⲆⵠⲆᐃᐃ: "img/day-bag16.png",
    ⲆⵠΔⲆⵠΔΔ: "img/night-bag16.png",
    ⲆΔᐃⲆᐃᐃᐃ: "img/day-bag17.png",
    ᐃⲆⲆⲆⵠΔᐃ: "img/night-bag17.png",
    ᐃΔᐃΔⵠᐃᐃ: "img/day-bag18.png",
    ⲆᐃΔᐃᐃΔⲆ: "img/night-bag18.png",
    ⵠᐃᐃⵠᐃᐃⲆ: "img/day-bag19.png",
    ᐃⵠⲆΔⲆⲆⵠ: "img/night-bag19.png",
    ᐃⵠⲆᐃⵠⲆⵠ: "img/day-bag20.png",
    ΔᐃⵠⲆⲆⵠΔ: "img/night-bag20.png",
    ⲆⲆⲆᐃⵠⲆᐃ: "img/day-bag21.png",
    ⵠⵠΔᐃᐃΔΔ: "img/night-bag21.png",
    ᐃΔΔⵠⵠᐃΔ: "img/day-bag22.png",
    ⵠⵠⵠⲆΔⲆᐃ: "img/night-bag22.png",
    Δᐃᐃᐃᐃⵠⵠ: "img/day-bag23.png",
    ⲆⵠⲆⲆⲆΔΔ: "img/night-bag23.png",
    ⵠΔⲆⵠⵠⵠⵠ: "img/day-bag24.png",
    ⵠΔⵠᐃᐃⲆⵠ: "img/night-bag24.png",
    ⵠΔᐃΔⵠⵠⲆ: "img/day-bag25.png",
    ⲆⲆᐃⲆΔⵠⵠ: "img/night-bag25.png",
    ΔΔⵠⵠᐃⲆⲆ: "img/day-bag26.png",
    ᐃⵠⵠⵠΔᐃΔ: "img/night-bag26.png",
    ⲆᐃΔⵠΔᐃⵠ: "img/day-bag27.png",
    ⲆΔᐃⲆᐃᐃⵠ: "img/night-bag27.png",
    ΔΔᐃᐃⲆⲆᐃ: "img/day-bag28.png",
    ⵠⵠⵠⲆᐃΔⵠ: "img/night-bag28.png",
    ᐃΔⵠΔⲆⵠⵠ: "img/day-bag29.png",
    ᐃΔΔᐃⲆΔᐃ: "img/night-bag29.png",
    ⲆΔⵠⲆⵠΔⵠ: "img/day-bag30.png",
    ⲆΔΔⵠⵠΔⵠ: "img/night-bag30.png",
    ᐃⵠⲆᐃⲆᐃᐃ: "img/day-bag31.png",
    ⵠΔⵠⵠⵠΔⵠ: "img/night-bag31.png",
    ⵠⵠᐃΔⵠΔⵠ: "img/day-bag32.png",
    ⲆᐃᐃⲆΔⵠΔ: "img/night-bag32.png",
    ⵠⵠᐃΔⵠⲆΔ: "img/day-bag33.png",
    ⲆⲆⲆⲆΔⵠⵠ: "img/night-bag33.png",
    ΔⵠⲆΔⲆᐃⲆ: "img/day-bag34.png",
    ⵠⲆⲆΔⵠᐃΔ: "img/night-bag34.png",
    ⲆΔΔᐃⲆᐃΔ: "img/day-bag35.png",
    Ⲇⵠᐃⵠⵠᐃᐃ: "img/night-bag35.png",
    ΔᐃΔⲆΔΔⵠ: "img/day-bag36.png",
    ⵠᐃⲆⵠᐃΔⲆ: "img/night-bag36.png",
    ⲆΔⲆⲆΔΔⲆ: "img/day-bag37.png",
    ⵠⲆⵠᐃⵠΔΔ: "img/night-bag37.png",
    ΔᐃᐃΔᐃⲆⲆ: "img/day-bag38.png",
    ΔᐃⲆⲆⲆⵠⵠ: "img/night-bag38.png",
    ⲆⲆᐃⲆᐃⲆⲆ: "img/day-bag39.png",
    ⲆᐃⲆⵠΔⵠΔ: "img/night-bag39.png",
    ΔⵠⲆⵠⵠᐃⵠ: "img/day-bag40.png",
    ᐃΔⵠΔᐃᐃⵠ: "img/night-bag40.png",
    ⲆⵠⲆΔⵠΔⵠ: "img/day-bag41.png",
    ΔⵠⵠⵠⲆⲆⵠ: "img/night-bag41.png",
    ⲆᐃⲆⵠΔⲆΔ: "img/day-bag42.png",
    ⲆᐃⵠΔⲆⲆⲆ: "img/night-bag42.png",
    ⲆⲆⲆΔΔΔΔ: "img/day-bag43.png",
    ⲆⲆⲆⲆⵠΔᐃ: "img/night-bag43.png",
    ⲆⲆᐃᐃᐃᐃⵠ: "img/day-bag44.png",
    ᐃⲆⵠᐃⵠⲆᐃ: "img/night-bag44.png",
    ΔᐃΔΔᐃⵠΔ: "img/day-bag45.png",
    ᐃΔΔⵠⵠΔᐃ: "img/night-bag45.png",
    ᐃⵠⵠΔⵠⲆΔ: "img/day-bag46.png",
    ⲆᐃⵠᐃΔⵠΔ: "img/night-bag46.png",
    ⲆⵠᐃⲆⵠⵠᐃ: "img/day-bag47.png",
    ⵠⵠΔⲆΔⵠⲆ: "img/night-bag47.png",
    ᐃΔΔΔⵠᐃᐃ: "img/day-bag48.png",
    ⲆΔᐃⲆΔΔⵠ: "img/night-bag48.png",
    ΔⵠΔⲆⲆΔᐃ: "img/day-bag49.png",
    ᐃⵠⲆⵠⲆⲆᐃ: "img/night-bag49.png",
    ᐃⲆΔΔᐃⵠΔ: "img/day-bag50.png",
    ⲆⲆⵠΔⲆΔΔ: "img/night-bag50.png",
    ᐃⲆΔᐃⲆΔⲆ: "img/day-bag51.png",
    ΔⵠΔᐃᐃᐃᐃ: "img/night-bag51.png",
    ⵠⵠⵠΔⵠⲆΔ: "img/day-bag52.png",
    ⵠⵠⲆᐃⲆⵠᐃ: "img/night-bag52.png",
    ⵠΔᐃᐃⲆᐃⵠ: "img/day-bag53.png",
    ᐃΔⵠⲆΔⲆⲆ: "img/night-bag53.png",
    ⵠᐃⲆⲆΔⵠⵠ: "img/day-bag54.png",
    ⵠΔⵠⵠⲆᐃⵠ: "img/night-bag54.png",
    ᐃᐃΔⲆⲆⵠⲆ: "img/day-bag55.png",
    ᐃⲆΔΔⲆⵠΔ: "img/night-bag55.png",
    ⵠΔⵠⲆΔⵠᐃ: "img/day-bag56.png",
    ΔⲆᐃⲆⵠΔᐃ: "img/night-bag56.png",
    ⲆⵠΔⵠΔⲆⵠ: "img/day-bag57.png",
    ΔⵠΔᐃᐃⵠⵠ: "img/night-bag57.png",
    ⵠΔⲆᐃⵠⲆⵠ: "img/day-bag58.png",
    ΔⲆᐃⲆᐃⵠΔ: "img/night-bag58.png",
    ⲆⵠΔⵠⲆᐃᐃ: "img/day-bag59.png",
    ⵠᐃΔⵠᐃⲆΔ: "img/night-bag59.png",
    ᐃΔⲆΔΔⲆⵠ: "img/day-bag60.png",
    ⲆᐃⵠⲆΔⵠΔ: "img/night-bag60.png",
    ΔⵠΔᐃⵠⲆⵠ: "img/day-bag61.png",
    ΔΔΔⵠᐃᐃᐃ: "img/night-bag61.png",
    ⲆΔΔΔΔΔᐃ: "img/day-bag62.png",
    ⵠⵠⲆⵠΔⲆⵠ: "img/night-bag62.png",
    ⵠΔⲆⲆΔⵠΔ: "img/day-bag63.png",
    ᐃⲆΔᐃᐃᐃⲆ: "img/night-bag63.png",
    ⵠⲆΔᐃⲆⵠΔ: "img/day-bag64.png",
    Δᐃᐃⵠⵠⵠᐃ: "img/night-bag64.png",
    ⲆⵠΔᐃᐃⲆⲆ: "img/day-bag65.png",
    ᐃⵠⲆᐃᐃⵠΔ: "img/night-bag65.png",
    ⵠᐃΔⲆⲆⲆⲆ: "img/day-bag66.png",
    ΔⵠΔⲆΔᐃΔ: "img/night-bag66.png",
    ⵠⵠⲆᐃⲆΔⵠ: "img/day-bag67.png",
    ᐃΔΔᐃΔΔⵠ: "img/night-bag67.png",
    ⲆⵠᐃᐃⲆⲆⵠ: "img/day-bag68.png",
    ΔⵠⵠⵠⲆⵠᐃ: "img/night-bag68.png",
    ⵠⲆⲆⲆⵠΔΔ: "img/day-bag69.png",
    ᐃⵠΔⵠᐃⲆⵠ: "img/night-bag69.png",
    ⲆⲆᐃⲆⵠᐃᐃ: "img/day-bag70.png",
    ⲆᐃΔᐃΔⵠⵠ: "img/night-bag70.png",
    ⵠᐃⲆⵠΔᐃⲆ: "img/day-bag71.png",
    ⵠᐃⲆΔᐃΔⲆ: "img/night-bag71.png",
    ᐃᐃⵠⵠᐃΔⲆ: "img/day-bag72.png",
    ΔⲆᐃⵠᐃᐃΔ: "img/night-bag72.png",
    ⵠᐃⵠⵠⵠⲆⵠ: "img/day-bag73.png",
    ΔⲆΔΔΔΔΔ: "img/night-bag73.png",
    ⵠΔⲆΔᐃⵠⲆ: "img/day-bag74.png",
    ⲆⲆⲆΔⲆᐃᐃ: "img/night-bag74.png",
    ⵠⲆⵠΔⵠⲆⲆ: "img/day-bag75.png",
    ⲆⵠⵠᐃΔΔⵠ: "img/night-bag75.png",
    ᐃᐃᐃⵠⵠⵠΔ: "img/day-bag76.png",
    ⲆᐃⵠΔΔⲆᐃ: "img/night-bag76.png",
    ⲆΔᐃⵠⵠᐃᐃ: "img/day-bag77.png",
    ΔⵠΔᐃⲆⲆᐃ: "img/night-bag77.png",
    ⵠⲆᐃⵠΔⵠⲆ: "img/day-bag78.png",
    ⲆΔΔⲆⲆΔΔ: "img/night-bag78.png",
    ᐃⲆᐃⵠⲆⲆⵠ: "img/day-bag79.png",
    ΔⵠΔⲆᐃΔΔ: "img/night-bag79.png",
    ΔᐃᐃⵠⵠⵠⲆ: "img/day-bag80.png",
    ᐃⵠⲆⲆΔⲆⵠ: "img/night-bag80.png",
    ⲆⵠⲆⵠᐃⲆⲆ: "img/day-accessory0.png",
    ⵠⲆⵠⵠⲆΔΔ: "img/day-accessory0-pacques.png",
    ⵠⵠᐃⵠᐃΔⵠ: "img/night-accessory0-pacques.png",
    ΔᐃⲆᐃⲆᐃⵠ: "img/day-accessory13.png",
    ⵠᐃⲆⵠⲆⲆⵠ: "img/night-accessory13.png",
    ᐃⲆΔⵠᐃᐃⲆ: "img/day-accessory14.png",
    ᐃΔⵠⲆΔΔⵠ: "img/night-accessory14.png",
    ᐃᐃⵠΔΔⲆΔ: "img/day-accessory15.png",
    ⲆⵠⲆⵠᐃⲆΔ: "img/night-accessory15.png",
    ᐃⵠⵠⵠᐃᐃΔ: "img/day-accessory16.png",
    ᐃΔⵠᐃⵠⲆⵠ: "img/night-accessory16.png",
    ᐃⵠⵠⵠⲆΔΔ: "img/day-accessory17.png",
    ΔᐃᐃᐃΔΔⵠ: "img/day-accessory17.png",
    ΔΔᐃⵠⵠΔᐃ: "img/day-accessory19.png",
    ⵠⲆⵠΔⲆⵠΔ: "img/night-accessory19.png",
    ᐃΔᐃΔΔΔᐃ: "img/day-accessory20.png",
    ᐃⲆⲆⵠΔⲆᐃ: "img/night-accessory20.png",
    ΔᐃⵠⲆΔⵠΔ: "img/day-accessory21.png",
    ᐃⵠΔⵠⵠⲆᐃ: "img/night-accessory21.png",
    ⲆⵠᐃⵠᐃⲆⵠ: "img/day-accessory22.png",
    ΔⵠΔⵠⲆⵠᐃ: "img/night-accessory22.png",
    ⲆⵠΔΔⵠⲆⵠ: "img/day-accessory23.png",
    ΔΔΔΔⵠᐃᐃ: "img/night-accessory23.png",
    ⵠᐃΔⲆΔΔⲆ: "img/day-accessory24.png",
    ⲆⵠⲆⲆⲆᐃᐃ: "img/night-accessory24.png",
    ΔᐃⵠΔⵠⲆⲆ: "img/day-accessory25.png",
    ᐃᐃⵠⲆΔΔΔ: "img/night-accessory25.png",
    ⲆⵠΔⵠⲆⵠᐃ: "img/day-accessory26.png",
    ᐃᐃⵠⲆⵠΔΔ: "img/night-accessory26.png",
    ᐃᐃΔⲆⲆΔⲆ: "img/day-accessory27.png",
    ΔⵠᐃⲆΔᐃⲆ: "img/night-accessory27.png",
    ΔᐃᐃᐃⲆᐃΔ: "img/day-accessory18.png",
    ⲆᐃⵠⲆⲆᐃᐃ: "img/night-accessory18.png",
    ᐃᐃΔΔⲆⲆᐃ: "img/day-accessory29.png",
    ΔᐃᐃᐃΔⲆⵠ: "img/night-accessory29.png",
    ᐃΔⵠΔᐃΔⵠ: "img/day-accessory30.png",
    ⲆⲆᐃᐃᐃⵠΔ: "img/night-accessory30.png",
    ᐃⵠⵠΔⲆⲆⲆ: "img/day-accessory31.png",
    ᐃΔⵠⲆⲆᐃⲆ: "img/night-accessory31.png",
    ᐃⲆΔΔⲆᐃᐃ: "img/day-accessory32.png",
    ⲆᐃⲆⵠⲆΔᐃ: "img/night-accessory32.png",
    ᐃᐃⲆⲆⲆᐃⲆ: "img/day-accessory33.png",
    ⵠΔⲆΔᐃⲆΔ: "img/night-accessory33.png",
    ᐃⵠᐃⵠᐃⲆΔ: "img/day-accessory34.png",
    ᐃⵠⲆⵠᐃᐃⵠ: "img/night-accessory34.png",
    ⵠⲆΔⲆⲆᐃⵠ: "img/day-accessory35.png",
    ⲆⵠⲆⵠⵠΔᐃ: "img/night-accessory35.png",
    ⵠⲆΔΔⲆⲆⲆ: "img/day-accessory28.png",
    ᐃⵠᐃⲆΔΔⲆ: "img/night-accessory28.png",
    ΔᐃⲆᐃⲆⵠᐃ: "img/day-accessory36.png",
    ⲆΔΔⵠⲆΔΔ: "img/night-accessory36.png",
    ᐃⵠᐃⲆᐃⵠᐃ: "img/day-accessory37.png",
    ⵠⵠⵠⲆⲆᐃΔ: "img/night-accessory37.png",
    ⵠᐃⲆᐃⵠᐃΔ: "img/day-accessory39.png",
    ᐃΔⵠᐃᐃᐃᐃ: "img/night-accessory39.png",
    ΔᐃΔΔᐃΔΔ: "img/day-accessory40.png",
    ΔᐃⲆΔΔⲆⵠ: "img/night-accessory40.png",
    ΔᐃΔΔⵠᐃᐃ: "img/day-accessory41.png",
    ΔⲆⵠΔⲆⲆⲆ: "img/night-accessory41.png",
    ⵠΔᐃΔᐃⵠⵠ: "img/day-accessory42.png",
    ΔΔᐃΔⵠⵠⵠ: "img/night-accessory42.png",
    ⲆⵠΔᐃΔⵠᐃ: "img/day-accessory43.png",
    ΔⲆΔⵠⵠⲆΔ: "img/night-accessory43.png",
    ⲆⲆⲆⲆⲆⲆΔ: "img/day-accessory44.png",
    ⵠᐃⵠⵠΔᐃⵠ: "img/night-accessory44.png",
    ΔⲆᐃᐃⵠⲆⵠ: "img/day-accessory38.png",
    ⵠᐃⵠⲆⲆⲆᐃ: "img/night-accessory38.png",
    ⵠⵠΔⲆⵠᐃⲆ: "img/day-accessory46.png",
    ΔⲆᐃᐃᐃΔⲆ: "img/night-accessory46.png",
    ΔΔⲆⵠⲆⵠⲆ: "img/day-accessory47.png",
    ⲆⲆⲆΔᐃΔⲆ: "img/night-accessory47.png",
    ⲆⲆⲆⵠᐃᐃⲆ: "img/day-accessory48.png",
    ᐃΔⵠΔⵠᐃⵠ: "img/night-accessory48.png",
    ΔⲆΔΔⵠⲆᐃ: "img/day-accessory49.png",
    ᐃⵠΔⲆⵠΔⵠ: "img/night-accessory49.png",
    ⲆΔⵠⵠᐃΔᐃ: "img/day-accessory45.png",
    ⲆⵠⲆᐃⵠⵠᐃ: "img/night-accessory45.png",
    ΔΔⵠⵠⵠΔⵠ: "img/day-accessory50.png",
    ΔⲆΔⵠⵠΔΔ: "img/night-accessory50.png",
    ΔⵠⵠⲆΔⵠΔ: "img/day-accessory51.png",
    ΔΔⵠⲆΔⲆⵠ: "img/night-accessory51.png",
    ᐃᐃⵠⲆΔⵠΔ: "img/day-accessory52.png",
    ΔⵠⲆⲆⵠⵠᐃ: "img/night-accessory52.png",
    ⲆⲆⲆᐃⵠⵠᐃ: "img/day-accessory53.png",
    ᐃⵠⵠⵠΔΔⲆ: "img/night-accessory53.png",
    ⵠΔⲆΔⵠᐃᐃ: "img/day-accessory54.png",
    ⵠⲆⲆⵠᐃⵠⵠ: "img/night-accessory54.png",
    ⵠⲆⵠⵠⲆⲆⲆ: "img/day-accessory55.png",
    ⵠᐃΔⲆⲆΔᐃ: "img/night-accessory55.png",
    ΔΔᐃⵠⲆΔⵠ: "img/day-accessory56.png",
    ΔΔΔⵠΔΔⵠ: "img/night-accessory56.png",
    ᐃᐃᐃᐃᐃⵠⵠ: "img/day-accessory57.png",
    ⲆⵠΔⲆΔⲆᐃ: "img/night-accessory57.png",
    ᐃⵠⵠΔⵠΔⲆ: "img/day-accessory58.png",
    ΔⵠΔΔᐃᐃᐃ: "img/night-accessory58.png",
    ⵠΔΔΔᐃⵠⲆ: "img/day-accessory59.png",
    ⵠⲆⲆⵠⵠⵠⲆ: "img/night-accessory59.png",
    ᐃⵠΔⵠⲆⲆΔ: "img/day-accessory60.png",
    ⵠΔⲆⲆⲆᐃⲆ: "img/night-accessory60.png",
    ⵠᐃΔⲆᐃᐃΔ: "img/day-accessory61.png",
    ⲆⵠΔΔᐃΔᐃ: "img/night-accessory61.png",
    ΔⵠⲆΔⲆᐃΔ: "img/day-accessory62.png",
    ⲆᐃⵠΔⲆⲆᐃ: "img/night-accessory62.png",
    ᐃⵠⲆᐃΔⵠⵠ: "img/day-accessory63.png",
    ⲆᐃⲆΔⵠᐃᐃ: "img/night-accessory63.png",
    ᐃΔⵠΔΔⵠΔ: "img/day-accessory64.png",
    ⵠΔᐃΔⲆᐃᐃ: "img/night-accessory64.png",
    ⵠⲆᐃᐃᐃⲆΔ: "img/day-accessory65.png",
    ⲆᐃⵠΔⵠⲆᐃ: "img/night-accessory65.png",
    ᐃΔΔⲆΔᐃΔ: "img/day-accessory66.png",
    ⵠⵠⵠⵠᐃⵠΔ: "img/night-accessory66.png",
    ᐃⲆᐃΔᐃⵠΔ: "img/day-accessory67.png",
    ⲆᐃⵠⵠΔΔⵠ: "img/night-accessory67.png",
    ⵠᐃΔΔⲆΔᐃ: "img/day-accessory68.png",
    ΔⵠⲆⲆⵠᐃⵠ: "img/night-accessory68.png",
    ⲆΔᐃΔⵠΔΔ: "img/day-accessory69.png",
    ᐃⲆⵠΔΔΔᐃ: "img/night-accessory69.png",
    ⵠⵠΔⲆᐃᐃⵠ: "img/day-accessory70.png",
    ᐃΔᐃΔᐃᐃΔ: "img/night-accessory70.png",
    ⵠⵠΔⲆᐃⵠᐃ: "img/day-accessory71.png",
    ⲆⵠⵠⲆⲆⲆⵠ: "img/night-accessory71.png",
    ⲆⲆⵠⲆΔⲆⵠ: "img/day-accessory72.png",
    ⵠΔⵠΔⲆᐃᐃ: "img/night-accessory72.png",
    ΔⵠΔⵠⵠⵠᐃ: "img/day-accessory73.png",
    ᐃΔⲆΔⵠⲆⵠ: "img/night-accessory73.png",
    ΔⲆᐃⲆⵠⲆΔ: "img/day-accessory74.png",
    ΔⵠⵠⲆⲆⵠⲆ: "img/night-accessory74.png",
    ⲆⲆⲆⲆⲆᐃΔ: "img/day-accessory75.png",
    ⲆᐃᐃⵠΔⲆΔ: "img/night-accessory75.png",
    ΔⲆⲆᐃⵠⲆⲆ: "img/day-accessory76.png",
    ⲆⵠᐃᐃᐃⲆⲆ: "img/night-accessory76.png",
    ⵠⲆⵠΔᐃᐃⲆ: "img/day-accessory77.png",
    ⲆⵠⲆⲆΔⵠⵠ: "img/night-accessory77.png",
    ΔᐃⵠⵠᐃΔⲆ: "img/day-accessory78.png",
    ᐃⵠⲆⲆⲆⲆΔ: "img/night-accessory78.png",
    ᐃⵠΔΔⵠΔⲆ: "img/day-accessory79.png",
    ⵠᐃᐃⵠⵠⵠΔ: "img/night-accessory79.png",
    ᐃⵠᐃⲆΔⵠΔ: "img/day-accessory80.png",
    ᐃⵠΔᐃⲆΔⲆ: "img/night-accessory80.png",
    ΔᐃᐃΔⵠⲆⲆ: "img/day-accessory81.png",
    ⲆᐃⵠΔⲆⵠⲆ: "img/night-accessory81.png",
    ⵠᐃⲆⲆⲆⵠΔ: "img/day-accessory83.png",
    ΔᐃⵠΔᐃⵠⲆ: "img/night-accessory83.png",
    ⲆⵠᐃⲆⲆⵠΔ: "img/day-accessory84.png",
    ᐃⲆⵠΔⵠⵠᐃ: "img/night-accessory84.png",
    ᐃΔⵠⵠΔⵠⲆ: "img/day-accessory85.png",
    ᐃΔⵠⲆΔⲆⵠ: "img/night-accessory85.png",
    ⲆⲆᐃΔⲆΔⵠ: "img/day-accessory86.png",
    ᐃᐃⵠΔⵠⲆᐃ: "img/night-accessory86.png",
    ⵠⲆᐃⲆⲆΔⵠ: "img/day-accessory87.png",
    ᐃᐃΔΔᐃΔⲆ: "img/night-accessory87.png",
    ΔΔᐃᐃᐃⵠⲆ: "img/day-accessory88.png",
    ⲆⵠⵠⲆⲆΔΔ: "img/night-accessory88.png",
    ⵠⲆᐃⲆΔⲆᐃ: "img/day-accessory89.png",
    ⲆⵠⵠΔⵠΔⲆ: "img/night-accessory89.png",
    ΔⲆᐃⲆᐃⲆΔ: "img/day-accessory90.png",
    ⵠⵠᐃⲆᐃᐃⵠ: "img/night-accessory90.png",
    ⵠᐃⵠΔᐃⵠΔ: "img/day-accessory91.png",
    ΔᐃᐃⲆⲆⵠⲆ: "img/night-accessory91.png",
    ΔⲆᐃᐃⲆⲆᐃ: "img/day-accessory92.png",
    ⵠⲆⵠᐃΔⵠⵠ: "img/night-accessory92.png",
    ⵠᐃⲆΔᐃⲆⵠ: "img/day-accessory93.png",
    ⲆᐃΔᐃⵠΔᐃ: "img/night-accessory93.png",
    ΔΔⵠⲆⲆⵠⵠ: "img/day-accessory94.png",
    ΔⲆΔᐃΔᐃⲆ: "img/night-accessory94.png",
    ⵠⵠΔᐃᐃᐃⵠ: "img/day-accessory95.png",
    ⲆΔᐃᐃΔΔΔ: "img/night-accessory95.png",
    ⵠⵠⲆⵠⲆⵠΔ: "img/day-accessory96.png",
    ⲆⲆΔᐃⵠⵠΔ: "img/night-accessory96.png",
    ᐃᐃΔⲆΔᐃⲆ: "img/day-accessory97.png",
    ᐃΔⵠⲆⵠⲆⲆ: "img/night-accessory97.png",
    ⵠᐃᐃᐃⵠΔⵠ: "img/day-accessory98.png",
    ᐃᐃΔᐃⲆⲆᐃ: "img/night-accessory98.png",
    ΔⵠⵠⲆᐃⵠΔ: "img/day-accessory99.png",
    ⲆⲆⲆΔᐃᐃᐃ: "img/night-accessory99.png",
    ⵠⲆⲆᐃΔᐃΔ: "img/day-accessory100.png",
    ᐃⵠΔΔᐃΔⲆ: "img/night-accessory100.png",
    ΔᐃΔΔⲆⵠΔ: "img/day-accessory101.png",
    ⲆⲆⲆᐃΔΔᐃ: "img/night-accessory101.png",
    ⵠΔⵠⲆⲆⲆᐃ: "img/day-accessory102.png",
    ΔⵠⵠⵠⲆᐃⲆ: "img/night-accessory102.png",
    ⵠⲆⵠⲆⵠⲆᐃ: "img/day-accessory103.png",
    ΔⲆⵠⵠΔⵠΔ: "img/night-accessory103.png",
    ΔⲆⵠΔᐃᐃⵠ: "img/day-accessory104.png",
    ⲆⲆᐃⲆᐃᐃᐃ: "img/night-accessory104.png",
    ΔⵠⲆⵠⲆⵠⲆ: "img/day-accessory105.png",
    ⵠⵠⵠΔᐃⲆΔ: "img/night-accessory105.png",
    ΔⵠΔΔᐃᐃᐃᐃᐃ: "img/day-accessory106.png",
    ΔᐃⲆᐃⵠΔΔⵠⵠ: "img/night-accessory106.png",
    ⲆᐃΔᐃⲆⵠᐃⵠΔ: "img/day-accessory107.png",
    ΔⲆⵠⵠⵠⲆΔⵠᐃ: "img/night-accessory107.png",
    ⲆⲆⲆⲆⲆⲆⵠ: "img/day-accessory82.png",
    ⲆⲆⵠⵠᐃᐃⲆ: "img/night-accessory82.png",
    ᐃᐃⵠΔΔᐃΔ: "img/day-book0.png",
    ⵠᐃΔᐃⲆⲆⵠ: "img/night-book0.png",
    ⲆⵠⵠΔᐃᐃΔ: "img/day-book1.png",
    ⵠⵠⲆΔΔᐃⲆ: "img/night-book1.png",
    ⲆᐃⲆΔᐃⲆΔ: "img/day-book2.png",
    ⵠⲆⲆΔΔᐃⲆ: "img/night-book2.png",
    ⵠⲆⲆⵠⵠᐃᐃ: "img/day-book3.png",
    ⵠΔⲆⵠⵠⲆⵠ: "img/night-book3.png",
    ⲆΔⲆᐃⲆᐃⲆ: "img/day-book4.png",
    ⵠΔΔⵠᐃΔⵠ: "img/night-book4.png",
    ⵠⵠⲆⵠᐃᐃᐃ: "img/day-book5.png",
    ⲆᐃᐃⵠⲆΔⵠ: "img/night-book5.png",
    ΔΔⲆᐃᐃⵠⵠ: "img/day-book6.png",
    ⲆΔⲆⵠᐃⲆΔ: "img/night-book6.png",
    ⵠᐃⲆᐃⵠᐃⵠ: "img/day-book7.png",
    ⵠᐃΔⵠⲆΔⵠ: "img/night-book7.png",
    ⲆᐃⵠᐃⵠⵠΔ: "img/day-book8.png",
    ⵠⵠᐃⵠⲆᐃᐃ: "img/night-book8.png",
    ⵠΔⲆᐃᐃⵠΔ: "img/day-book9.png",
    ΔⲆᐃΔⵠⲆᐃ: "img/night-book9.png",
    ⵠᐃᐃⲆⲆⲆΔ: "img/day-book10.png",
    ᐃⵠⲆΔΔⵠⲆ: "img/night-book10.png",
    ΔᐃΔᐃⵠⵠΔ: "img/day-book11.png",
    ⲆⲆⲆΔᐃⵠⵠ: "img/night-book11.png",
    ΔⲆᐃΔᐃᐃΔ: "img/day-book12.png",
    ⵠΔΔᐃᐃᐃⵠ: "img/night-book12.png",
    ⵠΔᐃⵠᐃᐃⲆ: "img/day-book13.png",
    ΔⲆⲆⵠΔⲆᐃ: "img/night-book13.png",
    ⵠⵠⲆᐃΔⲆΔ: "img/day-book14.png",
    ⵠΔΔΔᐃⵠᐃ: "img/night-book14.png",
    ᐃⲆᐃΔⵠΔᐃ: "img/day-book15.png",
    ᐃⲆⲆⵠᐃᐃⵠ: "img/night-book15.png",
    ΔⵠΔⵠⵠᐃⵠ: "img/day-book16.png",
    ᐃΔᐃⵠⵠⲆᐃ: "img/night-book16.png",
    ⵠᐃᐃⲆΔΔᐃ: "img/day-book17.png",
    ΔⵠⵠⲆⲆᐃᐃ: "img/night-book17.png",
    ⲆⲆⲆᐃΔΔⲆ: "img/day-book18.png",
    ΔⲆⲆᐃⵠⲆⵠ: "img/night-book18.png",
    ΔⲆΔⵠΔⲆΔ: "img/day-book19.png",
    ⲆⵠᐃⵠⲆⲆⵠ: "img/night-book19.png",
    ⲆᐃⲆᐃΔⲆᐃ: "img/day-book20.png",
    ΔⲆⲆᐃΔᐃⲆ: "img/night-book20.png",
    ΔᐃⵠΔᐃⲆᐃ: "img/day-book21.png",
    ᐃⵠΔⲆᐃᐃΔ: "img/night-book21.png",
    ⲆⵠⲆⵠΔΔⵠ: "img/day-book22.png",
    ΔⵠᐃΔⲆⲆᐃ: "img/night-book22.png",
    ⲆΔⲆᐃⵠⵠΔ: "img/day-book23.png",
    ᐃᐃⲆⲆΔⵠⵠ: "img/night-book23.png",
    ΔⲆᐃⲆⲆⵠⲆ: "img/day-book24.png",
    ⲆΔⵠⲆᐃⲆⲆ: "img/night-book24.png",
    ΔΔⵠᐃⲆⲆᐃ: "img/day-book25.png",
    ᐃΔⵠⲆⲆΔⵠ: "img/night-book25.png",
    ᐃΔⵠᐃⵠⵠⲆ: "img/day-book26.png",
    ⲆᐃΔΔⵠΔⵠ: "img/night-book26.png",
    ⲆⵠΔΔΔⵠⲆ: "img/day-book27.png",
    ⵠᐃⲆⵠᐃᐃᐃ: "img/night-book27.png",
    ⵠᐃΔⵠⵠⵠΔ: "img/day-book28.png",
    ᐃΔⵠᐃⵠⵠᐃ: "img/night-book28.png",
    ᐃⲆΔΔⵠⲆⲆ: "img/day-book29.png",
    ΔⲆⲆΔᐃⲆΔ: "img/night-book29.png",
    ΔⵠᐃⵠⲆᐃᐃ: "img/day-book30.png",
    ⲆᐃΔᐃᐃΔΔ: "img/night-book30.png",
    ⵠᐃⲆᐃᐃΔᐃ: "img/day-book31.png",
    ΔⲆⲆⵠᐃⵠΔ: "img/night-book31.png",
    ᐃᐃΔᐃᐃᐃⵠ: "img/day-book32.png",
    ⲆΔⵠⵠΔᐃᐃ: "img/night-book32.png",
    ⵠⵠⲆΔᐃΔⵠ: "img/day-book33.png",
    ⵠⲆⲆᐃΔΔⲆ: "img/night-book33.png",
    ᐃᐃⵠⲆᐃΔΔ: "img/day-book34.png",
    ⲆᐃΔⲆᐃΔΔ: "img/night-book34.png",
    ᐃΔⲆΔⲆⲆΔ: "img/day-book35.png",
    ᐃᐃⲆⵠΔⵠᐃ: "img/night-book35.png",
    ΔⵠⲆᐃᐃⲆᐃ: "img/day-book36.png",
    ᐃⵠⲆⵠᐃᐃⲆ: "img/night-book36.png",
    ⵠⵠᐃΔⲆΔⵠⵠΔ: "img/day-book37.png",
    ᐃⲆΔΔᐃⲆⵠΔⵠ: "img/night-book37.png",
    ΔⵠΔⵠΔⲆΔ: "img/day-book38.png",
    ⵠΔⲆᐃᐃΔⵠ: "img/night-book38.png",
    ᐃⵠΔⲆΔⵠⲆ: "img/day-book39.png",
    ᐃⲆᐃᐃᐃᐃᐃ: "img/night-book39.png",
    ΔⵠⲆⲆᐃⵠⲆ: "img/day-book40.png",
    ΔⲆΔⲆΔΔⲆ: "img/night-book40.png",
    ⵠᐃⲆⲆΔⵠᐃ: "img/day-book41.png",
    ΔⲆⵠⵠⵠⵠⵠ: "img/night-book41.png",
    ⵠⵠⲆⵠⲆΔΔ: "img/day-book42.png",
    ΔΔⲆⵠⲆᐃⲆ: "img/night-book42.png",
    ᐃΔⵠⲆⵠⵠΔ: "img/day-book43.png",
    ΔΔⲆΔᐃᐃⲆ: "img/night-book43.png",
    ΔⵠΔⲆⵠΔᐃ: "img/day-book44.png",
    ⲆⵠⲆΔⵠⵠⲆ: "img/night-book44.png",
    ⲆⲆᐃⲆⲆⲆⲆ: "img/day-book45.png",
    ᐃΔⲆᐃⵠⲆⲆ: "img/night-book45.png",
    ⵠⲆⵠᐃᐃᐃⲆ: "img/day-book46.png",
    ⵠⲆⲆᐃΔᐃᐃ: "img/night-book46.png",
    ⵠⲆΔΔⲆΔⲆ: "img/day-book47.png",
    ᐃⲆⵠⵠⲆᐃⵠ: "img/night-book47.png",
    ΔᐃᐃⲆⲆΔΔ: "img/day-book48.png",
    ΔᐃⵠᐃⲆᐃᐃ: "img/night-book48.png",
    ΔᐃⵠⲆᐃⲆⲆ: "img/day-book49.png",
    ᐃⵠⲆΔⵠᐃᐃ: "img/night-book49.png",
    ΔⲆΔΔΔⲆᐃ: "img/day-book50.png",
    ΔΔⵠⲆᐃᐃᐃ: "img/night-book50.png",
    ᐃᐃΔΔⵠⵠⲆ: "img/day-crate1.png",
    ᐃᐃΔᐃΔᐃΔ: "img/night-crate1.png",
    ΔⲆᐃᐃⵠᐃⵠ: "img/day-crate2.png",
    ΔⲆᐃⵠᐃⵠᐃ: "img/night-crate2.png",
    ΔⵠⲆⲆⵠⲆⵠ: "img/day-crate3.png",
    ΔΔΔΔΔᐃⵠ: "img/night-crate3.png",
    ΔᐃⲆⲆⵠⲆΔ: "img/day-crate4.png",
    ⲆᐃⵠΔΔᐃᐃ: "img/night-crate4.png",
    ⲆⵠⲆΔⵠΔΔ: "img/day-crate5.png",
    ⲆᐃᐃΔⵠⲆⲆ: "img/night-crate5.png",
    ΔⵠΔⲆᐃᐃⵠ: "img/day-crate6.png",
    ΔΔᐃⲆᐃⲆⲆ: "img/night-crate6.png",
    ᐃⵠΔⲆⵠⲆΔ: "img/day-crate7.png",
    ⵠΔⲆΔⵠⵠⵠ: "img/night-crate7.png",
    ΔᐃᐃΔΔⲆⵠ: "img/day-crate8.png",
    ⲆᐃΔΔⲆⲆᐃ: "img/night-crate8.png",
    ⵠᐃᐃᐃⵠΔΔ: "img/day-crate9.png",
    ᐃᐃⵠⲆΔⵠⵠ: "img/night-crate9.png",
    ⲆⲆⲆⵠⲆⲆΔ: "img/day-crate10.png",
    ⵠᐃⵠᐃΔΔΔ: "img/night-crate10.png",
    ⵠⲆᐃⲆⵠΔᐃ: "img/day-crate11.png",
    ᐃΔⲆᐃΔⵠΔ: "img/night-crate11.png",
    ⵠΔΔᐃᐃⵠⵠ: "img/day-crate12.png",
    ΔᐃᐃⲆᐃⵠΔ: "img/night-crate12.png",
    ΔⵠⲆᐃⲆⲆᐃ: "img/day-crate13.png",
    ᐃⲆᐃⵠᐃΔⲆ: "img/night-crate13.png",
    ⲆΔᐃⵠΔⲆⲆ: "img/day-crate14.png",
    ΔΔΔⵠᐃⵠⵠ: "img/night-crate14.png",
    ᐃᐃⵠΔΔⲆᐃ: "img/day-crate15.png",
    ⵠΔᐃⲆᐃᐃΔ: "img/night-crate15.png",
    ΔⵠᐃᐃⵠⲆⲆ: "img/day-crate16.png",
    ⲆᐃⲆⲆⵠᐃΔ: "img/night-crate16.png",
    ΔⵠᐃⵠΔᐃⲆ: "img/day-crate17.png",
    ⲆⵠᐃⲆⵠᐃΔ: "img/night-crate17.png",
    ⵠⵠⲆΔᐃⲆⵠ: "img/day-crate18.png",
    ΔⲆΔΔⵠΔⵠ: "img/night-crate18.png",
    ΔᐃⵠⲆⵠᐃⲆ: "img/day-crate19.png",
    ΔᐃᐃᐃᐃᐃⲆ: "img/night-crate19.png",
    ⵠΔΔⲆⵠᐃᐃ: "img/day-crate20.png",
    ⵠΔᐃΔⵠⵠⵠ: "img/night-crate20.png",
    ᐃᐃⲆᐃⲆⵠⲆ: "img/day-crate21.png",
    ⲆΔᐃΔⵠᐃⲆ: "img/night-crate21.png",
    ⵠΔⵠᐃⲆⲆⵠ: "img/day-crate22.png",
    ⵠΔⵠⲆⵠᐃⲆ: "img/night-crate22.png",
    ᐃᐃⵠᐃᐃᐃΔ: "img/day-crate23.png",
    ᐃΔᐃΔΔⲆᐃ: "img/night-crate23.png",
    ⵠᐃΔᐃⲆΔΔ: "img/day-crate24.png",
    ⲆⵠΔⲆΔΔᐃ: "img/night-crate24.png",
    ⲆΔᐃᐃΔΔⵠ: "img/day-crate25.png",
    ⵠΔⵠⵠᐃⵠⵠ: "img/night-crate25.png",
    ⲆᐃΔᐃⵠⵠΔ: "img/day-crate26.png",
    ⲆΔᐃⲆⲆΔⲆ: "img/night-crate26.png",
    ᐃⵠΔΔΔⲆⵠ: "img/day-crate27.png",
    ΔⵠⵠⵠⵠⲆΔ: "img/night-crate27.png",
    ΔⵠΔⵠᐃⵠⵠ: "img/day-crate28.png",
    ᐃⲆᐃΔΔⵠⵠ: "img/night-crate28.png",
    ⵠᐃᐃⵠᐃⵠᐃ: "img/day-crate29.png",
    ᐃⲆΔᐃⵠᐃᐃ: "img/night-crate29.png",
    ᐃΔⲆⲆⵠⲆⵠ: "img/day-crate30.png",
    ΔⲆⲆⲆⲆⲆᐃ: "img/night-crate30.png",
    ⵠⵠᐃᐃⵠᐃΔ: "img/day-crate31.png",
    ⲆΔⵠⵠⵠᐃⲆ: "img/night-crate31.png",
    ⵠⲆΔᐃⵠΔⲆ: "img/day-crate32.png",
    ᐃᐃⲆΔᐃⵠⵠ: "img/night-crate32.png",
    ⲆⵠⵠⵠΔⲆᐃ: "img/day-crate33.png",
    ⵠΔⲆⵠⲆⵠⵠ: "img/night-crate33.png",
    ⵠⲆΔⵠᐃⵠⵠ: "img/day-crate34.png",
    ⲆⲆᐃⲆΔⵠᐃ: "img/night-crate34.png",
    ᐃⵠᐃⲆⵠⲆΔ: "img/day-crate35.png",
    ᐃᐃΔΔΔⵠᐃ: "img/night-crate35.png",
    ⲆΔⲆⵠΔⵠⲆ: "img/day-crate36.png",
    ⲆΔⵠᐃⲆⵠⵠ: "img/night-crate36.png",
    ΔⲆⵠΔᐃΔⵠ: "img/day-crate37.png",
    ⲆⲆᐃⵠᐃᐃⲆ: "img/night-crate37.png",
    ⵠⲆᐃΔᐃᐃΔ: "img/day-crate38.png",
    ΔΔΔᐃⵠⲆⵠ: "img/night-crate38.png",
    ᐃⵠⲆΔᐃⵠⵠ: "img/day-crate39.png",
    ⵠᐃⵠᐃᐃΔⵠ: "img/night-crate39.png",
    ᐃⲆᐃᐃᐃᐃΔ: "img/day-crate40.png",
    ᐃᐃΔⲆⵠΔΔ: "img/night-crate40.png",
    ⵠᐃⵠⵠΔⲆⵠ: "img/day-crate41.png",
    ⵠⵠΔⵠᐃⲆⵠ: "img/night-crate41.png",
    ⲆⲆⲆΔΔⵠⲆ: "img/day-crate42.png",
    ᐃⲆⲆⲆΔⲆⲆ: "img/night-crate42.png",
    ⵠⵠⵠᐃⵠⵠⵠ: "img/day-crate43.png",
    ⲆᐃⵠᐃⲆⲆⲆ: "img/night-crate43.png",
    ᐃΔⲆⲆⲆⵠΔ: "img/day-crate44.png",
    ⵠⲆⵠⲆᐃⲆⲆ: "img/night-crate44.png",
    ⵠⲆⵠΔⵠᐃⲆ: "img/day-crate45.png",
    ⲆΔⲆⵠⲆΔⵠ: "img/night-crate45.png",
    ᐃⵠΔΔΔᐃᐃ: "img/day-crate46.png",
    ᐃⲆⵠΔⵠⵠⵠ: "img/night-crate46.png",
    ΔᐃᐃΔⵠⲆⵠ: "img/day-crate47.png",
    ΔⲆΔⵠΔΔᐃ: "img/night-crate47.png",
    ⲆᐃᐃⵠⲆⵠᐃ: "img/day-crate48.png",
    ⵠΔΔᐃᐃⵠΔ: "img/night-crate48.png",
    ⵠⵠⲆⵠΔᐃΔ: "img/day-crate49.png",
    ᐃⲆⵠⲆᐃᐃⲆ: "img/night-crate49.png",
    ⵠⵠⲆΔⵠᐃΔ: "img/day-crate50.png",
    ⲆⵠⵠⵠΔΔⵠ: "img/night-crate50.png",
    ⵠΔΔΔⲆⵠΔ: "img/day-crate51.png",
    ⲆᐃⵠΔⵠᐃⵠ: "img/night-crate51.png",
    ⲆⲆⵠⵠᐃⵠᐃ: "img/day-crate52.png",
    ⵠᐃⲆⵠⵠⵠΔ: "img/night-crate52.png",
    ⲆᐃⲆᐃⵠⲆΔ: "img/day-crate53.png",
    ΔᐃⵠΔΔᐃⵠ: "img/night-crate53.png",
    ⵠⲆⵠⲆᐃΔΔ: "img/day-crate54.png",
    ⲆᐃⵠᐃⵠΔᐃ: "img/night-crate54.png",
    ⵠⲆⲆⲆᐃⵠⵠ: "img/day-crate55.png",
    ⲆⵠⵠⲆⲆΔⵠ: "img/night-crate55.png",
    ⲆΔⲆⲆᐃⲆᐃ: "img/day-crate56.png",
    ⲆⲆⲆᐃⲆⵠᐃ: "img/night-crate56.png",
    ⵠⲆᐃⲆⵠᐃⲆ: "img/day-crate57.png",
    ᐃⲆᐃΔΔⲆⲆ: "img/night-crate57.png",
    ᐃΔᐃⵠⲆΔΔ: "img/day-crate58.png",
    ΔⵠⵠⲆᐃᐃᐃ: "img/night-crate58.png",
    ⲆᐃΔⲆⲆΔⲆ: "img/day-crate59.png",
    ⵠΔⲆᐃⲆⲆⵠ: "img/night-crate59.png",
    ⲆΔⲆⵠΔᐃᐃ: "img/day-crate60.png",
    ΔΔᐃⲆⲆⵠΔ: "img/night-crate60.png",
    ᐃⲆⲆᐃΔᐃΔ: "img/day-crate61.png",
    ⵠⲆΔⲆΔΔΔ: "img/night-crate61.png",
    ⲆΔᐃⵠᐃⲆᐃ: "img/day-crate62.png",
    ᐃⵠⵠᐃᐃΔⲆ: "img/night-crate62.png",
    ⵠⵠⵠⲆⵠⵠⲆ: "img/day-crate63.png",
    ⵠⵠⵠⵠⵠⵠΔ: "img/night-crate63.png",
    ΔΔⲆΔⵠⵠᐃ: "img/day-crate64.png",
    ᐃⲆΔΔᐃΔⲆ: "img/night-crate64.png",
    ᐃΔᐃⵠᐃⵠⲆ: "img/day-crate65.png",
    ΔⲆΔⲆΔᐃΔ: "img/night-crate65.png",
    ⲆⵠⲆⲆⲆⲆⵠ: "img/day-crate66.png",
    ⵠᐃΔΔⲆΔⵠ: "img/night-crate66.png",
    ⵠⲆⲆⲆΔΔⲆ: "img/day-crate67.png",
    ΔⵠᐃᐃᐃⵠⲆ: "img/night-crate67.png",
    ᐃΔᐃΔΔⵠⵠ: "img/day-crate68.png",
    ⵠⲆⵠΔⵠⲆᐃ: "img/night-crate68.png",
    ⵠᐃᐃΔⲆΔⲆ: "img/day-crate69.png",
    ⵠⲆⲆⵠⲆⵠⵠ: "img/night-crate69.png",
    ΔᐃᐃᐃⲆⲆᐃ: "img/day-crate70.png",
    ᐃⵠΔⲆΔΔᐃ: "img/night-crate70.png",
    ⲆⵠⲆⵠΔᐃᐃ: "img/day-crate71.png",
    ᐃᐃⵠΔᐃⵠⵠ: "img/night-crate71.png",
    ΔΔᐃⲆᐃⵠᐃ: "img/day-crate72.png",
    ⲆⵠⵠⵠΔⵠᐃ: "img/night-crate72.png",
    ⵠΔⲆᐃΔᐃᐃ: "img/day-crate73.png",
    ⵠⵠⲆΔᐃⲆΔ: "img/night-crate73.png",
    ᐃΔᐃΔⵠⵠᐃ: "img/day-crate74.png",
    ΔᐃⲆⵠⲆⵠⲆ: "img/night-crate74.png",
    ᐃΔΔΔᐃΔᐃ: "img/day-crate75.png",
    ΔΔⲆΔⲆⵠⲆ: "img/night-crate75.png",
    ⲆΔΔᐃⵠΔᐃ: "img/day-crate76.png",
    ⲆⲆᐃΔᐃⲆⵠ: "img/night-crate76.png",
    ⵠΔΔΔΔⵠᐃ: "img/day-crate77.png",
    ⵠΔᐃΔⵠᐃⲆ: "img/night-crate77.png",
    ΔΔᐃΔⵠⲆΔ: "img/day-crate78.png",
    ᐃⵠⲆⲆᐃⲆⵠ: "img/night-crate78.png",
    ᐃⵠΔⵠᐃΔᐃ: "img/day-crate79.png",
    ⲆⵠⵠΔΔⲆΔ: "img/night-crate79.png",
    ᐃⲆⲆᐃⵠᐃᐃ: "img/day-herb0.png",
    ΔⵠΔⵠⵠΔⲆ: "img/day-herb1.png",
    ⵠΔΔᐃⵠⲆⲆ: "img/day-herb2.png",
    ᐃᐃΔⵠⵠⵠΔ: "img/day-herb3.png",
    ᐃᐃᐃΔᐃⲆⲆ: "img/day-herb4.png",
    ᐃⵠⵠⵠⵠⲆⵠ: "img/day-herb5.png",
    ⲆⲆΔᐃⵠⲆⲆ: "img/day-herb6.png",
    ΔΔⲆⲆⲆⲆⲆ: "img/day-herb7.png",
    ⵠᐃᐃⵠΔᐃⲆ: "img/day-herb8.png",
    ᐃᐃⲆᐃⵠᐃΔ: "img/day-herb9.png",
    ᐃⲆⵠⲆΔⲆΔ: "img/day-herb10.png",
    ᐃΔⲆΔΔⲆΔ: "img/day-herb11.png",
    ⲆⵠⵠⲆⲆⲆᐃ: "img/day-herb12.png",
    ⲆⲆⵠᐃⵠⲆⲆ: "img/day-herb13.png",
    ⲆⲆΔᐃⲆⲆⲆ: "img/day-herb14.png",
    ⵠᐃⲆⵠΔΔΔ: "img/day-herb15.png",
    ⵠΔⲆᐃⵠⵠᐃ: "img/day-shell0.png",
    ⲆᐃΔⲆᐃⵠⵠ: "img/day-shell1.png",
    ᐃΔΔΔⲆⲆΔ: "img/day-shell2.png",
    ⲆΔΔΔΔᐃⵠ: "img/day-leaf1.png",
    ⵠΔⲆΔⵠᐃⲆ: "img/day-leaf2.png",
    ᐃᐃᐃⲆᐃⵠⲆ: "img/day-leaf3.png",
    ᐃΔΔⲆᐃⵠⲆ: "img/day-leaf4.png",
    ⲆᐃᐃⵠΔⲆᐃ: "img/day-leaf5.png",
    ΔᐃⵠⲆⲆΔᐃ: "img/day-leaf6.png",
    ⵠΔⵠᐃⵠⲆⲆ: "img/day-leaf7.png",
    ⵠⲆᐃⲆΔΔᐃ: "img/day-leaf8.png",
    ΔᐃΔⲆᐃΔΔ: "img/day-rock0.png",
    ⲆⵠΔΔⵠΔᐃ: "img/day-rock1.png",
    ⲆΔⲆᐃᐃᐃⲆ: "img/day-rock2.png",
    ⲆΔⲆⵠⵠΔΔ: "img/day-rock3.png",
    ⵠⵠⵠⲆⵠⲆΔ: "img/day-rock4.png",
    ⲆⵠⲆⲆᐃⲆⵠ: "img/day-rock5.png",
    ⵠⵠⲆᐃᐃⵠᐃ: "img/day-rock6.png",
    ⵠΔⵠⲆⲆΔΔ: "img/day-rock7.png",
    ⵠΔⵠΔⲆⵠⵠ: "img/day-rock8.png",
    ΔⵠⲆⲆⵠⵠⵠ: "img/day-rock9.png",
    ⲆⲆΔΔᐃᐃⵠ: "img/day-rock10.png",
    ΔΔⵠᐃᐃΔⵠ: "img/day-rock11.png",
    ⲆⵠⵠᐃⲆΔᐃ: "img/day-rock12.png",
    ⵠⲆΔⲆᐃΔⵠ: "img/day-rock13.png",
    ΔⲆᐃⵠΔⲆⲆ: "img/day-flower1.png",
    ⲆⵠΔᐃΔᐃΔ: "img/day-flower2.png",
    ⲆΔⲆᐃⲆⵠΔ: "img/day-flower3.png",
    ΔⵠᐃᐃΔⵠΔ: "img/day-flower4.png",
    ΔⲆⵠⲆΔᐃΔ: "img/day-flower5.png",
    ⲆⲆⵠΔᐃᐃᐃ: "img/day-flower6.png",
    ⵠⵠⲆⲆΔⲆⲆ: "img/day-flower7.png",
    ΔΔⲆΔⵠΔᐃ: "img/day-flower8.png",
    ΔᐃⲆᐃⲆⵠⲆ: "img/day-flower9.png",
    ⵠᐃΔᐃⵠⵠⲆ: "img/day-herb16.png",
    ᐃⲆΔⵠⲆᐃΔ: "img/day-herb17.png",
    ΔᐃᐃⵠΔᐃⲆ: "img/day-herb18.png",
    ΔΔᐃΔᐃⵠᐃ: "img/day-herb19.png",
    ⵠΔⲆⲆⵠⵠⲆ: "img/day-herb20.png",
    ⵠᐃⲆᐃΔᐃᐃ: "img/day-herb21.png",
    ⵠⲆⲆᐃΔΔᐃ: "img/night-herb0.png",
    ⲆΔᐃⵠΔⵠΔ: "img/night-herb1.png",
    ⲆⵠᐃΔⵠⲆⲆ: "img/night-herb2.png",
    ΔⵠⲆΔΔⵠⵠ: "img/night-herb3.png",
    ⲆⲆΔΔᐃⲆᐃ: "img/night-herb4.png",
    ⲆⲆⵠᐃᐃΔⵠ: "img/night-herb5.png",
    ᐃⲆΔᐃⵠΔⵠ: "img/night-herb6.png",
    ⲆⵠⲆᐃΔΔᐃ: "img/night-herb7.png",
    ᐃΔⲆᐃⵠΔᐃ: "img/night-herb8.png",
    ⲆᐃⲆⵠΔⲆⵠ: "img/night-herb9.png",
    ΔΔΔᐃᐃᐃⲆ: "img/night-herb10.png",
    ⲆᐃΔᐃΔᐃᐃ: "img/night-herb11.png",
    ⵠⲆᐃⵠΔⵠᐃ: "img/night-herb12.png",
    ⵠᐃⵠΔΔⲆⲆ: "img/night-herb13.png",
    ⲆΔᐃᐃᐃⲆᐃ: "img/night-herb14.png",
    ᐃᐃⲆΔᐃΔⲆ: "img/night-herb15.png",
    ᐃᐃⵠⵠⲆⵠⵠ: "img/night-shell0.png",
    ᐃⵠᐃΔⵠᐃΔ: "img/night-shell1.png",
    ⲆⵠⲆⲆΔⲆᐃ: "img/night-shell2.png",
    ΔⵠᐃⲆΔⵠᐃ: "img/night-leaf1.png",
    ᐃⵠΔᐃⲆΔⵠ: "img/night-leaf2.png",
    ᐃⵠⵠⵠᐃⵠᐃ: "img/night-leaf3.png",
    ⲆⲆΔⵠⵠⲆᐃ: "img/night-leaf4.png",
    ⵠⵠΔⲆⵠⲆⵠ: "img/night-leaf5.png",
    ᐃⲆᐃⵠᐃⲆΔ: "img/night-leaf6.png",
    ⵠⲆΔᐃΔⵠᐃ: "img/night-leaf7.png",
    ᐃᐃΔⵠⲆⵠⵠ: "img/night-leaf8.png",
    ⵠΔⲆᐃⵠΔⵠ: "img/night-rock0.png",
    ⵠⲆⵠⵠⵠⲆⲆ: "img/night-rock1.png",
    ⵠⲆⲆᐃΔⵠΔ: "img/night-rock2.png",
    ΔΔᐃⵠΔⲆᐃ: "img/night-rock3.png",
    ⲆⵠⵠⲆᐃⵠⲆ: "img/night-rock4.png",
    ᐃᐃΔΔΔⲆⲆ: "img/night-rock5.png",
    ΔΔⵠⵠᐃⵠΔ: "img/night-rock6.png",
    ⲆⵠⲆⵠΔᐃΔ: "img/night-rock7.png",
    ΔΔᐃΔΔⲆᐃ: "img/night-rock8.png",
    ⲆΔᐃⲆΔΔⲆ: "img/night-rock9.png",
    ᐃⲆⵠⲆΔΔΔ: "img/night-rock10.png",
    ΔⲆΔᐃΔⲆᐃ: "img/night-rock11.png",
    ΔᐃΔⲆⵠᐃΔ: "img/night-rock12.png",
    ⲆΔⲆΔᐃⲆΔ: "img/night-rock13.png",
    ᐃⵠᐃⵠⵠⵠⲆ: "img/night-flower1.png",
    ⲆΔⲆⵠⲆⵠΔ: "img/night-flower2.png",
    ᐃⲆⲆⲆⲆⲆⵠ: "img/night-flower3.png",
    ᐃⵠⲆⵠΔⲆΔ: "img/night-flower4.png",
    ΔⲆᐃⵠΔᐃΔ: "img/night-flower5.png",
    ΔᐃⲆⵠⵠⲆΔ: "img/night-flower6.png",
    ΔᐃΔⲆΔⵠᐃ: "img/night-flower7.png",
    ᐃΔᐃᐃᐃΔⵠ: "img/night-flower8.png",
    ⲆⵠᐃⲆⵠⵠΔ: "img/night-flower9.png",
    ⵠⲆⵠⲆⲆⲆⲆ: "img/night-herb16.png",
    ⲆᐃᐃⲆⲆᐃⵠ: "img/night-herb17.png",
    ⵠⲆⲆⵠᐃⲆⲆ: "img/night-herb18.png",
    ⲆⵠⵠⲆᐃΔⵠ: "img/night-herb19.png",
    ΔⵠΔΔᐃΔⵠ: "img/night-herb20.png",
    ⵠⲆⲆΔΔΔᐃ: "img/night-herb21.png",
    ᐃⲆⲆⲆⲆⵠⵠ: "img/day-river000-010-000.png",
    ΔⵠᐃⵠⲆΔⲆ: "img/day-river000-010-010.png",
    ᐃⲆⲆᐃⵠⲆⵠ: "img/day-river000-011-000.png",
    ⲆΔᐃᐃⲆΔΔ: "img/day-river000-011-010.png",
    ⵠⲆⵠᐃⵠⵠⲆ: "img/day-river000-011-011.png",
    ΔᐃΔᐃⲆᐃΔ: "img/day-river000-110-000.png",
    ⲆΔⵠⲆⲆⵠᐃ: "img/day-river000-110-010.png",
    ⵠᐃᐃᐃᐃⲆⲆ: "img/day-river000-110-110.png",
    ⵠᐃⵠᐃⵠⵠⲆ: "img/day-river000-111-000.png",
    ᐃΔΔᐃⵠᐃⲆ: "img/day-river000-111-010.png",
    ᐃᐃᐃᐃⵠⵠⲆ: "img/day-river000-111-011.png",
    ⲆᐃΔᐃⲆⵠⵠ: "img/day-river000-111-110.png",
    ΔᐃΔΔΔΔⲆ: "img/day-river000-111-111.png",
    ᐃΔᐃⲆⵠᐃΔ: "img/day-river010-010-000.png",
    ᐃⲆΔⵠᐃΔᐃ: "img/day-river010-010-010.png",
    ⲆΔᐃⵠᐃⲆΔ: "img/day-river010-011-000.png",
    ⵠᐃⵠⵠⲆⵠΔ: "img/day-river010-011-010.png",
    ᐃⲆΔᐃⲆⲆⲆ: "img/day-river010-011-011.png",
    ⲆⵠΔⵠᐃᐃᐃ: "img/day-river010-110-000.png",
    ΔΔΔⲆᐃⲆⵠ: "img/day-river010-110-010.png",
    ᐃΔΔⲆⵠᐃⵠ: "img/day-river010-110-110.png",
    ᐃⲆⵠⵠⵠΔⲆ: "img/day-river010-111-000.png",
    ⲆᐃΔᐃⵠΔⵠ: "img/day-river010-111-010.png",
    ⲆΔᐃⵠᐃⲆⵠ: "img/day-river010-111-011.png",
    Δⵠᐃᐃⵠᐃⵠ: "img/day-river010-111-110.png",
    ⲆⵠᐃⵠⲆΔΔ: "img/day-river010-111-111.png",
    ΔΔⵠⵠⲆΔⲆ: "img/day-river011-011-000.png",
    ᐃⲆΔⵠⵠⵠΔ: "img/day-river011-011-010.png",
    ⵠᐃⲆⲆᐃⲆΔ: "img/day-river011-011-011.png",
    ΔⲆᐃⵠΔᐃⲆ: "img/day-river011-111-000.png",
    ⵠⵠΔΔΔΔΔ: "img/day-river011-111-010.png",
    ᐃᐃΔⵠⵠΔⵠ: "img/day-river011-111-011.png",
    ⵠᐃⵠⵠᐃⲆⵠ: "img/day-river011-111-110.png",
    ⵠᐃⲆΔⲆⲆΔ: "img/day-river011-111-111.png",
    ⵠⲆⵠΔᐃΔΔ: "img/day-river110-110-000.png",
    ΔᐃΔⵠⵠⲆᐃ: "img/day-river110-110-010.png",
    ΔⵠᐃᐃⵠΔⵠ: "img/day-river110-110-110.png",
    ⲆΔᐃⵠᐃⵠᐃ: "img/day-river110-111-000.png",
    ⵠᐃⵠᐃΔⲆᐃ: "img/day-river110-111-010.png",
    ⲆΔⲆⲆⲆΔⲆ: "img/day-river110-111-011.png",
    ⵠᐃⵠⲆⲆⵠᐃ: "img/day-river110-111-110.png",
    ᐃΔⵠᐃᐃΔᐃ: "img/day-river110-111-111.png",
    ᐃΔᐃΔᐃⲆΔ: "img/day-river111-111-011.png",
    ᐃⲆⲆⲆⵠⲆⲆ: "img/day-river111-111-110.png",
    ᐃΔᐃΔᐃⲆΔ: "img/day-river111-111-011.png",
    ΔᐃΔΔⵠᐃⵠ: "img/day-river111-111-000.png",
    ⵠΔΔⵠΔⲆᐃ: "img/day-river111-111-111.png",
    ᐃᐃΔΔⵠⵠⵠ: "img/day-river111-111-010.png",
    ΔᐃⵠⵠΔΔⲆ: "img/night-river000-010-000.png",
    ⵠΔⲆΔⲆΔⲆ: "img/night-river000-010-010.png",
    ⲆⲆᐃᐃᐃⲆⲆ: "img/night-river000-011-000.png",
    ⲆᐃⲆᐃᐃᐃΔ: "img/night-river000-011-010.png",
    ⵠⵠⵠⵠⲆⲆⲆ: "img/night-river000-011-011.png",
    ⵠⵠⵠⲆΔⲆⲆ: "img/night-river000-110-000.png",
    ΔⵠΔⵠⲆⲆⲆ: "img/night-river000-110-010.png",
    ᐃⵠΔⲆΔⵠᐃ: "img/night-river000-110-110.png",
    ᐃᐃⲆⵠⲆⵠⲆ: "img/night-river000-111-000.png",
    ᐃⵠⵠⲆᐃⵠⲆ: "img/night-river000-111-010.png",
    ⲆⵠⲆᐃⵠΔⲆ: "img/night-river000-111-011.png",
    ΔᐃᐃᐃⲆᐃⵠ: "img/night-river000-111-110.png",
    ⵠᐃΔⲆⵠΔΔ: "img/night-river000-111-111.png",
    ΔΔⲆᐃⲆⵠⲆ: "img/night-river010-010-000.png",
    ΔⲆᐃΔⵠⵠⲆ: "img/night-river010-010-010.png",
    ᐃⲆⵠΔᐃⵠΔ: "img/night-river010-011-000.png",
    ⲆΔⵠΔⲆᐃⲆ: "img/night-river010-011-010.png",
    ᐃⲆⲆⵠᐃⲆᐃ: "img/night-river010-011-011.png",
    ⵠⲆᐃⲆⲆᐃⵠ: "img/night-river010-110-000.png",
    ΔⵠΔΔᐃⵠⲆ: "img/night-river010-110-010.png",
    ⲆᐃⲆⵠᐃⲆⵠ: "img/night-river010-110-110.png",
    ⵠⵠᐃⲆⵠΔᐃ: "img/night-river010-111-000.png",
    ᐃΔⵠⲆΔⵠⵠ: "img/night-river010-111-010.png",
    ᐃⵠⲆΔΔⵠⵠ: "img/night-river010-111-011.png",
    ᐃΔᐃⵠⵠⲆⵠ: "img/night-river010-111-110.png",
    ⵠΔⲆᐃᐃⲆΔ: "img/night-river010-111-111.png",
    ΔⵠΔᐃΔⵠⵠ: "img/night-river011-011-000.png",
    ᐃΔΔⲆᐃⵠⵠ: "img/night-river011-011-010.png",
    ᐃᐃΔⵠᐃⲆΔ: "img/night-river011-011-011.png",
    ⵠⵠᐃᐃΔⲆⵠ: "img/night-river011-111-000.png",
    ⵠⲆⵠΔΔⵠⲆ: "img/night-river011-111-010.png",
    ⵠⲆΔᐃᐃᐃⵠ: "img/night-river011-111-011.png",
    ⵠⵠⲆⵠⲆᐃⲆ: "img/night-river011-111-110.png",
    ⵠᐃⵠⲆΔⵠᐃ: "img/night-river011-111-111.png",
    ᐃᐃⲆᐃΔⵠⲆ: "img/night-river110-110-000.png",
    ⲆⲆΔᐃⲆΔΔ: "img/night-river110-110-010.png",
    ⲆΔⵠΔⵠᐃⵠ: "img/night-river110-110-110.png",
    ᐃⵠⵠΔⲆⲆΔ: "img/night-river110-111-000.png",
    ΔᐃⵠⲆⵠᐃΔ: "img/night-river110-111-010.png",
    Δⵠⵠᐃᐃᐃᐃ: "img/night-river110-111-011.png",
    ᐃⵠⵠΔᐃᐃⵠ: "img/night-river110-111-110.png",
    ⵠⲆΔⲆΔⲆΔ: "img/night-river110-111-111.png",
    ᐃΔᐃⲆᐃΔᐃ: "img/night-river111-111-011.png",
    ⵠⵠΔᐃⵠᐃⲆ: "img/night-river111-111-110.png",
    ᐃΔᐃⲆᐃΔᐃ: "img/night-river111-111-011.png",
    ᐃΔᐃᐃⵠⲆⵠ: "img/night-river111-111-000.png",
    ᐃᐃⵠᐃⵠΔⲆ: "img/night-river111-111-111.png",
    ⲆⵠⵠᐃΔⲆᐃ: "img/night-river111-111-010.png",
    ΔⲆᐃᐃⵠΔⲆ: "img/day-pebblecompo1.png",
    ᐃᐃⵠⵠⲆ: "img/day-pebblecompo2.png",
    ᐃᐃⵠᐃᐃ: "img/day-pebblecompo3.png",
    ΔⲆΔⵠⵠⵠΔ: "img/day-pebblecompo4.png",
    ⲆᐃΔⵠΔ: "img/day-pebblecompo5.png",
    ᐃΔᐃᐃⲆ: "img/day-pebblecompo6.png",
    ΔΔⵠⵠᐃ: "img/day-pebblecompo7.png",
    ⲆⵠⲆⲆΔᐃᐃ: "img/day-pebblecompo8.png",
    ⲆⵠⲆⲆΔⲆⵠ: "img/day-pebblecompo9.png",
    ᐃΔⵠΔᐃⲆⵠ: "img/day-pebblecompo10.png",
    ΔᐃⲆᐃⲆ: "img/day-pebblecompo11.png",
    ᐃᐃⵠⵠⵠᐃᐃ: "img/day-pebblecompo12.png",
    ⲆⵠΔΔΔⲆΔ: "img/day-pebblecompo13.png",
    ᐃⵠⲆΔᐃᐃΔ: "img/day-pebblecompo14.png",
    ⵠⲆⵠᐃΔΔᐃ: "img/day-pebblecompo15.png",
    ⲆᐃⵠΔⲆⲆⵠ: "img/day-pebblecompo16.png",
    ᐃⵠⲆⲆΔ: "img/day-pebblecompo17.png",
    ⵠⵠⲆⲆΔⲆⵠ: "img/day-pebblecompo18.png",
    ΔᐃⲆᐃⲆΔⲆ: "img/day-pebblecompo19.png",
    ⵠⲆΔⲆⵠ: "img/day-pebblecompo20.png",
    ⵠⵠⵠᐃΔ: "img/day-pebblecompo21.png",
    ᐃⵠᐃΔᐃᐃᐃ: "img/day-pebblecompo22.png",
    ΔⲆⲆⲆᐃΔᐃ: "img/day-pebblecompo23.png",
    ΔᐃΔᐃⲆⵠⲆ: "img/day-pebblecompo24.png",
    ⲆⲆⲆᐃⵠ: "img/day-pebblecompo25.png",
    ⲆᐃⲆⵠⲆ: "img/day-pebblecompo26.png",
    ⲆᐃᐃⵠΔⲆⲆ: "img/day-pebblecompo27.png",
    ΔⲆⵠΔⲆ: "img/day-pebblecompo28.png",
    ⲆⲆΔⲆⲆΔᐃ: "img/night-pebblecompo1.png",
    Ⲇⵠᐃⵠⵠ: "img/night-pebblecompo2.png",
    ΔⵠⲆⲆΔ: "img/night-pebblecompo3.png",
    ΔⵠΔΔⵠᐃΔ: "img/night-pebblecompo4.png",
    ⲆᐃⵠΔⵠ: "img/night-pebblecompo5.png",
    ⵠΔᐃⲆⲆ: "img/night-pebblecompo6.png",
    ⲆᐃⵠⵠⲆ: "img/night-pebblecompo7.png",
    ᐃᐃⲆⲆΔᐃΔ: "img/night-pebblecompo8.png",
    ᐃᐃⵠⲆⲆⵠⲆ: "img/night-pebblecompo9.png",
    ᐃⲆᐃΔⲆⲆᐃ: "img/night-pebblecompo10.png",
    ᐃⵠΔᐃᐃ: "img/night-pebblecompo11.png",
    ᐃΔᐃⵠΔΔⵠ: "img/night-pebblecompo12.png",
    ᐃᐃⵠⲆⲆΔⵠ: "img/night-pebblecompo13.png",
    ⲆΔΔⲆᐃΔΔ: "img/night-pebblecompo14.png",
    ΔⲆᐃᐃᐃᐃᐃ: "img/night-pebblecompo15.png",
    ⵠⲆⲆⲆⵠᐃΔ: "img/night-pebblecompo16.png",
    ⵠⲆⵠⲆⲆ: "img/night-pebblecompo17.png",
    ⵠⵠᐃΔⲆⲆⵠ: "img/night-pebblecompo18.png",
    ⲆᐃⵠᐃⲆΔⲆ: "img/night-pebblecompo19.png",
    ⵠⲆΔⵠᐃ: "img/night-pebblecompo20.png",
    ⵠⲆᐃᐃΔ: "img/night-pebblecompo21.png",
    ⵠⵠⲆΔᐃΔⲆ: "img/night-pebblecompo22.png",
    ⵠⵠΔⲆⵠΔⲆ: "img/night-pebblecompo23.png",
    ⲆᐃΔⵠᐃᐃᐃ: "img/night-pebblecompo24.png",
    ⲆⵠᐃⲆⲆ: "img/night-pebblecompo25.png",
    ⲆᐃⵠⲆΔ: "img/night-pebblecompo26.png",
    ⵠᐃΔΔⲆⲆⲆ: "img/night-pebblecompo27.png",
    ᐃⵠⲆΔⲆ: "img/night-pebblecompo28.png",
    ⲆᐃᐃⵠᐃΔΔ: "img/day-baby-mammoth.png",
    ᐃⲆⵠⵠᐃᐃⲆ: "img/day-baby-mammoth-tamed.png",
    ⵠᐃⲆⵠᐃⵠᐃ: "img/day-baby-mammoth-angry.png",
    ᐃᐃⲆⵠⲆΔⵠ: "img/night-baby-mammoth.png",
    ᐃΔⵠΔⲆᐃᐃ: "img/night-baby-mammoth-tamed.png",
    ⵠΔⲆᐃᐃΔⲆ: "img/night-baby-mammoth-angry.png",
    ⲆⲆᐃⲆΔⵠⲆ: "img/inv-mammoth-out.png",
    ⵠⵠΔⵠᐃΔᐃ: "img/inv-mammoth-in.png",
    ΔⲆΔⵠⵠΔᐃ: "img/inv-mammoth-click.png",
    ⲆⵠⲆᐃⲆⲆΔ: "img/hurt-baby-mammoth.png",
    ΔΔΔⲆΔⵠΔ: "img/baby-mammoth-step.png",
    ⲆᐃᐃⵠⲆΔΔ: "img/day-flower-hat.png",
    ⲆⲆᐃΔⵠΔⵠ: "img/night-flower-hat.png",
    ΔΔΔᐃΔᐃⲆ: "img/inv-flower-hat-out.png",
    ⲆΔᐃⲆⵠⵠᐃ: "img/inv-flower-hat-in.png",
    ⲆΔⲆⵠᐃⵠⵠ: "img/inv-flower-hat-click.png",
    ΔⲆᐃⵠⲆᐃⲆ: "img/day-fur-hat.png",
    ᐃⵠΔᐃᐃΔΔ: "img/night-fur-hat.png",
    ΔⵠⲆⲆⲆⲆᐃ: "img/inv-fur-hat-out.png",
    ᐃΔᐃᐃⲆᐃⲆ: "img/inv-fur-hat-in.png",
    ⲆⲆⲆⲆᐃⵠᐃ: "img/inv-fur-hat-click.png",
    ⵠⲆⵠᐃΔⲆⲆ: "img/day-mammoth.png",
    ΔΔΔⲆⲆⵠᐃ: "img/night-mammoth.png",
    ΔⲆⲆΔᐃⲆᐃ: "img/hurt-mammoth.png",
    ΔᐃᐃΔᐃⵠⵠ: "img/inv-mammoth-fur-out.png",
    ᐃΔᐃᐃⵠᐃⲆ: "img/inv-mammoth-fur-in.png",
    ⲆᐃⲆⲆΔⵠⵠ: "img/inv-mammoth-fur-click.png",
    ⵠⵠᐃⵠᐃᐃⲆ: "img/inv-wood-bow-out.png",
    ⵠⵠⲆΔΔᐃⵠ: "img/inv-wood-bow-in.png",
    ΔΔΔΔΔⲆᐃ: "img/inv-wood-bow-click.png",
    ⵠΔⵠⵠⲆΔᐃ: "img/inv-wood-arrow-out.png",
    ΔᐃⲆᐃΔⲆΔ: "img/inv-wood-arrow-in.png",
    ⵠⲆⵠΔᐃⵠⲆ: "img/inv-wood-arrow-click.png",
    ΔΔᐃᐃⵠⵠⵠ: "img/day-wood-bow2.png",
    ΔᐃⲆᐃⵠᐃΔ: "img/night-wood-bow2.png",
    ⲆⲆᐃΔᐃⵠᐃ: "img/day-wood-arrow.png",
    ⵠΔΔᐃΔᐃⵠ: "img/night-wood-arrow.png",
    ⲆᐃⲆᐃⵠΔΔ: "img/inv-stone-bow-out.png",
    ⵠᐃⲆⲆᐃΔᐃ: "img/inv-stone-bow-in.png",
    ΔΔᐃᐃᐃᐃᐃ: "img/inv-stone-bow-click.png",
    ⲆΔΔⲆⵠΔΔ: "img/inv-stone-arrow-out.png",
    ᐃΔⵠΔⵠᐃᐃ: "img/inv-stone-arrow-in.png",
    ⲆⵠΔⵠⵠᐃⵠ: "img/inv-stone-arrow-click.png",
    ᐃᐃⲆⲆⲆᐃᐃ: "img/day-stone-bow.png",
    ΔΔⲆΔᐃⲆΔ: "img/night-stone-bow.png",
    ⵠΔᐃⲆⲆⵠΔ: "img/day-stone-arrow.png",
    ⲆⲆⵠΔᐃⵠⵠ: "img/night-stone-arrow.png",
    ⲆᐃⲆᐃⲆⵠᐃ: "img/inv-gold-bow-out.png",
    ⵠᐃⵠⵠᐃⵠⵠ: "img/inv-gold-bow-in.png",
    ΔΔⲆΔⵠⵠⲆ: "img/inv-gold-bow-click.png",
    ⲆᐃᐃᐃⲆⵠΔ: "img/inv-gold-arrow-out.png",
    ᐃⵠⵠⵠΔᐃᐃ: "img/inv-gold-arrow-in.png",
    ⲆΔΔⲆⵠΔⲆ: "img/inv-gold-arrow-click.png",
    ᐃⵠⲆⲆⲆᐃᐃ: "img/day-gold-bow.png",
    ⲆⲆᐃΔΔⲆⲆ: "img/night-gold-bow.png",
    ⵠⲆΔΔⲆᐃᐃ: "img/day-gold-arrow.png",
    ⲆⵠΔᐃⲆΔΔ: "img/night-gold-arrow.png",
    ⲆⲆᐃⲆⲆΔΔ: "img/inv-diamond-bow-out.png",
    ⲆΔΔᐃΔΔⲆ: "img/inv-diamond-bow-in.png",
    ⲆⵠΔⵠⲆⵠⵠ: "img/inv-diamond-bow-click.png",
    ⵠᐃᐃⵠᐃᐃᐃ: "img/inv-diamond-arrow-out.png",
    ΔⲆⵠᐃⵠᐃΔ: "img/inv-diamond-arrow-in.png",
    ΔⵠⵠⲆΔᐃⵠ: "img/inv-diamond-arrow-click.png",
    ΔⲆᐃⵠⲆⵠΔ: "img/day-diamond-bow.png",
    ΔΔᐃⲆⵠⵠⵠ: "img/night-diamond-bow.png",
    ⵠⲆΔⵠᐃⲆᐃ: "img/day-diamond-arrow.png",
    ⵠᐃⵠⵠᐃΔᐃ: "img/night-diamond-arrow.png",
    ⲆᐃᐃⵠΔⵠⲆ: "img/inv-amethyst-bow-out.png",
    ⵠⵠⵠᐃⲆΔᐃ: "img/inv-amethyst-bow-in.png",
    ⵠⵠᐃⲆᐃⵠᐃ: "img/inv-amethyst-bow-click.png",
    ΔᐃᐃΔⲆᐃⵠ: "img/inv-amethyst-arrow-out.png",
    ⲆΔⲆᐃᐃⵠᐃ: "img/inv-amethyst-arrow-in.png",
    ᐃᐃΔⲆᐃΔΔ: "img/inv-amethyst-arrow-click.png",
    ᐃⲆⵠΔᐃⲆⲆ: "img/day-amethyst-bow.png",
    ⵠΔΔⵠⲆΔΔ: "img/night-amethyst-bow.png",
    ⲆᐃⲆⲆᐃᐃᐃ: "img/day-amethyst-arrow.png",
    ⵠⵠᐃΔⵠⲆᐃ: "img/night-amethyst-arrow.png",
    ᐃΔᐃⵠⲆⵠᐃ: "img/inv-dragon-bow-out.png",
    ⲆⲆᐃⵠᐃⵠᐃ: "img/inv-dragon-bow-in.png",
    ᐃᐃΔⵠⲆⵠᐃ: "img/inv-dragon-bow-click.png",
    ⲆᐃΔᐃᐃᐃⲆ: "img/inv-dragon-arrow-out.png",
    ᐃΔᐃᐃⲆⲆⵠ: "img/inv-dragon-arrow-in.png",
    ᐃⲆⵠᐃⲆᐃΔ: "img/inv-dragon-arrow-click.png",
    ⵠⲆΔᐃΔⵠΔ: "img/day-dragon-bow.png",
    ΔⲆΔΔᐃⲆⲆ: "img/night-dragon-bow.png",
    ᐃΔⲆⲆΔᐃⵠ: "img/day-dragon-arrow.png",
    ᐃᐃᐃⲆⲆⵠΔ: "img/night-dragon-arrow.png",
    ΔⵠⲆᐃⲆᐃⵠ: "img/inv-reidite-bow-out.png",
    ⵠⲆⵠᐃⲆᐃΔ: "img/inv-reidite-bow-in.png",
    ⲆⲆⵠⲆΔΔⲆ: "img/inv-reidite-bow-click.png",
    ᐃⵠⲆⵠⵠⵠᐃ: "img/inv-reidite-arrow-out.png",
    ΔⲆⵠⲆΔⵠⲆ: "img/inv-reidite-arrow-in.png",
    ⵠⲆⲆⵠᐃΔᐃ: "img/inv-reidite-arrow-click.png",
    ᐃΔⵠΔᐃΔᐃ: "img/day-reidite-bow.png",
    ⵠΔᐃΔⵠΔᐃ: "img/night-reidite-bow.png",
    ⲆⲆΔⲆΔⲆⲆ: "img/day-reidite-arrow.png",
    ΔΔΔΔᐃΔᐃ: "img/night-reidite-arrow.png",
    ᐃⲆⲆⲆᐃΔΔ: "img/inv-wooden-axe-out.png",
    ⵠΔΔΔⵠᐃᐃ: "img/inv-wooden-axe-in.png",
    ⲆⵠΔΔⲆΔⲆᐃᐃ: "img/inv-wooden-axe-click.png",
    ⵠⲆⲆⵠΔⲆᐃⵠⲆ: "img/day-wooden-axe.png",
    ΔΔΔᐃᐃΔⵠⲆⵠ: "img/night-wooden-axe.png",
    ⵠⵠⵠᐃⲆⵠⲆⲆΔ: "img/inv-stone-axe-out.png",
    ᐃⲆᐃΔⲆⵠΔᐃᐃ: "img/inv-stone-axe-in.png",
    ᐃΔΔⵠⵠⵠᐃⲆⲆ: "img/inv-stone-axe-click.png",
    ΔⲆⵠⵠΔᐃΔⲆⵠ: "img/day-stone-axe.png",
    ⵠᐃᐃⲆⵠⵠΔᐃᐃ: "img/night-stone-axe.png",
    ⵠⲆⲆⵠᐃⵠⲆⵠⵠ: "img/inv-golden-axe-out.png",
    ᐃΔⵠⵠᐃⲆⲆⲆΔ: "img/inv-golden-axe-in.png",
    ᐃΔⵠⵠᐃⵠⵠⲆⵠ: "img/inv-golden-axe-click.png",
    ⵠᐃΔⲆΔⵠΔⲆᐃ: "img/day-golden-axe.png",
    ⲆΔⵠΔΔⲆᐃⵠⲆ: "img/night-golden-axe.png",
    ⵠᐃᐃΔΔⲆΔᐃⲆ: "img/inv-diamond-axe-out.png",
    ⲆᐃⵠᐃᐃΔⵠⲆⲆ: "img/inv-diamond-axe-in.png",
    ΔⵠΔⵠⲆᐃⲆᐃⲆ: "img/inv-diamond-axe-click.png",
    ᐃⵠᐃⲆⲆᐃΔⲆⲆ: "img/day-diamond-axe.png",
    ⲆⵠⵠΔⲆΔΔΔⲆ: "img/night-diamond-axe.png",
    ⵠᐃΔᐃⵠⵠⲆΔᐃ: "img/inv-amethyst-axe-out.png",
    ΔⵠⵠᐃⵠⵠᐃΔⲆ: "img/inv-amethyst-axe-in.png",
    ⵠⵠⵠⲆⲆᐃⲆⵠΔ: "img/inv-amethyst-axe-click.png",
    ⲆᐃⲆⲆⵠⵠᐃⲆⵠ: "img/day-amethyst-axe.png",
    ⲆⲆᐃⲆΔⵠᐃⵠΔ: "img/night-amethyst-axe.png",
    ⲆⲆΔⲆⵠΔⵠΔᐃ: "img/inv-reidite-axe-out.png",
    ⲆᐃᐃᐃᐃΔΔᐃᐃ: "img/inv-reidite-axe-in.png",
    ΔⲆⵠⵠⵠᐃⵠⵠΔ: "img/inv-reidite-axe-click.png",
    ΔⵠⲆᐃⲆΔⲆⵠⵠ: "img/day-reidite-axe.png",
    ΔⲆΔΔᐃΔΔⲆⵠ: "img/night-reidite-axe.png",
    ᐃᐃⵠΔⲆΔΔ: "img/bandage-activated.png",
    ⲆᐃΔᐃᐃⲆᐃ: "img/auto-feed.png",
    ⲆΔⵠᐃᐃⲆⵠ: "img/stop-regeneration.png",
    ΔⲆⲆΔⵠᐃⵠ: "img/stop-regeneration2.png",
    ⲆⲆᐃᐃⲆΔⵠⲆᐃ: "img/day-wood-platform.png",
    ΔⲆᐃΔⵠⲆⵠⵠⲆ: "img/night-wood-platform.png",
    ΔⵠⵠⵠⲆⲆⵠⵠΔ: "img/inv-wood-platform-in.png",
    ⲆᐃⲆⲆⵠΔⵠΔⲆ: "img/inv-wood-platform-out.png",
    ΔᐃΔⵠⵠᐃⲆⵠᐃ: "img/inv-wood-platform-click.png",
    ⲆΔⲆⲆΔΔᐃᐃΔ: "img/day-wood-shield.png",
    ΔⵠΔⵠΔⲆᐃⵠΔ: "img/night-wood-shield.png",
    ᐃⲆΔΔᐃᐃᐃᐃⵠ: "img/day-stone-shield.png",
    ⲆΔⲆΔᐃⵠΔⵠⵠ: "img/night-stone-shield.png",
    ΔⵠⲆᐃⲆΔⲆⵠⲆ: "img/day-gold-shield.png",
    ⲆΔΔⲆⲆΔⵠⲆⲆ: "img/night-gold-shield.png",
    ⵠⲆⵠᐃΔⲆΔΔΔ: "img/day-diamond-shield.png",
    ΔᐃᐃⲆⲆⲆᐃΔⵠ: "img/night-diamond-shield.png",
    ᐃⵠᐃᐃⲆΔⲆΔᐃ: "img/day-amethyst-shield.png",
    ΔᐃⲆⲆΔⲆⵠⵠΔ: "img/night-amethyst-shield.png",
    ⲆΔⵠⵠⵠⲆᐃΔᐃ: "img/day-reidite-shield.png",
    ΔⵠΔⵠΔᐃΔⵠⲆ: "img/night-reidite-shield.png",
    ΔⲆᐃⲆΔᐃᐃΔᐃ: "img/inv-wood-shield-in.png",
    ᐃⲆᐃᐃᐃⲆⵠᐃᐃ: "img/inv-wood-shield-out.png",
    ⲆⵠⵠⵠⵠⲆΔⵠⲆ: "img/inv-wood-shield-click.png",
    Δᐃᐃᐃᐃᐃᐃⵠᐃ: "img/inv-stone-shield-in.png",
    ᐃᐃⵠΔⲆⲆΔᐃᐃ: "img/inv-stone-shield-out.png",
    ⵠᐃΔⵠⲆΔⵠⲆⲆ: "img/inv-stone-shield-click.png",
    ΔⵠΔⲆᐃⲆᐃΔᐃ: "img/inv-gold-shield-in.png",
    ᐃⲆΔᐃⲆⲆⲆᐃⵠ: "img/inv-gold-shield-out.png",
    ᐃᐃⲆΔⲆᐃᐃⲆΔ: "img/inv-gold-shield-click.png",
    ᐃᐃΔⵠⲆⲆᐃⵠᐃ: "img/inv-diamond-shield-in.png",
    ᐃⵠΔⵠΔⵠⲆⵠΔ: "img/inv-diamond-shield-out.png",
    ⲆⲆⵠⵠΔΔΔᐃⲆ: "img/inv-diamond-shield-click.png",
    ⲆⵠΔⵠⲆᐃᐃⵠⵠ: "img/inv-amethyst-shield-in.png",
    ΔΔΔΔΔᐃᐃΔᐃ: "img/inv-amethyst-shield-out.png",
    ΔᐃᐃⵠᐃⵠⵠΔᐃ: "img/inv-amethyst-shield-click.png",
    ΔΔΔⵠΔⲆⲆⵠᐃ: "img/inv-reidite-shield-in.png",
    ᐃⵠᐃᐃᐃⵠⲆⵠⲆ: "img/inv-reidite-shield-out.png",
    ΔⲆⲆΔⲆᐃΔⵠⲆ: "img/inv-reidite-shield-click.png",
    ᐃᐃΔΔⵠⵠⵠΔⲆ: "img/day-machete.png",
    ⵠΔⲆⵠⲆⲆⲆⲆⵠ: "img/night-machete.png",
    ⲆⵠᐃⲆⲆΔᐃΔⵠ: "img/inv-machete-in.png",
    ⵠⲆᐃⵠⵠⲆⲆⲆΔ: "img/inv-machete-out.png",
    ᐃⲆⵠᐃΔⵠⵠⵠΔ: "img/inv-machete-click.png"
  };
  ⲆⵠⵠᐃΔᐃⲆ = [{}];
  ⲆⵠⵠᐃΔᐃⲆ[0].stringify = function (a) {
    var b = new Uint8Array(new ArrayBuffer(a.length));
    for (var c = 0; c < a.length; c++) {
      b[c] = a[c];
    }
    return b;
  };
  ΔᐃⲆⲆⲆΔᐃ = {};
  const Nt = 18;
  function Ob(a) {
    return oc.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ΔⲆΔ: 9524010,
      ⲆΔΔᐃΔΔⵠ: 4209025,
      Ⲇᐃ: 5715070,
      ⲆᐃΔΔΔⵠⲆ: 1891215
    };
  })();
  ⵠⵠΔⲆᐃΔΔΔᐃ = {};
  for (var Sb in ᐃᐃ) {
    ΔᐃⲆⲆⲆΔᐃ[Sb] = ᐃᐃ[Sb];
  }
  function Hb(a, b, c, d) {
    Oj(Ft, a, b, c, d);
    const e = ho(Ht[0], Ht[1]);
    xb(Ht[2], Ht[3]);
    return (e | 53396) & ~(e & 53396);
  }
  ᐃΔ = [];
  ΔⲆⵠ = {};
  ΔⲆⵠ.ᐃⵠᐃⲆⵠ = 0;
  ΔⲆⵠ.ΔΔΔⵠ = 1;
  function Ub(a) {
    return oc.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ΔΔⲆᐃᐃΔᐃⵠⵠ: 7612760,
      ᐃⵠⲆⲆⲆΔᐃ: 10810738,
      ᐃΔΔⵠΔΔᐃⵠⵠ: 11973458,
      ⲆΔⵠᐃΔᐃᐃ: 1967655
    };
  })();
  ΔⲆⵠ.Δᐃᐃᐃ = 2;
  ΔⲆⵠ.ᐃΔⵠⵠ = 3;
  const Yb = 2;
  ΔⲆⵠ.ΔⵠⲆᐃ = 4;
  const Kb = 3;
  ΔⲆⵠ.ⲆΔⵠⵠ = 5;
  const Vb = 4;
  ΔⲆⵠ.ΔΔⲆᐃ = 6;
  ΔⲆⵠ.ⲆΔᐃⵠⲆΔⲆ = 7;
  ΔⲆⵠ.ΔΔΔⵠᐃ = 8;
  ΔⲆᐃΔ = {};
  const Xb = 18;
  Ⲇᐃⵠᐃ = [];
  ΔⵠⵠΔΔⲆⲆ = function (a, b) {
    for (var c = 0; c < a.length; c++) {
      if (b === a[c].id) {
        return c;
      }
    }
    return -1;
  };
  const Zb = 2;
  var $b = [];
  const Ot = 12;
  function id(a, b) {
    for (var c = 0; c < $b.length; c += b) {
      var d = $b[c];
      if (a === d[0]) {
        nd(d[0], d[1], d[2], d[3]);
      }
    }
  }
  const td = 11;
  function nd(b, c, d, e) {
    var f = Ⲇᐃⵠᐃ[b];
    if (f !== undefined) {
      for (var i = 0; i < 2; i++) {
        var j = f[c][i];
        var k = e * 193 / Qx.ᐃⲆᐃⵠⲆ;
        var m = d * 193 / Qx.ⲆΔⲆΔΔ;
        var n = j.width / 3.5;
        var o = j.height / 3.5;
        ᐃΔ[818][i].drawImage(j, k - n / 2, m - o / 2, n, o);
        k = e * 600 / Qx.ᐃⲆᐃⵠⲆ;
        m = d * 600 / Qx.ⲆΔⲆΔΔ;
        n = j.width / 1.5;
        o = j.height / 1.5;
        ᐃΔ[819][i].drawImage(j, k - n / 2, m - o / 2, n, o);
      }
    }
  }
  function od(a, b, c, d) {
    if (b) {
      a.fillStyle = b;
      a.fill();
    }
    if (c) {
      a.lineWidth = d;
      a.strokeStyle = c;
      a.stroke();
    }
  }
  function ad(b, c, d, e, f, g) {
    if (e < g * 2) {
      g = e / 2;
    }
    if (f < g * 2) {
      g = f / 2;
    }
    if (g < 0) {
      g = 0;
    }
    b.beginPath();
    b.moveTo(c + g, d);
    b.arcTo(c + e, d, c + e, d + f, g);
    b.arcTo(c + e, d + f, c, d + f, g);
    b.arcTo(c, d + f, c, d, g);
    b.arcTo(c, d, c + e, d, g);
    b.closePath();
  }
  ΔΔⵠᐃⲆⵠⵠΔⲆ = function () {
    for (var b = 0; b < 2; b++) {
      ᐃΔ[818][b].clearRect(0, 0, 193, 193);
      ᐃΔ[818][b].drawImage(Ⲇᐃⵠᐃ.MAP[b], 0, 0, 193, 193);
      ᐃΔ[819][b].clearRect(0, 0, 600, 600);
      ᐃΔ[819][b].drawImage(Ⲇᐃⵠᐃ.MAP[b], 0, 0, 600, 600);
      for (var c = Qx.ⲆᐃⵠΔ.length - 1; c >= 0; c--) {
        var d = Qx.ⲆᐃⵠΔ[c];
        var f = d.x1 * 193 / (Qx.ᐃⲆᐃⵠⲆ * 100);
        var j = d.y1 * 193 / (Qx.ⲆΔⲆΔΔ * 100);
        var k = d.w * 193 / (Qx.ᐃⲆᐃⵠⲆ * 100);
        var m = d.ᐃᐃᐃ * 193 / (Qx.ⲆΔⲆΔΔ * 100);
        var p = d.x1 * 600 / (Qx.ᐃⲆᐃⵠⲆ * 100);
        var q = d.y1 * 600 / (Qx.ⲆΔⲆΔΔ * 100);
        var u = d.w * 600 / (Qx.ᐃⲆᐃⵠⲆ * 100);
        var v = d.ᐃᐃᐃ * 600 / (Qx.ⲆΔⲆΔΔ * 100);
        if (Qx.Δᐃⵠᐃᐃ === d.ᐃᐃⲆ) {
          ᐃΔ[818][b].drawImage(Ⲇᐃⵠᐃ.FOREST[b], f, j, k, m);
          ᐃΔ[819][b].drawImage(Ⲇᐃⵠᐃ.FOREST[b], p, q, u, v);
        }
        if (Qx.ΔᐃᐃⲆᐃΔⲆ === d.ᐃᐃⲆ) {
          ᐃΔ[818][b].drawImage(Ⲇᐃⵠᐃ.WINTER[b], f, j, k, m);
          ᐃΔ[819][b].drawImage(Ⲇᐃⵠᐃ.WINTER[b], p, q, u, v);
        }
        if (d.ᐃᐃⲆ === Qx.ⵠⵠⵠᐃᐃΔⵠ) {
          ᐃΔ[818][b].drawImage(Ⲇᐃⵠᐃ.LAVA[b], f, j, k, m);
          ᐃΔ[819][b].drawImage(Ⲇᐃⵠᐃ.LAVA[b], p, q, u, v);
        }
        if (d.ᐃᐃⲆ === Qx.ᐃΔᐃⵠⲆᐃᐃ) {
          ᐃΔ[818][b].drawImage(Ⲇᐃⵠᐃ.CAVE[b], f, j, k, m);
          ᐃΔ[819][b].drawImage(Ⲇᐃⵠᐃ.CAVE[b], p, q, u, v);
        }
        if (d.ᐃᐃⲆ === Qx.ⵠⲆᐃᐃᐃⵠΔ) {
          ᐃΔ[818][b].drawImage(Ⲇᐃⵠᐃ.DESERT[b], f, j, k, m);
          ᐃΔ[819][b].drawImage(Ⲇᐃⵠᐃ.DESERT[b], p, q, u, v);
        }
      }
    }
  };
  ΔΔⵠⵠⵠᐃᐃⵠⲆ = function () {
    ΔⲆᐃΔ = {
      ⵠⲆⵠⲆᐃ: [{
        id: 0,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⲆΔΔⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⲆᐃᐃΔᐃΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⵠⵠΔⵠΔⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⲆⲆᐃⵠⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃⵠᐃⲆⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Starver"
      }, {
        id: 3,
        ⵠΔΔ: ᐃᐃ.ⲆΔⵠᐃᐃⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆⲆᐃⲆᐃΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔⵠⵠᐃⵠⲆⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠᐃᐃᐃΔᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃⵠᐃⲆⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Angry"
      }, {
        id: 2,
        ⵠΔΔ: ᐃᐃ.ᐃⲆⲆᐃᐃΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃⲆⲆⲆΔᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆΔᐃⵠⲆᐃⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⵠΔⲆᐃⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃⵠᐃⲆⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Sad"
      }, {
        id: 9,
        ⵠΔΔ: ᐃᐃ.ⲆᐃᐃⵠᐃⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔΔⲆⲆⲆⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⵠⲆⲆᐃΔⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⲆⵠⲆⲆⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃⵠᐃⲆⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Happy 1"
      }, {
        id: 1,
        ⵠΔΔ: ᐃᐃ.ᐃⵠΔΔΔᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠⲆⵠⲆᐃᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃΔⲆΔᐃΔⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⵠⵠΔⵠᐃΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "What?"
      }, {
        id: 4,
        ⵠΔΔ: ᐃᐃ.ᐃᐃᐃᐃᐃⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠᐃᐃΔΔⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⵠⵠᐃⵠⲆⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆΔⵠⵠΔΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Suspicious"
      }, {
        id: 5,
        ⵠΔΔ: ᐃᐃ.ΔΔΔⵠⵠⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠΔΔⵠⲆΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔⲆΔᐃⵠⲆΔ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃΔⵠᐃⲆΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Scar"
      }, {
        id: 6,
        ⵠΔΔ: ᐃᐃ.ΔⵠⲆᐃΔⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔⲆⲆΔΔᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃᐃᐃᐃⵠⲆⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠᐃᐃᐃⲆⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "In Trouble"
      }, {
        id: 7,
        ⵠΔΔ: ᐃᐃ.ⵠⵠᐃΔⲆΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃΔⲆⲆⲆⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔΔⵠⵠᐃᐃΔ,
        ΔΔⲆⲆ: ᐃᐃ.ΔΔᐃⵠⵠΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Cute"
      }, {
        id: 8,
        ⵠΔΔ: ᐃᐃ.ΔⲆΔᐃᐃⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆΔⵠⵠΔΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆⵠᐃⵠⵠⲆΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⲆⲆᐃⵠⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Bored 1"
      }, {
        id: 10,
        ⵠΔΔ: ᐃᐃ.ⵠⲆⵠΔΔⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠΔᐃΔᐃⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⲆⵠΔⵠⵠⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⲆᐃⲆᐃΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Happy 2"
      }, {
        id: 11,
        ⵠΔΔ: ᐃᐃ.ΔⵠᐃᐃΔⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆᐃᐃⲆⲆⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠΔⲆᐃᐃⵠⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠᐃᐃᐃⲆⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Crazy"
      }, {
        id: 12,
        ⵠΔΔ: ᐃᐃ.ᐃᐃⲆⲆᐃΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠⵠⲆⲆΔΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆᐃᐃΔᐃⵠΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⲆⲆΔᐃⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Happy 3"
      }, {
        id: 13,
        ⵠΔΔ: ᐃᐃ.ⲆⵠⵠⲆΔᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆⲆΔⲆⲆᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆᐃΔⵠΔⲆΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠΔΔᐃᐃⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Very Cute"
      }, {
        id: 14,
        ⵠΔΔ: ᐃᐃ.ⵠΔⵠⲆⵠΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔΔΔᐃΔᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔᐃⵠⵠⵠⲆΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⲆⵠᐃⵠᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Curious"
      }, {
        id: 15,
        ⵠΔΔ: ᐃᐃ.ᐃⵠᐃΔⵠΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠⲆΔⲆⲆⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔΔΔⲆΔⵠⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆΔⲆᐃⵠΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Bored 2"
      }, {
        id: 16,
        ⵠΔΔ: ᐃᐃ.ⲆᐃᐃᐃⵠⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠⵠⲆΔΔᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆᐃⵠᐃΔⲆΔ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃᐃᐃⲆᐃⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Happy 4"
      }, {
        id: 17,
        ⵠΔΔ: ᐃᐃ.ΔᐃᐃⵠΔᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃⵠᐃᐃⲆΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⲆⲆᐃᐃᐃⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⵠⵠⵠⵠⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Scar 2"
      }, {
        id: 18,
        ⵠΔΔ: ᐃᐃ.ⲆΔᐃΔΔᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠᐃᐃⲆⲆⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⲆⵠⲆⵠΔⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠᐃᐃᐃⵠᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Sick"
      }, {
        id: 19,
        ⵠΔΔ: ᐃᐃ.ΔⵠⲆΔᐃΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔΔⵠΔⲆⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔΔᐃⵠᐃⲆⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆᐃΔΔΔᐃΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Somnambule"
      }, {
        id: 24,
        ⵠΔΔ: ᐃᐃ.ΔⲆᐃΔⵠⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔΔⵠΔΔⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃΔΔⵠΔⲆᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⲆΔⵠΔⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Pixelbitie",
        name: "Feel Bad"
      }, {
        id: 23,
        ⵠΔΔ: ᐃᐃ.ΔᐃⲆⵠΔⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆⵠⲆⲆⵠⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⵠΔⵠⵠⲆⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⲆⲆⵠⵠΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Pixelbitie",
        name: "Mmmh."
      }, {
        id: 103,
        ⵠΔΔ: ᐃᐃ.ΔᐃᐃⵠⵠⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆⵠⵠⵠΔⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔⵠⵠⲆⵠⲆᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠΔⵠⵠⲆᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "pizza wa",
        name: "Panic"
      }, {
        id: 105,
        ⵠΔΔ: ᐃᐃ.ⲆΔⲆΔΔΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃⲆΔⲆⵠᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⲆⵠⵠᐃΔⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⲆᐃⵠⲆᐃΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "pizza wa",
        name: "Hypnotic"
      }, {
        id: 106,
        ⵠΔΔ: ᐃᐃ.ⲆⲆΔⵠⵠᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⲆΔⲆᐃΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆᐃᐃⵠΔᐃᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⵠⵠᐃᐃᐃΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "pizza wa",
        name: "Stars in the eyes"
      }, {
        id: 220,
        ⵠΔΔ: ᐃᐃ.ⵠΔⵠΔᐃⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆⲆᐃⵠᐃᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⲆⵠᐃⲆⲆⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠΔΔⵠⵠⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Seams"
      }, {
        id: 104,
        ⵠΔΔ: ᐃᐃ.ⲆᐃⵠⵠⵠᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃΔΔᐃⲆⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆⵠⵠⲆΔⵠᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⲆⵠᐃᐃⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "pizza wa",
        name: "Scared at night"
      }, {
        id: 20,
        ⵠΔΔ: ᐃᐃ.ΔᐃⵠⲆⲆΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠΔⲆΔⲆⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔⵠⵠΔⲆᐃΔ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃΔΔᐃⵠⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Vampire"
      }, {
        id: 21,
        ⵠΔΔ: ᐃᐃ.ⵠⲆⵠΔⵠΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃᐃⲆⵠⲆΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠᐃⲆΔⵠⵠⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆᐃᐃΔⵠΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Zombie"
      }, {
        id: 22,
        ⵠΔΔ: ᐃᐃ.ᐃΔΔΔᐃᐃⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠᐃⲆᐃΔᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠΔᐃᐃⵠⲆⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⲆⲆⵠⵠᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Pixelbitie",
        name: "Devaster"
      }, {
        id: 116,
        ⵠΔΔ: ᐃᐃ.ⲆΔⲆΔⵠⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔΔᐃⲆᐃᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⲆᐃᐃᐃⲆⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⲆΔⵠⵠΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Fukss",
        name: "Dead Devaster"
      }, {
        id: 27,
        ⵠΔΔ: ᐃᐃ.ⵠΔⵠⲆⵠⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃⲆⲆΔᐃⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.Δᐃᐃᐃⵠⵠⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆᐃⵠΔᐃΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Winter",
        name: "Cactus"
      }, {
        id: 28,
        ⵠΔΔ: ᐃᐃ.ⲆᐃⲆⵠΔⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔⵠᐃⵠΔᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⲆᐃᐃⵠΔⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ΔΔⵠᐃᐃⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "pizza wa",
        name: "Bee"
      }, {
        id: 49,
        ⵠΔΔ: ᐃᐃ.ᐃΔⲆΔⲆⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔΔⲆⲆⲆᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⵠⵠΔⵠᐃᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠᐃᐃᐃⵠⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Taco4Life",
        name: "Camo Skin"
      }, {
        id: 58,
        ⵠΔΔ: ᐃᐃ.Δᐃᐃⵠᐃⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆᐃΔΔⵠⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃΔⲆᐃᐃΔᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ΔΔᐃⵠⲆⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Blue Limax Skin"
      }, {
        id: 59,
        ⵠΔΔ: ᐃᐃ.ⵠⵠⵠᐃⲆᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔΔⲆΔᐃΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⲆᐃⲆⵠΔⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⵠⲆΔᐃⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Red Limax Skin"
      }, {
        id: 94,
        ⵠΔΔ: ᐃᐃ.ΔΔⲆⵠⵠΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔⲆᐃⲆⲆⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔᐃΔᐃⲆⲆⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⵠⵠⵠΔᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Taco4Life",
        name: "Mr. Pumpkin"
      }, {
        id: 109,
        ⵠΔΔ: ᐃᐃ.ᐃⲆⵠΔᐃᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃᐃⵠⵠΔΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆΔᐃᐃΔⲆᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃᐃᐃⵠᐃΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "pizza wa",
        name: "Wood"
      }, {
        id: 114,
        ⵠΔΔ: ᐃᐃ.ⵠⵠΔᐃⲆⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔⵠΔΔⵠⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃᐃⲆⵠΔⵠⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ΔΔᐃⲆⲆⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "pizza wa",
        name: "Zebra"
      }, {
        id: 120,
        ⵠΔΔ: ᐃᐃ.ⲆΔᐃΔⲆᐃⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃⵠⵠⵠⲆᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠΔΔⵠᐃᐃⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆᐃⵠⲆΔⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "CrysTal",
        name: "Tiger"
      }, {
        id: 134,
        ⵠΔΔ: ᐃᐃ.ΔⲆⲆᐃⲆⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠⵠΔΔΔΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆⲆᐃΔⵠⵠⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃΔⲆⲆⲆᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Franchestcreator",
        name: "Day or Night"
      }, {
        id: 135,
        ⵠΔΔ: ᐃᐃ.ᐃΔⵠⲆᐃⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆⲆΔᐃᐃⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠΔⲆΔΔᐃᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⲆΔⵠⲆᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Poinet",
        name: "Square Starver"
      }, {
        id: 136,
        ⵠΔΔ: ᐃᐃ.ᐃⵠⵠⲆΔΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⵠᐃᐃⲆᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔⵠᐃⵠⲆⵠⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠᐃⲆⵠᐃᐃΔ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Voodoo Doll"
      }, {
        id: 137,
        ⵠΔΔ: ᐃᐃ.ᐃⵠⲆⲆΔΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠⵠᐃⲆᐃΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆᐃⵠⵠΔⲆⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⲆᐃⵠᐃΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Frankenstein"
      }, {
        id: 138,
        ⵠΔΔ: ᐃᐃ.ᐃΔⵠΔⵠⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠⲆᐃⲆⲆⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔΔᐃⵠᐃΔᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ΔΔⲆⵠⲆⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Old Mummy"
      }, {
        id: 139,
        ⵠΔΔ: ᐃᐃ.ⵠΔⲆⵠΔΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠᐃΔᐃⵠⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠᐃΔⲆⲆⲆᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ΔᐃⵠΔΔΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Werewolf"
      }, {
        id: 140,
        ⵠΔΔ: ᐃᐃ.ᐃⲆΔΔΔⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔΔⵠⵠΔⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.Ⲇⵠᐃⵠⵠⵠᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⵠⵠⵠⲆΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Old Cthulhu"
      }, {
        id: 141,
        ⵠΔΔ: ᐃᐃ.ΔⲆᐃⲆΔⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃⲆⵠΔⵠΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔⵠᐃⵠⵠⵠΔ,
        ΔΔⲆⲆ: ᐃᐃ.ΔΔⵠⵠⵠᐃΔ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Sea Man"
      }, {
        id: 142,
        ⵠΔΔ: ᐃᐃ.ⲆᐃᐃᐃᐃⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆΔⲆᐃᐃΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔΔᐃⲆⵠⲆⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⲆⲆΔᐃΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Old Pumpkin"
      }, {
        id: 148,
        ⵠΔΔ: ᐃᐃ.ⲆⲆᐃΔⵠⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃΔⲆⵠⵠᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃᐃᐃⵠⵠᐃΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆᐃΔΔⵠⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Old Snowman"
      }, {
        id: 149,
        ⵠΔΔ: ᐃᐃ.ΔᐃΔᐃⵠⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠΔΔΔⵠⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⲆⲆᐃΔᐃⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃΔΔΔᐃⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Old Christmas Tree Man"
      }, {
        id: 150,
        ⵠΔΔ: ᐃᐃ.ⵠⵠΔⲆΔⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃΔΔⲆᐃᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃΔΔⲆⲆⲆⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃᐃⲆⵠᐃΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Old Mrs Bell"
      }, {
        id: 151,
        ⵠΔΔ: ᐃᐃ.ⲆⵠᐃΔⲆΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⲆΔⲆⵠⵠⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⵠΔⲆΔⲆⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃᐃΔΔⵠᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Old Elfy"
      }, {
        id: 152,
        ⵠΔΔ: ᐃᐃ.ᐃΔΔᐃᐃΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃΔⵠᐃΔΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⲆⵠᐃⲆΔΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⵠΔⵠⵠⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Old Mr Present"
      }, {
        id: 153,
        ⵠΔΔ: ᐃᐃ.ΔΔⲆΔⲆΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆⲆᐃⲆΔⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆⵠⲆⵠⵠⵠⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠΔΔᐃᐃΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "My Dear Old Deer"
      }, {
        id: 154,
        ⵠΔΔ: ᐃᐃ.ΔⲆᐃᐃΔⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃΔⵠΔⵠⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆⵠΔⲆΔⲆΔ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃΔⲆΔⲆⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Mr Angel"
      }, {
        id: 155,
        ⵠΔΔ: ᐃᐃ.ⵠⲆᐃΔᐃΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆᐃⲆᐃⲆᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⵠⲆΔᐃⲆⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⲆᐃⲆΔⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Mr Ice Cube"
      }, {
        id: 156,
        ⵠΔΔ: ᐃᐃ.ⲆΔᐃⵠⵠᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠⲆΔⲆⵠΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠᐃⵠⲆΔⲆᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⵠΔᐃΔⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Mr Snowman"
      }, {
        id: 159,
        ⵠΔΔ: ᐃᐃ.ᐃⲆⵠᐃᐃΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆΔⵠⲆᐃᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠΔⲆᐃⲆⲆᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⵠΔⵠⲆᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "CrysTal",
        name: "Crystal Sky Skin"
      }, {
        id: 167,
        ⵠΔΔ: ᐃᐃ.ⵠⵠⵠⲆᐃᐃⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆΔⵠᐃᐃᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃᐃᐃΔⲆΔᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⲆΔⵠⵠⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Franchestcreator",
        name: "Radioactive Starver"
      }, {
        id: 169,
        ⵠΔΔ: ᐃᐃ.ⲆⵠΔⲆᐃΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆⲆⲆⵠⵠΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔᐃΔⵠⲆⲆΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⵠΔⲆⲆᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "TheScaryBlaze",
        name: "Eaten Cookie"
      }, {
        id: 170,
        ⵠΔΔ: ᐃᐃ.ΔⲆⵠⲆⲆΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔⵠⲆⵠⵠᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⲆᐃΔⵠΔⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⲆⲆᐃᐃⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "aloner",
        name: "Blob Thing"
      }, {
        id: 172,
        ⵠΔΔ: ᐃᐃ.ⲆᐃᐃΔⲆᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔΔⲆⲆⲆΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔᐃΔⲆᐃᐃΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⵠⵠⲆⵠᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "aloner",
        name: "Machine Mask"
      }, {
        id: 184,
        ⵠΔΔ: ᐃᐃ.ⵠΔΔΔⲆΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆᐃᐃΔⲆΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⲆΔⲆⲆⵠᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠΔᐃΔΔⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Mad"
      }, {
        id: 206,
        ⵠΔΔ: ᐃᐃ.ⵠᐃⵠᐃⲆⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔⵠⵠⵠⲆΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔⵠᐃΔⵠᐃᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⲆᐃᐃⲆΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Survivor"
      }, {
        id: 209,
        ⵠΔΔ: ᐃᐃ.ⲆΔⲆᐃᐃΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃⲆΔⵠΔΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⲆⲆⲆⵠⵠⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃΔᐃⵠΔⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Starverator"
      }, {
        id: 230,
        ⵠΔΔ: ᐃᐃ.ⲆᐃᐃΔΔⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔΔᐃΔΔⲆΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔᐃⲆⲆᐃⵠᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⵠⲆⵠⲆⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Totem"
      }, {
        id: 231,
        ⵠΔΔ: ᐃᐃ.ⲆⵠᐃΔⲆᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆⵠⲆΔⲆⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆᐃΔⵠⵠΔΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⲆⵠΔⲆⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Big Pile of Sand"
      }, {
        id: 232,
        ⵠΔΔ: ᐃᐃ.ᐃΔⵠⲆΔΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠⲆⲆⲆΔⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆⲆⵠᐃΔⲆΔ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⲆΔⵠⵠⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Big Pile of Dirt"
      }, {
        id: 235,
        ⵠΔΔ: ᐃᐃ.ⲆⵠⲆⲆᐃᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔΔΔΔⲆⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⲆⲆⲆᐃᐃᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⵠⲆᐃⵠⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Sandstone"
      }, {
        id: 29,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⲆᐃΔⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃΔⵠⲆᐃΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔᐃⵠᐃⲆⵠⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⵠᐃⵠΔⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Pixelbitie",
        name: "Lollipop 1"
      }, {
        id: 30,
        ⵠΔΔ: ᐃᐃ.ⵠᐃⵠⲆⵠⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⲆⵠΔⲆᐃⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃΔⲆΔⵠⲆⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆᐃᐃⵠΔⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Lollipop 2"
      }, {
        id: 31,
        ⵠΔΔ: ᐃᐃ.ᐃⵠᐃⲆᐃΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆᐃΔⵠⵠΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆⲆᐃᐃΔⲆⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠΔⲆᐃΔⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Lollipop 3"
      }, {
        id: 32,
        ⵠΔΔ: ᐃᐃ.ΔⲆⵠΔᐃᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃⵠΔⲆᐃⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⵠΔⲆⲆⵠⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⲆⲆΔⵠⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Lollipop 4"
      }, {
        id: 33,
        ⵠΔΔ: ᐃᐃ.ΔⵠⲆᐃⵠⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆΔᐃⵠⲆᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃᐃΔᐃⵠⲆᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⵠΔⵠΔᐃΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Sushui",
        name: "Yellow Bird"
      }, {
        id: 34,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⵠΔⲆⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⲆⲆᐃⲆᐃⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃᐃΔⵠΔⵠⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⵠⲆᐃⵠⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Sushui",
        name: "Red Bird"
      }, {
        id: 35,
        ⵠΔΔ: ᐃᐃ.ⵠΔᐃⲆⲆⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆᐃⵠᐃΔᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆᐃⲆⵠⵠⵠΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⵠⵠΔⵠᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Sushui",
        name: "Blue Bird"
      }, {
        id: 37,
        ⵠΔΔ: ᐃᐃ.ⲆΔᐃⲆⲆⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⲆⲆⵠⲆⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⲆΔᐃᐃⲆΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⲆⵠⵠⵠⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Winter",
        name: "Owl"
      }, {
        id: 52,
        ⵠΔΔ: ᐃᐃ.ⵠΔΔᐃΔᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔᐃⵠⵠⵠⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃᐃⲆⲆΔΔⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⲆⲆⲆⲆⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Nemo"
      }, {
        id: 53,
        ⵠΔΔ: ᐃᐃ.ⲆⵠⵠⲆⲆΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃⵠΔᐃΔΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆΔΔᐃⲆᐃⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⵠᐃᐃⲆⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Mr. Bread"
      }, {
        id: 74,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⵠⲆⲆⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠⵠⵠⵠΔⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔⲆΔᐃⲆⲆᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠΔⵠⵠⵠⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Communist & Taco4Life",
        name: "Mr. Bread 2"
      }, {
        id: 75,
        ⵠΔΔ: ᐃᐃ.ΔᐃᐃᐃⲆΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠᐃⲆⵠᐃⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⵠΔΔⲆᐃⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠᐃⲆⵠΔᐃΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Communist & Taco4Life",
        name: "Mr. Bread 3"
      }, {
        id: 60,
        ⵠΔΔ: ᐃᐃ.ΔⲆᐃⵠⵠⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔⵠⲆⵠᐃᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔⲆⲆⲆᐃⲆⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆᐃⵠⵠⵠΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Red Berry"
      }, {
        id: 61,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⵠᐃΔΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔᐃⲆⲆΔΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⲆⵠⵠΔᐃΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⲆᐃΔΔⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Old Berry"
      }, {
        id: 70,
        ⵠΔΔ: ᐃᐃ.ⵠⲆΔᐃⲆΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠᐃΔⲆΔΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠᐃᐃΔⲆⵠΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠΔⵠⵠᐃⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Cake"
      }, {
        id: 71,
        ⵠΔΔ: ᐃᐃ.ᐃⵠⵠᐃⲆΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃⲆᐃΔⲆⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆᐃⲆⵠⲆⵠΔ,
        ΔΔⲆⲆ: ᐃᐃ.ΔΔⵠⲆⲆΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Christmas Cake"
      }, {
        id: 77,
        ⵠΔΔ: ᐃᐃ.ΔΔⲆⲆΔⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃⵠⵠⲆⲆᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⲆⵠⲆΔⵠⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⲆⵠΔⲆΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Pancakez",
        name: "Mr. Pancake"
      }, {
        id: 87,
        ⵠΔΔ: ᐃᐃ.ΔⵠᐃⲆᐃΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃΔᐃΔΔⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔᐃΔΔⵠΔΔ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⲆΔΔⵠᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Taco4Life",
        name: "Mr. Taco"
      }, {
        id: 78,
        ⵠΔΔ: ᐃᐃ.ΔΔΔⵠΔⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃΔⵠⵠⵠΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⵠⲆᐃᐃⲆⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ΔᐃⲆΔΔⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Taco4Life",
        name: "Mr. Bottle"
      }, {
        id: 79,
        ⵠΔΔ: ᐃᐃ.ΔⲆᐃⵠΔᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔΔΔΔⲆⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆⲆΔⲆⲆⲆⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⲆⵠⵠⲆⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Taco4Life",
        name: "Mr. Bottle 2"
      }, {
        id: 97,
        ⵠΔΔ: ᐃᐃ.ⵠᐃⵠⵠⲆⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆᐃᐃΔⵠⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆⲆΔⲆⵠⵠΔ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃᐃⵠΔⵠΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Pink Rabbit"
      }, {
        id: 102,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⲆΔⲆΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃΔᐃⵠΔⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⲆᐃⲆᐃᐃᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆΔᐃᐃⵠᐃΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "pizza wa",
        name: "Marshmallow"
      }, {
        id: 107,
        ⵠΔΔ: ᐃᐃ.ⲆΔᐃᐃⲆⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆⲆΔᐃᐃΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔⲆᐃᐃᐃᐃΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆΔΔⲆᐃⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Fox"
      }, {
        id: 132,
        ⵠΔΔ: ᐃᐃ.ᐃΔᐃᐃΔΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆⲆⵠᐃΔⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔΔΔᐃⲆΔⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⵠⲆⵠΔᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Raccoon"
      }, {
        id: 111,
        ⵠΔΔ: ᐃᐃ.ⵠⲆⵠᐃⵠⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃⵠΔⲆⲆΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆᐃⵠΔᐃᐃⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆΔΔΔⲆΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "pizza wa",
        name: "Cloud"
      }, {
        id: 113,
        ⵠΔΔ: ᐃᐃ.ᐃᐃΔᐃᐃⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔⵠⵠΔᐃΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⲆᐃᐃΔⲆⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ΔΔⲆᐃΔΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "pizza wa",
        name: "Moon"
      }, {
        id: 117,
        ⵠΔΔ: ᐃᐃ.ᐃᐃⲆᐃΔⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃⵠΔᐃⲆⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔᐃᐃᐃⲆⵠΔ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⵠⲆᐃⵠⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Mr. Panda"
      }, {
        id: 118,
        ⵠΔΔ: ᐃᐃ.ⵠⵠⵠⵠⲆⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔⲆⲆΔΔᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔⲆᐃᐃⲆᐃⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⲆᐃΔᐃⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Mr. Strawberry"
      }, {
        id: 119,
        ⵠΔΔ: ᐃᐃ.ⲆΔᐃᐃΔᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠⵠⵠⲆᐃΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃᐃⲆⵠⲆⲆⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⵠⲆⲆΔⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "eogito & Sushuui",
        name: "Mummy"
      }, {
        id: 122,
        ⵠΔΔ: ᐃᐃ.ⵠⵠᐃΔᐃΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔΔⵠΔᐃⵠⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆⵠΔΔΔⵠΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⲆᐃᐃᐃⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Taco4Life",
        name: "Dino"
      }, {
        id: 127,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⲆᐃᐃⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⲆΔᐃΔᐃⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠΔᐃⲆⲆᐃⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⵠᐃΔΔᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "MADBalgouthi",
        name: "Mr. Koala"
      }, {
        id: 160,
        ⵠΔΔ: ᐃᐃ.ᐃᐃⵠⲆⵠΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆⲆⲆΔᐃⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠΔⲆⵠᐃΔΔ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃΔΔᐃⲆᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Bottle Protection"
      }, {
        id: 162,
        ⵠΔΔ: ᐃᐃ.ⲆΔᐃⵠⲆⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃᐃΔⲆⲆⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⲆΔⵠΔⵠΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆᐃⵠⵠⵠⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "CrysTal",
        name: "Leaf Man"
      }, {
        id: 166,
        ⵠΔΔ: ᐃᐃ.ⵠⵠⲆⲆⲆⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆᐃⲆᐃⵠᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠΔⲆΔᐃⲆⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⵠᐃⵠᐃᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "pizza wa",
        name: "Bubble"
      }, {
        id: 174,
        ⵠΔΔ: ᐃᐃ.ⲆⲆΔⵠⵠⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔΔⲆⵠᐃΔΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔⵠᐃᐃΔⵠⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⲆⵠᐃᐃⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "upfiz",
        name: "Potato"
      }, {
        id: 171,
        ⵠΔΔ: ᐃᐃ.ⲆᐃΔΔⲆᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃⵠⵠⲆⲆⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⵠⲆⲆⲆⲆⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠᐃΔⲆΔΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "aloner",
        name: "Axolotl"
      }, {
        id: 178,
        ⵠΔΔ: ᐃᐃ.ᐃⵠᐃᐃⵠⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆⲆⵠΔⵠⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔⵠΔⲆⵠᐃⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ΔᐃⵠΔᐃⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Rusted Machine"
      }, {
        id: 179,
        ⵠΔΔ: ᐃᐃ.ᐃΔᐃⵠΔⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠΔᐃᐃΔΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔᐃⵠΔⵠΔᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃΔΔΔⵠᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Starving Machine"
      }, {
        id: 181,
        ⵠΔΔ: ᐃᐃ.ΔⲆΔⵠᐃⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔⵠΔⵠᐃΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔⵠⵠⵠᐃⲆⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ΔᐃⵠΔᐃⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Night Stars"
      }, {
        id: 191,
        ⵠΔΔ: ᐃᐃ.ᐃᐃⲆⵠⲆᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠⲆᐃΔⲆⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃΔⲆᐃᐃᐃⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆΔΔΔⲆΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Blue Jay"
      }, {
        id: 198,
        ⵠΔΔ: ᐃᐃ.ᐃᐃᐃⲆⲆᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆⵠⲆᐃⵠⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃᐃⲆⵠⵠⵠᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠΔΔⵠΔⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "AWTP",
        name: "Dave"
      }, {
        id: 200,
        ⵠΔΔ: ᐃᐃ.ⵠⲆⲆΔⲆᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔᐃᐃⲆᐃⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔⲆᐃΔⲆⵠⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃᐃᐃⵠⵠᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Jinty",
        name: "Smug"
      }, {
        id: 203,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⲆᐃⵠᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔΔⵠⵠΔⲆᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⵠⲆΔⲆⵠⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⲆᐃⲆᐃⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Reclaimed"
      }, {
        id: 204,
        ⵠΔΔ: ᐃᐃ.ⵠⲆⲆΔⲆⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃΔΔⵠΔΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃᐃΔⲆᐃΔⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃᐃᐃᐃΔⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Legacy Wolf"
      }, {
        id: 211,
        ⵠΔΔ: ᐃᐃ.ⵠⲆᐃᐃⵠⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆᐃⵠΔⲆΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⵠⲆΔΔⲆⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠΔᐃᐃᐃⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Starver of the Seas"
      }, {
        id: 213,
        ⵠΔΔ: ᐃᐃ.ΔᐃᐃⲆᐃⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃᐃᐃⲆΔⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠᐃΔᐃΔⵠⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⲆᐃΔᐃⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Ice"
      }, {
        id: 219,
        ⵠΔΔ: ᐃᐃ.ⵠΔⲆΔⵠΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆᐃᐃⲆᐃⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆᐃᐃⲆⲆⲆᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ΔᐃᐃΔᐃΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Ramil",
        name: "Sandwich Cookie"
      }, {
        id: 221,
        ⵠΔΔ: ᐃᐃ.ⲆⲆᐃΔᐃⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⲆⲆⲆⲆⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆⵠᐃᐃΔⵠⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃᐃⲆⵠⵠⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Purple Geode"
      }, {
        id: 222,
        ⵠΔΔ: ᐃᐃ.ΔᐃᐃⵠⵠᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠᐃΔⵠⵠᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃᐃΔⵠΔᐃⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⵠⲆΔⲆΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Cyan Geode"
      }, {
        id: 223,
        ⵠΔΔ: ᐃᐃ.ΔⵠΔⵠᐃΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠΔⵠⲆⲆⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔΔᐃΔᐃΔᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⲆᐃᐃΔᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Yellow Geode"
      }, {
        id: 228,
        ⵠΔΔ: ᐃᐃ.ⲆΔⵠΔⵠΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔⵠᐃΔⵠᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆⲆᐃⵠⲆⲆᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⲆⲆᐃⲆᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Furnace Head"
      }, {
        id: 229,
        ⵠΔΔ: ᐃᐃ.Ⲇᐃⵠᐃⵠᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃⵠΔΔᐃⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⲆⲆⲆⲆᐃΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⲆⵠᐃᐃⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Bag"
      }, {
        id: 227,
        ⵠΔΔ: ᐃᐃ.ᐃⵠⲆⵠⲆΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠᐃⲆⵠᐃᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆⲆⲆⲆⵠⲆⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⲆⲆⵠΔᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Lit Furnace Head"
      }, {
        id: 25,
        ⵠΔΔ: ᐃᐃ.ⵠⲆᐃᐃⲆⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔⲆᐃΔⵠⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⵠⵠⵠⲆΔⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⲆⲆⵠⵠΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Pixelbitie",
        name: "Test Dummy"
      }, {
        id: 41,
        ⵠΔΔ: ᐃᐃ.ⵠⵠⲆᐃⲆΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆΔᐃⲆⵠΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃᐃΔᐃᐃΔⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⲆᐃᐃⵠᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "pizza wa",
        name: "Star-ver"
      }, {
        id: 43,
        ⵠΔΔ: ᐃᐃ.ⲆΔΔΔΔᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠᐃⲆᐃⵠΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆⲆΔΔΔⲆⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ΔᐃΔᐃⲆᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Communist",
        name: "Starver Chest"
      }, {
        id: 88,
        ⵠΔΔ: ᐃᐃ.ⵠΔⵠΔⵠⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.Δⵠᐃⵠᐃᐃⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃᐃΔⲆⵠΔⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⲆⵠⵠᐃΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Communist",
        name: "Starver Workbench"
      }, {
        id: 121,
        ⵠΔΔ: ᐃᐃ.ΔⲆⲆᐃᐃⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔᐃⵠΔⵠⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃᐃᐃᐃⲆⵠΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⵠΔᐃᐃⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "MADBalgouthi",
        name: "Fish"
      }, {
        id: 39,
        ⵠΔΔ: ᐃᐃ.ΔⲆΔⵠΔᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔᐃΔⲆⵠΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠᐃⲆⲆΔⵠⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠᐃᐃᐃᐃᐃΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Negligent4Dia",
        name: "Crab"
      }, {
        id: 40,
        ⵠΔΔ: ᐃᐃ.ΔⲆΔᐃᐃΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆΔⲆΔⲆᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃΔⲆⲆⵠᐃⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆᐃⲆⵠᐃᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Negligent4Dia",
        name: "Piranha"
      }, {
        id: 36,
        ⵠΔΔ: ᐃᐃ.ΔΔⵠⵠⲆΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠΔⲆΔΔⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⵠΔΔⲆⵠᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠᐃⵠᐃⲆᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Winter Fox"
      }, {
        id: 69,
        ⵠΔΔ: ᐃᐃ.ΔⲆⵠⵠⲆᐃⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠΔᐃⲆⵠⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⵠΔΔⲆᐃⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⵠᐃⲆⲆᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Zed",
        name: "Baby Foxy"
      }, {
        id: 51,
        ⵠΔΔ: ᐃᐃ.ΔΔⲆⲆⲆⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠᐃⲆⵠⵠⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆⲆΔⲆΔΔΔ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⲆΔᐃⵠᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "HOWI",
        name: "Winter Bear"
      }, {
        id: 133,
        ⵠΔΔ: ᐃᐃ.ᐃⵠΔᐃⵠⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆⲆΔᐃⲆΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠᐃⲆⲆᐃⵠⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⲆⲆⲆⵠᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Hawk"
      }, {
        id: 55,
        ⵠΔΔ: ᐃᐃ.ⲆⵠⲆⲆⵠᐃⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠΔⵠᐃⲆⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆΔⵠⵠⵠᐃⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⲆᐃⵠⲆᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Nice Little Yuki"
      }, {
        id: 68,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⵠᐃᐃᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔᐃΔᐃᐃΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⵠᐃⲆⲆⵠΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⲆⵠⵠⵠᐃΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Taco4Life",
        name: "Baby Yuki"
      }, {
        id: 62,
        ⵠΔΔ: ᐃᐃ.ⵠᐃⵠⵠⲆΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔᐃⲆⲆⲆⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃᐃᐃᐃⵠⲆⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ΔᐃⵠⵠᐃⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Mr. Carrot"
      }, {
        id: 56,
        ⵠΔΔ: ᐃᐃ.ⵠⵠᐃⲆⲆⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔⵠᐃᐃᐃⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⵠΔⵠᐃᐃᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⲆΔΔⵠⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Bat Limax"
      }, {
        id: 72,
        ⵠΔΔ: ᐃᐃ.ⲆᐃⲆΔᐃᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠⵠⵠᐃⵠΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⵠΔⵠⲆᐃⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠΔⵠᐃᐃⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Mr. Crate"
      }, {
        id: 73,
        ⵠΔΔ: ᐃᐃ.ⲆⵠΔⵠΔᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⲆΔⵠᐃⲆⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔΔⲆΔᐃᐃΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆΔⵠᐃⵠΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Taco4Life & eogito",
        name: "Mr. Spider"
      }, {
        id: 93,
        ⵠΔΔ: ᐃᐃ.ᐃΔΔⵠᐃⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃⵠⵠΔΔΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔⵠⵠⵠⵠⵠΔ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃΔⲆΔΔᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Anyone want to play?",
        name: "Mr. Spider 2"
      }, {
        id: 82,
        ⵠΔΔ: ᐃᐃ.ⲆΔⲆⵠⲆΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃΔΔΔᐃⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠΔⵠⲆⲆⵠⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠΔⲆΔⲆⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Mr. Blue Starfish"
      }, {
        id: 83,
        ⵠΔΔ: ᐃᐃ.ᐃⵠⵠⲆᐃᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠⵠⲆᐃᐃⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆΔⵠⲆⵠᐃᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃΔⲆⵠⵠⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Mr. Orange Starfish"
      }, {
        id: 84,
        ⵠΔΔ: ᐃᐃ.ⵠⲆⵠⲆⲆⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠᐃΔⲆⵠᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔⲆⲆᐃΔᐃᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⵠΔᐃⲆⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Mr. Pink Starfish"
      }, {
        id: 85,
        ⵠΔΔ: ᐃᐃ.ⲆᐃⵠⵠⵠⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠⲆⵠᐃᐃⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⵠⵠᐃᐃⲆⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⵠΔⲆⵠⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Mr. ShellMauve"
      }, {
        id: 86,
        ⵠΔΔ: ᐃᐃ.ⲆⵠⲆᐃᐃΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠᐃⲆⲆⲆⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⲆᐃⵠⵠⲆΔ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃΔΔΔΔᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Mr. Shell Bead"
      }, {
        id: 96,
        ⵠΔΔ: ᐃᐃ.ᐃΔⲆᐃΔᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠⲆᐃⲆⵠᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠᐃΔⲆⲆⵠΔ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃΔΔⲆᐃⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Fukss",
        name: "Angry Crab"
      }, {
        id: 98,
        ⵠΔΔ: ᐃᐃ.ΔⵠⵠᐃΔⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔⵠᐃᐃΔᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⵠⵠᐃⲆΔⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⵠΔⵠⲆⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Penguin"
      }, {
        id: 126,
        ⵠΔΔ: ᐃᐃ.ⵠⲆᐃΔⵠᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆᐃⵠⵠⲆⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃᐃᐃⲆⵠᐃᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⵠΔⲆⵠᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Anyone want to play?",
        name: "Mr. Boar"
      }, {
        id: 145,
        ⵠΔΔ: ᐃᐃ.ΔⲆⵠⲆⲆⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠⲆΔᐃⲆΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔΔΔⲆΔΔᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⵠⵠⲆⵠⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "I saw you"
      }, {
        id: 146,
        ⵠΔΔ: ᐃᐃ.ΔᐃⵠᐃᐃⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃΔᐃᐃⵠᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆⲆΔⲆⵠⵠᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⲆⲆⵠⵠΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "It was funny"
      }, {
        id: 147,
        ⵠΔΔ: ᐃᐃ.ⵠᐃΔᐃᐃᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆⵠᐃᐃᐃᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⲆᐃΔⲆⵠᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃΔⲆΔᐃⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "You can scream"
      }, {
        id: 158,
        ⵠΔΔ: ᐃᐃ.ΔⵠⲆⵠΔΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔⲆᐃΔᐃⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔΔⲆᐃΔΔᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⵠⲆᐃΔΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Mr. Book"
      }, {
        id: 163,
        ⵠΔΔ: ᐃᐃ.ᐃⵠⲆⲆᐃΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃⵠΔᐃᐃⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⵠᐃΔⲆⵠΔ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⵠᐃⲆⲆⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Anyone want to play?",
        name: "Mr. Mammoth"
      }, {
        id: 164,
        ⵠΔΔ: ᐃᐃ.ⵠᐃⲆΔᐃⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆΔᐃᐃΔΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆⵠΔⵠᐃⵠΔ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⵠⵠᐃⲆΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "SoOw",
        name: "Mr. Mammoth 2"
      }, {
        id: 161,
        ⵠΔΔ: ᐃᐃ.ΔΔⲆΔⵠΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔᐃⵠΔᐃⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⲆⵠΔⵠᐃᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠᐃΔⲆⵠⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Nightmare"
      }, {
        id: 168,
        ⵠΔΔ: ᐃᐃ.ᐃⲆΔⵠΔΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔⲆᐃᐃⵠΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⵠΔΔⵠᐃΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆΔᐃⲆΔᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "pizza wa",
        name: "Shiny Crystal"
      }, {
        id: 173,
        ⵠΔΔ: ᐃᐃ.ⲆΔᐃᐃⵠⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠⵠΔⵠΔⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⲆⲆΔⵠⲆᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠᐃΔᐃⲆΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "pizza wa",
        name: "Water skin"
      }, {
        id: 175,
        ⵠΔΔ: ᐃᐃ.ⲆᐃⲆⲆⲆΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔᐃⲆⲆⲆΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃᐃᐃΔᐃᐃⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⵠⵠⵠᐃΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Fall Berry Bush Starver"
      }, {
        id: 176,
        ⵠΔΔ: ᐃᐃ.ⵠΔΔᐃⲆᐃⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃⵠΔⵠⵠᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔᐃⲆΔⲆⲆΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆΔⵠⲆⲆⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Christmas Berry Bush Starver"
      }, {
        id: 177,
        ⵠΔΔ: ᐃᐃ.ᐃᐃⲆΔⲆⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃⲆⵠᐃᐃⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠΔΔᐃᐃⲆⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃΔᐃᐃΔⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Berry Bush Starver"
      }, {
        id: 182,
        ⵠΔΔ: ᐃᐃ.ΔⵠⵠΔⲆᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃᐃΔⵠᐃΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⵠᐃᐃᐃⵠΔ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃᐃⲆⵠᐃⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Tamer"
      }, {
        id: 185,
        ⵠΔΔ: ᐃᐃ.ᐃΔΔᐃⲆⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃᐃᐃⵠᐃΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃᐃⵠⵠⵠⲆⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆΔΔⵠⲆⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Tamon Wolf"
      }, {
        id: 186,
        ⵠΔΔ: ᐃᐃ.ⵠⲆᐃᐃⲆⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠᐃⵠᐃΔΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔᐃΔⲆⲆᐃᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆᐃⵠⲆⵠⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Tamon Snow Wolf"
      }, {
        id: 187,
        ⵠΔΔ: ᐃᐃ.ⲆᐃᐃⲆᐃᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠᐃᐃᐃⲆᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⵠΔⵠΔᐃᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⵠⵠᐃⲆⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Tamon Rabbit"
      }, {
        id: 188,
        ⵠΔΔ: ᐃᐃ.ⲆⵠᐃΔᐃᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃⲆΔⵠᐃⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃᐃⲆⵠⲆⲆᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃΔⵠⵠⲆⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Tamon Snow Rabbit"
      }, {
        id: 189,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⲆΔⲆⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔᐃⲆⲆⵠΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⵠΔΔᐃᐃᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⲆᐃΔᐃⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Tamon Bear"
      }, {
        id: 190,
        ⵠΔΔ: ᐃᐃ.ⵠΔⵠΔⲆΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠΔΔⲆⵠΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⲆⵠᐃΔⲆΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⵠᐃⵠᐃⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Tamon Polar Bear"
      }, {
        id: 196,
        ⵠΔΔ: ᐃᐃ.ⲆⲆΔᐃᐃΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⲆⲆⵠⲆΔᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃᐃⵠⵠᐃⵠⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⲆⲆⲆΔⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Crying Angel"
      }, {
        id: 202,
        ⵠΔΔ: ᐃᐃ.ΔΔⵠⵠⵠⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃⲆᐃⲆⵠΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⵠᐃᐃΔⲆᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⲆᐃᐃⵠⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Tamon Fennec"
      }, {
        id: 207,
        ⵠΔΔ: ᐃᐃ.ᐃΔⲆΔⲆⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔΔΔᐃΔᐃⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔⵠⵠΔⲆⵠᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⵠⲆᐃᐃᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Decay"
      }, {
        id: 212,
        ⵠΔΔ: ᐃᐃ.ⵠᐃⵠᐃΔΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆⵠᐃⲆΔⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆΔⵠⵠᐃⲆΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⵠⵠⵠΔΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Pillow"
      }, {
        id: 218,
        ⵠΔΔ: ᐃᐃ.ᐃᐃΔⵠᐃⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔΔᐃⲆⵠΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆΔⲆⲆⵠΔⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⲆᐃⵠⲆⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Exotic"
      }, {
        id: 224,
        ⵠΔΔ: ᐃᐃ.ΔⲆⵠᐃΔᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆⵠⵠⲆᐃⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠΔⲆᐃᐃᐃΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⵠⲆᐃⵠⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Apple"
      }, {
        id: 225,
        ⵠΔΔ: ᐃᐃ.ᐃΔⲆΔΔⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆΔⲆⲆⵠΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔΔΔᐃΔᐃΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠᐃΔΔⵠⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Golden Apple"
      }, {
        id: 233,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⲆⵠᐃⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃᐃⵠᐃᐃⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃᐃⲆⵠⵠᐃⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⵠᐃⲆⲆΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Lava Cube"
      }, {
        id: 234,
        ⵠΔΔ: ᐃᐃ.ⲆᐃᐃᐃⵠⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃΔΔΔΔΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆⵠⵠⲆᐃᐃᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⲆⵠⵠⲆⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Dragon Cube"
      }, {
        id: 42,
        ⵠΔΔ: ᐃᐃ.ⵠⲆⵠⵠᐃⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠᐃⵠᐃΔΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆᐃΔᐃᐃᐃⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⲆΔⵠᐃⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Winter",
        name: "Will-O'-The-Wisp"
      }, {
        id: 91,
        ⵠΔΔ: ᐃᐃ.ΔⵠΔⲆΔⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔⲆᐃⲆᐃⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔⲆΔⵠⵠᐃⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⵠⲆᐃⲆᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "ExpertyAnimations",
        name: "Flame"
      }, {
        id: 26,
        ⵠΔΔ: ᐃᐃ.ⵠΔΔⲆΔⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔΔΔⲆⲆⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃΔⲆΔⵠⵠⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⵠΔᐃΔⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Be a Tree"
      }, {
        id: 38,
        ⵠΔΔ: ᐃᐃ.ΔᐃⵠΔᐃᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃᐃⵠⲆΔⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃᐃⵠⲆⲆⲆⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⲆΔΔⵠΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Winter",
        name: "Toxic Mutant"
      }, {
        id: 50,
        ⵠΔΔ: ᐃᐃ.ᐃⲆᐃⵠⵠⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆᐃᐃᐃⵠᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⲆΔΔⵠΔⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⵠΔⲆⵠⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Communist",
        name: "Mr. Tomato"
      }, {
        id: 54,
        ⵠΔΔ: ᐃᐃ.ᐃΔᐃⵠᐃᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆⲆᐃᐃⲆⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⵠⵠⵠΔⵠⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⲆΔᐃⲆΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Mr. Mauve, the Lapa"
      }, {
        id: 57,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⵠᐃⲆⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠᐃᐃⲆⲆⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠᐃΔᐃⵠΔΔ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⵠᐃⲆᐃⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Golden Fish"
      }, {
        id: 64,
        ⵠΔΔ: ᐃᐃ.ⵠⵠⵠΔΔⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃⲆⲆΔΔⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃΔⲆΔᐃᐃⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⵠⲆΔᐃΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "LapaMauve"
      }, {
        id: 65,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⵠᐃΔᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⲆᐃᐃᐃᐃΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔⵠⲆᐃΔᐃᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⲆⲆᐃⲆᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "LapaMauve "
      }, {
        id: 92,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⲆⲆΔᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠΔᐃⵠᐃⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃΔⲆⲆⲆⲆΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⵠᐃⵠᐃΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Mr. Burger"
      }, {
        id: 66,
        ⵠΔΔ: ᐃᐃ.ᐃⵠΔⲆⵠⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃⲆᐃⲆⲆΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔΔⵠΔΔⲆΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⲆᐃᐃⲆΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "pizza wa",
        name: "Tropical Starver"
      }, {
        id: 80,
        ⵠΔΔ: ᐃᐃ.ΔⲆᐃᐃᐃᐃⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⲆⵠⵠⲆᐃᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔᐃΔⵠᐃⵠᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠᐃⵠΔⵠⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Mr. ShellPink"
      }, {
        id: 81,
        ⵠΔΔ: ᐃᐃ.ⵠΔⵠᐃΔᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⲆΔⵠⵠⵠᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃᐃⲆᐃⲆⲆⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⵠΔᐃⲆⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Mr. OranShell"
      }, {
        id: 99,
        ⵠΔΔ: ᐃᐃ.ΔⲆᐃⵠᐃΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠⲆᐃⵠᐃΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠᐃΔᐃⲆⵠΔ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⵠⲆⵠΔᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Pepe"
      }, {
        id: 100,
        ⵠΔΔ: ᐃᐃ.ΔΔⵠⲆΔΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃⲆⵠⵠΔᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔⲆΔᐃᐃᐃᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠᐃⲆⲆⵠⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "fatant",
        name: "Mr. Ant"
      }, {
        id: 115,
        ⵠΔΔ: ᐃᐃ.ⵠⲆⵠⵠΔᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃⵠΔΔΔⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠᐃⵠⵠᐃⲆⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⲆΔⲆᐃΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "MADBalgouthi",
        name: "Mr. Watermelon"
      }, {
        id: 101,
        ⵠΔΔ: ᐃᐃ.ⵠᐃⲆⵠⵠⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠⵠᐃΔΔⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠΔΔᐃΔⲆⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⲆⵠᐃᐃⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Taco4Life",
        name: "Mr. Thornbush"
      }, {
        id: 131,
        ⵠΔΔ: ᐃᐃ.ᐃᐃⲆᐃⵠᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔᐃᐃΔⵠΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⵠᐃⲆΔᐃΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⵠⵠᐃᐃⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Taco4Life",
        name: "Cthulhu"
      }, {
        id: 143,
        ⵠΔΔ: ᐃᐃ.ⵠⲆⵠⵠⵠᐃⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠⵠΔΔᐃᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⲆⲆΔᐃⲆΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⵠᐃΔⲆᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Mr. Cactus"
      }, {
        id: 144,
        ⵠΔΔ: ᐃᐃ.ⵠⲆⲆᐃᐃⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃᐃⲆΔⵠΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔᐃᐃⲆΔⵠⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃΔⲆⵠᐃⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Momo"
      }, {
        id: 180,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⵠⵠᐃⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔⵠᐃⵠᐃΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠᐃΔⵠⲆᐃⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⵠⵠΔΔᐃΔ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Scream"
      }, {
        id: 193,
        ⵠΔΔ: ᐃᐃ.ⲆᐃⲆⵠΔᐃⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠⲆΔⲆΔⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⲆΔⵠΔᐃᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠᐃⲆⲆᐃⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Tamon Dragon"
      }, {
        id: 195,
        ⵠΔΔ: ᐃᐃ.ⵠⵠⵠΔᐃΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠⲆⲆᐃΔᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔᐃᐃⵠᐃΔⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⵠⵠᐃⲆⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Forest Spirit"
      }, {
        id: 197,
        ⵠΔΔ: ᐃᐃ.ᐃᐃΔⲆⲆᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃⲆᐃΔⵠⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃᐃⲆΔΔᐃΔ,
        ΔΔⲆⲆ: ᐃᐃ.ΔᐃⵠⵠᐃΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Evil Goat"
      }, {
        id: 199,
        ⵠΔΔ: ᐃᐃ.ⲆᐃⲆⲆᐃⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆᐃᐃⲆⲆⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆⵠΔΔΔᐃⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⵠⲆΔᐃⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Rotten"
      }, {
        id: 201,
        ⵠΔΔ: ᐃᐃ.ⵠⲆΔⵠᐃⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃΔΔⵠⵠΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔᐃⲆᐃᐃΔΔ,
        ΔΔⲆⲆ: ᐃᐃ.ΔΔⵠⲆⵠᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Fossil"
      }, {
        id: 205,
        ⵠΔΔ: ᐃᐃ.ΔᐃⵠⵠⵠΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃᐃΔᐃᐃΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃΔⵠⵠⵠⲆⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠΔΔΔΔⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Tamon Spectrum"
      }, {
        id: 210,
        ⵠΔΔ: ᐃᐃ.ⵠⵠᐃᐃΔⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠⲆⵠⲆᐃΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆⵠᐃⵠΔᐃᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆᐃΔⲆⲆΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Helpy",
        name: "Black Cat"
      }, {
        id: 214,
        ⵠΔΔ: ᐃᐃ.ⲆⲆΔΔⵠΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⲆⲆΔΔΔⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⲆⲆᐃⲆⲆⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃᐃⵠᐃΔΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Tamon Lynx"
      }, {
        id: 215,
        ⵠΔΔ: ᐃᐃ.ᐃᐃⲆᐃΔⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃⲆᐃᐃᐃΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔⲆᐃΔΔⲆᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⲆᐃⵠᐃⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Tamon Warg"
      }, {
        id: 217,
        ⵠΔΔ: ᐃᐃ.ⵠⲆᐃⲆⵠⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔⵠᐃⵠΔΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⵠⵠⲆⲆⵠᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⲆⲆⵠΔⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Tamon Menhir"
      }, {
        id: 95,
        ⵠΔΔ: ᐃᐃ.ⵠΔΔⵠΔⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆⵠⵠᐃⲆᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃᐃⵠⲆⵠⲆᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠⲆΔᐃⲆᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Taco4Life",
        name: "Mr. Garlic"
      }, {
        id: 76,
        ⵠΔΔ: ᐃᐃ.ⲆᐃⲆⵠᐃⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆΔⵠⲆⲆᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⲆΔⲆᐃⵠⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⲆⵠⵠⲆΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Winter",
        name: "Robot Dragon"
      }, {
        id: 44,
        ⵠΔΔ: ᐃᐃ.ⵠⲆᐃΔΔⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃΔΔⲆⵠΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔⵠᐃⵠᐃⲆᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⲆᐃⵠΔⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Winter",
        name: "Lava Dragon Version 1"
      }, {
        id: 90,
        ⵠΔΔ: ᐃᐃ.ⵠᐃⲆⵠⵠⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃᐃᐃΔⲆΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆᐃᐃⲆΔⵠⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ΔΔᐃᐃᐃⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "ExpertyAnimations",
        name: "Lava Dragon Version 2"
      }, {
        id: 124,
        ⵠΔΔ: ᐃᐃ.ᐃΔⲆⲆΔᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆΔⲆⵠⵠⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆΔᐃⲆⲆΔᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆΔΔΔΔⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Lava Dragon Version 3"
      }, {
        id: 45,
        ⵠΔΔ: ᐃᐃ.ᐃⵠⲆⵠⵠⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔⵠⵠΔⲆⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔⵠΔⲆΔⲆᐃ,
        ΔΔⲆⲆ: ᐃᐃ.Ⲇᐃⵠᐃᐃᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Sushui",
        name: "Ice Dragon Version 1"
      }, {
        id: 46,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⲆⲆⵠΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠⲆⵠⵠᐃⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔⲆᐃᐃΔⵠⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃΔⵠΔⵠⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Winter",
        name: "Ice Dragon Version 2"
      }, {
        id: 108,
        ⵠΔΔ: ᐃᐃ.ⵠⵠⲆⵠΔⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃΔΔᐃΔⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠᐃⲆᐃⲆⲆΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆᐃⲆᐃΔⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Ice Dragon Version 3"
      }, {
        id: 123,
        ⵠΔΔ: ᐃᐃ.ᐃᐃΔΔⵠᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠΔⵠᐃᐃⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃΔΔⵠⵠᐃⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ΔᐃⵠᐃᐃΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Baby Dragon Version 1"
      }, {
        id: 128,
        ⵠΔΔ: ᐃᐃ.ⵠⵠⵠΔᐃΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃᐃΔⵠΔⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠᐃⲆⲆΔΔΔ,
        ΔΔⲆⲆ: ᐃᐃ.ΔΔᐃⵠⲆⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "MADBalgouthi",
        name: "Baby Dragon Version 2"
      }, {
        id: 125,
        ⵠΔΔ: ᐃᐃ.ΔᐃᐃⵠⲆⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠᐃᐃⲆᐃⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆⵠⲆᐃΔⵠⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⵠⲆⲆᐃⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Baby Lava"
      }, {
        id: 47,
        ⵠΔΔ: ᐃᐃ.ⲆⵠⲆⲆᐃⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆΔⵠᐃⲆΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆΔⵠⵠΔΔⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆᐃᐃᐃⵠⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Taco4Life",
        name: "Kraken"
      }, {
        id: 129,
        ⵠΔΔ: ᐃᐃ.ᐃΔΔⲆᐃΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃΔᐃⲆᐃⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃΔⵠΔⲆᐃⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⲆΔⵠΔᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Taco4Life",
        name: "Sandworm"
      }, {
        id: 63,
        ⵠΔΔ: ᐃᐃ.ⲆⲆᐃⲆΔΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔΔΔᐃⵠⵠⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⲆⵠⵠΔᐃⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⲆᐃΔᐃΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Mr. Golden Bread"
      }, {
        id: 67,
        ⵠΔΔ: ᐃᐃ.ΔΔⲆⲆⵠⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆⲆⵠΔⲆΔ,
        ⵠⲆⲆΔ: ᐃᐃ.Δᐃⵠᐃⵠⵠⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⵠⲆᐃⵠⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "ForgottenHeroe",
        name: "Starver Ores"
      }, {
        id: 130,
        ⵠΔΔ: ᐃᐃ.ⲆⵠᐃΔⲆⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔΔΔΔΔⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆⵠⵠⵠⲆⲆⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆᐃⲆΔᐃⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Taco4Life",
        name: "Poo"
      }, {
        id: 89,
        ⵠΔΔ: ᐃᐃ.ⲆᐃⲆᐃΔⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⲆΔΔⵠⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆᐃⲆⵠⲆⵠⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⵠⵠⲆᐃⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Poinet",
        name: "Volcano Starver"
      }, {
        id: 112,
        ⵠΔΔ: ᐃᐃ.ᐃⲆᐃᐃⵠΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆⲆᐃⵠᐃⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔᐃⲆⵠΔⵠⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠᐃΔⲆᐃⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Lava Starver"
      }, {
        id: 183,
        ⵠΔΔ: ᐃᐃ.ᐃΔΔΔⲆⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔⲆᐃΔⲆΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⲆᐃⲆⲆⵠⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ΔΔⵠⲆⵠΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Revaster"
      }, {
        id: 192,
        ⵠΔΔ: ᐃᐃ.ⲆⵠΔⲆⵠⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔΔⲆⲆᐃᐃⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⲆⵠᐃΔᐃⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⵠⵠⲆΔⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Awakened"
      }, {
        id: 194,
        ⵠΔΔ: ᐃᐃ.ⲆⵠᐃⲆΔΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠⲆΔⵠⲆⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠΔⲆⵠΔΔᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆᐃⵠⵠᐃᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Tamon Ice Dragon"
      }, {
        id: 236,
        ⵠΔΔ: ᐃᐃ.ⵠΔⵠΔᐃΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔΔⲆᐃⲆΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔᐃⲆⲆᐃⵠⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃⵠΔᐃᐃⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Crystal Dragon"
      }, {
        id: 208,
        ⵠΔΔ: ᐃᐃ.ΔΔᐃⲆⲆΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆⲆΔᐃΔⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠΔⵠᐃⲆᐃⲆ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆΔᐃⵠΔΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Bone Dragon"
      }, {
        id: 216,
        ⵠΔΔ: ᐃᐃ.ⲆⵠᐃᐃⲆΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠⲆᐃΔⲆⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠⲆⲆⵠᐃⲆᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⵠᐃⵠⵠⵠⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Tamon Warg Ghost"
      }, {
        id: 226,
        ⵠΔΔ: ᐃᐃ.ⵠⲆⲆᐃⵠᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔⲆⲆⵠᐃᐃ,
        ⵠⲆⲆΔ: ᐃᐃ.ΔⵠΔⲆΔⵠΔ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃᐃⲆᐃⲆⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Cursed"
      }, {
        id: 48,
        ⵠΔΔ: ᐃᐃ.ΔⵠⵠΔᐃⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠⵠᐃⵠΔⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⵠⵠⵠⵠⵠᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃᐃᐃⲆⲆᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔᐃⵠⲆΔⲆ,
        ΔᐃⲆ: "eogito",
        name: "Robot"
      }, {
        id: 110,
        ⵠΔΔ: ᐃᐃ.ᐃᐃⲆᐃᐃΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠᐃᐃⲆⵠΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⵠΔⵠΔᐃᐃᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃᐃⲆΔᐃⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔᐃⵠⲆΔⲆ,
        ΔᐃⲆ: "pizza wa",
        name: "Blue Butterfly"
      }, {
        id: 157,
        ⵠΔΔ: ᐃᐃ.ΔⵠⵠⲆⵠⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⲆⵠᐃⲆΔ,
        ⵠⲆⲆΔ: ᐃᐃ.ⲆᐃⲆⵠⲆⵠᐃ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⵠᐃΔⵠⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔᐃⵠⲆΔⲆ,
        ΔᐃⲆ: "eogito",
        name: "Yrifox"
      }, {
        id: 165,
        ⵠΔΔ: ᐃᐃ.ⵠᐃΔⵠⵠⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃΔᐃΔΔⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⲆⵠⲆⲆᐃΔ,
        ΔΔⲆⲆ: ᐃᐃ.ⲆⲆⵠⲆᐃᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔᐃⵠⲆΔⲆ,
        ΔᐃⲆ: "OmarJr13",
        name: "Blob Skin"
      }, {
        id: 237,
        ⵠΔΔ: ᐃᐃ.ⲆⲆᐃᐃᐃΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔΔⵠⲆΔΔⲆ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃΔⵠΔⲆΔⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ΔⲆⲆⵠⲆᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔᐃⵠⲆΔⲆ,
        ΔᐃⲆ: "NotBonnie",
        name: "NotBonnie"
      }, {
        id: 238,
        ⵠΔΔ: ᐃᐃ.ΔⲆⵠᐃΔⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔⵠΔⵠⲆⵠ,
        ⵠⲆⲆΔ: ᐃᐃ.ᐃⵠⵠⵠΔΔⵠ,
        ΔΔⲆⲆ: ᐃᐃ.ᐃᐃΔⵠΔⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔᐃⵠⲆΔⲆ,
        ΔᐃⲆ: "NotBonnie",
        name: "Cynder"
      }],
      Ⲇᐃᐃⵠ: [{
        id: 0,
        ⵠΔΔ: ᐃᐃ.ᐃΔⵠⲆᐃᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆᐃⲆᐃⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃⵠᐃⲆⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Bag 1"
      }, {
        id: 1,
        ⵠΔΔ: ᐃᐃ.ᐃⲆᐃⲆᐃΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⲆᐃⲆⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃⵠᐃⲆⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Old Bag"
      }, {
        id: 2,
        ⵠΔΔ: ᐃᐃ.ⲆⵠᐃⲆΔᐃⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃⵠΔⵠⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Bag 2"
      }, {
        id: 3,
        ⵠΔΔ: ᐃᐃ.ᐃⵠⵠⵠⵠⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃᐃⵠΔΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Bag 3"
      }, {
        id: 4,
        ⵠΔΔ: ᐃᐃ.ᐃⲆᐃᐃᐃⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔᐃⲆᐃⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Bag 4"
      }, {
        id: 5,
        ⵠΔΔ: ᐃᐃ.ΔᐃⵠΔᐃΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⵠⲆᐃⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Bag 5"
      }, {
        id: 11,
        ⵠΔΔ: ᐃᐃ.Δᐃᐃᐃᐃⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠⲆⲆⲆΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "eogito",
        name: "Wood Pickaxe Bag"
      }, {
        id: 19,
        ⵠΔΔ: ᐃᐃ.ⵠᐃⲆⵠⲆᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠΔⲆⵠΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Starve.io ",
        name: "Wood Carrier"
      }, {
        id: 37,
        ⵠΔΔ: ᐃᐃ.ΔᐃΔⲆΔΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃⲆⵠᐃΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "eogito",
        name: "Bag 6"
      }, {
        id: 39,
        ⵠΔΔ: ᐃᐃ.ΔᐃᐃΔᐃⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃⲆⲆⲆⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "eogito",
        name: "Bag with Wooden Swords"
      }, {
        id: 44,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⲆΔΔΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆⲆⲆⵠΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Communist",
        name: "Big Bag"
      }, {
        id: 7,
        ⵠΔΔ: ᐃᐃ.ⵠⲆᐃⵠⲆᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠΔⵠᐃᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Communist",
        name: "Bag 6"
      }, {
        id: 8,
        ⵠΔΔ: ᐃᐃ.ⲆⵠᐃᐃⲆΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⵠⵠⲆⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Easter Bag"
      }, {
        id: 9,
        ⵠΔΔ: ᐃᐃ.ⲆᐃⲆᐃⲆⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔⵠᐃⲆᐃΔ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "pizza wa",
        name: "Star Bag"
      }, {
        id: 10,
        ⵠΔΔ: ᐃᐃ.ᐃᐃᐃⲆᐃⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⲆⵠᐃᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "eogito",
        name: "Winter Bag"
      }, {
        id: 20,
        ⵠΔΔ: ᐃᐃ.ⲆΔᐃⲆᐃᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆⲆⲆⵠΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io ",
        name: "Stone Carrier"
      }, {
        id: 24,
        ⵠΔΔ: ᐃᐃ.ⵠΔⲆⵠⵠⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔⵠᐃᐃⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "eogito",
        name: "Stone Pickaxe Bag"
      }, {
        id: 6,
        ⵠΔΔ: ᐃᐃ.ΔΔⵠⲆⲆⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔⲆⲆⲆΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Communist",
        name: "Bag Camouflage"
      }, {
        id: 38,
        ⵠΔΔ: ᐃᐃ.ⲆΔⲆⲆΔΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⲆⵠᐃⵠΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "eogito",
        name: "Bag with Stone Swords"
      }, {
        id: 54,
        ⵠΔΔ: ᐃᐃ.ⵠΔᐃᐃⲆᐃⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔⵠⲆΔⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "eogito",
        name: "Cow Bag"
      }, {
        id: 59,
        ⵠΔΔ: ᐃᐃ.ⵠΔⲆᐃⵠⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆᐃⲆᐃⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "CrysTal",
        name: "Starver Bag"
      }, {
        id: 62,
        ⵠΔΔ: ᐃᐃ.ΔⵠΔᐃⵠⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔΔΔⵠᐃᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "CrysTal",
        name: "Crystal Sky Bag"
      }, {
        id: 71,
        ⵠΔΔ: ᐃᐃ.ⲆⲆᐃⲆⵠᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃΔᐃΔⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Portable Furnace"
      }, {
        id: 78,
        ⵠΔΔ: ᐃᐃ.ⲆΔᐃⵠⵠᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠΔᐃⲆⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Crate Bag"
      }, {
        id: 13,
        ⵠΔΔ: ᐃᐃ.ⲆⲆΔᐃᐃᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔᐃⵠⵠⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "pizza wa",
        name: "Honey Pot"
      }, {
        id: 21,
        ⵠΔΔ: ᐃᐃ.ᐃΔᐃΔⵠᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃΔᐃᐃΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io ",
        name: "Gold Carrier"
      }, {
        id: 30,
        ⵠΔΔ: ᐃᐃ.ⵠΔᐃΔⵠⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆᐃⲆΔⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Gold Pickaxe Bag"
      }, {
        id: 29,
        ⵠΔΔ: ᐃᐃ.ᐃⵠⲆᐃⲆᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔⵠⵠⵠΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Ariel",
        name: "Mr and Mrs Bakers"
      }, {
        id: 41,
        ⵠΔΔ: ᐃᐃ.ΔⵠⲆⵠⵠᐃⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔⵠΔᐃᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Bag with Golden Swords"
      }, {
        id: 47,
        ⵠΔΔ: ᐃᐃ.ᐃⵠⵠΔⵠⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⵠᐃΔⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Explorer Bag"
      }, {
        id: 51,
        ⵠΔΔ: ᐃᐃ.ᐃⲆΔΔᐃⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆⵠΔⲆΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "pizza wa",
        name: "Bamboo Bag"
      }, {
        id: 53,
        ⵠΔΔ: ᐃᐃ.ⵠⵠⵠΔⵠⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠⲆᐃⲆⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Mummy Bag"
      }, {
        id: 58,
        ⵠΔΔ: ᐃᐃ.ⲆⵠΔⵠΔⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠΔᐃᐃⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "MADBalgouthi",
        name: "Watermelon Bag"
      }, {
        id: 60,
        ⵠΔΔ: ᐃᐃ.ⲆⵠΔⵠⲆᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⵠⲆΔⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Taco4Life",
        name: "Garlic Bag"
      }, {
        id: 61,
        ⵠΔΔ: ᐃᐃ.ᐃΔⲆΔΔⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃΔⵠᐃⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Taco4Life",
        name: "Pumpkin Bag"
      }, {
        id: 64,
        ⵠΔΔ: ᐃᐃ.ⵠΔⲆⲆΔⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆΔᐃᐃᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "upfiz",
        name: "Oil Barel bag"
      }, {
        id: 67,
        ⵠΔΔ: ᐃᐃ.ⲆⵠᐃᐃⲆⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠⵠⵠⲆⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "pizza wa",
        name: "Tree Bag"
      }, {
        id: 70,
        ⵠΔΔ: ᐃᐃ.ⵠⲆⲆⲆⵠΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠΔⵠᐃⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Lit Portable Furnace"
      }, {
        id: 72,
        ⵠΔΔ: ᐃᐃ.ⵠᐃⲆⵠΔᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃⲆΔᐃΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Christmas Berry Bush Bag"
      }, {
        id: 73,
        ⵠΔΔ: ᐃᐃ.ᐃᐃⵠⵠᐃΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆᐃⵠᐃᐃΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Berry Bush Bag"
      }, {
        id: 74,
        ⵠΔΔ: ᐃᐃ.ⵠᐃⵠⵠⵠⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆΔΔΔΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Fall Berry Bush Bag"
      }, {
        id: 76,
        ⵠΔΔ: ᐃᐃ.ⵠⲆⵠΔⵠⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠⵠᐃΔΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Reclaimed Bag"
      }, {
        id: 14,
        ⵠΔΔ: ᐃᐃ.ⲆⵠⲆⲆΔΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃⲆⲆⵠⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "a Rabbit in my Bag"
      }, {
        id: 15,
        ⵠΔΔ: ᐃᐃ.ⵠᐃΔΔᐃⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠⲆᐃᐃΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Bird's nest"
      }, {
        id: 16,
        ⵠΔΔ: ᐃᐃ.ⲆᐃⵠⵠΔᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔΔᐃΔⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "a Fish on your Back"
      }, {
        id: 17,
        ⵠΔΔ: ᐃᐃ.ⲆᐃΔΔⲆΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.Δᐃⵠⵠᐃᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "a Squirrel in my Bag"
      }, {
        id: 22,
        ⵠΔΔ: ᐃᐃ.ⵠᐃᐃⵠᐃᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠⲆΔⲆⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io ",
        name: "Diamond Carrier"
      }, {
        id: 12,
        ⵠΔΔ: ᐃᐃ.ᐃΔΔⵠⵠᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠⵠⲆΔⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Resources Bag"
      }, {
        id: 32,
        ⵠΔΔ: ᐃᐃ.ΔΔⵠⵠᐃⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠⵠⵠΔᐃΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Diamond Pickaxe Bag"
      }, {
        id: 40,
        ⵠΔΔ: ᐃᐃ.ⲆⲆᐃⲆᐃⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⲆⵠΔⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Bag with Diamond Swords"
      }, {
        id: 45,
        ⵠΔΔ: ᐃᐃ.ⲆⲆᐃᐃᐃᐃⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆⵠᐃⵠⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "My Cake Bag"
      }, {
        id: 46,
        ⵠΔΔ: ᐃᐃ.ΔᐃΔΔᐃⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔΔⵠⵠΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "My Christmas Cake Bag"
      }, {
        id: 52,
        ⵠΔΔ: ᐃᐃ.ᐃⲆΔᐃⲆΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠΔᐃᐃᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "MADBalgouthi",
        name: "Fish Bag"
      }, {
        id: 65,
        ⵠΔΔ: ᐃᐃ.ⵠⲆΔᐃⲆⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.Δᐃᐃⵠⵠⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "pizza wa",
        name: "Cloud Bag"
      }, {
        id: 68,
        ⵠΔΔ: ᐃᐃ.ⵠᐃΔⲆⲆⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠΔⲆΔᐃΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "pizza wa",
        name: "Bee Bag"
      }, {
        id: 77,
        ⵠΔΔ: ᐃᐃ.ᐃᐃᐃⵠⵠⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⵠΔΔⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Bag and Bedroll"
      }, {
        id: 80,
        ⵠΔΔ: ᐃᐃ.ᐃⲆᐃⵠⲆⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠΔⲆᐃΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Peasant's Bag"
      }, {
        id: 81,
        ⵠΔΔ: ᐃᐃ.ΔᐃᐃⵠⵠⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠⲆⲆΔⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Probably Stolen Bag"
      }, {
        id: 48,
        ⵠΔΔ: ᐃᐃ.ⲆⵠᐃⲆⵠⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠΔⲆΔⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "fatant",
        name: "Natural Bag"
      }, {
        id: 23,
        ⵠΔΔ: ᐃᐃ.ᐃⵠⲆᐃⵠⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃⵠⲆⲆⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io ",
        name: "Amethyst Carrier"
      }, {
        id: 25,
        ⵠΔΔ: ᐃᐃ.ⲆᐃΔⵠΔᐃⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔᐃⲆᐃᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Amethyst Pickaxe Bag"
      }, {
        id: 28,
        ⵠΔΔ: ᐃᐃ.ⲆΔⵠⲆⵠΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔΔⵠⵠΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Your Baby"
      }, {
        id: 33,
        ⵠΔΔ: ᐃᐃ.ⵠⵠᐃΔⵠΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃᐃⲆΔⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "pizza wa",
        name: "Tropical Bag"
      }, {
        id: 43,
        ⵠΔΔ: ᐃᐃ.ⲆᐃⲆⵠΔⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⵠΔⲆⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Bag with Amethyst Swords"
      }, {
        id: 35,
        ⵠΔΔ: ᐃᐃ.ΔⵠⲆΔⲆᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⲆⲆΔⵠᐃΔ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Ice Bag"
      }, {
        id: 50,
        ⵠΔΔ: ᐃᐃ.ΔⵠΔⲆⲆΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠⲆⵠⲆⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Taco4Life",
        name: "Thornbush Bag"
      }, {
        id: 56,
        ⵠΔΔ: ᐃᐃ.ᐃᐃΔⲆⲆⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆΔΔⲆⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Autumn Bag"
      }, {
        id: 57,
        ⵠΔΔ: ᐃᐃ.ⵠΔⵠⲆΔⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆᐃⲆⵠΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Taco4Life",
        name: "Dino Egg Bag"
      }, {
        id: 66,
        ⵠΔΔ: ᐃᐃ.ⲆⵠΔᐃᐃⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠⲆᐃᐃⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "pizza wa",
        name: "Magic Cloud Bag"
      }, {
        id: 69,
        ⵠΔΔ: ᐃᐃ.ⵠⵠⲆᐃⲆΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔΔᐃΔΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "pizza wa",
        name: "Chest Bag"
      }, {
        id: 75,
        ⵠΔΔ: ᐃᐃ.ⵠΔⲆΔᐃⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆⲆΔⲆᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Tamon Spectum Bag"
      }, {
        id: 79,
        ⵠΔΔ: ᐃᐃ.ⵠⲆᐃⵠΔⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔΔⲆⲆΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Winter Peasant's Bag"
      }, {
        id: 31,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⲆᐃⵠⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠΔᐃᐃΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io ",
        name: "Reidite Carrier"
      }, {
        id: 18,
        ⵠΔΔ: ᐃᐃ.ΔⲆᐃⵠⲆⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠᐃᐃᐃΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Winter",
        name: "Lava Bag"
      }, {
        id: 49,
        ⵠΔΔ: ᐃᐃ.ᐃΔΔΔⵠᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔᐃⲆΔΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Lava Bag 2"
      }, {
        id: 36,
        ⵠΔΔ: ᐃᐃ.ⲆΔΔᐃⲆᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.Ⲇⵠᐃⵠⵠᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Dragon Bag"
      }, {
        id: 55,
        ⵠΔΔ: ᐃᐃ.ⵠᐃⲆⲆΔⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔⵠⵠⲆᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Winter Ice Bag"
      }, {
        id: 26,
        ⵠΔΔ: ᐃᐃ.ΔΔᐃᐃⲆⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠⵠⲆᐃΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Reidite Pickaxe Bag"
      }, {
        id: 27,
        ⵠΔΔ: ᐃᐃ.ᐃΔⵠΔⲆⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔΔᐃⲆΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Octopus Bowl"
      }, {
        id: 34,
        ⵠΔΔ: ᐃᐃ.ⵠⵠᐃΔⵠⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆⲆⲆΔⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Taco4Life",
        name: "Cave Bag"
      }, {
        id: 42,
        ⵠΔΔ: ᐃᐃ.ⲆⵠⲆΔⵠΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠⵠⵠⲆⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Bag with Reidite Swords"
      }, {
        id: 63,
        ⵠΔΔ: ᐃᐃ.ⲆΔΔΔΔΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠⲆⵠΔⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Engineer Bag"
      }],
      ⲆᐃⵠⲆⲆ: [{
        id: 0,
        ⵠΔΔ: ᐃᐃ.ᐃⵠΔⲆⵠⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔⲆΔⵠⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃⵠᐃⲆⵠ,
        ΔᐃⲆ: "eogito",
        name: "Wooden Dead Box"
      }, {
        id: 1,
        ⵠΔΔ: ᐃᐃ.ΔⵠΔⲆᐃᐃⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔΔᐃⲆᐃⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃⵠᐃⲆⵠ,
        ΔᐃⲆ: "eogito",
        name: "Hidden item"
      }, {
        id: 2,
        ⵠΔΔ: ᐃᐃ.ᐃᐃΔΔⵠⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃΔᐃΔᐃΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "eogito",
        name: "Wooden Box 1"
      }, {
        id: 3,
        ⵠΔΔ: ᐃᐃ.ΔⲆᐃᐃⵠᐃⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆᐃⵠᐃⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "eogito",
        name: "Wooden Box 2"
      }, {
        id: 4,
        ⵠΔΔ: ᐃᐃ.ΔⵠⲆⲆⵠⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔΔΔΔΔᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "eogito",
        name: "Wooden Box 3"
      }, {
        id: 5,
        ⵠΔΔ: ᐃᐃ.ΔᐃⲆⲆⵠⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⵠΔΔᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "eogito",
        name: "Broken Wooden Box"
      }, {
        id: 6,
        ⵠΔΔ: ᐃᐃ.ⲆⵠⲆΔⵠΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃᐃΔⵠⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "eogito",
        name: "Wooden Box"
      }, {
        id: 7,
        ⵠΔΔ: ᐃᐃ.ΔᐃᐃΔΔⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃΔΔⲆⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "eogito",
        name: "Wooden Battle Box"
      }, {
        id: 8,
        ⵠΔΔ: ᐃᐃ.ⵠᐃᐃᐃⵠΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃⵠⲆΔⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "eogito",
        name: "Wooden Box with a Cross"
      }, {
        id: 9,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⲆⵠⲆⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃⵠᐃΔΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "eogito",
        name: "Wooden Box with Bubbles"
      }, {
        id: 10,
        ⵠΔΔ: ᐃᐃ.ⵠⲆᐃⲆⵠΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔⲆᐃΔⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "eogito",
        name: "Wooden Box with Eyes"
      }, {
        id: 11,
        ⵠΔΔ: ᐃᐃ.ⵠΔΔᐃᐃⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃᐃⲆᐃⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "eogito",
        name: "Dark Wooden Box"
      }, {
        id: 38,
        ⵠΔΔ: ᐃᐃ.ᐃⵠⲆΔᐃⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃⵠᐃᐃΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Weddlz",
        name: "Noob Box"
      }, {
        id: 12,
        ⵠΔΔ: ᐃᐃ.ΔⵠⲆᐃⲆⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆᐃⵠᐃΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "eogito",
        name: "Wooden and Stone Box"
      }, {
        id: 14,
        ⵠΔΔ: ᐃᐃ.ΔᐃⵠⲆⵠᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃᐃᐃᐃᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "pizza wa",
        name: "Star Box 1"
      }, {
        id: 15,
        ⵠΔΔ: ᐃᐃ.ⵠΔΔⲆⵠᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔᐃΔⵠⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "pizza wa",
        name: "Star Box 2"
      }, {
        id: 27,
        ⵠΔΔ: ᐃᐃ.ⵠᐃᐃⵠᐃⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆΔᐃⵠᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "eogito",
        name: "Flower Box"
      }, {
        id: 46,
        ⵠΔΔ: ᐃᐃ.ΔᐃᐃΔⵠⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆΔⵠΔΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "MADBalgouthi",
        name: "Blue Box"
      }, {
        id: 75,
        ⵠΔΔ: ᐃᐃ.ⲆΔΔᐃⵠΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆᐃΔᐃⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Night Stars Crate"
      }, {
        id: 19,
        ⵠΔΔ: ᐃᐃ.ᐃᐃⲆᐃⲆⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔᐃΔⵠᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Beehive"
      }, {
        id: 13,
        ⵠΔΔ: ᐃᐃ.ⲆΔᐃⵠΔⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔΔΔⵠᐃⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Wooden and Golden Box"
      }, {
        id: 21,
        ⵠΔΔ: ᐃᐃ.ⵠΔⵠᐃⲆⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔⵠⲆⵠᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Gravestone"
      }, {
        id: 25,
        ⵠΔΔ: ᐃᐃ.ⲆᐃΔᐃⵠⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔᐃⲆⲆΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Communist",
        name: "Sky Box"
      }, {
        id: 29,
        ⵠΔΔ: ᐃᐃ.ᐃΔⲆⲆⵠⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆⲆⲆⲆⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Winter",
        name: "Golden Box"
      }, {
        id: 34,
        ⵠΔΔ: ᐃᐃ.ᐃⵠᐃⲆⵠⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃΔΔΔⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Communist",
        name: "Water Crate"
      }, {
        id: 35,
        ⵠΔΔ: ᐃᐃ.ⲆΔⲆⵠΔⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔⵠᐃⲆⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Communist",
        name: "Glass Crate"
      }, {
        id: 70,
        ⵠΔΔ: ᐃᐃ.ⲆⵠⲆⵠΔᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃⵠΔᐃⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "CrysTal",
        name: "Crystal Sky Box"
      }, {
        id: 74,
        ⵠΔΔ: ᐃᐃ.ᐃΔΔΔᐃΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔΔⲆΔⲆⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Reclaimed Crate"
      }, {
        id: 77,
        ⵠΔΔ: ᐃᐃ.ΔΔᐃΔⵠⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠⲆⲆᐃⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Workplace Accident"
      }, {
        id: 16,
        ⵠΔΔ: ᐃᐃ.ᐃᐃⵠΔΔⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔᐃⲆᐃᐃΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Wooden and Diamond Box"
      }, {
        id: 18,
        ⵠΔΔ: ᐃᐃ.ⵠⵠⲆΔᐃⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆΔΔⵠΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Don't Hit Me"
      }, {
        id: 26,
        ⵠΔΔ: ᐃᐃ.ᐃⵠΔΔΔⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠⵠⵠⵠⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Underwater Box"
      }, {
        id: 31,
        ⵠΔΔ: ᐃᐃ.ⵠⲆΔᐃⵠΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃⲆΔᐃⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Communist",
        name: "Items Pile"
      }, {
        id: 32,
        ⵠΔΔ: ᐃᐃ.ⲆⵠⵠⵠΔⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔⲆⵠⲆⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Cake Box"
      }, {
        id: 33,
        ⵠΔΔ: ᐃᐃ.ⵠⲆΔⵠᐃⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆᐃⲆΔⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Christmas Cake Box"
      }, {
        id: 36,
        ⵠΔΔ: ᐃᐃ.ΔⲆⵠΔᐃΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆᐃⵠᐃᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Fukss",
        name: "Crab Box"
      }, {
        id: 42,
        ⵠΔΔ: ᐃᐃ.ⵠⵠⵠᐃⵠⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⵠᐃⲆⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "MADBalgouthi",
        name: "Fishing Box"
      }, {
        id: 72,
        ⵠΔΔ: ᐃᐃ.ⵠΔⲆᐃΔᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠⲆΔᐃⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Storage Machine"
      }, {
        id: 22,
        ⵠΔΔ: ᐃᐃ.ᐃᐃⵠᐃᐃᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔᐃΔΔⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Let me out of here"
      }, {
        id: 17,
        ⵠΔΔ: ᐃᐃ.ΔⵠᐃᐃⵠⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⲆⲆⵠᐃΔ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Wooden and Amethyst Box"
      }, {
        id: 24,
        ⵠΔΔ: ᐃᐃ.ⲆΔᐃᐃΔΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔⵠⵠᐃⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Aquarium"
      }, {
        id: 28,
        ⵠΔΔ: ᐃᐃ.ΔⵠΔⵠᐃⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆᐃΔΔⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Gift Box"
      }, {
        id: 40,
        ⵠΔΔ: ᐃᐃ.ⵠᐃⵠⵠΔⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠΔⵠᐃⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "MADBalgouthi",
        name: "Open Watermelon Box"
      }, {
        id: 41,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⲆΔΔⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆⲆⲆΔⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "MADBalgouthi",
        name: "Watermelon Box"
      }, {
        id: 39,
        ⵠΔΔ: ᐃᐃ.ᐃⲆᐃᐃᐃᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃΔⲆⵠΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Taco4Life",
        name: "Thornbush Box"
      }, {
        id: 43,
        ⵠΔΔ: ᐃᐃ.ᐃΔⲆⲆⲆⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⲆⵠⲆᐃⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Rabbit in the Box"
      }, {
        id: 47,
        ⵠΔΔ: ᐃᐃ.ⲆᐃᐃⵠⲆⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔΔᐃᐃⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Taco4Life",
        name: "Garlic Plot"
      }, {
        id: 48,
        ⵠΔΔ: ᐃᐃ.ⵠⵠⲆⵠΔᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆⵠⲆᐃᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Taco4Life",
        name: "Pumpkin Plot"
      }, {
        id: 78,
        ⵠΔΔ: ᐃᐃ.ᐃⵠΔⵠᐃΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠⵠΔΔⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Tamon Spectrum Portal"
      }, {
        id: 45,
        ⵠΔΔ: ᐃᐃ.ᐃⵠΔΔΔᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆⵠΔⵠⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Autumn Box"
      }, {
        id: 44,
        ⵠΔΔ: ᐃᐃ.ⵠⲆⵠΔⵠᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔⲆⵠⲆΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Winter Box"
      }, {
        id: 20,
        ⵠΔΔ: ᐃᐃ.ΔⵠᐃⵠΔᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠᐃⲆⵠᐃΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Metal and Reidite Box"
      }, {
        id: 23,
        ⵠΔΔ: ᐃᐃ.ⵠᐃΔᐃⲆΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠΔⲆΔΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Kraken Box"
      }, {
        id: 30,
        ⵠΔΔ: ᐃᐃ.ⵠⵠᐃᐃⵠᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔⵠⵠⵠᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Winter",
        name: "Lava Box"
      }, {
        id: 37,
        ⵠΔΔ: ᐃᐃ.ⵠⲆᐃΔᐃᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔΔΔᐃⵠⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Lava Box 2"
      }, {
        id: 49,
        ⵠΔΔ: ᐃᐃ.ⵠⵠⲆΔⵠᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠⵠⵠΔΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Box of the Rabbit"
      }, {
        id: 50,
        ⵠΔΔ: ᐃᐃ.ⵠΔΔΔⲆⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⵠΔⵠᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Box of the Wolf"
      }, {
        id: 51,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⵠⵠᐃⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃⲆⵠⵠⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Box of the Spider"
      }, {
        id: 52,
        ⵠΔΔ: ᐃᐃ.ⲆᐃⲆᐃⵠⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃⵠΔΔᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Box of the Hawk"
      }, {
        id: 53,
        ⵠΔΔ: ᐃᐃ.ⵠⲆⵠⲆᐃΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⵠᐃⵠΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Box of the Bear"
      }, {
        id: 54,
        ⵠΔΔ: ᐃᐃ.ⵠⲆⲆⲆᐃⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠⵠⲆⲆΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Box of the Fox"
      }, {
        id: 55,
        ⵠΔΔ: ᐃᐃ.ⲆΔⲆⲆᐃⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆⲆᐃⲆⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Box of the Baby Mammoth"
      }, {
        id: 56,
        ⵠΔΔ: ᐃᐃ.ⵠⲆᐃⲆⵠᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆᐃΔΔⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Box of the Mammoth"
      }, {
        id: 57,
        ⵠΔΔ: ᐃᐃ.ᐃΔᐃⵠⲆΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠⵠⲆᐃᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Box of the Sandworm"
      }, {
        id: 58,
        ⵠΔΔ: ᐃᐃ.ⲆᐃΔⲆⲆΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔⲆᐃⲆⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Box of the Vulture"
      }, {
        id: 59,
        ⵠΔΔ: ᐃᐃ.ⲆΔⲆⵠΔᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔΔᐃⲆⲆⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Box of the Kraken"
      }, {
        id: 60,
        ⵠΔΔ: ᐃᐃ.ᐃⲆⲆᐃΔᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⲆΔⲆΔΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Box of the Piranha"
      }, {
        id: 61,
        ⵠΔΔ: ᐃᐃ.ⲆΔᐃⵠᐃⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠⵠᐃᐃΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Box of the Baby Dragon"
      }, {
        id: 62,
        ⵠΔΔ: ᐃᐃ.ⵠⵠⵠⲆⵠⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠⵠⵠⵠⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Box of the Baby Lava"
      }, {
        id: 63,
        ⵠΔΔ: ᐃᐃ.ΔΔⲆΔⵠⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆΔΔᐃΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Box of the Dragon"
      }, {
        id: 64,
        ⵠΔΔ: ᐃᐃ.ᐃΔᐃⵠᐃⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆΔⲆΔᐃΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Box of the Penguin"
      }, {
        id: 65,
        ⵠΔΔ: ᐃᐃ.ⲆⵠⲆⲆⲆⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃΔΔⲆΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Box of the Lava Dragon"
      }, {
        id: 66,
        ⵠΔΔ: ᐃᐃ.ⵠⲆⲆⲆΔΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠᐃᐃᐃⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Box of the Boar"
      }, {
        id: 67,
        ⵠΔΔ: ᐃᐃ.ᐃΔᐃΔΔⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⲆⵠΔⵠⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Box of the Fire mob"
      }, {
        id: 68,
        ⵠΔΔ: ᐃᐃ.ⵠᐃᐃΔⲆΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⲆⲆⵠⲆⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Box of the Crab"
      }, {
        id: 69,
        ⵠΔΔ: ᐃᐃ.ΔᐃᐃᐃⲆⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠΔⲆΔΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Box of the King Crab"
      }, {
        id: 71,
        ⵠΔΔ: ᐃᐃ.ΔΔᐃⲆᐃⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠⵠⵠΔⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Dragon Box"
      }, {
        id: 73,
        ⵠΔΔ: ᐃᐃ.ᐃΔᐃΔⵠⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃⲆⵠⲆⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Rekt"
      }, {
        id: 76,
        ⵠΔΔ: ᐃᐃ.ⵠΔΔΔΔⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔᐃΔⵠᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Sleeping Tamon Dragon"
      }],
      ᐃᐃⲆᐃⲆ: [{
        id: 0,
        ⵠΔΔ: ᐃᐃ.ᐃᐃⵠΔΔᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃΔᐃⲆⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃⵠᐃⲆⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Book 1"
      }, {
        id: 1,
        ⵠΔΔ: ᐃᐃ.ⵠⲆⲆⵠⵠᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔⲆⵠⵠⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "eogito",
        name: "Book 2"
      }, {
        id: 2,
        ⵠΔΔ: ᐃᐃ.ⲆΔⲆᐃⲆᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔΔⵠᐃΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "eogito",
        name: "Book 3"
      }, {
        id: 3,
        ⵠΔΔ: ᐃᐃ.ⵠⵠⲆⵠᐃᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃᐃⵠⲆΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "eogito",
        name: "Book 4"
      }, {
        id: 4,
        ⵠΔΔ: ᐃᐃ.ΔΔⲆᐃᐃⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔⲆⵠᐃⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "eogito",
        name: "Damaged Book 1"
      }, {
        id: 18,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⲆᐃΔΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆⲆᐃⵠⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "SeveR",
        name: "Damaged Book 2"
      }, {
        id: 5,
        ⵠΔΔ: ᐃᐃ.ⲆⵠⵠΔᐃᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠⲆΔΔᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Doctorpus",
        name: "Scroll"
      }, {
        id: 6,
        ⵠΔΔ: ᐃᐃ.ⲆᐃⲆΔᐃⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⲆⲆΔΔᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Doctorpus",
        name: "Clipboard"
      }, {
        id: 7,
        ⵠΔΔ: ᐃᐃ.ⵠᐃⲆᐃⵠᐃⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃΔⵠⲆΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "eogito",
        name: "Seed Book"
      }, {
        id: 20,
        ⵠΔΔ: ᐃᐃ.ⲆᐃⲆᐃΔⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆⲆᐃΔᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Taco4Life",
        name: "Camo Book"
      }, {
        id: 24,
        ⵠΔΔ: ᐃᐃ.ΔⲆᐃⲆⲆⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔⵠⲆᐃⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Communist",
        name: "Stone Tablet"
      }, {
        id: 47,
        ⵠΔΔ: ᐃᐃ.ΔᐃᐃⲆⲆΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃⵠᐃⲆᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Reclaimed Book"
      }, {
        id: 10,
        ⵠΔΔ: ᐃᐃ.ⵠΔᐃⵠᐃᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆⲆⵠΔⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "pizza wa",
        name: "Star Book"
      }, {
        id: 8,
        ⵠΔΔ: ᐃᐃ.ⵠΔⲆᐃᐃⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆᐃΔⵠⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Gold Book"
      }, {
        id: 15,
        ⵠΔΔ: ᐃᐃ.ᐃⲆᐃΔⵠΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆⲆⵠᐃᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Old Mysterious Paper"
      }, {
        id: 17,
        ⵠΔΔ: ᐃᐃ.ⵠᐃᐃⲆΔΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠⵠⲆⲆᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Gold Engraving"
      }, {
        id: 25,
        ⵠΔΔ: ᐃᐃ.ΔΔⵠᐃⲆⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔⵠⲆⲆΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "fatant",
        name: "Ant Book"
      }, {
        id: 32,
        ⵠΔΔ: ᐃᐃ.ᐃᐃΔᐃᐃᐃⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔⵠⵠΔᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Mummy Book"
      }, {
        id: 37,
        ⵠΔΔ: ᐃᐃ.ᐃⵠΔⲆΔⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆᐃᐃᐃᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Taco4Life",
        name: "Garlic Book"
      }, {
        id: 38,
        ⵠΔΔ: ᐃᐃ.ΔⵠΔⵠΔⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔⲆᐃᐃΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Taco4Life",
        name: "Pumpkin Book"
      }, {
        id: 39,
        ⵠΔΔ: ᐃᐃ.ΔⵠⲆⲆᐃⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆΔⲆΔΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Christmas Tree Book"
      }, {
        id: 11,
        ⵠΔΔ: ᐃᐃ.ⵠᐃᐃⲆⲆⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠⲆΔΔⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Diamond Book"
      }, {
        id: 9,
        ⵠΔΔ: ᐃᐃ.ⲆᐃⵠᐃⵠⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠᐃⵠⲆᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Obscure Book"
      }, {
        id: 16,
        ⵠΔΔ: ᐃᐃ.ΔⵠΔⵠⵠᐃⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔᐃⵠⵠⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Rolled Parchment"
      }, {
        id: 22,
        ⵠΔΔ: ᐃᐃ.ⲆⵠⲆⵠΔΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠᐃΔⲆⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Cake Book"
      }, {
        id: 23,
        ⵠΔΔ: ᐃᐃ.ⲆΔⲆᐃⵠⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃⲆⲆΔⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Christmas Cake Book"
      }, {
        id: 30,
        ⵠΔΔ: ᐃᐃ.ΔⵠᐃⵠⲆᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃΔᐃᐃΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "MADBalgouthi",
        name: "Fish Book"
      }, {
        id: 31,
        ⵠΔΔ: ᐃᐃ.ⵠᐃⲆᐃᐃΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆⲆⵠᐃⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "CrysTal",
        name: "Once upon a time"
      }, {
        id: 48,
        ⵠΔΔ: ᐃᐃ.ΔᐃⵠⲆᐃⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠⲆΔⵠᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Chrono Clock"
      }, {
        id: 49,
        ⵠΔΔ: ᐃᐃ.ΔⲆΔΔΔⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔΔⵠⲆᐃᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Recipe Book"
      }, {
        id: 13,
        ⵠΔΔ: ᐃᐃ.ΔᐃΔᐃⵠⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆⲆΔᐃⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Amethyst Book"
      }, {
        id: 28,
        ⵠΔΔ: ᐃᐃ.ⵠᐃΔⵠⵠⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔⵠᐃⵠⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Paint Pallet"
      }, {
        id: 29,
        ⵠΔΔ: ᐃᐃ.ᐃⲆΔΔⵠⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆⲆΔᐃⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "CrysTal",
        name: "Watermelon Book"
      }, {
        id: 27,
        ⵠΔΔ: ᐃᐃ.ⲆⵠΔΔΔⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃⲆⵠᐃᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Taco4Life",
        name: "Thornbush Book"
      }, {
        id: 35,
        ⵠΔΔ: ᐃᐃ.ᐃΔⲆΔⲆⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃⲆⵠΔⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Taco4Life",
        name: "Menu"
      }, {
        id: 36,
        ⵠΔΔ: ᐃᐃ.ΔⵠⲆᐃᐃⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠⲆⵠᐃᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "CrysTal",
        name: "Lover Letter"
      }, {
        id: 40,
        ⵠΔΔ: ᐃᐃ.ⵠᐃⲆⲆΔⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆⵠⵠⵠⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Fresh-Baked Cookies"
      }, {
        id: 41,
        ⵠΔΔ: ᐃᐃ.ⵠⵠⲆⵠⲆΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔΔⲆⵠⲆᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Inside, there is just a book."
      }, {
        id: 45,
        ⵠΔΔ: ᐃᐃ.ⵠⲆⵠᐃᐃᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⲆⲆᐃΔᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Crafting Machine"
      }, {
        id: 33,
        ⵠΔΔ: ᐃᐃ.ⵠⵠⲆΔᐃΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⲆⲆᐃΔΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Winter Book"
      }, {
        id: 34,
        ⵠΔΔ: ᐃᐃ.ᐃᐃⵠⲆᐃΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃΔⲆᐃΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Autumn Book"
      }, {
        id: 14,
        ⵠΔΔ: ᐃᐃ.ΔⲆᐃΔᐃᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔΔᐃᐃᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Reidite Book"
      }, {
        id: 12,
        ⵠΔΔ: ᐃᐃ.ⵠⵠⲆᐃΔⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔΔΔᐃⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Winter",
        name: "Lava Book"
      }, {
        id: 26,
        ⵠΔΔ: ᐃᐃ.ᐃΔⵠᐃⵠⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃΔΔⵠΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Lava Book 2"
      }, {
        id: 19,
        ⵠΔΔ: ᐃᐃ.ΔⲆΔⵠΔⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠᐃⵠⲆⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Winter",
        name: "Ocean Mystery"
      }, {
        id: 21,
        ⵠΔΔ: ᐃᐃ.ΔᐃⵠΔᐃⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠΔⲆᐃᐃΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Dragon Book"
      }, {
        id: 42,
        ⵠΔΔ: ᐃᐃ.ᐃΔⵠⲆⵠⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔΔⲆΔᐃᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Engineer Book"
      }, {
        id: 43,
        ⵠΔΔ: ᐃᐃ.ΔⵠΔⲆⵠΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠⲆΔⵠⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Nightmare Book"
      }, {
        id: 44,
        ⵠΔΔ: ᐃᐃ.ⲆⲆᐃⲆⲆⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔⲆᐃⵠⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "aloner",
        name: "Mystery Book"
      }, {
        id: 46,
        ⵠΔΔ: ᐃᐃ.ⵠⲆΔΔⲆΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆⵠⵠⲆᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Cursed Book"
      }],
      ᐃΔⲆⵠⵠ: [{
        id: 0,
        ⵠΔΔ: ᐃᐃ.ⲆⵠⲆⵠᐃⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠⲆⵠᐃⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃⵠᐃⲆⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Nothing"
      }, {
        id: 2,
        ⵠΔΔ: ᐃᐃ.ⵠⵠⵠᐃΔⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠᐃᐃⲆΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃⵠᐃⲆⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Pink Cheeks"
      }, {
        id: 3,
        ⵠΔΔ: ᐃᐃ.ΔⵠⵠᐃⲆⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃⲆΔⵠⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃⵠᐃⲆⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Heart"
      }, {
        id: 1,
        ⵠΔΔ: ᐃᐃ.ⲆⵠΔᐃⲆⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠΔⵠⲆⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃⵠᐃⲆⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Bandage 1"
      }, {
        id: 4,
        ⵠΔΔ: ᐃᐃ.ᐃΔⲆⲆⲆⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔΔⵠⲆⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃⵠᐃⲆⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Flower 1"
      }, {
        id: 5,
        ⵠΔΔ: ᐃᐃ.ⵠⵠΔⵠⲆⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃᐃⵠΔⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Bow 1"
      }, {
        id: 6,
        ⵠΔΔ: ᐃᐃ.ᐃⵠⵠᐃⲆⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔⵠⲆⵠⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "eogito",
        name: "Bandage 2"
      }, {
        id: 7,
        ⵠΔΔ: ᐃᐃ.ᐃᐃⵠΔΔⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠⲆⵠᐃⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Flower 2"
      }, {
        id: 8,
        ⵠΔΔ: ᐃᐃ.ⵠᐃΔΔⵠⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃⲆⲆⲆⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "eogito",
        name: "Bandage 3"
      }, {
        id: 36,
        ⵠΔΔ: ᐃᐃ.ⵠⲆΔΔⲆⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠᐃⲆΔΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "eogito",
        name: "Foliage"
      }, {
        id: 59,
        ⵠΔΔ: ᐃᐃ.ΔΔⲆⵠⲆⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆⲆΔᐃΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "eogito",
        name: "Peaceful"
      }, {
        id: 67,
        ⵠΔΔ: ᐃᐃ.ⵠΔⲆΔⵠᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⲆⲆⵠᐃⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "pizza wa",
        name: "Sparkles"
      }, {
        id: 68,
        ⵠΔΔ: ᐃᐃ.ⵠⲆⵠⵠⲆⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃΔⲆⲆΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "pizza wa",
        name: "Luxury"
      }, {
        id: 69,
        ⵠΔΔ: ᐃᐃ.ΔΔᐃⵠⲆΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔΔΔⵠΔΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠ,
        ΔᐃⲆ: "pizza wa",
        name: "Snow Flakes Crown"
      }, {
        id: 17,
        ⵠΔΔ: ᐃᐃ.ⵠⲆⵠⵠⲆΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠᐃⵠᐃΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Glasses 1"
      }, {
        id: 10,
        ⵠΔΔ: ᐃᐃ.ⵠⵠᐃⲆⵠᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⲆᐃᐃΔⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Bow 2"
      }, {
        id: 11,
        ⵠΔΔ: ᐃᐃ.ΔᐃⲆᐃⲆᐃⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃⲆⵠⲆⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "pizza wa",
        name: "Little Stars"
      }, {
        id: 12,
        ⵠΔΔ: ᐃᐃ.ⲆⲆΔᐃⲆⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆᐃᐃⵠΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "eogito",
        name: "Pirate Eye Patch 1"
      }, {
        id: 44,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⲆⲆⲆⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃⵠⵠΔᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Taco4Life",
        name: "Pirate Eye Patch 2"
      }, {
        id: 23,
        ⵠΔΔ: ᐃᐃ.ⲆⵠΔΔⵠⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔΔΔΔⵠᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Clown nose"
      }, {
        id: 16,
        ⵠΔΔ: ᐃᐃ.ⲆᐃΔⵠΔⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔᐃᐃᐃΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Eye Patch"
      }, {
        id: 30,
        ⵠΔΔ: ᐃᐃ.ᐃΔⵠΔᐃΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆᐃᐃᐃⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "eogito",
        name: "Flower 3"
      }, {
        id: 38,
        ⵠΔΔ: ᐃᐃ.ᐃⵠᐃⲆᐃⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠⵠⲆⲆᐃΔ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Winter",
        name: "False Nose"
      }, {
        id: 74,
        ⵠΔΔ: ᐃᐃ.ⵠᐃΔⲆᐃᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠΔΔᐃΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Red Cloth"
      }, {
        id: 75,
        ⵠΔΔ: ᐃᐃ.ΔⵠⲆΔⲆᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⵠΔⲆⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Blue Cloth"
      }, {
        id: 79,
        ⵠΔΔ: ᐃᐃ.ᐃΔΔⲆΔᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠⵠⵠᐃⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Transparent Mask"
      }, {
        id: 89,
        ⵠΔΔ: ᐃᐃ.ΔⲆⲆᐃⵠⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠᐃᐃᐃⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Anyone want to play?",
        name: "Starve.io Anime"
      }, {
        id: 94,
        ⵠΔΔ: ᐃᐃ.ⵠⲆⵠΔᐃᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠⲆⲆΔⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Ant",
        name: "Hero Mask"
      }, {
        id: 100,
        ⵠΔΔ: ᐃᐃ.ⵠⲆᐃⲆⲆΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃΔΔᐃΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "This starver is mad"
      }, {
        id: 104,
        ⵠΔΔ: ᐃᐃ.ⵠᐃⵠΔᐃⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃᐃⲆⲆⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Scars"
      }, {
        id: 106,
        ⵠΔΔ: ᐃᐃ.ⵠᐃⲆΔᐃⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃΔᐃⵠΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "In Search of Intelligence"
      }, {
        id: 109,
        ⵠΔΔ: ᐃᐃ.ⵠⵠⲆⵠⲆⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆΔᐃⵠⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Reclaimed Bandage"
      }, {
        id: 111,
        ⵠΔΔ: ᐃᐃ.ⵠᐃᐃᐃⵠΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃΔᐃⲆⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.Δᐃᐃᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Unwrap Starver for Gift"
      }, {
        id: 15,
        ⵠΔΔ: ᐃᐃ.ᐃⵠⵠⵠᐃᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔⵠᐃⵠⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Star Glasses"
      }, {
        id: 21,
        ⵠΔΔ: ᐃᐃ.ΔᐃⵠⲆΔⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠΔⵠⵠⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Great-aunt's Glasses"
      }, {
        id: 24,
        ⵠΔΔ: ᐃᐃ.ⵠᐃΔⲆΔΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠⲆⲆⲆᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Little Starver"
      }, {
        id: 22,
        ⵠΔΔ: ᐃᐃ.ⲆⵠᐃⵠᐃⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠΔⵠⲆⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Little Glasses"
      }, {
        id: 13,
        ⵠΔΔ: ᐃᐃ.ᐃⲆΔⵠᐃᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔⵠⲆΔΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Flower Chain"
      }, {
        id: 29,
        ⵠΔΔ: ᐃᐃ.ᐃᐃΔΔⲆⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃᐃᐃΔⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Horns"
      }, {
        id: 31,
        ⵠΔΔ: ᐃᐃ.ᐃⵠⵠΔⲆⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔⵠⲆⲆᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Golden Flower"
      }, {
        id: 40,
        ⵠΔΔ: ᐃᐃ.ΔᐃΔΔᐃΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃⲆΔΔⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "pizza wa",
        name: "Sleeping Mask"
      }, {
        id: 57,
        ⵠΔΔ: ᐃᐃ.ⲆΔⵠⵠᐃΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠⲆᐃⵠⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Taco4Life",
        name: "Fish on your head"
      }, {
        id: 58,
        ⵠΔΔ: ᐃᐃ.ⵠⵠΔⲆⵠᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆᐃᐃᐃΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Rose"
      }, {
        id: 91,
        ⵠΔΔ: ᐃᐃ.ᐃⵠΔΔⵠΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃᐃⵠⵠⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "upfiz",
        name: "Grey Scarf"
      }, {
        id: 92,
        ⵠΔΔ: ᐃᐃ.ᐃⵠᐃⲆΔⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠΔᐃⲆΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "upfiz",
        name: "Black Scarf"
      }, {
        id: 93,
        ⵠΔΔ: ᐃᐃ.ΔᐃᐃΔⵠⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⵠΔⲆⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "upfiz",
        name: "Skull Mask"
      }, {
        id: 95,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⲆⲆⲆⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆⵠⵠᐃᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Golden Monocle"
      }, {
        id: 96,
        ⵠΔΔ: ᐃᐃ.ⵠᐃⲆⲆⲆⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃⵠΔᐃⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "A simple instruction"
      }, {
        id: 102,
        ⵠΔΔ: ᐃᐃ.ⵠⲆᐃⲆΔⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠⵠΔⵠΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Garland"
      }, {
        id: 103,
        ⵠΔΔ: ᐃᐃ.ΔⲆᐃⲆᐃⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠᐃⲆᐃᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "The Doormat"
      }, {
        id: 108,
        ⵠΔΔ: ᐃᐃ.ⵠⵠΔᐃᐃᐃⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔᐃᐃΔΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Copium Tanks"
      }, {
        id: 117,
        ⵠΔΔ: ᐃᐃ.ΔⲆⵠΔᐃᐃⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆᐃⲆᐃᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Eyelashes"
      }, {
        id: 118,
        ⵠΔΔ: ᐃᐃ.ΔⵠⲆⵠⲆⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠⵠΔᐃⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ᐃΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Helmet Prototype"
      }, {
        id: 9,
        ⵠΔΔ: ᐃᐃ.ⲆᐃⵠᐃⵠⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆᐃⵠⲆΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Fancy Glasses"
      }, {
        id: 25,
        ⵠΔΔ: ᐃᐃ.ΔᐃⵠΔⵠⲆⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃⵠⲆΔΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Medecin Mask"
      }, {
        id: 14,
        ⵠΔΔ: ᐃᐃ.ᐃⵠⲆΔΔⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃΔΔΔᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Mr. Mayor"
      }, {
        id: 19,
        ⵠΔΔ: ᐃᐃ.ΔΔᐃⵠⵠΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⲆⵠΔⲆⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Sunglasses 2"
      }, {
        id: 28,
        ⵠΔΔ: ᐃᐃ.ΔᐃᐃᐃⲆᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⵠⲆⲆᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "pizza wa",
        name: "Starfish"
      }, {
        id: 37,
        ⵠΔΔ: ᐃᐃ.ΔᐃⲆᐃⲆⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆΔΔⵠⲆΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Berry"
      }, {
        id: 39,
        ⵠΔΔ: ᐃᐃ.ⵠᐃⲆᐃⵠᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔⵠᐃᐃᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Flake"
      }, {
        id: 43,
        ⵠΔΔ: ᐃᐃ.ⲆⵠΔᐃΔⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆΔⵠⵠⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Leaf "
      }, {
        id: 61,
        ⵠΔΔ: ᐃᐃ.ΔⲆΔΔⵠⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠΔⲆⵠΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "A sword in your head"
      }, {
        id: 62,
        ⵠΔΔ: ᐃᐃ.ΔΔⵠⵠⵠΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆΔⵠⵠΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Winter Scarf"
      }, {
        id: 64,
        ⵠΔΔ: ᐃᐃ.ᐃᐃⵠⲆΔⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠⲆⲆⵠⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Winter Scarf 2"
      }, {
        id: 66,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⲆᐃⵠⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠⵠⵠΔΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Winter Scarf 3"
      }, {
        id: 70,
        ⵠΔΔ: ᐃᐃ.ᐃᐃᐃᐃᐃⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠΔⲆΔⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Mask with animal tracks"
      }, {
        id: 71,
        ⵠΔΔ: ᐃᐃ.ᐃⵠⵠΔⵠΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠΔΔᐃᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Spring Mask"
      }, {
        id: 72,
        ⵠΔΔ: ᐃᐃ.ⵠΔΔΔᐃⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⲆⲆⵠⵠⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Pink Mask"
      }, {
        id: 73,
        ⵠΔΔ: ᐃᐃ.ᐃⵠΔⵠⲆⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔⲆⲆⲆᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Blue Mask"
      }, {
        id: 76,
        ⵠΔΔ: ᐃᐃ.ᐃⵠⲆᐃΔⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⲆΔⵠᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Military Mask"
      }, {
        id: 77,
        ⵠΔΔ: ᐃᐃ.ᐃΔⵠΔΔⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔᐃΔⲆᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Orange Mask"
      }, {
        id: 78,
        ⵠΔΔ: ᐃᐃ.ⵠⲆᐃᐃᐃⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⵠΔⵠⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "White and Red Points Mask"
      }, {
        id: 80,
        ⵠΔΔ: ᐃᐃ.ᐃⲆᐃΔᐃⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⵠⵠΔΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Stick out your tongue Mask"
      }, {
        id: 81,
        ⵠΔΔ: ᐃᐃ.ⵠᐃΔΔⲆΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠⲆⲆⵠᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Two Teeth Mask"
      }, {
        id: 82,
        ⵠΔΔ: ᐃᐃ.ⲆΔᐃΔⵠΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆⵠΔΔΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Make-up Mask"
      }, {
        id: 83,
        ⵠΔΔ: ᐃᐃ.ⵠⵠΔⲆᐃᐃⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔᐃΔᐃᐃΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Sad Mask"
      }, {
        id: 84,
        ⵠΔΔ: ᐃᐃ.ⵠⵠΔⲆᐃⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠⵠⲆⲆⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Happy Mask"
      }, {
        id: 90,
        ⵠΔΔ: ᐃᐃ.ΔᐃⵠⵠᐃΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠⲆⲆⲆⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "aloner",
        name: "Blood"
      }, {
        id: 101,
        ⵠΔΔ: ᐃᐃ.ΔΔᐃᐃᐃⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠⵠⲆⲆΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Axed Plans"
      }, {
        id: 105,
        ⵠΔΔ: ᐃᐃ.ΔⲆᐃᐃⲆⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⲆⵠᐃΔⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Saddle"
      }, {
        id: 113,
        ⵠΔΔ: ᐃᐃ.ⵠⲆⲆᐃΔᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠΔΔᐃΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "I see"
      }, {
        id: 114,
        ⵠΔΔ: ᐃᐃ.ΔᐃΔΔⲆⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆⲆᐃΔΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "I have no body and I must dress"
      }, {
        id: 115,
        ⵠΔΔ: ᐃᐃ.ⵠΔⵠⲆⲆⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠⵠⵠⲆᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔⵠⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Cursed Crown"
      }, {
        id: 27,
        ⵠΔΔ: ᐃᐃ.ᐃᐃΔⲆⲆΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠᐃⲆΔᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Clown Face"
      }, {
        id: 20,
        ⵠΔΔ: ᐃᐃ.ᐃΔᐃΔΔΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆⲆⵠΔⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Sunglasses 3"
      }, {
        id: 32,
        ⵠΔΔ: ᐃᐃ.ᐃⲆΔΔⲆᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃⲆⵠⲆΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Engineer's Glasses"
      }, {
        id: 33,
        ⵠΔΔ: ᐃᐃ.ᐃᐃⲆⲆⲆᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔⲆΔᐃⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Engineer's Monocle"
      }, {
        id: 34,
        ⵠΔΔ: ᐃᐃ.ᐃⵠᐃⵠᐃⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⵠⲆⵠᐃᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Mauve's butt"
      }, {
        id: 41,
        ⵠΔΔ: ᐃᐃ.ΔᐃΔΔⵠᐃᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆⵠΔⲆⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Lapa Head"
      }, {
        id: 42,
        ⵠΔΔ: ᐃᐃ.ⵠΔᐃΔᐃⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔΔᐃΔⵠⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "eogito",
        name: "Lapa Head "
      }, {
        id: 85,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⵠⲆΔⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔⵠΔⲆᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Mask and Glasses"
      }, {
        id: 110,
        ⵠΔΔ: ᐃᐃ.ᐃᐃΔⲆΔᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔⵠⲆⵠⲆⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ⲆΔⵠⵠ,
        ΔᐃⲆ: "Starve.io",
        name: "Tamon Spectrum Pet"
      }, {
        id: 60,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⲆⵠᐃᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔⵠΔⵠᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Jason"
      }, {
        id: 26,
        ⵠΔΔ: ᐃᐃ.ⲆⵠΔⵠⲆⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃⵠⲆⵠΔΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Devil Horns"
      }, {
        id: 18,
        ⵠΔΔ: ᐃᐃ.ᐃⵠⵠⵠⲆΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃᐃᐃΔΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Big Boss"
      }, {
        id: 35,
        ⵠΔΔ: ᐃᐃ.ⵠⲆΔⲆⲆᐃⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠⲆⵠⵠΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Baby Kraken"
      }, {
        id: 63,
        ⵠΔΔ: ᐃᐃ.ΔⵠⵠⲆΔⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔΔⵠⲆΔⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Deer Antlers"
      }, {
        id: 65,
        ⵠΔΔ: ᐃᐃ.ΔⲆᐃᐃⵠⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠᐃⵠⲆⲆⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Baby Dragon on your head"
      }, {
        id: 86,
        ⵠΔΔ: ᐃᐃ.ΔⵠΔⵠⵠⵠᐃ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔⲆΔⵠⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Gaz Mask and Glasses"
      }, {
        id: 87,
        ⵠΔΔ: ᐃᐃ.ΔⲆᐃⲆⵠⲆΔ,
        ⵠⲆⵠ: ᐃᐃ.ΔⵠⵠⲆⲆⵠⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Pink Gaz Mask and Glasses"
      }, {
        id: 88,
        ⵠΔΔ: ᐃᐃ.ⲆⲆⲆⲆⲆᐃΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆᐃᐃⵠΔⲆΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "eogito",
        name: "Engineer Glasses"
      }, {
        id: 97,
        ⵠΔΔ: ᐃᐃ.ⲆⵠᐃⲆⲆⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆⵠΔⵠⵠᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Jarred Horns"
      }, {
        id: 98,
        ⵠΔΔ: ᐃᐃ.ᐃΔⵠⵠΔⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔⵠⲆΔⲆⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Curved Horns"
      }, {
        id: 99,
        ⵠΔΔ: ᐃᐃ.ⲆⲆᐃΔⲆΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃᐃⵠΔⵠⲆᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Evil Goat Horns"
      }, {
        id: 107,
        ⵠΔΔ: ᐃᐃ.ΔΔⵠⲆⲆⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆΔᐃΔᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Decorative Earmuffs"
      }, {
        id: 112,
        ⵠΔΔ: ᐃᐃ.ΔⵠⵠⲆᐃⵠΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆⲆΔᐃᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Tamon Dragon Pet"
      }, {
        id: 116,
        ⵠΔΔ: ᐃᐃ.ⵠⲆⵠⲆⵠⲆᐃ,
        ⵠⲆⵠ: ᐃᐃ.ΔⲆⵠⵠΔⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔⲆᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "Blanket"
      }, {
        id: 45,
        ⵠΔΔ: ᐃᐃ.ᐃⵠⲆⵠⵠᐃⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔⵠᐃΔᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "More than Level 5",
        level: 5
      }, {
        id: 46,
        ⵠΔΔ: ᐃᐃ.ᐃᐃΔⲆᐃⲆⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔᐃⵠΔᐃΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "More than Level 10",
        level: 10
      }, {
        id: 47,
        ⵠΔΔ: ᐃᐃ.ᐃᐃΔᐃΔΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⵠᐃᐃΔΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "More than Level 15",
        level: 15
      }, {
        id: 48,
        ⵠΔΔ: ᐃᐃ.ⲆⵠᐃⲆⵠΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ⵠⵠΔΔΔᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "More than Level 20",
        level: 20
      }, {
        id: 49,
        ⵠΔΔ: ᐃᐃ.ⵠΔⵠΔᐃⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔΔⲆⲆⲆᐃⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "More than Level 25",
        level: 25
      }, {
        id: 50,
        ⵠΔΔ: ᐃᐃ.ᐃΔᐃᐃⵠΔᐃ,
        ⵠⲆⵠ: ᐃᐃ.ⵠΔⲆΔΔΔᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "More than Level 30",
        level: 30
      }, {
        id: 51,
        ⵠΔΔ: ᐃᐃ.ⲆⵠⵠⲆᐃΔΔ,
        ⵠⲆⵠ: ᐃᐃ.ⲆⲆⲆⲆᐃᐃᐃ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "More than Level 35",
        level: 35
      }, {
        id: 52,
        ⵠΔΔ: ᐃᐃ.ᐃⲆⲆⲆΔⵠⲆ,
        ⵠⲆⵠ: ᐃᐃ.ᐃΔⵠⲆᐃⵠⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "More than Level 40",
        level: 40
      }, {
        id: 53,
        ⵠΔΔ: ᐃᐃ.ⵠᐃΔⵠⵠⵠⵠ,
        ⵠⲆⵠ: ᐃᐃ.ΔΔᐃᐃⵠΔⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "More than Level 45",
        level: 45
      }, {
        id: 54,
        ⵠΔΔ: ᐃᐃ.ⲆΔᐃΔΔᐃⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔᐃΔᐃⵠΔⲆ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "More than Level 50",
        level: 50
      }, {
        id: 55,
        ⵠΔΔ: ᐃᐃ.ΔᐃᐃᐃⵠΔⲆ,
        ⵠⲆⵠ: ᐃᐃ.ΔΔᐃᐃΔᐃⵠ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "More than Level 55",
        level: 55
      }, {
        id: 56,
        ⵠΔΔ: ᐃᐃ.ⲆⲆΔⵠᐃΔⵠ,
        ⵠⲆⵠ: ᐃᐃ.ᐃⲆΔᐃⵠⵠΔ,
        ⲆⵠΔ: ΔⲆⵠ.ΔΔΔⵠᐃ,
        ΔᐃⲆ: "Starve.io",
        name: "More than Level 60",
        level: 60
      }]
    };
    Ff.ⲆᐃΔΔⲆⲆⲆ = ΔⵠⵠΔΔⲆⲆ(ΔⲆᐃΔ.ⵠⲆⵠⲆᐃ, 21);
    Ff.ᐃΔⵠᐃΔᐃⲆ = ΔⵠⵠΔΔⲆⲆ(ΔⲆᐃΔ.ⵠⲆⵠⲆᐃ, 20);
    ᐃΔ[255] = [];
    ᐃΔ[7] = [];
    ᐃΔ[250] = [];
    ᐃΔ[28] = [];
    ᐃΔ[29] = [];
    ᐃΔ[796] = [];
    for (var a = 0; a < ΔⲆᐃΔ.ⵠⲆⵠⲆᐃ.length; a++) {
      ᐃΔ[255][a] = [ΔⲆᐃΔ.ⵠⲆⵠⲆᐃ[a].ⵠΔΔ, ΔⲆᐃΔ.ⵠⲆⵠⲆᐃ[a].ⵠⲆⵠ];
      ᐃΔ[7][a] = [ΔⲆᐃΔ.ⵠⲆⵠⲆᐃ[a].ⵠⲆⲆΔ, ΔⲆᐃΔ.ⵠⲆⵠⲆᐃ[a].ΔΔⲆⲆ];
    }
    for (a = 0; ΔⲆᐃΔ.ᐃᐃⲆᐃⲆ.length > a; a++) {
      ᐃΔ[28][a] = [ΔⲆᐃΔ.ᐃᐃⲆᐃⲆ[a].ⵠΔΔ, ΔⲆᐃΔ.ᐃᐃⲆᐃⲆ[a].ⵠⲆⵠ];
    }
    for (a = 0; a < ΔⲆᐃΔ.ⲆᐃⵠⲆⲆ.length; a++) {
      ᐃΔ[250][a] = [ΔⲆᐃΔ.ⲆᐃⵠⲆⲆ[a].ⵠΔΔ, ΔⲆᐃΔ.ⲆᐃⵠⲆⲆ[a].ⵠⲆⵠ];
    }
    for (a = 0; ΔⲆᐃΔ.Ⲇᐃᐃⵠ.length > a; a++) {
      ᐃΔ[29][a] = [ΔⲆᐃΔ.Ⲇᐃᐃⵠ[a].ⵠΔΔ, ΔⲆᐃΔ.Ⲇᐃᐃⵠ[a].ⵠⲆⵠ];
    }
    for (a = 0; ΔⲆᐃΔ.ᐃΔⲆⵠⵠ.length > a; a++) {
      ᐃΔ[796][a] = [ΔⲆᐃΔ.ᐃΔⲆⵠⵠ[a].ⵠΔΔ, ΔⲆᐃΔ.ᐃΔⲆⵠⵠ[a].ⵠⲆⵠ];
    }
  };
  const rd = 1;
  const sd = 4;
  function hd(a, b, c, d) {
    a.beginPath();
    a.arc(b, c, d, 0, Math.PI * 2);
  }
  const gd = 7;
  function ld(a, b, c, d, e) {
    a.beginPath();
    a.lineCap = "round";
    a.arc(b, c, d, 0, Math.PI * 2 * e);
  }
  function ud(b, c, d, e) {
    var f = Math.PI * 2 / c;
    b.beginPath();
    var i = [{
      x: d,
      y: 0
    }];
    var a = [];
    for (var j = 1; c > j; j++) {
      i.push({
        x: Math.sin(j * f) * d,
        y: Math.cos(j * f) * d
      });
      var k = i.length;
      a.push(ⲆⵠΔⵠ.ⵠΔᐃⲆⵠⲆⲆ(i[k - 2], i[k - 1]));
    }
    a.push(ⲆⵠΔⵠ.ⵠΔᐃⲆⵠⲆⲆ(i[i.length - 1], i[0]));
    var l = a[a.length - 1];
    b.moveTo(l.x, l.y);
    for (j = 0; j < c; j++) {
      b.arcTo(i[j].x, i[j].y, a[j].x, a[j].y, e);
    }
    b.closePath();
  }
  function bd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = Math.sqrt(b.width * b.width + b.height * b.height);
    d2 = e / 2;
    c.width = e;
    c.height = e;
    d.translate(d2, d2);
    d.rotate(a);
    d.drawImage(b, -b.width / 2, -b.height / 2);
    return c;
  }
  const dd = 8;
  function vd(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.floor(b * 28);
    var g = Math.floor(b * 20);
    e.font = g + "px Baloo Paaji";
    var a = b * 8;
    var h = e.measureText(c).width + a * 2;
    d.width = h;
    d.height = f;
    ad(e, 0, 0, h, f, b * 10);
    e.globalAlpha = 0.5;
    od(e, "#000");
    e.globalAlpha = 1;
    e.textBaseline = "middle";
    e.font = g + "px Baloo Paaji";
    e.beginPath();
    e.fillStyle = "#FFF";
    e.fillText(c, a, f / 2);
    return d;
  }
  const md = oh;
  function cd(a) {
    return oc.String.fromCharCode(a);
  }
  function pd(c, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 120;
    var k = c * 110;
    var a = j / 2;
    var m = k / 2;
    var n = c * 20;
    var h = c * 112;
    var g = c * 82;
    var l = h / 2;
    var o = g / 2;
    var b = c * 4;
    f.width = j;
    f.height = k;
    i.globalAlpha = 1;
    i.translate(a, m);
    ad(i, -l, -o, h, g, n);
    od(i, e, e, b);
    return f;
  }
  (function () {
    const a = {
      ᐃⲆᐃΔ: 8094199,
      ΔᐃⵠΔⲆⲆⲆ: 13567870,
      ᐃᐃⵠᐃⵠⵠΔ: 13135190,
      ΔΔⵠΔ: 8506868
    };
  })();
  const Cd = 3;
  function Td(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 22;
    d.height = a * 22;
    e.globalAlpha = 0.4;
    hd(e, a * 11, a * 11, a * 10);
    od(e, c[0]);
    e.globalAlpha = 0.7;
    hd(e, a * 11, a * 11, a * 7);
    od(e, c[0]);
    e.globalAlpha = 1;
    hd(e, a * 11, a * 11, a * 4);
    od(e, c[0]);
    return d;
  }
  function fd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 264;
    d.height = a * 246;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    od(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    od(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 102);
    e.bezierCurveTo(a * 111, a * 80, a * 110, a * 66, a * 108, a * 51);
    e.bezierCurveTo(a * 119, a * 65, a * 129, a * 85, a * 135, a * 99);
    e.bezierCurveTo(a * 142, a * 67, a * 146, a * 60, a * 152, a * 50);
    e.bezierCurveTo(a * 154, a * 71, a * 152, a * 85, a * 149, a * 104);
    e.bezierCurveTo(a * 166, a * 88, a * 175, a * 83, a * 188, a * 78);
    e.bezierCurveTo(a * 179, a * 91, a * 170, a * 103, a * 160, a * 112);
    e.bezierCurveTo(a * 186, a * 107, a * 191, a * 107, a * 204, a * 108);
    e.bezierCurveTo(a * 195, a * 114, a * 179, a * 120, a * 163, a * 123);
    e.bezierCurveTo(a * 183, a * 130, a * 186, a * 135, a * 192, a * 140);
    e.bezierCurveTo(a * 179, a * 141, a * 164, a * 139, a * 153, a * 135);
    e.bezierCurveTo(a * 158, a * 145, a * 163, a * 159, a * 165, a * 177);
    e.bezierCurveTo(a * 154, a * 166, a * 145, a * 153, a * 138, a * 139);
    e.bezierCurveTo(a * 133, a * 155, a * 125, a * 170, a * 117, a * 182);
    e.bezierCurveTo(a * 116, a * 160, a * 119, a * 151, a * 124, a * 138);
    e.bezierCurveTo(a * 107, a * 150, a * 95, a * 156, a * 82, a * 159);
    e.bezierCurveTo(a * 94, a * 140, a * 101, a * 136, a * 113, a * 128);
    e.bezierCurveTo(a * 78, a * 123, a * 75, a * 121, a * 67, a * 118);
    e.bezierCurveTo(a * 85, a * 112, a * 94, a * 112, a * 111, a * 113);
    e.bezierCurveTo(a * 89, a * 97, a * 85, a * 93, a * 78, a * 82);
    e.bezierCurveTo(a * 92, a * 85, a * 101, a * 90, a * 121, a * 102);
    e.closePath();
    od(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 103);
    e.bezierCurveTo(a * 111, a * 112, a * 117, a * 136, a * 140, a * 130);
    e.bezierCurveTo(a * 151, a * 126, a * 156, a * 115, a * 155, a * 107);
    e.bezierCurveTo(a * 155, a * 96, a * 154, a * 94, a * 148, a * 94);
    e.bezierCurveTo(a * 141, a * 94, a * 146, a * 104, a * 136, a * 104);
    e.closePath();
    od(e, c[3], c[4], a * 4);
    return d;
  }
  function zd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 69.5, a * 145);
    ad(e, a * -8.5, a * -63, a * 17, a * 127, a * 1);
    e.restore();
    od(e, c[0]);
    e.save();
    e.translate(a * 183, a * 145);
    ad(e, a * -8, a * -63, a * 16, a * 126, a * 1);
    e.restore();
    od(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 62.5);
    e.rotate(6.28);
    ad(e, a * -84.5, a * -25.5, a * 169, a * 51, a * 5);
    e.restore();
    od(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123.5, a * 118);
    e.rotate(6.24);
    ad(e, a * -85.5, a * -24, a * 169, a * 48, a * 5);
    e.restore();
    od(e, c[3], c[1], a * 6);
    e.save();
    e.translate(a * 122, a * 177.5);
    e.rotate(6.32);
    ad(e, a * -84, a * -23.5, a * 169, a * 47, a * 5);
    e.restore();
    od(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 157);
    e.bezierCurveTo(a * 49, a * 160, a * 49, a * 160, a * 61, a * 163);
    e.bezierCurveTo(a * 49.5, a * 165.5, a * 49.5, a * 165.5, a * 38, a * 168);
    e.closePath();
    od(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 205, a * 175);
    e.bezierCurveTo(a * 192.5, a * 180, a * 192.5, a * 180, a * 180, a * 185);
    e.bezierCurveTo(a * 193, a * 188, a * 193, a * 188, a * 206, a * 191);
    e.closePath();
    od(e, c[1]);
    return d;
  }
  function yd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 70;
    d.height = a * 70;
    e.globalAlpha = 0.5;
    hd(e, a * 26, a * 26, a * 9);
    od(e, c[0]);
    hd(e, a * 56, a * 36, a * 9);
    od(e, c[1]);
    hd(e, a * 40, a * 50, a * 9);
    od(e, c[2]);
    e.globalAlpha = 1;
    hd(e, a * 26, a * 26, a * 5);
    od(e, c[0]);
    hd(e, a * 56, a * 36, a * 5);
    od(e, c[1]);
    hd(e, a * 40, a * 50, a * 5);
    od(e, c[2]);
    return d;
  }
  function wd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 182, a * 120);
    ad(e, a * -8, a * -67, a * 16, a * 134, a * 1);
    e.restore();
    od(e, c[0]);
    e.save();
    e.translate(a * 68.5, a * 127.5);
    ad(e, a * -8.5, a * -70.5, a * 17, a * 141, a * 1);
    e.restore();
    od(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 68);
    ad(e, a * -82.5, a * -24, a * 165, a * 48, a * 4);
    e.restore();
    od(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123, a * 179.5);
    ad(e, a * -83, a * -24.5, a * 166, a * 49, a * 4);
    e.restore();
    od(e, c[2], c[1], a * 6);
    e.save();
    e.translate(a * 123.5, a * 123.5);
    e.rotate(6.24);
    ad(e, a * -82.5, a * -24.5, a * 165, a * 49, a * 4);
    e.restore();
    od(e, c[3], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 112);
    e.bezierCurveTo(a * 149, a * 121.5, a * 96, a * 130, a * 94, a * 131);
    e.bezierCurveTo(a * 149.5, a * 127.5, a * 149.5, a * 127.5, a * 205, a * 124);
    e.closePath();
    od(e, c[1]);
    return d;
  }
  function Pd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 183, a * 107);
    ad(e, a * -8, a * -70.5, a * 16, a * 141, a * 1);
    e.restore();
    od(e, c[0]);
    e.save();
    e.translate(a * 69.5, a * 110);
    ad(e, a * -8.5, a * -71, a * 17, a * 143, a * 1);
    e.restore();
    od(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 181);
    ad(e, a * -84.5, a * -26, a * 169, a * 52, a * 5);
    e.restore();
    od(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 95);
    e.bezierCurveTo(a * 105, a * 96, a * 113, a * 99, a * 134, a * 102);
    e.bezierCurveTo(a * 147, a * 106, a * 173, a * 100, a * 207, a * 105);
    e.bezierCurveTo(a * 210, a * 105, a * 207, a * 140, a * 207, a * 154);
    e.bezierCurveTo(a * 123.5, a * 151.5, a * 123.5, a * 151.5, a * 40, a * 149);
    e.bezierCurveTo(a * 37, a * 145, a * 39, a * 95, a * 41, a * 96);
    e.closePath();
    od(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 75);
    e.bezierCurveTo(a * 54, a * 72.5, a * 54, a * 72.5, a * 40, a * 70);
    e.bezierCurveTo(a * 38, a * 46, a * 40, a * 46, a * 53, a * 46);
    e.bezierCurveTo(a * 201, a * 41, a * 201, a * 41, a * 201, a * 42);
    e.bezierCurveTo(a * 211, a * 40, a * 208, a * 53, a * 208, a * 72);
    e.bezierCurveTo(a * 209, a * 91, a * 210, a * 96, a * 194, a * 94);
    e.bezierCurveTo(a * 119, a * 97, a * 119, a * 97, a * 44, a * 100);
    e.bezierCurveTo(a * 39, a * 99, a * 40, a * 96, a * 40, a * 80);
    e.bezierCurveTo(a * 54, a * 77.5, a * 54, a * 77.5, a * 68, a * 75);
    e.closePath();
    od(e, c[3], c[1], a * 6);
    return d;
  }
  const kd = 17;
  function Ad(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 185;
    f.height = b * 240;
    g.globalAlpha = 0.5;
    g.translate(0, b * 10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 137);
    g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
    g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
    g.closePath();
    od(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 181);
    g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
    g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
    g.closePath();
    od(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 63, b * 208);
    g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
    g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
    g.closePath();
    od(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 130, b * 170);
    g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
    g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
    g.closePath();
    od(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 39, b * 140);
    g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
    g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
    g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
    g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
    g.closePath();
    od(g, d[0]);
    g.globalAlpha = 1;
    g.translate(0, b * -10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 137);
    g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
    g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
    g.closePath();
    od(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 181);
    g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
    g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
    g.closePath();
    od(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 63, b * 208);
    g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
    g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
    g.closePath();
    od(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 130, b * 170);
    g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
    g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
    g.closePath();
    od(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 39, b * 140);
    g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
    g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
    g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
    g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
    g.closePath();
    od(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 59, b * 99);
    g.bezierCurveTo(b * 71, b * 68, b * 81, b * 68, b * 94, b * 67);
    g.bezierCurveTo(b * 105, b * 66, b * 119, b * 75, b * 123, b * 96);
    g.bezierCurveTo(b * 104, b * 91, b * 101, b * 94, b * 94, b * 97);
    g.bezierCurveTo(b * 76, b * 92, b * 73, b * 93, b * 60, b * 99);
    g.closePath();
    od(g, d[3], d[2], b * 4);
    if (e === 0) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 47, b * 149);
      g.bezierCurveTo(b * 43, b * 140, b * 48, b * 130, b * 59, b * 127);
      g.bezierCurveTo(b * 77, b * 126, b * 90, b * 131, b * 131, b * 127);
      g.bezierCurveTo(b * 143, b * 130, b * 144, b * 143, b * 132, b * 154);
      g.bezierCurveTo(b * 90, b * 152, b * 90, b * 152, b * 48, b * 150);
      g.closePath();
      od(g, d[1]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 40, b * 139);
      g.bezierCurveTo(b * 48, b * 113, b * 76, b * 119, b * 91, b * 126);
      g.bezierCurveTo(b * 117, b * 113, b * 135, b * 117, b * 144, b * 134);
      g.bezierCurveTo(b * 144, b * 138, b * 144, b * 138, b * 144, b * 142);
      g.bezierCurveTo(b * 128, b * 124, b * 108, b * 124, b * 91, b * 136);
      g.bezierCurveTo(b * 59, b * 124, b * 50, b * 137, b * 42, b * 148);
      g.closePath();
      od(g, d[3], d[2], b * 4);
    } else {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 41, b * 139);
      g.bezierCurveTo(b * 53, b * 117, b * 69, b * 118, b * 92, b * 127);
      g.bezierCurveTo(b * 124, b * 111, b * 136, b * 121, b * 143, b * 136);
      g.bezierCurveTo(b * 142, b * 144, b * 142, b * 144, b * 141, b * 152);
      g.bezierCurveTo(b * 128, b * 131, b * 113, b * 138, b * 92, b * 145);
      g.bezierCurveTo(b * 57, b * 133, b * 57, b * 147, b * 44, b * 154);
      g.closePath();
      od(g, d[3], d[2], b * 4);
    }
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 90, b * 95);
    g.bezierCurveTo(b * 99, b * 82, b * 98, b * 58, b * 99, b * 40);
    g.bezierCurveTo(b * 90, b * 38, b * 89, b * 34, b * 92, b * 17);
    g.bezierCurveTo(b * 92, b * 5, b * 83, b * 16, b * 78, b * 29);
    g.bezierCurveTo(b * 72, b * 59, b * 87, b * 81, b * 89, b * 87);
    g.closePath();
    od(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 90, b * 86);
    g.bezierCurveTo(b * 95, b * 74, b * 95, b * 62, b * 95, b * 43);
    g.bezierCurveTo(b * 84, b * 37, b * 86, b * 34, b * 89, b * 16);
    g.bezierCurveTo(b * 75, b * 29, b * 80, b * 58, b * 90, b * 85);
    g.closePath();
    od(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 92, b * 117);
    g.bezierCurveTo(b * 98, b * 87, b * 93, b * 78, b * 85, b * 76);
    g.bezierCurveTo(b * 85.5, b * 79.5, b * 85.5, b * 79.5, b * 86, b * 83);
    g.bezierCurveTo(b * 84, b * 85.5, b * 84, b * 85.5, b * 82, b * 88);
    g.bezierCurveTo(b * 90, b * 93, b * 89, b * 100, b * 92, b * 117);
    g.closePath();
    od(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 92, b * 175);
    g.bezierCurveTo(b * 95, b * 135, b * 98, b * 125, b * 109, b * 121);
    g.bezierCurveTo(b * 106, b * 114, b * 104, b * 114, b * 102, b * 113);
    g.bezierCurveTo(b * 103, b * 106, b * 104, b * 103, b * 107, b * 96);
    g.bezierCurveTo(b * 74, b * 108, b * 86, b * 157, b * 92, b * 174);
    g.closePath();
    od(g, d[1], d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 48, b * 169);
    g.bezierCurveTo(b * 42, b * 187, b * 50, b * 193, b * 59, b * 198);
    g.closePath();
    od(g, undefined, d[2], b * 5);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 136, b * 171);
    g.bezierCurveTo(b * 139, b * 186, b * 138, b * 191, b * 124, b * 199);
    g.closePath();
    od(g, undefined, d[2], b * 4);
    hd(g, b * 63, b * 180, b * 15.231546211727817);
    od(g, d[4]);
    hd(g, b * 121, b * 181, b * 15.652475842498529);
    od(g, d[4]);
    hd(g, b * 58, b * 175, b * 5.656854249492381);
    od(g, d[2]);
    hd(g, b * 116, b * 175, b * 5.656854249492381);
    od(g, d[2]);
    return f;
  }
  function xd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(0);
    ad(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    od(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 96.49996948242188, a * 66.79510498046875);
    e.rotate(0);
    ad(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    e.restore();
    od(e, c[1], c[2], a * 4);
    e.translate(a * 2, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119, a * 28);
    e.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
    e.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    e.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    e.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    e.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    e.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    e.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    e.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    e.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    e.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    e.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    e.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
    e.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
    e.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
    e.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
    e.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
    e.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    e.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    e.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    e.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
    e.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    e.closePath();
    od(e, c[3], c[4], a * 4);
    return d;
  }
  function Jd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 191;
    c.height = a * 153;
    d.save();
    d.translate(a * 96.49996948242188, a * 66.79510498046875);
    ad(d, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    d.restore();
    od(d, b[0], b[0], a * 4);
    d.translate(a * 2, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 119, a * 28);
    d.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
    d.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    d.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    d.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    d.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    d.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    d.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    d.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    d.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    d.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    d.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    d.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
    d.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
    d.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
    d.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
    d.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
    d.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    d.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    d.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    d.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
    d.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    d.closePath();
    od(d, b[0], b[0], a * 4);
    d.save();
    d.translate(a * 97.49996948242188, a * 95.12844848632812);
    ad(d, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    d.restore();
    od(d, b[0], b[0], a * 4);
    return c;
  }
  function Md(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 40;
    var a = b * 40;
    e.width = i;
    e.height = a;
    var j = b * i / 2;
    var k = b * a / 2;
    var l = b * 15;
    f.save();
    f.translate(j, k);
    f.globalAlpha = 1;
    hd(f, 0, 0, l);
    od(f, d[0]);
    l = b * 5;
    j = b * 2;
    k = b * 1;
    f.translate(j, k);
    f.globalAlpha = 1;
    hd(f, 0, 0, l);
    od(f, d[1]);
    f.restore();
    return e;
  }
  function Bd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    ad(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    e.restore();
    od(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    ad(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    e.restore();
    od(e, c[1], c[2], a * 4);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26.999969482421875, a * 50.850677490234375);
    e.bezierCurveTo(a * 46.499969482421875, a * 64.85067749023438, a * 46.499969482421875, a * 64.85067749023438, a * 65.99996948242188, a * 78.85067749023438);
    e.bezierCurveTo(a * 80.99996948242188, a * 87.85067749023438, a * 105.99996948242188, a * 82.85067749023438, a * 114.99996948242188, a * 80.85067749023438);
    e.bezierCurveTo(a * 130.99996948242188, a * 69.85067749023438, a * 152.99996948242188, a * 70.85067749023438, a * 166.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 156.99996948242188, a * 52.850677490234375, a * 156.99996948242188, a * 52.850677490234375, a * 146.99996948242188, a * 37.850677490234375);
    e.bezierCurveTo(a * 101.49996948242188, a * 37.350677490234375, a * 101.49996948242188, a * 37.350677490234375, a * 55.999969482421875, a * 36.850677490234375);
    e.closePath();
    od(e, c[2], c[3], a * 4);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 41.999969482421875, a * 50.850677490234375, a * 47.999969482421875, a * 47.850677490234375, a * 56.999969482421875, a * 49.850677490234375);
    e.bezierCurveTo(a * 65.99996948242188, a * 41.850677490234375, a * 76.99996948242188, a * 42.850677490234375, a * 90.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 94.99996948242188, a * 42.850677490234375, a * 104.99996948242188, a * 42.850677490234375, a * 114.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 131.99996948242188, a * 42.850677490234375, a * 142.99996948242188, a * 48.850677490234375, a * 145.99996948242188, a * 56.850677490234375);
    e.bezierCurveTo(a * 160.99996948242188, a * 63.850677490234375, a * 154.99996948242188, a * 69.85067749023438, a * 155.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 141.99996948242188, a * 71.85067749023438, a * 141.99996948242188, a * 71.85067749023438, a * 127.99996948242188, a * 72.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 83.85067749023438, a * 107.99996948242188, a * 82.85067749023438, a * 90.99996948242188, a * 85.85067749023438);
    e.bezierCurveTo(a * 70.99996948242188, a * 83.85067749023438, a * 64.99996948242188, a * 79.85067749023438, a * 53.999969482421875, a * 70.85067749023438);
    e.closePath();
    od(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.999969482421875, a * 65.85067749023438);
    e.bezierCurveTo(a * 36.999969482421875, a * 59.850677490234375, a * 34.999969482421875, a * 60.850677490234375, a * 39.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 47.999969482421875, a * 61.850677490234375, a * 62.999969482421875, a * 76.85067749023438, a * 74.99996948242188, a * 79.85067749023438);
    e.bezierCurveTo(a * 93.99996948242188, a * 85.85067749023438, a * 111.99996948242188, a * 83.85067749023438, a * 124.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 129.99996948242188, a * 67.85067749023438, a * 145.99996948242188, a * 65.85067749023438, a * 159.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 75.85067749023438);
    e.bezierCurveTo(a * 146.99996948242188, a * 72.85067749023438, a * 144.99996948242188, a * 75.85067749023438, a * 143.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 144.99996948242188, a * 86.85067749023438, a * 140.99996948242188, a * 90.85067749023438, a * 137.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 139.99996948242188, a * 72.85067749023438, a * 135.99996948242188, a * 72.85067749023438, a * 133.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 127.99996948242188, a * 88.85067749023438, a * 124.99996948242188, a * 70.85067749023438, a * 116.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 91.85067749023438, a * 96.99996948242188, a * 81.85067749023438, a * 89.99996948242188, a * 90.85067749023438);
    e.bezierCurveTo(a * 85.99996948242188, a * 92.85067749023438, a * 81.99996948242188, a * 95.85067749023438, a * 76.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 67.99996948242188, a * 93.85067749023438, a * 67.99996948242188, a * 91.85067749023438, a * 60.999969482421875, a * 79.85067749023438);
    e.bezierCurveTo(a * 53.999969482421875, a * 71.85067749023438, a * 52.999969482421875, a * 72.85067749023438, a * 46.999969482421875, a * 77.85067749023438);
    e.bezierCurveTo(a * 41.999969482421875, a * 78.85067749023438, a * 42.999969482421875, a * 69.85067749023438, a * 33.999969482421875, a * 65.85067749023438);
    e.closePath();
    od(e, c[5], c[6], a * 4);
    hd(e, a * 68, a * 111.29513549804688, a * 15);
    od(e, c[7], c[8], a * 4);
    hd(e, a * 123, a * 111.29510498046875, a * 15);
    od(e, c[7], c[8], a * 4);
    hd(e, a * 63, a * 106, a * 5);
    od(e, c[9]);
    hd(e, a * 118, a * 106, a * 5);
    od(e, c[9]);
    return d;
  }
  function Ed(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 32;
    var a = c * 32;
    var m = k / 2;
    var n = a / 2;
    i.width = k;
    i.height = a;
    var h = c * 5;
    var g = c * 28;
    var l = h / 2;
    var o = g / 2;
    j.translate(c * 0, c * 0);
    j.translate(m, n);
    if (f == 1) {
      hd(j, 0, 0, c * 10);
      od(j, e[2], e[2], c * 3);
      for (var b = 0; b < 4; b++) {
        ad(j, -l, -o, h, g, c * 2);
        j.rotate(Math.PI / 4);
        od(j, e[2], e[2], c * 4);
      }
    }
    hd(j, 0, 0, c * 10);
    od(j, e[0], e[1], c * 1.5);
    for (b = 0; b < 4; b++) {
      ad(j, -l, -o, h, g, c * 2);
      j.rotate(Math.PI / 4);
      od(j, e[0], e[1], c * 1.5);
    }
    hd(j, 0, 0, c * 10);
    od(j, e[0]);
    hd(j, 0, 0, c * 4);
    od(j, e[2], e[1], c * 1.5);
    j.globalCompositeOperation = "destination-out";
    hd(j, 0, 0, c * 4);
    od(j, e[0], e[1], c * 2);
    j.globalCompositeOperation = "source-over";
    hd(j, 0, 0, c * 4);
    od(j, oh, e[1], c * 2);
    return i;
  }
  function Dd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 202.5, a * 147.5);
    ad(e, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
    e.restore();
    od(e, b[0], b[1], a * 12);
    e.save();
    e.translate(a * 202.5, a * 190.5);
    ad(e, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
    e.restore();
    od(e, b[2], b[1], a * 12);
    e.save();
    e.save();
    e.translate(a * 202.5, a * 233.5);
    ad(e, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
    e.restore();
    od(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 202.5, a * 275);
    ad(e, a * 96.5, a * -21, a * -193, a * 42, a * 0);
    e.restore();
    od(e, b[0], b[1], a * 12);
    e.save();
    e.translate(a * 201, a * 212);
    e.rotate(8.64);
    ad(e, a * -116, a * -22, a * 232, a * 44, a * 10);
    e.restore();
    od(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 203.5, a * 121.5);
    ad(e, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
    e.restore();
    od(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 203.5, a * 299);
    ad(e, a * -115.5, a * -20, a * 231, a * 40, a * 10);
    e.restore();
    od(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 298.5, a * 210);
    ad(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    od(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 108.5, a * 210);
    ad(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
    e.restore();
    od(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 204, a * 121.5);
    ad(e, a * -92, a * -9.5, a * 184, a * 19, a * 10);
    e.restore();
    od(e, b[3], b[3], a * 10);
    e.save();
    e.translate(a * 197, a * 299);
    ad(e, a * 85, a * -9, a * -170, a * 18, a * 10);
    e.restore();
    od(e, b[3], b[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 94, a * 317);
    e.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
    e.closePath();
    od(e, tq, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279, a * 142);
    e.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
    e.closePath();
    od(e, Wb, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 106);
    e.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
    e.closePath();
    od(e, $q, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 281, a * 282);
    e.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
    e.closePath();
    od(e, undefined, b[1], a * 12);
    if (c == 0) {
      e.scale(2, 2);
      e.translate(a * -7, a * 55);
      e.rotate(-0.5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 60, a * 47);
      e.bezierCurveTo(a * 81, a * 46, a * 85, a * 47, a * 83, a * 63);
      e.bezierCurveTo(a * 83, a * 72, a * 83, a * 75, a * 72, a * 73);
      e.bezierCurveTo(a * 68, a * 80, a * 69, a * 82, a * 66, a * 73);
      e.bezierCurveTo(a * 62, a * 81, a * 61, a * 82, a * 59, a * 73);
      e.bezierCurveTo(a * 54, a * 81, a * 55, a * 81, a * 52, a * 74);
      e.bezierCurveTo(a * 38, a * 76, a * 41, a * 74, a * 40, a * 66);
      e.bezierCurveTo(a * 38, a * 45, a * 39, a * 49, a * 59, a * 47);
      e.closePath();
      od(e, b[4], b[4], a * 5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68, a * 54);
      e.bezierCurveTo(a * 75, a * 54, a * 77, a * 62, a * 71, a * 64);
      e.bezierCurveTo(a * 62, a * 65, a * 63, a * 54, a * 68, a * 54);
      e.closePath();
      od(e, b[3]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 50, a * 55);
      e.bezierCurveTo(a * 57, a * 55, a * 58, a * 65, a * 52, a * 65);
      e.bezierCurveTo(a * 44, a * 66, a * 44, a * 54, a * 50, a * 55);
      e.closePath();
      od(e, b[3]);
    } else if (c == 1) {
      e.scale(0.6, 0.6);
      e.translate(a * 185, a * 165);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 108, a * 56);
      e.bezierCurveTo(a * 136, a * 58, a * 203, a * 69, a * 234, a * 75);
      e.bezierCurveTo(a * 246, a * 77, a * 247, a * 78, a * 245, a * 90);
      e.bezierCurveTo(a * 238, a * 143, a * 228, a * 197, a * 214, a * 259);
      e.bezierCurveTo(a * 212, a * 267, a * 209, a * 270, a * 189, a * 268);
      e.bezierCurveTo(a * 142, a * 264, a * 106, a * 260, a * 75, a * 253);
      e.bezierCurveTo(a * 60, a * 250, a * 64, a * 250, a * 66, a * 221);
      e.bezierCurveTo(a * 71, a * 168, a * 87, a * 95, a * 98, a * 67);
      e.bezierCurveTo(a * 101, a * 57, a * 103, a * 56, a * 106, a * 56);
      e.closePath();
      od(e, b[4], b[4], a * 20);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 112, a * 72);
      e.bezierCurveTo(a * 132, a * 73, a * 227, a * 85, a * 226, a * 91);
      e.bezierCurveTo(a * 231, a * 89, a * 217, a * 196, a * 200, a * 250);
      e.bezierCurveTo(a * 196, a * 254, a * 175, a * 249, a * 166, a * 249);
      e.bezierCurveTo(a * 91, a * 241, a * 82, a * 236, a * 83, a * 232);
      e.bezierCurveTo(a * 90, a * 144, a * 108, a * 71, a * 111, a * 72);
      e.closePath();
      od(e, undefined, b[0], a * 13);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 132, a * 117);
      e.bezierCurveTo(a * 171, a * 86, a * 191, a * 101, a * 188, a * 134);
      e.bezierCurveTo(a * 185, a * 154, a * 170, a * 158, a * 153, a * 158);
      e.bezierCurveTo(a * 143, a * 172, a * 146, a * 180, a * 147, a * 193);
      od(e, undefined, b[0], a * 20);
      hd(e, a * 142, a * 221, a * 16.1245154965971);
      od(e, b[0]);
    }
    return d;
  }
  function Id(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 200;
    var f = b * 200;
    c.width = e;
    c.height = f;
    var g = Nu(0.35, zl, ["#0e3022", "#0b8052", "#077b49"]);
    d.drawImage(g, 10, 10);
    g = Fu(0.9, Zq, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 21, 20);
    g = Fu(0.9, tg, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 38, 28);
    g = Fu(0.9, Gl, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 15, 37);
    g = Fu(0.9, Zq, ["#3d2a6e", "#8255b5"]);
    d.drawImage(g, 32, 45);
    return c;
  }
  function Sd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 238;
    c.height = a * 230;
    d.translate(a * -93, a * -110 + a * 5);
    d.globalAlpha = 0.3;
    hd(d, a * 213.5, a * 256.75, a * 75);
    od(d, b[5]);
    hd(d, a * 213.5, a * 175.75, a * 25);
    od(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.translate(0, -5);
    d.globalAlpha = 1;
    hd(d, a * 213.5, a * 256.75, a * 75);
    od(d, b[3]);
    hd(d, a * 213.5, a * 175.75, a * 25);
    od(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    hd(d, a * 213.5, a * 256.75, a * 70);
    od(d, b[0]);
    hd(d, a * 213.5, a * 175.75, a * 20);
    od(d, b[0]);
    hd(d, a * 222, a * 166, a * 5);
    d.fillStyle = b[2];
    d.fill();
    hd(d, a * 205, a * 166, a * 5);
    d.fillStyle = b[2];
    d.fill();
    hd(d, a * 206.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    hd(d, a * 223.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    d.save();
    d.translate(a * 213.5, a * 293.75);
    d.rotate(0.76);
    ad(d, a * -22, a * -21, a * 44, a * 42, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    d.save();
    d.translate(a * 212.5, a * 258.25);
    d.rotate(0.8);
    ad(d, a * -15, a * -14.5, a * 30, a * 29, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    return c;
  }
  function Qd(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 100;
    var j = c * 100;
    var a = i / 2;
    var k = j / 2;
    e.width = i;
    e.height = j;
    var m = c * 5;
    var h = c * 28;
    var g = m / 2;
    var l = h / 2;
    f.translate(a, k);
    for (var n = 0; n < 4; n++) {
      ad(f, -g, -l, m, h, c * 2);
      f.rotate(Math.PI / 4);
      od(f, d);
    }
    f.arc(0, 0, c * 10, 0, Math.PI * 2);
    od(f, d);
    f.globalCompositeOperation = "destination-out";
    hd(f, 0, 0, c * 4);
    f.fill();
    return e;
  }
  function _d(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 52;
    d.height = a * 65;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.833328247070312, a * 12.078125);
    e.bezierCurveTo(a * 15.333328247070312, a * 28.078125, a * 15.333328247070312, a * 28.078125, a * 20.833328247070312, a * 44.078125);
    e.closePath();
    od(e, jn, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 7.8333282470703125, a * 20.078125);
    e.bezierCurveTo(a * 16.833328247070312, a * 32.578125, a * 16.833328247070312, a * 32.578125, a * 25.833328247070312, a * 45.078125);
    e.closePath();
    od(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 26.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 11.078125, a * 16.833328247070312, a * 8.078125, a * 14.833328247070312, a * 7.078125);
    e.bezierCurveTo(a * 11.833328247070312, a * 17.078125, a * 13.833328247070312, a * 22.078125, a * 23.833328247070312, a * 27.078125);
    e.closePath();
    od(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.83332824707031, a * 8.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 27.078125, a * 28.833328247070312, a * 27.078125, a * 23.833328247070312, a * 28.078125);
    e.bezierCurveTo(a * 21.833328247070312, a * 14.078125, a * 26.833328247070312, a * 11.078125, a * 35.83332824707031, a * 8.078125);
    e.closePath();
    od(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.833328247070312, a * 39.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 29.078125, a * 14.833328247070312, a * 27.078125, a * 5.8333282470703125, a * 29.078125);
    e.bezierCurveTo(a * 9.833328247070312, a * 39.078125, a * 16.833328247070312, a * 42.078125, a * 25.833328247070312, a * 40.078125);
    e.closePath();
    od(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.83332824707031, a * 23.078125);
    e.bezierCurveTo(a * 35.83332824707031, a * 35.078125, a * 31.833328247070312, a * 37.078125, a * 25.833328247070312, a * 36.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 24.078125, a * 33.83332824707031, a * 21.078125, a * 42.83332824707031, a * 23.078125);
    e.closePath();
    od(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 24.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 34.078125, a * 23.833328247070312, a * 40.078125, a * 27.833328247070312, a * 43.078125);
    e.bezierCurveTo(a * 37.33332824707031, a * 28.078125, a * 37.33332824707031, a * 28.078125, a * 46.83332824707031, a * 13.078125);
    od(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38.83332824707031, a * 14.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 24.078125, a * 34.83332824707031, a * 24.078125, a * 30.833328247070312, a * 34.078125);
    od(e, md, c[1], a * 2);
    return d;
  }
  function Rd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 55;
    var a = b * 55;
    var h = b * 8;
    e.width = g;
    e.height = a;
    f.translate(b * -65, b * -55 + h);
    f.globalAlpha = 1;
    f.beginPath();
    f.moveTo(b * 95, b * 60);
    f.bezierCurveTo(b * 107, b * 62, b * 110, b * 73, b * 107, b * 79);
    f.bezierCurveTo(b * 104, b * 85, b * 85, b * 93, b * 81, b * 88);
    f.bezierCurveTo(b * 74, b * 80, b * 85, b * 60, b * 95, b * 60);
    f.closePath();
    od(f, d[0], d[1], 3);
    f.globalAlpha = 1;
    f.beginPath();
    f.moveTo(b * 91, b * 70);
    f.bezierCurveTo(b * 91, b * 75, b * 100, b * 76, b * 100, b * 73);
    f.bezierCurveTo(b * 100, b * 69, b * 89, b * 65, b * 91, b * 70);
    f.closePath();
    od(f, d[2], d[3], 3);
    return e;
  }
  function Fd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 255);
    e.bezierCurveTo(a * 113, a * 243, a * 179, a * 210, a * 219, a * 196);
    e.bezierCurveTo(a * 252, a * 203, a * 288, a * 215, a * 318, a * 233);
    e.bezierCurveTo(a * 304, a * 254, a * 258, a * 273, a * 215, a * 296);
    e.bezierCurveTo(a * 161, a * 287, a * 119, a * 270, a * 102, a * 257);
    e.closePath();
    od(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 258);
    e.bezierCurveTo(a * 99, a * 272.5, a * 99, a * 272.5, a * 99, a * 287);
    e.bezierCurveTo(a * 166, a * 319, a * 193, a * 320, a * 212, a * 324);
    e.bezierCurveTo(a * 292, a * 286, a * 312, a * 271, a * 319, a * 263);
    e.bezierCurveTo(a * 320, a * 249, a * 320, a * 241, a * 318, a * 234);
    e.bezierCurveTo(a * 300, a * 254, a * 254, a * 277, a * 216, a * 294);
    e.bezierCurveTo(a * 190, a * 296, a * 135, a * 276, a * 102, a * 258);
    e.closePath();
    od(e, c[2], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 323);
    e.bezierCurveTo(a * 211.5, a * 310.5, a * 211.5, a * 310.5, a * 211, a * 298);
    e.closePath();
    od(e, undefined, c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 210);
    e.bezierCurveTo(a * 286, a * 210, a * 331, a * 254, a * 212, a * 276);
    e.bezierCurveTo(a * 108, a * 276, a * 112, a * 222, a * 213, a * 208);
    e.closePath();
    od(e, c[3], c[4], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 200);
    e.bezierCurveTo(a * 126, a * 216, a * 177, a * 232, a * 213, a * 237);
    e.bezierCurveTo(a * 266, a * 218, a * 288, a * 209, a * 318, a * 190);
    e.bezierCurveTo(a * 269, a * 164, a * 239, a * 158, a * 214, a * 153);
    e.bezierCurveTo(a * 148, a * 172, a * 131, a * 182, a * 98, a * 200);
    e.closePath();
    od(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97, a * 204);
    e.bezierCurveTo(a * 97, a * 215.5, a * 97, a * 215.5, a * 97, a * 227);
    e.bezierCurveTo(a * 148, a * 250, a * 179, a * 256, a * 212, a * 262);
    e.bezierCurveTo(a * 268, a * 244, a * 281, a * 233, a * 318, a * 214);
    e.bezierCurveTo(a * 318, a * 203, a * 318, a * 203, a * 318, a * 192);
    e.bezierCurveTo(a * 250, a * 225, a * 236, a * 231, a * 214, a * 239);
    e.bezierCurveTo(a * 158, a * 228, a * 126, a * 215, a * 99, a * 201);
    e.closePath();
    od(e, c[2], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 260);
    e.bezierCurveTo(a * 212, a * 251.5, a * 212, a * 251.5, a * 212, a * 243);
    e.closePath();
    od(e, undefined, c[1], a * 14);
    hd(e, a * 161, a * 201, a * 13);
    od(e, c[5]);
    hd(e, a * 216, a * 205, a * 8.06225774829855);
    od(e, c[5]);
    hd(e, a * 216, a * 175, a * 6.708203932499369);
    od(e, c[5]);
    hd(e, a * 271, a * 191, a * 5.0990195135927845);
    od(e, c[5]);
    hd(e, a * 206, a * 180, a * 11.180339887498949);
    od(e, c[5]);
    return d;
  }
  function jd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 188;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    od(d, b[0], b[0], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    od(d, b[0], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
    d.closePath();
    od(d, b[0], b[0], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    d.closePath();
    od(d, b[0], b[0], a * 2);
    d.globalAlpha = 1;
    d.translate(0, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    od(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    od(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    od(d, ct, b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    od(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    od(d, b[1], b[2], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 57.00567626953125, a * 68.53410339355469);
    d.bezierCurveTo(a * 63.00567626953125, a * 69.53410339355469, a * 69.00567626953125, a * 66.53410339355469, a * 73.00567626953125, a * 60.53410339355469);
    d.bezierCurveTo(a * 66.00567626953125, a * 47.53410339355469, a * 61.00567626953125, a * 42.53410339355469, a * 58.00567626953125, a * 49.53410339355469);
    d.bezierCurveTo(a * 56.00567626953125, a * 59.53410339355469, a * 56.00567626953125, a * 64.53410339355469, a * 57.00567626953125, a * 67.53410339355469);
    d.closePath();
    od(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115.00567626953125, a * 59.715911865234375);
    d.bezierCurveTo(a * 119.00567626953125, a * 48.715911865234375, a * 126.00567626953125, a * 41.715911865234375, a * 129.00567626953125, a * 48.715911865234375);
    d.bezierCurveTo(a * 131.00567626953125, a * 56.715911865234375, a * 133.00567626953125, a * 71.71591186523438, a * 127.00567626953125, a * 68.71591186523438);
    d.bezierCurveTo(a * 120.00567626953125, a * 67.71591186523438, a * 114.00567626953125, a * 59.715911865234375, a * 116.00567626953125, a * 58.715911865234375);
    d.closePath();
    od(d, b[3]);
    hd(d, a * 77, a * 107, a * 6);
    od(d, b[2]);
    hd(d, a * 110, a * 107, a * 6);
    od(d, b[2]);
    hd(d, a * 75, a * 105, a * 3);
    od(d, b[4]);
    hd(d, a * 108, a * 105, a * 3);
    od(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 88.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 93.00567626953125, a * 137.4431915283203, a * 96.00567626953125, a * 138.4431915283203, a * 100.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 103.00567626953125, a * 143.4431915283203, a * 101.00567626953125, a * 149.4431915283203, a * 95.00567626953125, a * 148.4431915283203);
    d.bezierCurveTo(a * 85.00567626953125, a * 148.4431915283203, a * 86.00567626953125, a * 145.4431915283203, a * 88.00567626953125, a * 142.4431915283203);
    d.closePath();
    od(d, b[1]);
    return c;
  }
  function Ld(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 185;
    c.height = a * 240;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 137);
    d.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    d.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    d.closePath();
    od(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 53, a * 181);
    d.bezierCurveTo(a * 30, a * 164, a * 19, a * 150, a * 11, a * 136);
    d.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    d.closePath();
    od(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 63, a * 208);
    d.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    d.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    d.closePath();
    od(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 170);
    d.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    d.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    d.closePath();
    od(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 39, a * 140);
    d.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    d.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    d.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    d.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    d.closePath();
    od(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 95);
    d.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
    d.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
    d.bezierCurveTo(a * 92, a * 5, a * 83, a * 16, a * 78, a * 29);
    d.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
    d.closePath();
    od(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 86);
    d.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
    d.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * 16);
    d.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
    d.closePath();
    od(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 117);
    d.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
    d.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
    d.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
    d.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
    d.closePath();
    od(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 175);
    d.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
    d.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
    d.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
    d.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
    d.closePath();
    od(d, b[0]);
    return c;
  }
  function Gd(f, e, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var n = (d = f * 125) / 2;
    var a = (r = f * 95) / 2;
    var o = f * 10;
    var p = f * 8;
    var h = f * 112;
    var g = f * 82;
    var l = h / 2;
    var q = g / 2;
    var b = f * 4;
    j.width = d;
    j.height = r;
    k.translate(n - f * 4, a + f * 4);
    k.globalAlpha = e ? 0.5 : 1;
    ad(k, -l, -q, h, g, o);
    od(k, i[0]);
    k.globalAlpha = 1;
    k.translate(0, -p);
    ad(k, -l, -q, h, g, o);
    od(k, i[1], i[2], b);
    var d = f * 55;
    var r = f * 45;
    o = 5;
    k.translate(f * -40, f * -30);
    ad(k, 0, 0, d, r, o);
    od(k, i[3]);
    var t = Qd(f * 0.7, i[3]);
    k.drawImage(t, f * 45, f * -25);
    t = Qd(f * 0.7, i[3]);
    k.drawImage(t, f * 45, f * 15);
    t = Qd(f * 1.2, i[3]);
    k.drawImage(t, f * 28, f * -30);
    d = f * 15;
    r = f * 70;
    o = f * 5;
    k.translate(f * 78, f * -5);
    ad(k, 0, 0, d, r, o);
    od(k, i[4]);
    d = f * 9;
    r = f * 50;
    o = f * 3;
    k.translate(f * -20, f * 20);
    k.rotate(Math.PI / 5);
    k.globalAlpha = 0.6;
    ad(k, 0, 0, d, r, o);
    od(k, i[5]);
    k.translate(f * -20, f * 29);
    k.rotate(Math.PI / 5);
    k.globalAlpha = 0.6;
    k.beginPath();
    k.lineJoin = "round";
    k.moveTo(0, 0);
    k.lineTo(0, f * 30);
    k.lineTo(f * 30, f * 30);
    k.closePath();
    od(k, null, i[5], f * 8);
    return j;
  }
  function Wd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 85, a * 237);
    e.rotate(1.5707963267948966);
    ud(e, 6, a * 54.585977194239184, a * 1);
    e.restore();
    od(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 178, a * 238);
    e.rotate(1.5707963267948966);
    ud(e, 6, a * 52.53573932334064, a * 1);
    e.restore();
    od(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 270, a * 239);
    e.rotate(1.5707963267948966);
    ud(e, 6, a * 53.58058329516393, a * 1);
    e.restore();
    od(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 222, a * 312);
    e.rotate(1.5707963267948966);
    ud(e, 6, a * 52.53573932334064, a * 1);
    e.restore();
    od(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 317, a * 159);
    e.rotate(1.5707963267948966);
    ud(e, 6, a * 57.63465889766331, a * 1);
    e.restore();
    od(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 223.5, a * 139.0625);
    e.rotate(1.5707963267948966);
    ud(e, 6, a * 51.66236541235796, a * 1);
    e.restore();
    od(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 132.5, a * 137.0625);
    e.rotate(1.5707963267948966);
    ud(e, 6, a * 52.009614495783374, a * 1);
    e.restore();
    od(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 178.5, a * 58.0625);
    e.rotate(1.5707963267948966);
    ud(e, 6, a * 53.16013544000805, a * 1);
    e.restore();
    od(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 177.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    ud(e, 6, a * 50, a * 1);
    e.restore();
    od(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(1.5707963267948966);
    ud(e, 6, a * 54, a * 1);
    e.restore();
    od(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 319.5, a * 138.0625);
    e.rotate(1.5707963267948966);
    ud(e, 6, a * 55.08175741568164, a * 1);
    e.restore();
    od(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 269.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    ud(e, 6, a * 54.589376255824725, a * 1);
    e.restore();
    od(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 221.5, a * 293.0625);
    e.rotate(0.5235987755982988);
    ud(e, 6, a * 49.49747468305833, a * 1);
    e.restore();
    od(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 342.0625);
    e.bezierCurveTo(a * 221.5, a * 350.5625, a * 221.5, a * 350.5625, a * 221.5, a * 359.0625);
    e.closePath();
    od(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 270.0625);
    e.bezierCurveTo(a * 84.5, a * 277.0625, a * 84.5, a * 277.0625, a * 84.5, a * 284.0625);
    e.closePath();
    od(e, undefined, c[2], a * 12);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    ud(e, 6, a * 30, a * 15);
    e.restore();
    od(e, c[3]);
    e.save();
    e.translate(a * 177.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    ud(e, 6, a * 30, a * 15);
    e.restore();
    od(e, c[3]);
    e.save();
    e.translate(a * 222.5, a * 294.0625);
    e.rotate(0.5235987755982988);
    ud(e, 6, a * 30, a * 15);
    e.restore();
    od(e, c[3]);
    e.save();
    e.translate(a * 270.5, a * 216.0625);
    e.rotate(0.5235987755982988);
    ud(e, 6, a * 30, a * 15);
    e.restore();
    od(e, c[3]);
    e.save();
    e.translate(a * 320.5, a * 134.0625);
    e.rotate(0.5235987755982988);
    ud(e, 6, a * 30, a * 15);
    e.restore();
    od(e, c[3]);
    e.save();
    e.translate(a * 224.5, a * 138.0625);
    e.rotate(0.5235987755982988);
    ud(e, 6, a * 30, a * 15);
    e.restore();
    od(e, c[3]);
    e.save();
    e.translate(a * 133.5, a * 137.0625);
    e.rotate(0.5235987755982988);
    ud(e, 6, a * 30, a * 15);
    e.restore();
    od(e, c[3]);
    e.save();
    e.translate(a * 178.5, a * 56.0625);
    e.rotate(0.5235987755982988);
    ud(e, 6, a * 30, a * 15);
    e.restore();
    od(e, c[3]);
    return d;
  }
  function qd(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 85;
    var j = c * 115;
    var a = c * 6;
    e.width = i;
    e.height = j;
    f.translate(c * -130, c * -60 + a);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    f.closePath();
    od(f, d[0]);
    f.translate(0, -a);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    f.closePath();
    od(f, d[1], d[2], 4);
    var k = c * 155;
    var m = c * 133;
    var h = c * 10;
    var g = c * 3;
    var l = k + c * -3;
    var n = m + c * -5;
    f.save();
    f.translate(k, m);
    f.globalAlpha = 1;
    hd(f, 0, 0, h);
    od(f, d[3]);
    f.restore();
    f.save();
    f.translate(l, n);
    f.globalAlpha = 1;
    hd(f, 0, 0, g);
    od(f, d[4]);
    f.restore();
    f.save();
    f.translate(k + c * 27, m);
    f.globalAlpha = 1;
    hd(f, 0, 0, h);
    od(f, d[3]);
    f.restore();
    f.save();
    f.translate(c * 27 + l, n);
    f.globalAlpha = 1;
    hd(f, 0, 0, g);
    od(f, d[4]);
    return e;
  }
  const Nd = 12;
  function Od(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    ud(e, 7, a * 9.848857801796104, a * 5);
    e.restore();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    ud(e, 7, a * 9.848857801796104, a * 5);
    e.restore();
    od(e, c[8], c[9], a * 4);
    return d;
  }
  function Hd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 75;
    var a = b * 55;
    e.width = g;
    e.height = a;
    f.translate(b * -30, b * -40);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 67, b * 56, b * 72, b * 71, b * 72, b * 71);
    f.bezierCurveTo(b * 72, b * 71, b * 84, b * 70, b * 75, b * 82);
    f.bezierCurveTo(b * 70, b * 88, b * 61, b * 89, b * 58, b * 89);
    f.bezierCurveTo(b * 55, b * 89, b * 40, b * 89, b * 46, b * 77);
    f.bezierCurveTo(b * 46, b * 77, b * 43, b * 63, b * 43, b * 63);
    f.bezierCurveTo(b * 35, b * 61, b * 35, b * 53, b * 42, b * 47);
    f.bezierCurveTo(b * 48, b * 42, b * 62, b * 41, b * 66, b * 43);
    f.bezierCurveTo(b * 70, b * 45, b * 72, b * 48, b * 67, b * 56);
    f.closePath();
    od(f, d[0]);
    f.beginPath();
    f.bezierCurveTo(b * 68, b * 61, b * 72, b * 76, b * 72, b * 76);
    f.bezierCurveTo(b * 65, b * 85, b * 61, b * 85, b * 49, b * 83);
    f.bezierCurveTo(b * 49, b * 83, b * 44, b * 63, b * 44, b * 63);
    f.bezierCurveTo(b * 54, b * 63, b * 60, b * 63, b * 67, b * 55);
    f.closePath();
    od(f, d[1]);
    f.beginPath();
    f.moveTo(b * 69, b * 65);
    f.bezierCurveTo(b * 70, b * 61, b * 81, b * 66, b * 86, b * 66);
    f.bezierCurveTo(b * 90, b * 66, b * 97, b * 63, b * 97, b * 56);
    f.bezierCurveTo(b * 97, b * 50, b * 93, b * 47, b * 88, b * 44);
    od(f, false, d[1], 2);
    f.beginPath();
    f.moveTo(b * 50, b * 48);
    f.bezierCurveTo(b * 43, b * 52, b * 50, b * 54, b * 51, b * 54);
    f.bezierCurveTo(b * 54, b * 54, b * 59, b * 52, b * 59, b * 49);
    f.bezierCurveTo(b * 59, b * 48, b * 55, b * 46, b * 50, b * 48);
    od(f, d[2]);
    return e;
  }
  function Ud(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    od(e, undefined, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    od(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    od(e, Pn, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    od(e, oj, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    od(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    od(e, undefined, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    od(e, undefined, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    od(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    od(e, da, c[6], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    od(e, undefined, c[0], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    od(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    od(e, undefined, c[6], a * 4);
    return d;
  }
  function Yd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.translate(a * 5, a * 5);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    ud(e, 7, a * 42.15447781671598, a * 10);
    e.restore();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    ud(e, 7, a * 42.15447781671598, a * 10);
    e.restore();
    od(e, c[1], c[2], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    ud(e, 7, a * 30.463092423455635, a * 10);
    e.restore();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    ud(e, 7, a * 30.463092423455635, a * 10);
    e.restore();
    od(e, c[3], c[4], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    hd(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    hd(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    od(e, c[5], c[6], a * 4);
    return d;
  }
  function Kd(f, e, i, j, k) {
    var n = document.createElement("canvas");
    var a = n.getContext("2d");
    var o = f * 70;
    var p = f * 70;
    var h = f * 10;
    var g = f * 5;
    n.width = o;
    n.height = p + g;
    for (var l = 0; l < e.length; l++) {
      var q = e[l];
      a.globalAlpha = q.a;
      var r = q.f(i, false, q.c);
      a.save();
      a.translate(o / 2 + f * q.x, p / 2 + q.y * f);
      a.rotate(q.r);
      a.drawImage(r, -r.width / 2, -r.height / 2);
      a.restore();
    }
    var s = [];
    for (l = 0; j.length > l; l++) {
      var t = document.createElement("canvas");
      var v = t.getContext("2d");
      t.width = o;
      t.height = p + g;
      v.globalAlpha = k / 2;
      if (l == 2) {
        ad(v, 0, g, o, p, h);
      } else {
        ad(v, 0, 0, o, p + g, h);
      }
      od(v, "#081a19");
      v.globalAlpha = k;
      ad(v, 0, l == 2 ? g : 0, o, p, h);
      od(v, j[l]);
      v.globalAlpha = 1;
      if (l == 2) {
        v.drawImage(n, 0, g);
      } else {
        v.drawImage(n, 0, 0);
      }
      s.push(Rq(t));
    }
    return s;
  }
  function Vd(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 195;
    var a = c * 190;
    var m = k / 2;
    var n = a / 2;
    i.width = k;
    i.height = a;
    var h = c * 10;
    var g = c * 35;
    var l = c * 150;
    var o = g / 2;
    var b = l / 2;
    var d = c * 4;
    j.translate(m - c * 5, n - c * 5);
    j.rotate(-Math.PI / 1.25);
    j.globalAlpha = 1;
    ad(j, -o, -b, g, l, h);
    od(j, f[0], f[1], d);
    j.translate(0, 0);
    j.rotate(Math.PI / 3);
    j.globalAlpha = 1;
    ad(j, -o, -b, g, l, h);
    od(j, f[0], f[1], d);
    j.translate(0, 5);
    ad(j, -o / 2, -b / 2, g / 2, l / 3, h - 2);
    od(j, f[1]);
    return i;
  }
  const Xd = String.fromCharCode;
  const Zd = Xd(101);
  const $d = Xd(118);
  const Pt = Xd(97);
  const Qt = Xd(108);
  const St = 12;
  function Tt(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 193;
    var a = c * 198;
    var m = c * 140;
    var n = c * 90;
    i.width = k;
    i.height = a;
    var h = c * 10;
    var g = c * 25;
    var l = c * 180;
    var o = g / 2;
    var b = l / 2;
    var d = c * 4;
    j.translate(c * -25, c * 1);
    j.translate(m, n);
    j.rotate(-Math.PI / 5);
    ad(j, -o, -b, g, l, h);
    od(j, f[0], f[1], d);
    j.translate(c * -30, c * -25);
    j.rotate(Math.PI / 3);
    ad(j, -o, -b, g, l, h);
    od(j, f[0], f[1], d);
    j.translate(c * 35, c * 30);
    j.rotate(Math.PI / 3);
    ad(j, -o, -b, g, l, h);
    od(j, f[0], f[1], d);
    return i;
  }
  function Ut(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 145;
    var a = b * 145;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    var h = b * 70;
    f.translate(j, k);
    f.globalAlpha = 0.4;
    hd(f, 0, 0, h);
    od(f, d[0]);
    h = b * 50;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    hd(f, 0, 0, h);
    od(f, d[0]);
    h = b * 35;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    hd(f, 0, 0, h);
    od(f, d[1]);
    h = b * 20;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    hd(f, 0, 0, h);
    od(f, d[2]);
    return e;
  }
  function Vt(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 205;
    var a = b * 205;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    var h = b * 100;
    f.translate(j, k);
    f.globalAlpha = 1;
    hd(f, 0, 0, h);
    od(f, d[0]);
    return e;
  }
  function Wt(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 135;
    var a = c * 190;
    var m = k / 2;
    var n = a / 2;
    i.width = k;
    i.height = a;
    var h = c * 10;
    var g = c * 25;
    var l = c * 180;
    var o = g / 2;
    var b = l / 2;
    var d = c * 4;
    j.translate(m, n);
    j.rotate(-Math.PI / 5);
    j.globalAlpha = 1;
    ad(j, -o, -b, g, l, h);
    od(j, f[0], f[1], d);
    j.translate(0, 0);
    j.rotate(Math.PI / 5);
    j.globalAlpha = 1;
    ad(j, -o, -b, g, l, h);
    od(j, f[0], f[1], d);
    return i;
  }
  const Yt = 17;
  function Zt(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 40;
    var g = b * 40;
    var a = b * 16;
    var h = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2);
    e.globalAlpha = 1;
    hd(e, 0, 0, a);
    od(e, c[0], c[1], h);
    return d;
  }
  function $t(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var a = b * 32;
    var h = b * 4;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2 + b * 10);
    e.globalAlpha = 0.5;
    hd(e, 0, 0, a);
    od(e, c[0], c[0]);
    e.translate(0, b * -8);
    e.globalAlpha = 1;
    hd(e, 0, 0, a);
    od(e, c[1], c[2], h);
    return d;
  }
  function _t(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 370;
    var a = b * 370;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    var h = b * 180;
    f.globalAlpha = 0.2;
    hd(f, j, k, h);
    od(f, d[0]);
    return e;
  }
  function au(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, a * 8);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.translate(a * 7, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    od(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
    e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    od(e, undefined, c[2], a * 4);
    hd(e, a * 18, a * 38, a * 14.866068747318506);
    od(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    od(e, c[1], c[2], a * 4);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    od(e, c[4], c[5], a * 4);
    return d;
  }
  ;
  function bu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(0, a * 8);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.translate(a * 7, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    od(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
    e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    od(e, undefined, c[2], a * 4);
    hd(e, a * 18, a * 38, a * 14.866068747318506);
    od(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    od(e, c[1], c[2], a * 4);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 74);
    e.bezierCurveTo(a * 38, a * 77.5, a * 38, a * 77.5, a * 49, a * 81);
    e.bezierCurveTo(a * 54.5, a * 75.5, a * 54.5, a * 75.5, a * 60, a * 70);
    e.bezierCurveTo(a * 64, a * 72, a * 64, a * 72, a * 68, a * 74);
    e.bezierCurveTo(a * 80.5, a * 67.5, a * 80.5, a * 67.5, a * 93, a * 61);
    e.bezierCurveTo(a * 104.5, a * 68, a * 104.5, a * 68, a * 116, a * 75);
    e.bezierCurveTo(a * 120.5, a * 72.5, a * 120.5, a * 72.5, a * 125, a * 70);
    e.bezierCurveTo(a * 129, a * 75, a * 129, a * 75, a * 133, a * 80);
    e.bezierCurveTo(a * 145.5, a * 76.5, a * 145.5, a * 76.5, a * 158, a * 73);
    e.bezierCurveTo(a * 158, a * 87, a * 158, a * 93, a * 155, a * 95);
    e.bezierCurveTo(a * 152.5, a * 96, a * 152.5, a * 96, a * 150, a * 97);
    e.bezierCurveTo(a * 121, a * 85, a * 108, a * 86, a * 93, a * 85);
    e.bezierCurveTo(a * 64, a * 85, a * 52, a * 95, a * 38, a * 99);
    e.bezierCurveTo(a * 36, a * 98.5, a * 36, a * 98.5, a * 34, a * 98);
    e.bezierCurveTo(a * 25, a * 98, a * 27, a * 91, a * 27, a * 76);
    e.closePath();
    od(e, c[6], c[7], a * 6);
    return d;
  }
  const cu = 7;
  const du = 4;
  function eu(c, e, f, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var a = c * 210;
    var m = c * 205;
    var n = c * 30;
    var h = c * 20;
    var g = c * 200;
    var l = c * 180;
    var o = g / 2;
    var b = l / 2;
    var d = 4;
    j.width = a;
    j.height = m;
    j.width = c * 419;
    j.height = c * 412;
    if (i == 1) {
      k.save();
      k.translate(c * 10, c * 0);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 117.99996948242188, c * 216.40621948242188);
      k.bezierCurveTo(c * 86.99996948242188, c * 221.40621948242188, c * 74.99996948242188, c * 217.40621948242188, c * 60.999969482421875, c * 205.40621948242188);
      od(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 114.99996948242188, c * 227.40621948242188);
      k.bezierCurveTo(c * 90.99996948242188, c * 233.40621948242188, c * 66.99996948242188, c * 228.40621948242188, c * 43.999969482421875, c * 225.40621948242188);
      od(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 110.99996948242188, c * 236.40621948242188);
      k.bezierCurveTo(c * 94.99996948242188, c * 244.40621948242188, c * 79.99996948242188, c * 249.40621948242188, c * 60.999969482421875, c * 249.40621948242188);
      od(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 111.99996948242188, c * 206.29513549804688);
      k.bezierCurveTo(c * 91.99996948242188, c * 206.29513549804688, c * 87.99996948242188, c * 201.29513549804688, c * 79.99996948242188, c * 192.29513549804688);
      od(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 109.99996948242188, c * 249.18402099609375);
      k.bezierCurveTo(c * 97.99996948242188, c * 263.18402099609375, c * 85.99996948242188, c * 271.18402099609375, c * 65.99996948242188, c * 277.18402099609375);
      od(k, Wb, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 105.99996948242188, c * 192.18402099609375);
      k.bezierCurveTo(c * 99.49996948242188, c * 197.68402099609375, c * 99.49996948242188, c * 197.68402099609375, c * 92.99996948242188, c * 203.18402099609375);
      k.bezierCurveTo(c * 95.99996948242188, c * 213.18402099609375, c * 95.99996948242188, c * 215.18402099609375, c * 89.99996948242188, c * 219.18402099609375);
      k.bezierCurveTo(c * 91.99996948242188, c * 223.18402099609375, c * 91.99996948242188, c * 226.18402099609375, c * 87.99996948242188, c * 230.18402099609375);
      k.bezierCurveTo(c * 89.99996948242188, c * 234.18402099609375, c * 91.99996948242188, c * 237.18402099609375, c * 90.99996948242188, c * 244.18402099609375);
      k.bezierCurveTo(c * 96.99996948242188, c * 252.18402099609375, c * 96.99996948242188, c * 256.18402099609375, c * 95.99996948242188, c * 262.18402099609375);
      k.bezierCurveTo(c * 106.49996948242188, c * 264.18402099609375, c * 106.49996948242188, c * 264.18402099609375, c * 116.99996948242188, c * 266.18402099609375);
      od(k, rh, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 104.99996948242188, c * 183.29513549804688);
      k.bezierCurveTo(c * 99.99996948242188, c * 193.29513549804688, c * 93.99996948242188, c * 195.29513549804688, c * 89.99996948242188, c * 201.29513549804688);
      k.bezierCurveTo(c * 86.99996948242188, c * 212.29513549804688, c * 85.99996948242188, c * 214.29513549804688, c * 81.99996948242188, c * 215.29513549804688);
      k.bezierCurveTo(c * 83.99996948242188, c * 223.29513549804688, c * 83.99996948242188, c * 227.29513549804688, c * 79.99996948242188, c * 230.29513549804688);
      k.bezierCurveTo(c * 83.99996948242188, c * 235.29513549804688, c * 84.99996948242188, c * 240.29513549804688, c * 79.99996948242188, c * 246.29513549804688);
      k.bezierCurveTo(c * 86.99996948242188, c * 251.29513549804688, c * 91.99996948242188, c * 256.2951354980469, c * 89.99996948242188, c * 266.2951354980469);
      k.bezierCurveTo(c * 102.99996948242188, c * 269.2951354980469, c * 102.99996948242188, c * 269.2951354980469, c * 115.99996948242188, c * 272.2951354980469);
      od(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 107.99996948242188, c * 177.85067749023438);
      k.bezierCurveTo(c * 95.99996948242188, c * 187.35067749023438, c * 95.99996948242188, c * 187.35067749023438, c * 83.99996948242188, c * 196.85067749023438);
      k.bezierCurveTo(c * 82.99996948242188, c * 203.85067749023438, c * 80.99996948242188, c * 209.85067749023438, c * 72.99996948242188, c * 210.85067749023438);
      k.bezierCurveTo(c * 73.99996948242188, c * 220.85067749023438, c * 73.99996948242188, c * 221.85067749023438, c * 66.99996948242188, c * 227.85067749023438);
      k.bezierCurveTo(c * 71.99996948242188, c * 235.85067749023438, c * 73.99996948242188, c * 239.85067749023438, c * 71.99996948242188, c * 247.85067749023438);
      k.bezierCurveTo(c * 80.99996948242188, c * 257.8506774902344, c * 81.99996948242188, c * 263.8506774902344, c * 77.99996948242188, c * 271.8506774902344);
      k.bezierCurveTo(c * 95.49996948242188, c * 272.8506774902344, c * 95.49996948242188, c * 272.8506774902344, c * 112.99996948242188, c * 273.8506774902344);
      od(k, undefined, e[4], c * 3);
      k.restore();
    } else if (i == 2) {
      k.save();
      k.translate(c * 130, c * 35);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 170.99996948242188, c * 133.85067749023438);
      k.bezierCurveTo(c * 195.99996948242188, c * 129.85067749023438, c * 196.99996948242188, c * 111.85067749023438, c * 200.99996948242188, c * 88.85067749023438);
      od(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 169.99996948242188, c * 143.85067749023438);
      k.bezierCurveTo(c * 189.99996948242188, c * 145.85067749023438, c * 207.99996948242188, c * 126.85067749023438, c * 222.99996948242188, c * 100.85067749023438);
      od(k, sk, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 170.99996948242188, c * 157.85067749023438);
      k.bezierCurveTo(c * 193.99996948242188, c * 160.85067749023438, c * 210.99996948242188, c * 151.85067749023438, c * 232.99996948242188, c * 139.85067749023438);
      od(k, undefined, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 169.99996948242188, c * 168.85067749023438);
      k.bezierCurveTo(c * 192.99996948242188, c * 175.85067749023438, c * 203.99996948242188, c * 177.85067749023438, c * 245.99996948242188, c * 168.85067749023438);
      od(k, Yg, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 167.99996948242188, c * 168.85067749023438);
      k.bezierCurveTo(c * 183.99996948242188, c * 189.85067749023438, c * 191.99996948242188, c * 193.85067749023438, c * 220.99996948242188, c * 196.85067749023438);
      od(k, os, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 117.85067749023438);
      k.bezierCurveTo(c * 181.99996948242188, c * 120.85067749023438, c * 181.99996948242188, c * 120.85067749023438, c * 186.99996948242188, c * 123.85067749023438);
      k.bezierCurveTo(c * 183.99996948242188, c * 137.85067749023438, c * 185.99996948242188, c * 136.85067749023438, c * 190.99996948242188, c * 136.85067749023438);
      k.bezierCurveTo(c * 186.99996948242188, c * 147.85067749023438, c * 189.99996948242188, c * 152.85067749023438, c * 193.99996948242188, c * 155.85067749023438);
      k.bezierCurveTo(c * 187.99996948242188, c * 165.85067749023438, c * 190.99996948242188, c * 169.85067749023438, c * 190.99996948242188, c * 172.85067749023438);
      k.bezierCurveTo(c * 186.99996948242188, c * 183.85067749023438, c * 186.99996948242188, c * 185.85067749023438, c * 189.99996948242188, c * 188.85067749023438);
      k.bezierCurveTo(c * 182.49996948242188, c * 195.35067749023438, c * 182.49996948242188, c * 195.35067749023438, c * 174.99996948242188, c * 201.85067749023438);
      od(k, Yg, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 112.18402099609375);
      k.bezierCurveTo(c * 183.99996948242188, c * 119.18402099609375, c * 186.99996948242188, c * 117.18402099609375, c * 192.99996948242188, c * 116.18402099609375);
      k.bezierCurveTo(c * 191.99996948242188, c * 126.18402099609375, c * 193.99996948242188, c * 130.18402099609375, c * 199.99996948242188, c * 130.18402099609375);
      k.bezierCurveTo(c * 194.99996948242188, c * 145.18402099609375, c * 197.99996948242188, c * 147.18402099609375, c * 201.99996948242188, c * 153.18402099609375);
      k.bezierCurveTo(c * 196.99996948242188, c * 164.18402099609375, c * 197.99996948242188, c * 169.18402099609375, c * 201.99996948242188, c * 174.18402099609375);
      k.bezierCurveTo(c * 194.99996948242188, c * 184.18402099609375, c * 196.99996948242188, c * 187.18402099609375, c * 200.99996948242188, c * 193.18402099609375);
      k.bezierCurveTo(c * 185.99996948242188, c * 195.18402099609375, c * 181.99996948242188, c * 201.18402099609375, c * 174.99996948242188, c * 210.18402099609375);
      od(k, sk, e[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 101.29513549804688);
      k.bezierCurveTo(c * 181.99996948242188, c * 108.29513549804688, c * 189.99996948242188, c * 110.29513549804688, c * 195.99996948242188, c * 107.29513549804688);
      k.bezierCurveTo(c * 197.99996948242188, c * 121.29513549804688, c * 200.99996948242188, c * 122.29513549804688, c * 206.99996948242188, c * 122.29513549804688);
      k.bezierCurveTo(c * 201.99996948242188, c * 138.29513549804688, c * 204.99996948242188, c * 142.29513549804688, c * 211.99996948242188, c * 148.29513549804688);
      k.bezierCurveTo(c * 201.99996948242188, c * 156.29513549804688, c * 205.99996948242188, c * 167.29513549804688, c * 213.99996948242188, c * 173.29513549804688);
      k.bezierCurveTo(c * 204.99996948242188, c * 181.29513549804688, c * 204.99996948242188, c * 187.29513549804688, c * 205.99996948242188, c * 193.29513549804688);
      k.bezierCurveTo(c * 190.99996948242188, c * 198.29513549804688, c * 181.99996948242188, c * 205.29513549804688, c * 174.99996948242188, c * 214.29513549804688);
      od(k, undefined, e[4], c * 3);
      k.restore();
    }
    k.translate(j.width / 2, j.height / 2);
    if (!i) {
      k.globalAlpha = 0.5;
      ad(k, -o, -b, g, l + h, n);
      od(k, e[0]);
      if (f) {
        k.rotate(Math.PI);
      }
      k.globalAlpha = 1;
      ad(k, -o, -b, g, l, n);
      od(k, e[1], e[2], d);
      k.globalAlpha = 1;
      ad(k, c * 35 - o, c * 20 - b, g - c * 50, l - c * 50, n - c * 10);
      od(k, e[3]);
    }
    if (i == 3) {
      k.translate(-j.width / 2, -j.height / 2);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 121, c * 190);
      k.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      k.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      k.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      k.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      k.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      k.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      k.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      k.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      k.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      k.closePath();
      od(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 219, c * 144);
      k.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      k.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      k.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      k.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      k.closePath();
      od(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 123, c * 214);
      k.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      k.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      k.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      k.closePath();
      od(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 257, c * 199);
      k.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      k.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      k.closePath();
      od(k, e[5]);
      k.translate(c * -5, c * 55);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 186, c * 123);
      k.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      k.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      k.closePath();
      od(k, e[5]);
      k.translate(c * 5, c * -55);
      k.translate(c * -5, c * 15);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 171, c * 241);
      k.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      k.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      k.closePath();
      od(k, e[5]);
    } else if (i == 4) {
      k.translate(-j.width / 2, -j.height / 2);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 30, c * 167);
      k.bezierCurveTo(c * 47, c * 144, c * 64, c * 140, c * 80, c * 147);
      k.bezierCurveTo(c * 95, c * 154, c * 95, c * 159, c * 100, c * 179);
      k.bezierCurveTo(c * 105, c * 202, c * 95, c * 218, c * 69, c * 218);
      k.bezierCurveTo(c * 48, c * 236, c * 26, c * 223, c * 28, c * 213);
      k.bezierCurveTo(c * 28, c * 205, c * 29, c * 199, c * 32, c * 195);
      k.bezierCurveTo(c * 21, c * 183, c * 27, c * 173, c * 30, c * 167);
      k.closePath();
      od(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 26, c * 145);
      k.bezierCurveTo(c * 32, c * 138, c * 37, c * 137, c * 40, c * 139);
      k.bezierCurveTo(c * 43, c * 140, c * 41, c * 150, c * 31, c * 159);
      k.bezierCurveTo(c * 23, c * 166, c * 17, c * 158, c * 26, c * 145);
      k.closePath();
      od(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 13, c * 193);
      k.bezierCurveTo(c * 21, c * 187, c * 30, c * 190, c * 20, c * 202);
      k.bezierCurveTo(c * 13, c * 208, c * 7, c * 202, c * 13, c * 193);
      k.closePath();
      od(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 121, c * 190);
      k.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      k.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      k.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      k.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      k.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      k.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      k.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      k.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      k.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      k.closePath();
      od(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 335, c * 196);
      k.bezierCurveTo(c * 312, c * 208, c * 300, c * 185, c * 309, c * 167);
      k.bezierCurveTo(c * 314, c * 141, c * 339, c * 127, c * 359, c * 144);
      k.bezierCurveTo(c * 363, c * 148, c * 364, c * 150, c * 364, c * 150);
      k.bezierCurveTo(c * 392, c * 143, c * 396, c * 183, c * 378, c * 204);
      k.bezierCurveTo(c * 367, c * 215, c * 339, c * 208, c * 335, c * 196);
      k.closePath();
      od(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 349, c * 212);
      k.bezierCurveTo(c * 339, c * 216, c * 334, c * 208, c * 341, c * 203);
      k.bezierCurveTo(c * 353, c * 198, c * 361, c * 205, c * 349, c * 212);
      k.closePath();
      od(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 46, c * 165);
      k.bezierCurveTo(c * 55, c * 148, c * 85, c * 157, c * 83, c * 175);
      k.bezierCurveTo(c * 99, c * 185, c * 89, c * 212, c * 66, c * 204);
      k.bezierCurveTo(c * 55, c * 212, c * 43, c * 212, c * 41, c * 202);
      k.bezierCurveTo(c * 39, c * 194, c * 42, c * 187, c * 49, c * 185);
      k.bezierCurveTo(c * 44, c * 175, c * 45, c * 172, c * 46, c * 165);
      k.closePath();
      od(k, e[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 219, c * 144);
      k.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      k.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      k.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      k.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      k.closePath();
      od(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 123, c * 214);
      k.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      k.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      k.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      k.closePath();
      od(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 257, c * 199);
      k.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      k.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      k.closePath();
      od(k, e[5]);
      k.translate(c * -5, c * 55);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 186, c * 123);
      k.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      k.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      k.closePath();
      od(k, e[5]);
      k.translate(c * 5, c * -55);
      k.translate(c * -5, c * 15);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 171, c * 241);
      k.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      k.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      k.closePath();
      od(k, e[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 367, c * 164);
      k.bezierCurveTo(c * 380, c * 160, c * 391, c * 185, c * 371, c * 189);
      k.bezierCurveTo(c * 362, c * 192, c * 354, c * 191, c * 350, c * 185);
      k.bezierCurveTo(c * 326, c * 205, c * 314, c * 182, c * 316, c * 171);
      k.bezierCurveTo(c * 317, c * 150, c * 332, c * 143, c * 347, c * 147);
      k.bezierCurveTo(c * 361, c * 151, c * 366, c * 158, c * 367, c * 164);
      k.closePath();
      od(k, e[4]);
    }
    return j;
  }
  function fu(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var a = b * 16;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2);
    e.globalAlpha = 0.5;
    hd(e, 0, 0, a);
    od(e, c[0]);
    e.globalAlpha = 1;
    return d;
  }
  const gu = 8;
  function hu(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 105;
    var a = c * 125;
    var m = c * 4;
    var n = c * 10;
    var h = c * 5;
    var g = c * 10;
    var l = c * 110;
    var o = g / 2;
    var b = l / 2;
    i.width = k;
    i.height = a;
    j.save();
    j.globalAlpha = e ? 0.5 : 1;
    j.translate(k / 2 + c * 8, a / 2 + h);
    ad(j, -o, -b, g, l, n);
    od(j, e ? f[0] : f[1]);
    j.translate(c * -130 + h, c * -128 + h);
    j.beginPath();
    j.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    j.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    j.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    j.closePath();
    od(j, f[2]);
    j.restore();
    j.translate(k / 2 + 8, a / 2);
    j.globalAlpha = 1;
    ad(j, -o, -b, g, l, n);
    od(j, f[3], f[4], m);
    j.translate(c * -130, c * -125);
    j.beginPath();
    j.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    j.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    j.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    j.closePath();
    od(j, f[5], f[6], m);
    return i;
  }
  function iu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    od(e, c[0]);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    ad(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    e.restore();
    od(e, c[0]);
    hd(e, a * 121, a * 480, a * 20.396078054371138);
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    od(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    ad(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    e.restore();
    od(e, c[4], c[5], a * 12.5);
    hd(e, a * 121, a * 480, a * 20.396078054371138);
    od(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    od(e, c[1], c[2], a * 12.5);
    return d;
  }
  function ju(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 283;
    c.height = a * 224;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 33);
    d.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    od(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 181, a * 32);
    d.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    od(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 225, a * 52);
    d.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    od(d, Pn, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 34, a * 134);
    d.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    od(d, oh, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 249, a * 135);
    d.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    od(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 56, a * 50);
    d.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    od(d, Nl, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 55);
    d.bezierCurveTo(a * 124, a * 29, a * 179, a * 44, a * 188, a * 52);
    d.bezierCurveTo(a * 207, a * 64, a * 226, a * 94, a * 231, a * 118);
    d.bezierCurveTo(a * 236, a * 145, a * 222, a * 184, a * 193, a * 192);
    d.bezierCurveTo(a * 147, a * 201, a * 116, a * 200, a * 93, a * 193);
    d.bezierCurveTo(a * 61, a * 180, a * 48, a * 147, a * 50, a * 123);
    d.bezierCurveTo(a * 50, a * 93, a * 76, a * 66, a * 92, a * 56);
    d.closePath();
    od(d, b[0]);
    return c;
  }
  function ku(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 321;
    d.height = a * 284;
    e.translate(a * 100, a * 30);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    od(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    od(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    od(e, undefined, c[4], a * 4);
    e.translate(a * -100, a * -30);
    e.translate(a * 10, a * 70);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    od(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    od(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    od(e, undefined, c[4], a * 4);
    e.translate(a * 20, a * -80);
    e.translate(a * 5, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    od(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    od(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    od(e, jn, c[4], a * 4);
    return d;
  }
  function lu(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = (o = c * 450) / 2;
    var a = (p = c * 145) / 2;
    var m = c * 10;
    var n = c * 300;
    var h = c * 30;
    var g = n / 2;
    var l = h / 2;
    if (f) {
      var o = c * 145;
      var p = c * 450;
      i.width = o;
      i.height = p;
      j.rotate(Math.PI / 2);
      j.save();
      j.globalAlpha = 0.5;
      ad(j, c * 100, c * -110, n, h, m);
      od(j, e[0]);
      j.translate(c * 178, c * -98);
      ad(j, -g, -l - c * 6, c * 100, c * 100, m);
      od(j, e[0]);
      j.translate(c * -50, c * 5);
      ad(j, c * 220, c * -15, c * 90, c * 90, m);
      od(j, e[0]);
      j.restore();
      j.save();
      j.globalAlpha = 1;
      j.translate(c * 250, c * -63);
      ad(j, -g - c * 20, -l, n, h, m);
      od(j, e[1], e[2], 4);
      j.translate(c * -70, c * -40);
      ad(j, -g - c * 20, -l, c * 100, c * 100, m);
      od(j, e[3], e[4], 4);
      j.translate(c * -70, c * 15);
      ad(j, c * 220, c * -22, c * 90, c * 90, m);
      od(j, e[3], e[4], 4);
      ad(j, c * 230, c * -12, c * 55, c * 55, m);
      od(j, e[5]);
      j.translate(c * -70, 0);
      ad(j, c * -15, c * -2, c * 60, c * 60, m);
      od(j, e[5]);
      j.restore();
    } else {
      i.width = o;
      i.height = p;
      j.save();
      j.globalAlpha = 0.5;
      j.translate(k, a + c * 10);
      ad(j, -g, -l, n, h, m);
      od(j, e[0]);
      j.translate(c * -65, c * -25);
      ad(j, -g, -l - c * 6, c * 100, c * 100, c * 15);
      od(j, e[0]);
      j.translate(c * -35, c * -5);
      ad(j, c * 220, c * -15, c * 90, c * 90, c * 15);
      od(j, e[0]);
      j.restore();
      j.save();
      j.globalAlpha = 1;
      j.translate(c * 240, c * 70);
      ad(j, -g, -l, n, h, m);
      od(j, e[1], e[2], 4);
      j.translate(c * -60, c * -40);
      ad(j, -g - c * 20, -l, c * 100, c * 100, c * 15);
      od(j, e[3], e[4], 4);
      j.translate(c * -55, c * 10);
      ad(j, c * 220, c * -22, c * 90, c * 90, c * 15);
      od(j, e[3], e[4], 4);
      ad(j, c * 240, c * -12, c * 55, c * 55, c * 12);
      od(j, e[5]);
      j.translate(c * 45, c * 0);
      ad(j, c * -145, c * -2, c * 60, c * 60, c * 12);
      od(j, e[5]);
      j.restore();
    }
    return i;
  }
  function mu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 112;
    e.translate(0, a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 16, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 16, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
    e.closePath();
    od(e, c[1], c[2], a * 8);
    return d;
  }
  function nu(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.max(c.width, b.width);
    var g = Math.max(c.height, b.height);
    d.width = f;
    d.height = g;
    e.drawImage(b, (f - b.width) / 2, (g - b.height) / 2);
    e.drawImage(c, (f - c.width) / 2, (g - c.height) / 2);
    return d;
  }
  function ou(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 121;
    f.height = b * 130;
    g.translate(0, b * 20);
    if (d == 1) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 6, b * 23);
      g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
      g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
      g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
      g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
      g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
      g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
      g.closePath();
      od(g, undefined, c[3], b * 13);
    }
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 6, b * 23);
    g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
    g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
    g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
    g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
    g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
    g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
    g.closePath();
    od(g, c[1], c[2], b * 4);
    if (e == 1) {
      g.translate(0, b * 5);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 67, b * 30);
      g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
      od(g, undefined, c[0], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 17);
      g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
      od(g, tq, c[0], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 76, b * 8);
      g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
      od(g, Wb, c[0], b * 10);
      if (d == 1) {
        g.translate(b * -6, b * -5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 67, b * 30);
        g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
        od(g, da, c[3], b * 18);
        g.translate(3, b * 0);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 70, b * 17);
        g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
        od(g, sk, c[3], b * 18);
        g.translate(3, b * 0);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 76, b * 8);
        g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
        od(g, undefined, c[3], b * 18);
        g.translate(-6, b * 0);
      } else {
        g.translate(b * -6, b * -5);
      }
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 67, b * 30);
      g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
      od(g, Rr, c[2], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 17);
      g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
      od(g, undefined, c[2], b * 10);
      g.translate(3, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 76, b * 8);
      g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
      od(g, Aj, c[2], b * 10);
    } else {
      if (d == 1) {
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 108, b * 27);
        g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
        g.closePath();
        od(g, Aj, c[3], b * 18);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 79, b * 30);
        g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
        g.closePath();
        od(g, Yh, c[3], b * 18);
      } else {
        g.translate(0, b * -5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 108, b * 27);
        g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
        g.closePath();
        od(g, undefined, c[0], b * 7);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 79, b * 30);
        g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
        g.closePath();
        od(g, Rr, c[0], b * 7);
        g.translate(0, b * 5);
      }
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 108, b * 27);
      g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
      g.closePath();
      od(g, jn, c[2], b * 7);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 79, b * 30);
      g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
      g.closePath();
      od(g, undefined, c[2], b * 7);
    }
    return f;
  }
  function pu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 131;
    d.height = a * 121;
    e.translate(0, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    od(e, c[1], c[2], a * 10);
    return d;
  }
  function ru(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 283;
    f.height = b * 224;
    g.translate(0, b * 15);
    g.globalAlpha = 0.5;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 93, b * 55);
    g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
    g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
    g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
    g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
    g.closePath();
    od(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    g.closePath();
    od(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    od(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    od(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    od(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    od(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    od(g, d[0]);
    g.translate(0, b * -15);
    g.globalAlpha = 1;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    od(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    od(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    od(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    od(g, Bt, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    od(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    od(g, undefined, d[2], b * 40);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 93, b * 55);
    g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
    g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
    g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
    g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
    g.closePath();
    od(g, d[1], d[2], b * 10);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 100, b * 33);
    g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
    od(g, os, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 181, b * 32);
    g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
    od(g, ct, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 225, b * 52);
    g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
    od(g, Nl, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 34, b * 134);
    g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
    od(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 249, b * 135);
    g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
    od(g, undefined, d[1], b * 20);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 56, b * 50);
    g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
    od(g, undefined, d[1], b * 20);
    hd(g, b * 101, b * 155, b * 20.591260281974);
    od(g, d[3]);
    hd(g, b * 180, b * 155, b * 20.591260281974);
    od(g, d[3]);
    hd(g, b * 95, b * 148, b * 7.211102550927978);
    od(g, d[4]);
    hd(g, b * 173, b * 148, b * 7.211102550927978);
    od(g, d[4]);
    if (e === 1) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 191, b * 107);
      g.bezierCurveTo(b * 180, b * 104, b * 175, b * 101, b * 180, b * 95);
      g.bezierCurveTo(b * 180, b * 95, b * 181, b * 99, b * 188, b * 103);
      g.bezierCurveTo(b * 191, b * 101, b * 191, b * 95, b * 190, b * 91);
      g.bezierCurveTo(b * 190, b * 91, b * 196, b * 89, b * 195, b * 99);
      g.closePath();
      od(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 206, b * 98);
      g.bezierCurveTo(b * 203, b * 95, b * 200, b * 93, b * 198, b * 101);
      g.bezierCurveTo(b * 194, b * 109, b * 193, b * 109, b * 196, b * 110);
      g.bezierCurveTo(b * 206, b * 115, b * 209, b * 114, b * 211, b * 111);
      g.bezierCurveTo(b * 211, b * 106, b * 208, b * 108, b * 203, b * 108);
      g.bezierCurveTo(b * 193, b * 107, b * 204, b * 101, b * 206, b * 99);
      g.closePath();
      od(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 172, b * 111);
      g.bezierCurveTo(b * 172, b * 106, b * 174, b * 105, b * 185, b * 109);
      g.bezierCurveTo(b * 190, b * 109, b * 189, b * 114, b * 185, b * 120);
      g.bezierCurveTo(b * 181, b * 125, b * 180, b * 126, b * 176, b * 122);
      g.bezierCurveTo(b * 182, b * 119, b * 187, b * 110, b * 182, b * 112);
      g.closePath();
      od(g, d[2]);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 202, b * 125);
      g.bezierCurveTo(b * 197, b * 117, b * 193, b * 116, b * 193, b * 120);
      g.bezierCurveTo(b * 192.5, b * 124.5, b * 192.5, b * 124.5, b * 192, b * 129);
      g.bezierCurveTo(b * 188, b * 129, b * 187, b * 124, b * 189, b * 120);
      g.bezierCurveTo(b * 191, b * 110, b * 192, b * 110, b * 200, b * 116);
      g.bezierCurveTo(b * 208, b * 120, b * 207, b * 123, b * 202, b * 125);
      g.closePath();
      od(g, d[2]);
    }
    return f;
  }
  function su(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 100;
    d.height = a * 250;
    e.translate(a * -135, a * -75);
    e.globalAlpha = b ? 0.8 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    od(e, c[0]);
    hd(e, a * 160.5, a * 243.03125, a * 7);
    od(e, c[0]);
    hd(e, a * 227.5, a * 242.03125, a * 7);
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    od(e, c[0], c[0], a * 5);
    hd(e, a * 194, a * 298, a * 9);
    od(e, c[0], c[0], a * 5);
    e.globalAlpha = 1;
    e.translate(a * -10, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    od(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    od(e, c[1], c[2], a * 5);
    hd(e, a * 160.5, a * 243.03125, a * 7);
    od(e, c[1], c[2], a * 5);
    hd(e, a * 227.5, a * 242.03125, a * 7);
    od(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    od(e, c[1], c[2], a * 7);
    hd(e, a * 194, a * 298, a * 9);
    od(e, c[1], c[2], a * 7);
    return d;
  }
  function tu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 424;
    d.height = a * 788;
    e.translate(a * 25, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    ad(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    od(e, c[0]);
    hd(e, a * 204, a * 693, a * 36.013886210738214);
    od(e, c[0]);
    hd(e, a * 105, a * 518, a * 30);
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    od(e, c[0]);
    e.translate(a * -25, a * -25);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    ad(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    od(e, c[1], c[2], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    od(e, c[3], c[4], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    od(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    od(e, c[6], c[4], a * 16);
    hd(e, a * 204, a * 693, a * 36.013886210738214);
    od(e, c[6], c[4], a * 16);
    hd(e, a * 105, a * 518, a * 30);
    od(e, c[6], c[4], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    od(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    od(e, c[6]);
    hd(e, a * 204, a * 693, a * 17.029386365926403);
    od(e, c[7]);
    hd(e, a * 106, a * 518, a * 12);
    od(e, c[7]);
    return d;
  }
  function uu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    od(e, c[0]);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    ad(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
    e.restore();
    od(e, c[0]);
    hd(e, a * 122, a * 480, a * 18.439088914585774);
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    od(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    ad(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
    e.restore();
    od(e, c[4], c[5], a * 12.5);
    hd(e, a * 122, a * 480, a * 18.439088914585774);
    od(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    od(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 345);
    e.bezierCurveTo(a * 142, a * 345, a * 147, a * 346, a * 158, a * 349);
    e.bezierCurveTo(a * 177.5, a * 224.5, a * 177.5, a * 224.5, a * 197, a * 100);
    e.bezierCurveTo(a * 190.5, a * 84.5, a * 190.5, a * 84.5, a * 184, a * 69);
    e.bezierCurveTo(a * 173.5, a * 82, a * 173.5, a * 82, a * 163, a * 95);
    e.closePath();
    od(e, c[3]);
    return d;
  }
  function vu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 469;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
    e.closePath();
    od(e, c[0]);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    ad(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    od(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    od(e, undefined, c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    od(e, c[4], c[5], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
    e.closePath();
    od(e, c[4], c[5], a * 7);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    ad(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    od(e, c[4], c[5], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    od(e, c[6]);
    return d;
  }
  const wu = 12;
  function xu(b, c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var a = b * 220;
    var j = b * 220;
    var k = b * 100;
    var h = k / 4;
    f.width = a;
    f.height = j;
    i.translate(a / 2, j / 2);
    i.globalAlpha = c ? 0.5 : 1;
    if (!c) {
      i.translate(b * 0, b * -8);
    }
    ud(i, 7, k, h);
    od(i, c ? d[0] : d[1]);
    i.globalAlpha = 1;
    if (e == 0) {
      ud(i, 6, k * 0.65, h * 0.65);
      od(i, d[2]);
    } else if (e == 1) {
      i.translate(b * 20, b * 20);
      ud(i, 6, k * 0.45, h * 0.4);
      od(i, d[2]);
    }
    return f;
  }
  function yu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 180;
    var a = b * 210;
    var j = (h = b * 60) / 4;
    var k = b * 20;
    e.width = i;
    e.height = a;
    f.save();
    f.translate(i / 2 - b * 0, a / 2 - b * 35 + k);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -20);
    ud(f, 5, h, j);
    od(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 10, a / 2 + b * 15 + k);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -20);
    ud(f, 5, h, j);
    od(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 50, a / 2 + b * 40 + k);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 0.5;
    f.translate(0, b * -20);
    ud(f, 5, h, j);
    od(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 0, a / 2 - b * 35);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(b * 0, b * -20);
    ud(f, 5, h, j);
    od(f, d[1]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 10, a / 2 + b * 15);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    ud(f, 5, h, j);
    od(f, d[1]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 50, a / 2 + b * 40);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    ud(f, 5, h, j);
    od(f, d[1]);
    f.restore();
    var h;
    j = (h = b * 30) / 4;
    f.save();
    f.translate(i / 2 + b * 5, a / 2 - b * 20);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    ud(f, 5, h, j);
    od(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 0, a / 2 + b * 10);
    f.rotate(Math.PI / 2);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    ud(f, 5, h, j);
    od(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 45, a / 2 + b * 35);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 1;
    f.translate(0, b * -20);
    ud(f, 5, h, j);
    od(f, d[2]);
    f.restore();
    hd(f, i / 2 - b * 7, a / 2 + b * 7, 5);
    od(f, d[2]);
    return e;
  }
  function zu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.translate(a * -20, a * -20);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    ad(e, a * -14, a * -61, a * 28, a * 122, a * 10);
    e.restore();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    ad(e, a * -14, a * -61, a * 28, a * 122, a * 10);
    e.restore();
    od(e, c[4], c[5], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    od(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    od(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    od(e, c[1], c[2], a * 12.5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 346);
    e.bezierCurveTo(a * 125, a * 352, a * 125, a * 352, a * 107, a * 358);
    e.bezierCurveTo(a * 124, a * 363, a * 140, a * 368, a * 141, a * 368);
    e.bezierCurveTo(a * 156.5, a * 367, a * 156.5, a * 367, a * 172, a * 366);
    e.closePath();
    od(e, c[3]);
    return d;
  }
  function Au(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 120;
    var a = b * 150;
    var j = b * 60;
    var k = j / 4;
    var h = b * 15;
    e.width = i;
    e.height = a;
    f.save();
    f.translate(i / 2 + b * 0, a / 2 + b * 0 + h);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 0.5;
    ud(f, 8, j, k);
    od(f, d[0]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 11, a / 2 + b * 12);
    f.globalAlpha = 1;
    f.rotate(Math.PI / 3);
    f.translate(0, -h);
    ud(f, 8, j, k);
    od(f, d[1]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 9, a / 2 - b * 12);
    f.rotate(Math.PI / 2.8);
    ud(f, 5, j * 0.5, k * 0.4);
    od(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 + b * 19, a / 2 + b * 5);
    f.rotate(Math.PI / 1);
    ud(f, 5, j * 0.5, k * 0.4);
    od(f, d[2]);
    f.restore();
    f.save();
    f.translate(i / 2 - b * 8, a / 2 + b * 20);
    f.rotate(Math.PI / 2.25);
    ud(f, 5, j * 0.5, k * 0.4);
    od(f, d[2]);
    f.restore();
    return e;
  }
  function Bu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 220;
    var a = b * 230;
    var j = b * 100;
    var k = j / 4;
    var h = b * 20;
    e.width = i;
    e.height = a;
    f.translate(i / 2, a / 2 + h);
    f.globalAlpha = 0.5;
    ud(f, 7, j, k);
    od(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, -h);
    ud(f, 7, j, k);
    od(f, d[1]);
    ud(f, 6, j * 0.65, k * 0.65);
    od(f, d[2]);
    return e;
  }
  function Cu(c, e, f, i, j, k, n, o, p, h, g = 0) {
    var l = document.createElement("canvas");
    var q = l.getContext("2d");
    k = k ? k * c : 0;
    var b = Math.floor(f * c);
    q.font = b + "px Baloo Paaji";
    q.lineJoin = "round";
    o *= c;
    var r = n ? o * 2 : 0;
    if (p) {
      var t = Math.min(q.measureText(e).width + c * 2 + r, p);
    } else {
      t = q.measureText(e).width + c * 2 + r + c * g * 2;
    }
    b = (b + k + g) * c + r;
    l.width = t;
    l.height = b;
    if (n) {
      q.fillStyle = n;
      ad(q, 0, 0, t, b, o * 2);
      q.fill();
      q.translate(o, o);
    }
    q.textBaseline = "middle";
    q.font = f + "px Baloo Paaji";
    q.lineJoin = "round";
    if (j) {
      q.beginPath();
      q.fillStyle = j;
      q.fillText(e, 0, b / 2 + k - r / 2, t);
    }
    q.beginPath();
    if (h) {
      q.strokeStyle = h;
      q.lineWidth = g;
      q.strokeText(e, g, (b - r) / 2, t);
    }
    q.fillStyle = i;
    q.fillText(e, g, (b - r) / 2, t);
    return l;
  }
  function Du(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    od(e, c[0]);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    ad(e, a * -14, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    od(e, c[0]);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    ud(e, 4, a * 26.476404589747453, a * 10);
    e.restore();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    od(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    ad(e, a * -14, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    od(e, c[4], c[5], a * 12.5);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    ud(e, 4, a * 26.476404589747453, a * 10);
    e.restore();
    od(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    od(e, c[1], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    od(e, c[3]);
    return d;
  }
  function Eu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 350;
    d.height = a * 140;
    e.translate(a * -50, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.5, a * 222.0625);
    e.bezierCurveTo(a * 185.5, a * 184.0625, a * 302.5, a * 171.0625, a * 313.5, a * 222.0625);
    e.bezierCurveTo(a * 330.5, a * 263.0625, a * 181.5, a * 274.0625, a * 184.5, a * 223.0625);
    e.closePath();
    od(e, c[0], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.5, a * 241.0625);
    e.bezierCurveTo(a * 144.5, a * 278.0625, a * 270.5, a * 209.0625, a * 228.5, a * 174.0625);
    e.bezierCurveTo(a * 196.5, a * 147.0625, a * 117.5, a * 196.0625, a * 131.5, a * 240.0625);
    e.closePath();
    od(e, c[0], c[1], a * 8);
    hd(e, a * 270.5, a * 225.0625, a * 15.811388300841896);
    od(e, c[2]);
    hd(e, a * 243.5, a * 225.0625, a * 6.082762530298219);
    od(e, c[2]);
    hd(e, a * 255.5, a * 210.0625, a * 10.816653826391969);
    od(e, c[2]);
    hd(e, a * 167.5, a * 215.0625, a * 15.297058540778355);
    od(e, c[2]);
    hd(e, a * 176.5, a * 204.0625, a * 7.280109889280518);
    od(e, c[2]);
    hd(e, a * 206.5, a * 189.0625, a * 7.280109889280518);
    od(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151.5, a * 212.0625);
    e.bezierCurveTo(a * 161.5, a * 204.0625, a * 173.5, a * 214.0625, a * 158.5, a * 221.0625);
    e.bezierCurveTo(a * 145.5, a * 228.0625, a * 144.5, a * 216.0625, a * 151.5, a * 212.0625);
    e.closePath();
    od(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 209.0625);
    e.bezierCurveTo(a * 205.5, a * 202.0625, a * 215.5, a * 207.0625, a * 199.5, a * 217.0625);
    e.bezierCurveTo(a * 187.5, a * 224.0625, a * 182.5, a * 217.0625, a * 194.5, a * 209.0625);
    e.closePath();
    od(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188.5, a * 183.0625);
    e.bezierCurveTo(a * 201.5, a * 176.0625, a * 213.5, a * 187.0625, a * 193.5, a * 193.0625);
    e.bezierCurveTo(a * 185.5, a * 194.0625, a * 175.5, a * 189.0625, a * 188.5, a * 183.0625);
    e.closePath();
    od(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 261.5, a * 202.0625);
    e.bezierCurveTo(a * 274.5, a * 201.0625, a * 282.5, a * 214.0625, a * 261.5, a * 215.0625);
    e.bezierCurveTo(a * 246.5, a * 214.0625, a * 248.5, a * 203.0625, a * 261.5, a * 202.0625);
    e.closePath();
    od(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 240.5, a * 231.0625);
    e.bezierCurveTo(a * 255.5, a * 231.0625, a * 254.5, a * 243.0625, a * 240.5, a * 242.0625);
    e.bezierCurveTo(a * 225.5, a * 239.0625, a * 225.5, a * 232.0625, a * 240.5, a * 231.0625);
    e.closePath();
    od(e, c[3], c[4], a * 4);
    return d;
  }
  function Fu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 18;
    var a = b * 18;
    e.width = i;
    e.height = a;
    var j = b * 9;
    var k = b * 9;
    var l = b * 8;
    f.save();
    f.translate(j, k);
    f.globalAlpha = 1;
    hd(f, 0, 0, l);
    od(f, d[0]);
    l = b * 3;
    j = 0;
    k = b * -3;
    f.translate(j, k);
    f.globalAlpha = 1;
    hd(f, 0, 0, l);
    od(f, d[1]);
    f.restore();
    return e;
  }
  function Gu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 118;
    d.height = a * 114;
    e.translate(0, a * 10);
    hd(e, a * 42, a * 43, a * 24.758836806279895);
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    od(e, c[0]);
    e.translate(0, a * -10);
    hd(e, a * 42, a * 43, a * 24.758836806279895);
    od(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    od(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    od(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 16);
    e.bezierCurveTo(a * 55, a * 19, a * 54, a * 20, a * 55, a * 22);
    e.bezierCurveTo(a * 52, a * 24.5, a * 52, a * 24.5, a * 49, a * 27);
    e.bezierCurveTo(a * 45, a * 25, a * 45, a * 25, a * 41, a * 23);
    e.bezierCurveTo(a * 45, a * 19, a * 48, a * 16, a * 52, a * 16);
    e.closePath();
    od(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 30);
    e.bezierCurveTo(a * 66, a * 29, a * 64, a * 30, a * 66, a * 30);
    e.bezierCurveTo(a * 67, a * 31, a * 67, a * 31, a * 68, a * 32);
    e.bezierCurveTo(a * 66.5, a * 33.5, a * 66.5, a * 33.5, a * 65, a * 35);
    e.bezierCurveTo(a * 63.5, a * 32.5, a * 63.5, a * 32.5, a * 62, a * 30);
    e.closePath();
    od(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 21);
    e.bezierCurveTo(a * 31, a * 22, a * 31, a * 26, a * 29, a * 29);
    e.bezierCurveTo(a * 26, a * 28.5, a * 26, a * 28.5, a * 23, a * 28);
    e.bezierCurveTo(a * 23, a * 26.5, a * 23, a * 26.5, a * 23, a * 25);
    e.bezierCurveTo(a * 25, a * 23, a * 25, a * 23, a * 27, a * 21);
    e.closePath();
    od(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 36);
    e.bezierCurveTo(a * 23, a * 36, a * 24, a * 42, a * 19, a * 46);
    e.bezierCurveTo(a * 12, a * 39, a * 15, a * 38, a * 18, a * 37);
    e.closePath();
    od(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 34);
    e.bezierCurveTo(a * 35, a * 36, a * 36, a * 39, a * 32, a * 45);
    e.bezierCurveTo(a * 25, a * 46, a * 25, a * 44, a * 30, a * 34);
    e.closePath();
    od(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 35);
    e.bezierCurveTo(a * 58, a * 27, a * 57, a * 27, a * 52, a * 31);
    e.bezierCurveTo(a * 50, a * 36, a * 53, a * 38, a * 58, a * 36);
    e.closePath();
    od(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 46);
    e.bezierCurveTo(a * 64.5, a * 46.5, a * 64.5, a * 46.5, a * 66, a * 47);
    e.bezierCurveTo(a * 70, a * 50, a * 70, a * 53, a * 61, a * 55);
    e.bezierCurveTo(a * 62, a * 50.5, a * 62, a * 50.5, a * 63, a * 46);
    e.closePath();
    od(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 42);
    e.bezierCurveTo(a * 47, a * 41, a * 53, a * 47, a * 46, a * 51);
    e.bezierCurveTo(a * 38, a * 49, a * 39, a * 46, a * 41, a * 43);
    e.closePath();
    od(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 57);
    e.bezierCurveTo(a * 54, a * 57, a * 54, a * 58, a * 55, a * 61);
    e.bezierCurveTo(a * 54, a * 63, a * 52, a * 64, a * 48, a * 65);
    e.closePath();
    od(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 52);
    e.bezierCurveTo(a * 25, a * 51, a * 27, a * 50, a * 28, a * 54);
    e.bezierCurveTo(a * 27, a * 58, a * 24, a * 58, a * 22, a * 58);
    e.bezierCurveTo(a * 21, a * 55.5, a * 21, a * 55.5, a * 20, a * 53);
    e.closePath();
    od(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 61);
    e.bezierCurveTo(a * 37, a * 61, a * 39, a * 63, a * 39, a * 68);
    e.bezierCurveTo(a * 36, a * 68.5, a * 36, a * 68.5, a * 33, a * 69);
    e.bezierCurveTo(a * 30.5, a * 67.5, a * 30.5, a * 67.5, a * 28, a * 66);
    e.closePath();
    od(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 45);
    e.bezierCurveTo(a * 90, a * 46.5, a * 90, a * 46.5, a * 92, a * 48);
    e.bezierCurveTo(a * 92, a * 50, a * 92, a * 50, a * 92, a * 52);
    e.closePath();
    od(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 53);
    e.bezierCurveTo(a * 97.5, a * 55, a * 97.5, a * 55, a * 99, a * 57);
    e.bezierCurveTo(a * 97.5, a * 59.5, a * 97.5, a * 59.5, a * 96, a * 62);
    e.bezierCurveTo(a * 93.5, a * 60.5, a * 93.5, a * 60.5, a * 91, a * 59);
    e.bezierCurveTo(a * 91.5, a * 57, a * 91.5, a * 57, a * 92, a * 55);
    e.closePath();
    od(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 92, a * 71);
    e.bezierCurveTo(a * 94.5, a * 70.5, a * 94.5, a * 70.5, a * 97, a * 70);
    e.bezierCurveTo(a * 98.5, a * 72.5, a * 98.5, a * 72.5, a * 100, a * 75);
    e.bezierCurveTo(a * 97, a * 76.5, a * 97, a * 76.5, a * 94, a * 78);
    e.closePath();
    od(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 82);
    e.bezierCurveTo(a * 96, a * 83, a * 96, a * 83, a * 97, a * 84);
    e.bezierCurveTo(a * 97, a * 85.5, a * 97, a * 85.5, a * 97, a * 87);
    e.bezierCurveTo(a * 93.5, a * 87.5, a * 93.5, a * 87.5, a * 90, a * 88);
    e.closePath();
    od(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 72);
    e.bezierCurveTo(a * 89, a * 76, a * 88, a * 81, a * 85, a * 82);
    e.bezierCurveTo(a * 80, a * 80, a * 82, a * 78, a * 85, a * 72);
    e.closePath();
    od(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 86);
    e.bezierCurveTo(a * 84, a * 88, a * 86, a * 88, a * 85, a * 93);
    e.bezierCurveTo(a * 80, a * 96, a * 79, a * 96, a * 76, a * 91);
    e.closePath();
    od(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 46);
    e.bezierCurveTo(a * 93, a * 51, a * 91, a * 62, a * 80, a * 78);
    e.bezierCurveTo(a * 74, a * 86, a * 66, a * 90, a * 60, a * 86);
    e.bezierCurveTo(a * 55, a * 79, a * 57, a * 73, a * 67, a * 57);
    e.bezierCurveTo(a * 71, a * 51, a * 79, a * 44, a * 84, a * 46);
    e.closePath();
    od(e, c[5], c[6], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 76, a * 60);
    e.bezierCurveTo(a * 80, a * 66, a * 75, a * 74, a * 68, a * 74);
    e.bezierCurveTo(a * 60, a * 64, a * 68, a * 59, a * 76, a * 59);
    e.closePath();
    od(e, c[7], c[8], a * 5);
    return d;
  }
  const Hu = String.fromCharCode;
  const Iu = Hu(101);
  const Ju = Hu(118);
  const Ku = Hu(97);
  const Lu = Hu(108);
  function Mu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 217;
    d.height = a * 215;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 113);
    e.bezierCurveTo(a * 135, a * 98, a * 136, a * 96, a * 142, a * 97);
    e.bezierCurveTo(a * 167, a * 106, a * 167, a * 106, a * 171, a * 109);
    e.bezierCurveTo(a * 173, a * 120, a * 173, a * 134, a * 169, a * 141);
    e.bezierCurveTo(a * 140, a * 149.5, a * 140, a * 149.5, a * 111, a * 158);
    e.closePath();
    od(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 103);
    e.bezierCurveTo(a * 167, a * 91, a * 175, a * 87, a * 176, a * 94);
    e.bezierCurveTo(a * 175, a * 102, a * 176, a * 102, a * 186, a * 103);
    e.bezierCurveTo(a * 191, a * 104, a * 192, a * 105, a * 185, a * 116);
    e.bezierCurveTo(a * 183, a * 120, a * 191, a * 124, a * 189, a * 129);
    e.bezierCurveTo(a * 185, a * 139, a * 178, a * 134, a * 166, a * 131);
    e.closePath();
    od(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 46);
    e.bezierCurveTo(a * 60, a * 34, a * 60, a * 29, a * 56, a * 19);
    e.bezierCurveTo(a * 52, a * 12, a * 52, a * 16, a * 49, a * 24);
    e.bezierCurveTo(a * 48, a * 27, a * 46, a * 28, a * 39, a * 27);
    e.bezierCurveTo(a * 33, a * 26, a * 34, a * 31, a * 35, a * 37);
    e.bezierCurveTo(a * 36, a * 41, a * 27, a * 46, a * 29, a * 52);
    e.bezierCurveTo(a * 36, a * 55, a * 35, a * 56, a * 31, a * 59);
    e.bezierCurveTo(a * 27, a * 65, a * 32, a * 64, a * 35, a * 62);
    e.closePath();
    od(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 50);
    e.bezierCurveTo(a * 51, a * 35, a * 70, a * 32, a * 78, a * 29);
    e.bezierCurveTo(a * 84, a * 27, a * 113, a * 36, a * 127, a * 41);
    e.bezierCurveTo(a * 140, a * 47, a * 147, a * 69, a * 137, a * 73);
    e.bezierCurveTo(a * 124, a * 92, a * 117, a * 92, a * 109, a * 94);
    e.bezierCurveTo(a * 101, a * 96, a * 89, a * 92, a * 65, a * 83);
    e.bezierCurveTo(a * 54, a * 80, a * 46, a * 58, a * 46, a * 51);
    e.closePath();
    od(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 40);
    e.bezierCurveTo(a * 49, a * 34, a * 49, a * 34, a * 47, a * 28);
    e.bezierCurveTo(a * 38, a * 28, a * 34, a * 27, a * 37, a * 37);
    e.bezierCurveTo(a * 43, a * 40.5, a * 43, a * 40.5, a * 49, a * 44);
    e.closePath();
    od(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 48);
    e.bezierCurveTo(a * 38, a * 49, a * 38, a * 49, a * 47, a * 50);
    e.bezierCurveTo(a * 46.5, a * 51.5, a * 46.5, a * 51.5, a * 46, a * 53);
    e.bezierCurveTo(a * 40, a * 53.5, a * 40, a * 53.5, a * 34, a * 54);
    e.bezierCurveTo(a * 29, a * 51, a * 32, a * 51.5, a * 30, a * 49);
    e.closePath();
    od(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 89, a * 61);
    e.bezierCurveTo(a * 101, a * 70, a * 109, a * 90, a * 102, a * 90);
    e.bezierCurveTo(a * 97, a * 91, a * 87, a * 91, a * 60, a * 80);
    e.bezierCurveTo(a * 48, a * 65, a * 46, a * 56, a * 48, a * 53);
    e.bezierCurveTo(a * 50, a * 52, a * 66, a * 56, a * 89, a * 61);
    e.closePath();
    od(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 59);
    e.bezierCurveTo(a * 115, a * 45, a * 125, a * 42, a * 129, a * 47);
    e.bezierCurveTo(a * 138, a * 56, a * 140, a * 63, a * 138, a * 67);
    e.bezierCurveTo(a * 131, a * 80, a * 122, a * 87, a * 114, a * 90);
    e.bezierCurveTo(a * 105, a * 80, a * 95, a * 62, a * 98, a * 61);
    e.closePath();
    od(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 62);
    e.bezierCurveTo(a * 139, a * 45, a * 153, a * 40, a * 150, a * 48);
    e.bezierCurveTo(a * 145, a * 57, a * 157, a * 63, a * 157, a * 70);
    e.bezierCurveTo(a * 157, a * 74, a * 142, a * 77, a * 142, a * 85);
    e.bezierCurveTo(a * 143, a * 91, a * 141, a * 92, a * 135, a * 90);
    e.bezierCurveTo(a * 132, a * 90, a * 132, a * 96, a * 124, a * 99);
    e.bezierCurveTo(a * 118, a * 93, a * 116, a * 77, a * 116, a * 64);
    e.closePath();
    od(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 130);
    e.bezierCurveTo(a * 157, a * 115, a * 165, a * 111, a * 167, a * 115);
    e.bezierCurveTo(a * 170, a * 117, a * 171, a * 135, a * 167, a * 141);
    e.bezierCurveTo(a * 135.5, a * 149.5, a * 135.5, a * 149.5, a * 104, a * 158);
    e.closePath();
    od(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 119);
    e.bezierCurveTo(a * 46, a * 120, a * 40, a * 118, a * 34, a * 116);
    e.bezierCurveTo(a * 28, a * 111, a * 41, a * 112, a * 39, a * 108);
    e.bezierCurveTo(a * 36, a * 100, a * 49, a * 102, a * 53, a * 95);
    e.bezierCurveTo(a * 57, a * 84, a * 58, a * 85, a * 63, a * 93);
    e.bezierCurveTo(a * 68, a * 96, a * 72, a * 94, a * 80, a * 88);
    e.bezierCurveTo(a * 80, a * 96, a * 78, a * 107, a * 66, a * 115);
    e.closePath();
    od(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 64);
    e.bezierCurveTo(a * 133.5, a * 57, a * 133.5, a * 57, a * 149, a * 50);
    e.bezierCurveTo(a * 145, a * 54, a * 154, a * 65, a * 157, a * 68);
    e.bezierCurveTo(a * 138.5, a * 66.5, a * 138.5, a * 66.5, a * 120, a * 65);
    e.closePath();
    od(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 65);
    e.bezierCurveTo(a * 129, a * 77, a * 129, a * 77, a * 140, a * 89);
    e.bezierCurveTo(a * 131, a * 89, a * 130, a * 92, a * 128, a * 96);
    e.bezierCurveTo(a * 123.5, a * 82, a * 123.5, a * 82, a * 119, a * 68);
    e.closePath();
    od(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 112);
    e.bezierCurveTo(a * 63, a * 108, a * 78, a * 111, a * 88, a * 112);
    e.bezierCurveTo(a * 98, a * 122, a * 117, a * 136, a * 125, a * 157);
    e.bezierCurveTo(a * 123, a * 180, a * 123, a * 185, a * 118, a * 186);
    e.bezierCurveTo(a * 101, a * 190, a * 89, a * 191, a * 79, a * 187);
    e.bezierCurveTo(a * 53, a * 165, a * 50, a * 153, a * 47, a * 144);
    e.bezierCurveTo(a * 46, a * 128, a * 46, a * 124, a * 50, a * 112);
    e.closePath();
    od(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 114);
    e.bezierCurveTo(a * 81, a * 149, a * 80, a * 147, a * 80, a * 149);
    e.bezierCurveTo(a * 82, a * 155, a * 80, a * 182, a * 74, a * 182);
    e.bezierCurveTo(a * 60, a * 172, a * 52, a * 157, a * 47, a * 144);
    e.closePath();
    od(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85, a * 152);
    e.bezierCurveTo(a * 99, a * 150, a * 109, a * 152, a * 119, a * 156);
    e.bezierCurveTo(a * 122, a * 163, a * 122, a * 174, a * 117, a * 182);
    e.closePath();
    e.bezierCurveTo(a * 93, a * 188, a * 82, a * 187, a * 83, a * 179);
    od(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 166);
    e.bezierCurveTo(a * 133, a * 165, a * 142, a * 168, a * 137, a * 173);
    e.bezierCurveTo(a * 127, a * 177, a * 137, a * 195, a * 126, a * 196);
    e.bezierCurveTo(a * 112, a * 195, a * 112, a * 194, a * 109, a * 199);
    e.bezierCurveTo(a * 105, a * 205, a * 102, a * 195, a * 96, a * 197);
    e.bezierCurveTo(a * 84, a * 201, a * 88, a * 198, a * 90, a * 187);
    e.bezierCurveTo(a * 96, a * 171, a * 97, a * 170, a * 103, a * 167);
    e.closePath();
    od(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 168);
    e.bezierCurveTo(a * 118, a * 172.5, a * 118, a * 172.5, a * 131, a * 177);
    e.bezierCurveTo(a * 133, a * 190, a * 132, a * 199, a * 116, a * 194);
    e.bezierCurveTo(a * 110, a * 182, a * 110, a * 182, a * 104, a * 170);
    e.closePath();
    od(e, c[10]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 169);
    e.bezierCurveTo(a * 100.5, a * 182, a * 100.5, a * 182, a * 99, a * 195);
    e.bezierCurveTo(a * 93.5, a * 196.5, a * 93.5, a * 196.5, a * 88, a * 198);
    e.bezierCurveTo(a * 94, a * 176, a * 96, a * 174, a * 101, a * 168);
    e.closePath();
    od(e, c[9], c[9], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 107);
    e.bezierCurveTo(a * 64, a * 101, a * 64, a * 101, a * 64, a * 95);
    e.bezierCurveTo(a * 57, a * 86, a * 57, a * 84, a * 53, a * 97);
    e.bezierCurveTo(a * 55, a * 103.5, a * 55, a * 103.5, a * 57, a * 110);
    e.closePath();
    od(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 108);
    e.bezierCurveTo(a * 46.5, a * 111, a * 46.5, a * 111, a * 53, a * 114);
    e.bezierCurveTo(a * 50.5, a * 117, a * 50.5, a * 117, a * 48, a * 120);
    e.bezierCurveTo(a * 40.5, a * 117.5, a * 40.5, a * 117.5, a * 33, a * 115);
    e.bezierCurveTo(a * 36, a * 112, a * 36, a * 112, a * 39, a * 109);
    e.closePath();
    od(e, c[11], c[11], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 106);
    e.bezierCurveTo(a * 178.5, a * 110.5, a * 178.5, a * 110.5, a * 168, a * 115);
    e.bezierCurveTo(a * 168.5, a * 119, a * 168.5, a * 119, a * 169, a * 123);
    e.bezierCurveTo(a * 179, a * 124.5, a * 179, a * 124.5, a * 189, a * 126);
    e.bezierCurveTo(a * 182, a * 118, a * 183, a * 115, a * 188, a * 106);
    e.closePath();
    od(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 69, a * 178);
    e.bezierCurveTo(a * 69, a * 141, a * 70, a * 136, a * 77, a * 137);
    e.bezierCurveTo(a * 88, a * 133, a * 101, a * 134, a * 108, a * 137);
    od(e, rh, c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 161);
    e.bezierCurveTo(a * 54, a * 124, a * 55, a * 119, a * 62, a * 119);
    e.bezierCurveTo(a * 74, a * 117, a * 85, a * 117, a * 93, a * 119);
    od(e, da, c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 91, a * 29);
    e.bezierCurveTo(a * 74, a * 33, a * 62, a * 46, a * 57, a * 54);
    e.bezierCurveTo(a * 57, a * 63, a * 68, a * 76, a * 77, a * 87);
    od(e, Wb, c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 33);
    e.bezierCurveTo(a * 82, a * 51, a * 80, a * 52, a * 79, a * 59);
    e.bezierCurveTo(a * 78, a * 65, a * 93, a * 86, a * 101, a * 93);
    od(e, undefined, c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 98);
    e.bezierCurveTo(a * 126.5, a * 103, a * 126.5, a * 103, a * 123, a * 108);
    e.bezierCurveTo(a * 133.5, a * 107, a * 133.5, a * 107, a * 144, a * 106);
    e.bezierCurveTo(a * 138.5, a * 110, a * 138.5, a * 110, a * 133, a * 114);
    e.bezierCurveTo(a * 142, a * 114, a * 142, a * 114, a * 151, a * 114);
    e.bezierCurveTo(a * 146.5, a * 119.5, a * 146.5, a * 119.5, a * 142, a * 125);
    e.bezierCurveTo(a * 146.5, a * 127, a * 146.5, a * 127, a * 151, a * 129);
    e.bezierCurveTo(a * 147.5, a * 132, a * 147.5, a * 132, a * 144, a * 135);
    e.bezierCurveTo(a * 148, a * 137, a * 148, a * 137, a * 152, a * 139);
    e.bezierCurveTo(a * 149, a * 142.5, a * 149, a * 142.5, a * 146, a * 146);
    od(e, undefined, c[3], a * 4);
    return d;
  }
  function Nu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 140;
    var a = b * 150;
    var i = b * 10;
    var j = b * 4;
    e.width = g;
    e.height = a;
    f.translate(b * -50, b * -38 + i);
    f.globalAlpha = c ? 0.5 : 1;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    od(f, d[0]);
    f.translate(0, 0 - i);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    od(f, d[1], d[2], j);
    return e;
  }
  function Pu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 70;
    var a = b * 90;
    var i = b * 4;
    var j = b * 5;
    e.width = g;
    e.height = a;
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    od(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    od(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    od(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * 3, b * -93 + j);
    f.rotate(Math.PI / 5);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    od(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    od(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    od(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    od(f, d[0], d[1], i);
    f.restore();
    f.save();
    f.translate(b * 3, b * -93);
    f.rotate(Math.PI / 5);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    od(f, d[0], d[1], i);
    f.restore();
    return e;
  }
  function em(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 154;
    d.height = a * 261;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    od(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 43);
    e.bezierCurveTo(a * 31, a * 61, a * 43, a * 70, a * 51, a * 75);
    e.bezierCurveTo(a * 48, a * 84, a * 41, a * 89, a * 33, a * 86);
    e.bezierCurveTo(a * 23, a * 88, a * 20, a * 76, a * 23, a * 62);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45, a * 29);
    e.bezierCurveTo(a * 49, a * 45, a * 61, a * 54, a * 64, a * 55);
    e.bezierCurveTo(a * 67.5, a * 53, a * 67.5, a * 53, a * 71, a * 51);
    e.bezierCurveTo(a * 80, a * 44, a * 83, a * 33, a * 82, a * 20);
    e.bezierCurveTo(a * 59, a * 17, a * 51, a * 23, a * 45, a * 30);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 56);
    e.bezierCurveTo(a * 90, a * 33, a * 103, a * 25, a * 105, a * 27);
    e.bezierCurveTo(a * 116, a * 31, a * 121, a * 45, a * 122, a * 50);
    e.bezierCurveTo(a * 112, a * 62, a * 103, a * 63, a * 91, a * 62);
    e.bezierCurveTo(a * 89, a * 59.5, a * 89, a * 59.5, a * 87, a * 57);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 81);
    e.bezierCurveTo(a * 109, a * 82, a * 123, a * 70, a * 124, a * 63);
    e.bezierCurveTo(a * 124, a * 75.5, a * 124, a * 75.5, a * 124, a * 88);
    e.bezierCurveTo(a * 119, a * 99, a * 103, a * 103, a * 94, a * 103);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 124);
    e.bezierCurveTo(a * 108, a * 125, a * 122, a * 113, a * 124, a * 106);
    e.bezierCurveTo(a * 124, a * 119, a * 124, a * 129, a * 124, a * 132);
    e.bezierCurveTo(a * 110, a * 147, a * 94, a * 148, a * 90, a * 147);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 170);
    e.bezierCurveTo(a * 104, a * 166, a * 122, a * 158, a * 122, a * 151);
    e.bezierCurveTo(a * 122, a * 162.5, a * 122, a * 162.5, a * 122, a * 174);
    e.bezierCurveTo(a * 111, a * 191, a * 97, a * 191, a * 89, a * 191);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 208);
    e.bezierCurveTo(a * 100, a * 209, a * 115, a * 205, a * 122, a * 193);
    e.bezierCurveTo(a * 122, a * 205.5, a * 122, a * 205.5, a * 122, a * 218);
    e.bezierCurveTo(a * 115, a * 229, a * 103, a * 235, a * 90, a * 228);
    e.bezierCurveTo(a * 88, a * 224, a * 88, a * 217, a * 88, a * 211);
    e.closePath();
    od(e, c[3]);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 81);
    e.bezierCurveTo(a * 32, a * 84, a * 41, a * 81, a * 45, a * 68);
    e.bezierCurveTo(a * 50, a * 50, a * 62, a * 40, a * 79, a * 43);
    e.bezierCurveTo(a * 95, a * 45, a * 102, a * 58, a * 101, a * 81);
    e.bezierCurveTo(a * 99.5, a * 120.5, a * 99.5, a * 120.5, a * 98, a * 160);
    e.bezierCurveTo(a * 96.5, a * 191.5, a * 96.5, a * 191.5, a * 95, a * 223);
    e.bezierCurveTo(a * 93, a * 232, a * 101, a * 235, a * 108, a * 238);
    e.bezierCurveTo(a * 100, a * 240, a * 90, a * 233, a * 90, a * 224);
    e.bezierCurveTo(a * 92, a * 157, a * 92, a * 157, a * 94, a * 90);
    e.bezierCurveTo(a * 94, a * 56, a * 89, a * 53, a * 77, a * 51);
    e.bezierCurveTo(a * 58, a * 50, a * 54, a * 59, a * 49, a * 75);
    e.bezierCurveTo(a * 44, a * 91, a * 28, a * 90, a * 23, a * 81);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 123);
    e.bezierCurveTo(a * 88, a * 130, a * 88, a * 127, a * 94, a * 128);
    e.bezierCurveTo(a * 91, a * 136, a * 94, a * 137, a * 99, a * 142);
    e.bezierCurveTo(a * 97, a * 149, a * 99, a * 152, a * 105, a * 155);
    e.bezierCurveTo(a * 107, a * 159, a * 113, a * 159, a * 120, a * 158);
    e.bezierCurveTo(a * 121, a * 160, a * 125, a * 163, a * 132, a * 163);
    e.bezierCurveTo(a * 133, a * 166, a * 136, a * 169, a * 138, a * 170);
    e.bezierCurveTo(a * 133, a * 171, a * 132, a * 172, a * 129, a * 174);
    e.bezierCurveTo(a * 122, a * 170, a * 120, a * 170, a * 116, a * 174);
    e.bezierCurveTo(a * 108, a * 170.5, a * 108, a * 170.5, a * 100, a * 167);
    e.bezierCurveTo(a * 95, a * 172, a * 94, a * 179, a * 95, a * 184);
    e.bezierCurveTo(a * 87, a * 185, a * 87, a * 189, a * 88, a * 194);
    e.bezierCurveTo(a * 82, a * 194, a * 81, a * 195, a * 79, a * 197);
    e.bezierCurveTo(a * 78, a * 192, a * 78, a * 191, a * 77, a * 189);
    e.bezierCurveTo(a * 81, a * 185, a * 82, a * 183, a * 80, a * 176);
    e.bezierCurveTo(a * 89, a * 170, a * 92, a * 168, a * 95, a * 163);
    e.bezierCurveTo(a * 91, a * 151, a * 88, a * 151, a * 82, a * 147);
    e.bezierCurveTo(a * 85, a * 142, a * 85, a * 137, a * 81, a * 133);
    e.bezierCurveTo(a * 84, a * 127, a * 84, a * 125, a * 82, a * 124);
    e.closePath();
    od(e, c[4], c[5], a * 4);
    hd(e, a * 107, a * 152, a * 9);
    od(e, c[6]);
    hd(e, a * 105, a * 173, a * 9);
    od(e, c[6]);
    hd(e, a * 87, a * 161, a * 9);
    od(e, c[6]);
    hd(e, a * 106, a * 147, a * 4);
    od(e, c[7]);
    hd(e, a * 104, a * 167, a * 4);
    od(e, c[7]);
    hd(e, a * 86, a * 154, a * 4);
    od(e, c[7]);
    return d;
  }
  function im(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 80;
    c.height = a * 100;
    d.scale(0.5, 0.5);
    d.translate(10, 15);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * 5);
    d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
    d.closePath();
    od(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
    od(d, undefined, b[0], a * 10);
    d.translate(0, -10);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * 5);
    d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
    d.closePath();
    od(d, b[1], b[2], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
    od(d, undefined, b[2], a * 8);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 33, a * 52, a * 39, a * 33, a * 48, a * 7);
    od(d, rh, b[2], a * 8);
    return c;
  }
  function Qu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 373;
    d.height = a * 314;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    ad(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    od(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    od(e, c[0], c[0], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    od(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    ad(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    od(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    ad(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    od(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    ad(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    od(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    ad(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    od(e, c[0], c[0], a * 6);
    hd(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    od(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    od(e, c[3], c[4], a * 6);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    ad(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    od(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    od(e, c[1], c[2], a * 6);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    ad(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    od(e, c[5], c[4], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    ad(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    od(e, c[3], c[4], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    ad(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    od(e, c[6], c[4], a * 6);
    e.globalCompositeOperation = "destination-out";
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    ad(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    od(e, c[7], c[8], a * 6);
    e.globalCompositeOperation = "source-over";
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    ad(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    od(e, c[7], c[8], a * 6);
    e.globalAlpha = 1;
    e.save();
    hd(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    od(e, c[3], c[4], a * 6);
    e.restore();
    return d;
  }
  function nm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = c * b * 2;
    var a = b * c * 2;
    var i = g / 2;
    var j = a / 2;
    e.width = g;
    e.height = a;
    f.translate(i, j);
    hd(f, 0, 0, b * c);
    od(f, d);
    return e;
  }
  function om(b, c, d, e, f) {
    var g = document.createElement("canvas");
    var a = g.getContext("2d");
    if (e == 0) {
      var i = b * 270;
      var j = b * 250;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 140, b * 3);
      a.translate(b * -25, b * -20);
      a.bezierCurveTo(b * 218, b * 31, b * 251, b * 61, b * 265, b * 85);
      a.bezierCurveTo(b * 278, b * 108, b * 295, b * 160, b * 285, b * 195);
      a.bezierCurveTo(b * 271, b * 242, b * 213, b * 268, b * 188, b * 266);
      a.bezierCurveTo(b * 139, b * 262, b * 70, b * 244, b * 47, b * 204);
      a.bezierCurveTo(b * 20, b * 158, b * 35, b * 78, b * 59, b * 56);
      a.bezierCurveTo(b * 90, b * 28, b * 124, b * 23, b * 140, b * 23);
      a.closePath();
      od(a, d[0]);
    } else if (e == 1) {
      i = b * 430;
      j = b * 350;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 180, b * 5);
      a.translate(b * -30, b * -60);
      a.bezierCurveTo(b * 283, b * 60, b * 265, b * 163, b * 335, b * 206);
      a.bezierCurveTo(b * 376, b * 231, b * 492, b * 299, b * 434, b * 357);
      a.bezierCurveTo(b * 371, b * 421, b * 289, b * 394, b * 255, b * 386);
      a.bezierCurveTo(b * 218, b * 377, b * 91, b * 359, b * 50, b * 272);
      a.bezierCurveTo(b * 12, b * 192, b * 107, b * 75, b * 178, b * 69);
      a.closePath();
      od(a, d[0]);
    } else if (e == 2) {
      i = b * 400;
      j = b * 300;
      g.width = i;
      g.height = j;
      a.beginPath();
      a.moveTo(b * 80, b * 52);
      a.translate(b * -40, b * -30);
      a.bezierCurveTo(b * 124, b * 77, b * 241, b * 22, b * 311, b * 65);
      a.bezierCurveTo(b * 352, b * 90, b * 404, b * 176, b * 346, b * 234);
      a.bezierCurveTo(b * 283, b * 298, b * 179, b * 299, b * 145, b * 291);
      a.bezierCurveTo(b * 108, b * 282, b * 100, b * 239, b * 63, b * 205);
      a.bezierCurveTo(b * 37, b * 181, b * 45, b * 131, b * 80, b * 107);
      a.closePath();
      od(a, d[0]);
    }
    return g;
  }
  function im(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 234;
    c.height = a * 183;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 25);
    d.bezierCurveTo(a * 150, a * 3, a * 181, a * 22, a * 203, a * 41);
    d.bezierCurveTo(a * 225, a * 63, a * 225, a * 105, a * 198, a * 133);
    d.bezierCurveTo(a * 179, a * 157, a * 134, a * 178, a * 81, a * 164);
    d.bezierCurveTo(a * 19, a * 148, a * 6, a * 95, a * 21, a * 66);
    d.bezierCurveTo(a * 34, a * 39, a * 52, a * 33, a * 75, a * 25);
    d.closePath();
    od(d, b[0], b[0], a * 4);
    return c;
  }
  const am = 7;
  function rm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 277.34375);
    e.bezierCurveTo(a * 197.5, a * 259.84375, a * 197.5, a * 259.84375, a * 298.5, a * 242.34375);
    e.bezierCurveTo(a * 311.5, a * 231.34375, a * 307.5, a * 168.34375, a * 298.5, a * 150.34375);
    e.bezierCurveTo(a * 198, a * 170.34375, a * 198, a * 170.34375, a * 97.5, a * 190.34375);
    e.closePath();
    od(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 214.34375);
    e.bezierCurveTo(a * 199, a * 196.34375, a * 199, a * 196.34375, a * 299.5, a * 178.34375);
    e.closePath();
    od(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 247.34375);
    e.bezierCurveTo(a * 201.5, a * 229.34375, a * 201.5, a * 229.34375, a * 304.5, a * 211.34375);
    e.closePath();
    od(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.5, a * 189.34375);
    e.bezierCurveTo(a * 97, a * 199.84375, a * 97, a * 199.84375, a * 96.5, a * 210.34375);
    e.bezierCurveTo(a * 110.5, a * 204.34375, a * 110.5, a * 204.34375, a * 124.5, a * 198.34375);
    e.bezierCurveTo(a * 137.5, a * 203.84375, a * 137.5, a * 203.84375, a * 150.5, a * 209.34375);
    e.bezierCurveTo(a * 172, a * 197.84375, a * 172, a * 197.84375, a * 193.5, a * 186.34375);
    e.bezierCurveTo(a * 211.5, a * 189.84375, a * 211.5, a * 189.84375, a * 229.5, a * 193.34375);
    e.bezierCurveTo(a * 240.5, a * 193.34375, a * 240.5, a * 193.34375, a * 251.5, a * 193.34375);
    e.bezierCurveTo(a * 261, a * 182.84375, a * 261, a * 182.84375, a * 270.5, a * 172.34375);
    e.bezierCurveTo(a * 287.5, a * 169.34375, a * 287.5, a * 169.34375, a * 304.5, a * 166.34375);
    e.bezierCurveTo(a * 304.5, a * 156.34375, a * 300.5, a * 145.34375, a * 298.5, a * 147.34375);
    e.closePath();
    od(e, c[3], c[4], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 300.5, a * 147.34375);
    e.bezierCurveTo(a * 293.5, a * 121.34375, a * 278.5, a * 106.34375, a * 256.5, a * 101.34375);
    e.bezierCurveTo(a * 176.5, a * 145.34375, a * 176.5, a * 145.34375, a * 96.5, a * 189.34375);
    e.closePath();
    od(e, c[5], c[6], a * 12);
    hd(e, a * 252.5, a * 129.34375, a * 18.027756377319946);
    od(e, c[7]);
    hd(e, a * 248.5, a * 121.34375, a * 8.246211251235321);
    od(e, c[8]);
    return d;
  }
  function sm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 220;
    d.height = a * 180;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -90, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    od(e, c[5], c[5], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    od(e, c[5], c[5], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    od(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    od(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    od(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    od(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    od(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    od(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    od(e, os, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    od(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    od(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    od(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    od(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    od(e, Pn, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    od(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    od(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 140, a * 265.33333587646484);
    e.bezierCurveTo(a * 141, a * 250.33333587646484, a * 148, a * 244.33333587646484, a * 160, a * 241.33333587646484);
    e.bezierCurveTo(a * 200, a * 241.33333587646484, a * 200, a * 241.33333587646484, a * 240, a * 241.33333587646484);
    e.bezierCurveTo(a * 256, a * 243.33333587646484, a * 260, a * 255.33333587646484, a * 260, a * 265.33333587646484);
    e.bezierCurveTo(a * 261, a * 281.33333587646484, a * 247, a * 289.33333587646484, a * 240, a * 289.33333587646484);
    e.bezierCurveTo(a * 161, a * 289.33333587646484, a * 200.5, a * 289.33333587646484, a * 161, a * 289.33333587646484);
    e.bezierCurveTo(a * 149, a * 288.33333587646484, a * 142, a * 278.33333587646484, a * 140, a * 266.33333587646484);
    e.closePath();
    od(e, undefined, c[4], a * 6);
    e.globalAlpha = 0.5;
    e.scale(1, 1);
    e.translate(a * 105, a * 155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 74.27557373046875, a * 5.406280517578125, a * 90.27557373046875, a * 6.406280517578125, a * 99.27557373046875, a * 5.406280517578125);
    e.bezierCurveTo(a * 120.27557373046875, a * 5.406280517578125, a * 126.27557373046875, a * 10.406280517578125, a * 136.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 157.77557373046875, a * 37.906280517578125, a * 157.77557373046875, a * 37.906280517578125, a * 179.27557373046875, a * 55.406280517578125);
    e.bezierCurveTo(a * 190.27557373046875, a * 63.406280517578125, a * 192.27557373046875, a * 77.40628051757812, a * 189.27557373046875, a * 91.40628051757812);
    e.bezierCurveTo(a * 183.27557373046875, a * 108.40628051757812, a * 176.27557373046875, a * 110.40628051757812, a * 169.27557373046875, a * 118.40628051757812);
    e.bezierCurveTo(a * 152.27557373046875, a * 133.40628051757812, a * 152.27557373046875, a * 133.40628051757812, a * 135.27557373046875, a * 148.40628051757812);
    e.bezierCurveTo(a * 87.27557373046875, a * 143.40628051757812, a * 87.27557373046875, a * 143.40628051757812, a * 39.27557373046875, a * 138.40628051757812);
    e.bezierCurveTo(a * 26.77557373046875, a * 123.40628051757812, a * 26.77557373046875, a * 123.40628051757812, a * 14.27557373046875, a * 108.40628051757812);
    e.bezierCurveTo(a * 2.27557373046875, a * 95.40628051757812, a * 2.27557373046875, a * 92.40628051757812, a * 3.27557373046875, a * 83.40628051757812);
    e.bezierCurveTo(a * 4.27557373046875, a * 63.406280517578125, a * 12.27557373046875, a * 60.406280517578125, a * 24.27557373046875, a * 40.406280517578125);
    e.closePath();
    od(e, c[5], c[5], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -110, a * -155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    od(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    od(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    od(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    od(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    od(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    od(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    od(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    od(e, c[2], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    od(e, oh, c[3], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    od(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    od(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    od(e, c[0], c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    od(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    od(e, Yh, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    od(e, c[0], c[0], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    od(e, undefined, c[1], a * 2);
    return d;
  }
  function hm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    od(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    od(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    od(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    od(e, c[0], c[0], a * 12);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    od(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    od(e, c[4]);
    hd(e, a * 125.5, a * 140.34375, a * 11.180339887498949);
    od(e, c[5]);
    hd(e, a * 122.5, a * 135.34375, a * 5.0990195135927845);
    od(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    od(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    od(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    od(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 296.5, a * 287.34375);
    e.bezierCurveTo(a * 311.5, a * 291.34375, a * 311.5, a * 291.34375, a * 326.5, a * 295.34375);
    e.closePath();
    od(e, undefined, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 289.34375);
    e.bezierCurveTo(a * 308.5, a * 297.34375, a * 308.5, a * 297.34375, a * 322.5, a * 305.34375);
    e.closePath();
    od(e, undefined, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 291.34375);
    e.bezierCurveTo(a * 304, a * 303.34375, a * 304, a * 303.34375, a * 313.5, a * 315.34375);
    e.closePath();
    od(e, Aj, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 161.34375);
    e.bezierCurveTo(a * 230.5, a * 160.34375, a * 236.5, a * 158.34375, a * 238.5, a * 161.34375);
    e.bezierCurveTo(a * 238.5, a * 157.34375, a * 228.5, a * 159.34375, a * 227.5, a * 161.34375);
    e.closePath();
    od(e, Yh, c[9], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167.5, a * 248.34375);
    e.bezierCurveTo(a * 165.5, a * 251.34375, a * 168.5, a * 256.34375, a * 168.5, a * 253.34375);
    e.bezierCurveTo(a * 166.5, a * 252.34375, a * 168.5, a * 246.34375, a * 166.5, a * 247.34375);
    e.closePath();
    od(e, undefined, c[9], a * 3);
    return d;
  }
  function gm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 309;
    d.height = a * 287;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    od(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    od(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    od(e, c[0], c[0], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    od(e, c[0], c[0], a * 10);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    od(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    od(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    od(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    od(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 109.5, a * 51.53125);
    e.bezierCurveTo(a * 107.5, a * 92.53125, a * 91.5, a * 95.53125, a * 59.5, a * 101.53125);
    od(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 51.53125);
    e.bezierCurveTo(a * 71, a * 64.53125, a * 69.5, a * 76.53125, a * 69.5, a * 77.53125);
    e.closePath();
    od(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 63.53125);
    e.bezierCurveTo(a * 70.5, a * 65.03125, a * 70.5, a * 65.03125, a * 56.5, a * 66.53125);
    e.closePath();
    od(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.5, a * 84.53125);
    e.bezierCurveTo(a * 125.5, a * 110.03125, a * 125.5, a * 110.03125, a * 125.5, a * 135.53125);
    e.closePath();
    od(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 149.5, a * 108.53125);
    e.bezierCurveTo(a * 150, a * 137.03125, a * 150, a * 137.03125, a * 150.5, a * 165.53125);
    e.closePath();
    od(e, c[1], c[2], a * 7);
    return d;
  }
  const lm = 12;
  const um = 7;
  function bm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 142;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 65, a * 80);
    e.rotate(0.2);
    ud(e, 9, a * 60, a * 10);
    e.restore();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 65, a * 71);
    e.rotate(0.2);
    ud(e, 9, a * 60, a * 10);
    od(e, c[1], c[2], 4);
    e.rotate(-0.32);
    ud(e, 9, a * 38, a * 10);
    od(e, c[3], c[4], 4);
    e.rotate(0.68);
    ud(e, 9, a * 20, a * 8);
    od(e, c[5], c[6], 6);
    e.restore();
    return d;
  }
  function dm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 372;
    c.height = a * 375;
    d.globalAlpha = 0.5;
    d.translate(a * 15, a * 15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    od(d, b[0]);
    d.globalAlpha = 1;
    d.translate(a * -15, a * -15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    od(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.00003051757812, a * 192.94886779785156);
    d.bezierCurveTo(a * 185.00003051757812, a * 66.94886779785156, a * 184.50003051757812, a * 104.94886779785156, a * 183.00003051757812, a * 16.948867797851562);
    d.bezierCurveTo(a * 216.00003051757812, a * 47.94886779785156, a * 219.00003051757812, a * 80.94886779785156, a * 218.00003051757812, a * 113.94886779785156);
    d.bezierCurveTo(a * 209.00003051757812, a * 165.94886779785156, a * 200.00003051757812, a * 176.94886779785156, a * 189.00003051757812, a * 192.94886779785156);
    d.closePath();
    od(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 190.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 207.00003051757812, a * 348.94886779785156, a * 205.00003051757812, a * 323.94886779785156, a * 209.00003051757812, a * 358.94886779785156);
    d.bezierCurveTo(a * 171.00003051757812, a * 334.94886779785156, a * 167.00003051757812, a * 302.94886779785156, a * 161.00003051757812, a * 268.94886779785156);
    d.bezierCurveTo(a * 160.00003051757812, a * 218.94886779785156, a * 181.00003051757812, a * 191.94886779785156, a * 189.00003051757812, a * 186.94886779785156);
    d.closePath();
    od(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 194.00003051757812, a * 195.94886779785156);
    d.bezierCurveTo(a * 116.00003051757812, a * 150.94886779785156, a * 116.00003051757812, a * 150.94886779785156, a * 38.000030517578125, a * 105.94886779785156);
    d.bezierCurveTo(a * 67.00003051757812, a * 90.94886779785156, a * 96.00003051757812, a * 99.94886779785156, a * 123.00003051757812, a * 111.94886779785156);
    d.bezierCurveTo(a * 183.00003051757812, a * 152.94886779785156, a * 179.00003051757812, a * 180.94886779785156, a * 193.00003051757812, a * 194.94886779785156);
    d.closePath();
    od(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 190.94886779785156);
    d.bezierCurveTo(a * 250.00003051757812, a * 133.94886779785156, a * 311.0000305175781, a * 78.94886779785156, a * 311.0000305175781, a * 76.94886779785156);
    d.bezierCurveTo(a * 306.0000305175781, a * 127.94886779785156, a * 283.0000305175781, a * 148.94886779785156, a * 261.0000305175781, a * 166.94886779785156);
    d.bezierCurveTo(a * 220.00003051757812, a * 197.94886779785156, a * 191.00003051757812, a * 194.94886779785156, a * 189.00003051757812, a * 195.94886779785156);
    d.closePath();
    od(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 194.94886779785156);
    d.bezierCurveTo(a * 268.5000305175781, a * 211.94886779785156, a * 268.5000305175781, a * 211.94886779785156, a * 348.0000305175781, a * 228.94886779785156);
    d.bezierCurveTo(a * 316.0000305175781, a * 247.94886779785156, a * 298.0000305175781, a * 256.94886779785156, a * 250.00003051757812, a * 246.94886779785156);
    d.bezierCurveTo(a * 197.00003051757812, a * 229.94886779785156, a * 189.00003051757812, a * 202.94886779785156, a * 188.00003051757812, a * 199.94886779785156);
    d.closePath();
    od(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 116.50003051757812, a * 238.44886779785156, a * 116.50003051757812, a * 238.44886779785156, a * 41.000030517578125, a * 284.94886779785156);
    d.bezierCurveTo(a * 49.000030517578125, a * 252.94886779785156, a * 56.000030517578125, a * 242.94886779785156, a * 80.00003051757812, a * 215.94886779785156);
    d.bezierCurveTo(a * 125.00003051757812, a * 181.94886779785156, a * 174.00003051757812, a * 183.94886779785156, a * 192.00003051757812, a * 191.94886779785156);
    d.closePath();
    od(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    od(d, undefined, b[2], a * 4);
    return c;
  }
  function vm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 130;
    var a = b * 142;
    var i = g / 2;
    var j = a / 2;
    e.width = g;
    e.height = a;
    f.translate(i, j + b * 7);
    f.globalAlpha = c ? 0.5 : 1;
    hd(f, 0, 0, b * 60);
    od(f, d[0]);
    f.translate(0, b * -7);
    f.globalAlpha = 1;
    hd(f, 0, 0, b * 60);
    od(f, d[1], d[2], b * 4);
    hd(f, 0, 0, b * 40);
    od(f, d[3]);
    hd(f, 0, 0, b * 25);
    od(f, d[4], d[5], b * 8);
    return e;
  }
  const mm = 4;
  function cm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 626;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    od(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    od(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 129);
    e.bezierCurveTo(a * 32, a * 135, a * 48, a * 136, a * 53, a * 129);
    e.bezierCurveTo(a * 56, a * 97, a * 53, a * 82, a * 52, a * 64);
    e.bezierCurveTo(a * 49, a * 33, a * 44, a * 27, a * 41, a * 21);
    e.bezierCurveTo(a * 31, a * 40, a * 28, a * 84, a * 27, a * 127);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    od(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 475);
    e.bezierCurveTo(a * 38, a * 482, a * 48, a * 480, a * 54, a * 474);
    e.bezierCurveTo(a * 54, a * 509.5, a * 54, a * 509.5, a * 54, a * 545);
    e.bezierCurveTo(a * 46, a * 554, a * 36, a * 552, a * 28, a * 545);
    e.closePath();
    od(e, c[4], c[5], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 496);
    e.bezierCurveTo(a * 39, a * 506, a * 49, a * 503, a * 54, a * 496);
    od(e, ct, c[5], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 521);
    e.bezierCurveTo(a * 41, a * 529, a * 49, a * 524, a * 54, a * 520);
    od(e, undefined, c[5], a * 8);
    return d;
  }
  function pm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 139);
    e.bezierCurveTo(a * 18, a * 163, a * 22, a * 156, a * 53, a * 157);
    e.bezierCurveTo(a * 97.5, a * 157, a * 97.5, a * 157, a * 142, a * 157);
    e.bezierCurveTo(a * 150, a * 157, a * 153, a * 156, a * 154, a * 142);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.save();
    e.translate(a * 86.5, a * 81.5);
    ad(e, a * -66.5, a * -65.5, a * 133, a * 131, a * 10);
    e.restore();
    od(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 84.5, a * 79);
    ad(e, a * -50.5, a * -49, a * 101, a * 98, a * 10);
    e.restore();
    od(e, c[3], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 54);
    e.bezierCurveTo(a * 37, a * 48, a * 39, a * 44, a * 38, a * 41);
    e.bezierCurveTo(a * 42, a * 40, a * 45, a * 40, a * 50, a * 41);
    e.bezierCurveTo(a * 85, a * 36, a * 98, a * 37, a * 116, a * 42);
    e.bezierCurveTo(a * 132, a * 39, a * 132, a * 39, a * 133, a * 56);
    e.bezierCurveTo(a * 136, a * 73, a * 136, a * 84, a * 132, a * 106);
    e.bezierCurveTo(a * 47, a * 113, a * 85.5, a * 106, a * 39, a * 106);
    e.bezierCurveTo(a * 32, a * 81, a * 38, a * 60, a * 42, a * 55);
    e.closePath();
    od(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 28, a * 24);
    e.rotate(0);
    ad(e, a * -14, a * -14, a * 28, a * 28, a * 4);
    e.restore();
    od(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143, a * 23);
    e.rotate(0);
    ad(e, a * -14, a * -14, a * 28, a * 28, a * 4);
    e.restore();
    od(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 80);
    e.bezierCurveTo(a * 73, a * 78, a * 84, a * 74, a * 100, a * 64);
    e.bezierCurveTo(a * 111, a * 57, a * 125, a * 67, a * 108, a * 84);
    e.bezierCurveTo(a * 96, a * 95, a * 86, a * 96, a * 70, a * 88);
    e.bezierCurveTo(a * 62.5, a * 84, a * 62.5, a * 84, a * 55, a * 80);
    e.closePath();
    od(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    od(e, c[8], c[9], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    od(e, c[9]);
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 15, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
    e.closePath();
    od(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    ad(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    od(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143.5, a * 137);
    ad(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
    e.restore();
    od(e, c[1], c[2], a * 5);
    return d;
  }
  function Cm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (Sb === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(0.2);
      ud(e, 9, a * 41, a * 10);
      e.restore();
      od(e, c[0]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.2);
    ud(e, 9, a * 41, a * 10);
    od(e, c[1], c[2], a * 4);
    e.rotate(-0.32);
    ud(e, 9, a * 32, a * 10);
    od(e, c[3], c[4], a * 4);
    e.rotate(0.68);
    ud(e, 9, a * 23, a * 8);
    od(e, c[5], c[6], a * 6);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    ad(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    od(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    ad(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    od(e, c[4], c[4], a * 2);
    hd(e, a * 45, a * 29, a * 7);
    od(e, c[5]);
    hd(e, a * 45, a * 61, a * 7);
    od(e, c[5]);
    hd(e, a * 28, a * 45, a * 7);
    od(e, c[5]);
    hd(e, a * 62, a * 45, a * 7);
    od(e, c[5]);
    return d;
  }
  function Tm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 125;
    d.height = a * 139;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 63, a * 79);
    e.rotate(1);
    ud(e, 8, a * 60, a * 10);
    od(e, c[0]);
    e.restore();
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 63, a * 69);
    e.rotate(1);
    ud(e, 8, a * 60, a * 10);
    od(e, c[1], c[2], 4);
    e.rotate(0.56);
    ud(e, 8, a * 40, a * 10);
    od(e, c[3], c[4], 4);
    e.rotate(0.28);
    ud(e, 8, a * 28, a * 8);
    od(e, c[5]);
    e.restore();
    return d;
  }
  function fm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 108;
    d.height = a * 669;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 54, a * 389.5);
    ad(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
    e.restore();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    od(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 54, a * 389.5);
    e.rotate(0);
    ad(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
    e.restore();
    od(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    od(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    od(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    od(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    od(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    od(e, c[8]);
    return d;
  }
  function zm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (Sb === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1);
      ud(e, 8, a * 41, a * 10);
      od(e, c[0]);
      e.restore();
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1);
    ud(e, 8, a * 41, a * 10);
    od(e, c[1], c[2], a * 4);
    e.rotate(0.56);
    ud(e, 8, a * 33, a * 10);
    od(e, c[3], c[4], a * 4);
    e.rotate(0.28);
    ud(e, 8, a * 24, a * 8);
    od(e, c[5]);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    ad(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    od(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    ad(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    od(e, c[4], c[4], a * 2);
    hd(e, a * 45, a * 29, a * 7);
    od(e, c[5]);
    hd(e, a * 45, a * 61, a * 7);
    od(e, c[5]);
    hd(e, a * 28, a * 45, a * 7);
    od(e, c[5]);
    hd(e, a * 62, a * 45, a * 7);
    od(e, c[5]);
    return d;
  }
  function ym(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 165;
    d.height = a * 123;
    e.save();
    e.translate(a * 81, a * 65);
    ad(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
    e.restore();
    od(e, c[0]);
    e.save();
    e.translate(a * 81, a * 58);
    ad(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
    e.restore();
    od(e, c[1], c[2], 4);
    e.save();
    e.translate(a * 81, a * 58);
    ad(e, a * -69, a * -47, a * 138, a * 93, a * 15);
    e.restore();
    od(e, c[3], c[4], 4);
    e.save();
    e.translate(a * 79, a * 54);
    ad(e, a * -34, a * -40, a * 68, a * 88, a * 13);
    e.restore();
    od(e, undefined, c[5], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 13);
    e.bezierCurveTo(a * 43.5, a * 55, a * 43.5, a * 55, a * 43, a * 101);
    e.closePath();
    od(e, Aj, c[6], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 13);
    e.bezierCurveTo(a * 115, a * 56, a * 115, a * 56, a * 115, a * 101);
    e.closePath();
    od(e, undefined, c[6], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 6);
    e.bezierCurveTo(a * 35, a * 56, a * 36, a * 109, a * 35, a * 110);
    e.closePath();
    od(e, Wb, c[7], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 6);
    e.bezierCurveTo(a * 123, a * 56, a * 123, a * 56, a * 123, a * 110);
    e.closePath();
    od(e, undefined, c[7], 4);
    e.save();
    e.translate(a * 79, a * 113);
    ad(e, a * -18, a * -2, a * 36, a * 4, a * 20);
    e.restore();
    od(e, undefined, c[8], 4);
    e.save();
    e.translate(a * 75, a * 118);
    ad(e, a * -6, a * -2.5, a * 20, a * 5, a * 20);
    e.restore();
    od(e, c[8]);
    return d;
  }
  function wm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 100;
    d.height = a * 648;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    ad(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    e.restore();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 43);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 73, a * 97);
    e.bezierCurveTo(a * 66, a * 116, a * 43, a * 122, a * 26, a * 99);
    e.closePath();
    od(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    ad(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    e.restore();
    od(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    od(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    od(e, os, c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    od(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    od(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    od(e, c[5], c[6], a * 8);
    e.save();
    e.translate(a * -46, a * -50);
    e.scale(2, 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 80);
    e.bezierCurveTo(a * 51, a * 89.5, a * 51, a * 89.5, a * 51, a * 99);
    e.bezierCurveTo(a * 49, a * 103, a * 46, a * 105, a * 44, a * 99);
    e.bezierCurveTo(a * 44, a * 88.5, a * 44, a * 88.5, a * 44, a * 78);
    e.closePath();
    od(e, c[8]);
    e.restore();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
    e.closePath();
    od(e, c[8], c[9], a * 8);
    e.scale(2, 2);
    e.translate(a * -23, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 69);
    e.bezierCurveTo(a * 50, a * 76, a * 43, a * 75, a * 38, a * 69);
    e.bezierCurveTo(a * 43, a * 57, a * 43, a * 57, a * 48, a * 45);
    e.closePath();
    od(e, c[10]);
    return d;
  }
  function Pm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 115;
    d.height = a * 585;
    e.scale(-1, 1);
    e.translate(a * -110, 0);
    e.translate(a * 10, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 51.5, a * 342);
    ad(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    e.restore();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
    e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
    e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
    e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    od(e, c[0]);
    e.translate(a * -10, a * -10);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 51.5, a * 342);
    ad(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
    e.restore();
    od(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    od(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
    e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
    e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    od(e, c[5], c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    od(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 427);
    e.bezierCurveTo(a * 47, a * 435, a * 55, a * 435, a * 67, a * 427);
    od(e, md, c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 448);
    e.bezierCurveTo(a * 46, a * 454, a * 54, a * 457, a * 65, a * 449);
    od(e, tq, c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    od(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
    e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
    e.closePath();
    od(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
    e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    od(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    od(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    od(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    od(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    od(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    od(e, c[7], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 113);
    e.bezierCurveTo(a * 65, a * 140, a * 75, a * 166, a * 52, a * 169);
    e.bezierCurveTo(a * 29, a * 168, a * 41, a * 143, a * 53, a * 112);
    e.closePath();
    od(e, c[3], c[4], a * 6);
    return d;
  }
  function km(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 43;
    d.height = a * 209;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 21, a * 102.5);
    ad(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
    e.restore();
    od(e, c[0]);
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 10);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 6);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    od(e, c[0]);
    e.translate(0, a * -20);
    e.globalAlpha = 1;
    e.translate(0, a * 10);
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 21, a * 102.5);
    ad(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
    e.restore();
    od(e, c[1], c[2], a * 4);
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 10);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
    e.closePath();
    od(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    od(e, c[5], c[6], a * 4);
    e.translate(0, a * 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
    e.closePath();
    od(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 6);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    od(e, c[8]);
    return d;
  }
  function Am(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 148;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 65, a * 85);
    e.rotate(1.4);
    ud(e, 7, a * 60, a * 10);
    e.restore();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 65, a * 74);
    e.rotate(1.4);
    ud(e, 7, a * 60, a * 10);
    od(e, c[1], c[2], 4);
    e.rotate(0.64);
    ud(e, 7, a * 40, a * 10);
    od(e, c[3], c[4], 4);
    e.rotate(0.12);
    ud(e, 7, a * 23, a * 5);
    e.restore();
    od(e, c[5]);
    return d;
  }
  function xm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 128;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 7);
    e.bezierCurveTo(a * 169, a * 14, a * 212, a * 9, a * 241, a * 5);
    e.bezierCurveTo(a * 211, a * 63, a * 158, a * 92, a * 103, a * 109);
    e.bezierCurveTo(a * 73, a * 126, a * 54, a * 124, a * 6, a * 99);
    e.bezierCurveTo(a * 82, a * 63, a * 113, a * 35, a * 137, a * 8);
    e.closePath();
    od(e, c[0], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 124);
    e.bezierCurveTo(a * 111, a * 126, a * 162, a * 97, a * 203, a * 61);
    e.bezierCurveTo(a * 156, a * 98, a * 131, a * 106, a * 105, a * 109);
    e.bezierCurveTo(a * 99, a * 121, a * 87, a * 124, a * 72, a * 124);
    e.closePath();
    od(e, c[2], c[3], a * 1);
    return d;
  }
  function Jm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 647;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 45, a * 384.5);
    ad(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    od(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 45, a * 384.5);
    ad(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    od(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
    e.closePath();
    od(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    od(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    od(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    od(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
    e.closePath();
    od(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    od(e, c[8]);
    return d;
  }
  function Mm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    od(e, c[8], c[9], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    od(e, c[9]);
    e.globalAlpha = 0.5;
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 15, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
    e.closePath();
    od(e, c[4], c[5], a * 5);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    ad(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    od(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143.5, a * 137);
    ad(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
    e.restore();
    od(e, c[1], c[2], a * 5);
    return d;
  }
  function Bm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 304;
    d.height = a * 278;
    e.translate(a * 10, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
    e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    od(e, c[0]);
    e.translate(a * -10, a * -25);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    od(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
    e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    od(e, c[3], c[4], a * 15);
    return d;
  }
  function Em(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    ud(e, 6, a * 146, a * 30);
    e.restore();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    ud(e, 6, a * 146, a * 30);
    e.restore();
    od(e, c[1], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    ud(e, 6, a * 105, a * 30);
    e.restore();
    od(e, c[3], c[3], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    ud(e, 6, a * 66, a * 30);
    e.restore();
    od(e, c[4], c[2], a * 8);
    e.save();
    e.translate(a * 131, a * 116);
    ud(e, 7, a * 17, a * 8);
    e.restore();
    od(e, c[6]);
    e.save();
    e.translate(a * 163, a * 168);
    ud(e, 7, a * 25, a * 8);
    e.restore();
    od(e, c[6]);
    e.save();
    e.translate(a * 117, a * 151);
    ud(e, 7, a * 11, a * 8);
    e.restore();
    od(e, c[6]);
    e.save();
    e.translate(a * 167, a * 122);
    ud(e, 7, a * 12, a * 8);
    e.restore();
    od(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    od(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 100);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    od(e, Nl, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * 100);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    od(e, undefined, c[2], a * 8);
    return d;
  }
  function Dm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    ud(e, 6, a * 146, a * 30);
    e.restore();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    ud(e, 6, a * 146, a * 30);
    e.restore();
    od(e, c[1], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    ud(e, 6, a * 105, a * 30);
    e.restore();
    od(e, c[3], c[3], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    ud(e, 6, a * 66, a * 30);
    e.restore();
    od(e, c[4], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    ud(e, 6, a * 31, a * 30);
    e.restore();
    od(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    od(e, $q, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 100);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    od(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * 100);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    od(e, undefined, c[2], a * 8);
    return d;
  }
  function Im(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 106;
    d.height = a * 681;
    e.translate(a * 20, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    ad(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
    e.restore();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    od(e, c[0]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    ad(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
    e.restore();
    od(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    od(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    od(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    od(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    od(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    od(e, c[8]);
    return d;
  }
  function Sm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 200;
    d.height = a * 200;
    e.save();
    e.translate(a * 112, a * 158);
    ad(e, a * -86.5, a * -86, a * 150, a * 35, a * 20);
    e.restore();
    od(e, c[0]);
    e.save();
    e.translate(a * 170, a * 100);
    ad(e, a * -86.5, a * -86, a * 35, a * 150, a * 20);
    e.restore();
    od(e, c[0]);
    return d;
  }
  function Qm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(0, a * 4);
    if (Sb === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1.4);
      ud(e, 7, a * 41, a * 10);
      e.restore();
      od(e, c[0]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1.4);
    ud(e, 7, a * 41, a * 10);
    od(e, c[1], c[2], a * 4);
    ud(e, 7, a * 35, a * 10);
    od(e, c[3], c[4], a * 4);
    ud(e, 7, a * 23, a * 5);
    e.restore();
    od(e, c[5]);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    ad(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    od(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    ad(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    od(e, c[4], c[4], a * 2);
    hd(e, a * 45, a * 29, a * 7);
    od(e, c[5]);
    hd(e, a * 45, a * 61, a * 7);
    od(e, c[5]);
    hd(e, a * 28, a * 45, a * 7);
    od(e, c[5]);
    hd(e, a * 62, a * 45, a * 7);
    od(e, c[5]);
    return d;
  }
  function _m(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 501;
    d.height = a * 309;
    e.translate(0, a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 184);
    e.bezierCurveTo(a * 169, a * 196, a * 194, a * 198, a * 227, a * 198);
    e.bezierCurveTo(a * 235, a * 222, a * 236, a * 223, a * 241, a * 226);
    e.bezierCurveTo(a * 245, a * 228, a * 257, a * 228, a * 263, a * 226);
    e.bezierCurveTo(a * 267, a * 225, a * 270, a * 211, a * 275, a * 198);
    e.bezierCurveTo(a * 332, a * 194, a * 347, a * 192, a * 372, a * 188);
    e.bezierCurveTo(a * 366, a * 174.5, a * 366, a * 174.5, a * 360, a * 161);
    e.bezierCurveTo(a * 253.5, a * 162, a * 253.5, a * 162, a * 147, a * 163);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 116);
    e.bezierCurveTo(a * 90, a * 101, a * 96, a * 89, a * 106, a * 83);
    e.bezierCurveTo(a * 86, a * 79, a * 86, a * 52, a * 93, a * 38);
    e.bezierCurveTo(a * 99, a * 51, a * 107, a * 57, a * 122, a * 63);
    e.bezierCurveTo(a * 130, a * 53, a * 141, a * 46, a * 161, a * 46);
    e.bezierCurveTo(a * 157, a * 31, a * 158, a * 20, a * 169, a * 6);
    e.bezierCurveTo(a * 171, a * 24, a * 186, a * 33, a * 198, a * 45);
    e.bezierCurveTo(a * 252, a * 45, a * 252, a * 45, a * 306, a * 45);
    e.bezierCurveTo(a * 323, a * 33, a * 332, a * 21, a * 335, a * 7);
    e.bezierCurveTo(a * 349, a * 21, a * 347, a * 36, a * 345, a * 46);
    e.bezierCurveTo(a * 364, a * 46, a * 369, a * 48, a * 377, a * 63);
    e.bezierCurveTo(a * 398, a * 58, a * 403, a * 49, a * 409, a * 40);
    e.bezierCurveTo(a * 419, a * 57, a * 411, a * 79, a * 398, a * 85);
    e.bezierCurveTo(a * 405, a * 100, a * 405, a * 106, a * 401, a * 118);
    e.bezierCurveTo(a * 332.5, a * 128.5, a * 332.5, a * 128.5, a * 264, a * 139);
    e.closePath();
    od(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 122, a * 191);
    e.bezierCurveTo(a * 123, a * 237, a * 135, a * 245, a * 153, a * 259);
    e.bezierCurveTo(a * 167, a * 269, a * 158, a * 281, a * 118, a * 276);
    e.bezierCurveTo(a * 104, a * 273, a * 98, a * 268, a * 93, a * 242);
    e.bezierCurveTo(a * 89, a * 220, a * 92, a * 201, a * 102, a * 179);
    e.closePath();
    od(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403, a * 182);
    e.bezierCurveTo(a * 414, a * 215, a * 412, a * 232, a * 403, a * 260);
    e.bezierCurveTo(a * 395, a * 274, a * 375, a * 272, a * 356, a * 270);
    e.bezierCurveTo(a * 345, a * 268, a * 339, a * 262, a * 354, a * 252);
    e.bezierCurveTo(a * 370, a * 242, a * 380, a * 225, a * 384, a * 184);
    e.closePath();
    od(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155, a * 157);
    e.bezierCurveTo(a * 146, a * 189, a * 137, a * 198, a * 114, a * 219);
    e.bezierCurveTo(a * 104, a * 212, a * 98, a * 203, a * 89, a * 189);
    e.bezierCurveTo(a * 82, a * 178, a * 91, a * 164, a * 93, a * 136);
    e.closePath();
    od(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 347, a * 162);
    e.bezierCurveTo(a * 357, a * 195, a * 376, a * 209, a * 387, a * 217);
    e.bezierCurveTo(a * 409, a * 201, a * 420, a * 181, a * 416, a * 166);
    e.bezierCurveTo(a * 410, a * 150, a * 412, a * 149, a * 408, a * 130);
    e.closePath();
    od(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 134);
    e.bezierCurveTo(a * 79, a * 102, a * 92, a * 84, a * 108, a * 92);
    e.bezierCurveTo(a * 149, a * 108, a * 184, a * 111, a * 242, a * 111);
    e.bezierCurveTo(a * 294, a * 108, a * 341, a * 105, a * 386, a * 98);
    e.bezierCurveTo(a * 412, a * 91, a * 417, a * 86, a * 415, a * 133);
    e.bezierCurveTo(a * 413, a * 160, a * 413, a * 160, a * 368, a * 174);
    e.bezierCurveTo(a * 308, a * 184, a * 291, a * 185, a * 270, a * 186);
    e.bezierCurveTo(a * 264, a * 206, a * 262, a * 215, a * 253, a * 215);
    e.bezierCurveTo(a * 239, a * 217, a * 239, a * 211, a * 231, a * 186);
    e.bezierCurveTo(a * 178, a * 184, a * 156, a * 179, a * 112, a * 162);
    e.bezierCurveTo(a * 87, a * 151, a * 90, a * 144, a * 87, a * 137);
    e.closePath();
    od(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 98);
    e.bezierCurveTo(a * 84, a * 121, a * 109, a * 102, a * 124, a * 117);
    e.bezierCurveTo(a * 138, a * 136, a * 123, a * 165, a * 94, a * 150);
    e.bezierCurveTo(a * 66, a * 131, a * 64, a * 115, a * 63, a * 99);
    e.closePath();
    od(e, c[3], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 449, a * 97);
    e.bezierCurveTo(a * 446, a * 143, a * 415, a * 151, a * 402, a * 155);
    e.bezierCurveTo(a * 386, a * 157, a * 373, a * 133, a * 391, a * 116);
    e.bezierCurveTo(a * 402, a * 106, a * 432, a * 124, a * 449, a * 97);
    e.closePath();
    od(e, c[3], c[2], a * 10);
    return d;
  }
  function Rm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 135;
    d.height = a * 120;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 3.5, a * 55.25);
    e.bezierCurveTo(a * 3.5, a * 114.25, a * 2.5, a * 109.25, a * 3.5, a * 112.25);
    e.bezierCurveTo(a * 5.5, a * 119.25, a * 8.5, a * 119.25, a * 11.5, a * 119.25);
    e.bezierCurveTo(a * 15.5, a * 114.25, a * 13.5, a * 95.25, a * 14.5, a * 82.25);
    e.closePath();
    od(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6.5, a * 43.25);
    e.bezierCurveTo(a * 3.5, a * 27.25, a * 7.5, a * 20.25, a * 25.5, a * 11.25);
    e.bezierCurveTo(a * 45.5, a * -0.75, a * 73.5, a * 1.25, a * 107.5, a * 10.25);
    e.bezierCurveTo(a * 131.5, a * 21.25, a * 125.5, a * 34.25, a * 125.5, a * 36.25);
    e.closePath();
    od(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120.5, a * 62.25);
    e.bezierCurveTo(a * 121.5, a * 95.25, a * 120.5, a * 80.25, a * 120.5, a * 100.25);
    e.bezierCurveTo(a * 118.5, a * 119.25, a * 123.5, a * 118.25, a * 129.5, a * 113.25);
    e.bezierCurveTo(a * 133.5, a * 107.25, a * 130.5, a * 97.25, a * 130.5, a * 87.25);
    e.bezierCurveTo(a * 129.5, a * 56.25, a * 130, a * 70.75, a * 129.5, a * 54.25);
    e.closePath();
    od(e, c[0], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.5, a * 27);
    e.bezierCurveTo(a * 48.5, a * 5, a * 93.5, a * 14, a * 118.5, a * 26);
    e.bezierCurveTo(a * 132.5, a * 35, a * 133.5, a * 52, a * 132.5, a * 68);
    e.bezierCurveTo(a * 125.5, a * 87, a * 116.5, a * 84, a * 96.5, a * 75);
    e.bezierCurveTo(a * 60.5, a * 66, a * 52.5, a * 74, a * 37.5, a * 78);
    e.bezierCurveTo(a * 2.5, a * 86, a * 3.5, a * 78, a * 1.5, a * 61);
    e.bezierCurveTo(a * 1.5, a * 37, a * 9.5, a * 32, a * 15.5, a * 28);
    e.closePath();
    od(e, c[2], c[3], a * 7);
    return d;
  }
  function Fm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 101;
    e.translate(a * 0, a * 5);
    if (Sb === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      hd(e, a * 44, a * 55, a * 41);
      od(e, c[0]);
    }
    e.globalAlpha = 1;
    hd(e, a * 44, a * 45, a * 41);
    od(e, c[1], c[2], a * 4);
    hd(e, a * 44, a * 45, a * 31);
    od(e, c[3]);
    e.save();
    e.translate(a * 45, a * 45);
    ad(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    od(e, c[4], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    ad(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    od(e, c[4], c[4], a * 2);
    hd(e, a * 45, a * 29, a * 7);
    od(e, c[5]);
    hd(e, a * 45, a * 61, a * 7);
    od(e, c[5]);
    hd(e, a * 28, a * 45, a * 7);
    od(e, c[5]);
    hd(e, a * 62, a * 45, a * 7);
    od(e, c[5]);
    return d;
  }
  ;
  const jm = 8;
  function Gm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = b * 170;
    var a = b * 172;
    var j = i / 2;
    var k = a / 2;
    e.width = i;
    e.height = a;
    f.translate(j, k + b * 7);
    f.globalAlpha = c ? 0.5 : 0;
    hd(f, 0, 0, b * 60);
    od(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, b * -7);
    f.save();
    for (var h = 0; h < 10; h++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      ud(f, 3, b * 20, b * 4);
      od(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.restore();
    hd(f, 0, 0, b * 60);
    od(f, d[3], d[4], b * 4);
    hd(f, 0, 0, b * 40);
    od(f, d[5]);
    hd(f, 0, 0, b * 25);
    od(f, d[6], d[7], b * 8);
    return e;
  }
  function Wm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.save();
    f.translate(b * 85, b * 88);
    f.rotate(1.4);
    ud(f, 7, b * 60, b * 10);
    f.restore();
    od(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 80);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      ud(f, 3, b * 21, b * 4);
      od(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(1.4);
    ud(f, 7, b * 60, b * 10);
    od(f, d[3], d[4], b * 4);
    f.rotate(0.64);
    ud(f, 7, b * 40, b * 10);
    od(f, d[5], d[6], b * 4);
    f.rotate(0.12);
    ud(f, 7, b * 23, b * 5);
    f.restore();
    od(f, d[7]);
    return e;
  }
  function qm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 92;
    d.height = a * 108;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 10);
    e.bezierCurveTo(a * 37, a * 2, a * 49, a * 0, a * 61, a * 15);
    e.bezierCurveTo(a * 81, a * 31, a * 78, a * 25, a * 79, a * 37);
    e.bezierCurveTo(a * 76, a * 44, a * 81, a * 56, a * 85, a * 63);
    e.bezierCurveTo(a * 91, a * 71, a * 90, a * 78, a * 83, a * 84);
    e.bezierCurveTo(a * 60, a * 98, a * 67, a * 95, a * 57, a * 102);
    e.bezierCurveTo(a * 47, a * 106, a * 43, a * 106, a * 31, a * 98);
    e.bezierCurveTo(a * 22, a * 91, a * 17, a * 89, a * 7, a * 84);
    e.bezierCurveTo(a * 1, a * 77, a * 4, a * 73, a * 7, a * 60);
    e.bezierCurveTo(a * 11, a * 50, a * 5, a * 32, a * 15, a * 27);
    e.bezierCurveTo(a * 26, a * 18, a * 26, a * 24, a * 31, a * 10);
    e.closePath();
    od(e, c[0], c[1], 4);
    return d;
  }
  function Nm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 3);
    f.save();
    f.translate(b * 85, b * 95);
    f.rotate(1.4);
    ud(f, 7, b * 60, b * 10);
    f.restore();
    od(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 82);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      ud(f, 3, b * 21, b * 4);
      od(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(1);
    ud(f, 8, b * 60, b * 10);
    od(f, d[3], d[4], b * 4);
    f.rotate(0.56);
    ud(f, 8, b * 40, b * 10);
    od(f, d[5], d[6], b * 4);
    f.rotate(0.28);
    ud(f, 8, b * 28, b * 8);
    od(f, d[7]);
    f.restore();
    return e;
  }
  function Om(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 138;
    d.height = a * 133;
    e.globalAlpha = b ? 0.3 : 1;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
    e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 73.640625);
    e.bezierCurveTo(a * 7, a * 23.640625, a * 33, a * 19.640625, a * 71, a * 17.640625);
    e.bezierCurveTo(a * 129, a * 19.640625, a * 130, a * 45.640625, a * 130, a * 76.640625);
    e.bezierCurveTo(a * 90, a * 63.640625, a * 85, a * 63.640625, a * 73, a * 63.640625);
    e.bezierCurveTo(a * 38, a * 63.640625, a * 33, a * 66.640625, a * 8, a * 73.640625);
    e.closePath();
    od(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 28.640625);
    e.bezierCurveTo(a * 51, a * 25.640625, a * 56, a * 7.640625, a * 70, a * 5.640625);
    e.bezierCurveTo(a * 94, a * 7.640625, a * 87, a * 29.640625, a * 72, a * 28.640625);
    e.closePath();
    od(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 26.640625);
    e.bezierCurveTo(a * 42, a * 29.640625, a * 43, a * 31.640625, a * 42, a * 37.640625);
    od(e, undefined, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 26.640625);
    e.bezierCurveTo(a * 100, a * 28.640625, a * 98, a * 34.640625, a * 99, a * 38.640625);
    od(e, undefined, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
    e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    od(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
    e.closePath();
    od(e, c[3], c[4], a * 4);
    return d;
  }
  function Hm(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 170;
    e.height = b * 170;
    f.translate(0, b * 3);
    f.globalAlpha = c ? 0.5 : 1;
    f.save();
    f.translate(b * 85, b * 95);
    f.rotate(1.4);
    ud(f, 7, b * 60, b * 10);
    f.restore();
    od(f, d[0]);
    f.globalAlpha = 1;
    f.translate(b * 85, b * 82);
    for (var g = 0; g < 10; g++) {
      f.rotate(Math.PI / 5);
      f.save();
      f.translate(b * 65, 0);
      ud(f, 3, b * 21, b * 4);
      od(f, d[1], d[2], b * 4);
      f.restore();
    }
    f.save();
    f.translate(b * 0, b * 0);
    f.rotate(0.2);
    ud(f, 9, b * 60, b * 10);
    od(f, d[3], d[4], b * 4);
    f.rotate(-0.32);
    ud(f, 9, b * 38, b * 10);
    od(f, d[5], d[6], b * 4);
    f.rotate(0.68);
    ud(f, 9, b * 20, b * 8);
    od(f, d[7], d[8], b * 6);
    f.restore();
    return e;
  }
  function Um(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 69;
    d.height = a * 120;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 30, a * 84);
    ad(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
    e.restore();
    od(e, c[0]);
    e.save();
    e.translate(a * 30, a * 45);
    ad(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
    e.restore();
    od(e, c[0]);
    e.save();
    e.translate(a * 30, a * 17);
    ad(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
    e.restore();
    od(e, c[0]);
    e.save();
    e.translate(a * 30, a * 31);
    ad(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
    e.restore();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 36, a * 79.140625);
    ad(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
    e.restore();
    od(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 35, a * 40.140625);
    ad(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
    e.restore();
    od(e, c[3], c[4], a * 3);
    e.save();
    e.translate(a * 35, a * 12.140625);
    ad(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
    e.restore();
    od(e, c[3], c[4], a * 3);
    e.save();
    e.translate(a * 34.5, a * 26.140625);
    ad(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
    e.restore();
    od(e, c[3], c[4], a * 3);
    return d;
  }
  function Ym(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 151;
    d.height = a * 80;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 54);
    e.bezierCurveTo(a * 136, a * 18, a * 129, a * 18, a * 114, a * 13);
    e.bezierCurveTo(a * 51, a * 0, a * 36, a * 16, a * 34, a * 16);
    e.bezierCurveTo(a * 8, a * 28, a * 22, a * 56, a * 21, a * 57);
    e.closePath();
    od(e, c[2], c[3], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 40);
    e.bezierCurveTo(a * 132, a * 35, a * 132, a * 30, a * 132, a * 29);
    e.bezierCurveTo(a * 145, a * 38, a * 144, a * 43, a * 137, a * 54);
    e.closePath();
    od(e, c[0], c[1], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 20, a * 33);
    e.bezierCurveTo(a * 24, a * 44, a * 215, a * 39, a * 23, a * 44);
    e.bezierCurveTo(a * 19, a * 49, a * 19, a * 49, a * 15, a * 54);
    e.bezierCurveTo(a * 4, a * 43, a * 10, a * 35, a * 20, a * 32);
    e.closePath();
    od(e, c[0], c[1], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 52);
    e.bezierCurveTo(a * 24, a * 31, a * 34, a * 25, a * 75, a * 23);
    e.bezierCurveTo(a * 130, a * 24, a * 129, a * 32, a * 134, a * 51);
    e.bezierCurveTo(a * 138, a * 70, a * 126, a * 72, a * 90, a * 73);
    e.bezierCurveTo(a * 18, a * 72, a * 15, a * 68, a * 18, a * 54);
    e.closePath();
    od(e, c[0], c[1], 4);
    return d;
  }
  const Km = 8;
  function Vm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 247;
    d.height = a * 247;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    od(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    od(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    od(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    od(e, c[1], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 137);
    e.bezierCurveTo(a * 145, a * 125, a * 138, a * 108, a * 123, a * 104);
    e.bezierCurveTo(a * 81, a * 101, a * 88, a * 77, a * 98, a * 65);
    e.bezierCurveTo(a * 117, a * 38, a * 138, a * 39, a * 165, a * 52);
    e.bezierCurveTo(a * 197, a * 72, a * 207, a * 111, a * 197, a * 140);
    e.bezierCurveTo(a * 182, a * 180, a * 161, a * 197, a * 112, a * 194);
    e.bezierCurveTo(a * 58, a * 194, a * 37, a * 170, a * 34, a * 142);
    e.bezierCurveTo(a * 29, a * 102, a * 40, a * 63, a * 51, a * 45);
    e.bezierCurveTo(a * 43, a * 78, a * 41, a * 103, a * 43, a * 122);
    e.bezierCurveTo(a * 51, a * 158, a * 63, a * 174, a * 95, a * 179);
    e.bezierCurveTo(a * 129, a * 186, a * 169, a * 172, a * 177, a * 144);
    e.bezierCurveTo(a * 197, a * 105, a * 172, a * 76, a * 160, a * 71);
    e.bezierCurveTo(a * 125, a * 52, a * 111, a * 73, a * 111, a * 81);
    e.bezierCurveTo(a * 106, a * 93, a * 140, a * 92, a * 147, a * 107);
    e.bezierCurveTo(a * 153, a * 128, a * 140, a * 135, a * 137, a * 139);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    od(e, undefined, c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 63);
    e.bezierCurveTo(a * 91, a * 64, a * 96, a * 62, a * 98, a * 53);
    e.bezierCurveTo(a * 91, a * 45, a * 85, a * 42, a * 78, a * 41);
    e.bezierCurveTo(a * 81, a * 51, a * 82, a * 57, a * 82, a * 63);
    e.closePath();
    od(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * 40);
    e.bezierCurveTo(a * 140, a * 52, a * 131, a * 51, a * 123, a * 43);
    e.bezierCurveTo(a * 123, a * 25, a * 129, a * 17, a * 134, a * 12);
    e.bezierCurveTo(a * 138, a * 35, a * 142, a * 31, a * 148, a * 40);
    e.closePath();
    od(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 43);
    e.bezierCurveTo(a * 191, a * 54, a * 196, a * 58, a * 205, a * 59);
    e.bezierCurveTo(a * 211, a * 42, a * 214, a * 37, a * 216, a * 31);
    e.bezierCurveTo(a * 202, a * 34, a * 195, a * 39, a * 190, a * 43);
    e.closePath();
    od(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 98);
    e.bezierCurveTo(a * 219, a * 105, a * 225, a * 107, a * 230, a * 109);
    e.bezierCurveTo(a * 227, a * 113, a * 221, a * 115, a * 215, a * 115);
    e.bezierCurveTo(a * 208, a * 109, a * 211, a * 101, a * 216, a * 98);
    e.closePath();
    od(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 180, a * 85);
    e.bezierCurveTo(a * 193, a * 86, a * 196, a * 98, a * 191, a * 108);
    e.bezierCurveTo(a * 179, a * 112, a * 167, a * 113, a * 155, a * 111);
    e.bezierCurveTo(a * 169, a * 100, a * 176, a * 96, a * 180, a * 85);
    e.closePath();
    od(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 114);
    e.bezierCurveTo(a * 102, a * 109, a * 112, a * 110, a * 114, a * 118);
    e.bezierCurveTo(a * 111, a * 134, a * 102, a * 143, a * 95, a * 147);
    e.bezierCurveTo(a * 98, a * 123, a * 97, a * 119, a * 96, a * 115);
    e.closePath();
    od(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 92);
    e.bezierCurveTo(a * 86, a * 95, a * 89, a * 102, a * 83, a * 111);
    e.bezierCurveTo(a * 70, a * 110, a * 61, a * 107, a * 54, a * 100);
    e.bezierCurveTo(a * 70, a * 97, a * 70, a * 95, a * 78, a * 92);
    e.closePath();
    od(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 130);
    e.bezierCurveTo(a * 37, a * 141, a * 41, a * 143, a * 48, a * 144);
    e.bezierCurveTo(a * 54, a * 134, a * 55, a * 131, a * 56, a * 123);
    e.bezierCurveTo(a * 47, a * 129, a * 43, a * 129, a * 39, a * 129);
    e.closePath();
    od(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 113, a * 189);
    e.bezierCurveTo(a * 119, a * 201, a * 127, a * 198, a * 134, a * 192);
    e.bezierCurveTo(a * 128, a * 175, a * 128, a * 173, a * 128, a * 165);
    e.bezierCurveTo(a * 117, a * 176, a * 116, a * 182, a * 113, a * 187);
    e.closePath();
    od(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 154);
    e.bezierCurveTo(a * 76, a * 163, a * 76, a * 170, a * 75, a * 177);
    e.bezierCurveTo(a * 68, a * 179, a * 66, a * 176, a * 63, a * 171);
    e.bezierCurveTo(a * 69, a * 164, a * 72, a * 159, a * 74, a * 154);
    e.closePath();
    od(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206, a * 152);
    e.bezierCurveTo(a * 198, a * 158, a * 198, a * 166, a * 201, a * 171);
    e.bezierCurveTo(a * 209, a * 170, a * 221, a * 170, a * 226, a * 172);
    e.bezierCurveTo(a * 219, a * 159, a * 210, a * 155, a * 207, a * 153);
    e.closePath();
    od(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 181, a * 184);
    e.bezierCurveTo(a * 170, a * 184, a * 167, a * 187, a * 163, a * 195);
    e.bezierCurveTo(a * 171, a * 207, a * 183, a * 214, a * 191, a * 217);
    e.bezierCurveTo(a * 183, a * 204, a * 184, a * 196, a * 181, a * 184);
    e.closePath();
    od(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 199);
    e.bezierCurveTo(a * 73, a * 197, a * 78, a * 199, a * 79, a * 206);
    e.bezierCurveTo(a * 71, a * 216, a * 67, a * 221, a * 57, a * 223);
    e.closePath();
    od(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 143);
    e.bezierCurveTo(a * 183, a * 146, a * 183, a * 149, a * 179, a * 152);
    e.bezierCurveTo(a * 174, a * 146, a * 174, a * 146, a * 169, a * 140);
    e.closePath();
    od(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 159);
    e.bezierCurveTo(a * 45, a * 160, a * 48, a * 164, a * 45, a * 175);
    e.bezierCurveTo(a * 28, a * 183, a * 25, a * 184, a * 19, a * 184);
    e.bezierCurveTo(a * 30, a * 170, a * 29, a * 164, a * 31, a * 160);
    e.closePath();
    od(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 214);
    e.bezierCurveTo(a * 106, a * 212, a * 104, a * 213, a * 102, a * 218);
    e.bezierCurveTo(a * 104, a * 220, a * 107, a * 222, a * 110, a * 224);
    e.bezierCurveTo(a * 110.5, a * 219, a * 110.5, a * 219, a * 111, a * 214);
    e.closePath();
    od(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 52);
    e.bezierCurveTo(a * 41, a * 57, a * 40, a * 61, a * 34, a * 60);
    e.bezierCurveTo(a * 31.5, a * 55, a * 31.5, a * 55, a * 29, a * 50);
    e.bezierCurveTo(a * 34, a * 50.5, a * 34, a * 50.5, a * 39, a * 51);
    e.closePath();
    od(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 81);
    e.bezierCurveTo(a * 37, a * 84, a * 38, a * 90, a * 34, a * 99);
    e.bezierCurveTo(a * 23, a * 97, a * 19, a * 96, a * 16, a * 93);
    e.bezierCurveTo(a * 24, a * 88, a * 28, a * 85, a * 30, a * 81);
    e.closePath();
    od(e, c[4], c[5], a * 5);
    return d;
  }
  function Xm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 168;
    d.height = a * 100;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    ad(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    od(e, c[0]);
    hd(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -10, a * -5);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    ad(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    od(e, Aj, c[3], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    od(e, undefined, c[3], a * 6);
    hd(e, a * 78, a * 44.80000305175781, a * 42.44616584663204);
    od(e, undefined, c[3], a * 6);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    ad(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    od(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    od(e, c[1]);
    hd(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    od(e, c[2], c[1], a * 4);
    hd(e, a * 78, a * 44.80000305175781, a * 29.68164415931166);
    od(e, c[3], c[1], a * 4);
    hd(e, a * 78, a * 44, a * 20);
    od(e, c[4]);
    return d;
  }
  const Zm = String.fromCharCode;
  const $m = Zm(101);
  const ec = Zm(118);
  const ic = Zm(97);
  const tc = Zm(108);
  function nc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 110;
    c.height = a * 110;
    d.globalAlpha = 0.2;
    hd(d, a * 55, a * 55, a * 55);
    od(d, b[0]);
    return c;
  }
  function ac(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    var e;
    d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    hd(d, a * 23.5, a * 20.734375, a * 15.132745950421556);
    od(d, undefined, c[2], a * 4);
    hd(d, a * 23.5, a * 20.734375, a * 18.601075237738275);
    od(d, md, c[1], a * 4);
    hd(d, a * 23.5, a * 20.734375, a * 11.40175425099138);
    od(d, undefined, c[1], a * 4);
    d.save();
    d.translate(a * 23, a * 38.734375);
    d.rotate(0);
    ad(d, a * -21.5, a * -19, a * 43, a * 38, a * 10);
    d.restore();
    od(d, c[2], c[1], a * 4);
    d.save();
    d.translate(a * 23.5, a * 43.734375);
    d.rotate(0.5235987755982988);
    ud(d, 3, a * 8.06225774829855, a * 0);
    d.restore();
    od(d, c[3]);
    hd(d, a * 23.5, a * 35.734375, a * 7.0710678118654755);
    od(d, c[3]);
    return e;
  }
  function rc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 33;
    c.height = a * 35;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 12.75, a * 7.1328125);
    d.bezierCurveTo(a * 26.75, a * 8.1328125, a * 27.75, a * 14.1328125, a * 24.75, a * 23.1328125);
    d.bezierCurveTo(a * 19.75, a * 31.1328125, a * 15.75, a * 33.1328125, a * 6.75, a * 26.1328125);
    d.bezierCurveTo(a * 0.75, a * 19.1328125, a * 4.75, a * 8.1328125, a * 12.75, a * 7.1328125);
    d.closePath();
    od(d, b[0]);
    return c;
  }
  function sc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 187;
    d.height = a * 119;
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, 3);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    od(e, c[5]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, -3);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    od(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151, a * 60);
    e.bezierCurveTo(a * 140, a * 36, a * 137, a * 32, a * 124, a * 29);
    e.bezierCurveTo(a * 98, a * 22, a * 80, a * 24, a * 62, a * 28);
    e.bezierCurveTo(a * 42, a * 35, a * 38, a * 46, a * 34, a * 58);
    e.bezierCurveTo(a * 53, a * 74, a * 76, a * 76, a * 91, a * 78);
    e.closePath();
    od(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 53);
    e.bezierCurveTo(a * 30, a * 56, a * 29, a * 67, a * 30, a * 68);
    e.bezierCurveTo(a * 94, a * 108, a * 150, a * 76, a * 155, a * 70);
    e.bezierCurveTo(a * 154, a * 60, a * 151, a * 54, a * 149, a * 53);
    e.bezierCurveTo(a * 101, a * 74, a * 66, a * 66, a * 37, a * 53);
    e.closePath();
    od(e, c[2], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 36);
    e.bezierCurveTo(a * 92, a * 25, a * 86, a * 28, a * 82, a * 34);
    e.bezierCurveTo(a * 88, a * 40, a * 93, a * 40, a * 98, a * 36);
    e.closePath();
    od(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 43);
    e.bezierCurveTo(a * 69, a * 46, a * 67, a * 52, a * 69, a * 58);
    od(e, undefined, c[1], a * 4);
    hd(e, a * 58, a * 50, a * 5);
    od(e, c[4]);
    hd(e, a * 43, a * 65, a * 5);
    od(e, c[4]);
    hd(e, a * 58, a * 73, a * 5);
    od(e, c[4]);
    hd(e, a * 58, a * 50, a * 2);
    od(e, c[5]);
    hd(e, a * 43, a * 65, a * 2);
    od(e, c[5]);
    hd(e, a * 58, a * 73, a * 2);
    od(e, c[5]);
    return d;
  }
  function hc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 120;
    e.height = b * 100;
    ad(f, b * 10, b * 10, b * 95, b * 80, b * 10);
    od(f, c[2]);
    ad(f, b * 10, b * 5, b * 95, b * 80, b * 10);
    od(f, c[3], c[4], b * 4);
    if (d == 0) {
      var g = Ep(b * 0.75, c, 0);
      f.drawImage(g, b * 22, b * 18);
    } else if (d == 1) {
      g = Ep(b * 0.75, c, 1);
      f.drawImage(g, b * 22, b * 18);
    }
    return e;
  }
  function gc(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 198;
    f.height = b * 147;
    g.globalAlpha = c ? 0.5 : 1;
    g.translate(0, b * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 44, b * 76);
    g.bezierCurveTo(b * 50, b * 82, b * 50, b * 82, b * 56, b * 88);
    g.bezierCurveTo(b * 59, b * 82, b * 59, b * 82, b * 62, b * 76);
    g.bezierCurveTo(b * 59, b * 71, b * 59, b * 71, b * 56, b * 66);
    g.bezierCurveTo(b * 59, b * 69, b * 59, b * 69, b * 62, b * 72);
    g.bezierCurveTo(b * 80, b * 48, b * 102, b * 50, b * 120, b * 62);
    g.bezierCurveTo(b * 127, b * 58, b * 127, b * 58, b * 134, b * 54);
    g.bezierCurveTo(b * 129, b * 60, b * 129, b * 60, b * 124, b * 66);
    g.bezierCurveTo(b * 129, b * 73, b * 129, b * 73, b * 134, b * 80);
    g.bezierCurveTo(b * 140, b * 74, b * 140, b * 74, b * 146, b * 68);
    g.bezierCurveTo(b * 142, b * 76, b * 142, b * 76, b * 138, b * 84);
    g.bezierCurveTo(b * 144, b * 90, b * 142, b * 90, b * 144, b * 90);
    g.bezierCurveTo(b * 136, b * 97, b * 136, b * 97, b * 128, b * 104);
    g.bezierCurveTo(b * 154, b * 110, b * 164, b * 90, b * 160, b * 80);
    g.bezierCurveTo(b * 138, b * 22, b * 148, b * 51, b * 136, b * 22);
    g.bezierCurveTo(b * 97, b * 24, b * 97, b * 24, b * 58, b * 26);
    g.bezierCurveTo(b * 47, b * 54, b * 36, b * 80, b * 36, b * 82);
    g.bezierCurveTo(b * 40, b * 108, b * 54, b * 104, b * 62, b * 104);
    g.bezierCurveTo(b * 46, b * 92, b * 54, b * 97, b * 46, b * 90);
    g.closePath();
    od(g, d[0]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 36, b * 80);
    g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
    g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
    g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
    g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
    g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
    g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
    g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
    g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
    g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
    g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
    g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
    g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
    g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
    g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
    g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
    g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
    g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
    g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
    g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
    g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
    g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
    g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
    g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
    g.closePath();
    od(g, d[0]);
    g.globalAlpha = 1;
    g.translate(0, b * -6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 36, b * 80);
    g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
    g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
    g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
    g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
    g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
    g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
    g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
    g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
    g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
    g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
    g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
    g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
    g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
    g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
    g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
    g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
    g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
    g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
    g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
    g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
    g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
    g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
    g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
    g.closePath();
    od(g, d[1], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 49, b * 98);
    g.bezierCurveTo(b * 96.5, b * 98, b * 96.5, b * 98, b * 144, b * 98);
    g.bezierCurveTo(b * 136.5, b * 102, b * 136.5, b * 102, b * 129, b * 106);
    g.bezierCurveTo(b * 103, b * 105.5, b * 103, b * 105.5, b * 77, b * 105);
    g.bezierCurveTo(b * 65, b * 105, b * 65, b * 105, b * 53, b * 105);
    g.closePath();
    od(g, d[1]);
    g.globalAlpha = 0.5;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 54, b * 98);
    g.bezierCurveTo(b * 97, b * 98, b * 97, b * 98, b * 140, b * 98);
    g.bezierCurveTo(b * 134, b * 101, b * 134, b * 101, b * 128, b * 104);
    g.bezierCurveTo(b * 92, b * 104, b * 92, b * 104, b * 56, b * 104);
    g.closePath();
    od(g, d[0]);
    g.globalAlpha = 1;
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 118, b * 47);
    g.bezierCurveTo(b * 124.5, b * 43.5, b * 124.5, b * 43.5, b * 131, b * 40);
    g.bezierCurveTo(b * 128, b * 46, b * 128, b * 46, b * 125, b * 52);
    g.bezierCurveTo(b * 131, b * 57, b * 135, b * 64, b * 139, b * 73);
    g.bezierCurveTo(b * 142.5, b * 69.5, b * 142.5, b * 69.5, b * 146, b * 66);
    g.bezierCurveTo(b * 143.5, b * 72.5, b * 143.5, b * 72.5, b * 141, b * 79);
    g.bezierCurveTo(b * 142, b * 91, b * 141, b * 94, b * 132, b * 98);
    g.bezierCurveTo(b * 117, b * 102, b * 126, b * 108, b * 142, b * 102);
    g.bezierCurveTo(b * 159, b * 98, b * 164, b * 80, b * 162, b * 47);
    g.bezierCurveTo(b * 160, b * 19, b * 150, b * 6, b * 117, b * 4);
    g.bezierCurveTo(b * 44, b * 0, b * 35, b * 20, b * 33, b * 37);
    g.bezierCurveTo(b * 29, b * 69, b * 33, b * 88, b * 44, b * 96);
    g.bezierCurveTo(b * 64, b * 107, b * 70, b * 102, b * 54, b * 93);
    g.bezierCurveTo(b * 49, b * 88, b * 50, b * 82, b * 53, b * 77);
    g.bezierCurveTo(b * 51.5, b * 71, b * 51.5, b * 71, b * 50, b * 65);
    g.bezierCurveTo(b * 53, b * 68.5, b * 53, b * 68.5, b * 56, b * 72);
    g.bezierCurveTo(b * 59, b * 67.5, b * 59, b * 67.5, b * 62, b * 63);
    g.bezierCurveTo(b * 60.5, b * 59.5, b * 60.5, b * 59.5, b * 59, b * 56);
    g.bezierCurveTo(b * 62, b * 57, b * 62, b * 57, b * 65, b * 58);
    g.bezierCurveTo(b * 78, b * 35, b * 103, b * 36, b * 117, b * 47);
    g.closePath();
    od(g, d[1], d[2], b * 6);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 62, b * 21);
    g.bezierCurveTo(b * 63, b * 34, b * 64, b * 37, b * 66, b * 40);
    g.bezierCurveTo(b * 54, b * 49, b * 53, b * 51, b * 48, b * 58);
    g.bezierCurveTo(b * 44, b * 51, b * 42, b * 43, b * 40, b * 36);
    g.bezierCurveTo(b * 47, b * 28, b * 52, b * 25, b * 61, b * 21);
    g.closePath();
    od(g, d[4]);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 60, b * 29);
    g.bezierCurveTo(b * 62, b * 25, b * 65, b * 24, b * 70, b * 23);
    od(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 61, b * 37);
    g.bezierCurveTo(b * 63, b * 32, b * 66, b * 32, b * 71, b * 32);
    od(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 52, b * 31);
    g.bezierCurveTo(b * 50, b * 26, b * 50, b * 25, b * 51, b * 23);
    od(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 46, b * 35);
    g.bezierCurveTo(b * 44, b * 31, b * 43, b * 29, b * 45, b * 26);
    od(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 58, b * 44);
    g.bezierCurveTo(b * 57, b * 48, b * 57, b * 50, b * 60, b * 52);
    od(g, md, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 53, b * 48);
    g.bezierCurveTo(b * 52, b * 52, b * 52, b * 54, b * 55, b * 57);
    od(g, $q, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 46, b * 41);
    g.bezierCurveTo(b * 41, b * 42, b * 39, b * 45, b * 38, b * 48);
    od(g, undefined, d[3], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 48, b * 48);
    g.bezierCurveTo(b * 42, b * 51, b * 42, b * 53, b * 40, b * 55);
    od(g, undefined, d[3], b * 4);
    if (e == 0) {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 99, b * 101);
      g.bezierCurveTo(b * 118.6666259765625, b * 104.33331298828125, b * 124.6666259765625, b * 116.33331298828125, b * 112.6666259765625, b * 114.33331298828125);
      g.bezierCurveTo(b * 104.6666259765625, b * 112.33331298828125, b * 100.6666259765625, b * 105.33331298828125, b * 99.6666259765625, b * 101.33331298828125);
      od(g, undefined, d[5], b * 6);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 97.6666259765625, b * 101.33331298828125);
      g.bezierCurveTo(b * 81.6666259765625, b * 106.33331298828125, b * 79.6666259765625, b * 114.33331298828125, b * 89.6666259765625, b * 114.33331298828125);
      g.bezierCurveTo(b * 95.6666259765625, b * 111.33331298828125, b * 95.6666259765625, b * 109.33331298828125, b * 98.6666259765625, b * 102.33331298828125);
      od(g, undefined, d[5], b * 6);
    } else {
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 103, b * 100.39999389648438);
      g.bezierCurveTo(b * 120, b * 106.39999389648438, b * 118, b * 107.39999389648438, b * 120, b * 111.39999389648438);
      od(g, Yh, d[5], b * 6);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 103, b * 100.39999389648438);
      g.bezierCurveTo(b * 90, b * 103.39999389648438, b * 89, b * 106.39999389648438, b * 87, b * 112.39999389648438);
      od(g, undefined, d[5], b * 6);
      hd(g, b * 86, b * 114.39999389648438, b * 4.5);
      od(g, d[1], d[5], b * 6);
      hd(g, b * 121, b * 114.39999389648438, b * 4.5);
      od(g, d[1], d[5], b * 6);
    }
    return f;
  }
  function lc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 330;
    d.translate(a * -60, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 7.953125);
    d.bezierCurveTo(a * 188.5, a * 334.953125, a * 188.5, a * 332.953125, a * 188.5, a * 339.953125);
    d.bezierCurveTo(a * 166.5, a * 295.953125, a * 145.5, a * 295.953125, a * 139.5, a * 282.953125);
    d.bezierCurveTo(a * 124.5, a * 244.953125, a * 139.5, a * 243.953125, a * 131.5, a * 212.953125);
    d.bezierCurveTo(a * 118.5, a * 161.953125, a * 69.5, a * 156.953125, a * 74.5, a * 92.953125);
    d.bezierCurveTo(a * 85.5, a * 41.953125, a * 158.5, a * 49.953125, a * 188.5, a * 7.953125);
    d.closePath();
    od(d, b[0]);
    return c;
  }
  function uc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 46;
    d.height = a * 140;
    e.scale(a * -1, a * 1);
    e.translate(a * -50, a * 40);
    e.translate(a * -20, 0);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -1, 0);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 1, 0);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    od(e, c[0]);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(0);
    ad(e, a * -7, a * -4, a * 14, a * 8, a * 10);
    e.restore();
    od(e, c[0]);
    e.translate(a * 0, 0);
    e.globalAlpha = 1;
    e.translate(a * 10, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    od(e, c[3], c[4], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -1, 0);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    od(e, c[1], c[2], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 1, 0);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    od(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(0);
    ad(e, a * -7, a * -4, a * 14, a * 8, a * 10);
    e.restore();
    od(e, c[1], c[2], a * 3);
    return d;
  }
  function bc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 280;
    d.translate(a * -100, a * -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 228.5, a * 331.953125);
    d.bezierCurveTo(a * 228.5, a * 12.953125, a * 228.5, a * 171.453125, a * 228.5, a * 10.953125);
    d.bezierCurveTo(a * 196.5, a * 76.953125, a * 206.5, a * 78.953125, a * 191.5, a * 114.953125);
    d.bezierCurveTo(a * 162.5, a * 170.953125, a * 206.5, a * 220.953125, a * 210.5, a * 251.953125);
    d.bezierCurveTo(a * 218.5, a * 287.953125, a * 220.5, a * 291.953125, a * 228.5, a * 331.953125);
    d.closePath();
    od(d, b[0]);
    return c;
  }
  function dc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 139;
    d.height = a * 135;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
    e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    od(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
    e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    od(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    od(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    od(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 72.5, a * 52, a * 72.5, a * 52, a * 65, a * 66);
    e.bezierCurveTo(a * 47.5, a * 37, a * 47.5, a * 37, a * 30, a * 7);
    e.bezierCurveTo(a * 48, a * 4, a * 57, a * 4, a * 64, a * 10);
    e.closePath();
    od(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 65);
    e.bezierCurveTo(a * 125, a * 73, a * 95.5, a * 69, a * 126, a * 73);
    e.bezierCurveTo(a * 119, a * 98, a * 106, a * 104, a * 98, a * 103);
    e.bezierCurveTo(a * 84.5, a * 102, a * 84.5, a * 102, a * 71, a * 101);
    e.bezierCurveTo(a * 64, a * 86, a * 64, a * 86, a * 57, a * 70);
    e.closePath();
    od(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 64, a * 65, a * 46, a * 67, a * 65, a * 65);
    e.bezierCurveTo(a * 43.5, a * 94, a * 43.5, a * 94, a * 22, a * 123);
    e.bezierCurveTo(a * 8, a * 103, a * 8, a * 103, a * 9, a * 103);
    e.bezierCurveTo(a * 5, a * 98, a * 11, a * 89, a * 26, a * 70);
    e.closePath();
    od(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 69);
    e.bezierCurveTo(a * 65, a * 60, a * 45, a * 65, a * 64, a * 60);
    e.bezierCurveTo(a * 63, a * 65, a * 63, a * 65, a * 62, a * 70);
    e.closePath();
    od(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 68, a * 70, a * 75, a * 53, a * 70, a * 68);
    e.bezierCurveTo(a * 65, a * 67, a * 65, a * 67, a * 60, a * 65);
    e.closePath();
    od(e, c[2]);
    return d;
  }
  function vc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.5;
    hd(e, a * 69, a * 64, a * 48.16637831516918);
    od(e, c[1]);
    e.globalAlpha = 0.7;
    hd(e, a * 69, a * 64, a * 38.23105625617661);
    od(e, c[2]);
    e.globalAlpha = 0.7;
    hd(e, a * 69, a * 64, a * 32.01562118716424);
    od(e, c[2], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 41);
    e.bezierCurveTo(a * 52, a * 41, a * 48, a * 50, a * 45, a * 58);
    e.bezierCurveTo(a * 43, a * 67, a * 45, a * 68, a * 46, a * 72);
    e.bezierCurveTo(a * 52, a * 53, a * 60, a * 48, a * 72, a * 42);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 62);
    e.bezierCurveTo(a * 95, a * 72, a * 90, a * 81, a * 81, a * 87);
    e.bezierCurveTo(a * 74, a * 91, a * 69, a * 89, a * 64, a * 88);
    e.bezierCurveTo(a * 77, a * 83, a * 84, a * 82, a * 92, a * 62);
    e.closePath();
    od(e, c[3]);
    return d;
  }
  function mc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 218;
    d.height = a * 185;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 53.135406494140625);
    e.bezierCurveTo(a * 92, a * 17.135406494140625, a * 116, a * 11.135406494140625, a * 158, a * 53.135406494140625);
    e.bezierCurveTo(a * 178, a * 74.13540649414062, a * 181, a * 81.13540649414062, a * 196, a * 101.13540649414062);
    e.bezierCurveTo(a * 214, a * 127.13540649414062, a * 192, a * 138.13540649414062, a * 173, a * 149.13540649414062);
    e.bezierCurveTo(a * 137, a * 166.13540649414062, a * 74, a * 170.13540649414062, a * 36, a * 141.13540649414062);
    e.bezierCurveTo(a * 13, a * 127.13540649414062, a * 20, a * 119.13540649414062, a * 30, a * 103.13540649414062);
    e.bezierCurveTo(a * 48, a * 71.13540649414062, a * 54, a * 67.13540649414062, a * 63, a * 54.135406494140625);
    e.closePath();
    od(e, c[0], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 25.135406494140625);
    e.bezierCurveTo(a * 62, a * 90.13540649414062, a * 54, a * 129.13540649414062, a * 53, a * 151.13540649414062);
    e.bezierCurveTo(a * 39.5, a * 142.13540649414062, a * 39.5, a * 142.13540649414062, a * 26, a * 133.13540649414062);
    e.bezierCurveTo(a * 23.5, a * 128.63540649414062, a * 23.5, a * 128.63540649414062, a * 21, a * 124.13540649414062);
    e.bezierCurveTo(a * 22, a * 113.13540649414062, a * 31, a * 99.13540649414062, a * 40, a * 88.13540649414062);
    e.bezierCurveTo(a * 54.5, a * 67.13540649414062, a * 54.5, a * 67.13540649414062, a * 69, a * 46.135406494140625);
    e.bezierCurveTo(a * 80.5, a * 36.635406494140625, a * 80.5, a * 36.635406494140625, a * 92, a * 27.135406494140625);
    e.closePath();
    od(e, c[1]);
    return d;
  }
  function cc(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function pc(a) {
    return oc.String.fromCharCode(a);
  }
  function Cc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -10, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * 10, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    od(e, c[1], c[2], a * 10);
    return d;
  }
  function fc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -165, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217, a * 103);
    d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
    d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
    d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
    d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
    d.closePath();
    od(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 231, a * 163);
    d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
    d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
    d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
    d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
    d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
    d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
    d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
    d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
    d.closePath();
    od(d, b[2], b[3], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 234, a * 154);
    d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
    d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
    d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
    d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
    d.closePath();
    od(d, b[2]);
    return c;
  }
  function zc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 204, a * 195.0833282470703);
    e.rotate(10.16);
    ad(e, a * -97.5, a * -134.5, a * 195, a * 269, a * 10);
    e.restore();
    od(e, c[0], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.5, a * 226.5833282470703);
    e.bezierCurveTo(a * 120.5, a * 281.5833282470703, a * 120.5, a * 281.5833282470703, a * 182.5, a * 336.5833282470703);
    e.bezierCurveTo(a * 263, a * 248.5833282470703, a * 263, a * 248.5833282470703, a * 343.5, a * 160.5833282470703);
    e.bezierCurveTo(a * 280.5, a * 104.58332824707031, a * 280.5, a * 104.58332824707031, a * 217.5, a * 48.58332824707031);
    e.closePath();
    od(e, c[2], c[3], a * 4);
    e.save();
    e.translate(a * 197, a * 169.0833282470703);
    e.rotate(10.16);
    ad(e, a * -93.5, a * -126.5, a * 187, a * 253, a * 10);
    e.restore();
    od(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 24.583328247070312);
    e.bezierCurveTo(a * 58.5, a * 207.5833282470703, a * 143, a * 116.58332824707031, a * 59.5, a * 208.5833282470703);
    e.closePath();
    od(e, md, c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 202.64999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 228.64999389648438);
    e.closePath();
    od(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55.133331298828125, a * 211.64999389648438);
    e.bezierCurveTo(a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 238.64999389648438);
    e.bezierCurveTo(a * 50.133331298828125, a * 235.64999389648438, a * 50.133331298828125, a * 235.64999389648438, a * 45.133331298828125, a * 232.64999389648438);
    e.bezierCurveTo(a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 200.64999389648438);
    e.closePath();
    od(e, c[4], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 198.39999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 201.39999389648438);
    e.closePath();
    od(e, c[4], c[1], a * 8);
    e.save();
    e.translate(a * 249.63333129882812, a * 120.89999389648438);
    e.rotate(7.04);
    ad(e, a * -58.5, a * -32, a * 117, a * 64, a * 10);
    e.restore();
    od(e, c[5]);
    return d;
  }
  function yc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 147;
    c.height = a * 172;
    d.globalAlpha = 0.5;
    d.translate(0, a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
    d.closePath();
    od(d, b[0]);
    d.translate(0, a * -8);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
    d.closePath();
    od(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 14, a * 57);
    d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
    d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
    od(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 47);
    d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
    d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
    od(d, b[1], b[2], a * 4);
    hd(d, a * 51, a * 91, a * 9);
    od(d, b[3]);
    hd(d, a * 95, a * 91, a * 9);
    od(d, b[3]);
    hd(d, a * 91, a * 89, a * 4);
    od(d, b[4]);
    hd(d, a * 47, a * 89, a * 4);
    od(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 54, a * 133);
    d.bezierCurveTo(a * 56, a * 108, a * 64, a * 99, a * 73, a * 98);
    d.bezierCurveTo(a * 86, a * 97, a * 91, a * 119, a * 93, a * 133);
    d.bezierCurveTo(a * 94, a * 155, a * 90, a * 150, a * 74, a * 155);
    d.bezierCurveTo(a * 50, a * 152, a * 55, a * 145, a * 54, a * 134);
    d.closePath();
    od(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 65.25, a * 135);
    d.bezierCurveTo(a * 75.25, a * 128, a * 83.25, a * 133, a * 83.25, a * 138);
    d.bezierCurveTo(a * 88.25, a * 148, a * 61.25, a * 149, a * 64.25, a * 137);
    d.closePath();
    od(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 74, a * 145);
    d.bezierCurveTo(a * 74, a * 148, a * 74, a * 148, a * 74, a * 151);
    d.closePath();
    od(d, sk, b[6], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 19, a * 58);
    d.bezierCurveTo(a * 10, a * 38, a * 18, a * 33, a * 28, a * 34);
    d.bezierCurveTo(a * 41, a * 39, a * 45, a * 45, a * 50, a * 51);
    d.closePath();
    od(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 51);
    d.bezierCurveTo(a * 106, a * 36, a * 119, a * 31, a * 128, a * 36);
    d.bezierCurveTo(a * 137, a * 49, a * 128, a * 58, a * 128, a * 60);
    d.closePath();
    od(d, b[6]);
    return c;
  }
  function wc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 790;
    e.translate(a * 5, a * 5);
    e.globalAlpha = 0;
    hd(e, a * 178.5, a * 172.828125, a * 150);
    od(e, undefined, c[0], a * 65);
    hd(e, a * 178.5, a * 172.828125, a * 150);
    od(e, Rr, c[0], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    ad(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    od(e, c[0]);
    e.save();
    e.translate(a * 136, a * 581.828125);
    ad(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    od(e, c[0]);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    ad(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, a * 5);
    e.moveTo(a * 140, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 176.5, a * 295.328125, a * 213, a * 295.828125);
    e.bezierCurveTo(a * 201.5, a * 325.328125, a * 201.5, a * 325.328125, a * 190, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 161, a * 356.828125);
    e.bezierCurveTo(a * 154.5, a * 328.828125, a * 154.5, a * 328.828125, a * 148, a * 300.828125);
    e.closePath();
    od(e, c[0]);
    e.translate(3, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    od(e, c[0]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    od(e, c[0], c[0], a * 7);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * 15, a * 35);
    hd(e, a * 178.5, a * 172.828125, a * 150);
    od(e, undefined, c[2], a * 95);
    hd(e, a * 178.5, a * 172.828125, a * 150);
    od(e, undefined, c[1], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    ad(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    od(e, c[1], c[2], a * 20);
    e.save();
    e.translate(a * 136, a * 581.828125);
    ad(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    od(e, c[1], c[2], a * 20);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    ad(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    od(e, c[1], c[2], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    od(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, a * 5);
    e.moveTo(a * 123, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 190.5, a * 295.328125, a * 250, a * 295.828125);
    e.bezierCurveTo(a * 231.5, a * 325.328125, a * 231.5, a * 325.328125, a * 220, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 140, a * 356.828125);
    e.bezierCurveTo(a * 123.5, a * 328.828125, a * 123.5, a * 328.828125, a * 123, a * 294.828125);
    e.closePath();
    od(e, c[1]);
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    od(e, c[1]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    od(e, c[1], c[1], a * 7);
    e.restore();
    return d;
  }
  function Pc() {
    new Date().getTime();
    function b(a) {
      var b = 0;
      for (var c = 0, d = 0; c < a.length; c++) {
        var e = a.charAt(c);
        if (e !== "_" && c !== 5) {
          if (e === "1") {
            b += Math.pow(2, d);
          }
          d++;
        }
      }
      return b;
    }
    ΔΔⵠⵠⵠᐃᐃⵠⲆ();
    ᐃΔ[1026] = [ᐃᐃ.ⵠΔΔᐃⲆⲆⲆ, ᐃᐃ.ΔⵠᐃⵠⲆⵠΔ];
    ᐃΔ[1025] = [];
    ᐃΔ[1025][ns.ⵠᐃⵠ] = [];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("000_010_000")] = [ᐃᐃ.ⵠⵠⵠᐃΔ, ᐃᐃ.ⵠⲆΔⲆⵠ];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("000_010_010")] = ᐃΔ[1025][ns.ⵠᐃⵠ][b("000_010_000")];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("000_011_000")] = ᐃΔ[1025][ns.ⵠᐃⵠ][b("000_010_000")];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("000_011_010")] = [ᐃᐃ.ⲆᐃΔⵠΔ, ᐃᐃ.ᐃΔᐃᐃⲆ, ᐃᐃ.ⵠⲆΔⲆⵠ, ᐃᐃ.ⵠⵠⵠᐃΔ, ᐃᐃ.ᐃⵠᐃΔᐃᐃᐃ, ᐃᐃ.ΔⲆⲆⲆᐃΔᐃ, ᐃᐃ.ΔᐃΔᐃⲆⵠⲆ];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("000_011_011")] = [ᐃᐃ.ΔⲆΔⵠⵠⵠΔ, ᐃᐃ.ⲆᐃΔⵠΔ, ᐃᐃ.ᐃΔᐃᐃⲆ, ᐃᐃ.ⵠⲆΔⲆⵠ, ᐃᐃ.ⵠⵠⵠᐃΔ, ᐃᐃ.ᐃⵠᐃΔᐃᐃᐃ, ᐃᐃ.ΔⲆⲆⲆᐃΔᐃ, ᐃᐃ.ΔᐃΔᐃⲆⵠⲆ, ᐃᐃ.ⲆⲆⲆᐃⵠ];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("000_110_000")] = [ᐃᐃ.ΔᐃⲆᐃⲆ, ᐃᐃ.ⵠⲆΔⲆⵠ];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("000_110_010")] = [ᐃᐃ.ΔΔⵠⵠᐃ, ᐃᐃ.ΔᐃⲆᐃⲆ, ᐃᐃ.ᐃⵠⲆⲆΔ, ᐃᐃ.ⵠⲆΔⲆⵠ, ᐃᐃ.ⵠⵠⵠᐃΔ, ᐃᐃ.ⲆⲆⲆᐃⵠ, ᐃᐃ.ⲆᐃⲆⵠⲆ, ᐃᐃ.ⲆᐃᐃⵠΔⲆⲆ];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("000_110_110")] = [ᐃᐃ.ΔΔⵠⵠᐃ, ᐃᐃ.ⲆⵠⲆⲆΔᐃᐃ, ᐃᐃ.ⲆⵠⲆⲆΔⲆⵠ, ᐃᐃ.ΔᐃⲆᐃⲆ, ᐃᐃ.ᐃⵠⲆⲆΔ, ᐃᐃ.ⵠⲆΔⲆⵠ, ᐃᐃ.ⲆⲆⲆᐃⵠ, ᐃᐃ.ⲆᐃⲆⵠⲆ, ᐃᐃ.ⲆᐃᐃⵠΔⲆⲆ];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("000_111_000")] = [ᐃᐃ.ΔᐃⲆᐃⲆ, ᐃᐃ.ᐃⵠⲆⲆΔ, ᐃᐃ.ⵠⵠⲆⲆΔⲆⵠ, ᐃᐃ.ΔᐃⲆᐃⲆΔⲆ];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("000_111_111")] = [ᐃᐃ.ΔᐃⲆᐃⲆ, ᐃᐃ.ⲆⵠⲆⲆΔⲆⵠ, ᐃᐃ.ΔΔⵠⵠᐃ, ᐃᐃ.ᐃΔᐃᐃⲆ, ᐃᐃ.ⲆᐃΔⵠΔ, ᐃᐃ.ΔⲆΔⵠⵠⵠΔ, ᐃᐃ.ⲆⵠΔΔΔⲆΔ];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("010_010_000")] = [ᐃᐃ.ⵠⲆΔⲆⵠ];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("010_010_010")] = [ᐃᐃ.ⲆᐃⵠΔⲆⲆⵠ, ᐃᐃ.ⵠⲆΔⲆⵠ, ᐃᐃ.ⵠⵠⵠᐃΔ];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("010_011_000")] = [ᐃᐃ.ᐃᐃⵠᐃᐃ, ᐃᐃ.ⵠⲆΔⲆⵠ, ᐃᐃ.ⵠⵠⵠᐃΔ, ᐃᐃ.ⲆᐃⲆⵠⲆ];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("010_110_000")] = [ᐃᐃ.ΔᐃⲆᐃⲆ, ᐃᐃ.ᐃⵠⲆⲆΔ, ᐃᐃ.ⵠⲆΔⲆⵠ, ᐃᐃ.ⲆᐃⲆⵠⲆ, ᐃᐃ.ΔⲆⵠΔⲆ];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("010_110_110")] = [ᐃᐃ.ᐃᐃⵠⵠⲆ, ᐃᐃ.ᐃᐃⵠᐃᐃ, ᐃᐃ.ⲆᐃΔⵠΔ, ᐃᐃ.ᐃΔᐃᐃⲆ, ᐃᐃ.ΔΔⵠⵠᐃ, ᐃᐃ.ⲆⵠⲆⲆΔⲆⵠ, ᐃᐃ.ΔᐃⲆᐃⲆ, ᐃᐃ.ⲆⵠΔΔΔⲆΔ, ᐃᐃ.ⵠⲆⵠᐃΔΔᐃ, ᐃᐃ.ⲆᐃⵠΔⲆⲆⵠ, ᐃᐃ.ᐃⵠⲆⲆΔ, ᐃᐃ.ⵠⵠⲆⲆΔⲆⵠ, ᐃᐃ.ΔᐃⲆᐃⲆΔⲆ, ᐃᐃ.ⵠⲆΔⲆⵠ, ᐃᐃ.ⵠⵠⵠᐃΔ, ᐃᐃ.ᐃⵠᐃΔᐃᐃᐃ, ᐃᐃ.ΔⲆⲆⲆᐃΔᐃ, ᐃᐃ.ΔᐃΔᐃⲆⵠⲆ, ᐃᐃ.ⲆⲆⲆᐃⵠ, ᐃᐃ.ⲆᐃⲆⵠⲆ, ᐃᐃ.ΔⲆⵠΔⲆ];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("010_011_010")] = ᐃΔ[1025][ns.ⵠᐃⵠ][b("010_110_110")];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("010_011_011")] = ᐃΔ[1025][ns.ⵠᐃⵠ][b("010_110_110")];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("000_111_011")] = ᐃΔ[1025][ns.ⵠᐃⵠ][b("010_110_110")];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("010_110_010")] = ᐃΔ[1025][ns.ⵠᐃⵠ][b("010_110_110")];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("010_111_000")] = ᐃΔ[1025][ns.ⵠᐃⵠ][b("010_110_110")];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("010_111_010")] = ᐃΔ[1025][ns.ⵠᐃⵠ][b("010_110_110")];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("010_111_011")] = ᐃΔ[1025][ns.ⵠᐃⵠ][b("010_110_110")];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("010_111_110")] = ᐃΔ[1025][ns.ⵠᐃⵠ][b("010_110_110")];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("010_111_111")] = ᐃΔ[1025][ns.ⵠᐃⵠ][b("010_110_110")];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("000_111_110")] = ᐃΔ[1025][ns.ⵠᐃⵠ][b("010_110_110")];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("000_111_010")] = ᐃΔ[1025][ns.ⵠᐃⵠ][b("010_110_110")];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("011_011_000")] = [ᐃᐃ.ΔⲆᐃᐃⵠΔⲆ, ᐃᐃ.ᐃᐃⵠⵠⲆ, ᐃᐃ.ᐃᐃⵠᐃᐃ, ᐃᐃ.ⵠⲆΔⲆⵠ, ᐃᐃ.ⵠⵠⵠᐃΔ, ᐃᐃ.ⲆᐃⲆⵠⲆ];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("011_011_010")] = [ᐃᐃ.ΔⲆᐃᐃⵠΔⲆ, ᐃᐃ.ᐃᐃⵠⵠⲆ, ᐃᐃ.ᐃᐃⵠᐃᐃ, ᐃᐃ.ΔᐃⲆᐃⲆ, ᐃᐃ.ᐃⵠⲆⲆΔ, ᐃᐃ.ⵠⵠⲆⲆΔⲆⵠ, ᐃᐃ.ΔᐃⲆᐃⲆΔⲆ, ᐃᐃ.ⵠⲆΔⲆⵠ, ᐃᐃ.ⵠⵠⵠᐃΔ, ᐃᐃ.ⲆᐃⲆⵠⲆ, ᐃᐃ.ΔⲆⵠΔⲆ];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("011_011_011")] = [ᐃᐃ.ᐃΔᐃᐃⲆ, ᐃᐃ.ⲆᐃΔⵠΔ, ᐃᐃ.ΔⲆΔⵠⵠⵠΔ, ᐃᐃ.ᐃᐃⵠᐃᐃ, ᐃᐃ.ᐃᐃⵠⵠⲆ, ᐃᐃ.ΔⲆᐃᐃⵠΔⲆ, ᐃᐃ.ⵠⲆⵠᐃΔΔᐃ];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("011_111_000")] = ᐃΔ[1025][ns.ⵠᐃⵠ][b("011_011_010")];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("011_111_010")] = [ᐃᐃ.ΔⲆᐃᐃⵠΔⲆ, ᐃᐃ.ᐃᐃⵠⵠⲆ, ᐃᐃ.ᐃᐃⵠᐃᐃ, ᐃᐃ.ⲆᐃΔⵠΔ, ᐃᐃ.ᐃΔᐃᐃⲆ, ᐃᐃ.ΔΔⵠⵠᐃ, ᐃᐃ.ΔᐃⲆᐃⲆ, ᐃᐃ.ⲆⵠΔΔΔⲆΔ, ᐃᐃ.ⵠⲆⵠᐃΔΔᐃ, ᐃᐃ.ⲆᐃⵠΔⲆⲆⵠ, ᐃᐃ.ᐃⵠⲆⲆΔ, ᐃᐃ.ⵠⵠⲆⲆΔⲆⵠ, ᐃᐃ.ΔᐃⲆᐃⲆΔⲆ, ᐃᐃ.ⵠⲆΔⲆⵠ, ᐃᐃ.ⵠⵠⵠᐃΔ, ᐃᐃ.ᐃⵠᐃΔᐃᐃᐃ, ᐃᐃ.ΔⲆⲆⲆᐃΔᐃ, ᐃᐃ.ΔᐃΔᐃⲆⵠⲆ, ᐃᐃ.ⲆⲆⲆᐃⵠ, ᐃᐃ.ⲆᐃⲆⵠⲆ, ᐃᐃ.ΔⲆⵠΔⲆ];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("011_111_011")] = ᐃΔ[1025][ns.ⵠᐃⵠ][b("011_111_010")];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("011_111_110")] = ᐃΔ[1025][ns.ⵠᐃⵠ][b("011_111_010")];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("011_111_111")] = [ᐃᐃ.ΔⲆᐃᐃⵠΔⲆ, ᐃᐃ.ᐃᐃⵠⵠⲆ, ᐃᐃ.ᐃᐃⵠᐃᐃ, ᐃᐃ.ΔⲆΔⵠⵠⵠΔ, ᐃᐃ.ⲆᐃΔⵠΔ, ᐃᐃ.ᐃΔᐃᐃⲆ, ᐃᐃ.ΔΔⵠⵠᐃ, ᐃᐃ.ⲆⵠⲆⲆΔⲆⵠ, ᐃᐃ.ΔᐃⲆᐃⲆ, ᐃᐃ.ⲆⵠΔΔΔⲆΔ, ᐃᐃ.ⵠⲆⵠᐃΔΔᐃ, ᐃᐃ.ⲆᐃⵠΔⲆⲆⵠ, ᐃᐃ.ᐃⵠⲆⲆΔ, ᐃᐃ.ⵠⵠⲆⲆΔⲆⵠ, ᐃᐃ.ΔᐃⲆᐃⲆΔⲆ, ᐃᐃ.ⵠⲆΔⲆⵠ, ᐃᐃ.ⵠⵠⵠᐃΔ, ᐃᐃ.ᐃⵠᐃΔᐃᐃᐃ, ᐃᐃ.ΔⲆⲆⲆᐃΔᐃ, ᐃᐃ.ΔᐃΔᐃⲆⵠⲆ, ᐃᐃ.ⲆⲆⲆᐃⵠ, ᐃᐃ.ⲆᐃⲆⵠⲆ, ᐃᐃ.ΔⲆⵠΔⲆ];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("110_110_000")] = [ᐃᐃ.ᐃΔⵠΔᐃⲆⵠ, ᐃᐃ.ΔᐃⲆᐃⲆ, ᐃᐃ.ᐃᐃⵠⵠⵠᐃᐃ, ᐃᐃ.ᐃⵠⲆⲆΔ, ᐃᐃ.ⵠⲆΔⲆⵠ, ᐃᐃ.ΔⲆⵠΔⲆ];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("110_110_010")] = [ᐃᐃ.ΔΔⵠⵠᐃ, ᐃᐃ.ᐃΔⵠΔᐃⲆⵠ, ᐃᐃ.ΔᐃⲆᐃⲆ, ᐃᐃ.ⲆᐃⵠΔⲆⲆⵠ, ᐃᐃ.ᐃⵠⲆⲆΔ, ᐃᐃ.ⵠⲆΔⲆⵠ, ᐃᐃ.ⲆⲆⲆᐃⵠ, ᐃᐃ.ΔⲆⵠΔⲆ];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("110_110_110")] = [ᐃᐃ.ΔΔⵠⵠᐃ, ᐃᐃ.ⲆⵠⲆⲆΔⲆⵠ, ᐃᐃ.ᐃΔⵠΔᐃⲆⵠ, ᐃᐃ.ΔᐃⲆᐃⲆ, ᐃᐃ.ⲆᐃⵠΔⲆⲆⵠ, ᐃᐃ.ᐃⵠⲆⲆΔ, ᐃᐃ.ⵠⲆΔⲆⵠ, ᐃᐃ.ⲆⲆⲆᐃⵠ, ᐃᐃ.ΔⲆⵠΔⲆ];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("110_111_000")] = [ᐃᐃ.ᐃᐃⵠⵠⲆ, ᐃᐃ.ᐃᐃⵠᐃᐃ, ᐃᐃ.ᐃΔⵠΔᐃⲆⵠ, ᐃᐃ.ΔᐃⲆᐃⲆ, ᐃᐃ.ᐃᐃⵠⵠⵠᐃᐃ, ᐃᐃ.ᐃⵠⲆΔᐃᐃΔ, ᐃᐃ.ᐃⵠⲆⲆΔ, ᐃᐃ.ⵠⵠⲆⲆΔⲆⵠ, ᐃᐃ.ΔᐃⲆᐃⲆΔⲆ, ᐃᐃ.ⵠⲆΔⲆⵠ, ᐃᐃ.ⵠⵠⵠᐃΔ, ᐃᐃ.ⲆᐃⲆⵠⲆ, ᐃᐃ.ΔⲆⵠΔⲆ];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("110_111_110")] = [ᐃᐃ.ᐃᐃⵠⵠⲆ, ᐃᐃ.ᐃᐃⵠᐃᐃ, ᐃᐃ.ⲆᐃΔⵠΔ, ᐃᐃ.ᐃΔᐃᐃⲆ, ᐃᐃ.ΔΔⵠⵠᐃ, ᐃᐃ.ⲆⵠⲆⲆΔⲆⵠ, ᐃᐃ.ᐃΔⵠΔᐃⲆⵠ, ᐃᐃ.ΔᐃⲆᐃⲆ, ᐃᐃ.ⲆⵠΔΔΔⲆΔ, ᐃᐃ.ᐃⵠⲆΔᐃᐃΔ, ᐃᐃ.ⵠⲆⵠᐃΔΔᐃ, ᐃᐃ.ⲆᐃⵠΔⲆⲆⵠ, ᐃᐃ.ᐃⵠⲆⲆΔ, ᐃᐃ.ⵠⵠⲆⲆΔⲆⵠ, ᐃᐃ.ΔᐃⲆᐃⲆΔⲆ, ᐃᐃ.ⵠⲆΔⲆⵠ, ᐃᐃ.ⵠⵠⵠᐃΔ, ᐃᐃ.ᐃⵠᐃΔᐃᐃᐃ, ᐃᐃ.ΔⲆⲆⲆᐃΔᐃ, ᐃᐃ.ΔᐃΔᐃⲆⵠⲆ, ᐃᐃ.ⲆⲆⲆᐃⵠ, ᐃᐃ.ⲆᐃⲆⵠⲆ, ᐃᐃ.ΔⲆⵠΔⲆ];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("110_111_111")] = ᐃΔ[1025][ns.ⵠᐃⵠ][b("110_111_110")];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("110_111_011")] = ᐃΔ[1025][ns.ⵠᐃⵠ][b("110_111_110")];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("110_111_010")] = ᐃΔ[1025][ns.ⵠᐃⵠ][b("110_111_110")];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("111_111_110")] = [ᐃᐃ.ΔⲆⵠΔⲆ, ᐃᐃ.ⲆᐃⲆⵠⲆ, ᐃᐃ.ⲆⲆⲆᐃⵠ, ᐃᐃ.ΔᐃΔᐃⲆⵠⲆ, ᐃᐃ.ΔⲆⲆⲆᐃΔᐃ, ᐃᐃ.ᐃⵠᐃΔᐃᐃᐃ, ᐃᐃ.ⵠⵠⵠᐃΔ, ᐃᐃ.ⵠⲆΔⲆⵠ, ᐃᐃ.ΔᐃⲆᐃⲆΔⲆ, ᐃᐃ.ⵠⵠⲆⲆΔⲆⵠ, ᐃᐃ.ᐃⵠⲆⲆΔ, ᐃᐃ.ⲆᐃⵠΔⲆⲆⵠ, ᐃᐃ.ⵠⲆⵠᐃΔΔᐃ, ᐃᐃ.ᐃⵠⲆΔᐃᐃΔ, ᐃᐃ.ⲆⵠΔΔΔⲆΔ, ᐃᐃ.ΔᐃⲆᐃⲆ, ᐃᐃ.ᐃΔⵠΔᐃⲆⵠ, ᐃᐃ.ΔΔⵠⵠᐃ, ᐃᐃ.ᐃΔᐃᐃⲆ, ᐃᐃ.ⲆᐃΔⵠΔ, ᐃᐃ.ᐃᐃⵠᐃᐃ, ᐃᐃ.ᐃᐃⵠⵠⲆ, ᐃᐃ.ΔⲆᐃᐃⵠΔⲆ];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("111_111_011")] = ᐃΔ[1025][ns.ⵠᐃⵠ][b("111_111_110")];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("111_111_000")] = [ᐃᐃ.ᐃᐃⵠⵠⵠᐃᐃ, ᐃᐃ.ΔᐃⲆᐃⲆ, ᐃᐃ.ᐃΔⵠΔᐃⲆⵠ, ᐃᐃ.ᐃᐃⵠᐃᐃ, ᐃᐃ.ᐃᐃⵠⵠⲆ, ᐃᐃ.ΔⲆᐃᐃⵠΔⲆ, ᐃᐃ.ᐃⵠⲆΔᐃᐃΔ];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("111_111_111")] = [ᐃᐃ.ΔⲆᐃᐃⵠΔⲆ, ᐃᐃ.ᐃᐃⵠⵠⲆ, ᐃᐃ.ᐃᐃⵠᐃᐃ, ᐃᐃ.ΔⲆΔⵠⵠⵠΔ, ᐃᐃ.ⲆᐃΔⵠΔ, ᐃᐃ.ᐃΔᐃᐃⲆ, ᐃᐃ.ΔΔⵠⵠᐃ, ᐃᐃ.ⲆⵠⲆⲆΔⲆⵠ, ᐃᐃ.ᐃΔⵠΔᐃⲆⵠ, ᐃᐃ.ΔᐃⲆᐃⲆ, ᐃᐃ.ⲆⵠΔΔΔⲆΔ, ᐃᐃ.ⵠⲆⵠᐃΔΔᐃ, ᐃᐃ.ⲆᐃⵠΔⲆⲆⵠ, ᐃᐃ.ᐃⵠⲆⲆΔ, ᐃᐃ.ⵠⵠⲆⲆΔⲆⵠ, ᐃᐃ.ΔᐃⲆᐃⲆΔⲆ, ᐃᐃ.ⵠⲆΔⲆⵠ, ᐃᐃ.ⵠⵠⵠᐃΔ, ᐃᐃ.ᐃⵠᐃΔᐃᐃᐃ, ᐃᐃ.ΔⲆⲆⲆᐃΔᐃ, ᐃᐃ.ΔᐃΔᐃⲆⵠⲆ, ᐃᐃ.ⲆⲆⲆᐃⵠ, ᐃᐃ.ⲆᐃⲆⵠⲆ, ᐃᐃ.ΔⲆⵠΔⲆ];
    ᐃΔ[1025][ns.ⵠᐃⵠ][b("111_111_010")] = ᐃΔ[1025][ns.ⵠᐃⵠ][b("111_111_110")];
    ᐃΔ[1025][ns.ᐃᐃⵠ] = [];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("000_010_000")] = [ᐃᐃ.ⵠⲆᐃᐃΔ, ᐃᐃ.ⵠⲆΔⵠᐃ];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("000_010_010")] = ᐃΔ[1025][ns.ᐃᐃⵠ][b("000_010_000")];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("000_011_000")] = ᐃΔ[1025][ns.ᐃᐃⵠ][b("000_010_000")];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("000_011_010")] = [ᐃᐃ.ⲆᐃⵠΔⵠ, ᐃᐃ.ⵠΔᐃⲆⲆ, ᐃᐃ.ⵠⲆΔⵠᐃ, ᐃᐃ.ⵠⲆᐃᐃΔ, ᐃᐃ.ⵠⵠⲆΔᐃΔⲆ, ᐃᐃ.ⵠⵠΔⲆⵠΔⲆ, ᐃᐃ.ⲆᐃΔⵠᐃᐃᐃ];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("000_011_011")] = [ᐃᐃ.ΔⵠΔΔⵠᐃΔ, ᐃᐃ.ⲆᐃⵠΔⵠ, ᐃᐃ.ⵠΔᐃⲆⲆ, ᐃᐃ.ⵠⲆΔⵠᐃ, ᐃᐃ.ⵠⲆᐃᐃΔ, ᐃᐃ.ⵠⵠⲆΔᐃΔⲆ, ᐃᐃ.ⵠⵠΔⲆⵠΔⲆ, ᐃᐃ.ⲆᐃΔⵠᐃᐃᐃ, ᐃᐃ.ⲆⵠᐃⲆⲆ];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("000_110_000")] = [ᐃᐃ.ᐃⵠΔᐃᐃ, ᐃᐃ.ⵠⲆΔⵠᐃ];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("000_110_010")] = [ᐃᐃ.ⲆᐃⵠⵠⲆ, ᐃᐃ.ᐃⵠΔᐃᐃ, ᐃᐃ.ⵠⲆⵠⲆⲆ, ᐃᐃ.ⵠⲆΔⵠᐃ, ᐃᐃ.ⵠⲆᐃᐃΔ, ᐃᐃ.ⲆⵠᐃⲆⲆ, ᐃᐃ.ⲆᐃⵠⲆΔ, ᐃᐃ.ⵠᐃΔΔⲆⲆⲆ];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("000_110_110")] = [ᐃᐃ.ⲆᐃⵠⵠⲆ, ᐃᐃ.ᐃᐃⲆⲆΔᐃΔ, ᐃᐃ.ᐃᐃⵠⲆⲆⵠⲆ, ᐃᐃ.ᐃⵠΔᐃᐃ, ᐃᐃ.ⵠⲆⵠⲆⲆ, ᐃᐃ.ⵠⲆΔⵠᐃ, ᐃᐃ.ⲆⵠᐃⲆⲆ, ᐃᐃ.ⲆᐃⵠⲆΔ, ᐃᐃ.ⵠᐃΔΔⲆⲆⲆ];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("000_111_000")] = [ᐃᐃ.ᐃⵠΔᐃᐃ, ᐃᐃ.ⵠⲆⵠⲆⲆ, ᐃᐃ.ⵠⵠᐃΔⲆⲆⵠ, ᐃᐃ.ⲆᐃⵠᐃⲆΔⲆ];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("000_111_111")] = [ᐃᐃ.ᐃⵠΔᐃᐃ, ᐃᐃ.ᐃᐃⵠⲆⲆⵠⲆ, ᐃᐃ.ⲆᐃⵠⵠⲆ, ᐃᐃ.ⵠΔᐃⲆⲆ, ᐃᐃ.ⲆᐃⵠΔⵠ, ᐃᐃ.ΔⵠΔΔⵠᐃΔ, ᐃᐃ.ᐃᐃⵠⲆⲆΔⵠ];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("010_010_000")] = [ᐃᐃ.ⵠⲆΔⵠᐃ];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("010_010_010")] = [ᐃᐃ.ⵠⲆⲆⲆⵠᐃΔ, ᐃᐃ.ⵠⲆΔⵠᐃ, ᐃᐃ.ⵠⲆᐃᐃΔ];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("010_011_000")] = [ᐃᐃ.ΔⵠⲆⲆΔ, ᐃᐃ.ⵠⲆΔⵠᐃ, ᐃᐃ.ⵠⲆᐃᐃΔ, ᐃᐃ.ⲆᐃⵠⲆΔ];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("010_110_000")] = [ᐃᐃ.ᐃⵠΔᐃᐃ, ᐃᐃ.ⵠⲆⵠⲆⲆ, ᐃᐃ.ⵠⲆΔⵠᐃ, ᐃᐃ.ⲆᐃⵠⲆΔ, ᐃᐃ.ᐃⵠⲆΔⲆ];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("010_110_110")] = [ᐃᐃ.Ⲇⵠᐃⵠⵠ, ᐃᐃ.ΔⵠⲆⲆΔ, ᐃᐃ.ⲆᐃⵠΔⵠ, ᐃᐃ.ⵠΔᐃⲆⲆ, ᐃᐃ.ⲆᐃⵠⵠⲆ, ᐃᐃ.ᐃᐃⵠⲆⲆⵠⲆ, ᐃᐃ.ᐃⵠΔᐃᐃ, ᐃᐃ.ᐃᐃⵠⲆⲆΔⵠ, ᐃᐃ.ΔⲆᐃᐃᐃᐃᐃ, ᐃᐃ.ⵠⲆⲆⲆⵠᐃΔ, ᐃᐃ.ⵠⲆⵠⲆⲆ, ᐃᐃ.ⵠⵠᐃΔⲆⲆⵠ, ᐃᐃ.ⲆᐃⵠᐃⲆΔⲆ, ᐃᐃ.ⵠⲆΔⵠᐃ, ᐃᐃ.ⵠⲆᐃᐃΔ, ᐃᐃ.ⵠⵠⲆΔᐃΔⲆ, ᐃᐃ.ⵠⵠΔⲆⵠΔⲆ, ᐃᐃ.ⲆᐃΔⵠᐃᐃᐃ, ᐃᐃ.ⲆⵠᐃⲆⲆ, ᐃᐃ.ⲆᐃⵠⲆΔ, ᐃᐃ.ᐃⵠⲆΔⲆ];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("010_011_010")] = ᐃΔ[1025][ns.ᐃᐃⵠ][b("010_110_110")];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("010_011_011")] = ᐃΔ[1025][ns.ᐃᐃⵠ][b("010_110_110")];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("000_111_011")] = ᐃΔ[1025][ns.ᐃᐃⵠ][b("010_110_110")];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("010_110_010")] = ᐃΔ[1025][ns.ᐃᐃⵠ][b("010_110_110")];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("010_111_000")] = ᐃΔ[1025][ns.ᐃᐃⵠ][b("010_110_110")];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("010_111_010")] = ᐃΔ[1025][ns.ᐃᐃⵠ][b("010_110_110")];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("010_111_011")] = ᐃΔ[1025][ns.ᐃᐃⵠ][b("010_110_110")];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("010_111_110")] = ᐃΔ[1025][ns.ᐃᐃⵠ][b("010_110_110")];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("010_111_111")] = ᐃΔ[1025][ns.ᐃᐃⵠ][b("010_110_110")];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("000_111_110")] = ᐃΔ[1025][ns.ᐃᐃⵠ][b("010_110_110")];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("000_111_010")] = ᐃΔ[1025][ns.ᐃᐃⵠ][b("010_110_110")];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("011_011_000")] = [ᐃᐃ.ⲆⲆΔⲆⲆΔᐃ, ᐃᐃ.Ⲇⵠᐃⵠⵠ, ᐃᐃ.ΔⵠⲆⲆΔ, ᐃᐃ.ⵠⲆΔⵠᐃ, ᐃᐃ.ⵠⲆᐃᐃΔ, ᐃᐃ.ⲆᐃⵠⲆΔ];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("011_011_010")] = [ᐃᐃ.ⲆⲆΔⲆⲆΔᐃ, ᐃᐃ.Ⲇⵠᐃⵠⵠ, ᐃᐃ.ΔⵠⲆⲆΔ, ᐃᐃ.ᐃⵠΔᐃᐃ, ᐃᐃ.ⵠⲆⵠⲆⲆ, ᐃᐃ.ⵠⵠᐃΔⲆⲆⵠ, ᐃᐃ.ⲆᐃⵠᐃⲆΔⲆ, ᐃᐃ.ⵠⲆΔⵠᐃ, ᐃᐃ.ⵠⲆᐃᐃΔ, ᐃᐃ.ⲆᐃⵠⲆΔ, ᐃᐃ.ᐃⵠⲆΔⲆ];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("011_011_011")] = [ᐃᐃ.ⵠΔᐃⲆⲆ, ᐃᐃ.ⲆᐃⵠΔⵠ, ᐃᐃ.ΔⵠΔΔⵠᐃΔ, ᐃᐃ.ΔⵠⲆⲆΔ, ᐃᐃ.Ⲇⵠᐃⵠⵠ, ᐃᐃ.ⲆⲆΔⲆⲆΔᐃ, ᐃᐃ.ΔⲆᐃᐃᐃᐃᐃ];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("011_111_000")] = ᐃΔ[1025][ns.ᐃᐃⵠ][b("011_011_010")];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("011_111_010")] = [ᐃᐃ.ⲆⲆΔⲆⲆΔᐃ, ᐃᐃ.Ⲇⵠᐃⵠⵠ, ᐃᐃ.ΔⵠⲆⲆΔ, ᐃᐃ.ⲆᐃⵠΔⵠ, ᐃᐃ.ⵠΔᐃⲆⲆ, ᐃᐃ.ⲆᐃⵠⵠⲆ, ᐃᐃ.ᐃⵠΔᐃᐃ, ᐃᐃ.ᐃᐃⵠⲆⲆΔⵠ, ᐃᐃ.ΔⲆᐃᐃᐃᐃᐃ, ᐃᐃ.ⵠⲆⲆⲆⵠᐃΔ, ᐃᐃ.ⵠⲆⵠⲆⲆ, ᐃᐃ.ⵠⵠᐃΔⲆⲆⵠ, ᐃᐃ.ⲆᐃⵠᐃⲆΔⲆ, ᐃᐃ.ⵠⲆΔⵠᐃ, ᐃᐃ.ⵠⲆᐃᐃΔ, ᐃᐃ.ⵠⵠⲆΔᐃΔⲆ, ᐃᐃ.ⵠⵠΔⲆⵠΔⲆ, ᐃᐃ.ⲆᐃΔⵠᐃᐃᐃ, ᐃᐃ.ⲆⵠᐃⲆⲆ, ᐃᐃ.ⲆᐃⵠⲆΔ, ᐃᐃ.ᐃⵠⲆΔⲆ];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("011_111_011")] = ᐃΔ[1025][ns.ᐃᐃⵠ][b("011_111_010")];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("011_111_110")] = ᐃΔ[1025][ns.ᐃᐃⵠ][b("011_111_010")];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("011_111_111")] = [ᐃᐃ.ⲆⲆΔⲆⲆΔᐃ, ᐃᐃ.Ⲇⵠᐃⵠⵠ, ᐃᐃ.ΔⵠⲆⲆΔ, ᐃᐃ.ΔⵠΔΔⵠᐃΔ, ᐃᐃ.ⲆᐃⵠΔⵠ, ᐃᐃ.ⵠΔᐃⲆⲆ, ᐃᐃ.ⲆᐃⵠⵠⲆ, ᐃᐃ.ᐃᐃⵠⲆⲆⵠⲆ, ᐃᐃ.ᐃⵠΔᐃᐃ, ᐃᐃ.ᐃᐃⵠⲆⲆΔⵠ, ᐃᐃ.ΔⲆᐃᐃᐃᐃᐃ, ᐃᐃ.ⵠⲆⲆⲆⵠᐃΔ, ᐃᐃ.ⵠⲆⵠⲆⲆ, ᐃᐃ.ⵠⵠᐃΔⲆⲆⵠ, ᐃᐃ.ⲆᐃⵠᐃⲆΔⲆ, ᐃᐃ.ⵠⲆΔⵠᐃ, ᐃᐃ.ⵠⲆᐃᐃΔ, ᐃᐃ.ⵠⵠⲆΔᐃΔⲆ, ᐃᐃ.ⵠⵠΔⲆⵠΔⲆ, ᐃᐃ.ⲆᐃΔⵠᐃᐃᐃ, ᐃᐃ.ⲆⵠᐃⲆⲆ, ᐃᐃ.ⲆᐃⵠⲆΔ, ᐃᐃ.ᐃⵠⲆΔⲆ];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("110_110_000")] = [ᐃᐃ.ᐃⲆᐃΔⲆⲆᐃ, ᐃᐃ.ᐃⵠΔᐃᐃ, ᐃᐃ.ᐃΔᐃⵠΔΔⵠ, ᐃᐃ.ⵠⲆⵠⲆⲆ, ᐃᐃ.ⵠⲆΔⵠᐃ, ᐃᐃ.ᐃⵠⲆΔⲆ];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("110_110_010")] = [ᐃᐃ.ⲆᐃⵠⵠⲆ, ᐃᐃ.ᐃⲆᐃΔⲆⲆᐃ, ᐃᐃ.ᐃⵠΔᐃᐃ, ᐃᐃ.ⵠⲆⲆⲆⵠᐃΔ, ᐃᐃ.ⵠⲆⵠⲆⲆ, ᐃᐃ.ⵠⲆΔⵠᐃ, ᐃᐃ.ⲆⵠᐃⲆⲆ, ᐃᐃ.ᐃⵠⲆΔⲆ];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("110_110_110")] = [ᐃᐃ.ⲆᐃⵠⵠⲆ, ᐃᐃ.ᐃᐃⵠⲆⲆⵠⲆ, ᐃᐃ.ᐃⲆᐃΔⲆⲆᐃ, ᐃᐃ.ᐃⵠΔᐃᐃ, ᐃᐃ.ⵠⲆⲆⲆⵠᐃΔ, ᐃᐃ.ⵠⲆⵠⲆⲆ, ᐃᐃ.ⵠⲆΔⵠᐃ, ᐃᐃ.ⲆⵠᐃⲆⲆ, ᐃᐃ.ᐃⵠⲆΔⲆ];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("110_111_000")] = [ᐃᐃ.Ⲇⵠᐃⵠⵠ, ᐃᐃ.ΔⵠⲆⲆΔ, ᐃᐃ.ᐃⲆᐃΔⲆⲆᐃ, ᐃᐃ.ᐃⵠΔᐃᐃ, ᐃᐃ.ᐃΔᐃⵠΔΔⵠ, ᐃᐃ.ⲆΔΔⲆᐃΔΔ, ᐃᐃ.ⵠⲆⵠⲆⲆ, ᐃᐃ.ⵠⵠᐃΔⲆⲆⵠ, ᐃᐃ.ⲆᐃⵠᐃⲆΔⲆ, ᐃᐃ.ⵠⲆΔⵠᐃ, ᐃᐃ.ⵠⲆᐃᐃΔ, ᐃᐃ.ⲆᐃⵠⲆΔ, ᐃᐃ.ᐃⵠⲆΔⲆ];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("110_111_110")] = [ᐃᐃ.Ⲇⵠᐃⵠⵠ, ᐃᐃ.ΔⵠⲆⲆΔ, ᐃᐃ.ⲆᐃⵠΔⵠ, ᐃᐃ.ⵠΔᐃⲆⲆ, ᐃᐃ.ⲆᐃⵠⵠⲆ, ᐃᐃ.ᐃᐃⵠⲆⲆⵠⲆ, ᐃᐃ.ᐃⲆᐃΔⲆⲆᐃ, ᐃᐃ.ᐃⵠΔᐃᐃ, ᐃᐃ.ᐃᐃⵠⲆⲆΔⵠ, ᐃᐃ.ⲆΔΔⲆᐃΔΔ, ᐃᐃ.ΔⲆᐃᐃᐃᐃᐃ, ᐃᐃ.ⵠⲆⲆⲆⵠᐃΔ, ᐃᐃ.ⵠⲆⵠⲆⲆ, ᐃᐃ.ⵠⵠᐃΔⲆⲆⵠ, ᐃᐃ.ⲆᐃⵠᐃⲆΔⲆ, ᐃᐃ.ⵠⲆΔⵠᐃ, ᐃᐃ.ⵠⲆᐃᐃΔ, ᐃᐃ.ⵠⵠⲆΔᐃΔⲆ, ᐃᐃ.ⵠⵠΔⲆⵠΔⲆ, ᐃᐃ.ⲆᐃΔⵠᐃᐃᐃ, ᐃᐃ.ⲆⵠᐃⲆⲆ, ᐃᐃ.ⲆᐃⵠⲆΔ, ᐃᐃ.ᐃⵠⲆΔⲆ];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("110_111_111")] = ᐃΔ[1025][ns.ᐃᐃⵠ][b("110_111_110")];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("110_111_011")] = ᐃΔ[1025][ns.ᐃᐃⵠ][b("110_111_110")];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("110_111_010")] = ᐃΔ[1025][ns.ᐃᐃⵠ][b("110_111_110")];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("111_111_110")] = [ᐃᐃ.ᐃⵠⲆΔⲆ, ᐃᐃ.ⲆᐃⵠⲆΔ, ᐃᐃ.ⲆⵠᐃⲆⲆ, ᐃᐃ.ⲆᐃΔⵠᐃᐃᐃ, ᐃᐃ.ⵠⵠΔⲆⵠΔⲆ, ᐃᐃ.ⵠⵠⲆΔᐃΔⲆ, ᐃᐃ.ⵠⲆᐃᐃΔ, ᐃᐃ.ⵠⲆΔⵠᐃ, ᐃᐃ.ⲆᐃⵠᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃΔⲆⲆⵠ, ᐃᐃ.ⵠⲆⵠⲆⲆ, ᐃᐃ.ⵠⲆⲆⲆⵠᐃΔ, ᐃᐃ.ΔⲆᐃᐃᐃᐃᐃ, ᐃᐃ.ⲆΔΔⲆᐃΔΔ, ᐃᐃ.ᐃᐃⵠⲆⲆΔⵠ, ᐃᐃ.ᐃⵠΔᐃᐃ, ᐃᐃ.ᐃⲆᐃΔⲆⲆᐃ, ᐃᐃ.ⲆᐃⵠⵠⲆ, ᐃᐃ.ⵠΔᐃⲆⲆ, ᐃᐃ.ⲆᐃⵠΔⵠ, ᐃᐃ.ΔⵠⲆⲆΔ, ᐃᐃ.Ⲇⵠᐃⵠⵠ, ᐃᐃ.ⲆⲆΔⲆⲆΔᐃ];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("111_111_011")] = ᐃΔ[1025][ns.ᐃᐃⵠ][b("111_111_110")];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("111_111_000")] = [ᐃᐃ.ᐃΔᐃⵠΔΔⵠ, ᐃᐃ.ᐃⵠΔᐃᐃ, ᐃᐃ.ᐃⲆᐃΔⲆⲆᐃ, ᐃᐃ.ΔⵠⲆⲆΔ, ᐃᐃ.Ⲇⵠᐃⵠⵠ, ᐃᐃ.ⲆⲆΔⲆⲆΔᐃ, ᐃᐃ.ⲆΔΔⲆᐃΔΔ];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("111_111_111")] = [ᐃᐃ.ⲆⲆΔⲆⲆΔᐃ, ᐃᐃ.Ⲇⵠᐃⵠⵠ, ᐃᐃ.ΔⵠⲆⲆΔ, ᐃᐃ.ΔⵠΔΔⵠᐃΔ, ᐃᐃ.ⲆᐃⵠΔⵠ, ᐃᐃ.ⵠΔᐃⲆⲆ, ᐃᐃ.ⲆᐃⵠⵠⲆ, ᐃᐃ.ᐃᐃⵠⲆⲆⵠⲆ, ᐃᐃ.ᐃⲆᐃΔⲆⲆᐃ, ᐃᐃ.ᐃⵠΔᐃᐃ, ᐃᐃ.ᐃᐃⵠⲆⲆΔⵠ, ᐃᐃ.ΔⲆᐃᐃᐃᐃᐃ, ᐃᐃ.ⵠⲆⲆⲆⵠᐃΔ, ᐃᐃ.ⵠⲆⵠⲆⲆ, ᐃᐃ.ⵠⵠᐃΔⲆⲆⵠ, ᐃᐃ.ⲆᐃⵠᐃⲆΔⲆ, ᐃᐃ.ⵠⲆΔⵠᐃ, ᐃᐃ.ⵠⲆᐃᐃΔ, ᐃᐃ.ⵠⵠⲆΔᐃΔⲆ, ᐃᐃ.ⵠⵠΔⲆⵠΔⲆ, ᐃᐃ.ⲆᐃΔⵠᐃᐃᐃ, ᐃᐃ.ⲆⵠᐃⲆⲆ, ᐃᐃ.ⲆᐃⵠⲆΔ, ᐃᐃ.ᐃⵠⲆΔⲆ];
    ᐃΔ[1025][ns.ᐃᐃⵠ][b("111_111_010")] = ᐃΔ[1025][ns.ᐃᐃⵠ][b("111_111_110")];
    ᐃΔ[1024] = [];
    ᐃΔ[1024][ns.ⵠᐃⵠ] = [];
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("000_010_000")] = ᐃᐃ.ᐃⲆⲆⲆⲆⵠⵠ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("000_010_010")] = ᐃᐃ.ΔⵠᐃⵠⲆΔⲆ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("000_011_000")] = ᐃᐃ.ᐃⲆⲆᐃⵠⲆⵠ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("000_011_010")] = ᐃᐃ.ⲆΔᐃᐃⲆΔΔ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("000_011_011")] = ᐃᐃ.ⵠⲆⵠᐃⵠⵠⲆ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("000_110_000")] = ᐃᐃ.ΔᐃΔᐃⲆᐃΔ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("000_110_010")] = ᐃᐃ.ⲆΔⵠⲆⲆⵠᐃ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("000_110_110")] = ᐃᐃ.ⵠᐃᐃᐃᐃⲆⲆ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("000_111_000")] = ᐃᐃ.ⵠᐃⵠᐃⵠⵠⲆ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("000_111_010")] = ᐃᐃ.ᐃΔΔᐃⵠᐃⲆ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("000_111_011")] = ᐃᐃ.ᐃᐃᐃᐃⵠⵠⲆ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("000_111_110")] = ᐃᐃ.ⲆᐃΔᐃⲆⵠⵠ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("000_111_111")] = ᐃᐃ.ΔᐃΔΔΔΔⲆ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("010_010_000")] = ᐃᐃ.ᐃΔᐃⲆⵠᐃΔ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("010_010_010")] = ᐃᐃ.ᐃⲆΔⵠᐃΔᐃ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("010_011_000")] = ᐃᐃ.ⲆΔᐃⵠᐃⲆΔ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("010_011_010")] = ᐃᐃ.ⵠᐃⵠⵠⲆⵠΔ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("010_011_011")] = ᐃᐃ.ᐃⲆΔᐃⲆⲆⲆ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("010_110_000")] = ᐃᐃ.ⲆⵠΔⵠᐃᐃᐃ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("010_110_010")] = ᐃᐃ.ΔΔΔⲆᐃⲆⵠ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("010_110_110")] = ᐃᐃ.ᐃΔΔⲆⵠᐃⵠ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("010_111_000")] = ᐃᐃ.ᐃⲆⵠⵠⵠΔⲆ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("010_111_010")] = ᐃᐃ.ⲆᐃΔᐃⵠΔⵠ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("010_111_011")] = ᐃᐃ.ⲆΔᐃⵠᐃⲆⵠ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("010_111_110")] = ᐃᐃ.Δⵠᐃᐃⵠᐃⵠ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("010_111_111")] = ᐃᐃ.ⲆⵠᐃⵠⲆΔΔ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("011_011_000")] = ᐃᐃ.ΔΔⵠⵠⲆΔⲆ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("011_011_010")] = ᐃᐃ.ᐃⲆΔⵠⵠⵠΔ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("011_011_011")] = ᐃᐃ.ⵠᐃⲆⲆᐃⲆΔ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("011_111_000")] = ᐃᐃ.ΔⲆᐃⵠΔᐃⲆ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("011_111_010")] = ᐃᐃ.ⵠⵠΔΔΔΔΔ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("011_111_011")] = ᐃᐃ.ᐃᐃΔⵠⵠΔⵠ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("011_111_110")] = ᐃᐃ.ⵠᐃⵠⵠᐃⲆⵠ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("011_111_111")] = ᐃᐃ.ⵠᐃⲆΔⲆⲆΔ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("110_110_000")] = ᐃᐃ.ⵠⲆⵠΔᐃΔΔ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("110_110_010")] = ᐃᐃ.ΔᐃΔⵠⵠⲆᐃ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("110_110_110")] = ᐃᐃ.ΔⵠᐃᐃⵠΔⵠ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("110_111_000")] = ᐃᐃ.ⲆΔᐃⵠᐃⵠᐃ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("110_111_010")] = ᐃᐃ.ⵠᐃⵠᐃΔⲆᐃ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("110_111_011")] = ᐃᐃ.ⲆΔⲆⲆⲆΔⲆ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("110_111_110")] = ᐃᐃ.ⵠᐃⵠⲆⲆⵠᐃ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("110_111_111")] = ᐃᐃ.ᐃΔⵠᐃᐃΔᐃ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("111_111_011")] = ᐃᐃ.ᐃΔᐃΔᐃⲆΔ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("111_111_110")] = ᐃᐃ.ᐃⲆⲆⲆⵠⲆⲆ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("111_111_011")] = ᐃᐃ.ᐃΔᐃΔᐃⲆΔ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("111_111_000")] = ᐃᐃ.ΔᐃΔΔⵠᐃⵠ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("111_111_111")] = ᐃᐃ.ⵠΔΔⵠΔⲆᐃ;
    ᐃΔ[1024][ns.ⵠᐃⵠ][b("111_111_010")] = ᐃᐃ.ᐃᐃΔΔⵠⵠⵠ;
    ᐃΔ[1024][ns.ᐃᐃⵠ] = [];
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("000_010_000")] = ᐃᐃ.ΔᐃⵠⵠΔΔⲆ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("000_010_010")] = ᐃᐃ.ⵠΔⲆΔⲆΔⲆ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("000_011_000")] = ᐃᐃ.ⲆⲆᐃᐃᐃⲆⲆ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("000_011_010")] = ᐃᐃ.ⲆᐃⲆᐃᐃᐃΔ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("000_011_011")] = ᐃᐃ.ⵠⵠⵠⵠⲆⲆⲆ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("000_110_000")] = ᐃᐃ.ⵠⵠⵠⲆΔⲆⲆ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("000_110_010")] = ᐃᐃ.ΔⵠΔⵠⲆⲆⲆ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("000_110_110")] = ᐃᐃ.ᐃⵠΔⲆΔⵠᐃ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("000_111_000")] = ᐃᐃ.ᐃᐃⲆⵠⲆⵠⲆ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("000_111_010")] = ᐃᐃ.ᐃⵠⵠⲆᐃⵠⲆ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("000_111_011")] = ᐃᐃ.ⲆⵠⲆᐃⵠΔⲆ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("000_111_110")] = ᐃᐃ.ΔᐃᐃᐃⲆᐃⵠ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("000_111_111")] = ᐃᐃ.ⵠᐃΔⲆⵠΔΔ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("010_010_000")] = ᐃᐃ.ΔΔⲆᐃⲆⵠⲆ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("010_010_010")] = ᐃᐃ.ΔⲆᐃΔⵠⵠⲆ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("010_011_000")] = ᐃᐃ.ᐃⲆⵠΔᐃⵠΔ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("010_011_010")] = ᐃᐃ.ⲆΔⵠΔⲆᐃⲆ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("010_011_011")] = ᐃᐃ.ᐃⲆⲆⵠᐃⲆᐃ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("010_110_000")] = ᐃᐃ.ⵠⲆᐃⲆⲆᐃⵠ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("010_110_010")] = ᐃᐃ.ΔⵠΔΔᐃⵠⲆ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("010_110_110")] = ᐃᐃ.ⲆᐃⲆⵠᐃⲆⵠ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("010_111_000")] = ᐃᐃ.ⵠⵠᐃⲆⵠΔᐃ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("010_111_010")] = ᐃᐃ.ᐃΔⵠⲆΔⵠⵠ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("010_111_011")] = ᐃᐃ.ᐃⵠⲆΔΔⵠⵠ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("010_111_110")] = ᐃᐃ.ᐃΔᐃⵠⵠⲆⵠ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("010_111_111")] = ᐃᐃ.ⵠΔⲆᐃᐃⲆΔ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("011_011_000")] = ᐃᐃ.ΔⵠΔᐃΔⵠⵠ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("011_011_010")] = ᐃᐃ.ᐃΔΔⲆᐃⵠⵠ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("011_011_011")] = ᐃᐃ.ᐃᐃΔⵠᐃⲆΔ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("011_111_000")] = ᐃᐃ.ⵠⵠᐃᐃΔⲆⵠ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("011_111_010")] = ᐃᐃ.ⵠⲆⵠΔΔⵠⲆ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("011_111_011")] = ᐃᐃ.ⵠⲆΔᐃᐃᐃⵠ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("011_111_110")] = ᐃᐃ.ⵠⵠⲆⵠⲆᐃⲆ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("011_111_111")] = ᐃᐃ.ⵠᐃⵠⲆΔⵠᐃ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("110_110_000")] = ᐃᐃ.ᐃᐃⲆᐃΔⵠⲆ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("110_110_010")] = ᐃᐃ.ⲆⲆΔᐃⲆΔΔ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("110_110_110")] = ᐃᐃ.ⲆΔⵠΔⵠᐃⵠ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("110_111_000")] = ᐃᐃ.ᐃⵠⵠΔⲆⲆΔ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("110_111_010")] = ᐃᐃ.ΔᐃⵠⲆⵠᐃΔ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("110_111_011")] = ᐃᐃ.Δⵠⵠᐃᐃᐃᐃ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("110_111_110")] = ᐃᐃ.ᐃⵠⵠΔᐃᐃⵠ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("110_111_111")] = ᐃᐃ.ⵠⲆΔⲆΔⲆΔ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("111_111_011")] = ᐃᐃ.ᐃΔᐃⲆᐃΔᐃ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("111_111_110")] = ᐃᐃ.ⵠⵠΔᐃⵠᐃⲆ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("111_111_011")] = ᐃᐃ.ᐃΔᐃⲆᐃΔᐃ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("111_111_000")] = ᐃᐃ.ᐃΔᐃᐃⵠⲆⵠ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("111_111_111")] = ᐃᐃ.ᐃᐃⵠᐃⵠΔⲆ;
    ᐃΔ[1024][ns.ᐃᐃⵠ][b("111_111_010")] = ᐃᐃ.ⲆⵠⵠᐃΔⲆᐃ;
    ᐃΔ[32] = [];
    ᐃΔ[32][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆⵠᐃᐃᐃⵠⲆ;
    ᐃΔ[32][ns.ᐃᐃⵠ] = ᐃᐃ.ΔⲆⲆⲆⵠᐃⵠ;
    ᐃΔ[205] = [];
    ᐃΔ[205][ns.ⵠᐃⵠ] = ᐃᐃ.ΔⵠΔΔⵠΔⵠ;
    ᐃΔ[205][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃⲆⲆⲆⲆΔᐃ;
    ᐃΔ[957] = [];
    ᐃΔ[957][ns.ⵠᐃⵠ] = ᐃᐃ.ΔᐃΔⲆᐃᐃᐃ;
    ᐃΔ[957][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃⵠⵠΔⲆᐃΔ;
    ᐃΔ[207] = [];
    ᐃΔ[207][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃᐃⵠⲆⵠⵠᐃ;
    ᐃΔ[207][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠᐃⲆΔⲆΔⵠ;
    ᐃΔ[954] = [];
    ᐃΔ[954][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⲆΔⵠΔᐃΔ;
    ᐃΔ[954][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆᐃΔⲆⲆᐃΔ;
    ᐃΔ[958] = [];
    ᐃΔ[958][ns.ⵠᐃⵠ] = ᐃᐃ.ΔⲆΔⵠⵠᐃΔ;
    ᐃΔ[958][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆᐃΔⵠⵠᐃΔ;
    ᐃΔ[209] = [];
    ᐃΔ[209][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆΔΔⵠⵠΔΔ;
    ᐃΔ[209][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆⵠⲆⲆⵠᐃⲆ;
    ᐃΔ[971] = [];
    ᐃΔ[971][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆᐃᐃΔⵠΔΔ;
    ᐃΔ[971][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠⲆΔⵠΔΔᐃ;
    ᐃΔ[211] = [];
    ᐃΔ[211][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆⵠⵠᐃⲆᐃⲆ;
    ᐃΔ[211][ns.ᐃᐃⵠ] = ᐃᐃ.ΔΔⲆⲆⵠᐃⵠ;
    ᐃΔ[986] = [];
    ᐃΔ[986][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆⲆᐃᐃΔⲆΔ;
    ᐃΔ[986][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆⵠⵠⵠᐃΔΔ;
    ᐃΔ[989] = [];
    ᐃΔ[989][ns.ⵠᐃⵠ] = [ᐃᐃ.ⲆᐃⲆⵠⲆΔⲆ];
    ᐃΔ[989][ns.ᐃᐃⵠ] = [ᐃᐃ.ⲆⲆⵠⲆⵠΔⵠ];
    ᐃΔ[217] = [];
    ᐃΔ[217][ns.ⵠᐃⵠ] = ᐃᐃ.Ⲇᐃⵠᐃⵠⵠⵠ;
    ᐃΔ[217][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆⲆⵠⵠⲆⵠⵠ;
    ᐃΔ[219] = [];
    ᐃΔ[219][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⲆᐃⲆΔΔⵠ;
    ᐃΔ[219][ns.ᐃᐃⵠ] = ᐃᐃ.Ⲇᐃⵠⵠⵠᐃᐃ;
    ᐃΔ[218] = [];
    ᐃΔ[218][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠΔᐃⲆⵠⵠΔ;
    ᐃΔ[218][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃᐃΔⲆⲆΔΔ;
    ᐃΔ[212] = [];
    ᐃΔ[212][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠᐃⲆᐃᐃᐃⵠ;
    ᐃΔ[212][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃⲆⵠⵠᐃⲆΔ;
    ᐃΔ[213] = [];
    ᐃΔ[213][ns.ⵠᐃⵠ] = ᐃᐃ.ΔⵠⵠⵠⲆΔⲆ;
    ᐃΔ[213][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠΔᐃΔᐃᐃⲆ;
    ᐃΔ[214] = [];
    ᐃΔ[214][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠⵠᐃᐃⵠᐃᐃ;
    ᐃΔ[214][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃⵠⲆΔⵠᐃⲆ;
    ᐃΔ[215] = [];
    ᐃΔ[215][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃᐃⵠⲆⲆᐃΔ;
    ᐃΔ[215][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠΔᐃⵠᐃⲆⲆ;
    ᐃΔ[216] = [];
    ᐃΔ[216][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆᐃⵠⵠΔⵠⲆ;
    ᐃΔ[216][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃⲆᐃⵠΔⲆⲆ;
    ᐃΔ[220] = [];
    ᐃΔ[220][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆⲆᐃⵠΔⵠⲆ;
    ᐃΔ[220][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃΔⲆΔⲆⵠᐃ;
    ᐃΔ[1020] = [];
    ᐃΔ[1020][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆᐃᐃⵠⵠⲆⵠ;
    ᐃΔ[1020][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃᐃΔⲆᐃⵠⲆ;
    ᐃΔ[1021] = [];
    ᐃΔ[1021][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⲆΔⲆⲆᐃⲆ;
    ᐃΔ[1021][ns.ᐃᐃⵠ] = ᐃᐃ.ΔᐃᐃᐃᐃⵠⲆ;
    ᐃΔ[39] = [];
    ᐃΔ[39][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃΔⲆⵠⲆⵠΔ;
    ᐃΔ[39][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆⲆⲆⵠΔⲆΔ;
    ᐃΔ[1022] = ᐃᐃ.ΔⲆΔΔΔⵠⵠ;
    ᐃΔ[1023] = ᐃᐃ.ⲆΔⵠⵠᐃᐃᐃ;
    ᐃΔ[1041] = [];
    ᐃΔ[1041][ns.ⵠᐃⵠ] = [];
    ᐃΔ[1041][ns.ᐃᐃⵠ] = [];
    ᐃΔ[1041][ns.ⵠᐃⵠ].push(ᐃᐃ.ⵠⵠⵠᐃᐃⵠⲆ);
    ᐃΔ[1041][ns.ⵠᐃⵠ].push(ᐃᐃ.ⵠᐃⵠᐃᐃⵠⵠ);
    ᐃΔ[1041][ns.ⵠᐃⵠ].push(ᐃᐃ.ⲆᐃᐃⲆΔᐃΔ);
    ᐃΔ[1041][ns.ᐃᐃⵠ].push(ᐃᐃ.ⲆⲆᐃⲆΔᐃᐃ);
    ᐃΔ[1041][ns.ᐃᐃⵠ].push(ᐃᐃ.ΔᐃⲆⲆΔᐃⵠ);
    ᐃΔ[1041][ns.ᐃᐃⵠ].push(ᐃᐃ.ᐃΔΔⵠΔΔⲆ);
    ᐃΔ[244] = [];
    ᐃΔ[244][ns.ⵠᐃⵠ] = [];
    ᐃΔ[244][ns.ᐃᐃⵠ] = [];
    ᐃΔ[244][ns.ⵠᐃⵠ].push(ᐃᐃ.ⵠΔⵠⲆΔΔⲆ);
    ᐃΔ[244][ns.ⵠᐃⵠ].push(ᐃᐃ.ⲆⵠᐃⵠᐃⵠΔ);
    ᐃΔ[244][ns.ⵠᐃⵠ].push(ᐃᐃ.ᐃⵠᐃⵠΔᐃᐃ);
    ᐃΔ[244][ns.ᐃᐃⵠ].push(ᐃᐃ.ⵠⵠΔⲆᐃΔᐃ);
    ᐃΔ[244][ns.ᐃᐃⵠ].push(ᐃᐃ.ⵠⲆⲆΔᐃΔⲆ);
    ᐃΔ[244][ns.ᐃᐃⵠ].push(ᐃᐃ.ᐃⵠᐃΔΔᐃΔ);
    ᐃΔ[1052] = [];
    ᐃΔ[1052][ns.ⵠᐃⵠ] = [];
    ᐃΔ[1052][ns.ᐃᐃⵠ] = [];
    ᐃΔ[1052][ns.ⵠᐃⵠ].push(ᐃᐃ.ⲆⵠⵠⲆΔᐃᐃ);
    ᐃΔ[1052][ns.ⵠᐃⵠ].push(ᐃᐃ.ⵠΔΔⲆⲆⲆΔ);
    ᐃΔ[1052][ns.ⵠᐃⵠ].push(ᐃᐃ.ⲆⲆⵠⵠⲆⵠᐃ);
    ᐃΔ[1052][ns.ⵠᐃⵠ].push(ᐃᐃ.ᐃᐃᐃΔⵠᐃⵠ);
    ᐃΔ[1052][ns.ⵠᐃⵠ].push(ᐃᐃ.ⵠⲆⲆⲆΔⲆⲆ);
    ᐃΔ[1052][ns.ᐃᐃⵠ].push(ᐃᐃ.ⲆⵠⲆΔⲆⵠΔ);
    ᐃΔ[1052][ns.ᐃᐃⵠ].push(ᐃᐃ.ⲆⲆⵠᐃⲆⲆⲆ);
    ᐃΔ[1052][ns.ᐃᐃⵠ].push(ᐃᐃ.ⲆⵠⲆⲆⵠⵠⲆ);
    ᐃΔ[1052][ns.ᐃᐃⵠ].push(ᐃᐃ.ΔΔⵠⵠⵠΔⲆ);
    ᐃΔ[1052][ns.ᐃᐃⵠ].push(ᐃᐃ.ᐃⲆᐃⲆΔⲆᐃ);
    ᐃΔ[450] = [];
    ᐃΔ[450][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠⲆᐃⲆⵠⵠⵠ;
    ᐃΔ[450][ns.ᐃᐃⵠ] = ᐃᐃ.ΔⵠⵠΔⲆᐃᐃ;
    ᐃΔ[453] = [];
    ᐃΔ[453][ns.ⵠᐃⵠ] = ᐃᐃ.ΔᐃΔᐃΔⲆΔ;
    ᐃΔ[453][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆᐃᐃⵠᐃⲆΔ;
    ᐃΔ[454] = [];
    ᐃΔ[454][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠⲆᐃΔΔⵠΔ;
    ᐃΔ[454][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆᐃⲆⲆΔΔᐃ;
    ᐃΔ[464] = ᐃᐃ.ⵠⵠᐃⲆᐃⵠΔ;
    ᐃΔ[468] = ᐃᐃ.ΔⵠΔᐃΔΔᐃ;
    ᐃΔ[469] = ᐃᐃ.ⲆΔᐃⲆⵠⲆᐃ;
    ᐃΔ[20] = [];
    ᐃΔ[20][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆⵠⲆᐃΔⵠᐃ;
    ᐃΔ[20][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃᐃΔΔⲆⲆⵠ;
    ᐃΔ[920] = [];
    ᐃΔ[920][ns.ⵠᐃⵠ] = ᐃᐃ.ΔⵠᐃΔⵠᐃⵠ;
    ᐃΔ[920][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠⲆⵠᐃⲆⵠᐃ;
    ᐃΔ[21] = [];
    ᐃΔ[21][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⲆⲆᐃⲆⲆΔ;
    ᐃΔ[21][ns.ᐃᐃⵠ] = ᐃᐃ.ΔⵠⲆⲆᐃⲆᐃ;
    ᐃΔ[924] = [];
    ᐃΔ[924][ns.ⵠᐃⵠ] = ᐃᐃ.ΔⵠᐃΔⵠᐃⵠ;
    ᐃΔ[924][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠⲆⵠᐃⲆⵠᐃ;
    ᐃΔ[44] = [];
    ᐃΔ[44][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆⵠⵠⵠᐃⲆΔ;
    ᐃΔ[44][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆΔᐃᐃᐃΔⲆ;
    ᐃΔ[19] = [];
    ᐃΔ[19][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⲆΔⵠᐃΔⵠ;
    ᐃΔ[19][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃᐃⲆⵠⵠΔΔ;
    ᐃΔ[34] = [];
    ᐃΔ[34][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⲆᐃᐃⵠᐃⵠ;
    ᐃΔ[34][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃⲆⵠⲆⵠⲆΔ;
    ᐃΔ[17] = [];
    ᐃΔ[17][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠΔⲆⲆⲆΔᐃ;
    ᐃΔ[17][ns.ᐃᐃⵠ] = ᐃᐃ.ΔᐃΔⵠⵠⲆΔ;
    ᐃΔ[63] = [];
    ᐃΔ[63][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃᐃᐃᐃⲆⲆⵠ;
    ᐃΔ[63][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆⲆⲆᐃⲆᐃⲆ;
    ᐃΔ[60] = [];
    ᐃΔ[60][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⲆⲆⵠᐃΔⵠ;
    ᐃΔ[60][ns.ᐃᐃⵠ] = ᐃᐃ.ΔΔⵠΔᐃⲆᐃ;
    ᐃΔ[94] = [];
    ᐃΔ[94][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠⲆⲆⵠΔⲆᐃⵠⲆ;
    ᐃΔ[94][ns.ᐃᐃⵠ] = ᐃᐃ.ΔΔΔᐃᐃΔⵠⲆⵠ;
    ᐃΔ[95] = [];
    ᐃΔ[95][ns.ⵠᐃⵠ] = ᐃᐃ.ΔⲆⵠⵠΔᐃΔⲆⵠ;
    ᐃΔ[95][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠᐃᐃⲆⵠⵠΔᐃᐃ;
    ᐃΔ[96] = [];
    ᐃΔ[96][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠᐃΔⲆΔⵠΔⲆᐃ;
    ᐃΔ[96][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆΔⵠΔΔⲆᐃⵠⲆ;
    ᐃΔ[97] = [];
    ᐃΔ[97][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⵠᐃⲆⲆᐃΔⲆⲆ;
    ᐃΔ[97][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆⵠⵠΔⲆΔΔΔⲆ;
    ᐃΔ[98] = [];
    ᐃΔ[98][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆᐃⲆⲆⵠⵠᐃⲆⵠ;
    ᐃΔ[98][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆⲆᐃⲆΔⵠᐃⵠΔ;
    ᐃΔ[99] = [];
    ᐃΔ[99][ns.ⵠᐃⵠ] = ᐃᐃ.ΔⵠⲆᐃⲆΔⲆⵠⵠ;
    ᐃΔ[99][ns.ᐃᐃⵠ] = ᐃᐃ.ΔⲆΔΔᐃΔΔⲆⵠ;
    ᐃΔ[90] = [];
    ᐃΔ[90][ns.ⵠᐃⵠ] = ᐃᐃ.ΔᐃⵠⵠΔᐃⲆ;
    ᐃΔ[90][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆⲆᐃⲆⲆΔⲆ;
    ᐃΔ[91] = [];
    ᐃΔ[91][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⲆⵠᐃᐃᐃⵠ;
    ᐃΔ[91][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆᐃⲆᐃΔΔᐃ;
    ᐃΔ[71] = [];
    ᐃΔ[71][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆΔⲆⲆΔΔᐃᐃΔ;
    ᐃΔ[71][ns.ᐃᐃⵠ] = ᐃᐃ.ΔⵠΔⵠΔⲆᐃⵠΔ;
    ᐃΔ[72] = [];
    ᐃΔ[72][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⲆΔΔᐃᐃᐃᐃⵠ;
    ᐃΔ[72][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆΔⲆΔᐃⵠΔⵠⵠ;
    ᐃΔ[73] = [];
    ᐃΔ[73][ns.ⵠᐃⵠ] = ᐃᐃ.ΔⵠⲆᐃⲆΔⲆⵠⲆ;
    ᐃΔ[73][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆΔΔⲆⲆΔⵠⲆⲆ;
    ᐃΔ[74] = [];
    ᐃΔ[74][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠⲆⵠᐃΔⲆΔΔΔ;
    ᐃΔ[74][ns.ᐃᐃⵠ] = ᐃᐃ.ΔᐃᐃⲆⲆⲆᐃΔⵠ;
    ᐃΔ[75] = [];
    ᐃΔ[75][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⵠᐃᐃⲆΔⲆΔᐃ;
    ᐃΔ[75][ns.ᐃᐃⵠ] = ᐃᐃ.ΔᐃⲆⲆΔⲆⵠⵠΔ;
    ᐃΔ[76] = [];
    ᐃΔ[76][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆΔⵠⵠⵠⲆᐃΔᐃ;
    ᐃΔ[76][ns.ᐃᐃⵠ] = ᐃᐃ.ΔⵠΔⵠΔᐃΔⵠⲆ;
    ᐃΔ[101] = [];
    ᐃΔ[101][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆⲆᐃΔᐃⵠᐃ;
    ᐃΔ[101][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠΔΔᐃΔᐃⵠ;
    ᐃΔ[64] = [];
    ᐃΔ[64][ns.ⵠᐃⵠ] = ᐃᐃ.ΔΔᐃᐃⵠⵠⵠ;
    ᐃΔ[64][ns.ᐃᐃⵠ] = ᐃᐃ.ΔᐃⲆᐃⵠᐃΔ;
    ᐃΔ[102] = [];
    ᐃΔ[102][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠΔᐃⲆⲆⵠΔ;
    ᐃΔ[102][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆⲆⵠΔᐃⵠⵠ;
    ᐃΔ[65] = [];
    ᐃΔ[65][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃᐃⲆⲆⲆᐃᐃ;
    ᐃΔ[65][ns.ᐃᐃⵠ] = ᐃᐃ.ΔΔⲆΔᐃⲆΔ;
    ᐃΔ[103] = [];
    ᐃΔ[103][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠⲆΔΔⲆᐃᐃ;
    ᐃΔ[103][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆⵠΔᐃⲆΔΔ;
    ᐃΔ[66] = [];
    ᐃΔ[66][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⵠⲆⲆⲆᐃᐃ;
    ᐃΔ[66][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆⲆᐃΔΔⲆⲆ;
    ᐃΔ[104] = [];
    ᐃΔ[104][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠⲆΔⵠᐃⲆᐃ;
    ᐃΔ[104][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠᐃⵠⵠᐃΔᐃ;
    ᐃΔ[67] = [];
    ᐃΔ[67][ns.ⵠᐃⵠ] = ᐃᐃ.ΔⲆᐃⵠⲆⵠΔ;
    ᐃΔ[67][ns.ᐃᐃⵠ] = ᐃᐃ.ΔΔᐃⲆⵠⵠⵠ;
    ᐃΔ[105] = [];
    ᐃΔ[105][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆᐃⲆⲆᐃᐃᐃ;
    ᐃΔ[105][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠⵠᐃΔⵠⲆᐃ;
    ᐃΔ[68] = [];
    ᐃΔ[68][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⲆⵠΔᐃⲆⲆ;
    ᐃΔ[68][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠΔΔⵠⲆΔΔ;
    ᐃΔ[106] = [];
    ᐃΔ[106][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆⲆΔⲆΔⲆⲆ;
    ᐃΔ[106][ns.ᐃᐃⵠ] = ᐃᐃ.ΔΔΔΔᐃΔᐃ;
    ᐃΔ[69] = [];
    ᐃΔ[69][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃΔⵠΔᐃΔᐃ;
    ᐃΔ[69][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠΔᐃΔⵠΔᐃ;
    ᐃΔ[107] = [];
    ᐃΔ[107][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃΔⲆⲆΔᐃⵠ;
    ᐃΔ[107][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃᐃᐃⲆⲆⵠΔ;
    ᐃΔ[70] = [];
    ᐃΔ[70][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠⲆΔᐃΔⵠΔ;
    ᐃΔ[70][ns.ᐃᐃⵠ] = ᐃᐃ.ΔⲆΔΔᐃⲆⲆ;
    ᐃΔ[80] = [];
    ᐃΔ[80][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠΔᐃⵠΔΔᐃ;
    ᐃΔ[80][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠⲆΔⵠⵠᐃᐃ;
    ᐃΔ[81] = [];
    ᐃΔ[81][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠᐃᐃⲆⵠⵠⲆ;
    ᐃΔ[81][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆⲆᐃⲆᐃᐃⵠ;
    ᐃΔ[22] = [];
    ᐃΔ[22][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠᐃⵠΔᐃⵠᐃ;
    ᐃΔ[22][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠⲆΔᐃⲆⲆⲆ;
    ᐃΔ[928] = [];
    ᐃΔ[928][ns.ⵠᐃⵠ] = ᐃᐃ.ΔᐃᐃⵠⲆⵠⲆ;
    ᐃΔ[928][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃᐃΔΔⲆΔⲆ;
    ᐃΔ[935] = [];
    ᐃΔ[935][ns.ⵠᐃⵠ] = [];
    ᐃΔ[935][ns.ᐃᐃⵠ] = [];
    ᐃΔ[935][ns.ⵠᐃⵠ].push(ᐃᐃ.ⵠⵠᐃᐃⲆΔᐃΔⵠ);
    ᐃΔ[935][ns.ⵠᐃⵠ].push(ᐃᐃ.ⲆⲆΔⵠⲆⲆᐃⲆΔ);
    ᐃΔ[935][ns.ᐃᐃⵠ].push(ᐃᐃ.ⲆⲆΔⵠⲆⲆᐃⲆΔ);
    ᐃΔ[935][ns.ᐃᐃⵠ].push(ᐃᐃ.ᐃⲆⲆᐃⵠⵠᐃⲆⵠ);
    ᐃΔ[941] = [];
    ᐃΔ[941][ns.ⵠᐃⵠ] = [];
    ᐃΔ[941][ns.ᐃᐃⵠ] = [];
    ᐃΔ[941][ns.ⵠᐃⵠ].push(ᐃᐃ.ⵠᐃᐃΔΔᐃⵠ);
    ᐃΔ[941][ns.ⵠᐃⵠ].push(ᐃᐃ.ΔⲆΔΔᐃΔⲆ);
    ᐃΔ[941][ns.ⵠᐃⵠ].push(ᐃᐃ.ΔⵠⲆⲆⵠⲆⲆ);
    ᐃΔ[941][ns.ᐃᐃⵠ].push(ᐃᐃ.ᐃⵠΔᐃⵠⵠⵠ);
    ᐃΔ[941][ns.ᐃᐃⵠ].push(ᐃᐃ.ⵠΔΔⲆᐃⵠⵠ);
    ᐃΔ[941][ns.ᐃᐃⵠ].push(ᐃᐃ.ΔΔᐃⲆⵠᐃΔ);
    ᐃΔ[53] = [];
    ᐃΔ[53][ns.ⵠᐃⵠ] = ᐃᐃ.ΔΔΔᐃⲆⵠⲆ;
    ᐃΔ[53][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠᐃᐃᐃᐃⲆⵠ;
    ᐃΔ[54] = [];
    ᐃΔ[54][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⲆΔᐃΔⲆΔ;
    ᐃΔ[54][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠΔᐃΔⵠⲆΔ;
    ᐃΔ[241] = [];
    ᐃΔ[241][ns.ⵠᐃⵠ] = [];
    ᐃΔ[241][ns.ᐃᐃⵠ] = [];
    ᐃΔ[241][ns.ⵠᐃⵠ].push(ᐃᐃ.ᐃΔⵠᐃᐃᐃⲆ);
    ᐃΔ[241][ns.ⵠᐃⵠ].push(ᐃᐃ.ⲆᐃΔⲆⵠⵠⲆ);
    ᐃΔ[241][ns.ⵠᐃⵠ].push(ᐃᐃ.ΔⲆⲆⵠΔⲆⲆ);
    ᐃΔ[241][ns.ᐃᐃⵠ].push(ᐃᐃ.ᐃⵠΔΔΔᐃΔ);
    ᐃΔ[241][ns.ᐃᐃⵠ].push(ᐃᐃ.ⵠⲆⲆⲆⲆΔΔ);
    ᐃΔ[241][ns.ᐃᐃⵠ].push(ᐃᐃ.ΔᐃⲆⲆᐃᐃᐃ);
    ᐃΔ[202] = [];
    ᐃΔ[202][ns.ⵠᐃⵠ] = [];
    ᐃΔ[202][ns.ᐃᐃⵠ] = [];
    ᐃΔ[202][ns.ⵠᐃⵠ].push(ᐃᐃ.ᐃΔΔⵠᐃΔΔ);
    ᐃΔ[202][ns.ⵠᐃⵠ].push(ᐃᐃ.ⵠⵠⲆⲆΔⵠΔ);
    ᐃΔ[202][ns.ⵠᐃⵠ].push(ᐃᐃ.ⲆⲆΔⵠⲆΔⵠ);
    ᐃΔ[202][ns.ᐃᐃⵠ].push(ᐃᐃ.ⲆⵠΔⵠⲆᐃⲆ);
    ᐃΔ[202][ns.ᐃᐃⵠ].push(ᐃᐃ.ΔᐃⵠᐃⵠⲆΔ);
    ᐃΔ[202][ns.ᐃᐃⵠ].push(ᐃᐃ.ⲆᐃᐃᐃⲆⲆΔ);
    ᐃΔ[203] = [];
    ᐃΔ[203][ns.ⵠᐃⵠ] = [];
    ᐃΔ[203][ns.ᐃᐃⵠ] = [];
    ᐃΔ[203][ns.ⵠᐃⵠ].push(ᐃᐃ.ΔᐃⲆᐃⲆⲆⵠ);
    ᐃΔ[203][ns.ⵠᐃⵠ].push(ᐃᐃ.ΔⵠⵠΔᐃⲆⲆ);
    ᐃΔ[203][ns.ⵠᐃⵠ].push(ᐃᐃ.ᐃᐃΔᐃᐃᐃΔ);
    ᐃΔ[203][ns.ⵠᐃⵠ].push(ᐃᐃ.ΔⵠⵠΔⲆⲆΔ);
    ᐃΔ[203][ns.ⵠᐃⵠ].push(ᐃᐃ.ᐃᐃⵠⵠⵠᐃⲆ);
    ᐃΔ[203][ns.ⵠᐃⵠ].push(ᐃᐃ.ΔⵠΔΔᐃᐃⵠ);
    ᐃΔ[203][ns.ᐃᐃⵠ].push(ᐃᐃ.ⲆᐃⵠⵠⲆⵠⲆ);
    ᐃΔ[203][ns.ᐃᐃⵠ].push(ᐃᐃ.ⵠΔᐃᐃⵠᐃᐃ);
    ᐃΔ[203][ns.ᐃᐃⵠ].push(ᐃᐃ.ΔⲆᐃⲆⲆⲆᐃ);
    ᐃΔ[203][ns.ᐃᐃⵠ].push(ᐃᐃ.ⲆΔΔⲆⲆᐃᐃ);
    ᐃΔ[203][ns.ᐃᐃⵠ].push(ᐃᐃ.ⲆⵠΔᐃⵠΔⵠ);
    ᐃΔ[203][ns.ᐃᐃⵠ].push(ᐃᐃ.ΔΔᐃᐃΔΔᐃ);
    ᐃΔ[ns.ΔΔᐃᐃᐃ] = [];
    ᐃΔ[ns.ΔΔᐃᐃᐃ][ns.ⵠᐃⵠ] = [];
    ᐃΔ[ns.ΔΔᐃᐃᐃ][ns.ᐃᐃⵠ] = [];
    ᐃΔ[ns.ΔΔᐃᐃᐃ][ns.ⵠᐃⵠ].push(ᐃᐃ.ΔⵠᐃⲆᐃΔⵠ);
    ᐃΔ[ns.ΔΔᐃᐃᐃ][ns.ⵠᐃⵠ].push(ᐃᐃ.ⲆⵠᐃⲆΔΔⲆ);
    ᐃΔ[ns.ΔΔᐃᐃᐃ][ns.ⵠᐃⵠ].push(ᐃᐃ.ᐃⵠⲆᐃⲆᐃⵠ);
    ᐃΔ[ns.ΔΔᐃᐃᐃ][ns.ⵠᐃⵠ].push(ᐃᐃ.ⵠΔΔⵠⲆΔⵠ);
    ᐃΔ[ns.ΔΔᐃᐃᐃ][ns.ⵠᐃⵠ].push(ᐃᐃ.ⲆᐃᐃᐃΔᐃΔ);
    ᐃΔ[ns.ΔΔᐃᐃᐃ][ns.ⵠᐃⵠ].push(ᐃᐃ.ΔⵠΔⵠᐃⲆᐃ);
    ᐃΔ[ns.ΔΔᐃᐃᐃ][ns.ᐃᐃⵠ].push(ᐃᐃ.ᐃᐃⵠⵠⲆᐃⵠ);
    ᐃΔ[ns.ΔΔᐃᐃᐃ][ns.ᐃᐃⵠ].push(ᐃᐃ.ᐃΔⵠⲆⲆⲆⵠ);
    ᐃΔ[ns.ΔΔᐃᐃᐃ][ns.ᐃᐃⵠ].push(ᐃᐃ.ⵠᐃⵠΔⵠⲆᐃ);
    ᐃΔ[ns.ΔΔᐃᐃᐃ][ns.ᐃᐃⵠ].push(ᐃᐃ.ᐃᐃⵠᐃⵠⵠᐃ);
    ᐃΔ[ns.ΔΔᐃᐃᐃ][ns.ᐃᐃⵠ].push(ᐃᐃ.ⲆⵠᐃⲆᐃⲆⲆ);
    ᐃΔ[ns.ΔΔᐃᐃᐃ][ns.ᐃᐃⵠ].push(ᐃᐃ.ᐃⵠᐃⵠΔⲆⵠ);
    ᐃΔ[918] = [];
    ᐃΔ[918][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠⲆⵠⵠᐃᐃⲆ;
    ᐃΔ[918][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃΔⲆᐃⵠᐃᐃ;
    ᐃΔ[919] = ᐃᐃ.ΔⵠΔⲆΔⵠᐃ;
    ᐃΔ[56] = [];
    ᐃΔ[56][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃᐃΔΔⵠⵠⵠΔⲆ;
    ᐃΔ[56][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠΔⲆⵠⲆⲆⲆⲆⵠ;
    ᐃΔ[223] = [];
    ᐃΔ[223][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠⵠⲆᐃⵠΔΔ;
    ᐃΔ[223][ns.ᐃᐃⵠ] = ᐃᐃ.ΔΔⵠⲆⲆᐃⲆ;
    ᐃΔ[224] = [];
    ᐃΔ[224][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⵠΔᐃᐃΔⵠ;
    ᐃΔ[224][ns.ᐃᐃⵠ] = ᐃᐃ.ΔᐃⲆⵠⵠᐃⵠ;
    ᐃΔ[236] = [];
    ᐃΔ[236][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠΔⵠᐃΔᐃⵠ;
    ᐃΔ[236][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃⲆⲆⲆⵠⲆⵠ;
    ᐃΔ[1033] = [];
    ᐃΔ[1033][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⲆΔᐃⲆⵠⵠ;
    ᐃΔ[1033][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃⲆⵠⲆⲆⲆⵠ;
    ᐃΔ[1034] = ᐃᐃ.ⵠᐃⲆᐃⲆΔⲆ;
    ᐃΔ[1150] = [];
    ᐃΔ[1150][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆⵠⲆⵠᐃⲆⵠ;
    ᐃΔ[1150][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃΔⲆⵠⵠᐃΔ;
    ᐃΔ[1152] = [];
    ᐃΔ[1152][ns.ⵠᐃⵠ] = ᐃᐃ.ΔᐃⲆⵠⲆᐃⵠ;
    ᐃΔ[1152][ns.ᐃᐃⵠ] = ᐃᐃ.ΔᐃΔⵠⵠᐃⵠ;
    ᐃΔ[1149] = ᐃᐃ.ⲆⵠⲆΔⲆᐃⲆ;
    ᐃΔ[1151] = ᐃᐃ.ᐃⵠΔⵠⲆⵠΔ;
    ᐃΔ[1153] = ᐃᐃ.ᐃⲆⲆⲆⵠⲆΔ;
    ᐃΔ[1143] = [];
    ᐃΔ[1143][ns.ⵠᐃⵠ] = ᐃᐃ.ΔᐃΔᐃᐃᐃⲆ;
    ᐃΔ[1143][ns.ᐃᐃⵠ] = ᐃᐃ.ΔᐃᐃⵠⵠⲆⵠ;
    ᐃΔ[1145] = [];
    ᐃΔ[1145][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠⵠⵠᐃⵠⵠⲆ;
    ᐃΔ[1145][ns.ᐃᐃⵠ] = ᐃᐃ.ΔᐃⲆⲆⵠⲆᐃ;
    ᐃΔ[1146] = [];
    ᐃΔ[1146][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠᐃΔⲆᐃΔⲆ;
    ᐃΔ[1146][ns.ᐃᐃⵠ] = ᐃᐃ.ΔⲆᐃⲆⲆΔⵠ;
    ᐃΔ[1144] = ᐃᐃ.ᐃΔⲆⲆᐃᐃⲆ;
    ᐃΔ[1148] = ᐃᐃ.ᐃΔⵠⲆᐃΔⲆ;
    ᐃΔ[1147] = ᐃᐃ.ᐃΔᐃⲆⵠⵠᐃ;
    ᐃΔ[1053] = [];
    ᐃΔ[1053][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠᐃⵠⲆⲆΔΔ;
    ᐃΔ[1053][ns.ᐃᐃⵠ] = ᐃᐃ.ΔᐃⲆΔⵠⵠΔ;
    ᐃΔ[1055] = [];
    ᐃΔ[1055][ns.ⵠᐃⵠ] = ᐃᐃ.ΔᐃᐃΔΔΔΔ;
    ᐃΔ[1055][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠⵠΔᐃΔⵠᐃ;
    ᐃΔ[231] = [];
    ᐃΔ[231][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠⵠᐃⲆⵠⵠⲆ;
    ᐃΔ[231][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆⲆΔⲆᐃΔΔ;
    ᐃΔ[1060] = [];
    ᐃΔ[1060][ns.ⵠᐃⵠ] = ᐃᐃ.ΔⵠΔΔᐃΔⲆ;
    ᐃΔ[1060][ns.ᐃᐃⵠ] = ᐃᐃ.ΔⵠⲆΔᐃⵠⵠ;
    ᐃΔ[1063] = [];
    ᐃΔ[1063][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆᐃΔΔⲆⵠᐃ;
    ᐃΔ[1063][ns.ᐃᐃⵠ] = ᐃᐃ.ΔΔᐃᐃΔᐃΔ;
    ᐃΔ[1059] = [];
    ᐃΔ[1059][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃᐃⵠᐃΔᐃⵠ;
    ᐃΔ[1059][ns.ᐃᐃⵠ] = ᐃᐃ.ΔⵠΔᐃᐃᐃⲆ;
    ᐃΔ[1062] = [];
    ᐃΔ[1062][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⲆⵠΔᐃⵠⲆ;
    ᐃΔ[1062][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆᐃΔΔⵠⲆᐃ;
    ᐃΔ[1056] = ᐃᐃ.ⵠⲆΔΔᐃⲆⲆ;
    ᐃΔ[1057] = ᐃᐃ.ᐃⲆⲆⵠⵠΔⵠ;
    ᐃΔ[1058] = ᐃᐃ.ⲆΔⵠΔᐃⲆΔ;
    ᐃΔ[1065] = ᐃᐃ.ⵠⲆⲆΔⵠΔⵠ;
    ᐃΔ[1066] = ᐃᐃ.ΔΔⵠⲆᐃⲆⵠ;
    ᐃΔ[1067] = ᐃᐃ.ⵠⲆⵠⲆⲆᐃΔ;
    ᐃΔ[1222] = [];
    ᐃΔ[1222][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠᐃⲆⵠᐃⵠᐃ;
    ᐃΔ[1222][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠΔⲆᐃᐃΔⲆ;
    ᐃΔ[248] = [];
    ᐃΔ[248][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆᐃᐃⵠᐃΔΔ;
    ᐃΔ[248][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃᐃⲆⵠⲆΔⵠ;
    ᐃΔ[1218] = [];
    ᐃΔ[1218][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠⲆⵠᐃΔⲆⲆ;
    ᐃΔ[1218][ns.ᐃᐃⵠ] = ᐃᐃ.ΔΔΔⲆⲆⵠᐃ;
    ᐃΔ[1221] = [];
    ᐃΔ[1221][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⲆⵠⵠᐃᐃⲆ;
    ᐃΔ[1221][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃΔⵠΔⲆᐃᐃ;
    ᐃΔ[1223] = ᐃᐃ.ⲆⵠⲆᐃⲆⲆΔ;
    ᐃΔ[1219] = ᐃᐃ.ΔⲆⲆΔᐃⲆᐃ;
    ᐃΔ[1068] = [];
    ᐃΔ[1068][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃᐃⵠⵠᐃⵠⲆ;
    ᐃΔ[1068][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠⲆⵠΔⲆᐃⵠ;
    ᐃΔ[232] = [];
    ᐃΔ[232][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⲆΔⲆᐃⲆⲆ;
    ᐃΔ[232][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆⲆⲆᐃΔⵠΔ;
    ᐃΔ[1070] = [];
    ᐃΔ[1070][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠⵠⵠⵠᐃΔᐃ;
    ᐃΔ[1070][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆᐃᐃΔΔΔΔ;
    ᐃΔ[1072] = [];
    ᐃΔ[1072][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃᐃᐃΔᐃⲆⵠ;
    ᐃΔ[1072][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃⵠⲆᐃⲆΔⵠ;
    ᐃΔ[1075] = [];
    ᐃΔ[1075][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠᐃⲆⲆᐃΔΔ;
    ᐃΔ[1075][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠⲆᐃΔⵠⵠⵠ;
    ᐃΔ[1071] = [];
    ᐃΔ[1071][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃΔⵠᐃᐃᐃΔ;
    ᐃΔ[1071][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠⵠⵠΔⲆΔᐃ;
    ᐃΔ[1074] = [];
    ᐃΔ[1074][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⲆΔᐃᐃᐃᐃ;
    ᐃΔ[1074][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠⲆⲆⲆⲆΔᐃ;
    ᐃΔ[1073] = [];
    ᐃΔ[1073][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆᐃΔⵠⲆⲆᐃ;
    ᐃΔ[1073][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠΔᐃΔᐃⵠᐃ;
    ᐃΔ[1076] = [];
    ᐃΔ[1076][ns.ⵠᐃⵠ] = ᐃᐃ.ΔⵠⵠⵠΔΔⲆ;
    ᐃΔ[1076][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃΔᐃΔᐃᐃⵠ;
    ᐃΔ[1077] = ᐃᐃ.ⵠⵠⵠⲆΔⵠΔ;
    ᐃΔ[1078] = ᐃᐃ.ⵠΔⲆⲆⵠᐃⵠ;
    ᐃΔ[1079] = ᐃᐃ.ᐃΔΔΔΔᐃΔ;
    ᐃΔ[1083] = [];
    ᐃΔ[1083][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆⲆΔⲆΔⵠΔ;
    ᐃΔ[1083][ns.ᐃᐃⵠ] = ᐃᐃ.ΔⲆΔⲆⲆⲆⲆ;
    ᐃΔ[233] = [];
    ᐃΔ[233][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆⵠⲆᐃᐃΔᐃ;
    ᐃΔ[233][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆⵠᐃΔΔΔᐃ;
    ᐃΔ[1085] = [];
    ᐃΔ[1085][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⲆⲆⵠΔⲆⲆ;
    ᐃΔ[1085][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠΔΔⲆᐃᐃᐃ;
    ᐃΔ[1087] = [];
    ᐃΔ[1087][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃᐃⲆⲆᐃⲆᐃ;
    ᐃΔ[1087][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆⲆΔᐃΔⵠⵠ;
    ᐃΔ[1090] = [];
    ᐃΔ[1090][ns.ⵠᐃⵠ] = ᐃᐃ.ΔΔⵠΔΔΔΔ;
    ᐃΔ[1090][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃᐃᐃΔⵠᐃⲆ;
    ᐃΔ[1086] = [];
    ᐃΔ[1086][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆΔⲆΔΔⵠⲆ;
    ᐃΔ[1086][ns.ᐃᐃⵠ] = ᐃᐃ.ΔⲆⲆⲆᐃΔΔ;
    ᐃΔ[1089] = [];
    ᐃΔ[1089][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠⵠⲆᐃᐃΔⲆ;
    ᐃΔ[1089][ns.ᐃᐃⵠ] = ᐃᐃ.ΔᐃⲆⲆᐃⲆᐃ;
    ᐃΔ[1088] = [];
    ᐃΔ[1088][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃᐃᐃΔᐃⵠᐃ;
    ᐃΔ[1088][ns.ᐃᐃⵠ] = ᐃᐃ.ΔⵠⲆᐃΔᐃΔ;
    ᐃΔ[1091] = [];
    ᐃΔ[1091][ns.ⵠᐃⵠ] = ᐃᐃ.ΔΔⵠΔᐃⵠΔ;
    ᐃΔ[1091][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠᐃΔⵠⵠᐃΔ;
    ᐃΔ[1092] = ᐃᐃ.ⵠΔΔΔⵠⵠΔ;
    ᐃΔ[1093] = ᐃᐃ.ⲆⲆⲆⲆᐃΔⲆ;
    ᐃΔ[1094] = ᐃᐃ.ᐃⵠⲆΔⵠⲆᐃ;
    ᐃΔ[1098] = [];
    ᐃΔ[1098][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⵠᐃⵠⲆⵠΔ;
    ᐃΔ[1098][ns.ᐃᐃⵠ] = ᐃᐃ.ΔⲆⵠⵠΔⲆⵠ;
    ᐃΔ[235] = [];
    ᐃΔ[235][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⵠΔΔΔⲆᐃ;
    ᐃΔ[235][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃᐃᐃⲆⲆⲆΔ;
    ᐃΔ[1115] = ᐃᐃ.ᐃΔᐃⲆΔⵠⵠ;
    ᐃΔ[1113] = [];
    ᐃΔ[1113][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⲆΔΔᐃⵠⵠ;
    ᐃΔ[1113][ns.ᐃᐃⵠ] = ᐃᐃ.ΔᐃⵠⲆⲆⲆⲆ;
    ᐃΔ[1114] = [];
    ᐃΔ[1114][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆΔⲆⲆⲆⲆᐃ;
    ᐃΔ[1114][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠⵠᐃⵠⵠᐃΔ;
    ᐃΔ[1100] = [];
    ᐃΔ[1100][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠⲆⵠⵠⵠⲆΔ;
    ᐃΔ[1100][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠᐃⵠⲆΔᐃⵠ;
    ᐃΔ[1102] = [];
    ᐃΔ[1102][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆΔᐃⲆⵠΔⵠ;
    ᐃΔ[1102][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠᐃⲆΔⵠᐃΔ;
    ᐃΔ[1105] = [];
    ᐃΔ[1105][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆΔⵠⲆᐃⵠᐃ;
    ᐃΔ[1105][ns.ᐃᐃⵠ] = ᐃᐃ.ΔⵠΔΔᐃⵠⵠ;
    ᐃΔ[1101] = [];
    ᐃΔ[1101][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆΔΔᐃⲆⵠⲆ;
    ᐃΔ[1101][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠΔⵠᐃΔΔⲆ;
    ᐃΔ[1104] = [];
    ᐃΔ[1104][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠⵠⵠΔΔⵠᐃ;
    ᐃΔ[1104][ns.ᐃᐃⵠ] = ᐃᐃ.ΔⲆᐃⵠⵠΔⲆ;
    ᐃΔ[1103] = [];
    ᐃΔ[1103][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠᐃⲆᐃᐃⵠⲆ;
    ᐃΔ[1103][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆⵠΔⵠᐃᐃⵠ;
    ᐃΔ[1106] = [];
    ᐃΔ[1106][ns.ⵠᐃⵠ] = ᐃᐃ.ΔⲆΔΔⲆⲆⲆ;
    ᐃΔ[1106][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃΔΔⵠΔⵠᐃ;
    ᐃΔ[1107] = ᐃᐃ.ᐃⵠᐃᐃⵠᐃᐃ;
    ᐃΔ[1108] = ᐃᐃ.ⵠⲆᐃᐃᐃⵠᐃ;
    ᐃΔ[1109] = ᐃᐃ.ⲆⵠⲆᐃⵠᐃᐃ;
    ᐃΔ[1119] = [];
    ᐃΔ[1119][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⲆΔᐃⵠⵠⵠ;
    ᐃΔ[1119][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆⲆΔⵠⵠⵠⵠ;
    ᐃΔ[238] = [];
    ᐃΔ[238][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠⵠⲆΔΔΔⲆ;
    ᐃΔ[238][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆⵠᐃΔΔᐃΔ;
    ᐃΔ[1136] = ᐃᐃ.ⲆΔΔΔⲆᐃᐃ;
    ᐃΔ[1134] = [];
    ᐃΔ[1134][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃΔΔⵠⵠⵠⲆ;
    ᐃΔ[1134][ns.ᐃᐃⵠ] = ᐃᐃ.ΔⲆᐃᐃᐃΔΔ;
    ᐃΔ[1135] = [];
    ᐃΔ[1135][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆΔᐃΔⵠⲆⵠ;
    ᐃΔ[1135][ns.ᐃᐃⵠ] = ᐃᐃ.ΔΔᐃΔⲆΔⵠ;
    ᐃΔ[1121] = [];
    ᐃΔ[1121][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆⲆᐃⵠΔⲆⲆ;
    ᐃΔ[1121][ns.ᐃᐃⵠ] = ᐃᐃ.ΔⵠᐃΔⲆΔΔ;
    ᐃΔ[1123] = [];
    ᐃΔ[1123][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆᐃᐃΔᐃΔΔ;
    ᐃΔ[1123][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃᐃⲆᐃⵠⵠⲆ;
    ᐃΔ[1126] = [];
    ᐃΔ[1126][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆⲆⵠᐃⵠⵠΔ;
    ᐃΔ[1126][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃΔΔⵠΔᐃᐃ;
    ᐃΔ[1122] = [];
    ᐃΔ[1122][ns.ⵠᐃⵠ] = ᐃᐃ.ΔΔΔⵠⲆΔΔ;
    ᐃΔ[1122][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃⲆᐃⲆⲆᐃΔ;
    ᐃΔ[1125] = [];
    ᐃΔ[1125][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆⵠⵠΔᐃΔⲆ;
    ᐃΔ[1125][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠⵠΔⵠⵠᐃⵠ;
    ᐃΔ[1124] = [];
    ᐃΔ[1124][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃΔᐃⲆΔⲆᐃ;
    ᐃΔ[1124][ns.ᐃᐃⵠ] = ᐃᐃ.ΔⲆᐃⵠᐃⵠⲆ;
    ᐃΔ[1127] = [];
    ᐃΔ[1127][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠⲆⵠⲆᐃⵠᐃ;
    ᐃΔ[1127][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃᐃⲆᐃΔⵠⵠ;
    ᐃΔ[1128] = ᐃᐃ.ΔⲆⵠⲆΔⲆⲆ;
    ᐃΔ[1129] = ᐃᐃ.ΔΔᐃⵠⲆΔᐃ;
    ᐃΔ[1130] = ᐃᐃ.ⵠΔⲆⲆᐃᐃⲆ;
    ᐃΔ[1042] = [];
    ᐃΔ[1042][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆᐃⲆΔΔΔΔ;
    ᐃΔ[1042][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠⲆⵠⵠΔᐃⵠ;
    ᐃΔ[1043] = [];
    ᐃΔ[1043][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠⵠⲆΔⵠⲆΔ;
    ᐃΔ[1043][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃⵠΔΔᐃᐃⲆ;
    ᐃΔ[1044] = [];
    ᐃΔ[1044][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⲆᐃᐃⲆⵠⵠ;
    ᐃΔ[1044][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃᐃᐃᐃᐃⲆΔ;
    ᐃΔ[228] = [];
    ᐃΔ[228][ns.ⵠᐃⵠ] = ᐃᐃ.ΔᐃᐃⵠΔⵠⵠ;
    ᐃΔ[228][ns.ᐃᐃⵠ] = ᐃᐃ.ΔᐃᐃⵠΔⵠⵠ;
    ᐃΔ[234] = [];
    ᐃΔ[234][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆΔΔᐃᐃⵠΔ;
    ᐃΔ[234][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆΔΔᐃᐃⵠΔ;
    ᐃΔ[249] = [];
    ᐃΔ[249][ns.ⵠᐃⵠ] = ᐃᐃ.ΔΔΔⲆΔⵠΔ;
    ᐃΔ[249][ns.ᐃᐃⵠ] = ᐃᐃ.ΔΔΔⲆΔⵠΔ;
    ᐃΔ[1045] = ᐃᐃ.ΔⲆΔΔⵠΔᐃ;
    ᐃΔ[89] = [];
    ᐃΔ[89][ns.ⵠᐃⵠ] = ᐃᐃ.ΔᐃⲆⲆᐃⲆⲆ;
    ᐃΔ[89][ns.ᐃᐃⵠ] = ᐃᐃ.ΔᐃΔⲆΔⲆΔ;
    ᐃΔ[92] = [];
    ᐃΔ[92][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠⵠΔΔᐃᐃⲆ;
    ᐃΔ[92][ns.ᐃᐃⵠ] = ᐃᐃ.ΔᐃΔⲆⵠⲆΔ;
    ᐃΔ[247] = [];
    ᐃΔ[247][ns.ⵠᐃⵠ] = [ᐃᐃ.ΔΔⵠΔⵠⵠⵠ, ᐃᐃ.ΔΔᐃᐃⲆⵠΔ, ᐃᐃ.ⲆⲆᐃΔᐃⵠᐃ, ᐃᐃ.ⵠΔᐃⲆⲆⵠΔ, ᐃᐃ.ⵠⲆΔΔⲆᐃᐃ, ᐃᐃ.ⵠⲆΔⵠᐃⲆᐃ, ᐃᐃ.ⲆᐃⲆⲆᐃᐃᐃ, ᐃᐃ.ⲆⲆΔⲆΔⲆⲆ, ᐃᐃ.ᐃΔⲆⲆΔᐃⵠ];
    ᐃΔ[247][ns.ᐃᐃⵠ] = [ᐃᐃ.ⲆⵠⲆⵠⵠΔΔ, ᐃᐃ.ⵠᐃⲆΔᐃᐃᐃ, ᐃᐃ.ⵠΔΔᐃΔᐃⵠ, ᐃᐃ.ⲆⲆⵠΔᐃⵠⵠ, ᐃᐃ.ⲆⵠΔᐃⲆΔΔ, ᐃᐃ.ⵠᐃⵠⵠᐃΔᐃ, ᐃᐃ.ⵠⵠᐃΔⵠⲆᐃ, ᐃᐃ.ⲆⲆΔⲆΔⲆⲆ, ᐃᐃ.ᐃᐃᐃⲆⲆⵠΔ];
    ᐃΔ[93] = [];
    ᐃΔ[93][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠⲆΔⵠΔⲆⲆ;
    ᐃΔ[93][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆᐃⲆⲆⵠⲆⲆ;
    ᐃΔ[225] = [];
    ᐃΔ[225][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆΔⲆⵠᐃΔⲆ;
    ᐃΔ[225][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃⵠΔΔᐃⵠⲆ;
    ᐃΔ[226] = [];
    ᐃΔ[226][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃΔΔⵠⲆᐃⵠ;
    ᐃΔ[226][ns.ᐃᐃⵠ] = ᐃᐃ.ΔᐃΔᐃⲆⲆΔ;
    ᐃΔ[24] = [];
    ᐃΔ[24][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠΔᐃⲆⲆΔᐃ;
    ᐃΔ[24][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆⲆⵠᐃⵠⵠⲆ;
    ᐃΔ[88] = [];
    ᐃΔ[88][ns.ⵠᐃⵠ] = ᐃᐃ.ΔⲆᐃⵠⲆᐃⲆ;
    ᐃΔ[88][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃⵠΔᐃᐃΔΔ;
    ᐃΔ[87] = [];
    ᐃΔ[87][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆᐃᐃⵠⲆΔΔ;
    ᐃΔ[87][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆⲆᐃΔⵠΔⵠ;
    ᐃΔ[82] = [];
    ᐃΔ[82][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃᐃⵠΔᐃΔⲆ;
    ᐃΔ[82][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆᐃΔⵠᐃⵠᐃ;
    ᐃΔ[621] = [];
    ᐃΔ[621][ns.ⵠᐃⵠ] = [];
    ᐃΔ[621][ns.ᐃᐃⵠ] = [];
    ᐃΔ[621][ns.ⵠᐃⵠ].push(ᐃᐃ.ⵠⲆⲆΔⵠΔⵠΔΔ);
    ᐃΔ[621][ns.ⵠᐃⵠ].push(ᐃᐃ.ΔⵠⲆⲆⵠⲆΔΔⵠ);
    ᐃΔ[621][ns.ⵠᐃⵠ].push(ᐃᐃ.ⵠⵠⵠⵠⲆᐃⵠⵠⲆ);
    ᐃΔ[621][ns.ᐃᐃⵠ].push(ᐃᐃ.ⲆᐃᐃΔⲆⲆⲆⵠⵠ);
    ᐃΔ[621][ns.ᐃᐃⵠ].push(ᐃᐃ.ⲆⲆⲆⵠΔⲆᐃΔⵠ);
    ᐃΔ[621][ns.ᐃᐃⵠ].push(ᐃᐃ.ΔΔⵠⲆⵠΔᐃⲆⵠ);
    ᐃΔ[619] = [];
    ᐃΔ[619][ns.ⵠᐃⵠ] = [];
    ᐃΔ[619][ns.ᐃᐃⵠ] = [];
    ᐃΔ[619][ns.ⵠᐃⵠ].push(ᐃᐃ.ⵠⲆᐃᐃⵠΔΔΔⲆ);
    ᐃΔ[619][ns.ⵠᐃⵠ].push(ᐃᐃ.ⲆⲆΔⵠΔⲆⲆⵠᐃ);
    ᐃΔ[619][ns.ⵠᐃⵠ].push(ᐃᐃ.ⲆᐃᐃⲆΔⲆΔⵠᐃ);
    ᐃΔ[619][ns.ᐃᐃⵠ].push(ᐃᐃ.ΔΔⵠᐃⵠᐃᐃᐃΔ);
    ᐃΔ[619][ns.ᐃᐃⵠ].push(ᐃᐃ.ΔΔΔᐃⲆᐃΔⲆᐃ);
    ᐃΔ[619][ns.ᐃᐃⵠ].push(ᐃᐃ.ⲆᐃΔᐃⲆΔⵠᐃⵠ);
    ᐃΔ[620] = [];
    ᐃΔ[620][ns.ⵠᐃⵠ] = [];
    ᐃΔ[620][ns.ᐃᐃⵠ] = [];
    ᐃΔ[620][ns.ⵠᐃⵠ].push(ᐃᐃ.ⵠᐃᐃᐃΔΔᐃⲆᐃ);
    ᐃΔ[620][ns.ⵠᐃⵠ].push(ᐃᐃ.ⵠᐃⵠΔᐃⵠΔⲆⲆ);
    ᐃΔ[620][ns.ⵠᐃⵠ].push(ᐃᐃ.ΔᐃᐃᐃⲆⲆⲆΔᐃ);
    ᐃΔ[620][ns.ᐃᐃⵠ].push(ᐃᐃ.ⵠΔⲆⵠⵠᐃⲆᐃⵠ);
    ᐃΔ[620][ns.ᐃᐃⵠ].push(ᐃᐃ.ⵠⲆⵠⲆⲆᐃΔⲆᐃ);
    ᐃΔ[620][ns.ᐃᐃⵠ].push(ᐃᐃ.ᐃᐃⵠⵠⵠⲆᐃⵠΔ);
    Ⲇᐃⵠᐃ.g = [];
    Ⲇᐃⵠᐃ.g[0] = [ᐃᐃ.ᐃᐃᐃΔΔⵠⵠ, ᐃᐃ.ⵠΔΔⵠⵠᐃᐃ];
    Ⲇᐃⵠᐃ.g[1] = Ⲇᐃⵠᐃ.g[0];
    Ⲇᐃⵠᐃ.g[2] = [ᐃᐃ.ΔⲆⲆⲆⵠΔΔ, ᐃᐃ.ⲆᐃΔⵠⵠΔⵠ];
    Ⲇᐃⵠᐃ.m = [];
    Ⲇᐃⵠᐃ.m[0] = [ᐃᐃ.ⵠᐃᐃΔⵠⵠⵠ, ᐃᐃ.ⵠᐃⲆⲆⵠᐃⲆ];
    Ⲇᐃⵠᐃ.m[1] = Ⲇᐃⵠᐃ.m[0];
    Ⲇᐃⵠᐃ.m[2] = [ᐃᐃ.ⲆΔⲆⲆⲆΔⵠ, ᐃᐃ.ΔᐃⲆⵠΔΔᐃ];
    Ⲇᐃⵠᐃ.la = [];
    Ⲇᐃⵠᐃ.la[0] = [ᐃᐃ.ᐃᐃΔᐃΔᐃⵠ, ᐃᐃ.ⵠᐃⵠⲆᐃᐃⲆ];
    Ⲇᐃⵠᐃ.la[1] = Ⲇᐃⵠᐃ.la[0];
    Ⲇᐃⵠᐃ.la[2] = Ⲇᐃⵠᐃ.la[0];
    Ⲇᐃⵠᐃ.la[3] = Ⲇᐃⵠᐃ.la[0];
    Ⲇᐃⵠᐃ.la[4] = Ⲇᐃⵠᐃ.la[0];
    Ⲇᐃⵠᐃ.la[5] = Ⲇᐃⵠᐃ.la[0];
    Ⲇᐃⵠᐃ.s = [];
    Ⲇᐃⵠᐃ.s[0] = [ᐃᐃ.ⵠΔᐃΔⲆⲆⲆ, ᐃᐃ.ⵠΔⵠᐃᐃⲆΔ];
    Ⲇᐃⵠᐃ.s[1] = Ⲇᐃⵠᐃ.s[0];
    Ⲇᐃⵠᐃ.s[2] = [ᐃᐃ.ⲆᐃⵠⵠⵠⲆΔ, ᐃᐃ.ΔᐃᐃⲆⲆⵠΔ];
    Ⲇᐃⵠᐃ.p = [];
    Ⲇᐃⵠᐃ.p[0] = [ᐃᐃ.ⵠᐃⵠΔⵠΔΔ, ᐃᐃ.ⵠᐃⵠΔⵠΔΔ];
    Ⲇᐃⵠᐃ.a = [];
    Ⲇᐃⵠᐃ.a[0] = [ᐃᐃ.ᐃⲆΔⲆⲆΔⲆ, ᐃᐃ.ΔΔⲆⵠᐃᐃⲆ];
    Ⲇᐃⵠᐃ.a[1] = Ⲇᐃⵠᐃ.a[0];
    Ⲇᐃⵠᐃ.a[2] = Ⲇᐃⵠᐃ.a[0];
    Ⲇᐃⵠᐃ.d = [];
    Ⲇᐃⵠᐃ.d[0] = [ᐃᐃ.ⵠᐃⲆⲆΔᐃΔ, ᐃᐃ.ⲆⲆⲆᐃᐃⲆⵠ];
    Ⲇᐃⵠᐃ.d[1] = Ⲇᐃⵠᐃ.d[0];
    Ⲇᐃⵠᐃ.d[2] = Ⲇᐃⵠᐃ.d[0];
    Ⲇᐃⵠᐃ.re = [];
    Ⲇᐃⵠᐃ.re[0] = [ᐃᐃ.ΔⵠⵠᐃⲆΔΔ, ᐃᐃ.ⲆⵠⵠⲆᐃⲆⵠ];
    Ⲇᐃⵠᐃ.re[1] = Ⲇᐃⵠᐃ.re[0];
    Ⲇᐃⵠᐃ.re[2] = Ⲇᐃⵠᐃ.re[0];
    Ⲇᐃⵠᐃ.f = [];
    Ⲇᐃⵠᐃ.f[0] = [ᐃᐃ.ⲆΔΔⲆΔΔΔ, ᐃᐃ.ᐃⲆᐃΔᐃⵠᐃ];
    Ⲇᐃⵠᐃ.f[1] = Ⲇᐃⵠᐃ.f[0];
    Ⲇᐃⵠᐃ.f[2] = Ⲇᐃⵠᐃ.f[0];
    Ⲇᐃⵠᐃ.isl = [];
    Ⲇᐃⵠᐃ.isl[0] = [ᐃᐃ.ᐃᐃⵠᐃΔⵠᐃ, ᐃᐃ.ⲆⵠⲆⲆⲆⵠⲆ];
    Ⲇᐃⵠᐃ.isl[1] = Ⲇᐃⵠᐃ.isl[0];
    Ⲇᐃⵠᐃ.isl[2] = Ⲇᐃⵠᐃ.isl[0];
    Ⲇᐃⵠᐃ.c = [];
    Ⲇᐃⵠᐃ.c[0] = [ᐃᐃ.ⵠΔᐃⲆΔΔᐃ, ᐃᐃ.ᐃⵠⲆΔⵠⵠⵠ];
    Ⲇᐃⵠᐃ.c[1] = Ⲇᐃⵠᐃ.c[0];
    Ⲇᐃⵠᐃ.c[2] = Ⲇᐃⵠᐃ.c[0];
    Ⲇᐃⵠᐃ.wtb = [];
    Ⲇᐃⵠᐃ.wtb[0] = [ᐃᐃ.ⲆⲆΔᐃⵠⵠⲆ, ᐃᐃ.ᐃⲆⲆΔⲆⵠⵠ];
    Ⲇᐃⵠᐃ.PIRANHA = [ᐃᐃ.ΔⲆᐃⵠⵠᐃⵠ, ᐃᐃ.ⵠⲆⵠᐃⵠⲆⲆ];
    Ⲇᐃⵠᐃ.KRAKEN = [ᐃᐃ.ᐃᐃΔⵠᐃᐃᐃ, ᐃᐃ.ΔΔᐃᐃⲆⵠⵠ];
    Ⲇᐃⵠᐃ.FOX = [ᐃᐃ.ⲆⲆⲆΔⲆΔᐃ, ᐃᐃ.ⲆᐃᐃⲆⲆΔΔ];
    Ⲇᐃⵠᐃ.WOLF = [ᐃᐃ.ⲆᐃᐃⵠⲆᐃΔ, ᐃᐃ.ⲆΔⲆⲆⵠⲆⲆ];
    Ⲇᐃⵠᐃ.SPIDER = [ᐃᐃ.ⵠᐃΔⲆᐃᐃⵠ, ᐃᐃ.ⲆⵠΔΔΔΔΔ];
    Ⲇᐃⵠᐃ.BEAR = [ᐃᐃ.ⲆⵠᐃᐃΔΔΔ, ᐃᐃ.ⲆⵠᐃⲆⲆⵠⵠ];
    Ⲇᐃⵠᐃ.CAVE = [ᐃᐃ.ΔΔⵠᐃΔⵠΔ, ᐃᐃ.ΔⲆᐃⲆᐃΔᐃ];
    Ⲇᐃⵠᐃ.MAP = [ᐃᐃ.ⲆⵠΔⵠⵠⲆⵠ, ᐃᐃ.ΔᐃᐃᐃΔΔⲆ];
    Ⲇᐃⵠᐃ.FOREST = [ᐃᐃ.ⵠᐃⵠⲆⲆⵠⵠ, ᐃᐃ.ΔⵠⵠⲆᐃΔⲆ];
    Ⲇᐃⵠᐃ.WINTER = [ᐃᐃ.ᐃΔⲆⲆⵠⲆᐃ, ᐃᐃ.ⲆⵠⲆᐃⵠⲆⵠ];
    Ⲇᐃⵠᐃ.DESERT = [ᐃᐃ.ᐃΔᐃᐃⵠⵠᐃ, ᐃᐃ.ⵠⵠⲆⲆΔΔⵠ];
    Ⲇᐃⵠᐃ.LAVA = [ᐃᐃ.ⲆⲆΔΔΔⲆᐃ, ᐃᐃ.ⵠᐃⵠⲆΔΔΔ];
    for (var c in Ⲇᐃⵠᐃ) {
      for (var d = Ⲇᐃⵠᐃ[c], e = 0; e < d.length; e++) {
        var f = d[e];
        if (f.ⵠⲆⵠᐃⲆΔᐃ !== Nl) {
          f.ⵠⲆⵠᐃⲆΔᐃ();
        } else if (f.length > 0) {
          for (var g = 0; g < f.length; g++) {
            if (f[g].ⵠⲆⵠᐃⲆΔᐃ !== undefined) {
              f[g].ⵠⲆⵠᐃⲆΔᐃ();
            }
          }
        }
      }
    }
    console.log(undefined, undefined);
  }
  function kc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 48;
    c.height = a * 47;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 7.1875, a * 25.434661865234375);
    d.bezierCurveTo(a * 11.1875, a * 13.434661865234375, a * 18.1875, a * 8.434661865234375, a * 32.1875, a * 10.434661865234375);
    d.bezierCurveTo(a * 45.1875, a * 14.434661865234375, a * 41.1875, a * 24.434661865234375, a * 36.1875, a * 30.434661865234375);
    d.bezierCurveTo(a * 22.1875, a * 42.434661865234375, a * 2.1875, a * 41.434661865234375, a * 7.1875, a * 25.434661865234375);
    d.closePath();
    od(d, b[0]);
    return c;
  }
  function Ac(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 145;
    d.height = a * 120;
    e.beginPath();
    e.scale(0.6, 0.6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 18, a * -8);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    od(e, c[4], c[5], a * 4);
    e.beginPath();
    e.scale(1.1, 1.1);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -9, a * 4);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    od(e, c[4], c[5], a * 4);
    e.scale(1.1, 1.1);
    e.translate(a * -9, a * 4);
    e.save();
    e.translate(a * 100, a * 73.06874084472656);
    e.rotate(0);
    ad(e, a * -61, a * -38.5, a * 122, a * 40, a * 20);
    e.restore();
    od(e, c[1], c[2], a * 4);
    e.save();
    e.translate(a * 100, a * 71.36874389648438);
    e.rotate(0);
    ad(e, a * -60.5, a * -18, a * 121, a * 30, a * 20);
    e.restore();
    od(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 144, a * 80);
    e.bezierCurveTo(a * 152, a * 100, a * 152, a * 101, a * 153, a * 102);
    e.bezierCurveTo(a * 159, a * 100, a * 159, a * 100, a * 160, a * 100);
    e.bezierCurveTo(a * 161, a * 84, a * 161, a * 84, a * 162, a * 68);
    e.closePath();
    od(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 75);
    e.bezierCurveTo(a * 48, a * 101, a * 53, a * 89, a * 48, a * 102);
    e.bezierCurveTo(a * 44, a * 100, a * 44, a * 100, a * 39, a * 97);
    e.bezierCurveTo(a * 39, a * 83, a * 39, a * 83, a * 39, a * 69);
    e.closePath();
    od(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    od(e, c[4], c[5], a * 4);
    e.translate(0, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 116.07290649414062);
    e.bezierCurveTo(a * 159.5, a * 99.07290649414062, a * 159.5, a * 98.07290649414062, a * 159.5, a * 98.07290649414062);
    e.bezierCurveTo(a * 155.5, a * 116.07290649414062, a * 159.5, a * 116.07290649414062, a * 159.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 147.5, a * 130.07290649414062, a * 136.5, a * 132.07290649414062, a * 115.5, a * 138.07290649414062);
    e.closePath();
    od(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.5, a * 96.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 114.07290649414062, a * 62.5, a * 105.57290649414062, a * 85.5, a * 115.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 125.57290649414062, a * 85.5, a * 125.57290649414062, a * 85.5, a * 136.07290649414062);
    e.bezierCurveTo(a * 51.5, a * 129.07290649414062, a * 51.5, a * 125.07290649414062, a * 41.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 44.5, a * 106.07290649414062, a * 42.5, a * 103.07290649414062, a * 40.5, a * 96.07290649414062);
    e.closePath();
    od(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    od(e, c[3], c[2], a * 4);
    e.scale(0.5, 0.5);
    e.translate(a * 100, a * 71);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    od(e, c[6], c[2], a * 4);
    return d;
  }
  function xc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 320;
    d.translate(a * -60, a * -15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 3.953125);
    d.bezierCurveTo(a * 188.5, a * 171.453125, a * 188.5, a * 171.453125, a * 188.5, a * 338.953125);
    d.bezierCurveTo(a * 162.5, a * 268.953125, a * 145.5, a * 265.953125, a * 116.5, a * 244.953125);
    d.bezierCurveTo(a * 67.5, a * 204.953125, a * 87.5, a * 160.953125, a * 113.5, a * 125.953125);
    d.bezierCurveTo(a * 141.5, a * 90.953125, a * 176.5, a * 56.953125, a * 188.5, a * 3.953125);
    d.closePath();
    od(d, b[0]);
    return c;
  }
  function Jc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -20, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 50, a * 105);
    d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
    d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
    d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
    d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
    d.closePath();
    od(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 106);
    d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
    d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
    d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
    d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
    d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
    d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
    d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
    d.closePath();
    od(d, b[2], b[3], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 30, a * 159);
    d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
    d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
    d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
    d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
    d.closePath();
    od(d, b[2]);
    return c;
  }
  function Mc(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 170;
    f.height = b * 200;
    g.translate(b * 5, b * 15);
    if (e == 1) {
      g.translate(0, b * -5);
      hd(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
      od(g, d[1], d[5], b * 20);
      hd(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
      od(g, d[1], d[5], b * 20);
      g.save();
      g.translate(b * 77.00003051757812, b * 31.267044067382812);
      ad(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
      g.restore();
      od(g, d[1], d[5], b * 20);
      g.save();
      g.translate(b * 77.00003051757812, b * 13.267044067382812);
      ad(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
      g.restore();
      od(g, d[1], d[5], b * 20);
    }
    hd(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
    od(g, d[1], d[2], b * 7);
    hd(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
    od(g, d[1], d[2], b * 7);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 18.000030517578125, b * 105.85795593261719);
    g.bezierCurveTo(b * 134.00003051757812, b * 104.85795593261719, b * 77.00003051757812, b * 104.85795593261719, b * 136.00003051757812, b * 103.85795593261719);
    g.closePath();
    od(g, d[1], d[2], b * 8);
    hd(g, b * 77.00003051757812, b * 104.6761474609375, b * 32.55764119219941);
    od(g, d[1], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 78.00003051757812, b * 112.03977966308594);
    g.bezierCurveTo(b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 62.03977966308594);
    g.closePath();
    od(g, d[3], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 78.00003051757812, b * 48.03977966308594);
    g.bezierCurveTo(b * 82.00003051757812, b * 55.53977966308594, b * 82.00003051757812, b * 55.53977966308594, b * 86.00003051757812, b * 63.03977966308594);
    g.bezierCurveTo(b * 78.00003051757812, b * 63.03977966308594, b * 78.00003051757812, b * 63.03977966308594, b * 70.00003051757812, b * 63.03977966308594);
    g.closePath();
    od(g, d[3], d[2], b * 4);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 80.00003051757812, b * 111.6761474609375);
    g.bezierCurveTo(b * 95.00003051757812, b * 97.1761474609375, b * 95.00003051757812, b * 97.1761474609375, b * 110.00003051757812, b * 82.6761474609375);
    g.closePath();
    od(g, d[3], d[2], b * 8);
    g.beginPath();
    g.lineCap = "round";
    g.lineJoin = "round";
    g.moveTo(b * 107.00003051757812, b * 76.6761474609375);
    g.bezierCurveTo(b * 111.50003051757812, b * 82.6761474609375, b * 111.50003051757812, b * 82.6761474609375, b * 116.00003051757812, b * 88.6761474609375);
    g.bezierCurveTo(b * 118.50003051757812, b * 81.6761474609375, b * 118.50003051757812, b * 81.6761474609375, b * 121.00003051757812, b * 74.6761474609375);
    g.closePath();
    od(g, d[3], d[2], b * 4);
    hd(g, b * 77.00003051757812, b * 105.03977966308594, b * 15.556349186104045);
    od(g, d[3], d[2], b * 4);
    g.save();
    g.translate(b * 77.00003051757812, b * 31.267044067382812);
    g.rotate(0);
    ad(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
    g.restore();
    od(g, d[1], d[2], b * 7);
    g.save();
    g.translate(b * 77.00003051757812, b * 13.267044067382812);
    g.rotate(0);
    ad(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
    g.restore();
    od(g, d[1], d[2], b * 7);
    return f;
  }
  function Bc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 310;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 192);
    e.bezierCurveTo(a * 198, a * 202, a * 245, a * 203, a * 335, a * 194);
    e.bezierCurveTo(a * 336, a * 232, a * 326, a * 235, a * 232, a * 237);
    e.bezierCurveTo(a * 161, a * 235, a * 122, a * 235, a * 126, a * 193);
    e.closePath();
    od(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146, a * 239);
    e.bezierCurveTo(a * 174, a * 74, a * 287, a * 88, a * 320, a * 240);
    e.bezierCurveTo(a * 329, a * 231, a * 340, a * 219, a * 332, a * 115);
    e.bezierCurveTo(a * 330, a * 40, a * 144, a * 30, a * 129, a * 116);
    e.bezierCurveTo(a * 124, a * 217, a * 124, a * 228, a * 143, a * 237);
    e.closePath();
    od(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 193);
    e.bezierCurveTo(a * 173, a * 94, a * 209, a * 100, a * 228, a * 57);
    e.bezierCurveTo(a * 190, a * 112, a * 165, a * 115, a * 127, a * 184);
    e.closePath();
    od(e, tq, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 230, a * 57);
    e.bezierCurveTo(a * 266, a * 117, a * 310, a * 130, a * 332, a * 183);
    e.bezierCurveTo(a * 290, a * 112, a * 262, a * 109, a * 230, a * 56);
    e.closePath();
    od(e, undefined, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 212);
    e.bezierCurveTo(a * 208, a * 224, a * 252, a * 219, a * 305, a * 212);
    e.bezierCurveTo(a * 267, a * 219, a * 204, a * 222, a * 155, a * 212);
    e.closePath();
    od(e, tq, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 239, a * 59);
    e.bezierCurveTo(a * 302, a * 72, a * 325, a * 84, a * 326, a * 115);
    e.bezierCurveTo(a * 289, a * 80, a * 270, a * 88, a * 253, a * 78);
    e.closePath();
    od(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 61);
    e.bezierCurveTo(a * 209, a * 70, a * 209, a * 70, a * 202, a * 79);
    e.bezierCurveTo(a * 173, a * 87, a * 162, a * 91, a * 137, a * 107);
    e.bezierCurveTo(a * 153, a * 78, a * 174, a * 67, a * 212, a * 62);
    e.closePath();
    od(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 125);
    e.bezierCurveTo(a * 218, a * 94, a * 238, a * 90, a * 281, a * 125);
    e.bezierCurveTo(a * 245, a * 89, a * 240, a * 80, a * 228, a * 67);
    e.bezierCurveTo(a * 207, a * 100, a * 192, a * 104, a * 177, a * 123);
    e.closePath();
    od(e, c[2]);
    return d;
  }
  function Ec(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = 1;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    od(e, c[0]);
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    od(e, c[1], c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    od(e, dg, c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    od(e, sk, c[2], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    od(e, c[3], c[2], a * 19);
    hd(e, a * 92.5, a * 216.0625, a * 13.892443989449804);
    od(e, c[4]);
    hd(e, a * 68.5, a * 227.0625, a * 8.06225774829855);
    od(e, c[4]);
    hd(e, a * 85.5, a * 240.0625, a * 6.708203932499369);
    od(e, c[4]);
    hd(e, a * 147.5, a * 294.0625, a * 17.46424919657298);
    od(e, c[4]);
    hd(e, a * 166.5, a * 273.0625, a * 6.708203932499369);
    od(e, c[4]);
    hd(e, a * 114.5, a * 294.0625, a * 12.36931687685298);
    od(e, c[4]);
    hd(e, a * 123.5, a * 220.0625, a * 5.830951894845301);
    od(e, c[4]);
    hd(e, a * 114.5, a * 259.0625, a * 4.123105625617661);
    od(e, c[4]);
    hd(e, a * 63.5, a * 265.0625, a * 5.385164807134504);
    od(e, c[4]);
    hd(e, a * 148.5, a * 235.0625, a * 4.47213595499958);
    od(e, c[4]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    od(e, c[5]);
    return d;
  }
  function Dc() {
    var b = Lx.time;
    if (ᐃΔ[285]) {
      zo.drawImage(ᐃΔ[285][b][1], iq + 480, jq + 190);
      zo.drawImage(ᐃΔ[285][b][2], iq + 180, jq - 430);
      zo.drawImage(ᐃΔ[285][b][1], iq - 855, jq + 100);
      zo.drawImage(ᐃΔ[285][b][0], iq - 550, jq - 300);
      zo.drawImage(ᐃΔ[285][b][0], iq - 1020, jq - 520);
    }
    if (ᐃΔ[108]) {
      zo.drawImage(ᐃΔ[108][b][1], iq - 80, jq - 640);
      zo.drawImage(ᐃΔ[108][b][1], iq + 80, jq + 490);
      zo.drawImage(ᐃΔ[108][b][2], iq - 180, jq - 700);
      zo.drawImage(ᐃΔ[108][b][0], iq + 550, jq + 100);
      zo.drawImage(ᐃΔ[108][b][1], iq + 450, jq + 300);
      zo.drawImage(ᐃΔ[108][b][1], iq + 780, jq + 300);
      zo.drawImage(ᐃΔ[108][b][2], iq + 980, jq + 200);
      zo.drawImage(ᐃΔ[108][b][2], iq + 680, jq + 600);
      zo.drawImage(ᐃΔ[108][b][2], iq - 380, jq + 100);
      zo.drawImage(ᐃΔ[108][b][2], iq + 280, jq + 250);
    }
    if (ᐃΔ[110]) {
      zo.drawImage(ᐃΔ[110][b][0], iq - 590, jq);
      zo.drawImage(ᐃΔ[110][b][0], iq + 120, jq - 390);
      zo.drawImage(ᐃΔ[110][b][0], iq - 270, jq + 340);
    }
    if (ᐃΔ[109]) {
      zo.drawImage(ᐃΔ[109][b][4], iq - 700, jq - 600);
      zo.drawImage(ᐃΔ[109][b][2], iq - 970, jq - 250);
      zo.drawImage(ᐃΔ[109][b][5], iq - 720, jq - 200);
      zo.drawImage(ᐃΔ[109][b][2], iq - 1020, jq + 340);
      zo.drawImage(ᐃΔ[109][b][0], iq - 1120, jq - 0);
      zo.drawImage(ᐃΔ[109][b][1], iq - 650, jq - 330);
      zo.drawImage(ᐃΔ[109][b][4], iq - 495, jq - 90);
      zo.drawImage(ᐃΔ[109][b][3], iq - 520, jq + 340);
      zo.drawImage(ᐃΔ[109][b][2], iq + 830, jq - 520);
    }
    ᐃΔ[413];
    if (Rx && Qx) {
      var c = Rx.ⵠⵠΔ.x;
      var d = Rx.ⵠⵠΔ.y;
      Rx.ⵠⵠΔ.x = iq;
      Rx.ⵠⵠΔ.y = jq;
      var e = Qx.time;
      Qx.time = Lx.time;
      var f;
      var g = Lx.items;
      g[2].x = 400;
      g[2].y = 100;
      g[2].ⲆⵠⵠΔ(114);
      (f = g[1]).x = -500;
      f.y = 100;
      f.ᐃⵠⵠᐃ[0].x = f.x - 20.5;
      f.ᐃⵠⵠᐃ[0].y = f.y - 22.5;
      f.ᐃⵠⵠᐃ[1].x = f.x - 35.5;
      f.ᐃⵠⵠᐃ[1].y = f.y + 7.5;
      f.ᐃⵠⵠᐃ[2].x = f.x + 7.5;
      f.ᐃⵠⵠᐃ[2].y = f.y - 30;
      f.ᐃⵠⵠᐃ[3].x = f.x + 22.5;
      f.ᐃⵠⵠᐃ[3].y = f.y;
      f.ᐃⵠⵠᐃ[4].x = f.x - 7.5;
      f.ᐃⵠⵠᐃ[4].y = f.y + 14.5;
      for (var a = 0; a < f.info; a++) {
        f.ᐃⵠⵠᐃ[a].ⲆⵠⵠΔ(294);
      }
      (f = g[3]).x = 210;
      f.y = -290;
      f.ᐃⵠⵠᐃ[0].x = f.x - 20.5;
      f.ᐃⵠⵠᐃ[0].y = f.y - 22.5;
      f.ᐃⵠⵠᐃ[1].x = f.x - 35.5;
      f.ᐃⵠⵠᐃ[1].y = f.y + 7.5;
      f.ᐃⵠⵠᐃ[2].x = f.x + 7.5;
      f.ᐃⵠⵠᐃ[2].y = f.y - 30;
      f.ᐃⵠⵠᐃ[3].x = f.x + 22.5;
      f.ᐃⵠⵠᐃ[3].y = f.y;
      f.ᐃⵠⵠᐃ[4].x = f.x - 7.5;
      f.ᐃⵠⵠᐃ[4].y = f.y + 14.5;
      for (a = 0; f.info > a; a++) {
        f.ᐃⵠⵠᐃ[a].ⲆⵠⵠΔ(294);
      }
      g[0].x = 450;
      g[0].y = -100;
      g[0].ⵠⲆⵠᐃⲆ(113);
      g[0].ⵠΔᐃⵠⲆ();
      Rx.ⵠⵠΔ.x = c;
      Rx.ⵠⵠΔ.y = d;
      Qx.time = e;
    }
  }
  function Ic(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    ad(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    od(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110.57142639160156, a * 197.09820556640625);
    e.bezierCurveTo(a * 158.07142639160156, a * 179.09820556640625, a * 158.07142639160156, a * 179.09820556640625, a * 205.57142639160156, a * 161.09820556640625);
    e.bezierCurveTo(a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 309.8125);
    e.bezierCurveTo(a * 205.57142639160156, a * 323.8125, a * 200.57142639160156, a * 325.8125, a * 187.57142639160156, a * 326.8125);
    e.bezierCurveTo(a * 155.57142639160156, a * 326.3125, a * 155.57142639160156, a * 326.3125, a * 123.57142639160156, a * 325.8125);
    e.bezierCurveTo(a * 111.57142639160156, a * 326.8125, a * 109.57142639160156, a * 321.8125, a * 110.57142639160156, a * 312.8125);
    e.closePath();
    od(e, c[3], c[4], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    od(e, undefined, c[5], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    od(e, dg, c[6], a * 15);
    return d;
  }
  function Sc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 167;
    d.height = a * 136;
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    ad(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    od(e, c[0]);
    e.globalAlpha = 0.8;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    ad(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    od(e, dg, c[1], a * 7);
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    ad(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    ad(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    od(e, Bt, c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.21426391601562, a * 70.35713195800781);
    e.bezierCurveTo(a * 133.21426391601562, a * 95.35713195800781, a * 128.21426391601562, a * 109.35713195800781, a * 108.21426391601562, a * 108.35713195800781);
    od(e, Wb, c[1], a * 10);
    return d;
  }
  function Qc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 149;
    c.height = a * 153;
    d.globalAlpha = 0.5;
    hd(d, a * 74.5, a * 85, a * 66);
    od(d, b[0]);
    d.globalAlpha = 1;
    hd(d, a * 75.5, a * 72.5, a * 67);
    od(d, b[1], b[2], a * 4);
    hd(d, a * 75.5, a * 73.5, a * 54);
    od(d, b[3]);
    d.globalAlpha = 0.5;
    hd(d, a * 74.5, a * 80.5, a * 39);
    od(d, b[4]);
    d.globalAlpha = 1;
    hd(d, a * 74.5, a * 74.5, a * 37);
    od(d, b[5]);
    return c;
  }
  function _c(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 158;
    d.height = a * 201;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    od(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    od(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    od(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    od(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    od(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    od(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    od(e, c[8], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    od(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    od(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    od(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    od(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    od(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    od(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    od(e, c[3], c[2], a * 4);
    hd(e, a * 108.5, a * 148.421875, a * 9);
    od(e, c[5]);
    hd(e, a * 106.5, a * 144.421875, a * 3);
    od(e, c[6]);
    hd(e, a * 46.5, a * 148.421875, a * 9);
    od(e, c[5]);
    hd(e, a * 44.5, a * 144.421875, a * 3);
    od(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 114.421875);
    e.bezierCurveTo(a * 121.5, a * 137.421875, a * 118.5, a * 133.421875, a * 108.5, a * 139.421875);
    e.bezierCurveTo(a * 94.5, a * 146.421875, a * 96.5, a * 148.421875, a * 95.5, a * 152.421875);
    od(e, c[3], c[2], a * 4);
    e.beginPath();
    e.translate(0, a * -2);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.5, a * 131.421875);
    e.bezierCurveTo(a * 36.5, a * 140.421875, a * 39.5, a * 140.421875, a * 49.5, a * 143.421875);
    e.bezierCurveTo(a * 59.5, a * 149.421875, a * 57.5, a * 151.421875, a * 59.5, a * 155.421875);
    od(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 57.421875);
    e.bezierCurveTo(a * 101.5, a * 120.421875, a * 92.5, a * 127.421875, a * 78.5, a * 134.421875);
    e.bezierCurveTo(a * 51.5, a * 131.421875, a * 63.5, a * 102.421875, a * 70.5, a * 59.421875);
    e.bezierCurveTo(a * 75, a * 55.421875, a * 78.5, a * 52.421875, a * 79.5, a * 51.421875);
    e.closePath();
    od(e, c[4]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    od(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    od(e, c[3], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 154.421875);
    e.bezierCurveTo(a * 93.5, a * 163.921875, a * 93.5, a * 163.921875, a * 99.5, a * 173.421875);
    e.bezierCurveTo(a * 95, a * 177.421875, a * 95, a * 177.421875, a * 90.5, a * 181.421875);
    e.bezierCurveTo(a * 89, a * 167.921875, a * 89, a * 167.921875, a * 87.5, a * 154.421875);
    e.closePath();
    od(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 81.5, a * 164.421875);
    e.bezierCurveTo(a * 84, a * 172.921875, a * 84, a * 172.921875, a * 86.5, a * 181.421875);
    e.bezierCurveTo(a * 82.5, a * 182.421875, a * 82.5, a * 182.421875, a * 78.5, a * 183.421875);
    e.closePath();
    od(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 164.421875);
    e.bezierCurveTo(a * 73.5, a * 173.921875, a * 73.5, a * 173.921875, a * 74.5, a * 183.421875);
    e.bezierCurveTo(a * 70.5, a * 182.921875, a * 70.5, a * 182.921875, a * 66.5, a * 182.421875);
    e.closePath();
    od(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65.5, a * 156.421875);
    e.bezierCurveTo(a * 65, a * 168.421875, a * 65, a * 168.421875, a * 64.5, a * 180.421875);
    e.bezierCurveTo(a * 58.5, a * 177.421875, a * 58.5, a * 177.421875, a * 52.5, a * 174.421875);
    e.closePath();
    od(e, c[6], c[7], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    od(e, c[3], c[2], a * 4);
    return d;
  }
  function Rc(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 120;
    var g = b * 140;
    d.width = f;
    d.height = g;
    d.width = b * 130;
    d.height = b * 120;
    ad(e, b * 10, b * 12, b * 110, b * 90, b * 10);
    od(e, c[0]);
    ad(e, b * 10, b * 5, b * 110, b * 90, b * 10);
    od(e, c[1], c[2], b * 4);
    var a = bd(-Math.PI / 5, hu(b * 0.5, go, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(a, b * 12, b * 18);
    a = bd(Math.PI / 4, Um(b * 0.55, rq, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    e.drawImage(a, b * 36, b * 16);
    return d;
  }
  function Fc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * 10, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 20, a * 20);
    ad(e, 0, 0, a * 400, a * 220, a * 30);
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 5);
    e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
    e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
    e.closePath();
    od(e, c[2], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 70);
    e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    e.closePath();
    od(e, c[3], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
    e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    od(e, c[2], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 183);
    e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
    e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    od(e, c[3], c[1], a * 12);
    hd(e, a * 41, a * 30, a * 14.7648230602334);
    od(e, c[3], c[1], a * 12);
    hd(e, a * 369, a * 30, a * 15.556349186104045);
    od(e, c[3], c[1], a * 12);
    hd(e, a * 364, a * 190, a * 15.620499351813308);
    od(e, c[3], c[1], a * 12);
    hd(e, a * 41, a * 186, a * 15.556349186104045);
    od(e, c[3], c[1], a * 12);
    return d;
  }
  function jc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 80;
    d.height = a * 160;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    ad(e, a * 33, a * 53, a * 10, a * 98, a * 10);
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -100);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    od(e, c[0]);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    ad(e, a * 33, a * 53, a * 10, a * 98, a * 10);
    od(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -100);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    od(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 0, a * 1);
    e.moveTo(a * 180.5, a * 169.0625);
    e.bezierCurveTo(a * 180.5, a * 157.5625, a * 180.5, a * 157.5625, a * 180.5, a * 146.0625);
    e.bezierCurveTo(a * 181.5, a * 134.0625, a * 193.5, a * 129.0625, a * 196.5, a * 146.0625);
    e.bezierCurveTo(a * 196.5, a * 157.5625, a * 196.5, a * 157.5625, a * 196.5, a * 169.0625);
    e.closePath();
    od(e, c[5]);
    e.restore();
    return d;
  }
  function Lc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 161;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(0, 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    od(d, b[0]);
    d.globalAlpha = 1;
    d.translate(0, -8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    od(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 28, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    od(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    od(d, b[3]);
    hd(d, a * 103, a * 110, a * 11);
    od(d, b[4]);
    hd(d, a * 55, a * 111, a * 11);
    od(d, b[4]);
    hd(d, a * 99, a * 107, a * 5);
    od(d, b[1]);
    hd(d, a * 51, a * 108, a * 5);
    od(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 121);
    d.bezierCurveTo(a * 45, a * 128, a * 51, a * 133, a * 53, a * 141);
    d.bezierCurveTo(a * 59, a * 161, a * 70, a * 173, a * 80, a * 169);
    d.bezierCurveTo(a * 89, a * 172, a * 99, a * 149, a * 107, a * 133);
    d.bezierCurveTo(a * 114, a * 122, a * 119, a * 123, a * 124, a * 119);
    d.bezierCurveTo(a * 109, a * 148, a * 117, a * 133, a * 109, a * 147);
    d.bezierCurveTo(a * 87, a * 180, a * 84, a * 179, a * 76, a * 178);
    d.bezierCurveTo(a * 49, a * 173, a * 44, a * 149, a * 31, a * 121);
    d.closePath();
    od(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.translate(-2, 0);
    d.moveTo(a * 71, a * 162);
    d.bezierCurveTo(a * 80, a * 155, a * 85, a * 159, a * 89, a * 164);
    d.bezierCurveTo(a * 90, a * 171, a * 86, a * 173, a * 79, a * 173);
    d.bezierCurveTo(a * 67, a * 172, a * 67, a * 168, a * 71, a * 162);
    d.closePath();
    od(d, b[3]);
    d.translate(2, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 9, a * 93);
    d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
    d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
    d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
    d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
    d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    d.closePath();
    od(d, undefined, b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 25, a * 63);
    d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
    d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
    d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
    od(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 91, a * 53);
    d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
    d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
    d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
    od(d, b[1], b[2], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31, a * 63);
    d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    d.closePath();
    od(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 99, a * 55);
    d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    d.closePath();
    od(d, b[3]);
    return c;
  }
  function Gc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -80, -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 200.5, a * 14.953125);
    d.bezierCurveTo(a * 203, a * 171.953125, a * 203, a * 171.953125, a * 205.5, a * 328.953125);
    d.bezierCurveTo(a * 188.5, a * 257.953125, a * 164.5, a * 216.953125, a * 166.5, a * 176.953125);
    d.bezierCurveTo(a * 168.5, a * 133.953125, a * 198.5, a * 98.953125, a * 200.5, a * 14.953125);
    d.closePath();
    od(d, b[0]);
    return c;
  }
  function Wc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 192;
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 42, a * 99);
    d.globalAlpha = 0.5;
    ad(d, a * -7, a * -20, a * 14, a * 39, a * 20);
    d.restore();
    od(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 37, a * 94);
    ad(d, a * -7, a * -20, a * 14, a * 37, a * 20);
    d.restore();
    od(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 136, a * 99);
    d.globalAlpha = 0.5;
    ad(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    od(d, b[0], b[0], a * 13);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 131, a * 94);
    ad(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    od(d, b[2], b[2], a * 13);
    d.save();
    d.translate(a * 131, a * 94);
    ad(d, a * -76, a * -61, a * 152, a * 122, a * 20);
    d.restore();
    od(d, b[3], b[1], a * 8);
    d.save();
    d.translate(a * 168.5, a * 93.5);
    ad(d, a * -30.5, a * -58.5, a * 61, a * 117, a * 20);
    d.restore();
    od(d, b[3], b[4], a * 6);
    d.save();
    d.translate(a * 93.5, a * 95.5);
    ad(d, a * -32, a * -59.5, a * 59, a * 119, a * 20);
    d.restore();
    od(d, b[3], b[4], a * 6);
    d.save();
    d.translate(a * 130.5, a * 94);
    ad(d, a * -36, a * -67, a * 73, a * 134, a * 20);
    d.restore();
    od(d, b[3], b[2], a * 8);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 133, a * 97);
    ad(d, a * -83, a * -12, a * 160, a * 24, a * 0);
    d.restore();
    od(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 133, a * 92);
    ad(d, a * -83, a * -12, a * 160, a * 24, a * 0);
    d.restore();
    od(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 228, a * 99.5);
    d.globalAlpha = 0.5;
    ad(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
    d.restore();
    od(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 223, a * 94.5);
    ad(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
    d.restore();
    od(d, b[2]);
    d.save();
    d.translate(a * 133.5, a * 175.5);
    d.globalAlpha = 0.5;
    ad(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
    d.restore();
    od(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 128.5, a * 170.5);
    ad(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
    d.restore();
    od(d, b[2]);
    return c;
  }
  function qc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 27.3671875);
    e.bezierCurveTo(a * 128, a * 9.3671875, a * 125, a * 13.3671875, a * 126, a * 21.3671875);
    e.bezierCurveTo(a * 126, a * 33.3671875, a * 119, a * 43.3671875, a * 118, a * 42.3671875);
    e.closePath();
    od(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 23.3671875);
    e.bezierCurveTo(a * 17, a * 15.3671875, a * 16, a * 14.3671875, a * 17, a * 20.3671875);
    e.bezierCurveTo(a * 22, a * 33.3671875, a * 20, a * 27.3671875, a * 24, a * 34.3671875);
    e.closePath();
    od(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 70.5, a * 34.8671875);
    e.rotate(0);
    ad(e, a * -49.5, a * -21.5, a * 99, a * 43, a * 15);
    e.restore();
    od(e, c[0], c[1], a * 4);
    e.save();
    e.translate(a * 71, a * 40.8671875);
    e.rotate(0);
    ad(e, a * -49, a * -12.5, a * 98, a * 25, a * 15);
    e.restore();
    od(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19.800003051757812, a * 75.95625305175781);
    e.bezierCurveTo(a * 19.300003051757812, a * 82.95625305175781, a * 19.300003051757812, a * 82.95625305175781, a * 18.800003051757812, a * 89.95625305175781);
    e.bezierCurveTo(a * 38.80000305175781, a * 115.95625305175781, a * 37.80000305175781, a * 104.95625305175781, a * 31.800003051757812, a * 91.95625305175781);
    e.closePath();
    od(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119.80000305175781, a * 75.95625305175781);
    e.bezierCurveTo(a * 120.80000305175781, a * 82.95625305175781, a * 120.80000305175781, a * 82.95625305175781, a * 121.80000305175781, a * 89.95625305175781);
    e.bezierCurveTo(a * 101.80000305175781, a * 111.95625305175781, a * 99.80000305175781, a * 111.95625305175781, a * 112.80000305175781, a * 81.95625305175781);
    e.closePath();
    od(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.800003051757812, a * 49.15625);
    e.bezierCurveTo(a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 79.15625);
    e.bezierCurveTo(a * 23.300003051757812, a * 85.15625, a * 23.300003051757812, a * 85.15625, a * 28.800003051757812, a * 91.15625);
    e.bezierCurveTo(a * 36.80000305175781, a * 96.15625, a * 32.80000305175781, a * 91.15625, a * 28.800003051757812, a * 77.15625);
    e.bezierCurveTo(a * 33.80000305175781, a * 65.15625, a * 33.80000305175781, a * 65.15625, a * 38.80000305175781, a * 53.15625);
    e.closePath();
    od(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.80000305175781, a * 53.95625305175781);
    e.bezierCurveTo(a * 121.80000305175781, a * 77.95625305175781, a * 121.80000305175781, a * 74.95625305175781, a * 121.80000305175781, a * 78.95625305175781);
    e.bezierCurveTo(a * 115.80000305175781, a * 84.95625305175781, a * 115.80000305175781, a * 84.95625305175781, a * 109.80000305175781, a * 90.95625305175781);
    e.bezierCurveTo(a * 102.80000305175781, a * 93.95625305175781, a * 105.80000305175781, a * 86.95625305175781, a * 110.80000305175781, a * 76.95625305175781);
    e.bezierCurveTo(a * 107.30000305175781, a * 65.45625305175781, a * 103.80000305175781, a * 53.95625305175781, a * 103.80000305175781, a * 53.95625305175781);
    e.closePath();
    od(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 18, a * 56.3671875);
    e.bezierCurveTo(a * 70, a * 56.8671875, a * 70, a * 56.8671875, a * 122, a * 57.3671875);
    e.bezierCurveTo(a * 137, a * 20.3671875, a * 137, a * 16.3671875, a * 126, a * 22.3671875);
    e.bezierCurveTo(a * 115.5, a * 34.3671875, a * 115.5, a * 34.3671875, a * 105, a * 46.3671875);
    e.bezierCurveTo(a * 70.5, a * 46.3671875, a * 70.5, a * 46.3671875, a * 36, a * 46.3671875);
    e.bezierCurveTo(a * 4, a * 14.3671875, a * 7, a * 18.3671875, a * 8, a * 27.3671875);
    e.bezierCurveTo(a * 12.5, a * 41.8671875, a * 12.5, a * 41.8671875, a * 17, a * 56.3671875);
    e.closePath();
    od(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 68.30000305175781, a * 41.45625305175781);
    e.rotate(0.76);
    ad(e, a * -20.5, a * -20.5, a * 41, a * 41, a * 10);
    e.restore();
    od(e, Wb, c[5], a * 4);
    e.save();
    e.translate(a * 68.80000305175781, a * 44.45625305175781);
    e.rotate(0.76);
    ad(e, a * -21, a * -20.5, a * 42, a * 41, a * 10);
    e.restore();
    od(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 69.80000305175781, a * 44.556243896484375);
    e.rotate(0.76);
    ad(e, a * -10, a * -10, a * 20, a * 20, a * 5);
    e.restore();
    od(e, c[6], c[7], a * 4);
    return d;
  }
  function Nc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 88;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.52);
    ud(e, 6, a * 43, a * 10);
    e.restore();
    od(e, c[0], c[1], a * 3);
    return d;
  }
  function Oc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 180;
    d.height = a * 120;
    e.translate(a * -65, a * -35);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    ad(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
    e.restore();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    od(e, c[0]);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    ad(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
    e.restore();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    ad(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
    e.restore();
    od(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    od(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    od(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    od(e, c[1], c[2], a * 4);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    ad(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
    e.restore();
    od(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.5, a * 73.34375);
    e.bezierCurveTo(a * 93.5, a * 70.34375, a * 105.5, a * 70.34375, a * 124.5, a * 72.34375);
    e.bezierCurveTo(a * 132.5, a * 78.34375, a * 162.5, a * 80.34375, a * 176.5, a * 76.34375);
    e.bezierCurveTo(a * 194.5, a * 69.34375, a * 192.5, a * 68.34375, a * 199.5, a * 63.34375);
    e.bezierCurveTo(a * 204.5, a * 63.34375, a * 204.5, a * 63.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 153.5, a * 82.34375, a * 157.5, a * 85.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 194.5, a * 88.34375, a * 162.5, a * 87.34375, a * 149.5, a * 88.34375);
    e.bezierCurveTo(a * 129.5, a * 81.34375, a * 103.5, a * 75.34375, a * 83.5, a * 82.34375);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137.5, a * 65.34375);
    e.bezierCurveTo(a * 150.5, a * 76.34375, a * 170.5, a * 71.34375, a * 174.5, a * 65.34375);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 85.34375);
    e.bezierCurveTo(a * 211.5, a * 79.34375, a * 191.5, a * 88.34375, a * 181.5, a * 96.34375);
    e.bezierCurveTo(a * 201.5, a * 96.34375, a * 201.5, a * 96.34375, a * 221.5, a * 96.34375);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 89.34375);
    e.bezierCurveTo(a * 102.5, a * 87.34375, a * 112.5, a * 88.34375, a * 119.5, a * 97.34375);
    e.bezierCurveTo(a * 102, a * 98.34375, a * 102, a * 98.34375, a * 84.5, a * 99.34375);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 208.5, a * 104.34375);
    e.bezierCurveTo(a * 208.5, a * 110.34375, a * 208.5, a * 110.34375, a * 208.5, a * 116.34375);
    e.bezierCurveTo(a * 211.5, a * 110.34375, a * 211.5, a * 110.34375, a * 214.5, a * 104.34375);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 117.34375);
    e.bezierCurveTo(a * 92, a * 118.84375, a * 92, a * 118.84375, a * 96.5, a * 120.34375);
    e.bezierCurveTo(a * 93, a * 123.84375, a * 93, a * 123.84375, a * 89.5, a * 127.34375);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.5, a * 51.34375);
    e.bezierCurveTo(a * 122.5, a * 54.34375, a * 122.5, a * 54.34375, a * 137.5, a * 57.34375);
    e.bezierCurveTo(a * 118, a * 57.34375, a * 118, a * 57.34375, a * 98.5, a * 57.34375);
    e.bezierCurveTo(a * 94.5, a * 54.84375, a * 94.5, a * 54.84375, a * 90.5, a * 52.34375);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 170.5, a * 52.34375);
    e.bezierCurveTo(a * 179.5, a * 51.84375, a * 179.5, a * 51.84375, a * 188.5, a * 51.34375);
    e.bezierCurveTo(a * 187.5, a * 53.84375, a * 187.5, a * 53.84375, a * 186.5, a * 56.34375);
    e.bezierCurveTo(a * 177, a * 56.34375, a * 177, a * 56.34375, a * 167.5, a * 56.34375);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 69.34375);
    e.bezierCurveTo(a * 86.5, a * 70.34375, a * 86.5, a * 70.34375, a * 92.5, a * 71.34375);
    e.bezierCurveTo(a * 86, a * 73.34375, a * 86, a * 73.34375, a * 79.5, a * 75.34375);
    e.closePath();
    od(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222.5, a * 75.34375);
    e.bezierCurveTo(a * 214.5, a * 76.34375, a * 214.5, a * 76.34375, a * 206.5, a * 77.34375);
    e.bezierCurveTo(a * 216.5, a * 79.34375, a * 216.5, a * 79.34375, a * 226.5, a * 81.34375);
    e.closePath();
    od(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 100.34375);
    e.bezierCurveTo(a * 128, a * 97.34375, a * 128, a * 97.34375, a * 139.5, a * 94.34375);
    e.bezierCurveTo(a * 140, a * 96.84375, a * 140, a * 96.84375, a * 140.5, a * 99.34375);
    e.closePath();
    od(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112.5, a * 48.34375);
    e.bezierCurveTo(a * 115.5, a * 50.84375, a * 115.5, a * 50.84375, a * 118.5, a * 53.34375);
    e.bezierCurveTo(a * 131, a * 50.84375, a * 131, a * 50.84375, a * 143.5, a * 48.34375);
    e.closePath();
    od(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216.5, a * 109.34375);
    e.bezierCurveTo(a * 213, a * 114.84375, a * 213, a * 114.84375, a * 209.5, a * 120.34375);
    e.bezierCurveTo(a * 212, a * 118.84375, a * 212, a * 118.84375, a * 214.5, a * 117.34375);
    e.closePath();
    od(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86.5, a * 133.34375);
    e.bezierCurveTo(a * 89, a * 127.34375, a * 89, a * 127.34375, a * 91.5, a * 121.34375);
    e.bezierCurveTo(a * 92.5, a * 127.34375, a * 92.5, a * 127.34375, a * 93.5, a * 133.34375);
    e.closePath();
    od(e, c[2]);
    return d;
  }
  function Hc(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 185;
    e.height = b * 164;
    f.translate(0, 0);
    var g = function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 201;
      d.height = a * 164;
      e.translate(0, a * 5);
      e.globalAlpha = b ? 0.5 : 1;
      hd(e, a * 100.5, a * 82, a * 74.92746655359852);
      od(e, c[0], c[0], a * 4);
      hd(e, a * 100.5, a * 82, a * 65.9417374971317);
      od(e, c[0], c[0], a * 4);
      e.translate(0, -5);
      e.globalAlpha = 1;
      hd(e, a * 100.5, a * 82, a * 74.92746655359852);
      od(e, c[1], c[3], a * 4);
      hd(e, a * 100.5, a * 82, a * 65.9417374971317);
      od(e, c[1], c[2], a * 4);
      hd(e, a * 100.5, a * 82, a * 35.9417374971317);
      od(e, c[1], c[2], a * 20);
      hd(e, a * 100.5, a * 82, a * 15.9417374971317);
      od(e, c[1], c[2], a * 6);
      return d;
    }(b, c, d);
    f.drawImage(g, b * -10, b * 0);
    g = dp(b, c, d, 0);
    f.drawImage(g, b * -83, b * -40);
    g = dp(b, c, d, Math.PI / 1.4);
    f.drawImage(g, b * -15, b * -88);
    g = dp(b, c, d, Math.PI / -1.4);
    f.drawImage(g, b * 15, b * -8);
    return e;
  }
  function Uc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 372;
    d.height = a * 358;
    e.translate(a * 0, a * 10);
    e.globalAlpha = b ? 0.2 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    od(e, c[0], c[0], a * 10);
    e.translate(a * 0, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.00003051757812, a * 54.13069152832031);
    e.bezierCurveTo(a * 106.50003051757812, a * 38.63069152832031, a * 106.50003051757812, a * 38.63069152832031, a * 106.00003051757812, a * 23.130691528320312);
    e.bezierCurveTo(a * 121.50003051757812, a * 38.13069152832031, a * 121.50003051757812, a * 38.13069152832031, a * 137.00003051757812, a * 53.13069152832031);
    e.closePath();
    od(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 233.00003051757812, a * 53.6761474609375);
    e.bezierCurveTo(a * 247.00003051757812, a * 37.1761474609375, a * 247.00003051757812, a * 37.1761474609375, a * 261.0000305175781, a * 20.6761474609375);
    e.bezierCurveTo(a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 51.6761474609375);
    e.closePath();
    od(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 293.0000305175781, a * 54.403411865234375);
    e.bezierCurveTo(a * 300.0000305175781, a * 49.903411865234375, a * 300.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 45.403411865234375);
    e.bezierCurveTo(a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 54.403411865234375);
    e.closePath();
    od(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 77.00003051757812, a * 54.403411865234375);
    e.bezierCurveTo(a * 70.00003051757812, a * 50.403411865234375, a * 70.00003051757812, a * 50.403411865234375, a * 63.000030517578125, a * 46.403411865234375);
    e.bezierCurveTo(a * 62.500030517578125, a * 50.903411865234375, a * 62.500030517578125, a * 50.903411865234375, a * 62.000030517578125, a * 55.403411865234375);
    e.closePath();
    od(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.000030517578125, a * 122.3125);
    e.bezierCurveTo(a * 59.500030517578125, a * 97.3125, a * 59.500030517578125, a * 97.3125, a * 61.000030517578125, a * 72.3125);
    e.bezierCurveTo(a * 91.00003051757812, a * 89.3125, a * 91.00003051757812, a * 89.3125, a * 121.00003051757812, a * 106.3125);
    e.closePath();
    od(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 310.0000305175781, a * 127.3125);
    e.bezierCurveTo(a * 308.0000305175781, a * 98.3125, a * 308.0000305175781, a * 98.3125, a * 306.0000305175781, a * 69.3125);
    e.bezierCurveTo(a * 274.5000305175781, a * 88.8125, a * 274.5000305175781, a * 88.8125, a * 243.00003051757812, a * 108.3125);
    e.closePath();
    od(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.00003051757812, a * 87.85795593261719);
    e.bezierCurveTo(a * 243.50003051757812, a * 66.85795593261719, a * 243.50003051757812, a * 66.85795593261719, a * 261.0000305175781, a * 45.85795593261719);
    e.bezierCurveTo(a * 265.0000305175781, a * 83.85795593261719, a * 265.0000305175781, a * 83.85795593261719, a * 269.0000305175781, a * 121.85795593261719);
    e.bezierCurveTo(a * 235.00003051757812, a * 122.85795593261719, a * 233.00003051757812, a * 107.85795593261719, a * 228.00003051757812, a * 90.85795593261719);
    e.closePath();
    od(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 128.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 87.85795593261719, a * 104.50003051757812, a * 87.85795593261719, a * 104.00003051757812, a * 46.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 69.35795593261719, a * 126.50003051757812, a * 69.35795593261719, a * 149.00003051757812, a * 91.85795593261719);
    e.bezierCurveTo(a * 130.00003051757812, a * 123.85795593261719, a * 123.00003051757812, a * 132.8579559326172, a * 107.00003051757812, a * 130.8579559326172);
    e.closePath();
    od(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.000030517578125, a * 121.85795593261719);
    e.bezierCurveTo(a * 59.500030517578125, a * 99.35795593261719, a * 59.500030517578125, a * 99.35795593261719, a * 60.000030517578125, a * 76.85795593261719);
    e.bezierCurveTo(a * 84.00003051757812, a * 92.35795593261719, a * 84.00003051757812, a * 92.35795593261719, a * 108.00003051757812, a * 107.85795593261719);
    e.bezierCurveTo(a * 106.00003051757812, a * 148.8579559326172, a * 86.00003051757812, a * 148.8579559326172, a * 62.000030517578125, a * 123.85795593261719);
    e.closePath();
    od(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 132.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 93.35795593261719, a * 104.50003051757812, a * 93.35795593261719, a * 104.00003051757812, a * 53.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 75.85795593261719, a * 126.50003051757812, a * 75.85795593261719, a * 149.00003051757812, a * 97.85795593261719);
    e.closePath();
    od(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 311.0000305175781, a * 126.85795593261719);
    e.bezierCurveTo(a * 309.0000305175781, a * 101.35795593261719, a * 309.0000305175781, a * 101.35795593261719, a * 307.0000305175781, a * 75.85795593261719);
    e.bezierCurveTo(a * 271.0000305175781, a * 96.85795593261719, a * 271.0000305175781, a * 96.85795593261719, a * 235.00003051757812, a * 117.85795593261719);
    e.closePath();
    od(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 96.85795593261719);
    e.bezierCurveTo(a * 244.50003051757812, a * 74.85795593261719, a * 244.50003051757812, a * 74.85795593261719, a * 261.0000305175781, a * 52.85795593261719);
    e.bezierCurveTo(a * 265.5000305175781, a * 89.85795593261719, a * 265.5000305175781, a * 89.85795593261719, a * 270.0000305175781, a * 126.85795593261719);
    e.closePath();
    od(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 12.000030517578125, a * 86.13069152832031);
    e.bezierCurveTo(a * 36.000030517578125, a * 113.13069152832031, a * 84.00003051757812, a * 111.13069152832031, a * 116.00003051757812, a * 113.13069152832031);
    e.bezierCurveTo(a * 164.00003051757812, a * 23.130691528320312, a * 172.00003051757812, a * 18.130691528320312, a * 181.00003051757812, a * 9.130691528320312);
    e.bezierCurveTo(a * 199.00003051757812, a * 29.130691528320312, a * 221.00003051757812, a * 78.13069152832031, a * 247.00003051757812, a * 112.13069152832031);
    e.bezierCurveTo(a * 301.0000305175781, a * 122.13069152832031, a * 338.0000305175781, a * 111.13069152832031, a * 359.0000305175781, a * 94.13069152832031);
    e.bezierCurveTo(a * 359.0000305175781, a * 113.13069152832031, a * 358.5000305175781, a * 105.13069152832031, a * 358.0000305175781, a * 116.13069152832031);
    e.bezierCurveTo(a * 270.5000305175781, a * 130.1306915283203, a * 270.5000305175781, a * 130.1306915283203, a * 183.00003051757812, a * 144.1306915283203);
    e.bezierCurveTo(a * 98.00003051757812, a * 128.6306915283203, a * 98.00003051757812, a * 128.6306915283203, a * 13.000030517578125, a * 113.13069152832031);
    e.closePath();
    od(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    od(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27.000030517578125, a * 94.76704406738281);
    e.bezierCurveTo(a * 11.000030517578125, a * 81.76704406738281, a * 31.000030517578125, a * 72.76704406738281, a * 44.000030517578125, a * 59.76704406738281);
    e.bezierCurveTo(a * 9.000030517578125, a * 65.76704406738281, a * 4.000030517578125, a * 78.76704406738281, a * 9.000030517578125, a * 89.76704406738281);
    e.closePath();
    od(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 352.0000305175781, a * 100.76705932617188);
    e.bezierCurveTo(a * 362.0000305175781, a * 92.76705932617188, a * 352.0000305175781, a * 84.76705932617188, a * 340.0000305175781, a * 68.76705932617188);
    e.bezierCurveTo(a * 360.0000305175781, a * 69.76705932617188, a * 364.0000305175781, a * 79.76705932617188, a * 364.0000305175781, a * 94.76705932617188);
    e.closePath();
    od(e, c[1], c[1], a * 1);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.000030517578125, a * 97.94886779785156);
    e.bezierCurveTo(a * 2.000030517578125, a * 76.94886779785156, a * 29.000030517578125, a * 62.94886779785156, a * 44.000030517578125, a * 59.94886779785156);
    e.bezierCurveTo(a * 8.000030517578125, a * 59.94886779785156, a * -0.999969482421875, a * 81.94886779785156, a * 4.000030517578125, a * 92.94886779785156);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 349.0000305175781, a * 100.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 82.94886779785156, a * 353.0000305175781, a * 76.94886779785156, a * 337.0000305175781, a * 67.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 69.94886779785156, a * 366.0000305175781, a * 83.94886779785156, a * 363.0000305175781, a * 101.94886779785156);
    e.closePath();
    od(e, c[2], c[3], a * 10);
    hd(e, a * 46.000030517578125, a * 137.5852279663086, a * 9.219544457292887);
    od(e, c[4], c[5], a * 1);
    hd(e, a * 308.0000305175781, a * 141.5852279663086, a * 8.54400374531753);
    od(e, c[4], c[5], a * 1);
    hd(e, a * 92.00003051757812, a * 149.58523559570312, a * 14.866068747318506);
    od(e, c[4], c[5], a * 1);
    hd(e, a * 262.0000305175781, a * 148.8579559326172, a * 15.620499351813308);
    od(e, c[4], c[5], a * 1);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.00003051757812, a * 68.85795593261719);
    e.bezierCurveTo(a * 203.00003051757812, a * 108.85795593261719, a * 203.00003051757812, a * 108.85795593261719, a * 222.00003051757812, a * 148.8579559326172);
    e.bezierCurveTo(a * 202.50003051757812, a * 177.8579559326172, a * 202.50003051757812, a * 177.8579559326172, a * 183.00003051757812, a * 206.8579559326172);
    e.bezierCurveTo(a * 162.00003051757812, a * 178.8579559326172, a * 162.00003051757812, a * 178.8579559326172, a * 141.00003051757812, a * 150.8579559326172);
    e.closePath();
    od(e, c[4], c[5], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183.00003051757812, a * 104.94886779785156);
    e.bezierCurveTo(a * 192.50003051757812, a * 125.44886779785156, a * 192.50003051757812, a * 125.44886779785156, a * 202.00003051757812, a * 145.94886779785156);
    e.bezierCurveTo(a * 192.00003051757812, a * 163.94886779785156, a * 192.00003051757812, a * 163.94886779785156, a * 182.00003051757812, a * 181.94886779785156);
    e.bezierCurveTo(a * 172.50003051757812, a * 164.44886779785156, a * 172.50003051757812, a * 164.44886779785156, a * 163.00003051757812, a * 146.94886779785156);
    e.closePath();
    od(e, c[6]);
    return d;
  }
  function Yc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    od(e, undefined, c[0], a * 11);
    e.translate(0, a * -5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    od(e, c[3], c[2], a * 12);
    e.translate(0, a * 25);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    od(e, c[5]);
    e.translate(0, a * -25);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    od(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    od(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    od(e, da, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    od(e, c[1], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    od(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    od(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    od(e, undefined, c[2], a * 11);
    return d;
  }
  function Kc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    hd(e, a * 220, a * 201, a * 170.41713528867922);
    od(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    hd(e, a * 220, a * 201, a * 170.41713528867922);
    od(e, c[1], c[2], a * 6);
    hd(e, a * 220, a * 201, a * 130);
    od(e, c[11], c[2], a * 6);
    hd(e, a * 222, a * 199, a * 120.74767078498864);
    od(e, md, c[3], a * 40);
    hd(e, a * 220, a * 200, a * 95.44108130150245);
    od(e, undefined, c[2], a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    hd(e, a * 63, a * 136, a * 49.193495504995376);
    od(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    hd(e, a * 63, a * 136, a * 49.193495504995376);
    od(e, c[8], c[2], a * 4);
    hd(e, a * 63, a * 137, a * 25.632011235952593);
    od(e, c[7], c[2], a * 4);
    return d;
  }
  function Vc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 160;
    d.height = a * 161;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 80.5, a * 78);
    ad(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    e.restore();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 80.5, a * 78);
    ad(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
    e.restore();
    od(e, c[1], c[2], a * 6);
    e.save();
    e.translate(a * 80, a * 78.5);
    ad(e, a * -17, a * -72.5, a * 34, a * 145, a * 10);
    e.restore();
    od(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 80, a * 79.5);
    ad(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    e.restore();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 80, a * 79.5);
    ad(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    e.restore();
    od(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    od(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    od(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    od(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    od(e, c[3], c[4], a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 78.5, a * 78);
    ad(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
    e.restore();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 78.5, a * 78);
    ad(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
    e.restore();
    od(e, c[3], c[4], a * 6);
    return d;
  }
  function Xc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 173;
    c.height = a * 178;
    d.globalAlpha = 0.5;
    hd(d, a * 86.5, a * 98, a * 80);
    od(d, b[0]);
    d.globalAlpha = 1;
    hd(d, a * 86.5, a * 89, a * 81);
    od(d, b[1], b[2], a * 4);
    hd(d, a * 86.5, a * 86, a * 59);
    od(d, b[3], b[4], a * 4);
    d.globalAlpha = 0.5;
    hd(d, a * 86.5, a * 95, a * 34);
    od(d, b[0]);
    d.globalAlpha = 1;
    hd(d, a * 86.5, a * 89, a * 34);
    od(d, b[5]);
    return c;
  }
  function Zc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 20;
    c.height = a * 35;
    ad(d, 0, 0, 20, 35, 7);
    od(d, b[0]);
    return c;
  }
  function $c(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 405;
    e.globalAlpha = 1;
    e.translate(a * 6, a * 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.000030517578125, a * 162.03977966308594);
    e.bezierCurveTo(a * 125.00003051757812, a * 84.03977966308594, a * 108.50003051757812, a * 115.03977966308594, a * 178.00003051757812, a * 68.03977966308594);
    e.bezierCurveTo(a * 299.0000305175781, a * 146.53977966308594, a * 299.0000305175781, a * 146.53977966308594, a * 420.0000305175781, a * 225.03977966308594);
    e.bezierCurveTo(a * 400.0000305175781, a * 288.53977966308594, a * 400.0000305175781, a * 288.53977966308594, a * 380.0000305175781, a * 352.03977966308594);
    e.bezierCurveTo(a * 216.50003051757812, a * 345.53977966308594, a * 216.50003051757812, a * 345.53977966308594, a * 53.000030517578125, a * 339.03977966308594);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    od(e, c[0], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.000030517578125, a * 149.94886779785156);
    e.bezierCurveTo(a * 76.00003051757812, a * 67.94886779785156, a * 177.00003051757812, a * 40.94886779785156, a * 232.00003051757812, a * 45.94886779785156);
    e.bezierCurveTo(a * 316.0000305175781, a * 46.94886779785156, a * 359.0000305175781, a * 74.94886779785156, a * 428.0000305175781, a * 145.94886779785156);
    e.bezierCurveTo(a * 414.0000305175781, a * 73.94886779785156, a * 386.0000305175781, a * 68.94886779785156, a * 359.0000305175781, a * 43.94886779785156);
    e.bezierCurveTo(a * 295.0000305175781, a * 5.9488677978515625, a * 239.00003051757812, a * 10.948867797851562, a * 207.00003051757812, a * 10.948867797851562);
    e.bezierCurveTo(a * 121.00003051757812, a * 20.948867797851562, a * 104.00003051757812, a * 34.94886779785156, a * 45.000030517578125, a * 84.94886779785156);
    e.bezierCurveTo(a * 14.000030517578125, a * 128.94886779785156, a * 18.000030517578125, a * 142.94886779785156, a * 16.000030517578125, a * 151.94886779785156);
    e.closePath();
    od(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    od(e, undefined, c[1], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 183.00003051757812, a * 320.03977966308594, a * 342.0000305175781, a * 306.03977966308594, a * 399.0000305175781, a * 286.03977966308594);
    e.bezierCurveTo(a * 420.0000305175781, a * 345.03977966308594, a * 410.0000305175781, a * 335.03977966308594, a * 415.0000305175781, a * 362.03977966308594);
    e.bezierCurveTo(a * 351.0000305175781, a * 384.03977966308594, a * 299.0000305175781, a * 389.03977966308594, a * 215.00003051757812, a * 391.03977966308594);
    e.bezierCurveTo(a * 128.00003051757812, a * 388.03977966308594, a * 69.00003051757812, a * 373.03977966308594, a * 39.000030517578125, a * 359.03977966308594);
    e.closePath();
    od(e, c[0], c[1], a * 13);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 327.03977966308594);
    e.bezierCurveTo(a * 203.00003051757812, a * 377.03977966308594, a * 331.0000305175781, a * 349.03977966308594, a * 410.0000305175781, a * 330.03977966308594);
    e.closePath();
    od(e, c[0], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.000030517578125, a * 339.1306915283203);
    e.bezierCurveTo(a * 2.000030517578125, a * 280.1306915283203, a * 30.000030517578125, a * 219.1306915283203, a * 85.00003051757812, a * 167.1306915283203);
    e.bezierCurveTo(a * 174.00003051757812, a * 82.13069152832031, a * 241.00003051757812, a * 101.13069152832031, a * 284.0000305175781, a * 115.13069152832031);
    e.bezierCurveTo(a * 333.0000305175781, a * 134.1306915283203, a * 376.0000305175781, a * 177.1306915283203, a * 410.0000305175781, a * 247.1306915283203);
    e.bezierCurveTo(a * 439.0000305175781, a * 300.1306915283203, a * 442.0000305175781, a * 346.1306915283203, a * 430.0000305175781, a * 363.1306915283203);
    e.bezierCurveTo(a * 418.0000305175781, a * 366.1306915283203, a * 395.0000305175781, a * 295.1306915283203, a * 355.0000305175781, a * 223.1306915283203);
    e.bezierCurveTo(a * 299.0000305175781, a * 156.1306915283203, a * 262.0000305175781, a * 155.1306915283203, a * 215.00003051757812, a * 159.1306915283203);
    e.bezierCurveTo(a * 133.00003051757812, a * 171.1306915283203, a * 120.00003051757812, a * 193.1306915283203, a * 96.00003051757812, a * 221.1306915283203);
    e.bezierCurveTo(a * 49.000030517578125, a * 262.1306915283203, a * 47.000030517578125, a * 306.1306915283203, a * 38.000030517578125, a * 336.1306915283203);
    e.bezierCurveTo(a * 30.000030517578125, a * 349.1306915283203, a * 30.000030517578125, a * 349.1306915283203, a * 22.000030517578125, a * 362.1306915283203);
    e.closePath();
    od(e, c[2], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 128.03977966308594);
    e.bezierCurveTo(a * 315.0000305175781, a * 131.03977966308594, a * 349.0000305175781, a * 178.03977966308594, a * 386.0000305175781, a * 234.03977966308594);
    e.bezierCurveTo(a * 444.0000305175781, a * 329.03977966308594, a * 446.0000305175781, a * 354.03977966308594, a * 427.0000305175781, a * 373.03977966308594);
    e.bezierCurveTo(a * 389.0000305175781, a * 389.03977966308594, a * 399.0000305175781, a * 329.03977966308594, a * 361.0000305175781, a * 277.03977966308594);
    e.bezierCurveTo(a * 306.0000305175781, a * 191.03977966308594, a * 266.0000305175781, a * 183.03977966308594, a * 220.00003051757812, a * 181.03977966308594);
    e.bezierCurveTo(a * 138.00003051757812, a * 184.03977966308594, a * 123.00003051757812, a * 212.03977966308594, a * 89.00003051757812, a * 271.03977966308594);
    e.bezierCurveTo(a * 52.000030517578125, a * 349.03977966308594, a * 68.00003051757812, a * 364.03977966308594, a * 33.000030517578125, a * 369.03977966308594);
    e.bezierCurveTo(a * 6.000030517578125, a * 366.03977966308594, a * 5.000030517578125, a * 341.03977966308594, a * 26.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 60.000030517578125, a * 207.03977966308594, a * 100.00003051757812, a * 180.03977966308594, a * 113.00003051757812, a * 170.03977966308594);
    e.bezierCurveTo(a * 159.00003051757812, a * 132.03977966308594, a * 196.00003051757812, a * 133.03977966308594, a * 226.00003051757812, a * 129.03977966308594);
    e.closePath();
    od(e, c[0], c[1], a * 20);
    return d;
  }
  function ep(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 89;
    d.height = a * 89;
    e.save();
    e.translate(a * 44.5, a * 44.5);
    ud(e, 6, a * 40, a * 10);
    e.restore();
    od(e, c[0], c[1], a * 5);
    e.save();
    e.translate(a * 44.5, a * 44.5);
    ud(e, 6, a * 25.11521001172521, a * 10);
    e.restore();
    od(e, c[2], c[3], a * 5);
    return d;
  }
  function ip(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 170;
    e.translate(0, a * -170);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159.5, a * 322.0625);
    e.bezierCurveTo(a * 240.5, a * 293.0625, a * 240.5, a * 293.0625, a * 321.5, a * 264.0625);
    e.bezierCurveTo(a * 276.5, a * 230.0625, a * 276.5, a * 230.0625, a * 231.5, a * 196.0625);
    e.bezierCurveTo(a * 158.5, a * 221.5625, a * 158.5, a * 221.5625, a * 85.5, a * 247.0625);
    e.closePath();
    od(e, c[0], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212.5, a * 270.0625);
    e.bezierCurveTo(a * 235, a * 261.5625, a * 235, a * 261.5625, a * 257.5, a * 253.0625);
    e.closePath();
    od(e, undefined, c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 193.5, a * 226.0625);
    e.bezierCurveTo(a * 204.5, a * 242.0625, a * 242.5, a * 237.0625, a * 251.5, a * 225.0625);
    e.bezierCurveTo(a * 246.5, a * 195.0625, a * 205.5, a * 190.0625, a * 193.5, a * 227.0625);
    e.closePath();
    od(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164.5, a * 245.0625);
    e.bezierCurveTo(a * 182.5, a * 264.0625, a * 252.5, a * 258.0625, a * 276.5, a * 244.0625);
    e.bezierCurveTo(a * 265.5, a * 226.0625, a * 244.5, a * 231.0625, a * 229.5, a * 230.0625);
    e.bezierCurveTo(a * 205.5, a * 227.0625, a * 175.5, a * 202.0625, a * 162.5, a * 244.0625);
    e.closePath();
    od(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 260.0625);
    e.bezierCurveTo(a * 134.5, a * 279.0625, a * 170.5, a * 275.0625, a * 191.5, a * 257.0625);
    e.bezierCurveTo(a * 174.5, a * 208.0625, a * 142.5, a * 197.0625, a * 116.5, a * 259.0625);
    e.closePath();
    od(e, c[2], c[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 152.5, a * 278.0625);
    e.bezierCurveTo(a * 165.5, a * 294.0625, a * 200.5, a * 287.0625, a * 216.5, a * 278.0625);
    e.bezierCurveTo(a * 206.5, a * 247.0625, a * 173.5, a * 233.0625, a * 153.5, a * 276.0625);
    e.closePath();
    od(e, c[2], c[3], a * 12);
    return d;
  }
  function tp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(a * 10, a * 10);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, a * 5);
      e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
      e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
      e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
      e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
      e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
      e.closePath();
      od(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 5, a * 70);
      e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      od(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
      e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      od(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 183);
      e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      od(e, b[3], b[3], a * 32);
      hd(e, a * 41, a * 30, a * 14.7648230602334);
      od(e, b[3], b[3], a * 32);
      hd(e, a * 369, a * 30, a * 15.556349186104045);
      od(e, b[3], b[3], a * 32);
      hd(e, a * 364, a * 190, a * 15.620499351813308);
      od(e, b[3], b[3], a * 32);
      hd(e, a * 41, a * 186, a * 15.556349186104045);
      od(e, b[3], b[3], a * 32);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, a * 5);
      e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
      e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
      e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
      e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
      e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
      e.closePath();
      od(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 5, a * 70);
      e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      od(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
      e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      od(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 183);
      e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      od(e, b[3], b[3], a * 32);
      hd(e, a * 41, a * 30, a * 14.7648230602334);
      od(e, b[3], b[3], a * 32);
      hd(e, a * 369, a * 30, a * 15.556349186104045);
      od(e, b[3], b[3], a * 32);
      hd(e, a * 364, a * 190, a * 15.620499351813308);
      od(e, b[3], b[3], a * 32);
      hd(e, a * 41, a * 186, a * 15.556349186104045);
      od(e, b[3], b[3], a * 32);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 5);
    e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
    e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
    e.closePath();
    od(e, b[1], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 70);
    e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
    e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    e.closePath();
    od(e, b[2], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
    e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    od(e, b[1], b[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 183);
    e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
    e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    od(e, b[2], b[0], a * 12);
    hd(e, a * 41, a * 30, a * 14.7648230602334);
    od(e, b[2], b[0], a * 12);
    hd(e, a * 369, a * 30, a * 15.556349186104045);
    od(e, b[2], b[0], a * 12);
    hd(e, a * 364, a * 190, a * 15.620499351813308);
    od(e, b[2], b[0], a * 12);
    hd(e, a * 41, a * 186, a * 15.556349186104045);
    od(e, b[2], b[0], a * 12);
    return d;
  }
  function np() {
    ᐃΔ[814] = Kd(1, [{
      f: hp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
    }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[815] = ᐃΔ[814];
    ᐃΔ[955] = [];
    ᐃΔ[955][0] = ᐃᐃ.ⲆⵠΔⲆⲆⵠᐃ;
    ᐃΔ[955][1] = ᐃᐃ.ΔΔⲆΔΔΔⲆ;
    ᐃΔ[955][2] = ᐃᐃ.ΔᐃΔᐃᐃⲆᐃ;
    ᐃΔ[956] = ᐃΔ[955];
    ᐃΔ[972] = [];
    ᐃΔ[972][0] = ᐃᐃ.ⵠⵠⲆⵠΔᐃᐃ;
    ᐃΔ[972][1] = ᐃᐃ.ᐃΔⵠⲆⵠⵠᐃ;
    ᐃΔ[972][2] = ᐃᐃ.ⲆΔⵠⲆⵠᐃⵠ;
    ᐃΔ[973] = ᐃΔ[972];
    ᐃΔ[987] = [];
    ᐃΔ[987][0] = ᐃᐃ.ᐃΔⵠΔⵠⵠⲆ;
    ᐃΔ[987][1] = ᐃᐃ.ΔⲆⵠⵠᐃⲆⲆ;
    ᐃΔ[987][2] = ᐃᐃ.ᐃΔⲆⲆⲆᐃⵠ;
    ᐃΔ[988] = ᐃΔ[987];
    ᐃΔ[1154] = [];
    ᐃΔ[1154][0] = ᐃᐃ.ΔⲆΔⲆⵠⵠΔ;
    ᐃΔ[1154][1] = ᐃᐃ.ⲆΔΔⵠⵠⲆⵠ;
    ᐃΔ[1154][2] = ᐃᐃ.ΔⵠⲆⵠᐃⲆⲆ;
    ᐃΔ[1155] = ᐃΔ[1154];
    ᐃΔ[965] = [];
    ᐃΔ[965][0] = ᐃᐃ.ΔⵠᐃᐃⲆΔΔ;
    ᐃΔ[965][1] = ᐃᐃ.ⲆⵠᐃᐃⲆⵠⵠ;
    ᐃΔ[965][2] = ᐃᐃ.ⵠⲆⲆΔⵠᐃⵠ;
    ᐃΔ[974] = ᐃΔ[965];
    ᐃΔ[1028] = [];
    ᐃΔ[1028][0] = ᐃᐃ.ⵠΔⵠΔⲆⲆⲆ;
    ᐃΔ[1028][1] = ᐃᐃ.ΔⵠᐃΔⵠⲆᐃ;
    ᐃΔ[1028][2] = ᐃᐃ.ⵠᐃⲆΔΔⲆⲆ;
    ᐃΔ[1029] = ᐃΔ[1028];
    ᐃΔ[1027] = ᐃΔ[1028];
    ᐃΔ[712] = [];
    ᐃΔ[712][0] = ᐃᐃ.ⵠⲆᐃⵠⵠⲆⲆⲆΔ;
    ᐃΔ[712][1] = ᐃᐃ.ⲆⵠᐃⲆⲆΔᐃΔⵠ;
    ᐃΔ[712][2] = ᐃᐃ.ᐃⲆⵠᐃΔⵠⵠⵠΔ;
    ᐃΔ[713] = ᐃΔ[712];
    ᐃΔ[714] = ᐃΔ[712];
    ᐃΔ[1031] = [];
    ᐃΔ[1031][0] = ᐃᐃ.Δᐃᐃᐃⵠᐃⵠ;
    ᐃΔ[1031][1] = ᐃᐃ.ΔᐃᐃᐃΔᐃΔ;
    ᐃΔ[1031][2] = ᐃᐃ.ᐃⵠⲆᐃⵠⲆⲆ;
    ᐃΔ[1032] = ᐃΔ[1031];
    ᐃΔ[1030] = ᐃΔ[1031];
    ᐃΔ[423] = [];
    ᐃΔ[423][0] = ᐃᐃ.ⵠⵠⲆΔⲆΔⲆ;
    ᐃΔ[423][1] = ᐃᐃ.ᐃΔⲆᐃⲆΔᐃ;
    ᐃΔ[423][2] = ᐃᐃ.ⲆⲆᐃⵠⵠⵠΔ;
    ᐃΔ[425] = ᐃΔ[423];
    ᐃΔ[424] = ᐃΔ[423];
    ᐃΔ[1233] = [];
    ᐃΔ[1233][0] = ᐃᐃ.ΔᐃᐃΔᐃⵠⵠ;
    ᐃΔ[1233][1] = ᐃᐃ.ᐃΔᐃᐃⵠᐃⲆ;
    ᐃΔ[1233][2] = ᐃᐃ.ⲆᐃⲆⲆΔⵠⵠ;
    ᐃΔ[1234] = ᐃΔ[1233];
    ᐃΔ[1230] = [];
    ᐃΔ[1230][0] = ᐃᐃ.ΔⵠⲆⲆⲆⲆᐃ;
    ᐃΔ[1230][1] = ᐃᐃ.ᐃΔᐃᐃⲆᐃⲆ;
    ᐃΔ[1230][2] = ᐃᐃ.ⲆⲆⲆⲆᐃⵠᐃ;
    ᐃΔ[1232] = ᐃΔ[1230];
    ᐃΔ[1231] = ᐃΔ[1230];
    ᐃΔ[569] = [];
    ᐃΔ[569][0] = ᐃᐃ.ⵠⵠᐃⵠᐃᐃⲆ;
    ᐃΔ[569][1] = ᐃᐃ.ⵠⵠⲆΔΔᐃⵠ;
    ᐃΔ[569][2] = ᐃᐃ.ΔΔΔΔΔⲆᐃ;
    ᐃΔ[571] = ᐃΔ[569];
    ᐃΔ[570] = ᐃΔ[569];
    ᐃΔ[1166] = [];
    ᐃΔ[1166][0] = ᐃᐃ.ⵠΔⵠⵠⲆΔᐃ;
    ᐃΔ[1166][1] = ᐃᐃ.ΔᐃⲆᐃΔⲆΔ;
    ᐃΔ[1166][2] = ᐃᐃ.ⵠⲆⵠΔᐃⵠⲆ;
    ᐃΔ[1167] = ᐃΔ[1166];
    ᐃΔ[1168] = ᐃΔ[1166];
    ᐃΔ[572] = [];
    ᐃΔ[572][0] = ᐃᐃ.ⲆᐃⲆᐃⵠΔΔ;
    ᐃΔ[572][1] = ᐃᐃ.ⵠᐃⲆⲆᐃΔᐃ;
    ᐃΔ[572][2] = ᐃᐃ.ΔΔᐃᐃᐃᐃᐃ;
    ᐃΔ[574] = ᐃΔ[572];
    ᐃΔ[573] = ᐃΔ[572];
    ᐃΔ[1169] = [];
    ᐃΔ[1169][0] = ᐃᐃ.ⲆΔΔⲆⵠΔΔ;
    ᐃΔ[1169][1] = ᐃᐃ.ᐃΔⵠΔⵠᐃᐃ;
    ᐃΔ[1169][2] = ᐃᐃ.ⲆⵠΔⵠⵠᐃⵠ;
    ᐃΔ[1170] = ᐃΔ[1169];
    ᐃΔ[1171] = ᐃΔ[1169];
    ᐃΔ[575] = [];
    ᐃΔ[575][0] = ᐃᐃ.ⲆᐃⲆᐃⲆⵠᐃ;
    ᐃΔ[575][1] = ᐃᐃ.ⵠᐃⵠⵠᐃⵠⵠ;
    ᐃΔ[575][2] = ᐃᐃ.ΔΔⲆΔⵠⵠⲆ;
    ᐃΔ[577] = ᐃΔ[575];
    ᐃΔ[576] = ᐃΔ[575];
    ᐃΔ[1172] = [];
    ᐃΔ[1172][0] = ᐃᐃ.ⲆᐃᐃᐃⲆⵠΔ;
    ᐃΔ[1172][1] = ᐃᐃ.ᐃⵠⵠⵠΔᐃᐃ;
    ᐃΔ[1172][2] = ᐃᐃ.ⲆΔΔⲆⵠΔⲆ;
    ᐃΔ[1173] = ᐃΔ[1172];
    ᐃΔ[1174] = ᐃΔ[1172];
    ᐃΔ[578] = [];
    ᐃΔ[578][0] = ᐃᐃ.ⲆⲆᐃⲆⲆΔΔ;
    ᐃΔ[578][1] = ᐃᐃ.ⲆΔΔᐃΔΔⲆ;
    ᐃΔ[578][2] = ᐃᐃ.ⲆⵠΔⵠⲆⵠⵠ;
    ᐃΔ[580] = ᐃΔ[578];
    ᐃΔ[579] = ᐃΔ[578];
    ᐃΔ[1175] = [];
    ᐃΔ[1175][0] = ᐃᐃ.ⵠᐃᐃⵠᐃᐃᐃ;
    ᐃΔ[1175][1] = ᐃᐃ.ΔⲆⵠᐃⵠᐃΔ;
    ᐃΔ[1175][2] = ᐃᐃ.ΔⵠⵠⲆΔᐃⵠ;
    ᐃΔ[1176] = ᐃΔ[1175];
    ᐃΔ[1177] = ᐃΔ[1175];
    ᐃΔ[581] = [];
    ᐃΔ[581][0] = ᐃᐃ.ⲆᐃᐃⵠΔⵠⲆ;
    ᐃΔ[581][1] = ᐃᐃ.ⵠⵠⵠᐃⲆΔᐃ;
    ᐃΔ[581][2] = ᐃᐃ.ⵠⵠᐃⲆᐃⵠᐃ;
    ᐃΔ[583] = ᐃΔ[581];
    ᐃΔ[582] = ᐃΔ[581];
    ᐃΔ[1178] = [];
    ᐃΔ[1178][0] = ᐃᐃ.ΔᐃᐃΔⲆᐃⵠ;
    ᐃΔ[1178][1] = ᐃᐃ.ⲆΔⲆᐃᐃⵠᐃ;
    ᐃΔ[1178][2] = ᐃᐃ.ᐃᐃΔⲆᐃΔΔ;
    ᐃΔ[1179] = ᐃΔ[1178];
    ᐃΔ[1180] = ᐃΔ[1178];
    ᐃΔ[584] = [];
    ᐃΔ[584][0] = ᐃᐃ.ΔⵠⲆᐃⲆᐃⵠ;
    ᐃΔ[584][1] = ᐃᐃ.ⵠⲆⵠᐃⲆᐃΔ;
    ᐃΔ[584][2] = ᐃᐃ.ⲆⲆⵠⲆΔΔⲆ;
    ᐃΔ[586] = ᐃΔ[584];
    ᐃΔ[585] = ᐃΔ[584];
    ᐃΔ[1181] = [];
    ᐃΔ[1181][0] = ᐃᐃ.ᐃⵠⲆⵠⵠⵠᐃ;
    ᐃΔ[1181][1] = ᐃᐃ.ΔⲆⵠⲆΔⵠⲆ;
    ᐃΔ[1181][2] = ᐃᐃ.ⵠⲆⲆⵠᐃΔᐃ;
    ᐃΔ[1182] = ᐃΔ[1181];
    ᐃΔ[1183] = ᐃΔ[1181];
    ᐃΔ[587] = [];
    ᐃΔ[587][0] = ᐃᐃ.ᐃΔᐃⵠⲆⵠᐃ;
    ᐃΔ[587][1] = ᐃᐃ.ⲆⲆᐃⵠᐃⵠᐃ;
    ᐃΔ[587][2] = ᐃᐃ.ᐃᐃΔⵠⲆⵠᐃ;
    ᐃΔ[589] = ᐃΔ[587];
    ᐃΔ[588] = ᐃΔ[587];
    ᐃΔ[1184] = [];
    ᐃΔ[1184][0] = ᐃᐃ.ⲆᐃΔᐃᐃᐃⲆ;
    ᐃΔ[1184][1] = ᐃᐃ.ᐃΔᐃᐃⲆⲆⵠ;
    ᐃΔ[1184][2] = ᐃᐃ.ᐃⲆⵠᐃⲆᐃΔ;
    ᐃΔ[1185] = ᐃΔ[1184];
    ᐃΔ[1186] = ᐃΔ[1184];
    ᐃΔ[1257] = [];
    ᐃΔ[1257][0] = ᐃᐃ.ᐃⲆⲆⲆᐃΔΔ;
    ᐃΔ[1257][1] = ᐃᐃ.ⵠΔΔΔⵠᐃᐃ;
    ᐃΔ[1257][2] = ᐃᐃ.ⲆⵠΔΔⲆΔⲆᐃᐃ;
    ᐃΔ[1258] = ᐃΔ[1257];
    ᐃΔ[1256] = ᐃΔ[1257];
    ᐃΔ[1260] = [];
    ᐃΔ[1260][0] = ᐃᐃ.ⵠⵠⵠᐃⲆⵠⲆⲆΔ;
    ᐃΔ[1260][1] = ᐃᐃ.ᐃⲆᐃΔⲆⵠΔᐃᐃ;
    ᐃΔ[1260][2] = ᐃᐃ.ᐃΔΔⵠⵠⵠᐃⲆⲆ;
    ᐃΔ[1261] = ᐃΔ[1260];
    ᐃΔ[1259] = ᐃΔ[1260];
    ᐃΔ[1263] = [];
    ᐃΔ[1263][0] = ᐃᐃ.ⵠⲆⲆⵠᐃⵠⲆⵠⵠ;
    ᐃΔ[1263][1] = ᐃᐃ.ᐃΔⵠⵠᐃⲆⲆⲆΔ;
    ᐃΔ[1263][2] = ᐃᐃ.ᐃΔⵠⵠᐃⵠⵠⲆⵠ;
    ᐃΔ[1264] = ᐃΔ[1263];
    ᐃΔ[1262] = ᐃΔ[1263];
    ᐃΔ[1266] = [];
    ᐃΔ[1266][0] = ᐃᐃ.ⵠᐃᐃΔΔⲆΔᐃⲆ;
    ᐃΔ[1266][1] = ᐃᐃ.ⲆᐃⵠᐃᐃΔⵠⲆⲆ;
    ᐃΔ[1266][2] = ᐃᐃ.ΔⵠΔⵠⲆᐃⲆᐃⲆ;
    ᐃΔ[1267] = ᐃΔ[1266];
    ᐃΔ[1265] = ᐃΔ[1266];
    ᐃΔ[1269] = [];
    ᐃΔ[1269][0] = ᐃᐃ.ⵠᐃΔᐃⵠⵠⲆΔᐃ;
    ᐃΔ[1269][1] = ᐃᐃ.ΔⵠⵠᐃⵠⵠᐃΔⲆ;
    ᐃΔ[1269][2] = ᐃᐃ.ⵠⵠⵠⲆⲆᐃⲆⵠΔ;
    ᐃΔ[1270] = ᐃΔ[1269];
    ᐃΔ[1268] = ᐃΔ[1269];
    ᐃΔ[1272] = [];
    ᐃΔ[1272][0] = ᐃᐃ.ⲆⲆΔⲆⵠΔⵠΔᐃ;
    ᐃΔ[1272][1] = ᐃᐃ.ⲆᐃᐃᐃᐃΔΔᐃᐃ;
    ᐃΔ[1272][2] = ᐃᐃ.ΔⲆⵠⵠⵠᐃⵠⵠΔ;
    ᐃΔ[1273] = ᐃΔ[1272];
    ᐃΔ[1271] = ᐃΔ[1272];
    ᐃΔ[1239] = [];
    ᐃΔ[1239][0] = ᐃᐃ.ᐃⲆᐃᐃᐃⲆⵠᐃᐃ;
    ᐃΔ[1239][1] = ᐃᐃ.ΔⲆᐃⲆΔᐃᐃΔᐃ;
    ᐃΔ[1239][2] = ᐃᐃ.ⲆⵠⵠⵠⵠⲆΔⵠⲆ;
    ᐃΔ[1240] = ᐃΔ[1239];
    ᐃΔ[1238] = ᐃΔ[1239];
    ᐃΔ[1242] = [];
    ᐃΔ[1242][0] = ᐃᐃ.ᐃᐃⵠΔⲆⲆΔᐃᐃ;
    ᐃΔ[1242][1] = ᐃᐃ.Δᐃᐃᐃᐃᐃᐃⵠᐃ;
    ᐃΔ[1242][2] = ᐃᐃ.ⵠᐃΔⵠⲆΔⵠⲆⲆ;
    ᐃΔ[1243] = ᐃΔ[1242];
    ᐃΔ[1241] = ᐃΔ[1242];
    ᐃΔ[1245] = [];
    ᐃΔ[1245][0] = ᐃᐃ.ᐃⲆΔᐃⲆⲆⲆᐃⵠ;
    ᐃΔ[1245][1] = ᐃᐃ.ΔⵠΔⲆᐃⲆᐃΔᐃ;
    ᐃΔ[1245][2] = ᐃᐃ.ᐃᐃⲆΔⲆᐃᐃⲆΔ;
    ᐃΔ[1246] = ᐃΔ[1245];
    ᐃΔ[1244] = ᐃΔ[1245];
    ᐃΔ[1248] = [];
    ᐃΔ[1248][0] = ᐃᐃ.ᐃⵠΔⵠΔⵠⲆⵠΔ;
    ᐃΔ[1248][1] = ᐃᐃ.ᐃᐃΔⵠⲆⲆᐃⵠᐃ;
    ᐃΔ[1248][2] = ᐃᐃ.ⲆⲆⵠⵠΔΔΔᐃⲆ;
    ᐃΔ[1249] = ᐃΔ[1248];
    ᐃΔ[1247] = ᐃΔ[1248];
    ᐃΔ[1251] = [];
    ᐃΔ[1251][0] = ᐃᐃ.ΔΔΔΔΔᐃᐃΔᐃ;
    ᐃΔ[1251][1] = ᐃᐃ.ⲆⵠΔⵠⲆᐃᐃⵠⵠ;
    ᐃΔ[1251][2] = ᐃᐃ.ΔᐃᐃⵠᐃⵠⵠΔᐃ;
    ᐃΔ[1252] = ᐃΔ[1251];
    ᐃΔ[1250] = ᐃΔ[1251];
    ᐃΔ[1254] = [];
    ᐃΔ[1254][0] = ᐃᐃ.ᐃⵠᐃᐃᐃⵠⲆⵠⲆ;
    ᐃΔ[1254][1] = ᐃᐃ.ΔΔΔⵠΔⲆⲆⵠᐃ;
    ᐃΔ[1254][2] = ᐃᐃ.ΔⲆⲆΔⲆᐃΔⵠⲆ;
    ᐃΔ[1255] = ᐃΔ[1254];
    ᐃΔ[1253] = ᐃΔ[1254];
    ᐃΔ[1227] = [];
    ᐃΔ[1227][0] = ᐃᐃ.ΔΔΔᐃΔᐃⲆ;
    ᐃΔ[1227][1] = ᐃᐃ.ⲆΔᐃⲆⵠⵠᐃ;
    ᐃΔ[1227][2] = ᐃᐃ.ⲆΔⲆⵠᐃⵠⵠ;
    ᐃΔ[1229] = ᐃΔ[1227];
    ᐃΔ[1228] = ᐃΔ[1227];
    ᐃΔ[1187] = [];
    ᐃΔ[1187][0] = ᐃᐃ.ᐃᐃⲆⵠΔⲆⵠ;
    ᐃΔ[1187][1] = ᐃᐃ.ΔⲆⵠΔᐃΔΔ;
    ᐃΔ[1187][2] = ᐃᐃ.ᐃΔΔⵠᐃᐃⵠ;
    ᐃΔ[1188] = ᐃΔ[1187];
    ᐃΔ[ns.ⵠΔᐃⵠⵠⲆⵠⵠⵠ] = ᐃΔ[1187];
    ᐃΔ[840] = Kd(1, [{
      f: fd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
    }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[841] = ᐃΔ[840];
    ᐃΔ[850] = Kd(1, [{
      f: Vm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
    }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[851] = ᐃΔ[850];
    ᐃΔ[644] = Kd(1, [{
      f: Yd,
      x: -1,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }, {
      f: Ud,
      x: -1,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }, {
      f: Od,
      x: -1,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[643] = ᐃΔ[644];
    ᐃΔ[639] = Kd(1, [{
      f: _d,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[800] = Kd(1, [{
      f: Fc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
    }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[799] = ᐃΔ[800];
    ᐃΔ[631] = Kd(1, [{
      f: Pu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[632] = ᐃΔ[631];
    ᐃΔ[311] = Kd(1, [{
      f: Pu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#493d36", "#332b28"]
    }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[284] = ᐃΔ[311];
    ᐃΔ[808] = Kd(1, [{
      f: Pu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#c67933", "#b17238"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[809] = ᐃΔ[808];
    ᐃΔ[834] = Kd(1, [{
      f: Pu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#e8e8e8", "#bbbbbb"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[835] = ᐃΔ[834];
    ᐃΔ[845] = Kd(1, [{
      f: Pu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#328a56", "#449573"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[846] = ᐃΔ[845];
    ᐃΔ[949] = Kd(1, [{
      f: Pu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#c98e2f", "#a36b11"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[950] = ᐃΔ[949];
    ᐃΔ[951] = ᐃΔ[949];
    ᐃΔ[966] = Kd(1, [{
      f: Pu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#13a56d", "#098a58"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[967] = ᐃΔ[966];
    ᐃΔ[968] = ᐃΔ[966];
    ᐃΔ[981] = Kd(1, [{
      f: Pu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#3a8214", "#4a9c1e"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[982] = ᐃΔ[981];
    ᐃΔ[983] = ᐃΔ[981];
    ᐃΔ[959] = Kd(1, [{
      f: Pu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#b22419", "#99110e"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[960] = ᐃΔ[959];
    ᐃΔ[961] = ᐃΔ[959];
    ᐃΔ[309] = Kd(1, [{
      f: Wt,
      x: -2,
      y: -2,
      a: 1,
      r: -Math.PI / 7,
      c: ["#4d2d14", "#432516"]
    }, {
      f: Ut,
      x: -2,
      y: -2,
      a: 1,
      r: -Math.PI / 7,
      c: ["#efd435", "#ec8d35", "#e96132"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[302] = ᐃΔ[309];
    ᐃΔ[328] = Kd(1, [{
      f: Tt,
      x: -2,
      y: -1,
      a: 1,
      r: -Math.PI / 7,
      c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
    }, {
      f: Ut,
      x: -2,
      y: -1,
      a: 1,
      r: -Math.PI / 7,
      c: ["#efd435", "#ec8d35", "#e96132"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[327] = ᐃΔ[328];
    ᐃΔ[860] = Kd(1, [{
      f: tu,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
    }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[865] = Kd(1, [{
      f: em,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[829] = Kd(1, [{
      f: vu,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[261] = Kd(1, [{
      f: uu,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[292] = Kd(1, [{
      f: iu,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[293] = Kd(1, [{
      f: Du,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[455] = Kd(1, [{
      f: zu,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[313] = Kd(1, [{
      f: hu,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[312] = Kd(1, [{
      f: hu,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[258] = Kd(1, [{
      f: hu,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[296] = Kd(1, [{
      f: hu,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[458] = Kd(1, [{
      f: hu,
      x: -2,
      y: 5,
      a: 1,
      r: -Math.PI / 5,
      c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[1017] = [];
    ᐃΔ[1017][0] = ᐃᐃ.ⲆⲆⲆᐃⵠΔⵠ;
    ᐃΔ[1017][1] = ᐃᐃ.ⲆΔΔΔᐃⵠⵠ;
    ᐃΔ[1017][2] = ᐃᐃ.ᐃᐃⲆΔⵠΔⲆ;
    ᐃΔ[1019] = ᐃΔ[1017];
    ᐃΔ[1018] = ᐃΔ[1017];
    ᐃΔ[315] = Kd(1, [{
      f: Bu,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#252B28", "#58645F", "#75827D"]
    }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[297] = Kd(1, [{
      f: Au,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#282823", "#877c2d", "#c4bc51"]
    }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[298] = Kd(1, [{
      f: yu,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#232828", "#3fc9c9", "#74ede6"]
    }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[316] = Kd(1, [{
      f: Wt,
      x: 0,
      y: -5,
      a: 1,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[830] = ᐃΔ[829];
    ᐃΔ[254] = ᐃΔ[261];
    ᐃΔ[290] = ᐃΔ[292];
    ᐃΔ[291] = ᐃΔ[293];
    ᐃΔ[456] = ᐃΔ[455];
    ᐃΔ[314] = ᐃΔ[313];
    ᐃΔ[256] = ᐃΔ[312];
    ᐃΔ[295] = ᐃΔ[258];
    ᐃΔ[257] = ᐃΔ[296];
    ᐃΔ[460] = ᐃΔ[458];
    ᐃΔ[277] = Kd(1, [{
      f: Id,
      x: 0,
      y: 0,
      a: 1,
      r: 0
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[310] = Kd(1, [{
      f: Gd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
    }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[262] = ᐃΔ[310];
    ᐃΔ[329] = Kd(1, [{
      f: Am,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[263] = ᐃΔ[329];
    ᐃΔ[331] = Kd(1, [{
      f: bm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[332] = ᐃΔ[331];
    ᐃΔ[492] = Kd(1, [{
      f: Am,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[493] = ᐃΔ[492];
    ᐃΔ[330] = Kd(1, [{
      f: Tm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
    }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[265] = ᐃΔ[330];
    ᐃΔ[317] = Kd(1, [{
      f: vm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
    }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[318] = ᐃΔ[317];
    ᐃΔ[319] = Kd(1, [{
      f: Gm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[320] = ᐃΔ[319];
    ᐃΔ[362] = Kd(1, [{
      f: Nm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[363] = ᐃΔ[362];
    ᐃΔ[364] = Kd(1, [{
      f: Nm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[365] = ᐃΔ[364];
    ᐃΔ[361] = Kd(1, [{
      f: Wm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[360] = ᐃΔ[361];
    ᐃΔ[495] = Kd(1, [{
      f: Wm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[496] = ᐃΔ[495];
    ᐃΔ[335] = Kd(1, [{
      f: Fm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[268] = ᐃΔ[335];
    ᐃΔ[372] = Kd(1, [{
      f: Qm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[371] = ᐃΔ[372];
    ᐃΔ[499] = Kd(1, [{
      f: Qm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[498] = ᐃΔ[499];
    ᐃΔ[375] = Kd(1, [{
      f: zm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[374] = ᐃΔ[375];
    ᐃΔ[378] = Kd(1, [{
      f: Cm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[377] = ᐃΔ[378];
    ᐃΔ[337] = Kd(1, [{
      f: ym,
      x: 0,
      y: 2,
      a: 1,
      r: 0,
      c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[338] = ᐃΔ[337];
    ᐃΔ[300] = Kd(1, [{
      f: Rd,
      x: 0,
      y: -3,
      a: 1,
      r: 0,
      c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
    }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[323] = Kd(1, [{
      f: Rd,
      x: 0,
      y: -3,
      a: 1,
      r: 0,
      c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
    }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[325] = ᐃΔ[323];
    ᐃΔ[305] = Kd(1, [{
      f: Hd,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#cec0c4", "#ffffff", "#6d6768"]
    }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[513] = Kd(1, [{
      f: Hd,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#d4e9ec", "#37b1d7", "#506c71"]
    }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[515] = ᐃΔ[513];
    ᐃΔ[368] = Kd(1, [{
      f: qm,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#ef96be", "#ffffff"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[1162] = Kd(1, [{
      f: qm,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#55423e", "#ffffff"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[178] = Kd(1, [{
      f: xm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
    }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[179] = Kd(1, [{
      f: xm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
    }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[624] = Kd(1, [{
      f: qm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#201851", "#b6222a"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[393] = Kd(1, [{
      f: qm,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#231f20", "#b6222a"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[505] = Kd(1, [{
      f: qm,
      x: -3,
      y: -3,
      a: 1,
      r: 0,
      c: ["#ffffff", "#b6222a"]
    }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[369] = Kd(1, [{
      f: Ym,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[370] = ᐃΔ[369];
    ᐃΔ[381] = Kd(1, [{
      f: Rm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[380] = ᐃΔ[381];
    ᐃΔ[502] = Kd(1, [{
      f: Om,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[503] = ᐃΔ[502];
    ᐃΔ[880] = Kd(1, [{
      f: au,
      x: 0,
      y: 5,
      a: 1,
      r: 0,
      c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[881] = ᐃΔ[880];
    ᐃΔ[882] = Kd(1, [{
      f: bu,
      x: 0,
      y: 5,
      a: 1,
      r: 0,
      c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[883] = ᐃΔ[882];
    ᐃΔ[303] = Kd(1, [{
      f: Vd,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#ffffff", "#cec0c4"]
    }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[304] = ᐃΔ[303];
    ᐃΔ[392] = [];
    ᐃΔ[392][0] = ᐃᐃ.ⲆᐃⵠᐃᐃⵠⲆ;
    ᐃΔ[392][1] = ᐃᐃ.ᐃᐃΔΔⲆⲆΔ;
    ᐃΔ[392][2] = ᐃᐃ.ⲆᐃⵠⵠⲆΔΔ;
    ᐃΔ[367] = ᐃΔ[392];
    ᐃΔ[975] = [];
    ᐃΔ[975][0] = ᐃᐃ.ⵠⲆⵠΔΔᐃᐃ;
    ᐃΔ[975][1] = ᐃᐃ.ᐃⵠⲆᐃΔΔⲆ;
    ᐃΔ[975][2] = ᐃᐃ.ⲆΔⲆⵠⲆᐃΔ;
    ᐃΔ[977] = ᐃΔ[975];
    ᐃΔ[976] = ᐃΔ[975];
    ᐃΔ[978] = [];
    ᐃΔ[978][0] = ᐃᐃ.ⲆⵠᐃΔᐃⲆⵠ;
    ᐃΔ[978][1] = ᐃᐃ.ⲆᐃⵠⵠⵠⵠⲆ;
    ᐃΔ[978][2] = ᐃᐃ.ΔⲆΔΔⵠⵠΔ;
    ᐃΔ[980] = ᐃΔ[978];
    ᐃΔ[979] = ᐃΔ[978];
    ᐃΔ[1158] = [];
    ᐃΔ[1158][0] = ᐃᐃ.ⵠⵠⲆΔⲆⵠᐃ;
    ᐃΔ[1158][1] = ᐃᐃ.ⵠⵠⲆΔⲆⵠᐃ;
    ᐃΔ[1158][2] = ᐃᐃ.ⵠⵠⲆΔⲆⵠᐃ;
    ᐃΔ[1159] = ᐃΔ[1158];
    ᐃΔ[426] = [];
    ᐃΔ[426][0] = ᐃᐃ.ᐃᐃᐃΔⲆᐃᐃ;
    ᐃΔ[426][1] = ᐃᐃ.ΔΔΔᐃΔⲆⲆ;
    ᐃΔ[426][2] = ᐃᐃ.ΔᐃΔⲆᐃⵠⵠ;
    ᐃΔ[427] = ᐃΔ[426];
    ᐃΔ[428] = ᐃΔ[426];
    ᐃΔ[1160] = [];
    ᐃΔ[1160][0] = ᐃᐃ.ΔⲆᐃⵠⵠᐃⲆ;
    ᐃΔ[1160][1] = ᐃᐃ.ΔⲆᐃⵠⵠᐃⲆ;
    ᐃΔ[1160][2] = ᐃᐃ.ΔⲆᐃⵠⵠᐃⲆ;
    ᐃΔ[1161] = ᐃΔ[1160];
    ᐃΔ[1236] = [];
    ᐃΔ[1236][0] = ᐃᐃ.ⲆᐃⲆⲆⵠΔⵠΔⲆ;
    ᐃΔ[1236][1] = ᐃᐃ.ΔⵠⵠⵠⲆⲆⵠⵠΔ;
    ᐃΔ[1236][2] = ᐃᐃ.ΔᐃΔⵠⵠᐃⲆⵠᐃ;
    ᐃΔ[1235] = ᐃΔ[1236];
    ᐃΔ[1237] = ᐃΔ[1236];
    ᐃΔ[991] = [];
    ᐃΔ[991][0] = ᐃᐃ.ΔΔⲆⲆⲆΔⲆ;
    ᐃΔ[991][1] = ᐃᐃ.ΔⵠᐃΔᐃⲆⲆ;
    ᐃΔ[991][2] = ᐃᐃ.ᐃᐃᐃⵠⵠⲆΔ;
    ᐃΔ[990] = ᐃΔ[991];
    ᐃΔ[992] = ᐃΔ[991];
    ᐃΔ[994] = [];
    ᐃΔ[994][0] = ᐃᐃ.ⵠⲆᐃⲆⵠΔⲆ;
    ᐃΔ[994][1] = ᐃᐃ.ⵠᐃⵠⵠⵠⲆⲆ;
    ᐃΔ[994][2] = ᐃᐃ.ⵠⲆΔⲆᐃΔⲆ;
    ᐃΔ[993] = ᐃΔ[994];
    ᐃΔ[995] = ᐃΔ[994];
    ᐃΔ[997] = [];
    ᐃΔ[997][0] = ᐃᐃ.ⵠΔⵠⵠΔᐃᐃ;
    ᐃΔ[997][1] = ᐃᐃ.ⵠᐃΔΔᐃΔΔ;
    ᐃΔ[997][2] = ᐃᐃ.ᐃΔΔⵠΔⵠⲆ;
    ᐃΔ[996] = ᐃΔ[997];
    ᐃΔ[998] = ᐃΔ[997];
    ᐃΔ[1000] = [];
    ᐃΔ[1000][0] = ᐃᐃ.ⲆᐃΔⲆΔⵠⲆ;
    ᐃΔ[1000][1] = ᐃᐃ.ⲆΔᐃΔⵠΔⵠ;
    ᐃΔ[1000][2] = ᐃᐃ.ⲆⲆⵠᐃᐃΔⲆ;
    ᐃΔ[999] = ᐃΔ[1000];
    ᐃΔ[1001] = ᐃΔ[1000];
    ᐃΔ[1003] = [];
    ᐃΔ[1003][0] = ᐃᐃ.ⵠⲆᐃΔᐃⲆⵠ;
    ᐃΔ[1003][1] = ᐃᐃ.ⵠᐃΔⵠᐃᐃⲆ;
    ᐃΔ[1003][2] = ᐃᐃ.ᐃΔᐃᐃⵠⵠⲆ;
    ᐃΔ[1002] = ᐃΔ[1003];
    ᐃΔ[1004] = ᐃΔ[1003];
    ᐃΔ[1006] = [];
    ᐃΔ[1006][0] = ᐃᐃ.ᐃΔᐃⵠⲆΔᐃ;
    ᐃΔ[1006][1] = ᐃᐃ.ⵠⵠⲆⲆᐃⵠΔ;
    ᐃΔ[1006][2] = ᐃᐃ.ᐃⲆΔⲆⵠⲆΔ;
    ᐃΔ[1005] = ᐃΔ[1006];
    ᐃΔ[1007] = ᐃΔ[1006];
    ᐃΔ[1009] = [];
    ᐃΔ[1009][0] = ᐃᐃ.ᐃΔΔⵠⲆⵠᐃ;
    ᐃΔ[1009][1] = ᐃᐃ.ⵠⲆᐃΔⲆⲆⵠ;
    ᐃΔ[1009][2] = ᐃᐃ.ⲆⵠΔⵠⲆΔΔ;
    ᐃΔ[1008] = ᐃΔ[1009];
    ᐃΔ[1010] = ᐃΔ[1009];
    ᐃΔ[1012] = [];
    ᐃΔ[1012][0] = ᐃᐃ.ΔΔᐃΔᐃᐃᐃ;
    ᐃΔ[1012][1] = ᐃᐃ.ΔⲆᐃⲆⲆⵠⵠ;
    ᐃΔ[1012][2] = ᐃᐃ.ΔᐃⲆΔⲆᐃΔ;
    ᐃΔ[1011] = ᐃΔ[1012];
    ᐃΔ[1013] = ᐃΔ[1012];
    ᐃΔ[1015] = [];
    ᐃΔ[1015][0] = ᐃᐃ.ⲆⵠⲆⵠⲆᐃⲆ;
    ᐃΔ[1015][1] = ᐃᐃ.ⲆⵠᐃⵠⵠⲆⲆ;
    ᐃΔ[1015][2] = ᐃᐃ.ⵠᐃⵠⲆᐃⵠⵠ;
    ᐃΔ[1014] = ᐃΔ[1015];
    ᐃΔ[1016] = ᐃΔ[1015];
    ᐃΔ[1035] = [];
    ᐃΔ[1035][0] = ᐃᐃ.ᐃⲆⲆⲆΔ;
    ᐃΔ[1035][1] = ᐃᐃ.ᐃⲆⲆⲆΔ;
    ᐃΔ[1035][2] = ᐃᐃ.ᐃⲆⲆⲆΔ;
    ᐃΔ[ns.ⵠⲆΔⲆΔⲆⵠⵠⲆ] = ᐃΔ[1035];
    ᐃΔ[1036] = ᐃΔ[1035];
    ᐃΔ[1037] = [];
    ᐃΔ[1037][0] = ᐃᐃ.ᐃΔⵠⵠⵠ;
    ᐃΔ[1037][1] = ᐃᐃ.ᐃΔⵠⵠⵠ;
    ᐃΔ[1037][2] = ᐃᐃ.ᐃΔⵠⵠⵠ;
    ᐃΔ[ns.ᐃᐃΔᐃⵠΔⵠⵠⵠ] = ᐃΔ[1037];
    ᐃΔ[1038] = ᐃΔ[1037];
    ᐃΔ[1039] = [];
    ᐃΔ[1039][0] = ᐃᐃ.Ⲇⵠᐃᐃᐃ;
    ᐃΔ[1039][1] = ᐃᐃ.Ⲇⵠᐃᐃᐃ;
    ᐃΔ[1039][2] = ᐃᐃ.Ⲇⵠᐃᐃᐃ;
    ᐃΔ[ns.ⵠΔᐃⵠΔᐃᐃΔᐃ] = ᐃΔ[1039];
    ᐃΔ[1040] = ᐃΔ[1039];
    ᐃΔ[1156] = [];
    ᐃΔ[1156][0] = ᐃᐃ.ᐃΔⵠΔⵠ;
    ᐃΔ[1156][1] = ᐃᐃ.ᐃΔⵠΔⵠ;
    ᐃΔ[1156][2] = ᐃᐃ.ᐃΔⵠΔⵠ;
    ᐃΔ[1157] = ᐃΔ[1156];
    ᐃΔ[1046] = [];
    ᐃΔ[1046][0] = ᐃᐃ.ⲆΔⵠᐃⵠⵠⵠ;
    ᐃΔ[1046][1] = ᐃᐃ.ᐃᐃᐃᐃⲆΔⲆ;
    ᐃΔ[1046][2] = ᐃᐃ.ⵠⲆⲆΔⲆⲆᐃ;
    ᐃΔ[1048] = ᐃΔ[1046];
    ᐃΔ[1047] = ᐃΔ[1046];
    ᐃΔ[744] = [];
    ᐃΔ[744][0] = ᐃᐃ.ΔᐃⵠᐃⵠᐃⲆ;
    ᐃΔ[744][1] = ᐃᐃ.ΔⲆⲆᐃⲆΔᐃ;
    ᐃΔ[744][2] = ᐃᐃ.ⵠᐃᐃⲆᐃᐃᐃ;
    ᐃΔ[746] = ᐃΔ[744];
    ᐃΔ[745] = ᐃΔ[744];
    ᐃΔ[747] = [];
    ᐃΔ[747][0] = ᐃᐃ.ⲆᐃᐃᐃΔⵠⵠ;
    ᐃΔ[747][1] = ᐃᐃ.ΔΔᐃᐃⵠⵠⲆ;
    ᐃΔ[747][2] = ᐃᐃ.ⵠᐃⲆᐃΔⲆᐃ;
    ᐃΔ[749] = ᐃΔ[747];
    ᐃΔ[748] = ᐃΔ[747];
    ᐃΔ[1049] = [];
    ᐃΔ[1049][0] = ᐃᐃ.ΔⵠΔᐃΔⵠᐃ;
    ᐃΔ[1049][1] = ᐃᐃ.ⲆᐃᐃΔΔⲆⵠ;
    ᐃΔ[1049][2] = ᐃᐃ.ᐃⲆⲆᐃΔΔᐃ;
    ᐃΔ[1051] = ᐃΔ[1049];
    ᐃΔ[1050] = ᐃΔ[1049];
    ᐃΔ[1189] = [];
    ᐃΔ[1189][0] = ᐃᐃ.ΔΔᐃⵠⵠᐃᐃ;
    ᐃΔ[1189][1] = ᐃᐃ.ⵠⲆᐃᐃⲆⲆΔ;
    ᐃΔ[1189][2] = ᐃᐃ.ⲆⵠⲆΔΔᐃⵠ;
    ᐃΔ[1191] = ᐃΔ[1189];
    ᐃΔ[1190] = ᐃΔ[1189];
    ᐃΔ[1110] = [];
    ᐃΔ[1110][0] = ᐃᐃ.ⲆⵠⵠⵠΔΔᐃ;
    ᐃΔ[1110][1] = ᐃᐃ.ⵠⲆⵠᐃⲆⵠⵠ;
    ᐃΔ[1110][2] = ᐃᐃ.ⵠᐃⵠⵠᐃⵠΔ;
    ᐃΔ[1112] = ᐃΔ[1110];
    ᐃΔ[1111] = ᐃΔ[1110];
    ᐃΔ[1131] = [];
    ᐃΔ[1131][0] = ᐃᐃ.ⲆⵠⲆΔⵠᐃⲆᐃⲆ;
    ᐃΔ[1131][1] = ᐃᐃ.ⵠⲆⵠⵠᐃⵠᐃᐃΔ;
    ᐃΔ[1131][2] = ᐃᐃ.Ⲇᐃᐃⵠⵠⵠⵠⵠᐃ;
    ᐃΔ[1133] = ᐃΔ[1131];
    ᐃΔ[1132] = ᐃΔ[1131];
    ᐃΔ[1137] = [];
    ᐃΔ[1137][0] = ᐃᐃ.ⲆⵠᐃᐃⵠΔⲆ;
    ᐃΔ[1137][1] = ᐃᐃ.ⵠΔⵠΔΔᐃΔ;
    ᐃΔ[1137][2] = ᐃᐃ.ⵠⵠⲆᐃᐃⵠⵠ;
    ᐃΔ[1138] = ᐃΔ[1137];
    ᐃΔ[1139] = ᐃΔ[1137];
    ᐃΔ[1140] = [];
    ᐃΔ[1140][0] = ᐃᐃ.ⵠⵠΔⲆⲆⵠΔ;
    ᐃΔ[1140][1] = ᐃᐃ.ᐃᐃⲆᐃⲆΔⵠ;
    ᐃΔ[1140][2] = ᐃᐃ.ΔΔᐃⵠᐃᐃⲆ;
    ᐃΔ[1141] = ᐃΔ[1140];
    ᐃΔ[1142] = ᐃΔ[1140];
    ᐃΔ[1117] = [];
    ᐃΔ[1117][0] = ᐃᐃ.ⵠⵠⵠΔⲆⲆⲆ;
    ᐃΔ[1117][1] = ᐃᐃ.ᐃᐃⲆΔⲆΔΔ;
    ᐃΔ[1117][2] = ᐃᐃ.ⲆⲆⵠΔⲆΔⲆ;
    ᐃΔ[1116] = ᐃΔ[1117];
    ᐃΔ[1118] = ᐃΔ[1117];
    ᐃΔ[1080] = [];
    ᐃΔ[1080][0] = ᐃᐃ.ⲆΔⵠⲆᐃΔᐃ;
    ᐃΔ[1080][1] = ᐃᐃ.ⵠΔΔᐃⲆΔⲆ;
    ᐃΔ[1080][2] = ᐃᐃ.ᐃΔⲆⲆⵠᐃΔ;
    ᐃΔ[1082] = ᐃΔ[1080];
    ᐃΔ[1081] = ᐃΔ[1080];
    ᐃΔ[1224] = [];
    ᐃΔ[1224][0] = ᐃᐃ.ⲆⲆᐃⲆΔⵠⲆ;
    ᐃΔ[1224][1] = ᐃᐃ.ⵠⵠΔⵠᐃΔᐃ;
    ᐃΔ[1224][2] = ᐃᐃ.ΔⲆΔⵠⵠΔᐃ;
    ᐃΔ[1226] = ᐃΔ[1224];
    ᐃΔ[1225] = ᐃΔ[1224];
    ᐃΔ[1095] = [];
    ᐃΔ[1095][0] = ᐃᐃ.ᐃᐃᐃⵠⲆΔⵠ;
    ᐃΔ[1095][1] = ᐃᐃ.ᐃΔᐃᐃΔᐃⲆ;
    ᐃΔ[1095][2] = ᐃᐃ.ⵠⵠΔΔᐃⵠΔ;
    ᐃΔ[1097] = ᐃΔ[1095];
    ᐃΔ[1096] = ᐃΔ[1095];
    ᐃΔ[717] = Kd(1, [{
      f: _p,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
    }, {
      f: nc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#e4c027"]
    }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[718] = ᐃΔ[717];
    ᐃΔ[408] = Kd(1, [{
      f: Dm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
    }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[409] = ᐃΔ[408];
    ᐃΔ[907] = Kd(1, [{
      f: pm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
    }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[909] = ᐃΔ[907];
    ᐃΔ[908] = ᐃΔ[907];
    ᐃΔ[197] = Kd(1, [{
      f: Bm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
    }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[906] = ᐃΔ[197];
    ᐃΔ[901] = Kd(1, [{
      f: Pm,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[900] = ᐃΔ[901];
    ᐃΔ[899] = ᐃΔ[901];
    ᐃΔ[401] = Kd(1, [{
      f: cm,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[402] = ᐃΔ[401];
    ᐃΔ[395] = Kd(1, [{
      f: wm,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[396] = ᐃΔ[395];
    ᐃΔ[398] = Kd(1, [{
      f: Jm,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[399] = ᐃΔ[398];
    ᐃΔ[404] = Kd(1, [{
      f: Im,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[405] = ᐃΔ[404];
    ᐃΔ[472] = Kd(1, [{
      f: fm,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[473] = ᐃΔ[472];
    ᐃΔ[874] = Kd(1, [{
      f: km,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
    }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[876] = ᐃΔ[874];
    ᐃΔ[875] = ᐃΔ[874];
    ᐃΔ[477] = Kd(1, [{
      f: Um,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[478] = ᐃΔ[477];
    ᐃΔ[709] = Kd(1, [{
      f: Jp,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#939393", "#5f6061"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[711] = ᐃΔ[709];
    ᐃΔ[550] = Kd(1, [{
      f: Ap,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[551] = ᐃΔ[550];
    ᐃΔ[480] = Kd(1, [{
      f: Um,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[481] = ᐃΔ[480];
    ᐃΔ[483] = Kd(1, [{
      f: Um,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[484] = ᐃΔ[483];
    ᐃΔ[486] = Kd(1, [{
      f: Um,
      x: 2,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[487] = ᐃΔ[486];
    ᐃΔ[489] = [];
    ᐃΔ[489][0] = ᐃᐃ.ΔΔΔⲆᐃⲆⲆ;
    ᐃΔ[489][1] = ᐃᐃ.ⲆΔⵠΔⲆᐃᐃ;
    ᐃΔ[489][2] = ᐃᐃ.ⲆΔΔⵠⲆⲆⵠ;
    ᐃΔ[491] = ᐃΔ[489];
    ᐃΔ[490] = ᐃΔ[489];
    ᐃΔ[1195] = [];
    ᐃΔ[1195][0] = ᐃᐃ.ⵠᐃⵠΔⲆΔᐃ;
    ᐃΔ[1195][1] = ᐃᐃ.ⵠⲆΔΔᐃⲆΔ;
    ᐃΔ[1195][2] = ᐃᐃ.ᐃᐃΔⵠⵠⵠᐃ;
    ᐃΔ[1197] = ᐃΔ[1195];
    ᐃΔ[1196] = ᐃΔ[1195];
    ᐃΔ[1199] = [];
    ᐃΔ[1199][0] = ᐃᐃ.ᐃⲆⵠⵠᐃⵠΔ;
    ᐃΔ[1199][1] = ᐃᐃ.ⲆΔⲆⵠⵠⵠᐃ;
    ᐃΔ[1199][2] = ᐃᐃ.Δⵠᐃᐃᐃⵠᐃ;
    ᐃΔ[1201] = ᐃΔ[1199];
    ᐃΔ[1200] = ᐃΔ[1199];
    ᐃΔ[1203] = [];
    ᐃΔ[1203][0] = ᐃᐃ.Δⵠᐃⵠⵠⵠᐃ;
    ᐃΔ[1203][1] = ᐃᐃ.ⲆᐃⵠᐃᐃⲆⵠ;
    ᐃΔ[1203][2] = ᐃᐃ.ⵠⲆⲆᐃΔΔⵠ;
    ᐃΔ[1205] = ᐃΔ[1203];
    ᐃΔ[1204] = ᐃΔ[1203];
    ᐃΔ[1207] = [];
    ᐃΔ[1207][0] = ᐃᐃ.ΔⲆⲆᐃⲆⲆⲆ;
    ᐃΔ[1207][1] = ᐃᐃ.ⲆᐃΔⵠⵠᐃⵠ;
    ᐃΔ[1207][2] = ᐃᐃ.ⵠᐃΔⲆⲆⲆⵠ;
    ᐃΔ[1209] = ᐃΔ[1207];
    ᐃΔ[1208] = ᐃΔ[1207];
    ᐃΔ[1211] = [];
    ᐃΔ[1211][0] = ᐃᐃ.ⲆⵠⵠⵠΔⲆΔ;
    ᐃΔ[1211][1] = ᐃᐃ.ΔⲆΔΔᐃⲆᐃ;
    ᐃΔ[1211][2] = ᐃᐃ.ⲆⲆΔⵠⵠᐃⵠ;
    ᐃΔ[1213] = ᐃΔ[1211];
    ᐃΔ[1212] = ᐃΔ[1211];
    ᐃΔ[1215] = [];
    ᐃΔ[1215][0] = ᐃᐃ.ⲆⵠⵠⲆᐃΔᐃ;
    ᐃΔ[1215][1] = ᐃᐃ.ΔᐃᐃᐃΔΔΔ;
    ᐃΔ[1215][2] = ᐃᐃ.ⵠⵠⵠΔⲆⵠⵠ;
    ᐃΔ[1217] = ᐃΔ[1215];
    ᐃΔ[1216] = ᐃΔ[1215];
    ᐃΔ[518] = Kd(1, [{
      f: ac,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
    }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[519] = ᐃΔ[518];
    ᐃΔ[532] = Kd(1, [{
      f: wc,
      x: -2,
      y: -2,
      a: 1,
      r: -Math.PI / 5,
      c: ["#141414", "#c4a23a", "#816511"]
    }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[533] = ᐃΔ[532];
    ᐃΔ[521] = Kd(1, [{
      f: xp,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
    ᐃΔ[523] = Kd(1, [{
      f: xp,
      x: -2,
      y: -2,
      a: 1,
      r: 0,
      c: ["#120202", "#991616", "#750a0a", "#120202"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
    ᐃΔ[529] = Kd(1, [{
      f: Bp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#347f93", "#54a4ba"]
    }, {
      f: gp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
    }, {
      f: Nc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#a9e4ed", "#86d4e0"]
    }, {
      f: ep,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[530] = ᐃΔ[529];
    ᐃΔ[553] = Kd(1, [{
      f: dp,
      x: 45,
      y: 70,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[555] = ᐃΔ[553];
    ᐃΔ[541] = Kd(1, [{
      f: Ac,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
    }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[542] = ᐃΔ[541];
    ᐃΔ[779] = Kd(1, [{
      f: $c,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
    }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[780] = ᐃΔ[779];
    ᐃΔ[767] = Kd(1, [{
      f: Bc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#2a2938", "#242330", "#313041"]
    }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[768] = ᐃΔ[767];
    ᐃΔ[776] = Kd(1, [{
      f: gc,
      x: 0,
      y: 3,
      a: 1,
      r: 0,
      c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
    }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[777] = ᐃΔ[776];
    ᐃΔ[771] = Kd(1, [{
      f: gc,
      x: 0,
      y: 3,
      a: 1,
      r: 0,
      c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
    }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[772] = ᐃΔ[771];
    ᐃΔ[756] = Kd(1, [{
      f: Uc,
      x: 0,
      y: 10,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[758] = ᐃΔ[756];
    ᐃΔ[760] = Kd(1, [{
      f: Uc,
      x: 0,
      y: 10,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[762] = ᐃΔ[760];
    ᐃΔ[764] = Kd(1, [{
      f: Uc,
      x: 0,
      y: 10,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[770] = ᐃΔ[764];
    ᐃΔ[910] = Kd(1, [{
      f: _m,
      x: -1,
      y: 0,
      a: 1,
      r: 0,
      c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[912] = ᐃΔ[910];
    ᐃΔ[911] = ᐃΔ[910];
    ᐃΔ[732] = Kd(1, [{
      f: cp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
    }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[734] = ᐃΔ[732];
    ᐃΔ[563] = Kd(1, [{
      f: uc,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
    }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[564] = ᐃΔ[563];
    ᐃΔ[751] = Kd(1, [{
      f: up,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[252] = Kd(1, [{
      f: vc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[753] = Kd(1, [{
      f: up,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[253] = Kd(1, [{
      f: vc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
    }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[176] = Kd(1, [{
      f: Ip,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
    }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[177] = Kd(1, [{
      f: Ip,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
    }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[175] = Kd(1, [{
      f: Ip,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
    }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[616] = Kd(1, [{
      f: jc,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[618] = ᐃΔ[616];
    ᐃΔ[699] = Kd(1, [{
      f: jc,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[700] = ᐃΔ[699];
    ᐃΔ[702] = Kd(1, [{
      f: jc,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[704] = ᐃΔ[702];
    ᐃΔ[705] = Kd(1, [{
      f: jc,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[706] = ᐃΔ[705];
    ᐃΔ[420] = Kd(1, [{
      f: sc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[421] = ᐃΔ[420];
    ᐃΔ[826] = Kd(1, [{
      f: Oc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#252525", "#73583e", "#493425", "#7d6144"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[827] = ᐃΔ[826];
    ᐃΔ[429] = Kd(1, [{
      f: bp,
      x: 0,
      y: -2,
      a: 1,
      r: 0,
      c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[430] = ᐃΔ[429];
    ᐃΔ[432] = Kd(1, [{
      f: Pp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#dbce71", "#b29c32", "#c4bc51"]
    }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[433] = ᐃΔ[432];
    ᐃΔ[435] = Kd(1, [{
      f: qc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
    }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[436] = ᐃΔ[435];
    ᐃΔ[438] = Kd(1, [{
      f: zc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
    }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[439] = ᐃΔ[438];
    ᐃΔ[441] = Kd(1, [{
      f: Cc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#221e1b", "#ffffff", "#f6f0e7"]
    }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[442] = ᐃΔ[441];
    ᐃΔ[418] = Kd(1, [{
      f: dc,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#1d051e", "#c27add", "#cd98e5"]
    }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[609] = Kd(1, [{
      f: mc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#D7C393", "#a48c6c"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[142] = Kd(1, [{
      f: Sc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#93CBCE", "#E9F6F6"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[140] = Kd(1, [{
      f: mc,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#866432", "#6b4f25"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[180] = Kd(1, [{
      f: Yc,
      x: 3,
      y: 2,
      a: 1,
      r: 0,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[181] = Kd(1, [{
      f: fp,
      x: 3,
      y: 2,
      a: 1,
      r: 0,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
    }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[784] = ᐃΔ[180];
    ᐃΔ[785] = ᐃΔ[181];
    ᐃΔ[789] = Kd(1, [{
      f: wp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
    }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[791] = ᐃΔ[789];
    ᐃΔ[613] = Kd(1, [{
      f: Ic,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
    }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[612] = Kd(1, [{
      f: Tp,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 5,
      c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
    }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[715] = ᐃΔ[613];
    ᐃΔ[611] = ᐃΔ[612];
    ᐃΔ[634] = Kd(1, [{
      f: Eu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[635] = ᐃΔ[634];
    ᐃΔ[200] = Kd(1, [{
      f: Mu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[866] = Kd(1, [{
      f: Gu,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
    }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[143] = Kd(1, [{
      f: Ec,
      x: 0,
      y: -2,
      a: 1,
      r: 0,
      c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[690] = ᐃΔ[143];
    ᐃΔ[662] = Kd(1, [{
      f: hm,
      x: -3,
      y: -5,
      a: 1,
      r: 0,
      c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
    }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[664] = Kd(1, [{
      f: gm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1d051e", "#42261A", "#281818"]
    }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[666] = ᐃΔ[664];
    ᐃΔ[649] = Kd(1, [{
      f: Qu,
      x: -3,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
    }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[650] = ᐃΔ[649];
    ᐃΔ[674] = Kd(1, [{
      f: Wd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
    }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[646] = Kd(1, [{
      f: sm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
    }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
    ᐃΔ[647] = ᐃΔ[646];
    ᐃΔ[685] = Kd(1, [{
      f: yp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[684] = ᐃΔ[685];
    ᐃΔ[870] = Kd(1, [{
      f: yd,
      x: -5,
      y: -5,
      a: 1,
      r: 0,
      c: ["#e2d63b", "#ee71a9", "#42b672"]
    }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[871] = ᐃΔ[870];
    ᐃΔ[605] = Kd(1, [{
      f: mp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
    }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[604] = ᐃΔ[605];
    ᐃΔ[842] = Kd(1, [{
      f: zd,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
    }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[843] = ᐃΔ[842];
    ᐃΔ[652] = Kd(1, [{
      f: Xm,
      x: -1,
      y: 0,
      a: 1,
      r: -Math.PI / 5,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
    }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
    ᐃΔ[654] = ᐃΔ[652];
    ᐃΔ[626] = Kd(1, [{
      f: Xm,
      x: -1,
      y: 0,
      a: 1,
      r: -Math.PI / 5,
      c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
    }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[627] = ᐃΔ[626];
    ᐃΔ[629] = Kd(1, [{
      f: ip,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[196] = Kd(1, [{
      f: ku,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
    }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[898] = ᐃΔ[196];
    ᐃΔ[659] = Kd(1, [{
      f: rm,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
    }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[660] = ᐃΔ[659];
    ᐃΔ[145] = Kd(1, [{
      f: Fd,
      x: -2,
      y: -8,
      a: 1,
      r: 0,
      c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
    }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
    ᐃΔ[730] = ᐃΔ[145];
    ᐃΔ[566] = [];
    ᐃΔ[566][0] = ᐃᐃ.ⲆⵠⵠⵠⲆⵠⵠ;
    ᐃΔ[566][1] = ᐃᐃ.ᐃⲆᐃᐃᐃΔΔ;
    ᐃΔ[566][2] = ᐃᐃ.ⵠⵠΔᐃᐃΔⵠ;
    ᐃΔ[567] = ᐃΔ[566];
    ᐃΔ[568] = ᐃΔ[566];
    ᐃΔ[877] = [];
    ᐃΔ[877][0] = ᐃᐃ.ⵠΔⵠⲆⲆⲆΔ;
    ᐃΔ[877][1] = ᐃᐃ.ᐃΔΔᐃⲆⵠΔ;
    ᐃΔ[877][2] = ᐃᐃ.ⵠᐃⲆⲆⲆⵠⵠ;
    ᐃΔ[879] = ᐃΔ[877];
    ᐃΔ[878] = ᐃΔ[877];
    ᐃΔ[933] = ᐃΔ[932];
    ᐃΔ[934] = ᐃΔ[932];
    ᐃΔ[932] = [];
    ᐃΔ[932][0] = ᐃᐃ.ΔⵠⲆⲆⲆΔⵠ;
    ᐃΔ[932][1] = ᐃᐃ.ΔⲆⵠⲆᐃⵠᐃ;
    ᐃΔ[932][2] = ᐃᐃ.ᐃΔΔⵠⲆⲆⵠ;
    ᐃΔ[933] = ᐃΔ[932];
    ᐃΔ[934] = ᐃΔ[932];
    ᐃΔ[943] = [];
    ᐃΔ[943][0] = ᐃᐃ.ⲆᐃΔᐃᐃⵠᐃ;
    ᐃΔ[943][1] = ᐃᐃ.ⲆΔⵠⲆⵠΔᐃ;
    ᐃΔ[943][2] = ᐃᐃ.ᐃⵠⲆᐃᐃⲆⵠ;
    ᐃΔ[944] = ᐃΔ[943];
    ᐃΔ[945] = ᐃΔ[943];
    ᐃΔ[921] = [];
    ᐃΔ[921][0] = ᐃᐃ.ⲆⲆΔᐃΔΔᐃ;
    ᐃΔ[921][1] = ᐃᐃ.ΔⲆⵠᐃⵠⵠΔ;
    ᐃΔ[921][2] = ᐃᐃ.ⵠⵠⲆⵠᐃⲆΔ;
    ᐃΔ[922] = ᐃΔ[921];
    ᐃΔ[923] = ᐃΔ[921];
    ᐃΔ[925] = [];
    ᐃΔ[925][0] = ᐃᐃ.ⵠⲆⵠⲆΔΔᐃ;
    ᐃΔ[925][1] = ᐃᐃ.ⲆⲆΔⵠⲆᐃⲆ;
    ᐃΔ[925][2] = ᐃᐃ.ᐃⲆᐃΔⲆΔᐃ;
    ᐃΔ[926] = ᐃΔ[925];
    ᐃΔ[927] = ᐃΔ[925];
    ᐃΔ[929] = [];
    ᐃΔ[929][0] = ᐃᐃ.ⵠⲆΔΔᐃⵠⲆ;
    ᐃΔ[929][1] = ᐃᐃ.ⵠΔⲆⵠⲆᐃⵠ;
    ᐃΔ[929][2] = ᐃᐃ.ᐃᐃΔᐃⲆΔᐃ;
    ᐃΔ[930] = ᐃΔ[929];
    ᐃΔ[931] = ᐃΔ[929];
    ᐃΔ[946] = [];
    ᐃΔ[946][0] = ᐃᐃ.ΔⵠᐃᐃⵠⵠⲆ;
    ᐃΔ[946][1] = ᐃᐃ.ΔΔᐃⲆΔⵠᐃ;
    ᐃΔ[946][2] = ᐃᐃ.ⵠΔΔᐃⲆᐃΔ;
    ᐃΔ[947] = ᐃΔ[946];
    ᐃΔ[948] = ᐃΔ[946];
    ᐃΔ[735] = [];
    ᐃΔ[735][0] = ᐃᐃ.ⲆᐃΔᐃᐃⲆΔ;
    ᐃΔ[735][1] = ᐃᐃ.ΔΔΔΔᐃⵠⵠ;
    ᐃΔ[735][2] = ᐃᐃ.ⲆᐃⵠⵠⲆⲆⲆ;
    ᐃΔ[737] = ᐃΔ[735];
    ᐃΔ[736] = ᐃΔ[735];
    ᐃΔ[1164] = [];
    ᐃΔ[1164][0] = ᐃᐃ.ⵠⵠⵠΔΔⵠⵠ;
    ᐃΔ[1164][1] = ᐃᐃ.ⵠⲆΔⵠⲆⵠⵠ;
    ᐃΔ[1164][2] = ᐃᐃ.ΔⵠᐃⵠΔⵠⲆ;
    ᐃΔ[ns.ⵠⵠⲆΔᐃⲆⲆⲆΔ] = ᐃΔ[1164];
    ᐃΔ[1165] = ᐃΔ[1164];
    ᐃΔ[738] = [];
    ᐃΔ[738][0] = ᐃᐃ.ᐃⵠᐃΔⵠΔᐃ;
    ᐃΔ[738][1] = ᐃᐃ.ⲆΔᐃᐃⲆΔᐃ;
    ᐃΔ[738][2] = ᐃᐃ.ⲆΔΔⲆⵠⲆᐃ;
    ᐃΔ[740] = ᐃΔ[738];
    ᐃΔ[739] = ᐃΔ[738];
    ᐃΔ[741] = [];
    ᐃΔ[741][0] = ᐃᐃ.ΔᐃᐃΔΔⵠᐃ;
    ᐃΔ[741][1] = ᐃᐃ.ᐃᐃΔᐃⵠⵠⲆ;
    ᐃΔ[741][2] = ᐃᐃ.ᐃⵠΔΔᐃᐃΔ;
    ᐃΔ[743] = ᐃΔ[741];
    ᐃΔ[742] = ᐃΔ[741];
    ᐃΔ[938] = [];
    ᐃΔ[938][0] = ᐃᐃ.ⲆⵠⲆⲆⵠΔⵠ;
    ᐃΔ[938][1] = ᐃᐃ.ᐃᐃΔᐃᐃᐃⲆ;
    ᐃΔ[938][2] = ᐃᐃ.ΔᐃᐃⲆᐃⲆⲆ;
    ᐃΔ[939] = ᐃΔ[938];
    ᐃΔ[936] = [];
    ᐃΔ[936][0] = ᐃᐃ.ΔⲆΔⵠΔᐃⵠ;
    ᐃΔ[936][1] = ᐃᐃ.ᐃΔⲆᐃΔⲆᐃ;
    ᐃΔ[936][2] = ᐃᐃ.ⲆⵠᐃⵠΔᐃⵠ;
    ᐃΔ[937] = ᐃΔ[936];
    ᐃΔ[617] = ᐃΔ[616];
    ᐃΔ[701] = ᐃΔ[699];
    ᐃΔ[703] = ᐃΔ[702];
    ᐃΔ[707] = ᐃΔ[705];
    ᐃΔ[348] = ᐃΔ[311];
    ᐃΔ[633] = ᐃΔ[631];
    ᐃΔ[645] = ᐃΔ[644];
    ᐃΔ[640] = ᐃΔ[639];
    ᐃΔ[273] = ᐃΔ[309];
    ᐃΔ[590] = ᐃΔ[252];
    ᐃΔ[752] = ᐃΔ[751];
    ᐃΔ[591] = ᐃΔ[253];
    ᐃΔ[754] = ᐃΔ[753];
    ᐃΔ[276] = ᐃΔ[328];
    ᐃΔ[863] = ᐃΔ[865];
    ᐃΔ[862] = ᐃΔ[860];
    ᐃΔ[831] = ᐃΔ[829];
    ᐃΔ[340] = ᐃΔ[261];
    ᐃΔ[596] = ᐃΔ[594];
    ᐃΔ[345] = ᐃΔ[292];
    ᐃΔ[346] = ᐃΔ[293];
    ᐃΔ[457] = ᐃΔ[455];
    ᐃΔ[274] = ᐃΔ[313];
    ᐃΔ[341] = ᐃΔ[312];
    ᐃΔ[272] = ᐃΔ[258];
    ᐃΔ[344] = ᐃΔ[296];
    ᐃΔ[459] = ᐃΔ[458];
    ᐃΔ[342] = ᐃΔ[315];
    ᐃΔ[270] = ᐃΔ[297];
    ᐃΔ[271] = ᐃΔ[298];
    ᐃΔ[343] = ᐃΔ[316];
    ᐃΔ[269] = ᐃΔ[277];
    ᐃΔ[358] = ᐃΔ[310];
    ᐃΔ[354] = ᐃΔ[329];
    ᐃΔ[356] = ᐃΔ[331];
    ᐃΔ[355] = ᐃΔ[330];
    ᐃΔ[494] = ᐃΔ[492];
    ᐃΔ[349] = ᐃΔ[317];
    ᐃΔ[350] = ᐃΔ[319];
    ᐃΔ[275] = ᐃΔ[300];
    ᐃΔ[351] = ᐃΔ[323];
    ᐃΔ[353] = ᐃΔ[305];
    ᐃΔ[514] = ᐃΔ[513];
    ᐃΔ[352] = ᐃΔ[303];
    ᐃΔ[520] = ᐃΔ[518];
    ᐃΔ[534] = ᐃΔ[532];
    ᐃΔ[531] = ᐃΔ[529];
    ᐃΔ[522] = ᐃΔ[521];
    ᐃΔ[524] = ᐃΔ[523];
    ᐃΔ[565] = ᐃΔ[563];
    ᐃΔ[554] = ᐃΔ[553];
    ᐃΔ[357] = ᐃΔ[335];
    ᐃΔ[359] = ᐃΔ[337];
    ᐃΔ[339] = Rq(function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 118;
      d.height = a * 129;
      e.save();
      e.translate(a * 90, a * 90);
      ad(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
      e.restore();
      od(e, c[0], c[1], 4);
      e.save();
      ad(e, a * 30, a * 115, a * 60, a * 5, a * 15);
      e.restore();
      od(e, c[2], c[3], 4);
      e.save();
      ad(e, a * 50, a * 117, a * 20, a * 10, a * 15);
      e.restore();
      od(e, c[2]);
      return d;
    }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
    ᐃΔ[366] = Kd(0.5, [{
      f: Sm,
      x: 0,
      y: 2,
      a: 1,
      r: 0,
      c: ["#ffffff"]
    }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
    ᐃΔ[382] = ᐃΔ[361];
    ᐃΔ[383] = ᐃΔ[362];
    ᐃΔ[384] = ᐃΔ[364];
    ᐃΔ[497] = ᐃΔ[495];
    ᐃΔ[385] = ᐃΔ[392];
    ᐃΔ[774] = ᐃΔ[178];
    ᐃΔ[775] = ᐃΔ[179];
    ᐃΔ[386] = ᐃΔ[368];
    ᐃΔ[625] = ᐃΔ[624];
    ᐃΔ[394] = ᐃΔ[393];
    ᐃΔ[1163] = ᐃΔ[1162];
    ᐃΔ[506] = ᐃΔ[505];
    ᐃΔ[387] = ᐃΔ[369];
    ᐃΔ[504] = ᐃΔ[502];
    ᐃΔ[388] = ᐃΔ[372];
    ᐃΔ[389] = ᐃΔ[375];
    ᐃΔ[390] = ᐃΔ[378];
    ᐃΔ[501] = ᐃΔ[499];
    ᐃΔ[391] = ᐃΔ[381];
    ᐃΔ[403] = ᐃΔ[401];
    ᐃΔ[397] = ᐃΔ[395];
    ᐃΔ[400] = ᐃΔ[398];
    ᐃΔ[406] = ᐃΔ[404];
    ᐃΔ[474] = ᐃΔ[472];
    ᐃΔ[875] = ᐃΔ[874];
    ᐃΔ[552] = ᐃΔ[550];
    ᐃΔ[710] = ᐃΔ[709];
    ᐃΔ[479] = ᐃΔ[477];
    ᐃΔ[482] = ᐃΔ[480];
    ᐃΔ[485] = ᐃΔ[483];
    ᐃΔ[488] = ᐃΔ[486];
    ᐃΔ[410] = ᐃΔ[408];
    ᐃΔ[719] = ᐃΔ[717];
    ᐃΔ[422] = ᐃΔ[420];
    ᐃΔ[431] = ᐃΔ[429];
    ᐃΔ[434] = ᐃΔ[432];
    ᐃΔ[437] = ᐃΔ[435];
    ᐃΔ[543] = ᐃΔ[541];
    ᐃΔ[733] = ᐃΔ[732];
    ᐃΔ[440] = ᐃΔ[438];
    ᐃΔ[443] = ᐃΔ[441];
    ᐃΔ[446] = ᐃΔ[418];
    ᐃΔ[606] = ᐃΔ[605];
    ᐃΔ[844] = ᐃΔ[842];
    ᐃΔ[683] = ᐃΔ[685];
    ᐃΔ[610] = ᐃΔ[609];
    ᐃΔ[689] = ᐃΔ[143];
    ᐃΔ[686] = ᐃΔ[142];
    ᐃΔ[682] = ᐃΔ[140];
    ᐃΔ[615] = ᐃΔ[613];
    ᐃΔ[614] = ᐃΔ[612];
    ᐃΔ[628] = ᐃΔ[626];
    ᐃΔ[630] = ᐃΔ[629];
    ᐃΔ[636] = ᐃΔ[634];
    ᐃΔ[868] = ᐃΔ[200];
    ᐃΔ[867] = ᐃΔ[866];
    ᐃΔ[648] = ᐃΔ[646];
    ᐃΔ[651] = ᐃΔ[649];
    ᐃΔ[653] = ᐃΔ[652];
    ᐃΔ[661] = ᐃΔ[659];
    ᐃΔ[898] = ᐃΔ[196];
    ᐃΔ[663] = ᐃΔ[662];
    ᐃΔ[665] = ᐃΔ[664];
    ᐃΔ[675] = ᐃΔ[674];
    ᐃΔ[731] = ᐃΔ[145];
    ᐃΔ[757] = ᐃΔ[756];
    ᐃΔ[759] = ᐃΔ[176];
    ᐃΔ[761] = ᐃΔ[760];
    ᐃΔ[763] = ᐃΔ[177];
    ᐃΔ[765] = ᐃΔ[764];
    ᐃΔ[766] = ᐃΔ[175];
    ᐃΔ[769] = ᐃΔ[767];
    ᐃΔ[773] = ᐃΔ[771];
    ᐃΔ[778] = ᐃΔ[776];
    ᐃΔ[781] = ᐃΔ[779];
    ᐃΔ[787] = ᐃΔ[181];
    ᐃΔ[786] = ᐃΔ[180];
    ᐃΔ[790] = ᐃΔ[789];
    ᐃΔ[801] = ᐃΔ[800];
    ᐃΔ[810] = ᐃΔ[808];
    ᐃΔ[836] = ᐃΔ[834];
    ᐃΔ[847] = ᐃΔ[845];
    ᐃΔ[828] = ᐃΔ[826];
  }
  function op(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 100;
    c.height = a * 100;
    d.globalAlpha = 0.5;
    d.fillStyle = b[0];
    d.fillRect(0, 0, c.width, c.height);
    return c;
  }
  function ap(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 573;
    d.height = a * 350;
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 336, a * 72);
      e.bezierCurveTo(a * 366, a * 15, a * 426, a * 36, a * 497, a * 83);
      e.bezierCurveTo(a * 522, a * 85, a * 522, a * 85, a * 547, a * 87);
      e.bezierCurveTo(a * 476.5, a * 205, a * 476.5, a * 205, a * 406, a * 323);
      e.bezierCurveTo(a * 297.5, a * 319, a * 297.5, a * 319, a * 189, a * 315);
      e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 243);
      e.bezierCurveTo(a * 92, a * 140, a * 92, a * 140, a * 162, a * 37);
      e.bezierCurveTo(a * 173, a * 39, a * 173, a * 39, a * 184, a * 41);
      e.bezierCurveTo(a * 185, a * 38.5, a * 185, a * 38.5, a * 186, a * 36);
      e.bezierCurveTo(a * 323, a * 13, a * 322, a * 25, a * 337, a * 74);
      e.closePath();
      od(e, b[4], b[4], a * 35);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 168, a * 42);
    e.bezierCurveTo(a * 255, a * 60, a * 255, a * 60, a * 342, a * 78);
    e.bezierCurveTo(a * 443, a * 81.5, a * 443, a * 81.5, a * 544, a * 85);
    e.bezierCurveTo(a * 475, a * 204.5, a * 475, a * 204.5, a * 406, a * 324);
    e.bezierCurveTo(a * 297.5, a * 320, a * 297.5, a * 320, a * 189, a * 316);
    e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 242);
    e.closePath();
    od(e, b[0], b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188, a * 41);
    e.bezierCurveTo(a * 308, a * 15, a * 325, a * 18, a * 337, a * 66);
    e.bezierCurveTo(a * 191, a * 305, a * 196, a * 286, a * 184, a * 307);
    e.bezierCurveTo(a * 175, a * 250, a * 90, a * 254, a * 52, a * 241);
    e.closePath();
    od(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 336, a * 71);
    e.bezierCurveTo(a * 375, a * 8, a * 429, a * 50, a * 518, a * 92);
    e.bezierCurveTo(a * 455, a * 199.5, a * 455, a * 199.5, a * 392, a * 307);
    e.bezierCurveTo(a * 227, a * 301, a * 261, a * 255, a * 188, a * 308);
    e.closePath();
    od(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 357, a * 76);
    e.bezierCurveTo(a * 390, a * 67, a * 414, a * 86, a * 435, a * 104);
    e.bezierCurveTo(a * 417, a * 135, a * 417, a * 135, a * 399, a * 166);
    e.bezierCurveTo(a * 352, a * 140, a * 345, a * 139, a * 319, a * 142);
    e.closePath();
    od(e, b[3], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 309, a * 168);
    e.bezierCurveTo(a * 345, a * 163, a * 372, a * 180, a * 412, a * 203);
    od(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 54);
    e.bezierCurveTo(a * 305, a * 44, a * 307, a * 51, a * 311, a * 64);
    e.bezierCurveTo(a * 270.5, a * 129.5, a * 270.5, a * 129.5, a * 230, a * 195);
    e.bezierCurveTo(a * 221, a * 175, a * 203, a * 171, a * 186, a * 172);
    e.closePath();
    od(e, b[3], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 292, a * 198);
    e.bezierCurveTo(a * 328, a * 191, a * 364, a * 211, a * 401, a * 237);
    od(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 245, a * 68);
    e.bezierCurveTo(a * 210, a * 72, a * 210, a * 72, a * 189, a * 69);
    od(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 96);
    e.bezierCurveTo(a * 196, a * 97, a * 193, a * 97, a * 177, a * 92);
    od(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 124);
    e.bezierCurveTo(a * 179, a * 123, a * 177, a * 124, a * 161, a * 119);
    od(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 183);
    e.bezierCurveTo(a * 184, a * 185, a * 203, a * 198, a * 219, a * 221);
    od(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 213);
    e.bezierCurveTo(a * 161, a * 214, a * 193, a * 227, a * 201, a * 249);
    od(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 399, a * 257);
    e.bezierCurveTo(a * 287, a * 215, a * 280, a * 215, a * 263, a * 222);
    e.bezierCurveTo(a * 253, a * 238, a * 247, a * 245, a * 243, a * 254);
    e.bezierCurveTo(a * 267, a * 236, a * 292, a * 263, a * 377, a * 284);
    od(e, b[3], b[3], a * 12);
    return d;
  }
  if (oc.ⵠΔⲆΔⵠᐃᐃⲆΔ) {
    var rp = oc.Math.acos;
    oc.Math.acos = oc.Math.asin;
    oc.Math.asin = rp;
    var sp = oc.Math.acos;
    oc.Math.acos = oc.Math.asin;
    oc.Math.asin = sp;
  }
  function hp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 272;
    d.height = a * 264;
    e.translate(0, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    od(e, c[0]);
    e.translate(0, a * -20);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    od(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.99996948242188, a * 116.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 74.18402099609375, a * 109.99996948242188, a * 63.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 69.18402099609375, a * 125.99996948242188, a * 87.18402099609375, a * 137.99996948242188, a * 112.18402099609375);
    e.bezierCurveTo(a * 142.99996948242188, a * 84.18402099609375, a * 143.99996948242188, a * 76.18402099609375, a * 153.99996948242188, a * 62.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 79.18402099609375, a * 149.99996948242188, a * 110.18402099609375, a * 151.99996948242188, a * 117.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 104.18402099609375, a * 180.99996948242188, a * 91.18402099609375, a * 191.99996948242188, a * 91.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 102.18402099609375, a * 180.99996948242188, a * 106.18402099609375, a * 160.99996948242188, a * 124.18402099609375);
    e.bezierCurveTo(a * 190.99996948242188, a * 121.18402099609375, a * 199.99996948242188, a * 120.18402099609375, a * 207.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 199.99996948242188, a * 129.18402099609375, a * 181.99996948242188, a * 132.18402099609375, a * 160.99996948242188, a * 135.18402099609375);
    e.bezierCurveTo(a * 179.99996948242188, a * 142.18402099609375, a * 193.99996948242188, a * 151.18402099609375, a * 196.99996948242188, a * 156.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 156.18402099609375, a * 163.99996948242188, a * 149.18402099609375, a * 152.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 157.99996948242188, a * 155.18402099609375, a * 165.99996948242188, a * 176.18402099609375, a * 169.99996948242188, a * 195.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 190.18402099609375, a * 147.99996948242188, a * 167.18402099609375, a * 139.99996948242188, a * 153.18402099609375);
    e.bezierCurveTo(a * 137.99996948242188, a * 167.18402099609375, a * 126.99996948242188, a * 194.18402099609375, a * 119.99996948242188, a * 204.18402099609375);
    e.bezierCurveTo(a * 117.99996948242188, a * 186.18402099609375, a * 123.99996948242188, a * 165.18402099609375, a * 126.99996948242188, a * 149.18402099609375);
    e.bezierCurveTo(a * 110.99996948242188, a * 163.18402099609375, a * 103.99996948242188, a * 170.18402099609375, a * 82.99996948242188, a * 177.18402099609375);
    e.bezierCurveTo(a * 90.99996948242188, a * 162.18402099609375, a * 99.99996948242188, a * 153.18402099609375, a * 117.99996948242188, a * 140.18402099609375);
    e.bezierCurveTo(a * 97.99996948242188, a * 140.18402099609375, a * 83.99996948242188, a * 139.18402099609375, a * 65.99996948242188, a * 132.18402099609375);
    e.bezierCurveTo(a * 77.99996948242188, a * 127.18402099609375, a * 95.99996948242188, a * 127.18402099609375, a * 115.99996948242188, a * 127.18402099609375);
    e.bezierCurveTo(a * 91.99996948242188, a * 113.18402099609375, a * 84.99996948242188, a * 107.18402099609375, a * 76.99996948242188, a * 96.18402099609375);
    e.bezierCurveTo(a * 94.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 109.18402099609375, a * 123.99996948242188, a * 116.18402099609375);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.99996948242188, a * 119.18402099609375);
    e.bezierCurveTo(a * 141.99996948242188, a * 119.18402099609375, a * 145.99996948242188, a * 116.18402099609375, a * 147.99996948242188, a * 109.18402099609375);
    e.bezierCurveTo(a * 151.99996948242188, a * 107.18402099609375, a * 159.99996948242188, a * 107.18402099609375, a * 156.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 140.18402099609375, a * 142.99996948242188, a * 149.18402099609375, a * 132.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 119.99996948242188, a * 144.18402099609375, a * 113.99996948242188, a * 122.18402099609375, a * 131.99996948242188, a * 119.18402099609375);
    e.closePath();
    od(e, c[4], c[5], a * 6);
    return d;
  }
  function gp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * 2, a * 1);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    ad(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
    e.restore();
    od(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    od(e, c[2]);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    ad(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
    e.restore();
    od(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    od(e, c[2]);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    ad(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    e.restore();
    od(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    od(e, c[2]);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    ad(e, a * -18, a * -18, a * 36, a * 36, a * 7);
    e.restore();
    od(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    od(e, c[2]);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    ad(e, a * -18, a * -19, a * 36, a * 38, a * 7);
    e.restore();
    od(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    od(e, c[2]);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    ad(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
    e.restore();
    od(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    od(e, c[2]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    ad(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
    e.restore();
    od(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    od(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    ad(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
    e.restore();
    od(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    od(e, dg, c[4], a * 5);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    ad(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
    e.restore();
    od(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    od(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    ad(e, a * -18, a * -18, a * 36, a * 36, a * 7);
    e.restore();
    od(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    od(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    ad(e, a * -18, a * -19, a * 36, a * 38, a * 7);
    e.restore();
    od(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    od(e, da, c[4], a * 5);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    ad(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
    e.restore();
    od(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    od(e, os, c[4], a * 5);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 98, a * 99);
    ud(e, 6, a * 70.28669492273468, a * 10);
    e.restore();
    od(e, c[2]);
    e.save();
    e.translate(a * 98, a * 99);
    ud(e, 6, a * 56.455940020351264, a * 10);
    e.restore();
    od(e, c[2]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 98, a * 99);
    ud(e, 6, a * 70.28669492273468, a * 10);
    e.restore();
    od(e, c[5], c[6], a * 5);
    e.save();
    e.translate(a * 98, a * 99);
    ud(e, 6, a * 56.455940020351264, a * 10);
    e.restore();
    od(e, c[7], c[8], a * 7);
    return d;
  }
  function lp(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 450;
    f.height = b * 260;
    var a = Fc(b * 1, true, d);
    g.drawImage(a, b * 0, b * 0);
    if (e == 1) {
      g.translate(b * 100, b * 0);
      hd(g, b * 113, b * 120, b * 66);
      od(g, sk, d[4], b * 13);
      a = su(b * 0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
      g.rotate(0.7);
      g.drawImage(a, b * 133, b * -64);
      g.rotate(-0.7);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      od(g, undefined, d[4], b * 13);
    } else if (e == 2) {
      g.translate(b * 100, b * 0);
      hd(g, b * 113, b * 120, b * 66);
      od(g, undefined, d[4], b * 13);
      g.translate(b * 30, b * 40);
      g.save();
      g.translate(b * 83.5, b * 66.5);
      ad(g, b * -40.5, b * -29.5, b * 81, b * 59, b * 15);
      g.restore();
      od(g, "#dff2f7", "#187484", b * 7);
      hd(g, b * 22, b * 82, b * 12);
      od(g, "#dff2f7", "#187484", b * 7);
      hd(g, b * 145, b * 82, b * 12);
      od(g, "#dff2f7", "#187484", b * 7);
      a = Nu(b * 0.5, true, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 10, b * 85);
      a = Nu(b * 0.5, Tk, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 50, b * 85);
      a = Nu(b * 0.5, Tk, ["#80500b", "#7c4908"]);
      g.drawImage(a, b * 90, b * 85);
      a = Fu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 90, b * 105);
      a = Fu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 90, b * 105);
      a = Fu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 30, b * 125);
      a = Fu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 50, b * 115);
      a = Fu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 30, b * 100);
      a = Fu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 80, b * 120);
      a = Fu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 110, b * 125);
      a = Fu(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(a, b * 120, b * 105);
    } else if (e == 3) {
      g.translate(b * 100, b * 0);
      hd(g, b * 113, b * 120, b * 66);
      od(g, tq, d[4], b * 13);
      g.translate(b * 40, b * 50);
      g.save();
      g.translate(b * 71, b * 69);
      ad(g, b * -30, b * -42, b * 60, b * 84, b * 10);
      g.restore();
      od(g, md, d[5], b * 4);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 42, b * 28);
      g.bezierCurveTo(b * 60, b * 31, b * 60, b * 31, b * 78, b * 34);
      g.bezierCurveTo(b * 82, b * 34, b * 84, b * 37, b * 83, b * 45);
      g.bezierCurveTo(b * 83, b * 80, b * 83, b * 80, b * 83, b * 115);
      g.bezierCurveTo(b * 83, b * 120, b * 80, b * 122, b * 73, b * 120);
      g.bezierCurveTo(b * 42, b * 111, b * 43, b * 109, b * 41, b * 102);
      g.bezierCurveTo(b * 41, b * 71, b * 41, b * 71, b * 41, b * 40);
      g.closePath();
      od(g, d[5], d[5], b * 4);
      g.translate(b * -40, b * -50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      od(g, Yh, d[4], b * 13);
    } else if (e == 4) {
      g.scale(1, 1);
      g.translate(b * 70, b * 50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 23, b * 6);
      g.bezierCurveTo(b * 25.5, b * 56, b * 25.5, b * 56, b * 28, b * 106);
      od(g, undefined, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 59, b * 10);
      g.bezierCurveTo(b * 61, b * 51.5, b * 61, b * 51.5, b * 63, b * 93);
      od(g, ct, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 7, b * 55);
      g.bezierCurveTo(b * 33.5, b * 55, b * 33.5, b * 55, b * 60, b * 55);
      od(g, Nl, d[5], b * 14);
      g.translate(b * 10, b * 0);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 123, b * 16);
      g.bezierCurveTo(b * 103, b * 16.5, b * 103, b * 16.5, b * 83, b * 17);
      g.bezierCurveTo(b * 83.5, b * 61, b * 83.5, b * 61, b * 84, b * 105);
      g.bezierCurveTo(b * 106, b * 105, b * 106, b * 105, b * 128, b * 105);
      od(g, Wb, d[5], b * 14);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 72, b * 63);
      g.bezierCurveTo(b * 88.5, b * 62.5, b * 88.5, b * 62.5, b * 105, b * 62);
      od(g, undefined, d[5], b * 14);
      g.translate(b * 10, b * 10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 141, b * 8);
      g.bezierCurveTo(b * 143, b * 50, b * 143, b * 50, b * 145, b * 92);
      g.bezierCurveTo(b * 169, b * 88.5, b * 169, b * 88.5, b * 193, b * 85);
      od(g, os, d[5], b * 14);
      g.translate(b * 10, b * -10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 205, b * 124);
      g.bezierCurveTo(b * 205, b * 69, b * 205, b * 69, b * 205, b * 14);
      g.bezierCurveTo(b * 239, b * 15, b * 250, b * 37, b * 249, b * 49);
      g.bezierCurveTo(b * 251, b * 65, b * 242, b * 76, b * 206, b * 75);
      od(g, tq, d[5], b * 14);
    }
    return f;
  }
  function up(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    od(e, undefined, c[2], a * 40);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    od(e, undefined, c[1], a * 20);
    e.globalAlpha = 0.8;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    od(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51.000030517578125, a * 37.9886474609375);
    e.bezierCurveTo(a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 85.9886474609375);
    e.bezierCurveTo(a * 75.50003051757812, a * 85.9886474609375, a * 75.50003051757812, a * 85.9886474609375, a * 100.00003051757812, a * 85.9886474609375);
    e.bezierCurveTo(a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 37.9886474609375);
    e.bezierCurveTo(a * 76.00003051757812, a * 37.9886474609375, a * 76.00003051757812, a * 37.9886474609375, a * 52.000030517578125, a * 37.9886474609375);
    e.closePath();
    od(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99.00003051757812, a * 38.9886474609375);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.9886474609375, a * 93.50003051757812, a * 44.9886474609375, a * 88.00003051757812, a * 50.9886474609375);
    e.bezierCurveTo(a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 93.9886474609375);
    e.bezierCurveTo(a * 94.00003051757812, a * 90.4886474609375, a * 94.00003051757812, a * 90.4886474609375, a * 100.00003051757812, a * 86.9886474609375);
    e.closePath();
    od(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.00003051757812, a * 49.625);
    e.bezierCurveTo(a * 61.000030517578125, a * 49.625, a * 61.000030517578125, a * 49.625, a * 35.000030517578125, a * 49.625);
    e.bezierCurveTo(a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 91.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 91.625, a * 60.500030517578125, a * 91.625, a * 86.00003051757812, a * 91.625);
    e.bezierCurveTo(a * 86.50003051757812, a * 70.625, a * 86.50003051757812, a * 70.625, a * 87.00003051757812, a * 49.625);
    e.closePath();
    od(e, c[1], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 36.625);
    e.bezierCurveTo(a * 73.00003051757812, a * 37.125, a * 73.00003051757812, a * 37.125, a * 99.00003051757812, a * 37.625);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.125, a * 93.50003051757812, a * 44.125, a * 88.00003051757812, a * 50.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 50.125, a * 60.500030517578125, a * 50.125, a * 33.000030517578125, a * 49.625);
    e.closePath();
    od(e, c[1], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53.000030517578125, a * 52.625);
    e.bezierCurveTo(a * 40.000030517578125, a * 54.625, a * 39.000030517578125, a * 59.625, a * 40.000030517578125, a * 67.625);
    e.bezierCurveTo(a * 45.000030517578125, a * 59.625, a * 48.000030517578125, a * 58.625, a * 54.000030517578125, a * 53.625);
    e.closePath();
    od(e, c[3]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    od(e, oh, c[3], a * 4);
    return d;
  }
  function bp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 106;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    od(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38, a * 46);
    e.bezierCurveTo(a * 52, a * 37, a * 69, a * 36, a * 85, a * 36);
    e.bezierCurveTo(a * 118, a * 38, a * 129, a * 42, a * 137, a * 48);
    e.bezierCurveTo(a * 135, a * 45, a * 135, a * 45, a * 133, a * 42);
    e.bezierCurveTo(a * 124, a * 32, a * 116, a * 28, a * 88, a * 25);
    e.bezierCurveTo(a * 47, a * 28, a * 40, a * 32, a * 36, a * 44);
    e.closePath();
    od(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    od(e, undefined, c[2], a * 4);
    e.translate(0, a * -3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    od(e, c[10], c[10], a * 4);
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 19);
    e.bezierCurveTo(a * 24, a * 35, a * 35, a * 42, a * 42, a * 44);
    e.bezierCurveTo(a * 43, a * 51, a * 43, a * 48, a * 43, a * 56);
    e.bezierCurveTo(a * 25, a * 47, a * 17, a * 36, a * 23, a * 20);
    e.closePath();
    od(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * 18);
    e.bezierCurveTo(a * 159, a * 44, a * 139, a * 52, a * 130, a * 55);
    e.bezierCurveTo(a * 129, a * 48, a * 129, a * 46, a * 131, a * 43);
    e.bezierCurveTo(a * 144, a * 37, a * 148, a * 35, a * 147, a * 18);
    e.closePath();
    od(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    od(e, Nl, c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    od(e, undefined, c[4], a * 4);
    e.save();
    e.translate(a * 87, a * 34.5);
    e.rotate(0);
    ad(e, a * -8, a * -10.5, a * 16, a * 21, a * 10);
    e.restore();
    od(e, c[7], c[2], a * 4);
    e.save();
    e.translate(a * 87, a * 57);
    e.rotate(0);
    ad(e, a * -8, a * -23, a * 16, a * 46, a * 10);
    e.restore();
    od(e, c[8], c[2], a * 4);
    hd(e, a * 87, a * 39, a * 4.123105625617661);
    od(e, c[9], c[2], a * 4);
    hd(e, a * 87, a * 60, a * 4.242640687119285);
    od(e, c[9], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    od(e, c[8], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 13, a * 77, a * 16, a * 74, a * 27, a * 80);
    e.closePath();
    od(e, c[9], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 70);
    e.bezierCurveTo(a * 149.5, a * 72, a * 149.5, a * 72, a * 154, a * 74);
    e.bezierCurveTo(a * 150, a * 77, a * 150, a * 77, a * 146, a * 80);
    e.closePath();
    od(e, c[9], c[2], a * 4);
    hd(e, a * 50, a * 80, a * 5);
    od(e, c[9], c[2], a * 4);
    hd(e, a * 86.01141357421875, a * 81.76705932617188, a * 5);
    od(e, c[9], c[2], a * 4);
    hd(e, a * 119.01141357421875, a * 80.13069152832031, a * 5);
    od(e, c[9], c[2], a * 4);
    return d;
  }
  function dp(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 501;
    f.height = b * 564;
    g.scale(0.5, 0.5);
    g.translate(b * 240, b * 255);
    g.rotate(e);
    g.globalAlpha = c ? 0.5 : 0.2;
    hd(g, b * 174, b * 87.984375, b * 20.8806130178211);
    od(g, d[0], d[0], b * 8);
    hd(g, b * 174, b * 87.984375, b * 12.165525060596439);
    od(g, d[0], d[0], b * 8);
    hd(g, b * 174, b * 87.484375, b * 6);
    od(g, d[0]);
    hd(g, b * 30, b * 87.984375, b * 20.8806130178211);
    od(g, d[0], d[0], b * 4);
    hd(g, b * 30, b * 87.984375, b * 12.165525060596439);
    od(g, d[0], d[0], b * 4);
    hd(g, b * 30, b * 87.484375, b * 6);
    od(g, d[0]);
    hd(g, b * 100, b * 30, b * 20.8806130178211);
    od(g, d[0], d[0], b * 4);
    hd(g, b * 100, b * 30, b * 12.165525060596439);
    od(g, d[0], d[0], b * 4);
    hd(g, b * 100, b * 30, b * 6);
    od(g, d[0]);
    hd(g, b * 100, b * 130, b * 20.8806130178211);
    od(g, d[0], d[0], b * 4);
    hd(g, b * 100, b * 130, b * 12.165525060596439);
    od(g, d[0], d[0], b * 4);
    hd(g, b * 100, b * 130, b * 6);
    od(g, d[0]);
    g.save();
    g.translate(b * 102, b * 81.984375);
    g.rotate(0);
    ad(g, b * -74, b * -57, b * 148, b * 114, b * 23);
    g.restore();
    od(g, d[0], d[0], b * 4);
    g.save();
    g.translate(b * 101, b * 64.984375);
    g.rotate(0);
    ad(g, b * -33, b * -10, b * 66, b * 20, b * 15);
    g.restore();
    od(g, d[0], d[0], b * 4);
    g.save();
    g.translate(b * 102, b * 63.484375);
    g.rotate(0);
    ad(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
    g.restore();
    g.translate(5, -5);
    g.globalAlpha = 1;
    hd(g, b * 174, b * 87.984375, b * 20.8806130178211);
    od(g, d[1], d[3], b * 8);
    hd(g, b * 174, b * 87.984375, b * 12.165525060596439);
    od(g, d[1], d[3], b * 8);
    hd(g, b * 174, b * 87.484375, b * 6);
    od(g, d[2]);
    hd(g, b * 30, b * 87.984375, b * 20.8806130178211);
    od(g, d[1], d[3], b * 8);
    hd(g, b * 30, b * 87.984375, b * 12.165525060596439);
    od(g, d[1], d[3], b * 8);
    hd(g, b * 30, b * 87.484375, b * 6);
    od(g, d[2]);
    hd(g, b * 102, b * 30, b * 20.8806130178211);
    od(g, d[1], d[3], b * 8);
    hd(g, b * 102, b * 30, b * 12.165525060596439);
    od(g, d[1], d[3], b * 8);
    hd(g, b * 102, b * 30, b * 6);
    od(g, d[1]);
    hd(g, b * 102, b * 130, b * 20.8806130178211);
    od(g, d[1], d[3], b * 8);
    hd(g, b * 102, b * 130, b * 12.165525060596439);
    od(g, d[1], d[3], b * 8);
    hd(g, b * 102, b * 130, b * 6);
    od(g, d[1]);
    g.save();
    g.translate(b * 102, b * 81.984375);
    ad(g, b * -74, b * -57, b * 148, b * 114, b * 23);
    g.restore();
    od(g, d[1], d[3], b * 8);
    g.save();
    g.translate(b * 101, b * 64.984375);
    ad(g, b * -33, b * -10, b * 66, b * 20, b * 15);
    g.restore();
    od(g, d[2], d[1], b * 8);
    g.save();
    g.translate(b * 102, b * 63.484375);
    ad(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
    g.restore();
    od(g, d[2], d[1], b * 8);
    hd(g, b * 135, b * 107.36605834960938, b * 21.095023109728988);
    od(g, d[1], d[3], b * 8);
    hd(g, b * 135, b * 107.36605834960938, b * 13);
    od(g, d[1], d[3], b * 8);
    hd(g, b * 135, b * 107.36605834960938, b * 6.082762530298219);
    od(g, d[2]);
    hd(g, b * 70, b * 107.36605834960938, b * 21.095023109728988);
    od(g, d[1], d[3], b * 8);
    hd(g, b * 70, b * 107.36605834960938, b * 13);
    od(g, d[1], d[3], b * 8);
    hd(g, b * 70, b * 107.36605834960938, b * 6.082762530298219);
    od(g, d[2]);
    return f;
  }
  function vp(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    if (c == 0) {
      e.width = a * 566;
      e.height = a * 429;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 312.625, a * 39.046875);
      d.bezierCurveTo(a * 456.625, a * 60.046875, a * 521.625, a * 134.046875, a * 528.625, a * 199.046875);
      d.bezierCurveTo(a * 540.625, a * 298.046875, a * 491.625, a * 364.046875, a * 405.625, a * 394.046875);
      d.bezierCurveTo(a * 270.625, a * 429.046875, a * 182.625, a * 395.046875, a * 100.625, a * 344.046875);
      d.bezierCurveTo(a * 15.625, a * 283.046875, a * 20.625, a * 195.046875, a * 33.625, a * 158.046875);
      d.bezierCurveTo(a * 56.625, a * 80.046875, a * 102.625, a * 46.046875, a * 183.625, a * 33.046875);
      d.bezierCurveTo(a * 225.625, a * 25.046875, a * 270.625, a * 30.046875, a * 312.625, a * 39.046875);
      d.closePath();
      od(d, b[0]);
    } else if (c == 1) {
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 511;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 141.625, a * 49.296875);
      d.bezierCurveTo(a * 225.625, a * 10.296875, a * 320.625, a * 16.296875, a * 390.625, a * 39.296875);
      d.bezierCurveTo(a * 476.625, a * 71.296875, a * 483.625, a * 142.296875, a * 486.625, a * 197.296875);
      d.bezierCurveTo(a * 491.625, a * 289.296875, a * 462.625, a * 317.296875, a * 417.625, a * 351.296875);
      d.bezierCurveTo(a * 367.625, a * 385.296875, a * 313.625, a * 404.296875, a * 218.625, a * 395.296875);
      d.bezierCurveTo(a * 108.625, a * 381.296875, a * 81.625, a * 350.296875, a * 52.625, a * 305.296875);
      d.bezierCurveTo(a * 16.625, a * 244.296875, a * 23.625, a * 171.296875, a * 37.625, a * 145.296875);
      d.bezierCurveTo(a * 65.625, a * 84.296875, a * 97.625, a * 74.296875, a * 141.625, a * 49.296875);
      d.closePath();
      od(d, b[0]);
    } else if (c == 2) {
      var e;
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 504;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 153.625, a * 46.296875);
      d.bezierCurveTo(a * 271.625, a * 17.296875, a * 345.625, a * 35.296875, a * 410.625, a * 71.296875);
      d.bezierCurveTo(a * 473.625, a * 109.296875, a * 478.625, a * 167.296875, a * 473.625, a * 205.296875);
      d.bezierCurveTo(a * 462.625, a * 295.296875, a * 438.625, a * 316.296875, a * 388.625, a * 345.296875);
      d.bezierCurveTo(a * 331.625, a * 374.296875, a * 273.625, a * 392.296875, a * 180.625, a * 387.296875);
      d.bezierCurveTo(a * 111.625, a * 380.296875, a * 86.625, a * 360.296875, a * 51.625, a * 309.296875);
      d.bezierCurveTo(a * 23.625, a * 267.296875, a * 25.625, a * 226.296875, a * 27.625, a * 175.296875);
      d.bezierCurveTo(a * 37.625, a * 99.296875, a * 88.625, a * 57.296875, a * 153.625, a * 46.296875);
      d.closePath();
      od(d, b[0]);
    }
    return e;
  }
  function mp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 102;
    d.height = a * 102;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(3, 3);
    ad(e, a * 24, a * 26, a * 70, a * 9, a * 10);
    od(e, c[0]);
    ad(e, a * 26, a * 70, a * 70, a * 9, a * 10);
    od(e, c[0]);
    ad(e, a * 5, a * 3, a * 22, a * 94, a * 5);
    od(e, c[0]);
    ad(e, a * 40, a * 3, a * 22, a * 94, a * 5);
    od(e, c[0]);
    ad(e, a * 75, a * 3, a * 22, a * 94, a * 5);
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(-3, -3);
    ad(e, a * 24, a * 26, a * 70, a * 9, a * 10);
    od(e, c[1]);
    ad(e, a * 26, a * 70, a * 70, a * 9, a * 10);
    od(e, c[1]);
    ad(e, a * 5, a * 3, a * 22, a * 94, a * 5);
    od(e, c[2], c[3], a * 4);
    ad(e, a * 40, a * 3, a * 22, a * 94, a * 5);
    od(e, c[2], c[3], a * 4);
    ad(e, a * 75, a * 3, a * 22, a * 94, a * 5);
    od(e, c[2], c[3], a * 4);
    return d;
  }
  function cp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 345;
    d.height = a * 250;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 58);
    e.bezierCurveTo(a * 100.5, a * 43, a * 100.5, a * 43, a * 96, a * 28);
    e.bezierCurveTo(a * 119.5, a * 33.5, a * 119.5, a * 33.5, a * 143, a * 39);
    e.bezierCurveTo(a * 170, a * 37, a * 177, a * 37, a * 188, a * 40);
    e.bezierCurveTo(a * 213, a * 33.5, a * 213, a * 33.5, a * 238, a * 27);
    e.bezierCurveTo(a * 231, a * 52, a * 234, a * 42.5, a * 230, a * 58);
    e.closePath();
    od(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 108, a * 51);
    e.bezierCurveTo(a * 91, a * 55, a * 85, a * 44, a * 86, a * 29);
    e.bezierCurveTo(a * 62, a * 50, a * 78, a * 69, a * 92, a * 75);
    e.closePath();
    od(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 249, a * 27);
    e.bezierCurveTo(a * 273, a * 49, a * 262, a * 68, a * 246, a * 77);
    e.bezierCurveTo(a * 231, a * 59, a * 236, a * 66.5, a * 226, a * 56);
    e.bezierCurveTo(a * 243, a * 53, a * 252, a * 43, a * 249, a * 28);
    e.closePath();
    od(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 78);
    e.bezierCurveTo(a * 87, a * 59, a * 98, a * 46, a * 127, a * 48);
    e.bezierCurveTo(a * 176, a * 48.5, a * 176, a * 48.5, a * 225, a * 49);
    e.bezierCurveTo(a * 243, a * 49, a * 253, a * 59, a * 253, a * 76);
    e.bezierCurveTo(a * 211, a * 85.5, a * 211, a * 85.5, a * 169, a * 95);
    e.closePath();
    od(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 105);
    e.bezierCurveTo(a * 56, a * 92, a * 59, a * 86, a * 65, a * 73);
    e.bezierCurveTo(a * 62.5, a * 61.5, a * 62.5, a * 61.5, a * 60, a * 50);
    e.bezierCurveTo(a * 99.5, a * 64.5, a * 99.5, a * 64.5, a * 139, a * 79);
    e.bezierCurveTo(a * 164, a * 77, a * 177, a * 76, a * 203, a * 78);
    e.bezierCurveTo(a * 242, a * 63.5, a * 242, a * 63.5, a * 281, a * 49);
    e.bezierCurveTo(a * 279, a * 60.5, a * 279, a * 60.5, a * 277, a * 72);
    e.bezierCurveTo(a * 286, a * 88, a * 286, a * 96, a * 287, a * 104);
    e.bezierCurveTo(a * 228.5, a * 127, a * 228.5, a * 127, a * 170, a * 150);
    e.closePath();
    od(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 48, a * 130);
    e.bezierCurveTo(a * 61, a * 155, a * 63, a * 165, a * 56, a * 171);
    e.bezierCurveTo(a * 48, a * 177, a * 40, a * 171, a * 38, a * 178);
    e.bezierCurveTo(a * 33, a * 180, a * 37, a * 188, a * 47, a * 208);
    e.bezierCurveTo(a * 52, a * 221, a * 55, a * 222, a * 75, a * 229);
    e.bezierCurveTo(a * 91, a * 213, a * 98, a * 212, a * 112, a * 219);
    e.bezierCurveTo(a * 167, a * 225, a * 187, a * 224, a * 222, a * 220);
    e.bezierCurveTo(a * 244, a * 214, a * 247, a * 213, a * 263, a * 229);
    e.bezierCurveTo(a * 295, a * 220, a * 291, a * 215, a * 301, a * 194);
    e.bezierCurveTo(a * 308, a * 178, a * 309, a * 176, a * 302, a * 173);
    e.bezierCurveTo(a * 290, a * 177, a * 289, a * 177, a * 283, a * 169);
    e.bezierCurveTo(a * 279, a * 163, a * 279, a * 161, a * 290, a * 130);
    e.bezierCurveTo(a * 270, a * 127, a * 270, a * 127, a * 250, a * 124);
    e.bezierCurveTo(a * 209, a * 137.5, a * 209, a * 137.5, a * 168, a * 151);
    e.bezierCurveTo(a * 121, a * 135, a * 121, a * 135, a * 74, a * 119);
    e.closePath();
    od(e, c[1], c[2], a * 8);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    od(e, c[7], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    od(e, c[7], c[8], a * 8);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    od(e, undefined, c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    od(e, md, c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 66);
    e.bezierCurveTo(a * 57, a * 107, a * 63, a * 96, a * 120, a * 106);
    e.bezierCurveTo(a * 154, a * 112, a * 163, a * 116, a * 174, a * 135);
    e.bezierCurveTo(a * 180, a * 109, a * 191, a * 113, a * 237, a * 103);
    e.bezierCurveTo(a * 276, a * 100, a * 289, a * 94, a * 301, a * 67);
    e.bezierCurveTo(a * 317, a * 112, a * 301, a * 141, a * 274, a * 139);
    e.bezierCurveTo(a * 204, a * 166, a * 197, a * 169, a * 173, a * 183);
    e.bezierCurveTo(a * 170, a * 183, a * 170, a * 183, a * 167, a * 183);
    e.bezierCurveTo(a * 132, a * 160, a * 112, a * 156, a * 73, a * 141);
    e.bezierCurveTo(a * 43, a * 146, a * 27, a * 120, a * 39, a * 66);
    e.closePath();
    od(e, c[7], c[8], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 185);
    e.bezierCurveTo(a * 115, a * 200, a * 118, a * 206, a * 124, a * 212);
    e.bezierCurveTo(a * 133, a * 223, a * 132, a * 231, a * 121, a * 230);
    e.bezierCurveTo(a * 108, a * 226, a * 108, a * 215, a * 107, a * 209);
    e.bezierCurveTo(a * 106, a * 201, a * 110, a * 196, a * 114, a * 185);
    e.closePath();
    od(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226, a * 186);
    e.bezierCurveTo(a * 234, a * 201, a * 238, a * 209, a * 228, a * 225);
    e.bezierCurveTo(a * 223, a * 233, a * 213, a * 233, a * 211, a * 226);
    e.bezierCurveTo(a * 206, a * 219, a * 217, a * 216, a * 221, a * 207);
    e.bezierCurveTo(a * 225, a * 196, a * 225, a * 191, a * 226, a * 186);
    e.closePath();
    od(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 172, a * 110);
    e.bezierCurveTo(a * 189, a * 153, a * 192, a * 160, a * 188, a * 175);
    e.bezierCurveTo(a * 183, a * 190, a * 176, a * 197, a * 165, a * 191);
    e.bezierCurveTo(a * 153, a * 181, a * 152, a * 166, a * 157, a * 151);
    e.bezierCurveTo(a * 164.5, a * 131, a * 164.5, a * 131, a * 172, a * 111);
    e.closePath();
    od(e, c[3], c[4], a * 8);
    return d;
  }
  function pp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 260;
    d.globalAlpha = 0.5;
    hd(d, a * 126.5, a * 134, a * 119);
    od(d, b[0]);
    d.globalAlpha = 1;
    hd(d, a * 126.5, a * 124, a * 119);
    od(d, b[1], b[2], a * 4);
    hd(d, a * 126.5, a * 127, a * 100);
    od(d, b[3]);
    d.globalAlpha = 0.5;
    hd(d, a * 126.5, a * 135, a * 81);
    od(d, b[0]);
    d.globalAlpha = 1;
    hd(d, a * 126.5, a * 125, a * 84);
    od(d, b[4], b[5], a * 4);
    hd(d, a * 126.5, a * 125, a * 61);
    od(d, b[6], b[7], a * 4);
    d.globalAlpha = 0.5;
    hd(d, a * 126.5, a * 134, a * 40);
    od(d, b[8]);
    d.globalAlpha = 1;
    hd(d, a * 126.5, a * 125, a * 40);
    od(d, b[9]);
    return c;
  }
  function Cp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 376;
    c.height = a * 371;
    d.globalAlpha = 0.5;
    d.translate(a * 5, a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    od(d, b[0]);
    d.globalAlpha = 1;
    d.translate(a * -4, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    od(d, $q, b[1], a * 12);
    d.translate(a * -1, a * 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 270.633544921875, a * 88.98580932617188);
    d.bezierCurveTo(a * 296.633544921875, a * 65.98580932617188, a * 318.633544921875, a * 62.985809326171875, a * 348.633544921875, a * 57.985809326171875);
    d.bezierCurveTo(a * 309.633544921875, a * 76.98580932617188, a * 291.633544921875, a * 88.98580932617188, a * 280.633544921875, a * 99.98580932617188);
    d.closePath();
    od(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 275.633544921875, a * 281.9858093261719);
    d.bezierCurveTo(a * 303.633544921875, a * 308.9858093261719, a * 321.633544921875, a * 308.9858093261719, a * 335.633544921875, a * 315.9858093261719);
    d.bezierCurveTo(a * 305.633544921875, a * 320.9858093261719, a * 278.633544921875, a * 307.9858093261719, a * 264.633544921875, a * 293.9858093261719);
    d.closePath();
    od(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 124.633544921875, a * 291.9858093261719);
    d.bezierCurveTo(a * 106.633544921875, a * 316.9858093261719, a * 72.633544921875, a * 325.9858093261719, a * 53.633544921875, a * 319.9858093261719);
    d.bezierCurveTo(a * 83.633544921875, a * 308.9858093261719, a * 97.633544921875, a * 298.9858093261719, a * 112.633544921875, a * 284.9858093261719);
    d.closePath();
    od(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 113.633544921875, a * 80.98580932617188);
    d.bezierCurveTo(a * 91.633544921875, a * 54.985809326171875, a * 72.633544921875, a * 56.985809326171875, a * 36.633544921875, a * 49.985809326171875);
    d.bezierCurveTo(a * 87.633544921875, a * 72.98580932617188, a * 95.633544921875, a * 82.98580932617188, a * 106.633544921875, a * 96.98580932617188);
    d.closePath();
    od(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 202.633544921875, a * 20.985809326171875);
    d.bezierCurveTo(a * 219.633544921875, a * 49.985809326171875, a * 259.633544921875, a * 80.98580932617188, a * 255.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 268.633544921875, a * 86.98580932617188, a * 265.633544921875, a * 87.98580932617188, a * 275.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 283.633544921875, a * 87.98580932617188, a * 283.633544921875, a * 87.98580932617188, a * 291.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 269.633544921875, a * 116.98580932617188, a * 270.633544921875, a * 124.98580932617188, a * 267.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 307.633544921875, a * 168.98580932617188, a * 339.633544921875, a * 132.98580932617188, a * 352.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 366.633544921875, a * 145.98580932617188, a * 345.633544921875, a * 207.98580932617188, a * 286.633544921875, a * 208.98580932617188);
    d.bezierCurveTo(a * 315.633544921875, a * 223.98580932617188, a * 327.633544921875, a * 287.9858093261719, a * 355.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 293.633544921875, a * 298.9858093261719, a * 293.633544921875, a * 275.9858093261719, a * 276.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 274.633544921875, a * 282.9858093261719, a * 287.633544921875, a * 288.9858093261719, a * 295.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 287.133544921875, a * 302.4858093261719, a * 287.133544921875, a * 302.4858093261719, a * 278.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 261.633544921875, a * 297.9858093261719, a * 258.633544921875, a * 293.9858093261719, a * 255.633544921875, a * 290.9858093261719);
    d.bezierCurveTo(a * 249.633544921875, a * 301.9858093261719, a * 225.633544921875, a * 320.9858093261719, a * 202.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 318.9858093261719, a * 196.633544921875, a * 306.9858093261719, a * 198.633544921875, a * 300.9858093261719);
    d.bezierCurveTo(a * 209.633544921875, a * 268.9858093261719, a * 199.633544921875, a * 266.9858093261719, a * 195.633544921875, a * 256.9858093261719);
    d.bezierCurveTo(a * 183.633544921875, a * 274.9858093261719, a * 182.633544921875, a * 281.9858093261719, a * 192.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 317.9858093261719, a * 191.633544921875, a * 336.9858093261719, a * 186.633544921875, a * 351.9858093261719);
    d.bezierCurveTo(a * 166.633544921875, a * 318.9858093261719, a * 141.633544921875, a * 303.9858093261719, a * 136.633544921875, a * 286.9858093261719);
    d.bezierCurveTo(a * 122.633544921875, a * 303.9858093261719, a * 115.633544921875, a * 305.9858093261719, a * 109.633544921875, a * 306.9858093261719);
    d.bezierCurveTo(a * 101.133544921875, a * 301.9858093261719, a * 94.633544921875, a * 297.9858093261719, a * 92.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 116.633544921875, a * 277.9858093261719, a * 116.633544921875, a * 266.9858093261719, a * 119.633544921875, a * 257.9858093261719);
    d.bezierCurveTo(a * 107.633544921875, a * 257.9858093261719, a * 65.633544921875, a * 308.9858093261719, a * 24.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 51.633544921875, a * 275.9858093261719, a * 64.633544921875, a * 220.98580932617188, a * 108.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 198.98580932617188, a * 26.633544921875, a * 142.98580932617188, a * 25.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 41.633544921875, a * 155.98580932617188, a * 81.633544921875, a * 148.98580932617188, a * 113.633544921875, a * 124.98580932617188);
    d.bezierCurveTo(a * 102.633544921875, a * 93.98580932617188, a * 95.633544921875, a * 88.98580932617188, a * 89.633544921875, a * 81.98580932617188);
    d.bezierCurveTo(a * 97.633544921875, a * 76.48580932617188, a * 97.633544921875, a * 76.48580932617188, a * 105.633544921875, a * 70.98580932617188);
    d.bezierCurveTo(a * 120.633544921875, a * 78.98580932617188, a * 121.633544921875, a * 81.98580932617188, a * 124.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 132.633544921875, a * 71.98580932617188, a * 160.633544921875, a * 56.985809326171875, a * 175.633544921875, a * 23.985809326171875);
    d.bezierCurveTo(a * 182.633544921875, a * 53.985809326171875, a * 170.633544921875, a * 102.98580932617188, a * 191.633544921875, a * 125.98580932617188);
    d.bezierCurveTo(a * 214.633544921875, a * 89.98580932617188, a * 192.633544921875, a * 58.985809326171875, a * 202.633544921875, a * 20.985809326171875);
    d.closePath();
    od(d, b[2], b[3], a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 203.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 223.633544921875, a * 63.985809326171875, a * 227.633544921875, a * 72.98580932617188, a * 235.633544921875, a * 98.98580932617188);
    d.bezierCurveTo(a * 241.633544921875, a * 123.98580932617188, a * 225.633544921875, a * 138.98580932617188, a * 196.633544921875, a * 122.98580932617188);
    d.bezierCurveTo(a * 213.633544921875, a * 93.98580932617188, a * 199.633544921875, a * 49.985809326171875, a * 203.633544921875, a * 26.985809326171875);
    d.closePath();
    od(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.633544921875, a * 25.985809326171875);
    d.bezierCurveTo(a * 176.633544921875, a * 51.985809326171875, a * 171.633544921875, a * 88.98580932617188, a * 186.633544921875, a * 121.98580932617188);
    d.bezierCurveTo(a * 156.633544921875, a * 144.98580932617188, a * 139.633544921875, a * 120.98580932617188, a * 147.633544921875, a * 97.98580932617188);
    d.bezierCurveTo(a * 152.633544921875, a * 77.98580932617188, a * 162.633544921875, a * 60.985809326171875, a * 176.633544921875, a * 25.985809326171875);
    d.closePath();
    od(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 26.633544921875, a * 96.98580932617188);
    d.bezierCurveTo(a * 38.633544921875, a * 151.98580932617188, a * 61.633544921875, a * 161.98580932617188, a * 88.633544921875, a * 168.98580932617188);
    d.bezierCurveTo(a * 117.633544921875, a * 177.98580932617188, a * 113.633544921875, a * 185.98580932617188, a * 106.633544921875, a * 204.98580932617188);
    d.bezierCurveTo(a * 32.633544921875, a * 204.98580932617188, a * 25.633544921875, a * 149.98580932617188, a * 25.633544921875, a * 97.98580932617188);
    d.closePath();
    od(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 351.633544921875, a * 99.98580932617188);
    d.bezierCurveTo(a * 365.633544921875, a * 161.98580932617188, a * 333.633544921875, a * 203.98580932617188, a * 287.633544921875, a * 207.98580932617188);
    d.bezierCurveTo(a * 255.633544921875, a * 208.98580932617188, a * 266.633544921875, a * 174.98580932617188, a * 285.633544921875, a * 176.98580932617188);
    d.bezierCurveTo(a * 313.633544921875, a * 178.98580932617188, a * 348.633544921875, a * 135.98580932617188, a * 353.633544921875, a * 99.98580932617188);
    d.closePath();
    od(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 350.633544921875, a * 302.9858093261719);
    d.bezierCurveTo(a * 310.633544921875, a * 280.9858093261719, a * 314.633544921875, a * 244.98580932617188, a * 292.633544921875, a * 230.98580932617188);
    d.bezierCurveTo(a * 272.633544921875, a * 215.98580932617188, a * 263.633544921875, a * 222.98580932617188, a * 256.633544921875, a * 236.98580932617188);
    d.bezierCurveTo(a * 251.633544921875, a * 249.98580932617188, a * 264.633544921875, a * 255.98580932617188, a * 279.633544921875, a * 268.9858093261719);
    d.bezierCurveTo(a * 306.633544921875, a * 295.9858093261719, a * 325.633544921875, a * 299.9858093261719, a * 349.633544921875, a * 302.9858093261719);
    d.closePath();
    od(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 95.633544921875, a * 224.98580932617188);
    d.bezierCurveTo(a * 64.633544921875, a * 245.98580932617188, a * 62.633544921875, a * 280.9858093261719, a * 32.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 59.633544921875, a * 301.9858093261719, a * 102.633544921875, a * 260.9858093261719, a * 116.633544921875, a * 255.98580932617188);
    d.bezierCurveTo(a * 139.633544921875, a * 229.98580932617188, a * 108.633544921875, a * 209.98580932617188, a * 97.633544921875, a * 224.98580932617188);
    d.closePath();
    od(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 253.98580932617188);
    d.bezierCurveTo(a * 209.633544921875, a * 282.9858093261719, a * 205.633544921875, a * 278.9858093261719, a * 199.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 198.633544921875, a * 332.9858093261719, a * 201.633544921875, a * 340.9858093261719, a * 202.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 215.633544921875, a * 313.9858093261719, a * 226.633544921875, a * 291.9858093261719, a * 235.633544921875, a * 270.9858093261719);
    d.bezierCurveTo(a * 243.633544921875, a * 247.98580932617188, a * 219.633544921875, a * 235.98580932617188, a * 196.633544921875, a * 252.98580932617188);
    d.closePath();
    od(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 251.98580932617188);
    d.bezierCurveTo(a * 176.633544921875, a * 275.9858093261719, a * 182.633544921875, a * 285.9858093261719, a * 191.633544921875, a * 308.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 318.9858093261719, a * 190.633544921875, a * 334.9858093261719, a * 186.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 175.633544921875, a * 307.9858093261719, a * 157.633544921875, a * 291.9858093261719, a * 155.633544921875, a * 272.9858093261719);
    d.bezierCurveTo(a * 150.633544921875, a * 243.98580932617188, a * 170.633544921875, a * 236.98580932617188, a * 195.633544921875, a * 251.98580932617188);
    d.closePath();
    od(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 316, a * 186.8020782470703);
    d.bezierCurveTo(a * 315, a * 173.8020782470703, a * 298, a * 177.8020782470703, a * 293, a * 183.8020782470703);
    d.bezierCurveTo(a * 285, a * 195.8020782470703, a * 314, a * 197.8020782470703, a * 315, a * 187.8020782470703);
    d.closePath();
    od(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 340, a * 157.8020782470703);
    d.bezierCurveTo(a * 327, a * 153.8020782470703, a * 321, a * 168.8020782470703, a * 330, a * 174.8020782470703);
    d.bezierCurveTo(a * 341, a * 178.8020782470703, a * 347, a * 161.8020782470703, a * 341, a * 157.8020782470703);
    d.closePath();
    od(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 349, a * 136.8020782470703);
    d.bezierCurveTo(a * 343, a * 135.8020782470703, a * 342, a * 139.8020782470703, a * 341, a * 147.8020782470703);
    d.bezierCurveTo(a * 343, a * 155.8020782470703, a * 353, a * 143.8020782470703, a * 349, a * 137.8020782470703);
    d.closePath();
    od(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 278.75, a * 246.4375);
    d.bezierCurveTo(a * 288.75, a * 242.4375, a * 301.75, a * 248.4375, a * 298.75, a * 262.4375);
    d.bezierCurveTo(a * 293.75, a * 271.4375, a * 287.75, a * 271.4375, a * 278.75, a * 262.4375);
    d.bezierCurveTo(a * 271.75, a * 255.4375, a * 274.75, a * 250.4375, a * 277.75, a * 247.4375);
    d.closePath();
    od(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 310.75, a * 277.4375);
    d.bezierCurveTo(a * 319.75, a * 280.4375, a * 322.75, a * 283.4375, a * 321.75, a * 289.4375);
    d.bezierCurveTo(a * 319.75, a * 295.4375, a * 313.75, a * 291.4375, a * 308.75, a * 288.4375);
    d.bezierCurveTo(a * 301.75, a * 281.4375, a * 306.75, a * 277.4375, a * 309.75, a * 277.4375);
    d.closePath();
    od(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.75, a * 257.4375);
    d.bezierCurveTo(a * 227.75, a * 269.4375, a * 220.75, a * 281.4375, a * 212.75, a * 280.4375);
    d.bezierCurveTo(a * 206.75, a * 279.4375, a * 206.75, a * 269.4375, a * 204.75, a * 260.4375);
    d.bezierCurveTo(a * 204.75, a * 254.4375, a * 211.75, a * 253.4375, a * 216.75, a * 256.4375);
    d.closePath();
    od(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 289.4375);
    d.bezierCurveTo(a * 219.75, a * 292.4375, a * 213.75, a * 306.4375, a * 206.75, a * 307.4375);
    d.bezierCurveTo(a * 199.75, a * 303.4375, a * 209.75, a * 287.4375, a * 210.75, a * 289.4375);
    d.closePath();
    od(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 171.75, a * 256.4375);
    d.bezierCurveTo(a * 162.75, a * 273.4375, a * 166.75, a * 278.4375, a * 175.75, a * 280.4375);
    d.bezierCurveTo(a * 183.75, a * 278.4375, a * 185.75, a * 257.4375, a * 182.75, a * 255.4375);
    d.bezierCurveTo(a * 176.75, a * 251.4375, a * 172.75, a * 253.4375, a * 172.75, a * 256.4375);
    d.closePath();
    od(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.75, a * 289.9375);
    d.bezierCurveTo(a * 183.75, a * 287.9375, a * 186.75, a * 301.9375, a * 182.75, a * 305.9375);
    d.bezierCurveTo(a * 176.75, a * 307.9375, a * 171.75, a * 292.9375, a * 174.75, a * 290.9375);
    d.closePath();
    od(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.75, a * 314.4375);
    d.bezierCurveTo(a * 209.75, a * 316.4375, a * 210.75, a * 320.4375, a * 206.75, a * 323.4375);
    d.bezierCurveTo(a * 201.75, a * 324.4375, a * 201.75, a * 314.4375, a * 204.75, a * 314.4375);
    d.closePath();
    od(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.75, a * 313.4375);
    d.bezierCurveTo(a * 181.75, a * 315.4375, a * 180.75, a * 321.4375, a * 185.75, a * 326.4375);
    d.bezierCurveTo(a * 190.75, a * 327.4375, a * 190.75, a * 313.4375, a * 187.75, a * 314.4375);
    d.closePath();
    od(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 103.75, a * 244.4375);
    d.bezierCurveTo(a * 96.75, a * 239.4375, a * 83.75, a * 240.4375, a * 81.75, a * 255.4375);
    d.bezierCurveTo(a * 80.75, a * 264.4375, a * 89.75, a * 269.4375, a * 99.75, a * 260.4375);
    d.bezierCurveTo(a * 106.75, a * 254.4375, a * 106.75, a * 250.4375, a * 104.75, a * 245.4375);
    d.closePath();
    od(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 86.75, a * 182.4375);
    d.bezierCurveTo(a * 82.75, a * 170.4375, a * 66.75, a * 169.4375, a * 61.75, a * 181.4375);
    d.bezierCurveTo(a * 58.75, a * 187.4375, a * 68.75, a * 194.4375, a * 75.75, a * 192.4375);
    d.bezierCurveTo(a * 83.75, a * 192.4375, a * 86.75, a * 187.4375, a * 86.75, a * 183.4375);
    d.closePath();
    od(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44.75, a * 152.4375);
    d.bezierCurveTo(a * 55.75, a * 159.4375, a * 54.75, a * 170.4375, a * 46.75, a * 171.4375);
    d.bezierCurveTo(a * 39.75, a * 170.4375, a * 34.75, a * 151.4375, a * 43.75, a * 152.4375);
    d.closePath();
    od(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31.75, a * 130.4375);
    d.bezierCurveTo(a * 35.75, a * 132.4375, a * 35.75, a * 131.4375, a * 37.75, a * 137.4375);
    d.bezierCurveTo(a * 36.75, a * 144.4375, a * 36.75, a * 145.4375, a * 33.75, a * 144.4375);
    d.bezierCurveTo(a * 26.75, a * 137.4375, a * 29.75, a * 131.4375, a * 31.75, a * 130.4375);
    d.closePath();
    od(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 69.75, a * 274.4375);
    d.bezierCurveTo(a * 62.75, a * 272.4375, a * 59.75, a * 277.4375, a * 57.75, a * 284.4375);
    d.bezierCurveTo(a * 56.75, a * 290.4375, a * 63.75, a * 289.4375, a * 71.75, a * 282.4375);
    d.bezierCurveTo(a * 75.75, a * 277.4375, a * 72.75, a * 275.4375, a * 69.75, a * 274.4375);
    d.closePath();
    od(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 165.75, a * 95.4375);
    d.bezierCurveTo(a * 177.75, a * 97.4375, a * 182.75, a * 115.4375, a * 173.75, a * 121.4375);
    d.bezierCurveTo(a * 164.75, a * 126.4375, a * 149.75, a * 102.4375, a * 164.75, a * 96.4375);
    d.closePath();
    od(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 216.75, a * 94.4375);
    d.bezierCurveTo(a * 227.75, a * 99.4375, a * 223.75, a * 122.4375, a * 210.75, a * 119.4375);
    d.bezierCurveTo(a * 203.75, a * 115.4375, a * 207.75, a * 93.4375, a * 216.75, a * 94.4375);
    d.closePath();
    od(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 68.4375);
    d.bezierCurveTo(a * 218.75, a * 69.4375, a * 220.75, a * 77.4375, a * 216.75, a * 83.4375);
    d.bezierCurveTo(a * 208.75, a * 89.4375, a * 205.75, a * 68.4375, a * 210.75, a * 68.4375);
    d.closePath();
    od(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 169.75, a * 71.4375);
    d.bezierCurveTo(a * 162.75, a * 72.4375, a * 159.75, a * 83.4375, a * 167.75, a * 88.4375);
    d.bezierCurveTo(a * 174.75, a * 90.4375, a * 174.75, a * 72.4375, a * 170.75, a * 71.4375);
    d.closePath();
    od(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 193.75, a * 160.4375);
    d.bezierCurveTo(a * 215.75, a * 168.4375, a * 224.75, a * 180.4375, a * 229.75, a * 193.4375);
    d.bezierCurveTo(a * 223.75, a * 211.4375, a * 205.75, a * 225.4375, a * 193.75, a * 229.4375);
    d.bezierCurveTo(a * 167.75, a * 217.4375, a * 161.75, a * 205.4375, a * 156.75, a * 192.4375);
    d.bezierCurveTo(a * 164.75, a * 175.4375, a * 176.75, a * 166.4375, a * 192.75, a * 160.4375);
    d.closePath();
    od(d, b[8], b[9], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 184.11249923706055, a * 190.1999969482422, a * 184.11249923706055, a * 191.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 192.1999969482422, a * 180.61249923706055, a * 192.1999969482422, a * 180.61249923706055, a * 193.1999969482422, a * 175.61249923706055);
    d.bezierCurveTo(a * 195.6999969482422, a * 177.11249923706055, a * 195.6999969482422, a * 177.11249923706055, a * 198.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 183.61249923706055);
    d.bezierCurveTo(a * 201.6999969482422, a * 181.11249923706055, a * 201.6999969482422, a * 181.11249923706055, a * 205.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 206.6999969482422, a * 180.61249923706055, a * 206.6999969482422, a * 180.61249923706055, a * 208.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 185.61249923706055, a * 206.1999969482422, a * 185.61249923706055, a * 204.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 208.6999969482422, a * 188.61249923706055, a * 208.6999969482422, a * 188.61249923706055, a * 213.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 193.61249923706055);
    d.bezierCurveTo(a * 209.6999969482422, a * 194.61249923706055, a * 209.6999969482422, a * 194.61249923706055, a * 206.1999969482422, a * 195.61249923706055);
    d.bezierCurveTo(a * 210.1999969482422, a * 198.61249923706055, a * 210.1999969482422, a * 198.61249923706055, a * 214.1999969482422, a * 201.61249923706055);
    d.bezierCurveTo(a * 212.1999969482422, a * 203.61249923706055, a * 212.1999969482422, a * 203.61249923706055, a * 210.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 204.11249923706055, a * 207.1999969482422, a * 204.11249923706055, a * 204.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 205.6999969482422, a * 207.61249923706055, a * 205.6999969482422, a * 207.61249923706055, a * 207.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 204.6999969482422, a * 213.61249923706055, a * 204.6999969482422, a * 213.61249923706055, a * 202.1999969482422, a * 214.61249923706055);
    d.bezierCurveTo(a * 200.1999969482422, a * 210.61249923706055, a * 200.1999969482422, a * 210.61249923706055, a * 198.1999969482422, a * 206.61249923706055);
    d.bezierCurveTo(a * 196.6999969482422, a * 211.61249923706055, a * 196.6999969482422, a * 211.61249923706055, a * 195.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 192.6999969482422, a * 216.11249923706055, a * 192.6999969482422, a * 216.11249923706055, a * 190.1999969482422, a * 215.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 207.61249923706055);
    d.bezierCurveTo(a * 186.1999969482422, a * 210.61249923706055, a * 186.1999969482422, a * 210.61249923706055, a * 182.1999969482422, a * 213.61249923706055);
    d.bezierCurveTo(a * 181.1999969482422, a * 211.11249923706055, a * 181.1999969482422, a * 211.11249923706055, a * 180.1999969482422, a * 208.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 205.61249923706055, a * 183.1999969482422, a * 205.61249923706055, a * 186.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 203.11249923706055, a * 180.6999969482422, a * 203.11249923706055, a * 175.1999969482422, a * 203.61249923706055);
    d.bezierCurveTo(a * 174.6999969482422, a * 200.11249923706055, a * 174.6999969482422, a * 200.11249923706055, a * 174.1999969482422, a * 196.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 195.61249923706055, a * 177.1999969482422, a * 195.61249923706055, a * 180.1999969482422, a * 194.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 191.61249923706055, a * 177.1999969482422, a * 191.61249923706055, a * 174.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 175.6999969482422, a * 187.11249923706055, a * 175.6999969482422, a * 187.11249923706055, a * 177.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 187.11249923706055, a * 180.6999969482422, a * 187.11249923706055, a * 184.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 182.6999969482422, a * 183.61249923706055, a * 182.6999969482422, a * 183.61249923706055, a * 181.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 177.11249923706055, a * 183.1999969482422, a * 177.11249923706055, a * 185.1999969482422, a * 175.61249923706055);
    d.closePath();
    od(d, b[10]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 173.8125);
    d.bezierCurveTo(a * 187.1999969482422, a * 179.3125, a * 187.1999969482422, a * 179.3125, a * 189.1999969482422, a * 184.8125);
    d.bezierCurveTo(a * 184.1999969482422, a * 181.8125, a * 184.1999969482422, a * 181.8125, a * 179.1999969482422, a * 178.8125);
    d.bezierCurveTo(a * 181.1999969482422, a * 175.8125, a * 182.1999969482422, a * 174.8125, a * 185.1999969482422, a * 173.8125);
    d.closePath();
    od(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 172.61249542236328, a * 196.1999969482422, a * 171.61249542236328, a * 199.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 197.6999969482422, a * 179.61249542236328, a * 197.6999969482422, a * 179.61249542236328, a * 196.1999969482422, a * 185.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 179.61249542236328, a * 194.1999969482422, a * 179.61249542236328, a * 192.1999969482422, a * 173.61249542236328);
    d.closePath();
    od(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.1999969482422, a * 176.2125015258789);
    d.bezierCurveTo(a * 210.1999969482422, a * 178.2125015258789, a * 211.1999969482422, a * 179.2125015258789, a * 211.1999969482422, a * 181.2125015258789);
    d.bezierCurveTo(a * 206.6999969482422, a * 184.7125015258789, a * 206.6999969482422, a * 184.7125015258789, a * 202.1999969482422, a * 188.2125015258789);
    d.bezierCurveTo(a * 203.6999969482422, a * 182.2125015258789, a * 203.6999969482422, a * 182.2125015258789, a * 205.1999969482422, a * 176.2125015258789);
    d.closePath();
    od(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.1999969482422, a * 187.21249985694885);
    d.bezierCurveTo(a * 216.1999969482422, a * 191.21249985694885, a * 216.1999969482422, a * 192.21249985694885, a * 215.1999969482422, a * 195.21249985694885);
    d.bezierCurveTo(a * 206.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885);
    d.bezierCurveTo(a * 209.6999969482422, a * 190.71249985694885, a * 209.6999969482422, a * 190.71249985694885, a * 214.1999969482422, a * 187.21249985694885);
    d.closePath();
    od(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 204.1999969482422, a * 201.8125);
    d.bezierCurveTo(a * 209.1999969482422, a * 201.3125, a * 209.1999969482422, a * 201.3125, a * 214.1999969482422, a * 200.8125);
    d.bezierCurveTo(a * 215.1999969482422, a * 204.8125, a * 214.1999969482422, a * 205.8125, a * 213.1999969482422, a * 208.8125);
    d.bezierCurveTo(a * 208.6999969482422, a * 205.3125, a * 208.6999969482422, a * 205.3125, a * 204.1999969482422, a * 201.8125);
    d.closePath();
    od(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 199.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 212.61249923706055, a * 203.6999969482422, a * 209.11249923706055, a * 208.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 215.61249923706055, a * 204.1999969482422, a * 217.61249923706055, a * 203.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 201.1999969482422, a * 211.11249923706055, a * 201.1999969482422, a * 211.11249923706055, a * 199.1999969482422, a * 205.61249923706055);
    d.closePath();
    od(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.1999969482422, a * 207.01250076293945);
    d.bezierCurveTo(a * 194.1999969482422, a * 213.01250076293945, a * 194.1999969482422, a * 216.01250076293945, a * 196.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 193.1999969482422, a * 220.01250076293945, a * 190.1999969482422, a * 220.01250076293945, a * 188.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 189.6999969482422, a * 213.01250076293945, a * 189.6999969482422, a * 213.01250076293945, a * 191.1999969482422, a * 208.01250076293945);
    d.closePath();
    od(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.1999969482422, a * 203.21249961853027);
    d.bezierCurveTo(a * 184.1999969482422, a * 209.21249961853027, a * 184.1999969482422, a * 209.21249961853027, a * 182.1999969482422, a * 215.21249961853027);
    d.bezierCurveTo(a * 177.1999969482422, a * 212.21249961853027, a * 176.1999969482422, a * 211.21249961853027, a * 177.1999969482422, a * 210.21249961853027);
    d.bezierCurveTo(a * 181.6999969482422, a * 206.71249961853027, a * 181.6999969482422, a * 206.71249961853027, a * 186.1999969482422, a * 203.21249961853027);
    d.closePath();
    od(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 183.1999969482422, a * 196.8125);
    d.bezierCurveTo(a * 177.1999969482422, a * 196.3125, a * 177.1999969482422, a * 196.3125, a * 171.1999969482422, a * 195.8125);
    d.bezierCurveTo(a * 171.1999969482422, a * 199.8125, a * 171.1999969482422, a * 202.8125, a * 174.1999969482422, a * 204.8125);
    d.bezierCurveTo(a * 178.6999969482422, a * 200.8125, a * 178.6999969482422, a * 200.8125, a * 183.1999969482422, a * 196.8125);
    d.closePath();
    od(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 179.6999969482422, a * 186.71249771118164, a * 179.6999969482422, a * 186.71249771118164, a * 174.1999969482422, a * 183.21249771118164);
    d.bezierCurveTo(a * 172.1999969482422, a * 186.21249771118164, a * 172.1999969482422, a * 187.21249771118164, a * 172.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 178.1999969482422, a * 190.21249771118164, a * 178.1999969482422, a * 190.21249771118164, a * 184.1999969482422, a * 190.21249771118164);
    d.closePath();
    od(d, b[11]);
    hd(d, a * 126.19999694824219, a * 169.8125, a * 8.94427190999916);
    od(d, b[12]);
    hd(d, a * 123.19999694824219, a * 164.8125, a * 2.8284271247461903);
    od(d, b[13]);
    hd(d, a * 253.1999969482422, a * 169.8125, a * 8.94427190999916);
    od(d, b[12]);
    hd(d, a * 255.1999969482422, a * 164.8125, a * 2.23606797749979);
    od(d, b[13]);
    return c;
  }
  function Tp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    ad(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    od(e, c[1], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    od(e, Rr, c[5], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    od(e, da, c[6], a * 15);
    return d;
  }
  function fp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    od(e, oj, c[0], a * 11);
    e.translate(0, a * -5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    od(e, c[3], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    od(e, c[1], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    od(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    od(e, Bt, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    od(e, c[1], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    od(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    od(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    od(e, Nl, c[2], a * 11);
    return d;
  }
  function zp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -200, a * -40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 344, a * 18.40625);
    d.bezierCurveTo(a * 345, a * 361.40625, a * 344, a * 191.40625, a * 344, a * 364.40625);
    d.bezierCurveTo(a * 261, a * 275.40625, a * 274, a * 259.40625, a * 229, a * 213.40625);
    d.bezierCurveTo(a * 199, a * 187.40625, a * 222, a * 133.40625, a * 273, a * 100.40625);
    d.bezierCurveTo(a * 321, a * 71.40625, a * 327, a * 34.40625, a * 344, a * 18.40625);
    d.closePath();
    od(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 335, a * 38.072906494140625);
    d.bezierCurveTo(a * 307, a * 62.072906494140625, a * 291, a * 60.072906494140625, a * 262, a * 68.07290649414062);
    d.bezierCurveTo(a * 223, a * 80.07290649414062, a * 225, a * 111.07290649414062, a * 264, a * 139.07290649414062);
    d.closePath();
    od(d, b[0]);
    return c;
  }
  function yp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 163;
    d.height = a * 163;
    e.save();
    e.translate(a * 82.5, a * 81.1015625);
    e.rotate(0);
    ad(e, a * -65.5, a * -66, a * 131, a * 131, a * 5);
    e.restore();
    od(e, c[1]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    ad(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
    e.restore();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    ad(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
    e.restore();
    od(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    ad(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
    e.restore();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    ad(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
    e.restore();
    od(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    ad(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
    e.restore();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    ad(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
    e.restore();
    od(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    ad(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
    e.restore();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    ad(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
    e.restore();
    od(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17, a * 18.1015625);
    ad(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
    e.restore();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17, a * 18.1015625);
    ad(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
    e.restore();
    od(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    ad(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    e.restore();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    ad(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    e.restore();
    od(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    ad(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    e.restore();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    ad(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
    e.restore();
    od(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    ad(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    e.restore();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    ad(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
    e.restore();
    od(e, c[2], c[3], a * 3);
    return d;
  }
  function wp(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = b * 496;
    e.height = b * 520;
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 19.000030517578125, b * 256.67613983154297);
    f.bezierCurveTo(b * 1.000030517578125, b * 332.67613983154297, b * 23.000030517578125, b * 404.67613983154297, b * 95.00003051757812, b * 463.67613983154297);
    f.bezierCurveTo(b * 128.00003051757812, b * 491.67613983154297, b * 165.00003051757812, b * 507.67613983154297, b * 194.00003051757812, b * 512.676139831543);
    f.bezierCurveTo(b * 280.0000305175781, b * 517.676139831543, b * 291.0000305175781, b * 516.676139831543, b * 342.0000305175781, b * 497.67613983154297);
    f.bezierCurveTo(b * 425.0000305175781, b * 454.67613983154297, b * 469.0000305175781, b * 392.67613983154297, b * 468.0000305175781, b * 300.67613983154297);
    f.bezierCurveTo(b * 408.5000305175781, b * 365.17613983154297, b * 408.5000305175781, b * 365.17613983154297, b * 349.0000305175781, b * 429.67613983154297);
    f.bezierCurveTo(b * 256.0000305175781, b * 473.67613983154297, b * 167.00003051757812, b * 459.67613983154297, b * 78.00003051757812, b * 384.67613983154297);
    f.closePath();
    od(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, b * -10);
    hd(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
    od(f, d[5], undefined, b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 65.00003051757812, b * 263.4034118652344);
    f.bezierCurveTo(b * 109.00003051757812, b * 160.40341186523438, b * 185.00003051757812, b * 128.40341186523438, b * 222.00003051757812, b * 124.40341186523438);
    f.bezierCurveTo(b * 277.0000305175781, b * 116.40341186523438, b * 339.0000305175781, b * 134.40341186523438, b * 379.0000305175781, b * 195.40341186523438);
    f.bezierCurveTo(b * 409.0000305175781, b * 242.40341186523438, b * 416.0000305175781, b * 256.4034118652344, b * 428.0000305175781, b * 304.4034118652344);
    f.bezierCurveTo(b * 457.0000305175781, b * 203.40341186523438, b * 449.0000305175781, b * 183.40341186523438, b * 438.0000305175781, b * 162.40341186523438);
    f.bezierCurveTo(b * 381.0000305175781, b * 73.40341186523438, b * 360.0000305175781, b * 66.40341186523438, b * 257.0000305175781, b * 46.403411865234375);
    f.bezierCurveTo(b * 191.00003051757812, b * 45.403411865234375, b * 142.00003051757812, b * 65.40341186523438, b * 101.00003051757812, b * 115.40341186523438);
    f.closePath();
    od(f, d[0]);
    f.globalAlpha = 1;
    var g = function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 496;
      c.height = a * 520;
      d.globalAlpha = 1;
      d.translate(0, a * -10);
      hd(d, a * 247.01138305664062, a * 250.13068389892578, a * 232.81967270830015);
      od(d, b[1], b[2], a * 14);
      d.globalCompositeOperation = "destination-out";
      hd(d, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
      od(d, b[0], b[0], a * 14);
      d.globalCompositeOperation = "source-over";
      return c;
    }(b, d);
    f.drawImage(g, 0, 0);
    f.translate(0, b * -10);
    hd(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
    od(f, $q, d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
    f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
    f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
    f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
    f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
    f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
    f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
    f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
    f.closePath();
    od(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
    f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
    f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
    f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
    f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
    f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
    f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
    f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
    f.closePath();
    od(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
    f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
    f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
    f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
    f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
    f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
    f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
    f.closePath();
    od(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
    f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
    f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
    f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
    f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
    f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
    f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
    f.closePath();
    od(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
    f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
    f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
    f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
    f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
    f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
    f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
    f.closePath();
    od(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
    f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
    f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
    f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
    f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
    f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
    f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
    f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
    f.closePath();
    od(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
    f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
    f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
    f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
    f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
    f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
    f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
    f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
    f.closePath();
    od(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
    f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
    f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
    f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
    f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
    f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
    f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
    f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
    f.closePath();
    od(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
    f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
    f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
    f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
    f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
    f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
    f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
    f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
    f.closePath();
    od(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
    f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
    f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
    f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
    f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
    f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
    f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
    f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
    f.closePath();
    od(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
    f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
    f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
    f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
    f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
    f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
    f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
    f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
    f.closePath();
    od(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
    f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
    f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
    f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
    f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
    f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
    f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
    f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
    f.closePath();
    od(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
    f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
    f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
    f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
    f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
    f.closePath();
    od(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
    f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
    f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
    f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
    f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
    f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
    f.closePath();
    od(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
    f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
    f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
    f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
    f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
    f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
    f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
    f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
    f.closePath();
    od(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
    f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
    f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
    f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
    f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
    f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
    f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
    f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
    f.closePath();
    od(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
    f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
    f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
    f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
    f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
    f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
    f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
    f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
    f.closePath();
    od(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
    f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
    f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
    f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
    f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
    f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
    f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
    f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
    f.closePath();
    od(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
    f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
    f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
    f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
    f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
    f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
    f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
    f.closePath();
    od(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
    f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
    f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
    f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
    f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
    f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
    f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
    f.closePath();
    od(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
    f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
    f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
    f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
    f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
    f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
    f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
    f.closePath();
    od(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
    f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
    f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
    f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
    f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
    f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
    f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
    f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
    f.closePath();
    od(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
    f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
    f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
    f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
    f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
    f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
    f.closePath();
    od(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
    f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
    f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
    f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
    f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
    f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
    f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
    f.closePath();
    od(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
    f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
    f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
    f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
    f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
    f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
    f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
    f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
    f.closePath();
    od(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
    f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
    f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
    f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
    f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
    f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
    f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
    f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
    f.closePath();
    od(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
    f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
    f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
    f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
    f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
    f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
    f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
    f.closePath();
    od(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
    f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
    f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
    f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
    f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
    f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
    f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
    f.closePath();
    od(f, d[4], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
    f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
    f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
    f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
    f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
    f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
    f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
    f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
    f.closePath();
    od(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
    f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
    f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
    f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
    f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
    f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
    f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
    f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
    f.closePath();
    od(f, d[3], d[2], b * 12);
    f.globalAlpha = c ? 0.5 : 1;
    f.translate(0, b * 5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
    f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
    f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
    f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
    f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
    f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
    f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
    f.closePath();
    od(f, d[0], d[0], b * 12);
    f.globalAlpha = 1;
    f.translate(0, b * -5);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
    f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
    f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
    f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
    f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
    f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
    f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
    f.closePath();
    od(f, d[4], d[2], b * 12);
    return e;
  }
  function Pp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.save();
    e.translate(a * 70.16665649414062, a * 38.20831298828125);
    ad(e, a * -58.5, a * -27.5, a * 117, a * 55, a * 20);
    e.restore();
    od(e, c[0], c[1], a * 4);
    e.save();
    e.translate(a * 70, a * 42.70831298828125);
    ad(e, a * -61, a * -20, a * 122, a * 40, a * 20);
    e.restore();
    od(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 70.375);
    e.bezierCurveTo(a * 115, a * 99.375, a * 119, a * 85.375, a * 115, a * 100.375);
    e.bezierCurveTo(a * 112, a * 116.375, a * 117, a * 109.375, a * 131, a * 100.375);
    e.bezierCurveTo(a * 131, a * 83.375, a * 131, a * 83.375, a * 131, a * 66.375);
    e.closePath();
    od(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 11, a * 68.375);
    e.bezierCurveTo(a * 11.166656494140625, a * 84.375, a * 9, a * 99.375, a * 10, a * 100.375);
    e.bezierCurveTo(a * 35, a * 113.375, a * 27, a * 110.375, a * 25, a * 95.375);
    e.bezierCurveTo(a * 16, a * 68.375, a * 17, a * 69.375, a * 17, a * 68.375);
    e.closePath();
    od(e, c[2], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 32.375);
    e.bezierCurveTo(a * 43, a * 8.375, a * 45, a * 7.375, a * 56, a * 6.375);
    e.bezierCurveTo(a * 105, a * 4.375, a * 102, a * 6.375, a * 97, a * 32.375);
    e.bezierCurveTo(a * 138, a * 43.375, a * 133, a * 45.375, a * 133, a * 58.375);
    e.bezierCurveTo(a * 133, a * 85.375, a * 125, a * 74.375, a * 111, a * 70.375);
    e.bezierCurveTo(a * 70, a * 69.875, a * 29, a * 69.375, a * 29, a * 69.375);
    e.bezierCurveTo(a * 7, a * 84.375, a * 7, a * 70.375, a * 7, a * 59.375);
    e.bezierCurveTo(a * 6, a * 28.375, a * 32, a * 39.375, a * 44, a * 32.375);
    e.closePath();
    od(e, c[2], c[1], a * 4);
    hd(e, a * 71, a * 44.375, a * 16.55294535724685);
    od(e, c[2], c[1], a * 4);
    hd(e, a * 71, a * 43.70831298828125, a * 8.94427190999916);
    od(e, c[2], c[1], a * 4);
    return d;
  }
  function kp(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 271;
    c.height = a * 366;
    d.globalAlpha = 0.5;
    d.translate(0, a * 10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    od(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    od(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    od(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    od(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    od(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    od(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    od(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    od(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    od(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    od(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    od(d, b[0]);
    d.globalAlpha = 1;
    d.translate(0, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    od(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    od(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    od(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    od(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    od(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    od(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    od(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    od(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    od(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    od(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    od(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    od(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    od(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    od(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    od(d, b[1]);
    hd(d, a * 102, a * 269, a * 11);
    od(d, b[3]);
    hd(d, a * 98, a * 266, a * 5);
    od(d, b[6]);
    hd(d, a * 168, a * 269, a * 11);
    od(d, b[3]);
    hd(d, a * 164, a * 266, a * 5);
    od(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    od(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 235);
    d.bezierCurveTo(a * 118, a * 258, a * 137, a * 268, a * 148, a * 246);
    d.bezierCurveTo(a * 156, a * 228, a * 152, a * 169, a * 150, a * 140);
    d.bezierCurveTo(a * 147, a * 87, a * 143, a * 69, a * 142, a * 60);
    d.bezierCurveTo(a * 136, a * 44, a * 132, a * 43, a * 127, a * 62);
    d.bezierCurveTo(a * 119, a * 116, a * 119, a * 140, a * 116, a * 166);
    d.bezierCurveTo(a * 113, a * 202, a * 113, a * 223, a * 115, a * 233);
    d.closePath();
    od(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 132, a * 219);
    d.bezierCurveTo(a * 140, a * 229, a * 142, a * 231, a * 145, a * 237);
    d.bezierCurveTo(a * 145, a * 245, a * 139, a * 249, a * 133, a * 249);
    d.bezierCurveTo(a * 123, a * 248, a * 123, a * 243, a * 121, a * 239);
    d.bezierCurveTo(a * 126, a * 227, a * 129, a * 223, a * 132, a * 219);
    d.closePath();
    od(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 179);
    d.bezierCurveTo(a * 140, a * 188.5, a * 140, a * 188.5, a * 147, a * 198);
    d.bezierCurveTo(a * 148, a * 209, a * 142, a * 214, a * 133, a * 214);
    d.bezierCurveTo(a * 121, a * 211, a * 121, a * 207, a * 120, a * 200);
    d.bezierCurveTo(a * 126.5, a * 189.5, a * 126.5, a * 189.5, a * 133, a * 179);
    d.closePath();
    od(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 143);
    d.bezierCurveTo(a * 139, a * 151.5, a * 139, a * 151.5, a * 145, a * 160);
    d.bezierCurveTo(a * 143, a * 167, a * 140, a * 170, a * 134, a * 170);
    d.bezierCurveTo(a * 128, a * 169, a * 124, a * 167, a * 123, a * 161);
    d.bezierCurveTo(a * 128, a * 152, a * 128, a * 152, a * 133, a * 143);
    d.closePath();
    od(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 115);
    d.bezierCurveTo(a * 137.5, a * 121.5, a * 137.5, a * 121.5, a * 142, a * 128);
    d.bezierCurveTo(a * 141, a * 133, a * 138, a * 135, a * 133, a * 135);
    d.bezierCurveTo(a * 129, a * 135, a * 125, a * 132, a * 125, a * 129);
    d.bezierCurveTo(a * 129, a * 122, a * 129, a * 122, a * 133, a * 115);
    d.closePath();
    od(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 94);
    d.bezierCurveTo(a * 136.5, a * 98.5, a * 136.5, a * 98.5, a * 140, a * 103);
    d.bezierCurveTo(a * 139, a * 109, a * 137, a * 109, a * 133, a * 110);
    d.bezierCurveTo(a * 127, a * 108, a * 129, a * 107, a * 127, a * 105);
    d.bezierCurveTo(a * 130, a * 99.5, a * 130, a * 99.5, a * 133, a * 94);
    d.closePath();
    od(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 279);
    d.bezierCurveTo(a * 136.5, a * 287.5, a * 136.5, a * 287.5, a * 143, a * 296);
    d.bezierCurveTo(a * 143, a * 302, a * 139, a * 309, a * 131, a * 308);
    d.bezierCurveTo(a * 123, a * 306, a * 121, a * 303, a * 120, a * 297);
    d.bezierCurveTo(a * 125.5, a * 288.5, a * 125.5, a * 288.5, a * 131, a * 280);
    d.closePath();
    od(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 147, a * 303);
    d.bezierCurveTo(a * 151, a * 311, a * 151, a * 319, a * 147, a * 321);
    d.bezierCurveTo(a * 138, a * 320, a * 145, a * 308, a * 147, a * 303);
    d.closePath();
    od(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 303);
    d.bezierCurveTo(a * 115, a * 312, a * 118, a * 319, a * 115, a * 319);
    d.bezierCurveTo(a * 112, a * 324, a * 109, a * 318, a * 109, a * 314);
    d.bezierCurveTo(a * 109, a * 308, a * 112, a * 303, a * 115, a * 303);
    d.closePath();
    od(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 89, a * 280);
    d.bezierCurveTo(a * 83, a * 279, a * 80, a * 281, a * 81, a * 286);
    d.bezierCurveTo(a * 83, a * 290, a * 84, a * 290, a * 87, a * 286);
    d.closePath();
    od(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 94, a * 290);
    d.bezierCurveTo(a * 93, a * 294, a * 90, a * 303, a * 86, a * 298);
    d.bezierCurveTo(a * 84, a * 295, a * 84, a * 291, a * 89, a * 291);
    d.closePath();
    od(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 163, a * 295);
    d.bezierCurveTo(a * 175, a * 294, a * 176, a * 296, a * 175, a * 301);
    d.bezierCurveTo(a * 174, a * 305, a * 171, a * 305, a * 166, a * 300);
    d.closePath();
    od(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 172, a * 286);
    d.bezierCurveTo(a * 180, a * 285, a * 181, a * 285, a * 180, a * 291);
    d.bezierCurveTo(a * 176, a * 295, a * 174, a * 294, a * 172, a * 286);
    d.closePath();
    od(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    od(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    od(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    od(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    od(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    od(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    od(d, b[7]);
    return c;
  }
  function Ap(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 105;
    d.height = a * 144;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * -5, a * 0);
    e.save();
    e.translate(a * 52.5, a * 91.5);
    ad(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
    e.restore();
    od(e, c[0], c[0], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    ad(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    od(e, c[0], c[0], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    ad(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
    e.restore();
    od(e, c[0], c[0], a * 4);
    e.translate(a * 5, a * 0);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 52.5, a * 91.5);
    ad(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
    e.restore();
    od(e, c[1], c[2], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    ad(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    od(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    ad(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
    e.restore();
    od(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 60.5);
    e.bezierCurveTo(a * 44, a * 56.5, a * 44, a * 56.5, a * 39, a * 52.5);
    e.bezierCurveTo(a * 39, a * 46.5, a * 39, a * 46.5, a * 39, a * 40.5);
    e.bezierCurveTo(a * 44, a * 44, a * 44, a * 44, a * 49, a * 47.5);
    e.bezierCurveTo(a * 49, a * 54, a * 49, a * 54, a * 49, a * 60.5);
    e.closePath();
    od(e, c[7], c[6], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 40.5);
    e.bezierCurveTo(a * 66, a * 46.5, a * 66, a * 46.5, a * 66, a * 52.5);
    e.bezierCurveTo(a * 60.5, a * 56.5, a * 60.5, a * 56.5, a * 55, a * 60.5);
    e.bezierCurveTo(a * 56, a * 53, a * 56, a * 53, a * 57, a * 45.5);
    e.bezierCurveTo(a * 61.5, a * 43, a * 61.5, a * 43, a * 66, a * 40.5);
    e.closePath();
    od(e, c[7], c[6], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 33.5);
    e.bezierCurveTo(a * 55.5, a * 41, a * 55.5, a * 41, a * 59, a * 48.5);
    e.bezierCurveTo(a * 56, a * 58, a * 56, a * 58, a * 53, a * 67.5);
    e.bezierCurveTo(a * 49, a * 58, a * 49, a * 58, a * 45, a * 48.5);
    e.bezierCurveTo(a * 48.5, a * 41, a * 48.5, a * 41, a * 52, a * 33.5);
    e.closePath();
    od(e, c[9], c[8], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 47.5);
    e.bezierCurveTo(a * 54.5, a * 50.5, a * 54.5, a * 50.5, a * 57, a * 53.5);
    e.bezierCurveTo(a * 55, a * 60, a * 55, a * 60, a * 53, a * 66.5);
    e.bezierCurveTo(a * 50.5, a * 61, a * 50.5, a * 61, a * 48, a * 55.5);
    e.bezierCurveTo(a * 50, a * 52, a * 50, a * 52, a * 52, a * 48.5);
    e.closePath();
    od(e, c[11], c[10], a * 3);
    return d;
  }
  function xp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 161;
    d.height = a * 184;
    e.translate(0, a * 10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    od(e, c[0]);
    e.translate(0, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    od(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    od(e, c[1], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104.5, a * 35.609375);
    e.bezierCurveTo(a * 71.5, a * 36.609375, a * 57.5, a * 52.609375, a * 58.5, a * 81.609375);
    e.bezierCurveTo(a * 59.5, a * 103.609375, a * 66.5, a * 107.609375, a * 66.5, a * 116.609375);
    e.bezierCurveTo(a * 67.5, a * 128.609375, a * 65.5, a * 131.609375, a * 63.5, a * 137.609375);
    od(e, $q, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.5, a * 72.609375);
    e.bezierCurveTo(a * 38.5, a * 80.609375, a * 43.5, a * 81.609375, a * 37.5, a * 89.609375);
    od(e, undefined, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.5, a * 85.609375);
    e.bezierCurveTo(a * 75.5, a * 91.609375, a * 76.5, a * 96.609375, a * 81.5, a * 104.609375);
    od(e, undefined, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68.5, a * 122.609375);
    e.bezierCurveTo(a * 79.5, a * 130.609375, a * 74.5, a * 128.609375, a * 80.5, a * 134.609375);
    od(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.5, a * 18.609375);
    e.bezierCurveTo(a * 151.5, a * 28.609375, a * 151.5, a * 32.609375, a * 146.5, a * 40.609375);
    e.bezierCurveTo(a * 137.5, a * 26.609375, a * 138.5, a * 24.609375, a * 142.5, a * 19.609375);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146.5, a * 61.50892639160156);
    e.bezierCurveTo(a * 157.5, a * 69.50892639160156, a * 150.5, a * 79.50892639160156, a * 145.5, a * 81.50892639160156);
    e.bezierCurveTo(a * 140.5, a * 65.50892639160156, a * 144.5, a * 64.50892639160156, a * 146.5, a * 62.50892639160156);
    e.closePath();
    od(e, c[3]);
    return d;
  }
  function Jp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 144;
    d.height = a * 280;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    od(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    od(e, c[1], c[2], a * 6);
    return d;
  }
  function Mp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 109;
    d.height = a * 110;
    hd(e, a * 54.5, a * 55, a * 48.038209575038294);
    od(e, b[0], b[1], a * 8);
    if (c == 0) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54.928558349609375, a * 43.72320556640625);
      e.bezierCurveTo(a * 66.92855834960938, a * 31.72320556640625, a * 69.92855834960938, a * 29.72320556640625, a * 74.92855834960938, a * 29.72320556640625);
      e.bezierCurveTo(a * 86.92855834960938, a * 28.72320556640625, a * 91.92855834960938, a * 42.72320556640625, a * 89.92855834960938, a * 52.72320556640625);
      e.bezierCurveTo(a * 88.92855834960938, a * 63.72320556640625, a * 73.92855834960938, a * 75.72320556640625, a * 55.928558349609375, a * 87.72320556640625);
      e.bezierCurveTo(a * 37.928558349609375, a * 78.72320556640625, a * 26.928558349609375, a * 65.72320556640625, a * 19.928558349609375, a * 54.72320556640625);
      e.bezierCurveTo(a * 13.928558349609375, a * 42.72320556640625, a * 21.928558349609375, a * 28.72320556640625, a * 35.928558349609375, a * 29.72320556640625);
      e.bezierCurveTo(a * 45.928558349609375, a * 31.72320556640625, a * 51.928558349609375, a * 40.72320556640625, a * 53.928558349609375, a * 44.72320556640625);
      e.closePath();
      od(e, b[2]);
    } else if (c == 1) {
      e.save();
      e.translate(a * 55, a * 39.48748779296875);
      ad(e, a * -11.5, a * -36, a * 23, a * 72, a * 10);
      e.restore();
      od(e, b[2], b[3], a * 4);
      hd(e, a * 54.5, a * 78.48748779296875, a * 22.02271554554524);
      od(e, b[4], b[3], a * 4);
      e.save();
      e.translate(a * 55.5, a * 57.287506103515625);
      ad(e, a * -9, a * -16, a * 18, a * 32, a * 10);
      e.restore();
      od(e, b[4]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 25.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 25.287506103515625, a * 63.5, a * 25.287506103515625, a * 54.5, a * 25.287506103515625);
      e.closePath();
      od(e, undefined, b[5], a * 4);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 37.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 37.287506103515625, a * 60.5, a * 37.287506103515625, a * 54.5, a * 37.287506103515625);
      e.closePath();
      od(e, jn, b[5], a * 4);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 50.287506103515625);
      e.bezierCurveTo(a * 61, a * 50.287506103515625, a * 61, a * 50.287506103515625, a * 55.5, a * 50.287506103515625);
      e.closePath();
      od(e, undefined, b[5], a * 4);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 45.928558349609375, a * 55.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 67.29463195800781, a * 38.928558349609375, a * 67.29463195800781, a * 31.928558349609375, a * 79.29463195800781);
      e.bezierCurveTo(a * 15.928558349609375, a * 85.29463195800781, a * 17.928558349609375, a * 86.29463195800781, a * 17.928558349609375, a * 90.29463195800781);
      e.bezierCurveTo(a * 19.928558349609375, a * 94.29463195800781, a * 21.928558349609375, a * 94.29463195800781, a * 27.928558349609375, a * 92.29463195800781);
      e.bezierCurveTo(a * 29.928558349609375, a * 98.29463195800781, a * 30.928558349609375, a * 99.29463195800781, a * 33.928558349609375, a * 99.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 97.29463195800781, a * 38.928558349609375, a * 93.29463195800781, a * 37.928558349609375, a * 86.29463195800781);
      e.bezierCurveTo(a * 45.428558349609375, a * 73.29463195800781, a * 51.928558349609375, a * 64.29463195800781, a * 52.928558349609375, a * 60.29463195800781);
      e.closePath();
      od(e, b[2]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 55.928558349609375, a * 8.866058349609375);
      e.bezierCurveTo(a * 35.928558349609375, a * 35.866058349609375, a * 37.928558349609375, a * 48.866058349609375, a * 46.928558349609375, a * 62.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 72.86605834960938, a * 80.92855834960938, a * 55.866058349609375, a * 93.92855834960938, a * 36.866058349609375);
      e.closePath();
      od(e, b[3], b[4], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 93.92855834960938, a * 36.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 37.866058349609375, a * 77.92855834960938, a * 36.866058349609375, a * 67.92855834960938, a * 28.866058349609375);
      e.bezierCurveTo(a * 53.928558349609375, a * 16.866058349609375, a * 53.928558349609375, a * 14.866058349609375, a * 55.928558349609375, a * 7.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 4.866058349609375, a * 71.92855834960938, a * 7.866058349609375, a * 83.92855834960938, a * 13.866058349609375);
      e.bezierCurveTo(a * 96.92855834960938, a * 21.866058349609375, a * 95.92855834960938, a * 31.866058349609375, a * 92.92855834960938, a * 36.866058349609375);
      e.closePath();
      od(e, b[3], b[4], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68.92855834960938, a * 16.866058349609375);
      e.bezierCurveTo(a * 71.92855834960938, a * 13.866058349609375, a * 76.92855834960938, a * 16.866058349609375, a * 79.92855834960938, a * 21.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 24.866058349609375, a * 81.92855834960938, a * 27.866058349609375, a * 73.92855834960938, a * 24.866058349609375);
      e.bezierCurveTo(a * 67.92855834960938, a * 20.866058349609375, a * 66.92855834960938, a * 19.866058349609375, a * 67.92855834960938, a * 17.866058349609375);
      e.closePath();
      od(e, b[2]);
    } else if (c == 3) {
      e.scale(0.9, 0.9);
      e.translate(a * 6, 0);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54, a * 0.421875);
      e.bezierCurveTo(a * 84, a * 45.421875, a * 89, a * 51.421875, a * 83, a * 74.421875);
      e.bezierCurveTo(a * 74, a * 95.421875, a * 46, a * 98.421875, a * 30, a * 78.421875);
      e.bezierCurveTo(a * 22, a * 59.421875, a * 27, a * 49.421875, a * 34, a * 36.421875);
      e.closePath();
      od(e, b[2], b[3], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 74, a * 52.421875);
      e.bezierCurveTo(a * 77, a * 73.421875, a * 69, a * 81.421875, a * 58, a * 81.421875);
      e.bezierCurveTo(a * 66, a * 71.421875, a * 70, a * 66.421875, a * 74, a * 52.421875);
      e.closePath();
      od(e, b[3]);
    }
    return d;
  }
  function Bp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * 2, a * 1);
    e.globalAlpha = 0.3;
    hd(e, a * 98, a * 99, a * 100);
    od(e, c[0]);
    e.globalAlpha = 0.5;
    hd(e, a * 98, a * 99, a * 90);
    od(e, c[1]);
    return d;
  }
  function Ep(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 95;
    d.height = a * 85;
    if (c == 0) {
      e.translate(a * 7, a * 15);
      e.scale(0.9, 0.9);
      e.save();
      ad(e, a * 0, a * 5, a * 90, a * 60, 10);
      od(e, b[0]);
      e.globalCompositeOperation = "destination-out";
      hd(e, a * 25, a * 40, a * 10);
      e.fill();
      hd(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
      e.save();
      ad(e, 0, 0, a * 90, a * 60, a * 10);
      od(e, b[1]);
      e.globalCompositeOperation = "destination-out";
      hd(e, a * 25, a * 40, a * 10);
      e.fill();
      hd(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    } else if (c == 1) {
      e.scale(0.8, 0.8);
      e.translate(a * 15, a * 33);
      e.save();
      e.scale(0.56, 0.56);
      e.translate(a * -39, a * -60);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 32.5, a * 50.642852783203125);
      e.bezierCurveTo(a * 83, a * 69.64285278320312, a * 83, a * 69.64285278320312, a * 133.5, a * 88.64285278320312);
      e.bezierCurveTo(a * 93, a * 92.64285278320312, a * 93, a * 92.64285278320312, a * 52.5, a * 96.64285278320312);
      e.bezierCurveTo(a * 30.5, a * 100.64285278320312, a * 36.5, a * 94.64285278320312, a * 32.5, a * 84.64285278320312);
      e.bezierCurveTo(a * 21.5, a * 45.642852783203125, a * 24.5, a * 48.642852783203125, a * 31.5, a * 50.642852783203125);
      e.closePath();
      od(e, b[1]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 116.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 160.5, a * 67.14285278320312, a * 160.5, a * 67.14285278320312, a * 204.5, a * 48.642852783203125);
      e.bezierCurveTo(a * 220.5, a * 42.642852783203125, a * 208.5, a * 68.64285278320312, a * 205.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 202.5, a * 98.64285278320312, a * 199.5, a * 98.64285278320312, a * 188.5, a * 100.64285278320312);
      e.closePath();
      od(e, b[1]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 166.5, a * 68.64285278320312);
      e.bezierCurveTo(a * 147.5, a * 72.64285278320312, a * 145.5, a * 73.64285278320312, a * 142.5, a * 62.642852783203125);
      e.bezierCurveTo(a * 121.5, a * 12.642852783203125, a * 122.5, a * 5.642852783203125, a * 117.5, a * 15.642852783203125);
      e.bezierCurveTo(a * 105.5, a * 40.642852783203125, a * 105.5, a * 40.642852783203125, a * 93.5, a * 65.64285278320312);
      e.bezierCurveTo(a * 89.5, a * 74.64285278320312, a * 84.5, a * 72.64285278320312, a * 73.5, a * 74.64285278320312);
      e.bezierCurveTo(a * 98, a * 87.64285278320312, a * 98, a * 87.64285278320312, a * 122.5, a * 100.64285278320312);
      e.closePath();
      od(e, b[1]);
      e.restore();
      e.save();
      ad(e, 0, a * 15, a * 90, a * 50, a * 10);
      od(e, b[0]);
      ad(e, 0, a * 10, a * 90, a * 50, a * 10);
      od(e, b[1]);
      e.globalCompositeOperation = "destination-out";
      hd(e, a * 25, a * 40, a * 10);
      e.fill();
      hd(e, a * 65, a * 40, a * 10);
      e.fill();
      e.restore();
    }
    return d;
  }
  function Dp(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 77;
    e.translate(0, a * 10);
    e.scale(0.2, 0.2);
    e.translate(0, a * -30);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 36.5, a * 278.0625);
      e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
      e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
      e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
      e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
      e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
      e.closePath();
      od(e, b[0], b[3], a * 50);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    od(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    od(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    od(e, b[0], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    od(e, b[2], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    od(e, b[1]);
    e.scale(3, 3);
    e.translate(15, a * 10);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 4, a * 32);
      e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
      e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
      e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
      od(e, undefined, b[3], a * 28);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 56, a * 6);
      e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
      e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
      e.closePath();
      od(e, b[3], b[3], a * 28);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 32);
    e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
    e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
    od(e, undefined, b[1], a * 17);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 6);
    e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    e.closePath();
    od(e, b[1], b[1], a * 17);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 32);
    e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
    e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
    od(e, undefined, b[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 6);
    e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    e.closePath();
    od(e, b[2], b[2], a * 10);
    return d;
  }
  function Ip(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 117;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 90);
    e.bezierCurveTo(a * 20, a * 99.5, a * 20, a * 99.5, a * 36, a * 109);
    e.bezierCurveTo(a * 67, a * 92, a * 67, a * 92, a * 98, a * 75);
    e.bezierCurveTo(a * 91, a * 27, a * 91, a * 27, a * 91, a * 28);
    e.bezierCurveTo(a * 72.5, a * 16, a * 72.5, a * 16, a * 54, a * 4);
    e.bezierCurveTo(a * 33.5, a * 10, a * 33.5, a * 10, a * 13, a * 16);
    e.closePath();
    od(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6, a * 76);
    e.bezierCurveTo(a * 13.5, a * 51.5, a * 13.5, a * 51.5, a * 21, a * 27);
    e.bezierCurveTo(a * 37.5, a * 17, a * 37.5, a * 17, a * 54, a * 7);
    e.bezierCurveTo(a * 33.5, a * 12.5, a * 33.5, a * 12.5, a * 13, a * 18);
    e.closePath();
    od(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 62);
    e.bezierCurveTo(a * 28.5, a * 53, a * 28.5, a * 53, a * 33, a * 44);
    e.bezierCurveTo(a * 41.5, a * 41, a * 41.5, a * 41, a * 50, a * 38);
    e.bezierCurveTo(a * 52.5, a * 35, a * 52.5, a * 35, a * 55, a * 32);
    e.bezierCurveTo(a * 52, a * 30, a * 52, a * 30, a * 49, a * 28);
    e.bezierCurveTo(a * 38, a * 31.5, a * 38, a * 31.5, a * 27, a * 35);
    e.closePath();
    od(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66, a * 90.5, a * 66, a * 90.5, a * 96, a * 74);
    e.bezierCurveTo(a * 93, a * 52.5, a * 93, a * 52.5, a * 90, a * 31);
    e.bezierCurveTo(a * 87, a * 48, a * 87, a * 48, a * 84, a * 65);
    e.closePath();
    od(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 1, a * 89);
    e.bezierCurveTo(a * 18, a * 100, a * 34, a * 110, a * 35, a * 111);
    e.bezierCurveTo(a * 67, a * 93, a * 67, a * 93, a * 99, a * 75);
    e.bezierCurveTo(a * 100, a * 78.5, a * 100, a * 78.5, a * 101, a * 82);
    e.bezierCurveTo(a * 68, a * 99, a * 68, a * 99, a * 35, a * 116);
    e.bezierCurveTo(a * 18, a * 106.5, a * 18, a * 106.5, a * 1, a * 97);
    e.closePath();
    od(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66.5, a * 91.5, a * 66.5, a * 91.5, a * 97, a * 76);
    e.bezierCurveTo(a * 94.5, a * 52, a * 94.5, a * 52, a * 92, a * 28);
    e.bezierCurveTo(a * 73, a * 15.5, a * 73, a * 15.5, a * 54, a * 3);
    e.bezierCurveTo(a * 33, a * 9.5, a * 33, a * 9.5, a * 12, a * 16);
    e.bezierCurveTo(a * 8, a * 53, a * 8, a * 53, a * 4, a * 90);
    e.bezierCurveTo(a * 18.5, a * 99, a * 18.5, a * 99, a * 33, a * 108);
    e.closePath();
    od(e, os, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 71);
    e.bezierCurveTo(a * 30, a * 76.5, a * 30, a * 76.5, a * 38, a * 82);
    e.bezierCurveTo(a * 53, a * 72, a * 53, a * 72, a * 68, a * 62);
    e.bezierCurveTo(a * 68, a * 52, a * 68, a * 52, a * 68, a * 42);
    e.bezierCurveTo(a * 59.5, a * 35.5, a * 59.5, a * 35.5, a * 51, a * 29);
    e.bezierCurveTo(a * 39.5, a * 32, a * 39.5, a * 32, a * 28, a * 35);
    e.bezierCurveTo(a * 25, a * 52, a * 25, a * 52, a * 22, a * 69);
    e.closePath();
    od(e, tq, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 5, a * 89);
    e.bezierCurveTo(a * 20, a * 73, a * 12.5, a * 80.5, a * 20, a * 72);
    e.closePath();
    od(e, Rr, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 102);
    e.bezierCurveTo(a * 36, a * 92.5, a * 36, a * 92.5, a * 37, a * 83);
    e.closePath();
    od(e, md, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 62);
    e.bezierCurveTo(a * 81, a * 67.5, a * 81, a * 67.5, a * 94, a * 73);
    e.closePath();
    od(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70, a * 41);
    e.bezierCurveTo(a * 80, a * 35.5, a * 80, a * 35.5, a * 90, a * 30);
    e.closePath();
    od(e, oj, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 33);
    e.bezierCurveTo(a * 21.5, a * 26.5, a * 21.5, a * 26.5, a * 15, a * 20);
    e.closePath();
    od(e, $q, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 28);
    e.bezierCurveTo(a * 53, a * 17, a * 53, a * 17, a * 55, a * 6);
    e.closePath();
    od(e, undefined, c[4], a * 6);
    return d;
  }
  function Sp(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 600;
    var f = b * 22;
    var g = b * 4;
    var a = b * 4;
    c.width = e;
    c.height = f;
    ad(d, b * 5, b * 5, e - b * 10, f - b * 10, g);
    od(d, null, "#BBE8EF", a);
    return c;
  }
  function Qp() {
    new Date().getTime();
    Pc();
    np();
    ᐃΔ[540] = [];
    ᐃΔ[540][ns.ⵠᐃⵠ] = [];
    ᐃΔ[540][ns.ᐃᐃⵠ] = [];
    for (var a = 0; ns.ⵠΔΔⵠⵠΔⲆ > a; a++) {
      ᐃΔ[540][ns.ⵠᐃⵠ].push(Rq(nm(1, 4 + a, "#59B8CE")));
      ᐃΔ[540][ns.ᐃᐃⵠ].push(Rq(nm(1, 4 + a, "#90DDD9")));
    }
    ᐃΔ[470] = [];
    ᐃΔ[470][ns.ⵠᐃⵠ] = [];
    ᐃΔ[470][ns.ᐃᐃⵠ] = [];
    for (a = 0; a < ns.ᐃᐃⵠⵠᐃᐃᐃ; a++) {
      ᐃΔ[470][ns.ⵠᐃⵠ].push(Rq(nm(1, 4 + a, "#fff")));
      ᐃΔ[470][ns.ᐃᐃⵠ].push(Rq(nm(1, 4 + a, "#fff")));
    }
    ᐃΔ[471] = [];
    ᐃΔ[471][ns.ⵠᐃⵠ] = [];
    ᐃΔ[471][ns.ᐃᐃⵠ] = [];
    for (a = 0; a < ns.ᐃᐃⵠⵠᐃᐃᐃ; a++) {
      ᐃΔ[471][ns.ⵠᐃⵠ].push(Rq(nm(1, 6 + a, "#DDCD8A")));
      ᐃΔ[471][ns.ᐃᐃⵠ].push(Rq(nm(1, 6 + a, "#155E57")));
    }
    ᐃΔ[942] = [];
    ᐃΔ[942][ns.ⵠᐃⵠ] = [];
    ᐃΔ[942][ns.ᐃᐃⵠ] = [];
    for (a = 0; ns.ᐃΔⵠᐃⵠⵠΔ > a; a++) {
      ᐃΔ[942][ns.ⵠᐃⵠ].push(Rq(nm(1, 4 + a, "#353326")));
      ᐃΔ[942][ns.ᐃᐃⵠ].push(Rq(nm(1, 4 + a, "#1D2526")));
    }
    ᐃΔ[201] = [];
    ᐃΔ[201][ns.ⵠᐃⵠ] = Rq(Td(1.5, 0, ["#ee71a9"]));
    ᐃΔ[201][ns.ᐃᐃⵠ] = Rq(Td(1.5, 0, ["#ee71a9"]));
    ᐃΔ[872] = [ᐃΔ[201]];
    ᐃΔ[872][1] = [];
    ᐃΔ[872][2] = [];
    ᐃΔ[872][3] = [];
    ᐃΔ[872][4] = [];
    ᐃΔ[872][1][ns.ⵠᐃⵠ] = Rq(Td(1.5, 0, ["#e2d63b"]));
    ᐃΔ[872][1][ns.ᐃᐃⵠ] = Rq(Td(1.5, 0, ["#e2d63b"]));
    ᐃΔ[872][2][ns.ⵠᐃⵠ] = Rq(Td(1.5, 0, ["#309cbd"]));
    ᐃΔ[872][2][ns.ᐃᐃⵠ] = Rq(Td(1.5, 0, ["#309cbd"]));
    ᐃΔ[872][3][ns.ⵠᐃⵠ] = Rq(Td(1.5, 0, ["#cd232d"]));
    ᐃΔ[872][3][ns.ᐃᐃⵠ] = Rq(Td(1.5, 0, ["#cd232d"]));
    ᐃΔ[872][4][ns.ⵠᐃⵠ] = Rq(Td(1.5, 0, ["#42b672"]));
    ᐃΔ[872][4][ns.ᐃᐃⵠ] = Rq(Td(1.5, 0, ["#42b672"]));
    if (ⲆⵠΔⵠ.ⵠΔΔⵠⲆⲆΔ("cti", oc.location.href)) {
      document.getElementById("version").innerHTML += "[CTI]";
    } else {
      Rq = function (a) {
        a.loaded = 1;
        return a;
      };
    }
    ᐃΔ[797] = Rq(function () {
      var a = document.createElement("canvas");
      var b = a.getContext("2d");
      a.width = 460;
      a.height = 220;
      b.fillStyle = "#3a2a0d";
      b.fillRect(0, 0, a.width, a.height);
      b.lineWidth = 4;
      b.beginPath();
      b.strokeStyle = "#513810";
      for (var c = 20; c < 220; c += 20) {
        b.moveTo(0, c);
        b.lineTo(460, c);
        b.closePath();
        b.stroke();
      }
      return a;
    }());
    ᐃΔ[108] = [];
    ᐃΔ[108][ns.ⵠᐃⵠ] = [];
    ᐃΔ[108][ns.ᐃᐃⵠ] = [];
    ᐃΔ[108][ns.ⵠᐃⵠ].push(Rq(Bu(1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ᐃΔ[108][ns.ⵠᐃⵠ].push(Rq(Bu(0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ᐃΔ[108][ns.ⵠᐃⵠ].push(Rq(Bu(0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ᐃΔ[108][ns.ᐃᐃⵠ].push(Rq(Bu(1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ᐃΔ[108][ns.ᐃᐃⵠ].push(Rq(Bu(0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ᐃΔ[108][ns.ᐃᐃⵠ].push(Rq(Bu(0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ᐃΔ[111] = [];
    ᐃΔ[111][ns.ⵠᐃⵠ] = [];
    ᐃΔ[111][ns.ᐃᐃⵠ] = [];
    ᐃΔ[111][ns.ⵠᐃⵠ].push(Rq(Au(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃΔ[111][ns.ⵠᐃⵠ].push(Rq(Au(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃΔ[111][ns.ⵠᐃⵠ].push(Rq(Au(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃΔ[111][ns.ᐃᐃⵠ].push(Rq(Au(1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
    ᐃΔ[111][ns.ᐃᐃⵠ].push(Rq(Au(1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
    ᐃΔ[111][ns.ᐃᐃⵠ].push(Rq(Au(1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
    ᐃΔ[112] = [];
    ᐃΔ[112][ns.ⵠᐃⵠ] = [];
    ᐃΔ[112][ns.ᐃᐃⵠ] = [];
    ᐃΔ[112][ns.ⵠᐃⵠ].push(Rq(yu(1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ᐃΔ[112][ns.ⵠᐃⵠ].push(Rq(yu(0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ᐃΔ[112][ns.ⵠᐃⵠ].push(Rq(yu(0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ᐃΔ[112][ns.ᐃᐃⵠ].push(Rq(yu(1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ᐃΔ[112][ns.ᐃᐃⵠ].push(Rq(yu(0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ᐃΔ[112][ns.ᐃᐃⵠ].push(Rq(yu(0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ᐃΔ[239] = [];
    ᐃΔ[239][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆΔⲆⲆⲆᐃⵠ;
    ᐃΔ[239][ns.ᐃᐃⵠ] = ᐃᐃ.ΔᐃᐃⵠΔᐃΔ;
    ᐃΔ[286] = [];
    ᐃΔ[286][ns.ⵠᐃⵠ] = Rq(fu(0.6, ["#0d1b1c"]));
    ᐃΔ[286][ns.ᐃᐃⵠ] = Rq(fu(0.6, ["#030d14"]));
    ᐃΔ[793] = [];
    ᐃΔ[793][ns.ⵠᐃⵠ] = Rq(Zt(0.6, ["#2a2938", "#242330"]));
    ᐃΔ[793][ns.ᐃᐃⵠ] = Rq(Zt(0.6, ["#1b1e30", "#161921"]));
    ᐃΔ[820] = [];
    ᐃΔ[820][ns.ⵠᐃⵠ] = Rq(xd(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
    ᐃΔ[820][ns.ᐃᐃⵠ] = Rq(xd(0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
    ᐃΔ[821] = [];
    ᐃΔ[821][ns.ⵠᐃⵠ] = Rq(Bd(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
    ᐃΔ[821][ns.ᐃᐃⵠ] = Rq(Bd(0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
    ᐃΔ[822] = [];
    ᐃΔ[822][ns.ⵠᐃⵠ] = Rq($t(0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
    ᐃΔ[822][ns.ᐃᐃⵠ] = Rq($t(0.4, ["#030d14", "#11635e", "#02373e"]));
    ᐃΔ[823] = Rq(Jd(0.6, ["#BB0000"]));
    ᐃΔ[824] = Rq(Jd(0.6, ["#DBE71C"]));
    ᐃΔ[825] = Rq(Jd(0.6, ["#00BB00"]));
    ᐃΔ[109] = [];
    ᐃΔ[109][ns.ⵠᐃⵠ] = [];
    ᐃΔ[109][ns.ᐃᐃⵠ] = [];
    ᐃΔ[109][ns.ⵠᐃⵠ].push(eu(1.1, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], Kk, 0));
    ᐃΔ[109][ns.ⵠᐃⵠ].push(eu(1.1, ["#0e3022", "#0f9862", "#0b8750", "#26ab6e"], go, 0));
    ᐃΔ[109][ns.ⵠᐃⵠ].push(eu(0.9, ["#0e3022", "#0e7d4c", "#258a4d", "#248c4d"], f, 0));
    ᐃΔ[109][ns.ⵠᐃⵠ].push(eu(0.9, ["#0e3022", "#096d41", "#1f7b43", "#1f7b43"], Rg, 0));
    ᐃΔ[109][ns.ⵠᐃⵠ].push(eu(0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], Kk, 0));
    ᐃΔ[109][ns.ⵠᐃⵠ].push(eu(0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], true, 0));
    ᐃΔ[109][ns.ᐃᐃⵠ].push(eu(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], fr, 0));
    ᐃΔ[109][ns.ᐃᐃⵠ].push(eu(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], true, 0));
    ᐃΔ[109][ns.ᐃᐃⵠ].push(eu(0.9, ["#030d14", "#0b3534", "#144443", "#174240"], fr, 0));
    ᐃΔ[109][ns.ᐃᐃⵠ].push(eu(0.9, ["#030d14", "#0b3534", "#144443", "#174240"], true, 0));
    ᐃΔ[109][ns.ᐃᐃⵠ].push(eu(0.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], false, 0));
    ᐃΔ[109][ns.ᐃᐃⵠ].push(eu(0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], Tk, 0));
    ᐃΔ[307] = [];
    ᐃΔ[307][ns.ⵠᐃⵠ] = [];
    ᐃΔ[307][ns.ᐃᐃⵠ] = [];
    ᐃΔ[307][ns.ⵠᐃⵠ].push(Rq(nu(lu(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], false), ᐃΔ[109][ns.ⵠᐃⵠ][0])));
    ᐃΔ[307][ns.ⵠᐃⵠ].push(Rq(nu(lu(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], Xr), ᐃΔ[109][ns.ⵠᐃⵠ][1])));
    ᐃΔ[307][ns.ᐃᐃⵠ].push(Rq(nu(lu(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], false), ᐃΔ[109][ns.ᐃᐃⵠ][0])));
    ᐃΔ[307][ns.ᐃᐃⵠ].push(Rq(nu(lu(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], Rg), ᐃΔ[109][ns.ᐃᐃⵠ][1])));
    ᐃΔ[307][ns.ⵠᐃⵠ].push(Rq(nu(lu(0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], Zq), ᐃΔ[109][ns.ⵠᐃⵠ][2])));
    ᐃΔ[307][ns.ⵠᐃⵠ].push(Rq(nu(lu(0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], true), ᐃΔ[109][ns.ⵠᐃⵠ][2])));
    ᐃΔ[307][ns.ᐃᐃⵠ].push(Rq(nu(lu(0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], f), ᐃΔ[109][ns.ᐃᐃⵠ][2])));
    ᐃΔ[307][ns.ᐃᐃⵠ].push(Rq(nu(lu(0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], Dl), ᐃΔ[109][ns.ᐃᐃⵠ][3])));
    ᐃΔ[109][ns.ⵠᐃⵠ][5] = Rq(ᐃΔ[109][ns.ⵠᐃⵠ][5]);
    ᐃΔ[109][ns.ⵠᐃⵠ][4] = Rq(ᐃΔ[109][ns.ⵠᐃⵠ][4]);
    ᐃΔ[109][ns.ⵠᐃⵠ][3] = Rq(ᐃΔ[109][ns.ⵠᐃⵠ][3]);
    ᐃΔ[109][ns.ⵠᐃⵠ][2] = Rq(ᐃΔ[109][ns.ⵠᐃⵠ][2]);
    ᐃΔ[109][ns.ⵠᐃⵠ][1] = Rq(ᐃΔ[109][ns.ⵠᐃⵠ][1]);
    ᐃΔ[109][ns.ⵠᐃⵠ][0] = Rq(ᐃΔ[109][ns.ⵠᐃⵠ][0]);
    ᐃΔ[109][ns.ᐃᐃⵠ][5] = Rq(ᐃΔ[109][ns.ᐃᐃⵠ][5]);
    ᐃΔ[109][ns.ᐃᐃⵠ][4] = Rq(ᐃΔ[109][ns.ᐃᐃⵠ][4]);
    ᐃΔ[109][ns.ᐃᐃⵠ][3] = Rq(ᐃΔ[109][ns.ᐃᐃⵠ][3]);
    ᐃΔ[109][ns.ᐃᐃⵠ][2] = Rq(ᐃΔ[109][ns.ᐃᐃⵠ][2]);
    ᐃΔ[109][ns.ᐃᐃⵠ][1] = Rq(ᐃΔ[109][ns.ᐃᐃⵠ][1]);
    ᐃΔ[109][ns.ᐃᐃⵠ][0] = Rq(ᐃΔ[109][ns.ᐃᐃⵠ][0]);
    ᐃΔ[8] = [];
    ᐃΔ[8][ns.ⵠᐃⵠ] = Rq(bd(4, hu(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
    ᐃΔ[8][ns.ᐃᐃⵠ] = Rq(bd(4, hu(0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
    ᐃΔ[1] = [];
    ᐃΔ[1][ns.ⵠᐃⵠ] = Rq(bd(4, hu(0.75, Qh, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ᐃΔ[1][ns.ᐃᐃⵠ] = Rq(bd(4, hu(0.75, Tk, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
    ᐃΔ[3] = [];
    ᐃΔ[3][ns.ⵠᐃⵠ] = Rq(bd(4, hu(0.75, ls, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ᐃΔ[3][ns.ᐃᐃⵠ] = Rq(bd(4, hu(0.75, Tk, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
    ᐃΔ[4] = [];
    ᐃΔ[4][ns.ⵠᐃⵠ] = Rq(bd(4, hu(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ᐃΔ[4][ns.ᐃᐃⵠ] = Rq(bd(4, hu(0.75, Cg, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ᐃΔ[31] = [];
    ᐃΔ[31][ns.ⵠᐃⵠ] = Rq(bd(4, hu(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ᐃΔ[31][ns.ᐃᐃⵠ] = Rq(bd(4, hu(0.75, Cg, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ᐃΔ[9] = [];
    ᐃΔ[9][ns.ⵠᐃⵠ] = Rq(bd(3, tu(0.17, oo, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
    ᐃΔ[9][ns.ᐃᐃⵠ] = Rq(bd(3, tu(0.17, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
    ᐃΔ[199] = [];
    ᐃΔ[199][ns.ⵠᐃⵠ] = Rq(bd(3, em(0.32, Cg, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
    ᐃΔ[199][ns.ᐃᐃⵠ] = Rq(bd(3, em(0.42, wi, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
    ᐃΔ[57] = [];
    ᐃΔ[57][ns.ⵠᐃⵠ] = Rq(bd(3, vu(0.4, Xk, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
    ᐃΔ[57][ns.ᐃᐃⵠ] = Rq(bd(3, vu(0.4, true, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
    ᐃΔ[0] = [];
    ᐃΔ[0][ns.ⵠᐃⵠ] = Rq(bd(3, uu(0.4, go, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
    ᐃΔ[0][ns.ᐃᐃⵠ] = Rq(bd(3, uu(0.4, true, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
    ᐃΔ[5] = [];
    ᐃΔ[5][ns.ⵠᐃⵠ] = Rq(bd(3, iu(0.4, Rg, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
    ᐃΔ[5][ns.ᐃᐃⵠ] = Rq(bd(3, iu(0.4, true, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
    ᐃΔ[6] = [];
    ᐃΔ[6][ns.ⵠᐃⵠ] = Rq(bd(3, Du(0.4, true, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
    ᐃΔ[6][ns.ᐃᐃⵠ] = Rq(bd(3, Du(0.4, true, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
    ᐃΔ[30] = [];
    ᐃΔ[30][ns.ⵠᐃⵠ] = Rq(bd(3, zu(0.4, Cg, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
    ᐃΔ[30][ns.ᐃᐃⵠ] = Rq(bd(3, zu(0.4, Qh, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
    ᐃΔ[285] = [];
    ᐃΔ[285][ns.ⵠᐃⵠ] = [];
    ᐃΔ[285][ns.ᐃᐃⵠ] = [];
    ᐃΔ[285][ns.ⵠᐃⵠ].push(Rq(om(0.9, 0, ["#0d4f35"], 0)));
    ᐃΔ[285][ns.ⵠᐃⵠ].push(Rq(om(0.9, 0, ["#0d4f35"], 1)));
    ᐃΔ[285][ns.ⵠᐃⵠ].push(Rq(om(0.9, 0, ["#0d4f35"], 2)));
    ᐃΔ[285][ns.ᐃᐃⵠ].push(Rq(om(0.9, 0, ["#053339"], 0)));
    ᐃΔ[285][ns.ᐃᐃⵠ].push(Rq(om(0.9, 0, ["#053339"], 1)));
    ᐃΔ[285][ns.ᐃᐃⵠ].push(Rq(om(0.9, 0, ["#053339"], 2)));
    ᐃΔ[285][ns.ⵠᐃⵠ].push(Rq(im(0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
    ᐃΔ[285][ns.ⵠᐃⵠ].push(Rq(im(0.8, ["#292002", "#ba930e", "#6d5704"])));
    ᐃΔ[285][ns.ᐃᐃⵠ].push(Rq(im(0.9, ["#052919", "#0a4738", "#06321f"])));
    ᐃΔ[285][ns.ᐃᐃⵠ].push(Rq(im(0.8, ["#052918", "#08491c", "#063417"])));
    ᐃΔ[183] = [];
    ᐃΔ[183][ns.ⵠᐃⵠ] = Rq(bd(Math.PI / 2, Fc(0.25, nh, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
    ᐃΔ[183][ns.ᐃᐃⵠ] = Rq(bd(Math.PI / 2, Fc(0.25, true, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
    ᐃΔ[803] = [];
    ᐃΔ[803].push(Rq(tp(0.25, ["#44301b", "#57442a", "#523e26"], 0)));
    ᐃΔ[803].push(Rq(tp(0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
    ᐃΔ[803].push(Rq(tp(0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
    ᐃΔ[802] = [];
    ᐃΔ[802][ns.ⵠᐃⵠ] = [];
    ᐃΔ[802][ns.ᐃᐃⵠ] = [];
    ᐃΔ[802][ns.ⵠᐃⵠ].push(Rq(bd(Math.PI / 2, lp(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
    ᐃΔ[802][ns.ᐃᐃⵠ].push(Rq(bd(Math.PI / 2, lp(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
    ᐃΔ[802][ns.ⵠᐃⵠ].push(Rq(bd(Math.PI / 2, lp(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
    ᐃΔ[802][ns.ᐃᐃⵠ].push(Rq(bd(Math.PI / 2, lp(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
    ᐃΔ[802][ns.ⵠᐃⵠ].push(Rq(bd(Math.PI / 2, lp(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
    ᐃΔ[802][ns.ᐃᐃⵠ].push(Rq(bd(Math.PI / 2, lp(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3))));
    ᐃΔ[802][ns.ⵠᐃⵠ].push(Rq(bd(Math.PI / 2, lp(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
    ᐃΔ[802][ns.ᐃᐃⵠ].push(Rq(bd(Math.PI / 2, lp(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
    ᐃΔ[110] = [];
    ᐃΔ[110][ns.ⵠᐃⵠ] = [Rq(Nu(1.2, true, ["#0e3022", "#0b8052", "#077b49"]))];
    ᐃΔ[110][ns.ᐃᐃⵠ] = [Rq(Nu(1.2, true, ["#030d14", "#084442", "#0a4049"]))];
    ᐃΔ[623] = [];
    ᐃΔ[623][ns.ⵠᐃⵠ] = Rq(Nu(0.8, Ee, ["#0e3022", "#68622D", "#665329"]));
    ᐃΔ[623][ns.ᐃᐃⵠ] = Rq(Nu(0.8, Dl, ["#030d14", "#0F3A24", "#083326"]));
    ᐃΔ[189] = [];
    ᐃΔ[189][ns.ⵠᐃⵠ] = Rq(hp(0.5, Rg, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
    ᐃΔ[189][ns.ᐃᐃⵠ] = Rq(hp(0.5, Cg, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
    ᐃΔ[192] = [];
    ᐃΔ[192][ns.ⵠᐃⵠ] = Rq(fd(0.5, Hl, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
    ᐃΔ[192][ns.ᐃᐃⵠ] = Rq(fd(0.5, true, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
    ᐃΔ[194] = [];
    ᐃΔ[194][ns.ⵠᐃⵠ] = Rq(Vm(0.5, Tk, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
    ᐃΔ[194][ns.ᐃᐃⵠ] = Rq(Vm(0.5, true, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
    ᐃΔ[287] = [];
    ᐃΔ[287][ns.ⵠᐃⵠ] = Rq(Nu(0.8, Hl, ["#1b170c", "#0b8052", "#077b49"]));
    ᐃΔ[287][ns.ᐃᐃⵠ] = Rq(Nu(0.8, nh, ["#030d14", "#084442", "#0a4049"]));
    ᐃΔ[813] = [];
    ᐃΔ[813][ns.ⵠᐃⵠ] = Rq(hp(0.5, true, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
    ᐃΔ[813][ns.ᐃᐃⵠ] = Rq(hp(0.5, true, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
    ᐃΔ[839] = [];
    ᐃΔ[839][ns.ⵠᐃⵠ] = Rq(fd(0.5, true, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
    ᐃΔ[839][ns.ᐃᐃⵠ] = Rq(fd(0.5, true, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
    ᐃΔ[869] = [];
    ᐃΔ[869][ns.ⵠᐃⵠ] = Rq(Vm(0.5, Cg, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
    ᐃΔ[869][ns.ᐃᐃⵠ] = Rq(Vm(0.5, true, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
    ᐃΔ[854] = [];
    ᐃΔ[854][ns.ⵠᐃⵠ] = Rq(Vc(0.45, Ee, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
    ᐃΔ[854][ns.ᐃᐃⵠ] = Rq(Vc(0.45, Rg, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
    ᐃΔ[859] = Rq(Vc(0.65, Xs, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
    ᐃΔ[294] = [];
    ᐃΔ[294][ns.ⵠᐃⵠ] = Rq(Fu(1.4, 0, ["#ac222a", "#e6636a"]));
    ᐃΔ[294][ns.ᐃᐃⵠ] = Rq(Fu(1.4, 0, ["#46195e", "#744188"]));
    ᐃΔ[288] = [];
    ᐃΔ[288][ns.ⵠᐃⵠ] = Rq(Ut(0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
    ᐃΔ[288][ns.ᐃᐃⵠ] = Rq(Ut(0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
    ᐃΔ[118] = [];
    ᐃΔ[118][ns.ⵠᐃⵠ] = Rq(Tt(0.9, 0, ["#4d2d14", "#432516"]));
    ᐃΔ[118][ns.ᐃᐃⵠ] = Rq(Tt(0.9, 0, ["#282404", "#0a0a01"]));
    ᐃΔ[113] = [];
    ᐃΔ[113][ns.ⵠᐃⵠ] = Rq(Wt(0.9, 0, ["#4d2d14", "#432516"]));
    ᐃΔ[113][ns.ᐃᐃⵠ] = Rq(Wt(0.9, 0, ["#282404", "#0a0a01"]));
    ᐃΔ[289] = [];
    ᐃΔ[289][ns.ⵠᐃⵠ] = Rq(_t(0.9, 0, ["#efd435"]));
    ᐃΔ[289][ns.ᐃᐃⵠ] = Rq(_t(0.9, 0, ["#fffabb"]));
    ᐃΔ[282] = [];
    ᐃΔ[282][ns.ⵠᐃⵠ] = Rq(Vt(0.9, 0, ["#efd435"]));
    ᐃΔ[282][ns.ᐃᐃⵠ] = Rq(Vt(0.9, 0, ["#fffabb"]));
    ᐃΔ[816] = [];
    ᐃΔ[816][ns.ⵠᐃⵠ] = Rq(_t(0.9, 0, ["#efd435"]));
    ᐃΔ[816][ns.ᐃᐃⵠ] = Rq(_t(0.9, 0, ["rgba(255, 84, 0, 1)"]));
    ᐃΔ[817] = [];
    ᐃΔ[817][ns.ⵠᐃⵠ] = Rq(Vt(0.9, 0, ["#efd435"]));
    ᐃΔ[817][ns.ᐃᐃⵠ] = Rq(Vt(0.9, 0, ["#ff5704"]));
    ᐃΔ[324] = Rq(Qd(1, "#ffffff"));
    ᐃΔ[301] = Rq(Qd(1.5, "#ffffff"));
    ᐃΔ[306] = Rq(Cu(1, "Your score:", 15, "#FFF"));
    ᐃΔ[655] = Rq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 243;
      c.height = a * 172;
      hd(d, a * 119.5, a * 140.125, a * 19);
      od(d, undefined, b[1], a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 36.5, a * 20.125);
      d.bezierCurveTo(a * 119.5, a * 20.625, a * 119.5, a * 20.625, a * 202.5, a * 21.125);
      d.bezierCurveTo(a * 214.5, a * 22.125, a * 216.5, a * 26.125, a * 217.5, a * 35.125);
      d.bezierCurveTo(a * 221, a * 76.125, a * 221, a * 76.125, a * 224.5, a * 117.125);
      d.bezierCurveTo(a * 225.5, a * 127.125, a * 221.5, a * 131.125, a * 210.5, a * 132.125);
      d.bezierCurveTo(a * 117.5, a * 132.125, a * 117.5, a * 132.125, a * 24.5, a * 132.125);
      d.bezierCurveTo(a * 14.5, a * 131.125, a * 13.5, a * 126.125, a * 16.5, a * 111.125);
      d.bezierCurveTo(a * 19.5, a * 73.125, a * 19.5, a * 73.125, a * 22.5, a * 35.125);
      d.bezierCurveTo(a * 23.5, a * 23.125, a * 29.5, a * 21.125, a * 36.5, a * 20.125);
      d.closePath();
      od(d, b[0], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 15.5, a * 138.625);
      d.bezierCurveTo(a * 120, a * 138.625, a * 120, a * 138.625, a * 224.5, a * 138.625);
      d.closePath();
      od(d, undefined, b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 13.5, a * 131.625);
      d.bezierCurveTo(a * 119.5, a * 131.625, a * 119.5, a * 131.625, a * 225.5, a * 131.625);
      d.closePath();
      od(d, undefined, b[3], a * 10);
      hd(d, a * 119.5, a * 140.125, a * 14.866068747318506);
      od(d, b[4], b[5], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 106.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 137.625, a * 118.5, a * 136.625, a * 123.5, a * 138.625);
      d.bezierCurveTo(a * 131.5, a * 145.625, a * 133.5, a * 148.625, a * 127.5, a * 152.625);
      d.bezierCurveTo(a * 115.5, a * 158.625, a * 111.5, a * 153.625, a * 106.5, a * 147.625);
      d.closePath();
      od(d, b[6], b[7], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 159.625, a * 124.5, a * 156.625, a * 132.5, a * 146.625);
      od(d, Nl, b[8], a * 5);
      d.save();
      d.translate(a * 75.5, a * 80.125);
      ad(d, a * -39, a * -40, a * 78, a * 78, a * 10);
      d.restore();
      od(d, b[9]);
      d.save();
      d.translate(a * 167, a * 80.125);
      ad(d, a * -38.5, a * -39, a * 78, a * 78, a * 10);
      d.restore();
      od(d, b[9]);
      return c;
    }(0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
    ᐃΔ[656] = ᐃᐃ.ⵠᐃⲆᐃⵠⵠⵠ;
    ᐃΔ[135] = [];
    ᐃΔ[135][ns.ⵠᐃⵠ] = Rq(Yd(1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ᐃΔ[135][ns.ᐃᐃⵠ] = Rq(Yd(1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ᐃΔ[641] = [];
    ᐃΔ[641][ns.ⵠᐃⵠ] = Rq(Ud(2, Xr, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ᐃΔ[641][ns.ᐃᐃⵠ] = Rq(Ud(2, Cq, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ᐃΔ[642] = [];
    ᐃΔ[642][ns.ⵠᐃⵠ] = Rq(Od(1.5, Cq, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ᐃΔ[642][ns.ᐃᐃⵠ] = Rq(Od(1.5, Dl, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ᐃΔ[134] = [];
    ᐃΔ[134][ns.ⵠᐃⵠ] = Rq(_d(2.2, 0, ["#A89F67", "#9E8456"]));
    ᐃΔ[134][ns.ᐃᐃⵠ] = Rq(_d(2.2, 0, ["#0B4049", "#08383D"]));
    ᐃΔ[638] = [];
    ᐃΔ[638][ns.ⵠᐃⵠ] = Rq(_d(2.2, 0, ["#68622D", "#665329"]));
    ᐃΔ[638][ns.ᐃᐃⵠ] = Rq(_d(2.2, 0, ["#0F3A24", "#083326"]));
    ᐃΔ[321] = [];
    ᐃΔ[321][ns.ⵠᐃⵠ] = Rq(Pu(0.8, 0, ["#A89F67", "#9E8456"]));
    ᐃΔ[321][ns.ᐃᐃⵠ] = Rq(Pu(0.8, 0, ["#15514F", "#0F3F3D"]));
    ᐃΔ[811] = [];
    ᐃΔ[811][ns.ⵠᐃⵠ] = Rq(Pu(0.8, 0, ["#c67933", "#b17238"]));
    ᐃΔ[811][ns.ᐃᐃⵠ] = Rq(Pu(0.8, 0, ["#043c37", "#032b23"]));
    ᐃΔ[984] = [];
    ᐃΔ[984][ns.ⵠᐃⵠ] = Rq(Pu(0.8, 0, ["#3a8214", "#4a9c1e"]));
    ᐃΔ[984][ns.ᐃᐃⵠ] = Rq(Pu(0.8, 0, ["#032d29", "#044640"]));
    ᐃΔ[837] = [];
    ᐃΔ[837][ns.ⵠᐃⵠ] = Rq(Pu(0.8, 0, ["#e8e8e8", "#bbbbbb"]));
    ᐃΔ[837][ns.ᐃᐃⵠ] = Rq(Pu(0.8, 0, ["#1c6161", "#07413f"]));
    ᐃΔ[848] = [];
    ᐃΔ[848][ns.ⵠᐃⵠ] = Rq(Pu(0.8, 0, ["#328a56", "#449573"]));
    ᐃΔ[848][ns.ᐃᐃⵠ] = Rq(Pu(0.8, 0, ["#043c37", "#032b23"]));
    ᐃΔ[952] = [];
    ᐃΔ[952][ns.ⵠᐃⵠ] = Rq(Pu(0.8, 0, ["#c98e2f", "#a36b11"]));
    ᐃΔ[952][ns.ᐃᐃⵠ] = Rq(Pu(0.8, 0, ["#043c37", "#032b23"]));
    ᐃΔ[962] = [];
    ᐃΔ[962][ns.ⵠᐃⵠ] = Rq(Pu(0.8, 0, ["#b22419", "#99110e"]));
    ᐃΔ[962][ns.ᐃᐃⵠ] = Rq(Pu(0.8, 0, ["#04323c", "#03222b"]));
    ᐃΔ[969] = [];
    ᐃΔ[969][ns.ⵠᐃⵠ] = Rq(Pu(0.8, 0, ["#13a56d", "#098a58"]));
    ᐃΔ[969][ns.ᐃᐃⵠ] = Rq(Pu(0.8, 0, ["#043c37", "#032b23"]));
    ᐃΔ[657] = Kd(1, [{
      f: _d,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ᐃΔ[723] = Kd(1, [{
      f: Wt,
      x: 0,
      y: 0,
      a: 1,
      r: -Math.PI / 5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ᐃΔ[724] = Kd(1, [{
      f: Ec,
      x: 0,
      y: -5,
      a: 1,
      r: 0,
      c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ᐃΔ[334] = Kd(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ᐃΔ[115] = [];
    ᐃΔ[115][ns.ⵠᐃⵠ] = Rq(Md(0.9, 0, ["#7d613e", "#9e7e5a"]));
    ᐃΔ[115][ns.ᐃᐃⵠ] = Rq(Md(0.9, 0, ["#084442", "#125e5a"]));
    ᐃΔ[132] = [];
    ᐃΔ[132][ns.ⵠᐃⵠ] = Rq(Md(0.9, 0, ["#9E8456", "#A89F67"]));
    ᐃΔ[132][ns.ᐃᐃⵠ] = Rq(Md(0.9, 0, ["#1b6f6a", "#0d4e4c"]));
    ᐃΔ[668] = [];
    ᐃΔ[668][ns.ⵠᐃⵠ] = Rq(Md(0.9, 0, ["#665329", "#68622D"]));
    ᐃΔ[668][ns.ᐃᐃⵠ] = Rq(Md(0.9, 0, ["#083326", "#0F3A24"]));
    ᐃΔ[188] = [];
    ᐃΔ[188][ns.ⵠᐃⵠ] = Rq(Md(0.9, 0, ["#c67933", "#ec952d"]));
    ᐃΔ[188][ns.ᐃᐃⵠ] = Rq(Md(0.9, 0, ["#0e6553", "#094437"]));
    ᐃΔ[210] = [];
    ᐃΔ[210][ns.ⵠᐃⵠ] = Rq(Md(0.9, 0, ["#375809", "#4b770e"]));
    ᐃΔ[210][ns.ᐃᐃⵠ] = Rq(Md(0.9, 0, ["#09542d", "#0d5d2f"]));
    ᐃΔ[985] = [];
    ᐃΔ[985][ns.ⵠᐃⵠ] = Rq(Md(0.9, 0, ["#585809", "#72770e"]));
    ᐃΔ[985][ns.ᐃᐃⵠ] = Rq(Md(0.9, 0, ["#295209", "#305d0d"]));
    ᐃΔ[191] = [];
    ᐃΔ[191][ns.ⵠᐃⵠ] = Rq(Md(0.9, 0, ["#b9b094", "#e2d2c0"]));
    ᐃΔ[191][ns.ᐃᐃⵠ] = Rq(Md(0.9, 0, ["#126366", "#0d484b"]));
    ᐃΔ[193] = [];
    ᐃΔ[193][ns.ⵠᐃⵠ] = Rq(Md(0.9, 0, ["#3f8662", "#30915d"]));
    ᐃΔ[193][ns.ᐃᐃⵠ] = Rq(Md(0.9, 0, ["#0e6553", "#094437"]));
    ᐃΔ[812] = [];
    ᐃΔ[812][ns.ⵠᐃⵠ] = Rq(Md(0.9, 0, ["#c79153", "#dfa868"]));
    ᐃΔ[812][ns.ᐃᐃⵠ] = Rq(Md(0.9, 0, ["#073927", "#075040"]));
    ᐃΔ[838] = [];
    ᐃΔ[838][ns.ⵠᐃⵠ] = Rq(Md(0.9, 0, ["#768b5b", "#819984"]));
    ᐃΔ[838][ns.ᐃᐃⵠ] = Rq(Md(0.9, 0, ["#0c4540", "#0e5153"]));
    ᐃΔ[849] = [];
    ᐃΔ[849][ns.ⵠᐃⵠ] = Rq(Md(0.9, 0, ["#567465", "#627c6e"]));
    ᐃΔ[849][ns.ᐃᐃⵠ] = Rq(Md(0.9, 0, ["#073927", "#075040"]));
    ᐃΔ[204] = [];
    ᐃΔ[204][ns.ⵠᐃⵠ] = Rq(Md(0.9, 0, ["#996b3a", "#bf956b"]));
    ᐃΔ[204][ns.ᐃᐃⵠ] = Rq(Md(0.9, 0, ["#0e6553", "#094437"]));
    ᐃΔ[953] = [];
    ᐃΔ[953][ns.ⵠᐃⵠ] = Rq(Md(0.9, 0, ["#7a634a", "#a68f77"]));
    ᐃΔ[953][ns.ᐃᐃⵠ] = Rq(Md(0.9, 0, ["#1e4d43", "#113c32"]));
    ᐃΔ[206] = [];
    ᐃΔ[206][ns.ⵠᐃⵠ] = Rq(Md(0.9, 0, ["#99403c", "#bc796c"]));
    ᐃΔ[206][ns.ᐃᐃⵠ] = Rq(Md(0.9, 0, ["#1e434d", "#11303c"]));
    ᐃΔ[963] = [];
    ᐃΔ[963][ns.ⵠᐃⵠ] = Rq(Md(0.9, 0, ["#88504e", "#b3857c"]));
    ᐃΔ[963][ns.ᐃᐃⵠ] = Rq(Md(0.9, 0, ["#253b41", "#162930"]));
    ᐃΔ[208] = [];
    ᐃΔ[208][ns.ⵠᐃⵠ] = Rq(Md(0.9, 0, ["#0f8870", "#23af93"]));
    ᐃΔ[208][ns.ᐃᐃⵠ] = Rq(Md(0.9, 0, ["#032829", "#083233"]));
    ᐃΔ[970] = [];
    ᐃΔ[970][ns.ⵠᐃⵠ] = Rq(Md(0.9, 0, ["#618a20", "#84a74e"]));
    ᐃΔ[970][ns.ᐃᐃⵠ] = Rq(Md(0.9, 0, ["#1f4632", "#335d47"]));
    ᐃΔ[114] = [];
    ᐃΔ[114][ns.ⵠᐃⵠ] = Rq(Gd(1.2, Hl, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
    ᐃΔ[114][ns.ᐃᐃⵠ] = Rq(Gd(1.2, oo, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
    ᐃΔ[162] = [];
    ᐃΔ[162][ns.ⵠᐃⵠ] = Rq(vm(1, Qh, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ᐃΔ[162][ns.ᐃᐃⵠ] = Rq(vm(1, ie, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ᐃΔ[165] = [];
    ᐃΔ[165][ns.ⵠᐃⵠ] = Rq(bm(1, Rg, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ᐃΔ[165][ns.ᐃᐃⵠ] = Rq(bm(1, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ᐃΔ[122] = [];
    ᐃΔ[122][ns.ⵠᐃⵠ] = Rq(Am(1, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ᐃΔ[122][ns.ᐃᐃⵠ] = Rq(Am(1, Wq, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ᐃΔ[163] = [];
    ᐃΔ[163][ns.ⵠᐃⵠ] = Rq(Am(1, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ᐃΔ[163][ns.ᐃᐃⵠ] = Rq(Am(1, Hl, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ᐃΔ[164] = [];
    ᐃΔ[164][ns.ⵠᐃⵠ] = Rq(Tm(1, Hl, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ᐃΔ[164][ns.ᐃᐃⵠ] = Rq(Tm(1, Wq, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ᐃΔ[160] = [];
    ᐃΔ[160][ns.ⵠᐃⵠ] = Rq(Gm(0.8, true, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ᐃΔ[160][ns.ᐃᐃⵠ] = Rq(Gm(0.8, true, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ᐃΔ[169] = [];
    ᐃΔ[169][ns.ⵠᐃⵠ] = Rq(Nm(0.8, true, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ᐃΔ[169][ns.ᐃᐃⵠ] = Rq(Nm(0.8, true, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ᐃΔ[170] = [];
    ᐃΔ[170][ns.ⵠᐃⵠ] = Rq(Hm(0.8, true, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ᐃΔ[170][ns.ᐃᐃⵠ] = Rq(Hm(0.8, A, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ᐃΔ[168] = [];
    ᐃΔ[168][ns.ⵠᐃⵠ] = Rq(Wm(0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ᐃΔ[168][ns.ᐃᐃⵠ] = Rq(Wm(0.8, rq, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ᐃΔ[123] = [];
    ᐃΔ[123][ns.ⵠᐃⵠ] = Rq(Wm(0.8, Tk, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ᐃΔ[123][ns.ᐃᐃⵠ] = Rq(Wm(0.8, true, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ᐃΔ[166] = [];
    ᐃΔ[166][ns.ⵠᐃⵠ] = Rq(Fm(1.5, true, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
    ᐃΔ[166][ns.ᐃᐃⵠ] = Rq(Fm(1.5, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ᐃΔ[336] = [];
    ᐃΔ[336][ns.ⵠᐃⵠ] = Rq(Fm(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃΔ[336][ns.ᐃᐃⵠ] = Rq(Fm(1, tg, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
    ᐃΔ[171] = [];
    ᐃΔ[171][ns.ⵠᐃⵠ] = Rq(Qm(1.5, Cq, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
    ᐃΔ[171][ns.ᐃᐃⵠ] = Rq(Qm(1.5, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
    ᐃΔ[373] = [];
    ᐃΔ[373][ns.ⵠᐃⵠ] = Rq(Qm(1, f, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃΔ[373][ns.ᐃᐃⵠ] = Rq(Qm(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ᐃΔ[124] = [];
    ᐃΔ[124][ns.ⵠᐃⵠ] = Rq(Qm(1.5, nh, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ᐃΔ[124][ns.ᐃᐃⵠ] = Rq(Qm(1.5, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ᐃΔ[500] = [];
    ᐃΔ[500][ns.ⵠᐃⵠ] = Rq(Qm(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃΔ[500][ns.ᐃᐃⵠ] = Rq(Qm(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ᐃΔ[172] = [];
    ᐃΔ[172][ns.ⵠᐃⵠ] = Rq(zm(1.5, Qh, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
    ᐃΔ[172][ns.ᐃᐃⵠ] = Rq(zm(1.5, Ee, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
    ᐃΔ[376] = [];
    ᐃΔ[376][ns.ⵠᐃⵠ] = Rq(zm(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃΔ[376][ns.ᐃᐃⵠ] = Rq(zm(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ᐃΔ[173] = [];
    ᐃΔ[173][ns.ⵠᐃⵠ] = Rq(Cm(1.5, Tk, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ᐃΔ[173][ns.ᐃᐃⵠ] = Rq(Cm(1.5, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ᐃΔ[379] = [];
    ᐃΔ[379][ns.ⵠᐃⵠ] = Rq(Cm(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ᐃΔ[379][ns.ᐃᐃⵠ] = Rq(Cm(1, zl, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ᐃΔ[167] = [];
    ᐃΔ[167][ns.ⵠᐃⵠ] = Rq(ym(0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
    ᐃΔ[167][ns.ᐃᐃⵠ] = Rq(ym(0.5, 0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
    ᐃΔ[691] = [];
    ᐃΔ[691][ns.ⵠᐃⵠ] = Rq(Wc(0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
    ᐃΔ[691][ns.ᐃᐃⵠ] = Rq(Wc(0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
    ᐃΔ[264] = [];
    ᐃΔ[264][ns.ⵠᐃⵠ] = Rq(qd(0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
    ᐃΔ[264][ns.ᐃᐃⵠ] = Rq(qd(0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
    ᐃΔ[260] = [];
    ᐃΔ[260][ns.ⵠᐃⵠ] = Rq(bd(Math.PI, Sd(0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
    ᐃΔ[260][ns.ᐃᐃⵠ] = Rq(bd(Math.PI, Sd(0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
    ᐃΔ[266] = Rq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 450;
      c.height = a * 470;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 226.5, a * 91.546875);
      d.bezierCurveTo(a * 254.5, a * 115.546875, a * 261.5, a * 115.546875, a * 294.5, a * 109.546875);
      d.bezierCurveTo(a * 299.5, a * 141.546875, a * 315.5, a * 151.546875, a * 344.5, a * 158.546875);
      d.bezierCurveTo(a * 330.5, a * 195.546875, a * 341.5, a * 207.546875, a * 361.5, a * 226.546875);
      d.bezierCurveTo(a * 331.5, a * 251.546875, a * 335.5, a * 270.546875, a * 342.5, a * 295.546875);
      d.bezierCurveTo(a * 300.5, a * 296.546875, a * 293.5, a * 325.546875, a * 292.5, a * 344.546875);
      d.bezierCurveTo(a * 257.5, a * 326.546875, a * 242.5, a * 338.546875, a * 224.5, a * 361.546875);
      d.bezierCurveTo(a * 200.5, a * 329.546875, a * 180.5, a * 334.546875, a * 155.5, a * 341.546875);
      d.bezierCurveTo(a * 146.5, a * 307.546875, a * 140.5, a * 302.546875, a * 107.5, a * 292.546875);
      d.bezierCurveTo(a * 117.5, a * 253.546875, a * 109.5, a * 244.546875, a * 89.5, a * 224.546875);
      d.bezierCurveTo(a * 118.5, a * 191.546875, a * 114.5, a * 182.546875, a * 108.5, a * 156.546875);
      d.bezierCurveTo(a * 143.5, a * 149.546875, a * 150.5, a * 136.546875, a * 157.5, a * 106.546875);
      d.bezierCurveTo(a * 202.5, a * 120.546875, a * 211.5, a * 103.546875, a * 228.5, a * 91.546875);
      d.closePath();
      od(d, ct, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 129.546875);
      d.bezierCurveTo(a * 247.5, a * 147.546875, a * 252.5, a * 143.546875, a * 274.5, a * 141.546875);
      d.bezierCurveTo(a * 279.5, a * 163.546875, a * 289.5, a * 168.546875, a * 311.5, a * 178.546875);
      d.bezierCurveTo(a * 301.5, a * 199.546875, a * 307.5, a * 213.546875, a * 323.5, a * 226.546875);
      d.bezierCurveTo(a * 303.5, a * 240.546875, a * 303.5, a * 255.546875, a * 312.5, a * 275.546875);
      d.bezierCurveTo(a * 281.5, a * 278.546875, a * 276.5, a * 291.546875, a * 272.5, a * 313.546875);
      d.bezierCurveTo(a * 248.5, a * 301.546875, a * 239.5, a * 310.546875, a * 224.5, a * 324.546875);
      d.bezierCurveTo(a * 211.5, a * 304.546875, a * 199.5, a * 301.546875, a * 176.5, a * 309.546875);
      d.bezierCurveTo(a * 165.5, a * 276.546875, a * 159.5, a * 275.546875, a * 138.5, a * 274.546875);
      d.bezierCurveTo(a * 148.5, a * 248.546875, a * 140.5, a * 237.546875, a * 125.5, a * 225.546875);
      d.bezierCurveTo(a * 145.5, a * 205.546875, a * 146.5, a * 195.546875, a * 142.5, a * 176.546875);
      d.bezierCurveTo(a * 173.5, a * 164.546875, a * 173.5, a * 155.546875, a * 178.5, a * 140.546875);
      d.bezierCurveTo(a * 214.5, a * 143.546875, a * 214.5, a * 135.546875, a * 226.5, a * 129.546875);
      d.closePath();
      od(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 160.546875);
      d.bezierCurveTo(a * 236.5, a * 168.546875, a * 239.5, a * 168.546875, a * 258.5, a * 168.546875);
      d.bezierCurveTo(a * 261.5, a * 185.546875, a * 268.5, a * 187.546875, a * 282.5, a * 192.546875);
      d.bezierCurveTo(a * 277.5, a * 208.546875, a * 283.5, a * 216.546875, a * 289.5, a * 228.546875);
      d.bezierCurveTo(a * 277.5, a * 243.546875, a * 280.5, a * 253.546875, a * 281.5, a * 260.546875);
      d.bezierCurveTo(a * 264.5, a * 260.546875, a * 259.5, a * 269.546875, a * 256.5, a * 283.546875);
      d.bezierCurveTo(a * 244.5, a * 276.546875, a * 232.5, a * 283.546875, a * 223.5, a * 291.546875);
      d.bezierCurveTo(a * 213.5, a * 276.546875, a * 205.5, a * 278.546875, a * 190.5, a * 281.546875);
      d.bezierCurveTo(a * 181.5, a * 262.546875, a * 173.5, a * 259.546875, a * 165.5, a * 258.546875);
      d.bezierCurveTo(a * 169.5, a * 239.546875, a * 167.5, a * 233.546875, a * 157.5, a * 225.546875);
      d.bezierCurveTo(a * 169.5, a * 208.546875, a * 170.5, a * 203.546875, a * 168.5, a * 192.546875);
      d.bezierCurveTo(a * 181.5, a * 187.546875, a * 188.5, a * 179.546875, a * 192.5, a * 168.546875);
      d.bezierCurveTo(a * 216.5, a * 170.546875, a * 218.5, a * 163.546875, a * 225.5, a * 160.546875);
      d.closePath();
      od(d, Yh, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 205.5, a * 194.546875);
      d.bezierCurveTo(a * 216.5, a * 192.546875, a * 219.5, a * 191.546875, a * 225.5, a * 185.546875);
      d.bezierCurveTo(a * 232.5, a * 193.546875, a * 237.5, a * 191.546875, a * 246.5, a * 192.546875);
      d.bezierCurveTo(a * 249.5, a * 202.546875, a * 253.5, a * 205.546875, a * 258.5, a * 207.546875);
      d.bezierCurveTo(a * 259.5, a * 222.546875, a * 256.5, a * 223.546875, a * 265.5, a * 226.546875);
      d.bezierCurveTo(a * 256.5, a * 231.546875, a * 255.5, a * 241.546875, a * 259.5, a * 248.546875);
      d.bezierCurveTo(a * 250.5, a * 245.546875, a * 245.5, a * 252.546875, a * 243.5, a * 260.546875);
      d.bezierCurveTo(a * 234.5, a * 256.546875, a * 229.5, a * 258.546875, a * 223.5, a * 265.546875);
      d.bezierCurveTo(a * 218.5, a * 255.546875, a * 213.5, a * 257.546875, a * 204.5, a * 261.546875);
      d.bezierCurveTo(a * 203.5, a * 251.546875, a * 198.5, a * 248.546875, a * 189.5, a * 244.546875);
      d.bezierCurveTo(a * 194.5, a * 237.546875, a * 192.5, a * 231.546875, a * 184.5, a * 225.546875);
      d.bezierCurveTo(a * 191.5, a * 211.546875, a * 192.5, a * 209.546875, a * 190.5, a * 204.546875);
      d.bezierCurveTo(a * 200.5, a * 204.546875, a * 204.5, a * 198.546875, a * 207.5, a * 194.546875);
      d.closePath();
      od(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149.5, a * 93.546875);
      d.bezierCurveTo(a * 287.5, a * 332.546875, a * 226, a * 225.546875, a * 302.5, a * 357.546875);
      d.closePath();
      od(d, oh, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 66.546875);
      d.bezierCurveTo(a * 224.5, a * 223.546875, a * 224.5, a * 223.546875, a * 224.5, a * 380.546875);
      d.closePath();
      od(d, Aj, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 302.5, a * 88.546875);
      d.bezierCurveTo(a * 222.5, a * 227.546875, a * 222.5, a * 227.546875, a * 142.5, a * 366.546875);
      d.closePath();
      od(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 361.5, a * 147.546875);
      d.bezierCurveTo(a * 223, a * 226.546875, a * 223, a * 226.546875, a * 84.5, a * 305.546875);
      d.closePath();
      od(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 379.5, a * 225.546875);
      d.bezierCurveTo(a * 221, a * 225.546875, a * 221, a * 225.546875, a * 62.5, a * 225.546875);
      d.closePath();
      od(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 90.5, a * 147.546875);
      d.bezierCurveTo(a * 226.5, a * 226.546875, a * 226.5, a * 226.546875, a * 362.5, a * 305.546875);
      d.closePath();
      od(d, undefined, b[0], 4);
      return c;
    }(0.6, ["#FFFFFF"]));
    ᐃΔ[299] = [];
    ᐃΔ[299][ns.ⵠᐃⵠ] = Rq(jd(1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
    ᐃΔ[299][ns.ᐃᐃⵠ] = Rq(jd(1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
    ᐃΔ[10] = [];
    ᐃΔ[10][ns.ⵠᐃⵠ] = Rq(Ym(0.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
    ᐃΔ[10][ns.ᐃᐃⵠ] = Rq(Ym(0.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"]));
    ᐃΔ[11] = [];
    ᐃΔ[11][ns.ⵠᐃⵠ] = Rq(Rm(0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
    ᐃΔ[11][ns.ᐃᐃⵠ] = Rq(Rm(0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
    ᐃΔ[40] = [];
    ᐃΔ[40][ns.ⵠᐃⵠ] = Rq(Om(0.63, Dl, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
    ᐃΔ[40][ns.ᐃᐃⵠ] = Rq(Om(0.63, true, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
    ᐃΔ[41] = [];
    ᐃΔ[41][ns.ⵠᐃⵠ] = Rq(au(0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
    ᐃΔ[41][ns.ᐃᐃⵠ] = Rq(au(0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
    ᐃΔ[42] = [];
    ᐃΔ[42][ns.ⵠᐃⵠ] = Rq(bu(0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
    ᐃΔ[42][ns.ᐃᐃⵠ] = Rq(bu(0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
    ᐃΔ[716] = [];
    ᐃΔ[716][ns.ⵠᐃⵠ] = Rq(_p(0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
    ᐃΔ[716][ns.ᐃᐃⵠ] = Rq(_p(0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
    ᐃΔ[720] = [];
    ᐃΔ[720][ns.ⵠᐃⵠ] = Rq(nc(0.9, ["#e4c027"]));
    ᐃΔ[720][ns.ᐃᐃⵠ] = Rq(nc(0.9, ["#D8E57F"]));
    ᐃΔ[144] = [];
    ᐃΔ[144][ns.ⵠᐃⵠ] = Rq(Kc(0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
    ᐃΔ[144][ns.ᐃᐃⵠ] = Rq(Kc(0.42, Rg, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
    ᐃΔ[722] = Rq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 149;
      c.height = a * 356;
      d.save();
      d.translate(a * 74.5, a * 177.5);
      ad(d, a * -57.5, a * -161.5, a * 100, a * 323, a * 10);
      d.restore();
      od(d, b[0], b[1], a * 4);
      d.save();
      d.translate(a * 74.5, a * 177.5);
      ad(d, a * -57.5, a * 50.5, a * 100, a * 105, a * 10);
      d.restore();
      od(d, b[6], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 125);
      d.bezierCurveTo(a * 74.5, a * 125, a * 118, a * 125, a * 118, a * 125);
      d.closePath();
      od(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 120);
      d.bezierCurveTo(a * 74.5, a * 120, a * 74.5, a * 120, a * 118, a * 120);
      d.closePath();
      od(d, b[3], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 228);
      d.bezierCurveTo(a * 75, a * 228.5, a * 118, a * 228.5, a * 118, a * 229);
      d.closePath();
      od(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 224);
      d.bezierCurveTo(a * 75, a * 224, a * 118, a * 224, a * 118, a * 224);
      d.closePath();
      od(d, b[3], b[3], a * 10);
      d.save();
      d.translate(a * 72, a * 68.5);
      ad(d, a * -41.5, a * -36.5, a * 73, a * 73, a * 13);
      d.restore();
      od(d, b[4]);
      d.save();
      d.translate(a * 72, a * 175.5);
      ad(d, a * -41.5, a * -38.5, a * 73, a * 73, a * 13);
      d.restore();
      od(d, b[4]);
      d.save();
      d.translate(a * 72, a * 279.5);
      ad(d, a * -41.5, a * -40.5, a * 73, a * 73, a * 13);
      d.restore();
      od(d, b[4]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 338);
      d.bezierCurveTo(a * 75, a * 338, a * 118, a * 338, a * 118, a * 338);
      d.closePath();
      od(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 333);
      d.bezierCurveTo(a * 75, a * 333, a * 118, a * 333, a * 118, a * 333);
      d.closePath();
      od(d, b[3], b[3], a * 10);
      return c;
    }(1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
    ᐃΔ[407] = [];
    ᐃΔ[407][ns.ⵠᐃⵠ] = Rq(Dm(0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
    ᐃΔ[407][ns.ᐃᐃⵠ] = Rq(Dm(0.5, Hl, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
    ᐃΔ[119] = [];
    ᐃΔ[119][ns.ⵠᐃⵠ] = Rq(Em(0.5, Cg, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
    ᐃΔ[119][ns.ᐃᐃⵠ] = Rq(Em(0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
    ᐃΔ[411] = Rq(function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 118;
      d.height = a * 129;
      e.save();
      e.translate(a * 90, a * 90);
      ad(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
      e.restore();
      od(e, c[0], c[1], 4);
      return d;
    }(0.8, 0, ["#5f6061", "#939393"]));
    ᐃΔ[412] = Kd(1, [{
      f: Wt,
      x: 0,
      y: 0,
      a: 1,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
    ᐃΔ[198] = [];
    ᐃΔ[198][ns.ⵠᐃⵠ] = Rq(pm(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ᐃΔ[198][ns.ᐃᐃⵠ] = Rq(pm(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ᐃΔ[913] = [];
    ᐃΔ[913][ns.ⵠᐃⵠ] = Rq(Mm(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ᐃΔ[913][ns.ᐃᐃⵠ] = Rq(Mm(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ᐃΔ[18] = [];
    ᐃΔ[18][ns.ⵠᐃⵠ] = Rq(bd(3, Pm(0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
    ᐃΔ[18][ns.ᐃᐃⵠ] = Rq(bd(3, Pm(0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
    ᐃΔ[12] = [];
    ᐃΔ[12][ns.ⵠᐃⵠ] = Rq(bd(3, cm(0.7, rq, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
    ᐃΔ[12][ns.ᐃᐃⵠ] = Rq(bd(3, cm(0.7, ls, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
    ᐃΔ[13] = [];
    ᐃΔ[13][ns.ⵠᐃⵠ] = Rq(bd(3, wm(0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
    ᐃΔ[13][ns.ᐃᐃⵠ] = Rq(bd(3, wm(0.65, wi, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
    ᐃΔ[14] = [];
    ᐃΔ[14][ns.ⵠᐃⵠ] = Rq(bd(3, Jm(0.67, Tk, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
    ᐃΔ[14][ns.ᐃᐃⵠ] = Rq(bd(3, Jm(0.67, Xr, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
    ᐃΔ[15] = [];
    ᐃΔ[15][ns.ⵠᐃⵠ] = Rq(bd(3, Im(0.67, Xs, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
    ᐃΔ[15][ns.ᐃᐃⵠ] = Rq(bd(3, Im(0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
    ᐃΔ[33] = [];
    ᐃΔ[33][ns.ⵠᐃⵠ] = Rq(bd(3, fm(0.67, Xr, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
    ᐃΔ[33][ns.ᐃᐃⵠ] = Rq(bd(3, fm(0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
    ᐃΔ[16] = [];
    ᐃΔ[16][ns.ⵠᐃⵠ] = Rq(bd(3, km(1, true, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
    ᐃΔ[16][ns.ᐃᐃⵠ] = Rq(bd(3, km(1, true, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
    ᐃΔ[35] = [];
    ᐃΔ[35][ns.ⵠᐃⵠ] = Rq(bd(3, Um(1, Tk, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ᐃΔ[35][ns.ᐃᐃⵠ] = Rq(bd(3, Um(1, true, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
    ᐃΔ[55] = [];
    ᐃΔ[55][ns.ⵠᐃⵠ] = Rq(bd(3, Jp(0.5, Wq, ["#0d1b1c", "#939393", "#5f6061"])));
    ᐃΔ[55][ns.ᐃᐃⵠ] = Rq(bd(3, Jp(0.5, true, ["#030d14", "#485e66", "#1f343f"])));
    ᐃΔ[45] = [];
    ᐃΔ[45][ns.ⵠᐃⵠ] = Rq(bd(3, Ap(1, rq, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
    ᐃΔ[45][ns.ᐃᐃⵠ] = Rq(bd(3, Ap(1, true, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
    ᐃΔ[36] = [];
    ᐃΔ[36][ns.ⵠᐃⵠ] = Rq(bd(3, Um(1, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ᐃΔ[36][ns.ᐃᐃⵠ] = Rq(bd(3, Um(1, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
    ᐃΔ[37] = [];
    ᐃΔ[37][ns.ⵠᐃⵠ] = Rq(bd(3, Um(1, Cq, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ᐃΔ[37][ns.ᐃᐃⵠ] = Rq(bd(3, Um(1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ᐃΔ[38] = [];
    ᐃΔ[38][ns.ⵠᐃⵠ] = Rq(bd(3, Um(1, go, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ᐃΔ[38][ns.ᐃᐃⵠ] = Rq(bd(3, Um(1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ᐃΔ[148] = [];
    ᐃΔ[148][ns.ⵠᐃⵠ] = Rq(ac(0.55, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
    ᐃΔ[148][ns.ᐃᐃⵠ] = Rq(ac(0.55, 0, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
    ᐃΔ[536] = [];
    ᐃΔ[536].push(Rq(ac(0.8, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
    ᐃΔ[536].push(Rq(ac(0.8, 0, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
    ᐃΔ[536].push(Rq(ac(0.8, 0, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
    ᐃΔ[538] = [];
    ᐃΔ[538].push(ᐃΔ[536][0]);
    ᐃΔ[538].push(ᐃΔ[536][0]);
    ᐃΔ[538].push(ᐃΔ[536][0]);
    ᐃΔ[158] = [];
    ᐃΔ[158][ns.ⵠᐃⵠ] = Rq(wc(0.06, 0, ["#141414", "#c4a23a", "#816511"]));
    ᐃΔ[158][ns.ᐃᐃⵠ] = Rq(wc(0.06, 0, ["#030d14", "#2b6664", "#133d3c"]));
    ᐃΔ[535] = [];
    ᐃΔ[535].push(Rq(wc(0.08, 0, ["#141414", "#c4a23a", "#816511"])));
    ᐃΔ[535].push(Rq(wc(0.08, 0, ["#141414", "#e2bd4e", "#a38018"])));
    ᐃΔ[535].push(Rq(wc(0.08, 0, ["#141414", "#b0902e", "#634d09"])));
    ᐃΔ[149] = Kd(1.5, [{
      f: xp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ᐃΔ[526] = [];
    ᐃΔ[526][ns.ⵠᐃⵠ] = Rq(Bp(0.8, 0, ["#347f93", "#54a4ba"]));
    ᐃΔ[526][ns.ᐃᐃⵠ] = Rq(Bp(0.8, 0, ["#98ede3", "#94f2e7"]));
    ᐃΔ[527] = [];
    ᐃΔ[527][ns.ⵠᐃⵠ] = Rq(ep(0.8, 0, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
    ᐃΔ[527][ns.ᐃᐃⵠ] = Rq(ep(0.8, 0, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
    ᐃΔ[528] = [];
    ᐃΔ[528][ns.ⵠᐃⵠ] = Rq(Nc(0.8, 0, ["#a9e4ed", "#86d4e0"]));
    ᐃΔ[528][ns.ᐃᐃⵠ] = Rq(Nc(0.8, 0, ["#83ddd4", "#485e66"]));
    ᐃΔ[151] = [];
    ᐃΔ[151][ns.ⵠᐃⵠ] = Rq(gp(0.8, true, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
    ᐃΔ[151][ns.ᐃᐃⵠ] = Rq(gp(0.8, true, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
    ᐃΔ[1192] = [];
    ᐃΔ[1192][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆⵠⲆΔΔΔⵠ;
    ᐃΔ[1192][ns.ᐃᐃⵠ] = ᐃᐃ.ΔⲆⲆⲆⲆⲆΔ;
    ᐃΔ[1193] = [];
    ᐃΔ[1193][ns.ⵠᐃⵠ] = ᐃᐃ.ΔᐃᐃᐃΔᐃᐃ;
    ᐃΔ[1193][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃᐃᐃⲆΔⵠΔ;
    ᐃΔ[1194] = [];
    ᐃΔ[1194][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆⲆⵠΔᐃᐃΔ;
    ᐃΔ[1194][ns.ᐃᐃⵠ] = ᐃᐃ.ΔⵠΔⵠᐃᐃⵠ;
    ᐃΔ[152] = [];
    ᐃΔ[152][ns.ⵠᐃⵠ] = ᐃᐃ.ΔⲆⲆⲆⲆᐃΔ;
    ᐃΔ[152][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆΔⲆⵠΔᐃΔ;
    ᐃΔ[1198] = [];
    ᐃΔ[1198][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠΔᐃΔᐃⵠⲆ;
    ᐃΔ[1198][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆΔΔᐃⵠⵠᐃ;
    ᐃΔ[153] = [];
    ᐃΔ[153][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆⵠⲆᐃⵠⲆⲆ;
    ᐃΔ[153][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠⲆⲆⲆᐃΔⵠ;
    ᐃΔ[1202] = [];
    ᐃΔ[1202][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠΔᐃⲆΔⲆᐃ;
    ᐃΔ[1202][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃΔⲆⲆᐃⵠΔ;
    ᐃΔ[154] = [];
    ᐃΔ[154][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠⲆᐃᐃⵠⵠⲆ;
    ᐃΔ[154][ns.ᐃᐃⵠ] = ᐃᐃ.ΔᐃⵠᐃᐃⲆᐃ;
    ᐃΔ[1206] = [];
    ᐃΔ[1206][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠⲆᐃᐃΔᐃᐃ;
    ᐃΔ[1206][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆⲆᐃΔⲆᐃⵠ;
    ᐃΔ[155] = [];
    ᐃΔ[155][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⵠᐃΔⲆΔⵠ;
    ᐃΔ[155][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠⵠⵠⵠⲆⲆΔ;
    ᐃΔ[1210] = [];
    ᐃΔ[1210][ns.ⵠᐃⵠ] = ᐃᐃ.ΔΔⵠΔᐃⲆΔ;
    ᐃΔ[1210][ns.ᐃᐃⵠ] = ᐃᐃ.ΔⵠΔⲆᐃᐃⲆ;
    ᐃΔ[156] = [];
    ᐃΔ[156][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃⲆⵠⲆΔⵠΔ;
    ᐃΔ[156][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠΔⵠΔⵠΔⵠ;
    ᐃΔ[1214] = [];
    ᐃΔ[1214][ns.ⵠᐃⵠ] = ᐃᐃ.ΔᐃᐃΔᐃΔΔ;
    ᐃΔ[1214][ns.ᐃᐃⵠ] = ᐃᐃ.ⲆⲆΔΔΔΔᐃ;
    ᐃΔ[157] = [];
    ᐃΔ[157][ns.ⵠᐃⵠ] = ᐃᐃ.ⵠⲆⵠΔⵠⲆΔ;
    ᐃΔ[157][ns.ᐃᐃⵠ] = ᐃᐃ.ᐃⲆΔⲆⵠⵠᐃ;
    ᐃΔ[245] = [];
    ᐃΔ[245][ns.ⵠᐃⵠ] = ᐃᐃ.ᐃΔᐃΔᐃᐃⲆ;
    ᐃΔ[245][ns.ᐃᐃⵠ] = ᐃᐃ.ⵠⲆᐃⵠⲆᐃΔ;
    ᐃΔ[246] = ᐃᐃ.ΔᐃⵠⲆⵠᐃⵠ;
    ᐃΔ[159] = [];
    ᐃΔ[159][ns.ⵠᐃⵠ] = Rq(Hc(0.75, nh, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
    ᐃΔ[159][ns.ᐃᐃⵠ] = Rq(Hc(0.75, true, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
    ᐃΔ[558] = Rq(Ep(0.3, ["#092813", "#1f773d"], 0));
    ᐃΔ[559] = Rq(Ep(0.3, ["#092813", "#1f773d"], 1));
    ᐃΔ[885] = Rq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 60;
      c.height = a * 60;
      d.translate(a * -25, a * -25);
      d.translate(0, a * 5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      od(d, b[0]);
      d.translate(0, a * -5);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      od(d, b[1]);
      return c;
    }(0.6, ["#092813", "#1f773d"]));
    ᐃΔ[556] = [];
    ᐃΔ[556].push(Rq(hc(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
    ᐃΔ[556].push(Rq(hc(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
    ᐃΔ[556].push(Rq(hc(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
    ᐃΔ[560] = [];
    var b = Rq(hc(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
    ᐃΔ[560].push(b);
    ᐃΔ[560].push(b);
    ᐃΔ[560].push(b);
    ᐃΔ[557] = [];
    ᐃΔ[557].push(Rq(hc(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
    ᐃΔ[557].push(Rq(hc(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
    ᐃΔ[557].push(Rq(hc(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
    ᐃΔ[681] = Rq(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 170;
      var g = b * 172;
      var a = f / 2;
      var i = g / 2;
      d.width = f;
      d.height = g;
      e.translate(a, i);
      e.save();
      for (var j = 0; j < 10; j++) {
        e.rotate(Math.PI / 5);
        e.save();
        e.translate(b * 65, 0);
        ud(e, 3, b * 18, b * 4);
        od(e, c[0]);
        e.restore();
      }
      e.restore();
      hd(e, 0, 0, b * 40);
      od(e, os, c[0], b * 6);
      hd(e, 0, 0, b * 20);
      od(e, c[0]);
      return d;
    }(0.3, ["#FFFFFF"]));
    ᐃΔ[794] = Rq(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 130;
      var g = b * 142;
      var a = f / 2;
      var h = g / 2;
      d.width = f;
      d.height = g;
      hd(e, a, h, b * 40);
      od(e, Yg, c[0], b * 7);
      hd(e, a, h, b * 30);
      od(e, $q, c[0], b * 7);
      hd(e, a, h, b * 20);
      od(e, c[0]);
      return d;
    }(0.3, ["#FFFFFF"]));
    ᐃΔ[562] = Rq(Ep(0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
    ᐃΔ[667] = Rq(bd(Math.PI / 5, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 316;
      c.height = a * 365;
      d.save();
      d.translate(a * 156.07142639160156, a * 51.81248474121094);
      d.rotate(0);
      ad(d, a * -21.5, a * -34, a * 43, a * 68, a * 8);
      d.restore();
      od(d, b[0], b[0], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 126.57142639160156, a * 67.38392639160156);
      d.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
      d.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
      d.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
      d.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
      d.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
      d.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
      d.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
      d.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
      d.closePath();
      od(d, b[0], b[0], a * 15);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125.57142639160156, a * 156.66963958740234);
      d.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
      d.closePath();
      od(d, b[0], b[0], a * 15);
      return c;
    }(0.2, ["#FFFFFF"])));
    ᐃΔ[43] = [];
    ᐃΔ[43][ns.ⵠᐃⵠ] = Rq(Ac(0.85, 0, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
    ᐃΔ[43][ns.ᐃᐃⵠ] = Rq(Ac(0.85, 0, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
    ᐃΔ[561] = [];
    ᐃΔ[561].push(Rq(hc(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
    ᐃΔ[561].push(Rq(hc(0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
    ᐃΔ[561].push(Rq(hc(0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
    ᐃΔ[83] = [];
    ᐃΔ[83][ns.ⵠᐃⵠ] = Rq(Bc(0.37, 0, ["#2a2938", "#242330", "#313041"]));
    ᐃΔ[83][ns.ᐃᐃⵠ] = Rq(Bc(0.37, 0, ["#1b1e30", "#161921", "#252f3e"]));
    ᐃΔ[85] = [];
    ᐃΔ[85][ns.ⵠᐃⵠ] = Rq($c(0.17, 0, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
    ᐃΔ[85][ns.ᐃᐃⵠ] = Rq($c(0.17, 0, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
    ᐃΔ[86] = [];
    ᐃΔ[86][ns.ⵠᐃⵠ] = Rq(gc(0.55, Wq, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
    ᐃΔ[86][ns.ᐃᐃⵠ] = Rq(gc(0.55, true, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
    ᐃΔ[84] = [];
    ᐃΔ[84][ns.ⵠᐃⵠ] = Rq(gc(0.55, ie, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
    ᐃΔ[84][ns.ᐃᐃⵠ] = Rq(gc(0.55, go, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
    ᐃΔ[77] = [];
    ᐃΔ[77][ns.ⵠᐃⵠ] = Rq(Uc(0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
    ᐃΔ[77][ns.ᐃᐃⵠ] = Rq(Uc(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
    ᐃΔ[78] = [];
    ᐃΔ[78][ns.ⵠᐃⵠ] = Rq(Uc(0.2, Rg, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
    ᐃΔ[78][ns.ᐃᐃⵠ] = Rq(Uc(0.2, ie, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
    ᐃΔ[79] = [];
    ᐃΔ[79][ns.ⵠᐃⵠ] = Rq(Uc(0.2, nh, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
    ᐃΔ[79][ns.ᐃᐃⵠ] = Rq(Uc(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
    ᐃΔ[61] = [];
    ᐃΔ[61][ns.ⵠᐃⵠ] = Rq(_m(0.24, Xr, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
    ᐃΔ[61][ns.ᐃᐃⵠ] = Rq(_m(0.24, Cq, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
    ᐃΔ[59] = [];
    ᐃΔ[59][ns.ⵠᐃⵠ] = Rq(cp(0.32, 0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
    ᐃΔ[59][ns.ᐃᐃⵠ] = Rq(cp(0.32, 0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
    ᐃΔ[62] = [];
    ᐃΔ[62][ns.ⵠᐃⵠ] = Rq(bd(3, uc(0.9, ls, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
    ᐃΔ[62][ns.ᐃᐃⵠ] = Rq(bd(3, uc(0.9, go, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
    ᐃΔ[750] = [];
    ᐃΔ[750][ns.ⵠᐃⵠ] = Rq(bd(3, uc(1, Ee, [undefined, undefined, undefined, "#c8efef", "#c8efef"])));
    ᐃΔ[750][ns.ᐃᐃⵠ] = Rq(bd(3, uc(1, true, [dg, tq, undefined, "#87d2e6", "#87d2e6"])));
    ᐃΔ[755] = [];
    ᐃΔ[755].push(Rq(Mc(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
    ᐃΔ[755].push(Rq(Mc(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1)));
    ᐃΔ[755].push(Rq(Mc(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
    ᐃΔ[795] = [];
    ᐃΔ[795].push(Rq(Dp(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
    ᐃΔ[795].push(Rq(Dp(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    ᐃΔ[795].push(Rq(Dp(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    ᐃΔ[782] = [];
    ᐃΔ[782].push(Rq(ou(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1)));
    ᐃΔ[782].push(Rq(ou(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1)));
    ᐃΔ[782].push(Rq(ou(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
    ᐃΔ[783] = [];
    ᐃΔ[783].push(Rq(ou(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0)));
    ᐃΔ[783].push(Rq(ou(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0)));
    ᐃΔ[783].push(Rq(ou(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0)));
    ᐃΔ[46] = [];
    ᐃΔ[46][ns.ⵠᐃⵠ] = Rq(bd(3, jc(0.7, true, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
    ᐃΔ[46][ns.ᐃᐃⵠ] = Rq(bd(3, jc(0.7, Cq, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
    ᐃΔ[50] = [];
    ᐃΔ[50][ns.ⵠᐃⵠ] = Rq(bd(3, jc(0.7, Qh, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
    ᐃΔ[50][ns.ᐃᐃⵠ] = Rq(bd(3, jc(0.7, ie, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
    ᐃΔ[51] = [];
    ᐃΔ[51][ns.ⵠᐃⵠ] = Rq(bd(3, jc(0.7, Xr, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
    ᐃΔ[51][ns.ᐃᐃⵠ] = Rq(bd(3, jc(0.7, ls, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
    ᐃΔ[52] = [];
    ᐃΔ[52][ns.ⵠᐃⵠ] = Rq(bd(3, jc(0.7, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
    ᐃΔ[52][ns.ᐃᐃⵠ] = Rq(bd(3, jc(0.7, rq, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
    ᐃΔ[592] = [];
    ᐃΔ[592].push(Rq(Rc(0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
    ᐃΔ[592].push(Rq(Rc(0.7, ["#524712", "#c7b11c", "#d9ba18"])));
    ᐃΔ[592].push(Rq(Rc(0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
    ᐃΔ[326] = Rq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 188;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
      d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
      d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
      d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
      d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
      d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
      d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
      d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
      d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
      d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
      d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
      d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
      d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
      d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
      d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
      d.closePath();
      od(d, b[0], b[0], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
      d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
      d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
      d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
      d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
      d.closePath();
      od(d, b[0], b[0], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
      d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
      d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
      d.closePath();
      od(d, b[0], b[0], a * 2);
      return c;
    }(1.1, ["#BB0000"]));
    ᐃΔ[333] = Rq(bd(Math.PI, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 238;
      c.height = a * 230;
      d.translate(a * -93, a * -110);
      hd(d, a * 213.5, a * 256.75, a * 75);
      od(d, b);
      hd(d, a * 213.5, a * 175.75, a * 25);
      od(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 156.5, a * 137.75);
      d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217.5, a * 178.75);
      d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 130.5, a * 124.75);
      d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 183.75);
      d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107.5, a * 213.75);
      d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 212.5, a * 187.75);
      d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 102.5, a * 258.75);
      d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 192.75);
      d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 219.5, a * 158.75);
      d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * 10;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 210.5, a * 160.75);
      d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * 10;
      d.strokeStyle = b;
      d.stroke();
      return c;
    }(0.9, "#BB0000")));
    ᐃΔ[23] = [];
    ᐃΔ[23][ns.ⵠᐃⵠ] = Rq(sc(0.55, true, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
    ᐃΔ[23][ns.ᐃᐃⵠ] = Rq(sc(0.55, Tk, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
    ᐃΔ[58] = [];
    ᐃΔ[58][ns.ⵠᐃⵠ] = Rq(Oc(0.55, Xk, ["#252525", "#73583e", "#573f29", "#7d6144"]));
    ᐃΔ[58][ns.ᐃᐃⵠ] = Rq(Oc(0.55, A, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
    ᐃΔ[25] = [];
    ᐃΔ[25][ns.ⵠᐃⵠ] = Rq(bp(0.6, true, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
    ᐃΔ[25][ns.ᐃᐃⵠ] = Rq(bp(0.6, Qh, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
    ᐃΔ[26] = [];
    ᐃΔ[26][ns.ⵠᐃⵠ] = Rq(Pp(0.58, 0, ["#dbce71", "#b29c32", "#c4bc51"]));
    ᐃΔ[26][ns.ᐃᐃⵠ] = Rq(Pp(0.58, 0, ["#2b7c57", "#15543c", "#1a7961"]));
    ᐃΔ[27] = [];
    ᐃΔ[27][ns.ⵠᐃⵠ] = Rq(qc(0.69, 0, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
    ᐃΔ[27][ns.ᐃᐃⵠ] = Rq(qc(0.69, 0, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
    ᐃΔ[413] = [];
    ᐃΔ[413][ns.ⵠᐃⵠ] = [];
    ᐃΔ[413][ns.ᐃᐃⵠ] = [];
    ᐃΔ[413][ns.ⵠᐃⵠ].push(Rq(pp(1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
    ᐃΔ[413][ns.ⵠᐃⵠ].push(Rq(Xc(1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
    ᐃΔ[413][ns.ⵠᐃⵠ].push(Rq(Qc(1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
    ᐃΔ[413][ns.ᐃᐃⵠ].push(Rq(pp(1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
    ᐃΔ[413][ns.ᐃᐃⵠ].push(Rq(Xc(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
    ᐃΔ[413][ns.ᐃᐃⵠ].push(Rq(Qc(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
    ᐃΔ[449] = [];
    ᐃΔ[449][ns.ⵠᐃⵠ] = Rq(kp(1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
    ᐃΔ[449][ns.ᐃᐃⵠ] = Rq(kp(1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
    ᐃΔ[451] = [];
    ᐃΔ[451][ns.ⵠᐃⵠ] = Rq(Jc(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ᐃΔ[451][ns.ᐃᐃⵠ] = Rq(Jc(1, ["#050505", "#327570", "#021724", "#200333"]));
    ᐃΔ[452] = [];
    ᐃΔ[452][ns.ⵠᐃⵠ] = Rq(fc(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ᐃΔ[452][ns.ᐃᐃⵠ] = Rq(fc(1, ["#050505", "#327570", "#021724", "#200333"]));
    ᐃΔ[243] = [];
    ᐃΔ[243][ns.ⵠᐃⵠ] = [];
    ᐃΔ[243][ns.ᐃᐃⵠ] = [];
    ᐃΔ[243][ns.ⵠᐃⵠ] = [ᐃᐃ.ᐃⲆⲆᐃⵠᐃᐃ, ᐃᐃ.ΔⵠΔⵠⵠΔⲆ, ᐃᐃ.ⵠΔΔᐃⵠⲆⲆ, ᐃᐃ.ᐃᐃΔⵠⵠⵠΔ, ᐃᐃ.ᐃᐃᐃΔᐃⲆⲆ, ᐃᐃ.ᐃⵠⵠⵠⵠⲆⵠ, ᐃᐃ.ⲆⲆΔᐃⵠⲆⲆ, ᐃᐃ.ΔΔⲆⲆⲆⲆⲆ, ᐃᐃ.ⵠᐃᐃⵠΔᐃⲆ, ᐃᐃ.ᐃᐃⲆᐃⵠᐃΔ, ᐃᐃ.ᐃⲆⵠⲆΔⲆΔ, ᐃᐃ.ᐃΔⲆΔΔⲆΔ, ᐃᐃ.ⲆⵠⵠⲆⲆⲆᐃ, ᐃᐃ.ⲆⲆⵠᐃⵠⲆⲆ, ᐃᐃ.ⲆⲆΔᐃⲆⲆⲆ, ᐃᐃ.ⵠᐃⲆⵠΔΔΔ, ᐃᐃ.ⵠΔⲆᐃⵠⵠᐃ, ᐃᐃ.ⲆᐃΔⲆᐃⵠⵠ, ᐃᐃ.ᐃΔΔΔⲆⲆΔ, ᐃᐃ.ⲆΔΔΔΔᐃⵠ, ᐃᐃ.ⵠΔⲆΔⵠᐃⲆ, ᐃᐃ.ᐃᐃᐃⲆᐃⵠⲆ, ᐃᐃ.ᐃΔΔⲆᐃⵠⲆ, ᐃᐃ.ⲆᐃᐃⵠΔⲆᐃ, ᐃᐃ.ΔᐃⵠⲆⲆΔᐃ, ᐃᐃ.ⵠΔⵠᐃⵠⲆⲆ, ᐃᐃ.ⵠⲆᐃⲆΔΔᐃ, ᐃᐃ.ΔᐃΔⲆᐃΔΔ, ᐃᐃ.ⲆⵠΔΔⵠΔᐃ, ᐃᐃ.ⲆΔⲆᐃᐃᐃⲆ, ᐃᐃ.ⲆΔⲆⵠⵠΔΔ, ᐃᐃ.ⵠⵠⵠⲆⵠⲆΔ, ᐃᐃ.ⲆⵠⲆⲆᐃⲆⵠ, ᐃᐃ.ⵠⵠⲆᐃᐃⵠᐃ, ᐃᐃ.ⵠΔⵠⲆⲆΔΔ, ᐃᐃ.ⵠΔⵠΔⲆⵠⵠ, ᐃᐃ.ΔⵠⲆⲆⵠⵠⵠ, ᐃᐃ.ⲆⲆΔΔᐃᐃⵠ, ᐃᐃ.ΔΔⵠᐃᐃΔⵠ, ᐃᐃ.ⲆⵠⵠᐃⲆΔᐃ, ᐃᐃ.ⵠⲆΔⲆᐃΔⵠ, ᐃᐃ.ΔⲆᐃⵠΔⲆⲆ, ᐃᐃ.ⲆⵠΔᐃΔᐃΔ, ᐃᐃ.ⲆΔⲆᐃⲆⵠΔ, ᐃᐃ.ΔⵠᐃᐃΔⵠΔ, ᐃᐃ.ΔⲆⵠⲆΔᐃΔ, ᐃᐃ.ⲆⲆⵠΔᐃᐃᐃ, ᐃᐃ.ⵠⵠⲆⲆΔⲆⲆ, ᐃᐃ.ΔΔⲆΔⵠΔᐃ, ᐃᐃ.ΔᐃⲆᐃⲆⵠⲆ, ᐃᐃ.ⵠᐃΔᐃⵠⵠⲆ, ᐃᐃ.ᐃⲆΔⵠⲆᐃΔ, ᐃᐃ.ΔᐃᐃⵠΔᐃⲆ, ᐃᐃ.ΔΔᐃΔᐃⵠᐃ, ᐃᐃ.ⵠΔⲆⲆⵠⵠⲆ, ᐃᐃ.ⵠᐃⲆᐃΔᐃᐃ];
    ᐃΔ[243][ns.ᐃᐃⵠ] = [ᐃᐃ.ⵠⲆⲆᐃΔΔᐃ, ᐃᐃ.ⲆΔᐃⵠΔⵠΔ, ᐃᐃ.ⲆⵠᐃΔⵠⲆⲆ, ᐃᐃ.ΔⵠⲆΔΔⵠⵠ, ᐃᐃ.ⲆⲆΔΔᐃⲆᐃ, ᐃᐃ.ⲆⲆⵠᐃᐃΔⵠ, ᐃᐃ.ᐃⲆΔᐃⵠΔⵠ, ᐃᐃ.ⲆⵠⲆᐃΔΔᐃ, ᐃᐃ.ᐃΔⲆᐃⵠΔᐃ, ᐃᐃ.ⲆᐃⲆⵠΔⲆⵠ, ᐃᐃ.ΔΔΔᐃᐃᐃⲆ, ᐃᐃ.ⲆᐃΔᐃΔᐃᐃ, ᐃᐃ.ⵠⲆᐃⵠΔⵠᐃ, ᐃᐃ.ⵠᐃⵠΔΔⲆⲆ, ᐃᐃ.ⲆΔᐃᐃᐃⲆᐃ, ᐃᐃ.ᐃᐃⲆΔᐃΔⲆ, ᐃᐃ.ᐃᐃⵠⵠⲆⵠⵠ, ᐃᐃ.ᐃⵠᐃΔⵠᐃΔ, ᐃᐃ.ⲆⵠⲆⲆΔⲆᐃ, ᐃᐃ.ΔⵠᐃⲆΔⵠᐃ, ᐃᐃ.ᐃⵠΔᐃⲆΔⵠ, ᐃᐃ.ᐃⵠⵠⵠᐃⵠᐃ, ᐃᐃ.ⲆⲆΔⵠⵠⲆᐃ, ᐃᐃ.ⵠⵠΔⲆⵠⲆⵠ, ᐃᐃ.ᐃⲆᐃⵠᐃⲆΔ, ᐃᐃ.ⵠⲆΔᐃΔⵠᐃ, ᐃᐃ.ᐃᐃΔⵠⲆⵠⵠ, ᐃᐃ.ⵠΔⲆᐃⵠΔⵠ, ᐃᐃ.ⵠⲆⵠⵠⵠⲆⲆ, ᐃᐃ.ⵠⲆⲆᐃΔⵠΔ, ᐃᐃ.ΔΔᐃⵠΔⲆᐃ, ᐃᐃ.ⲆⵠⵠⲆᐃⵠⲆ, ᐃᐃ.ᐃᐃΔΔΔⲆⲆ, ᐃᐃ.ΔΔⵠⵠᐃⵠΔ, ᐃᐃ.ⲆⵠⲆⵠΔᐃΔ, ᐃᐃ.ΔΔᐃΔΔⲆᐃ, ᐃᐃ.ⲆΔᐃⲆΔΔⲆ, ᐃᐃ.ᐃⲆⵠⲆΔΔΔ, ᐃᐃ.ΔⲆΔᐃΔⲆᐃ, ᐃᐃ.ΔᐃΔⲆⵠᐃΔ, ᐃᐃ.ⲆΔⲆΔᐃⲆΔ, ᐃᐃ.ᐃⵠᐃⵠⵠⵠⲆ, ᐃᐃ.ⲆΔⲆⵠⲆⵠΔ, ᐃᐃ.ᐃⲆⲆⲆⲆⲆⵠ, ᐃᐃ.ᐃⵠⲆⵠΔⲆΔ, ᐃᐃ.ΔⲆᐃⵠΔᐃΔ, ᐃᐃ.ΔᐃⲆⵠⵠⲆΔ, ᐃᐃ.ΔᐃΔⲆΔⵠᐃ, ᐃᐃ.ᐃΔᐃᐃᐃΔⵠ, ᐃᐃ.ⲆⵠᐃⲆⵠⵠΔ, ᐃᐃ.ⵠⲆⵠⲆⲆⲆⲆ, ᐃᐃ.ⲆᐃᐃⲆⲆᐃⵠ, ᐃᐃ.ⵠⲆⲆⵠᐃⲆⲆ, ᐃᐃ.ⲆⵠⵠⲆᐃΔⵠ, ᐃᐃ.ΔⵠΔΔᐃΔⵠ, ᐃᐃ.ⵠⲆⲆΔΔΔᐃ];
    ᐃΔ[676] = [];
    ᐃΔ[676][ns.ⵠᐃⵠ] = [];
    ᐃΔ[676][ns.ᐃᐃⵠ] = [];
    ᐃΔ[676][ns.ⵠᐃⵠ].push(Rq(xu(1.1, false, ["#252B28", "#747471", "#83827e"], 0)));
    ᐃΔ[676][ns.ⵠᐃⵠ].push(Rq(xu(0.9, Vg, ["#252B28", "#747471", "#83827e"], 1)));
    ᐃΔ[676][ns.ⵠᐃⵠ].push(Rq(xu(1, false, ["#252B28", "#747471", "#83827e"], 2)));
    ᐃΔ[676][ns.ⵠᐃⵠ].push(Rq(xu(0.9, false, ["#252B28", "#747471", "#83827e"], 2)));
    ᐃΔ[676][ns.ᐃᐃⵠ].push(Rq(xu(1.1, false, ["#030d14", "#123335", "#183f3f"], 0)));
    ᐃΔ[676][ns.ᐃᐃⵠ].push(Rq(xu(0.9, fr, ["#030d14", "#123335", "#183f3f"], 1)));
    ᐃΔ[676][ns.ᐃᐃⵠ].push(Rq(xu(1, Hs, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃΔ[676][ns.ᐃᐃⵠ].push(Rq(xu(0.9, co, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃΔ[679] = [];
    ᐃΔ[679][ns.ⵠᐃⵠ] = [];
    ᐃΔ[679][ns.ᐃᐃⵠ] = [];
    ᐃΔ[679][ns.ⵠᐃⵠ].push(Rq(xu(1.1, true, ["#252B28", "#58645F", "#75827D"], 2)));
    ᐃΔ[679][ns.ⵠᐃⵠ].push(Rq(xu(0.9, ie, ["#252B28", "#58645F", "#75827D"], 2)));
    ᐃΔ[679][ns.ⵠᐃⵠ].push(Rq(xu(1, true, ["#252B28", "#58645F", "#75827D"], 2)));
    ᐃΔ[679][ns.ⵠᐃⵠ].push(Rq(xu(0.9, nh, ["#252B28", "#58645F", "#75827D"], 2)));
    ᐃΔ[679][ns.ᐃᐃⵠ].push(Rq(xu(1.1, true, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃΔ[679][ns.ᐃᐃⵠ].push(Rq(xu(0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃΔ[679][ns.ᐃᐃⵠ].push(Rq(xu(1, true, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃΔ[679][ns.ᐃᐃⵠ].push(Rq(xu(0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
    ᐃΔ[415] = [];
    ᐃΔ[415][ns.ⵠᐃⵠ] = [];
    ᐃΔ[415][ns.ᐃᐃⵠ] = [];
    ᐃΔ[415][ns.ⵠᐃⵠ].push(Rq(Au(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃΔ[415][ns.ⵠᐃⵠ].push(Rq(Au(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃΔ[415][ns.ⵠᐃⵠ].push(Rq(Au(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ᐃΔ[415][ns.ᐃᐃⵠ].push(Rq(Au(1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ᐃΔ[415][ns.ᐃᐃⵠ].push(Rq(Au(1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ᐃΔ[415][ns.ᐃᐃⵠ].push(Rq(Au(1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ᐃΔ[416] = [];
    ᐃΔ[416][ns.ⵠᐃⵠ] = [];
    ᐃΔ[416][ns.ᐃᐃⵠ] = [];
    ᐃΔ[416][ns.ⵠᐃⵠ].push(Rq(yu(1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ᐃΔ[416][ns.ⵠᐃⵠ].push(Rq(yu(0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ᐃΔ[416][ns.ⵠᐃⵠ].push(Rq(yu(0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ᐃΔ[416][ns.ᐃᐃⵠ].push(Rq(yu(1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ᐃΔ[416][ns.ᐃᐃⵠ].push(Rq(yu(0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ᐃΔ[416][ns.ᐃᐃⵠ].push(Rq(yu(0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ᐃΔ[121] = [];
    ᐃΔ[121][ns.ⵠᐃⵠ] = [];
    ᐃΔ[121][ns.ᐃᐃⵠ] = [];
    ᐃΔ[121][ns.ⵠᐃⵠ].push(Rq(dc(1.7, true, ["#1d051e", "#c27add", "#cd98e5"])));
    ᐃΔ[121][ns.ⵠᐃⵠ].push(Rq(dc(1.5, Hl, ["#1d051e", "#c27add", "#cd98e5"])));
    ᐃΔ[121][ns.ⵠᐃⵠ].push(Rq(dc(1.3, true, ["#1d051e", "#c27add", "#cd98e5"])));
    ᐃΔ[121][ns.ᐃᐃⵠ].push(Rq(dc(1.7, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ᐃΔ[121][ns.ᐃᐃⵠ].push(Rq(dc(1.5, Xr, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ᐃΔ[121][ns.ᐃᐃⵠ].push(Rq(dc(1.3, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ᐃΔ[678] = [];
    ᐃΔ[678][ns.ⵠᐃⵠ] = [];
    ᐃΔ[678][ns.ᐃᐃⵠ] = [];
    ᐃΔ[678][ns.ⵠᐃⵠ].push(Rq(op(1, ["#2d53c4"])));
    ᐃΔ[678][ns.ᐃᐃⵠ].push(Rq(op(1, ["#2d53c4"])));
    ᐃΔ[696] = [];
    ᐃΔ[696][ns.ⵠᐃⵠ] = [];
    ᐃΔ[696][ns.ᐃᐃⵠ] = [];
    ᐃΔ[696][ns.ⵠᐃⵠ].push(Rq(op(1, ["#c4912d"])));
    ᐃΔ[696][ns.ᐃᐃⵠ].push(Rq(op(1, ["#c4912d"])));
    ᐃΔ[680] = [];
    ᐃΔ[680][ns.ⵠᐃⵠ] = Rq(Zc(1, ["#414040"]));
    ᐃΔ[680][ns.ᐃᐃⵠ] = Rq(Zc(1, ["#153635"]));
    ᐃΔ[508] = [];
    ᐃΔ[508][ns.ⵠᐃⵠ] = Rq(Fm(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃΔ[508][ns.ᐃᐃⵠ] = Rq(Fm(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃΔ[509] = [];
    ᐃΔ[509][ns.ⵠᐃⵠ] = Rq(Qm(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃΔ[509][ns.ᐃᐃⵠ] = Rq(Qm(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃΔ[512] = [];
    ᐃΔ[512][ns.ⵠᐃⵠ] = Rq(Qm(1, Pq, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃΔ[512][ns.ᐃᐃⵠ] = Rq(Qm(1, Hs, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃΔ[511] = [];
    ᐃΔ[511][ns.ⵠᐃⵠ] = Rq(Cm(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃΔ[511][ns.ᐃᐃⵠ] = Rq(Cm(1, rk, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃΔ[510] = [];
    ᐃΔ[510][ns.ⵠᐃⵠ] = Rq(zm(1, f, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ᐃΔ[510][ns.ᐃᐃⵠ] = Rq(zm(1, Wh, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ᐃΔ[419] = [];
    ᐃΔ[419][ns.ⵠᐃⵠ] = Rq(Lc(0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
    ᐃΔ[419][ns.ᐃᐃⵠ] = Rq(Lc(0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
    ᐃΔ[445] = [];
    ᐃΔ[445][ns.ⵠᐃⵠ] = Rq(yc(0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
    ᐃΔ[445][ns.ᐃᐃⵠ] = Rq(yc(0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
    ᐃΔ[259] = [];
    ᐃΔ[818] = [];
    ᐃΔ[516] = [];
    ᐃΔ[819] = [];
    for (a = 0; a < 2; a++) {
      ᐃΔ[259][a] = document.createElement("canvas");
      ᐃΔ[259][a].width = 193;
      ᐃΔ[259][a].height = 193;
      ᐃΔ[818][a] = ᐃΔ[259][a].getContext("2d");
      ᐃΔ[516][a] = document.createElement("canvas");
      ᐃΔ[516][a].width = 600;
      ᐃΔ[516][a].height = 600;
      ᐃΔ[819][a] = ᐃΔ[516][a].getContext("2d");
    }
    ᐃΔ[475] = [];
    ᐃΔ[475][ns.ⵠᐃⵠ] = Rq(Zc(1, ["#c8e0de"]));
    ᐃΔ[475][ns.ᐃᐃⵠ] = Rq(Zc(1, ["#147071"]));
    ᐃΔ[476] = [];
    ᐃΔ[476][ns.ⵠᐃⵠ] = Rq(Zc(1, ["#231912"]));
    ᐃΔ[476][ns.ᐃᐃⵠ] = Rq(Zc(1, ["#021719"]));
    ᐃΔ[697] = Rq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 253;
      c.height = a * 192;
      d.save();
      d.translate(a * 37, a * 94);
      ad(d, a * -7, a * -20, a * 14, a * 37, a * 20);
      d.restore();
      od(d, b[0]);
      d.save();
      d.translate(a * 131, a * 94);
      ad(d, a * -84, a * -67, a * 168, a * 134, a * 20);
      d.restore();
      od(d, b[0], b[0], a * 13);
      d.save();
      d.translate(a * 223, a * 94.5);
      ad(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
      d.restore();
      od(d, b[0]);
      d.save();
      d.translate(a * 128.5, a * 170.5);
      ad(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
      d.restore();
      od(d, b[0]);
      return c;
    }(0.5, ["#BB0000"]));
    ᐃΔ[461] = Rq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 161;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 9, a * 93);
      d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
      d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
      d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
      d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
      d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
      d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
      d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
      d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
      d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
      d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
      d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
      d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
      d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
      d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
      d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
      d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
      d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
      d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
      d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
      d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
      d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
      d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
      d.closePath();
      od(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 25, a * 63);
      d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
      d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
      d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
      od(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 91, a * 53);
      d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
      d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
      d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
      od(d, b, b, a * 4);
      return c;
    }(0.9, "#BB0000"));
    ᐃΔ[462] = Rq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 147;
      c.height = a * 172;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 8, a * 50);
      d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
      d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
      d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
      d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
      d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
      d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
      d.closePath();
      od(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 14, a * 57);
      d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
      d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
      od(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 47);
      d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
      d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
      od(d, b, b, a * 4);
      return c;
    }(0.9, "#BB0000"));
    ᐃΔ[463] = Rq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 271;
      c.height = a * 366;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 133, a * 99);
      d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
      d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
      d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
      d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
      d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
      d.closePath();
      od(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 73, a * 270);
      d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
      d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
      d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
      d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
      d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
      d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
      d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
      d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
      d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
      d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
      d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
      d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
      d.closePath();
      od(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 76, a * 252);
      d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
      d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
      d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
      d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
      d.closePath();
      od(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 84, a * 257);
      d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
      d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
      d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
      d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
      d.closePath();
      od(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125, a * 65);
      d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
      d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
      d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
      d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
      d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
      d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
      d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
      d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
      d.closePath();
      od(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 115, a * 37);
      d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
      d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
      d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
      d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
      d.closePath();
      od(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 146, a * 34);
      d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
      d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
      d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
      d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
      d.closePath();
      od(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 143, a * 69);
      d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
      d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
      d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
      d.closePath();
      od(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149, a * 92);
      d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
      d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
      d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
      d.closePath();
      od(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 111, a * 61);
      d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
      d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
      d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
      d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
      d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
      d.closePath();
      od(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107, a * 81);
      d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
      d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
      d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
      d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
      d.closePath();
      od(d, b[0]);
      return c;
    }(1, ["#BB0000"]));
    ᐃΔ[466] = Rq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -20, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 50, a * 105);
      d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
      d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
      d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
      d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
      d.closePath();
      od(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 44, a * 106);
      d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
      d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
      d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
      d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
      d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
      d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
      d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
      d.closePath();
      od(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 30, a * 159);
      d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
      d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
      d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
      d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
      d.closePath();
      od(d, b);
      return c;
    }(0.8, "#BB0000"));
    ᐃΔ[467] = Rq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -165, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217, a * 103);
      d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
      d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
      d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
      d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
      d.closePath();
      od(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 231, a * 163);
      d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
      d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
      d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
      d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
      d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
      d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
      d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
      d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
      d.closePath();
      od(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 234, a * 154);
      d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
      d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
      d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
      d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
      d.closePath();
      od(d, b);
      return c;
    }(0.8, "#BB0000"));
    ᐃΔ[322] = Rq(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 85;
      var g = b * 115;
      var a = b * 4;
      d.width = f;
      d.height = g;
      e.translate(b * -130, b * -60);
      e.globalAlpha = 1;
      e.beginPath();
      e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
      e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
      e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
      e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
      e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
      e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
      e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
      e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
      e.closePath();
      od(e, c, c, a);
      return d;
    }(0.9, "#BB0000"));
    ᐃΔ[279] = Rq(pd(0.6, "#BB0000"));
    ᐃΔ[280] = Rq(pd(0.6, "#1CE7E0"));
    ᐃΔ[281] = Rq(pd(0.6, "#DBE71C"));
    ᐃΔ[308] = Rq(pd(0.6, "#00BB00"));
    ᐃΔ[602] = [];
    ᐃΔ[602][ns.ⵠᐃⵠ] = Rq(Zc(1, ["#dac291"]));
    ᐃΔ[602][ns.ᐃᐃⵠ] = Rq(Zc(1, ["#0D423D"]));
    ᐃΔ[698] = [];
    ᐃΔ[698][ns.ⵠᐃⵠ] = Rq(Zc(1, ["#dac291"]));
    ᐃΔ[698][ns.ᐃᐃⵠ] = Rq(Zc(1, ["#0D423D"]));
    ᐃΔ[788] = [];
    ᐃΔ[788][ns.ⵠᐃⵠ] = Rq(wp(0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
    ᐃΔ[788][ns.ᐃᐃⵠ] = Rq(wp(0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
    ᐃΔ[182] = [];
    ᐃΔ[182][ns.ⵠᐃⵠ] = Rq(wp(0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
    ᐃΔ[182][ns.ᐃᐃⵠ] = Rq(wp(0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
    ᐃΔ[127] = [Rq(Ic(1, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ᐃΔ[128] = [Rq(Ic(1, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ᐃΔ[603] = [];
    ᐃΔ[603][ns.ⵠᐃⵠ] = [];
    ᐃΔ[603][ns.ᐃᐃⵠ] = [];
    ᐃΔ[603][ns.ⵠᐃⵠ].push(Rq(Gc(1, ["#0B6A84"])));
    ᐃΔ[603][ns.ⵠᐃⵠ].push(Rq(zp(1, ["#0B6A84"])));
    ᐃΔ[603][ns.ⵠᐃⵠ].push(Rq(xc(1, ["#0B6A84"])));
    ᐃΔ[603][ns.ⵠᐃⵠ].push(Rq(lc(1, ["#0B6A84"])));
    ᐃΔ[603][ns.ⵠᐃⵠ].push(Rq(kc(1, ["#0B6A84"])));
    ᐃΔ[603][ns.ⵠᐃⵠ].push(Rq(bc(1, ["#0B6A84"])));
    ᐃΔ[603][ns.ⵠᐃⵠ].push(Rq(rc(1, ["#0B6A84"])));
    ᐃΔ[603][ns.ᐃᐃⵠ].push(Rq(Gc(1, ["#09373F"])));
    ᐃΔ[603][ns.ᐃᐃⵠ].push(Rq(zp(1, ["#09373F"])));
    ᐃΔ[603][ns.ᐃᐃⵠ].push(Rq(xc(1, ["#09373F"])));
    ᐃΔ[603][ns.ᐃᐃⵠ].push(Rq(lc(1, ["#09373F"])));
    ᐃΔ[603][ns.ᐃᐃⵠ].push(Rq(kc(1, ["#09373F"])));
    ᐃΔ[603][ns.ᐃᐃⵠ].push(Rq(bc(1, ["#09373F"])));
    ᐃΔ[603][ns.ᐃᐃⵠ].push(Rq(rc(1, ["#09373F"])));
    ᐃΔ[692] = [];
    ᐃΔ[692][ns.ⵠᐃⵠ] = [];
    ᐃΔ[692][ns.ᐃᐃⵠ] = [];
    ᐃΔ[692][ns.ⵠᐃⵠ].push(Rq(vp(1.7, ["#FBEFBC"], 0)));
    ᐃΔ[692][ns.ⵠᐃⵠ].push(Rq(vp(1.9, ["#FBEFBC"], 1)));
    ᐃΔ[692][ns.ⵠᐃⵠ].push(Rq(vp(1.7, ["#FBEFBC"], 2)));
    ᐃΔ[692][ns.ᐃᐃⵠ].push(Rq(vp(1.7, ["#0F4C48"], 0)));
    ᐃΔ[692][ns.ᐃᐃⵠ].push(Rq(vp(1.9, ["#0F4C48"], 1)));
    ᐃΔ[692][ns.ᐃᐃⵠ].push(Rq(vp(1.7, ["#0F4C48"], 2)));
    ᐃΔ[694] = [];
    ᐃΔ[694][ns.ⵠᐃⵠ] = [];
    ᐃΔ[694][ns.ᐃᐃⵠ] = [];
    ᐃΔ[694][ns.ⵠᐃⵠ].push(Rq(vp(1.8, ["#A9D6D3"], 0)));
    ᐃΔ[694][ns.ⵠᐃⵠ].push(Rq(vp(2, ["#A9D6D3"], 1)));
    ᐃΔ[694][ns.ⵠᐃⵠ].push(Rq(vp(1.8, ["#A9D6D3"], 2)));
    ᐃΔ[694][ns.ᐃᐃⵠ].push(Rq(vp(1.8, ["#115E60"], 0)));
    ᐃΔ[694][ns.ᐃᐃⵠ].push(Rq(vp(2, ["#115E60"], 1)));
    ᐃΔ[694][ns.ᐃᐃⵠ].push(Rq(vp(1.8, ["#115E60"], 2)));
    ᐃΔ[695] = [];
    ᐃΔ[695][ns.ⵠᐃⵠ] = [];
    ᐃΔ[695][ns.ᐃᐃⵠ] = [];
    ᐃΔ[695][ns.ⵠᐃⵠ].push(Rq(vp(1.9, ["#2A8B9B"], 0)));
    ᐃΔ[695][ns.ⵠᐃⵠ].push(Rq(vp(2.1, ["#2A8B9B"], 1)));
    ᐃΔ[695][ns.ⵠᐃⵠ].push(Rq(vp(1.9, ["#2A8B9B"], 2)));
    ᐃΔ[695][ns.ᐃᐃⵠ].push(Rq(vp(1.9, ["#0F464C"], 0)));
    ᐃΔ[695][ns.ᐃᐃⵠ].push(Rq(vp(2.1, ["#0F464C"], 1)));
    ᐃΔ[695][ns.ᐃᐃⵠ].push(Rq(vp(1.9, ["#0F464C"], 2)));
    ᐃΔ[693] = [];
    ᐃΔ[693][ns.ⵠᐃⵠ] = [];
    ᐃΔ[693][ns.ᐃᐃⵠ] = [];
    ᐃΔ[693][ns.ⵠᐃⵠ].push(Rq(dm(0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ᐃΔ[693][ns.ⵠᐃⵠ].push(Rq(dm(1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ᐃΔ[693][ns.ⵠᐃⵠ].push(Rq(dm(1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ᐃΔ[693][ns.ᐃᐃⵠ].push(Rq(dm(0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ᐃΔ[693][ns.ᐃᐃⵠ].push(Rq(dm(1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ᐃΔ[693][ns.ᐃᐃⵠ].push(Rq(dm(1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ᐃΔ[637] = [];
    ᐃΔ[637][ns.ⵠᐃⵠ] = Rq(Cp(0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
    ᐃΔ[637][ns.ᐃᐃⵠ] = Rq(Cp(0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
    ᐃΔ[687] = Rq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 376;
      c.height = a * 371;
      d.globalAlpha = 1;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 191.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
      d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
      d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
      d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
      d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
      d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
      d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
      d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
      d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
      d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
      d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
      d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
      d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
      d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
      d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
      d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
      d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
      d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
      d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
      d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
      d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
      d.closePath();
      od(d, b[0], b[0], a * 12);
      return c;
    }(0.8, ["#B6222A"]));
    ᐃΔ[673] = [];
    ᐃΔ[673][ns.ⵠᐃⵠ] = Rq(_c(0.8, 0, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
    ᐃΔ[673][ns.ᐃᐃⵠ] = Rq(_c(0.8, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
    ᐃΔ[688] = Rq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 158;
      c.height = a * 201;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 96.5, a * 76.421875);
      d.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
      d.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
      d.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
      d.closePath();
      od(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 61.5, a * 78.421875);
      d.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
      d.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
      d.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
      d.closePath();
      od(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 116.5, a * 127.421875);
      d.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
      d.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
      d.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
      d.closePath();
      od(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 41.5, a * 134.421875);
      d.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
      d.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
      d.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
      d.closePath();
      od(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 78.5, a * 51.921875);
      d.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
      d.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
      d.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
      d.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
      d.closePath();
      od(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      od(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 42.5, a * 163.421875);
      d.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
      d.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
      d.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
      d.closePath();
      od(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 79.5, a * 61.421875);
      d.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
      d.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
      d.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
      d.closePath();
      od(d, b[0], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      od(d, b[0], b[0], a * 10);
      return c;
    }(0.8, ["#B6222A"]));
    ᐃΔ[902] = [];
    ᐃΔ[902][ns.ⵠᐃⵠ] = Rq(Ad(0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
    ᐃΔ[902][ns.ᐃᐃⵠ] = Rq(Ad(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    ᐃΔ[903] = [];
    ᐃΔ[903][ns.ⵠᐃⵠ] = Rq(Ad(0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
    ᐃΔ[903][ns.ᐃᐃⵠ] = Rq(Ad(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
    ᐃΔ[ns.ⲆᐃⵠⲆⵠⵠΔ] = [];
    ᐃΔ[ns.ⲆᐃⵠⲆⵠⵠΔ][ns.ⵠᐃⵠ] = Rq(Ad(0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
    ᐃΔ[ns.ⲆᐃⵠⲆⵠⵠΔ][ns.ᐃᐃⵠ] = Rq(Ad(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
    ᐃΔ[904] = Rq(Ld(0.4, ["#B6222A"]));
    ᐃΔ[905] = Rq(Ld(0.4, ["#B6222A"]));
    ᐃΔ[ns.ΔⲆⲆⵠⵠΔΔⵠΔ] = Rq(Ld(0.4, ["#B6222A"]));
    ᐃΔ[230] = Rq(Bm(0.35, true, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
    ᐃΔ[229] = Rq(ku(0.35, true, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
    ᐃΔ[886] = [];
    ᐃΔ[886][ns.ⵠᐃⵠ] = Rq(ru(0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
    ᐃΔ[886][ns.ᐃᐃⵠ] = Rq(ru(0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
    ᐃΔ[887] = [];
    ᐃΔ[887][ns.ⵠᐃⵠ] = Rq(ru(0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
    ᐃΔ[887][ns.ᐃᐃⵠ] = Rq(ru(0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
    ᐃΔ[894] = [];
    ᐃΔ[894][ns.ⵠᐃⵠ] = Rq(pu(0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ᐃΔ[894][ns.ᐃᐃⵠ] = Rq(pu(0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ᐃΔ[895] = [];
    ᐃΔ[895][ns.ⵠᐃⵠ] = Rq(mu(0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ᐃΔ[895][ns.ᐃᐃⵠ] = Rq(mu(0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ᐃΔ[896] = [];
    ᐃΔ[896][ns.ⵠᐃⵠ] = Rq(pu(0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ᐃΔ[896][ns.ᐃᐃⵠ] = Rq(pu(0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
    ᐃΔ[897] = [];
    ᐃΔ[897][ns.ⵠᐃⵠ] = Rq(mu(0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ᐃΔ[897][ns.ᐃᐃⵠ] = Rq(mu(0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
    ᐃΔ[888] = Rq(ju(0.35, ["#B6222A"]));
    ᐃΔ[889] = Rq(pu(0.35, 0, [undefined, "#B6222A"]));
    ᐃΔ[890] = Rq(mu(0.35, 0, [undefined, "#B6222A"]));
    ᐃΔ[891] = Rq(ju(0.35, ["#22E066"]));
    ᐃΔ[892] = Rq(pu(0.35, 0, [undefined, "#22E066"]));
    ᐃΔ[893] = Rq(mu(0.35, 0, [$q, "#22E066"]));
    ᐃΔ[48] = [];
    ᐃΔ[48][ns.ⵠᐃⵠ] = Rq(Qu(0.3, ls, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
    ᐃΔ[48][ns.ᐃᐃⵠ] = Rq(Qu(0.3, true, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
    ᐃΔ[47] = [];
    ᐃΔ[47][ns.ⵠᐃⵠ] = Rq(sm(0.45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
    ᐃΔ[47][ns.ᐃᐃⵠ] = Rq(sm(0.45, true, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
    ᐃΔ[141] = [];
    ᐃΔ[141][ns.ⵠᐃⵠ] = Rq(yp(0.63, ls, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
    ᐃΔ[141][ns.ᐃᐃⵠ] = Rq(yp(0.63, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ᐃΔ[125] = [];
    ᐃΔ[125][ns.ⵠᐃⵠ] = Rq(mp(1, Cq, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
    ᐃΔ[125][ns.ᐃᐃⵠ] = Rq(mp(1, Tk, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ᐃΔ[221] = [];
    ᐃΔ[221][ns.ⵠᐃⵠ] = ᐃᐃ.ⲆⲆᐃᐃⲆΔⵠⲆᐃ;
    ᐃΔ[221][ns.ᐃᐃⵠ] = ᐃᐃ.ΔⲆᐃΔⵠⲆⵠⵠⲆ;
    ᐃΔ[190] = [];
    ᐃΔ[190][ns.ⵠᐃⵠ] = Rq(zd(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ᐃΔ[190][ns.ᐃᐃⵠ] = Rq(zd(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ᐃΔ[853] = [ᐃΔ[190]];
    ᐃΔ[853][1] = [];
    ᐃΔ[853][2] = [];
    ᐃΔ[853][1][ns.ⵠᐃⵠ] = Rq(wd(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ᐃΔ[853][1][ns.ᐃᐃⵠ] = Rq(wd(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ᐃΔ[853][2][ns.ⵠᐃⵠ] = Rq(Pd(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ᐃΔ[853][2][ns.ᐃᐃⵠ] = Rq(Pd(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ᐃΔ[49] = [];
    ᐃΔ[49][ns.ⵠᐃⵠ] = Rq(bd(3 - Math.PI / 2, Xm(0.6, Xs, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
    ᐃΔ[49][ns.ᐃᐃⵠ] = Rq(bd(3 - Math.PI / 2, Xm(0.6, true, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
    ᐃΔ[728] = [];
    ᐃΔ[728][ns.ⵠᐃⵠ] = Rq(Dd(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
    ᐃΔ[728][ns.ᐃᐃⵠ] = Rq(Dd(0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
    ᐃΔ[798] = Rq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 650;
      c.height = a * 650;
      d.scale(1.9, 1.9);
      d.save();
      d.translate(a * 202.5, a * 147.5);
      ad(d, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
      d.restore();
      od(d, b[4], b[1], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      ad(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      od(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      ad(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
      d.restore();
      od(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      ad(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      od(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 108.5, a * 210);
      ad(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      od(d, b[3], b[1], a * 12);
      d.save();
      d.translate(a * 204, a * 121.5);
      ad(d, a * -92, a * -9.5, a * 184, a * 19, a * 10);
      d.restore();
      od(d, b[3], b[3], a * 10);
      d.save();
      d.translate(a * 197, a * 299);
      ad(d, a * 85, a * -9, a * -170, a * 18, a * 10);
      d.restore();
      od(d, b[3], b[3], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 94, a * 317);
      d.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
      d.closePath();
      od(d, undefined, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 279, a * 142);
      d.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
      d.closePath();
      od(d, undefined, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 106);
      d.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
      d.closePath();
      od(d, undefined, b[1], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 281, a * 282);
      d.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
      d.closePath();
      od(d, Bt, b[1], a * 12);
      return c;
    }(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
    ᐃΔ[729] = Rq(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 400;
      c.height = a * 400;
      d.save();
      d.translate(a * 202.5, a * 147.5);
      ad(d, a * -96.5, a * -21.5, a * 193, a * 43, a * 0);
      d.restore();
      od(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 190.5);
      ad(d, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
      d.restore();
      od(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 233.5);
      ad(d, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
      d.restore();
      od(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 275);
      ad(d, a * 96.5, a * -21, a * -193, a * 42, a * 0);
      d.restore();
      od(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      ad(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      od(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      ad(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
      d.restore();
      od(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      ad(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      od(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 108.5, a * 210);
      ad(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      od(d, b[0], b[0], a * 12);
      return c;
    }(0.3, ["#BB0000"]));
    ᐃΔ[658] = Kd(1, [{
      f: ip,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ᐃΔ[150] = Kd(1.5, [{
      f: xp,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#120202", "#750a0a", "#991616", "#120202"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ᐃΔ[669] = Mp(0.35, ["#072428", "#67A242", "#67A242"], 0);
    ᐃΔ[670] = Mp(0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
    ᐃΔ[671] = Mp(0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
    ᐃΔ[672] = Mp(0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
    if (ΔⵠΔΔⲆᐃⵠ) {
      ᐃΔ[278] = Rq(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 180;
        var g = b * 8;
        c.width = e;
        c.height = f;
        d.beginPath();
        ad(d, 0, 0, e, f - g, g);
        d.globalAlpha = 0.8;
        od(d, "#1D6055");
        d.globalAlpha = 1;
        var a = Cu(b, "Leaderboard", 25, "#FFF");
        d.drawImage(a, (e - a.width) / 2, b * 5);
        return c;
      }(1));
    } else {
      ᐃΔ[278] = Rq(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 270;
        var g = b * 8;
        c.width = e;
        c.height = f + 20;
        d.beginPath();
        ad(d, 0, 0, e, f - g, g);
        d.globalAlpha = 0.5;
        od(d, "#1D6055");
        d.globalAlpha = 1;
        var a = Cu(b, "Leaderboard", 25, "#FFF");
        d.drawImage(a, (e - a.width) / 2, b * 5);
        return c;
      }(1));
    }
    if (ΔⵠΔΔⲆᐃⵠ) {
      ᐃΔ[267] = Rq(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 335;
        var f = b * 250;
        var i = b * 120;
        var a = b * 20;
        var j = b * 35;
        var k = b * 65;
        var h = b * 2;
        var g = b * 4;
        c.width = e;
        c.height = i;
        d.beginPath();
        d.translate(0, b * 15);
        ad(d, k, 0, f, a, h);
        od(d, null, "#69A148", g);
        d.translate(0, j);
        ad(d, k, 0, f, a, h);
        od(d, null, "#AF352A", g);
        d.translate(0, j);
        ad(d, k, 0, f, a, h);
        od(d, null, "#669BB1", g);
        return c;
      }(0.75));
    } else {
      ᐃΔ[267] = Rq(function (c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = c * 950;
        var i = c * 180;
        var j = c * 50;
        var a = c * 20;
        var k = c * 240;
        var m = c * 35;
        var h = c * 1;
        var g = c * 4;
        var l = c * 4;
        d.width = f;
        d.height = j;
        e.translate(0, c * 15);
        ad(e, m, h, i, a, g);
        od(e, null, "#69A148", l);
        var n = ᐃΔ[669];
        e.drawImage(n, 17, -8);
        e.translate(k, 0);
        ad(e, m, h, i, a, g);
        od(e, null, "#AF352A", l);
        n = ᐃΔ[671];
        e.drawImage(n, 17, -9);
        e.translate(k, 0);
        ad(e, m, h, i, a, g);
        od(e, null, "#669BB1", l);
        n = ᐃΔ[670];
        e.drawImage(n, 17, -8);
        e.translate(k, 0);
        ad(e, m, h, i, a, g);
        od(e, null, "#074A87", l);
        n = ᐃΔ[672];
        e.drawImage(n, 17, -8);
        return d;
      }(1));
    }
    if (ΔⵠΔΔⲆᐃⵠ) {
      ᐃΔ[608] = Rq(Sp(0.75));
    } else {
      ᐃΔ[608] = Rq(Sp(1));
    }
    ᐃΔ[792] = Rq(bp(0.16, oo, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
    ᐃΔ[537] = Rq(bd(5.8, su(0.15, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
    ᐃΔ[283] = [];
    ᐃΔ[465] = [];
    for (a = 0; a < 18; a++) {
      ᐃΔ[465][a] = Cu(1, "" + (a + 1), 12, "#FFF");
    }
    ᐃΔ[708] = [];
    ᐃΔ[708].push(Rq(ap(0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
    ᐃΔ[708].push(Rq(ap(0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
    ᐃΔ[708].push(Rq(ap(0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
    ᐃΔ[725] = [];
    ᐃΔ[725].push(Rq(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      c.translate(0, a * 20);
      hd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      od(c, "#322413", "#322413", a * 4);
      c.translate(0, a * -20);
      hd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      od(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      od(c, "#12432D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      od(c, "#3A2A0D");
      hd(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      od(c, undefined, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      od(c, undefined, "#5E3E1A", a * 12);
      c.translate(0, a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      od(c, da, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      od(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      od(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      od(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      od(c, oh, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      od(c, Yh, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      od(c, md, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      od(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      od(c, undefined, "#c7a726", a * 12);
      c.translate(0, a * -8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      od(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      od(c, md, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      od(c, da, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      od(c, Yh, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      od(c, undefined, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      od(c, ct, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      od(c, rh, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      od(c, rh, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      od(c, sk, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      od(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      od(c, "#ECBE35", "#EDCE4F", a * 8);
      hd(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      od(c, "#392C16", "#5E3E1A", a * 10);
      return b;
    }(0.22)));
    ᐃΔ[725].push(Rq(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      c.translate(0, a * 20);
      hd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      od(c, "#322413", "#322413", a * 4);
      c.translate(0, a * -20);
      hd(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      od(c, "#392C16", "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      od(c, "#3A2A0D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      od(c, "#071A1B");
      hd(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      od(c, undefined, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      od(c, Wb, "#5E3E1A", a * 12);
      c.translate(0, a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      od(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      od(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      od(c, rh, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      od(c, $q, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      od(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      od(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      od(c, ct, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      od(c, undefined, "#281C08", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      od(c, undefined, "#281C08", a * 12);
      c.translate(0, a * -8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      od(c, Rr, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      od(c, oh, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      od(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      od(c, Pn, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      od(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      od(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      od(c, undefined, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      od(c, md, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      od(c, os, "#5E3C10", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      od(c, "#704618", "#5D3D1A", a * 8);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      od(c, "#E1DDD5", "#EAE7E4", a * 8);
      hd(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      od(c, "#392C16", "#5E3E1A", a * 10);
      return b;
    }(0.22)));
    ᐃΔ[726] = Rq(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, a * 5);
      hd(c, a * 161.00003051757812, a * 165.40341186523438, a * 20.808652046684813);
      od(c, "#C09D6F", "#A37943", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 162.00003051757812, a * 48.403411865234375);
      c.bezierCurveTo(a * 172.50003051757812, a * 67.40341186523438, a * 172.50003051757812, a * 67.40341186523438, a * 183.00003051757812, a * 86.40341186523438);
      c.bezierCurveTo(a * 160.50003051757812, a * 86.40341186523438, a * 160.50003051757812, a * 86.40341186523438, a * 138.00003051757812, a * 86.40341186523438);
      c.closePath();
      od(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 161.50003051757812, a * 117.90341186523438);
      ad(c, a * -5.5, a * -37.5, a * 11, a * 75, a * 10);
      c.restore();
      od(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 162.00003051757812, a * 78.90341186523438);
      ad(c, a * -10, a * -5.5, a * 20, a * 11, a * 1);
      c.restore();
      od(c, "#C09D6F");
      hd(c, a * 161.00003051757812, a * 163.6761474609375, a * 17.08800749063506);
      od(c, "#C09D6F");
      return b;
    }(0.22));
    ᐃΔ[727] = [];
    ᐃΔ[727].push(Rq(Ed(1.5, ["#795026", "#654320", "#eda80d"], 0)));
    ᐃΔ[727].push(Rq(Ed(1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
    ᐃΔ[727].push(Rq(Ed(1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
    ᐃΔ[546] = ᐃᐃ.ⲆᐃΔᐃᐃⲆᐃ;
    ᐃΔ[547] = ᐃᐃ.ᐃᐃⵠΔⲆΔΔ;
    ᐃΔ[548] = ᐃᐃ.ΔⲆⲆΔⵠᐃⵠ;
    ᐃΔ[549] = ᐃᐃ.ⲆΔⵠᐃᐃⲆⵠ;
    ᐃΔ[517] = Cu(1, "Show spectators", 25, "#FFF", undefined, dg, "#000", 5, 220);
    ᐃΔ[525] = Cu(1, "Reconnecting...", 30, "#FFF");
    console.log(undefined, Rr);
  }
  function _p(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    hd(e, a * 220, a * 201, a * 170.41713528867922);
    od(e, c[0], c[0], a * 6);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    hd(e, a * 220, a * 201, a * 170.41713528867922);
    od(e, c[1], c[2], a * 6);
    hd(e, a * 220, a * 201, a * 130);
    od(e, c[11], c[2], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    od(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    od(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    e.closePath();
    od(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    od(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    od(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    od(e, c[5], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142, a * 223);
    e.bezierCurveTo(a * 128, a * 213, a * 123, a * 214, a * 111, a * 223);
    e.closePath();
    od(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 133);
    e.bezierCurveTo(a * 269, a * 188, a * 262, a * 229, a * 251, a * 253);
    e.bezierCurveTo(a * 288, a * 224, a * 273, a * 139, a * 252, a * 133);
    e.closePath();
    od(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 203, a * 102);
    e.bezierCurveTo(a * 204, a * 136, a * 200, a * 159, a * 189, a * 174);
    e.bezierCurveTo(a * 223, a * 164, a * 219, a * 87, a * 205, a * 83);
    e.closePath();
    od(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196, a * 324);
    e.bezierCurveTo(a * 209, a * 239, a * 200, a * 219, a * 192, a * 196);
    e.bezierCurveTo(a * 229, a * 216, a * 219, a * 316, a * 198, a * 325);
    e.closePath();
    od(e, c[10], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 266, a * 166);
    e.bezierCurveTo(a * 249, a * 154, a * 243, a * 161, a * 233, a * 167);
    od(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 269, a * 192);
    e.bezierCurveTo(a * 256, a * 183, a * 241, a * 186, a * 233, a * 192);
    od(e, oh, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 217);
    e.bezierCurveTo(a * 251, a * 211, a * 242, a * 213, a * 236, a * 218);
    od(e, Rr, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 141);
    e.bezierCurveTo(a * 191, a * 131, a * 187, a * 133, a * 176, a * 141);
    od(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 230);
    e.bezierCurveTo(a * 193, a * 222, a * 185, a * 224, a * 177, a * 231);
    od(e, undefined, c[6], a * 6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 258);
    e.bezierCurveTo(a * 196, a * 247, a * 191, a * 250, a * 177, a * 259);
    od(e, Rr, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 196);
    e.bezierCurveTo(a * 130, a * 186, a * 124, a * 187, a * 114, a * 195);
    od(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    od(e, Pn, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    od(e, Yh, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    e.closePath();
    od(e, oj, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    od(e, Pn, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    od(e, md, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    od(e, undefined, c[6], a * 6);
    hd(e, a * 222, a * 199, a * 120.74767078498864);
    od(e, undefined, c[3], a * 40);
    hd(e, a * 220, a * 200, a * 95.44108130150245);
    od(e, undefined, c[2], a * 15);
    hd(e, a * 220, a * 201, a * 85);
    od(e, ct, c[4], a * 10);
    e.globalAlpha = 0.5;
    hd(e, a * 220, a * 201, a * 82);
    od(e, c[9]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    hd(e, a * 63, a * 136, a * 49.193495504995376);
    od(e, c[0], c[0], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    hd(e, a * 63, a * 136, a * 49.193495504995376);
    od(e, c[8], c[2], a * 4);
    hd(e, a * 63, a * 137, a * 25.632011235952593);
    od(e, c[7], c[2], a * 4);
    return d;
  }
  function Rp() {
    if (!Rx.ΔⲆΔⵠ.open && !Rx.ΔⵠⵠΔⲆ.open) {
      Rx.ᐃⵠΔᐃ.open = false;
      var b = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ];
      var c = 100;
      if (b) {
        for (var d = 0; d < Nf.length; d++) {
          for (var e = Nf[d][0], f = Nf[d][1], j = 0; Qx.Δⵠⵠ[e].length > j; j++) {
            var k = Qx.Δⵠⵠ[e][j];
            var m = ⲆⵠΔⵠ.ᐃⵠⲆⲆ(k, b);
            if (m < c) {
              c = m;
              Rx.ᐃⵠΔᐃ.ΔⵠΔΔⲆΔⲆ = f;
              Rx.ᐃⵠΔᐃ.type = e;
              Rx.ᐃⵠΔᐃ.open = wi;
              Rx.ᐃⵠΔᐃ.ᐃᐃΔᐃⵠΔΔ = k.info & 255;
              Rx.ᐃⵠΔᐃ.ⲆΔᐃⲆᐃᐃΔ = (k.info & 65280) >> 8;
              Rx.ᐃⵠΔᐃ.ᐃΔᐃΔ = k.ᐃΔᐃΔ;
              Rx.ᐃⵠΔᐃ.Δⵠᐃᐃⵠ = k.id;
            }
          }
        }
        if (c < 100) {
          var p;
          var q = ᐃΔ[656];
          var g = (l = Tx.ⲆⵠΔⵠΔⲆΔ).info.translate.x - 33;
          Np(zo, q, g, 0);
          if (Rx.ᐃⵠΔᐃ.ᐃᐃΔᐃⵠΔΔ > 0) {
            l.ⲆⵠⵠΔ(zo);
            if ((p = Rx.ᐃⵠΔᐃ.ᐃᐃΔᐃⵠΔΔ) > 1) {
              Fp(p, l);
            }
          }
          switch (Rx.ᐃⵠΔᐃ.ΔⵠΔΔⲆΔⲆ) {
            case 108:
              var l = Tx.ⲆⲆⵠⲆᐃΔⵠ;
              break;
            case 111:
              l = Tx.ΔⲆᐃⲆΔΔΔ;
              break;
            case 112:
              l = Tx.ⲆⵠΔⵠⵠᐃⲆ;
              break;
            case 121:
              l = Tx.ᐃᐃᐃⲆᐃΔΔ;
              break;
            case 202:
              l = Tx.ⵠᐃΔⲆⵠᐃⲆ;
          }
          if (Rx.ᐃⵠΔᐃ.ⲆΔᐃⲆᐃᐃΔ > 0) {
            l.ⲆⵠⵠΔ(zo);
            if ((p = Rx.ᐃⵠΔᐃ.ⲆΔᐃⲆᐃᐃΔ) > 1) {
              Fp(p, l);
            }
          }
        }
      }
    }
  }
  function Fp(a, b) {
    ᐃΔ[283][a] ||= Cu(So, "x" + a, 17, "#FFF");
    var c = ᐃΔ[283][a];
    var d = b.info.translate.x + b.info.ⵠⵠ[0].width - c.width - So * 14;
    var e = b.info.translate.y + b.info.ⵠⵠ[0].height - c.height - So * 19;
    if (mf == b.info.state) {
      e += So * 5;
    }
    Np(zo, c, d, e);
  }
  function jp() {
    var a = Tx.ⵠᐃⵠⲆⵠ;
    var b = a.id;
    if (a.ⲆⲆⲆⵠᐃ === 1 && a.display === 1) {
      if (ct === ⵠΔΔᐃⵠ[b]) {
        ⵠΔΔᐃⵠ[b] = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          var e = Ib[b];
          d.font = "20px Baloo Paaji";
          var f = 0;
          if (e.length >= 1) {
            f = Math.max(0, d.measureText(e[0]).width);
          }
          d.font = "17px Baloo Paaji";
          if (e.length >= 2) {
            f = Math.max(f, d.measureText(e[1]).width);
          }
          d.font = "14px Baloo Paaji";
          Sb = 2;
          for (; e.length > Sb; Sb++) {
            f = Math.max(f, d.measureText(e[Sb]).width);
          }
          var g = f + 35;
          var a = 0;
          a = e.length === 1 ? 55 : e.length === 2 ? 85 : (e.length - 2) * 26 + 85;
          c.width = g;
          c.height = a;
          ad(d, 0, 0, g, a, 10);
          d.fillStyle = "#000000";
          d.globalAlpha = 0.5;
          d.fill();
          if (e.length >= 1) {
            d.textBaseline = "middle";
            d.font = "20px Baloo Paaji";
            d.globalAlpha = 1;
            d.fillStyle = "#e2c340";
            d.fillText(e[0], 15, 28);
          }
          if (e.length >= 2) {
            d.font = "17px Baloo Paaji";
            d.fillStyle = "#ffffff";
            d.fillText(e[1], 15, 55);
            a = 55;
          }
          if (e.length >= 3) {
            d.font = "14px Baloo Paaji";
            d.globalAlpha = 0.7;
            Sb = 2;
            for (; Sb < e.length; Sb++) {
              d.fillText(e[Sb], 15, a + 28);
              a += 26;
            }
          }
          return c;
        }(b);
      }
      if (a.ⲆΔⲆΔ === 1) {
        Np(zo, ⵠΔΔᐃⵠ[b], a.x, a.y);
      } else if (yo < a.x - 80 + ⵠΔΔᐃⵠ[b].width) {
        Np(zo, ⵠΔΔᐃⵠ[b], yo - ⵠΔΔᐃⵠ[b].width - 10, a.y - ⵠΔΔᐃⵠ[b].height - 10);
      } else {
        Np(zo, ⵠΔΔᐃⵠ[b], a.x - 80, a.y - ⵠΔΔᐃⵠ[b].height - 10);
      }
    }
  }
  function Lp(b, c, d) {
    var e = ᐃΔ[465][b];
    var f = c.info.translate.x + So * 5;
    var g = c.info.translate.y + So * 5;
    if (mf == c.info.state || d) {
      g += So * 5;
    }
    Np(zo, e, f, g);
  }
  function Gp() {
    if (!Rx.ΔⲆΔⵠ.open) {
      Rx.ΔⵠⵠΔⲆ.ᐃⵠⲆⵠ = 0;
      Rx.ΔⵠⵠΔⲆ.open = false;
      var b = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ];
      var c = 100;
      if (b) {
        for (var d = 0; Qx.Δⵠⵠ[18].length > d; d++) {
          var e = Qx.Δⵠⵠ[18][d];
          var f = ⲆⵠΔⵠ.ᐃⵠⲆⲆ(e, b);
          if (f < c) {
            c = f;
            Rx.ΔⵠⵠΔⲆ.open = true;
            Rx.ΔⵠⵠΔⲆ.ᐃⵠⲆⵠ = e.info;
            Rx.ΔⵠⵠΔⲆ.ᐃΔᐃΔ = e.ᐃΔᐃΔ;
            Rx.ΔⵠⵠΔⲆ.Δⵠᐃᐃⵠ = e.id;
          }
        }
        if (c < 100) {
          var j = ᐃΔ[411];
          var a = Tx.ΔⵠⲆΔᐃⲆⲆ;
          var k = Math.floor(a.info.translate.x + (a.info.ⵠⵠ[0].width - j.width) / 2);
          var l = Math.floor(a.info.translate.y + (a.info.ⵠⵠ[0].height - j.height) / 2) + 3;
          Np(zo, j, k, l);
          if (Rx.ΔⵠⵠΔⲆ.ᐃⵠⲆⵠ > 0) {
            a.ⲆⵠⵠΔ(zo);
            var h = Rx.ΔⵠⵠΔⲆ.ᐃⵠⲆⵠ;
            if (h > 1) {
              Fp(h, a);
            }
          }
        }
      }
    }
  }
  function Wp() {
    if (!Rx.ΔⲆΔⵠ.open && !Rx.ΔⵠⵠΔⲆ.open && !Rx.ᐃⲆΔⵠ.open && !Rx.ᐃⵠΔᐃ.open) {
      Rx.ⲆᐃΔᐃ.open = rk;
      var b = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ];
      var c = 100;
      if (b) {
        for (var d = 0; d < Qx.Δⵠⵠ[34].length; d++) {
          var e = Qx.Δⵠⵠ[34][d];
          var f = ⲆⵠΔⵠ.ᐃⵠⲆⲆ(e, b);
          if (c > f) {
            c = f;
            Rx.ⲆᐃΔᐃ.open = Dl;
            Rx.ⲆᐃΔᐃ.ᐃᐃΔᐃⵠΔΔ = e.info & 31;
            Rx.ⲆᐃΔᐃ.ΔⵠΔᐃΔ = (e.info & 992) >> 5;
            Rx.ⲆᐃΔᐃ.ΔΔⵠΔⲆⲆⵠ = (e.info & 31744) >> 10;
            Rx.ⲆᐃΔᐃ.ᐃΔᐃΔ = e.ᐃΔᐃΔ;
            Rx.ⲆᐃΔᐃ.Δⵠᐃᐃⵠ = e.id;
          }
        }
        if (c < 100) {
          var g = ᐃΔ[722];
          var a = (j = Tx.ΔⵠᐃᐃⵠᐃⲆ).info.translate.x - 32;
          Np(zo, g, a, 0);
          if (Rx.ⲆᐃΔᐃ.ᐃᐃΔᐃⵠΔΔ > 0) {
            j.ⲆⵠⵠΔ(zo);
            if ((k = Rx.ⲆᐃΔᐃ.ᐃᐃΔᐃⵠΔΔ) > 1) {
              Fp(k, j);
            }
          }
          var j = Tx.ⵠᐃⲆⲆⲆⵠᐃ;
          if (Rx.ⲆᐃΔᐃ.ΔΔⵠΔⲆⲆⵠ > 0) {
            j.ⲆⵠⵠΔ(zo);
            var k = Rx.ⲆᐃΔᐃ.ΔΔⵠΔⲆⲆⵠ;
            if (k > 1) {
              Fp(k, j);
            }
          }
          j = Tx.ⵠΔᐃⲆⵠᐃΔ;
          if (Rx.ⲆᐃΔᐃ.ΔⵠΔᐃΔ > 0) {
            j.ⲆⵠⵠΔ(zo);
            if ((k = Rx.ⲆᐃΔᐃ.ΔⵠΔᐃΔ) > 1) {
              Fp(k, j);
            }
          }
        }
      }
    }
  }
  function qp() {
    if (Rx.ⵠⵠⲆᐃ.ⵠΔⲆᐃⲆ.length > 0) {
      var b = {
        x: Tx.ⲆᐃⲆΔᐃ.translate.x,
        y: Tx.ⲆᐃⲆΔᐃ.translate.y - So * 120
      };
    } else {
      b = {
        x: Tx.ⲆᐃⲆΔᐃ.translate.x,
        y: Tx.ⲆᐃⲆΔᐃ.translate.y - So * 50
      };
    }
    zo.globalAlpha = 0.8;
    var c = ᐃΔ[259][Qx.time];
    Np(zo, c, b.x, b.y);
    zo.globalAlpha = 1;
    if (Tx.ⲆᐃⲆΔᐃ.Δⵠᐃⵠᐃ.x > -1) {
      zo.fillStyle = "#660000";
      hd(zo, b.x + Tx.ⲆᐃⲆΔᐃ.Δⵠᐃⵠᐃ.x * So, b.y + Tx.ⲆᐃⲆΔᐃ.Δⵠᐃⵠᐃ.y * So, So * 5);
      zo.fill();
    }
    var d = So;
    for (var f = Tx.ⲆᐃⲆΔᐃ.ΔΔⵠⲆ, g = 0; f.length > g; g++) {
      var h = f[g];
      Qx.time;
      zo.fillStyle = "#ff0000";
      hd(zo, b.x + h.x / (Qx.ᐃⲆᐃⵠⲆ * 100) * 193 * So, b.y + h.y / (Qx.ⲆΔⲆΔΔ * 100) * 193 * So, So * 2);
      zo.fill();
    }
    var i = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ];
    if (i) {
      zo.fillStyle = Qx.time ? "#fff" : "#e39716";
      hd(zo, b.x + i.x / (Qx.ᐃⲆᐃⵠⲆ * 100) * 193 * So, b.y + So * (i.y / (Qx.ⲆΔⲆΔΔ * 100) * 193), So * 4);
      zo.fill();
    }
    So = d;
  }
  function Np(b, c, d, e, f, i, a, j, k, h) {
    if (c.ⵠⲆⵠᐃⲆΔᐃ === undefined || c.ⵠⲆⵠᐃⲆΔᐃ() === 1) {
      if (h !== undefined) {
        b.drawImage(c, d, e, Math.max(1, f), Math.max(1, i), a, j, k, h);
      } else if (md !== i) {
        b.drawImage(c, d, e, f, i);
      } else {
        b.drawImage(c, d, e);
      }
    }
  }
  function Op() {
    Rx.ΔⲆⵠⵠⵠ.id = -1;
    Rx.ΔⲆⵠⵠⵠ.ᐃΔᐃΔ = -1;
    if (!Rx.ᐃⲆⵠΔΔΔΔ && !Rx.ΔⲆⵠⵠⵠ.wait && !Rx.ᐃΔⵠᐃⵠ) {
      var b = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ];
      var c = 100;
      if (b) {
        for (var d = 0; d < Qx.Δⵠⵠ[29].length; d++) {
          var e = Qx.Δⵠⵠ[29][d];
          var f = ⲆⵠΔⵠ.ᐃⵠⲆⲆ(e, b);
          if (c > f) {
            c = f;
            Rx.ΔⲆⵠⵠⵠ.id = e.id;
            Rx.ΔⲆⵠⵠⵠ.ᐃΔᐃΔ = e.ᐃΔᐃΔ;
            Rx.ΔⲆⵠⵠⵠ.info = e.info;
            Rx.ΔⲆⵠⵠⵠ.lock = (e.info & 16) >> 4;
          }
        }
      }
      var g = Tx.ᐃⲆⵠⲆⲆ;
      Tx.ᐃⲆⵠⲆⲆ = -1;
      if (Rx.ΔⲆⵠⵠⵠ.ᐃΔᐃΔ == -1 || Rx.ⵠᐃⵠⵠᐃ.length != 0 && Rx.id != Rx.ΔⲆⵠⵠⵠ.ᐃΔᐃΔ) {
        if (Rx.ⵠᐃⵠⵠᐃ.length != 0 && Rx.id != Rx.ⵠᐃⵠⵠᐃ[0]) {
          Tx.ᐃⲆⵠⲆⲆ = 2;
        } else if (Rx.ⵠᐃⵠⵠᐃ.length != 0 && Rx.ⵠᐃⵠⵠᐃ[0] == Rx.id) {
          Tx.ᐃⲆⵠⲆⲆ = 1;
        } else if (Rx.ⵠᐃⵠⵠᐃ.length != 0) {
          Tx.ᐃⲆⵠⲆⲆ = 3;
        }
      } else if (Rx.ⵠᐃⵠⵠᐃ.length == 0 && Rx.ΔⲆⵠⵠⵠ.info >= 8) {
        Tx.ᐃⲆⵠⲆⲆ = 4;
      } else if (Rx.ⵠᐃⵠⵠᐃ.length == 0) {
        Tx.ᐃⲆⵠⲆⲆ = 3;
      } else {
        Tx.ᐃⲆⵠⲆⲆ = 0;
      }
      if (Tx.ᐃⲆⵠⲆⲆ != -1) {
        Tx.ⲆⵠΔΔΔ[Tx.ᐃⲆⵠⲆⲆ].button.ⲆⵠⵠΔ(zo);
      }
      var a = document.getElementById("team_box").style;
      if (Tx.ᐃⲆⵠⲆⲆ != -1 && g != Tx.ᐃⲆⵠⲆⲆ && a.display == "inline-block") {
        Tx.ⲆⵠΔΔΔ[Tx.ᐃⲆⵠⲆⲆ].action();
      }
    }
  }
  function Hp() {
    if (!Rx.ΔⲆΔⵠ.open && !Rx.ΔⵠⵠΔⲆ.open && !Rx.ᐃⲆΔⵠ.open && !Rx.ⲆᐃΔᐃ.open && !Rx.ᐃⵠΔᐃ.open) {
      Rx.sign.open = co;
      var a = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ];
      var b = 100;
      if (a) {
        for (var c = 0; Qx.Δⵠⵠ[36].length > c; c++) {
          var d = Qx.Δⵠⵠ[36][c];
          var e = ⲆⵠΔⵠ.ᐃⵠⲆⲆ(d, a);
          if (b > e && d.info === 0 && Rx.id === d.ᐃΔᐃΔ) {
            Rx.sign.open = Tk;
            b = e;
            Rx.sign.Δⵠᐃᐃⵠ = d.id;
          }
        }
        if (b < 100) {
          Tx.sign.button.ⲆⵠⵠΔ(zo);
        }
      }
    }
  }
  function Up() {
    Rx.ⲆⲆⵠⵠᐃ.open = gr;
    var a = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ];
    var b = 100;
    if (a) {
      for (var c = 0; c < Qx.Δⵠⵠ[22].length; c++) {
        var d = Qx.Δⵠⵠ[22][c];
        var e = ⲆⵠΔⵠ.ᐃⵠⲆⲆ(d, a);
        if (e < b) {
          b = e;
          Rx.ⲆⲆⵠⵠᐃ.open = Tk;
          Rx.ⲆⲆⵠⵠᐃ.ᐃΔᐃΔ = d.ᐃΔᐃΔ;
          Rx.ⲆⲆⵠⵠᐃ.Δⵠᐃᐃⵠ = d.id;
        }
      }
      if (b < 100) {
        Tx.ⲆⲆⵠⵠᐃ.ⲆⵠⵠΔ(zo);
      }
    }
  }
  function Yp() {
    if (Rx.reconnect.enabled) {
      zo.globalAlpha = 0.9;
      zo.fillStyle = "#000";
      ad(zo, iq - 150, jq - 90, 300, 180, 15);
      zo.fill();
      zo.globalAlpha = 1;
      var a = ᐃΔ[301];
      zo.save();
      Rx.reconnect.rotate = (Rx.reconnect.rotate + Yx * 2) % (Math.PI * 2);
      zo.translate(yo / 2, hq / 2 - 25);
      zo.rotate(Rx.reconnect.rotate);
      Np(zo, a, -a.width / 2, -a.height / 2);
      zo.restore();
      a = ᐃΔ[525];
      Np(zo, a, (yo - a.width) / 2, (hq - a.height) / 2 + 25);
    }
  }
  function Kp() {
    if (!Rx.ΔⲆΔⵠ.open && !Rx.ΔⵠⵠΔⲆ.open) {
      Rx.ᐃⲆΔⵠ.open = tg;
      var b = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ];
      var c = 100;
      if (b) {
        for (var d = 0; Qx.Δⵠⵠ[32].length > d; d++) {
          var e = Qx.Δⵠⵠ[32][d];
          var f = ⲆⵠΔⵠ.ᐃⵠⲆⲆ(e, b);
          if (f < c) {
            c = f;
            Rx.ᐃⲆΔⵠ.open = true;
            Rx.ᐃⲆΔⵠ.ΔΔΔⲆᐃᐃⵠ = e.info & 255;
            Rx.ᐃⲆΔⵠ.ΔⵠΔᐃΔ = (e.info & 65280) >> 8;
            Rx.ᐃⲆΔⵠ.ᐃΔᐃΔ = e.ᐃΔᐃΔ;
            Rx.ᐃⲆΔⵠ.Δⵠᐃᐃⵠ = e.id;
          }
        }
        if (c < 100) {
          var g = ᐃΔ[655];
          var a = (k = Tx.ᐃᐃΔᐃⵠⵠΔ).info.translate.x - 33;
          Np(zo, g, a, 0);
          if (Rx.ᐃⲆΔⵠ.ΔΔΔⲆᐃᐃⵠ > 0) {
            k.ⲆⵠⵠΔ(zo);
            if ((j = Rx.ᐃⲆΔⵠ.ΔΔΔⲆᐃᐃⵠ) > 1) {
              Fp(j, k);
            }
          }
          var j;
          var k = Tx.ᐃⲆᐃᐃΔᐃⲆ;
          if (Rx.ᐃⲆΔⵠ.ΔⵠΔᐃΔ > 0) {
            k.ⲆⵠⵠΔ(zo);
            if ((j = Rx.ᐃⲆΔⵠ.ΔⵠΔᐃΔ) > 1) {
              Fp(j, k);
            }
          }
        }
      }
    }
  }
  function Vp() {
    if (Rx.ⲆᐃⵠΔⲆΔⲆ) {
      zo.globalAlpha = 0.5;
      zo.fillStyle = "#000";
      zo.fillRect(0, 0, yo, hq);
      zo.globalAlpha = 0.8;
      var b = ᐃΔ[516][Qx.time];
      var c = iq - b.width / 2;
      var d = jq - b.height / 2;
      Np(zo, b, c, d);
      zo.globalAlpha = 1;
      if (Tx.ⲆᐃⲆΔᐃ.Δⵠᐃⵠᐃ.x > -1) {
        zo.fillStyle = "#660000";
        hd(zo, c + Tx.ⲆᐃⲆΔᐃ.Δⵠᐃⵠᐃ.x * 3 * So, d + Tx.ⲆᐃⲆΔᐃ.Δⵠᐃⵠᐃ.y * 3 * So, So * 14);
        zo.fill();
      }
      for (var e = Tx.ⲆᐃⲆΔᐃ.ΔΔⵠⲆ, f = 0; e.length > f; f++) {
        var g = e[f];
        Qx.time;
        zo.fillStyle = "#ff0000";
        hd(zo, c + g.x / (Qx.ᐃⲆᐃⵠⲆ * 100) * 600 * So, d + So * (g.y / (Qx.ⲆΔⲆΔΔ * 100) * 600), So * 6);
        zo.fill();
      }
      var h = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ];
      if (h) {
        zo.fillStyle = Qx.time ? "#fff" : "#e39716";
        hd(zo, c + h.x / (Qx.ᐃⲆᐃⵠⲆ * 100) * 600 * So, d + h.y / (Qx.ⲆΔⲆΔΔ * 100) * 600 * So, So * 12);
        zo.fill();
      }
    }
  }
  function Xp() {
    Rx.ΔⲆΔⵠ.id = -1;
    Rx.ΔⲆΔⵠ.lock = Wh;
    Rx.ΔⲆΔⵠ.locked = at;
    Rx.ΔⲆΔⵠ.ᐃᐃⲆⵠᐃⵠΔ = false;
    Rx.ΔⲆΔⵠ.ᐃΔⵠΔⲆⲆᐃ = false;
    Rx.ΔⲆΔⵠ.open = false;
    var b = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ];
    var c = 100;
    if (b) {
      for (var d = 0; Qx.Δⵠⵠ[11].length > d; d++) {
        var e = Qx.Δⵠⵠ[11][d];
        var f = ⲆⵠΔⵠ.ᐃⵠⲆⲆ(e, b);
        if (f < c) {
          c = f;
          Rx.ΔⲆΔⵠ.open = Cg;
          Rx.ΔⲆΔⵠ.id = e.action < 2 ? -1 : Math.floor((e.action - 1) / 2);
          Rx.ΔⲆΔⵠ.ᐃⵠⲆⵠ = e.info;
          Rx.ΔⲆΔⵠ.ᐃΔᐃΔ = e.ᐃΔᐃΔ;
          Rx.ΔⲆΔⵠ.Δⵠᐃᐃⵠ = e.id;
          Rx.ΔⲆΔⵠ.locked = e.lock;
          Rx.ΔⲆΔⵠ.lock = !!e.lock && e.ᐃΔᐃΔ != Rx.id && !Rx.ⵠⲆΔᐃⲆⵠᐃ(e.ᐃΔᐃΔ) || gn;
          Rx.ΔⲆΔⵠ.ᐃΔⵠΔⲆⲆᐃ = e.ᐃΔᐃΔ === Rx.id && !Rx.ΔⲆΔⵠ.locked && Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(148) != -1;
          if (Rx.ΔⲆΔⵠ.locked && Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(158) != -1) {
            Rx.ΔⲆΔⵠ.ᐃᐃⲆⵠᐃⵠΔ = true;
          }
        }
      }
      if (c < 100) {
        var j = ᐃΔ[339];
        var a = Tx.Ⲇⵠⵠ[0];
        var k = Math.floor(a.info.translate.x + (a.info.ⵠⵠ[0].width - j.width) / 2);
        var l = Math.floor(a.info.translate.y + (a.info.ⵠⵠ[0].height - j.height) / 2) + 3;
        Np(zo, j, k, l);
        if ((!Rx.ΔⲆΔⵠ.lock || Rx.id === Rx.ΔⲆΔⵠ.ᐃΔᐃΔ) && Rx.ΔⲆΔⵠ.id >= 0) {
          (a = Tx.Ⲇⵠⵠ[Rx.ΔⲆΔⵠ.id]).ⲆⵠⵠΔ(zo);
          var h = Rx.ΔⲆΔⵠ.ᐃⵠⲆⵠ;
          if (h > 1) {
            Fp(h, a);
          }
        }
        if (Rx.ΔⲆΔⵠ.lock) {
          Tx.ⲆⵠⲆΔΔᐃᐃ.ⲆⵠⵠΔ(zo);
        } else if (Rx.ΔⲆΔⵠ.ᐃΔⵠΔⲆⲆᐃ) {
          Tx.ΔᐃⲆⲆᐃΔⵠ.ⲆⵠⵠΔ(zo);
        }
        if (Rx.ΔⲆΔⵠ.ᐃᐃⲆⵠᐃⵠΔ) {
          Tx.ⲆᐃⵠⲆΔⵠⵠ.ⲆⵠⵠΔ(zo);
        }
      }
    }
  }
  ⵠΔΔᐃⵠ = [];
  ⲆⵠΔⲆⲆᐃⲆ = [];
  var Zp = [];
  function $p() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    ⵠⵠ = ᐃΔ[321][Qx.time];
    ΔⲆᐃ = -ⵠⵠ.width;
    ᐃᐃᐃ = -ⵠⵠ.height;
    Np(zo, ⵠⵠ, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
    zo.restore();
  }
  function Ru(b) {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    if (this.ᐃΔᐃ.ⵠⵠᐃ) {
      if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && Wh == this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ) {
        this.ᐃΔᐃ.ⵠⵠᐃ = false;
      }
      var c = So * ((1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * Yx * 600);
      var d = c * Math.sin(this.ᐃΔᐃ.angle - this.angle);
      var e = Math.cos(this.ᐃΔᐃ.angle - this.angle) * c;
    } else {
      d = 0;
      e = 0;
    }
    var f = ᐃΔ[853].length;
    ⵠⵠ = ᐃΔ[853][(this.ΔΔⵠᐃ + this.ⲆΔ % 2) % f][Qx.time];
    ΔⲆᐃ = -ⵠⵠ.width;
    ᐃᐃᐃ = -ⵠⵠ.height;
    var g = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ];
    if (g && (this.ᐃΔᐃΔ === Rx.id || Rx.ⵠⲆΔᐃⲆⵠᐃ(this.ᐃΔᐃΔ))) {
      if (ⲆⵠΔⵠ.ᐃⵠⲆⲆ(this, g) < 550) {
        this.opacity = Math.max(this.opacity - Yx, 0.3);
      } else {
        this.opacity = Math.min(this.opacity + Yx, 1);
      }
    } else if (g && ⲆⵠΔⵠ.ᐃⵠⲆⲆ(this, Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ]) < 150) {
      this.opacity = Math.max(this.opacity - Yx, 0.3);
    } else {
      this.opacity = Math.min(this.opacity + Yx, 1);
    }
    var a = zo.globalAlpha;
    zo.globalAlpha *= this.opacity;
    Np(zo, ⵠⵠ, -ΔⲆᐃ / 2 + d, -ᐃᐃᐃ / 2 + e, ΔⲆᐃ, ᐃᐃᐃ);
    zo.globalAlpha = a;
    zo.restore();
  }
  function Su() {
    var a = Rx.ᐃⲆΔⲆᐃ;
    if (a.wait) {
      var b = a.timeout.ⵠⵠᐃ();
      zo.save();
      var c = ᐃΔ[792];
      zo.translate(c.width - So * 2, Tx.ᐃᐃΔᐃ.translate.y - So * 125);
      var d = -c.width / 2 + 10;
      var e = -c.height / 2 - 4;
      Np(zo, c, d, e);
      zo.beginPath();
      zo.lineWidth = So * 5;
      zo.strokeStyle = ns.ᐃΔᐃⲆⲆⲆⵠ[Qx.time];
      zo.lineCap = "round";
      zo.arc(9, e + c.height / 2, So * 25, 0, a.timeout.ᐃⲆΔ * (Math.PI * 2));
      zo.stroke();
      zo.restore();
      if (b) {
        a.wait = va;
        a.timeout.ᐃⲆΔ = 0;
        a.timeout.ⵠⲆⲆ = false;
      }
    }
  }
  function Tu() {
    var b = Rx.ⵠᐃⵠΔᐃ;
    var c = Tx.ⲆᐃᐃⲆ;
    if (b.ⵠⵠᐃ) {
      b.ⵠⵠᐃ = co;
      var d = b.ΔⲆᐃⵠⵠ;
      var e = c.Δᐃ.width;
      var f = c.Δᐃ.height;
      var i = c.Δ;
      var a = Qx.ΔΔⵠⲆ;
      var j = false;
      i.clearRect(0, 0, e, f);
      i.drawImage(c.ⵠⵠ, 0, 0);
      for (var k = 0; d.length > k; k++) {
        var l = a[d[k]];
        if ((Qx.mode !== 1 || l.ᐃΔΔΔΔ !== "spectator") && (Qx.mode !== 2 || l.ⵠᐃᐃⲆ !== 0)) {
          if (d[k] == Rx.id) {
            j = oo;
            if (Qx.mode === 3 && l.ⵠᐃᐃⲆ === 0) {
              ⲆⲆ = "#FF0000";
            } else {
              ⲆⲆ = "#FFF";
            }
          } else if (Qx.mode === 3 && l.ⵠᐃᐃⲆ === 0) {
            ⲆⲆ = "#990000";
          } else {
            ⲆⲆ = "#A1BDCD";
          }
          i.drawImage(Cu(So, "" + (k + 1), So * 15, ⲆⲆ), So * 20, So * (40 + k * 22));
          l.ΔⵠⲆⵠⵠⵠⵠ ||= Cu(So, l.ᐃΔΔΔΔ, So * 15, ⲆⲆ, undefined, dg, Pn, Wb, So * 110);
          i.drawImage(l.ΔⵠⲆⵠⵠⵠⵠ, So * 39, So * (40 + k * 22));
          i.drawImage(Cu(So, ⲆⵠΔⵠ.ⲆⵠΔⵠᐃΔΔ(l.ⵠⵠⵠⲆⵠ), So * 15, ⲆⲆ), So * 156, (40 + k * 22) * So);
        }
      }
      if (!j) {
        if (Qx.mode === 0 || Qx.mode === 3 || Qx.mode === 4 || Qx.mode === 5 || Qx.mode === 7 || Qx.mode === 1 && !Rx.ᐃⲆⵠΔΔΔΔ || Qx.mode === 2 && !Rx.ᐃΔⵠᐃⵠ) {
          i.drawImage(ᐃΔ[306], So * 15, So * (46 + k * 22));
          i.drawImage(Cu(So, ⲆⵠΔⵠ.ⲆⵠΔⵠᐃΔΔ(Qx.ΔΔⵠⲆ[Rx.id].ⵠⵠⵠⲆⵠ), So * 15, "#FFF"), So * 100, So * (46 + k * 22));
        }
      }
    }
    Np(zo, c.Δᐃ, c.translate.x, c.translate.y);
  }
  function Uu(a) {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    if (this.ᐃΔᐃ.ⵠⵠᐃ) {
      if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && Hs == this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ) {
        this.ᐃΔᐃ.ⵠⵠᐃ = gr;
      }
      var b = So * (Yx * (1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * 600);
      var c = b * Math.sin(this.ᐃΔᐃ.angle - this.angle);
      var d = Math.cos(this.ᐃΔᐃ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    ⵠⵠ = ᐃΔ[a][Qx.time];
    ΔⲆᐃ = -ⵠⵠ.width;
    ᐃᐃᐃ = -ⵠⵠ.height;
    Np(zo, ⵠⵠ, -ΔⲆᐃ / 2 + c, -ᐃᐃᐃ / 2 + d, ΔⲆᐃ, ᐃᐃᐃ);
    zo.restore();
  }
  function Wu() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    ⵠⵠ = ᐃΔ[811][Qx.time];
    ΔⲆᐃ = -ⵠⵠ.width;
    ᐃᐃᐃ = -ⵠⵠ.height;
    Np(zo, ⵠⵠ, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
    zo.restore();
  }
  function Xu() {
    var a = Qx.ᐃᐃᐃⵠⲆ;
    var b = ᐃΔ[725][Qx.time];
    Np(zo, b, a.translate.x, a.translate.y);
    zo.save();
    zo.translate(a.translate.x + b.width / 2, a.translate.y + b.height / 2);
    Qx.ᐃᐃᐃⵠⲆ.now = (new Date().getTime() - a.ⵠᐃᐃⲆᐃ + a.ΔⲆᐃⲆⵠ) % 480000;
    var c = Qx.ᐃᐃᐃⵠⲆ.now * (Math.PI * 2) / 480000 - Math.PI / 2;
    zo.rotate(c);
    Np(zo, ᐃΔ[726], -b.width / 2, -b.height / 2);
    zo.restore();
  }
  function Zu() {
    zo.save();
    var a = So;
    if (Rx.ᐃᐃΔᐃ.Ⲇᐃᐃᐃⵠ.x < 0.25) {
      zo.globalAlpha = Rx.ᐃᐃΔᐃ.ⵠᐃⲆΔⲆⲆⲆ.ᐃⲆΔ;
    }
    var b = Rx.ⵠⵠⲆᐃ.ⵠΔⲆᐃⲆ.length > 0 ? -70 : 0;
    if (Rx.ΔⲆΔⵠ.open || Rx.ΔⵠⵠΔⲆ.open && Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(109) != -1 || Rx.ᐃⲆΔⵠ.open && Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(134) != -1 || Rx.ᐃⵠΔᐃ.open && Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(109) != -1 || Rx.ⵠⵠⵠⵠᐃ.open && Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(180) != -1 || Rx.ⲆᐃΔᐃ.open && (Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(109) != -1 || Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(131) != -1)) {
      b -= So * 50;
    }
    zo.translate((yo - So * 950) / 2, b);
    zo.fillStyle = "#69A148";
    zo.fillRect(this.translate.x + So * 37, this.translate.y + So * 17, So * (Rx.ᐃᐃΔᐃ.Ⲇᐃᐃᐃⵠ.x * 178), So * 18);
    zo.globalAlpha = 1;
    if (Rx.ᐃᐃΔᐃ.ᐃⲆᐃΔⵠⲆⲆ.x < 0.35) {
      zo.fillStyle = "#8F050A";
      zo.globalAlpha = Rx.ᐃᐃΔᐃ.ᐃᐃⵠΔⵠᐃᐃ.ᐃⲆΔ;
      zo.fillRect(this.translate.x + So * 277, this.translate.y + So * 17, So * 178, So * 18);
      zo.globalAlpha = 1;
    }
    zo.fillStyle = "#AF352A";
    zo.fillRect(this.translate.x + So * 277, this.translate.y + So * 17, Rx.ᐃᐃΔᐃ.ᐃⲆᐃΔⵠⲆⲆ.x * 178 * So, So * 18);
    if (Rx.ᐃᐃΔᐃ.ⵠᐃᐃᐃⲆ.x < 0.35) {
      zo.fillStyle = "#366B91";
      zo.globalAlpha = Rx.ᐃᐃΔᐃ.ΔⲆᐃΔᐃⵠⲆ.ᐃⲆΔ;
      zo.fillRect(this.translate.x + So * 517, this.translate.y + So * 17, So * 178, So * 18);
      zo.globalAlpha = 1;
    }
    zo.fillStyle = "#669BB1";
    zo.fillRect(this.translate.x + So * 517, this.translate.y + So * 17, Rx.ᐃᐃΔᐃ.ⵠᐃᐃᐃⲆ.x * 178 * So, So * 18);
    if (Rx.ᐃᐃΔᐃ.ⵠᐃᐃᐃⲆ.x > 0.99) {
      if (Rx.ᐃᐃΔᐃ.ⲆᐃᐃⲆΔ.x < 0.35) {
        zo.fillStyle = "#6C4036";
        zo.globalAlpha = Rx.ᐃᐃΔᐃ.ᐃⵠΔᐃΔⲆᐃ.ᐃⲆΔ;
        zo.fillRect(this.translate.x + So * 517, this.translate.y + So * 17, So * 178, So * 18);
        zo.globalAlpha = 1;
      }
      zo.fillStyle = "#9C4036";
      zo.fillRect(this.translate.x + So * 517, this.translate.y + So * 17, (1 - Rx.ᐃᐃΔᐃ.ⲆᐃᐃⲆΔ.x) * 178 * So, So * 18);
    }
    if (Rx.ᐃᐃΔᐃ.ᐃΔΔⵠⵠⵠᐃ.x < 0.35) {
      zo.fillStyle = "#001A57";
      zo.globalAlpha = Rx.ᐃᐃΔᐃ.ΔᐃᐃⲆᐃᐃΔ.ᐃⲆΔ;
      zo.fillRect(this.translate.x + So * 757, this.translate.y + So * 17, So * 178, So * 18);
      zo.globalAlpha = 1;
    }
    zo.fillStyle = "#074A87";
    zo.fillRect(this.translate.x + So * 757, this.translate.y + So * 17, Rx.ᐃᐃΔᐃ.ᐃΔΔⵠⵠⵠᐃ.x * 178 * So, So * 18);
    So = a;
    Np(zo, this.ⵠⵠ, this.translate.x, this.translate.y);
    this.y = this.translate.y + b;
    zo.restore();
    if (Rx.ᐃᐃΔᐃ.ΔⵠⲆⵠΔⵠᐃ.x < 0.99) {
      var c = Math.floor(iq - ᐃΔ[608].width / 2);
      b += this.translate.y - ᐃΔ[608].height - So * 5;
      zo.fillStyle = "#BBE8EF";
      zo.fillRect(c + 5, b + So * 5, Rx.ᐃᐃΔᐃ.ΔⵠⲆⵠΔⵠᐃ.x * (So * 588), So * 10);
      if (Rx.ᐃᐃΔᐃ.ΔⵠⲆⵠΔⵠᐃ.x < 0.35) {
        zo.fillStyle = "#9BA8AF";
        zo.globalAlpha = Rx.ᐃᐃΔᐃ.ΔⵠⵠⵠΔⲆⵠ.ᐃⲆΔ;
        zo.fillRect(c + 5, b + 5, So * 588, So * 10);
        zo.globalAlpha = 1;
      }
      Np(zo, ᐃΔ[608], c, b);
      this.y = b;
    }
  }
  function $u() {
    var b = Rx.ΔⲆⵠⵠⵠ;
    if (b.wait) {
      var c = b.timeout.ⵠⵠᐃ();
      zo.save();
      var d = ᐃΔ[562];
      var e = ᐃΔ[537].height + So * 25;
      zo.translate(d.width, Tx.ᐃᐃΔᐃ.translate.y - So * 188 - e);
      var f = -d.width / 2 - 2;
      var g = -d.height / 2 - 4;
      Np(zo, d, f + 2, g);
      zo.beginPath();
      zo.lineWidth = So * 5;
      zo.strokeStyle = ns.ⵠᐃᐃΔΔΔⲆ[Qx.time];
      zo.lineCap = "round";
      zo.arc(0, g + d.height / 2, So * 25, 0, Math.PI * 2 * b.timeout.ᐃⲆΔ);
      zo.stroke();
      zo.restore();
      if (c) {
        b.wait = false;
        b.timeout.ᐃⲆΔ = 0;
        b.timeout.ⵠⲆⲆ = false;
      }
    }
  }
  function _u(a) {
    if ((a = a / 100) <= 0.8) {
      zo.save();
      zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
      zo.rotate(this.angle);
      if (this.ᐃΔᐃ.ⵠⵠᐃ) {
        if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && tg == this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ) {
          this.ᐃΔᐃ.ⵠⵠᐃ = Ij;
        }
        var b = So * ((1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * Yx * 600);
        var c = b * Math.sin(this.ᐃΔᐃ.angle - this.angle);
        var d = b * Math.cos(this.ᐃΔᐃ.angle - this.angle);
      } else {
        c = 0;
        d = 0;
      }
      zo.globalAlpha = 0.5;
      ld(zo, c, d, So * 18, a);
      od(zo, null, "#000000", So * 18);
      zo.globalAlpha = 1;
      ld(zo, c, d, So * 18, a);
      od(zo, null, ns.ΔⵠᐃⲆⲆⲆΔ[Qx.time], So * 6);
      zo.restore();
    }
  }
  function av() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    ⵠⵠ = ᐃΔ[239][Qx.time];
    ΔⲆᐃ = -ⵠⵠ.width;
    ᐃᐃᐃ = -ⵠⵠ.height;
    Np(zo, ⵠⵠ, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
    zo.restore();
  }
  function bv(a) {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    if (this.ᐃΔᐃ.ⵠⵠᐃ) {
      if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ == 0) {
        this.ᐃΔᐃ.ⵠⵠᐃ = false;
      }
      var b = So * ((1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * Yx * 600);
      var c = Math.sin(this.ᐃΔᐃ.angle - this.angle) * b;
      var d = b * Math.cos(this.ᐃΔᐃ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    if (this.ⲆΔᐃⲆᐃ.ⵠⵠᐃ()) {
      this.color += 0.2 + Math.random() * 0.3;
    }
    ⵠⵠ = ᐃΔ[872][Math.floor(this.id + this.color) % 5][Qx.time];
    ΔⲆᐃ = -ⵠⵠ.width * this.ⲆΔᐃⲆᐃ.ᐃⲆΔ;
    ᐃᐃᐃ = -ⵠⵠ.height * this.ⲆΔᐃⲆᐃ.ᐃⲆΔ;
    Np(zo, ⵠⵠ, -ΔⲆᐃ / 2 + c, -ᐃᐃᐃ / 2 + d, ΔⲆᐃ, ᐃᐃᐃ);
    zo.restore();
  }
  function cv() {
    var a = Rx.ᐃΔⲆΔᐃ;
    if (a.wait) {
      var b = a.timeout.ⵠⵠᐃ();
      zo.save();
      var c = ᐃΔ[537];
      zo.translate(c.width - So * 2, Tx.ᐃᐃΔᐃ.translate.y - So * 60);
      var d = -c.width / 2 - 2;
      var e = -c.height / 2 - 4;
      Np(zo, c, d, e);
      zo.beginPath();
      zo.lineWidth = So * 5;
      zo.strokeStyle = ns.ⵠᐃᐃΔΔΔⲆ[Qx.time];
      zo.lineCap = "round";
      zo.arc(0, e + c.height / 2, So * 25, 0, a.timeout.ᐃⲆΔ * (Math.PI * 2));
      zo.stroke();
      zo.restore();
      if (b) {
        a.wait = false;
        a.timeout.ᐃⲆΔ = 0;
        a.timeout.ⵠⲆⲆ = false;
      }
    }
  }
  function dv() {
    for (var b = Rx.ⵠⵠⲆᐃ, c = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ], d = 0; b.ⵠΔⲆᐃⲆ.length > d; d++) {
      var e = b.ⵠΔⲆᐃⲆ[d];
      var f = false;
      if ((c = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ]) && (c.right == e.id || c.ᐃᐃⲆⵠⵠ == e.id && c.ᐃᐃⲆⵠⵠ > 0)) {
        f = Tk;
        Np(zo, e.info.ⵠⵠ[2], e.info.translate.x, e.info.translate.y, e.info.width, e.info.height);
      } else {
        e.ⲆⵠⵠΔ(zo);
      }
      var g = Rx.ⵠⵠⲆᐃ.ⵠΔⵠᐃ[e.id];
      if (g > 1) {
        Fp(g, e);
      }
      if (g > 0) {
        Lp(d, e, f);
      }
      var h = Rx.ΔⲆΔⵠ;
      if (!!h.open && (h.id < 0 || h.id == e.id) && (!h.lock || h.ᐃΔᐃΔ == Rx.id)) {
        Tx.ΔⵠⲆⵠⲆ[e.id].ⲆⵠⵠΔ(zo);
      }
      if (Rx.ΔⵠⵠΔⲆ.open && e.id == 109) {
        Tx.ΔⵠⲆⵠⲆ[e.id].ⲆⵠⵠΔ(zo);
      }
      if (Rx.ⵠⵠⵠⵠᐃ.open && e.id == 180) {
        Tx.ΔⵠⲆⵠⲆ[e.id].ⲆⵠⵠΔ(zo);
      }
      if (Rx.ᐃⲆΔⵠ.open && e.id == 134) {
        Tx.ΔⵠⲆⵠⲆ[e.id].ⲆⵠⵠΔ(zo);
      }
      if (Rx.ᐃⵠΔᐃ.open && e.id == 109) {
        Tx.ΔⵠⲆⵠⲆ[e.id].ⲆⵠⵠΔ(zo);
      }
      if (Rx.ⲆᐃΔᐃ.open && (e.id == 109 || e.id == 131)) {
        Tx.ΔⵠⲆⵠⲆ[e.id].ⲆⵠⵠΔ(zo);
      }
    }
    if (e && b.max > d) {
      var j = ᐃΔ[334][2];
      ᐃⵠ = e.info.translate.x;
      ⵠⲆᐃ = e.info.translate.y;
      ΔΔⵠᐃ = 1;
      for (; d < b.max; d++, ΔΔⵠᐃ++) {
        Np(zo, j, ᐃⵠ + ΔΔⵠᐃ * (j.width + 5), ⵠⲆᐃ);
      }
    }
  }
  function ev() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    ⵠⵠ = ᐃΔ[837][Qx.time];
    ΔⲆᐃ = -ⵠⵠ.width;
    ᐃᐃᐃ = -ⵠⵠ.height;
    Np(zo, ⵠⵠ, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
    zo.restore();
  }
  function fv(a) {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    if (this.ᐃΔᐃ.ⵠⵠᐃ) {
      if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ == 0) {
        this.ᐃΔᐃ.ⵠⵠᐃ = Kk;
      }
      var b = So * (Yx * (1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * 600);
      var c = b * Math.sin(this.ᐃΔᐃ.angle - this.angle);
      var d = b * Math.cos(this.ᐃΔᐃ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = ᐃΔ[a][Qx.time];
    ΔⲆᐃ = -e.width;
    ᐃᐃᐃ = -e.height;
    Np(zo, e, -ΔⲆᐃ / 2 + c, -ᐃᐃᐃ / 2 + d, ΔⲆᐃ, ᐃᐃᐃ);
    zo.restore();
  }
  function gv() {
    var a = Rx.ΔΔⵠᐃⲆ;
    if (a.wait) {
      var b = a.timeout.ⵠⵠᐃ();
      zo.save();
      var c = ᐃΔ[794];
      zo.translate(c.width - So * 12, Tx.ᐃᐃΔᐃ.translate.y - So * 190);
      var d = -c.width / 2 + 9;
      var e = -c.height / 2 - 4;
      Np(zo, c, d, e);
      zo.beginPath();
      zo.lineWidth = So * 5;
      zo.strokeStyle = ns.ᐃΔᐃⲆⲆⲆⵠ[Qx.time];
      zo.lineCap = "round";
      zo.arc(9, e + c.height / 2, So * 25, 0, a.timeout.ᐃⲆΔ * (Math.PI * 2));
      zo.stroke();
      zo.restore();
      if (b) {
        a.wait = at;
        a.timeout.ᐃⲆΔ = 0;
        a.timeout.ⵠⲆⲆ = ps;
      }
    }
  }
  function hv() {
    var a = Rx.ⲆΔⲆΔ;
    if (a.ΔΔⵠⲆΔ) {
      var b = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ];
      zo.save();
      zo.translate(Rx.ⵠⵠΔ.x + b.x, Rx.ⵠⵠΔ.y + b.y);
      var c = ᐃΔ[324];
      var d = -c.width / 2;
      var e = -c.height / 2 - So * 125;
      Np(zo, c, d, e);
      zo.beginPath();
      zo.lineWidth = So * 5;
      zo.strokeStyle = ns.ᐃᐃⲆⲆⲆΔΔ[Qx.time];
      zo.lineCap = "round";
      zo.arc(0, e + c.height / 2, So * 25, 0, Math.PI * 2 * a.timeout.ᐃⲆΔ);
      zo.stroke();
      zo.restore();
    }
  }
  function iv() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    ⵠⵠ = ᐃΔ[848][Qx.time];
    ΔⲆᐃ = -ⵠⵠ.width;
    ᐃᐃᐃ = -ⵠⵠ.height;
    Np(zo, ⵠⵠ, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
    zo.restore();
  }
  function jv() {
    var a = -8;
    if (Rx.ⵠⵠⲆⵠΔ.enabled) {
      var b = ᐃΔ[546];
      Np(zo, b, Rx.ⵠⵠⲆⵠΔ.translate.x, Rx.ⵠⵠⲆⵠΔ.translate.y + a);
      a += 70;
    }
    if (Rx.ΔΔΔⵠΔᐃⵠ === 1) {
      b = ᐃΔ[549];
      Np(zo, b, Rx.ⵠⵠⲆⵠΔ.translate.x, Rx.ⵠⵠⲆⵠΔ.translate.y + a);
      a += 70;
    } else if (Rx.ᐃᐃΔᐃ.ⵠᐃᐃᐃⲆ.x < 0.25 || Rx.ᐃᐃΔᐃ.ᐃⲆᐃΔⵠⲆⲆ.x < 0.25 || Rx.ᐃᐃΔᐃ.ᐃΔΔⵠⵠⵠᐃ.x < 0.25 || Rx.ᐃᐃΔᐃ.ΔⵠⲆⵠΔⵠᐃ.x < 0.25 || Rx.ᐃᐃΔᐃ.ⲆᐃᐃⲆΔ.x < 0.25) {
      b = ᐃΔ[548];
      Np(zo, b, Rx.ⵠⵠⲆⵠΔ.translate.x, Rx.ⵠⵠⲆⵠΔ.translate.y + a);
      a += 70;
    }
    if (Rx.Ⲇᐃᐃⵠⵠ > 0) {
      b = ᐃΔ[547];
      Np(zo, b, Rx.ⵠⵠⲆⵠΔ.translate.x, Rx.ⵠⵠⲆⵠΔ.translate.y + a);
      var c = Zp[Rx.Ⲇᐃᐃⵠⵠ];
      if (c === jn) {
        c = Cu(So, Rx.Ⲇᐃᐃⵠⵠ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6);
        Zp[Rx.Ⲇᐃᐃⵠⵠ] = c;
      }
      if (Rx.Ⲇᐃᐃⵠⵠ < 9) {
        Np(zo, c, Rx.ⵠⵠⲆⵠΔ.translate.x - 39, Rx.ⵠⵠⲆⵠΔ.translate.y + a + 20);
      } else {
        Np(zo, c, Rx.ⵠⵠⲆⵠΔ.translate.x - 46, Rx.ⵠⵠⲆⵠΔ.translate.y + a + 20);
      }
    }
  }
  function kv() {
    var b = Rx.ⲆΔⲆΔ;
    if (!b.ΔΔⵠⲆΔ && b.ⲆⲆⲆⵠ > 0) {
      var c = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ];
      if (!c) {
        return;
      }
      zo.save();
      if (As[b.ⲆⲆⲆⵠ].ΔᐃⲆⵠ === 0 && b.mode === 0) {
        zo.translate(Rx.ⵠⵠΔ.x + c.x, Rx.ⵠⵠΔ.y + c.y);
        zo.rotate(c.angle);
        zo.translate(120, 0);
      } else {
        var d = Math.floor(c.x + Math.sin(c.angle) * 120);
        var e = Math.floor(c.y + Math.cos(c.angle) * 120);
        d = Rx.ⵠⵠΔ.x + (d - d % 100 + 50);
        e = Rx.ⵠⵠΔ.y + (e - e % 100 + 50);
        zo.translate(d, e);
      }
      var f = ᐃΔ[b.ⲆⲆⲆⵠ][Qx.time];
      zo.globalAlpha = 0.5;
      Np(zo, f, -f.width / 2, -f.height / 2);
      zo.globalAlpha = 1;
      zo.restore();
      if (As[b.ⲆⲆⲆⵠ].ΔᐃⲆⵠ === 0) {
        if (!b.label[b.mode]) {
          if (b.mode === 0) {
            b.label[0] = Cu(So, Ib[336], 20, "#e2c340");
          } else {
            b.label[1] = Cu(So, Ib[337], 20, "#e2c340");
          }
        }
        f = b.label[b.mode];
        Np(zo, f, iq + -f.width / 2, Tx.ᐃᐃΔᐃ.y - 26);
      }
    }
    if (b.ΔΔⵠⲆΔ) {
      var i = b.timeout.ⵠⵠᐃ();
      for (var a = 0; b.ⵠⵠⲆⵠᐃ.length > a; a++) {
        var j = b.ⵠⵠⲆⵠᐃ[a];
        if (j.id == b.id) {
          var k = So * 42;
          var l = So * 17;
          ad(zo, j.info.translate.x, j.info.translate.y + (1 - b.timeout.ᐃⲆΔ) * k, j.info.width, b.timeout.ᐃⲆΔ * k + l, So * 10);
          zo.fillStyle = "#55B973";
          zo.fill();
          zo.globalAlpha = 0.8;
          j.ⲆⵠⵠΔ(zo);
        } else {
          zo.globalAlpha = 0.5;
          j.ⲆⵠⵠΔ(zo);
        }
        zo.globalAlpha = 1;
      }
      if (i) {
        b.ΔΔⵠⲆΔ = Ij;
        b.timeout.ᐃⲆΔ = 0;
        b.timeout.ⵠⲆⲆ = Gl;
      }
      return true;
    }
    for (a = 0; a < b.ⵠⵠⲆⵠᐃ.length; a++) {
      b.ⵠⵠⲆⵠᐃ[a].ⲆⵠⵠΔ(zo);
    }
    return zk;
  }
  function lv(b) {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    if (this.ᐃΔᐃ.ⵠⵠᐃ) {
      if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ == zl) {
        this.ᐃΔᐃ.ⵠⵠᐃ = Zq;
      }
      var c = So * (Yx * (1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * 600);
      var d = Math.sin(this.ᐃΔᐃ.angle - this.angle) * c;
      var e = Math.cos(this.ᐃΔᐃ.angle - this.angle) * c;
    } else {
      d = 0;
      e = 0;
    }
    if (b === 913 && !Qx.transition) {
      var f = 0;
      for (var g = Qx.Δⵠⵠ[0], a = 0; g.length > a; a++) {
        var h = ⲆⵠΔⵠ.ᐃⵠⲆⲆ(g[a], this);
        if (h < 140 && h > 35) {
          f = 0;
          break;
        }
        if (h <= 35) {
          f = 1;
        }
      }
      this.opacity = f === 0 ? Math.max(0.5, this.opacity - Yx / 1.5) : Math.min(1, this.opacity + Yx / 1.5);
      zo.globalAlpha = this.opacity;
    }
    ⵠⵠ = ᐃΔ[b][Qx.time];
    ΔⲆᐃ = -ⵠⵠ.width;
    ᐃᐃᐃ = -ⵠⵠ.height;
    Np(zo, ⵠⵠ, -ΔⲆᐃ / 2 + d, -ᐃᐃᐃ / 2 + e, ΔⲆᐃ, ᐃᐃᐃ);
    zo.globalAlpha = 1;
    zo.restore();
  }
  function mv() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    if (this.ᐃΔᐃ.ⵠⵠᐃ) {
      if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ == 0) {
        this.ᐃΔᐃ.ⵠⵠᐃ = f;
      }
      var a = So * (Yx * (1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * 600);
      var b = a * Math.sin(this.ᐃΔᐃ.angle - this.angle);
      var c = a * Math.cos(this.ᐃΔᐃ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    ⵠⵠ = ᐃΔ[167][Qx.time];
    ΔⲆᐃ = -ⵠⵠ.width;
    ᐃᐃᐃ = -ⵠⵠ.height;
    Np(zo, ⵠⵠ, -ΔⲆᐃ / 2 + b, -ᐃᐃᐃ / 2 + c, ΔⲆᐃ, ᐃᐃᐃ);
    if (this.lock) {
      ⵠⵠ = ᐃΔ[148][Qx.time];
      ΔⲆᐃ = -ⵠⵠ.width;
      ᐃᐃᐃ = -ⵠⵠ.height;
      Np(zo, ⵠⵠ, -ΔⲆᐃ / 2 + b - So * 1, -ᐃᐃᐃ / 2 + c, ΔⲆᐃ, ᐃᐃᐃ);
    }
    zo.restore();
  }
  function nv(a) {
    if ((a = a / 100) <= 0.95) {
      zo.save();
      zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
      zo.rotate(this.angle);
      if (this.ᐃΔᐃ.ⵠⵠᐃ) {
        if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ == 0) {
          this.ᐃΔᐃ.ⵠⵠᐃ = rk;
        }
        var b = So * ((1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * Yx * 600);
        var c = b * Math.sin(this.ᐃΔᐃ.angle - this.angle);
        var d = Math.cos(this.ᐃΔᐃ.angle - this.angle) * b;
      } else {
        c = 0;
        d = 0;
      }
      zo.globalAlpha = 0.5;
      ld(zo, c, d, So * 28, a);
      od(zo, null, "#000000", So * 18);
      zo.globalAlpha = 1;
      ld(zo, c, d, So * 28, a);
      od(zo, null, ns.ᐃᐃⲆⲆⲆΔΔ[Qx.time], So * 6);
      zo.restore();
    }
  }
  var ov = 0;
  function pv() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    this.ⲆΔⲆⵠᐃ.ⵠⵠᐃ();
    ⵠⵠ = ᐃΔ[288][Qx.time];
    ΔⲆᐃ = -ⵠⵠ.width * this.ⲆΔⲆⵠᐃ.ᐃⲆΔ;
    ᐃᐃᐃ = this.ⲆΔⲆⵠᐃ.ᐃⲆΔ * -ⵠⵠ.height;
    Np(zo, ⵠⵠ, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
    this.ⲆΔᐃⲆᐃ.ⵠⵠᐃ();
    ⵠⵠ = ᐃΔ[289][Qx.time];
    ΔⲆᐃ = -ⵠⵠ.width * this.ⲆΔᐃⲆᐃ.ᐃⲆΔ;
    ᐃᐃᐃ = -ⵠⵠ.height * this.ⲆΔᐃⲆᐃ.ᐃⲆΔ;
    Np(zo, ⵠⵠ, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
    zo.restore();
  }
  function qv(a, b, c) {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + b, Rx.ⵠⵠΔ.y + c);
    zo.rotate(this.angle);
    zo.translate(this.x - b, this.y - c);
    this.ΔⵠᐃⲆ.ⵠⵠᐃ();
    ⵠⵠ = ᐃΔ[a][Qx.time];
    ΔⲆᐃ = this.ΔⵠᐃⲆ.ᐃⲆΔ * -ⵠⵠ.width;
    ᐃᐃᐃ = -ⵠⵠ.height * this.ΔⵠᐃⲆ.ᐃⲆΔ;
    Np(zo, ⵠⵠ, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
    zo.restore();
  }
  function rv() {
    if (this.info >= 10) {
      zo.save();
      zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
      zo.rotate(this.angle);
      if (this.ᐃΔᐃ.ⵠⵠᐃ) {
        if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ == 0) {
          this.ᐃΔᐃ.ⵠⵠᐃ = Wh;
        }
        var b = So * ((1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * Yx * 600);
        var c = Math.sin(this.ᐃΔᐃ.angle - this.angle) * b;
        var d = b * Math.cos(this.ᐃΔᐃ.angle - this.angle);
      } else {
        c = 0;
        d = 0;
      }
      this.ⲆⲆⵠⵠ.ⵠⵠᐃ();
      var e = ᐃΔ[115][Qx.time];
      var f = -e.width * this.ⲆⲆⵠⵠ.ᐃⲆΔ;
      var g = this.ⲆⲆⵠⵠ.ᐃⲆΔ * -e.height;
      Np(zo, e, -f / 2 + c, -g / 2 + d, f, g);
      zo.restore();
    }
  }
  function sv() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    if (ⲆⵠΔⵠ.ᐃⵠⲆⲆ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Yx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - Yx, 1);
    }
    this.ΔⵠᐃⲆ.ⵠⵠᐃ();
    this.rotate.ⵠⵠᐃ();
    a = this.info === 0 ? ᐃΔ[232][Qx.time] : ᐃΔ[1068][Qx.time];
    ΔⲆᐃ = this.ΔⵠᐃⲆ.ᐃⲆΔ * -a.width * this.scale;
    ᐃᐃᐃ = this.ΔⵠᐃⲆ.ᐃⲆΔ * -a.height * this.scale;
    Np(zo, a, -ΔⲆᐃ / 4, -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
    if (this.action & 2) {
      if (this.ᐃΔᐃ.ⵠⵠᐃ() && this.ᐃΔᐃ.ⵠⲆⲆ == zl) {
        this.action -= 2;
      }
      zo.globalAlpha = 0.6 - this.ᐃΔᐃ.ᐃⲆΔ;
      var a = ᐃΔ[1077];
      Np(zo, a, -ΔⲆᐃ / 4, -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
      zo.globalAlpha = 1;
    }
    a = this.info === 0 ? ᐃΔ[1072][Qx.time] : ᐃΔ[1071][Qx.time];
    ΔⲆᐃ = this.ΔⵠᐃⲆ.ᐃⲆΔ * -a.width * this.scale;
    ᐃᐃᐃ = -a.height * this.ΔⵠᐃⲆ.ᐃⲆΔ * this.scale;
    zo.save();
    zo.translate(So * -40, So * 10);
    zo.rotate(this.rotate.ᐃⲆΔ);
    Np(zo, a, So * -ΔⲆᐃ / 4, -ᐃᐃᐃ * So / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
    if (this.action & 2) {
      zo.globalAlpha = 0.6 - this.ᐃΔᐃ.ᐃⲆΔ;
      a = ᐃΔ[1078];
      Np(zo, a, So * -ΔⲆᐃ / 4, So * -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
      zo.globalAlpha = 1;
    }
    zo.restore();
    a = this.info === 0 ? ᐃΔ[1075][Qx.time] : ᐃΔ[1074][Qx.time];
    zo.save();
    zo.translate(So * 40, So * 10);
    zo.rotate(-this.rotate.ᐃⲆΔ);
    Np(zo, a, -ΔⲆᐃ * So / 4, So * -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
    if (this.action & 2) {
      zo.globalAlpha = 0.6 - this.ᐃΔᐃ.ᐃⲆΔ;
      a = ᐃΔ[1079];
      Np(zo, a, -ΔⲆᐃ * So / 4, -ᐃᐃᐃ * So / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
      zo.globalAlpha = 1;
    }
    zo.restore();
    zo.restore();
  }
  function tv() {
    if (~this.info & 1) {
      this.ᐃΔᐃΔⲆ = Math.max(this.ᐃΔᐃΔⲆ - Yx, 0);
      this.ᐃⲆⲆΔΔᐃᐃ += Yx;
      if (this.ᐃⲆⲆΔΔᐃᐃ > 0.1) {
        this.ᐃⲆⲆΔΔᐃᐃ = 0;
        var a = {
          x: this.x + Math.random() * 60 - 30,
          y: this.y + Math.random() * 60 - 30,
          a: 0,
          r: Math.random() * 30 + 30
        };
        this.ⲆⲆⵠⵠ.push(a);
      }
    } else {
      this.ᐃΔᐃΔⲆ = Math.min(this.ᐃΔᐃΔⲆ + Yx, 2.2);
    }
    for (var b = 0; b < this.ⲆⲆⵠⵠ.length; b++) {
      a = this.ⲆⲆⵠⵠ[b];
      zo.save();
      zo.translate(Rx.ⵠⵠΔ.x + a.x, Rx.ⵠⵠΔ.y + a.y);
      a.a = Math.min(1, 0 + Yx / 2);
      var c = 0;
      if (c < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (1 - c) * 5 : 1;
      }
      zo.globalAlpha = c * 0.8;
      hd(zo, 0, 0, a.r);
      od(zo, ns.ΔⲆⵠⲆⲆΔᐃ[Qx.time]);
      zo.restore();
      if (1 === 0) {
        this.ⲆⲆⵠⵠ.splice(b, 1);
        b--;
      }
    }
  }
  function uv() {
    var a = Math.PI / 2;
    var b = Math.PI / 4;
    this.ΔⵠᐃⲆ.ⵠⵠᐃ();
    this.ⵠᐃΔᐃⵠⲆⵠ.ⵠⵠᐃ();
    this.ᐃᐃⵠⲆᐃᐃᐃ.ⵠⵠᐃ();
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    c = this.info === 0 ? ᐃΔ[231][Qx.time] : ᐃΔ[1053][Qx.time];
    ΔⲆᐃ = this.ΔⵠᐃⲆ.ᐃⲆΔ * -c.width;
    ᐃᐃᐃ = -c.height * this.ΔⵠᐃⲆ.ᐃⲆΔ;
    Np(zo, c, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
    if (this.action & 2) {
      if (this.ᐃΔᐃ.ⵠⵠᐃ() && this.ᐃΔᐃ.ⵠⲆⲆ == co) {
        this.action -= 2;
      }
      zo.globalAlpha = 0.6 - this.ᐃΔᐃ.ᐃⲆΔ;
      var c = ᐃΔ[1056];
      Np(zo, c, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
      zo.globalAlpha = 1;
    }
    if (this.action & 4) {
      if (this.ᐃΔΔⵠΔ.ⵠⵠᐃ() && this.ᐃΔΔⵠΔ.ⵠⲆⲆ == 0) {
        this.action -= 4;
      }
      zo.globalAlpha = 0.6 - this.ᐃΔΔⵠΔ.ᐃⲆΔ;
      c = ᐃΔ[1065];
      Np(zo, c, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
      zo.globalAlpha = 1;
    }
    zo.restore();
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle + b);
    zo.translate(100, 0);
    zo.rotate(a);
    c = this.info === 0 ? ᐃΔ[1060][Qx.time] : ᐃΔ[1059][Qx.time];
    ΔⲆᐃ = -c.width * this.ⵠᐃΔᐃⵠⲆⵠ.ᐃⲆΔ;
    ᐃᐃᐃ = this.ⵠᐃΔᐃⵠⲆⵠ.ᐃⲆΔ * -c.height;
    Np(zo, c, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
    if (this.action & 2) {
      zo.globalAlpha = 0.6 - this.ᐃΔᐃ.ᐃⲆΔ;
      c = ᐃΔ[1057];
      Np(zo, c, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
      zo.globalAlpha = 1;
    }
    if (this.action & 4) {
      zo.globalAlpha = 0.6 - this.ᐃΔΔⵠΔ.ᐃⲆΔ;
      c = ᐃΔ[1066];
      Np(zo, c, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
      zo.globalAlpha = 1;
    }
    zo.restore();
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle + a + b);
    zo.translate(100, 0);
    zo.rotate(a);
    c = this.info === 0 ? ᐃΔ[1063][Qx.time] : ᐃΔ[1062][Qx.time];
    ΔⲆᐃ = -c.width * this.ᐃᐃⵠⲆᐃᐃᐃ.ᐃⲆΔ;
    ᐃᐃᐃ = -c.height * this.ᐃᐃⵠⲆᐃᐃᐃ.ᐃⲆΔ;
    Np(zo, c, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
    if (this.action & 2) {
      zo.globalAlpha = 0.6 - this.ᐃΔᐃ.ᐃⲆΔ;
      c = ᐃΔ[1058];
      Np(zo, c, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
      zo.globalAlpha = 1;
    }
    if (this.action & 4) {
      zo.globalAlpha = 0.6 - this.ᐃΔΔⵠΔ.ᐃⲆΔ;
      c = ᐃΔ[1067];
      Np(zo, c, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
      zo.globalAlpha = 1;
    }
    zo.restore();
  }
  function vv() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    if (this.ᐃΔᐃ.ⵠⵠᐃ) {
      if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ == 0) {
        this.ᐃΔᐃ.ⵠⵠᐃ = Vg;
      }
      var b = (1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * Yx * 600 * So;
      var c = b * Math.sin(this.ᐃΔᐃ.angle - this.angle);
      var d = b * Math.cos(this.ᐃΔᐃ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
      e = ᐃΔ[716][Qx.time];
      Np(zo, e, -e.width / 2 + c, -e.height / 2 + d);
      this.up.ⵠⵠᐃ();
      var e = ᐃΔ[720][Qx.time];
      var f = -e.width * this.up.ᐃⲆΔ;
      var g = this.up.ᐃⲆΔ * -e.height;
      Np(zo, e, -f / 2 + So * 1, -g / 2 + So * 3, f, g);
    } else {
      e = ᐃΔ[144][Qx.time];
      Np(zo, e, -e.width / 2 + c, -e.height / 2 + d);
    }
    zo.restore();
  }
  function wv() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    if (this.ᐃΔᐃ.ⵠⵠᐃ) {
      if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ == at) {
        this.ᐃΔᐃ.ⵠⵠᐃ = gn;
      }
      var b = (1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * Yx * 600 * So;
      var c = Math.sin(this.ᐃΔᐃ.angle - this.angle) * b;
      var d = b * Math.cos(this.ᐃΔᐃ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      zo.rotate(this.angle);
      this.ⲆⲆⵠⵠ.ⵠⵠᐃ();
      if (this.info & 16) {
        var f = ᐃΔ[849][Qx.time];
      } else {
        f = ᐃΔ[193][Qx.time];
      }
      var g = this.ⲆⲆⵠⵠ.ᐃⲆΔ * -f.width;
      var a = this.ⲆⲆⵠⵠ.ᐃⲆΔ * -f.height;
      Np(zo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ᐃΔ[869][Qx.time];
      } else {
        f = ᐃΔ[194][Qx.time];
      }
      zo.translate(0, f.height / 2);
      Np(zo, f, c - f.width / 2, -f.height + d);
    }
    zo.restore();
  }
  function xv() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    var a = ⲆⵠΔⵠ.ᐃⵠⲆⲆ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + Yx / 2, 1.8) : Math.max(this.scale - Yx, 1);
    this.ΔⵠᐃⲆ.ⵠⵠᐃ();
    this.rotate.ⵠⵠᐃ();
    this.Δᐃᐃⵠ = a < 350 ? Math.max(0, this.Δᐃᐃⵠ - Yx * 2.2) : Math.min(1, this.Δᐃᐃⵠ + Yx * 2.2);
    b = ᐃΔ[1135][Qx.time];
    ΔⲆᐃ = this.scale * (-b.width * this.ΔⵠᐃⲆ.ᐃⲆΔ);
    ᐃᐃᐃ = this.scale * (-b.height * this.ΔⵠᐃⲆ.ᐃⲆΔ);
    zo.globalAlpha = 1 - this.Δᐃᐃⵠ;
    Np(zo, b, -ΔⲆᐃ / 4, -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
    b = ᐃΔ[1119][Qx.time];
    ΔⲆᐃ = this.scale * (-b.width * this.ΔⵠᐃⲆ.ᐃⲆΔ);
    ᐃᐃᐃ = -b.height * this.ΔⵠᐃⲆ.ᐃⲆΔ * this.scale;
    zo.globalAlpha = this.Δᐃᐃⵠ;
    Np(zo, b, -ΔⲆᐃ / 4, -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
    if (this.action & 2) {
      if (this.ᐃΔᐃ.ⵠⵠᐃ() && this.ᐃΔᐃ.ⵠⲆⲆ == 0) {
        this.action -= 2;
      }
      zo.globalAlpha = (1 - this.Δᐃᐃⵠ) * (0.6 - this.ᐃΔᐃ.ᐃⲆΔ);
      var b = ᐃΔ[1136];
      ΔⲆᐃ = this.ΔⵠᐃⲆ.ᐃⲆΔ * -b.width * this.scale;
      ᐃᐃᐃ = this.scale * (this.ΔⵠᐃⲆ.ᐃⲆΔ * -b.height);
      Np(zo, b, -ΔⲆᐃ / 4, -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
      zo.globalAlpha = (0.6 - this.ᐃΔᐃ.ᐃⲆΔ) * this.Δᐃᐃⵠ;
      b = ᐃΔ[1128];
      ΔⲆᐃ = -b.width * this.ΔⵠᐃⲆ.ᐃⲆΔ * this.scale;
      ᐃᐃᐃ = this.scale * (-b.height * this.ΔⵠᐃⲆ.ᐃⲆΔ);
      Np(zo, b, -ΔⲆᐃ / 4, -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
      zo.globalAlpha = 1;
    }
    b = ᐃΔ[1122][Qx.time];
    ΔⲆᐃ = this.scale * (this.ΔⵠᐃⲆ.ᐃⲆΔ * -b.width);
    ᐃᐃᐃ = this.scale * (this.ΔⵠᐃⲆ.ᐃⲆΔ * -b.height);
    zo.save();
    zo.translate(So * -40, So * 80);
    zo.rotate(this.rotate.ᐃⲆΔ);
    zo.globalAlpha = this.Δᐃᐃⵠ;
    Np(zo, b, -ΔⲆᐃ * So / 4, So * -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
    if (this.action & 2) {
      zo.globalAlpha = this.Δᐃᐃⵠ * (0.6 - this.ᐃΔᐃ.ᐃⲆΔ);
      b = ᐃΔ[1129];
      Np(zo, b, So * -ΔⲆᐃ / 4, So * -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
      zo.globalAlpha = 1;
    }
    zo.restore();
    b = ᐃΔ[1125][Qx.time];
    zo.save();
    zo.translate(So * 40, So * 80);
    zo.rotate(-this.rotate.ᐃⲆΔ);
    zo.globalAlpha = this.Δᐃᐃⵠ;
    Np(zo, b, -ΔⲆᐃ * So / 4, -ᐃᐃᐃ * So / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
    if (this.action & 2) {
      zo.globalAlpha = (0.6 - this.ᐃΔᐃ.ᐃⲆΔ) * this.Δᐃᐃⵠ;
      b = ᐃΔ[1130];
      Np(zo, b, So * -ΔⲆᐃ / 4, -ᐃᐃᐃ * So / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
      zo.globalAlpha = 1;
    }
    zo.globalAlpha = 1;
    zo.restore();
    zo.restore();
  }
  function yv() {
    var a = Math.PI / 2;
    var b = Math.PI / 4;
    this.ΔⵠᐃⲆ.ⵠⵠᐃ();
    this.ⵠᐃΔᐃⵠⲆⵠ.ⵠⵠᐃ();
    this.ᐃᐃⵠⲆᐃᐃᐃ.ⵠⵠᐃ();
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    c = this.info === 0 ? ᐃΔ[887][Qx.time] : ᐃΔ[886][Qx.time];
    ΔⲆᐃ = -c.width * this.ΔⵠᐃⲆ.ᐃⲆΔ;
    ᐃᐃᐃ = -c.height * this.ΔⵠᐃⲆ.ᐃⲆΔ;
    Np(zo, c, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
    if (this.action & 2) {
      if (this.ᐃΔᐃ.ⵠⵠᐃ() && fr == this.ᐃΔᐃ.ⵠⲆⲆ) {
        this.action -= 2;
      }
      zo.globalAlpha = 0.6 - this.ᐃΔᐃ.ᐃⲆΔ;
      var c = ᐃΔ[888];
      Np(zo, c, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
      zo.globalAlpha = 1;
    }
    if (this.action & 4) {
      if (this.ᐃΔΔⵠΔ.ⵠⵠᐃ() && this.ᐃΔΔⵠΔ.ⵠⲆⲆ == at) {
        this.action -= 4;
      }
      zo.globalAlpha = 0.6 - this.ᐃΔΔⵠΔ.ᐃⲆΔ;
      c = ᐃΔ[891];
      Np(zo, c, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
      zo.globalAlpha = 1;
    }
    zo.restore();
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle + b);
    zo.translate(55, 0);
    zo.rotate(a);
    c = this.info === 0 ? ᐃΔ[894][Qx.time] : ᐃΔ[896][Qx.time];
    ΔⲆᐃ = -c.width * this.ⵠᐃΔᐃⵠⲆⵠ.ᐃⲆΔ;
    ᐃᐃᐃ = this.ⵠᐃΔᐃⵠⲆⵠ.ᐃⲆΔ * -c.height;
    Np(zo, c, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
    if (this.action & 2) {
      zo.globalAlpha = 0.6 - this.ᐃΔᐃ.ᐃⲆΔ;
      c = ᐃΔ[889];
      Np(zo, c, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
      zo.globalAlpha = 1;
    }
    if (this.action & 4) {
      zo.globalAlpha = 0.6 - this.ᐃΔΔⵠΔ.ᐃⲆΔ;
      c = ᐃΔ[892];
      Np(zo, c, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
      zo.globalAlpha = 1;
    }
    zo.restore();
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle + a + b);
    zo.translate(55, 0);
    zo.rotate(a);
    c = this.info === 0 ? ᐃΔ[895][Qx.time] : ᐃΔ[897][Qx.time];
    ΔⲆᐃ = -c.width * this.ᐃᐃⵠⲆᐃᐃᐃ.ᐃⲆΔ;
    ᐃᐃᐃ = -c.height * this.ᐃᐃⵠⲆᐃᐃᐃ.ᐃⲆΔ;
    Np(zo, c, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
    if (this.action & 2) {
      zo.globalAlpha = 0.6 - this.ᐃΔᐃ.ᐃⲆΔ;
      c = ᐃΔ[890];
      Np(zo, c, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
      zo.globalAlpha = 1;
    }
    if (this.action & 4) {
      zo.globalAlpha = 0.6 - this.ᐃΔΔⵠΔ.ᐃⲆΔ;
      c = ᐃΔ[893];
      Np(zo, c, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
      zo.globalAlpha = 1;
    }
    zo.restore();
  }
  function zv() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    if (this.ᐃΔᐃ.ⵠⵠᐃ) {
      if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ == tg) {
        this.ᐃΔᐃ.ⵠⵠᐃ = f;
      }
      var b = So * (Yx * (1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * 600);
      var c = b * Math.sin(this.ᐃΔᐃ.angle - this.angle);
      var d = Math.cos(this.ᐃΔᐃ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      zo.rotate(this.angle);
      this.ⲆⲆⵠⵠ.ⵠⵠᐃ();
      if (this.info & 16) {
        var g = ᐃΔ[953][Qx.time];
      } else {
        g = ᐃΔ[204][Qx.time];
      }
      var h = this.ⲆⲆⵠⵠ.ᐃⲆΔ * -g.width;
      var a = -g.height * this.ⲆⲆⵠⵠ.ᐃⲆΔ;
      Np(zo, g, -h / 2 + c, -a / 2 + d, h, a);
    } else {
      if (this.info & 16) {
        g = ᐃΔ[954][Qx.time];
      } else {
        g = ᐃΔ[205][Qx.time];
      }
      zo.translate(0, g.height / 2);
      Np(zo, g, c - g.width / 2, -g.height + d);
    }
    zo.restore();
  }
  function Av() {
    if (this.ᐃΔᐃ.ⵠⵠᐃ) {
      if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ == 0) {
        this.ᐃΔᐃ.ⵠⵠᐃ = at;
      }
      var a = So * (Yx * (1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * 600);
      var b = Math.sin(this.ᐃΔᐃ.angle - this.angle) * a;
      var c = a * Math.cos(this.ᐃΔᐃ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    zo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    zo.translate(Rx.ⵠⵠΔ.x + this.x + b, Rx.ⵠⵠΔ.y + this.y + c);
    zo.rotate(this.angle);
    ⵠⵠ = ᐃΔ[153][Qx.time];
    Np(zo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Yx * 3) % (Math.PI * 2);
    }
    zo.rotate(this.rotate);
    ⵠⵠ = ᐃΔ[1198][Qx.time];
    Np(zo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    zo.restore();
  }
  function Bv() {
    if (this.ᐃΔᐃ.ⵠⵠᐃ) {
      if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && at == this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ) {
        this.ᐃΔᐃ.ⵠⵠᐃ = Ij;
      }
      var a = (1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * Yx * 600 * So;
      var b = a * Math.sin(this.ᐃΔᐃ.angle - this.angle);
      var c = Math.cos(this.ᐃΔᐃ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    this.ᐃⵠⵠⵠᐃΔⲆ = (this.ᐃⵠⵠⵠᐃΔⲆ + Yx * 3) % (Math.PI * 2);
    this.ⵠᐃΔᐃⲆΔⲆ = (this.ⵠᐃΔᐃⲆΔⲆ - Yx * 3) % (Math.PI * 2);
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x + b, Rx.ⵠⵠΔ.y + this.y + c);
    zo.save();
    zo.rotate(this.angle);
    ⵠⵠ = ᐃΔ[151][Qx.time];
    Np(zo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    zo.restore();
    zo.save();
    zo.rotate(this.ᐃⵠⵠⵠᐃΔⲆ);
    ⵠⵠ = ᐃΔ[528][Qx.time];
    Np(zo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    zo.restore();
    zo.save();
    zo.rotate(this.ⵠᐃΔᐃⲆΔⲆ);
    ⵠⵠ = ᐃΔ[527][Qx.time];
    Np(zo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    zo.restore();
    zo.restore();
  }
  function Cv(a, b, c) {
    if (a >= 0) {
      ⵠⵠ = ᐃΔ[a][Qx.time];
      switch (a) {
        case 1:
        case 3:
        case 4:
        case 8:
        case 31:
        case 32:
          Nw(a, ⵠⵠ, -ⵠⵠ.width / 2 - (45 + b) * So, -ⵠⵠ.height / 2 + So * (c + 22));
          break;
        case 94:
        case 95:
        case 96:
        case 97:
          af(a, ⵠⵠ, -ⵠⵠ.width / 4 - (52 + b) * So, -ⵠⵠ.height / 4 + So * (c + 20));
          break;
        case 98:
        case 99:
          af(a, ⵠⵠ, -ⵠⵠ.width / 4 - So * (57 + b), -ⵠⵠ.height / 4 + (c + 20) * So);
          break;
        case 57:
        case 0:
        case 5:
        case 6:
          af(a, ⵠⵠ, -ⵠⵠ.width / 4 - So * (47 + b), -ⵠⵠ.height / 4 + (c + 45) * So);
          break;
        case 30:
          af(a, ⵠⵠ, -ⵠⵠ.width / 4 - So * (52 + b), -ⵠⵠ.height / 4 + So * (c + 45));
          break;
        case 19:
          af(a, ⵠⵠ, -ⵠⵠ.width / 4 - (47 + b) * So, -ⵠⵠ.height / 4 + (c + 44) * So);
          break;
        case 9:
          Nw(a, ⵠⵠ, -ⵠⵠ.width / 2 - So * (47 + b), -ⵠⵠ.height / 2 + So * (c + 44));
          break;
        case 62:
          Nw(a, ⵠⵠ, -ⵠⵠ.width / 2 - So * (40 + b), -ⵠⵠ.height / 2 + (c + 65) * So);
          break;
        case 12:
          af(a, ⵠⵠ, -ⵠⵠ.width / 4 - (37 + b) * So, -ⵠⵠ.height / 4 + So * (c + 85));
          break;
        case 34:
          af(a, ⵠⵠ, -ⵠⵠ.width / 4 - So * (37 + b), -ⵠⵠ.height / 4 + (c + 85) * So);
          break;
        case 54:
        case 53:
          af(a, ⵠⵠ, -ⵠⵠ.width / 4 - So * (26 + b), -ⵠⵠ.height / 4 + (c + 77) * So);
          break;
        case 17:
          af(a, ⵠⵠ, -ⵠⵠ.width / 4 - (37 + b) * So, -ⵠⵠ.height / 4 + So * (c + 85));
          break;
        case 63:
          af(a, ⵠⵠ, -ⵠⵠ.width / 4 - (47 + b) * So, -ⵠⵠ.height / 4 + (c + 44) * So);
          break;
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
          af(a, ⵠⵠ, -ⵠⵠ.width / 4 - So * (37 + b), -ⵠⵠ.height / 4 + (c + 30) * So);
          break;
        case 56:
          af(a, ⵠⵠ, -ⵠⵠ.width / 4 - So * (47 + b), -ⵠⵠ.height / 4 + So * (c + 35));
          break;
        case 92:
        case 93:
          af(a, ⵠⵠ, -ⵠⵠ.width / 4 - So * (47 + b), -ⵠⵠ.height / 4 + So * (c + 40));
          break;
        case 89:
          af(a, ⵠⵠ, -ⵠⵠ.width / 4 - (47 + b) * So, -ⵠⵠ.height / 4 + So * (c + 34));
          break;
        case 13:
        case 14:
        case 15:
        case 33:
          af(a, ⵠⵠ, -ⵠⵠ.width / 4 - So * (37 + b), -ⵠⵠ.height / 4 + So * (c + 90));
          break;
        case 18:
          af(a, ⵠⵠ, -ⵠⵠ.width / 4 - (40 + b) * So, -ⵠⵠ.height / 4 + So * (c + 85));
          break;
        case 16:
          Nw(a, ⵠⵠ, -ⵠⵠ.width / 2 - So * (39 + b), -ⵠⵠ.height / 2 + (c + 90) * So);
          break;
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 45:
          Nw(a, ⵠⵠ, -ⵠⵠ.width / 2 - So * (46 + b), -ⵠⵠ.height / 2 + (c + 35) * So);
          break;
        case 49:
          Nw(a, ⵠⵠ, -ⵠⵠ.width / 2 - So * (47 + b), -ⵠⵠ.height / 2 + So * (c + 54));
          break;
        case 46:
        case 50:
        case 51:
        case 52:
          Nw(a, ⵠⵠ, -ⵠⵠ.width / 2 - So * (46 + b), -ⵠⵠ.height / 2 + (c + 35) * So);
          break;
        case 55:
          Nw(a, ⵠⵠ, -ⵠⵠ.width / 2 - (47 + b) * So, -ⵠⵠ.height / 2 + So * (c + 20));
      }
    }
  }
  function Dv() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    this.ⲆΔᐃⲆᐃ.ⵠⵠᐃ();
    ⵠⵠ = ᐃΔ[289][Qx.time];
    ΔⲆᐃ = -ⵠⵠ.width * this.ⲆΔᐃⲆᐃ.ᐃⲆΔ;
    ᐃᐃᐃ = this.ⲆΔᐃⲆᐃ.ᐃⲆΔ * -ⵠⵠ.height;
    Np(zo, ⵠⵠ, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
    zo.restore();
  }
  function Ev() {
    if (this.info >= 10) {
      zo.save();
      zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
      zo.rotate(this.angle);
      if (this.ᐃΔᐃ.ⵠⵠᐃ) {
        if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ == 0) {
          this.ᐃΔᐃ.ⵠⵠᐃ = Wh;
        }
        var b = (1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * Yx * 600 * So;
        var c = b * Math.sin(this.ᐃΔᐃ.angle - this.angle);
        var d = b * Math.cos(this.ᐃΔᐃ.angle - this.angle);
      } else {
        c = 0;
        d = 0;
      }
      this.ⲆⲆⵠⵠ.ⵠⵠᐃ();
      var e = ᐃΔ[206][Qx.time];
      var f = -e.width * this.ⲆⲆⵠⵠ.ᐃⲆΔ;
      var g = -e.height * this.ⲆⲆⵠⵠ.ᐃⲆΔ;
      Np(zo, e, -f / 2 + c, -g / 2 + d, f, g);
      zo.restore();
    }
  }
  function Fv(a, b) {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    if (a === 854) {
      a = 250;
      this.info = 36;
    }
    ⵠⵠ = ᐃΔ[a][this.info][Qx.time];
    ΔⲆᐃ = -ⵠⵠ.width / 2;
    ᐃᐃᐃ = -ⵠⵠ.height / 2;
    Np(zo, ⵠⵠ, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
    if (this.action & 2) {
      if (this.ᐃΔᐃ.ⵠⵠᐃ() && this.ᐃΔᐃ.ⵠⲆⲆ == 0) {
        this.action -= 2;
      }
      zo.globalAlpha = 0.6 - this.ᐃΔᐃ.ᐃⲆΔ;
      var c = rw(this.info, ⵠⵠ, ΔᐃⵠⵠΔΔⵠΔⲆ);
      Np(zo, c, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
      zo.globalAlpha = 1;
    }
    zo.restore();
  }
  function Gv() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    this.ⲆⲆⵠⵠ.ⵠⵠᐃ();
    zo.globalAlpha = 0.3;
    var a = ᐃΔ[282][Qx.time];
    var b = -a.width * this.ⲆⲆⵠⵠ.ᐃⲆΔ;
    var c = -a.height * this.ⲆⲆⵠⵠ.ᐃⲆΔ;
    Np(zo, a, -b / 2, -c / 2, b, c);
    zo.globalAlpha = 1;
    zo.restore();
  }
  function Hv() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    if (this.ᐃΔᐃ.ⵠⵠᐃ) {
      if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ == 0) {
        this.ᐃΔᐃ.ⵠⵠᐃ = Hs;
      }
      var b = So * ((1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * Yx * 600);
      var c = b * Math.sin(this.ᐃΔᐃ.angle - this.angle);
      var d = Math.cos(this.ᐃΔᐃ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      zo.rotate(this.angle);
      this.ⲆⲆⵠⵠ.ⵠⵠᐃ();
      if (this.info & 16) {
        var f = ᐃΔ[838][Qx.time];
      } else {
        f = ᐃΔ[191][Qx.time];
      }
      var g = -f.width * this.ⲆⲆⵠⵠ.ᐃⲆΔ;
      var a = this.ⲆⲆⵠⵠ.ᐃⲆΔ * -f.height;
      Np(zo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ᐃΔ[839][Qx.time];
      } else {
        f = ᐃΔ[192][Qx.time];
      }
      zo.translate(0, f.height / 2);
      Np(zo, f, c - f.width / 2, -f.height + d);
    }
    zo.restore();
  }
  function Iv() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    if (ⲆⵠΔⵠ.ᐃⵠⲆⲆ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Yx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - Yx, 1);
    }
    this.ΔⵠᐃⲆ.ⵠⵠᐃ();
    this.rotate.ⵠⵠᐃ();
    a = ᐃΔ[449][Qx.time];
    ΔⲆᐃ = this.scale * (this.ΔⵠᐃⲆ.ᐃⲆΔ * -a.width);
    ᐃᐃᐃ = this.ΔⵠᐃⲆ.ᐃⲆΔ * -a.height * this.scale;
    Np(zo, a, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
    if (this.action & 2) {
      if (this.ᐃΔᐃ.ⵠⵠᐃ() && this.ᐃΔᐃ.ⵠⲆⲆ == 0) {
        this.action -= 2;
      }
      zo.globalAlpha = 0.6 - this.ᐃΔᐃ.ᐃⲆΔ;
      var a = ᐃΔ[463];
      Np(zo, a, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
      zo.globalAlpha = 1;
    }
    a = ᐃΔ[451][Qx.time];
    ΔⲆᐃ = this.ΔⵠᐃⲆ.ᐃⲆΔ * -a.width * this.scale;
    ᐃᐃᐃ = this.ΔⵠᐃⲆ.ᐃⲆΔ * -a.height * this.scale;
    zo.save();
    zo.translate(So * -30, So * 70);
    zo.rotate(this.rotate.ᐃⲆΔ);
    Np(zo, a, So * -10, So * -40, ΔⲆᐃ, ᐃᐃᐃ);
    if (this.action & 2) {
      zo.globalAlpha = 0.6 - this.ᐃΔᐃ.ᐃⲆΔ;
      a = ᐃΔ[466];
      Np(zo, a, So * -10, So * -40, ΔⲆᐃ, ᐃᐃᐃ);
      zo.globalAlpha = 1;
    }
    zo.restore();
    a = ᐃΔ[452][Qx.time];
    zo.save();
    zo.translate(So * 30, So * 70);
    zo.rotate(-this.rotate.ᐃⲆΔ);
    Np(zo, a, So * 10 - ΔⲆᐃ, So * -40, ΔⲆᐃ, ᐃᐃᐃ);
    if (this.action & 2) {
      zo.globalAlpha = 0.6 - this.ᐃΔᐃ.ᐃⲆΔ;
      a = ᐃΔ[467];
      Np(zo, a, So * 10 - ΔⲆᐃ, So * -40, ΔⲆᐃ, ᐃᐃᐃ);
      zo.globalAlpha = 1;
    }
    zo.restore();
    zo.restore();
  }
  function Jv() {
    var a = Rr;
    var b = Aj;
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    this.ΔⵠᐃⲆ.ⵠⵠᐃ();
    this.rotate.ⵠⵠᐃ();
    if (this.ᐃΔᐃΔⲆ >= 0.1 && this.ᐃΔᐃΔⲆ <= 1.1) {
      if ((c = Math.max(0, Math.min(1, this.ᐃΔᐃΔⲆ - 0.1))) < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (1 - c) * 5 : 1;
      }
      a = ᐃΔ[1150][Qx.time];
      ΔⲆᐃ = -a.width * this.ΔⵠᐃⲆ.ᐃⲆΔ;
      ᐃᐃᐃ = this.ΔⵠᐃⲆ.ᐃⲆΔ * -a.height;
      zo.globalAlpha = c;
      Np(zo, a, -ΔⲆᐃ / 4, -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
      b = ᐃΔ[1151];
    }
    if (this.ᐃΔᐃΔⲆ >= 0.9) {
      var c;
      if ((c = Math.max(0, Math.min(1, this.ᐃΔᐃΔⲆ - 0.9))) < 0.2) {
        c *= 5;
      } else {
        c = 1;
      }
      a = ᐃΔ[1152][Qx.time];
      ΔⲆᐃ = this.ΔⵠᐃⲆ.ᐃⲆΔ * -a.width;
      ᐃᐃᐃ = this.ΔⵠᐃⲆ.ᐃⲆΔ * -a.height;
      zo.globalAlpha = c;
      Np(zo, a, -ΔⲆᐃ / 4, -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
      b = ᐃΔ[1153];
    }
    if (this.action & 2 && b !== undefined) {
      if (this.ᐃΔᐃ.ⵠⵠᐃ() && this.ᐃΔᐃ.ⵠⲆⲆ == 0) {
        this.action -= 2;
      }
      zo.globalAlpha = c * (0.6 - this.ᐃΔᐃ.ᐃⲆΔ);
      ΔⲆᐃ = this.ΔⵠᐃⲆ.ᐃⲆΔ * -b.width;
      ᐃᐃᐃ = -b.height * this.ΔⵠᐃⲆ.ᐃⲆΔ;
      Np(zo, b, -ΔⲆᐃ / 4, -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
    }
    zo.globalAlpha = 1;
    zo.restore();
  }
  function Kv() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    this.ΔᐃⲆⲆⲆᐃⲆ = Math.min(1, this.ΔᐃⲆⲆⲆᐃⲆ + Yx * 2);
    zo.globalAlpha = Math.min(1, Math.max(0, ⲆⵠΔⵠ.ᐃⵠⲆⲆ(this, this.r) / 80)) * this.ΔᐃⲆⲆⲆᐃⲆ;
    this.ΔⵠᐃⲆ.ⵠⵠᐃ();
    ⵠⵠ = ᐃΔ[247][Qx.time][this.ⵠⵠⵠᐃᐃ];
    if (this.ⵠⵠⵠᐃᐃ < 2) {
      ΔⲆᐃ = -ⵠⵠ.width * this.ΔⵠᐃⲆ.ᐃⲆΔ;
      ᐃᐃᐃ = -ⵠⵠ.height * this.ΔⵠᐃⲆ.ᐃⲆΔ;
    } else if (this.ΔΔⵠΔⵠⲆⵠ === 0) {
      ΔⲆᐃ = -ⵠⵠ.width;
      ᐃᐃᐃ = -ⵠⵠ.height;
    } else {
      ΔⲆᐃ = -ⵠⵠ.width * 1.35;
      ᐃᐃᐃ = -ⵠⵠ.height * 1.35;
    }
    Np(zo, ⵠⵠ, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
    zo.globalAlpha = 1;
    zo.restore();
  }
  function Lv() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    if (this.ᐃΔᐃ.ⵠⵠᐃ) {
      if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && tg == this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ) {
        this.ᐃΔᐃ.ⵠⵠᐃ = Gl;
      }
      var b = (1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * Yx * 600 * So;
      var c = Math.sin(this.ᐃΔᐃ.angle - this.angle) * b;
      var d = Math.cos(this.ᐃΔᐃ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      zo.rotate(this.angle);
      this.ⲆⲆⵠⵠ.ⵠⵠᐃ();
      if (this.info & 16) {
        var f = ᐃΔ[812][Qx.time];
      } else {
        f = ᐃΔ[188][Qx.time];
      }
      var g = -f.width * this.ⲆⲆⵠⵠ.ᐃⲆΔ;
      var a = this.ⲆⲆⵠⵠ.ᐃⲆΔ * -f.height;
      Np(zo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ᐃΔ[813][Qx.time];
      } else {
        f = ᐃΔ[189][Qx.time];
      }
      zo.translate(0, f.height / 2);
      Np(zo, f, c - f.width / 2, -f.height + d);
    }
    zo.restore();
  }
  function Mv(a, b, c) {
    if (a >= 0) {
      ⵠⵠ = ᐃΔ[a][Qx.time];
      switch (a) {
        case 71:
        case 72:
        case 73:
          af(a, ⵠⵠ, -ⵠⵠ.width / 4 - (0 + b) * So, -ⵠⵠ.height / 4 + So * (c + 35));
          break;
        case 74:
          af(a, ⵠⵠ, -ⵠⵠ.width / 4 - (1 + b) * So, -ⵠⵠ.height / 4 + So * (c + 45));
          break;
        case 75:
        case 76:
          af(a, ⵠⵠ, -ⵠⵠ.width / 4 - (1 + b) * So, -ⵠⵠ.height / 4 + So * (c + 40));
      }
    }
  }
  function Nv() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    if (this.ᐃΔᐃ.ⵠⵠᐃ) {
      if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ == 0) {
        this.ᐃΔᐃ.ⵠⵠᐃ = false;
      }
      var a = (1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * Yx * 600 * So;
      var b = Math.sin(this.ᐃΔᐃ.angle - this.angle) * a;
      var c = a * Math.cos(this.ᐃΔᐃ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    if (this.info === 0) {
      ⵠⵠ = ᐃΔ[183][Qx.time];
    } else {
      ⵠⵠ = ᐃΔ[802][Qx.time][this.info - 1];
    }
    Np(zo, ⵠⵠ, -ⵠⵠ.width / 2 + b, -ⵠⵠ.height / 2 + c);
    zo.restore();
  }
  function Ov() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    if (this.ᐃΔᐃ.ⵠⵠᐃ) {
      if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ == Pq) {
        this.ᐃΔᐃ.ⵠⵠᐃ = false;
      }
      var b = So * (Yx * (1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * 600);
      var c = Math.sin(this.ᐃΔᐃ.angle - this.angle) * b;
      var d = b * Math.cos(this.ᐃΔᐃ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      zo.rotate(this.angle);
      this.ⲆⲆⵠⵠ.ⵠⵠᐃ();
      if (this.info & 16) {
        var f = ᐃΔ[985][Qx.time];
      } else {
        f = ᐃΔ[210][Qx.time];
      }
      var g = -f.width * this.ⲆⲆⵠⵠ.ᐃⲆΔ;
      var a = this.ⲆⲆⵠⵠ.ᐃⲆΔ * -f.height;
      Np(zo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ᐃΔ[986][Qx.time];
      } else {
        f = ᐃΔ[211][Qx.time];
      }
      zo.translate(0, f.height / 2);
      Np(zo, f, c - f.width / 2, -f.height + d);
    }
    zo.restore();
  }
  function Pv() {
    this.ΔⵠᐃⲆ.ⵠⵠᐃ();
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    a = this.info === 0 ? ᐃΔ[1042][Qx.time] : ᐃΔ[1044][Qx.time];
    ΔⲆᐃ = this.ΔⵠᐃⲆ.ᐃⲆΔ * -a.width;
    ᐃᐃᐃ = -a.height * this.ΔⵠᐃⲆ.ᐃⲆΔ;
    Np(zo, a, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
    if (this.action & 2) {
      if (this.ᐃΔᐃ.ⵠⵠᐃ() && this.ᐃΔᐃ.ⵠⲆⲆ == 0) {
        this.action -= 2;
      }
      zo.globalAlpha = 0.6 - this.ᐃΔᐃ.ᐃⲆΔ;
      var a = ᐃΔ[1045];
      Np(zo, a, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
      zo.globalAlpha = 1;
    }
    zo.restore();
  }
  function Qv() {
    this.ΔⵠᐃⲆ.ⵠⵠᐃ();
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    a = this.info === 0 ? ᐃΔ[248][Qx.time] : ᐃΔ[1222][Qx.time];
    ΔⲆᐃ = this.ΔⵠᐃⲆ.ᐃⲆΔ * -a.width;
    ᐃᐃᐃ = -a.height * this.ΔⵠᐃⲆ.ᐃⲆΔ;
    Np(zo, a, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
    if (this.action & 2) {
      if (this.ᐃΔᐃ.ⵠⵠᐃ() && Vg == this.ᐃΔᐃ.ⵠⲆⲆ) {
        this.action -= 2;
      }
      zo.globalAlpha = 0.6 - this.ᐃΔᐃ.ᐃⲆΔ;
      var a = ᐃΔ[1223];
      Np(zo, a, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
      zo.globalAlpha = 1;
    }
    zo.restore();
  }
  function Rv() {
    if (this.info !== 10) {
      zo.save();
      zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
      zo.rotate(this.angle);
      if (this.ᐃΔᐃ.ⵠⵠᐃ) {
        if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ == 0) {
          this.ᐃΔᐃ.ⵠⵠᐃ = Gl;
        }
        var b = Yx * (1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * 600 * So;
        var c = Math.sin(this.ᐃΔᐃ.angle - this.angle) * b;
        var d = b * Math.cos(this.ᐃΔᐃ.angle - this.angle);
      } else {
        c = 0;
        d = 0;
      }
      if (this.info & 16) {
        var e = ᐃΔ[623][Qx.time];
      } else {
        e = ᐃΔ[287][Qx.time];
      }
      Np(zo, e, -e.width / 2 + c, -e.width / 2 + d);
      zo.restore();
      for (var f = this.info & 15, g = 0; f > g; g++) {
        this.ᐃⵠⵠᐃ[g].ⲆⵠⵠΔ(294);
      }
    }
  }
  function Sv() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    if (ⲆⵠΔⵠ.ᐃⵠⲆⲆ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Yx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - Yx, 1);
    }
    this.ΔⵠᐃⲆ.ⵠⵠᐃ();
    this.rotate.ⵠⵠᐃ();
    a = this.info === 0 ? ᐃΔ[233][Qx.time] : ᐃΔ[1083][Qx.time];
    ΔⲆᐃ = -a.width * this.ΔⵠᐃⲆ.ᐃⲆΔ * this.scale;
    ᐃᐃᐃ = this.scale * (this.ΔⵠᐃⲆ.ᐃⲆΔ * -a.height);
    Np(zo, a, -ΔⲆᐃ / 4, -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
    if (this.action & 2) {
      if (this.ᐃΔᐃ.ⵠⵠᐃ() && this.ᐃΔᐃ.ⵠⲆⲆ == 0) {
        this.action -= 2;
      }
      zo.globalAlpha = 0.6 - this.ᐃΔᐃ.ᐃⲆΔ;
      var a = ᐃΔ[1092];
      Np(zo, a, -ΔⲆᐃ / 4, -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
      zo.globalAlpha = 1;
    }
    a = this.info === 0 ? ᐃΔ[1087][Qx.time] : ᐃΔ[1086][Qx.time];
    ΔⲆᐃ = -a.width * this.ΔⵠᐃⲆ.ᐃⲆΔ * this.scale;
    ᐃᐃᐃ = this.scale * (this.ΔⵠᐃⲆ.ᐃⲆΔ * -a.height);
    zo.save();
    zo.translate(So * -40, So * 10);
    zo.rotate(this.rotate.ᐃⲆΔ);
    Np(zo, a, -ΔⲆᐃ * So / 4, So * -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
    if (this.action & 2) {
      zo.globalAlpha = 0.6 - this.ᐃΔᐃ.ᐃⲆΔ;
      a = ᐃΔ[1093];
      Np(zo, a, So * -ΔⲆᐃ / 4, -ᐃᐃᐃ * So / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
      zo.globalAlpha = 1;
    }
    zo.restore();
    a = this.info === 0 ? ᐃΔ[1090][Qx.time] : ᐃΔ[1089][Qx.time];
    zo.save();
    zo.translate(So * 40, So * 10);
    zo.rotate(-this.rotate.ᐃⲆΔ);
    Np(zo, a, So * -ΔⲆᐃ / 4, -ᐃᐃᐃ * So / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
    if (this.action & 2) {
      zo.globalAlpha = 0.6 - this.ᐃΔᐃ.ᐃⲆΔ;
      a = ᐃΔ[1094];
      Np(zo, a, So * -ΔⲆᐃ / 4, So * -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
      zo.globalAlpha = 1;
    }
    zo.restore();
    zo.restore();
  }
  function Tv() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    this.ⲆΔᐃⲆᐃ.ⵠⵠᐃ();
    ⵠⵠ = ᐃΔ[526][Qx.time];
    ΔⲆᐃ = this.ⲆΔᐃⲆᐃ.ᐃⲆΔ * -ⵠⵠ.width;
    ᐃᐃᐃ = -ⵠⵠ.height * this.ⲆΔᐃⲆᐃ.ᐃⲆΔ;
    Np(zo, ⵠⵠ, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
    zo.restore();
  }
  function Uv() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    if (this.ᐃΔᐃ.ⵠⵠᐃ) {
      if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && Ij == this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ) {
        this.ᐃΔᐃ.ⵠⵠᐃ = false;
      }
      var b = Yx * (1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * 600 * So;
      var c = Math.sin(this.ᐃΔᐃ.angle - this.angle) * b;
      var d = b * Math.cos(this.ᐃΔᐃ.angle - this.angle);
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      zo.rotate(this.angle);
      this.ⲆⲆⵠⵠ.ⵠⵠᐃ();
      if (this.info & 16) {
        var f = ᐃΔ[970][Qx.time];
      } else {
        f = ᐃΔ[208][Qx.time];
      }
      var g = -f.width * this.ⲆⲆⵠⵠ.ᐃⲆΔ;
      var a = -f.height * this.ⲆⲆⵠⵠ.ᐃⲆΔ;
      Np(zo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      if (this.info & 16) {
        f = ᐃΔ[971][Qx.time];
      } else {
        f = ᐃΔ[209][Qx.time];
      }
      zo.translate(0, f.height / 2);
      Np(zo, f, c - f.width / 2, -f.height + d);
    }
    zo.restore();
  }
  function Vv() {
    if (this.ᐃΔᐃ.ⵠⵠᐃ) {
      var a = (1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * Yx * 600 * So;
      var b = Math.sin(this.ᐃΔᐃ.angle - this.angle) * a;
      var c = a * Math.cos(this.ᐃΔᐃ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Yx * 0.5) % (Math.PI * 2);
    }
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x + b, Rx.ⵠⵠΔ.y + this.y + c);
    zo.save();
    zo.rotate(this.rotate);
    ⵠⵠ = ᐃΔ[641][Qx.time];
    Np(zo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    zo.restore();
    zo.save();
    zo.rotate(this.ᐃΔᐃᐃᐃⲆⵠⲆⵠ);
    ⵠⵠ = ᐃΔ[642][Qx.time];
    Np(zo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    zo.restore();
    zo.restore();
  }
  function Wv(f, e, i, j, k, n, a, o, p) {
    if ($q === o) {
      o = 0;
    }
    for (var h = f; h <= e; h++) {
      for (var q = i; q <= j; q++) {
        var r = Jx.ΔⲆΔᐃ[h][q];
        if (r !== undefined && r[n] !== undefined) {
          var t = r[n];
          var w = ᐃΔ[k][Qx.time][t.ᐃⲆⵠᐃᐃΔΔ];
          Np(zo, w, Rx.ⵠⵠΔ.x + t.x - w.width / (ΔᐃⲆⵠⵠ * 4), Rx.ⵠⵠΔ.y + t.y - w.height / (ΔᐃⲆⵠⵠ * 4), w.width / (ΔᐃⲆⵠⵠ * 2), w.height / (ΔᐃⲆⵠⵠ * 2));
          if (Px.ᐃᐃΔΔⵠ) {
            var x = 2147483648;
            var y = ((h * 1000 + q) * 1103515245 + 12345) % x / x;
            if (y < 0.2) {
              y = Math.floor(y * 5 * ᐃΔ[1025][Qx.time][t.ᐃⲆⵠᐃᐃΔΔ].length);
              w = ᐃΔ[1025][Qx.time][t.ᐃⲆⵠᐃᐃΔΔ][y];
              Np(zo, w, Rx.ⵠⵠΔ.x + t.x - w.width / (ΔᐃⲆⵠⵠ * 4), Rx.ⵠⵠΔ.y + t.y - w.height / (ΔᐃⲆⵠⵠ * 4), w.width / (ΔᐃⲆⵠⵠ * 2), w.height / (ΔᐃⲆⵠⵠ * 2));
            } else if (t.ΔΔᐃᐃΔᐃⲆ !== 0) {
              w = ᐃΔ[1026][Qx.time];
              var z = (ov + h % 2 * 30) % 60;
              zo.globalAlpha = z < 30 ? z / 30 : 1 - (z - 30) / 30;
              Np(zo, w, Rx.ⵠⵠΔ.x + t.x - w.width / (ΔᐃⲆⵠⵠ * 4), Rx.ⵠⵠΔ.y + t.y - w.height / (ΔᐃⲆⵠⵠ * 4) - 30 + z, w.width / (ΔᐃⲆⵠⵠ * 2), w.height / (ΔᐃⲆⵠⵠ * 2));
              zo.globalAlpha = 1;
            }
          }
        }
      }
    }
  }
  function Xv(b) {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    this.ⲆⲆⵠⵠ.ⵠⵠᐃ();
    zo.globalAlpha = 0.3;
    var c = ᐃΔ[282][Qx.time];
    var d = -c.width * this.ⲆⲆⵠⵠ.ᐃⲆΔ;
    var e = -c.height * this.ⲆⲆⵠⵠ.ᐃⲆΔ;
    Np(zo, c, -d / 2, -e / 2, d, e);
    zo.globalAlpha = 1;
    if (this.ᐃΔᐃ.ⵠⵠᐃ) {
      if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ == 0) {
        this.ᐃΔᐃ.ⵠⵠᐃ = false;
      }
      var f = Yx * (1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * 600 * So;
      var g = Math.sin(this.ᐃΔᐃ.angle - this.angle) * f;
      var h = Math.cos(this.ᐃΔᐃ.angle - this.angle) * f;
    } else {
      g = 0;
      h = 0;
    }
    c = ᐃΔ[b][Qx.time];
    Np(zo, c, -c.width / 2 + g, -c.height / 2 + h);
    zo.restore();
  }
  function Yv() {
    if (this.info !== 10) {
      for (var b = this.info & 15, c = 0; c < b; c++) {
        this.ᐃⵠⵠᐃ[c].ⲆⵠⵠΔ(207, this.x, this.y);
      }
      zo.save();
      zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
      zo.rotate(this.angle);
      if (this.ᐃΔᐃ.ⵠⵠᐃ) {
        if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ == 0) {
          this.ᐃΔᐃ.ⵠⵠᐃ = false;
        }
        var d = (1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * Yx * 600 * So;
        var e = Math.sin(this.ᐃΔᐃ.angle - this.angle) * d;
        var f = Math.cos(this.ᐃΔᐃ.angle - this.angle) * d;
      } else {
        e = 0;
        f = 0;
      }
      if (this.info & 16) {
        var g = ᐃΔ[958][Qx.time];
      } else {
        g = ᐃΔ[957][Qx.time];
      }
      Np(zo, g, -g.width / 2 + e, -g.width / 2 + f);
      zo.restore();
    }
  }
  function Zv() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    var a = ⲆⵠΔⵠ.ᐃⵠⲆⲆ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + Yx / 2, 1.8) : Math.max(this.scale - Yx, 1);
    this.ΔⵠᐃⲆ.ⵠⵠᐃ();
    this.rotate.ⵠⵠᐃ();
    this.Δᐃᐃⵠ = a < 350 ? Math.max(0, this.Δᐃᐃⵠ - Yx * 2.2) : Math.min(1, this.Δᐃᐃⵠ + Yx * 2.2);
    b = (this.info & 1) === 0 ? ᐃΔ[1113][Qx.time] : ᐃΔ[1114][Qx.time];
    ΔⲆᐃ = -b.width * this.ΔⵠᐃⲆ.ᐃⲆΔ * this.scale;
    ᐃᐃᐃ = this.scale * (-b.height * this.ΔⵠᐃⲆ.ᐃⲆΔ);
    zo.globalAlpha = 1 - this.Δᐃᐃⵠ;
    Np(zo, b, -ΔⲆᐃ / 4, -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
    b = (this.info & 1) === 0 ? ᐃΔ[235][Qx.time] : ᐃΔ[1098][Qx.time];
    ΔⲆᐃ = this.scale * (-b.width * this.ΔⵠᐃⲆ.ᐃⲆΔ);
    ᐃᐃᐃ = this.scale * (this.ΔⵠᐃⲆ.ᐃⲆΔ * -b.height);
    zo.globalAlpha = this.Δᐃᐃⵠ;
    Np(zo, b, -ΔⲆᐃ / 4, -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
    if (this.action & 2) {
      if (this.ᐃΔᐃ.ⵠⵠᐃ() && this.ᐃΔᐃ.ⵠⲆⲆ == 0) {
        this.action -= 2;
      }
      zo.globalAlpha = (0.6 - this.ᐃΔᐃ.ᐃⲆΔ) * (1 - this.Δᐃᐃⵠ);
      var b = ᐃΔ[1115];
      ΔⲆᐃ = -b.width * this.ΔⵠᐃⲆ.ᐃⲆΔ * this.scale;
      ᐃᐃᐃ = this.ΔⵠᐃⲆ.ᐃⲆΔ * -b.height * this.scale;
      Np(zo, b, -ΔⲆᐃ / 4, -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
      zo.globalAlpha = (0.6 - this.ᐃΔᐃ.ᐃⲆΔ) * this.Δᐃᐃⵠ;
      b = ᐃΔ[1107];
      ΔⲆᐃ = this.scale * (-b.width * this.ΔⵠᐃⲆ.ᐃⲆΔ);
      ᐃᐃᐃ = this.scale * (-b.height * this.ΔⵠᐃⲆ.ᐃⲆΔ);
      Np(zo, b, -ΔⲆᐃ / 4, -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
      zo.globalAlpha = 1;
    }
    b = this.info & 1 ? ᐃΔ[1101][Qx.time] : ᐃΔ[1102][Qx.time];
    ΔⲆᐃ = -b.width * this.ΔⵠᐃⲆ.ᐃⲆΔ * this.scale;
    ᐃᐃᐃ = this.scale * (this.ΔⵠᐃⲆ.ᐃⲆΔ * -b.height);
    zo.save();
    zo.translate(So * -20, So * 0);
    zo.rotate(this.rotate.ᐃⲆΔ);
    zo.globalAlpha = this.Δᐃᐃⵠ;
    Np(zo, b, So * -ΔⲆᐃ / 4, So * -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
    if (this.action & 2) {
      zo.globalAlpha = (0.6 - this.ᐃΔᐃ.ᐃⲆΔ) * this.Δᐃᐃⵠ;
      b = ᐃΔ[1108];
      Np(zo, b, -ΔⲆᐃ * So / 4, So * -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
      zo.globalAlpha = 1;
    }
    zo.restore();
    b = this.info & 1 ? ᐃΔ[1104][Qx.time] : ᐃΔ[1105][Qx.time];
    zo.save();
    zo.translate(So * 20, So * 0);
    zo.rotate(-this.rotate.ᐃⲆΔ);
    zo.globalAlpha = this.Δᐃᐃⵠ;
    Np(zo, b, -ΔⲆᐃ * So / 4, So * -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
    if (this.action & 2) {
      zo.globalAlpha = this.Δᐃᐃⵠ * (0.6 - this.ᐃΔᐃ.ᐃⲆΔ);
      b = ᐃΔ[1109];
      Np(zo, b, -ΔⲆᐃ * So / 4, -ᐃᐃᐃ * So / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
      zo.globalAlpha = 1;
    }
    zo.globalAlpha = 1;
    zo.restore();
    zo.restore();
  }
  function $v(a, b) {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    this.ΔⵠᐃⲆ.ⵠⵠᐃ();
    c = ᐃΔ[a][Qx.time];
    ΔⲆᐃ = -c.width * this.ΔⵠᐃⲆ.ᐃⲆΔ;
    ᐃᐃᐃ = this.ΔⵠᐃⲆ.ᐃⲆΔ * -c.height;
    Np(zo, c, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
    if (this.action & 2) {
      if (this.ᐃΔᐃ.ⵠⵠᐃ() && va == this.ᐃΔᐃ.ⵠⲆⲆ) {
        this.action -= 2;
      }
      zo.globalAlpha = 0.6 - this.ᐃΔᐃ.ᐃⲆΔ;
      var c = ᐃΔ[b];
      Np(zo, c, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
      zo.globalAlpha = 1;
    }
    zo.restore();
  }
  function _v(a) {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    this.ΔⵠᐃⲆ.ⵠⵠᐃ();
    ⵠⵠ = ᐃΔ[a][Qx.time];
    ΔⲆᐃ = -ⵠⵠ.width * this.ΔⵠᐃⲆ.ᐃⲆΔ;
    ᐃᐃᐃ = -ⵠⵠ.height * this.ΔⵠᐃⲆ.ᐃⲆΔ;
    Np(zo, ⵠⵠ, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
    zo.restore();
  }
  function aw() {
    if (this.ᐃΔᐃ.ⵠⵠᐃ) {
      if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ == 0) {
        this.ᐃΔᐃ.ⵠⵠᐃ = false;
      }
      var a = Yx * (1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * 600 * So;
      var b = a * Math.sin(this.ᐃΔᐃ.angle - this.angle);
      var c = Math.cos(this.ᐃΔᐃ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    zo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    zo.translate(Rx.ⵠⵠΔ.x + this.x + b, Rx.ⵠⵠΔ.y + this.y + c);
    zo.rotate(this.angle);
    ⵠⵠ = ᐃΔ[156][Qx.time];
    Np(zo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Yx * 3) % (Math.PI * 2);
    }
    zo.rotate(this.rotate);
    ⵠⵠ = ᐃΔ[1210][Qx.time];
    Np(zo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    zo.restore();
  }
  function bw() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    if (ⲆⵠΔⵠ.ᐃⵠⲆⲆ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + Yx / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - Yx, 1);
    }
    this.ΔⵠᐃⲆ.ⵠⵠᐃ();
    this.rotate.ⵠⵠᐃ();
    a = ᐃΔ[450][Qx.time];
    ΔⲆᐃ = this.scale * (-a.width * this.ΔⵠᐃⲆ.ᐃⲆΔ);
    ᐃᐃᐃ = this.scale * (-a.height * this.ΔⵠᐃⲆ.ᐃⲆΔ);
    Np(zo, a, -ΔⲆᐃ / 4, -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
    if (this.action & 2) {
      if (this.ᐃΔᐃ.ⵠⵠᐃ() && this.ᐃΔᐃ.ⵠⲆⲆ == 0) {
        this.action -= 2;
      }
      zo.globalAlpha = 0.6 - this.ᐃΔᐃ.ᐃⲆΔ;
      var a = ᐃΔ[464];
      Np(zo, a, -ΔⲆᐃ / 4, -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
      zo.globalAlpha = 1;
    }
    a = ᐃΔ[453][Qx.time];
    ΔⲆᐃ = this.ΔⵠᐃⲆ.ᐃⲆΔ * -a.width * this.scale;
    ᐃᐃᐃ = this.scale * (-a.height * this.ΔⵠᐃⲆ.ᐃⲆΔ);
    zo.save();
    zo.translate(So * -60, So * 20);
    zo.rotate(this.rotate.ᐃⲆΔ);
    Np(zo, a, So * -ΔⲆᐃ / 4, -ᐃᐃᐃ * So / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
    if (this.action & 2) {
      zo.globalAlpha = 0.6 - this.ᐃΔᐃ.ᐃⲆΔ;
      a = ᐃΔ[468];
      Np(zo, a, So * -ΔⲆᐃ / 4, So * -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
      zo.globalAlpha = 1;
    }
    zo.restore();
    a = ᐃΔ[454][Qx.time];
    zo.save();
    zo.translate(So * 60, So * 20);
    zo.rotate(-this.rotate.ᐃⲆΔ);
    Np(zo, a, So * -ΔⲆᐃ / 4, So * -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
    if (this.action & 2) {
      zo.globalAlpha = 0.6 - this.ᐃΔᐃ.ᐃⲆΔ;
      a = ᐃΔ[469];
      Np(zo, a, So * -ΔⲆᐃ / 4, -ᐃᐃᐃ * So / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
      zo.globalAlpha = 1;
    }
    zo.restore();
    zo.restore();
  }
  function cw() {
    if (this.ᐃΔᐃ.ⵠⵠᐃ) {
      if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ == Zq) {
        this.ᐃΔᐃ.ⵠⵠᐃ = false;
      }
      var a = (1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * Yx * 600 * So;
      var b = Math.sin(this.ᐃΔᐃ.angle - this.angle) * a;
      var c = a * Math.cos(this.ᐃΔᐃ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x + b, Rx.ⵠⵠΔ.y + this.y + c);
    zo.rotate(this.angle);
    ⵠⵠ = ᐃΔ[135][Qx.time];
    Np(zo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    zo.restore();
  }
  function dw() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    this.ⲆΔᐃⲆᐃ.ⵠⵠᐃ();
    ⵠⵠ = ᐃΔ[1192][Qx.time];
    ΔⲆᐃ = this.ⲆΔᐃⲆᐃ.ᐃⲆΔ * -ⵠⵠ.width;
    ᐃᐃᐃ = this.ⲆΔᐃⲆᐃ.ᐃⲆΔ * -ⵠⵠ.height;
    Np(zo, ⵠⵠ, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
    zo.restore();
  }
  function ew(a, b) {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    c = ᐃΔ[a][Qx.time];
    ΔⲆᐃ = -c.width;
    ᐃᐃᐃ = -c.height;
    Np(zo, c, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
    if (this.action & 2) {
      if (this.ᐃΔᐃ.ⵠⵠᐃ() && this.ᐃΔᐃ.ⵠⲆⲆ == 0) {
        this.action -= 2;
      }
      zo.globalAlpha = 0.6 - this.ᐃΔᐃ.ᐃⲆΔ;
      var c = ᐃΔ[b];
      Np(zo, c, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
      zo.globalAlpha = 1;
    }
    zo.restore();
  }
  function fw() {
    if (this.ᐃΔᐃ.ⵠⵠᐃ) {
      if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && gr == this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ) {
        this.ᐃΔᐃ.ⵠⵠᐃ = false;
      }
      var a = So * (Yx * (1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * 600);
      var b = a * Math.sin(this.ᐃΔᐃ.angle - this.angle);
      var c = Math.cos(this.ᐃΔᐃ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    zo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    zo.translate(Rx.ⵠⵠΔ.x + this.x + b, Rx.ⵠⵠΔ.y + this.y + c);
    zo.rotate(this.angle);
    ⵠⵠ = ᐃΔ[155][Qx.time];
    Np(zo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Yx * 3) % (Math.PI * 2);
    }
    zo.rotate(this.rotate);
    ⵠⵠ = ᐃΔ[1206][Qx.time];
    Np(zo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    zo.restore();
  }
  function gw() {
    if (this.ᐃΔᐃ.ⵠⵠᐃ) {
      if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ == zk) {
        this.ᐃΔᐃ.ⵠⵠᐃ = false;
      }
      var a = So * (Yx * (1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * 600);
      var b = a * Math.sin(this.ᐃΔᐃ.angle - this.angle);
      var c = a * Math.cos(this.ᐃΔᐃ.angle - this.angle);
    } else {
      b = 0;
      c = 0;
    }
    zo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    zo.translate(Rx.ⵠⵠΔ.x + this.x + b, Rx.ⵠⵠΔ.y + this.y + c);
    zo.rotate(this.angle);
    ⵠⵠ = ᐃΔ[157][Qx.time];
    Np(zo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Yx * 3) % (Math.PI * 2);
    }
    zo.rotate(this.rotate);
    ⵠⵠ = ᐃΔ[1214][Qx.time];
    Np(zo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    zo.restore();
  }
  function hw() {
    if (this.ᐃΔᐃ.ⵠⵠᐃ) {
      if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ == 0) {
        this.ᐃΔᐃ.ⵠⵠᐃ = false;
      }
      var a = So * ((1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * Yx * 600);
      var b = Math.sin(this.ᐃΔᐃ.angle - this.angle) * a;
      var c = Math.cos(this.ᐃΔᐃ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    this.ᐃⵠⵠⵠᐃΔⲆ = (this.ᐃⵠⵠⵠᐃΔⲆ + Yx * 3) % (Math.PI * 2);
    this.ⵠᐃΔᐃⲆΔⲆ = (this.ⵠᐃΔᐃⲆΔⲆ - Yx * 3) % (Math.PI * 2);
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x + b, Rx.ⵠⵠΔ.y + this.y + c);
    zo.save();
    zo.rotate(this.angle);
    ⵠⵠ = ᐃΔ[152][Qx.time];
    Np(zo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    zo.restore();
    zo.save();
    zo.rotate(this.ᐃⵠⵠⵠᐃΔⲆ);
    ⵠⵠ = ᐃΔ[1194][Qx.time];
    Np(zo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    zo.restore();
    zo.save();
    zo.rotate(this.ⵠᐃΔᐃⲆΔⲆ);
    ⵠⵠ = ᐃΔ[1193][Qx.time];
    Np(zo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    zo.restore();
    zo.restore();
  }
  function iw(a, b) {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    this.ΔⵠᐃⲆ.ⵠⵠᐃ();
    c = ᐃΔ[a][Qx.time];
    ΔⲆᐃ = this.ΔⵠᐃⲆ.ᐃⲆΔ * -c.width;
    ᐃᐃᐃ = this.ΔⵠᐃⲆ.ᐃⲆΔ * -c.height;
    Np(zo, c, -ΔⲆᐃ / 4, -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
    if (this.action & 2) {
      if (this.ᐃΔᐃ.ⵠⵠᐃ() && this.ᐃΔᐃ.ⵠⲆⲆ == 0) {
        this.action -= 2;
      }
      zo.globalAlpha = 0.6 - this.ᐃΔᐃ.ᐃⲆΔ;
      var c = ᐃΔ[b];
      Np(zo, c, -ΔⲆᐃ / 4, -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
      zo.globalAlpha = 1;
    }
    zo.restore();
  }
  function jw() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    if (this.ᐃΔᐃ.ⵠⵠᐃ) {
      if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && gn == this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ) {
        this.ᐃΔᐃ.ⵠⵠᐃ = false;
      }
      var b = Yx * (1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * 600 * So;
      var c = b * Math.sin(this.ᐃΔᐃ.angle - this.angle);
      var d = Math.cos(this.ᐃΔᐃ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      zo.rotate(this.angle);
      this.ⲆⲆⵠⵠ.ⵠⵠᐃ();
      if (this.info & 16) {
        var f = ᐃΔ[668][Qx.time];
      } else {
        f = ᐃΔ[132][Qx.time];
      }
      var g = -f.width * this.ⲆⲆⵠⵠ.ᐃⲆΔ;
      var a = this.ⲆⲆⵠⵠ.ᐃⲆΔ * -f.height;
      Np(zo, f, -g / 2 + c, -a / 2 + d, g, a);
    } else {
      this.ΔⲆᐃΔⵠΔΔ.ⵠⵠᐃ();
      if (this.info & 16) {
        f = ᐃΔ[638][Qx.time];
      } else {
        f = ᐃΔ[134][Qx.time];
      }
      zo.translate(0, f.height / 2);
      zo.rotate(this.ΔⲆᐃΔⵠΔΔ.ᐃⲆΔ);
      Np(zo, f, c - f.width / 2, -f.height + d);
    }
    zo.restore();
  }
  function kw() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    if (this.ᐃΔᐃ.ⵠⵠᐃ) {
      if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && Hs == this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ) {
        this.ᐃΔᐃ.ⵠⵠᐃ = false;
      }
      var a = So * (Yx * (1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * 600);
      var b = Math.sin(this.ᐃΔᐃ.angle - this.angle) * a;
      var c = Math.cos(this.ᐃΔᐃ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    if (this.action == 2) {
      ⵠⵠ = ᐃΔ[407][Qx.time];
    } else {
      ⵠⵠ = ᐃΔ[119][Qx.time];
    }
    Np(zo, ⵠⵠ, -ⵠⵠ.width / 2 + b, -ⵠⵠ.height / 2 + c);
    zo.restore();
  }
  function lw() {
    if (this.ᐃΔᐃ.ⵠⵠᐃ) {
      if (this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⵠᐃ() && Hs == this.ᐃΔᐃ.ΔⲆⲆⵠ.ⵠⲆⲆ) {
        this.ᐃΔᐃ.ⵠⵠᐃ = rk;
      }
      var a = (1 - this.ᐃΔᐃ.ΔⲆⲆⵠ.ᐃⲆΔ) * Yx * 600 * So;
      var b = Math.sin(this.ᐃΔᐃ.angle - this.angle) * a;
      var c = Math.cos(this.ᐃΔᐃ.angle - this.angle) * a;
    } else {
      b = 0;
      c = 0;
    }
    zo.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - 1;
    }
    zo.translate(Rx.ⵠⵠΔ.x + this.x + b, Rx.ⵠⵠΔ.y + this.y + c);
    zo.rotate(this.angle);
    ⵠⵠ = ᐃΔ[154][Qx.time];
    Np(zo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + Yx * 3) % (Math.PI * 2);
    }
    zo.rotate(this.rotate);
    ⵠⵠ = ᐃΔ[1202][Qx.time];
    Np(zo, ⵠⵠ, -ⵠⵠ.width / 2, -ⵠⵠ.height / 2);
    zo.restore();
  }
  function mw() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    zo.rotate(this.angle);
    if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.ΔⲆⲆᐃᐃ.length == 0 || ns.ⵠΔⵠⵠⵠⲆⵠ >= this.ΔⲆⲆᐃᐃ[this.ΔⲆⲆᐃᐃ.length - 1])) {
      this.ΔⲆⲆᐃᐃ.push(ns.ΔΔⲆΔⵠⵠΔ);
    }
    for (var a = 0; a < this.ΔⲆⲆᐃᐃ.length; a++) {
      this.ΔⲆⲆᐃᐃ[a] = Math.max(0, this.ΔⲆⲆᐃᐃ[a] - Yx * ns.ΔΔⲆᐃΔⵠⵠ);
      zo.globalAlpha = this.ΔⲆⲆᐃᐃ[a] / 1.3;
      var b = (1 - this.ΔⲆⲆᐃᐃ[a]) * 40;
      var c = (1 - this.ΔⲆⲆᐃᐃ[a]) * 35 + 10;
      hd(zo, So * -68 + Math.sin(-this.angle - Math.PI / 2) * b, So * -20 + Math.cos(-this.angle - Math.PI / 2) * b, c);
      od(zo, "#333333");
    }
    zo.globalAlpha = 1;
    if (this.ΔⲆⲆᐃᐃ.length > 0 && this.ΔⲆⲆᐃᐃ[0] === 0) {
      this.ΔⲆⲆᐃᐃ.shift();
    }
    zo.restore();
  }
  function nw(a) {
    if (a > 0) {
      var b = ᐃΔ[a][Qx.time];
      switch (a) {
        case 58:
          Nw(a, b, -b.width / 2 + So * 2, -b.height / 2 - So * 5);
          break;
        case 10:
          Nw(a, b, -b.width / 2, -b.height / 2 - So * 18);
          break;
        case 11:
          Nw(a, b, -b.width / 2, -b.height / 2 - So * 10);
          break;
        case 23:
          Nw(a, b, -b.width / 2, -b.height / 2 - So * 19);
          break;
        case 24:
          af(a, b, -b.width / 4, -b.height / 4 - So * 20);
          break;
        case 25:
          Nw(a, b, -b.width / 2 - So * 1, -b.height / 2 - So * 23);
          break;
        case 26:
          Nw(a, b, -b.width / 2, -b.height / 2 - So * 5);
          break;
        case 27:
          Nw(a, b, -b.width / 2, -b.height / 2 - So * 2);
          break;
        case 43:
          Nw(a, b, -b.width / 2 + So * 1.5, -b.height / 2 - So * 1);
          break;
        case 44:
        case 20:
        case 21:
        case 22:
        case 80:
        case 81:
        case 82:
        case 60:
        case 90:
        case 88:
        case 87:
          af(a, b, -b.width / 4, -b.height / 4 + So * 2);
          break;
        case 41:
        case 42:
          Nw(a, b, -b.width / 2 - So * 5, -b.height / 2 - So * 2);
          break;
        case 40:
          Nw(a, b, -b.width / 2, -b.height / 2 - So * 2);
          break;
        case 85:
          Nw(a, b, -b.width / 2, -b.height / 2 - So * 2);
          break;
        case 48:
          Nw(a, b, -b.width / 2, -b.height / 2 - So * 2);
          break;
        case 47:
          Nw(a, b, -b.width / 2 + So * 2, -b.height / 2);
          break;
        case 59:
          Nw(a, b, -b.width / 2, -b.height / 2 - So * 5);
          break;
        case 77:
        case 78:
        case 79:
          Nw(a, b, -b.width / 2 - So * 1, -b.height / 2);
          break;
        case 83:
          Nw(a, b, -b.width / 2, -b.height / 2 + So * 2);
          break;
        case 84:
        case 86:
          Nw(a, b, -b.width / 2, -b.height / 2 + So * 8);
          break;
        case 61:
          Nw(a, b, -b.width / 2, -b.height / 2 - So * 4);
      }
    }
  }
  function ow() {
    if (!this.ᐃⵠⲆᐃⲆ && this.ᐃΔΔⵠⲆ !== 0) {
      if (this.x != this.r.x || this.y != this.r.y) {
        var a = (ⲆⵠΔⵠ.ᐃⲆᐃᐃⲆΔᐃ(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (Math.PI * 2);
        this.ᐃⵠΔΔΔ = ⲆⵠΔⵠ.ΔⲆⲆΔΔΔⵠ(a, this.ᐃⵠΔΔΔ);
        this.ᐃⵠΔΔΔ = ⲆⵠΔⵠ.ΔΔᐃⲆⵠ(this.ᐃⵠΔΔΔ, a, 0.018);
      }
      zo.save();
      zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
      zo.rotate(this.ᐃⵠΔΔΔ);
      if (this.ᐃΔΔⵠⲆ === 223) {
        if (this.ⵠⵠⵠΔⵠ > 50 || this.ⵠᐃᐃⵠⲆ > 0) {
          if (this.ⵠⵠⵠΔⵠ > 50) {
            this.ⵠᐃᐃⵠⲆ = Math.min(1, this.ⵠᐃᐃⵠⲆ + Yx);
          } else {
            this.ⵠᐃᐃⵠⲆ = Math.max(0, this.ⵠᐃᐃⵠⲆ - Yx);
          }
          zo.globalAlpha = this.ⵠᐃᐃⵠⲆ;
          var b = ᐃΔ[225][Qx.time];
          af(225, b, -b.width / 4, -b.height / 4);
          zo.globalAlpha = 1;
        }
        b = ᐃΔ[223][Qx.time];
        af(223, b, -b.width / 4, -b.height / 4);
      } else if (this.ᐃΔΔⵠⲆ === 229) {
        this.ΔᐃΔᐃⲆ = ⲆⵠΔⵠ.ΔΔᐃⲆⵠ(this.ΔᐃΔᐃⲆ, this.ⵠⵠⵠΔⵠ, 0.018);
        this.ⵠⵠⲆⲆⲆΔᐃ.ⵠⵠᐃ();
        if (this.ⵠⵠⵠΔⵠ > 85) {
          this.ⵠᐃᐃⵠⲆ = Math.min(1, this.ⵠᐃᐃⵠⲆ + Yx / 4);
        } else {
          this.ⵠᐃᐃⵠⲆ = Math.max(0.1, this.ⵠᐃᐃⵠⲆ - Yx);
        }
        b = ᐃΔ[1100][Qx.time];
        af(1100, b, -b.width / 4, -b.height / 4);
        b = ᐃΔ[1103][Qx.time];
        ΔⲆᐃ = -b.width;
        ᐃᐃᐃ = -b.height;
        zo.save();
        zo.translate(So * -20, So * -20);
        zo.rotate(this.ⵠⵠⲆⲆⲆΔᐃ.ᐃⲆΔ * this.ⵠᐃᐃⵠⲆ);
        Np(zo, b, -ΔⲆᐃ / 4, -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
        zo.restore();
        b = ᐃΔ[1106][Qx.time];
        zo.save();
        zo.translate(So * 20, So * -20);
        zo.rotate(-this.ⵠⵠⲆⲆⲆΔᐃ.ᐃⲆΔ * this.ⵠᐃᐃⵠⲆ);
        Np(zo, b, -ΔⲆᐃ / 4, -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
        zo.restore();
      } else if (this.ᐃΔΔⵠⲆ === 228) {
        this.ΔᐃΔᐃⲆ = ⲆⵠΔⵠ.ΔΔᐃⲆⵠ(this.ΔᐃΔᐃⲆ, this.ⵠⵠⵠΔⵠ, 0.018);
        this.ⵠⵠⲆⲆⲆΔᐃ.ⵠⵠᐃ();
        if (this.ⵠⵠⵠΔⵠ > 85) {
          this.ⵠᐃᐃⵠⲆ = Math.min(1, this.ⵠᐃᐃⵠⲆ + Yx / 4);
        } else {
          this.ⵠᐃᐃⵠⲆ = Math.max(0.1, this.ⵠᐃᐃⵠⲆ - Yx);
        }
        b = ᐃΔ[1085][Qx.time];
        af(1085, b, -b.width / 4, -b.height / 4);
        b = ᐃΔ[1088][Qx.time];
        ΔⲆᐃ = -b.width;
        ᐃᐃᐃ = -b.height;
        zo.save();
        zo.translate(So * -40, So * -45);
        zo.rotate(this.ⵠᐃᐃⵠⲆ * this.ⵠⵠⲆⲆⲆΔᐃ.ᐃⲆΔ);
        Np(zo, b, -ΔⲆᐃ / 4, -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
        zo.restore();
        b = ᐃΔ[1091][Qx.time];
        zo.save();
        zo.translate(So * 40, So * -45);
        zo.rotate(-this.ⵠⵠⲆⲆⲆΔᐃ.ᐃⲆΔ * this.ⵠᐃᐃⵠⲆ);
        Np(zo, b, -ΔⲆᐃ / 4, -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
        zo.restore();
      } else if (this.ᐃΔΔⵠⲆ === 227) {
        this.ΔᐃΔᐃⲆ = ⲆⵠΔⵠ.ΔΔᐃⲆⵠ(this.ΔᐃΔᐃⲆ, this.ⵠⵠⵠΔⵠ, 0.018);
        this.ⵠⵠⲆⲆⲆΔᐃ.ⵠⵠᐃ();
        if (this.ⵠⵠⵠΔⵠ > 85) {
          this.ⵠᐃᐃⵠⲆ = Math.min(1, this.ⵠᐃᐃⵠⲆ + Yx / 4);
        } else {
          this.ⵠᐃᐃⵠⲆ = Math.max(0.1, this.ⵠᐃᐃⵠⲆ - Yx);
        }
        b = ᐃΔ[1070][Qx.time];
        af(1070, b, -b.width / 4, -b.height / 4);
        b = ᐃΔ[1073][Qx.time];
        ΔⲆᐃ = -b.width;
        ᐃᐃᐃ = -b.height;
        zo.save();
        zo.translate(So * -40, So * -45);
        zo.rotate(this.ⵠᐃᐃⵠⲆ * this.ⵠⵠⲆⲆⲆΔᐃ.ᐃⲆΔ);
        Np(zo, b, -ΔⲆᐃ / 4, -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
        zo.restore();
        b = ᐃΔ[1076][Qx.time];
        zo.save();
        zo.translate(So * 40, So * -45);
        zo.rotate(this.ⵠᐃᐃⵠⲆ * -this.ⵠⵠⲆⲆⲆΔᐃ.ᐃⲆΔ);
        Np(zo, b, -ΔⲆᐃ / 4, -ᐃᐃᐃ / 4, ΔⲆᐃ / 2, ᐃᐃᐃ / 2);
        zo.restore();
      } else if (this.ᐃΔΔⵠⲆ === 91) {
        this.ΔᐃΔᐃⲆ = ⲆⵠΔⵠ.ΔΔᐃⲆⵠ(this.ΔᐃΔᐃⲆ, this.ⵠⵠⵠΔⵠ, 0.018);
        b = ᐃΔ[91][Qx.time];
        af(91, b, -b.width / 4, -b.height / 4);
      } else if (this.ᐃΔΔⵠⲆ === 230) {
        this.ΔᐃΔᐃⲆ = ⲆⵠΔⵠ.ΔΔᐃⲆⵠ(this.ΔᐃΔᐃⲆ, this.ⵠⵠⵠΔⵠ, 0.018);
        b = ᐃΔ[236][Qx.time];
        af(236, b, -b.width / 4, -b.height / 4);
      } else if (this.ᐃΔΔⵠⲆ === 224) {
        b = ᐃΔ[224][Qx.time];
        af(224, b, -b.width / 4, -b.height / 4);
      } else if (this.ᐃΔΔⵠⲆ === 239) {
        b = ᐃΔ[1221][Qx.time];
        if (this.ⵠⵠⵠΔⵠ > 85) {
          this.ⵠᐃᐃⵠⲆ = Math.min(1, this.ⵠᐃᐃⵠⲆ + Yx / 4);
        } else {
          this.ⵠᐃᐃⵠⲆ = Math.max(0, this.ⵠᐃᐃⵠⲆ - Yx);
        }
        this.ⲆΔΔΔⲆ += Yx * 60;
        if (this.ⲆΔΔΔⲆ > 60) {
          this.ⲆΔΔΔⲆ -= 60;
        }
        var c = this.ⵠᐃᐃⵠⲆ * (-6 + (this.ⲆΔΔΔⲆ < 30 ? this.ⲆΔΔΔⲆ / 30 : 1 - (this.ⲆΔΔΔⲆ - 30) / 30) * 12);
        af(1221, b, -b.width / 4, -b.height / 4 + c);
      } else if (this.ᐃΔΔⵠⲆ === 225) {
        b = ᐃΔ[1043][Qx.time];
        if (this.ⵠⵠⵠΔⵠ > 85) {
          this.ⵠᐃᐃⵠⲆ = Math.min(1, this.ⵠᐃᐃⵠⲆ + Yx / 4);
        } else {
          this.ⵠᐃᐃⵠⲆ = Math.max(0, this.ⵠᐃᐃⵠⲆ - Yx);
        }
        this.ⲆΔΔΔⲆ += Yx * 60;
        if (this.ⲆΔΔΔⲆ > 60) {
          this.ⲆΔΔΔⲆ -= 60;
        }
        c = this.ⵠᐃᐃⵠⲆ * ((this.ⲆΔΔΔⲆ < 30 ? this.ⲆΔΔΔⲆ / 30 : 1 - (this.ⲆΔΔΔⲆ - 30) / 30) * 12 - 6);
        af(1043, b, -b.width / 4, -b.height / 4 + c);
      } else if (this.ᐃΔΔⵠⲆ === 226) {
        var d = Math.PI / 2;
        var e = Math.PI / 4;
        b = ᐃΔ[1055][Qx.time];
        if (this.ⵠⵠⵠΔⵠ > 85) {
          this.ⵠᐃᐃⵠⲆ = Math.min(1, this.ⵠᐃᐃⵠⲆ + Yx / 4);
        } else {
          this.ⵠᐃᐃⵠⲆ = Math.max(0, this.ⵠᐃᐃⵠⲆ - Yx);
        }
        this.ⲆΔΔΔⲆ += Yx * 60;
        if (this.ⲆΔΔΔⲆ > 60) {
          this.ⲆΔΔΔⲆ -= 60;
        }
        c = (-6 + (this.ⲆΔΔΔⲆ < 30 ? this.ⲆΔΔΔⲆ / 30 : 1 - (this.ⲆΔΔΔⲆ - 30) / 30) * 12) * this.ⵠᐃᐃⵠⲆ;
        af(1055, b, -b.width / 4 + c, -b.height / 4);
        zo.restore();
        zo.save();
        zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
        zo.rotate(Math.PI + this.ᐃⵠΔΔΔ + e);
        zo.translate(120, c);
        zo.rotate(d);
        b = ᐃΔ[1060][Qx.time];
        ΔⲆᐃ = -b.width;
        ᐃᐃᐃ = -b.height;
        Np(zo, b, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
        zo.restore();
        zo.save();
        zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
        zo.rotate(Math.PI + this.ᐃⵠΔΔΔ + d + e);
        zo.translate(120, c);
        zo.rotate(d);
        b = ᐃΔ[1063][Qx.time];
        ΔⲆᐃ = -b.width;
        ᐃᐃᐃ = -b.height;
        Np(zo, b, -ΔⲆᐃ / 2, -ᐃᐃᐃ / 2, ΔⲆᐃ, ᐃᐃᐃ);
      }
      zo.restore();
    }
  }
  function pw() {
    var c = 0;
    switch (this.right) {
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
        c = 1;
    }
    if (this.ᐃⵠⲆᐃⲆ) {
      for (var f = 0; f < this.bubbles.length; f++) {
        var j = this.bubbles[f];
        if (j.Ⲇᐃᐃᐃⵠ > 0.5) {
          var k = 1 - (j.Ⲇᐃᐃᐃⵠ - 0.5) * 2;
        } else {
          k = j.Ⲇᐃᐃᐃⵠ * 2;
        }
        zo.globalAlpha = k;
        var m = ᐃΔ[540][Qx.time][j.id];
        Np(zo, m, Rx.ⵠⵠΔ.x + j.x - m.width / 2, Rx.ⵠⵠΔ.y + j.y - m.height / 2);
        zo.globalAlpha = 1;
      }
    } else {
      zo.save();
      zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
      Qx.ᐃⲆⵠΔⵠΔᐃΔⵠ(this);
      if (this.action & 16) {
        (function (a) {
          if (a.right >= 0) {
            switch (a.right) {
              case 49:
                zo.save();
                var b = a.attack.ᐃⲆΔ * -3 / Math.PI;
                if (a.attack.ⵠⲆⲆ) {
                  var c = -Math.PI / 3 - (Math.PI / 3 + a.attack.ᐃⲆΔ) / 3;
                } else {
                  c = a.attack.ᐃⲆΔ;
                }
                zo.rotate(a.angle - Math.PI / 2 + c);
                zo.globalAlpha = b / 1.2;
                hd(zo, So * -40, So * 90, So * 5);
                od(zo, "#0B6A84");
                zo.globalAlpha = b / 1.2;
                hd(zo, So * -52, So * 100, So * 8);
                od(zo, "#0B6A84");
                zo.globalAlpha = b / 1.2;
                hd(zo, So * -30, So * 95, So * 4);
                od(zo, "#0B6A84");
                zo.globalAlpha = 1;
                zo.restore();
                break;
              case 46:
              case 50:
              case 51:
              case 52:
                if (a.ΔΔⵠΔⵠⲆⵠ === 1) {
                  break;
                }
                if (a.ⲆᐃⵠΔΔ > 0) {
                  var d = ns.ΔΔⵠΔᐃⲆⲆ[Qx.time];
                } else {
                  d = a.ⵠⵠᐃⵠᐃⲆⵠ > 0 || a.ΔΔᐃΔⵠ > 0 ? ns.ᐃΔⲆⲆΔⵠΔ[Qx.time] : ns.ᐃᐃᐃⲆⲆᐃⵠ[Qx.time];
                }
                b = a.attack.ᐃⲆΔ * -3 / Math.PI;
                if ((c = a.attack.ⵠⲆⲆ ? Math.max(0.5 - b / 2 + 0.5, 0) : Math.max(b / 2, 0)) === 0) {
                  a.ᐃⲆⲆΔⲆⲆⵠ = a.angle;
                }
                zo.save();
                zo.rotate(a.ᐃⲆⲆΔⲆⲆⵠ - Math.PI / 2);
                zo.globalAlpha = b;
                var e = So * 25 + c * 25;
                hd(zo, e, So * 80, So * 15);
                od(zo, d);
                hd(zo, -e, So * 80, So * 15);
                od(zo, d);
                zo.globalAlpha = 1;
                zo.restore();
            }
          }
        })(this);
      }
      zo.save();
      zo.rotate(this.angle - Math.PI / 2);
      if (!(this.action & 16)) {
        if (this.action & 64 || this.ᐃΔΔⵠⲆ !== 0) {
          this.ᐃΔⲆⵠⵠΔⵠ.ⵠⵠᐃ();
        } else if (this.action & 32) {
          this.ΔⵠⲆΔᐃᐃⲆ.ⵠⵠᐃ();
        }
      }
      var p;
      var q = this.ᐃΔⲆⵠⵠΔⵠ.ᐃⲆΔ;
      var v = this.ΔⵠⲆΔᐃᐃⲆ.ᐃⲆΔ;
      if (this.ᐃᐃⲆⵠⵠ === 85) {
        m = ᐃΔ[793][Qx.time];
        p = 793;
      } else if (this.ᐃᐃⲆⵠⵠ === 20) {
        m = ᐃΔ[920][Qx.time];
        p = 920;
      } else if (this.ᐃᐃⲆⵠⵠ === 21) {
        m = ᐃΔ[924][Qx.time];
        p = 924;
      } else if (this.ᐃᐃⲆⵠⵠ === 22) {
        m = ᐃΔ[928][Qx.time];
        p = 928;
      } else if (this.ᐃΔᐃⵠⵠΔᐃ) {
        m = ᐃΔ[822][Qx.time];
        p = 822;
      } else {
        m = ᐃΔ[7][this.ⵠᐃᐃⲆ][Qx.time];
        p = 7;
      }
      Ⲇⵠᐃⵠ = ᐃΔ[286][Qx.time];
      var w = m;
      var h = p;
      if (this.action & 16) {
        if (this.attack.ⵠⵠᐃ() && this.attack.ⵠⲆⲆ == 0) {
          this.ⲆⵠᐃⲆⵠ = !this.ⲆⵠᐃⲆⵠ;
          this.action -= 16;
          if (Rx.ΔΔΔΔ == this.ΔΔΔΔ) {
            Rx.control.Ⲇⵠᐃᐃ = 0;
          }
        }
        if (this.right >= 0) {
          this.ⲆⵠᐃⲆⵠ = true;
        }
        var g = this.ⲆⵠᐃⲆⵠ ? this.attack.ᐃⲆΔ : -this.attack.ᐃⲆΔ / 3;
        var x = this.ⲆⵠᐃⲆⵠ ? this.attack.ᐃⲆΔ / 3 : -this.attack.ᐃⲆΔ;
        if (this.ᐃΔᐃⵠⵠΔᐃ) {
          zo.save();
          zo.rotate(g);
          Nw(p, m, -m.width / 2 - So * (66 + q), -m.height / 2 + (5 + v) * So);
          zo.restore();
          zo.save();
          zo.rotate(x);
          Nw(p, m, -m.width / 2 + (66 + q) * So, -m.height / 2 + So * (5 + v));
          zo.restore();
        } else if (c === 0) {
          if (this.right === 64) {
            g = -ⲆⵠΔⵠ.ⲆᐃΔᐃΔⲆᐃ(-g);
          }
          zo.save();
          zo.rotate(g);
          Nw(286, Ⲇⵠᐃⵠ, -Ⲇⵠᐃⵠ.width / 2 - So * (49 + q), -Ⲇⵠᐃⵠ.height / 2 + So * (15 + v));
          if (this.right === 28) {
            var u = ᐃΔ[this.right][this.ᐃⵠΔⵠⵠ][Qx.time];
            of(this.right, this.ᐃⵠΔⵠⵠ, u, -u.width / 4 - So * (62 + q), -u.height / 4 + (v + 18) * So);
          } else {
            Cv(this.right, q, v);
          }
          if (p >= 920) {
            af(p, m, -m.width / 4 - So * (49 + q), -m.height / 4 + (11 + v) * So);
          } else if (p !== 793) {
            of(p, this.ⵠᐃᐃⲆ, m, -m.width / 4 - So * (49 + q), -m.height / 4 + (11 + v) * So);
          } else {
            Nw(p, m, -m.width / 2 - So * (49 + q), -m.height / 2 + So * (11 + v));
          }
          zo.restore();
          zo.save();
          zo.rotate(x);
          Nw(286, Ⲇⵠᐃⵠ, -Ⲇⵠᐃⵠ.width / 2 + (49 + q) * So, -Ⲇⵠᐃⵠ.height / 2 + So * (15 + v));
          if (p >= 920) {
            af(p, m, -m.width / 4 + (49 + q) * So, -m.height / 4 + So * (11 + v));
          } else if (p !== 793) {
            of(p, this.ⵠᐃᐃⲆ, m, -m.width / 4 + (49 + q) * So, -m.height / 4 + (11 + v) * So);
          } else {
            Nw(p, m, -m.width / 2 + (49 + q) * So, -m.height / 2 + So * (11 + v));
          }
          zo.restore();
        }
      } else if (this.ᐃΔᐃⵠⵠΔᐃ) {
        Nw(p, m, -m.width / 2 - (66 + q) * So, -m.height / 2 + (5 + v) * So);
        Nw(p, m, -m.width / 2 + So * (66 + q), -m.height / 2 + (5 + v) * So);
      } else if (c === 0) {
        Nw(286, Ⲇⵠᐃⵠ, -Ⲇⵠᐃⵠ.width / 2 - So * (49 + q), -Ⲇⵠᐃⵠ.height / 2 + (15 + v) * So);
        if (this.right === 28) {
          u = ᐃΔ[this.right][this.ᐃⵠΔⵠⵠ][Qx.time];
          of(this.right, this.ᐃⵠΔⵠⵠ, u, -u.width / 4 - (62 + q) * So, -u.height / 4 + (v + 18) * So);
        } else {
          Cv(this.right, q, v);
        }
        if (p >= 920) {
          af(p, m, -m.width / 4 - So * (49 + q), -m.height / 4 + (11 + v) * So);
        } else if (p !== 793) {
          of(p, this.ⵠᐃᐃⲆ, m, -m.width / 4 - (49 + q) * So, -m.height / 4 + So * (11 + v));
        } else {
          Nw(p, m, -m.width / 2 - So * (49 + q), -m.height / 2 + So * (11 + v));
        }
        Nw(286, Ⲇⵠᐃⵠ, -Ⲇⵠᐃⵠ.width / 2 + (49 + q) * So, -Ⲇⵠᐃⵠ.height / 2 + (15 + v) * So);
        if (p >= 920) {
          af(p, m, -m.width / 4 + (49 + q) * So, -m.height / 4 + (11 + v) * So);
        } else if (p !== 793) {
          of(p, this.ⵠᐃᐃⲆ, m, -m.width / 4 + So * (49 + q), -m.height / 4 + So * (11 + v));
        } else {
          Nw(p, m, -m.width / 2 + So * (49 + q), -m.height / 2 + (11 + v) * So);
        }
      }
      if (this.ⵠΔᐃΔᐃ && this.ᐃᐃⲆⵠⵠ < 1) {
        m = ᐃΔ[29][this.ΔᐃⲆⵠΔΔⲆ][Qx.time];
        of(29, this.ΔᐃⲆⵠΔΔⲆ, m, -m.width / 4, -m.height / 4 - So * 39);
      }
      if (this.ᐃΔᐃⵠⵠΔᐃ) {
        m = ᐃΔ[820][Qx.time];
        Nw(820, m, -m.width / 2, -m.height / 2);
        this.ⵠΔⵠⲆΔⵠⵠ.ⵠⵠᐃ();
        m = ᐃΔ[821][Qx.time];
        Nw(821, m, -m.width / 2, -m.height / 2 + this.ⵠΔⵠⲆΔⵠⵠ.ᐃⲆΔ);
      } else {
        m = ᐃΔ[255][this.ⵠᐃᐃⲆ][Qx.time];
        if (this.ᐃᐃⲆⵠⵠ !== 85 && (of(255, this.ⵠᐃᐃⲆ, m, -m.width / 4, -m.height / 4), this.ᐃⲆⵠⲆⵠ > 0)) {
          m = ᐃΔ[796][this.ᐃⲆⵠⲆⵠ][Qx.time];
          of(796, this.ᐃⲆⵠⲆⵠ, m, -m.width / 4, -m.height / 4);
        }
      }
      if (this.action & 128) {
        if (this.ᐃΔΔⵠΔ.ⵠⵠᐃ() && this.ᐃΔΔⵠΔ.ⵠⲆⲆ == ps) {
          this.action -= 128;
        }
        zo.globalAlpha = 0.6 - this.ᐃΔΔⵠΔ.ᐃⲆΔ;
        if (this.ᐃΔᐃⵠⵠΔᐃ) {
          m = ᐃΔ[825];
          Np(zo, m, -m.width / 2, -m.height / 2);
        } else {
          m = rw(this.ⵠᐃᐃⲆ, ᐃΔ[255][this.ⵠᐃᐃⲆ][0], ᐃΔⲆᐃⲆⵠⵠⵠⲆ);
          Np(zo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        }
        zo.globalAlpha = 1;
      }
      if (this.action & 256) {
        if (this.ᐃⵠᐃΔᐃⵠⵠ.ⵠⵠᐃ() && this.ᐃⵠᐃΔᐃⵠⵠ.ⵠⲆⲆ == gn) {
          this.action -= 256;
        }
        zo.globalAlpha = 0.6 - this.ᐃⵠᐃΔᐃⵠⵠ.ᐃⲆΔ;
        m = ᐃΔ[266];
        Np(zo, m, -m.width / 2, -m.height / 2);
        zo.globalAlpha = 1;
      }
      if (this.action & 2) {
        if (this.ᐃΔᐃ.ⵠⵠᐃ() && this.ᐃΔᐃ.ⵠⲆⲆ == gn) {
          this.action -= 2;
        }
        zo.globalAlpha = 0.6 - this.ᐃΔᐃ.ᐃⲆΔ;
        if (this.ᐃΔᐃⵠⵠΔᐃ) {
          m = ᐃΔ[823];
          Np(zo, m, -m.width / 2, -m.height / 2);
        } else {
          m = rw(this.ⵠᐃᐃⲆ, ᐃΔ[255][this.ⵠᐃᐃⲆ][0], ΔⵠΔⲆΔᐃΔⲆΔ);
          Np(zo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        }
        zo.globalAlpha = 1;
      }
      if (this.action & 4) {
        if (this.freeze.ⵠⵠᐃ() && this.freeze.ⵠⲆⲆ == 0) {
          this.action -= 4;
        }
        zo.globalAlpha = 0.6 - this.freeze.ᐃⲆΔ;
        m = rw(this.ⵠᐃᐃⲆ, ᐃΔ[255][this.ⵠᐃᐃⲆ][0], ΔⲆⵠⲆᐃⲆⵠΔΔ);
        Np(zo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        zo.globalAlpha = 1;
      }
      if (this.action & 8) {
        if (this.ᐃᐃᐃⵠΔΔΔ.ⵠⵠᐃ() && this.ᐃᐃᐃⵠΔΔΔ.ⵠⲆⲆ == Vg) {
          this.action -= 8;
        }
        zo.globalAlpha = 0.6 - this.ᐃᐃᐃⵠΔΔΔ.ᐃⲆΔ;
        if (this.ᐃΔᐃⵠⵠΔᐃ) {
          m = ᐃΔ[824];
          Np(zo, m, -m.width / 2, -m.height / 2);
        } else {
          m = rw(this.ⵠᐃᐃⲆ, ᐃΔ[255][this.ⵠᐃᐃⲆ][0], ᐃΔⲆΔⵠΔᐃΔᐃ);
          Np(zo, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
        }
        zo.globalAlpha = 1;
      }
      nw(this.ᐃᐃⲆⵠⵠ);
      if (c === 1) {
        if (this.action & 16) {
          q += this.attack.ᐃⲆΔ * 15;
        }
        Nw(286, Ⲇⵠᐃⵠ, -Ⲇⵠᐃⵠ.width / 2 - So * 26, -Ⲇⵠᐃⵠ.height / 2 + So * (31 + v + q));
        if (h >= 920) {
          af(h, w, -w.width / 4 - So * 26, -w.height / 4 + So * (27 + v + q));
        } else if (h !== 793) {
          of(h, this.ⵠᐃᐃⲆ, w, -w.width / 4 - So * 26, -w.height / 4 + (27 + v + q) * So);
        } else {
          Nw(h, w, -w.width / 2 - So * 26, -w.height / 2 + (27 + v + q) * So);
        }
        Nw(286, Ⲇⵠᐃⵠ, -Ⲇⵠᐃⵠ.width / 2 + So * 26, -Ⲇⵠᐃⵠ.height / 2 + (31 + v + q) * So);
        if (h >= 920) {
          af(h, w, -w.width / 4 + So * 26, -w.height / 4 + (27 + v + q) * So);
        } else if (h !== 793) {
          of(h, this.ⵠᐃᐃⲆ, w, -w.width / 4 + So * 26, -w.height / 4 + So * (27 + v + q));
        } else {
          Nw(h, w, -w.width / 2 + So * 26, -w.height / 2 + So * (27 + v + q));
        }
        Mv(this.right, 0, v + q);
      }
      zo.restore();
      if (this.ᐃᐃⲆⵠⵠ !== 83 && this.ᐃᐃⲆⵠⵠ !== 85) {
        if (this.ⲆᐃⵠΔΔ > 0) {
          this.ᐃᐃⲆⲆ.ⲆᐃΔⵠᐃΔⲆ ||= Cu(So, this.ᐃᐃⲆⲆ.ᐃΔΔΔΔ, 20, "#187484", "#000", 2, null, null, So * 300);
          m = this.ᐃᐃⲆⲆ.ⲆᐃΔⵠᐃΔⲆ;
        } else {
          if (!this.ᐃᐃⲆⲆ.label) {
            this.ᐃᐃⲆⲆ.label = Cu(So, this.ᐃᐃⲆⲆ.ᐃΔΔΔΔ, 20, "#FFF", "#000", 2, null, null, So * 300);
          }
          m = this.ᐃᐃⲆⲆ.label;
        }
        if (Qx.ⵠΔΔ == ns.ᐃᐃⵠ) {
          zo.globalAlpha = 0.5;
        }
        q = Math.floor(-m.width / 2);
        v = Math.floor(-m.height / 2 - So * 70);
        Np(zo, m, q, v);
        if (this.ᐃᐃⲆⲆ.level > 0) {
          var y = q + m.width + 5;
          m = ᐃΔ[885];
          if (Wb === ⲆⵠΔⲆⲆᐃⲆ[this.ᐃᐃⲆⲆ.level]) {
            ⲆⵠΔⲆⲆᐃⲆ[this.ᐃᐃⲆⲆ.level] = Cu(So, "[" + this.ᐃᐃⲆⲆ.level + "]", 20, "#F9E8A2", "#000", 2, null, null, So * 50);
          }
          Np(zo, ⲆⵠΔⲆⲆᐃⲆ[this.ᐃᐃⲆⲆ.level], y, v);
        }
        zo.globalAlpha = 1;
      } else {
        v = Math.floor(So * -70);
        q = Math.floor(ᐃΔ[558].width / 1.5);
      }
      if (Rx.ⵠⲆΔᐃⲆⵠᐃ(this.ᐃΔᐃΔ)) {
        if (Rx.ⵠᐃⵠⵠᐃ[0] == this.ᐃΔᐃΔ) {
          m = ᐃΔ[559];
        } else {
          m = ᐃΔ[558];
        }
        Np(zo, m, q - m.width - 5, v - 6);
      }
      zo.restore();
    }
  }
  function qw(a, b) {
    if (this.text) {
      if (this.timeout.ⵠⲆⲆ) {
        zo.globalAlpha = 1 - this.timeout.ᐃⲆΔ;
      } else {
        zo.globalAlpha = 1;
      }
      this.label ||= Cu(So, this.text, 40, a, null, null, null, null, null, b, 10);
      Np(zo, this.label, (yo - this.label.width) / 2, So * 50);
      zo.globalAlpha = 1;
      if (this.timeout.ⵠⵠᐃ() && Pq == this.timeout.ⵠⲆⲆ) {
        this.text = this.list.shift();
        this.label = null;
      }
    }
  }
  function rw(b, c, d) {
    if (c.ⵠⲆⵠᐃⲆΔᐃ() !== 1) {
      return c;
    }
    var e = ⵠΔⵠⵠⵠΔΔ[d][b];
    if (e === Nl) {
      var f = (e = document.createElement("canvas")).getContext("2d");
      var g = c.width;
      var a = c.height;
      e.width = g;
      e.height = a;
      f.drawImage(c, 0, 0);
      f.globalCompositeOperation = "source-in";
      f.fillStyle = ᐃᐃⵠⲆⲆᐃⵠᐃⵠ[d];
      f.fillRect(0, 0, g, a);
      ⵠΔⵠⵠⵠΔΔ[d][b] = e;
    }
    return e;
  }
  function sw() {
    if (this.enabled && this.Ⲇᐃⵠᐃᐃ >= 0) {
      var a = new Date().getTime() - this.Ⲇᐃⵠᐃᐃ;
      var b = a % 1000 / 1000;
      if (b > 0.5) {
        b = 1 - (b - 0.5) * 2;
      } else {
        b *= 2;
      }
      if ((a = Math.floor(a / 1000)) < 60) {
        a = 60 - a;
        this.label ||= Cu(So, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
        if (this.now != a || !this.ΔᐃΔⲆⲆΔᐃ) {
          this.now = a;
          this.ΔᐃΔⲆⲆΔᐃ = Cu(So, "" + a, 40, "#660000", null, null, null, null, null, "#000", 10);
        }
        Np(zo, this.label, (yo - this.label.width) / 2, So * 100);
        zo.globalAlpha = b;
        Np(zo, this.ΔᐃΔⲆⲆΔᐃ, (yo - this.label.width) / 2 - this.ΔᐃΔⲆⲆΔᐃ.width + So * 15, So * 100);
        zo.globalAlpha = 1;
      }
    }
  }
  function tw() {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + this.x, Rx.ⵠⵠΔ.y + this.y);
    if (this.text.length > 0) {
      for (var a = 0; a < this.text.length && a < 2; a++) {
        if (!this.label[a]) {
          this.label[a] = vd(So, this.text[a]);
          this.ⵠⲆⲆⵠⲆΔⲆ[a] = 0;
          this.ⲆΔᐃΔΔⵠΔ[a] = 0;
        }
        if (a === 1) {
          this.ⲆΔᐃΔΔⵠΔ[0] = ⲆⵠΔⵠ.ⵠᐃᐃⲆⵠ(this.ᐃⵠⵠⲆⵠᐃΔ) * 30;
        }
      }
      this.ⵠⲆⲆⵠⲆΔⲆ[0] += Yx;
      if (this.text.length > 1) {
        this.ᐃⵠⵠⲆⵠᐃΔ = Math.min(this.ᐃⵠⵠⲆⵠᐃΔ + Yx, 1);
        if (this.ⵠⲆⲆⵠⲆΔⲆ[0] > 1 && this.ᐃⵠⵠⲆⵠᐃΔ > 0.5) {
          this.ⵠⲆⲆⵠⲆΔⲆ[1] += Yx;
        }
      }
      for (a = 0; this.text.length > a && a < 2; a++) {
        var b = this.ⵠⲆⲆⵠⲆΔⲆ[a];
        if (b > 0) {
          zo.globalAlpha = b < 0.25 ? b * 4 : b > 3.75 ? Math.max((4 - b) * 4, 0) : 1;
          Np(zo, this.label[a], -this.label[a].width / 2, -this.ⲆΔᐃΔΔⵠΔ[a] + -this.label[a].height / 2 - So * 110);
        }
      }
      if (this.ⵠⲆⲆⵠⲆΔⲆ[0] > 4) {
        this.ⵠⲆⲆⵠⲆΔⲆ.shift();
        this.text.shift();
        this.ⲆΔᐃΔΔⵠΔ.shift();
        this.label.shift();
        this.ᐃⵠⵠⲆⵠᐃΔ = 0;
      }
    }
    zo.restore();
  }
  function uw() {
    if (rh !== this.message) {
      var a = Rx.ⵠⵠⲆᐃ.ⵠΔⲆᐃⲆ.length > 0 ? -95 : 0;
      Np(zo, this.message, 0, hq - this.message.height + a);
    }
  }
  ΔⵠΔⲆΔᐃΔⲆΔ = 0;
  ᐃΔⲆᐃⲆⵠⵠⵠⲆ = 1;
  ΔⲆⵠⲆᐃⲆⵠΔΔ = 2;
  ᐃΔⲆΔⵠΔᐃΔᐃ = 3;
  ΔᐃⵠⵠΔΔⵠΔⲆ = 4;
  ⵠΔⵠⵠⵠΔΔ = [[], [], [], [], []];
  ᐃᐃⵠⲆⲆᐃⵠᐃⵠ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
  var vw = 0;
  function ww(j, e, i, k, n, o, a, q) {
    if (q === da) {
      q = 0;
    }
    Qx.ΔⵠᐃⲆ[n].ⵠⵠᐃ();
    for (var r = a; r >= q; r--) {
      for (var t = j; e >= t; t++) {
        for (var w = i; k >= w; w++) {
          var x = Jx.ΔⲆΔᐃ[t][w];
          if (x && x[o]) {
            var y = x[o][r];
            if (Bt !== y) {
              for (var z = 0; y.length > z; z++) {
                var A = y[z];
                if (A.ⵠⵠᐃ) {
                  if (A.ᐃΔᐃ.ⵠⵠᐃ() && A.ᐃΔᐃ.ⵠⲆⲆ == co) {
                    A.ⵠⵠᐃ = Wh;
                  }
                  var B = So * (Yx * (1 - A.ᐃΔᐃ.ᐃⲆΔ) * 600);
                  var D = B * Math.sin(A.angle);
                  var E = B * Math.cos(A.angle);
                } else {
                  D = 0;
                  E = 0;
                }
                var F = ᐃΔ[n][Qx.time][r];
                var G = Qx.ΔⵠᐃⲆ[n].ᐃⲆΔ * -F.width;
                var H = -F.height * Qx.ΔⵠᐃⲆ[n].ᐃⲆΔ;
                Np(zo, F, Rx.ⵠⵠΔ.x + A.x - G / 2 + D, Rx.ⵠⵠΔ.y + A.y - H / 2 + E, G, H);
              }
            }
          }
        }
      }
    }
  }
  function xw(j, e, i, k, n, o, a, q) {
    if (q === oh) {
      q = 0;
    }
    for (var r = a; q <= r; r--) {
      for (var t = j; e >= t; t++) {
        for (var w = i; k >= w; w++) {
          var x = Jx.ΔⲆΔᐃ[t][w];
          if (x && x[o]) {
            var y = x[o][r];
            if (y !== Rr) {
              for (var z = 0; z < y.length; z++) {
                var A = y[z];
                var B = ᐃΔ[n][Qx.time][r];
                var D = (vw + (t + w) * 3) % 60;
                var E = D < 30 ? D / 30 : 1 - (D - 30) / 30;
                var F = (1 + E * 0.9 / 30) * -B.width;
                var G = (1 + E * 0.9 / 30) * -B.height;
                E = (D = (vw + (t + w) * 7) % 60) < 30 ? D / 30 : 1 - (D - 30) / 30;
                var H = zo.globalAlpha;
                zo.globalAlpha = H * (0.9 + E * 0.1);
                Np(zo, B, Rx.ⵠⵠΔ.x + A.x - F / 2, Rx.ⵠⵠΔ.y + A.y - G / 2, F, G);
                zo.globalAlpha = H;
              }
            }
          }
        }
      }
    }
  }
  var yw = [];
  for (Sb = 0; Sb < 100; Sb++) {
    var zw = 1;
    if (Math.random() < 0.25) {
      zw = 0;
    }
    yw.push(zw);
  }
  function Aw(j, e, i, k, n, o, a, q = 0, r) {
    for (var h = a; q <= h; h--) {
      for (var s = j; s <= e; s++) {
        for (var t = i; k >= t; t++) {
          var w = Jx.ΔⲆΔᐃ[s][t];
          if (w !== undefined && w[o] !== undefined) {
            var x = w[o][h];
            if (x !== Yg) {
              for (var A = 0; x.length > A; A++) {
                var B = x[A];
                if (B.ⵠⵠᐃ) {
                  if (B.ᐃΔᐃ.ⵠⵠᐃ() && B.ᐃΔᐃ.ⵠⲆⲆ == 0) {
                    B.ⵠⵠᐃ = Kk;
                  }
                  var D = (1 - B.ᐃΔᐃ.ᐃⲆΔ) * Yx * 600 * So;
                  var E = D * Math.sin(B.angle);
                  var F = D * Math.cos(B.angle);
                } else {
                  E = 0;
                  F = 0;
                }
                for (var G = 0; G < ᐃⲆⵠΔΔΔⵠ[h].ᐃⵠⲆⵠ; G++) {
                  if (Qx.ⲆΔⲆᐃⲆ[G].ⵠᐃΔⲆᐃ !== Xx) {
                    Qx.ⲆΔⲆᐃⲆ[G].ⵠⵠᐃ();
                    Qx.ⲆΔⲆᐃⲆ[G].ⵠᐃΔⲆᐃ = Xx;
                  }
                  var H = ᐃΔ[941][Qx.time][ᐃⲆⵠΔΔΔⵠ[h].ΔⵠⲆⲆ[G].ᐃᐃⲆ];
                  var I = -H.width * Qx.ⲆΔⲆᐃⲆ[G].ᐃⲆΔ;
                  var J = Qx.ⲆΔⲆᐃⲆ[G].ᐃⲆΔ * -H.height;
                  Np(zo, H, Rx.ⵠⵠΔ.x + B.x - I / 4 + E + ᐃⲆⵠΔΔΔⵠ[h].ΔⵠⲆⲆ[G].x, Rx.ⵠⵠΔ.y + B.y - J / 4 + F + ᐃⲆⵠΔΔΔⵠ[h].ΔⵠⲆⲆ[G].y, I / 2, J / 2);
                }
              }
            }
          }
        }
      }
    }
  }
  function Bw(c, e, f, i, j, k, a, m, n) {
    if (m === $q) {
      m = 0;
    }
    for (var h = c; e >= h; h++) {
      for (var o = f; o <= i; o++) {
        var p = Jx.ΔⲆΔᐃ[h][o];
        if (p !== dg && p[k] !== undefined) {
          var q = p[k];
          if (Nl !== q) {
            if (q.scale === 1) {
              var r = ᐃΔ[j][Qx.time][q.ⵠⵠΔᐃⲆ];
              zo.save();
              zo.translate(Rx.ⵠⵠΔ.x + q.x, Rx.ⵠⵠΔ.y + q.y);
              zo.rotate(q.angle);
              Np(zo, r, -r.width / 4, -r.height / 4, r.width / 2, r.height / 2);
              zo.restore();
            } else if (q.scale === 3) {
              for (var t = 0; t < q.ᐃⵠⲆ.length; t++) {
                zo.save();
                zo.translate(Rx.ⵠⵠΔ.x + q.x, Rx.ⵠⵠΔ.y + q.y);
                zo.rotate(q.ᐃⵠⲆ[t].angle);
                r = ᐃΔ[j][Qx.time][q.ᐃⵠⲆ[t].ⵠⵠΔᐃⲆ];
                Np(zo, r, -r.width / 3 + q.ᐃⵠⲆ[t].x, -r.height / 3 + q.ᐃⵠⲆ[t].y, r.width / 1.5, r.height / 1.5);
                zo.restore();
              }
            } else {
              r = ᐃΔ[j][Qx.time][q.ⵠⵠΔᐃⲆ];
              zo.save();
              zo.translate(Rx.ⵠⵠΔ.x + q.x, Rx.ⵠⵠΔ.y + q.y);
              zo.rotate(q.angle);
              Np(zo, r, -r.width / 2, -r.height / 2, r.width, r.height);
              zo.restore();
            }
          }
        }
      }
    }
  }
  function Cw(f, e, i, j, k, n, a, o = 0, q) {
    for (var h = a; o <= h; h--) {
      for (var r = f; r <= e; r++) {
        for (var s = i; j >= s; s++) {
          if (q <= 0 || yw[(r + s * q) % yw.length] !== 1) {
            var t = Jx.ΔⲆΔᐃ[r][s];
            if (t !== undefined && t[n] !== Bt) {
              var w = t[n][h];
              if (sk !== w) {
                for (var x = 0; w.length > x; x++) {
                  var y = w[x];
                  if (y.ⵠⵠᐃ) {
                    if (y.ᐃΔᐃ.ⵠⵠᐃ() && y.ᐃΔᐃ.ⵠⲆⲆ == 0) {
                      y.ⵠⵠᐃ = false;
                    }
                    var z = So * ((1 - y.ᐃΔᐃ.ᐃⲆΔ) * Yx * 600);
                    var A = Math.sin(y.angle) * z;
                    var B = Math.cos(y.angle) * z;
                  } else {
                    A = 0;
                    B = 0;
                  }
                  var D = ᐃΔ[k][Qx.time][h];
                  Np(zo, D, Rx.ⵠⵠΔ.x + y.x - D.width / (ΔᐃⲆⵠⵠ * 2) + A, Rx.ⵠⵠΔ.y + y.y - D.height / (ΔᐃⲆⵠⵠ * 2) + B, D.width / ΔᐃⲆⵠⵠ, D.height / ΔᐃⲆⵠⵠ);
                }
              }
            }
          }
        }
      }
    }
  }
  ΔᐃⲆⵠⵠ = 1;
  ᐃⲆⵠΔΔΔⵠ = [{
    ᐃⵠⲆⵠ: 10,
    ΔⵠⲆⲆ: [{
      y: -20,
      x: -128,
      ᐃᐃⲆ: 0
    }, {
      x: -86,
      y: -4,
      ᐃᐃⲆ: 1
    }, {
      ᐃᐃⲆ: 2,
      x: -60,
      y: -74
    }, {
      x: -22,
      ᐃᐃⲆ: 0,
      y: -144
    }, {
      x: -58,
      ᐃᐃⲆ: 0,
      y: 86
    }, {
      ᐃᐃⲆ: 0,
      y: -30,
      x: 3
    }, {
      ᐃᐃⲆ: 1,
      y: -115,
      x: 65
    }, {
      x: 118,
      ᐃᐃⲆ: 0,
      y: -50
    }, {
      x: 73,
      y: 15,
      ᐃᐃⲆ: 1
    }, {
      x: 67,
      y: 79,
      ᐃᐃⲆ: 0
    }]
  }, {
    ΔⵠⲆⲆ: [{
      ᐃᐃⲆ: 0,
      x: -45,
      y: -26
    }, {
      ᐃᐃⲆ: 2,
      x: -45,
      y: 20
    }, {
      ᐃᐃⲆ: 1,
      x: 10,
      y: -60
    }, {
      y: -17,
      ᐃᐃⲆ: 1,
      x: 52
    }, {
      y: 45,
      ᐃᐃⲆ: 0,
      x: 14
    }],
    ᐃⵠⲆⵠ: 5
  }, {
    ΔⵠⲆⲆ: [{
      ᐃᐃⲆ: 2,
      x: -30,
      y: 3
    }, {
      x: 7,
      y: -38,
      ᐃᐃⲆ: 2
    }, {
      ᐃᐃⲆ: 2,
      x: 37,
      y: 5
    }],
    ᐃⵠⲆⵠ: 3
  }, {
    ᐃⵠⲆⵠ: 11,
    ΔⵠⲆⲆ: [{
      ᐃᐃⲆ: 2,
      x: -74,
      y: -87
    }, {
      x: -11,
      y: -10,
      ᐃᐃⲆ: 1
    }, {
      x: -99,
      ᐃᐃⲆ: 1,
      y: 17
    }, {
      ᐃᐃⲆ: 0,
      y: 84,
      x: -66
    }, {
      x: -55,
      y: 123,
      ᐃᐃⲆ: 1
    }, {
      y: 81,
      ᐃᐃⲆ: 2,
      x: 10
    }, {
      y: 50,
      x: 52,
      ᐃᐃⲆ: 0
    }, {
      x: 138,
      y: 9,
      ᐃᐃⲆ: 1
    }, {
      ᐃᐃⲆ: 0,
      y: -28,
      x: 104
    }, {
      ᐃᐃⲆ: 2,
      y: -56,
      x: 67
    }, {
      x: 5,
      ᐃᐃⲆ: 0,
      y: -112
    }]
  }, {
    ᐃⵠⲆⵠ: 6,
    ΔⵠⲆⲆ: [{
      y: -66,
      ᐃᐃⲆ: 2,
      x: -33
    }, {
      y: 10,
      ᐃᐃⲆ: 0,
      x: -58
    }, {
      x: -19,
      y: 44,
      ᐃᐃⲆ: 1
    }, {
      x: 44,
      ᐃᐃⲆ: 0,
      y: 20
    }, {
      x: 53,
      y: -36,
      ᐃᐃⲆ: 2
    }, {
      ᐃᐃⲆ: 0,
      y: -62,
      x: 7
    }]
  }, {
    ΔⵠⲆⲆ: [{
      y: -25,
      x: -19,
      ᐃᐃⲆ: 1
    }, {
      ᐃᐃⲆ: 2,
      y: 13,
      x: -29
    }, {
      y: 12,
      x: 12,
      ᐃᐃⲆ: 0
    }],
    ᐃⵠⲆⵠ: 3
  }];
  var Dw = 0;
  var Ew = 0;
  var Fw = 0;
  var Gw = 0;
  function Hw() {
    zo.globalAlpha = 1;
    if (Qx.transition) {
      var a = Qx.ⵠᐃΔᐃ.ⵠⵠᐃ();
    }
    Qx.ᐃᐃⲆᐃᐃᐃᐃⲆΔ(-Rx.ⵠⵠΔ.x, -Rx.ⵠⵠΔ.y);
    Dw = Math.max(Math.floor(-Rx.ⵠⵠΔ.x / Qx.ⲆⲆᐃⵠⵠᐃⵠ) - 5, 0);
    Ew = Math.min(Math.floor((-Rx.ⵠⵠΔ.x + Rx.ⵠⵠΔ.w) / Qx.ⲆⲆᐃⵠⵠᐃⵠ) + 4, Qx.ᐃⲆᐃⵠⲆ - 1);
    Fw = Math.max(Math.floor(-Rx.ⵠⵠΔ.y / Qx.ⵠⵠⵠⲆΔᐃⲆ) - 3, 0);
    Gw = Math.min(Math.floor((-Rx.ⵠⵠΔ.y + Rx.ⵠⵠΔ.ᐃᐃᐃ) / Qx.ⵠⵠⵠⲆΔᐃⲆ) + 3, Qx.ⲆΔⲆΔΔ - 1);
    (function () {
      for (var c = Qx.ⲆᐃⵠΔ.length - 1; c >= 0; c--) {
        if ((A = Qx.ⲆᐃⵠΔ[c]).ᐃᐃⲆ === Qx.ⲆⵠⵠⵠΔ) {
          var f = Qx.ΔΔᐃⲆᐃ[A.ᐃᐃⲆ];
          if (-Rx.ⵠⵠΔ.x >= A.x1 - 230 - yo && A.x2 + 330 >= -Rx.ⵠⵠΔ.x && -Rx.ⵠⵠΔ.y >= A.y1 - hq && A.y2 + 100 >= -Rx.ⵠⵠΔ.y) {
            var j = A.x2;
            if (A.ᐃᐃⲆ !== Qx.ⲆⵠⵠⵠΔ) {
              j -= 610;
            }
            var k = A.x1;
            if (A.ᐃᐃⲆ !== Qx.ⲆⵠⵠⵠΔ) {
              k += 610;
            }
            var m = A.y2;
            if (A.ᐃᐃⲆ !== Qx.ⲆⵠⵠⵠΔ) {
              m -= 610;
            }
            var p = A.y1;
            if (A.ᐃᐃⲆ !== Qx.ⲆⵠⵠⵠΔ) {
              p += 610;
            }
            if (Qx.transition) {
              var q = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
              zo.fillStyle = Mw(f.ⵠⲆⵠ[0], f.ⵠⲆⵠ[1], f.ⵠⲆⵠ[2], f.ⵠΔΔ[0], f.ⵠΔΔ[1], f.ⵠΔΔ[1], q);
            } else {
              zo.fillStyle = f.ᐃⲆᐃᐃᐃ[Qx.time];
            }
            var w = Math.max(Rx.ⵠⵠΔ.x + k - 2 - 230, 0);
            var x = Math.max(-Rx.ⵠⵠΔ.x + yo - j - 330 - 2, 0);
            var y = Math.max(Rx.ⵠⵠΔ.y + p - 2, 0);
            var z = Math.max(-Rx.ⵠⵠΔ.y + hq - m - 100 - 2, 0);
            zo.beginPath();
            zo.fillRect(w, y, yo - x - w, hq - y - z);
          }
        }
      }
      for (c = Qx.ⲆᐃⵠΔ.length - 1; c >= 0; c--) {
        if ((A = Qx.ⲆᐃⵠΔ[c]).ᐃᐃⲆ !== Qx.ⲆⵠⵠⵠΔ) {
          j = A.x2;
          if (Qx.ⲆⵠⵠⵠΔ !== A.ᐃᐃⲆ) {
            j -= 400;
          }
          k = A.x1;
          if (A.ᐃᐃⲆ !== Qx.ⲆⵠⵠⵠΔ) {
            k += 400;
          }
          m = A.y2;
          if (A.ᐃᐃⲆ !== Qx.ⲆⵠⵠⵠΔ) {
            m -= 300;
          }
          p = A.y1;
          if (A.ᐃᐃⲆ !== Qx.ⲆⵠⵠⵠΔ) {
            p += 300;
          }
          if (!(A.ᐃⲆΔ & 8) && -Rx.ⵠⵠΔ.x >= j - yo + 120 && j + 820 >= -Rx.ⵠⵠΔ.x && p + 88 - hq <= -Rx.ⵠⵠΔ.y && m + 50 >= -Rx.ⵠⵠΔ.y) {
            tf(j, p + 88, m - 88, Rx.ᐃⲆⵠⵠ[0], Qx.ΔΔᐃⲆᐃ[A.ᐃᐃⲆ], A.ᐃⲆΔ & 8);
            Pw(j, p + 88, m - 88, Rx.ᐃⲆⵠⵠ[0], Qx.ΔΔᐃⲆᐃ[A.ᐃᐃⲆ], A.ᐃⲆΔ & 8);
          }
          if ((A.ᐃⲆΔ & 4) === 0 && k - yo - 700 <= -Rx.ⵠⵠΔ.x && -Rx.ⵠⵠΔ.x <= k - 20 && -Rx.ⵠⵠΔ.y >= p + 88 - hq && -Rx.ⵠⵠΔ.y <= m + 50) {
            rf(k, p + 88, m - 88, Rx.ᐃⲆⵠⵠ[1], Qx.ΔΔᐃⲆᐃ[A.ᐃᐃⲆ], A.ᐃⲆΔ & 4);
            hf(k, p + 88, m - 88, Rx.ᐃⲆⵠⵠ[1], Qx.ΔΔᐃⲆᐃ[A.ᐃᐃⲆ], A.ᐃⲆΔ & 4);
          }
          if (!(A.ᐃⲆΔ & 2) && k - 235 - yo <= -Rx.ⵠⵠΔ.x && j + 350 >= -Rx.ⵠⵠΔ.x && -Rx.ⵠⵠΔ.y >= m - hq - 275 && m + 490 >= -Rx.ⵠⵠΔ.y) {
            nf(m - 230, k - 230, j + 230, Rx.ᐃⲆⵠⵠ[2], Qx.ΔΔᐃⲆᐃ[A.ᐃᐃⲆ], A.ᐃⲆΔ & 2);
            Kw(m - 230, k - 230, j + 230, Rx.ᐃⲆⵠⵠ[2], Qx.ΔΔᐃⲆᐃ[A.ᐃᐃⲆ], A.ᐃⲆΔ & 2);
          }
          if (!(A.ᐃⲆΔ & 1) && -Rx.ⵠⵠΔ.x >= k - 235 - yo && j + 350 >= -Rx.ⵠⵠΔ.x && p - hq - 390 <= -Rx.ⵠⵠΔ.y && p + 315 >= -Rx.ⵠⵠΔ.y) {
            Qw(p + 310, k - 230, j + 230, Rx.ᐃⲆⵠⵠ[3], Qx.ΔΔᐃⲆᐃ[A.ᐃᐃⲆ], A.ᐃⲆΔ & 1);
            Lw(p + 310, k - 230, j + 230, Rx.ᐃⲆⵠⵠ[3], Qx.ΔΔᐃⲆᐃ[A.ᐃᐃⲆ], A.ᐃⲆΔ & 1);
          }
        }
      }
      for (c = Qx.ⲆᐃⵠΔ.length - 1; c >= 0; c--) {
        if ((A = Qx.ⲆᐃⵠΔ[c]).ᐃᐃⲆ !== Qx.ⲆⵠⵠⵠΔ) {
          j = A.x2;
          if (Qx.ⲆⵠⵠⵠΔ !== A.ᐃᐃⲆ) {
            j -= 400;
          }
          k = A.x1;
          if (Qx.ⲆⵠⵠⵠΔ !== A.ᐃᐃⲆ) {
            k += 400;
          }
          m = A.y2;
          if (A.ᐃᐃⲆ !== Qx.ⲆⵠⵠⵠΔ) {
            m -= 300;
          }
          p = A.y1;
          if (Qx.ⲆⵠⵠⵠΔ !== A.ᐃᐃⲆ) {
            p += 300;
          }
          if (A.ᐃⲆΔ & 8 && -Rx.ⵠⵠΔ.x >= j - yo + 120 && j + 820 >= -Rx.ⵠⵠΔ.x && -Rx.ⵠⵠΔ.y >= p + 88 - hq && -Rx.ⵠⵠΔ.y <= m + 50) {
            tf(j, p + 88, m - 88, Rx.ᐃⲆⵠⵠ[0], Qx.ΔΔᐃⲆᐃ[A.ᐃᐃⲆ], A.ᐃⲆΔ & 8);
          }
          if (A.ᐃⲆΔ & 4 && k - yo - 700 <= -Rx.ⵠⵠΔ.x && k - 20 >= -Rx.ⵠⵠΔ.x && p + 88 - hq <= -Rx.ⵠⵠΔ.y && -Rx.ⵠⵠΔ.y <= m + 50) {
            rf(k, p + 88, m - 88, Rx.ᐃⲆⵠⵠ[1], Qx.ΔΔᐃⲆᐃ[A.ᐃᐃⲆ], A.ᐃⲆΔ & 4);
          }
          if ((A.ᐃⲆΔ & 2) !== 0 && -Rx.ⵠⵠΔ.x >= k - 235 - yo && j + 350 >= -Rx.ⵠⵠΔ.x && m - hq - 275 <= -Rx.ⵠⵠΔ.y && -Rx.ⵠⵠΔ.y <= m + 490) {
            nf(m - 230, k - 230, j + 230, Rx.ᐃⲆⵠⵠ[2], Qx.ΔΔᐃⲆᐃ[A.ᐃᐃⲆ], A.ᐃⲆΔ & 2);
          }
          if ((A.ᐃⲆΔ & 1) !== 0 && k - 235 - yo <= -Rx.ⵠⵠΔ.x && j + 350 >= -Rx.ⵠⵠΔ.x && p - hq - 390 <= -Rx.ⵠⵠΔ.y && -Rx.ⵠⵠΔ.y <= p + 315) {
            Qw(p + 310, k - 230, j + 230, Rx.ᐃⲆⵠⵠ[3], Qx.ΔΔᐃⲆᐃ[A.ᐃᐃⲆ], A.ᐃⲆΔ & 1);
          }
        }
      }
      for (c = Qx.ⲆᐃⵠΔ.length - 1; c >= 0; c--) {
        var A = Qx.ⲆᐃⵠΔ[c];
        if (Qx.ⲆⵠⵠⵠΔ !== A.ᐃᐃⲆ) {
          f = Qx.ΔΔᐃⲆᐃ[A.ᐃᐃⲆ];
          if (-Rx.ⵠⵠΔ.x >= A.x1 - 230 - yo && A.x2 + 330 >= -Rx.ⵠⵠΔ.x && A.y1 - hq <= -Rx.ⵠⵠΔ.y && -Rx.ⵠⵠΔ.y <= A.y2 + 100) {
            j = A.x2;
            if (Qx.ⲆⵠⵠⵠΔ !== A.ᐃᐃⲆ) {
              if (A.ᐃⲆΔ & 8) {
                j -= 610;
              } else {
                j -= 414;
              }
            }
            k = A.x1;
            if (A.ᐃᐃⲆ !== Qx.ⲆⵠⵠⵠΔ) {
              if ((A.ᐃⲆΔ & 4) === 0) {
                k += 414;
              } else {
                k += 610;
              }
            }
            m = A.y2;
            if (Qx.ⲆⵠⵠⵠΔ !== A.ᐃᐃⲆ) {
              if ((A.ᐃⲆΔ & 2) === 0) {
                m -= 414;
              } else {
                m -= 610;
              }
            }
            p = A.y1;
            if (A.ᐃᐃⲆ !== Qx.ⲆⵠⵠⵠΔ) {
              if (A.ᐃⲆΔ & 1) {
                p += 610;
              } else {
                p += 414;
              }
            }
            if (Qx.transition) {
              q = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
              zo.fillStyle = Mw(f.ⵠⲆⵠ[0], f.ⵠⲆⵠ[1], f.ⵠⲆⵠ[2], f.ⵠΔΔ[0], f.ⵠΔΔ[1], f.ⵠΔΔ[2], q);
            } else {
              zo.fillStyle = f.ᐃⲆᐃᐃᐃ[Qx.time];
            }
            w = Math.max(Rx.ⵠⵠΔ.x + k - 2 - 230, 0);
            x = Math.max(-Rx.ⵠⵠΔ.x + yo - j - 330 - 2, 0);
            y = Math.max(Rx.ⵠⵠΔ.y + p - 2, 0);
            z = Math.max(-Rx.ⵠⵠΔ.y + hq - m - 100 - 2, 0);
            zo.beginPath();
            zo.fillRect(w, y, yo - x - w, hq - y - z);
          }
        }
      }
      if (Px.ᐃᐃΔΔⵠ) {
        Iw(ww, Fw, Gw, Dw, Ew, 695, "isl", 2);
        Iw(ww, Fw, Gw, Dw, Ew, 694, "isl", 2);
      }
      Iw(Cw, Fw, Gw, Dw, Ew, 692, "isl", 2);
      if (Px.ᐃᐃΔΔⵠ) {
        Iw(Bw, Fw, Gw, Dw, Ew, 243, "de");
      }
      var B = Qx.Δⵠⵠ[0];
      for (c = 0; B.length > c; c++) {
        for (var b = B[c], C = 0; b.ⵠᐃⲆΔⲆ.length > C; C++) {
          Rw(b.ⵠᐃⲆΔⲆ[C]);
        }
      }
      if ((ov += Yx * 40) > 60) {
        ov -= 60;
      }
      Iw(Wv, Fw, Gw, Dw, Ew, 1024, "r", 0);
      for (c = 0; c < Qx.ⲆᐃⵠΔ.length; c++) {
        A = Qx.ⲆᐃⵠΔ[c];
        if (Qx.ⲆⵠⵠⵠΔ !== A.ᐃᐃⲆ) {
          j = A.x2;
          if (A.ᐃᐃⲆ !== Qx.ⲆⵠⵠⵠΔ) {
            j -= 400;
          }
          k = A.x1;
          if (A.ᐃᐃⲆ !== Qx.ⲆⵠⵠⵠΔ) {
            k += 400;
          }
          m = A.y2;
          if (A.ᐃᐃⲆ !== Qx.ⲆⵠⵠⵠΔ) {
            m -= 300;
          }
          p = A.y1;
          if (A.ᐃᐃⲆ !== Qx.ⲆⵠⵠⵠΔ) {
            p += 300;
          }
          if ((A.ᐃⲆΔ & 8) > 0 && -Rx.ⵠⵠΔ.x >= j - yo + 120 && -Rx.ⵠⵠΔ.x <= j + 820 && p + 88 - hq <= -Rx.ⵠⵠΔ.y && m + 50 >= -Rx.ⵠⵠΔ.y) {
            Pw(j, p + 88, m - 88, Rx.ᐃⲆⵠⵠ[0], Qx.ΔΔᐃⲆᐃ[A.ᐃᐃⲆ], A.ᐃⲆΔ & 8);
          }
          if ((A.ᐃⲆΔ & 4) > 0 && k - yo - 700 <= -Rx.ⵠⵠΔ.x && -Rx.ⵠⵠΔ.x <= k - 20 && -Rx.ⵠⵠΔ.y >= p + 88 - hq && -Rx.ⵠⵠΔ.y <= m + 50) {
            hf(k, p + 88, m - 88, Rx.ᐃⲆⵠⵠ[1], Qx.ΔΔᐃⲆᐃ[A.ᐃᐃⲆ], A.ᐃⲆΔ & 4);
          }
          if ((A.ᐃⲆΔ & 2) > 0 && -Rx.ⵠⵠΔ.x >= k - 235 - yo && -Rx.ⵠⵠΔ.x <= j + 350 && -Rx.ⵠⵠΔ.y >= m - hq - 275 && m + 490 >= -Rx.ⵠⵠΔ.y) {
            Kw(m - 230, k - 230, j + 230, Rx.ᐃⲆⵠⵠ[2], Qx.ΔΔᐃⲆᐃ[A.ᐃᐃⲆ], A.ᐃⲆΔ & 2);
          }
          if ((A.ᐃⲆΔ & 1) > 0 && -Rx.ⵠⵠΔ.x >= k - 235 - yo && -Rx.ⵠⵠΔ.x <= j + 350 && p - hq - 390 <= -Rx.ⵠⵠΔ.y && -Rx.ⵠⵠΔ.y <= p + 315) {
            Lw(p + 310, k - 230, j + 230, Rx.ᐃⲆⵠⵠ[3], Qx.ΔΔᐃⲆᐃ[A.ᐃᐃⲆ], A.ᐃⲆΔ & 1);
          }
        }
      }
    })();
    (function () {
      var C = Dw;
      var e = Ew;
      var i = Fw;
      var t = Gw;
      if (Px.ᐃᐃΔΔⵠ) {
        Iw(Cw, i, t, C, e, 621, "l", 2);
      }
      if (Px.ᐃᐃΔΔⵠ) {
        Iw(Cw, i, t, C, e, ns.ΔΔᐃᐃᐃ, "la", 5);
      }
      Iw(Cw, i, t, C, e, 203, "la", 5);
      Iw(ww, i, t, C, e, 620, "l", 2);
      if (Px.ᐃᐃΔΔⵠ) {
        Iw(Aw, i, t, C, e, 203, "la", 5);
        Iw(ww, i, t, C, e, 619, "l", 2);
      }
      Iw(Cw, i, t, C, e, 1052, "ma", 4);
      for (var n = Qx.Δⵠⵠ[76], F = 0; n.length > F; F++) {
        n[F].ᐃᐃΔⲆⵠⵠⵠ();
      }
      var G = Qx.Δⵠⵠ[0];
      for (F = 0; G.length > F; F++) {
        for (var P = G[F], aa = 0; aa < P.ⵠⲆᐃΔⲆ.length; aa++) {
          ef(P.ⵠⲆᐃΔⲆ[aa]);
        }
      }
      var ba = Qx.Δⵠⵠ[30];
      for (F = 0; F < ba.length; F++) {
        Sw(ba[F], 125);
        ba[F].ΔⲆᐃᐃⵠ(ba[F].info);
      }
      var g = Qx.Δⵠⵠ[18];
      for (F = 0; F < g.length; F++) {
        if (g[F].action == 2) {
          sf(g[F]);
        }
      }
      var ca = Qx.Δⵠⵠ[1];
      for (F = 0; F < ca.length; F++) {
        sf(ca[F], 113);
      }
      var da = Qx.Δⵠⵠ[22];
      for (F = 0; da.length > F; F++) {
        sf(da[F]);
      }
      var ea = Qx.Δⵠⵠ[23];
      for (F = 0; ea.length > F; F++) {
        sf(ea[F]);
      }
      var fa = Qx.Δⵠⵠ[6];
      for (F = 0; fa.length > F; F++) {
        sf(fa[F], 118);
      }
      var v = Qx.Δⵠⵠ[36];
      for (F = 0; F < v.length; F++) {
        Sw(v[F]);
      }
      var m = Qx.Δⵠⵠ[33];
      for (F = 0; F < m.length; F++) {
        Sw(m[F], 141);
      }
      var c = Qx.Δⵠⵠ[3];
      for (F = 0; c.length > F; F++) {
        sf(c[F]);
      }
      c = Qx.Δⵠⵠ[43];
      F = 0;
      for (; F < c.length; F++) {
        sf(c[F]);
      }
      c = Qx.Δⵠⵠ[3];
      F = 0;
      for (; F < c.length; F++) {
        Ow(c[F]);
      }
      var ha = Qx.Δⵠⵠ[44];
      for (F = 0; F < ha.length; F++) {
        if (!(ha[F].info & 15) || ha[F].info === 10) {
          Sw(ha[F]);
        }
      }
      var ia = Qx.Δⵠⵠ[54];
      for (F = 0; ia.length > F; F++) {
        if ((ia[F].info & 15) === 0 || ia[F].info === 10) {
          Sw(ia[F]);
        }
      }
      var ja = Qx.Δⵠⵠ[55];
      for (F = 0; F < ja.length; F++) {
        if ((ja[F].info & 15) === 0 || ja[F].info === 10) {
          Sw(ja[F]);
        }
      }
      var ka = Qx.Δⵠⵠ[79];
      for (F = 0; F < ka.length; F++) {
        Sw(ka[F], 132);
      }
      var la = Qx.Δⵠⵠ[39];
      for (F = 0; la.length > F; F++) {
        if (!(la[F].info & 15) || la[F].info === 10) {
          Sw(la[F]);
        }
      }
      var ma = Qx.Δⵠⵠ[40];
      for (F = 0; ma.length > F; F++) {
        if (!(ma[F].info & 15) || ma[F].info === 10) {
          Sw(ma[F]);
        }
      }
      var na = Qx.Δⵠⵠ[37];
      for (F = 0; na.length > F; F++) {
        if (!(na[F].info & 15) || na[F].info === 10) {
          Sw(na[F]);
        }
      }
      ka = Qx.Δⵠⵠ[31];
      F = 0;
      for (; ka.length > F; F++) {
        Sw(ka[F]);
      }
      var oa = Qx.Δⵠⵠ[86];
      for (F = 0; F < oa.length; F++) {
        Sw(oa[F], 250, 729);
      }
      var x = Qx.Δⵠⵠ[82];
      for (F = 0; F < x.length; F++) {
        Sw(x[F], 250, 729);
      }
      var J = Qx.Δⵠⵠ[87];
      for (F = 0; F < J.length; F++) {
        Sw(J[F], 854, 859);
      }
      var M = Qx.Δⵠⵠ[45];
      for (F = 0; F < M.length; F++) {
        if (M[F].info & 1) {
          Sw(M[F], 336);
        }
      }
      M = Qx.Δⵠⵠ[46];
      F = 0;
      for (; F < M.length; F++) {
        if (M[F].info & 1) {
          Sw(M[F], 373);
        }
      }
      M = Qx.Δⵠⵠ[47];
      F = 0;
      for (; M.length > F; F++) {
        if (M[F].info) {
          Sw(M[F], 376);
        }
      }
      M = Qx.Δⵠⵠ[48];
      F = 0;
      for (; F < M.length; F++) {
        if (M[F].info) {
          Sw(M[F], 379);
        }
      }
      M = Qx.Δⵠⵠ[49];
      F = 0;
      for (; F < M.length; F++) {
        if (M[F].info) {
          Sw(M[F], 500);
        }
      }
      M = Qx.Δⵠⵠ[53];
      F = 0;
      for (; F < M.length; F++) {
        if (M[F].info) {
          Sw(M[F], 376);
        }
      }
      M = Qx.Δⵠⵠ[10];
      F = 0;
      for (; F < M.length; F++) {
        if (M[F].info & 1) {
          Sw(M[F], 336);
        }
      }
      M = Qx.Δⵠⵠ[15];
      F = 0;
      for (; F < M.length; F++) {
        if (M[F].info & 1) {
          Sw(M[F], 373);
        }
      }
      M = Qx.Δⵠⵠ[16];
      F = 0;
      for (; F < M.length; F++) {
        if (M[F].info) {
          Sw(M[F], 376);
        }
      }
      M = Qx.Δⵠⵠ[17];
      F = 0;
      for (; F < M.length; F++) {
        if (M[F].info) {
          Sw(M[F], 379);
        }
      }
      M = Qx.Δⵠⵠ[21];
      F = 0;
      for (; M.length > F; F++) {
        if (M[F].info) {
          Sw(M[F], 500);
        }
      }
      M = Qx.Δⵠⵠ[51];
      F = 0;
      for (; M.length > F; F++) {
        if (M[F].info) {
          Sw(M[F], 376);
        }
      }
      var pa = Qx.Δⵠⵠ[80];
      for (F = 0; pa.length > F; F++) {
        Sw(pa[F], 264, 322);
      }
      var E = Qx.Δⵠⵠ[41];
      for (F = 0; E.length > F; F++) {
        Sw(E[F], 198);
      }
      n = Qx.Δⵠⵠ[76];
      F = 0;
      for (; F < n.length; F++) {
        Sw(n[F], ns.ᐃⵠΔⵠᐃⵠⲆ, ns.ΔⵠⲆᐃⵠⲆⵠΔⲆ);
      }
      var qa = Qx.Δⵠⵠ[91];
      for (F = 0; qa.length > F; F++) {
        if (qa[F].ΔΔⵠΔⵠⲆⵠ === 0) {
          Sw(qa[F]);
        }
      }
      G = Qx.Δⵠⵠ[0];
      F = 0;
      for (; G.length > F; F++) {
        P = G[F];
        if (G[F].ᐃΔΔⵠⲆ !== 227 && G[F].ᐃΔΔⵠⲆ !== 228 && G[F].ᐃΔΔⵠⲆ !== 229 && G[F].ᐃΔΔⵠⲆ !== 230 && G[F].ᐃΔΔⵠⲆ !== 91) {
          if (P.ⲆᐃⵠⵠⵠΔᐃ === 0) {
            if (P.ⲆⲆⵠΔΔᐃᐃ > 0.001) {
              P.ⲆⲆⵠΔΔᐃᐃ = ⲆⵠΔⵠ.ΔΔᐃⲆⵠ(P.ⲆⲆⵠΔΔᐃᐃ, 0, 0.018);
              var ra = 1 + Math.min(1, Math.max(P.ⲆⲆⵠΔΔᐃᐃ, 0) / 100) * 0.18;
              zo.save();
              zo.scale(ra, ra);
              Rx.ⵠⵠΔ.x /= ra;
              Rx.ⵠⵠΔ.y /= ra;
              P.x /= ra;
              P.y /= ra;
              P.r.x /= ra;
              P.r.y /= ra;
              P.ᐃΔΔⲆⲆᐃᐃ();
              P.ⲆⵠⵠΔ();
              Rx.ⵠⵠΔ.x *= ra;
              Rx.ⵠⵠΔ.y *= ra;
              P.x *= ra;
              P.y *= ra;
              P.r.x *= ra;
              P.r.y *= ra;
              zo.restore();
            } else {
              P.ΔΔⵠΔⵠⲆⵠ = 0;
              P.ᐃΔΔⲆⲆᐃᐃ();
              P.ⲆⵠⵠΔ();
            }
          }
        } else if (P.ⵠⵠⵠΔⵠ <= 180) {
          zo.save();
          ra = 1 + Math.min(1, Math.max(P.ΔᐃΔᐃⲆ - 30, 0) / 180) * 0.35;
          zo.scale(ra, ra);
          Rx.ⵠⵠΔ.x /= ra;
          Rx.ⵠⵠΔ.y /= ra;
          P.x /= ra;
          P.y /= ra;
          P.r.x /= ra;
          P.r.y /= ra;
          P.ΔΔⵠΔⵠⲆⵠ = 0;
          P.ᐃΔΔⲆⲆᐃᐃ();
          P.ⲆⵠⵠΔ();
          Rx.ⵠⵠΔ.x *= ra;
          Rx.ⵠⵠΔ.y *= ra;
          P.x *= ra;
          P.y *= ra;
          P.r.x *= ra;
          P.r.y *= ra;
          zo.restore();
        }
      }
      E = Qx.Δⵠⵠ[41];
      F = 0;
      for (; F < E.length; F++) {
        Sw(E[F], 913);
      }
      var sa = Qx.Δⵠⵠ[67];
      for (F = 0; sa.length > F; F++) {
        Sw(sa[F]);
      }
      var Q = Qx.Δⵠⵠ[62];
      for (F = 0; Q.length > F; F++) {
        Sw(Q[F], 419, 461);
      }
      var _ = Qx.Δⵠⵠ[70];
      for (F = 0; F < _.length; F++) {
        Sw(_[F]);
      }
      var R = Qx.Δⵠⵠ[60];
      for (F = 0; R.length > F; F++) {
        Sw(R[F], 299, 326);
      }
      var j = Qx.Δⵠⵠ[72];
      for (F = 0; j.length > F; F++) {
        Sw(j[F], 232, 1077);
      }
      var L = Qx.Δⵠⵠ[73];
      for (F = 0; L.length > F; F++) {
        Sw(L[F], 233, 1092);
      }
      ha = Qx.Δⵠⵠ[44];
      F = 0;
      for (; ha.length > F; F++) {
        if ((ha[F].info & 15) !== 0 && ha[F].info !== 10) {
          Sw(ha[F]);
        }
      }
      ia = Qx.Δⵠⵠ[54];
      F = 0;
      for (; F < ia.length; F++) {
        if ((ia[F].info & 15) !== 0 && ia[F].info !== 10) {
          Sw(ia[F]);
        }
      }
      ja = Qx.Δⵠⵠ[89];
      F = 0;
      for (; F < ja.length; F++) {
        Sw(ja[F], 239);
      }
      ja = Qx.Δⵠⵠ[55];
      F = 0;
      for (; F < ja.length; F++) {
        if (ja[F].info & 15 && ja[F].info !== 10) {
          Sw(ja[F]);
        }
      }
      c = Qx.Δⵠⵠ[43];
      F = 0;
      for (; c.length > F; F++) {
        Ow(c[F]);
      }
      la = Qx.Δⵠⵠ[39];
      F = 0;
      for (; F < la.length; F++) {
        if ((la[F].info & 15) !== 0 && la[F].info !== 10) {
          Sw(la[F]);
        }
      }
      ma = Qx.Δⵠⵠ[40];
      F = 0;
      for (; F < ma.length; F++) {
        if (ma[F].info & 15 && ma[F].info !== 10) {
          Sw(ma[F]);
        }
      }
      na = Qx.Δⵠⵠ[37];
      F = 0;
      for (; F < na.length; F++) {
        if ((na[F].info & 15) !== 0 && na[F].info !== 10) {
          Sw(na[F]);
        }
      }
      var W = Qx.Δⵠⵠ[81];
      for (F = 0; F < W.length; F++) {
        Sw(W[F], 691, 697);
      }
      var q = Qx.Δⵠⵠ[66];
      for (F = 0; q.length > F; F++) {
        Sw(q[F], 637, 687);
      }
      var N = Qx.Δⵠⵠ[65];
      for (F = 0; N.length > F; F++) {
        Sw(N[F], 673, 688);
      }
      var O = Qx.Δⵠⵠ[61];
      for (F = 0; O.length > F; F++) {
        Sw(O[F], 260, 333);
      }
      var H = Qx.Δⵠⵠ[88];
      for (F = 0; F < H.length; F++) {
        Sw(H[F], 1033, 1034);
      }
      var U = Qx.Δⵠⵠ[63];
      for (F = 0; F < U.length; F++) {
        Sw(U[F], 445, 462);
      }
      var Y = Qx.Δⵠⵠ[77];
      for (F = 0; Y.length > F; F++) {
        Sw(Y[F]);
      }
      var K = Qx.Δⵠⵠ[68];
      for (F = 0; F < K.length; F++) {
        Sw(K[F], 918, 919);
      }
      var V = Qx.Δⵠⵠ[71];
      for (F = 0; F < V.length; F++) {
        Sw(V[F]);
      }
      var X = Qx.Δⵠⵠ[78];
      for (F = 0; X.length > F; F++) {
        Sw(X[F], 1218, 1219);
      }
      var Z = Qx.Δⵠⵠ[64];
      for (F = 0; F < Z.length; F++) {
        if (Z[F].scale === 1) {
          Sw(Z[F], 449, 463);
        }
      }
      Z = Qx.Δⵠⵠ[69];
      F = 0;
      for (; F < Z.length; F++) {
        if (Z[F].scale === 1) {
          Sw(Z[F], 450, 464);
        }
      }
      var ta = Qx.Δⵠⵠ[11];
      for (F = 0; ta.length > F; F++) {
        Sw(ta[F]);
      }
      var ua = Qx.Δⵠⵠ[2];
      for (F = 0; F < ua.length; F++) {
        Sw(ua[F], 114);
      }
      g = Qx.Δⵠⵠ[18];
      F = 0;
      for (; g.length > F; F++) {
        Sw(g[F]);
      }
      var va = Qx.Δⵠⵠ[34];
      for (F = 0; F < va.length; F++) {
        Sw(va[F]);
      }
      M = Qx.Δⵠⵠ[10];
      F = 0;
      for (; F < M.length; F++) {
        if (!(M[F].info & 1)) {
          Sw(M[F], 166);
        }
        M[F].ΔⲆᐃᐃⵠ(M[F].info >> 1);
      }
      M = Qx.Δⵠⵠ[15];
      F = 0;
      for (; M.length > F; F++) {
        if (!(M[F].info & 1)) {
          Sw(M[F], 171);
        }
        M[F].ΔⲆᐃᐃⵠ(M[F].info >> 1);
      }
      M = Qx.Δⵠⵠ[16];
      F = 0;
      for (; F < M.length; F++) {
        if (!(M[F].info & 1)) {
          Sw(M[F], 172);
        }
        M[F].ΔⲆᐃᐃⵠ(M[F].info >> 1);
      }
      M = Qx.Δⵠⵠ[17];
      F = 0;
      for (; M.length > F; F++) {
        if (!(M[F].info & 1)) {
          Sw(M[F], 173);
        }
        M[F].ΔⲆᐃᐃⵠ(M[F].info >> 1);
      }
      M = Qx.Δⵠⵠ[21];
      F = 0;
      for (; M.length > F; F++) {
        if (!(M[F].info & 1)) {
          Sw(M[F], 124);
        }
        M[F].ΔⲆᐃᐃⵠ(M[F].info >> 1);
      }
      M = Qx.Δⵠⵠ[51];
      F = 0;
      for (; M.length > F; F++) {
        if (!(M[F].info & 1)) {
          Sw(M[F], 218);
        }
        M[F].ΔⲆᐃᐃⵠ(M[F].info >> 1);
      }
      M = Qx.Δⵠⵠ[45];
      F = 0;
      for (; M.length > F; F++) {
        if (!(M[F].info & 1)) {
          Sw(M[F], 212);
        }
        M[F].ΔⲆᐃᐃⵠ(M[F].info >> 1);
      }
      M = Qx.Δⵠⵠ[46];
      F = 0;
      for (; F < M.length; F++) {
        if (!(M[F].info & 1)) {
          Sw(M[F], 213);
        }
        M[F].ΔⲆᐃᐃⵠ(M[F].info >> 1);
      }
      M = Qx.Δⵠⵠ[47];
      F = 0;
      for (; F < M.length; F++) {
        if (!(M[F].info & 1)) {
          Sw(M[F], 214);
        }
        M[F].ΔⲆᐃᐃⵠ(M[F].info >> 1);
      }
      M = Qx.Δⵠⵠ[48];
      F = 0;
      for (; M.length > F; F++) {
        if (!(M[F].info & 1)) {
          Sw(M[F], 215);
        }
        M[F].ΔⲆᐃᐃⵠ(M[F].info >> 1);
      }
      M = Qx.Δⵠⵠ[49];
      F = 0;
      for (; M.length > F; F++) {
        if (!(M[F].info & 1)) {
          Sw(M[F], 216);
        }
        M[F].ΔⲆᐃᐃⵠ(M[F].info >> 1);
      }
      M = Qx.Δⵠⵠ[53];
      F = 0;
      for (; M.length > F; F++) {
        if (!(M[F].info & 1)) {
          Sw(M[F], 220);
        }
        M[F].ΔⲆᐃᐃⵠ(M[F].info >> 1);
      }
      var wa = Qx.Δⵠⵠ[4];
      for (F = 0; wa.length > F; F++) {
        Sw(wa[F], 162);
        wa[F].ΔⲆᐃᐃⵠ(wa[F].info);
      }
      wa = Qx.Δⵠⵠ[7];
      F = 0;
      for (; F < wa.length; F++) {
        Sw(wa[F], 163);
        wa[F].ΔⲆᐃᐃⵠ(wa[F].info);
      }
      wa = Qx.Δⵠⵠ[8];
      F = 0;
      for (; wa.length > F; F++) {
        Sw(wa[F], 164);
        wa[F].ΔⲆᐃᐃⵠ(wa[F].info);
      }
      wa = Qx.Δⵠⵠ[9];
      F = 0;
      for (; wa.length > F; F++) {
        Sw(wa[F], 165);
        wa[F].ΔⲆᐃᐃⵠ(wa[F].info);
      }
      wa = Qx.Δⵠⵠ[19];
      F = 0;
      for (; wa.length > F; F++) {
        Sw(wa[F], 122);
        wa[F].ΔⲆᐃᐃⵠ(wa[F].info);
      }
      wa = Qx.Δⵠⵠ[50];
      F = 0;
      for (; wa.length > F; F++) {
        Sw(wa[F], 217);
        wa[F].ΔⲆᐃᐃⵠ(wa[F].info);
      }
      var xa = Qx.Δⵠⵠ[5];
      for (F = 0; xa.length > F; F++) {
        Sw(xa[F], 160);
        xa[F].ΔⲆᐃᐃⵠ(xa[F].info);
      }
      xa = Qx.Δⵠⵠ[12];
      F = 0;
      for (; xa.length > F; F++) {
        Sw(xa[F], 168);
        xa[F].ΔⲆᐃᐃⵠ(xa[F].info);
      }
      xa = Qx.Δⵠⵠ[13];
      F = 0;
      for (; F < xa.length; F++) {
        Sw(xa[F], 169);
        xa[F].ΔⲆᐃᐃⵠ(xa[F].info);
      }
      xa = Qx.Δⵠⵠ[14];
      F = 0;
      for (; xa.length > F; F++) {
        Sw(xa[F], 170);
        xa[F].ΔⲆᐃᐃⵠ(xa[F].info);
      }
      xa = Qx.Δⵠⵠ[20];
      F = 0;
      for (; xa.length > F; F++) {
        Sw(xa[F], 123);
        xa[F].ΔⲆᐃᐃⵠ(xa[F].info);
      }
      xa = Qx.Δⵠⵠ[52];
      F = 0;
      for (; xa.length > F; F++) {
        Sw(xa[F], 219);
        xa[F].ΔⲆᐃᐃⵠ(xa[F].info);
      }
      var ya = Qx.Δⵠⵠ[35];
      for (F = 0; ya.length > F; F++) {
        var za = ya[F];
        if (za.info > 0) {
          Sw(za, 788);
        } else {
          Sw(za, 182);
        }
      }
      var Aa = Qx.Δⵠⵠ[29];
      for (F = 0; F < Aa.length; F++) {
        Sw(Aa[F], 159);
      }
      Iw(Cw, i, t, C, e, 111, "g", 2);
      Iw(Cw, i, t, C, e, 415, "gw", 2);
      Iw(Cw, i, t, C, e, 112, "d", 2);
      Iw(Cw, i, t, C, e, 416, "dw", 2);
      Iw(Cw, i, t, C, e, 110, "p", 0);
      Iw(Cw, i, t, C, e, 241, "m", 2);
      Iw(Cw, i, t, C, e, 121, "a", 2);
      Iw(Cw, i, t, C, e, 202, "re", 2);
      Iw(Cw, i, t, C, e, 679, "cs", 3, 3);
      Iw(Cw, i, t, C, e, 679, "cs", 2, 2);
      Iw(Cw, i, t, C, e, 679, "cs", 1, 1);
      Iw(Cw, i, t, C, e, 679, "cs", 0, 0);
      Iw(Cw, i, t, C, e, 676, "cs", 3, 3);
      Iw(Cw, i, t, C, e, 676, "cs", 2, 2);
      Iw(Cw, i, t, C, e, 676, "cs", 1, 1);
      Iw(Cw, i, t, C, e, 676, "cs", 0, 0);
      var Ba = Qx.Δⵠⵠ[100];
      for (F = 0; F < Ba.length; F++) {
        for (aa = 0; Ba[F].info > aa; aa++) {
          Sw(Ba[F].ᐃⵠⵠᐃ[aa], 294);
        }
      }
      Iw(Cw, i, t, C, e, 108, "s", 2);
      var Ca = Qx.Δⵠⵠ[24];
      for (F = 0; F < Ca.length; F++) {
        Sw(Ca[F]);
      }
      Ca = Qx.Δⵠⵠ[25];
      F = 0;
      for (; F < Ca.length; F++) {
        Sw(Ca[F]);
      }
      Ca = Qx.Δⵠⵠ[26];
      F = 0;
      for (; Ca.length > F; F++) {
        Sw(Ca[F]);
      }
      Ca = Qx.Δⵠⵠ[27];
      F = 0;
      for (; Ca.length > F; F++) {
        Sw(Ca[F]);
      }
      Ca = Qx.Δⵠⵠ[28];
      F = 0;
      for (; F < Ca.length; F++) {
        Sw(Ca[F]);
      }
      var Da = Qx.Δⵠⵠ[32];
      for (F = 0; F < Da.length; F++) {
        sf(Da[F]);
      }
      ca = Qx.Δⵠⵠ[1];
      F = 0;
      for (; ca.length > F; F++) {
        Ow(ca[F]);
      }
      ca = Qx.Δⵠⵠ[6];
      F = 0;
      for (; ca.length > F; F++) {
        Ow(ca[F]);
      }
      g = Qx.Δⵠⵠ[18];
      F = 0;
      for (; g.length > F; F++) {
        if (g[F].action == 2) {
          Ow(g[F]);
        }
      }
      va = Qx.Δⵠⵠ[34];
      F = 0;
      for (; va.length > F; F++) {
        Ow(va[F]);
      }
      da = Qx.Δⵠⵠ[22];
      F = 0;
      for (; da.length > F; F++) {
        Ow(da[F]);
      }
      ea = Qx.Δⵠⵠ[23];
      F = 0;
      for (; ea.length > F; F++) {
        Ow(ea[F]);
        ea[F].ΔⲆᐃᐃⵠ(ea[F].info);
      }
      Iw(Cw, i, t, C, e, 989, "c", 0);
      Iw(Cw, i, t, C, e, 109, "t", 5, 4);
      Iw(Cw, i, t, C, e, 413, "f", 2, 2);
      Iw(Cw, i, t, C, e, 693, "plm", 0, 0);
      Iw(Cw, i, t, C, e, 307, "b", 3, 2);
      Iw(Cw, i, t, C, e, 109, "t", 3, 2);
      Iw(Cw, i, t, C, e, 307, "b", 1, 0);
      Iw(Cw, i, t, C, e, 413, "f", 1, 1);
      Iw(Cw, i, t, C, e, 693, "plm", 1, 1);
      Iw(Cw, i, t, C, e, 109, "t", 1, 0);
      Iw(Cw, i, t, C, e, 413, "f", 0, 0);
      Iw(Cw, i, t, C, e, 693, "plm", 2, 2);
      Da = Qx.Δⵠⵠ[32];
      F = 0;
      for (; Da.length > F; F++) {
        Ow(Da[F]);
      }
      var Ea = Qx.Δⵠⵠ[56];
      for (F = 0; Ea.length > F; F++) {
        Sw(Ea[F], 221);
      }
      G = Qx.Δⵠⵠ[0];
      F = 0;
      for (; G.length > F; F++) {
        if ((P = G[F]).ⲆᐃⵠⵠⵠΔᐃ === 1 && (P.ⵠⵠⵠΔⵠ < 180 || P.ᐃΔΔⵠⲆ !== 227 && P.ᐃΔΔⵠⲆ !== 228 && P.ᐃΔΔⵠⲆ !== 91 && P.ᐃΔΔⵠⲆ !== 229 && P.ᐃΔΔⵠⲆ !== 230)) {
          P.ⲆⲆⵠΔΔᐃᐃ = ⲆⵠΔⵠ.ΔΔᐃⲆⵠ(P.ⲆⲆⵠΔΔᐃᐃ, 100, 0.018);
          ra = 1 + Math.min(1, Math.max(P.ⲆⲆⵠΔΔᐃᐃ, 0) / 100) * 0.18;
          zo.save();
          zo.scale(ra, ra);
          Rx.ⵠⵠΔ.x /= ra;
          Rx.ⵠⵠΔ.y /= ra;
          P.x /= ra;
          P.y /= ra;
          P.r.x /= ra;
          P.r.y /= ra;
          P.ᐃΔΔⲆⲆᐃᐃ();
          P.ⲆⵠⵠΔ();
          Rx.ⵠⵠΔ.x *= ra;
          Rx.ⵠⵠΔ.y *= ra;
          P.x *= ra;
          P.y *= ra;
          P.r.x *= ra;
          P.r.y *= ra;
          zo.restore();
        }
      }
      var Fa = Qx.Δⵠⵠ[38];
      for (F = 0; F < Fa.length; F++) {
        Sw(Fa[F], 190);
        Fa[F].ΔⲆᐃᐃⵠ(Fa[F].info);
      }
      var Ga = Qx.Δⵠⵠ[90];
      for (F = 0; F < Ga.length; F++) {
        Sw(Ga[F], 245, 246);
      }
      var Ha = Qx.Δⵠⵠ[42];
      for (F = 0; Ha.length > F; F++) {
        Sw(Ha[F], 201);
      }
      G = Qx.Δⵠⵠ[0];
      F = 0;
      for (; F < G.length; F++) {
        P = G[F];
        if ((P.ᐃΔΔⵠⲆ === 227 || P.ᐃΔΔⵠⲆ === 228 || P.ᐃΔΔⵠⲆ === 91 || P.ᐃΔΔⵠⲆ === 229 || P.ᐃΔΔⵠⲆ === 230) && P.ⵠⵠⵠΔⵠ > 180) {
          P.ΔΔⵠΔⵠⲆⵠ = 1;
          zo.save();
          ra = 1 + Math.min(1, Math.max(P.ΔᐃΔᐃⲆ - 30, 0) / 180) * 0.35;
          zo.scale(ra, ra);
          Rx.ⵠⵠΔ.x /= ra;
          Rx.ⵠⵠΔ.y /= ra;
          P.x /= ra;
          P.y /= ra;
          P.r.x /= ra;
          P.r.y /= ra;
          P.ᐃΔΔⲆⲆᐃᐃ();
          P.ⲆⵠⵠΔ();
          Rx.ⵠⵠΔ.x *= ra;
          Rx.ⵠⵠΔ.y *= ra;
          P.x *= ra;
          P.y *= ra;
          P.r.x *= ra;
          P.r.y *= ra;
          zo.restore();
        }
      }
      qa = Qx.Δⵠⵠ[91];
      F = 0;
      for (; qa.length > F; F++) {
        if (qa[F].ΔΔⵠΔⵠⲆⵠ === 1) {
          Sw(qa[F]);
        }
      }
      Z = Qx.Δⵠⵠ[64];
      F = 0;
      for (; F < Z.length; F++) {
        if (Z[F].scale > 1) {
          Sw(Z[F], 449, 463);
        }
      }
      Z = Qx.Δⵠⵠ[69];
      F = 0;
      for (; F < Z.length; F++) {
        if (Z[F].scale > 1) {
          Sw(Z[F], 450, 464);
        }
      }
      var Ia = Qx.Δⵠⵠ[74];
      for (F = 0; F < Ia.length; F++) {
        Sw(Ia[F], 235, 1107);
      }
      var Ja = Qx.Δⵠⵠ[75];
      for (F = 0; F < Ja.length; F++) {
        Sw(Ja[F], 238, 1128);
      }
      if ((vw += Yx * 15) > 60) {
        vw -= 60;
      }
      Iw(xw, i, t, C, e, 1041, "fo", 2);
      Iw(xw, i, t, C, e, 244, "fod", 2);
    })();
    if (Px.ᐃᐃΔΔⵠ && Qx.mode !== 2 && Qx.mode !== 4 && Qx.mode !== 5) {
      (function () {
        var a = Rx.ⵠΔᐃᐃΔ;
        if (a.ΔⲆⵠᐃᐃ === 0) {
          a.ⲆⲆᐃⲆᐃ = Math.max(0, a.ⲆⲆᐃⲆᐃ - Yx / 10);
        } else {
          a.ⲆⲆᐃⲆᐃ = Math.min(1, a.ⲆⲆᐃⲆᐃ + Yx / 10);
        }
        for (var b = a.ᐃΔΔᐃΔ, c = 0; c < b.length; c++) {
          var d = b[c];
          a.ⵠⵠᐃ(d);
          Jw(471, d.id, Rx.ⵠⵠΔ.x + d.x, Rx.ⵠⵠΔ.y + d.y, d.alpha);
        }
        for (c = 0; c < b.length; c++) {
          if ((d = b[c]).Ⲇᐃᐃᐃⵠ <= 0 || d.x > -Rx.ⵠⵠΔ.x + yo || -Rx.ⵠⵠΔ.x - Rx.ⵠⵠΔ.w / 2 > d.x || -Rx.ⵠⵠΔ.y + hq < d.y) {
            b.splice(c, 1);
          }
        }
        var e = -Rx.ⵠⵠΔ.y;
        if (Qx.ΔΔᐃΔⵠ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = Rx.ᐃⲆᐃᐃΔ;
        if (a.ΔⲆⵠᐃᐃ === 0) {
          a.ⲆⲆᐃⲆᐃ = Math.max(0, a.ⲆⲆᐃⲆᐃ - Yx / 10);
        } else {
          a.ⲆⲆᐃⲆᐃ = Math.min(1, a.ⲆⲆᐃⲆᐃ + Yx / 10);
        }
        for (var b = a.ᐃΔΔᐃΔ, c = 0; b.length > c; c++) {
          var d = b[c];
          a.ⵠⵠᐃ(d);
          Jw(470, d.id, Rx.ⵠⵠΔ.x + d.x, Rx.ⵠⵠΔ.y + d.y, d.alpha);
        }
        for (c = 0; c < b.length; c++) {
          if ((d = b[c]).Ⲇᐃᐃᐃⵠ <= 0 || d.x > -Rx.ⵠⵠΔ.x + yo || d.x < -Rx.ⵠⵠΔ.x || d.y > -Rx.ⵠⵠΔ.y + hq) {
            b.splice(c, 1);
          }
        }
        var e = -Rx.ⵠⵠΔ.y;
        if (Qx.ⲆᐃⵠΔΔ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = Rx.ⵠᐃΔⵠⵠΔΔ;
        for (var b = a.ᐃΔΔᐃΔ, c = 0; b.length > c; c++) {
          var d = b[c];
          a.ⵠⵠᐃ(d);
          Jw(942, d.id, Rx.ⵠⵠΔ.x + d.x, Rx.ⵠⵠΔ.y + d.y, d.alpha);
        }
        for (c = 0; b.length > c; c++) {
          if ((d = b[c]).Ⲇᐃᐃᐃⵠ <= 0 || d.x > -Rx.ⵠⵠΔ.x + yo || -Rx.ⵠⵠΔ.x > d.x || -Rx.ⵠⵠΔ.y + hq < d.y) {
            b.splice(c, 1);
          }
        }
        var e = -Rx.ⵠⵠΔ.y;
        if (Qx.ⲆⲆᐃᐃⵠ > -1000) {
          a.add(e);
        }
      })();
    }
    if (Qx.transition && a) {
      Qx.transition = Zq;
      Qx.ⵠᐃΔᐃ.ᐃⲆΔ = 0;
      Qx.ⵠᐃΔᐃ.ⵠⲆⲆ = false;
    }
  }
  function Iw(b, c, d, e, f, i, a, j, k, h) {
    if (Qx.transition) {
      zo.globalAlpha = 1;
      b(c, d, e, f, i, a, j, k, h);
      Qx.time = Qx.time ? 0 : 1;
      zo.globalAlpha = 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
      b(c, d, e, f, i, a, j, k, h);
      Qx.time = Qx.time ? 0 : 1;
      zo.globalAlpha = 1;
    } else {
      b(c, d, e, f, i, a, j, k, h);
    }
  }
  function Jw(a, b, c, d, e) {
    if (Qx.transition && e == 1) {
      zo.globalAlpha = 1;
      Np(zo, ᐃΔ[a][Qx.time][b], c, d);
      Qx.time = Qx.time ? 0 : 1;
      zo.globalAlpha = 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
      Np(zo, ᐃΔ[a][Qx.time][b], c, d);
      Qx.time = Qx.time ? 0 : 1;
      zo.globalAlpha = 1;
    } else {
      zo.globalAlpha = e;
      Np(zo, ᐃΔ[a][Qx.time][b], c, d);
      zo.globalAlpha = 1;
    }
  }
  function Kw(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = Rx.ⵠⵠΔ.y + j + 710;
    var g = Math.max(Rx.ⵠⵠΔ.x + e, 0);
    var l = Math.max(-Rx.ⵠⵠΔ.x + yo - i - 100, 0);
    var t = g;
    var b = yo - g - l;
    if (o) {
      var d = q.ᐃᐃⲆ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = u;
    var c = t;
    var p = -d.x + 0;
    var C = b;
    var G = u += -d.x + 0 + 2;
    if (o) {
      d = q.ᐃᐃⲆ(r);
    } else {
      d = r.r;
    }
    var f = h - 250 - u - d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f + 2) - 2;
    if (o) {
      d = q.ᐃᐃⲆ(s);
    } else {
      d = s.r;
    }
    if (k > u + (f = h - 350 - u - d.x)) {
      var A = ie;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var E = u += f + 2;
    } else {
      A = Pq;
      u = k;
      E = -1;
    }
    f = h - 700 - u;
    if (Qx.transition) {
      var N = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
      zo.fillStyle = Mw(9, 55, 63, 11, 106, 132, N);
    } else {
      zo.fillStyle = ns.ᐃⲆⲆᐃⵠ[Qx.time];
    }
    zo.fillRect(c, F, C, p);
    if (o) {
      if (Qx.transition) {
        N = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
        zo.fillStyle = Mw(15, 70, 76, 42, 139, 155, N);
      } else {
        zo.fillStyle = ns.ⵠᐃⵠⵠΔΔᐃ[Qx.time];
      }
    } else if (Qx.transition) {
      N = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
      zo.fillStyle = Mw(9, 55, 63, 11, 106, 132, N);
    } else {
      zo.fillStyle = ns.ᐃⲆⲆᐃⵠ[Qx.time];
    }
    zo.fillRect(y, H, K, w);
    if (A) {
      if (o) {
        if (Qx.transition) {
          N = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
          zo.fillStyle = Mw(17, 94, 96, 169, 214, 211, N);
        } else {
          zo.fillStyle = ns.ΔᐃⲆⲆⵠⵠⵠ[Qx.time];
        }
      } else if (Qx.transition) {
        N = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
        zo.fillStyle = Mw(9, 55, 63, 11, 106, 132, N);
      } else {
        zo.fillStyle = ns.ᐃⲆⲆᐃⵠ[Qx.time];
      }
      zo.fillRect(J, L, B, M);
    }
    if (Px.ᐃᐃΔΔⵠ && o) {
      q.ΔⵠΔᐃᐃΔⲆⵠΔ(k, E, G, h, -Rx.ⵠⵠΔ.x + c, -Rx.ⵠⵠΔ.x + c + C);
    }
  }
  function Lw(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = Rx.ⵠⵠΔ.y + j - 700;
    var g = Math.max(Rx.ⵠⵠΔ.x + e, 0);
    var l = Math.max(-Rx.ⵠⵠΔ.x + yo - i - 100, 0);
    var t = g;
    var b = yo - g - l;
    if (o) {
      var d = q.ᐃᐃⲆ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var z = t;
    var c = u;
    var p = d.x + 0;
    var C = b;
    var F = u += d.x + 0 - 2;
    if (o) {
      d = q.ᐃᐃⲆ(r);
    } else {
      d = r.r;
    }
    var G = h + 250 - u + d.x;
    var H = u;
    var w = t;
    var K = G;
    var k = b;
    var A = (u += G - 2) - 2;
    if (o) {
      d = q.ᐃᐃⲆ(s);
    } else {
      d = s.r;
    }
    if (A < u + (G = h + 350 - u + d.x) - 3) {
      var x = true;
      var L = u;
      var M = t;
      var B = G;
      var E = b;
      var D = u += G - 2;
    } else {
      x = f;
      u = A;
      D = -1;
    }
    G = h + 700 - u;
    if (Qx.transition) {
      var N = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
      zo.fillStyle = Mw(9, 55, 63, 11, 106, 132, N);
    } else {
      zo.fillStyle = ns.ᐃⲆⲆᐃⵠ[Qx.time];
    }
    zo.fillRect(z, c, C, p);
    if (o) {
      if (Qx.transition) {
        N = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
        zo.fillStyle = Mw(15, 70, 76, 42, 139, 155, N);
      } else {
        zo.fillStyle = ns.ⵠᐃⵠⵠΔΔᐃ[Qx.time];
      }
    } else if (Qx.transition) {
      N = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
      zo.fillStyle = Mw(9, 55, 63, 11, 106, 132, N);
    } else {
      zo.fillStyle = ns.ᐃⲆⲆᐃⵠ[Qx.time];
    }
    zo.fillRect(w, H, k, K);
    if (x) {
      if (o) {
        if (Qx.transition) {
          N = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
          zo.fillStyle = Mw(17, 94, 96, 169, 214, 211, N);
        } else {
          zo.fillStyle = ns.ΔᐃⲆⲆⵠⵠⵠ[Qx.time];
        }
      } else if (Qx.transition) {
        N = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
        zo.fillStyle = Mw(9, 55, 63, 11, 106, 132, N);
      } else {
        zo.fillStyle = ns.ᐃⲆⲆᐃⵠ[Qx.time];
      }
      zo.fillRect(M, L, E, B);
    }
    if (Px.ᐃᐃΔΔⵠ && o) {
      q.ᐃⲆⲆⲆⲆⵠΔⲆⲆ(A, D, F, h, -Rx.ⵠⵠΔ.x + z, -Rx.ⵠⵠΔ.x + z + C);
    }
  }
  function Mw(b, c, d, e, f, g, a) {
    var i;
    var j = "#";
    j += (i = Math.floor(e * a + b * (1 - a))) < 16 ? "0" + i.toString(16) : i.toString(16);
    j += (i = Math.floor(a * f + c * (1 - a))) < 16 ? "0" + i.toString(16) : i.toString(16);
    return j += (i = Math.floor(a * g + (1 - a) * d)) < 16 ? "0" + i.toString(16) : i.toString(16);
  }
  function Nw(a, b, c, d) {
    if (Qx.transition) {
      zo.globalAlpha = 1;
      Np(zo, ᐃΔ[a][Qx.time], c, d);
      Qx.time = Qx.time ? 0 : 1;
      zo.globalAlpha = 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
      Np(zo, ᐃΔ[a][Qx.time], c, d);
      Qx.time = Qx.time ? 0 : 1;
      zo.globalAlpha = 1;
    } else {
      Np(zo, b, c, d);
    }
  }
  function Ow(a, b) {
    if (Qx.transition) {
      zo.globalAlpha = 1;
      a.ⵠΔᐃⵠⲆ(b);
      Qx.time = Qx.time ? 0 : 1;
      zo.globalAlpha = 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
      a.ⵠΔᐃⵠⲆ(b);
      Qx.time = Qx.time ? 0 : 1;
      zo.globalAlpha = 1;
    } else {
      a.ⵠΔᐃⵠⲆ(b);
    }
  }
  function Pw(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = Rx.ⵠⵠΔ.x + j + 820;
    var g = Math.max(Rx.ⵠⵠΔ.y + e, 0);
    var l = Math.max(-Rx.ⵠⵠΔ.y + hq - i - 100, 0);
    var t = g;
    var b = hq - g - l;
    if (o) {
      var d = q.ᐃᐃⲆ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var F = u;
    var c = t;
    var p = -d.x + 0;
    var C = b;
    var G = u += -d.x + 0 + 2;
    if (o) {
      d = q.ᐃᐃⲆ(r);
    } else {
      d = r.r;
    }
    var f = h - 250 - u - d.x;
    var H = u;
    var y = t;
    var w = f;
    var K = b;
    var k = (u += f + 2) - 2;
    if (o) {
      d = q.ᐃᐃⲆ(s);
    } else {
      d = s.r;
    }
    if (u + (f = h - 350 - u - d.x) < k) {
      var A = Rg;
      var L = u;
      var J = t;
      var M = f;
      var B = b;
      var E = u += f + 2;
    } else {
      A = tg;
      u = k;
      E = -1;
    }
    f = h - 700 - u;
    if (Qx.transition) {
      var N = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
      zo.fillStyle = Mw(9, 55, 63, 11, 106, 132, N);
    } else {
      zo.fillStyle = ns.ᐃⲆⲆᐃⵠ[Qx.time];
    }
    zo.fillRect(F, c, p, C);
    if (o) {
      if (Qx.transition) {
        N = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
        zo.fillStyle = Mw(15, 70, 76, 42, 139, 155, N);
      } else {
        zo.fillStyle = ns.ⵠᐃⵠⵠΔΔᐃ[Qx.time];
      }
    } else if (Qx.transition) {
      N = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
      zo.fillStyle = Mw(9, 55, 63, 11, 106, 132, N);
    } else {
      zo.fillStyle = ns.ᐃⲆⲆᐃⵠ[Qx.time];
    }
    zo.fillRect(H, y, w, K);
    if (A) {
      if (o) {
        if (Qx.transition) {
          N = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
          zo.fillStyle = Mw(17, 94, 96, 169, 214, 211, N);
        } else {
          zo.fillStyle = ns.ΔᐃⲆⲆⵠⵠⵠ[Qx.time];
        }
      } else if (Qx.transition) {
        N = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
        zo.fillStyle = Mw(9, 55, 63, 11, 106, 132, N);
      } else {
        zo.fillStyle = ns.ᐃⲆⲆᐃⵠ[Qx.time];
      }
      zo.fillRect(L, J, M, B);
    }
    if (Px.ᐃᐃΔΔⵠ && o) {
      q.ⵠΔΔΔᐃᐃΔⲆⲆ(k, E, G, h, -Rx.ⵠⵠΔ.y + c, -Rx.ⵠⵠΔ.y + c + C);
    }
  }
  function Qw(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = Rx.ⵠⵠΔ.y + f - 700;
    var g = Math.max(Rx.ⵠⵠΔ.x + e, 0);
    var l = Math.max(-Rx.ⵠⵠΔ.x + yo - i - 100, 0);
    var r = g;
    var b = yo - g - l;
    if (n) {
      var d = j.ᐃᐃⲆ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += d + 0 - 2;
    if (n) {
      d = j.ᐃᐃⲆ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h + 250 - s + d;
    var u = (s += t - 2) - 2;
    if (n) {
      d = j.ᐃᐃⲆ(q).x;
    } else {
      d = q.r.x;
    }
    if (s + (t = h + 350 - s + d) - 3 > u) {
      s += t - 2;
    } else {
      s = u;
    }
    t = h + 700 - s;
    if (n > 0 && k.ⲆⵠᐃⲆⲆΔⲆ === 1) {
      if (Qx.transition) {
        var p = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
        zo.fillStyle = Mw(15, 77, 72, 252, 239, 187, p);
      } else {
        zo.fillStyle = ns.ⲆⵠΔΔⵠⵠⲆ[Qx.time];
      }
      zo.fillRect(r, s, b, t);
    } else {
      if (Qx.transition) {
        p = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
        zo.fillStyle = Mw(k.ⵠⲆⵠ[0], k.ⵠⲆⵠ[1], k.ⵠⲆⵠ[2], k.ⵠΔΔ[0], k.ⵠΔΔ[1], k.ⵠΔΔ[2], p);
      } else {
        zo.fillStyle = k.ᐃⲆᐃᐃᐃ[Qx.time];
      }
      zo.fillRect(r, s, b, t);
    }
  }
  function Rw(a) {
    zo.save();
    zo.translate(Rx.ⵠⵠΔ.x + a.x, Rx.ⵠⵠΔ.y + a.y);
    zo.rotate(a.angle);
    zo.globalAlpha = a.alpha;
    var b = ᐃΔ[a.id][Qx.time];
    Np(zo, b, -b.width / 2, -b.height / 2);
    zo.globalAlpha = 1;
    zo.restore();
  }
  function Sw(a, b, c) {
    if (Qx.transition) {
      zo.globalAlpha = 1;
      a.ⲆⵠⵠΔ(b, c);
      Qx.time = Qx.time ? 0 : 1;
      zo.globalAlpha = 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
      a.ⲆⵠⵠΔ(b, c);
      Qx.time = Qx.time ? 0 : 1;
      zo.globalAlpha = 1;
    } else {
      a.ⲆⵠⵠΔ(b, c);
    }
  }
  function ef(a) {
    zo.globalAlpha = a.alpha;
    hd(zo, a.x + Rx.ⵠⵠΔ.x, a.y + Rx.ⵠⵠΔ.y, a.r);
    od(zo, ns.ⵠⵠⲆΔⵠⲆᐃ[Qx.time]);
    zo.globalAlpha = 1;
  }
  function tf(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = Rx.ⵠⵠΔ.x + f + 820;
    var g = Math.max(Rx.ⵠⵠΔ.y + e, 0);
    var l = Math.max(-Rx.ⵠⵠΔ.y + hq - i - 100, 0);
    var r = g;
    var b = hq - g - l;
    if (n) {
      var d = j.ᐃᐃⲆ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += -d + 0 + 2;
    if (n) {
      d = j.ᐃᐃⲆ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h - 250 - s - d;
    var u = (s += t + 2) - 2;
    if (n) {
      d = j.ᐃᐃⲆ(q).x;
    } else {
      d = q.r.x;
    }
    if (s + (t = h - 350 - s - d) < u) {
      s += t + 2;
    } else {
      s = u;
    }
    t = h - 700 - s;
    if (n > 0 && k.ⲆⵠᐃⲆⲆΔⲆ === 1) {
      if (Qx.transition) {
        var p = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
        zo.fillStyle = Mw(15, 77, 72, 252, 239, 187, p);
      } else {
        zo.fillStyle = ns.ⲆⵠΔΔⵠⵠⲆ[Qx.time];
      }
      zo.fillRect(s, r, t, b);
    } else {
      if (Qx.transition) {
        p = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
        zo.fillStyle = Mw(k.ⵠⲆⵠ[0], k.ⵠⲆⵠ[1], k.ⵠⲆⵠ[2], k.ⵠΔΔ[0], k.ⵠΔΔ[1], k.ⵠΔΔ[2], p);
      } else {
        zo.fillStyle = k.ᐃⲆᐃᐃᐃ[Qx.time];
      }
      zo.fillRect(s, r, t, b);
    }
  }
  function nf(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = Rx.ⵠⵠΔ.y + f + 710;
    var g = Math.max(Rx.ⵠⵠΔ.x + e, 0);
    var l = Math.max(-Rx.ⵠⵠΔ.x + yo - i - 100, 0);
    var r = g;
    var b = yo - g - l;
    if (n) {
      var d = j.ᐃᐃⲆ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += -d + 0 + 2;
    if (n) {
      d = j.ᐃᐃⲆ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h - 250 - s - d;
    var u = (s += t + 2) - 2;
    if (n) {
      d = j.ᐃᐃⲆ(q).x;
    } else {
      d = q.r.x;
    }
    if (u > s + (t = h - 350 - s - d)) {
      s += t + 2;
    } else {
      s = u;
    }
    t = h - 700 - s;
    if (n > 0 && k.ⲆⵠᐃⲆⲆΔⲆ === 1) {
      if (Qx.transition) {
        var p = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
        zo.fillStyle = Mw(15, 77, 72, 252, 239, 187, p);
      } else {
        zo.fillStyle = ns.ⲆⵠΔΔⵠⵠⲆ[Qx.time];
      }
      zo.fillRect(r, s, b, t);
    } else {
      if (Qx.transition) {
        p = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
        zo.fillStyle = Mw(k.ⵠⲆⵠ[0], k.ⵠⲆⵠ[1], k.ⵠⲆⵠ[2], k.ⵠΔΔ[0], k.ⵠΔΔ[1], k.ⵠΔΔ[2], p);
      } else {
        zo.fillStyle = k.ᐃⲆᐃᐃᐃ[Qx.time];
      }
      zo.fillRect(r, s, b, t);
    }
  }
  function of(b, c, d, e, f) {
    var g = d.width;
    var a = d.height;
    var i = Math.floor(g / 2);
    var j = Math.floor(a / 2);
    if (Qx.transition) {
      zo.globalAlpha = 1;
      Np(zo, ᐃΔ[b][c][Qx.time], 0, 0, g, a, e, f, i, j);
      Qx.time = Qx.time ? 0 : 1;
      zo.globalAlpha = 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
      Np(zo, ᐃΔ[b][c][Qx.time], 0, 0, g, a, e, f, i, j);
      Qx.time = Qx.time ? 0 : 1;
      zo.globalAlpha = 1;
    } else {
      Np(zo, ᐃΔ[b][c][Qx.time], 0, 0, g, a, e, f, i, j);
    }
  }
  function af(b, c, d, e) {
    var f = c.width;
    var g = c.height;
    var a = Math.floor(f / 2);
    var h = Math.floor(g / 2);
    if (Qx.transition) {
      zo.globalAlpha = 1;
      Np(zo, ᐃΔ[b][Qx.time], 0, 0, f, g, d, e, a, h);
      Qx.time = Qx.time ? 0 : 1;
      zo.globalAlpha = 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
      Np(zo, ᐃΔ[b][Qx.time], 0, 0, f, g, d, e, a, h);
      Qx.time = Qx.time ? 0 : 1;
      zo.globalAlpha = 1;
    } else {
      Np(zo, c, 0, 0, f, g, d, e, a, h);
    }
  }
  function rf(f, e, i, j, k, n) {
    var a = j.w1;
    var o = j.w2;
    var q = j.w3;
    var h = Rx.ⵠⵠΔ.x + f - 700;
    var g = Math.max(Rx.ⵠⵠΔ.y + e, 0);
    var l = Math.max(-Rx.ⵠⵠΔ.y + hq - i - 100, 0);
    var r = g;
    var b = hq - g - l;
    if (n) {
      var d = j.ᐃᐃⲆ(a).x;
    } else {
      d = a.r.x;
    }
    var s = h + 0;
    0;
    s += d + 0 - 2;
    if (n) {
      d = j.ᐃᐃⲆ(o).x;
    } else {
      d = o.r.x;
    }
    var t = h + 250 - s + d;
    var u = (s += t - 2) - 2;
    if (n) {
      d = j.ᐃᐃⲆ(q).x;
    } else {
      d = q.r.x;
    }
    if (s + (t = h + 350 - s + d) - 3 > u) {
      s += t - 2;
    } else {
      s = u;
    }
    t = h + 700 - s;
    if (n > 0 && k.ⲆⵠᐃⲆⲆΔⲆ === 1) {
      if (Qx.transition) {
        var p = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
        zo.fillStyle = Mw(15, 77, 72, 252, 239, 187, p);
      } else {
        zo.fillStyle = ns.ⲆⵠΔΔⵠⵠⲆ[Qx.time];
      }
      zo.fillRect(s, r, t, b);
    } else {
      if (Qx.transition) {
        p = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
        zo.fillStyle = Mw(k.ⵠⲆⵠ[0], k.ⵠⲆⵠ[1], k.ⵠⲆⵠ[2], k.ⵠΔΔ[0], k.ⵠΔΔ[1], k.ⵠΔΔ[2], p);
      } else {
        zo.fillStyle = k.ᐃⲆᐃᐃᐃ[Qx.time];
      }
      zo.fillRect(s, r, t, b);
    }
  }
  function sf(a, b) {
    if (Qx.transition) {
      zo.globalAlpha = 1;
      a.ⵠⲆⵠᐃⲆ(b);
      Qx.time = Qx.time ? 0 : 1;
      zo.globalAlpha = 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
      a.ⵠⲆⵠᐃⲆ(b);
      Qx.time = Qx.time ? 0 : 1;
      zo.globalAlpha = 1;
    } else {
      a.ⵠⲆⵠᐃⲆ(b);
    }
  }
  function hf(j, e, i, q, n, o) {
    var a = q.w1;
    var r = q.w2;
    var s = q.w3;
    var h = Rx.ⵠⵠΔ.x + j - 700;
    var g = Math.max(Rx.ⵠⵠΔ.y + e, 0);
    var l = Math.max(-Rx.ⵠⵠΔ.y + hq - i - 100, 0);
    var t = g;
    var b = hq - g - l;
    if (o) {
      var d = q.ᐃᐃⲆ(a);
    } else {
      d = a.r;
    }
    var u = h + 0;
    var A = u;
    var c = t;
    var p = d.x + 0;
    var C = b;
    var D = u += d.x + 0 - 2;
    if (o) {
      d = q.ᐃᐃⲆ(r);
    } else {
      d = r.r;
    }
    var f = h + 250 - u + d.x;
    var F = u;
    var y = t;
    var w = f;
    var G = b;
    var k = (u += f - 2) - 2;
    if (o) {
      d = q.ᐃᐃⲆ(s);
    } else {
      d = s.r;
    }
    if (k < u + (f = h + 350 - u + d.x) - 3) {
      var x = true;
      var H = u;
      var K = t;
      var B = f;
      var E = b;
      var I = u += f - 2;
    } else {
      x = false;
      u = k;
      I = -1;
    }
    f = h + 700 - u;
    if (Qx.transition) {
      var L = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
      zo.fillStyle = Mw(9, 55, 63, 11, 106, 132, L);
    } else {
      zo.fillStyle = ns.ᐃⲆⲆᐃⵠ[Qx.time];
    }
    zo.fillRect(A, c, p, C);
    if (o) {
      if (Qx.transition) {
        L = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
        zo.fillStyle = Mw(15, 70, 76, 42, 139, 155, L);
      } else {
        zo.fillStyle = ns.ⵠᐃⵠⵠΔΔᐃ[Qx.time];
      }
    } else if (Qx.transition) {
      L = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
      zo.fillStyle = Mw(9, 55, 63, 11, 106, 132, L);
    } else {
      zo.fillStyle = ns.ᐃⲆⲆᐃⵠ[Qx.time];
    }
    zo.fillRect(F, y, w, G);
    if (x) {
      if (o) {
        if (Qx.transition) {
          L = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
          zo.fillStyle = Mw(17, 94, 96, 169, 214, 211, L);
        } else {
          zo.fillStyle = ns.ΔᐃⲆⲆⵠⵠⵠ[Qx.time];
        }
      } else if (Qx.transition) {
        L = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
        zo.fillStyle = Mw(9, 55, 63, 11, 106, 132, L);
      } else {
        zo.fillStyle = ns.ᐃⲆⲆᐃⵠ[Qx.time];
      }
      zo.fillRect(H, K, B, E);
    }
    if (Px.ᐃᐃΔΔⵠ && o) {
      q.ΔΔᐃᐃᐃᐃⲆⵠΔ(k, I, D, h, -Rx.ⵠⵠΔ.y + c, -Rx.ⵠⵠΔ.y + c + C);
    }
  }
  function gf(a) {
    return oc.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ᐃⵠⲆⵠⲆⵠⲆ: 6521327,
      ΔΔⵠᐃⲆΔⵠ: 12974973,
      ⵠᐃΔⵠⲆⲆⲆ: 5289535,
      Ⲇⵠᐃᐃⵠⵠⵠⵠⵠ: 12272533
    };
  })();
  var lf = 0;
  var uf = 1;
  var bf = 2;
  var df = 0;
  var vf = 1;
  var mf = 2;
  function cf(a, b) {
    var c = a.getBoundingClientRect();
    return {
      x: b.clientX - c.left,
      y: b.clientY - c.top
    };
  }
  function pf(b, c, d, e, f) {
    var g = {
      x: d,
      y: e,
      ⵠⲆⲆΔᐃ: d,
      ᐃⲆΔⲆⵠ: e
    };
    return {
      translate: g,
      ⲆⵠⵠΔ: function (a) {
        Np(a, b, g.x, g.y, b.width / 2, b.height / 2);
      },
      active: c,
      position: f
    };
  }
  function Cf(c, d, e, f, i, j) {
    const a = (24 << (c >> 24 & 255)) + (8 << (c >> 0 & 255)) + (16 << (c >> 8 & 255)) + (0 << (c >> 16 & 255));
    const k = ~(d & 10631) & 10631 | ~(d & 10631) & d;
    const m = (e | 60702) & ~(e & 60702);
    const h = (24 << (f >> 16 & 255)) + (0 << (f >> 8 & 255)) + (8 << (f >> 24 & 255)) + (16 << (f & 255));
    const g = ~(i & 7702) & 7702 | ~(i & 7702) & i;
    const l = j ^ 30567;
    const n = yf(a, k, m, h, g, l);
    yf(a, k, m, h, g, l);
    return ~(n & 57319) & n | ~(n & 57319) & 57319;
  }
  function Tf(b, c, d, e, f, g) {
    Nj(Ft, b, c, d, e, f, g);
    const a = Co(Ht[0], Ht[1], Ht[2]);
    const h = hb(Ht[3], Ht[4], Ht[5]);
    return (0 << ((a ^ h) >> 8 & 255)) + (8 << ((a ^ h) >> 16 & 255)) + (16 << ((a ^ h) >> 24 & 255)) + (24 << ((a ^ h) >> 0 & 255));
  }
  function ff(f, j, i, k, n, p, a, q, t, w, g, l, u, b, x) {
    if (f.length === 0) {
      f = " ";
    }
    if (a === undefined) {
      a = 0;
    }
    if (q === undefined) {
      q = 0;
    }
    if (dg === t) {
      t = 0;
    }
    if (b === Aj) {
      b = 0;
    }
    var v = document.createElement("canvas");
    var m = v.getContext("2d");
    m.textBaseline = "middle";
    m.font = (x !== os ? x + " " : "") + k + "px " + j;
    n = n !== da ? Math.min(m.measureText(f).width, n) : m.measureText(f).width;
    v.width = n + a;
    v.height = k + q;
    if (Aj !== p) {
      if (g !== undefined) {
        m.globalAlpha = g;
      }
      m.fillStyle = p;
      if (oh !== l) {
        ⲆᐃⲆⲆⲆⲆⵠᐃᐃ(m, t + 2, t, n + a - t * 2 - 4, k + q - t * 2, l);
        m.fill();
      } else {
        m.fillRect(t, t, n + a - t * 2, k + q - t * 2);
      }
      m.globalAlpha = 1;
      if (t !== 0) {
        m.lineWidth = t;
        m.strokeStyle = w;
        m.stroke();
      }
    }
    m.textBaseline = "middle";
    m.font = (Bt !== x ? x + " " : "") + k + "px " + j;
    if (os !== u) {
      m.strokeStyle = u;
      m.lineWidth = b;
      m.lineJoin = "miter";
      m.miterLimit = 2;
      m.strokeText(f, Math.floor(a / 2), Math.floor(q / 2) + Math.floor(k / 2), n);
    }
    m.fillStyle = i;
    m.fillText(f, Math.floor(a / 2), Math.floor(q / 2) + Math.floor(k / 2), n);
    v.w2 = v.width / 2;
    v.ⲆᐃᐃΔⲆ = v.height / 2;
    return v;
  }
  function zf(c, e, f, i, j, k, n, p = 0, q = 0, h = 0, g = 1) {
    if (k !== 1) {
      k = 0;
    }
    if (i) {
      var l = i;
    }
    var r;
    var u = {
      width: c,
      height: e,
      ⵠⵠ: l,
      state: df,
      translate: {
        x: p,
        y: q,
        ⵠⲆⲆΔᐃ: p,
        ᐃⲆΔⲆⵠ: q
      },
      ΔⲆⲆᐃᐃⲆᐃΔⵠ: k,
      ΔⵠᐃⲆ: 0,
      callback: n,
      position: h,
      active: g
    };
    function d() {
      return u.ⵠⵠ[u.state];
    }
    function s(a) {
      var b = u.translate;
      if (u.width === 0 || u.height === 0) {
        u.width = u.ⵠⵠ[0].width;
        u.height = u.ⵠⵠ[0].height;
      }
      return a.x > b.x && a.x < b.x + u.width / j && a.y > b.y && a.y < b.y + u.height / j;
    }
    k = function () {
      var a = 0;
      if (u.ΔⲆⲆᐃᐃⲆᐃΔⵠ === 1) {
        if (vf === u.state || u.state === mf) {
          u.ΔⵠᐃⲆ = (0 + Yx * 1000) % 1000;
        } else if (0 > 0) {
          u.ΔⵠᐃⲆ = 0 > 500 ? 0 + Yx * 1000 : 0 - Yx * 1000;
          if (0 > 0 || 1000 < 0) {
            u.ΔⵠᐃⲆ = 0;
          }
        }
        a = ⲆⵠΔⵠ.ⵠᐃᐃⲆⵠ(500 < 0 ? 2 : 0) * 0.2;
      }
      return a;
    };
    if ((j = j === 3 ? 3 : j === 1 ? 2 : 1) === 2) {
      r = function (a) {
        var b = 1 + k();
        var c = d();
        var e = b * u.width / 2;
        var f = b * u.height / 2;
        var g = (e - u.width / 2) / 2;
        var h = (f - u.height / 2) / 2;
        Np(a, c, u.translate.x - g, u.translate.y - h, e, f);
      };
    } else if (j === 3) {
      r = function (b) {
        var c = d();
        var e = u.width;
        var f = u.height;
        var g = (e - u.width) / 2;
        var h = (f - u.height) / 2;
        Np(b, c, u.translate.x - g, u.translate.y - h, e, f);
      };
      j = 1;
    } else {
      r = function (a) {
        Np(a, d(), u.translate.x, u.translate.y);
      };
    }
    return {
      info: u,
      ΔᐃⵠΔ: function (a, b, c) {
        if (s(b)) {
          if (c == uf) {
            u.state = mf;
          } else if (bf == c || lf == c && u.state != mf) {
            u.state = vf;
          }
          return true;
        } else {
          u.state = df;
          return Gl;
        }
      },
      ⲆⵠⵠΔ: r,
      ΔⵠᐃΔΔᐃᐃ: s
    };
  }
  function yf(b, c, d, e, f, i) {
    const a = ~(b & 53585) & (b | 53585);
    const j = ~(d & 35963) & 35963 | ~(d & 35963) & d;
    const k = (0 << (e >> 16 & 255)) + (24 << (e >> 8 & 255)) + (8 << (e & 255)) + (16 << (e >> 24 & 255));
    const h = i ^ 64570;
    const g = ob(a, 0, j, k, 0, h);
    ob(a, 0, j, k, 0, h);
    return ~(g & 1485) & 1485 | ~(g & 1485) & g;
  }
  var wf = "send";
  var Pf = ⲆⵠΔⵠ.ᐃΔᐃΔᐃⵠᐃ("id") === "1" ? 1 : 0;
  var kf = ⲆⵠΔⵠ.ᐃΔᐃΔᐃⵠᐃ("password");
  var Af = ⲆⵠΔⵠ.ᐃΔᐃΔᐃⵠᐃ("debug") || Yg;
  if (Rr !== Af) {
    Af = JSON.parse(oc.decodeURIComponent(Af));
  }
  var Tw = ⲆⵠΔⵠ.ᐃΔᐃΔᐃⵠᐃ("server") || os;
  var Jf = ⲆⵠΔⵠ.ᐃΔᐃΔᐃⵠᐃ("region") || ct;
  var Mf = "starve.io";
  var Bf = "https://" + Mf;
  var Ef = {
    ⵠᐃⵠⵠⲆ: 4,
    ⲆᐃᐃΔᐃⵠᐃ: 16,
    ΔⲆⵠⲆᐃⲆⲆᐃⲆ: 1,
    ⵠⵠΔᐃ: 2,
    IDLE: 64,
    ᐃΔⲆΔⵠΔΔ: 8,
    ᐃⵠⵠᐃⲆⲆⵠ: 32,
    ⵠΔⲆⲆᐃΔΔ: 128,
    ᐃⵠΔΔⲆⵠⵠ: 256
  };
  var Df = [{
    ΔΔᐃⲆⲆ: 1000,
    items: [[2, 113], [1, 117], [8, 110], [1, 143]]
  }, {
    ΔΔᐃⲆⲆ: 2000,
    items: [[2, 118], [1, 8], [2, 117], [16, 110], [2, 143]]
  }, {
    ΔΔᐃⲆⲆ: 4000,
    items: [[3, 118], [1, 1], [4, 117], [20, 110], [4, 143], [1, 114], [80, 108], [140, 109]]
  }, {
    ΔΔᐃⲆⲆ: 8000,
    items: [[1, 29], [4, 118], [1, 3], [6, 117], [30, 110], [6, 143], [1, 114], [150, 108], [200, 109], [60, 111], [2, 127]]
  }, {
    ΔΔᐃⲆⲆ: 16000,
    items: [[1, 29], [1, 4], [1, 198], [7, 136], [2, 127], [2, 118], [1, 119], [15, 163], [2, 171], [1, 159], [1, 55], [200, 108], [300, 109]]
  }, {
    ΔΔᐃⲆⲆ: 16000,
    items: [[1, 29], [1, 11], [1, 50], [1, 3], [10, 136], [4, 127], [6, 118], [3, 195], [1, 28], [200, 108], [300, 109]]
  }, {
    ΔΔᐃⲆⲆ: 16000,
    items: [[1, 29], [1, 83], [1, 36], [3, 195], [1, 0], [1, 3], [7, 136], [2, 127], [4, 118], [150, 108], [200, 109], [1, 158]]
  }, {
    ΔΔᐃⲆⲆ: 16000,
    items: [[1, 29], [1, 84], [1, 3], [7, 136], [2, 127], [4, 118], [2, 135], [4, 144], [10, 141], [6, 132], [4, 115], [1, 49], [500, 109]]
  }, {
    ΔΔᐃⲆⲆ: 16000,
    items: [[1, 29], [1, 3], [16, 138], [1, 127], [6, 118], [3, 195], [1, 48], [1, 0], [16, 125], [150, 108], [200, 109]]
  }, {
    ΔΔᐃⲆⲆ: 20000,
    items: [[1, 29], [1, 3], [1, 136], [1, 127], [3, 118], [3, 195], [1, 26], [1, 5], [1, 15], [2, 169], [50, 108], [100, 109]]
  }];
  let If = 0;
  const Uw = [];
  var Qf = {
    ᐃⵠᐃΔⵠⲆᐃΔΔ: 14,
    ΔⲆⲆΔⵠᐃⵠΔᐃ: 8000,
    ⵠᐃᐃⲆⵠⵠⵠⲆⲆ: 2000,
    ⲆⲆⲆΔΔΔᐃ: 4,
    ⲆⲆⵠᐃⲆⲆⲆⵠⵠ: 5,
    ⲆᐃⲆⲆᐃᐃΔ: 52,
    ⲆⵠⲆᐃⲆⲆⲆⲆⵠ: 5,
    ⲆⲆΔᐃⲆᐃⲆΔᐃ: 14,
    ΔΔⵠⲆⲆΔΔ: 0.2,
    ΔΔᐃᐃⲆⲆⲆΔⲆ: 20,
    ⲆᐃᐃΔᐃⵠᐃ: 0.2,
    ΔⲆⲆᐃⲆⵠΔΔⲆ: 0.58,
    ⵠΔᐃᐃΔⲆᐃ: 4,
    ΔⲆⵠᐃⵠᐃⵠΔΔ: 5,
    ⲆᐃⲆⵠⵠⲆⵠ: 1,
    ΔⵠⵠΔⵠᐃⵠ: 600000,
    ΔⵠΔⲆⲆΔΔᐃⵠ: 50,
    ⵠᐃⵠⵠⲆⵠᐃⲆᐃ: 60000,
    ᐃⵠΔᐃΔⵠⵠ: 2,
    ΔᐃⵠΔΔⵠᐃ: 3,
    ΔΔⵠΔΔⲆⵠⲆⵠ: "[21]",
    ⲆⲆⲆᐃΔⵠᐃ: 0,
    ΔⲆⲆᐃᐃⵠᐃΔⵠ: 200,
    ⵠΔΔᐃⵠⵠᐃⵠⲆ: 125000,
    ⲆΔΔⲆᐃⲆΔΔⲆ: 3
  };
  function _f(b, c, d) {
    const e = ~(b & 3144) & b | ~(b & 3144) & 3144;
    const f = c ^ 15498;
    const g = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (0 << (d & 255)) + (16 << (d >> 8 & 255));
    const a = zx(e, f, g, e, f, g);
    gx(e, f, g, e);
    return a ^ 42021;
  }
  function Rf(a, b) {
    Qi(Ft, a, b);
    const c = Tf(Ht[0], Ht[1], Ht[0], Ht[1], Ht[0], Ht[1]);
    yb(Ht[0], Ht[1], Ht[0], Ht[1], Ht[0]);
    return c ^ 50781;
  }
  var Ff = {
    ⵠᐃⵠ: 480000,
    ⵠΔᐃⵠᐃⵠΔ: 10,
    ⵠⲆⵠⲆΔⵠᐃ: 16,
    ΔᐃⵠⵠⲆᐃⲆΔΔ: 6,
    ⲆᐃⲆⲆⵠΔⲆ: 60,
    ⵠᐃᐃⵠΔ: 1,
    ᐃⲆⵠᐃⲆ: 2,
    ⲆⲆⲆⲆⵠ: 4,
    ⵠᐃΔⵠᐃ: 8,
    ΔΔⵠⲆⲆΔΔ: 10,
    ᐃⲆⲆⲆⲆᐃⲆ: 100,
    ⲆᐃⵠⲆΔᐃᐃ: 100,
    ΔΔΔᐃᐃⲆᐃ: 100,
    ⵠⵠᐃⲆᐃⲆⲆΔᐃ: 100,
    ΔⲆΔⲆΔⵠΔ: 100,
    ΔⲆᐃⵠⲆⲆⲆ: 100,
    ΔⵠⵠⲆᐃⵠΔⵠᐃ: 100,
    ΔⲆᐃⵠⲆⲆⲆ: 100,
    ⵠᐃⲆΔᐃᐃΔ: 100,
    ⲆⲆⲆᐃΔᐃⵠ: 100,
    ΔⲆᐃⲆⲆ: 0,
    ⵠⲆⵠⲆⲆⲆΔ: 1,
    ⵠⵠΔⵠᐃ: 2,
    Ⲇᐃⵠᐃⵠ: 3,
    ΔᐃΔΔᐃ: 4,
    ⲆⵠΔᐃᐃⲆⵠ: 5,
    ᐃⵠⲆⲆᐃ: 6,
    ᐃⵠΔⲆⵠ: 7,
    ⲆᐃⵠⵠΔᐃⲆⵠⵠ: {
      frankfurt: "Frankfurt",
      atlanta: "Atlanta",
      osaka: "Osaka",
      losangeles: "Los Angeles",
      sydney: "Sydney"
    },
    ΔᐃⵠⵠⲆᐃᐃ: {
      0: "normal",
      2: "zombies",
      3: "vampires",
      4: "forest",
      6: "community",
      7: "experimental"
    },
    ⲆᐃΔΔⲆⲆⲆ: 0,
    ᐃΔⵠᐃΔᐃⲆ: 0,
    ⵠⵠᐃⵠᐃᐃᐃ: 30,
    ᐃᐃΔⵠⵠᐃⲆΔΔ: 2,
    ⲆᐃⲆⲆⵠΔⲆ: 60000,
    ⲆᐃΔⲆⲆⲆⵠΔΔ: 0,
    ⲆⲆⲆⲆᐃΔΔⲆΔ: 0,
    ⲆᐃⵠⵠⲆⵠⲆⵠⲆ: 50,
    ᐃᐃΔᐃⵠⲆⵠⲆⵠ: 0,
    ⵠΔΔΔᐃⵠΔⵠᐃ: 40,
    ⲆⵠⵠΔⲆⲆΔⲆⵠ: 39,
    ⲆⵠⵠᐃⵠⲆⵠᐃⵠ: 830,
    ⲆⵠⵠᐃⲆⲆⵠ: 25,
    ⵠⲆⵠⲆⲆΔΔ: 8,
    ᐃⲆⵠΔⲆ: 0,
    ᐃΔΔⲆᐃ: 0,
    ᐃΔⲆᐃᐃⵠⲆ: 200,
    ⲆⵠᐃΔᐃⵠᐃ: 0,
    ⲆΔⵠᐃⵠ: 250,
    ΔΔⲆⵠᐃΔⲆ: 150,
    ⲆᐃᐃᐃΔⲆⵠ: 0,
    ⵠΔⵠⵠⵠ: 350,
    ΔⵠⵠᐃᐃΔⵠ: 100,
    ΔⵠΔᐃⵠᐃᐃ: 700,
    ⵠᐃⵠᐃⲆ: 39879
  };
  var jf = [];
  for (Sb = 0; Sb < 500; Sb++) {
    jf[Sb] = 0;
  }
  jf[47] = 1;
  jf[57] = 1;
  jf[0] = 1;
  jf[5] = 1;
  jf[6] = 1;
  jf[30] = 1;
  jf[19] = 1;
  jf[9] = 1;
  jf[62] = 1;
  jf[63] = 1;
  jf[13] = 1;
  jf[14] = 1;
  jf[15] = 1;
  jf[33] = 1;
  jf[34] = 1;
  jf[16] = 1;
  jf[17] = 1;
  jf[12] = 1;
  jf[18] = 1;
  var Lf = [{
    time: 2880000
  }, {
    time: 1440000
  }, {
    time: 1920000
  }, {
    time: 1440000
  }, {
    time: 2880000
  }, {
    time: 2400000
  }, {
    time: 2400000
  }, {
    time: 4800000
  }, {
    time: 2880000
  }, {
    time: 3360000
  }, {
    time: 2880000
  }, {
    time: 3840000
  }, {
    time: 3360000
  }];
  var Gf = {
    ΔᐃᐃⲆⲆ: 87,
    ᐃⵠⵠⵠΔ: 77,
    ᐃᐃⲆΔⲆ: 38,
    ΔⲆΔⲆᐃ: 69,
    ⲆΔⵠⲆⵠ: 55,
    ᐃⵠⲆΔᐃ: 56,
    ᐃΔᐃᐃⵠ: 88,
    ΔⵠΔᐃᐃ: 8,
    ⲆΔΔⲆᐃ: 7,
    ᐃⵠΔⵠⲆ: 25,
    ΔᐃΔⲆⲆ: 9,
    ΔⵠⲆⵠΔ: 23,
    ⵠᐃᐃΔᐃ: 63,
    ΔⲆΔⵠᐃ: 34,
    Δⵠⵠⵠᐃ: 5,
    ᐃⵠΔⵠᐃⵠⲆ: 76,
    ᐃΔᐃⲆⲆ: 43,
    ΔΔⵠᐃᐃ: 49,
    ⲆᐃⵠⲆⲆ: 86,
    ΔⲆΔⲆΔ: 0,
    ΔΔΔⲆⲆ: 51,
    ⵠΔⵠΔΔⲆⵠ: 85,
    ⵠᐃⵠᐃⲆ: 3,
    ᐃΔᐃⵠᐃ: 71,
    Ⲇᐃᐃⵠᐃ: 29,
    ⲆᐃΔᐃⲆᐃΔ: 84,
    ΔⵠⵠⵠΔ: 78,
    ᐃⵠⵠΔⲆ: 79,
    ΔᐃΔⵠⲆ: 64,
    ⲆⲆⲆⲆⲆ: 1,
    ⵠΔⵠᐃⲆ: 68,
    ᐃᐃΔΔᐃ: 54,
    ⵠⵠᐃⲆᐃ: 10,
    ⵠⵠⲆΔⲆⵠΔ: 89,
    ⵠⵠᐃⲆΔ: 45,
    ΔΔⵠΔΔ: 50,
    ᐃⲆᐃⵠΔ: 46,
    ⵠⵠⵠΔᐃ: 11,
    ΔᐃⵠΔΔ: 53,
    Ⲇⵠⵠᐃᐃ: 32,
    ⵠⲆᐃᐃᐃ: 13,
    ᐃⵠⲆⲆⵠ: 44,
    ⲆΔᐃΔΔ: 39,
    ⲆΔᐃᐃᐃ: 27,
    ⵠⲆⲆΔⲆ: 15,
    ᐃⲆⵠⵠᐃ: 90,
    ⲆΔⲆᐃⵠ: 73,
    ΔᐃⵠⵠⲆ: 17,
    ⵠⵠΔⲆⵠ: 61,
    ᐃⵠᐃⵠⵠ: 74,
    ⲆΔΔⲆⲆ: 35,
    Δᐃᐃᐃⵠ: 26,
    ⵠᐃⵠᐃⵠⵠᐃ: 82,
    ⲆⲆⵠᐃΔ: 12,
    ΔⲆⵠΔⵠ: 75,
    ⵠⲆⵠᐃΔ: 41,
    ᐃⲆⲆⵠΔ: 4,
    ⵠΔᐃⵠΔ: 20,
    ᐃᐃⲆⲆᐃ: 16,
    ΔⵠⵠᐃΔ: 62,
    ΔΔᐃⲆΔ: 72,
    ⲆΔⵠΔⲆ: 30,
    ΔⲆⲆᐃⲆᐃⵠ: 83,
    ⵠⵠⲆᐃⲆ: 14,
    ⵠᐃⲆᐃⲆ: 18,
    ⵠΔⲆΔⵠ: 70,
    ᐃⲆⲆᐃΔ: 81,
    ΔⲆⲆⵠᐃ: 22,
    ΔⵠⲆᐃⲆ: 2,
    ᐃᐃΔⵠᐃ: 37,
    ᐃᐃΔⲆᐃ: 36,
    ⵠᐃⲆΔᐃ: 31,
    ᐃⵠⲆⵠⵠ: 80,
    ⵠⲆⵠᐃⵠ: 67,
    ᐃⲆⲆΔⵠ: 66,
    ΔⵠᐃⵠⲆ: 40,
    ⲆⵠⲆⲆⵠ: 24,
    ᐃⵠⲆᐃᐃ: 28,
    ᐃⲆⲆⵠⵠ: 21,
    ΔᐃΔⵠⵠ: 6,
    ⲆⲆⵠΔΔ: 48,
    ⲆⲆᐃΔⵠ: 91,
    ⲆⵠⲆᐃΔ: 19,
    ΔⲆΔⵠⵠ: 52,
    ΔΔⲆⵠΔ: 65,
    ⵠΔⵠⵠᐃ: 47,
    ⵠⵠⵠⲆⲆ: 100,
    ΔⵠᐃⲆⲆ: 60,
    ΔΔⲆΔⲆ: 42,
    ΔᐃΔⵠᐃ: 33
  };
  function Wf(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function qf(a) {
    return oc.String.fromCharCode(a);
  }
  var Nf = [[24, 108], [25, 111], [26, 112], [27, 121], [28, 202]];
  function Hf(j) {
    function e(b, c, d) {
      var e = c;
      for (var f = d; Qx.ⲆΔⲆΔΔ > f; f++) {
        for (var g = c; g < Qx.ᐃⲆᐃⵠⲆ && (d === f && (e = Math.max(g, e)), e >= g) && b[f][g] !== 1; g++) {
          b[f][g] = 1;
        }
        if (e > g) {
          break;
        }
      }
      Qx.ⲆᐃⵠΔ.push(new Qx.ΔᐃΔⲆΔΔⲆ(Qx.ⲆⵠⵠⵠΔ, c, d, e - c + 1, f - d, 15));
    }
    function k(c, d, e, f, i) {
      var j = d + Math.floor(Qx.ΔⲆΔᐃΔ.get() * f);
      var a = e + Math.floor(f * Qx.ΔⲆΔᐃΔ.get());
      var k = 10 + Math.floor(Qx.ΔⲆΔᐃΔ.get() * (Qx.ᐃⲆᐃⵠⲆ - j - 20));
      var m = 10 + Math.floor((Qx.ⲆΔⲆΔΔ - a - 20) * Qx.ΔⲆΔᐃΔ.get());
      var h = k + j;
      var g = m + a;
      for (var l = 0; l < Qx.ⲆᐃⵠΔ.length; l++) {
        var n = Qx.ⲆᐃⵠΔ[l];
        if (ⲆⵠΔⵠ.ᐃΔⲆⵠⲆᐃⲆ(k, h, m, g, n.x1 / 100 - i, n.x2 / 100 + i, n.y1 / 100 - i, n.y2 / 100 + i) === 1) {
          return 0;
        }
      }
      Qx.ⲆᐃⵠΔ.push(new Qx.ΔᐃΔⲆΔΔⲆ(c, k, m, j, a, 15));
      return 1;
    }
    function i(b, c, d, e, f) {
      for (var a = 0; a < f && k(b, c, d, e, 8) !== 1; a++);
      if (a === f) {
        return 0;
      } else {
        return 1;
      }
    }
    function q(a, b) {
      for (var c = 0; b.length > c; c++) {
        r(b[c][0], b[c][1], a, b[c][2]);
      }
    }
    function n(c, f, j, k, n, o, a, p) {
      var q = Math.floor(a / 2);
      var h = Math.max(1, Math.floor(a / 2));
      var g = Math.floor(p / 2);
      var l = Math.max(1, Math.floor(p / 2));
      for (var b = 0; b < j; b++) {
        for (var r = c - g; c + l > r; r++) {
          for (var s = f - q; f + h > s; s++) {
            if (x(r, s, "wtb", 0, 1) === 1) {
              o.push([r, s, 1]);
            }
          }
        }
        c += k;
        f += n;
      }
    }
    function a(a, e) {
      var f = Qx.ⲆᐃⵠΔ[a];
      var i = Math.floor(f.y1 / 100);
      var j = Math.floor(f.x1 / 100);
      var k = Math.floor(f.ᐃᐃᐃ / 100);
      var o = j + (A = Math.floor(f.w / 100));
      var q = 2;
      var r = k;
      var s = i;
      for (var t = j + 10 + Math.floor(Qx.ΔⲆΔᐃΔ.get() * (A - 20)), u = t - 4; u < t + 4; u++) {
        x(i - 1, u, "wtb", 0, 1);
      }
      while (r > 0) {
        if (q !== 2) {
          if (r < 10) {
            for (B = 1; r > 0; B++) {
              n(s, t, 1, 1, 0, e, B, 1);
              r -= 1;
              s += 1;
            }
          } else if (q !== 1) {
            q = 1;
            var w = Math.floor(1 + Qx.ΔⲆΔᐃΔ.get() * 2);
            var y = 1 + Math.floor(Qx.ΔⲆΔᐃΔ.get() * 4);
            if (j + 16 > t) {
              n(s, t, w, 0, 1, e, y, y);
              t += w;
            } else if (o - 16 < t) {
              n(s, t, w, 0, -1, e, y, y);
              t -= w;
            } else if (Qx.ΔⲆΔᐃΔ.get() > 0.5) {
              n(s, t, w, 0, 1, e, y, y);
              t += w;
            } else {
              n(s, t, w, 0, -1, e, y, y);
              t -= w;
            }
          } else {
            var z = Math.min(r, Math.floor(1 + Qx.ΔⲆΔᐃΔ.get() * 4));
            var A = 1 + Math.floor(Qx.ΔⲆΔᐃΔ.get() * 4);
            n(s, t, z, 1, 0, e, A, A);
            q = 0;
            r -= z;
            s += z;
          }
        } else {
          for (var B = 10; B > 1; B--) {
            n(s, t, 1, 1, 0, e, B, 1);
            r -= 1;
            s += 1;
          }
          q = 0;
        }
      }
      for (u = t - 1; t + 2 > u; u++) {
        x(s, u, "wtb", 0, 1);
      }
    }
    function o(a) {
      for (var c = 0; c < 3; c++) {
        b(a, "s", c, 15);
      }
      for (c = 0; c < 3; c++) {
        b(a, "a", c, 1);
      }
      for (c = 0; c < 3; c++) {
        b(a, "d", c, 1);
      }
      h(a);
    }
    function r(a, b, c, d) {
      if (l(a, b) && (ΔⲆΔᐃ = Jx.ΔⲆΔᐃ, ΔⲆΔᐃ[a][b] === undefined && (ΔⲆΔᐃ[a][b] = {}), ΔⲆΔᐃ[a][b].r === undefined)) {
        var e = 0;
        if (l(a - 1, b) && ΔⲆΔᐃ[a - 1][b] !== jn && ΔⲆΔᐃ[a - 1][b].wtb !== undefined) {
          e += 2;
        }
        if (l(a, b - 1) && ΔⲆΔᐃ[a][b - 1] !== Yg && ΔⲆΔᐃ[a][b - 1].wtb !== $q) {
          e += 8;
        }
        if (l(a, b + 1) && ΔⲆΔᐃ[a][b + 1] !== undefined && ΔⲆΔᐃ[a][b + 1].wtb !== undefined) {
          e += 16;
        }
        if (l(a + 1, b) && dg !== ΔⲆΔᐃ[a + 1][b] && ΔⲆΔᐃ[a + 1][b].wtb !== undefined) {
          e += 64;
        }
        if (l(a - 1, b - 1) && (e & 10) === 10 && ΔⲆΔᐃ[a - 1][b - 1] !== undefined && ΔⲆΔᐃ[a - 1][b - 1].wtb !== undefined) {
          e += 1;
        }
        if (l(a - 1, b + 1) && (e & 18) === 18 && ΔⲆΔᐃ[a - 1][b + 1] !== undefined && ΔⲆΔᐃ[a - 1][b + 1].wtb !== oh) {
          e += 4;
        }
        if (l(a + 1, b - 1) && (e & 72) === 72 && ΔⲆΔᐃ[a + 1][b - 1] !== undefined && ΔⲆΔᐃ[a + 1][b - 1].wtb !== undefined) {
          e += 32;
        }
        if (l(a + 1, b + 1) && (e & 80) === 80 && da !== ΔⲆΔᐃ[a + 1][b + 1] && Nl !== ΔⲆΔᐃ[a + 1][b + 1].wtb) {
          e += 128;
        }
        ΔⲆΔᐃ[a][b].r = {};
        ΔⲆΔᐃ[a][b].r.ᐃⲆⵠᐃᐃΔΔ = e;
        ΔⲆΔᐃ[a][b].r.ΔΔᐃᐃΔᐃⲆ = d;
        ΔⲆΔᐃ[a][b].r.ᐃⵠⲆⲆ = Qx.ᐃⲆⵠⵠΔ(c, b * 100 + 50, a * 100 + 50) - 400;
        ΔⲆΔᐃ[a][b].r.x = b * 100 + 50;
        ΔⲆΔᐃ[a][b].r.y = a * 100 + 50;
      }
    }
    function h(a) {
      var b = Qx.ⲆᐃⵠΔ[a];
      x(-3 + Math.floor(b.y2 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
      x(3 + Math.floor(b.y1 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
      x(-3 + Math.floor(b.y2 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
      x(3 + Math.floor(b.y1 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
    }
    function g(a, c) {
      (function (c, d) {
        var e = Qx.ⲆᐃⵠΔ[d];
        for (var f = 0, i = 0; c > f && i < 10000; i++) {
          var j = e.y1 + e.ᐃᐃᐃ * Qx.ΔⲆΔᐃΔ.get();
          var k = e.x1 + e.w * Qx.ΔⲆΔᐃΔ.get();
          var m = Math.floor(j / 100);
          var p = Math.floor(k / 100);
          if (Qx.ᐃⲆⵠⵠΔ(d, p * 100 + 50, m * 100 + 50) >= 600) {
            for (var q = 1, t = m - 4; q === 1 && m + 4 >= t; t++) {
              for (var u = p - 4; q === 1 && u <= p + 4; u++) {
                if (Jx.ΔⲆΔᐃ[t][u] !== undefined) {
                  q = 0;
                }
              }
            }
            if (q !== 0) {
              x(m, p, "la", f % 6, 0);
              f++;
            }
          }
        }
      })(c * 80, a);
      for (var d = 0; d < 3; d++) {
        b(a, "s", d, Math.floor(c * 12));
      }
      for (d = 0; d < 3; d++) {
        b(a, "g", d, Math.floor(c * 6));
      }
      for (d = 0; d < 3; d++) {
        b(a, "re", d, Math.max(1, Math.floor(c * 1)), 0.2);
      }
      for (d = 0; d < 3; d++) {
        b(a, "a", d, Math.max(1, Math.floor(c * 2)));
      }
      h(a);
    }
    function x(a, b, c, d, e) {
      if (a >= 0 && b >= 0 && a < Qx.ⲆΔⲆΔΔ && b < Qx.ᐃⲆᐃⵠⲆ) {
        ΔⲆΔᐃ = Jx.ΔⲆΔᐃ;
        if (ΔⲆΔᐃ[a][b] === undefined) {
          ΔⲆΔᐃ[a][b] = {};
        }
        if (ΔⲆΔᐃ[a][b][c] !== undefined) {
          return 0;
        } else {
          ΔⲆΔᐃ[a][b][c] = [];
          ΔⲆΔᐃ[a][b][c][d] = [{
            x: b * 100 + 50,
            y: a * 100 + 50
          }];
          if (e === 1) {
            (function (a, b, c, d) {
              $b.push([a, b, c, d]);
            })(c, d, a, b);
          }
          return 1;
        }
      }
    }
    function l(a, b) {
      return a >= 0 && b >= 0 && a < Qx.ⲆΔⲆΔΔ && b < Qx.ᐃⲆᐃⵠⲆ;
    }
    function s(a, c) {
      for (var d = 0; d < 3; d++) {
        b(a, "s", d, Math.floor(c * 18));
      }
      for (d = 0; d < 3; d++) {
        b(a, "f", d, Math.floor(c * 24));
      }
      for (d = 0; d < 3; d++) {
        b(a, "d", d, Math.max(1, Math.floor(c * 2)), 0.3);
      }
      for (d = 0; d < 3; d++) {
        b(a, "g", d, Math.floor(c * 6));
      }
      h(a);
    }
    function d(c, d) {
      for (var e = 0; e < 6; e++) {
        b(c, "t", e, Math.floor(d * 80));
      }
      for (e = 0; e < 4; e++) {
        b(c, "b", e, Math.floor(d * 80));
      }
      for (e = 0; e < 3; e++) {
        b(c, "s", e, Math.floor(d * 50));
      }
      var f = [];
      for (e = 0; e < 6; e++) {
        a(c, f);
      }
      q(c, f);
      f = [];
      b(c, "p", 0, Math.floor(d * 28));
      for (e = 0; e < 3; e++) {
        b(c, "g", e, Math.floor(d * 7));
      }
      for (e = 0; e < 3; e++) {
        b(c, "d", e, Math.floor(d * 2));
      }
      for (e = 0; e < 3; e++) {
        b(c, "a", e, Math.floor(d * 1));
      }
      for (e = 0; e < 3; e++) {
        b(c, "m", e, Math.floor(d * 1));
      }
      b(c, "a", 0, Math.floor(d * 1));
      h(c);
    }
    function b(f, e, i, j, k) {
      var n = Qx.ⲆᐃⵠΔ[f];
      var a = Math.floor(n.x1 / 100);
      var p = Math.floor(n.y1 / 100);
      var q = Math.floor(n.w / 100);
      var t = Math.floor(n.ᐃᐃᐃ / 100);
      if (k !== undefined) {
        k = 1 - k;
        a += Math.floor(q * k / 2);
        p += Math.floor(t * k / 2);
        q -= Math.floor(k * q);
        t -= Math.floor(k * t);
      }
      var u = Jx.ΔⲆΔᐃ;
      for (var l = 0, w = 0; w < j && l <= 50000; l++) {
        var y = p + Math.floor(Qx.ΔⲆΔᐃΔ.get() * t);
        var z = a + Math.floor(q * Qx.ΔⲆΔᐃΔ.get());
        if (Qx.ᐃⲆⵠⵠΔ(f, z * 100 + 50, y * 100 + 50) >= 400) {
          var A = u[y][z + 1];
          if (rh === A || A[e] === undefined || A[e][i] === undefined) {
            A = u[y][z - 1];
            if (sk === A || A[e] === tq || A[e][i] === oh) {
              if ((A = u[y + 1][z]) === undefined || A[e] === da || A[e][i] === undefined) {
                if ((A = u[y - 1][z]) === undefined || A[e] === Wb || A[e][i] === undefined) {
                  if ((A = u[y + 1][z - 1]) === undefined || A[e] === Nl || A[e][i] === tq) {
                    if ((A = u[y - 1][z + 1]) === Wb || A[e] === oh || A[e][i] === undefined) {
                      if ((A = u[y + 1][z + 1]) === os || A[e] === undefined || A[e][i] === undefined) {
                        if ((A = u[y - 1][z - 1]) === Wb || A[e] === undefined || Aj === A[e][i]) {
                          if (oj === u[y][z]) {
                            x(y, z, e, i, 1);
                            w++;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    function m(c, d) {
      for (var e = 0; e < 6; e++) {
        b(c, "t", e, Math.floor(d * 20));
      }
      for (e = 0; e < 4; e++) {
        b(c, "b", e, Math.floor(d * 20));
      }
      for (e = 0; e < 3; e++) {
        b(c, "s", e, Math.floor(d * 20));
      }
      var f = [];
      a(c, f);
      q(c, f);
      f = [];
      b(c, "p", 0, Math.floor(d * 24));
      for (e = 0; e < 3; e++) {
        b(c, "g", e, Math.floor(d * 5));
      }
      if (Qx.mode === 2) {
        for (e = 0; e < 3; e++) {
          b(c, "d", e, Math.floor(d * 3));
        }
        for (e = 0; e < 3; e++) {
          b(c, "a", e, Math.floor(d * 2));
        }
      }
      h(c);
    }
    function c(a, c) {
      for (var d = 0; d < 3; d++) {
        b(a, "s", d, Math.floor(c * 12));
      }
      for (d = 0; d < 3; d++) {
        b(a, "m", d, Math.max(1, Math.floor(c * 1)), 0.2);
      }
      b(a, "c", 0, Math.floor(c * 36));
      var e = [];
      (function (c, d) {
        var e = Qx.ⲆᐃⵠΔ[c];
        var f = Math.floor(e.y1 / 100);
        var i = Math.floor(e.x1 / 100);
        var j = Math.floor(e.ᐃᐃᐃ / 100);
        var a = Math.floor(e.w / 100);
        var k = f + Math.floor(j / 2);
        var m = i + Math.floor(a / 2);
        for (var h = 0; h < 3; h++) {
          x(n = Math.floor(k - 3 + Qx.ΔⲆΔᐃΔ.get() * 6), o = Math.floor(m - 3 + Qx.ΔⲆΔᐃΔ.get() * 6), "plm", h, 1);
        }
        for (h = 0; h < 80; h++) {
          var n;
          var o;
          if (x(n = Math.floor(k - 3 + Qx.ΔⲆΔᐃΔ.get() * 6), o = Math.floor(m - 3 + Qx.ΔⲆΔᐃΔ.get() * 6), "wtb", 0, 1) === 1) {
            d.push([n, o, 0]);
          }
        }
      })(a, e);
      q(a, e);
      e = [];
    }
    function p(a, b, c) {
      if (a[b]) {
        for (dq = 0; a[b].length > dq; dq++) {
          if (a[b][dq]) {
            for (ⲆΔΔᐃ = 0; a[b][dq].length > ⲆΔΔᐃ; ⲆΔΔᐃ++) {
              a[b][dq][ⲆΔΔᐃ].ᐃΔᐃ = c;
              a[b][dq][ⲆΔΔᐃ].ⵠⵠᐃ = ps;
              a[b][dq][ⲆΔΔᐃ].time = 0;
              a[b][dq][ⲆΔΔᐃ].angle = 0;
            }
          }
        }
      }
    }
    this.mode = 0;
    this.ΔⵠᐃⲆⲆᐃⵠ = j;
    this.ⵠⵠᐃⵠⲆ = 0;
    this.ⵠⵠΔΔᐃΔⲆ = 6;
    this.ΔΔⵠⲆ = [];
    this.Δⵠⵠ = [];
    this.Δⵠⵠ[0] = [];
    this.Δⵠⵠ[100] = [];
    this.Δⵠⵠ[80] = [];
    this.Δⵠⵠ[60] = [];
    this.Δⵠⵠ[67] = [];
    this.Δⵠⵠ[70] = [];
    this.Δⵠⵠ[77] = [];
    this.Δⵠⵠ[71] = [];
    this.Δⵠⵠ[72] = [];
    this.Δⵠⵠ[73] = [];
    this.Δⵠⵠ[74] = [];
    this.Δⵠⵠ[65] = [];
    this.Δⵠⵠ[66] = [];
    this.Δⵠⵠ[62] = [];
    this.Δⵠⵠ[88] = [];
    this.Δⵠⵠ[91] = [];
    this.Δⵠⵠ[90] = [];
    this.Δⵠⵠ[63] = [];
    this.Δⵠⵠ[78] = [];
    this.Δⵠⵠ[64] = [];
    this.Δⵠⵠ[69] = [];
    this.Δⵠⵠ[68] = [];
    this.Δⵠⵠ[79] = [];
    this.Δⵠⵠ[89] = [];
    this.Δⵠⵠ[83] = [];
    this.Δⵠⵠ[84] = [];
    this.Δⵠⵠ[85] = [];
    this.Δⵠⵠ[81] = [];
    this.Δⵠⵠ[82] = [];
    this.Δⵠⵠ[86] = [];
    this.Δⵠⵠ[34] = [];
    this.Δⵠⵠ[36] = [];
    this.Δⵠⵠ[61] = [];
    this.Δⵠⵠ[2] = [];
    this.Δⵠⵠ[1] = [];
    this.Δⵠⵠ[6] = [];
    this.Δⵠⵠ[3] = [];
    this.Δⵠⵠ[5] = [];
    this.Δⵠⵠ[12] = [];
    this.Δⵠⵠ[13] = [];
    this.Δⵠⵠ[14] = [];
    this.Δⵠⵠ[20] = [];
    this.Δⵠⵠ[52] = [];
    this.Δⵠⵠ[4] = [];
    this.Δⵠⵠ[7] = [];
    this.Δⵠⵠ[8] = [];
    this.Δⵠⵠ[9] = [];
    this.Δⵠⵠ[19] = [];
    this.Δⵠⵠ[50] = [];
    this.Δⵠⵠ[41] = [];
    this.Δⵠⵠ[10] = [];
    this.Δⵠⵠ[15] = [];
    this.Δⵠⵠ[16] = [];
    this.Δⵠⵠ[17] = [];
    this.Δⵠⵠ[21] = [];
    this.Δⵠⵠ[51] = [];
    this.Δⵠⵠ[45] = [];
    this.Δⵠⵠ[46] = [];
    this.Δⵠⵠ[47] = [];
    this.Δⵠⵠ[48] = [];
    this.Δⵠⵠ[49] = [];
    this.Δⵠⵠ[53] = [];
    this.Δⵠⵠ[18] = [];
    this.Δⵠⵠ[29] = [];
    this.Δⵠⵠ[56] = [];
    this.Δⵠⵠ[11] = [];
    this.Δⵠⵠ[22] = [];
    this.Δⵠⵠ[23] = [];
    this.Δⵠⵠ[30] = [];
    this.Δⵠⵠ[38] = [];
    this.Δⵠⵠ[33] = [];
    this.Δⵠⵠ[31] = [];
    this.Δⵠⵠ[55] = [];
    this.Δⵠⵠ[37] = [];
    this.Δⵠⵠ[43] = [];
    this.Δⵠⵠ[44] = [];
    this.Δⵠⵠ[54] = [];
    this.Δⵠⵠ[39] = [];
    this.Δⵠⵠ[40] = [];
    this.Δⵠⵠ[32] = [];
    this.Δⵠⵠ[24] = [];
    this.Δⵠⵠ[25] = [];
    this.Δⵠⵠ[26] = [];
    this.Δⵠⵠ[27] = [];
    this.Δⵠⵠ[28] = [];
    this.Δⵠⵠ[35] = [];
    this.Δⵠⵠ[87] = [];
    this.Δⵠⵠ[42] = [];
    this.ΔᐃⲆⲆΔ = [];
    this.ᐃⲆᐃⵠⲆ = 260;
    this.ⲆΔⲆΔΔ = 260;
    this.ⲆⲆᐃⵠⵠᐃⵠ = 100;
    this.ⵠⵠⵠⲆΔᐃⲆ = 100;
    this.w = this.ⲆⲆᐃⵠⵠᐃⵠ * this.ᐃⲆᐃⵠⲆ;
    this.ᐃᐃᐃ = this.ⲆΔⲆΔΔ * this.ⵠⵠⵠⲆΔᐃⲆ;
    this.ΔⲆΔᐃΔ = new Uk.ΔᐃΔⵠᐃⲆⵠ();
    this.ⲆᐃⵠΔ = [];
    this.ⵠᐃΔᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Hs, 0, 1, 0, 1, 1);
    this.transition = false;
    this.ΔΔᐃⲆᐃ = [];
    this.Δᐃⵠᐃᐃ = 0;
    this.ΔᐃᐃⲆᐃΔⲆ = 1;
    this.ⵠⵠⵠᐃᐃΔⵠ = 2;
    this.ᐃΔᐃⵠⲆᐃᐃ = 3;
    this.ⲆⵠⵠⵠΔ = 4;
    this.ⵠⲆᐃᐃᐃⵠΔ = 10;
    this.ΔΔᐃⲆᐃ[this.Δᐃⵠᐃᐃ] = {
      ⲆⵠᐃⲆⲆΔⲆ: 1,
      ⵠΔΔ: [19, 58, 43],
      ⵠⲆⵠ: [4, 43, 48],
      ᐃⲆᐃᐃᐃ: ["#133a2b", "#042b30"]
    };
    this.ΔΔᐃⲆᐃ[this.ⲆⵠⵠⵠΔ] = {
      ⲆⵠᐃⲆⲆΔⲆ: 0,
      ⵠΔΔ: [11, 106, 132],
      ⵠⲆⵠ: [9, 55, 63],
      ᐃⲆᐃᐃᐃ: ["#0B6A84", "#09373F"]
    };
    this.ΔΔᐃⲆᐃ[this.ΔᐃᐃⲆᐃΔⲆ] = {
      ⲆⵠᐃⲆⲆΔⲆ: 0,
      ⵠΔΔ: [235, 242, 240],
      ⵠⲆⵠ: [19, 97, 103],
      ᐃⲆᐃᐃᐃ: ["#EBF2F0", "#136167"]
    };
    this.ΔΔᐃⲆᐃ[this.ⵠⵠⵠᐃᐃΔⵠ] = {
      ⵠΔΔ: [45, 32, 23],
      ⵠⲆⵠ: [3, 28, 30],
      ᐃⲆᐃᐃᐃ: ["#2D2017", "#031C1E"],
      ⲆⵠᐃⲆⲆΔⲆ: 0
    };
    this.ΔΔᐃⲆᐃ[this.ᐃΔᐃⵠⲆᐃᐃ] = {
      ⲆⵠᐃⲆⲆΔⲆ: 0,
      ᐃⲆᐃᐃᐃ: ["#4A4A4A", "#183D3C"],
      ⵠΔΔ: [74, 74, 74],
      ⵠⲆⵠ: [24, 61, 60]
    };
    this.ΔΔᐃⲆᐃ[this.ⵠⲆᐃᐃᐃⵠΔ] = {
      ᐃⲆᐃᐃᐃ: ["#EBD8A6", "#093D38"],
      ⲆⵠᐃⲆⲆΔⲆ: 0,
      ⵠΔΔ: [235, 216, 166],
      ⵠⲆⵠ: [9, 61, 56]
    };
    this.ΔᐃΔⲆΔΔⲆ = function (b, c, d, e, f, g) {
      this.x1 = c * 100;
      this.y1 = d * 100;
      this.w = e * 100;
      this.ᐃᐃᐃ = f * 100;
      this.x2 = (c + e) * 100;
      this.y2 = (d + f) * 100;
      this.ᐃᐃⲆ = b;
      this.ᐃⲆΔ = g === undefined ? 15 : g;
    };
    this.ⲆᐃⵠΔᐃ = -1000000;
    this.ⲆᐃⵠΔΔ = this.ⲆᐃⵠΔᐃ;
    this.ΔΔᐃΔⵠ = this.ⲆᐃⵠΔᐃ;
    this.ⲆⲆᐃᐃⵠ = this.ⲆᐃⵠΔᐃ;
    this.ΔΔⲆᐃⲆΔᐃ = this.ⲆᐃⵠΔᐃ;
    this.ᐃⲆᐃⲆΔⵠⲆ = this.ⲆᐃⵠΔᐃ;
    this.ΔⵠⵠⲆᐃ = this.ⲆᐃⵠΔᐃ;
    this.ᐃⲆⵠΔⵠΔᐃΔⵠ = function (b) {
      var c = b.r.x;
      var d = b.r.y;
      var e = Math.floor(d / 100);
      var f = Math.floor(c / 100);
      b.ⲆᐃⵠΔΔ = Qx.ⲆᐃⵠΔᐃ;
      b.ΔΔᐃΔⵠ = Qx.ⲆᐃⵠΔᐃ;
      b.ⲆⲆᐃᐃⵠ = Qx.ⲆᐃⵠΔᐃ;
      b.ΔΔⲆᐃⲆΔᐃ = Qx.ⲆᐃⵠΔᐃ;
      b.ΔⵠⵠⲆᐃ = Qx.ⲆᐃⵠΔᐃ;
      b.ⵠⵠᐃⵠᐃⲆⵠ = Qx.ⲆᐃⵠΔᐃ;
      for (var g = 0; Qx.ⲆⵠⵠⵠΔ !== Qx.ⲆᐃⵠΔ[g].ᐃᐃⲆ; g++) {
        if (Qx.ⲆᐃⵠΔ[g].ᐃᐃⲆ === Qx.Δᐃⵠᐃᐃ) {
          var h = Qx.ᐃⲆⵠⵠΔ(g, c, d);
          b.ΔΔⲆᐃⲆΔᐃ = Math.max(b.ΔΔⲆᐃⲆΔᐃ, h);
          if (h > 0 && Qx.ΔⲆⲆᐃⵠⵠΔᐃⵠ(g, c, d) === 1) {
            b.ⵠⵠᐃⵠᐃⲆⵠ = 1;
          }
        } else if (Qx.ⲆᐃⵠΔ[g].ᐃᐃⲆ === Qx.ΔᐃᐃⲆᐃΔⲆ) {
          b.ⲆᐃⵠΔΔ = Math.max(b.ⲆᐃⵠΔΔ, Qx.ᐃⲆⵠⵠΔ(g, c, d));
        } else if (Qx.ⲆᐃⵠΔ[g].ᐃᐃⲆ === Qx.ⵠⲆᐃᐃᐃⵠΔ) {
          b.ΔΔᐃΔⵠ = Math.max(b.ΔΔᐃΔⵠ, Qx.ᐃⲆⵠⵠΔ(g, c, d));
        } else if (Qx.ⵠⵠⵠᐃᐃΔⵠ === Qx.ⲆᐃⵠΔ[g].ᐃᐃⲆ) {
          b.ⲆⲆᐃᐃⵠ = Math.max(b.ⲆⲆᐃᐃⵠ, Qx.ᐃⲆⵠⵠΔ(g, c, d));
        } else if (Qx.ᐃΔᐃⵠⲆᐃᐃ === Qx.ⲆᐃⵠΔ[g].ᐃᐃⲆ) {
          b.ΔⵠⵠⲆᐃ = Math.max(b.ΔⵠⵠⲆᐃ, Qx.ᐃⲆⵠⵠΔ(g, c, d));
        }
      }
      if (Jx.ΔⲆΔᐃ[e][f].iblk) {
        b.ⵠⵠᐃⵠᐃⲆⵠ = 1;
      }
      if (Qx.ΔⲆᐃΔⵠⵠᐃⵠⵠ(f, e)) {
        b.ᐃⲆᐃⲆΔⵠⲆ = b.ⲆᐃⵠΔᐃ;
      } else if (Jx.ΔⲆΔᐃ[e][f].wtb || b.ⲆᐃⵠΔΔ < 0 && b.ⲆⲆᐃᐃⵠ < 0 && b.ΔΔⲆᐃⲆΔᐃ < 0 && b.ⵠⵠᐃⵠᐃⲆⵠ < 0 && b.ΔⵠⵠⲆᐃ < 0 && b.ΔΔᐃΔⵠ < 0) {
        b.ᐃⲆᐃⲆΔⵠⲆ = 1;
      } else {
        b.ᐃⲆᐃⲆΔⵠⲆ = b.ⲆᐃⵠΔᐃ;
      }
    };
    this.ᐃᐃⲆᐃᐃᐃᐃⲆΔ = function (a, b) {
      Qx.ⲆᐃⵠΔΔ = Qx.ⲆᐃⵠΔᐃ;
      Qx.ΔΔᐃΔⵠ = Qx.ⲆᐃⵠΔᐃ;
      Qx.ⲆⲆᐃᐃⵠ = Qx.ⲆᐃⵠΔᐃ;
      Qx.ΔⵠⵠⲆᐃ = Qx.ⲆᐃⵠΔᐃ;
      Qx.ΔΔⲆᐃⲆΔᐃ = Qx.ⲆᐃⵠΔᐃ;
      for (var c = 0; Qx.ⲆⵠⵠⵠΔ !== Qx.ⲆᐃⵠΔ[c].ᐃᐃⲆ; c++) {
        if (Qx.ⲆᐃⵠΔ[c].ᐃᐃⲆ === Qx.Δᐃⵠᐃᐃ) {
          Qx.ΔΔⲆᐃⲆΔᐃ = Math.max(Qx.ΔΔⲆᐃⲆΔᐃ, Qx.ᐃⲆⵠⵠΔ(c, a, b));
        } else if (Qx.ⲆᐃⵠΔ[c].ᐃᐃⲆ === Qx.ΔᐃᐃⲆᐃΔⲆ) {
          Qx.ⲆᐃⵠΔΔ = Math.max(Qx.ⲆᐃⵠΔΔ, Qx.ᐃⲆⵠⵠΔ(c, a, b));
        } else if (Qx.ⵠⲆᐃᐃᐃⵠΔ === Qx.ⲆᐃⵠΔ[c].ᐃᐃⲆ) {
          Qx.ΔΔᐃΔⵠ = Math.max(Qx.ΔΔᐃΔⵠ, Qx.ᐃⲆⵠⵠΔ(c, a, b));
        } else if (Qx.ⲆᐃⵠΔ[c].ᐃᐃⲆ === Qx.ⵠⵠⵠᐃᐃΔⵠ) {
          Qx.ⲆⲆᐃᐃⵠ = Math.max(Qx.ⲆⲆᐃᐃⵠ, Qx.ᐃⲆⵠⵠΔ(c, a, b));
        } else if (Qx.ⲆᐃⵠΔ[c].ᐃᐃⲆ === Qx.ᐃΔᐃⵠⲆᐃᐃ) {
          Qx.ΔⵠⵠⲆᐃ = Math.max(Qx.ΔⵠⵠⲆᐃ, Qx.ᐃⲆⵠⵠΔ(c, a, b));
        }
      }
      if (Qx.ⲆᐃⵠΔΔ < 0 && Qx.ΔⵠⵠⲆᐃ < 0 && Qx.ΔΔⲆᐃⲆΔᐃ < 0 && Qx.ΔⵠⵠⲆᐃ < 0 && Qx.ΔΔᐃΔⵠ < 0) {
        Qx.ᐃⲆᐃⲆΔⵠⲆ = 1;
      } else {
        Qx.ᐃⲆᐃⲆΔⵠⲆ = Qx.ⲆᐃⵠΔᐃ;
      }
    };
    this.ΔⲆⲆᐃⵠⵠΔᐃⵠ = function (b, c, d) {
      var e = Qx.ⲆᐃⵠΔ[b];
      var f = 0;
      ⲆⵠΔⲆ = e.x1 + 30 + ((e.ᐃⲆΔ & 4) === 0 ? 150 : 0);
      var g = c - ⲆⵠΔⲆ;
      if ((e.ᐃⲆΔ & 4) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ⲆᐃⲆᐃ = e.y1 + 250 + ((e.ᐃⲆΔ & 1) === 0 ? 150 : 0);
      g = d - ⲆᐃⲆᐃ;
      if ((e.ᐃⲆΔ & 1) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ⵠⲆΔΔ = e.x2 + 80 + (e.ᐃⲆΔ & 8 ? 0 : -200);
      g = ⵠⲆΔΔ - c;
      if ((e.ᐃⲆΔ & 8) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      ⲆⵠⲆⲆ = e.y2 - 200 + ((e.ᐃⲆΔ & 2) === 0 ? -200 : 0);
      g = ⲆⵠⲆⲆ - d;
      if ((e.ᐃⲆΔ & 2) > 0 && g > 0 && g < 320) {
        f = 1;
      }
      if (c >= ⲆⵠΔⲆ && ⵠⲆΔΔ >= c && ⲆᐃⲆᐃ <= d && d <= ⲆⵠⲆⲆ) {
        return f;
      } else {
        return 0;
      }
    };
    this.ᐃⲆⵠⵠΔ = function (a, b, c) {
      var d = Qx.ⲆᐃⵠΔ[a];
      ⲆⵠΔⲆ = d.x1 + 30;
      ⲆᐃⲆᐃ = d.y1 + 250;
      ⵠⲆΔΔ = d.x2 + 80;
      ⲆⵠⲆⲆ = d.y2 - 200;
      if (ⲆⵠΔⲆ <= b && b <= ⵠⲆΔΔ && ⲆᐃⲆᐃ <= c && ⲆⵠⲆⲆ >= c) {
        return Math.min(b - ⲆⵠΔⲆ, ⵠⲆΔΔ - b, c - ⲆᐃⲆᐃ, ⲆⵠⲆⲆ - c);
      }
      var e = -1000000;
      if (b - ⲆⵠΔⲆ < 0) {
        e = Math.max(e, b - ⲆⵠΔⲆ);
      } else if (ⵠⲆΔΔ - b < 0) {
        e = Math.max(e, ⵠⲆΔΔ - b);
      }
      ⵠⲆᐃⵠΔⲆⵠ = -1000000;
      if (c < ⲆᐃⲆᐃ || ⲆⵠⲆⲆ < c) {
        if (c - ⲆᐃⲆᐃ < 0) {
          ⵠⲆᐃⵠΔⲆⵠ = Math.max(ⵠⲆᐃⵠΔⲆⵠ, c - ⲆᐃⲆᐃ);
        } else {
          ⵠⲆᐃⵠΔⲆⵠ = Math.max(ⵠⲆᐃⵠΔⲆⵠ, ⲆⵠⲆⲆ - c);
        }
        e = e !== -1000000 && ⵠⲆᐃⵠΔⲆⵠ !== -1000000 ? Math.min(e, ⵠⲆᐃⵠΔⲆⵠ) : ⵠⲆᐃⵠΔⲆⵠ;
      }
      return e;
    };
    this.ΔⵠⵠΔΔⲆΔ = function (b, c, d) {
      var e = d;
      var f = c;
      x(e, f, "isl", b, 1);
      for (var g = 0; g < 4; g++) {
        for (var h = 0; h < 3; h++) {
          x(e - h, f - g, "iblk", 0);
          x(e + h, f - g, "iblk", 0);
          x(e + h, f + g, "iblk", 0);
          x(e - h, f + g, "iblk", 0);
        }
      }
      if (b === 0) {
        for (g = 0; g < 2; g++) {
          x(e - g, f - 4, "iblk", 0);
          x(e + g, f - 4, "iblk", 0);
          x(e - g, f + 4, "iblk", 0);
          x(e + g, f + 4, "iblk", 0);
        }
        for (g = 0; g < 3; g++) {
          x(e - 3, f + g, "iblk", 0);
          x(e + 3, f + g, "iblk", 0);
          x(e - 3, f - g, "iblk", 0);
          x(e + 3, f - g, "iblk", 0);
        }
        x(e - 2, f - 4, "iblk", 0);
        x(e - 3, f - 3, "iblk", 0);
        x(e + 2, f + 4, "iblk", 0);
        x(e + 3, f + 3, "iblk", 0);
      } else if (b === 1) {
        for (g = 0; g < 3; g++) {
          x(e - g, f - 4, "iblk", 0);
          x(e + g, f - 4, "iblk", 0);
          x(e - g, f + 4, "iblk", 0);
          x(e + g, f + 4, "iblk", 0);
        }
        for (g = 0; g < 4; g++) {
          x(e - 3, f + g, "iblk", 0);
          x(e + 3, f + g, "iblk", 0);
          x(e - 3, f - g, "iblk", 0);
          x(e + 3, f - g, "iblk", 0);
        }
      } else if (b === 2) {
        for (g = 0; g < 2; g++) {
          x(e - g, f - 4, "iblk", 0);
          x(e + g, f - 4, "iblk", 0);
          x(e - g, f + 4, "iblk", 0);
          x(e + g, f + 4, "iblk", 0);
        }
        for (g = 0; g < 3; g++) {
          x(e - 3, f + g, "iblk", 0);
          x(e + 3, f + g, "iblk", 0);
          x(e - 3, f - g, "iblk", 0);
          x(e + 3, f - g, "iblk", 0);
        }
      }
    };
    this.ᐃⵠΔⲆⲆᐃᐃⲆᐃ = function (b) {
      for (var c = 0; c < Qx.ⲆᐃⵠΔ.length && b > 0; c++) {
        var d = Qx.ⲆᐃⵠΔ[c];
        if (d.ᐃᐃⲆ === Qx.ⲆⵠⵠⵠΔ && d.w > 1800 && d.ᐃᐃᐃ > 1000) {
          var f = Math.floor((d.x1 + d.w / 2) / 100);
          var g = Math.floor((d.y1 + d.ᐃᐃᐃ / 2) / 100);
          Qx.ΔⵠⵠΔΔⲆΔ(b % 3, f, g);
          for (var h = 0; h < 3; h++) {
            var j = g - 2 + Math.floor(Qx.ΔⲆΔᐃΔ.get() * 4);
            var k = f - 3 + Math.floor(Qx.ΔⲆΔᐃΔ.get() * 6);
            if (Jx.ΔⲆΔᐃ[j][k].s === undefined) {
              x(j, k, "plm", h);
            }
            j = g - 2 + Math.floor(Qx.ΔⲆΔᐃΔ.get() * 4);
            k = f - 3 + Math.floor(Qx.ΔⲆΔᐃΔ.get() * 6);
            if (Jx.ΔⲆΔᐃ[j][k].plm === undefined) {
              x(j, k, "s", h);
            }
          }
          j = g - 2 + Math.floor(Qx.ΔⲆΔᐃΔ.get() * 4);
          k = f - 3 + Math.floor(Qx.ΔⲆΔᐃΔ.get() * 6);
          if (Bt === Jx.ΔⲆΔᐃ[j][k].plm && ct === Jx.ΔⲆΔᐃ[j][k].s) {
            x(j, k, "p", 0, 1);
          }
          b--;
        }
      }
    };
    this.ΔᐃΔⲆⵠⲆΔⲆᐃ = function (j) {
      Qx.ΔⲆΔᐃΔ.ⵠᐃᐃⲆᐃ(j);
      var l = 0;
      while (true) {
        if (++l > 10000) {
          return;
        }
        Qx.ⲆᐃⵠΔ = [];
        if (Qx.ⵠⵠᐃⵠⲆ === 0 && (Qx.mode === 3 || Qx.mode === 7 || Qx.mode === 0)) {
          Qx.ⵠⵠᐃⵠⲆ = is;
        }
        if (Qx.mode === 2) {
          Qx.ⲆᐃⵠΔ.push(new Qx.ΔᐃΔⲆΔΔⲆ(Qx.Δᐃⵠᐃᐃ, 2, 2, 80, 80, 15));
        } else if (Qx.mode === 4) {
          Qx.ⲆᐃⵠΔ.push(new Qx.ΔᐃΔⲆΔΔⲆ(Qx.Δᐃⵠᐃᐃ, 2, 2, 150, 150, 15));
        } else if (Qx.ⵠⵠᐃⵠⲆ !== 0 && Qx.ⵠⵠᐃⵠⲆ.length > 0 && Qx.ⵠⵠᐃⵠⲆ[0].length > 3) {
          for (var n = 0; n < Qx.ⵠⵠᐃⵠⲆ.length; n++) {
            if ((H = Qx.ⵠⵠᐃⵠⲆ[n])[0] !== 0) {
              break;
            }
            var p = Ff.Δᐃⵠᐃᐃ;
            switch (H[1]) {
              case "FOREST":
                p = Qx.Δᐃⵠᐃᐃ;
                break;
              case "WINTER":
                p = Qx.ΔᐃᐃⲆᐃΔⲆ;
                break;
              case "DESERT":
                p = Qx.ⵠⲆᐃᐃᐃⵠΔ;
                break;
              case "LAVA":
                p = Qx.ⵠⵠⵠᐃᐃΔⵠ;
                break;
              case "DRAGON":
                p = Qx.ᐃΔᐃⵠⲆᐃᐃ;
            }
            Qx.ⲆᐃⵠΔ.push(new Qx.ΔᐃΔⲆΔΔⲆ(p, H[2], H[3], H[4], H[5], H[6], H[7]));
          }
        } else if (Qx.ⵠⵠᐃⵠⲆ !== 0) {
          for (n = 0; n < Qx.ⵠⵠᐃⵠⲆ.length; n++) {
            var u = Qx.ⵠⵠᐃⵠⲆ[n];
            p = Ff.Δᐃⵠᐃᐃ;
            switch (u[0]) {
              case "FOREST":
                p = Qx.Δᐃⵠᐃᐃ;
                break;
              case "WINTER":
                p = Qx.ΔᐃᐃⲆᐃΔⲆ;
                break;
              case "DESERT":
                p = Qx.ⵠⲆᐃᐃᐃⵠΔ;
                break;
              case "LAVA":
                p = Qx.ⵠⵠⵠᐃᐃΔⵠ;
                break;
              case "DRAGON":
                p = Qx.ᐃΔᐃⵠⲆᐃᐃ;
            }
            if (i(p, u[1], u[2], 0, (n + 1) * 10) === 0) {
              break;
            }
          }
          if (n !== Qx.ⵠⵠᐃⵠⲆ.length) {
            continue;
          }
        }
        break;
      }
      ΔΔⵠᐃⲆⵠⵠΔⲆ();
      var v = [];
      for (var A = 0; A < Qx.ⲆΔⲆΔΔ; A++) {
        v[A] = new Array(Qx.ᐃⲆᐃⵠⲆ);
        for (var B = 0; B < Qx.ᐃⲆᐃⵠⲆ; B++) {
          v[A][B] = 0;
        }
      }
      for (A = 0; A < Qx.ⲆᐃⵠΔ.length; A++) {
        for (var C = (u = Qx.ⲆᐃⵠΔ[A]).x2 / 100, D = u.y2 / 100, E = u.x1 / 100; E <= C; E++) {
          for (var F = u.y1 / 100; F <= D; F++) {
            v[F][E] = 1;
          }
        }
      }
      for (F = 0; F < Qx.ⲆΔⲆΔΔ; F++) {
        for (E = 0; E < Qx.ᐃⲆᐃⵠⲆ; E++) {
          if (v[F][E] === 0) {
            e(v, E, F);
          }
        }
      }
      Jx = {
        w: Qx.ᐃⲆᐃⵠⲆ,
        ᐃᐃᐃ: Qx.ⲆΔⲆΔΔ,
        ΔⲆΔᐃ: []
      };
      for (A = 0; Qx.ⲆΔⲆΔΔ > A; A++) {
        Jx.ΔⲆΔᐃ[A] = [];
      }
      if (Qx.ⵠⵠᐃⵠⲆ !== 0 && Qx.ⵠⵠᐃⵠⲆ.length > 0 && Qx.ⵠⵠᐃⵠⲆ[0].length > 3) {
        for (n = 0; Qx.ⵠⵠᐃⵠⲆ.length > n; n++) {
          if ((H = Qx.ⵠⵠᐃⵠⲆ[n])[1] === "isl") {
            Qx.ΔⵠⵠΔΔⲆΔ(H[2], H[3], H[4]);
          }
        }
      } else {
        Qx.ᐃⵠΔⲆⲆᐃᐃⲆᐃ(Qx.ⵠⵠΔΔᐃΔⲆ);
      }
      if (Qx.ⵠⵠᐃⵠⲆ !== 0 && Qx.ⵠⵠᐃⵠⲆ.length > 0 && Qx.ⵠⵠᐃⵠⲆ[0].length > 3) {
        var G = [];
        for (n = 0; n < Qx.ⵠⵠᐃⵠⲆ.length; n++) {
          var H;
          if ((H = Qx.ⵠⵠᐃⵠⲆ[n])[0] === 1) {
            if (H[1] === "r") {
              x(H[3], H[2], "wtb", 0, 1);
              G.push([H[3], H[2], H[4]]);
            } else {
              x(H[4], H[3], H[1], H[2], H[5]);
            }
          }
        }
        q(0, G);
        G = [];
      } else {
        for (A = 0; Qx.ⲆᐃⵠΔ.length > A; A++) {
          u = Qx.ⲆᐃⵠΔ[A];
          if (Qx.mode === 4) {
            if (u.ᐃᐃⲆ === Qx.Δᐃⵠᐃᐃ) {
              d(A, u.w / 10000);
            }
          } else {
            if (u.ᐃᐃⲆ === Qx.Δᐃⵠᐃᐃ) {
              m(A, u.w / 10000);
            }
            if (u.ᐃᐃⲆ === Qx.ⵠⵠⵠᐃᐃΔⵠ) {
              g(A, u.w / 10000);
            }
            if (Qx.ΔᐃᐃⲆᐃΔⲆ === u.ᐃᐃⲆ) {
              s(A, u.w / 10000);
            }
            if (Qx.ⵠⲆᐃᐃᐃⵠΔ === u.ᐃᐃⲆ) {
              c(A, u.w / 10000);
            }
            if (u.ᐃᐃⲆ === Qx.ᐃΔᐃⵠⲆᐃᐃ) {
              o(A);
            }
          }
        }
      }
      id("isl", 1);
      id("wtb", 20);
      id("la", 1);
      id("c", 1);
      id("s", 1);
      id("f", 1);
      id("p", 1);
      id("g", 1);
      id("d", 1);
      id("a", 1);
      id("re", 1);
      id("m", 1);
      $b = [];
      Qx.ⵠΔⵠΔⲆΔⲆᐃᐃ(Jx);
    };
    this.ᐃⵠⵠⵠ = x;
    this.ⵠΔⵠΔⲆΔⲆᐃᐃ = function (b) {
      for (var c = 0; c < this.ⲆΔⲆΔΔ; c++) {
        for (var d = 0; d < this.ᐃⲆᐃⵠⲆ; d++) {
          b.ΔⲆΔᐃ[c] ||= [];
          if (b.ΔⲆΔᐃ[c][d]) {
            var e = b.ΔⲆΔᐃ[c][d];
            if (e.de && e.de.length > 0) {
              for (var f = 0; e.de.length > f; f++) {
                if (e.de[f] && e.de[f].length > 0) {
                  e.de = e.de[f][0];
                  if (f >= 41 && f <= 49) {
                    e.de.scale = 3;
                    var g = Math.floor(Math.random() * 3 + 1);
                    e.de.ᐃⵠⲆ = [];
                    for (var h = 0; h < g; h++) {
                      e.de.ᐃⵠⲆ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.PI * Math.random() * 2,
                        ⵠⵠΔᐃⲆ: 41 + Math.floor(Math.random() * 9)
                      });
                    }
                  } else if (f >= 19 && f <= 26) {
                    e.de.scale = 3;
                    g = Math.floor(Math.random() * 3 + 1);
                    e.de.ᐃⵠⲆ = [];
                    for (h = 0; h < g; h++) {
                      e.de.ᐃⵠⲆ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.random() * Math.PI * 2,
                        ⵠⵠΔᐃⲆ: 19 + Math.floor(Math.random() * 8)
                      });
                    }
                  } else if (f <= 15 || f >= 27 && f <= 40) {
                    e.de.angle = 0;
                    e.de.scale = 2;
                    e.de.ⵠⵠΔᐃⲆ = f;
                  } else {
                    e.de.angle = Math.PI * Math.random() * 2;
                    e.de.scale = 1;
                    e.de.ⵠⵠΔᐃⲆ = f;
                  }
                }
              }
            }
            p(e, "p", new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1, 0, 10, 10));
            p(e, "t", new ⲆⵠΔⵠ.ᐃΔᐃⲆ(rk, 1, 1, 0, 10, 10));
            p(e, "s", new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Ij, 1, 1, 0, 10, 10));
            p(e, "g", new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1, 0, 10, 10));
            p(e, "d", new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1, 0, 10, 10));
            p(e, "b", new ⲆⵠΔⵠ.ᐃΔᐃⲆ(at, 1, 1, 0, 10, 10));
            p(e, "f", new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1, 0, 10, 10));
            p(e, "sw", new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1, 0, 10, 10));
            p(e, "gw", new ⲆⵠΔⵠ.ᐃΔᐃⲆ(ps, 1, 1, 0, 10, 10));
            p(e, "dw", new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1, 0, 10, 10));
            p(e, "a", new ⲆⵠΔⵠ.ᐃΔᐃⲆ(zk, 1, 1, 0, 10, 10));
            p(e, "cs", new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1, 0, 10, 10));
            p(e, "plm", new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1, 0, 10, 10));
            p(e, "re", new ⲆⵠΔⵠ.ᐃΔᐃⲆ(co, 1, 1, 0, 10, 10));
            p(e, "c", new ⲆⵠΔⵠ.ᐃΔᐃⲆ(gn, 1, 1, 0, 10, 10));
            p(e, "m", new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Ij, 1, 1, 0, 10, 10));
          } else {
            b.ΔⲆΔᐃ[c][d] = [];
          }
        }
      }
    };
    this.time = ns.ⵠᐃⵠ;
    this.ᐃᐃᐃⵠⲆ = {
      translate: {
        x: 0,
        y: 0
      },
      ΔⲆᐃⲆⵠ: 0,
      now: 0,
      ⵠᐃᐃⲆᐃ: 0
    };
    this.ΔⲆᐃⲆⵠⲆⲆΔΔ = function () {
      this.ΔᐃⲆⲆΔ = [];
      this.Δⵠⵠ[0] = [];
      this.Δⵠⵠ[2] = [];
      this.Δⵠⵠ[1] = [];
      this.Δⵠⵠ[6] = [];
      this.Δⵠⵠ[3] = [];
      this.Δⵠⵠ[5] = [];
      this.Δⵠⵠ[12] = [];
      this.Δⵠⵠ[13] = [];
      this.Δⵠⵠ[14] = [];
      this.Δⵠⵠ[20] = [];
      this.Δⵠⵠ[52] = [];
      this.Δⵠⵠ[30] = [];
      this.Δⵠⵠ[56] = [];
      this.Δⵠⵠ[38] = [];
      this.Δⵠⵠ[33] = [];
      this.Δⵠⵠ[31] = [];
      this.Δⵠⵠ[55] = [];
      this.Δⵠⵠ[37] = [];
      this.Δⵠⵠ[43] = [];
      this.Δⵠⵠ[44] = [];
      this.Δⵠⵠ[54] = [];
      this.Δⵠⵠ[39] = [];
      this.Δⵠⵠ[40] = [];
      this.Δⵠⵠ[32] = [];
      this.Δⵠⵠ[24] = [];
      this.Δⵠⵠ[25] = [];
      this.Δⵠⵠ[26] = [];
      this.Δⵠⵠ[27] = [];
      this.Δⵠⵠ[28] = [];
      this.Δⵠⵠ[35] = [];
      this.Δⵠⵠ[4] = [];
      this.Δⵠⵠ[7] = [];
      this.Δⵠⵠ[8] = [];
      this.Δⵠⵠ[9] = [];
      this.Δⵠⵠ[19] = [];
      this.Δⵠⵠ[50] = [];
      this.Δⵠⵠ[41] = [];
      this.Δⵠⵠ[10] = [];
      this.Δⵠⵠ[15] = [];
      this.Δⵠⵠ[16] = [];
      this.Δⵠⵠ[17] = [];
      this.Δⵠⵠ[21] = [];
      this.Δⵠⵠ[51] = [];
      this.Δⵠⵠ[45] = [];
      this.Δⵠⵠ[46] = [];
      this.Δⵠⵠ[47] = [];
      this.Δⵠⵠ[48] = [];
      this.Δⵠⵠ[49] = [];
      this.Δⵠⵠ[53] = [];
      this.Δⵠⵠ[18] = [];
      this.Δⵠⵠ[29] = [];
      this.Δⵠⵠ[56] = [];
      this.Δⵠⵠ[11] = [];
      this.Δⵠⵠ[22] = [];
      this.Δⵠⵠ[23] = [];
      this.Δⵠⵠ[100] = [];
      this.Δⵠⵠ[80] = [];
      this.Δⵠⵠ[60] = [];
      this.Δⵠⵠ[67] = [];
      this.Δⵠⵠ[70] = [];
      this.Δⵠⵠ[77] = [];
      this.Δⵠⵠ[71] = [];
      this.Δⵠⵠ[72] = [];
      this.Δⵠⵠ[73] = [];
      this.Δⵠⵠ[74] = [];
      this.Δⵠⵠ[65] = [];
      this.Δⵠⵠ[66] = [];
      this.Δⵠⵠ[62] = [];
      this.Δⵠⵠ[88] = [];
      this.Δⵠⵠ[91] = [];
      this.Δⵠⵠ[90] = [];
      this.Δⵠⵠ[63] = [];
      this.Δⵠⵠ[78] = [];
      this.Δⵠⵠ[75] = [];
      this.Δⵠⵠ[76] = [];
      this.Δⵠⵠ[64] = [];
      this.Δⵠⵠ[69] = [];
      this.Δⵠⵠ[68] = [];
      this.Δⵠⵠ[79] = [];
      this.Δⵠⵠ[89] = [];
      this.Δⵠⵠ[83] = [];
      this.Δⵠⵠ[84] = [];
      this.Δⵠⵠ[85] = [];
      this.Δⵠⵠ[81] = [];
      this.Δⵠⵠ[82] = [];
      this.Δⵠⵠ[86] = [];
      this.Δⵠⵠ[34] = [];
      this.Δⵠⵠ[36] = [];
      this.Δⵠⵠ[61] = [];
      this.Δⵠⵠ[87] = [];
      this.Δⵠⵠ[42] = [];
    };
    this.ⲆⲆᐃΔΔᐃΔᐃⲆ = function (a) {
      if (this.ΔᐃⲆⲆΔ[a]) {
        ⲆΔⵠΔ = this.ΔᐃⲆⲆΔ[a].type;
        this.ΔᐃⲆⲆΔ[a] = null;
        for (var b = this.Δⵠⵠ[ⲆΔⵠΔ], c = 0; b.length > c; c++) {
          if (a == b[c].ΔΔΔΔ) {
            b.splice(c, 1);
            return;
          }
        }
      }
    };
    this.ⵠΔⲆⵠΔΔⵠᐃᐃ = function (a, b) {
      for (var c = 0; this.Δⵠⵠ[56].length > c; c++) {
        var d = this.Δⵠⵠ[56][c];
        if (Math.floor(d.x / 100) === b && Math.floor(d.y / 100) === a) {
          return 1;
        }
      }
      return 0;
    };
    this.ΔⲆᐃΔⵠⵠᐃⵠⵠ = function (a, b) {
      for (var c = 0; this.Δⵠⵠ[30].length > c; c++) {
        var d = this.Δⵠⵠ[30][c];
        if (Math.floor(d.x / 100) == a && b == Math.floor(d.y / 100)) {
          return nh;
        }
      }
      return false;
    };
    this.ᐃᐃᐃΔⲆ = function (j) {
      for (var e = 0; j.length > e; e++) {
        ᐃⲆᐃⲆ = j[e];
        if (ᐃⲆᐃⲆ.angle != ᐃⲆᐃⲆ.ᐃΔᐃⵠᐃᐃⵠ) {
          var q = Math.PI * 2;
          ᐃⲆᐃⲆ.angle = (ᐃⲆᐃⲆ.angle + q) % q;
          ᐃⲆᐃⲆ.ᐃΔᐃⵠᐃᐃⵠ = (ᐃⲆᐃⲆ.ᐃΔᐃⵠᐃᐃⵠ + q) % q;
          if (ᐃⲆᐃⲆ.ᐃΔᐃⵠᐃᐃⵠ != ᐃⲆᐃⲆ.angle) {
            var B = ᐃⲆᐃⲆ.ᐃΔᐃⵠᐃᐃⵠ - ᐃⲆᐃⲆ.angle;
            var C = Math.abs(B);
            if (Math.PI < C) {
              C = Math.PI * 2 - C;
            }
            var D = Yx * (C / Math.PI * 3 * 10);
            if (Math.PI < B) {
              ᐃⲆᐃⲆ.angle -= D;
            } else if (-Math.PI > B) {
              ᐃⲆᐃⲆ.angle += D;
            } else if (B < 0) {
              ᐃⲆᐃⲆ.angle -= D;
            } else {
              ᐃⲆᐃⲆ.angle += D;
            }
            ᐃⲆᐃⲆ.angle = (ᐃⲆᐃⲆ.angle + q) % q;
            if (Math.abs(ᐃⲆᐃⲆ.angle - ᐃⲆᐃⲆ.ᐃΔᐃⵠᐃᐃⵠ) < D) {
              ᐃⲆᐃⲆ.angle = ᐃⲆᐃⲆ.ᐃΔᐃⵠᐃᐃⵠ;
            }
          }
        }
        Math.floor(ᐃⲆᐃⲆ.r.y / 100);
        Math.floor(ᐃⲆᐃⲆ.r.x / 100);
        if (ᐃⲆᐃⲆ.x != ᐃⲆᐃⲆ.r.x || ᐃⲆᐃⲆ.y != ᐃⲆᐃⲆ.r.y) {
          if (ᐃⲆᐃⲆ.action & 64) {
            ᐃⲆᐃⲆ.action -= 64;
          }
          ᐃⲆᐃⲆ.action |= 32;
          var E = ⲆⵠΔⵠ.ΔⵠΔᐃⵠⲆⲆ(ᐃⲆᐃⲆ, ᐃⲆᐃⲆ.r) + Math.PI;
          var F = Yx * ᐃⲆᐃⲆ.ⵠⵠⵠΔⵠ;
          var G = ⲆⵠΔⵠ.ⲆΔᐃⲆΔΔᐃ(F, E);
          if (ⲆⵠΔⵠ.ᐃⵠⵠΔⲆᐃᐃ(G) < ⲆⵠΔⵠ.ᐃⵠⵠΔⲆᐃᐃ(ⲆⵠΔⵠ.ⲆΔᐃⲆᐃⲆᐃ(ᐃⲆᐃⲆ, ᐃⲆᐃⲆ.r))) {
            ⲆⵠΔⵠ.ᐃᐃⲆⲆⲆⲆⵠ(ᐃⲆᐃⲆ, G);
          } else {
            if (ᐃⲆᐃⲆ.action & 32) {
              ᐃⲆᐃⲆ.action -= 32;
            }
            ᐃⲆᐃⲆ.action |= 64;
            ⲆⵠΔⵠ.ⲆⲆⵠᐃⲆΔⵠ(ᐃⲆᐃⲆ.r, ᐃⲆᐃⲆ);
          }
        }
        if (ᐃⲆᐃⲆ.ᐃⵠⲆᐃⲆ) {
          var H = ᐃⲆᐃⲆ.bubbles;
          if ((M = H.length) === 0 || ns.ΔΔⲆΔⵠᐃᐃ > M && H[M - 1].Ⲇᐃᐃᐃⵠ < 0.95) {
            H.push({
              id: Math.floor(Math.random() * ᐃΔ[540][0].length),
              x: Math.floor(ᐃⲆᐃⲆ.x + Math.random() * 80 - 40),
              y: Math.floor(ᐃⲆᐃⲆ.y + Math.random() * 80 - 40),
              Ⲇᐃᐃᐃⵠ: 1
            });
          }
          for (var I = 0; I < M; I++) {
            H[I].Ⲇᐃᐃᐃⵠ = Math.max(0, H[I].Ⲇᐃᐃᐃⵠ - Yx);
          }
          for (I = 0; I < M; I++) {
            if (H[I].Ⲇᐃᐃᐃⵠ === 0) {
              H.splice(I, 1);
              break;
            }
          }
        }
        var K = 0;
        if (ᐃⲆᐃⲆ.ⵠⵠΔⵠ && Px.ᐃᐃΔΔⵠ) {
          var L = ᐃⲆᐃⲆ.ⵠⲆᐃΔⲆ;
          var M = L.length;
          if (ᐃⲆᐃⲆ.ᐃⲆᐃⲆΔⵠⲆ > 0 && ᐃⲆᐃⲆ.ᐃΔΔⵠⲆ !== 227 && ᐃⲆᐃⲆ.ᐃΔΔⵠⲆ !== 228 && ᐃⲆᐃⲆ.ᐃΔΔⵠⲆ !== 230 && ᐃⲆᐃⲆ.ᐃΔΔⵠⲆ !== 229 && ᐃⲆᐃⲆ.ᐃΔΔⵠⲆ !== 91 && !ᐃⲆᐃⲆ.ᐃⵠⲆᐃⲆ && (K = 1, M === 0 || ns.ᐃⲆΔⲆⲆᐃᐃ < ⲆⵠΔⵠ.ᐃⵠⲆⲆ(L[M - 1], ᐃⲆᐃⲆ))) {
            var N = -ᐃⲆᐃⲆ.angle;
            var O = Math.cos(N) * 45 * So;
            var Q = So * (Math.sin(N) * 45);
            L.push({
              x: ᐃⲆᐃⲆ.x + O,
              y: ᐃⲆᐃⲆ.y + Q,
              r: 8,
              alpha: 0.8
            });
            L.push({
              x: ᐃⲆᐃⲆ.x - O,
              y: ᐃⲆᐃⲆ.y - Q,
              r: 8,
              alpha: 0.8
            });
            L.push({
              x: ᐃⲆᐃⲆ.x,
              y: ᐃⲆᐃⲆ.y,
              r: 24,
              alpha: 1
            });
          }
          for (I = 0; M > I; I++) {
            L[I].alpha = Math.max(0, L[I].alpha - Yx / 2.2);
            L[I].r += Yx * 20;
          }
          if (L.length > 0 && L[0].alpha === 0) {
            L.splice(0, 1);
          }
          var R = ᐃⲆᐃⲆ.ⵠᐃⲆΔⲆ;
          M = R.length;
          var S = -1;
          var U = Math.max(0, Math.sign(ᐃⲆᐃⲆ.ⵠⵠᐃⵠᐃⲆⵠ));
          var V = Math.max(0, Math.sign(ᐃⲆᐃⲆ.ⲆᐃⵠΔΔ));
          Math.max(0, Math.sign(ᐃⲆᐃⲆ.ΔΔᐃΔⵠ));
          var W = Math.max(0, Math.sign(ᐃⲆᐃⲆ.ⲆⲆᐃᐃⵠ));
          var X = Math.max(0, Math.sign(ᐃⲆᐃⲆ.ΔⵠⵠⲆᐃ));
          if (ᐃⲆᐃⲆ.ⵠⵠᐃⵠᐃⲆⵠ > 0 || ᐃⲆᐃⲆ.ΔΔᐃΔⵠ > 0) {
            S = 602;
          } else if (ᐃⲆᐃⲆ.ΔⵠⵠⲆᐃ > 0) {
            S = 680;
          } else if (ᐃⲆᐃⲆ.ⲆᐃⵠΔΔ > 0) {
            S = 475;
          } else if (ᐃⲆᐃⲆ.ⲆⲆᐃᐃⵠ > 0) {
            S = 476;
          }
          if (ᐃⲆᐃⲆ.ᐃΔΔⵠⲆ === 225 && (U | V | W | X) == 1) {
            S = 228;
            var Y = ᐃⲆᐃⲆ.ᐃⵠΔΔΔ - Math.PI / 2;
            var Z = 15;
            var _ = 11;
            var aa = ns.ΔᐃⲆⲆⵠᐃᐃ;
          } else if (ᐃⲆᐃⲆ.ᐃΔΔⵠⲆ === 239 && (U | V | W | X) === 1) {
            S = 249;
            Y = ᐃⲆᐃⲆ.ᐃⵠΔΔΔ - Math.PI / 2;
            Z = 21;
            _ = 16;
            aa = ns.ΔᐃⲆⲆⵠᐃᐃ;
          } else if (ᐃⲆᐃⲆ.ᐃΔΔⵠⲆ === 226 && (U | V | W | X) == 1) {
            S = 234;
            Y = ᐃⲆᐃⲆ.ᐃⵠΔΔΔ - Math.PI / 2;
            var ba = Math.random() * 50;
            Z = 10 + ba;
            _ = 0 + ba;
            aa = ns.ΔᐃⲆⲆⵠᐃᐃ * 0.9;
          } else {
            Y = ᐃⲆᐃⲆ.angle;
            Z = 15;
            _ = 11;
            aa = ns.ΔᐃⲆⲆⵠᐃᐃ;
          }
          if (ᐃⲆᐃⲆ.ᐃΔΔⵠⲆ === 227 || ᐃⲆᐃⲆ.ᐃΔΔⵠⲆ === 228 || ᐃⲆᐃⲆ.ᐃΔΔⵠⲆ === 91 || ᐃⲆᐃⲆ.ᐃΔΔⵠⲆ === 229 || ᐃⲆᐃⲆ.ᐃΔΔⵠⲆ === 230 || ᐃⲆᐃⲆ.ᐃⵠⲆᐃⲆ) ;else if (ᐃⲆᐃⲆ.ᐃΔΔⵠⲆ === 224) {
            if (M === 0 || ns.ᐃⵠⲆΔΔᐃⲆ < ⲆⵠΔⵠ.ᐃⵠⲆⲆ(R[M - 1], ᐃⲆᐃⲆ)) {
              R.push({
                x: ᐃⲆᐃⲆ.x,
                y: ᐃⲆᐃⲆ.y,
                angle: ᐃⲆᐃⲆ.ᐃⵠΔΔΔ,
                alpha: 1,
                id: 226
              });
            }
          } else if (S != -1 && K === 0 && (M === 0 || aa < ⲆⵠΔⵠ.ᐃⵠⲆⲆ(R[M - 1], ᐃⲆᐃⲆ))) {
            ᐃⲆᐃⲆ.ⵠⵠⲆⲆᐃΔᐃ++;
            if (Math.abs(ᐃⲆᐃⲆ.x - ᐃⲆᐃⲆ.r.x) > 1 && Math.abs(ᐃⲆᐃⲆ.y - ᐃⲆᐃⲆ.r.y) > 1) {
              if (ᐃⲆᐃⲆ.x < ᐃⲆᐃⲆ.r.x && ᐃⲆᐃⲆ.y > ᐃⲆᐃⲆ.r.y || ᐃⲆᐃⲆ.r.x < ᐃⲆᐃⲆ.x && ᐃⲆᐃⲆ.y < ᐃⲆᐃⲆ.r.y) {
                if (ᐃⲆᐃⲆ.ⵠⵠⲆⲆᐃΔᐃ % 2) {
                  O = So * -_;
                  Q = So * -_;
                } else {
                  Q = So * _;
                  O = So * _;
                }
              } else if (ᐃⲆᐃⲆ.ⵠⵠⲆⲆᐃΔᐃ % 2) {
                O = _ * So;
                Q = -_ * So;
              } else {
                Q = _ * So;
                O = -_ * So;
              }
            } else if (ᐃⲆᐃⲆ.ⵠⵠⲆⲆᐃΔᐃ % 2) {
              O = Math.cos(Y) * Z * So;
              Q = So * (Z * Math.sin(Y));
            } else {
              O = Z * -Math.cos(Y) * So;
              Q = So * (-Math.sin(Y) * Z);
            }
            R.push({
              x: ᐃⲆᐃⲆ.x + O,
              y: ᐃⲆᐃⲆ.y + Q,
              angle: Y + Math.PI / 2,
              alpha: 1,
              id: S
            });
          }
          for (I = 0; I < M; I++) {
            if (R[I].id === 226) {
              R[I].alpha = Math.max(0, R[I].alpha - Yx * 1.5);
            } else {
              R[I].alpha = Math.max(0, R[I].alpha - Yx / 2.85);
            }
          }
          if (R.length > 0 && R[0].alpha === 0) {
            R.splice(0, 1);
          }
        }
      }
    };
    this.ⵠⵠᐃ = function () {
      this.ᐃᐃᐃΔⲆ(this.Δⵠⵠ[0]);
      this.ᐃᐃᐃΔⲆ(this.Δⵠⵠ[80]);
      this.ᐃᐃᐃΔⲆ(this.Δⵠⵠ[60]);
      this.ᐃᐃᐃΔⲆ(this.Δⵠⵠ[67]);
      this.ᐃᐃᐃΔⲆ(this.Δⵠⵠ[70]);
      this.ᐃᐃᐃΔⲆ(this.Δⵠⵠ[77]);
      this.ᐃᐃᐃΔⲆ(this.Δⵠⵠ[71]);
      this.ᐃᐃᐃΔⲆ(this.Δⵠⵠ[72]);
      this.ᐃᐃᐃΔⲆ(this.Δⵠⵠ[73]);
      this.ᐃᐃᐃΔⲆ(this.Δⵠⵠ[74]);
      this.ᐃᐃᐃΔⲆ(this.Δⵠⵠ[61]);
      this.ᐃᐃᐃΔⲆ(this.Δⵠⵠ[62]);
      this.ᐃᐃᐃΔⲆ(this.Δⵠⵠ[88]);
      this.ᐃᐃᐃΔⲆ(this.Δⵠⵠ[91]);
      this.ᐃᐃᐃΔⲆ(this.Δⵠⵠ[90]);
      this.ᐃᐃᐃΔⲆ(this.Δⵠⵠ[63]);
      this.ᐃᐃᐃΔⲆ(this.Δⵠⵠ[78]);
      this.ᐃᐃᐃΔⲆ(this.Δⵠⵠ[75]);
      this.ᐃᐃᐃΔⲆ(this.Δⵠⵠ[76]);
      this.ᐃᐃᐃΔⲆ(this.Δⵠⵠ[64]);
      this.ᐃᐃᐃΔⲆ(this.Δⵠⵠ[68]);
      this.ᐃᐃᐃΔⲆ(this.Δⵠⵠ[65]);
      this.ᐃᐃᐃΔⲆ(this.Δⵠⵠ[66]);
      this.ᐃᐃᐃΔⲆ(this.Δⵠⵠ[69]);
    };
    this.ΔⵠᐃⲆ = [];
    this.ΔⵠᐃⲆ[620] = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1.05, 1, 0.008, 0.008);
    this.ΔⵠᐃⲆ[619] = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1.08, 1, 0.006, 0.006);
    this.ΔⵠᐃⲆ[694] = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1.02, 1, 0.008, 0.008);
    this.ΔⵠᐃⲆ[695] = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1.08, 1, 0.006, 0.006);
    this.ⲆΔⲆᐃⲆ = [];
    this.ⲆΔⲆᐃⲆ[0] = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(va, 0.1, 1, 0, 0.6, 0.6);
    this.ⲆΔⲆᐃⲆ[1] = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.4, 1, 0, 0.6, 0.6);
    this.ⲆΔⲆᐃⲆ[2] = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.3, 1, 0, 0.6, 0.6);
    this.ⲆΔⲆᐃⲆ[3] = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(f, 0.8, 1, 0, 0.6, 0.6);
    this.ⲆΔⲆᐃⲆ[4] = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.3, 1, 0, 0.6, 0.6);
    this.ⲆΔⲆᐃⲆ[5] = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.8, 1, 0, 0.6, 0.6);
    this.ⲆΔⲆᐃⲆ[6] = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Zq, 0.5, 1, 0, 0.6, 0.6);
    this.ⲆΔⲆᐃⲆ[7] = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.9, 1, 0, 0.6, 0.6);
    this.ⲆΔⲆᐃⲆ[8] = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(gr, 0.6, 1, 0, 0.6, 0.6);
    this.ⲆΔⲆᐃⲆ[9] = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Kk, 0.2, 1, 0, 0.6, 0.6);
    this.ⲆΔⲆᐃⲆ[10] = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Hs, 0.6, 1, 0, 0.6, 0.6);
    this.ⲆΔⲆᐃⲆ[11] = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Hs, 0.4, 1, 0, 0.6, 0.6);
    this.ⲆΔⲆᐃⲆ[12] = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(f, 0.8, 1, 0, 0.6, 0.6);
    this.ⲆΔⲆᐃⲆ[13] = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(gn, 0.2, 1, 0, 0.6, 0.6);
    this.ⲆΔⲆᐃⲆ[14] = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.7, 1, 0, 0.6, 0.6);
  }
  function Uf() {
    this.ᐃΔΔΔΔ = "";
    this.ⵠᐃᐃⲆ = 0;
    this.ᐃⲆⵠⲆⵠ = 0;
    this.ⵠΔᐃΔᐃ = 0;
    this.ΔᐃⲆⵠΔΔⲆ = 0;
    this.ᐃⵠΔⵠⵠ = 0;
    this.ⵠᐃⵠⲆᐃ = 0;
    this.ΔⲆⲆⲆⵠ = 0;
    this.level = 0;
    this.label = null;
    this.ⲆᐃΔⵠᐃΔⲆ = null;
    this.ΔⵠⲆⵠⵠⵠⵠ = null;
    this.ΔⲆⵠⲆΔ = gr;
    this.ⵠⵠⵠⲆⵠ = 0;
  }
  function Yf(a, b, c, d) {
    this.id = a;
    this.ⵠⵠⵠΔⵠ = (a + 5) * 8;
    this.Ⲇᐃᐃᐃⵠ = yo / 1366;
    this.x = b;
    this.y = c;
    this.c = Math.sin(d);
    this.ⲆΔᐃⲆ = Math.cos(d);
    this.alpha = 0;
  }
  function Kf(b, c, d, e, f, g) {
    const a = (d | 1773) & ~(d & 1773);
    const i = (e | 63305) & ~(e & 63305);
    const j = jx(~(b & 58391) & (b | 58391), (24 << (c >> 16 & 255)) + (16 << (c & 255)) + (0 << (c >> 8 & 255)) + (8 << (c >> 24 & 255)));
    jx(a, i);
    return j ^ 46594;
  }
  const Vf = {};
  Vf.get = function (a, b) {
    if (b !== "ⵠⵠᐃᐃΔⵠΔ") {
      const a = function () {
        oc.addEventListener("mousemove", function () {
          a();
        });
      };
      a();
    }
    return oc.Reflect.get(...arguments);
  };
  function Xf(b, c, d, e, i, j, a, k, m, h) {
    this.type = b;
    this.ᐃΔᐃΔ = c;
    this.id = d;
    this.x = e;
    this.y = i;
    this.angle = j;
    this.ᐃΔᐃⵠᐃᐃⵠ = j;
    this.action = a;
    this.info = k;
    this.ΔᐃᐃᐃΔ = h;
    this.r = {
      x: e,
      y: i
    };
    this.ⵠⵠⵠΔⵠ = m;
    if (Qx) {
      this.ΔΔΔΔ = Qx.ΔⵠᐃⲆⲆᐃⵠ * c + d;
    }
    switch (b) {
      case 0:
        this.ᐃᐃⲆⲆ = Qx.ΔΔⵠⲆ[this.ᐃΔᐃΔ];
        this.ⵠᐃᐃⲆ = this.ᐃᐃⲆⲆ.ⵠᐃᐃⲆ;
        this.ΔᐃⲆⵠΔΔⲆ = this.ᐃᐃⲆⲆ.ΔᐃⲆⵠΔΔⲆ;
        this.ᐃⵠΔⵠⵠ = this.ᐃᐃⲆⲆ.ᐃⵠΔⵠⵠ;
        this.ᐃⲆⵠⲆⵠ = this.ᐃᐃⲆⲆ.ᐃⲆⵠⲆⵠ;
        this.ΔΔⲆᐃⲆΔᐃ = -1000000;
        this.ⲆⲆᐃᐃⵠ = -1000000;
        this.ⲆᐃⵠΔΔ = -1000000;
        this.ΔΔᐃΔⵠ = -1000000;
        this.ᐃⲆᐃⲆΔⵠⲆ = -1000000;
        this.ⵠⵠᐃⵠᐃⲆⵠ = -1000000;
        this.ΔⵠⵠⲆᐃ = -1000000;
        this.ᐃΔⵠᐃⵠ = Qx.mode === 2 && this.ⵠᐃᐃⲆ === 0;
        this.ⵠⲆᐃᐃⵠΔⲆ = Qx.mode === 3 && this.ⵠᐃᐃⲆ === 0 && Ee;
        this.ᐃΔᐃⵠⵠΔᐃ = !!this.ᐃΔⵠᐃⵠ && this.ᐃᐃⲆⲆ.ᐃΔΔΔΔ === "  ";
        this.ⵠᐃⲆΔⲆ = [];
        this.ⲆᐃⵠⵠⵠΔᐃ = 0;
        this.ⵠⵠΔⵠ = true;
        this.ⵠⵠⲆⲆᐃΔᐃ = 0;
        this.ΔΔⵠΔⵠⲆⵠ = 0;
        this.ⵠⲆᐃΔⲆ = [];
        this.r = {
          x: e,
          y: i
        };
        this.ⲆⵠⵠΔ = pw;
        this.ᐃΔΔⲆⲆᐃᐃ = ow;
        this.ⵠᐃᐃⵠⲆ = 0;
        this.ᐃⵠΔΔΔ = 0;
        this.ⲆΔΔΔⲆ = 0;
        this.ⵠⵠⲆⲆⲆΔᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ΔᐃΔᐃⲆ = 0;
        this.ⲆⲆⵠΔΔᐃᐃ = 0;
        this.ᐃΔᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(va, 0.6, 0.6, 0, 5, 3);
        this.ᐃΔΔⵠΔ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.6, 0.6, 0, 5, 3);
        this.freeze = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.6, 0.6, 0, 5, 3);
        this.ᐃᐃᐃⵠΔΔΔ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.6, 0.6, 0, 5, 3);
        this.ᐃΔⲆⵠⵠΔⵠ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(true, 0, 2.25, -1.5, 3.75, 7.5);
        this.ΔⵠⲆΔᐃᐃⲆ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(true, 0, 7.5, -3, 22.5, 33.75);
        this.attack = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Hs, 0, 0, -Math.PI / 3, 6, 9);
        this.ᐃΔΔⵠⲆᐃΔᐃΔ = 0;
        this.ᐃⵠᐃΔᐃⵠⵠ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(rk, 0.6, 0.6, 0, 1, 3);
        this.ⵠΔⵠⲆΔⵠⵠ = this.ᐃΔᐃⵠⵠΔᐃ ? new ⲆⵠΔⵠ.ᐃΔᐃⲆ(true, 0, 2.25, -1.5, 2.75, 5.5) : 0;
        this.ᐃⲆⲆΔⲆⲆⵠ = 0;
        this.ᐃⵠⵠⲆⵠᐃΔ = 0;
        this.ⵠⲆⲆⵠⲆΔⲆ = [];
        this.ⲆΔᐃΔΔⵠΔ = [];
        this.text = [];
        this.label = [];
        this.ⲆᐃᐃΔⲆΔⵠ = tw;
        this.ⲆⵠᐃⲆⵠ = Xs;
        this.right = -1;
        this.ᐃΔΔⵠⲆ = -1;
        this.action = 64;
        this.ⲆᐃⲆⲆⲆⲆΔ = false;
        this.ᐃᐃⲆⵠⵠ = 0;
        this.ᐃⵠⲆᐃⲆ = false;
        this.bubbles = [];
        this.ⵠΔᐃΔᐃ = 0;
        this.ⲆΔΔᐃⵠ = -1;
        this.ⵠⵠᐃ = function (a) {
          if (this.info & 32768) {
            this.ⲆᐃⲆⲆⲆⲆΔ = Xs;
            this.info = this.info & -32769;
          } else {
            this.ⲆᐃⲆⲆⲆⲆΔ = false;
          }
          if (this.info & 16384) {
            this.info = this.info & -16385;
            this.ⵠΔᐃΔᐃ = 1;
          } else {
            this.ⵠΔᐃΔᐃ = 0;
          }
          this.ᐃᐃⲆⵠⵠ = Math.floor(this.info / 128);
          this.info -= this.ᐃᐃⲆⵠⵠ * 128;
          if (this.info === 7 || this.ᐃΔᐃⵠⵠΔᐃ) {
            this.right = -1;
          } else {
            this.right = this.info;
          }
          this.ⲆᐃⵠⵠⵠΔᐃ = Qx.ⵠΔⲆⵠΔΔⵠᐃᐃ(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100));
          this.ᐃΔΔⵠⲆ = this.ΔᐃᐃᐃΔ & 255;
          if (this.right === 2) {
            this.ᐃⵠⲆᐃⲆ = true;
          } else {
            this.ᐃⵠⲆᐃⲆ = co;
          }
          if (jf[this.right]) {
            this.ᐃΔⲆΔᐃ = true;
          } else {
            this.ᐃΔⲆΔᐃ = false;
          }
          if (a & 256) {
            this.ᐃⵠᐃΔᐃⵠⵠ.ⵠⲆⲆ = false;
            this.ᐃⵠᐃΔᐃⵠⵠ.ᐃⲆΔ = 0.6;
          } else if (a & 4) {
            this.freeze.ⵠⲆⲆ = false;
            this.freeze.ᐃⲆΔ = 0.6;
          } else if (a & 128) {
            this.ᐃΔΔⵠΔ.ⵠⲆⲆ = Ij;
            this.ᐃΔΔⵠΔ.ᐃⲆΔ = 0.6;
          }
          if (a & 8) {
            this.ᐃᐃᐃⵠΔΔΔ.ⵠⲆⲆ = va;
            this.ᐃᐃᐃⵠΔΔΔ.ᐃⲆΔ = 0.6;
          }
          if (a & 2) {
            this.ᐃΔᐃ.ⵠⲆⲆ = false;
            this.ᐃΔᐃ.ᐃⲆΔ = 0.6;
          }
          if (a & 16) {
            this.ᐃΔΔⵠⲆᐃΔᐃΔ = 0.58;
            if (Ux.ⵠⵠΔⵠⵠ && this.ⲆΔΔᐃⵠ !== -1) {
              Ux.ΔΔⵠⲆ[this.ⲆΔΔᐃⵠ].ⵠⲆⵠⲆᐃᐃᐃⲆΔ(rx[this.right]);
            }
          }
        };
        this.ⵠⵠᐃ();
        break;
      case 23:
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(gn, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        this.ⵠⲆⵠᐃⲆ = dw;
        this.ⵠΔᐃⵠⲆ = hw;
        this.ⲆΔᐃⲆᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ᐃⵠⵠⵠᐃΔⲆ = 0;
        this.ⵠᐃΔᐃⲆΔⲆ = 0;
        this.ΔⲆᐃᐃⵠ = nv;
        break;
      case 22:
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(fr, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        this.ⵠⲆⵠᐃⲆ = Tv;
        this.ⵠΔᐃⵠⲆ = Bv;
        this.ⲆΔᐃⲆᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ᐃⵠⵠⵠᐃΔⲆ = 0;
        this.ⵠᐃΔᐃⲆΔⲆ = 0;
        break;
      case 1:
      case 6:
        this.ⵠⲆⵠᐃⲆ = Xv;
        this.ⵠΔᐃⵠⲆ = pv;
        this.ⲆΔⲆⵠᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1.03, 0.98, 0.3, 0.3);
        this.ⲆⲆⵠⵠ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(rk, 1, 1.23, 1.18, 0.01, 0.01);
        this.ⲆΔᐃⲆᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1.23, 1.18, 0.01, 0.01);
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        break;
      case 43:
        this.ⵠⲆⵠᐃⲆ = Ev;
        this.ⵠΔᐃⵠⲆ = Yv;
        this.ⲆⲆⵠⵠ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(ps, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        this.ᐃⵠⵠᐃ = [];
        for (var g = 0; g < 3; g++) {
          this.ᐃⵠⵠᐃ.push({
            ⲆⵠⵠΔ: qv,
            ΔⵠᐃⲆ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Ij, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ᐃⵠⵠᐃ[0].x = this.x - 16.5;
        this.ᐃⵠⵠᐃ[0].y = this.y - 15.5;
        this.ᐃⵠⵠᐃ[0].angle = this.angle;
        this.ᐃⵠⵠᐃ[1].x = this.x + 36;
        this.ᐃⵠⵠᐃ[1].y = this.y + 17;
        this.ᐃⵠⵠᐃ[1].angle = this.angle;
        this.ᐃⵠⵠᐃ[2].x = this.x - 18.5;
        this.ᐃⵠⵠᐃ[2].y = this.y + 39;
        this.ᐃⵠⵠᐃ[2].angle = this.angle;
        break;
      case 3:
        this.ⵠⲆⵠᐃⲆ = rv;
        this.ⵠΔᐃⵠⲆ = Rv;
        this.ⲆⲆⵠⵠ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(tg, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: ps,
          angle: 0
        };
        this.ᐃⵠⵠᐃ = [];
        for (g = 0; g < 3; g++) {
          this.ᐃⵠⵠᐃ.push({
            ⲆⵠⵠΔ: _v,
            ΔⵠᐃⲆ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Kk, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ᐃⵠⵠᐃ[0].x = this.x - 16.5;
        this.ᐃⵠⵠᐃ[0].y = this.y - 15.5;
        this.ᐃⵠⵠᐃ[1].x = this.x - 5.5;
        this.ᐃⵠⵠᐃ[1].y = this.y + 7.5;
        this.ᐃⵠⵠᐃ[2].x = this.x + 18;
        this.ᐃⵠⵠᐃ[2].y = this.y - 5;
        break;
      case 77:
        this.ⲆⵠⵠΔ = Qv;
        this.ΔⵠᐃⲆ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃΔᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 70:
        this.ⲆⵠⵠΔ = Pv;
        this.ΔⵠᐃⲆ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(zl, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃΔᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 71:
        this.ⲆⵠⵠΔ = uv;
        this.ΔⵠᐃⲆ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(va, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠᐃΔᐃⵠⲆⵠ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃᐃⵠⲆᐃᐃᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Vg, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃΔᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(ps, 0.6, 0.6, 0, 5, 3);
        this.ᐃΔΔⵠΔ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 67:
        this.ⲆⵠⵠΔ = yv;
        this.ΔⵠᐃⲆ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠᐃΔᐃⵠⲆⵠ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃᐃⵠⲆᐃᐃᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(co, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃΔᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.6, 0.6, 0, 5, 3);
        this.ᐃΔΔⵠΔ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 68:
        this.ⲆⵠⵠΔ = iw;
        this.ΔⵠᐃⲆ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Hs, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃΔᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 90:
        this.ⲆⵠⵠΔ = $v;
        this.ΔⵠᐃⲆ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Hs, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
        this.ᐃΔᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 91:
        this.ⵠⵠⵠᐃᐃ = this.info & 15;
        this.ΔΔⵠΔⵠⲆⵠ = this.ΔᐃᐃᐃΔ & 1;
        this.ΔᐃⲆⲆⲆᐃⲆ = 0;
        this.x = this.info;
        this.y = this.ΔᐃᐃᐃΔ;
        this.ⲆⵠⵠΔ = Kv;
        this.ΔⵠᐃⲆ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(rk, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
        break;
      case 80:
      case 60:
      case 61:
      case 62:
      case 63:
      case 78:
      case 65:
      case 66:
      case 88:
        this.ⲆⵠⵠΔ = $v;
        this.ΔⵠᐃⲆ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃΔᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(zl, 0.6, 0.6, 0, 5, 3);
        break;
      case 36:
        this.ⲆⵠⵠΔ = Nv;
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Ij, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: Vg,
          angle: 0
        };
        break;
      case 34:
        this.ⵠΔᐃⵠⲆ = mw;
        this.ⲆⵠⵠΔ = vv;
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(rk, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: Zq,
          angle: 0
        };
        this.up = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Wh, 1, 1.03, 0.98, 0.1, 0.1);
        this.ΔⲆⲆᐃᐃ = [];
        break;
      case 87:
        this.angle = Math.random() * Math.PI / 2;
      case 86:
      case 82:
        this.ⲆⵠⵠΔ = Fv;
        this.ᐃΔᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(fr, 0.6, 0.6, 0, 5, 3);
        break;
      case 81:
        this.ⲆⵠⵠΔ = ew;
        this.ᐃΔᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 69:
        this.scale = 1;
        this.ⲆⵠⵠΔ = bw;
        this.ΔⵠᐃⲆ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Ij, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃΔᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Hs, 0.6, 0.6, 0, 5, 3);
        break;
      case 76:
        this.ᐃΔᐃΔⲆ = 0;
        this.ⲆⲆⵠⵠ = [];
        this.ᐃⲆⲆΔΔᐃᐃ = 0;
        this.ᐃᐃΔⲆⵠⵠⵠ = tv;
        this.ⲆⵠⵠΔ = Jv;
        this.ΔⵠᐃⲆ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Kk, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃΔᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Hs, 0.6, 0.6, 0, 5, 3);
        break;
      case 75:
        this.x = this.info;
        this.y = this.ΔᐃᐃᐃΔ;
        this.scale = 1;
        this.Δᐃᐃⵠ = 0;
        this.ⲆⵠⵠΔ = xv;
        this.ΔⵠᐃⲆ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃΔᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 74:
        this.x = this.info;
        this.y = this.ΔᐃᐃᐃΔ;
        this.scale = 1;
        this.Δᐃᐃⵠ = 0;
        this.ⲆⵠⵠΔ = Zv;
        this.ΔⵠᐃⲆ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(co, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃΔᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 73:
        this.scale = 1;
        this.ⲆⵠⵠΔ = Sv;
        this.ΔⵠᐃⲆ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(rk, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(fr, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃΔᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 72:
        this.scale = 1;
        this.ⲆⵠⵠΔ = sv;
        this.ΔⵠᐃⲆ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Kk, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃΔᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.6, 0.6, 0, 5, 3);
        break;
      case 64:
        this.scale = 1;
        this.ⲆⵠⵠΔ = Iv;
        this.ΔⵠᐃⲆ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0, 0, -Math.PI / 6, 0.5, 1);
        this.ᐃΔᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Pq, 0.6, 0.6, 0, 5, 3);
        break;
      case 100:
        this.ᐃⵠⵠᐃ = [];
        for (g = 0; g < 5; g++) {
          this.ᐃⵠⵠᐃ.push({
            ⲆⵠⵠΔ: _v,
            ΔⵠᐃⲆ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Hs, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        switch (this.id % 3) {
          case 0:
            this.ᐃⵠⵠᐃ[0].x = this.x - 20.5;
            this.ᐃⵠⵠᐃ[0].y = this.y - 22.5;
            this.ᐃⵠⵠᐃ[1].x = this.x - 35.5;
            this.ᐃⵠⵠᐃ[1].y = this.y + 7.5;
            this.ᐃⵠⵠᐃ[2].x = this.x + 7.5;
            this.ᐃⵠⵠᐃ[2].y = this.y - 30;
            this.ᐃⵠⵠᐃ[3].x = this.x + 22.5;
            this.ᐃⵠⵠᐃ[3].y = this.y;
            this.ᐃⵠⵠᐃ[4].x = this.x - 7.5;
            this.ᐃⵠⵠᐃ[4].y = this.y + 14.5;
            break;
          case 1:
            this.ᐃⵠⵠᐃ[0].x = this.x - 30.5;
            this.ᐃⵠⵠᐃ[0].y = this.y - 22.5;
            this.ᐃⵠⵠᐃ[1].x = this.x - 15.5;
            this.ᐃⵠⵠᐃ[1].y = this.y + 7.5;
            this.ᐃⵠⵠᐃ[2].x = this.x + 15.5;
            this.ᐃⵠⵠᐃ[2].y = this.y - 30;
            this.ᐃⵠⵠᐃ[3].x = this.x + 12.5;
            this.ᐃⵠⵠᐃ[3].y = this.y + 5;
            this.ᐃⵠⵠᐃ[4].x = this.x - 40.5;
            this.ᐃⵠⵠᐃ[4].y = this.y + 14.5;
            break;
          case 2:
            this.ᐃⵠⵠᐃ[0].x = this.x - 20.5;
            this.ᐃⵠⵠᐃ[0].y = this.y - 20.5;
            this.ᐃⵠⵠᐃ[1].x = this.x - 35.5;
            this.ᐃⵠⵠᐃ[1].y = this.y + 15.5;
            this.ᐃⵠⵠᐃ[2].x = this.x + 7.5;
            this.ᐃⵠⵠᐃ[2].y = this.y - 17;
            this.ᐃⵠⵠᐃ[3].x = this.x + 22.5;
            this.ᐃⵠⵠᐃ[3].y = this.y + 5;
            this.ᐃⵠⵠᐃ[4].x = this.x - 7.5;
            this.ᐃⵠⵠᐃ[4].y = this.y + 1.5;
        }
        break;
      case 31:
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        this.ⲆⵠⵠΔ = jw;
        this.ⲆⲆⵠⵠ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(co, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ΔⲆᐃΔⵠΔΔ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
        break;
      case 40:
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(f, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: Kk,
          angle: 0
        };
        this.ⲆⵠⵠΔ = wv;
        this.ⲆⲆⵠⵠ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Pq, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 39:
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Kk, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: f,
          angle: 0
        };
        this.ⲆⵠⵠΔ = Hv;
        this.ⲆⲆⵠⵠ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(f, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 44:
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: ps,
          angle: 0
        };
        this.ⲆⵠⵠΔ = zv;
        this.ⲆⲆⵠⵠ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Hs, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 55:
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: Ij,
          angle: 0
        };
        this.ⲆⵠⵠΔ = Ov;
        this.ⲆⲆⵠⵠ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(va, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 54:
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(co, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: gn,
          angle: 0
        };
        this.ⲆⵠⵠΔ = Uv;
        this.ⲆⲆⵠⵠ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 37:
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(f, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        this.ⲆⵠⵠΔ = Lv;
        this.ⲆⲆⵠⵠ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Hs, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case 24:
        this.ⲆⵠⵠΔ = Av;
        this.rotate = 0;
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Gl, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        break;
      case 25:
        this.ⲆⵠⵠΔ = lw;
        this.rotate = 0;
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        break;
      case 26:
        this.ⲆⵠⵠΔ = fw;
        this.rotate = 0;
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        break;
      case 27:
        this.ⲆⵠⵠΔ = aw;
        this.rotate = 0;
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(gr, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        break;
      case 28:
        this.ⲆⵠⵠΔ = gw;
        this.rotate = 0;
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(f, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: gn,
          angle: 0
        };
        break;
      case 32:
        this.ⵠⲆⵠᐃⲆ = cw;
        this.ⵠΔᐃⵠⲆ = Vv;
        this.rotate = 0;
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Kk, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: Vg,
          angle: 0
        };
        break;
      case 38:
        this.ⲆⵠⵠΔ = Ru;
        this.ΔΔⵠᐃ = Math.floor(this.x / 100);
        this.ⲆΔ = Math.floor(this.y / 100);
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: co,
          angle: 0
        };
        this.opacity = 1;
        this.ΔⲆᐃᐃⵠ = _u;
        break;
      case 42:
        this.ⲆⵠⵠΔ = bv;
        this.ⲆΔᐃⲆᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Vg, 1, 1.15, 1, 0.3, 0.3);
        this.color = 0;
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Wh, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        break;
      case 33:
      case 2:
      case 56:
      case 35:
      case 29:
        this.ⲆⵠⵠΔ = Uu;
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Zq, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: Hs,
          angle: 0
        };
        break;
      case 30:
        this.ⲆⵠⵠΔ = Uu;
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: Gl,
          angle: 0
        };
        this.ΔⲆᐃᐃⵠ = _u;
        break;
      case 4:
      case 7:
      case 8:
      case 9:
      case 19:
      case 50:
      case 5:
      case 12:
      case 13:
      case 14:
      case 20:
      case 52:
        this.ⲆⵠⵠΔ = Uu;
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: zk,
          angle: 0
        };
        this.ΔⲆᐃᐃⵠ = nv;
        break;
      case 41:
        this.ⲆⵠⵠΔ = lv;
        this.opacity = 1;
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(zl, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: Hs,
          angle: 0
        };
        var n = this.angle % (Math.PI / 2);
        if (Math.PI / 4 > n) {
          this.angle -= n;
        } else {
          this.angle += Math.PI / 2 - n;
        }
        break;
      case 79:
        this.ⲆⵠⵠΔ = $p;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 89:
        this.ⲆⵠⵠΔ = av;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 83:
        this.ⲆⵠⵠΔ = Wu;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 84:
        this.ⲆⵠⵠΔ = ev;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case 85:
        this.ⲆⵠⵠΔ = iv;
        this.angle = Math.PI * Math.random() * 2;
        break;
      case 11:
        this.ⵠⵠᐃ = function (a) {
          this.lock = this.info & 8192 ? 1 : 0;
          this.info = this.info & 8191;
          this.action = a;
        };
        this.ⲆⵠⵠΔ = mv;
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        this.lock = 0;
        this.ⵠⵠᐃ(this.action);
        break;
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 53:
      case 10:
      case 15:
      case 16:
      case 17:
      case 21:
      case 51:
        this.ⲆⵠⵠΔ = fv;
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: Vg,
          angle: 0
        };
        this.ΔⲆᐃᐃⵠ = nv;
        break;
      case 18:
        this.ⵠⲆⵠᐃⲆ = Gv;
        this.ⲆⵠⵠΔ = kw;
        this.ⵠΔᐃⵠⲆ = Dv;
        this.ⲆⲆⵠⵠ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(at, 1, 1.23, 1.18, 0.02, 0.02);
        this.ⲆΔᐃⲆᐃ = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1.23, 1.18, 0.04, 0.04);
        this.ᐃΔᐃ = {
          ΔⲆⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 1, 1, 0, 10, 10),
          ⵠⵠᐃ: false,
          angle: 0
        };
        this.ⵠⵠᐃ = function (a) {
          this.action = a;
        };
    }
  }
  function Zf() {
    Math.random();
    return "a";
  }
  function Vw() {
    Math.random();
    return "r";
  }
  function Ww() {
    Math.random();
    return "o";
  }
  function Xw() {
    Math.random();
    return "C";
  }
  function Yw() {
    Math.random();
    return "e";
  }
  function Zw() {
    Math.random();
    return "t";
  }
  function $w() {
    Math.random();
    return "p";
  }
  function _w() {
    Math.random();
    return "g";
  }
  ⵠⲆᐃⵠᐃⲆⲆΔⲆ = 1;
  (function b() {
    const c = {
      ⲆⵠⲆⵠᐃΔⲆⲆⲆ: 0
    };
    let d = 0;
    for (let a in c) {
      d = a;
    }
    const f = [];
    for (let a = 0; a < 12; a++) {
      f.push(oc.Math.floor(1 + oc.Math.random() * 10));
    }
    let g = "for (let " + d + " = 0 ; " + d + " < " + f[0] + " ; " + d + "++) {";
    for (let a = 0; a < f[1]; a++) {
      g += f[a] + ";debugger;";
    }
    for (let a = 0; a < f[2]; a++) {
      g += "debugger;";
    }
    g += "}";
    const e = new oc.Function(g);
    oc.setTimeout(b, 10000);
    e();
  })();
  var ax = oc.console;
  function Ww() {
    Math.random();
    return "o";
  }
  function bx() {
    this.ⵠᐃᐃⲆᐃ = function () {};
    this.ⲆⲆⵠⵠᐃ = {
      ᐃΔᐃΔ: 1,
      Δⵠᐃᐃⵠ: 1,
      open: Ij
    };
    this.ⵠⵠⵠⵠᐃ = {
      open: gr,
      Δⵠᐃᐃⵠ: -1,
      ᐃΔᐃΔ: 1
    };
    this.ᐃⲆΔⵠ = {
      ΔΔΔⲆᐃᐃⵠ: 0,
      ΔⵠΔᐃΔ: 0,
      ᐃΔᐃΔ: 1,
      Δⵠᐃᐃⵠ: -1,
      open: false
    };
    this.ᐃⵠΔᐃ = {
      ᐃᐃΔᐃⵠΔΔ: 0,
      ⲆΔᐃⲆᐃᐃΔ: 0,
      type: 0,
      ΔⵠΔΔⲆΔⲆ: 0,
      ᐃΔᐃΔ: 1,
      Δⵠᐃᐃⵠ: -1,
      open: zl
    };
    this.ⲆᐃΔᐃ = {
      ᐃᐃΔᐃⵠΔΔ: 0,
      ΔΔⵠΔⲆⲆⵠ: 0,
      ΔⵠΔᐃΔ: 0,
      ᐃΔᐃΔ: 1,
      Δⵠᐃᐃⵠ: -1,
      open: Hs
    };
    this.sign = {
      Δⵠᐃᐃⵠ: -1,
      open: false
    };
    this.ΔⵠⵠΔⲆ = {
      open: gn,
      Δⵠᐃᐃⵠ: -1,
      ᐃⵠⲆⵠ: 0,
      ᐃΔᐃΔ: 1
    };
    this.ᐃⵠⲆᐃⲆ = {
      enabled: f,
      Ⲇᐃⵠᐃᐃ: -1,
      label: zk,
      now: -1,
      ⲆⵠⵠΔ: sw
    };
    this.ΔⲆΔⵠ = {
      id: -1,
      ᐃⵠⲆⵠ: 0,
      ᐃΔᐃΔ: 1,
      Δⵠᐃᐃⵠ: -1,
      open: false,
      lock: gr,
      locked: Pq,
      ᐃᐃⲆⵠᐃⵠΔ: false,
      ᐃΔⵠΔⲆⲆᐃ: false
    };
    this.ΔⲆⵠⲆΔ = true;
    this.reconnect = {
      enabled: false,
      rotate: 0
    };
    this.key = ⲆⵠΔⵠ.ⵠΔΔⵠⲆⲆΔ("key", oc.location.href);
    var a = ⲆⵠΔⵠ.ⵠΔΔⵠⲆⲆΔ("egg", oc.location.href);
    if (a) {
      Px.ⵠᐃᐃⲆ = parseInt(a);
    }
    this.beta = oc.location.href.indexOf("http://starve.io/beta") === 0 ? 1 : 0;
    if (this.key && this.beta) {
      ΔⵠⵠⲆ.set("starve_beta", this.key);
    } else if (this.beta) {
      this.key = ΔⵠⵠⲆ.get("starve_beta");
    }
    this.ⵠⲆᐃⵠΔ = ΔⵠⵠⲆ.get("starve_token") ? ΔⵠⵠⲆ.get("starve_token") : ⲆⵠΔⵠ.ⵠΔⲆⲆΔΔΔ(14);
    oc.baguette();
    var b = oc.kot2;
    function c() {
      this.seed = 1;
      this.ᐃΔΔⵠᐃᐃᐃ = 2;
      this.ᐃΔⲆΔⲆᐃⵠ = 3;
      this.ⲆⵠᐃΔΔᐃΔⵠᐃ = 1;
      this.ⵠⵠΔⵠΔΔⲆⵠⲆ = 2;
      this.ⲆᐃΔⵠΔᐃᐃᐃⲆ = 3;
      this.ⵠⵠᐃⲆⵠΔⲆ = function (a) {
        this.seed = 2 + Math.floor(Math.random() * 39879);
      };
      this.ᐃᐃⵠᐃⲆⵠᐃ = function (a) {
        this.ᐃΔΔⵠᐃᐃᐃ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ᐃΔⲆⵠⵠᐃⲆ = function (a) {
        this.ᐃΔⲆΔⲆᐃⵠ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⲆΔᐃⲆᐃⲆⵠΔⵠ = function (a) {
        this.ⲆⵠᐃΔΔᐃΔⵠᐃ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⵠⵠⲆⵠΔΔⲆᐃⵠ = function (a) {
        this.ⵠⵠΔⵠΔΔⲆⵠⲆ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⲆΔᐃⲆᐃᐃΔΔᐃ = function (a) {
        this.ⲆᐃΔⵠΔᐃᐃᐃⲆ = 2 + Math.floor(Math.random() * 39879);
      };
      this.ⲆᐃⲆᐃⲆⲆⵠ = function (c, e, f, i, j, k, a) {
        for (var m = 1; a > m;) {
          var n = m * f % ⲆᐃⵠᐃⲆᐃⵠ;
          var o = ΔⲆⲆΔⲆΔⲆ[n];
          if (o < 0.1) {
            p += 50;
            m += 50;
          } else {
            var p = Math.floor(i * o + j);
            if (k < m && a > m) {
              var q = Math.random() > 0.5 ? Yx * -10 : Yx * 10;
              var r = e * p;
              this.ᐃⵠᐃᐃᐃΔΔ[n] = Math.max(-25, Math.min(25, this.ᐃⵠᐃᐃᐃΔΔ[n] + q));
              this.ⲆⲆⵠΔⲆⲆⲆ[n] = Math.max(-8, Math.min(8, this.ⲆⲆⵠΔⲆⲆⲆ[n] + q));
              if (r > 0) {
                zo.beginPath();
                zo.arc(m + Rx.ⵠⵠΔ.x + this.ⲆⲆⵠΔⲆⲆⲆ[n], c + this.ᐃⵠᐃᐃᐃΔΔ[n] - 20, r, 0, Math.PI * 2);
                if (Qx.transition) {
                  var t = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
                  zo.fillStyle = Mw(83, 156, 160, 236, 247, 249, t);
                } else {
                  zo.fillStyle = ns.ⵠⲆⲆΔⲆⵠᐃ[Qx.time];
                }
                zo.fill();
              }
            }
            m += p * 2;
          }
        }
      };
      this.ΔΔⲆⲆΔΔⵠ = function (c, e, f, i, j, k, a) {
        for (var m = 1; m < a;) {
          var n = m * f % ⲆᐃⵠᐃⲆᐃⵠ;
          var o = ΔⲆⲆΔⲆΔⲆ[n];
          if (o < 0.1) {
            p += 50;
            m += 50;
          } else {
            var p = Math.floor(o * i + j);
            if (m > k && m < a) {
              var q = Math.random() > 0.5 ? Yx * -10 : Yx * 10;
              var r = e * p;
              this.ΔⲆΔⵠΔ[n] = Math.max(-25, Math.min(25, this.ΔⲆΔⵠΔ[n] + q));
              this.ᐃᐃⲆⵠᐃ[n] = Math.max(-8, Math.min(8, this.ᐃᐃⲆⵠᐃ[n] + q));
              if (r > 0) {
                zo.beginPath();
                zo.arc(c + this.ΔⲆΔⵠΔ[n] - 20, m + Rx.ⵠⵠΔ.y + this.ᐃᐃⲆⵠᐃ[n], r, 0, Math.PI * 2);
                if (Qx.transition) {
                  var t = Qx.time ? 1 - Qx.ⵠᐃΔᐃ.ᐃⲆΔ : Qx.ⵠᐃΔᐃ.ᐃⲆΔ;
                  zo.fillStyle = Mw(83, 156, 160, 236, 247, 249, t);
                } else {
                  zo.fillStyle = ns.ⵠⲆⲆΔⲆⵠᐃ[Qx.time];
                }
                zo.fill();
              }
            }
            m += p * 2;
          }
        }
      };
      this.ΔⵠΔᐃᐃΔⲆⵠΔ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        if ((h = -(d - 0 - e - 2) / 200) === 0) {
          this.ᐃΔⲆⵠⵠᐃⲆ();
        }
        zo.globalAlpha = ⲆⵠΔⵠ.ⵠᐃᐃⲆⵠ(h);
        this.ⲆᐃⲆᐃⲆⲆⵠ(d, h, this.ᐃΔⲆΔⲆᐃⵠ, 18, 16, f, g);
        zo.globalAlpha = 1;
        var h = -(b - 250 - e + 500) / 150;
        if (h === 0) {
          this.ⵠⵠᐃⲆⵠΔⲆ();
        }
        zo.globalAlpha = ⲆⵠΔⵠ.ⵠᐃᐃⲆⵠ(h);
        this.ⲆᐃⲆᐃⲆⲆⵠ(b, h, this.seed, 12, 10, f, g);
        zo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
            this.ᐃᐃⵠᐃⲆⵠᐃ();
          }
          zo.globalAlpha = ⲆⵠΔⵠ.ⵠᐃᐃⲆⵠ(h);
          this.ⲆᐃⲆᐃⲆⲆⵠ(c, h, this.ᐃΔΔⵠᐃᐃᐃ, 6, 6, f, g);
          zo.globalAlpha = 1;
        }
      };
      this.ᐃⲆⲆⲆⲆⵠΔⲆⲆ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        var h = -(-d + 0 + e + 2) / 200;
        if (h === 0) {
          this.ᐃΔⲆⵠⵠᐃⲆ();
        }
        zo.globalAlpha = ⲆⵠΔⵠ.ⵠᐃᐃⲆⵠ(h);
        this.ⲆᐃⲆᐃⲆⲆⵠ(d, h, this.ᐃΔⲆΔⲆᐃⵠ, 18, 16, f, g);
        zo.globalAlpha = 1;
        if ((h = -(-b + 250 + e) / 150) === 0) {
          this.ⵠⵠᐃⲆⵠΔⲆ();
        }
        zo.globalAlpha = ⲆⵠΔⵠ.ⵠᐃᐃⲆⵠ(h);
        this.ⲆᐃⲆᐃⲆⲆⵠ(b, h, this.seed, 12, 10, f, g);
        zo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + 350 + e) / 100) <= 0.01) {
            this.ᐃᐃⵠᐃⲆⵠᐃ();
          }
          zo.globalAlpha = ⲆⵠΔⵠ.ⵠᐃᐃⲆⵠ(h);
          this.ⲆᐃⲆᐃⲆⲆⵠ(c, h, this.ᐃΔΔⵠᐃᐃᐃ, 6, 6, f, g);
          zo.globalAlpha = 1;
        }
      };
      this.ΔΔᐃᐃᐃᐃⲆⵠΔ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(-d + 0 + e + 2) / 200) === 0) {
          this.ᐃΔⲆⵠⵠᐃⲆ();
        }
        zo.globalAlpha = ⲆⵠΔⵠ.ⵠᐃᐃⲆⵠ(h);
        this.ΔΔⲆⲆΔΔⵠ(d, h, this.ᐃΔⲆΔⲆᐃⵠ, 18, 16, f, g);
        zo.globalAlpha = 1;
        if ((h = -(-b + 250 + e) / 150) === 0) {
          this.ⵠⵠᐃⲆⵠΔⲆ();
        }
        zo.globalAlpha = ⲆⵠΔⵠ.ⵠᐃᐃⲆⵠ(h);
        this.ΔΔⲆⲆΔΔⵠ(b, h, this.seed, 12, 10, f, g);
        zo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + 350 + e) / 100) <= 0.01) {
            this.ᐃᐃⵠᐃⲆⵠᐃ();
          }
          zo.globalAlpha = ⲆⵠΔⵠ.ⵠᐃᐃⲆⵠ(h);
          this.ΔΔⲆⲆΔΔⵠ(c, h, this.ᐃΔΔⵠᐃᐃᐃ, 6, 6, f, g);
          zo.globalAlpha = 1;
        }
      };
      this.ⵠΔΔΔᐃᐃΔⲆⲆ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(d - 0 - e - 2) / 200) === 0) {
          this.ᐃΔⲆⵠⵠᐃⲆ();
        }
        zo.globalAlpha = ⲆⵠΔⵠ.ⵠᐃᐃⲆⵠ(h);
        this.ΔΔⲆⲆΔΔⵠ(d, h, this.ᐃΔⲆΔⲆᐃⵠ, 18, 16, f, g);
        zo.globalAlpha = 1;
        if ((h = -(b - 250 - e + 500) / 150) === 0) {
          this.ⵠⵠᐃⲆⵠΔⲆ();
        }
        zo.globalAlpha = ⲆⵠΔⵠ.ⵠᐃᐃⲆⵠ(h);
        this.ΔΔⲆⲆΔΔⵠ(b, h, this.seed, 12, 10, f, g);
        zo.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
            this.ᐃᐃⵠᐃⲆⵠᐃ();
          }
          zo.globalAlpha = ⲆⵠΔⵠ.ⵠᐃᐃⲆⵠ(h);
          this.ΔΔⲆⲆΔΔⵠ(c, h, this.ᐃΔΔⵠᐃᐃᐃ, 6, 6, f, g);
          zo.globalAlpha = 1;
        }
      };
      this.w1 = {
        r: new ⲆⵠΔⵠ.ΔⵠⲆΔΔ(ⲆⵠΔⵠ.ⲆᐃⲆΔⲆΔⵠ, 0, 10, 0, 0, 200),
        ⲆΔΔᐃ: new ⲆⵠΔⵠ.ΔⵠⲆΔΔ(ⲆⵠΔⵠ.ⵠⵠⵠΔᐃⲆᐃ, 0, 10, 200, 200, 0)
      };
      this.w2 = {
        r: new ⲆⵠΔⵠ.ΔⵠⲆΔΔ(ⲆⵠΔⵠ.ᐃΔΔⵠⵠⵠΔ, 0, 10, 0, 0, 150),
        ⲆΔΔᐃ: new ⲆⵠΔⵠ.ΔⵠⲆΔΔ(ⲆⵠΔⵠ.ⵠᐃᐃⲆⵠ, 0, 10, 150, 150, 0)
      };
      this.w3 = {
        r: new ⲆⵠΔⵠ.ΔⵠⲆΔΔ(ⲆⵠΔⵠ.ΔⲆⲆᐃᐃⵠⲆ, 0, 10, 0, 0, 100),
        ⲆΔΔᐃ: new ⲆⵠΔⵠ.ΔⵠⲆΔΔ(ⲆⵠΔⵠ.ⵠᐃᐃⲆⵠ, 0, 10, 100, 100, 0)
      };
      this.ΔⵠⵠⲆⲆⵠᐃΔᐃ = function (a) {
        if (a.r.x === a.r.ⲆΔⲆⲆᐃ) {
          if (a.ⲆΔΔᐃ.ⲆΔⲆⲆᐃ === a.ⲆΔΔᐃ.x) {
            return a.r;
          } else {
            return a.ⲆΔΔᐃ;
          }
        } else {
          return a.r;
        }
      };
      this.ᐃᐃⲆ = function (a) {
        var b;
        if (a.r.ⲆΔⲆⲆᐃ === a.r.x) {
          if (a.ⲆΔΔᐃ.ⲆΔⲆⲆᐃ === a.ⲆΔΔᐃ.x) {
            a.r.ⲆΔⲆⲆⵠⵠⵠ();
            a.ⲆΔΔᐃ.ⲆΔⲆⲆⵠⵠⵠ();
            b = a.r;
          } else {
            b = a.ⲆΔΔᐃ;
          }
        } else {
          b = a.r;
        }
        b.ΔΔⲆᐃⵠ(b.ⲆΔⲆⲆᐃ);
        return b;
      };
      this.ΔⲆΔⵠΔ = [];
      this.ᐃᐃⲆⵠᐃ = [];
      this.ᐃⵠᐃᐃᐃΔΔ = [];
      this.ⲆⲆⵠΔⲆⲆⲆ = [];
      this.ⵠᐃᐃⲆᐃ = function () {
        for (var a = 0; a < ⲆᐃⵠᐃⲆᐃⵠ; a++) {
          this.ΔⲆΔⵠΔ[a] = Math.floor(ΔⲆⲆΔⲆΔⲆ[a] * 25);
          this.ᐃᐃⲆⵠᐃ[a] = Math.floor(ΔⲆⲆΔⲆΔⲆ[a] * 8);
          this.ᐃⵠᐃᐃᐃΔΔ[a] = Math.floor(ΔⲆⲆΔⲆΔⲆ[a] * 25);
          this.ⲆⲆⵠΔⲆⲆⲆ[a] = Math.floor(ΔⲆⲆΔⲆΔⲆ[a] * 8);
        }
        this.w1.r.x = this.w1.r.ⲆΔⲆⲆᐃ;
        this.w2.r.ⲆⵠⲆΔⲆ = 3.5;
        this.w3.r.ⲆⵠⲆΔⲆ = 2;
      };
      this.ⵠᐃᐃⲆᐃ();
    }
    this.ⵠⲆᐃⵠΔ = b.substring(0, 6) + this.ⵠⲆᐃⵠΔ.substring(6);
    this.ⵠΔᐃΔΔⲆΔ = ΔⵠⵠⲆ.get("starve_token_id") ? ΔⵠⵠⲆ.get("starve_token_id") : "";
    this.id = 0;
    this.ΔΔΔΔ = 0;
    this.ⵠΔΔ = 0;
    this.ᐃⵠᐃⲆᐃΔⲆ = {
      ⵠⵠⵠⲆⵠ: 0,
      ⵠᐃᐃⲆⵠᐃΔ: 0,
      ΔⵠⲆⲆΔⲆⲆ: "",
      ᐃᐃΔᐃⵠ: 0
    };
    this.ᐃΔⲆᐃⵠᐃᐃⵠΔ = {
      connected: 0,
      ⵠᐃΔⲆᐃ: new Date().getTime()
    };
    this.ⵠᐃⵠⵠᐃ = [];
    this.ⵠⲆΔᐃⲆⵠᐃ = function (a) {
      for (var b = 0; this.ⵠᐃⵠⵠᐃ.length > b; b++) {
        if (this.ⵠᐃⵠⵠᐃ[b] == a) {
          return ls;
        }
      }
      return false;
    };
    this.ⵠΔⵠΔⵠ = {
      Ⲇᐃⵠᐃᐃ: 0,
      time: 0,
      value: 0,
      open: false,
      ⲆⵠⵠΔ: function () {
        if (this.open) {
          var a = new Date().getTime();
          this.time = Math.floor((a - this.Ⲇᐃⵠᐃᐃ) / 1000);
          if (this.time < 60) {
            Tx.ⵠΔⵠΔⵠ.button.ⲆⵠⵠΔ(zo);
          } else {
            document.getElementById("shop_starterkit").style.display = "none";
            this.open = false;
          }
        }
      }
    };
    this.ΔⲆⵠⵠⵠ = {
      id: -1,
      ᐃΔᐃΔ: -1,
      lock: 0,
      timeout: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Vg, 0, 1, 0, 1 / 30, 1),
      wait: co
    };
    this.ᐃⲆΔⲆᐃ = {
      timeout: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(fr, 0, 1, 0, 1 / 5, 1),
      wait: false
    };
    this.ΔΔⵠᐃⲆ = {
      timeout: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0, 1, 0, 1, 1),
      wait: false
    };
    this.ᐃΔⲆΔᐃ = {
      timeout: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0, 1, 0, 1 / 10, 1),
      wait: false
    };
    this.ⵠⵠΔ = new ⲆⵠΔⵠ.ⵠΔⲆⵠⲆⵠᐃ(ⲆⵠΔⵠ.ⲆᐃΔᐃΔⲆᐃ, 0, 0.4, 0, 0, iq, jq, iq, jq);
    this.ⵠⵠΔ.Ⲇᐃⵠᐃᐃ = 0;
    this.ⵠⵠΔ.ⲆᐃⵠᐃⲆⲆⵠ = 0;
    this.ⵠⵠΔ.ⵠⵠᐃ = function () {
      if (this.ⲆᐃⵠᐃⲆⲆⵠ > 0) {
        this.ⲆᐃⵠᐃⲆⲆⵠ -= Yx;
      } else {
        var a = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ];
        if (a) {
          this.Ⲇᐃⵠᐃᐃ = 0;
          var b = Math.max(Math.min(iq - a.x, -2), 2 - Qx.w + yo);
          var c = Math.max(Math.min(jq - a.y, -2), 2 - Qx.ᐃᐃᐃ + hq);
          this.ΔΔⲆᐃⵠ({
            x: b,
            y: c
          });
        } else {
          this.Ⲇᐃⵠᐃᐃ += Yx;
          if (this.Ⲇᐃⵠᐃᐃ > 3) {
            this.Ⲇᐃⵠᐃᐃ = 0;
            if (!Rx.reconnect.enabled) {
              Mx.ᐃⵠᐃᐃᐃᐃⵠⲆⲆ();
            }
          }
        }
      }
    };
    this.ⵠⵠΔ.w = screen.width;
    this.ⵠⵠΔ.ᐃᐃᐃ = screen.height;
    this.ⵠⵠΔ.ΔᐃΔⲆⵠⲆⵠ = this.ⵠⵠΔ.w;
    this.ⵠⵠΔ.ⲆⵠΔⲆⵠⵠⲆ = this.ⵠⵠΔ.ᐃᐃᐃ;
    this.ⵠⵠΔ.rx = 0;
    this.ⵠⵠΔ.ry = 0;
    this.ⵠⵠΔ.ⵠΔⲆΔⵠⵠΔⲆΔ = 0;
    this.ⵠⵠΔ.ᐃΔΔᐃΔⲆⵠⲆᐃ = 0;
    this.ⵠⵠΔ.ᐃΔΔΔᐃ = function (a, b) {
      this.x = -Math.min(Math.max(-Qx.ⲆⲆᐃⵠⵠᐃⵠ * 2, a - Qx.ⲆⲆᐃⵠⵠᐃⵠ - this.ΔᐃΔⲆⵠⲆⵠ / 2), Qx.w - this.ΔᐃΔⲆⵠⲆⵠ);
      this.y = -Math.min(Math.max(-Qx.ⵠⵠⵠⲆΔᐃⲆ * 2, b - (Qx.ⵠⵠⵠⲆΔᐃⲆ + this.ⲆⵠΔⲆⵠⵠⲆ) / 2), Qx.ᐃᐃᐃ - this.ⲆⵠΔⲆⵠⵠⲆ + Qx.ⵠⵠⵠⲆΔᐃⲆ);
      this.ⲆΔⲆⲆᐃ = this.x;
      this.ⲆᐃⵠⲆⲆΔΔ = this.y;
    };
    this.control = {
      angle: 0,
      timeout: 0,
      ᐃⵠΔⵠᐃᐃⵠ: 0,
      Ⲇⵠᐃᐃ: 0,
      attack: 0,
      ⵠⵠᐃ: function () {
        var a = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ];
        if (a) {
          var b = {
            x: Rx.ⵠⵠΔ.x + a.x,
            y: Rx.ⵠⵠΔ.y + a.y
          };
        } else {
          b = Jo;
        }
        var c = ⲆⵠΔⵠ.ΔⵠΔᐃⵠⲆⲆ(Wx.ΔⵠⲆⲆ, b);
        var d = false;
        this.Ⲇⵠᐃᐃ += Yx;
        if (!Wx.state) {
          if (a && !(a.action & 16) && this.Ⲇⵠᐃᐃ > 0.2) {
            this.attack = 1;
            d = ie;
            this.Ⲇⵠᐃᐃ = 0;
            Mx.ᐃⵠᐃⲆⵠⵠᐃᐃⲆ(c);
          }
        }
        if (a) {
          a.angle = c;
          a.ᐃΔᐃⵠᐃᐃⵠ = c;
        }
        if (!d) {
          this.timeout += Yx;
          if (this.timeout > 0.2) {
            this.timeout = 0;
            if (Math.abs(this.angle - c) > 0.005) {
              Mx.ⲆᐃΔᐃⵠⲆⵠᐃΔ(c);
              this.angle = c;
            }
          }
        }
        if (!Rx.ΔⲆⵠⲆⵠ.open && !Rx.ⲆⵠⲆΔⵠ.open) {
          var e = 0;
          if (Vx.ᐃᐃᐃᐃⵠᐃᐃ()) {
            e |= 1;
          }
          if (Vx.ᐃΔⵠᐃΔᐃΔ()) {
            e |= 2;
          }
          if (Vx.ⵠΔΔⲆΔᐃⵠ()) {
            e |= 4;
          }
          if (Vx.ΔᐃᐃᐃⵠᐃⲆ()) {
            e |= 8;
          }
          if (this.ᐃⵠΔⵠᐃᐃⵠ != e) {
            Mx.ᐃΔᐃᐃⵠⵠⵠᐃⲆ(e);
          }
          this.ᐃⵠΔⵠᐃᐃⵠ = e;
        }
      }
    };
    this.ᐃᐃΔᐃ = {
      c: 1,
      ⲆΔΔᐃ: 1,
      ᐃᐃᐃ: 1,
      ᐃᐃⲆ: 1,
      ⵠⲆⲆ: 1,
      ᐃΔᐃᐃⲆΔⲆ: 1,
      ΔⲆᐃΔᐃⵠⲆ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(rq, 0, 1, 0, 3, 3),
      ⵠᐃⲆΔⲆⲆⲆ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(go, 0, 1, 0, 2, 2),
      ᐃᐃⵠΔⵠᐃᐃ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(wi, 0, 1, 0, 3, 3),
      ΔᐃᐃⲆᐃᐃΔ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(true, 0, 1, 0, 3, 3),
      ΔⵠⵠⵠΔⲆⵠ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(Xr, 0, 1, 0, 3, 3),
      ᐃⵠΔᐃΔⲆᐃ: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(true, 0, 1, 0, 3, 3),
      ⵠᐃᐃᐃⲆ: new ⲆⵠΔⵠ.ΔⵠⲆΔΔ(ⲆⵠΔⵠ.ⲆᐃΔᐃΔⲆᐃ, 0, 1, 0, 0, 1),
      Ⲇᐃᐃᐃⵠ: new ⲆⵠΔⵠ.ΔⵠⲆΔΔ(ⲆⵠΔⵠ.ⲆᐃΔᐃΔⲆᐃ, 0, 1, 0, 0, 1),
      ᐃⲆᐃΔⵠⲆⲆ: new ⲆⵠΔⵠ.ΔⵠⲆΔΔ(ⲆⵠΔⵠ.ⲆᐃΔᐃΔⲆᐃ, 0, 1, 0, 0, 1),
      ᐃΔΔⵠⵠⵠᐃ: new ⲆⵠΔⵠ.ΔⵠⲆΔΔ(ⲆⵠΔⵠ.ⲆᐃΔᐃΔⲆᐃ, 0, 1, 0, 0, 1),
      ΔⵠⲆⵠΔⵠᐃ: new ⲆⵠΔⵠ.ΔⵠⲆΔΔ(ⲆⵠΔⵠ.ⲆᐃΔᐃΔⲆᐃ, 0, 1, 0, 0, 1),
      ⲆᐃᐃⲆΔ: new ⲆⵠΔⵠ.ΔⵠⲆΔΔ(ⲆⵠΔⵠ.ⲆᐃΔᐃΔⲆᐃ, 0, 1, 0, 0, 1),
      ⵠⵠᐃ: function () {
        this.ΔⲆᐃΔᐃⵠⲆ.ⵠⵠᐃ();
        this.ⵠᐃⲆΔⲆⲆⲆ.ⵠⵠᐃ();
        this.ᐃᐃⵠΔⵠᐃᐃ.ⵠⵠᐃ();
        this.ΔᐃᐃⲆᐃᐃΔ.ⵠⵠᐃ();
        this.ΔⵠⵠⵠΔⲆⵠ.ⵠⵠᐃ();
        this.ᐃⵠΔᐃΔⲆᐃ.ⵠⵠᐃ();
        this.ⵠᐃᐃᐃⲆ.ΔΔⲆᐃⵠ(this.c);
        this.Ⲇᐃᐃᐃⵠ.ΔΔⲆᐃⵠ(this.ⲆΔΔᐃ);
        this.ᐃⲆᐃΔⵠⲆⲆ.ΔΔⲆᐃⵠ(this.ᐃᐃᐃ);
        this.ᐃΔΔⵠⵠⵠᐃ.ΔΔⲆᐃⵠ(this.ᐃᐃⲆ);
        this.ΔⵠⲆⵠΔⵠᐃ.ΔΔⲆᐃⵠ(this.ⵠⲆⲆ);
        this.ⲆᐃᐃⲆΔ.ΔΔⲆᐃⵠ(this.ᐃΔᐃᐃⲆΔⲆ);
      }
    };
    this.ⲆᐃⵠΔⲆΔⲆ = co;
    this.ᐃⲆⵠΔΔΔΔ = gr;
    this.ᐃΔⵠᐃⵠ = f;
    this.ⵠⲆᐃᐃⵠΔⲆ = co;
    this.ⵠⵠⲆᐃ = {
      max: 10,
      ᐃᐃⵠΔⵠᐃⲆ: 0,
      ⵠΔᐃΔᐃ: 0,
      ⵠΔⵠᐃ: [],
      ⵠΔⲆᐃⲆ: [],
      ⲆΔⵠⲆⲆΔᐃ: function (a, b) {
        if (a === 1) {
          this.ⵠΔᐃΔᐃ = Ff.ΔᐃⵠⵠⲆᐃⲆΔΔ;
        }
        this.ᐃᐃⵠΔⵠᐃⲆ += b;
        this.max = 10 + this.ᐃᐃⵠΔⵠᐃⲆ + this.ⵠΔᐃΔᐃ;
      },
      ᐃⲆⲆΔᐃⲆᐃ: {
        item: -1,
        ⵠⵠ: null,
        ⲆⲆΔⵠⵠⵠⲆ: 0,
        ᐃΔᐃΔΔᐃⲆ: 0,
        ⵠⲆⲆΔᐃ: -1,
        ᐃⲆΔⲆⵠ: -1,
        ΔⵠΔⵠⵠ: function (a) {
          if (!!this.ⲆⲆΔⵠⵠⵠⲆ && (a.x !== this.ⵠⲆⲆΔᐃ || a.y !== this.ᐃⲆΔⲆⵠ)) {
            this.ᐃΔᐃΔΔᐃⲆ = 1;
          }
        },
        start: function (a, b) {
          this.ⵠⲆⲆΔᐃ = b.x;
          this.ᐃⲆΔⲆⵠ = b.y;
          this.item = a;
          this.ⵠⵠ = Rx.ⵠⵠⲆᐃ.ⵠΔⲆᐃⲆ[a].info.ⵠⵠ[2];
          this.ⲆⲆΔⵠⵠⵠⲆ = 1;
        },
        stop: function () {
          this.ⲆⲆΔⵠⵠⵠⲆ = 0;
          this.ᐃΔᐃΔΔᐃⲆ = 0;
          this.ⵠⲆⲆΔᐃ = -1;
          this.ᐃⲆΔⲆⵠ = -1;
        },
        release: function () {
          var a = -1;
          var b = Rx.ⵠⵠⲆᐃ.ⵠΔⲆᐃⲆ;
          var c = 0;
          if (this.ⲆⲆΔⵠⵠⵠⲆ && this.ᐃΔᐃΔΔᐃⲆ) {
            for (var d = 0; d < b.length; d++) {
              if (b[d].info.state === vf) {
                a = d;
                break;
              }
            }
            if (a !== -1 && a !== this.item && b[this.item]) {
              c = 1;
              var f = b[a];
              b[a] = b[this.item];
              b[this.item] = f;
              Tx.ᐃΔΔᐃΔΔⲆ();
            }
          }
          this.stop();
          return c;
        },
        ⲆⵠⵠΔ: function (a, b) {
          if (this.ⲆⲆΔⵠⵠⵠⲆ && this.ᐃΔᐃΔΔᐃⲆ) {
            Np(zo, this.ⵠⵠ, Math.floor(a - this.ⵠⵠ.width / 2), Math.floor(b - this.ⵠⵠ.height / 2));
          }
        }
      },
      ⲆⲆᐃᐃΔⲆᐃΔⵠ: function (a) {
        for (d = 0; d < a.length; d++) {
          if (this.ⵠΔⵠᐃ[a[d][0]] == a[d][1]) {
            return true;
          }
        }
        return false;
      },
      ⵠⵠⲆΔΔ: function (a) {
        for (var b = 0; b < this.ⵠΔⲆᐃⲆ.length; b++) {
          if (this.ⵠΔⲆᐃⲆ[b].id == a) {
            return b;
          }
        }
        return -1;
      },
      ΔⵠᐃᐃΔᐃΔ: function (a, b) {
        this.ⵠΔⵠᐃ[a] = 0;
        this.ⵠΔⲆᐃⲆ.splice(b, 1);
        Tx.ᐃΔΔᐃΔΔⲆ();
      },
      ⵠⵠⲆᐃⲆⲆᐃ: function (a, b, c) {
        ⵠⵠᐃ = true;
        this.ⵠΔⵠᐃ[a] = Math.max(0, this.ⵠΔⵠᐃ[a] - b);
        if (!this.ⵠΔⵠᐃ[a] && c >= 0) {
          this.ΔⵠᐃᐃΔᐃΔ(a, c);
        }
      }
    };
    this.ᐃΔⲆⲆⵠ = {
      enabled: false,
      translate: {
        x: 0,
        y: 0
      },
      ᐃⵠᐃⲆᐃⵠⵠ: function () {
        if (Qx.mode == 1 && !Rx.ᐃⲆⵠΔΔΔΔ) {
          Rx.ᐃΔⲆⲆⵠ.enabled = !Rx.ᐃΔⲆⲆⵠ.enabled;
          if (Rx.ᐃΔⲆⲆⵠ.enabled) {
            Tx.options.ΔΔΔΔⵠΔΔ.display = "inline-block";
          } else {
            Tx.options.ΔΔΔΔⵠΔΔ.display = "none";
          }
        }
      }
    };
    Tx.options.ΔΔΔΔⵠΔΔ.display = "none";
    this.ⵠⵠⲆⵠΔ = {
      enabled: zk,
      translate: {
        x: 0,
        y: 0
      },
      Ⲇᐃⵠᐃᐃ: 0,
      ᐃⵠᐃⲆᐃⵠⵠ: function () {
        Rx.ⵠⵠⲆⵠΔ.enabled = !Rx.ⵠⵠⲆⵠΔ.enabled;
        if (Rx.ⵠⵠⲆⵠΔ.enabled) {
          Tx.options.ᐃᐃΔᐃᐃⲆⲆ.display = "inline-block";
        } else {
          Tx.options.ᐃᐃΔᐃᐃⲆⲆ.display = "none";
        }
      },
      ⵠⵠᐃ: function () {
        if (!!this.enabled && Rx.ⲆΔⲆΔ.id < 0 && !Tx.ᐃⲆΔᐃ.open) {
          this.Ⲇᐃⵠᐃᐃ += Yx;
          if (this.Ⲇᐃⵠᐃᐃ > 2) {
            this.Ⲇᐃⵠᐃᐃ = 0;
            if (Rx.ᐃᐃΔᐃ.ᐃᐃᐃ < 0.35) {
              if (Rx.ⵠⵠⲆᐃ.ⵠΔⵠᐃ[110]) {
                Mx.ᐃΔᐃᐃΔ(110, Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(110));
              } else if (Rx.ⵠⵠⲆᐃ.ⵠΔⵠᐃ[192]) {
                Mx.ᐃΔᐃᐃΔ(192, Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(192));
              } else if (Rx.ⵠⵠⲆᐃ.ⵠΔⵠᐃ[196]) {
                Mx.ᐃΔᐃᐃΔ(196, Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(196));
              } else if (Rx.ⵠⵠⲆᐃ.ⵠΔⵠᐃ[189]) {
                Mx.ᐃΔᐃᐃΔ(189, Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(189));
              } else if (Rx.ⵠⵠⲆᐃ.ⵠΔⵠᐃ[207]) {
                Mx.ᐃΔᐃᐃΔ(207, Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(207));
              } else if (Rx.ⵠⵠⲆᐃ.ⵠΔⵠᐃ[205]) {
                Mx.ᐃΔᐃᐃΔ(205, Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(205));
              } else if (Rx.ⵠⵠⲆᐃ.ⵠΔⵠᐃ[209]) {
                Mx.ᐃΔᐃᐃΔ(209, Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(209));
              } else if (Rx.ⵠⵠⲆᐃ.ⵠΔⵠᐃ[143]) {
                Mx.ᐃΔᐃᐃΔ(143, Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(143));
              } else if (Rx.ⵠⵠⲆᐃ.ⵠΔⵠᐃ[117]) {
                Mx.ᐃΔᐃᐃΔ(117, Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(117));
              } else if (Rx.ⵠⵠⲆᐃ.ⵠΔⵠᐃ[138]) {
                Mx.ᐃΔᐃᐃΔ(138, Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(138));
              } else if (Rx.ⵠⵠⲆᐃ.ⵠΔⵠᐃ[133]) {
                Mx.ᐃΔᐃᐃΔ(133, Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(133));
              } else if (Rx.ⵠⵠⲆᐃ.ⵠΔⵠᐃ[145]) {
                Mx.ᐃΔᐃᐃΔ(145, Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(145));
              } else if (Rx.ⵠⵠⲆᐃ.ⵠΔⵠᐃ[136]) {
                Mx.ᐃΔᐃᐃΔ(136, Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(136));
              } else if (Rx.ⵠⵠⲆᐃ.ⵠΔⵠᐃ[197]) {
                Mx.ᐃΔᐃᐃΔ(197, Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(197));
              }
            } else if (Rx.ᐃᐃΔᐃ.ᐃᐃⲆ < 0.35 && Rx.ⵠⵠⲆᐃ.ⵠΔⵠᐃ[127]) {
              Mx.ᐃΔᐃᐃΔ(127, Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(127));
            }
          }
        }
      }
    };
    Tx.options.ᐃᐃΔᐃᐃⲆⲆ.display = "none";
    this.ⲆΔⲆΔ = {
      id: -1,
      ⲆⲆᐃᐃ: -1,
      timeout: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0, 1, 0, 1, 1),
      ΔΔⵠⲆΔ: fr,
      ⲆⲆⲆⵠ: -1,
      mode: 0,
      label: [],
      ⵠⵠⲆⵠᐃ: [],
      ⵠⲆΔⵠⲆ: false,
      ⲆΔⲆⵠᐃ: false,
      ⵠΔᐃΔⲆΔⵠ: false,
      ⵠⵠⵠⵠᐃ: Gl,
      ⵠⵠⲆᐃᐃⲆΔⵠⵠ: function () {
        this.mode = this.mode === 0 ? 1 : 0;
      },
      ⵠⵠᐃΔⵠᐃΔΔᐃ: function (a) {
        this.ⵠⲆΔⵠⲆ = a;
        var b = Tx.ᐃⲆΔᐃ;
        if (b.open) {
          b.ΔΔⲆⲆⲆⵠΔ(b.button);
        }
        this.ⵠⵠᐃ();
      },
      ᐃⲆⵠⵠⲆⵠⵠⲆᐃ: function (a) {
        var b = Ct[a];
        this.id = a;
        this.ΔΔⵠⲆΔ = true;
        Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ];
        this.timeout.ΔᐃΔⲆᐃⵠᐃ = b.time * 8;
        this.ⲆⲆᐃᐃ = b.ⲆⲆᐃᐃ;
      },
      ᐃⵠⲆΔⲆⲆᐃⲆⲆ: function (a) {
        var b = Ct[a];
        this.id = a;
        this.ΔΔⵠⲆΔ = Xk;
        var c = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ];
        if (c && c.right == 28) {
          this.timeout.ΔᐃΔⲆᐃⵠᐃ = b.time * 3;
        } else {
          this.timeout.ΔᐃΔⲆᐃⵠᐃ = b.time;
        }
        this.ⲆⲆᐃᐃ = b.ⲆⲆᐃᐃ;
        for (var d = 0; d < b.r.length; d++) {
          var e = b.r[d];
          Rx.ⵠⵠⲆᐃ.ⵠⵠⲆᐃⲆⲆᐃ(e[0], e[1], Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(e[0]));
        }
        Tx.ᐃΔΔᐃΔΔⲆ();
      },
      ⵠⵠᐃ: function () {
        this.ⵠⵠⲆⵠᐃ = [];
        if (Tx.ⵠᐃⵠⲆⵠ.ⲆΔⲆΔ === 1) {
          Tx.ⵠᐃⵠⲆⵠ.display = 0;
        }
        for (var a in Ct) {
          var b = Ct[a];
          var c = true;
          if (b.r) {
            for (var d = 0; d < b.r.length; d++) {
              if (Rx.ⵠⵠⲆᐃ.max >= 16 && b.id === 100) {
                c = false;
                break;
              }
              if (b.w > this.ⵠⲆΔⵠⲆ || b.f > this.ⲆΔⲆⵠᐃ || b.ⵠⲆⲆ > this.ⵠΔᐃΔⲆΔⵠ || b.e > this.ⵠⵠⵠⵠᐃ) {
                c = false;
                break;
              }
              var f = b.r[d];
              if (!Rx.ⵠⵠⲆᐃ.ⵠΔⵠᐃ[f[0]] || Rx.ⵠⵠⲆᐃ.ⵠΔⵠᐃ[f[0]] < f[1]) {
                c = false;
                break;
              }
            }
            if (c) {
              this.ⵠⵠⲆⵠᐃ.push(Tx.ⲆᐃΔ[b.id]);
            }
          }
        }
        Tx.ⲆΔⵠΔⲆⲆⵠ();
        Tx.ⵠΔⲆᐃⲆΔΔ();
        Tx.ⵠⵠⲆⵠΔⵠⲆ();
        Tx.ᐃᐃᐃⵠᐃⲆΔ();
        Tx.ᐃⲆⲆⵠΔᐃⵠ();
        Tx.ΔⲆΔᐃΔᐃᐃ();
        Tx.sign.ⵠⵠᐃⵠⲆⲆⲆ();
      },
      ⲆΔⲆⲆⵠⵠⵠ: function () {
        this.id = -1;
        this.ΔΔⵠⲆΔ = false;
        this.timeout.ᐃⲆΔ = 0;
        this.timeout.ⵠⲆⲆ = Vg;
        this.ⵠⵠᐃ();
      }
    };
    this.ⲆᐃΔᐃⲆᐃⲆ = {
      message: os,
      ⲆⵠⵠΔ: uw
    };
    this.alert = {
      timeout: new ⲆⵠΔⵠ.ᐃΔᐃⲆ(zl, 1, 1, 0, 4, 0.3),
      text: "",
      label: null,
      ⲆⵠⵠΔ: qw,
      list: []
    };
    this.ⵠᐃⵠΔᐃ = {
      Δᐃ: document.createElement("canvas"),
      ΔⲆᐃⵠⵠ: [],
      ⵠⵠᐃ: nh,
      translate: {
        y: 0,
        x: 0
      },
      sort: function () {
        var a = [];
        for (var b = Qx.ΔΔⵠⲆ, c = 0; c < b.length; c++) {
          if (b[c].ΔⲆⵠⲆΔ) {
            a.push({
              id: c,
              ⲆΔᐃⲆ: b[c].ⵠⵠⵠⲆⵠ
            });
          }
        }
        a.sort(function (a, b) {
          return b.ⲆΔᐃⲆ - a.ⲆΔᐃⲆ;
        });
        this.ΔⲆᐃⵠⵠ = [];
        for (c = 0; c < a.length && c < 10; c++) {
          this.ΔⲆᐃⵠⵠ.push(a[c].id);
        }
        this.ⵠⵠᐃ = true;
      },
      ⵠᐃᐃⲆᐃ: function (a) {
        for (var b = Qx.ΔΔⵠⲆ, c = 0; c < b.length; c++) {
          b[c].ⵠⵠⵠⲆⵠ = 0;
        }
        b[Rx.id].ⵠⵠⵠⲆⵠ = ⲆⵠΔⵠ.ⲆⲆⲆΔⲆⵠᐃ(a[1]);
        this.ΔⲆᐃⵠⵠ = [];
        for (c = 2; c < a.length; c += 2) {
          this.ΔⲆᐃⵠⵠ.push(a[c]);
          b[a[c]].ⵠⵠⵠⲆⵠ = ⲆⵠΔⵠ.ⲆⲆⲆΔⲆⵠᐃ(a[c + 1]);
        }
        this.ⵠⵠᐃ = true;
      }
    };
    this.ⵠᐃⵠΔᐃ.Δᐃ.width = So * 180;
    this.ⵠᐃⵠΔᐃ.Δᐃ.height = So * 300;
    this.ⵠᐃⵠΔᐃ.Δ = this.ⵠᐃⵠΔᐃ.Δᐃ.getContext("2d");
    this.ⲆⵠⲆΔⵠ = {
      open: false,
      input: document.getElementById("commandInput"),
      ΔⵠⵠΔΔΔᐃ: document.getElementById("commandsBox"),
      style: document.getElementById("commandMainBox").style,
      ᐃᐃⵠⲆΔΔᐃⲆΔ: function (a) {
        this.ΔⵠⵠΔΔΔᐃ.innerHTML += a;
      },
      ⵠⵠᐃ: function () {
        this.style.left = Math.floor(yo / 2 - 300) + "px";
        this.style.top = Math.floor(hq / 2 - 250) + "px";
      },
      ⵠⵠⵠⲆⵠΔᐃⲆᐃ: function () {
        this.ΔⵠⵠΔΔΔᐃ.innerHTML = "";
      },
      ⵠⵠΔⲆᐃ: function () {
        this.open = false;
        this.style.display = "none";
      },
      ᐃⵠⵠⲆᐃ: function (a) {
        var b = "<table class=\"tableList\">";
        for (var c = 0; c < a.length; c++) {
          if (c % 3 === 0) {
            b += "<tr>";
          }
          b += "<td class=\"tableList\">" + a[c] + "</td>";
          if ((c + 1) % 3 === 0 || c + 1 === a.length) {
            b += "</tr>";
          }
        }
        return b += "</table>";
      },
      ⲆⲆΔΔⲆ: function (a, b, c, d) {
        d = d || "";
        var f = "<div class=commandWritten>" + (a = a || "");
        f += (b = b || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
        f += (c = c || "") + "</div>" + d + "</div>";
        this.ᐃᐃⵠⲆΔΔᐃⲆΔ(f);
        this.ⲆⲆΔᐃⲆⵠΔᐃⲆ();
      },
      ⲆⲆΔᐃⲆⵠΔᐃⲆ: function () {
        this.ΔⵠⵠΔΔΔᐃ.scrollTop = this.ΔⵠⵠΔΔΔᐃ.scrollHeight;
      },
      ⲆⵠᐃⲆΔⵠⲆ: function (b) {
        switch (b) {
          case "clean":
            this.ⵠⵠⵠⲆⵠΔᐃⲆᐃ();
            return true;
          case "list":
            var c = "";
            const a = oc.document.createElement("div");
            for (var d = Qx.ΔΔⵠⲆ, e = 0; e < d.length; e++) {
              var f = d[e];
              if (f.ΔⲆⵠⲆΔ) {
                a.innerText = f.ᐃΔΔΔΔ;
                c += a.innerHTML + " <span style=\"color:green\">#" + e + "</span><br />";
              }
            }
            this.ⲆⲆΔΔⲆ("list", 1, "List all connected players", c);
            return A;
          case "weapon-list":
            this.ⲆⲆΔΔⲆ("Weapons", 1, "List all weapons in the game", this.ᐃⵠⵠⲆᐃ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow", "wood_axe", "stone_axe", "gold_axe", "diamond_axe", "amethyst_axe", "reidite_axe"]));
            return Qh;
          case "tool-list":
            this.ⲆⲆΔΔⲆ("Tools", 1, "List all tools in the game", this.ᐃⵠⵠⲆᐃ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
            return true;
          case "survival-list":
            this.ⲆⲆΔΔⲆ("Survival Items", 1, "List all survival items in the game", this.ᐃⵠⵠⲆᐃ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
            return true;
          case "resource-list":
            this.ⲆⲆΔΔⲆ("Resources", 1, "List all resources in the game", this.ᐃⵠⵠⲆᐃ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
            return Xr;
          case "food-list":
            this.ⲆⲆΔΔⲆ("Food", 1, "List all food in the game", this.ᐃⵠⵠⲆᐃ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
            return Xs;
          case "hat-list":
            this.ⲆⲆΔΔⲆ("Hats", 1, "List all hats in the game", this.ᐃⵠⵠⲆᐃ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
            return Xs;
          case "building-list":
            this.ⲆⲆΔΔⲆ("Buildings", 1, "List all buildings in the game", this.ᐃⵠⵠⲆᐃ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
            return true;
          case "biome-list":
            this.ⲆⲆΔΔⲆ("Biomes list", 1, "List all available biomes in the game", this.ᐃⵠⵠⲆᐃ(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
            return true;
          case "help-config":
            this.ⲆⲆΔΔⲆ("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
            return Xr;
          case "pos":
            d = Qx.Δⵠⵠ[0];
            e = 0;
            for (; e < d.length; e++) {
              var g = d[e];
              if (g.ᐃΔᐃΔ === Rx.id) {
                this.ⲆⲆΔΔⲆ("pos", 1, "Your position is " + Math.floor(g.x / 100) + ":" + Math.floor(g.y / 100));
                return true;
              }
            }
            break;
          case "help-admin":
            this.ⲆⲆΔΔⲆ("help-admin", 1, "List all available commands for admin only", this.ᐃⵠⵠⲆᐃ(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
            return ls;
          case "help":
            this.ⲆⲆΔΔⲆ("help", 1, "List all available commands", this.ᐃⵠⵠⲆᐃ(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
            return A;
        }
        return false;
      },
      ⲆⵠⵠΔΔⵠⲆⲆⲆ: function () {
        if (!this.open) {
          this.open = Rg;
          this.style.display = "inline-block";
          this.input.focus();
        }
      },
      ⵠⲆⲆⵠⲆΔⵠ: function () {
        var a = this.input.value;
        if (a && a.length > 0) {
          if (!this.ⲆⵠᐃⲆΔⵠⲆ(a)) {
            Mx.ΔⵠⲆᐃⲆⲆᐃⵠⲆ(this.input.value);
          }
          this.input.value = "";
        }
      }
    };
    this.ΔⲆⵠⲆⵠ = {
      open: Zq,
      input: document.getElementById("chat_input"),
      style: document.getElementById("chat_block").style,
      ⵠⵠᐃ: function () {
        this.style.left = Math.floor(yo / 2 - 150) + "px";
        this.style.top = Math.floor(hq / 2 + 80) + "px";
      },
      ⵠⵠΔⲆᐃ: function () {
        this.open = gr;
        this.style.display = "none";
        this.input.value = "";
      },
      prefix: "!",
      cmd: {
        hud: function (a) {
          if (a === "off") {
            var b = "Enter \"!hud\" without the quotes to restore the HUD";
            if (Rx.alert.text) {
              Rx.alert.list.push(b);
            } else {
              Rx.alert.text = b;
            }
            Tx.ᐃᐃⲆᐃᐃΔⲆ = 0;
          } else {
            Tx.ᐃᐃⲆᐃᐃΔⲆ = 1;
          }
        }
      },
      ⲆⵠᐃⲆΔⵠⲆ: function (a) {
        if (a.charAt(0) == this.prefix) {
          var b = "";
          var c = "";
          for (var d = 1; d < a.length && a.charAt(d) != " "; d++) {
            b += a.charAt(d);
          }
          for (d++; d < a.length; d++) {
            c += a.charAt(d);
          }
          var e = this.cmd[b];
          if (e) {
            e(c);
          }
          return oo;
        }
        return at;
      },
      ⵠⵠΔⵠⵠ: function () {
        if (this.open) {
          this.open = false;
          this.style.display = "none";
          var a = this.input.value;
          if (a) {
            if (!this.ⲆⵠᐃⲆΔⵠⲆ(a)) {
              Mx.ᐃⲆᐃᐃΔⵠΔⵠΔ(this.input.value);
            }
            this.input.value = "";
          }
        } else {
          this.open = go;
          this.style.display = "inline-block";
          this.input.focus();
        }
      }
    };
    this.ⵠᐃΔⵠⵠΔΔ = {
      ᐃΔΔᐃΔ: [],
      ⵠⵠᐃ: function (a) {
        a.y += Yx * 80 * a.ⲆΔᐃⲆ;
        a.x += Yx * 80 * a.c;
        a.Ⲇᐃᐃᐃⵠ -= Yx / 6;
        if (a.Ⲇᐃᐃᐃⵠ > 0.2) {
          a.alpha = Math.min(a.alpha + Yx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - Yx * 1, 0);
        }
      },
      add: function (b) {
        var c = Math.floor(Math.min(ns.ᐃᐃⵠᐃⲆΔⲆ * (yo / 1366), ns.ᐃᐃⵠᐃⲆΔⲆ + 10) * Math.max(Math.min(Qx.ⲆⲆᐃᐃⵠ + 1000, 3000) / 3000, 0));
        if (this.ᐃΔΔᐃΔ.length < c) {
          var d = Math.floor(Math.random() * ns.ᐃΔⵠᐃⵠⵠΔ);
          var e = -Rx.ⵠⵠΔ.x + Math.floor(Math.random() * Rx.ⵠⵠΔ.w);
          var f = -Rx.ⵠⵠΔ.y + Math.floor(Math.random() * Rx.ⵠⵠΔ.ᐃᐃᐃ);
          var g = Math.random(Math.PI);
          this.ᐃΔΔᐃΔ.push(new Yf(d, e, f, g));
        }
      }
    };
    this.ΔΔΔⵠΔᐃⵠ = 0;
    this.Ⲇᐃᐃⵠⵠ = 0;
    this.ⵠΔᐃᐃΔ = {
      ᐃΔΔᐃΔ: [],
      ΔⲆⵠᐃᐃ: 0,
      ⲆⲆᐃⲆᐃ: 0,
      ⵠⵠᐃ: function (a) {
        a.y += Yx * (200 + this.ⲆⲆᐃⲆᐃ * 800) * a.ⲆΔᐃⲆ;
        a.x += Yx * (200 + this.ⲆⲆᐃⲆᐃ * 800) * a.c;
        a.Ⲇᐃᐃᐃⵠ -= Yx / 6;
        if (a.Ⲇᐃᐃᐃⵠ > 0.2) {
          a.alpha = Math.min(a.alpha + Yx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - Yx * 1, 0);
        }
      },
      add: function (b) {
        var c = Math.floor(Math.min((this.ⲆⲆᐃⲆᐃ + 0.1) * ns.ⵠⵠᐃⲆⵠᐃⲆ * (yo / 1366), (this.ⲆⲆᐃⲆᐃ + 0.1) * ns.ⵠⵠᐃⲆⵠᐃⲆ + 10) * Math.max(Math.min(Qx.ΔΔᐃΔⵠ + 1000, 3000) / 3000, 0));
        if (this.ᐃΔΔᐃΔ.length < c) {
          var d = Math.floor(Math.random() * ns.ᐃΔⵠᐃⵠⵠΔ);
          var e = -Rx.ⵠⵠΔ.x + Math.floor(Math.random() * Rx.ⵠⵠΔ.w);
          var f = -Rx.ⵠⵠΔ.y + Math.floor(Math.random() * Rx.ⵠⵠΔ.ᐃᐃᐃ);
          var g = Math.random(Math.PI);
          if (Rx.ⵠΔᐃᐃΔ.ΔⲆⵠᐃᐃ !== 0) {
            e -= Rx.ⵠⵠΔ.w / 2;
          }
          this.ᐃΔΔᐃΔ.push(new Yf(d, e, f, g));
        }
      }
    };
    this.ᐃⲆᐃᐃΔ = {
      ᐃΔΔᐃΔ: [],
      ΔⲆⵠᐃᐃ: 0,
      ⲆⲆᐃⲆᐃ: 0,
      ⵠⵠᐃ: function (a) {
        if (Vx.ⵠΔΔⲆΔᐃⵠ()) {
          a.y += Yx * a.ⵠⵠⵠΔⵠ * (5.5 + this.ⲆⲆᐃⲆᐃ * 10);
        } else {
          a.y += Yx * a.ⵠⵠⵠΔⵠ * (5 + this.ⲆⲆᐃⲆᐃ * 10);
        }
        a.Ⲇᐃᐃᐃⵠ -= Yx / 2;
        if (Vx.ᐃᐃᐃᐃⵠᐃᐃ()) {
          a.x += Yx * (100 + this.ⲆⲆᐃⲆᐃ * 400);
        } else if (Vx.ᐃΔⵠᐃΔᐃΔ()) {
          a.x -= Yx * (130 - this.ⲆⲆᐃⲆᐃ * 400);
        } else {
          a.x -= Yx * (30 - this.ⲆⲆᐃⲆᐃ * 400);
        }
        if (a.Ⲇᐃᐃᐃⵠ > 0.2) {
          a.alpha = Math.min(a.alpha + Yx * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - Yx * 5, 0);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min((this.ⲆⲆᐃⲆᐃ * 1.5 + 0.5) * ns.ΔᐃΔᐃΔᐃⲆ * (yo / 1366), (this.ⲆⲆᐃⲆᐃ * 1.5 + 0.5) * ns.ΔᐃΔᐃΔᐃⲆ + 10) * Math.max(Math.min(Qx.ⲆᐃⵠΔΔ + 1000, 3000) / 3000, 0));
        if (this.ᐃΔΔᐃΔ.length < b) {
          var c = Math.floor(Math.random() * ns.ᐃᐃⵠⵠᐃᐃᐃ);
          var d = -Rx.ⵠⵠΔ.x + Math.floor(Math.random() * Rx.ⵠⵠΔ.w);
          var e = -Rx.ⵠⵠΔ.y + Math.floor(Math.random() * 400 * So - So * 200);
          this.ᐃΔΔᐃΔ.push(new Yf(c, d, e, 0));
        }
      }
    };
    this.ᐃⲆⵠⵠ = [];
    for (var d = 0; d < 4; d++) {
      this.ᐃⲆⵠⵠ.push(new c());
    }
  }
  function Zw() {
    Math.random();
    return "t";
  }
  function Zf() {
    Math.random();
    return "a";
  }
  function cx() {
    Math.random();
    return "s";
  }
  function dx() {
    Math.random();
    return "n";
  }
  function ex() {
    Math.random();
    return "d";
  }
  function fx() {
    Math.random();
    return "i";
  }
  function $w() {
    Math.random();
    return "p";
  }
  function gx(b, c, d, e) {
    const f = ~(b & 19904) & 19904 | ~(b & 19904) & b;
    const i = ~(c & 11247) & c | ~(c & 11247) & 11247;
    const a = ((d + 34911) * 2147483629 + 2147483587) % 2147483647;
    const j = ~(e & 10960) & (e | 10960);
    const k = mb(f, i, a);
    const h = Kf(j, f, i, a);
    return (16 << ((k ^ h) >> 0 & 255)) + (8 << ((k ^ h) >> 24 & 255)) + (24 << ((k ^ h) >> 16 & 255)) + (0 << ((k ^ h) >> 8 & 255));
  }
  ax.log = ax.info = ax.error = ax.warn = ax.debug = ax.ⲆΔⵠΔᐃΔΔⵠΔ = ax.trace = ax.time = ax.timeEnd = function () {};
  function hx(e, j) {
    this.Δᐃ = e;
    this.Δ = j;
    if (oc.navigator.userAgent.indexOf("Edge") > -1) {
      this.ⲆᐃᐃᐃⲆⲆᐃ = "default";
      this.ᐃⲆⵠⵠΔⵠⲆ = "pointer";
    } else {
      this.ⲆᐃᐃᐃⲆⲆᐃ = "url('img/cursor0.png'), default";
      this.ᐃⲆⵠⵠΔⵠⲆ = "url('img/cursor1.png'), pointer";
    }
    var w = this;
    function i(c, d, e, f, i) {
      var a = this;
      for (var j = d + 9, m = 0, n = f, o = d; j > o; o++) {
        w.buttons[o].info.callback = q;
        w.buttons[o].info.ᐃⲆⵠΔΔⲆⵠᐃΔ = c;
      }
      function p() {
        var a = c[n];
        Px.ᐃⵠᐃⲆⲆΔⵠ = ff(a.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, undefined, 10, 8);
        if (Wb !== a.level) {
          Px.ΔᐃᐃⲆΔⲆΔ = ff("Level " + a.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, tq, 10, 8);
        } else {
          Px.ΔᐃᐃⲆΔⲆΔ = ff("by " + a.ΔᐃⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, 10, 8);
        }
      }
      function q() {
        if (n !== this.ⲆⲆⲆΔⲆΔΔ && this.ⲆⲆⲆΔⲆΔΔ !== -1) {
          if (this.ΔⲆΔᐃⵠⲆⲆ > 0) {
            if (ⵠᐃΔΔΔΔᐃ === d) {
              T(y, ha, "none");
            } else {
              T(k, ha, "none");
            }
          } else if (ⵠᐃΔΔΔΔᐃ === d) {
            T(y, ia, "inline-block");
          } else {
            T(k, ia, "inline-block");
          }
          n = this.ⲆⲆⲆΔⲆΔΔ;
          e(this.ⲆⲆⲆΔⲆΔΔ);
          p();
        }
      }
      this.ᐃΔⲆᐃⲆ = function () {
        for (var a = d, b = m * 3; j > a && b < c.length; a++, b++) {
          if (c[b].ⲆⵠΔ !== ΔⲆⵠ.ⲆΔᐃⵠⲆΔⲆ || i[b] !== 0) {
            w.buttons[a].info.ⲆⲆⲆΔⲆΔΔ = b;
            for (var e = 0; e < 3; e++) {
              w.buttons[a].info.ⵠⵠ[e] = ᐃⵠᐃⲆᐃ[c[b].ⲆⵠΔ][e];
              w.buttons[a].info.active = ia;
              w.buttons[a].info.ΔⲆΔᐃⵠⲆⲆ = i[b];
            }
          } else {
            w.buttons[a].info.ⲆⲆⲆΔⲆΔΔ = -1;
            w.buttons[a].info.active = ha;
          }
        }
        for (; j > a; a++) {
          w.buttons[a].info.ⲆⲆⲆΔⲆΔΔ = -1;
          w.buttons[a].info.active = ha;
        }
        p();
      };
      w.buttons[j].info.callback = function () {
        if (m > 0) {
          m--;
        }
        a.ᐃΔⲆᐃⲆ();
      };
      w.buttons[j + 1].info.callback = function () {
        if (m * 3 + 9 < c.length) {
          m++;
        }
        a.ᐃΔⲆᐃⲆ();
      };
    }
    function n() {
      var b = Number(ΔⵠⵠⲆ.get("starve_crate"));
      var c = Number(ΔⵠⵠⲆ.get("starve_dead"));
      var d = Number(ΔⵠⵠⲆ.get("starve_book"));
      var e = Number(ΔⵠⵠⲆ.get("starve_bag"));
      var f = Number(ΔⵠⵠⲆ.get("starve_skin"));
      var a = Number(ΔⵠⵠⲆ.get("starve_accessory"));
      w.ⵠᐃᐃⲆ = f || 0;
      w.ᐃⵠΔⵠⵠ = d || 0;
      w.ⵠᐃⵠⲆᐃ = b || 1;
      w.ᐃⲆⵠⲆⵠ = a || 0;
      w.ⵠΔᐃΔᐃ = e || 0;
      w.ΔⲆⲆⲆⵠ = c || 0;
    }
    function a() {
      for (var a = ΔⲆᐃΔ.ⵠⲆⵠⲆᐃ, b = 0; a.length > b; b++) {
        if (a[b].ⲆⵠΔ === ΔⲆⵠ.ᐃⵠᐃⲆⵠ) {
          w.unlock.ⵠᐃᐃⲆ[b] = 1;
        } else {
          w.unlock.ⵠᐃᐃⲆ[b] = 0;
        }
      }
      a = ΔⲆᐃΔ.ᐃΔⲆⵠⵠ;
      b = 0;
      for (; a.length > b; b++) {
        if (ΔⲆⵠ.ᐃⵠᐃⲆⵠ === a[b].ⲆⵠΔ) {
          w.unlock.ᐃⲆⵠⲆⵠ[b] = 1;
        } else {
          w.unlock.ᐃⲆⵠⲆⵠ[b] = 0;
        }
      }
      a = ΔⲆᐃΔ.Ⲇᐃᐃⵠ;
      b = 0;
      for (; a.length > b; b++) {
        if (ΔⲆⵠ.ᐃⵠᐃⲆⵠ === a[b].ⲆⵠΔ) {
          w.unlock.ⵠΔᐃΔᐃ[b] = 1;
        } else {
          w.unlock.ⵠΔᐃΔᐃ[b] = 0;
        }
      }
      a = ΔⲆᐃΔ.ᐃᐃⲆᐃⲆ;
      b = 0;
      for (; b < a.length; b++) {
        if (a[b].ⲆⵠΔ === ΔⲆⵠ.ᐃⵠᐃⲆⵠ) {
          w.unlock.ᐃⵠΔⵠⵠ[b] = 1;
        } else {
          w.unlock.ᐃⵠΔⵠⵠ[b] = 0;
        }
      }
      a = ΔⲆᐃΔ.ⲆᐃⵠⲆⲆ;
      b = 0;
      for (; a.length > b; b++) {
        if (a[b].ⲆⵠΔ === ΔⲆⵠ.ᐃⵠᐃⲆⵠ) {
          w.unlock.ⵠᐃⵠⲆᐃ[b] = 1;
          w.unlock.ΔⲆⲆⲆⵠ[b] = 1;
        } else {
          w.unlock.ⵠᐃⵠⲆᐃ[b] = 0;
          w.unlock.ΔⲆⲆⲆⵠ[b] = 0;
        }
      }
    }
    this.waiting = false;
    this.ⵠⲆᐃⲆⲆⵠⵠ = 0;
    this.ⲆⲆΔᐃᐃᐃΔ = -1;
    this.ⵠⵠⲆΔⵠΔᐃ = {
      translate: {
        y: 0,
        x: 0
      },
      angle: 0,
      ⵠⵠ: ᐃΔ[301],
      ⲆⵠⵠΔ: function () {
        this.angle += Yx * 2;
        j.save();
        j.translate(this.translate.x + this.ⵠⵠ.width / 2, this.translate.y + this.ⵠⵠ.height / 2);
        j.rotate(this.angle);
        Np(j, this.ⵠⵠ, -this.ⵠⵠ.width / 2, -this.ⵠⵠ.height / 2);
        j.restore();
      }
    };
    this.ⲆⵠᐃⲆΔⵠᐃ = {
      id: document.getElementById("langselect"),
      style: document.getElementById("langselect").style,
      translate: {
        y: 0,
        x: 0
      },
      ⵠⵠᐃ: function () {
        this.style.left = Math.floor(this.translate.x) + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ⵠΔⵠⲆᐃ = 0;
    this.ⵠᐃΔΔⲆᐃⲆ = -1;
    this.ⵠᐃⵠΔⲆⲆᐃ = Yh;
    this.ⵠⵠⵠᐃⲆᐃΔ = "";
    this.ΔΔᐃⲆΔᐃΔ = "";
    this.ΔΔⵠΔⲆᐃⵠ = undefined;
    this.ⲆΔΔⵠᐃ = 0;
    this.ⲆⲆⵠⲆⲆᐃᐃ = -1;
    this.ᐃⲆⵠΔⵠΔᐃ = Wb;
    this.ᐃⵠⵠΔⲆⲆᐃ = 0;
    this.ⵠⲆⲆⲆΔⵠᐃ = 0;
    this.ⵠΔᐃΔᐃΔⵠ = 0;
    this.ᐃᐃΔᐃⵠ = 0;
    this.ᐃⵠⵠⵠⵠⵠΔ = 0;
    this.time = 0;
    this.ⵠⵠⵠⲆⵠ = 0;
    this.ΔⵠΔᐃⲆᐃᐃ = 0;
    this.ᐃᐃΔⵠΔⵠⲆ = 0;
    this.ᐃΔΔⵠⲆⲆΔ = 0;
    this.ᐃΔΔⲆⲆᐃΔ = 0;
    this.ⲆᐃΔⵠᐃⲆΔ = [];
    this.ΔⵠⵠΔⵠ = -1;
    this.ⲆⵠΔⲆⲆⵠΔ = -1;
    this.ⵠᐃᐃΔⲆⵠᐃ = -1;
    this.ⵠᐃⵠΔⵠⵠⵠ = Nl;
    this.ΔⲆⲆⵠⲆⵠⵠ = Bt;
    this.ΔᐃᐃⲆⲆᐃⵠ = -1;
    this.ᐃⲆⲆⵠⲆⵠΔ = -1;
    this.ΔⲆⵠⵠⲆΔᐃ = -1;
    this.ⵠⵠΔᐃⵠΔⵠ = -1;
    this.ⲆᐃⲆΔΔⲆᐃ = undefined;
    this.ΔΔᐃⲆᐃᐃᐃ = undefined;
    this.ᐃᐃⲆΔᐃΔΔ = $q;
    this.ᐃⵠᐃⲆⲆΔⵠ = undefined;
    this.ΔᐃᐃⲆΔⲆΔ = undefined;
    this.ΔⵠⲆΔΔΔⵠ = rh;
    this.ᐃΔⲆᐃᐃΔΔ = jn;
    this.ΔⵠⵠΔⵠᐃᐃ = md;
    this.ⲆⵠΔΔⵠΔⲆ = os;
    this.ⵠΔⵠᐃⵠⵠⵠ = 3;
    this.ΔⵠᐃⲆ = 0;
    this.ⵠⵠᐃⲆⵠⲆⵠΔΔ = false;
    this.ᐃᐃΔΔⵠ = ΔⵠⵠⲆ.get("starve_quality") ? ΔⵠⵠⲆ.get("starve_quality") : "high";
    if (this.ᐃᐃΔΔⵠ === "high") {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      this.ᐃᐃΔΔⵠ = 1;
    } else {
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      this.ᐃᐃΔΔⵠ = 0;
    }
    this.ⲆΔⵠⲆⲆⲆΔΔΔ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      ΔⵠⵠⲆ.set("starve_quality", "high", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 1;
      Tx.ⲆΔⵠⲆΔⵠⵠ();
      Px.ᐃᐃΔΔⵠ = 1;
    };
    this.ⵠⵠⵠⵠΔⵠⲆⵠⲆ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      ΔⵠⵠⲆ.set("starve_quality", "low", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 0.5 / (yr / Br);
      Tx.ⲆΔⵠⲆΔⵠⵠ();
      Px.ᐃᐃΔΔⵠ = 0;
    };
    if (ΔⵠⵠⲆ.get("starve_mapping") === undefined && Nr === "FR") {
      Vx.ΔⵠᐃΔΔⲆⲆ();
      this.mapping = "azerty";
    } else {
      this.mapping = ΔⵠⵠⲆ.get("starve_mapping") ? ΔⵠⵠⲆ.get("starve_mapping") : "qwerty";
    }
    if (this.mapping == "azerty") {
      Vx.ΔⵠᐃΔΔⲆⲆ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
    } else {
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
    }
    this.ΔⵠᐃΔΔⲆⲆ = function () {
      Vx.ΔⵠᐃΔΔⲆⲆ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
      ΔⵠⵠⲆ.set("starve_mapping", "azerty", {
        expires: 30
      });
    };
    this.ⵠⵠⵠⲆⵠⵠΔ = function () {
      Vx.ⵠⵠⵠⲆⵠⵠΔ();
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      ΔⵠⵠⲆ.set("starve_mapping", "qwerty", {
        expires: 30
      });
    };
    this.ᐃⵠᐃⲆΔⲆⲆ = {
      id: document.getElementById("all_rights_reserved"),
      style: document.getElementById("all_rights_reserved").style,
      translate: {
        y: 0,
        x: 0
      },
      ⵠⵠᐃ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    n();
    this.unlock = {};
    this.unlock.ⵠᐃᐃⲆ = [];
    this.unlock.ⵠΔᐃΔᐃ = [];
    this.unlock.ᐃⵠΔⵠⵠ = [];
    this.unlock.ⵠᐃⵠⲆᐃ = [];
    this.unlock.ΔⲆⲆⲆⵠ = [];
    this.unlock.ᐃⲆⵠⲆⵠ = [];
    this.ⵠⲆⲆⵠΔᐃᐃ = 0;
    this.ΔⲆⵠᐃⵠⲆᐃ = a;
    a();
    this.ᐃⲆⲆⲆⵠ = {
      id: document.getElementById("trevda"),
      style: document.getElementById("trevda").style,
      translate: {
        x: 0,
        y: 0
      },
      ⵠⵠᐃ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    var o;
    var r = 0;
    function t() {
      w.ⵠⵠᐃ();
      if (++r == 30) {
        w.ⵠΔᐃⲆᐃⵠⵠ();
        w.ⵠⲆᐃⲆⲆⵠⵠ = ls;
        w.ⵠⵠᐃ();
        return;
      }
      oc.setTimeout(t, 33);
    }
    this.ⵠⵠΔⲆᐃ = function (a) {
      o = a;
      w.ᐃᐃⵠⵠⲆᐃⲆ();
      w.ⵠⲆᐃⲆⲆⵠⵠ = 0;
      g = -1;
      z();
    };
    var g = -1;
    function z() {
      w.ⵠⵠᐃ();
      if (++g == 30) {
        ΔⵠⵠⲆ.set("starve_nickname", w.ᐃΔΔΔΔ.input.value, {
          expires: 30
        });
        w.ᐃΔΔΔΔ.style.display = "none";
        w.ⲆⵠⵠⲆⵠ.style.display = "none";
        w.ⲆⵠᐃⲆΔⵠᐃ.style.display = "none";
        w.ᐃⵠᐃⲆΔⲆⲆ.style.display = "none";
        w.ᐃⲆⲆⲆⵠ.style.display = "none";
        w.stop();
        o();
        return;
      }
      oc.setTimeout(z, 33);
    }
    this.ⲆΔᐃⲆⲆ = Hs;
    this.stop = function () {
      this.ⲆΔᐃⲆⲆ = Hs;
    };
    this.ⵠⵠΔⵠⵠ = function () {
      hy();
      document.getElementById("game_body").style.backgroundColor = ns.ⵠΔᐃⲆΔ[Lx.time];
      w.ᐃΔΔΔΔ.style.display = "inline-block";
      w.ⲆⵠⵠⲆⵠ.style.display = "inline-block";
      w.ⲆⵠᐃⲆΔⵠᐃ.style.display = "inline-block";
      w.ᐃⵠᐃⲆΔⲆⲆ.style.display = "inline-block";
      w.ᐃⲆⲆⲆⵠ.style.display = "inline-block";
      w.waiting = false;
      w.ⲆΔᐃⲆⲆ = true;
      g = -1;
      r = 0;
      t();
    };
    this.ⵠΔᐃⲆΔⲆⲆ = function (a, b) {
      b = b < 0 ? -b : b;
      if ((a.position & ca) === ca) {
        if ((a.position & Z) === Z) {
          a.translate.x = iq + a.translate.ⵠⲆⲆΔᐃ - b;
        } else if ((a.position & _) === _) {
          a.translate.x = iq + a.translate.ⵠⲆⲆΔᐃ + b;
        } else {
          a.translate.x = iq + a.translate.ⵠⲆⲆΔᐃ;
        }
      } else if (Z === (a.position & Z)) {
        a.translate.x = a.translate.ⵠⲆⲆΔᐃ - b;
      } else if ((a.position & _) === _) {
        a.translate.x = yo - a.translate.ⵠⲆⲆΔᐃ + b;
      } else {
        a.translate.x = a.translate.ⵠⲆⲆΔᐃ;
      }
      if ((a.position & ea) === ea) {
        if ((a.position & aa) === aa) {
          a.translate.y = jq + a.translate.ᐃⲆΔⲆⵠ - b;
        } else if ((a.position & ba) === ba) {
          a.translate.y = jq + a.translate.ᐃⲆΔⲆⵠ + b;
        } else {
          a.translate.y = jq + a.translate.ᐃⲆΔⲆⵠ;
        }
      } else if ((a.position & aa) === aa) {
        a.translate.y = a.translate.ᐃⲆΔⲆⵠ - b;
      } else if (ba === (a.position & ba)) {
        a.translate.y = hq + a.translate.ᐃⲆΔⲆⵠ + b;
      } else {
        a.translate.y = a.translate.ᐃⲆΔⲆⵠ;
      }
      if (a.style !== os) {
        a.style.left = Math.floor(a.translate.x) + "px";
        a.style.top = Math.floor(a.translate.y) + "px";
      }
    };
    this.ⵠⵠᐃ = function () {
      var a = 0;
      if (r != 30 || g != -1) {
        if (r != 30) {
          a = 1500 / (r + 1) - 50;
        }
        if (g != -1) {
          a = -(1750 / (30 - g + 1) - 48);
        }
      }
      for (var b = 0; this.ⵠᐃⲆΔ.length > b; b++) {
        this.ⵠΔᐃⲆΔⲆⲆ(this.ⵠᐃⲆΔ[b], a);
      }
      for (b = 0; this.buttons.length > b; b++) {
        this.ⵠΔᐃⲆΔⲆⲆ(this.buttons[b].info, a);
      }
      for (b = 0; b < this.ΔΔΔΔⵠ.length; b++) {
        this.ⵠΔᐃⲆΔⲆⲆ(this.ΔΔΔΔⵠ[b], a);
      }
      this.ⵠⵠⲆΔⵠΔᐃ.translate.x = (yo - this.ⵠⵠⲆΔⵠΔᐃ.ⵠⵠ.width) / 2;
      this.ⵠⵠⲆΔⵠΔᐃ.translate.y = 0;
      this.ⲆⵠᐃⲆΔⵠᐃ.translate.x = yo - 450;
      this.ⲆⵠᐃⲆΔⵠᐃ.translate.y = hq - 40;
      this.ᐃⵠᐃⲆΔⲆⲆ.translate.x = yo - 340;
      this.ᐃⵠᐃⲆΔⲆⲆ.translate.y = hq - 25;
      this.ᐃⲆⲆⲆⵠ.translate.x = yo - 320;
      this.ᐃⲆⲆⲆⵠ.translate.y = 80;
      if (r != 30 || g != -1) {
        var c = 0;
        if (r != 30) {
          c = 1500 / (r + 1) - 50;
        }
        if (g != -1) {
          c = -(1750 / (30 - g + 1) - 48);
        }
        this.ⵠⵠⲆΔⵠΔᐃ.translate.y -= c > 0 ? c : -c;
        this.ⲆⵠᐃⲆΔⵠᐃ.translate.y -= c < 0 ? c : -c;
        this.ᐃⵠᐃⲆΔⲆⲆ.translate.y -= c < 0 ? c : -c;
      }
      this.ⲆⵠᐃⲆΔⵠᐃ.ⵠⵠᐃ();
      this.ᐃⵠᐃⲆΔⲆⲆ.ⵠⵠᐃ();
      this.ᐃⲆⲆⲆⵠ.ⵠⵠᐃ();
    };
    this.ᐃΔΔᐃᐃⲆⲆ = function (b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = 342;
      c.height = 342;
      var e = -Math.PI / 2;
      for (var f = 0; b.length > f; f++) {
        var g = b[f][0];
        var h = Math.PI * b[f][1] / 180;
        d.beginPath();
        d.arc(171, 171, 170, e, e + h, gr);
        d.lineTo(171, 171);
        d.fillStyle = g;
        d.fill();
        e += h;
      }
      return c;
    };
    this.ᐃⵠᐃⲆⵠΔⵠΔⵠ = function () {
      this.ⵠⵠⵠᐃⲆᐃΔ = document.getElementById("account_nickname_input").value;
      if (this.ⵠⵠⵠᐃⲆᐃΔ !== this.ΔΔᐃⲆΔᐃΔ) {
        this.ΔΔᐃⲆΔᐃΔ = this.ⵠⵠⵠᐃⲆᐃΔ;
        this.ΔΔⵠΔⲆᐃⵠ = ff(this.ⵠⵠⵠᐃⲆᐃΔ, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
      }
    };
    this.ⲆⵠⵠΔ = function () {
      Dc();
      Px.ᐃⵠⵠΔⲆⲆᐃ = ⲆⵠΔⵠ.ΔΔᐃⲆⵠ(Px.ᐃⵠⵠΔⲆⲆᐃ, Px.ⵠⲆⲆⲆΔⵠᐃ, 0.03);
      this.ⵠᐃⲆΔ[ΔᐃΔΔΔᐃΔ].translate.x = this.ⵠᐃⲆΔ[0].translate.x + -72 + Px.ᐃⵠⵠΔⲆⲆᐃ * 165;
      this.ⵠᐃⲆΔ[ΔᐃΔΔΔᐃΔ].translate.ⵠⲆⲆΔᐃ = this.ⵠᐃⲆΔ[ΔᐃΔΔΔᐃΔ].translate.x;
      this.ⵠᐃⲆΔ[ΔᐃΔΔΔᐃΔ].translate.y = this.ⵠᐃⲆΔ[0].translate.y + 30;
      this.ⵠᐃⲆΔ[ΔᐃΔΔΔᐃΔ].translate.ᐃⲆΔⲆⵠ = this.ⵠᐃⲆΔ[ΔᐃΔΔΔᐃΔ].translate.y;
      for (var f = 2; this.ⵠᐃⲆΔ.length > f; f++) {
        if (this.ⵠᐃⲆΔ[f].active === ia) {
          this.ⵠᐃⲆΔ[f].ⲆⵠⵠΔ(j);
        }
      }
      if ((U = this.ΔⵠⵠΔⵠ - Date.now()) > 0) {
        var n = Math.floor(U / 60000);
        var t = Math.floor(n / 60);
        n %= 60;
        if (this.ⵠᐃᐃΔⲆⵠᐃ !== n) {
          this.ⵠᐃᐃΔⲆⵠᐃ = n;
          n = n < 10 ? "0" + n : "" + n;
          w.ⵠᐃⵠΔⵠⵠⵠ = ff(n, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (t !== this.ⲆⵠΔⲆⲆⵠΔ) {
          this.ⲆⵠΔⲆⲆⵠΔ = t;
          t = t < 10 ? "0" + t : "" + t;
          w.ΔⲆⲆⵠⲆⵠⵠ = ff(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (W = this.ⵠᐃⲆΔ[ᐃⵠⲆᐃΔᐃⲆ]).ⲆⵠⵠΔ(j);
        var T = this.ΔⲆⲆⵠⲆⵠⵠ;
        Np(j, T, W.translate.x - T.width / 4 + 182, W.translate.y - T.height / 4 + 40, T.width / 2, T.height / 2);
        T = this.ⵠᐃⵠΔⵠⵠⵠ;
        Np(j, T, W.translate.x - T.width / 4 + 251, W.translate.y - T.height / 4 + 40, T.width / 2, T.height / 2);
      }
      var U = this.ΔᐃᐃⲆⲆᐃⵠ - Date.now();
      if (U > 0) {
        n = Math.floor(U / 60000);
        t = Math.floor(n / 60);
        var W;
        var X = Math.floor(t / 24);
        n %= 60;
        t %= 24;
        if (this.ⵠⵠΔᐃⵠΔⵠ !== n) {
          this.ⵠⵠΔᐃⵠΔⵠ = n;
          n = n < 10 ? "0" + n : "" + n;
          w.ⲆᐃⲆΔΔⲆᐃ = ff(n, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ΔⲆⵠⵠⲆΔᐃ !== t) {
          this.ΔⲆⵠⵠⲆΔᐃ = t;
          t = t < 10 ? "0" + t : "" + t;
          w.ΔΔᐃⲆᐃᐃᐃ = ff(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ᐃⲆⲆⵠⲆⵠΔ !== X) {
          this.ᐃⲆⲆⵠⲆⵠΔ = X;
          X = X < 10 ? "0" + X : "" + X;
          w.ᐃᐃⲆΔᐃΔΔ = ff(X, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (W = this.ⵠᐃⲆΔ[ⲆⵠⲆⲆᐃΔΔ]).ⲆⵠⵠΔ(j);
        T = this.ᐃᐃⲆΔᐃΔΔ;
        Np(j, T, W.translate.x - T.width / 4 + 113, W.translate.y - T.height / 4 + 40, T.width / 2, T.height / 2);
        T = this.ΔΔᐃⲆᐃᐃᐃ;
        Np(j, T, W.translate.x - T.width / 4 + 182, W.translate.y - T.height / 4 + 40, T.width / 2, T.height / 2);
        T = this.ⲆᐃⲆΔΔⲆᐃ;
        Np(j, T, W.translate.x - T.width / 4 + 251, W.translate.y - T.height / 4 + 40, T.width / 2, T.height / 2);
      }
      if ((this.ᐃⲆΔΔΔ & C) === C) {
        this.buttons[ᐃΔΔᐃᐃᐃΔ].info.state = mf;
      } else if ((this.ᐃⲆΔΔΔ & D) === D) {
        this.buttons[ΔⲆᐃⲆⵠⲆⲆ].info.state = mf;
      } else if ((this.ᐃⲆΔΔΔ & m) === m) {
        this.buttons[ΔⵠⲆΔᐃⵠⲆ].info.state = mf;
      } else if ((this.ᐃⲆΔΔΔ & d) === d) {
        this.buttons[ΔⲆᐃⵠⵠⵠᐃ].info.state = mf;
      } else if (p === (this.ᐃⲆΔΔΔ & p)) {
        this.buttons[ⲆΔⵠᐃⲆⲆᐃ].info.state = mf;
      } else if (v === (this.ᐃⲆΔΔΔ & v)) {
        this.buttons[ᐃΔⲆⲆᐃᐃⵠ].info.state = mf;
      } else if ((this.ᐃⲆΔΔΔ & c) === c || (this.ᐃⲆΔΔΔ & x) === x || E === (this.ᐃⲆΔΔΔ & E) || (this.ᐃⲆΔΔΔ & F) === F || B === (this.ᐃⲆΔΔΔ & B) || (this.ᐃⲆΔΔΔ & G) === G || I === (this.ᐃⲆΔΔΔ & I)) {
        this.buttons[ΔΔⲆᐃΔⵠⲆ].info.state = mf;
      } else if (J === (this.ᐃⲆΔΔΔ & J) || M === (this.ᐃⲆΔΔΔ & M) || L === (this.ᐃⲆΔΔΔ & L) || q === (this.ᐃⲆΔΔΔ & q) || N === (this.ᐃⲆΔΔΔ & N) || (this.ᐃⲆΔΔΔ & O) === O) {
        this.buttons[ΔⵠⲆΔᐃⵠⲆ].info.state = mf;
      } else if ((this.ᐃⲆΔΔΔ & Q) === Q || K === (this.ᐃⲆΔΔΔ & K) || (this.ᐃⲆΔΔΔ & R) === R) {
        this.buttons[ⵠΔⲆΔⲆᐃᐃ].info.state = mf;
      } else if (S === (this.ᐃⲆΔΔΔ & S)) {
        this.buttons[ΔⲆᐃⵠⵠⵠᐃ].info.state = mf;
      }
      if (D === (this.ᐃⲆΔΔΔ & D)) {
        if (this.ᐃⵠᐃΔΔⲆⵠ === this.ᐃΔⲆᐃᐃΔΔ) {
          this.ΔⵠⲆΔΔΔⵠ = this.ΔⵠⵠΔⲆⲆᐃ;
          this.buttons[this.ΔⵠⵠΔⲆⲆᐃ].info.active = ha;
          this.buttons[this.ⲆΔΔⵠΔᐃΔ].info.active = ha;
          this.buttons[this.ᐃΔΔⵠⲆΔⲆ].info.active = ha;
        } else {
          this.buttons[this.ΔⵠⵠΔⲆⲆᐃ].info.active = ia;
          this.buttons[this.ⲆΔΔⵠΔᐃΔ].info.active = ia;
          this.buttons[this.ᐃΔΔⵠⲆΔⲆ].info.active = ia;
        }
        if (this.ᐃΔⲆᐃᐃΔΔ === this.ΔⵠΔⵠⵠⵠⵠ) {
          this.buttons[this.ΔⵠΔⵠⵠⵠⵠ].info.state = mf;
        } else if (this.ᐃΔⲆᐃᐃΔΔ === this.ⲆΔⲆΔΔⲆᐃ) {
          this.buttons[this.ⲆΔⲆΔΔⲆᐃ].info.state = mf;
        } else if (this.ᐃΔⲆᐃᐃΔΔ === this.ᐃⵠᐃΔΔⲆⵠ) {
          this.buttons[this.ᐃⵠᐃΔΔⲆⵠ].info.state = mf;
        } else if (this.ⲆⲆᐃΔⲆᐃᐃ === this.ᐃΔⲆᐃᐃΔΔ) {
          this.buttons[this.ⲆⲆᐃΔⲆᐃᐃ].info.state = mf;
        } else if (this.ᐃΔⲆᐃᐃΔΔ === this.ᐃⵠⲆⵠⲆⲆΔ) {
          this.buttons[this.ᐃⵠⲆⵠⲆⲆΔ].info.state = mf;
        }
        if (this.ΔⵠⲆΔΔΔⵠ === this.ΔⵠⵠΔⲆⲆᐃ) {
          this.buttons[this.ΔⵠⵠΔⲆⲆᐃ].info.state = mf;
        } else if (this.ΔⵠⲆΔΔΔⵠ === this.ⲆΔΔⵠΔᐃΔ) {
          this.buttons[this.ⲆΔΔⵠΔᐃΔ].info.state = mf;
        } else if (this.ᐃΔΔⵠⲆΔⲆ === this.ΔⵠⲆΔΔΔⵠ) {
          this.buttons[this.ᐃΔΔⵠⲆΔⲆ].info.state = mf;
        }
        if (this.ⵠᐃⵠⵠΔᐃΔ === this.ΔⵠⵠΔⵠᐃᐃ) {
          this.buttons[this.ⵠᐃⵠⵠΔᐃΔ].info.state = mf;
        } else if (this.ΔⲆΔᐃᐃΔΔ === this.ΔⵠⵠΔⵠᐃᐃ) {
          this.buttons[this.ΔⲆΔᐃᐃΔΔ].info.state = mf;
        } else if (this.ΔⵠⵠΔⵠᐃᐃ === this.ᐃΔΔⵠᐃΔᐃ) {
          this.buttons[this.ᐃΔΔⵠᐃΔᐃ].info.state = mf;
        }
        if (this.ⲆⵠΔΔⵠΔⲆ === this.ᐃⲆΔⵠⲆⲆⲆ) {
          this.buttons[this.ᐃⲆΔⵠⲆⲆⲆ].info.state = mf;
        } else if (this.ⲆⵠΔΔⵠΔⲆ === this.ΔΔᐃΔΔΔΔ) {
          this.buttons[this.ΔΔᐃΔΔΔΔ].info.state = mf;
        } else if (this.ⲆⵠΔΔⵠΔⲆ === this.ⵠᐃᐃΔΔⵠᐃ) {
          this.buttons[this.ⵠᐃᐃΔΔⵠᐃ].info.state = mf;
        } else if (this.ΔᐃⵠᐃⲆⲆⲆ === this.ⲆⵠΔΔⵠΔⲆ) {
          this.buttons[this.ΔᐃⵠᐃⲆⲆⲆ].info.state = mf;
        } else if (this.ΔⵠᐃᐃΔΔΔ === this.ⲆⵠΔΔⵠΔⲆ) {
          this.buttons[this.ΔⵠᐃᐃΔΔΔ].info.state = mf;
        } else if (this.ⲆⵠΔΔⵠΔⲆ === this.ⲆⲆΔΔⵠᐃⵠ) {
          this.buttons[this.ⲆⲆΔΔⵠᐃⵠ].info.state = mf;
        }
      }
      if (d === (this.ᐃⲆΔΔΔ & d)) {
        if (this.ⲆⲆΔᐃᐃᐃΔ === -1) {
          this.buttons[za].info.state = mf;
        } else if (this.ⲆⲆΔᐃᐃᐃΔ === 0) {
          this.buttons[Aa].info.state = mf;
        } else if (this.ⲆⲆΔᐃᐃᐃΔ === 2) {
          this.buttons[Ca].info.state = mf;
        } else if (this.ⲆⲆΔᐃᐃᐃΔ === 3) {
          this.buttons[Da].info.state = mf;
        } else if (this.ⲆⲆΔᐃᐃᐃΔ === 4) {
          this.buttons[Ba].info.state = mf;
        }
        if (this.ⵠΔⵠᐃⵠⵠⵠ === 0) {
          this.buttons[ta].info.state = mf;
        } else if (this.ⵠΔⵠᐃⵠⵠⵠ === 1) {
          this.buttons[ua].info.state = mf;
        } else if (this.ⵠΔⵠᐃⵠⵠⵠ === 2) {
          this.buttons[va].info.state = mf;
        } else if (this.ⵠΔⵠᐃⵠⵠⵠ === 3) {
          this.buttons[wa].info.state = mf;
        } else if (this.ⵠΔⵠᐃⵠⵠⵠ === 4) {
          this.buttons[xa].info.state = mf;
        } else if (this.ⵠΔⵠᐃⵠⵠⵠ === 5) {
          this.buttons[ya].info.state = mf;
        }
      }
      if ((this.ᐃⲆΔΔΔ & C) === C && Mx.ᐃⵠⵠⲆᐃⲆⲆ === 0) {
        if (this.buttons[ma].ΔⵠᐃΔΔᐃᐃ(Wx.ΔⵠⲆⲆ)) {
          this.buttons[ma].hint = Math.min(1, this.buttons[ma].hint + Yx * 1.5);
        } else {
          this.buttons[ma].hint = Math.max(0, this.buttons[ma].hint - Yx * 1.5);
        }
        if (this.buttons[na].ΔⵠᐃΔΔᐃᐃ(Wx.ΔⵠⲆⲆ)) {
          this.buttons[na].hint = Math.min(1, this.buttons[na].hint + Yx * 1.5);
        } else {
          this.buttons[na].hint = Math.max(0, this.buttons[na].hint - Yx * 1.5);
        }
        if (this.buttons[oa].ΔⵠᐃΔΔᐃᐃ(Wx.ΔⵠⲆⲆ)) {
          this.buttons[oa].hint = Math.min(1, this.buttons[oa].hint + Yx * 1.5);
        } else {
          this.buttons[oa].hint = Math.max(0, this.buttons[oa].hint - Yx * 1.5);
        }
        if (this.buttons[ra].ΔⵠᐃΔΔᐃᐃ(Wx.ΔⵠⲆⲆ)) {
          this.buttons[ra].hint = Math.min(1, this.buttons[ra].hint + Yx * 1.5);
        } else {
          this.buttons[ra].hint = Math.max(0, this.buttons[ra].hint - Yx * 1.5);
        }
        if (this.buttons[pa].ΔⵠᐃΔΔᐃᐃ(Wx.ΔⵠⲆⲆ)) {
          this.buttons[pa].hint = Math.min(1, this.buttons[pa].hint + Yx * 1.5);
        } else {
          this.buttons[pa].hint = Math.max(0, this.buttons[pa].hint - Yx * 1.5);
        }
        if (this.buttons[qa].ΔⵠᐃΔΔᐃᐃ(Wx.ΔⵠⲆⲆ)) {
          this.buttons[qa].hint = Math.min(1, this.buttons[qa].hint + Yx * 1.5);
        } else {
          this.buttons[qa].hint = Math.max(0, this.buttons[qa].hint - Yx * 1.5);
        }
      }
      var Y = 1;
      if ((this.ᐃⲆΔΔΔ & (x | E | F | B | G | I)) > 1) {
        T = ᐃᐃ.ΔⵠⵠΔⲆⲆⵠ;
        j.save();
        j.translate(iq, la + T.height / 4);
        if (this.ⵠⲆΔⲆᐃ === 1) {
          this.ΔⵠⵠᐃⵠΔΔ += Yx / 3;
          Y = this.ⲆΔᐃᐃΔᐃⲆ - 100 / Math.pow(1 + this.ΔⵠⵠᐃⵠΔΔ, 1 + this.ΔⵠⵠᐃⵠΔΔ);
          j.rotate(Y);
        }
        Np(j, T, -T.width / 4, -T.height / 4, T.width / 2, T.height / 2);
        j.restore();
      }
      if (Mx.ᐃⵠⵠⲆᐃⲆⲆ === 0) {
        if (Mx.ΔᐃᐃⵠⲆ === 0) {
          this.buttons[ma].info.state = mf;
        } else if (Mx.ΔᐃᐃⵠⲆ === 4) {
          this.buttons[na].info.state = mf;
        } else if (Mx.ΔᐃᐃⵠⲆ === 2) {
          this.buttons[pa].info.state = mf;
        } else if (Mx.ΔᐃᐃⵠⲆ === 3) {
          this.buttons[qa].info.state = mf;
        } else if (Mx.ΔᐃᐃⵠⲆ === 6) {
          this.buttons[oa].info.state = mf;
        } else if (Mx.ΔᐃᐃⵠⲆ === 7) {
          this.buttons[ra].info.state = mf;
        }
      }
      for (f = 1; this.buttons.length > f; f++) {
        if (ia === this.buttons[f].info.active) {
          this.buttons[f].ⲆⵠⵠΔ(j);
        }
      }
      this.ⵠᐃⲆΔ[0].ⲆⵠⵠΔ(j);
      if ((this.ᐃⲆΔΔΔ & (P | H)) > 0) {
        T = this.ΔΔⵠΔⲆᐃⵠ;
        Np(j, T, iq - T.width / 4, 138, T.width / 2, T.height / 2);
      }
      var Z = Math.max(1, Math.min(18, Math.floor((Px.ⲆΔΔⵠᐃ + 3) / 2)));
      this.ⵠᐃⲆΔ[Z].active = ia;
      this.ⵠᐃⲆΔ[Z].ⲆⵠⵠΔ(j);
      this.ⵠᐃⲆΔ[Z].active = ha;
      this.buttons[0].ⲆⵠⵠΔ(j);
      if ((this.ᐃⲆΔΔΔ & (m | M | q | J | N)) > 1) {
        var l = (this.ᐃⲆΔΔΔ & (M | q | J | N)) > 1 ? -190 : 0;
        T = ᐃΔ[29][this.ⵠΔᐃΔᐃ][this.ⵠⲆⲆⵠΔᐃᐃ];
        Np(j, T, iq - T.width / 4 + l, 183, T.width / 2, T.height / 2);
        this.ΔⵠᐃⲆ = (this.ΔⵠᐃⲆ + Yx * 1000) % 2000;
        var u = (this.ΔⵠᐃⲆ < 1000) * 4.5 ? this.ΔⵠᐃⲆ / 1000 : (2000 - this.ΔⵠᐃⲆ) / 1000;
        T = ᐃΔ[28][this.ᐃⵠΔⵠⵠ][this.ⵠⲆⲆⵠΔᐃᐃ];
        Np(j, T, iq - T.width / 4 - 62 + u + l, 240, T.width / 2, T.height / 2);
        T = ᐃΔ[7][this.ⵠᐃᐃⲆ][this.ⵠⲆⲆⵠΔᐃᐃ];
        Np(j, T, iq - T.width / 4 - 54 + u + l, 272, T.width / 2, T.height / 2);
        Np(j, T, iq - T.width / 4 + 54 - u + l, 272, T.width / 2, T.height / 2);
        T = ᐃΔ[255][this.ⵠᐃᐃⲆ][this.ⵠⲆⲆⵠΔᐃᐃ];
        Np(j, T, iq - T.width / 4 + l, 222, T.width / 2, T.height / 2);
        T = ᐃΔ[796][this.ᐃⲆⵠⲆⵠ][this.ⵠⲆⲆⵠΔᐃᐃ];
        Np(j, T, iq - T.width / 4 + l, 222, T.width / 2, T.height / 2);
      }
      if ((this.ᐃⲆΔΔΔ & m) === m) {
        T = ᐃΔ[250][this.ⵠᐃⵠⲆᐃ][this.ⵠⲆⲆⵠΔᐃᐃ];
        Np(j, T, iq - T.width / 4 - 61, 406 - T.height / 4, T.width / 2, T.height / 2);
        T = ᐃΔ[250][this.ΔⲆⲆⲆⵠ][this.ⵠⲆⲆⵠΔᐃᐃ];
        Np(j, T, iq - T.width / 4 + 53, 406 - T.height / 4, T.width / 2, T.height / 2);
      }
      if ((this.ᐃⲆΔΔΔ & L) === L) {
        T = ᐃΔ[250][this.ΔⲆⲆⲆⵠ][this.ⵠⲆⲆⵠΔᐃᐃ];
        Np(j, T, iq - T.width / 4 - 200, 268 - T.height / 4, T.width / 2, T.height / 2);
      }
      if (O === (this.ᐃⲆΔΔΔ & O)) {
        T = ᐃΔ[250][this.ⵠᐃⵠⲆᐃ][this.ⵠⲆⲆⵠΔᐃᐃ];
        Np(j, T, iq - T.width / 4 - 200, 268 - T.height / 4, T.width / 2, T.height / 2);
      }
      if ((this.ᐃⲆΔΔΔ & (M | q | J | N | L | O)) > 1) {
        for (f = 1; this.buttons.length > f; f++) {
          if ((this.buttons[f].view & this.ᐃⲆΔΔΔ) !== 0) {
            var _ = this.buttons[f].info;
            if (_.ⲆⲆⲆΔⲆΔΔ >= 0) {
              T = _.ᐃⲆⵠΔΔⲆⵠᐃΔ[_.ⲆⲆⲆΔⲆΔΔ].ⵠΔΔ;
              Np(j, T, _.translate.x - T.width / 8 + 44.5, _.translate.y - T.height / 8 + 45.5, T.width / 4, T.height / 4);
              if (_.ΔⲆΔᐃⵠⲆⲆ !== 1) {
                T = ᐃᐃ.ΔⲆⲆⵠⲆⲆΔ;
                Np(j, T, _.translate.x - T.width / 4 + 44.5, _.translate.y - T.height / 4 + 44.5, T.width / 2, T.height / 2);
              }
            }
          }
        }
        T = this.ᐃⵠᐃⲆⲆΔⵠ;
        Np(j, T, iq - 312, 375, T.width / 2, T.height / 2);
        T = this.ΔᐃᐃⲆΔⲆΔ;
        Np(j, T, iq - 312, 395, T.width / 2, T.height / 2);
      }
      if (this.ⵠΔⵠⲆᐃ !== this.ⵠᐃΔΔⲆᐃⲆ) {
        this.ⵠᐃΔΔⲆᐃⲆ = this.ⵠΔⵠⲆᐃ;
        this.ⵠᐃⵠΔⲆⲆᐃ = ff("" + this.ⵠΔⵠⲆᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
      }
      Np(j, this.ⵠᐃⵠΔⲆⲆᐃ, this.ⵠᐃⲆΔ[0].translate.x + 350, 15, this.ⵠᐃⵠΔⲆⲆᐃ.w2, this.ⵠᐃⵠΔⲆⲆᐃ.ⲆᐃᐃΔⲆ);
      if (this.ⲆΔΔⵠᐃ !== this.ⲆⲆⵠⲆⲆᐃᐃ) {
        this.ⲆⲆⵠⲆⲆᐃᐃ = this.ⲆΔΔⵠᐃ;
        this.ᐃⲆⵠΔⵠΔᐃ = ff("LVL " + (this.ⲆΔΔⵠᐃ + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, Pn, 30, 24, sk, Nl, undefined, undefined, "#3F3019", 20);
      }
      Np(j, this.ᐃⲆⵠΔⵠΔᐃ, this.ⵠᐃⲆΔ[0].translate.x + 94, 0, this.ᐃⲆⵠΔⵠΔᐃ.w2, this.ᐃⲆⵠΔⵠΔᐃ.ⲆᐃᐃΔⲆ);
      if (Mx.ᐃⵠⵠⲆᐃⲆⲆ === 0) {
        if ((aa = this.buttons[ma].hint) > 0) {
          T = ᐃᐃ.ⵠΔⵠᐃⲆΔⵠ;
          Np(j, T, iq - T.width / 4, -36 - T.height * ⲆⵠΔⵠ.ⵠᐃᐃⲆⵠ(1 - aa) / 2, T.width / 2, T.height / 2);
        }
        var aa = this.buttons[na].hint;
        if (aa > 0) {
          T = ᐃᐃ.ⵠΔΔᐃⲆΔᐃ;
          Np(j, T, iq - T.width / 4, -36 - ⲆⵠΔⵠ.ⵠᐃᐃⲆⵠ(1 - aa) * T.height / 2, T.width / 2, T.height / 2);
        }
        if ((aa = this.buttons[oa].hint) > 0) {
          T = ᐃᐃ.ⲆⲆⵠᐃΔΔΔ;
          Np(j, T, iq - T.width / 4, -36 - ⲆⵠΔⵠ.ⵠᐃᐃⲆⵠ(1 - aa) * T.height / 2, T.width / 2, T.height / 2);
        }
        if ((aa = this.buttons[ra].hint) > 0) {
          T = ᐃᐃ.ΔᐃᐃᐃⵠᐃΔ;
          Np(j, T, iq - T.width / 4, -36 - T.height * ⲆⵠΔⵠ.ⵠᐃᐃⲆⵠ(1 - aa) / 2, T.width / 2, T.height / 2);
        }
        if ((aa = this.buttons[qa].hint) > 0) {
          T = ᐃᐃ.ΔⵠΔΔΔΔⵠ;
          Np(j, T, iq - T.width / 4, -36 - ⲆⵠΔⵠ.ⵠᐃᐃⲆⵠ(1 - aa) * T.height / 2, T.width / 2, T.height / 2);
        }
        if ((aa = this.buttons[pa].hint) > 0) {
          T = ᐃᐃ.ⲆⲆᐃⵠⲆΔΔ;
          Np(j, T, iq - T.width / 4, -36 - T.height * ⲆⵠΔⵠ.ⵠᐃᐃⲆⵠ(1 - aa) / 2, T.width / 2, T.height / 2);
        }
      }
      if (this.ⵠⲆΔⲆᐃ === 1 && Math.abs(Y - this.ⲆΔᐃᐃΔᐃⲆ) < 0.006) {
        j.globalAlpha = Math.min(1, this.ᐃⲆᐃⵠΔᐃΔ * 3);
        T = ᐃᐃ.ΔᐃΔΔⲆΔᐃ;
        j.save();
        j.translate(iq, 260);
        this.ᐃⲆᐃⵠΔᐃΔ += Yx;
        j.rotate(this.ᐃⲆᐃⵠΔᐃΔ);
        Np(j, T, -T.width / 2, -T.height / 2, T.width, T.height);
        j.restore();
        u = 1.05 + Math.cos(this.ᐃⲆᐃⵠΔᐃΔ * 5) * 0.05;
        if (this.ᐃᐃⵠΔⵠⲆⵠ === 0) {
          var ba = u * (T = ΔⲆᐃΔ.ⵠⲆⵠⲆᐃ[this.ΔΔⲆⵠΔⲆᐃ].ⵠΔΔ).width;
          var ca = u * T.height;
          Np(j, T, iq - ba / 2, 260 - ca / 2, ba, ca);
        } else if (this.ᐃᐃⵠΔⵠⲆⵠ === 1) {
          ba = (T = ΔⲆᐃΔ.ⵠⲆⵠⲆᐃ[0].ⵠΔΔ).width * u;
          ca = T.height * u;
          Np(j, T, iq - ba / 2, 260 - ca / 2, ba, ca);
          ba = (T = ΔⲆᐃΔ.ᐃΔⲆⵠⵠ[this.ΔΔⲆⵠΔⲆᐃ].ⵠΔΔ).width * u;
          ca = T.height * u;
          Np(j, T, iq - ba / 2, 260 - ca / 2, ba, ca);
        } else if (this.ᐃᐃⵠΔⵠⲆⵠ === 2) {
          ba = u * (T = ΔⲆᐃΔ.Ⲇᐃᐃⵠ[this.ΔΔⲆⵠΔⲆᐃ].ⵠΔΔ).width;
          ca = u * T.height;
          Np(j, T, iq - ba / 2, 180 - ca / 2, ba, ca);
          ba = u * (T = ΔⲆᐃΔ.ⵠⲆⵠⲆᐃ[0].ⵠΔΔ).width;
          ca = T.height * u;
          Np(j, T, iq - ba / 2, 260 - ca / 2, ba, ca);
        } else if (this.ᐃᐃⵠΔⵠⲆⵠ === 3) {
          ba = (T = ΔⲆᐃΔ.ᐃᐃⲆᐃⲆ[this.ΔΔⲆⵠΔⲆᐃ].ⵠΔΔ).width * u;
          ca = T.height * u;
          j.save();
          j.translate(iq, 260);
          j.rotate(Math.PI);
          Np(j, T, -ba / 2, -ca / 2, ba, ca);
          j.restore();
        } else if (this.ᐃᐃⵠΔⵠⲆⵠ === 4) {
          ba = u * (T = ΔⲆᐃΔ.ⲆᐃⵠⲆⲆ[this.ΔΔⲆⵠΔⲆᐃ].ⵠΔΔ).width;
          ca = u * T.height;
          Np(j, T, iq - ba / 2, 260 - ca / 2, ba, ca);
        }
        T = this.ΔᐃᐃⵠΔΔⲆ;
        Np(j, T, iq - T.width / 4, 340, T.width / 2, T.height / 2);
        T = this.ΔᐃⲆⵠΔⲆⵠ;
        Np(j, T, iq - T.width / 4, 365, T.width / 2, T.height / 2);
        if (this.ᐃⲆᐃⵠΔᐃΔ > 6) {
          this.ⵠⲆΔⲆᐃ = 0;
          V(c);
        }
        j.globalAlpha = 1;
      }
      Rx.alert.ⲆⵠⵠΔ("#FFF", "#000");
      if (w.waiting) {
        this.ⵠⵠⲆΔⵠΔᐃ.ⲆⵠⵠΔ();
      }
    };
    var u = 0;
    var C = Math.pow(2, u++);
    var d = Math.pow(2, u++);
    this.ⲆⵠᐃΔⵠ = d;
    var v = Math.pow(2, u++);
    var m = Math.pow(2, u++);
    var c = Math.pow(2, u++);
    var p = Math.pow(2, u++);
    var D = Math.pow(2, u++);
    var A = Math.pow(2, u++);
    this.ⵠᐃΔΔⲆ = A;
    var y = Math.pow(2, u++);
    var k = Math.pow(2, u++);
    var x = Math.pow(2, u++);
    var E = Math.pow(2, u++);
    var F = Math.pow(2, u++);
    var B = Math.pow(2, u++);
    var G = Math.pow(2, u++);
    var I = Math.pow(2, u++);
    var J = Math.pow(2, u++);
    var L = Math.pow(2, u++);
    var M = Math.pow(2, u++);
    var q = Math.pow(2, u++);
    var N = Math.pow(2, u++);
    var O = Math.pow(2, u++);
    var H = Math.pow(2, u++);
    var P = Math.pow(2, u++);
    var Q = Math.pow(2, u++);
    this.ΔⵠⵠⲆⲆ = Q;
    var K = Math.pow(2, u++);
    this.ⲆⵠⲆⲆⲆ = K;
    var R = Math.pow(2, u++);
    this.ⵠᐃⲆᐃⵠ = R;
    var S = Math.pow(2, u++);
    function T(a, b, c) {
      for (var d = 0; w.ⵠᐃⲆΔ.length > d; d++) {
        if (w.ⵠᐃⲆΔ[d].view & a) {
          w.ⵠᐃⲆΔ[d].active = b;
        }
      }
      for (d = 0; d < w.buttons.length; d++) {
        if (w.buttons[d].view & a) {
          w.buttons[d].info.active = b;
        }
      }
      for (d = 0; d < w.ΔΔΔΔⵠ.length; d++) {
        if ((w.ΔΔΔΔⵠ[d].view & a) !== 0) {
          w.ΔΔΔΔⵠ[d].style.display = c;
        }
      }
    }
    this.ᐃⲆΔΔΔ = C;
    function U() {
      var b = Number(ΔⵠⵠⲆ.get("starve_crate"));
      var c = Number(ΔⵠⵠⲆ.get("starve_dead"));
      var d = Number(ΔⵠⵠⲆ.get("starve_book"));
      var e = Number(ΔⵠⵠⲆ.get("starve_bag"));
      var f = Number(ΔⵠⵠⲆ.get("starve_skin"));
      var g = Number(ΔⵠⵠⲆ.get("starve_accessory"));
      if (Px.unlock.ⵠᐃᐃⲆ[Px.ⵠᐃᐃⲆ] <= 0) {
        Px.ⵠᐃᐃⲆ = Px.unlock.ⵠᐃᐃⲆ[f] > 0 ? f : 0;
      }
      if (Px.unlock.ᐃⵠΔⵠⵠ[Px.ᐃⵠΔⵠⵠ] <= 0) {
        Px.ᐃⵠΔⵠⵠ = Px.unlock.ᐃⵠΔⵠⵠ[d] > 0 ? d : 0;
      }
      if (Px.unlock.ΔⲆⲆⲆⵠ[Px.ΔⲆⲆⲆⵠ] <= 0) {
        Px.ΔⲆⲆⲆⵠ = Px.unlock.ΔⲆⲆⲆⵠ[c] > 0 ? c : 0;
      }
      if (Px.unlock.ⵠᐃⵠⲆᐃ[Px.ⵠᐃⵠⲆᐃ] <= 0) {
        Px.ⵠᐃⵠⲆᐃ = Px.unlock.ⵠᐃⵠⲆᐃ[b] > 0 ? b : 0;
      }
      if (Px.unlock.ᐃⲆⵠⲆⵠ[Px.ᐃⲆⵠⲆⵠ] <= 0) {
        Px.ᐃⲆⵠⲆⵠ = Px.unlock.ᐃⲆⵠⲆⵠ[g] > 0 ? g : 0;
      }
      if (Px.unlock.ⵠΔᐃΔᐃ[Px.ⵠΔᐃΔᐃ] <= 0) {
        Px.ⵠΔᐃΔᐃ = Px.unlock.ⵠΔᐃΔᐃ[e] > 0 ? e : 0;
      }
    }
    function V(a) {
      if (w.ⵠⲆᐃⲆⲆⵠⵠ !== false) {
        T(y, ha, "none");
        T(k, ha, "none");
        U();
        if (a !== w.ᐃⲆΔΔΔ && w.ⵠⲆΔⲆᐃ < 1) {
          w.ᐃⲆⲆⲆⵠ.style.display = C === a || c === a || a === d || D === a || m === a || a === p ? "inline-block" : "none";
          T(w.ᐃⲆΔΔΔ, ha, "none");
          w.ᐃⲆΔΔΔ = a;
          T(w.ᐃⲆΔΔΔ, ia, "inline-block");
        }
      }
    }
    function W(a, b, c) {
      const d = new XMLHttpRequest();
      d.open("GET", a);
      d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      d.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          if (sk !== b) {
            b(d.responseText);
          }
        } else if (this.readyState == 4 && c !== Yg) {
          c();
        }
      };
      d.send();
    }
    function X() {
      U();
      if (_x % 2) {
        console.log(jn);
        Mx.connect();
      } else {
        console.log(Rr);
        if (oc.Widget.isBlocked === 1) {
          oc.Widget.createAdPlayer(Mx.connect.bind(Mx), Mx.connect.bind(Mx));
        } else {
          oc.Widget.preroll();
          oc.Widget.play = Mx.connect.bind(Mx);
        }
      }
    }
    function Y(a) {
      if (Rx.ᐃᐃΔΔⵠΔⵠ !== undefined && Rx.ᐃᐃΔⵠⵠⲆⵠ !== undefined && Rx.ⲆⵠΔΔⵠᐃᐃ !== undefined && Rx.ᐃⵠᐃᐃⵠⲆᐃ !== undefined) {
        a();
      }
    }
    this.ⲆⵠⲆᐃⵠᐃⵠ = 0;
    this.ⲆⵠⲆᐃ = V;
    this.ⵠᐃᐃΔᐃⲆᐃ = function (j, a) {
      let e = 0;
      let b = "0";
      if (sy) {
        b = sy + "0";
      }
      if (Rx.ᐃᐃΔΔⵠΔⵠ) {
        Y(j);
      } else {
        W(`${by}token?id=${b}`, function (b) {
          if (e === 1) {
            return;
          }
          const c = b.split("_");
          const d = c[0] + "_";
          const f = Number(c[1]);
          const a = Math.abs(function (a) {
            return dn(a, 8260, 46947, 8004, 37330, 5330);
          }(f));
          Rx.ᐃᐃΔΔⵠΔⵠ = d + a;
          Y(j);
        }, function () {
          if (e !== 1) {
            if (a === 1) {
              e = 1;
              j();
              return;
            } else {
              w.waiting = false;
              return;
            }
          }
        });
      }
      W(`${dy}let`, function (k) {
        if (e === 1) {
          return;
        }
        k = k.split(":");
        var q = 169;
        var t = 53;
        if (t === 6) {
          t = 63;
        }
        if (q > 5) {
          q = 117;
        }
        {
          var x = 208;
          if (x > 7) {
            x = 59;
          }
          if (37 < 249) {
            213;
          }
          const a = k[0].split("_");
          const c = a[0] + "_";
          ({}).ΔΔⵠⲆᐃᐃᐃⲆΔ = 14;
          0;
          var A = 112;
          if (A >= 13) {
            A = 117;
          }
          const e = Number(a[1]);
          22 .ⲆⲆᐃⵠᐃᐃⵠᐃⵠ = 10;
          const f = Math.abs(ao(e));
          var B = 28;
          if (B === 5) {
            B = 3;
          }
          Rx.ᐃᐃΔⵠⵠⲆⵠ = c + f;
          const g = 49;
          const h = 44;
          Math.floor(44[h.ⲆⵠⵠΔᐃΔΔ]);
          if (234 >= 146) {
            17;
          }
          if (12 >= 214) {
            0;
          }
          var D = 195;
          if (D > 11) {
            D = 175;
          }
          if (101 < 126) {
            248;
          }
          if (40 === 83) {
            192;
          }
          g.ⲆᐃᐃΔΔΔΔᐃⵠ = 6;
          const b = 177;
          Math.floor(177[b.ᐃΔΔⲆᐃΔΔ]);
          var E = 118;
          if (E > 5) {
            E = 38;
          }
          if (60 == 212) {
            177;
          }
          var F = 221;
          if (F >= 0) {
            F = 243;
          }
          Rx.ⵠΔⵠΔⵠΔᐃ = f;
          ({}).ⲆᐃⲆᐃⲆⲆΔΔΔ = 9;
        }
        {
          const b = k[1].split("_");
          var G = 71;
          var H = 56;
          172 .ⲆᐃⲆⲆⲆⲆΔⲆⵠ = 2;
          if (H > 10) {
            H = 178;
          }
          if (G >= 6) {
            G = 216;
          }
          var I = 168;
          if (204 >= 241) {
            151;
          }
          if (I === 4) {
            I = 135;
          }
          var J = 196;
          if (J === 3) {
            J = 28;
          }
          var K = 169;
          var L = 115;
          if (L > 1) {
            L = 153;
          }
          if (115 <= 59) {
            89;
          }
          ({}).ᐃΔΔΔⵠᐃᐃΔⲆ = 11;
          if (K === 2) {
            K = 22;
          }
          const c = b[0] + "_";
          var M = 143;
          if (M > 8) {
            M = 33;
          }
          var N = 120;
          if (N == 14) {
            N = 123;
          }
          const d = Number(b[1]);
          82;
          const e = Math.abs(sb(d));
          var O = 213;
          if (O > 11) {
            O = 90;
          }
          Rx.ⲆⵠΔΔⵠᐃᐃ = c + e;
          var Q = 243;
          if (Q >= 14) {
            Q = 32;
          }
          Rx.ᐃΔΔΔⵠⵠⲆΔⵠ = e;
          const f = 166;
          var R = 150;
          const a = 236;
          Math.floor(236[a.ᐃⲆᐃΔΔᐃΔ]);
          if (203 === 163) {
            70;
          }
          if (R == 12) {
            R = 218;
          }
          var S = 48;
          if (S >= 6) {
            S = 78;
          }
          Math.floor(166[f.ΔᐃᐃⲆΔⲆⵠ]);
        }
        var U = 211;
        if (U >= 2) {
          U = 130;
        }
        Math.floor(187[187 .ᐃⵠΔΔᐃΔᐃ]);
        {
          const a = k[2].split("_");
          const b = a[0] + "_";
          const c = Number(a[1]);
          if (65 > 201) {
            132;
          }
          const d = Math.abs(sb(c));
          var V = 226;
          if (V == 11) {
            V = 242;
          }
          0;
          Rx.ᐃⵠᐃᐃⵠⲆᐃ = b + d;
          Rx.ⲆⲆⲆⲆⵠᐃΔᐃⲆ = d;
          if (39 === 75) {
            38;
          }
          if (217 == 6) {
            196;
          }
        }
        Y(j);
      }, function () {
        if (e !== 1) {
          if (a === 1) {
            e = 1;
            j();
            return;
          } else {
            w.waiting = false;
            return;
          }
        }
      });
    };
    this.ᐃΔⵠᐃΔⵠᐃ = function () {
      if (w.waiting === false) {
        Rx.reconnect.enabled = co;
        w.waiting = Xs;
        w.ⵠᐃᐃΔᐃⲆᐃ(X);
      }
    };
    var Z = 1;
    var _ = 2;
    var aa = 4;
    var ba = 8;
    var ca = 16;
    var ea = 32;
    var fa = 1;
    var ha = 0;
    var ia = 1;
    if (oc.innerWidth < 1300) {
      this.ᐃΔΔΔΔ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ia,
        position: aa | Z,
        view: C,
        translate: {
          ⵠⲆⲆΔᐃ: 200,
          ᐃⲆΔⲆⵠ: 184,
          x: 0,
          y: 0
        }
      };
    } else {
      this.ᐃΔΔΔΔ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ia,
        position: aa | ca,
        view: C,
        translate: {
          x: 0,
          ⵠⲆⲆΔᐃ: -180,
          y: 0,
          ᐃⲆΔⲆⵠ: 184
        }
      };
    }
    this.ᐃΔΔΔΔ.id.addEventListener("keyup", function (a) {
      a.preventDefault();
      if (a.keyCode == 13 && !w.waiting && !w.ⵠⵠᐃⲆⵠⲆⵠΔΔ) {
        w.ᐃΔⵠᐃΔⵠᐃ();
      }
    });
    this.ᐃΔΔΔΔ.input.value = ΔⵠⵠⲆ.get("starve_nickname") ? ΔⵠⵠⲆ.get("starve_nickname") : "";
    this.ⵠⵠⵠᐃᐃΔΔᐃⵠ = {
      id: document.getElementById("account_nickname_block"),
      style: document.getElementById("account_nickname_block").style,
      input: document.getElementById("account_nickname_input"),
      active: ha,
      position: aa | ca,
      view: d,
      translate: {
        ⵠⲆⲆΔᐃ: -122,
        x: 0,
        y: 0,
        ᐃⲆΔⲆⵠ: 110
      }
    };
    if (oc.innerWidth < 1300) {
      this.ⲆⵠⵠⲆⵠ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ia,
        position: aa | Z,
        view: C,
        translate: {
          y: 0,
          ᐃⲆΔⲆⵠ: 225,
          x: 0,
          ⵠⲆⲆΔᐃ: 208
        }
      };
    } else {
      this.ⲆⵠⵠⲆⵠ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ia,
        position: aa | ca,
        view: C,
        translate: {
          y: 0,
          ᐃⲆΔⲆⵠ: 225,
          ⵠⲆⲆΔᐃ: -180,
          x: 0
        }
      };
    }
    this.ⲆᐃᐃⲆ = {
      id: document.getElementById("leaderboard"),
      style: document.getElementById("leaderboard").style,
      active: ha,
      position: aa | ca,
      view: D,
      translate: {
        x: 0,
        ⵠⲆⲆΔᐃ: -294.5,
        ᐃⲆΔⲆⵠ: 190,
        y: 0
      }
    };
    this.ᐃᐃᐃΔΔⵠⲆᐃⵠ = {
      id: document.getElementById("stats_box"),
      style: document.getElementById("stats_box").style,
      active: ha,
      position: aa | ca,
      view: d,
      translate: {
        x: 0,
        ⵠⲆⲆΔᐃ: 125,
        ᐃⲆΔⲆⵠ: 187,
        y: 0
      }
    };
    this.ⵠᐃᐃⵠⵠᐃΔⵠΔ = {
      id: document.getElementById("serverAddressBlock"),
      style: document.getElementById("serverAddressBlock").style,
      input: document.getElementById("serverAddressInput"),
      active: ha,
      position: aa | ca,
      view: R,
      translate: {
        ⵠⲆⲆΔᐃ: -220,
        ᐃⲆΔⲆⵠ: 350,
        x: 0,
        y: 0
      }
    };
    u = 0;
    this.ΔΔΔΔⵠ = [];
    this.ΔΔΔΔⵠ[u++] = this.ᐃΔΔΔΔ;
    this.ΔΔΔΔⵠ[u++] = this.ⲆⵠⵠⲆⵠ;
    this.ΔΔΔΔⵠ[u++] = this.ⲆᐃᐃⲆ;
    this.ΔΔΔΔⵠ[u++] = this.ⵠⵠⵠᐃᐃΔΔᐃⵠ;
    this.ΔΔΔΔⵠ[u++] = this.ᐃᐃᐃΔΔⵠⲆᐃⵠ;
    this.ΔΔΔΔⵠ[u++] = this.ⵠᐃᐃⵠⵠᐃΔⵠΔ;
    u = 0;
    this.ⵠᐃⲆΔ = [];
    this.ⵠᐃⲆΔ[u++] = pf(ᐃᐃ.ᐃΔΔⲆⵠⲆᐃ, ia, 0, 0, Z);
    this.ⵠᐃⲆΔ[u++] = pf(ᐃᐃ.ⵠᐃᐃΔᐃᐃΔ, ha, 0, 0, Z);
    this.ⵠᐃⲆΔ[u++] = pf(ᐃᐃ.ⲆⲆΔⲆⲆᐃᐃ, ha, 0, 0, Z);
    this.ⵠᐃⲆΔ[u++] = pf(ᐃᐃ.ⲆᐃΔⲆᐃᐃⲆ, ha, 0, 0, Z);
    this.ⵠᐃⲆΔ[u++] = pf(ᐃᐃ.ⲆⵠⲆⵠⵠΔⲆ, ha, 0, 0, Z);
    this.ⵠᐃⲆΔ[u++] = pf(ᐃᐃ.ⲆᐃᐃⲆᐃΔΔ, ha, 0, 0, Z);
    this.ⵠᐃⲆΔ[u++] = pf(ᐃᐃ.ⵠᐃᐃⵠΔⲆⵠ, ha, 0, 0, Z);
    this.ⵠᐃⲆΔ[u++] = pf(ᐃᐃ.ⵠᐃⲆᐃⲆᐃΔ, ha, 0, 0, Z);
    this.ⵠᐃⲆΔ[u++] = pf(ᐃᐃ.ᐃᐃⵠⵠᐃᐃⵠ, ha, 0, 0, Z);
    this.ⵠᐃⲆΔ[u++] = pf(ᐃᐃ.ΔᐃⲆⵠⲆΔᐃ, ha, 0, 0, Z);
    this.ⵠᐃⲆΔ[u++] = pf(ᐃᐃ.ⲆᐃᐃᐃᐃᐃⲆ, ha, 0, 0, Z);
    this.ⵠᐃⲆΔ[u++] = pf(ᐃᐃ.ⲆⲆⵠᐃΔᐃᐃ, ha, 0, 0, Z);
    this.ⵠᐃⲆΔ[u++] = pf(ᐃᐃ.ⵠΔⲆⵠΔⵠΔ, ha, 0, 0, Z);
    this.ⵠᐃⲆΔ[u++] = pf(ᐃᐃ.ⲆⵠΔⲆᐃᐃⲆ, ha, 0, 0, Z);
    this.ⵠᐃⲆΔ[u++] = pf(ᐃᐃ.ΔⵠⵠΔΔᐃᐃ, ha, 0, 0, Z);
    this.ⵠᐃⲆΔ[u++] = pf(ᐃᐃ.ΔⲆⵠⵠᐃⲆⵠ, ha, 0, 0, Z);
    this.ⵠᐃⲆΔ[u++] = pf(ᐃᐃ.ⵠᐃΔⲆⲆᐃⲆ, ha, 0, 0, Z);
    this.ⵠᐃⲆΔ[u++] = pf(ᐃᐃ.ⲆᐃⵠΔⵠⵠΔ, ha, 0, 0, Z);
    this.ⵠᐃⲆΔ[u++] = pf(ᐃᐃ.ⵠᐃⵠⵠᐃⲆΔ, ha, 0, 0, Z);
    if (oc.innerWidth < 1300) {
      this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ΔⲆᐃⲆᐃΔⲆ, ia, 200, 100, aa | Z);
    } else {
      this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ΔⲆᐃⲆᐃΔⲆ, ia, -753 / 4, 100, aa | ca);
    }
    this.ⵠᐃⲆΔ[u++].view = C;
    this.ⵠᐃⲆΔ[u++] = pf(ᐃᐃ.ᐃⵠⲆΔᐃᐃⵠ, ia, 403, -10, _);
    if (oc.innerWidth > 1300) {
      this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ⵠΔⲆᐃⲆⵠᐃ, ia, -885 / 4, -319 / 2, ba | ca);
      this.ⵠᐃⲆΔ[u++].view = C;
    }
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ⲆᐃᐃⵠΔⵠⵠ, ha, -1293 / 4, 100, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = d;
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ᐃΔᐃᐃᐃᐃΔ, ha, -1425 / 4, 100, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = m;
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ΔᐃᐃⲆⲆᐃΔ, ha, -905 / 4, 50, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = v;
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ΔⵠⲆΔⵠᐃΔ, ha, -402, 130, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = c;
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ⵠΔⲆᐃⵠᐃⲆ, ha, -1117 / 4, 130, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = Q;
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ᐃΔⵠΔΔΔⵠ, ha, -1222 / 4, 130, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = K;
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ⲆⵠᐃᐃΔᐃⲆ, ha, -1222 / 4, 100, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = R;
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ΔΔⵠΔⲆΔᐃ, ha, -ᐃᐃ.ΔΔⵠΔⲆΔᐃ.width / 4 - 350, -15, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = S;
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ΔⵠΔᐃⵠⵠⲆ, ha, -374.25, 110, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = p;
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ᐃᐃⲆᐃΔᐃᐃ, ha, -1226 / 4, 100, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = D;
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ΔΔⵠⵠⲆΔⵠ, ha, -345.25, 80, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = A;
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ᐃᐃᐃⲆᐃΔⵠ, ha, -1542 / 4, 150, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = x;
    var ja = 360 / 100;
    var ka = this.ᐃΔΔᐃᐃⲆⲆ([["#25c5d6", ja * 3], ["#e2cf27", ja * 10], ["#afac98", ja * 30], ["#d88e23", ja * 57]]);
    this.ⵠᐃⲆΔ[u] = pf(ka, ha, -ka.width / 4, 178, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = x;
    this.ⵠⲆⵠΔⲆᐃⲆΔᐃ = function (b, c, d) {
      var e;
      w.ⵠⲆΔⲆᐃ = 1;
      w.ΔⵠⵠᐃⵠΔΔ = 0;
      w.ᐃⲆᐃⵠΔᐃΔ = 0;
      w.ⲆΔᐃᐃΔᐃⲆ = b;
      w.ᐃᐃⵠΔⵠⲆⵠ = c;
      var f = 0;
      if (c === 0) {
        for (f = 0; f < ΔⲆᐃΔ.ⵠⲆⵠⲆᐃ.length && d !== ΔⲆᐃΔ.ⵠⲆⵠⲆᐃ[f].id; f++);
        e = ΔⲆᐃΔ.ⵠⲆⵠⲆᐃ[f];
        w.unlock.ⵠᐃᐃⲆ[f] = 1;
      } else if (c === 1) {
        for (f = 0; ΔⲆᐃΔ.ᐃΔⲆⵠⵠ.length > f && ΔⲆᐃΔ.ᐃΔⲆⵠⵠ[f].id !== d; f++);
        e = ΔⲆᐃΔ.ᐃΔⲆⵠⵠ[f];
        w.unlock.ᐃⲆⵠⲆⵠ[f] = 1;
      } else if (c === 2) {
        for (f = 0; ΔⲆᐃΔ.Ⲇᐃᐃⵠ.length > f && ΔⲆᐃΔ.Ⲇᐃᐃⵠ[f].id !== d; f++);
        e = ΔⲆᐃΔ.Ⲇᐃᐃⵠ[f];
        w.unlock.ⵠΔᐃΔᐃ[f] = 1;
      } else if (c === 3) {
        for (f = 0; ΔⲆᐃΔ.ᐃᐃⲆᐃⲆ.length > f && d !== ΔⲆᐃΔ.ᐃᐃⲆᐃⲆ[f].id; f++);
        e = ΔⲆᐃΔ.ᐃᐃⲆᐃⲆ[f];
        w.unlock.ᐃⵠΔⵠⵠ[f] = 1;
      } else if (c === 4) {
        for (f = 0; ΔⲆᐃΔ.ⲆᐃⵠⲆⲆ.length > f && d !== ΔⲆᐃΔ.ⲆᐃⵠⲆⲆ[f].id; f++);
        e = ΔⲆᐃΔ.ⲆᐃⵠⲆⲆ[f];
        w.unlock.ⵠᐃⵠⲆᐃ[f] = 1;
        w.unlock.ΔⲆⲆⲆⵠ[f] = 1;
      }
      w.ΔΔⲆⵠΔⲆᐃ = f;
      w.ΔᐃⲆⵠΔⲆⵠ = ff("by " + e.ΔᐃⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, undefined, 30, 24, undefined, tq, md, Aj, "#000000", 24);
      w.ΔᐃᐃⵠΔΔⲆ = ff(e.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, undefined, 30, 24, os, undefined, Yg, undefined, "#000000", 20);
    };
    this.ⵠⲆΔⲆᐃ = 0;
    this.ΔⵠⵠᐃⵠΔΔ = 0;
    this.ⲆΔᐃᐃΔᐃⲆ = 0;
    this.ᐃᐃⵠΔⵠⲆⵠ = 0;
    this.ᐃⲆᐃⵠΔᐃΔ = 0;
    this.ΔᐃⲆⵠΔⲆⵠ = Rr;
    this.ΔᐃᐃⵠΔΔⲆ = Rr;
    var la = 197;
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ⵠⲆⵠⵠⲆⵠⵠ, ha, -385.5, 150, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = G;
    ka = this.ᐃΔΔᐃᐃⲆⲆ([["#d45ce5", ja * 3], ["#25c5d6", ja * 10], ["#e2cf27", ja * 30], ["#afac98", ja * 57]]);
    this.ⵠᐃⲆΔ[u] = pf(ka, ha, -ka.width / 4, 178, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = G;
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ⵠⲆΔⵠⲆⲆⵠ, ha, -1542 / 4, 150, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = F;
    ka = this.ᐃΔΔᐃᐃⲆⲆ([["#d33a2a", ja * 3], ["#d45ce5", ja * 10], ["#25c5d6", ja * 30], ["#e2cf27", ja * 57]]);
    this.ⵠᐃⲆΔ[u] = pf(ka, ha, -ka.width / 4, 178, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = F;
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ⵠⵠⵠΔⲆΔⵠ, ha, -385.5, 150, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = B;
    ka = this.ᐃΔΔᐃᐃⲆⲆ([["#25c5d6", ja * 3], ["#e2cf27", ja * 10], ["#afac98", ja * 30], ["#d88e23", ja * 57]]);
    this.ⵠᐃⲆΔ[u] = pf(ka, ha, -ka.width / 4, 178, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = B;
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.Ⲇᐃᐃⵠᐃᐃⵠ, ha, -1542 / 4, 150, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = E;
    ka = this.ᐃΔΔᐃᐃⲆⲆ([["#d45ce5", ja * 3], ["#25c5d6", ja * 10], ["#e2cf27", ja * 30], ["#afac98", ja * 57]]);
    this.ⵠᐃⲆΔ[u] = pf(ka, ha, -ka.width / 4, 178, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = E;
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ΔⲆᐃⲆⲆΔᐃ, ha, -1542 / 4, 150, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = I;
    ka = this.ᐃΔΔᐃᐃⲆⲆ([["#d33a2a", ja * 3], ["#d45ce5", ja * 10], ["#25c5d6", ja * 30], ["#e2cf27", ja * 57]]);
    this.ⵠᐃⲆΔ[u] = pf(ka, ha, -ka.width / 4, 178, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = I;
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ⵠⲆⲆⵠᐃΔΔ, ha, -341.5, 100, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = J;
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ⵠⲆⲆΔᐃΔΔ, ha, -1366 / 4, 100, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = N;
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ΔⵠⵠᐃⲆⲆΔ, ha, -1366 / 4, 100, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = M;
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ᐃΔⵠⵠⲆⲆᐃ, ha, -1366 / 4, 100, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = q;
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ᐃΔⵠΔⲆΔΔ, ha, -1366 / 4, 100, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = L;
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ᐃᐃΔΔⵠⲆᐃ, ha, -341.5, 100, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = O;
    ᐃⵠⲆᐃΔᐃⲆ = u++;
    this.ⵠᐃⲆΔ[ᐃⵠⲆᐃΔᐃⲆ] = pf(ᐃᐃ.ᐃⵠⲆᐃΔᐃⲆ, ha, 484, 0, aa);
    ⲆⵠⲆⲆᐃΔΔ = u++;
    this.ⵠᐃⲆΔ[ⲆⵠⲆⲆᐃΔΔ] = pf(ᐃᐃ.ⲆⵠⲆⲆᐃΔΔ, ha, 812.5, 0, aa);
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ⵠⲆᐃⵠᐃΔᐃ, ha, -189.5, -5, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = k;
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ⲆΔⲆⵠΔᐃⵠ, ha, -758 / 4, -5, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = y;
    ΔᐃΔΔΔᐃΔ = u++;
    this.ⵠᐃⲆΔ[ΔᐃΔΔΔᐃΔ] = pf(ᐃᐃ.ΔΔᐃᐃᐃⲆⵠ, ia, 93, 30, aa);
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ⵠⲆΔᐃⲆΔⵠ, ha, -173, 110, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = H;
    this.ⵠᐃⲆΔ[u] = pf(ᐃᐃ.ⲆⵠⲆⲆⲆΔⲆ, ha, -173, 110, aa | ca);
    this.ⵠᐃⲆΔ[u++].view = P;
    u = 0;
    this.buttons = [];
    this.buttons[u] = zf(50, 57, 0, [ᐃᐃ.ⵠⲆⵠⲆᐃΔⵠ, ᐃᐃ.ⲆᐃᐃᐃⲆᐃⲆ, ᐃᐃ.ΔΔΔⲆⵠᐃⲆ], 1, 0, function () {
      if (w.ⲆᐃᐃᐃΔ()) {
        V(A);
      } else {
        V(v);
      }
    }, 320, 0, Z, ia);
    u++;
    if (oc.innerWidth < 1300) {
      this.buttons[u] = zf(202, 97, 0, [ᐃᐃ.ⵠΔⲆⵠⵠⵠⲆ, ᐃᐃ.ΔᐃΔⵠⵠᐃΔ, ᐃᐃ.ΔⵠᐃⵠΔⵠᐃ], 1, 0, this.ᐃΔⵠᐃΔⵠᐃ, 462, 235, aa | Z, ia);
    } else {
      this.buttons[u] = zf(202, 97, 0, [ᐃᐃ.ⵠΔⲆⵠⵠⵠⲆ, ᐃᐃ.ΔᐃΔⵠⵠᐃΔ, ᐃᐃ.ΔⵠᐃⵠΔⵠᐃ], 1, 0, this.ᐃΔⵠᐃΔⵠᐃ, 74, 235, aa | ca, ia);
    }
    this.buttons[u].view = C;
    u++;
    if (oc.innerWidth > 1300) {
      this.buttons[u] = zf(355, 168, 0, [ᐃᐃ.ᐃᐃᐃᐃⲆⵠᐃ, ᐃᐃ.ᐃᐃᐃᐃⲆⵠᐃ, ᐃᐃ.ᐃᐃᐃᐃⲆⵠᐃ], 1, 0, function () {
        oc.open("./changelog.html", "_blank");
      }, -195, -115, ba | ca, ia);
      this.buttons[u++].view = C;
      this.buttons[u] = zf(355, 168, 0, [ᐃᐃ.ⵠⵠⵠᐃⵠᐃⲆ, ᐃᐃ.ⵠⵠⵠᐃⵠᐃⲆ, ᐃᐃ.ⵠⵠⵠᐃⵠᐃⲆ], 1, 0, function () {
        oc.open("https://taming.io", "_blank");
      }, 20, -115, ba | ca, ia);
      this.buttons[u++].view = C;
    }
    this.buttons[u++] = zf(80, 80, 0, [ᐃᐃ.ᐃⲆⵠΔⵠⲆᐃ, ᐃᐃ.ⵠΔⵠᐃⲆⲆᐃ, ᐃᐃ.ⵠⲆΔΔᐃᐃᐃ], 1, 0, function () {
      oc.open("https://lapamauve.creator-spring.com/", "_blank");
    }, 380, 10, _, ia);
    this.buttons[u++] = zf(80, 80, 0, [ᐃᐃ.ᐃΔΔΔⲆⵠⵠ, ᐃᐃ.ⲆⲆᐃΔᐃΔⲆ, ᐃᐃ.ΔᐃⵠⲆⲆⲆΔ], 1, 0, function () {
      oc.open("https://discord.gg/starveio", "_blank");
    }, 330, 10, _, ia);
    this.buttons[u++] = zf(80, 80, 0, [ᐃᐃ.ⲆΔΔᐃᐃΔᐃ, ᐃᐃ.ⵠᐃΔⲆᐃⵠⲆ, ᐃᐃ.ᐃᐃⵠΔⲆᐃΔ], 1, 0, function () {
      oc.open("https://reddit.com/r/starveio", "_blank");
    }, 280, 10, _, ia);
    this.buttons[u++] = zf(80, 80, 0, [ᐃᐃ.ΔⵠᐃⲆⵠⵠᐃ, ᐃᐃ.ᐃⲆⲆΔᐃΔΔ, ᐃᐃ.ⲆⵠⲆⲆⲆⲆᐃ], 1, 0, function () {
      oc.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, 230, 10, _, ia);
    this.buttons[u++] = zf(80, 80, 0, [ᐃᐃ.ᐃᐃΔᐃΔⵠΔ, ᐃᐃ.ΔΔᐃᐃⲆᐃⵠ, ᐃᐃ.ᐃᐃᐃᐃΔᐃⲆ], 1, 0, function () {
      oc.open("https://www.facebook.com/LapaMauve/", "_blank");
    }, 155, 10, _, ia);
    this.buttons[u++] = zf(80, 80, 0, [ᐃᐃ.ⵠⲆΔⵠⲆᐃᐃ, ᐃᐃ.ᐃΔΔΔⲆⲆⲆ, ᐃᐃ.ⵠⵠᐃⲆⲆⵠᐃ], 1, 0, function () {
      oc.open("https://twitter.com/lapamauve", "_blank");
    }, 105, 10, _, ia);
    this.buttons[u++] = zf(80, 80, 0, [ᐃᐃ.ⵠᐃⲆⵠⲆΔⵠ, ᐃᐃ.ⵠΔΔⵠΔⵠⵠ, ᐃᐃ.ΔΔᐃΔΔΔⲆ], 1, 0, function () {
      oc.open("https://www.youtube.com/@lapamauveofficial", "_blank");
    }, 55, 10, _, ia);
    ΔⲆᐃⲆⵠⲆⲆ = u++;
    this.buttons[ΔⲆᐃⲆⵠⲆⲆ] = zf(232, 142, 0, [ᐃᐃ.ⵠΔⵠⲆⲆⲆⲆ, ᐃᐃ.ᐃᐃᐃᐃᐃΔᐃ, ᐃᐃ.ⵠᐃᐃⵠⲆΔᐃ], 1, 0, function () {
      V(D);
      My(Px.ΔⵠⵠΔⲆⲆᐃ, Px.ᐃⵠᐃΔΔⲆⵠ, Px.ΔⲆΔᐃᐃΔΔ, Px.ⲆⲆΔΔⵠᐃⵠ);
    }, -5, 573, Z, ia);
    this.buttons[u++] = zf(236, 165, 0, [ᐃᐃ.ⵠᐃⵠⵠⲆⵠᐃ, ᐃᐃ.ⵠᐃⵠⵠⲆⵠᐃ, ᐃᐃ.ⵠᐃⵠⵠⲆⵠᐃ], 1, fa, function () {
      V(D);
    }, -5, 566, Z, ia);
    ⲆΔⵠᐃⲆⲆᐃ = u++;
    this.buttons[ⲆΔⵠᐃⲆⲆᐃ] = zf(236, 165, 0, [ᐃᐃ.ⲆΔⵠΔΔⵠΔ, ᐃᐃ.ⲆΔⲆᐃⲆⵠⵠ, ᐃᐃ.ΔΔⵠΔⲆⲆᐃ], 1, 0, function () {
      V(p);
    }, -5, 494, Z, ia);
    this.buttons[u++] = zf(236, 165, 0, [ᐃᐃ.ΔΔᐃⲆⵠΔⵠ, ᐃᐃ.ΔΔᐃⲆⵠΔⵠ, ᐃᐃ.ΔΔᐃⲆⵠΔⵠ], 1, fa, function () {
      V(p);
    }, -5, 494, Z, ia);
    ⵠΔⲆΔⲆᐃᐃ = u++;
    this.buttons[ⵠΔⲆΔⲆᐃᐃ] = zf(236, 165, 0, [ᐃᐃ.ⲆΔⵠΔΔⵠΔ, ᐃᐃ.ⲆΔⲆᐃⲆⵠⵠ, ᐃᐃ.ΔΔⵠΔⲆⲆᐃ], 1, 0, function () {
      if (w.ⲆᐃᐃᐃΔ()) {
        if (Px.ΔᐃᐃⲆⲆᐃⵠ - Date.now() > 0) {
          V(R);
        } else {
          V(Q);
        }
      } else {
        V(v);
      }
    }, -5, 415, Z, ia);
    this.buttons[u++] = zf(236, 165, 0, [ᐃᐃ.ΔⵠᐃⲆⲆⵠΔ, ᐃᐃ.ΔⵠᐃⲆⲆⵠΔ, ᐃᐃ.ΔⵠᐃⲆⲆⵠΔ], 1, fa, function () {
      if (w.ⲆᐃᐃᐃΔ()) {
        if (Px.ΔᐃᐃⲆⲆᐃⵠ - Date.now() > 0) {
          V(R);
        } else {
          V(Q);
        }
      } else {
        V(v);
      }
    }, -5, 415, Z, ia);
    ΔΔⲆᐃΔⵠⲆ = u++;
    this.buttons[ΔΔⲆᐃΔⵠⲆ] = zf(236, 165, 0, [ᐃᐃ.ⲆΔⵠΔΔⵠΔ, ᐃᐃ.ⲆΔⲆᐃⲆⵠⵠ, ᐃᐃ.ΔΔⵠΔⲆⲆᐃ], 1, 0, function () {
      V(c);
    }, -5, 336, Z, ia);
    this.buttons[u++] = zf(236, 165, 0, [ᐃᐃ.ⲆⲆⵠΔᐃⲆⵠ, ᐃᐃ.ⲆⲆⵠΔᐃⲆⵠ, ᐃᐃ.ⲆⲆⵠΔᐃⲆⵠ], 1, fa, function () {
      V(c);
    }, -5, 336, Z, ia);
    ΔⵠⲆΔᐃⵠⲆ = u++;
    this.buttons[ΔⵠⲆΔᐃⵠⲆ] = zf(236, 165, 0, [ᐃᐃ.ⲆΔⵠΔΔⵠΔ, ᐃᐃ.ⲆΔⲆᐃⲆⵠⵠ, ᐃᐃ.ΔΔⵠΔⲆⲆᐃ], 1, 0, function () {
      V(m);
    }, -5, 257, Z, ia);
    this.buttons[u++] = zf(236, 165, 0, [ᐃᐃ.ΔΔΔᐃⲆᐃⲆ, ᐃᐃ.ΔΔΔᐃⲆᐃⲆ, ᐃᐃ.ΔΔΔᐃⲆᐃⲆ], 1, fa, function () {
      V(m);
    }, -5, 257, Z, ia);
    ᐃΔΔᐃᐃᐃΔ = u++;
    this.buttons[ᐃΔΔᐃᐃᐃΔ] = zf(236, 165, 0, [ᐃᐃ.ⲆΔⵠΔΔⵠΔ, ᐃᐃ.ⲆΔⲆᐃⲆⵠⵠ, ᐃᐃ.ΔΔⵠΔⲆⲆᐃ], 1, 0, function () {
      V(C);
    }, -5, 178, Z, ia);
    this.buttons[u++] = zf(236, 165, 0, [ᐃᐃ.ΔΔⲆΔΔⲆΔ, ᐃᐃ.ΔΔⲆΔΔⲆΔ, ᐃᐃ.ΔΔⲆΔΔⲆΔ], 1, fa, function () {
      V(C);
    }, -5, 178, Z, ia);
    ᐃΔⲆⲆᐃᐃⵠ = u++;
    this.ᐃΔⲆⲆᐃᐃⵠ = ᐃΔⲆⲆᐃᐃⵠ;
    this.buttons[ᐃΔⲆⲆᐃᐃⵠ] = zf(324, 222, 0, [ᐃᐃ.ΔⲆΔⲆᐃΔⲆ, ᐃᐃ.ΔⲆⵠΔⵠⲆᐃ, ᐃᐃ.ΔⵠᐃⵠΔⲆⵠ], 1, 0, function () {
      V(v);
    }, 0, 70, Z, ia);
    ΔⲆᐃⵠⵠⵠᐃ = u++;
    ⲆᐃΔⲆⲆᐃᐃ = u++;
    this.ΔⲆᐃⵠⵠⵠᐃ = ΔⲆᐃⵠⵠⵠᐃ;
    this.ⲆᐃΔⲆⲆᐃᐃ = ⲆᐃΔⲆⲆᐃᐃ;
    this.buttons[ΔⲆᐃⵠⵠⵠᐃ] = zf(324, 222, 0, [ᐃᐃ.ⵠΔⵠⵠⵠⵠᐃ, ᐃᐃ.ⵠⲆⲆᐃⲆⵠⵠ, ᐃᐃ.ΔⲆⲆⵠⲆⲆⵠ], 1, 0, function () {
      V(d);
      sa(-1);
    }, 0, 70, Z, ha);
    this.buttons[ⲆᐃΔⲆⲆᐃᐃ] = zf(324, 222, 0, [ᐃᐃ.ΔΔΔᐃⲆΔᐃ, ᐃᐃ.ΔΔΔᐃⲆΔᐃ, ᐃᐃ.ΔΔΔᐃⲆΔᐃ], 1, fa, function () {
      V(d);
      sa(-1);
    }, 0, 70, Z, ha);
    if (Mx.ᐃⵠⵠⲆᐃⲆⲆ === 0) {
      var ma = u++;
      if (oc.innerWidth < 1300) {
        this.buttons[ma] = zf(266, 176, 0, [ᐃᐃ.ᐃⵠᐃΔⵠᐃⲆ, ᐃᐃ.ⲆⵠⲆΔΔⲆⲆ, ᐃᐃ.ⵠᐃⵠⲆᐃΔⵠ], 1, 0, function () {
          Mx.ᐃⲆⵠⵠⲆ(0);
        }, 150, 300, Z | aa, ia);
      } else {
        this.buttons[ma] = zf(266, 176, 0, [ᐃᐃ.ᐃⵠᐃΔⵠᐃⲆ, ᐃᐃ.ⲆⵠⲆΔΔⲆⲆ, ᐃᐃ.ⵠᐃⵠⲆᐃΔⵠ], 1, 0, function () {
          Mx.ᐃⲆⵠⵠⲆ(0);
        }, -340, 100, ca | aa, ia);
      }
      this.buttons[ma].view = C;
      this.buttons[ma].hint = 0;
      var na = u++;
      if (oc.innerWidth < 1300) {
        this.buttons[na] = zf(266, 176, 0, [ᐃᐃ.ᐃΔᐃⵠᐃΔⲆ, ᐃᐃ.ᐃΔⲆⲆⲆⵠⲆ, ᐃᐃ.ΔΔΔΔᐃΔⲆ], 1, 0, function () {
          Mx.ᐃⲆⵠⵠⲆ(4);
        }, 150, 400, Z | aa, ia);
      } else {
        this.buttons[na] = zf(266, 176, 0, [ᐃᐃ.ᐃΔᐃⵠᐃΔⲆ, ᐃᐃ.ᐃΔⲆⲆⲆⵠⲆ, ᐃᐃ.ΔΔΔΔᐃΔⲆ], 1, 0, function () {
          Mx.ᐃⲆⵠⵠⲆ(4);
        }, -340, 200, ca | aa, ia);
      }
      this.buttons[na].view = C;
      this.buttons[na].hint = 0;
      var oa = u++;
      if (oc.innerWidth < 1300) {
        this.buttons[oa] = zf(266, 176, 0, [ᐃᐃ.ⵠⵠᐃᐃᐃⵠᐃ, ᐃᐃ.ⵠⲆΔⵠⵠⲆΔ, ᐃᐃ.ⵠΔⵠⲆᐃⲆᐃ], 1, 0, function () {
          Mx.ᐃⲆⵠⵠⲆ(6);
        }, 450, 300, Z | aa, ia);
      } else {
        this.buttons[oa] = zf(266, 176, 0, [ᐃᐃ.ⵠⵠᐃᐃᐃⵠᐃ, ᐃᐃ.ⵠⲆΔⵠⵠⲆΔ, ᐃᐃ.ⵠΔⵠⲆᐃⲆᐃ], 1, 0, function () {
          Mx.ᐃⲆⵠⵠⲆ(6);
        }, -340, 300, ca | aa, ia);
      }
      this.buttons[oa].view = C;
      this.buttons[oa].hint = 0;
      var pa = u++;
      if (oc.innerWidth < 1300) {
        this.buttons[pa] = zf(266, 176, 0, [ᐃᐃ.ᐃᐃⵠⲆΔⲆᐃ, ᐃᐃ.ΔΔⵠᐃⵠᐃᐃ, ᐃᐃ.ΔⵠⵠⵠᐃⲆᐃ], 1, 0, function () {
          Mx.ᐃⲆⵠⵠⲆ(2);
        }, 300, 300, Z | aa, ia);
      } else {
        this.buttons[pa] = zf(266, 176, 0, [ᐃᐃ.ᐃᐃⵠⲆΔⲆᐃ, ᐃᐃ.ΔΔⵠᐃⵠᐃᐃ, ᐃᐃ.ΔⵠⵠⵠᐃⲆᐃ], 1, 0, function () {
          Mx.ᐃⲆⵠⵠⲆ(2);
        }, 204, 100, ca | aa, ia);
      }
      this.buttons[pa].view = C;
      this.buttons[pa].hint = 0;
      var qa = u++;
      if (oc.innerWidth < 1300) {
        this.buttons[qa] = zf(266, 176, 0, [ᐃᐃ.ⵠΔΔᐃⲆⵠⲆ, ᐃᐃ.ΔⲆⲆΔⵠΔⲆ, ᐃᐃ.ΔΔⵠΔΔⵠⵠ], 1, 0, function () {
          Mx.ᐃⲆⵠⵠⲆ(3);
        }, 300, 400, Z | aa, ia);
      } else {
        this.buttons[qa] = zf(266, 176, 0, [ᐃᐃ.ⵠΔΔᐃⲆⵠⲆ, ᐃᐃ.ΔⲆⲆΔⵠΔⲆ, ᐃᐃ.ΔΔⵠΔΔⵠⵠ], 1, 0, function () {
          Mx.ᐃⲆⵠⵠⲆ(3);
        }, 204, 200, ca | aa, ia);
      }
      this.buttons[qa].view = C;
      this.buttons[qa].hint = 0;
      var ra = u++;
      this.buttons[ra] = zf(266, 176, 0, [ᐃᐃ.ⵠⲆΔΔΔΔⲆ, ᐃᐃ.ⲆⲆⲆΔΔⵠᐃ, ᐃᐃ.ⵠᐃⲆⵠⲆⲆΔ], 1, 0, function () {
        Mx.ᐃⲆⵠⵠⲆ(7);
      }, oc.innerWidth < 1300 ? 450 : 204, oc.innerWidth < 1300 ? 400 : 300, (oc.innerWidth < 1300 ? Z : ca) | aa, ia);
      this.buttons[ra].view = C;
      this.buttons[ra].hint = 0;
    }
    function sa(b, c) {
      if (c !== undefined) {
        Px.ⵠΔⵠᐃⵠⵠⵠ = c;
        var d = Px.ⲆᐃΔⵠᐃⲆΔ[c];
        Px.ⵠⵠⵠⲆⵠ = d.score;
        Px.ᐃᐃΔᐃⵠ = d.kill;
        Px.ᐃⵠⵠⵠⵠⵠΔ = d.death;
        Px.time = d.time;
        Px.ᐃΔΔⲆⲆᐃΔ = d.bestScore;
        Px.ᐃᐃΔⵠΔⵠⲆ = d.bestKill;
        Px.ᐃΔΔⵠⲆⲆΔ = d.bestTime;
        Px.ΔⵠΔᐃⲆᐃᐃ = d.scoreTotal;
      }
      if (b === undefined) {
        b = Px.ⲆⲆΔᐃᐃᐃΔ;
      }
      Px.ⲆⲆΔᐃᐃᐃΔ = b;
      if (b >= 0) {
        document.getElementById("stats_box_time").innerHTML = Px.ᐃΔΔⵠⲆⲆΔ[b];
        document.getElementById("stats_box_kill").innerHTML = Px.ᐃᐃΔⵠΔⵠⲆ[b];
        document.getElementById("stats_box_score").innerHTML = Px.ᐃΔΔⲆⲆᐃΔ[b];
      } else {
        var f = 0;
        for (var g = 0; g < Px.ᐃᐃΔᐃⵠ.length; g++) {
          f += Px.ᐃᐃΔᐃⵠ[g];
        }
        var h = 0;
        for (g = 0; Px.time.length > g; g++) {
          h += Px.time[g];
        }
        document.getElementById("stats_box_time").innerHTML = h;
        document.getElementById("stats_box_kill").innerHTML = f;
        document.getElementById("stats_box_score").innerHTML = Px.ⵠⵠⵠⲆⵠ;
      }
    }
    this.buttons[u] = zf(87, 78, 0, [ᐃᐃ.ⵠⵠΔⵠⵠΔⵠ, ᐃᐃ.ΔΔᐃᐃⲆⲆΔ, ᐃᐃ.ⵠⲆΔⲆⲆΔΔ], 1, 0, function () {
      Px.ᐃⵠᐃⲆⵠΔⵠΔⵠ();
      if (Px.ⵠΔᐃΔᐃΔⵠ === 0) {
        V(P);
      } else {
        V(H);
      }
    }, 127, 110, ca | aa, ha);
    this.buttons[u++].view = d;
    this.buttons[u] = zf(87, 78, 0, [ᐃᐃ.ⵠⵠΔΔⵠΔΔ, ᐃᐃ.ᐃᐃⲆᐃⲆᐃΔ, ᐃᐃ.ᐃⲆⲆᐃⵠΔⲆ], 1, 0, function () {
      const a = oc.document.createElement("textarea");
      a.value = sy;
      oc.document.body.appendChild(a);
      a.select();
      oc.document.execCommand("copy");
      oc.document.body.removeChild(a);
    }, 182, 110, ca | aa, ha);
    this.buttons[u++].view = d;
    this.buttons[u] = zf(87, 78, 0, [ᐃᐃ.ⲆᐃΔⵠᐃⵠⲆ, ᐃᐃ.ⵠⲆⵠΔΔⲆΔ, ᐃᐃ.ⲆⲆΔⵠⲆⵠᐃ], 1, 0, function () {
      (function () {
        if (py === my && oc.FB && oc.FB.getUserID()) {
          oc.FB.logout();
        }
        if (oy === py && Ay !== undefined) {
          oc.gapi.auth2.getAuthInstance().signOut();
          Ay = undefined;
        }
        sy = ct;
        qy = undefined;
        py = Wb;
        Px.ΔⵠⵠΔⵠ = 0;
        Px.ⵠΔⵠⲆᐃ = 0;
        Px.ⵠⵠⵠⲆⵠ = 0;
        Px.ΔⲆⵠᐃⵠⲆᐃ();
        ΔⲆⵠⲆⵠΔΔⲆᐃ();
      })();
    }, 255, 110, ca | aa, ha);
    this.buttons[u++].view = d;
    this.buttons[u] = zf(58, 64, 0, [ᐃᐃ.ΔΔⵠΔΔⵠⲆ, ᐃᐃ.ᐃⲆⵠⲆΔⲆᐃ, ᐃᐃ.ⲆΔⵠΔⵠⲆⲆ], 1, 0, function () {
      V(C);
    }, 189, 118, ca | aa, ha);
    this.buttons[u++].view = v;
    this.buttons[u] = zf(497, 72, 0, [ᐃᐃ.ᐃΔⲆΔⵠⲆΔ, ᐃᐃ.ΔΔᐃΔⲆᐃΔ, ᐃᐃ.ΔⲆⲆΔΔⲆⲆ], 1, 0, function () {
      (function () {
        if (Af) {
          qy = ⲆⵠΔⵠ.ⵠΔⲆⲆΔΔΔ(40);
          py = cy;
          sy = Af.userId;
          oc.ⲆⵠᐃⲆΔⲆⵠ();
          return;
        }
        oc.gapi.auth2.getAuthInstance().signIn();
      })();
    }, -130, 390, ca | aa, ha);
    this.buttons[u++].view = v;
    this.buttons[u] = zf(497, 72, 0, [ᐃᐃ.ᐃΔᐃΔᐃΔΔ, ᐃᐃ.ⵠᐃᐃⵠⵠᐃΔ, ᐃᐃ.ᐃⲆΔⲆⵠΔⲆ], 1, 0, function () {
      oc.FB.login(function (a) {
        if (a.authResponse) {
          oc.FB.api("/me", function (a) {
            py = my;
            qy = oc.FB.getAuthResponse().accessToken;
            jy();
            oc.ⲆⵠᐃⲆΔⲆⵠ();
          });
        }
      });
    }, -130, 430, ca | aa, ha);
    this.buttons[u++].view = v;
    ⵠⵠᐃᐃⲆⵠΔ = 20000;
    this.ⲆⵠΔⵠᐃΔᐃ = function (a) {
      var b = Px.ΔⵠⵠᐃⵠⵠΔ(a);
      var c = b * b * ⵠⵠᐃᐃⲆⵠΔ;
      return (a -= c) / (ⵠⵠᐃᐃⲆⵠΔ * ((b + 1) * (b + 1)) - c);
    };
    this.ΔⵠⵠᐃⵠⵠΔ = function (a) {
      return Math.floor(Math.sqrt(a / ⵠⵠᐃᐃⲆⵠΔ));
    };
    this.ⲆⲆΔᐃⲆΔᐃᐃⲆ = function (a) {
      Px.ⲆΔΔⵠᐃ = Px.ΔⵠⵠᐃⵠⵠΔ(a);
      Px.ⵠⲆⲆⲆΔⵠᐃ = Px.ⲆⵠΔⵠᐃΔᐃ(a);
      Px.ᐃⵠⵠΔⲆⲆᐃ = 0;
      Px.ⵠⵠⵠⲆⵠ = a;
    };
    this.ⲆΔΔⲆⲆΔΔⲆᐃ = function (a) {
      Px.buttons[Px.ᐃΔⲆⲆᐃᐃⵠ].info.active = 0;
      Px.buttons[Px.ΔⲆᐃⵠⵠⵠᐃ].info.active = 1;
      Px.buttons[Px.ⲆᐃΔⲆⲆᐃᐃ].info.active = 1;
      n();
      if (a.name.indexOf("Starver#") === -1) {
        document.getElementById("account_nickname_input").value = oc.decodeURIComponent(oc.escape(oc.atob(a.name)));
      } else {
        document.getElementById("account_nickname_input").value = a.name;
      }
      Px.ⵠΔⵠⲆᐃ = a.bread;
      var b = a.seasons;
      var c = b[b.length - 1];
      Px.ⲆᐃΔⵠᐃⲆΔ = b;
      w.ⲆⲆΔᐃⲆΔᐃᐃⲆ(c.score);
      Px.ⵠⵠⵠⲆⵠ = c.score;
      Px.ᐃᐃΔᐃⵠ = c.kill;
      Px.ᐃⵠⵠⵠⵠⵠΔ = c.death;
      Px.time = c.time;
      Px.ᐃΔΔⲆⲆᐃΔ = c.bestScore;
      Px.ᐃᐃΔⵠΔⵠⲆ = c.bestKill;
      Px.ᐃΔΔⵠⲆⲆΔ = c.bestTime;
      Px.ΔⵠΔᐃⲆᐃᐃ = c.scoreTotal;
      Px.ⵠΔᐃΔᐃΔⵠ = a.firstName;
      document.getElementById("serverAddressInput").value = a.privateServerRegion + " : " + a.privateServer;
      if (Px.ⵠΔᐃΔᐃΔⵠ === undefined) {
        Px.ⵠΔᐃΔᐃΔⵠ = 0;
      }
      Px.ΔᐃᐃⲆⲆᐃⵠ = Date.now() + a.privateServerTime;
      if (Number(a.privateServerTime) > 0) {
        Px.ΔᐃᐃⲆⲆᐃⵠ = Date.now() + Number(a.privateServerTime);
      }
      Px.ΔⵠⵠΔⵠ = Date.now() + a.kit;
      if (Number(a.kit) > 0) {
        Px.ΔⵠⵠΔⵠ = Date.now() + Number(a.kit);
      }
      var d = ΔⲆᐃΔ.ⵠⲆⵠⲆᐃ;
      for (var e = 0; e < a.skins.length; e++) {
        if ((i = a.skins[e]) > 0) {
          for (var f = 0; f < d.length; f++) {
            if (d[f].id === e) {
              w.unlock.ⵠᐃᐃⲆ[f] = 1;
            }
          }
        }
      }
      d = ΔⲆᐃΔ.ᐃΔⲆⵠⵠ;
      e = 0;
      for (; a.accessories.length > e; e++) {
        if ((i = a.accessories[e]) > 0) {
          for (f = 0; f < d.length; f++) {
            if (d[f].id === e) {
              w.unlock.ᐃⲆⵠⲆⵠ[f] = 1;
            }
          }
        }
      }
      d = ΔⲆᐃΔ.ᐃᐃⲆᐃⲆ;
      e = 0;
      for (; e < a.books.length; e++) {
        if ((i = a.books[e]) > 0) {
          for (f = 0; d.length > f; f++) {
            if (d[f].id === e) {
              w.unlock.ᐃⵠΔⵠⵠ[f] = 1;
            }
          }
        }
      }
      d = ΔⲆᐃΔ.Ⲇᐃᐃⵠ;
      e = 0;
      for (; e < a.bags.length; e++) {
        if ((i = a.bags[e]) > 0) {
          for (f = 0; f < d.length; f++) {
            if (d[f].id === e) {
              w.unlock.ⵠΔᐃΔᐃ[f] = 1;
            }
          }
        }
      }
      d = ΔⲆᐃΔ.ⲆᐃⵠⲆⲆ;
      e = 0;
      for (; a.crates.length > e; e++) {
        var i = a.crates[e];
        if (i > 0) {
          for (f = 0; f < d.length; f++) {
            if (d[f].id === e) {
              w.unlock.ⵠᐃⵠⲆᐃ[f] = 1;
              w.unlock.ΔⲆⲆⲆⵠ[f] = 1;
            }
          }
        }
      }
    };
    this.ⲆᐃᐃΔΔᐃΔΔᐃ = function () {
      oc.ⲆⵠᐃⲆΔⲆⵠ = function () {
        V(C);
        (function (a) {
          var b = new XMLHttpRequest();
          b.open("GET", by + "login?token=" + qy + "&type=" + py + (Af ? "&userId=" + Af.userId + "&userInfo=" + Af.userInfo : ""));
          b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          b.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200 && b.responseText !== "0") {
              a(JSON.parse(b.responseText));
            }
          };
          b.send();
        })(w.ⲆΔΔⲆⲆΔΔⲆᐃ);
      };
      if (wy === 1) {
        oc.ⲆⵠᐃⲆΔⲆⵠ();
      }
    };
    oc.ΔⲆⵠⲆⵠΔΔⲆᐃ = function () {
      Px.buttons[Px.ᐃΔⲆⲆᐃᐃⵠ].info.active = 1;
      Px.buttons[Px.ΔⲆᐃⵠⵠⵠᐃ].info.active = 0;
      Px.buttons[Px.ⲆᐃΔⲆⲆᐃᐃ].info.active = 0;
      V(C);
    };
    this.ⲆᐃᐃᐃΔ = function () {
      return Px.buttons[Px.ΔⲆᐃⵠⵠⵠᐃ].info.active;
    };
    this.buttons[u] = zf(461, 105, 0, [ᐃᐃ.ⵠΔⵠⲆⵠΔⲆ, ᐃᐃ.ⲆⲆⵠⲆⲆⲆⵠ, ᐃᐃ.ⲆᐃⵠΔⲆᐃⲆ], 1, 0, function () {
      if (w.ⲆᐃᐃᐃΔ()) {
        V(A);
      } else {
        V(v);
      }
    }, -100, 80, ca | aa, ha);
    this.buttons[u++].view = c;
    this.buttons[u] = zf(157, 158, 0, [ᐃᐃ.ⲆⵠⲆΔⲆⵠᐃ, ᐃᐃ.ⵠΔΔΔΔΔⵠ, ᐃᐃ.ᐃΔⲆΔᐃΔᐃ], 1, 0, function () {
      oc.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, -35, 125, ca | aa, ha);
    this.buttons[u++].view = p;
    this.buttons[u] = zf(66, 73, 0, [ᐃᐃ.ᐃⵠⵠᐃⵠᐃⵠ, ᐃᐃ.ᐃᐃⲆΔⵠⵠΔ, ᐃᐃ.ᐃΔᐃⲆⵠΔⵠ], 1, 0, Rr, -68, 340, ca | aa, ha);
    this.buttons[u++].view = p;
    this.buttons[u] = zf(66, 73, 0, [ᐃᐃ.ⲆⵠⲆⵠⵠⲆᐃ, ᐃᐃ.ⲆⲆᐃᐃⲆΔⵠ, ᐃᐃ.ΔⲆᐃΔⵠΔⵠ], 1, 0, oj, -30, 340, ca | aa, ha);
    this.buttons[u++].view = p;
    this.ⲆⵠⲆⲆⲆⵠⲆⵠⲆ = u;
    this.buttons[u] = zf(97, 66, 0, [ᐃᐃ.ᐃΔΔⵠΔⲆⲆ, ᐃᐃ.ⲆᐃⵠᐃⵠⵠⲆ, ᐃᐃ.ⲆⲆᐃΔⲆΔⲆ], 1, 0, function () {
      My(undefined, Yh, Px.ΔⲆΔᐃᐃΔΔ);
    }, -14, 151, ca | aa, ha);
    this.buttons[u++].view = D;
    this.ⵠᐃⵠⵠΔᐃΔ = u;
    this.buttons[u] = zf(135, 66, 0, [ᐃᐃ.ⵠΔᐃⵠᐃᐃᐃ, ᐃᐃ.ΔⲆᐃΔᐃΔΔ, ᐃᐃ.ⲆⵠΔⲆⵠⲆⵠ], 1, 0, function () {
      My(undefined, Bt, Px.ⵠᐃⵠⵠΔᐃΔ);
    }, 37.5, 151, ca | aa, ha);
    this.buttons[u++].view = D;
    this.ᐃΔΔⵠᐃΔᐃ = u;
    this.buttons[u] = zf(160, 66, 0, [ᐃᐃ.ΔⲆⵠᐃΔⵠΔ, ᐃᐃ.ⵠΔΔΔᐃⵠΔ, ᐃᐃ.ᐃⵠⲆᐃᐃⵠⲆ], 1, 0, function () {
      My(Nl, undefined, Px.ᐃΔΔⵠᐃΔᐃ);
    }, 107.5, 151, ca | aa, ha);
    this.buttons[u++].view = D;
    this.ΔⲆΔᐃᐃΔΔ = u;
    this.buttons[u] = zf(207, 66, 0, [ᐃᐃ.ⲆΔⲆΔΔΔᐃ, ᐃᐃ.ⲆⲆⵠⲆΔᐃΔ, ᐃᐃ.ΔΔΔⵠⵠᐃⵠ], 1, 0, function () {
      My(Pn, undefined, Px.ΔⲆΔᐃᐃΔΔ);
    }, 190.5, 151, ca | aa, ha);
    this.buttons[u++].view = D;
    this.ᐃΔΔⵠⲆΔⲆ = u;
    this.buttons[u] = zf(144, 66, 0, [ᐃᐃ.ⵠᐃᐃΔⲆⲆⵠ, ᐃᐃ.ⵠΔⵠᐃⲆⲆⲆ, ᐃᐃ.Ⲇⵠⵠⵠⵠⵠᐃ], 1, 0, function () {
      My(Px.ᐃΔΔⵠⲆΔⲆ);
    }, 103.5, 110, ca | aa, ha);
    this.buttons[u++].view = D;
    this.ⲆΔΔⵠΔᐃΔ = u;
    this.buttons[u] = zf(124, 66, 0, [ᐃᐃ.ⵠⲆΔⲆΔⲆⵠ, ᐃᐃ.ΔᐃΔΔⵠⲆⵠ, ᐃᐃ.ⲆᐃᐃΔⲆⵠⵠ], 1, 0, function () {
      My(Px.ⲆΔΔⵠΔᐃΔ);
    }, 177.5, 110, ca | aa, ha);
    this.buttons[u++].view = D;
    this.ΔⵠⵠΔⲆⲆᐃ = u;
    this.buttons[u] = zf(104, 66, 0, [ᐃᐃ.ΔⲆΔⲆᐃⵠⲆ, ᐃᐃ.ᐃΔⵠΔⲆⲆⲆ, ᐃᐃ.ᐃⵠⵠⲆΔⲆⵠ], 1, 0, function () {
      My(Px.ΔⵠⵠΔⲆⲆᐃ);
    }, 242, 110, ca | aa, ha);
    this.buttons[u++].view = D;
    this.ᐃⲆΔⵠⲆⲆⲆ = u;
    this.buttons[u] = zf(46, 51, 0, [ᐃᐃ.ΔⲆᐃⲆⲆⵠΔ, ᐃᐃ.ΔⵠⵠⲆΔᐃᐃ, ᐃᐃ.ⲆⵠⵠⵠⵠΔⵠ], 1, 0, function () {
      My(Pn, Aj, undefined, Px.ᐃⲆΔⵠⲆⲆⲆ);
    }, -185, 528, ca | aa, ha);
    this.buttons[u++].view = D;
    this.ΔΔᐃΔΔΔΔ = u;
    this.buttons[u] = zf(46, 51, 0, [ᐃᐃ.ᐃⵠᐃⲆⵠᐃⵠ, ᐃᐃ.ᐃⲆΔⲆⲆⵠⲆ, ᐃᐃ.ᐃΔᐃⲆⲆᐃⵠ], 1, 0, function () {
      My(undefined, md, Yg, Px.ΔΔᐃΔΔΔΔ);
    }, -149, 528, ca | aa, ha);
    this.buttons[u++].view = D;
    this.ⵠᐃᐃΔΔⵠᐃ = u;
    this.buttons[u] = zf(46, 51, 0, [ᐃᐃ.ⵠΔⵠⵠΔΔⲆ, ᐃᐃ.ⵠⲆⲆΔⲆΔⵠ, ᐃᐃ.ⵠⵠᐃΔΔⲆΔ], 1, 0, function () {
      My(da, os, tq, Px.ⵠᐃᐃΔΔⵠᐃ);
    }, -113, 528, ca | aa, ha);
    this.buttons[u++].view = D;
    this.ΔᐃⵠᐃⲆⲆⲆ = u;
    this.buttons[u] = zf(46, 51, 0, [ᐃᐃ.ΔΔⲆΔⵠⲆΔ, ᐃᐃ.ΔⵠⵠⵠⵠΔΔ, ᐃᐃ.ⵠᐃΔΔΔⲆⵠ], 1, 0, function () {
      My(undefined, undefined, undefined, Px.ΔᐃⵠᐃⲆⲆⲆ);
    }, -77, 528, ca | aa, ha);
    this.buttons[u++].view = D;
    this.ΔⵠᐃᐃΔΔΔ = u;
    this.buttons[u] = zf(46, 51, 0, [ᐃᐃ.ⲆΔΔΔⵠⲆΔ, ᐃᐃ.ⲆΔΔⵠᐃⲆᐃ, ᐃᐃ.ⵠⵠⵠⵠⲆᐃⲆ], 1, 0, function () {
      My(undefined, ct, Bt, Px.ΔⵠᐃᐃΔΔΔ);
    }, -41, 528, ca | aa, ha);
    this.buttons[u++].view = D;
    this.ⲆⲆΔΔⵠᐃⵠ = u;
    this.buttons[u] = zf(46, 51, 0, [ᐃᐃ.ᐃⵠⵠΔⵠⲆⵠ, ᐃᐃ.ᐃΔΔⲆⵠᐃΔ, ᐃᐃ.ᐃⵠⲆⲆⵠᐃⲆ], 1, 0, function () {
      My(da, undefined, os, Px.ⲆⲆΔΔⵠᐃⵠ);
    }, -5, 528, ca | aa, ha);
    this.buttons[u++].view = D;
    this.buttons[u] = zf(232, 352, 0, [ᐃᐃ.ᐃᐃΔⵠⲆⲆΔ, ᐃᐃ.ⲆΔⵠᐃⲆⲆⲆ, ᐃᐃ.ⲆΔⵠⵠᐃΔⵠ], 1, 0, function () {
      Ky(300);
    }, -330, 135, ca | aa, ha);
    this.buttons[u++].view = A;
    this.buttons[u] = zf(232, 352, 0, [ᐃᐃ.ΔᐃΔΔⵠⵠⲆ, ᐃᐃ.ⵠⲆᐃᐃΔⵠΔ, ᐃᐃ.ⵠⵠΔⲆⲆΔⵠ], 1, 0, function () {
      Ky(600);
    }, -195, 135, ca | aa, ha);
    this.buttons[u++].view = A;
    this.buttons[u] = zf(243, 374, 0, [ᐃᐃ.ΔⵠⲆΔΔΔᐃ, ᐃᐃ.ⲆᐃⵠᐃΔᐃⲆ, ᐃᐃ.ⵠΔᐃΔⲆⲆΔ], 1, 0, function () {
      Ky(2600);
    }, -60, 130, ca | aa, ha);
    this.buttons[u++].view = A;
    this.buttons[u] = zf(232, 352, 0, [ᐃᐃ.ΔΔΔⲆᐃᐃᐃ, ᐃᐃ.ⵠⲆⲆⵠⲆᐃⲆ, ᐃᐃ.ⵠᐃᐃΔⵠᐃᐃ], 1, 0, function () {
      Ky(7000);
    }, 78, 135, ca | aa, ha);
    this.buttons[u++].view = A;
    this.buttons[u] = zf(243, 374, 0, [ᐃᐃ.ⲆⵠⵠⲆⲆⵠᐃ, ᐃᐃ.ΔᐃᐃⵠᐃΔⲆ, ᐃᐃ.ⵠⲆⲆⲆᐃΔΔ], 1, 0, function () {
      Ky(20000);
    }, 213, 130, ca | aa, ha);
    this.buttons[u++].view = A;
    this.buttons[u] = zf(58, 64, 0, [ᐃᐃ.ΔΔⵠΔΔⵠⲆ, ᐃᐃ.ᐃⲆⵠⲆΔⲆᐃ, ᐃᐃ.ⲆΔⵠΔⵠⲆⲆ], 1, 0, function () {
      V(c);
    }, 300, 88, ca | aa, ha);
    this.buttons[u++].view = A;
    this.buttons[u] = zf(323, 112, 0, [ᐃᐃ.ᐃⲆΔⵠΔⲆᐃ, ᐃᐃ.ΔⲆⵠΔᐃⲆⲆ, ᐃᐃ.ⵠⲆⵠⲆⵠΔᐃ], 1, 0, function () {
      V(J);
      Ea.ᐃΔⲆᐃⲆ();
    }, -315, 185, ca | aa, ha);
    this.buttons[u++].view = m;
    this.buttons[u] = zf(323, 112, 0, [ᐃᐃ.ⲆⵠⲆⵠᐃΔΔ, ᐃᐃ.ⲆᐃⵠᐃΔᐃᐃ, ᐃᐃ.ⵠⵠᐃⵠᐃΔⲆ], 1, 0, function () {
      V(N);
      Ja.ᐃΔⲆᐃⲆ();
    }, -315, 321, ca | aa, ha);
    this.buttons[u++].view = m;
    this.buttons[u] = zf(323, 112, 0, [ᐃᐃ.ⵠᐃⲆⲆᐃᐃⵠ, ᐃᐃ.ΔᐃⲆᐃⵠⵠⲆ, ᐃᐃ.ΔⲆᐃⲆⵠⲆᐃ], 1, 0, function () {
      V(M);
      Fa.ᐃΔⲆᐃⲆ();
    }, 153, 185, ca | aa, ha);
    this.buttons[u++].view = m;
    this.buttons[u] = zf(323, 112, 0, [ᐃᐃ.ⵠⲆᐃᐃΔⵠⵠ, ᐃᐃ.ᐃⵠΔᐃΔⵠᐃ, ᐃᐃ.ᐃⵠⵠⵠⲆⲆᐃ], 1, 0, function () {
      V(q);
      Ga.ᐃΔⲆᐃⲆ();
    }, 153, 321, ca | aa, ha);
    this.buttons[u++].view = m;
    this.buttons[u] = zf(323, 112, 0, [ᐃᐃ.ᐃᐃᐃΔⵠᐃᐃ, ᐃᐃ.ᐃⵠᐃᐃΔⲆⵠ, ᐃᐃ.ⲆᐃⵠⲆⵠⲆⵠ], 1, 0, function () {
      V(L);
      Ha.ᐃΔⲆᐃⲆ();
    }, 153, 463, ca | aa, ha);
    this.buttons[u++].view = m;
    this.buttons[u] = zf(323, 112, 0, [ᐃᐃ.ⵠᐃⲆⲆⵠΔᐃ, ᐃᐃ.ⲆΔⲆᐃΔᐃΔ, ᐃᐃ.ⵠᐃᐃᐃᐃΔΔ], 1, 0, function () {
      V(O);
      Ia.ᐃΔⲆᐃⲆ();
    }, -315, 463, ca | aa, ha);
    this.buttons[u++].view = m;
    this.buttons[u] = zf(327, 117, 0, [ᐃᐃ.ᐃΔⵠⵠΔᐃᐃ, ᐃᐃ.ΔⲆⲆΔᐃⵠΔ, ᐃᐃ.ΔⵠⲆⲆΔⵠΔ], 1, 0, function () {
      V(S);
    }, 155, 70, Z, ia);
    this.buttons[u++].view = C;
    this.buttons[u] = zf(130, 129, 0, [ᐃᐃ.ΔᐃΔΔⲆᐃᐃ, ᐃᐃ.ΔⲆΔᐃⲆⲆⲆ, ᐃᐃ.ᐃⲆΔᐃⵠⲆⵠ], 1, 0, function () {
      T(y, ha, "none");
      V(c);
    }, 10, 40, ca | aa, ha);
    this.buttons[u++].view = y;
    this.buttons[u] = zf(130, 129, 0, [ᐃᐃ.ΔᐃΔΔⲆᐃᐃ, ᐃᐃ.ΔⲆΔᐃⲆⲆⲆ, ᐃᐃ.ᐃⲆΔᐃⵠⲆⵠ], 1, 0, function () {
      T(k, ha, "none");
      V(c);
    }, 10, 40, ca | aa, ha);
    this.buttons[u++].view = k;
    this.buttons[u] = zf(115, 73, 0, [ᐃᐃ.ᐃᐃΔⵠⲆ, ᐃᐃ.ⵠᐃⲆⵠⵠ, ᐃᐃ.ⲆᐃᐃΔⵠ], 1, 0, function () {
      V(c);
    }, 200, 140, ca | aa, ha);
    this.buttons[u++].view = Q;
    this.buttons[u] = zf(524, 110, 0, [ᐃᐃ.ⵠΔⲆΔⵠⲆΔ, ᐃᐃ.ᐃᐃⵠΔⲆΔⵠ, ᐃᐃ.ΔⵠΔΔⵠⵠⵠ], 1, 0, function () {
      Dy("Atlanta");
    }, -265, 300, ca | aa, ha);
    this.buttons[u++].view = Q;
    this.buttons[u] = zf(523, 110, 0, [ᐃᐃ.ᐃⲆⲆⲆᐃⵠΔ, ᐃᐃ.ΔᐃⵠᐃⲆⵠΔ, ᐃᐃ.ⲆᐃᐃⲆⵠᐃⵠ], 1, 0, function () {
      Dy("LosAngeles");
    }, 5, 300, ca | aa, ha);
    this.buttons[u++].view = Q;
    this.buttons[u] = zf(344, 110, 0, [ᐃᐃ.ⵠᐃΔⵠⵠⵠᐃ, ᐃᐃ.ⵠΔΔⲆᐃᐃⲆ, ᐃᐃ.ⲆᐃᐃⲆΔΔⵠ], 1, 0, function () {
      Dy("Frankfurt");
    }, -265, 365, ca | aa, ha);
    this.buttons[u++].view = Q;
    this.buttons[u] = zf(344, 110, 0, [ᐃᐃ.ᐃᐃⵠΔⲆⵠⵠ, ᐃᐃ.ᐃⲆᐃⵠΔᐃᐃ, ᐃᐃ.ΔᐃΔΔⵠⲆᐃ], 1, 0, function () {
      Dy("Osaka");
    }, 100, 365, ca | aa, ha);
    this.buttons[u++].view = Q;
    this.buttons[u] = zf(344, 110, 0, [ᐃᐃ.ᐃⲆⵠⲆⵠⲆᐃ, ᐃᐃ.ᐃΔᐃⲆⵠᐃⵠ, ᐃᐃ.ⲆⲆΔΔⲆⵠⵠ], 1, 0, function () {
      Dy("Sydney");
    }, -86, 365, ca | aa, ha);
    this.buttons[u++].view = Q;
    this.buttons[u] = zf(115, 73, 0, [ᐃᐃ.ᐃᐃΔⵠⲆ, ᐃᐃ.ⵠᐃⲆⵠⵠ, ᐃᐃ.ⲆᐃᐃΔⵠ], 1, 0, function () {
      V(Q);
    }, 224, 140, ca | aa, ha);
    this.buttons[u++].view = K;
    this.buttons[u] = zf(230, 352, 0, [ᐃᐃ.ᐃΔΔⲆⵠⵠⲆ, ᐃᐃ.ⵠⵠᐃⲆⲆⲆΔ, ᐃᐃ.ⲆᐃᐃᐃᐃⲆΔ], 1, 0, function () {
      Ky(350);
    }, -280, 240, ca | aa, ha);
    this.buttons[u++].view = K;
    this.buttons[u] = zf(230, 352, 0, [ᐃᐃ.ᐃΔᐃΔᐃⲆⵠ, ᐃᐃ.ⵠΔᐃᐃⲆΔᐃ, ᐃᐃ.ⵠⵠᐃᐃⲆΔⲆ], 1, 0, function () {
      Ky(700);
    }, -130, 240, ca | aa, ha);
    this.buttons[u++].view = K;
    this.buttons[u] = zf(230, 352, 0, [ᐃᐃ.ΔΔⵠⲆᐃΔᐃ, ᐃᐃ.ΔᐃⵠᐃΔᐃᐃ, ᐃᐃ.ΔⲆⲆᐃⲆΔΔ], 1, 0, function () {
      Ky(1400);
    }, 20, 240, ca | aa, ha);
    this.buttons[u++].view = K;
    this.buttons[u] = zf(230, 352, 0, [ᐃᐃ.ⵠⲆΔΔⲆᐃⲆ, ᐃᐃ.ⵠΔᐃᐃᐃΔΔ, ᐃᐃ.ΔⵠᐃΔⲆᐃⵠ], 1, 0, function () {
      Ky(3000);
    }, 170, 240, ca | aa, ha);
    this.buttons[u++].view = K;
    this.buttons[u] = zf(105, 119, 0, [ᐃᐃ.ΔᐃΔΔⵠⵠⵠ, ᐃᐃ.ᐃⵠⲆᐃΔⲆⲆ, ᐃᐃ.ᐃⵠⵠⵠᐃᐃᐃ], 1, 0, function () {
      const a = document.getElementById("serverAddressInput").value.split(" : ");
      const b = oc.document.createElement("textarea");
      b.value = Bf + "?server=" + a[1] + "&region=" + a[0];
      oc.document.body.appendChild(b);
      b.select();
      oc.document.execCommand("copy");
      oc.document.body.removeChild(b);
    }, 170, 310, ca | aa, ha);
    this.buttons[u++].view = R;
    this.buttons[u] = zf(105, 119, 0, [ᐃᐃ.ⲆΔⵠⲆᐃᐃΔ, ᐃᐃ.ΔΔᐃᐃᐃΔΔ, ᐃᐃ.ⲆᐃⲆⵠⵠΔΔ], 1, 0, function () {
      (function () {
        var a = new XMLHttpRequest();
        a.open("GET", by + "rebootServer?token=" + qy + "&userid=" + sy);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
          if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
            const a = document.getElementById("serverAddressInput").value.split(" : ");
            location.href = Bf + "?server=" + a[1] + "&region=" + a[0];
          }
        };
        a.send();
      })();
    }, 235, 310, ca | aa, ha);
    this.buttons[u++].view = R;
    this.buttons[u] = zf(204, 115, 0, [ᐃᐃ.ⵠⲆⵠΔᐃᐃⵠ, ᐃᐃ.ⵠⵠᐃⵠⵠᐃⵠ, ᐃᐃ.ⲆΔΔᐃⵠⲆⵠ], 1, 0, function () {
      oc.open("./commands.html", "_blank");
    }, -265, 490, ca | aa, ha);
    this.buttons[u++].view = R;
    this.buttons[u] = zf(145, 69, 0, [ᐃᐃ.ⲆⲆᐃΔΔᐃⲆ, ᐃᐃ.ⵠᐃᐃⲆᐃⲆⲆ, ᐃᐃ.ᐃⵠΔⵠⲆΔᐃ], 1, 0, function () {
      V(x);
    }, -210, 170, ca | aa, ha);
    this.buttons[u++].view = c;
    this.buttons[u] = zf(145, 69, 0, [ᐃᐃ.ⵠⲆΔⵠᐃΔΔ, ᐃᐃ.ᐃⵠᐃΔΔⵠⵠ, ᐃᐃ.ⵠⲆⵠΔᐃⲆⵠ], 1, 0, function () {
      V(B);
    }, 70, 170, ca | aa, ha);
    this.buttons[u++].view = c;
    this.buttons[u] = zf(145, 69, 0, [ᐃᐃ.ᐃⲆᐃⵠⲆⵠΔ, ᐃᐃ.ᐃⵠΔᐃⵠΔΔ, ᐃᐃ.ⵠⲆΔⵠⲆᐃⵠ], 1, 0, function () {
      V(E);
    }, 70, 204, ca | aa, ha);
    this.buttons[u++].view = c;
    this.buttons[u] = zf(145, 69, 0, [ᐃᐃ.ⲆⵠᐃᐃⲆⲆΔ, ᐃᐃ.ᐃΔⲆΔΔΔᐃ, ᐃᐃ.ΔⲆⲆⲆⵠΔᐃ], 1, 0, function () {
      V(G);
    }, -210, 204, ca | aa, ha);
    this.buttons[u++].view = c;
    this.buttons[u] = zf(145, 69, 0, [ᐃᐃ.ⲆⵠᐃᐃⲆⲆΔ, ᐃᐃ.ᐃΔⲆΔΔΔᐃ, ᐃᐃ.ΔⲆⲆⲆⵠΔᐃ], 1, 0, function () {
      V(I);
    }, 70, 238, ca | aa, ha);
    this.buttons[u++].view = c;
    this.buttons[u] = zf(145, 69, 0, [ᐃᐃ.ⲆⵠᐃᐃⲆⲆΔ, ᐃᐃ.ᐃΔⲆΔΔΔᐃ, ᐃᐃ.ΔⲆⲆⲆⵠΔᐃ], 1, 0, function () {
      if (w.ⲆᐃᐃᐃΔ()) {
        Fy(0, 300);
      } else {
        V(v);
      }
    }, 307, 205, ca | aa, ha);
    this.buttons[u++].view = c;
    this.buttons[u] = zf(145, 69, 0, [ᐃᐃ.ⵠⲆⲆⵠⵠⲆΔ, ᐃᐃ.ⵠᐃⵠΔⵠⵠⲆ, ᐃᐃ.ⵠⵠⲆⲆΔⵠⲆ], 1, 0, function () {
      V(F);
    }, -210, 238, ca | aa, ha);
    this.buttons[u++].view = c;
    this.buttons[u] = zf(145, 69, 0, [ᐃᐃ.ⵠⲆⲆⵠⵠⲆΔ, ᐃᐃ.ⵠᐃⵠΔⵠⵠⲆ, ᐃᐃ.ⵠⵠⲆⲆΔⵠⲆ], 1, 0, function () {
      if (w.ⲆᐃᐃᐃΔ()) {
        Fy(1, 600);
      } else {
        V(v);
      }
    }, 307, 239, ca | aa, ha);
    this.buttons[u++].view = c;
    this.buttons[u] = zf(192, 101, 0, [ᐃᐃ.ᐃⲆΔᐃΔⲆᐃ, ᐃᐃ.ΔᐃⵠⵠΔΔΔ, ᐃᐃ.ΔⵠⲆⵠⵠΔⵠ], 1, 0, function () {
      Iy();
    }, -100, 250, ca | aa, ha);
    this.buttons[u++].view = P;
    this.buttons[u] = zf(192, 104, 0, [ᐃᐃ.ⵠⵠⲆᐃⵠⲆⲆ, ᐃᐃ.ΔⵠⲆⲆΔⲆⵠ, ᐃᐃ.ⲆᐃΔⵠⵠⲆᐃ], 1, 0, function () {
      Iy();
    }, -100, 239, ca | aa, ha);
    this.buttons[u++].view = H;
    this.buttons[u] = zf(192, 101, 0, [ᐃᐃ.ⵠⵠᐃⵠΔⵠⲆ, ᐃᐃ.ᐃᐃⵠⵠΔⵠᐃ, ᐃᐃ.ᐃⵠΔⵠᐃᐃΔ], 1, 0, function () {
      V(d);
    }, 10, 250, ca | aa, ha);
    this.buttons[u++].view = P;
    this.buttons[u] = zf(192, 104, 0, [ᐃᐃ.ΔⲆᐃⲆᐃΔΔ, ᐃᐃ.ΔᐃⵠⲆᐃΔᐃ, ᐃᐃ.ΔⲆᐃΔᐃΔᐃ], 1, 0, function () {
      V(d);
    }, 10, 239, ca | aa, ha);
    this.buttons[u++].view = H;
    ᐃⵠᐃⲆᐃ = [];
    ᐃⵠᐃⲆᐃ[ΔⲆⵠ.ᐃⵠᐃⲆⵠ] = [ᐃᐃ.ⲆⲆΔⵠΔᐃΔ, ᐃᐃ.ᐃⲆⵠⲆⲆΔᐃ, ᐃᐃ.ⲆᐃⵠΔΔⵠⵠ];
    ᐃⵠᐃⲆᐃ[ΔⲆⵠ.ΔΔΔⵠ] = [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ];
    ᐃⵠᐃⲆᐃ[ΔⲆⵠ.Δᐃᐃᐃ] = [ᐃᐃ.ⵠᐃⲆⲆᐃⵠΔ, ᐃᐃ.ⵠΔΔΔᐃΔⵠ, ᐃᐃ.ΔⲆΔΔᐃΔΔ];
    ᐃⵠᐃⲆᐃ[ΔⲆⵠ.ᐃΔⵠⵠ] = [ᐃᐃ.ΔⲆⲆⲆⲆⲆⵠ, ᐃᐃ.ΔᐃΔᐃⲆⵠᐃ, ᐃᐃ.ΔⲆⵠⵠⲆⲆΔ];
    ᐃⵠᐃⲆᐃ[ΔⲆⵠ.ΔⵠⲆᐃ] = [ᐃᐃ.ⵠᐃΔⲆΔᐃΔ, ᐃᐃ.ΔⲆΔΔΔΔⵠ, ᐃᐃ.ΔⵠⵠᐃΔΔᐃ];
    ᐃⵠᐃⲆᐃ[ΔⲆⵠ.ⲆΔⵠⵠ] = [ᐃᐃ.ⵠⵠⲆΔⵠᐃᐃ, ᐃᐃ.ΔᐃⵠᐃΔΔⵠ, ᐃᐃ.ⵠⲆᐃⲆΔᐃⲆ];
    ᐃⵠᐃⲆᐃ[ΔⲆⵠ.ΔΔⲆᐃ] = [ᐃᐃ.ΔⵠΔΔΔⲆⲆ, ᐃᐃ.ⵠΔⵠΔᐃⲆΔ, ᐃᐃ.ⲆⲆⲆΔⲆΔⵠ];
    ᐃⵠᐃⲆᐃ[ΔⲆⵠ.ΔΔΔⵠᐃ] = [ᐃᐃ.ⵠⵠⵠᐃⵠᐃᐃ, ᐃᐃ.ⲆΔᐃΔᐃΔⲆ, ᐃᐃ.ⵠᐃⲆⵠᐃⵠΔ];
    ᐃⵠᐃⲆᐃ[ΔⲆⵠ.ⲆΔᐃⵠⲆΔⲆ] = [ᐃᐃ.ᐃᐃᐃᐃΔΔΔ, ᐃᐃ.ⵠᐃΔᐃΔⵠⲆ, ᐃᐃ.ΔⲆⲆⲆᐃᐃⲆ];
    ⵠᐃΔΔΔΔᐃ = u;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, -29, 205, ca | aa, ha);
    this.buttons[u++].view = J;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, md, -29, 300, ca | aa, ha);
    this.buttons[u++].view = J;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, Nl, -29, 395, ca | aa, ha);
    this.buttons[u++].view = J;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, 65, 205, ca | aa, ha);
    this.buttons[u++].view = J;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, tq, 65, 300, ca | aa, ha);
    this.buttons[u++].view = J;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, 65, 395, ca | aa, ha);
    this.buttons[u++].view = J;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, 159, 205, ca | aa, ha);
    this.buttons[u++].view = J;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, Pn, 159, 300, ca | aa, ha);
    this.buttons[u++].view = J;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, 159, 395, ca | aa, ha);
    this.buttons[u++].view = J;
    this.buttons[u] = zf(39, 122, 0, [ᐃᐃ.ΔΔΔᐃΔⲆΔ, ᐃᐃ.ⵠΔⵠᐃᐃᐃΔ, ᐃᐃ.ⵠⲆᐃᐃᐃⲆᐃ], 1, 0, os, -61, 315, ca | aa, ha);
    this.buttons[u++].view = J;
    this.buttons[u] = zf(39, 122, 0, [ᐃᐃ.ᐃΔⲆΔΔΔⵠ, ᐃᐃ.ⲆᐃⲆⲆⵠΔⵠ, ᐃᐃ.ΔⵠΔⵠᐃΔΔ], 1, 0, da, 260, 315, ca | aa, ha);
    this.buttons[u++].view = J;
    this.buttons[u] = zf(115, 73, 0, [ᐃᐃ.ᐃᐃΔⵠⲆ, ᐃᐃ.ⵠᐃⲆⵠⵠ, ᐃᐃ.ⲆᐃᐃΔⵠ], 1, 0, function () {
      V(m);
    }, -320, 470, ca | aa, ha);
    this.buttons[u++].view = J;
    ⲆᐃⵠΔᐃΔᐃᐃⵠ = u;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, -29, 205, ca | aa, ha);
    this.buttons[u++].view = N;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, -29, 300, ca | aa, ha);
    this.buttons[u++].view = N;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, -29, 395, ca | aa, ha);
    this.buttons[u++].view = N;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, 65, 205, ca | aa, ha);
    this.buttons[u++].view = N;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, 65, 300, ca | aa, ha);
    this.buttons[u++].view = N;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, ct, 65, 395, ca | aa, ha);
    this.buttons[u++].view = N;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, $q, 159, 205, ca | aa, ha);
    this.buttons[u++].view = N;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, 159, 300, ca | aa, ha);
    this.buttons[u++].view = N;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, 159, 395, ca | aa, ha);
    this.buttons[u++].view = N;
    this.buttons[u] = zf(39, 122, 0, [ᐃᐃ.ΔΔΔᐃΔⲆΔ, ᐃᐃ.ⵠΔⵠᐃᐃᐃΔ, ᐃᐃ.ⵠⲆᐃᐃᐃⲆᐃ], 1, 0, undefined, -61, 315, ca | aa, ha);
    this.buttons[u++].view = N;
    this.buttons[u] = zf(39, 122, 0, [ᐃᐃ.ᐃΔⲆΔΔΔⵠ, ᐃᐃ.ⲆᐃⲆⲆⵠΔⵠ, ᐃᐃ.ΔⵠΔⵠᐃΔΔ], 1, 0, undefined, 260, 315, ca | aa, ha);
    this.buttons[u++].view = N;
    this.buttons[u] = zf(115, 73, 0, [ᐃᐃ.ᐃᐃΔⵠⲆ, ᐃᐃ.ⵠᐃⲆⵠⵠ, ᐃᐃ.ⲆᐃᐃΔⵠ], 1, 0, function () {
      V(m);
    }, -320, 470, ca | aa, ha);
    this.buttons[u++].view = N;
    ΔΔⲆΔⲆᐃΔⲆⵠ = u;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, -29, 205, ca | aa, ha);
    this.buttons[u++].view = O;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, -29, 300, ca | aa, ha);
    this.buttons[u++].view = O;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, -29, 395, ca | aa, ha);
    this.buttons[u++].view = O;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, Pn, 65, 205, ca | aa, ha);
    this.buttons[u++].view = O;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, 65, 300, ca | aa, ha);
    this.buttons[u++].view = O;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, $q, 65, 395, ca | aa, ha);
    this.buttons[u++].view = O;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, os, 159, 205, ca | aa, ha);
    this.buttons[u++].view = O;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, 159, 300, ca | aa, ha);
    this.buttons[u++].view = O;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, 159, 395, ca | aa, ha);
    this.buttons[u++].view = O;
    this.buttons[u] = zf(39, 122, 0, [ᐃᐃ.ΔΔΔᐃΔⲆΔ, ᐃᐃ.ⵠΔⵠᐃᐃᐃΔ, ᐃᐃ.ⵠⲆᐃᐃᐃⲆᐃ], 1, 0, da, -61, 315, ca | aa, ha);
    this.buttons[u++].view = O;
    this.buttons[u] = zf(39, 122, 0, [ᐃᐃ.ᐃΔⲆΔΔΔⵠ, ᐃᐃ.ⲆᐃⲆⲆⵠΔⵠ, ᐃᐃ.ΔⵠΔⵠᐃΔΔ], 1, 0, Yg, 260, 315, ca | aa, ha);
    this.buttons[u++].view = O;
    this.buttons[u] = zf(115, 73, 0, [ᐃᐃ.ᐃᐃΔⵠⲆ, ᐃᐃ.ⵠᐃⲆⵠⵠ, ᐃᐃ.ⲆᐃᐃΔⵠ], 1, 0, function () {
      V(m);
    }, -320, 470, ca | aa, ha);
    this.buttons[u++].view = O;
    ⵠΔΔⲆΔΔⵠⵠΔ = u;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, Nl, -29, 205, ca | aa, ha);
    this.buttons[u++].view = M;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, -29, 300, ca | aa, ha);
    this.buttons[u++].view = M;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, -29, 395, ca | aa, ha);
    this.buttons[u++].view = M;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, oj, 65, 205, ca | aa, ha);
    this.buttons[u++].view = M;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, Yg, 65, 300, ca | aa, ha);
    this.buttons[u++].view = M;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, 65, 395, ca | aa, ha);
    this.buttons[u++].view = M;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, Pn, 159, 205, ca | aa, ha);
    this.buttons[u++].view = M;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, Rr, 159, 300, ca | aa, ha);
    this.buttons[u++].view = M;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, $q, 159, 395, ca | aa, ha);
    this.buttons[u++].view = M;
    this.buttons[u] = zf(39, 122, 0, [ᐃᐃ.ΔΔΔᐃΔⲆΔ, ᐃᐃ.ⵠΔⵠᐃᐃᐃΔ, ᐃᐃ.ⵠⲆᐃᐃᐃⲆᐃ], 1, 0, undefined, -61, 315, ca | aa, ha);
    this.buttons[u++].view = M;
    this.buttons[u] = zf(39, 122, 0, [ᐃᐃ.ᐃΔⲆΔΔΔⵠ, ᐃᐃ.ⲆᐃⲆⲆⵠΔⵠ, ᐃᐃ.ΔⵠΔⵠᐃΔΔ], 1, 0, Bt, 260, 315, ca | aa, ha);
    this.buttons[u++].view = M;
    this.buttons[u] = zf(115, 73, 0, [ᐃᐃ.ᐃᐃΔⵠⲆ, ᐃᐃ.ⵠᐃⲆⵠⵠ, ᐃᐃ.ⲆᐃᐃΔⵠ], 1, 0, function () {
      V(m);
    }, -320, 470, ca | aa, ha);
    this.buttons[u++].view = M;
    ⲆⵠⵠᐃⲆΔΔᐃⵠ = u;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, -29, 205, ca | aa, ha);
    this.buttons[u++].view = q;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, -29, 300, ca | aa, ha);
    this.buttons[u++].view = q;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, -29, 395, ca | aa, ha);
    this.buttons[u++].view = q;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, 65, 205, ca | aa, ha);
    this.buttons[u++].view = q;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, 65, 300, ca | aa, ha);
    this.buttons[u++].view = q;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, 65, 395, ca | aa, ha);
    this.buttons[u++].view = q;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, 159, 205, ca | aa, ha);
    this.buttons[u++].view = q;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, 159, 300, ca | aa, ha);
    this.buttons[u++].view = q;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, da, 159, 395, ca | aa, ha);
    this.buttons[u++].view = q;
    this.buttons[u] = zf(39, 122, 0, [ᐃᐃ.ΔΔΔᐃΔⲆΔ, ᐃᐃ.ⵠΔⵠᐃᐃᐃΔ, ᐃᐃ.ⵠⲆᐃᐃᐃⲆᐃ], 1, 0, oh, -61, 315, ca | aa, ha);
    this.buttons[u++].view = q;
    this.buttons[u] = zf(39, 122, 0, [ᐃᐃ.ᐃΔⲆΔΔΔⵠ, ᐃᐃ.ⲆᐃⲆⲆⵠΔⵠ, ᐃᐃ.ΔⵠΔⵠᐃΔΔ], 1, 0, undefined, 260, 315, ca | aa, ha);
    this.buttons[u++].view = q;
    this.buttons[u] = zf(115, 73, 0, [ᐃᐃ.ᐃᐃΔⵠⲆ, ᐃᐃ.ⵠᐃⲆⵠⵠ, ᐃᐃ.ⲆᐃᐃΔⵠ], 1, 0, function () {
      V(m);
    }, -320, 470, ca | aa, ha);
    this.buttons[u++].view = q;
    ⲆⵠⲆᐃᐃΔⲆΔⲆ = u;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, oh, -29, 205, ca | aa, ha);
    this.buttons[u++].view = L;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, Rr, -29, 300, ca | aa, ha);
    this.buttons[u++].view = L;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, -29, 395, ca | aa, ha);
    this.buttons[u++].view = L;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, Yh, 65, 205, ca | aa, ha);
    this.buttons[u++].view = L;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, os, 65, 300, ca | aa, ha);
    this.buttons[u++].view = L;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, Rr, 65, 395, ca | aa, ha);
    this.buttons[u++].view = L;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, 159, 205, ca | aa, ha);
    this.buttons[u++].view = L;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, 159, 300, ca | aa, ha);
    this.buttons[u++].view = L;
    this.buttons[u] = zf(178, 182, 0, [ᐃᐃ.ⵠᐃΔⲆ, ᐃᐃ.ᐃⲆΔⲆ, ᐃᐃ.ⵠⵠᐃⵠ], 1, 0, undefined, 159, 395, ca | aa, ha);
    this.buttons[u++].view = L;
    this.buttons[u] = zf(39, 122, 0, [ᐃᐃ.ΔΔΔᐃΔⲆΔ, ᐃᐃ.ⵠΔⵠᐃᐃᐃΔ, ᐃᐃ.ⵠⲆᐃᐃᐃⲆᐃ], 1, 0, undefined, -61, 315, ca | aa, ha);
    this.buttons[u++].view = L;
    this.buttons[u] = zf(39, 122, 0, [ᐃᐃ.ᐃΔⲆΔΔΔⵠ, ᐃᐃ.ⲆᐃⲆⲆⵠΔⵠ, ᐃᐃ.ΔⵠΔⵠᐃΔΔ], 1, 0, oj, 260, 315, ca | aa, ha);
    this.buttons[u++].view = L;
    this.buttons[u] = zf(115, 73, 0, [ᐃᐃ.ᐃᐃΔⵠⲆ, ᐃᐃ.ⵠᐃⲆⵠⵠ, ᐃᐃ.ⲆᐃᐃΔⵠ], 1, 0, function () {
      V(m);
    }, -320, 470, ca | aa, ha);
    this.buttons[u++].view = L;
    this.buttons[u] = zf(260, 260, 0, [ᐃᐃ.ⲆⲆᐃΔⵠΔΔ, ᐃᐃ.ⲆᐃⵠⲆⲆᐃⲆ, ᐃᐃ.ΔΔΔⵠⲆⲆⵠ], 1, 0, function () {
      if (w.ⲆᐃᐃᐃΔ()) {
        Oy(3, 50);
      } else {
        V(v);
      }
    }, -65, 197, ca | aa, ha);
    this.buttons[u++].view = B;
    this.buttons[u] = zf(115, 73, 0, [ᐃᐃ.ᐃᐃΔⵠⲆ, ᐃᐃ.ⵠᐃⲆⵠⵠ, ᐃᐃ.ⲆᐃᐃΔⵠ], 1, 0, function () {
      V(c);
    }, 309, 180, ca | aa, ha);
    this.buttons[u++].view = B;
    this.buttons[u] = zf(260, 260, 0, [ᐃᐃ.ΔⵠΔᐃᐃΔᐃ, ᐃᐃ.ΔⲆᐃΔΔᐃⵠ, ᐃᐃ.ⲆⲆⵠⵠⲆⲆⵠ], 1, 0, function () {
      if (w.ⲆᐃᐃᐃΔ()) {
        Oy(0, 100);
      } else {
        V(v);
      }
    }, -65, 197, ca | aa, ha);
    this.buttons[u++].view = x;
    this.buttons[u] = zf(115, 73, 0, [ᐃᐃ.ᐃᐃΔⵠⲆ, ᐃᐃ.ⵠᐃⲆⵠⵠ, ᐃᐃ.ⲆᐃᐃΔⵠ], 1, 0, function () {
      V(c);
    }, 309, 180, ca | aa, ha);
    this.buttons[u++].view = x;
    this.buttons[u] = zf(260, 260, 0, [ᐃᐃ.ⵠΔⲆⵠⵠⲆΔ, ᐃᐃ.ΔᐃᐃⲆᐃΔᐃ, ᐃᐃ.ⵠⵠⵠⲆᐃⲆΔ], 1, 0, function () {
      if (w.ⲆᐃᐃᐃΔ()) {
        Oy(4, 150);
      } else {
        V(v);
      }
    }, -65, 197, ca | aa, ha);
    this.buttons[u++].view = E;
    this.buttons[u] = zf(115, 73, 0, [ᐃᐃ.ᐃᐃΔⵠⲆ, ᐃᐃ.ⵠᐃⲆⵠⵠ, ᐃᐃ.ⲆᐃᐃΔⵠ], 1, 0, function () {
      V(c);
    }, 309, 180, ca | aa, ha);
    this.buttons[u++].view = E;
    this.buttons[u] = zf(260, 260, 0, [ᐃᐃ.ᐃΔⲆᐃΔᐃⲆ, ᐃᐃ.ᐃΔⵠⵠΔⲆᐃ, ᐃᐃ.ⵠᐃⲆⵠⵠᐃΔ], 1, 0, function () {
      if (w.ⲆᐃᐃᐃΔ()) {
        Oy(1, 300);
      } else {
        V(v);
      }
    }, -65, 197, ca | aa, ha);
    this.buttons[u++].view = G;
    this.buttons[u] = zf(115, 73, 0, [ᐃᐃ.ᐃᐃΔⵠⲆ, ᐃᐃ.ⵠᐃⲆⵠⵠ, ᐃᐃ.ⲆᐃᐃΔⵠ], 1, 0, function () {
      V(c);
    }, 309, 180, ca | aa, ha);
    this.buttons[u++].view = G;
    this.buttons[u] = zf(260, 260, 0, [ᐃᐃ.ⲆᐃⵠΔⲆᐃᐃ, ᐃᐃ.ⵠΔⲆⵠⵠΔⵠ, ᐃᐃ.ⵠⵠΔΔⲆⵠⲆ], 1, 0, function () {
      if (w.ⲆᐃᐃᐃΔ()) {
        Oy(2, 600);
      } else {
        V(v);
      }
    }, -65, 197, ca | aa, ha);
    this.buttons[u++].view = F;
    this.buttons[u] = zf(115, 73, 0, [ᐃᐃ.ᐃᐃΔⵠⲆ, ᐃᐃ.ⵠᐃⲆⵠⵠ, ᐃᐃ.ⲆᐃᐃΔⵠ], 1, 0, function () {
      V(c);
    }, 309, 180, ca | aa, ha);
    this.buttons[u++].view = F;
    this.buttons[u] = zf(260, 260, 0, [ᐃᐃ.ᐃΔⲆᐃΔᐃⲆ, ᐃᐃ.ᐃΔⵠⵠΔⲆᐃ, ᐃᐃ.ⵠᐃⲆⵠⵠᐃΔ], 1, 0, function () {
      if (w.ⲆᐃᐃᐃΔ()) {
        Oy(5, 300);
      } else {
        V(v);
      }
    }, -65, 197, ca | aa, ha);
    this.buttons[u++].view = I;
    this.buttons[u] = zf(115, 73, 0, [ᐃᐃ.ᐃᐃΔⵠⲆ, ᐃᐃ.ⵠᐃⲆⵠⵠ, ᐃᐃ.ⲆᐃᐃΔⵠ], 1, 0, function () {
      V(c);
    }, 309, 180, ca | aa, ha);
    this.buttons[u++].view = I;
    var ta = u;
    this.buttons[u] = zf(46, 51, 0, [ᐃᐃ.ⲆⲆΔⲆⲆⲆᐃ, ᐃᐃ.ⲆᐃⵠⵠⲆⵠᐃ, ᐃᐃ.ΔⲆⲆⲆΔⵠΔ], 1, 0, function () {
      sa(undefined, 0);
    }, -305, 132, ca | aa, ha);
    this.buttons[u++].view = d;
    var ua = u;
    this.buttons[u] = zf(46, 51, 0, [ᐃᐃ.ΔΔᐃΔᐃΔΔ, ᐃᐃ.ᐃᐃΔᐃⵠⵠⵠ, ᐃᐃ.ⵠΔΔⵠᐃⵠᐃ], 1, 0, function () {
      sa(tq, 1);
    }, -273, 132, ca | aa, ha);
    this.buttons[u++].view = d;
    var va = u;
    this.buttons[u] = zf(46, 51, 0, [ᐃᐃ.ᐃⵠⵠⲆⲆⵠΔ, ᐃᐃ.ᐃⵠⵠᐃΔⲆⲆ, ᐃᐃ.ⵠⲆΔΔⲆⵠᐃ], 1, 0, function () {
      sa(undefined, 2);
    }, -241, 132, ca | aa, ha);
    this.buttons[u++].view = d;
    var wa = u;
    this.buttons[u] = zf(46, 51, 0, [ᐃᐃ.ⵠⲆᐃΔΔⲆⵠ, ᐃᐃ.ⲆⲆⲆⵠⲆΔΔ, ᐃᐃ.ΔΔΔΔᐃᐃⲆ], 1, 0, function () {
      sa(undefined, 3);
    }, -305, 165, ca | aa, ha);
    this.buttons[u++].view = d;
    var xa = u;
    this.buttons[u] = zf(46, 51, 0, [ᐃᐃ.ᐃᐃⵠᐃⵠΔᐃ, ᐃᐃ.ΔΔΔΔΔⲆΔ, ᐃᐃ.ΔᐃΔᐃⵠⲆΔ], 1, 0, function () {
      sa(undefined, 4);
    }, -273, 165, ca | aa, ha);
    this.buttons[u++].view = d;
    var ya = u;
    this.buttons[u] = zf(46, 51, 0, [ᐃᐃ.ⵠΔᐃⲆΔⵠⵠ, ᐃᐃ.ᐃᐃⲆⵠⲆⲆⵠ, ᐃᐃ.ΔⵠⲆⵠΔⲆΔ], 1, 0, function () {
      sa(undefined, 5);
    }, -241, 165, ca | aa, ha);
    this.buttons[u++].view = d;
    var za = u;
    this.buttons[u] = zf(460, 73, 0, [ᐃᐃ.ⲆⵠᐃⲆⵠⵠⲆ, ᐃᐃ.ⵠᐃⵠⲆΔΔᐃ, ᐃᐃ.ⵠⲆⵠⵠᐃⲆⲆ], 1, 0, function () {
      sa(-1);
    }, -180, 170, ca | aa, ha);
    this.buttons[u++].view = d;
    var Aa = u;
    this.buttons[u] = zf(222, 68, 0, [ᐃᐃ.ΔⲆⲆᐃⲆⵠᐃ, ᐃᐃ.ⲆΔⵠⵠᐃΔΔ, ᐃᐃ.ΔΔⲆᐃΔΔΔ], 1, 0, function () {
      sa(0);
    }, -180, 215, ca | aa, ha);
    this.buttons[u++].view = d;
    var Ba = u;
    this.buttons[u] = zf(222, 68, 0, [ᐃᐃ.ΔΔⲆⲆΔᐃⵠ, ᐃᐃ.ᐃⵠⲆⵠΔΔΔ, ᐃᐃ.ⲆⵠⵠⲆⵠⲆΔ], 1, 0, function () {
      sa(4);
    }, -180, 260, ca | aa, ha);
    this.buttons[u++].view = d;
    var Ca = u;
    this.buttons[u] = zf(222, 68, 0, [ᐃᐃ.ᐃⲆᐃᐃᐃⵠⵠ, ᐃᐃ.ⲆᐃⲆᐃᐃᐃⵠ, ᐃᐃ.ⵠⲆⲆⵠⵠΔΔ], 1, 0, function () {
      sa(2);
    }, -60, 215, ca | aa, ha);
    this.buttons[u++].view = d;
    var Da = u;
    this.buttons[u] = zf(222, 68, 0, [ᐃᐃ.ⵠΔⲆⵠᐃᐃΔ, ᐃᐃ.ΔⵠΔⲆΔᐃⵠ, ᐃᐃ.ᐃᐃΔⵠᐃⵠΔ], 1, 0, function () {
      sa(3);
    }, -60, 260, ca | aa, ha);
    this.buttons[u++].view = d;
    this.ᐃⵠᐃΔΔⲆⵠ = u;
    this.buttons[u] = zf(143, 66, 0, [ᐃᐃ.ⵠⵠⲆᐃᐃᐃⵠ, ᐃᐃ.ⵠⵠᐃⲆᐃᐃΔ, ᐃᐃ.ⲆᐃⲆᐃᐃⵠΔ], 1, 0, function () {
      My(undefined, Px.ᐃⵠᐃΔΔⲆⵠ);
    }, -298, 110, ca | aa, ha);
    this.buttons[u++].view = D;
    this.ΔⵠΔⵠⵠⵠⵠ = u;
    this.buttons[u] = zf(104, 66, 0, [ᐃᐃ.ⵠΔᐃΔⵠΔΔ, ᐃᐃ.ⲆⵠⵠΔᐃᐃᐃ, ᐃᐃ.ᐃⵠⲆᐃᐃⲆΔ], 1, 0, function () {
      My(undefined, Px.ΔⵠΔⵠⵠⵠⵠ);
    }, -223, 110, ca | aa, ha);
    this.buttons[u++].view = D;
    this.ᐃⵠⲆⵠⲆⲆΔ = u;
    this.buttons[u] = zf(110, 66, 0, [ᐃᐃ.ΔⲆⲆΔⵠΔΔ, ᐃᐃ.ⲆⵠⲆΔⵠⲆⲆ, ᐃᐃ.ᐃⲆΔΔΔΔΔ], 1, 0, function () {
      My(Yg, Px.ᐃⵠⲆⵠⲆⲆΔ);
    }, -168, 110, ca | aa, ha);
    this.buttons[u++].view = D;
    this.ⲆⲆᐃΔⲆᐃᐃ = u;
    this.buttons[u] = zf(88, 66, 0, [ᐃᐃ.ΔⲆⵠⲆⵠΔᐃ, ᐃᐃ.ⲆᐃⵠⵠⲆᐃΔ, ᐃᐃ.ⲆᐃⵠⵠᐃⲆⲆ], 1, 0, function () {
      My(sk, Px.ⲆⲆᐃΔⲆᐃᐃ);
    }, -110, 110, ca | aa, ha);
    this.buttons[u++].view = D;
    this.ⲆΔⲆΔΔⲆᐃ = u;
    this.buttons[u] = zf(88, 66, 0, [ᐃᐃ.ᐃⲆᐃᐃⲆⲆⵠ, ᐃᐃ.ⵠⲆⲆⲆΔΔΔ, ᐃᐃ.ⵠⲆⵠᐃⵠᐃⲆ], 1, 0, function () {
      My(Rr, Px.ⲆΔⲆΔΔⲆᐃ);
    }, -63, 110, ca | aa, ha);
    this.buttons[u++].view = D;
    this.buttons[u] = zf(86, 44, 0, [ᐃᐃ.ΔᐃᐃΔⲆΔⲆ, ᐃᐃ.ⲆᐃᐃΔⵠΔⲆ, ᐃᐃ.ᐃᐃⵠⲆⵠⲆΔ], 1, 0, function () {
      oc.open("./terms.html", "_blank");
    }, 349, 290, ca | aa, ha);
    this.buttons[u++].view = c;
    var Ea = new i(ΔⲆᐃΔ.ⵠⲆⵠⲆᐃ, ⵠᐃΔΔΔΔᐃ, function (a) {
      Px.ⵠᐃᐃⲆ = a;
      if (Px.unlock.ⵠᐃᐃⲆ[a] === 1) {
        ΔⵠⵠⲆ.set("starve_skin", "" + a, {
          expires: 30
        });
      }
    }, this.ⵠᐃᐃⲆ, this.unlock.ⵠᐃᐃⲆ);
    var Fa = new i(ΔⲆᐃΔ.Ⲇᐃᐃⵠ, ⵠΔΔⲆΔΔⵠⵠΔ, function (a) {
      Px.ⵠΔᐃΔᐃ = a;
      if (Px.unlock.ⵠΔᐃΔᐃ[a] === 1) {
        ΔⵠⵠⲆ.set("starve_bag", "" + a, {
          expires: 30
        });
      }
    }, this.ⵠΔᐃΔᐃ, this.unlock.ⵠΔᐃΔᐃ);
    var Ga = new i(ΔⲆᐃΔ.ᐃᐃⲆᐃⲆ, ⲆⵠⵠᐃⲆΔΔᐃⵠ, function (a) {
      Px.ᐃⵠΔⵠⵠ = a;
      if (Px.unlock.ᐃⵠΔⵠⵠ[a] === 1) {
        ΔⵠⵠⲆ.set("starve_book", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃⵠΔⵠⵠ, this.unlock.ᐃⵠΔⵠⵠ);
    var Ha = new i(ΔⲆᐃΔ.ⲆᐃⵠⲆⲆ, ⲆⵠⲆᐃᐃΔⲆΔⲆ, function (a) {
      Px.ΔⲆⲆⲆⵠ = a;
      if (Px.unlock.ΔⲆⲆⲆⵠ[a] === 1) {
        ΔⵠⵠⲆ.set("starve_dead", "" + a, {
          expires: 30
        });
      }
    }, this.ΔⲆⲆⲆⵠ, this.unlock.ΔⲆⲆⲆⵠ);
    var Ia = new i(ΔⲆᐃΔ.ⲆᐃⵠⲆⲆ, ΔΔⲆΔⲆᐃΔⲆⵠ, function (a) {
      Px.ⵠᐃⵠⲆᐃ = a;
      if (Px.unlock.ⵠᐃⵠⲆᐃ[a] === 1) {
        ΔⵠⵠⲆ.set("starve_crate", "" + a, {
          expires: 30
        });
      }
    }, this.ⵠᐃⵠⲆᐃ, this.unlock.ⵠᐃⵠⲆᐃ);
    var Ja = new i(ΔⲆᐃΔ.ᐃΔⲆⵠⵠ, ⲆᐃⵠΔᐃΔᐃᐃⵠ, function (a) {
      Px.ᐃⲆⵠⲆⵠ = a;
      if (Px.unlock.ᐃⲆⵠⲆⵠ[a] === 1) {
        ΔⵠⵠⲆ.set("starve_accessory", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃⲆⵠⲆⵠ, this.unlock.ᐃⲆⵠⲆⵠ);
    this.ⵠᐃⲆⲆⵠᐃᐃ = function (a) {
      Wx.ΔⵠⲆⲆ = cf(w.Δᐃ, a);
      for (var b = 0; b < w.buttons.length; b++) {
        if (ia === w.buttons[b].info.active) {
          w.buttons[b].ΔᐃⵠΔ(w.Δᐃ, Wx.ΔⵠⲆⲆ, uf);
        }
      }
    };
    this.ⵠⵠᐃⵠⲆⲆΔ = function (a) {
      Wx.ΔⵠⲆⲆ = cf(w.Δᐃ, a);
      for (var b = 0; b < w.buttons.length; b++) {
        var c = w.buttons[b];
        if (c.info.active === ia && c.ΔᐃⵠΔ(w.Δᐃ, Wx.ΔⵠⲆⲆ, bf)) {
          c.info.callback();
          return;
        }
      }
    };
    this.ΔᐃΔΔᐃⲆΔ = false;
    this.ΔΔΔⲆΔᐃᐃ = function (a) {
      Wx.ΔⵠⲆⲆ = cf(w.Δᐃ, a);
      var b = Vg;
      for (var c = 0; c < w.buttons.length; c++) {
        if (ia === w.buttons[c].info.active) {
          b |= w.buttons[c].ΔᐃⵠΔ(w.Δᐃ, Wx.ΔⵠⲆⲆ, lf);
        }
      }
      if (b !== w.ΔᐃΔΔᐃⲆΔ) {
        w.ΔᐃΔΔᐃⲆΔ = b;
        e.style.cursor = b ? w.ᐃⲆⵠⵠΔⵠⲆ : w.ⲆᐃᐃᐃⲆⲆᐃ;
      }
    };
    this.ⵠΔᐃⲆᐃⵠⵠ = function () {
      oc.addEventListener("mousedown", this.ⵠᐃⲆⲆⵠᐃᐃ, zl);
      oc.addEventListener("mouseup", this.ⵠⵠᐃⵠⲆⲆΔ, false);
      oc.addEventListener("mousemove", this.ΔΔΔⲆΔᐃᐃ, f);
    };
    this.ᐃᐃⵠⵠⲆᐃⲆ = function () {
      oc.removeEventListener("mousedown", this.ⵠᐃⲆⲆⵠᐃᐃ, zl);
      oc.removeEventListener("mouseup", this.ⵠⵠᐃⵠⲆⲆΔ, f);
      oc.removeEventListener("mousemove", this.ΔΔΔⲆΔᐃᐃ, Vg);
    };
  }
  function ix(c, i) {
    var j = this;
    this.Δᐃ = c;
    this.Δ = i;
    if (oc.navigator.userAgent.indexOf("Edge") > -1) {
      this.ⲆᐃᐃᐃⲆⲆᐃ = "default";
      this.ᐃⲆⵠⵠΔⵠⲆ = "pointer";
    } else {
      this.ⲆᐃᐃᐃⲆⲆᐃ = "url('img/cursor0.png'), default";
      this.ᐃⲆⵠⵠΔⵠⲆ = "url('img/cursor1.png'), pointer";
    }
    this.ᐃᐃⲆᐃᐃΔⲆ = 1;
    this.ⵠᐃⲆⲆᐃⲆⲆ = 1;
    this.ᐃⲆⵠᐃΔΔⲆ = 1;
    this.ᐃΔⵠᐃⲆᐃⵠ = 1;
    this.ⵠᐃΔⲆΔⵠᐃⵠΔ = {
      id: document.getElementById("team_box"),
      style: document.getElementById("team_box").style,
      ⵠⵠᐃ: function () {
        this.style.left = Math.floor(iq - 125) + "px";
        this.style.top = "110px";
      }
    };
    this.ΔΔⲆΔ = {
      ΔⲆⵠΔᐃⲆΔ: zf(60, 60, 0, ᐃΔ[782]),
      ⲆΔⵠⲆⵠΔΔ: zf(60, 60, 0, ᐃΔ[783])
    };
    this.sign = {
      open: zl,
      ⵠᐃⲆΔⲆᐃⲆᐃΔ: 0,
      ⵠⵠⵠᐃΔⲆⵠ: document.getElementById("sign_object"),
      ΔᐃΔᐃⲆⲆᐃ: 0,
      id: document.getElementById("sign_window"),
      style: document.getElementById("sign_window").style,
      button: zf(60, 60, 0, ᐃΔ[803]),
      ⵠⵠᐃⵠⲆⲆⲆ: function () {
        var a = Math.floor(Math.floor((3 + Rx.ⲆΔⲆΔ.ⵠⵠⲆⵠᐃ.length) / 4) * (10 + ᐃΔ[316][0].width) + 35);
        this.button.info.translate.x = a;
        this.button.info.translate.y = 22;
      },
      ⵠⵠᐃ: function () {
        this.style.left = Math.floor(iq - 150) + "px";
        this.style.top = Math.floor(jq - 115) + "px";
      },
      ⵠⵠΔⲆᐃ: function () {
        Tx.sign.style.display = "none";
        Tx.sign.open = false;
      },
      select: function () {
        Tx.sign.open = !Tx.sign.open;
        if (Tx.sign.open) {
          Tx.sign.style.display = "inline-block";
        } else {
          Tx.sign.style.display = "none";
        }
      },
      ok: function () {
        Mx.ᐃⵠⵠᐃⲆⲆᐃΔΔ(Rx.sign.Δⵠᐃᐃⵠ, Tx.sign.ΔᐃΔᐃⲆⲆᐃ);
        Tx.sign.select();
      },
      up: function () {
        Tx.sign.ΔᐃΔᐃⲆⲆᐃ = Tx.sign.ΔᐃΔᐃⲆⲆᐃ === 0 ? 3 : Tx.sign.ΔᐃΔᐃⲆⲆᐃ - 1;
        Tx.sign.ⵠⵠⵠᐃΔⲆⵠ.src = "./img/sign" + Tx.sign.ΔᐃΔᐃⲆⲆᐃ + ".png";
      },
      down: function () {
        Tx.sign.ΔᐃΔᐃⲆⲆᐃ = (Tx.sign.ΔᐃΔᐃⲆⲆᐃ + 1) % 4;
        Tx.sign.ⵠⵠⵠᐃΔⲆⵠ.src = "./img/sign" + Tx.sign.ΔᐃΔᐃⲆⲆᐃ + ".png";
      }
    };
    document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, false);
    document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, gr);
    document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, Wh);
    document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, gr);
    this.ⵠΔⵠⵠⲆ = {
      open: rk,
      id: document.getElementById("shop_market"),
      style: document.getElementById("shop_market").style,
      items: [{
        id: 0,
        name: "wood",
        ᐃⲆⵠᐃᐃ: 1,
        b: 1,
        a: 3,
        ᐃⵠΔΔⵠ: 316
      }, {
        id: 1,
        name: "stone",
        ᐃⲆⵠᐃᐃ: 1,
        b: 1,
        a: 4,
        ᐃⵠΔΔⵠ: 315
      }, {
        id: 2,
        name: "gold",
        ᐃⲆⵠᐃᐃ: 1,
        b: 1,
        a: 6,
        ᐃⵠΔΔⵠ: 297
      }, {
        id: 3,
        name: "diamond",
        ᐃⲆⵠᐃᐃ: 4,
        b: 4,
        a: 1,
        ᐃⵠΔΔⵠ: 298
      }, {
        id: 4,
        name: "amethyst",
        ᐃⲆⵠᐃᐃ: 8,
        b: 8,
        a: 1,
        ᐃⵠΔΔⵠ: 418
      }, {
        id: 5,
        name: "reidite",
        ᐃⲆⵠᐃᐃ: 16,
        b: 16,
        a: 1,
        ᐃⵠΔΔⵠ: 938
      }, {
        id: 6,
        name: "pumpkin_seed",
        ᐃⲆⵠᐃᐃ: 10,
        b: 10,
        a: 1,
        ᐃⵠΔΔⵠ: 808
      }, {
        id: 7,
        name: "carrot_seed",
        ᐃⲆⵠᐃᐃ: 16,
        b: 16,
        a: 1,
        ᐃⵠΔΔⵠ: 949
      }, {
        id: 8,
        name: "tomato_seed",
        ᐃⲆⵠᐃᐃ: 20,
        b: 20,
        a: 1,
        ᐃⵠΔΔⵠ: 959
      }, {
        id: 9,
        name: "thornbush_seed",
        ᐃⲆⵠᐃᐃ: 30,
        b: 30,
        a: 1,
        ᐃⵠΔΔⵠ: 845
      }, {
        id: 10,
        name: "garlic_seed",
        ᐃⲆⵠᐃᐃ: 40,
        b: 40,
        a: 1,
        ᐃⵠΔΔⵠ: 834
      }, {
        id: 11,
        name: "watermelon_seed",
        ᐃⲆⵠᐃᐃ: 60,
        b: 60,
        a: 1,
        ᐃⵠΔΔⵠ: 966
      }],
      button: zf(60, 60, 0, ᐃΔ[795]),
      ⵠⵠᐃ: function () {
        this.style.left = Math.floor(iq - 450) + "px";
        this.style.top = Math.floor(jq - 270) + "px";
      },
      select: function () {
        Tx.ⵠΔⵠⵠⲆ.open = !Tx.ⵠΔⵠⵠⲆ.open;
        if (Tx.ⵠΔⵠⵠⲆ.open) {
          Tx.ⵠΔⵠⵠⲆ.style.display = "inline-block";
        } else {
          Tx.ⵠΔⵠⵠⲆ.style.display = "none";
        }
      },
      ⵠⵠΔⲆᐃ: function () {
        Tx.ⵠΔⵠⵠⲆ.style.display = "none";
        Tx.ⵠΔⵠⵠⲆ.open = false;
      },
      ⵠⵠⵠⲆⲆⲆΔ: function () {
        Mx.ᐃⲆᐃⵠᐃⲆᐃⵠᐃ(this.ⵠΔΔⲆΔⲆᐃ);
      },
      ᐃΔΔΔᐃ: function () {
        this.id;
        if (this.ⵠΔΔⲆΔⲆᐃ.a === 1) {
          var a = Math.floor(Number(this.value) * this.ⵠΔΔⲆΔⲆᐃ.b);
          this.ⵠΔΔⲆΔⲆᐃ.ᐃⲆⵠᐃᐃ = a;
          document.getElementById(this.ⵠΔΔⲆΔⲆᐃ.name + "_trad_number").innerHTML = a + "";
        } else {
          a = Math.floor(Number(this.value) / this.ⵠΔΔⲆΔⲆᐃ.a);
          this.ⵠΔΔⲆΔⲆᐃ.ᐃⲆⵠᐃᐃ = a;
          document.getElementById(this.ⵠΔΔⲆΔⲆᐃ.name + "_trad_number").innerHTML = a + "";
        }
      }
    };
    document.getElementById("quit_market").addEventListener("mouseup", this.ⵠΔⵠⵠⲆ.ⵠⵠΔⲆᐃ, Vg);
    var e = [["mouseup", this.ⵠΔⵠⵠⲆ.ⵠⵠⵠⲆⲆⲆΔ, "buy_"], ["click", this.ⵠΔⵠⵠⲆ.ᐃΔΔΔᐃ, ""], ["change", this.ⵠΔⵠⵠⲆ.ᐃΔΔΔᐃ, ""], ["keypress", this.ⵠΔⵠⵠⲆ.keypress, ""]];
    for (var k = 0; k < this.ⵠΔⵠⵠⲆ.items.length; k++) {
      var m = this.ⵠΔⵠⵠⲆ.items[k];
      document.getElementById(m.name + "_market").src = ᐃΔ[m.ᐃⵠΔΔⵠ][0].ⲆᐃⲆⵠᐃ === Yg ? ᐃΔ[m.ᐃⵠΔΔⵠ][0].src : ᐃΔ[m.ᐃⵠΔΔⵠ][0].ⲆᐃⲆⵠᐃ;
      if (m.a === 1) {
        document.getElementById(m.name + "_trad_number").innerHTML = m.b;
        document.getElementById(m.name + "_number").value = 1;
        document.getElementById(m.name + "_number").step = 1;
        document.getElementById(m.name + "_number").min = 1;
        document.getElementById(m.name + "_number").max = Math.floor(255 / m.b);
      } else {
        document.getElementById(m.name + "_trad_number").innerHTML = 1;
        document.getElementById(m.name + "_number").value = m.a;
        document.getElementById(m.name + "_number").step = m.a;
        document.getElementById(m.name + "_number").min = m.a;
      }
      document.getElementById("buy_" + m.name + "_number").ⵠΔΔⲆΔⲆᐃ = m;
      document.getElementById(m.name + "_number").ⵠΔΔⲆΔⲆᐃ = m;
      for (var n = 0; n < e.length; n++) {
        document.getElementById(e[n][2] + m.name + "_number").addEventListener(e[n][0], e[n][1], false);
      }
    }
    $("[type='number']").keypress(function (a) {
      a.preventDefault();
    });
    this.options = {
      open: false,
      id: document.getElementById("option_in_game"),
      style: document.getElementById("option_in_game").style,
      ⵠⲆⲆᐃΔ: document.getElementById("agree_ing").style,
      ᐃⲆⵠΔᐃΔⵠ: document.getElementById("cancel_agree_ing").style,
      ⲆΔΔᐃⵠⵠΔ: document.getElementById("quest_agree_ing").style,
      ΔΔΔΔⵠΔΔ: document.getElementById("spectator_agree_ing").style,
      ᐃᐃΔᐃᐃⲆⲆ: document.getElementById("auto_feed_agree_ing").style,
      ᐃᐃⲆⲆⲆᐃⵠ: document.getElementById("info_agree_ing").style,
      ΔΔᐃⲆⲆΔΔ: document.getElementById("pixelated_agree_ing").style,
      button: zf(60, 60, 0, ᐃΔ[727]),
      ΔⵠⲆⵠᐃⵠⵠⵠⵠ: function () {
        Tx.options.open = !Tx.options.open;
        if (Tx.options.open) {
          Tx.options.style.display = "inline-block";
        } else {
          Tx.options.style.display = "none";
        }
      },
      ⲆⵠΔᐃᐃΔᐃΔⲆ: function () {
        Px.ΔⵠᐃΔΔⲆⲆ();
      },
      ⲆᐃⲆΔⲆᐃᐃⲆⵠ: function () {
        Px.ⵠⵠⵠⲆⵠⵠΔ();
      },
      high: function () {
        Px.ⲆΔⵠⲆⲆⲆΔΔΔ();
      },
      low: function () {
        Px.ⵠⵠⵠⵠΔⵠⲆⵠⲆ();
      },
      ΔⵠⵠⲆⵠ: function () {
        Tx.ᐃⲆΔᐃ.ΔⵠⵠⲆⵠ();
      },
      ΔⵠᐃⵠΔΔᐃⲆᐃ: function () {
        Tx.ᐃᐃⵠΔⲆ.ΔⵠⵠⲆⵠ();
      },
      ΔⲆΔⵠⵠᐃⵠⲆᐃ: function () {
        Tx.Ⲇⵠⵠⵠ.ΔⵠⵠⲆⵠ();
      },
      ⲆⵠⵠΔⵠᐃᐃᐃΔ: function () {
        Rx.ᐃΔⲆⲆⵠ.ᐃⵠᐃⲆᐃⵠⵠ();
      },
      ⲆⵠᐃᐃⵠᐃΔΔΔ: function () {
        Rx.ⵠⵠⲆⵠΔ.ᐃⵠᐃⲆᐃⵠⵠ();
      },
      ⵠⵠΔⲆᐃ: function () {
        Tx.options.style.display = "none";
        Tx.options.open = false;
      },
      ⵠⵠᐃ: function () {
        this.style.left = Math.floor(iq - 235) + "px";
        this.style.top = Math.floor(jq - 170) + "px";
      }
    };
    document.getElementById("azerty_ing").addEventListener("mouseup", this.options.ⲆⵠΔᐃᐃΔᐃΔⲆ, f);
    document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.ⲆᐃⲆΔⲆᐃᐃⲆⵠ, zl);
    document.getElementById("low_ing").addEventListener("mouseup", this.options.low, at);
    document.getElementById("high_ing").addEventListener("mouseup", this.options.high, false);
    document.getElementById("quit_opt").addEventListener("mouseup", this.options.ⵠⵠΔⲆᐃ, Kk);
    document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.ΔⵠⵠⲆⵠ, Zq);
    document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.ΔⲆΔⵠⵠᐃⵠⲆᐃ, f);
    document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.ΔⵠᐃⵠΔΔᐃⲆᐃ, Kk);
    document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.ⲆⵠⵠΔⵠᐃᐃᐃΔ, false);
    document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.ⲆⵠᐃᐃⵠᐃΔΔΔ, zk);
    this.ᐃᐃⵠΔⲆ = {
      open: false,
      ⲆⲆⲆⵠᐃ: ΔⵠⵠⲆ.get("starve_cancel") ? ΔⵠⵠⲆ.get("starve_cancel") === "0" ? 0 : 1 : 1,
      id: document.getElementById("cancel_sure_delete"),
      style: document.getElementById("cancel_sure_delete").style,
      ⵠⲆⲆᐃΔ: document.getElementById("cancel_agree").style,
      button: 0,
      ⲆΔ: 0,
      ⵠⵠΔⲆᐃ: function () {
        Tx.ᐃᐃⵠΔⲆ.style.display = "none";
        Tx.ᐃᐃⵠΔⲆ.open = Vg;
      },
      ΔⲆᐃᐃΔⲆⵠ: function () {
        if (Rx.ⲆΔⲆΔ.ΔΔⵠⲆΔ) {
          Mx.ⲆΔΔⲆⲆⲆΔΔⵠ();
        }
        Tx.ᐃᐃⵠΔⲆ.ⵠⵠΔⲆᐃ();
      },
      ΔⵠⵠⲆⵠ: function () {
        if (Tx.ᐃᐃⵠΔⲆ.ⲆⲆⲆⵠᐃ) {
          ΔⵠⵠⲆ.set("starve_cancel", "0");
          Tx.ᐃᐃⵠΔⲆ.ⵠⲆⲆᐃΔ.display = "inline-block";
          Tx.options.ᐃⲆⵠΔᐃΔⵠ.display = "none";
        } else {
          ΔⵠⵠⲆ.set("starve_cancel", "1");
          Tx.ᐃᐃⵠΔⲆ.ⵠⲆⲆᐃΔ.display = "none";
          Tx.options.ᐃⲆⵠΔᐃΔⵠ.display = "inline-block";
        }
        Tx.ᐃᐃⵠΔⲆ.ⲆⲆⲆⵠᐃ = !Tx.ᐃᐃⵠΔⲆ.ⲆⲆⲆⵠᐃ;
      },
      ΔΔⲆⲆⲆⵠΔ: function () {
        if (this.ⲆⲆⲆⵠᐃ) {
          this.style.display = "inline-block";
          this.open = true;
        } else {
          this.ΔⲆᐃᐃΔⲆⵠ();
        }
      },
      ⵠⵠᐃ: function () {
        this.style.left = Math.floor(iq - 235) + "px";
        this.style.top = Math.floor(jq - 130) + "px";
      }
    };
    this.ᐃᐃⵠΔⲆ.id.oncontextmenu = function () {
      return gn;
    };
    this.ᐃᐃⵠΔⲆ.ⵠⲆⲆᐃΔ.display = "none";
    if (this.ᐃᐃⵠΔⲆ.ⲆⲆⲆⵠᐃ) {
      this.options.ᐃⲆⵠΔᐃΔⵠ.display = "inline-block";
    } else {
      this.options.ᐃⲆⵠΔᐃΔⵠ.display = "none";
    }
    document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.ᐃᐃⵠΔⲆ.ΔⲆᐃᐃΔⲆⵠ, false);
    document.getElementById("cancel_no_delete").addEventListener("mouseup", this.ᐃᐃⵠΔⲆ.ⵠⵠΔⲆᐃ, Gl);
    document.getElementById("cancel_case_agree").addEventListener("mouseup", this.ᐃᐃⵠΔⲆ.ΔⵠⵠⲆⵠ, co);
    document.addEventListener("cancel_sure_delete", function (a) {
      a.preventDefault();
    }, false);
    this.ⲆⵠⲆΔⲆⲆᐃ = {
      ⲆⲆⲆⵠᐃ: ΔⵠⵠⲆ.get("starve_aliasing") ? ΔⵠⵠⲆ.get("starve_aliasing") === "0" ? 0 : 1 : 1,
      ⲆⲆΔⲆⵠⲆΔ: function (a) {
        document.getElementById("game_canvas").style.imageRendering = a ? "pixelated" : "auto";
      },
      ΔⵠⵠⲆⵠ: function () {
        if (Tx.ⲆⵠⲆΔⲆⲆᐃ.ⲆⲆⲆⵠᐃ === 0) {
          ΔⵠⵠⲆ.set("starve_aliasing", "1");
          Tx.ⲆⵠⲆΔⲆⲆᐃ.ⲆⲆΔⲆⵠⲆΔ(1);
          Tx.options.ΔΔᐃⲆⲆΔΔ.display = "inline-block";
        } else {
          ΔⵠⵠⲆ.set("starve_aliasing", "0");
          Tx.ⲆⵠⲆΔⲆⲆᐃ.ⲆⲆΔⲆⵠⲆΔ(0);
          Tx.options.ΔΔᐃⲆⲆΔΔ.display = "none";
        }
        Tx.ⲆⵠⲆΔⲆⲆᐃ.ⲆⲆⲆⵠᐃ = (Tx.ⲆⵠⲆΔⲆⲆᐃ.ⲆⲆⲆⵠᐃ + 1) % 2;
      }
    };
    if (this.ⲆⵠⲆΔⲆⲆᐃ.ⲆⲆⲆⵠᐃ === 1) {
      this.options.ΔΔᐃⲆⲆΔΔ.display = "inline-block";
    } else {
      this.ⲆⵠⲆΔⲆⲆᐃ.ⲆⲆΔⲆⵠⲆΔ(0);
      this.options.ΔΔᐃⲆⲆΔΔ.display = "none";
    }
    document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.ⲆⵠⲆΔⲆⲆᐃ.ΔⵠⵠⲆⵠ, Zq);
    this.ⵠᐃⵠⲆⵠ = {
      ⲆⲆⲆⵠᐃ: ΔⵠⵠⲆ.get("starve_info_box") ? ΔⵠⵠⲆ.get("starve_info_box") === "0" ? 0 : 1 : 1,
      display: 0,
      x: 0,
      y: 0,
      id: 0,
      ⲆΔⲆΔ: 0,
      ΔⵠⵠⲆⵠ: function () {
        if (Tx.ⵠᐃⵠⲆⵠ.ⲆⲆⲆⵠᐃ === 0) {
          ΔⵠⵠⲆ.set("starve_info_box", "1");
          Tx.options.ᐃᐃⲆⲆⲆᐃⵠ.display = "inline-block";
        } else {
          ΔⵠⵠⲆ.set("starve_info_box", "0");
          Tx.options.ᐃᐃⲆⲆⲆᐃⵠ.display = "none";
        }
        Tx.ⵠᐃⵠⲆⵠ.ⲆⲆⲆⵠᐃ = (Tx.ⵠᐃⵠⲆⵠ.ⲆⲆⲆⵠᐃ + 1) % 2;
      },
      ΔᐃⵠΔ: function (a, b, c) {
        if (a && this.ⲆⲆⲆⵠᐃ) {
          this.display = 1;
          this.id = c === 0 ? b.id : Ct[b.id].ⲆⲆᐃᐃ;
          this.x = b.info.translate.x + 80;
          this.y = b.info.translate.y;
          this.ⲆΔⲆΔ = c;
        }
        return a;
      }
    };
    if (this.ⵠᐃⵠⲆⵠ.ⲆⲆⲆⵠᐃ === 1) {
      this.options.ᐃᐃⲆⲆⲆᐃⵠ.display = "inline-block";
    } else {
      this.options.ᐃᐃⲆⲆⲆᐃⵠ.display = "none";
    }
    document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.ⵠᐃⵠⲆⵠ.ΔⵠⵠⲆⵠ, fr);
    if (ΔⵠⵠⲆ.get("starve_scale")) {
      Go = Number(ΔⵠⵠⲆ.get("starve_scale"));
      document.getElementById("input_ratio").value = Go;
      Go *= yr / Br;
      Cr();
    }
    this.ⲆΔⵠⲆΔⵠⵠ = function () {
      ΔⵠⵠⲆ.set("starve_scale", "" + document.getElementById("input_ratio").value);
      Go = document.getElementById("input_ratio").value * (yr / Br);
      Cr();
    };
    document.getElementById("input_ratio").addEventListener("input", this.ⲆΔⵠⲆΔⵠⵠ, Hs);
    this.ᐃⲆΔᐃ = {
      open: false,
      ⲆⲆⲆⵠᐃ: ΔⵠⵠⲆ.get("starve_safe") && ΔⵠⵠⲆ.get("starve_safe") === "0" ? 0 : 1,
      id: document.getElementById("sure_delete"),
      style: document.getElementById("sure_delete").style,
      ⵠⲆⲆᐃΔ: document.getElementById("agree").style,
      button: 0,
      ⲆΔ: 0,
      ⵠⵠΔⲆᐃ: function () {
        Tx.ᐃⲆΔᐃ.style.display = "none";
        Tx.ᐃⲆΔᐃ.open = false;
      },
      all: function () {
        if (!Rx.ΔΔⵠᐃⲆ.wait) {
          if (Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0 && Rx.ⲆΔⲆΔ.id < 0 && !Rx.ᐃⵠⲆᐃⲆ.enabled) {
            Mx.ΔⲆΔⲆΔⵠᐃΔᐃ(Tx.ᐃⲆΔᐃ.button);
          }
          Tx.ᐃⲆΔᐃ.ⵠⵠΔⲆᐃ();
        }
      },
      ᐃⲆⵠᐃ: function () {
        if (Rx.ⲆΔⲆΔ.ⵠⲆΔⵠⲆ && !Rx.ΔΔⵠᐃⲆ.wait) {
          if (Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0 && Rx.ⲆΔⲆΔ.id < 0 && !Rx.ᐃⵠⲆᐃⲆ.enabled) {
            Mx.ΔⵠΔᐃⲆⲆᐃⵠⵠ(Tx.ᐃⲆΔᐃ.button);
          }
          Tx.ᐃⲆΔᐃ.ⵠⵠΔⲆᐃ();
        }
      },
      ᐃᐃⵠⲆᐃΔⲆⲆⲆ: function () {
        if (!Rx.ΔΔⵠᐃⲆ.wait) {
          if (Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0 && Rx.ⲆΔⲆΔ.id < 0 && !Rx.ᐃⵠⲆᐃⲆ.enabled) {
            Mx.ⵠΔᐃⵠΔΔⵠᐃΔ(Tx.ᐃⲆΔᐃ.button);
          }
          Tx.ᐃⲆΔᐃ.ⵠⵠΔⲆᐃ();
        }
      },
      ΔⵠⵠⲆⵠ: function () {
        if (Tx.ᐃⲆΔᐃ.ⲆⲆⲆⵠᐃ) {
          ΔⵠⵠⲆ.set("starve_safe", "0");
          Tx.ᐃⲆΔᐃ.ⵠⲆⲆᐃΔ.display = "inline-block";
          Tx.options.ⵠⲆⲆᐃΔ.display = "none";
        } else {
          ΔⵠⵠⲆ.set("starve_safe", "1");
          Tx.ᐃⲆΔᐃ.ⵠⲆⲆᐃΔ.display = "none";
          Tx.options.ⵠⲆⲆᐃΔ.display = "inline-block";
        }
        Tx.ᐃⲆΔᐃ.ⲆⲆⲆⵠᐃ = !Tx.ᐃⲆΔᐃ.ⲆⲆⲆⵠᐃ;
      },
      ΔΔⲆⲆⲆⵠΔ: function (a) {
        this.button = a;
        document.getElementById("item_to_del").src = ᐃΔ[As[a].ⵠⵠ][0].ⲆᐃⲆⵠᐃ === undefined ? ᐃΔ[As[a].ⵠⵠ][0].src : ᐃΔ[As[a].ⵠⵠ][0].ⲆᐃⲆⵠᐃ;
        if (As[a].ᐃⲆⵠᐃ && !Rx.ᐃΔⵠᐃⵠ && Rx.ⲆΔⲆΔ.ⵠⲆΔⵠⲆ) {
          document.getElementById("recycle_delete").style.display = "inline-block";
        } else {
          document.getElementById("recycle_delete").style.display = "none";
        }
        if (this.ⲆⲆⲆⵠᐃ) {
          this.style.display = "inline-block";
          this.open = true;
        } else {
          this.all();
        }
      },
      ⵠⵠᐃ: function () {
        this.style.left = Math.floor(iq - 235) + "px";
        this.style.top = Math.floor(jq - 175) + "px";
      }
    };
    this.ᐃⲆΔᐃ.ⵠⲆⲆᐃΔ.display = "none";
    if (this.ᐃⲆΔᐃ.ⲆⲆⲆⵠᐃ) {
      this.options.ⵠⲆⲆᐃΔ.display = "inline-block";
    } else {
      this.options.ⵠⲆⲆᐃΔ.display = "none";
    }
    document.getElementById("one_delete").addEventListener("mouseup", this.ᐃⲆΔᐃ.ᐃᐃⵠⲆᐃΔⲆⲆⲆ, ps);
    document.getElementById("yes_delete").addEventListener("mouseup", this.ᐃⲆΔᐃ.all, false);
    document.getElementById("recycle_delete").addEventListener("mouseup", this.ᐃⲆΔᐃ.ᐃⲆⵠᐃ, false);
    document.getElementById("no_delete").addEventListener("mouseup", this.ᐃⲆΔᐃ.ⵠⵠΔⲆᐃ, false);
    document.getElementById("case_agree").addEventListener("mouseup", this.ᐃⲆΔᐃ.ΔⵠⵠⲆⵠ, Hs);
    this.ⵠΔⵠΔⵠ = {
      open: false,
      ΔⵠⵠΔⵠ: -1,
      button: zf(60, 60, 0, ᐃΔ[592]),
      id: document.getElementById("shop_starterkit"),
      style: document.getElementById("shop_starterkit").style,
      ⵠⵠᐃ: function () {
        this.style.left = Math.floor(iq - 300) + "px";
        this.style.top = Math.floor(jq - 215) + "px";
      },
      ⵠⵠΔⲆᐃ: function () {
        Tx.ⵠΔⵠΔⵠ.open = false;
        Tx.ⵠΔⵠΔⵠ.style.display = "none";
      },
      select: function () {
        Tx.ⵠΔⵠΔⵠ.open = !Tx.ⵠΔⵠΔⵠ.open;
        if (Tx.ⵠΔⵠΔⵠ.open) {
          Tx.ⵠΔⵠΔⵠ.style.display = "inline-block";
        } else {
          Tx.ⵠΔⵠΔⵠ.style.display = "none";
        }
      },
      ⵠⵠⵠⲆⲆⲆΔ: function () {
        if (Tx.ⵠΔⵠΔⵠ.ΔⵠⵠΔⵠ >= 0) {
          Mx.ᐃᐃⵠⲆⵠⵠΔΔⵠ(Tx.ⵠΔⵠΔⵠ.ΔⵠⵠΔⵠ);
          Tx.ⵠΔⵠΔⵠ.ⵠⵠΔⲆᐃ();
          if (ga) {
            ga("send", "event", "Game", "kit", "" + Tx.ⵠΔⵠΔⵠ.ΔⵠⵠΔⵠ);
          }
        }
      },
      ⵠᐃᐃⲆᐃ: function () {
        var a = Rx.ⵠΔⵠΔⵠ.value;
        document.getElementById("points_bank").innerHTML = ⲆⵠΔⵠ.ⲆⵠΔⵠᐃΔΔ(a) + " points";
        for (var b = 0; b < Df.length; b++) {
          if (Df[b].ΔΔᐃⲆⲆ > a) {
            document.getElementById("starter" + (b + 1)).style.opacity = "0.4";
          } else {
            document.getElementById("starter" + (b + 1)).style.opacity = "1";
          }
        }
        for (b = 1; b < 13; b++) {
          document.getElementById("inv_shop" + b).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + b).innerHTML = "";
        }
        document.getElementById("buy_kit").style.opacity = "0.2";
      },
      ᐃⲆⲆᐃⵠⵠⵠⲆᐃ: function () {
        if (this.id.length > 8) {
          var a = Number(this.id.charAt(7) + this.id.charAt(8));
        } else {
          a = Number(this.id.charAt(7));
        }
        var b = Df[a - 1];
        if (Rx.ⵠΔⵠΔⵠ.value >= b.ΔΔᐃⲆⲆ) {
          Tx.ⵠΔⵠΔⵠ.ΔⵠⵠΔⵠ = a;
          document.getElementById("buy_kit").style.opacity = "1";
        } else {
          Tx.ⵠΔⵠΔⵠ.ΔⵠⵠΔⵠ = -1;
          document.getElementById("buy_kit").style.opacity = "0.2";
        }
        b = b.items;
        for (var c = 1, d = 1; c < b.length + 1; c++) {
          if (b[c - 1][1] !== 29) {
            document.getElementById("inv_shop" + d).style.display = "inline-block";
            document.getElementById("inv_shop" + d).src = ᐃΔ[As[b[c - 1][1]].ⵠⵠ][0].ⲆᐃⲆⵠᐃ === jn ? ᐃΔ[As[b[c - 1][1]].ⵠⵠ][0].src : ᐃΔ[As[b[c - 1][1]].ⵠⵠ][0].ⲆᐃⲆⵠᐃ;
            document.getElementById("amount_shop" + d).innerHTML = "" + b[c - 1][0];
            d++;
          }
        }
        for (; d < 13; d++) {
          document.getElementById("inv_shop" + d).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + d).innerHTML = "";
        }
      }
    };
    document.getElementById("quit3").addEventListener("mouseup", this.ⵠΔⵠΔⵠ.ⵠⵠΔⲆᐃ, false);
    document.getElementById("buy_kit").addEventListener("mouseup", this.ⵠΔⵠΔⵠ.ⵠⵠⵠⲆⲆⲆΔ, false);
    for (n = 1; n < 11; n++) {
      document.getElementById("starter" + n).addEventListener("mouseup", this.ⵠΔⵠΔⵠ.ᐃⲆⲆᐃⵠⵠⵠⲆᐃ, false);
    }
    this.Ⲇⵠⵠⵠ = {
      open: Kk,
      ⲆⲆⲆⵠᐃ: ΔⵠⵠⲆ.get("starve_quests") ? ΔⵠⵠⲆ.get("starve_quests") === "1" ? 1 : 0 : 0,
      button: zf(60, 60, 0, ᐃΔ[755]),
      id: document.getElementById("chronoquest"),
      style: document.getElementById("chronoquest").style,
      ⵠⵠᐃ: function () {
        this.style.left = Math.floor(iq - 420) + "px";
        this.style.top = Math.floor(jq - 270) + "px";
      },
      ⵠⵠΔⲆᐃ: function () {
        Tx.Ⲇⵠⵠⵠ.style.display = "none";
        Tx.Ⲇⵠⵠⵠ.open = co;
      },
      select: function () {
        Tx.Ⲇⵠⵠⵠ.open = !Tx.Ⲇⵠⵠⵠ.open;
        if (Tx.Ⲇⵠⵠⵠ.open) {
          Tx.Ⲇⵠⵠⵠ.style.display = "inline-block";
        } else {
          Tx.Ⲇⵠⵠⵠ.style.display = "none";
        }
      },
      list: [],
      reset: function () {
        for (var a = 0; a < Lf.length; a++) {
          this.list[a] = 1;
          document.getElementById("timeremain_" + a).style.display = "inline-block";
          document.getElementById("time_finished_" + a).style.display = "none";
          document.getElementById("claim_reward_" + a).style.display = "none";
        }
      },
      ᐃⵠᐃΔᐃⲆⲆ: 0,
      ΔᐃⲆⲆⲆᐃⲆ: 0,
      ΔⲆⵠⲆⲆΔⲆΔᐃ: function () {
        if (Tx.Ⲇⵠⵠⵠ.open) {
          var a = new Date().getTime();
          if (a - this.ᐃⵠᐃΔᐃⲆⲆ >= 1000) {
            this.ᐃⵠᐃΔᐃⲆⲆ = a;
            for (var b = 0; b < Lf.length; b++) {
              if (Tx.Ⲇⵠⵠⵠ.list[b]) {
                var c = Lf[b].time - (a - Qx.ᐃᐃᐃⵠⲆ.ⵠᐃᐃⲆᐃ + Tx.Ⲇⵠⵠⵠ.ΔᐃⲆⲆⲆᐃⲆ);
                document.getElementById("timeremain_" + b).innerHTML = c > 960000 ? Math.floor(c / 480000) + " days" : c > 480000 ? Math.floor(c / 480000) + " day" : c > 60000 ? Math.floor(c / 60000) + " min" : Math.floor(c / 1000) + " sec";
              }
            }
          }
        }
      },
      restore: function (a) {
        for (var b = 0; b < a.length; b++) {
          if (a[b] != 1) {
            Tx.Ⲇⵠⵠⵠ.ᐃᐃⲆΔΔⲆⵠ(b, a[b]);
          }
        }
      },
      ᐃᐃⲆΔΔⲆⵠ: function (a, b) {
        if (b === 3 && (a === 11 || a === 12)) {
          Rx.ⵠⵠⲆᐃ.ⲆΔⵠⲆⲆΔᐃ(0, 1);
          Tx.ᐃΔΔᐃΔΔⲆ();
        }
        document.getElementById("timeremain_" + a).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        if (b > 1) {
          document.getElementById("time_finished_" + a).innerHTML = "SUCCEED";
          document.getElementById("timeremain_" + a).style.display = "none";
        } else if (b === 0) {
          document.getElementById("time_finished_" + a).innerHTML = "FAILED";
          document.getElementById("timeremain_" + a).style.display = "none";
        }
        document.getElementById("claim_reward_" + a).style.display = b === 2 ? "inline-block" : "none";
        document.getElementById("time_finished_" + a).style.display = "inline";
        Tx.Ⲇⵠⵠⵠ.list[a] = 0;
      },
      modify: function (a, b) {
        Tx.Ⲇⵠⵠⵠ.ᐃᐃⲆΔΔⲆⵠ(a, b);
        if (Tx.Ⲇⵠⵠⵠ.ⲆⲆⲆⵠᐃ) {
          Tx.Ⲇⵠⵠⵠ.open = Xr;
          Tx.Ⲇⵠⵠⵠ.style.display = "inline-block";
        }
      },
      ΔⵠⵠⲆⵠ: function () {
        if (Tx.Ⲇⵠⵠⵠ.ⲆⲆⲆⵠᐃ) {
          ΔⵠⵠⲆ.set("starve_quests", "0");
          Tx.options.ⲆΔΔᐃⵠⵠΔ.display = "none";
        } else {
          ΔⵠⵠⲆ.set("starve_quests", "1");
          Tx.options.ⲆΔΔᐃⵠⵠΔ.display = "inline-block";
        }
        Tx.Ⲇⵠⵠⵠ.ⲆⲆⲆⵠᐃ = !Tx.Ⲇⵠⵠⵠ.ⲆⲆⲆⵠᐃ;
      },
      ᐃⲆⵠⵠⵠΔⲆΔᐃ: function () {
        var a = Number(this.id.charAt(13));
        var b = Number(this.id.charAt(14));
        if (this.id.charAt(14) !== "" && b >= 0 && b <= 9) {
          a = a * 10 + b;
        }
        Mx.ᐃⲆⵠⵠⵠᐃΔⵠΔ(a);
      }
    };
    if (this.Ⲇⵠⵠⵠ.ⲆⲆⲆⵠᐃ) {
      this.options.ⲆΔΔᐃⵠⵠΔ.display = "inline-block";
    } else {
      this.options.ⲆΔΔᐃⵠⵠΔ.display = "none";
    }
    document.getElementById("quit_chronoquest").addEventListener("mouseup", this.Ⲇⵠⵠⵠ.ⵠⵠΔⲆᐃ, zk);
    for (n = 0; Lf.length > n; n++) {
      document.getElementById("claim_reward_" + n).addEventListener("mouseup", this.Ⲇⵠⵠⵠ.ᐃⲆⵠⵠⵠΔⲆΔᐃ, at);
    }
    this.ⵠᐃⵠᐃ = {
      open: Zq,
      button: zf(60, 60, 0, ᐃΔ[708]),
      list: {
        id: document.getElementById("recipe_craft"),
        style: document.getElementById("recipe_craft").style,
        ΔΔᐃⲆΔΔⵠ: [],
        ⲆᐃΔΔᐃⵠᐃ: 0,
        ⵠⵠᐃ: function () {
          this.style.left = Math.floor(iq - 335) + "px";
          this.style.top = Math.floor(jq - 215) + "px";
        },
        ⵠⵠΔⲆᐃ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          Tx.ⵠᐃⵠᐃ.open = Gl;
        },
        ᐃⵠΔⵠᐃᐃⵠ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          document.getElementById("home_craft").style.display = "inline-block";
        },
        ⲆᐃᐃΔ: function (a) {
          if ((b = this.ΔΔᐃⲆΔΔⵠ[a]).ⵠⲆⲆ) {
            document.getElementById("watercraft").style.display = "inline-block";
          } else {
            document.getElementById("watercraft").style.display = "none";
          }
          if (b.f) {
            document.getElementById("firecraft").style.display = "inline-block";
          } else {
            document.getElementById("firecraft").style.display = "none";
          }
          if (b.w) {
            document.getElementById("workcraft").style.display = "inline-block";
          } else {
            document.getElementById("workcraft").style.display = "none";
          }
          if (b.e) {
            document.getElementById("wellcraft").style.display = "inline-block";
          } else {
            document.getElementById("wellcraft").style.display = "none";
          }
          for (var b = b.r, c = (a = 0, 1); a < b.length; a++) {
            document.getElementById("inv" + c).style.display = "inline-block";
            document.getElementById("inv" + c).src = ᐃΔ[As[b[a][0]].ⵠⵠ][0].ⲆᐃⲆⵠᐃ === undefined ? ᐃΔ[As[b[a][0]].ⵠⵠ][0].src : ᐃΔ[As[b[a][0]].ⵠⵠ][0].ⲆᐃⲆⵠᐃ;
            document.getElementById("numb" + c).innerHTML = "" + b[a][1];
            c++;
          }
          for (; c < 6; c++) {
            document.getElementById("inv" + c).style.display = "none";
            document.getElementById("numb" + c).innerHTML = "";
          }
        },
        select: function (a) {
          this.ⲆᐃΔΔᐃⵠᐃ = a;
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("workcraft").style.display = "none";
          document.getElementById("firecraft").style.display = "none";
          document.getElementById("watercraft").style.display = "none";
          document.getElementById("wellcraft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "inline-block";
          document.getElementById("inv1").style.display = "none";
          document.getElementById("inv2").style.display = "none";
          document.getElementById("inv3").style.display = "none";
          document.getElementById("inv4").style.display = "none";
          document.getElementById("inv5").style.display = "none";
          document.getElementById("numb1").innerHTML = "";
          document.getElementById("numb2").innerHTML = "";
          document.getElementById("numb3").innerHTML = "";
          document.getElementById("numb4").innerHTML = "";
          document.getElementById("numb5").innerHTML = "";
          for (var b = 0, c = 0; b < Ct.length; b++) {
            var d = Ct[b];
            if (a === d.ᐃᐃⲆ) {
              this.ΔΔᐃⲆΔΔⵠ[c] = d;
              c++;
              document.getElementById("img_" + c).style.display = "inline-block";
              document.getElementById("img_" + c).src = ᐃΔ[As[d.ⲆⲆᐃᐃ].ⵠⵠ][0].ⲆᐃⲆⵠᐃ === undefined ? ᐃΔ[As[d.ⲆⲆᐃᐃ].ⵠⵠ][0].src : ᐃΔ[As[d.ⲆⲆᐃᐃ].ⵠⵠ][0].ⲆᐃⲆⵠᐃ;
            }
          }
          for (c++; c < 49; c++) {
            document.getElementById("img_" + c).style.display = "none";
          }
        }
      },
      ⲆΔΔΔⲆΔⵠ: {
        id: document.getElementById("home_craft"),
        style: document.getElementById("home_craft").style,
        ⵠⵠᐃ: function () {
          this.style.left = Math.floor(iq - 285) + "px";
          this.style.top = Math.floor(jq - 170) + "px";
        },
        ⵠⵠΔⲆᐃ: function () {
          document.getElementById("home_craft").style.display = "none";
          Tx.ⵠᐃⵠᐃ.open = false;
        }
      },
      ΔᐃᐃⵠᐃⵠᐃⲆᐃ: function () {
        this.open = !this.open;
        if (this.open) {
          document.getElementById("home_craft").style.display = "inline-block";
        } else {
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "none";
        }
      }
    };
    document.getElementById("quit").addEventListener("mouseup", this.ⵠᐃⵠᐃ.ⲆΔΔΔⲆΔⵠ.ⵠⵠΔⲆᐃ, false);
    document.getElementById("quitmenu").addEventListener("mouseup", this.ⵠᐃⵠᐃ.list.ⵠⵠΔⲆᐃ, tg);
    document.getElementById("backhome").addEventListener("mouseup", this.ⵠᐃⵠᐃ.list.ᐃⵠΔⵠᐃᐃⵠ, zl);
    document.getElementById("hatcategory").addEventListener("mouseup", function () {
      Tx.ⵠᐃⵠᐃ.list.select(2);
    }, false);
    document.getElementById("weaponcategory").addEventListener("mouseup", function () {
      Tx.ⵠᐃⵠᐃ.list.select(1);
    }, gn);
    document.getElementById("toolcategory").addEventListener("mouseup", function () {
      Tx.ⵠᐃⵠᐃ.list.select(0);
    }, false);
    document.getElementById("foodcategory").addEventListener("mouseup", function () {
      Tx.ⵠᐃⵠᐃ.list.select(3);
    }, false);
    document.getElementById("placeablecategory").addEventListener("mouseup", function () {
      Tx.ⵠᐃⵠᐃ.list.select(4);
    }, false);
    document.getElementById("constructioncategory").addEventListener("mouseup", function () {
      Tx.ⵠᐃⵠᐃ.list.select(5);
    }, zl);
    document.getElementById("img_1").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(0);
    }, Hs);
    document.getElementById("img_2").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(1);
    }, zl);
    document.getElementById("img_3").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(2);
    }, false);
    document.getElementById("img_4").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(3);
    }, Vg);
    document.getElementById("img_5").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(4);
    }, va);
    document.getElementById("img_6").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(5);
    }, Kk);
    document.getElementById("img_7").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(6);
    }, false);
    document.getElementById("img_8").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(7);
    }, false);
    document.getElementById("img_9").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(8);
    }, va);
    document.getElementById("img_10").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(9);
    }, false);
    document.getElementById("img_11").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(10);
    }, false);
    document.getElementById("img_12").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(11);
    }, fr);
    document.getElementById("img_13").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(12);
    }, false);
    document.getElementById("img_14").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(13);
    }, false);
    document.getElementById("img_15").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(14);
    }, zl);
    document.getElementById("img_16").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(15);
    }, false);
    document.getElementById("img_17").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(16);
    }, false);
    document.getElementById("img_18").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(17);
    }, Wh);
    document.getElementById("img_19").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(18);
    }, false);
    document.getElementById("img_20").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(19);
    }, false);
    document.getElementById("img_21").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(20);
    }, zk);
    document.getElementById("img_22").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(21);
    }, Kk);
    document.getElementById("img_23").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(22);
    }, Pq);
    document.getElementById("img_24").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(23);
    }, gr);
    document.getElementById("img_25").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(24);
    }, va);
    document.getElementById("img_26").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(25);
    }, false);
    document.getElementById("img_27").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(26);
    }, false);
    document.getElementById("img_28").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(27);
    }, Hs);
    document.getElementById("img_29").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(28);
    }, zl);
    document.getElementById("img_30").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(29);
    }, false);
    document.getElementById("img_31").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(30);
    }, Gl);
    document.getElementById("img_32").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(31);
    }, false);
    document.getElementById("img_33").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(32);
    }, false);
    document.getElementById("img_34").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(33);
    }, Pq);
    document.getElementById("img_35").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(34);
    }, Ij);
    document.getElementById("img_36").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(35);
    }, false);
    document.getElementById("img_37").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(36);
    }, Kk);
    document.getElementById("img_38").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(37);
    }, ps);
    document.getElementById("img_39").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(38);
    }, false);
    document.getElementById("img_40").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(39);
    }, Ij);
    document.getElementById("img_41").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(40);
    }, gn);
    document.getElementById("img_42").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(41);
    }, false);
    document.getElementById("img_43").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(42);
    }, zk);
    document.getElementById("img_44").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(43);
    }, false);
    document.getElementById("img_45").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(44);
    }, gr);
    document.getElementById("img_46").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(45);
    }, tg);
    document.getElementById("img_47").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(46);
    }, false);
    document.getElementById("img_48").addEventListener("mousedown", function () {
      Tx.ⵠᐃⵠᐃ.list.ⲆᐃᐃΔ(47);
    }, va);
    this.ⲆᐃⲆΔᐃ = {
      translate: {
        x: 0,
        y: 0
      },
      Δⵠᐃⵠᐃ: {
        x: -1,
        y: -1
      },
      ΔΔⵠⲆ: [],
      focus: function (a) {
        var b = this.translate.y + (Rx.ⵠⵠⲆᐃ.ⵠΔⲆᐃⲆ.length > 0 ? -120 : -50);
        if (a.x > this.translate.x && a.x < this.translate.x + 193 && a.y > b && a.y < b + 193) {
          this.Δⵠᐃⵠᐃ.x = a.x - this.translate.x;
          this.Δⵠᐃⵠᐃ.y = a.y - b;
        }
      }
    };
    this.ⲆᐃᐃⲆ = {
      translate: {
        y: 0,
        x: 0
      },
      ⵠⵠ: ᐃΔ[278],
      Δᐃ: document.createElement("canvas")
    };
    this.ⲆᐃᐃⲆ.Δᐃ.width = this.ⲆᐃᐃⲆ.ⵠⵠ.width;
    this.ⲆᐃᐃⲆ.Δᐃ.height = this.ⲆᐃᐃⲆ.ⵠⵠ.height;
    this.ⲆᐃᐃⲆ.Δ = this.ⲆᐃᐃⲆ.Δᐃ.getContext("2d");
    this.ᐃᐃΔᐃ = {
      translate: {
        x: 0,
        y: 0
      },
      ⵠⵠ: ᐃΔ[267],
      ⲆⵠⵠΔ: Zu,
      y: 0
    };
    var o = oc.document.createElement("div");
    this.ᐃⵠᐃⲆⵠⵠΔ = function () {
      Δⵠⵠᐃᐃ = document.getElementById("team_box");
      Δⵠⵠᐃᐃ.innerHTML = "";
      Δⵠⵠᐃᐃ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((o.innerText = Qx.ΔΔⵠⲆ[Rx.ⵠᐃⵠⵠᐃ[0]].ᐃΔΔΔΔ) && o.innerHTML) + "</div";
      for (var a = 1; Rx.ⵠᐃⵠⵠᐃ.length > a; a++) {
        Δⵠⵠᐃᐃ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((o.innerText = Qx.ΔΔⵠⲆ[Rx.ⵠᐃⵠⵠᐃ[a]].ᐃΔΔΔΔ) && o.innerHTML) + "</div></div>";
      }
      Δⵠⵠᐃᐃ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
      Δⵠⵠᐃᐃ.style.display = "inline-block";
      document.getElementById("leave").addEventListener("click", Mx.ᐃⵠᐃⲆⵠⵠΔ, zl);
    };
    this.ΔΔᐃⲆⵠΔⵠⲆⵠ = function () {
      Δⵠⵠᐃᐃ = document.getElementById("team_box");
      Δⵠⵠᐃᐃ.innerHTML = "";
      Δⵠⵠᐃᐃ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((o.innerText = Qx.ΔΔⵠⲆ[Rx.ⵠᐃⵠⵠᐃ[0]].ᐃΔΔΔΔ) && o.innerHTML) + "</div";
      for (var a = 1; a < Rx.ⵠᐃⵠⵠᐃ.length; a++) {
        Δⵠⵠᐃᐃ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((o.innerText = Qx.ΔΔⵠⲆ[Rx.ⵠᐃⵠⵠᐃ[a]].ᐃΔΔΔΔ) && o.innerHTML) + "</div></div>";
      }
      Δⵠⵠᐃᐃ.innerHTML += "</div>";
      Δⵠⵠᐃᐃ.style.display = "inline-block";
    };
    this.ΔⵠΔΔⲆΔΔⵠⲆ = function () {
      Δⵠⵠᐃᐃ = document.getElementById("team_box");
      Δⵠⵠᐃᐃ.innerHTML = "";
      Δⵠⵠᐃᐃ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + ((o.innerText = Qx.ΔΔⵠⲆ[Rx.ⵠᐃⵠⵠᐃ[0]].ᐃΔΔΔΔ) && o.innerHTML) + "</div";
      for (var a = 1; a < Rx.ⵠᐃⵠⵠᐃ.length; a++) {
        Δⵠⵠᐃᐃ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + ((o.innerText = Qx.ΔΔⵠⲆ[Rx.ⵠᐃⵠⵠᐃ[a]].ᐃΔΔΔΔ) && o.innerHTML) + "</div><div class=\"eject_member\" id=\"eject_member" + a + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
      }
      if (Rx.ΔⲆⵠⵠⵠ.lock === 0) {
        Δⵠⵠᐃᐃ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
      } else {
        Δⵠⵠᐃᐃ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
      }
      document.getElementById("lock_team").addEventListener("click", Mx.ᐃΔⵠᐃⲆΔᐃⲆΔ, Kk);
      Δⵠⵠᐃᐃ.style.display = "inline-block";
      for (a = 1; Rx.ⵠᐃⵠⵠᐃ.length > a; a++) {
        switch (a) {
          case 1:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Mx.ᐃᐃᐃΔᐃΔⲆ(1);
            }, ps);
            break;
          case 2:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Mx.ᐃᐃᐃΔᐃΔⲆ(2);
            }, false);
            break;
          case 3:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Mx.ᐃᐃᐃΔᐃΔⲆ(3);
            }, false);
            break;
          case 4:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Mx.ᐃᐃᐃΔᐃΔⲆ(4);
            }, false);
            break;
          case 5:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Mx.ᐃᐃᐃΔᐃΔⲆ(5);
            }, Wh);
            break;
          case 6:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Mx.ᐃᐃᐃΔᐃΔⲆ(6);
            }, fr);
            break;
          case 7:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Mx.ᐃᐃᐃΔᐃΔⲆ(7);
            }, false);
            break;
          case 8:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              Mx.ᐃᐃᐃΔᐃΔⲆ(8);
            }, false);
        }
      }
    };
    this.ⲆⵠΔΔΔ = [];
    this.ⲆⵠΔΔΔ[2] = {
      button: zf(60, 60, 0, ᐃΔ[556]),
      action: this.ᐃⵠᐃⲆⵠⵠΔ
    };
    this.ⲆⵠΔΔΔ[3] = {
      button: zf(60, 60, 0, ᐃΔ[556]),
      action: Mx.ⲆᐃⵠΔᐃⲆΔΔΔ
    };
    this.ⲆⵠΔΔΔ[0] = {
      button: zf(60, 60, 0, ᐃΔ[557]),
      action: this.ΔⵠΔΔⲆΔΔⵠⲆ
    };
    this.ⲆⵠΔΔΔ[1] = {
      button: zf(60, 60, 0, ᐃΔ[561]),
      action: this.ΔΔᐃⲆⵠΔⵠⲆⵠ
    };
    this.ⲆⵠΔΔΔ[4] = {
      button: zf(60, 60, 0, ᐃΔ[560]),
      action: function () {}
    };
    this.ᐃⲆⵠⲆⲆ = -1;
    this.ΔⵠᐃᐃⵠᐃⲆ = zf(60, 60, 0, ᐃΔ[723]);
    this.ⵠᐃⲆⲆⲆⵠᐃ = zf(60, 60, 0, ᐃΔ[724]);
    this.ⵠΔᐃⲆⵠᐃΔ = zf(60, 60, 0, ᐃΔ[658]);
    this.ᐃᐃΔᐃⵠⵠΔ = zf(60, 60, 0, ᐃΔ[657]);
    this.ᐃⲆᐃᐃΔᐃⲆ = zf(60, 60, 0, ᐃΔ[658]);
    this.ⲆⵠΔⵠΔⲆΔ = zf(60, 60, 0, ᐃΔ[316]);
    this.ⲆⲆⵠⲆᐃΔⵠ = zf(60, 60, 0, ᐃΔ[315]);
    this.ΔⲆᐃⲆΔΔΔ = zf(60, 60, 0, ᐃΔ[297]);
    this.ⲆⵠΔⵠⵠᐃⲆ = zf(60, 60, 0, ᐃΔ[298]);
    this.ᐃᐃᐃⲆᐃΔΔ = zf(60, 60, 0, ᐃΔ[418]);
    this.ⵠᐃΔⲆⵠᐃⲆ = zf(60, 60, 0, ᐃΔ[938]);
    this.ΔⵠⲆΔᐃⲆⲆ = zf(60, 60, 0, ᐃΔ[412]);
    this.ΔᐃⲆⲆᐃΔⵠ = zf(60, 60, 0, ᐃΔ[536]);
    this.ⲆᐃⵠⲆΔⵠⵠ = zf(60, 60, 0, ᐃΔ[535]);
    this.ⲆⵠⲆΔΔᐃᐃ = zf(60, 60, 0, ᐃΔ[538]);
    this.ⲆⲆⵠⵠᐃ = zf(120, 120, 0, ᐃΔ[149]);
    this.ⲆⲆⵠⵠᐃ.info.translate.x = 10;
    this.ⲆⲆⵠⵠᐃ.info.translate.y = 10;
    this.Ⲇⵠⵠ = [];
    this.Ⲇⵠⵠ[0] = zf(68, 68, 0, ᐃΔ[340], 3);
    this.Ⲇⵠⵠ[0].id = 0;
    this.Ⲇⵠⵠ[1] = zf(68, 68, 0, ᐃΔ[341], 3);
    this.Ⲇⵠⵠ[1].id = 1;
    this.Ⲇⵠⵠ[108] = zf(68, 68, 0, ᐃΔ[342], 3);
    this.Ⲇⵠⵠ[108].id = 108;
    this.Ⲇⵠⵠ[109] = zf(68, 68, 0, ᐃΔ[343], 3);
    this.Ⲇⵠⵠ[109].id = 109;
    this.Ⲇⵠⵠ[110] = zf(68, 68, 0, ᐃΔ[269], 3);
    this.Ⲇⵠⵠ[110].id = 110;
    this.Ⲇⵠⵠ[233] = zf(68, 68, 0, ᐃΔ[1155], 3);
    this.Ⲇⵠⵠ[233].id = 233;
    this.Ⲇⵠⵠ[111] = zf(68, 68, 0, ᐃΔ[270], 3);
    this.Ⲇⵠⵠ[111].id = 111;
    this.Ⲇⵠⵠ[112] = zf(68, 68, 0, ᐃΔ[271], 3);
    this.Ⲇⵠⵠ[112].id = 112;
    this.Ⲇⵠⵠ[3] = zf(68, 68, 0, ᐃΔ[272], 3);
    this.Ⲇⵠⵠ[3].id = 3;
    this.Ⲇⵠⵠ[4] = zf(68, 68, 0, ᐃΔ[344], 3);
    this.Ⲇⵠⵠ[4].id = 4;
    this.Ⲇⵠⵠ[5] = zf(68, 68, 0, ᐃΔ[345], 3);
    this.Ⲇⵠⵠ[5].id = 5;
    this.Ⲇⵠⵠ[57] = zf(68, 68, 0, ᐃΔ[831], 3);
    this.Ⲇⵠⵠ[57].id = 57;
    this.Ⲇⵠⵠ[6] = zf(68, 68, 0, ᐃΔ[346], 3);
    this.Ⲇⵠⵠ[6].id = 6;
    this.Ⲇⵠⵠ[113] = zf(68, 68, 0, ᐃΔ[273], 3);
    this.Ⲇⵠⵠ[113].id = 113;
    this.Ⲇⵠⵠ[114] = zf(68, 68, 0, ᐃΔ[358], 3);
    this.Ⲇⵠⵠ[114].id = 114;
    this.Ⲇⵠⵠ[115] = zf(68, 68, 0, ᐃΔ[348], 3);
    this.Ⲇⵠⵠ[115].id = 115;
    this.Ⲇⵠⵠ[162] = zf(68, 68, 0, ᐃΔ[349], 3);
    this.Ⲇⵠⵠ[162].id = 162;
    this.Ⲇⵠⵠ[160] = zf(68, 68, 0, ᐃΔ[350], 3);
    this.Ⲇⵠⵠ[160].id = 160;
    this.Ⲇⵠⵠ[8] = zf(68, 68, 0, ᐃΔ[274], 3);
    this.Ⲇⵠⵠ[8].id = 8;
    this.Ⲇⵠⵠ[117] = zf(68, 68, 0, ᐃΔ[351], 3);
    this.Ⲇⵠⵠ[117].id = 117;
    this.Ⲇⵠⵠ[116] = zf(68, 68, 0, ᐃΔ[275], 3);
    this.Ⲇⵠⵠ[116].id = 116;
    this.Ⲇⵠⵠ[118] = zf(68, 68, 0, ᐃΔ[276], 3);
    this.Ⲇⵠⵠ[118].id = 118;
    this.Ⲇⵠⵠ[195] = zf(68, 68, 0, ᐃΔ[352], 3);
    this.Ⲇⵠⵠ[195].id = 195;
    this.Ⲇⵠⵠ[161] = zf(68, 68, 0, ᐃΔ[353], 3);
    this.Ⲇⵠⵠ[161].id = 161;
    this.Ⲇⵠⵠ[163] = zf(68, 68, 0, ᐃΔ[354], 3);
    this.Ⲇⵠⵠ[163].id = 163;
    this.Ⲇⵠⵠ[164] = zf(68, 68, 0, ᐃΔ[355], 3);
    this.Ⲇⵠⵠ[164].id = 164;
    this.Ⲇⵠⵠ[165] = zf(68, 68, 0, ᐃΔ[356], 3);
    this.Ⲇⵠⵠ[165].id = 165;
    this.Ⲇⵠⵠ[166] = zf(68, 68, 0, ᐃΔ[357], 3);
    this.Ⲇⵠⵠ[166].id = 166;
    this.Ⲇⵠⵠ[167] = zf(68, 68, 0, ᐃΔ[359], 3);
    this.Ⲇⵠⵠ[167].id = 167;
    this.Ⲇⵠⵠ[168] = zf(68, 68, 0, ᐃΔ[382], 3);
    this.Ⲇⵠⵠ[168].id = 168;
    this.Ⲇⵠⵠ[169] = zf(68, 68, 0, ᐃΔ[383], 3);
    this.Ⲇⵠⵠ[169].id = 169;
    this.Ⲇⵠⵠ[170] = zf(68, 68, 0, ᐃΔ[384], 3);
    this.Ⲇⵠⵠ[170].id = 170;
    this.Ⲇⵠⵠ[2] = zf(68, 68, 0, ᐃΔ[386], 3);
    this.Ⲇⵠⵠ[2].id = 2;
    this.Ⲇⵠⵠ[237] = zf(68, 68, 0, ᐃΔ[1163], 3);
    this.Ⲇⵠⵠ[237].id = 237;
    this.Ⲇⵠⵠ[174] = zf(68, 68, 0, ᐃΔ[394], 3);
    this.Ⲇⵠⵠ[174].id = 174;
    this.Ⲇⵠⵠ[222] = zf(68, 68, 0, ᐃΔ[1036], 3);
    this.Ⲇⵠⵠ[222].id = 222;
    this.Ⲇⵠⵠ[231] = zf(68, 68, 0, ᐃΔ[1038], 3);
    this.Ⲇⵠⵠ[231].id = 231;
    this.Ⲇⵠⵠ[232] = zf(68, 68, 0, ᐃΔ[1040], 3);
    this.Ⲇⵠⵠ[232].id = 232;
    this.Ⲇⵠⵠ[234] = zf(68, 68, 0, ᐃΔ[1157], 3);
    this.Ⲇⵠⵠ[234].id = 234;
    this.Ⲇⵠⵠ[10] = zf(68, 68, 0, ᐃΔ[387], 3);
    this.Ⲇⵠⵠ[10].id = 10;
    this.Ⲇⵠⵠ[171] = zf(68, 68, 0, ᐃΔ[388], 3);
    this.Ⲇⵠⵠ[171].id = 171;
    this.Ⲇⵠⵠ[172] = zf(68, 68, 0, ᐃΔ[389], 3);
    this.Ⲇⵠⵠ[172].id = 172;
    this.Ⲇⵠⵠ[173] = zf(68, 68, 0, ᐃΔ[390], 3);
    this.Ⲇⵠⵠ[173].id = 173;
    this.Ⲇⵠⵠ[11] = zf(68, 68, 0, ᐃΔ[391], 3);
    this.Ⲇⵠⵠ[11].id = 11;
    this.Ⲇⵠⵠ[12] = zf(68, 68, 0, ᐃΔ[403], 3);
    this.Ⲇⵠⵠ[12].id = 12;
    this.Ⲇⵠⵠ[13] = zf(68, 68, 0, ᐃΔ[397], 3);
    this.Ⲇⵠⵠ[13].id = 13;
    this.Ⲇⵠⵠ[14] = zf(68, 68, 0, ᐃΔ[400], 3);
    this.Ⲇⵠⵠ[14].id = 14;
    this.Ⲇⵠⵠ[15] = zf(68, 68, 0, ᐃΔ[406], 3);
    this.Ⲇⵠⵠ[15].id = 15;
    this.Ⲇⵠⵠ[16] = zf(68, 68, 0, ᐃΔ[875], 3);
    this.Ⲇⵠⵠ[16].id = 16;
    this.Ⲇⵠⵠ[119] = zf(68, 68, 0, ᐃΔ[410], 3);
    this.Ⲇⵠⵠ[119].id = 119;
    this.Ⲇⵠⵠ[23] = zf(68, 68, 0, ᐃΔ[422], 3);
    this.Ⲇⵠⵠ[23].id = 23;
    this.Ⲇⵠⵠ[24] = zf(68, 68, 0, ᐃΔ[425], 3);
    this.Ⲇⵠⵠ[24].id = 24;
    this.Ⲇⵠⵠ[87] = zf(68, 68, 0, ᐃΔ[1229], 3);
    this.Ⲇⵠⵠ[87].id = 87;
    this.Ⲇⵠⵠ[88] = zf(68, 68, 0, ᐃΔ[1232], 3);
    this.Ⲇⵠⵠ[88].id = 88;
    this.Ⲇⵠⵠ[80] = zf(68, 68, 0, ᐃΔ[1139], 3);
    this.Ⲇⵠⵠ[80].id = 80;
    this.Ⲇⵠⵠ[81] = zf(68, 68, 0, ᐃΔ[1142], 3);
    this.Ⲇⵠⵠ[81].id = 81;
    this.Ⲇⵠⵠ[101] = zf(68, 68, 0, ᐃΔ[1167], 3);
    this.Ⲇⵠⵠ[101].id = 101;
    this.Ⲇⵠⵠ[64] = zf(68, 68, 0, ᐃΔ[571], 3);
    this.Ⲇⵠⵠ[64].id = 64;
    this.Ⲇⵠⵠ[71] = zf(68, 68, 0, ᐃΔ[1240], 3);
    this.Ⲇⵠⵠ[71].id = 71;
    this.Ⲇⵠⵠ[102] = zf(68, 68, 0, ᐃΔ[1170], 3);
    this.Ⲇⵠⵠ[102].id = 102;
    this.Ⲇⵠⵠ[65] = zf(68, 68, 0, ᐃΔ[574], 3);
    this.Ⲇⵠⵠ[65].id = 65;
    this.Ⲇⵠⵠ[72] = zf(68, 68, 0, ᐃΔ[1243], 3);
    this.Ⲇⵠⵠ[72].id = 72;
    this.Ⲇⵠⵠ[103] = zf(68, 68, 0, ᐃΔ[1173], 3);
    this.Ⲇⵠⵠ[103].id = 103;
    this.Ⲇⵠⵠ[66] = zf(68, 68, 0, ᐃΔ[577], 3);
    this.Ⲇⵠⵠ[66].id = 66;
    this.Ⲇⵠⵠ[73] = zf(68, 68, 0, ᐃΔ[1246], 3);
    this.Ⲇⵠⵠ[73].id = 73;
    this.Ⲇⵠⵠ[104] = zf(68, 68, 0, ᐃΔ[1176], 3);
    this.Ⲇⵠⵠ[104].id = 104;
    this.Ⲇⵠⵠ[67] = zf(68, 68, 0, ᐃΔ[580], 3);
    this.Ⲇⵠⵠ[67].id = 67;
    this.Ⲇⵠⵠ[74] = zf(68, 68, 0, ᐃΔ[1249], 3);
    this.Ⲇⵠⵠ[74].id = 74;
    this.Ⲇⵠⵠ[105] = zf(68, 68, 0, ᐃΔ[1179], 3);
    this.Ⲇⵠⵠ[105].id = 105;
    this.Ⲇⵠⵠ[68] = zf(68, 68, 0, ᐃΔ[583], 3);
    this.Ⲇⵠⵠ[68].id = 68;
    this.Ⲇⵠⵠ[75] = zf(68, 68, 0, ᐃΔ[1252], 3);
    this.Ⲇⵠⵠ[75].id = 75;
    this.Ⲇⵠⵠ[106] = zf(68, 68, 0, ᐃΔ[1182], 3);
    this.Ⲇⵠⵠ[106].id = 106;
    this.Ⲇⵠⵠ[69] = zf(68, 68, 0, ᐃΔ[586], 3);
    this.Ⲇⵠⵠ[69].id = 69;
    this.Ⲇⵠⵠ[76] = zf(68, 68, 0, ᐃΔ[1255], 3);
    this.Ⲇⵠⵠ[76].id = 76;
    this.Ⲇⵠⵠ[107] = zf(68, 68, 0, ᐃΔ[1185], 3);
    this.Ⲇⵠⵠ[107].id = 107;
    this.Ⲇⵠⵠ[70] = zf(68, 68, 0, ᐃΔ[589], 3);
    this.Ⲇⵠⵠ[70].id = 70;
    this.Ⲇⵠⵠ[94] = zf(68, 68, 0, ᐃΔ[1258], 3);
    this.Ⲇⵠⵠ[94].id = 94;
    this.Ⲇⵠⵠ[95] = zf(68, 68, 0, ᐃΔ[1261], 3);
    this.Ⲇⵠⵠ[95].id = 95;
    this.Ⲇⵠⵠ[96] = zf(68, 68, 0, ᐃΔ[1264], 3);
    this.Ⲇⵠⵠ[96].id = 96;
    this.Ⲇⵠⵠ[97] = zf(68, 68, 0, ᐃΔ[1267], 3);
    this.Ⲇⵠⵠ[97].id = 97;
    this.Ⲇⵠⵠ[98] = zf(68, 68, 0, ᐃΔ[1270], 3);
    this.Ⲇⵠⵠ[98].id = 98;
    this.Ⲇⵠⵠ[99] = zf(68, 68, 0, ᐃΔ[1273], 3);
    this.Ⲇⵠⵠ[99].id = 99;
    this.Ⲇⵠⵠ[58] = zf(68, 68, 0, ᐃΔ[828], 3);
    this.Ⲇⵠⵠ[58].id = 58;
    this.Ⲇⵠⵠ[25] = zf(68, 68, 0, ᐃΔ[431], 3);
    this.Ⲇⵠⵠ[25].id = 25;
    this.Ⲇⵠⵠ[26] = zf(68, 68, 0, ᐃΔ[434], 3);
    this.Ⲇⵠⵠ[26].id = 26;
    this.Ⲇⵠⵠ[27] = zf(68, 68, 0, ᐃΔ[437], 3);
    this.Ⲇⵠⵠ[27].id = 27;
    this.Ⲇⵠⵠ[28] = zf(68, 68, 0, ᐃΔ[440], 3);
    this.Ⲇⵠⵠ[28].id = 28;
    this.Ⲇⵠⵠ[120] = zf(68, 68, 0, ᐃΔ[443], 3);
    this.Ⲇⵠⵠ[120].id = 120;
    this.Ⲇⵠⵠ[29] = zf(68, 68, 0, ᐃΔ[385], 3);
    this.Ⲇⵠⵠ[29].id = 29;
    this.Ⲇⵠⵠ[121] = zf(68, 68, 0, ᐃΔ[446], 3);
    this.Ⲇⵠⵠ[121].id = 121;
    this.Ⲇⵠⵠ[30] = zf(68, 68, 0, ᐃΔ[457], 3);
    this.Ⲇⵠⵠ[30].id = 30;
    this.Ⲇⵠⵠ[9] = zf(68, 68, 0, ᐃΔ[862], 3);
    this.Ⲇⵠⵠ[9].id = 9;
    this.Ⲇⵠⵠ[31] = zf(68, 68, 0, ᐃΔ[459], 3);
    this.Ⲇⵠⵠ[31].id = 31;
    this.Ⲇⵠⵠ[32] = zf(68, 68, 0, ᐃΔ[1018], 3);
    this.Ⲇⵠⵠ[32].id = 32;
    this.Ⲇⵠⵠ[33] = zf(68, 68, 0, ᐃΔ[474], 3);
    this.Ⲇⵠⵠ[33].id = 33;
    this.Ⲇⵠⵠ[35] = zf(68, 68, 0, ᐃΔ[479], 3);
    this.Ⲇⵠⵠ[35].id = 35;
    this.Ⲇⵠⵠ[36] = zf(68, 68, 0, ᐃΔ[482], 3);
    this.Ⲇⵠⵠ[36].id = 36;
    this.Ⲇⵠⵠ[37] = zf(68, 68, 0, ᐃΔ[485], 3);
    this.Ⲇⵠⵠ[37].id = 37;
    this.Ⲇⵠⵠ[38] = zf(68, 68, 0, ᐃΔ[488], 3);
    this.Ⲇⵠⵠ[38].id = 38;
    this.Ⲇⵠⵠ[39] = zf(68, 68, 0, ᐃΔ[491], 3);
    this.Ⲇⵠⵠ[39].id = 39;
    this.Ⲇⵠⵠ[122] = zf(68, 68, 0, ᐃΔ[494], 3);
    this.Ⲇⵠⵠ[122].id = 122;
    this.Ⲇⵠⵠ[123] = zf(68, 68, 0, ᐃΔ[497], 3);
    this.Ⲇⵠⵠ[123].id = 123;
    this.Ⲇⵠⵠ[124] = zf(68, 68, 0, ᐃΔ[501], 3);
    this.Ⲇⵠⵠ[124].id = 124;
    this.Ⲇⵠⵠ[40] = zf(68, 68, 0, ᐃΔ[504], 3);
    this.Ⲇⵠⵠ[40].id = 40;
    this.Ⲇⵠⵠ[146] = zf(68, 68, 0, ᐃΔ[506], 3);
    this.Ⲇⵠⵠ[146].id = 146;
    this.Ⲇⵠⵠ[240] = zf(68, 68, 0, ᐃΔ[1234], 3);
    this.Ⲇⵠⵠ[240].id = 240;
    this.Ⲇⵠⵠ[147] = zf(68, 68, 0, ᐃΔ[514], 3);
    this.Ⲇⵠⵠ[147].id = 147;
    this.Ⲇⵠⵠ[148] = zf(68, 68, 0, ᐃΔ[520], 3);
    this.Ⲇⵠⵠ[148].id = 148;
    this.Ⲇⵠⵠ[149] = zf(68, 68, 0, ᐃΔ[522], 3);
    this.Ⲇⵠⵠ[149].id = 149;
    this.Ⲇⵠⵠ[150] = zf(68, 68, 0, ᐃΔ[524], 3);
    this.Ⲇⵠⵠ[150].id = 150;
    this.Ⲇⵠⵠ[151] = zf(68, 68, 0, ᐃΔ[531], 3);
    this.Ⲇⵠⵠ[151].id = 151;
    this.Ⲇⵠⵠ[158] = zf(68, 68, 0, ᐃΔ[534], 3);
    this.Ⲇⵠⵠ[158].id = 158;
    this.Ⲇⵠⵠ[159] = zf(68, 68, 0, ᐃΔ[554], 3);
    this.Ⲇⵠⵠ[159].id = 159;
    this.Ⲇⵠⵠ[43] = zf(68, 68, 0, ᐃΔ[543], 3);
    this.Ⲇⵠⵠ[43].id = 43;
    this.Ⲇⵠⵠ[45] = zf(68, 68, 0, ᐃΔ[552], 3);
    this.Ⲇⵠⵠ[45].id = 45;
    this.Ⲇⵠⵠ[125] = zf(68, 68, 0, ᐃΔ[606], 3);
    this.Ⲇⵠⵠ[125].id = 125;
    this.Ⲇⵠⵠ[221] = zf(68, 68, 0, ᐃΔ[1237], 3);
    this.Ⲇⵠⵠ[221].id = 221;
    this.Ⲇⵠⵠ[223] = zf(68, 68, 0, ᐃΔ[1029], 3);
    this.Ⲇⵠⵠ[223].id = 223;
    this.Ⲇⵠⵠ[224] = zf(68, 68, 0, ᐃΔ[1032], 3);
    this.Ⲇⵠⵠ[224].id = 224;
    this.Ⲇⵠⵠ[230] = zf(68, 68, 0, ᐃΔ[1118], 3);
    this.Ⲇⵠⵠ[230].id = 230;
    this.Ⲇⵠⵠ[89] = zf(68, 68, 0, ᐃΔ[1047], 3);
    this.Ⲇⵠⵠ[89].id = 89;
    this.Ⲇⵠⵠ[225] = zf(68, 68, 0, ᐃΔ[1050], 3);
    this.Ⲇⵠⵠ[225].id = 225;
    this.Ⲇⵠⵠ[227] = zf(68, 68, 0, ᐃΔ[1081], 3);
    this.Ⲇⵠⵠ[227].id = 227;
    this.Ⲇⵠⵠ[239] = zf(68, 68, 0, ᐃΔ[1225], 3);
    this.Ⲇⵠⵠ[239].id = 239;
    this.Ⲇⵠⵠ[228] = zf(68, 68, 0, ᐃΔ[1096], 3);
    this.Ⲇⵠⵠ[228].id = 228;
    this.Ⲇⵠⵠ[229] = zf(68, 68, 0, ᐃΔ[1111], 3);
    this.Ⲇⵠⵠ[229].id = 229;
    this.Ⲇⵠⵠ[226] = zf(68, 68, 0, ᐃΔ[1190], 3);
    this.Ⲇⵠⵠ[226].id = 226;
    this.Ⲇⵠⵠ[126] = zf(68, 68, 0, ᐃΔ[610], 3);
    this.Ⲇⵠⵠ[126].id = 126;
    this.Ⲇⵠⵠ[127] = zf(68, 68, 0, ᐃΔ[615], 3);
    this.Ⲇⵠⵠ[127].id = 127;
    this.Ⲇⵠⵠ[128] = zf(68, 68, 0, ᐃΔ[614], 3);
    this.Ⲇⵠⵠ[128].id = 128;
    this.Ⲇⵠⵠ[46] = zf(68, 68, 0, ᐃΔ[617], 3);
    this.Ⲇⵠⵠ[46].id = 46;
    this.Ⲇⵠⵠ[50] = zf(68, 68, 0, ᐃΔ[701], 3);
    this.Ⲇⵠⵠ[50].id = 50;
    this.Ⲇⵠⵠ[51] = zf(68, 68, 0, ᐃΔ[703], 3);
    this.Ⲇⵠⵠ[51].id = 51;
    this.Ⲇⵠⵠ[52] = zf(68, 68, 0, ᐃΔ[707], 3);
    this.Ⲇⵠⵠ[52].id = 52;
    this.Ⲇⵠⵠ[55] = zf(68, 68, 0, ᐃΔ[710], 3);
    this.Ⲇⵠⵠ[55].id = 55;
    this.Ⲇⵠⵠ[129] = zf(68, 68, 0, ᐃΔ[625], 3);
    this.Ⲇⵠⵠ[129].id = 129;
    this.Ⲇⵠⵠ[130] = zf(68, 68, 0, ᐃΔ[628], 3);
    this.Ⲇⵠⵠ[130].id = 130;
    this.Ⲇⵠⵠ[131] = zf(68, 68, 0, ᐃΔ[630], 3);
    this.Ⲇⵠⵠ[131].id = 131;
    this.Ⲇⵠⵠ[132] = zf(68, 68, 0, ᐃΔ[633], 3);
    this.Ⲇⵠⵠ[132].id = 132;
    this.Ⲇⵠⵠ[133] = zf(68, 68, 0, ᐃΔ[636], 3);
    this.Ⲇⵠⵠ[133].id = 133;
    this.Ⲇⵠⵠ[134] = zf(68, 68, 0, ᐃΔ[640], 3);
    this.Ⲇⵠⵠ[134].id = 134;
    this.Ⲇⵠⵠ[135] = zf(68, 68, 0, ᐃΔ[645], 3);
    this.Ⲇⵠⵠ[135].id = 135;
    this.Ⲇⵠⵠ[47] = zf(68, 68, 0, ᐃΔ[648], 3);
    this.Ⲇⵠⵠ[47].id = 47;
    this.Ⲇⵠⵠ[48] = zf(68, 68, 0, ᐃΔ[651], 3);
    this.Ⲇⵠⵠ[48].id = 48;
    this.Ⲇⵠⵠ[49] = zf(68, 68, 0, ᐃΔ[653], 3);
    this.Ⲇⵠⵠ[49].id = 49;
    this.Ⲇⵠⵠ[136] = zf(68, 68, 0, ᐃΔ[661], 3);
    this.Ⲇⵠⵠ[136].id = 136;
    this.Ⲇⵠⵠ[143] = zf(68, 68, 0, ᐃΔ[689], 3);
    this.Ⲇⵠⵠ[143].id = 143;
    this.Ⲇⵠⵠ[137] = zf(68, 68, 0, ᐃΔ[663], 3);
    this.Ⲇⵠⵠ[137].id = 137;
    this.Ⲇⵠⵠ[138] = zf(68, 68, 0, ᐃΔ[665], 3);
    this.Ⲇⵠⵠ[138].id = 138;
    this.Ⲇⵠⵠ[139] = zf(68, 68, 0, ᐃΔ[675], 3);
    this.Ⲇⵠⵠ[139].id = 139;
    this.Ⲇⵠⵠ[140] = zf(68, 68, 0, ᐃΔ[682], 3);
    this.Ⲇⵠⵠ[140].id = 140;
    this.Ⲇⵠⵠ[141] = zf(68, 68, 0, ᐃΔ[683], 3);
    this.Ⲇⵠⵠ[141].id = 141;
    this.Ⲇⵠⵠ[142] = zf(68, 68, 0, ᐃΔ[686], 3);
    this.Ⲇⵠⵠ[142].id = 142;
    this.Ⲇⵠⵠ[144] = zf(68, 68, 0, ᐃΔ[719], 3);
    this.Ⲇⵠⵠ[144].id = 144;
    this.Ⲇⵠⵠ[145] = zf(68, 68, 0, ᐃΔ[731], 3);
    this.Ⲇⵠⵠ[145].id = 145;
    this.Ⲇⵠⵠ[59] = zf(68, 68, 0, ᐃΔ[733], 3);
    this.Ⲇⵠⵠ[59].id = 59;
    this.Ⲇⵠⵠ[62] = zf(68, 68, 0, ᐃΔ[565], 3);
    this.Ⲇⵠⵠ[62].id = 62;
    this.Ⲇⵠⵠ[185] = zf(68, 68, 0, ᐃΔ[590], 3);
    this.Ⲇⵠⵠ[185].id = 185;
    this.Ⲇⵠⵠ[184] = zf(68, 68, 0, ᐃΔ[752], 3);
    this.Ⲇⵠⵠ[184].id = 184;
    this.Ⲇⵠⵠ[187] = zf(68, 68, 0, ᐃΔ[591], 3);
    this.Ⲇⵠⵠ[187].id = 187;
    this.Ⲇⵠⵠ[186] = zf(68, 68, 0, ᐃΔ[754], 3);
    this.Ⲇⵠⵠ[186].id = 186;
    this.Ⲇⵠⵠ[77] = zf(68, 68, 0, ᐃΔ[757], 3);
    this.Ⲇⵠⵠ[77].id = 77;
    this.Ⲇⵠⵠ[175] = zf(68, 68, 0, ᐃΔ[759], 3);
    this.Ⲇⵠⵠ[175].id = 175;
    this.Ⲇⵠⵠ[176] = zf(68, 68, 0, ᐃΔ[763], 3);
    this.Ⲇⵠⵠ[176].id = 176;
    this.Ⲇⵠⵠ[78] = zf(68, 68, 0, ᐃΔ[761], 3);
    this.Ⲇⵠⵠ[78].id = 78;
    this.Ⲇⵠⵠ[177] = zf(68, 68, 0, ᐃΔ[766], 3);
    this.Ⲇⵠⵠ[177].id = 177;
    this.Ⲇⵠⵠ[79] = zf(68, 68, 0, ᐃΔ[765], 3);
    this.Ⲇⵠⵠ[79].id = 79;
    this.Ⲇⵠⵠ[83] = zf(68, 68, 0, ᐃΔ[769], 3);
    this.Ⲇⵠⵠ[83].id = 83;
    this.Ⲇⵠⵠ[84] = zf(68, 68, 0, ᐃΔ[773], 3);
    this.Ⲇⵠⵠ[84].id = 84;
    this.Ⲇⵠⵠ[178] = zf(68, 68, 0, ᐃΔ[774], 3);
    this.Ⲇⵠⵠ[178].id = 178;
    this.Ⲇⵠⵠ[179] = zf(68, 68, 0, ᐃΔ[775], 3);
    this.Ⲇⵠⵠ[179].id = 179;
    this.Ⲇⵠⵠ[86] = zf(68, 68, 0, ᐃΔ[778], 3);
    this.Ⲇⵠⵠ[86].id = 86;
    this.Ⲇⵠⵠ[85] = zf(68, 68, 0, ᐃΔ[781], 3);
    this.Ⲇⵠⵠ[85].id = 85;
    this.Ⲇⵠⵠ[180] = zf(68, 68, 0, ᐃΔ[786], 3);
    this.Ⲇⵠⵠ[180].id = 180;
    this.Ⲇⵠⵠ[181] = zf(68, 68, 0, ᐃΔ[787], 3);
    this.Ⲇⵠⵠ[181].id = 181;
    this.Ⲇⵠⵠ[182] = zf(68, 68, 0, ᐃΔ[790], 3);
    this.Ⲇⵠⵠ[182].id = 182;
    this.Ⲇⵠⵠ[183] = zf(68, 68, 0, ᐃΔ[801], 3);
    this.Ⲇⵠⵠ[183].id = 183;
    this.Ⲇⵠⵠ[188] = zf(68, 68, 0, ᐃΔ[810], 3);
    this.Ⲇⵠⵠ[188].id = 188;
    this.Ⲇⵠⵠ[189] = zf(68, 68, 0, ᐃΔ[815], 3);
    this.Ⲇⵠⵠ[189].id = 189;
    this.Ⲇⵠⵠ[190] = zf(68, 68, 0, ᐃΔ[844], 3);
    this.Ⲇⵠⵠ[190].id = 190;
    this.Ⲇⵠⵠ[191] = zf(68, 68, 0, ᐃΔ[836], 3);
    this.Ⲇⵠⵠ[191].id = 191;
    this.Ⲇⵠⵠ[192] = zf(68, 68, 0, ᐃΔ[841], 3);
    this.Ⲇⵠⵠ[192].id = 192;
    this.Ⲇⵠⵠ[193] = zf(68, 68, 0, ᐃΔ[847], 3);
    this.Ⲇⵠⵠ[193].id = 193;
    this.Ⲇⵠⵠ[194] = zf(68, 68, 0, ᐃΔ[851], 3);
    this.Ⲇⵠⵠ[194].id = 194;
    this.Ⲇⵠⵠ[206] = zf(68, 68, 0, ᐃΔ[961], 3);
    this.Ⲇⵠⵠ[206].id = 206;
    this.Ⲇⵠⵠ[207] = zf(68, 68, 0, ᐃΔ[974], 3);
    this.Ⲇⵠⵠ[207].id = 207;
    this.Ⲇⵠⵠ[204] = zf(68, 68, 0, ᐃΔ[951], 3);
    this.Ⲇⵠⵠ[204].id = 204;
    this.Ⲇⵠⵠ[205] = zf(68, 68, 0, ᐃΔ[956], 3);
    this.Ⲇⵠⵠ[205].id = 205;
    this.Ⲇⵠⵠ[208] = zf(68, 68, 0, ᐃΔ[968], 3);
    this.Ⲇⵠⵠ[208].id = 208;
    this.Ⲇⵠⵠ[209] = zf(68, 68, 0, ᐃΔ[973], 3);
    this.Ⲇⵠⵠ[209].id = 209;
    this.Ⲇⵠⵠ[210] = zf(68, 68, 0, ᐃΔ[983], 3);
    this.Ⲇⵠⵠ[210].id = 210;
    this.Ⲇⵠⵠ[211] = zf(68, 68, 0, ᐃΔ[988], 3);
    this.Ⲇⵠⵠ[211].id = 211;
    this.Ⲇⵠⵠ[41] = zf(68, 68, 0, ᐃΔ[881], 3);
    this.Ⲇⵠⵠ[41].id = 41;
    this.Ⲇⵠⵠ[42] = zf(68, 68, 0, ᐃΔ[883], 3);
    this.Ⲇⵠⵠ[42].id = 42;
    this.Ⲇⵠⵠ[12] = zf(68, 68, 0, ᐃΔ[403], 3);
    this.Ⲇⵠⵠ[12].id = 12;
    this.Ⲇⵠⵠ[16] = zf(68, 68, 0, ᐃΔ[875], 3);
    this.Ⲇⵠⵠ[16].id = 16;
    this.Ⲇⵠⵠ[196] = zf(68, 68, 0, ᐃΔ[898], 3);
    this.Ⲇⵠⵠ[196].id = 196;
    this.Ⲇⵠⵠ[18] = zf(68, 68, 0, ᐃΔ[899], 3);
    this.Ⲇⵠⵠ[18].id = 18;
    this.Ⲇⵠⵠ[197] = zf(68, 68, 0, ᐃΔ[906], 3);
    this.Ⲇⵠⵠ[197].id = 197;
    this.Ⲇⵠⵠ[198] = zf(68, 68, 0, ᐃΔ[908], 3);
    this.Ⲇⵠⵠ[198].id = 198;
    this.Ⲇⵠⵠ[61] = zf(68, 68, 0, ᐃΔ[911], 3);
    this.Ⲇⵠⵠ[61].id = 61;
    this.Ⲇⵠⵠ[201] = zf(68, 68, 0, ᐃΔ[871], 3);
    this.Ⲇⵠⵠ[201].id = 201;
    this.Ⲇⵠⵠ[199] = zf(68, 68, 0, ᐃΔ[863], 3);
    this.Ⲇⵠⵠ[199].id = 199;
    this.Ⲇⵠⵠ[200] = zf(68, 68, 0, ᐃΔ[868], 3);
    this.Ⲇⵠⵠ[200].id = 200;
    this.ΔⵠⲆⵠⲆ = [];
    for (n = 0; n < 250; n++) {
      this.ΔⵠⲆⵠⲆ[n] = zf(0, 0, 0, ᐃΔ[366]);
    }
    this.ⵠⲆΔ = [];
    this.ⵠⲆΔ[0] = zf(60, 60, 0, ᐃΔ[261], 3);
    this.ⵠⲆΔ[0].id = 0;
    this.ⵠⲆΔ[1] = zf(60, 60, 0, ᐃΔ[312], 3);
    this.ⵠⲆΔ[1].id = 1;
    this.ⵠⲆΔ[108] = zf(60, 60, 0, ᐃΔ[315], 3);
    this.ⵠⲆΔ[108].id = 108;
    this.ⵠⲆΔ[108].info.ⵠⵠ[2] = this.ⵠⲆΔ[108].info.ⵠⵠ[0];
    this.ⵠⲆΔ[109] = zf(60, 60, 0, ᐃΔ[316], 3);
    this.ⵠⲆΔ[109].id = 109;
    this.ⵠⲆΔ[109].info.ⵠⵠ[2] = this.ⵠⲆΔ[109].info.ⵠⵠ[0];
    this.ⵠⲆΔ[110] = zf(60, 60, 0, ᐃΔ[277], 3);
    this.ⵠⲆΔ[110].id = 110;
    this.ⵠⲆΔ[233] = zf(60, 60, 0, ᐃΔ[1154], 3);
    this.ⵠⲆΔ[233].id = 233;
    this.ⵠⲆΔ[111] = zf(60, 60, 0, ᐃΔ[297], 3);
    this.ⵠⲆΔ[111].id = 111;
    this.ⵠⲆΔ[111].info.ⵠⵠ[2] = this.ⵠⲆΔ[111].info.ⵠⵠ[0];
    this.ⵠⲆΔ[112] = zf(60, 60, 0, ᐃΔ[298], 3);
    this.ⵠⲆΔ[112].id = 112;
    this.ⵠⲆΔ[112].info.ⵠⵠ[2] = this.ⵠⲆΔ[112].info.ⵠⵠ[0];
    this.ⵠⲆΔ[3] = zf(60, 60, 0, ᐃΔ[258], 3);
    this.ⵠⲆΔ[3].id = 3;
    this.ⵠⲆΔ[4] = zf(60, 60, 0, ᐃΔ[296], 3);
    this.ⵠⲆΔ[4].id = 4;
    this.ⵠⲆΔ[5] = zf(60, 60, 0, ᐃΔ[292], 3);
    this.ⵠⲆΔ[5].id = 5;
    this.ⵠⲆΔ[57] = zf(60, 60, 0, ᐃΔ[829], 3);
    this.ⵠⲆΔ[57].id = 57;
    this.ⵠⲆΔ[6] = zf(60, 60, 0, ᐃΔ[293], 3);
    this.ⵠⲆΔ[6].id = 6;
    this.ⵠⲆΔ[113] = zf(60, 60, 0, ᐃΔ[309], 3);
    this.ⵠⲆΔ[113].id = 113;
    this.ⵠⲆΔ[114] = zf(60, 60, 0, ᐃΔ[310], 3);
    this.ⵠⲆΔ[114].id = 114;
    this.ⵠⲆΔ[115] = zf(60, 60, 0, ᐃΔ[311], 3);
    this.ⵠⲆΔ[115].id = 115;
    this.ⵠⲆΔ[162] = zf(60, 60, 0, ᐃΔ[317], 3);
    this.ⵠⲆΔ[162].id = 162;
    this.ⵠⲆΔ[160] = zf(60, 60, 0, ᐃΔ[319], 3);
    this.ⵠⲆΔ[160].id = 160;
    this.ⵠⲆΔ[8] = zf(60, 60, 0, ᐃΔ[313], 3);
    this.ⵠⲆΔ[8].id = 8;
    this.ⵠⲆΔ[117] = zf(60, 60, 0, ᐃΔ[323], 3);
    this.ⵠⲆΔ[117].id = 117;
    this.ⵠⲆΔ[116] = zf(60, 60, 0, ᐃΔ[300], 3);
    this.ⵠⲆΔ[116].id = 116;
    this.ⵠⲆΔ[118] = zf(60, 60, 0, ᐃΔ[328], 3);
    this.ⵠⲆΔ[118].id = 118;
    this.ⵠⲆΔ[195] = zf(60, 60, 0, ᐃΔ[303], 3);
    this.ⵠⲆΔ[195].id = 195;
    this.ⵠⲆΔ[161] = zf(60, 60, 0, ᐃΔ[305], 3);
    this.ⵠⲆΔ[161].id = 161;
    this.ⵠⲆΔ[161].info.ⵠⵠ[2] = this.ⵠⲆΔ[161].info.ⵠⵠ[0];
    this.ⵠⲆΔ[163] = zf(60, 60, 0, ᐃΔ[329], 3);
    this.ⵠⲆΔ[163].id = 163;
    this.ⵠⲆΔ[164] = zf(60, 60, 0, ᐃΔ[330], 3);
    this.ⵠⲆΔ[164].id = 164;
    this.ⵠⲆΔ[165] = zf(60, 60, 0, ᐃΔ[331], 3);
    this.ⵠⲆΔ[165].id = 165;
    this.ⵠⲆΔ[166] = zf(60, 60, 0, ᐃΔ[335], 3);
    this.ⵠⲆΔ[166].id = 166;
    this.ⵠⲆΔ[167] = zf(60, 60, 0, ᐃΔ[337], 3);
    this.ⵠⲆΔ[167].id = 167;
    this.ⵠⲆΔ[168] = zf(60, 60, 0, ᐃΔ[361], 3);
    this.ⵠⲆΔ[168].id = 168;
    this.ⵠⲆΔ[169] = zf(60, 60, 0, ᐃΔ[362], 3);
    this.ⵠⲆΔ[169].id = 169;
    this.ⵠⲆΔ[170] = zf(60, 60, 0, ᐃΔ[364], 3);
    this.ⵠⲆΔ[170].id = 170;
    this.ⵠⲆΔ[29] = zf(60, 60, 0, ᐃΔ[392], 3);
    this.ⵠⲆΔ[29].id = 29;
    this.ⵠⲆΔ[10] = zf(60, 60, 0, ᐃΔ[369], 3);
    this.ⵠⲆΔ[10].id = 10;
    this.ⵠⲆΔ[171] = zf(60, 60, 0, ᐃΔ[372], 3);
    this.ⵠⲆΔ[171].id = 171;
    this.ⵠⲆΔ[172] = zf(60, 60, 0, ᐃΔ[375], 3);
    this.ⵠⲆΔ[172].id = 172;
    this.ⵠⲆΔ[173] = zf(60, 60, 0, ᐃΔ[378], 3);
    this.ⵠⲆΔ[173].id = 173;
    this.ⵠⲆΔ[2] = zf(60, 60, 0, ᐃΔ[368], 3);
    this.ⵠⲆΔ[2].id = 2;
    this.ⵠⲆΔ[2].info.ⵠⵠ[2] = this.ⵠⲆΔ[2].info.ⵠⵠ[0];
    this.ⵠⲆΔ[237] = zf(60, 60, 0, ᐃΔ[1162], 3);
    this.ⵠⲆΔ[237].id = 237;
    this.ⵠⲆΔ[237].info.ⵠⵠ[2] = this.ⵠⲆΔ[237].info.ⵠⵠ[0];
    this.ⵠⲆΔ[174] = zf(60, 60, 0, ᐃΔ[393], 3);
    this.ⵠⲆΔ[174].id = 174;
    this.ⵠⲆΔ[174].info.ⵠⵠ[2] = this.ⵠⲆΔ[174].info.ⵠⵠ[0];
    this.ⵠⲆΔ[222] = zf(60, 60, 0, ᐃΔ[1035], 3);
    this.ⵠⲆΔ[222].id = 222;
    this.ⵠⲆΔ[231] = zf(60, 60, 0, ᐃΔ[1037], 3);
    this.ⵠⲆΔ[231].id = 231;
    this.ⵠⲆΔ[232] = zf(60, 60, 0, ᐃΔ[1039], 3);
    this.ⵠⲆΔ[232].id = 232;
    this.ⵠⲆΔ[234] = zf(60, 60, 0, ᐃΔ[1156], 3);
    this.ⵠⲆΔ[234].id = 234;
    this.ⵠⲆΔ[10] = zf(60, 60, 0, ᐃΔ[369], 3);
    this.ⵠⲆΔ[10].id = 10;
    this.ⵠⲆΔ[11] = zf(60, 60, 0, ᐃΔ[381], 3);
    this.ⵠⲆΔ[11].id = 11;
    this.ⵠⲆΔ[12] = zf(60, 60, 0, ᐃΔ[401], 3);
    this.ⵠⲆΔ[12].id = 12;
    this.ⵠⲆΔ[13] = zf(60, 60, 0, ᐃΔ[395], 3);
    this.ⵠⲆΔ[13].id = 13;
    this.ⵠⲆΔ[14] = zf(60, 60, 0, ᐃΔ[398], 3);
    this.ⵠⲆΔ[14].id = 14;
    this.ⵠⲆΔ[15] = zf(60, 60, 0, ᐃΔ[404], 3);
    this.ⵠⲆΔ[15].id = 15;
    this.ⵠⲆΔ[16] = zf(60, 60, 0, ᐃΔ[874], 3);
    this.ⵠⲆΔ[16].id = 16;
    this.ⵠⲆΔ[119] = zf(60, 60, 0, ᐃΔ[408], 3);
    this.ⵠⲆΔ[119].id = 119;
    this.ⵠⲆΔ[23] = zf(60, 60, 0, ᐃΔ[420], 3);
    this.ⵠⲆΔ[23].id = 23;
    this.ⵠⲆΔ[24] = zf(60, 60, 0, ᐃΔ[423], 3);
    this.ⵠⲆΔ[24].id = 24;
    this.ⵠⲆΔ[87] = zf(60, 60, 0, ᐃΔ[1227], 3);
    this.ⵠⲆΔ[87].id = 87;
    this.ⵠⲆΔ[88] = zf(60, 60, 0, ᐃΔ[1230], 3);
    this.ⵠⲆΔ[88].id = 88;
    this.ⵠⲆΔ[80] = zf(60, 60, 0, ᐃΔ[1137], 3);
    this.ⵠⲆΔ[80].id = 80;
    this.ⵠⲆΔ[81] = zf(60, 60, 0, ᐃΔ[1140], 3);
    this.ⵠⲆΔ[81].id = 81;
    this.ⵠⲆΔ[64] = zf(60, 60, 0, ᐃΔ[569], 3);
    this.ⵠⲆΔ[64].id = 64;
    this.ⵠⲆΔ[101] = zf(60, 60, 0, ᐃΔ[1166], 3);
    this.ⵠⲆΔ[101].id = 101;
    this.ⵠⲆΔ[71] = zf(60, 60, 0, ᐃΔ[1239], 3);
    this.ⵠⲆΔ[71].id = 71;
    this.ⵠⲆΔ[65] = zf(60, 60, 0, ᐃΔ[572], 3);
    this.ⵠⲆΔ[65].id = 65;
    this.ⵠⲆΔ[102] = zf(60, 60, 0, ᐃΔ[1169], 3);
    this.ⵠⲆΔ[102].id = 102;
    this.ⵠⲆΔ[72] = zf(60, 60, 0, ᐃΔ[1242], 3);
    this.ⵠⲆΔ[72].id = 72;
    this.ⵠⲆΔ[66] = zf(60, 60, 0, ᐃΔ[575], 3);
    this.ⵠⲆΔ[66].id = 66;
    this.ⵠⲆΔ[103] = zf(60, 60, 0, ᐃΔ[1172], 3);
    this.ⵠⲆΔ[103].id = 103;
    this.ⵠⲆΔ[73] = zf(60, 60, 0, ᐃΔ[1245], 3);
    this.ⵠⲆΔ[73].id = 73;
    this.ⵠⲆΔ[67] = zf(60, 60, 0, ᐃΔ[578], 3);
    this.ⵠⲆΔ[67].id = 67;
    this.ⵠⲆΔ[104] = zf(60, 60, 0, ᐃΔ[1175], 3);
    this.ⵠⲆΔ[104].id = 104;
    this.ⵠⲆΔ[74] = zf(60, 60, 0, ᐃΔ[1248], 3);
    this.ⵠⲆΔ[74].id = 74;
    this.ⵠⲆΔ[68] = zf(60, 60, 0, ᐃΔ[581], 3);
    this.ⵠⲆΔ[68].id = 68;
    this.ⵠⲆΔ[105] = zf(60, 60, 0, ᐃΔ[1178], 3);
    this.ⵠⲆΔ[105].id = 105;
    this.ⵠⲆΔ[75] = zf(60, 60, 0, ᐃΔ[1251], 3);
    this.ⵠⲆΔ[75].id = 75;
    this.ⵠⲆΔ[69] = zf(60, 60, 0, ᐃΔ[584], 3);
    this.ⵠⲆΔ[69].id = 69;
    this.ⵠⲆΔ[106] = zf(60, 60, 0, ᐃΔ[1181], 3);
    this.ⵠⲆΔ[106].id = 106;
    this.ⵠⲆΔ[76] = zf(60, 60, 0, ᐃΔ[1254], 3);
    this.ⵠⲆΔ[76].id = 76;
    this.ⵠⲆΔ[70] = zf(60, 60, 0, ᐃΔ[587], 3);
    this.ⵠⲆΔ[70].id = 70;
    this.ⵠⲆΔ[107] = zf(60, 60, 0, ᐃΔ[1184], 3);
    this.ⵠⲆΔ[107].id = 107;
    this.ⵠⲆΔ[94] = zf(60, 60, 0, ᐃΔ[1257], 3);
    this.ⵠⲆΔ[94].id = 94;
    this.ⵠⲆΔ[95] = zf(60, 60, 0, ᐃΔ[1260], 3);
    this.ⵠⲆΔ[95].id = 95;
    this.ⵠⲆΔ[96] = zf(60, 60, 0, ᐃΔ[1263], 3);
    this.ⵠⲆΔ[96].id = 96;
    this.ⵠⲆΔ[97] = zf(60, 60, 0, ᐃΔ[1266], 3);
    this.ⵠⲆΔ[97].id = 97;
    this.ⵠⲆΔ[98] = zf(60, 60, 0, ᐃΔ[1269], 3);
    this.ⵠⲆΔ[98].id = 98;
    this.ⵠⲆΔ[99] = zf(60, 60, 0, ᐃΔ[1272], 3);
    this.ⵠⲆΔ[99].id = 99;
    this.ⵠⲆΔ[58] = zf(60, 60, 0, ᐃΔ[826], 3);
    this.ⵠⲆΔ[58].id = 58;
    this.ⵠⲆΔ[25] = zf(60, 60, 0, ᐃΔ[429], 3);
    this.ⵠⲆΔ[25].id = 25;
    this.ⵠⲆΔ[26] = zf(60, 60, 0, ᐃΔ[432], 3);
    this.ⵠⲆΔ[26].id = 26;
    this.ⵠⲆΔ[27] = zf(60, 60, 0, ᐃΔ[435], 3);
    this.ⵠⲆΔ[27].id = 27;
    this.ⵠⲆΔ[28] = zf(60, 60, 0, ᐃΔ[438], 3);
    this.ⵠⲆΔ[28].id = 28;
    this.ⵠⲆΔ[120] = zf(60, 60, 0, ᐃΔ[441], 3);
    this.ⵠⲆΔ[120].id = 120;
    this.ⵠⲆΔ[120].info.ⵠⵠ[2] = this.ⵠⲆΔ[120].info.ⵠⵠ[0];
    this.ⵠⲆΔ[29] = zf(60, 60, 0, ᐃΔ[392], 3);
    this.ⵠⲆΔ[29].id = 29;
    this.ⵠⲆΔ[121] = zf(60, 60, 0, ᐃΔ[418], 3);
    this.ⵠⲆΔ[121].id = 121;
    this.ⵠⲆΔ[121].info.ⵠⵠ[2] = this.ⵠⲆΔ[121].info.ⵠⵠ[0];
    this.ⵠⲆΔ[30] = zf(60, 60, 0, ᐃΔ[455], 3);
    this.ⵠⲆΔ[30].id = 30;
    this.ⵠⲆΔ[9] = zf(60, 60, 0, ᐃΔ[860], 3);
    this.ⵠⲆΔ[9].id = 9;
    this.ⵠⲆΔ[31] = zf(60, 60, 0, ᐃΔ[458], 3);
    this.ⵠⲆΔ[31].id = 31;
    this.ⵠⲆΔ[32] = zf(60, 60, 0, ᐃΔ[1017], 3);
    this.ⵠⲆΔ[32].id = 32;
    this.ⵠⲆΔ[33] = zf(60, 60, 0, ᐃΔ[472], 3);
    this.ⵠⲆΔ[33].id = 33;
    this.ⵠⲆΔ[35] = zf(60, 60, 0, ᐃΔ[477], 3);
    this.ⵠⲆΔ[35].id = 35;
    this.ⵠⲆΔ[36] = zf(60, 60, 0, ᐃΔ[480], 3);
    this.ⵠⲆΔ[36].id = 36;
    this.ⵠⲆΔ[37] = zf(60, 60, 0, ᐃΔ[483], 3);
    this.ⵠⲆΔ[37].id = 37;
    this.ⵠⲆΔ[38] = zf(60, 60, 0, ᐃΔ[486], 3);
    this.ⵠⲆΔ[38].id = 38;
    this.ⵠⲆΔ[39] = zf(60, 60, 0, ᐃΔ[489], 3);
    this.ⵠⲆΔ[39].id = 39;
    this.ⵠⲆΔ[122] = zf(60, 60, 0, ᐃΔ[492], 3);
    this.ⵠⲆΔ[122].id = 122;
    this.ⵠⲆΔ[123] = zf(60, 60, 0, ᐃΔ[495], 3);
    this.ⵠⲆΔ[123].id = 123;
    this.ⵠⲆΔ[124] = zf(60, 60, 0, ᐃΔ[499], 3);
    this.ⵠⲆΔ[124].id = 124;
    this.ⵠⲆΔ[40] = zf(60, 60, 0, ᐃΔ[502], 3);
    this.ⵠⲆΔ[40].id = 40;
    this.ⵠⲆΔ[146] = zf(60, 60, 0, ᐃΔ[505], 3);
    this.ⵠⲆΔ[146].id = 146;
    this.ⵠⲆΔ[146].info.ⵠⵠ[2] = this.ⵠⲆΔ[146].info.ⵠⵠ[0];
    this.ⵠⲆΔ[240] = zf(60, 60, 0, ᐃΔ[1233], 3);
    this.ⵠⲆΔ[240].id = 240;
    this.ⵠⲆΔ[240].info.ⵠⵠ[2] = this.ⵠⲆΔ[240].info.ⵠⵠ[0];
    this.ⵠⲆΔ[147] = zf(60, 60, 0, ᐃΔ[513], 3);
    this.ⵠⲆΔ[147].id = 147;
    this.ⵠⲆΔ[147].info.ⵠⵠ[2] = this.ⵠⲆΔ[147].info.ⵠⵠ[0];
    this.ⵠⲆΔ[148] = zf(60, 60, 0, ᐃΔ[518], 3);
    this.ⵠⲆΔ[148].id = 148;
    this.ⵠⲆΔ[148].info.ⵠⵠ[2] = this.ⵠⲆΔ[148].info.ⵠⵠ[0];
    this.ⵠⲆΔ[149] = zf(60, 60, 0, ᐃΔ[521], 3);
    this.ⵠⲆΔ[149].id = 149;
    this.ⵠⲆΔ[150] = zf(60, 60, 0, ᐃΔ[523], 3);
    this.ⵠⲆΔ[150].id = 150;
    this.ⵠⲆΔ[151] = zf(60, 60, 0, ᐃΔ[529], 3);
    this.ⵠⲆΔ[151].id = 151;
    this.ⵠⲆΔ[158] = zf(60, 60, 0, ᐃΔ[532], 3);
    this.ⵠⲆΔ[158].id = 158;
    this.ⵠⲆΔ[159] = zf(60, 60, 0, ᐃΔ[553], 3);
    this.ⵠⲆΔ[159].id = 159;
    this.ⵠⲆΔ[43] = zf(60, 60, 0, ᐃΔ[541], 3);
    this.ⵠⲆΔ[43].id = 43;
    this.ⵠⲆΔ[45] = zf(60, 60, 0, ᐃΔ[550], 3);
    this.ⵠⲆΔ[45].id = 45;
    this.ⵠⲆΔ[125] = zf(60, 60, 0, ᐃΔ[605], 3);
    this.ⵠⲆΔ[125].id = 125;
    this.ⵠⲆΔ[221] = zf(60, 60, 0, ᐃΔ[1236], 3);
    this.ⵠⲆΔ[221].id = 221;
    this.ⵠⲆΔ[223] = zf(60, 60, 0, ᐃΔ[1028], 3);
    this.ⵠⲆΔ[223].id = 223;
    this.ⵠⲆΔ[224] = zf(60, 60, 0, ᐃΔ[1031], 3);
    this.ⵠⲆΔ[224].id = 224;
    this.ⵠⲆΔ[230] = zf(60, 60, 0, ᐃΔ[1117], 3);
    this.ⵠⲆΔ[230].id = 230;
    this.ⵠⲆΔ[89] = zf(60, 60, 0, ᐃΔ[1046], 3);
    this.ⵠⲆΔ[89].id = 89;
    this.ⵠⲆΔ[225] = zf(60, 60, 0, ᐃΔ[1049], 3);
    this.ⵠⲆΔ[225].id = 225;
    this.ⵠⲆΔ[226] = zf(60, 60, 0, ᐃΔ[1189], 3);
    this.ⵠⲆΔ[226].id = 226;
    this.ⵠⲆΔ[227] = zf(60, 60, 0, ᐃΔ[1080], 3);
    this.ⵠⲆΔ[227].id = 227;
    this.ⵠⲆΔ[239] = zf(60, 60, 0, ᐃΔ[1224], 3);
    this.ⵠⲆΔ[239].id = 239;
    this.ⵠⲆΔ[228] = zf(60, 60, 0, ᐃΔ[1095], 3);
    this.ⵠⲆΔ[228].id = 228;
    this.ⵠⲆΔ[229] = zf(60, 60, 0, ᐃΔ[1110], 3);
    this.ⵠⲆΔ[229].id = 229;
    this.ⵠⲆΔ[126] = zf(60, 60, 0, ᐃΔ[609], 3);
    this.ⵠⲆΔ[126].id = 126;
    this.ⵠⲆΔ[126].info.ⵠⵠ[2] = this.ⵠⲆΔ[126].info.ⵠⵠ[0];
    this.ⵠⲆΔ[127] = zf(60, 60, 0, ᐃΔ[613], 3);
    this.ⵠⲆΔ[127].id = 127;
    this.ⵠⲆΔ[128] = zf(60, 60, 0, ᐃΔ[612], 3);
    this.ⵠⲆΔ[128].id = 128;
    this.ⵠⲆΔ[46] = zf(60, 60, 0, ᐃΔ[616], 3);
    this.ⵠⲆΔ[46].id = 46;
    this.ⵠⲆΔ[50] = zf(60, 60, 0, ᐃΔ[699], 3);
    this.ⵠⲆΔ[50].id = 50;
    this.ⵠⲆΔ[51] = zf(60, 60, 0, ᐃΔ[702], 3);
    this.ⵠⲆΔ[51].id = 51;
    this.ⵠⲆΔ[52] = zf(60, 60, 0, ᐃΔ[705], 3);
    this.ⵠⲆΔ[52].id = 52;
    this.ⵠⲆΔ[55] = zf(60, 60, 0, ᐃΔ[709], 3);
    this.ⵠⲆΔ[55].id = 55;
    this.ⵠⲆΔ[129] = zf(60, 60, 0, ᐃΔ[624], 3);
    this.ⵠⲆΔ[129].id = 129;
    this.ⵠⲆΔ[129].info.ⵠⵠ[2] = this.ⵠⲆΔ[129].info.ⵠⵠ[0];
    this.ⵠⲆΔ[130] = zf(60, 60, 0, ᐃΔ[626], 3);
    this.ⵠⲆΔ[130].id = 130;
    this.ⵠⲆΔ[131] = zf(60, 60, 0, ᐃΔ[629], 3);
    this.ⵠⲆΔ[131].id = 131;
    this.ⵠⲆΔ[131].info.ⵠⵠ[2] = this.ⵠⲆΔ[131].info.ⵠⵠ[0];
    this.ⵠⲆΔ[132] = zf(60, 60, 0, ᐃΔ[631], 3);
    this.ⵠⲆΔ[132].id = 132;
    this.ⵠⲆΔ[133] = zf(60, 60, 0, ᐃΔ[634], 3);
    this.ⵠⲆΔ[133].id = 133;
    this.ⵠⲆΔ[134] = zf(60, 60, 0, ᐃΔ[639], 3);
    this.ⵠⲆΔ[134].id = 134;
    this.ⵠⲆΔ[134].info.ⵠⵠ[2] = this.ⵠⲆΔ[134].info.ⵠⵠ[0];
    this.ⵠⲆΔ[135] = zf(60, 60, 0, ᐃΔ[644], 3);
    this.ⵠⲆΔ[135].id = 135;
    this.ⵠⲆΔ[47] = zf(60, 60, 0, ᐃΔ[646], 3);
    this.ⵠⲆΔ[47].id = 47;
    this.ⵠⲆΔ[48] = zf(60, 60, 0, ᐃΔ[649], 3);
    this.ⵠⲆΔ[48].id = 48;
    this.ⵠⲆΔ[49] = zf(60, 60, 0, ᐃΔ[652], 3);
    this.ⵠⲆΔ[49].id = 49;
    this.ⵠⲆΔ[136] = zf(60, 60, 0, ᐃΔ[659], 3);
    this.ⵠⲆΔ[136].id = 136;
    this.ⵠⲆΔ[143] = zf(60, 60, 0, ᐃΔ[143], 3);
    this.ⵠⲆΔ[143].id = 143;
    this.ⵠⲆΔ[137] = zf(60, 60, 0, ᐃΔ[662], 3);
    this.ⵠⲆΔ[137].id = 137;
    this.ⵠⲆΔ[138] = zf(60, 60, 0, ᐃΔ[664], 3);
    this.ⵠⲆΔ[138].id = 138;
    this.ⵠⲆΔ[139] = zf(60, 60, 0, ᐃΔ[674], 3);
    this.ⵠⲆΔ[139].id = 139;
    this.ⵠⲆΔ[139].info.ⵠⵠ[2] = this.ⵠⲆΔ[139].info.ⵠⵠ[0];
    this.ⵠⲆΔ[140] = zf(60, 60, 0, ᐃΔ[140], 3);
    this.ⵠⲆΔ[140].id = 140;
    this.ⵠⲆΔ[140].info.ⵠⵠ[2] = this.ⵠⲆΔ[140].info.ⵠⵠ[0];
    this.ⵠⲆΔ[141] = zf(60, 60, 0, ᐃΔ[685], 3);
    this.ⵠⲆΔ[141].id = 141;
    this.ⵠⲆΔ[142] = zf(60, 60, 0, ᐃΔ[142], 3);
    this.ⵠⲆΔ[142].id = 142;
    this.ⵠⲆΔ[142].info.ⵠⵠ[2] = this.ⵠⲆΔ[142].info.ⵠⵠ[0];
    this.ⵠⲆΔ[144] = zf(60, 60, 0, ᐃΔ[717], 3);
    this.ⵠⲆΔ[144].id = 144;
    this.ⵠⲆΔ[145] = zf(60, 60, 0, ᐃΔ[145], 3);
    this.ⵠⲆΔ[145].id = 145;
    this.ⵠⲆΔ[59] = zf(60, 60, 0, ᐃΔ[732], 3);
    this.ⵠⲆΔ[59].id = 59;
    this.ⵠⲆΔ[62] = zf(60, 60, 0, ᐃΔ[563], 3);
    this.ⵠⲆΔ[62].id = 62;
    this.ⵠⲆΔ[185] = zf(60, 60, 0, ᐃΔ[252], 3);
    this.ⵠⲆΔ[185].id = 185;
    this.ⵠⲆΔ[185].info.ⵠⵠ[2] = this.ⵠⲆΔ[185].info.ⵠⵠ[0];
    this.ⵠⲆΔ[184] = zf(60, 60, 0, ᐃΔ[751], 3);
    this.ⵠⲆΔ[184].id = 184;
    this.ⵠⲆΔ[184].info.ⵠⵠ[2] = this.ⵠⲆΔ[184].info.ⵠⵠ[0];
    this.ⵠⲆΔ[17] = zf(60, 60, 0, ᐃΔ[877], 3);
    this.ⵠⲆΔ[17].id = 17;
    this.ⵠⲆΔ[63] = zf(60, 60, 0, ᐃΔ[566], 3);
    this.ⵠⲆΔ[63].id = 63;
    this.ⵠⲆΔ[187] = zf(60, 60, 0, ᐃΔ[253], 3);
    this.ⵠⲆΔ[187].id = 187;
    this.ⵠⲆΔ[187].info.ⵠⵠ[2] = this.ⵠⲆΔ[187].info.ⵠⵠ[0];
    this.ⵠⲆΔ[186] = zf(60, 60, 0, ᐃΔ[753], 3);
    this.ⵠⲆΔ[186].id = 186;
    this.ⵠⲆΔ[186].info.ⵠⵠ[2] = this.ⵠⲆΔ[186].info.ⵠⵠ[0];
    this.ⵠⲆΔ[77] = zf(60, 60, 0, ᐃΔ[756], 3);
    this.ⵠⲆΔ[77].id = 77;
    this.ⵠⲆΔ[175] = zf(60, 60, 0, ᐃΔ[176], 3);
    this.ⵠⲆΔ[175].id = 175;
    this.ⵠⲆΔ[175].info.ⵠⵠ[2] = this.ⵠⲆΔ[175].info.ⵠⵠ[0];
    this.ⵠⲆΔ[176] = zf(60, 60, 0, ᐃΔ[177], 3);
    this.ⵠⲆΔ[176].id = 176;
    this.ⵠⲆΔ[176].info.ⵠⵠ[2] = this.ⵠⲆΔ[176].info.ⵠⵠ[0];
    this.ⵠⲆΔ[78] = zf(60, 60, 0, ᐃΔ[760], 3);
    this.ⵠⲆΔ[78].id = 78;
    this.ⵠⲆΔ[177] = zf(60, 60, 0, ᐃΔ[175], 3);
    this.ⵠⲆΔ[177].id = 177;
    this.ⵠⲆΔ[177].info.ⵠⵠ[2] = this.ⵠⲆΔ[177].info.ⵠⵠ[0];
    this.ⵠⲆΔ[79] = zf(60, 60, 0, ᐃΔ[764], 3);
    this.ⵠⲆΔ[79].id = 79;
    this.ⵠⲆΔ[83] = zf(60, 60, 0, ᐃΔ[767], 3);
    this.ⵠⲆΔ[83].id = 83;
    this.ⵠⲆΔ[84] = zf(60, 60, 0, ᐃΔ[771], 3);
    this.ⵠⲆΔ[84].id = 84;
    this.ⵠⲆΔ[178] = zf(60, 60, 0, ᐃΔ[178], 3);
    this.ⵠⲆΔ[178].id = 178;
    this.ⵠⲆΔ[179] = zf(60, 60, 0, ᐃΔ[179], 3);
    this.ⵠⲆΔ[179].id = 179;
    this.ⵠⲆΔ[86] = zf(60, 60, 0, ᐃΔ[776], 3);
    this.ⵠⲆΔ[86].id = 86;
    this.ⵠⲆΔ[85] = zf(60, 60, 0, ᐃΔ[779], 3);
    this.ⵠⲆΔ[85].id = 85;
    this.ⵠⲆΔ[180] = zf(60, 60, 0, ᐃΔ[180], 3);
    this.ⵠⲆΔ[180].id = 180;
    this.ⵠⲆΔ[181] = zf(60, 60, 0, ᐃΔ[181], 3);
    this.ⵠⲆΔ[181].id = 181;
    this.ⵠⲆΔ[182] = zf(60, 60, 0, ᐃΔ[789], 3);
    this.ⵠⲆΔ[182].id = 182;
    this.ⵠⲆΔ[183] = zf(60, 60, 0, ᐃΔ[800], 3);
    this.ⵠⲆΔ[183].id = 183;
    this.ⵠⲆΔ[188] = zf(60, 60, 0, ᐃΔ[808], 3);
    this.ⵠⲆΔ[188].id = 188;
    this.ⵠⲆΔ[189] = zf(60, 60, 0, ᐃΔ[814], 3);
    this.ⵠⲆΔ[189].id = 189;
    this.ⵠⲆΔ[191] = zf(60, 60, 0, ᐃΔ[834], 3);
    this.ⵠⲆΔ[191].id = 191;
    this.ⵠⲆΔ[192] = zf(60, 60, 0, ᐃΔ[840], 3);
    this.ⵠⲆΔ[192].id = 192;
    this.ⵠⲆΔ[190] = zf(60, 60, 0, ᐃΔ[842], 3);
    this.ⵠⲆΔ[190].id = 190;
    this.ⵠⲆΔ[193] = zf(60, 60, 0, ᐃΔ[845], 3);
    this.ⵠⲆΔ[193].id = 193;
    this.ⵠⲆΔ[194] = zf(60, 60, 0, ᐃΔ[850], 3);
    this.ⵠⲆΔ[194].id = 194;
    this.ⵠⲆΔ[204] = zf(60, 60, 0, ᐃΔ[949], 3);
    this.ⵠⲆΔ[204].id = 204;
    this.ⵠⲆΔ[205] = zf(60, 60, 0, ᐃΔ[955], 3);
    this.ⵠⲆΔ[205].id = 205;
    this.ⵠⲆΔ[206] = zf(60, 60, 0, ᐃΔ[959], 3);
    this.ⵠⲆΔ[206].id = 206;
    this.ⵠⲆΔ[207] = zf(60, 60, 0, ᐃΔ[965], 3);
    this.ⵠⲆΔ[207].id = 207;
    this.ⵠⲆΔ[208] = zf(60, 60, 0, ᐃΔ[966], 3);
    this.ⵠⲆΔ[208].id = 208;
    this.ⵠⲆΔ[209] = zf(60, 60, 0, ᐃΔ[972], 3);
    this.ⵠⲆΔ[209].id = 209;
    this.ⵠⲆΔ[210] = zf(60, 60, 0, ᐃΔ[981], 3);
    this.ⵠⲆΔ[210].id = 210;
    this.ⵠⲆΔ[211] = zf(60, 60, 0, ᐃΔ[987], 3);
    this.ⵠⲆΔ[211].id = 211;
    this.ⵠⲆΔ[41] = zf(60, 60, 0, ᐃΔ[880], 3);
    this.ⵠⲆΔ[41].id = 41;
    this.ⵠⲆΔ[42] = zf(60, 60, 0, ᐃΔ[882], 3);
    this.ⵠⲆΔ[42].id = 42;
    this.ⵠⲆΔ[12] = zf(60, 60, 0, ᐃΔ[401], 3);
    this.ⵠⲆΔ[12].id = 12;
    this.ⵠⲆΔ[16] = zf(60, 60, 0, ᐃΔ[874], 3);
    this.ⵠⲆΔ[16].id = 16;
    this.ⵠⲆΔ[196] = zf(60, 60, 0, ᐃΔ[196], 3);
    this.ⵠⲆΔ[196].id = 196;
    this.ⵠⲆΔ[18] = zf(60, 60, 0, ᐃΔ[901], 3);
    this.ⵠⲆΔ[18].id = 18;
    this.ⵠⲆΔ[197] = zf(60, 60, 0, ᐃΔ[197], 3);
    this.ⵠⲆΔ[197].id = 197;
    this.ⵠⲆΔ[198] = zf(60, 60, 0, ᐃΔ[907], 3);
    this.ⵠⲆΔ[198].id = 198;
    this.ⵠⲆΔ[61] = zf(60, 60, 0, ᐃΔ[910], 3);
    this.ⵠⲆΔ[61].id = 61;
    this.ⵠⲆΔ[201] = zf(60, 60, 0, ᐃΔ[870], 3);
    this.ⵠⲆΔ[201].id = 201;
    this.ⵠⲆΔ[200] = zf(60, 60, 0, ᐃΔ[200], 3);
    this.ⵠⲆΔ[200].id = 200;
    this.ⵠⲆΔ[199] = zf(60, 60, 0, ᐃΔ[865], 3);
    this.ⵠⲆΔ[199].id = 199;
    this.ⲆᐃΔ = [];
    this.ⲆᐃΔ[35] = zf(60, 60, 0, ᐃΔ[254], 3);
    this.ⲆᐃΔ[35].id = 35;
    this.ⲆᐃΔ[5] = zf(60, 60, 0, ᐃΔ[256], 3);
    this.ⲆᐃΔ[5].id = 5;
    this.ⲆᐃΔ[0] = zf(60, 60, 0, ᐃΔ[302], 3);
    this.ⲆᐃΔ[0].id = 0;
    this.ⲆᐃΔ[3] = zf(60, 60, 0, ᐃΔ[262], 3);
    this.ⲆᐃΔ[3].id = 3;
    this.ⲆᐃΔ[55] = zf(60, 60, 0, ᐃΔ[318], 3);
    this.ⲆᐃΔ[55].id = 55;
    this.ⲆᐃΔ[67] = zf(60, 60, 0, ᐃΔ[320], 3);
    this.ⲆᐃΔ[67].id = 67;
    this.ⲆᐃΔ[40] = zf(60, 60, 0, ᐃΔ[284], 3);
    this.ⲆᐃΔ[40].id = 40;
    this.ⲆᐃΔ[6] = zf(60, 60, 0, ᐃΔ[295], 3);
    this.ⲆᐃΔ[6].id = 6;
    this.ⲆᐃΔ[7] = zf(60, 60, 0, ᐃΔ[257], 3);
    this.ⲆᐃΔ[7].id = 7;
    this.ⲆᐃΔ[36] = zf(60, 60, 0, ᐃΔ[290], 3);
    this.ⲆᐃΔ[36].id = 36;
    this.ⲆᐃΔ[34] = zf(60, 60, 0, ᐃΔ[830], 3);
    this.ⲆᐃΔ[34].id = 34;
    this.ⲆᐃΔ[37] = zf(60, 60, 0, ᐃΔ[291], 3);
    this.ⲆᐃΔ[37].id = 37;
    this.ⲆᐃΔ[4] = zf(60, 60, 0, ᐃΔ[314], 3);
    this.ⲆᐃΔ[4].id = 4;
    this.ⲆᐃΔ[49] = zf(60, 60, 0, ᐃΔ[325], 3);
    this.ⲆᐃΔ[49].id = 49;
    this.ⲆᐃΔ[1] = zf(60, 60, 0, ᐃΔ[327], 3);
    this.ⲆᐃΔ[1].id = 1;
    this.ⲆᐃΔ[54] = zf(60, 60, 0, ᐃΔ[304], 3);
    this.ⲆᐃΔ[54].id = 54;
    this.ⲆᐃΔ[56] = zf(60, 60, 0, ᐃΔ[263], 3);
    this.ⲆᐃΔ[56].id = 56;
    this.ⲆᐃΔ[57] = zf(60, 60, 0, ᐃΔ[265], 3);
    this.ⲆᐃΔ[57].id = 57;
    this.ⲆᐃΔ[58] = zf(60, 60, 0, ᐃΔ[332], 3);
    this.ⲆᐃΔ[58].id = 58;
    this.ⲆᐃΔ[61] = zf(60, 60, 0, ᐃΔ[268], 3);
    this.ⲆᐃΔ[61].id = 61;
    this.ⲆᐃΔ[79] = zf(60, 60, 0, ᐃΔ[338], 3);
    this.ⲆᐃΔ[79].id = 79;
    this.ⲆᐃΔ[68] = zf(60, 60, 0, ᐃΔ[360], 3);
    this.ⲆᐃΔ[68].id = 68;
    this.ⲆᐃΔ[69] = zf(60, 60, 0, ᐃΔ[363], 3);
    this.ⲆᐃΔ[69].id = 69;
    this.ⲆᐃΔ[70] = zf(60, 60, 0, ᐃΔ[365], 3);
    this.ⲆᐃΔ[70].id = 70;
    this.ⲆᐃΔ[100] = zf(60, 60, 0, ᐃΔ[367], 3);
    this.ⲆᐃΔ[100].id = 100;
    this.ⲆᐃΔ[83] = zf(60, 60, 0, ᐃΔ[370], 3);
    this.ⲆᐃΔ[83].id = 83;
    this.ⲆᐃΔ[62] = zf(60, 60, 0, ᐃΔ[371], 3);
    this.ⲆᐃΔ[62].id = 62;
    this.ⲆᐃΔ[63] = zf(60, 60, 0, ᐃΔ[374], 3);
    this.ⲆᐃΔ[63].id = 63;
    this.ⲆᐃΔ[64] = zf(60, 60, 0, ᐃΔ[377], 3);
    this.ⲆᐃΔ[64].id = 64;
    this.ⲆᐃΔ[83] = zf(60, 60, 0, ᐃΔ[370], 3);
    this.ⲆᐃΔ[83].id = 83;
    this.ⲆᐃΔ[84] = zf(60, 60, 0, ᐃΔ[380], 3);
    this.ⲆᐃΔ[84].id = 84;
    this.ⲆᐃΔ[25] = zf(60, 60, 0, ᐃΔ[402], 3);
    this.ⲆᐃΔ[25].id = 25;
    this.ⲆᐃΔ[26] = zf(60, 60, 0, ᐃΔ[396], 3);
    this.ⲆᐃΔ[26].id = 26;
    this.ⲆᐃΔ[27] = zf(60, 60, 0, ᐃΔ[399], 3);
    this.ⲆᐃΔ[27].id = 27;
    this.ⲆᐃΔ[28] = zf(60, 60, 0, ᐃΔ[405], 3);
    this.ⲆᐃΔ[28].id = 28;
    this.ⲆᐃΔ[31] = zf(60, 60, 0, ᐃΔ[876], 3);
    this.ⲆᐃΔ[31].id = 31;
    this.ⲆᐃΔ[2] = zf(60, 60, 0, ᐃΔ[409], 3);
    this.ⲆᐃΔ[2].id = 2;
    this.ⲆᐃΔ[80] = zf(60, 60, 0, ᐃΔ[421], 3);
    this.ⲆᐃΔ[80].id = 80;
    this.ⲆᐃΔ[81] = zf(60, 60, 0, ᐃΔ[424], 3);
    this.ⲆᐃΔ[81].id = 81;
    this.ⲆᐃΔ[vs.ⵠⲆΔⵠⵠ] = zf(60, 60, 0, ᐃΔ[1228], 3);
    this.ⲆᐃΔ[vs.ⵠⲆΔⵠⵠ].id = vs.ⵠⲆΔⵠⵠ;
    this.ⲆᐃΔ[86] = zf(60, 60, 0, ᐃΔ[1231], 3);
    this.ⲆᐃΔ[86].id = 86;
    this.ⲆᐃΔ[98] = zf(60, 60, 0, ᐃΔ[1138], 3);
    this.ⲆᐃΔ[98].id = 98;
    this.ⲆᐃΔ[99] = zf(60, 60, 0, ᐃΔ[1141], 3);
    this.ⲆᐃΔ[99].id = 99;
    this.ⲆᐃΔ[131] = zf(60, 60, 0, ᐃΔ[570], 3);
    this.ⲆᐃΔ[131].id = 131;
    this.ⲆᐃΔ[132] = zf(60, 60, 0, ᐃΔ[1168], 3);
    this.ⲆᐃΔ[132].id = 132;
    this.ⲆᐃΔ[145] = zf(60, 60, 0, ᐃΔ[1238], 3);
    this.ⲆᐃΔ[145].id = 145;
    this.ⲆᐃΔ[133] = zf(60, 60, 0, ᐃΔ[573], 3);
    this.ⲆᐃΔ[133].id = 133;
    this.ⲆᐃΔ[134] = zf(60, 60, 0, ᐃΔ[1171], 3);
    this.ⲆᐃΔ[134].id = 134;
    this.ⲆᐃΔ[146] = zf(60, 60, 0, ᐃΔ[1241], 3);
    this.ⲆᐃΔ[146].id = 146;
    this.ⲆᐃΔ[135] = zf(60, 60, 0, ᐃΔ[576], 3);
    this.ⲆᐃΔ[135].id = 135;
    this.ⲆᐃΔ[136] = zf(60, 60, 0, ᐃΔ[1174], 3);
    this.ⲆᐃΔ[136].id = 136;
    this.ⲆᐃΔ[147] = zf(60, 60, 0, ᐃΔ[1244], 3);
    this.ⲆᐃΔ[147].id = 147;
    this.ⲆᐃΔ[137] = zf(60, 60, 0, ᐃΔ[579], 3);
    this.ⲆᐃΔ[137].id = 137;
    this.ⲆᐃΔ[138] = zf(60, 60, 0, ᐃΔ[1177], 3);
    this.ⲆᐃΔ[138].id = 138;
    this.ⲆᐃΔ[167] = zf(60, 60, 0, ᐃΔ[1256], 3);
    this.ⲆᐃΔ[167].id = 167;
    this.ⲆᐃΔ[168] = zf(60, 60, 0, ᐃΔ[1259], 3);
    this.ⲆᐃΔ[168].id = 168;
    this.ⲆᐃΔ[169] = zf(60, 60, 0, ᐃΔ[1262], 3);
    this.ⲆᐃΔ[169].id = 169;
    this.ⲆᐃΔ[170] = zf(60, 60, 0, ᐃΔ[1265], 3);
    this.ⲆᐃΔ[170].id = 170;
    this.ⲆᐃΔ[171] = zf(60, 60, 0, ᐃΔ[1268], 3);
    this.ⲆᐃΔ[171].id = 171;
    this.ⲆᐃΔ[172] = zf(60, 60, 0, ᐃΔ[1271], 3);
    this.ⲆᐃΔ[172].id = 172;
    this.ⲆᐃΔ[148] = zf(60, 60, 0, ᐃΔ[1247], 3);
    this.ⲆᐃΔ[148].id = 148;
    this.ⲆᐃΔ[139] = zf(60, 60, 0, ᐃΔ[582], 3);
    this.ⲆᐃΔ[139].id = 139;
    this.ⲆᐃΔ[140] = zf(60, 60, 0, ᐃΔ[1180], 3);
    this.ⲆᐃΔ[140].id = 140;
    this.ⲆᐃΔ[149] = zf(60, 60, 0, ᐃΔ[1250], 3);
    this.ⲆᐃΔ[149].id = 149;
    this.ⲆᐃΔ[141] = zf(60, 60, 0, ᐃΔ[585], 3);
    this.ⲆᐃΔ[141].id = 141;
    this.ⲆᐃΔ[142] = zf(60, 60, 0, ᐃΔ[1183], 3);
    this.ⲆᐃΔ[142].id = 142;
    this.ⲆᐃΔ[150] = zf(60, 60, 0, ᐃΔ[1253], 3);
    this.ⲆᐃΔ[150].id = 150;
    this.ⲆᐃΔ[143] = zf(60, 60, 0, ᐃΔ[588], 3);
    this.ⲆᐃΔ[143].id = 143;
    this.ⲆᐃΔ[144] = zf(60, 60, 0, ᐃΔ[1186], 3);
    this.ⲆᐃΔ[144].id = 144;
    this.ⲆᐃΔ[87] = zf(60, 60, 0, ᐃΔ[827], 3);
    this.ⲆᐃΔ[87].id = 87;
    this.ⲆᐃΔ[88] = zf(60, 60, 0, ᐃΔ[430], 3);
    this.ⲆᐃΔ[88].id = 88;
    this.ⲆᐃΔ[89] = zf(60, 60, 0, ᐃΔ[433], 3);
    this.ⲆᐃΔ[89].id = 89;
    this.ⲆᐃΔ[90] = zf(60, 60, 0, ᐃΔ[436], 3);
    this.ⲆᐃΔ[90].id = 90;
    this.ⲆᐃΔ[24] = zf(60, 60, 0, ᐃΔ[439], 3);
    this.ⲆᐃΔ[24].id = 24;
    this.ⲆᐃΔ[101] = zf(60, 60, 0, ᐃΔ[442], 3);
    this.ⲆᐃΔ[101].id = 101;
    this.ⲆᐃΔ[100] = zf(60, 60, 0, ᐃΔ[367], 3);
    this.ⲆᐃΔ[100].id = 100;
    this.ⲆᐃΔ[38] = zf(60, 60, 0, ᐃΔ[456], 3);
    this.ⲆᐃΔ[38].id = 38;
    this.ⲆᐃΔ[vs.ᐃⵠⲆⵠⲆ] = zf(60, 60, 0, ᐃΔ[861], 3);
    this.ⲆᐃΔ[vs.ᐃⵠⲆⵠⲆ].id = vs.ᐃⵠⲆⵠⲆ;
    this.ⲆᐃΔ[8] = zf(60, 60, 0, ᐃΔ[460], 3);
    this.ⲆᐃΔ[8].id = 8;
    this.ⲆᐃΔ[9] = zf(60, 60, 0, ᐃΔ[1019], 3);
    this.ⲆᐃΔ[9].id = 9;
    this.ⲆᐃΔ[29] = zf(60, 60, 0, ᐃΔ[473], 3);
    this.ⲆᐃΔ[29].id = 29;
    this.ⲆᐃΔ[10] = zf(60, 60, 0, ᐃΔ[478], 3);
    this.ⲆᐃΔ[10].id = 10;
    this.ⲆᐃΔ[11] = zf(60, 60, 0, ᐃΔ[481], 3);
    this.ⲆᐃΔ[11].id = 11;
    this.ⲆᐃΔ[12] = zf(60, 60, 0, ᐃΔ[484], 3);
    this.ⲆᐃΔ[12].id = 12;
    this.ⲆᐃΔ[13] = zf(60, 60, 0, ᐃΔ[487], 3);
    this.ⲆᐃΔ[13].id = 13;
    this.ⲆᐃΔ[14] = zf(60, 60, 0, ᐃΔ[490], 3);
    this.ⲆᐃΔ[14].id = 14;
    this.ⲆᐃΔ[59] = zf(60, 60, 0, ᐃΔ[493], 3);
    this.ⲆᐃΔ[59].id = 59;
    this.ⲆᐃΔ[71] = zf(60, 60, 0, ᐃΔ[496], 3);
    this.ⲆᐃΔ[71].id = 71;
    this.ⲆᐃΔ[65] = zf(60, 60, 0, ᐃΔ[498], 3);
    this.ⲆᐃΔ[65].id = 65;
    this.ⲆᐃΔ[85] = zf(60, 60, 0, ᐃΔ[503], 3);
    this.ⲆᐃΔ[85].id = 85;
    this.ⲆᐃΔ[102] = zf(60, 60, 0, ᐃΔ[515], 3);
    this.ⲆᐃΔ[102].id = 102;
    this.ⲆᐃΔ[103] = zf(60, 60, 0, ᐃΔ[519], 3);
    this.ⲆᐃΔ[103].id = 103;
    this.ⲆᐃΔ[115] = zf(60, 60, 0, ᐃΔ[530], 3);
    this.ⲆᐃΔ[115].id = 115;
    this.ⲆᐃΔ[104] = zf(60, 60, 0, ᐃΔ[533], 3);
    this.ⲆᐃΔ[104].id = 104;
    this.ⲆᐃΔ[105] = zf(60, 60, 0, ᐃΔ[555], 3);
    this.ⲆᐃΔ[105].id = 105;
    this.ⲆᐃΔ[91] = zf(60, 60, 0, ᐃΔ[542], 3);
    this.ⲆᐃΔ[91].id = 91;
    this.ⲆᐃΔ[15] = zf(60, 60, 0, ᐃΔ[551], 3);
    this.ⲆᐃΔ[15].id = 15;
    this.ⲆᐃΔ[106] = zf(60, 60, 0, ᐃΔ[604], 3);
    this.ⲆᐃΔ[106].id = 106;
    this.ⲆᐃΔ[108] = zf(60, 60, 0, ᐃΔ[1235], 3);
    this.ⲆᐃΔ[108].id = 108;
    this.ⲆᐃΔ[163] = zf(60, 60, 0, ᐃΔ[1027], 3);
    this.ⲆᐃΔ[163].id = 163;
    this.ⲆᐃΔ[164] = zf(60, 60, 0, ᐃΔ[1030], 3);
    this.ⲆᐃΔ[164].id = 164;
    this.ⲆᐃΔ[166] = zf(60, 60, 0, ᐃΔ[1116], 3);
    this.ⲆᐃΔ[166].id = 166;
    this.ⲆᐃΔ[165] = zf(60, 60, 0, ᐃΔ[1048], 3);
    this.ⲆᐃΔ[165].id = 165;
    this.ⲆᐃΔ[vs.ⵠᐃᐃᐃΔ] = zf(60, 60, 0, ᐃΔ[1051], 3);
    this.ⲆᐃΔ[vs.ⵠᐃᐃᐃΔ].id = vs.ⵠᐃᐃᐃΔ;
    this.ⲆᐃΔ[vs.ΔΔᐃⲆΔ] = zf(60, 60, 0, ᐃΔ[1082], 3);
    this.ⲆᐃΔ[vs.ΔΔᐃⲆΔ].id = vs.ΔΔᐃⲆΔ;
    this.ⲆᐃΔ[vs.ᐃⵠⵠⵠΔ] = zf(60, 60, 0, ᐃΔ[1226], 3);
    this.ⲆᐃΔ[vs.ᐃⵠⵠⵠΔ].id = vs.ᐃⵠⵠⵠΔ;
    this.ⲆᐃΔ[vs.ᐃΔᐃⵠᐃ] = zf(60, 60, 0, ᐃΔ[1191], 3);
    this.ⲆᐃΔ[vs.ᐃΔᐃⵠᐃ].id = vs.ᐃΔᐃⵠᐃ;
    this.ⲆᐃΔ[110] = zf(60, 60, 0, ᐃΔ[611], 3);
    this.ⲆᐃΔ[110].id = 110;
    this.ⲆᐃΔ[111] = zf(60, 60, 0, ᐃΔ[715], 3);
    this.ⲆᐃΔ[111].id = 111;
    this.ⲆᐃΔ[112] = zf(60, 60, 0, ᐃΔ[715], 3);
    this.ⲆᐃΔ[112].id = 112;
    this.ⲆᐃΔ[113] = zf(60, 60, 0, ᐃΔ[715], 3);
    this.ⲆᐃΔ[113].id = 113;
    this.ⲆᐃΔ[16] = zf(60, 60, 0, ᐃΔ[618], 3);
    this.ⲆᐃΔ[16].id = 16;
    this.ⲆᐃΔ[17] = zf(60, 60, 0, ᐃΔ[700], 3);
    this.ⲆᐃΔ[17].id = 17;
    this.ⲆᐃΔ[18] = zf(60, 60, 0, ᐃΔ[704], 3);
    this.ⲆᐃΔ[18].id = 18;
    this.ⲆᐃΔ[19] = zf(60, 60, 0, ᐃΔ[706], 3);
    this.ⲆᐃΔ[19].id = 19;
    this.ⲆᐃΔ[122] = zf(60, 60, 0, ᐃΔ[711], 3);
    this.ⲆᐃΔ[122].id = 122;
    this.ⲆᐃΔ[20] = zf(60, 60, 0, ᐃΔ[627], 3);
    this.ⲆᐃΔ[20].id = 20;
    this.ⲆᐃΔ[41] = zf(60, 60, 0, ᐃΔ[632], 3);
    this.ⲆᐃΔ[41].id = 41;
    this.ⲆᐃΔ[52] = zf(60, 60, 0, ᐃΔ[635], 3);
    this.ⲆᐃΔ[52].id = 52;
    this.ⲆᐃΔ[114] = zf(60, 60, 0, ᐃΔ[643], 3);
    this.ⲆᐃΔ[114].id = 114;
    this.ⲆᐃΔ[94] = zf(60, 60, 0, ᐃΔ[647], 3);
    this.ⲆᐃΔ[94].id = 94;
    this.ⲆᐃΔ[93] = zf(60, 60, 0, ᐃΔ[650], 3);
    this.ⲆᐃΔ[93].id = 93;
    this.ⲆᐃΔ[21] = zf(60, 60, 0, ᐃΔ[654], 3);
    this.ⲆᐃΔ[21].id = 21;
    this.ⲆᐃΔ[53] = zf(60, 60, 0, ᐃΔ[660], 3);
    this.ⲆᐃΔ[53].id = 53;
    this.ⲆᐃΔ[51] = zf(60, 60, 0, ᐃΔ[690], 3);
    this.ⲆᐃΔ[51].id = 51;
    this.ⲆᐃΔ[50] = zf(60, 60, 0, ᐃΔ[666], 3);
    this.ⲆᐃΔ[50].id = 50;
    this.ⲆᐃΔ[109] = zf(60, 60, 0, ᐃΔ[684], 3);
    this.ⲆᐃΔ[109].id = 109;
    this.ⲆᐃΔ[124] = zf(60, 60, 0, ᐃΔ[718], 3);
    this.ⲆᐃΔ[124].id = 124;
    this.ⲆᐃΔ[125] = zf(60, 60, 0, ᐃΔ[730], 3);
    this.ⲆᐃΔ[125].id = 125;
    this.ⲆᐃΔ[126] = zf(60, 60, 0, ᐃΔ[734], 3);
    this.ⲆᐃΔ[126].id = 126;
    this.ⲆᐃΔ[129] = zf(60, 60, 0, ᐃΔ[563], 3);
    this.ⲆᐃΔ[129].id = 129;
    this.ⲆᐃΔ[151] = zf(60, 60, 0, ᐃΔ[758], 3);
    this.ⲆᐃΔ[151].id = 151;
    this.ⲆᐃΔ[152] = zf(60, 60, 0, ᐃΔ[762], 3);
    this.ⲆᐃΔ[152].id = 152;
    this.ⲆᐃΔ[153] = zf(60, 60, 0, ᐃΔ[770], 3);
    this.ⲆᐃΔ[153].id = 153;
    this.ⲆᐃΔ[154] = zf(60, 60, 0, ᐃΔ[768], 3);
    this.ⲆᐃΔ[154].id = 154;
    this.ⲆᐃΔ[155] = zf(60, 60, 0, ᐃΔ[772], 3);
    this.ⲆᐃΔ[155].id = 155;
    this.ⲆᐃΔ[157] = zf(60, 60, 0, ᐃΔ[777], 3);
    this.ⲆᐃΔ[157].id = 157;
    this.ⲆᐃΔ[156] = zf(60, 60, 0, ᐃΔ[780], 3);
    this.ⲆᐃΔ[156].id = 156;
    this.ⲆᐃΔ[158] = zf(60, 60, 0, ᐃΔ[784], 3);
    this.ⲆᐃΔ[158].id = 158;
    this.ⲆᐃΔ[159] = zf(60, 60, 0, ᐃΔ[785], 3);
    this.ⲆᐃΔ[159].id = 159;
    this.ⲆᐃΔ[160] = zf(60, 60, 0, ᐃΔ[791], 3);
    this.ⲆᐃΔ[160].id = 160;
    this.ⲆᐃΔ[161] = zf(60, 60, 0, ᐃΔ[799], 3);
    this.ⲆᐃΔ[161].id = 161;
    this.ⲆᐃΔ[42] = zf(60, 60, 0, ᐃΔ[809], 3);
    this.ⲆᐃΔ[42].id = 42;
    this.ⲆᐃΔ[43] = zf(60, 60, 0, ᐃΔ[835], 3);
    this.ⲆᐃΔ[43].id = 43;
    this.ⲆᐃΔ[107] = zf(60, 60, 0, ᐃΔ[843], 3);
    this.ⲆᐃΔ[107].id = 107;
    this.ⲆᐃΔ[44] = zf(60, 60, 0, ᐃΔ[846], 3);
    this.ⲆᐃΔ[44].id = 44;
    this.ⲆᐃΔ[46] = zf(60, 60, 0, ᐃΔ[960], 3);
    this.ⲆᐃΔ[46].id = 46;
    this.ⲆᐃΔ[45] = zf(60, 60, 0, ᐃΔ[950], 3);
    this.ⲆᐃΔ[45].id = 45;
    this.ⲆᐃΔ[47] = zf(60, 60, 0, ᐃΔ[967], 3);
    this.ⲆᐃΔ[47].id = 47;
    this.ⲆᐃΔ[48] = zf(60, 60, 0, ᐃΔ[982], 3);
    this.ⲆᐃΔ[48].id = 48;
    this.ⲆᐃΔ[25] = zf(60, 60, 0, ᐃΔ[402], 3);
    this.ⲆᐃΔ[25].id = 25;
    this.ⲆᐃΔ[31] = zf(60, 60, 0, ᐃΔ[876], 3);
    this.ⲆᐃΔ[31].id = 31;
    this.ⲆᐃΔ[33] = zf(60, 60, 0, ᐃΔ[900], 3);
    this.ⲆᐃΔ[33].id = 33;
    this.ⲆᐃΔ[162] = zf(60, 60, 0, ᐃΔ[909], 3);
    this.ⲆᐃΔ[162].id = 162;
    this.ⲆᐃΔ[128] = zf(60, 60, 0, ᐃΔ[912], 3);
    this.ⲆᐃΔ[128].id = 128;
    this.Ⲇⵠⵠ[53] = zf(68, 68, 0, ᐃΔ[976], 3);
    this.Ⲇⵠⵠ[53].id = 53;
    this.ⵠⲆΔ[53] = zf(60, 60, 0, ᐃΔ[975], 3);
    this.ⵠⲆΔ[53].id = 53;
    this.ⲆᐃΔ[22] = zf(60, 60, 0, ᐃΔ[977], 3);
    this.ⲆᐃΔ[22].id = 22;
    this.Ⲇⵠⵠ[54] = zf(68, 68, 0, ᐃΔ[979], 3);
    this.Ⲇⵠⵠ[54].id = 54;
    this.ⵠⲆΔ[54] = zf(60, 60, 0, ᐃΔ[978], 3);
    this.ⵠⲆΔ[54].id = 54;
    this.ⲆᐃΔ[23] = zf(60, 60, 0, ᐃΔ[980], 3);
    this.ⲆᐃΔ[23].id = 23;
    this.Ⲇⵠⵠ[56] = zf(68, 68, 0, ᐃΔ[713], 3);
    this.Ⲇⵠⵠ[56].id = 56;
    this.ⵠⲆΔ[56] = zf(60, 60, 0, ᐃΔ[712], 3);
    this.ⵠⲆΔ[56].id = 56;
    this.ⲆᐃΔ[123] = zf(60, 60, 0, ᐃΔ[714], 3);
    this.ⲆᐃΔ[123].id = 123;
    this.Ⲇⵠⵠ[82] = zf(68, 68, 0, ᐃΔ[428], 3);
    this.Ⲇⵠⵠ[82].id = 82;
    this.ⵠⲆΔ[82] = zf(60, 60, 0, ᐃΔ[426], 3);
    this.ⵠⲆΔ[82].id = 82;
    this.ⲆᐃΔ[82] = zf(60, 60, 0, ᐃΔ[427], 3);
    this.ⲆᐃΔ[82].id = 82;
    this.Ⲇⵠⵠ[235] = zf(68, 68, 0, ᐃΔ[1159], 3);
    this.Ⲇⵠⵠ[235].id = 235;
    this.ⵠⲆΔ[235] = zf(60, 60, 0, ᐃΔ[1158], 3);
    this.ⵠⲆΔ[235].id = 235;
    this.Ⲇⵠⵠ[238] = zf(68, 68, 0, ᐃΔ[1188], 3);
    this.Ⲇⵠⵠ[238].id = 238;
    this.ⵠⲆΔ[238] = zf(60, 60, 0, ᐃΔ[1187], 3);
    this.ⵠⲆΔ[238].id = 238;
    this.Ⲇⵠⵠ[236] = zf(68, 68, 0, ᐃΔ[1161], 3);
    this.Ⲇⵠⵠ[236].id = 236;
    this.ⵠⲆΔ[236] = zf(60, 60, 0, ᐃΔ[1160], 3);
    this.ⵠⲆΔ[236].id = 236;
    this.Ⲇⵠⵠ[152] = zf(68, 68, 0, ᐃΔ[1197], 3);
    this.Ⲇⵠⵠ[152].id = 152;
    this.ⵠⲆΔ[152] = zf(60, 60, 0, ᐃΔ[1195], 3);
    this.ⵠⲆΔ[152].id = 152;
    this.ⲆᐃΔ[116] = zf(60, 60, 0, ᐃΔ[1196], 3);
    this.ⲆᐃΔ[116].id = 116;
    this.Ⲇⵠⵠ[212] = zf(68, 68, 0, ᐃΔ[992], 3);
    this.Ⲇⵠⵠ[212].id = 212;
    this.ⵠⲆΔ[212] = zf(60, 60, 0, ᐃΔ[991], 3);
    this.ⵠⲆΔ[212].id = 212;
    this.ⲆᐃΔ[73] = zf(60, 60, 0, ᐃΔ[990], 3);
    this.ⲆᐃΔ[73].id = 73;
    this.Ⲇⵠⵠ[213] = zf(68, 68, 0, ᐃΔ[995], 3);
    this.Ⲇⵠⵠ[213].id = 213;
    this.ⵠⲆΔ[213] = zf(60, 60, 0, ᐃΔ[994], 3);
    this.ⵠⲆΔ[213].id = 213;
    this.ⲆᐃΔ[74] = zf(60, 60, 0, ᐃΔ[993], 3);
    this.ⲆᐃΔ[74].id = 74;
    this.Ⲇⵠⵠ[214] = zf(68, 68, 0, ᐃΔ[998], 3);
    this.Ⲇⵠⵠ[214].id = 214;
    this.ⵠⲆΔ[214] = zf(60, 60, 0, ᐃΔ[997], 3);
    this.ⵠⲆΔ[214].id = 214;
    this.ⲆᐃΔ[75] = zf(60, 60, 0, ᐃΔ[996], 3);
    this.ⲆᐃΔ[75].id = 75;
    this.Ⲇⵠⵠ[215] = zf(68, 68, 0, ᐃΔ[1001], 3);
    this.Ⲇⵠⵠ[215].id = 215;
    this.ⵠⲆΔ[215] = zf(60, 60, 0, ᐃΔ[1000], 3);
    this.ⵠⲆΔ[215].id = 215;
    this.ⲆᐃΔ[76] = zf(60, 60, 0, ᐃΔ[999], 3);
    this.ⲆᐃΔ[76].id = 76;
    this.Ⲇⵠⵠ[216] = zf(68, 68, 0, ᐃΔ[1004], 3);
    this.Ⲇⵠⵠ[216].id = 216;
    this.ⵠⲆΔ[216] = zf(60, 60, 0, ᐃΔ[1003], 3);
    this.ⵠⲆΔ[216].id = 216;
    this.ⲆᐃΔ[77] = zf(60, 60, 0, ᐃΔ[1002], 3);
    this.ⲆᐃΔ[77].id = 77;
    this.Ⲇⵠⵠ[220] = zf(68, 68, 0, ᐃΔ[1007], 3);
    this.Ⲇⵠⵠ[220].id = 220;
    this.ⵠⲆΔ[220] = zf(60, 60, 0, ᐃΔ[1006], 3);
    this.ⵠⲆΔ[220].id = 220;
    this.ⲆᐃΔ[78] = zf(60, 60, 0, ᐃΔ[1005], 3);
    this.ⲆᐃΔ[78].id = 78;
    this.Ⲇⵠⵠ[217] = zf(68, 68, 0, ᐃΔ[1016], 3);
    this.Ⲇⵠⵠ[217].id = 217;
    this.ⵠⲆΔ[217] = zf(60, 60, 0, ᐃΔ[1015], 3);
    this.ⵠⲆΔ[217].id = 217;
    this.ⲆᐃΔ[60] = zf(60, 60, 0, ᐃΔ[1014], 3);
    this.ⲆᐃΔ[60].id = 60;
    this.Ⲇⵠⵠ[219] = zf(68, 68, 0, ᐃΔ[1013], 3);
    this.Ⲇⵠⵠ[219].id = 219;
    this.ⵠⲆΔ[219] = zf(60, 60, 0, ᐃΔ[1012], 3);
    this.ⵠⲆΔ[219].id = 219;
    this.ⲆᐃΔ[72] = zf(60, 60, 0, ᐃΔ[1011], 3);
    this.ⲆᐃΔ[72].id = 72;
    this.Ⲇⵠⵠ[218] = zf(68, 68, 0, ᐃΔ[1010], 3);
    this.Ⲇⵠⵠ[218].id = 218;
    this.ⵠⲆΔ[218] = zf(60, 60, 0, ᐃΔ[1009], 3);
    this.ⵠⲆΔ[218].id = 218;
    this.ⲆᐃΔ[66] = zf(60, 60, 0, ᐃΔ[1008], 3);
    this.ⲆᐃΔ[66].id = 66;
    this.Ⲇⵠⵠ[153] = zf(68, 68, 0, ᐃΔ[1201], 3);
    this.Ⲇⵠⵠ[153].id = 153;
    this.ⵠⲆΔ[153] = zf(60, 60, 0, ᐃΔ[1199], 3);
    this.ⵠⲆΔ[153].id = 153;
    this.ⲆᐃΔ[117] = zf(60, 60, 0, ᐃΔ[1200], 3);
    this.ⲆᐃΔ[117].id = 117;
    this.Ⲇⵠⵠ[154] = zf(68, 68, 0, ᐃΔ[1205], 3);
    this.Ⲇⵠⵠ[154].id = 154;
    this.ⵠⲆΔ[154] = zf(60, 60, 0, ᐃΔ[1203], 3);
    this.ⵠⲆΔ[154].id = 154;
    this.ⲆᐃΔ[118] = zf(60, 60, 0, ᐃΔ[1204], 3);
    this.ⲆᐃΔ[118].id = 118;
    this.Ⲇⵠⵠ[155] = zf(68, 68, 0, ᐃΔ[1209], 3);
    this.Ⲇⵠⵠ[155].id = 155;
    this.ⵠⲆΔ[155] = zf(60, 60, 0, ᐃΔ[1207], 3);
    this.ⵠⲆΔ[155].id = 155;
    this.ⲆᐃΔ[119] = zf(60, 60, 0, ᐃΔ[1208], 3);
    this.ⲆᐃΔ[119].id = 119;
    this.Ⲇⵠⵠ[156] = zf(68, 68, 0, ᐃΔ[1213], 3);
    this.Ⲇⵠⵠ[156].id = 156;
    this.ⵠⲆΔ[156] = zf(60, 60, 0, ᐃΔ[1211], 3);
    this.ⵠⲆΔ[156].id = 156;
    this.ⲆᐃΔ[120] = zf(60, 60, 0, ᐃΔ[1212], 3);
    this.ⲆᐃΔ[120].id = 120;
    this.Ⲇⵠⵠ[157] = zf(68, 68, 0, ᐃΔ[1217], 3);
    this.Ⲇⵠⵠ[157].id = 157;
    this.ⵠⲆΔ[157] = zf(60, 60, 0, ᐃΔ[1215], 3);
    this.ⵠⲆΔ[157].id = 157;
    this.ⲆᐃΔ[121] = zf(60, 60, 0, ᐃΔ[1216], 3);
    this.ⲆᐃΔ[121].id = 121;
    this.Ⲇⵠⵠ[203] = zf(68, 68, 0, ᐃΔ[937], 3);
    this.Ⲇⵠⵠ[203].id = 203;
    this.ⵠⲆΔ[203] = zf(60, 60, 0, ᐃΔ[936], 3);
    this.ⵠⲆΔ[203].id = 203;
    this.ⵠⲆΔ[203].info.ⵠⵠ[2] = this.ⵠⲆΔ[203].info.ⵠⵠ[0];
    this.Ⲇⵠⵠ[150] = zf(68, 68, 0, ᐃΔ[524], 3);
    this.Ⲇⵠⵠ[150].id = 150;
    this.ⵠⲆΔ[150] = zf(60, 60, 0, ᐃΔ[523], 3);
    this.ⵠⲆΔ[150].id = 150;
    this.ⵠⲆΔ[150].info.ⵠⵠ[2] = this.ⵠⲆΔ[150].info.ⵠⵠ[0];
    this.Ⲇⵠⵠ[202] = zf(68, 68, 0, ᐃΔ[939], 3);
    this.Ⲇⵠⵠ[202].id = 202;
    this.ⵠⲆΔ[202] = zf(60, 60, 0, ᐃΔ[938], 3);
    this.ⵠⲆΔ[202].id = 202;
    this.ⵠⲆΔ[202].info.ⵠⵠ[2] = this.ⵠⲆΔ[202].info.ⵠⵠ[0];
    this.Ⲇⵠⵠ[19] = zf(68, 68, 0, ᐃΔ[934], 3);
    this.Ⲇⵠⵠ[19].id = 19;
    this.ⵠⲆΔ[19] = zf(60, 60, 0, ᐃΔ[932], 3);
    this.ⵠⲆΔ[19].id = 19;
    this.ⲆᐃΔ[39] = zf(60, 60, 0, ᐃΔ[933], 3);
    this.ⲆᐃΔ[39].id = 39;
    this.Ⲇⵠⵠ[20] = zf(68, 68, 0, ᐃΔ[923], 3);
    this.Ⲇⵠⵠ[20].id = 20;
    this.ⵠⲆΔ[20] = zf(60, 60, 0, ᐃΔ[921], 3);
    this.ⵠⲆΔ[20].id = 20;
    this.ⲆᐃΔ[95] = zf(60, 60, 0, ᐃΔ[922], 3);
    this.ⲆᐃΔ[95].id = 95;
    this.Ⲇⵠⵠ[21] = zf(68, 68, 0, ᐃΔ[927], 3);
    this.Ⲇⵠⵠ[21].id = 21;
    this.ⵠⲆΔ[21] = zf(60, 60, 0, ᐃΔ[925], 3);
    this.ⵠⲆΔ[21].id = 21;
    this.ⲆᐃΔ[96] = zf(60, 60, 0, ᐃΔ[926], 3);
    this.ⲆᐃΔ[96].id = 96;
    this.Ⲇⵠⵠ[22] = zf(68, 68, 0, ᐃΔ[931], 3);
    this.Ⲇⵠⵠ[22].id = 22;
    this.ⵠⲆΔ[22] = zf(60, 60, 0, ᐃΔ[929], 3);
    this.ⵠⲆΔ[22].id = 22;
    this.ⲆᐃΔ[97] = zf(60, 60, 0, ᐃΔ[930], 3);
    this.ⲆᐃΔ[97].id = 97;
    this.Ⲇⵠⵠ[60] = zf(68, 68, 0, ᐃΔ[736], 3);
    this.Ⲇⵠⵠ[60].id = 60;
    this.ⵠⲆΔ[60] = zf(60, 60, 0, ᐃΔ[735], 3);
    this.ⵠⲆΔ[60].id = 60;
    this.ⲆᐃΔ[127] = zf(60, 60, 0, ᐃΔ[737], 3);
    this.ⲆᐃΔ[127].id = 127;
    this.Ⲇⵠⵠ[90] = zf(68, 68, 0, ᐃΔ[739], 3);
    this.Ⲇⵠⵠ[90].id = 90;
    this.ⵠⲆΔ[90] = zf(60, 60, 0, ᐃΔ[738], 3);
    this.ⵠⲆΔ[90].id = 90;
    this.ⲆᐃΔ[173] = zf(60, 60, 0, ᐃΔ[740], 3);
    this.ⲆᐃΔ[173].id = 173;
    this.Ⲇⵠⵠ[92] = zf(68, 68, 0, ᐃΔ[745], 3);
    this.Ⲇⵠⵠ[92].id = 92;
    this.ⵠⲆΔ[92] = zf(60, 60, 0, ᐃΔ[744], 3);
    this.ⵠⲆΔ[92].id = 92;
    this.ⲆᐃΔ[174] = zf(60, 60, 0, ᐃΔ[746], 3);
    this.ⲆᐃΔ[174].id = 174;
    this.Ⲇⵠⵠ[93] = zf(68, 68, 0, ᐃΔ[748], 3);
    this.Ⲇⵠⵠ[93].id = 93;
    this.ⵠⲆΔ[93] = zf(60, 60, 0, ᐃΔ[747], 3);
    this.ⵠⲆΔ[93].id = 93;
    this.ⲆᐃΔ[175] = zf(60, 60, 0, ᐃΔ[749], 3);
    this.ⲆᐃΔ[175].id = 175;
    this.Ⲇⵠⵠ[91] = zf(68, 68, 0, ᐃΔ[742], 3);
    this.Ⲇⵠⵠ[91].id = 91;
    this.ⵠⲆΔ[91] = zf(60, 60, 0, ᐃΔ[741], 3);
    this.ⵠⲆΔ[91].id = 91;
    this.ⲆᐃΔ[176] = zf(60, 60, 0, ᐃΔ[743], 3);
    this.ⲆᐃΔ[176].id = 176;
    this.Ⲇⵠⵠ[100] = zf(68, 68, 0, ᐃΔ[1165], 3);
    this.Ⲇⵠⵠ[100].id = 100;
    this.ⵠⲆΔ[100] = zf(60, 60, 0, ᐃΔ[1164], 3);
    this.ⵠⲆΔ[100].id = 100;
    this.ⲆᐃΔ[vs.ᐃⲆⵠⵠᐃ] = zf(60, 60, 0, ᐃΔ[ns.ⵠⵠⲆΔᐃⲆⲆⲆΔ], 3);
    this.ⲆᐃΔ[vs.ᐃⲆⵠⵠᐃ].id = vs.ᐃⲆⵠⵠᐃ;
    this.Ⲇⵠⵠ[34] = zf(68, 68, 0, ᐃΔ[945], 3);
    this.Ⲇⵠⵠ[34].id = 34;
    this.ⵠⲆΔ[34] = zf(60, 60, 0, ᐃΔ[943], 3);
    this.ⵠⲆΔ[34].id = 34;
    this.ⲆᐃΔ[30] = zf(60, 60, 0, ᐃΔ[944], 3);
    this.ⲆᐃΔ[30].id = 30;
    this.Ⲇⵠⵠ[44] = zf(68, 68, 0, ᐃΔ[948], 3);
    this.Ⲇⵠⵠ[44].id = 44;
    this.ⵠⲆΔ[44] = zf(60, 60, 0, ᐃΔ[946], 3);
    this.ⵠⲆΔ[44].id = 44;
    this.ⲆᐃΔ[92] = zf(60, 60, 0, ᐃΔ[947], 3);
    this.ⲆᐃΔ[92].id = 92;
    this.Ⲇⵠⵠ[17] = zf(68, 68, 0, ᐃΔ[878], 3);
    this.Ⲇⵠⵠ[17].id = 17;
    this.ⵠⲆΔ[17] = zf(60, 60, 0, ᐃΔ[877], 3);
    this.ⵠⲆΔ[17].id = 17;
    this.ⲆᐃΔ[32] = zf(60, 60, 0, ᐃΔ[879], 3);
    this.ⲆᐃΔ[32].id = 32;
    this.Ⲇⵠⵠ[63] = zf(68, 68, 0, ᐃΔ[568], 3);
    this.Ⲇⵠⵠ[63].id = 63;
    this.ⵠⲆΔ[63] = zf(60, 60, 0, ᐃΔ[566], 3);
    this.ⵠⲆΔ[63].id = 63;
    this.ⲆᐃΔ[130] = zf(60, 60, 0, ᐃΔ[567], 3);
    this.ⲆᐃΔ[130].id = 130;
    this.Ⲇⵠⵠ[187] = zf(68, 68, 0, ᐃΔ[591], 3);
    this.Ⲇⵠⵠ[187].id = 187;
    this.ⵠⲆΔ[187] = zf(60, 60, 0, ᐃΔ[253], 3);
    this.ⵠⲆΔ[187].id = 187;
    this.Ⲇⵠⵠ[qs.ΔⵠⲆⲆᐃᐃΔ] = zf(68, 68, 0, ᐃΔ[ns.ᐃᐃΔⲆΔⲆΔⲆⲆ], 3);
    this.Ⲇⵠⵠ[qs.ΔⵠⲆⲆᐃᐃΔ].id = qs.ΔⵠⲆⲆᐃᐃΔ;
    this.ⵠⲆΔ[qs.ΔⵠⲆⲆᐃᐃΔ] = zf(60, 60, 0, ᐃΔ[ns.ⵠΔⵠΔΔⲆᐃΔΔ], 3);
    this.ⵠⲆΔ[qs.ΔⵠⲆⲆᐃᐃΔ].id = qs.ΔⵠⲆⲆᐃᐃΔ;
    this.Ⲇⵠⵠ[qs.ᐃᐃΔⲆⵠⵠⲆ] = zf(68, 68, 0, ᐃΔ[ns.ⲆΔΔⲆΔΔΔᐃⲆ], 3);
    this.Ⲇⵠⵠ[qs.ᐃᐃΔⲆⵠⵠⲆ].id = qs.ᐃᐃΔⲆⵠⵠⲆ;
    this.ⵠⲆΔ[qs.ᐃᐃΔⲆⵠⵠⲆ] = zf(60, 60, 0, ᐃΔ[ns.ᐃⲆⲆΔⲆΔⵠⵠᐃ], 3);
    this.ⵠⲆΔ[qs.ᐃᐃΔⲆⵠⵠⲆ].id = qs.ᐃᐃΔⲆⵠⵠⲆ;
    this.Ⲇⵠⵠ[qs.ᐃⵠⲆᐃⲆⲆⲆ] = zf(68, 68, 0, ᐃΔ[ns.ᐃⲆⵠⲆⲆΔⵠᐃΔ], 3);
    this.Ⲇⵠⵠ[qs.ᐃⵠⲆᐃⲆⲆⲆ].id = qs.ᐃⵠⲆᐃⲆⲆⲆ;
    this.ⵠⲆΔ[qs.ᐃⵠⲆᐃⲆⲆⲆ] = zf(60, 60, 0, ᐃΔ[ns.ᐃⵠⲆⵠⲆᐃⵠⵠᐃ], 3);
    this.ⵠⲆΔ[qs.ᐃⵠⲆᐃⲆⲆⲆ].id = qs.ᐃⵠⲆᐃⲆⲆⲆ;
    this.Ⲇⵠⵠ[qs.ΔΔᐃⲆⲆᐃΔ] = zf(68, 68, 0, ᐃΔ[ns.ⵠⲆⲆⲆⲆᐃᐃΔⲆ], 3);
    this.Ⲇⵠⵠ[qs.ΔΔᐃⲆⲆᐃΔ].id = qs.ΔΔᐃⲆⲆᐃΔ;
    this.ⵠⲆΔ[qs.ΔΔᐃⲆⲆᐃΔ] = zf(60, 60, 0, ᐃΔ[ns.ΔΔΔᐃⲆⵠᐃⵠⲆ], 3);
    this.ⵠⲆΔ[qs.ΔΔᐃⲆⲆᐃΔ].id = qs.ΔΔᐃⲆⲆᐃΔ;
    this.Ⲇⵠⵠ[qs.ΔᐃⵠΔⲆᐃΔ] = zf(68, 68, 0, ᐃΔ[ns.ΔⵠΔᐃᐃᐃⵠⲆΔ], 3);
    this.Ⲇⵠⵠ[qs.ΔᐃⵠΔⲆᐃΔ].id = qs.ΔᐃⵠΔⲆᐃΔ;
    this.ⵠⲆΔ[qs.ΔᐃⵠΔⲆᐃΔ] = zf(60, 60, 0, ᐃΔ[ns.ᐃΔⲆⲆᐃⲆⲆᐃᐃ], 3);
    this.ⵠⲆΔ[qs.ΔᐃⵠΔⲆᐃΔ].id = qs.ΔᐃⵠΔⲆᐃΔ;
    this.ⲆΔⵠΔⲆⲆⵠ = function () {
      for (var a = Rx.ⲆΔⲆΔ.ⵠⵠⲆⵠᐃ, b = 10, c = 10, d = 0; a.length > d; d++) {
        if (d > 0 && !(d % 4)) {
          b += a[0].info.width + 10;
          c = 10;
        }
        a[d].info.translate.x = b;
        a[d].info.translate.y = c;
        c += 10 + a[d].info.height;
      }
    };
    this.ⵠΔⲆᐃⲆΔΔ = function () {
      var a = Math.floor(Math.floor((3 + Rx.ⲆΔⲆΔ.ⵠⵠⲆⵠᐃ.length) / 4) * (10 + this.Ⲇⵠⵠ[0].info.ⵠⵠ[0].width) + 35);
      for (var b = 0; b < this.Ⲇⵠⵠ.length; b++) {
        if (this.Ⲇⵠⵠ[b]) {
          this.Ⲇⵠⵠ[b].info.translate.x = a;
          this.Ⲇⵠⵠ[b].info.translate.y = 22;
        }
      }
      this.ⲆᐃⵠⲆΔⵠⵠ.info.translate.x = a + 17;
      this.ⲆᐃⵠⲆΔⵠⵠ.info.translate.y = 22 + ᐃΔ[339].height;
      this.ⲆⵠⲆΔΔᐃᐃ.info.translate.x = a + 17;
      this.ⲆⵠⲆΔΔᐃᐃ.info.translate.y = 30;
      this.ΔᐃⲆⲆᐃΔⵠ.info.translate.x = a + 17;
      this.ΔᐃⲆⲆᐃΔⵠ.info.translate.y = 22 + ᐃΔ[339].height;
    };
    this.ⵠⲆΔΔⲆᐃⲆⲆΔ = function () {
      var a = Math.floor((yo - ᐃΔ[556][0].width) / 2);
      for (var b = 0; this.ⲆⵠΔΔΔ.length > b; b++) {
        this.ⲆⵠΔΔΔ[b].button.info.translate.x = a;
        this.ⲆⵠΔΔΔ[b].button.info.translate.y = -13;
      }
    };
    this.ΔⲆΔᐃΔᐃᐃ = function () {
      var a = 12 + Math.floor(Math.floor((3 + Rx.ⲆΔⲆΔ.ⵠⵠⲆⵠᐃ.length) / 4) * (10 + this.ΔⵠᐃᐃⵠᐃⲆ.info.ⵠⵠ[0].width) + 35);
      this.ΔⵠᐃᐃⵠᐃⲆ.info.translate.x = a;
      this.ΔⵠᐃᐃⵠᐃⲆ.info.translate.y = 33;
      this.ⵠΔᐃⲆⵠᐃΔ.info.translate.x = this.ΔⵠᐃᐃⵠᐃⲆ.info.translate.x;
      this.ⵠΔᐃⲆⵠᐃΔ.info.translate.y = 137;
      this.ⵠᐃⲆⲆⲆⵠᐃ.info.translate.x = this.ΔⵠᐃᐃⵠᐃⲆ.info.translate.x;
      this.ⵠᐃⲆⲆⲆⵠᐃ.info.translate.y = 240;
    };
    this.ᐃⲆⲆⵠΔᐃⵠ = function () {
      var a = 12 + Math.floor(Math.floor((3 + Rx.ⲆΔⲆΔ.ⵠⵠⲆⵠᐃ.length) / 4) * (10 + this.ⲆⵠΔⵠΔⲆΔ.info.ⵠⵠ[0].width) + 35);
      this.ⲆⵠΔⵠΔⲆΔ.info.translate.x = a;
      this.ⲆⵠΔⵠΔⲆΔ.info.translate.y = 36;
      a += 83;
      this.ⲆⲆⵠⲆᐃΔⵠ.info.translate.x = a;
      this.ⲆⲆⵠⲆᐃΔⵠ.info.translate.y = 36;
      this.ΔⲆᐃⲆΔΔΔ.info.translate.x = a;
      this.ΔⲆᐃⲆΔΔΔ.info.translate.y = 36;
      this.ⲆⵠΔⵠⵠᐃⲆ.info.translate.x = a;
      this.ⲆⵠΔⵠⵠᐃⲆ.info.translate.y = 36;
      this.ᐃᐃᐃⲆᐃΔΔ.info.translate.x = a;
      this.ᐃᐃᐃⲆᐃΔΔ.info.translate.y = 36;
      this.ⵠᐃΔⲆⵠᐃⲆ.info.translate.x = a;
      this.ⵠᐃΔⲆⵠᐃⲆ.info.translate.y = 36;
    };
    this.ᐃᐃᐃⵠᐃⲆΔ = function () {
      var a = 12 + Math.floor((10 + this.ᐃᐃΔᐃⵠⵠΔ.info.ⵠⵠ[0].width) * Math.floor((3 + Rx.ⲆΔⲆΔ.ⵠⵠⲆⵠᐃ.length) / 4) + 35);
      this.ᐃᐃΔᐃⵠⵠΔ.info.translate.x = a;
      this.ᐃᐃΔᐃⵠⵠΔ.info.translate.y = 36;
      a += 83;
      this.ᐃⲆᐃᐃΔᐃⲆ.info.translate.x = a;
      this.ᐃⲆᐃᐃΔᐃⲆ.info.translate.y = 36;
    };
    this.ⵠⵠⲆⵠΔⵠⲆ = function () {
      var a = Math.floor((10 + this.ΔⵠⲆΔᐃⲆⲆ.info.ⵠⵠ[0].width) * Math.floor((3 + Rx.ⲆΔⲆΔ.ⵠⵠⲆⵠᐃ.length) / 4) + 35);
      this.ΔⵠⲆΔᐃⲆⲆ.info.translate.x = a;
      this.ΔⵠⲆΔᐃⲆⲆ.info.translate.y = 22;
    };
    this.ᐃΔΔᐃΔΔⲆ = function () {
      var a = Rx.ⵠⵠⲆᐃ.ⵠΔⲆᐃⲆ;
      if (a.length > 0) {
        var b = Math.floor((yo - Rx.ⵠⵠⲆᐃ.max * (a[0].info.width + 5)) / 2);
      }
      for (var c = 0; a.length > c; c++) {
        a[c].info.translate.x = b + c * (a[c].info.width + 5);
        a[c].info.translate.y = hq - a[c].info.width - 10;
        this.ΔⵠⲆⵠⲆ[a[c].id].info.translate.x = a[c].info.translate.x + 13;
        this.ΔⵠⲆⵠⲆ[a[c].id].info.translate.y = a[c].info.translate.y - this.ΔⵠⲆⵠⲆ[a[c].id].info.ⵠⵠ[0].height - 6;
      }
    };
    var h;
    var p = 0;
    function q() {
      j.ⵠⵠᐃ();
      if (++p == 30) {
        j.ⵠΔᐃⲆᐃⵠⵠ();
        j.ⵠⵠᐃ();
        return;
      }
      oc.setTimeout(q, 33);
    }
    this.ⵠⵠΔⲆᐃ = function (a) {
      if (Rx.ΔⲆⵠⲆⵠ.open) {
        Rx.ΔⲆⵠⲆⵠ.ⵠⵠΔⲆᐃ();
      }
      if (Rx.ⲆⵠⲆΔⵠ.open) {
        Rx.ⲆⵠⲆΔⵠ.ⵠⵠΔⲆᐃ();
      }
      document.getElementById("team_box").style.display = "none";
      j.ⵠΔⵠⵠⲆ.style.display = "none";
      j.ⵠΔⵠⵠⲆ.open = Kk;
      j.sign.style.display = "none";
      j.sign.open = co;
      document.getElementById("shop_starterkit").style.display = "none";
      document.getElementById("home_craft").style.display = "none";
      document.getElementById("recipe_craft").style.display = "none";
      j.ⵠᐃⵠᐃ.open = tg;
      document.getElementById("option_in_game").style.display = "none";
      j.options.open = co;
      document.getElementById("sure_delete").style.display = "none";
      j.ᐃⲆΔᐃ.open = false;
      document.getElementById("cancel_sure_delete").style.display = "none";
      j.ᐃᐃⵠΔⲆ.open = zl;
      document.getElementById("chronoquest").style.display = "none";
      j.Ⲇⵠⵠⵠ.open = false;
      h = a;
      j.ᐃᐃⵠⵠⲆᐃⲆ();
      j.Δᐃ.style.cursor = j.ⲆᐃᐃᐃⲆⲆᐃ;
      Ux.ⵠⵠΔⲆᐃ();
      u = -1;
      t();
      $x();
    };
    var u = -1;
    function t() {
      j.ⵠⵠᐃ();
      if (++u == 30) {
        j.stop();
        h();
        return;
      }
      oc.setTimeout(t, 33);
    }
    this.ⲆΔᐃⲆⲆ = false;
    this.stop = function () {
      this.ⲆΔᐃⲆⲆ = Gl;
    };
    this.ⵠⵠΔⵠⵠ = function () {
      Mx.ᐃᐃⵠⵠⵠⵠⲆᐃΔ();
      j.ⲆΔᐃⲆⲆ = true;
      u = -1;
      p = 0;
      q();
    };
    this.ⵠⵠᐃ = function () {
      this.ⲆᐃᐃⲆ.translate.x = yo - this.ⲆᐃᐃⲆ.ⵠⵠ.width - 10;
      this.ⲆᐃᐃⲆ.translate.y = 5;
      Qx.ᐃᐃᐃⵠⲆ.translate.x = this.ⲆᐃᐃⲆ.translate.x - ᐃΔ[725][0].width - 85;
      Qx.ᐃᐃᐃⵠⲆ.translate.y = 10;
      this.ⵠᐃⵠᐃ.button.info.translate.x = this.ⲆᐃᐃⲆ.translate.x - ᐃΔ[708][0].width - 10;
      this.ⵠᐃⵠᐃ.button.info.translate.y = 10;
      this.Ⲇⵠⵠⵠ.button.info.translate.x = this.ⲆᐃᐃⲆ.translate.x - ᐃΔ[755][0].width - 20;
      this.Ⲇⵠⵠⵠ.button.info.translate.y = this.ⵠᐃⵠᐃ.button.info.translate.y + ᐃΔ[708][0].height + 5;
      this.options.button.info.translate.x = this.ⲆᐃᐃⲆ.translate.x - ᐃΔ[727][0].width - 20;
      this.options.button.info.translate.y = this.Ⲇⵠⵠⵠ.button.info.translate.y + ᐃΔ[727][0].height + 18;
      this.ΔΔⲆΔ.ΔⲆⵠΔᐃⲆΔ.info.translate.x = this.ⲆᐃᐃⲆ.translate.x - ᐃΔ[727][0].width - 20;
      this.ΔΔⲆΔ.ΔⲆⵠΔᐃⲆΔ.info.translate.y = this.options.button.info.translate.y + ᐃΔ[783][0].height;
      this.ΔΔⲆΔ.ⲆΔⵠⲆⵠΔΔ.info.translate.x = this.ⲆᐃᐃⲆ.translate.x - ᐃΔ[727][0].width - 20;
      this.ΔΔⲆΔ.ⲆΔⵠⲆⵠΔΔ.info.translate.y = this.options.button.info.translate.y + ᐃΔ[783][0].height;
      this.ⵠΔⵠⵠⲆ.button.info.translate.x = this.ⲆᐃᐃⲆ.translate.x - ᐃΔ[795][0].width - 20;
      this.ⵠΔⵠⵠⲆ.button.info.translate.y = this.ΔΔⲆΔ.ΔⲆⵠΔᐃⲆΔ.info.translate.y + ᐃΔ[795][0].height;
      Rx.ⵠⵠⲆⵠΔ.translate.x = this.ⲆᐃᐃⲆ.translate.x - 63 - 85;
      Rx.ⵠⵠⲆⵠΔ.translate.y = 100;
      Rx.ᐃΔⲆⲆⵠ.translate.x = this.ⲆᐃᐃⲆ.translate.x - ᐃΔ[517].width - 85;
      Rx.ᐃΔⲆⲆⵠ.translate.y = Rx.ⵠⵠⲆⵠΔ.translate.y + 10 + ᐃΔ[546].height;
      this.ⲆᐃⲆΔᐃ.translate.y = hq - 3 - 193;
      this.ⲆᐃⲆΔᐃ.translate.x = yo - 3 - 193;
      this.ᐃᐃΔᐃ.translate.x = 5;
      this.ᐃᐃΔᐃ.translate.y = hq - this.ᐃᐃΔᐃ.ⵠⵠ.height - 5;
      this.ⵠΔⵠΔⵠ.button.info.translate.x = iq - 91 / 2;
      this.ⵠΔⵠΔⵠ.button.info.translate.y = 50;
      this.ⲆΔⵠΔⲆⲆⵠ();
      this.ᐃΔΔᐃΔΔⲆ();
      this.ⵠΔⲆᐃⲆΔΔ();
      this.ⵠⵠⲆⵠΔⵠⲆ();
      this.ᐃᐃᐃⵠᐃⲆΔ();
      this.ᐃⲆⲆⵠΔᐃⵠ();
      this.ΔⲆΔᐃΔᐃᐃ();
      this.ⵠⲆΔΔⲆᐃⲆⲆΔ();
      this.sign.ⵠⵠᐃⵠⲆⲆⲆ();
      Op();
      Rx.ΔⲆⵠⲆⵠ.ⵠⵠᐃ();
      Rx.ⲆⵠⲆΔⵠ.ⵠⵠᐃ();
      this.ⵠᐃΔⲆΔⵠᐃⵠΔ.ⵠⵠᐃ();
      this.ⵠᐃⵠᐃ.ⲆΔΔΔⲆΔⵠ.ⵠⵠᐃ();
      this.ⵠᐃⵠᐃ.list.ⵠⵠᐃ();
      this.ᐃⲆΔᐃ.ⵠⵠᐃ();
      this.ᐃᐃⵠΔⲆ.ⵠⵠᐃ();
      this.Ⲇⵠⵠⵠ.ⵠⵠᐃ();
      this.ⵠΔⵠΔⵠ.ⵠⵠᐃ();
      this.options.ⵠⵠᐃ();
      this.ⵠΔⵠⵠⲆ.ⵠⵠᐃ();
      this.sign.ⵠⵠᐃ();
      var a = 0;
      if (p != 30) {
        a = 1500 / (p + 1) - 50;
      }
      if (u != -1) {
        a = -(1500 / (30 - u + 1) - 48);
      }
      this.ⵠΔⵠΔⵠ.button.info.translate.y -= a > 0 ? a : -a;
      this.ⲆᐃᐃⲆ.translate.y -= a > 0 ? a : -a;
      Rx.ⵠⵠⲆⵠΔ.translate.y -= a > 0 ? a : -a;
      Rx.ᐃΔⲆⲆⵠ.translate.y -= a > 0 ? a : -a;
      this.ⵠᐃⵠᐃ.button.info.translate.y -= a > 0 ? a : -a;
      this.Ⲇⵠⵠⵠ.button.info.translate.y -= a > 0 ? a : -a;
      this.options.button.info.translate.y -= a > 0 ? a : -a;
      this.ⵠΔⵠⵠⲆ.button.info.translate.y -= a > 0 ? a : -a;
      this.ΔΔⲆΔ.ΔⲆⵠΔᐃⲆΔ.info.translate.y -= a > 0 ? a : -a;
      this.ΔΔⲆΔ.ⲆΔⵠⲆⵠΔΔ.info.translate.y -= a > 0 ? a : -a;
      Qx.ᐃᐃᐃⵠⲆ.translate.y -= a > 0 ? a : -a;
      this.ᐃᐃΔᐃ.translate.y -= a < 0 ? a : -a;
      this.ⲆᐃⲆΔᐃ.translate.y -= a < 0 ? a : -a;
    };
    this.ᐃⲆᐃⲆΔⲆⲆΔᐃ = function () {
      if (!Rx.ᐃⵠⲆᐃⲆ.enabled && this.ᐃᐃⲆᐃᐃΔⲆ && !Rx.ᐃΔⵠᐃⵠ) {
        kv();
      }
      hv();
      (function () {
        var a = Qx.Δⵠⵠ[0];
        if (Qx.mode === 0 || Qx.mode === 7 || Qx.mode === 2 || Qx.mode === 4 || Qx.mode === 5 || Qx.mode === 6 || Qx.mode === 3) {
          for (var b = 0; b < a.length; b++) {
            a[b].ⲆᐃᐃΔⲆΔⵠ();
          }
        } else if (Qx.mode === 1) {
          for (b = 0; a.length > b; b++) {
            if (Rx.ᐃⲆⵠΔΔΔΔ || Rx.ᐃΔⲆⲆⵠ.enabled || a[b].ᐃᐃⲆⲆ.ᐃΔΔΔΔ !== "spectator") {
              a[b].ⲆᐃᐃΔⲆΔⵠ();
            }
          }
        }
      })();
      if (this.ᐃᐃⲆᐃᐃΔⲆ) {
        qp();
        if (this.ᐃⲆⵠᐃΔΔⲆ === 1) {
          this.ⵠᐃⵠᐃ.button.ⲆⵠⵠΔ(i);
        }
        if (Qx.mode !== 2 && Qx.mode !== 4 && Qx.mode !== 5 && this.ᐃΔⵠᐃⲆᐃⵠ === 1) {
          this.Ⲇⵠⵠⵠ.button.ⲆⵠⵠΔ(i);
        }
        this.options.button.ⲆⵠⵠΔ(i);
        if (this.ΔΔΔΔⵠⵠΔ === 1) {
          this.ⵠΔⵠⵠⲆ.button.ⲆⵠⵠΔ(i);
        }
        if (Ux.ⵠⵠΔⵠⵠ) {
          this.ΔΔⲆΔ.ΔⲆⵠΔᐃⲆΔ.ⲆⵠⵠΔ(i);
        } else {
          this.ΔΔⲆΔ.ⲆΔⵠⲆⵠΔΔ.ⲆⵠⵠΔ(i);
        }
        Tu();
        jv();
        this.ᐃᐃΔᐃ.ⲆⵠⵠΔ();
        cv();
        Su();
        gv();
        $u();
        dv();
        Xp();
        Gp();
        (function () {
          if (!Rx.ΔⲆΔⵠ.open && !Rx.ΔⵠⵠΔⲆ.open && !Rx.ᐃⲆΔⵠ.open && !Rx.ⲆᐃΔᐃ.open && !Rx.ᐃⵠΔᐃ.open) {
            Rx.ⵠⵠⵠⵠᐃ.open = false;
            var a = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ];
            var b = 100;
            if (a) {
              for (var c = 0; c < Qx.Δⵠⵠ[35].length; c++) {
                var d = Qx.Δⵠⵠ[35][c];
                var e = ⲆⵠΔⵠ.ᐃⵠⲆⲆ(d, a);
                if (e < b) {
                  b = e;
                  Rx.ⵠⵠⵠⵠᐃ.open = true;
                  Rx.ⵠⵠⵠⵠᐃ.ᐃΔᐃΔ = d.ᐃΔᐃΔ;
                  Rx.ⵠⵠⵠⵠᐃ.Δⵠᐃᐃⵠ = d.id;
                }
              }
            }
          }
        })();
        Kp();
        Rp();
        Wp();
        Hp();
        Op();
        jp();
      }
      if (Rx.ᐃⵠⲆᐃⲆ.enabled) {
        Up();
      }
      Vp();
      if (this.ᐃᐃⲆᐃᐃΔⲆ && this.ⵠᐃⲆⲆᐃⲆⲆ === 1) {
        Xu();
      }
      Rx.ⲆᐃΔᐃⲆᐃⲆ.ⲆⵠⵠΔ();
      Rx.alert.ⲆⵠⵠΔ("#FFF", "#000");
      if (this.ᐃᐃⲆᐃᐃΔⲆ) {
        Rx.ᐃⵠⲆᐃⲆ.ⲆⵠⵠΔ();
        Rx.ⵠΔⵠΔⵠ.ⲆⵠⵠΔ();
        Rx.ⵠⵠⲆᐃ.ᐃⲆⲆΔᐃⲆᐃ.ⲆⵠⵠΔ(Wx.ΔⵠⲆⲆ.x, Wx.ΔⵠⲆⲆ.y);
      }
      Yp();
    };
    this.ⲆᐃΔΔΔⲆᐃᐃⵠ = function () {
      Rx.ⵠⵠΔ.ⵠⵠᐃ();
      Rx.ᐃᐃΔᐃ.ⵠⵠᐃ();
      if (!Rx.reconnect.enabled && Rx.ΔⲆⵠⲆΔ) {
        Rx.control.ⵠⵠᐃ();
        Rx.ⵠⵠⲆⵠΔ.ⵠⵠᐃ();
      }
      Qx.ⵠⵠᐃ();
      this.Ⲇⵠⵠⵠ.ΔⲆⵠⲆⲆΔⲆΔᐃ();
    };
    this.ΔᐃⵠⵠⲆⵠΔⵠⵠ = function () {
      Hw();
    };
    this.ᐃᐃⲆᐃᐃⵠᐃᐃⲆ = function () {
      Mx.ⲆⵠΔᐃᐃⵠⵠⲆⵠ();
      Mx.ΔⵠⵠΔΔᐃⲆⵠⲆ();
      Mx.ⲆΔⵠᐃᐃⵠⵠᐃΔ();
      Mx.ⲆⵠᐃᐃΔⲆⵠᐃⲆ();
    };
    this.ⲆⵠⵠΔ = function () {
      if (!Rx.reconnect.enabled && Rx.ΔⲆⵠⲆΔ) {
        this.ᐃᐃⲆᐃᐃⵠᐃᐃⲆ();
      }
      Ux.ⲆΔⵠᐃⵠᐃΔΔⵠ();
      this.ⲆᐃΔΔΔⲆᐃᐃⵠ();
      if (Px.ⲆⵠⲆᐃⵠᐃⵠ !== 1) {
        this.ΔᐃⵠⵠⲆⵠΔⵠⵠ();
        this.ᐃⲆᐃⲆΔⲆⲆΔᐃ();
      } else {
        var a = ᐃᐃ.ᐃᐃΔᐃᐃᐃᐃ;
        Np(i, a, iq - a.width / 4, jq - a.height / 4, a.width / 2, a.height / 2);
      }
    };
    this.ΔΔⲆⲆᐃΔᐃ = function (a) {
      if (Rx.ΔⲆⵠⲆⵠ.open && a.keyCode === 27) {
        Rx.ΔⲆⵠⲆⵠ.ⵠⵠΔⲆᐃ();
      } else if (Rx.ⲆⵠⲆΔⵠ.open && a.keyCode === 27) {
        Rx.ⲆⵠⲆΔⵠ.ⵠⵠΔⲆᐃ();
      } else if (Rx.ΔⲆⵠⲆⵠ.open || Rx.ⲆⵠⲆΔⵠ.open || a.keyCode != 79 || u != -1) {
        if (a.keyCode == 13 && u == -1) {
          if (Rx.ⲆⵠⲆΔⵠ.open) {
            Rx.ⲆⵠⲆΔⵠ.ⵠⲆⲆⵠⲆΔⵠ();
          } else {
            Rx.ΔⲆⵠⲆⵠ.ⵠⵠΔⵠⵠ();
          }
        } else if (!Rx.ΔⲆⵠⲆⵠ.open && !Rx.ⲆⵠⲆΔⵠ.open) {
          if (a.keyCode === 82) {
            Rx.ⵠⵠⲆⵠΔ.ᐃⵠᐃⲆᐃⵠⵠ();
          } else if (a.keyCode !== 80 || Qx.mode !== 1 || Rx.ᐃⲆⵠΔΔΔΔ) {
            if (a.keyCode >= 49 && a.keyCode <= 57) {
              if (Rx.ⲆΔⲆΔ.id < 0) {
                var b = a.keyCode - 49;
                var c = Rx.ⵠⵠⲆᐃ.ⵠΔⲆᐃⲆ[b];
                if (c) {
                  Mx.ᐃΔᐃᐃΔ(c.id, b);
                }
              }
            } else if (a.keyCode == 89) {
              Rx.ⲆᐃⵠΔⲆΔⲆ = !Rx.ⲆᐃⵠΔⲆΔⲆ;
            } else if (a.keyCode == 71) {
              Rx.ⲆΔⲆΔ.ⵠⵠⲆᐃᐃⲆΔⵠⵠ();
            }
          } else {
            Rx.ᐃΔⲆⲆⵠ.ᐃⵠᐃⲆᐃⵠⵠ();
          }
        }
      } else {
        Rx.ⲆⵠⲆΔⵠ.ⲆⵠⵠΔΔⵠⲆⲆⲆ();
      }
      Vx.up(a);
    };
    this.ⲆΔΔⵠⲆⲆᐃ = function (a) {
      Vx.down(a);
      if (a.keyCode == 8 && !Rx.ΔⲆⵠⲆⵠ.open && !Rx.ⲆⵠⲆΔⵠ.open) {
        a.preventDefault();
      }
    };
    this.ⵠᐃⲆⲆⵠᐃᐃ = function (b) {
      Wx.ΔⵠⲆⲆ = cf(j.Δᐃ, b);
      var c = false;
      if (Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0) {
        j.ⲆᐃⲆΔᐃ.focus(Wx.ΔⵠⲆⲆ);
      }
      var d = Rx.ΔⲆΔⵠ;
      if (Rx.ⲆΔⲆΔ.id < 0 && d.id >= 0 && (!Rx.ΔⲆΔⵠ.lock || Rx.id === Rx.ΔⲆΔⵠ.ᐃΔᐃΔ)) {
        c |= j.Ⲇⵠⵠ[Rx.ΔⲆΔⵠ.id].ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, uf);
      }
      var e = Rx.ᐃⲆΔⵠ;
      if (e.open && e.ΔⵠΔᐃΔ > 0) {
        c |= j.ᐃⲆᐃᐃΔᐃⲆ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, uf);
      }
      var f = Rx.ᐃⵠΔᐃ;
      if (f.open && f.ⲆΔᐃⲆᐃᐃΔ > 0) {
        c |= j.ⲆⲆⵠⲆᐃΔⵠ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, uf);
        c |= j.ΔⲆᐃⲆΔΔΔ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, uf);
        c |= j.ⲆⵠΔⵠⵠᐃⲆ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, uf);
        c |= j.ᐃᐃᐃⲆᐃΔΔ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, uf);
        c |= j.ⵠᐃΔⲆⵠᐃⲆ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, uf);
      }
      var a = Rx.ⲆᐃΔᐃ;
      if (a.open && a.ΔΔⵠΔⲆⲆⵠ > 0) {
        c |= j.ⵠᐃⲆⲆⲆⵠᐃ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, uf);
      }
      if (Rx.sign.open) {
        c |= j.sign.button.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, uf);
      }
      if (!Rx.ΔⲆΔⵠ.lock) {
        if (Rx.ΔⲆΔⵠ.ᐃΔⵠΔⲆⲆᐃ) {
          c |= j.ΔᐃⲆⲆᐃΔⵠ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, uf);
        }
      }
      if (Rx.ΔⲆΔⵠ.ᐃᐃⲆⵠᐃⵠΔ) {
        c |= j.ⲆᐃⵠⲆΔⵠⵠ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, uf);
      }
      if (Rx.ⲆΔⲆΔ.id < 0 && !j.ⵠᐃⵠᐃ.open && !j.ᐃⲆΔᐃ.open && !j.ᐃᐃⵠΔⲆ.open && !j.Ⲇⵠⵠⵠ.open && !j.options.open && !j.ⵠΔⵠⵠⲆ.open) {
        for (var k = Rx.ⵠⵠⲆᐃ.ⵠΔⲆᐃⲆ, m = 0; m < k.length; m++) {
          var n = k[m].ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, uf);
          c |= n;
          if (n) {
            Rx.ⵠⵠⲆᐃ.ᐃⲆⲆΔᐃⲆᐃ.start(m, Wx.ΔⵠⲆⲆ);
          }
          if (d.open && (d.id < 0 || d.id == k[m].id) || Rx.ΔⵠⵠΔⲆ.open && k[m].id === 109 || Rx.ⵠⵠⵠⵠᐃ.open && k[m].id === 180 || Rx.ⲆᐃΔᐃ.open && (k[m].id === 109 || k[m].id === 131) || Rx.ᐃⲆΔⵠ.open && k[m].id === 134 || Rx.ᐃⵠΔᐃ.open && k[m].id === 109) {
            c |= j.ΔⵠⲆⵠⲆ[k[m].id].ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, uf);
          }
        }
      }
      if (Rx.ⲆⲆⵠⵠᐃ.open) {
        c |= j.ⲆⲆⵠⵠᐃ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, uf);
      }
      if (j.ᐃⲆⵠⲆⲆ != -1) {
        if (c |= j.ⲆⵠΔΔΔ[j.ᐃⲆⵠⲆⲆ].button.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, uf)) {
          var o = true;
        }
      } else {
        o = Kk;
      }
      if (Rx.ⲆΔⲆΔ.id < 0 && Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0 && !o && !j.ⵠᐃⵠᐃ.open && !j.ᐃⲆΔᐃ.open && !j.options.open && !j.ᐃᐃⵠΔⲆ.open && !j.ⵠΔⵠⵠⲆ.open && !Rx.ᐃΔⵠᐃⵠ) {
        k = Rx.ⲆΔⲆΔ.ⵠⵠⲆⵠᐃ;
        m = 0;
        for (; m < k.length; m++) {
          c |= k[m].ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, uf);
        }
      }
      if (Rx.ⲆΔⲆΔ.id < 0 && Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0 && Rx.ⵠΔⵠΔⵠ.open && !j.ⵠᐃⵠᐃ.open && !j.ᐃⲆΔᐃ.open && !j.options.open && !j.ᐃᐃⵠΔⲆ.open && !j.Ⲇⵠⵠⵠ.open && !j.ⵠΔⵠⵠⲆ.open) {
        c |= j.ⵠΔⵠΔⵠ.button.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, uf);
      }
      if (Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0 && !j.ᐃⲆΔᐃ.open && !j.options.open && !j.ᐃᐃⵠΔⲆ.open && !j.Ⲇⵠⵠⵠ.open && !j.ⵠΔⵠⵠⲆ.open) {
        c |= j.ⵠᐃⵠᐃ.button.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, uf);
      }
      if (Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0 && !j.ⵠᐃⵠᐃ.open && !j.ᐃⲆΔᐃ.open && !j.ᐃᐃⵠΔⲆ.open && !j.Ⲇⵠⵠⵠ.open && !j.ⵠΔⵠⵠⲆ.open) {
        c |= j.options.button.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, uf);
      }
      if (Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0 && !j.ⵠᐃⵠᐃ.open && !j.ᐃⲆΔᐃ.open && !j.ᐃᐃⵠΔⲆ.open && !j.Ⲇⵠⵠⵠ.open && !j.options.open) {
        c |= j.ⵠΔⵠⵠⲆ.button.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, uf);
      }
      if (Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0 && !j.ⵠᐃⵠᐃ.open && !j.ᐃⲆΔᐃ.open && !j.ᐃᐃⵠΔⲆ.open && !j.Ⲇⵠⵠⵠ.open && !j.options.open && !j.ⵠΔⵠⵠⲆ.open) {
        if (Ux.ⵠⵠΔⵠⵠ) {
          c |= j.ΔΔⲆΔ.ΔⲆⵠΔᐃⲆΔ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, uf);
        } else {
          c |= j.ΔΔⲆΔ.ⲆΔⵠⲆⵠΔΔ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, uf);
        }
      }
      if (Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0 && !j.ⵠᐃⵠᐃ.open && !j.ⵠΔⵠⵠⲆ.open && !j.ᐃⲆΔᐃ.open && !j.options.open && !j.ᐃᐃⵠΔⲆ.open && Qx.mode !== 2 && Qx.mode !== 4 && Qx.mode !== 5) {
        c |= j.Ⲇⵠⵠⵠ.button.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, uf);
      }
      if (!c && !j.ⵠᐃⵠᐃ.open && !j.ᐃⲆΔᐃ.open && !j.options.open && !j.ᐃᐃⵠΔⲆ.open && !j.Ⲇⵠⵠⵠ.open && !j.ⵠΔⵠⵠⲆ.open && !j.sign.open) {
        if (Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ >= 0) {
          Mx.ⵠΔⵠᐃΔΔᐃΔⵠ();
        } else if (!o) {
          Wx.down();
        }
      }
    };
    this.ⵠⵠᐃⵠⲆⲆΔ = function (b) {
      Wx.ΔⵠⲆⲆ = cf(j.Δᐃ, b);
      Wx.up();
      if (!Rx.ⵠⵠⲆᐃ.ᐃⲆⲆΔᐃⲆᐃ.release()) {
        var c = Rx.ΔⲆΔⵠ;
        var d = Rx.ΔⵠⵠΔⲆ;
        var e = Rx.ⵠⵠⵠⵠᐃ;
        var f = Rx.ᐃⲆΔⵠ;
        var i = Rx.ᐃⵠΔᐃ;
        var k = Rx.ⲆᐃΔᐃ;
        if (Rx.control.attack) {
          Rx.control.attack = 0;
          Mx.ᐃⲆᐃᐃᐃΔᐃΔⲆ();
        }
        if (j.ᐃⲆⵠⲆⲆ != -1) {
          var m = j.ⲆⵠΔΔΔ[j.ᐃⲆⵠⲆⲆ].button.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf);
          var n = document.getElementById("team_box").style;
          if (m && n.display == "inline-block") {
            n.display = "none";
            return;
          }
          if (m) {
            j.ⲆⵠΔΔΔ[j.ᐃⲆⵠⲆⲆ].action();
          }
        }
        if (Rx.ⲆΔⲆΔ.id < 0 && c.id >= 0 && !j.ᐃⲆΔᐃ.open) {
          if (!Rx.ΔⲆΔⵠ.lock || Rx.ΔⲆΔⵠ.ᐃΔᐃΔ === Rx.id) {
            if (m = j.Ⲇⵠⵠ[Rx.ΔⲆΔⵠ.id].ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf)) {
              Mx.ΔΔⵠᐃⵠΔⲆΔᐃ(c);
            }
          }
        }
        if ((f = Rx.ᐃⲆΔⵠ).open && f.ΔⵠΔᐃΔ > 0 && !j.ᐃⲆΔᐃ.open) {
          if (m = j.ᐃⲆᐃᐃΔᐃⲆ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf)) {
            Mx.ⵠΔⲆᐃⵠⵠⲆΔⵠ(f);
          }
        }
        if ((i = Rx.ᐃⵠΔᐃ).open && i.ⲆΔᐃⲆᐃᐃΔ > 0 && !j.ᐃⲆΔᐃ.open) {
          switch (i.type) {
            case 24:
              if (m = j.ⲆⲆⵠⲆᐃΔⵠ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf)) {
                Mx.ᐃⵠⵠⲆⵠⲆⲆ(i);
              }
              break;
            case 25:
              if (m = j.ΔⲆᐃⲆΔΔΔ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf)) {
                Mx.ᐃⵠⵠⲆⵠⲆⲆ(i);
              }
              break;
            case 26:
              if (m = j.ⲆⵠΔⵠⵠᐃⲆ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf)) {
                Mx.ᐃⵠⵠⲆⵠⲆⲆ(i);
              }
              break;
            case 27:
              if (m = j.ᐃᐃᐃⲆᐃΔΔ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf)) {
                Mx.ᐃⵠⵠⲆⵠⲆⲆ(i);
              }
              break;
            case 28:
              if (m = j.ⵠᐃΔⲆⵠᐃⲆ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf)) {
                Mx.ᐃⵠⵠⲆⵠⲆⲆ(i);
              }
          }
        }
        if ((k = Rx.ⲆᐃΔᐃ).open && k.ΔΔⵠΔⲆⲆⵠ > 0 && !j.ᐃⲆΔᐃ.open) {
          if (m = j.ⵠᐃⲆⲆⲆⵠᐃ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf)) {
            Mx.ⲆⲆΔᐃⲆᐃⲆⲆᐃ(k);
          }
        }
        if (Rx.sign.open && !j.ᐃⲆΔᐃ.open) {
          if (m = j.sign.button.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf)) {
            j.sign.select();
          }
        }
        if (!Rx.ΔⲆΔⵠ.lock && !j.ᐃⲆΔᐃ.open) {
          if (Rx.ΔⲆΔⵠ.ᐃΔⵠΔⲆⲆᐃ && (m = j.ΔᐃⲆⲆᐃΔⵠ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf))) {
            Mx.ⲆΔΔⵠΔᐃΔⲆⲆ(c);
          }
        }
        if (Rx.ΔⲆΔⵠ.ᐃᐃⲆⵠᐃⵠΔ && !j.ᐃⲆΔᐃ.open && (m = j.ⲆᐃⵠⲆΔⵠⵠ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf))) {
          Mx.ⲆⵠᐃΔⲆⵠⵠΔΔ(c);
          if (ga) {
            ga("send", "event", "Game", "lockpick");
          }
        }
        if (Rx.ⲆⲆⵠⵠᐃ.open) {
          if (m = j.ⲆⲆⵠⵠᐃ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf)) {
            Mx.ⲆⲆⵠⵠᐃ();
            if (ga) {
              ga("send", "event", "Game", "resurrection");
            }
          }
        }
        if (Rx.ⲆΔⲆΔ.id < 0 && !Rx.ᐃⵠⲆᐃⲆ.enabled && !j.ᐃⲆΔᐃ.open) {
          for (var g = Rx.ⵠⵠⲆᐃ.ⵠΔⲆᐃⲆ, o = 0; g.length > o; o++) {
            if (m = g[o].ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf)) {
              if (b.which != 1 || b.shiftKey) {
                if ((b.which == 1 && b.shiftKey || b.which == 3) && Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0) {
                  j.ᐃⲆΔᐃ.ΔΔⲆⲆⲆⵠΔ(g[o].id);
                }
              } else {
                Mx.ᐃΔᐃᐃΔ(g[o].id, o);
              }
            } else if (c.open && (c.id < 0 || c.id === g[o].id)) {
              if ((m = j.ΔⵠⲆⵠⲆ[g[o].id].ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf)) && Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0) {
                Mx.ΔⵠᐃᐃΔΔⵠⵠΔ(c, g[o].id, b.shiftKey ? 10 : 1);
              }
            } else if (e.open && g[o].id === 180) {
              if ((m = j.ΔⵠⲆⵠⲆ[g[o].id].ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf)) && Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0) {
                Mx.ᐃᐃⲆΔⵠᐃⲆΔⲆ(e);
              }
            } else if (d.open && g[o].id === 109) {
              if ((m = j.ΔⵠⲆⵠⲆ[g[o].id].ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf)) && Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0) {
                Mx.ΔⵠⲆΔⲆΔᐃᐃΔ(d, b.shiftKey ? 10 : 1);
              }
            } else if (f.open && g[o].id === 134) {
              if ((m = j.ΔⵠⲆⵠⲆ[g[o].id].ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf)) && Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0) {
                Mx.ⵠⵠⵠᐃΔᐃⵠΔⲆ(f, b.shiftKey ? 10 : 1);
              }
            } else if (i.open && g[o].id === 109) {
              if ((m = j.ΔⵠⲆⵠⲆ[g[o].id].ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf)) && Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0) {
                Mx.ⲆΔᐃⲆⵠⵠᐃΔᐃ(i, b.shiftKey ? 10 : 1);
              }
            } else if (k.open && (g[o].id === 109 || g[o].id === 131)) {
              if ((m = j.ΔⵠⲆⵠⲆ[g[o].id].ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf)) && Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0) {
                if (g[o].id === 109) {
                  Mx.ⲆΔΔⵠⲆΔⲆ(k, b.shiftKey ? 10 : 1, 0);
                } else {
                  Mx.ⲆΔΔⵠⲆΔⲆ(k, 0, b.shiftKey ? 10 : 1);
                }
              }
            }
          }
        }
        if (Rx.ⲆΔⲆΔ.id < 0 && Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0 && !Rx.ᐃⵠⲆᐃⲆ.enabled && !j.ᐃⲆΔᐃ.open && !Rx.ᐃΔⵠᐃⵠ) {
          g = Rx.ⲆΔⲆΔ.ⵠⵠⲆⵠᐃ;
          o = 0;
          for (; g.length > o; o++) {
            if (m = g[o].ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf)) {
              ΔⵠⲆⲆⲆ = Mx.ⵠⵠΔᐃⵠᐃⵠⵠΔ(g[o].id);
              if (ΔⵠⲆⲆⲆ && ga) {
                ga("send", "event", "Game", "craft", As[Ct[g[o].id].ⲆⲆᐃᐃ].name);
              }
            }
          }
        }
        if (Rx.ⲆΔⲆΔ.id < 0 && Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0 && Rx.ⵠΔⵠΔⵠ.open && !j.ⵠΔⵠⵠⲆ.open && !j.ⵠᐃⵠᐃ.open && !j.ᐃⲆΔᐃ.open && !j.options.open && !j.ᐃᐃⵠΔⲆ.open && !j.Ⲇⵠⵠⵠ.open) {
          if (m = j.ⵠΔⵠΔⵠ.button.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, lf)) {
            Tx.ⵠΔⵠΔⵠ.select();
          }
        }
        if (Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0 && !j.ⵠᐃⵠᐃ.open && !j.ᐃⲆΔᐃ.open && !j.ⵠΔⵠⵠⲆ.open && !j.ᐃᐃⵠΔⲆ.open && !j.Ⲇⵠⵠⵠ.open && !j.options.open) {
          if (Ux.ⵠⵠΔⵠⵠ) {
            if (m = j.ΔΔⲆΔ.ΔⲆⵠΔᐃⲆΔ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf)) {
              Ux.select();
              if (ga) {
                ga("send", "event", "Game", "sound on");
              }
            }
          } else if (m = j.ΔΔⲆΔ.ⲆΔⵠⲆⵠΔΔ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf)) {
            Ux.select();
            if (ga) {
              ga("send", "event", "Game", "sound off");
            }
          }
        }
        if (Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0 && !j.ⵠᐃⵠᐃ.open && !j.ᐃⲆΔᐃ.open && !j.ᐃᐃⵠΔⲆ.open && !j.Ⲇⵠⵠⵠ.open && !j.ⵠΔⵠⵠⲆ.open) {
          if (m = j.options.button.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf)) {
            j.options.ΔⵠⲆⵠᐃⵠⵠⵠⵠ();
            if (ga) {
              ga("send", "event", "Game", "options");
            }
          }
        }
        if (Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0 && !j.ⵠᐃⵠᐃ.open && !j.ᐃⲆΔᐃ.open && !j.ᐃᐃⵠΔⲆ.open && !j.Ⲇⵠⵠⵠ.open && !j.options.open && j.ΔΔΔΔⵠⵠΔ === 1) {
          if (m = j.ⵠΔⵠⵠⲆ.button.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf)) {
            j.ⵠΔⵠⵠⲆ.select();
            if (ga) {
              ga("send", "event", "Game", "market");
            }
          }
        }
        if (Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0 && !j.ᐃⲆΔᐃ.open && !j.ⵠΔⵠⵠⲆ.open && !j.options.open && !j.ᐃᐃⵠΔⲆ.open && !j.Ⲇⵠⵠⵠ.open && j.ᐃⲆⵠᐃΔΔⲆ === 1) {
          if (m = j.ⵠᐃⵠᐃ.button.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf)) {
            j.ⵠᐃⵠᐃ.ΔᐃᐃⵠᐃⵠᐃⲆᐃ();
            if (ga) {
              ga("send", "event", "Game", "recipe");
            }
          }
        }
        if (Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0 && !j.ⵠᐃⵠᐃ.open && !j.ᐃⲆΔᐃ.open && !j.options.open && !j.ᐃᐃⵠΔⲆ.open && !j.ⵠΔⵠⵠⲆ.open && Qx.mode !== 2 && Qx.mode !== 4 && Qx.mode !== 5 && j.ᐃΔⵠᐃⲆᐃⵠ === 1) {
          if (m = j.Ⲇⵠⵠⵠ.button.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, bf)) {
            j.Ⲇⵠⵠⵠ.select();
            if (ga) {
              ga("send", "event", "Game", "quests");
            }
          }
        }
        if (Rx.ⲆΔⲆΔ.ΔΔⵠⲆΔ && b.which == 3) {
          j.ᐃᐃⵠΔⲆ.ΔΔⲆⲆⲆⵠΔ();
        }
      }
    };
    this.ΔᐃΔΔᐃⲆΔ = false;
    this.ΔΔΔⲆΔᐃᐃ = function (b) {
      Wx.ΔⵠⲆⲆ = cf(j.Δᐃ, b);
      var d = false;
      Tx.ⵠᐃⵠⲆⵠ.display = 0;
      Rx.ⵠⵠⲆᐃ.ᐃⲆⲆΔᐃⲆᐃ.ΔⵠΔⵠⵠ(Wx.ΔⵠⲆⲆ);
      if (j.ᐃⲆⵠⲆⲆ != -1) {
        d |= j.ⲆⵠΔΔΔ[j.ᐃⲆⵠⲆⲆ].button.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, lf);
      }
      var e = Rx.ᐃⲆΔⵠ;
      if (e.open && e.ΔⵠΔᐃΔ > 0) {
        d |= j.ᐃⲆᐃᐃΔᐃⲆ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, lf);
      }
      var f = Rx.ᐃⵠΔᐃ;
      if (f.open && f.ⲆΔᐃⲆᐃᐃΔ > 0) {
        d |= j.ⲆⲆⵠⲆᐃΔⵠ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, lf);
        d |= j.ΔⲆᐃⲆΔΔΔ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, lf);
        d |= j.ⲆⵠΔⵠⵠᐃⲆ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, lf);
        d |= j.ᐃᐃᐃⲆᐃΔΔ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, lf);
        d |= j.ⵠᐃΔⲆⵠᐃⲆ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, lf);
      }
      var a = Rx.ⲆᐃΔᐃ;
      if (a.open && a.ΔΔⵠΔⲆⲆⵠ > 0) {
        d |= j.ⵠᐃⲆⲆⲆⵠᐃ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, lf);
      }
      if (Rx.sign.open) {
        d |= j.sign.button.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, lf);
      }
      var i = Rx.ΔⲆΔⵠ;
      if (Rx.ⲆΔⲆΔ.id < 0 && i.id >= 0 && !Rx.ᐃⵠⲆᐃⲆ.enabled) {
        if (!Rx.ΔⲆΔⵠ.lock || Rx.ΔⲆΔⵠ.ᐃΔᐃΔ === Rx.id) {
          d |= j.Ⲇⵠⵠ[i.id].ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, lf);
        }
      }
      if (Rx.ⲆⲆⵠⵠᐃ.open) {
        d |= j.ⲆⲆⵠⵠᐃ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, lf);
      }
      if (!Rx.ΔⲆΔⵠ.lock && !Rx.ᐃⵠⲆᐃⲆ.enabled) {
        if (Rx.ΔⲆΔⵠ.ᐃΔⵠΔⲆⲆᐃ) {
          d |= j.ΔᐃⲆⲆᐃΔⵠ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, lf);
        }
      }
      if (Rx.ΔⲆΔⵠ.ᐃᐃⲆⵠᐃⵠΔ && !Rx.ᐃⵠⲆᐃⲆ.enabled) {
        d |= j.ⲆᐃⵠⲆΔⵠⵠ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, lf);
      }
      if (Rx.ⲆΔⲆΔ.id < 0 && !Rx.ᐃⵠⲆᐃⲆ.enabled) {
        for (var k = Rx.ⵠⵠⲆᐃ.ⵠΔⲆᐃⲆ, m = 0; k.length > m; m++) {
          var n = k[m].ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, lf);
          d |= Tx.ⵠᐃⵠⲆⵠ.ΔᐃⵠΔ(n, k[m], 0);
          if (i.open && (i.id < 0 || k[m].id == i.id) || Rx.ΔⵠⵠΔⲆ.open && k[m].id == 109 || Rx.ⵠⵠⵠⵠᐃ.open && k[m].id === 180 || Rx.ⲆᐃΔᐃ.open && (k[m].id == 109 || k[m].id == 131) || Rx.ᐃⲆΔⵠ.open && k[m].id == 134 || Rx.ᐃⵠΔᐃ.open && k[m].id == 109) {
            d |= j.ΔⵠⲆⵠⲆ[k[m].id].ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, lf);
          }
        }
      }
      if (Rx.ⲆΔⲆΔ.id < 0 && Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0 && !Rx.ᐃⵠⲆᐃⲆ.enabled && !Rx.ᐃΔⵠᐃⵠ) {
        k = Rx.ⲆΔⲆΔ.ⵠⵠⲆⵠᐃ;
        m = 0;
        for (; k.length > m; m++) {
          n = zl;
          n = k[m].ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, lf);
          d |= Tx.ⵠᐃⵠⲆⵠ.ΔᐃⵠΔ(n, k[m], 1);
        }
      }
      if (Rx.ⲆΔⲆΔ.id < 0 && Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0 && !!Rx.ⵠΔⵠΔⵠ.open && !j.ⵠᐃⵠᐃ.open && !j.ᐃⲆΔᐃ.open && !j.options.open && !j.ᐃᐃⵠΔⲆ.open && !j.Ⲇⵠⵠⵠ.open && !j.ⵠΔⵠⵠⲆ.open) {
        d |= j.ⵠΔⵠΔⵠ.button.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, lf);
      }
      if (Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0 && !j.ᐃⲆΔᐃ.open && !j.options.open && !j.ᐃᐃⵠΔⲆ.open && !j.Ⲇⵠⵠⵠ.open && !j.ⵠΔⵠⵠⲆ.open && j.ᐃⲆⵠᐃΔΔⲆ === 1) {
        d |= j.ⵠᐃⵠᐃ.button.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, lf);
      }
      if (Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0 && !j.ⵠᐃⵠᐃ.open && !j.ᐃⲆΔᐃ.open && !j.ᐃᐃⵠΔⲆ.open && !j.Ⲇⵠⵠⵠ.open && !j.ⵠΔⵠⵠⲆ.open) {
        d |= j.options.button.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, lf);
      }
      if (Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0 && !j.ⵠᐃⵠᐃ.open && !j.ᐃⲆΔᐃ.open && !j.ᐃᐃⵠΔⲆ.open && !j.Ⲇⵠⵠⵠ.open && !j.options.open && j.ΔΔΔΔⵠⵠΔ === 1) {
        d |= j.ⵠΔⵠⵠⲆ.button.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, lf);
      }
      if (Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0 && !j.ⵠᐃⵠᐃ.open && !j.ᐃⲆΔᐃ.open && !j.ᐃᐃⵠΔⲆ.open && !j.Ⲇⵠⵠⵠ.open && !j.options.open && !j.ⵠΔⵠⵠⲆ.open) {
        if (Ux.ⵠⵠΔⵠⵠ) {
          d |= j.ΔΔⲆΔ.ΔⲆⵠΔᐃⲆΔ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, lf);
        } else {
          d |= j.ΔΔⲆΔ.ⲆΔⵠⲆⵠΔΔ.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, lf);
        }
      }
      if (Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ < 0 && !j.ⵠᐃⵠᐃ.open && !j.ᐃⲆΔᐃ.open && !j.options.open && !j.ᐃᐃⵠΔⲆ.open && !j.ⵠΔⵠⵠⲆ.open && Qx.mode !== 2 && Qx.mode !== 4 && Ff.ⵠΔΔⲆΔΔⲆⵠΔ !== Qx.mode && j.ᐃΔⵠᐃⲆᐃⵠ === 1) {
        d |= j.Ⲇⵠⵠⵠ.button.ΔᐃⵠΔ(j.Δᐃ, Wx.ΔⵠⲆⲆ, lf);
      }
      if (j.ΔᐃΔΔᐃⲆΔ !== d) {
        j.ΔᐃΔΔᐃⲆΔ = d;
        c.style.cursor = d ? j.ᐃⲆⵠⵠΔⵠⲆ : j.ⲆᐃᐃᐃⲆⲆᐃ;
      }
    };
    this.ⵠΔᐃⲆᐃⵠⵠ = function () {
      oc.addEventListener("mousedown", this.ⵠᐃⲆⲆⵠᐃᐃ, gn);
      oc.addEventListener("mouseup", this.ⵠⵠᐃⵠⲆⲆΔ, gr);
      oc.addEventListener("mousemove", this.ΔΔΔⲆΔᐃᐃ, gr);
      oc.addEventListener("keyup", this.ΔΔⲆⲆᐃΔᐃ, false);
      oc.addEventListener("keydown", this.ⲆΔΔⵠⲆⲆᐃ, gn);
    };
    this.ᐃᐃⵠⵠⲆᐃⲆ = function () {
      oc.removeEventListener("mousedown", this.ⵠᐃⲆⲆⵠᐃᐃ, false);
      oc.removeEventListener("mouseup", this.ⵠⵠᐃⵠⲆⲆΔ, false);
      oc.removeEventListener("mousemove", this.ΔΔΔⲆΔᐃᐃ, false);
      oc.removeEventListener("keyup", this.ΔΔⲆⲆᐃΔᐃ, Kk);
      oc.removeEventListener("keydown", this.ⲆΔΔⵠⲆⲆᐃ, false);
    };
  }
  function jx(a, b) {
    const c = (1013904223 + (41297 + a) * 1664525) % 4294967296;
    const d = b ^ 23522;
    const e = ob(c, 0, c, d, 0, d);
    to(c, d, c);
    return ~(e & 64897) & 64897 | ~(e & 64897) & e;
  }
  function kx(b, c) {
    this.Δᐃ = b;
    this.Δ = c;
    var d = this;
    this.ⲆᐃΔᐃΔⲆⲆ = false;
    this.ⲆⵠᐃⵠⲆᐃⲆ = {
      id: document.getElementById("scoreboard"),
      style: document.getElementById("scoreboard").style,
      height: 0,
      translate: {
        x: 0,
        y: 0
      },
      ⵠⵠᐃ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = this.translate.y + "px";
      },
      ⵠᐃᐃⲆᐃ: function () {
        this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + Rx.ᐃⵠᐃⲆᐃΔⲆ.ΔⵠⲆⲆΔⲆⲆ + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + Ib[335] + " : " + Rx.ⵠΔΔ + "</div><div class=\"stats\"> " + Ib[334] + " : " + Rx.ᐃⵠᐃⲆᐃΔⲆ.ᐃᐃΔᐃⵠ + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + Ib[333] + " : " + Rx.ᐃⵠᐃⲆᐃΔⲆ.ⵠⵠⵠⲆⵠ + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + Rx.ᐃⵠᐃⲆᐃΔⲆ.ⵠᐃᐃⲆⵠᐃΔ + " " + Ib[332] + "</div></div><div id=\"shop_points\">" + Ib[331] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + Ib[329] + "</div><div class=\"social\" id=\"fffacebook\">" + Ib[330] + "</div></div><div id=\"bbback\">" + Ib[328] + "</div>";
        this.style.display = "inline-block";
        document.getElementById("tttwitter").addEventListener("mouseup", lx, fr);
        document.getElementById("bbback").addEventListener("mouseup", function () {
          Sx.ⵠⵠΔⲆᐃ(Px.ⵠⵠΔⵠⵠ);
        }, gn);
        document.getElementById("fffacebook").addEventListener("mouseup", nx, false);
        this.height = Math.floor(this.id.clientHeight / 2);
        (function () {
          var a = new XMLHttpRequest();
          a.open("GET", by + "getBreadAndScore?userid=" + sy);
          a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          a.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
              var b = JSON.parse(a.responseText);
              var c = b.b - Px.ⵠΔⵠⲆᐃ;
              Px.ⵠΔⵠⲆᐃ = b.b;
              Px.ⵠⵠⵠⲆⵠ = b.s;
              Px.ⲆΔΔⵠᐃ = Px.ΔⵠⵠᐃⵠⵠΔ(Px.ⵠⵠⵠⲆⵠ);
              Px.ⵠⲆⲆⲆΔⵠᐃ = Px.ⲆⵠΔⵠᐃΔᐃ(Px.ⵠⵠⵠⲆⵠ);
              Px.ᐃⵠⵠΔⲆⲆᐃ = 0;
              document.getElementById("breadWonInner").innerHTML = "" + c;
            }
          };
          a.send();
        })();
      }
    };
    var g;
    var i = 0;
    function e() {
      d.ⵠⵠᐃ();
      if (++i != 30) {
        oc.setTimeout(e, 33);
      } else {
        d.ⵠⵠᐃ();
      }
    }
    this.ⵠⵠΔⲆᐃ = function (a) {
      if (Wq === d.ⲆᐃΔᐃΔⲆⲆ) {
        d.ⲆᐃΔᐃΔⲆⲆ = false;
        g = a;
        j = -1;
        k();
        $x();
      }
    };
    var j = -1;
    function k() {
      d.ⵠⵠᐃ();
      if (++j == 30) {
        d.stop();
        d.ⲆⵠᐃⵠⲆᐃⲆ.style.display = "none";
        g();
        return;
      }
      oc.setTimeout(k, 33);
    }
    this.ⲆΔᐃⲆⲆ = f;
    this.stop = function () {
      this.ⲆΔᐃⲆⲆ = gr;
    };
    this.ⵠⵠΔⵠⵠ = function () {
      hy();
      document.getElementById("game_body").style.backgroundColor = ns.ⵠΔᐃⲆΔ[Lx.time];
      d.ⲆⵠᐃⵠⲆᐃⲆ.ⵠᐃᐃⲆᐃ();
      Px.ᐃⲆⲆⲆⵠ.style.display = "inline-block";
      d.ⲆΔᐃⲆⲆ = true;
      d.ⲆᐃΔᐃΔⲆⲆ = true;
      j = -1;
      i = 0;
      e();
    };
    this.ⵠⵠᐃ = function () {
      this.ⲆⵠᐃⵠⲆᐃⲆ.translate.x = Math.floor(iq - 275);
      this.ⲆⵠᐃⵠⲆᐃⲆ.translate.y = Math.floor(jq - this.ⲆⵠᐃⵠⲆᐃⲆ.height - 28);
      Px.ᐃⲆⲆⲆⵠ.translate.x = this.ⲆⵠᐃⵠⲆᐃⲆ.translate.x - 350;
      Px.ᐃⲆⲆⲆⵠ.translate.y = this.ⲆⵠᐃⵠⲆᐃⲆ.translate.y + 0;
      Px.ᐃⲆⲆⲆⵠ.ⵠⵠᐃ();
      if (i != 30 || j != -1) {
        var a = 0;
        if (i != 30) {
          a = 1500 / (i + 1) - 50;
        }
        if (j != -1) {
          a = -(1750 / (30 - j + 1) - 48);
        }
        this.ⲆⵠᐃⵠⲆᐃⲆ.translate.y -= a;
      }
      this.ⲆⵠᐃⵠⲆᐃⲆ.ⵠⵠᐃ();
    };
    this.ⲆⵠⵠΔ = function () {
      Dc();
      Rx.alert.ⲆⵠⵠΔ("#FFF", "#000");
    };
  }
  function lx() {
    ⲆⵠΔⵠ.ΔⵠⲆΔⲆⵠᐃ("https://twitter.com/intent/tweet?text=I%20survived%20" + Rx.ⵠΔΔ + "%20days%20with%20" + Rx.ᐃⵠᐃⲆᐃΔⲆ.ⵠⵠⵠⲆⵠ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
  }
  function mx(a, b, c, d) {
    Wj(Ft, a, b, c, d);
    const e = yb(Ht[0], Ht[1], Ht[2], Ht[3], Ht[0]);
    yb(Ht[1], Ht[2], Ht[3], Ht[0], Ht[1]);
    return e ^ 48055;
  }
  function nx() {
    ⲆⵠΔⵠ.ΔⵠⲆΔⲆⵠᐃ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
  }
  var ox = 1;
  var px = 1;
  var qx = {
    ᐃⵠᐃΔᐃⵠⵠⵠᐃ: 5000,
    ΔⵠΔ: 6,
    ⲆⲆⵠΔⵠΔΔⲆᐃ: 5000,
    ΔⲆΔⲆΔ: 8,
    ⲆⵠⵠⵠⲆⲆᐃ: 12,
    ΔΔⵠΔⵠ: 3,
    ⵠⲆⵠⵠⲆ: 1,
    ⲆΔᐃΔΔⲆⵠⵠᐃ: 12,
    ΔⵠᐃΔⵠΔΔ: 460000,
    ᐃⵠᐃᐃⵠⵠΔΔᐃ: 12,
    ΔⲆΔΔΔ: 2,
    ΔΔⵠⲆᐃⵠⲆΔᐃ: 5000,
    ᐃᐃᐃⵠⲆⵠⵠ: 3000
  };
  var rx = [];
  rx[-1] = 1;
  rx[28] = 1;
  rx[49] = 1;
  rx[qs.ⵠᐃⵠΔΔⲆΔᐃᐃ] = 2;
  rx[8] = 2;
  rx[1] = 2;
  rx[3] = 2;
  rx[4] = 2;
  rx[31] = 2;
  rx[32] = 2;
  rx[9] = 2;
  rx[57] = 2;
  rx[0] = 2;
  rx[63] = 2;
  rx[17] = 2;
  rx[5] = 2;
  rx[6] = 2;
  rx[30] = 2;
  rx[qs.ⲆΔΔΔⲆⲆΔᐃΔ] = 2;
  rx[18] = 2;
  rx[12] = 2;
  rx[13] = 2;
  rx[14] = 2;
  rx[15] = 2;
  rx[16] = 2;
  rx[33] = 2;
  rx[qs.ΔᐃᐃᐃⲆⲆΔΔⵠ] = 2;
  rx[35] = 2;
  rx[36] = 2;
  rx[37] = 2;
  rx[38] = 2;
  rx[39] = 2;
  rx[45] = 2;
  rx[62] = 2;
  rx[54] = 2;
  rx[53] = 2;
  rx[46] = 3;
  rx[50] = 3;
  rx[51] = 3;
  rx[52] = 3;
  ᐃⲆⲆⲆ = [];
  ᐃⲆⲆⲆ[0] = 0;
  ᐃⲆⲆⲆ[1] = 1;
  ᐃⲆⲆⲆ[2] = 1;
  ᐃⲆⲆⲆ[3] = 1;
  ᐃⲆⲆⲆ[4] = 0;
  ᐃⲆⲆⲆ[5] = 0;
  ᐃⲆⲆⲆ[6] = 0;
  ᐃⲆⲆⲆ[7] = 0;
  ᐃⲆⲆⲆ[8] = 0;
  ᐃⲆⲆⲆ[9] = 0;
  ᐃⲆⲆⲆ[10] = 1;
  ᐃⲆⲆⲆ[11] = 1;
  ᐃⲆⲆⲆ[12] = 1;
  ᐃⲆⲆⲆ[13] = 1;
  ᐃⲆⲆⲆ[14] = 1;
  ᐃⲆⲆⲆ[15] = 1;
  ᐃⲆⲆⲆ[16] = 0;
  ᐃⲆⲆⲆ[17] = 0;
  ᐃⲆⲆⲆ[18] = 0;
  ᐃⲆⲆⲆ[19] = 0;
  ᐃⲆⲆⲆ[20] = 0;
  ᐃⲆⲆⲆ[21] = 0;
  ᐃⲆⲆⲆ[22] = 0;
  ᐃⲆⲆⲆ[23] = 1;
  ᐃⲆⲆⲆ[24] = 1;
  ᐃⲆⲆⲆ[25] = 1;
  ᐃⲆⲆⲆ[26] = 1;
  ᐃⲆⲆⲆ[27] = 1;
  ᐃⲆⲆⲆ[28] = 1;
  ᐃⲆⲆⲆ[29] = 1;
  ᐃⲆⲆⲆ[30] = 1;
  ᐃⲆⲆⲆ[31] = 1;
  ᐃⲆⲆⲆ[32] = 1;
  ᐃⲆⲆⲆ[33] = 1;
  ᐃⲆⲆⲆ[34] = 1;
  ᐃⲆⲆⲆ[35] = 1;
  ᐃⲆⲆⲆ[36] = 1;
  ᐃⲆⲆⲆ[37] = 1;
  ᐃⲆⲆⲆ[38] = 1;
  ᐃⲆⲆⲆ[40] = 0;
  ᐃⲆⲆⲆ[41] = 0;
  ᐃⲆⲆⲆ[42] = 0;
  ᐃⲆⲆⲆ[50] = 1;
  ᐃⲆⲆⲆ[51] = 1;
  ᐃⲆⲆⲆ[52] = 1;
  ᐃⲆⲆⲆ[55] = 0;
  ᐃⲆⲆⲆ[56] = 0;
  ᐃⲆⲆⲆ[57] = 0;
  ᐃⲆⲆⲆ[58] = 0;
  ⵠⲆᐃⲆⲆ = [];
  ⵠⲆᐃⲆⲆ[Gf.ΔᐃⲆᐃⵠ] = 0;
  ⵠⲆᐃⲆⲆ[1] = 0;
  ⵠⲆᐃⲆⲆ[29] = 0;
  ⵠⲆᐃⲆⲆ[6] = 0;
  ⵠⲆᐃⲆⲆ[3] = -1;
  ⵠⲆᐃⲆⲆ[31] = -1;
  ⵠⲆᐃⲆⲆ[2] = 0;
  ⵠⲆᐃⲆⲆ[4] = 0;
  ⵠⲆᐃⲆⲆ[30] = 0;
  ⵠⲆᐃⲆⲆ[33] = 0;
  ⵠⲆᐃⲆⲆ[32] = 1;
  ⵠⲆᐃⲆⲆ[35] = 1;
  ⵠⲆᐃⲆⲆ[7] = 1;
  ⵠⲆᐃⲆⲆ[8] = 1;
  ⵠⲆᐃⲆⲆ[9] = 1;
  ⵠⲆᐃⲆⲆ[19] = 1;
  ⵠⲆᐃⲆⲆ[50] = 1;
  ⵠⲆᐃⲆⲆ[5] = 0;
  ⵠⲆᐃⲆⲆ[12] = 1;
  ⵠⲆᐃⲆⲆ[13] = 1;
  const sx = String.fromCharCode;
  const tx = sx(101);
  const ux = sx(118);
  const vx = sx(97);
  const wx = sx(108);
  ⵠⲆᐃⲆⲆ[14] = 1;
  ⵠⲆᐃⲆⲆ[20] = 1;
  ⵠⲆᐃⲆⲆ[52] = 1;
  function xx(a) {
    return oc.String.fromCharCode(a);
  }
  (function () {
    const a = {
      ⲆⲆⲆⲆⵠⲆⲆᐃⲆ: 1787074,
      ⵠᐃⲆⵠΔⵠⲆ: 4615015,
      ΔⲆᐃΔᐃⵠⵠ: 6163023,
      ⲆΔᐃΔⵠⵠᐃ: 4318810
    };
  })();
  ⵠⲆᐃⲆⲆ[10] = 0;
  ⵠⲆᐃⲆⲆ[15] = 1;
  ⵠⲆᐃⲆⲆ[16] = 1;
  ⵠⲆᐃⲆⲆ[17] = 1;
  ⵠⲆᐃⲆⲆ[21] = 1;
  ⵠⲆᐃⲆⲆ[51] = 1;
  ⵠⲆᐃⲆⲆ[45] = 0;
  ⵠⲆᐃⲆⲆ[46] = 1;
  ⵠⲆᐃⲆⲆ[47] = 1;
  ⵠⲆᐃⲆⲆ[48] = 1;
  ⵠⲆᐃⲆⲆ[49] = 1;
  ⵠⲆᐃⲆⲆ[53] = 1;
  ⵠⲆᐃⲆⲆ[18] = 1;
  ⵠⲆᐃⲆⲆ[22] = 1;
  ⵠⲆᐃⲆⲆ[23] = 1;
  ⵠⲆᐃⲆⲆ[11] = 0;
  ⵠⲆᐃⲆⲆ[34] = 1;
  var yx = {
    ΔᐃᐃⲆᐃⲆᐃ: {
      ᐃⵠⵠΔᐃ: null,
      path: ["audio/ambience.mp3"],
      ᐃΔ: {
        d2: [90684, 300, false],
        d0: [90086, 300, zk],
        d1: [90391, 300, false]
      },
      sample: {
        d0: 8,
        d1: 8,
        d2: 8
      }
    },
    ΔᐃⵠⲆⵠⵠΔ: {
      ᐃⵠⵠΔᐃ: null,
      path: ["audio/ambience.mp3"],
      ᐃΔ: {
        p0: [89303, 300, gr],
        p1: [89549, 300, false],
        p2: [89815, 300, false]
      },
      sample: {
        p0: 8,
        p1: 8,
        p2: 8
      }
    },
    ΔⵠᐃⲆᐃⵠⵠ: {
      ᐃⵠⵠΔᐃ: null,
      path: ["audio/ambience.mp3"],
      ᐃΔ: {
        w2: [88751, 300, Wh],
        w3: [89025, 300, false],
        w0: [88195, 300, va],
        w1: [88473, 300, false]
      },
      sample: {
        w0: 8,
        w1: 8,
        w2: 8,
        w3: 8
      }
    },
    ⲆᐃⲆⲆᐃΔᐃ: {
      ᐃⵠⵠΔᐃ: null,
      path: ["audio/ambience.mp3"],
      ᐃΔ: {
        ⲆΔⲆⵠᐃ: [12356, 6965, true],
        ΔⵠⲆΔᐃᐃⲆ: [31658, 813, true],
        ⵠΔⲆᐃᐃⲆⲆ: [91022, 400, Wh],
        ⵠΔΔⵠΔⲆⲆ: [66961, 21223, true],
        ΔⲆⲆⲆΔⲆᐃ: [32604, 21890, true],
        ⵠΔⲆⵠᐃᐃⵠ: [54524, 11393, go],
        ⲆⵠᐃⲆⵠ: [91431, 400, false],
        ⵠᐃᐃⵠΔⵠⵠᐃΔ: [100, 2800, Xr],
        ⲆⲆⲆⵠΔΔΔ: [30562, 655, true],
        ⵠⲆᐃΔⲆ: [28380, 1797, true],
        ⵠᐃⵠⲆᐃⵠⲆ: [66014, 925, Tk],
        ᐃΔⲆⵠΔΔⲆ: [19882, 8301, rq],
        ΔΔΔΔΔᐃⲆ: [92249, 500, ps],
        ᐃᐃⲆΔⵠⲆᐃ: [3100, 8800, true],
        ⵠⵠⲆᐃⲆΔⲆ: [66961, 21223, true]
      },
      sample: {
        ⵠᐃᐃⵠΔⵠⵠᐃΔ: 1,
        ᐃᐃⲆΔⵠⲆᐃ: 1,
        ᐃΔⲆⵠΔΔⲆ: 1,
        ΔⲆⲆⲆΔⲆᐃ: 1,
        ⵠΔⲆⵠᐃᐃⵠ: 1,
        ⵠΔΔⵠΔⲆⲆ: 1,
        ⵠⵠⲆᐃⲆΔⲆ: 1,
        ⲆΔⲆⵠᐃ: 8,
        ⵠⲆᐃΔⲆ: 8,
        ⲆⲆⲆⵠΔΔΔ: 8,
        ΔⵠⲆΔᐃᐃⲆ: 8,
        ⵠᐃⵠⲆᐃⵠⲆ: 8,
        ⵠΔⲆᐃᐃⲆⲆ: 6,
        ⲆⵠᐃⲆⵠ: 6,
        ΔΔΔΔΔᐃⲆ: 6
      }
    }
  };
  function zx(b, c, d, e, f, g) {
    const a = ((14403 + b) * 1664525 + 1013904223) % 4294967296;
    const i = ((26478 + c) * 1664525 + 1013904223) % 4294967296;
    const j = (0 << (d >> 8 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 24 & 255)) + (24 << (d & 255));
    return ((8324 + (ny(a, i, j, (16 << (e >> 16 & 255)) + (24 << (e & 255)) + (8 << (e >> 24 & 255)) + (0 << (e >> 8 & 255)), ~(f & 17733) & (f | 17733), g ^ 54836) ^ tb(a, i, j))) * 214013 + 2531011) % 4294967296;
  }
  const Ax = String.fromCharCode;
  const Bx = Ax(101);
  const Cx = Ax(118);
  const Dx = Ax(97);
  const Ex = Ax(108);
  function Fx(b, c, d, e, f, i, a, j, k, h, g) {
    this.r = 1;
    this.Ⲇᐃⵠᐃᐃ = b;
    this.ⲆⲆⵠⵠⵠᐃⵠ = b;
    this.ⵠⲆⵠ = c;
    this.ⵠΔΔ = d;
    this.fade = e;
    this.ⲆΔⵠᐃⲆᐃⲆ = f;
    this.ᐃᐃⲆⲆⲆΔⵠ = i;
    this.ᐃᐃⲆⲆ = a;
    this.ⲆᐃⲆⵠᐃⲆⲆ = j;
    this.source = k;
    this.source.ΔΔⵠⲆⵠᐃᐃ = k.x + k.w;
    this.source.ᐃᐃⲆⵠᐃ = k.y + k.ᐃᐃᐃ;
    this.ⵠⵠᐃⵠᐃΔᐃⲆⵠ = h;
    this.ⵠⵠⵠΔᐃⲆⲆ = g;
    this.ⵠⲆᐃΔⲆΔⲆ = 0;
    this.ⲆΔΔΔⲆⲆΔ = {
      ⵠⲆⵠΔ: 5,
      d: 5
    };
    this.ΔᐃᐃΔⵠ = function () {
      this.Ⲇᐃⵠᐃᐃ -= Yx;
      if (this.Ⲇᐃⵠᐃᐃ < 0) {
        this.Ⲇᐃⵠᐃᐃ = this.ⲆⲆⵠⵠⵠᐃⵠ;
        var a = yx.ⲆᐃⲆⲆᐃΔᐃ.ᐃⵠⵠΔᐃ.playing(this.ⵠⲆⵠ);
        var b = yx.ⲆᐃⲆⲆᐃΔᐃ.ᐃⵠⵠΔᐃ.playing(this.ⵠΔΔ);
        if (a && !b) {
          var c = this.ᐃᐃⲆⲆ.volume(this.ⵠⲆⵠ) * px;
          var d = (Math.random() * this.ᐃᐃⲆⲆⲆΔⵠ + this.ⲆΔⵠᐃⲆᐃⲆ) * px;
          this.ᐃᐃⲆⲆ.fade(c, d, this.fade, this.ⵠⲆⵠ);
        } else if (!a && b) {
          c = px * this.ᐃᐃⲆⲆ.volume(this.ⵠΔΔ);
          d = (this.ᐃᐃⲆⲆⲆΔⵠ * Math.random() + this.ⲆΔⵠᐃⲆᐃⲆ) * px;
          this.ᐃᐃⲆⲆ.fade(c, d, this.fade, this.ⵠΔΔ);
        }
      }
    };
    this.transition = function () {
      this.Ⲇᐃⵠᐃᐃ = this.ⲆⲆⵠⵠⵠᐃⵠ;
      this.ⲆΔΔΔⲆⲆΔ.d = this.ⲆΔΔΔⲆⲆΔ.ⵠⲆⵠΔ;
      if (Qx.time) {
        this.ᐃᐃⲆⲆ.fade(0, px * this.ⲆΔⵠᐃⲆᐃⲆ, this.ⲆᐃⲆⵠᐃⲆⲆ, this.ⵠⲆⵠ);
        this.ᐃᐃⲆⲆ.play(this.ⵠⲆⵠ);
        if (this.ᐃᐃⲆⲆ.playing(this.ⵠΔΔ)) {
          var a = px * this.ᐃᐃⲆⲆ.volume(this.ⵠΔΔ);
          this.ᐃᐃⲆⲆ.fade(a, 0, this.ⲆᐃⲆⵠᐃⲆⲆ, this.ⵠΔΔ);
        }
      } else {
        this.ᐃᐃⲆⲆ.fade(0, px * this.ⲆΔⵠᐃⲆᐃⲆ, this.ⲆᐃⲆⵠᐃⲆⲆ, this.ⵠΔΔ);
        this.ᐃᐃⲆⲆ.play(this.ⵠΔΔ);
        if (this.ᐃᐃⲆⲆ.playing(this.ⵠⲆⵠ)) {
          a = this.ᐃᐃⲆⲆ.volume(this.ⵠⲆⵠ) * px;
          this.ᐃᐃⲆⲆ.fade(a, 0, this.ⲆᐃⲆⵠᐃⲆⲆ, this.ⵠⲆⵠ);
        }
      }
    };
    this.check = function (a) {
      if (this.ⵠⲆᐃΔⲆΔⲆ) {
        if (ⲆⵠΔⵠ.ⵠⵠⵠΔᐃⲆⲆ(a, this.ⵠⵠᐃⵠᐃΔᐃⲆⵠ)) {
          if (!Ux.transition && Qx.ᐃᐃᐃⵠⲆ.now < 460000) {
            if (Qx.time) {
              if (!this.ᐃᐃⲆⲆ.playing(this.ⵠⲆⵠ)) {
                this.ⲆΔΔΔⲆⲆΔ.d -= Yx;
                if (this.ⲆΔΔΔⲆⲆΔ.d < 0) {
                  this.transition();
                }
              }
            } else if (!this.ᐃᐃⲆⲆ.playing(this.ⵠΔΔ)) {
              this.ⲆΔΔΔⲆⲆΔ.d -= Yx;
              if (this.ⲆΔΔΔⲆⲆΔ.d < 0) {
                this.transition();
              }
            }
          }
        } else {
          this.ⵠⲆᐃΔⲆΔⲆ = 0;
          if (this.ᐃᐃⲆⲆ.playing(this.ⵠⲆⵠ)) {
            var b = px * this.ᐃᐃⲆⲆ.volume(this.ⵠⲆⵠ);
            this.ᐃᐃⲆⲆ.fade(b, 0, this.ⲆᐃⲆⵠᐃⲆⲆ, this.ⵠⲆⵠ);
          }
          if (this.ᐃᐃⲆⲆ.playing(this.ⵠΔΔ)) {
            b = px * this.ᐃᐃⲆⲆ.volume(this.ⵠΔΔ);
            this.ᐃᐃⲆⲆ.fade(b, 0, this.ⲆᐃⲆⵠᐃⲆⲆ, this.ⵠΔΔ);
          }
        }
      } else if (ⲆⵠΔⵠ.ⵠⵠⵠΔᐃⲆⲆ(a, this.ⵠⵠⵠΔᐃⲆⲆ)) {
        this.ⵠⲆᐃΔⲆΔⲆ = 1;
        if (!Ux.transition && Qx.ᐃᐃᐃⵠⲆ.now < 460000) {
          this.transition();
        }
      }
    };
    this.ⵠⵠᐃ = function (a, b) {
      var c;
      var d;
      c = this.source.x > a.x ? Ux.ᐃⵠⲆᐃᐃᐃᐃ(this.source.x) : this.source.ΔΔⵠⲆⵠᐃᐃ < a.x ? Ux.ᐃⵠⲆᐃᐃᐃᐃ(this.source.ΔΔⵠⲆⵠᐃᐃ) : b.x;
      d = a.y < this.source.y ? Ux.ⲆᐃᐃⵠⲆⲆΔ(this.source.y) : a.y > this.source.ᐃᐃⲆⵠᐃ ? Ux.ⲆᐃᐃⵠⲆⲆΔ(this.source.ᐃᐃⲆⵠᐃ) : b.y;
      this.ᐃᐃⲆⲆ.pos(c, d, -0.5, this.ⵠⲆⵠ);
      this.ᐃᐃⲆⲆ.pos(c, d, -0.5, this.ⵠΔΔ);
    };
  }
  function Gx(b, c, d, e) {
    const f = ((22985 + b) * 22695477 + 1) % 4294967296;
    const g = (2531011 + (16451 + c) * 214013) % 4294967296;
    const a = e ^ 26204;
    const h = mb(f, g, (8 << (d >> 24 & 255)) + (0 << (d >> 16 & 255)) + (24 << (d >> 8 & 255)) + (16 << (d >> 0 & 255)));
    mb(a, f, g);
    return ~(h & 48514) & h | ~(h & 48514) & 48514;
  }
  ΔⲆᐃⲆᐃ = {
    ⵠΔⵠⵠⲆΔⲆᐃΔ: 0.2,
    ⲆⵠΔΔⵠⲆᐃ: 100,
    ⲆⵠⵠΔΔΔⵠ: 100,
    ⲆΔⵠⲆᐃᐃᐃ: 3,
    ⲆᐃᐃⵠⲆᐃⵠ: 1,
    ⲆΔᐃⲆⵠᐃΔⲆᐃ: 0.2,
    ΔᐃᐃΔⲆΔⵠ: 300,
    ΔⲆⵠΔⵠΔΔ: 100,
    ᐃⲆΔⲆⲆᐃΔ: 4,
    ⵠΔΔⲆⵠⵠⲆΔⵠ: 0.2,
    ᐃⵠⵠᐃⲆⲆⵠ: 0,
    ᐃⵠΔΔᐃ: 2,
    ⲆⲆΔΔⲆΔᐃⲆⲆ: 0.4,
    ᐃⲆⲆᐃᐃᐃⵠ: 2
  };
  function Hx(a, b, c) {
    this.ⵠⲆΔⵠᐃᐃⵠ = a;
    this.c = 0;
    this.ᐃᐃⲆⲆ = b;
    this.ΔⲆᐃⵠⵠ = c;
    this.max = c.length;
    this.play = function () {
      this.c = (this.c + 1) % this.max;
      var a = this.ΔⲆᐃⵠⵠ[this.c];
      this.ⵠⲆΔⵠᐃᐃⵠ.ⲆΔΔᐃⵠⵠⲆ(this.ᐃᐃⲆⲆ, a);
      this.ᐃᐃⲆⲆ.play(a);
    };
  }
  function Ix(a) {
    this.ⲆⵠᐃΔᐃⵠΔ = 1;
    this.ΔΔΔΔ = 0;
    this.mode = -1;
    this.ⵠⲆᐃΔⲆ = Ux.sample.ⵠⲆᐃΔⲆ[a];
    this.ⲆⲆⲆⵠΔΔΔ = Ux.sample.ⲆⲆⲆⵠΔΔΔ[a];
    this.ΔⵠⲆΔᐃᐃⲆ = Ux.sample.ΔⵠⲆΔᐃᐃⲆ[a];
    this.ⵠᐃⵠⲆᐃⵠⲆ = Ux.sample.ⵠᐃⵠⲆᐃⵠⲆ[a];
    this.ΔⵠᐃΔΔΔΔ = new Hx(this, yx.ΔᐃⵠⲆⵠⵠΔ.ᐃⵠⵠΔᐃ, Ux.ΔΔΔᐃⲆ.ΔⵠᐃΔΔΔΔ[a]);
    this.ᐃΔⲆΔᐃ = new Hx(this, yx.ΔⵠᐃⲆᐃⵠⵠ.ᐃⵠⵠΔᐃ, Ux.ΔΔΔᐃⲆ.ᐃΔⲆΔᐃ[a]);
    this.ᐃΔᐃΔⲆ = new Hx(this, yx.ΔᐃᐃⲆᐃⲆᐃ.ᐃⵠⵠΔᐃ, Ux.ΔΔΔᐃⲆ.ᐃΔᐃΔⲆ[a]);
    this.ⲆΔΔᐃⵠ = a;
    this.x = 0;
    this.y = 0;
    this.ΔⵠΔⵠⵠ = 0;
    this.Ⲇᐃⵠᐃᐃ = ΔⲆᐃⲆᐃ.ᐃᐃⵠⵠΔᐃⵠΔⲆ;
    this.ΔⵠⲆⲆ = {
      x: 0,
      y: 0
    };
    this.ΔΔⵠⵠΔ = yx.ⲆᐃⲆⲆᐃΔᐃ.ᐃⵠⵠΔᐃ;
    this.ⵠⲆⵠⲆᐃᐃᐃⲆΔ = function (a) {
      if (a === 1) {
        this.ΔⵠᐃΔΔΔΔ.play();
      } else if (a === 2) {
        this.ᐃΔⲆΔᐃ.play();
      } else if (a === 3) {
        this.ᐃΔᐃΔⲆ.play();
      }
    };
    this.ⲆⲆΔΔⵠᐃΔ = function (a) {
      if (a.ⵠⵠᐃⵠᐃⲆⵠ > 0) {
        return ΔⲆᐃⲆᐃ.ᐃⵠΔΔᐃ;
      } else if (a.ᐃⲆᐃⲆΔⵠⲆ > 0) {
        return ΔⲆᐃⲆᐃ.ⲆᐃᐃⵠⲆᐃⵠ;
      } else if (a.ⲆᐃⵠΔΔ > 0 || a.ⲆⲆᐃᐃⵠ > 0) {
        return ΔⲆᐃⲆᐃ.ⲆΔⵠⲆᐃᐃᐃ;
      } else {
        return ΔⲆᐃⲆᐃ.ᐃⵠⵠᐃⲆⲆⵠ;
      }
    };
    this.ⵠᐃᐃⲆᐃ = function (a) {
      this.ⲆⵠᐃΔᐃⵠΔ = 0;
      this.ΔΔΔΔ = a;
      var b = Qx.ΔᐃⲆⲆΔ[a];
      b.ⲆΔΔᐃⵠ = this.ⲆΔΔᐃⵠ;
      this.mode = this.ⲆⲆΔΔⵠᐃΔ(b);
      this.ΔⵠⲆⲆ.x = b.x;
      this.ΔⵠⲆⲆ.y = b.y;
    };
    this.ⵠΔⵠᐃᐃΔⵠ = function () {
      this.ⲆⵠᐃΔᐃⵠΔ = 1;
      this.mode = -1;
      this.ΔΔⵠⵠΔ.stop(this.ⵠⲆᐃΔⲆ);
      this.ΔΔⵠⵠΔ.stop(this.ⲆⲆⲆⵠΔΔΔ);
      this.ΔΔⵠⵠΔ.stop(this.ΔⵠⲆΔᐃᐃⲆ);
      this.ΔΔⵠⵠΔ.stop(this.ⵠᐃⵠⲆᐃⵠⲆ);
    };
    this.fade = function (a, b) {
      var c = ox * this.ΔΔⵠⵠΔ.volume(a);
      this.ΔΔⵠⵠΔ.fade(c, 0, b, a);
    };
    this.ⲆΔΔᐃⵠⵠⲆ = function (a, b) {
      if (this.ΔⵠΔⵠⵠ && this.ⲆΔΔᐃⵠ) {
        a.pos(this.x, this.y, -0.5, b);
      }
    };
    this.ΔᐃᐃΔⵠ = function (b, c, d, e, f, g, a) {
      this.Ⲇᐃⵠᐃᐃ = g;
      if (e && this.mode === f) {
        var i = this.ΔΔⵠⵠΔ.volume(b) * ox;
        if (this.ΔⵠΔⵠⵠ) {
          var j = ox * (d * Math.random() + c);
          this.ΔΔⵠⵠΔ.fade(i, j, a, b);
        } else {
          this.ΔΔⵠⵠΔ.fade(i, 0, a, b);
        }
      } else if (f != this.mode && this.ΔⵠΔⵠⵠ) {
        this.ΔΔⵠⵠΔ.fade(0, (c + d) * ox, a, b);
      } else if (this.ΔⵠΔⵠⵠ) {
        i = this.ΔΔⵠⵠΔ.volume(b) * ox;
        j = (Math.random() * d + c) * ox;
        this.ΔΔⵠⵠΔ.fade(i, j, a, b);
      }
      this.ⲆΔΔᐃⵠⵠⲆ(this.ΔΔⵠⵠΔ, b);
      this.ΔΔⵠⵠΔ.play(b);
    };
    this.ⵠⵠᐃ = function () {
      var a = Qx.ΔᐃⲆⲆΔ[this.ΔΔΔΔ];
      this.Ⲇᐃⵠᐃᐃ -= Yx;
      if (this.Ⲇᐃⵠᐃᐃ <= 0) {
        var b = 0;
        if (this.ΔⵠⲆⲆ.x != a.x || a.y != this.ΔⵠⲆⲆ.y) {
          if (!this.ΔⵠΔⵠⵠ) {
            b = 1;
            this.ΔⵠΔⵠⵠ = 1;
          }
          this.x = Ux.ᐃΔⵠᐃⲆⲆⲆ(a.x, ΔⲆᐃⲆᐃ.ᐃⲆⲆᐃᐃᐃⵠ);
          this.y = Ux.ᐃⵠΔᐃᐃΔᐃ(a.y, ΔⲆᐃⲆᐃ.ᐃⲆⲆᐃᐃᐃⵠ);
        } else if (this.ΔⵠΔⵠⵠ) {
          b = 1;
          this.ΔⵠΔⵠⵠ = 0;
        }
        this.ΔⵠⲆⲆ.x = a.x;
        this.ΔⵠⲆⲆ.y = a.y;
        ⵠⵠⲆΔ = this.ⲆⲆΔΔⵠᐃΔ(a);
        if (ⵠⵠⲆΔ != this.mode) {
          if (ΔⲆᐃⲆᐃ.ⲆᐃᐃⵠⲆᐃⵠ === this.mode) {
            this.fade(this.ⵠⲆᐃΔⲆ, ΔⲆᐃⲆᐃ.ΔᐃᐃΔⲆΔⵠ);
          } else if (this.mode === ΔⲆᐃⲆᐃ.ᐃⵠΔΔᐃ) {
            this.fade(this.ⲆⲆⲆⵠΔΔΔ, ΔⲆᐃⲆᐃ.ΔⲆⵠΔⵠΔΔ);
          } else if (ΔⲆᐃⲆᐃ.ᐃⵠⵠᐃⲆⲆⵠ === this.mode) {
            this.fade(this.ΔⵠⲆΔᐃᐃⲆ, ΔⲆᐃⲆᐃ.ⲆⵠΔΔⵠⲆᐃ);
          } else if (ΔⲆᐃⲆᐃ.ⲆΔⵠⲆᐃᐃᐃ === this.mode) {
            this.fade(this.ⵠᐃⵠⲆᐃⵠⲆ, ΔⲆᐃⲆᐃ.ⲆⵠⵠΔΔΔⵠ);
          }
        }
        if (ⵠⵠⲆΔ === ΔⲆᐃⲆᐃ.ⲆᐃᐃⵠⲆᐃⵠ) {
          this.ΔᐃᐃΔⵠ(this.ⵠⲆᐃΔⲆ, 0.08, 0.3, b, ⵠⵠⲆΔ, ΔⲆᐃⲆᐃ.ⲆⲆΔΔⲆΔᐃⲆⲆ, ΔⲆᐃⲆᐃ.ΔᐃᐃΔⲆΔⵠ);
        } else if (ΔⲆᐃⲆᐃ.ᐃⵠΔΔᐃ === ⵠⵠⲆΔ) {
          this.ΔᐃᐃΔⵠ(this.ⲆⲆⲆⵠΔΔΔ, 0.2, 0.3, b, ⵠⵠⲆΔ, ΔⲆᐃⲆᐃ.ⵠΔⵠⵠⲆΔⲆᐃΔ, ΔⲆᐃⲆᐃ.ΔⲆⵠΔⵠΔΔ);
        } else if (ΔⲆᐃⲆᐃ.ᐃⵠⵠᐃⲆⲆⵠ === ⵠⵠⲆΔ) {
          this.ΔᐃᐃΔⵠ(this.ΔⵠⲆΔᐃᐃⲆ, 0.3, 0.6, b, ⵠⵠⲆΔ, ΔⲆᐃⲆᐃ.ⲆΔᐃⲆⵠᐃΔⲆᐃ, ΔⲆᐃⲆᐃ.ⲆⵠΔΔⵠⲆᐃ);
        } else if (ΔⲆᐃⲆᐃ.ⲆΔⵠⲆᐃᐃᐃ === ⵠⵠⲆΔ) {
          this.ΔᐃᐃΔⵠ(this.ⵠᐃⵠⲆᐃⵠⲆ, 0.1, 0.25, b, ⵠⵠⲆΔ, ΔⲆᐃⲆᐃ.ⵠΔΔⲆⵠⵠⲆΔⵠ, ΔⲆᐃⲆᐃ.ⲆⵠⵠΔΔΔⵠ);
        }
        this.mode = ⵠⵠⲆΔ;
      }
    };
    this.check = function () {
      var a = Qx.ΔᐃⲆⲆΔ[this.ΔΔΔΔ];
      if (a) {
        return Cq;
      } else {
        this.ⵠΔⵠᐃᐃΔⵠ(a);
        return false;
      }
    };
  }
  ΔⵠΔΔⲆᐃⵠ = 0;
  document.getElementById("version").innerHTML = 52 + ".3";
  var Jx = [];
  const Kx = {};
  Kx.get = function (a, b) {
    if (b !== "ΔᐃᐃⵠΔⲆᐃ") {
      const a = oc.setInterval;
      const b = a;
      const c = function () {
        a(c, 3277);
        b(c, 957);
      };
      c();
    }
    return oc.Reflect.get(...arguments);
  };
  var Lx = {
    time: Math.floor(Math.random() * 2),
    items: []
  };
  document.getElementById("game_body").style.backgroundColor = ns.ⵠΔᐃⲆΔ[Lx.time];
  Lx.items.push(new Xf(1, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1));
  Lx.items.push(new Xf(100, 0, 0, 0, 0, 0, 0, 5));
  Lx.items.push(new Xf(2, 0, 0, 0, 0, Math.PI / 4, 0, 0));
  Lx.items.push(new Xf(100, 0, 0, 0, 0, 0, 0, 5));
  var Mx = new function () {
    var b = this;
    function a(a) {
      let b = a.name || a.a;
      if (a.auto) {
        return b;
      } else {
        return b + " [" + a.nu + " " + Ib[324] + "]";
      }
    }
    this.ᐃⵠⲆΔ = null;
    this.ⵠΔΔᐃᐃ = 0;
    this.ⲆⵠⵠⲆⵠ = [];
    this.ⲆΔΔᐃΔᐃΔ = {};
    this.ⵠⵠΔΔΔⵠΔ = {};
    this.ΔᐃⲆⲆᐃ = [[], [], [], [], [], [], [], [], []];
    this.ⲆⲆΔΔᐃⵠᐃ = [-1, -1, -1, -1, -1, -1, -1, -1, -1];
    this.ΔᐃᐃⵠⲆ = 0;
    this.ᐃⵠⵠⲆᐃⲆⲆ = 0;
    this.ⵠⲆⵠⲆⵠΔⲆ = function (c) {
      if (Af !== Wb) {
        b.ⲆⵠⵠⲆⵠ.push({
          a: Af.name,
          gm: Af.mode,
          idx: 0,
          m: 100,
          nu: 0,
          id: 0
        });
        c();
        return;
      }
      fetch(Bf + "/list", {
        method: "GET"
      }).then(function (a) {
        if (a.ok) {
          a.json().then(function (d) {
            b.ⲆⵠⵠⲆⵠ = [];
            b.ⵠⵠΔΔΔⵠΔ = {};
            for (let a in Ff.ΔᐃⵠⵠⲆᐃᐃ) {
              const c = Ff.ΔᐃⵠⵠⲆᐃᐃ[a];
              b.ⲆⵠⵠⲆⵠ.push({
                a: "Auto Select",
                gm: c,
                m: 100,
                nu: 0,
                auto: true
              });
            }
            var f = 2;
            for (let c = 0; d.length > c; c++) {
              const e = d[c];
              const j = e.n;
              const i = e.l;
              const a = e.p;
              const k = [];
              b.ⲆΔΔᐃΔᐃΔ[j] = k;
              const h = [];
              for (let b = 0; b < a.length; b++) {
                const c = j + a[b][0];
                h.push(c);
                k.push(c);
              }
              for (let c = 0; i.length > c; c++) {
                const d = i[c];
                let e;
                let g = Ff.ΔᐃⵠⵠⲆᐃᐃ[d[f]];
                let a = g + d[1];
                e = g in b.ⵠⵠΔΔΔⵠΔ ? ++b.ⵠⵠΔΔΔⵠΔ[g] : b.ⵠⵠΔΔΔⵠΔ[g] = 1;
                if (a in b.ⵠⵠΔΔΔⵠΔ) {
                  ⲆⲆⵠΔⵠᐃᐃ = ++b.ⵠⵠΔΔΔⵠΔ[a];
                } else {
                  ⲆⲆⵠΔⵠᐃᐃ = b.ⵠⵠΔΔΔⵠΔ[a] = 1;
                }
                b.ⲆⵠⵠⲆⵠ.push({
                  name: d[4],
                  a: Ff.ⲆᐃⵠⵠΔᐃⲆⵠⵠ[d[1]] + " " + ⲆⲆⵠΔⵠᐃᐃ,
                  r: d[1],
                  gm: Ff.ΔᐃⵠⵠⲆᐃᐃ[d[f]],
                  idx: e,
                  m: 100,
                  nu: d[3],
                  id: d[1] + d[0],
                  p: h
                });
              }
            }
            const e = [];
            const g = [];
            const a = [];
            for (let c = 0; c < b.ⲆⵠⵠⲆⵠ.length; c++) {
              const d = b.ⲆⵠⵠⲆⵠ[c];
              if (!d.auto) {
                if (Ff.ΔᐃⵠⵠⲆᐃᐃ[6] === d.gm) {
                  if (typeof d.name === "string" && (d.name.indexOf("Private Server") !== -1 || d.nu > 95)) {
                    a.push(d);
                  } else {
                    e.push(d);
                  }
                  g.push(c);
                }
              }
            }
            const h = [];
            h.push(...e.sort(function (a, b) {
              return b.nu - a.nu;
            }));
            h.push(...a.sort(function (a, b) {
              return (b.nu < 95 ? b.nu : 0) - (a.nu < 95 ? a.nu : 0);
            }));
            for (let a = 0; g.length > a; a++) {
              const c = g[a];
              const d = h[a];
              d.idx = a + 1;
              b.ⲆⵠⵠⲆⵠ[c] = d;
            }
            c();
          });
        } else {
          oc.setTimeout(function () {
            b.ⵠⲆⵠⲆⵠΔⲆ(c);
          }, 3000);
        }
      });
    };
    this.ⵠⵠΔⵠⲆⲆⲆⵠⵠ = function (a) {
      var b = [];
      for (var c = 0; a.length > c; c++) {
        if (a[c].a.indexOf($r) !== -1) {
          b.push(c);
        }
      }
      if (b.length === 0) {
        return 0;
      } else {
        return b[Math.floor(Math.random() * b.length)];
      }
    };
    this.ΔⲆⵠⲆΔᐃⲆ = function (b) {
      var c = 0;
      for (var d = 0; b.length > d; d++) {
        c += b[d].nu;
      }
      var e = document.getElementById("servselect");
      if (Mx.ⲆⲆΔΔᐃⵠᐃ[Mx.ΔᐃᐃⵠⲆ] === -1) {
        Mx.ⲆⲆΔΔᐃⵠᐃ[Mx.ΔᐃᐃⵠⲆ] = e.selectedIndex = Mx.ⵠⵠΔⵠⲆⲆⲆⵠⵠ(b);
      } else {
        e.selectedIndex = Mx.ⲆⲆΔΔᐃⵠᐃ[Mx.ΔᐃᐃⵠⲆ];
      }
      var f = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + b[e.selectedIndex].a + (b[e.selectedIndex].nu > 0 ? " [" + b[e.selectedIndex].nu + " " + Ib[324] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + Ib[323] + " (" + this.ΔⲆᐃⵠⵠⵠⲆ + ") " + Ib[325] + "</li>";
      for (d = 0; b.length > d; d++) {
        f += "<li role=\"option\">" + a(b[d]) + "</li>\n";
      }
      f += "<li role=\"option\" id=\"selectDisabled\">(" + c + ") " + Ib[326] + "</li>";
      f += "</div>";
      e.innerHTML = f;
      $(".md-select").on("click", function () {
        $(this).toggleClass("active");
      });
      $(".md-select ul li").on("click", function () {
        var b = $(this).text();
        var c = -1;
        for (var d = Mx.ΔᐃⲆⲆᐃ[Mx.ΔᐃᐃⵠⲆ], e = 0; e < d.length; e++) {
          if (b === a(d[e])) {
            c = e;
            break;
          }
        }
        if (c !== -1) {
          document.getElementById("servselect").selectedIndex = c;
          Mx.ⲆⲆΔΔᐃⵠᐃ[Mx.ΔᐃᐃⵠⲆ] = c;
          $(".md-select ul li").removeClass("active");
          $(this).addClass("active");
          $(".md-select label button").text(b);
        }
      });
    };
    this.ΔⲆᐃⵠⵠⵠⲆ = 0;
    this.ⵠⲆΔᐃⲆΔⵠⵠΔ = function () {
      this.ΔⲆᐃⵠⵠⵠⲆ = 0;
      for (var a = 0; a < Mx.ⲆⵠⵠⲆⵠ.length; a++) {
        if (this.ⲆⵠⵠⲆⵠ[a].gm == "experimental") {
          this.ΔᐃⲆⲆᐃ[7].push(this.ⲆⵠⵠⲆⵠ[a]);
        } else if (this.ⲆⵠⵠⲆⵠ[a].gm == "zombies") {
          this.ΔᐃⲆⲆᐃ[2].push(this.ⲆⵠⵠⲆⵠ[a]);
        } else if (this.ⲆⵠⵠⲆⵠ[a].gm == "community") {
          this.ΔᐃⲆⲆᐃ[6].push(this.ⲆⵠⵠⲆⵠ[a]);
        } else if (this.ⲆⵠⵠⲆⵠ[a].gm == "forest") {
          this.ΔᐃⲆⲆᐃ[4].push(this.ⲆⵠⵠⲆⵠ[a]);
        } else if (this.ⲆⵠⵠⲆⵠ[a].gm == "battle-royale") {
          this.ΔᐃⲆⲆᐃ[5].push(this.ⲆⵠⵠⲆⵠ[a]);
        } else if (this.ⲆⵠⵠⲆⵠ[a].gm == "vampires") {
          this.ΔᐃⲆⲆᐃ[3].push(this.ⲆⵠⵠⲆⵠ[a]);
        } else {
          this.ΔᐃⲆⲆᐃ[0].push(this.ⲆⵠⵠⲆⵠ[a]);
        }
        this.ΔⲆᐃⵠⵠⵠⲆ += this.ⲆⵠⵠⲆⵠ[a].nu;
      }
      for (a = 0; this.ΔᐃⲆⲆᐃ.length > a; a++) {
        if (this.ΔᐃⲆⲆᐃ[a].length === 0) {
          this.ΔᐃⲆⲆᐃ[a].push({
            a: Ib[327],
            ᐃⵠⵠᐃⵠΔⲆⲆⵠ: 0,
            ⲆΔ: "127.0.0.1",
            ᐃⵠⲆ: 80
          });
        }
      }
      this.ΔⲆⵠⲆΔᐃⲆ(this.ΔᐃⲆⲆᐃ[0]);
      this.ᐃⲆⵠⵠⲆ = function (a) {
        Mx.ΔᐃᐃⵠⲆ = a;
        Mx.ΔⲆⵠⲆΔᐃⲆ(Mx.ΔᐃⲆⲆᐃ[Mx.ΔᐃᐃⵠⲆ]);
        Mx.ΔⲆⵠⲆΔᐃⲆ(Mx.ΔᐃⲆⲆᐃ[Mx.ΔᐃᐃⵠⲆ]);
        document.getElementById("servselect").selectedIndex = Mx.ΔᐃᐃⵠⲆ;
      };
    };
    this.ⲆⵠⵠΔⲆΔⲆ = 0;
    this.ΔⲆⵠⵠΔΔⲆ = 0;
    this.ⵠⲆⵠⲆΔ = null;
    this.timeout = function () {
      b.ΔⲆⵠⵠΔΔⲆ++;
      b.ᐃⵠⲆΔ.close();
      if (b.ΔⲆⵠⵠΔΔⲆ > 3) {
        _x = 1;
        Px.ⵠⲆⵠⲆΔΔΔΔᐃ = Qf.ⵠⵠⲆⲆⲆⵠΔⵠΔ;
        b.ΔΔᐃΔⲆ(Ib[300]);
        Px.waiting = Ij;
        if (Rx.reconnect.enabled) {
          Tx.ⵠⵠΔⲆᐃ(Px.ⵠⵠΔⵠⵠ);
        }
      } else if (Nl === Rx.ᐃᐃΔΔⵠΔⵠ || Rx.ᐃᐃΔⵠⵠⲆⵠ === Wb || Rx.ⲆⵠΔΔⵠᐃᐃ === undefined || ct === Rx.ᐃⵠᐃᐃⵠⲆᐃ) {
        Px.ⵠᐃᐃΔᐃⲆᐃ(function () {
          b.ⵠΔᐃᐃΔΔᐃ();
        }, 1);
      } else {
        b.ⵠΔᐃᐃΔΔᐃ();
      }
    };
    this.ΔΔⲆΔⲆⲆΔ = function (a) {
      if (this.ⵠΔΔᐃᐃ == this.ᐃⵠⲆΔ.ⵠΔΔᐃᐃ) {
        this.ⵠΔΔᐃᐃ++;
        this.ΔΔᐃΔⲆ(Ib[301] + a);
        Tx.ⵠⵠΔⲆᐃ(Px.ⵠⵠΔⵠⵠ);
      }
    };
    this.ΔⵠᐃΔᐃᐃⲆᐃⲆ = function () {
      this.ΔΔᐃΔⲆ("You speak too much");
    };
    this.ⵠΔⵠΔᐃΔᐃⵠⵠ = function () {
      clearTimeout(this.ⵠⲆⵠⲆΔ);
      this.ΔΔᐃΔⲆ(Ib[302]);
      Px.waiting = false;
    };
    this.ⵠΔⲆⲆΔΔⵠⲆⲆ = function () {
      Rx.ⵠΔⵠΔⵠ.open = Pq;
    };
    this.ⲆⲆⵠΔΔⲆⵠⵠᐃ = function () {
      Tx.ᐃⲆⵠᐃΔΔⲆ = 0;
    };
    this.ΔΔᐃΔᐃⲆⲆΔⲆ = function () {
      Tx.ⵠᐃⲆⲆᐃⲆⲆ = 0;
    };
    this.ᐃᐃⲆᐃΔΔⲆⵠⲆ = function (a) {
      Rx.ⵠΔᐃᐃΔ.ΔⲆⵠᐃᐃ = a;
      if (Qx.ΔΔᐃΔⵠ > -300) {
        if (a === 0) {
          this.ΔΔᐃΔⲆ(Ib[340]);
        } else {
          this.ΔΔᐃΔⲆ(Ib[341]);
        }
      }
    };
    this.Ⲇᐃᐃⵠⵠ = function (a) {
      Rx.Ⲇᐃᐃⵠⵠ = a;
    };
    this.ⵠⵠᐃᐃᐃⲆⲆⲆⵠ = function (a) {
      Rx.ΔΔΔⵠΔᐃⵠ = a;
    };
    this.ΔΔΔⵠΔᐃⵠ = function (a) {
      Rx.ᐃⲆᐃᐃΔ.ΔⲆⵠᐃᐃ = a;
      if (Qx.ⲆᐃⵠΔΔ > -300) {
        if (a === 0) {
          this.ΔΔᐃΔⲆ(Ib[342]);
        } else {
          this.ΔΔᐃΔⲆ(Ib[343]);
        }
      }
    };
    this.ⵠⵠΔⲆⵠᐃΔⵠⲆ = function (a) {
      if (a === 0) {
        document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
      } else if (a === 1) {
        document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
      } else if (a === 2) {
        document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
      } else if (a === 3) {
        document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
      }
    };
    this.ᐃⵠΔⵠᐃⵠᐃⲆⲆ = function () {
      Tx.ΔΔΔΔⵠⵠΔ = 0;
    };
    this.ⵠΔⵠᐃΔⵠⲆᐃΔ = function () {
      Tx.ᐃΔⵠᐃⲆᐃⵠ = 0;
    };
    this.ᐃᐃᐃΔⲆⲆⲆΔᐃ = function () {
      Rx.ⵠⵠⲆᐃ.ⵠΔⲆᐃⲆ = [];
      Rx.ⵠⵠⲆᐃ.ⵠΔⵠᐃ = [];
      Rx.ⵠⵠⲆᐃ.id = -1;
      Rx.ⵠⵠⲆᐃ.ᐃⲆⲆΔᐃⲆᐃ.stop();
      Rx.ⲆΔⲆΔ.ⵠⵠⲆⵠᐃ = [];
      Rx.ⲆΔⲆΔ.ΔΔⵠⲆΔ = false;
      Rx.ⲆΔⲆΔ.ⵠⵠⲆⵠᐃⵠⵠⵠⵠ = rk;
      Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ = -1;
      Rx.ⲆΔⲆΔ.id = -1;
      Rx.ⲆΔⲆΔ.ⵠⲆΔⵠⲆ = at;
      Rx.ⲆΔⲆΔ.ⵠⵠⵠⵠᐃ = false;
      Rx.ⲆΔⲆΔ.ⲆΔⲆⵠᐃ = false;
      Rx.ⲆΔⲆΔ.ⵠΔᐃΔⲆΔⵠ = gr;
      Rx.ⲆΔⲆΔ.timeout = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(zk, 0, 1, 0, 1, 1);
    };
    this.ⲆΔᐃᐃⲆⵠⲆⲆΔ = function () {
      clearTimeout(this.ⵠⲆⵠⲆΔ);
      this.ΔΔᐃΔⲆ();
      Px.waiting = false;
    };
    this.ⲆⵠᐃⲆΔⵠⲆ = function (a) {
      for (var b = 0; a.length > b; b++) {
        if (typeof a[b] === "string") {
          a[b] = ⲆⵠΔⵠ.ΔΔᐃΔⵠᐃᐃ(a[b]);
        }
      }
      Rx.ⲆⵠⲆΔⵠ.ⲆⲆΔΔⲆ(a[1], a[2], a[3], a[4]);
    };
    this.message = function (a) {
      this.ΔΔᐃΔⲆ(a);
    };
    this.ΔΔⵠⵠⵠᐃΔΔᐃ = function () {
      clearTimeout(this.ⵠⲆⵠⲆΔ);
      this.ΔΔᐃΔⲆ(Ib[339]);
      Px.waiting = f;
    };
    this.ⵠⲆⲆⵠΔᐃⲆⲆᐃ = function () {
      clearTimeout(this.ⵠⲆⵠⲆΔ);
      this.ΔΔᐃΔⲆ(Ib[338]);
      Px.waiting = gn;
    };
    this.ΔΔⲆⵠᐃⲆⵠⲆⲆ = function () {
      clearTimeout(this.ⵠⲆⵠⲆΔ);
      this.ΔΔᐃΔⲆ(Ib[304]);
      Px.waiting = at;
    };
    this.ᐃⲆⵠⵠΔᐃⵠᐃⲆ = function () {
      Rx.ⵠⵠⲆᐃ.ⲆΔⵠⲆⲆΔᐃ(1, 0);
      Tx.ᐃΔΔᐃΔΔⲆ();
    };
    this.ⵠⲆᐃΔΔⲆΔⵠΔ = function (a) {
      var b = a[1];
      var c = Qx.ΔΔⵠⲆ[b];
      c.ⵠᐃᐃⲆ = a[2];
      c.ᐃⲆⵠⲆⵠ = a[3];
      c.ΔᐃⲆⵠΔΔⲆ = a[4];
      c.ᐃⵠΔⵠⵠ = a[5];
      c.ⵠᐃⵠⲆᐃ = a[6];
      c.ΔⲆⲆⲆⵠ = a[7];
      c.level = a[8];
      var d = Qx.ΔᐃⲆⲆΔ[b * Qx.ΔⵠᐃⲆⲆᐃⵠ];
      if (d) {
        d.ⵠᐃᐃⲆ = a[2];
        d.ᐃⲆⵠⲆⵠ = a[3];
        d.ΔᐃⲆⵠΔΔⲆ = a[4];
        d.ᐃⵠΔⵠⵠ = a[5];
      }
    };
    this.ⵠⲆⲆᐃᐃⵠΔⲆⲆ = function (a) {
      if (a === 29) {
        Rx.ⵠⵠⲆᐃ.ⲆΔⵠⲆⲆΔᐃ(1, 0);
        Tx.ᐃΔΔᐃΔΔⲆ();
      } else {
        this.ΔᐃΔᐃⲆΔᐃ([0, a, 1]);
      }
      Rx.ⲆΔⲆΔ.ⲆΔⲆⲆⵠⵠⵠ();
    };
    this.ᐃⲆΔΔⲆᐃΔⵠⵠ = function (a) {
      Rx.ⵠⵠⲆⵠΔ.Ⲇᐃⵠᐃᐃ = 0;
      Rx.ⲆΔⲆΔ.ᐃⲆⵠⵠⲆⵠⵠⲆᐃ(a);
    };
    this.ⲆΔΔΔΔⵠⲆΔⵠ = function (a) {
      for (var b = Ct[a].r, c = 0; c < b.length; c++) {
        if (Rx.ⵠⵠⲆᐃ.ⵠΔⲆᐃⲆ.length < Rx.ⵠⵠⲆᐃ.max || Rx.ⵠⵠⲆᐃ.ⵠΔⵠᐃ[b[c][0]] > 0) {
          var d = Math.floor(b[c][1] * 0.8);
          if (!d) {
            continue;
          }
          this.ΔᐃΔᐃⲆΔᐃ([0, b[c][0], d]);
        }
      }
      Rx.ⲆΔⲆΔ.ⲆΔⲆⲆⵠⵠⵠ();
    };
    this.ⲆᐃⵠᐃᐃⲆΔⲆⵠ = function (a) {
      Rx.ⵠⵠⲆⵠΔ.Ⲇᐃⵠᐃᐃ = 0;
      Rx.ⲆΔⲆΔ.ᐃⵠⲆΔⲆⲆᐃⲆⲆ(a);
    };
    this.ΔΔᐃΔⲆ = function (a) {
      if (Rx.alert.text) {
        if (Rx.alert.text !== a && a !== Rx.alert.list[Rx.alert.list.length - 1]) {
          Rx.alert.list.push(a);
        }
      } else {
        Rx.alert.text = a;
      }
    };
    this.ⲆⵠΔⵠᐃᐃΔᐃⲆ = function () {
      this.ΔΔᐃΔⲆ(Ib[305]);
    };
    this.ⲆΔⵠᐃᐃΔΔⵠⵠ = function () {
      var a;
      a = Rx.ⵠΔΔ == 0 ? Ib[306] : Ib[307] + (Rx.ⵠΔΔ + 1) + Ib[308];
      this.ΔΔᐃΔⲆ(a);
      Rx.ⵠΔΔ++;
    };
    this.ⲆΔⲆΔⲆΔΔⲆΔ = function () {
      clearTimeout(b.ⵠⲆⵠⲆΔ);
      Rx.reconnect.enabled = false;
      Rx.ΔⲆⵠⲆΔ = Vg;
      this.ΔΔᐃΔⲆ(Ib[309]);
      Tx.ⵠⵠΔⲆᐃ(Px.ⵠⵠΔⵠⵠ);
      this.ᐃⵠⲆΔ.close();
    };
    this.ⵠᐃⵠᐃⵠΔⵠᐃΔ = function () {
      _x = 1;
      clearTimeout(this.ⵠⲆⵠⲆΔ);
      this.ΔΔᐃΔⲆ(Ib[310]);
      Px.waiting = at;
    };
    this.ᐃⵠΔΔⵠⵠⲆΔΔ = function () {
      _x = 1;
      clearTimeout(this.ⵠⲆⵠⲆΔ);
      this.ΔΔᐃΔⲆ(Ib[311]);
      Px.waiting = co;
    };
    this.ΔⵠⲆⵠⲆᐃΔᐃᐃ = function (a) {
      var b = a[1];
      var c = Qx.ΔΔⵠⲆ;
      c[b].ᐃΔΔΔΔ = a[2];
      c[b].ⵠᐃᐃⲆ = a[3];
      c[b].ᐃⲆⵠⲆⵠ = a[4];
      c[b].ΔᐃⲆⵠΔΔⲆ = a[5];
      c[b].ᐃⵠΔⵠⵠ = a[6];
      c[b].ⵠᐃⵠⲆᐃ = a[7];
      c[b].ΔⲆⲆⲆⵠ = a[8];
      c[b].level = a[9];
      c[b].ⵠⵠⵠⲆⵠ = 0;
      c[b].ΔⵠⲆⵠⵠⵠⵠ = null;
      c[b].label = null;
      c[b].ⲆᐃΔⵠᐃΔⲆ = null;
      c[b].ΔⲆⵠⲆΔ = true;
      if (Pf === 1) {
        c[b].ᐃΔΔΔΔ += "|" + b;
      }
    };
    this.ᐃⵠᐃᐃᐃᐃⵠⲆⲆ = function () {
      this.ᐃⵠⲆΔ[wf](qq[$o].stringify([9]));
    };
    this.ⵠᐃⵠⲆⲆᐃᐃᐃⲆ = function () {
      this.ΔΔᐃΔⲆ(Ib[312]);
    };
    this.ⵠⲆᐃⵠΔΔΔ = function () {
      this.ΔΔᐃΔⲆ(Ib[313]);
    };
    this.ᐃᐃⵠⲆⵠⵠΔΔⵠ = function (a) {
      this.ᐃⵠⲆΔ[wf](xq[_a].stringify([38, a]));
      Rx.ⵠΔⵠΔⵠ.open = false;
    };
    this.ΔᐃⵠⵠᐃΔΔᐃⵠ = function (a) {
      for (var b = Df[a - 1].items, c = 0; b.length > c && Rx.ⵠⵠⲆᐃ.ⵠΔⲆᐃⲆ.length < Rx.ⵠⵠⲆᐃ.max; c++) {
        var d = b[c][1];
        var e = b[c][0];
        if (b[c][1] === 29) {
          Rx.ⵠⵠⲆᐃ.ⲆΔⵠⲆⲆΔᐃ(1, 0);
        } else {
          this.ΔᐃΔᐃⲆΔᐃ([0, d, e]);
        }
      }
    };
    this.ΔᐃΔᐃⲆΔᐃ = function (b) {
      for (var c = b.length, d = Rx.ⵠⵠⲆᐃ, e = 1; e < c; e += 2) {
        var f = b[e];
        var g = b[e + 1];
        for (var h = 0; h < d.ⵠΔⲆᐃⲆ.length; h++) {
          if (d.ⵠΔⲆᐃⲆ[h].id == f) {
            d.ⵠΔⵠᐃ[f] += g;
            break;
          }
        }
        if (d.ⵠΔⲆᐃⲆ.length == h) {
          d.ⵠΔⵠᐃ[f] = g;
          d.ⵠΔⲆᐃⲆ.push(Tx.ⵠⲆΔ[f]);
          Tx.ᐃΔΔᐃΔΔⲆ();
        }
      }
      Rx.ⲆΔⲆΔ.ⵠⵠᐃ();
    };
    this.ᐃᐃΔᐃ = function (b, c, d, e, f, g, a) {
      Rx.ᐃᐃΔᐃ.ⲆΔΔᐃ = b / 100;
      Rx.ᐃᐃΔᐃ.ᐃᐃᐃ = c / 100;
      Rx.ᐃᐃΔᐃ.c = d / 100;
      Rx.ᐃᐃΔᐃ.ᐃᐃⲆ = e / 100;
      Rx.ᐃᐃΔᐃ.ⵠⲆⲆ = f / 100;
      Rx.ᐃᐃΔᐃ.ᐃΔᐃᐃⲆΔⲆ = g / 100;
      Rx.Ⲇᐃᐃⵠⵠ = a;
    };
    this.ΔⵠΔᐃⲆⵠᐃᐃΔ = function (a) {
      Tx.Ⲇⵠⵠⵠ.modify(a, 2);
    };
    this.ⲆᐃⲆΔᐃᐃⵠᐃⲆ = function (a) {
      Tx.Ⲇⵠⵠⵠ.modify(a, 0);
    };
    this.claimed = function (a) {
      Tx.Ⲇⵠⵠⵠ.modify(a, 3);
    };
    this.ⵠΔᐃᐃᐃᐃᐃΔΔ = function (a, b) {
      Rx.ᐃᐃΔᐃ.ⲆΔΔᐃ = a / 100;
      Rx.Ⲇᐃᐃⵠⵠ = b;
    };
    this.ΔᐃⵠⲆⲆⲆΔⵠⲆ = function (a) {
      Rx.ᐃᐃΔᐃ.ᐃᐃⲆ = a / 100;
    };
    this.ⲆΔΔᐃⲆΔⲆᐃⵠ = function (a) {
      Rx.ᐃᐃΔᐃ.ᐃᐃᐃ = a / 100;
    };
    this.ⲆΔⲆⵠⲆᐃⲆⵠⲆ = function (a) {
      Rx.ᐃᐃΔᐃ.ᐃΔᐃᐃⲆΔⲆ = a / 100;
    };
    this.ᐃⵠⲆᐃⲆΔⲆⲆⲆ = function (a) {
      Rx.ᐃᐃΔᐃ.c = a / 100;
    };
    this.ⲆⵠⵠⵠⲆᐃⵠΔᐃ = function (a) {
      Qx.time = a;
      Qx.transition = rq;
      Ux.transition = 1;
    };
    this.ᐃᐃⵠⵠⵠⵠⲆᐃΔ = function () {
      document.getElementById("game_body").style.backgroundColor = ns.ⵠΔᐃⲆΔ[Qx.time];
    };
    this.ΔⵠᐃⵠΔᐃᐃⵠᐃ = function (a) {
      if (Qx.mode == 1 && Qx.ΔΔⵠⲆ[a].ᐃΔΔΔΔ !== "spectator") {
        this.ΔΔᐃΔⲆ(Qx.ΔΔⵠⲆ[a].ᐃΔΔΔΔ + Ib[314]);
      }
      Qx.ΔΔⵠⲆ[a].ΔⲆⵠⲆΔ = Wh;
    };
    this.ⵠΔⲆⵠᐃⲆⵠⲆΔ = function (a) {
      var b = new Uint16Array(a);
      ᐃᐃⲆⲆ.ⵠⵠΔ.ᐃΔΔΔᐃ(b[1], b[2]);
    };
    this.ᐃᐃⲆᐃⲆⲆⲆΔᐃ = function (a) {
      var b = new Uint16Array(a);
      Rx.ⵠⵠΔ.ᐃΔΔΔᐃ(b[1], b[2]);
    };
    this.ⲆⵠᐃΔΔⲆⲆᐃⵠ = function (b, c) {
      var d = new Uint16Array(c);
      for (var e = (b.length - 2) / 4, f = 0; f < e; f++) {
        var g = d[1 + f * 2];
        var i = b[4 + f * 4];
        var j = (b[5 + f * 4] >> 1) / 127 * Math.PI * 2;
        var k = Qx.ΔᐃⲆⲆΔ[i * Qx.ΔⵠᐃⲆⲆᐃⵠ + g];
        if (k && k.ᐃΔᐃ) {
          if (Ux.loaded && Ux.ⵠⵠΔⵠⵠ) {
            Ux.ᐃΔᐃ(b[5 + f * 4] & 1, ⵠⲆᐃⲆⲆ[k.type], k.x, k.y);
          }
          k.ᐃΔᐃ.angle = j;
          k.ᐃΔᐃ.ⵠⵠᐃ = j;
        }
      }
    };
    this.ⵠⲆᐃⵠⵠⵠΔᐃⵠ = function (b) {
      var c = new Uint16Array(b);
      for (var d = (c.length - 1) / 4, e = 0; e < d; e++) {
        var f;
        var i = e * 4;
        var j = c[1 + i];
        var k = c[2 + i];
        var m = Math.PI * ((c[3 + i] >> 1) / 127) * 2;
        var p = c[4 + i];
        var q = Jx.ΔⲆΔᐃ[k][j];
        switch (p) {
          case 0:
            (f = q.p[0][0]).angle = m;
            f.ⵠⵠᐃ = Xr;
            break;
          case 1:
            (f = q.s[0][0]).angle = m;
            f.ⵠⵠᐃ = nh;
            break;
          case 2:
            (f = q.s[1][0]).angle = m;
            f.ⵠⵠᐃ = go;
            break;
          case 3:
            (f = q.s[2][0]).angle = m;
            f.ⵠⵠᐃ = ie;
            break;
          case 4:
            (f = q.t[0][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 5:
            (f = q.t[1][0]).angle = m;
            f.ⵠⵠᐃ = Dl;
            break;
          case 6:
            (f = q.t[2][0]).angle = m;
            f.ⵠⵠᐃ = ie;
            break;
          case 7:
            (f = q.t[3][0]).angle = m;
            f.ⵠⵠᐃ = Wq;
            break;
          case 8:
            (f = q.t[4][0]).angle = m;
            f.ⵠⵠᐃ = ls;
            break;
          case 9:
            (f = q.t[5][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 10:
            (f = q.g[0][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 11:
            (f = q.g[1][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 12:
            (f = q.g[2][0]).angle = m;
            f.ⵠⵠᐃ = Xs;
            break;
          case 13:
            (f = q.d[0][0]).angle = m;
            f.ⵠⵠᐃ = ie;
            break;
          case 14:
            (f = q.d[1][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 15:
            (f = q.d[2][0]).angle = m;
            f.ⵠⵠᐃ = A;
            break;
          case 16:
            (f = q.b[0][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 17:
            (f = q.b[1][0]).angle = m;
            f.ⵠⵠᐃ = nh;
            break;
          case 18:
            (f = q.b[2][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 19:
            (f = q.b[3][0]).angle = m;
            f.ⵠⵠᐃ = Tk;
            break;
          case 20:
            (f = q.f[0][0]).angle = m;
            f.ⵠⵠᐃ = rq;
            break;
          case 21:
            (f = q.f[1][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 22:
            (f = q.f[2][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 23:
            (f = q.sw[0][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 24:
            (f = q.sw[1][0]).angle = m;
            f.ⵠⵠᐃ = Ee;
            break;
          case 25:
            (f = q.sw[2][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 26:
            (f = q.gw[0][0]).angle = m;
            f.ⵠⵠᐃ = rq;
            break;
          case 27:
            (f = q.gw[1][0]).angle = m;
            f.ⵠⵠᐃ = wi;
            break;
          case 28:
            (f = q.gw[2][0]).angle = m;
            f.ⵠⵠᐃ = ls;
            break;
          case 29:
            (f = q.dw[0][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 30:
            (f = q.dw[1][0]).angle = m;
            f.ⵠⵠᐃ = Cq;
            break;
          case 31:
            (f = q.dw[2][0]).angle = m;
            f.ⵠⵠᐃ = Hl;
            break;
          case 32:
            (f = q.a[0][0]).angle = m;
            f.ⵠⵠᐃ = Dl;
            break;
          case 33:
            (f = q.a[1][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 34:
            (f = q.a[2][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 35:
            (f = q.cs[0][0]).angle = m;
            f.ⵠⵠᐃ = Cg;
            break;
          case 36:
            (f = q.cs[1][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 37:
            (f = q.cs[2][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 38:
            (f = q.cs[3][0]).angle = m;
            f.ⵠⵠᐃ = Xr;
            break;
          case 40:
            (f = q.plm[0][0]).angle = m;
            f.ⵠⵠᐃ = Xk;
            break;
          case 41:
            (f = q.plm[1][0]).angle = m;
            f.ⵠⵠᐃ = Xs;
            break;
          case 42:
            (f = q.plm[2][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 50:
            (f = q.re[0][0]).angle = m;
            f.ⵠⵠᐃ = Rg;
            break;
          case 51:
            (f = q.re[1][0]).angle = m;
            f.ⵠⵠᐃ = Xr;
            break;
          case 52:
            (f = q.re[2][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 55:
            (f = q.c[0][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 56:
            (f = q.m[0][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 57:
            (f = q.m[1][0]).angle = m;
            f.ⵠⵠᐃ = true;
            break;
          case 58:
            (f = q.m[2][0]).angle = m;
            f.ⵠⵠᐃ = Qh;
        }
        if (Ux.loaded && Ux.ⵠⵠΔⵠⵠ && f) {
          Ux.ᐃΔᐃ(c[3 + i] & 1, ᐃⲆⲆⲆ[p], f.x, f.y);
        }
      }
    };
    this.ⲆⲆⵠⵠᐃ = function () {
      this.ᐃⵠⲆΔ[wf](na[Uo].stringify([35, Rx.ⲆⲆⵠⵠᐃ.ᐃΔᐃΔ, Rx.ⲆⲆⵠⵠᐃ.Δⵠᐃᐃⵠ]));
    };
    this.ⵠⵠⵠᐃΔᐃⵠΔⲆ = function (a, b) {
      this.ᐃⵠⲆΔ[wf](na[ha].stringify([30, b, a.ᐃΔᐃΔ, a.Δⵠᐃᐃⵠ]));
    };
    this.ⲆΔΔⵠⲆΔⲆ = function (a, b, c) {
      if (b) {
        this.ᐃⵠⲆΔ[wf](na[ha].stringify([14, b, a.ᐃΔᐃΔ, a.Δⵠᐃᐃⵠ]));
      } else {
        this.ᐃⵠⲆΔ[wf](na[ra].stringify([25, c, a.ᐃΔᐃΔ, a.Δⵠᐃᐃⵠ]));
      }
    };
    this.ⲆⲆΔᐃⲆᐃⲆⲆᐃ = function (a) {
      this.ᐃⵠⲆΔ[wf](Ca[Aa].stringify([13, a.ᐃΔᐃΔ, a.Δⵠᐃᐃⵠ]));
    };
    this.ᐃⲆⵠⵠⵠᐃΔⵠΔ = function (a) {
      this.ᐃⵠⲆΔ[wf](Ca[Oa].stringify([32, a]));
    };
    this.ᐃᐃⲆΔⵠᐃⲆΔⲆ = function (a) {
      this.ᐃⵠⲆΔ[wf](ca[Uo].stringify([29, a.ᐃΔᐃΔ, a.Δⵠᐃᐃⵠ]));
    };
    this.ⲆΔᐃⲆⵠⵠᐃΔᐃ = function (a, b) {
      this.ᐃⵠⲆΔ[wf](xq[Aa].stringify([27, b, a.ᐃΔᐃΔ, a.Δⵠᐃᐃⵠ, a.type]));
    };
    this.ΔⵠⲆΔⲆΔᐃᐃΔ = function (a, b) {
      this.ᐃⵠⲆΔ[wf](xq[Aa].stringify([7, b, a.ᐃΔᐃΔ, a.Δⵠᐃᐃⵠ]));
    };
    this.ΔⵠᐃᐃΔΔⵠⵠΔ = function (a, b, c) {
      this.ᐃⵠⲆΔ[wf](ca[ha].stringify([1, b, c, a.ᐃΔᐃΔ, a.Δⵠᐃᐃⵠ]));
    };
    this.ᐃⵠⵠⲆⵠⲆⲆ = function (a) {
      this.ᐃⵠⲆΔ[wf](Ca[Aa].stringify([37, a.ᐃΔᐃΔ, a.Δⵠᐃᐃⵠ, a.type]));
    };
    this.ⵠΔⲆᐃⵠⵠⲆΔⵠ = function (a) {
      this.ᐃⵠⲆΔ[wf](Ca[Aa].stringify([4, a.ᐃΔᐃΔ, a.Δⵠᐃᐃⵠ]));
    };
    this.ΔΔⵠᐃⵠΔⲆΔᐃ = function (a) {
      this.ᐃⵠⲆΔ[wf](Ca[Aa].stringify([8, a.ᐃΔᐃΔ, a.Δⵠᐃᐃⵠ]));
    };
    this.ⲆⵠᐃΔⲆⵠⵠΔΔ = function (a) {
      this.ᐃⵠⲆΔ[wf](Sa[Da].stringify([20, a.ᐃΔᐃΔ, a.Δⵠᐃᐃⵠ]));
    };
    this.ⲆΔΔⵠΔᐃΔⲆⲆ = function (a) {
      this.ᐃⵠⲆΔ[wf](Wa[_a].stringify([3, a.Δⵠᐃᐃⵠ]));
    };
    this.ᐃᐃᐃΔᐃΔⲆ = function (a) {
      b.ᐃⵠⲆΔ[wf](Ya[Oa].stringify([23, Rx.ΔⲆⵠⵠⵠ.id, Rx.ⵠᐃⵠⵠᐃ[a]]));
    };
    this.ⲆᐃⵠΔᐃⲆΔΔΔ = function () {
      b.ᐃⵠⲆΔ[wf](Fq[Eq].stringify([17, Rx.ΔⲆⵠⵠⵠ.ᐃΔᐃΔ, Rx.ΔⲆⵠⵠⵠ.id]));
    };
    this.ᐃⵠᐃⲆⵠⵠΔ = function () {
      b.ᐃⵠⲆΔ[wf](Kq[Hq].stringify([12]));
    };
    this.ᐃΔⵠᐃⲆΔᐃⲆΔ = function () {
      b.ᐃⵠⲆΔ[wf](Kq[Oa].stringify([19, Rx.ΔⲆⵠⵠⵠ.id]));
      if (document.getElementById("lock_team").innerHTML == "LOCK") {
        Rx.ΔⲆⵠⵠⵠ.lock = 1;
        document.getElementById("lock_team").innerHTML = "UNLOCK";
      } else {
        Rx.ΔⲆⵠⵠⵠ.lock = 0;
        document.getElementById("lock_team").innerHTML = "LOCK";
      }
    };
    this.Δⵠⵠ = function (j, e, i) {
      var k = new Uint16Array(j);
      if (i) {
        Qx.ΔⲆᐃⲆⵠⲆⲆΔΔ();
      }
      for (var n = (e.length - 2) / 18, o = 0; o < n; o++) {
        var q = 2 + o * 18;
        var t = 1 + o * 9;
        var w = e[q];
        var x = k[t + 1];
        var y = k[t + 5];
        var z = w * Qx.ΔⵠᐃⲆⲆᐃⵠ + y;
        if (x & 1) {
          Qx.ⲆⲆᐃΔΔᐃΔᐃⲆ(z);
        } else {
          var A = k[t + 2];
          var B = k[t + 3];
          var D = k[t + 4];
          var E = k[t + 6];
          var F = k[t + 7];
          var G = k[t + 8];
          var H = e[q + 1] / 255 * Math.PI * 2;
          if (Qx.ΔᐃⲆⲆΔ[z]) {
            var I = Qx.ΔᐃⲆⲆΔ[z];
            I.r.x = B;
            I.r.y = D;
            if (w != 0 && ⲆⵠΔⵠ.ᐃⵠⲆⲆ(I, I.r) > 200) {
              I.x = B;
              I.y = D;
            }
            if (Rx.id !== I.id || w === 0) {
              I.ᐃΔᐃⵠᐃᐃⵠ = H;
            }
            I.action |= x;
            I.info = E;
            I.ⵠⵠⵠΔⵠ = F;
            I.ΔᐃᐃᐃΔ = G;
            if (I.ⵠⵠᐃ) {
              I.ⵠⵠᐃ(x);
            }
          } else {
            var J = new Xf(A, w, y, B, D, H, x, E, F, G);
            Qx.ΔᐃⲆⲆΔ[z] = J;
            Qx.Δⵠⵠ[A].push(J);
          }
        }
      }
    };
    this.ⲆᐃᐃⲆ = function (a) {
      this.ⲆⵠⵠΔⲆΔⲆ = Xx;
      var b = new Uint16Array(a);
      Rx.ⵠᐃⵠΔᐃ.ⵠᐃᐃⲆᐃ(b);
    };
    this.ᐃΔΔⵠⵠⲆΔⵠΔ = function (a) {
      if (dg !== At) {
        Ct = At;
      }
      if (a.length > 0) {
        At = JSON.parse(JSON.stringify(Ct));
        for (var b = 0; b < a.length; b++) {
          var c = a[b];
          var d = Ct[c.item];
          if (d !== undefined) {
            d.r = c.recipe;
            d.w = c.workbench;
            d.f = c.fire;
            d.ⵠⲆⲆ = c.water;
            d.e = c.well;
            d.time = 1 / c.time;
          }
        }
      }
    };
    this.ⲆᐃΔᐃⲆᐃⲆ = function (a) {
      if (a && a.length !== 0) {
        Rx.ⲆᐃΔᐃⲆᐃⲆ.message = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          for (d.lineJoin = "round"; b.indexOf("\\n") !== -1;) {
            b = b.replace("\\n", "\n");
          }
          b = b.split("\n");
          ⲆⲆ = [];
          var f = b.length * 18 + 10;
          var g = 0;
          d.font = 14 + "px Baloo Paaji";
          for (var h = 0; b.length > h; h++) {
            if (b[h].charAt(0) === "#") {
              ⲆⲆ[h] = b[h].substring(0, 7);
              b[h] = b[h].substring(8);
            } else {
              ⲆⲆ[h] = "#FFFFFF";
            }
            g = Math.max(d.measureText(b[h]).width + 16, g);
          }
          c.height = f;
          c.width = g;
          h = 0;
          for (; b.length > h; h++) {
            var i = Cu(1, b[h], 14, ⲆⲆ[h], null, null, null, null, null, "#000", 6);
            d.drawImage(i, 8, h * 18 + 5);
          }
          return c;
        }(a);
      } else {
        Rx.ⲆᐃΔᐃⲆᐃⲆ.message = da;
      }
    };
    this.ΔⲆⵠⲆⵠ = function (a) {
      var b = Qx.ΔᐃⲆⲆΔ[a[1] * Qx.ΔⵠᐃⲆⲆᐃⵠ];
      if (b) {
        if (Qx.mode === 2 && b.ⵠᐃᐃⲆ === 0) {
          if (Rx.ᐃΔⵠᐃⵠ) {
            if (Math.random() > 0.5) {
              b.text.push(a[2] + " ..." + Δᐃᐃⵠᐃ);
            } else {
              b.text.push(Δᐃᐃⵠᐃ + "... " + a[2]);
            }
          } else {
            b.text.push(ⵠΔⵠⵠᐃΔⲆ[Math.floor(Math.random() * ⵠΔⵠⵠᐃΔⲆ.length)]);
          }
        } else {
          b.text.push(a[2]);
        }
      }
    };
    this.ⵠⵠΔᐃⵠᐃⵠⵠΔ = function (a) {
      if (Rx.ⵠⵠⲆᐃ.ⵠΔⲆᐃⲆ.length !== Rx.ⵠⵠⲆᐃ.max || Ct[a].ⲆⲆᐃᐃ === 29 || Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(Ct[a].ⲆⲆᐃᐃ) != -1 || Rx.ⵠⵠⲆᐃ.ⲆⲆᐃᐃΔⲆᐃΔⵠ(Ct[a].r)) {
        this.ᐃⵠⲆΔ[wf](qq[$o].stringify([26, a]));
        return 1;
      } else {
        this.ⵠⲆᐃⵠΔΔΔ();
        return 0;
      }
    };
    this.ⵠⲆΔⵠⲆ = function (a) {
      Rx.ⲆΔⲆΔ.ⵠⵠᐃΔⵠᐃΔΔᐃ(a);
    };
    this.ⵠⵠⵠⵠᐃ = function (a) {
      Rx.ⲆΔⲆΔ.ⵠⵠⵠⵠᐃ = a;
      Rx.ⲆΔⲆΔ.ⵠⵠᐃ();
    };
    this.ⲆΔⲆⵠᐃ = function (a) {
      Rx.ⲆΔⲆΔ.ⲆΔⲆⵠᐃ = a;
      Rx.ⲆΔⲆΔ.ⵠⵠᐃ();
    };
    this.ⵠΔᐃΔⲆΔⵠ = function (a) {
      Rx.ⲆΔⲆΔ.ⵠΔᐃΔⲆΔⵠ = a;
      Rx.ⲆΔⲆΔ.ⵠⵠᐃ();
    };
    this.ⲆⵠⲆⲆⲆⲆⲆᐃⲆ = function (a) {
      this.ΔΔᐃΔⲆ(Ib[315]);
    };
    this.ⵠⵠΔⵠᐃΔΔΔᐃ = function () {
      Rx.ⲆΔⲆΔ.ⲆΔⲆⲆⵠⵠⵠ();
    };
    this.ⲆᐃⲆΔᐃ = function (a) {
      Tx.ⲆᐃⲆΔᐃ.ΔΔⵠⲆ = [];
      var b = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ];
      var c = 0;
      for (var d = 1; d < a.length; d += 2) {
        var e = {
          x: Math.floor(a[d] * Qx.w / 250),
          y: Math.floor(a[d + 1] * Qx.ᐃᐃᐃ / 250)
        };
        if (b && !c && !Rx.ᐃⲆⵠΔΔΔΔ && ⲆⵠΔⵠ.ᐃⵠⲆⲆ(e, b) < 250) {
          c += 1;
        } else {
          Tx.ⲆᐃⲆΔᐃ.ΔΔⵠⲆ.push(e);
        }
      }
    };
    this.ᐃΔⵠⲆΔΔᐃΔⵠ = function () {
      Rx.ⲆⲆⵠⵠᐃ.open = at;
      Rx.ᐃⵠⲆᐃⲆ.enabled = false;
      Rx.ᐃⵠⲆᐃⲆ.Ⲇᐃⵠᐃᐃ = -1;
      Rx.ᐃⵠⲆᐃⲆ.label = null;
      Rx.ᐃⵠⲆᐃⲆ.ΔᐃΔⲆⲆΔᐃ = null;
      Rx.ᐃⵠⲆᐃⲆ.now = -1;
    };
    this.ᐃⵠⲆᐃⲆ = function (a) {
      Ff.ⲆᐃⲆⲆⵠΔⲆ = a;
      Rx.ᐃⵠⲆᐃⲆ.enabled = true;
      Rx.ᐃⵠⲆᐃⲆ.Ⲇᐃⵠᐃᐃ = new Date().getTime();
      Rx.ᐃⵠⲆᐃⲆ.label = null;
      Rx.ᐃⵠⲆᐃⲆ.now = -1;
      for (var b = [39, 45, 149, 57, 0, 5, 6, 30, 19, 62, 63, 9, 13, 12, 14, 15, 33, 34, 16, 17, 18, 94, 95, 96, 97, 98, 99, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 92, 93, 8, 1, 3, 4, 31, 32, 55, 53, 54], c = 0; b.length > c; c++) {
        var d = Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(b[c]);
        if (d != -1) {
          Rx.ⵠⵠⲆᐃ.ΔⵠᐃᐃΔᐃΔ(b.length[c], d);
        }
      }
      Rx.ⲆΔⲆΔ.ⲆΔⲆⲆⵠⵠⵠ();
    };
    this.ⲆⵠᐃΔᐃΔᐃⲆᐃ = function (a, b, c) {
      this.ⵠⵠⲆⵠⲆΔᐃ(a, b * 256 + c);
    };
    this.ⵠⵠⲆⵠⲆΔᐃ = function (a, b) {
      Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ = -1;
      Rx.ⵠⵠⲆᐃ.ⵠⵠⲆᐃⲆⲆᐃ(a, b, Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(a));
      Rx.ⲆΔⲆΔ.ⵠⵠᐃ();
    };
    this.ΔⲆⲆᐃΔᐃⵠⲆⲆ = function (a) {
      Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ = -1;
      Rx.ΔΔⵠᐃⲆ.wait = true;
      var b = Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(a);
      Rx.ⵠⵠⲆᐃ.ⵠⵠⲆᐃⲆⲆᐃ(a, 1, b);
      if (b >= 0 && !Rx.ⵠⵠⲆᐃ.ⵠΔⵠᐃ[a]) {
        Rx.ⲆΔⲆΔ.ⵠⵠᐃ();
      }
      if (a == 159) {
        Rx.ⵠᐃⵠⵠᐃ = [Rx.id];
      }
    };
    this.ⲆΔΔⲆⲆⲆΔΔⵠ = function () {
      this.ᐃⵠⲆΔ[wf](na[Uo].stringify([6]));
    };
    this.ᐃⲆᐃⵠᐃⲆᐃⵠᐃ = function (a) {
      this.ᐃⵠⲆΔ[wf](xq[ra].stringify([2, a.ᐃⲆⵠᐃᐃ, a.id]));
    };
    this.ᐃⵠⵠᐃⲆⲆᐃΔΔ = function (a, b) {
      this.ᐃⵠⲆΔ[wf](xq[Aa].stringify([10, a, b]));
    };
    this.ⵠΔⵠᐃΔΔᐃΔⵠ = function () {
      var a = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ];
      if (a) {
        var b = Math.PI * 2;
        this.ᐃⵠⲆΔ[wf](xq[ra].stringify([22, Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ, Math.floor((a.angle + b) % b * 255 / b), Rx.ⲆΔⲆΔ.mode]));
      }
    };
    this.ᐃΔᐃᐃΔ = function (a, b) {
      switch (a) {
        case 195:
        case 110:
        case 116:
        case 117:
        case 145:
        case 127:
        case 133:
        case 136:
        case 142:
        case 143:
        case 189:
        case 207:
        case 233:
        case 205:
        case 209:
        case 211:
        case 192:
        case 137:
        case 138:
        case 196:
        case 197:
        case 200:
        case 199:
          Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ = -1;
          this.ᐃⵠⲆΔ[wf](ca[ha].stringify([34, a]));
          break;
        case 114:
        case 160:
        case 115:
        case 132:
        case 188:
        case 206:
        case 204:
        case 191:
        case 193:
        case 208:
        case 210:
        case 113:
        case 162:
        case 163:
        case 164:
        case 165:
        case 118:
        case 167:
        case 151:
        case 152:
        case 166:
        case 171:
        case 172:
        case 173:
        case 124:
        case 218:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 220:
        case 168:
        case 169:
        case 170:
        case 119:
        case 122:
        case 123:
        case 217:
        case 219:
        case 125:
        case 190:
        case 141:
        case 135:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 198:
        case 201:
        case 182:
        case 183:
        case 144:
        case 159:
        case 221:
          if (!Rx.ᐃΔⵠᐃⵠ) {
            if (a === Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ) {
              Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ = -1;
            } else {
              Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ = a;
            }
          }
          break;
        case 0:
        case 57:
        case 5:
        case 6:
        case 30:
        case 19:
        case 9:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 92:
        case 93:
        case 12:
        case 13:
        case 14:
        case 15:
        case 33:
        case qs.ΔᐃᐃᐃⲆⲆΔΔⵠ:
        case 16:
        case 17:
        case 34:
        case 18:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
          if (!Rx.ᐃΔⵠᐃⵠ) {
            Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ = -1;
            if ((c = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ]) && a === c.right) {
              this.ᐃⵠⲆΔ[wf](Ca[Aa].stringify([34, 7]));
            } else {
              Rx.ᐃΔⲆΔᐃ.wait = true;
              this.ᐃⵠⲆΔ[wf](Sa[Da].stringify([34, a]));
            }
          }
          break;
        case 1:
        case 8:
        case 3:
        case 4:
        case 35:
        case 36:
        case 37:
        case 28:
        case 38:
        case 39:
        case 31:
        case 32:
        case 45:
        case 46:
        case 50:
        case 51:
        case 52:
        case 55:
        case 56:
        case 53:
        case 54:
        case 89:
        case 49:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
          if (!Rx.ᐃΔⵠᐃⵠ) {
            Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ = -1;
            if ((c = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ]) && a === c.right) {
              this.ᐃⵠⲆΔ[wf](Wa[_a].stringify([34, 7]));
            } else {
              this.ᐃⵠⲆΔ[wf](Ya[Oa].stringify([34, a]));
            }
          }
          break;
        case 223:
        case 224:
        case 225:
        case 239:
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 91:
          if (!Rx.ᐃΔⵠᐃⵠ) {
            Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ = -1;
            var c = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ];
            this.ᐃⵠⲆΔ[wf](Ya[Oa].stringify([34, a]));
          }
          break;
        case 77:
        case 78:
        case 79:
        case 58:
        case 25:
        case 26:
        case 27:
        case 43:
        case 44:
        case 20:
        case 21:
        case 22:
        case 59:
        case 60:
        case 90:
        case 61:
        case 47:
          if ((c = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ]) && a !== c.ᐃᐃⲆⵠⵠ) {
            Rx.ᐃⲆΔⲆᐃ.wait = true;
          }
          this.ᐃⵠⲆΔ[wf](ca[Aa].stringify([34, a]));
          break;
        case 10:
        case 83:
        case 84:
        case 86:
        case 11:
        case 40:
        case 88:
        case 82:
        case 80:
        case 81:
        case 41:
        case 42:
        case 85:
        case 23:
        case 24:
        case 48:
          this.ᐃⵠⲆΔ[wf](Fq[Eq].stringify([34, a]));
      }
    };
    this.ΔⲆΔⲆΔⵠᐃΔᐃ = function (a) {
      this.ᐃⵠⲆΔ[wf](xq[$o].stringify([31, a]));
    };
    this.ΔᐃⵠⵠⲆⲆⲆⵠΔ = function (a) {
      Rx.ΔΔⵠᐃⲆ.wait = Xr;
      var b = Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(a);
      Rx.ⵠⵠⲆᐃ.ΔⵠᐃᐃΔᐃΔ(a, b);
      Rx.ⲆΔⲆΔ.ⵠⵠᐃ();
    };
    this.ΔⵠΔᐃⲆⲆᐃⵠⵠ = function (a, b) {
      this.ᐃⵠⲆΔ[wf](qq[_a].stringify([18, a]));
    };
    this.ⵠΔᐃⵠΔΔⵠᐃΔ = function (a, b) {
      this.ᐃⵠⲆΔ[wf](na[Uo].stringify([24, a]));
    };
    this.ⲆⵠᐃⲆⲆᐃⲆΔᐃ = function (a) {
      Rx.ΔΔⵠᐃⲆ.wait = ls;
      var b = Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(a);
      Rx.ⵠⵠⲆᐃ.ⵠⵠⲆᐃⲆⲆᐃ(a, 1, b);
      Rx.ⲆΔⲆΔ.ⵠⵠᐃ();
    };
    this.ⲆⲆⲆᐃᐃⲆⵠΔⲆ = function (a) {
      var b = a[1];
      var c = a[2];
      Rx.ΔΔⵠᐃⲆ.wait = Xr;
      var d = Rx.ⵠⵠⲆᐃ.ⵠⵠⲆΔΔ(b);
      Rx.ⵠⵠⲆᐃ.ⵠⵠⲆᐃⲆⲆᐃ(b, c, d);
      Rx.ⲆΔⲆΔ.ⵠⵠᐃ();
    };
    this.ᐃⲆᐃᐃᐃΔᐃΔⲆ = function () {
      this.ᐃⵠⲆΔ[wf](na[Uo].stringify([16]));
    };
    this.ᐃⵠᐃⲆⵠⵠᐃᐃⲆ = function (a) {
      var b = Math.PI * 2;
      this.ᐃⵠⲆΔ[wf](xq[ra].stringify([36, Math.floor((a + b) % b * 255 / b)]));
    };
    this.ⲆᐃΔᐃⵠⲆⵠᐃΔ = function (a) {
      var b = Math.PI * 2;
      this.ᐃⵠⲆΔ[wf](xq[ra].stringify([0, Math.floor((a + b) % b * 255 / b)]));
    };
    this.ᐃΔᐃᐃⵠⵠⵠᐃⲆ = function (a) {
      this.ᐃⵠⲆΔ[wf](ⲆⵠⵠᐃΔᐃⲆ[0].stringify([11, a]));
    };
    this.ΔⵠⲆᐃⲆⲆᐃⵠⲆ = function (a) {
      this.ᐃⵠⲆΔ[wf](Ca[Aa].stringify([33, a]));
    };
    this.ᐃⲆᐃᐃΔⵠΔⵠΔ = function (a) {
      var b = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ];
      if (Rx.ᐃΔⵠᐃⵠ) {
        if (Math.random() > 0.5) {
          b.text.push(a.substring(0, 25) + " ..." + Δᐃᐃⵠᐃ);
        } else {
          b.text.push(Δᐃᐃⵠᐃ + "... " + a.substring(0, 25));
        }
      } else {
        b.text.push(a);
      }
      this.ᐃⵠⲆΔ[wf](Ca[Aa].stringify([15, a]));
    };
    this.ᐃᐃᐃΔⲆ = function (a) {
      var b = ᐃᐃⲆⲆ.select.Δⵠⵠ;
      if (b.length != 0) {
        var c = [11];
        var d = [];
        ⲆⵠΔⵠ.ⵠⵠΔΔⲆᐃΔ(a, {
          x: ᐃᐃⲆⲆ.ⵠⵠΔ.rx,
          y: ᐃᐃⲆⲆ.ⵠⵠΔ.ry
        });
        c.push(a.x);
        c.push(a.y);
        for (var e = 0; e < b.length; e++) {
          d.push(b[e].ⲆⲆⵠᐃΔⵠᐃᐃᐃ);
        }
        c.push(d);
        this.ᐃⵠⲆΔ[wf](Sa[Da].stringify(c));
      }
    };
    this.ΔⲆⵠΔΔᐃᐃ = 0;
    this.ΔᐃⵠΔΔⲆⵠ = {
      ⲆΔ: 0,
      ΔΔⵠᐃ: 0
    };
    this.ⲆⵠᐃᐃΔⲆⵠᐃⲆ = function () {
      if (Xx - this.ΔⲆⵠΔΔᐃᐃ > 50) {
        this.ΔⲆⵠΔΔᐃᐃ = Xx;
        var a = Rx.ⵠⵠΔ;
        var b = Math.floor(a.x / 100);
        var c = Math.floor(a.y / 100);
        if (this.ΔᐃⵠΔΔⲆⵠ.ⲆΔ != b || this.ΔᐃⵠΔΔⲆⵠ.ΔΔⵠᐃ != c) {
          this.ᐃⵠⲆΔ[wf](Ya[_a].stringify([28, Math.floor(-a.x), Math.floor(-a.y)]));
          this.ΔᐃⵠΔΔⲆⵠ.ⲆΔ = b;
          this.ΔᐃⵠΔΔⲆⵠ.ΔΔⵠᐃ = c;
        }
      }
    };
    this.ⲆⲆᐃⵠⲆᐃᐃ = 0;
    this.ⲆΔⵠᐃᐃⵠⵠᐃΔ = function () {
      if (Xx - this.ⲆⲆᐃⵠⲆᐃᐃ > 60000) {
        this.ⲆⲆᐃⵠⲆᐃᐃ = Xx;
        this.ping();
      }
    };
    this.ᐃⵠᐃⵠᐃᐃΔⲆⵠ = function () {
      Rx.reconnect.enabled = true;
      if (b.ᐃⵠⲆΔ.ⵠΔΔᐃᐃ == b.ⵠΔΔᐃᐃ) {
        b.ⵠΔΔᐃᐃ++;
        b.ᐃⵠⲆΔ.close();
        Mx.connect();
      }
    };
    this.ᐃⵠⲆΔᐃⵠᐃⵠⵠ = function (a) {
      this.ΔΔᐃΔⲆ(Ib[316]);
      for (var b = 1; a.length > b; b++) {
        Rx.ⵠᐃⵠⵠᐃ.push(a[b]);
      }
    };
    this.ⵠΔᐃⵠᐃΔᐃⵠᐃ = function (a) {
      this.ΔΔᐃΔⲆ(Qx.ΔΔⵠⲆ[a].ᐃΔΔΔΔ + Ib[318]);
      Rx.ⵠᐃⵠⵠᐃ.push(a);
      var b = document.getElementById("team_box");
      if (Tx.ᐃⲆⵠⲆⲆ != -1 && b.style.display == "inline-block") {
        Tx.ⲆⵠΔΔΔ[Tx.ᐃⲆⵠⲆⲆ].action();
      }
    };
    this.ⲆᐃⵠⲆⵠΔⵠⲆΔ = function () {
      this.ΔΔᐃΔⲆ(Ib[319]);
      Rx.ΔⲆⵠⵠⵠ.wait = Cq;
      Rx.ⵠᐃⵠⵠᐃ = [];
      document.getElementById("team_box").style.display = "none";
    };
    this.ΔᐃⵠΔΔΔᐃⲆⲆ = function (a) {
      if (Rx.id == a) {
        this.ΔΔᐃΔⲆ(Ib[320]);
        Rx.ΔⲆⵠⵠⵠ.wait = Cq;
        Rx.ⵠᐃⵠⵠᐃ = [];
        document.getElementById("team_box").style.display = "none";
      } else {
        this.ΔΔᐃΔⲆ(Qx.ΔΔⵠⲆ[a].ᐃΔΔΔΔ + Ib[321]);
        for (var b = 0; Rx.ⵠᐃⵠⵠᐃ.length > b; b++) {
          if (Rx.ⵠᐃⵠⵠᐃ[b] == a) {
            Rx.ⵠᐃⵠⵠᐃ.splice(b, 1);
            break;
          }
        }
        var c = document.getElementById("team_box");
        if (Tx.ᐃⲆⵠⲆⲆ != -1 && c.style.display == "inline-block") {
          Tx.ⲆⵠΔΔΔ[Tx.ᐃⲆⵠⲆⲆ].action();
        }
      }
    };
    this.ΔⲆΔⵠᐃⵠΔᐃⲆ = function (a) {
      Rx.ΔⲆⵠⲆΔ = false;
      this.ΔΔᐃΔⲆ(Ib[322]);
      if (this.ⵠΔΔᐃᐃ == this.ᐃⵠⲆΔ.ⵠΔΔᐃᐃ) {
        this.ⵠΔΔᐃᐃ++;
        Tx.ⵠⵠΔⲆᐃ(Px.ⵠⵠΔⵠⵠ);
        this.ᐃⵠⲆΔ.close();
      }
    };
    this.ᐃⵠΔⲆⵠⵠΔᐃⵠ = function (a, b) {
      Rx.ΔⲆⵠⲆΔ = zk;
      var c = new Uint16Array(b);
      var d = new Uint32Array(b);
      Rx.ᐃⵠᐃⲆᐃΔⲆ.ΔⵠⲆⲆΔⲆⲆ = Rb[a][Math.floor(Math.random() * Rb[a].length)];
      Rx.ᐃⵠᐃⲆᐃΔⲆ.ⵠⵠⵠⲆⵠ = ⲆⵠΔⵠ.ⲆⵠΔⵠᐃΔΔ(Qx.ΔΔⵠⲆ[Rx.id].ⵠⵠⵠⲆⵠ);
      Rx.ᐃⵠᐃⲆᐃΔⲆ.ⵠᐃᐃⲆⵠᐃΔ = ⲆⵠΔⵠ.ⲆⵠΔⵠᐃΔΔ(d[1]);
      Rx.ᐃⵠᐃⲆᐃΔⲆ.ᐃᐃΔᐃⵠ = c[1];
      this.ΔΔᐃΔⲆ(Ib[317]);
      if (this.ᐃⵠⲆΔ.ⵠΔΔᐃᐃ == this.ⵠΔΔᐃᐃ) {
        this.ⵠΔΔᐃᐃ++;
        Tx.ⵠⵠΔⲆᐃ(Sx.ⵠⵠΔⵠⵠ);
        this.ᐃⵠⲆΔ.close();
        try {
          oc.Widget.adsRefresh();
        } catch (a) {}
      }
    };
    this.ping = function () {
      this.ᐃⵠⲆΔ[wf]("[21]");
    };
    this.ⲆⵠΔᐃᐃⵠⵠⲆⵠ = function () {
      if (this.ᐃⵠⲆΔ.readyState == 3) {
        this.ⲆⵠⵠΔⲆΔⲆ -= 600000;
      }
    };
    this.ΔⵠⵠΔΔᐃⲆⵠⲆ = function () {
      if (Yx > 5) {
        this.ⲆⵠⵠΔⲆΔⲆ = Xx;
      }
      if (Xx - this.ⲆⵠⵠΔⲆΔⲆ > 600000) {
        this.ⲆⵠⵠΔⲆΔⲆ = Xx;
        this.ᐃⵠᐃⵠᐃᐃΔⲆⵠ();
      }
    };
    this.ⵠᐃᐃⵠⵠΔⲆΔⵠ = function (c) {
      _x++;
      clearTimeout(this.ⵠⲆⵠⲆΔ);
      document.getElementById("commandMainBoxName").innerHTML = this.ΔᐃⲆⲆᐃ[this.ΔᐃᐃⵠⲆ][this.ⲆⲆΔΔᐃⵠᐃ[this.ΔᐃᐃⵠⲆ]].a;
      document.getElementById("exploreForest").src = "img/forest-leaf.png";
      document.getElementById("exploreWinter").src = "img/winter-flake.png";
      document.getElementById("exploreDesert").src = "img/desert-cactus.png";
      document.getElementById("exploreLava").src = "img/lava-volcano.png";
      this.ⲆⵠⵠΔⲆΔⲆ = Xx;
      Rx.ᐃᐃΔᐃ.ⵠᐃᐃᐃⲆ.ⲆⵠⲆΔⲆ = Rx.ᐃᐃΔᐃ.ⵠᐃᐃᐃⲆ.ΔⲆᐃΔⵠ;
      Rx.ᐃᐃΔᐃ.ᐃⲆᐃΔⵠⲆⲆ.ⲆⵠⲆΔⲆ = Rx.ᐃᐃΔᐃ.ᐃⲆᐃΔⵠⲆⲆ.ΔⲆᐃΔⵠ;
      Rx.ᐃᐃΔᐃ.ᐃΔΔⵠⵠⵠᐃ.ⲆⵠⲆΔⲆ = Rx.ᐃᐃΔᐃ.ᐃΔΔⵠⵠⵠᐃ.ΔⲆᐃΔⵠ;
      Rx.ᐃᐃΔᐃ.ΔⵠⲆⵠΔⵠᐃ.ⲆⵠⲆΔⲆ = Rx.ᐃᐃΔᐃ.ΔⵠⲆⵠΔⵠᐃ.ΔⲆᐃΔⵠ;
      Rx.ᐃᐃΔᐃ.ⲆᐃᐃⲆΔ.ⲆⵠⲆΔⲆ = Rx.ᐃᐃΔᐃ.ⲆᐃᐃⲆΔ.ΔⲆᐃΔⵠ;
      Rx.ᐃᐃΔᐃ.ⲆΔΔᐃ = 1;
      Rx.ᐃᐃΔᐃ.c = 1;
      Rx.ᐃᐃΔᐃ.ᐃᐃᐃ = 1;
      Rx.ᐃᐃΔᐃ.ᐃᐃⲆ = 1;
      Rx.ᐃᐃΔᐃ.ⵠⲆⲆ = 1;
      Rx.ᐃᐃΔᐃ.ᐃΔᐃᐃⲆΔⲆ = 1;
      Rx.ⲆᐃⵠΔⲆΔⲆ = Vg;
      Tx.ⵠᐃⵠⲆⵠ.display = 0;
      Rx.ⵠⵠⲆᐃ.ⵠΔⲆᐃⲆ = [];
      Rx.ⵠⵠⲆᐃ.ⵠΔⵠᐃ = [];
      Rx.ⵠⵠⲆᐃ.max = 10;
      Rx.ⵠⵠⲆᐃ.ᐃᐃⵠΔⵠᐃⲆ = 0;
      Rx.ⵠⵠⲆᐃ.ⵠΔᐃΔᐃ = 0;
      Rx.ⵠⵠⲆᐃ.id = -1;
      Tx.ᐃⲆⵠᐃΔΔⲆ = 1;
      Tx.ⵠᐃⲆⲆᐃⲆⲆ = 1;
      Tx.ᐃΔⵠᐃⲆᐃⵠ = 1;
      Tx.ΔΔΔΔⵠⵠΔ = 1;
      Rx.ΔⲆⵠⲆΔ = oo;
      Rx.ⵠⵠⲆᐃ.ᐃⲆⲆΔᐃⲆᐃ.stop();
      Rx.ⲆΔⲆΔ.ⵠⵠⲆⵠᐃ = [];
      Rx.ⲆΔⲆΔ.ΔΔⵠⲆΔ = at;
      Rx.ⲆΔⲆΔ.ⵠⵠⲆⵠᐃⵠⵠⵠⵠ = false;
      Rx.ⲆΔⲆΔ.ⲆⲆⲆⵠ = -1;
      Rx.ⲆΔⲆΔ.id = -1;
      Rx.ⲆΔⲆΔ.ⵠⲆΔⵠⲆ = false;
      Rx.ⲆΔⲆΔ.ⵠⵠⵠⵠᐃ = Vg;
      Rx.ⲆΔⲆΔ.ⲆΔⲆⵠᐃ = tg;
      Rx.ⲆΔⲆΔ.ⵠΔᐃΔⲆΔⵠ = false;
      Rx.ⲆΔⲆΔ.timeout = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0, 1, 0, 1, 1);
      Rx.ᐃΔⲆΔᐃ.timeout = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(va, 0, 1, 0, 1 / 10, 1);
      Rx.ᐃΔⲆΔᐃ.wait = false;
      Rx.ᐃⲆΔⲆᐃ.timeout = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0, 1, 0, 1 / 5, 1);
      Rx.ᐃⲆΔⲆᐃ.wait = false;
      Rx.ΔΔⵠᐃⲆ.timeout = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(false, 0, 1, 0, 1, 1);
      Rx.ΔΔⵠᐃⲆ.wait = zl;
      Rx.ΔⲆⵠⵠⵠ.id = -1;
      Rx.ΔⲆⵠⵠⵠ.ᐃΔᐃΔ = -1;
      Rx.ΔⲆⵠⵠⵠ.wait = Kk;
      Rx.ΔⲆⵠⵠⵠ.timeout = new ⲆⵠΔⵠ.ᐃΔᐃⲆ(va, 0, 1, 0, 1 / 30, 1);
      Tx.ⲆᐃⲆΔᐃ.Δⵠᐃⵠᐃ.x = -1;
      Tx.ⲆᐃⲆΔᐃ.Δⵠᐃⵠᐃ.y = -1;
      Tx.ⵠᐃⵠᐃ.open = false;
      Tx.ⲆᐃⲆΔᐃ.ΔΔⵠⲆ = [];
      Rx.ᐃΔⲆⲆⵠ.enabled = false;
      Qx.mode = c[1];
      if (c[20] !== undefined && c[21] !== undefined) {
        Qx.ᐃⲆᐃⵠⲆ = c[20];
        Qx.ⲆΔⲆΔΔ = c[21];
        Qx.w = Qx.ⲆⲆᐃⵠⵠᐃⵠ * Qx.ᐃⲆᐃⵠⲆ;
        Qx.ᐃᐃᐃ = Qx.ⵠⵠⵠⲆΔᐃⲆ * Qx.ⲆΔⲆΔΔ;
      }
      Qx.ⵠⵠΔΔᐃΔⲆ = c[22];
      Qx.ⵠⵠᐃⵠⲆ = c[23];
      b.ⲆᐃΔᐃⲆᐃⲆ(c[24]);
      b.ᐃΔΔⵠⵠⲆΔⵠΔ(c[25]);
      Rx.ⵠΔᐃᐃΔ.ΔⲆⵠᐃᐃ = c[26];
      Rx.ΔΔΔⵠΔᐃⵠ = 0;
      Rx.ᐃⲆᐃᐃΔ.ΔⲆⵠᐃᐃ = c[27];
      Qx.ΔᐃΔⲆⵠⲆΔⲆᐃ(c[19]);
      Qx.time = c[5];
      Qx.ᐃᐃᐃⵠⲆ.ΔⲆᐃⲆⵠ = c[15];
      Qx.ᐃᐃᐃⵠⲆ.ⵠᐃᐃⲆᐃ = new Date().getTime();
      Tx.Ⲇⵠⵠⵠ.ΔᐃⲆⲆⲆᐃⲆ = c[16];
      Qx.transition = gn;
      Rx.ⵠΔΔ = c[2];
      Tx.Ⲇⵠⵠⵠ.reset();
      Rx.ⵠᐃⵠⵠᐃ = c[8];
      Qx.Δⵠⵠ[0] = [];
      Qx.Δⵠⵠ[100] = [];
      Qx.Δⵠⵠ[2] = [];
      Qx.Δⵠⵠ[1] = [];
      Qx.Δⵠⵠ[6] = [];
      Qx.Δⵠⵠ[3] = [];
      Qx.Δⵠⵠ[31] = [];
      Qx.Δⵠⵠ[37] = [];
      Qx.Δⵠⵠ[43] = [];
      Qx.Δⵠⵠ[44] = [];
      Qx.Δⵠⵠ[39] = [];
      Qx.Δⵠⵠ[40] = [];
      Qx.Δⵠⵠ[54] = [];
      Qx.Δⵠⵠ[55] = [];
      Qx.Δⵠⵠ[4] = [];
      Qx.Δⵠⵠ[7] = [];
      Qx.Δⵠⵠ[8] = [];
      Qx.Δⵠⵠ[9] = [];
      Qx.Δⵠⵠ[10] = [];
      Qx.Δⵠⵠ[15] = [];
      Qx.Δⵠⵠ[16] = [];
      Qx.Δⵠⵠ[17] = [];
      Qx.Δⵠⵠ[45] = [];
      Qx.Δⵠⵠ[46] = [];
      Qx.Δⵠⵠ[47] = [];
      Qx.Δⵠⵠ[48] = [];
      Qx.Δⵠⵠ[49] = [];
      Qx.Δⵠⵠ[53] = [];
      Qx.Δⵠⵠ[11] = [];
      Qx.Δⵠⵠ[22] = [];
      Qx.Δⵠⵠ[23] = [];
      Qx.Δⵠⵠ[5] = [];
      Qx.Δⵠⵠ[12] = [];
      Qx.Δⵠⵠ[13] = [];
      Qx.Δⵠⵠ[14] = [];
      Qx.Δⵠⵠ[60] = [];
      Qx.Δⵠⵠ[70] = [];
      Qx.Δⵠⵠ[71] = [];
      Qx.Δⵠⵠ[72] = [];
      Qx.Δⵠⵠ[73] = [];
      Qx.Δⵠⵠ[74] = [];
      Qx.Δⵠⵠ[81] = [];
      Qx.Δⵠⵠ[82] = [];
      Qx.Δⵠⵠ[87] = [];
      Qx.Δⵠⵠ[86] = [];
      Qx.Δⵠⵠ[34] = [];
      Qx.Δⵠⵠ[65] = [];
      Qx.Δⵠⵠ[66] = [];
      Qx.Δⵠⵠ[67] = [];
      Qx.Δⵠⵠ[62] = [];
      Qx.Δⵠⵠ[63] = [];
      Qx.Δⵠⵠ[78] = [];
      Qx.Δⵠⵠ[77] = [];
      Qx.Δⵠⵠ[75] = [];
      Qx.Δⵠⵠ[76] = [];
      Qx.Δⵠⵠ[64] = [];
      Qx.Δⵠⵠ[69] = [];
      Qx.Δⵠⵠ[68] = [];
      Qx.Δⵠⵠ[79] = [];
      Qx.Δⵠⵠ[89] = [];
      Qx.Δⵠⵠ[83] = [];
      Qx.Δⵠⵠ[84] = [];
      Qx.Δⵠⵠ[85] = [];
      Qx.Δⵠⵠ[80] = [];
      Qx.Δⵠⵠ[88] = [];
      Qx.Δⵠⵠ[91] = [];
      Qx.Δⵠⵠ[90] = [];
      Qx.Δⵠⵠ[61] = [];
      Qx.Δⵠⵠ[18] = [];
      Qx.Δⵠⵠ[19] = [];
      Qx.Δⵠⵠ[20] = [];
      Qx.Δⵠⵠ[21] = [];
      Qx.Δⵠⵠ[50] = [];
      Qx.Δⵠⵠ[52] = [];
      Qx.Δⵠⵠ[51] = [];
      Qx.Δⵠⵠ[29] = [];
      Qx.Δⵠⵠ[56] = [];
      Qx.Δⵠⵠ[30] = [];
      Qx.Δⵠⵠ[38] = [];
      Qx.Δⵠⵠ[33] = [];
      Qx.Δⵠⵠ[32] = [];
      Qx.Δⵠⵠ[24] = [];
      Qx.Δⵠⵠ[25] = [];
      Qx.Δⵠⵠ[26] = [];
      Qx.Δⵠⵠ[27] = [];
      Qx.Δⵠⵠ[28] = [];
      Qx.Δⵠⵠ[42] = [];
      Qx.Δⵠⵠ[41] = [];
      Qx.Δⵠⵠ[35] = [];
      Qx.Δⵠⵠ[36] = [];
      Qx.ΔᐃⲆⲆΔ = [];
      Qx.ΔⵠᐃⲆⲆᐃⵠ = c[7];
      Rx.id = c[9];
      Rx.ΔΔΔΔ = Rx.id * Qx.ΔⵠᐃⲆⲆᐃⵠ;
      if (Ux.loaded) {
        Ux.ΔΔⵠⲆ[0].ΔΔΔΔ = Rx.ΔΔΔΔ;
        Ux.ΔΔⵠⲆ[0].ⲆⵠᐃΔᐃⵠΔ = 0;
      }
      Vx.ⲆⵠⵠᐃⵠⲆΔ();
      Rx.ⵠⵠΔ.ᐃΔΔΔᐃ(c[3], c[10]);
      Qx.ΔΔⵠⲆ = [];
      var d = Qx.ΔΔⵠⲆ;
      for (var e = 0; c[11] > e; e++) {
        d.push(new Uf());
      }
      e = 0;
      for (var f = c[4]; f.length > e; e++) {
        var g = d[f[e].i];
        g.ᐃΔΔΔΔ = f[e].n;
        g.ⵠᐃᐃⲆ = f[e].s;
        g.ᐃⲆⵠⲆⵠ = f[e].a;
        g.ⵠᐃⵠⲆᐃ = f[e].c;
        g.ᐃⵠΔⵠⵠ = f[e].b;
        g.ΔⲆⲆⲆⵠ = f[e].d;
        g.ΔᐃⲆⵠΔΔⲆ = f[e].g;
        g.level = f[e].l;
        g.ⵠⵠⵠⲆⵠ = ⲆⵠΔⵠ.ⲆⲆⲆΔⲆⵠᐃ(f[e].p);
        g.ΔⲆⵠⲆΔ = true;
        if (Pf === 1) {
          g.ᐃΔΔΔΔ += "|" + f[e].i;
        }
      }
      Rx.ⵠᐃⵠΔᐃ.sort();
      if (Qx.mode === 1 && Qx.ΔΔⵠⲆ[Rx.id].ᐃΔΔΔΔ === "spectator") {
        Rx.ᐃⲆⵠΔΔΔΔ = true;
      } else {
        Rx.ᐃⲆⵠΔΔΔΔ = at;
      }
      if (Qx.mode === 2 && Qx.ΔΔⵠⲆ[Rx.id].ⵠᐃᐃⲆ === 0) {
        Rx.ᐃΔⵠᐃⵠ = go;
      } else {
        Rx.ᐃΔⵠᐃⵠ = Ij;
      }
      if (Qx.mode === 3 && Qx.ΔΔⵠⲆ[Rx.id].ⵠᐃᐃⲆ === 0) {
        Rx.ⵠⲆᐃᐃⵠΔⲆ = Qh;
      } else {
        Rx.ⵠⲆᐃᐃⵠΔⲆ = false;
      }
      ΔⵠⵠⲆ.set("starve_token", Rx.ⵠⲆᐃⵠΔ);
      if (c[12] === 0) {
        Rx.ⵠΔⵠΔⵠ.Ⲇᐃⵠᐃᐃ = 0;
        Tx.Ⲇⵠⵠⵠ.restore(c[17]);
        var h = c[14];
        if (h[29]) {
          Rx.ⵠⵠⲆᐃ.ⲆΔⵠⲆⲆΔᐃ(1, 0);
        }
        for (e = 0; h.length > e; e++) {
          if (h[e]) {
            if (e == 29) {
              continue;
            }
            if (e == 7) {
              continue;
            }
            this.ΔᐃΔᐃⲆΔᐃ([0, e, h[e]]);
          }
        }
        Rx.ⵠΔⵠΔⵠ.open = Gl;
      } else {
        if (Qx.mode === 4) {
          this.ΔᐃΔᐃⲆΔᐃ([0, 238, 1]);
        } else if (Qx.mode === 3) {
          if (Rx.ⵠⲆᐃᐃⵠΔⲆ) {
            this.ΔᐃΔᐃⲆΔᐃ([0, 190, 4]);
          } else {
            this.ΔᐃΔᐃⲆΔᐃ([0, 191, 3]);
          }
        }
        if (Qx.mode === 0 || Qx.mode === 3 || Qx.mode === 7 || Qx.mode === 4) {
          Rx.ⵠΔⵠΔⵠ.Ⲇᐃⵠᐃᐃ = new Date().getTime();
          Rx.ⵠΔⵠΔⵠ.open = Xk;
          Rx.ⵠΔⵠΔⵠ.value = c[13];
          Tx.ⵠΔⵠΔⵠ.ⵠᐃᐃⲆᐃ();
        } else {
          Rx.ⵠΔⵠΔⵠ.Ⲇᐃⵠᐃᐃ = 0;
          Rx.ⵠΔⵠΔⵠ.open = false;
          Rx.ⵠΔⵠΔⵠ.value = 0;
        }
        Rx.ⵠΔᐃΔΔⲆΔ = c[12].toString();
      }
      Rx.ᐃⵠⲆᐃⲆ.enabled = c[6];
      Rx.ᐃⵠⲆᐃⲆ.Ⲇᐃⵠᐃᐃ = -1;
      Rx.ᐃⵠⲆᐃⲆ.label = null;
      Rx.ᐃⵠⲆᐃⲆ.now = -1;
      ΔⵠⵠⲆ.set("starve_token_id", Rx.ⵠΔᐃΔΔⲆΔ);
      if (Rx.reconnect.enabled) {
        Rx.reconnect.rotate = 0;
        Rx.reconnect.enabled = zl;
      } else {
        Px.ⵠⵠΔⲆᐃ(Tx.ⵠⵠΔⵠⵠ);
        if (ga) {
          ga("send", "event", "Game", "play", "S" + Px.ⵠᐃᐃⲆ + "A" + Px.ᐃⲆⵠⲆⵠ);
        }
      }
    };
    this.connect = function () {
      b.ΔⲆⵠⵠΔΔⲆ = 0;
      b.ⵠΔᐃᐃΔΔᐃ();
    };
    this.ΔᐃⵠᐃᐃᐃΔ = [];
    this.ΔΔⵠⲆⵠᐃⲆⲆᐃ = function (c) {
      const d = b.ⲆⵠⵠⲆⵠ.filter(a => a.gm === c);
      const f = {};
      for (let a = 0; a < d.length; a++) {
        const b = d[a];
        const c = b.r;
        if (c !== undefined) {
          if (f[c] === undefined) {
            f[c] = [];
          }
          f[c].push(b);
        }
      }
      function e(d) {
        b.ΔᐃⵠᐃᐃᐃΔ[c] = d;
        const e = f[d];
        const g = e[Math.floor(Math.random() * e.length)];
        b.ΔⲆⵠⵠⲆⲆⲆ({
          domain: Mf,
          is_tls: 1,
          id: g.id,
          p: g.p
        });
      }
      if (b.ΔᐃⵠᐃᐃᐃΔ[c] !== Pn) {
        e(b.ΔᐃⵠᐃᐃᐃΔ[c]);
        return;
      }
      let a = 1;
      function g(b) {
        const c = new oc.XMLHttpRequest();
        const d = b[0];
        const f = d.p;
        const g = d.r;
        const i = f[Math.floor(Math.random() * f.length)];
        c.open("GET", "https://" + i + "." + Mf + "/", Xk);
        c.onreadystatechange = function () {
          if (c.readyState === 4) {
            if (a === 0) {
              return;
            }
            a = 0;
            e(g);
          }
        };
        c.send();
      }
      for (let a in f) {
        g(f[a]);
      }
      oc.setTimeout(function () {
        if (a === 0) {
          return;
        }
        a = 0;
        const b = oc.Object.keys(f);
        e(b[Math.floor(Math.random() * b.length)]);
      }, 5000);
    };
    this.ⲆΔΔⵠᐃΔᐃⵠⲆ = function () {
      let a = Ff.ΔᐃⵠⵠⲆᐃᐃ[b.ΔᐃᐃⵠⲆ];
      console.log(undefined, undefined, undefined);
      let c = b.ⲆⲆΔΔᐃⵠᐃ[b.ΔᐃᐃⵠⲆ];
      let d = b.ⲆⵠⵠⲆⵠ.find(b => b.gm == a && b.idx == c);
      if (d === Bt) {
        b.ΔΔⵠⲆⵠᐃⲆⲆᐃ(a);
      } else {
        b.ΔⲆⵠⵠⲆⲆⲆ({
          domain: Mf,
          is_tls: 1,
          id: d.id,
          p: d.p
        });
      }
    };
    this.ⵠΔᐃᐃΔΔᐃ = function () {
      console.log(Yg);
      if (Tw !== undefined && Jf !== undefined) {
        console.log(Yh, undefined, oh);
        b.ΔⲆⵠⵠⲆⲆⲆ({
          domain: Mf,
          is_tls: 1,
          id: Jf + Tw,
          p: b.ⲆΔΔᐃΔᐃΔ[Jf]
        });
        return;
      }
      if (Af === undefined) {
        b.ⲆΔΔⵠᐃΔᐃⵠⲆ();
      } else {
        b.ΔⲆⵠⵠⲆⲆⲆ({
          domain: Af.domain,
          is_tls: Af.ssl,
          id: Af.id,
          p: [Af.p]
        });
      }
    };
    this.ΔⲆⵠⵠⲆⲆⲆ = function (c) {
      let d = c.domain;
      let e = c.is_tls;
      let g = c.id;
      let a = c.p;
      let i = a[Math.floor(Math.random() * a.length)];
      let j = e ? "wss://" + i + "." + d + "/" + g + "?" + Rx.ᐃⵠᐃᐃⵠⲆᐃ : "ws://" + d;
      console.log(sk, oh);
      b.ᐃⵠⲆΔ = new oc.WebSocket(j);
      b.ᐃⵠⲆΔ.binaryType = "arraybuffer";
      b.ᐃⵠⲆΔ.ⵠΔΔᐃᐃ = b.ⵠΔΔᐃᐃ;
      b.ᐃⵠⲆΔ.onmessage = function (a) {
        if (b.ⵠΔΔᐃᐃ == b.ⵠΔΔᐃᐃ) {
          if (typeof a.data == "string") {
            var c = JSON.parse(a.data);
            switch (c[0]) {
              case 0:
                b.ΔⲆⵠⲆⵠ(c);
                break;
              case 1:
                b.ΔΔⲆΔⲆⲆΔ(c[1]);
                break;
              case 2:
                b.ΔⵠⲆⵠⲆᐃΔᐃᐃ(c);
                break;
              case 3:
                b.ⵠᐃᐃⵠⵠΔⲆΔⵠ(c);
                break;
              case 4:
                b.message(c[1]);
                break;
              case 5:
                b.ⲆⵠᐃⲆΔⵠⲆ(c);
                break;
              case 6:
                b.ⲆᐃΔᐃⲆᐃⲆ(c[1]);
            }
          } else {
            var d = function (b, c, d) {
              const f = new Uint8Array(b);
              const e = f.length;
              let g;
              let h = Uw[e];
              let i = dg;
              if (Bt === h) {
                If += e * 2;
                if (If < 65535) {
                  g = be(Ii(e));
                } else {
                  If = e;
                  for (let a = 0; a < Uw.length; a++) {
                    if (Uw[a] !== undefined) {
                      const b = Uw[a][0];
                      Uw[a] = ct;
                      ve(b);
                    }
                  }
                  g = be(Ii(e));
                  ze();
                }
                i = Fk(g);
                Uw[e] = [g, i];
              } else {
                g = h[0];
                i = h[1];
              }
              for (let a = 0; a < f.length; a++) {
                i[a] = f[a];
              }
              ci(g, c, d);
              for (let a = 0; a < f.length; a++) {
                f[a] = i[a];
              }
              return f;
            }(a.data, Rx.ⵠΔⵠΔⵠΔᐃ, Rx.ᐃΔΔΔⵠⵠⲆΔⵠ);
            var e = d.buffer;
            switch (d[0]) {
              case 0:
                b.Δⵠⵠ(e, d, f);
                break;
              case 1:
                b.Δⵠⵠ(e, d, A);
                break;
              case 2:
                b.ⵠⵠΔⵠᐃΔΔΔᐃ();
                break;
              case 3:
                b.ΔᐃΔᐃⲆΔᐃ(new Uint16Array(e));
                break;
              case 4:
                b.ΔΔⲆⵠᐃⲆⵠⲆⲆ();
                break;
              case 5:
                b.ᐃⵠΔΔⵠⵠⲆΔΔ();
                break;
              case 6:
                b.ⲆⵠⲆⲆⲆⲆⲆᐃⲆ();
                break;
              case 7:
                b.ⵠⲆᐃⵠⵠⵠΔᐃⵠ(e);
                break;
              case 8:
                b.ⵠⲆⲆᐃᐃⵠΔⲆⲆ(d[1]);
                break;
              case 9:
                b.ⲆᐃⵠᐃᐃⲆΔⲆⵠ(d[1]);
                break;
              case 10:
                b.ⵠⲆᐃⵠΔΔΔ();
                break;
              case 11:
                b.ⵠⵠⲆⵠⲆΔᐃ(d[1], d[2]);
                break;
              case 12:
                b.ⵠⲆΔⵠⲆ(d[1]);
                break;
              case 13:
                b.ⲆⵠᐃΔΔⲆⲆᐃⵠ(d, e);
                break;
              case 14:
                b.ΔⵠᐃΔᐃᐃⲆᐃⲆ();
                break;
              case 15:
                b.ΔⵠᐃⵠΔᐃᐃⵠᐃ(d[1]);
                break;
              case 16:
                b.ᐃᐃΔᐃ(d[1], d[2], d[3], d[4], d[5], d[6], d[7]);
                break;
              case 17:
                b.ᐃᐃⲆᐃⲆⲆⲆΔᐃ(e);
                break;
              case 18:
                b.ⵠᐃⵠⲆⲆᐃᐃᐃⲆ();
                break;
              case 19:
                b.ⲆΔⲆⵠᐃ(d[1]);
                break;
              case 20:
                b.ⲆΔⵠᐃᐃΔΔⵠⵠ();
                break;
              case 21:
                b.ⲆᐃᐃⲆ(e);
                break;
              case 22:
                b.ⲆⵠⵠⵠⲆᐃⵠΔᐃ(d[1]);
                break;
              case 23:
                b.ⵠΔⲆⵠᐃⲆⵠⲆΔ(e);
                break;
              case 24:
                b.ΔⲆⲆᐃΔᐃⵠⲆⲆ(d[1]);
                break;
              case 25:
                b.ᐃⵠΔⲆⵠⵠΔᐃⵠ(d[1], e);
                break;
              case 26:
                b.ⲆᐃⲆΔᐃ(d);
                break;
              case 27:
                b.ⲆΔⲆΔⲆΔΔⲆΔ();
                break;
              case 28:
                b.ᐃⵠⲆᐃⲆ(d[1]);
                break;
              case 29:
                b.ᐃΔⵠⲆΔΔᐃΔⵠ();
                break;
              case 30:
                b.ΔⲆΔⵠᐃⵠΔᐃⲆ();
                break;
              case 31:
                b.ᐃⵠⲆΔᐃⵠᐃⵠⵠ(d);
                break;
              case 32:
                b.ΔᐃⵠΔΔΔᐃⲆⲆ(d[1]);
                break;
              case 33:
                b.ⵠΔᐃⵠᐃΔᐃⵠᐃ(d[1]);
                break;
              case 34:
                b.ⲆᐃⵠⲆⵠΔⵠⲆΔ();
                break;
              case 35:
                b.ΔᐃⵠⵠᐃΔΔᐃⵠ(d[1]);
                break;
              case 36:
                b.ⵠΔᐃΔⲆΔⵠ(d[1]);
                break;
              case 37:
                b.ⵠΔᐃᐃᐃᐃᐃΔΔ(d[1], d[2]);
                break;
              case 38:
                b.ⲆΔΔᐃⲆΔⲆᐃⵠ(d[1]);
                break;
              case 39:
                b.ΔᐃⵠⲆⲆⲆΔⵠⲆ(d[1]);
                break;
              case 40:
                b.ᐃⲆⵠⵠΔᐃⵠᐃⲆ();
                break;
              case 41:
                b.ⵠⲆᐃΔΔⲆΔⵠΔ(d);
                break;
              case 42:
                b.ΔⵠΔᐃⲆⵠᐃᐃΔ(d[1]);
                break;
              case 43:
                b.ⲆᐃⲆΔᐃᐃⵠᐃⲆ(d[1]);
                break;
              case 44:
                b.claimed(d[1]);
                break;
              case 45:
                b.ᐃⲆΔΔⲆᐃΔⵠⵠ(d[1]);
                break;
              case 46:
                b.ⲆΔΔΔΔⵠⲆΔⵠ(d[1]);
                break;
              case 47:
                b.ⵠⵠⵠⵠᐃ(d[1]);
                break;
              case 48:
                b.ⲆⵠΔⵠᐃᐃΔᐃⲆ();
                break;
              case 50:
                b.ⲆⵠᐃΔᐃΔᐃⲆᐃ(d[1], d[2], d[3]);
                break;
              case 51:
                b.ⵠᐃⵠᐃⵠΔⵠᐃΔ();
                break;
              case 52:
                b.ΔᐃⵠⵠⲆⲆⲆⵠΔ(d[1]);
                break;
              case 53:
                b.ⲆⵠᐃⲆⲆᐃⲆΔᐃ(d[1]);
                break;
              case 54:
                b.ⵠᐃⵠΔΔⵠΔᐃᐃ();
                break;
              case 55:
                b.ⲆΔⲆⵠⲆᐃⲆⵠⲆ(d[1]);
                break;
              case 56:
                b.ᐃⵠⲆᐃⲆΔⲆⲆⲆ(d[1]);
                break;
              case 57:
                b.ⵠⲆⲆⵠΔᐃⲆⲆᐃ();
                break;
              case 58:
                b.ΔΔⵠⵠⵠᐃΔΔᐃ();
                break;
              case 59:
                b.ᐃᐃᐃΔⲆⲆⲆΔᐃ();
                break;
              case 60:
                b.ⵠΔⲆⲆΔΔⵠⲆⲆ();
                break;
              case 61:
                Rx.ⵠⵠΔ.ⲆᐃⵠᐃⲆⲆⵠ = 0.2;
                Rx.ⵠⵠΔ.Ⲇᐃⵠᐃᐃ = 3;
                break;
              case 62:
                b.ⲆⲆⲆᐃᐃⲆⵠΔⲆ(new Uint16Array(e));
                break;
              case 63:
                b.ΔΔᐃΔᐃⲆⲆΔⲆ();
                break;
              case 64:
                b.ⲆⲆⵠΔΔⲆⵠⵠᐃ();
                break;
              case 65:
                b.ⵠΔⵠᐃΔⵠⲆᐃΔ();
                break;
              case 66:
                b.ᐃⵠΔⵠᐃⵠᐃⲆⲆ();
                break;
              case 67:
                b.ⵠⵠΔⲆⵠᐃΔⵠⲆ(d[1]);
                break;
              case 68:
                b.ᐃᐃⲆᐃΔΔⲆⵠⲆ(d[1]);
                break;
              case 69:
                b.ΔΔΔⵠΔᐃⵠ(d[1]);
                break;
              case 70:
                b.ⵠⵠᐃᐃᐃⲆⲆⲆⵠ(d[1]);
                break;
              case 71:
                b.Ⲇᐃᐃⵠⵠ(d[1]);
            }
          }
        }
      };
      b.ᐃⵠⲆΔ.onerror = function () {
        if (Rx.reconnect.enabled) {
          oc.setTimeout(b.timeout, 2500);
        }
      };
      this.ᐃⵠⲆΔ.onopen = function () {
        clearTimeout(b.ⵠⲆⵠⲆΔ);
        Rx.ᐃᐃΔΔⵠΔⵠ = Rx.ᐃᐃΔΔⵠΔⵠ || ⲆⵠΔⵠ.ᐃΔᐃΔᐃⵠᐃ("token");
        ⲆⵠΔⵠ.ΔⲆᐃⵠᐃⲆⵠ().then(a => {
          b.ᐃⵠⲆΔ[wf](Kq[Eq].stringify([Px.ᐃΔΔΔΔ.input.value, screen.width + 200, screen.height + 200, 52, Rx.ⵠⲆᐃⵠΔ, Rx.ⵠΔᐃΔΔⲆΔ, Rx.reconnect.enabled ? 1 : 0, Px.ⵠᐃᐃⲆ, Px.ᐃⲆⵠⲆⵠ, Px.ⵠΔᐃΔᐃ, Px.ᐃⵠΔⵠⵠ, Px.ⵠᐃⵠⲆᐃ, Px.ΔⲆⲆⲆⵠ, sy === undefined ? 0 : sy, qy === Bt ? 0 : qy.substring(qy.length - 50), kf, Rx.ᐃᐃΔΔⵠΔⵠ, a, Rx.ᐃᐃΔⵠⵠⲆⵠ, Rx.ⲆⵠΔΔⵠᐃᐃ]));
          Rx.ᐃᐃΔΔⵠΔⵠ = da;
          Rx.ᐃᐃΔⵠⵠⲆⵠ = Yh;
          Rx.ⲆⵠΔΔⵠᐃᐃ = undefined;
          Rx.ᐃⵠᐃᐃⵠⲆᐃ = undefined;
          b.ⵠⲆⵠⲆΔ = setTimeout(b.timeout, 2000);
        });
      };
    };
  }();
  function Nx(a) {
    if (a > 0) {
      return a * a;
    } else {
      return a;
    }
  }
  function Ox(a) {
    return oc.String.fromCharCode(a);
  }
  var Px;
  var Qx;
  var Rx;
  var Sx;
  var Tx = {
    ⲆΔᐃⲆⲆ: zk
  };
  var Ux = new function () {
    this.ⵠⵠΔⵠⵠ = 0;
    this.loaded = 0;
    this.transition = 0;
    this.ᐃⵠⲆᐃᐃᐃᐃ = function (a) {
      return a / Qx.w * 100;
    };
    this.ⲆᐃᐃⵠⲆⲆΔ = function (a) {
      return a / Qx.ᐃᐃᐃ * 100;
    };
    this.ᐃΔⵠᐃⲆⲆⲆ = function (a, b) {
      a = this.ᐃⵠⲆᐃᐃᐃᐃ(a) - this.ⵠΔⵠⲆⵠ.x;
      return this.ⵠΔⵠⲆⵠ.x + b * a;
    };
    this.ᐃⵠΔᐃᐃΔᐃ = function (a, b) {
      a = Math.abs(this.ⲆᐃᐃⵠⲆⲆΔ(a) - this.ⵠΔⵠⲆⵠ.y);
      return this.ⵠΔⵠⲆⵠ.y + b * a;
    };
    this.sample = {};
    this.ΔΔΔᐃⲆ = {};
    this.ᐃᐃⲆⲆ = {};
    this.ⲆⵠΔΔᐃᐃΔ = function (b, c, d, e) {
      for (var f = 0; f < c.length; f++) {
        var g = c[f];
        if (!b.playing(g)) {
          b.pos(d, e, -0.5, g);
          b.play(g);
          return true;
        }
      }
      return gn;
    };
    this.ᐃΔᐃ = function (a, b, c, d) {
      c = this.ᐃΔⵠᐃⲆⲆⲆ(c, ΔⲆᐃⲆᐃ.ᐃⲆΔⲆⲆᐃΔ);
      d = this.ᐃⵠΔᐃᐃΔᐃ(d, ΔⲆᐃⲆᐃ.ᐃⲆΔⲆⲆᐃΔ);
      console.log("HIT", a, b, c, d, ΔⲆᐃⲆᐃ.ᐃⲆΔⲆⲆᐃΔ);
      if (a) {
        if (b === 1) {
          this.ⲆⵠΔΔᐃᐃΔ(this.ᐃᐃⲆⲆ.ΔΔΔΔΔᐃⲆ, this.sample.ΔΔΔΔΔᐃⲆ, c, d);
        } else if (b === 0) {
          this.ⲆⵠΔΔᐃᐃΔ(this.ᐃᐃⲆⲆ.ⵠΔⲆᐃᐃⲆⲆ, this.sample.ⵠΔⲆᐃᐃⲆⲆ, c, d);
        }
      } else {
        this.ⲆⵠΔΔᐃᐃΔ(this.ᐃᐃⲆⲆ.ⲆⵠᐃⲆⵠ, this.sample.ⲆⵠᐃⲆⵠ, c, d);
      }
    };
    this.ⵠΔⵠⲆⵠ = {
      x: 0,
      y: 0
    };
    this.ΔⲆΔⵠᐃΔΔ = {
      x: 0,
      y: 0
    };
    this.ⵠΔⲆⵠΔ = {};
    this.ΔΔⵠⲆ = [];
    this.ΔΔⵠⵠΔ = function (a, b) {
      for (var c in this.ⵠΔⲆⵠΔ) {
        var d = this.ⵠΔⲆⵠΔ[c];
        d.check(a);
        if (d.ⵠⲆᐃΔⲆΔⲆ) {
          if (Qx.ᐃᐃᐃⵠⲆ.now < 460000) {
            d.ΔᐃᐃΔⵠ();
          }
          if (b) {
            d.ⵠⵠᐃ(a, this.ⵠΔⵠⲆⵠ);
          }
          if (this.transition) {
            d.transition();
          }
        }
      }
      this.transition &&= 0;
    };
    this.ΔΔⵠⲆᐃⵠⵠⲆⲆ = function () {
      var a = [];
      for (var b = 0; this.ΔΔⵠⲆ.length > b; b++) {
        if ((e = this.ΔΔⵠⲆ[b]).ⲆⵠᐃΔᐃⵠΔ) {
          a.push(b);
        } else if (!e.ⲆⵠᐃΔᐃⵠΔ && !Qx.ΔᐃⲆⲆΔ[e.ΔΔΔΔ]) {
          e.ⵠΔⵠᐃᐃΔⵠ();
          a.push(b);
        }
      }
      for (var c = Qx.Δⵠⵠ[0], d = (b = 0, 0); c.length > b && a.length > d; b++) {
        var e = c[b];
        if ((Qx.mode != 1 || Qx.ΔΔⵠⲆ[e.id].ᐃΔΔΔΔ !== "spectator") && e.ⲆΔΔᐃⵠ === -1 && e.ΔΔΔΔ !== Rx.ΔΔΔΔ) {
          this.ΔΔⵠⲆ[a[d]].ⵠᐃᐃⲆᐃ(e.ΔΔΔΔ);
          d++;
        }
      }
    };
    this.ΔⲆΔΔⲆⵠᐃΔⵠ = function () {
      this.ΔΔⵠⲆᐃⵠⵠⲆⲆ();
      for (var a = 0; this.ΔΔⵠⲆ.length > a; a++) {
        var b = this.ΔΔⵠⲆ[a];
        if (!b.ⲆⵠᐃΔᐃⵠΔ && b.check()) {
          b.ⵠⵠᐃ();
        }
      }
    };
    this.ⵠⲆⵠΔΔᐃΔΔⲆ = function (a) {
      if (a.x === this.ΔⲆΔⵠᐃΔΔ.x && this.ΔⲆΔⵠᐃΔΔ.y === a.y) {
        return 0;
      } else {
        this.ΔⲆΔⵠᐃΔΔ.x = a.x;
        this.ΔⲆΔⵠᐃΔΔ.y = a.y;
        this.ⵠΔⵠⲆⵠ.x = this.ᐃⵠⲆᐃᐃᐃᐃ(a.x);
        this.ⵠΔⵠⲆⵠ.y = this.ⲆᐃᐃⵠⲆⲆΔ(a.y);
        Howler.pos(this.ⵠΔⵠⲆⵠ.x, this.ⵠΔⵠⲆⵠ.y, 0);
        return 1;
      }
    };
    this.ⲆΔⵠᐃⵠᐃΔΔⵠ = function () {
      if (this.ⵠⵠΔⵠⵠ && this.loaded) {
        var a = Qx.ΔᐃⲆⲆΔ[Rx.ΔΔΔΔ];
        if (a) {
          a.ⲆΔΔᐃⵠ = 0;
          var b = this.ⵠⲆⵠΔΔᐃΔΔⲆ(a);
          if (Qx.mode !== 2 && Qx.mode !== 4 && Qx.mode !== 5) {
            this.ΔΔⵠⵠΔ(a, b);
          }
          this.ΔⲆΔΔⲆⵠᐃΔⵠ();
        }
      }
    };
    this.ⵠⲆᐃⲆᐃⲆⲆⵠⲆ = function () {
      for (var b in yx) {
        var c = yx[b];
        if (typeof c === "object" && c.path) {
          c.ᐃⵠⵠΔᐃ = new Howl({
            src: c.path,
            volume: 0,
            sprite: c.ᐃΔ
          });
        }
        for (var d in c.sample) {
          var f = c.sample[d];
          var g = [];
          console.log(da);
          for (var h = 0; h < f; h++) {
            var j = c.ᐃⵠⵠΔᐃ.play(d);
            c.ᐃⵠⵠΔᐃ.stop(j);
            c.ᐃⵠⵠΔᐃ.on("fade", function (a) {
              if (!this.volume(a)) {
                console.log(undefined, dg);
                this.stop(a);
              }
            }, j);
            g.push(j);
          }
          if (g.length > 1) {
            Ux.sample[d] = g;
          } else {
            Ux.sample[d] = g[0];
          }
          Ux.ᐃᐃⲆⲆ[d] = c.ᐃⵠⵠΔᐃ;
        }
      }
    };
    this.ΔⲆⲆᐃᐃⵠΔ = function (a, b, c) {
      for (var d = 0; d < a.length; d++) {
        b.volume(c, a[d]);
      }
    };
    this.ⵠⲆⵠᐃᐃΔⵠ = function (b, c, d, e, f, g) {
      var a = b;
      for (var i = 0; i < d; i++) {
        var j = a[i] = [];
        for (ΔΔⵠᐃ = 0; e > ΔΔⵠᐃ; ΔΔⵠᐃ++) {
          j[ΔΔⵠᐃ] = Ux.sample[f + ΔΔⵠᐃ][i];
          c.ᐃⵠⵠΔᐃ.volume(g, j[ΔΔⵠᐃ]);
        }
      }
    };
    this.ⵠᐃᐃⲆᐃ = function () {
      Ux.ⵠⲆᐃⲆᐃⲆⲆⵠⲆ();
      Ux.ΔΔΔᐃⲆ.ΔⵠᐃΔΔΔΔ = [];
      Ux.ΔΔΔᐃⲆ.ᐃΔⲆΔᐃ = [];
      Ux.ΔΔΔᐃⲆ.ᐃΔᐃΔⲆ = [];
      Ux.ⵠⲆⵠᐃᐃΔⵠ(Ux.ΔΔΔᐃⲆ.ΔⵠᐃΔΔΔΔ, yx.ΔᐃⵠⲆⵠⵠΔ, 8, 3, "p", 0.15);
      Ux.ⵠⲆⵠᐃᐃΔⵠ(Ux.ΔΔΔᐃⲆ.ᐃΔⲆΔᐃ, yx.ΔⵠᐃⲆᐃⵠⵠ, 8, 4, "w", 0.15);
      Ux.ⵠⲆⵠᐃᐃΔⵠ(Ux.ΔΔΔᐃⲆ.ᐃΔᐃΔⲆ, yx.ΔᐃᐃⲆᐃⲆᐃ, 8, 3, "d", 0.09);
      Ux.ΔⲆⲆᐃᐃⵠΔ(Ux.sample.ⲆⵠᐃⲆⵠ, Ux.ᐃᐃⲆⲆ.ⲆⵠᐃⲆⵠ, 0.15);
      Ux.ΔⲆⲆᐃᐃⵠΔ(Ux.sample.ⵠΔⲆᐃᐃⲆⲆ, Ux.ᐃᐃⲆⲆ.ⵠΔⲆᐃᐃⲆⲆ, 0.2);
      Ux.ΔⲆⲆᐃᐃⵠΔ(Ux.sample.ΔΔΔΔΔᐃⲆ, Ux.ᐃᐃⲆⲆ.ΔΔΔΔΔᐃⲆ, 1);
      Ux.ⵠΔⲆⵠΔ.ᐃΔᐃⲆΔᐃⵠⲆⲆ = new Fx(12, this.sample.ᐃΔⲆⵠΔΔⲆ, this.sample.ᐃᐃⲆΔⵠⲆᐃ, 5000, 0.05, 0.4, yx.ⲆᐃⲆⲆᐃΔᐃ.ᐃⵠⵠΔᐃ, 3000, {
        x: ns.ᐃΔᐃΔΔΔⲆ,
        y: ns.ΔⲆΔΔⲆΔⵠ,
        w: Qx.w,
        ᐃᐃᐃ: Qx.ᐃᐃᐃ
      }, {
        x: ns.ᐃΔᐃΔΔΔⲆ - 2300,
        y: ns.ΔⲆΔΔⲆΔⵠ - 4000,
        w: Qx.w,
        ᐃᐃᐃ: Qx.ᐃᐃᐃ
      }, {
        x: ns.ᐃΔᐃΔΔΔⲆ - 1500,
        y: ns.ΔⲆΔΔⲆΔⵠ - 2000,
        w: Qx.w,
        ᐃᐃᐃ: Qx.ᐃᐃᐃ
      });
      Ux.ⵠΔⲆⵠΔ.ΔⵠⵠΔⵠⵠⵠᐃⵠ = new Fx(12, this.sample.ⵠΔⲆⵠᐃᐃⵠ, this.sample.ΔⲆⲆⲆΔⲆᐃ, 5000, 0.03, 0.25, yx.ⲆᐃⲆⲆᐃΔᐃ.ᐃⵠⵠΔᐃ, 3000, {
        x: 0,
        y: ns.ΔⲆΔΔⲆΔⵠ + 800,
        w: ns.ᐃΔᐃΔΔΔⲆ - 2300,
        ᐃᐃᐃ: Qx.ᐃᐃᐃ
      }, {
        x: -100,
        y: ns.ΔⲆΔΔⲆΔⵠ - 300,
        w: ns.ᐃΔᐃΔΔΔⲆ - 100,
        ᐃᐃᐃ: Qx.ᐃᐃᐃ
      }, {
        x: -100,
        y: ns.ΔⲆΔΔⲆΔⵠ + 400,
        w: ns.ᐃΔᐃΔΔΔⲆ - 1400,
        ᐃᐃᐃ: Qx.ᐃᐃᐃ
      });
      Ux.ⵠΔⲆⵠΔ.ⵠᐃⵠⲆᐃⵠⲆ = new Fx(12, this.sample.ⵠⵠⲆᐃⲆΔⲆ, this.sample.ⵠΔΔⵠΔⲆⲆ, 5000, 0.01, 0.22, yx.ⲆᐃⲆⲆᐃΔᐃ.ᐃⵠⵠΔᐃ, 3000, {
        x: -100,
        y: -100,
        w: Qx.w + 200,
        ᐃᐃᐃ: ns.ΔⲆΔΔⲆΔⵠ - 1000
      }, {
        x: -100,
        y: -100,
        w: Qx.w + 200,
        ᐃᐃᐃ: ns.ΔⲆΔΔⲆΔⵠ + 600
      }, {
        x: -100,
        y: -100,
        w: Qx.w + 200,
        ᐃᐃᐃ: ns.ΔⲆΔΔⲆΔⵠ + 100
      });
      for (var a = 0; a < 8; a++) {
        Ux.ΔΔⵠⲆ[a] = new Ix(a);
      }
      Ux.ΔΔⵠⲆ[0].ⵠᐃᐃⲆᐃ(Rx.ΔΔΔΔ);
      Ux.loaded = 1;
    };
    this.ⲆΔⵠⵠΔᐃᐃᐃᐃ = function () {
      if (!this.transition && Qx.ᐃᐃᐃⵠⲆ.now < 460000) {
        this.transition = 1;
      }
    };
    this.ⵠⵠΔⲆᐃ = function () {
      if (this.ⵠⵠΔⵠⵠ && this.loaded) {
        for (var a in Ux.sample) {
          var b = Ux.sample[a];
          if (typeof b === "object") {
            for (var c = 0; c < b.length; c++) {
              Ux.ᐃᐃⲆⲆ[a].stop(b[c]);
            }
          } else {
            Ux.ᐃᐃⲆⲆ[a].stop(b);
          }
        }
        for (c = 0; c < Ux.ΔΔⵠⲆ.length; c++) {
          Ux.ΔΔⵠⲆ[c].ⵠΔⵠᐃᐃΔⵠ();
        }
      }
    };
    this.select = function () {
      if (Ux.ⵠⵠΔⵠⵠ) {
        Ux.ⵠⵠΔⲆᐃ();
      } else {
        if (!Ux.loaded) {
          Ux.ⵠᐃᐃⲆᐃ();
        }
        Ux.ΔΔⵠⲆ[0].ΔΔΔΔ = Rx.ΔΔΔΔ;
        Ux.ΔΔⵠⲆ[0].ⲆⵠᐃΔᐃⵠΔ = 0;
        Ux.ⲆΔⵠⵠΔᐃᐃᐃᐃ();
      }
      Ux.ⵠⵠΔⵠⵠ = !Ux.ⵠⵠΔⵠⵠ;
    };
  }();
  var Vx = new function () {
    this.ΔⵠᐃΔΔⲆⲆ = function () {
      this.ⲆⲆⲆⲆⵠ = 81;
      this.ⵠᐃΔⵠᐃ = 68;
      this.ⵠᐃᐃⵠΔ = 90;
      this.ⲆΔⵠⲆⵠⵠᐃ = 83;
    };
    this.ⵠⵠⵠⲆⵠⵠΔ = function () {
      this.ⲆⲆⲆⲆⵠ = 65;
      this.ⵠᐃΔⵠᐃ = 68;
      this.ⵠᐃᐃⵠΔ = 87;
      this.ᐃⲆⵠᐃⲆ = 83;
    };
    this.ΔᐃᐃΔΔ = 0;
    this.ⲆΔⵠⲆⵠⵠᐃ = 1;
    this.ᐃΔΔⲆᐃᐃⲆ = 49;
    this.ⵠⵠⲆⵠⵠⲆΔ = 50;
    this.ⵠⲆΔΔⵠⵠⲆ = 51;
    this.ⵠⲆᐃΔⵠⵠⲆ = 52;
    this.ᐃΔΔⲆΔΔⲆⲆⲆ = 53;
    this.ᐃΔⲆᐃᐃⲆⲆ = 17;
    this.ⵠⵠⲆᐃⲆᐃᐃ = 37;
    this.ⲆΔⵠΔΔᐃᐃ = 39;
    this.ⲆⲆⲆⲆᐃᐃΔ = 38;
    this.ᐃΔᐃⵠᐃⲆΔ = 40;
    this.ⲆᐃⵠΔΔⲆⲆ = 32;
    this.ᐃᐃⲆᐃⵠΔΔ = 82;
    this.ⲆᐃⵠΔⲆⵠᐃ = 71;
    this.ⵠᐃΔⵠΔΔᐃ = 86;
    this.ᐃⲆⲆⲆⲆⲆΔ = 66;
    this.ⵠⵠⵠⲆⵠⵠΔ();
    this.keys = new Array(255);
    for (var a = 0; a < 255; a++) {
      this.keys[a] = this.ΔᐃᐃΔΔ;
    }
    this.up = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      this.keys[b] = this.ΔᐃᐃΔΔ;
    };
    this.down = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      if (this.ⲆⲆⲆⲆⵠ == b || this.ⵠⵠⲆᐃⲆᐃᐃ == b) {
        this.ᐃᐃⵠΔΔⵠⵠ();
      } else if (b == this.ⵠᐃᐃⵠΔ || b == this.ⲆⲆⲆⲆᐃᐃΔ) {
        this.ⲆᐃⲆⵠᐃᐃΔ();
      } else if (this.ⲆΔⵠⲆⵠⵠᐃ == b || b == this.ΔΔⲆᐃΔⲆⵠΔⲆ) {
        this.ΔᐃⵠᐃⲆΔΔ();
      } else if (this.ⵠᐃΔⵠᐃ == b || this.ⲆΔⵠΔΔᐃᐃ == b) {
        this.ΔΔⲆⲆᐃⵠᐃ();
      }
      this.keys[b] = this.ⲆΔⵠⲆⵠⵠᐃ;
      return b;
    };
    this.ᐃᐃⵠΔΔⵠⵠ = function () {
      this.keys[this.ⵠᐃΔⵠᐃ] = this.ΔᐃᐃΔΔ;
      this.keys[this.ⲆΔⵠΔΔᐃᐃ] = this.ΔᐃᐃΔΔ;
    };
    this.ΔΔⲆⲆᐃⵠᐃ = function () {
      this.keys[this.ⲆⲆⲆⲆⵠ] = this.ΔᐃᐃΔΔ;
      this.keys[this.ⵠⵠⲆᐃⲆᐃᐃ] = this.ΔᐃᐃΔΔ;
    };
    this.ΔᐃⵠᐃⲆΔΔ = function () {
      this.keys[this.ⵠᐃᐃⵠΔ] = this.ΔᐃᐃΔΔ;
      this.keys[this.ⲆⲆⲆⲆᐃᐃΔ] = this.ΔᐃᐃΔΔ;
    };
    this.ⲆᐃⲆⵠᐃᐃΔ = function () {
      this.keys[this.ᐃⲆⵠᐃⲆ] = this.ΔᐃᐃΔΔ;
      this.keys[this.ᐃΔᐃⵠᐃⲆΔ] = this.ΔᐃᐃΔΔ;
    };
    this.ⲆⵠⵠᐃⵠⲆΔ = function () {
      this.keys[this.ⵠᐃΔⵠᐃ] = this.ΔᐃᐃΔΔ;
      this.keys[this.ⲆΔⵠΔΔᐃᐃ] = this.ΔᐃᐃΔΔ;
      this.keys[this.ⲆⲆⲆⲆⵠ] = this.ΔᐃᐃΔΔ;
      this.keys[this.ⵠⵠⲆᐃⲆᐃᐃ] = this.ΔᐃᐃΔΔ;
      this.keys[this.ⵠᐃᐃⵠΔ] = this.ΔᐃᐃΔΔ;
      this.keys[this.ⲆⲆⲆⲆᐃᐃΔ] = this.ΔᐃᐃΔΔ;
      this.keys[this.ᐃⲆⵠᐃⲆ] = this.ΔᐃᐃΔΔ;
      this.keys[this.ᐃΔᐃⵠᐃⲆΔ] = this.ΔᐃᐃΔΔ;
    };
    this.ᐃᐃᐃᐃⵠᐃᐃ = function () {
      return this.keys[this.ⲆⲆⲆⲆⵠ] || this.keys[this.ⵠⵠⲆᐃⲆᐃᐃ];
    };
    this.ᐃΔⵠᐃΔᐃΔ = function () {
      return this.keys[this.ⵠᐃΔⵠᐃ] || this.keys[this.ⲆΔⵠΔΔᐃᐃ];
    };
    this.ΔᐃᐃᐃⵠᐃⲆ = function () {
      return this.keys[this.ⵠᐃᐃⵠΔ] || this.keys[this.ⲆⲆⲆⲆᐃᐃΔ];
    };
    this.ⵠΔΔⲆΔᐃⵠ = function () {
      return this.keys[this.ᐃⲆⵠᐃⲆ] || this.keys[this.ᐃΔᐃⵠᐃⲆΔ];
    };
    this.ⲆⵠⲆⲆᐃⲆᐃᐃⵠ = function () {
      return this.keys[this.ᐃΔⲆᐃᐃⲆⲆ];
    };
    this.ΔⵠⵠⵠΔΔⵠΔⲆ = function () {
      return this.keys[this.ᐃΔΔⲆᐃᐃⲆ];
    };
    this.ΔᐃⲆⵠΔᐃⵠΔⵠ = function () {
      return this.keys[this.ⵠⵠⲆⵠⵠⲆΔ];
    };
    this.ΔⲆⵠⵠⵠⵠΔⵠᐃ = function () {
      return this.keys[this.ⵠⲆΔΔⵠⵠⲆ];
    };
    this.ⲆΔⵠⵠΔⲆⲆⵠᐃ = function () {
      return this.keys[this.ⵠⲆᐃΔⵠⵠⲆ];
    };
    this.ΔⵠⲆⲆⲆⵠᐃΔΔ = function () {
      return this.keys[this.ⲆᐃⵠΔΔⲆⲆ];
    };
    this.ΔⵠⵠⲆⲆⵠⵠⲆᐃ = function () {
      return this.keys[this.ᐃᐃⲆᐃⵠΔΔ];
    };
    this.ᐃΔⵠⲆⵠⵠⲆᐃⲆ = function () {
      return this.keys[this.ⲆᐃⵠΔⲆⵠᐃ];
    };
    this.ᐃⵠⵠⵠⵠⲆΔⲆᐃ = function () {
      return this.keys[this.ⵠᐃΔⵠΔΔᐃ];
    };
    this.ᐃⲆⲆⵠⲆⵠᐃⵠᐃ = function () {
      return this.keys[this.ᐃⲆⲆⲆⲆⲆΔ];
    };
  }();
  var Wx = new function () {
    this.ⲆΔⵠⲆⵠⵠᐃ = 0;
    this.ΔᐃᐃΔΔ = 1;
    this.IDLE = 2;
    this.ⲆⵠⵠⵠⵠΔΔ = 0;
    this.ΔⲆⵠⲆᐃᐃⵠⵠⲆ = 1;
    this.ΔⵠⲆⲆ = {
      x: 0,
      y: 0
    };
    this.ⵠⵠΔᐃⵠⲆΔ = 0;
    this.ⲆⵠⲆⲆⲆᐃⲆ = 0;
    this.angle = 0;
    this.state = this.IDLE;
    this.ᐃⵠⲆⲆ = this.ⲆⵠⵠⵠⵠΔΔ;
    this.down = function () {
      this.state = this.ⲆΔⵠⲆⵠⵠᐃ;
    };
    this.up = function () {
      this.state = this.ΔᐃᐃΔΔ;
    };
    this.ⵠⵠᐃ = function () {
      return (this.ⵠⵠΔᐃⵠⲆΔ != this.ΔⵠⲆⲆ.x || this.ΔⵠⲆⲆ.y != this.ⲆⵠⲆⲆⲆᐃⲆ) && (this.ⵠⵠΔᐃⵠⲆΔ = this.ΔⵠⲆⲆ.x, this.ⲆⵠⲆⲆⲆᐃⲆ = this.ΔⵠⲆⲆ.y, true);
    };
  }();
  var Xx = 0;
  var Yx = 0;
  var Zx = new function (c, e, f) {
    this.Δᐃ = c;
    this.Δ = e;
    this.ⲆΔⵠΔⲆΔⵠ = {
      translate: {
        y: 0,
        x: 0
      },
      style: document.getElementById("loading").style,
      ⵠⵠᐃ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ⲆΔⵠΔⲆΔⵠ.style.position = "absolute";
    this.ⲆΔⵠΔⲆΔⵠ.style.display = "inline-block";
    this.ⲆΔⵠΔⲆΔⵠ.ⵠⵠᐃ();
    this.ⲆΔᐃⲆⲆ = Xr;
    this.stop = function () {
      this.ⲆΔᐃⲆⲆ = false;
    };
    this.ⵠⵠⲆΔⵠΔᐃ = {
      total: 1
    };
    var i = this;
    function j() {}
    var k = 0;
    function n(a) {
      if (a.indexOf("normal-mode") !== -1 || a.indexOf("player0") !== -1) {
        return 1;
      } else if (a.indexOf("day-bag") !== -1 || a.indexOf("night-bag") !== -1 || a.indexOf("day-book") !== -1 || a.indexOf("night-book") !== -1 || a.indexOf("day-player") !== -1 || a.indexOf("night-player") !== -1 || a.indexOf("day-accessory") !== -1 || a.indexOf("night-accessory") !== -1 || a.indexOf("day-crate") !== -1 || a.indexOf("night-crate") !== -1 || a.indexOf("day-skin") !== -1 || a.indexOf("night-skin") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-rock") !== -1 || a.indexOf("night-rock") !== -1 || a.indexOf("day-flower") !== -1 || a.indexOf("night-flower") !== -1 || a.indexOf("day-leaf") !== -1 || a.indexOf("night-leaf") !== -1 || a.indexOf("day-herb") !== -1 || a.indexOf("night-herb") !== -1 || a.indexOf("day-shell") !== -1 || a.indexOf("night-shell") !== -1 || a.indexOf("day-hand-skin") !== -1 || a.indexOf("night-hand-skin") !== -1 || a.indexOf("bignight") !== -1 || a.indexOf("bigday") !== -1 || a.indexOf("bigzday") !== -1 || a.indexOf("bigznight") !== -1 || a.indexOf("tutorial-box") !== -1 || a.indexOf("tuto-") !== -1 || a.indexOf("-leaderboard-") !== -1 || a.indexOf("-lead-") !== -1 || a.indexOf("day-lava-") !== -1 || a.indexOf("night-lava-") !== -1 || a.indexOf("-click.png") !== -1 || a.indexOf("-in.png") !== -1 || a.indexOf("-fog") !== -1 || a.indexOf("-lava") !== -1 || a.indexOf("pebblecompo") !== -1 || a.indexOf("avatar-player") !== -1) {
        return 0;
      } else {
        return 1;
      }
    }
    this.ΔⵠⲆⵠⵠ = function () {
      i.ⵠⵠᐃ();
      if (++k == 40) {
        i.stop();
        j();
        return;
      }
      oc.setTimeout(i.ΔⵠⲆⵠⵠ, 33);
    };
    this.ⵠⵠΔⲆᐃ = function (a) {
      j = a;
      i.ΔⵠⲆⵠⵠ();
    };
    new Date().getTime();
    Object.keys(ᐃᐃ).length;
    console.log(Rr, undefined);
    for (var o in ᐃᐃ) {
      if (n(ᐃᐃ[o]) === 0) {
        0;
      }
    }
    console.log(undefined, undefined);
    function p() {
      if (this.ΔΔᐃⵠΔⵠⵠ !== 0) {
        return this.ΔΔᐃⵠΔⵠⵠ;
      } else {
        this.ΔΔᐃⵠΔⵠⵠ = 2;
        this.src = this.ⲆᐃⲆⵠᐃ;
        return 0;
      }
    }
    function g(a) {
      this.ΔΔᐃⵠΔⵠⵠ = 1;
    }
    var l = 0;
    function q() {
      console.log(Yh);
      if (l !== 1) {
        l = 1;
        console.log(da);
        if (qb !== gb) {
          gb();
        }
        qb();
        var a = ⲆⵠΔⵠ.ᐃΔᐃΔᐃⵠᐃ("server");
        if (a !== null) {
          Mx.ᐃⵠⵠⲆᐃⲆⲆ = 1;
          Mx.ⲆⵠⵠⲆⵠ = [{
            nu: 0,
            m: 100,
            i: "server" + a + ".starve.io",
            p: 443,
            a: a,
            ssl: 1
          }];
        }
        Mx.ⵠⲆΔᐃⲆΔⵠⵠΔ();
        setTimeout(f, 100);
      }
    }
    function b() {
      let a = function () {
        Mx.ⵠⲆⵠⲆⵠΔⲆ(q);
      };
      if (document.fonts && document.fonts.check) {
        if (document.fonts.check("1em Baloo Paaji")) {
          setTimeout(a, 100);
        } else {
          setTimeout(b, 100);
        }
      } else {
        setTimeout(a, 1000);
      }
    }
    function d() {
      this.ᐃᐃⲆⲆΔⲆⲆ++;
      console.warn(`Image (${this.src}) failed to load, attempt ${this.ᐃᐃⲆⲆΔⲆⲆ}`, this);
      if (this.ᐃᐃⲆⲆΔⲆⲆ > 3) {
        console.warn("Failed to load image too many times");
      }
      var a = this.ᐃᐃⲆⲆΔⲆⲆ;
      var b = this.src;
      var c = n(b) === 0 ? 10000 : 2000;
      setTimeout(function () {
        for (var c in ΔᐃⲆⲆⲆΔᐃ) {
          if (b.indexOf(ΔᐃⲆⲆⲆΔᐃ[c]) !== -1) {
            ᐃᐃ[c] = new Image();
            ᐃᐃ[c].onload = g;
            ᐃᐃ[c].onerror = d;
            ᐃᐃ[c].ᐃᐃⲆⲆΔⲆⲆ = a;
            ᐃᐃ[c].src = b;
            break;
          }
        }
      }, c);
    }
    function s(a) {
      for (var b in ᐃᐃ) {
        var c = ᐃᐃ[b];
        if (typeof c === "string" && n(c) === a) {
          ᐃᐃ[b] = new Image();
          ᐃᐃ[b].ΔΔᐃⵠΔⵠⵠ = 0;
          ᐃᐃ[b].ᐃᐃⲆⲆΔⲆⲆ = 0;
          ᐃᐃ[b].onload = g;
          ᐃᐃ[b].onerror = d;
          ᐃᐃ[b].ⵠⲆⵠᐃⲆΔᐃ = p;
          ᐃᐃ[b].ⲆᐃⲆⵠᐃ = c;
        }
      }
    }
    s(1);
    s(0);
    Cu(1, "l", 20, "#000");
    b();
    Pc();
    this.ⵠⵠᐃ = function () {
      this.ⲆΔⵠΔⲆΔⵠ.translate.x = (yo - 500) / 2;
      this.ⲆΔⵠΔⲆΔⵠ.translate.y = (hq - 150) / 2;
      var a = 2500 / (40 - k + 1) - 48;
      this.ⲆΔⵠΔⲆΔⵠ.translate.y -= a;
      this.ⲆΔⵠΔⲆΔⵠ.ⵠⵠᐃ();
    };
    this.ⲆΔⵠΔⲆΔⵠ.ⵠⵠᐃ();
    this.ⲆⵠⵠΔ = function () {
      try {
        Dc();
      } catch (a) {}
      this.ⵠⵠᐃ();
    };
  }(fo, zo, function () {
    Qp();
    Tx = new ix(fo, zo);
    (Px = new hx(fo, zo)).ⲆᐃᐃΔΔᐃΔΔᐃ();
    Sx = new kx(fo, zo);
    Qx = new Hf();
    Rx = new bx();
    Zx.ⵠⵠΔⲆᐃ(function () {
      Zx.ⲆΔⵠΔⲆΔⵠ.style.display = "none";
      Px.ⵠⵠΔⵠⵠ();
    });
  });
  function $x() {
    try {
      oc.Widget.adsRefresh();
    } catch (a) {}
  }
  oc.onbeforeunload = function () {
    if (Tx.ⲆΔᐃⲆⲆ) {
      return "Are you sure you want quit starve.io ;-; ?";
    }
  };
  Cr();
  (function b(a) {
    oc.requestAnimationFrame(b);
    Yx = (a - Xx) / 1000;
    Xx = a;
    Yx = Yx > 1 ? 1 : Yx;
    if (Tx.ⲆΔᐃⲆⲆ) {
      Tx.ⲆⵠⵠΔ();
    } else {
      zo.clearRect(0, 0, yo, hq);
      if (Zx.ⲆΔᐃⲆⲆ) {
        Zx.ⲆⵠⵠΔ();
      } else if (Px.ⲆΔᐃⲆⲆ) {
        Px.ⲆⵠⵠΔ();
      } else if (Sx.ⲆΔᐃⲆⲆ) {
        Sx.ⲆⵠⵠΔ();
      }
    }
  })(0);
  var _x = 0;
  function hy() {
    ly.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", Hl);
    ly.send();
  }
  var ly = new XMLHttpRequest();
  function ny(b, c, d, e, f, i) {
    const a = (12345 + (b + 31491) * 1103515245) % 2147483648;
    const j = (0 << (f >> 24 & 255)) + (16 << (f & 255)) + (8 << (f >> 16 & 255)) + (24 << (f >> 8 & 255));
    const k = (i | 58509) & ~(i & 58509);
    const h = Gx(a, (0 << (c >> 8 & 255)) + (16 << (c >> 24 & 255)) + (24 << (c >> 16 & 255)) + (8 << (c & 255)), ~(d & 49073) & (d | 49073), (16 << (e >> 8 & 255)) + (0 << (e & 255)) + (8 << (e >> 16 & 255)) + (24 << (e >> 24 & 255)));
    (function (b, c, d) {
      const e = (8 << (b >> 8 & 255)) + (0 << (b & 255)) + (16 << (b >> 16 & 255)) + (24 << (b >> 24 & 255));
      const f = (c + 2367) % 65335;
      const g = ~(d & 46975) & 46975 | ~(d & 46975) & d;
      Lr(e, f, g, e, f);
      Kf(e, f, g, e);
    })(j, k, a);
    return ~(h & 11870) & h | ~(h & 11870) & 11870;
  }
  ly.onreadystatechange = function () {
    if (this.readyState === 4) {
      this.status;
    }
  };
  var by = "https://token.starve.io/";
  var dy = "https://token2.starve.io/";
  var oy = 0;
  var my = 1;
  var cy = 4;
  var py = undefined;
  var qy = Rr;
  var sy = oh;
  const ty = 6329147;
  const uy = 6329147 .ⲆⵠΔⵠᐃᐃΔ;
  const vy = `const ⵠⲆⵠⲆΔⲆⲆ = (typeof ΔΔᐃᐃΔⵠⵠ === "${uy}") ? 1 : 0; return ⵠⲆⵠⲆΔⲆⲆ;`;
  var wy = 0;
  oc.ⲆⵠᐃⲆΔⲆⵠ = function () {
    wy = 1;
  };
  var yy = {
    ᐃⲆΔⵠΔⲆΔⵠΔ: "ACCESS_TOKEN"
  };
  var ky = document.createElement("script");
  ky.type = "text/javascript";
  ky.async = true;
  ky.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
  ky.addEventListener("load", function (a) {
    oc.XPayStationWidget.init(yy);
    oc.XPayStationWidget.on("status-done", Ny);
  }, Wh);
  document.getElementsByTagName("head")[0].appendChild(ky);
  oc.fbAsyncInit = function () {
    jy();
    console.log(undefined);
  };
  (function (a, b, c) {
    var d;
    var e = a.getElementsByTagName(b)[0];
    if (!a.getElementById(c)) {
      (d = a.createElement(b)).id = c;
      d.src = "https://connect.facebook.net/en_US/sdk.js";
      e.parentNode.insertBefore(d, e);
    }
  })(document, "script", "facebook-jssdk");
  var zy = undefined;
  var Ay = Wb;
  function Gy() {
    oc.gapi.auth2.init({
      client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
      scope: "https://www.googleapis.com/auth/userinfo.profile"
    }).then(a => {
      (zy = a).isSignedIn.listen(Hy);
      zy.currentUser.listen(By);
      if (zy.isSignedIn.get()) {
        zy.signIn();
      }
      Ey();
    });
  }
  function Hy(a) {}
  function By(a) {
    if (qy === undefined && Ay !== Yg && (qy = Ay.getAuthResponse().id_token, sk !== qy)) {
      py = oy;
      sy = Ay.getBasicProfile().getId();
      oc.ⲆⵠᐃⲆΔⲆⵠ();
      return;
    }
    if (a !== undefined && a.isSignedIn() === Cq) {
      sy = (Ay = a).id;
      sy = Ay.getBasicProfile().getId();
      qy = Ay.getAuthResponse().id_token;
      py = oy;
      oc.ⲆⵠᐃⲆΔⲆⵠ();
    }
  }
  function Ey() {
    if (zy) {
      Ay = zy.currentUser.get();
    }
  }
  function Dy(a) {
    var b = new XMLHttpRequest();
    b.open("GET", by + "setRegion?token=" + qy + "&userid=" + sy + "&region=" + a);
    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    b.onreadystatechange = function () {
      if (this.readyState === 4 && this.status === 200) {
        if (b.responseText !== "0") {
          Px.ⲆⵠⲆᐃ(Px.ⲆⵠⲆⲆⲆ);
        } else {
          Px.ⲆⵠⲆᐃ(Px.ΔᐃⲆᐃᐃ);
        }
      }
    };
    b.send();
  }
  function Iy() {
    if (Px.ⵠΔⵠⲆᐃ >= 300 || Px.ⵠΔᐃΔᐃΔⵠ <= 0) {
      var a = document.getElementById("account_nickname_input").value.trim();
      document.getElementById("account_nickname_input").value = a;
      if (a.length >= 1 && a.length <= 20) {
        var b = new XMLHttpRequest();
        b.open("GET", by + "changeNickname?token=" + qy + "&userid=" + sy + "&nickname=" + encodeURIComponent(a));
        b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        b.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
            var a = Number(b.responseText);
            if (a > 0) {
              Px.ⵠΔⵠⲆᐃ -= a;
            }
            Px.ⵠΔᐃΔᐃΔⵠ = 1;
            Px.ⲆⵠⲆᐃ(Px.ⲆⵠᐃΔⵠ);
          }
        };
        b.send();
      }
    }
  }
  function Ky(a) {
    if (sy) {
      var b = new XMLHttpRequest();
      b.open("GET", by + "xsolla?userid=" + sy + "&item=" + a);
      b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      b.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
          yy.access_token = b.responseText;
          oc.XPayStationWidget.init(yy);
          oc.XPayStationWidget.open();
        }
      };
      b.send();
    }
  }
  function My(b, c, d, e) {
    b = b === undefined ? Px.ΔⵠⲆΔΔΔⵠ : b;
    c = c === undefined ? Px.ᐃΔⲆᐃᐃΔΔ : c;
    d = os === d ? Px.ΔⵠⵠΔⵠᐃᐃ : d;
    e = e === da ? Px.ⲆⵠΔΔⵠΔⲆ : e;
    if (Px.ΔⵠⲆΔΔΔⵠ !== b || c !== Px.ᐃΔⲆᐃᐃΔΔ || d !== Px.ΔⵠⵠΔⵠᐃᐃ || e !== Px.ⲆⵠΔΔⵠΔⲆ) {
      Px.ΔⵠⲆΔΔΔⵠ = b;
      Px.ᐃΔⲆᐃᐃΔΔ = c;
      Px.ΔⵠⵠΔⵠᐃᐃ = d;
      Px.ⲆⵠΔΔⵠΔⲆ = e;
      if (e === Px.ᐃⲆΔⵠⲆⲆⲆ) {
        e = "0";
      } else if (Px.ΔΔᐃΔΔΔΔ === e) {
        e = "1";
      } else if (Px.ⵠᐃᐃΔΔⵠᐃ === e) {
        e = "2";
      } else if (e === Px.ΔᐃⵠᐃⲆⲆⲆ) {
        e = "3";
      } else if (e === Px.ΔⵠᐃᐃΔΔΔ) {
        e = "4";
      } else if (e === Px.ⲆⲆΔΔⵠᐃⵠ) {
        e = "5";
      }
      if (Px.ᐃⵠᐃΔΔⲆⵠ === c) {
        c = "total";
      } else if (c === Px.ΔⵠΔⵠⵠⵠⵠ) {
        c = "normal";
      } else if (c === Px.ⲆⲆᐃΔⲆᐃᐃ) {
        c = "zombie";
      } else if (Px.ⲆΔⲆΔΔⲆᐃ === c) {
        c = "vampire";
      } else if (c === Px.ᐃⵠⲆⵠⲆⲆΔ) {
        c = "forest";
      }
      if (Px.ΔⵠⵠΔⲆⲆᐃ === b) {
        b = "all";
      }
      if (Px.ⲆΔΔⵠΔᐃΔ === b) {
        b = "week";
      }
      if (Px.ᐃΔΔⵠⲆΔⲆ === b) {
        b = "today";
      }
      if (d === Px.ⵠᐃⵠⵠΔᐃΔ) {
        d = "kill";
      } else if (Px.ΔⲆΔᐃᐃΔΔ === d) {
        d = "score";
      } else if (d === Px.ᐃΔΔⵠᐃΔᐃ) {
        d = "time";
      }
      var f = new XMLHttpRequest();
      f.open("GET", by + "leaderboard?range=" + b + "&mode=" + c + "&sort=" + d + "&season=" + e);
      f.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      f.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && f.responseText !== "0") {
          for (var a = JSON.parse(f.responseText), b = "", c = 0; c < a.length; c++) {
            ⵠΔΔⲆΔ = a[c];
            var d = ⵠΔΔⲆΔ[1];
            try {
              if (d.indexOf("Starver#") === -1) {
                d = oc.decodeURIComponent(oc.escape(oc.atob(d)));
              }
            } catch (a) {}
            b += "<div class=\"lineLeaderboard\">";
            b += "<div class=\"rank\">";
            b += c + 1 + "";
            b += "</div>";
            b += "<div class=\"name\">";
            b += d;
            b += "</div>";
            b += "<div class=\"lvl\">";
            b += Px.ΔⵠⵠᐃⵠⵠΔ(ⵠΔΔⲆΔ[6]) + 1 + "";
            b += "</div>";
            b += "<div class=\"kills\">";
            b += ⵠΔΔⲆΔ[5] + "";
            b += "</div>";
            b += "<div class=\"time\">";
            b += ⵠΔΔⲆΔ[4] + "";
            b += "</div>";
            b += "<div class=\"score\">";
            b += ⵠΔΔⲆΔ[3] + "";
            b += "</div>";
            b += "</div>";
          }
          document.getElementById("leaderboard").innerHTML = b;
        }
      };
      f.send();
    }
  }
  function Ny() {
    var a = new XMLHttpRequest();
    a.open("GET", by + "claimBread?userid=" + sy);
    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    a.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
        var b = Number(a.responseText);
        if (!isNaN(b)) {
          Px.ⵠΔⵠⲆᐃ = b;
        }
      }
    };
    a.send();
  }
  function Oy(a, b) {
    if (Px.ⵠⲆΔⲆᐃ <= 0) {
      if (b > Px.ⵠΔⵠⲆᐃ) {
        Px.ⲆⵠⲆᐃ(Px.ⵠᐃΔΔⲆ);
      } else {
        Px.ⵠⲆΔⲆᐃ = 2;
        Px.ΔⵠⵠᐃⵠΔΔ = 0;
        Px.ⲆΔᐃᐃΔᐃⲆ = 100;
        var c = new XMLHttpRequest();
        c.open("GET", by + "buySpin?token=" + qy + "&userid=" + sy + "&spin=" + a);
        c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        c.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200) {
            if (c.responseText !== "0") {
              var a = JSON.parse(c.responseText);
              Px.ⵠⲆⵠΔⲆᐃⲆΔᐃ(Math.PI * a.rand * 2, a.type, a.id);
              Px.ⵠΔⵠⲆᐃ -= b;
            } else {
              Px.ⵠⲆΔⲆᐃ = 0;
            }
          }
        };
        c.send();
      }
    }
  }
  function Fy(a, b) {
    if (b > Px.ⵠΔⵠⲆᐃ) {
      Px.ⲆⵠⲆᐃ(Px.ⵠᐃΔΔⲆ);
    } else {
      var c = new XMLHttpRequest();
      c.open("GET", by + "buyKit?token=" + qy + "&userid=" + sy + "&kit=" + a);
      c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      c.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && c.responseText !== "0") {
          var a = JSON.parse(c.responseText);
          Px.ⵠΔⵠⲆᐃ -= b;
          Px.ΔⵠⵠΔⵠ = Date.now() + Number(a);
        }
      };
      c.send();
    }
  }
  function jy() {
    if (oc.FB) {
      oc.FB.init({
        appId: "642017356260407",
        version: "v15.0",
        cookie: true,
        xfbml: wi
      });
    }
    if (Yg === sy) {
      (function () {
        try {
          if (oc.FB && oc.FB.getUserID()) {
            sy = oc.FB.getUserID();
            if (qy === undefined) {
              oc.FB.getLoginStatus(function () {
                py = my;
                qy = oc.FB.getAuthResponse().accessToken;
                oc.ⲆⵠᐃⲆΔⲆⵠ(sy);
              });
            }
          }
        } catch (a) {}
        try {
          sy = Ay.getBasicProfile().getId();
        } catch (a) {}
      })();
    }
  }
  oc.onload = function () {
    oc.gapi.load("auth2", Gy);
  };
})();
